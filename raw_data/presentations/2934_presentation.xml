<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hails: Protecting Data Privacy in Untrusted Web Applications</p>
    <p>Daniel B. Giffin, Amit Levy, Deian Stefan, David Terei, John Mitchell, David Mazires, and Alejandro Russo</p>
  </div>
  <div class="page">
    <p>Web platforms are great! They allow third-party developers to build apps that use our personal data.</p>
  </div>
  <div class="page">
    <p>Web platforms are scary! They allow third-party developers to build apps that use our personal data.</p>
  </div>
  <div class="page">
    <p>Dont know the developers  Cannot determine trustworthiness of apps</p>
    <p>They may be malicious or security-unaware</p>
    <p>Building secure web apps is hard  Even well-meaning authors cannot be trusted</p>
    <p>Trust concerns</p>
  </div>
  <div class="page">
    <p>Typical App Design</p>
    <p>Use popular MVC paradigm</p>
    <p>Model: interface to data View: renders pages</p>
    <p>Controller: handles and responds to HTTP requests</p>
    <p>Jens Browser</p>
    <p>ModelView</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>How is security policy specified and enforced?  E.g., only Jens friends may see her email address</p>
    <p>Typical App Design</p>
    <p>Jens Browser</p>
    <p>ModelView</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Error prone and not scalable</p>
    <p>How is security policy specified and enforced?  E.g., only Jens friends may see her email address</p>
    <p>Intertwined throughout code</p>
    <p>Typical App Design</p>
    <p>Jens Browser</p>
    <p>ModelView</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Can decide to give an app access to data, but cant control how the app uses your data.</p>
    <p>Platform solutions</p>
  </div>
  <div class="page">
    <p>Is there any hope for privacy on platforms?</p>
  </div>
  <div class="page">
    <p>Change the hosting model</p>
    <p>Current model  App developers host their own apps  Platform enforces security: terms of service</p>
    <p>New model  Platform provider hosts apps  Platform enforces security: information flow control</p>
  </div>
  <div class="page">
    <p>Hails: A web platform framework</p>
    <p>Security policy is explicit and first-class  Specified as single concise module</p>
    <p>Users still trust core platform components</p>
    <p>Apps are untrusted  Language-level information flow control guarantees apps always obey policy</p>
  </div>
  <div class="page">
    <p>What makes Hails different?</p>
    <p>Aeolus, HiStar, Nexus, Jif, Ur/Web, ...</p>
    <p>No guide for structuring applications</p>
    <p>Policies are hard to write</p>
    <p>Not appropriate for dynamic systems, e.g., web</p>
    <p>Modify entire application stack</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Deployable today!</p>
    <p>Usable by web developers</p>
    <p>Suitable for building extensible web platforms  Enforcing policy across untrusted apps</p>
  </div>
  <div class="page">
    <p>Adding Policy to MVC</p>
    <p>New paradigm: Model-Policy-View-Controller</p>
    <p>Policy specified alongside data model</p>
    <p>No policy code in View or Controller</p>
  </div>
  <div class="page">
    <p>Implement UI and other functionality</p>
    <p>Users need not trust VCs</p>
    <p>Specify data model and policy on data</p>
    <p>Users trust MPs they use to handle data</p>
    <p>Two categories of code Models-Polices (MPs) Views-Controllers (VCs)</p>
    <p>+ +</p>
    <p>Policy enforced globally</p>
  </div>
  <div class="page">
    <p>Information flow control  Policy specifies where data can flow</p>
    <p>Wrong: app cant read Jens email address because it may leak it to Eve  Right: app can read Jens email, but only reveal it to Jen, Alice or Bob</p>
    <p>Policy follows data through system</p>
    <p>Runtime enforces policy end-to-end  E.g., when making HTTP request</p>
  </div>
  <div class="page">
    <p>Case study: GitStar</p>
  </div>
  <div class="page">
    <p>GitStar provides  MPs that specify projects and users  VC for managing projects and users</p>
    <p>Third-party authors provide  Code viewer  Wiki  Follower app  etc.</p>
    <p>Case study: GitStar</p>
    <p>CodeViewer Wiki PM</p>
    <p>GitStar MPs +</p>
    <p>... Untrusted VCs:</p>
  </div>
  <div class="page">
    <p>Model-Policy View-Controller</p>
    <p>+ +</p>
  </div>
  <div class="page">
    <p>Data model: document-oriented  Collection: set of documents  Document: set of field-value pairs</p>
    <p>Model-Policy (MP)</p>
    <p>Name Value</p>
    <p>user jen</p>
    <p>email jen@ friends [alice, bob,  ]</p>
    <p>Name Value</p>
    <p>user jen</p>
    <p>email jen@ friends [alice, bob,  ]</p>
    <p>Field Value</p>
    <p>user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>users collection:</p>
  </div>
  <div class="page">
    <p>Data model: document-oriented  Collection: set of documents  Document: set of field-value pairs</p>
    <p>Model-Policy (MP)</p>
    <p>Name Value</p>
    <p>user jen</p>
    <p>email jen@ friends [alice, bob,  ]</p>
    <p>Name Value</p>
    <p>user jen</p>
    <p>email jen@ friends [alice, bob,  ]</p>
    <p>Field Value</p>
    <p>user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>users collection:</p>
  </div>
  <div class="page">
    <p>Policy specifies restrictions on:  Collections, documents, fields  E.g., only Jen may modify her profile  E.g., only Jen and her friends may read her email address</p>
    <p>Policy composes  E.g., to read document you must be able to read the collection</p>
    <p>Model-Policy (MP)</p>
  </div>
  <div class="page">
    <p>MP:</p>
    <p>Eves untrusted address book VC:</p>
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Field Value</p>
    <p>user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>GitStar User MP +</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Eves server</p>
    <p>Allow?</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Eves server</p>
    <p>Allow?</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>Field Value user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>jen@aol.com Field Value user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>jen@aol.com Field Value user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>Allow?</p>
    <p>Eves server</p>
    <p>jen@aol.com</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>jen@aol.com Field Value user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>Eves server</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>jen@aol.com Field Value user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>Eves server</p>
    <p>jen@aol.com</p>
    <p>Allow?</p>
  </div>
  <div class="page">
    <p>Example: Enforcing policy</p>
    <p>AddrBook</p>
    <p>Bobs Browser</p>
    <p>findEmail users user Jen</p>
    <p>GitStar User MP +</p>
    <p>Eves spam server</p>
    <p>jen@aol.com Field Value user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only Jen, Alice and Bob can read</p>
    <p>Eves server</p>
    <p>jen@aol.com</p>
    <p>Allow?</p>
  </div>
  <div class="page">
    <p>Web app data models already encode policy  Ownership  Relationships between users</p>
    <p>Policy specified in terms of data</p>
    <p>Field Value</p>
    <p>user Jen</p>
    <p>email jen@aol.com</p>
    <p>friends [Alice, Bob]</p>
    <p>Policy: Only user can modify</p>
    <p>Policy: Only user and friends can read</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Collection is public</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Index documents by user names</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Only Jen can modify document fields</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Only Jen, Alice and Bob can read Jens email address</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>collection users $ do access $ do readers ==&gt; anybody writers ==&gt; anybody field user key document $ doc -&gt; do readers ==&gt; anybody writers ==&gt; (user `from` doc) field email $ labeled $ doc -&gt; do readers ==&gt; (user `from` doc)  fromList (friends `from` doc) writers ==&gt; anybody</p>
    <p>Example: Policy specification</p>
  </div>
  <div class="page">
    <p>Model-Policy View-Controller</p>
    <p>+ +</p>
  </div>
  <div class="page">
    <p>View-Controller (VC)</p>
    <p>A VC is a request handler</p>
    <p>Provide application functionality  E.g., source code browser, blog editor,</p>
    <p>Invoke MPs to store/fetch user data</p>
    <p>Bugs in VCs are never vulnerabilities  Runtime enforces security policy</p>
  </div>
  <div class="page">
    <p>Model-Policy View-Controller</p>
    <p>+ +</p>
  </div>
  <div class="page">
    <p>Implications of MPVC</p>
    <p>Users: choose VCs based on functionality</p>
    <p>Devs: build apps on top of existing user-data  Models and policies are reusable</p>
  </div>
  <div class="page">
    <p>GitStar Project MP +</p>
    <p>Code viewer VC Wiki VC</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Hails is a Haskell library  Quick turnaround on API design  Developers can use existing tools and libraries</p>
    <p>Hails runtime system  Provides HTTP server that invokes VC  Enforces information flow at the language-level</p>
  </div>
  <div class="page">
    <p>Evaluation: Usability</p>
    <p>MPVC simplifies reasoning about security when building a platform</p>
    <p>Hails renders common security bugs futile E.g., mass assignment vulnerability</p>
    <p>Need scaffolding tools</p>
    <p>Writing raw policy is hard</p>
    <p>Writing policy with DSL is simpler</p>
  </div>
  <div class="page">
    <p>Performance evaluation</p>
    <p>Pong Table DB Read DB Write</p>
    <p>N o rm</p>
    <p>al iz</p>
    <p>ed R</p>
    <p>eq ue</p>
    <p>st s/</p>
    <p>Se co</p>
    <p>nd s</p>
    <p>Hails Sinatra Apache PHP</p>
    <p>Java Jetty</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Current platforms: functionality vs. privacy</p>
    <p>Hails platforms guarantee security across apps  Host apps on platform  Make policy explicit  Enforce policy with information flow control</p>
    <p>http://gitstar.com http://hails.io</p>
    <p>$ cabal install hails</p>
  </div>
</Presentation>
