<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GraphQ: Graph Query Processing with Abstraction Refinement</p>
    <p>-- Scalable and Programmable Analytics over Very Large Graphs on a Single PC</p>
    <p>Kai Wang, Guoqing Xu, University of California, Irvine Zhendong Su, University of California, Davis Yu David Liu, SUNY at Binghamton</p>
  </div>
  <div class="page">
    <p>Big Graph Is Everywhere</p>
  </div>
  <div class="page">
    <p>The existing graph processing systems all focus on whole graph computation, its timeconsuming  Pregelix, [Y. Bu et al., VLDB15]</p>
    <p>e.g., 32-node cluster, 30 minutes, 70GB web graph</p>
    <p>The whole graph computation seems an overkill for some real-world applications</p>
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Find one path between LA and NYC within a certain distance</p>
    <p>Find a target group in Southern California with given property (e.g., size)</p>
    <p>Find a website with a very high Page Rank value</p>
    <p>Analytical Queries</p>
    <p>Observation: Many queries can be answered by exploring only a small fraction of the input graph</p>
  </div>
  <div class="page">
    <p>Can we answer analytical queries efficiently by doing computation on partial graphs?</p>
    <p>If partial graphs are sufficient, can we process on a single PC without resorting to clusters?  GraphChi [A. Kyrola et al., OSDI12]  X-Stream [A. Roy et al., SOSP13]</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>GraphQ  Graph Query Processing with Abstraction Refinement over Very Large Graphs on a Single PC</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Graph G = (V,E)  each vertex v  V has an associated value  each edge e  E has an associated value  Vertex and edge values can be modified</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Vertex V  Read values from incoming edges  Update(user-defined function)  Write values to out-going edges</p>
    <p>V</p>
    <p>Vertex Centric Programming Model</p>
  </div>
  <div class="page">
    <p>Divide whole graph into partitions</p>
    <p>Compute local solutions on subgraphs without inter-partition edges</p>
    <p>Check if query answered</p>
    <p>Yes, finish</p>
    <p>No, merge partitions A broader scope of query answering</p>
    <p>Reach memory budget, terminate</p>
    <p>Overview</p>
  </div>
  <div class="page">
    <p>Find  entities from the graph with a given quantitative property</p>
    <p>How To Use GraphQ</p>
  </div>
  <div class="page">
    <p>Select partitions to merge, hoping that the query can be answered by merging only a very small number of partitions</p>
    <p>Goal</p>
  </div>
  <div class="page">
    <p>Abstraction Refinement</p>
    <p>[Clarke et al., CAV00]  Abstraction</p>
    <p>Build abstraction graph to summarize the concrete graph. Abstraction graph serves as a navigation map for checking edge feasibility</p>
    <p>Refinement Merge partitions, recover inter-partition edges to provide a broader scope for query answering</p>
  </div>
  <div class="page">
    <p>An abstraction graph summarizes a concrete graph using abstraction function A sound abstraction:</p>
    <p>All concrete vertices have abstract vertices  Edge feasibility: If there is no abstract edge, it is</p>
    <p>guaranteed there is no concrete edge</p>
    <p>Abstraction Function</p>
  </div>
  <div class="page">
    <p>Partition Initial Phase Check Phase Refine Phase Local results have priorities</p>
    <p>Select results with highest priority</p>
    <p>Consultation of abstraction graph</p>
    <p>Select partitions to merge</p>
    <p>In memory</p>
  </div>
  <div class="page">
    <p>Partition Initial Phase Check Phase Refine Phase Local results have priorities</p>
    <p>Select results with highest priority</p>
    <p>Consultation of abstraction graph</p>
    <p>Select partitions to merge</p>
    <p>Recover inter-partition edges</p>
  </div>
  <div class="page">
    <p>Partition Initial Phase Check Phase Refine Phase Local results have priorities</p>
    <p>Select results with highest priority</p>
    <p>Consultation of abstraction graph</p>
    <p>Select partitions to merge</p>
    <p>Recover inter-partition edges</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>A directed graph</p>
    <p>Divide concrete graph into three partitions:</p>
    <p>A: {1,2,3} B: {4,5,6} C: {7,8,9}</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>A directed graph The abstraction graph</p>
    <p>Is there a clique, whose size is no less than 5?</p>
    <p>Interval domain [P. Cousot et al., POPL77]</p>
  </div>
  <div class="page">
    <p>Initial Phase</p>
    <p>A directed graph</p>
    <p>Four local cliques {1,2,3} {4,6} {5} {7,8,9}</p>
    <p>Clique size &gt;= 5?</p>
    <p>NO!</p>
    <p>Is there a clique, whose size is no less than 5?</p>
  </div>
  <div class="page">
    <p>Refine Phase</p>
    <p>A directed graph The abstraction graph</p>
    <p>{1,2,3} + {7,8,9} ?</p>
    <p>{1,2,3} + {4, 6} ?</p>
    <p>NO!</p>
    <p>MAYBE!</p>
  </div>
  <div class="page">
    <p>A directed graph The abstraction graph</p>
    <p>Refine Phase Merge partitions</p>
    <p>A and B</p>
    <p>A</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>A directed graph The abstraction graph</p>
    <p>Refine Phase</p>
    <p>A new clique {1,2,3,4,6}</p>
  </div>
  <div class="page">
    <p>Works for a class of queries with monotone update functions</p>
    <p>Doesnt answer all kinds of queries  Belief propagation, probability in a vertex may</p>
    <p>fluctuate</p>
    <p>Answerability</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Based on GraphChi[A. Kyrola et al., OSDI12], a single-machine graph processing system  Modify shard construction in preprocessing  Abstraction Graph Construction  Modify parallel sliding window</p>
    <p>More details in the paper</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Test setup  10GB RAM  256GB SSD  Intel Core i5, 3.2GHz</p>
    <p>Input graphs:  twitter-2010: 42M vertices, 1.5B edges  uk-2005: 39M vertices, 0.75B edges</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Queries Page Rank, Max Clique, Community Detection, SSSP, Triangle Counting</p>
    <p>Methodology Three sets of experiments  Queries with various goals: find  entities with a given</p>
    <p>quantitative property  Comparison between GraphQ and modified GraphChi  Vary abstraction granularity</p>
  </div>
  <div class="page">
    <p>How To Make Queries</p>
    <p>Run whole graph computation on GraphChi and get all results</p>
    <p>Select top100 values  Divide into intervals, each interval has a lower</p>
    <p>bound and an upper bound value  Generate 20 queries for each interval</p>
  </div>
  <div class="page">
    <p>Page Rank queries over uk-2005</p>
    <p>top60-100</p>
    <p>top40-60</p>
    <p>top20-40</p>
    <p>top10-20</p>
    <p>GraphChi GraphQ  = 1</p>
    <p>GraphQ  = 2</p>
    <p>GraphQ  = 4</p>
    <p>GraphQ  = 8</p>
    <p>Ru nn</p>
    <p>in g</p>
    <p>T im</p>
    <p>e( s)</p>
  </div>
  <div class="page">
    <p>Top 80-100 60-80 40-60 20-40 20-10</p>
    <p>Community</p>
    <p>=1 =4 =8 =16</p>
    <p>Community Detection over twitter-2010 Max:7.5X, Min:1.3X, GeoMean:3.8X</p>
    <p>Ratios:</p>
    <p>modified GraphChi and GraphQ</p>
    <p>Intervals of Top 100 Community size</p>
  </div>
  <div class="page">
    <p>Page Rank queries over twitter-2010</p>
    <p>Intervals of Top 100 Page Rank values</p>
    <p>Ru nn</p>
    <p>in g</p>
    <p>Ti m</p>
    <p>e of</p>
    <p>G ra</p>
    <p>ph Q</p>
    <p>(s )</p>
    <p>Top80-100 60-80 40-60 20-40 10-20</p>
  </div>
  <div class="page">
    <p>GraphQ, a graph query answering system based on abstraction refinement</p>
    <p>Efficiently answer analytical queries over partial graphs</p>
    <p>Open up new possibilities to scale up Big Graph processing with small amounts of resources</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
  </div>
</Presentation>
