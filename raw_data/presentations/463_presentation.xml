<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SSLShader: Cheap SSL Acceleration with</p>
    <p>Commodity Processors</p>
    <p>Keon Jang+, Sangjin Han+, Seungyeop Han*,</p>
    <p>Sue Moon+, and KyoungSoo Park+</p>
    <p>KAIST+ and University of Washington*</p>
  </div>
  <div class="page">
    <p>Security of Paper Submission Websites</p>
    <p>Network and Distributed System Security Symposium</p>
  </div>
  <div class="page">
    <p>Security Threats in the Internet</p>
    <p>Public WiFi without encryption</p>
    <p>Easy target that requires almost no effort</p>
    <p>Deep packet inspection by governments</p>
    <p>Used for censorship</p>
    <p>In the name of national security</p>
    <p>NebuAds targeted advertisement</p>
    <p>Modify users Web traffic in the middle</p>
  </div>
  <div class="page">
    <p>Secure Sockets Layer (SSL)</p>
    <p>A de-facto standard for secure communication</p>
    <p>Authentication, Confidentiality, Content integrity</p>
    <p>Client Server TCP handshake</p>
    <p>Encrypted data</p>
    <p>Key exchange using public key algorithm</p>
    <p>(e.g., RSA) Server identification</p>
  </div>
  <div class="page">
    <p>SSL Deployment Status</p>
    <p>Most of Web-sites are not SSL-protected</p>
    <p>Less than 0.5%  [NETCRAFT Survey Jan 09]</p>
    <p>Why is SSL not ubiquitous?</p>
    <p>Small sites: lack of recognition, manageability, etc.</p>
    <p>Large sites: cost</p>
    <p>SSL requires lots of computation power</p>
  </div>
  <div class="page">
    <p>SSL Computation Overhead</p>
    <p>Performance overhead (HTTPS vs. HTTP)</p>
    <p>Connection setup</p>
    <p>Data transfer</p>
    <p>Good privacy is expensive</p>
    <p>More servers</p>
    <p>H/W SSL accelerators</p>
    <p>Our suggestion:</p>
    <p>Offload SSL computation to GPU</p>
  </div>
  <div class="page">
    <p>SSL-accelerator leveraging GPU</p>
    <p>High-performance</p>
    <p>Cost-effective</p>
    <p>SSL reverse proxy</p>
    <p>No modification on existing servers</p>
    <p>SSLShader</p>
    <p>SSLShader</p>
    <p>Web Server</p>
    <p>SMTP Server</p>
    <p>POP3 Server</p>
    <p>Plain TCP SSL-encrypted session</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>GPU cryptography optimization</p>
    <p>The fastest RSA on GPU</p>
    <p>Superior to high-end hardware accelerators</p>
    <p>Low latency</p>
    <p>SSLShader</p>
    <p>Complete system exploiting GPU for SSL processing</p>
    <p>Batch processing</p>
    <p>Pipelining</p>
    <p>Opportunistic offloading</p>
    <p>Scaling with multiple cores and NUMA nodes</p>
  </div>
  <div class="page">
    <p>CRYPTOGRAPHIC PROCESSING</p>
    <p>WITH GPU</p>
  </div>
  <div class="page">
    <p>How GPU Differs From CPU?</p>
    <p>Intel Xeon 5650 CPU:</p>
    <p>Control</p>
    <p>ALU</p>
    <p>ALU</p>
    <p>ALU</p>
    <p>ALU</p>
    <p>ALU ALU</p>
    <p>Cache</p>
    <p>ALU</p>
    <p>Core</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>void VecAdd(</p>
    <p>int *A, int *B, int *C, int N)</p>
    <p>{</p>
    <p>//iterate over N elements</p>
    <p>for(int i = 0; i &lt; N; i++)</p>
    <p>C[i] = A[i] + B[i]</p>
    <p>}</p>
    <p>VecAdd(A, B, C, N);</p>
    <p>__global__ void VecAdd(</p>
    <p>int *A, int *B, int *C)</p>
    <p>{</p>
    <p>int i = threadIdx.x;</p>
    <p>C[i] = A[i] + B[i]</p>
    <p>}</p>
    <p>//Launch N threads</p>
    <p>VecAdd&lt;&lt;&lt;1, N&gt;&gt;&gt;(A, B, C);</p>
    <p>Single Instruction Multiple Threads (SIMT)</p>
    <p>GPU code CPU code</p>
    <p>Example code: vector addition (C = A + B)</p>
  </div>
  <div class="page">
    <p>Parallelism in SSL Processing</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client N 1. Independent Sessions</p>
    <p>SSL Record SSL Record SSL Record 2. Independent SSL Record</p>
    <p>SSLShader</p>
  </div>
  <div class="page">
    <p>Our GPU Implementation</p>
    <p>Choices of cipher-suite</p>
    <p>Optimization of GPU algorithms  Exploiting massive parallel processing</p>
    <p>Parallelization of algorithms</p>
    <p>Batch processing</p>
    <p>Data copy overhead is significant</p>
    <p>Concurrent copy and execution</p>
    <p>-_</p>
    <p>Client Server</p>
    <p>Encryption: AES Message Authentication: SHA1</p>
    <p>Key exchange: RSA</p>
  </div>
  <div class="page">
    <p>Basic RSA Operations</p>
    <p>M: plain-text, C: cipher-text</p>
    <p>(e, n): public key, (d, n): private key</p>
    <p>Encryption:</p>
    <p>C = Me mod n</p>
    <p>Decryption:</p>
    <p>M = Cd mod n</p>
    <p>Small number: 3, 17, 65537</p>
    <p>Decryption at the server side is the bottleneck</p>
    <p>Exponentiation  many multiplications</p>
    <p>Server-side</p>
    <p>Server</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Breakdown of Large Integer Multiplication</p>
    <p>Schoolbook multiplication</p>
    <p>+ 360000 --------</p>
    <p>Accumulation is difficult to parallelize due to</p>
    <p>overlapping digits</p>
    <p>carry propagation</p>
  </div>
  <div class="page">
    <p>O(s) Parallel Multiplications</p>
    <p>Example of 649 x 627 = 406,923</p>
    <p>s = # of words in a large integer (E.g., 1024-bits = 16 x 64 bits word)</p>
  </div>
  <div class="page">
    <p>More Optimizations on RSA</p>
    <p>Common optimizations for RSA  Chinese Remainder Theorem (CRT)  Montgomery Multiplication  Constant Length Non-zero Window (CLNW)</p>
    <p>Parallelization of serial algorithms  Faster Calculation of Mn  Interleaving of T + Mn  Mixed-Radix Conversion Offloading</p>
    <p>GPU specific optimizations  Warp Utilization  Loop Unrolling  Elimination of Divergence  Avoiding Bank Conflicts  Instruction-Level Optimization</p>
    <p>Throughput (operations/s)</p>
    <p>Initial (1)</p>
    <p>(2)</p>
    <p>(3) Warp</p>
    <p>Utilization</p>
    <p>(4)</p>
    <p>(5) (6) 64-bit words (7) Avoiding bank</p>
    <p>conflicts</p>
    <p>(8) Instruction-level</p>
    <p>Optimization CLNW (9) Post-exponentiation offloading</p>
    <p>Read our paper for details</p>
  </div>
  <div class="page">
    <p>Parallelism in SSL Processing</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client N 1. Independent Sessions</p>
    <p>SSL Record SSL Record SSL Record 2. Independent SSL Record</p>
    <p>SSLShader</p>
    <p>Batch Processing</p>
  </div>
  <div class="page">
    <p>GTX580 Throughput w/o Batching</p>
    <p>RSA AES-ENC AES-DEC SHA1</p>
    <p>Throughput relative to a single CPU core</p>
    <p>Intel Nehalem single core (2.66Ghz)</p>
  </div>
  <div class="page">
    <p>RSA AES-ENC AES-DEC SHA1</p>
    <p>Throughput relative to a &quot;single CPU core&quot;</p>
    <p>GTX580 Throughput w/ Batching</p>
    <p>Difference: ratio of computation to copy</p>
    <p>Batch size: 32~4096 depending on the algorithm</p>
  </div>
  <div class="page">
    <p>Copy Overhead in GPU Cryptography</p>
    <p>GPU processing works by</p>
    <p>Data copy: CPU  GPU</p>
    <p>Execution in GPU</p>
    <p>Data copy: GPU -&gt; CPU</p>
    <p>AES-ENC (Gbps)</p>
    <p>AES-DEC (Gbps)</p>
    <p>HMAC-SHA1 (Gbps)</p>
    <p>GTX580 w/ copy 8.8 10 31</p>
    <p>GTX580 no copy 21.8 33 124</p>
    <p>AES-ENC AES-DEC HMAC-SHA1</p>
    <p>T h</p>
    <p>r o</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(G b</p>
    <p>p s)</p>
    <p>2.4x 3.3x</p>
    <p>4x</p>
    <p>w/o copy</p>
    <p>w/ copy</p>
    <p>w/o copy</p>
  </div>
  <div class="page">
    <p>Hiding Copy Overhead</p>
    <p>Synchronous Execution</p>
    <p>Pipelining</p>
    <p>Processing time : 3t</p>
    <p>t</p>
    <p>Amortized processing time : t</p>
    <p>Data copy: CPU -&gt; GPU</p>
    <p>Execution in GPU</p>
    <p>Data copy: GPU -&gt; CPU</p>
    <p>Data copy: CPU -&gt; GPU</p>
    <p>Execution in GPU</p>
    <p>Data copy: GPU -&gt; CPU</p>
  </div>
  <div class="page">
    <p>AES-ENC AES-DEC SHA1</p>
    <p>Throughput relative to a single core</p>
    <p>GTX580 Performance w/ Pipelining</p>
    <p>36%  36%</p>
    <p>51% w/o copy</p>
    <p>synchronous</p>
    <p>pipelining</p>
  </div>
  <div class="page">
    <p>Summary of GPU Cryptography</p>
    <p>Performance gain from GTX580</p>
    <p>GPU performs as fast as 9 ~ 28 CPU cores  Superior to high-end hardware accelerators</p>
    <p>Lessons  Batch processing is essential to fully utilize a GPU</p>
    <p>AES and SHA1 are bottlenecked by data copy  PCIe 3.0</p>
    <p>Integrated GPU and CPU</p>
    <p>RSA-1024 (ops/sec)</p>
    <p>AES-ENC (Gbps)</p>
    <p>AES-DEC (Gbps)</p>
    <p>SHA1 (Gbps)</p>
    <p>GTX580 91.9K 11.5 12.5 47.1</p>
    <p>CPU core 3.3K 1.3 1.3 3.3</p>
  </div>
  <div class="page">
    <p>BUILDING SSL-PROXY THAT</p>
    <p>LEVERAGES GPU</p>
  </div>
  <div class="page">
    <p>SSLShader Design Goals</p>
    <p>Use existing application without modification</p>
    <p>SSL reverse proxy</p>
    <p>Effectively leverage GPU</p>
    <p>Batching cryptographic operations</p>
    <p>Load balancing between CPU and GPU</p>
    <p>Scale performance with architecture evolution</p>
    <p>Multi-core CPUs</p>
    <p>Multiple NUMA nodes</p>
  </div>
  <div class="page">
    <p>Batching Crypto Operations</p>
    <p>Network workloads vary over time  Waiting for fixed batch size doesnt work</p>
    <p>Output queue</p>
    <p>GPU</p>
    <p>Input queue</p>
    <p>CPU</p>
    <p>GPU</p>
    <p>SSL Stack</p>
    <p>Batch size is dynamically adjusted to queue length</p>
  </div>
  <div class="page">
    <p>Balancing Load Between CPU and GPU</p>
    <p>For small batch, CPU is faster than GPU  Opportunistic offloading</p>
    <p>Output queue</p>
    <p>GPU</p>
    <p>Input queue</p>
    <p>CPU processing</p>
    <p>GPU processing when input queue length &gt; threshold</p>
    <p>GPU queue</p>
    <p>CPU</p>
    <p>Cryptographic operation Minimum Maximum</p>
    <p>RSA (1024-bit) 16 512</p>
    <p>AES Decryption 32 2048</p>
    <p>AES Encryption 128 2048</p>
    <p>HMAC-SHA1 128 2048</p>
    <p>Input queue length &gt; threshold</p>
  </div>
  <div class="page">
    <p>Scaling with Multiple Cores</p>
    <p>Per-core worker threads  Network I/O, cryptographic operation</p>
    <p>Sharing a GPU with multiple cores  More parallelism with larger batch size</p>
    <p>Output queues</p>
    <p>GPU</p>
    <p>CPU</p>
    <p>CPU</p>
    <p>CPU</p>
    <p>Input queues GPU</p>
    <p>queue CPU</p>
    <p>GPU</p>
    <p>Core0</p>
    <p>Core1</p>
    <p>Core2</p>
  </div>
  <div class="page">
    <p>Scaling with NUMA systems</p>
    <p>A process = worker threads + a GPU thread</p>
    <p>Separate process per NUMA node</p>
    <p>Minimizes data sharing across NUMA nodes</p>
    <p>CPU0</p>
    <p>IOH0</p>
    <p>GPU0</p>
    <p>RAM</p>
    <p>NIC0</p>
    <p>CPU1</p>
    <p>IOH1</p>
    <p>GPU1</p>
    <p>RAM</p>
    <p>NIC1</p>
    <p>Node 0 Node 1</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experimental configurations</p>
    <p>Model Spec Qty</p>
    <p>CPU Intel X5650 2.66Ghz x 6 croes 2</p>
    <p>GPU NVIDIA GTX580 1.5Ghz x 512 cores 2</p>
    <p>NIC Intel X520-DA2 10GbE x 2 2</p>
    <p>SSLShader+ Lighttpd</p>
    <p>Server Server</p>
    <p>Lighttpd</p>
    <p>SSLShader</p>
    <p>Lighttpd</p>
    <p>OpenSSL</p>
    <p>HTTP</p>
    <p>Clients</p>
    <p>GPU</p>
    <p>Clients</p>
    <p>HTTPS HTTPS</p>
    <p>Server Specification</p>
  </div>
  <div class="page">
    <p>Evaluation Metrics</p>
    <p>HTTPS connection handling performance</p>
    <p>Use small content size</p>
    <p>Stress on RSA computation</p>
    <p>Latency distribution at different loads</p>
    <p>Test opportunistic offloading</p>
    <p>Data transfer rate at various content size</p>
  </div>
  <div class="page">
    <p>HTTPS Connection Rate</p>
    <p>SSLShader</p>
    <p>lighttpd</p>
    <p>RSA Key Size</p>
    <p>Connections / sec</p>
  </div>
  <div class="page">
    <p>CPU Usage Breakdown (RSA 1024)</p>
    <p>Kernel NIC device driver,</p>
    <p>SSLShader, 5.31</p>
    <p>Libc , 9.88</p>
    <p>IPP + libcrypto,</p>
    <p>lighttpd, 4.9</p>
    <p>others, 4.35</p>
    <p>Kernel (Including</p>
    <p>TCP/IP stack), 60.35</p>
    <p>Current Bottleneck</p>
  </div>
  <div class="page">
    <p>Latency at Light Load</p>
    <p>C D</p>
    <p>F (</p>
    <p>% )</p>
    <p>Latency (ms)</p>
    <p>Similar latency at light load</p>
    <p>Lighttpd at 1k connections / sec</p>
    <p>SSLShader at 1k connections / sec</p>
  </div>
  <div class="page">
    <p>Latency at Heavy Load</p>
    <p>Lower latency and higher throughput at heavy load</p>
    <p>C D</p>
    <p>F (</p>
    <p>% )</p>
    <p>Latency (ms)</p>
    <p>Lighttpd at 11k connections / sec</p>
    <p>SSLShader at 29k connections / sec</p>
  </div>
  <div class="page">
    <p>Data Transfer Performance</p>
    <p>R e la</p>
    <p>ti v e P</p>
    <p>e r fo</p>
    <p>r m</p>
    <p>a n</p>
    <p>c e</p>
    <p>Content Size</p>
    <p>Lighttpd performance</p>
    <p>Typical web content size is under 100KB</p>
    <p>SSLShader: 13 Gbps</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Cryptographic algorithms in GPU</p>
    <p>Fast RSA, AES, and SHA1</p>
    <p>Superior to high-end hardware accelerators</p>
    <p>SSLShader</p>
    <p>Transparent integration</p>
    <p>Effective utilization of GPU for SSL processing</p>
    <p>Up to 6x connections / sec</p>
    <p>13 Gbps throughput</p>
    <p>Linux network stack performance</p>
    <p>Copy overhead</p>
  </div>
  <div class="page">
    <p>QUESTIONS?</p>
    <p>THANK YOU!</p>
    <p>For more details</p>
    <p>https://shader.kaist.edu/sslshader</p>
  </div>
</Presentation>
