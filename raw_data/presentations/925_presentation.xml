<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Direct Synthesis of Hardware Designs Using a SAT Solver</p>
    <p>Dr David Greaves</p>
    <p>University of Cambridge Computer Laboratory</p>
    <p>http://www.cl.cam.ac.uk/users/djg</p>
    <p>RSP 2004 Geneva (C) 2004 IEEE Computer Society</p>
  </div>
  <div class="page">
    <p>System Design is a planning problem  We deploy resources in time and space</p>
    <p>Meet the design constraints</p>
    <p>Dont use too many resources</p>
    <p>Formal proof of correctness nice to have</p>
    <p>Synthesis from Formal Spec ?  Good idea provided we can freely mix with</p>
    <p>conventional design approaches</p>
    <p>When designing a transmitter/receiver pair less actually needs to be specified.</p>
  </div>
  <div class="page">
    <p>Two Major Approaches</p>
    <p>Stepwise refinement from Formal Spec ?  Oft been mooted</p>
    <p>Hard to control in practice (mixing ?)</p>
    <p>Ultimately Syntax-directed</p>
    <p>Automatic Assembly of Parts ?  Much larger search space</p>
    <p>A huge potential spectrum of algorithms</p>
    <p>Modular approach assists engineering.</p>
  </div>
  <div class="page">
    <p>H/W Design Using SAT ?  SAT solvers today handle</p>
    <p>1000s of clauses</p>
    <p>100s of variables</p>
    <p>Take a few minutes to run</p>
    <p>Generate a stream of 1s and 0s that meet a goal</p>
    <p>An FPGA  Embodies a hardware design</p>
    <p>Is programmed by a stream of 1s and 0s</p>
  </div>
  <div class="page">
    <p>A first approach...  Define an FPGA in RTL with many free variables - the fuses.</p>
    <p>Express a design as any mixture of</p>
    <p>Regular RTL</p>
    <p>Further RTL that refers to nets in the FPGA</p>
    <p>Logical assertions over the nets and their future states</p>
    <p>Form the conjunction of the assertions viewing the RTL as a macro expansion language.</p>
    <p>SAT-solve the resulting formula quantified over all free variable settings.</p>
    <p>Back-substitute the solution into the FPGA</p>
    <p>Simplify the result using logic trimming identities</p>
    <p>Disconnected logic</p>
    <p>Boolean identities</p>
  </div>
  <div class="page">
    <p>Initial Design</p>
    <p>Flow</p>
  </div>
  <div class="page">
    <p>FPGA Definition</p>
    <p>Can use a full crossbar FPGA</p>
    <p>Not constrained by 2-D wiring</p>
    <p>X(s1) := XFUN(xs1, s1, s2, , sn, D);</p>
    <p>X(s2) := XFUN(xs2, s1, s2, ., sn, D);</p>
    <p>:=</p>
    <p>X(sn) := XFUN(xsn, s1, s2, ., sn, D); XFUN macro expands to a LUT of 2**(n + |D|) fuses.</p>
    <p>D denotes inputs to this local structure.</p>
    <p>Global clock is implied.</p>
  </div>
  <div class="page">
    <p>Future State Projection</p>
    <p>Assertions can refer to  current state: v</p>
    <p>next state: X(v)</p>
    <p>future state: X(v, n) n &gt;= 2</p>
    <p>X(a|b, n) is expanded to X(a, n) | X(b, n)</p>
    <p>X(s1, n+1) is expanded to XFUN(xs1, X(s1,n),  X(D, n))</p>
    <p>X(D) is not constrained so is further free vars for universal quantification.</p>
  </div>
  <div class="page">
    <p>Conversion to CNF</p>
    <p>Normally an Exponential Blow Up Problem!</p>
    <p>Avoid with new intermediate variables (nv)</p>
    <p>(a + b + l.r)</p>
    <p>can be converted with three new clauses:</p>
    <p>(a + b + nv) (a + !l + !r) (!nv + l) (!nv + r)</p>
    <p>This first new clause can be dropped without affecting SAT. Preserves NNF.</p>
  </div>
  <div class="page">
    <p>Universal Quantification  Our assertions must hold for all settings of the free</p>
    <p>variables (current state and current and future inputs).</p>
    <p>Form conjunction over all settings . A new exponential blow up!</p>
    <p>Also the nv variables need to be skolemised.</p>
    <p>Perhaps some input dont cares or wont happen vectors reduce the expansion.</p>
    <p>Divide clauses into disjoint support sets and quantify each set separately.</p>
  </div>
  <div class="page">
    <p>Example 1: Two Rail Signaling</p>
    <p>Examples: Cambridge Ring, Transputer.</p>
    <p>One bit per baud over two wires</p>
    <p>Here we let SAT chose the protocol</p>
  </div>
  <div class="page">
    <p>Transmitter //-------------------------// Transmitter encoder // Encoder state node bool: s0, tx1, tx2;</p>
    <p>X(tx1) := XFUN(&quot;xtx1&quot;, din, tx1, s0); X(tx2) := XFUN(&quot;xtx2&quot;, din, tx2, s0); X(s0) := XFUN(&quot;xtxs&quot;, din, tx1, tx2, s0);</p>
    <p>// Transmitter Constraints - we require a change on at least //one of the two lines.</p>
    <p>always tx1 != X(tx1) \/ tx2 != X(tx2);</p>
  </div>
  <div class="page">
    <p>Channel Model</p>
    <p>//-------------------------// Channel Model // This two wire channel may be permanently // swapped and/or inverted in one half or the other. node bool: rx1, rx2, ch_inv1, ch_inv2, ch_swap;</p>
    <p>X(ch_inv1) := ch_inv1; // These assigns mean that X(ch_inv2) := ch_inv2; // the initial value of this variable is not known X(ch_swap) := ch_swap; // but that it will not change.</p>
    <p>X(rx1) := ((ch_swap) ? tx1:tx2) ^ ch_inv1; X(rx2) := ((ch_swap) ? tx2:tx1) ^ ch_inv2;</p>
  </div>
  <div class="page">
    <p>Receiver</p>
    <p>//-------------------------// Receiver decoder node bool: srx, sry; X(dout) := XFUN(&quot;xDOUT&quot;, rx1, rx2, dout, srx, sry); X(srx) := XFUN(&quot;xSRX&quot;, rx1, rx2, dout, srx, sry); X(sry) := XFUN(xSRY, rx1, rx2, dout, srx, sry);</p>
    <p>node bool: match0, match1, match2, match3, working;</p>
    <p>match1 := X(dout,1) == din; match2 := X(dout,2) == din; match3 := X(dout,3) == din;</p>
    <p>node bool: xdel0, xdel1; working := (xdel1) ? match3: (xdel0) ? match1 : match2; always working;</p>
  </div>
  <div class="page">
    <p>Solvers Tried</p>
    <p>Chaff Version Spelt 3</p>
    <p>Walksat</p>
    <p>A homebrew BDD package</p>
    <p>SAT DIMACS file size approximately 500 kilobytes.</p>
    <p>All three solvers solved or failed identically on all problems tried.</p>
  </div>
  <div class="page">
    <p>A Conventional Solution</p>
    <p>As used on CR82.</p>
  </div>
  <div class="page">
    <p>Solution from SAT</p>
  </div>
  <div class="page">
    <p>and with channel inverted</p>
  </div>
  <div class="page">
    <p>Example 2: MFM RLL Coding</p>
    <p>Encoder and Decoder are again simple FPGAs</p>
    <p>Data needs only be transmitted every-other baud interval (clock cycle).</p>
    <p>// Run length limitation // max of three consecutive zeros. always ~A =&gt; (X(A) \/ X(A, 2) \/ X(A, 3));</p>
  </div>
  <div class="page">
    <p>MFM Receiver Spec node bool: phaser; X(phaser) := XFUN(&quot;xphix&quot;, phaser); always X(phaser) == ~phaser;</p>
    <p>node bool: match0, match1, match2, match3, match4;</p>
    <p>match0 := din == dout; match1 := din == X(dout); match2 := din == X(dout, 2); match3 := din == X(dout, 3); match4 := din == X(dout, 4);</p>
    <p>working := .. as before ;</p>
    <p>always (phaser \/ working);</p>
    <p>MFM only needs convey a data bit every other baud interval.</p>
  </div>
  <div class="page">
    <p>Example 2: Failure</p>
    <p>The MFM design could not be solved</p>
    <p>There is no solution that does not have a start up transient ?</p>
    <p>Need a method of modeling system start.</p>
  </div>
  <div class="page">
    <p>Startup Issues Examined</p>
    <p>Example: NRZIImplementation A</p>
    <p>- One cycle of delay</p>
    <p>Implementation B</p>
    <p>- Not valid at SOD.</p>
  </div>
  <div class="page">
    <p>NRZI Illustation:  Implementation A</p>
    <p>This works, but has one cycle of delay.</p>
    <p>Implementation B  No solution can be found.</p>
    <p>X(N, -1) cannot be taken to be equal to another occurrence of X(N, -1)</p>
  </div>
  <div class="page">
    <p>Adding A Phantom Reset Guard node bool: reset_0, reset_1, resetting;</p>
    <p>initial reset_0 == 1 &amp;&amp; reset_1 == 1; X(reset_0) := 0; X(reset_1) := reset_0; resetting := reset_0 | reset_1;</p>
    <p>... guts of design are unchanged ...</p>
    <p>always resetting \/ working;</p>
    <p>We can now use a model checker to generate an expression for SAT solving.</p>
    <p>The SAT solution holds in all reachable states.</p>
    <p>The reset nets are purely phantoms - they do not appear in the real hardware.</p>
    <p>(Also, we might support error-recovery specifications)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A novel approach for a few hundred fuses.</p>
    <p>But perhaps constrained to small glue-logic situations ?</p>
    <p>Designs larger than the dual rail fail during conversion to CNF (heap explodes)</p>
    <p>Better algorithms ?</p>
    <p>Use the approach at each tier in a tree ?</p>
    <p>Thankyou!</p>
  </div>
</Presentation>
