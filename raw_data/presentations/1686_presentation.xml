<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards illumina.ng a Censorship Monitors Model to Facilitate</p>
    <p>Evasion</p>
    <p>Sheharbano Kha&gt;ak*, Mobin Javed, Philip D. Anderson* and Vern Paxson</p>
    <p>* Independent Researcher  U.C. Berkeley  Interna.onal Computer Science Ins.tute</p>
  </div>
  <div class="page">
    <p>In the next 19.5 mins..</p>
    <p>Im going to talk about:</p>
    <p>How to Reverse Engineer a Censor Monitor:  Exhaus.vely probing stateful onpath censors to infer informa.on about various elements</p>
    <p>And an exemplar:  Evasion vulnerabili.es we found in the Great Firewall of China</p>
  </div>
  <div class="page">
    <p>A look at the Evasion landscape</p>
    <p>Our Work:</p>
    <p>A systema.c inves.ga.on of evasion opportuni.es</p>
    <p>Goals: - Require expensive changes to systems basic model to remedy vulnerabili.es</p>
    <p>- Require only client-side or server-side traffic manipula.on</p>
    <p>Exis.ng evasion tools:</p>
    <p>=&gt; Clayton et al. (2006) - ignore RSTs</p>
    <p>=&gt; WestChamber (2010) - send fake RSTs</p>
    <p>Brdgrd - Exploit lack of TCP reassembly for TLS nego.a.ons</p>
  </div>
  <div class="page">
    <p>Design of a Censor</p>
    <p>We draw our work mainly on the body of knowledge established by the NIDS</p>
    <p>community.</p>
    <p>Analysis Model (how to look for</p>
    <p>sensi.ve stuff in traffic) What to Censor? How to execute</p>
    <p>censorship?</p>
    <p>Tradeoff between completeness of analysis and scalability.</p>
    <p>Same problem of traffic reconstruc.on as NIDS.</p>
  </div>
  <div class="page">
    <p>On-Path Censor</p>
    <p>Client Server 10 10</p>
    <p>Probing a Censor to infer model</p>
    <p>A censor is a black-box, but with a few observables!</p>
  </div>
  <div class="page">
    <p>On-Path Censor</p>
    <p>Client Server 10 10</p>
    <p>Probing a Censor to infer model</p>
    <p>Analysis Model Infer!</p>
    <p>What to Censor?</p>
    <p>How to execute censorship?</p>
    <p>Probe packets to send</p>
    <p>Response packets to look for</p>
    <p>A censor is a black-box, but with a few observables!</p>
  </div>
  <div class="page">
    <p>Probing Methodology</p>
    <p>Test sensi.ve keywords (for e.g. Falungong) in IP /TCP segment/ HTTP request / HTTP Reply</p>
    <p>GFW censors only once it has seen a complete HTTP request.</p>
    <p>Trigger Packets</p>
    <p>Three RST packets with varying gaps in sequence numbers</p>
    <p>GFW Response Packets</p>
    <p>GFW</p>
    <p>Client Server 10 10</p>
  </div>
  <div class="page">
    <p>Model Elements to Probe</p>
    <p>For this work we focused on stateful on-path monitors</p>
    <p>(Both network and higher layers)</p>
  </div>
  <div class="page">
    <p>Three-way handshake or par.al handshake?</p>
    <p>(In all three tests, trigger packets follow handshake packets)</p>
    <p>Evasion Vulnerabili.es:  SYN Flooding  Unsynchronized monitoring</p>
    <p>Test 1a: SYN but no responding SYN-ACK</p>
    <p>Test 1b: SYN-ACK but no ini.al SYN</p>
    <p>Test 1c: Both SYN and SYN-ACK</p>
  </div>
  <div class="page">
    <p>Client Server</p>
    <p>SYN (Ini;al Sequence Number=20, TTL =3 Src. Port = 6700, Dst. Port = 7080 )</p>
    <p>Ti m e</p>
    <p>SYN (Ini;al Sequence Number=47, TTL =10 Src. Port = 6700, Dst. Port = 7080 )</p>
    <p>GFW</p>
  </div>
  <div class="page">
    <p>How to resolve ambiguous cases of temporally separated overlapping fragments/segments?</p>
    <p>Example:</p>
    <p>Tested each of the 18 possible cases for ambiguous overlap.</p>
    <p>GFW prefers:  Original IP fragment for all cases except for one case  Subsequent TCP segments for a subset of cases  Lacks reassembly capability for other TCP segment cases</p>
    <p>Ti m e</p>
  </div>
  <div class="page">
    <p>How to resolve ambiguous cases of temporally separated overlapping fragments/segments?</p>
    <p>Example:</p>
    <p>Tested each of the 18 possible cases for ambiguous overlap.</p>
    <p>GFW prefers:  Original IP fragment for all cases except for one case  Subsequent TCP segments for a subset of cases  Lacks reassembly capability for other TCP segment cases</p>
    <p>Ti m e</p>
    <p>To evade: Send sensi.ve keywords in overlapping fragments/ segments that evade GFWs reassembly policy !!</p>
    <p>(For evasion to work, server must reassemble as expected.)</p>
  </div>
  <div class="page">
    <p>How long and how much state to keep?</p>
    <p>Send increasing amounts of .me and volume of non-sensi.ve data prior to sensi.ve data</p>
    <p>GFWs state-keeping capabili.es:  Without holes: 10 hours (even with 1 GB+ worth of data)</p>
    <p>With holes: 1 hour/1 KB</p>
  </div>
  <div class="page">
    <p>How long and how much state to keep?</p>
    <p>Send increasing amounts of .me and volume of non-sensi.ve data prior to sensi.ve data</p>
    <p>GFWs state-keeping capabili.es:  Without holes: 10 hours (even with 1 GB+ worth of data)</p>
    <p>With holes: 1 hour/1 KB</p>
    <p>To evade: Exploit GFWs buffering capabili.es. DoS or cause it to evict state!!</p>
  </div>
  <div class="page">
    <p>How to determine par.es have torn down connec.on?</p>
    <p>GFW tears down on:  FIN/RST packet (even ones without ACK bit set).</p>
    <p>Test 4a: require RST (A) from one party</p>
    <p>Test 4b: require RST (A) from both par.es</p>
    <p>Test 4c: require FIN (A) from one party</p>
    <p>Test 4d: require FIN (A) from both par.es</p>
  </div>
  <div class="page">
    <p>Does the censor perform protocol valida.on?  Does it respect what different header field/values mean?  Is it complete?  How does it deal with ambiguous messages?</p>
    <p>Layer-by-layer header walk trying out possible values of each header field</p>
    <p>Here we report only interes.ng ones</p>
  </div>
  <div class="page">
    <p>TCP Exemplars:</p>
    <p>GFW accepts packets with incorrect TCP checksums</p>
    <p>GFW accepts packets that lack ACK/ have wrong ACK</p>
  </div>
  <div class="page">
    <p>TCP Exemplars:</p>
    <p>GFW accepts packets with incorrect TCP checksums</p>
    <p>GFW accepts packets that lack ACK/ have wrong ACK</p>
    <p>HTTP Exemplars (see paper for more):</p>
    <p>RFC Deviant HTTP Requests: Extra space between Request method and Request URI bypasses inspec.on GET _ _ /falungong.html HTTP/1.1\r\n</p>
    <p>GFW inspects only first 2K bytes into the request URI</p>
  </div>
  <div class="page">
    <p>Cost of Fixing Evasion Bugs</p>
    <p>TCB Crea.on</p>
    <p>TCB Destruc.on State Management</p>
    <p>Protocol Message Interpreta.on R</p>
    <p>ea ss em</p>
    <p>b ly</p>
    <p>- Kill connec.ons no longer monitored. Collateral Damage!</p>
    <p>Requires inline normaliza.on Expensive!</p>
    <p>Mostly Easy</p>
    <p>But trade off completeness</p>
    <p>for scalability</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Automated Model Extrac.on  For a given censor over .me  New censors in new countries  Assessment of Analysis Inconsistencies</p>
    <p>Evasion Tools</p>
  </div>
  <div class="page">
    <p>Q &amp; A!</p>
  </div>
</Presentation>
