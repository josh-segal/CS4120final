<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Adap%ve Placement for In-memory Storage Func%ons Ankit Bhardwaj, Chinmay Kulkarni, and Ryan Stutsman</p>
    <p>University of Utah</p>
    <p>Utah Scalable Computer Systems Lab</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Kernel-bypass key-value stores offer &lt; 10s latency, Mops throughput  Fast because they are just dumb  Inefficient  Data movement, client stalls</p>
    <p>Run application logic on the server?  Storage server can become bottleneck, effects propagates back to clients</p>
    <p>Key-ideas: Put application logic in decoupled functions  Profile invocations &amp; adaptively place to avoid bottlenecks  Challenge: efficiently shifting compute at microsecond-timescales</p>
  </div>
  <div class="page">
    <p>Disaggrega%on Improves U%liza%on and Scaling</p>
    <p>Decouple Compute &amp; Storage using Network Provision at idle Capacity</p>
    <p>Scale Independently</p>
    <p>Compute</p>
    <p>Storage</p>
  </div>
  <div class="page">
    <p>Disaggrega%on Improves U%liza%on and Scaling</p>
    <p>FaRM &lt;10s latency</p>
    <p>RAMCloud MOPS Throughput</p>
    <p>Decouple Compute &amp; Storage using Network Provision at idle Capacity</p>
    <p>Scale Independently</p>
    <p>Compute</p>
    <p>Storage</p>
  </div>
  <div class="page">
    <p>But, Data Movement Has a Cost</p>
    <p>Compute</p>
    <p>Storage D</p>
    <p>at a</p>
    <p>M ov</p>
    <p>em en</p>
    <p>t</p>
    <p>Massive Data Movement Destroys Efficiency</p>
    <p>So, push code to storage?</p>
    <p>D at</p>
    <p>a M</p>
    <p>ov em</p>
    <p>en t</p>
  </div>
  <div class="page">
    <p>Storage Function Requirements</p>
    <p>Microsecond-scale -&gt; low invocaNon cost  High-throughput, in-memory -&gt; naNve code performance  Amenable to mulN-core processing</p>
    <p>SoluNon: Splinter allows loadable compiled extensions of storage funcNons</p>
    <p>Splinter: Bare-Metal Extensions for Mul5-Tenant Low-Latency Storage</p>
  </div>
  <div class="page">
    <p>Server-side Placement Can Improve Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f t re</p>
    <p>e tra</p>
    <p>ve rs</p>
    <p>al s/</p>
    <p>se c)</p>
    <p>Traversal Depth (operations/invocation)</p>
    <p>Client-side</p>
    <p>Hash Table</p>
    <p>Client</p>
    <p>Server</p>
    <p>get()/put() over</p>
    <p>Network</p>
    <p>+RTT +RTT</p>
    <p>RTT</p>
  </div>
  <div class="page">
    <p>Server-side Placement Can Improve Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f t re</p>
    <p>e tra</p>
    <p>ve rs</p>
    <p>al s/</p>
    <p>se c)</p>
    <p>Traversal Depth (operations/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Hash Table</p>
    <p>Client</p>
    <p>Server</p>
    <p>invoke() over</p>
    <p>Network</p>
    <p>Reduces (N-1) RPCs and RTTs</p>
  </div>
  <div class="page">
    <p>Server-side Placement Can Improve Throughput</p>
    <p>Hash Table</p>
    <p>Client</p>
    <p>Server</p>
    <p>invoke() over</p>
    <p>Network0 200,000 ops/s/core</p>
    <p>FaRM</p>
    <p>Server-side</p>
    <p>Facebook TAO graph operaNons perform 2x beTer as compared to state-of-the-art system FaRM</p>
  </div>
  <div class="page">
    <p>Server-side Placement Can BoGleneck the Server</p>
    <p>Server-side placement is good for data-intensive funcNons  Compute-intensive funcNons make the server CPU boTleneck  Overloaded server stops responding to even get()/put() requests</p>
    <p>Overall system throughput drops</p>
  </div>
  <div class="page">
    <p>Server-side Placement Can Bottleneck the Server</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f i nv</p>
    <p>oc at</p>
    <p>io ns</p>
    <p>/s )</p>
    <p>Invocation Computation (cycles/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Tree Depth 2</p>
  </div>
  <div class="page">
    <p>What about Rebalancing and Load-Balancing?</p>
    <p>Workload change can happen in two ways  Workload shiFs in funcGon call distribuGon over Gme  ShiFs in per-invocaGon costs</p>
    <p>Migrate data only when the workload is stable</p>
    <p>Moving load to client and use the server CPU for migraNon</p>
    <p>Time</p>
    <p>Invoca/on Computa/on</p>
    <p>Fr eq</p>
    <p>ue nc</p>
    <p>y Lo</p>
    <p>ad</p>
  </div>
  <div class="page">
    <p>Key Insight: Decoupled Func%ons Can Run Anywhere</p>
    <p>Tenants write logically decoupled funcNons using standard get/put interface  Clients physically push and run funcNons server-side  Or the clients could run the funcNons locally</p>
  </div>
  <div class="page">
    <p>Goal: The Best of Both Worlds</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f i nv</p>
    <p>oc at</p>
    <p>io ns</p>
    <p>/s )</p>
    <p>Invocation Computation (cycles/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Ideal Data Intensive</p>
    <p>Compute Intensive</p>
  </div>
  <div class="page">
    <p>Adap%ve Storage Func%on Placement (ASFP)</p>
    <p>Client</p>
    <p>Server Ge t</p>
    <p>G et</p>
    <p>Va lid</p>
    <p>at e</p>
    <p>Co m</p>
    <p>pu te</p>
    <p>Server-side Storage FuncNon ExecuNon</p>
  </div>
  <div class="page">
    <p>Adap%ve Storage Func%on Placement (ASFP)</p>
    <p>Running heavy compute at client creates room for remaining work</p>
    <p>Client</p>
    <p>Server</p>
    <p>Client</p>
    <p>Server</p>
    <p>G et</p>
    <p>G et</p>
    <p>Va lid</p>
    <p>at e</p>
    <p>Co m</p>
    <p>pu te</p>
    <p>G et</p>
    <p>Co m</p>
    <p>pu te</p>
    <p>Co m</p>
    <p>pu te</p>
    <p>G et</p>
    <p>Va lid</p>
    <p>at e</p>
    <p>G et</p>
    <p>Co m</p>
    <p>pu te</p>
    <p>Va lid</p>
    <p>at e</p>
    <p>G et</p>
    <p>Server-side Storage FuncNon ExecuNon</p>
    <p>Pushed-back Storage FuncNon ExecuNon</p>
  </div>
  <div class="page">
    <p>Adap%ve Storage Func%on Placement (ASFP)</p>
    <p>Mechanisms  Server-side: Run Storage FuncGons, suspend, pushback to client  Client-side: RunGme, transparent remote data access  Consistency and concurrency control</p>
    <p>Policies  InvocaGon Profiling &amp; Cost Modeling  Overload detecGon</p>
  </div>
  <div class="page">
    <p>Server-side Storage Func%on Execu%on</p>
    <p>Pushback</p>
    <p>Running</p>
    <p>Ready</p>
    <p>Committed/ Aborted</p>
    <p>Offload</p>
    <p>Result</p>
    <p>Invoke</p>
    <p>Get (Local)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Validation</p>
    <p>Server Overload</p>
    <p>State Change Request Response</p>
  </div>
  <div class="page">
    <p>Server-side Storage Func%on Execu%on</p>
    <p>Pushback</p>
    <p>Running</p>
    <p>Ready</p>
    <p>Committed/ Aborted</p>
    <p>Offload</p>
    <p>Result</p>
    <p>Invoke</p>
    <p>Get (Local)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Validation</p>
    <p>Server Overload</p>
    <p>State Change Request Response</p>
  </div>
  <div class="page">
    <p>Server-side Storage Function Execution</p>
    <p>Pushback</p>
    <p>Running</p>
    <p>Ready</p>
    <p>Committed/ Aborted</p>
    <p>Offload</p>
    <p>Result</p>
    <p>Invoke</p>
    <p>Get (Local)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Validation</p>
    <p>Server Overload</p>
    <p>State Change Request Response</p>
  </div>
  <div class="page">
    <p>Server-side Storage Function Execution</p>
    <p>Pushback</p>
    <p>Running</p>
    <p>Ready</p>
    <p>Committed/ Aborted</p>
    <p>Offload</p>
    <p>Result</p>
    <p>Invoke</p>
    <p>Get (Local)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Validation</p>
    <p>Server Overload</p>
    <p>State Change Request Response</p>
  </div>
  <div class="page">
    <p>Consistency and Concurrency Control</p>
    <p>Problem: Invoke() tasks run concurrently on server on each core and pushed-back invocaNons run in parallel to the server tasks  Solu9on: Run invocaNons in strict serializable transacNons  Use opGmisGc concurrency control (OCC)</p>
    <p>Read/Write set tracking is also used in pushback  Pushback invocaGon never generate work for Server  Server dont need to maintain any state for pushed-back invocaGons</p>
  </div>
  <div class="page">
    <p>Client-side Execu%on for Pushed-back Invoca%ons</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Client-side Execu%on for Pushed-back Invoca%ons</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Client-side Execu%on for Pushed-back Invoca%ons</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Client-side Execu%on for Pushed-back Invoca%ons</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Client-side Execution for Pushed-back Invocations</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Client-side Execution for Pushed-back Invocations</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Client-side Execu%on for Pushed-back Invoca%ons</p>
    <p>ReadyCreate</p>
    <p>Awaiting Validation</p>
    <p>Awaiting Data</p>
    <p>Running</p>
    <p>Get (in local Read Set)</p>
    <p>Yield</p>
    <p>Schedule</p>
    <p>Get (Remote)</p>
    <p>Install RW Set</p>
    <p>Get</p>
    <p>Get</p>
    <p>ValidationResult</p>
    <p>Pushback</p>
    <p>State Change Request Response</p>
    <p>Completed</p>
    <p>Validate Committed/ Aborted</p>
  </div>
  <div class="page">
    <p>Adap%ve Storage Func%on Placement (ASFP)</p>
    <p>Mechanism  Server-side: Storage FuncGons, suspend, move back to client  Client-side: RunGme, transparent remote data access  Consistency and Concurrency Control</p>
    <p>Policy  Server Overload DetecGon  InvocaGon Profiling and ClassificaGon</p>
  </div>
  <div class="page">
    <p>Server Overload Detec%on</p>
    <p>Always run the invocaNons on server, if underloaded</p>
    <p>Guarantees  Start pushback only when there</p>
    <p>are some old tasks and server receives even more tasks  Keep at least  tasks even aFer</p>
    <p>pushback, to avoid server idleness  Consider only invoke() tasks for</p>
    <p>overload detecGon</p>
    <p>PollRecvQueue</p>
    <p>PacketToTask</p>
    <p>#OldTasks &gt; t</p>
    <p>#NewTasks &gt; t</p>
    <p>Classify&amp;Pushback AddTasksToQueue</p>
    <p>ExecuteTasks-RR</p>
    <p>Yes</p>
    <p>Yes</p>
    <p>No</p>
    <p>No</p>
    <p>Shenango: Achieving High CPU Efficiency for Latency-sensi5ve Datacenter Workloads</p>
    <p>Pushback</p>
  </div>
  <div class="page">
    <p>Invoca%on Profiling and Classifica%on</p>
    <p>Profile each invocaNon for Nme spent in compute and data access  Classify an invocaNon compute-bound if  Spent more Gme in compute than data access  Crossed a threshold  &gt;</p>
  </div>
  <div class="page">
    <p>Evalua%on</p>
    <p>GAINS AND COSTS RW-SET EFFECT APPLICATION MIX</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>One Server and Four Client  CPU - Ten-core Intel E5-2640v4 at 2.4 GHz  RAM - 64GB Memory (4x 16 GB DDR4-2400 DIMMs)  NIC - Mellanox CX-4, 25 Gbps Ethernet</p>
    <p>15GB Read-write set as 120M Records, 30B key and 100B value</p>
  </div>
  <div class="page">
    <p>Does ASFP improve server throughput?</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f i nv</p>
    <p>oc at</p>
    <p>io ns</p>
    <p>/s )</p>
    <p>Invocation Computation (cycles/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Pushback</p>
  </div>
  <div class="page">
    <p>What is the cost of using ASFP?</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f i nv</p>
    <p>oc at</p>
    <p>io ns</p>
    <p>/s )</p>
    <p>Invocation Computation (cycles/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Pushback</p>
  </div>
  <div class="page">
    <p>What is the cost of using ASFP?</p>
    <p>Aggressive overload detecNon</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f i nv</p>
    <p>oc at</p>
    <p>io ns</p>
    <p>/s )</p>
    <p>Invocation Computation (cycles/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Pushback</p>
  </div>
  <div class="page">
    <p>How do ASFP and OCC interact?</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>ill io</p>
    <p>ns o</p>
    <p>f i nv</p>
    <p>oc at</p>
    <p>io ns</p>
    <p>/s )</p>
    <p>Invocation Computation (cycles/invocation)</p>
    <p>Client-side Server-side</p>
    <p>Pushback Pushback-wo-rwset</p>
  </div>
  <div class="page">
    <p>Solid: Run Server-side, Hashed: Run Client-side</p>
    <p>Data Bound Compute Bound Compute Bound</p>
    <p>Does ASFP improve throughput for an Applica%on Mix?</p>
  </div>
  <div class="page">
    <p>Does ASFP improve throughput for an Applica%on Mix?</p>
    <p>More room on server to respond to more get/puts</p>
    <p>Data Bound Compute Bound Compute Bound</p>
  </div>
  <div class="page">
    <p>Does ASFP improve throughput for an Application Mix?</p>
    <p>More room on server to respond to more get/puts</p>
    <p>Data Bound Compute Bound Compute Bound</p>
  </div>
  <div class="page">
    <p>TAO  by avoiding data movement; Pushback makes room for TAO</p>
    <p>Data Bound Compute Bound Compute Bound</p>
    <p>80% higher than Server-side  10% higher than Client-side</p>
    <p>Does ASFP improve throughput for an Applica%on Mix?</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Storage Procedures, UDFs  SQL - Poor fit for specialized computaGon  Redis  Extension provided at server start Gme  Splinter- build on top of it</p>
    <p>Offloading and code migraNon in mobile and edge compuNng  MAUI  different Gmescales and use-cases</p>
    <p>Thread and Process MigraNon  Sprite, Condor  slow and unsuitable for s scale</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Kernel-bypass key-value stores offer &lt; 10s latency, Mops throughput  Fast because they are just dumb  Inefficient  Data movement, client stalls</p>
    <p>Run applicaNon logic on the server?  Storage server can become bofleneck, effects propagates back to clients</p>
    <p>AdapNvely place the invocaNons to avoid boTlenecks  Up to 42% gain for low-compute invocaGons (vs client-side)  Comparable performance for high-compute invocaGon(vs client-side)</p>
  </div>
</Presentation>
