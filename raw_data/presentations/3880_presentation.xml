<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Measuring Large Traffic Aggregates on Commodity</p>
    <p>Switches</p>
    <p>Lavanya Jose, Minlan Yu, Jennifer Rexford Princeton University, NJ</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Large traffic aggregates?</p>
    <p>- manage traffic efficiently</p>
    <p>- understand traffic structure</p>
    <p>- detect unusual activity</p>
  </div>
  <div class="page">
    <p>Aggregate at fixed prefix-length?</p>
    <p>Top 10 /24 prefixes (by how much traffic they send) - could miss individual heavy users</p>
    <p>Top 10 IP addresses  - could miss heavy subnets where each individual</p>
    <p>user is small</p>
  </div>
  <div class="page">
    <p>&gt;= a fraction T of the link capacity</p>
    <p>Aggregate at all prefix-lengths? (Heavy Hitters)</p>
    <p>HH: sends more than T= 10% of link</p>
    <p>cap. 100</p>
  </div>
  <div class="page">
    <p>Hierarchical Heavy Hitters  All the IP prefixes  &gt;= a fraction T of the link capacity  after excluding any HHH</p>
    <p>descendants.</p>
    <p>HH: sends more than T= 10% of link</p>
    <p>cap. 100 HHH:</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Offline analysis on raw packet trace [AutoFocus]</p>
    <p>- accurate but slow and expensive Streaming algorithms on Custom</p>
    <p>Hardware [Cormode08, Bandi07, Zhang04, Sketch-Based]</p>
    <p>- accurate, fast but not commodity Our Work:</p>
    <p>Commodity, fast and relatively accurate 6</p>
  </div>
  <div class="page">
    <p>Why commodity switches? - cheap, easy to deploy - let network elements monitor themselves</p>
    <p>Commodity OpenFlow switches - available from multiple vendors (HP, NEC, and</p>
    <p>Quanta)</p>
    <p>- deployed in campuses, backbone networks - wildcard rules with counters to measure traffic</p>
    <p>Priorit y Prefix Rule</p>
    <p>Coun t</p>
    <p>HHH on Commodity- Using OpenFlow</p>
  </div>
  <div class="page">
    <p>TCAM</p>
    <p>Controller Software</p>
    <p>Fetch Counts</p>
    <p>Install Rules</p>
    <p>Constraints - &lt;= N Prefix Rules</p>
    <p>SR C I</p>
    <p>P</p>
    <p>Priority Prefix Rule Coun t</p>
    <p>OpenFlow Measurement Framework</p>
    <p>Switch</p>
    <p>- Measuring Interval M - No pkts to Controller</p>
  </div>
  <div class="page">
    <p>Monitoring HHHes</p>
    <p>Priority Prefix Rule Count</p>
    <p>HHH: after excluding any descendant prefix rules</p>
    <p>TCAM: priority matching</p>
  </div>
  <div class="page">
    <p>Detecting New HHHes</p>
    <p>Monitor children of HHHes  Use at most 2/T rules</p>
  </div>
  <div class="page">
    <p>Iteratively adjust wildcard rules: - Expand</p>
    <p>If count &gt; T, install rule for child instead.</p>
    <p>- Collapse  If count &lt; T, remove rule.</p>
    <p>****</p>
    <p>Priorit y</p>
    <p>Prefix Rule</p>
    <p>Coun t</p>
    <p>Priorit y</p>
    <p>Prefix Rule</p>
    <p>Coun t</p>
    <p>Priorit y</p>
    <p>Prefix Rule</p>
    <p>Coun t</p>
    <p>Identifying New HHHes</p>
  </div>
  <div class="page">
    <p>Using Leftover Rules</p>
    <p>Why left over rules? - May not be 1/T HHHes. - May still be discovering new HHHes</p>
    <p>How to use leftover rules? - To monitor HHHes close to threshold - Data shows 2-3 new HHHes/ interval (a few secs)</p>
  </div>
  <div class="page">
    <p>Real packet trace (400K pkts/ sec) from CAIDA - Measured HHHes for T=5% and T=10% - Measuring interval M from 1-60s</p>
    <p>Evaluation- Method</p>
  </div>
  <div class="page">
    <p>Evaluation- Results</p>
    <p>20 rules to identify 88-94% of the 10%- HHHes  Accurate</p>
    <p>- Gets ~9 out of 10 HHHes - Uses left over TCAM space to quickly find HHHes - Large traffic aggregates usually stable</p>
    <p>Fast - Takes a few intervals for 1-2 new HHHes - Meanwhile aggregates at coarse levels</p>
  </div>
  <div class="page">
    <p>Stepping back not just for HHHes</p>
    <p>Framework - Adjusting &lt;= N wildcard rules - Every measuring interval M - Only match and increment per packet</p>
    <p>Can solve problems that require - Understanding a baseline of normal</p>
    <p>traffic</p>
    <p>- Quickly pinpointing large traffic aggregates</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Solving HHH problem with OpenFlow - Relatively accurate, Fast, Low overhead - Algorithm with expanding /collapsing</p>
    <p>Future work - multidimensional HHH - Generic framework for measurement</p>
    <p>Explore algorithms for DoS, large traffic changes etc.</p>
    <p>Understand overhead</p>
    <p>Combine results from different switches 16</p>
  </div>
</Presentation>
