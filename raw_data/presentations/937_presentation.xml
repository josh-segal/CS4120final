<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Experience with Rules-Based Programming for Distributed,</p>
    <p>Concurrent, Fault-Tolerant Code</p>
    <p>Ryan Stutsman, Collin Lee, and John Ousterhout</p>
    <p>University of Utah and Stanford University</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>More developers writing more code that is distributed, concurrent, fault-tolerant  1000s of logical threads of execution  Erratic control flow  No commonly accepted patterns</p>
    <p>Imperative programming breaks down  A pattern from experiences in RAMCloud: rules  Small steps whose execution order is based on state</p>
    <p>Goal: a simple approach to develop fault-tolerant code quickly/correctly</p>
  </div>
  <div class="page">
    <p>Examples of Fault-Tolerant Systems</p>
    <p>RAMCloud  Chunk replication: millions on 1000s of nodes  Node recovery: 1000s of nodes working together  Coordinate simultaneous recoveries  Cluster membership, tablet ownership, and more</p>
    <p>Coordinating Hadoop jobs, HDFS replication  Consensus-based coordination services  Chubby, ZooKeeper, LogCabin</p>
  </div>
  <div class="page">
    <p>Fault-tolerant algorithms are notoriously hard to express correctly, even as pseudo-code. This problem is worse when the code for such an algorithm is intermingled with all the other code that goes into building a complete system.</p>
    <p>T. D. Chandra, R. Griesemer, and J. Redstone. Paxos Made Live, PODC 07.</p>
    <p>Even more true when worrying about latency/performance</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Example Module: Log Replication  Today: Event-Driven State Machines  Our Approach: Rules-based Programming  Structuring Rules  Conclusion</p>
  </div>
  <div class="page">
    <p>Example: Distributed Log Replication</p>
    <p>In-Memory Log Segments</p>
    <p>Backup (Stable Storage) Servers</p>
    <p>Master Server</p>
    <p>Client Write Request</p>
    <p>Goal: create and maintain on-disk replicas for segments</p>
  </div>
  <div class="page">
    <p>Example: Distributed Log Replication</p>
    <p>Failures can occur at any time  Must go back to recreate replicas; sometimes extra steps</p>
    <p>In-Memory Log Segments</p>
    <p>Backup (Stable Storage) Servers</p>
    <p>Master Server</p>
    <p>Client Write Request</p>
  </div>
  <div class="page">
    <p>Example: Distributed Log Replication</p>
    <p>In-Memory Log Segments</p>
    <p>Backup (Stable Storage) Servers</p>
    <p>Master Server</p>
    <p>Client Write Request</p>
    <p>Failures can occur at any time  Must go back to recreate replicas; sometimes extra steps</p>
  </div>
  <div class="page">
    <p>Example: Distributed Log Replication</p>
    <p>In-Memory Log Segments</p>
    <p>Backup (Stable Storage) Servers</p>
    <p>Master Server</p>
    <p>Client Write Request</p>
    <p>Failures can occur at any time  Must go back to recreate replicas; sometimes extra steps  Even failures while handling failures  Transitions tricky: ordering constraints  shared state</p>
  </div>
  <div class="page">
    <p>100s of 1000s of logical flows of execution  Jumps at any point  complex control flow  Hard to interrupt  Shared state, holding locks? Blocking?</p>
    <p>Imperative code creates expectation of ordering  Program counter does more harm than good</p>
    <p>Result: spaghetti code, brittle, buggy 10</p>
    <p>Why Imperative Code Breaks Down</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Example Module: Log Replication  Today: Event-Driven State Machines  Our Approach: Rules-based Programming  Structuring Rules  Conclusion</p>
  </div>
  <div class="page">
    <p>In Practice: Hadoop Job Scheduler</p>
    <p>Implemented as an explicit state machine</p>
    <p>Incoming event together with distinguished state variable gives a transition  Transactions take forward steps</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B B</p>
  </div>
  <div class="page">
    <p>Hadoop Scheduler State Machine</p>
    <p>Three main tasks: Job, Task, TaskAttempt</p>
    <p>Conservatively 2,250 lines of code  750 lines just to describe the transition diagram</p>
    <p>State Machine States Transitions Distinct Transitions</p>
    <p>Job 14 82 27</p>
    <p>Task 7 24 16</p>
    <p>TaskAttempt 13 57 15</p>
    <p>Total 34 163 58</p>
  </div>
  <div class="page">
    <p>Job State Machine Diagram</p>
  </div>
  <div class="page">
    <p>TaskAttempt Transition Setup</p>
  </div>
  <div class="page">
    <p>TaskAttempt Transitions</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Example Module: Log Replication  Today: Event-Driven State Machines  Our Approach: Rules-based Programming  Structuring Rules  Conclusion</p>
  </div>
  <div class="page">
    <p>Rules-based Programming</p>
    <p>State Variables</p>
    <p>Action</p>
    <p>Action</p>
    <p>Action</p>
    <p>Trigger actions based on shared state  Execution order determined by state  Divide into short, non-blocking, atomic actions</p>
    <p>Failures handled between actions, not within  Simple deterministic control flow within an action</p>
    <p>Conditions</p>
  </div>
  <div class="page">
    <p>Rules-based Programming</p>
    <p>State Variables</p>
    <p>Action</p>
    <p>Action</p>
    <p>Action</p>
    <p>Rule: Condition + Action</p>
    <p>If unreplicated data and no RPC outstanding and prior segment footer is replicated</p>
    <p>Then start write RPC containing data</p>
    <p>Conditions</p>
  </div>
  <div class="page">
    <p>Rules-based Programming</p>
    <p>Convert all events to changes on shared state  Decouples event handling from actions</p>
    <p>State Variables</p>
    <p>Action</p>
    <p>Action</p>
    <p>Action</p>
    <p>Handler</p>
    <p>Handler</p>
    <p>ConditionsEvents</p>
  </div>
  <div class="page">
    <p>Example: Segment Replication Rules # Condition Action</p>
    <p>Start RPC containing the header</p>
    <p>Start write RPC containing up to 1 MB of unreplicated data</p>
    <p>Start RPC containing the footer</p>
    <p>On failure: reset sent/replicated bytes and RPCs 21</p>
  </div>
  <div class="page">
    <p>Mappy: Rules-based MapReduce</p>
  </div>
  <div class="page">
    <p>Comparison with State Machine</p>
    <p>&lt; 300 lines of code compared to 2,250  Each task fits on a single screen</p>
    <p>Eliminates redundancy  Explicit listing of transition diagram  Many events/event combinations may trigger same action  No need for code O(|States  Events|)</p>
    <p>State Machine States Distinct Transitions</p>
    <p>Rules</p>
    <p>Job 14 27 7</p>
    <p>Task 7 16 4</p>
    <p>TaskAttempt 13 15 8</p>
    <p>Total 34 58 19</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Example Module: Log Replication  Today: Event-Driven State Machines  Our Approach: Rules-based Programming  Structuring Rules  Conclusion</p>
  </div>
  <div class="page">
    <p>Structuring Rules</p>
    <p>How should thousands of rules be organized?  Need modularity and clear visualization  Tasks: group rules with the state they act on</p>
    <p>How can rules be evaluated efficiently?  Polling to test conditions for all rules wont scale  Pools: only check rules likely to fire</p>
  </div>
  <div class="page">
    <p>Tasks: Modularizing Rules</p>
    <p>Task: Rules, state, and a goal  Implemented as a C++ object  State: fields of the object  Rules: applied via virtual method on the object  Goal: invariant the task is intended to attain/retain</p>
    <p>Log segment replication  One task per segment  Rules send/reap RPCs, reset state on failures  Goal is met when enough complete replicas are made</p>
  </div>
  <div class="page">
    <p>Pools: Making Rules Efficient</p>
    <p>Pool: Applies rules to tasks with unmet goals  Divides tasks into active/inactive set</p>
    <p>One pool for each independent set of tasks  Serial execution within pool; easy synchronization  Parallelism only if desired; easy access to shared state</p>
    <p>Segment Replication Pool</p>
    <p>Inactive Segment Tasks</p>
  </div>
  <div class="page">
    <p>Module Task Types</p>
    <p>Rules Event Handlers</p>
    <p>Lines of Code</p>
    <p>Log Replication 1 23 3 258</p>
    <p>Recovery Coordination 4 12 2 299</p>
    <p>Master Recovery on Masters 1 3 0 230</p>
    <p>Master Recovery on Backups 1 4 2 31</p>
    <p>Membership Notifier 1 3 3 36</p>
    <p>Multi-Read 1 2 2 75</p>
    <p>Indexed Read 1 14 2 131</p>
    <p>Lines of Rules-based Code 1,060</p>
    <p>Total Source Lines 123,000</p>
    <p>Fault-Tolerant RAMCloud Modules</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Example Module: Log Replication  Today: Event-Driven State Machines  Our Approach: Rules-based Programming  Structuring Rules  Conclusion</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Threads versus events [Welsch 02], [Adya 02], [Dabek 02], [von Behren 03], [Zeldovich 03], [Krohn 07],   Neither answer how fault-handling shapes code  Mostly considered services with trivial fault-handling</p>
    <p>Actors [Hewitt], [Agha], [Haller &amp; Odersky 06],   Async communicating entities w/o shared state  Performance cost &amp; dont want unneeded async</p>
    <p>Reactive Programming [Cooper &amp;Krishnamurthi 06], [Maier 10],   Like spreadsheet: recompute when inputs change  PL concepts, then UI programming, now in services</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>More developers writing more code that is distributed, concurrent, fault-tolerant</p>
    <p>No commonly accepted patterns  A pattern from experiences in RAMCloud: rules  Small steps whose execution order is based on state  Easy to adapt on failures</p>
    <p>Simple approach to developing fault-tolerant code quickly/correctly  More understandable code  Suitable for high-performance, low-latency systems</p>
  </div>
  <div class="page">
    <p>github.com/PlatformLab/mappy</p>
  </div>
  <div class="page">
    <p>Segment Replication Latency Impact</p>
  </div>
  <div class="page">
    <p>Isnt this just state machines?</p>
    <p>Explicit states explode or hide detail  Similar to code flowcharts of the 70s  Mental model doesnt scale well to complex code</p>
    <p>Collate on state rather than on events+state  Convert all events to state  Reason about next step based on state alone</p>
    <p>Conditions (implicit states) serve as documentation  Provide strong hint about what steps are needed</p>
  </div>
  <div class="page">
    <p>Isnt this hard to debug?</p>
    <p>Loss of stack context makes debugging hard  Yes, but it would be lost even with threads  Fundamental limitation of the need to break code into reactive, reorderable blocks</p>
    <p>Best weve got so far  Dump state variables when a goal goes unmet for a long period</p>
    <p>Log aggressively for debugging  Can track causality in log (Grapevine)</p>
  </div>
  <div class="page">
    <p>Isnt this just events?</p>
    <p>Rules take actions based on state  Rather than events+state</p>
    <p>Event-based code: handler triggers all needed actions</p>
    <p>Rules-based code: events just modify state  Decouples events from rules that react to them  Event handler unaware of needed reactive steps  Add reactions without modifying event handler  Improves modularity</p>
  </div>
  <div class="page">
    <p>Dont user-level threads solve this?</p>
    <p>They help  Support 1000s of lightweight contexts  Limit interruption to well-defined points (cooperatively scheduled)</p>
    <p>Stack-trace is still of limited benefit, though  Threads must recheck for failures after resuming  Code devolves into small, non-blocking, atomic actions just as with rules</p>
    <p>Still need rules-like constructs for failures 37</p>
  </div>
  <div class="page">
    <p>What about actors?</p>
    <p>Push vs Pull  On failure, actor must push to all the right places  Breaks separation of concerns</p>
    <p>Unneeded parallelism  No shared state  Asynchronous whether you like it or not  Hard to make efficient  Locking/pushing/popping/scanning queues  Copying instead of sharing</p>
  </div>
</Presentation>
