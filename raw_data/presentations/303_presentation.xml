<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Search Combinators Tom Schrijvers</p>
    <p>with Guido Tack, Pieter Wuille, Horst Samulowitz, Peter Stuckey</p>
  </div>
  <div class="page">
    <p>Search heuristics are crucial.</p>
  </div>
  <div class="page">
    <p>Support for Search? General Purpose</p>
    <p>Programming Language</p>
    <p>everthing is possible, nothing is easy</p>
    <p>Solver-Provided Options</p>
    <p>everything is easy, nothing is possible</p>
  </div>
  <div class="page">
    <p>State-of-the-Art Modularity: Prolog</p>
    <p>label1(Vars1) , label2(Vars2)  label1(Vars1) ; label2(Vars2)  once(label1(Vars1))  once((label1(Vars1),label2(Vars2))</p>
  </div>
  <div class="page">
    <p>Lack of Modularity</p>
    <p>lds(label1(Vars1))</p>
  </div>
  <div class="page">
    <p>Lack of Modularity</p>
    <p>lds(label1(Vars1))</p>
    <p>lds((label1(Vars1) , label2(Vars2)))</p>
  </div>
  <div class="page">
    <p>Lack of Modularity</p>
    <p>lds(label1(Vars1))</p>
    <p>lds((label1(Vars1) , label2(Vars2)))</p>
    <p>lds_label1(Vars1)  lds_label1_label2(Vars1,Vars2)</p>
  </div>
  <div class="page">
    <p>Can we do better?</p>
    <p>Lots of expressivity and flexibility</p>
    <p>Lots of productivity through high-level specifications</p>
    <p>Modular reuse of search specifications</p>
  </div>
  <div class="page">
    <p>Yes: Search Combinators</p>
    <p>Everything is possible and easy</p>
    <p>High-level modular building blocks</p>
  </div>
  <div class="page">
    <p>Base Search</p>
    <p>s  int_search(vars,var_sel,val_sel)</p>
    <p>provided by the solver  augment with combinators</p>
  </div>
  <div class="page">
    <p>Combinators prune let(v,e,s) assign(v,e) post(c,s) if(c,s1,s2) and([s1, s2,..., sn]) or([s1, s2,..., sn]) portfolio([s1, s2,..., sn]) restart(c,s)</p>
  </div>
  <div class="page">
    <p>Statistics Combinators</p>
    <p>depth(v,s) discrepancy(v,s)</p>
    <p>nodes(v,s) failures(v,s) time(v,s)</p>
  </div>
  <div class="page">
    <p>Statistics Combinators</p>
    <p>depth(v,s) discrepancy(v,s)</p>
    <p>nodes(v,s) failures(v,s) time(v,s)</p>
    <p>if(v &lt; 5,depth(v,s1),s2)</p>
  </div>
  <div class="page">
    <p>Statistics Combinators</p>
    <p>depth(v,s) discrepancy(v,s)</p>
    <p>nodes(v,s) failures(v,s) time(v,s)</p>
    <p>if(v &lt; 5,depth(v,s1),s2)if(depth &lt; 5,s1,s2)</p>
  </div>
  <div class="page">
    <p>Reusable Abstractions limit(c,s)  if(c,s,prune)</p>
    <p>for(v,l,u,s)  ...</p>
    <p>lds(s)  for(n,0,, limit(discrepancy  n,s) )</p>
  </div>
  <div class="page">
    <p>Reuse Examples</p>
    <p>lds(int_search(vars,...)) lds(and([int_search(vars1,...) ,int_search(vars2,...)])</p>
    <p>lds(or([int_search(vars1,...) ,int_search(vars2,...)]) ...</p>
  </div>
  <div class="page">
    <p>More Abstractions bab(obj,s)</p>
    <p>restart_bab(obj,s)</p>
    <p>dicho(obj,s,lb,ub)</p>
    <p>id(s)</p>
    <p>hot_start(c,s1,s2) see paper</p>
  </div>
  <div class="page">
    <p>Radiotherapy Planning</p>
    <p>bab(k, and([int_search(N,...)] ++ [once(int_search(rowi,...)) | i in 1..n ] ) )</p>
  </div>
  <div class="page">
    <p>Modular Syntax</p>
    <p>vs.</p>
    <p>Semantics Modular</p>
  </div>
  <div class="page">
    <p>Modular Semantics</p>
    <p>traditional modularity:  each combinator is an atomic unit  minimal interaction</p>
    <p>search tree node</p>
  </div>
  <div class="page">
    <p>Modular Semantics</p>
    <p>traditional modularity:  each combinator is an atomic unit  minimal interaction</p>
    <p>search tree node</p>
  </div>
  <div class="page">
    <p>Modular Semantics</p>
    <p>cross-cutting behavior  highly entangled in</p>
    <p>monolithic code</p>
    <p>Aspect-Oriented Programming</p>
  </div>
  <div class="page">
    <p>Functional Mixin Inheritance</p>
    <p>disciplined form of AOP  meaningful and pre-defined set of</p>
    <p>interaction points</p>
    <p>no AOP system needed</p>
  </div>
  <div class="page">
    <p>Mixin-based Interaction</p>
    <p>success failure</p>
    <p>enter(n)</p>
    <p>more</p>
    <p>for every child c</p>
    <p>push(c) next(n',n)</p>
  </div>
  <div class="page">
    <p>Mixin-based Interaction</p>
    <p>Details: see paper</p>
    <p>success failure</p>
    <p>enter(n)</p>
    <p>more</p>
    <p>for every child c</p>
    <p>push(c) next(n',n)</p>
  </div>
  <div class="page">
    <p>Implementations</p>
    <p>Compacte Lus</p>
    <p>DSL Haskell C++ Scala</p>
    <p>Compact Loop</p>
  </div>
  <div class="page">
    <p>Implementations</p>
    <p>Zoekheuristiek Compacte Lus</p>
    <p>DSL Haskell C++ Scala</p>
    <p>Compact LoopSearch Spec</p>
  </div>
  <div class="page">
    <p>Implementations</p>
    <p>Zoekheuristiek</p>
    <p>Objectcompositie</p>
    <p>Compacte Lus</p>
    <p>DSL Haskell C++ Scala</p>
    <p>Compact LoopSearch Spec</p>
    <p>Objects</p>
    <p>Interpreted</p>
  </div>
  <div class="page">
    <p>Implementations</p>
    <p>Zoekheuristiek</p>
    <p>Objectcompositie</p>
    <p>Compacte LusCodegenerators</p>
    <p>DSL Haskell C++ Scala</p>
    <p>Compact LoopSearch Spec</p>
    <p>Objects</p>
    <p>Code Generators</p>
    <p>Interpreted</p>
    <p>Compiled</p>
  </div>
  <div class="page">
    <p>Combinator Overhead?</p>
    <p>portfolio</p>
    <p>prune</p>
    <p>base search without</p>
    <p>propagation</p>
    <p>n</p>
    <p>Worst-case Scenario</p>
    <p>ru n ti m e</p>
    <p>#combinators</p>
    <p>compiled interpreted</p>
  </div>
  <div class="page">
    <p>G ol</p>
    <p>om b</p>
    <p>G ol</p>
    <p>om b</p>
    <p>G ol</p>
    <p>om b</p>
    <p>Ra di</p>
    <p>ot he</p>
    <p>ra py</p>
    <p>Ra di</p>
    <p>ot he</p>
    <p>ra py</p>
    <p>Ra di</p>
    <p>ot he</p>
    <p>ra py</p>
    <p>Ra di</p>
    <p>ot he</p>
    <p>ra py</p>
    <p>Ra di</p>
    <p>ot he</p>
    <p>ra py</p>
    <p>Jo b</p>
    <p>sh op</p>
    <p>G 2</p>
    <p>Jo b</p>
    <p>sh op</p>
    <p>H 5</p>
    <p>Jo b</p>
    <p>sh op</p>
    <p>H 3</p>
    <p>Jo b</p>
    <p>sh op</p>
    <p>A BZ</p>
    <p>Jo b</p>
    <p>sh op</p>
    <p>m t1</p>
    <p>In Practice propagation dwarfs combinator overhead</p>
    <p>Gecode Interpreted Compiled</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>high-level modular modeling of search</p>
    <p>low-level modular implementation</p>
    <p>competitive performance compared to hand-coded algorithm</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Optimizations  MiniZinc integration  Combinators for parallel search  Extend other solving technology (e.g., LP)  Combinators for hybrid search</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Combinator Overhead</p>
    <p>ru n ti m e</p>
    <p>#combinators</p>
    <p>compiled interpreted</p>
  </div>
</Presentation>
