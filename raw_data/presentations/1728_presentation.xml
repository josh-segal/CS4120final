<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Turbo Tunnel, a good way to design censorship circumvention protocols</p>
    <p>https://www.bamsoftware.com/papers/turbotunnel/</p>
    <p>or, why your circumvention system should include an inner session layer</p>
    <p>David Fifield 2020-08-11</p>
  </div>
  <div class="page">
    <p>https://www.bamsoftware.com/talks/pets-2013/oss.html#urls</p>
  </div>
  <div class="page">
    <p>https://censorbib.nymity.ch/#Moghaddam2012a Figure 4</p>
    <p>https://censorbib.nymity.ch/#Weinberg2012a Section 3</p>
    <p>StegoTorus  chops data and uses multiple cover channels</p>
    <p>Code Talker Tunnel  uses UDP</p>
  </div>
  <div class="page">
    <p>I lost time in the premature optimization of meeks network performance. I was thinking about the requestresponse nature of HTTP, and how requests and responses could conceivably arrive out of order . I made several attempts at a TCP-like reliability and sequencing layer, none of which were satisfactory.  I started implementing a version that strictly serialized HTTP requests and responses.</p>
    <p>meek  transfers data as a sequence of HTTP requests</p>
    <p>https://trac.torproject.org/projects/tor/wiki/doc/ AChildsGardenOfPluggableTransports#meektransportlayer</p>
    <p>https://www.bamsoftware.com/papers/thesis/#p227</p>
  </div>
  <div class="page">
    <p>ca. 2018 Snowflake  uses temporary browser-based proxies</p>
    <p>Multiplex - one client splits traffic across multiple proxies https://gitlab.torproject.org/tpo/anti-censorship/ pluggable-transports/snowflake/-/issues/25723 New design for client -- server protocol for Snowflake https://gitlab.torproject.org/tpo/anti-censorship/ pluggable-transports/snowflake/-/issues/29206</p>
    <p>When a proxy disappears, you want to be able to switch to a new one.</p>
    <p>An inner TCP-like session and reliability protocol would make it easy</p>
  </div>
  <div class="page">
    <p>Turbo Tunnel is my name for the design pattern of embedding a session/reliability layer in the middle of a circumvention protocol stack.</p>
    <p>The session/reliability layer converts streams to packets and handles the details of retransmission and reassembly.</p>
    <p>The obfuscation layer's only responsibility is to deliver encapsulated packets in a way that will not get blocked.</p>
  </div>
  <div class="page">
    <p>No need to invent a new session/reliability protocol:</p>
    <p>kcp-go https://github.com/xtaci/kcp-go</p>
    <p>quic-go https://github.com/lucas-clemente/quic-go</p>
    <p>Prototyped Turbo Tunnel in several circumvention systems:</p>
    <p>obfs4  meek  Snowflake  a DNS over HTTPS tunnel</p>
  </div>
  <div class="page">
    <p>If you want to help, you can try implementing a Turbo Tunnel design. There is example code and an example of converting a clientserver program at https://www.bamsoftware.com/papers/turbotunnel/example/</p>
    <p>https://github.com/net4people/bbs/issues/9 david@bamsoftware.com</p>
  </div>
</Presentation>
