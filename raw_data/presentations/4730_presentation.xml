<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Alleviating MAC Layer Self-Contention</p>
    <p>in Ad-hoc Networks</p>
    <p>Zhenqiang Ye, Dan Berger, Prasun Sinha ,</p>
    <p>Srikanth Krishnamurthy, Michalis Faloutsos, Satish K. Tripathi</p>
    <p>Dept. of CSE, UC Riverside  Dept of CIS, Ohio State University</p>
  </div>
  <div class="page">
    <p>Motivation Self-contention</p>
    <p>Contention between packets of same transport connection</p>
    <p>Inter-stream contention Contention between DATA packet</p>
    <p>stream and ACK packet stream</p>
    <p>Intra-stream contention Contention caused by packets of the</p>
    <p>same stream at different nodes</p>
    <p>source destination</p>
    <p>destination</p>
    <p>source</p>
    <p>DATA stream (TCP or UDP) TCP DATA stream</p>
    <p>ACK stream</p>
    <p>Contention for shared mediaContention for shared media</p>
    <p>Self-contention is best resolved at the MAC layer because  Self-contention arises in the MAC layer  Requires no changes to widely deployed transport protocols  IEEE 802.11 is an evolving standard and is amenable to changes</p>
    <p>prior MAC solutions: (none)prior MAC solutions: [Fu et. al., Infocom 03]</p>
  </div>
  <div class="page">
    <p>The Main Contributions</p>
    <p>Propose two mechanisms:  Fast Forward alleviates intra-stream contention by</p>
    <p>withholding transmission until previous packet has reached beyond interference range.</p>
    <p>Quick Exchange alleviates inter-stream contention by exchanging TCP data and TCP ACK packets in the same RTS-CTS-ACK dialogue.</p>
    <p>Observe significant performance improvement:  Up to 250% goodput improvement  Up to 19% backoff time reduction  22% MAC layer overhead reduction</p>
  </div>
  <div class="page">
    <p>Fast-Forward (FF) Key Idea: dont send next packet till previous packet is out of interference range</p>
    <p>Frame Control</p>
    <p>Duration Destination</p>
    <p>Address FCS</p>
    <p>(with RTS for next-hop)</p>
    <p>RTS dest Address</p>
    <p>Identifies the intended RTS recepient (next hop)</p>
    <p>Needed by the next hop to respond with CTS</p>
    <p>RTS</p>
    <p>CTS</p>
    <p>DATA</p>
    <p>ACK( with implicit RTS)</p>
    <p>Sender Receiver Next hop Receiver</p>
    <p>CTS</p>
    <p>ACK (with Implicit RTS)</p>
    <p>DATA (fast forwarded packet)</p>
    <p>ACK( with implicit RTS)</p>
    <p>T im</p>
    <p>e</p>
    <p>Lower avg back-off time per packet No backoff precedes FFPKT tx</p>
    <p>Fewer False Link Failures No explicit contention for FFPKT</p>
    <p>Reduced control packet overhead No RTS for FFPKT</p>
    <p>FFPKT: Fast Forwarded Packet</p>
  </div>
  <div class="page">
    <p>Quick-Exchange (QE) Key Idea: subsume contention caused by reverse stream</p>
    <p>Frame Control</p>
    <p>Duration Extra</p>
    <p>Duration() Destination</p>
    <p>Address FCS</p>
    <p>Frame Control</p>
    <p>Duration Destination</p>
    <p>Address HCS</p>
    <p>Source Address</p>
    <p>BSSID Sequence</p>
    <p>Control Body FCS</p>
    <p>Bytes:</p>
    <p>Bytes:</p>
    <p>CTS</p>
    <p>DATA2 (with ACK1)</p>
    <p>ACK Header</p>
    <p>MAC Header</p>
    <p>HCS : Header Check Sequence FCS : Frame Check Sequence BSSID : Basic Service Set ID (unique network ID)</p>
    <p>Lower avg back-off time per packet No backoff precedes DATA2 tx</p>
    <p>Fewer False Link Failures No explicit contention for DATA2</p>
    <p>Reduced control packet overhead No RTS/CTS for DATA2</p>
    <p>Piggybacked ACK1</p>
    <p>RTS</p>
    <p>CTS</p>
    <p>DATA1</p>
    <p>ACK2</p>
    <p>Sender Receiver Receivers NeighborSenders Neighbor</p>
    <p>NAV (CTS)</p>
    <p>T im</p>
    <p>e</p>
    <p>ACK1 DATA2</p>
    <p>NAV (RTS)</p>
    <p>NAV (ACK1)</p>
    <p>NAV (DATA1)</p>
  </div>
  <div class="page">
    <p>Performance: Goodput in String Topology</p>
    <p>Single UDP flow in a string topology Single TCP flow in a string topology</p>
    <p>Goodput increase up to 250% Goodput increase up to 45%</p>
  </div>
  <div class="page">
    <p>Performance: Normalized Goodput in Random Topology</p>
    <p>TCP flows in a random topology Normalized Goodput increases by up to 30%</p>
    <p>100 nodes in 2500m  1000m  Average of 50 scenarios  180 sec sim time per scenario</p>
    <p>i flows all</p>
    <p>Goodput Normalized</p>
    <p>ii numhopsgoodput</p>
  </div>
  <div class="page">
    <p>Goodput Improvement Factors (Scenario: TCP flows in random topology)</p>
    <p>Normalized Backoff Time (backoff time per MAC packet tx)</p>
    <p>Normalized Control Packet Overhead (#Control packets per unicast packet)</p>
    <p>Reduction by up to 19% Reduction from 3.2 to 2.5 (approx.)</p>
    <p>Number of Link Failures Reduction by up to 66%</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Ongoing Work</p>
    <p>Quick-Exchange alleviates inter-stream self-contention  Fast-Forward alleviates intra-stream self-contention  UDP goodput improves by 250% in string topology  TCP goodput improves by 45% in string topology</p>
    <p>Goodput studies for scenarios with mobility  Analytical model of goodput gains for fast-forward and quick-exchange</p>
  </div>
</Presentation>
