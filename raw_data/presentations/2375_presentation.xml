<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FlexiCache: A Flexible Interface for Customizing Linux File System Buffer Cache</p>
    <p>Replacement Policies</p>
    <p>Pavan Konanki</p>
    <p>Ali R. Butt</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Many advanced replacement algorithms are available  E.g. ARC [FAST 03], PCC [OSDI 04], CLOCK-PRO [ATC 05]  Performance depends on application access patterns</p>
    <p>Okay for all, best for none standard approach</p>
    <p>Improving cache performance for all applications is difficult  Use application level caching  impractical  Tailor replacement policy to the workload  excruciating</p>
    <p>Designing new replacement algorithms is challenging  Should be studied in the kernels context [SIGMETRICS 05]</p>
  </div>
  <div class="page">
    <p>What can we do?</p>
    <p>Allow easy incorporation of new replacement policies  Design a flexible, easy to use interface</p>
    <p>Allow multiple replacement policies to coexist in the kernel  Support dynamic switching between algorithms</p>
  </div>
  <div class="page">
    <p>Caching Subsystem</p>
    <p>Kernel</p>
    <p>fetch_block()</p>
    <p>evict_block()</p>
    <p>register_daemon()</p>
    <p>Policy 1</p>
    <p>Policy 2</p>
    <p>Policy n</p>
    <p>Cache</p>
    <p>Mechanics</p>
    <p>(e.g. managing pages, metadata</p>
    <p>etc)</p>
    <p>Flexi Cache</p>
    <p>User space</p>
    <p>Our contribution: FlexiCache</p>
    <p>A flexible interface for customizing file system buffer caching policies</p>
  </div>
  <div class="page">
    <p>Design challenges</p>
    <p>Making the interface general</p>
    <p>Accommodating disparate replacement algorithms</p>
    <p>Exposing right amount of information</p>
    <p>Hiding the cache mechanics completely</p>
  </div>
  <div class="page">
    <p>Design stages</p>
    <p>Analyze kernel caching subsystem code</p>
    <p>Design and implement the FlexiCache interface</p>
    <p>Evaluate impact on performance</p>
  </div>
</Presentation>
