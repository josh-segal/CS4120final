<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Action-Graph Games: A Compact Representation for Game Theory</p>
    <p>Kevin Leyton-Brown Computer Science</p>
    <p>University of British Columbia</p>
    <p>Based on joint papers with:</p>
    <p>Navin A.R. Bhat University of Toronto</p>
    <p>[UAI 2004]</p>
    <p>Albert Xin Jiang UBC</p>
    <p>[AAAI 2006]; more recent work</p>
  </div>
  <div class="page">
    <p>Game Theory In One Slide   A game:</p>
    <p>an interaction between two or more self-interested agents  each agent independently chooses an action  each agent derives utility from the resulting action profile</p>
    <p>Strategies:  pure strategy: picking a single action  mixed strategy: randomizing over actions</p>
    <p>Best Response:  I play a strategy that maximizes my own utility, given a particular (mixed)</p>
    <p>strategy profile for the other agents</p>
    <p>Nash Equilibrium:  a strategy profile with the property that every agents strategy is a best</p>
    <p>response to the strategies of the others</p>
  </div>
  <div class="page">
    <p>Computation-Friendly Game Representations</p>
    <p>Goal: use game theory to model real-world systems  allow large numbers of agents and actions  just consider games in normal form:</p>
    <p>no extensive form  no Bayesian games</p>
    <p>motivating examples in this talk will concern location games</p>
    <p>Problem: interesting games are large; computing equilibrium, best response, etc. is hard</p>
    <p>Solution:  compact representation  tractable computation</p>
  </div>
  <div class="page">
    <p>Past Work on Compact Games</p>
    <p>Temporal Structure  extensive form</p>
    <p>Independence  some pairs of agents have no (direct) effect on each</p>
    <p>others payoffs [La Mura, 2000], [Kearns, Littman, Singh, 2001], [Vickrey &amp; Koller, 2002], [Oritz &amp; Kearns, 2003], [Blum, Shelton, Koller, 2003]</p>
    <p>graphical games</p>
    <p>Context-Specific Independence  whether agents affect each others payoffs can depend</p>
    <p>on the action choices they each make [Rosenthal, 1973], [Monderer &amp; Shapley, 1996]</p>
    <p>congestion/potential games</p>
  </div>
  <div class="page">
    <p>Overview on Action-Graph Games</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>The Coffee Shop Problem</p>
  </div>
  <div class="page">
    <p>set of players: want to open coffee shops</p>
    <p>actions: choose a location for your shop, or choose not to enter the market</p>
    <p>utility: profitability of a location</p>
    <p>some locations might have more customers, and so might be better ex ante</p>
    <p>utility also depends on the number of other players who choose the same or an adjacent location</p>
    <p>Action-Graph Games</p>
  </div>
  <div class="page">
    <p>Formal Definitions</p>
  </div>
  <div class="page">
    <p>Formal Definitions</p>
  </div>
  <div class="page">
    <p>Notes:</p>
    <p>graph structure independent of # agents  overlapping action sets  context-specific independence without</p>
    <p>strict independence</p>
    <p>vendors sell either chocolate or vanilla ice cream at one of four stations along a beach</p>
    <p>chocolate (C) vendors;</p>
    <p>vanilla (V) vendors;</p>
    <p>can sell C/V, but only on the west side.</p>
    <p>competition between nearby sellers of same type; synergy between nearby different types</p>
    <p>Elaborated Ice Cream Vendor Problem Inspired by [Hotelling, 1929]</p>
    <p>V1 V3</p>
    <p>C4</p>
    <p>V4V2</p>
    <p>C3C2C1</p>
  </div>
  <div class="page">
    <p>The Job Market Problem</p>
    <p>Each player chooses a level of training</p>
    <p>Players utilities are the sum of:  a constant cost:</p>
    <p>difficulty; tuition; foregone wages  a variable reward, depending on:</p>
    <p>How many jobs prefer workers with this training, and how desirable are the jobs?</p>
    <p>How many other jobs are willing to take such workers as a second choice, and how good are these jobs?</p>
    <p>Employers will take workers who are overqualified, but only by one degree.</p>
    <p>They will also interchange similar degrees, but only at the same level.</p>
    <p>How many other graduates want the same jobs?</p>
    <p>PhDPhD</p>
    <p>MScMSc</p>
    <p>BScBSc</p>
    <p>DiplDipl</p>
    <p>Computer Science</p>
    <p>PhDPhD</p>
    <p>MEngMEng</p>
    <p>BEngBEng</p>
    <p>DiplDipl</p>
    <p>Electrical Engineering</p>
    <p>Mechanical Engineering</p>
    <p>PhDPhD</p>
    <p>MEngMEng</p>
    <p>BEngBEng</p>
    <p>DiplDipl</p>
    <p>HighHigh</p>
  </div>
  <div class="page">
    <p>Overview on Action-Graph Games</p>
  </div>
  <div class="page">
    <p>AGGs are Fully Expressive</p>
  </div>
  <div class="page">
    <p>Analyzing the AGG Representation</p>
    <p>AGGs are more compact than the normal form when the game exhibits either or both of the following properties:</p>
    <p>not neighbors in the action graph</p>
  </div>
  <div class="page">
    <p>Size of the AGG representation</p>
    <p>How many payoffs do we need to store in an AGG?</p>
    <p>Bounded by .</p>
    <p>where I is the max in-degree of the action graph</p>
    <p>When I is bounded by a constant:  polynomial size: (|S| I)  in contrast, size of normal form is (|S| )</p>
    <p>Asymptotically, never larger than the normal form</p>
  </div>
  <div class="page">
    <p>Graphical Games are Compact as AGGs</p>
    <p>Node utility functionLocal game matrix</p>
    <p>Bipartite graphs between action setsEdge</p>
    <p>Action set boxAgent node</p>
    <p>AGGGG</p>
  </div>
  <div class="page">
    <p>The Coffee Shop Problem Revisited</p>
    <p>What if utility also depends on total # shops?  Now action graph has in-degree |A|</p>
    <p>NF &amp; Graphical Game representations: (|A| )  AGG representation: ( |A|)  when |A| is held constant, the AGG</p>
    <p>representation is polynomial in  but still doesnt effectively capture game structure  given s action, his payoff depends only on 3 quantities!</p>
  </div>
  <div class="page">
    <p>Function Nodes</p>
    <p>To exploit this structure, introduce function nodes:  The configuration of a function node is a (given) function of the</p>
    <p>configuration of its neighbors: ( ) = ( (( )))</p>
    <p>Coffee-shop example: for each action node , introduce:  One function node with adjacent actions as neighbours</p>
    <p>( ' ) = total # of shops in surrounding nodes  Similarly, a function node with non-adjacent actions as neighbours</p>
  </div>
  <div class="page">
    <p>The Coffee Shop Problem</p>
    <p>Now the red node has only 3 incoming edges:  itself, the blue function node and the orange function node  so, the action-graph now has in-degree 3</p>
    <p>Size of representation is now ( 3)!</p>
  </div>
  <div class="page">
    <p>Overview on Action-Graph Games</p>
  </div>
  <div class="page">
    <p>Expected payoff of agent for playing action ,</p>
    <p>if other agents play according to mixed-strategy profile  :</p>
    <p>Two useful computations based on</p>
    <p>Computing with Games</p>
  </div>
  <div class="page">
    <p>Computing with Games</p>
    <p>Why might we want to compute  Best Response  Payoff Jacobian (Govindan-Wilson Algorithm; Nash equilibrium)  Iterated Polymatrix Approximation (IPA)</p>
    <p>a quick start for the Govindan-Wilson algorithm  Gradient for policy search multiagent RL algorithms  Simplicial Subdivision Algorithm (Nash equilibrium)  Papadimitrious Algorithm (correlated Nash equilibrium)</p>
    <p>Computational complexity:</p>
  </div>
  <div class="page">
    <p>Overview on Action-Graph Games</p>
  </div>
  <div class="page">
    <p>V1 V3</p>
    <p>C4</p>
    <p>V4V2</p>
    <p>C3C2C1</p>
    <p>V1 V2</p>
    <p>C2C1</p>
    <p>Computing with AGGs: Projection</p>
    <p>V3</p>
    <p>C4</p>
    <p>V4</p>
    <p>C3</p>
  </div>
  <div class="page">
    <p>Computing with AGGs: Projection</p>
    <p>Projection captures context-specific independence and strict independence</p>
  </div>
  <div class="page">
    <p>Computing with AGGs: Anonymity</p>
    <p>Writing in terms of the configuration captures anonymity</p>
  </div>
  <div class="page">
    <p>Computing with AGGs: Anonymity</p>
    <p>Good news:  , the number of different configurations, is polynomial  thus, the first sum is over polynomially-many elements</p>
    <p>Bad news:  , the number of pure-action profiles corresponding to a given</p>
    <p>configuration, is exponential in the number of agents</p>
    <p>thus, the second sum is over exponentially-many elements</p>
  </div>
  <div class="page">
    <p>Dynamic Programming</p>
    <p>A ray of hope: note that  the players mixed strategies are independent</p>
    <p>i.e.  is a product probability distribution  each player affects the configuration independently</p>
    <p>We can use dynamic programming to compute the probability of a configuration:  base case: zero agents and the mixed strategy 0:</p>
    <p>0 = { 0}  0 = {0, , 0}  0( 0) = 1</p>
    <p>then add agents one by one:   : the set of configurations that can be built by adding any action</p>
    <p>the support of player s mixed strategy to any configuration from  -1  .</p>
  </div>
  <div class="page">
    <p>Dynamic Programming</p>
    <p>Our algorithm makes a polynomial number of updates  # configurations (for a given number of agents) is polynomial  cost of adding an agent: # configurations  # actions  we need a data structure to manipulate probability distributions</p>
    <p>over configurations (sequences of integers) which permits quick lookup, addition and enumeration</p>
    <p>Tries fit the bill  often used to store dictionaries</p>
    <p>(e.g., spell checker)  for AGGs, we store strings of</p>
    <p>integers rather than characters</p>
    <p>both lookup and insertion complexity is linear (# actions)</p>
    <p>enumeration can also be done in linear time (# configurations)</p>
    <p>t i</p>
    <p>n</p>
    <p>nna</p>
    <p>eo</p>
    <p>a trie storing 4 strings: to, tea, ten, inn</p>
  </div>
  <div class="page">
    <p>AGG Computation Example</p>
    <p>Example game:  4 players, 2 actions</p>
    <p>Compute joint probability distribution  where 1=(1, 0), 2=(0.2, 0.8), 3=(0.4, 0.6), 4=(0.5, 0.5)</p>
    <p>a b</p>
    <p>S14</p>
  </div>
  <div class="page">
    <p>AGG Example: 0 players</p>
    <p>Example game:  4 players, 2 actions</p>
    <p>Compute joint probability distribution  where 1=(1, 0), 2=(0.2, 0.8), 3=(0.4, 0.6), 4=(0.5, 0.5)</p>
    <p>a b</p>
    <p>S14</p>
    <p>a</p>
    <p>b</p>
    <p>P0((0,0))=1</p>
  </div>
  <div class="page">
    <p>AGG Example: 1 player</p>
    <p>1=(1, 0), 2=(0.2, 0.8), 3=(0.4, 0.6), 4=(0.5, 0.5)</p>
    <p>a b</p>
    <p>S14</p>
    <p>a</p>
    <p>b</p>
    <p>P0((0,0))=1</p>
    <p>P1((1,0))=1</p>
    <p>1(a) = 1.0</p>
  </div>
  <div class="page">
    <p>AGG Example: 2 players</p>
    <p>1=(1, 0), 2=(0.2, 0.8), 3=(0.4, 0.6), 4=(0.5, 0.5)</p>
    <p>a b</p>
    <p>S14</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>P0((0,0))=1</p>
    <p>P1((1,0))=1</p>
    <p>1(a) = 1.0</p>
    <p>P2((2,0))=0.2</p>
    <p>2(a)=0.2</p>
    <p>P2((1,1))=0.8</p>
    <p>2(b)=0.8</p>
  </div>
  <div class="page">
    <p>AGG Example: 3 players</p>
    <p>1=(1, 0), 2=(0.2, 0.8), 3=(0.4, 0.6), 4=(0.5, 0.5)</p>
    <p>a b</p>
    <p>S14</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>P0((0,0))=1</p>
    <p>P1((1,0))=1</p>
    <p>1(a) = 1.0</p>
    <p>P2((2,0))=0.2</p>
    <p>2(a)=0.2</p>
    <p>P2((1,1))=0.8</p>
    <p>2(b)=0.8</p>
    <p>P3((3,0))=0.08 P3((2,1))=0.44</p>
    <p>3(a)=0.4 3(b)=0.6</p>
    <p>P3((1,2))=0.48</p>
  </div>
  <div class="page">
    <p>AGG Example: 4 players</p>
    <p>a b</p>
    <p>S14</p>
    <p>a</p>
    <p>b</p>
    <p>P0((0,0))=1</p>
    <p>P1((1,0))=1</p>
    <p>1(a) = 1.0</p>
    <p>P2((2,0))=0.2</p>
    <p>2(a)=0.2</p>
    <p>P2((1,1))=0.8</p>
    <p>2(b)=0.8</p>
    <p>b</p>
    <p>P3((3,0))=0.08 P3((2,1))=0.44</p>
    <p>3(a)=0.4 3(b)=0.6</p>
    <p>P3((1,2))=0.48</p>
    <p>b</p>
    <p>P4((4,0)) =0.04</p>
    <p>P4((3,1)) =0.26</p>
    <p>P4((2,2)) =0.46</p>
    <p>P4((1,3)) =0.24</p>
    <p>4(a) =0.5</p>
    <p>4(b) =0.5 0.50.50.50.5</p>
    <p>b</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Computing with AGGs: Complexity</p>
    <p>Complexity of our approach:</p>
    <p>Exponential speedup vs. standard approach:</p>
    <p>For graphical games encoded as AGGs, same exponential speedup as the special-purpose technique of [Blum, Shelton &amp; Koller, 2002]</p>
  </div>
  <div class="page">
    <p>AGGs with Function Nodes (AGGFNs)</p>
    <p>Our dynamic programming algorithm does not work for arbitrary AGGFNs  players are no longer guaranteed to affect independently</p>
    <p>Definition: An AGGFN is contribution-independent (CI) if  all function nodes have only action nodes as their neighbors  there exists a commutative and associative operator *, and for each</p>
    <p>action node  an integer , such that given an action profile , for all function nodes  , . .</p>
    <p>e.g., the coffee-shop game is CI, where * is sum and  = 1</p>
    <p>Theorem: Our dynamic programming algorithm works with AGGFNs that are contribution-independent</p>
  </div>
  <div class="page">
    <p>Overview on Action-Graph Games</p>
  </div>
  <div class="page">
    <p>Experimental Results: Representation Size</p>
    <p>Coffee shop game, 5  5 grid NF grows exponentially; AGG grows polynomially</p>
    <p>varying number of players</p>
  </div>
  <div class="page">
    <p>Experimental Results: Representation Size</p>
    <p>Coffee shop game, 5  5 grid AGG grows polynomially</p>
    <p>number of players</p>
    <p>pa yo</p>
    <p>ff s</p>
    <p>st or</p>
    <p>ed</p>
    <p>varying number of players</p>
  </div>
  <div class="page">
    <p>Experimental Results: Representation Size</p>
    <p>Coffee shop game, 4 players,   5 grid AGG grows linearly, NF grows as a higher-order polynomial</p>
    <p>number of actions</p>
    <p>pa yo</p>
    <p>ff s</p>
    <p>st or</p>
    <p>ed AGG</p>
    <p>NF</p>
    <p>varying number of actions</p>
  </div>
  <div class="page">
    <p>Experimental Results: Representation Size</p>
    <p>Coffee shop game, 4 players,   5 grid AGG grows linearly</p>
    <p>number of actions</p>
    <p>pa yo</p>
    <p>ff s</p>
    <p>st or</p>
    <p>ed</p>
    <p>varying number of actions</p>
  </div>
  <div class="page">
    <p>Experimental Results: Expected Payoff</p>
    <p>Coffee Shop Game, 5  5 grid, AGG vs. GameTracer using NF 1000 random strategy profiles with full support</p>
    <p>AGG grows polynomially, NF grows exponentially</p>
    <p>(largest NF game we could fit in memory)</p>
    <p>number of players</p>
    <p>C P</p>
    <p>U t</p>
    <p>im e</p>
    <p>in s</p>
    <p>ec on</p>
    <p>ds</p>
    <p>AGG NF</p>
    <p>varying number of players</p>
  </div>
  <div class="page">
    <p>Experimental Results: Expected Payoff</p>
    <p>Coffee Shop Game, 5  5 grid, AGG 1000 random strategy profiles with full support</p>
    <p>AGG grows polynomially</p>
    <p>number of players</p>
    <p>C P</p>
    <p>U t</p>
    <p>im e</p>
    <p>in s</p>
    <p>ec on</p>
    <p>ds</p>
    <p>varying number of players</p>
  </div>
  <div class="page">
    <p>Experimental Results: Expected Payoff</p>
    <p>Coffee Shop Game, 4 players,   5 grid, AGG vs. GameTracer using 1000 random strategy profiles with full support</p>
    <p>AGG grows linearly, NF grows as higher-order polynomial</p>
    <p>number of actions</p>
    <p>C P</p>
    <p>U t</p>
    <p>im e</p>
    <p>in s</p>
    <p>ec on</p>
    <p>ds AGG</p>
    <p>NF</p>
    <p>varying number of actions</p>
  </div>
  <div class="page">
    <p>Experimental Results: Expected Payoff</p>
    <p>Coffee Shop Game, 4 players,   5 grid, AGG vs. GameTracer using 1000 random strategy profiles with full support</p>
    <p>AGG grows linearly</p>
    <p>number of actions</p>
    <p>C P</p>
    <p>U t</p>
    <p>im e</p>
    <p>in s</p>
    <p>ec on</p>
    <p>ds</p>
    <p>varying number of actions</p>
  </div>
  <div class="page">
    <p>Experimental Results: Nash Equilibrium</p>
    <p>number of players</p>
    <p>ra ti</p>
    <p>o of</p>
    <p>N F</p>
    <p>t im</p>
    <p>e vs</p>
    <p>. A G</p>
    <p>G t</p>
    <p>im e</p>
    <p>Coffee Shop Game, 4  4 grid, Govindan-Wilson Algorithm Jacobians computed using AGGs vs. GameTracer using NF</p>
    <p>Exactly the same equilibria were found using both representations Average across 10 initial perturbations; error bars indicate stdev</p>
    <p>As number of rows grows, AGG speedup increases roughly linearly</p>
    <p>varying number of players</p>
  </div>
  <div class="page">
    <p>Experimental Results: Nash Equilibrium</p>
    <p>number of actions</p>
    <p>ra ti</p>
    <p>o of</p>
    <p>N F</p>
    <p>t im</p>
    <p>e vs</p>
    <p>. A G</p>
    <p>G t</p>
    <p>im e</p>
    <p>Coffee Shop Game,   4 grid, Govindan-Wilson Algorithm Jacobians computed using AGGs vs. GameTracer using NF</p>
    <p>Exactly the same equilibria were found using both representations Average across 10 initial perturbations; error bars indicate stdev</p>
    <p>As number of rows grows, AGG speedup increases roughly linearly</p>
    <p>varying number of actions</p>
  </div>
  <div class="page">
    <p>Coffee Shop Game: Example Equilibrium</p>
    <p>Utility Function: 5 - 3 - 2 - 0.5 , , are # of shops in same location, one block away, further away</p>
    <p>5 players</p>
  </div>
  <div class="page">
    <p>Coffee Shop Game: Example Equilibrium</p>
    <p>Utility Function: 5 - 3 - 2 - 0.5 , , are # of shops in same location, one block away, further away</p>
    <p>6 players</p>
    <p>-2 -13 -13 -13</p>
  </div>
  <div class="page">
    <p>Coffee Shop Game: Example Equilibrium</p>
    <p>Utility Function: 5 - 3 - 2 - 0.5 , , are # of shops in same location, one block away, further away</p>
    <p>7 players</p>
  </div>
  <div class="page">
    <p>Coffee Shop Game: Example Equilibrium</p>
    <p>Utility Function: 5 - 3 - 2 - 0.5 , , are # of shops in same location, one block away, further away</p>
    <p>8 players; one chooses not to participate</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Action-Graph Games</p>
    <p>Fully-expressive compact representation of games exhibiting context-specific independence and/or strict independence</p>
    <p>Permit efficient computation of expected utility under a mixed strategy, which allows efficient computation of e.g., best response, Nash equilibrium, etc.</p>
    <p>Generalizes graphical games</p>
    <p>Experimentally: much faster than the normal form</p>
    <p>http://www.cs.ubc.ca/kevinlb google://Kevin Leyton-Brown</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Job Market Game</p>
    <p>PhD</p>
    <p>MSc</p>
    <p>BSc</p>
    <p>Dipl</p>
    <p>Computer Science</p>
    <p>PhD</p>
    <p>MEng</p>
    <p>BEng</p>
    <p>Dipl</p>
    <p>Electrical Engineering</p>
    <p>Mechanical Engineering</p>
    <p>PhD</p>
    <p>MEng</p>
    <p>BEng</p>
    <p>Dipl</p>
    <p>High</p>
  </div>
</Presentation>
