<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Finding Consistency in an Inconsistent World: Towards Deep Semantic Understanding of</p>
    <p>Scale-out Distributed Databases</p>
    <p>Neville Carvalho, Hyojun Kim, Maohua Lu, Prasenjit Sarkar, Rohit Shekhar, Tarun Thakur, Pin Zhou DATOS IO</p>
    <p>Remzi H. Arpaci-Dusseau University of Wisconsin-Madison</p>
    <p>USENIX HotStorage2016</p>
  </div>
  <div class="page">
    <p>NECST (Next-generation Eventually Consistent STorage systems)</p>
    <p>Why?</p>
    <p>Big Data Internet Scale App.</p>
    <p>(IoT, Mobile)</p>
    <p>Scale and availability is more important than ACID</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>How to build efficient backup and restore tools for NECST (Next-generation Eventually Consistent STorage systems)</p>
  </div>
  <div class="page">
    <p>Does NECST require backup?</p>
    <p>NECST systems are highly available  Data replication, Multi-DC support</p>
    <p>Enterprise organizations have a fundamental need to restore and access particular versions of data from different points in time</p>
    <p>Operational errors (a.k.a. Fat fingers)  Operation historian (government regulations)</p>
  </div>
  <div class="page">
    <p>Why NECST system backup is difficult</p>
    <p>Single node snapshot vs. Distributed system snapshot</p>
  </div>
  <div class="page">
    <p>Orchestration is needed for backup and restore</p>
    <p>plus, failure handling plus, topology change support</p>
  </div>
  <div class="page">
    <p>There are bigger problems</p>
  </div>
  <div class="page">
    <p>Example: existing backup solution for Cassandra</p>
    <p>Per-node backup &amp; recovery  The state of each node can be</p>
    <p>captured by snapshot command</p>
    <p>Issues  Inconsistent backup  Topology change  Redundant data</p>
    <p>Backup Restore</p>
    <p>Backup Restore Backup Restore</p>
    <p>Row Key C C C</p>
    <p>Replication</p>
    <p>Record</p>
  </div>
  <div class="page">
    <p>Problems of the per-node backup approach</p>
    <p>Backup space waste problem</p>
    <p>Replicated data (normally 3 copies) consumes more space (3x) in a backup</p>
    <p>(if backup files are uploaded to an object store like Swift, space consumption will be 9x)</p>
    <p>Inconsistency problem  Creating a consistent snapshot from an eventually consistent DB system</p>
    <p>Repair operation is very expensive</p>
    <p>(imagine running fsck for multiple file systems having terabytes of data)</p>
  </div>
  <div class="page">
    <p>Goals</p>
  </div>
  <div class="page">
    <p>Deduplication: Space Efficient Backup</p>
    <p>Picture source: https://citrixblogger. org/2008/05/25/deduplication/</p>
  </div>
  <div class="page">
    <p>Deduplication</p>
    <p>Replace redundant backup data with pointers to shared copy</p>
    <p>Source vs. Target deduplication  Inline vs. Post-processing deduplication  File vs. Block level deduplication  Global deduplication</p>
    <p>Will existing deduplication solutions work for Cassandra?</p>
  </div>
  <div class="page">
    <p>Cassandra: Replica exist across nodes</p>
    <p>Cassandra</p>
    <p>Application Application Application</p>
    <p>Block device</p>
    <p>File system</p>
    <p>DB node</p>
    <p>Block device</p>
    <p>File system</p>
    <p>DB node</p>
    <p>Block device</p>
    <p>File system</p>
    <p>DB node</p>
    <p>Block device</p>
    <p>File system</p>
    <p>DB node</p>
    <p>Block device</p>
    <p>File system</p>
    <p>DB node</p>
    <p>Distributed system based on shared nothing storage</p>
  </div>
  <div class="page">
    <p>Cassandra: Row based replication + Compression</p>
    <p>K1</p>
    <p>K4</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K3</p>
    <p>K2</p>
    <p>K3</p>
    <p>K4</p>
    <p>K3</p>
    <p>K4</p>
    <p>K5</p>
    <p>DB Node 1 DB Node 2 DB Node 3 DB Node 4 DB Node 5</p>
    <p>Very low chance to find identical chunks from Cassandra data files</p>
  </div>
  <div class="page">
    <p>Consistent Backup</p>
    <p>Source: Internet</p>
  </div>
  <div class="page">
    <p>Levels of backup consistency</p>
    <p>Inconsistent backup  Simple file copy operation</p>
    <p>Crash-consistent backup  Backups data saved within the same moment of time</p>
    <p>Memory content and pending I/O will be lost</p>
    <p>Application-consistent backup  Capture all data in memory and all transactions in process  Quiesce the database application, flush its memory cache, complete all its writes in order and</p>
    <p>then perform the backup</p>
  </div>
  <div class="page">
    <p>Consistent status</p>
    <p>K1</p>
    <p>K4</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K3</p>
    <p>K2</p>
    <p>K3</p>
    <p>K4</p>
    <p>K3</p>
    <p>K4</p>
    <p>K5</p>
    <p>DB Node 1 DB Node 2 DB Node 3 DB Node 4 DB Node 5</p>
    <p>K1</p>
    <p>K4</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K3</p>
    <p>K2</p>
    <p>K3</p>
    <p>K4</p>
    <p>K3</p>
    <p>K4</p>
    <p>K5</p>
    <p>DB Node 1 DB Node 2 DB Node 3 DB Node 4 DB Node 5</p>
    <p>Inconsistent status</p>
  </div>
  <div class="page">
    <p>K1</p>
    <p>K4</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K5</p>
    <p>K1</p>
    <p>K2</p>
    <p>K3</p>
    <p>K2</p>
    <p>K3</p>
    <p>K4</p>
    <p>K3</p>
    <p>K4</p>
    <p>K5</p>
    <p>DB Node 1 DB Node 2 DB Node 3 DB Node 4 DB Node 5</p>
    <p>K1 K2 K3 K4 K5</p>
    <p>Space efficient consistent version</p>
    <p>Inconsistent backup</p>
    <p>Space efficient consistent backup</p>
    <p>Depends on user defined backup-policy</p>
  </div>
  <div class="page">
    <p>Two key building blocks</p>
    <p>Deep Semantic Understanding</p>
    <p>Efficient data processing algorithm</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>NECST system is becoming important component of the enterprise datacenter.</p>
    <p>NECST backup problem has been introduced: three key parts  Backup and restore orchestration  Quorum reconciliation for consistent backup</p>
    <p>Redundant copy detection for space-efficient backup</p>
    <p>Our mission: NECST storage management is as easy and effective tomorrow as classic storage management is today</p>
  </div>
  <div class="page">
    <p>http://datos.io</p>
    <p>Email: info@datos.io</p>
    <p>Thank you</p>
  </div>
</Presentation>
