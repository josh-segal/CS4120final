<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance for System Troubleshooting</p>
    <p>Marc Chiarini</p>
    <p>Harvard SEAS</p>
    <p>TaPP '11</p>
  </div>
  <div class="page">
    <p>A Day in the Life...</p>
    <p>Wake up 3am via page from a heartless machine: hot backup has failed.</p>
    <p>Start troubleshooting (in pajamas, thankfully!)  Log files indicate unable to contact storage</p>
    <p>appliance,  into backup.  Storage appliance working fine and reachable</p>
    <p>now.  Where to look next? (Coffee first!)</p>
  </div>
  <div class="page">
    <p>System-level Provenance</p>
    <p>Directed acyclic graph tells us what digital objects interacted during provenance collection, and when.</p>
    <p>Examples:  File F read by process P</p>
    <p>File Z written by P</p>
    <p>Z read by process Q</p>
    <p>Pipe I written by Q</p>
    <p>I read by process R</p>
  </div>
  <div class="page">
    <p>Potential Dependency</p>
    <p>Define dependency as the transmission of information from a passive object (file, pipe, etc) to an active object (process), that is necessary to the proper functioning of the process.</p>
    <p>Transitive dependencies also exist between active objects.</p>
    <p>For troubleshooting, provenance graph edges represent potential dependencies. We don't look at data or programs, so won't talk about causality.</p>
  </div>
  <div class="page">
    <p>Troubleshooting Example</p>
    <p>netw ork man ager</p>
    <p>dhcli ent</p>
    <p>resolv.con f</p>
    <p>dhclient socket</p>
    <p>endpoint</p>
    <p>DBus</p>
    <p>resol ver</p>
    <p>NetMan socket</p>
    <p>endpoint other inputs</p>
    <p>dhclient.con f</p>
    <p>other inputs</p>
    <p>many other inputs</p>
  </div>
  <div class="page">
    <p>Graph Reduction</p>
    <p>Real graph is much too large.  Reduction is necessary to support reasonable</p>
    <p>queries.  Want to turn potential dependencies into</p>
    <p>actual dependencies with high confidence and</p>
    <p>eliminate non-dependencies in the graph.  Impossible to identify all true dependencies;</p>
    <p>would require enumerating all failures.</p>
  </div>
  <div class="page">
    <p>In Our Favor...</p>
    <p>There are known dependencies, e.g., configuration files for system services.</p>
    <p>We can label with low probability, files residing in well-known log directories, e.g., / var/log.</p>
    <p>We can label with high probability, files residing in library directories, e.g. /usr/lib.</p>
    <p>We can label with high probability, files that are opened by a program on every invocation.</p>
  </div>
  <div class="page">
    <p>Other challenges</p>
    <p>Building a tool that improves the sysadmin's mental model of her systems via exploration, documentation, visualization, etc.</p>
    <p>Give the sysadmin an intuitive way to query the provenance graph and limit the scope of query responses (regexps may not cut it!).</p>
    <p>How do we integrate troubleshooting workflow artifacts (e.g., past symptoms and graph query results) with troubleshooting</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Prototype will be available in late fall 2011.</p>
    <p>http://www.eecs.harvard.edu/syrah/pass/</p>
    <p>chiarini@seas.harvard.edu</p>
  </div>
</Presentation>
