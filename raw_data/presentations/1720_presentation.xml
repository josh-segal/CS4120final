<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Efficient Method to Determine which Combination of Keywords Triggered</p>
    <p>Automatic Filtering of a Message</p>
    <p>Ruohan Xiong and Jeffrey Knockel Citizen Lab, University of Toronto</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Regulatory environment  Online content providers in China are responsible</p>
    <p>for content they host  Delegated censorship directives  Companies seek to filter sensitive content quickly</p>
    <p>with minimal human involvement</p>
  </div>
  <div class="page">
    <p>Sensitive keyword combinations</p>
    <p>Each combination contains one or more components  Message censored if all components matched</p>
    <p>+  +  six four + student + democracy movement</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Client-side censorship  Censorship occurs in local application  Extract keyword list through reverse-engineering</p>
  </div>
  <div class="page">
    <p>Server-side censorship  Keyword lists are stored on a remote server  Seen in chat apps including WeChat  Sample testing required</p>
    <p>Efficient methods needed</p>
  </div>
  <div class="page">
    <p>News articles for sample testing  Up-to-date text samples with coverage of current</p>
    <p>events, particularly political events  International sources report on issues which may not</p>
    <p>be disseminated by local media</p>
  </div>
  <div class="page">
    <p>Testing a social media platform  Pool of accounts we control</p>
    <p>Sender  Receiver  Passive accounts</p>
    <p>Requires sending high volume of messages</p>
  </div>
  <div class="page">
    <p>Sample testing is costly</p>
  </div>
  <div class="page">
    <p>Algorithms for sample testing  Original algorithm  Improved algorithms</p>
  </div>
  <div class="page">
    <p>Original algorithm Stage 1/3: Recursive bisection</p>
    <p>Recursively split message into halves and continue testing with censored half</p>
  </div>
  <div class="page">
    <p>Original algorithm Stage 1/3: Recursive bisection</p>
    <p>Left half: Not censored. Return and continue testing with other half.</p>
  </div>
  <div class="page">
    <p>Original algorithm Stage 1/3: Recursive bisection</p>
    <p>Right half: Censored. Branch into left and right halves.</p>
  </div>
  <div class="page">
    <p>Original algorithm Stage 1/3: Recursive bisection</p>
    <p>Reduced sensitive segment</p>
  </div>
  <div class="page">
    <p>Original algorithm</p>
    <p>Stage 2/3: Keyword Isolation</p>
  </div>
  <div class="page">
    <p>Unilateral elimination flaw</p>
  </div>
  <div class="page">
    <p>Original Algorithm</p>
    <p>Stage 3/3: Split components</p>
  </div>
  <div class="page">
    <p>Overlap flaw  Text:   Returned:  +  +    Actual:  +  +  +</p>
  </div>
  <div class="page">
    <p>Average messages per news article: 343</p>
  </div>
  <div class="page">
    <p>Improved algorithm 1: Binary search with backtracking</p>
    <p>Attempt iterative redaction on lower and upper halves</p>
  </div>
  <div class="page">
    <p>Improved algorithm 1: Binary search with backtracking</p>
    <p>Not censored Undo redaction and divide area of interest into two halves</p>
  </div>
  <div class="page">
    <p>Improved algorithm 1: Binary search with backtracking</p>
    <p>Not censored Undo redaction and divide area of interest into two halves (and so on)</p>
  </div>
  <div class="page">
    <p>Improved algorithm 1: Binary search with backtracking</p>
    <p>Censored Keep the redaction made and continue</p>
  </div>
  <div class="page">
    <p>Improved algorithm 1: Binary search with backtracking</p>
    <p>Result From here, split components</p>
    <p>Average messages per news article:</p>
  </div>
  <div class="page">
    <p>Group testing Problem of using a small number of tests to identify positive samples in a large population.</p>
  </div>
  <div class="page">
    <p>Improved algorithm 2: Binary splitting (from group testing)</p>
    <p>Use binary search to find leftmost sensitive character</p>
  </div>
  <div class="page">
    <p>Improved algorithm 2: Binary splitting (from group testing)</p>
    <p>Remove all text preceding the character identified</p>
  </div>
  <div class="page">
    <p>Improved algorithm 2: Binary splitting (from group testing)</p>
    <p>Remove all text preceding the character identified</p>
  </div>
  <div class="page">
    <p>Improved algorithm 2: Binary splitting (from group testing)</p>
    <p>Continue until known sensitive characters are censored. Split components</p>
  </div>
  <div class="page">
    <p>Binary splitting Average messages per news article: 70 Worse than binary search with backtracking (57). Why?  Samples are mutually dependent  Components are not considered until after</p>
  </div>
  <div class="page">
    <p>Improved algorithm 3: Component-aware binary splitting Use binary search to identify first character of component only, then linearly search following text to identify component</p>
  </div>
  <div class="page">
    <p>Improved algorithm 3: Component-aware binary splitting</p>
  </div>
  <div class="page">
    <p>Improved algorithm 3: Component-aware binary splitting</p>
    <p>Overlapping keywords detected</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Tukey box plot of # messages required to isolate a sensitive keyword combination across tested articles (lower is better)</p>
  </div>
  <div class="page">
    <p>Results Average-case performance, CompAwareBinSplit: 35.47 messages 10.3% of messages required for previous algorithm</p>
  </div>
  <div class="page">
    <p>Conclusion We present improved algorithms for isolating keyword combinations from censored text Generalizability for other applications and languages</p>
  </div>
  <div class="page">
    <p>Questions? Source code available at: https://github.com/citizenlab/censored-keyword-isolation</p>
  </div>
</Presentation>
