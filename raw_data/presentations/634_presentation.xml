<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2008 IBM Corporation</p>
    <p>R</p>
    <p>RC2 : A Living Lab for Cloud Computing</p>
    <p>USENIX LISA10</p>
    <p>Kyung Ryu, Xiaolan Zhang, Glenn Ammons, Vasanth Bala, Stefan Berger, Dilma M Da Silva, Jim Doran, Frank Franco, Alexei Karve, Herb</p>
    <p>Lee, James A Lindeman, Ajay Mohindra, Bob Oesterlin, Giovanni Pacifici, Dimitrios Pendarakis, Darrell Reimer, Mariusz Sabath</p>
    <p>IBM T.J Watson Research Center</p>
    <p>Nov 11th 2010</p>
  </div>
  <div class="page">
    <p>Research Compute Cloud for IBM Research Worldwide</p>
    <p>9 research centers distributed around world</p>
    <p>A variety of IT experiment labs on each site</p>
    <p>Lots of lab machines used for experiments and getting dusted</p>
    <p>Extensive cloud computing research and experiments</p>
  </div>
  <div class="page">
    <p>Objectives and Challenges</p>
    <p>Mission (Maybe Not) Impossible: Chase two rabbits and catch both  Commercial-grade IaaS for Semi-public Cloud</p>
    <p>Serve worldwide IBM research community (and beyond)</p>
    <p>Playground for quick Cloud technology experiments and transfer  IBMs cloud computing initiatives and businesses</p>
    <p>Yet, Another Challenge:</p>
    <p>Support various types of systems and virtualization mechanisms  xSeries (x86): virtual machines through xen, kvm, etc  pSeries (Power): LPARs through phyp  zSeries (mainframe): VMs through native virtualization</p>
  </div>
  <div class="page">
    <p>RC2 Architecture</p>
    <p>Extensible and Pluggable</p>
  </div>
  <div class="page">
    <p>Smart Cloud Dispatcher</p>
    <p>Make RC2 Operating Infrastructure More Scalable and Reliable.</p>
    <p>Handle impedance mismatch between user requests and back-end component managers and avoid overload and crash</p>
    <p>Respond quickly to light-weight requests</p>
    <p>Provide a request delivery mechanism that allows component manager to scale-out</p>
    <p>Extensible to scale dispatcher itself</p>
  </div>
  <div class="page">
    <p>Smart Cloud Dispatcher</p>
    <p>Request Queues for Dispatcher and Component Managers</p>
    <p>Component Manager REST API</p>
    <p>Component Manager</p>
    <p>Component Manager REST API</p>
    <p>Component Manager</p>
    <p>Cloud REST Servlet /cloudAPI (ext.) /managerAPI (int.)</p>
    <p>Cloud Manager (threadpool)</p>
    <p>Component Manager Proxy</p>
    <p>UI</p>
    <p>Component Manager remote API</p>
    <p>Component Manager</p>
    <p>REST/HTTP</p>
    <p>REST/HTTP</p>
    <p>put request</p>
    <p>Dispatcher Tier</p>
    <p>Component Tier</p>
    <p>UI Tier</p>
    <p>Dispatcher Servlet Container</p>
    <p>get request</p>
    <p>Java call</p>
    <p>Dispatch Queue</p>
    <p>REST/HTTP</p>
  </div>
  <div class="page">
    <p>Dispatch Queue</p>
    <p>Cloud REST Servlet</p>
    <p>Cloud Manager Threadpool</p>
    <p>Put requestDispatcher Servlet Container</p>
    <p>get request</p>
    <p>Dispatch Queues</p>
    <p>Sync. Request Q (SRQ)</p>
    <p>Async. Requests Q (ARQ)</p>
    <p>Gate Keeping for early and simple Admission Control</p>
    <p>Admit into Queue with Request(TR) ID and blocks for result for sync. requests</p>
    <p>Reject if queue is full or component is down</p>
    <p>* time-to-live setting for request expiration * priority setting for internal requests * cancel waiting requests in queue</p>
  </div>
  <div class="page">
    <p>Dispatch Queue (cont.)</p>
    <p>Cloud REST Servlet</p>
    <p>Cloud Manager Servlet</p>
    <p>put request</p>
    <p>Dispatcher Servlet Container</p>
    <p>get request</p>
    <p>Dispatch Queues</p>
    <p>Sync. Request Q (SRQ)</p>
    <p>Async. Requests Q (ARQ)</p>
    <p>Pacemaking for request throttling to keep pace with component managers Priority Queues</p>
    <p>High priority for internal requests (eg. checkin/checkoutImage)</p>
    <p>SRQ For light requests Dispatch requests immediately * Alt. use blocking call w/o queue</p>
    <p>ARQ For heavy requests Dispatch based on constraints, status, policy on components load</p>
    <p>Component Manager Proxy</p>
    <p>Component Request Message Queues</p>
  </div>
  <div class="page">
    <p>End-to-End Pacemaking (Ongoing)</p>
    <p>Throttling model based on constraints-status-policy:</p>
    <p>Constraints: maximum 256 concurrent checkoutImage requests allowed</p>
    <p>Status: number of active and outstanding (queued) checkoutImage requests are monitored</p>
    <p>Policy: dispatch if number of active/outstanding checkinImage requests &lt; 256  25 (10% safety buffering)</p>
    <p>Cloud Manager Servlet</p>
    <p>get request</p>
    <p>Dispatch Queues</p>
    <p>Sync. Request Q (SRQ)</p>
    <p>Async. Requests Q (ARQ)</p>
    <p>Component Manager Proxy</p>
    <p>Component Request Queues</p>
    <p>constraints</p>
    <p>status</p>
    <p>policy</p>
    <p>Component Manager REST API</p>
    <p>Component Manager</p>
    <p>Component Manager REST API</p>
    <p>Component Manager</p>
    <p>Component Manager JMS API</p>
    <p>Image Manager</p>
    <p>Transaction Manager</p>
    <p>Request Char. Matrix</p>
    <p>Admin</p>
  </div>
  <div class="page">
    <p>Image Management</p>
    <p>Catalogs, accesses, and maintains VM images  ListImages  DescribeImage imageId  AddImage directoryURL imageName  *CheckoutImage imageId directoryURL  *CheckinImage directoryURL imageName  DeprecateImage imageId  PublishImage imageId  UnpublishImage imageId</p>
    <p>Metadata and Provenance  Name, description, owner, ACL, parent ID</p>
  </div>
  <div class="page">
    <p>disk</p>
    <p>disk</p>
    <p>disk</p>
    <p>A B</p>
    <p>C</p>
    <p>Disk based representation  No image relationships  Hypervisor-dependent  Merely a storage system for image disks</p>
    <p>Conventional image library</p>
    <p>Mirage image library</p>
    <p>Content addressable, file granularity store</p>
    <p>file file</p>
    <p>file file</p>
    <p>file</p>
    <p>file</p>
    <p>filefile</p>
    <p>file</p>
    <p>image manifest</p>
    <p>derivation history</p>
    <p>C</p>
    <p>B</p>
    <p>A</p>
    <p>File based representation  Image relationships (think CVS)  Hypervisor-agnostic  A sophisticated store with APIs to directly manipulate images without deploying them as instances or fully assembling their disks  Conventional disk is reconstituted when an image is checked out</p>
    <p>content references</p>
    <p>Disk granularity store</p>
    <p>Mirage Image Library</p>
  </div>
  <div class="page">
    <p>Instance Management</p>
    <p>Provisioning Steps to create Instance 1. Reserve resources - Placement Advisor</p>
    <p>(floppy/cdrom). These parameters are for fixup during boot 5. Register the VM with Hypervisor 6. Start the VM  This will complete the fixup 7. Wait for VM to start (ping/ssh) 8. Notifications</p>
  </div>
  <div class="page">
    <p>VEGA provisioning abstraction layer</p>
  </div>
  <div class="page">
    <p>Security Management  Goals of the Security Manager</p>
    <p>Realization of Trusted Virtual Domain (TVD)  Isolation between different cloud users workloads</p>
    <p>Grouping of VMs of the same or different users (security domains)</p>
    <p>Enable controlled collaboration between users</p>
    <p>Layered approach  Xen daemon extended for applying filtering rules for layer 2 to layer 4</p>
    <p>traffic  Based on Linux filtering : ebtables and iptables</p>
    <p>Prevent MAC, IP and ARP spoofing</p>
    <p>Filtering of traffic with other VMs inside the cloud</p>
    <p>Filtering of traffic with IP addresses outside the cloud</p>
    <p>Security Manager implements VM grouping support  Calculates per-VM filtering policies</p>
    <p>Pushes policies to Xen daemons</p>
  </div>
  <div class="page">
    <p>Trusted Virtual Domains</p>
    <p>VM1 VM2</p>
    <p>VM3 VM4</p>
    <p>SSH traffic from outside the cloud</p>
    <p>Traffic only from Sec. Domain A to Sec. Domain Bs</p>
    <p>TCP port 80</p>
    <p>Security Domain A Owner: User A Filter: Allow traffic to SSH and VNC ports from outside the cloud</p>
    <p>Security Domain B Owner: User B Filter: Sec. Domain A may reach TCP port 80</p>
  </div>
  <div class="page">
    <p>Chargeback: No free lunch!</p>
    <p>WAS/ RC2 UI</p>
    <p>Chargeback BSS</p>
    <p>Chargeback Logic Engine</p>
    <p>RC2 OSS</p>
    <p>Cloud DispatchAPI</p>
    <p>BIRT Reports</p>
    <p>Data store</p>
    <p>Event Manager</p>
    <p>New Chargeback Event Trigger</p>
    <p>This will capture relevant state transitions (eg. Create, destroy, etc)</p>
    <p>Sub Components</p>
    <p>Common Event</p>
    <p>Framework</p>
    <p>REST/ HTTP</p>
    <p>Tactical: Java application pushes relevant data to BSS</p>
    <p>Strategic: Pub-Sub based system to push data to BSS</p>
    <p>Finance Processing</p>
    <p>Existing RC2 Infrastructure</p>
    <p>REST / HTTP</p>
    <p>chargeback.</p>
    <p>RC2 User/Administrator</p>
  </div>
  <div class="page">
    <p>Chargeback Impact  Money talks!!!</p>
  </div>
  <div class="page">
    <p>Challenge Case 1: Heterogeneous Cloud  Provision pSeries (Power) System Instance (LPAR/Phyp)</p>
    <p>NIM Server</p>
    <p>Hardware Management Console</p>
    <p>pSeries Host</p>
    <p>VIOS</p>
    <p>Provisioned Guest</p>
  </div>
  <div class="page">
    <p>Challenge Case 2: Strategic Hypervisor Switch</p>
    <p>Strategic move from Xen to KVM</p>
    <p>Migrate existing Xen VM images to KVM compatible images  Xen images contain paravirtualized Linux OSes</p>
    <p>Requirements</p>
    <p>Zero Downtime  RC2 production system was continuously running with all functionalities enabled</p>
    <p>and no noticeable performance slowdown.</p>
    <p>Efficiency (both in storage and in time)  Consumed another 293 GB storage (cf. 9.5TB with flat file approach)  Took only 20 seconds to convert an image (cf 4 minutes in native way)</p>
    <p>Transparency to end users  End users did not notice any change of their images until the &quot;conversion&quot; day</p>
  </div>
  <div class="page">
    <p>RC2 Value: Usage Growth</p>
    <p>In 1 year of RC2 production operation</p>
    <p>631 users from 34 countries  Fast grow of VM images and</p>
    <p>instances  Matching capacity grow required</p>
  </div>
  <div class="page">
    <p>Conclusions and Ongoing Work</p>
    <p>RC2</p>
    <p>Delivers high-quality cloud computing for IBM research community (and beyond)</p>
    <p>Provides effective framework for quick integration of novel ideas in to real cloud platform</p>
    <p>Ongoing</p>
    <p>Extending to include at least two other RC2 zones in two different continents</p>
    <p>Adding many research PaaS (Web App Platform, Elasticity Service) and SaaS (dev/test service cloud) technologies</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>Cloud at IBM T.J. Watson Research Center, photograph copyrighted by K Ryu, 2009</p>
  </div>
</Presentation>
