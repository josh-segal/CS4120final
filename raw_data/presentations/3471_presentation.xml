<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Heap Layout Manipulation for Exploitation</p>
    <p>Sean Heelan, Tom Melham, Daniel Kroening</p>
    <p>University of Oxford</p>
  </div>
  <div class="page">
    <p>Problem</p>
  </div>
  <div class="page">
    <p>CVE-2013-2110</p>
  </div>
  <div class="page">
    <p>What Gets Corrupted?</p>
  </div>
  <div class="page">
    <p>Finding a Corruption Target</p>
  </div>
  <div class="page">
    <p>Finding a Corruption Target</p>
  </div>
  <div class="page">
    <p>Finding a Corruption Target</p>
  </div>
  <div class="page">
    <p>Finding the Correct Layout</p>
  </div>
  <div class="page">
    <p>Finding the Correct Layout</p>
  </div>
  <div class="page">
    <p>Finding the Correct Layout</p>
  </div>
  <div class="page">
    <p>Finding Heap Manipulating Functions</p>
  </div>
  <div class="page">
    <p>Finding Heap Manipulating Functions</p>
  </div>
  <div class="page">
    <p>Finding Heap Manipulating Functions</p>
  </div>
  <div class="page">
    <p>Using Heap Manipulating Functions</p>
  </div>
  <div class="page">
    <p>Complete Exploit</p>
  </div>
  <div class="page">
    <p>Steps to Exploitation</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
  </div>
  <div class="page">
    <p>Allocator Design</p>
  </div>
  <div class="page">
    <p>Allocator Design Choices</p>
    <p>Goal  Service runtime requests for memory via the heap or memory mapped pages</p>
    <p>Objectives  differ based on the allocator, e.g.  Minimise fragmentation</p>
    <p>Maximise speed of allocation</p>
    <p>Maximise resilience to accidental errors</p>
    <p>Maximise resilience to purposeful attacks</p>
  </div>
  <div class="page">
    <p>Segregated Free Lists</p>
  </div>
  <div class="page">
    <p>Segregated Storage</p>
  </div>
  <div class="page">
    <p>Heap Layout Manipulation A Brief Introduction</p>
  </div>
  <div class="page">
    <p>Problem: sizeof(S)=8, sizeof(D)=32</p>
  </div>
  <div class="page">
    <p>Attempt #1  Just Allocate</p>
  </div>
  <div class="page">
    <p>Solution  Hole Filling</p>
  </div>
  <div class="page">
    <p>Noisy Interaction Sequences</p>
    <p>A significant complicating factor can be noise in the available allocation sequences</p>
    <p>void allocDestination()</p>
    <p>{</p>
    <p>n = malloc(32);</p>
    <p>d = malloc(dst);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Attempt #1  Just Allocate</p>
  </div>
  <div class="page">
    <p>Solution  Hole Creation, Step #1</p>
  </div>
  <div class="page">
    <p>Solution  Hole Creation, Step #2</p>
  </div>
  <div class="page">
    <p>Solution  Hole Creation, Step #3</p>
  </div>
  <div class="page">
    <p>Solution  Hole Creation, Step #4</p>
  </div>
  <div class="page">
    <p>Automating Heap Layout Manipulation</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Objective  Place source and destination buffer adjacent to each other</p>
    <p>Mechanism  Hole filling and creation</p>
    <p>Complicating factors  Diversity of allocator implementations, indirect allocator interaction, noise,</p>
    <p>layout constraints imposed by the allocator (e.g. segregated storage)</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Objective  Place source and destination buffer adjacent to each other</p>
    <p>Mechanism  Hole filling and creation</p>
    <p>Complicating factors  Diversity of allocator implementations, indirect allocator interaction, noise,</p>
    <p>layout constraints imposed by the allocator (e.g. segregated storage)</p>
    <p>Out of scope  Non-deterministic allocators, unknown heap starting state</p>
  </div>
  <div class="page">
    <p>Random Search</p>
    <p>Random combination of the available interaction sequences  Parameters: Maximum solution length, ratio of allocations to frees</p>
    <p>Could this work?</p>
  </div>
  <div class="page">
    <p>Evaluation  Benchmark Configuration (SIEVE)</p>
    <p>Allocators  tcmalloc (v2.6.1), dlmalloc (v2.8.6), avrlibc (v2.0)</p>
    <p>Starting states  Ruby, Python, PHPx2</p>
    <p>Source and destination sizes  The cross product of 8, 64, 512, 4096, 16384, 65536</p>
    <p>2592 benchmarks</p>
    <p>Search allowed 500,000 candidates per benchmark</p>
  </div>
  <div class="page">
    <p>Evaluation - Random Search</p>
  </div>
  <div class="page">
    <p>Evaluation - Random Search</p>
  </div>
  <div class="page">
    <p>Evaluation - Random Search</p>
  </div>
  <div class="page">
    <p>Evaluation - Random Search</p>
  </div>
  <div class="page">
    <p>Evaluation - Random Search</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Random search performs very well when there is no noise, and no segregated storage</p>
    <p>If all runs of the benchmarks are considered, 78% are solved at least once</p>
    <p>With appropriate computational resources random search can be pretty effective</p>
  </div>
  <div class="page">
    <p>End-to-End Automation of Heap Layout Manipulation</p>
  </div>
  <div class="page">
    <p>Working with Real Programs</p>
    <p>For evaluation we chose the PHP language interpreter  Open bug tracker, interpreter and language are featureful but easy to work</p>
    <p>with</p>
    <p>Hypothetical threat model: hardened interpreter in which we can run arbitrary PHP code but want to execute native code</p>
  </div>
  <div class="page">
    <p>High Level Algorithm</p>
  </div>
  <div class="page">
    <p>Fragmentation</p>
    <p>&lt;?php</p>
    <p>$image = imagecreatetruecolor(180, 30);</p>
    <p>imagestring($image, 5, 10, 8, Text', 0x00ff00);</p>
    <p>$gaussian = array(</p>
    <p>array(1.0, 2.0, 1.0),</p>
    <p>array(2.0, 4.0, 2.0)</p>
    <p>);</p>
    <p>var_dump(imageconvolution( $image, $gaussian, 16, 0));</p>
    <p>?&gt;</p>
  </div>
  <div class="page">
    <p>Fragmentation</p>
    <p>&lt;?php</p>
    <p>$image = imagecreatetruecolor(180, 30);</p>
    <p>imagestring($image, 5, 10, 8, Text', 0x00ff00);</p>
    <p>$gaussian = array(</p>
    <p>array(1.0, 2.0, 1.0),</p>
    <p>array(2.0, 4.0, 2.0)</p>
    <p>);</p>
    <p>var_dump(imageconvolution( $image, $gaussian, 16, 0));</p>
    <p>?&gt;</p>
    <p>imagecreatetruecolor(180, 30) imagestring($image, 5, 10, 8, Text, 0x00ff00) array(array(1.0, 2.0, 1.0), array(2.0, 4.0, 2.0)) array(1.0, 2.0, 1.0) array(2.0, 4.0, 2.0) var_dump(imageconvolution($image, $gaussian, 16, 0))</p>
  </div>
  <div class="page">
    <p>Fragmentation + Fuzzing</p>
    <p>&lt;?php</p>
    <p>$image = imagecreatetruecolor(180, 30);</p>
    <p>imagestring($image, 5, 10, 8, Text', 0x00ff00);</p>
    <p>$gaussian = array(</p>
    <p>array(1.0, 2.0, 1.0),</p>
    <p>array(2.0, 4.0, 2.0)</p>
    <p>);</p>
    <p>var_dump(imageconvolution( $image, $gaussian, 16, 0));</p>
    <p>?&gt;</p>
    <p>imagecreatetruecolor(180, 30) imagestring($image, 5, 10, 8, Text, 0x00ff00) array(array(1.0, 2.0, 1.0), array(2.0, 4.0, 2.0)) array(1.0, 2.0, 1.0) array(2.0, 4.0, 2.0) var_dump(imageconvolution($image, $gaussian, 16, 0))</p>
    <p>imagecreatetruecolor(1, 1) imagecreatetruecolor(1, 2) imagecreatetruecolor(1, 3) imagecreatetruecolor(1, 4)</p>
  </div>
  <div class="page">
    <p>High Level Algorithm</p>
  </div>
  <div class="page">
    <p>Randomly Produced Sequence</p>
  </div>
  <div class="page">
    <p>High Level Algorithm</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>3 vulnerabilities x 10 target data structures = 30 experiments  Max run time: 12 hours</p>
    <p>40 concurrent analysis processes</p>
    <p>21/30 (70%) success rate  Average time: 9m30s, Min. time: &lt; 1s, Max. time: 1h10m</p>
    <p>Average number of candidates before success: 720k</p>
  </div>
  <div class="page">
    <p>Exploit Templates</p>
  </div>
  <div class="page">
    <p>Exploit Templates</p>
  </div>
  <div class="page">
    <p>Completed Template</p>
  </div>
  <div class="page">
    <p>Demo</p>
    <p>CVE-2013-2110</p>
    <p>Exploit developer provides template  Partial exploit with holes</p>
    <p>SHRIKE completes the exploit by solving the layout problems</p>
  </div>
  <div class="page">
    <p>Automatically Completing a Partial Exploit</p>
    <p>https://www.youtube.com/watch?v=MOOvhckRoww</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>Heap layout manipulation can be automated, end-to-end  Future work: New types of software, improved discovery and use of</p>
    <p>interaction sequences, other heap-based vulnerability types</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>Heap layout manipulation can be automated, end-to-end  Future work: New types of software, improved discovery and use of</p>
    <p>interaction sequences, other heap-based vulnerability types</p>
    <p>Random search is an effective mechanism for automatic heap layout manipulation  Future work: Better search, relaxing constraints on non-determinism and</p>
    <p>starting state</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>Heap layout manipulation can be automated, end-to-end  Future work: New types of software, improved discovery and use of</p>
    <p>interaction sequences, other heap-based vulnerability types</p>
    <p>Random search is an effective mechanism for automatic heap layout manipulation  Future work: Better search, relaxing constraints on non-determinism and</p>
    <p>starting state</p>
    <p>Exploit templates allow us to combine the creativity of an exploit developer with the power of a machine  Future work: Automating other aspects and integration with template-based</p>
    <p>exploit development</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>Heap layout manipulation can be automated, end-to-end  Future work: New types of software, improved discovery and use of interaction</p>
    <p>sequences, other heap-based vulnerability types</p>
    <p>Random search is an effective mechanism for automatic heap layout manipulation  Future work: Better search, relaxing constraints on non-determinism and starting</p>
    <p>state</p>
    <p>Exploit templates allow us to combine the creativity of an exploit developer with the power of a machine  Future work: Automating other aspects and integration with template-based exploit</p>
    <p>development</p>
    <p>SHRIKE is a PoC system implementing end-to-end heap layout manipulation and integrating with exploit development via a template system. Code available!</p>
  </div>
  <div class="page">
    <p>Thanks / Questions? Code+Paper: https://sean.heelan.io/heaplayout</p>
    <p>@seanhn / sean.heelan@cs.ox.ac.uk</p>
  </div>
</Presentation>
