<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>End-to-end Data Integrity for File Systems: A ZFS Case Study</p>
    <p>Yupu Zhang, Abhishek Rajimwale</p>
    <p>Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
    <p>University of Wisconsin - Madison</p>
  </div>
  <div class="page">
    <p>End-to-end Argument</p>
    <p>Ideally, applications should take care of data integrity</p>
    <p>In reality, file systems are in charge</p>
    <p>Data is organized by metadata</p>
    <p>Most applications rely on file systems</p>
    <p>Applications share data</p>
  </div>
  <div class="page">
    <p>Data Integrity In Reality</p>
    <p>Preserving data integrity is a challenge</p>
    <p>Imperfect components  disk media, firmware, controllers, etc.</p>
    <p>Techniques to maintain data integrity  Checksums [Stein01, Bartlett04], RAID [Patternson88]</p>
    <p>Enough about disk. What about memory?</p>
  </div>
  <div class="page">
    <p>Memory Corruption</p>
    <p>Memory corruptions do exist</p>
    <p>Old studies: 200  5,000 FIT per Mb *OGorman92, Ziegler96, Normand96, Tezzaron04+  14  359 errors per year per GB</p>
    <p>A recent work: 25,000  70,000 FIT per Mb [Schroeder09]  1794  5023 errors per year per GB</p>
    <p>Reports from various software bug and vulnerability databases</p>
    <p>Isnt ECC enough?</p>
    <p>Usually correct single-bit error</p>
    <p>Many commodity systems dont have ECC (for cost)</p>
    <p>Cant handle software-induced memory corruptions</p>
  </div>
  <div class="page">
    <p>The Problem</p>
    <p>File systems cache a large amount of data in memory for performance  Memory capacity is growing</p>
    <p>File systems may cache data for a long time  Susceptible to memory corruptions</p>
    <p>How robust are modern file systems to memory corruptions?</p>
  </div>
  <div class="page">
    <p>A ZFS Case Study</p>
    <p>Fault injection experiments on ZFS</p>
    <p>What happens when disk corruption occurs?</p>
    <p>What happens when memory corruption occurs?</p>
    <p>How likely a bit flip would cause problems?</p>
    <p>Why ZFS?</p>
    <p>Many reliability mechanisms</p>
    <p>provable end-to-end data integrity [Bonwick07]</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>ZFS is robust to a wide range of disk corruptions</p>
    <p>ZFS fails to maintain data integrity in the presence of memory corruptions</p>
    <p>reading/writing corrupt data, system crash</p>
    <p>one bit flip has non-negligible chances of causing failures</p>
    <p>Data integrity at memory level is not preserved</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZFS Background</p>
    <p>Data Integrity Analysis</p>
    <p>On-disk Analysis</p>
    <p>In-mem Analysis</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>BlockBlock</p>
    <p>ZFS Reliability Features</p>
    <p>Checksums  Detect silent data corruption  Stored in a generic block pointer</p>
    <p>Replication  Up to three copies (ditto blocks)  Recover from checksum mismatch</p>
    <p>Copy-On-Write transactions  Keep disk image always consistent</p>
    <p>Storage pool  Mirror, RAID-Z Block</p>
    <p>Address 1</p>
    <p>Address 2</p>
    <p>Address 3</p>
    <p>Block Checksum</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZFS Background</p>
    <p>Data Integrity Analysis</p>
    <p>On-disk Analysis</p>
    <p>In-mem Analysis</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Summary of On-disk Analysis</p>
    <p>ZFS detects all corruptions by using checksums</p>
    <p>Redundant on-disk copies and in-mem caching help ZFS recover from disk corruptions</p>
    <p>Data integrity at this level is well preserved</p>
    <p>(See our paper for more details)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZFS Background</p>
    <p>Data Integrity Analysis</p>
    <p>On-disk Analysis</p>
    <p>In-mem Analysis</p>
    <p>Random Test</p>
    <p>Controlled Test</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Random Test</p>
    <p>Goal  What happens when random bits get flipped?  How often do those failures happen?</p>
    <p>Fault injection  A trial: each run of a workload</p>
    <p>Run a workload -&gt; inject bit flips -&gt; observe failures</p>
    <p>Probability calculation  For each type of failure</p>
    <p>P (failure) = # of trials with such failure / total # of trials</p>
  </div>
  <div class="page">
    <p>Workload Reading</p>
    <p>Corrupt Data Writing</p>
    <p>Corrupt Data Crash Page Cache</p>
    <p>varmail 0.6% 0.0% 0.3% 31 MB</p>
    <p>oltp 1.9% 0.1% 1.1% 129 MB</p>
    <p>webserver 0.7% 1.4% 1.3% 441 MB</p>
    <p>fileserver 7.1% 3.6% 1.6% 915 MB</p>
    <p>Result of Random Test</p>
    <p>The probability of failures is non-negligible</p>
    <p>The more page cache is consumed, the more likely a failure would occur</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZFS Background</p>
    <p>Data Integrity Analysis</p>
    <p>On-disk Analysis</p>
    <p>In-mem Analysis</p>
    <p>Random Test</p>
    <p>Controlled Test</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Controlled Test</p>
    <p>Goal</p>
    <p>Why do those failures happen in ZFS?</p>
    <p>How does ZFS react to memory corruptions?</p>
    <p>Fault injection</p>
    <p>Metadata: field by field</p>
    <p>Data: a random bit in a data block</p>
    <p>Workload</p>
    <p>For global metadata: the zfs command</p>
    <p>For file system level metadata and data: POSIX API</p>
  </div>
  <div class="page">
    <p>Result Overview</p>
    <p>General observations</p>
    <p>Life cycle of a block</p>
    <p>Why does bad data get read or written to disk?</p>
    <p>Specific cases</p>
    <p>Bad data is returned</p>
    <p>System crashes</p>
    <p>Operation fails</p>
  </div>
  <div class="page">
    <p>Lifecycle of a Block: READ</p>
    <p>PAGE CACHE</p>
    <p>DISK</p>
    <p>READ CORRUPT BLOCKREAD</p>
    <p>Blocks on the disk are protected</p>
    <p>Blocks in memory are not protected</p>
    <p>The window of vulnerability is unbounded</p>
    <p>unbounded time</p>
    <p>EVICTION</p>
    <p>unbounded time</p>
    <p>verify checksum</p>
  </div>
  <div class="page">
    <p>Lifecycle of a Block: WRITE</p>
    <p>PAGE CACHE</p>
    <p>DISK</p>
    <p>WRITE FLUSH CORRUPT BLOCK</p>
    <p>Corrupt blocks are written to disk permanently</p>
    <p>Corrupt blocks are protected by the new checksum</p>
    <p>&lt;= 30s</p>
    <p>EVICTION</p>
    <p>unbounded time</p>
    <p>generate checksum</p>
  </div>
  <div class="page">
    <p>Result Overview</p>
    <p>General observations</p>
    <p>Life cycle of a block</p>
    <p>Why does bad data get read or written to disk?</p>
    <p>Specific cases</p>
    <p>Bad data is returned</p>
    <p>System crashes</p>
    <p>Operation fails</p>
  </div>
  <div class="page">
    <p>Case 1: Bad Data</p>
    <p>dnode</p>
    <p>indirect block</p>
    <p>data block</p>
    <p>Read (block 0)</p>
    <p>dn_nlevels == 3 (011)  return data block 0 at the leaf level</p>
    <p>dn_nlevels == 1 (001)  treat an indirect block as data block 0</p>
    <p>return the indirect block</p>
    <p>BAD DATA!!!</p>
  </div>
  <div class="page">
    <p>Case 2: System Crash</p>
    <p>dnode</p>
    <p>indirect block</p>
    <p>data block</p>
    <p>Read (block 0)</p>
    <p>dn_nlevels == 3 (011)  return data block 0 at the leaf level</p>
    <p>dn_nlevels == 7 (111)  go down to the leaf level</p>
    <p>treat data block 0 as an indirect block</p>
    <p>try to follow an invalid block pointer</p>
    <p>later a NULL-pointer is dereferenced</p>
  </div>
  <div class="page">
    <p>Case 2: System Crash (cont.)</p>
    <p>uint64_t size = BP_GET_LSIZE(bp); ... buf-&gt;b_data = zio_buf_alloc(size); void *zio_buf_alloc(size_t size)</p>
    <p>{ size_t c = (size - 1) &gt;&gt; SPA_MINBLOCKSHIFT; ASSERT(c&lt; SPA_MAXBLOCKSIZE</p>
    <p>&gt;&gt;SPA_MINBLOCKSHIFT);</p>
    <p>return (kmem_cache_alloc (zio_buf_cache[c],KM_PUSHPAGE));</p>
    <p>}</p>
    <p>void * kmem_cache_alloc (kmem_cache_t *cp, int kmflag) {</p>
    <p>ccp = KMEM_CPU_CACHE(cp);  mutex_enter(&amp;ccp-&gt;cc_ylock); ...</p>
    <p>}</p>
    <p>a block pointer, now invalid</p>
    <p>could be an arbitrarily large value</p>
    <p>ASSERT(c&lt;256) disabled</p>
    <p>NULL</p>
    <p>but now c &gt; 256</p>
    <p>ccp is also NULL NULL-pointer dereference</p>
    <p>CRASH!!!</p>
  </div>
  <div class="page">
    <p>Open (file)</p>
    <p>zp_flags is correct  open() succeeds</p>
    <p>the 41st bit of zp_flags is flipped from 0 to 1</p>
    <p>EACCES (permission denied)</p>
    <p>Case 3: Operation Fail</p>
  </div>
  <div class="page">
    <p>Case 3: Operation Fail (cont.)</p>
    <p>if (((v4_mode &amp; (ACE_READ_DATA|ACE_EXECUTE)) &amp;&amp;</p>
    <p>(zp-&gt;z_phys-&gt;zp_flags &amp; ZFS_AV_QUARANTINED))) {</p>
    <p>*check_privs = B_FALSE; return (EACCES);</p>
    <p>}</p>
    <p>#define ZFS_AV_QUARANTINED 0x0000020000000000</p>
    <p>. 0010 .</p>
  </div>
  <div class="page">
    <p>Summary of Results</p>
    <p>Blocks in memory are not protected  Checksum is only used at the disk boundary</p>
    <p>Metadata is critical  Bad data is returned, system crashes, or operations fail</p>
    <p>Data integrity at this level is not preserved</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZFS Background</p>
    <p>Data Integrity Analysis</p>
    <p>On-disk Analysis</p>
    <p>In-mem Analysis</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>A lot of effort has been put into dealing with disk failures  little into handling memory corruptions</p>
    <p>Memory corruptions do cause problems  reading/writing bad data, system crash, operation fail</p>
    <p>Shouldn't we protect data and metadata from memory corruptions?  to achieve end-to-end data integrity</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
    <p>The ADvanced Systems Laboratory (ADSL)</p>
    <p>http://www.cs.wisc.edu/adsl/</p>
  </div>
</Presentation>
