<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Solving (Weighted) Partial MaxSat Through Satisfiability Testing</p>
    <p>Carlos Ansotegui1 Mara Luisa Bonet2 Jordi Levy3</p>
    <p>Universitat de Lleida (DIEI, UdL)1.</p>
    <p>Universitat Politecnica de Catalunya (LSI, UPC)2.</p>
    <p>Artificial Intelligence Research Institute (IIIA, CSIC)3.</p>
    <p>SAT 2009</p>
  </div>
  <div class="page">
    <p>Partial MaxSat</p>
    <p>C1 . . .</p>
    <p>. . . Soft Clauses</p>
    <p>. . .</p>
    <p>Cn Cn+1 . . .</p>
    <p>. . . Hard Clauses</p>
    <p>. . .</p>
    <p>Cn+m</p>
    <p>Partial MaxSat is the problem of finding an assignment to the variables of C such that no hard clause is falsified and the minimum number of soft clauses are falsified.</p>
  </div>
  <div class="page">
    <p>Partial MaxSat</p>
    <p>. . . Soft Clauses</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . . Hard Clauses</p>
    <p>. . .</p>
    <p>: Cn+m</p>
    <p>Partial MaxSat is the problem of finding an assignment to the variables of C that minimizes the cost of the falsified clauses.</p>
  </div>
  <div class="page">
    <p>Weighted Partial MaxSat</p>
    <p>w1 : C1 . . .</p>
    <p>. . . Soft Clauses</p>
    <p>. . .</p>
    <p>wn : Cn  : Cn+1</p>
    <p>. . .</p>
    <p>. . . Hard Clauses</p>
    <p>. . .</p>
    <p>: Cn+m</p>
    <p>Weighted Partial MaxSat is the problem of finding an assignment to the variables of C that minimizes the cost of the falsified clauses.</p>
  </div>
  <div class="page">
    <p>Solving Partial MaxSat Through Satisfiability Testing</p>
    <p>General approach:</p>
    <p>. . . Soft Clauses</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . . Hard Clauses</p>
    <p>. . .</p>
    <p>: Cn+m  : CNF (</p>
    <p>bi  k )</p>
    <p>if SAT(k  1) is unsatisfiable and SAT(k ) satisfiable, then k is the optimum.</p>
  </div>
  <div class="page">
    <p>Solving Weighted Partial MaxSat Through Satisfiability Testing</p>
    <p>General approach:</p>
    <p>w1 : C1  b1 . . .</p>
    <p>. . . Soft Clauses</p>
    <p>. . .</p>
    <p>wn : Cn  bn  : Cn+1</p>
    <p>. . .</p>
    <p>. . . Hard Clauses</p>
    <p>. . .</p>
    <p>: Cn+m  : CNF (</p>
    <p>bi  wi  k )</p>
    <p>if SAT(k  1) is unsatisfiable and SAT(k ) satisfiable, then k is the optimum.</p>
  </div>
  <div class="page">
    <p>MaxSat Solvers Based On Satisfiability Testing</p>
    <p>Solvers at MaxSat Evaluation 2008: Weighted Partial MaxSat:</p>
    <p>SAT4Java. D. L. Berre</p>
    <p>Partial MaxSat: Msu1.2. (implementation of FU&amp;MALIK algorithm) J. Marques-Silva, V. Manquinho and J. Planes. Msu4.0. J. Marques-Silva and J. Planes.</p>
    <p>Our contribution:</p>
    <p>A Weighted version of the FU&amp;MALIK algorithm (WPM1) together with its proof of correctness</p>
    <p>Another Partial MaxSat algorithm variant of the FU&amp;MALIK algorithm (PM2), and the proof of its correctness</p>
  </div>
  <div class="page">
    <p>The FU&amp;MALIK algorithm</p>
    <p>input:  = {C1, . . . , Cm} cost := 0 Optimal while true do</p>
    <p>(st,c ) := SAT () Call to the SAT solver if st = SAT then return cost BV :=  Set of blocking variables for each C  c do</p>
    <p>if C is soft then b := new blocking variable  :=  \ {C}  {C  b} Add blocking variable BV := BV  {b}</p>
    <p>if BV =  then return UNSAT No soft clauses in the core  :=   CNF (</p>
    <p>P</p>
    <p>bBV b = 1) Add cardinality as hard clauses cost := cost + 1</p>
  </div>
  <div class="page">
    <p>FU&amp;MALIK algorithm as Complete Inference</p>
    <p>Let  be a Partial MaxSat Formula, given that  is unsatisfiable</p>
    <p>and   (1 : ) are MaxSat equivalent, i.e., the cost of the optimal assignment of  is equal to the optimal cost of    (1 : )</p>
  </div>
  <div class="page">
    <p>FU&amp;MALIK algorithm as Complete Inference</p>
    <p>Let  be a Partial MaxSat Formula, given that  is unsatisfiable</p>
    <p>and   (1 : ) are MaxSat equivalent, i.e., the cost of the optimal assignment of  is equal to the optimal cost of    (1 : )</p>
  </div>
  <div class="page">
    <p>Solving Weighted Partial MaxSat with Complete Inference</p>
    <p>Let  be a Weighted Partial MaxSat Formula, given that SAT() is unsatisfiable</p>
    <p>w :</p>
    <p>and   (w : ) are MaxSat equivalent</p>
  </div>
  <div class="page">
    <p>Solving Weighted Partial MaxSat with Complete Inference</p>
    <p>Let  be a Weighted Partial MaxSat Formula, given that SAT() is unsatisfiable</p>
    <p>w :</p>
    <p>and   (w : ) are MaxSat equivalent</p>
  </div>
  <div class="page">
    <p>Solving Weighted Partial MaxSat with Complete Inference</p>
    <p>Let  be a Weighted Partial MaxSat Formula, given that SAT() is unsatisfiable</p>
    <p>w :</p>
    <p>and   (w : ) are MaxSat equivalent</p>
  </div>
  <div class="page">
    <p>Solving Weighted Partial MaxSat with Complete Inference</p>
    <p>Let  be a Weighted Partial MaxSat Formula, given that SAT() is unsatisfiable</p>
    <p>w :</p>
    <p>and   (w : ) are MaxSat equivalent</p>
  </div>
  <div class="page">
    <p>The WPM1 algorithm</p>
    <p>input:  = {(C1, w1), . . . , (Cm, wm), wi &gt; 0} cost := 0 Optimal while true do</p>
    <p>(st,c ) := SAT ({Ci | (Ci, wi )  }) Call SAT solver without weights if st = SAT then return cost BV :=  Blocking variables of the core wmin := min{wi | Ci  c and Ci is soft} for each Ci  c do</p>
    <p>if Ci is soft then bi := new blocking variable  :=  \ {(Ci, wi )}  {(Ci, wi  wmin)}  {(Ci  bi, wmin)}</p>
    <p>Duplicate soft clauses BV := BV  {bi }</p>
    <p>if BV =  then return UNSAT No soft clauses in the core else  :=   CNF (</p>
    <p>P</p>
    <p>bBV b = 1) Add cardinality as hard clauses cost := cost + wmin</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>Example: WPM1</p>
  </div>
  <div class="page">
    <p>The PM2 algorithm</p>
    <p>input:  = {C1, . . . , Cm} BV := {b1, . . . , bm} Set of all blocking variables w := {C1  b1, . . . , Cm  bm} Protect all clauses cost := 0 Optimal L :=  Set of Cores while true do</p>
    <p>(st,c ) := SAT (w  CNF ( P</p>
    <p>bBV b  cost)) Call to SAT solver with at most cardinality</p>
    <p>if st = SAT then return cost remove the hard clauses from c if c =  then return UNSAT B :=  Blocking variables of the core for each C = Ci  bi  c do</p>
    <p>B := B  {bi } L := L  {c} k := |{  L |   c}| Num. of cores contained in c w := w  CNF (</p>
    <p>P</p>
    <p>bB b  k ) Add at least cardinality constraint cost := cost + 1</p>
  </div>
  <div class="page">
    <p>Example: PM2</p>
    <p>Pn 1 bi  0</p>
  </div>
  <div class="page">
    <p>Example: PM2</p>
    <p>Pn 1 bi  0</p>
    <p>Pn 1 bi  1</p>
  </div>
  <div class="page">
    <p>Example: PM2</p>
    <p>Pn 1 bi  0</p>
    <p>Pn 1 bi  1</p>
    <p>Pk 1 bi  2</p>
    <p>: Pn</p>
  </div>
  <div class="page">
    <p>Solvers &amp; Benchmarks</p>
    <p>Our MaxSat solvers: WPM1 and PM2 SAT solver: picosat Cardinality constraints: regular encoding for WPM1, sequential counters for PM2.</p>
    <p>Other solvers based on satisfiability Testing: SAT4Java, msu1.2 and msu4.0.</p>
    <p>Benchmarks: crafted and industrial instances available from the MaxSat Evaluation 2008.</p>
  </div>
  <div class="page">
    <p>Exp: Unweighted MaxSat Category</p>
    <p>set best08 WPM1 PM2 msu1.2 msu4.0 SAT4J</p>
    <p>Crafted Maxcut</p>
    <p>dimacs mod (62) 81.8(52) 0.03(4) 175(7) 0.28(4) 1.71(3) 0.93(2)</p>
    <p>Maxcut random</p>
    <p>(58) 4.5(40) -(0) -(0) - (0) - (0) - (0) Maxcut</p>
    <p>Spinglass (5) 1.62(3) 0.85(2) 102.5(2) 0.68 (2) -(0) -(0)</p>
    <p>Industrial</p>
    <p>SeanSafarpour(112) 57.5(72) 66.6(81) 90.2(75) 57.5(72) 64.4(50) 14.5(10)</p>
  </div>
  <div class="page">
    <p>Exp: Unweighted MaxSat Category</p>
    <p>set best08 WPM1 PM2.1 msu1.2 msu4.0 SAT4J</p>
    <p>Crafted Maxcut</p>
    <p>dimacs mod (62) 81.8(52) 0.03(4) 72(10) 0.28(4) 1.71(3) 0.93(2)</p>
    <p>Maxcut random</p>
    <p>(58) 4.5(40) -(0) -(0) - (0) - (0) - (0) Maxcut</p>
    <p>Spinglass (5) 1.62(3) 0.85(2) 4(2) 0.68 (2) -(0) -(0)</p>
    <p>Industrial</p>
    <p>SeanSafarpour(112) 57.5(72) 66.6(81) 60(78) 57.5(72) 64.4(50) 14.5(10)</p>
  </div>
  <div class="page">
    <p>Exp: Partial MaxSat Category</p>
    <p>set best08 WPM1 PM2 msu1.2 msu4.0 SAT4J</p>
    <p>Crafted Maxclique Random</p>
    <p>(96) 2.4(96) 50.4(1) -(0) -(0) 106(61) 114(52) Maxclique Structured</p>
    <p>(62) 73(36) 41.2(11) 32.6(6) 4.9(7) 105.2(13) 50.5(13) Maxone 3SAT</p>
    <p>(80) 0.46(80) 16(46) 105.7(79) 52.7(40) 118.2(35) 96.6(31) Maxone</p>
    <p>Structured (60) 10.1(60) 0.69(2) 547.5(13) 122.7(2) 3.34(1) 10.1(60)</p>
    <p>Industrial Bcp fir</p>
    <p>(59) 49(46) 32 (57) 67.4(56) 49.2(46) -(0) 13.3(10) Bcp</p>
    <p>hippyRa1 (1183) 19(1111) 3(1122) 6(1163) 7.2(1105) 0.29(348) 12.2(1109)</p>
    <p>Bcp msp</p>
    <p>(148) 49(104) 15.5(26) 106(94) 4.9(25) 22.9(79) 8.8(93) Bcp mtg</p>
    <p>(215) 26(206) 5.8(170) 1.3(215) 17.5(164) 0.43(22) 57(196) Bcp syn</p>
    <p>(74) 63(34) 14.1(32) 14(38) 51.1(31) 105.2(11) 67.4(21) Pbo</p>
    <p>mqcnencdr (128) 167(115) 80.4(50) 125(84) 50.3(54) 167.5(115) 180.6(102)</p>
    <p>Pbo mqcnlogencdr</p>
    <p>(128) 111(128) 67.1(75) 130(106) 53(65) 111(128) 117.5(126) Pbo</p>
    <p>routing (15) 2.9(15) 1(15) 24.7(15) 1.35(15) 54.9(15) 26.4(9)</p>
  </div>
  <div class="page">
    <p>Exp: Partial MaxSat Category</p>
    <p>set best08 WPM1 PM2.1 msu1.2 msu4.0 SAT4J</p>
    <p>Crafted Maxclique Random</p>
    <p>(96) 2.4(96) 50.4(1) 126(54) -(0) 106(61) 114(52) Maxclique Structured</p>
    <p>(62) 73(36) 41.2(11) 62(12) 4.9(7) 105.2(13) 50.5(13) Maxone 3SAT</p>
    <p>(80) 0.46(80) 16(46) 22(80) 52.7(40) 118.2(35) 96.6(31) Maxone</p>
    <p>Structured (60) 10.1(60) 0.69(2) 253(34) 122.7(2) 3.34(1) 10.1(60)</p>
    <p>Industrial Bcp fir</p>
    <p>(59) 49(46) 32 (57) 18(58) 49.2(46) -(0) 13.3(10) Bcp</p>
    <p>hippyRa1 (1183) 19(1111) 3(1122) 13.5(1163) 7.2(1105) 0.29(348) 12.2(1109)</p>
    <p>Bcp msp</p>
    <p>(148) 49(104) 15.5(26) 384.2(36) 4.9(25) 22.9(79) 8.8(93) Bcp mtg</p>
    <p>(215) 26(206) 5.8(170) 10.5(214) 17.5(164) 0.43(22) 57(196) Bcp syn</p>
    <p>(74) 63(34) 14.1(32) 71.2(34) 51.1(31) 105.2(11) 67.4(21) Pbo</p>
    <p>mqcnencdr (128) 167(115) 80.4(50) 142(78) 50.3(54) 167.5(115) 180.6(102)</p>
    <p>Pbo mqcnlogencdr</p>
    <p>(128) 111(128) 67.1(75) 140.3(97) 53(65) 111(128) 117.5(126) Pbo</p>
    <p>routing (15) 2.9(15) 1(15) 24.7(15) 2.9(15) 54.9(15) 26.4(9)</p>
  </div>
  <div class="page">
    <p>Exp: Weighted (Partial) MaxSat Categories</p>
    <p>set # best08 WPM1 SAT4J Weighted MaxSat Category</p>
    <p>Crafted KeXu/ 15 IncWMaxsatz - 126.5(15) 478(1) 7.7(4)</p>
    <p>Ramsey/ 48 lb-psat - 1.63(37) 0.05(34) 16(35) WMaxcut/dimacs mod/ 62 ToolBar3 - 59(56) 0.12(3) 0.84(2)</p>
    <p>WMaxcut/Random/ 40 MiniMaxSAT - 5.43(40) -(0) -(0) WMaxcut/Spinglass/ 5 MiniMaxSAT - 27.6(4) -(0) -(0)</p>
    <p>Weighted Partial MaxSat Category Crafted</p>
    <p>Auctions/Auc paths/ 88 IncWMaxsatz - 8.4(88) -(0) 497(15) Auctions/Auc regions/ 88 MiniMaxSAT - 1.7(84) -(0) 166(76) Auctions/Auc Sched/ 84 MiniMaxSAT - 46(84) -(0) 317(49)</p>
    <p>Random-net/ 350 Clone - 72(236) 194(91) 331(13) Pseudo-factor/ 186 IncWMaxsatz - 0.07(186) 16(124) 3.3(186) Pseudo- miplib/ 16 SAT4J - 13(6) 0.29(3) 13(6)</p>
    <p>QCP/ 25 SAT4J - 6.14(25) 0.27(25) 6.14(25) WCSP/Planning/ 71 SAT4J - 6.55(71) 0.9(46) 6.55(71) WCSP/Spot5/Dir/ 21 Clone - 87.6(6) 2.31(4) 76(3) WCSP/Spot5/Log/ 21 Clone - 15(6) 0.52(5) 63.8(3)</p>
    <p>Industrial Protein ins 12 MiniMaxSat - 482(8) 42(1) 6.05(1)</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
