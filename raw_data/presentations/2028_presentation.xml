<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sharing and Caring of Data at the Edge</p>
    <p>Animesh Trivedi*, Lin Wang*, Henri Bal, Alexandru Iosup</p>
    <p>USENIX HotEdge'20</p>
    <p>June 25, 2020</p>
  </div>
  <div class="page">
    <p>What do we mean when we talk about edge computing?</p>
    <p>Edge Site</p>
    <p>Edge Node</p>
    <p>Edge</p>
    <p>WiFi</p>
    <p>V2X</p>
    <p>Shared application data/state</p>
    <p>Client</p>
    <p>Cloud</p>
    <p>Synchronization</p>
    <p>Edge infrastructure</p>
    <p>Distributed: cloud-edge continuum  Heterogeneous: servers, Jetson boards, Raspberry Pis  Dynamic: user mobility, resource reclamation</p>
    <p>Edge applications: many are collaborative</p>
    <p>AR/VR/MR gaming: user profile, game state  Autonomous driving: maps, LiDAR data, models  IoT sensing/analytics: environment, tracking state  Edge ML/DL: shared models/parameters, training data</p>
  </div>
  <div class="page">
    <p>How do applications share data nowadays?</p>
    <p>Principle Decouple compute and storage for</p>
    <p>higher scalability and availability, and lower cost</p>
    <p>Cloud solutions HDFS, Amazon S3, Redis, Cassandra...</p>
    <p>Serverless computing: function as a service</p>
    <p>Amazon S3</p>
    <p>Redis</p>
    <p>compute requests</p>
    <p>stateless functions storage service</p>
    <p>application state/data</p>
  </div>
  <div class="page">
    <p>How to apply similar ideas to the edge?</p>
    <p>Compute requests</p>
    <p>Stateless functions</p>
    <p>Storage service for the edge?</p>
    <p>Application state/data</p>
    <p>?</p>
    <p>Question: Can we just use cloud storage solutions at the edge?</p>
    <p>Short answer is NO, because of the new challenges (distributed, heterogeneous, dynamic) imposed by the edge [Confais et al. CloudCom'16]</p>
    <p>High latency for strong consistency (multi-RTT)  High cross-site traffic volume</p>
  </div>
  <div class="page">
    <p>What do we need to consider when designing an edge store ?</p>
    <p>Abstractions/APIs KV-pairs, graph</p>
    <p>based, time-series</p>
    <p>Locality Replication, spatio</p>
    <p>temporal encoding</p>
    <p>Heterogeneity Partial replica, TTL</p>
    <p>based data eviction</p>
    <p>Mobility Session migration,</p>
    <p>replica placement</p>
    <p>Failover Zones, erasure</p>
    <p>encoding, CRDT</p>
    <p>Scalability Spatio-temporal</p>
    <p>hashing</p>
    <p>Semantics Context-/Location</p>
    <p>based, consistency</p>
    <p>Monitoring Resource usage,</p>
    <p>dynamics, mobility</p>
  </div>
  <div class="page">
    <p>Where are we standing now?</p>
    <p>Abstraction/API Locality Heterogeneity Mobility Failover Scalability Semantics</p>
    <p>PathStore relational/CQL      session/eventual</p>
    <p>FogStore key-value      context-aware</p>
    <p>DataFog key-value      eventual</p>
    <p>RedWedding CRDT      conflict-free</p>
    <p>DPaxos transactions      quorum-based</p>
    <p>EdgeCons events      quorum-based</p>
    <p>TSDBs time-series      range, aggregate</p>
    <p>Cachier objects, contents      N/A</p>
    <p>Vision-specific key-frames, features      N/A</p>
    <p>Full support  Partial support No support  Unknown</p>
    <p>Little to no support</p>
    <p>Various abstractions and semantics</p>
  </div>
  <div class="page">
    <p>Griffin:</p>
    <p>a multi-consistency hierarchical distributed storage service for edge computing</p>
    <p>Edge</p>
    <p>Multi-consistency declarative API</p>
    <p>Tradeoffs between latency and consistency [Terry et al. SOSP'13]  Timestamp-based conflict resolution  Reduce (de)serialization cost</p>
    <p>Model-based resource management</p>
    <p>Graph-based models for heterogeneous resources  Adaptive optimization mechanisms</p>
    <p>Real-time monitoring</p>
    <p>Infrastructure-centric latency/resources monitoring  Mobility monitoring/prediction</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Key messages</p>
    <p>There is a need for a first-class service for data and state sharing for edge computing</p>
    <p>Edge data sharing requirements are wide and diverse</p>
    <p>Challenges to existing storage services when applied at the edge generate opportunities for a suitable edge store design</p>
    <p>Paul Dickenson</p>
  </div>
  <div class="page">
    <p>Discussion points</p>
    <p>Usability How should we make edge application develops' life easier?</p>
    <p>What abstractions to facilitate state externalization?</p>
    <p>Management Is it realistic to monitor and model the edge environment</p>
    <p>with all its complexities? How resources should be shared</p>
    <p>among different services including edge store?</p>
    <p>Incentives How to design a cooperation framework for multiple edge</p>
    <p>providers (e.g., like peering on Internet)? How to handle</p>
    <p>privacy-related concerns?</p>
  </div>
  <div class="page">
    <p>Sharing and Caring of Data at the Edge</p>
    <p>Animesh Trivedi*, Lin Wang*, Henri Bal, Alexandru Iosup</p>
    <p>USENIX HotEdge'20</p>
    <p>June 25, 2020</p>
  </div>
</Presentation>
