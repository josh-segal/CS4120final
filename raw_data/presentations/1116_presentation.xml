<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Tailwind: Fast and Atomic RDMA-based Replication</p>
    <p>Yacine Taleb, Ryan Stutsman, Gabriel Antoniu, Toni Cortes</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>General purpose in-memory key-value stores are widely used nowadays</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>General purpose in-memory key-value stores are widely used nowadays</p>
    <p>Recent systems can process millions of requests/ second/machine: E.g. RAMCloud, FaRM, MICA,</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>General purpose in-memory key-value stores are widely used nowadays</p>
    <p>Recent systems can process millions of requests/ second/machine: E.g. RAMCloud, FaRM, MICA,</p>
    <p>Key enablers: eliminating network overheads (e.g., kernel bypass) and leveraging multicore architectures</p>
  </div>
  <div class="page">
    <p>CPU is becoming a bottleneck in modern kv-stores -&gt;Random memory access, key-value GET/PUT processing</p>
    <p>In-Memory Key-Value Stores</p>
  </div>
  <div class="page">
    <p>CPU is becoming a bottleneck in modern kv-stores -&gt;Random memory access, key-value GET/PUT processing</p>
    <p>Persistent in-memory kv-stores have to replicate data to survive failures</p>
    <p>In-Memory Key-Value Stores</p>
    <p>Primary</p>
    <p>BackupBackup</p>
  </div>
  <div class="page">
    <p>CPU is becoming a bottleneck in modern kv-stores -&gt;Random memory access, key-value GET/PUT processing</p>
    <p>Persistent in-memory kv-stores have to replicate data to survive failures</p>
    <p>In-Memory Key-Value Stores</p>
    <p>Primary</p>
    <p>Backup</p>
    <p>Primary</p>
    <p>Backup</p>
  </div>
  <div class="page">
    <p>CPU is becoming a bottleneck in modern kv-stores -&gt;Random memory access, key-value GET/PUT processing</p>
    <p>Persistent in-memory kv-stores have to replicate data to survive failures -&gt;Replication contends with normal request processing</p>
    <p>In-Memory Key-Value Stores</p>
    <p>Primary</p>
    <p>Backup</p>
    <p>Primary</p>
    <p>Backup</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>Primary copies</p>
    <p>DRAM</p>
    <p>Client PUT(Y)</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>Client PUT(Y)</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>Primary Replicate X</p>
    <p>Client PUT(Y)</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>Client Primary</p>
    <p>X</p>
    <p>Replicate X</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>PUT(Y)</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>In-Memory Key-Value Stores</p>
    <p>Replicate X PUT Y</p>
    <p>Replicate X</p>
    <p>Replicate X</p>
    <p>GET Y</p>
    <p>PUT Y</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>Primary</p>
    <p>Primary</p>
    <p>Primary X X X Y Y</p>
    <p>Client</p>
    <p>Client</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Replication impedes modern kv-stores</p>
    <p>Replication in In-Memory Key-Value Stores</p>
  </div>
  <div class="page">
    <p>Replication impedes modern kv-stores and collocated applications</p>
    <p>Replication in In-Memory Key-Value Stores</p>
    <p>Stream ProcessingGraph ProcessingBlock Storage</p>
  </div>
  <div class="page">
    <p>How to mitigate replication overhead?</p>
    <p>Replication in In-Memory Key-Value Stores</p>
  </div>
  <div class="page">
    <p>How to mitigate replication overhead?</p>
    <p>Techniques like Remote Direct Memory Access (RDMA) seem promising</p>
    <p>Replication in In-Memory Key-Value Stores</p>
  </div>
  <div class="page">
    <p>Replication in In-Memory Key-Value Stores</p>
    <p>Client Primary</p>
    <p>YX</p>
    <p>Replicate X PUT Y</p>
    <p>Primary Replicate X</p>
    <p>Primary Replicate X</p>
    <p>Client GET Y</p>
    <p>Client PUT Y</p>
    <p>YX X</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>NIC</p>
  </div>
  <div class="page">
    <p>Client Primary</p>
    <p>YX</p>
    <p>Replicate X PUT Y</p>
    <p>Primary Replicate X</p>
    <p>Primary Replicate X</p>
    <p>Client GET Y</p>
    <p>Client PUT Y</p>
    <p>YX X</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>NIC</p>
    <p>RDMA-Based Replication</p>
    <p>DMA</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>YX</p>
    <p>Replicate X</p>
    <p>Primary Replicate X</p>
    <p>Primary Replicate X YX X</p>
    <p>Primary copiesBackup copies</p>
    <p>DRAM</p>
    <p>NIC</p>
    <p>RDMA-Based Replication</p>
    <p>DMA</p>
  </div>
  <div class="page">
    <p>Existing Protocols</p>
    <p>Many systems use one-sided RDMA for replication FaRM NSDI14, DARE HPDC15, HydraDB SC16</p>
    <p>Receiver polls</p>
    <p>Integrity check Message fully received</p>
    <p>Ring Buffer</p>
    <p>MSG2 MSG1</p>
    <p>MSG3</p>
    <p>Backup</p>
    <p>Primary</p>
    <p>RDMAStill involves backups CPU, defeats RDMA purpose!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Context</p>
    <p>Existing RDMA-based replication protocols</p>
    <p>Tailwinds design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication</p>
    <p>Why not just perform RDMA and leave target idle?</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication</p>
    <p>Primary</p>
    <p>DRAM</p>
    <p>PUT (A)</p>
    <p>Replicate (A)</p>
    <p>Backup</p>
    <p>Why not just perform RDMA and leave target idle?</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication</p>
    <p>Primary</p>
    <p>DRAM</p>
    <p>PUT (A)</p>
    <p>Replicate (A)</p>
    <p>Backup</p>
    <p>Why not just perform RDMA and leave target idle?</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication</p>
    <p>Why not just perform RDMA and leave target idle?</p>
    <p>Recover (A)Primary</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication</p>
    <p>Why not just perform RDMA and leave target idle?</p>
    <p>Recover (A)Primary</p>
    <p>Replicate (A) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>The backup cannot guess the length of data, it needs some metadata</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Metadata</p>
    <p>A backup needs to insure the integrity of log-backup data + length of data</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>A@0x1 A=1kB</p>
    <p>CRC=0x1{</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Metadata</p>
    <p>The last checksum can cover all previous log entries</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>B</p>
    <p>B@0x2 B=2kB</p>
    <p>CRC=0x2{ {</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Metadata</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>B C</p>
    <p>C@0x4 B=1kB</p>
    <p>CRC=0x3</p>
    <p>{ { { The last checksum can cover all previous log entries</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>The primary writes metadata on a remote buffer</p>
    <p>Primary PUT (A)</p>
    <p>Replicate(A) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>A@0x1 A=1kB</p>
    <p>CRC=0x1</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>The primary writes metadata on a remote buffer</p>
    <p>Primary PUT (A)</p>
    <p>Metadata A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>A@0x1 A=1kB</p>
    <p>CRC=0x1</p>
    <p>Current RDMA implementations can only target a single, contiguous memory region</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>The primary writes metadata on a remote buffer</p>
    <p>Primary PUT (A)</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>A@0x1 A=1kB</p>
    <p>CRC=0x1</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>The primary writes metadata on a remote buffer</p>
    <p>Primary PUT (B)</p>
    <p>Replicate (B) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>A@0x1 A=1kB</p>
    <p>CRC=0x1</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>The primary writes metadata on a remote buffer</p>
    <p>Primary</p>
    <p>Update Metadata A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>B@0x2 $##!!! $##!!!</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>B</p>
    <p>The primary fails in the midst of updating metadata!</p>
    <p>Recover</p>
    <p>B@0x2 $##!!! $##!!!</p>
  </div>
  <div class="page">
    <p>RDMA-based Replication Second Try</p>
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>B</p>
    <p>Recover</p>
    <p>Backup data unusable!</p>
    <p>B@0x2 $##!!! $##!!!</p>
  </div>
  <div class="page">
    <p>Primary PUT (A)</p>
    <p>Replicate (A) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>The primary replicates A and corresponding metadata with a single RDMA</p>
    <p>RDMA-based Replication Third Try</p>
  </div>
  <div class="page">
    <p>Primary PUT (B)</p>
    <p>Replicate (B) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>The primary replicates B and corresponding metadata, right after A</p>
    <p>RDMA-based Replication Third Try</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Primary PUT (C)</p>
    <p>Replicate (C) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>The primary fully replicates C, but partially the metadata</p>
    <p>RDMA-based Replication Third Try</p>
    <p>B C Corrupt metadata invalidates all backup log</p>
  </div>
  <div class="page">
    <p>Primary PUT (A)</p>
    <p>Replicate (A) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>The primary replicates A and corresponding metadata</p>
    <p>RDMA-based Replication Fourth Try</p>
  </div>
  <div class="page">
    <p>Primary PUT (A)</p>
    <p>Replicate (A) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>RDMA-based Replication Fourth Try</p>
    <p>B</p>
    <p>The primary partially replicates B, then fails</p>
  </div>
  <div class="page">
    <p>Primary PUT (A)</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>RDMA-based Replication Third Try</p>
    <p>B</p>
    <p>The backup checks if objects were fully received</p>
  </div>
  <div class="page">
    <p>Primary PUT (A)</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>RDMA-based Replication Third Try</p>
    <p>B</p>
    <p>The backup checks if objects were fully received</p>
    <p>Only fully-received and correct objects are recovered!</p>
  </div>
  <div class="page">
    <p>Tailwind</p>
    <p>Keep the same client-facing interface (RPCs)</p>
    <p>Strongly-consistent primary-backup systems</p>
    <p>Appends only a 4-byte CRC32 checksum after each record</p>
    <p>Relies on Reliable-Connected queue pairs: messages are delivered at most once, in order, and without corruption</p>
    <p>Stop failures</p>
  </div>
  <div class="page">
    <p>RDMA Buffers Allocation</p>
    <p>A primary chooses a backup, and requests an RDMA buffer</p>
    <p>Pre-registered buffers NIC</p>
    <p>Backup</p>
  </div>
  <div class="page">
    <p>RDMA Buffers Allocation</p>
    <p>A primary chooses a backup, and requests an RDMA buffer</p>
    <p>Pre-registered buffers NIC</p>
    <p>RPC: Replicate (A) + Get Buffer</p>
    <p>Ack + Buffer A</p>
    <p>Primary</p>
    <p>Backup</p>
  </div>
  <div class="page">
    <p>RDMA Buffers Allocation</p>
    <p>NIC Ack + Buffer A</p>
    <p>Primary</p>
    <p>Backup RDMA: Replicate (B)</p>
    <p>B</p>
    <p>All subsequent replication requests are performed with one-sided RDMA WRITEs</p>
  </div>
  <div class="page">
    <p>RDMA Buffers Allocation</p>
    <p>Pre-registered buffers NIC</p>
    <p>RPC: Replicate (C) + Get Buffer</p>
    <p>Ack + Buffer A</p>
    <p>Primary</p>
    <p>Backup</p>
    <p>B</p>
    <p>C</p>
    <p>When the primary fills a buffer, it will chose a backup and repeat all steps</p>
    <p>Buffer filled</p>
    <p>Buffers are asynchronously flushed to secondary storage, then they can be reused</p>
  </div>
  <div class="page">
    <p>Tailwind: Failures</p>
    <p>Failures can happen at any moment</p>
    <p>RDMA complicates primary replica failures</p>
    <p>Secondary replica failures are naturally dealt with in storage systems</p>
  </div>
  <div class="page">
    <p>Primary PUT (B)</p>
    <p>Replicate (B) A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 1: The object + its metadata are correctly transferred</p>
    <p>Failure scenarios: Fully Replicated Objects</p>
    <p>B 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 1: The object + its metadata are correctly transferred</p>
    <p>Failure scenarios: Fully Replicated Objects</p>
    <p>B 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 1: The object + its metadata are correctly transferred</p>
    <p>Failure scenarios: Fully Replicated Objects</p>
    <p>B 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 1: The object + its metadata are correctly transferred</p>
    <p>Failure scenarios: Fully Replicated Objects</p>
    <p>B 0 0 0 0 0</p>
    <p>The last object must always be a checksum + Checksums are not allowed to be zeroed</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 2: Partially transferred checksum</p>
    <p>Failure scenarios: Partially Written Checksum</p>
    <p>B 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 2: Partially transferred checksum</p>
    <p>Failure scenarios: Partially Written Checksum</p>
    <p>B 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 2: Partially transferred checksum</p>
    <p>Failure scenarios: Partially Written Checksum</p>
    <p>B 0 0 0 0 0</p>
    <p>Backups re-compute checksum during recovery and compare it with the stored one</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>A</p>
    <p>Backup</p>
    <p>DRAM</p>
    <p>Case 3: Partially transferred object</p>
    <p>Failure scenarios: Partially Written Object</p>
    <p>B 0 0 0 0 0 0 0</p>
    <p>Metadata act as an end-of-transmission marker</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Context</p>
    <p>Existing RDMA-based replication protocols</p>
    <p>Tailwinds design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implemented on the RAMCloud in-memory kv-store</p>
    <p>Low latency, large scale, strongly consistent</p>
    <p>RPCs leverage fast networking and kernel bypass</p>
    <p>Keeps all data in memory, durable storage for backups</p>
  </div>
  <div class="page">
    <p>RAMCloud Threading Architecture</p>
    <p>C</p>
    <p>Client</p>
    <p>NIC</p>
    <p>Poll</p>
    <p>NIC</p>
    <p>NIC</p>
    <p>Non-volatile Buffer</p>
    <p>Primary DRAM storage</p>
    <p>PUT(B)</p>
    <p>NIC</p>
    <p>PUT(B)</p>
    <p>M1 M3</p>
    <p>Client GET(C)</p>
    <p>C Replicate(B)</p>
    <p>Primary DRAM storage</p>
    <p>Replicate(B) Replicate(B)</p>
    <p>Worker Core</p>
    <p>Dispatch Core</p>
    <p>Dispatch Core</p>
    <p>Worker Core</p>
    <p>A B</p>
    <p>AA Non-volatile Buffer</p>
  </div>
  <div class="page">
    <p>Evaluation Configuration</p>
    <p>Yahoo! Cloud Serving Benchmark (Workloads A (50%PUT), B(5%PUT), WRITE-ONLY)</p>
    <p>20 million - 100 bytes objects + 30 byte/key</p>
    <p>Requests generated with a Zipfian distribution</p>
    <p>RAMCloud replication vs Tailwind (3-way replication)</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>How much CPU cycles can Tailwind save?</p>
    <p>Does it improve performance?</p>
    <p>Is there any overhead?</p>
  </div>
  <div class="page">
    <p>Evaluation: CPU Savings</p>
    <p>Throughput (KOp/s)</p>
    <p>C P U</p>
    <p>co re s u ti li za ti o n (d is p a tc h )</p>
    <p>Throughput (KOp/s)</p>
    <p>C P U</p>
    <p>co re s u ti li za ti o n (w</p>
    <p>o rk er )</p>
    <p>Tailwind RAMCloud</p>
    <p>Values are aggregated over a 4-node cluster</p>
    <p>WRITE-ONLY workload</p>
  </div>
  <div class="page">
    <p>Evaluation: Latency Improvement</p>
    <p>Throughput (Kops)</p>
    <p>th P e r c e n t i l e L a t e n c y (  s )</p>
    <p>Throughput (Kops)</p>
    <p>M e d i a n L a t e n c y (  s )</p>
    <p>Tailwind</p>
    <p>RAMCloud</p>
    <p>Durable writes take 16s under heavy load</p>
  </div>
  <div class="page">
    <p>Evaluation: Throughput</p>
    <p>Clients (YCSB-B)T h ro u g h p u t (K</p>
    <p>O p / S ) / S e rv e r</p>
    <p>Tailwind</p>
    <p>RAMCloud</p>
    <p>(YCSB-A)</p>
    <p>(WRITE-ONLY)</p>
    <p>Even with 5% of PUTs, Tailwind increase throughput by 30%</p>
    <p>Throughput/server in a 4-node cluster</p>
  </div>
  <div class="page">
    <p>Evaluation: Recovery Overhead</p>
    <p>Recovery Size</p>
    <p>R e c o v e r y T i m e ( s )</p>
    <p>Tailwind</p>
    <p>RAMCloud</p>
    <p>Recoveries with up to 10 million objects</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>One-sided RDMA systems: Pilaf ATC13, HERD SIGCOMM14, FaRM NSDI14, DrTM SOSP15, DrTM + R Eurosys16,</p>
    <p>Mitigating replication overheads/Tuning consistency: RedBlue OSDI12, Correctables OSDI16</p>
    <p>Tailwind reduces replication CPU footprint and improves performance without sacrificing durability, availability, or consistency</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Tailwind leverages one-sided RDMA to perform replication and leaves backups completely idle</p>
    <p>Provides backups with a protocol to protect against failure scenarios</p>
    <p>Reduces replication induced CPU usage while improving performance and latency</p>
    <p>Tailwind preserves client-facing RPC</p>
    <p>Thank you! Questions?</p>
  </div>
</Presentation>
