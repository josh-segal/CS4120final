<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>InfiniCache: Exploiting Ephemeral Serverless Functions to Build a Cost-Effective Memory Cache</p>
    <p>Ao Wang*, Jingyuan Zhang*, Xiaolong Ma, Ali Anwar, Lukas Rupprecht, Dimitrios Skourtis, Vasily Tarasov, Feng Yan, Yue Cheng</p>
    <p>* These authors contributed equally to this work</p>
  </div>
  <div class="page">
    <p>Web applications are storage-intensive</p>
    <p>Google Cloud Storage</p>
  </div>
  <div class="page">
    <p>Web applications  heterogeneous I/O</p>
    <p>Client</p>
    <p>Microservices</p>
  </div>
  <div class="page">
    <p>Case study: IBM Docker registry workloads</p>
    <p>IBM Cloud container registry service across 75 days during 2017</p>
    <p>Selected data centers: Dallas &amp; London</p>
  </div>
  <div class="page">
    <p>Case study: IBM Docker registry workloads</p>
    <p>Object size distribution</p>
    <p>Large object reuse patterns</p>
    <p>Storage footprint</p>
  </div>
  <div class="page">
    <p>Case study: IBM Docker registry workloads</p>
    <p>Object size distribution</p>
    <p>Large object reuse patterns</p>
    <p>Storage footprint</p>
    <p>Extreme variability in object sizes:</p>
    <p>Object sizes span over 9 orders of magnitude</p>
    <p>20% of objects &gt; 10MB</p>
  </div>
  <div class="page">
    <p>Case study: IBM Docker registry workloads</p>
    <p>Object size distribution</p>
    <p>Large object reuse patterns</p>
    <p>Storage footprint</p>
    <p>Caching large objects is beneficial:</p>
    <p>&gt; 30% large object (&gt;10MB) access 10+ times</p>
    <p>Around 45% of them got reused within 1 hour</p>
  </div>
  <div class="page">
    <p>Case study: IBM Docker registry workloads</p>
    <p>Object size distribution</p>
    <p>Large object reuse patterns</p>
    <p>Storage footprint</p>
    <p>Extreme tension between small and large objects:</p>
    <p>Large objects (&gt;10MB) occupy 95% storage footprint</p>
  </div>
  <div class="page">
    <p>Existing cloud storage solutions</p>
    <p>Both dimensions: the lower the better</p>
    <p>Price ($/GB/hour)</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>(la te</p>
    <p>nc y)</p>
    <p>Cheap $ Expensive $$$ Fast</p>
    <p>Slow</p>
  </div>
  <div class="page">
    <p>Large objects managed by cloud object stores</p>
    <p>Object stores are cheap but too slow</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>(la te</p>
    <p>nc y)</p>
    <p>Both dimensions: the lower the better</p>
    <p>AWS S3: $0.023 per GB per month</p>
    <p>Cheap $ Expensive $$$ Fast</p>
    <p>Slow</p>
  </div>
  <div class="page">
    <p>Small objects accelerated by in-memory caches</p>
    <p>In-memory caches are fast but too expensive</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>(la te</p>
    <p>nc y)</p>
    <p>Both dimensions: the lower the better</p>
    <p>AWS ElastiCache: $0.016 per GB per hour</p>
    <p>Cheap $ Expensive $$$ Fast</p>
    <p>Slow</p>
    <p>Object stores are cheap but too slow</p>
  </div>
  <div class="page">
    <p>Existing cloud storage solutions</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>(la te</p>
    <p>nc y)</p>
    <p>Cheap $ Expensive $$$ Fast</p>
    <p>Slow</p>
    <p>Caching both small and large objects is challenging  Existing solutions are either too slow or expensive</p>
  </div>
  <div class="page">
    <p>Existing cloud storage solutions</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>(la te</p>
    <p>nc y)</p>
    <p>Cheap $ Expensive $$$ Fast</p>
    <p>Slow</p>
    <p>Caching both small and large objects is challenging  Existing solutions are either too slow or expensive</p>
    <p>How can we achieve the best of both worlds?</p>
  </div>
  <div class="page">
    <p>Requires rethinking about a new cloud cache/storage model that achieves both</p>
    <p>cost effectiveness and high-performance!</p>
    <p>Caching both small and large objects is challenging  Existing solutions are either too slow or expensive</p>
  </div>
  <div class="page">
    <p>InfiniCache: A cost-effective and highperformance in-memory caching solution</p>
    <p>atop Serverless Computing platform</p>
    <p>Insight #1: Serverless functions &lt;CPU, Mem&gt; resources are pay-per-use</p>
    <p>Insight #2: Serverless providers offer free function caching for tenants</p>
  </div>
  <div class="page">
    <p>InfiniCache: A cost-effective and highperformance in-memory caching solution</p>
    <p>atop Serverless Computing platform</p>
    <p>Insight #1: Serverless functions &lt;CPU, Mem&gt; resources are pay-per-use</p>
    <p>Insight #2: Serverless providers offer free function caching for tenants</p>
    <p>Cost-effectiveness</p>
    <p>High-performance</p>
  </div>
  <div class="page">
    <p>A primer on Serverless Computing  Serverless computing enables cloud tenants to launch short-lived</p>
    <p>tasks (i.e., Lambda functions) with high elasticity and fine-grained resource billing</p>
    <p>Deploy</p>
    <p>Functions Tenants</p>
    <p>Invoke</p>
  </div>
  <div class="page">
    <p>A primer on Serverless Computing  Serverless computing enables cloud tenants to launch short-lived</p>
    <p>tasks (i.e., Lambda functions) with high elasticity and fine-grained resource billing</p>
    <p>Function: basic unit of deployment. Application consists of multiple serverless functions</p>
    <p>Deploy</p>
    <p>Functions Tenants</p>
    <p>Invoke</p>
  </div>
  <div class="page">
    <p>A primer on Serverless Computing  Serverless computing enables cloud tenants to launch short-lived</p>
    <p>tasks (i.e., Lambda functions) with high elasticity and fine-grained resource billing</p>
    <p>Function: basic unit of deployment. Application consists of multiple serverless functions</p>
    <p>Popular use cases: Backend APIs, data processing</p>
    <p>Deploy</p>
    <p>Functions Tenants</p>
    <p>Invoke</p>
  </div>
  <div class="page">
    <p>Serverless Computing is desirable</p>
    <p>Pay-per-use pricing model  AWS Lambda: $0.2 per 1M invocations</p>
    <p>$0.00001667 for every GB-sec</p>
    <p>Serverless provider</p>
    <p>Deploy</p>
    <p>Functions Tenants</p>
    <p>Invoke</p>
  </div>
  <div class="page">
    <p>Serverless Computing is desirable  Pay-per-use pricing model</p>
    <p>AWS Lambda: $0.2 per 1M invocations $0.00001667 for every GB-sec</p>
    <p>Short-term function caching  Provider caches triggered functions in memory without charging tenants</p>
    <p>Deploy</p>
    <p>Functions Tenants</p>
    <p>Invoke</p>
  </div>
  <div class="page">
    <p>Serverless Computing is desirable  Pay-per-use pricing model</p>
    <p>AWS Lambda: $0.2 per 1M invocations $0.00001667 for every GB-sec</p>
    <p>Short-term function caching  Provider caches triggered functions in memory without charging tenants</p>
    <p>Goal: Exploit the serverless computing model to build a cost-effective, high-performance in-memory cache</p>
    <p>GET</p>
    <p>Tenants PUT</p>
    <p>Serverless provider</p>
  </div>
  <div class="page">
    <p>Challenges: to build a memory cache with serverless functions  A strawman proposal</p>
    <p>Directly cache the objects in serverless functions memory?</p>
    <p>No data availability guarantee</p>
    <p>Banned inbound network</p>
    <p>Limited per-function resources</p>
  </div>
  <div class="page">
    <p>Challenges: to build a memory cache with serverless functions  A strawman proposal</p>
    <p>Directly cache the objects in serverless functions memory?</p>
    <p>No data availability guarantee</p>
    <p>Banned inbound network</p>
    <p>Limited per-function resources</p>
    <p>Serverless functions could</p>
    <p>be reclaimed any time</p>
    <p>In-memory state is lost</p>
  </div>
  <div class="page">
    <p>Lambda</p>
    <p>Challenges: to build a memory cache with serverless functions  A strawman proposal</p>
    <p>Directly cache the objects in serverless functions memory?</p>
    <p>No data availability guarantee</p>
    <p>Banned inbound network</p>
    <p>Limited per-function resources</p>
    <p>Serverless functions cannot</p>
    <p>run as a server Inboundconnection</p>
  </div>
  <div class="page">
    <p>Challenges: to build a memory cache with serverless functions  A strawman proposal</p>
    <p>Directly cache the objects in serverless functions memory?</p>
    <p>No data availability guarantee</p>
    <p>Banned inbound network</p>
    <p>Limited per-function resources</p>
    <p>Memory up to 3 GB</p>
    <p>CPU up to 2 cores</p>
    <p>Lambda Server</p>
  </div>
  <div class="page">
    <p>Our contribution: InfiniCache</p>
    <p>The first in-memory cache system built atop serverless functions</p>
    <p>InfiniCache achieves high data availability by leveraging erasure coding and delta-sync periodic data backup across functions</p>
    <p>InfiniCache achieves high performance by utilizing the aggregated network bandwidth of multiple functions in parallel</p>
    <p>InfiniCache achieves similar performance to AWS ElastiCache, while improving the cost-effectiveness by 3196X</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>InfiniCache Design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>InfiniCache birds eye view</p>
    <p>EC encoder/decoder InfiniCache client library</p>
    <p>Application</p>
    <p>Request routing</p>
    <p>Lambda management InfiniCache proxy server</p>
    <p>Lambda cache pool</p>
  </div>
  <div class="page">
    <p>InfiniCache: PUT path</p>
    <p>EC encoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
  </div>
  <div class="page">
    <p>InfiniCache: PUT path</p>
    <p>EC encoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>X</p>
    <p>Request routing</p>
  </div>
  <div class="page">
    <p>InfiniCache: PUT path</p>
    <p>EC encoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>X</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>k = 2, r = 1</p>
  </div>
  <div class="page">
    <p>InfiniCache: PUT path</p>
    <p>EC encoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>X</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>k = 2, r = 1</p>
  </div>
  <div class="page">
    <p>InfiniCache: PUT path</p>
    <p>EC encoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>X</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>d1 d2 p1</p>
    <p>k = 2, r = 1</p>
    <p>Invocation path</p>
  </div>
  <div class="page">
    <p>InfiniCache: PUT path</p>
    <p>EC encoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>X</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>d1 d2 p1</p>
    <p>d1 d2 p1</p>
    <p>k = 2, r = 1</p>
    <p>Data path</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>GET</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>Invocation path</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>drops straggler Lambda</p>
    <p>d1 p1 k = 2, r = 1</p>
    <p>d2 is straggling Data path</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder InfiniCache client library</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>d1 p1</p>
    <p>d1 p1 k = 2 chunks</p>
    <p>k = 2, r = 1</p>
    <p>d2 is straggling Data path</p>
  </div>
  <div class="page">
    <p>InfiniCache: GET path</p>
    <p>EC decoder</p>
    <p>Application</p>
    <p>InfiniCache proxy</p>
    <p>Lambda cache pool</p>
    <p>Request routing</p>
    <p>d1 d2 p1</p>
    <p>d1 p1</p>
    <p>d1 p1</p>
    <p>X</p>
    <p>InfiniCache client library</p>
    <p>k = 2 chunks</p>
    <p>k = 2, r = 1</p>
    <p>d2 is straggling Data path</p>
  </div>
  <div class="page">
    <p>Maximizing data availability  Erasure-coding</p>
    <p>Periodic warm-up</p>
    <p>Periodic delta-sync backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability  Erasure-coding</p>
    <p>Periodic warm-up</p>
    <p>Periodic delta-sync backup</p>
  </div>
  <div class="page">
    <p>AWS Lambda reclaiming policy</p>
    <p># )</p>
    <p>un c</p>
    <p>re cl</p>
    <p>ai m</p>
    <p>ed 1 min (01/09/20) 9 min (08/21/19)</p>
    <p>Maximizing data availability: Periodic warm-up</p>
  </div>
  <div class="page">
    <p>AWS Lambda reclaiming policy</p>
    <p># )</p>
    <p>un c</p>
    <p>re cl</p>
    <p>ai m</p>
    <p>ed 1 min (01/09/20) 9 min (08/21/19)</p>
    <p>Maximizing data availability: Periodic warm-up</p>
    <p>Function reclaiming</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic warm-up</p>
    <p>AWS Lambda reclaiming policy</p>
    <p>Shorter triggering interval will lower</p>
    <p>the function reclaiming rate</p>
    <p># )</p>
    <p>un c</p>
    <p>re cl</p>
    <p>ai m</p>
    <p>ed 1 min (01/09/20) 9 min (08/21/19)</p>
    <p>function reclaiming rate</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic warm-up</p>
    <p>Proxy1. Lambda nodes are cached by AWS when not running  AWS may reclaim cold</p>
    <p>Lambda functions after they are idling for a period</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic warm-up</p>
    <p>Lambda functions after they are idling for a period</p>
    <p>Proxy</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic backup</p>
    <p>Proxy</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic backup</p>
    <p>Function deployment</p>
    <p>Proxy</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic backup</p>
    <p>Proxy</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Periodic backup</p>
    <p>update to destination Lambda</p>
    <p>Relay</p>
    <p>Proxy</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Seamless failover</p>
    <p>Proxy</p>
    <p>Function deployment</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Seamless failover</p>
    <p>Proxy</p>
    <p>GET(key)</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Seamless failover</p>
    <p>Proxy</p>
    <p>Reclai med</p>
    <p>GET(key)</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Seamless failover</p>
    <p>Reclai med</p>
    <p>Proxy</p>
    <p>GET(key)</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Maximizing data availability: Seamless failover</p>
    <p>done and the backup becomes the primary</p>
    <p>By exploiting the auto-scaling feature of AWS Lambda</p>
    <p>Object chunk</p>
    <p>Reclai med</p>
    <p>Proxy</p>
    <p>GET(key)</p>
    <p>: Primary</p>
    <p>: Backup</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>InfiniCache Design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental setup  InfiniCache</p>
    <p>400 1.5GB Lambda cache nodes  Client running on one c5n.4xlarge EC2 VM  Warm-up interval: 1 minute; backup interval: 5 minutes  Under one AWS VPC</p>
    <p>Production workloads  The first 50 hours of the Dallas datacenter traces from IBM Docker</p>
    <p>registry workloads  All objects: including small and large objects  Large object only: objects &gt; 10MB</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>ElastiCache AWS ElastiCache  One cache.r5.24xlarge</p>
    <p>with 600GB memory  $10.368 per hour</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>(lastiCache IC (all oEjects) IC (large only)</p>
    <p>Workload setup  All objects  Large object only</p>
    <p>Object larger than 10MB</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>(lastiCache IC (all oEjects) IC (large only)</p>
    <p>Workload setup  All objects  Large object only</p>
    <p>Object larger than 10MB</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>(lastiCache IC (all oEjects) IC (large only) IC (large no Eackup)</p>
    <p>Workload setup  All objects  Large object only</p>
    <p>Object larger than 10MB  Large object w/o backup</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>(lastiCache IC (all oEjects) IC (large only) IC (large no Eackup)</p>
    <p>Workload ElastiCache InfiniCache InfiniCache w/o backup All objects 67.9% 64.7% --Large object only 65.9% 63.6% 56.1%</p>
    <p>Workload setup  All objects  Large object only</p>
    <p>Object larger than 10MB  Large object w/o backup</p>
    <p>Hit ratio</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>(lastiCache IC (all oEjects) IC (large only) IC (large no Eackup)</p>
    <p>Workload ElastiCache InfiniCache InfiniCache w/o backup All objects 67.9% 64.7% --Large object only 65.9% 63.6% 56.1%</p>
    <p>Workload setup  All objects  Large object only</p>
    <p>Object larger than 10MB  Large object w/o backup</p>
    <p>Hit ratio and $$ cost tradeoff</p>
  </div>
  <div class="page">
    <p>Cost effectiveness of InfiniCache</p>
    <p>$518.40</p>
    <p>$20.52 $16.51</p>
    <p>$5.41</p>
    <p>(lastiCache IC (all oEjects) IC (large only) IC (large no Eackup)</p>
    <p>InfiniCache is 31  96x cheaper than ElastiCache because tenant does not pay when Lambdas are not running</p>
    <p>Workload setup  All objects  Large object only</p>
    <p>Object larger than 10MB  Large object w/o backup</p>
  </div>
  <div class="page">
    <p>Performance of InfiniCache</p>
    <p>All objects Large objects only</p>
  </div>
  <div class="page">
    <p>All objects Large objects only</p>
    <p>Performance of InfiniCache</p>
    <p>&gt; 100 times improvement</p>
  </div>
  <div class="page">
    <p>Performance of InfiniCache</p>
  </div>
  <div class="page">
    <p>Performance of InfiniCache</p>
    <p>Lambda invocation overhead (~13ms) dominates when fetching small objects</p>
  </div>
  <div class="page">
    <p>Performance of InfiniCache</p>
    <p>InfiniCache achieves same or higher performance than ElastiCache for large objects</p>
  </div>
  <div class="page">
    <p>Conclusion  InfiniCache is the first in-memory cache system built atop a</p>
    <p>serverless computing platform (AWS )</p>
    <p>InfiniCache synthesizes a series of techniques to achieve high performance while maintaining good data availability</p>
    <p>InfiniCache improves the cost-effectiveness by 31-96x compared</p>
    <p>to AWS ElastiCache</p>
  </div>
  <div class="page">
    <p>Thankyou!  Contact: Ao Wang  awang24@gmu.edu,</p>
    <p>Jingyuan Zhang  jzhang33@gmu.edu</p>
    <p>https://github.com/mason-leap-lab/infinicache</p>
  </div>
</Presentation>
