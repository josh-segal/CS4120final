<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LOUP: The Principles and Practice of</p>
    <p>Intra-Domain Route Dissemination Nikola Gvozdiev, Brad Karp, Mark Handley</p>
  </div>
  <div class="page">
    <p>The Rising Tide of Reachability Expectations</p>
    <p>Internet users expect any-to-any reachability:</p>
    <p>Reliable transport masks losses caused by congestion</p>
    <p>Routing system adapts after topology changes</p>
    <p>Loss under congestion and unreachability during routing</p>
    <p>convergence interrupt end-to-end connectivity</p>
    <p>Legacy applications (e.g., file transfer, email) handle</p>
    <p>interruptions in connectivity well</p>
    <p>Increasingly, applications are intolerant of brief interruptions in</p>
    <p>reachability:</p>
    <p>VoIP, interactive gaming, high-frequency trading,</p>
  </div>
  <div class="page">
    <p>Routing a Major Source of Transient Unreachability</p>
    <p>How can we make the routing system better support</p>
    <p>interruption-intolerant applications?</p>
    <p>VoIP usability is hindered as much by BGP's slow</p>
    <p>convergence as network congestion [Kushman et al. 2007]</p>
    <p>Routing failures contribute to end-to-end packet loss</p>
    <p>significantly ... common iBGP configuration and MRAI timer</p>
    <p>values play a major role in causing packet loss during routing</p>
    <p>events. [Wang et al. 2006]</p>
  </div>
  <div class="page">
    <p>The big picture</p>
    <p>eBGP  external BGP</p>
  </div>
  <div class="page">
    <p>The big picture</p>
  </div>
  <div class="page">
    <p>The big picture</p>
    <p>Border Router</p>
  </div>
  <div class="page">
    <p>The big picture</p>
    <p>Border Router</p>
  </div>
  <div class="page">
    <p>The missing iBGP piece</p>
    <p>Previous work has looked into</p>
    <p>the interior gateway protocol</p>
    <p>eBGP reliability, scalability and configuration</p>
    <p>reachability during eBGP convergence</p>
    <p>iBGP reliability, scalability and configuration</p>
    <p>Fundamental behavior of intra-AS route propagation unexamined</p>
    <p>[Caesar 2005], [Feamster 2005], [Bonaventure 2004], [Griffin 2002], [Gao 2001]</p>
    <p>[Van Beijnum 2009], [John 2008], [Pei 2004], [Barr 2003]</p>
    <p>[Bonaventure 2007], [Chandrashekar 2005], [Wu 2005], [Feamster 2004]</p>
    <p>[Francois 2007], [Shaikh 2006], [Wu 2005], [Garcia-Luna-Aceves 1993]</p>
    <p>reachability during iBGP convergence ?</p>
  </div>
  <div class="page">
    <p>Full-mesh iBGP</p>
  </div>
  <div class="page">
    <p>Full-mesh iBGP</p>
  </div>
  <div class="page">
    <p>Full-mesh iBGP</p>
    <p>Very poor scalability</p>
    <p>Rarely used</p>
  </div>
  <div class="page">
    <p>Route reflectors</p>
  </div>
  <div class="page">
    <p>Route reflectors</p>
    <p>Route Reflector</p>
    <p>Route Reflector</p>
  </div>
  <div class="page">
    <p>Route Reflector</p>
    <p>Route reflectors</p>
    <p>Route Reflector</p>
    <p>Error-prone configuration [Griffin et al. 2002]</p>
    <p>Does not achieve the same convergence as full-mesh</p>
  </div>
  <div class="page">
    <p>How does iBGP go wrong?</p>
  </div>
  <div class="page">
    <p>iBGP update causes transient loops</p>
    <p>BR BR</p>
  </div>
  <div class="page">
    <p>BR BR</p>
    <p>iBGP update causes transient loops</p>
  </div>
  <div class="page">
    <p>Router 0 receives a better alternative and switches</p>
    <p>Router 0 sends messages to update all other routers</p>
    <p>iBGP update causes transient loops</p>
  </div>
  <div class="page">
    <p>Router 0 receives a better alternative and switches</p>
    <p>Router 0 sends messages to update all other routers</p>
    <p>iBGP update causes transient loops</p>
  </div>
  <div class="page">
    <p>Router 1 is slow to process the message or 0-1 is congested</p>
    <p>Loops due to lack of ordering between sessions</p>
    <p>Loop</p>
    <p>iBGP update causes transient loops</p>
  </div>
  <div class="page">
    <p>Why bother?</p>
    <p>These loops surely are very transient. After all links in the core</p>
    <p>are very fast and control traffic is prioritized.</p>
    <p>No. The control plane is a lot slower than the forwarding plane.</p>
    <p>BGP processing delays can be 100s of ms [Feldmann et al. 2004].</p>
  </div>
  <div class="page">
    <p>The collateral damage of routing loops</p>
    <p>When a loop occurs if the link is busy all flows will experience</p>
    <p>loss.</p>
    <p>Flow A</p>
    <p>Flow A</p>
    <p>Flow B</p>
    <p>Queues overflow, drops</p>
    <p>for both A and B</p>
    <p>These loops not hypothetical.</p>
    <p>Observed in practice [Hengartner 2002].</p>
  </div>
  <div class="page">
    <p>SOUP and LOUP</p>
    <p>In this talk we propose 2 iBGP replacements:</p>
    <p>SOUP (Simple Ordered Update Protocol)</p>
    <p>LOUP (Link-Ordered Update Protocol)</p>
    <p>SOUP - provably loop-free, but converges slowly in some cases</p>
    <p>LOUP - converges faster, but can loop in rare occasions</p>
  </div>
  <div class="page">
    <p>Ordering the application of updates avoids loops</p>
    <p>We want to enforce ordering to the application of updates</p>
  </div>
  <div class="page">
    <p>Single-hop sessions between neighbors</p>
    <p>Only forward an update that you have processed</p>
    <p>Flood updates to propagate a wavefront</p>
    <p>We want to enforce ordering to the application of updates</p>
    <p>Ordering the application of updates avoids loops</p>
  </div>
  <div class="page">
    <p>SOUP ingredients</p>
    <p>Wavefront propagation</p>
    <p>Basic ordering of updates</p>
    <p>Reverse Forwarding Tree (RFT) and Forward Activation (FA)</p>
    <p>New / improving routes</p>
    <p>Reverse Activation (RA)</p>
    <p>Worsening routes / withdrawals</p>
    <p>RA -&gt; FA switch</p>
    <p>Multiple alternatives propagating simultaneously</p>
    <p>Complete loop freedom</p>
  </div>
  <div class="page">
    <p>What about more complex topologies?</p>
  </div>
  <div class="page">
    <p>Flooding a wavefront is insufficient</p>
    <p>(1,3) has a high metric</p>
    <p>Same setup, one more link</p>
  </div>
  <div class="page">
    <p>Router 0s update is forwarded by 1 to both 2 and 3</p>
    <p>Flooding a wavefront is insufficient</p>
    <p>(1,3) has a high metric</p>
  </div>
  <div class="page">
    <p>Router 0s update is forwarded by 1 to both 2 and 3</p>
    <p>Flooding a wavefront is insufficient</p>
    <p>(1,3) has a high metric</p>
  </div>
  <div class="page">
    <p>Loop due to 0s update reaching 3 before 2</p>
    <p>Even though (1,3) is not on anyones forwarding path</p>
    <p>Loop</p>
    <p>Flooding a wavefront is insufficient</p>
    <p>(1,3) has a high metric</p>
  </div>
  <div class="page">
    <p>Why did it loop?</p>
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Routers switch to A</p>
    <p>Forwarding paths to A</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Routers switch to A</p>
    <p>Forwarding paths to A</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Routers switch to A</p>
    <p>Forwarding paths to A</p>
    <p>X</p>
    <p>Y</p>
    <p>X cannot reach A.</p>
    <p>Y will forward back to X</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Routers switch to A</p>
    <p>Forwarding paths to A</p>
    <p>X</p>
    <p>Y</p>
    <p>X cannot reach A.</p>
    <p>Y will forward back to X</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>Only one prefix</p>
    <p>Initially only one route via B</p>
    <p>New better alternative at A</p>
    <p>Propagates as a wavefront</p>
    <p>Update from A</p>
    <p>Routers switch to A</p>
    <p>Loops Need to ensure that at any time</p>
    <p>along any forwarding path there is</p>
    <p>only one switch of route.</p>
    <p>Flooding not ordered</p>
    <p>Loops can form</p>
    <p>Forwarding paths to A</p>
    <p>Why did it loop?</p>
  </div>
  <div class="page">
    <p>To avoid loops, propagate over the concatenation</p>
    <p>of the forwarding paths to the BR.</p>
    <p>Reverse Forwarding Tree propagation avoids loops</p>
  </div>
  <div class="page">
    <p>SOUP ingredients</p>
    <p>Wavefront propagation</p>
    <p>Basic ordering of updates</p>
    <p>Reverse Forwarding Tree (RFT) and Forward Activation (FA)</p>
    <p>New / improving routes</p>
    <p>Reverse Activation (RA)</p>
    <p>Worsening routes / withdrawals</p>
    <p>RA -&gt; FA switch</p>
    <p>Multiple alternatives propagating simultaneously</p>
    <p>Complete loop freedom</p>
  </div>
  <div class="page">
    <p>What about withdrawals and routes</p>
    <p>worsening?</p>
  </div>
  <div class="page">
    <p>Immediate application of withdrawals causes loops</p>
    <p>AS is split in half.</p>
    <p>Setup common with peering.</p>
  </div>
  <div class="page">
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>More than one best route</p>
    <p>BGP splits the AS in two</p>
    <p>Mid-line</p>
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>More than one best route</p>
    <p>BGP splits the AS in two</p>
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>B withdraws its route</p>
    <p>Withdrawal as a wavefront</p>
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>More than one best route</p>
    <p>BGP splits the AS in two</p>
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>B withdraws its route</p>
    <p>Withdrawal as a wavefront</p>
    <p>A wave of transient loops</p>
    <p>Loops</p>
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>More than one best route</p>
    <p>BGP splits the AS in two</p>
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>B withdraws its route</p>
    <p>Withdrawal as a wavefront</p>
    <p>A wave of transient loops</p>
    <p>Until the mid-line</p>
    <p>LoopsHow can we fix it?</p>
    <p>Immediate application of withdrawals causes loops</p>
  </div>
  <div class="page">
    <p>Withdrawal order done right</p>
    <p>Mid-line</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
  </div>
  <div class="page">
    <p>Withdrawal order done right</p>
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
  </div>
  <div class="page">
    <p>Withdrawal order done right</p>
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Withdrawal order done right</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Withdrawal order done right</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Withdrawal order done right</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Application of the withdrawal sent by A</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Withdrawal order done right</p>
    <p>Apply over the reverse</p>
    <p>of update propagation path</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Application</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Withdrawal order done right</p>
    <p>Apply over the reverse</p>
    <p>of update propagation path</p>
  </div>
  <div class="page">
    <p>Withdrawal order done right</p>
    <p>Application of withdrawal</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Apply over the reverse</p>
    <p>of update activation path</p>
  </div>
  <div class="page">
    <p>Withdrawal order done right</p>
    <p>Application of withdrawal</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Apply over the reverse</p>
    <p>of update activation path</p>
  </div>
  <div class="page">
    <p>Withdrawal order done right</p>
    <p>Application of withdrawal</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Apply over the reverse</p>
    <p>of update activation path</p>
  </div>
  <div class="page">
    <p>SOUP uses reverse activation</p>
    <p>to explicitly apply worsening routes</p>
    <p>Withdrawal order done right</p>
    <p>Initially do not apply</p>
    <p>the withdrawal</p>
    <p>Apply over the reverse</p>
    <p>of update activation path</p>
  </div>
  <div class="page">
    <p>Reverse activation example</p>
  </div>
  <div class="page">
    <p>Reverse activation example</p>
  </div>
  <div class="page">
    <p>Reverse activation example</p>
  </div>
  <div class="page">
    <p>SOUP ingredients</p>
    <p>Wavefront propagation</p>
    <p>Basic ordering of updates</p>
    <p>Reverse Forwarding Tree (RFT) and Forward Activation (FA)</p>
    <p>New / improving routes</p>
    <p>Reverse Activation (RA)</p>
    <p>Worsening routes / withdrawals</p>
    <p>RA -&gt; FA switch</p>
    <p>Multiple alternatives propagating simultaneously</p>
    <p>Complete loop freedom</p>
  </div>
  <div class="page">
    <p>SOUP ingredients</p>
    <p>Wavefront propagation</p>
    <p>Basic ordering of updates</p>
    <p>Reverse Forwarding Tree (RFT) and Forward Activation (FA)</p>
    <p>New / improving routes</p>
    <p>Reverse Activation (RA)</p>
    <p>Worsening routes / withdrawals</p>
    <p>RA -&gt; FA switch (in paper)</p>
    <p>Multiple alternatives propagating simultaneously</p>
    <p>Complete loop freedom</p>
    <p>Last ingredient in paper</p>
  </div>
  <div class="page">
    <p>SOUP ingredients</p>
    <p>Wavefront propagation</p>
    <p>Basic ordering of updates</p>
    <p>Reverse Forwarding Tree (RFT) and Forward Activation (FA)</p>
    <p>New / improving routes</p>
    <p>Reverse Activation (RA)</p>
    <p>Worsening routes / withdrawals</p>
    <p>RA -&gt; FA switch (in paper)</p>
    <p>Multiple alternatives propagating simultaneously</p>
    <p>Complete loop freedom</p>
    <p>Last ingredient in paper</p>
    <p>SOUP is provably loop-free at all</p>
    <p>instants if the internal topology is stable. Proof in paper.</p>
  </div>
  <div class="page">
    <p>A fly in my SOUP</p>
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>A fly in my SOUP</p>
  </div>
  <div class="page">
    <p>Mid-line</p>
    <p>Withdrawal from B</p>
    <p>A fly in my SOUP</p>
  </div>
  <div class="page">
    <p>Mid-lineWithdrawal from B</p>
    <p>Wasted time</p>
    <p>Should be able to shortcut activation from the</p>
    <p>mid-line</p>
    <p>A fly in my SOUP</p>
  </div>
  <div class="page">
    <p>LOUP to the rescue</p>
    <p>A superset of SOUP. Inherits all mechanisms</p>
    <p>previously discussed.</p>
    <p>Adds tell-me-when messages to shortcut activation</p>
  </div>
  <div class="page">
    <p>LOUP to the rescue</p>
    <p>Send tell-me-when to the would-be</p>
    <p>next-hop</p>
    <p>Tell me when you are</p>
    <p>not using the route</p>
    <p>that I am using</p>
  </div>
  <div class="page">
    <p>LOUP to the rescue</p>
    <p>Reply when</p>
    <p>not using the route</p>
  </div>
  <div class="page">
    <p>LOUP to the rescue</p>
    <p>The reply acts as activation</p>
  </div>
  <div class="page">
    <p>SOUP vs LOUP</p>
    <p>LOUPSOUP</p>
    <p>Need to propagate activation</p>
    <p>all the way to the other end</p>
    <p>of the network</p>
    <p>Can shortcut activation using</p>
    <p>explicit tell-me-when messages</p>
    <p>Provably does not loop Can loop in the presence</p>
    <p>of unusually high churn</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Loop freedom on update</p>
    <p>Delay on withdrawal</p>
    <p>Why not replace iBGP with DUAL[Aceves 1993]?</p>
    <p>Loop freedom on withdrawal</p>
    <p>Delay on update</p>
    <p>Load on the network</p>
    <p>FIB churn introduced</p>
    <p>Stability in the presence of IGP events</p>
    <p>Evaluation of real-world prototype</p>
    <p>More evaluation in paper</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Simulation results based on publicly available HE topology</p>
    <p>Connectivity in POPs inferred from iBGP session data</p>
    <p>Model delay as speed-of-light + [0-10]ms</p>
    <p>No processing delay.</p>
    <p>Expect loops to last longer in real-world.</p>
  </div>
  <div class="page">
    <p>iBGP+RRs causes loops on update</p>
    <p>One route, a better one is received at 0.1s</p>
    <p>New better route arrives</p>
    <p>Converged No route  would</p>
    <p>blackhole</p>
    <p>Would loop</p>
  </div>
  <div class="page">
    <p>LOUP causes no loops</p>
  </div>
  <div class="page">
    <p>Delay on withdrawal</p>
    <p>Tell-me-when</p>
    <p>time (s)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>iBGPs transient loops disrupt end-to-end-reachability</p>
    <p>Careful ordering and application of routing changes</p>
    <p>prevents loops</p>
    <p>Simple Ordered Update Protocol (SOUP):</p>
    <p>Fully distributed</p>
    <p>Provably prevents all transient loops when the underlying</p>
    <p>topology is stable</p>
    <p>Lightweight (vs. Consensus Routing, DUAL)</p>
    <p>Configuration free (vs. route reflectors)</p>
    <p>Fast convergence with Link-Ordered Update Protocol (LOUP)</p>
  </div>
  <div class="page">
    <p>MPLS does not get you off the hook</p>
    <p>Because</p>
    <p>Even a BGP-free core still uses BGP to distribute routes</p>
    <p>Route reflectors are still present if a lot of customer routes</p>
    <p>Some of the ordering problems shown still exist</p>
    <p>LOUP can also do VPNs</p>
  </div>
  <div class="page">
    <p>What about DUAL?</p>
    <p>SOUP is different because</p>
    <p>It does not flood and does not require activations</p>
    <p>from all neighbors</p>
    <p>It does not need a complicated state machine to</p>
    <p>handle multiple simultaneous route events</p>
    <p>It is not maintaining the IGP  it runs on top of it and when</p>
    <p>an IGP event occurs it does not need to activate</p>
    <p>external prefixes</p>
  </div>
  <div class="page">
    <p>RFT maintenance</p>
    <p>If the underlying topology changes the RFT must follow</p>
    <p>LOUP actively maintains the RFT using periodic messages</p>
    <p>All messages stored in log-like data structures</p>
    <p>If the IGP is stable (99+% of the time), LOUP enough</p>
    <p>For complete protection during IGP changes use EIGRP</p>
  </div>
</Presentation>
