<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Accelera'on A+acks on PBKDF2 Or, what is inside the black-box of oclHashcat?</p>
    <p>Andrew Ruddick, UK Dr. Jeff Yan, Lancaster University, UK andrew.ruddick@hotmail.co.uk, jeff.yan@lancaster.ac.uk</p>
  </div>
  <div class="page">
    <p>What is PBKDF2?</p>
    <p>Password Based Key DerivaDon FuncDon v2 (PBKDF2)  Standardised as NIST FIPS SP 800-132 and IETF RFC 2898</p>
    <p>Key-stretching Algorithm  Based on an underlying hash-funcDon, e.g. SHA-1x, SHA-2x, or MD-x</p>
    <p>We look at PBKDF2-HMAC-SHA1, the most popular implementaDon  Used by Microso[, Apple, Cisco, Google and WiFi</p>
    <p>WPA/ WPA2, Microso[ .NET, Microso[ Windows Data ProtecDon API (DPAPI), Apple OS X OS User Passwords, Apple iOS passcodes / passwords, Cisco IOS Type 4 passwords, Android Full Disk EncrypDon (v3+), TrueCrypt  and many many more</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Our Contribu'on</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>PBKDF2 Construc'on</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>PBKDF2 Op'misa'ons  Cryptanaly'c</p>
    <p>Merkle-Damgrd opDmisaDons  PBKDF2 key stretching  Zero-based opDmisaDons  Cyclic storage opDmisaDons  S-Box opDmisaDons (not discussed in paper)</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  Merkle-Damgrd (SHA1)</p>
    <p>m[0] m[1] m[2] m[3] || 1000...0 || msg len</p>
    <p>H(m)IV (fixed)</p>
    <p>h h h h</p>
    <p>m[0] || 1000...0 || msg len</p>
    <p>H(m)IV (fixed)</p>
    <p>h</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  Merkle-Damgrd (HMAC)</p>
    <p>Key XOR iPad</p>
    <p>IV (fixed)</p>
    <p>h h</p>
    <p>message || 1000...0 || (64 + passLen)</p>
    <p>Key XOR oPad</p>
    <p>IV (fixed)</p>
    <p>h h</p>
    <p>Inner Hash || 1000...0 || 84</p>
    <p>H(m)</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  Merkle-Damgrd (PBKDF2)</p>
    <p>2 + 2c SHA1 iteraDons, instead of 4c  ~50% speed bonus for an acacker</p>
    <p>known to be the same for all iteraDons</p>
    <p>h</p>
    <p>message || 1000...0 || (64 + passLen)</p>
    <p>h</p>
    <p>Inner Hash || 1000...0 || 84</p>
    <p>H(m)</p>
    <p>HMAC(oPadH, iPadH, message)</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  Key Stretching (PBKDF2)</p>
    <p>An early exit opDmisaDon targeDng key stretching:</p>
    <p>If mulDple iteraDons required, just calculate the first  Match? Probably a crack, check next block (or dont. SHA1 = 2160 entropy).  No match? Early exit.</p>
    <p>A further 50% bonus for an acacker, in an implementaDon containing 2 blocks</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  S-Box Rota'ons (SHA1)</p>
    <p>Rotate using pre-processor macros  removes 4 assignments per S- Box (320 per SHA1 round)</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Cryptanaly'c Op'misa'on Summary</p>
    <p>OpHmisaHon ADD XOR [ ] = CMP</p>
    <p>Zero-Based 11</p>
    <p>S-Box Redundant XOR 27 27</p>
    <p>S-Box RotaDons 320</p>
    <p>Cyclic Storage</p>
    <p>HMAC Redundant Checks 2</p>
    <p>PBKDF2 1000 loops: 11,000 27,000 27,000 640,000 2,000</p>
    <p>Merkle-Damgrd and Key-Stretching opDmisaDons remove ~75% of all necessary SHA1 round stages.  Remaining SHA1 round stages benefit from the following instrucDon count reducDons:</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>GPGPU Programming Overview</p>
    <p>OpenCL soluDon, supports NVIDIA &amp; ATI GPUs, AMD &amp; Intel CPUs and Altera FPGAs  GPUs have much slower clock speeds than CPUs  Many more processing elements (stream processors / SIMD-Vector Units), 2-3k on top-end cards  Massive memory bandwidth (ATI R9 290X  352 GB/s)  Manual data buffering / bus transfers  OpenCL Kernels run on GPU, analogous to a shader program (HLSL)</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>GPGPU Programming Overview</p>
    <p>Image from AMD opencl programming guide</p>
    <p>The execuDon of a single kernel is termed a Work-Item</p>
    <p>Work-Items are grouped into Wavefronts (termed Warp by NVIDIA)</p>
    <p>Work-Group can consist of upto 4 Wavefronts</p>
    <p>Device Compute Units can handle mulDple in-flight Work-Groups at a Dme.</p>
    <p>hcp://developer.amd.com/wordpress/media/2013/07/AMD Accelerated Parallel Processing OpenCL Programming Guide-rev-2.7.pdf</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>PBKDF2 Op'misa'ons  OpenCL Kernel</p>
    <p>Manual unrolling / inlining  Bus data transfers  GPU collision detecDon  Occupancy / latency hiding  Memory access coalescence  InstrucDon Packing  Work group sizes</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  Manual Unrolling / Inlining</p>
    <p>AMD OpenCL automaDc loop unrolling is not opDmal  Forces developers to work around compiler bugs  Manual unrolling of all core loops and inlining the majority of funcDon calls results in excess of a 70% performance gain</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  GPU Collision Detec'on</p>
    <p>Bus transfers are costly  In SHA1 if all hash results are transferred back to host, this results in 22% of execuDon Dme spent serving memory requests  CalculaDng hash collisions on the GPU is more efficient  we only transfer a single boolean per password block  If a crack is found, a second buffer contains the plaintext password</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Op'misa'ons  Work Group Sizes</p>
    <p>If work-group size is already large enough to mask any memory access latencies, increasing WG size adds addiDonal wavefront context switching overhead  OpDmal results were always obtained with a single WG for PBKDF2</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Kernel Op'misa'on Summary</p>
    <p>OpHmisaHon Approximate Speed Increase Manual Unrolling / Inlining 70% InstrucDon Packing 12% Workgroup Sizes 1.37  5.07% (block size dependant) Bus data transfers 0.09% (31.03% less bus memory traffic) Occupancy / Latency Hiding 100%</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>GPU SHA1 HMAC-SHA1 PBKDF2-HMAC-SHA1 ATI HD6870, 1GB 794.60 MH/s 395.21 MH/s 424.78 KH/s ATI R9 290X, 4GB 3,415.37 MH/s 1,610.62 MH/s 1611.98 KH/s</p>
    <p>Our PBKDF2 is 11.09% faster than oclHashCat on R9 290X  Our HMAC is 8.5% faster than oclHashCat on R9 290X</p>
    <p>PBKDF2 results based on 1,000 iteraDons and a 256 bit output key size</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Cracking .NET Passwords</p>
    <p>~15% of all websites worldwide run on ASP.NET  Default password hashing uses PBKDF2-HMAC-SHA1, 1000 iteraDons and a 256-bit key size  Our applicaDon provides direct support for cracking .NET hashes  We achieve a real throughput speed of 1,608,860 passwords / sec (10.36 mins per 1 billion candidates) on an ATI R9 290X GPU  A previous password data dump, following a security breach lead to an 18.2% crack success rate from a dicDonary containing 1.494 billion words</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Cracking .NET Passwords</p>
    <p>High probability of cracking a password a[er trying 10 or 11 against our dicDonary  This would take us 2.58  2.83 hours, on a single GPU</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Applica'on to WPA2</p>
    <p>A. Ruddick, J. Yan</p>
    <p>Only difference in WPA2 is 4,096 iteraDons  Our acack equally applies to WiFi security  10.56 -11.59 hours to try 10 or 11 networks</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>CryptanalyDc opDmisaDons provide a larger contribuDon than hardware acceleraDon (measurement details see our paper)  An opDmal SHA1  opDmal HMAC  opDmal PBKDF2  We are now state-of-the-art for PBKDF2 and HMAC</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>oclHashcat outperforms compeDtors due to their cryptanalyDc opDmisaDons, which combined with GPU acceleraDon made them the previous state-of-the-art  Our PBKDF2 implementaDon is ~11.09% faster, thus the chance of further hidden opDmisaDons in oclHashCats implementaDon is low  Small opDmisaDons to SHA1 = large benefits in PBKDF2</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Our acacks pose a real threat to acDvely deployed security systems, including .NET and WPA / WPA2, amongst many others  The definiDon of PBKDF2 in both PKCS#5 (IETF RFC 2898) and NIST FIPS SP 800-132 contains 2 serious design flaws: 1. Inner HMAC is incorrectly keyed; If password and salt were swapped, wed</p>
    <p>be unable to exploit this 2. key stretching is fundamentally broken; only ever use one block for</p>
    <p>passwords</p>
    <p>PKCS#5 should be updated to use H(p||s||c) as defined by Yao &amp; Yin  Future implementaDons should consider memory-hard funcDons</p>
    <p>Yao, F., Yin, L.: Design and Analysis of Password-Based Key DerivaDon FuncDons. In: IEEE TransacDons on InformaDon Theory, vol. 51, pp. 32923297 (2005)</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
  <div class="page">
    <p>Ques'ons?</p>
    <p>Andrew Ruddick  andrew.ruddick@hotmail.co.uk Jeff Yan  jeff.yan@lancaster.ac.uk Source Code: hcps://github.com/OpenCL-Andrew/.NETCracker/</p>
    <p>A. Ruddick, J. Yan</p>
  </div>
</Presentation>
