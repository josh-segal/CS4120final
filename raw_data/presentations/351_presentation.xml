<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Proxychain: Developing a Robust and Efficient Authentication Infrastructure for</p>
    <p>Carrier-Scale VoIP Networks Italo Dacosta and Patrick Traynor</p>
  </div>
  <div class="page">
    <p>Finding the right balance between performance /scalability and security is a well-known challenge</p>
    <p>Robust but computationally expensive security mechanisms are difficult to deploy in production environments  S-BGP, DNSSEC</p>
    <p>Weaker but more efficient security mechanisms are generally broken and abused  WEP, IKE Aggressive mode</p>
    <p>Performance, Scalability and Security</p>
  </div>
  <div class="page">
    <p>Another Example: SIP Authentication</p>
    <p>Session Initiation Protocol (SIP)  Establishes, manages and terminates sessions</p>
    <p>between two or more clients  Generally associated with VoIP</p>
    <p>RFC 3261 recommends several security mechanisms: Digest authentication, SSL/TLS, IPsec and S/MIME</p>
    <p>However, Digest authentication is typically the only one employed  Weaker but more efficient</p>
  </div>
  <div class="page">
    <p>SIP Digest Authentication</p>
    <p>- Challenge-response authentication protocol</p>
    <p>- Based on cryptographic hash operations (MD5)</p>
    <p>- De facto authentication mechanism in SIP</p>
  </div>
  <div class="page">
    <p>SIP Dialogs with Digest Authentication</p>
    <p>INVITE</p>
    <p>INVITE [H(H(uid||realm||pwd)||n||H(method||URI) )]</p>
    <p>uid</p>
    <p>H(uid||realm||pwd)</p>
    <p>INVITE</p>
    <p>INVITE</p>
    <p>INVITE [H(H(uid||realm||pwd)||n||H(method||URI))]</p>
    <p>uid</p>
    <p>H(uid||realm||pwd)</p>
    <p>INVITE</p>
    <p>Request to DB always required</p>
  </div>
  <div class="page">
    <p>Problems with Digest Authentication</p>
    <p>Inefficient in scenarios with a remote authentication service or database  RTT added to each authentication</p>
    <p>operation  One request to the database per authenticated SIP message  High load in the database if it is shared by multiple SIP</p>
    <p>servers</p>
    <p>Considered a weak authentication protocol  E.g., No mutual authentication</p>
  </div>
  <div class="page">
    <p>Our Scenario: A Nationwide VoIP Provider</p>
    <p>P = SIP Proxies DB = Authentication database</p>
  </div>
  <div class="page">
    <p>M e</p>
    <p>a s u</p>
    <p>re d</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (c</p>
    <p>p s )</p>
    <p>Offered Load (cps)</p>
    <p>No Authentication Digest Authentication</p>
    <p>The Problem: Digest Authentication Performance in Our Scenario</p>
    <p>24,000 cps (no auth.)</p>
    <p>1,160 cps (Digest auth.)</p>
  </div>
  <div class="page">
    <p>Our Proposed Solution</p>
    <p>Reduce the number of requests to the database by caching temporary authentication credentials in the proxies</p>
    <p>Use hash chains to build these temporary credentials  Take advantage of hash chains</p>
    <p>properties  Caching Digest auth. credentials</p>
    <p>reduces security!</p>
  </div>
  <div class="page">
    <p>Hash Chains Background</p>
    <p>Sequence of one-time authentication tokens  Created by applying a cryptographic hash</p>
    <p>function to a secret value r multiple times</p>
    <p>Hn(r) = H(H(H(r)))</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Design and implementation of new SIP authentication protocol: Proxychain</p>
    <p>Experimental evaluation  Call throughput  Bandwidth utilization  CPU utilization</p>
    <p>Results analysis</p>
  </div>
  <div class="page">
    <p>Proxychain Design Goals</p>
    <p>Efficiency  Faster authentication operations</p>
    <p>Scalability  Support larger number of users and proxies</p>
    <p>Security  Provide more security guarantees</p>
  </div>
  <div class="page">
    <p>Proxychain SIP Dialogs</p>
    <p>INVITE [nAP]</p>
    <p>INVITE</p>
    <p>A, P</p>
    <p>Hl(tkA), l, nDA, nDP, tkP</p>
    <p>INVITE [A, B, i, HMAC(tkP, A||B||i), Hi-1(tkA)]</p>
    <p>INVITE</p>
    <p>INVITE [nAP]</p>
    <p>INVITE [A, B, i-1, HMAC(tkP, A||B||i-1), Hi-2(tkA)]</p>
    <p>No request to DB is required</p>
    <p>Secure Channel</p>
  </div>
  <div class="page">
    <p>Proxychain implementation</p>
    <p>Modifications to proxy, database and client software  Implemented in C language  Relatively small when compared to</p>
    <p>original code base  Total credential size (MD5): 134 bytes</p>
    <p>Only 26 MB of proxys memory required for storing 200,000 users credentials</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Planetlab for obtaining real RTT values</p>
    <p>GT Emulab testbed for database and proxies  OpenSIPS for proxies  MySQL for the database</p>
    <p>Nine high-capacity servers for generating SIP call traffic  SIPp as the SIP traffic generator</p>
  </div>
  <div class="page">
    <p>Results: Call Throughput</p>
    <p>M e a s u re</p>
    <p>d T</p>
    <p>h ro</p>
    <p>u g h p u t (c</p>
    <p>p s )</p>
    <p>Offered Load (cps)</p>
    <p>No Authentication Digest Authentication</p>
    <p>Proxychain</p>
    <p>24,000 cps (no auth.)</p>
    <p>1,160 cps (Digest auth.)</p>
    <p>19,700 cps (Proxychain)</p>
  </div>
  <div class="page">
    <p>Results: Database CPU Utilization</p>
    <p>-20</p>
    <p>M y S</p>
    <p>Q L %</p>
    <p>C P</p>
    <p>U u</p>
    <p>ti liz</p>
    <p>a ti o n</p>
    <p>Time (sec)</p>
    <p>Digest authentication. Proxychain</p>
    <p>DB saturation (dual core machine)</p>
  </div>
  <div class="page">
    <p>Results: Scalability</p>
    <p>M a x im</p>
    <p>u m</p>
    <p>u s a b le</p>
    <p>t h ro</p>
    <p>u g h p u t (c</p>
    <p>p s )</p>
    <p># of proxies</p>
    <p>Digest authentication. Proxychain</p>
    <p>y = 3243.9x + 416.5 R2 = 0.998</p>
  </div>
  <div class="page">
    <p>Results: INVITE and BYE Authentication</p>
    <p>M e a s u re</p>
    <p>d T</p>
    <p>h ro</p>
    <p>u g h p u t (c</p>
    <p>p s )</p>
    <p>Offered Load (cps)</p>
    <p>Proxychain (INVITE) Proxychain (INVITE and BYE)</p>
    <p>19,700 cps (INVITE)</p>
    <p>12,000 cps (INVITE+BYE)</p>
  </div>
  <div class="page">
    <p>Discussion: Performance and Scalability</p>
    <p>Proxychain reduces the effects of network latency, allowing higher call throughput</p>
    <p>Lower load to the database allows more scalability and lower HW requirement</p>
  </div>
  <div class="page">
    <p>Discussion: Performance and Scalability</p>
    <p>Hash chains allow constant storage space  Dynamic reprovisioning (future work)</p>
    <p>Key assumption: each proxy caches most of its users credentials (&gt;75%)  Pre-fetching mechanism  Cache eviction policies (future work)</p>
  </div>
  <div class="page">
    <p>Discussion: Security</p>
    <p>Security improvements over Digest authentication and hash chain protocols  Efficient mutual authentication, additional</p>
    <p>security verifications  Protection against passive and active</p>
    <p>attackers  Stealing credentials from a proxy does not</p>
    <p>allow user impersonation (only affects mutual authentication)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Proxychain simultaneously provides a robust, scalable and efficient authentication mechanism for carrier-scale SIP providers without additional HW</p>
    <p>Even non-carrier level infrastructures with centralized authentication service can benefit from Proxychain</p>
    <p>The key concepts behind Proxychain can be applied to authentication protocols in other domains</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Contact: idacosta@gatech.edu</p>
  </div>
</Presentation>
