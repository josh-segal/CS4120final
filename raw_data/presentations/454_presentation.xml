<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Wide-area Network</p>
    <p>Acceleration</p>
    <p>for the Developing World</p>
    <p>Sunghwan Ihm (Princeton)</p>
    <p>KyoungSoo Park (KAIST)</p>
    <p>Vivek S. Pai (Princeton)</p>
  </div>
  <div class="page">
    <p>POOR INTERNET ACCESS IN</p>
    <p>THE DEVELOPING WORLD</p>
    <p>Internet access is a scarce commodity in</p>
    <p>the developing regions</p>
    <p>Expensive / slow</p>
    <p>Zambia example [Johnson et al. NSDR10]</p>
    <p>300 people share 1Mbps satellite link</p>
    <p>$1200 per month</p>
  </div>
  <div class="page">
    <p>WEB PROXY CACHING IS NOT</p>
    <p>ENOUGH</p>
    <p>Local Proxy</p>
    <p>Cache</p>
    <p>Users</p>
    <p>Slow Link</p>
    <p>Origin Web Servers</p>
    <p>Whole objects, designated cacheable traffic only</p>
    <p>Zambia: 43% cache hit rate, 20% byte hit rate</p>
  </div>
  <div class="page">
    <p>WAN ACCELERATION:</p>
    <p>FOCUS ON CACHE MISSES</p>
    <p>Packet-level (chunks) caching</p>
    <p>Mostly for enterprise</p>
    <p>Two (or more) endpoints, coordinated</p>
    <p>Users</p>
    <p>Slow Link</p>
    <p>Origin Web Servers</p>
    <p>WAN</p>
    <p>Accelerator</p>
    <p>WAN</p>
    <p>Accelerator</p>
  </div>
  <div class="page">
    <p>CONTENT FINGERPRINTING</p>
    <p>Split content into chunks</p>
    <p>Rabins fingerprinting over a sliding window</p>
    <p>Match n low-order bits of a global constant K</p>
    <p>Average chunk size: 2n bytes</p>
    <p>Name chunks by content (SHA-1 hash)</p>
    <p>Cache chunks and pass references</p>
    <p>A B C D E</p>
  </div>
  <div class="page">
    <p>WHERE TO STORE CHUNKS</p>
    <p>Chunk data</p>
    <p>Usually stored on disk</p>
    <p>Can be cached in memory to reduce disk access</p>
    <p>Chunk metadata index</p>
    <p>Name, offset, length, etc.</p>
    <p>Partially or completely kept in memory to</p>
    <p>minimize disk accesses</p>
  </div>
  <div class="page">
    <p>HOW IT WORKS</p>
    <p>Origin</p>
    <p>Web Server</p>
    <p>WAN</p>
    <p>Accelerator Users</p>
    <p>uncached raw content</p>
    <p>(compression) WAN</p>
    <p>Accelerator</p>
    <p>local disk (cache hits)</p>
    <p>from sender-side node</p>
    <p>users (cut-through)</p>
    <p>Sender-Side</p>
    <p>Receiver-Side</p>
  </div>
  <div class="page">
    <p>WAN ACCELERATOR</p>
    <p>PERFORMACE</p>
    <p>Effective bandwidth (throughput)</p>
    <p>Original data size / total time</p>
    <p>Transfer: send data + refs</p>
    <p>Compression rate</p>
    <p>Reconstruction: hits from cache</p>
    <p>Disk performance</p>
    <p>Memory pressure</p>
    <p>High</p>
    <p>High</p>
    <p>Low</p>
  </div>
  <div class="page">
    <p>DEVELOPING WORLD</p>
    <p>CHALLENGES/OPPORTUNITES</p>
    <p>Dedicated machine</p>
    <p>with ample RAM</p>
    <p>High-RPM SCSI disk</p>
    <p>Inter-office content only</p>
    <p>Star topology</p>
    <p>Shared machine</p>
    <p>with limited RAM</p>
    <p>Slow disk</p>
    <p>All content</p>
    <p>Mesh topology</p>
    <p>VS.</p>
    <p>Poor Performance!</p>
    <p>Enterprise Developing World</p>
  </div>
  <div class="page">
    <p>WANAX: HIGH-PERFORMANCE</p>
    <p>WAN ACCELERATOR</p>
    <p>Design Goals</p>
    <p>Maximize compression rate</p>
    <p>Minimize memory pressure</p>
    <p>Maximize disk performance</p>
    <p>Exploit local resources</p>
    <p>Contributions</p>
    <p>Multi-Resolution Chunking (MRC)</p>
    <p>Peering</p>
    <p>Intelligent Load Shedding (ILS)</p>
  </div>
  <div class="page">
    <p>SINGLE RESOLUTION</p>
    <p>CHUNKING (SRC) TRADEOFFS</p>
    <p>High compression rate</p>
    <p>High memory pressure</p>
    <p>Low disk performance</p>
    <p>Low compression rate</p>
    <p>Low memory pressure</p>
    <p>High disk performance</p>
    <p>Q W R T I O X C</p>
    <p>P Z V N</p>
    <p>E A Y U</p>
    <p>Q W R T I O X C</p>
    <p>P Z V N</p>
    <p>E B Y U</p>
  </div>
  <div class="page">
    <p>MULTI-RESOLUTION</p>
    <p>CHUNKING (MRC)</p>
    <p>Use multiple chunk sizes simultaneously</p>
    <p>Large chunks for low memory pressure</p>
    <p>and disk seeks</p>
    <p>Small chunks for high compression rate</p>
  </div>
  <div class="page">
    <p>GENERATING MRC CHUNKS</p>
    <p>Original Data</p>
    <p>HIT</p>
    <p>HIT</p>
    <p>HIT</p>
    <p>Detect smallest chunk boundaries first</p>
    <p>Larger chunks are generated by matching</p>
    <p>more bits of the detected boundaries</p>
    <p>Clean chunk alignment + less CPU</p>
  </div>
  <div class="page">
    <p>STORING MRC CHUNKS</p>
    <p>Store every chunk regardless of content</p>
    <p>overlaps</p>
    <p>No association among chunks</p>
    <p>One index entry load + one disk seek</p>
    <p>Reduce memory pressure and disk seeks</p>
    <p>Disk space is cheap, disk seeks are limited</p>
    <p>B C</p>
    <p>A B CA</p>
    <p>*Alternative storage options in the paper</p>
  </div>
  <div class="page">
    <p>PEERING</p>
    <p>Cheap or free local networks</p>
    <p>(ex: wireless mesh, WiLDNet)  Multiple caches in the same region</p>
    <p>Extra memory and disk</p>
    <p>Use Highest Random Weight (HRW)  Robust to node churn</p>
    <p>Scalable: no broadcast or digests exchange</p>
    <p>Trade CPU cycles for low memory footprint</p>
  </div>
  <div class="page">
    <p>INTELLIGENT LOAD</p>
    <p>SHEDDING (ILS)</p>
    <p>Two sources of fetching chunks  Cache hits from disk</p>
    <p>Cache misses from network</p>
    <p>Fetching chunks from disks is not always desirable  Disk heavily loaded (shared/slow)</p>
    <p>Network underutilized</p>
    <p>Solution: adjust network and disk usage dynamically to maximize throughput</p>
  </div>
  <div class="page">
    <p>SHEDDING SMALLEST CHUNK</p>
    <p>Move the smallest chunks from disk to network, until network becomes the bottleneck</p>
    <p>Disk  one seek regardless of chunk size</p>
    <p>Network  proportional to chunk size</p>
    <p>Total latency  max(disk, network)</p>
    <p>Disk</p>
    <p>Network</p>
    <p>Peer</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>SIMULATION ANALYSIS</p>
    <p>News Sites  Web browsing of dynamically generated Web</p>
    <p>sites (1GB)</p>
    <p>Refresh the front pages of 9 popular Web sites every five minutes</p>
    <p>CNN, Google News, NYTimes, Slashdot, etc.</p>
    <p>Linux Kernel  Large file downloads (276MB)</p>
    <p>Two different versions of Linux kernel source tar file</p>
    <p>Bandwidth savings, and # disk reads</p>
  </div>
  <div class="page">
    <p>BANDWITH SAVINGS</p>
    <p>SRC: high metadata overhead</p>
    <p>MRC: close to ideal bandwidth savings</p>
  </div>
  <div class="page">
    <p>DISK FETCH COST</p>
    <p>MRC greatly reduces # of disk seeks</p>
    <p>22.7x at 32 bytes</p>
  </div>
  <div class="page">
    <p>CHUNK SIZE BREAKDOWN</p>
    <p>SRC: high metadata overhead</p>
    <p>MRC: much less # of disk seeks and index</p>
    <p>entries (40% handled by large chunks)</p>
  </div>
  <div class="page">
    <p>EVALUTION</p>
    <p>Implementation  Single-process event-driven architecture</p>
    <p>18000 LOC in C</p>
    <p>HashCache (NSDI09) as chunk storage</p>
    <p>Intra-region bandwidths 100Mbps</p>
    <p>Disable in-memory cache for content  Large working sets do not fit in memory</p>
    <p>Machines  AMD Athlon 1GHz / 1GB RAM / SATA</p>
    <p>Emulab pc850 / P3-850 / 512MB RAM / ATA</p>
  </div>
  <div class="page">
    <p>MICROBENCHMARK</p>
    <p>MRC</p>
    <p>ILS</p>
    <p>PEER</p>
    <p>B et te r</p>
    <p>90% similar 1 MB files</p>
    <p>512kbps / 200ms RTT</p>
    <p>No tuning required</p>
  </div>
  <div class="page">
    <p>REALISTIC TRAFFIC:</p>
    <p>YOUTUBE</p>
    <p>Classroom scenario</p>
    <p>100 clients download 18MB clip</p>
    <p>1Mbps / 1000ms RTT</p>
    <p>Better</p>
    <p>High Quality (490)</p>
    <p>Low Quality (320)</p>
  </div>
  <div class="page">
    <p>IN THE PAPER</p>
    <p>Enterprise test</p>
    <p>MRC scales to high performance servers</p>
    <p>Other storage options</p>
    <p>MRC has the lowest memory pressure</p>
    <p>Saving disk space increases memory pressure</p>
    <p>More evaluations</p>
    <p>Overhead measurement</p>
    <p>Alexa traffic</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS</p>
    <p>Wanax: scalable / flexible WAN accelerator for the developing regions</p>
    <p>MRC: high compression / high disk performance / low memory pressure</p>
    <p>ILS: adjust disk and network usage dynamically for better performance</p>
    <p>Peering: aggregation of disk space, parallel disk access, and efficient use of local bandwidth</p>
  </div>
  <div class="page">
    <p>sihm@cs.princeton.edu</p>
    <p>http://www.cs.princeton.edu/~sihm/</p>
  </div>
</Presentation>
