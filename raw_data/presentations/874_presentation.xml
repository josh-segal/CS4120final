<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>OSv</p>
    <p>Optimizing the Operating System for Virtual Machines</p>
    <p>Avi Kivity, Dor Laor, Glauber Costa, Pekka Enberg,</p>
    <p>Nadav Har'El, Don Marti, Vlad Zolotarov</p>
    <p>Cloudius Systems</p>
  </div>
  <div class="page">
    <p>Problem statement</p>
    <p>Virtual Machines are useful and everywhere.</p>
    <p>A VM runs a guest operating system.</p>
    <p>Usually, guest OS is an existing general-purpose OS, e.g., Linux.</p>
    <p>Can we design a better OS specifically for VMs?</p>
  </div>
  <div class="page">
    <p>Goals of OSv</p>
    <p>OSv: a new OS designed specifically for cloud Vms.</p>
    <p>Run existing cloud applications (Linux executables).</p>
    <p>Run these faster than Linux.</p>
    <p>Explore new APIs for even better performance.</p>
    <p>Use those in a common runtime environment (e.g., JVM) to also benefit unmodified applications.</p>
  </div>
  <div class="page">
    <p>Goals of OSv (continued)</p>
    <p>Small image and very quick boot.</p>
    <p>Starting a new VM becomes a viable alternative to reconfiguring a running one.</p>
    <p>Not tied to specific hypervisor or platform</p>
    <p>64-bit x86 fully working, 64-bit ARM in progress.</p>
    <p>KVM, Xen, VMware, VirtualBox.</p>
    <p>Amazon EC2 and Google GCE clouds.</p>
  </div>
  <div class="page">
    <p>Goals of OSv (continued)</p>
    <p>Be a platform for continued research on VM OSs</p>
    <p>Actively developed as open source. http://osv.io/</p>
    <p>Community encourages innovation.</p>
    <p>Small code base compared to Linux.</p>
    <p>Modern programming language: C++11.</p>
    <p>Not limited to particular hypervisor or application programming language.</p>
    <p>Fully supports SMP guests.</p>
  </div>
  <div class="page">
    <p>OSv design and implementation</p>
    <p>Process isolation is an important role of traditional OSs.</p>
    <p>Enough for VM to run single application</p>
    <p>Already common (scale-out).</p>
    <p>Simpler code, eliminate isolation costs.</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>Application</p>
    <p>Guest OS In the cloud, both hypervisor and guest isolate applications.</p>
  </div>
  <div class="page">
    <p>OSv design and implementation</p>
    <p>Single application</p>
    <p>Single process, multiple threads. Single address space.</p>
    <p>No protection between user-space and kernel.  System calls are just function calls (Library OS)</p>
    <p>OSv runs Linux shared objects by implementing an ELF dynamic linker.</p>
    <p>Calls to glibc ABI are resolved to functions in the OSv kernel.</p>
    <p>Even system calls, e.g., read(), are ordinary function calls with none of the traditional system-call overheads.</p>
  </div>
  <div class="page">
    <p>OSv design and implementation</p>
    <p>Linux compatibility</p>
    <p>To run existing applications, OSv implements most of the Linux/Glibc ABI.</p>
    <p>Some functions like fork() and exec() are not provided, as they do not fit OSv's single-application model.</p>
  </div>
  <div class="page">
    <p>OSv design and implementation</p>
    <p>No spin-locks</p>
    <p>Spin-locks are notorious for VM OSs  cause lock holders preemption problem.</p>
    <p>Often worked around by para-virtual locks.</p>
    <p>OSv avoids spin-locks entirely.  Most kernel work is done in threads, which can use a</p>
    <p>sleeping mutex.  Mutex implemention not using a spin-lock.  The scheduler uses lock-free algorithms.</p>
  </div>
  <div class="page">
    <p>OSv design and implementation</p>
    <p>Network channels</p>
    <p>Network stack redesign proposed by Van Jacobson in 2006.</p>
    <p>Reduce locks, lock contention and cache-line bounces.</p>
    <p>Typical network stack:  Interrupt thread processes packets, executes TCP protocol,</p>
    <p>writes to buffer.  Application thread reads from this buffer.</p>
    <p>Network channels:  Interrupt collects packets in lock-free channels.  TCP protocol executed by application thread on read().</p>
  </div>
  <div class="page">
    <p>OSv design and implementation</p>
    <p>The core of OSv is new code</p>
    <p>Loader, Dynamic linker, Memory management, Thread scheduler, Synchronization (e.g., mutex, RCU)</p>
    <p>Virtual hardware drivers:  PC hardware commonly emulated by hypervisors (Keyboard, VGA,</p>
    <p>IDE, HPET, etc.)  Paravirtual network, disk, and clock drivers (virtio, vmxnet3, pvscsi,</p>
    <p>etc.)  Reused existing open-source code when appropriate:</p>
    <p>C library headers and some functions from Musl-libc.</p>
    <p>The ZFS filesystem from FreeBSD.</p>
    <p>Network stack initially imported from FreeBSD.</p>
  </div>
  <div class="page">
    <p>Beyond the Linux API</p>
    <p>OSv lowers the overhead of the Posix APIs.</p>
    <p>Some remaining overheads inherent in Posix API. E.g.,</p>
    <p>read() copies data into userspace buffer.</p>
    <p>Operations on socket lock it, as same socket can be accessed from multiple threads.</p>
    <p>Can we improve performance further with new APIs?</p>
  </div>
  <div class="page">
    <p>Beyond the Linux API - examples</p>
    <p>Zero-copy lock-less network APIs</p>
    <p>Direct-access to page tables</p>
    <p>Shrinker API: dynamic division of all of available memory.</p>
    <p>JVM Balloon  automatically size JVM heap to available memory, on unmodified JVM.</p>
    <p>Biggest obstacle to new APIs is adoption</p>
    <p>Can start with modifying runtime environment (JVM).</p>
    <p>All unmodified JVM applications would benefit.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Compared OSv guest to Fedora 20 guest w/o firewall.</p>
    <p>On KVM host.</p>
    <p>See full details in the paper.</p>
  </div>
  <div class="page">
    <p>Macro benchmarks</p>
    <p>Memcached. UDP. Single-vCPU guest, loaded with memaslap (90% get, 10% set)</p>
    <p>OSv throughput 22% better than Linux.  Memcached reimplemented with packet-filtering API</p>
    <p>OSv throughput 290% better than baseline.  SPECjvm2008. Suite of CPU/memory intensive Java</p>
    <p>workloads. Little use of OS services.</p>
    <p>Can't expect much improvement. Got 0.5%.</p>
    <p>Good correctness test (diverse, checks results).</p>
  </div>
  <div class="page">
    <p>Micro benchmarks</p>
    <p>Netperf  measure network stack performance.</p>
    <p>TCP single-stream thoughput: 24% improvement.</p>
    <p>UDP and TCP r/r latency: 37%-47% reduction.  Context switch - two threads, alternate waking each other with</p>
    <p>pthreads condition variable.</p>
    <p>3-10 times faster than in Linux.</p>
    <p>As little as 328 ns when two threads on same CPU.  JVM Balloon  microbenchmark where large heap and large</p>
    <p>page cache are needed, but not at the same time.</p>
    <p>Osv 35% faster than Linux.</p>
  </div>
  <div class="page">
    <p>Latest unofficial results</p>
    <p>Experimental, non-release, code...</p>
    <p>Need more verification...</p>
    <p>Cassandra stress test, READ, 4 vcpu, 4 GB ram  OSv 34% better</p>
    <p>Tomcat, servlet sending fixed response, 128 concurrent HTTP connections, measure throughput. 4 vcpus, 3GB</p>
    <p>OSv 41% better.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Come visit us at http://osv.io/</p>
    <p>Github source repository</p>
    <p>Mailing list</p>
    <p>Twitter, @CloudiusSystems, #Osv.</p>
    <p>We invite you to join the OSv open-source project!</p>
  </div>
</Presentation>
