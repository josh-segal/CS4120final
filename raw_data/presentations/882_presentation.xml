<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Insight: In-situ Online Service Failure Path Inference in Production Computing Infrastructures</p>
    <p>Hiep Nguyen, Daniel J. Dean, Kamal Kc, Xiaohui Gu</p>
    <p>North Carolina State University</p>
  </div>
  <div class="page">
    <p>Online Services</p>
    <p>Reservation servers</p>
    <p>Database Image storage</p>
    <p>Resource pool</p>
    <p>Virtual Computing Lab (VCL)</p>
    <p>Request</p>
    <p>Poll Check image</p>
    <p>Copy image</p>
    <p>Setup Web server</p>
    <p>Push</p>
  </div>
  <div class="page">
    <p>Online Service Non-crashing Failures</p>
    <p>Online services are prone to non-crashing failures  Number of non-crashing failures in VCL: 154 in one month</p>
    <p>(April 2014); 1813 in one year (2013)  Non-crashing failures often go unnoticed  Error message does not tell why failures occur</p>
    <p>|2836|66:58|new| ---- WARNING ---|2836|66:58|new| 2013-05-04 22:07:57|2836|66:58|new| new.pm:process(295)|failed to load vmsk1 with kvmlinux-v0  |2836|66:58|new| ---- CRITICAL ---|2836|66:58|new| 2013-05-04 22:07:57|2836|66:58|new| State.pm:reservation_failed(213)| reservation failed on vmsk1: process failed after trying to load or make available</p>
    <p>lighttpd failure:</p>
    <p>Authentication failure in VCL:</p>
  </div>
  <div class="page">
    <p>Approach 1: Offline Failure Reproduction</p>
    <p>Offline failure reproduction is hard  Lacking environment information  Missing interacting components  Absent third-party libraries</p>
    <p>Bug report</p>
  </div>
  <div class="page">
    <p>Approach 2: Record and Replay</p>
    <p>Intrusive system recording  High overhead  Privacy concerns  Deployment challenges</p>
    <p>Bug report</p>
  </div>
  <div class="page">
    <p>Approach 3: Onsite Failure Diagnosis</p>
    <p>Triage: diagnosing production run failures at the users site [Tucek et al. SOSP07]  Relies on repeated replays to compare good and bad runs  Requires runtime checkpointing for replays  Performs diagnosis directly on the production server  Can incur long service downtime  Does not fully leverage runtime environment data</p>
  </div>
  <div class="page">
    <p>Our Key Observations</p>
    <p>Production environments provide lots of clues  Environment data: inputs, configuration files, interacting</p>
    <p>components  Runtime outputs: console logs, system call traces</p>
    <p>Onsite failure path search is more efficient  Significantly smaller search scope  Does not require intrusive recording for replay</p>
    <p>Decouple failure analysis from the production service execution  Capture runtime state using dynamic virtual machine</p>
    <p>cloning  Minimize production service downtime</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Reservation servers</p>
    <p>Database Image storage</p>
    <p>Resource pool</p>
    <p>Virtual Computing Lab (VCL)</p>
    <p>Matched failure paths</p>
    <p>Shadow server</p>
    <p>Clone</p>
    <p>Binary execution exploration</p>
    <p>Web server</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>No source code access  Binary-based approach</p>
    <p>Fast failure path inference  Leverage fresh environment data at the failure moment</p>
    <p>Low overhead  No intrusive recording</p>
    <p>Different programming languages  Compiled programs (e.g., C/C++)  Interpreted programs (e.g., Perl, Java)</p>
  </div>
  <div class="page">
    <p>Building Blocks</p>
    <p>Dynamic shadow server creation  Use live VM cloning  Decouple analysis from the production run</p>
    <p>Guided binary execution exploration  Leverage the production environment data and runtime</p>
    <p>outputs as guidance to search the failure paths  No source code required</p>
  </div>
  <div class="page">
    <p>Dynamic Shadow Server Creation</p>
    <p>Reservation servers</p>
    <p>Database Image storage</p>
    <p>Resource pool</p>
    <p>Web server</p>
    <p>Filtering proxy</p>
    <p>Automatic reconfiguration  Reset the IP address for the shadow server  Reconfigure firewall</p>
    <p>Policy-driven output filtering proxy</p>
    <p>New IP address</p>
    <p>Clone Read</p>
    <p>Read</p>
    <p>Read Write</p>
    <p>Write</p>
    <p>Write</p>
  </div>
  <div class="page">
    <p>Guided Binary Execution Exploration</p>
    <p>Console log: 1. Checking request state in database 2. Start processing reservation</p>
    <p>Unmatched</p>
    <p>Unmatched</p>
    <p>Matched</p>
    <p>True False</p>
    <p>True False</p>
  </div>
  <div class="page">
    <p>Problem with Sparse Console Log</p>
    <p>Too many possible paths</p>
    <p>Console log:</p>
    <p>Create hard link ./dir1/file1 to ./file1</p>
    <p>.: hard link not allowed for directory</p>
    <p>B1</p>
    <p>B2</p>
    <p>B3 B3</p>
    <p>B4 B5</p>
    <p>True</p>
    <p>False True</p>
    <p>True True</p>
    <p>True True</p>
    <p>False</p>
    <p>False False</p>
    <p>False False</p>
  </div>
  <div class="page">
    <p>Leveraging System Call Sequences</p>
    <p>sys_poll</p>
    <p>sys_write</p>
    <p>sys_poll</p>
    <p>sys_read</p>
    <p>sys_read</p>
    <p>Console log:</p>
    <p>Create hard link ./dir1/file1 to ./file1</p>
    <p>.: hard link not allowed for directory</p>
    <p>B1</p>
    <p>B2</p>
    <p>B3 B3</p>
    <p>B4 B5</p>
    <p>sys_read</p>
    <p>sys_read</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Currently support Perl and C/C++ programs  Modified Perl interpreter for Perl programs</p>
    <p>Add handling for branch opcodes (e.g., OP_COND_EXPR)  Intercept interpreters execution stack to change branch</p>
    <p>conditions  Pin tool for C/C++ programs</p>
    <p>Intercept branch statements (e.g., JZ, JNE, JE)  Modify the branch conditions by changing EFLAGS register</p>
    <p>Uses SystemTap for monitoring system calls</p>
  </div>
  <div class="page">
    <p>Tested Failure Cases</p>
    <p>System LOC Failure path length (Num. of funtions)</p>
    <p>Failure name Num. of console log</p>
    <p>messages</p>
    <p>VCL</p>
    <p>Apache httpd</p>
    <p>Squid 110K 588 Non-crashing stop failure 195</p>
    <p>Lighttpd 38K 730 Proxy failure 3</p>
    <p>PBZIP2 3.9K 41 Decompression failure 14</p>
    <p>aget 1.5K 2 Download failure 1</p>
    <p>rmdir 0.2K 2 Option failure 2</p>
    <p>ln 0.6K 1 Option failure 1</p>
    <p>touch 0.5K 1 Time failure 1</p>
    <p>Production failures</p>
    <p>Reported open source software failures</p>
  </div>
  <div class="page">
    <p>Call Path Difference in VCL Failures</p>
    <p>Failure name Complete environment</p>
    <p>data</p>
    <p>Partial environment</p>
    <p>data</p>
    <p>No environment</p>
    <p>data Overlapping reservation failure 0 0 0</p>
    <p>Network failure 0 0 Failed Authentication failure 0 0 Failed Image corruption failure 0 0 Failed</p>
  </div>
  <div class="page">
    <p>Call Path Difference in Open Source Software Failures</p>
    <p>Reproduced failure paths always cover root cause functions and branches</p>
    <p>Failure name Original input</p>
    <p>Same input type + console log</p>
    <p>Same input type + console log + system</p>
    <p>call</p>
    <p>Apache (authentication failure) 0 17 11</p>
    <p>Apache (CGI failure) 0 140 9</p>
    <p>Squid (non-crashing stop failure) 0 0 0</p>
    <p>Lighttpd (proxy failure) 0 0 0</p>
    <p>PBZIP2 (decompression failure) 0 1 0</p>
    <p>aget (download failure) 0 0 0</p>
    <p>rmdir (option failure) 0 0 0</p>
    <p>ln (option failure) 0 0 0</p>
    <p>touch (time failure) 0 0 0</p>
  </div>
  <div class="page">
    <p>Failure Reproduction Time</p>
    <p>VCL failures Open source software failures</p>
  </div>
  <div class="page">
    <p>Overhead</p>
    <p>Shadow system &lt; 0.3% System call tracing &lt; 1.5% Shadow creation time &lt; 30s Stop-and-copy time &lt; 70ms</p>
    <p>System Input log Console log System call log VCL 130MB 490MB N/A Apache 20MB 0.3MB 12MB</p>
    <p>Logging overhead (1 day)</p>
    <p>Performance impact</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Insight: In-situ failure path inference system  Enable failure path inference inside the production</p>
    <p>environment  Use shadow component to decouple failure analysis from</p>
    <p>the production run  Guided binary execution exploration to find high fidelity</p>
    <p>failure paths quickly without source code</p>
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Acknowledgement</p>
    <p>This work was sponsored in part by NSF CNS0915567 grant, NSF CNS0915861 grant, U.S. Army Research Office (ARO) under grant W911NF-10-1-0273, and Google Research Awards</p>
  </div>
</Presentation>
