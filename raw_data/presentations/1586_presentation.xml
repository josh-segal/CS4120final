<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Protocol-Aware Recovery for Consensus-Based Storage</p>
    <p>Ramnatthan Alagappan, Aishwarya Ganesan,</p>
    <p>Eric Lee*, Aws Albarghouthi, Vijay Chidambaram*, Andrea Arpaci-Dusseau, and Remzi Arpaci-Dusseau</p>
    <p>University of Wisconsin  Madison *University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>Redundancy Enables Reliability</p>
    <p>Redundancy helps distributed storage systems mask failures</p>
  </div>
  <div class="page">
    <p>Redundancy Enables Reliability</p>
    <p>Redundancy helps distributed storage systems mask failures</p>
  </div>
  <div class="page">
    <p>Redundancy Enables Reliability</p>
    <p>Redundancy helps distributed storage systems mask failures</p>
    <p>system crashes</p>
  </div>
  <div class="page">
    <p>Redundancy Enables Reliability</p>
    <p>Redundancy helps distributed storage systems mask failures</p>
    <p>system crashes network failures</p>
  </div>
  <div class="page">
    <p>Redundancy Enables Reliability</p>
    <p>Redundancy helps distributed storage systems mask failures</p>
    <p>system crashes network failures</p>
    <p>System as a whole unaffected data is available data is correct</p>
  </div>
  <div class="page">
    <p>How About Faulty Data?</p>
  </div>
  <div class="page">
    <p>How About Faulty Data?</p>
    <p>Data could be faulty corrupted (disk corruption) inaccessible (latent errors)</p>
    <p>corrupted or inaccessible</p>
  </div>
  <div class="page">
    <p>How About Faulty Data?</p>
    <p>Data could be faulty corrupted (disk corruption) inaccessible (latent errors)</p>
    <p>We call these storage faults corrupted or inaccessible</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>corrupted</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
    <p>corrupted</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
    <p>ZooKeeper fails to start? How can I fix? Try clearing all the state in Zookeeper: stop Zookeeper , wipe the Zookeeper data directory, restart it</p>
    <p>A top Stackoverflow answer [1]</p>
    <p>[1] https://stackoverflow.com/questions/17038957/</p>
    <p>corrupted</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
    <p>A server might not be able to read its database  because of some file corruption in the transaction logs...in such a case, make sure all the other servers in your ensemble are up and working.go ahead and clean the database of the corrupt server. Delete all the files in datadir... Restart the server</p>
    <p>Recommendation from developers [2]</p>
    <p>ZooKeeper fails to start? How can I fix? Try clearing all the state in Zookeeper: stop Zookeeper , wipe the Zookeeper data directory, restart it</p>
    <p>A top Stackoverflow answer [1]</p>
    <p>[1] https://stackoverflow.com/questions/17038957/ [2] https://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html#sc_troubleshooting</p>
    <p>corrupted</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
    <p>A server might not be able to read its database  because of some file corruption in the transaction logs...in such a case, make sure all the other servers in your ensemble are up and working.go ahead and clean the database of the corrupt server. Delete all the files in datadir... Restart the server</p>
    <p>Recommendation from developers [2]</p>
    <p>ZooKeeper fails to start? How can I fix? Try clearing all the state in Zookeeper: stop Zookeeper , wipe the Zookeeper data directory, restart it</p>
    <p>A top Stackoverflow answer [1]</p>
    <p>[1] https://stackoverflow.com/questions/17038957/ [2] https://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html#sc_troubleshooting</p>
    <p>corrupted</p>
    <p>Looks reasonable: redundancy will help</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
    <p>corrupted</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
  </div>
  <div class="page">
    <p>How to Recover Faulty Data?</p>
    <p>A widely used approach: delete the data on the faulty node and restart it</p>
    <p>The approach seems intuitive and works - all good, right?</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
    <p>This majority has no idea about the committed data</p>
  </div>
  <div class="page">
    <p>Unfortunately, NoNot So Easy!</p>
    <p>Surprisingly, can lead to a global data loss!</p>
    <p>This majority has no idea about the committed data Committed data is lost!</p>
  </div>
  <div class="page">
    <p>Problem: Approach is Protocol-Oblivious</p>
  </div>
  <div class="page">
    <p>Problem: Approach is Protocol-Oblivious</p>
    <p>The recovery approach is oblivious to the underlying protocols</p>
    <p>used by the distributed system</p>
  </div>
  <div class="page">
    <p>Problem: Approach is Protocol-Oblivious</p>
    <p>The recovery approach is oblivious to the underlying protocols</p>
    <p>used by the distributed system</p>
    <p>e.g., the delete + rebuild approach was oblivious to the protocol used by the system to update the replicated data</p>
  </div>
  <div class="page">
    <p>Our Proposal: Protocol-Aware Recovery (PAR)</p>
    <p>e.g., is there a dedicated leader? constraints on leader election? how is the replicated state updated? what are the consistency guarantees?</p>
    <p>We call such an approach protocol-aware</p>
    <p>To safely recover, a recovery approach should be carefully designed based on</p>
    <p>properties of underlying protocols of the distributed system</p>
  </div>
  <div class="page">
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
  </div>
  <div class="page">
    <p>Why RSM?</p>
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
  </div>
  <div class="page">
    <p>Why RSM? most fundamental piece in building reliable distributed systems</p>
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
  </div>
  <div class="page">
    <p>Why RSM? most fundamental piece in building reliable distributed systems many systems depend upon RSM</p>
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
    <p>Chubby GFS Colossus BigTable</p>
    <p>ZooKeeper</p>
  </div>
  <div class="page">
    <p>Why RSM? most fundamental piece in building reliable distributed systems many systems depend upon RSM</p>
    <p>protecting RSM will improve reliability of many systems</p>
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
    <p>Chubby GFS Colossus BigTable</p>
    <p>ZooKeeper</p>
  </div>
  <div class="page">
    <p>Why RSM? most fundamental piece in building reliable distributed systems many systems depend upon RSM</p>
    <p>protecting RSM will improve reliability of many systems</p>
    <p>A hard problem</p>
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
    <p>Chubby GFS Colossus BigTable</p>
    <p>ZooKeeper</p>
  </div>
  <div class="page">
    <p>Why RSM? most fundamental piece in building reliable distributed systems many systems depend upon RSM</p>
    <p>protecting RSM will improve reliability of many systems</p>
    <p>A hard problem strong guarantees, even a small misstep can break guarantees</p>
    <p>Our Focus: PAR for Replicated State Machines (RSM)</p>
    <p>Chubby GFS Colossus BigTable</p>
    <p>ZooKeeper</p>
  </div>
  <div class="page">
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly violate safety (e.g., data loss) or cause unavailability</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly violate safety (e.g., data loss) or cause unavailability</p>
    <p>Our solution: CTRL (Corruption-Tolerant RepLication)</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly violate safety (e.g., data loss) or cause unavailability</p>
    <p>Our solution: CTRL (Corruption-Tolerant RepLication) a PAR approach, exploits properties of RSM protocols</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly violate safety (e.g., data loss) or cause unavailability</p>
    <p>Our solution: CTRL (Corruption-Tolerant RepLication) a PAR approach, exploits properties of RSM protocols guarantees safety and high availability with low performance overhead</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly violate safety (e.g., data loss) or cause unavailability</p>
    <p>Our solution: CTRL (Corruption-Tolerant RepLication) a PAR approach, exploits properties of RSM protocols guarantees safety and high availability with low performance overhead applied to LogCabin and ZooKeeper</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Study popular systems and analyze prior approaches approaches in most systems are protocol-oblivious some use protocol knowledge, but incorrectly violate safety (e.g., data loss) or cause unavailability</p>
    <p>Our solution: CTRL (Corruption-Tolerant RepLication) a PAR approach, exploits properties of RSM protocols guarantees safety and high availability with low performance overhead applied to LogCabin and ZooKeeper experimentally verified guarantees and little overheads (4%-8%)</p>
    <p>This Work</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction Replicated state machines Current approaches to storage faults CTRL: corruption-tolerant replication Evaluation Summary and conclusion</p>
  </div>
  <div class="page">
    <p>RSM Overview</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
    <p>key idea: run on many servers,</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
    <p>key idea: run on many servers,</p>
    <p>State Machine</p>
    <p>same initial state,</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
    <p>key idea: run on many servers,</p>
    <p>State Machine</p>
    <p>C B A inputs</p>
    <p>same initial state, same sequence of inputs,</p>
    <p>clients State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
    <p>key idea: run on many servers,</p>
    <p>State Machine</p>
    <p>C B A inputs</p>
    <p>Same state/</p>
    <p>Output</p>
    <p>same initial state, will produce same outputs</p>
    <p>same sequence of inputs,</p>
    <p>clients State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
    <p>key idea: run on many servers,</p>
    <p>State Machine</p>
    <p>C B A inputs</p>
    <p>Same state/</p>
    <p>Output</p>
    <p>same initial state, will produce same outputs</p>
    <p>same sequence of inputs,</p>
    <p>clients State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine Always correct and available if a majority of servers are functional</p>
  </div>
  <div class="page">
    <p>RSM: a paradigm to make a program/state machine more reliable</p>
    <p>RSM Overview</p>
    <p>key idea: run on many servers,</p>
    <p>State Machine</p>
    <p>C B A inputs</p>
    <p>Same state/</p>
    <p>Output</p>
    <p>same initial state, will produce same outputs</p>
    <p>same sequence of inputs,</p>
    <p>clients State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>A consensus algorithm (e.g., Paxos, Raft, or ZAB) ensures SMs process commands in the same order</p>
    <p>Always correct and available if a majority of servers are functional</p>
    <p>Pa xo</p>
    <p>s/ R</p>
    <p>af t</p>
  </div>
  <div class="page">
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>D IS</p>
    <p>K</p>
    <p>Replicated State Update</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>sState Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update</p>
    <p>B A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log B</p>
    <p>State Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log B</p>
    <p>State Machine</p>
    <p>State Machine</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log B</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B</p>
    <p>C</p>
    <p>A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log B</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log B</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log B</p>
    <p>C C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
    <p>apply to SM once majority log the</p>
    <p>command</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
    <p>apply to SM once majority log the</p>
    <p>command</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
    <p>apply to SM once majority log the</p>
    <p>command</p>
    <p>R es</p>
    <p>ul t</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>B C A C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Command is committed Safety condition: C must not be lost or overwritten!</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
    <p>apply to SM once majority log the</p>
    <p>command</p>
    <p>R es</p>
    <p>ul t</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>Snapshot B C A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s Log Snapshot</p>
    <p>B A</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log Snapshot BC C</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Command is committed Safety condition: C must not be lost or overwritten!</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
    <p>apply to SM once majority log the</p>
    <p>command</p>
    <p>R es</p>
    <p>ul t</p>
  </div>
  <div class="page">
    <p>C o ns</p>
    <p>en su</p>
    <p>s State Machine</p>
    <p>LogD IS</p>
    <p>K</p>
    <p>Replicated State Update Le</p>
    <p>ad er</p>
    <p>Snapshot C</p>
    <p>o ns</p>
    <p>en su</p>
    <p>s Log Snapshot</p>
    <p>C o ns</p>
    <p>en su</p>
    <p>s</p>
    <p>Log Snapshot</p>
    <p>State Machine</p>
    <p>State Machine</p>
    <p>Command is committed Safety condition: C must not be lost or overwritten!</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>Fo llo</p>
    <p>w er</p>
    <p>ACK ACK</p>
    <p>apply to SM once majority log the</p>
    <p>command</p>
    <p>R es</p>
    <p>ul t</p>
  </div>
  <div class="page">
    <p>RSM Persistent Structures</p>
  </div>
  <div class="page">
    <p>RSM Persistent Structures</p>
    <p>Snapshot A</p>
    <p>Log B C</p>
    <p>Log - commands are persistently stored</p>
    <p>Snapshots - persistent image of the state machine</p>
  </div>
  <div class="page">
    <p>RSM Persistent Structures</p>
    <p>Snapshot A</p>
    <p>Log B C M</p>
    <p>Metainfo</p>
    <p>Log - commands are persistently stored</p>
    <p>Snapshots - persistent image of the state machine</p>
    <p>Metainfo - critical meta-data structures (e.g., whom did I vote for?)</p>
  </div>
  <div class="page">
    <p>RSM Persistent Structures</p>
    <p>Snapshot A</p>
    <p>Log B C M</p>
    <p>Metainfo</p>
    <p>Log - commands are persistently stored</p>
    <p>Snapshots - persistent image of the state machine</p>
    <p>Metainfo - critical meta-data structures (e.g., whom did I vote for?)</p>
    <p>specific to each node, should not be recovered from redundant copies on other nodes</p>
  </div>
  <div class="page">
    <p>RSM Persistent Structures</p>
    <p>Snapshot A</p>
    <p>Log B C M</p>
    <p>Metainfo</p>
    <p>disk corruption or latent sector errors</p>
    <p>Log - commands are persistently stored</p>
    <p>Snapshots - persistent image of the state machine</p>
    <p>Metainfo - critical meta-data structures (e.g., whom did I vote for?)</p>
    <p>specific to each node, should not be recovered from redundant copies on other nodes</p>
  </div>
  <div class="page">
    <p>RSM Persistent Structures</p>
    <p>Snapshot A</p>
    <p>Log B C M</p>
    <p>Metainfo</p>
    <p>get corrupted data (e.g., ext2/3/4) get error (e.g., any FS on latent errors, btrfs on a corruption)</p>
    <p>disk corruption or latent sector errors</p>
    <p>read access</p>
    <p>File System</p>
    <p>Log - commands are persistently stored</p>
    <p>Snapshots - persistent image of the state machine</p>
    <p>Metainfo - critical meta-data structures (e.g., whom did I vote for?)</p>
    <p>specific to each node, should not be recovered from redundant copies on other nodes</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction Replicated state machines Current approaches to storage faults CTRL: corruption-tolerant replication Evaluation Summary and conclusion</p>
  </div>
  <div class="page">
    <p>Current Approaches to Handling Storage Faults</p>
  </div>
  <div class="page">
    <p>Current Approaches to Handling Storage Faults</p>
    <p>Methodology fault-injection study of practical systems (ZooKeeper, LogCabin, etcd, a Paxos-based system) analyze approaches from prior research</p>
  </div>
  <div class="page">
    <p>Current Approaches to Handling Storage Faults</p>
    <p>Methodology fault-injection study of practical systems (ZooKeeper, LogCabin, etcd, a Paxos-based system) analyze approaches from prior research</p>
    <p>Protocol-oblivious do not use any protocol knowledge</p>
  </div>
  <div class="page">
    <p>Current Approaches to Handling Storage Faults</p>
    <p>Methodology fault-injection study of practical systems (ZooKeeper, LogCabin, etcd, a Paxos-based system) analyze approaches from prior research</p>
    <p>Protocol-oblivious do not use any protocol knowledge</p>
    <p>Protocol-aware use some protocol knowledge but incorrectly or ineffectively</p>
  </div>
  <div class="page">
    <p>Protocol-Oblivious: Crash</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>A B C</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>A B C corrupted</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>A B C A B C</p>
    <p>A B C corrupted</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>A B C A B C A B C A B C</p>
    <p>A B C corrupted</p>
    <p>failed</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>A B C A B C A B C A B C</p>
    <p>A B C corrupted</p>
    <p>failed</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>B C A B C A B C A B C A B C</p>
    <p>A B C A B C A B C A B C</p>
    <p>A B C corrupted</p>
    <p>failed</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>B C A B C A B C A B C A B C</p>
    <p>A B C A B C A B C A B C</p>
    <p>A B C corrupted</p>
    <p>failed</p>
  </div>
  <div class="page">
    <p>Crash use checksums and catch I/O errors crash the node upon detection popular in practical systems safe but poor availability</p>
    <p>Protocol-Oblivious: Crash</p>
    <p>B C A B C A B C A B C A B C</p>
    <p>Restarting the node does not help persistent fault, so remain in crash-restart loop need error-prone manual intervention (can lead to safety violations)</p>
    <p>A B C A B C A B C A B C</p>
    <p>A B C corrupted</p>
    <p>failed</p>
  </div>
  <div class="page">
    <p>Protocol-Oblivious: Truncate</p>
  </div>
  <div class="page">
    <p>Truncate</p>
    <p>Protocol-Oblivious: Truncate</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>A C A</p>
    <p>detect using checksums</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>B C A B C A B C</p>
    <p>S2</p>
    <p>A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader Entry A corrupted</p>
    <p>at S1</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>B C A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S2</p>
    <p>A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader Entry A corrupted</p>
    <p>at S1</p>
    <p>truncates faulty and all subsequent</p>
    <p>entries</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>B C A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S1A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader S2, S3 crash; S1, S4, S5 form a majority</p>
    <p>S1 - Leader</p>
    <p>Entry A corrupted</p>
    <p>at S1</p>
    <p>truncates faulty and all subsequent</p>
    <p>entries</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>B C A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S1</p>
    <p>A,B,C silently lost!</p>
    <p>A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader S2, S3 crash; S1, S4, S5 form a majority</p>
    <p>S1 - Leader</p>
    <p>Entry A corrupted</p>
    <p>at S1</p>
    <p>truncates faulty and all subsequent</p>
    <p>entries</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>B C A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S1</p>
    <p>A,B,C silently lost!</p>
    <p>A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader S2, S3 crash; S1, S4, S5 form a majority</p>
    <p>S1 - Leader</p>
    <p>Entry A corrupted</p>
    <p>at S1</p>
    <p>truncates faulty and all subsequent</p>
    <p>entries</p>
    <p>X Y Z</p>
    <p>X Y Z X Y Z</p>
  </div>
  <div class="page">
    <p>Truncate truncate faulty portions upon detection</p>
    <p>Protocol-Oblivious: Truncate</p>
    <p>However, can lead to safety violations A C A</p>
    <p>detect using checksums</p>
    <p>B C A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S2 A B C A B C</p>
    <p>S1</p>
    <p>A,B,C silently lost!</p>
    <p>A B C A B C A B C</p>
    <p>S1</p>
    <p>S4</p>
    <p>S5</p>
    <p>S3</p>
    <p>S2</p>
    <p>A,B,C committed</p>
    <p>S2 - Leader S2, S3 crash; S1, S4, S5 form a majority</p>
    <p>S1 - Leader</p>
    <p>Entry A corrupted</p>
    <p>at S1</p>
    <p>truncates faulty and all subsequent</p>
    <p>entries</p>
    <p>X Y Z</p>
    <p>X Y Z X Y Z</p>
    <p>X Y Z X Y Z X Y Z X Y Z X Y Z</p>
    <p>S2, S3 follow leaders log,</p>
    <p>removing A,B,C</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Availability</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Perform</p>
    <p>-ance No</p>
    <p>intervention Fast</p>
    <p>recovery Low</p>
    <p>complexity Availability</p>
    <p>No extra nodes</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Perform</p>
    <p>-ance No</p>
    <p>intervention Fast</p>
    <p>recovery Low</p>
    <p>complexity Availability</p>
    <p>No extra nodes</p>
    <p>NA</p>
    <p>NA</p>
    <p>NA</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Perform</p>
    <p>-ance No</p>
    <p>intervention Fast</p>
    <p>recovery Low</p>
    <p>complexity Availability</p>
    <p>No extra nodes</p>
    <p>NA</p>
    <p>NA</p>
    <p>NA</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Perform</p>
    <p>-ance No</p>
    <p>intervention Fast</p>
    <p>recovery Low</p>
    <p>complexity Availability</p>
    <p>No extra nodes</p>
    <p>NA</p>
    <p>NA</p>
    <p>NA</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Perform</p>
    <p>-ance No</p>
    <p>intervention Fast</p>
    <p>recovery Low</p>
    <p>complexity Availability</p>
    <p>No extra nodes</p>
    <p>NA</p>
    <p>NA</p>
    <p>NA</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>CTRL</p>
    <p>Recovery Approaches Summary Class Approach</p>
    <p>Protocoloblivious</p>
    <p>Protocolaware</p>
    <p>NoDetection Crash</p>
    <p>Truncate DeleteRebuild</p>
    <p>MarkNonVote [1] Reconfigure [2] Byzantine FT</p>
    <p>Safety Perform</p>
    <p>-ance No</p>
    <p>intervention Fast</p>
    <p>recovery Low</p>
    <p>complexity Availability</p>
    <p>No extra nodes</p>
    <p>NA</p>
    <p>NA</p>
    <p>NA</p>
    <p>[1] Chandra et al., PODC 07 [2] Bolosky et al., NSDI 11</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction Replicated state machines Current approaches to storage faults CTRL: Corruption-tolerant replication</p>
    <p>fault model and guarantees local storage layer distributed recovery</p>
    <p>Evaluation Summary and conclusion</p>
  </div>
  <div class="page">
    <p>CTRL Overview</p>
  </div>
  <div class="page">
    <p>Two components</p>
    <p>CTRL Overview</p>
  </div>
  <div class="page">
    <p>Two components Local storage layer</p>
    <p>Storage Layer</p>
    <p>CTRL Overview</p>
    <p>manage local data; detect faults</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Two components Local storage layer Distributed recovery</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>CTRL Overview</p>
    <p>manage local data; detect faults</p>
    <p>recover from redundant copies</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Two components Local storage layer Distributed recovery</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>CTRL Overview</p>
    <p>manage local data; detect faults</p>
    <p>recover from redundant copies</p>
    <p>M</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Two components Local storage layer Distributed recovery</p>
    <p>Exploit RSM knowledge to correctly and quickly recover faulty data</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>CTRL Overview</p>
    <p>manage local data; detect faults</p>
    <p>recover from redundant copies</p>
    <p>M</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>CTRL Fault Model</p>
  </div>
  <div class="page">
    <p>CTRL Fault Model</p>
    <p>Standard failure assumptions crashes network failures</p>
  </div>
  <div class="page">
    <p>CTRL Fault Model</p>
    <p>Standard failure assumptions crashes network failures</p>
    <p>Augment with storage faults</p>
  </div>
  <div class="page">
    <p>CTRL Fault Model</p>
    <p>Standard failure assumptions crashes network failures</p>
    <p>Augment with storage faults data blocks of log, snapshots, and metainfo can be faulty</p>
    <p>depending on FS, return corrupted data or turn into errors</p>
  </div>
  <div class="page">
    <p>CTRL Fault Model</p>
    <p>Standard failure assumptions crashes network failures</p>
    <p>Augment with storage faults data blocks of log, snapshots, and metainfo can be faulty</p>
    <p>depending on FS, return corrupted data or turn into errors</p>
    <p>FS metadata blocks could also be faulty e.g., inode of a log file corrupted e.g., files/directories implementing the log may go missing e.g., files may appear with fewer or more bytes</p>
  </div>
  <div class="page">
    <p>CTRL Guarantees</p>
  </div>
  <div class="page">
    <p>CTRL Guarantees</p>
    <p>Committed data will never be lost as long as one intact copy of a data item exists correctly remain unavailable when all copies are faulty</p>
  </div>
  <div class="page">
    <p>CTRL Guarantees</p>
    <p>Committed data will never be lost as long as one intact copy of a data item exists correctly remain unavailable when all copies are faulty</p>
    <p>Provide the highest possible availability</p>
  </div>
  <div class="page">
    <p>CTRL Local Storage</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>M</p>
    <p>Distributed Recovery</p>
  </div>
  <div class="page">
    <p>CTRL Local Storage</p>
    <p>Main function: detect and identify whether log/snapshot/metainfo faulty or not? what is corrupted? (e.g., which log entry?)</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>M</p>
    <p>Distributed Recovery</p>
  </div>
  <div class="page">
    <p>CTRL Local Storage</p>
    <p>Main function: detect and identify whether log/snapshot/metainfo faulty or not? what is corrupted? (e.g., which log entry?)</p>
    <p>Requirements low performance overheads low space overheads</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>M</p>
    <p>Distributed Recovery</p>
  </div>
  <div class="page">
    <p>CTRL Local Storage</p>
    <p>Main function: detect and identify whether log/snapshot/metainfo faulty or not? what is corrupted? (e.g., which log entry?)</p>
    <p>Requirements low performance overheads low space overheads</p>
    <p>An interesting problem: disentangling crashes and corruptions in log</p>
    <p>checksum mismatch due to crash or disk corruption?</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>M</p>
    <p>Distributed Recovery</p>
  </div>
  <div class="page">
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append()</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append()</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append()</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append() Crash during append</p>
    <p>recovery: can truncate entry - unacknowledged</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append() Crash during append</p>
    <p>recovery: can truncate entry - unacknowledged</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append() Crash during append</p>
    <p>recovery: can truncate entry - unacknowledged</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append() Crash during append</p>
    <p>recovery: can truncate entry - unacknowledged</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append() Crash during append</p>
    <p>recovery: can truncate entry - unacknowledged</p>
    <p>disk corruption</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append()</p>
    <p>Disk corruption cannot truncate, may lose possibly committed data!</p>
    <p>Crash during append recovery: can truncate entry - unacknowledged</p>
    <p>disk corruption</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append()</p>
    <p>Disk corruption cannot truncate, may lose possibly committed data!</p>
    <p>Crash during append recovery: can truncate entry - unacknowledged</p>
    <p>Current systems conflate the two conditions  always truncate</p>
    <p>disk corruption</p>
    <p>Crash-Corruption Entanglement in the Log</p>
  </div>
  <div class="page">
    <p>append()</p>
    <p>Disk corruption cannot truncate, may lose possibly committed data!</p>
    <p>Crash during append recovery: can truncate entry - unacknowledged</p>
    <p>Current systems conflate the two conditions  always truncate</p>
    <p>disk corruption</p>
    <p>Crash-Corruption Entanglement in the Log</p>
    <p>CTRL: modified local update  write additional information enables disentanglement, performant - more details in the paper</p>
  </div>
  <div class="page">
    <p>Distributed Log Recovery</p>
    <p>CTRL Distributed Recovery</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>Distributed Snapshot Recovery</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Distributed Log Recovery</p>
    <p>CTRL Distributed Recovery</p>
    <p>Storage Layer</p>
    <p>Distributed Recovery</p>
    <p>Distributed Log Recovery</p>
    <p>Distributed Snapshot Recovery</p>
    <p>M Distributed</p>
    <p>Snapshot Recovery</p>
  </div>
  <div class="page">
    <p>Properties of Practical Consensus Protocols</p>
  </div>
  <div class="page">
    <p>Properties of Practical Consensus Protocols</p>
    <p>Leader-based single node acts as leader; all updates flow through the leader</p>
  </div>
  <div class="page">
    <p>Properties of Practical Consensus Protocols</p>
    <p>Leader-based single node acts as leader; all updates flow through the leader</p>
    <p>Epochs a slice of time; only one leader per slice/epoch a log entry is uniquely qualified by its index and epoch</p>
  </div>
  <div class="page">
    <p>Properties of Practical Consensus Protocols</p>
    <p>Leader-based single node acts as leader; all updates flow through the leader</p>
    <p>Epochs a slice of time; only one leader per slice/epoch a log entry is uniquely qualified by its index and epoch</p>
    <p>Leader completeness leader guaranteed to have all committed data</p>
  </div>
  <div class="page">
    <p>Properties of Practical Consensus Protocols</p>
    <p>Leader-based single node acts as leader; all updates flow through the leader</p>
    <p>Epochs a slice of time; only one leader per slice/epoch a log entry is uniquely qualified by its index and epoch</p>
    <p>Leader completeness leader guaranteed to have all committed data</p>
    <p>Applies to Raft, ZAB, and most implementations of Paxos</p>
  </div>
  <div class="page">
    <p>Properties of Practical Consensus Protocols</p>
    <p>Leader-based single node acts as leader; all updates flow through the leader</p>
    <p>Epochs a slice of time; only one leader per slice/epoch a log entry is uniquely qualified by its index and epoch</p>
    <p>Leader completeness leader guaranteed to have all committed data</p>
    <p>Applies to Raft, ZAB, and most implementations of Paxos CTRL exploits these properties to perform recovery</p>
  </div>
  <div class="page">
    <p>Follower Log Recovery</p>
  </div>
  <div class="page">
    <p>Decouple follower and leader recovery</p>
    <p>Follower Log Recovery</p>
  </div>
  <div class="page">
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>Follower Log Recovery</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
    <p>index = 2 epoch = e</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
    <p>index = 2 epoch = e</p>
    <p>A C A B 3 A C 1 B 3 A C</p>
    <p>BL</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
    <p>index = 2 epoch = e</p>
    <p>A C A B 3 A C 1 B 3 A C</p>
    <p>BL</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
    <p>index = 2 epoch = e</p>
    <p>A C A B 3 A C 1 B 3 A C</p>
    <p>BL</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
    <p>index = 2 epoch = e</p>
    <p>A C A B 3 A C 1 B 3 A C</p>
    <p>BL</p>
    <p>B</p>
    <p>A C A B 3 A C 1 B A B C</p>
    <p>BL</p>
  </div>
  <div class="page">
    <p>{ 26</p>
    <p>Decouple follower and leader recovery Fixing followers is simple: can be fixed by leader because the leader is guaranteed to have all committed data!</p>
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Follower Log Recovery</p>
    <p>index = 2 epoch = e</p>
    <p>A C A B 3 A C 1 B 3 A C</p>
    <p>BL</p>
    <p>B</p>
    <p>A C A B 3 A C 1 B A B C</p>
    <p>BL</p>
    <p>A B</p>
    <p>C</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Leader Log Recovery</p>
  </div>
  <div class="page">
    <p>Fixing the leader is the tricky part</p>
    <p>Leader Log Recovery</p>
  </div>
  <div class="page">
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader index = 3 epoch = e</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader index = 3 epoch = e</p>
    <p>A B A B 3 A B C 1 B 3 A 2 C</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader index = 3 epoch = e</p>
    <p>A B A B 3 A B C 1 B 3 A 2 C</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader index = 3 epoch = e</p>
    <p>A B A B 3 A B C 1 B 3 A 2 C</p>
    <p>C A B A B 3 A B C 1 B 3 A 2 C</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>A B C A B 3 A B C 1 B 3 A 2 C</p>
    <p>Fixing the leader is the tricky part First, a simple case: some follower has the entry intact</p>
    <p>Leader Log Recovery</p>
    <p>Leader index = 3 epoch = e</p>
    <p>A B A B 3 A B C 1 B 3 A 2 C</p>
    <p>C A B A B 3 A B C 1 B 3 A 2 C</p>
    <p>C</p>
    <p>CA B</p>
    <p>B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Leader Log Recovery: Determining Commitment</p>
  </div>
  <div class="page">
    <p>However, sometimes cannot easily recover the leaders log</p>
    <p>Leader Log Recovery: Determining Commitment</p>
  </div>
  <div class="page">
    <p>However, sometimes cannot easily recover the leaders log</p>
    <p>A B 3 A B A B A B A B</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>Leader</p>
  </div>
  <div class="page">
    <p>However, sometimes cannot easily recover the leaders log</p>
    <p>A B 3 A B A B A B A B</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>Leader A B 3 A B A B A B A B</p>
    <p>Leader</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>However, sometimes cannot easily recover the leaders log</p>
    <p>A B 3 A B A B A B A B</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>Leader A B 3 A B A B A B A B</p>
    <p>Leader</p>
    <p>C</p>
    <p>Main insight: separate committed from uncommitted entries</p>
  </div>
  <div class="page">
    <p>However, sometimes cannot easily recover the leaders log</p>
    <p>A B 3 A B A B A B A B</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>Leader A B 3 A B A B A B A B</p>
    <p>Leader</p>
    <p>C</p>
    <p>Main insight: separate committed from uncommitted entries must fix committed, while uncommitted can be safely discarded</p>
  </div>
  <div class="page">
    <p>However, sometimes cannot easily recover the leaders log</p>
    <p>A B 3 A B A B A B A B</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>Leader A B 3 A B A B A B A B</p>
    <p>Leader</p>
    <p>C</p>
    <p>Main insight: separate committed from uncommitted entries must fix committed, while uncommitted can be safely discarded discard uncommitted as early as possible for improved availability</p>
  </div>
  <div class="page">
    <p>Leader Log Recovery: Determining Commitment</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry</p>
    <p>Leader Log Recovery: Determining Commitment</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue</p>
    <p>Leader Log Recovery: Determining Commitment</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>discard faulty, continue</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>discard faulty, continue</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>L</p>
    <p>discard faulty, continue</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>either fix log or discard, depending on order</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>either fix log or discard, depending on order</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>either fix log or discard, depending on order</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Leader queries for a faulty entry if majority say they dont have the entry  must be an uncommitted entry  can discard and continue if committed then at least one node in the majority would have the entry  can fix using that response</p>
    <p>Leader Log Recovery: Determining Commitment</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L A B 3 A B A B A B A B</p>
    <p>C</p>
    <p>C</p>
    <p>A B 3 A B A B A B A B</p>
    <p>L</p>
    <p>C L</p>
    <p>discard faulty, continue</p>
    <p>fix using a response (will get at least one correct response</p>
    <p>because it is committed)</p>
    <p>either fix log or discard, depending on order</p>
    <p>both orders safe!</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
    <p>d o</p>
    <p>n t</p>
    <p>h av</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>More In The Paper</p>
  </div>
  <div class="page">
    <p>Log recovery faulty entry on follower unknown to leader nodes could be down during recovery different entries at same log index</p>
    <p>Snapshot recovery Metainfo recovery FS metadata fault handling</p>
    <p>More In The Paper</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction Replicated state machines Current approaches to storage faults CTRL: Corruption-tolerant replication Evaluation Summary and conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>We apply CTRL in two systems LogCabin</p>
    <p>based on Raft</p>
    <p>ZooKeeper based on ZAB</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Example</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Example</p>
    <p>A B C A B C A B C</p>
    <p>D D Dlog</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Example</p>
    <p>A B C A B C A B C</p>
    <p>D D D</p>
    <p>file-system data blocks</p>
    <p>errors</p>
    <p>log</p>
    <p>corruptions</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Example</p>
    <p>A B C A B C A B C</p>
    <p>D D D</p>
    <p>file-system data blocks</p>
    <p>Original corruptions: 30% unsafe or unavailable errors: 50% unavailable</p>
    <p>errors</p>
    <p>log</p>
    <p>corruptions</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Example</p>
    <p>A B C A B C A B C</p>
    <p>D D D</p>
    <p>file-system data blocks</p>
    <p>Original corruptions: 30% unsafe or unavailable errors: 50% unavailable</p>
    <p>CTRL corruptions and errors: always safe and available</p>
    <p>errors</p>
    <p>log</p>
    <p>corruptions</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>FS data blocks</p>
    <p>A B C A B C A B C</p>
    <p>D D DL o g</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C A B C</p>
    <p>D D D A B C</p>
    <p>B C A B C A</p>
    <p>Lo g</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D A B C</p>
    <p>B C A B C A</p>
    <p>Lo g</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>Lo g</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>Lo g</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>Lo g</p>
    <p>Sn ap</p>
    <p>sh o ts</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>A B C</p>
    <p>A B C</p>
    <p>Lo g</p>
    <p>Sn ap</p>
    <p>sh o ts</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>A B C</p>
    <p>A B C</p>
    <p>Lo g</p>
    <p>Sn ap</p>
    <p>sh o ts</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>A B C</p>
    <p>A B C FS M</p>
    <p>et ad</p>
    <p>at a</p>
    <p>Fa ul</p>
    <p>ts</p>
    <p>Lo g</p>
    <p>Sn ap</p>
    <p>sh o ts</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>A B C</p>
    <p>A B C FS M</p>
    <p>et ad</p>
    <p>at a</p>
    <p>Fa ul</p>
    <p>ts</p>
    <p>Un-openable files</p>
    <p>Missing files</p>
    <p>Improper sizes</p>
    <p>Lo g</p>
    <p>Sn ap</p>
    <p>sh o ts</p>
  </div>
  <div class="page">
    <p>Reliability Experiments Summary</p>
    <p>Targeted entriesFS data blocks</p>
    <p>A B C A B C</p>
    <p>Lagging and crashed</p>
    <p>A B C A B C A</p>
    <p>all possible combinations</p>
    <p>(for thoroughness)</p>
    <p>A B C A B C A B C</p>
    <p>D D D AA B C</p>
    <p>B C A B C A</p>
    <p>A B C</p>
    <p>A B C FS M</p>
    <p>et ad</p>
    <p>at a</p>
    <p>Fa ul</p>
    <p>ts</p>
    <p>Un-openable files</p>
    <p>Missing files</p>
    <p>Improper sizes</p>
    <p>Lo g</p>
    <p>Sn ap</p>
    <p>sh o ts A B C</p>
    <p>A B C</p>
    <p>A B C</p>
  </div>
  <div class="page">
    <p>Reliability Results Summary</p>
  </div>
  <div class="page">
    <p>Reliability Results Summary</p>
    <p>Original systems</p>
  </div>
  <div class="page">
    <p>Reliability Results Summary</p>
    <p>Original systems unsafe or unavailable in many cases</p>
  </div>
  <div class="page">
    <p>Reliability Results Summary</p>
    <p>Original systems unsafe or unavailable in many cases</p>
    <p>CTRL versions</p>
  </div>
  <div class="page">
    <p>Reliability Results Summary</p>
    <p>Original systems unsafe or unavailable in many cases</p>
    <p>CTRL versions safe always and highly available</p>
  </div>
  <div class="page">
    <p>Reliability Results Summary</p>
    <p>Original systems unsafe or unavailable in many cases</p>
    <p>CTRL versions safe always and highly available correctly unavailable in some cases (when all copies are faulty)</p>
  </div>
  <div class="page">
    <p>Update Performance (SSD)</p>
  </div>
  <div class="page">
    <p>Update Performance (SSD) Workload: insert entries (1K) repeatedly, background snapshots</p>
  </div>
  <div class="page">
    <p>Update Performance (SSD)</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>LogCabin ZooKeeper</p>
    <p>Workload: insert entries (1K) repeatedly, background snapshots</p>
  </div>
  <div class="page">
    <p>Update Performance (SSD)</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>LogCabin ZooKeeper</p>
    <p>Workload: insert entries (1K) repeatedly, background snapshots</p>
  </div>
  <div class="page">
    <p>Update Performance (SSD)</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>LogCabin ZooKeeper</p>
    <p>Workload: insert entries (1K) repeatedly, background snapshots</p>
  </div>
  <div class="page">
    <p>Overheads (because CTRLs storage layer writes additional information for each log entry)  however, little: SSDs 4% worst case, disks: 8% to10%</p>
    <p>Update Performance (SSD)</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>LogCabin ZooKeeper</p>
    <p>Workload: insert entries (1K) repeatedly, background snapshots</p>
  </div>
  <div class="page">
    <p>Overheads (because CTRLs storage layer writes additional information for each log entry)  however, little: SSDs 4% worst case, disks: 8% to10% Note: all writes, so worst-case overheads</p>
    <p>Update Performance (SSD)</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(o</p>
    <p>ps /s</p>
    <p>)</p>
    <p># Clients</p>
    <p>Original CTRL</p>
    <p>LogCabin ZooKeeper</p>
    <p>Workload: insert entries (1K) repeatedly, background snapshots</p>
  </div>
  <div class="page">
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Recovering from storage faults correctly in a distributed system is surprisingly tricky</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Recovering from storage faults correctly in a distributed system is surprisingly tricky Most existing recovery approaches are protocol-oblivious  they cause unsafety and low availability</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Recovering from storage faults correctly in a distributed system is surprisingly tricky Most existing recovery approaches are protocol-oblivious  they cause unsafety and low availability To correctly and quickly recover, an approach needs to be protocol-aware</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Recovering from storage faults correctly in a distributed system is surprisingly tricky Most existing recovery approaches are protocol-oblivious  they cause unsafety and low availability To correctly and quickly recover, an approach needs to be protocol-aware CTRL: a protocol-aware recovery approach for RSM</p>
    <p>guarantees safety and provides high availability, with little performance overhead</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Obvious things we take for granted in distributed systems: redundant copies will help recover bad data or redundancy  reliability are surprisingly hard to achieve [1]</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Obvious things we take for granted in distributed systems: redundant copies will help recover bad data or redundancy  reliability are surprisingly hard to achieve [1] Protocol-awareness is key to use redundancy correctly to recover bad data</p>
    <p>need to be aware of whats going on underneath in the system</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Obvious things we take for granted in distributed systems: redundant copies will help recover bad data or redundancy  reliability are surprisingly hard to achieve [1] Protocol-awareness is key to use redundancy correctly to recover bad data</p>
    <p>need to be aware of whats going on underneath in the system</p>
    <p>However, only a first step: we have applied PAR only to RSM other classes of systems (e.g., quorum-based systems) remain vulnerable</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Obvious things we take for granted in distributed systems: redundant copies will help recover bad data or redundancy  reliability are surprisingly hard to achieve [1] Protocol-awareness is key to use redundancy correctly to recover bad data</p>
    <p>need to be aware of whats going on underneath in the system</p>
    <p>However, only a first step: we have applied PAR only to RSM other classes of systems (e.g., quorum-based systems) remain vulnerable</p>
    <p>http://research.cs.wisc.edu/adsl/Publications/par/</p>
  </div>
</Presentation>
