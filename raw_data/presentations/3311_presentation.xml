<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>OblivP2P: An Oblivious Peer-toPeer Content Sharing System</p>
    <p>Yaoqi Jia, Tarik Moataz, Shruti Tople and Prateek Saxena</p>
    <p>National University of Singapore</p>
  </div>
  <div class="page">
    <p>Traffic Analysis in P2P Systems</p>
    <p>P2P content sharing systems  150 million users/month  3.35% of all world bandwidth</p>
    <p>Long term global traffic analysis  E.g., ISPs, Global BitTorrent Monitor, Bitstalker</p>
  </div>
  <div class="page">
    <p>What can an Adversary do?</p>
    <p>Leakage Channels  Plaintext data  Secure channel</p>
    <p>Length  Padding</p>
    <p>Time  Fixed Interval</p>
    <p>Access Patterns</p>
    <p>Assume existing defenses</p>
    <p>Linkability</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Current Solutions  Anonymous Systems e.g., Mix Networks, Tor</p>
    <p>Is anonymizing enough? Adversary</p>
    <p>Hide Online Identity</p>
    <p>Unlinkability</p>
    <p>Long term Global</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Guarantee unlinkability  Obliviousness in P2P systems</p>
    <p>OblivP2P Protocol</p>
    <p>Link: https://github.com/jiayaoqijia/OblivP2PCode</p>
    <p>Implementation</p>
    <p>No Centralized Bottleneck  Linear Scalability with peers Evaluation</p>
  </div>
  <div class="page">
    <p>Problem</p>
  </div>
  <div class="page">
    <p>Insufficiency of Existing Solutions</p>
    <p>Mixnet Round 1</p>
    <p>Mixnet Round 2</p>
    <p>Intersection, Hitting Set [AK03] or Statistical Disclosure Attacks [KP04] 7</p>
  </div>
  <div class="page">
    <p>Main Insight: Oblivious Access Pattern</p>
    <p>Oblivious RAM  Hide access patterns between CPU and memory  Data is shuffled in the memory periodically</p>
    <p>Applied to:  Cloud Storage [SS13A], [SS13B],[LO13]  Filesystem [WST12]</p>
    <p>Can we directly apply ORAM to P2P systems? 8</p>
  </div>
  <div class="page">
    <p>Problem Definition</p>
    <p>Trusted Tracker</p>
  </div>
  <div class="page">
    <p>ORAM Background</p>
    <p>Tree-Based ORAM (Path ORAM)  Read  Fetches a path from the tree containing the block  Stores the path in the local storage (stash)</p>
    <p>Write  Selects a random path in the tree  Shuffles the blocks in the stash and the path</p>
  </div>
  <div class="page">
    <p>Mapping ORAM to P2P Trusted Client</p>
    <p>Untrusted Server</p>
    <p>Position Map, Stash</p>
    <p>pat h</p>
    <p>Trusted Tracker Position Map, Stash</p>
    <p>Peer-to-Peer Network</p>
    <p>OblivP2P-0 Protocol</p>
    <p>Initiator Fetch path</p>
    <p>Decrypt Request</p>
    <p>Fetch a path</p>
    <p>Re-encrypt</p>
    <p>Decrypt</p>
    <p>Send 2</p>
  </div>
  <div class="page">
    <p>OblivP2P-0: Tracker as bottleneck</p>
    <p>Tracker fetches O(log N) blocks per access 118 MB /req for 2 million users  Max Bandwidth</p>
    <p>Need a Distributed Oblivious P2P Protocol 12</p>
  </div>
  <div class="page">
    <p>OblivP2P-1 Protocol</p>
  </div>
  <div class="page">
    <p>Nave approach: Removing Bottleneck</p>
    <p>Trusted Tracker Position Map, Stash</p>
    <p>Initiator Request</p>
    <p>Send &lt; path, position, key &gt;</p>
    <p>Peer-to-Peer Network</p>
    <p>Fetch a path</p>
    <p>Performance</p>
    <p>Security</p>
  </div>
  <div class="page">
    <p>Challenges  ORAM writes  Recently accessed block at the root  Less frequently accessed block at the leaves</p>
    <p>Block History  Shared resources</p>
    <p>Security flaw in P2P systems  Multiple users access the same resource</p>
    <p>frequently accessed</p>
    <p>Recently accessed</p>
  </div>
  <div class="page">
    <p>New Primitive: Oblivious Selection</p>
    <p>Selects a block without :</p>
    <p>Block Position Cryptographic Key</p>
    <p>No Centralized Bottleneck</p>
  </div>
  <div class="page">
    <p>Construction  Step 1: PIR over ORAM  Obliviously select a block from a path</p>
    <p>Trusted Tracker</p>
    <p>Initiator</p>
    <p>Request</p>
    <p>Compute an Encrypted Share using PIR</p>
    <p>Send PIR metadata</p>
    <p>Block Position 17 No Centralized Bottleneck</p>
    <p>Cryptographic Key</p>
  </div>
  <div class="page">
    <p>Construction</p>
    <p>Trusted Tracker</p>
    <p>Initiator</p>
    <p>Compute a Decrypted Share using SH-PRG</p>
    <p>Send key share</p>
    <p>Dec Block</p>
    <p>Step 2: Seed-Homomorphic PRG  Decrypt shares without giving away the key</p>
    <p>Cryptographic KeyCryptographic Key</p>
  </div>
  <div class="page">
    <p>Security</p>
  </div>
  <div class="page">
    <p>OblivP2P is an Oblivious P2P Protocol</p>
    <p>Any two equal length access sequences by two peers are indistinguishable for any p.p.t. honest</p>
    <p>but-curious adversary</p>
    <p>Number of dishonest peers is in O(N), where &lt;1</p>
    <p>Theorem: If N &gt; 1, and  &lt; 1, m &gt; 1 such that 2logNm(1)  negl() then OBLIVP2P-1 is an oblivious P2P protocol</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>15 DeterLab servers  (214)16000 peers</p>
    <p>Each server shares a bandwidth of 128 MBps</p>
    <p>Block size of 512 KB similar to BitTorrent</p>
  </div>
  <div class="page">
    <p>No Centralized Bottleneck</p>
    <p>~ 1 MB /req</p>
    <p>~ 128 MB /req</p>
  </div>
  <div class="page">
    <p>Linear Scalability with Peers</p>
    <p>Larger networks can scale up performance  3.59 MB/s is due to our limited test infrastructure</p>
    <p>Bottleneck remaining is purely computational</p>
  </div>
  <div class="page">
    <p>Take Away!</p>
    <p>Propose hiding data access patterns in P2P systems</p>
    <p>OblivP2P - First work to repurpose ORAM in Peer-to-Peer systems</p>
    <p>OblivP2P is linearly scalable and highly parallelizable with the peers in the network</p>
  </div>
  <div class="page">
    <p>Thanks! Email : shruti90@comp.nus.edu.sg</p>
    <p>Link: https://github.com/jiayaoqijia/OblivP2P-Code</p>
  </div>
</Presentation>
