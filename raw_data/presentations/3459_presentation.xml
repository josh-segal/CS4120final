<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Robust and Efficient Reputation System</p>
    <p>for Active Peer-to-Peer Systems</p>
    <p>Dominik Grolimund, Luzius Meisser, Stefan Schmid, Roger Wattenhofer</p>
    <p>Computer Engineering and Networks Laboratory (TIK), ETH Zurich</p>
    <p>NetEcon06</p>
    <p>June 10, Ann Arbor, Michigan, USA</p>
    <p>Havelaar</p>
    <p>Distributed Computing</p>
    <p>Group</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Environment  Existing Solutions  Principles of Havelaar  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Do You Know YouTube?</p>
    <p>Very popular online video platform  &gt; 30 mio. users, growing rapidly  &gt;&gt; 1 mio. watched every day  &gt;&gt; 10,000 uploaded every day</p>
    <p>very active!</p>
  </div>
  <div class="page">
    <p>Guess What: YouTube is Centralized</p>
    <p>Hosted on servers</p>
    <p>Simple, but: huge costs  1 mio. $ / month for</p>
    <p>bandwidth and storage</p>
    <p>Low quality</p>
    <p>Limited (10-minute clips)</p>
  </div>
  <div class="page">
    <p>Imagine YouTube Being Decentralized</p>
    <p>Files stored in a distributed storage system</p>
    <p>Resources provided by the users  Uncontrollable environment:</p>
    <p>unreliable, ordinary desktop computers  private users  turn computer on and off at any time  can leave the system forever at any time  open, attracts malicious agents, attacks  rational agents, free-riders</p>
  </div>
  <div class="page">
    <p>Three Key Problems</p>
  </div>
  <div class="page">
    <p>Kangoo  A Distributed Storage System</p>
    <p>Research at ETH Zurich  Availability achieved with redundancy:</p>
    <p>A file is divided into ~100 blocks, which are then encrypted and encoded into ~500 redundant fragments using erasure codes</p>
    <p>Any 100 are sufficient to reconstruct the file  Lots of transactions necessary!  Usage of YouTube would result in tens of thousands of</p>
    <p>transactions per peer and week</p>
    <p>Not ready yet, but you can subscribe for the beta: www.caleido.com/kangoo</p>
  </div>
  <div class="page">
    <p>This Talk: Havelaar</p>
    <p>How to encourage peers to provide their upload bandwidth? (storage and online time are handled by Kangoo itself)</p>
    <p>Havelaar is independent of Kangoo</p>
    <p>can be used for other systems as well.</p>
    <p>Robust to attacks  Efficient, scalable in the number of transactions</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Environment  Existing Solutions  Principles of Havelaar  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Direct reciprocity (e.g. BitTorrent)  Tit-for-tat, iterated prisoner dilemma  Works for content distribution, but not for a system where</p>
    <p>interactions are too infrequent</p>
    <p>Monetary-based (e.g. Karma)  Economic theory  But: centralized or else inefficient, market regulations, ...</p>
    <p>Reputation systems (e.g. eBay)  Service differentiation: The higher your reputation, the better</p>
    <p>your service  Good, but how...</p>
  </div>
  <div class="page">
    <p>Reputation Systems</p>
    <p>How to keep track of the contribution of each peer?</p>
    <p>Client (e.g. Kazaa)  Simple to subvert, as it has been shown with Kazaa Lite</p>
    <p>Centralized (e.g. eBay)  Many many more transactions if used for fairness in a p2p</p>
    <p>system  server cluster would be needed</p>
    <p>Decentralized  Good, but how...</p>
  </div>
  <div class="page">
    <p>Decentralized Reputation Systems</p>
    <p>Direct observations do not scale to large networks with infrequent interactions</p>
    <p>We need to incorporate second-hand observations</p>
    <p>Big new problem: false reports</p>
  </div>
  <div class="page">
    <p>Coping with False Reports</p>
    <p>How to defend against false reports?</p>
    <p>Max-flow  Maximum likelihood estimation  Bayesian approach  Transitivity of trust</p>
    <p>weigh the voting by the reputation of the sender</p>
    <p>Most systems are designed for a decentralized pure reputation system (e.g. eBay), but not meant for a fairness system where we need to track the contribution of each peer with lots of transactons</p>
  </div>
  <div class="page">
    <p>Storing Contribution Values</p>
    <p>Where to store the contribution value of each peer?</p>
    <p>Flood in the system (e.g. EigenRep)  Request from peers before transaction  Store in a DHT: DHT-based approach</p>
    <p>store and update contribution value of peer u at h(u) in a DHT</p>
    <p>Scales linearly in the number of transactions</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Environment  Existing Solutions  Principles of Havelaar  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Introducing Havelaar</p>
    <p>Approximation is good enough!  If peer u provides three times more than v, u should get</p>
    <p>about three times a better download bandwidth than v  Track contribution value C: bandwidth b, size s</p>
    <p>If locally computed contribution value is close to the global / real one for all peers, thats fine</p>
  </div>
  <div class="page">
    <p>Local Vector</p>
    <p>Every peer has a local observation vector o  After u downloads from v (bandwidth of 5, size 3), u</p>
    <p>will increase the entry of v by 5 * 3 (Cv += 15)</p>
    <p>Only after complete transaction</p>
  </div>
  <div class="page">
    <p>Send Local Vector To Successors</p>
    <p>h1(w)</p>
    <p>h2(w)</p>
    <p>h3(w) h4(w)</p>
    <p>observation vector o</p>
    <p>o</p>
    <p>o</p>
    <p>o o</p>
    <p>w</p>
    <p>once a round (~ week)</p>
    <p>k successors: determined by hash functions on the sender id w</p>
    <p>same successors in every round</p>
    <p>can only send to its k successors  limited influence</p>
    <p>can only send once per round</p>
    <p>self-observation of the sender is dropped  cannot praise itself</p>
    <p>defend against attacks:</p>
  </div>
  <div class="page">
    <p>Aggregation: Need More Observations</p>
    <p>Need more observations for an accurate approximation</p>
    <p>Aggregate exponentially more:</p>
    <p>o0</p>
    <p>use all for contribution update c</p>
    <p>O</p>
    <p>O</p>
    <p>O</p>
    <p>= [o0,o1+o1+o1,o2+o2+o2][o1,o2,o3]</p>
    <p>[o1,o2,o3]</p>
    <p>[o1,o2,o3]</p>
    <p>own observations</p>
    <p>o3 dropped</p>
    <p>defend against attacks:</p>
    <p>for each entry, outliers are detected and dropped</p>
    <p>praise or accusation within bounds will be smoothed out (lots of observations aggregated)</p>
    <p>distribution of a vector can be analyzed  if spiked, then it is most likely an attack  drop, maybe even decrease the trust value of that peer</p>
  </div>
  <div class="page">
    <p>Rewarding</p>
    <p>Always allocate full bandwidth</p>
    <p>No artificial limits</p>
    <p>Contention: Two or more want to download from a third node at the same time</p>
    <p>allocate according to the contribution values</p>
    <p>Different resource allocation algorithms possible. We chose an algorithm similar to: An Incentive Mechanism for P2P Networks, R. B. Ma et al., ICDS 2004</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Environment  Existing Solutions  Principles of Havelaar  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>bootstrapping</p>
    <p>We have analyzed and simulated Havelaar  5 successors and a matrix with four vectors is already</p>
    <p>enough for huge networks with more than 100,000 nodes and 5,000 transactions per peer and round.</p>
  </div>
  <div class="page">
    <p>Communication Costs</p>
    <p>Need to send a huge matrix, but: it does not depend on the number of transactions!</p>
    <p>The more transactions, the higher the accuracy!</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Environment  Existing Solutions  Principles of Havelaar  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Havelaar for active, long-term peer-to-peer systems  Robust against attacks, false reports  Low communication costs: scalable in the number of</p>
    <p>transactions  Churn: not an issue because the local vector can be</p>
    <p>sent at any time in a round</p>
    <p>Kangoo takes care about other attacks (sybil attacks, white washing) and has strong identifiers</p>
  </div>
  <div class="page">
    <p>Thank you for your attention!</p>
  </div>
</Presentation>
