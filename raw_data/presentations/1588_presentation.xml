<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Robust File System Checkers</p>
    <p>Om Rameshwar Gatla, Muhammad Hameed , Mai Zheng</p>
    <p>Viacheslav Dubeyko, Adam Manzanares, Filip Blagojevic, Cyril Guyot, Robert Mateescu</p>
    <p>New Mexico State University Western Digital Research</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Recovery procedure was interrupted  Severe data loss reported</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Recovery procedure was interrupted  Severe data loss reported</p>
    <p>Lustres backend ldiskfs is a variant of EXT4  Lustre File system checker (lfsck) relies on EXT4 checker</p>
    <p>(e2fsck)  Overall recovery is complicated (several days to fix)</p>
  </div>
  <div class="page">
    <p>Research questions:  Are existing checkers resilient to faults?  How to build a robust checker?</p>
  </div>
  <div class="page">
    <p>Motivation  Background &amp; Related Work  Are existing checkers resilient to faults?  How to build robust checkers?  Evaluation  Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Background &amp; Related Work</p>
    <p>File systems are designed to organize data and maintain data integrity</p>
  </div>
  <div class="page">
    <p>Background &amp; Related Work</p>
    <p>File systems are designed to organize data and maintain data integrity</p>
    <p>File systems may become corrupt despite various protection techniques - E.g.: journaling , soft updates, copy-on-write, etc.</p>
  </div>
  <div class="page">
    <p>Background &amp; Related Work</p>
    <p>File systems may become corrupt despite various protection techniques - E.g.: journaling , soft updates, copy-on-write, etc.</p>
    <p>File system checkers (fsck) recover a corrupted file system back to a consistent state</p>
    <p>- E.g.: e2fsck, xfs-repair, etc. - Some existing checkers exhibit logging mechanism:</p>
    <p>File System Checker Logging Support EXT 2/3/4 e2fsck Yes</p>
    <p>XFS xfs_repair No F2FS fsck.f2fs No</p>
    <p>BTRFS btrfsck No</p>
    <p>File systems are designed to organize data and maintain data integrity</p>
  </div>
  <div class="page">
    <p>Background &amp; Related Work Existing work for improving checkers E.g.: ffsck[@FAST13], SWIFT[@EUROSYS12], SQCK[@OSDI08]</p>
  </div>
  <div class="page">
    <p>Background &amp; Related Work Existing work for improving checkers E.g.: ffsck[@FAST13], SWIFT[@EUROSYS12], SQCK[@OSDI08]</p>
    <p>Do not address one fundamental issue: Resilience in face of interruption</p>
  </div>
  <div class="page">
    <p>Background &amp; Related Work Existing work for improving checkers E.g.: ffsck[@FAST13], SWIFT[@EUROSYS12], SQCK[@OSDI08]</p>
    <p>Demonstrate that an interrupted checking could leave the file system in an uncorrectable state</p>
    <p>One general solution to this issue</p>
    <p>Do not address one fundamental issue: Resilience in face of interruption</p>
    <p>Our Efforts:</p>
  </div>
  <div class="page">
    <p>Motivation  Background &amp; Related Work  Are existing checkers resilient to faults?  How to build robust checkers?  Evaluation  Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Are existing checkers resilient to faults?</p>
    <p>A testing framework to interrupt checker</p>
    <p>Two components:</p>
  </div>
  <div class="page">
    <p>Are existing checkers resilient to faults?</p>
    <p>Component 1: Corrupted images to trigger checker</p>
    <p>A testing framework to interrupt checker</p>
    <p>Two components:</p>
  </div>
  <div class="page">
    <p>Are existing checkers resilient to faults?</p>
    <p>Component 2: Fault injection engine</p>
    <p>Component 1: Corrupted images to trigger checker</p>
    <p>A testing framework to interrupt checker</p>
    <p>Two components:</p>
  </div>
  <div class="page">
    <p>Component 1: Corrupted images Two methods to generate corrupted images:</p>
  </div>
  <div class="page">
    <p>Two methods to generate corrupted images:</p>
    <p>Method 1: Collect test images provided by developers - E.g.: test images in e2fsprogs - Corruptions envisioned by developers - Convenient</p>
    <p>Component 1: Corrupted images</p>
  </div>
  <div class="page">
    <p>Two methods to generate corrupted images:</p>
    <p>Method 1: Collect test images provided by developers - E.g.: test images in e2fsprogs - Corruptions envisioned by developers - Convenient</p>
    <p>Method 2: Corrupt metadata using file system debug tools - E.g.: debugfs, xfs_db, etc. - Cover more scenarios - Flexible</p>
    <p>Component 1: Corrupted images</p>
  </div>
  <div class="page">
    <p>Component 2: Fault Injection Engine</p>
    <p>Build a fault injection engine rfsck-test using iSCSI driver</p>
  </div>
  <div class="page">
    <p>Build a fault injection engine rfsck-test using iSCSI driver</p>
    <p>Two modes of operation: 1. Basic mode</p>
    <p>Single iSCSI drive for one test image</p>
    <p>Component 2: Fault Injection Engine</p>
  </div>
  <div class="page">
    <p>Two modes of operation: 1. Basic mode</p>
    <p>Single iSCSI drive for one test image</p>
    <p>For checkers without logging</p>
    <p>For checkers with logging</p>
    <p>Build a fault injection engine rfsck-test using iSCSI driver</p>
    <p>Component 2: Fault Injection Engine</p>
  </div>
  <div class="page">
    <p>Replay</p>
    <p>Record</p>
    <p>fsck rfsck-test</p>
    <p>(basic mode)</p>
    <p>test image</p>
    <p>Basic Mode</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>Replay 1 2</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>fsck</p>
    <p>I/O Commands</p>
    <p>Basic Mode</p>
    <p>rfsck-test (basic mode)</p>
    <p>Fault Injection Engine: rfsck-test</p>
    <p>I/O blocks (block size is determined by fault injection granularity</p>
    <p>E.g.: 512 B or 4 KB)</p>
    <p>test image</p>
  </div>
  <div class="page">
    <p>Replay 1 2</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>Basic Mode</p>
    <p>rfsck-test (basic mode)fsck</p>
    <p>I/O blocks (block size is determined by fault injection granularity</p>
    <p>E.g.: 512 B or 4 KB)</p>
    <p>test image</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>Replay</p>
    <p>I/O Block Trace</p>
    <p>Record I/O blocks</p>
    <p>(block size is determined by fault injection granularity</p>
    <p>E.g.: 512 B or 4 KB) 1 2</p>
    <p>Basic Mode</p>
    <p>rfsck-test (basic mode)fsck</p>
    <p>test image</p>
    <p>Fault Injection Engine: rfsck-test</p>
    <p>Replay a prefix of blocks</p>
  </div>
  <div class="page">
    <p>Replay</p>
    <p>Record</p>
    <p>Advanced Mode</p>
    <p>fsck</p>
    <p>test image</p>
    <p>log</p>
    <p>rfsck-test (advanced mode)</p>
    <p>test image</p>
    <p>log 10</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>Replay 1 2</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>Advanced Mode</p>
    <p>fsck</p>
    <p>test image</p>
    <p>log</p>
    <p>I/O Commands</p>
    <p>rfsck-test (advanced mode)</p>
    <p>test image</p>
    <p>log 10</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>Replay 1 2</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>Advanced Mode</p>
    <p>fsck</p>
    <p>test image</p>
    <p>log</p>
    <p>rfsck-test (advanced mode)</p>
    <p>test image</p>
    <p>log 10</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>Replay 1 2</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>Advanced Mode</p>
    <p>fsck</p>
    <p>test image</p>
    <p>log</p>
    <p>rfsck-test (advanced mode)</p>
    <p>test image</p>
    <p>log</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>Replay 1 2</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>Advanced Mode</p>
    <p>fsck</p>
    <p>test image</p>
    <p>log</p>
    <p>rfsck-test (advanced mode)</p>
    <p>test image</p>
    <p>log</p>
    <p>Fault Injection Engine: rfsck-test</p>
  </div>
  <div class="page">
    <p>test image</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(1) copy</p>
    <p>test image</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck (1) copy</p>
    <p>test image</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(3) reference image</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record</p>
    <p>I/O commands</p>
    <p>(3) reference image</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record</p>
    <p>I/O commands</p>
    <p>(3) reference image</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
    <p>Exhaust all possible fault points during one execution of checker 1 test image many interrupted images</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>rfsck-test (basic mode)</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O commands</p>
    <p>partial commands</p>
    <p>rfsck-test (basic mode)</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test image</p>
    <p>Overall Workflow</p>
  </div>
  <div class="page">
    <p>Testing existing checkers</p>
  </div>
  <div class="page">
    <p>Testing existing checkers</p>
    <p>Overall, 4 types of corruptions observed:</p>
  </div>
  <div class="page">
    <p>Overall, 4 types of corruptions observed:</p>
    <p>Un-mountable</p>
    <p>Testing existing checkers</p>
  </div>
  <div class="page">
    <p>Un-mountable File Content Corruption</p>
    <p>Testing existing checkers</p>
    <p>Overall, 4 types of corruptions observed:</p>
  </div>
  <div class="page">
    <p>Un-mountable File Content Corruption</p>
    <p>Misplacement of Files</p>
    <p>Testing existing checkers</p>
    <p>Overall, 4 types of corruptions observed:</p>
  </div>
  <div class="page">
    <p>Un-mountable File Content Corruption</p>
    <p>Misplacement of Files</p>
    <p>Others</p>
    <p>Testing existing checkers</p>
    <p>Overall, 4 types of corruptions observed:</p>
  </div>
  <div class="page">
    <p>Un-mountable File Content Corruption</p>
    <p>Misplacement of Files</p>
    <p>Others</p>
    <p>Cannot be fixed by another run of fsck 12</p>
    <p>Testing existing checkers</p>
    <p>Overall, 4 types of corruptions observed:</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck</p>
    <p>Used 175 test images from e2fsprogs</p>
    <p>Block size of all images is 1KB</p>
    <p>Fault injected at two granularities: 512B and 4KB</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck (2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>partial commands</p>
    <p>I/O commands</p>
    <p>(1) copy</p>
    <p>(5) copy</p>
    <p>(3) reference image</p>
    <p>rfsck-test (7) interrupted image(s) (9) repaired image(s)</p>
    <p>RECAP</p>
  </div>
  <div class="page">
    <p>Fault injection granularity</p>
    <p># of EXT4 test images</p>
    <p># of repaired images generated</p>
    <p># of images reporting corruption</p>
    <p>test images repaired images</p>
    <p>Table 1: Number of test images and repaired images reporting corruption</p>
    <p>Case Study: e2fsck (2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>partial commands</p>
    <p>I/O commands</p>
    <p>(1) copy</p>
    <p>(5) copy</p>
    <p>(3) reference image</p>
    <p>rfsck-test (7) interrupted image(s) (9) repaired image(s)</p>
    <p>RECAP</p>
  </div>
  <div class="page">
    <p>Fault injection granularity</p>
    <p># of EXT4 test images</p>
    <p># of repaired images generated</p>
    <p># of images reporting corruption</p>
    <p>test images repaired images</p>
    <p>Table 1: Number of test images and repaired images reporting corruption</p>
    <p>Case Study: e2fsck (2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>partial commands</p>
    <p>I/O commands</p>
    <p>(1) copy</p>
    <p>(5) copy</p>
    <p>(3) reference image</p>
    <p>rfsck-test (7) interrupted image(s) (9) repaired image(s)</p>
    <p>RECAP</p>
  </div>
  <div class="page">
    <p>Fault injection granularity</p>
    <p># of EXT4 test images</p>
    <p># of repaired images generated</p>
    <p># of images reporting corruption</p>
    <p>test images repaired images</p>
    <p>Table 1: Number of test images and repaired images reporting corruption</p>
    <p>Case Study: e2fsck (2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>partial commands</p>
    <p>I/O commands</p>
    <p>(1) copy</p>
    <p>(5) copy</p>
    <p>(3) reference image</p>
    <p>rfsck-test (7) interrupted image(s) (9) repaired image(s)</p>
    <p>RECAP</p>
  </div>
  <div class="page">
    <p>Fault injection granularity</p>
    <p># of EXT4 test images</p>
    <p># of repaired images generated</p>
    <p># of images reporting corruption</p>
    <p>test images repaired images</p>
    <p>Table 1: Number of test images and repaired images reporting corruption</p>
    <p>Case Study: e2fsck (2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>partial commands</p>
    <p>I/O commands</p>
    <p>(1) copy</p>
    <p>(5) copy</p>
    <p>(3) reference image</p>
    <p>rfsck-test (7) interrupted image(s) (9) repaired image(s)</p>
    <p>RECAP</p>
  </div>
  <div class="page">
    <p>Corruption type test images repaired images</p>
    <p>data corruption 9 5 107 10</p>
    <p>misplacement 9 11 82 23 others 1 1 10 1</p>
    <p>Table 2: Classification of corruptions observed on test and repaired images</p>
    <p>Case Study: e2fsck</p>
  </div>
  <div class="page">
    <p>Corruption type test images repaired images</p>
    <p>data corruption 9 5 107 10</p>
    <p>misplacement 9 11 82 23 others 1 1 10 1</p>
    <p>Table 2: Classification of corruptions observed on test and repaired images</p>
    <p>Case Study: e2fsck</p>
    <p>Smaller fault injection granularity, more corruption scenarios</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck-undo</p>
    <p>Undo log feature in e2fsprogs utilities E.g.: e2fsck, debugfs, mke2fs, etc.</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck-undo</p>
    <p>Undo log feature in e2fsprogs utilities E.g.: e2fsck, debugfs, mke2fs, etc.</p>
    <p>Records data block that is being updated into a log - undo the changes made (if necessary)</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck-undo</p>
    <p>Update from e2fsck</p>
    <p>Undo LogBlock device</p>
    <p>Undo log feature in e2fsprogs utilities E.g.: e2fsck, debugfs, mke2fs, etc.</p>
    <p>Records data block that is being updated into a log - undo the changes made (if necessary)</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck-undo</p>
    <p>Update from e2fsck</p>
    <p>Undo LogBlock device</p>
    <p>Undo log feature in e2fsprogs utilities E.g.: e2fsck, debugfs, mke2fs, etc.</p>
    <p>Records data block that is being updated into a log - undo the changes made (if necessary)</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck-undo Undo log feature in e2fsprogs utilities E.g.: e2fsck, debugfs, mke2fs, etc.</p>
    <p>Records data block that is being updated into a log - undo the changes made (if necessary)</p>
    <p>Undo LogBlock device</p>
  </div>
  <div class="page">
    <p>Case Study: e2fsck-undo</p>
    <p>Fault Injection Granularities</p>
    <p>Number of images reporting corruption e2fsck e2fsck-undo</p>
    <p>Table 3: Number of test images reporting corruption under e2fsck and e2fsck-undo</p>
    <p>Undo log fails</p>
  </div>
  <div class="page">
    <p>Motivation  Background &amp; Related Work  Research Question  Are existing checkers resilient to faults?  How to build robust checkers?  Evaluation  Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>Undo log is a Write-ahead log (WAL)</p>
    <p>In WAL, it is expected that the log block reaches persistent storage before the updated blocks reaches its storage</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail? Undo log is a Write-ahead log (WAL)</p>
    <p>In WAL, it is expected that the log block reaches persistent storage before the updated blocks reaches its storage</p>
    <p>Undo log does not enforce such ordering</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>log</p>
    <p>fs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>log</p>
    <p>fs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>log</p>
    <p>fs img</p>
    <p>undo block 2</p>
    <p>repair block 1</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>undo block 2</p>
    <p>repair block 2</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>log</p>
    <p>fs img</p>
    <p>undo block 2</p>
    <p>repair block 1</p>
    <p>undo block 3</p>
    <p>repair block 2</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>undo block 2</p>
    <p>repair block 2</p>
    <p>undo block 3</p>
    <p>repair block 3</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>undo block 3</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>repair block 2</p>
    <p>repair block 3</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>undo block 3</p>
    <p>log</p>
    <p>fs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Why does e2fsck-undo Fail?</p>
    <p>time</p>
    <p>logfs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>No ordering guarantee</p>
  </div>
  <div class="page">
    <p>Robust File System Checker</p>
    <p>One simple fix: e2fsck-patch</p>
    <p>Enforce synchronous I/O to the log device</p>
    <p>Add O_SYNC flag while opening the log device</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>fs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>One simple fix: e2fsck-patch</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>logfs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>undo block 1</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>repair block 2</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>undo block 3</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>repair block 2</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>undo block 3</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>repair block 2</p>
    <p>repair block 3</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>repair block 2</p>
    <p>repair block 3</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>log</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>logfs img</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>Drawbacks of this approach: 1. Extensive synchronization incurs severe</p>
    <p>performance overhead 2. Only works with e2fsck</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>Drawbacks of this approach: 1. Extensive synchronization incurs severe</p>
    <p>performance overhead 2. Only works with e2fsck</p>
    <p>Can we design a generalized logging library with low performance overhead?</p>
    <p>One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>Robust File System Checker Observe similarities among different checkers:</p>
  </div>
  <div class="page">
    <p>Robust File System Checker Observe similarities among different checkers:</p>
  </div>
  <div class="page">
    <p>Robust File System Checker Observe similarities among different checkers:</p>
    <p>Fine-grained logging with safe transactions</p>
  </div>
  <div class="page">
    <p>General Logging Library: rfsck-lib Design a general redo log library rfsck-lib</p>
    <p>- Log format extended from undo log in e2fsck</p>
  </div>
  <div class="page">
    <p>Design a general redo log library rfsck-lib - Log format extended from undo log in e2fsck</p>
    <p>Fine-grained logging using safe transactions - Maintain atomicity of relevant writes</p>
    <p>Multiple ways to integrate with tradeoff: - Mark all repairs as one transaction - Mark repairs of each pass as one transaction - Mark repairs for each consistency rule as one transaction</p>
    <p>General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo header</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>a fixed-sized index block</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>a fixed-sized index block</p>
    <p>txn begin</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>redo blk1</p>
    <p>a fixed-sized index block</p>
    <p>txn begin</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>redo blk1 redoblk2</p>
    <p>a fixed-sized index block</p>
    <p>txn begin</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>redo blk1 redoblk2</p>
    <p>a fixed-sized index block</p>
    <p>txn begin txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>redo blk1 redoblk2</p>
    <p>a fixed-sized index block</p>
    <p>txn begin txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>in de</p>
    <p>x4</p>
    <p>redo blk1 redoblk2</p>
    <p>a fixed-sized index block</p>
    <p>txn begin txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo block 3</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>in de</p>
    <p>x4</p>
    <p>in de</p>
    <p>x5</p>
    <p>redo blk1 redoblk2 redo blk3</p>
    <p>a fixed-sized index block</p>
    <p>txn begin txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo block 3</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>in de</p>
    <p>x4</p>
    <p>in de</p>
    <p>x5</p>
    <p>redo blk1 redoblk2 redo blk3</p>
    <p>a fixed-sized index block</p>
    <p>txn begin</p>
    <p>in de</p>
    <p>x6</p>
    <p>txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo block 1</p>
    <p>redo block 2</p>
    <p>redo block 3</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>in de</p>
    <p>x4</p>
    <p>in de</p>
    <p>x5</p>
    <p>redo blk1 redoblk2 redo blk3</p>
    <p>a fixed-sized index block</p>
    <p>txn begin</p>
    <p>in de</p>
    <p>x6</p>
    <p>txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>time</p>
    <p>redo header</p>
    <p>superblock</p>
    <p>in de</p>
    <p>x0</p>
    <p>in de</p>
    <p>x1</p>
    <p>in de</p>
    <p>x2</p>
    <p>in de</p>
    <p>x3</p>
    <p>in de</p>
    <p>x4</p>
    <p>in de</p>
    <p>x5</p>
    <p>redo blk1 redoblk2 redo blk3</p>
    <p>a fixed-sized index block</p>
    <p>txn begin</p>
    <p>in de</p>
    <p>x6</p>
    <p>txn end</p>
    <p>Log Format: General Logging Library: rfsck-lib</p>
  </div>
  <div class="page">
    <p>Motivation  Background &amp; Related Work  Research Question  Are existing checkers resilient to faults?  How to build robust checkers?  Evaluation  Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>rfsck-lib: General Logging Library Integration with existing checkers:</p>
    <p>rfsck-lib + e2fsck =&gt; rfsck-ext rfsck-lib + xfs_repair =&gt; rfsck-xfs</p>
    <p>rfsck-ext rfsck-xfs</p>
    <p>Lines of Code 50 15 Integration -R option -R option Safe transaction For each pass For entire run Replay log At the end or at</p>
    <p>restart points At the end</p>
    <p>Table 4: Integrating rfsck-lib with existing checkers</p>
  </div>
  <div class="page">
    <p>Evaluation of EXT4 checkers</p>
    <p>Test Images</p>
    <p>Test images reporting corruption e2fsck rfsck-ext</p>
    <p>Evaluation of XFS checkers</p>
    <p>Test Images</p>
    <p>Test images reporting corruption</p>
    <p>xfs_repair rfsck-xfs 12 12 0</p>
    <p>Robustness of rfsck-lib</p>
  </div>
  <div class="page">
    <p>No corruption reported</p>
    <p>Robustness of rfsck-lib</p>
    <p>Evaluation of EXT4 checkers</p>
    <p>Test Images</p>
    <p>Test images reporting corruption e2fsck rfsck-ext</p>
    <p>Evaluation of XFS checkers</p>
    <p>Test Images</p>
    <p>Test images reporting corruption</p>
    <p>xfs_repair rfsck-xfs 12 12 0</p>
  </div>
  <div class="page">
    <p>Performance of rfsck-lib Specifications:</p>
    <p>CPU: Intel Xeon 5160 3GHz RAM: 8GB OS: Ubuntu 16.04 (Linux Kernel v4.4) HDD: WD5000AAKS</p>
    <p>Practical File System sizes of 100, 200 &amp; 500 GB</p>
    <p>Fill in steps using fs_mark tool</p>
    <p>Corrupt metadata using debugfs &amp; xfs_db</p>
  </div>
  <div class="page">
    <p>Performance of rfsck-lib</p>
    <p>Figure 1: Performance comparison of e2fsck, e2fsckundo, e2fsck-patch and rfsck-ext</p>
  </div>
  <div class="page">
    <p>Performance of rfsck-lib</p>
    <p>Figure 1: Performance comparison of e2fsck, e2fsckundo, e2fsck-patch and rfsck-ext</p>
    <p>Degraded performance of e2fsckpatch due to extensive synchronization</p>
  </div>
  <div class="page">
    <p>Performance of rfsck-lib</p>
    <p>Figure 1: Performance comparison of e2fsck, e2fsckundo, e2fsck-patch and rfsck-ext</p>
    <p>Degraded performance of e2fsckpatch due to extensive synchronization</p>
    <p>rfsck-ext incurs a max. overhead of 12%</p>
  </div>
  <div class="page">
    <p>Performance of rfsck-lib</p>
    <p>Figure 1: Performance comparison of e2fsck, e2fsckundo, e2fsck-patch and rfsck-ext</p>
    <p>Degraded performance of e2fsckpatch due to extensive synchronization</p>
    <p>rfsck-ext incurs a max. overhead of 12%</p>
    <p>Overhead reduces as file system size increases - Runtime of checking is dominant,</p>
    <p>compared to replay</p>
  </div>
  <div class="page">
    <p>Motivation  Background &amp; Related Work  Research Question  Are existing checkers resilient to faults?  How to build robust checkers?  Evaluation  Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults?</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults? NO  Strong dependencies among updates vulnerabilities in checkers</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults? NO  Strong dependencies among updates vulnerabilities in checkers</p>
    <p>How to build a robust checker?  One simple fix: e2fsck-patch</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults? NO  Strong dependencies among updates vulnerabilities in checkers</p>
    <p>How to build a robust checker?  One simple fix: e2fsck-patch  General logging library: rfsck-lib  Easy to integrate</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults? NO  Strong dependencies among updates vulnerabilities in checkers</p>
    <p>How to build a robust checker?  One simple fix: e2fsck-patch  General logging library: rfsck-lib  Easy to integrate</p>
    <p>Consistent with previous studies that show recovery procedures are imperfect  Why does the cloud stop computing?: Lessons from hundreds of service outages [SoCC16]  Failure recovery: When the cure is worse than the disease [HotOS13]</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults? NO  Strong dependencies among updates vulnerabilities in checkers</p>
    <p>How to build a robust checker?  One simple fix: e2fsck-patch  General logging library: rfsck-lib  Easy to integrate</p>
    <p>Consistent with previous studies that show recovery procedures are imperfect  Why does the cloud stop computing?: Lessons from hundreds of service outages [SoCC16]  Failure recovery: When the cure is worse than the disease [HotOS13]</p>
    <p>Raise awareness on vulnerabilities in recovery procedures, and facilitate building fault-resilient systems</p>
  </div>
  <div class="page">
    <p>Conclusion  Are existing checkers resilient to faults? NO  Strong dependencies among updates vulnerabilities in checkers</p>
    <p>How to build a robust checker?  One simple fix: e2fsck-patch  General logging library: rfsck-lib  Easy to integrate</p>
    <p>Consistent with previous studies that show recovery procedures are imperfect  Why does the cloud stop computing?: Lessons from hundreds of service outages [SoCC16]  Failure recovery: When the cure is worse than the disease [HotOS13]</p>
    <p>Raise awareness on vulnerabilities in recovery procedures, and facilitate building fault-resilient systems</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>BACK UP SLIDES</p>
  </div>
  <div class="page">
    <p>Framework to interrupting the recovery</p>
    <p>Build a fault injection tool rfsck-test using customized iSCSI driver to emulate faults</p>
    <p>Adopt the Clean power fault model  Clean I/O termination  No ordering of I/O  Serves as the lower bound of failure impact</p>
  </div>
  <div class="page">
    <p>Case Study: xfs_repair</p>
    <p>Generated 20 test images using xfs_db</p>
    <p>Block size of all images is 4KB</p>
    <p>Fault injected at two granularities: 512B and 4KB</p>
  </div>
  <div class="page">
    <p>Case Study: xfs_repair</p>
    <p>Fault injection granularity</p>
    <p># of XFS test images</p>
    <p># of repaired images generated</p>
    <p># of images reporting corruption</p>
    <p>test images repaired images</p>
    <p>Table 4: Number of test images and repaired images reporting corruption</p>
  </div>
  <div class="page">
    <p>Are existing checkers resilient to faults?</p>
    <p>No, because there is strong dependency among updates</p>
    <p>Also, existing logging mechanism in checkers also fail</p>
  </div>
  <div class="page">
    <p>Why two modes?</p>
  </div>
  <div class="page">
    <p>Why two modes?</p>
    <p>Some checkers exhibit logging mechanism - E.g: undo log in e2fsck</p>
    <p>Test for resilience with logging mechanism enabled</p>
  </div>
  <div class="page">
    <p>Conclusion Analyze the behavior of file system checkers under faults</p>
    <p>- May lead to unrecoverable inconsistencies</p>
    <p>Analyze the logging mechanism of existing checkers - Fail the test of resilience</p>
    <p>Build a general logging library rfsck-lib to strengthen existing checkers</p>
    <p>Minimum LoC added for integration</p>
    <p>Existing checkers become more robust but induce minimal performance overhead (max 12%)</p>
  </div>
  <div class="page">
    <p>Robust File System Checker</p>
    <p>No, because there is strong dependency among updates</p>
    <p>Also, existing logging mechanism in checkers also fail</p>
  </div>
  <div class="page">
    <p>Robustness of rfsck-lib</p>
    <p>Evaluated rfsck-ext and rfsck-xfs</p>
    <p>Used rfsck-test framework</p>
    <p>Used 17 EXT4 &amp; 12 XFS test images</p>
    <p>None reported corruption</p>
  </div>
  <div class="page">
    <p>Conclusion  Study behavior of existing checkers under faults  Interrupted repair may cause irreparable damage</p>
    <p>Build a general logging library rfsck-lib to address this issue</p>
    <p>Test for robustness using fault injection tool rfsck-test</p>
    <p>Raise awareness on vulnerabilities in recovery procedures</p>
    <p>Integrate rfsck-lib into existing checkers to build more robust checkers</p>
  </div>
  <div class="page">
    <p>e2fsck-patch: A simple fix</p>
    <p>time</p>
    <p>undo block 1</p>
    <p>undo block 2</p>
    <p>undo block 3</p>
    <p>log</p>
    <p>fs img</p>
    <p>repair block 1</p>
    <p>repair block 2</p>
    <p>repair block 3</p>
    <p>e2fsck-patch</p>
    <p>block written to the log block written to the fs img</p>
    <p>a sync operation</p>
  </div>
  <div class="page">
    <p>Performance of rfsck-lib</p>
    <p>Figure 2: Performance comparison of xfs_repair, rfsck-xfs</p>
    <p>Similar to rfsck-ext</p>
    <p>rfsck-xfs induces upto 0.8% overhead</p>
  </div>
</Presentation>
