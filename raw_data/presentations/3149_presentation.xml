<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Explicating SDKs: Uncovering Assumptions</p>
    <p>Underlying Secure Authentication and Authorization</p>
    <p>Rui Wang1*, Yuchen Zhou2*, (*Lead authors, Speaker)</p>
    <p>Shuo Chen1, Shaz Qadeer1, David Evans2 and Yuri Gurevich1</p>
  </div>
  <div class="page">
    <p>Most modern apps are empowered by online services.</p>
    <p>chart source: builtwith.com</p>
  </div>
  <div class="page">
    <p>Single Sign-On Service</p>
  </div>
  <div class="page">
    <p>The requested response type, one of code or token. Defaults to code</p>
    <p>If the developers follow the guides properly, will the application be secure?</p>
    <p>Facebook documentation example</p>
  </div>
  <div class="page">
    <p>Possible implementation</p>
    <p>Facebook back end</p>
    <p>access_token3 Welcome, Alice!6</p>
    <p>Foo App Client</p>
    <p>Malicious App Client</p>
    <p>Foo App Server</p>
    <p>Possible Attack</p>
    <p>access_token3</p>
    <p>access_token4</p>
    <p>Welcome Alice?!7</p>
  </div>
  <div class="page">
    <p>Video Demo</p>
  </div>
  <div class="page">
    <p>Whos to blame?</p>
    <p>Developers?</p>
    <p>SDK providers?</p>
    <p>Developer guide does not explicitly state that token flow MUST not be used for server-side authentication.</p>
  </div>
  <div class="page">
    <p>The requested response type, one of code or token. Defaults to code</p>
    <p>If developers follow the guides properly, will the applications be secure?</p>
    <p>Facebook documentation example</p>
    <p>No.  Not because of vulnerabilities in SDKs.  Due to implicit assumptions about how</p>
    <p>to use them.</p>
  </div>
  <div class="page">
    <p>Implicit Assumptions</p>
    <p>Assumptions that are</p>
    <p>o not clearly stated in the SDKs developer guides;</p>
    <p>o related to how the SDK should be used;</p>
    <p>o essential for applications security property.</p>
    <p>Goal of this project:</p>
    <p>systematically find these implicit assumptions</p>
  </div>
  <div class="page">
    <p>Verifier</p>
    <p>Model AssertionsAssumptions</p>
    <p>Model checks?</p>
    <p>CounterExample</p>
    <p>Refine Model</p>
    <p>Add necessary assumptions</p>
    <p>More to model</p>
    <p>N Y</p>
    <p>Enrich Model</p>
    <p>Add related assertions</p>
    <p>Y</p>
    <p>N</p>
    <p>Iterative process</p>
    <p>Iterative process</p>
    <p>General Approach</p>
  </div>
  <div class="page">
    <p>General Approach</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Service runtime</p>
  </div>
  <div class="page">
    <p>Threat model</p>
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Service runtime</p>
    <p>M a</p>
    <p>lA p</p>
    <p>p C</p>
    <p>Mallory</p>
  </div>
  <div class="page">
    <p>Desired Security Properties</p>
    <p>Authentication Mallory cannot sign into Foo app as Alice.</p>
    <p>Authorization Mallory cannot access data that Alice have not granted permission to Mallory.</p>
    <p>Association The user identity, users permission (authorization result), and session identity must represent the same person.</p>
  </div>
  <div class="page">
    <p>Verifier</p>
    <p>Model AssertionsAssumptions</p>
    <p>assert(logged_in_user != _Alice);</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Service runtime</p>
  </div>
  <div class="page">
    <p>Modeling SDKs</p>
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Service runtime</p>
    <p>Concrete module with src or documentation</p>
  </div>
  <div class="page">
    <p>Modeling underlying system layer</p>
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>Service runtime</p>
    <p>Concrete module with src or documentation</p>
    <p>Black-box concrete module</p>
  </div>
  <div class="page">
    <p>Modeling Foo application</p>
    <p>Client SDK Service SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>Service runtime</p>
    <p>FooAppC FooAppS</p>
    <p>Abstract module subject to dev guideConcrete module with src or documentation</p>
    <p>Black-box concrete module</p>
  </div>
  <div class="page">
    <p>Modeling Mallory</p>
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Service runtime</p>
    <p>M a</p>
    <p>lA p</p>
    <p>p C</p>
    <p>Mallory</p>
    <p>Abstract module subject to dev guideConcrete module with src or documentation</p>
    <p>Black-box concrete module Abstract module subject to knowledge pool</p>
  </div>
  <div class="page">
    <p>FooAppC</p>
    <p>Client SDK</p>
    <p>Client runtime</p>
    <p>Identity Provider (IdP)</p>
    <p>FooAppS</p>
    <p>Service SDK</p>
    <p>Service runtime</p>
    <p>M a</p>
    <p>lA p</p>
    <p>p C</p>
    <p>Mallory</p>
    <p>Knowledge Pool</p>
    <p>Concrete Modules</p>
    <p>Test Harness</p>
    <p>Modeling Mallory</p>
    <p>Abstract module subject to dev guideConcrete module with src or documentation</p>
    <p>Black-box concrete module Abstract module subject to knowledge pool</p>
  </div>
  <div class="page">
    <p>Verifier</p>
    <p>Model AssertionsAssumptions</p>
    <p>Basic system components</p>
    <p>SDK documentation</p>
    <p>SDK documentation and previously</p>
    <p>uncovered assumptions</p>
    <p>All relevant system</p>
    <p>components</p>
  </div>
  <div class="page">
    <p>Boogie/BoogiePL: Symbolic execution engine</p>
    <p>Supports loop invariants and function pre/post conditions to enable unbounded verification</p>
    <p>Verifier: Boogie[1]</p>
    <p>Model AssertionsAssumptions</p>
    <p>SDK documentation and previously</p>
    <p>uncovered assumptions</p>
    <p>All relevant system</p>
    <p>components</p>
  </div>
  <div class="page">
    <p>Verifier</p>
    <p>Model AssertionsAssumptions</p>
    <p>Model checks?</p>
    <p>CounterExample</p>
    <p>Refine Model</p>
    <p>Add necessary assumptions</p>
    <p>More to model</p>
    <p>N Y</p>
    <p>Enrich Model</p>
    <p>Add related assertions</p>
    <p>Y</p>
    <p>N</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Results overview</p>
    <p>Explicated three SDKs: (6 months)</p>
    <p>Many implicit assumptions were found:</p>
    <p>One case reported; documentation revised.</p>
    <p>Paragraph added to OAuth 2.0 standard.</p>
    <p>Majority of tested apps vulnerable due to failure to ensure at least one uncovered assumption.</p>
    <p>Facebook SSO PHP SDK</p>
    <p>Windows 8 SDK for modern apps</p>
    <p>Windows Live connect SDK</p>
  </div>
  <div class="page">
    <p>SDK models</p>
  </div>
  <div class="page">
    <p>procedure {:inline 1} dialog_oauth(IdPLoggedInUser:User, client_id: AppID, redirect_domain: Web_Domain, scope:Scope, response_type:ResponseType) returns (r:int, Response_data: int) modifies Access_Tokens__TokenValue, Access_Tokens__user_ID, Access_Tokens__Scope; modifies Codes__user_ID,Codes__App_ID,Codes__Scope; modifies  {</p>
    <p>var access_token:int, code:int, sr:int;</p>
    <p>if (response_type==_Token || response_type==_Signed_Request){</p>
    <p>havoc access_token; //it means &quot;access_token := *;&quot;  IdP_Signed_Request_signature[sr]:=ValidIdPSignature; IdP_Signed_Request_oauth_token[sr]:=access_token; IdP_Signed_Request_code[sr]:=code; IdP_Signed_Request_user_ID[sr]:= IdPLoggedInUser; IdP_Signed_Request_app_id[sr]:= client_id;</p>
    <p>} if (response_type==_Token) {</p>
    <p>Response_data:=access_token; } else if (response_type==_Code) {</p>
    <p>Response_data:=code; } else {</p>
    <p>Response_data:=sr; } r:=200;</p>
    <p>}</p>
    <p>API models</p>
    <p>procedure {:inline 1} dialog_oauth(IdPLoggedInUser:User, client_id: AppID, redirect_domain: Web_Domain, scope:Scope, response_type:ResponseType) returns (r:int, Response_data: int) modifies Access_Tokens__TokenValue, Access_Tokens__user_ID, Access_Tokens__Scope; modifies Codes__user_ID,Codes__App_ID,Codes__Scope; modifies  {</p>
    <p>var access_token:int, code:int, sr:int;</p>
    <p>if (response_type==_Token || response_type==_Signed_Request){</p>
    <p>havoc access_token; //it means &quot;access_token := *;&quot;  IdP_Signed_Request_signature[sr]:=ValidIdPSignature; IdP_Signed_Request_oauth_token[sr]:=access_token; IdP_Signed_Request_code[sr]:=code; IdP_Signed_Request_user_ID[sr]:= IdPLoggedInUser; IdP_Signed_Request_app_id[sr]:= client_id;</p>
    <p>} if (response_type==_Token) {</p>
    <p>Response_data:=access_token; } else if (response_type==_Code) {</p>
    <p>Response_data:=code; } else {</p>
    <p>Response_data:=sr; } r:=200;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Example vulnerability from Facebook SDK</p>
  </div>
  <div class="page">
    <p>Example assumption from Facebook SDK</p>
    <p>procedure {:inline 1} getLogoutUrl() returns (API_id: API_ID, ) modifies ; {</p>
    <p>var test_t:int ; call access_token := getAccessToken(); call test_t := getApplicationAccessToken(); assume(access_token != test_t); API_id := API_id_FBConnectServer_login_php;</p>
    <p>return;</p>
    <p>}</p>
    <p>Assumption (in the model)</p>
    <p>Assumption (in plain text): getLogoutUrl() must not return an</p>
    <p>application access token to the client.</p>
    <p>Best outcome: Facebook fixed their SDK code so this</p>
    <p>assumption is not needed in the newer version.</p>
  </div>
  <div class="page">
    <p>Example assumption from Windows Live</p>
    <p>function saveRefreshToken($refreshToken) {</p>
    <p>// save the refresh token associated with the user id on the site. } function handleTokenResponse($token, $error = null) {</p>
    <p>$authCookie = $_COOKIE[AUTHCOOKIE]; $cookieValues = parseQueryString($authCookie);</p>
    <p>if (!empty($token-&gt;{ REFRESHTOKEN })) {</p>
    <p>saveRefreshToken($token-&gt;{ REFRESHTOKEN }); }</p>
    <p>original Live ID developer guide</p>
    <p>associate refresh token with the user ID obtained from the global variable $_COOKIE</p>
    <p>associate refresh token with the user ID obtained from the refresh token passed into the function</p>
    <p>Two interpretations</p>
    <p>procedure {:inline 1} saveRefreshToken (refresh_token_index: int, RP_Cookie_index: int) modifies RP_Refresh_Token_index; {</p>
    <p>var user: User; //call user := get_User_ID(RP_Cookie_index); user := Refresh_Token__user_ID[refresh_token_index]; if (user == _nobody) {return;} RP_Refresh_Token_index[user] := refresh_token_index;</p>
    <p>}</p>
    <p>function saveRefreshToken() {</p>
    <p>// save the refresh token associated with the user id on the site. }</p>
  </div>
  <div class="page">
    <p>Example assumption from Windows Live</p>
    <p>procedure {:inline 1} saveRefreshToken (refresh_token_index: int, RP_Cookie_index: int) modifies RP_Refresh_Token_index; {</p>
    <p>var user: User; call user := get_User_ID(RP_Cookie_index);</p>
    <p>user := Refresh_Token__user_ID[refresh_token_index]; if (user == _nobody) {return;} RP_Refresh_Token_index[user] := refresh_token_index;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Example assumption from Windows Live</p>
    <p>function saveRefreshToken($refreshToken) {</p>
    <p>// save the refresh token and associate it with the user identified by your site credential system. }</p>
    <p>function handleTokenResponse($token, $error = null) {</p>
    <p>$authCookie = $_COOKIE[AUTHCOOKIE]; $cookieValues = parseQueryString($authCookie);</p>
    <p>if (!empty($token))</p>
    <p>new Live ID developer guide</p>
  </div>
  <div class="page">
    <p>Testing Popular Apps</p>
    <p>Facebook showcase applications</p>
    <p>Popular Windows 8 modern applications using Facebook SSO</p>
  </div>
  <div class="page">
    <p>Testing Results</p>
    <p>Test Set Number of Apps Vulnerable</p>
    <p>Illustrative example 27 21 (78%)</p>
    <p>Assumption A1 (in the paper) 7 6 (86%)</p>
    <p>Assumption A6 (in the paper) 21 14 (67%)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Missed implicit assumptions can lead to many vulnerabilities when integrating third-party services.</p>
    <p>What we advocate: SDK providers explicate SDKs before release.</p>
    <p>o Fix SDK Code</p>
    <p>o Develop Automated Checker</p>
    <p>o Improve SDK documentation</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Rui Wang1*, Yuchen Zhou2*, (* Lead authors, Speaker)</p>
    <p>Shuo Chen1, Shaz Qadeer1, David Evans2 and Yuri Gurevich1</p>
    <p>Models available at: https://github.com/sdk-security/Explicated-SDKs</p>
    <p>Visit project website for more info: http://www.cs.virginia.edu/~yz8ra/ExplicatingSDKs_website/</p>
  </div>
</Presentation>
