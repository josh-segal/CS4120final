<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Pixaxe - A Declarative Web Application Framework</p>
    <p>Rob King</p>
    <p>DVLabs TippingPoint Technologies</p>
    <p>June 24, 2010</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 1 / 22</p>
  </div>
  <div class="page">
    <p>Introducing Pixaxe</p>
    <p>Pixaxe is a web application framework with several design goals:</p>
    <p>Declarative Pixaxe encourages a very declarative, functional style of interface and logic specification that centers around the evaluation of functions.</p>
    <p>Client-Focused Pixaxe runs entirely on the client, including functionality that often resides on the server.</p>
    <p>Lightweight Pixaxe transmits a page only once; afterwards, only changes to the data model are sent. The server need only support static file serving and, optionally, JSON (de)serialization.</p>
    <p>Simple Pixaxe is designed as a lightweight layer that augments HTML and related technologies, rather than replace them.</p>
    <p>Decoupled Pixaxe is built up of several distinct technologies, and these technologies can be used individually as required.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 2 / 22</p>
  </div>
  <div class="page">
    <p>Introducing Pixaxe</p>
    <p>Pixaxe is a web application framework with several design goals: Declarative Pixaxe encourages a very declarative, functional style of</p>
    <p>interface and logic specification that centers around the evaluation of functions.</p>
    <p>Client-Focused Pixaxe runs entirely on the client, including functionality that often resides on the server.</p>
    <p>Lightweight Pixaxe transmits a page only once; afterwards, only changes to the data model are sent. The server need only support static file serving and, optionally, JSON (de)serialization.</p>
    <p>Simple Pixaxe is designed as a lightweight layer that augments HTML and related technologies, rather than replace them.</p>
    <p>Decoupled Pixaxe is built up of several distinct technologies, and these technologies can be used individually as required.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 2 / 22</p>
  </div>
  <div class="page">
    <p>Introducing Pixaxe</p>
    <p>Pixaxe is a web application framework with several design goals: Declarative Pixaxe encourages a very declarative, functional style of</p>
    <p>interface and logic specification that centers around the evaluation of functions.</p>
    <p>Client-Focused Pixaxe runs entirely on the client, including functionality that often resides on the server.</p>
    <p>Lightweight Pixaxe transmits a page only once; afterwards, only changes to the data model are sent. The server need only support static file serving and, optionally, JSON (de)serialization.</p>
    <p>Simple Pixaxe is designed as a lightweight layer that augments HTML and related technologies, rather than replace them.</p>
    <p>Decoupled Pixaxe is built up of several distinct technologies, and these technologies can be used individually as required.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 2 / 22</p>
  </div>
  <div class="page">
    <p>Introducing Pixaxe</p>
    <p>Pixaxe is a web application framework with several design goals: Declarative Pixaxe encourages a very declarative, functional style of</p>
    <p>interface and logic specification that centers around the evaluation of functions.</p>
    <p>Client-Focused Pixaxe runs entirely on the client, including functionality that often resides on the server.</p>
    <p>Lightweight Pixaxe transmits a page only once; afterwards, only changes to the data model are sent. The server need only support static file serving and, optionally, JSON (de)serialization.</p>
    <p>Simple Pixaxe is designed as a lightweight layer that augments HTML and related technologies, rather than replace them.</p>
    <p>Decoupled Pixaxe is built up of several distinct technologies, and these technologies can be used individually as required.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 2 / 22</p>
  </div>
  <div class="page">
    <p>Introducing Pixaxe</p>
    <p>Pixaxe is a web application framework with several design goals: Declarative Pixaxe encourages a very declarative, functional style of</p>
    <p>interface and logic specification that centers around the evaluation of functions.</p>
    <p>Client-Focused Pixaxe runs entirely on the client, including functionality that often resides on the server.</p>
    <p>Lightweight Pixaxe transmits a page only once; afterwards, only changes to the data model are sent. The server need only support static file serving and, optionally, JSON (de)serialization.</p>
    <p>Simple Pixaxe is designed as a lightweight layer that augments HTML and related technologies, rather than replace them.</p>
    <p>Decoupled Pixaxe is built up of several distinct technologies, and these technologies can be used individually as required.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 2 / 22</p>
  </div>
  <div class="page">
    <p>Introducing Pixaxe</p>
    <p>Pixaxe is a web application framework with several design goals: Declarative Pixaxe encourages a very declarative, functional style of</p>
    <p>interface and logic specification that centers around the evaluation of functions.</p>
    <p>Client-Focused Pixaxe runs entirely on the client, including functionality that often resides on the server.</p>
    <p>Lightweight Pixaxe transmits a page only once; afterwards, only changes to the data model are sent. The server need only support static file serving and, optionally, JSON (de)serialization.</p>
    <p>Simple Pixaxe is designed as a lightweight layer that augments HTML and related technologies, rather than replace them.</p>
    <p>Decoupled Pixaxe is built up of several distinct technologies, and these technologies can be used individually as required.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 2 / 22</p>
  </div>
  <div class="page">
    <p>The Anatomy of a Pixaxe Application</p>
    <p>Client Rendered Page: Hello, World!</p>
    <p>Server</p>
    <p>Model: {&quot;name&quot; : &quot;World&quot;}</p>
    <p>View Template: &lt;p1&gt;Hello, ${name}!&lt;/p1&gt;</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 3 / 22</p>
  </div>
  <div class="page">
    <p>Model-View-Controller</p>
    <p>Pixaxe follows a traditional Model-View-Controller design: The Model is viewed as a single JSON document that is synchronized among the server, browser, interface, and user. Pixaxe automatically synchronizes the model when necessary. The View is a single XHTML document with embedded expressions in Pixaxes template language. This view is automatically re-rendered in response to changes in the model. The Controller exists entirely within the client, and relationships between the controller and the model are also specified declaratively.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 4 / 22</p>
  </div>
  <div class="page">
    <p>Specifying Views Web Pages as Expressions</p>
    <p>The technology used for the specification of views is known as Jenner, and is usable independently of the rest of Pixaxe. Jenner is an expression language; all XHTML pages are valid Jenner expressions, but Jenner is a superset of XHTML. Rendering a page is identical to evaluating the Jenner expression. No explicit calls need to be made to render a Jenner expression; the web page itself is considered the Jenner source code and it is reevaluated whenever necessary.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 5 / 22</p>
  </div>
  <div class="page">
    <p>A Simple Jenner Expression</p>
    <p>The Model, a JSON document: {&quot;name&quot; : &quot;world&quot;}</p>
    <p>The View, a Jenner expression: &lt;head&gt;</p>
    <p>&lt;title&gt;Example&lt;/title&gt; &lt;script lang=&quot;text/javascript&quot;</p>
    <p>src=&quot;pixaxe.js&quot; /&gt; &lt;script lang=&quot;text/javascript&quot;</p>
    <p>src=&quot;model.js&quot; /&gt; &lt;/head&gt; &lt;body&gt;</p>
    <p>&lt;p1&gt;Hello, ${name}!&lt;/p1&gt; &lt;/body&gt;</p>
    <p>The Result, a rendered web page: Hello, world!</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 6 / 22</p>
  </div>
  <div class="page">
    <p>A More Complicated Jenner Expression The Model</p>
    <p>{ &quot;log&quot; : [</p>
    <p>{&quot;level&quot; : &quot;CRIT&quot; &quot;text&quot; : &quot;Core temp critical&quot;}, {&quot;level : &quot;INFO&quot;, &quot;text&quot; : &quot;Fries are done&quot;}</p>
    <p>] }</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 7 / 22</p>
  </div>
  <div class="page">
    <p>A More Complicated Jenner Expression The View</p>
    <p>&lt;head&gt; &lt;title&gt;Log Messages&lt;/title&gt; &lt;script lang=&quot;text/javascript&quot; src=&quot;pixaxe.js&quot; /&gt; &lt;script lang=&quot;text/javascript&quot; src=&quot;model.js&quot; /&gt;</p>
    <p>&lt;/head&gt; &lt;body&gt;</p>
    <p>&lt;ul&gt; ${for i from 0 to log.length - 1</p>
    <p>var m := log[i] return &lt;li class=&quot;${m.level == CRIT ?</p>
    <p>log-red : log-black}&quot;&gt; ${m.text}</p>
    <p>&lt;/li&gt; }</p>
    <p>&lt;/ul&gt; &lt;/body&gt;</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 8 / 22</p>
  </div>
  <div class="page">
    <p>Jenner Language Features</p>
    <p>Standard operators, including modular arithmetic, Boolean combination, etc. List comprehensions. Lexical scoping (the Model serves as the root environment). Document elements as expressions and results. Attribute values may be Jenner expressions. Functions and a foreign function interface with JavaScript. Can be used separately from Pixaxe as a powerful client-side template engine. Can use XSLT as a page-load-time macro language.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 9 / 22</p>
  </div>
  <div class="page">
    <p>Jenner Example Macro Usage</p>
    <p>Jenner provides a richer target language for browser XSL transformations than plain XHTML. Pixaxe provides a variety of XSLT macros, for things like tab boxes, lightboxes, and AJAX-style file uploads. Below is a page fragment using the standard tab-box macro.</p>
    <p>&lt;dppx:tab-box&gt; &lt;dppx:tab label=&quot;First Tab&quot; selected=&quot;true&quot;&gt; &lt;p&gt;Tab bodies can consist of arbitrary HTML and</p>
    <p>Jenner markup.&lt;/p&gt; &lt;p&gt;For example, here is the current value</p>
    <p>of the &quot;name&quot; variable in the Store: ${name}&lt;/p&gt; &lt;/dppx:tab&gt; &lt;dppx:tab label=&quot;Second Tab&quot;&gt; &lt;p&gt;Another tab.&lt;/p&gt; &lt;/dppx:tab&gt;</p>
    <p>...</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 10 / 22</p>
  </div>
  <div class="page">
    <p>Jenner Partial Macro Expansion</p>
    <p>Below is a partial expansion of the macro: &lt;fieldset&gt;&lt;input type=&quot;hidden&quot; value=&quot;id4127134&quot; name=&quot;#{controller.dppx_tabselid4127132}&quot;/&gt; &lt;legend&gt;&lt;input type=&quot;submit&quot; name=&quot;#{controller.dppx_tabselid4127132}&quot; class=&quot;dppx-tab dppx-tab-left dppx-tab-${controller.dppx_tabselid4127132 != id4127134 ? un : }selected&quot; accept=&quot;id4127134&quot; value=&quot;First Tab&quot; /&gt; ... dppx-tab-body-${controller.dppx_tabselid4127132 != id4127134 ? un : }selected&quot;&gt; &lt;p&gt;Tab bodies can consist of arbitrary HTML and</p>
    <p>Jenner markup.&lt;/p&gt; &lt;p&gt;For example, here is the current value of the &quot;name&quot; variable in the Store: ${name}&lt;/p&gt; &lt;/div&gt;</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 11 / 22</p>
  </div>
  <div class="page">
    <p>Jenner Macro Evaluation Result</p>
    <p>The above macro as rendered by the browser:</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 12 / 22</p>
  </div>
  <div class="page">
    <p>Pixaxe Adding Input Handling to Jenner</p>
    <p>Client</p>
    <p>Model</p>
    <p>Model Verification</p>
    <p>Server</p>
    <p>Submit Control Inside Form Submit Control Outside Form</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 13 / 22</p>
  </div>
  <div class="page">
    <p>Pixaxe Overloading Traditional Forms</p>
    <p>Pixaxe uses traditional HTML form controls for input, but augments some of their functionality. By placing expressions inside the name and value attributes of controls, controls can be linked to values in the model. For example, below is an input element that is linked to the person.name member of the model:</p>
    <p>&lt;input name=&quot;#{person.name}&quot; value=&quot;${person.name}&quot; /&gt;</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 14 / 22</p>
  </div>
  <div class="page">
    <p>Pixaxe Validating Input</p>
    <p>By placing an expression in the accept attribute of a control, that controls value can be validated or manipulated before being applied to the model. For example, the input control below can be set to automatically uppercase the first letter of its input before it is synchronized with the model:</p>
    <p>&lt;input name=&quot;#{person.name}&quot; value=&quot;${person.name}&quot;</p>
    <p>accept=&quot;${str:titlecase($value)}&quot; /&gt;</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 15 / 22</p>
  </div>
  <div class="page">
    <p>Pixaxe Synchronizing the Model With the Server</p>
    <p>Pixaxe overloads the meaning of HTML form elements. Submit controls inside form elements result in the synchronization of the model with the server, if the forms enctype attribute is set to text/javascript. Forms can also validate the model before it is synchronized with the server by evaluating an expression placed in the forms accept attribute; this expression must evaluate to true for the model to be synchronized. It is important to note that this is not HTML form submission; only the model is serialized and then synchronized; the page is re-rendered entirely locally with the freshly synchronized model.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 16 / 22</p>
  </div>
  <div class="page">
    <p>Pixaxe Interacting With JavaScript</p>
    <p>Pixaxe allows for a simple foreign function interface with JavaScript code in the browser. Jenner expressions can call JavaScript functions exported to the Jenner runtime, and JavaScript code can easily interact with Pixaxe - either indirectly by manipulating the model, or directly by explicitly evaluating Jenner expressions. Jenner comes with a large standard library of functions for a variety of tasks, including text manipulation, cookie storage, mathematical functions, alert boxes, and so on. Functions can be namespaced similarly to XML Namespaces, preventing collisions.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 17 / 22</p>
  </div>
  <div class="page">
    <p>Underlying Technology Kouprey</p>
    <p>Pixaxe is built on top of a complete parser combinator library written in pure JavaScript, called Kouprey. Kouprey is usable separately from Pixaxe, and provides a useful tool for the development of parsers running in web browsers and other JavaScript environments. Grammars are specified inline using normal JavaScript statements, but in such a way as to resemble EBNF.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 18 / 22</p>
  </div>
  <div class="page">
    <p>Underlying Technology Esel</p>
    <p>Esel is a powerful expression and query language, useful for querying JSON and other hierarchical datasets. Esel is a perfect subset of Jenner; Jenner is in fact Esel with the addition of XML element types and syntax. Esels parser, compiler, and virtual machine are written entirely in JavaScript and run entirely within the browser. Esels virtual machine is Turing complete and easily extensible, with an efficient code representation. Esel is useful as an embedded expression language in web applications, for example, in a web-based spreadsheet.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 19 / 22</p>
  </div>
  <div class="page">
    <p>Potential Uses</p>
    <p>Pixaxe is useful as an application toolkit for small and rapidly-developed web applications. It also proves useful in situations where server resources are extremely limited or not under the control of the application developer. Pixaxe is useful in situations where the developer is more familiar with HTML and CSS than with JavaScript or programming. Pixaxe, with its traditional form- and page-oriented design and extremely flexible server interface, may be useful for developing web based interfaces to legacy applications. Kouprey greatly eases the creation of parsers in web browsers, easing the development of application-specific languages in web applications (think expressions in web-based spreadsheets, for example).</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 20 / 22</p>
  </div>
  <div class="page">
    <p>The Future</p>
    <p>Kouprey 2 is already finished, and has proven to be considerably faster, with a simpler grammar specification syntax. It is currently just awaiting documentation. Esel 2 is nearing completion, and adds useful features such as nested comments, an n-way case statement, optional assignment, and improved facilities for runtime analysis of expressions. Pixaxe 2 is being planned on top of these features, and will have a much more reactive programming feel.</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 21 / 22</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Pixaxe is available for use today, under the GNU General Public License. Pixaxe is still under development and has some bugs, but it has been used in production environments for relatively large and complex projects. For more information, please contact Rob King at either:</p>
    <p>http://www.deadpixi.com jking@deadpixi.com rob.r.king@hp.com</p>
    <p>Rob King (TippingPoint DVLabs) PIXAXE June 24, 2010 22 / 22</p>
  </div>
</Presentation>
