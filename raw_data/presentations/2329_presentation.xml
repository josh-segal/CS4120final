<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A FINE-GRAINED AUTONOMIC MANAGEMENT SOLUTION FOR MULTI-LAYERED SYSTEMS F. Seracini, M. Menarini, I. Kruger L. Baresi, S. Guinea, G. Quattrocchi sam.guinea@polimi.it</p>
  </div>
  <div class="page">
    <p>Context and Problem  Modern Software Systems are subject to continuous changes</p>
    <p>Requirements  Multiple stakeholders with different interests</p>
    <p>Context of execution  Service evolution  distributed ownership</p>
    <p>We focus on complex Web-based systems  Fluctuations in the systems workload  Avoid over-allocation of resources  Provide more efficient systems</p>
    <p>We need fine-grained autonomic capabilities that cover all the systems facets, from their hardware resources to their software</p>
    <p>We exploit and suitably extend ECoWare</p>
  </div>
  <div class="page">
    <p>The ECoWare Initiative Empower the development of holistic self-adaptive systems</p>
    <p>KPI$Processor</p>
    <p>Aggregator</p>
    <p>Analyzer</p>
    <p>Resource( Planner</p>
    <p>Plan(Executor</p>
    <p>Component( Specs</p>
    <p>SLA</p>
    <p>HW(Specs</p>
    <p>ECoWare</p>
    <p>Load Balancer</p>
    <p>Web Servers</p>
    <p>P A</p>
    <p>Load Balancer</p>
    <p>Application Servers</p>
    <p>Databases</p>
    <p>Load Balancer</p>
    <p>requests</p>
    <p>mlCCL(Spec</p>
    <p>Pool of Free Servers</p>
    <p>Running Application</p>
    <p>deploy server</p>
    <p>release server</p>
    <p>P A</p>
    <p>P A</p>
    <p>A</p>
    <p>P A</p>
    <p>P A</p>
    <p>P A</p>
    <p>server</p>
    <p>Monitoring</p>
    <p>Analysis</p>
    <p>Planning</p>
    <p>Execution</p>
    <p>Aggregator</p>
    <p>KPI(Processor</p>
    <p>Analyzer</p>
    <p>Event(Bus</p>
    <p>P</p>
    <p>A</p>
    <p>probe</p>
    <p>actuator</p>
    <p>action message</p>
    <p>Legend</p>
    <p>input</p>
    <p>L. Baresi and S. Guinea Event-based Multi-level Service Monitoring ICWS 2013</p>
    <p>todays focus</p>
    <p>focus of a paper recently submitted to ICSOC</p>
  </div>
  <div class="page">
    <p>Running Example  RUBiS</p>
    <p>Simulates a common auction web site</p>
    <p>HTML, Java Servlets and SQL</p>
    <p>Apache Server for static content  Jboss App Servers for dynamic</p>
    <p>content  MySQL for backend data tier</p>
    <p>Content-aware load balancer performs the routing</p>
    <p>Load Balancer</p>
    <p>JBoss 1</p>
    <p>Apache</p>
    <p>MySQL</p>
    <p>ECoWare</p>
    <p>P</p>
    <p>A</p>
    <p>JBoss 2</p>
    <p>Pool of Free Servers</p>
    <p>E vent B</p>
    <p>us</p>
    <p>P</p>
    <p>A</p>
    <p>P P</p>
    <p>Software Probe Hardware Probe Software Actuator</p>
    <p>A Hardware Actuator</p>
    <p>JBoss 3</p>
    <p>The 95th percentile response time should be within a fixed threshold over a period of time</p>
  </div>
  <div class="page">
    <p>Resource Planner</p>
    <p>server</p>
    <p>Pool of Free Servers</p>
    <p>+ SysConfCurrent AnalyzePerf</p>
    <p>SysConfNew</p>
    <p>RSLA</p>
    <p>Model</p>
    <p>RNew</p>
    <p>RNew satisfies RSLA</p>
    <p>yesno return SysConfNew</p>
    <p>S</p>
    <p>SysConfCurrent = SysConfNew</p>
  </div>
  <div class="page">
    <p>Performance Model  The model considers the apps multiple tiers and multiple levels</p>
    <p>Application Server 1Load Balancer</p>
    <p>Web Server</p>
    <p>DatabaseCPU - 2.66GHz Cache - 6MB RAM - 32GB</p>
    <p>DCPU1 DCache1 DRam1</p>
    <p>Application Server 2</p>
    <p>CPU - 2.66GHz Cache - 6MB RAM - 32GB</p>
    <p>DCPU2 DCache2 DRam2</p>
    <p>DDB</p>
    <p>DWS</p>
    <p>We used JMT as our model solver</p>
  </div>
  <div class="page">
    <p>Calibration of the Performance Model</p>
    <p>We profiled the servlets in Rubis  Selected servlets with different resource usage profiles  Increased resource usage profiles of the servlets to make them more</p>
    <p>realistic</p>
    <p>We collected data regarding the service demands  Apache RT  Database RT</p>
    <p>Wrapped Hibernate  Application server</p>
    <p>Extended HTTPServlet class  Native calls for thread matching</p>
    <p>Modified Linux kernel to measure  # of CPU cycles * CPU cycle time  # of LLC missed * main memory avg. access time (used a free profiler)</p>
  </div>
  <div class="page">
    <p>Workload Number of servers allocated</p>
    <p>Experimental Evaluation: Workload One</p>
    <p>Results:  13.75% fewer server-minutes</p>
    <p>than baseline, and fewer violations</p>
    <p>42.5% fewer server-minutes</p>
    <p>than Singh et al. [19], one minor violation*</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation: Workload Two Workload Number of servers allocated</p>
    <p>Results:  16% fewer server-minutes than</p>
    <p>baseline, and fewer violations  33% fewer server-minutes than</p>
    <p>Singh et al. [19], same violations*</p>
  </div>
  <div class="page">
    <p>Conclusion  Allocation strategies that take into account the resource usage</p>
    <p>profiles of the different requests help increases the accuracy of our performance predictions  allows us to improve the utilization of our infrastructure</p>
    <p>Extend the work to consider hybrid-cloud deployments of Web</p>
    <p>applications  We have already begun working in this direction  Strong focus on distributed and coordinated adaptation</p>
  </div>
</Presentation>
