<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LISA 11 Fine-grained access-control for the Puppet</p>
    <p>configuration language</p>
    <p>Bart Vanbrabant, Joris Peeraer and Wouter Joosen</p>
    <p>DistriNet, Dept. of Computer Science, K.U.Leuven, Belgium</p>
    <p>December 7, 2011</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Systems configuration Context Problems</p>
    <p>Our solution: ACHEL</p>
    <p>Authorising Puppet</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Systems configuration Context Problems</p>
    <p>Our solution: ACHEL</p>
    <p>Authorising Puppet</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
    <p>Malicious configuration</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
  </div>
  <div class="page">
    <p>System configuration tools</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Systems configuration Context Problems</p>
    <p>Our solution: ACHEL</p>
    <p>Authorising Puppet</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>What is ACHEL?</p>
    <p>ACHEL manages access to repositories of configuration specification by implementing access control and enforcing workflows</p>
    <p>fine-grained access control interpreting the semantics of changes</p>
    <p>The actions that needs authorisation are derived automatically  access control is applied at the abstraction level of the configuration specification</p>
    <p>support for workflow in federated infrastructures  a (configuration) language agnostic solution</p>
  </div>
  <div class="page">
    <p>Generating meaningful changes with ACHEL</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Systems configuration Context Problems</p>
    <p>Our solution: ACHEL</p>
    <p>Authorising Puppet</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Puppet</p>
    <p>Authorise changes to the configuration model of a real tool:  System management tool used in production environment  Puppet has an expressive and complex configuration language  Manifests organised in modules  Authorisation based on modules and their file path  Link between contents of module and its name is not enforced</p>
  </div>
  <div class="page">
    <p>Applying ACHEL to Puppet</p>
    <p>Steps to authorise changes the ACHEL way:  Aquire the AST from Puppet  AST contains syntax so normalisation is required  Derive to be authorised actions  Submit request to XACML policy engine  Report result of authorisation</p>
  </div>
  <div class="page">
    <p>AST normalisation</p>
    <p>Define three users with one statement:</p>
    <p>user {[&quot;bart&quot;, &quot;joris&quot;, &quot;wouter&quot;]: }</p>
    <p>Define three users with three statements:</p>
    <p>user {&quot;bart&quot;: } user {&quot;joris&quot;: } user {&quot;wouter&quot;: }</p>
  </div>
  <div class="page">
    <p>Prototype</p>
    <p>Challenges for prototype:  Not all language features supported, some are impossible to support</p>
    <p>Prototype extracts AST from Puppet compiler and normalises it</p>
    <p>The AST is serialised to XML so XPath can be used in policies  Prototype is integrated in a DVCS (Bazaar) to enforce access control</p>
  </div>
  <div class="page">
    <p>Example: Adding vhosts Puppet manifest: # Apache-class class apache { ... }</p>
    <p># vhost definition define apache::vhost ($document_root) {</p>
    <p>file {&quot;/etc/apache2/vhosts-available/${name}&quot;: ensure =&gt; present, docroot =&gt; $document_root,</p>
    <p>} }</p>
    <p>node a { include apache</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Example: Adding vhosts</p>
    <p>User Jdoe adds a virtual host:</p>
    <p># Apache-class class apache {</p>
    <p>apache::vhost {&quot;www.example.com&quot;: docroot =&gt; &quot;/home/jdoe/public_html&quot;,</p>
    <p>} ... }</p>
    <p># vhost definition define apache::vhost ($document_root) {</p>
    <p>file {&quot;/etc/apache2/vhosts-available/${name}&quot;: ensure =&gt; present, docroot =&gt; $document_root,</p>
    <p>} ...</p>
  </div>
  <div class="page">
    <p>Example: Adding vhosts</p>
    <p>Result from matching:</p>
    <p>* Updated: none</p>
    <p>* Inserted: Add member: Resource (title:www.example.com,</p>
    <p>type:apache::vhost) Add parameter: ResourceParam (param:docroot) Add value: String () =&gt; /home/jdoe/public_html</p>
    <p>* Removed: none</p>
  </div>
  <div class="page">
    <p>Example: Adding vhosts XAMCL policy extract (without the namespace clutter) &lt;Policy&gt; &lt;Description&gt;Apache permissions for webuser&lt;/Description&gt; &lt;Target&gt;&lt;Subjects&gt;&lt;Subject&gt;&lt;SubjectMatch&gt; &lt;AttributeValue&gt;webuser&lt;/AttributeValue&gt; &lt;SubjectAttributeDesignator AttributeId=&quot;subject:role&quot; /&gt;</p>
    <p>&lt;/SubjectMatch&gt;&lt;/Subject&gt;&lt;/Subjects&gt;&lt;/Target&gt; &lt;Rule Effect=&quot;Permit&quot;&gt; &lt;Description&gt;Add or remove a vhost&lt;/Description&gt; &lt;Target&gt;&lt;Resources&gt;&lt;Resource&gt;&lt;ResourceMatch&gt; &lt;AttributeValue&gt;//pup:*[@type=&quot;apache::vhost&quot;]&lt;/AttributeValue&gt; &lt;ResourceAttributeDesignator AttributeId=&quot;resource-id&quot; DataType=&quot;xpath-expression&quot; /&gt;</p>
    <p>&lt;/ResourceMatch&gt;&lt;/Resource&gt;&lt;/Resources&gt;&lt;/Target&gt; &lt;/Rule&gt; &lt;Rule Effect=&quot;Permit&quot;&gt; &lt;Target&gt;&lt;Resources&gt;&lt;Resource&gt;&lt;ResourceMatch&gt; &lt;AttributeValue&gt;//pup:*[@type=&quot;apache::vhost&quot;]/pup:*[@param=&quot;docroot&quot;]&lt;/AttributeValue&gt; &lt;ResourceAttributeDesignator AttributeId=&quot;resource-id&quot; DataType=&quot;xpath-expression&quot; /&gt;</p>
    <p>&lt;/ResourceMatch&gt;&lt;/Resource&gt;&lt;/Resources&gt;&lt;/Target&gt; &lt;Condition&gt; &lt;Apply FunctionId=&quot;string-starts-with&quot;&gt;&lt;Apply FunctionId=&quot;string-one-and-only&quot;&gt; &lt;AttributeSelector RequestContextPath=&quot;//pup:*[@param=docroot]/pup:value/text()&quot; /&gt;</p>
    <p>&lt;/Apply&gt; &lt;Apply FunctionId=&quot;string-concatenate&quot;&gt; &lt;AttributeValue&gt;/home/&lt;/AttributeValue&gt; &lt;Apply FunctionId=&quot;string-one-and-only&quot;&gt; &lt;SubjectAttributeDesignator AttributeId=&quot;subject-id&quot; /&gt;</p>
    <p>&lt;/Apply&gt; &lt;/Apply&gt;&lt;/Apply&gt;</p>
    <p>&lt;/Condition&gt; &lt;/Rule&gt;</p>
    <p>&lt;/Policy&gt; 22 / 27</p>
  </div>
  <div class="page">
    <p>Example: Adding vhosts</p>
    <p>First rule from extract:</p>
    <p>&lt;Policy&gt; ... &lt;Rule Effect=&quot;Permit&quot;&gt; &lt;Description&gt;Add or remove a vhost&lt;/Description&gt; &lt;Target&gt;&lt;Resources&gt;&lt;Resource&gt;&lt;ResourceMatch&gt; &lt;AttributeValue&gt;//pup:*[@type=&quot;apache::vhost&quot;] &lt;/AttributeValue&gt;</p>
    <p>&lt;ResourceAttributeDesignator AttributeId=&quot;resource-id&quot; DataType=&quot;xpath-expression&quot; /&gt;</p>
    <p>&lt;/ResourceMatch&gt;&lt;/Resource&gt;&lt;/Resources&gt;&lt;/Target&gt; &lt;/Rule&gt; ...</p>
    <p>&lt;/Policy&gt;</p>
  </div>
  <div class="page">
    <p>Example: Adding vhosts</p>
    <p>Second rule from extract: &lt;Policy&gt; ... &lt;Rule Effect=&quot;Permit&quot;&gt; &lt;Target&gt;&lt;Resources&gt;&lt;Resource&gt;&lt;ResourceMatch&gt; &lt;AttributeValue&gt;//pup:*[@type=&quot;apache::vhost&quot;]/pup:*[@param=&quot;docroot&quot;]&lt;/AttributeValue&gt; &lt;ResourceAttributeDesignator AttributeId=&quot;resource-id&quot; DataType=&quot;xpath-expression&quot; /&gt;</p>
    <p>&lt;/ResourceMatch&gt;&lt;/Resource&gt;&lt;/Resources&gt;&lt;/Target&gt; &lt;Condition&gt; &lt;Apply FunctionId=&quot;string-starts-with&quot;&gt;&lt;Apply FunctionId=&quot;string-one-and-only&quot;&gt; &lt;AttributeSelector RequestContextPath=&quot;//pup:*[@param=docroot]/pup:value/text()&quot; /&gt;</p>
    <p>&lt;/Apply&gt; &lt;Apply FunctionId=&quot;string-concatenate&quot;&gt; &lt;AttributeValue&gt;/home/&lt;/AttributeValue&gt; &lt;Apply FunctionId=&quot;string-one-and-only&quot;&gt; &lt;SubjectAttributeDesignator AttributeId=&quot;subject-id&quot; /&gt;</p>
    <p>&lt;/Apply&gt; &lt;/Apply&gt;&lt;/Apply&gt;</p>
    <p>&lt;/Condition&gt; &lt;/Rule&gt;</p>
    <p>&lt;/Policy&gt;</p>
  </div>
  <div class="page">
    <p>Use unsupported language constructions</p>
    <p>Policy defines what is allowed  Usage of defines or classes can be authorised  Encapsulate unsupported or complex Puppet constructions  Authorise on the container of the unsupported statements</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Systems configuration Context Problems</p>
    <p>Our solution: ACHEL</p>
    <p>Authorising Puppet</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>ACHEL method supports complex languages  Unsupported languages features using encapsulation  Clean AST required  XACML is powerful but hard to use</p>
  </div>
</Presentation>
