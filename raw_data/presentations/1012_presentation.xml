<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Pricing Intra-Datacenter Networks with Over-Committed Bandwidth Guarantee</p>
    <p>Jian Guo1, Fangming Liu1, Tao Wang1, and John C.S. Lui2</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>How to enable (quantified intra-DCN bandwidth</p>
    <p>performance + pricing) for VMs in IaaS clouds?</p>
    <p>SoftBW: Motivation  Idea  Solution  Performance</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>What kind of bandwidth performance &amp;</p>
    <p>pricing do current clouds provide?</p>
  </div>
  <div class="page">
    <p>Performance metrics in IaaS clouds</p>
    <p>Performance vCPU, Memory, GPU, FPGA vCPU, Memory, GPU vCPU, Memory</p>
    <p>CPU Number of cores, CPU model</p>
    <p>(Frequency, Architecture)</p>
    <p>Number of cores,</p>
    <p>CPU model</p>
    <p>Number of cores,</p>
    <p>CPU model</p>
    <p>Memory GB, DDR 3/4 GB GB, DDR 3/4</p>
    <p>Network Low to moderate / Moderate /</p>
    <p>High N/A N/A</p>
    <p>No quantitative network performance No clear definition on VM bandwidth performance and pricing in todays top IaaS clouds</p>
  </div>
  <div class="page">
    <p>Measurements in clouds</p>
    <p>Different clouds</p>
    <p>Same price: 16x difference in performance</p>
    <p>Different VMs</p>
    <p>Performance: Cheap VM &gt; Expensive VM</p>
    <p>Different time</p>
    <p>Varying and highly unpredictable</p>
    <p>Price-performance anomaly</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>Can we guarantee &amp; price bandwidth</p>
    <p>performance?</p>
  </div>
  <div class="page">
    <p>When considering performance &amp; pricing</p>
    <p>Benefit both providers &amp; users</p>
    <p>Over-commitment (OC)</p>
    <p>A economical and practical solution for bandwidth in cloud-scale DCN</p>
    <p>Why Rational</p>
    <p>Opportunity: 99% links &lt; 10% loaded in cloud-scale DCN (SIGCOMM15)</p>
    <p>Worst case performance guaranteed: N OC means 1/N guarantee</p>
    <p>Though, the bandwidth guarantee may fail</p>
    <p>how often tenants may not obtain their paid bandwidth?</p>
  </div>
  <div class="page">
    <p>Analysis on failure rate of bandwidth guarantee at cloud-scale</p>
    <p>Modeling with traffic trace (IMC10)</p>
    <p>n VMs, exponential distribution</p>
    <p>=   =1</p>
    <p>C 1</p>
    <p>1 !</p>
    <p>Low failure rate (OC tolerance)</p>
    <p>If utilization = 10%</p>
    <p>Then, 4x over-commitment (OC):</p>
    <p>&lt; 5% failure</p>
    <p>Providers: increase network utilization &amp; revenue with OC</p>
    <p>Tenants: how to guarantee their benefits (performance, fairness)? 8</p>
    <p>(Sum of guaranteed BW/physical BW at a server)</p>
  </div>
  <div class="page">
    <p>Share bandwidth with over-commitment</p>
    <p>Fulfillment ratio: F= /( )</p>
    <p>Metric for performance guarantee  meet traffic demand while</p>
    <p>maintaining fairness of fulfillment</p>
    <p>Quota for pricing  measure fulfillment per billing cycle</p>
    <p>Fulfillment for scheduling</p>
    <p>VM2 1.1</p>
    <p>VM3</p>
    <p>Packet arrival</p>
    <p>Fulfillment for charging</p>
    <p>Time</p>
    <p>Billing cycle</p>
    <p>BW</p>
    <p>Abstraction</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>How to achieve bandwidth guarantee and</p>
    <p>usage-based pricing under over-commitment?</p>
  </div>
  <div class="page">
    <p>SoftBW overview</p>
    <p>Design goals</p>
    <p>Price-performance consistency</p>
    <p>Over commitment tolerance</p>
    <p>Short flow friendly</p>
    <p>Data plane</p>
    <p>Scheduling: bandwidth</p>
    <p>guarantee with OC</p>
    <p>Work-conserving</p>
    <p>Control plane</p>
    <p>Pricing: usage-based charging</p>
    <p>...</p>
    <p>Control Plane</p>
    <p>Host Server</p>
    <p>Traffic</p>
    <p>Monitor</p>
    <p>VM VM</p>
    <p>Pricing on</p>
    <p>Fulfillment</p>
    <p>Packet</p>
    <p>Scheduling</p>
    <p>vSwitch</p>
    <p>Data Plane</p>
    <p>Fulfillment</p>
    <p>Estimation</p>
    <p>Enforcing</p>
    <p>Requirements</p>
    <p>SoftBW Master</p>
    <p>VMVM</p>
    <p>SoftBW Agent</p>
    <p>C e n tr</p>
    <p>a li z e d</p>
    <p>C o n tr</p>
    <p>o ll e r</p>
    <p>Servers</p>
    <p>Enable provider to take advantage of low network utilization to oversell bandwidth</p>
  </div>
  <div class="page">
    <p>Fulfillment-based scheduling</p>
    <p>Round-robin for each VM queue</p>
    <p>Estimation of fulfillment: F&gt; or &lt;1</p>
    <p>Scheduling of packets: current time vs. time to send (tts)</p>
    <p>Scheduler</p>
    <p>tts2</p>
    <p>tts3</p>
    <p>Time</p>
    <p>tts1</p>
    <p>T im</p>
    <p>e</p>
    <p>v s . tts</p>
    <p>Queues</p>
    <p>VM2</p>
    <p>VM3</p>
    <p>VM1</p>
  </div>
  <div class="page">
    <p>Estimation of fulfillment</p>
    <p>Update: after transmitting each packet</p>
    <p>Fulfillment: F=rate/B, rate=packet size/time</p>
    <p>Expected transmission time: Psize/B</p>
    <p>Inter-departure time: F&lt;1 (delayed) &gt;0; F&gt;1 =  Psize/B&lt;0</p>
    <p>p2p3</p>
    <p>Psize/B</p>
    <p>p1</p>
    <p>Packet delayed Rate=B, F=1</p>
    <p>Real time:</p>
    <p>Time p2</p>
  </div>
  <div class="page">
    <p>Estimation of fulfillment</p>
    <p>Maintain (update):    + , as accumulation from many packets</p>
    <p>0: bandwidth guarantee not satisfied, tts = 0: allow to send</p>
    <p>&lt; 0: rate exceeds bandwidth guarantee, tts = time + P/B</p>
    <p>from positive to negative: from unsatisfied to satisfied,</p>
    <p>tts = time + P/B -</p>
    <p>p2p2p3</p>
    <p>Psize/B</p>
    <p>p1</p>
    <p>&gt;0, F&lt;1</p>
    <p>&lt;0, F&gt;1</p>
    <p>Time p2</p>
  </div>
  <div class="page">
    <p>Scheduling of packets</p>
    <p>tts = 0: not satisfied, allow to send</p>
    <p>0 &lt; tts &lt; current time: missed the expected transmission time</p>
    <p>tts &gt; current time: send if there is residual bandwidth</p>
    <p>Scheduler</p>
    <p>&gt;t</p>
    <p>Time</p>
    <p>T im</p>
    <p>e</p>
    <p>v s . tts</p>
    <p>Queues</p>
    <p>VM2</p>
    <p>VM3</p>
    <p>VM1</p>
  </div>
  <div class="page">
    <p>Pricing model &amp; Performance metrics</p>
    <p>Differentiated performance metrics: different applications</p>
    <p>Usage-based charging: performance-price consistency</p>
    <p>Non-decreasing pricing function: true requirement declaration</p>
    <p>Guarantee Performance Price (e.g.)</p>
    <p>Strict Bandwidth B (&lt; physical bandwidth C) r*(1+B/C)P0</p>
    <p>Dynamic Data (traffic) size S, deadline time T r*(1+S/TC)P1</p>
    <p>Fairness VM-level fairness r*(r/C)P1</p>
    <p>e.g., for strict, if actual rate r &gt; B, then (r-B) is charged as fair share</p>
    <p>May fail under OC but pay less (price-performance consistency): see example in page 24</p>
    <p>P0 is unit price, P1 = P0, &lt;1 to encourage tenants to use dynamic guarantee for reducing guarantee failure</p>
    <p>e.g., real-time jobs,</p>
    <p>deadline jobs,</p>
    <p>delay-tolerant</p>
    <p>background backup</p>
    <p>(Open to customized designs, based on general rules)</p>
    <p>Best effort No bandwidth guarantee Free</p>
  </div>
  <div class="page">
    <p>SoftBW implementation</p>
    <p>...</p>
    <p>Control Plane</p>
    <p>Host Server</p>
    <p>Traffic</p>
    <p>Monitor</p>
    <p>VM VM</p>
    <p>Pricing on</p>
    <p>Fulfillment</p>
    <p>Packet</p>
    <p>Scheduling</p>
    <p>vSwitch</p>
    <p>Data Plane</p>
    <p>Fulfillment</p>
    <p>Estimation</p>
    <p>Enforcing</p>
    <p>Requirements</p>
    <p>SoftBW Master</p>
    <p>VMVM</p>
    <p>SoftBW Agent</p>
    <p>A SDN based solution</p>
    <p>Pricing</p>
    <p>Control plane application</p>
    <p>Centralized control</p>
    <p>Opendaylight platform</p>
    <p>Scheduling (bandwidth allocation)</p>
    <p>Data plane function</p>
    <p>Distributed scheduling on each</p>
    <p>server</p>
    <p>Open vSwitch</p>
    <p>C e</p>
    <p>n tr</p>
    <p>a li z e</p>
    <p>d</p>
    <p>C o</p>
    <p>n tr</p>
    <p>o ll e</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>How efficiently does SoftBW allocate bandwidth</p>
    <p>under over-commitment?</p>
    <p>What is the impact of over-commitment on the</p>
    <p>network utilization and guarantee failure?</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Comparison: rate-limit based bandwidth allocation</p>
    <p>ElasticSwitch, Best effort (no performance guarantee)</p>
    <p>Testbed: performance of SoftBW</p>
    <p>14 servers, KVM and Open vSwitch, 1Gbps NIC</p>
    <p>Simulator: impact of over-commitment</p>
    <p>2,000 servers, each server with 4 VMs, 1s interval</p>
    <p>Traffic trace:</p>
    <p>Based on the distribution in existing measurement work (IMC11, SIGCOMM15)</p>
  </div>
  <div class="page">
    <p>Performance: bandwidth allocation</p>
    <p>SoftBW guarantees fairness under over-commitment</p>
    <p>Not enough bandwidth: ES, best</p>
    <p>effort fail to achieve fairness Sufficient bandwidth: achieve</p>
    <p>bandwidth guarantee 20</p>
    <p>physical bandwidth: 1 Gpbs 3 co-located VMs: each 450 Mbps BW guarantee</p>
    <p>physical bandwidth: 1 Gpbs</p>
  </div>
  <div class="page">
    <p>Performance: short flows</p>
    <p>Quickly obtain the bandwidth: improve short flow performance</p>
    <p>(completion time) by 2.8x - 4.5x</p>
    <p>ES: completion time less than the</p>
    <p>update interval (e.g. 50ms) of rate-limit</p>
    <p>based solution  hurt short flows</p>
    <p>SoftBW: packets in a queue can be</p>
    <p>scheduled in each round</p>
    <p>short flows friendly</p>
  </div>
  <div class="page">
    <p>Over-commitment: utilization</p>
    <p>Improve about 3.9x bandwidth utilization with 4x OC</p>
    <p>Overall bandwidth utilization</p>
    <p>Traffic without OC: 9.5%</p>
    <p>bandwidth utilization</p>
  </div>
  <div class="page">
    <p>Over-commitment: failure rate</p>
    <p>Dynamic guarantee: only 1.55% failure rate with 4x OC</p>
    <p>Worst performance 2x deadline</p>
  </div>
  <div class="page">
    <p>Summary: A feasibility study for</p>
    <p>SoftBW:</p>
    <p>How to enable (quantified bandwidth performance + pricing)</p>
    <p>for cloud VMs  Beneficial for both providers and tenants</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Fangming Liu: http://grid.hust.edu.cn/fmliu/</p>
    <p>Cloud Datacenter &amp; Green Computing/Communications research group</p>
    <p>Huazhong University of Science &amp; Technology</p>
  </div>
  <div class="page">
    <p>Performance: overhead</p>
    <p>SoftBW involves very little overhead</p>
    <p>CPU: 10Gbps transmission at MTU</p>
    <p>packet size costs 5.1% Latency: no obvious increase as</p>
    <p>compared with 350 s RTT</p>
  </div>
  <div class="page">
    <p>Performance: fast convergence</p>
    <p>SoftBW converges in about 20 milliseconds</p>
    <p>TCP vs. UDP: the rate of VMs</p>
    <p>Throughput is stable</p>
  </div>
  <div class="page">
    <p>Over-commitment: failure rate</p>
    <p>Strict guarantee: only 8.3% failure rate with 4x OC</p>
    <p>simulation time: 600s)</p>
    <p>Worst performance 10s failure</p>
  </div>
  <div class="page">
    <p>Summary: position of SoftBW in the literature</p>
    <p>Bandwidth Allocation</p>
    <p>Performance Model VM Placement Rate Enforcement</p>
    <p>Hose model, VOC, Pipe</p>
    <p>model, TAG model</p>
    <p>E.g., Oktpus,</p>
    <p>Proteus , CloudMirror</p>
    <p>Reservation</p>
    <p>E.g., Oktpus, static,</p>
    <p>none work-conserving,</p>
    <p>not efficient</p>
    <p>E.g., ElasticSwtich, inefficient</p>
    <p>for short flows, unavailable</p>
    <p>under over commitment</p>
    <p>Dynamic Rate-limit Packet Scheduling</p>
    <p>SoftBW, pricing and</p>
    <p>guarantee for bandwidth</p>
    <p>over commitment</p>
    <p>+ +</p>
  </div>
  <div class="page">
    <p>Summary: position of SoftBW</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Q: The novelty of our paper as compared to existing work. The</p>
    <p>contribution of this work.</p>
    <p>A: We focus on addressing price-performance anomaly and over</p>
    <p>commitment of bandwidth guarantee. We have our own contributions.</p>
    <p>First, existing work does not consider these two goals. Mostly, they</p>
    <p>focus on the efficiency of bandwidth allocation (also, they assume</p>
    <p>not over-subscribed access BW). Second, as shown in our</p>
    <p>experiments, existing rate-limit based solution in data center</p>
    <p>bandwidth allocation cannot work well for fairness and short flows,</p>
    <p>under over commitment. Third, they do not provide a pricing strategy</p>
    <p>(via a coherent fulfillment metric to co-design scheduling &amp; pricing) to</p>
    <p>guarantee price-performance consistency. 31</p>
  </div>
  <div class="page">
    <p>Assumptions &amp; focus</p>
    <p>Assumes the datacenter fabric to be a non-blocking switch [10, 11, 7], and our main focus is to schedule the traffic at the virtual ports connected to VMs</p>
    <p>Our bandwidth allocation focuses on end-based rate control</p>
    <p>The choice comes from the fact that todays datacenters see rapid advances</p>
    <p>in achieving full bisection bandwidth [8, 9], and the providers have a growing</p>
    <p>concern about the over committed access bandwidth on each server rather</p>
    <p>than the aggregation and core level.</p>
    <p>By leveraging the software virtual switch at each server, the cost of</p>
    <p>implementation can be reduced and the scale of rate control is limited to the</p>
    <p>number of VMs on each server.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Q1: Can you explain true requirement?</p>
    <p>Q2: Why you use non-decreasing pricing function?</p>
    <p>A: For example, when transmitting 1 Gb data, using 100 Mbps</p>
    <p>bandwidth will cost 10 seconds, while using 200 Mbps bandwidth</p>
    <p>only costs 5 seconds. Both situations cost 1000P, where P denotes</p>
    <p>the price of using 1 Mbps for 1 seconds. Hence, to keep</p>
    <p>performance-price consistency, the unit price of higher bandwidth</p>
    <p>guarantee should also be higher. In this way, tenants cannot declare</p>
    <p>higher bandwidth than their requirements to achieve higher</p>
    <p>performance under the same price. We call this true requirement.</p>
    <p>Thats why we use non-decreasing pricing function.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Q: how bandwidth will be charged when failed or over-fulfilled, for</p>
    <p>example, exceeding the strict bandwidth guarantee or missing the</p>
    <p>deadline?</p>
    <p>A: For strict guarantee, traffic that exceeds bandwidth guarantee will</p>
    <p>be charged the same as the pricing of fairness guarantee, since it</p>
    <p>only gets a fair sharing.</p>
    <p>For dynamic guarantee, traffic that exceeding the deadline will not be</p>
    <p>charged, since the provider does not realize their SLA.</p>
    <p>All these strategies are used to guarantee price-performance</p>
    <p>consistency.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Q: How you realize dynamic guarantee? Why it is called dynamic</p>
    <p>guarantee?</p>
    <p>A: For dynamic guarantee, the underlying implementation is similar with</p>
    <p>strict guarantee. But we update the guaranteed bandwidth in each billing</p>
    <p>cycle, by dividing the residual data S with residual transmission time t. The</p>
    <p>guarantee is dynamically adjusted according to the available bandwidth. If</p>
    <p>there is residual bandwidth on the server, the VM can utilize it and reduce</p>
    <p>the guarantee in the next update. As a result, the total bandwidth</p>
    <p>guarantee on a server is reduced, and the probability of guarantee failure</p>
    <p>also decreases. If the bandwidth is not guaranteed for some periods, the</p>
    <p>VM can increase the guarantee and still finish the transmission within the</p>
    <p>expected time.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Q: How does SoftBW interact with the underlying TCP protocol? Will</p>
    <p>it make TCP unstable?</p>
    <p>A: As we have shown in the experiments, the overhead on RTT is</p>
    <p>about 1.9us. This is negligible as compared with the round-trip-time</p>
    <p>between VMs. It is even less than the jitter of RTT in real systems. So, it</p>
    <p>will not interfere the underlying TCP flows.</p>
    <p>Also, in our experiment on convergence, the throughput of the TCP flow is</p>
    <p>very stable.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Q: Do you have an indication that increasing the utilization in</p>
    <p>the network by 3x would not first hit the limits of other resources,</p>
    <p>e.g., CPU or memory?</p>
    <p>A: In real-world situation, this does depend on applications. This</p>
    <p>may happen when the application is CPU or memory intensive.</p>
    <p>However, such applications are beyond our discussion. For</p>
    <p>applications using network resource, filling up 10 Gbps</p>
    <p>bandwidth needs only one CPU core (with 1500B MTU size). In</p>
    <p>such application scenario, SoftBW will benefit the network</p>
    <p>utilization for the providers. Hence, in our simulation, we only</p>
    <p>consider the bandwidth resource. 37</p>
  </div>
</Presentation>
