<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Memory-Centric Data Storage for Mobile Systems</p>
    <p>Jinglei Ren, Mike Liang, Yongwei Wu, Thomas Moscibroda</p>
  </div>
  <div class="page">
    <p>Two things you may dislike most</p>
    <p>about your smartphone</p>
    <p>Battery drain Low responsiveness 1</p>
  </div>
  <div class="page">
    <p>But do you know</p>
    <p>What Is Behind you?!</p>
    <p>an app doing</p>
    <p>Twitters fsync() system calls</p>
    <p>Storage impairs both energy efficiency and responsiveness!</p>
    <p>(sec.)</p>
  </div>
  <div class="page">
    <p>Traditional Design</p>
    <p>FS</p>
    <p>DB Page Cache (memory)</p>
    <p>(flash)</p>
    <p>flush/5s fsync()</p>
  </div>
  <div class="page">
    <p>Traditional Design</p>
    <p>Programmers dilemma</p>
    <p>POSIX The fsync() function shall not return until the system has completed that action or until an error is detected.</p>
    <p>Old-fashioned design</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc()malloc()</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc()</p>
    <p>malloc() malloc()</p>
    <p>malloc()</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
    <p>FS</p>
    <p>DB Page Store</p>
    <p>(memory)</p>
    <p>(flash)</p>
    <p>checkpoint</p>
    <p>Flash storage vs. DRAM residence: Can we find a sweet spot between the two?</p>
  </div>
  <div class="page">
    <p>Insight I</p>
    <p>Storing app data on smartphone memory is not as risky as it sounds.</p>
    <p>A smartphone is self-contained,i.e., batterybacked.</p>
    <p>System-wise crash is rare. Our survey: only 6% users experienced more than once per month.</p>
    <p>Our case studies: 54 out of top 62 free apps in Google Play are vulnerable to local data loss.</p>
  </div>
  <div class="page">
    <p>Insight I</p>
    <p>Storing app data on smartphone memory is not as risky as it sounds.</p>
    <p>A smartphone is self-contained,i.e., batterybacked.</p>
    <p>System-wise crash is rare. Our survey: only 6% users experienced more than once per month.</p>
    <p>Our case studies: 54 out of top 62 free apps in Google Play are vulnerable to local data loss.</p>
    <p>What information do we collect? This can include your name, profile photo, Pins, comments, likes, email address, and any other information you provide us.</p>
    <p>Buddy, I am skiving off USENIX ATC. Dont tell my boss!</p>
    <p>Buddy, I am skiving off USENIX ATC. Dont tell my boss!</p>
  </div>
  <div class="page">
    <p>System Design: Mechanism</p>
    <p>Versioned Cache Transaction (VCT)</p>
    <p>Introducing transactions to OS page cache</p>
    <p>Basic life cycle:</p>
    <p>Open a VCT for certain files</p>
    <p>Perform Copy-on-Write for dirty pages</p>
    <p>Coalesce writes on these new versions of pages</p>
    <p>Close a VCT according to our policy</p>
    <p>VCTs of different apps are independent, for optimization purpose.</p>
  </div>
  <div class="page">
    <p>Insight II</p>
    <p>Memory capacity on smartphones is ample enough for app data storage.</p>
    <p>D R</p>
    <p>A M</p>
    <p>C a</p>
    <p>p a</p>
    <p>c it y (</p>
    <p>M B</p>
    <p>)</p>
    <p>Year</p>
    <p>Nokia N70</p>
    <p>Samsung i530</p>
    <p>Samsung i600</p>
    <p>Nokia N97</p>
    <p>HTC Hero</p>
    <p>Nexus One</p>
    <p>Samsung Galaxy S6</p>
    <p>Samsung F700</p>
    <p>HTC Dream Samsung B7320</p>
    <p>HTC Desire HTC Sensation</p>
    <p>Samsung S3</p>
    <p>Samsung Note 2 Samsung Note 3</p>
  </div>
  <div class="page">
    <p>System Design: Mechanism</p>
    <p>MobiFS components</p>
  </div>
  <div class="page">
    <p>Insight III</p>
    <p>Reducing the amount of data flushed to flash is a key to save app energy.</p>
    <p>Our measurement: the overall read energy is only 6.3% of write energy</p>
    <p>The amount of data to flush, rather than the number of batches, is the dominant factor. Our measurement: writing 40 MB data in batches ranging from 4 to 40 MB results in a net energy consumption difference within 1.5%.</p>
  </div>
  <div class="page">
    <p>Insight V</p>
    <p>App I/O patterns suggest adaptive policies to balance the staleness-energy tradeoff, which can be achieved in a quantitative way.</p>
    <p>S a</p>
    <p>v in</p>
    <p>g %</p>
    <p>Staleness (Unified)</p>
    <p>Facebook: 0-11.4MB Twitter: 0-156.2MB</p>
    <p>GoogleMaps: 0-175.8MB Browser: 0-9.5MB</p>
  </div>
  <div class="page">
    <p>System Design: Policy</p>
    <p>Tradeoff Point Location</p>
    <p>New metric for energy efficiency: the e curve e = coalesced data size / staleness</p>
    <p>Principle: reduce data staleness unless the otherwise increases energy efficiency.</p>
    <p>Peak detection algorithm:</p>
    <p>Detection window</p>
    <p>Incremental linear regression</p>
    <p>Threshold for gradient (not necessarily 0)</p>
  </div>
  <div class="page">
    <p>System Design: Policy</p>
    <p>Tradeoffs between three objectives: data staleness, energy efficiency and app responsiveness.</p>
    <p>The tradeoff point location algorithm only closes a transaction, making it ready to be checkpointed.</p>
    <p>Responsiveness-oriented policy: when to ckpt.</p>
  </div>
  <div class="page">
    <p>Insight IV</p>
    <p>Relaxing the timing of flushes is a key to app responsiveness.</p>
    <p>Prior work has shown the implication of fsync() [Jeong et al. ATC13, Lee et al. EMSOFT12] and background flushing [Kim et al. FAST12, Nguyen et al. UbiComp14].</p>
    <p>What is the right timing for flushing? Our measurement: when the device is idle. Standby is not good timing  leading to 129% extra energy consumption</p>
  </div>
  <div class="page">
    <p>System Design: Policy</p>
    <p>Interval Prediction</p>
    <p>Rationale: predict according to history</p>
    <p>Last min policy</p>
    <p>Pessimistic in prediction, with least conflicts</p>
    <p>Limiting flush data size</p>
    <p>Last average policy</p>
    <p>Incurring more conflicts</p>
    <p>Enabling larger flush data size</p>
  </div>
  <div class="page">
    <p>System Design: Policy</p>
    <p>Interval Prediction</p>
    <p>To learn two modes in user interaction</p>
  </div>
  <div class="page">
    <p>Implementation and Evaluation</p>
    <p>A working prototype</p>
    <p>Android 4.1 (Linux 3.0.31)</p>
    <p>Integrated with either Ext4 (journaling data) or Btrfs (COW)</p>
    <p>Experiments</p>
    <p>Traces from real users</p>
    <p>Benchmarks + real apps (monkeyrunner)</p>
    <p>Use real devices: Samsung Galaxy Premier I9260 (dual-core 1.5 GHz CPU, 1 GB RAM);</p>
  </div>
  <div class="page">
    <p>Evaluation: Energy</p>
    <p>With ten most popular apps (by geo. mean):</p>
    <p>MobiFS reduces the amount of flush data by 53.0% compared to Ext4.</p>
    <p>S a</p>
    <p>v in</p>
    <p>g %</p>
    <p>Facebook: Staleness (MB)</p>
    <p>Ideal Ext4</p>
    <p>MobiFS 0</p>
    <p>S a</p>
    <p>v in</p>
    <p>g %</p>
    <p>Twitter: Staleness (MB)</p>
    <p>Ideal Ext4</p>
    <p>MobiFS</p>
  </div>
  <div class="page">
    <p>Evaluation: Energy</p>
    <p>Three representatives of real apps: Browser (low freq. of fsync), Facebook (middle freq. of fsync), Twitter (high freq. of fsync).</p>
    <p>On average, device energy consumption is reduced by 35.8% compared to Ext4.</p>
    <p>Browser Facebook Twitter</p>
    <p>E n</p>
    <p>e rg</p>
    <p>y (</p>
    <p>J )</p>
    <p>Ext4 MobiFS</p>
  </div>
  <div class="page">
    <p>Evaluation: Responsiveness</p>
    <p>Seq.: Write Read</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Ext4 MobiFS</p>
    <p>On average, 18.8 filesystem I/O throughput.</p>
    <p>Rand: Write Read 1</p>
    <p>IO P</p>
    <p>S</p>
    <p>Ext4 MobiFS</p>
  </div>
  <div class="page">
    <p>Evaluation: Responsiveness</p>
    <p>On average, 11.2 database transaction throughput.</p>
    <p>Insert Update Delete</p>
    <p>T ra</p>
    <p>n s .</p>
    <p>p e</p>
    <p>r S</p>
    <p>e c .</p>
    <p>(T P</p>
    <p>S )</p>
    <p>Ext4 MobiFS</p>
  </div>
  <div class="page">
    <p>Evaluation: Responsiveness</p>
    <p>On average, user operation delay is reduced by 51.6%.</p>
    <p>Browser Facebook Twitter</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Ext4 MobiFS</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Decouple of durability and consistency</p>
    <p>xsyncfs [OSDI06], OptFS [SOSP13], Blizzard [NSDI14], TxCache [OSDI10], etc.: different domains; static durability guarantee (e.g., up to x seconds of data loss).</p>
    <p>MobiFS: transactions in OS page cache; adaptive tradeoff for different mobile apps/users.</p>
    <p>Energy optimizations</p>
    <p>SmartStorage [UbiComp13]: read/write ratio; 6% ~ 9% slowdown for energy saving</p>
    <p>Coop-I/O [OSDI02]: deferrable requests</p>
    <p>MobiFS: changed design rationale; best performance 24</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We propose a memory-centric storage, based on our new insights in the mobile system design.</p>
    <p>We trade off data durability for energy efficiency and app responsiveness, in a quantitative manner.</p>
    <p>We introduce transactions to the OS page cache and implement MobiFS, to support the tradeoff transparently.</p>
    <p>We achieve: (1) over one order of magnitude improvement in IO performance; (2) over 1/2 and 1/3 reduction in energy consumption and operation delay, respectively.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>jinglei@ren.systems</p>
  </div>
</Presentation>
