<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>How Computers Work</p>
    <p>Rex Page University of Oklahoma</p>
    <p>work supported by National Science Foundation Grant 1016532</p>
    <p>Computational Thinking for Everyone</p>
    <p>Ruben Gamboa University of Wyoming</p>
    <p>Trends in Functional Programming in Education  St Andrews UK, 11 June 2012</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Applied Logic for HW and SW  2006 - present Boolean algebra, induction, rigorous proofs Reasoning about FP software and digital circuits Required course for CS students at OU Arts and Sciences students enroll occasionally</p>
    <p>Literature, Linguistics, Philosophy, Physics, Chemistry,</p>
    <p>History</p>
    <p>June 2012 How Computers Work: Computational Thinking 2</p>
    <p>Honors Program, University of Oklahoma Add-on for any discipline, requires 3.4 GPA (out of 4.0) Two perspectives courses required (over 20 offered) New in 2011: How Computers Work: Logic in Action</p>
    <p>AL + some FP + popular apps + term paper  Karnaugh etc  First technical course in perspectives classification</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>HCW: Logic in Action, honors perspectives course 36 students so far (17 in 2011, 19 in 2012)</p>
    <p>Demographics</p>
    <p>June 2012 How Computers Work: Computational Thinking 3</p>
    <p>Science 44%</p>
    <p>Humanities 22%</p>
    <p>Engineering 31% EE</p>
    <p>MechE CS</p>
    <p>CompE ChemE</p>
    <p>Linguistics Business</p>
    <p>Drama Letters</p>
    <p>EconomicsHistory Psychology</p>
    <p>Philosophy</p>
    <p>Chemistry Physics</p>
    <p>Biochemistry Microbiology</p>
    <p>Meteorology</p>
    <p>all exam scores  90%  except for 3 sci/engr and 3 humanities students</p>
    <p>Average Exam Scores Highly motivated, talented</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Boolean Equations</p>
    <p>June 2012 How Computers Work: Computational Thinking 4</p>
    <p>x  True = x { identity} x  (y  z) = (x  y)  (x  z) { distributive} (x  y) = ( x)  ( y) { deMorgan} x  (y  z) = (x  y)  z {Currying} (x  y)  y = y { absorption} False  True { truth table entry}  50+ equations derived in lectures, homework, exams</p>
    <p>Derived Equations</p>
    <p>x  False = x { identity} x  True = True { null} x  y = y  x { commutative} (x  y)  z = x  (y  z) { associative} x  (y  z) = (x  y)  (x  z) { distributive} x  y = ( x)  y {implication} (x  y) = ( x)  ( y) { deMorgan} x  x = x { idempotent} x  x = True {self-implication} ( x) = x {double negation}</p>
    <p>Axioms</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Boolean Formulas  Circuits</p>
    <p>June 2012 How Computers Work: Computational Thinking 5</p>
    <p>x</p>
    <p>y (x)(y)</p>
    <p>x y (x  y)</p>
    <p>How Computers Work</p>
    <p>Computers = Logic Engines two domains, same methods</p>
    <p>physical representation of Boolean formula</p>
    <p>Derivation</p>
    <p>(x  y)  y = y { absorption}</p>
    <p>(x  y)  y = (x  y)  (y  False) { identity} = (y  x)  (y  False) { commutative} = y  (x  False) { distributive} = y  False { null} = y { identity}</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Software Equations</p>
    <p>June 2012 How Computers Work: Computational Thinking 6</p>
    <p>(first (cons x xs)) = x (rest (cons x xs)) = xs (cons x0 [x1 x2  xn]) = [x0 x1 x2  xn] (len nil) = 0 (len (cons x xs)) = (+ 1 (len xs)) (append nil ys) = ys (append (cons x xs) ys) = (cons x (append xs ys)) (append xs (append ys zs)) = (append (append xs ys) zs) (len(append xs ys)) = (+ (len xs) (len ys))</p>
    <p>Testable Properties</p>
    <p>(defproperty append-is-associative (xs :value (random-list-of (random-integer)) ys :value (random-list-of (random-integer)) zs :value (random-list-of (random-integer)))</p>
    <p>(equal (append xs (append ys zs)) (append (append xs ys) zs))))</p>
    <p>(defproperty append-preserves-lens (xs :value (random-list-of (random-integer)) ys :value (random-list-of (random-integer)))</p>
    <p>(= (len(append xs ys)) (+ (len xs) (len ys))))</p>
    <p>Dracula Tests</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Reasoning about Software</p>
    <p>June 2012 How Computers Work: Computational Thinking 7</p>
    <p>(first (cons x xs)) = x {first} (rest (cons x xs)) = xs {rest} (cons x0 [x1 x2  xn]) = [x0 x1 x2  xn] {cons} (len nil) = 0 {len0} (len (cons x xs)) = (+ 1 (len xs)) {len1} (append nil ys) = ys {app0} (append (cons x xs) ys) = (cons x (append xs ys)) {app1}</p>
    <p>many other assumed properties (definitional equations)</p>
    <p>Axioms</p>
    <p>Derived Equations</p>
    <p>(append xs (append ys zs)) = (append (append xs ys) zs) (len (append xs ys)) = (+ (len xs) (len ys))</p>
    <p>many properties derived from definitional equations</p>
    <p>(len (append [x1 x2  xn+1] ys)) = (len (append (cons x1 [x2  xn+1]) ys)) {cons} = (len (cons x1 (append [x2  xn+1] ys))) {app1} = (+ 1 (len (append [x2  xn+1] ys))) {len1} = (+ 1 (+ (len [x2  xn+1]) (len ys))) {ind hyp}  algebraic reasoning from axioms and derived equations  = (+ (len [x1 x2  xn+1]) (len ys)) {cons}</p>
    <p>Derivation</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>(defproperty append-is-associative (xs :value (random-list-of (random-integer)) ys :value (random-list-of (random-integer)) zs :value (random-list-of (random-integer)))</p>
    <p>(equal (append xs (append ys zs)) (append (append xs ys) zs))))</p>
    <p>(defproperty append-preserves-lens (xs :value (random-list-of (random-integer)) ys :value (random-list-of (random-integer)))</p>
    <p>(= (len (append xs ys)) (+ (len xs) (len ys))))</p>
    <p>Mechanized Logic</p>
    <p>June 2012 How Computers Work: Computational Thinking 8</p>
    <p>Dracula employs ACL2 theorem prover to verify properties</p>
    <p>(first (cons x xs)) = x {first} (rest (cons x xs)) = xs {rest} (cons x0 [x1 x2  xn]) = [x0 x1 x2  xn] {cons} (len nil) = 0 {len0} (len (cons x xs)) = (+ 1 (len xs)) {len1} (append nil ys) = ys {app0} (append (cons x xs) ys) = (cons x (append xs ys)) {app1}</p>
    <p>Axioms</p>
    <p>ACL2 Theorems</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Programming</p>
    <p>June 2012 How Computers Work: Computational Thinking 9</p>
    <p>(bits 0) = nil {b0} (bits (n+1) ) = (cons (mod (n+1) 2) (bits(floor (n+1) 2) {b1}</p>
    <p>(numb nil) = 0 {n0} (numb (cons x xs)) = x + 2(numb xs) {n1}</p>
    <p>Properties (defun bits (n) ; (bits n) = binary numeral for n (if (zp n) ; (numb(bits n)) = n</p>
    <p>nil ; {b0} (cons (mod n 2) (bits (floor n 2))))) ; {b1}</p>
    <p>(defun numb (xs) ; xs = [x0, x1, ... xw-1] (if (consp xs) ; (numb xs) = 20x0 + 21 x1 + ... + 2w-1 xw-1</p>
    <p>(numb (+ (first xs) ; {n1} (* 2 (numb(rest xs))))</p>
    <p>ACL2 Notation (program)</p>
    <p>Properties that define functions  Comprehensive  cover all cases  Consistent  no conflicts in overlapping cases  Computational  circular references closer to non-circular case</p>
    <p>The 3 Cs</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Ripple-Carry Adder Circuit</p>
    <p>June 2012 How Computers Work: Computational Thinking 10</p>
    <p>input carry c0 = 0</p>
    <p>full adder</p>
    <p>x1 y1</p>
    <p>s1</p>
    <p>c2full adder</p>
    <p>x0 y0</p>
    <p>s0</p>
    <p>c1c0 fulladder</p>
    <p>xw-1 yw-1</p>
    <p>sw-1</p>
    <p>ccw-1</p>
    <p>adder circuit</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>xw-1 x1 x0. . .</p>
    <p>yw-1 y1 y0. . .</p>
    <p>c0</p>
    <p>sw-1 s1 s0. . .c</p>
    <p>+</p>
    <p>cw-1 c1. . .</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Expected Property of Circuit</p>
    <p>June 2012 How Computers Work: Computational Thinking 11</p>
    <p>full adder</p>
    <p>x1 y1</p>
    <p>s1</p>
    <p>c2full adder</p>
    <p>x0 y0</p>
    <p>s0</p>
    <p>c1c0 fulladder</p>
    <p>xw-1 yw-1</p>
    <p>sw-1</p>
    <p>ccw-1</p>
    <p>adder circuit</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>xw-1 x1 x0. . .</p>
    <p>yw-1 y1 y0. . .</p>
    <p>c0</p>
    <p>sw-1 s1 s0. . .c</p>
    <p>+</p>
    <p>cw-1 c1. . .</p>
    <p>+ xw-12w-1 + . . . + x121 + x020</p>
    <p>+ yw-12w-1 + . . . + y121 + y020</p>
    <p>c020</p>
    <p>= c2w + sw-12w-1 + . . . + s121 + s020</p>
    <p>Expected Property</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Algebraic Model  Adder Circuit</p>
    <p>June 2012 How Computers Work: Computational Thinking 12</p>
    <p>fu ll</p>
    <p>ad de</p>
    <p>r c irc</p>
    <p>ui t x</p>
    <p>y cin</p>
    <p>cin 0 0 0 0 1 1 1 1</p>
    <p>x 0 0 1 1 0 0 1 1</p>
    <p>y 0 1 0 1 0 1 0 1</p>
    <p>s 0 1 1 0 1 0 0 1</p>
    <p>cout 0 0 0 1 0 1 1 1</p>
    <p>add([ ], [ ], c0) = ([ ], c0) {add, w = 0}</p>
    <p>add([x0, x1,  xw-1], [y0, y1,  yw-1], c0) = ([s0, s1,  sw-1], c) {add, w  1} where (s0, c1) = full-adder(x0, y0, c0)</p>
    <p>([s1,  sw-1], c) = add([x1,  xw-1], [y1,  yw-1], c1)</p>
    <p>+ xw-12w-1 + . . . + x121 + x020</p>
    <p>+ yw-12w-1 + . . . + y121 + y020</p>
    <p>c020</p>
    <p>= c2w + sw-12w-1 + . . . + s121 + s020</p>
    <p>Expected Property</p>
    <p>full-adder(x, y, cin) = (s, cout) {full-adder} where s = xor-gate(p, cin) p = xor-gate(x, y)</p>
    <p>cout = or-gate(q, r) q = and-gate(cin, p) r = and-gate(x, y)</p>
    <p>Derive property from algebraic model</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Model in ACL2 Notation</p>
    <p>June 2012 How Computers Work: Computational Thinking 13</p>
    <p>add([ ], [ ], c0) = ([ ], c0) {add, w = 0}</p>
    <p>add([x0, x1,  xw-1], [y0, y1,  yw-1], c0) = ([s0, s1,  sw-1], c) {add, w  1} where (s0, c1) = full-adder(x0, y0, c0)</p>
    <p>([s1,  sw-1], c) = add([x1,  xw-1], [y1,  yw-1], c1)</p>
    <p>+ xw-12w-1 + . . . + x121 + x020</p>
    <p>+ yw-12w-1 + . . . + y121 + y020</p>
    <p>c020</p>
    <p>= c2w + sw-12w-1 + . . . + s121 + s020</p>
    <p>Expected Property</p>
    <p>(defun add (x y c0) ; x = [x0, x1, ... xw-1], y = [y0, y1, ... yw-1] (if (consp x) ; (add x y c0) = ([s0, s1, ... sw-1], c)</p>
    <p>(let* ((x0 (first x)) (xs (rest x)) (y0 (first y)) (ys (rest y)) (a0 (full-adder x0 y0 c0)) (s0 (first a0)) (c1 (second a0)) (a (add xs ys c1)) (ss (first a)) (c (second a)))</p>
    <p>(list (cons s0 ss) c)) ; {add, w  1} (list nil c0))) ; {add, w = 0}</p>
    <p>model in ACL2 notation</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Verification by Mechanized Logic</p>
    <p>June 2012 How Computers Work: Computational Thinking 14</p>
    <p>(defproperty expected-property-of-add (c0 :value (random-between 0 1) x :value (random-list-of (random-between 0 1)) y :value (random-list-of (random-between 0 1) :size (len x)))</p>
    <p>(implies (= (len x) (len y)) (let* ((a (add x y c0))</p>
    <p>(s (first a)) (c (second a))) (= (+ (numb(list c0)) (numb x) (numb y))</p>
    <p>(numb(append s (list c)))))))</p>
    <p>+ xw-12w-1 + . . . + x121 + x020</p>
    <p>+ yw-12w-1 + . . . + y121 + y020</p>
    <p>c020</p>
    <p>= c2w + sw-12w-1 + . . . + s121 + s020</p>
    <p>Expected Property</p>
    <p>(defun numb (x) ; x = [x0, x1, ... xw-1] (if (consp x) ; (numb x) = 20x0 + 21 x1 + ... + 2w-1 x0</p>
    <p>(if (= (first x) 1) ; w  1 (+ 1 (* 2 (numb(rest x)))) ; x0 = 1 (* 2 (numb(rest x)))) ; x0 = 0</p>
    <p>expected property in ACL2 notation</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Google Search trees Map/reduce for distributed computing</p>
    <p>Facebook Sharding Cassandra NoSQL databases</p>
    <p>Massive Scale Computing</p>
    <p>June 2012 How Computers Work: Computational Thinking 15</p>
    <p>Massive scale makes engineering necessary Ideas described in terms of FP concepts</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Central themes Equations Algebraic models and reasoning</p>
    <p>Prerequisite: basic algebra (standard college prep)</p>
    <p>Course Themes and Ideas</p>
    <p>June 2012 How Computers Work: Computational Thinking 16</p>
    <p>Big ideas Creativity (proofs) Abstraction (functions) Data (representations) Algorithms (binary arith, search trees, ) Programming (3 Cs) Impact (Google, Facebook)</p>
  </div>
  <div class="page">
    <p>Rex Page and Ruben GamboaTFPIE</p>
    <p>Big ideas Creativity Abstraction Data Algorithms Programming Impact Internet</p>
    <p>College Board AP Course</p>
    <p>Computational Thinking: CS Principles  College-prep curriculum  General education elective  Secondary school or early college</p>
    <p>Computational Thinking AP Course</p>
    <p>June 2012 How Computers Work: Computational Thinking 17</p>
    <p>Central themes Equations Algebraic models</p>
    <p>Prerequisite: basic algebra (standard college prep)</p>
    <p>Positive Attributes of This Approach</p>
    <p>Depth and substance  Challenging, even for good students  Accessible to all college-bound students</p>
  </div>
  <div class="page">
    <p>The End</p>
  </div>
</Presentation>
