<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fangqi Sun, Liang Xu, Zhendong Su</p>
    <p>Static Detection of Access Control Vulnerabilities</p>
    <p>in Web Applications</p>
  </div>
  <div class="page">
    <p>Access Control Vulnerability</p>
    <p>Failure to guard privileged resource  A chain is as strong as its weakest link</p>
    <p>14.15% web applications have it [07 WASC]  Difficult to design and implement perfect checks</p>
    <p>Culprit of privilege escalation attacks  Exposure of sensitive information or operations</p>
  </div>
  <div class="page">
    <p>Predictable URLs</p>
    <p>Bloomberg obtained unpublished earnings of NetApp and Disney in Nov., 2010</p>
    <p>Lohmus Haavel &amp; Viisemann obtained trading information of Business Wire and profited $8 million</p>
    <p>http://media.netapp.com/documents/financial-fy11-q2.pdf http://media.netapp.com/documents/financial-q1-fy11.pdf http://media.netapp.com/documents/financial-10-q4.pdf</p>
    <p>File posted without any required password</p>
    <p>File obtained from a restricted area of the companys website</p>
    <p>http://website/press_release/08/29/2007/00001.html</p>
    <p>LEAKED</p>
  </div>
  <div class="page">
    <p>Cause of Access Control Vulnerability</p>
    <p>Forced browsing  Directly accessing hidden URLs  Often in violation of developers intensions</p>
    <p>URLs are predicted</p>
    <p>Root cause of access control vulnerability  Developers often make implicit assumptions</p>
    <p>with regard to allowed accesses</p>
    <p>Security by obscurity is insufficient</p>
  </div>
  <div class="page">
    <p>Key Challenge</p>
    <p>Automated detection  Lack of a general characterization and</p>
    <p>specification for access control vulnerability</p>
    <p>Specification for automated detection  Manual specification  Time-consuming, and often absent</p>
    <p>Probabilistic-based inference  Imprecise and computationally expensive</p>
  </div>
  <div class="page">
    <p>Key Insights</p>
    <p>Source code of an application implicitly</p>
    <p>documents intended accesses of each role</p>
    <p>Access control policy can be extracted from</p>
    <p>differences in per-role sitemaps</p>
  </div>
  <div class="page">
    <p>userAdd.php</p>
    <p>add_user();</p>
    <p>functions.php</p>
    <p>if (!$_SESSION[admin])</p>
    <p>die(Access denied!)</p>
    <p>index.php</p>
    <p>include(functions.php);</p>
    <p>Add user</p>
    <p>Delete user</p>
    <p>userDelete.php</p>
    <p>include(functions.php);</p>
    <p>delete_user();</p>
  </div>
  <div class="page">
    <p>administrators Sitemap for</p>
    <p>administrators</p>
    <p>userAdd.php</p>
    <p>add_user();</p>
    <p>functions.php</p>
    <p>if (!$_SESSION[admin])</p>
    <p>die(Access denied!)</p>
    <p>index.php</p>
    <p>include(functions.php);</p>
    <p>Add user</p>
    <p>Delete user</p>
    <p>userDelete.php</p>
    <p>include(functions.php);</p>
    <p>delete_user();</p>
    <p>$_SESSION[admin]=true</p>
    <p>Entry</p>
  </div>
  <div class="page">
    <p>Sitemap for Sitemap for normal users</p>
    <p>userAdd.php</p>
    <p>add_user();</p>
    <p>functions.php</p>
    <p>if (!$_SESSION[admin])</p>
    <p>die(Access denied!)</p>
    <p>index.php</p>
    <p>include(functions.php);</p>
    <p>Add user</p>
    <p>Delete user</p>
    <p>userDelete.php</p>
    <p>include(functions.php);</p>
    <p>delete_user();</p>
    <p>$_SESSION[admin]=false</p>
    <p>Entry</p>
  </div>
  <div class="page">
    <p>userAdd</p>
    <p>functions</p>
    <p>index</p>
    <p>userDelete</p>
    <p>administrators Sitemap for</p>
    <p>administrators</p>
    <p>Sitemap for normal users Sitemap for normal users</p>
    <p>functions</p>
    <p>index</p>
  </div>
  <div class="page">
    <p>VulnerabilityVulnerability Detection</p>
    <p>userAdd.php</p>
    <p>add_user();</p>
    <p>functions.php</p>
    <p>if (!$_SESSION[admin])</p>
    <p>die(Access denied!)</p>
    <p>index.php</p>
    <p>include(functions.php);</p>
    <p>Add user</p>
    <p>Delete user</p>
    <p>userDelete.php</p>
    <p>include(functions.php);</p>
    <p>delete_user();</p>
    <p>Privileged Privileged</p>
    <p>$_SESSION[admin]=false</p>
  </div>
  <div class="page">
    <p>Technical Approach</p>
    <p>Vulnerability</p>
    <p>Detector</p>
    <p>Vulnerability</p>
    <p>Detector VulsVuls</p>
    <p>Inputs (source code, entry points, and role-based states) Na explicitly reachable nodes of role a (administrators) Nb explicitly reachable nodes of role b (normal users) Privileged privileged nodes Vuls vulnerabilities</p>
    <p>Reachable Nodes</p>
    <p>Comparator</p>
    <p>Reachable Nodes</p>
    <p>Comparator</p>
    <p>NaNa</p>
    <p>Sitemap BuilderSitemap Builder</p>
    <p>Context-Free Grammar</p>
    <p>Constructor</p>
    <p>Link Extractor</p>
    <p>NbNb PrivilegedPrivilegedInputsInputs</p>
  </div>
  <div class="page">
    <p>Sitemap Builder</p>
    <p>Reachable Nodes</p>
    <p>Comparator</p>
    <p>Reachable Nodes</p>
    <p>Comparator</p>
    <p>NaNa</p>
    <p>Sitemap BuilderSitemap Builder</p>
    <p>Context-Free Grammar</p>
    <p>Constructor</p>
    <p>Link Extractor</p>
    <p>NbNb PrivilegedPrivilegedInputsInputs</p>
    <p>Statically generates CFGs to approximate dynamic outputs of web pages</p>
    <p>Extracts explicit links from CFGs</p>
    <p>Context-Free Grammar</p>
    <p>Constructor</p>
    <p>Link Extractor</p>
  </div>
  <div class="page">
    <p>Context-Free Grammar Constructor</p>
    <p>CFG approximates dynamic output  PHP page  AST  IR  grammar rules  CFG</p>
    <p>Path exploration based on branch feasibilities  Z3 for arithmetic constraints  Our own string constraint solver for string constraints</p>
    <p>function checkUser() {</p>
    <p>if (!$_SESSION[validUser])</p>
    <p>header(Location: login.php);</p>
    <p>}</p>
    <p>checkUser();</p>
    <p>sensitiveOperation();</p>
    <p>Constraint: $_SESSION[validUser] = false</p>
    <p>Only administrators can pass this check and</p>
    <p>reach sensitiveOperation()</p>
    <p>Normal users are redirected to login.php</p>
    <p>Sitemap Builder</p>
    <p>Context-Free Grammar</p>
    <p>Constructor</p>
    <p>Link Extractor</p>
  </div>
  <div class="page">
    <p>Link Extractor</p>
    <p>Our link extraction algorithm  Does not directly intersect CFG with DFA</p>
    <p>Efficiently extracts links from CFG based on DFA</p>
    <p>echo &lt;div&gt;&lt;a href= . $lang . .php&gt;Anchor&lt;/a&gt;&lt;/div&gt;;</p>
    <p>CFG LinksS0  S1 S2 S1  &lt;div&gt;&lt;a href=</p>
    <p>S2  S3 S4</p>
    <p>S3  english | spanish | french</p>
    <p>S4  .php&gt;Anchor&lt;/a&gt;&lt;/div&gt;</p>
    <p>english.php</p>
    <p>spanish.php</p>
    <p>french.php</p>
    <p>Sitemap Builder</p>
    <p>Context-Free Grammar</p>
    <p>Constructor</p>
    <p>Link Extractor</p>
  </div>
  <div class="page">
    <p>Vulnerability Detector</p>
    <p>Forced browsing on privileged pages with critical states of normal users</p>
    <p>Failed forced browsing  Redirects users to another location  Displays error messages  No sensitive information or operations</p>
    <p>When is a forced browsing successful?  CFG of administrators vs. CFG of normal users  No additional redirections in CFG of normal users  The CFG sizes are not significantly different</p>
    <p>Vulnerability</p>
    <p>Detector</p>
    <p>Vulnerability</p>
    <p>Detector</p>
    <p>Page PrivilegedPagePagePagePagePagePagePage</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>A static PHP analyzer  Based on work of Wassermann and Minamide</p>
    <p>Adds support for roles</p>
    <p>Connects nodes of a web application</p>
    <p>Explores paths based on branch feasibilities</p>
    <p>Specification rules  Support abstract and concrete values of built</p>
    <p>in types, and regular expressions</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Subjects  Seven applications  Less than ten lines of</p>
    <p>specifications for each</p>
    <p>Metrics  Effectiveness  Vulnerable nodes  False positives</p>
    <p>Performance  Coverage  Analysis time</p>
    <p>Subject Files LOC</p>
    <p>PHP HTML</p>
    <p>SCARF 25 1,318 0</p>
    <p>Events Lister 37 2,076 544</p>
    <p>PHP Calendars 67 1,350 0</p>
    <p>PHPoll 93 2,571 0</p>
    <p>iCalendar 183 8,276 0</p>
    <p>AWCM 668 12,942 5,106</p>
    <p>YaPiG 134 4,801 1,271</p>
  </div>
  <div class="page">
    <p>Project Privileged Vulnerable FP Guarded Admin Normal</p>
    <p>Node Edge Node Edge</p>
    <p>SCARF 4 1 0 3 19 149 15 69</p>
    <p>SCARF (patched) 4 0 0 4 19 149 15 69</p>
    <p>Events Lister v2.03 9 2 2 5 23 113 14 26</p>
    <p>PHP Calendars 3 1 0 2 19 35 19 30</p>
    <p>PHPoll v0.97 beta 3 3 0 0 21 63 19 58</p>
    <p>iCalendar v1.1 1 0 0 1 51 292 50 292</p>
    <p>AWCM v2.1 47 1 0 46 176 2,634 129 2,438</p>
    <p>AWCM v2.2 final 47 0 0 47 180 2,851 133 2,612</p>
    <p>YaPiG v0.95 11 0 0 11 54 260 44 154</p>
  </div>
  <div class="page">
    <p>Project Nodes Context-Free Grammar</p>
    <p>Coverage Time(s) Entry Active Orphan Variables Productions</p>
    <p>SCARF 1 19 0 158 719 100.0% 6.02</p>
    <p>SCARF (patched) 1 19 0 159 719 100.0% 6.01</p>
    <p>Events Lister v2.03 4 23 5 100 2,083 100.0% 3.84</p>
    <p>PHP Calendars 3 15 0 48 255 80.0% 5.09</p>
    <p>PHPoll v0.97 beta 5 21 6 115 224 100.0% 4.26</p>
    <p>iCalendar v1.1 2 52 2 811 4,774 90.4% 760.62</p>
    <p>AWCM v2.1 17 208 22 410 422 79.3% 89.48</p>
    <p>AWCM v2.2 final 16 209 14 451 484 79.9% 108.51</p>
    <p>YaPiG v0.95 7 59 3 332 532 91.5% 208.38</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>First role-based static analysis  Detects access control vulnerabilities</p>
    <p>Requires minimal manual effort</p>
    <p>Per-role sitemaps  Inference of privileged pages</p>
    <p>Forced browsing to detect vulnerabilities</p>
    <p>Effective and scalable technique</p>
  </div>
</Presentation>
