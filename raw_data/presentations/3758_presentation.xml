<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Efficient Algorithms for Analyzing Segmental Duplications,</p>
    <p>Deletions, and Inversions in Genomes</p>
    <p>Crystal Kahn*, Shay Mozes*, and Ben Raphael* Brown University, Providence, RI</p>
    <p>*Department of Computer Science</p>
    <p>Center for Computational Molecular Biology</p>
    <p>{clkahn,shay,braphael}@cs.brown.edu</p>
  </div>
  <div class="page">
    <p>Segmental Duplications  Long (&gt;1 kb) duplications</p>
    <p>common in mammalian genomes</p>
    <p>Copied segments are often reinserted into the genome at large distances from the ancestral locus  50-60% interchromosomal</p>
    <p>[Bailey &amp; Eichler, 2006], [Jiang et al., 2008]</p>
    <p>Duplicated material comprise complex, contiguous mosaics of duplicated fragments [Bailey et al., 2002]</p>
    <p>[Johnson et al. 2006]</p>
  </div>
  <div class="page">
    <p>Human Segmental Duplications</p>
    <p>[Jiang et al. 07] decomposed 437 duplication blocks (&gt;1 kb) into 11,951 duplicons (&gt;100 bp)</p>
    <p>Mosaic structure complicates ancestral reconstruction  Conserved patterns of duplicons suggest copying of</p>
    <p>contiguous strings</p>
    <p>[Jiang et al., Nat Gen 2007]</p>
  </div>
  <div class="page">
    <p>Combinatorial Models of Duplication</p>
    <p>Genome rearrangement in the presence of duplicated genes or gene families  Reversal distance in the presence of duplicates is NP-Hard</p>
    <p>[Chen et al., Bioinformatics 2005]</p>
    <p>Many heuristics and approximation algorithms [Marron et al., TCS2004], [El-Mabrouk, CPM2000], [Ratan et al., JCB2008]</p>
    <p>Whole-genome duplication [El-Mabrouk &amp; Sankoff, JComp03], [Alekseyev &amp; Pevzner, SICOMP07]</p>
    <p>Distance metrics based on number of duplication events:  Tandem duplication [Chaudhuri et al., SODA06], [Elemento et al.,</p>
    <p>MBE02], [Lajoie et al., JCB07]</p>
    <p>No breakpoint reuse [Zhang et al., RECOMB2008]</p>
  </div>
  <div class="page">
    <p>Fundamental rearrangement: duplicate operation</p>
    <p>Duplication Distance d(X,Y): minimum number of duplicate operations to transform the empty string into Y by repeated insertions of substrings of X. [K&amp;Raphael, Bioinformatics 2008], [K&amp;Raphael, PSB09]</p>
    <p>Duplication Distance d(X,Y): minimum number of duplicate operations to transform the empty string into Y by repeated insertions of substrings of X. [K&amp;Raphael, Bioinformatics 2008], [K&amp;Raphael, PSB09]</p>
    <p>source stringsource string</p>
    <p>target stringtarget string</p>
    <p>X</p>
    <p>Y</p>
    <p>s t</p>
    <p>p</p>
    <p>Duplication Distance</p>
  </div>
  <div class="page">
    <p>Duplication Distance</p>
    <p>Previously used to: 1. Compare similarity of strings of</p>
    <p>segmental duplications 2. Infer ancestral relationships between</p>
    <p>segmental duplications</p>
    <p>In this work we extend duplication distance to include certain types of deletion and inversion operations</p>
  </div>
  <div class="page">
    <p>A Sequence of Duplicate Operations</p>
    <p>Y can be partitioned into subsequences corresponding to copied substrings of X</p>
    <p>X</p>
    <p>Y</p>
    <p>Xs,t</p>
  </div>
  <div class="page">
    <p>Non-overlapping Property</p>
    <p>Duplicated subsequences can be nested inside one another</p>
    <p>But they cannot overlap one another</p>
    <p>Y</p>
    <p>Lemma: The substrings of X that are duplicated in the construction of Y appear as mutually non-overlapping subsequences of Y.</p>
    <p>Red and blue subsequences are overlapping</p>
  </div>
  <div class="page">
    <p>The Basic Recurrence</p>
    <p>source stringsource string</p>
    <p>target stringtarget string</p>
    <p>X</p>
    <p>Y</p>
    <p>Xi</p>
    <p>Y1</p>
    <p>Xi+1</p>
    <p>Yj Y2,j-1</p>
    <p>= max multiplicity of any character in X</p>
    <p>Theorem: the recurrence computes duplication distance in time</p>
  </div>
  <div class="page">
    <p>Duplication-Deletion Distance</p>
    <p>A delete operation:</p>
    <p>target stringtarget stringY1 s t</p>
    <p>modified target stringmodified target stringY2</p>
    <p>Duplication-Deletion Distance d(X,Y): minimum number of duplicate and delete operationsin any order--to build Y using X.</p>
    <p>Duplication-Deletion Distance d(X,Y): minimum number of duplicate and delete operationsin any order--to build Y using X.</p>
  </div>
  <div class="page">
    <p>Duplication-Deletion Distance</p>
    <p>Lemma: The minimum number of duplicate and</p>
    <p>delete operations that builds Y from X is equal to the cost of a minimum sequence of duplicate-delete operations.</p>
    <p>A duplicate-delete operation:</p>
    <p>source stringsource stringX s t</p>
    <p>target stringtarget stringY Cost = 1 (dup) + 2 (del)</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Duplication-Deletion Distance</p>
    <p>source stringsource string</p>
    <p>target stringtarget string</p>
    <p>X</p>
    <p>Y</p>
    <p>Xi</p>
    <p>Y1 Yj Y2,j-1</p>
    <p>Theorem: the recurrence computes duplication-deletion distance in time</p>
    <p>= max multiplicity of any character in X</p>
    <p>Xk</p>
  </div>
  <div class="page">
    <p>Duplication-Inversion-Deletion Distance</p>
    <p>A duplicate-invert operation:</p>
    <p>source stringsource stringX s t</p>
    <p>target stringtarget stringY</p>
    <p>Duplication-Inversion-Deletion Distance d(X,Y): minimum number of duplicate, duplicate-invert, and delete operationsin any order--to build Y using X.</p>
    <p>Duplication-Inversion-Deletion Distance d(X,Y): minimum number of duplicate, duplicate-invert, and delete operationsin any order--to build Y using X.</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Duplication-Inversion-Deletion Distance</p>
    <p>Lemma: The minimum number of duplicate,</p>
    <p>duplicate-invert, and delete operations that generates Y using X is equal to the cost of a minimum sequence of duplicate and duplicate-invert-delete operations.</p>
    <p>A duplicate-invert-delete operation:</p>
    <p>source stringsource stringX s t</p>
    <p>target stringtarget stringY Cost = 1 (dup-inv) + 2 (del)</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Other variants  Duplication-deletions with substring</p>
    <p>inversions</p>
    <p>Affine cost functions for duplications, inversions, and deletions.</p>
    <p>X</p>
    <p>Y</p>
    <p>s t</p>
    <p>p</p>
    <p>X s t</p>
    <p>Y p</p>
    <p>Cost = 1 + 1 + (t-s+1)2</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Extend previous analysis of human segmental duplications to involve these new models</p>
    <p>Probabilistic model of duplication  Relax the parsimony assumption  Explore suboptimal rearrangement</p>
    <p>scenarios to find a max-likelihood ancestral reconstruction of segmental duplications</p>
  </div>
  <div class="page">
    <p>Acknowledgements</p>
    <p>CLK, SM, BJR:  National Science</p>
    <p>Foundation</p>
    <p>BJR:  Career Award at the</p>
    <p>Scientific Interface from the Burroughs Wellcome Fund.</p>
    <p>ADVANCE Program at Brown University</p>
  </div>
</Presentation>
