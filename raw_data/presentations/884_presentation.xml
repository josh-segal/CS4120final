<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Modular and Efficient Past State System for Berkeley DB</p>
    <p>Ross Shaull NuoDB</p>
    <p>Liuba Shrira Brandeis University</p>
    <p>Barbara Liskov MIT/CSAIL</p>
  </div>
  <div class="page">
    <p>Snapshots and RetrospecFon</p>
    <p>Past states of data can provide insights  trend analysis  anomaly and intrusion detecFon</p>
    <p>AudiFng may require past-state retenFon  Saving consistent past states (snapshots) is challenging and not available in all data stores</p>
  </div>
  <div class="page">
    <p>What is Retro</p>
    <p>Snapshot system for Berkeley DB implemented in a novel way</p>
    <p>The idea  Low-overhead (non-disrupFve)  Simple programming model  StraighNorward integraFon</p>
    <p>Approach  Layered design  Extend BDB protocols to create Retro protocols</p>
    <p>MVCC and Recovery</p>
  </div>
  <div class="page">
    <p>Programming Model begin; insert into accounts values(); update accounts set balance=0 where name=Tom; commit with snapshot(S); select as of S * from accounts where name = Tom</p>
  </div>
  <div class="page">
    <p>Snapshots are</p>
    <p>Consistent  Global  Named  ApplicaFon-declared</p>
    <p>June 2014 Salary: $200K</p>
  </div>
  <div class="page">
    <p>Snapshots are</p>
    <p>Consistent  Global  Named  ApplicaFon-declared</p>
    <p>June 2013 Salary: $120K</p>
    <p>June 2013 Snapshot</p>
  </div>
  <div class="page">
    <p>Architecture ApplicaFon</p>
    <p>Database</p>
    <p>Interface</p>
    <p>TransacFonal storage manager</p>
    <p>Snapshot layer</p>
    <p>WAL Page cache MVCC</p>
    <p>DB Disk Retro Disk</p>
    <p>as of snap</p>
    <p>Access methods / indexes</p>
    <p>Snapshot layer works at the page level, inside the TSM</p>
  </div>
  <div class="page">
    <p>Protocol extensions ApplicaFon</p>
    <p>Database</p>
    <p>Interface</p>
    <p>TransacFonal storage manager</p>
    <p>Snapshot layer</p>
    <p>WAL Page cache MVCC</p>
    <p>DB Disk Retro Disk</p>
    <p>as of snap</p>
    <p>Access methods / indexes</p>
    <p>Retro recovery</p>
    <p>Retro page cache  Snapshot page</p>
    <p>translaFon  Concurrency for</p>
    <p>retrospecFon  Efficient COW</p>
  </div>
  <div class="page">
    <p>Why this design for BDB?</p>
    <p>Logical-level snapshots require significant modificaFons to the data store</p>
    <p>ApplicaFon</p>
    <p>Database</p>
    <p>Interface</p>
    <p>TSM</p>
    <p>Snapshot layer</p>
    <p>DB Disk Retro Disk</p>
    <p>as of snap</p>
    <p>Access methods / indexes</p>
  </div>
  <div class="page">
    <p>Why this design for BDB?</p>
    <p>Logical-level snapshots require significant modificaFons to the data store</p>
    <p>With low-level snapshots, its expensive to get consistency</p>
    <p>ApplicaFon</p>
    <p>Database</p>
    <p>Interface</p>
    <p>TSM</p>
    <p>Snapshot layer</p>
    <p>DB Disk Retro Disk</p>
    <p>as of snap</p>
    <p>Access methods / indexes</p>
  </div>
  <div class="page">
    <p>Why this design for BDB?</p>
    <p>Logical-level snapshots require significant modificaFons to the data store</p>
    <p>With low-level snapshots, its expensive to get consistency</p>
    <p>Retro is not too high or too low  Simple integraFon and non- disrupFve</p>
    <p>ApplicaFon</p>
    <p>Database</p>
    <p>Interface</p>
    <p>TSM</p>
    <p>Snapshot layer</p>
    <p>DB Disk Retro Disk</p>
    <p>as of snap</p>
    <p>Access methods / indexes</p>
  </div>
  <div class="page">
    <p>Overwrite sequence (OWS)</p>
    <p>OWS(H) is a tagging of history H  which page pre-states to save  the snapshot pages a retrospecFve query accesses  which pre-states and snapshot declaraFons to recover</p>
  </div>
  <div class="page">
    <p>OWS(History)</p>
    <p>OWS Example History</p>
    <p>Snapshot S1</p>
    <p>Update P</p>
    <p>Update P</p>
    <p>Snapshot S2</p>
    <p>Update P</p>
    <p>Update Q</p>
    <p>Not the first update to P since S1 was declared P P Q P R Q</p>
    <p>S1 S2</p>
  </div>
  <div class="page">
    <p>SavedAier</p>
    <p>Durable table that tracks latest snapshot a page was saved aier  Tracks latest first update aier tag from OWS(H)</p>
    <p>Used when  Performing retrospecFon  Saving snapshot pages (normal operaFon &amp; recovery)</p>
    <p>Can be costly because it is shared data structure  SavedAier Cache accelerates SavedAier by scribbling tag on page header in page cache</p>
  </div>
  <div class="page">
    <p>Snapshot pages and Page Sharing</p>
    <p>T1: update P1, declare S2</p>
    <p>T2: update P1 P1</p>
    <p>P2</p>
    <p>Page cache</p>
    <p>P1</p>
    <p>P1</p>
    <p>P1 P1</p>
    <p>S1 S2</p>
    <p>TransacFons</p>
    <p>DB Disk Retro Disk</p>
  </div>
  <div class="page">
    <p>Protocol extensions: Recovery</p>
    <p>Like database, snapshots are wriken asynchronously (non-disrupFveness)</p>
    <p>Retro saves pre-states during BDB recovery  Snapshot declaraFons are also logged</p>
    <p>IdenFfy needed pre-states using SavedAier during recovery</p>
  </div>
  <div class="page">
    <p>Protocol extension: Recovery</p>
    <p>RunFme invariants  Snapshots are made durable first: WAS-invariant</p>
    <p>Recovery-Fme extension  Recover snapshot metadata first  Idempotent: Start, SavedAier tell if pre-state was saved already</p>
  </div>
  <div class="page">
    <p>Protocol extension: MVCC</p>
    <p>Concurrent access to current state and snapshots</p>
    <p>Efficient copying of snapshots  RetrospecFon runs using MVCC and page requests are redirected to snapshot pages that have migrated to pagelog</p>
  </div>
  <div class="page">
    <p>RetrospecFon (querying as of)</p>
    <p>Snapshot Layer</p>
    <p>Access methods / indexes</p>
    <p>Page cache</p>
    <p>Page name translaFon</p>
    <p>Database disk Retro disk</p>
    <p>Interface as of</p>
    <p>Look up (DBFile, P)@S1</p>
    <p>Get (DBFile, P)</p>
    <p>Get (RetroFile, X)</p>
    <p>@S1</p>
  </div>
  <div class="page">
    <p>Current state queries</p>
    <p>Snapshot Layer</p>
    <p>Access methods / indexes</p>
    <p>Page cache</p>
    <p>Page name translaFon</p>
    <p>Database disk Retro disk</p>
    <p>Interface</p>
    <p>Get (DBFile, P)</p>
  </div>
  <div class="page">
    <p>Gluing it together</p>
    <p>Implemented as a set of callbacks  About 250 lines of modificaFons to BDB source  Call into about 5000 lines of snapshot layer code</p>
    <p>Retro is thread-safe  Care taken to follow OWS(H) order in face of concurrency</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Database and snapshot data are wriken to one disk, logs to the other</p>
    <p>Database size is 1 gb  Snapshot store on Retro disk can be &gt;100 gb  Non-disrupFveness  Random update workload with and without Retro  With Retro, declare snapshot aier every transacFon  Enforcing invariants for snapshot durability imposes about 4% overhead on throughput</p>
  </div>
  <div class="page">
    <p>RetrospecFon: Overhead</p>
    <p>Retro(Q) cur</p>
    <p>Retro(Q) old</p>
    <p>c o</p>
    <p>st i</p>
    <p>n t</p>
    <p>e rm</p>
    <p>s o</p>
    <p>f Q</p>
    <p>workloads</p>
  </div>
  <div class="page">
    <p>RetrospecFon: I/O build page table query</p>
    <p>/5 0</p>
    <p>/2 0</p>
    <p>/1 0</p>
    <p>/5 0</p>
    <p>/2 0</p>
    <p>/1 0</p>
    <p>c o</p>
    <p>st i</p>
    <p>n t</p>
    <p>e rm</p>
    <p>s o</p>
    <p>f Q</p>
    <p>skew 100mb 1gb</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Simple, novel design for adding retrospecFon  Yet supports powerful programming model</p>
    <p>Non-disrupFve, long-lived snapshots  Key to useful snapshot system</p>
    <p>Layered approach  Flexible and relaFvely low-level, generalizes</p>
    <p>Extended standard transacFonal algorithms</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>QuesFons?</p>
  </div>
</Presentation>
