<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Beehive: Erasure Codes for Fixing Multiple Failures in Distributed Storage Systems Jun Li, Baochun Li University of Toronto</p>
    <p>HotStorage 15</p>
  </div>
  <div class="page">
    <p>Distributed Storage  Store a massive amount of data over a large number of</p>
    <p>commodity servers, such as HDFS</p>
    <p>Servers are subject to frequent failures</p>
  </div>
  <div class="page">
    <p>Distributed Storage  Store redundant data to ensure data durability and</p>
    <p>availability regardless of failures</p>
    <p>replication: store multiple copies on different servers</p>
    <p>D3D2</p>
    <p>D2 D2</p>
    <p>D1</p>
    <p>D3</p>
    <p>D1D1</p>
    <p>D3 3-way replication</p>
  </div>
  <div class="page">
    <p>Distributed Storage  Store redundant data to ensure data durability and</p>
    <p>availability regardless of failures</p>
    <p>replication: store multiple copies on different servers</p>
    <p>D3D2</p>
    <p>D2 D2</p>
    <p>D1</p>
    <p>D3</p>
    <p>D1D1</p>
    <p>D3</p>
    <p>storage overhead = 3x</p>
  </div>
  <div class="page">
    <p>Erasure Coding  Use less storage space to tolerate the same number of failures</p>
    <p>(k,r) Reed-Solomon (RS) code</p>
    <p>compute r parity blocks from k data blocks</p>
    <p>P1D3</p>
    <p>P2</p>
    <p>D2D1</p>
    <p>(k=3,r=2) RS code</p>
  </div>
  <div class="page">
    <p>Erasure Coding  Use less storage space to tolerate the same number of failures</p>
    <p>(k,r) Reed-Solomon (RS) code</p>
    <p>compute r parity blocks from k data blocks</p>
    <p>P1D3</p>
    <p>P2</p>
    <p>D2D1</p>
    <p>storage overhead = 1.67x</p>
    <p>(k=3,r=2) RS code</p>
  </div>
  <div class="page">
    <p>Reed-Solomon Code  Achieve the optimal storage overhead to tolerate the same number of failures</p>
    <p>Typically high cost of reconstruction</p>
    <p>need to obtain k blocks to reconstruct one</p>
    <p>P1D3</p>
    <p>P2</p>
    <p>D2D1 P1</p>
    <p>P2</p>
    <p>(k=3,r=2) RS code</p>
  </div>
  <div class="page">
    <p>Reed-Solomon Code  Achieve the optimal storage overhead to tolerate the same number of failures</p>
    <p>Typically high cost of reconstruction</p>
    <p>need to obtain k blocks to reconstruct one</p>
    <p>P1D3</p>
    <p>P2</p>
    <p>D2D1 P1</p>
    <p>P2</p>
    <p>(k=3,r=2) RS code</p>
  </div>
  <div class="page">
    <p>Network Transfer  Minimum-storage regenerating (MSR) codes [Dimakis et al, Trans. IT, 2011]</p>
    <p>the optimal storage overhead like RS code</p>
    <p>minimize the network transfer during reconstruction</p>
  </div>
  <div class="page">
    <p>Network Transfer  Minimum-storage regenerating (MSR) codes [Dimakis et al, Trans. IT, 2011]</p>
    <p>the optimal storage overhead like RS code</p>
    <p>minimize the network transfer during reconstruction</p>
    <p>D1 D2 D3 P1 P2</p>
    <p>(k=3,r=2) RS</p>
    <p>D3 P1 P2</p>
    <p>D2</p>
    <p>total transfer = 384 MB</p>
  </div>
  <div class="page">
    <p>Network Transfer  Minimum-storage regenerating (MSR) codes [Dimakis et al, Trans. IT, 2011]</p>
    <p>the optimal storage overhead like RS code</p>
    <p>minimize the network transfer during reconstruction</p>
    <p>D1 D2 D3 P1 P2</p>
    <p>(k=3,r=2) RS</p>
    <p>D3 P1 P2</p>
    <p>D2</p>
    <p>total transfer = 384 MB</p>
    <p>(k=3,r=2,d=4) MSR</p>
    <p>download a small fraction of</p>
    <p>data from d helpers</p>
    <p>D1 D2 D3 P1 P2</p>
    <p>D2</p>
    <p>total transfer = 256 MB</p>
  </div>
  <div class="page">
    <p>Disk I/O  MSR codes will incur even more disk I/O than RS codes</p>
    <p>since each helper needs to read all its data to compute a small fraction sent out.</p>
    <p>(k=3,r=2,d=4) MSR D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>D3</p>
    <p>D3</p>
    <p>D3</p>
    <p>read compute transfer</p>
  </div>
  <div class="page">
    <p>Can we have erasure codes that save both network transfer and disk I/O during reconstruction?</p>
  </div>
  <div class="page">
    <p>Multiple Failures  Opportunities of fixing multiple failures exists.</p>
    <p>correlated failures (disk, switch, power)</p>
    <p>periodical check of failures</p>
    <p>reconstruct after a certain number of failures</p>
    <p>Typically, erasure codes like RS and MSR codes fix failures separately.</p>
    <p>Coalesce reconstructions can instantly save disk I/O</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>total transfer = 512 MB disk read = 1024 MB</p>
    <p>storage overhead = 2x</p>
    <p>D3</p>
    <p>D1</p>
  </div>
  <div class="page">
    <p>Multiple Failures</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>total transfer = 512 MB disk read = 1024 MB</p>
    <p>storage overhead = 2x</p>
    <p>D3</p>
    <p>D1</p>
    <p>optimal network transfer [Shum et al, Trans. IT, 2013]</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3 D3</p>
    <p>total transfer = 427 MB disk read = 512 MB</p>
    <p>storage overhead = 2x</p>
    <p>D1</p>
  </div>
  <div class="page">
    <p>Multiple Failures</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>total transfer = 512 MB disk read = 1024 MB</p>
    <p>storage overhead = 2x</p>
    <p>D3</p>
    <p>D1</p>
    <p>optimal network transfer [Shum et al, Trans. IT, 2013]</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3 D3</p>
    <p>total transfer = 427 MB disk read = 512 MB</p>
    <p>storage overhead = 2x</p>
    <p>D1</p>
    <p>code construction exists only for limited values of</p>
    <p>parameters</p>
  </div>
  <div class="page">
    <p>Multiple Failures</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>total transfer = 512 MB disk read = 1024 MB</p>
    <p>storage overhead = 2x</p>
    <p>D3</p>
    <p>D1</p>
    <p>optimal network transfer [Shum et al, Trans. IT, 2013]</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3 D3</p>
    <p>total transfer = 427 MB disk read = 512 MB</p>
    <p>storage overhead = 2x</p>
    <p>D1</p>
    <p>Beehive</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3 D3</p>
    <p>total transfer = 427 MB disk read = 512 MB</p>
    <p>storage overhead = 2.25x</p>
    <p>D1</p>
    <p>code construction exists only for limited values of</p>
    <p>parameters</p>
  </div>
  <div class="page">
    <p>Contributions  Beehive, a new kind of erasure codes that achieve the</p>
    <p>optimal network transfer of coalesced reconstructions</p>
    <p>with a wide range of system parameters</p>
    <p>with marginally additional storage overhead</p>
    <p>C++ implementation to demonstrate the performance</p>
  </div>
  <div class="page">
    <p>System Parameters  k: the minimum number of blocks to decode the original</p>
    <p>data</p>
    <p>r: the maximum number of missing blocks to tolerate without hurting data durability/availability</p>
    <p>t: the number of failed blocks to reconstruct</p>
    <p>d: the number of existing blocks to contact during reconstruction (d2k-1)</p>
  </div>
  <div class="page">
    <p>Code Construction</p>
  </div>
  <div class="page">
    <p>Code Construction  Beehive codes are</p>
    <p>constructed by combining MSR codes and RS codes.</p>
    <p>d-k+1 segments</p>
    <p>t-1 segments</p>
    <p>k-1</p>
    <p>k</p>
    <p>(k,r,d) MSR 1</p>
    <p>k-1</p>
    <p>(k-1,r+1) RS</p>
    <p>k data blocks</p>
    <p>k-1 data blocks</p>
  </div>
  <div class="page">
    <p>Code Construction  Beehive codes are</p>
    <p>constructed by combining MSR codes and RS codes.</p>
    <p>k+1</p>
    <p>k+r</p>
    <p>ak,1</p>
    <p>ak+1,1</p>
    <p>ak+r,1</p>
    <p>+ak,2</p>
    <p>+ak+1,2</p>
    <p>+ak+r,2</p>
    <p>++ak,k-1</p>
    <p>++ak+1,k-1</p>
    <p>++ak+r,k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>r parity blocks r+1 parity blocks</p>
    <p>d-k+1 segments</p>
    <p>t-1 segments</p>
    <p>k-1</p>
    <p>k</p>
    <p>(k,r,d) MSR 1</p>
    <p>k-1</p>
    <p>(k-1,r+1) RS</p>
    <p>k data blocks</p>
    <p>k-1 data blocks</p>
  </div>
  <div class="page">
    <p>Code Construction  Beehive codes are</p>
    <p>constructed by combining MSR codes and RS codes.</p>
    <p>k+1</p>
    <p>k+r</p>
    <p>ak,1</p>
    <p>ak+1,1</p>
    <p>ak+r,1</p>
    <p>+ak,2</p>
    <p>+ak+1,2</p>
    <p>+ak+r,2</p>
    <p>++ak,k-1</p>
    <p>++ak+1,k-1</p>
    <p>++ak+r,k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>r parity blocks r+1 parity blocks</p>
    <p>d-k+1 segments</p>
    <p>t-1 segments</p>
    <p>k-1</p>
    <p>k</p>
    <p>(k,r,d) MSR 1</p>
    <p>k-1</p>
    <p>(k-1,r+1) RS</p>
    <p>k data blocks</p>
    <p>k-1 data blocks</p>
    <p>block 1</p>
    <p>block k-1</p>
    <p>block k</p>
    <p>block k+1</p>
    <p>block k+r</p>
  </div>
  <div class="page">
    <p>Code Construction  Beehive codes are</p>
    <p>constructed by combining MSR codes and RS codes.</p>
    <p>Beehive codes can be decoded as long as k blocks survive</p>
    <p>k+1</p>
    <p>k+r</p>
    <p>ak,1</p>
    <p>ak+1,1</p>
    <p>ak+r,1</p>
    <p>+ak,2</p>
    <p>+ak+1,2</p>
    <p>+ak+r,2</p>
    <p>++ak,k-1</p>
    <p>++ak+1,k-1</p>
    <p>++ak+r,k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>r parity blocks r+1 parity blocks</p>
    <p>d-k+1 segments</p>
    <p>t-1 segments</p>
    <p>k-1</p>
    <p>k</p>
    <p>(k,r,d) MSR 1</p>
    <p>k-1</p>
    <p>(k-1,r+1) RS</p>
    <p>k data blocks</p>
    <p>k-1 data blocks</p>
    <p>block 1</p>
    <p>block k-1</p>
    <p>block k</p>
    <p>block k+1</p>
    <p>block k+r</p>
  </div>
  <div class="page">
    <p>Code Construction  Beehive codes are</p>
    <p>constructed by combining MSR codes and RS codes.</p>
    <p>Beehive codes can be decoded as long as k blocks survive</p>
    <p>With k+r blocks in total, Beehive codes store t-1 less segments than RS codes and MSR codes</p>
    <p>k+1</p>
    <p>k+r</p>
    <p>ak,1</p>
    <p>ak+1,1</p>
    <p>ak+r,1</p>
    <p>+ak,2</p>
    <p>+ak+1,2</p>
    <p>+ak+r,2</p>
    <p>++ak,k-1</p>
    <p>++ak+1,k-1</p>
    <p>++ak+r,k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>r parity blocks r+1 parity blocks</p>
    <p>d-k+1 segments</p>
    <p>t-1 segments</p>
    <p>k-1</p>
    <p>k</p>
    <p>(k,r,d) MSR 1</p>
    <p>k-1</p>
    <p>(k-1,r+1) RS</p>
    <p>k data blocks</p>
    <p>k-1 data blocks</p>
    <p>block 1</p>
    <p>block k-1</p>
    <p>block k</p>
    <p>block k+1</p>
    <p>block k+r</p>
  </div>
  <div class="page">
    <p>Code Construction  Beehive codes are</p>
    <p>constructed by combining MSR codes and RS codes.</p>
    <p>Beehive codes can be decoded as long as k blocks survive</p>
    <p>With k+r blocks in total, Beehive codes store t-1 less segments than RS codes and MSR codes</p>
    <p>storage overhead =</p>
    <p>k+1</p>
    <p>k+r</p>
    <p>ak,1</p>
    <p>ak+1,1</p>
    <p>ak+r,1</p>
    <p>+ak,2</p>
    <p>+ak+1,2</p>
    <p>+ak+r,2</p>
    <p>++ak,k-1</p>
    <p>++ak+1,k-1</p>
    <p>++ak+r,k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>k-1</p>
    <p>r parity blocks r+1 parity blocks</p>
    <p>d-k+1 segments</p>
    <p>t-1 segments</p>
    <p>k-1</p>
    <p>k</p>
    <p>(k,r,d) MSR 1</p>
    <p>k-1</p>
    <p>(k-1,r+1) RS</p>
    <p>k data blocks</p>
    <p>k-1 data blocks</p>
    <p>block 1</p>
    <p>block k-1</p>
    <p>block k</p>
    <p>block k+1</p>
    <p>block k+r k + r</p>
    <p>k  t1 dk+t</p>
    <p>k , k + r</p>
    <p>k  1</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>j</p>
    <p>j 1 1</p>
    <p>k-1 k-1</p>
    <p>j</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>j</p>
    <p>j 1 1</p>
    <p>k-1 k-1</p>
    <p>j</p>
    <p>+j j</p>
    <p>+i i</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>j</p>
    <p>j 1 1</p>
    <p>k-1 k-1</p>
    <p>j +i i +j j</p>
    <p>+j j</p>
    <p>+i i</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>j</p>
    <p>j 1 1</p>
    <p>k-1 k-1</p>
    <p>j</p>
    <p>+i i</p>
    <p>+i i</p>
    <p>+j j</p>
    <p>+j j</p>
    <p>+i i +j j</p>
    <p>+j j</p>
    <p>+i i</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>j</p>
    <p>j 1 1</p>
    <p>k-1 k-1</p>
    <p>j</p>
    <p>+i i</p>
    <p>+i i</p>
    <p>i</p>
    <p>i</p>
    <p>+j j</p>
    <p>+j j</p>
    <p>j</p>
    <p>j</p>
    <p>+i i +j j</p>
    <p>+j j</p>
    <p>+i i</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Reconstruction</p>
    <p>d</p>
    <p>d</p>
    <p>block i</p>
    <p>block j</p>
    <p>d</p>
    <p>d</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>i</p>
    <p>i 1 1</p>
    <p>k-1 k-1</p>
    <p>i</p>
    <p>d</p>
    <p>+</p>
    <p>+</p>
    <p>j</p>
    <p>j 1 1</p>
    <p>k-1 k-1</p>
    <p>j</p>
    <p>+i i</p>
    <p>+i i</p>
    <p>i</p>
    <p>i i</p>
    <p>+j j</p>
    <p>+j j</p>
    <p>j</p>
    <p>j j</p>
    <p>+i i +j j</p>
    <p>+j j</p>
    <p>+i i</p>
    <p>d helpers t newcomers</p>
  </div>
  <div class="page">
    <p>Evaluation  Implement Beehive in C++, as well as RS and MSR</p>
    <p>codes, with Intel storage acceleration library</p>
    <p>Run performance evaluation on Amazon EC2 (c4.2xlarge) instances</p>
    <p>Encode a file of 360 MB (RS &amp; MSR codes) or 350 MB (Beehive codes), with k = 6, r = 6</p>
    <p>Compare network transfer and disk I/O</p>
  </div>
  <div class="page">
    <p>Highlights of Results  Network Transfer</p>
    <p>Beehive can save more traffic than MSR codes (up to 42.9%)</p>
    <p>Network transfer per newcomer reduces with both d and t</p>
    <p>Disk I/O</p>
    <p>Beehive codes save disk read by up to 75%</p>
    <p>Similar performance throughput of reconstruction</p>
    <p>RS codes achieve a higher throughput of encoding and decoding due to its low complexity</p>
  </div>
  <div class="page">
    <p>Conclusions  We present Beehive codes, erasure codes that achieve</p>
    <p>the optimal network transfer to reconstruct multiple blocks in batches</p>
    <p>The construction of Beehive codes can be applied with a wide range of values of system parameters</p>
    <p>Implemented in C++, we demonstrate that Beehive can save both disk I/O and network transfer during reconstruction</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
