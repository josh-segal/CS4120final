<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BOSS: Building Opera0ng System Services Stephen Dawson-Haggerty, Andrew Krioukov, Jay Taneja, Sagar</p>
    <p>Karandikar, Gabe Fierro, Nikita Kitaev, and David Culler Computer Science Division</p>
    <p>University of California, Berkeley  2013 All rights reserved</p>
  </div>
  <div class="page">
    <p>Sutardja-Dai Hall UC Berkeley 93,000 sq. X. with Digital Controls</p>
    <p>&gt;70% of large buildings have digital controls</p>
  </div>
  <div class="page">
    <p>&gt; 6,000 Sense and Control Points</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Applica0ons</p>
    <p>A ir</p>
    <p>Fl ow</p>
    <p>(C FM</p>
    <p>)</p>
    <p>Fresh air Return Air</p>
    <p>Fr es</p>
    <p>h A</p>
    <p>ir (%</p>
    <p>)</p>
    <p>Ventilation Optimization:! 17% energy savings!</p>
    <p>!</p>
    <p>Automated Fault Detection: ! 10 - 40% energy savings!</p>
    <p>Occupant Lighting Controls! 50-60% savings!</p>
  </div>
  <div class="page">
    <p>Goals and Challenges!  Portability!</p>
    <p>Write once, run anywhere for buildings?!  Current practice: hand-coded logic!</p>
    <p>Fault tolerance!  Partial failures of controllers!  Network partitions!  Current practice: really tough hardware!</p>
    <p>Multiple processes!  Concurrent applications and users!  Current practice: none!</p>
    <p>Federation!  Multiple heterogeneous systems !  Current practice: lots of stovepipes!</p>
    <p>Scale!  Security &amp; privacy!</p>
    <p>Panel 1 Panel 2</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B</p>
    <p>Panel 1 Panel 2</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B</p>
    <p>A 1 5 9 13</p>
    <p>A 2 6 10 14</p>
    <p>B 2 6 10 14</p>
    <p>B 1 5 9 13</p>
    <p>A 1 5 9 13</p>
    <p>A 2 6 10 14</p>
    <p>B 2 6 10 14</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>BOSS: Building Operating System Services!</p>
    <p>HPL! HPL!</p>
    <p>Hardware Abstraction Layer!</p>
    <p>! Auth.! !</p>
    <p>Trans. mgr.!Time-series!S ec</p>
    <p>ur ity !</p>
    <p>A bs</p>
    <p>tra ct</p>
    <p>io n!</p>
    <p>Is ol</p>
    <p>at io</p>
    <p>n +</p>
    <p>S ch</p>
    <p>ed ul</p>
    <p>in g!</p>
    <p>HPL! HPL!</p>
    <p>Control processes! H</p>
    <p>is to</p>
    <p>ry !Fa</p>
    <p>ul t t</p>
    <p>ol er</p>
    <p>an ce !</p>
    <p>Kernel interface!</p>
  </div>
  <div class="page">
    <p>Challenge: Portability</p>
    <p>Buildings are custom designed! !!</p>
  </div>
  <div class="page">
    <p>Open area 450</p>
    <p>Hardware Abstrac0on Physical view</p>
  </div>
  <div class="page">
    <p>Hardware Abstrac0on Systems View</p>
  </div>
  <div class="page">
    <p>Hardware Abstrac0on Controls view</p>
    <p>SDH.MEC-08.S4-21:DMPR COMD device: 220018 instance: 101 SDH.MEC-08.S4-21:VLV COMD device: 220018 instance: 102</p>
    <p>Controller</p>
    <p>Air Damper Reheat coil</p>
    <p>BA Cn</p>
    <p>et</p>
    <p>legacy solution: overload point names!</p>
  </div>
  <div class="page">
    <p>Hardware Abstraction Layer!</p>
    <p>#VAV &gt; $(120, 20)</p>
  </div>
  <div class="page">
    <p>Summary: Hardware Abstraction Layer</p>
    <p>Program applications in terms of relationships between system components!</p>
    <p>Computer systems tend to hide the physicality !  memory hierarchies, network topology!</p>
    <p>Unavoidable in buildings!  it gets too hot on the sunny side!</p>
    <p>! Allow for scale by avoiding hard-coding!</p>
    <p>Run this in every room, except those on the north side!</p>
  </div>
  <div class="page">
    <p>BOSS: Building Operating System Services!</p>
    <p>HPL! HPL!</p>
    <p>Hardware Abstraction Layer!</p>
    <p>! Auth.! !</p>
    <p>Trans. mgr.!Time-series!S ec</p>
    <p>ur ity !</p>
    <p>A bs</p>
    <p>tra ct</p>
    <p>io n!</p>
    <p>Is ol</p>
    <p>at io</p>
    <p>n +</p>
    <p>S ch</p>
    <p>ed ul</p>
    <p>in g!</p>
    <p>HPL! HPL!</p>
    <p>Control processes! H</p>
    <p>is to</p>
    <p>ry !Fa</p>
    <p>ul t t</p>
    <p>ol er</p>
    <p>an ce !</p>
    <p>Kernel interface!</p>
  </div>
  <div class="page">
    <p>device!</p>
    <p>controller!</p>
    <p>head-end!</p>
    <p>Op0mizer</p>
    <p>transac0on manager</p>
  </div>
  <div class="page">
    <p>BOSS solution: transactions: write access to the building</p>
    <p>Writes to distributed resources  Which interact in physical space  Which are subject to failure  Extend writes with</p>
    <p>Priori0es  Leases  No0fica0ons  Reversion sequences</p>
    <p>amine how the system architecture makes implementing our three motivating applications simpler and more concise, while showing how it helps applications to coexist. Second, we provide a survey of other applications which have been implemented using BOSS, providing evidence of the systems generality.</p>
    <p>two strategies: temperature floating and ventilation adjustment. Building codes often require a rate of fresh air ventilation per room based on occupancy and room size [10, 5]. Keeping ventilation rates at the required minimum is highly desirable for energy savings since it reduces fan power and the need for air conditioning; however, this is difficult to do in traditional building control systems because separate control loops are in charge of varying the fresh air intake into the building, controlling the per-room airflow, and detecting occupants. Occupancy detection is a well-researched subject that is best performed by fusing data from many sensors [2, 1, 32] not normally available.</p>
    <p>Figure 9 shows pseudocode implementing the airflow reductions. The code uses the HAL semantic query interface to find all dampers controlling fresh air intake and adjusts the ventilation rates for their downstream rooms  the more fresh air being brought into the building from the outside, the less airflow is required per room to maintain the required freshness. In the example, line 3 returns dampers servicing the two air handlers (AH1A and AH2A in our building), each of which services around 70 zones, which are found on line 4. We use a simple occupancy model based on time of day and class schedule obtained from a Google Calendar feed, and scale the ventilation as a function of the number of people. This demonstrates coordinated control across traditionally independent building components: on line 6, the actual fresh air intake setting is used to control the room ventilation requirements. Furthermore, a separate building with completely different ventilation layout would be able to run virtually the same control application.</p>
    <p>Figure 9: Ventilation component of the HVAC optimization application.</p>
    <p>takes direct occupant input to adjust room temperatures and ventilation. One of its key features is the ability to temporarily blast warm or cold air into the space in response to a user request. Fault tolerance is crucial in this application; blasts must be reverted even if the control process crashes to ensure occupant comfort and avoid wasting energy. Figure 10 shows the execution flow of the personalized control application and the error handling in response to an emulated crash.</p>
    <p>The application writes to a room setpoint in response to a user request but shortly thereafter crashes. The transaction manager reverts the blast action by undoing the submitted transaction. A subplot of room temperature taken while executing this control flow is also shown in Figure 10. Temperature drops while the cold blast is running and reverts to normal after the application crashes. Unlike traditional computer systems, reverting the room temperature takes time as the space slowly warms back up to steady state.</p>
    <p>We run the personalized control application concurrently with the HVAC optimization application. Since both apps access the same VAV point, some coordination is required to ensure correct behavior. In this case, the HVAC optimization application can coexist with the personal control application: if its commands are overridden at a higher priority, it simply regains control whenever the higher priority application is finished. However, the inverse situation is not acceptable: since users expect an immediate response when initiating a blast, the application locks the VAV points with an exclusive lock, so that if it is itself overridden, it will immediately cause the transaction to abort and display an error message.</p>
    <p>T e</p>
    <p>m p</p>
    <p>( F</p>
    <p>)</p>
    <p>req_auth #VAV[Floor=4] set_temp([65,75]) get_temp()</p>
    <p>Temperature Float App</p>
    <p>SiemensReheatVAV Driver</p>
    <p>TX Manager</p>
    <p>sMAP BACnet</p>
    <p>HALAuth(human/auto approval)</p>
    <p>lookup #VAV</p>
    <p>[Floor=4]</p>
    <p>[s4-20, s4-21, ... ]</p>
    <p>Approved token=ABC set_temp(65)</p>
    <p>token=ABC</p>
    <p>Success</p>
    <p>write life=15verify</p>
    <p>set_temp(65), token=ABC Success txid=123</p>
    <p>write revertSuccess</p>
    <p>Time</p>
    <p>setpoint room temp</p>
    <p>Initialization</p>
    <p>Figure 10: Execution flow of the personalized control application responding to a user request for cooling. After the control process crashes, the transaction manager automatically reverts past actions.</p>
    <p>savings from the HVAC optimization and personal con</p>
  </div>
  <div class="page">
    <p>More BOSS!  sMAP Hardware Presentation Layer!</p>
    <p>30 Drivers, 30k data streams!  Archiver data storage service!</p>
    <p>500 writes/sec!  Stream cleaning and processing !</p>
    <p>Family of apps!  Personal ventilation and lighting control!  Electric grid-aware consumption!</p>
    <p>Name! Sensor Type! Access Method! Channels!</p>
    <p>ISO Data ! CAISO, NYISO, PJM, MISO, ERCOT! Web scrape! 1211!</p>
    <p>ACme devices! Plug-load electric meter! Wireless 6lowpan mesh! 344!</p>
    <p>EECS submetering project! Dent Instruments PowerScout 18 electric meters! Modbus! 4644!</p>
    <p>EECS steam and condensate! Cadillac condensate; Central Station steam meter! Modbus/TCP! 13!</p>
    <p>UC Berkeley submetering feeds!</p>
    <p>ION 6200, Obvius Aquisuite; PSL pQube, Veris Industries E30!</p>
    <p>Mosbus/Ethernet, HTTP! 4269!</p>
    <p>Sutardja Dai, Brower Hall BMS! Siemens Apogee BMS, Legrand WattStopper, Johnson Control BMS!</p>
    <p>BACnet/IP! 4064!</p>
    <p>UC Davis submetering feeds! Misc., Schneider Electric ION! OPC-DA! 34 (+)!</p>
    <p>Weather feeds! Vaisala WXT520 rooftop weather station; Wunderground!</p>
    <p>SDI-12, LabJack/Modbus, web scrape!</p>
    <p>CBE PMP toolkit! Dust motes; New York Times BMS! CSV import; serial ! 874!</p>
    <p>! ! ! !!</p>
    <p>!!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Takeaways  Applying computer systems design to buildings: lots of pieces,</p>
    <p>poten0al  Control systems  Mechanical systems  Occupants</p>
    <p>30% electricity + steam savings, 60% ligh0ng savings in test apps</p>
    <p>Many pieces at hnp://smap.cs.berkeley.edu</p>
    <p>Control systems + CS future work  Making use of the torrent of data?  Compile/enforce constraints into the network?  How to verify applica0ons are behaving?</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>HPL! HPL!</p>
    <p>Hardware Abstraction Layer!</p>
    <p>! Auth.! !</p>
    <p>Trans. mgr.!Time-series!S ec</p>
    <p>ur ity !</p>
    <p>A bs</p>
    <p>tra ct</p>
    <p>io n!</p>
    <p>Is ol</p>
    <p>at io</p>
    <p>n +</p>
    <p>S ch</p>
    <p>ed ul</p>
    <p>in g!</p>
    <p>HPL! HPL!</p>
    <p>Control processes! H</p>
    <p>is to</p>
    <p>ry !Fa</p>
    <p>ul t t</p>
    <p>ol er</p>
    <p>an ce !</p>
    <p>Kernel interface!</p>
  </div>
  <div class="page">
    <p>amine how the system architecture makes implementing our three motivating applications simpler and more concise, while showing how it helps applications to coexist. Second, we provide a survey of other applications which have been implemented using BOSS, providing evidence of the systems generality.</p>
    <p>two strategies: temperature floating and ventilation adjustment. Building codes often require a rate of fresh air ventilation per room based on occupancy and room size [10, 5]. Keeping ventilation rates at the required minimum is highly desirable for energy savings since it reduces fan power and the need for air conditioning; however, this is difficult to do in traditional building control systems because separate control loops are in charge of varying the fresh air intake into the building, controlling the per-room airflow, and detecting occupants. Occupancy detection is a well-researched subject that is best performed by fusing data from many sensors [2, 1, 32] not normally available.</p>
    <p>Figure 9 shows pseudocode implementing the airflow reductions. The code uses the HAL semantic query interface to find all dampers controlling fresh air intake and adjusts the ventilation rates for their downstream rooms  the more fresh air being brought into the building from the outside, the less airflow is required per room to maintain the required freshness. In the example, line 3 returns dampers servicing the two air handlers (AH1A and AH2A in our building), each of which services around 70 zones, which are found on line 4. We use a simple occupancy model based on time of day and class schedule obtained from a Google Calendar feed, and scale the ventilation as a function of the number of people. This demonstrates coordinated control across traditionally independent building components: on line 6, the actual fresh air intake setting is used to control the room ventilation requirements. Furthermore, a separate building with completely different ventilation layout would be able to run virtually the same control application.</p>
    <p>Figure 9: Ventilation component of the HVAC optimization application.</p>
    <p>takes direct occupant input to adjust room temperatures and ventilation. One of its key features is the ability to temporarily blast warm or cold air into the space in response to a user request. Fault tolerance is crucial in this application; blasts must be reverted even if the control process crashes to ensure occupant comfort and avoid wasting energy. Figure 10 shows the execution flow of the personalized control application and the error handling in response to an emulated crash.</p>
    <p>The application writes to a room setpoint in response to a user request but shortly thereafter crashes. The transaction manager reverts the blast action by undoing the submitted transaction. A subplot of room temperature taken while executing this control flow is also shown in Figure 10. Temperature drops while the cold blast is running and reverts to normal after the application crashes. Unlike traditional computer systems, reverting the room temperature takes time as the space slowly warms back up to steady state.</p>
    <p>We run the personalized control application concurrently with the HVAC optimization application. Since both apps access the same VAV point, some coordination is required to ensure correct behavior. In this case, the HVAC optimization application can coexist with the personal control application: if its commands are overridden at a higher priority, it simply regains control whenever the higher priority application is finished. However, the inverse situation is not acceptable: since users expect an immediate response when initiating a blast, the application locks the VAV points with an exclusive lock, so that if it is itself overridden, it will immediately cause the transaction to abort and display an error message.</p>
    <p>Te m</p>
    <p>p (</p>
    <p>F)</p>
    <p>req_auth #VAV[Floor=4] set_temp([65,75]) get_temp()</p>
    <p>Temperature Float App</p>
    <p>SiemensReheatVAV Driver</p>
    <p>TX Manager</p>
    <p>sMAP BACnet</p>
    <p>HALAuth(human/auto approval)</p>
    <p>lookup #VAV</p>
    <p>[Floor=4]</p>
    <p>[s4-20, s4-21, ... ]</p>
    <p>Approved token=ABC set_temp(65)</p>
    <p>token=ABC</p>
    <p>Success</p>
    <p>write life=15verify</p>
    <p>set_temp(65), token=ABC Success txid=123</p>
    <p>write revertSuccess</p>
    <p>Time</p>
    <p>setpoint room temp</p>
    <p>Initialization</p>
    <p>Figure 10: Execution flow of the personalized control application responding to a user request for cooling. After the control process crashes, the transaction manager automatically reverts past actions.</p>
    <p>savings from the HVAC optimization and personal con</p>
    <p>Write applications in terms of relationship between hardware elements!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>! ! ! !</p>
    <p>!</p>
    <p>legacy solution: encode everything in point name!</p>
    <p>SDH.MEC-08.S5-01.AIR_VOLUME</p>
  </div>
  <div class="page">
    <p>BOSS</p>
    <p>sMAP sMAP sMAP sMAP</p>
    <p>Transaction ManagerTime Series Service</p>
    <p>sMAP</p>
    <p>Transaction ClientTime-series Client</p>
    <p>Auth Service HAL Service</p>
    <p>submit callback</p>
    <p>application logic</p>
    <p>BOSS boundary</p>
    <p>Runtime Logic</p>
    <p>system libraries</p>
    <p>Model Training</p>
    <p>publish command</p>
    <p>request</p>
    <p>authorize</p>
    <p>co nt</p>
    <p>ro l p</p>
    <p>ro ce</p>
    <p>ss</p>
    <p>RS-485 BACnet/IPOPC-DA 6loWPANXML/HTTP</p>
    <p>Authorization token</p>
    <p>historical data</p>
    <p>a collec0on of services enabling portable, robust applica:ons for the physical environment</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>writer 1 value: 69F 69</p>
    <p>writer 2 value: 73F 73</p>
    <p>No arbitra0on between applica0ons  Orphaned writes</p>
  </div>
  <div class="page">
    <p>Command Sequence</p>
  </div>
  <div class="page">
    <p>writer 1 value: 69F priority: 3 lease: 3600s</p>
    <p>writer 2 value: 73F priority: 1 lease: 300s</p>
    <p>present value: 69cfm present value: 73cfm</p>
    <p>&lt;time passes&gt;</p>
    <p>writer 2 clear</p>
    <p>BOSS solution: transactions</p>
    <p>pr io ri ty a rr ay</p>
    <p>writer 1 crashes</p>
    <p>Extend writes with  Priori0es  Leases  No0fica0ons  Reversion sequences</p>
    <p>ov er ri dd</p>
    <p>en !</p>
    <p>writer 1 revert sequence runs</p>
  </div>
</Presentation>
