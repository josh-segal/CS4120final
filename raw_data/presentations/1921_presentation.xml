<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Say Goodbye to Virtualization for a Safer Cloud</p>
    <p>Dan Williams, Ricardo Koller, Brandon Lum IBM T.J. Watson Research Center</p>
    <p>Hotcloud18</p>
  </div>
  <div class="page">
    <p>Isolation is important for the cloud</p>
    <p>Infrastructure code</p>
    <p>attacker</p>
    <p>attacker</p>
    <p>Process</p>
    <p>secrets</p>
  </div>
  <div class="page">
    <p>Virtualization is the gold standard for isolation</p>
    <p>Isolation is important for the cloud</p>
    <p>Infrastructure code</p>
    <p>attacker</p>
    <p>attacker</p>
    <p>Process</p>
    <p>secrets</p>
  </div>
  <div class="page">
    <p>Why are VMs the gold standard for isolation?</p>
    <p>QEMU</p>
    <p>Linux</p>
    <p>Low level interface</p>
    <p>KVM</p>
    <p>VM</p>
    <p>Guest</p>
    <p>Application + OS</p>
    <p>Virtual machines use a low level interface to the host</p>
    <p>Disk Network TAP</p>
    <p>Devices</p>
  </div>
  <div class="page">
    <p>Why are VMs the gold standard for isolation?</p>
    <p>Linux</p>
    <p>High level interface</p>
    <p>FS</p>
    <p>Disk Network TAP</p>
    <p>Devices</p>
    <p>A high level interface increases the chances of hitting a bug like the one above</p>
    <p>Dirty COW (CVE-2016-5195)</p>
  </div>
  <div class="page">
    <p>Lower level interface</p>
    <p>Less code</p>
    <p>Fewer vulnerabilities</p>
    <p>Stronger isolation</p>
  </div>
  <div class="page">
    <p>The level of interface has nothing to do with virtualization</p>
    <p>Virtualization makes things worse with regards to isolation</p>
  </div>
  <div class="page">
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>Traditional process</p>
    <p>P ro</p>
    <p>c e</p>
    <p>ss</p>
    <p>m e</p>
    <p>ch a</p>
    <p>n is</p>
    <p>m s</p>
    <p>V ir</p>
    <p>tu a</p>
    <p>liz a</p>
    <p>ti o n</p>
    <p>m</p>
    <p>e ch</p>
    <p>a n</p>
    <p>is m</p>
    <p>s Interface level  mechanism</p>
    <p>For historic reasons we tend to equate the interface mechanism with what it was created for</p>
  </div>
  <div class="page">
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>LibOS or microkerneli</p>
    <p>fication</p>
    <p>Traditional process</p>
    <p>Add library OS components</p>
    <p>Interface level  mechanism P</p>
    <p>ro c e s s</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s V</p>
    <p>ir tu</p>
    <p>a liz</p>
    <p>a tio</p>
    <p>n</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s</p>
    <p>We will show how to construct a system with a low level interface that uses process mechanisms</p>
  </div>
  <div class="page">
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>Dune, gvisor-kvm</p>
    <p>LibOS or microkerneli</p>
    <p>fication</p>
    <p>Traditional process</p>
    <p>Add library OS components</p>
    <p>Expose syscalls through hypercalls</p>
    <p>Interface level  mechanism P</p>
    <p>ro c e s s</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s V</p>
    <p>ir tu</p>
    <p>a liz</p>
    <p>a tio</p>
    <p>n</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>An application using files uses a file system provided by the host</p>
    <p>Adjust the interface level</p>
    <p>Linux</p>
    <p>Interface</p>
    <p>FS</p>
    <p>Guest Application</p>
    <p>Filesystem APIs</p>
    <p>disk</p>
  </div>
  <div class="page">
    <p>Adjust the interface level</p>
    <p>Guest Application</p>
    <p>FS</p>
    <p>Linux</p>
    <p>Interface Filesystem APIs</p>
    <p>FS</p>
    <p>libFUSE</p>
    <p>FS Guest</p>
    <p>Application</p>
    <p>Linux</p>
    <p>Interface Filesystem APIs</p>
    <p>FS</p>
    <p>Can adjust the level of interface by moving the implementation to user level</p>
    <p>disk disk</p>
  </div>
  <div class="page">
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>LibOS or microkerneli</p>
    <p>fication</p>
    <p>Traditional process</p>
    <p>Add library OS components</p>
    <p>Interface level  mechanism P</p>
    <p>ro c e s s</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s V</p>
    <p>ir tu</p>
    <p>a liz</p>
    <p>a tio</p>
    <p>n</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s</p>
    <p>How much isolation are we really gaining by going left?</p>
    <p>Whats the isolation cost of virtualization?</p>
  </div>
  <div class="page">
    <p>Lower level interface</p>
    <p>Less code</p>
    <p>Fewer vulnerabilities</p>
    <p>Stronger isolation</p>
    <p>Measure the amount of code used as a proxy for measuring isolation</p>
  </div>
  <div class="page">
    <p>Want to measure how much of the kernel is exposed  Kernel function tracing (ftrace)</p>
    <p>Metric for Isolation</p>
    <p>Linux</p>
    <p>Interface</p>
    <p>Application as a regular process</p>
    <p>Linux</p>
    <p>Interface</p>
    <p>&lt;</p>
    <p>Application as a virtual machine</p>
  </div>
  <div class="page">
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>Traditional process</p>
    <p>P ro</p>
    <p>c e</p>
    <p>s s</p>
    <p>m e</p>
    <p>c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s V</p>
    <p>ir tu</p>
    <p>a liz</p>
    <p>a ti o</p>
    <p>n</p>
    <p>m e</p>
    <p>c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s</p>
    <p>Comparing all options</p>
    <p>Linux</p>
    <p>TCP/IP</p>
    <p>socket Linux</p>
    <p>KVM</p>
    <p>kvm</p>
    <p>QEMU</p>
    <p>TCP/IP</p>
    <p>FS</p>
    <p>FS</p>
    <p>TAP</p>
  </div>
  <div class="page">
    <p>Comparing all options</p>
    <p>Linux TAP</p>
    <p>tap Linux</p>
    <p>TCP/IP</p>
    <p>socket Linux</p>
    <p>KVM</p>
    <p>kvm</p>
    <p>QEMU</p>
    <p>TCP/IP TCP/IP</p>
    <p>FSFS   FS</p>
    <p>FS</p>
    <p>TAP</p>
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>LibOS or microkerneli</p>
    <p>fication</p>
    <p>Traditional process</p>
    <p>Add library OS componentsP</p>
    <p>ro c e</p>
    <p>s s</p>
    <p>m e</p>
    <p>c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s V</p>
    <p>ir tu</p>
    <p>a liz</p>
    <p>a ti o</p>
    <p>n</p>
    <p>m e</p>
    <p>c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Dangers of virtualization mechanisms</p>
    <p>qemu kvm tap socket</p>
    <p>U n</p>
    <p>iq u</p>
    <p>e k</p>
    <p>e rn</p>
    <p>e l</p>
    <p>fu n</p>
    <p>ct io</p>
    <p>n s</p>
    <p>a c ce</p>
    <p>ss e</p>
    <p>d</p>
    <p>virtualization network</p>
    <p>other</p>
    <p>kvm is better than socket  The white area in kvm represents the cost of managing</p>
    <p>virtualization hardware</p>
  </div>
  <div class="page">
    <p>Whats the catch?</p>
    <p>How do we design systems to achieve better isolation in the cloud? Considering these:</p>
    <p>Generality</p>
    <p>Performance</p>
    <p>Maintenance</p>
    <p>What isolation metric to use?</p>
    <p>Nabla containers: https://nabla-containers.github.io/</p>
  </div>
  <div class="page">
    <p>Dangers of virtualization mechanisms</p>
    <p>qemu kvm tap socket</p>
    <p>U n</p>
    <p>iq u</p>
    <p>e k</p>
    <p>e rn</p>
    <p>e l</p>
    <p>fu n</p>
    <p>ct io</p>
    <p>n s</p>
    <p>a c ce</p>
    <p>ss e</p>
    <p>d</p>
    <p>virtualization network</p>
    <p>other</p>
    <p>tap reduces the amount ot networking needed as its being pushed up</p>
    <p>tap is even lower than kvm</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>How do we design systems to achieve better isolation in the cloud?</p>
    <p>What isolation metric to use?  Can our systems be bug free?  Is less code better?</p>
    <p>What about sanitizing code? More code is better in that case</p>
    <p>Nabla containers: https://nabla-containers.github.io/</p>
  </div>
  <div class="page">
    <p>BACKUP</p>
  </div>
  <div class="page">
    <p>How can we ensure the protection of secrets in a multi-tenant cloud</p>
    <p>Horizontal vs. Vertical attacks</p>
    <p>Kernel</p>
    <p>attacker</p>
    <p>attacker</p>
    <p>Process</p>
    <p>secrets</p>
    <p>attacker</p>
  </div>
  <div class="page">
    <p>Thin interface is proxy for less complexity to exploit</p>
    <p>Metric for Isolation</p>
    <p>Linux</p>
    <p>Interface</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Thin interface is proxy for less complexity to exploit</p>
    <p>Want to measure how much of the kernel is exposed  Kernel function tracing (ftrace)</p>
    <p>Metric for Isolation</p>
    <p>Linux</p>
    <p>Interface</p>
    <p>Application</p>
    <p>Linux</p>
    <p>Interface</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Interface level  mechanism</p>
    <p>Process (High)</p>
    <p>Devices (Low) Traditional</p>
    <p>VMs</p>
    <p>Unix Process, Containers</p>
    <p>FUSE, DPDK, Userfaultd, UML</p>
    <p>DUNE</p>
    <p>HW Interface Mechanism</p>
    <p>Panoply, Scone</p>
    <p>Haven, Graphene</p>
    <p>SGXVirtualization sysenter (Process)</p>
  </div>
  <div class="page">
    <p>Dangers of virtualization mechanisms</p>
    <p>qemu kvm tap socket</p>
    <p>U n</p>
    <p>iq u</p>
    <p>e k</p>
    <p>e rn</p>
    <p>e l</p>
    <p>fu n</p>
    <p>ct io</p>
    <p>n s</p>
    <p>a c ce</p>
    <p>ss e</p>
    <p>d</p>
    <p>virtualization network</p>
    <p>other</p>
  </div>
  <div class="page">
    <p>https://www.linuxcounter.net/statistics/kernel</p>
    <p>Linux Kernel's LOC increase</p>
  </div>
  <div class="page">
    <p>https://www.linuxcounter.net/statistics/kernel</p>
    <p>Linux Kernel's LOC increase</p>
    <p>Commit 4ceb5db97 Dirty COW (CVE-2016-5195)</p>
  </div>
  <div class="page">
    <p>Containers vs VMs for isolation?</p>
    <p>QEMU</p>
    <p>TCP/IP</p>
    <p>FS</p>
    <p>Linux</p>
    <p>High level interface</p>
    <p>FS</p>
    <p>TCP/IP</p>
    <p>Linux</p>
    <p>Low level interface</p>
    <p>KVM</p>
    <p>Container VM</p>
    <p>Guest Application</p>
    <p>Guest Application</p>
    <p>+ OS</p>
  </div>
  <div class="page">
    <p>Low-level interfaces</p>
    <p>High-level interfaces</p>
    <p>Traditional VMs</p>
    <p>Dune</p>
    <p>LibOS or microkerneli</p>
    <p>fication</p>
    <p>Traditional process</p>
    <p>Add library OS components</p>
    <p>Expose syscalls through hypercalls</p>
    <p>Interface level  mechanism P</p>
    <p>ro c e s s</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s V</p>
    <p>ir tu</p>
    <p>a liz</p>
    <p>a tio</p>
    <p>n</p>
    <p>m e c h</p>
    <p>a n</p>
    <p>is m</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Lower level interface</p>
    <p>Less code</p>
    <p>Fewer vulnerabilities</p>
    <p>Stronger isolation</p>
    <p>The level of interface has nothing to do with virtualization</p>
  </div>
  <div class="page">
    <p>Lower level interface</p>
    <p>Less code</p>
    <p>Fewer vulnerabilities</p>
    <p>Stronger isolation</p>
    <p>Virtualization adds code and complexity</p>
    <p>Linux</p>
    <p>Low level interface</p>
    <p>KVM</p>
    <p>Linux</p>
    <p>Block interface</p>
  </div>
  <div class="page">
    <p>Comparing all options</p>
    <p>Linux TAP</p>
    <p>tap Linux</p>
    <p>TCP/IP</p>
    <p>socket Linux</p>
    <p>KVM</p>
    <p>kvm</p>
    <p>QEMU</p>
    <p>TCP/IP TCP/IP</p>
    <p>FSFS   FS</p>
    <p>FS</p>
    <p>TAP Linux</p>
    <p>qemu</p>
    <p>QEMU</p>
    <p>TCP/IP</p>
    <p>FS</p>
    <p>TAP</p>
  </div>
  <div class="page">
    <p>Dangers of virtualization mechanisms</p>
    <p>qemu kvm tap socket</p>
    <p>U n</p>
    <p>iq u</p>
    <p>e k</p>
    <p>e rn</p>
    <p>e l</p>
    <p>fu n</p>
    <p>ct io</p>
    <p>n s</p>
    <p>a c ce</p>
    <p>ss e</p>
    <p>d</p>
    <p>virtualization network</p>
    <p>other</p>
    <p>qemu is the best you can do by taking stuff out of the kernel</p>
  </div>
</Presentation>
