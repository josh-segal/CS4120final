<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Behavior-Based Problem Localization for Parallel File Systems</p>
    <p>Michael P. Kasick</p>
    <p>Rajeev Gandhi, Priya Narasimhan</p>
    <p>Carnegie Mellon University</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 1</p>
  </div>
  <div class="page">
    <p>Problem Diagnosis Goals</p>
    <p>To leverage behavioral instrumentation sources to diagnose problems in an off-the-shelf file system</p>
    <p>Sources: Instruction-pointer samples &amp; function-call traces Environmental performance problems: disk &amp; network faults Target file system: PVFS</p>
    <p>To develop methods applicable to existing deployments Application transparency: avoid code-level instrumentation Minimal overhead, training, and configuration Support for arbitrary workloads: avoid models, SLOs, etc.</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 2</p>
  </div>
  <div class="page">
    <p>Motivation: Real Problem Anecdotes</p>
    <p>Problems motivated by PVFS developers experiences From Argonnes Blue Gene/P PVFS cluster</p>
    <p>Limping-but-alive server problems</p>
    <p>No errors reported, cant identify faulty node with logs Single faulty server impacts overall system performance</p>
    <p>Storage-related problems:</p>
    <p>Accidental launch of rogue processes, decreases throughput Buggy RAID controller issues patrol reads when not at idle</p>
    <p>Network-related problems:</p>
    <p>Faulty-switch ports corrupt packets, fail CRC checks Overloaded switches drop packets but pass diagnostic tests</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 3</p>
  </div>
  <div class="page">
    <p>Motivation: Real Problem Anecdotes</p>
    <p>Problems motivated by PVFS developers experiences From Argonnes Blue Gene/P PVFS cluster</p>
    <p>Limping-but-alive server problems No errors reported, cant identify faulty node with logs Single faulty server impacts overall system performance</p>
    <p>Storage-related problems:</p>
    <p>Accidental launch of rogue processes, decreases throughput Buggy RAID controller issues patrol reads when not at idle</p>
    <p>Network-related problems:</p>
    <p>Faulty-switch ports corrupt packets, fail CRC checks Overloaded switches drop packets but pass diagnostic tests</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 3</p>
  </div>
  <div class="page">
    <p>Motivation: Real Problem Anecdotes</p>
    <p>Problems motivated by PVFS developers experiences From Argonnes Blue Gene/P PVFS cluster</p>
    <p>Limping-but-alive server problems No errors reported, cant identify faulty node with logs Single faulty server impacts overall system performance</p>
    <p>Storage-related problems: Accidental launch of rogue processes, decreases throughput Buggy RAID controller issues patrol reads when not at idle</p>
    <p>Network-related problems:</p>
    <p>Faulty-switch ports corrupt packets, fail CRC checks Overloaded switches drop packets but pass diagnostic tests</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 3</p>
  </div>
  <div class="page">
    <p>Motivation: Real Problem Anecdotes</p>
    <p>Problems motivated by PVFS developers experiences From Argonnes Blue Gene/P PVFS cluster</p>
    <p>Limping-but-alive server problems No errors reported, cant identify faulty node with logs Single faulty server impacts overall system performance</p>
    <p>Storage-related problems: Accidental launch of rogue processes, decreases throughput Buggy RAID controller issues patrol reads when not at idle</p>
    <p>Network-related problems: Faulty-switch ports corrupt packets, fail CRC checks Overloaded switches drop packets but pass diagnostic tests</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 3</p>
  </div>
  <div class="page">
    <p>Motivation: Behavioral Approach</p>
    <p>Previous work demonstrates performance-metric approach Performance manifestations masked by normal deviations Certain faults (e.g., network-hogs) not reliably diagnosed</p>
    <p>Performance problems also have behavioral manifestations Overloaded servers act differently from normal servers Behavioral manifestations may be more prominent</p>
    <p>M. P. Kasick et al. Black-box problem diagnosis in parallel file systems. In FAST, San Jose, CA, Feb. 2010.</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 4</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 5</p>
  </div>
  <div class="page">
    <p>Parallel Virtual File System</p>
    <p>Open source parallel file system Aims to support I/O-intensive applications Provides high-bandwidth, concurrent access Runs on a cluster of commodity computers</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 6</p>
  </div>
  <div class="page">
    <p>PVFS Architecture</p>
    <p>network</p>
    <p>clients</p>
    <p>I/O servers</p>
    <p>ios0 ios1 ios2 iosN mds0 mdsM</p>
    <p>metadata</p>
    <p>servers</p>
    <p>One or more I/O and metadata servers Clients communicate with every server</p>
    <p>No server-server communication</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 7</p>
  </div>
  <div class="page">
    <p>PVFS Data Striping</p>
    <p>543210Logical File:</p>
    <p>Server 1 0 3 6</p>
    <p>Server 2 1 4 7</p>
    <p>Server 3 2 5 8</p>
    <p>Physical Files</p>
    <p>Client stripes local file into 64 kB1 MB chunks Writes to each I/O server in round-robin order</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 8</p>
  </div>
  <div class="page">
    <p>Parallel File Systems: Empirical Insights</p>
    <p>Server behavior is similar for most requests Large I/O requests are striped across all servers Small I/O requests, in aggregate, equally load all servers</p>
    <p>Hypothesis: Behavioral peer-similarity Fault-free servers exhibit similar behavioral metrics Faulty servers exhibit behavioral dissimilarities Peer-comparison of metrics identifies faulty node</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 9</p>
  </div>
  <div class="page">
    <p>Example: Write-Network-Hog Fault</p>
    <p>Elapsed Time (s)</p>
    <p>tc p_</p>
    <p>v4 _r</p>
    <p>cv S</p>
    <p>am pl</p>
    <p>es Faulty server</p>
    <p>Non-faulty servers</p>
    <p>Peer-asymmetry</p>
    <p>Strongly motivates peer-comparison approach Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 10</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 11</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Fault Model: Non-fail-stop problems</p>
    <p>Limping-but-alive performance problems</p>
    <p>Problems affecting storage &amp; network resources</p>
    <p>Assumptions: Hardware is homogeneous, identically configured Workloads are non-pathological (balanced requests) Majority of servers exhibit fault-free behavior</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 12</p>
  </div>
  <div class="page">
    <p>Instrumentation: Sample Profiling</p>
    <p>Samples of the CPU instruction pointer: Determines program &amp; function the CPU is executing Statistical approximation of function execution times Measures each functions computational demand</p>
    <p>OProfile: User- &amp; kernel-space sample profiler Samples via NMI every 100,000 unhalted CPU cycles Profiles collected every 10 seconds on each server Samples attributed to application, binary image, &amp; function</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 13</p>
  </div>
  <div class="page">
    <p>Instrumentation: Function-Call Tracing</p>
    <p>Traces of function-call entries &amp; exits: Creates profiles of function-call count &amp; execution time</p>
    <p>Count: Number of times a particular function is called Time: Wall-clock time spent executing or blocked in a syscall</p>
    <p>Provides exact metrics, not approximations</p>
    <p>Custom instrumentation module: Instruments PVFS at build-time, requires source code Count &amp; time profiles collected every second on each server Traces PVFS daemon only, not kernel or other processes</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 14</p>
  </div>
  <div class="page">
    <p>Instrumentation Examples</p>
    <p>Sample profile example:</p>
    <p>Application Image Function Samples pvfs2-server vmlinux tcp_recvmsg 658 vmlinux vmlinux sk_run_filter 808 vmlinux vmlinux tcp_rcv_established 686 vmlinux vmlinux tcp_v4_rcv 943</p>
    <p>Function-call trace example:</p>
    <p>Function Count Time (s) job_testcontext 58 1.04 dbpf_pwrite 9 0.75 dbpf_dspace_testcontext 118 0.99 dbpf_sync_db 11 0.33</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 15</p>
  </div>
  <div class="page">
    <p>Workloads</p>
    <p>ddw &amp; ddr (dd write &amp; read) Use dd to write/read many GB to/from file Large (order MB) I/O requests, saturating workload</p>
    <p>iozonew &amp; iozoner (IOzone write &amp; read) Ran in either write/rewrite or read/reread mode Large I/O requests, workload transitions, fsync</p>
    <p>postmark (PostMark) Metadata-heavy, small reads/writes (single server) Simulates email/news servers</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 16</p>
  </div>
  <div class="page">
    <p>Fault Types</p>
    <p>Susceptible resources: Storage: Access contention Network: Congestion, packet loss (faulty hardware)</p>
    <p>Manifestation mechanism: Hog: Introduces new workload (visible behavior) Busy/Loss: Alters existing workload</p>
    <p>Storage Network Hog disk-hog write-network-hog</p>
    <p>read-network-hog Busy/Loss disk-busy receive-packet-loss</p>
    <p>send-packet-loss</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 17</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>Cluster of 10 clients, 10 combined I/O &amp; metadata servers</p>
    <p>Each client runs same workload for 600 s</p>
    <p>Faults injected on single server for 300 s</p>
    <p>All workload &amp; fault combinations run 10 times</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 18</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 19</p>
  </div>
  <div class="page">
    <p>Diagnostic Algorithm</p>
    <p>Node Indictment Analyzes sample, count, and time profiles across servers Automatically identifies faulty servers</p>
    <p>Root-Cause Analysis Identifies functions most affected by an anomaly Enables manual inspection of faulty resources</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 20</p>
  </div>
  <div class="page">
    <p>Data Representation: Feature Vectors</p>
    <p>Metric profiles represented as feature vectors Components correspond to profiled functions Values consist of metric sums over a sliding window</p>
    <p>&lt; . . . 2232, 1900, 3886, . . . &gt; sk_run_filter tcp_rcv_established tcp_v4_rcv</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 21</p>
  </div>
  <div class="page">
    <p>Node Indictment Peer-compare feature vectors across servers</p>
    <p>Compute vectors for each server over a sliding window Compute Manhattan distance for each server pair Determine median pair-wise distance for each server Flag server if its median distance exceeds threshold</p>
    <p>&lt; 2232, 1900, 3886 &gt; &lt; 808, 686, 943 &gt;</p>
    <p>&lt; 830, 678, 977 &gt; &lt; 807, 770, 987 &gt;</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 22</p>
  </div>
  <div class="page">
    <p>Node Indictment Peer-compare feature vectors across servers</p>
    <p>Compute vectors for each server over a sliding window</p>
    <p>Compute Manhattan distance for each server pair Determine median pair-wise distance for each server Flag server if its median distance exceeds threshold</p>
    <p>&lt; 2232, 1900, 3886 &gt; &lt; 808, 686, 943 &gt;</p>
    <p>&lt; 830, 678, 977 &gt; &lt; 807, 770, 987 &gt;</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 22</p>
  </div>
  <div class="page">
    <p>Node Indictment Peer-compare feature vectors across servers</p>
    <p>Compute vectors for each server over a sliding window Compute Manhattan distance for each server pair</p>
    <p>Determine median pair-wise distance for each server Flag server if its median distance exceeds threshold</p>
    <p>&lt; 2232, 1900, 3886 &gt; &lt; 808, 686, 943 &gt;</p>
    <p>&lt; 830, 678, 977 &gt; &lt; 807, 770, 987 &gt;</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 22</p>
  </div>
  <div class="page">
    <p>Node Indictment Peer-compare feature vectors across servers</p>
    <p>Compute vectors for each server over a sliding window Compute Manhattan distance for each server pair Determine median pair-wise distance for each server</p>
    <p>Flag server if its median distance exceeds threshold</p>
    <p>&lt; 2232, 1900, 3886 &gt; &lt; 808, 686, 943 &gt;</p>
    <p>&lt; 830, 678, 977 &gt; &lt; 807, 770, 987 &gt;</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 22</p>
  </div>
  <div class="page">
    <p>Node Indictment Peer-compare feature vectors across servers</p>
    <p>Compute vectors for each server over a sliding window Compute Manhattan distance for each server pair Determine median pair-wise distance for each server Flag server if its median distance exceeds threshold</p>
    <p>&lt; 2232, 1900, 3886 &gt; &lt; 808, 686, 943 &gt;</p>
    <p>&lt; 830, 678, 977 &gt; &lt; 807, 770, 987 &gt;</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 22</p>
  </div>
  <div class="page">
    <p>Threshold Selection</p>
    <p>Fault-free training session (stress test) Run ddw, ddr, (&amp; postmark) under fault-free conditions Find minimum threshold that eliminates all anomalies</p>
    <p>Node indictment uses per-server thresholds Captures normal behavioral deviations of each server Important to train on each cluster &amp; file system</p>
    <p>Train on performance-stressing workloads only Behavior deviates most when servers are saturated Caveat: Ignores non-performance-related deviations</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 23</p>
  </div>
  <div class="page">
    <p>Root-Cause Analysis</p>
    <p>Identify the functions most affected by an anomalous metric Compute component-wise distances to median-dist. node Sum component-wise distances over all windows Rank &amp; present top-ten affected functions for inspection</p>
    <p>Application Image Function socat vmlinux copy_user_generic_string vmlinux vmlinux set_normalized_timespec vmlinux vmlinux ktime_get_ts socat socat /usr/bin/socat tg3.ko tg3.ko tg3_poll vmlinux vmlinux tcp_v4_rcv vmlinux vmlinux __inet_lookup_established vmlinux vmlinux sk_run_filter vmlinux vmlinux tcp_rcv_established vmlinux vmlinux kmem_cache_alloc_node</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 24</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 25</p>
  </div>
  <div class="page">
    <p>Results: Without Postmark</p>
    <p>diskhog diskbusy wnethog rnethog recvloss sendloss</p>
    <p>Samples Count Time Combined</p>
    <p>Fault</p>
    <p>Tr ue</p>
    <p>P os</p>
    <p>iti ve</p>
    <p>( %</p>
    <p>)</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 26</p>
  </div>
  <div class="page">
    <p>Results: With Postmark</p>
    <p>diskhog diskbusy wnethog rnethog recvloss sendloss</p>
    <p>Samples Count Time Combined</p>
    <p>Fault</p>
    <p>Tr ue</p>
    <p>P os</p>
    <p>iti ve</p>
    <p>( %</p>
    <p>)</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 27</p>
  </div>
  <div class="page">
    <p>Results Summary</p>
    <p>Each metric best discriminates different types of faults Samples: network-hogs from kernel-level TCP computation Count: receive-packet-loss from socket read calls Time: disk-hog/disk-busy from blocked I/O syscalls</p>
    <p>Count attenuated by postmarks random &amp; uneven requests</p>
    <p>False-positive rate &lt; 10% for all fault types</p>
    <p>Instrumentation overhead (increase in workload runtime) &lt; 7% (98% conf.) for all sample profiling &amp; large I/O tracing &gt; 113% (98% conf.) for function-call tracing with postmark</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 28</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 29</p>
  </div>
  <div class="page">
    <p>Future Directions</p>
    <p>Analysis: Relevance of specific functions (postmark) Weigh feature vectors by component-wise variance Emphasizes functions affected least by random behavior</p>
    <p>Instrumentation: Kernel-level function-call tracing To better observe kernel behavior (e.g., TCP retransmits) Would diagnose send-packet-loss during read workloads</p>
    <p>Overhead Reduction: Selective call site instrumentation Include sites determined relevant to prior observed faults Exclude sites frequently called but determined less relevant</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 30</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Behavior-based approach to problem diagnosis in PVFS Illustrates use of sample profiling &amp; call tracing in diagnosis Leverages peer-comparison to identify faulty nodes Enables root-cause analysis by identifying affected functions</p>
    <p>Diagnosis method is applicable to existing deployments Sample profiling is minimally invasive, low overhead Call tracing prototype works well, may be further refined Fault-free training with stress tests</p>
    <p>Michael P. Kasick Behavior-Based Problem Localization October 3, 2010 31</p>
  </div>
</Presentation>
