<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Bucket Game with Applications to Set Multicover and Dynamic Page Migration</p>
    <p>Marcin Bienkowski1 Jaroslaw Byrka2</p>
    <p>European Symposium on Algorithms, 2005</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Bucket Game items and players</p>
    <p>There are n buckets;</p>
    <p>Infinite number of objects(balls) to put into buckets;</p>
    <p>And two players (Alice and Bob).</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Bucket Game items and players</p>
    <p>There are n buckets;</p>
    <p>Infinite number of objects(balls) to put into buckets;</p>
    <p>And two players (Alice and Bob).</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Bucket Game items and players</p>
    <p>There are n buckets;</p>
    <p>Infinite number of objects(balls) to put into buckets;</p>
    <p>And two players (Alice and Bob).</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>One round of the game</p>
    <p>In each round of the game: player A defines nonnegative weights on the buckets; player B chooses a subset of buckets that have at least a fraction c of a total weight and puts a ball into each of those buckets.</p>
    <p>The game is over, when each bucket contains at least T balls. Marcin Bienkowski, Jaroslaw Byrka Bucket Game with applications</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>One round of the game</p>
    <p>In each round of the game: player A defines nonnegative weights on the buckets; player B chooses a subset of buckets that have at least a fraction c of a total weight and puts a ball into each of those buckets.</p>
    <p>The game is over, when each bucket contains at least T balls. Marcin Bienkowski, Jaroslaw Byrka Bucket Game with applications</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>One round of the game</p>
    <p>In each round of the game: player A defines nonnegative weights on the buckets; player B chooses a subset of buckets that have at least a fraction c of a total weight and puts a ball into each of those buckets.</p>
    <p>The game is over, when each bucket contains at least T balls. Marcin Bienkowski, Jaroslaw Byrka Bucket Game with applications</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>One round of the game</p>
    <p>In each round of the game: player A defines nonnegative weights on the buckets; player B chooses a subset of buckets that have at least a fraction c of a total weight and puts a ball into each of those buckets.</p>
    <p>The game is over, when each bucket contains at least T balls. Marcin Bienkowski, Jaroslaw Byrka Bucket Game with applications</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>One round of the game</p>
    <p>In each round of the game: player A defines nonnegative weights on the buckets; player B chooses a subset of buckets that have at least a fraction c of a total weight and puts a ball into each of those buckets.</p>
    <p>The game is over, when each bucket contains at least T balls. Marcin Bienkowski, Jaroslaw Byrka Bucket Game with applications</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Game Overview</p>
    <p>The parameters are n, c, and T .</p>
    <p>The goal of A is to minimize the number of rounds - A defines weights to force B to put balls in desired buckets.</p>
    <p>B wants to play as long as possible.</p>
    <p>The question is: How long will they play? (How many rounds are sufficient for A to finish the game?)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Game Overview</p>
    <p>The parameters are n, c, and T .</p>
    <p>The goal of A is to minimize the number of rounds - A defines weights to force B to put balls in desired buckets.</p>
    <p>B wants to play as long as possible.</p>
    <p>The question is: How long will they play? (How many rounds are sufficient for A to finish the game?)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Game Overview</p>
    <p>The parameters are n, c, and T .</p>
    <p>The goal of A is to minimize the number of rounds - A defines weights to force B to put balls in desired buckets.</p>
    <p>B wants to play as long as possible.</p>
    <p>The question is: How long will they play? (How many rounds are sufficient for A to finish the game?)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Easy Bounds</p>
    <p>T = 1</p>
    <p>Suppose A gives 1 to empty, and 0 to nonempty buckets, then after O(log n) rounds each bucket contains a ball. Suppose B chooses the subset with smallest number of empty buckets, then (log n) rounds are necessary before each bucket contains a ball.</p>
    <p>Easy consequences for more rounds</p>
    <p>O(T  log n) rounds are sufficient. (T + log n) rounds are necessary.</p>
    <p>The interesting case is for T = log n: log n  number of rounds  log2 n</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Easy Bounds</p>
    <p>T = 1</p>
    <p>Suppose A gives 1 to empty, and 0 to nonempty buckets, then after O(log n) rounds each bucket contains a ball. Suppose B chooses the subset with smallest number of empty buckets, then (log n) rounds are necessary before each bucket contains a ball.</p>
    <p>Easy consequences for more rounds</p>
    <p>O(T  log n) rounds are sufficient. (T + log n) rounds are necessary.</p>
    <p>The interesting case is for T = log n: log n  number of rounds  log2 n</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Easy Bounds</p>
    <p>T = 1</p>
    <p>Suppose A gives 1 to empty, and 0 to nonempty buckets, then after O(log n) rounds each bucket contains a ball. Suppose B chooses the subset with smallest number of empty buckets, then (log n) rounds are necessary before each bucket contains a ball.</p>
    <p>Easy consequences for more rounds</p>
    <p>O(T  log n) rounds are sufficient. (T + log n) rounds are necessary.</p>
    <p>The interesting case is for T = log n: log n  number of rounds  log2 n</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Strategy for Player A</p>
    <p>Strategy (Exponential Balancing)</p>
    <p>In each round define the weight of a bucket i to be wi = n</p>
    <p>Lemma</p>
    <p>If T = log2 n and A uses Exponential Balancing Strategy(EBS), she has a guaranty to finish the game in O(log n) rounds.</p>
    <p>Corollary</p>
    <p>Player A has a strategy to finish the game in O(T + log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Strategy for Player A</p>
    <p>Strategy (Exponential Balancing)</p>
    <p>In each round define the weight of a bucket i to be wi = n</p>
    <p>Lemma</p>
    <p>If T = log2 n and A uses Exponential Balancing Strategy(EBS), she has a guaranty to finish the game in O(log n) rounds.</p>
    <p>Corollary</p>
    <p>Player A has a strategy to finish the game in O(T + log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Strategy for Player A</p>
    <p>Strategy (Exponential Balancing)</p>
    <p>In each round define the weight of a bucket i to be wi = n</p>
    <p>Lemma</p>
    <p>If T = log2 n and A uses Exponential Balancing Strategy(EBS), she has a guaranty to finish the game in O(log n) rounds.</p>
    <p>Corollary</p>
    <p>Player A has a strategy to finish the game in O(T + log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Proof that EBS is good for T = log n</p>
    <p>Suppose T = log n and A uses EBS.</p>
    <p>Consider the value : W =</p>
    <p>i=1,...,n wi =</p>
    <p>i=1,...,n n</p>
    <p>When B puts a ball into some bucket it consumes half of its weight. In any round, the game looses a constant fraction of its value.</p>
    <p>Starting value is n2.</p>
    <p>When value gets down to 1 each of the buckets contains at least log2n balls.</p>
    <p>Hence, the game is over after O(log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Proof that EBS is good for T = log n</p>
    <p>Suppose T = log n and A uses EBS.</p>
    <p>Consider the value : W =</p>
    <p>i=1,...,n wi =</p>
    <p>i=1,...,n n</p>
    <p>When B puts a ball into some bucket it consumes half of its weight. In any round, the game looses a constant fraction of its value.</p>
    <p>Starting value is n2.</p>
    <p>When value gets down to 1 each of the buckets contains at least log2n balls.</p>
    <p>Hence, the game is over after O(log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Proof that EBS is good for T = log n</p>
    <p>Suppose T = log n and A uses EBS.</p>
    <p>Consider the value : W =</p>
    <p>i=1,...,n wi =</p>
    <p>i=1,...,n n</p>
    <p>When B puts a ball into some bucket it consumes half of its weight. In any round, the game looses a constant fraction of its value.</p>
    <p>Starting value is n2.</p>
    <p>When value gets down to 1 each of the buckets contains at least log2n balls.</p>
    <p>Hence, the game is over after O(log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Definition Simple Observations Exponential Balancing Technique</p>
    <p>Proof that EBS is good for T = log n</p>
    <p>Suppose T = log n and A uses EBS.</p>
    <p>Consider the value : W =</p>
    <p>i=1,...,n wi =</p>
    <p>i=1,...,n n</p>
    <p>When B puts a ball into some bucket it consumes half of its weight. In any round, the game looses a constant fraction of its value.</p>
    <p>Starting value is n2.</p>
    <p>When value gets down to 1 each of the buckets contains at least log2n balls.</p>
    <p>Hence, the game is over after O(log n) rounds.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Definitions</p>
    <p>Definition (Set Cover)</p>
    <p>Given a collection C of subsets of S, such that</p>
    <p>si C si = S, find a collection C  C, such that</p>
    <p>si C si = S and |C</p>
    <p>| is minimal.</p>
    <p>Definition (k-SetCover)</p>
    <p>Given a collection C of subsets of S, such that</p>
    <p>si C si = S, find a multiset C of elements of C, such that each element of S is a member of at least k sets in C and |C| is minimal.</p>
    <p>Rajagopalan and Vazirani provided in 1999 a Hn-approximation algorithm for a bit more general problem. Our algorithm produces a solution to k-SetCover with cost O((k + log n)  c), where c is the cost of an optimal solution of the corresponding Set Cover problem.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Definitions</p>
    <p>Definition (Set Cover)</p>
    <p>Given a collection C of subsets of S, such that</p>
    <p>si C si = S, find a collection C  C, such that</p>
    <p>si C si = S and |C</p>
    <p>| is minimal.</p>
    <p>Definition (k-SetCover)</p>
    <p>Given a collection C of subsets of S, such that</p>
    <p>si C si = S, find a multiset C of elements of C, such that each element of S is a member of at least k sets in C and |C| is minimal.</p>
    <p>Rajagopalan and Vazirani provided in 1999 a Hn-approximation algorithm for a bit more general problem. Our algorithm produces a solution to k-SetCover with cost O((k + log n)  c), where c is the cost of an optimal solution of the corresponding Set Cover problem.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Definitions</p>
    <p>Definition (Set Cover)</p>
    <p>Given a collection C of subsets of S, such that</p>
    <p>si C si = S, find a collection C  C, such that</p>
    <p>si C si = S and |C</p>
    <p>| is minimal.</p>
    <p>Definition (k-SetCover)</p>
    <p>Given a collection C of subsets of S, such that</p>
    <p>si C si = S, find a multiset C of elements of C, such that each element of S is a member of at least k sets in C and |C| is minimal.</p>
    <p>Rajagopalan and Vazirani provided in 1999 a Hn-approximation algorithm for a bit more general problem. Our algorithm produces a solution to k-SetCover with cost O((k + log n)  c), where c is the cost of an optimal solution of the corresponding Set Cover problem.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Computing Partial Covers</p>
    <p>To compute a good cover of all the elements is difficult (there is no c  log n-approximation for c &lt; 1 unless NP  DTIME (nlog log n)); computing reasonable partial covers is easier;</p>
    <p>we introduce weights on elements.</p>
    <p>Lemma</p>
    <p>For any 0 &lt; c &lt; 302  0.768 there exists an algorithm that, in polynomial time, computes a partial set-cover that covers at least a fraction c of elements weight, using at most 20(1c) 302c</p>
    <p>c sets.</p>
    <p>0  1.463,</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Computing Partial Covers</p>
    <p>To compute a good cover of all the elements is difficult (there is no c  log n-approximation for c &lt; 1 unless NP  DTIME (nlog log n)); computing reasonable partial covers is easier;</p>
    <p>we introduce weights on elements.</p>
    <p>Lemma</p>
    <p>For any 0 &lt; c &lt; 302  0.768 there exists an algorithm that, in polynomial time, computes a partial set-cover that covers at least a fraction c of elements weight, using at most 20(1c) 302c</p>
    <p>c sets.</p>
    <p>0  1.463,</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Computing Partial Covers</p>
    <p>To compute a good cover of all the elements is difficult (there is no c  log n-approximation for c &lt; 1 unless NP  DTIME (nlog log n)); computing reasonable partial covers is easier;</p>
    <p>we introduce weights on elements.</p>
    <p>Lemma</p>
    <p>For any 0 &lt; c &lt; 302  0.768 there exists an algorithm that, in polynomial time, computes a partial set-cover that covers at least a fraction c of elements weight, using at most 20(1c) 302c</p>
    <p>c sets.</p>
    <p>0  1.463,</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Algorithm = Partial Covers + Exponential Balancing</p>
    <p>Current_Cover  empty multiset; While there exists an element not covered log2 n times do:</p>
    <p>compute weights (proportional to 1/2number of times the element is covered); ask for a cover for at least fraction c of weight; add this cover to the Current_Cover;</p>
    <p>return Current_Cover.</p>
    <p>Lemma</p>
    <p>If we set c = 0.553, the solution produced by the above algorithm has at most 12.006  log2 n  c</p>
    <p>sets.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Algorithm = Partial Covers + Exponential Balancing</p>
    <p>Current_Cover  empty multiset; While there exists an element not covered log2 n times do:</p>
    <p>compute weights (proportional to 1/2number of times the element is covered); ask for a cover for at least fraction c of weight; add this cover to the Current_Cover;</p>
    <p>return Current_Cover.</p>
    <p>Lemma</p>
    <p>If we set c = 0.553, the solution produced by the above algorithm has at most 12.006  log2 n  c</p>
    <p>sets.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Set multicover approximation overview</p>
    <p>Number of sets in certain covers</p>
    <p>Classical Set Cover log2 n-SetCover optimal solution c  O(log n  c)</p>
    <p>approximation O(log n  c)  O(log2 n  c)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Set multicover approximation overview</p>
    <p>Number of sets in certain covers</p>
    <p>Classical Set Cover log2 n-SetCover optimal solution c  O(log n  c)</p>
    <p>approximation O(log n  c)  O(log2 n  c)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Set multicover approximation overview</p>
    <p>Number of sets in certain covers</p>
    <p>Classical Set Cover log2 n-SetCover optimal solution c  O(log n  c)</p>
    <p>approximation O(log n  c)  O(log2 n  c)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Set multicover approximation overview</p>
    <p>Number of sets in certain covers</p>
    <p>Classical Set Cover log2 n-SetCover optimal solution c  O(log n  c)</p>
    <p>approximation O(log n  c)  O(log2 n  c)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>The Problem Our Algorithm Summary</p>
    <p>Set multicover approximation overview</p>
    <p>Number of sets in certain covers</p>
    <p>Normal Set Cover log2 n-SetCover optimal solution c  O(log n  c)</p>
    <p>approximation O(log n  c) O(log n  c)</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Problem Short Description Results Summary Summary</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Problem Short Description Results Summary Summary</p>
    <p>Dynamic Page Migration - short description</p>
    <p>There are n processors, that communicate by an access to a single common page of memory.</p>
    <p>In each round one of the processors rises a read/write request.</p>
    <p>Communication cost is proportional to the distance between processors. (distances are changing, but not more than by a constant in each round)</p>
    <p>The page is stored at one of the processors but may be transported. To cost of moving the page is proportional to distance and size of the page D.</p>
    <p>The problem is to decide online where to store the page.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Problem Short Description Results Summary Summary</p>
    <p>Competitive analysis of the DPM algorithms.</p>
    <p>Previous results (competitive analysis): Algorithm Lower bound</p>
    <p>Deterministic min{</p>
    <p>D  n, D, } min{</p>
    <p>D  n, D, } Randomized: Adaptive adv. min{</p>
    <p>D  n, D, } min{</p>
    <p>D  n, D, }</p>
    <p>Randomized: Oblivious adv. min{</p>
    <p>D  log n, D, } min{</p>
    <p>D  log n, D2/3, }</p>
    <p>This paper: We present a randomized algorithm for DPM which is O(min{</p>
    <p>D  log n, D, })-competitive against an oblivious</p>
    <p>adversary.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Problem Short Description Results Summary Summary</p>
    <p>Competitive analysis of the DPM algorithms.</p>
    <p>Previous results (competitive analysis): Algorithm Lower bound</p>
    <p>Deterministic min{</p>
    <p>D  n, D, } min{</p>
    <p>D  n, D, } Randomized: Adaptive adv. min{</p>
    <p>D  n, D, } min{</p>
    <p>D  n, D, }</p>
    <p>Randomized: Oblivious adv. min{</p>
    <p>D  log n, D, } min{</p>
    <p>D  log n, D2/3, }</p>
    <p>This paper: We present a randomized algorithm for DPM which is O(min{</p>
    <p>D  log n, D, })-competitive against an oblivious</p>
    <p>adversary.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Problem Short Description Results Summary Summary</p>
    <p>Summary</p>
    <p>Our contributions:</p>
    <p>The Exponential Balancing Strategy for the Bucket Game.</p>
    <p>Computing partial Set Covers by a reduction to FLP, and the approximation algorithm for k -SetCover problem.</p>
    <p>Almost closing the gap for a DPM algorithm against an oblivious adversary.</p>
  </div>
  <div class="page">
    <p>Bucket Game Application to Set Multicover</p>
    <p>Dynamic Page Migration</p>
    <p>Problem Short Description Results Summary Summary</p>
    <p>Thank you for your attention!</p>
  </div>
</Presentation>
