<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FUZE: Towards Facilitating Exploit Generation for Kernel Use-After</p>
    <p>Free Vulnerabilities</p>
    <p>Wei Wu1,2,3, Yueqi Chen2, Jun Xu2, Xinyu Xing2, XiaoruiGong1,3, and Wei Zou1,3</p>
  </div>
  <div class="page">
    <p>What are We Talking about?  Discuss the challenge of exploit development  Introduce an approach to facilitate exploit development  Demonstrate how the new technique facilitate mitigation circumvention</p>
  </div>
  <div class="page">
    <p>Background  All software contain bugs, and # of bugs grows with the increase of software complexity</p>
    <p>E.g., Syzkaller/Syzbot reports 800+ Linux kernel bugs in 8 months  Due to the lack of manpower, it is very rare that a software development team could</p>
    <p>patch all the bugs timely  E.g., A Linux kernel bug could be patched in a single day or more than 8 months; on average, it</p>
    <p>takes 42 days to fix one kernel bug</p>
    <p>The best strategy for software development team is to prioritize their remediation efforts for bug fix  E.g. based on its influence upon usability  E.g., based on its influence upon software security  E.g., based on the types of the bugs</p>
  </div>
  <div class="page">
    <p>Background (cont.)  Most common strategy is to fix a bug based on its exploitability  To determine the exploitability of a bug, analysts generally have to write a</p>
    <p>working exploit, which needs 1) Significant manual efforts 2) Sufficient security expertise 3) Extensive experience in target software</p>
  </div>
  <div class="page">
    <p>Crafting an Exploit for Kernel Use-After-Free</p>
    <p>kernel panic</p>
    <p>Dangling ptr occurrence</p>
    <p>Dangling ptr dereference</p>
    <p>syscall_A()</p>
    <p>syscall_B()</p>
    <p>Freed object</p>
    <p>Object carefully selected</p>
    <p>syscall_S()</p>
    <p>Proper time window to</p>
    <p>perform heap spray</p>
  </div>
  <div class="page">
    <p>Challenge 1: Needs Intensive Manual Efforts  Analyze the kernel panic  Manually track down</p>
    <p>kernel panic</p>
    <p>Dangling ptr occurrence</p>
    <p>Dangling ptr dereference</p>
    <p>syscall_A()</p>
    <p>syscall_B()</p>
    <p>Freed object</p>
  </div>
  <div class="page">
    <p>Challenge 2: Needs Extensive Expertise in Kernel  Identify all the candidate objects that</p>
    <p>can be sprayed to the region of the freed object  Pinpoint the proper system calls that</p>
    <p>allow an analyst to perform heap spray  Figure out the proper arguments and</p>
    <p>context for the system call to allocate the candidate objects</p>
    <p>Freed object</p>
    <p>Object carefully selected</p>
    <p>syscall_M()</p>
  </div>
  <div class="page">
    <p>Challenge 3: Needs Security Expertise  Find proper approaches to accomplish</p>
    <p>arbitrary code execution or privilege escalation or memory leakage  E.g., chaining ROP  E.g., crafting shellcode</p>
    <p>kernel panic</p>
  </div>
  <div class="page">
    <p>Some Past Research Potentially Tackling the Challenges  Approaches for Challenge 1  Nothing I am aware of, but simply extending KASAN could potentially solve this problem</p>
    <p>Approaches for Challenge 2  [Blackhat07] [CCS 16] [USENIX-SEC18],...</p>
    <p>Approaches for Challenge 3  [NDSS11] [S&amp;P16], [S&amp;P17],...</p>
    <p>[NDSS11] Avgerinos et al., AEG: Automatic Exploit Generation. [CCS 16] Xu et al., From Collision To Exploitation: Unleashing Use-After-Free Vulnerabilities in Linux Kernel. [S&amp;P16] Shoshitaishvili et al., Sok:(state of ) the art of war: Offensive techniques in binary analysis. [USENIX-SEC18] Heelan et al., Automatic Heap Layout Manipulation for Exploitation. [S&amp;P17] Bao et al., Your Exploit is Mine: Automatic Shellcode Transplant for Remote Exploits. [Blackhat07] Sotirov, Heap Feng Shui in JavaScript</p>
  </div>
  <div class="page">
    <p>Approaches for Challenge 1  Nothing I am aware of, but simply extending KASAN could potentially solve this problem</p>
    <p>Approaches for Challenge 2  [Blackhat07] [CCS 16] [USENIX-SEC18]</p>
    <p>Approaches for Challenge 3  [NDSS11] [S&amp;P16], [S&amp;P17]</p>
    <p>[NDSS11] Avgerinos et al., AEG: Automatic Exploit Generation. [CCS 16] Xu et al., From Collision To Exploitation: Unleashing Use-After-Free Vulnerabilities in Linux Kernel. [S&amp;P16] Shoshitaishvili et al., Sok:(state of ) the art of war: Offensive techniques in binary analysis. [USENIX-SEC18] Heelan et al., Automatic Heap Layout Manipulation for Exploitation. [S&amp;P17] Bao et al., Your Exploit is Mine: Automatic Shellcode Transplant for Remote Exploits. [Blackhat07] Sotirov, Heap Feng Shui in JavaScript</p>
    <p>Problem unsolved.</p>
    <p>Some Past Research Potentially Tackling the Challenges</p>
  </div>
  <div class="page">
    <p>Roadmap  Unsolved challenges in exploitation facilitation  Our techniques -- FUZE  Evaluation with real-world Linux kernel vulnerabilities  Conclusion</p>
  </div>
  <div class="page">
    <p>A Real-World Example (CVE-2017-15649)</p>
    <p>next prev</p>
    <p>next prev</p>
    <p>Head node</p>
    <p>next prev</p>
    <p>setsockopt() insert a node</p>
  </div>
  <div class="page">
    <p>A Real-World Example (CVE-2017-15649)</p>
    <p>dangling ptr</p>
    <p>next prev</p>
    <p>next prev</p>
    <p>next prev</p>
    <p>close() free node but not completely removed from the list</p>
    <p>Head node</p>
  </div>
  <div class="page">
    <p>Challenge 4: No Primitive Needed for Exploitation</p>
    <p>next prev</p>
    <p>next prev</p>
    <p>next</p>
    <p>Node newly crafted</p>
    <p>dangling ptr</p>
    <p>Head node</p>
    <p>next prev</p>
    <p>Obtain an ability to write unmanageable data to</p>
    <p>unmanageable address</p>
    <p>prevprev</p>
  </div>
  <div class="page">
    <p>No Useful Primitive == Unexploitable??</p>
    <p>sendmsg()</p>
    <p>kernel panic</p>
    <p>Dangling ptr occurrence</p>
    <p>Dangling ptr dereference</p>
    <p>Obtain the primitive  write unmanageable data to unmanageable region</p>
    <p>Obtain the primitive  hijack control flow (control over rip)</p>
  </div>
  <div class="page">
    <p>Roadmap  Unsolved challenges in exploitation facilitation  Our techniques -- FUZE  Evaluation with real-world Linux kernel vulnerabilities  Conclusion</p>
  </div>
  <div class="page">
    <p>FUZE  Extracting Critical Info.  Identifying the site of dangling</p>
    <p>pointer occurrence, and that of its dereference; pinpointing the corresponding system calls</p>
    <p>User space Kernel space</p>
    <p>syscall_B</p>
    <p>syscall_A</p>
    <p>Freed object</p>
    <p>CR4</p>
  </div>
  <div class="page">
    <p>FUZE  Performing Kernel Fuzzing  Identifying the site of dangling</p>
    <p>pointer occurrence, and that of its dereference; pinpointing the corresponding system calls  Performing kernel fuzzing between</p>
    <p>the two sites and exploring other panic contexts (i.e., different sites where the vulnerable object is dereferenced)</p>
    <p>User space Kernel space</p>
    <p>syscall_B</p>
    <p>syscall_A</p>
    <p>syscall_Csyscall_D syscall_E syscall_M</p>
  </div>
  <div class="page">
    <p>?</p>
    <p>FUZE  Performing Symbolic Execution  Identifying the site of dangling pointer</p>
    <p>occurrence, and that of its dereference; pinpointing the corresponding system calls  Performing kernel fuzzing between the</p>
    <p>two sites and exploring other panic contexts (i.e., different sites where the vulnerable object is dereferenced)  Symbolically execute at the sites of the</p>
    <p>dangling pointer dereference</p>
    <p>? ?</p>
    <p>?</p>
    <p>?</p>
    <p>User space Kernel space</p>
    <p>syscall_B</p>
    <p>syscall_Csyscall_D syscall_E syscall_M</p>
    <p>?</p>
    <p>Freed object Set symbolic value</p>
    <p>for each byte</p>
  </div>
  <div class="page">
    <p>Useful primitive identification  Unconstrained state  state with symbolic Instruction pointer  symbolic callback</p>
    <p>double free  e.g. mov rdi, uaf_obj; call kfree</p>
    <p>write-what-where  e.g. write arbitrary value write</p>
    <p>mov rax, qword ptr[evil_ptr] call rax</p>
    <p>stack pivot gadget: xchg eax, esp; ret</p>
    <p>SMAP disable gadget: mov cr4, rdi ; ret</p>
  </div>
  <div class="page">
    <p>Roadmap  Unsolved challenges in exploitation facilitation  Our techniques -- FUZE  Evaluation with real-world Linux kernel vulnerabilities  Conclusion</p>
  </div>
  <div class="page">
    <p>Case Study  15 real-world UAF kernel</p>
    <p>vulnerabilities  Only 5 vulnerabilities have</p>
    <p>demonstrated their exploitability against SMEP  Only 2 vulnerabilities have</p>
    <p>demonstrated their exploitability against SMAP</p>
    <p>CVE-ID # of public exploits # of generated exploits</p>
    <p>SMEP SMAP SMEP SMAP 2017-17053 0 0 1 0</p>
    <p>overall 5 2 19 5</p>
    <p>*: discovered new dereference by fuzzing</p>
  </div>
  <div class="page">
    <p>Case Study (cont)</p>
    <p>FUZE helps track down useful primitives, giving us the power to  Demonstrate exploitability against</p>
    <p>SMEP for 10 vulnerabilities  Demonstrate exploitability against</p>
    <p>SMAP for 2 more vulnerabilities  Diversify the approaches to perform</p>
    <p>kernel exploitation  5 vs 19 (SMEP)  2 vs 5 (SMAP)</p>
    <p>CVE-ID # of public exploits # of generated exploits</p>
    <p>SMEP SMAP SMEP SMAP 2017-17053 0 0 1 0 2017-15649 0 0 3 2 2017-15265 0 0 0 0 2017-10661 0 0 2 0 2017-8890 1 0 1 0 2017-8824 0 0 2 2 2017-7374 0 0 0 0</p>
    <p>overall 5 2 19 5</p>
  </div>
  <div class="page">
    <p>Discussion on Failure Cases  Dangling pointer occurrence and its dereference tie to the same system call  FUZE works for 64-bit OS but some vulnerabilities demonstrate its exploitability</p>
    <p>only for 32-bit OS  E.g., CVE-2015-3636</p>
    <p>Perhaps unexploitable!?  CVE-2017-7374  null pointer dereference  E.g., CVE-2013-7446, CVE-2017-15265 and CVE-2016-7117</p>
  </div>
  <div class="page">
    <p>Roadmap  Unsolved challenges in exploitation facilitation  Our techniques -- FUZE  Evaluation with real-world Linux kernel vulnerabilities  Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion  Primitive identification and security mitigation circumvention can greatly</p>
    <p>influence exploitability  Existing exploitation research fails to provide facilitation to tackle these two</p>
    <p>challenges  Fuzzing + symbolic execution has a great potential toward tackling these</p>
    <p>challenges  Research on exploit automation is just the beginning of the GAME! Still many</p>
    <p>more challenges waiting for us to tackle</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Exploits and source code available at:  https://github.com/ww9210/Linux_kernel_exploits</p>
    <p>Contact: wuwei@iie.ac.cn</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>??</p>
    <p>? ?</p>
    <p>?</p>
    <p>?</p>
    <p>User space Kernel space</p>
    <p>syscall_B</p>
    <p>syscall_Csyscall_D syscall_E syscall_M</p>
    <p>?</p>
    <p>FUZE</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>??</p>
    <p>? ?</p>
    <p>?</p>
    <p>?</p>
    <p>User space Kernel space</p>
    <p>syscall_B</p>
    <p>syscall_Csyscall_D syscall_E syscall_M</p>
    <p>?</p>
    <p>FUZE</p>
  </div>
</Presentation>
