<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Operating System Support for NVM+DRAM Hybrid Main Memory Jeffrey C. Mogul, Eduardo Argollo, Mehul A. Shah, Paolo Faraboschi HP Labs, Palo Alto &amp; Barcelona</p>
  </div>
  <div class="page">
    <p>The problems with DRAM  Not dense enough</p>
    <p>DRAM capacity limited by space, power, wire lengths</p>
    <p>Costs too much  Price increases non-linearly with density</p>
    <p>Takes too much power  Significant fraction of server power</p>
    <p>Cant get enough of it  Many applications are hungry for main memory</p>
    <p>Volatile  but please ignore that for this talk</p>
  </div>
  <div class="page">
    <p>Good things about Non-Volatile Memory For example, Flash:  Can be denser than DRAM  Could be cheaper/bit than DRAM  Takes no refresh power  Non-volatile  but ignore that!</p>
  </div>
  <div class="page">
    <p>So, why not just use Flash instead of DRAM for main memory?  Thats crazy talk!</p>
    <p>Flash reads are slower than DRAM  Flash writes are really, really, really, really slow  Flash has to be erased  Flash wears out pretty quickly</p>
    <p>105 erase cycles  if youre lucky  Wear-out lifetime can decrease with increasing density</p>
  </div>
  <div class="page">
    <p>It's so crazy, it just might work! What you should remember from this talk:  Changes in memory technology will change the</p>
    <p>way we build main memory  Buzzword: Universal Memory</p>
    <p>Wear-out is the big problem  And slow writes/erases, too.</p>
    <p>The operating system is the best place to solve those problems</p>
  </div>
  <div class="page">
    <p>It's so crazy, it just might work!</p>
    <p>E.g., Spansions EcoRamTM  Replace some DRAM with</p>
    <p>NOR flash  Spansion claims:</p>
    <p>Lower capital costs because you can use fewer servers</p>
    <p>Lower operating costs:  slightly lower power/server  fewer servers</p>
    <p>For 160TB-RAM Data Center  48% lower CapEx  75% lower OpEx  (Mostly R/O workload)</p>
    <p>Source: USING SPANSION ECORAMTM TO IMPROVE TCO AND POWER CONSUMPTION IN INTERNET DATA CENTERS, Frost &amp; Sullivan</p>
    <p>(5000x in 160TB Data Center)</p>
  </div>
  <div class="page">
    <p>FLAM: a hybrid of Flash and DRAM Our proposed straw-man design:  Replace part of DRAM with FLAM DIMMs  Migrate pages from DRAM to Flash (in FLAM)  On write attempts, fault page back to DRAM  Use OS knowledge to manage migration policy</p>
    <p>In particular, estimate Time To Next Write (TTNW)  Especially for complex workloads (not trivially read-only)</p>
  </div>
  <div class="page">
    <p>Goal of this talk  Semi-convince you that FLAM is a good idea</p>
    <p>or at least a plausible idea  although flash isnt ideal for this use  maybe PC-RAM or something more exotic?</p>
    <p>Convince you that FLAM requires OS knowledge  To estimate TTNW for candidate pages  To optimize garbage-collection</p>
  </div>
  <div class="page">
    <p>The role of the Operating System  Use OS-level knowledge to avoid wear-out  Migrate pages to FLAM when they are:</p>
    <p>Hot for future reads (optimize scarce DRAM resources)  Cold for future writes (avoid wear-out &amp; overheads)</p>
  </div>
  <div class="page">
    <p>Memory characteristics</p>
    <p>~0------100 1000 ns</p>
    <p>~0512KB (e.g.)</p>
    <p>~0512KB (e.g.)</p>
    <p>~0.1 0.2W /DIMM</p>
    <p>------~40--60 ns</p>
    <p>~40--60 ns</p>
    <p>Idle on power</p>
    <p>Erase size</p>
    <p>Erase time</p>
    <p>Write time</p>
    <p>Rand. read time</p>
    <p>Lifetime (erase cycles)</p>
    <p>DensityTech</p>
    <p>(F = feature size)</p>
  </div>
  <div class="page">
    <p>Memory characteristics why not NAND Flash?</p>
    <p>~0------100 1000 ns</p>
    <p>~0512KB (e.g.)</p>
    <p>~0512KB (e.g.)</p>
    <p>~0.2W /DIMM</p>
    <p>------~40--60 ns</p>
    <p>~40--60 ns</p>
    <p>Idle on power</p>
    <p>Erase size</p>
    <p>Erase time</p>
    <p>Write time</p>
    <p>Rand. read time</p>
    <p>Lifetime (erase cycles)</p>
    <p>DensityTech</p>
  </div>
  <div class="page">
    <p>Memory characteristics Whats good about NOR Flash?</p>
    <p>~0------100 1000 ns</p>
    <p>~0512KB (e.g.)</p>
    <p>~0512KB (e.g.)</p>
    <p>~0.2W /DIMM</p>
    <p>------~40--60 ns</p>
    <p>~40--60 ns</p>
    <p>Idle on power</p>
    <p>Erase size</p>
    <p>Erase time</p>
    <p>Write time</p>
    <p>Rand. read time</p>
    <p>Lifetime (erase cycles)</p>
    <p>DensityTech</p>
    <p>Does Spansion have double-density NOR cells?</p>
  </div>
  <div class="page">
    <p>Memory characteristics Whats a problem with NOR Flash?</p>
    <p>~0------100 1000 ns</p>
    <p>~0512KB (e.g.)</p>
    <p>~0512KB (e.g.)</p>
    <p>~0.2W /DIMM</p>
    <p>------~40--60 ns</p>
    <p>~40--60 ns</p>
    <p>Idle on power</p>
    <p>Erase size</p>
    <p>Erase time</p>
    <p>Write time</p>
    <p>Rand. read time</p>
    <p>Lifetime (erase cycles)</p>
    <p>DensityTech</p>
  </div>
  <div class="page">
    <p>Solving the problems with NOR-based FLAM  Low endurance:</p>
    <p>Dont write pages with low ETTNW to FLAM  Slow writes:</p>
    <p>Buffer CPUs writes via small DRAM  CPU writes pages to DRAM buffer on FLAM DIMM  Simple controller in the FLAM DIMM manages copy to NOR</p>
    <p>Dont write pages with low ETTNW to FLAM  Large erase-block size:</p>
    <p>Steal good ideas from garbage-collection people  Allocate pages with similar ETTNW to same erase block</p>
  </div>
  <div class="page">
    <p>Solving the problems with NOR-based FLAM  Low endurance:</p>
    <p>Dont write pages with low ETTNW to FLAM  Slow writes:</p>
    <p>Buffer CPUs writes via small DRAM  CPU writes pages to DRAM buffer on FLAM DIMM  Simple controller in the FLAM DIMM manages copy to NOR</p>
    <p>Dont write pages with low ETTNW to FLAM  Large erase-block size:</p>
    <p>Steal good ideas from garbage-collection people  Allocate pages with similar ETTNW to same erase block</p>
  </div>
  <div class="page">
    <p>How the OS could help FLAM: Estimating per-page time-to-next-write Information that the OS has about pages:  Page types (ANON, MAP2DSK, etc.)  File types (executable, )  File modes (temporary, sequential)  Application-supplied hints</p>
    <p>E.g., Im a database and this is my read-mostly index</p>
    <p>Dynamic information based on history:  Classified based on file names?  History tracked per-page??</p>
  </div>
  <div class="page">
    <p>Memory characteristics What if PC-RAM becomes a reality?</p>
    <p>~0------100 1000 ns</p>
    <p>~0512KB (e.g.)</p>
    <p>~0512KB (e.g.)</p>
    <p>~0.2W /DIMM</p>
    <p>------~40--60 ns</p>
    <p>~40--60 ns</p>
    <p>Idle on power</p>
    <p>Erase size</p>
    <p>Erase time</p>
    <p>Write time</p>
    <p>Rand. read time</p>
    <p>Lifetime (erase cycles)</p>
    <p>DensityTech</p>
  </div>
  <div class="page">
    <p>How well would FLAM work? Limits on acceptable mean TBWP TBWP = Time Between Writes to a Page  Assume a target lifetime of 5 years = 1.58e8 sec.  Assuming 106-erase lifetime for NOR:</p>
    <p>Target mean TBWP = 158 sec = 2.6 min</p>
    <p>(Assuming 105-erase lifetime for NOR:  Target mean TBWP = 1580 sec = 26 min)</p>
    <p>Assuming 108-erase lifetime for PC-RAM:  Target mean TBWP = 1.58 sec</p>
  </div>
  <div class="page">
    <p>How well would FLAM work? Preliminary experiments -- simulation  Simulated whole system using COTSon</p>
    <p>Opteron, Linux 2.6.15, Nutch or SPECjbb-like  Trace all L2$ writebacks  150-200 secs takes 2 weeks</p>
  </div>
  <div class="page">
    <p>How well would FLAM work? Preliminary experiments -- simulation  Simulated whole system using COTSon</p>
    <p>Opteron, Linux 2.6.15, Nutch or SPECjbb-like  Trace all L2$ writebacks  150-200 secs takes 2 weeks</p>
    <p>OK for &lt;106 erases/5 yearsOK for &lt;10 8 erases/5yr</p>
  </div>
  <div class="page">
    <p>How well would FLAM work? Preliminary experiments -- Tracing  Traces on actual hardware at (nearly) full speed</p>
    <p>Linux 2.6.28.5, ran hacked SPECjbb for a whole day  Slightly hacked VM code tracks PageHasBeenDirty bit  Slightly hacked /proc/kpageflags, user code polls every 10 sec.</p>
    <p>WARNING: not clear if these results are meaningful!</p>
  </div>
  <div class="page">
    <p>Stuff we havent done yet  Modify OS (e.g., Linux) to manage FLAM</p>
    <p>Could do this using DRAM as fake FLAM for testing  Could get realistic performance results with enough RAM</p>
    <p>Would still have to model power consumption  Linux VM system is a bit scary</p>
    <p>Characterize which applications might exploit FLAM  Especially: where will extra read-mostly memory help performance?</p>
    <p>Prototype FLAM hardware  Will Spansion sell us what we want?  Is PC-RAM a better choice?</p>
    <p>Think about exploiting non-volatility, too  But flash isnt as reliable as you would hope/expect</p>
  </div>
  <div class="page">
    <p>Summary Using NVM for main memory is a crazy idea  but it might work!  and if it does work, the OS is the best place to</p>
    <p>make migration and placement decisions</p>
  </div>
  <div class="page">
    <p>Additional material</p>
  </div>
  <div class="page">
    <p>Comparison of various NVM technologies Memory Element</p>
    <p>Density CMOS</p>
    <p>Integration Switch</p>
    <p>Mechanism Bipolar</p>
    <p>/Unipolar Write Power</p>
    <p>Scaling Ultimate</p>
    <p>Scaling Limit Set-reset</p>
    <p>Times Maturity</p>
    <p>PCM (PC-RAM)</p>
    <p>Stable nanocrystal</p>
    <p>size (~10nm)</p>
    <p>Good Prototype</p>
    <p>Flash 4F2</p>
    <p>Excellent E-field N/A Good Fair Capacitor size Fair Product</p>
    <p>FeRAM 4F2</p>
    <p>Demonstrated E-field Bipolar Good Poor Domain size</p>
    <p>(20nm) Good Product</p>
    <p>MRAM 4F2 Poor (Fe) B-field Bipolar Poor Poor</p>
    <p>Domain size (10nm) Good</p>
    <p>Specialty product</p>
  </div>
  <div class="page">
    <p>Crudely-drawn design of a FLIM</p>
    <p>NOR Flash or PC-RAM</p>
    <p>DRAM for</p>
    <p>buffering writes</p>
    <p>S im</p>
    <p>ple controller</p>
    <p>Read-only Read-Write</p>
  </div>
  <div class="page">
    <p>Security aspects of FLAM  Avoid storing keys &amp; plaintext in NVM</p>
    <p>Increases chance of compromise</p>
    <p>Can the OS do this automatically?  Might require API to mark data as please forget ASAP  Or will DIFC make this work?</p>
  </div>
  <div class="page">
    <p>Related products (recently announced): Flash-hybrid support for memcached  memcached: distributed memory object caching system</p>
    <p>intended for use in speeding up dynamic web applications by alleviating database load.</p>
    <p>gear6.com: hybrid DRAM-flash architecture for memcached  allows for 5-10x more memcache memory / rack unit  cuts memory costs by 50%  up to 320GB</p>
    <p>schoonerinfotech.com:  appliances for memcached, SQL acceleration  512GB flash, 64GB DRAM, Intel CPUs</p>
    <p>Both use: NAND flash, networked access</p>
  </div>
</Presentation>
