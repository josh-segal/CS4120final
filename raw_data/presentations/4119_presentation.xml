<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Two methods for exploiting speculative control flow hijacks</p>
    <p>Andrea Mambretti</p>
    <p>Alexandra Sandulescu, Matthias Neugschwandtner, Alessandro Sorniotti, Anil Kurmus</p>
  </div>
  <div class="page">
    <p>Early 2018</p>
  </div>
  <div class="page">
    <p>Multiple vulnerabilities</p>
    <p>CVE Variant Name</p>
  </div>
  <div class="page">
    <p>Spectre v1 - Bounds Check Bypass</p>
    <p>if (x &lt; array1_size) { y = array2[array1[x]];</p>
    <p>}</p>
    <p>Cached</p>
    <p>Not Cached</p>
    <p>Example: - array1_size = 8 - x = 15 (attacker controlled)</p>
    <p>array1</p>
    <p>s 3 c r 3 7</p>
    <p>array2</p>
    <p>... HIGHLOW</p>
    <p>...</p>
    <p>Speculative Execution Trigger</p>
  </div>
  <div class="page">
    <p>Speculative CFH Attack Breakdown</p>
    <p>Attacker injection (e.g. Branch Predictor Training)</p>
    <p>Speculative Control Flow Hijack lure the victim to execute the vulnerable code</p>
    <p>Side Channel Send gadget executed inside the victim</p>
    <p>Side Channel Receive gadget executed inside the attacker 5</p>
  </div>
  <div class="page">
    <p>Branch Target Buffer</p>
    <p>f(PC) Target</p>
    <p>A</p>
    <p>D</p>
    <p>X</p>
    <p>Z</p>
    <p>V</p>
    <p>E</p>
    <p>B</p>
    <p>G</p>
    <p>mov rax, [0xc0ff33] .... A: call *rax ...</p>
    <p>E: mov rbx, 20 ret</p>
    <p>V: mov rbx, 10 ret</p>
    <p>Normal Exec (Simplified)</p>
    <p>Branch Target Buffer</p>
    <p>E</p>
    <p>Memory</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Core</p>
    <p>Spectre v2 - Branch Target Injection (BTI)</p>
    <p>f(PC) Target</p>
    <p>A</p>
    <p>D</p>
    <p>X</p>
    <p>Z</p>
    <p>V</p>
    <p>E</p>
    <p>B</p>
    <p>G</p>
    <p>mov rax, [0xc0ff33] .... A: call *rax ...</p>
    <p>E: mov rbx, 20 ret</p>
    <p>V: mov rbx, 10 ret</p>
    <p>Evil: GADGET</p>
    <p>Victim Thread (Simplified)</p>
    <p>Branch Target Buffer</p>
    <p>E</p>
    <p>Memory</p>
    <p>repeat: mov rax, Evil .... A: call *rax ... loop repeat ...</p>
    <p>Evil: ret</p>
    <p>Attacker Thread</p>
    <p>Evil</p>
    <p>Logic core 0 Logic core 1</p>
    <p>SC Send Leak: GADGET SC Receive</p>
  </div>
  <div class="page">
    <p>Control Flow Hijack - Gadget</p>
    <p>Spectre v2 and other CF hijack techniques uses Spectre v1 gadget as side channel send</p>
    <p>Project Zero Spectre v2 Proof-of-Concept relies on Kernel extended Berkeley Packet Filter (eBPF) JIT mechanism to inject a suitable gadget</p>
    <p>Are there other (easier to find) gadgets that can be used?</p>
  </div>
  <div class="page">
    <p>Our Contribution - New SC Send gadgets</p>
    <p>Instruction cache:</p>
    <p>timing the execution of a piece of code that is executed conditionally based on a secret</p>
    <p>Branch Predictor (Double BTI):</p>
    <p>let the victim program train the Branch Predictor using a secret computed value</p>
  </div>
  <div class="page">
    <p>rdtsc call fun1 rdtsc</p>
    <p>Side Channel Receive (i-cache timing)</p>
    <p>Instruction Cache - POC</p>
    <p>mov rdx, Evil</p>
    <p>A: call *rdx</p>
    <p>Attacker</p>
    <p>time</p>
    <p>Victim</p>
    <p>Training mov rax, secret</p>
    <p>A: call *rdx</p>
    <p>BTI Gadget Hijack</p>
    <p>Evil: cmp rax, 0 je end</p>
    <p>B: call fun1</p>
    <p>end: ...</p>
    <p>Side Channel Send (i-cache gadget)</p>
    <p>rax = 0</p>
    <p>rax != 0</p>
    <p>fun1 is in a shared memory area between attack and victim process</p>
  </div>
  <div class="page">
    <p>Double BTI - POC Phase 1</p>
    <p>mov rdx, Evil</p>
    <p>A: call *rdx</p>
    <p>Attacker</p>
    <p>time</p>
    <p>Victim</p>
    <p>Training mov ax, secret_byte shl eax, 16 add rax, BASE mov rdx, Good A: call *rdx</p>
    <p>BTI Gadget Hijack</p>
    <p>Evil: nop call *rax ... Good: ret</p>
    <p>Side Channel Send (reverse BTI gadget)</p>
    <p>Evil: ret call *rax retf(PC) Target</p>
    <p>A</p>
    <p>D</p>
    <p>X</p>
    <p>Z</p>
    <p>V</p>
    <p>E</p>
    <p>B</p>
    <p>G</p>
    <p>Evil</p>
    <p>Evil fun(secret)</p>
  </div>
  <div class="page">
    <p>Double BTI - POC Phase 2</p>
    <p>mov rdx, Evil</p>
    <p>A: call *rdx</p>
    <p>Attacker</p>
    <p>time</p>
    <p>Side Channel Receive</p>
    <p>Evil: nop call *rax ret</p>
    <p>addr0: mov rax, QWORD[array + 0] ret addr1: mov rax, QWORD[array + 1] ret  addr71: mov rax, QWORD[array+71]</p>
    <p>ret ... addr255: mov rax, QWORD[array+255]</p>
    <p>ret</p>
    <p>f(PC) Target</p>
    <p>A</p>
    <p>D</p>
    <p>X</p>
    <p>Z</p>
    <p>V</p>
    <p>E</p>
    <p>B</p>
    <p>G</p>
    <p>Evil</p>
    <p>Evil fun(secret)</p>
    <p>fun(secret) =&gt; addrX with {X  | X  [0, 255] }</p>
    <p>e.g. fun(0) = addr0, fun(255) = addr255</p>
    <p>secret_byte = 71 = G</p>
  </div>
  <div class="page">
    <p>Results Double BTIIcache attack</p>
    <p>Secret Success Rate</p>
  </div>
  <div class="page">
    <p>Mitigations</p>
    <p>Indirect Branch Restricted Speculation (IBRS) and Indirect Branch Predictor Barrier (IBPB) does not apply to user-space attacks.</p>
    <p>Single Thread Indirect Branch Predictors (STIBP) mitigates our attacks</p>
    <p>Current STIBP default setting leaves to the application the burden of requesting the protection through either SECCOMP, or the prctl interface.</p>
    <p>Retpoline stops our attacks, though the application has to be recompiled with it 14</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>We introduced two new SC send gadgets and tested them in BTI attacks (applicable to other Control Flow Hijack attacks, e.g. ret2spec )</p>
    <p>Through the I-cache gadget we can leak 1 bit at the time</p>
    <p>Through the double BTI gadget we can leak 1 byte at the time with very good signal</p>
    <p>Current mitigations do not protect applications unless specifically requested 15</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
