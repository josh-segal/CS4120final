<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BASTION: A Security Enforcement Network Stack for Container Networks</p>
    <p>Jaehyun Nam1, Seungsoo Lee1, Hyunmin Seo1, Phillip Porras2, Vinod Yegneswaran2, and Seungwon Shin1</p>
    <p>KAIST1 and SRI International2</p>
  </div>
  <div class="page">
    <p>The state of Container Security</p>
    <p>Containers  Abstraction at the application layer Include everything needed to run an application  Sharing the same host OS kernel  faster and lighter than virtual machines  Microservices  the major use of containerization technologies</p>
    <p>The state of container security  Tripwires Sate of Container Security Report (2018) [1]</p>
    <p>Increasing number of container security incidents  60% of organizations  security incidents</p>
    <p>Vulnerable container images  47% of containers they deployed  vulnerable</p>
    <p>Limited visibility into container security  52% of organizations  difficulty in investigating container security issues</p>
    <p>[1] https://www.tripwire.com/state-of-security/devops/organizations-container-security-incident</p>
  </div>
  <div class="page">
    <p>Current Container Security Solutions</p>
    <p>Container Image Integrity  Vulnerability scanning nested in container images using CVE databases</p>
    <p>Application Isolation  Container isolation  Namespaces, cgroups, capabilities  Further restrictions on system resources  AppArmor, Seccomp, SELinux</p>
    <p>Run-time threat detection  Monitoring container behaviors, and detecting run-time policy violations</p>
    <p>Mostly focus on the security of containers! Less concern for the security of container networks!</p>
  </div>
  <div class="page">
    <p>Current Container Networks (1/2)</p>
    <p>Conceptual microservice architecture</p>
    <p>Separate bridged networks (Docker environment)</p>
    <p>Web UI (A)</p>
    <p>Service (A)</p>
    <p>DB (1)</p>
    <p>DB (2)</p>
    <p>DB (3)</p>
    <p>Web UI (B)</p>
    <p>Service (B)</p>
    <p>Host Network</p>
    <p>Bridge #2Bridge #1</p>
    <p>External Interface</p>
    <p>Gateway #1 Gateway #2</p>
    <p>Web UI (A) Service (A)</p>
    <p>DB (1) Web UI (B) Service (B)</p>
    <p>DB (2) DB (3)</p>
  </div>
  <div class="page">
    <p>Current Container Networks (2/2)</p>
    <p>Conceptual microservice architecture</p>
    <p>Single overlay network (Kubernetes environment)</p>
    <p>Web UI (A)</p>
    <p>Service (A)</p>
    <p>DB (1)</p>
    <p>DB (2)</p>
    <p>DB (3)</p>
    <p>Web UI (B)</p>
    <p>Service (B)</p>
    <p>Host Network</p>
    <p>Bridge</p>
    <p>External Interface</p>
    <p>Gateway for an overlay network</p>
    <p>Web UI (A) Service (A)</p>
    <p>DB (1) Web UI (B) Service (B)</p>
    <p>DB (2) DB (3)</p>
  </div>
  <div class="page">
    <p>Security Challenges in Container Networks (1/2)</p>
    <p>Loss of container context  Do not know where packets actually come from in the host network namespace  Possible to forge packets on behalf of any other containers</p>
    <p>Limitations of IP-based access controls  Dynamically changed container IP addresses  Still vulnerable to L2 attacks due to limited scope</p>
    <p>Network policy explosion  Iptables: centralized mechanism for all network interfaces  Monolithic network rules daunting to manage</p>
    <p>Container Network</p>
    <p>Container</p>
    <p>Container NS Container</p>
    <p>vNIC</p>
    <p>Container NS</p>
    <p>Host Network Namespace (NS)</p>
    <p>Iptables-based Access Control</p>
    <p>veth Packet</p>
    <p>veth</p>
    <p>vNIC 1</p>
  </div>
  <div class="page">
    <p>Security Challenges in Container Networks (2/2)</p>
    <p>Unrestricted host access  The gateway of a container network in the host network namespace</p>
    <p>Necessary to access external networks  Allow accessing the services running at the host</p>
    <p>Unrestricted network-privileged containers  Network-privileged containers</p>
    <p>Share the host network namespace  Used to directly expose services through a host IP</p>
    <p>All network interfaces under control  No solutions that consider security policies for them</p>
    <p>Container</p>
    <p>Container NS</p>
    <p>Host Service</p>
    <p>Host Network Namespace (NS)</p>
    <p>Bridge (or Software Switch)</p>
    <p>Networkprivileged Container</p>
    <p>Container Network</p>
    <p>Host Network</p>
    <p>ExtNICvNIC</p>
    <p>veth</p>
    <p>GW 4</p>
  </div>
  <div class="page">
    <p>Bastion: Security Enforcement Network Stack  Goal</p>
    <p>Secure a container network through an intelligent container-aware communication sandbox  Protect network threats that abuse the security challenges of current container networks  Isolate inter-container communications according to their dependencies</p>
    <p>Key Components  Bastion manager</p>
    <p>Collect all network information (e.g., network configurations and policies) from container platforms  Network visibility service</p>
    <p>Provide fine-grained control over different network topology visibility per container application  Traffic visibility service</p>
    <p>Securely isolate inter-container communications in a point-to-point manner  Prevent the exposure of inter-container network traffic to other peer containers</p>
  </div>
  <div class="page">
    <p>Container NS Container NS</p>
    <p>Bastion Architecture</p>
    <p>Host NS</p>
    <p>Host-side Container vNIC</p>
    <p>Host-side Container vNIC</p>
    <p>vethveth</p>
    <p>iptables iptablesBridge</p>
    <p>extNIC</p>
    <p>Network Visibility</p>
    <p>Traffic Visibility</p>
    <p>Source Verification</p>
    <p>Direct ARP handler</p>
    <p>Container-aware Network Isolation</p>
    <p>Special IP handler</p>
    <p>End-to-end Direct Forwarding</p>
    <p>Visibility Maps Container</p>
    <p>Network Map Inter-container</p>
    <p>Dependency Map</p>
    <p>Bastion</p>
    <p>En d</p>
    <p>to -e</p>
    <p>nd d</p>
    <p>ire ct</p>
    <p>fo rw</p>
    <p>ar di</p>
    <p>ng</p>
    <p>End-to-end direct forw arding</p>
    <p>E2E forwarding Bastion Bastion</p>
    <p>Container Container</p>
    <p>vNICvNIC</p>
  </div>
  <div class="page">
    <p>Manager  Container Collection</p>
    <p>Container network and dependency maps  Collect the network information of deployed containers from container platforms  Extract the inter-container dependencies using container configurations and network policies</p>
    <p>Container Network Service Interface IP address MAC address WebApp-X1 WebService WebApp vethwepl6f964e8 10.32.0.2 96:0e:73:ef:86:fe WebApp-X2 WebService WebApp vethweplb89dc35 10.32.0.3 6e:81:0f:a7:db:c7 Service-Y1 WebService Service vethweplb957e84 10.32.0.4 D6:bc:7b:20:32:c5</p>
    <p>Database-Z1 WebService Database vethweplc5ee33c 10.32.0.5 42:a0:ae:b7:f5:97</p>
    <p>Source Destination Policy WebApp Service Any WebApp Database TCP:3306 Service Database TCP:3307</p>
    <p>&lt; Inter-container Dependency Map &gt;</p>
    <p>Operator</p>
    <p>Container Platform</p>
    <p>Bastion Manager</p>
    <p>Manual update</p>
    <p>Periodic update</p>
    <p>&lt; Container Network Map &gt;</p>
    <p>Bastion UI</p>
  </div>
  <div class="page">
    <p>Manager  Security Stack Management</p>
    <p>Security enforcement network stack  Install a security enforcement network stack at a newly deployed container  Update the maps of the security stack in run time</p>
    <p>Bastion Manager</p>
    <p>Container Collection</p>
    <p>Stack Management</p>
    <p>NetMap DepMap</p>
    <p>Container Platform New Container</p>
    <p>Existing Container</p>
    <p>Security Stack Update the maps</p>
    <p>Security Stack Deploy a security stack</p>
    <p>Update the maps</p>
  </div>
  <div class="page">
    <p>Security Stack  Network Visibility Service (1/2)</p>
    <p>Container Discovery  First step to identify other containers (targets for communication)  Possible to be exploited for scanning all containers by malicious containers</p>
    <p>Current solutions: No prevention against non-IP-based communications</p>
    <p>Direct ARP handler  Directly response ARP requests at the security stack based on inter-container dependencies</p>
    <p>Do not broadcast the requests to the network since this operation could be abused by an attacker</p>
    <p>Source container</p>
    <p>Destination container</p>
    <p>Bastion Security Stack</p>
    <p>Direct ARP handler</p>
    <p>ARP Request (dst: 10.32.0.4)</p>
    <p>ARP Reply (dst: D6:BC:7B:20:32:C5)</p>
    <p>No broadcast IP: 10.32.0.4 Mac: D6:BC:7B:20:32:C5</p>
    <p>Container Network Map</p>
  </div>
  <div class="page">
    <p>Bastion Security Stack</p>
    <p>Security Stack  Network Visibility Service (2/2)</p>
    <p>Limitation of the direct ARP handler  Limited to container-level isolation (coverage issue)  Cannot address malicious network activities between inter-dependent containers</p>
    <p>Container-aware network isolation  Restrict container accesses according to finer-grained inter-container dependencies</p>
    <p>In a similar way, Bastion restricts the opposite direction (10.32.0.5:3306  10.32.0.2:5000) as well</p>
    <p>Src: 10.32.0.2(5000)</p>
    <p>Dst: 10.32.0.5(3306)</p>
    <p>Key(10.32.0.5) = YYY</p>
    <p>(1) Key Generation (2) Dependency map lookup (3) Policy matches</p>
    <p>DP:3306 = TCP:3306 Action</p>
    <p>(forward/drop)</p>
    <p>Packet from the WebApp</p>
    <p>KEY Policy</p>
    <p>YYY TCP:3306</p>
  </div>
  <div class="page">
    <p>Security Stack  Traffic Visibility Service (1/2)</p>
    <p>How to verify sources in current solutions  Iptables: {source IP and MAC addresses} in packet headers</p>
    <p>Vulnerable to Layer-2 attacks (e.g., ARP spoofing)  Open vSwitch: {source IP and MAC addresses} in packet headers + incoming virtual port</p>
    <p>Not support a NOT operation  Need to define all possible flow rules with the above matching fields for source verification</p>
    <p>Source verification in Bastion  {source IP and MAC addresses} in packet headers + kernel metadata at the container-side</p>
    <p>Container</p>
    <p>Container-side Network Interface</p>
    <p>Bastion Security Stack</p>
    <p>Source Verification</p>
    <p>Packet</p>
    <p>Source IP = 10.32.0.1</p>
    <p>Host-side Network Interface</p>
    <p>Metadata (If_index: xx)</p>
    <p>Source MAC = aa:bb:cc:dd:ee:ff Source interface = xx</p>
  </div>
  <div class="page">
    <p>Security Stack  Traffic Visibility Service (2/2)</p>
    <p>End-to-end direct forwarding  Directly inject packets delivered from a source into a destination  Bypass the container network (the Linux network stack at the host-side)  Use the Linux networking features (XDP/eBPF)</p>
    <p>BastionBastion</p>
    <p>Container Network</p>
    <p>Container A Container B</p>
    <p>Internal Interface Internal Interface</p>
    <p>Container As host-side Interface</p>
    <p>A  BA  B</p>
    <p>End-to-end direct forwarding</p>
    <p>No traffic? Nothing?</p>
    <p>Original path</p>
    <p>Container Bs host-side InterfaceNothing?</p>
  </div>
  <div class="page">
    <p>Security Evaluation</p>
    <p>Goal  Replace the contents delivered to a user with a fake content</p>
    <p>Redis</p>
    <p>(1) Container Takeover</p>
    <p>(2) Target Scanning</p>
    <p>(3) Target Monitoring</p>
    <p>(4) Forged Content Injection</p>
    <p>(5) Fake Content Delivery</p>
    <p>(1)</p>
    <p>Forged Contents</p>
    <p>Request contents</p>
    <p>(5) (User)</p>
    <p>Forged contents</p>
    <p>Original contentsNginx</p>
    <p>(User)</p>
    <p>G at</p>
    <p>ew ay</p>
    <p>( 0</p>
    <p>Microservices</p>
    <p>Redis (Guest)</p>
    <p>Nginx (Guest)</p>
    <p>(3)</p>
    <p>(4)</p>
  </div>
  <div class="page">
    <p>Security: Attack Scenario Verification</p>
    <p>The number of all deployed containers</p>
    <p>Nginx-User The original MAC address of Redis-User</p>
    <p>Redis-User</p>
    <p>The MAC address of Nginx-Guest</p>
    <p>Nginx-Guest</p>
    <p>Before injection After injection</p>
  </div>
  <div class="page">
    <p>Security: Container Discovery</p>
    <p>No restriction on container reachability (without Bastion)</p>
    <p>Limited container reachability (with Bastion)</p>
    <p>The number of all deployed containers</p>
    <p>The number of dependent containers</p>
  </div>
  <div class="page">
    <p>Security: Passive Packet Monitoring</p>
    <p>Precondition: ARP spoofing attack is successfully conducted  Network traffic for other containers  visible (without Bastion)</p>
    <p>Non-local traffic  invisible (with Bastion)  For verification, intentionally make the source-to-destination flows visible</p>
  </div>
  <div class="page">
    <p>Security: Active Packet Injection</p>
    <p>Precondition: ARP spoofing attack is successfully conducted  Without Bastion</p>
    <p>With Bastion</p>
    <p>&lt; Attacker side &gt;</p>
    <p>&lt; Victim side &gt;</p>
    <p>&lt; Attacker side &gt;</p>
    <p>&lt; Victim side &gt;</p>
  </div>
  <div class="page">
    <p>Performance: Inter-container Throughputs</p>
    <p>Test environment  Xeon E5-2630v4 CPU with 64GB of RAM  Kubernetes with Weave overlay network, TCP traffic with iperf3</p>
    <p>Low inter-container throughputs across hosts?  Due to the heavy overheads in physical link traversal and tunneling between hosts</p>
    <p>Throughput (Gbps)</p>
    <p>Base (No Bastion)</p>
    <p>Network Visibility only</p>
    <p>Traffic Visibility only</p>
    <p>Bastion (Fully deployed)</p>
    <p>Within a host 34.4 33.7 41.8 41.5</p>
    <p>Across hosts 4.28 4.23 4.91 4.83</p>
  </div>
  <div class="page">
    <p>Performance: Bastion on Various Networks</p>
    <p>Test environment  Xeon E5-2630v4 CPU with 64GB of RAM  Kubernetes with Flannel, Weave, and Calico overlay networks, TCP traffic with iperf3</p>
    <p>Flannel Flannel-BN Weave Weave-BN Calico Calico-BN</p>
    <p>Th ro</p>
    <p>u gh</p>
    <p>p u</p>
    <p>t (G</p>
    <p>b p</p>
    <p>s)</p>
    <p>Intra-Host</p>
    <p>Inter-Host</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>The state of current container security  Mostly focus on the security of containers themselves  Less concern the security issues in container networks</p>
    <p>Security assessment of container networks  Identified how the security challenges in current container networks impact containers</p>
    <p>Bastion: security enforcement network stack for container networks  Intelligently isolate inter-container communications  Effectively mitigate lateral attacks against peer containers</p>
  </div>
  <div class="page">
    <p>Thank you for listening</p>
    <p>namjh@kaist.ac.kr</p>
  </div>
</Presentation>
