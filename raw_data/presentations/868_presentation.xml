<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Missive: Fast Applica/on Launch from an Untrusted Buffer</p>
    <p>Cache</p>
    <p>Jon Howell Jeremy Elson Bryan Parno</p>
    <p>John R. Douceur Microso' Research</p>
  </div>
  <div class="page">
    <p>hp: // xk cd .c om</p>
    <p>/1 36 7/</p>
  </div>
  <div class="page">
    <p>Autonomy leads to painlessness</p>
  </div>
  <div class="page">
    <p>Client installa/ons are not autonomous</p>
  </div>
  <div class="page">
    <p>Embassies: autonomy on the client</p>
  </div>
  <div class="page">
    <p>Minimality leads to autonomy</p>
    <p>picoprocess:</p>
    <p>memory alloca8on in one address space, threads and scheduling</p>
    <p>all communica8ons is IP</p>
    <p>crypto primi8ves (randomness)</p>
    <p>UI is pixel bliDng</p>
    <p>fork() exec()</p>
  </div>
  <div class="page">
    <p>Consequences of minimality</p>
    <p>Apps are big.  browser  rendering libraries  OS, filesystem</p>
    <p>No shared, trusted buffer cache</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Why will it work?</p>
    <p>Commonality is available  We can exploit it  to reduce network costs  to minimize local startup latency</p>
    <p>Proof of concept: cost is around ~100ms</p>
  </div>
  <div class="page">
    <p>Servers could run anything but a few programs serve each func8on  OpenSSL, PolarSSL, Windows SSL  posVix, qmail, exim</p>
    <p>Embassies clients could run anything  100 best-of interac8ve desktop apps</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Fast app launch</p>
    <p>Exploi8ng commonality to save network bandwidth  Exploi8ng local commonality at low latency</p>
  </div>
  <div class="page">
    <p>App launch in Embassies</p>
  </div>
  <div class="page">
    <p>Image provenance</p>
    <p>Merkle tree recipe</p>
  </div>
  <div class="page">
    <p>Zarfile structure</p>
    <p>Blocks vs. strings  Block size  Small blocks: big recipes  Big blocks: extra padding</p>
    <p>Small-file packing  Merkle tree degree  File placement with consistent hashing</p>
  </div>
  <div class="page">
    <p>Small file packing</p>
  </div>
  <div class="page">
    <p>Small file packing</p>
  </div>
  <div class="page">
    <p>Small file packing</p>
  </div>
  <div class="page">
    <p>Zarfile structure</p>
    <p>Blocks vs. strings  Block size  Small blocks: big recipes  Big blocks: extra padding</p>
    <p>Small-file packing  Merkle tree degree  File placement with consistent hashing</p>
  </div>
  <div class="page">
    <p>Fast verifica/on</p>
    <p>SHA-1: 390ms (100MiB)  VMAC: 29ms  depends on a secret  how can boot block have a secret?</p>
  </div>
  <div class="page">
    <p>Launch /mes</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Client apps exhibit commonality  Untrusted cache costs ~100ms  We really can deliver 100MB apps</p>
  </div>
</Presentation>
