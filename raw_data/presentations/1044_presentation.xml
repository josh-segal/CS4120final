<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SmartCuckoo: A Fast and Cost-Efficient Hashing Index Scheme for Cloud Storage Systems</p>
    <p>Yuanyuan Sun, Yu Hua, Song Jiang*, Qiuyu Li, Shunde Cao, Pengfei Zuo</p>
    <p>Huazhong University of Science and Technology *University of Texas, Arlington</p>
    <p>Presented in the USENIX ATC 2017</p>
  </div>
  <div class="page">
    <p>Indexing services in cloud storage</p>
    <p>n Large amounts of data  From small hand-held devices to large-scale data centers  44ZB in total, 5.2TB for each user in 2020 (IDC' 2014)</p>
    <p>n Fast query services are important to both users and systems  Returning accurate results in a real-time manner  Improving system performance and storage efficiency</p>
  </div>
  <div class="page">
    <p>The importance of hash tables n Hash tables are widely used in data stores and caches</p>
    <p>Key-value stores, e.g., Memcached, Redis  Relational databases, e.g., MonetDB, HyPer  In-cache index (ICS 2014, MICRO 2015)</p>
    <p>n Strengths:  Constant-scale addressing complexity ~O(1)  Fast query response</p>
    <p>n Weakness:  Risk of high-latency for handling hashing collisions</p>
    <p>n Cuckoo hashing 3</p>
  </div>
  <div class="page">
    <p>Cuckoo hashing</p>
    <p>n Kick-out operations: like cuckoo birds n Open addressing n Supporting fast lookups: O(1) time complexity n However, insertion latency can be very high and</p>
    <p>unpredictable, especially  when an endless loop occurs!</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>H1( )</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>H1( )c</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>c H1( )</p>
    <p>b</p>
    <p>H2( )</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>c</p>
    <p>T2T1</p>
    <p>b</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>c</p>
    <p>T2T1</p>
    <p>b</p>
    <p>d</p>
    <p>e</p>
    <p>H1( ) x</p>
    <p>H2( )</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>c</p>
    <p>T2T1</p>
    <p>b</p>
    <p>d</p>
    <p>e</p>
    <p>x</p>
    <p>My alternative location</p>
    <p>Kickout for empty buckets</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>c</p>
    <p>T2T1</p>
    <p>b</p>
    <p>d</p>
    <p>e</p>
    <p>x</p>
    <p>My alternative location</p>
    <p>Kickout for empty buckets</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>T2T1</p>
    <p>b</p>
    <p>d</p>
    <p>e</p>
    <p>x</p>
    <p>My alternative location</p>
    <p>Kickout for empty buckets</p>
  </div>
  <div class="page">
    <p>How is an endless loop formed?</p>
    <p>a 0 1</p>
    <p>c</p>
    <p>T2T1</p>
    <p>b</p>
    <p>d</p>
    <p>e</p>
    <p>x</p>
    <p>My alternative location</p>
    <p>a b</p>
    <p>d x</p>
    <p>n An endless loop is formed.</p>
    <p>n Endless kickouts for any insertion within the loop.</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>n Endless loops widely exist in the Cuckoo hashing structures.  More than 25% (cuckoo hashing with a stash)</p>
    <p>n Loop ratio: the percentage of insertion failures due to loops</p>
    <p>L oo</p>
    <p>p R</p>
    <p>at io</p>
    <p>s (%</p>
    <p>)</p>
    <p>Load Factor</p>
    <p>RandomInteger MacOS DocWords</p>
  </div>
  <div class="page">
    <p>Existing works</p>
    <p>n ChunkStash @USENIX ATC10  Collisions: resursive strategy to relocate one of keys in candidates  Loops: an auxiliary linked list (or, hash table)</p>
    <p>n MemC3 @NSDI13  Collisions: random and repeat relocation (500 times)  Loops: an expansion process  Stand-alone implementation: libcuckoo @ EuroSys14</p>
    <p>n Horton tables @USENIX ATC16  Recursively evicting keys within a certain search tree height</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>n Due to endless loops:  Substantial resources consumption</p>
    <p>u A large number of step-by-step kick-out operations  Unbounded performance</p>
    <p>u Fruitless effort</p>
    <p>n Design Goal:  Predetermining and avoiding occurrence of endless loops</p>
  </div>
  <div class="page">
    <p>Our approach: SmartCuckoo</p>
    <p>n Tracking item placements in the hash table</p>
    <p>Representing the hashing relationship as a directed pseudoforest</p>
    <p>Classifying item insertions into three cases</p>
    <p>Predetermining and avoiding loops during insertion without any kick-out attempts.</p>
  </div>
  <div class="page">
    <p>n Pseudoforest:  A graph: each vertex has an outdegree of at most one  Each connected component (subgraph) has at most one cycle (loop)  In a subgraph:</p>
    <p>Loop #Vertices = #Edges</p>
    <p>How to identify loop(s)?</p>
    <p>e</p>
    <p>c d</p>
    <p>a</p>
    <p>k</p>
    <p>j n</p>
    <p>m</p>
    <p>l</p>
    <p>b i</p>
    <p>hf g</p>
    <p>e</p>
    <p>c d</p>
    <p>a</p>
    <p>k</p>
    <p>j n</p>
    <p>mb</p>
    <p>hf g Vacancy</p>
    <p>No loop #Vertices = #Edges + 1</p>
  </div>
  <div class="page">
    <p>Classification and predetermination n Three cases depending on the number of vertices added to the graph</p>
    <p>n v+0, v+1, and v+2 n v+0: 5 possible scenarios based on the status of corresponding subgraph(s)</p>
    <p>Three cases v+0 v+1 v+2 Two insert</p>
    <p>positions of a key Same subgraph Different subgraphs A new</p>
    <p>one Two new</p>
    <p>ones</p>
    <p>Subgraph status Nonmaximal</p>
    <p>Maximal Both nonmaximal</p>
    <p>A maximal and a nonmaximal</p>
    <p>Both maximal -</p>
    <p>Scenarios (a) (e) (b) (c) (d) -</p>
  </div>
  <div class="page">
    <p>v+0: (a) One non-maximal subgraph</p>
    <p>Pseudoforest</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>x1 H1( )</p>
    <p>H2( ) a</p>
    <p>b</p>
    <p>c</p>
    <p>dH1(x1)</p>
    <p>H2(x1)</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>x1 a</p>
    <p>b</p>
    <p>c</p>
    <p>d</p>
    <p>x1</p>
    <p>n One empty bucket n Success!</p>
  </div>
  <div class="page">
    <p>v+0: (b) Two non-maximal subgraphs</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>f g6</p>
    <p>x2 H1( )</p>
    <p>H2( )</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>H1(x2)</p>
    <p>H2(x2)</p>
    <p>f</p>
    <p>g</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>f g6</p>
    <p>x2</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>f</p>
    <p>gx2</p>
    <p>n Two empty buckets n Success!</p>
    <p>Pseudoforest 21</p>
  </div>
  <div class="page">
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>e H1(x3)</p>
    <p>H2(x3)</p>
    <p>f</p>
    <p>g</p>
    <p>v+0: (c) One maximal and one non-maximal</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>f g6</p>
    <p>e x3</p>
    <p>H2( )</p>
    <p>H1( ) c</p>
    <p>g</p>
    <p>b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>f x36</p>
    <p>e</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>e</p>
    <p>f</p>
    <p>g x3</p>
    <p>n One loop and one empty bucket n Conventional cuckoo hashing: taking a random walk</p>
    <p>T1: executing extra useless kick-out operations  T2: making a success  SmartCuckoo: directly selecting to enter from T2</p>
    <p>n Success!</p>
    <p>Pseudoforest 22</p>
  </div>
  <div class="page">
    <p>v+0: (d) Two maximal subgraphs</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>f i g6</p>
    <p>e x4</p>
    <p>H1( )</p>
    <p>H2( )</p>
    <p>h</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>e</p>
    <p>H1(x4)</p>
    <p>H2(x4)</p>
    <p>fi</p>
    <p>h g Failure!</p>
    <p>n Two loops! n Execution:</p>
    <p>Conventional cuckoo hashing: sufficient attempts, then reporting a failure  SmartCuckoo: reporting a failure without any kick-out operations.</p>
    <p>Pseudoforest 23</p>
  </div>
  <div class="page">
    <p>v+0: (e) One maximal subgraph</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>e x5</p>
    <p>H1( )</p>
    <p>H2( )</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>e</p>
    <p>H1(x5) H2(x5)</p>
    <p>Failure!</p>
    <p>n One loop!</p>
    <p>Pseudoforest 24</p>
  </div>
  <div class="page">
    <p>Case: v+1</p>
    <p>Pseudoforest</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>x6 H1( )</p>
    <p>H2( )</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>H1(x6)</p>
    <p>H2(x6)</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>x6</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>x6</p>
    <p>n A new vertex after the item's insertion n Success!</p>
  </div>
  <div class="page">
    <p>Case: v+2</p>
    <p>Pseudoforest</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>x7 H1( )</p>
    <p>H2( )</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>H1(x7) H2(x7)</p>
    <p>c b</p>
    <p>d</p>
    <p>T1 T2 0</p>
    <p>a</p>
    <p>x7</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>x7</p>
    <p>n Two new vertices after the insertion n Success!</p>
  </div>
  <div class="page">
    <p>Evaluation methodology n Comparisons:</p>
    <p>Baseline (Cuckoo hashing with a stash @ SIAM Journal on Computing'09)  libcuckoo @ EuroSys'14  BCHT (bucketized cuckoo hash table)</p>
    <p>n Traces:  RandomInteger: random integer generator @ TOMACS'98  MacOS: http://tracer.filesystems.org  DocWords: http://archive.ics.uci.edu/ml/datasets/Bag+of+Words  YCSB: https://github.com/brianfrankcooper/YCSB @ SOCC'11</p>
    <p>n Metrics: in millions of operations per second  Insertion throughput  Lookup throughput: positive/negative  Throughput of workload with mixed queries (YCSB)</p>
  </div>
  <div class="page">
    <p>Insertion throughput</p>
    <p>M ill</p>
    <p>io ns</p>
    <p>o f I</p>
    <p>ns er</p>
    <p>tio ns</p>
    <p>P er</p>
    <p>Se</p>
    <p>co nd</p>
    <p>Load Factor</p>
    <p>Baseline libcuckoo BCHT SmartCuckoo</p>
    <p>n SmartCuckoo significantly increases insertion throughputs. n 0.5 to 5speedups compared to Baseline.</p>
  </div>
  <div class="page">
    <p>Lookup throughput</p>
    <p>M ill</p>
    <p>io ns</p>
    <p>o f L</p>
    <p>oo ku</p>
    <p>ps P</p>
    <p>er</p>
    <p>Se co</p>
    <p>nd</p>
    <p>Percentage of Existent Keys in the Lookup Requests</p>
    <p>Baseline libcuckoo BCHT SmartCuckoo</p>
    <p>n 0%: all candidate positions for a key have to be accessed. n Almost the same lookup throughput with Baseline. n Significantly higher than libcuckoo and BCHT.</p>
  </div>
  <div class="page">
    <p>Throughput of workload with mixed queries</p>
    <p>YCSB-1 YCSB-2 YCSB-3 YCSB-4 YCSB-5</p>
    <p>M ill</p>
    <p>io ns</p>
    <p>o f O</p>
    <p>pe ra</p>
    <p>ti on</p>
    <p>s P</p>
    <p>er</p>
    <p>Se co</p>
    <p>nd</p>
    <p>Workloads</p>
    <p>Baseline</p>
    <p>libcuckoo</p>
    <p>BCHT</p>
    <p>SmartCuckoo</p>
    <p>n With the decrease of the percentage of insertions, all schemes increase the throughputs.</p>
    <p>n In each workload, SmartCuckoo produces higher throughput than other three schemes.</p>
    <p>Workload Insert Lookup Update</p>
    <p>YCSB-1 100 0 0</p>
    <p>YCSB-2 75 25 0</p>
    <p>YCSB-3 50 50 0</p>
    <p>YCSB-4 25 75 0</p>
    <p>YCSB-5 0 95 5</p>
  </div>
  <div class="page">
    <p>Conclusion and future work n Cuckoo hashing is cost-efficient to offer O(1) query</p>
    <p>performance. n We address the problem of potential endless loops in item</p>
    <p>insertion. n SmartCuckoo helps improve predictable performance in</p>
    <p>storage systems.</p>
    <p>n To-do-list: n SmartCuckoo in hash tables with more than two hash functions; n The use of multiple slots in each bucket.</p>
  </div>
  <div class="page">
    <p>Thanks and questions?</p>
    <p>Open-source code: https://github.com/syy804123097/SmartCuckoo</p>
  </div>
</Presentation>
