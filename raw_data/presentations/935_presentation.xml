<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rebecca Smith and Scott Rixner</p>
    <p>Surviving Peripheral Failures in Embedded Systems</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Embedded systems are ubiquitous</p>
    <p>They interact with the real world via sensors and actuators</p>
    <p>These peripherals can fail asynchronously</p>
  </div>
  <div class="page">
    <p>Contributions &amp; Outline</p>
    <p>Phoenix Peripheral Recovery System 1. Insights into embedded system recovery 2. Procedure for recovering from peripheral failures 3. Mechanisms implementing this procedure 4. Evaluation on microbenchmarks and applications</p>
  </div>
  <div class="page">
    <p>Owl</p>
    <p>An embedded run-time system and development toolchain which provides:  Productivity: Python interpreter, interactive prompt  Hardware access: two native function interfaces</p>
    <p>Available at embeddedpython.org</p>
  </div>
  <div class="page">
    <p>Insights: Embedded Systems</p>
    <p>each one individually during recovery</p>
  </div>
  <div class="page">
    <p>Insights: Peripherals</p>
  </div>
  <div class="page">
    <p>Insights: Peripherals</p>
    <p>having its intended effect on the external state  e.g. autonomous car: motor and servo</p>
  </div>
  <div class="page">
    <p>Insights: Peripherals</p>
    <p>on the failed peripheral is mandatory b. Re-executing accesses to other peripherals may be</p>
    <p>incorrect  Rematerialize = skip during re-execution,</p>
    <p>restoring the old value instead</p>
  </div>
  <div class="page">
    <p>Insights: Peripherals</p>
    <p>B. Restore Ps last state during re-execution  If P is in the redo set, restore:</p>
    <p>what: initial state at point of failed access when: before re-execution</p>
    <p>Otherwise, restore: what: final re-materialized state when: after re-execution</p>
  </div>
  <div class="page">
    <p>Recovery Procedure</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>detect motor failure</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>put motor, servo in safe state</p>
    <p>detect motor failure</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>roll back</p>
    <p>put motor, servo in safe state</p>
    <p>detect motor failure</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>recover motor</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>(no last states)</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>redo</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>rematerialize</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>redo</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>redo</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>exit redo mode</p>
  </div>
  <div class="page">
    <p>Mechanisms</p>
    <p>Run-time system:  Enables and disables checkpointing  Logs the internal and external state when</p>
    <p>checkpointing is enabled  Detects success and failure of peripheral accesses  Executes the recovery procedure</p>
    <p>Compiler:  Injects code to enable checkpointing  Injects code to track outstanding peripheral</p>
    <p>accesses</p>
  </div>
  <div class="page">
    <p>Checkpointing Structures</p>
    <p>Goal: Log the internal and external state  Store multiple simultaneous checkpoints efficiently</p>
    <p>Stored on a second heap to persist past rollback of the Python heap</p>
    <p>Only used when checkpointing is enabled  Populated incrementally as state is changed  Freed incrementally as accesses are acked</p>
  </div>
  <div class="page">
    <p>Journal</p>
    <p>Goal: Log the internal program state</p>
    <p>One entry per store to the Python heap  Heap is set read-only by the MPU  Faults are handled by journaling the (memory</p>
    <p>address, old contents) prior to executing the store</p>
    <p>Implemented in software; could be implemented in hardware for efficiency</p>
  </div>
  <div class="page">
    <p>Rematerialization Queues</p>
    <p>Goal: Log the external peripheral state</p>
    <p>One queue per peripheral  One entry per access, which stores:</p>
  </div>
  <div class="page">
    <p>Control Flow Queue</p>
    <p>Goal: Drive redo mode execution</p>
    <p>Logs control flow during normal execution  One entry per bytecode</p>
    <p>Exit redo mode if: 1. Control flow diverges from the original path, or 2. The point of failure detection is reached again</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Example Journal:</p>
  </div>
  <div class="page">
    <p>Example Journal:</p>
    <p>Rematerialization Queues:</p>
    <p>(Motor)</p>
  </div>
  <div class="page">
    <p>Example Journal:</p>
    <p>Rematerialization Queues:</p>
    <p>(Motor)</p>
  </div>
  <div class="page">
    <p>Example Journal:</p>
    <p>Rematerialization Queues:</p>
    <p>(Motor)</p>
    <p>(Servo)</p>
  </div>
  <div class="page">
    <p>Example Journal:</p>
    <p>Rematerialization Queues:</p>
    <p>(Servo)</p>
  </div>
  <div class="page">
    <p>Interrupt Handlers</p>
    <p>Goal: Detect failure, acknowledge success</p>
    <p>On success, decrement the count of outstanding peripheral accesses</p>
    <p>On failure, throw an exception to the interpreter requesting rollback</p>
  </div>
  <div class="page">
    <p>Compile-time Support</p>
    <p>Goal: Identify rollback points  New JOURNAL_STORE bytecode enables checkpointing  Inserted just before loading arguments to peripheral</p>
    <p>access function calls</p>
    <p>Goal: Track outstanding peripheral accesses  After each access, code is added to increment the</p>
    <p>number of outstanding accesses</p>
  </div>
  <div class="page">
    <p>Application Development</p>
    <p>Goal: disentangle peripheral recovery code from application-specific code</p>
    <p>Programmer must follow two simple rules: 1. Define a Python class for each peripheral 2. Provide a config file including peripheral metadata</p>
  </div>
  <div class="page">
    <p>Peripheral Class</p>
    <p>Goal: Specify peripheral recovery behavior</p>
    <p>Each peripheral extends one of four classes  StatelessPeripheral  EphemeralPeripheral  PersistentPeripheral  HistoricalPeripheral</p>
    <p>Programmer defines functions to support:  Access: the only C code the programmer must write  Recovery &amp; Restoration: programmer determines</p>
    <p>how; system determines when 36</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Configuration File</p>
    <p>Goal: Specify peripheral metadata 1. Number of interrupts per peripheral access 2. Dependencies between peripherals</p>
  </div>
  <div class="page">
    <p>Evaluation  Used the Stellaris LM3S9B92 for evaluation</p>
    <p>96 KB SRAM, 256 KB flash, 50 MHz</p>
    <p>Microbenchmarks:  Named in the form &lt;peripherals&gt;_&lt;actions&gt;</p>
    <p>&lt;peripherals&gt;  {gyro, compass}  &lt;actions&gt;  {r, w, c} for {read, write, compute}</p>
    <p>Applications:  Autonomous RC car (motor, servo, gyro)  Obstacle tracker (display, range finder)  Virtual compass (display, compass)</p>
  </div>
  <div class="page">
    <p>Evaluation: Space</p>
  </div>
  <div class="page">
    <p>Evaluation: Space</p>
  </div>
  <div class="page">
    <p>Evaluation: Time</p>
    <p>Overhead of a single failure: 12143 ms</p>
    <p>Overhead of a journaled store: 6.2 s  Projected 40.2 ns with hardware journal</p>
    <p>No discernible slowdown on  applications  Virtual compass (intensive accesses)  Autonomous RC car (periodic accesses)  Obstacle tracker (fixed sleep between accesses)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Hardware peripherals introduce complex failure scenarios  External state impacts the real world  Failures occur asynchronously</p>
    <p>Phoenix simplifies handling these failures  Incremental checkpointing  Precise rollback to the source of the failure  Correct recovery of both the internal program state</p>
    <p>and the external peripheral state</p>
  </div>
</Presentation>
