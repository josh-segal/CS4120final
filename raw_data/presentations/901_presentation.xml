<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SLIPSTREAM: AUTOMATIC</p>
    <p>INTERPROCESS COMMUNICATION</p>
    <p>OPTIMIZATION</p>
    <p>Will Dietz, Joshua Cranmer, Nathan Dautenhahn, Vikram Adve</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Introduction</p>
    <p>Use of TCP is ubiquitous</p>
    <p>Widely Supported</p>
    <p>Location Transparency</p>
    <p>Programmer-friendly but not always ideal</p>
    <p>Faster IPC exists for local communication</p>
    <p>Goal: Best of TCP generality with fast performance locally</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Motivating Example 3</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IPTCP/IP</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Motivating Example 4</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>Optimization opportunity:</p>
    <p>Local communication could use UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Motivating Example  Manually Optimized 5</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>UDS vs TCP: up to 2x ops/sec!</p>
    <p>Avoid TCP layers</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Motivating Example  Manually Optimized 6</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>UDS vs TCP: up to 2x ops/sec!</p>
    <p>Avoid TCP layers</p>
    <p>Can we do this</p>
    <p>automatically?</p>
    <p>Slipstream: Automatic IPC Optimization</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Whats Coming</p>
    <p>Slipstream Overview</p>
    <p>How Slipstream Works</p>
    <p>Selected Results</p>
    <p>Performance</p>
    <p>Compatibility</p>
    <p>Docker</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream Overview8</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Design Principles: Automatic and Useful 9</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IPTCP/IP TCP/IP</p>
    <p>No App. Modifications</p>
    <p>Language Agnostic</p>
    <p>No Kernel Modifications</p>
    <p>No Network Assumptions</p>
    <p>Backwards Compatible</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream Architecture: What is it? 10</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example + (libipc) 11</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc libipc</p>
    <p>libipc:</p>
    <p>Shim library between application and OS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example + (libipc + ipcd) 12</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>ipcd:</p>
    <p>Coordinating daemon for all libipc on host</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example + Slipstream 13</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>How Slipstream Works14</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>How Slipstream Works: Overview 15</p>
    <p>Track TCP State</p>
    <p>Detect Local Communication</p>
    <p>Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Tracking TCP State 16</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>read write listen</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
    <p>libipc:</p>
    <p>Transparently monitors TCP operations</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>read write listen</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
    <p>libipc:</p>
    <p>Maintains state throughout execution</p>
    <p>libipc:</p>
    <p>Transparently monitors TCP operations fork</p>
    <p>exec dup</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Detecting Local Communication 19</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Detecting Local Communication 20</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>ipcd:</p>
    <p>Uses information from libipc to perform</p>
    <p>endpoint matching</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Detecting Local Communication 21</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>ipcd:</p>
    <p>Uses information from libipc to identify local</p>
    <p>communication</p>
    <p>Endpoint Matching:</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Local communication detected!</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Switching to UDS 23</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Switching to UDS 24</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
    <p>ipcd:</p>
    <p>Generate optimized socketpair, send to</p>
    <p>libipc instances</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Switching to UDS 25</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
    <p>libipc:</p>
    <p>Transparently switch to new transport</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Switching to UDS 26</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcdlibipc:</p>
    <p>Preserve expected socket behavior</p>
    <p>for compatibility</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
    <p>libipc:</p>
    <p>Transparently switch to new transport</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Switching to UDS 27</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Slipstream: up to 2x ops/sec</p>
    <p>Track TCP State Detect Local</p>
    <p>Communication Switch to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Selected Results28</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Performance vs Local TCP</p>
    <p>Memcached</p>
    <p>Up to +80% ops/sec!</p>
    <p>At least +40% ops/sec!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Performance vs Manual UDS</p>
    <p>Netperf UDS</p>
    <p>Slipstream automatically achieves</p>
    <p>performance similar to manual UDS!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Performance Overhead 31</p>
    <p>~3.5% overhead</p>
    <p>&lt; 3% overhead</p>
    <p>Memcached</p>
    <p>Netperf</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Software Compatibility</p>
    <p>Supports many popular server applications</p>
    <p>MySQL, PostgreSQL, Redis, Memcached, Apache, Jenkins,</p>
    <p>Language agnostic in practice</p>
    <p>Java, C, Python,</p>
    <p>All work correctly with Slipstream</p>
    <p>All are optimized when communicating locally</p>
    <p>Supports use with Docker!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example with Docker 33</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>Slower comm., extra layers</p>
    <p>Put app in container</p>
    <p>Container per component</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example with Docker + Slipstream? 34</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>Slower comm., extra layers</p>
    <p>Put app in container</p>
    <p>Container per component</p>
    <p>Did someone say they</p>
    <p>need Automatic IPC</p>
    <p>Optimization?</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream with Docker 35</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc</p>
    <p>libipc per container</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream with Docker 36</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc</p>
    <p>ipcd</p>
    <p>libipc per container</p>
    <p>Connect to common ipcd</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream with Docker 37</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc</p>
    <p>ipcd</p>
    <p>ipcd can run in a container too</p>
    <p>libipc per container</p>
    <p>Connect to common ipcd</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream with Docker 38</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc</p>
    <p>ipcd</p>
    <p>Optimize across containers!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slipstream with Docker 39</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc</p>
    <p>ipcd</p>
    <p>Same perf. as without Docker</p>
    <p>Optimize across containers!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Docker with NetPIPE-C 40</p>
    <p>Baseline Docker is significantly slower</p>
    <p>Slipstream shows large speedups</p>
    <p>Same perf. with or without Docker!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Conclusions:</p>
    <p>Automatically use faster IPC mechanism when available</p>
    <p>Easy to deploy, highly compatible</p>
    <p>No OS modifications</p>
    <p>No modifications to application</p>
    <p>Language-agnostic</p>
    <p>Backwards-compatible (partial deployment supported)</p>
    <p>~2x bandwidth improvement for host-local communication</p>
    <p>Low overhead when optimization is not possible</p>
    <p>Freely Available at http://wdtz.org/slipstream</p>
    <p>Thank you! Questions?</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>(End of presentation)</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>FAQ43</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Q: Why use UDS instead of other local IPC?</p>
    <p>Simply: Socket interface of UDS facilitated prototyping</p>
    <p>Any local IPC mechanism should be possible</p>
    <p>(Patches welcome! )</p>
    <p>Others could avoid kernel interaction for even better performance</p>
    <p>See ipc-bench paper</p>
    <p>Slipstream is not UDS-specific</p>
    <p>UDS implementation detail, idea is faster performance leveraging locality</p>
    <p>In fact, netperf sometimes slower with UDS (see paper).</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Q: Why not have application do this itself?</p>
    <p>Legacy: many applications dont do this today</p>
    <p>(Knowledge that UDS faster than TCP is not new!)</p>
    <p>They shouldnt have to, Slipstream!</p>
    <p>Achieves performance of manual optimization</p>
    <p>Low overhead when optimization not possible</p>
    <p>Applications have better things to do than transport selection!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Q: Why userspace solution, not in-kernel?</p>
    <p>Mostly: Legacy</p>
    <p>Ease of use, ease of deployment</p>
    <p>Suitable for use on other systems (FreeBSD, etc.)</p>
    <p>May not be appropriate for kernel</p>
    <p>Correctness concerns</p>
    <p>(Opt-in approach likely appropriate)</p>
    <p>Possibility for using even more efficient transports than UDS</p>
    <p>Cant cut out kernel with a kernel-based solution</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Q: What about frequent short-lived connections?</p>
    <p>Current implementation not well-suited for this, but could be!</p>
    <p>Would not benefit from optimization</p>
    <p>only applied to longer-lived connections</p>
    <p>In fact, initial connection latency over localhost increased</p>
    <p>Not by design, result of implementation choices (but nevertheless)</p>
    <p>Probably better off with custom is local decision mechanism</p>
    <p>Ex: Is destination IP 127.0.0.1</p>
    <p>Would allow optimizing before connection, get faster connect() times</p>
    <p>Thanks for the question, Joshua .</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Extra Slides48</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Category Name Application Transparency OS Transparency</p>
    <p>OS Feature</p>
    <p>Windows Fast-Path</p>
    <p>Solaris TCP Fusion</p>
    <p>AIX fastlo</p>
    <p>Linux TCP Friends ?</p>
    <p>VM-VM</p>
    <p>XWay</p>
    <p>XenSocket</p>
    <p>XenLoop</p>
    <p>Userspace</p>
    <p>Networking Stack</p>
    <p>mTCP</p>
    <p>Sandstorm</p>
    <p>Userspace</p>
    <p>Shim Library</p>
    <p>Fable</p>
    <p>Java Fast Sockets</p>
    <p>Universal Fast Sockets</p>
    <p>FastSockets</p>
    <p>Slipstream</p>
    <p>Related Work 49</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Building on Slipstream</p>
    <p>Alternative transports (shared memory, etc.) (see ipc-bench)</p>
    <p>Select best transport for workload/configuration</p>
    <p>Support multiple locality detection mechanisms</p>
    <p>Provided one is suitable for many use-cases</p>
    <p>If can assume network topology, can directly determine this</p>
    <p>More exhaustive testing, performance investigation</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Try it out today!</p>
    <p>No configuration, simple deployment</p>
    <p>Big performance gains for many applications (Docker support!)</p>
    <p>Low overheads when optimization is not possible</p>
    <p>Makes most of partial deployment</p>
    <p>Open-source, CRAPL (dont judge, its research!)</p>
    <p>Download today!</p>
    <p>http://wdtz.org/slipstream</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Deploying Slipstream53</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example + Slipstream: Deployment 54</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example + Slipstream: Deployment 55</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipc libipc</p>
    <p>libipc deployed with application (LD_PRELOAD or /etc/ld.so.preload)</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Challenges and Solutions56</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Example + Slipstream: Key Challenge 57</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Challenge:</p>
    <p>Which connections are communicating</p>
    <p>locally?</p>
    <p>libipc only sees what goes through it</p>
    <p>Solution:</p>
    <p>Endpoint matching algorithm to identify</p>
    <p>local communication</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching Overview 58</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>libipc works with ipcd which has more information</p>
    <p>Observed behavior from both libipc</p>
    <p>instances used by ipcd to find match</p>
    <p>Its the</p>
    <p>orange one!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching Overview 59</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Its the</p>
    <p>orange one! libipc works with ipcd which has more information</p>
    <p>Observed behavior from both libipc</p>
    <p>instances used by ipcd to find match What information can</p>
    <p>be used to help pair</p>
    <p>endpoints?</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching Overview 60</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Src/Dst</p>
    <p>IP and Port</p>
    <p>Data</p>
    <p>Sent/Recv</p>
    <p>Timing</p>
    <p>Details</p>
    <p>Observed behavior from both libipc</p>
    <p>instances used by ipcd to find matchand its</p>
    <p>orange.</p>
    <p>libipc works with ipcd which has more information</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching Overview 61</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Src/Dst</p>
    <p>IP and Port</p>
    <p>Data</p>
    <p>Sent/Recv</p>
    <p>Timing</p>
    <p>Details</p>
    <p>Observed behavior from both libipc</p>
    <p>instances used by ipcd to find matchMore</p>
    <p>details in</p>
    <p>paper!</p>
    <p>libipc works with ipcd which has more information</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching Overview 62</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd Observed behavior from both libipc</p>
    <p>instances used by ipcd to find match</p>
    <p>libipc works with ipcd which has more information</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching Overview 63</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Local endpoints found!</p>
    <p>libipc works with ipcd which has more information</p>
    <p>Observed behavior from both libipc</p>
    <p>instances used by ipcd to find match</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Endpoint Matching: Complete 64</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Local endpoints found!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Automatic IPC Optimization 65</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Transparently switches to UDS</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Automatic IPC Optimization 66</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>UDS vs TCP: up to 2x ops/sec</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Without Modifying Applications? 67</p>
    <p>Kernel</p>
    <p>Clients</p>
    <p>Web App</p>
    <p>(Java, C, Python, ) Memory Store Database</p>
    <p>Kernel TCP/IP TCP/IP</p>
    <p>libipc libipcipcd libipc ipcd</p>
    <p>Implementation Challenge:</p>
    <p>libipc must preserve expected socket behavior</p>
    <p>for compatibility</p>
    <p>Solution:</p>
    <p>Engineering!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Results, with slides.68</p>
    <p>Presented by Will Dietz, University of Illinois at Urbana-Champaign. USENIX ATC'15. Source: http://www.penny-arcade.com/comic/2005/09/09</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>NetPIPE-C NetPIPE-Java</p>
    <p>Faster than TCP? NetPIPE Microbenchmarks</p>
    <p>Works with both C and Java!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Faster than TCP? Memcached</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>PostgreSQL  TPC-B PostgreSQL - Select</p>
    <p>Faster than TCP? PostgreSQL</p>
    <p>No improvement when CPU/IO bound Small improvement for Select-only</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>PostgreSQL  TPC-B PostgreSQL - Select</p>
    <p>Faster than TCP? PostgreSQL</p>
    <p>No improvement when CPU/IO bound Small improvement for Select-only</p>
    <p>Application benefit depends on how</p>
    <p>much network is the bottleneck</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Netperf Memcached</p>
    <p>Slower than TCP? Slipstream Overhead</p>
    <p>~3.5% overhead for Netperf &lt; 3% overhead for Memcached</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Netperf Memcached</p>
    <p>Slower than TCP? Slipstream Overhead</p>
    <p>~3.5% overhead for Netperf &lt; 3% overhead for Memcached</p>
    <p>Overhead incurred is low in even</p>
    <p>network-intensive applications</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slower than manual UDS? Netperf Microbenchmark</p>
    <p>Relative to fixed benchmark</p>
    <p>(Default UDS does poorly)</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Slower than manual UDS? Netperf Microbenchmark</p>
    <p>Relative to fixed benchmark</p>
    <p>(Default UDS does poorly)</p>
    <p>Automatically achieves</p>
    <p>performance close to manually</p>
    <p>using UDS!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Docker with NetPIPE-C 77</p>
    <p>Baseline Docker is significantly slower</p>
    <p>Slipstream shows large speedups</p>
    <p>Same perf. with or without Docker!</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Memcached with Docker Memcached without Docker</p>
    <p>Docker with Memcached</p>
    <p>Baseline Docker has lower performance</p>
    <p>Curious:</p>
    <p>Memcached with Slipstream</p>
    <p>performs better across Docker</p>
    <p>containers</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Software Compatibility</p>
    <p>Supports many popular server applications</p>
    <p>MySQL, PostgreSQL, Redis, Memcached, Apache, Jenkins,</p>
    <p>Language agnostic in practice</p>
    <p>Java, C, Python,</p>
    <p>And of course our microbenchmarks:</p>
    <p>NetPIPE, netperf, iperf, lmbench</p>
    <p>All work correctly with Slipstream</p>
    <p>All are optimized when communicating locally</p>
  </div>
  <div class="page">
    <p>http://wdtz.org/slipstream</p>
    <p>Kernel</p>
    <p>Slipstream Overview  Multiple Applications 80</p>
    <p>ipcd</p>
    <p>Web App</p>
    <p>libipc</p>
    <p>Web App</p>
    <p>libipc</p>
    <p>Web App</p>
    <p>libipc</p>
    <p>libipc:</p>
    <p>One instance per process</p>
    <p>ipcd:</p>
    <p>One instance per host</p>
  </div>
</Presentation>
