<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Load Balancing in Processor Sharing Systems</p>
    <p>Eitan Altman (INRIA)</p>
    <p>Urtzi Ayesta (LAAS-CNRS)</p>
    <p>and Balakrishna Prabhu (LAAS-CNRS)</p>
    <p>GameComm, 20 October 2008</p>
  </div>
  <div class="page">
    <p>Server farms</p>
    <p>Diverse applications : e-service industry, database systems, grid computing clusters</p>
    <p>Servers</p>
    <p>Dispatcher</p>
    <p>Requests</p>
    <p>Design problem: What is the optimal routing policy?</p>
    <p>Centralized setting: dispatcher takes decisions</p>
    <p>Decentralized setting: requests take decisions</p>
  </div>
  <div class="page">
    <p>Example application Internet based source code repositories - SourceForge, Google Code:</p>
    <p>Source files are hosted on several mirror sites</p>
    <p>x x  Decision is taken either by the central unit or by the downloader  Downloads progress in parallel  Processor Sharing (PS) at each</p>
    <p>server</p>
  </div>
  <div class="page">
    <p>Problem Description</p>
    <p>Server farms with K job classes , C servers, PS discipline</p>
    <p>Dispatcher</p>
    <p>ServersRequests</p>
    <p>1, 1</p>
    <p>2, 2</p>
    <p>K , K</p>
    <p>r1, c1</p>
    <p>r2, c2</p>
    <p>rC , cC</p>
    <p>Objective:  Centralized setting: minimize the weighted mean sojourn time</p>
    <p>Decentralized setting: each user seeks to minimize its own</p>
    <p>weighted mean sojourn time</p>
    <p>Decision variable : p = (pij ) - probability that class i job is routed to server j.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Centralized setting</p>
    <p>Decentralized setting</p>
    <p>Comparing the Centralized and Decentralized solution  Price of Anarchy</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Mean sojourn times in M/G/1/PS queues</p>
    <p>By Littles law mean the sojourn time is proportional to the mean number of jobs</p>
    <p>Let i = i1i be the traffic offered by class i  Let  =</p>
    <p>i i be the total offered traffic</p>
    <p>The load on server j is</p>
    <p>j =</p>
    <p>i ipij rj</p>
    <p>The mean number of jobs in server j is</p>
    <p>E[Nj ] = j</p>
    <p>E[Nj ] is insensitive to the second moment of the service time distribution</p>
  </div>
  <div class="page">
    <p>Centralized setting : problem formulation</p>
    <p>Solve the following mathematical program :</p>
    <p>minimize</p>
    <p>jS</p>
    <p>cj j (p)</p>
    <p>subject to</p>
    <p>jS</p>
    <p>pij = 1, for all i  K;</p>
    <p>p  0;</p>
    <p>iK</p>
    <p>ipij &lt; rj , for all j  S.</p>
    <p>Solution need not be unique</p>
    <p>If j (p1) = j (p2), j  S, then either both p1 and p2 are optimal or both are suboptimal</p>
  </div>
  <div class="page">
    <p>Stability and Size-unaware multi-strategy</p>
    <p>Proposition. There exists a stable multi-strategy if and only if</p>
    <p>jS rj &gt; .</p>
  </div>
  <div class="page">
    <p>Stability and Size-unaware multi-strategy</p>
    <p>Proposition. There exists a stable multi-strategy if and only if</p>
    <p>jS rj &gt; .</p>
    <p>Proposition: Let p be a feasible multi-strategy. For all i  K and for all j  S define the multi-strategy p by</p>
    <p>pij = j (p)rj</p>
    <p>.</p>
    <p>The multi-strategy p is also feasible and j (p) = j (p) j  S.</p>
  </div>
  <div class="page">
    <p>Stability and Size-unaware multi-strategy</p>
    <p>Proposition. There exists a stable multi-strategy if and only if</p>
    <p>jS rj &gt; .</p>
    <p>Proposition: Let p be a feasible multi-strategy. For all i  K and for all j  S define the multi-strategy p by</p>
    <p>pij = j (p)rj</p>
    <p>.</p>
    <p>The multi-strategy p is also feasible and j (p) = j (p) j  S.</p>
    <p>Corollary: If p is an optimal multi-strategy then p is a</p>
    <p>size-unaware optimal multi-strategy</p>
    <p>Implication: Reduces the dimensionality of the program, we can</p>
    <p>optimize directly over .</p>
  </div>
  <div class="page">
    <p>Centralized setting : Reduced Mathematical Program</p>
    <p>Solve the following convex mathematical program :</p>
    <p>minimize</p>
    <p>jS</p>
    <p>cj j</p>
    <p>iK</p>
    <p>rj j = .</p>
    <p>Assume servers are indexed such that c1 r1</p>
    <p>c2 r2</p>
    <p>...  cC rC</p>
    <p>.</p>
    <p>c/r is the cost per unit workload</p>
  </div>
  <div class="page">
    <p>Centralized setting: solution structure</p>
    <p>Theorem. The subset of servers that are used in the optimal load</p>
    <p>balancing is SG = {1, . . . , j}, where j = sup</p>
    <p>{</p>
    <p>j  C : j</p>
    <p>k=1</p>
    <p>cj rj &gt;</p>
    <p>(</p>
    <p>j k=1</p>
    <p>rk   )</p>
    <p>cj rj</p>
    <p>}</p>
    <p>. Under the</p>
    <p>optimal multi-strategy, the load on server j  SG is</p>
    <p>j = 1</p>
    <p>cj rj</p>
    <p>kSG rk</p>
    <p>kSG</p>
    <p>ckrk</p>
    <p>.</p>
  </div>
  <div class="page">
    <p>Centralized setting: solution structure</p>
    <p>Theorem. The subset of servers that are used in the optimal load</p>
    <p>balancing is SG = {1, . . . , j}, where j = sup</p>
    <p>{</p>
    <p>j  C : j</p>
    <p>k=1</p>
    <p>cj rj &gt;</p>
    <p>(</p>
    <p>j k=1</p>
    <p>rk   )</p>
    <p>cj rj</p>
    <p>}</p>
    <p>. Under the</p>
    <p>optimal multi-strategy, the load on server j  SG is</p>
    <p>j = 1</p>
    <p>cj rj</p>
    <p>kSG rk</p>
    <p>kSG</p>
    <p>ckrk</p>
    <p>.</p>
    <p>Corollary The size-unaware multi-strategy, p, is given by</p>
    <p>pij =</p>
    <p>j rj</p>
    <p>, for all i  K and for all j  S.</p>
    <p>Remarks: The solution structure is known as water-filling and server</p>
    <p>with a larger c/r ratio receives lesser traffic.</p>
  </div>
  <div class="page">
    <p>Related results</p>
    <p>FCFS as back-end scheduling [Feng et al., 2005]:</p>
    <p>Job size</p>
    <p>Server 1 Server 2 Server C</p>
    <p>intuition: reduce the variability of service-time distribution</p>
    <p>For PS [Starobinski and Wu 2005, Haviv and Roughgarden 2007]  Homogenous cost rates and one type of requests.</p>
    <p>We allow for multi-class requests and heterogenous cost rates</p>
  </div>
  <div class="page">
    <p>Decentralized setting</p>
    <p>Equilibrium: A strategy p is an equilibrium for the individual</p>
    <p>selfish setting if for each class i = 1, ..., K, each server j = 1, ..., C</p>
    <p>and each queue k used by class i,</p>
    <p>E[ckTk(p)|i] = min j=1,...,K</p>
    <p>E[cjTj (p)|i]</p>
    <p>Proposition. The distributed non-cooperative game can be</p>
    <p>transformed into the standard convex optimization problem</p>
    <p>min p</p>
    <p>C</p>
    <p>k=1</p>
    <p>ck log</p>
    <p>(</p>
    <p>)</p>
    <p>The game belongs to a particular type of games known as Potential Game.</p>
  </div>
  <div class="page">
    <p>Characterizing the Individual Optimal Solution</p>
    <p>Theorem. The subset of servers that are used in the optimal routing</p>
    <p>strategy in the non-cooperative setting is of type SI = {1, . . . , j}, where</p>
    <p>j = sup</p>
    <p>{</p>
    <p>j  C : j</p>
    <p>k=1</p>
    <p>cj &gt;</p>
    <p>(</p>
    <p>j</p>
    <p>k=1</p>
    <p>rk   )</p>
    <p>cj rj</p>
    <p>}</p>
    <p>For every j  SI , the load is</p>
    <p>j = 1  cj rj</p>
    <p>kSI rk</p>
    <p>kSI ck</p>
    <p>.</p>
  </div>
  <div class="page">
    <p>Characterizing the Individual Optimal Solution</p>
    <p>Theorem. The subset of servers that are used in the optimal routing</p>
    <p>strategy in the non-cooperative setting is of type SI = {1, . . . , j}, where</p>
    <p>j = sup</p>
    <p>{</p>
    <p>j  C : j</p>
    <p>k=1</p>
    <p>cj &gt;</p>
    <p>(</p>
    <p>j</p>
    <p>k=1</p>
    <p>rk   )</p>
    <p>cj rj</p>
    <p>}</p>
    <p>For every j  SI , the load is</p>
    <p>j = 1  cj rj</p>
    <p>kSI rk</p>
    <p>kSI ck</p>
    <p>.</p>
    <p>Water-filling structure: As the arrival rate  increases, server 2 will start</p>
    <p>being used when: c1 r1</p>
    <p>1 1  1(p)</p>
    <p>= c2 r2</p>
    <p>.</p>
  </div>
  <div class="page">
    <p>Comparing the Global and Individual</p>
    <p>Proposition. For any arrival rate and service time distribution it</p>
    <p>holds</p>
    <p>SI  SG</p>
    <p>Price of Anarchy: is defined as the ratio between the performance</p>
    <p>(mean delay) obtained by the Wardrop equilibrium and the global</p>
    <p>optimal solution.</p>
    <p>Theorem. For every , there exist cj and rj , j  S, such that P oA &gt; .</p>
    <p>The PoA is unbounded. When ck = 1, then P oA  C [Haviv and Roughgarden, 2007].</p>
  </div>
  <div class="page">
    <p>Sketch of proof: P oA = C</p>
    <p>j=1 cj E[N</p>
    <p>I j ]</p>
    <p>minp C</p>
    <p>j=1 cj E[N</p>
    <p>G j ]</p>
    <p>Assume cj = rj = 1, for j = 2, . . . , C.</p>
    <p>We take r1   and c1  0.</p>
  </div>
  <div class="page">
    <p>Sketch of proof: P oA = C</p>
    <p>j=1 cj E[N</p>
    <p>I j ]</p>
    <p>minp C</p>
    <p>j=1 cj E[N</p>
    <p>G j ]</p>
    <p>Assume cj = rj = 1, for j = 2, . . . , C.</p>
    <p>We take r1   and c1  0.</p>
    <p>Individuals:</p>
    <p>Only one server is used.</p>
    <p>As r1  , E[N I1 ]   , but c1  0, and overall c1E[N I1 ]  /2.</p>
  </div>
  <div class="page">
    <p>Sketch of proof: P oA = C</p>
    <p>j=1 cj E[N</p>
    <p>I j ]</p>
    <p>minp C</p>
    <p>j=1 cj E[N</p>
    <p>G j ]</p>
    <p>Assume cj = rj = 1, for j = 2, . . . , C.</p>
    <p>We take r1   and c1  0.</p>
    <p>Individuals:</p>
    <p>Only one server is used.</p>
    <p>As r1  , E[N I1 ]   , but c1  0, and overall c1E[N I1 ]  /2.</p>
    <p>Global optimal:</p>
    <p>All servers are used.</p>
    <p>As r1   the global optimal tends to route everything towards server 1, thus</p>
    <p>C</p>
    <p>j=2 cj E[N</p>
    <p>G j ]  0.</p>
    <p>1 = 1  o(</p>
    <p>r1  ) and it turns out that c1E[N G1 ]  0.</p>
    <p>Thus for the global optimum, as r1  , C</p>
    <p>j=1 cj E[N</p>
    <p>G j ]  0.</p>
  </div>
  <div class="page">
    <p>Conclusions and Future work</p>
    <p>Centralized setting  Existence of a size-unaware optimal routing policy</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
  </div>
  <div class="page">
    <p>Conclusions and Future work</p>
    <p>Centralized setting  Existence of a size-unaware optimal routing policy</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
    <p>Decentralized setting  Potential game</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
  </div>
  <div class="page">
    <p>Conclusions and Future work</p>
    <p>Centralized setting  Existence of a size-unaware optimal routing policy</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
    <p>Decentralized setting  Potential game</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
    <p>Compare the two settings  Decentralized solution uses more servers than centralized</p>
    <p>solution</p>
    <p>Price of Anarchy is unbounded.</p>
  </div>
  <div class="page">
    <p>Conclusions and Future work</p>
    <p>Centralized setting  Existence of a size-unaware optimal routing policy</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
    <p>Decentralized setting  Potential game</p>
    <p>Characterize set of useful servers and the optimal load on each</p>
    <p>Compare the two settings  Decentralized solution uses more servers than centralized</p>
    <p>solution</p>
    <p>Price of Anarchy is unbounded.</p>
    <p>Future work  Alternative back-end scheduling disciplines: SRPT, LAS etc.</p>
    <p>Non-atomic selfish setting: Each class chooses a routing</p>
    <p>strategy to minimize its own total weighted delay.</p>
  </div>
</Presentation>
