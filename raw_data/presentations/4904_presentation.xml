<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>slide 1</p>
    <p>Justin Brickell</p>
    <p>Donald E. Porter</p>
    <p>Vitaly Shmatikov</p>
    <p>Emmett Witchel</p>
    <p>The University of Texas at Austin</p>
    <p>Secure Remote Diagnostics</p>
  </div>
  <div class="page">
    <p>slide 2</p>
    <p>Error messages are cryptic</p>
    <p>What is this and how do I fix it?</p>
  </div>
  <div class="page">
    <p>slide 3</p>
    <p>Troubleshooting is no longer local</p>
    <p>I can diagnose this fault online</p>
  </div>
  <div class="page">
    <p>slide 4</p>
    <p>Software diagnostic scenario</p>
    <p>Local state [v]</p>
    <p>Diagnosis [T(v)]</p>
    <p>Program faults  Evaluation</p>
    <p>v T(v)T</p>
    <p>Diagnosti c program</p>
    <p>Detailed problem description and solution guide</p>
  </div>
  <div class="page">
    <p>slide 5</p>
    <p>Our goal: Protect user privacy</p>
    <p>Local state [v]</p>
    <p>Program memory  File snippets  Other running programs  Confidential information</p>
    <p>If you are concerned that a report might contain personal or confidential information, you should not send the report.</p>
    <p>Problem: Users with privacy concerns cannot participate</p>
  </div>
  <div class="page">
    <p>slide 6</p>
    <p>Talk outline</p>
    <p>Two unsatisfactory approaches  Overview of our approach  Building blocks  Protocol walkthrough  Applications  Performance  Conclusion</p>
  </div>
  <div class="page">
    <p>slide 7</p>
    <p>User-side evaluation</p>
    <p>Program faults</p>
    <p>Evaluation</p>
    <p>v T(v)T T Diagnostic</p>
    <p>Proprietary ($)  Reveals vulnerabilities  Helps reverse engineer</p>
    <p>Problem: Vendor also has privacy concerns</p>
  </div>
  <div class="page">
    <p>slide 8</p>
    <p>Secure multiparty computation</p>
    <p>Program faults</p>
    <p>Evaluation v</p>
    <p>T(v) T</p>
    <p>Problem: circuit is too large to be practical</p>
    <p>Eval(T,v )</p>
    <p>Eval(T,v )</p>
    <p>T</p>
    <p>Circuit to apply T to v</p>
    <p>Description of T</p>
  </div>
  <div class="page">
    <p>slide 9</p>
    <p>Our approach: Securing T</p>
    <p>Program faults Secure T (offline)</p>
    <p>T T</p>
    <p>Evaluation</p>
    <p>v T(v)T  Reveals nothing about T  Valid for a single evaluation</p>
    <p>T Secure diagnosti c</p>
    <p>Goal: Build a practical system for real problems</p>
  </div>
  <div class="page">
    <p>slide 10</p>
    <p>Local state</p>
    <p>A snapshot of the users local state  A vector of attribute values, such as</p>
    <p>Function call counts  Function return values  Contents of memory locations</p>
  </div>
  <div class="page">
    <p>slide 11</p>
    <p>Diagnostic branching program</p>
    <p>Decision nodes compare an attribute value to a threshold  Control flows to either the left or right</p>
    <p>branch</p>
    <p>Classification nodes specify a label</p>
    <p>Diagnostic branching program for mpg321</p>
  </div>
  <div class="page">
    <p>slide 12</p>
    <p>Aside: Creation of diagnostics</p>
    <p>Diagnostic programs are built in several ways  Hand-designed using expert knowledge  Automatically generated by data mining and</p>
    <p>analyzing user error reports  For example, Microsofts Dr. Watson</p>
    <p>Clarify [PLDI 07]  Project at UT Austin to automatically build</p>
    <p>black-box classifiers for anomalous program behavior</p>
  </div>
  <div class="page">
    <p>slide 13</p>
    <p>Hiding the diagnostic program</p>
    <p>Property to hide Technique</p>
    <p>Per node: thresholds and attributes Global: subset of attributes that are used</p>
    <p>Private integer comparison (Yaos method)</p>
    <p>Global: program topology</p>
    <p>Unevaluated nodes are hidden by encryption</p>
    <p>Homomorphic encryption</p>
    <p>Blinding</p>
    <p>Hide everything about T</p>
  </div>
  <div class="page">
    <p>slide 14</p>
    <p>Private integer comparison</p>
    <p>We use Yaos method for integer comparison</p>
    <p>IF (vi &gt; threshold) THEN kl ELSE kr  Evaluator learns one of two keys conditional on</p>
    <p>comparison result  Evaluator doesnt learn comparison result or</p>
    <p>the threshold</p>
    <p>vi</p>
    <p>&gt;tkl kr</p>
    <p>Yao circuit Encoded input</p>
  </div>
  <div class="page">
    <p>slide 15</p>
    <p>Protocol walkthrough</p>
    <p>v1</p>
    <p>v2</p>
    <p>v3</p>
    <p>v4</p>
    <p>v5</p>
    <p>v1</p>
    <p>v2</p>
    <p>v3</p>
    <p>v4</p>
    <p>v5</p>
    <p>Allows addition under encryption 1</p>
    <p>Hiding subset of attributes that are used</p>
  </div>
  <div class="page">
    <p>slide 16</p>
    <p>Protocol walkthrough</p>
    <p>v1</p>
    <p>v2</p>
    <p>v3</p>
    <p>v4</p>
    <p>v5</p>
    <p>v3+b1</p>
    <p>v3+b2</p>
    <p>v4+b3</p>
    <p>v3+b1</p>
    <p>v3+b2</p>
    <p>v4+b3</p>
    <p>randomblinding hides attribute index</p>
    <p>Hiding subset of attributes that are used</p>
  </div>
  <div class="page">
    <p>slide 17</p>
    <p>Protocol walkthrough</p>
    <p>v3+b1</p>
    <p>v3+b2</p>
    <p>v4+b3</p>
    <p>OT</p>
    <p>User learns Yao representation of inputs Vendor learns nothing</p>
    <p>plaintext encrypted Yao-encoded</p>
  </div>
  <div class="page">
    <p>slide 18</p>
    <p>Protocol walkthrough</p>
    <p>v3+b1</p>
    <p>&gt;t 1</p>
    <p>k2 k3</p>
    <p>Output of comparison is key k2 or k3</p>
    <p>-b1</p>
    <p>plaintext encrypted Yao-encoded</p>
  </div>
  <div class="page">
    <p>slide 19</p>
    <p>Protocol walkthrough</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3</p>
    <p>k4</p>
    <p>k5</p>
    <p>k6</p>
    <p>k7</p>
    <p>v3+b1</p>
    <p>&gt;t 1</p>
    <p>k2 k3</p>
    <p>-b1</p>
    <p>Hiding topology of T</p>
    <p>plaintext encrypted Yao-encoded</p>
  </div>
  <div class="page">
    <p>slide 20</p>
    <p>Protocol walkthrough</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3</p>
    <p>k4</p>
    <p>k5</p>
    <p>k6</p>
    <p>k7</p>
    <p>v3+b1</p>
    <p>&gt;t 1</p>
    <p>-b1 1</p>
    <p>K3</p>
  </div>
  <div class="page">
    <p>slide 21</p>
    <p>Protocol walkthrough</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3</p>
    <p>k4</p>
    <p>k5</p>
    <p>k6</p>
    <p>k7</p>
    <p>v4+b3</p>
    <p>&gt;t 3</p>
    <p>-b3 1</p>
    <p>k6</p>
  </div>
  <div class="page">
    <p>slide 22</p>
    <p>Protocol walkthrough</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3</p>
    <p>k4</p>
    <p>k5</p>
    <p>k6</p>
    <p>k7</p>
    <p>Detailed problem description and solution guide 1</p>
  </div>
  <div class="page">
    <p>slide 23</p>
    <p>Protocol generality</p>
    <p>This is a general protocol Any branching program, any attribute vector</p>
    <p>Lets look at some specific applications</p>
  </div>
  <div class="page">
    <p>slide 24</p>
    <p>Application: Software diagnostics  Clarify [PLDI 07] automatically builds</p>
    <p>branching programs to classify anomalous program behaviors</p>
    <p>We have a working system to evaluate these branching programs securely</p>
    <p>The system is practical  For example, classifier for 4 cryptic gcc errors</p>
    <p>37 nodes, 2920 attributes  CPU: 5 seconds vendor, 7 seconds user  Bandwidth: 656kB vendor, 707kB user</p>
  </div>
  <div class="page">
    <p>slide 25</p>
    <p>Application: Medical diagnostics</p>
    <p>When the diagnostic T and the data v are both private, our tool can securely compute T(v)</p>
    <p>My symptoms and history are personal</p>
    <p>Diagnose.com</p>
    <p>My diagnostic is proprietary and valuable</p>
    <p>Patient</p>
  </div>
  <div class="page">
    <p>slide 26</p>
    <p>Server performance: Size of T</p>
  </div>
  <div class="page">
    <p>slide 27</p>
    <p>Server performance: Size of v</p>
  </div>
  <div class="page">
    <p>slide 28</p>
    <p>User performance: Size of T</p>
  </div>
  <div class="page">
    <p>slide 29</p>
    <p>User performance: Size of v</p>
  </div>
  <div class="page">
    <p>slide 30</p>
    <p>Conclusions</p>
    <p>Novel solution for secure branching program evaluation</p>
    <p>Provably secure  Much more efficient than generic</p>
    <p>techniques  Well-suited to software diagnostics</p>
    <p>Online computation is independent of the size of local state</p>
    <p>Performance acceptable for real-world applications</p>
  </div>
</Presentation>
