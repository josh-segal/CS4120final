<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Splinter: Practical Private Queries on Public Data Frank Wang, Catherine Yun, Shafi Goldwasser, Vinod</p>
    <p>Vaikuntanathan (MIT CSAIL), and Matei Zaharia (Stanford)</p>
  </div>
  <div class="page">
    <p>Users regularly perform online searches</p>
  </div>
  <div class="page">
    <p>Users regularly perform online searches</p>
  </div>
  <div class="page">
    <p>Users regularly perform online searches</p>
  </div>
  <div class="page">
    <p>Users regularly perform online searches</p>
  </div>
  <div class="page">
    <p>These searches reveal sensitive information</p>
  </div>
  <div class="page">
    <p>These searches reveal sensitive information</p>
  </div>
  <div class="page">
    <p>These searches reveal sensitive information</p>
  </div>
  <div class="page">
    <p>These searches reveal sensitive information</p>
  </div>
  <div class="page">
    <p>Naive Approach</p>
  </div>
  <div class="page">
    <p>Naive Approach</p>
  </div>
  <div class="page">
    <p>Naive Approach</p>
    <p>Problem: Large databases and user has to re-download on updates.</p>
  </div>
  <div class="page">
    <p>Naive Approach</p>
    <p>How do we build a practical system that keeps user queries private?</p>
    <p>Problem: Large databases and user has to re-download on updates.</p>
  </div>
  <div class="page">
    <p>Splinter Design</p>
  </div>
  <div class="page">
    <p>Splinter Design Providers</p>
    <p>User</p>
  </div>
  <div class="page">
    <p>Splinter Design Providers</p>
    <p>User</p>
  </div>
  <div class="page">
    <p>Splinter Design Providers</p>
    <p>User</p>
    <p>query1</p>
    <p>query2</p>
    <p>query3</p>
  </div>
  <div class="page">
    <p>Splinter Design Providers</p>
    <p>User</p>
    <p>query1</p>
    <p>query2</p>
    <p>query3</p>
    <p>resp1</p>
    <p>resp2</p>
    <p>resp3</p>
  </div>
  <div class="page">
    <p>Splinter Design Providers</p>
    <p>User</p>
    <p>query1</p>
    <p>query2</p>
    <p>query3</p>
    <p>resp1</p>
    <p>resp2</p>
    <p>resp3resp1 + resp2 + resp3 = result</p>
  </div>
  <div class="page">
    <p>Splinter Design Providers</p>
    <p>User</p>
    <p>query1</p>
    <p>query2</p>
    <p>query3</p>
    <p>resp1</p>
    <p>resp2</p>
    <p>resp3resp1 + resp2 + resp3 = result</p>
    <p>Queries with low communication cost, computation, and number of</p>
    <p>round trips</p>
  </div>
  <div class="page">
    <p>Threat Model  Data on the providers not sensitive and in cleartext  Providers are passive adversaries</p>
    <p>- Try to learn users query - Cannot tamper with query or database</p>
    <p>At least one provider does not collude with others</p>
  </div>
  <div class="page">
    <p>Performance  Response times of &lt; 1.6 seconds for databases</p>
    <p>with millions of records (NYC map, US flights, etc.)  Up to 10x fewer round trips than prior systems that</p>
    <p>use PIR and garbled circuits</p>
  </div>
  <div class="page">
    <p>Key Contributions Splinter builds on Function Secret Sharing (FSS) to divide queries into opaque shares  New protocols to run complex queries, such as</p>
    <p>MAX, TOPK, and disjunctions, over FSS  Optimized implementation of FSS protocol using</p>
    <p>AES-NI instruction</p>
  </div>
  <div class="page">
    <p>Outline  Splinter Queries  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Query Format  Splinter supports a subset of SQL: projections,</p>
    <p>limiting filters, aggregates, no joins</p>
    <p>SELECT aggregate1, aggregate2,  | projections FROM table WHERE condition [GROUP BY expr1, expr2, ] [ORDER BY expr1, expr2, ] [LIMIT k]</p>
  </div>
  <div class="page">
    <p>Query Format  Splinter supports a subset of SQL: projections,</p>
    <p>limiting filters, aggregates, no joins</p>
    <p>SELECT aggregate1, aggregate2,  | projections FROM table WHERE condition [GROUP BY expr1, expr2, ] [ORDER BY expr1, expr2, ] [LIMIT k]</p>
  </div>
  <div class="page">
    <p>Supported conditions  Splinter query algorithm for aggregates depends on condition type</p>
  </div>
  <div class="page">
    <p>Supported conditions  Splinter query algorithm for aggregates depends on condition type</p>
    <p>Condition Form</p>
    <p>Equality-only e1 = secret1 AND  AND en = secretn</p>
    <p>Intervals secret1  e1  secret2</p>
    <p>Disjoint ORs c1 OR  OR cn (ci can be equality or interval condition)</p>
  </div>
  <div class="page">
    <p>FSS Properties  Divides a function f into k shares, fi, such that:</p>
    <p>- fi can be evaluated quickly - fi (x) = f(x) - Given k-1 shares, cannot recover f</p>
    <p>f2</p>
    <p>f1</p>
    <p>f3</p>
    <p>resp1</p>
    <p>resp2</p>
    <p>resp3fi(x) = f(x)</p>
  </div>
  <div class="page">
    <p>FSS Properties  Efficient constructions exist for two cases:</p>
    <p>- Point functions: f(x) = 1 if x = a, 0 otherwise - Interval functions: f(x) = 1 if a  x  b, 0 otherwise</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5?</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>function shares: f1, f2 FSS</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route) f2(route)</p>
    <p>-3 3</p>
    <p>-3 3</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route) f2(route)</p>
    <p>-3 3</p>
    <p>-3 3</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route) f2(route)</p>
    <p>-3 3</p>
    <p>-3 3</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route) f2(route)</p>
    <p>-3 3</p>
    <p>-3 3</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route) f2(route)</p>
    <p>-3 3</p>
    <p>-3 3</p>
    <p>= 1</p>
    <p>= 1</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>COUNT Query</p>
    <p>route price</p>
    <p>SELECT COUNT(*) where route = 5? f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route) f2(route)</p>
    <p>-3 3</p>
    <p>-3 3</p>
    <p>= 0</p>
    <p>= 0 = 0</p>
    <p>function shares: f1, f2 FSS</p>
    <p>f1(x) + f2(x) = f(x)</p>
    <p>Having either f1 or f2 does not reveal any information about f</p>
  </div>
  <div class="page">
    <p>SUM Query SELECT SUM(price) where route = 5?</p>
    <p>f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>function shares: f1, f2 FSS</p>
    <p>route price</p>
  </div>
  <div class="page">
    <p>SUM Query SELECT SUM(price) where route = 5?</p>
    <p>f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route)*price f2(route)*price</p>
    <p>-24 24</p>
    <p>-21 21</p>
    <p>function shares: f1, f2 FSS</p>
    <p>route price</p>
  </div>
  <div class="page">
    <p>SUM Query SELECT SUM(price) where route = 5?</p>
    <p>f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route)*price f2(route)*price</p>
    <p>-24 24</p>
    <p>-21 21</p>
    <p>function shares: f1, f2 FSS</p>
    <p>route price</p>
    <p>Scale matching records by price</p>
  </div>
  <div class="page">
    <p>SUM Query SELECT SUM(price) where route = 5?</p>
    <p>f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>f1(route)*price f2(route)*price</p>
    <p>-24 24</p>
    <p>-21 21</p>
    <p>function shares: f1, f2 FSS</p>
    <p>route price</p>
    <p>Scale matching records by price</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5?</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5 f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>?</p>
    <p>function shares: f1, f2 FSS</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5 f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>Intermediate table</p>
    <p>?</p>
    <p>function shares: f1, f2 FSS</p>
    <p>SELECT MIN(price) GROUP BY route</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5 f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>route MIN(price)</p>
    <p>Intermediate table</p>
    <p>?</p>
    <p>function shares: f1, f2 FSS</p>
    <p>SELECT MIN(price) GROUP BY route</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5 f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>route MIN(price)</p>
    <p>Intermediate table</p>
    <p>fi(route1) * MIN(price)1</p>
    <p>fi(route2) * MIN(price)2</p>
    <p>fi(route3) * MIN(price)3</p>
    <p>?</p>
    <p>function shares: f1, f2 FSS</p>
    <p>SELECT MIN(price) GROUP BY route</p>
  </div>
  <div class="page">
    <p>MIN Query for Equality-Only</p>
    <p>route price</p>
    <p>SELECT MIN(price) where route = 5 f(x) = 1 if x = 5 and 0 otherwise</p>
    <p>route MIN(price)</p>
    <p>Intermediate table</p>
    <p>fi(route1) * MIN(price)1</p>
    <p>fi(route2) * MIN(price)2</p>
    <p>fi(route3) * MIN(price)3</p>
    <p>?</p>
    <p>+ +</p>
    <p>function shares: f1, f2 FSS</p>
    <p>SELECT MIN(price) GROUP BY route</p>
  </div>
  <div class="page">
    <p>MIN Query for Intervals</p>
    <p>SELECT MIN(price) where 2  route  6</p>
  </div>
  <div class="page">
    <p>MIN Query for Intervals</p>
    <p>SELECT MIN(price) where 2  route  6? ?</p>
  </div>
  <div class="page">
    <p>MIN Query for Intervals 1. Each provider computes a sorted table T:</p>
    <p>SELECT MIN(price) where 2  route  6? ?</p>
    <p>SELECT route, price ORDER BY route</p>
  </div>
  <div class="page">
    <p>MIN Query for Intervals 1. Each provider computes a sorted table T:</p>
    <p>SELECT MIN(price) where 2  route  6? ?</p>
    <p>SELECT route, price ORDER BY route</p>
    <p>T</p>
    <p>Size-2 Intervals</p>
    <p>Size-4 Intervals</p>
    <p>Size-8 Intervals</p>
  </div>
  <div class="page">
    <p>MIN Query for Intervals 3. Round 1: Find minimum and maximum indices where 3  route  6.</p>
    <p>T</p>
    <p>A[3..6]</p>
    <p>(2 point funcs)</p>
    <p>(log n point funcs)</p>
    <p>Size-2 Intervals</p>
    <p>Size-4 Intervals</p>
    <p>Size-8 Intervals</p>
  </div>
  <div class="page">
    <p>Other algorithms</p>
    <p>Algorithms Supported queries</p>
    <p>FSS additive aggregates for all conditions (COUNT, SUM, AVG, STDEV, HISTOGRAM)</p>
    <p>FSS + intermediate table MAX, MIN, TOPK for equality-only</p>
    <p>FSS + Fenwick tree-like data structure MAX, MIN, TOPK for intervals</p>
    <p>FSS + private binary search MAX, MIN for disjoint ORs</p>
    <p>FSS + private binary search + sampling TOPK for disjoint ORs</p>
  </div>
  <div class="page">
    <p>Other algorithms</p>
    <p>Algorithms Supported queries</p>
    <p>FSS additive aggregates for all conditions (COUNT, SUM, AVG, STDEV, HISTOGRAM)</p>
    <p>FSS + intermediate table MAX, MIN, TOPK for equality-only</p>
    <p>FSS + Fenwick tree-like data structure MAX, MIN, TOPK for intervals</p>
    <p>FSS + private binary search MAX, MIN for disjoint ORs</p>
    <p>FSS + private binary search + sampling TOPK for disjoint ORs</p>
  </div>
  <div class="page">
    <p>Other algorithms</p>
    <p>Algorithms Supported queries</p>
    <p>FSS additive aggregates for all conditions (COUNT, SUM, AVG, STDEV, HISTOGRAM)</p>
    <p>FSS + intermediate table MAX, MIN, TOPK for equality-only</p>
    <p>FSS + Fenwick tree-like data structure MAX, MIN, TOPK for intervals</p>
    <p>FSS + private binary search MAX, MIN for disjoint ORs</p>
    <p>FSS + private binary search + sampling TOPK for disjoint ORs</p>
  </div>
  <div class="page">
    <p>Complexity of Splinter algorithms</p>
    <p>Aggregate Condition Computation Round Trips Bandwidth</p>
    <p>Sum-based any O(n) 1 O(1)</p>
    <p>MAX/MIN MAX/MIN MAX/MIN</p>
    <p>equality-only intervals</p>
    <p>disjoint ORs</p>
    <p>O(n) O(n log n) O(n log n)</p>
    <p>O(log n)</p>
    <p>O(1) O(log n) O(log n)</p>
    <p>TOPK TOPK TOPK</p>
    <p>equality-only intervals</p>
    <p>disjoint ORs</p>
    <p>O(n) O(n log n) O(n log n)</p>
    <p>O(log n)</p>
    <p>O(1) O(log n) O(log n)</p>
  </div>
  <div class="page">
    <p>Complexity of Splinter algorithms</p>
    <p>Aggregate Condition Computation Round Trips Bandwidth</p>
    <p>Sum-based any O(n) 1 O(1)</p>
    <p>MAX/MIN MAX/MIN MAX/MIN</p>
    <p>equality-only intervals</p>
    <p>disjoint ORs</p>
    <p>O(n) O(n log n) O(n log n)</p>
    <p>O(log n)</p>
    <p>O(1) O(log n) O(log n)</p>
    <p>TOPK TOPK TOPK</p>
    <p>equality-only intervals</p>
    <p>disjoint ORs</p>
    <p>O(n) O(n log n) O(n log n)</p>
    <p>O(log n)</p>
    <p>O(1) O(log n) O(log n)</p>
    <p>Computation time is O(n log n) for all queries and communication costs much</p>
    <p>smaller than the database</p>
  </div>
  <div class="page">
    <p>Implementation  Optimized FSS C++ library: 2000 LoC  General Query Library: 1500 LoC  Applications</p>
    <p>- Yelp clone, Flight search, Map routing</p>
    <p>https://github.com/frankw2/libfss</p>
  </div>
  <div class="page">
    <p>Case Studies Application # of rows Size (MB)</p>
    <p>Yelp clone 225,000 23</p>
    <p>Flight search 6,100,000 225</p>
    <p>NYC Map Routing</p>
    <p>Providers: 64-core x1 Amazon EC2 instance Client: 2 GHz Intel Core i7 machine Network latency: 14 ms</p>
  </div>
  <div class="page">
    <p>Case Studies</p>
    <p>All case studies based on real datasets</p>
    <p>Application # of rows Size (MB)</p>
    <p>Yelp clone 225,000 23</p>
    <p>Flight search 6,100,000 225</p>
    <p>NYC Map Routing</p>
    <p>Providers: 64-core x1 Amazon EC2 instance Client: 2 GHz Intel Core i7 machine Network latency: 14 ms</p>
  </div>
  <div class="page">
    <p>Case Study Queries</p>
    <p>Application Query</p>
  </div>
  <div class="page">
    <p>Case Study Queries</p>
    <p>Application Query</p>
    <p>Yelp clone</p>
    <p>SELECT COUNT(*) WHERE category=Thai  SELECT TOP 10 restaurant WHERE category=&quot;Mexican&quot; AND hex2mi in (1, 2, 3) ORDER BY stars</p>
    <p>SELECT restaurant, MAX(stars) WHERE category in (Mexican, Chinese, Indian, Greek, Thai, Japanese) GROUP BY category</p>
  </div>
  <div class="page">
    <p>Case Study Queries</p>
    <p>Application Query</p>
    <p>Yelp clone</p>
    <p>SELECT COUNT(*) WHERE category=Thai  SELECT TOP 10 restaurant WHERE category=&quot;Mexican&quot; AND hex2mi in (1, 2, 3) ORDER BY stars</p>
    <p>SELECT restaurant, MAX(stars) WHERE category in (Mexican, Chinese, Indian, Greek, Thai, Japanese) GROUP BY category</p>
    <p>Flight search  SELECT AVG(price) WHERE month=3 AND route = 5  SELECT TOP 10 flight_no WHERE route = 5 ORDER BY price</p>
  </div>
  <div class="page">
    <p>Case Study Queries</p>
    <p>Application Query</p>
    <p>Yelp clone</p>
    <p>SELECT COUNT(*) WHERE category=Thai  SELECT TOP 10 restaurant WHERE category=&quot;Mexican&quot; AND hex2mi in (1, 2, 3) ORDER BY stars</p>
    <p>SELECT restaurant, MAX(stars) WHERE category in (Mexican, Chinese, Indian, Greek, Thai, Japanese) GROUP BY category</p>
    <p>Flight search  SELECT AVG(price) WHERE month=3 AND route = 5  SELECT TOP 10 flight_no WHERE route = 5 ORDER BY price</p>
    <p>Map routing  SELECT grid_nodes WHERE grid_no = 5  SELECT path WHERE src = 4 and dst = 10</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Query Dataset Providers Round Trips Communication Response</p>
    <p>Time Count of Thai Restaurants Yelp</p>
    <p>Top 10 Mexican restaurants Yelp</p>
    <p>Best rated restaurant in category subset Yelp</p>
    <p>AVG monthly price Flights 2 3 1 9 KB</p>
    <p>Top 10 cheapest flights Flights</p>
    <p>NYC Routing Maps 2 3 2 45 KB 725 KB</p>
  </div>
  <div class="page">
    <p>Splinter has lower response times and fewer rounds trips compared to Olumofin et al.</p>
    <p>System Round Trips Response Times</p>
    <p>Olumofin et al. log n (all queries) 2-18 seconds</p>
    <p>Splinter</p>
    <p>constant (most queries)</p>
    <p>log n (select queries)</p>
    <p>Other related work:  PIR systems (Readon et al., Popcorn)  Garbled circuits (Wu et al., Embark)</p>
  </div>
  <div class="page">
    <p>Conclusion  Splinter is the first practical system that protects</p>
    <p>users queries on real datasets  We develop new protocols to execute complex</p>
    <p>queries over FSS and have fewer round trips and lower response times than prior systems</p>
  </div>
</Presentation>
