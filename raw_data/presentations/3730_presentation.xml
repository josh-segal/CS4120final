<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>UNDERSTANDING SECURITY MISTAKES DEVELOPERS MAKE</p>
    <p>Daniel Votipka, Kelsey Fulton, James Parker, Matthew Hou, Michelle Mazurek, and Mike Hicks</p>
    <p>Qualitative Analysis From Build It, Break It, Fix It</p>
    <p>University of Maryland, College Park</p>
  </div>
  <div class="page">
    <p>SOLVED VULNERABILITIES ARE STILL A VERY REAL PROBLEM</p>
    <p>Here were looking at the vulnerabilities type change by year based on cwe reporting from NIST. Note that buffer errors still remains in a top 2 spot. information leak/ disclosure, improper access control, and cryptography issues have barely or not at all decreased, and yet theyre supposed to be relatively solved issues given current libraries and APIs. *Note Im using the word solved here very loosely. So if we have solutions to this problem, why are we still seeing these vulnerabilities in the real world? We can see some of these play out in recent examples.</p>
  </div>
  <div class="page">
    <p>Why do developers continue to make</p>
    <p>stupid and lazy mistakes?</p>
    <p>So some experts may ask the question:</p>
  </div>
  <div class="page">
    <p>Why do developers continue to make</p>
    <p>stupid and lazy mistakes?</p>
    <p>Theres a flaw in this thinking though. We cannot expect developers to know how to do everything, and we cannot assume the all the fault can be placed on them. But we need to avoid thinking this way. Of the developers as the enemy. Instead we should ask</p>
  </div>
  <div class="page">
    <p>Why do developers continue to make</p>
    <p>stupid and lazy mistakes?</p>
    <p>How can we make secure programming easier?</p>
  </div>
  <div class="page">
    <p>POSSIBLE SOLUTIONS</p>
    <p>More/Better Education</p>
    <p>Better APIs</p>
    <p>Better documentation</p>
    <p>Automation</p>
    <p>Etc.</p>
    <p>How can we improve the effectiveness of these solutions?</p>
    <p>So we have some classic existing solutions such as: Obviously, these arent working as well as wed hoped. So we may be asking ourselves how can we improve the effectiveness of these solutions?</p>
  </div>
  <div class="page">
    <p>IN ORDER TO IMPROVE THESE SOLUTIONS, WE NEED TO UNDERSTAND THE TYPES, CAUSES, AND PERVASIVENESS OF VULNERABILITIES.</p>
  </div>
  <div class="page">
    <p>HOW TO MEASURE?</p>
    <p>Ecological validity Control over Conditions</p>
    <p>Field Measurements</p>
    <p>Lab Studies</p>
    <p>Build It, Break It, Fix It</p>
    <p>How can we measure this. Well, when deciding a method for this type of study, youre working along a spectrum with ecological validity at one end and control over conditions at the other.</p>
  </div>
  <div class="page">
    <p>Build it Break it Fix it</p>
    <p>BUILD IT, BREAK IT, FIX IT</p>
    <p>Ruef et al. , CCS 2016</p>
    <p>Build to spec</p>
    <p>Then break other teams</p>
    <p>Incentivize:</p>
    <p>Functionality</p>
    <p>Performance</p>
    <p>Security</p>
    <p>Build Break Fix</p>
    <p>contest. We take all of these approaches and balance the tradeoffs.</p>
    <p>Build it  two weeks, build to spec, any language, any design choices Break it  given source, try to find correctness and security bugs in any other teams code</p>
  </div>
  <div class="page">
    <p>RESEARCH QUESTIONS</p>
    <p>What types of vulnerabilities do developers introduce?</p>
    <p>How severe are the vulnerabilities? If exploited, what is the effect on the system?</p>
    <p>How exploitable are the vulnerabilities? What level of insight is required and how much work is necessary?</p>
  </div>
  <div class="page">
    <p>How severe are the vulnerabilities? If exploited, what is the effect on the system?</p>
    <p>How exploitable are the vulnerabilities? What level of insight is required and how much work is necessary?</p>
    <p>What types of vulnerabilities do developers introduce?</p>
    <p>RESEARCH QUESTIONS</p>
  </div>
  <div class="page">
    <p>ANALYSIS APPROACH</p>
    <p>Examine projects and associated exploits in detail</p>
    <p>Iterative open coding</p>
    <p>Two independent researchers with high reliability</p>
    <p>Both qualitative and quantitative analysis performed</p>
    <p>Vulnerabilities are both the breaker submitted and researcher identified. We used a rigorous technique that is considered best practice that was developed in the social sciences.</p>
  </div>
  <div class="page">
    <p>RESULTS</p>
  </div>
  <div class="page">
    <p>Mistake</p>
    <p>Vulnerability classes</p>
    <p>No implementation Misunderstanding</p>
    <p>Intuitive Bad Choice Conceptual ErrorUnintuitive</p>
    <p>So from our coding process, we developed these classes. Im going to explain what each of these mean later.</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>No implementation</p>
    <p>The no implementation class can be broken into three subclasses</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>No implementation</p>
    <p>Intuitive</p>
    <p>Missed something Intuitive  No encryption  No access control</p>
    <p>The first one is all intuitive where a team missed something that would be considered to be completely intuitive and necessary to implement. Examples of this are.</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>No implementation</p>
    <p>Intuitive Unintuitive</p>
    <p>Missed something Intuitive  No encryption  No access control</p>
    <p>Missed something Unintuitive  No MAC  Side-channel leakage  No replay prevention</p>
    <p>The last subclass is unintuitive where a team missed implementing something that may not necessarily be obvious or intuitive to implement such as no MAC (integrity checks), checking for side-channel leakage, or making sure to prevent a replay attack</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>Misunderstanding</p>
    <p>The next class Ill talk about is the misunderstanding class. It can be broken into two subclasses.</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>Misunderstanding</p>
    <p>Bad Choice</p>
    <p>Made a Bad Choice  Weak algorithms  Homemade</p>
    <p>encryption  strcpy</p>
    <p>The first subclass is defined by teams that made a bad choice in their security implementation and it resulted in a vulnerability. One code in this subclass is choosing weak algorithms.</p>
    <p>Another is using homemade encryption. An example of a team using homemade encryption is one team xord key length chunks of the text with the user provided key to make the final ciphertext. Therefore, an attacker could simply extract two key length chunks and xor them to get the key.</p>
    <p>Another category is using functions like strcpy. One team used strcpy and missed a single bounds check. Rather than classifying this as a mistake, we chose bad choice because they could have used the bounded copy in the first place. A final code within this category is having a weak access control design.</p>
    <p>Weak access control design example == The default delegators permissions are checked at use-time, not creation time.</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>Misunderstanding</p>
    <p>Bad Choice Conceptual Error</p>
    <p>Made a Conceptual Error  Fixed value</p>
    <p>The second subclass is defined by teams that made an error in the conceptual way they were thinking. One code within this subclass is using a fixed value.</p>
  </div>
  <div class="page">
    <p>An example of this code can be seen with this team using a fixed IV value. Turns out that this is</p>
    <p>Actually a stack overflow answer</p>
  </div>
  <div class="page">
    <p>Vulnerability classes</p>
    <p>Misunderstanding</p>
    <p>Bad Choice Conceptual Error</p>
    <p>Made a Conceptual Error  Fixed value  Lacking sufficient</p>
    <p>randomness  Disabling protections</p>
    <p>in library</p>
    <p>Other codes within this subclass are lacking sufficient randomness, using security on only a subset of the data instead of all of it, and intentionally disabling protections provided by a library. An example of this last code can be seen in.</p>
  </div>
  <div class="page">
    <p>This team who used sqlcipher which has full page MACing built in. This team decided to explicitly turn the use of a MAC off within the library for a non-obvious reason.</p>
  </div>
  <div class="page">
    <p>Mistake</p>
    <p>Vulnerability classes</p>
    <p>Made a Mistake  Control flow mistake  Skipped algorithmic step</p>
    <p>The final class is full of codes where teams made coding mistakes. Codes within this class are things like insufficient error checking, control flow mistakes, and teams that skipped an algorithmic step. An example of this is this team that skip checked to see if the nonce is the same as a previous nonce on line 10, but they fail to actually save any of the previous nonces, so this always returns true. Meaning they intended to save the nonce to check it but accidentally skipped that step.</p>
  </div>
  <div class="page">
    <p>MistakeNo implementation Misunderstanding</p>
    <p>Intuitive Bad Choice</p>
    <p>PREVALENCE</p>
    <p>Conceptual ErrorUnintuitive</p>
    <p>Least common</p>
    <p>Best practices and code review helped</p>
    <p>So from our coding process, we developed these classes. Im going to explain what each of these mean later.</p>
  </div>
  <div class="page">
    <p>No implementation Misunderstanding</p>
    <p>Intuitive Bad Choice Conceptual ErrorUnintuitive</p>
    <p>MistakeNo implementation Misunderstanding</p>
    <p>Intuitive Bad Choice</p>
    <p>PREVALENCE</p>
    <p>Conceptual ErrorUnintuitive</p>
    <p>Most knew they needed security and picked the right tools, but didnt know all the security requirements and how to implement them all correctly.</p>
  </div>
  <div class="page">
    <p>RECOMMENDATIONS</p>
    <p>Simplify API design</p>
    <p>Build in security primitives and focus on common use-cases</p>
    <p>Indicate security impact of non-default use in API Documentation</p>
    <p>Explain the negative effects of turning off certain things</p>
    <p>Vulnerability Analysis Tools</p>
    <p>More emphasis on design-level conceptual issues 27</p>
    <p>It may be useful to build in basic security primitives to API design. Can we build in the use of a MAC or nonce? Could we possibly add basic primitives like secure messaging or secure logs?</p>
    <p>Let users know that if they choose to turn off a certain security primitive that it may cause major security vulnerabilities. Make the error messages more clear so we dont have developers googling them and then copying and pasting from Stackoverflow</p>
    <p>Its easy to blame security education in the failure of developers to use security primitives correctly, but as we saw in this competition that definitely isnt fair. Many of the teams in our data had completed a security competition and yet they still failed to implement some things correctly. It could be that the topics presented were not emphasized and driven home in a meaningful way. The failure to get this education portion right, a failure of BIBIFI itself, serves as a valuable lesson.</p>
  </div>
  <div class="page">
    <p>SUMMARY</p>
    <p>Developers struggle with security concepts</p>
    <p>Mostly knew they needed security and picked reasonable tools</p>
    <p>Didnt know all necessary security mitigations (Unintuitive) or all the implementation details (Conceptual Error)</p>
    <p>Mistakes happen, but can be reduced through code review and best practices</p>
    <p>Improve API design, documentation, and automation to handle conceptual nuances</p>
    <p>It may be useful to build in basic security primitives to API design. Can we build in the use of a MAC or nonce? Could we possibly add basic primitives like secure messaging or secure logs?</p>
    <p>Let users know that if they choose to turn off a certain security primitive that it may cause major security vulnerabilities. Make the error messages more clear so we dont have developers googling them and then copying and pasting from Stackoverflow</p>
    <p>Its easy to blame security education in the failure of developers to use security primitives correctly, but as we saw in this competition that definitely isnt fair. Many of the teams in our data had completed a security competition and yet they still failed to implement some things correctly. It could be that the topics presented were not emphasized and driven home in a meaningful way. The failure to get this education portion right, a failure of BIBIFI itself, serves as a valuable lesson.</p>
  </div>
  <div class="page">
    <p>It may be useful to build in basic security primitives to API design. Can we build in the use of a MAC or nonce? Could we possibly add basic primitives like secure messaging or secure logs?</p>
    <p>Let users know that if they choose to turn off a certain security primitive that it may cause major security vulnerabilities. Make the error messages more clear so we dont have developers googling them and then copying and pasting from Stackoverflow</p>
    <p>Its easy to blame security education in the failure of developers to use security primitives correctly, but as we saw in this competition that definitely isnt fair. Many of the teams in our data had completed a security competition and yet they still failed to implement some things correctly. It could be that the topics presented were not emphasized and driven home in a meaningful way. The failure to get this education portion right, a failure of BIBIFI itself, serves as a valuable lesson.</p>
  </div>
  <div class="page">
    <p>SUMMARY</p>
    <p>Developers struggle with security concepts</p>
    <p>Mostly knew they needed security and picked reasonable tools</p>
    <p>Didnt know all necessary security mitigations (Unintuitive) or all the implementation details (Conceptual Error)</p>
    <p>Mistakes happen, but can be reduced through code review and best practices</p>
    <p>Improve API design, documentation, and automation to handle conceptual nuances</p>
    <p>Questions dvotipka@cs.umd.edu</p>
    <p>sec-professionals.cs.umd.edu</p>
    <p>It may be useful to build in basic security primitives to API design. Can we build in the use of a MAC or nonce? Could we possibly add basic primitives like secure messaging or secure logs?</p>
    <p>Let users know that if they choose to turn off a certain security primitive that it may cause major security vulnerabilities. Make the error messages more clear so we dont have developers googling them and then copying and pasting from Stackoverflow</p>
    <p>Its easy to blame security education in the failure of developers to use security primitives correctly, but as we saw in this competition that definitely isnt fair. Many of the teams in our data had completed a security competition and yet they still failed to implement some things correctly. It could be that the topics presented were not emphasized and driven home in a meaningful way. The failure to get this education portion right, a failure of BIBIFI itself, serves as a valuable lesson.</p>
  </div>
</Presentation>
