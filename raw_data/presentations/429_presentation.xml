<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A t bl Vi t l M hiAccountable Virtual Machines</p>
    <p>Andreas Haeberlen University of Pennsylvania</p>
    <p>Paarijaat Aditya Rodrigo Rodrigues Peter Druschel Max Planck Institute for Software Systems (MPI-SWS)</p>
    <p>Max Planck Institute for Software Systems</p>
    <p>2010 Andreas Haeberlen 1</p>
    <p>OSDI (October 4, 2010)</p>
  </div>
  <div class="page">
    <p>S i M lti lScenario: Multiplayer game</p>
    <p>I'd like Charlie</p>
    <p>I d like to play a game</p>
    <p>Network</p>
    <p>Alice Bob</p>
    <p>Alice decides to play a game of Counterstrike with Bob and Charlie</p>
    <p>2010 Andreas Haeberlen</p>
    <p>with Bob and Charlie</p>
  </div>
  <div class="page">
    <p>Wh t AliWhat Alice sees</p>
    <p>Movie</p>
    <p>2010 Andreas Haeberlen OSDI (October 4, 2010) 3</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>C ld B b b h ti ?Could Bob be cheating?</p>
    <p>Charlie Ammo</p>
    <p>Network</p>
    <p>I C ik i i i l l</p>
    <p>Alice Bob</p>
    <p>In Counterstrike, ammunition is local state  Bob can manipulate counter and prevent it from decrementing</p>
    <p>S h h t ( d th ) d i t d b i d</p>
    <p>2010 Andreas Haeberlen</p>
    <p>Such cheats (and many others) do exist, and are being used</p>
  </div>
  <div class="page">
    <p>Thi t lk i t (j t) b t h ti !This talk Software</p>
    <p>is not (just) about cheating! Software</p>
    <p>NetworkAlice Bob</p>
    <p>Cheating is a serious problem in itself  Multi-billion-dollar industry</p>
    <p>But we address a more general problem:g p  Alice relies on software that runs on a third-party machine  Examples: Competitive system (auction), federated system...</p>
    <p>2010 Andreas Haeberlen</p>
    <p>How does Alice know if the software running as intended?</p>
  </div>
  <div class="page">
    <p>G l A t bilitGoal: Accountability Software</p>
    <p>We want Alice to be able to</p>
    <p>NetworkAlice Bob</p>
    <p>We want Alice to be able to  Detect when the remote machine is faulty  Obtain evidence of the fault that would convince a third party Obtain evidence of the fault that would convince a third party</p>
    <p>Challenges:  Alice and Bob may not trust each other</p>
    <p>Possibility of intentional misbehavior (example: cheating)</p>
    <p>Neither Alice nor Bob may understand how the software works</p>
    <p>2010 Andreas Haeberlen</p>
    <p>Neither Alice nor Bob may understand how the software works  Binary only - no specification of the correct behavior</p>
  </div>
  <div class="page">
    <p>O tliOutline</p>
    <p>P bl D i f l hi Problem: Detecting faults on remote machines  Example: Cheating in multiplayer games</p>
    <p>Solution: Accountable Virtual Machines NEXT</p>
    <p>Evaluation  Using earlier example (cheating in Counterstrike)</p>
    <p>Summary</p>
    <p>2010 Andreas Haeberlen 7</p>
    <p>OSDI (October 4, 2010)</p>
  </div>
  <div class="page">
    <p>O i Accountable</p>
    <p>Virtual Machine LogOverview Virtual</p>
    <p>hi</p>
    <p>AVM Virtual Machine</p>
    <p>(AVM)</p>
    <p>Accountable</p>
    <p>Log</p>
    <p>machine image</p>
    <p>AVMM</p>
    <p>Accountable Virtual Machine Monitor (AVMM)</p>
    <p>Network</p>
    <p>Alice Bob</p>
    <p>Bob runs Alice's software image in an AVM</p>
    <p>Alice Bob</p>
    <p>AVM maintains a log of network in-/outputs</p>
    <p>Alice can check this log with a reference image  AVM correct: Reference image can produce same network</p>
    <p>outputs when started in same state and given same inputs  AVM faulty: Otherwise</p>
    <p>2010 Andreas Haeberlen</p>
    <p>AVM faulty: Otherwise</p>
  </div>
  <div class="page">
    <p>T id t l iTamper-evident logging 474: SEND(Alice Firing)AVM</p>
    <p>Firing</p>
    <p>AVMM</p>
    <p>Message log is tamper-evident [SOSP'07]</p>
    <p>... Moving right</p>
    <p>Message log is tamper evident [SOSP 07]  Log is structured as a hash chain  Messages contain signed authenticatorsg g</p>
    <p>Result: Alice can either...  ... detect that the log has been tampered with, or</p>
    <p>2010 Andreas Haeberlen</p>
    <p>... detect that the log has been tampered with, or  ... get a complete log with all the observable messages</p>
  </div>
  <div class="page">
    <p>E ti l iExecution logging 474: SEND(Alice Firing)AVM 474: SEND(Alice Firing)474: SEND(Alice, Firing)</p>
    <p>AVM 474: SEND(Alice, Firing) 473: Mouse button clicked 472: SEND(Charlie, Got ammo) 471 RECV(Ali G di k)472: RECV(Alice, Got medipack)</p>
    <p>How does Alice know whether the log matches</p>
    <p>...</p>
    <p>How does Alice know whether the log matches a correct execution of her software image?</p>
    <p>Idea: AVMM can specify an execution Idea: AVMM can specify an execution  AVMM additionally logs all nondeterministic inputs  AVM correct: Can replay inputs to get execution</p>
    <p>2010 Andreas Haeberlen</p>
    <p>o a p ay pu o g u o  AVM faulty: Replay inevitably (!) fails</p>
  </div>
  <div class="page">
    <p>A diti d lAuditing and replay 372: SEND(Alice Firing) 373: SEND(Alice, Firing)</p>
    <p>d l f</p>
    <p>M</p>
    <p>... 366: Mouse moved left</p>
    <p>Modification</p>
    <p>AVMM</p>
    <p>A V M</p>
    <p>AVMM</p>
    <p>A V M Modification</p>
    <p>Evidence</p>
    <p>Network</p>
    <p>AVMMAVMM</p>
    <p>2010 Andreas Haeberlen 11</p>
    <p>OSDI (October 4, 2010)</p>
    <p>Alice Bob</p>
  </div>
  <div class="page">
    <p>AVM tiAVM properties  Strong accountability Strong accountability</p>
    <p>Detects faults  Produces evidence</p>
    <p>If it runs i VM it</p>
    <p>Produces evidence  No false positives</p>
    <p>W k f bit difi d bi i</p>
    <p>in a VM, it will work</p>
    <p>Works for arbitrary, unmodified binaries  Nondeterministic events can be captured by AVM Monitor</p>
    <p>Alice does not have to trust Bob, the AVMM, or any software that runs on Bob's machineor any software that runs on Bob s machine  If Bob tampers with the log, Alice can detect this  If Bob's AVM is faulty, ANY log Bob could produce would</p>
    <p>2010 Andreas Haeberlen</p>
    <p>inevitably cause a divergence during replay</p>
  </div>
  <div class="page">
    <p>O tliOutline</p>
    <p>Problem: Detecting faults on remote machines  Example: Cheating in multiplayer games</p>
    <p>Solution: Accountable Virtual Machines Solution: Accountable Virtual Machines</p>
    <p>Evaluation NEXT Evaluation  Using earlier example (cheating in Counterstrike)</p>
    <p>Summary</p>
    <p>2010 Andreas Haeberlen 13</p>
    <p>OSDI (October 4, 2010)</p>
  </div>
  <div class="page">
    <p>M th d lMethodology</p>
    <p>We built a prototype AVMM  Based on logging/replay engine in VMware Workstation 6.5.1  Extended with tamper-evident logging and auditing</p>
    <p>E l ti Ch t d t ti i Evaluation: Cheat detection in games  Setup models competition / LAN party</p>
    <p>Three players playing Counterstrike 1 6 Three players playing Counterstrike 1.6  Nehalem machines (i7 860)  Windows XP SP3 Windows XP SP3</p>
    <p>2010 Andreas Haeberlen 14</p>
    <p>OSDI (October 4, 2010)</p>
  </div>
  <div class="page">
    <p>E l ti t iEvaluation topics</p>
    <p>Effectiveness against real cheats  OverheadOverhead</p>
    <p>Disk space (for the log)  Time (auditing, replay)  Network bandwidth (for authenticators)  Computation (signatures)</p>
    <p>Latency (signatures)</p>
    <p>Please refer to the paper for</p>
    <p>dditi l lt ! Latency (signatures)</p>
    <p>Impact on game performance additional results!</p>
    <p>Online auditing  Spot checking tradeoffs</p>
    <p>2010 Andreas Haeberlen</p>
    <p>p g  Using a different application: MySQL on Linux</p>
  </div>
  <div class="page">
    <p>AVM d t t l h tAVMs can detect real cheats Event timing (for replay)</p>
    <p>BC=53 BC 52</p>
    <p>EIP=0xb382 EIP 0 3633</p>
    <p>Event timing (for replay)</p>
    <p>V MBC=59 BC 54</p>
    <p>EIP=0x861e EIP 0 2d1697 SEND(Ali Fi @(2 7))</p>
    <p>BC=52 BC=47 BC=44 BC=37</p>
    <p>EIP=0x3633 EIP=0xc490 EIP=0x6771 EIP 0x570f</p>
    <p>AVMM</p>
    <p>A VBC=54</p>
    <p>BC=49 BC=44 BC 37</p>
    <p>EIP=0x2d16 EIP=0xc43e EIP=0x6771 EIP 0x570f</p>
    <p>BC=37 ...</p>
    <p>Bob's log</p>
    <p>EIP=0x570f ...</p>
    <p>BC=37 ...</p>
    <p>EIP=0x570f ...</p>
    <p>If the cheat needs to be installed in the AVM</p>
    <p>Bob s log</p>
    <p>to be effective, AVM can trivially detect it  Reason: Event timing + control flow change</p>
    <p>2010 Andreas Haeberlen</p>
    <p>Examined real 26 cheats from the Internet; all detectable</p>
  </div>
  <div class="page">
    <p>AVM d t t l h t 99: RECV(Alice Hit) BC EIP</p>
    <p>AVMs can detect real cheats</p>
    <p>BC= BC= BC= BC=</p>
    <p>EIP= EIP= EIP= EIP= V</p>
    <p>M</p>
    <p>? ?</p>
    <p>? 96: RECV(Alice, Missed) 95: SEND(Alice, Fire@(3,9)) 94: Mouse button clicked 93: Interrupt received</p>
    <p>BC=53 BC=52 BC=47 BC=44</p>
    <p>EIP=0xb382 EIP=0x3633 EIP=0xc490 EIP=0x6771</p>
    <p>BC=</p>
    <p>BC=</p>
    <p>EIP=</p>
    <p>EIP= AVMM</p>
    <p>A V?</p>
    <p>? ?</p>
    <p>? ?</p>
    <p>? ? 93: Interrupt received 92: RECV(Alice, Jumping) ...</p>
    <p>BC=44 BC=37 ...</p>
    <p>EIP=0x6771 EIP=0x570f ...</p>
    <p>BC= ...</p>
    <p>EIP= ...</p>
    <p>? ?</p>
    <p>? ? ?</p>
    <p>Couldn't cheaters adapt their cheats? There are three types of cheats: There are three types of cheats:</p>
    <p>2010 Andreas Haeberlen</p>
  </div>
  <div class="page">
    <p>I t f tImpact on frame rate 200</p>
    <p>Different machines with different players</p>
    <p>e ra</p>
    <p>te 158fps-13%</p>
    <p>with different players -11%</p>
    <p>ra ge</p>
    <p>f ra</p>
    <p>m e</p>
    <p>No fp p 50</p>
    <p>A ve</p>
    <p>r No fps cap Window mode</p>
    <p>hardware VMware</p>
    <p>(no logging) VMware (logging)</p>
    <p>AVMM (no crypto)</p>
    <p>AVMM</p>
    <p>Frame rate is ~13% lower than on bare hw  137fps is still a lot! 60--80fps generally recommended</p>
    <p>2010 Andreas Haeberlen</p>
    <p>11% due to logging; additional cost for accountability is small</p>
  </div>
  <div class="page">
    <p>C t f ditiCost of auditing 12 Added by</p>
    <p>M B /m</p>
    <p>in ut</p>
    <p>e) 12</p>
    <p>Added by accountability</p>
    <p>g gr</p>
    <p>ow th</p>
    <p>( M 8</p>
    <p>per minute2.47 MB per minute</p>
    <p>(compressed)</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>lo g 4</p>
    <p>A</p>
    <p>When auditing a player after a one-hour game,  How big is the log we have to download?</p>
    <p>H h ti i d d f l ? 148 MB 1 h</p>
    <p>2010 Andreas Haeberlen</p>
    <p>How much time is needed for replay?</p>
    <p>~ 1 hour</p>
  </div>
  <div class="page">
    <p>O li diti a m</p>
    <p>e</p>
    <p>gg in</p>
    <p>g</p>
    <p>pl ay</p>
    <p>pl ay</p>
    <p>Online auditing 200</p>
    <p>G a</p>
    <p>Lo g</p>
    <p>R ep</p>
    <p>R ep</p>
    <p>e ra</p>
    <p>te</p>
    <p>Alice</p>
    <p>ra ge</p>
    <p>f ra</p>
    <p>m e</p>
    <p>A ve</p>
    <p>r</p>
    <p>Bob Charlie</p>
    <p>One audit per player</p>
    <p>Two audits per player</p>
    <p>Idea: Stream logs to auditors during the game  Result: Detection within seconds after fault occurs</p>
    <p>2010 Andreas Haeberlen</p>
    <p>Replay can utilize unused cores; frame rate penalty is low</p>
  </div>
  <div class="page">
    <p>SSummary</p>
    <p>Accountable Virtual Machines (AVMs) offer strong accountability for unmodified binaries  Useful when relying on software executing on remote</p>
    <p>machines: Federated system, multiplayer games, ... No trusted components required No trusted components required</p>
    <p>AVMs are practical AVMs are practical  Prototype implementation based on VMware Workstation  Evaluation: Cheat detection in Counterstrike Evaluation: Cheat detection in Counterstrike</p>
    <p>Questions?</p>
    <p>2010 Andreas Haeberlen 21</p>
    <p>OSDI (October 4, 2010)</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Th k !Thank you!</p>
    <p>2010 Andreas Haeberlen 22</p>
    <p>OSDI (October 4, 2010)</p>
    <p>Our enthusiastic Counterstrike volunteers</p>
  </div>
</Presentation>
