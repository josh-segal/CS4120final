<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Spartan: A Distributed ArrayProgramming Framework with</p>
    <p>Automatic Tiling Chien-Chin Huang, Qi Chen, Zhaoguo Wang,</p>
    <p>Russell Power, Jorge Ortiz, Jinyang Li, Zhen Xiao</p>
  </div>
  <div class="page">
    <p>Big data problems compute with arrays</p>
    <p>Machine Learning</p>
    <p>Scientific Computing</p>
    <p>Computational Finance</p>
    <p>N-dimensional Arrays}</p>
  </div>
  <div class="page">
    <p>class neural_network(object): def forward_propagation(a1): a2 = np.dot(self.w1, a1) a2 = sigmoid(a2 + self.b1) a3 = np.dot(self.w2, a2) a3 = a3 + self.b2 return a2, a3, softmax(a3)</p>
    <p>class neural_network(object): def forward_propagation(a1): a2 = np.dot(self.w1, a1) a2 = sigmoid(a2 + self.b1) a3 = np.dot(self.w2, a2) a3 = a3 + self.b2 return a2, a3, softmax(a3)</p>
    <p>class neural_network(object): def forward_propagation(a1): a2 = np.dot(self.w1, a1) a2 = sigmoid(a2 + self.b1) a3 = np.dot(self.w2, a2) a3 = a3 + self.b2 return a2, a3, softmax(a3)</p>
    <p>class neural_network(object): def forward_propagation(a1): a2 = np.dot(self.w1, a1) a2 = sigmoid(a2 + self.b1) a3 = np.dot(self.w2, a2) a3 = a3 + self.b2 return a2, a3, softmax(a3)</p>
    <p>Why are array programs loved?  High-level, array-oriented abstractions.</p>
    <p>Variable represent arrays.  Built-ins that directly compute on arrays.</p>
  </div>
  <div class="page">
    <p>Presto (distributed R) PETSc</p>
    <p>MapReduce is designed for key-value collections.</p>
    <p>Existing distributed arrays require manual performance tuning.</p>
    <p>No good way to distribute array programs</p>
  </div>
  <div class="page">
    <p>Machine2</p>
    <p>Machine1</p>
    <p>C1</p>
    <p>C2</p>
    <p>B2</p>
    <p>B1</p>
    <p>A2</p>
    <p>A1</p>
    <p>C1</p>
    <p>C2</p>
    <p>B2B1</p>
    <p>B2</p>
    <p>B1</p>
    <p>A2</p>
    <p>A1</p>
    <p>Tiling: The performance challenge of distributed arrays</p>
    <p>= A BC</p>
    <p>+</p>
    <p>+</p>
    <p>=</p>
    <p>=</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>=</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>Manual tiling is painful  Applications consist of a large number of</p>
    <p>expressions.  Expressions use hundreds of built-in library</p>
    <p>functions.  N-dimensional arrays have many ways of tiling.</p>
  </div>
  <div class="page">
    <p>Spartans goal: automatic tiling</p>
    <p>No manual tiling!!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Spartans Design</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Challenge #1: Looking at multiple expressions at a time</p>
    <p>C = A + B</p>
    <p>E = C + D</p>
    <p>= +</p>
    <p>+=</p>
    <p>A BC</p>
    <p>C DE</p>
    <p>How to tile A, B, C, E? 9</p>
  </div>
  <div class="page">
    <p>#1. Expression tree captures multiple expressions</p>
    <p>Lazy evaluation captures expressions to build a dependency graph.</p>
    <p>C = A + B E = C + D</p>
    <p>new array (A)</p>
    <p>new array (B)</p>
    <p>+ (C)</p>
    <p>dot (D)</p>
    <p>+ (E)</p>
  </div>
  <div class="page">
    <p>Challenge #2: Understanding array access pattern of different functions</p>
    <p>Numpy supports hundreds of array APIs.</p>
    <p>11</p>
  </div>
  <div class="page">
    <p>#2. High-level operators capture access patterns</p>
    <p>add, multiply, divide, log</p>
    <p>min, max, sum, mean</p>
    <p>dot, diagonal, ravel</p>
    <p>filtering</p>
    <p>cumsum, cumprod *</p>
    <p>*Spartan provides 70+ builtins</p>
    <p>Map</p>
    <p>Fold</p>
    <p>Join_Update</p>
    <p>Filter</p>
    <p>Scan</p>
  </div>
  <div class="page">
    <p>A1</p>
    <p>B1</p>
    <p>C1 A2</p>
    <p>B2</p>
    <p>C2</p>
    <p>High-level operators: map</p>
    <p>C = map(fmap, A, B)</p>
    <p>C1= + (A1, B1)</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>E.g. used to implement addition (fmap=+)</p>
    <p>C2= + (A2, B2)</p>
    <p>fmap = + 13</p>
  </div>
  <div class="page">
    <p>fjoin(A2, B2) { U2 = dot(A2,B2) C.update(U2) }</p>
    <p>fjoin(A1, B1) { U1 = dot(A1,B1) C.update(U1) }</p>
    <p>E.g. used to implement array multiplication (fjoin= , faccum=+, axisA=column, axisB=row)</p>
    <p>A2</p>
    <p>B2</p>
    <p>A1</p>
    <p>B1</p>
    <p>High-level operators: join_update  C = join_update(fjoin, faccum, A, axisA, B, axisB)</p>
    <p>A</p>
    <p>B U1</p>
    <p>C</p>
    <p>U2C= +(U1, U2)</p>
    <p>E.g. used to implement array multiplication (fjoin= , faccum=+, axisA=column, axisB=row)</p>
  </div>
  <div class="page">
    <p>Expression graph is made up of highlevel operators</p>
    <p>C = A + B E = C + D</p>
    <p>new array (A)</p>
    <p>new array (B)</p>
    <p>+ (C)</p>
    <p>dot (D)</p>
    <p>+ (E)</p>
    <p>new array (A)</p>
    <p>new array (B)</p>
    <p>map (C)</p>
    <p>join_ update</p>
    <p>(D) map (E)</p>
    <p>map (C)</p>
    <p>map (E)</p>
    <p>join_ update</p>
    <p>(D)</p>
    <p>+ (C)</p>
    <p>+ (E)</p>
    <p>dot (D)</p>
  </div>
  <div class="page">
    <p>Challenge #3: How to tile an expression graph?</p>
    <p>Observation: High-level operators have known tiling costs.</p>
    <p>Solution: Transform the expression graph into a tiling graph to explicitly capture tilings communication cost.</p>
  </div>
  <div class="page">
    <p>new array (A)</p>
    <p>new array (B)</p>
    <p>map (C)</p>
    <p>#3. Transform expression graph to tiling graph</p>
    <p>C = A + B</p>
    <p>row column row column</p>
    <p>columnrow</p>
  </div>
  <div class="page">
    <p>Greedily search for good tiling</p>
    <p>Finding best tiling is NP-Complete (proof in paper)  We greedily search by choosing tiling for the most</p>
    <p>connected operator first</p>
    <p>A</p>
    <p>cost = sizeof (D)cost = 0</p>
    <p>B</p>
    <p>C D</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Recap: how Spartan works</p>
    <p>Built-in library</p>
    <p>Decide tiling</p>
    <p>Schedule tasks</p>
    <p>Spartan Frontend</p>
    <p>Spartan Backend</p>
    <p>schedule tasks  create distributed arrays</p>
    <p>C = A + B E = C + D</p>
    <p>High-level Operators</p>
    <p>new array</p>
    <p>new array</p>
    <p>join_ updatemap</p>
    <p>map</p>
  </div>
  <div class="page">
    <p>Outline  Motivation</p>
    <p>Spartan Design</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>High-level operators are expressive  70+ Numpy builtins.</p>
    <p>10 machine learning + 2 computational finance.</p>
  </div>
  <div class="page">
    <p>Spartan is scalable S</p>
    <p>pe ed</p>
    <p>up</p>
    <p>ALS Linear Reg.</p>
    <p>Log Reg.</p>
    <p>KMeans Fuzzy KMeans</p>
    <p>SSVD PCA QR CG Cholesky Black Sholes</p>
    <p>Predicted Price</p>
    <p>Experimental setup: 256 workers on 128 EC2 large instances.</p>
    <p>Execution time of 256 workers</p>
  </div>
  <div class="page">
    <p>Spartan is fast  Experimental setup: 256 workers on 128 EC2</p>
    <p>large instances, k-means application, using the best tiling.</p>
    <p>Presto (Distributed R) Spark SciDB</p>
    <p>Spartan 1.7X 10.1X 40X</p>
    <p>Relative performance</p>
  </div>
  <div class="page">
    <p>The performance effect of a bad tiling N</p>
    <p>or m</p>
    <p>al iz</p>
    <p>ed E</p>
    <p>xe cu</p>
    <p>tio n</p>
    <p>Ti m</p>
    <p>e</p>
    <p>ALS Linear Reg.</p>
    <p>Log Reg.</p>
    <p>KMeans Fuzzy KMeans</p>
    <p>SSVD PCA QR CG Cholesky</p>
    <p>Spartan Tiling Bad Tiling</p>
    <p>Experimental setup: 256 workers on 128 EC2 large instances.</p>
    <p>Execution time / Execution time of Spartan tiling</p>
  </div>
  <div class="page">
    <p>Related work  Manual tiling:</p>
    <p>- Global Array Toolkit [Nieplocha 96] - PETSc [Balay 97] - MadLinq[Qian 12] - Distributed R (Presto) [Venkataraman 13] - Elemental [Poulson 13]</p>
    <p>Compiler-assisted tiling: - [Hudak 90] - [Li 90] - [Li 91] - [Kennedy 91] - [Kremer 93] - [Philippsen 95]</p>
  </div>
  <div class="page">
    <p>Conclusions  Spartan is a distributed array programming</p>
    <p>framework with automatic tiling.</p>
    <p>Expression graphs capture multiple expressions.</p>
    <p>High-level operators expose array access pattern.</p>
    <p>https://github.com/spartan-array/spartan</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Limitations of Spartan  Tiling cost is not always precise</p>
    <p>Join_update  Sparse array  Can be solved by using run-time analyzing</p>
    <p>technique.  Spartan does not support in-place array modification.</p>
  </div>
  <div class="page">
    <p>High-level operators: known tiling cost</p>
    <p>Map 0 sizeof(input) sizeof(input) 0</p>
    <p>Fold 0 sizeof(input) sizeof(input) 0</p>
    <p>Join_Update sizeof(output) sizeof(output)</p>
    <p>+ sizeof(input)</p>
    <p>sizeof(output) +</p>
    <p>sizeof(input) sizeof(output)</p>
    <p>scan 0 sizeof(input) sizeof(input) 0</p>
    <p>filter 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Tiling performance Ex</p>
    <p>ec ut</p>
    <p>ed ti</p>
    <p>m e</p>
    <p>(s ec</p>
    <p>on ds</p>
    <p>)</p>
    <p>Cholesky ALS F-KMeans KMeans PCA SSVD QR CG Log-Reg. Lin-Reg.</p>
    <p>Spartan Tiling Best Tiling</p>
  </div>
  <div class="page">
    <p>High-level operators: fold  C = fold(ffold, A, axis)</p>
    <p>C1= max (A1)</p>
    <p>C3= max (A3)</p>
    <p>C2= max (A2)</p>
    <p>C4= max (A4)</p>
    <p>A C</p>
    <p>E.g. max value for each row (ffold=max, axis = 1)</p>
    <p>ffold = max</p>
  </div>
  <div class="page">
    <p>Random tiling comparison</p>
  </div>
</Presentation>
