<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Building and Using the ATLAS</p>
    <p>Transactional Memory System</p>
    <p>Njuguna Njoroge, Sewook Wee, Jared Casper, Justin Burdick, Yuriy Teslyar,</p>
    <p>Christos Kozyrakis, Kunle Olukotun</p>
    <p>Computer Systems Laboratory</p>
    <p>Stanford University</p>
    <p>http://tcc.stanford.edu</p>
  </div>
  <div class="page">
    <p>ATLAS Overview</p>
    <p>ATLAS Status and Roadmap</p>
    <p>Experience of Building ATLAS</p>
    <p>Results and evaluation</p>
    <p>Conclusions</p>
    <p>Todays Agenda</p>
  </div>
  <div class="page">
    <p>ATLAS Overview</p>
    <p>ATLAS is an UMA implementation of TCC</p>
    <p>TCC = Transactional Coherence and Consistency</p>
    <p>Shared memory with continuous transactions</p>
    <p>ATLAS objectives</p>
    <p>Provide a fast platform for software development  For user applications and system software</p>
    <p>Direct transactions support, tuning &amp; debugging tools</p>
    <p>Provide reasonable performance accuracy  Compared to ASIC designs or detailed simulation</p>
    <p>Use commodity FPGA HW/SW for rapid design  A tool for research, not a final project demo</p>
    <p>Not a goal: highest possible GOPS/GFLOPS</p>
  </div>
  <div class="page">
    <p>ATLAS Status and Roadmap</p>
    <p>ATLAS status</p>
    <p>Implemented on XUP board with XC2VP30 FPGA</p>
    <p>2-CPU TCC system at 100 MHz  Using the built-in PowerPC 405 cores</p>
    <p>Rich debugging, profiling &amp; tuning environment</p>
    <p>Next  ATLAS on BEE2 board (RAMP-Red)</p>
    <p>10x more LUTs/BRAMs than XUP board</p>
    <p>Allows for 8-CPU TCC system on the 4 user FPGAs</p>
    <p>DRAM, interconnect, Linux I/O on control FPGA</p>
  </div>
  <div class="page">
    <p>HW Highlights  100 MHz CPU &amp; bus 100 MHz CPU &amp; bus</p>
    <p>Internal PPC IInternal PPC I--Cache onCache on</p>
    <p>Internal PPC DInternal PPC D--caches offcaches off</p>
    <p>Transactional cacheTransactional cache</p>
    <p>8KB DM or 16KB 28KB DM or 16KB 2--way or way or</p>
    <p>32B lines32B lines</p>
    <p>2KB or 4KB or 8KB write 2KB or 4KB or 8KB write</p>
    <p>address FIFOaddress FIFO</p>
    <p>Main memoryMain memory</p>
    <p>512 MB DDR SDRAM512 MB DDR SDRAM</p>
    <p>I/O I/O</p>
    <p>UART for each PPCUART for each PPC</p>
    <p>PPC0: RS232PPC0: RS232</p>
    <p>PPC1: JTAG UARTPPC1: JTAG UART</p>
    <p>File I/O: Compact FlashFile I/O: Compact Flash</p>
    <p>See [PACTSee [PACT05] for 05] for</p>
    <p>architectural model architectural model</p>
    <p>Host PC</p>
    <p>JTAG Serial (UART)</p>
    <p>DDR SDRAM</p>
    <p>Compact</p>
    <p>Flash</p>
    <p>XUP</p>
    <p>Board</p>
    <p>PowerPC 0</p>
    <p>TCC</p>
    <p>Cache</p>
    <p>TCC</p>
    <p>Cache</p>
    <p>PLB</p>
    <p>Arbiter</p>
    <p>Memory PLB</p>
    <p>OCM Bus OCM Bus</p>
    <p>DDR Controller XC2VP30</p>
    <p>FPGA Fabric</p>
    <p>Instruction</p>
    <p>Fetch</p>
    <p>Instruction</p>
    <p>Fetch</p>
    <p>Checkpoint</p>
    <p>Memory</p>
    <p>Custom</p>
    <p>TCC Logic</p>
    <p>Xilinx</p>
    <p>Provided IP</p>
    <p>Slave</p>
    <p>IPIF Slave</p>
    <p>IPIF</p>
    <p>PLB</p>
    <p>PowerPC 1</p>
    <p>Checkpoint</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>SW Highlights</p>
    <p>TCC API for parallel programmingTCC API for parallel programming  Written in assembly for speedWritten in assembly for speed</p>
    <p>See [ASPLOSSee [ASPLOS04] for 04] for progprog. model . model</p>
    <p>Robust debugging infrastructureRobust debugging infrastructure  XilinxXilinxs Microprocessor Debugger (XMD)s Microprocessor Debugger (XMD)</p>
    <p>JTAG port access to PPC debugging portsJTAG port access to PPC debugging ports</p>
    <p>GDB stub onGDB stub on--top of XMDtop of XMD</p>
    <p>Extended XMD Extended XMD  ATLAS XMDATLAS XMD</p>
    <p>Rich support for intuitive Rich support for intuitive</p>
    <p>performance profiling &amp; tuningperformance profiling &amp; tuning  Integrated into the APIIntegrated into the API</p>
    <p>See [ICSSee [ICS05] for tuning process 05] for tuning process</p>
    <p>Come watch our demo!Come watch our demo!</p>
  </div>
  <div class="page">
    <p>Experience of using Commodity HW and SW</p>
    <p>Tools and Documentation (EDK)</p>
    <p>Examples &amp; GUI-wizards assume 1-CPU systems</p>
    <p>ATLAS stresses scarcely documented features</p>
    <p>Provided IP and SW libraries</p>
    <p>Convenient but often slow or missing functionality  PLB DDR cant run below 100 MHz</p>
    <p>I/O from CF card is too slow</p>
    <p>Had to implement syscalls from scratch</p>
    <p>Challenging coding API in assembly</p>
    <p>API tethered to EDKs gcc, which lags latest version</p>
  </div>
  <div class="page">
    <p>Hardcore vs. Softcore Processor</p>
    <p>Cons</p>
    <p>Cannot modify CPU internal datapath/cache  10 cycles for TCC cache hit</p>
    <p>No internal FPU  no interface for external FPU  FP operations are emulated</p>
    <p>Maximum 2 processors per FPGA</p>
    <p>Pros</p>
    <p>Same ISA with our software simulator</p>
    <p>Can run full software frameworks  PowerPC Linux, PowerPC Jikes RVM</p>
    <p>Observed similar speedup trends with simulator  Despite stalls on cache hits</p>
  </div>
  <div class="page">
    <p>So how does ATLAS perform?</p>
    <p>ATLAS 2P vs TASSEL 2P</p>
    <p>S w im</p>
    <p>R a di x</p>
    <p>To m ca</p>
    <p>tv</p>
    <p>O ce</p>
    <p>an</p>
    <p>M p3</p>
    <p>d</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>Applications</p>
    <p>S p e e d u p TASSEL-2P</p>
    <p>ATLAS-2P</p>
    <p>Wall-clock time : ATLAS vs. TASSEL (TCC Simulator)</p>
    <p>Atlas-1P is ~5x faster Tassel-1P</p>
    <p>Atlas-2P is ~8x faster Tassel-2P</p>
    <p>ATLAS 1P vs. TASSEL 1P</p>
    <p>S w im</p>
    <p>R a di x</p>
    <p>T om</p>
    <p>ca tv</p>
    <p>O ce</p>
    <p>an</p>
    <p>M p3</p>
    <p>d</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>Applications</p>
    <p>S p e e d u p</p>
    <p>TASSEL-1P</p>
    <p>ATLAS-1P</p>
    <p>TASSEL runs on a 2.5GHz Apple G5 workstation</p>
  </div>
  <div class="page">
    <p>Discussion of Results</p>
    <p>TASSEL uses fast-forwarding  Significant sections of application skipped</p>
    <p>Explains small ATLAS gains on swim, tomcatv, mp3d</p>
    <p>But programmer must be very careful  May miss a critical section  meaningless speedups</p>
    <p>TASSEL does not require such tradeoffs</p>
    <p>FPU emulation is a major bottleneck  Radix: 90% to gen FP data, 10% integer sorting  ATLAS-2P: 75x speedup in sorting, 22x overall</p>
    <p>Scalability  TASSEL gets slower with more processors  ATLAS scales with number of FPGAs</p>
  </div>
  <div class="page">
    <p>Summary of Experience: FPGAs are promising, but</p>
    <p>CMP research targets 8 to 16 CPUs  Desire to scale ATLAS to 8 processors</p>
    <p>XUP boards insufficient for the task  Limited to ring topology: high latency, limited bandwidth</p>
    <p>XC2VP30 FPGA has limited LUT/BRAM resources</p>
    <p>Need a better platform  BEE2</p>
    <p>Diagnosis:  Commodity boards and tools need to mature for CMP research</p>
  </div>
</Presentation>
