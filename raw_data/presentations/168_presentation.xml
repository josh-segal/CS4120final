<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>XenSocket: VM-to-VM IPC</p>
    <p>John Linwood Griffin Jagged Technology</p>
    <p>virtual machine inter-process communication</p>
    <p>Suzanne McIntosh, Pankaj Rohatgi, Xiaolan Zhang</p>
    <p>IBM Research</p>
    <p>Presented at ACM Middleware: November 28, 2007</p>
  </div>
  <div class="page">
    <p>with XenSocket:</p>
    <p>before XenSocket:</p>
    <p>What we did: Reduce work on the critical path</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>Domain-0 VM 2</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>VM 2</p>
    <p>Put packet into a page</p>
    <p>Ask Xen to remap page</p>
    <p>Route packet</p>
    <p>Ask Xen to remap page</p>
    <p>Allocate pool of pages (once)</p>
    <p>Ask Xen to share pages (once)</p>
    <p>Write into pool Read from pool</p>
  </div>
  <div class="page">
    <p>The standard outline</p>
    <p>What we did</p>
    <p>(Why) we did what we did</p>
    <p>(How) we did what we did</p>
    <p>What we did (again)</p>
  </div>
  <div class="page">
    <p>IBM building a stream processing system with high-throughput requirements</p>
    <p>Vid eo</p>
    <p>Enormous volume of data enters the</p>
    <p>system</p>
    <p>Independent nodes process and forward</p>
    <p>data objects</p>
    <p>Design for isolated, audited, and profiled</p>
    <p>execution environments</p>
  </div>
  <div class="page">
    <p>VM 1</p>
    <p>Xen</p>
    <p>VM 2 VM 3 VM 4</p>
    <p>x86 virtualization technology provides isolation in our security architecture</p>
    <p>Node 1</p>
    <p>Other physical nodes</p>
    <p>Other physical nodes</p>
    <p>Other physical nodes</p>
    <p>Other physical nodes</p>
    <p>Node 2</p>
    <p>Node 3</p>
    <p>Node 4</p>
  </div>
  <div class="page">
    <p>Using Xen virtual network resulted in low throughput @ max CPU usage</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>Domain-0 VM 2</p>
    <p>Xen</p>
    <p>Linux</p>
    <p>Process 1 Process 2</p>
    <p>UNIX socket 14 Gbit/s</p>
    <p>TCP socket 0.14 Gbit/s</p>
  </div>
  <div class="page">
    <p>before XenSocket:</p>
    <p>Our belief: root causes are Xen hypercalls and network stack</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>Domain-0 VM 2</p>
    <p>Uses 1.5 KB of 4 KB page</p>
    <p>Ask Xen to swap pages</p>
    <p>Packet routed</p>
    <p>Ask Xen to swap pages</p>
    <p>Put packet into a page</p>
    <p>May invoke Xen hypercall after only 1 packet queued</p>
    <p>Victim pages must be zeroed</p>
  </div>
  <div class="page">
    <p>The standard outline</p>
    <p>What we did</p>
    <p>(Why) we did what we did</p>
    <p>(How) we did what we did</p>
    <p>What we did (again)</p>
  </div>
  <div class="page">
    <p>with XenSocket:</p>
    <p>XenSocket hypothesis: Cooperative memory buffer improves throughput</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>VM 2</p>
    <p>Allocate 128 KB pool of pages</p>
    <p>Ask Xen to share pages</p>
    <p>No per-packet processing</p>
    <p>Writes are visible immediately</p>
    <p>Still requires hypercalls for signaling (but fewer)</p>
    <p>Pages reused in circular buffer</p>
  </div>
  <div class="page">
    <p>Caveat emptor</p>
    <p>We used Xen 3.0Latest is Xen 3.1</p>
    <p>Xen networking is reportedly improved</p>
    <p>Shared-memory concepts remain valid</p>
    <p>Released under GPL as XVMSocket http://sourceforge.net/projects/xvmsocket/</p>
    <p>Community is porting to Xen 3.1</p>
  </div>
  <div class="page">
    <p>Sockets interface; new socket family used to set up shared memory</p>
    <p>Server</p>
    <p>socket();</p>
    <p>bind(sockaddr_inet);</p>
    <p>listen();</p>
    <p>accept();</p>
    <p>socket();</p>
    <p>bind(sockaddr_xen);</p>
    <p>Client</p>
    <p>socket();</p>
    <p>connect(sockaddr_inet);</p>
    <p>socket();</p>
    <p>connect(sockaddr_xen); System returns grant # for client</p>
    <p>Remote address  Remote port #</p>
    <p>Remote VM #  Remote VM #  Remote grant #</p>
    <p>Local port #</p>
  </div>
  <div class="page">
    <p>After setup, steady-state operation needs little (if any) synchronization</p>
    <p>X e n S o c k e t</p>
    <p>VM 1 VM 2</p>
    <p>write(XenSocket) read(3)  Xen</p>
    <p>If receiver is blocked, send signal via Xen</p>
  </div>
  <div class="page">
    <p>Design goal (future work): Support for efficient local multicast</p>
    <p>X e n S o c k e t</p>
    <p>VM 1 VM 2</p>
    <p>VM 3</p>
    <p>write(XenSocket) read(3)  Xen</p>
    <p>read(5) XenSo</p>
    <p>Future writes wrap around; block on first unread page</p>
  </div>
  <div class="page">
    <p>The standard outline</p>
    <p>What we did</p>
    <p>(Why) we did what we did</p>
    <p>(How) we did what we did</p>
    <p>What we did (again)</p>
  </div>
  <div class="page">
    <p>Figure 5: Pretty good performance</p>
    <p>Message size (KB, log scale) 0.5 16</p>
    <p>B a</p>
    <p>n d</p>
    <p>w id</p>
    <p>th (</p>
    <p>M b</p>
    <p>it/ s )</p>
    <p>UNIX socket: 14 MB/s</p>
    <p>XenSocket: 9 MB/s</p>
    <p>INET socket: 0.14 MB/s</p>
  </div>
  <div class="page">
    <p>Figure 6: Interesting cache effects</p>
    <p>Message size (MB, log scale) 1 10 1000.10.01</p>
    <p>B a</p>
    <p>n d</p>
    <p>w id</p>
    <p>th (</p>
    <p>M b</p>
    <p>it/ s )</p>
    <p>UNIX socket</p>
    <p>XenSocket</p>
    <p>INET socket</p>
  </div>
  <div class="page">
    <p>Throughput limited by CPU usage; Advantageous to offload Domain-0</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>Domain-0 VM 2</p>
    <p>Xen100% CPU 1% CPU 100% CPU</p>
    <p>VM 1</p>
    <p>Xen</p>
    <p>Domain-0 VM 2</p>
    <p>Xen</p>
    <p>TCP socket 0.14 Gbit/s</p>
    <p>XenSocket 9 Gbit/s</p>
  </div>
  <div class="page">
    <p>Adjusted communications integrity and relaxing of pure VM isolation</p>
    <p>Possible solution: Use a proxy for pointer updates along the reverse path</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM 3</p>
    <p>But now this path is bidirectional(?)</p>
    <p>Any masters students looking for a project?</p>
  </div>
  <div class="page">
    <p>Potential memory leak: Xen didnt (doesnt?) support page revocation</p>
    <p>VM 1 VM 2 Setup VM 1 shares pages</p>
    <p>VM 1 VM 2 Scenario #1 VM 2 releases pages</p>
    <p>VM 1 VM 2 Scenario #2 VM 1 cannot safely</p>
    <p>reuse pages</p>
  </div>
  <div class="page">
    <p>Xen shared memory: Hot topic!</p>
    <p>XenSocket Middleware07 | make a better virtual network</p>
    <p>MVAPICH-ivc: Huang and colleagues (Ohio State, USA) SC07 | What we did, but with a custom HPC API</p>
    <p>XWay: Kim and colleagues (ETRI, Korea) 07 | What we did, but hidden behind TCP sockets</p>
    <p>Menon and colleagues (HP, USA) VEE05, USENIX06 | make the virtual network better</p>
  </div>
  <div class="page">
    <p>Conclusion: XenSocket is awesome</p>
    <p>Shared memory enables high-throughput VM-to-VM communication in Xen</p>
    <p>(a broadly applicable result?)</p>
    <p>John Linwood Griffin John.Griffin @ JaggedTechnology.com</p>
    <p>Also here at Middleware: Sue McIntosh</p>
  </div>
</Presentation>
