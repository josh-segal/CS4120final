<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>August 8, 2016 USENIX Security Symposium WOOT 16</p>
    <p>AVLeak: Fingerprinting Antivirus Emulators</p>
    <p>Through Black-Box Testing</p>
    <p>Alexei Bulazel and Andrew Fasano</p>
    <p>@av_leak</p>
    <p>Jeremy Blackthorne, Alexei Bulazel, Andrew Fasano, Patrick Biernat, Blent Yener</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Introduction</p>
    <p>Research group from Rensselaer Polytechnic Institute (RPI) under Dr. Blent Yener</p>
    <p>Jeremy Blackthorne - PhD candidate  Alexei Bulazel - recent MS graduate  Andrew Fasano - undergraduate researcher</p>
    <p>(graduated)  Patrick Biernat - undergraduate researcher  Dr. Blent Yener - advisor</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Problem</p>
    <p>Modern AV software uses dynamic (sandbox) analysis to scan the 1,000,000+ new malware binaries created every day</p>
    <p>Consumer AV emulators are conceptually easy to evade</p>
    <p>If emulation can be detected, malware can behave benignly to avoid detection</p>
    <p>There is not an efficient method to fingerprint consumer AV emulators</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Motivation</p>
    <p>Existing methods to extract fingerprints from emulators are inefficient:  Reverse engineering  Too hard</p>
    <p>Black-box dynamic analysis  Too slow</p>
    <p>Our goal: Automate and accelerate fingerprint discovery</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Background</p>
    <p>Packers can generate millions of unique binaries that behave identically while evading static signatures</p>
    <p>Dynamic (sandbox) analysis allows AV engines to identify known signatures or heuristically classify previously unknown malware</p>
    <p>Extensive prior research on detecting high-end emulators and VMs - QEMU, VMWare, Xen, Bochs, etc</p>
    <p>Little prior work on consumer AV emulators</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Classes of Consumer AV Fingerprints</p>
    <p>Environmental artifacts  Hardcoded username, registry</p>
    <p>entries, processes names</p>
    <p>OS API inconsistency  Failures and incorrect return values</p>
    <p>Network emulation  Hardcoded responses and</p>
    <p>inconsistencies 8</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Classes of Consumer AV Fingerprints</p>
    <p>Timing  Timing skews and dilation</p>
    <p>Process Introspection  Internal inconsistencies - PEB,</p>
    <p>heap allocations, etc</p>
    <p>CPU Red Pills  Instructions which behave</p>
    <p>differently on an emulated CPU 9</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Reversing AV Emulators</p>
    <p>Time consuming  Expensive tools  Expert knowledge  RE, AV, x86,</p>
    <p>Windows internals, malware behavior, anti-analysis</p>
    <p>Limited Lifespan - frequent updates</p>
  </div>
  <div class="page">
    <p>August 8, 2016 USENIX Security Symposium WOOT 16</p>
    <p>Traditional Malware Sandbox / Emulator Architecture</p>
    <p>Many introspection points for fingerprint extraction</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Consumer AV Emulator</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Consumer AV Emulator</p>
    <p>Analysis report: Dropped: Trojan.Infector.BAT.ABC123 Dropped: APT1337.Backdoor.2 Dropped: CryptoLocker.Downloader.K</p>
    <p>Single introspection point: analysis report for given input binary</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Prior Approach: Black Box Testing</p>
    <p>Extract a single bit of data per run  Arne Swinnen &amp; Alaeddine Mesbahi - One</p>
    <p>Packer To Rule Them All (Black Hat 14)  Kyle Adams - Evading Code Emulation</p>
    <p>(BSidesLV 14)  Daniel Sauder - Why Antivirus Software</p>
    <p>Fails (DeepSec 14)  Emeric Nasi - Bypass Antivirus Dynamic</p>
    <p>Analysis (white paper 14)</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Prior Approaches: Black Box Testing</p>
    <p>AV Emulator True or False Question: Does the</p>
    <p>emulator emulate function_x() correctly?</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Prior Approaches: Black Box Testing</p>
    <p>AV Emulator True or False Question: Does the</p>
    <p>emulator emulate function_x() correctly?</p>
    <p>if function_x() != EXPECTED: DropMalware()</p>
    <p>else: Exit()</p>
    <p>Malware TRUE</p>
    <p>No Malware FALSE</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Prior Approaches: Black Box Testing</p>
    <p>AV Emulator</p>
    <p>if function_x() != EXPECTED: DropMalware()</p>
    <p>else: Exit()</p>
    <p>True or False Question: Does the emulator emulate function_x() correctly?</p>
    <p>if function_x() != EXPECTED: DropMalware()</p>
    <p>else: Exit()</p>
    <p>Malware TRUE</p>
    <p>No Malware FALSE</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Prior Approaches: Black Box Testing</p>
    <p>AV Emulator</p>
    <p>if function_x() != EXPECTED: DropMalware()</p>
    <p>else: Exit()</p>
    <p>No Malware Detected (function_x</p>
    <p>emulated correctly)</p>
    <p>Malware Detected (function_x() not emulated correctly)</p>
    <p>True or False Question: Does the emulator emulate function_x() correctly?</p>
    <p>if function_x() != EXPECTED: DropMalware()</p>
    <p>else: Exit()</p>
    <p>Malware TRUE</p>
    <p>No Malware FALSE</p>
    <p>Exit()</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Evasive Malware: Case Study</p>
    <p>EvilBunny (Animal Farm APT) was using fingerprints to evade Bitdefender in 2011</p>
    <p>Bitdefender calls processes under analysis TESTAPP</p>
    <p>EvilBunny doesnt run when when called TESTAPP</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Introducing AVLeak</p>
    <p>Novel tool for researchers to easily and quickly extract fingerprints from consumer antivirus emulators in order to evade malware detection</p>
    <p>Design: Test cases in C, automated with Python, Python API</p>
    <p>Goals:  Fingerprint the AV itself  Ease of use  Abstract AV interaction from the programmer  Scriptable API  Find fingerprints in seconds not hours</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Introducing AVLeak</p>
    <p>Novel approach to leak bytes values from inside AV emulators</p>
    <p>Map malware names to byte values</p>
    <p>Use malware detections to exfiltrate specific byte values per run</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>Virus Database</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>AV Emulator username=emu</p>
    <p>Question: What is the username in the emulator?</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>Question: What is the username in the emulator?</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>Question: What is the username in the emulator?</p>
    <p>for c in GetUserName(): Drop(MalwareArray[c])</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>Question: What is the username in the emulator?</p>
    <p>for c in GetUserName(): Drop(MalwareArray[c])</p>
    <p>ee</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>Question: What is the username in the emulator?</p>
    <p>for c in GetUserName(): Drop(MalwareArray[c])</p>
    <p>ee mm</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>Question: What is the username in the emulator?</p>
    <p>for c in GetUserName(): Drop(MalwareArray[c])</p>
    <p>ee mm uu</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>Malware Detected: Sasser //e Bagle //m Blaster //u</p>
    <p>Question: What is the username in the emulator?</p>
    <p>for c in GetUserName(): Drop(MalwareArray[c])</p>
    <p>ee mm uu</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVLeaks Innovation</p>
    <p>A Morris</p>
    <p>B Code Red</p>
    <p>C Zeus</p>
    <p>a Conficker</p>
    <p>z Brain</p>
    <p>GetUserName()</p>
    <p>AV Emulator username=emu</p>
    <p>username=emu</p>
    <p>Malware Detected: Sasser //e Bagle //m Blaster //u</p>
    <p>Question: What is the username in the emulator?</p>
    <p>for c in GetUserName(): Drop(MalwareArray[c])</p>
    <p>ee mm uu</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>AVs Tested</p>
    <p>Tested four commercial AVs found on VirusTotal - Identified by</p>
    <p>uploading EICAR droppers</p>
    <p>Bitdefender emulator licensed to 20+ other AVs</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Classes of Consumer AV Fingerprints</p>
    <p>Environmental artifacts  Hardcoded strings for username/computer name/</p>
    <p>environment variables, file system, registry entries, processes</p>
    <p>OS API inconsistency  Functions that fail, return hardcoded values, generally dont</p>
    <p>behave correctly  Network emulation</p>
    <p>Inconsistencies with real network behavior, hardcoded responses to network traffic</p>
    <p>Timing  Timing skews, dilation, inconsistencies across observations</p>
    <p>Process Introspection  Internal process traits - uninitialized memory, data left on</p>
    <p>stack or in registers after function calls, PEB/TEB, DLLs in memory</p>
    <p>CPU Red Pills  Instructions which behave differently on an emulated CPU</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>DEMO</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Environmental Artifacts</p>
    <p>BD: A_E_O_FANTOMA_DE_FISIER_CARE_VA_SA_ZICA_NU_EXISTA (Romanian: this is a ghost file which will tell you [that] it doesnt exist.bat), TZEAPA_A_LA_BATMAN.EXE (Batmans Spike.exe [with Romanian keyboard specific misspelling]), C:\\BATMAN, NOTHING.COM  Kaspersky FS (random flailing on a QWERTY keyboard): C:\\Documents and Settings \Administrator\My Documents\{koio.mpg, muuo.mp3, qcse.xls, dvzrv.rar,}</p>
    <p>- STD_OUTxe, Dummy.exebat, welcome.exe, Arquivos de programas  Kaspersky file headers: &lt;KL Autogenerated&gt;  Fake installs of other AV products, file sharing clients, games  AVG Product ID: 76588-371-4839594-51979</p>
    <p>Far Manager installs in Kaspersky and VBA - Far Manager  for former USSR countries</p>
    <p>as freeware</p>
    <p>argv[0]: - K: C:\{random letters}.exe - AVG: C:\\mwsmpl.exe - BD: C:\TESTAPP.EXE - VBA: C:\SELF.EXE</p>
    <p>GetComputerName(): - K: NfZtFbPfH - AVG: ELICZ - BD: tz - VBA: MAIN</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Hardcoded Start Times</p>
    <p>Kaspersky: 11:01:19, July 13, 2012  AVG: 1:40:41.16, May 23, 2011  VBA: 1:31:12.123, November 3, 2014  GetSystemTimeAsFileTime: 0:0:0.00, 0/0/2000</p>
    <p>Bitdefender:  GetSystemTimeAsFileTime: 0:0:0.00 January 1, 2008</p>
    <p>GetSystemTime doesnt work!  NtQuerySystemTime doesnt work!</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Fake Library Code</p>
    <p>Fake library code in all four AVs</p>
    <p>GetProcAddress - dump bytes at pointer</p>
    <p>Obscure instructions are used to trigger library function emulation</p>
    <p>AVG: mov edi, edi</p>
    <p>push ebp mov ebp, esp</p>
    <p>nop</p>
    <p>lock mov ebx, 0xff(1b lib #)(2b func #)</p>
    <p>pop ebp ; epilogue</p>
    <p>ret (size of args)</p>
    <p>nop</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Common Themes</p>
    <p>Checking for simple fingerprints enables malware to evade detection</p>
    <p>Hardcoded environmental artifacts are clearly left by programmers as jokes, or as bait for malware</p>
    <p>AVs dont do heuristic malware classification based on emulation-detection behavior</p>
  </div>
  <div class="page">
    <p>Black Hat 2016August 3, 2016</p>
    <p>Low Budget Malware Discovery</p>
    <p>Advanced malware authors are already using these artifacts</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Future Work</p>
    <p>More emulators, more tests</p>
    <p>Use AVLeak for vulnerability research against emulators (breakout exploits)  See Tavis</p>
    <p>Ormandy and Joxean Korets work</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Conclusion</p>
    <p>Pushed the state of the art in emulator fingerprinting</p>
    <p>Presented a survey of emulator fingerprints across six categories</p>
    <p>Demonstrated real world examples of malware exploiting these fingerprints</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Selected References  ADAMS, K. Evading Code Emulation: Writing Ridiculously Obvious Malware That Bypasses AV, 2014. Talk at BSides Las</p>
    <p>Vegas 2014, Las Vegas, Nevada.  CZUMAK, M. peCloak.py An Experiment in AV Evasion. http://www.securitysift.com/pecloak-py-an-experiment-in-av</p>
    <p>evasion, 2015.  FERRIE P. Attacks on Virtual Machine Emulators. Tech. rep., Symantec Advanced Threat Research, 2006.  KORET, J., AND BACHAALANY, E. The Antivirus Hackers Handbook. Wiley, Indianapolis, Indiana, 2015.  MARSCHALEK, M. EvilBunny: Malware Instrumented By Lua. http://www.cyphort.com/evilbunny-malware</p>
    <p>instrumented-lua, 2014.  NASI, E. Bypass Antivirus Dynamic Analysis: Limitations of the AV model and how to exploit them. Tech. rep., Self</p>
    <p>published, 2014.  OBERHEIDE, J., BAILEY, M., AND JAHANIAN, F. PolyPack: An Automated Online Packing Service for Optimal Antivirus</p>
    <p>Evasion. In WOOT09 Proceedings of the 3rd USENIX conference on Offensive technologies (2009).  ORMANDY, T. Analysis and Exploitation of an ESET Vulnerability. http://googleprojectzero.blogspot.com/2015/06/</p>
    <p>analysis-and-exploitation-of-eset.html, 2015.  PALEARI, R., MARTIGNONI, L., ROGLIA, G. F., AND BRUSCHI, D. A fistful of red-pills: How to automatically generate</p>
    <p>procedures to detect CPU emulators. In WOOT09 Proceedings of the 3rd USENIX conference on Offensive technologies (2009).</p>
    <p>ROLLES, R. Detecting an emulator using the windows api. http://reverseengineering.stackexchange.com/questions/ 2805/detecting-an-emulator-using-the-windows-api, 2013.</p>
    <p>SAUDER, D. Why Antivirus Software Fails, 2014. Talk at DeepSec 2014, Vienna, Austria.  SECOND PART TO HELL. Dynamic Anti-Emulation using Blackbox Analysis. http://vxheaven.org/lib/vsp42.html, 2011.  SWINNEN, A., AND MESBAHI, A. One Packer to Rule Them All: Empirical Identification, Comparison and Circumvention</p>
    <p>of Current Antivirus Detection Techniques, 2014. Talk at Black Hat 2014, Las Vegas, Nevada.  YOSHIOKA, K., HOSOBUCHI, Y., ORII, T., AND MATSUMOTO, T. Your Sandbox is Blinded: Impact of Decoy Injection to</p>
    <p>Public Malware Analysis Systems. Journal of Information Processing 19 (2011).</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Thank You</p>
    <p>RPI Research Team:  Jeremy Blackthorne  Patrick Biernat  Dr. Blent Yener  Dr. Greg Hughes</p>
    <p>Help &amp; Inspiration:  Marion Marshalek  Rolf Rolles  Alex Ionescu  Bruce Dang  Dr. Sergey Bratus</p>
  </div>
  <div class="page">
    <p>USENIX Security Symposium WOOT 16August 8, 2016</p>
    <p>Questions?</p>
    <p>Kaspersky Lab - Packin The K</p>
  </div>
</Presentation>
