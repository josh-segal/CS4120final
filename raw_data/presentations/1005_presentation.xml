<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Giza: Erasure Coding Objects across Global Data Centers</p>
    <p>Yu Lin Chen*, Shuai Mu , Jinyang Li , Cheng Huang *, Jin li *, Aaron Ogus *, and Douglas Phillips*</p>
    <p>New York University, *Microsoft Corporation</p>
    <p>USENIX ATC, Santa Clara, CA, July 2017</p>
  </div>
  <div class="page">
    <p>Azure data centers span the globe</p>
  </div>
  <div class="page">
    <p>Data center fault tolerance: Geo Replication</p>
    <p>blob</p>
  </div>
  <div class="page">
    <p>Data center fault tolerance: Erasure coding</p>
    <p>blob a b p</p>
    <p>Project Giza 4</p>
  </div>
  <div class="page">
    <p>The cost of erasure coding</p>
    <p>bloba b</p>
    <p>Project Giza 5</p>
  </div>
  <div class="page">
    <p>When is cross DC coding a win?</p>
    <p>a) Stores a lot of data in large objects (less coding overhead)</p>
    <p>b) Infrequent reconstruction due to read or failure.</p>
  </div>
  <div class="page">
    <p>Cross DC communication is becoming less expensive</p>
    <p>Largest bandwidth capacity today with 160Tpbs</p>
  </div>
  <div class="page">
    <p>In search of a coding friendly workload</p>
  </div>
  <div class="page">
    <p>OneDrive is occupied mostly by large objects</p>
  </div>
  <div class="page">
    <p>OneDrive is occupied mostly by large objects</p>
    <p>Object &gt; 1GB</p>
    <p>occupies 53%</p>
    <p>of total storage</p>
    <p>capacity.</p>
  </div>
  <div class="page">
    <p>OneDrive is occupied mostly by large objects</p>
    <p>Objects &lt; 4MB</p>
    <p>occupies only</p>
    <p>storage capacity</p>
  </div>
  <div class="page">
    <p>OneDrive reads are infrequent after a month</p>
  </div>
  <div class="page">
    <p>OneDrive reads are infrequent after a month</p>
    <p>bytes read occur</p>
    <p>within the first day</p>
    <p>of the object creation</p>
  </div>
  <div class="page">
    <p>OneDrive reads are infrequent after a month</p>
    <p>less than 2% of the</p>
    <p>total bytes read occur</p>
    <p>after a month</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Giza: a strongly consistent versioned object store</p>
    <p>Erasure code each object individually.</p>
    <p>Optimize latency for Put and Get.</p>
    <p>Leverage existing single-DC cloud storage API.</p>
  </div>
  <div class="page">
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3</p>
    <p>Gizas architecture</p>
    <p>Giza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Gizas workflow Client</p>
    <p>Put(Blob1, Data)</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3 18</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3</p>
    <p>Gizas workflow Client</p>
    <p>Put(Blob1, Data)</p>
    <p>Put(GUID1, Fragment A)</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3</p>
    <p>Gizas workflow Client</p>
    <p>Put(Blob1, Data)</p>
    <p>{DC1: GUID1, DC2: GUID2, DC3: GUID3}</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Giza metadata versioning</p>
    <p>Key Metadata (version #: actual metadata)</p>
    <p>Blob1 v1: md1</p>
    <p>Let mdthis = {DC1:GUID4, DC2:GUID5, DC3:GUID6}</p>
    <p>Key Metadata (version #: actual metadata)</p>
    <p>Blob1 v1: md1, v2: mdthis</p>
  </div>
  <div class="page">
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3</p>
    <p>Inconsistency during concurrent put operations Client</p>
    <p>Put(Blob1, Data1)</p>
    <p>Client</p>
    <p>Put(Blob1, Data2)</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Inconsistency during concurrent put operations</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1</p>
    <p>DC1</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md2</p>
    <p>DC2</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1</p>
    <p>DC3</p>
    <p>md1 md2 md1</p>
    <p>Order of arrival</p>
    <p>md2 md2md1</p>
    <p>WARNING: INCONSISTENT STATE</p>
  </div>
  <div class="page">
    <p>Inconsistency during concurrent put operations</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1</p>
    <p>DC1</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md2</p>
    <p>DC2</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1</p>
    <p>DC3</p>
    <p>md1 md2 md1</p>
    <p>Order of arrival</p>
    <p>md2 md2md1</p>
    <p>WARNING: INCONSISTENT STATE</p>
    <p>FAILURE!</p>
  </div>
  <div class="page">
    <p>Choosing version value via consensus</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1 v2: md2</p>
    <p>DC1</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1 v2: md2</p>
    <p>DC2</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md1 v2: md2</p>
    <p>DC3</p>
    <p>OR</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md2 v2: md1</p>
    <p>DC1</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md2 v2: md1</p>
    <p>DC2</p>
    <p>Key Metadata</p>
    <p>Blob1 v1: md2 v2: md1</p>
    <p>DC3 25</p>
  </div>
  <div class="page">
    <p>Paxos and Fast Paxos properties</p>
  </div>
  <div class="page">
    <p>Paxos and Fast Paxos properties</p>
  </div>
  <div class="page">
    <p>Implementing Fast Paxos with Azure table API</p>
    <p>Let mdthis = ({DC1:GUID1, DC2:GUID2, DC3:GUID3}, Paxos states)</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3 28</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Implementing Fast Paxos with Azure table API</p>
    <p>Let mdthis = ({DC1:GUID1, DC2:GUID2, DC3:GUID3}, Paxos states)</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3 29</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Giza node</p>
    <p>Implementing Fast Paxos with Azure table API</p>
    <p>Let mdthis = ({DC1:GUID1, DC2:GUID2, DC3:GUID3}, Paxos states)</p>
    <p>Remote DC</p>
    <p>Read metadata row and decide to accept or reject proposal (v2 = md</p>
    <p>this )</p>
    <p>Etag = 1</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Implementing Fast Paxos with Azure table API</p>
    <p>Let mdthis = ({DC1:GUID1, DC2:GUID2, DC3:GUID3}, Paxos states)</p>
    <p>Remote DC</p>
    <p>Etag = 2</p>
    <p>Etag = 1</p>
    <p>Fail to update table since etag has changed</p>
    <p>Giza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza nodeGiza node</p>
    <p>Write metadata row back to the table if proposal accepted</p>
  </div>
  <div class="page">
    <p>Implementing Fast Paxos with Azure table API</p>
    <p>Let mdthis = ({DC1:GUID1, DC2:GUID2, DC3:GUID3}, Paxos states)</p>
    <p>Remote DC</p>
    <p>Etag = 1</p>
    <p>Etag = 1</p>
    <p>Write metadata row back to the table if proposal accepted</p>
    <p>Successfully update table since etag hasnt changed</p>
    <p>Giza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Parallelizing metadata and data path</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3 33</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza nodeGiza node</p>
    <p>Table Blob</p>
    <p>Giza node Giza nodeGiza node</p>
  </div>
  <div class="page">
    <p>Data path fails, metadata path succeeds</p>
    <p>During read, Giza will revert back to the latest version where the data is available.</p>
    <p>Ongoing, data path failed</p>
    <p>Key Metadata (version #: actual metadata)</p>
    <p>Blob1 v1: md1, v2: md2</p>
  </div>
  <div class="page">
    <p>Giza Put</p>
    <p>Execute metadata and data path in parallel.</p>
    <p>Upon success, return acknowledgement to the client.</p>
    <p>In the background, update highest committed version number in the metadata row.</p>
    <p>Ongoing, not committed</p>
    <p>Key Committed Metadata (version #: actual metadata)</p>
    <p>Blob1 1 v1: md1, v2: md2</p>
  </div>
  <div class="page">
    <p>Giza Get</p>
    <p>Optimistically read the latest committed version locally.</p>
    <p>Execute both data path and metadata path in parallel:</p>
    <p>Data path retrieves the data fragments indicated by the local latest committed version.</p>
    <p>Metadata path will retrieve the metadata row from all data centers and validate the latest committed version.</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Giza deployment configurations</p>
    <p>US-2-1</p>
  </div>
  <div class="page">
    <p>Giza deployment configurations</p>
    <p>US-6-1</p>
  </div>
  <div class="page">
    <p>Giza deployment configurations</p>
    <p>World-2-1</p>
  </div>
  <div class="page">
    <p>Giza deployment configurations</p>
    <p>World-6-1</p>
  </div>
  <div class="page">
    <p>Metadata Path: Fast vs Classic Paxos</p>
  </div>
  <div class="page">
    <p>Metadata Path: Fast vs Classic Paxos</p>
  </div>
  <div class="page">
    <p>Giza Put Latency (World-2-1)</p>
  </div>
  <div class="page">
    <p>Giza Get Latency (World-2-1)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Recent trend in data centers supports the economic feasibility of erasure coding across data centers.</p>
    <p>Giza is a strongly consistent versioned object store, built on top of Azure storage.</p>
    <p>Giza optimizes for latency and is fast in the common case.</p>
  </div>
</Presentation>
