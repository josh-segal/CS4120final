<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SAQL: A Stream-based Query System for Real-Time Abnormal System Behavior Detection</p>
    <p>Peng Gao1, Xusheng Xiao2, Ding Li3, Zhichun Li3, Kangkook Jee3, Zhenyu Wu3, Chung Hwan Kim3, Sanjeev R. Kulkarni1, Prateek Mittal1</p>
  </div>
  <div class="page">
    <p>The Equifax Data Breach</p>
  </div>
  <div class="page">
    <p>Impact of Advanced Persistent Threat (APT) Attack</p>
    <p>Advanced: sophisticated techniques, e.g., exploiting multiple vulnerabilities  Persistent: adversaries are continuously monitoring and stealing data from the target  Threat: strong economical or political motives</p>
  </div>
  <div class="page">
    <p>APT Attack: Case Study</p>
    <p>c1 Initial Compromise: Attacker sends a crafted e-mail to the victim, which contains an Excel file with a malicious macro embedded</p>
    <p>c2 Malware Infection: Victim opens the file and runs the macro, which downloads and executes a malware to open a backdoor</p>
    <p>c3 Privilege Escalation: Attacker enters the victims machine through the backdoor and runs the database cracking tool to obtain database credentials</p>
    <p>c4 Penetration into Database Server: Attacker penetrates into the database server and drops another malware to open another backdoor</p>
    <p>c5 Data Exfiltration: Attacker dumps the database content and sends the dump back to his host</p>
  </div>
  <div class="page">
    <p>APT Attack: Case Study</p>
    <p>Multiple steps exploiting different types of vulnerabilities in the system, exhibiting different abnormal behaviors Known malicious behaviors, e.g., cmd.exe starts gsecdump.exe (c3) Abnormal data transfers, e.g., sqlservr.exe transfers large data to external IP, causing large network spikes (c5)</p>
    <p>Abnormal process creations, e.g., excel.exe starts java.exe (c2)</p>
  </div>
  <div class="page">
    <p>Ubiquitous System Monitoring  Recording system behaviors from kernel</p>
    <p>Unified structure of logs: not bound to applications</p>
    <p>System activities w.r.t. system resources System resources (system entities): processes, files, network connections System activities (system events): file events, process events, network events</p>
    <p>Format: &lt;subject, operation, object&gt;, e.g., proc p1 read file f1</p>
    <p>Enabling timely anomaly detection via querying the real-time stream of system monitoring data Continuous queries</p>
    <p>Kernel</p>
  </div>
  <div class="page">
    <p>Rule-based anomaly: behavioral rules of system activities and their relationships  Time-Series anomaly: states definition and history states comparison  Invariant-based anomaly: invariant definition, training, and violation checking  Outlier-based anomaly: peer states comparison</p>
    <p>Challenge 1: Attack Behavior Specification</p>
  </div>
  <div class="page">
    <p>System monitoring produces huge amount of system logs per day  ~50 GB for 100 hosts per day; throughput ~2500 system events/s (in typical computer</p>
    <p>science research lab environment)</p>
    <p>Executing multiple concurrent queries incurs considerable overhead</p>
    <p>Challenge 2: Timely Big Data Security Analysis</p>
    <p>System Event Stream</p>
  </div>
  <div class="page">
    <p>SAQL System</p>
    <p>Novel stream query system for abnormal system behavior detection  Build on top of existing mature tools (~50,000 lines of Java code)</p>
    <p>System-level monitoring tools: auditd, ETW, Dtrace  Event stream management: Siddhi</p>
  </div>
  <div class="page">
    <p>Data Collection  Data collection agent: system calls as a sequence of system events</p>
    <p>Windows: Event Tracing for Windows (ETW) Linux: Audit Framework (auditd) Mac: DTrace</p>
    <p>Collect critical attributes for security analysis</p>
  </div>
  <div class="page">
    <p>Rule-based Anomaly: Single-Event</p>
    <p>Event pattern: &lt;subject, operation, object&gt;, attribute constraints, event ID  Return attributes</p>
  </div>
  <div class="page">
    <p>Rule-based Anomaly: Multievent</p>
    <p>Global constraints: e.g., agent ID  Event patterns: &lt;subject, operation, object&gt;, attribute constraints, event ID  Temporal relationships: enforce the event order  Attribute relationships: e.g., two events linked by the same entity  Syntax shortcuts: e.g., context-aware attribute inference</p>
    <p>p1.exe_name, p2.exe_name, p3.exe_name, f1.name, p4.exe_name, i1.dst_ip</p>
    <p>exe_name = %cmd.exe</p>
    <p>name = %backup1.dmp</p>
  </div>
  <div class="page">
    <p>Time-Series Anomaly</p>
    <p>Sliding windows  Aggregation states  History states access  Time-series anomaly</p>
    <p>models (e.g., SMA3)</p>
    <p>Existing systems lack the explicit support for stateful computation in sliding windows</p>
  </div>
  <div class="page">
    <p>Invariant-based Anomaly</p>
    <p>Invariants definition  Invariants update  Offline/online training  Invariant-based anomaly</p>
    <p>models</p>
  </div>
  <div class="page">
    <p>Outlier-based Anomaly</p>
    <p>Cluster definition  Distance metric  Clustering method  Outlier-based anomaly</p>
    <p>models</p>
  </div>
  <div class="page">
    <p>SAQL Execution Engine</p>
    <p>Multievent pattern matching: match the stream against the event patterns  Stateful computation: compute and maintain states over sliding windows  Alert condition checking: check conditions for triggering alerts  Return and filters: return desired attributes of qualified events</p>
  </div>
  <div class="page">
    <p>Master-Dependent-Query Scheme  Challenge: executing multiple concurrent queries incurs considerable overhead  Key insight: share intermediate execution results among queries (two levels for</p>
    <p>now: event pattern matching, stateful computation) Partition concurrent queries into master-dependent groups Only master query has direct access to the stream</p>
    <p>Master query</p>
    <p>Dependent query 1 Dependent query 2</p>
  </div>
  <div class="page">
    <p>Deploy in NEC Labs of 150 hosts (1.1 TB data; 3.3 billion events; throughput 3750 events/s)  Deployed server has 12 cores and 128GB of RAM  17 queries</p>
    <p>APT attack: apt-c1, apt-c2, apt-c3, apt-c4, apt-c5, apt-c2-invariant, apt-c5-timeseries, apt-c5-outlier  SQL injection attack: sql-injection  Bash shellshock command injection attack: shellshock  Suspicious system behaviors: dropbox, command-history, password, login-log, sshkey, usb, ipfreq</p>
    <p>Case Study: Four Major Types of Attacks</p>
  </div>
  <div class="page">
    <p>Case Study: Execution Statistics</p>
    <p>Low detection latency: &lt;2s</p>
  </div>
  <div class="page">
    <p>Pressure Test</p>
    <p>High system throughput: 110,000 events/s; supporting ~4000 hosts</p>
  </div>
  <div class="page">
    <p>Performance of Concurrent Query Execution  64 micro-benchmark queries</p>
    <p>Four attack categories:  Sensitive file access: /etc/password, .ssh/id_rsa, .bash_history, /var/log/wtmp  Browsers access files: chrome, firefox, iexplore, microsoftedge  Processes access networks: dropbox, sqlservr, apache, outlook  Processes spawn: /bin/bash, /usr/bin/ssh, cmd.exe, java</p>
    <p>Four evaluation categories for query variations:  Event attribute: 1 attribute -&gt; 4 attributes  Sliding window: 1 minute -&gt; 4 minute  Agent ID: 1 agent -&gt; 4 agents  State aggregation: 1 aggregation type -&gt; 4 aggregation types</p>
    <p>4 queries for each joint category, 64 = 4 * 4 * 4</p>
  </div>
  <div class="page">
    <p>Performance of Concurrent Query Execution  Example micro-benchmark query for joint category sensitive file accesses &amp; state</p>
    <p>aggregation</p>
    <p>Memory consumption (MB) w.r.t. number of concurrent queries</p>
  </div>
  <div class="page">
    <p>Alert Detection and Investigation  Historical data is required for alert investigation</p>
    <p>AIQL (Attack Investigation Query Language) System (USENIX ATC18) Data stored in relational databases with efficient indexing Compatible query language Leverage domain specifics to speedup the search of complex system event patterns</p>
    <p>Project website: https://sites.google.com/site/aiqlsystem/</p>
    <p>Together, SAQL and AIQL work seamlessly for defending against APT attacks</p>
  </div>
  <div class="page">
    <p>Conclusion  SAQL (Stream-based Anomaly Query Language) System : enabling timely</p>
    <p>anomaly detection via querying the real-time stream of system monitoring data Concisely express four types of anomaly models Efficient stream management and concurrent query execution based on domain specifics Project website: https://sites.google.com/site/saqlsystem/</p>
    <p>Q &amp; A Thank you!</p>
  </div>
</Presentation>
