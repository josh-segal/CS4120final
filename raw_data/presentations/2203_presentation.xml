<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Virtual Guard: A Track-Based Translation Layer for Shingled Disks</p>
    <p>M AN S O U R S H AFAE I &amp; P ETER DESNOYERS</p>
    <p>N O RT H E AS T E R N U N I V E R S I T Y</p>
  </div>
  <div class="page">
    <p>Outline qIntroduction</p>
    <p>qPrevious work</p>
    <p>qVirtual Guard</p>
    <p>qEvaluation</p>
    <p>qConclusion</p>
  </div>
  <div class="page">
    <p>Shingled Disks qPartially overlapping tracks for more capacity</p>
    <p>qRandom writes may corrupt data on the next track in shingling direction qNeed a translation layer to map data to a location with no/invalid data ahead</p>
  </div>
  <div class="page">
    <p>Shingling Translation Layers (STLs) qMapping type qStatic qBand + persistent cache (Read-Modify-Write)</p>
    <p>qDynamic</p>
    <p>qMapping granularity qLBA based  DM-SMR [FAST15] qTrack based  SMaRT [He &amp; Du]</p>
    <p>qMapping location qHost qDevice  plug compatibility qHost+Device</p>
  </div>
  <div class="page">
    <p>STL Issues 1. Large mapping tables qRequiring multiple rotations to persist</p>
  </div>
  <div class="page">
    <p>Traditional STLs (DM-SMR) qSpace divided into multiple bands</p>
    <p>qA persistent cache</p>
    <p>qUpdates go to cache</p>
    <p>qCache cleaning with one band at-a-time</p>
    <p>ccccc</p>
    <p>Cache</p>
    <p>Band 0</p>
    <p>Band 1</p>
  </div>
  <div class="page">
    <p>Virtual Guard qA track-based shingling translation layer</p>
    <p>qStatic mapping with a cache at outer diameter</p>
    <p>qCaches the next track in shingling direction before any updates</p>
    <p>qWrites in-place</p>
    <p>Tx Tx+1 Map</p>
  </div>
  <div class="page">
    <p>Virtual Guard (Cont.) qTreating cached tracks the same qRelocating the next track to the WF and then write in-place</p>
    <p>qOn-demand FIFO based 2-band cleaning</p>
    <p>qExtremely small map size (&lt;30K for a 5TB drive) qPer track info for tracks in cache qPersistent cache at outer diameter (Biggest tracks) qPiggyback the map info on track that was copied</p>
    <p>Tx Tx+1 Map</p>
  </div>
  <div class="page">
    <p>Virtual Guard (Cont.) qLess number of cleanings due to track level write locality qCache usage not a function of number of writes any more</p>
    <p>qLow cleaning overheads qReading tracks as oppose to scattered updates</p>
  </div>
  <div class="page">
    <p>Demo</p>
    <p>c ccccccc</p>
    <p>Virtual Guard Traditional STLs</p>
    <p>ccccccc</p>
  </div>
  <div class="page">
    <p>Evaluation qImplemented in an accurate SMR simulator qCompared to DM-SMR with identical characteristics qForm factor: 3.5 qSize: 5TB qRPM: 5980 qTrack size: 1.8-0.9 MB qMapping type: static qBand size: 20 tracks qCache size: ~24GB qCache location: outer diameter qMap size: ~30K vs ~1.3MB qCleaning thresholds: 9194 vs. 22986</p>
    <p>qTraces  MSR Cambridge, CloudPhysics and random writes</p>
  </div>
  <div class="page">
    <p>MSR Block Traces qUp to 15X reduction in 99.9th percentile latency</p>
    <p>Latency (ms)</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>Latency (ms)</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>Latency (ms)</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>Latency (ms)</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>hm_0 mds_0 proj_0 rsrch_0</p>
    <p>src1_2 stg_0 usr_0 wdev_0</p>
    <p>DM-SMR Vguard</p>
  </div>
  <div class="page">
    <p>MSR Traces -- Cache Utilization qLess than 40% in terms of log length</p>
    <p>hm _0</p>
    <p>hm _1</p>
    <p>m ds_0</p>
    <p>proj_0 proj_3 rsrch_0 rsrch_1 rsrch_2 src1_2 src2_0 src2_1 stg_0 usr_0 w</p>
    <p>dev_0 w</p>
    <p>dev_1 w</p>
    <p>dev_2 T</p>
    <p>ra ck</p>
    <p>U til</p>
    <p>iz at</p>
    <p>io n</p>
    <p>(% )</p>
    <p>Trace</p>
    <p>Tracks Log Length</p>
  </div>
  <div class="page">
    <p>CloudPhysics Traces qTraces on multi TB drives qTrack utilization across all traces</p>
    <p>IO P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>(% )</p>
    <p>Latency (ms)</p>
    <p>w27 w29 w53 w54</p>
    <p>um be</p>
    <p>r o f U</p>
    <p>ni qu</p>
    <p>e T</p>
    <p>ra ck</p>
    <p>s W</p>
    <p>ri tte</p>
    <p>n</p>
    <p>Number of Writes</p>
  </div>
  <div class="page">
    <p>Random Writes</p>
    <p>q~30% reduction in 99th percentile and max latency</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s)</p>
    <p>Randomness Space</p>
    <p>Vguard-90% DM-SMR-90%</p>
    <p>Vguard-99% DM-SMR-99%</p>
    <p>Vguard-Max DM-SMR-Max</p>
  </div>
  <div class="page">
    <p>Conclusions qVguard represents a novel approach to STLs, using persistent cache space for non-written tracks while performing writes in-place. qCache consumption not a function of the volume of data written, but rather of the</p>
    <p>pattern of written LBAs regardless of the number of times they are written</p>
    <p>qIn many real-world cases the guard track set is seen to fit comfortably within a rather small persistent cache qOffering near-conventional-drive levels of performance.</p>
  </div>
</Presentation>
