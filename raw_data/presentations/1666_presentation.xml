<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Towards Discrete Control for the Internet of Things and Smart Environments</p>
    <p>Mengxuan Zhao, Gilles Privat, Orange Labs, Grenoble, France Eric Rutten, INRIA, Grenoble, France</p>
    <p>Hassane Alla GIPSA Lab, Grenoble, France</p>
    <p>June 25, 2013</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 IoT and smart environments</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 IoT and smart environments</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Motivation . IoT and smart environments ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>massive instrumentation, networked sensors and actuators outside-in robots, sense and act upon their own inner space smart homes, smart buildings or smart cities</p>
    <p>. Control techniques for autonomic management ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>model possible behaviours, and control objectives, separately classically continuous time dynamics and differential equations discrete control, events and states, Petri nets or automata</p>
    <p>. Discrete control for the IoT ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>systematic modelling framework ; case study in smart home automata ; Discrete Controller Synthesis (DCS)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>Interfacing to the IoT and Smart Environments Reactive languages, DCS Discrete control as MAPE-K</p>
    <p>. . .3 IoT and smart environments</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Interfacing to the IoT and Smart Environments</p>
    <p>Entity Entity Entity Entity</p>
    <p>Supervisory Controller 1</p>
    <p>Supervisory Controller 2</p>
    <p>Application 1 Application 2</p>
    <p>Sensor/ Actuator</p>
    <p>Sensor/ Actuator</p>
    <p>Sensor/ Actuator</p>
    <p>Other Service</p>
    <p>Space Space Thing Thing</p>
    <p>Application Layer</p>
    <p>Service Layer</p>
    <p>Entity Abstraction Layer</p>
    <p>Device Layer</p>
    <p>Pgysical Plant</p>
    <p>. monitoring and controlling of entities (rooms, appliances, ...) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>intermediate abstraction layer HAL (Home Abstraction Layer) supervisory controllers as service : emphasis on genericity</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Reactive languages, synchronous programming . Modelling formalism and programming language ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>reaction to input flows  output flows data-flow nodes and equations ; mode automata (FSM) parallel (synchronous) and hierarchical composition</p>
    <p>synchronous languages, (25+ years) tools: compilers (e.g., Heptagon), code generation, verification, ...</p>
    <p>example: delayable task control (in Heptagon) delayable(r,c,e) = a,s</p>
    <p>Idle Wait</p>
    <p>e r and c/s</p>
    <p>Active c/s</p>
    <p>r and not c</p>
    <p>a = true</p>
    <p>a = falsea = false node delayable(r,c,e:bool) returns (a,s:bool)</p>
    <p>let automaton</p>
    <p>state Idle do</p>
    <p>a = false; s = r and c</p>
    <p>until r and c then Active</p>
    <p>| r and not c then Wait</p>
    <p>state Wait do a = false; s = c</p>
    <p>until c then Active</p>
    <p>state Active do a = true; s=false</p>
    <p>until e then Idle</p>
    <p>end tel</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u) Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Trans State Out ZY</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u) Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Y c Y u Trans State Out</p>
    <p>ZY</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u)</p>
    <p>Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Ctrlr Y c</p>
    <p>Y u Trans State Out ZY</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u) Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>BZR programming language [http://bzr.inria.fr]</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>built on top of nodes in Heptagon to each contract, associate controllable variables, local at compile-time (user-friendly DCS),</p>
    <p>compute a controller for each component when no controllable inputs : verification by model-checking step and reset functions ; executable code : C, Java, ...</p>
    <p>OutCTrC StC</p>
    <p>Trans StateCtrlr</p>
    <p>eA, eG</p>
    <p>xi</p>
    <p>contract</p>
    <p>Out yj</p>
    <p>ck</p>
    <p>body</p>
    <p>twotasks(r1, e1, r2, e2) = a1, s1, a2, s2 enforce not (a1 and a2) with c1, c2</p>
    <p>(a1, s1) = delayable(r1, c1, e1);</p>
    <p>(a2, s2) = delayable(r2, c2, e2)</p>
    <p>&amp; G. Delaval &amp; H. Marchand [ACM LCTES10] [jDEDS13] 9/25</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Discrete control as MAPE-K</p>
    <p>sensor</p>
    <p>execute knowledge</p>
    <p>monitor</p>
    <p>analyse plan</p>
    <p>actuator</p>
    <p>managed element</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>. .</p>
    <p>autonomic MAPE-K flows : sensor observations to reconfiguration actions reactive language BZR used as DSL for decision</p>
    <p>sensor</p>
    <p>state inputs</p>
    <p>actuator</p>
    <p>managed element</p>
    <p>outputs</p>
    <p>transition function</p>
    <p>control</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>FSM instanciation of MAPE-K exhibit state (observability) accept events or conditions (controllability)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Hierarchical architecture control</p>
    <p>state inputs outputs</p>
    <p>transition function</p>
    <p>sensor</p>
    <p>state inputs</p>
    <p>actuator</p>
    <p>outputs</p>
    <p>transition function</p>
    <p>sensor</p>
    <p>state inputs</p>
    <p>actuator</p>
    <p>outputs</p>
    <p>transition function</p>
    <p>controlcontrol</p>
    <p>managed element</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>hierarchical MAPE-K, through additional interfaces in components : composites using life-cycles of subcomponents implementation : step</p>
    <p>synthesized and generated off-line called at run-time in composite controller</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 IoT and smart environments</p>
    <p>Target environments Reconfiguration policy</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Target environments</p>
    <p>lamp</p>
    <p>room</p>
    <p>window</p>
    <p>radiator</p>
    <p>door</p>
    <p>TV washing machine</p>
    <p>oven</p>
    <p>sensor readings</p>
    <p>actuator commands</p>
    <p>C o n t r o l l e r</p>
    <p>System Model</p>
    <p>abstracted by HAL</p>
    <p>s t a t e</p>
    <p>cm cn ck</p>
    <p>. Smart home example ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>set of entities, observation and control possibilities issues of safety (source of light on in case of presence), issues of economy or comfort (instantaneous power peaks)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Reconfigurable entities</p>
    <p>. Basic entities in the apartment ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>door, window lamp, TV, radiator (off, frost-free, eco or high mode) oven : off, heating up, maintaining its current temperature washing machine : phases ; can be suspended</p>
    <p>. Sensors and actuators ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>presence, door/window (open or closed) smart plugs for TV or lamp, suspend the wash machine</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Reconfiguration policy . 4 categories of objectives ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>safety (sa) security (se) energy efficiency (e) comfort (c)</p>
    <p>. System objectives ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>...1 (sa) at least one light source on when room is occupied</p>
    <p>...2 (se) close window and door when room isnt occupied</p>
    <p>...3 (e) if window or door open, radiator either off or frost-free</p>
    <p>...4 (e) if room inoccupied, no light on and radiator off or frost-free</p>
    <p>...5 (sa,e) total power under current threshold (3 modes: minimal-safety, comfort, eco)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 IoT and smart environments</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>System behaviors model Control objective specification</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>System behaviors model (i)</p>
    <p>closed open pushi &amp; c_doori</p>
    <p>pushi or not c_doori door_openi</p>
    <p>= true door_openi = false</p>
    <p>pushi</p>
    <p>c_doori door_openi</p>
    <p>doori</p>
    <p>empty ocupied</p>
    <p>presencei</p>
    <p>not presencei room_oci = true</p>
    <p>room_oci = false</p>
    <p>roomi</p>
    <p>presencei room_oci</p>
    <p>. door and room ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>. .</p>
    <p>two states / configurations controllability</p>
    <p>door : prevent opening, close room : observer only</p>
    <p>off frost</p>
    <p>protection</p>
    <p>up1</p>
    <p>c1</p>
    <p>state</p>
    <p>rad</p>
    <p>down1 eco</p>
    <p>power</p>
    <p>(0) (300) (1500)</p>
    <p>high (2000)</p>
    <p>up2</p>
    <p>down2</p>
    <p>up1 or not c1</p>
    <p>down1 or not c1</p>
    <p>up1 &amp; c1</p>
    <p>down1 or not c1</p>
    <p>down2 or not c2</p>
    <p>up2 &amp; c2</p>
    <p>up2 &amp; c2</p>
    <p>down1 or not c1</p>
    <p>c2</p>
    <p>. radiator / heater ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>four states / configurations controllability</p>
    <p>prevent going higher force going lower</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>System behaviors model (ii)</p>
    <p>off water</p>
    <p>fill</p>
    <p>washing</p>
    <p>rinse</p>
    <p>spin</p>
    <p>standby</p>
    <p>start end &amp; not c</p>
    <p>end &amp; c</p>
    <p>end (250)</p>
    <p>(200)</p>
    <p>(800)</p>
    <p>(0)</p>
    <p>washing machine</p>
    <p>end</p>
    <p>start</p>
    <p>c</p>
    <p>state</p>
    <p>power</p>
    <p>end</p>
    <p>(0)</p>
    <p>end</p>
    <p>(15)</p>
    <p>c</p>
    <p>. washing machine ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>phases, with power standby controllable</p>
    <p>off</p>
    <p>heat</p>
    <p>maintain reheat</p>
    <p>standby</p>
    <p>start &amp; not c</p>
    <p>start &amp; c</p>
    <p>temp_ok</p>
    <p>(1500)</p>
    <p>(300)</p>
    <p>(0)</p>
    <p>oven</p>
    <p>finish</p>
    <p>start</p>
    <p>c state</p>
    <p>power cold (0)</p>
    <p>(1000)</p>
    <p>temp_ok</p>
    <p>finish</p>
    <p>finish finish</p>
    <p>c</p>
    <p>cold &amp; c</p>
    <p>temp_ok</p>
    <p>.oven</p>
    <p>..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>System behaviors model (iii)</p>
    <p>minimal safety</p>
    <p>eco_input eco</p>
    <p>management policy</p>
    <p>comfort _input</p>
    <p>eco</p>
    <p>comfort</p>
    <p>comfort</p>
    <p>eco_input</p>
    <p>not eco_input</p>
    <p>eco_input not</p>
    <p>comfort_input</p>
    <p>comfort_input</p>
    <p>comfort_input</p>
    <p>PL=5000</p>
    <p>PL=7000</p>
    <p>PL=3000</p>
    <p>PL</p>
    <p>. Global system behavior model ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>parallel composition of instances of automata global power consumption functions, in terms of the local ones totalPower = p(wm) + p(ov ) + p(rd ) 3 management policies : 3 states with different PL</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Control objective specification</p>
    <p>. Conjunction of five rules ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>...1 room_oc  lamp_on  tv _on</p>
    <p>...2 room_oc  (d _open  w _open)</p>
    <p>...3 (d _open  w _open)  (rad _off  rad _frost)</p>
    <p>...4 room_oc  ((lamp_on tv _on)(rad _off rad _frost))</p>
    <p>...5 totalPower  PL</p>
    <p>made invariant by control ; controller synthesized tool-supported : BZR</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 IoT and smart environments</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Implementation and simulation</p>
    <p>. BZR encoding and DCS ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>textual syntax for automata and contracts executable code generation (C or Java)</p>
    <p>. Simulation ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>MiLeSEnS (Multi-Level Smart Environment Simulator) sensor and actuator models</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 IoT and smart environments</p>
    <p>. . .4 Modelling as a DCS problem</p>
    <p>. . .5 Simulation</p>
    <p>. . .6 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Conclusions</p>
    <p>. DCS for IoT ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>first results in using discrete supervisory controllers applied to the IoT and smart homes and buildings</p>
    <p>. Systematic modeling framework ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>behavioral modeling of typical entities formulation of control objectives of typical categories</p>
    <p>(safety, security, energy, comfort) automatic generation of controllers development and experimental validation</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . . IoT and smart environments</p>
    <p>Perspectives . Perspectives ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Domain-Specific Language for smart environments generation of LTS and objectives</p>
    <p>more DCS : modular, quantitative ; identification of models more complete experiments</p>
    <p>. Part of a general approach using discrete control for computing ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>behavioral modeling using LTSs : high level</p>
    <p>automatic generation (DCS) : safe, max.permissive</p>
    <p>tool support (BZR language) used also for :</p>
    <p>coordinating administration loops in the Cloud or HPC managing reconfigurable architectures (FPGA)</p>
  </div>
</Presentation>
