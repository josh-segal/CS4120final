<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Spectre Returns! Speculation Attacks Using Return Stack Buffer</p>
    <p>Esmaeil Mohammadian,</p>
    <p>Khaled N. Khasawneh, Chengyue Song</p>
    <p>and Nael Abu-Ghazaleh University of California, Riverside</p>
    <p>WOOT 2018  BALTIMORE, USA</p>
  </div>
  <div class="page">
    <p>New vulnerabilities in modern processors</p>
    <p>Spectre</p>
    <p>v1/v2/Meltdown(v3)</p>
    <p>Jan 2018 2</p>
  </div>
  <div class="page">
    <p>New vulnerabilities in modern processors</p>
    <p>Spectre</p>
    <p>v1/v2/Meltdown(v3)</p>
    <p>Jan 2018 May 2018</p>
    <p>Speculative store</p>
    <p>bypass (v4)</p>
  </div>
  <div class="page">
    <p>New vulnerabilities in modern processors</p>
    <p>Spectre</p>
    <p>v1/v2/Meltdown(v3)</p>
    <p>Jan 2018 May 2018 July 2018</p>
    <p>Speculative store</p>
    <p>bypass (v4)</p>
    <p>SpectreRSB(v5?)</p>
    <p>/ ret2spec</p>
  </div>
  <div class="page">
    <p>New vulnerabilities in modern processors</p>
    <p>Spectre</p>
    <p>v1/v2/Meltdown(v3)</p>
    <p>Jan 2018 May 2018 July 2018</p>
    <p>Spectre v1.1 Spectre v1.2 SGXpectre Speculative store</p>
    <p>bypass (v4)</p>
    <p>SpectreRSB(v5?)</p>
    <p>/ ret2spec SpectreNG</p>
  </div>
  <div class="page">
    <p>New vulnerabilities in modern processors</p>
    <p>Spectre</p>
    <p>v1/v2/Meltdown(v3)</p>
    <p>Jan 2018 May 2018 July 2018</p>
    <p>Spectre v1.1 Spectre v1.2 SGXpectre Speculative store</p>
    <p>bypass (v4)</p>
    <p>SpectreRSB(v5?)</p>
    <p>/ ret2spec NetSpectre</p>
    <p>Aug 2018</p>
    <p>SpectreNG</p>
  </div>
  <div class="page">
    <p>Main components of the Attack</p>
    <p>Out of Order Execution Side channel Attack</p>
  </div>
  <div class="page">
    <p>Out of Order Execution(OoO)</p>
    <p>C ycle 7 C ycle 6 C ycle 5 C ycle 4 C ycle 3 C ycle 2 C ycle 1 C ycle 8</p>
    <p>Data mem</p>
    <p>Instr mem</p>
    <p>Reg file</p>
    <p>Reg file ALU</p>
    <p>Data mem</p>
    <p>Instr mem</p>
    <p>Reg file</p>
    <p>Reg file ALU</p>
    <p>Data mem</p>
    <p>Instr mem</p>
    <p>Reg file</p>
    <p>Reg file ALU</p>
    <p>$6 = $3 + $5</p>
    <p>beq $1, $2, . . .</p>
    <p>Insert bubble?</p>
    <p>$9 = $8 + $2</p>
    <p>Data mem</p>
    <p>Instr mem</p>
    <p>Reg file</p>
    <p>Reg file ALU</p>
    <p>Reorder?</p>
    <p>(delayed</p>
    <p>branch)</p>
    <p>Assume branch resolved here</p>
    <p>Here would need 1-2 more bubbles</p>
    <p>Speculation is critical to modern CPU performance</p>
  </div>
  <div class="page">
    <p>(OoO): Branch predictors  During speculation processors guess the future stream instructions of the</p>
    <p>program</p>
    <p>Better prediction improve the performance by increasing number of the committed instruction</p>
  </div>
  <div class="page">
    <p>Branch predictors</p>
  </div>
  <div class="page">
    <p>Branch predictors  Two hardware predictors:</p>
  </div>
  <div class="page">
    <p>Branch predictors  Two hardware predictors:</p>
    <p>Direction predictor guesses if branch is taken or not-taken (PHT)</p>
  </div>
  <div class="page">
    <p>Branch predictors  Two hardware predictors:</p>
    <p>Direction predictor guesses if branch is taken or not-taken (PHT)</p>
    <p>Target predictor guesses the target of the branches (BTB)</p>
  </div>
  <div class="page">
    <p>Cache Side channel Attacks</p>
    <p>Access to the data inside the cache is fast</p>
    <p>Loading data from memory is too slow</p>
  </div>
  <div class="page">
    <p>Cache Side channel Attacks</p>
    <p>Access to the data inside the cache is fast</p>
    <p>Loading data from memory is too slow</p>
    <p>Exploits timing differences that are introduced by the caches  Flush and reload</p>
    <p>Prime and probe</p>
  </div>
  <div class="page">
    <p>Side channel: Flush+Reload Attack</p>
    <p>Cache</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Victim</p>
    <p>CPU1</p>
    <p>ways</p>
    <p>set</p>
    <p>s</p>
    <p>L1</p>
    <p>D</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Attacker</p>
    <p>L1</p>
    <p>D</p>
    <p>Shared L3</p>
    <p>CPU2</p>
  </div>
  <div class="page">
    <p>Side channel: Flush+Reload Attack</p>
    <p>Cache</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Victim 1- Flush each line in the critical data</p>
    <p>Evicted</p>
    <p>CPU1</p>
    <p>ways</p>
    <p>set</p>
    <p>s</p>
    <p>L1</p>
    <p>D</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Attacker</p>
    <p>L1</p>
    <p>D</p>
    <p>Shared L3</p>
    <p>CPU2</p>
  </div>
  <div class="page">
    <p>Side channel: Flush+Reload Attack</p>
    <p>Cache</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Victim 1- Flush each line in the critical data2- Victim accesses critical</p>
    <p>data</p>
    <p>Evicted</p>
    <p>CPU1</p>
    <p>ways</p>
    <p>set</p>
    <p>s</p>
    <p>L1</p>
    <p>D</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Attacker</p>
    <p>L1</p>
    <p>D</p>
    <p>Shared L3</p>
    <p>CPU2</p>
  </div>
  <div class="page">
    <p>Side channel: Flush+Reload Attack</p>
    <p>Cache</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Victim 1- Flush each line in the critical data2- Victim accesses critical</p>
    <p>data 3- Reload critical data (measure time)</p>
    <p>Evicted</p>
    <p>CPU1</p>
    <p>ways</p>
    <p>set</p>
    <p>s</p>
    <p>L1</p>
    <p>D</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Attacker</p>
    <p>L1</p>
    <p>D</p>
    <p>Shared L3</p>
    <p>CPU2</p>
  </div>
  <div class="page">
    <p>Side channel: Flush+Reload Attack</p>
    <p>Cache</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Victim 1- Flush each line in the critical data2- Victim accesses critical</p>
    <p>data 3- Reload critical data (measure time)</p>
    <p>Evicted Time</p>
    <p>CPU1</p>
    <p>ways</p>
    <p>set</p>
    <p>s</p>
    <p>L1</p>
    <p>D</p>
    <p>L2</p>
    <p>L1-I</p>
    <p>Attacker</p>
    <p>L1</p>
    <p>D</p>
    <p>Shared L3</p>
    <p>CPU2</p>
  </div>
  <div class="page">
    <p>Putting it all together Attacks!</p>
  </div>
  <div class="page">
    <p>Main idea of all Attacks</p>
  </div>
  <div class="page">
    <p>Main idea of all Attacks</p>
  </div>
  <div class="page">
    <p>Main idea of all Attacks</p>
    <p>The instructions access sensitive data without permission (microarchitectural state changes)</p>
    <p>Load the data into the cache</p>
  </div>
  <div class="page">
    <p>Main idea of all Attacks</p>
    <p>The instructions access sensitive data without permission (microarchitectural state changes)</p>
    <p>Load the data into the cache</p>
  </div>
  <div class="page">
    <p>Example of attacks</p>
  </div>
  <div class="page">
    <p>Example of attacks</p>
    <p>Spectre Variant 1:</p>
  </div>
  <div class="page">
    <p>Example of attacks</p>
    <p>Spectre Variant 1:  Train the Direction predictor (PHT) to bypass bound checking and leak</p>
    <p>sensitive data.</p>
  </div>
  <div class="page">
    <p>Example of attacks</p>
    <p>Spectre Variant 1:  Train the Direction predictor (PHT) to bypass bound checking and leak</p>
    <p>sensitive data.</p>
    <p>Spectre Variant 2:</p>
  </div>
  <div class="page">
    <p>Example of attacks</p>
    <p>Spectre Variant 1:  Train the Direction predictor (PHT) to bypass bound checking and leak</p>
    <p>sensitive data.</p>
    <p>Spectre Variant 2:  Pollute the target predictor (BTB) by injecting</p>
    <p>the address of malicious gadget into the BTB</p>
    <p>Waiting for the victim to execute the malicious gadget speculatively and load sensitive data to the cache</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Why Return Stack Buffer (RSB)?  BTB can not predict the target of ret instructions properly.</p>
    <p>v tag target</p>
    <p>A:</p>
    <p>B:</p>
    <p>printf:</p>
    <p>ret</p>
    <p>call printf</p>
    <p>load</p>
    <p>call printf</p>
    <p>load</p>
    <p>Branch Target Buffer</p>
  </div>
  <div class="page">
    <p>Return Stack Buffer</p>
  </div>
  <div class="page">
    <p>Return Stack Buffer</p>
    <p>Predict address of ret instruction</p>
  </div>
  <div class="page">
    <p>Return Stack Buffer</p>
    <p>Predict address of ret instruction</p>
    <p>RSB is shared between two hardware threads</p>
  </div>
  <div class="page">
    <p>Return Stack Buffer</p>
    <p>Predict address of ret instruction</p>
    <p>RSB is shared between two hardware threads</p>
    <p>16 to 24 entries</p>
  </div>
  <div class="page">
    <p>Return Stack Buffer</p>
    <p>Predict address of ret instruction</p>
    <p>RSB is shared between two hardware threads</p>
    <p>16 to 24 entries</p>
    <p>Push pc+4 onto the RSB on each call instruction</p>
  </div>
  <div class="page">
    <p>Return Stack Buffer</p>
    <p>Predict address of ret instruction</p>
    <p>RSB is shared between two hardware threads</p>
    <p>16 to 24 entries</p>
    <p>Push pc+4 onto the RSB on each call instruction</p>
    <p>Pop an address off the RSB on each ret instruction</p>
  </div>
  <div class="page">
    <p>RSB Pollution</p>
  </div>
  <div class="page">
    <p>RSB Pollution</p>
    <p>Return Stack Buffer works perfectly for matched call/ret pairs.</p>
  </div>
  <div class="page">
    <p>RSB Pollution</p>
    <p>Return Stack Buffer works perfectly for matched call/ret pairs.</p>
    <p>RSB miss-speculates if return address in the RSB does not match the return address value in the software stack.</p>
  </div>
  <div class="page">
    <p>How to pollute RSB?</p>
  </div>
  <div class="page">
    <p>Overfill or Underfill of the RSB</p>
    <p>Direct pollution of the RSB</p>
    <p>Speculative pollution of the RSB</p>
    <p>RSB uses across execution contexts</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4</p>
    <p>How to pollute RSB?</p>
  </div>
  <div class="page">
    <p>Overfill or Underfill of the RSB</p>
    <p>Direct pollution of the RSB</p>
    <p>Speculative pollution of the RSB</p>
    <p>RSB uses across execution contexts</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4</p>
    <p>How to pollute RSB?</p>
  </div>
  <div class="page">
    <p>ret</p>
    <p>call</p>
    <p>Direct pollution of the RSB</p>
    <p>pop; jmp address;</p>
    <p>push address; ret;</p>
    <p>push address; jmp address;</p>
  </div>
  <div class="page">
    <p>ret  Leave a value on RSB that has been removed from the software stack</p>
    <p>call</p>
    <p>Direct pollution of the RSB</p>
    <p>pop; jmp address;</p>
    <p>push address; ret;</p>
    <p>push address; jmp address;</p>
  </div>
  <div class="page">
    <p>ret  Leave a value on RSB that has been removed from the software stack</p>
    <p>call</p>
    <p>A return value exists on the software stack that is not matched by a value in the RSB</p>
    <p>Direct pollution of the RSB</p>
    <p>pop; jmp address;</p>
    <p>push address; ret;</p>
    <p>push address; jmp address;</p>
  </div>
  <div class="page">
    <p>On a context switch the RSB values left over from an executing thread are reused by the next thread</p>
    <p>RSB use across execution contexts</p>
    <p>RSB</p>
    <p>Thread 1 Thread 2</p>
    <p>cpu core</p>
  </div>
  <div class="page">
    <p>SpectreRSB  Attack 1:Same process</p>
    <p>Attack 2:Across threads/process  Colluding threads (user)</p>
    <p>Colluding threads (kernel)</p>
    <p>Cross-process</p>
    <p>Attack 3: Return in SGX</p>
    <p>Attack 4: Kernel from user</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack  Lunched from a process to part of its own address space</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack  Lunched from a process to part of its own address space</p>
    <p>Break Sandbox boundaries</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack  Lunched from a process to part of its own address space</p>
    <p>Break Sandbox boundaries  Difficult to implement the gadget to manipulate the stack using high</p>
    <p>level sandboxing primitives</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack  Lunched from a process to part of its own address space</p>
    <p>Break Sandbox boundaries  Difficult to implement the gadget to manipulate the stack using high</p>
    <p>level sandboxing primitives</p>
    <p>Enables the attacker to read kernel memory via the Meltdown bug</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack  Lunched from a process to part of its own address space</p>
    <p>Break Sandbox boundaries  Difficult to implement the gadget to manipulate the stack using high</p>
    <p>level sandboxing primitives</p>
    <p>Enables the attacker to read kernel memory via the Meltdown bug  KPTI prevents it</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>main</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>main</p>
    <p>speculative</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Attack 1: Basic Attack 0X00000010</p>
    <p>pollute:</p>
    <p>push %rbp</p>
    <p>mov %rsp,%rbp</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rdi</p>
    <p>pop %rbp</p>
    <p>clflush (%rsp)</p>
    <p>retq</p>
    <p>speculative:</p>
    <p>call pollute</p>
    <p>movzx (%[array],rbx)</p>
    <p>main:</p>
    <p>call speculative</p>
    <p>rdtscp</p>
    <p>access</p>
    <p>rdtscp</p>
    <p>Software Stack</p>
    <p>RSB</p>
    <p>arguments</p>
    <p>ebp old value</p>
    <p>Local variables</p>
    <p>arguments</p>
    <p>main</p>
    <p>speculative</p>
    <p>pollute</p>
  </div>
  <div class="page">
    <p>Defenses</p>
    <p>Microcode patches  Lfence</p>
    <p>IBRS</p>
    <p>IBPB</p>
    <p>Software patches  Retpoline</p>
    <p>RSBstuffing</p>
  </div>
  <div class="page">
    <p>Microcode patches</p>
  </div>
  <div class="page">
    <p>LFENCE</p>
    <p>A barrier after branch instruction to stop speculative execution</p>
    <p>Microcode patches</p>
  </div>
  <div class="page">
    <p>LFENCE</p>
    <p>A barrier after branch instruction to stop speculative execution</p>
    <p>Indirect Branch Restricted Speculation(IBRS)</p>
    <p>Speculation of indirect branches restricted by IBRS</p>
    <p>Microcode patches</p>
  </div>
  <div class="page">
    <p>LFENCE</p>
    <p>A barrier after branch instruction to stop speculative execution</p>
    <p>Indirect Branch Restricted Speculation(IBRS)</p>
    <p>Speculation of indirect branches restricted by IBRS</p>
    <p>Indirect Branch Predictor Barrier (IBPB)</p>
    <p>To prevent software running before the barrier to affect the indirect branch prediction of software running after the barrier</p>
    <p>Microcode patches</p>
  </div>
  <div class="page">
    <p>Software Patch: RSB refilling</p>
    <p>RSB underfill (Skylake+)</p>
    <p>void rsb_stuff(void) {</p>
    <p>asm(&quot;.rept 16\n&quot; &quot;call 1f\n&quot;</p>
    <p>&quot;pause ; lfence\n&quot;</p>
    <p>&quot;1: \n</p>
    <p>&quot;.endr\n&quot;</p>
    <p>&quot;addq $(8 * 16),%rsp\n&quot;);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Software Patch: RSB refilling</p>
    <p>RSB underfill (Skylake+)</p>
    <p>RSB switch to BTB if RSB is empty</p>
    <p>void rsb_stuff(void) {</p>
    <p>asm(&quot;.rept 16\n&quot; &quot;call 1f\n&quot;</p>
    <p>&quot;pause ; lfence\n&quot;</p>
    <p>&quot;1: \n</p>
    <p>&quot;.endr\n&quot;</p>
    <p>&quot;addq $(8 * 16),%rsp\n&quot;);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Software Patch: RSB refilling</p>
    <p>RSB underfill (Skylake+)</p>
    <p>RSB switch to BTB if RSB is empty</p>
    <p>Enables attacker to bypass defense</p>
    <p>void rsb_stuff(void) {</p>
    <p>asm(&quot;.rept 16\n&quot; &quot;call 1f\n&quot;</p>
    <p>&quot;pause ; lfence\n&quot;</p>
    <p>&quot;1: \n</p>
    <p>&quot;.endr\n&quot;</p>
    <p>&quot;addq $(8 * 16),%rsp\n&quot;);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Software Patch: RSB refilling</p>
    <p>RSB underfill (Skylake+)</p>
    <p>RSB switch to BTB if RSB is empty</p>
    <p>Enables attacker to bypass defense</p>
    <p>Fill the RSB with a sequence of benign address</p>
    <p>void rsb_stuff(void) {</p>
    <p>asm(&quot;.rept 16\n&quot; &quot;call 1f\n&quot;</p>
    <p>&quot;pause ; lfence\n&quot;</p>
    <p>&quot;1: \n</p>
    <p>&quot;.endr\n&quot;</p>
    <p>&quot;addq $(8 * 16),%rsp\n&quot;);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Attack 2: Across different threads/process</p>
    <p>Attack setup:</p>
    <p>The attacker and victim run on a same core (Share RSB)</p>
    <p>Synchronize threads using futex operations to control their interleaving</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Attack 2.a: Colluding threads (User)</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Poison RSB1</p>
    <p>Attack 2.a: Colluding threads (User)</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Poison RSB</p>
    <p>Flushing the stack from cache</p>
    <p>Attack 2.a: Colluding threads (User)</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Poison RSB</p>
    <p>Flushing the stack from cache</p>
    <p>Attack 2.a: Colluding threads (User)</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Poison RSB</p>
    <p>Flushing the stack from cache</p>
    <p>Attack 2.a: Colluding threads (User)</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Poison RSB</p>
    <p>Flushing the stack from cache</p>
    <p>Attack 2.a: Colluding threads (User)</p>
    <p>Speculative load4</p>
  </div>
  <div class="page">
    <p>Password</p>
    <p>RSB</p>
    <p>Cache</p>
    <p>Poison RSB</p>
    <p>Flushing the stack from cache</p>
    <p>Attack 2.a: Colluding threads (User)</p>
    <p>Speculative load4</p>
  </div>
  <div class="page">
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Blocking syscall(kernel)</p>
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Blocking syscall(kernel)</p>
    <p>Polluting the RSB</p>
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Blocking syscall(kernel)</p>
    <p>Polluting the RSB</p>
    <p>Flushing the cache</p>
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Blocking syscall(kernel)</p>
    <p>Polluting the RSB</p>
    <p>Flushing the cache</p>
    <p>Return from blocking call</p>
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Blocking syscall(kernel)</p>
    <p>Polluting the RSB</p>
    <p>Flushing the cache</p>
    <p>Return from blocking call</p>
    <p>Execute attackers gadget</p>
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Blocking syscall(kernel)</p>
    <p>Polluting the RSB</p>
    <p>Flushing the cache</p>
    <p>Flush+Reload</p>
    <p>Return from blocking call</p>
    <p>Execute attackers gadget</p>
    <p>Attack2.b: Colluding threads(kernel)</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
    <p>Update: linux-mainline released a new patch based</p>
    <p>on our suggestion to refill RSB unconditionally</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
    <p>Update: linux-mainline released a new patch based</p>
    <p>on our suggestion to refill RSB unconditionally</p>
    <p>Retpoline</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
    <p>Update: linux-mainline released a new patch based</p>
    <p>on our suggestion to refill RSB unconditionally</p>
    <p>Retpoline  Only modifies indirect call and jmp</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2  RSB Refilling</p>
    <p>Linux has developed it for Skylake+ processors</p>
    <p>Xeon and older processor</p>
    <p>Microsoft windows does not implement it</p>
    <p>Update: linux-mainline released a new patch based</p>
    <p>on our suggestion to refill RSB unconditionally</p>
    <p>Retpoline  Only modifies indirect call and jmp</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
    <p>What if an attacker poison the RSB with an address from kernel(e.g ebpf)</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
    <p>What if an attacker poison the RSB with an address from kernel(e.g ebpf)</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
    <p>What if an attacker poison the RSB with an address from kernel(e.g ebpf)</p>
    <p>IBPB /IBRS</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
    <p>What if an attacker poison the RSB with an address from kernel(e.g ebpf)</p>
    <p>IBPB /IBRS  Does it issue in correct place?</p>
  </div>
  <div class="page">
    <p>Discussion on Attack 2</p>
    <p>SMEP  Prevent the kernel attack if the attacker gadget is in the user space</p>
    <p>What if an attacker poison the RSB with an address from kernel(e.g ebpf)</p>
    <p>IBPB /IBRS  Does it issue in correct place?</p>
    <p>Does IBPB reset the RSB in the latest microcode version?</p>
  </div>
  <div class="page">
    <p>Other Attack Scenarios Attack on SGX</p>
    <p>Reveal Data from SGX enclave</p>
    <p>Triggering an unmatched return</p>
    <p>IBPB prevent it based on the new contact with Intel engineer.</p>
    <p>Attack on other process</p>
    <p>Run on the same core</p>
    <p>Need to know the address of victims stack</p>
    <p>Bypassing ASLR</p>
    <p>RSB refilling/IBPB may stop the attack</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We introduced a new variant of Spectre attack which exploits Return Stack buffer</p>
    <p>Discussed different types of SpectreRSB against existing microcode and software patches</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
  </div>
</Presentation>
