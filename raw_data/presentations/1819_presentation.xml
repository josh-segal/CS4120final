<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>| | | 1</p>
    <p>Sebastian Biedermann, Stefan Katzenbeisser, Jakub Szefer</p>
    <p>Leveraging Virtual Machine Introspection</p>
    <p>for Hot-Hardening of Arbitrary Cloud-User</p>
    <p>Applications</p>
    <p>Security Engineering Group (SECENG), Technische Universitt Darmstadt, Germany</p>
    <p>Computer Architecture and Security Laboratory (CAS Lab),Yale University, USA</p>
    <p>Philadelphia, 17th  18th June 2014</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 2</p>
    <p>Introduction: Virtual Machine Introspection</p>
    <p>Virtual Machine Introspection (VMI) is the technique of locating and accessing</p>
    <p>specific memory regions of a running VM (user) from another running VM</p>
    <p>(admin) which is co-located on the same hardware.</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 3</p>
    <p>Related Work: Hot-Patching &amp; Run-time Program Analysis</p>
    <p>Hot-Patching:</p>
    <p>Upgrading a running program by modifying its code while it executes</p>
    <p>Hot-patching reduces downtime in systems</p>
    <p>Several papers in recent years (e.g. Payer et al. or Ramaswamy et al.)</p>
    <p>Run-time Program Analysis:</p>
    <p>Semi-automated techniques which can diagnose configuration errors</p>
    <p>Help finding the point of failure or can infer configuration requirements</p>
    <p>Often, they analyze byte code (Java)</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 4</p>
    <p>Hot-Hardening: An Overview</p>
    <p>Definition of Hot-Hardening:</p>
    <p>Continuous and transparent improvement of security-related</p>
    <p>configuration settings of running applications.</p>
    <p>We propose an agent:</p>
    <p>Transparent and scalable cloud service (Security-as-a-Service)</p>
    <p>No interruptions and no user interaction required, works autonomous</p>
    <p>Uses different techniques: VMI, live forensics on storage, live cloning, vBridge</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 5</p>
    <p>Hot-Hardening: An Overview</p>
    <p>Configuration settings of applications are almost always stored in memory</p>
    <p>and they are frequently referenced (e.g. a struct in the stack or the heap).</p>
    <p>Hot-Hardening procedure performed by the agent:</p>
    <p>Full replacement: 1) In memory 2) Config file in page cache 3) Config file on storage</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 6</p>
    <p>Hot-Hardening: An Overview</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 7</p>
    <p>Example: Apache2 Hot-Hardening</p>
    <p>Apache2's configuration file is located in /etc/apache2/apache2.conf.</p>
    <p>Settings are stored in a struct data type called server_rec defined in include/httpd.h.</p>
    <p>struct server_rec {</p>
    <p>...</p>
    <p>/** Timeout, before we give up */</p>
    <p>apr_interval_time_t timeout;</p>
    <p>/** Interval we will wait for another request */</p>
    <p>apr_interval_time_t keep_alive_timeout;</p>
    <p>/** Maximum requests per connection */</p>
    <p>int keep_alive_max;</p>
    <p>...</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 8</p>
    <p>Example: Apache2 Hot-Hardening</p>
    <p>Struct members are stored in the order they are declared (C99 standard)</p>
    <p>Ensuring correct alignment with padding and considering Little-Endianness in memory</p>
    <p>Example settings:</p>
    <p>Allowed time between new connections and first request: 300 s = 300x106 s = 11e1a300</p>
    <p>Allowed time for maintaining connection for next request: 30 s = 30 x 106 s = 1c9c380</p>
    <p>Allowed length of HTTP request lines in bytes: 8190 bytes = 1ffe</p>
    <p>Allowed number of requests per connection: 100 = 64</p>
    <p>Search pattern = 00a3e111(0)*?80c3c901 ... fe1f(0)*?64</p>
    <p>Can be located and replaced in anonymous mappings of Apache2</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 9</p>
    <p>Hot-Hardening of Arbitrary Applications</p>
    <p>Techniques need to be generic because application and settings are unknown</p>
    <p>Identification of currently deployed settings (find a potential configuration file)</p>
    <p>Investigate the applications memory for strings that appear to be file names</p>
    <p>Locate files on storage and search value unions</p>
    <p>Pattern generation and localization in memory (unknown order of settings)</p>
    <p>Create different patterns for all orders: (!/    !=0 )</p>
    <p>Scan the applications memory for the patterns</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 10</p>
    <p>Evaluation</p>
    <p>Timings required to analyze different example applications</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 11</p>
    <p>Hot-Hardening of Arbitrary Applications</p>
    <p>Changing unknown settings:</p>
    <p>Stepwise change single settings and execute previously defined tests</p>
    <p>Assumptions about security characteristics need to be made</p>
    <p>Meaningful and universal tests need to be evaluated</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 12</p>
    <p>Evaluation</p>
    <p>Feedback: Simple test on the network layer:</p>
    <p>Perform multiple connections successively and in parallel as well as logins</p>
    <p>Count TCP RST and FIN flags sent by the application</p>
    <p>Assumption: The more resets, the more restrictive is the application</p>
    <p>Results highlight:</p>
    <p>Could improve a setting of three of eight example applications</p>
    <p>E.g. could identify setting for limit of maximum allowed connections in parallel</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 13</p>
    <p>Summary</p>
    <p>Introduced Hot-Hardening as transparent cloud security service</p>
    <p>Proposed an agent which can autonomously change settings</p>
    <p>Presented setting discovery strategy for unknown applications</p>
    <p>Designed setting improvement strategy for unknown applications</p>
    <p>Ongoing Work:</p>
    <p>Use an optimization algorithm and more tests (e.g. for system calls)</p>
    <p>Hot-hardening when some information about application is known</p>
    <p>Computing custom-made settings for a target specific setup</p>
    <p>Adaptation of the settings of child processes independently</p>
  </div>
  <div class="page">
    <p>Leveraging Virtual Machine Introspection for Hot-Hardening of Arbitrary Cloud-User Applications | 14</p>
    <p>Thank you!</p>
    <p>Questions?</p>
    <p>Leveraging Virtual Machine Introspection</p>
    <p>for Hot-Hardening of Arbitrary Cloud-User Applications</p>
    <p>Sebastian Biedermann, Stefan Katzenbeisser, Jakub Szefer</p>
  </div>
</Presentation>
