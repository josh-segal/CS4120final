<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Formal Verification of Stack Manipulation in the SCIP Processor</p>
    <p>J. Aaron Pendergrass</p>
  </div>
  <div class="page">
    <p>High Level I Challenges to developing capability</p>
    <p>in formal methods: I Perceived high barrier to entry, I Specialized tools and jargon, I Need for a compelling but</p>
    <p>attainable demonstration.</p>
    <p>I Why we chose the SCIP processor: I Developed in house, I General purpose processor, I Simple design (5k lines VHDL), I No advanced processor features</p>
    <p>(pipelining, out-of-order execution, etc.),</p>
    <p>I For use in satellites  high reliability requirements.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Scope True Goal: To prove that the physical processor does what we want,</p>
    <p>Formal Specification</p>
    <p>ACL2 Model</p>
    <p>English Design</p>
    <p>Document VHDL Design Hardware</p>
    <p>but . . . I proof tools work on an abstract model, I what we want is not formally defined.</p>
    <p>Instead we prove that a model of the VHDL design meets certain correctness properties.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Scope True Goal: To prove that the physical processor does what we want,</p>
    <p>Formal Specification</p>
    <p>ACL2 Model</p>
    <p>English Design</p>
    <p>Document VHDL Design Hardware</p>
    <p>but . . . I proof tools work on an abstract model, I what we want is not formally defined.</p>
    <p>Instead we prove that a model of the VHDL design meets certain correctness properties.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Embedding of VHDL in ACL2</p>
    <p>I Focus on building a syntactic layer on ACL2 for easy translation.</p>
    <p>I Key Goals: I Incremental semantic refinements, I Direct manual translation of existing code, I Target for automated translation.</p>
    <p>ACL2 Model of SCIP Design</p>
    <p>I Test case for modeling framework.</p>
    <p>I Translate VHDL code, then prove axiomatic summaries of components.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>VHDL Modeling Framework</p>
    <p>Challenges</p>
    <p>I Large semantic gap between VHDL and ACL2. I VHDL processes all execute at the same time.</p>
    <p>I Human checkable translation. I Must match structure of original VHDL code.</p>
    <p>Solution I Use ACL2 (LISP) macros to wrap ACL2 implementation</p>
    <p>behind VHDL like syntax. I Based primarily on Georgelin, et al., A framework for VHDL</p>
    <p>combining theorem proving and symbolic simulation.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Supported VHDL</p>
    <p>Entities I Uses defstructure book to generate data type predicates,</p>
    <p>accessors, updaters, etc.</p>
    <p>I Nested components supported via copy-in/copy-out semantics.</p>
    <p>Processes I Mapped to ACL2 functions.</p>
    <p>I Generate theorems to guarantee some safety properties (e.g., no writing to inputs).</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Supported VHDL</p>
    <p>Architectures I Generate a single function that is the composition of all</p>
    <p>processes and subcomponent updates.</p>
    <p>I Generate theorems to show processes are order independent.</p>
    <p>But Wait. . . I Order independence isnt sufficient to guarantee the</p>
    <p>processes can be safely interleaved!</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Supported VHDL</p>
    <p>Architectures I Generate a single function that is the composition of all</p>
    <p>processes and subcomponent updates.</p>
    <p>I Generate theorems to show processes are order independent.</p>
    <p>But Wait. . . I Order independence isnt sufficient to guarantee the</p>
    <p>processes can be safely interleaved!</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Supported VHDL</p>
    <p>Architectures I Generate a single function that is the composition of all</p>
    <p>processes and subcomponent updates.</p>
    <p>I Generate theorems to show processes are order independent.</p>
    <p>But Wait. . . I Order independence isnt sufficient to guarantee the</p>
    <p>processes can be safely interleaved!</p>
    <p>I Fine for combinatorial processes (all of SCIP). I Problem for sequential processes with shared state.</p>
    <p>I But it is easy to change the macros to generate stronger theorems for guaranteeing determinism.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Supported VHDL</p>
    <p>Data Types</p>
    <p>I Originally based on ACL2s native integer type. I Easy for arithmetic, challenging for bit slicing operations</p>
    <p>(concatenation, truncation, etc.). I Simplification of VHDLs 9 valued logic:</p>
    <p>U (uninitialized), X (undefined), 0 (strong drive, logic 0), 1, (strong drive, logic 1), Z (high impedance), W (weak drive, unknown value), L (weak drive, logic 0), H (weak drive, logic 1), - (dont care).</p>
    <p>I Used a symbolic instruction representation to avoid complex bit operations.</p>
    <p>I Became problematic as we added type checking because data and instructions must traverse the same buses.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Supported VHDL</p>
    <p>Data Types</p>
    <p>I Migrated to lists of logical symbols I Operations such as truncation and concatenation become</p>
    <p>structurally recursive. I Required very little modification to existing SCIP model</p>
    <p>(mostly search and replace).</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>SCIP Design</p>
    <p>A Simple Forth Microprocessor</p>
    <p>I Designed for managing scientific instruments on satellites. I Low power, light weight, low gate count. I 16 and 32 bit versions (16 is standard).</p>
    <p>I No pipelining, No superscalar, No out-of-order.</p>
    <p>I Stack based design inspired by the Forth language.</p>
    <p>I Two stacks: parameter stack (P-stack) and return stack (R-stack).</p>
    <p>I Instructions may specify multiple behaviors such as an ALU operation, a P-stack modification, and a return.</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>SCIP Instructions</p>
    <p>Instructions Are Packed Structures I Only 18 different kinds of instructions.</p>
    <p>I  9356 different opcodes.</p>
    <p>Basic ALU Instruction</p>
    <p>Pop Return Stack After Execution</p>
    <p>Push Result On Top Of Operand Stack</p>
    <p>Addition</p>
    <p>Ignored</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>SCIP Correctness Proofs</p>
    <p>Parameter Stack Design</p>
    <p>I Many instructions can include a stack operation (Push, Pop, Swap, or Nop).</p>
    <p>I Processor stacks are represented by a set of data registers and two index registers.</p>
    <p>I On 16 bit SCIP: 16 2 byte data registers, 4 bit index registers.</p>
    <p>I If enabled, overflow/underflow may trigger reading/writing main memory.</p>
    <p>TOP</p>
    <p>OVERFLOW</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>SCIP Correctness Proofs</p>
    <p>Abstract Properties</p>
    <p>I Wed like to show that the register ring actually implements a stack.</p>
    <p>I In particular we need to show that the instructions correspond to abstract stack manipulation operations.</p>
    <p>I e.g., s  push(a)</p>
    <p>(a . s)</p>
    <p>I Model stacks using ACL2 lists (push  cons). I Focus on normal operation &amp; detecting exception cases</p>
    <p>(overflow/underflow)</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Graphically</p>
    <p>TOP</p>
    <p>OVERFLOW</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Actual Theorem Parameter Stack Push ! Cons</p>
    <p>(defthm scip push pstack cons (implies</p>
    <p>(and (scip pstack inputs ready p st) (not (equal (scip reset st) 1)) (not (rising edge (scip clk st))) (equal (scip stretch st) 0) (instr class stack (scip ir+ st)) (equal (stack op (scip ir+ st)) *st push*) (std logic defined list p (scip ptopi+ st)) (std logic defined list p (scip poveri+ st)) (integerp n) (&gt;= n 3))</p>
    <p>(equal (scip get pstack regfile as list</p>
    <p>(scip step (scip raise clock (scip step n n st)))) (let ((p (scip ptopi+ st)) (o (scip poveri+ st)))</p>
    <p>(cond ((equal (std logic list to int p) (std logic list to int o))</p>
    <p>(list (scip pnext+ st))) (t (cons (scip pnext+ st) (scip get pstack regfile as list st))))))))</p>
    <p>September 22, 2010</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Actual TheoremParameter Stack Push ! Cons (defthm scip push pstack cons</p>
    <p>(implies (and (scip pstack inputs ready p st) (not (equal (scip reset st) 1))</p>
    <p>(not (rising edge (scip clk st))) (equal (scip stretch st) 0) (instr class stack (scip ir+ st)) (equal (stack op (scip ir+ st)) *st push*) (std logic defined list p (scip ptopi+ st)) (std logic defined list p (scip poveri+ st)) (integerp n) (&gt;= n 3))</p>
    <p>(equal (scip get pstack regfile as list</p>
    <p>(scip step (scip raise clock (scip step n n st)))) (let ((p (scip ptopi+ st)) (o (scip poveri+ st)))</p>
    <p>(cond ((equal (std logic list to int p) (std logic list to int o))</p>
    <p>(list (scip pnext+ st))) (t (cons (scip pnext+ st) (scip get pstack regfile as list st))))))))</p>
    <p>September 22, 2010</p>
    <p>If the SCIP is valid and in stable state,</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Actual TheoremParameter Stack Push ! Cons (defthm scip push pstack cons</p>
    <p>(implies (and (scip pstack inputs ready p st) (not (equal (scip reset st) 1))</p>
    <p>(not (rising edge (scip clk st))) (equal (scip stretch st) 0) (instr class stack (scip ir+ st)) (equal (stack op (scip ir+ st)) *st push*) (std logic defined list p (scip ptopi+ st)) (std logic defined list p (scip poveri+ st)) (integerp n) (&gt;= n 3))</p>
    <p>(equal (scip get pstack regfile as list</p>
    <p>(scip step (scip raise clock (scip step n n st)))) (let ((p (scip ptopi+ st)) (o (scip poveri+ st)))</p>
    <p>(cond ((equal (std logic list to int p) (std logic list to int o))</p>
    <p>(list (scip pnext+ st))) (t (cons (scip pnext+ st) (scip get pstack regfile as list st))))))))</p>
    <p>September 22, 2010</p>
    <p>If the SCIP is valid and in stable state,</p>
    <p>then the P-stack at the next clock cycle, represented as a list...</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Actual TheoremParameter Stack Push ! Cons (defthm scip push pstack cons</p>
    <p>(implies (and (scip pstack inputs ready p st) (not (equal (scip reset st) 1))</p>
    <p>(not (rising edge (scip clk st))) (equal (scip stretch st) 0) (instr class stack (scip ir+ st)) (equal (stack op (scip ir+ st)) *st push*) (std logic defined list p (scip ptopi+ st)) (std logic defined list p (scip poveri+ st)) (integerp n) (&gt;= n 3))</p>
    <p>(equal (scip get pstack regfile as list</p>
    <p>(scip step (scip raise clock (scip step n n st)))) (let ((p (scip ptopi+ st)) (o (scip poveri+ st)))</p>
    <p>(cond ((equal (std logic list to int p) (std logic list to int o))</p>
    <p>(list (scip pnext+ st))) (t (cons (scip pnext+ st) (scip get pstack regfile as list st))))))))</p>
    <p>September 22, 2010</p>
    <p>If the SCIP is valid and in stable state,</p>
    <p>then the P-stack at the next clock cycle, represented as a list...</p>
    <p>... is equal to the original pnext register cons'ed onto the original</p>
    <p>P-stack represented as a list</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>VHDL Modeling Framework</p>
    <p>I Human readable/writable framework for modeling VHDL in ACL2.</p>
    <p>I Automates generation of basic sanity theorems.</p>
    <p>I Supports incremental refinements of VHDL semantics with little damage to target system model.</p>
    <p>SCIP Processor Verification I Demonstration of framework viability.</p>
    <p>I Models of nearly every functional entity of the SCIP processor.</p>
    <p>I Significant correctness proof for key SCIP functionality (stack manipulation).</p>
    <p>September 24, 2010</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Framework Enhancement I Improving auto-generated theorems (strength and proof</p>
    <p>speed).</p>
    <p>I Machine translation tool.</p>
    <p>SCIP Specific Proofs</p>
    <p>I Overflow and underflow behavior. I Proved correct detection of overflow/underflow condition. I Memory model and axiomatic definition of page relative</p>
    <p>addressing begun.</p>
    <p>I Return stack.</p>
    <p>I End goal is full instruction set specification.</p>
    <p>September 24, 2010</p>
  </div>
</Presentation>
