<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>D-TIME Distributed Threadless Independent Malware Execution</p>
    <p>for Runtime Obfuscation</p>
    <p>Jithin Pavithran Milan Patnaik Chester Rebeiro</p>
  </div>
  <div class="page">
    <p>Advanced Malware Detection Techniques</p>
    <p>Behavioral Detection Run time behavior</p>
    <p>connect(socket, ai_addr ...)</p>
    <p>GetAsyncKeyState(char)</p>
    <p>send(socket, ...)</p>
  </div>
  <div class="page">
    <p>D-TIME Distributed Threadless Independent Malware Execution</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>D-TIME</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Chunks (set of instructions)</p>
    <p>Split</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>T im</p>
    <p>e</p>
    <p>Target System</p>
    <p>Thread 1 Thread 2 Thread 1 Thread 2</p>
    <p>Process 1 Process 2</p>
  </div>
  <div class="page">
    <p>Difficulties of Distribution</p>
    <p>Sequence of Chunks</p>
    <p>Context</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Offline Phase</p>
    <p>Online Phase</p>
  </div>
  <div class="page">
    <p>D-TIME  Offline Phase</p>
    <p>... ;</p>
    <p>cmp [a], [b] ; if(a==b){</p>
    <p>jne a_unequal_b ;</p>
    <p>mov [a], 0 ; a = 0</p>
    <p>a_unequal_b: ; }</p>
    <p>mov [c], [d] ; c = d</p>
    <p>... ;</p>
  </div>
  <div class="page">
    <p>D-TIME  Offline Phase</p>
    <p>mov [c], [d] ; c = d</p>
    <p>... ;</p>
    <p>... ;</p>
    <p>cmp [a], [b] ; if(a==b){</p>
    <p>jne a_unequal_b ;</p>
    <p>mov [a], 0 ; a = 0</p>
    <p>Chunk 1</p>
    <p>Chunk 2</p>
    <p>Chunk 3</p>
  </div>
  <div class="page">
    <p>D-TIME  Offline Phase</p>
    <p>mov [c], [d] ; c = d</p>
    <p>... ;</p>
    <p>... ;</p>
    <p>cmp [a], [b] ; if(a==b){</p>
    <p>jne a_unequal_b ;</p>
    <p>mov ebx, 2</p>
    <p>jmp END</p>
    <p>jmp a_unequal_b:</p>
    <p>mov ebx, 3</p>
    <p>mov [a], 0 ; a = 0</p>
    <p>mov ebx, 3</p>
    <p>Chunk 1</p>
    <p>Chunk 2</p>
    <p>Chunk 3</p>
  </div>
  <div class="page">
    <p>D-TIME  Online Phase</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
  </div>
  <div class="page">
    <p>D-TIME  Online Phase</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
    <p>OS</p>
    <p>Process 1 Process 2 Process 3</p>
    <p>T1 T2 T3 T4 T5 T6</p>
    <p>Virtualization Layer - Emulator</p>
    <p>T im</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>D-TIME  Online Phase</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
    <p>A Function</p>
    <p>Gets executed in benign threads context</p>
    <p>Creates the virtualization layer</p>
    <p>Execute a chunk</p>
    <p>Maintaining</p>
    <p>Sequence of chunks</p>
    <p>Continuity of state (stack, registers, heap)</p>
    <p>Ensures completeness of malware</p>
  </div>
  <div class="page">
    <p>APC (Asynchronous Procedural Call)</p>
    <p>APC Queue</p>
    <p>Thread 1</p>
  </div>
  <div class="page">
    <p>APC (Asynchronous Procedural Call)</p>
    <p>APC Queue</p>
    <p>Thread 1</p>
    <p>Function 1</p>
    <p>Function 2</p>
  </div>
  <div class="page">
    <p>APC (Asynchronous Procedural Call)</p>
    <p>APC Queue</p>
    <p>Thread 1</p>
    <p>Alertable Wait State</p>
    <p>SleepEx</p>
    <p>SignalObjectAndWait</p>
    <p>MsgWaitForMultipleObjectsEx</p>
    <p>WaitForMultipleObjectsEx</p>
    <p>WaitForSingleObjectEx</p>
    <p>Function 2Function 1</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>a) State info b) Next chunk to execute</p>
    <p>a) Current state b) Next chunk Id</p>
    <p>Emulator Inter-emulator Comm. Channels SCBCInter-emulator Comm. Channels</p>
    <p>Steps:</p>
    <p>Online Phase: A series of emulator executions,</p>
    <p>Emulators</p>
    <p>Spawn in different threads</p>
    <p>Executing one chunk each</p>
    <p>Collectively completing the sequence.</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Regeneration</p>
    <p>Target System</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Regeneration</p>
    <p>Target System</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Regeneration</p>
    <p>Target System</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
    <p>Thread 1 Thread 2 Thread 3 Thread 4</p>
    <p>Process 1 Process 2</p>
    <p>Secondary Channel (Heap Memory)</p>
    <p>Secondary Channel (Heap Memory)</p>
    <p>Primary Channel (Shared Memory)</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
    <p>Thread 1 Thread 2 Thread 3 Thread 4</p>
    <p>Process 1 Process 2</p>
    <p>Secondary Channel (Heap Memory)</p>
    <p>Secondary Channel (Heap Memory)</p>
    <p>Primary Channel 1 (Shared Memory)</p>
    <p>Thread 5 Thread 6</p>
    <p>Process 3</p>
    <p>Secondary Channel (Heap Memory)</p>
    <p>Primary Channel 2 (Shared Memory)</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
    <p>a) De-allocated by application or</p>
    <p>b) Process exit</p>
    <p>Heap and Shared Memory</p>
  </div>
  <div class="page">
    <p>D-TIME</p>
    <p>Emulator Inter-emulator Comm. Channels SCBC</p>
    <p>a) Attaches the shared memory</p>
    <p>b) Executes a chunk</p>
    <p>c) Exit</p>
    <p>Has access rights to shared memory</p>
    <p>? Doesnt know the starting address</p>
    <p>Unknown location!</p>
  </div>
  <div class="page">
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>Counter:</p>
  </div>
  <div class="page">
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>Semaphore</p>
    <p>Counter:</p>
    <p>Creates a semaphore and set semaphore-counter = data</p>
  </div>
  <div class="page">
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>Semaphore</p>
    <p>Counter:</p>
  </div>
  <div class="page">
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>Semaphore</p>
    <p>Counter:</p>
    <p>Receivers</p>
  </div>
  <div class="page">
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>Works in Linux as well as Windows</p>
    <p>Semaphore</p>
    <p>Counter:</p>
    <p>Receivers</p>
  </div>
  <div class="page">
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>High Integrity</p>
    <p>Broadcasting</p>
    <p>Persistent</p>
    <p>As Convenient as a shared integer</p>
    <p>Converts semaphore to a shared integer</p>
  </div>
  <div class="page">
    <p>D-TIME Execution</p>
  </div>
  <div class="page">
    <p>Evades Detection by Distribution</p>
    <p>Performs Threadless execution</p>
    <p>Independent of Victim Process</p>
    <p>Completely Decentralized System</p>
    <p>High resilience</p>
    <p>D-TIME - Summary</p>
  </div>
  <div class="page">
    <p>MalWASH  Phase 2</p>
    <p>Process 1 Process 2 Process 3 Process 4</p>
    <p>T1 T2 T3 T4 T5 T6 T7 T8</p>
  </div>
  <div class="page">
    <p>MalWASH  Phase 2</p>
    <p>Process 1 Process 2 Process 3 Process 4</p>
    <p>T1 T2 T3 T4 T5 T6 T7 T8 T12T9 T10 T11</p>
    <p>Creates threads in benign processes</p>
  </div>
  <div class="page">
    <p>MalWASH  Phase 2</p>
    <p>T1 T2 T3 T4 T5 T6 T7 T8 T12T9 T10 T11 T12T9 T10 T11</p>
    <p>Created threads are well exposed!</p>
  </div>
  <div class="page">
    <p>MalWASH vs D-TIME</p>
    <p>MalWASH D-TIME</p>
    <p>Needs to Create Threads YES NO</p>
    <p>Has Dedicated Threads YES NO</p>
    <p>Needs Administrative Privilege YES NO</p>
    <p>Resilience - IMPROVED</p>
    <p>Communication mechanism - IMPROVED</p>
  </div>
  <div class="page">
    <p>Evaluation &amp; Results</p>
    <p>Key-logger Offline</p>
    <p>Key-logger Online</p>
    <p>Backdoor</p>
    <p>Ransomware</p>
    <p>Screenshot malware</p>
    <p>Window Monitor</p>
  </div>
  <div class="page">
    <p>Evaluation &amp; Results</p>
  </div>
  <div class="page">
    <p>Evaluation &amp; Results</p>
    <p>CPU usage vs Time</p>
  </div>
  <div class="page">
    <p>Evaluation &amp; Results</p>
    <p>CPU usage for different number of infected processes A</p>
    <p>vg .</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e o</p>
    <p>f v</p>
    <p>ic ti</p>
    <p>m p</p>
    <p>ro ce</p>
    <p>ss e</p>
    <p>s in</p>
    <p>%</p>
  </div>
  <div class="page">
    <p>Evaluation &amp; Results</p>
    <p>Performance Counters</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
    <p>Redesign APC</p>
    <p>Create QPC (Queue Privilege Class)</p>
    <p>Limit Recursive Queuing</p>
    <p>Principle of minimum disclosure</p>
    <p>Prevention</p>
    <p>Detection</p>
    <p>Detecting Comm. Channels</p>
    <p>Analyzing</p>
    <p>o CPU Usage</p>
    <p>o Context switches</p>
    <p>Removal</p>
    <p>Removing all Emulators</p>
    <p>Destroying all Comm. Channels</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>D-TIME: Distributed, Decentralized, threadless malware execution framework</p>
    <p>SCBC (Semaphore based Covert Broadcasting Channel)</p>
    <p>Tested D-TIME using 6 Malware against 10 anti-virus</p>
    <p>Suggested counter measures</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Artifact Paper</p>
  </div>
</Presentation>
