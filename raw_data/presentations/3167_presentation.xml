<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Static Detection of Second-Order Vulnerabilities in Web Applications</p>
    <p>Johannes Dahse and Thorsten Holz Ruhr-University Bochum</p>
    <p>USENIX Security 14, 20-22 August 2014, San Diego, CA, USA</p>
  </div>
  <div class="page">
    <p>First-Order Vulnerabilities</p>
    <p>&lt;?php $name = $_POST['name']; // ', 1), (version(), 1)-- $sql = INSERT INTO users VALUES ('$name', '$pwd'); mysql_query($sql); ?&gt;</p>
    <p>SQL injection</p>
    <p>user input</p>
    <p>application</p>
    <p>send!*$()&amp;/'\</p>
  </div>
  <div class="page">
    <p>Sanitization</p>
    <p>&lt;?php $name = mysql_real_escape_string($_POST['name']); $sql = INSERT INTO users VALUES ('$name', '$pwd'); mysql_query($sql); ?&gt;</p>
    <p>SQL injection (prevented)</p>
    <p>user input</p>
    <p>application</p>
    <p>send!*$()&amp;/'\</p>
  </div>
  <div class="page">
    <p>Second-Order Vulnerability (1)</p>
    <p>&lt;?php $name = mysql_real_escape_string($_POST['name']); $sql = INSERT INTO users VALUES ('$name', '$pwd'); mysql_query($sql); ?&gt;</p>
    <p>Database Write</p>
    <p>user input</p>
    <p>application database</p>
    <p>send</p>
    <p>write</p>
  </div>
  <div class="page">
    <p>Second-Order Vulnerability (2)  Database Read</p>
    <p>user input</p>
    <p>application database</p>
    <p>send</p>
    <p>write</p>
    <p>&lt;?php $result = mysql_query('SELECT * FROM users'); $row = mysql_fetch_assoc($result); echo $row['name']; ?&gt;</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>Multi-Step Exploit (1)</p>
    <p>database</p>
    <p>&lt;?php $name = $_POST['name']; // ', 'payload')-- $sql = INSERT INTO users VALUES ('$name', '$pwd'); mysql_query($sql); ?&gt;</p>
    <p>First-Order SQL injection</p>
    <p>user input</p>
    <p>application</p>
    <p>send!*$()&amp;/'\</p>
  </div>
  <div class="page">
    <p>Multi-Step Exploit (1)</p>
    <p>database</p>
    <p>write</p>
    <p>&lt;?php $name = $_POST['name']; // ', 'payload')-- $sql = INSERT INTO users VALUES ('$name', '$pwd'); mysql_query($sql); ?&gt;</p>
    <p>Exploit First-Order SQL injection</p>
    <p>user input</p>
    <p>application</p>
    <p>send</p>
  </div>
  <div class="page">
    <p>Multi-Step Exploit (2)</p>
    <p>database</p>
    <p>read</p>
    <p>Second-Order Command Execution</p>
    <p>application</p>
    <p>request</p>
    <p>&lt;?php $result = mysql_query('SELECT * FROM users'); $row = mysql_fetch_assoc($result); system('htpasswd -b .htpasswd Admin '.$row['pwd']); ?&gt;</p>
  </div>
  <div class="page">
    <p>Second-Order Vulnerabilities</p>
    <p>$_GET  $_POST  $_COOKIE  $_FILES  $_SERVER ...</p>
    <p>Databases  File Names  $_SESSION (File Content) ...</p>
    <p>Cross-Site Scripting  SQL Injection  Code Execution  File Inclusion  File Disclosure ...</p>
    <p>User input Persistent Data Store (PDS) Sensitive Sink</p>
  </div>
  <div class="page">
    <p>Second-Order Vulnerabilities</p>
    <p>$_GET  $_POST  $_COOKIE  $_FILES  $_SERVER ...</p>
    <p>Databases  File Names  $_SESSION (File Content) ...</p>
    <p>Cross-Site Scripting  SQL Injection  Code Execution  File Inclusion  File Disclosure ...</p>
    <p>User input Sensitive Sink</p>
    <p>Persistent Data Store (PDS)</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Static Code Analysis (no access to environment)  Analyze writes and reads to persistent data stores  Connect input and output points at the end of the analysis</p>
    <p>to detect second-order and multi-step vulnerabilities</p>
  </div>
  <div class="page">
    <p>Source: http://rewalls.com</p>
    <p>(Overview)</p>
  </div>
  <div class="page">
    <p>First-Order Taint Analysis</p>
    <p>mysql_query('insert into users values(null, '$name', '$pwd');</p>
    <p>$name = $_POST['name'];</p>
  </div>
  <div class="page">
    <p>First-Order Taint Analysis</p>
    <p>mysql_query('insert into users values(null, '$name', '$pwd');</p>
    <p>$name = $_POST['name'];</p>
  </div>
  <div class="page">
    <p>First-Order Taint Analysis</p>
    <p>mysql_query('insert into users values(null, '$name', '$pwd');</p>
    <p>$name = $_POST['name'];</p>
  </div>
  <div class="page">
    <p>First-Order Taint Analysis</p>
    <p>mysql_query('insert into users values(null, '$name', '$pwd');</p>
    <p>$name = $_POST['name'];</p>
    <p>Vulnerability Report</p>
    <p>POST[name] SQLi</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Analysis (write)</p>
    <p>mysql_query('insert into users values(null, '$name', '$pwd');</p>
    <p>$name = escape($_POST['name']);</p>
    <p>id name pass</p>
    <p>users</p>
  </div>
  <div class="page">
    <p>Multi-Step Taint Analysis (write)</p>
    <p>mysql_query('insert into users values(null, '$name', '$pwd');</p>
    <p>$name = $_POST['name'];</p>
    <p>id name pass</p>
    <p>users</p>
    <p>Vulnerability Report</p>
    <p>POST[name] SQLi</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Analysis (read)</p>
    <p>echo('Hi ' . $res['name'] . ' !');</p>
    <p>$res = mysql_query('select name from users');</p>
    <p>$row = mysql_fetch_assoc($res);</p>
    <p>PDS</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Analysis (read)</p>
    <p>echo('Hi ' . $res['name'] . ' !');</p>
    <p>$res = mysql_query('select name from users');</p>
    <p>$row = mysql_fetch_assoc($res);</p>
    <p>PDS</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Analysis (read)</p>
    <p>echo('Hi ' . $res['name'] . ' !');</p>
    <p>$res = mysql_query('select name from users');</p>
    <p>$row = mysql_fetch_assoc($res);</p>
    <p>PDS</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Analysis (read)</p>
    <p>echo('Hi ' . $res['name'] . ' !');</p>
    <p>$res = mysql_query('select name from users');</p>
    <p>$row = mysql_fetch_assoc($res);</p>
    <p>PDS</p>
    <p>*</p>
    <p>Temporary Vulnerability</p>
    <p>Report users[name]</p>
    <p>XSS</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Decision PDS</p>
    <p>*</p>
    <p>Temporary Vulnerability</p>
    <p>Report users[name]</p>
    <p>XSS</p>
    <p>id name pass</p>
    <p>PDS'</p>
    <p>users</p>
    <p>Reads Writes connect</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Decision PDS</p>
    <p>*</p>
    <p>Temporary Vulnerability</p>
    <p>Report users[name]</p>
    <p>XSS</p>
    <p>id name pass</p>
    <p>PDS'</p>
    <p>users</p>
    <p>tainted?</p>
    <p>Reads Writes</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Decision PDS</p>
    <p>*</p>
    <p>Temporary Vulnerability</p>
    <p>Report users[name]</p>
    <p>XSS</p>
    <p>id name pass</p>
    <p>PDS'</p>
    <p>users</p>
    <p>sanitized?</p>
    <p>Reads Writes</p>
  </div>
  <div class="page">
    <p>Second-Order Taint Decision PDS</p>
    <p>*</p>
    <p>Temporary Vulnerability</p>
    <p>Report users[name]</p>
    <p>XSS</p>
    <p>id name pass</p>
    <p>PDS'</p>
    <p>users</p>
    <p>Second-Order Vulnerability</p>
    <p>Report XSS</p>
    <p>Reads Writes</p>
  </div>
  <div class="page">
    <p>Source: http://rewalls.com</p>
  </div>
  <div class="page">
    <p>Selected Software</p>
    <p>osCommerce 2.3.3.4</p>
    <p>HotCRP 2.61</p>
    <p>OpenConf 5.30</p>
    <p>MyBloggie 2.1.4</p>
    <p>NewsPro 1.1.5</p>
    <p>Scarf 2007-02-27</p>
  </div>
  <div class="page">
    <p>False Positive</p>
    <p>True Positive</p>
    <p>False Negative</p>
    <p>PDS Usage and Coverage (first-order)</p>
    <p>Non-Taintable</p>
    <p>Taintable '&quot;\&lt;&gt;</p>
    <p>Manually counted PDS (841)</p>
    <p>Detected Taintable PDS</p>
    <p>PDS</p>
  </div>
  <div class="page">
    <p>Second-Order Vulnerabilities  159 True Positives (79%)</p>
    <p>97% persistent XSS (database)</p>
    <p>Missed by previous work</p>
    <p>43 False Positives (21%)  Root cause: Path-sensitive sanitization  E.g., store only valid email</p>
    <p>Failures in 1st step propagate to 2nd step</p>
    <p>PDS</p>
  </div>
  <div class="page">
    <p>Multi-Step Exploits  14 True Positives (93%)</p>
    <p>2 based on file upload  12 based on SQLi</p>
    <p>Missed by previous work</p>
    <p>1 False Positives (7%)  False positive SQLi</p>
    <p>PDS</p>
  </div>
  <div class="page">
    <p>Second-Order LFI in OpenConf</p>
    <p>$r = mysql_query(&quot;select setting, value from &quot; . OCC_TABLE_CONFIG); while ($l = mysql_fetch_assoc($r)) { $config[$l['setting']] = $l['value']; }</p>
    <p>function printHeader($what, $function=&quot;0&quot;) { require $GLOBALS['pfx'] . $GLOBALS['config']['OC_headerFile']; }</p>
    <p>PDS</p>
  </div>
  <div class="page">
    <p>Second-Order LFI in OpenConf</p>
    <p>$r = mysql_query(&quot;select setting, value from &quot; . OCC_TABLE_CONFIG); while ($l = mysql_fetch_assoc($r)) { $config[$l['setting']] = $l['value']; }</p>
    <p>function printHeader($what, $function=&quot;0&quot;) { require $GLOBALS['pfx'] . $GLOBALS['config']['OC_headerFile']; }</p>
    <p>PDS</p>
  </div>
  <div class="page">
    <p>Second-Order LFI in OpenConf</p>
    <p>$r = mysql_query(&quot;select setting, value from &quot; . OCC_TABLE_CONFIG); while ($l = mysql_fetch_assoc($r)) { $config[$l['setting']] = $l['value']; }</p>
    <p>function printHeader($what, $function=&quot;0&quot;) { require $GLOBALS['pfx'] . $GLOBALS['config']['OC_headerFile']; }</p>
    <p>function updateConfigSetting($setting, $value) { ocsql_query(&quot;UPDATE `&quot; . OCC_TABLE_CONFIG . &quot;` SET `value`=' &quot; . safeSQLstr(trim($value)) . &quot; ' WHERE `setting`='&quot; . safeSQLstr($setting) . &quot; ' &quot;); }</p>
    <p>foreach (array_keys($_POST) as $p) { if (preg_match(&quot;/^OC_[\w-]+$/&quot;, $p)) { updateConfigSetting($p, $_POST[$p]); } }</p>
    <p>PDS</p>
    <p>PDS</p>
  </div>
  <div class="page">
    <p>Multi-Step Exploitation in OpenConf</p>
    <p>/data/papers/1.pdf</p>
    <p>SQLi or XSS</p>
    <p>Remote Command Execution</p>
    <p>All issues are fixed in version 5.31 and 6.01</p>
    <p>File Upload</p>
    <p>Second-Order LFI</p>
  </div>
  <div class="page">
    <p>Source: http://rewalls.com</p>
  </div>
  <div class="page">
    <p>Conclusion  Static detection of second-order vulnerabilities is possible</p>
    <p>Analyze and collect reads/writes to PDS (database, file names, session data)  Determine sensitive data flow at the end of analysis</p>
    <p>&gt; 150 new vulnerabilities  Leading to RCE in NewsPro, Scarf, OpenConf, osCommerce  Overlooked problem in practice, missed in previous work</p>
    <p>Future work  Support prepared statements  Improve SQL parser</p>
  </div>
  <div class="page">
    <p>Thank you Facebook for the generous award</p>
  </div>
  <div class="page">
    <p>Questions? johannes.dahse@rub.de</p>
  </div>
  <div class="page">
    <p>Thank you! Enjoy the conference.</p>
  </div>
</Presentation>
