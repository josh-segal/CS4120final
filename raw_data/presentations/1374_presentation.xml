<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Effective Entropy for Memory Randomization Defenses</p>
    <p>William Herlands, Thomas Hobson, Paula Donovan</p>
    <p>This work is sponsored by Assistant Secretary of Defense for Research &amp; Engineering under Air Force Contract FA8721-05-C-0002. Opinions, interpretations, conclusions and recommendations are those of the author and are not necessarily endorsed by the United States Government.</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 2 TH 8/18/14</p>
    <p>User Space Memory Randomization</p>
    <p>User-space memory randomization defenses protect against memory-corruption attacks  Attackers require knowledge of the layout of memory  Defenses randomize layout</p>
    <p>E.g. Address Space Layout Randomization (ASLR)</p>
    <p>Image Reference: Didier Stevens, yaisc.com</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 3 TH 8/18/14</p>
    <p>We developed Effective Entropy, a metric which is quantitative, comparable, and indicative of adversary workload</p>
    <p>Metric Requirements</p>
    <p>Current metrics use exploits or entropy to evaluate randomization technologies</p>
    <p>Entropy</p>
    <p>Pro  Quantitative, information theoretic  Easy to compare Con  Does not consider threat models  Not holistic</p>
    <p>Exploits</p>
    <p>Pro  Real life, holistic test against</p>
    <p>adversary technology Con  Anecdotal  Not comparable  Biased towards existing exploits</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 4 TH 8/18/14</p>
    <p>Slide reference: Johnson, K., Miller, M. Microsoft Security Engineering Center. Exploit Mitigation Improvements in Windows 8. Black Hat USA 2012</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 5 TH 8/18/14</p>
    <p>We developed Effective Entropy, a metric which is quantitative, comparable, and indicative of adversary workload</p>
    <p>Metric Requirements</p>
    <p>Current metrics use exploits or entropy to evaluate randomization technologies</p>
    <p>Entropy</p>
    <p>Pro  Quantitative, information theoretic  Easy to compare Con  Does not consider threat models  Not holistic</p>
    <p>Exploits</p>
    <p>Pro  Real life, holistic test against</p>
    <p>adversary technology Con  Anecdotal  Not comparable  Biased towards existing exploits</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 6 TH 8/18/14</p>
    <p>Outline</p>
    <p>Background on Memory Randomization</p>
    <p>Effective Entropy</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 7 TH 8/18/14</p>
    <p>Linux 32-bit</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>User Memory Layout</p>
    <p>Multiple sections required to run a program:  Code to run (Program Image)  Variables used in execution</p>
    <p>(Heap and Stack)  Kernel functions (VDSO)  Libraries (MMAP)</p>
    <p>MMAP: Memory Map VDSO: Virtual Dynamically-linked Shared Objects</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 8 TH 8/18/14</p>
    <p>User Memory Layout</p>
    <p>In a static layout a variety of attacks are possible since an adversary can trivially know the location of objects in memory</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Linux 32-bit</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>PWND!</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 9 TH 8/18/14</p>
    <p>Entropy in User Memory Layout</p>
    <p>Memory randomization techniques randomize sections location in memory  Base address randomization  E.g. Ubuntu 32-bit provides</p>
    <p>Linux 32-bit</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Library location</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 10 TH 8/18/14</p>
    <p>Entropy in User Memory Layout</p>
    <p>Entropy is a means of measuring randomness  E.g. MMAP base can take 28</p>
    <p>values with equal probability so it has 8 bits of entropy</p>
    <p>Standard calculation of entropy measures total uncertainty of a variable in bits</p>
    <p>Linux 32-bit</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP 8 Bits</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 11 TH 8/18/14</p>
    <p>Static Address Space Layout Randomization (ASLR)</p>
    <p>Static (non-PIE) ASLR randomizes base addresses of memory sections  Heap, stack, VDSO, and MMAP</p>
    <p>randomized independently  Program image not randomized</p>
    <p>Implemented in most modern operating systems  Windows, OS X, Linux,</p>
    <p>OpenBSD</p>
    <p>Static ASLR</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 12 TH 8/18/14</p>
    <p>PIE ASLR</p>
    <p>PIE ASLR</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Position Independent Executable (PIE) ASLR randomizes all base addresses of memory  Heap, stack, VDSO, MMAP, and</p>
    <p>program image randomized independently</p>
    <p>Increasingly prevalent  Compiler option in GCC  Default in OpenBSD 5.3</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 13 TH 8/18/14</p>
    <p>Fine Grain Randomization</p>
    <p>Fine Grain</p>
    <p>Program Image</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Fine grain randomization  Randomize smaller blocks, not</p>
    <p>only section base addresses  E.g. Independent library</p>
    <p>randomization  Address Space Layout</p>
    <p>Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software, Kil et al.</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 14 TH 8/18/14</p>
    <p>Outline</p>
    <p>Background on Memory Randomization</p>
    <p>Effective Entropy</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 15 TH 8/18/14</p>
    <p>Connections in User Memory Layout</p>
    <p>Not so simple  Interconnectedness</p>
    <p>Control flow instructions  Pointers</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Linux 32-bit Base Entropy</p>
    <p>Program Image</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 16 TH 8/18/14</p>
    <p>Connections in User Memory Layout</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Linux 32-bit Base Entropy</p>
    <p>Program Image Code</p>
    <p>data exec_ptr</p>
    <p>X - Attacker supplied values</p>
    <p>jmp *%ecx pop %ecx</p>
    <p>&amp;exec_ptrX ret_addrX</p>
    <p>exec()</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 17 TH 8/18/14</p>
    <p>Connections in User Memory Layout</p>
    <p>? Bits</p>
    <p>? Bits</p>
    <p>? Bits</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Linux 32-bit Base Entropy</p>
    <p>Program Image</p>
    <p>? Bits 8 Bits</p>
    <p>Absolute connections Read-only pointers Direct jumps</p>
    <p>Dynamic connections Writable pointers Indirect branches</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 18 TH 8/18/14</p>
    <p>Connections in User Memory Layout</p>
    <p>? Bits</p>
    <p>? Bits</p>
    <p>? Bits</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Linux 32-bit Base Entropy</p>
    <p>Program Image</p>
    <p>Absolute connections Read-only pointers Direct jumps</p>
    <p>Dynamic connections Writable pointers Indirect branches</p>
    <p>? Bits 8 Bits</p>
    <p>Difficult to determine, requires runtime analysis</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 19 TH 8/18/14</p>
    <p>Identifying Dynamic Pointers</p>
    <p>Examine writeable memory at every</p>
    <p>control flow statement</p>
    <p>Eliminate inconsistencies</p>
    <p>Identify dynamic pointers</p>
    <p>Run deterministic execution path twice:</p>
    <p>Heap</p>
    <p>Stack</p>
    <p>VDSO</p>
    <p>MMAP</p>
    <p>Linux 32-bit Base Entropy</p>
    <p>Program Image</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 20 TH 8/18/14</p>
    <p>Effective Entropy (EffH)</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 21 TH 8/18/14</p>
    <p>Measuring Randomization Technologies</p>
    <p>EffH is a property of a randomization technology and threat model</p>
    <p>On any particular platform, sufficiently large programs exhibit similar memory interconnections  E.g. Global Offset Table ! Library functions</p>
    <p>Any non-degenerate execution of a program is representative of all non-degenerate executions with respect to memory usage  Connections are drawn from same distribution</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 22 TH 8/18/14</p>
    <p>Outline</p>
    <p>Background on Memory Randomization</p>
    <p>Effective Entropy</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 23 TH 8/18/14</p>
    <p>Experiment Overview</p>
    <p>Goals:  Evaluate current and emerging security technologies against</p>
    <p>realistic threat models  Assess utility of the EffH metric</p>
    <p>Security Technologies Considered</p>
    <p>Image Reference: Defense Science Board, Jan 2013: Resilient Military Systems and the Advanced Cyber Threat</p>
    <p>Static ASLR</p>
    <p>PIE ASLR</p>
    <p>Independent Library Randomization  Simulation of fine</p>
    <p>grain randomization technique</p>
    <p>Threat Models</p>
    <p>Consider viable adversaries at multiple tiers of sophistication and resources</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 24 TH 8/18/14</p>
    <p>Threat Model</p>
    <p>Moderate Adversary  Control flow hijacking vulnerability  Modern exploitation methods including Return</p>
    <p>Oriented Programming (ROP)</p>
    <p>Memory Disclosure Adversary  Control flow hijacking vulnerability  Modern exploitation methods including ROP  Memory disclosure vulnerability that reveals location</p>
    <p>of one memory section</p>
    <p>Return Oriented Programming</p>
    <p>Use snippets of executable code called ROP gadgets</p>
    <p>Combine gadgets to create a custom exploit</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 25 TH 8/18/14</p>
    <p>Moderate Adversary - ASLR</p>
    <p>PIE ASLR</p>
    <p>Entropy</p>
    <p>EffH</p>
    <p>Static ASLR provides zero bits of EffH to Moderate Adversary</p>
    <p>B its</p>
    <p>Static ASLR</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 26 TH 8/18/14</p>
    <p>Memory Disclosure Adversary  PIE ASLR</p>
    <p>PIE ASLR provides zero bits of EffH to Adversary disclosing Program Image</p>
    <p>PIE ASLR</p>
    <p>Entropy</p>
    <p>EffH</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 27 TH 8/18/14</p>
    <p>B its</p>
    <p>Independent Library Randomization</p>
    <p>Entropy</p>
    <p>EffH</p>
    <p>Memory Disclosure Adversary - Fine Grain</p>
    <p>Fine Grain provides 8 bits of EffH for some but not all libraries</p>
    <p>Individual Libraries Program, Stack, Heap, VDSO</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 28 TH 8/18/14</p>
    <p>Memory Disclosure Adversary - Fine Grain</p>
    <p>RO P G ad</p>
    <p>ge ts</p>
    <p>Bi ts</p>
    <p>Executable libraries</p>
    <p>Independent Library Randomization Entropy EffH ROP Gadgets</p>
    <p>Easily available with 0 bits EffH Difficult with 8 bits EffH</p>
    <p>Protecting only some libraries does not mitigate attacks</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 29 TH 8/18/14</p>
    <p>Memory Disclosure Adversary - Fine Grain</p>
    <p>Sy st em</p>
    <p>C al ls</p>
    <p>Bi ts</p>
    <p>Executable libraries</p>
    <p>Independent Library Randomization</p>
    <p>Entropy EffH System Calls</p>
    <p>Easily available with 0 bits EffH Difficult with 8 bits EffH</p>
    <p>Protecting only some libraries does not mitigate attacks</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 30 TH 8/18/14</p>
    <p>Conclusions on Memory Randomization</p>
    <p>Static ASLR does not provide effective defense against adversaries</p>
    <p>PIE ASLR and independent library randomization improve EffH  Sophisticated adversaries can overcome more advanced</p>
    <p>randomization techniques  Memory disclosure adversary can overcome PIE ASLR and</p>
    <p>independent library randomization</p>
    <p>Minimum entropy often more important than mean or max</p>
  </div>
  <div class="page">
    <p>Effective Entropy - 31 TH 8/18/14</p>
    <p>Summary</p>
    <p>Effective Entropy metric for memory randomization security  Quantitative  Comparable between techniques  Provides insight into adversary difficulty</p>
    <p>Fundamental weaknesses in randomization techniques  Raise minimum entropy and limit connectivity</p>
  </div>
</Presentation>
