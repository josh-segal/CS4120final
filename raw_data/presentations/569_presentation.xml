<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Multiple Aggregations Over Data Streams</p>
    <p>Rui Zhang National Univ. of Singapore Nick Koudas Univ. of Toronto Beng Chin Ooi National Univ. of Singapore Divesh Srivastava AT&amp;T Labs-Research</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Aggregate Query Over Streams</p>
    <p>Select tb, SrcIP, count (*)</p>
    <p>from IPPackets</p>
    <p>group by time/60 as tb, SrcIP</p>
    <p>More examples:  Gigascope: A Stream Database for Network Applications</p>
    <p>(SIGMOD03).  Holistic UDAFs at Streaming Speed (SIGMOD04).  Sampling Algorithms in a Stream Operator (SIGMOD05)</p>
    <p>(SrcIP, SrcPort, DstIP, DstPort, time, )</p>
  </div>
  <div class="page">
    <p>Gigascope</p>
    <p>All inputs and outputs are streams.</p>
    <p>Two level structure: LFTA and HFTA.  LFTA/HFTA: Low/High-level Filter Transform and</p>
    <p>Aggregation.</p>
    <p>Simple operations in LFTA:  reduce the amount of data sent to HFTA.  fit into L3 cache.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Select tb, SrcIP, count (*) from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  C1 for probing the hash table in</p>
    <p>LFTA  C2 for updating HFTA from</p>
    <p>LFTA  Bottleneck is the total of C1 and</p>
    <p>C2 cost. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>Single Aggregation</p>
  </div>
  <div class="page">
    <p>Select tb, SrcIP, count (*) from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  C1 for probing the hash table in</p>
    <p>LFTA  C2 for updating HFTA from</p>
    <p>LFTA  Bottleneck is the total of C1 and</p>
    <p>C2 cost. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>Single Aggregation</p>
  </div>
  <div class="page">
    <p>Select tb, SrcIP, count (*) from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  C1 for probing the hash table in</p>
    <p>LFTA  C2 for updating HFTA from</p>
    <p>LFTA  Bottleneck is the total of C1 and</p>
    <p>C2 cost. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>Single Aggregation</p>
  </div>
  <div class="page">
    <p>Select tb, SrcIP, count (*) from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  C1 for probing the hash table in</p>
    <p>LFTA  C2 for updating HFTA from</p>
    <p>LFTA  Bottleneck is the total of C1 and</p>
    <p>C2 cost. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>Single Aggregation</p>
  </div>
  <div class="page">
    <p>Select tb, SrcIP, count (*) from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  C1 for probing the hash table in</p>
    <p>LFTA  C2 for updating HFTA from</p>
    <p>LFTA  Bottleneck is the total of C1 and</p>
    <p>C2 cost. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>Single Aggregation</p>
  </div>
  <div class="page">
    <p>Select tb, SrcIP, count (*) from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  C1 for probing the hash table in</p>
    <p>LFTA  C2 for updating HFTA from</p>
    <p>LFTA  Bottleneck is the total of C1 and</p>
    <p>C2 cost. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>( 2, 2 )</p>
    <p>Single Aggregation</p>
  </div>
  <div class="page">
    <p>Single Aggregation  Select tb, SrcIP, count (*)</p>
    <p>from IPPackets group by time/60 as tb, SrcIP</p>
    <p>Example:  2, 24, 2, 17, 12  hash by modulo 10</p>
    <p>Costs  Probe cost: C1 for probing the</p>
    <p>hash table in LFTA.  Eviction cost: C2 for updating</p>
    <p>HFTA from LFTA.  Bottleneck is the total of C1 and</p>
    <p>C2 costs.  Evicting everything at the end of</p>
    <p>each time bucket. LFTAs</p>
    <p>CountSrcIP</p>
    <p>HFTAs</p>
    <p>C1</p>
    <p>C2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Multiple Aggregations  Relation R containing attributes A, B, C</p>
    <p>3 Queries  Select tb, A, count(*)</p>
    <p>from R group by time/60 as tb, A</p>
    <p>Select tb, B, count(*) from R group by time/60 as tb, B</p>
    <p>Select tb, C, count(*) from R group by time/60 as tb, C</p>
    <p>Cost: E1= n 3 c1 + 3n x1 c2 n: number of records coming in x1: collision rate of A, B, C LFTAs</p>
    <p>HFTAs</p>
    <p>C2</p>
    <p>C1A</p>
    <p>C1B</p>
    <p>C1C</p>
  </div>
  <div class="page">
    <p>Alternatively</p>
    <p>Maintain a phantom  Total size being the same.</p>
    <p>Cost: E2= nc1 + 3x2nc1 + 3 x1 x2nc2 x1: collision rate of A, B, C</p>
    <p>x2: collision rate of ABC</p>
    <p>LFTAs</p>
    <p>HFTAs</p>
    <p>C2</p>
    <p>C1 A</p>
    <p>B</p>
    <p>C</p>
    <p>ABC</p>
    <p>C1</p>
    <p>C1</p>
    <p>C1</p>
    <p>phantom</p>
  </div>
  <div class="page">
    <p>Cost Comparison</p>
    <p>Without phantom:</p>
    <p>E1= 3nc1 + 3x1nc2</p>
    <p>With phantom</p>
    <p>E2= nc1 + 3x2nc1 + 3x1x2nc2</p>
    <p>Difference</p>
    <p>E1-E2=[(2-3x2)c1 + 3(x1-x1x2)c2]n</p>
    <p>If x2 is small, then E1 - E2 &gt; 0.</p>
  </div>
  <div class="page">
    <p>More Phantoms  Relation R contains attributes A, B, C, D.  Queries: group by AB, BC, BD, CD</p>
    <p>Relation feeding graph</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Constraint: Given fixed size of memory M.  Guarantee low loss rate when evicting everything</p>
    <p>at the end of time window</p>
    <p>Size should be small to fit in L3 cache</p>
    <p>Hardware (the network card) memory size limit.</p>
    <p>Problems:  1) Phantom choosing.</p>
    <p>Configuation: a set of queries and phantoms.</p>
    <p>2) Space allocation.  x  g/b</p>
    <p>Objective: Minimize the cost.</p>
  </div>
  <div class="page">
    <p>The View Materialization Problem</p>
    <p>psc 6M</p>
    <p>ps 0.8Mpc 6M sc 6M</p>
    <p>p 0.2M s 0.01M c 0.1M</p>
    <p>none 1</p>
  </div>
  <div class="page">
    <p>Differences</p>
    <p>View Materialization Problem</p>
    <p>Multi-aggregation problem</p>
    <p>If a view is materialized, it uses a fixed size of space.</p>
    <p>If a phantom is maintained, it can use a flexible size of space. The smaller the space used, the higher the collision rate of the hash table.</p>
    <p>Materializing a view is always beneficial.</p>
    <p>Maintaining a phantom is not always beneficial. High collision rate hash tables increase the overall cost.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
  </div>
  <div class="page">
    <p>Algorithmic Strategies  Brute-force: try all</p>
    <p>possibilities of phantom combinations and all possibilities of space allocation  Too expensive.</p>
    <p>Greedy by increasing space used (hint: x  g/b , see analysis</p>
    <p>later)  b =g ,  is large enough to</p>
    <p>guarantee a low collision rate.</p>
    <p>Greedy by increasing collision rate (our proposal)  modeling the collision rate</p>
    <p>accurately.</p>
    <p>Jump</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Collision Rate Model</p>
    <p>rg</p>
    <p>g</p>
    <p>k rgk</p>
    <p>gn</p>
    <p>kknB x</p>
    <p>2 )/11(</p>
    <p>Random data distribution  nrg : expected number of records in a group  k : number of groups hashing to a bucket</p>
    <p>nrg k: number of records hashing to a bucket</p>
    <p>Random hash: probability of collision 1  1/k</p>
    <p>nrg k(1-1/k): number of collisions in the bucket</p>
    <p>g : total number of groups</p>
    <p>b : total number of buckets</p>
    <p>, where kgk</p>
    <p>k bb k</p>
    <p>g bB</p>
    <p>)/11()/1(</p>
    <p>Clustered data distribution  la : average flow length</p>
    <p>a</p>
    <p>g</p>
    <p>k k</p>
    <p>gl</p>
    <p>kkB x</p>
    <p>2 )/11(</p>
  </div>
  <div class="page">
    <p>The Low Collision Rate Part</p>
    <p>Phantom is beneficial only when the collision rate is low, therefore the low collision rate part of the collision rate curve is of interest.</p>
    <p>Linear regression: )/(354.00267.0 bgx</p>
  </div>
  <div class="page">
    <p>Space Allocation: The Two-level case</p>
    <p>One phantom R0 feeding all queries R1, R2, , Rf. Their hash tables collision rates are x0, x1, , xf.</p>
    <p>c b</p>
    <p>g</p>
    <p>b</p>
    <p>g c</p>
    <p>b</p>
    <p>g fc</p>
    <p>cxxcfxce</p>
    <p>i</p>
    <p>i f</p>
    <p>i</p>
    <p>f</p>
    <p>i i</p>
    <p>f</p>
    <p>b</p>
    <p>g</p>
    <p>b</p>
    <p>g</p>
    <p>b</p>
    <p>g</p>
    <p>Result: quadratic equation.</p>
    <p>Let partial derivative of e over bi equal 0.</p>
  </div>
  <div class="page">
    <p>Space Allocation: General cases  Resulted in equations of order higher than 4, which are un solvable</p>
    <p>algebraically (Abels Theorem).</p>
    <p>Partial results:  b1</p>
    <p>Heuristics:  Treat the configuration as</p>
    <p>two-level cases recursively.  Supernode.</p>
    <p>Implementation:  SL: Supernode with linear combination of the number of groups.  SR: Supernode with square root combination of the number of groups.  PL: Proportional linearly to the number of groups.  PR: Proportional to the square root of the number of groups.  ES: Exhaustive space allocation.</p>
    <p>d</p>
    <p>i ixcgcgd</p>
    <p>Supernode</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Experiments: space allocation</p>
    <p>(ABCD(ABC(A BC(B C)) D))</p>
    <p>Comparison of space allocation schemes  Queries in red; phantoms in blue.</p>
    <p>x-axis: memory constraint ; y-axis: relative error compared to the optimal space allocation.</p>
    <p>Heuristics  SL: Supernode with linear combination of the number of groups.</p>
    <p>SR: Supernode with square root combination of the number of groups.</p>
    <p>PL: Proportional linearly to the number of groups.</p>
    <p>PR: Proportional to the square root of the number of groups.</p>
    <p>Result: SL is the best; SL and SR are generally better than PL and PR.</p>
    <p>(ABCD(AB BCD(BC BD CD)))</p>
  </div>
  <div class="page">
    <p>Experiments: phantom choosing</p>
    <p>Heuristics  GCSL: Greedy by increasing Collision rate; allocating space using Supernode</p>
    <p>with Linear combination of the number of groups.  GCPL: Greedy by increasing Collision rate; allocating space using</p>
    <p>Proportional Linearly to the number of groups.  GS: Greedy by increasing Space. Recall</p>
    <p>Results: GCSL is better than GS; GCPL is the lower bound of GS.</p>
    <p>Comparison of greedy strategies  x-axis:  ; y-axis: relative cost</p>
    <p>compared to the optimal cost</p>
    <p>Phantom choosing process  x-axis: # phantom chosen ; y-axis:</p>
    <p>relative cost compared to the optimal cost</p>
  </div>
  <div class="page">
    <p>Experiments: real data</p>
    <p>Experiments on real data  Actually let the data records stream by the hash tables and calculate the cost.</p>
    <p>x-axis: memory constraint ; y-axis: relative cost compared to the optimal cost.</p>
    <p>Results  GCSL is very close to optimal and always better than GS.  By maintaining phantoms, we reduce the cost up to a factor of 35.</p>
    <p>GCSL vs. GS Maintaining phantom vs. No phantom</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Query example and Gigascope  Single aggregation  Multiple aggregations  Problem definition</p>
    <p>Algorithmic strategies</p>
    <p>Analysis</p>
    <p>Experiments</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Conclusion and future work</p>
    <p>We introduced the notion of phantoms (fine granularity aggregation queries) that has the benefit of supporting shared computation.</p>
    <p>We formulated the MA problem, analyzed its components and proposed greedy heuristics to solve it. Through experiments on both real and synthetic data sets, we demonstrate the effectiveness of our techniques. The cost achieved by our solution is up to 35 times less than that of the existing solution.</p>
    <p>We are trying to deploy this framework in the real DSMS system.</p>
  </div>
  <div class="page">
    <p>Questions ?</p>
  </div>
</Presentation>
