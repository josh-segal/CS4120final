<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Blanket Execution: Dynamic Similarity Testing for</p>
    <p>Program Binaries and Components</p>
    <p>Manuel Egele, Maverick Woo,</p>
    <p>Peter Chapman, and David Brumley</p>
    <p>Carnegie Mellon University</p>
  </div>
  <div class="page">
    <p>Picture Yourself as an Analyst</p>
    <p>You just identified a function of interest</p>
    <p>Questions:</p>
    <p>Have I seen an equivalent or similar function before?</p>
    <p>How can I find binaries that contain similar functions?</p>
  </div>
  <div class="page">
    <p>Similar vs. Equivalent</p>
  </div>
  <div class="page">
    <p>Similar vs. Equivalent (cont.) 407ab9 &lt;strcmp_name&gt;: ab9: push %rbp ... ad1: mov $0x402710,%edx ... PLT entry of strcmp ad6: mov %rcx,%rsi ad9: mov %rax,%rdi adc: callq 406fa1 &lt;cmp_name&gt; ae1: leaveq ae2: retq 406fa1 &lt;cmp_name&gt;: fa1: push %rbp ... fcd: callq *%rax ... call func. pointer (e.g., strcmp) fcf: leaveq fd0: retq</p>
    <p>gcc O0</p>
    <p>e0: mov (%rsi),%rsi</p>
    <p>e3: mov (%rdi),%rdi</p>
    <p>e6: jmpq 402590 &lt;strcmp@plt&gt;</p>
    <p>gcc O3</p>
    <p>Syntactic differences complicate static</p>
    <p>similarity analysis</p>
  </div>
  <div class="page">
    <p>Function-Binary Similarity</p>
    <p>Question with plenty security applications</p>
    <p>Patch analysis / patch-based exploit generation Which function has (not) been patched?</p>
    <p>Malware analysis Did I analyze similar code like this already?</p>
    <p>Higher-level concepts Function-binary search engine</p>
  </div>
  <div class="page">
    <p>Blanket Execution</p>
    <p>Dynamic analysis  Execute function f under a fixed environment</p>
    <p>Record side effects (features) of this execution</p>
    <p>Two functions f and g are similar if their side effects are similar</p>
    <p>Limited coverage  Execute f repeatedly starting from first un</p>
    <p>executed instruction  full line coverage</p>
    <p>But: Natural meaning of function execution (i.e., start from beginning) is sacrificed</p>
  </div>
  <div class="page">
    <p>Execution Environment</p>
    <p>Provides concrete &amp; consistent values for:</p>
    <p>All registers</p>
    <p>All memory locations</p>
    <p>Must be efficiently reproducible</p>
    <p>Blanket Execution-Run:</p>
  </div>
  <div class="page">
    <p>Implementation Considerations</p>
    <p>Compiled functions have dependencies</p>
    <p>Global variables</p>
    <p>Structure of passed arguments</p>
    <p>In blanket execution, functions are executed in randomized but fixed environment</p>
    <p>Dependencies are likely not met  frequent accesses to unmapped memory</p>
  </div>
  <div class="page">
    <p>Argument Access</p>
    <p>struct fileinfo {</p>
    <p>char * name,  }</p>
    <p>e0: mov (%rsi),%rsi</p>
  </div>
  <div class="page">
    <p>Implementation (cont.)</p>
    <p>Environment specifies dummy memory page</p>
    <p>Dummy page is mapped (on demand) at all unmapped addresses</p>
    <p>Memory writes succeed</p>
    <p>Memory reads  consistent and succeed</p>
    <p>Consistent values allow comparison</p>
  </div>
  <div class="page">
    <p>Side Effects &amp; Feature Vectors</p>
    <p>Dynamically observable features (e.g., memory accesses, syscalls, etc.)</p>
    <p>Combine all side effects per function into a feature vector of length N (for N features)</p>
    <p>Coordinates: sets of observed feature values</p>
    <p>Similarity score for f and g</p>
    <p>normalized weighted Jaccard indices</p>
  </div>
  <div class="page">
    <p>Features</p>
    <p>Memory reads/writes to the stack</p>
    <p>Memory reads/writes to the heap</p>
    <p>System calls</p>
    <p>Library calls via plt</p>
    <p>Function return value in %rax</p>
  </div>
  <div class="page">
    <p>Dataset</p>
    <p>GNU coreutils 8.13 (95 binaries)</p>
    <p>Three compilers:  GNU gcc 4.7.2</p>
    <p>Intel icc 14.0.0</p>
    <p>LLVM clang 3.0-6.2</p>
    <p>Four optimization levels each (-O{0,1,2,3})</p>
    <p>Result: 1,140 binaries, 195,560 functions</p>
    <p>Debug symbols  ground truth through function names</p>
  </div>
  <div class="page">
    <p>BlEx Performance</p>
    <p>Implemented with Intels Pin</p>
    <p>195,560 functions &amp; 11 environments</p>
    <p>1,590,773 BE-runs / environment</p>
    <p>17,498,507 BE-runs 57 CPU days</p>
    <p>Two versions of ls ~ 30 CPU minutes</p>
    <p>Independent executions  embarrassingly parallel workload</p>
  </div>
  <div class="page">
    <p>Results vs. BinDiff</p>
    <p>Proxy for (dis-)similarity: # optimizations</p>
    <p>O2 vs. O3 high similarity (9 optimizations)</p>
    <p>O0 vs. O3 high dissimilarity (66 optimizations)</p>
    <p>BinDiff BlEx</p>
  </div>
  <div class="page">
    <p>Results vs. BinDiff (cont.)</p>
    <p>Large syntactic differences</p>
    <p>gcc O0 vs. gcc O3</p>
    <p>BlEx outperforms BinDiff 2x on avg. (up to 3.5x)</p>
    <p>BinDiff BlEx</p>
  </div>
  <div class="page">
    <p>Binary Search Engine</p>
    <p>Given:</p>
    <p>An indexed corpus C of function-binaries / feature vectors (v1, , vn)</p>
    <p>A search query function f</p>
    <p>Result:</p>
    <p>Which feature vector vi  C corresponds to the function g most similar to f</p>
    <p>Sort results w.r.t. similarity with f</p>
  </div>
  <div class="page">
    <p>Binary Search Engine  Experiment</p>
    <p>Queries: q1, , q1,000 randomly selected functions from coreutils (gcc O0)</p>
    <p>Corpus C: 29,015 remaining functions from coreutils (gcc O1, gcc O2, gcc O3)</p>
    <p>Single search executes in &lt; 1s</p>
  </div>
  <div class="page">
    <p>Binary Search Engine  Results</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Function binary similarity is a challenge  Static approaches thwarted by syntactic differences</p>
    <p>(e.g., compiler or optimization)</p>
    <p>Blanket Execution: dynamic analysis to identify similar function-binaries  Coverage achieved by re-executing function</p>
    <p>Functions are similar if their feature vectors are</p>
    <p>Outperforms static systems for large syntactic differences</p>
    <p>Blanket execution can be used as a building block for a binary search engine</p>
  </div>
  <div class="page">
    <p>END</p>
  </div>
</Presentation>
