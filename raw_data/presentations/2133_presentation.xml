<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Convergent Dispersal:</p>
    <p>Toward Storage-Efficient Security</p>
    <p>in a Cloud-of-Clouds</p>
    <p>Mingqiang Li1, Chuan Qin1, Patrick P. C. Lee1, Jin Li2</p>
    <p>HotStorage 14</p>
  </div>
  <div class="page">
    <p>Single Cloud Problems</p>
    <p>Single point of failure:</p>
    <p>Vendor lock-in:</p>
  </div>
  <div class="page">
    <p>Cloud-of-Clouds</p>
    <p>Exploits diversity of multiple cloud storage vendors:</p>
    <p>Provides fault tolerance</p>
    <p>Avoids vendor lock-in</p>
    <p>Improves security 3</p>
  </div>
  <div class="page">
    <p>Diversity  Security</p>
    <p>Threat model: provides data confidentiality</p>
    <p>Traditional encryption:</p>
    <p>Encrypts data with a key and protects the key</p>
    <p>Key management is challenging</p>
    <p>Leveraging diversity:</p>
    <p>Disperses data across multiple clouds</p>
    <p>Data remains confidential even if a subset of clouds is</p>
    <p>compromised</p>
    <p>Assumption: infeasible for attackers to compromise all clouds</p>
    <p>Security is achieved without keys  keyless security</p>
  </div>
  <div class="page">
    <p>Keyless Security</p>
    <p>Major building block: dispersal algorithm</p>
    <p>Given a secret, outputs multiple shares</p>
    <p>Secret remains inaccessible without enough shares</p>
  </div>
  <div class="page">
    <p>Dispersal Algorithm</p>
    <p>(n, k, r) dispersal algorithm:</p>
    <p>Secret is dispersed into n shares</p>
    <p>Secret can be reconstructed from any k shares (k &lt; n)</p>
    <p>Secret cannot be inferred (even partially) from any r</p>
    <p>shares (r &lt; k)</p>
    <p>Example: (4, 3, 2)</p>
    <p>Nothing!</p>
  </div>
  <div class="page">
    <p>State of the Art</p>
    <p>Ramp secret sharing scheme (RSSS) [Blakley and Meadows, CRYPTO84]</p>
    <p>Combines Rabins information dispersal (r = 0) and</p>
    <p>Shamirs secret sharing scheme (r = k-1)</p>
    <p>Makes tradeoff between storage space and security</p>
    <p>AONT-RS [Resch et al., FAST11]</p>
    <p>Combines all-or-nothing-transform and Reed</p>
    <p>Solomon encoding</p>
    <p>Main idea: embeds random information into</p>
    <p>dispersed data</p>
  </div>
  <div class="page">
    <p>Deduplication</p>
    <p>Cloud storage uses deduplication to save cost</p>
    <p>Deduplication avoids storing multiple data</p>
    <p>copies with identical content</p>
    <p>Saves storage space</p>
    <p>Saves write bandwidth</p>
    <p>However, state-of-the-art dispersal algorithms</p>
    <p>break deduplication</p>
    <p>Root cause: security builds on embedded</p>
    <p>randomness</p>
  </div>
  <div class="page">
    <p>Deduplication</p>
    <p>Identical</p>
    <p>content Different shares!</p>
    <p>Random information</p>
    <p>Random information</p>
    <p>Q: Can we preserve both deduplication and</p>
    <p>keyless security in dispersal algorithms?</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>Convergent Dispersal: a data dispersal design</p>
    <p>that preserves both dedup and keyless security</p>
    <p>Can be generalized for any distributed storage systems</p>
    <p>Two implementations:</p>
    <p>CRSSS: builds on RSSS [Blakley and Meadows, CRYPTO84]</p>
    <p>CAONT-RS: builds on AONT-RS [Resch et al., FAST11]</p>
    <p>Evaluation on computational performance</p>
    <p>CRSSS and CAONT-RS are complementary in</p>
    <p>performance for different parameters</p>
    <p>Best of CRSSS and CAONT-RS achieves  200MB/s</p>
  </div>
  <div class="page">
    <p>Key Idea</p>
    <p>Inspired by convergent encryption [Douceur et al., ICDCS02]</p>
    <p>Key is derived from cryptographic hash of the content</p>
    <p>Key is deterministic: same content  same ciphertext</p>
    <p>Convergent dispersal:</p>
    <p>Replace random information</p>
    <p>with secrets hashes</p>
    <p>Same secret  same shares</p>
  </div>
  <div class="page">
    <p>Deployment Scenario</p>
    <p>Avoids cross-user dedup</p>
    <p>due to side-channel attacks [Harnik et al., IEEE S&amp;P10]</p>
    <p>Owned by organization</p>
    <p>Single-user</p>
    <p>dedup before</p>
    <p>uploads</p>
    <p>Organization</p>
    <p>Cross-user</p>
    <p>dedup by</p>
    <p>VMs</p>
  </div>
  <div class="page">
    <p>CRSSS</p>
    <p>Example: n = 6, k = 5, r = 2</p>
    <p>Replace r random words with</p>
    <p>r hashes</p>
  </div>
  <div class="page">
    <p>CRSSS</p>
    <p>Generate r hashes from k-r secret words:</p>
    <p>D = data block of the k-r secret words</p>
    <p>i = index</p>
    <p>H = cryptographic hash function (e.g., SHA-256)</p>
  </div>
  <div class="page">
    <p>CAONT-RS</p>
    <p>Example: n =4, k=3, r = k -1 = 2:</p>
    <p>Replace the random key with</p>
    <p>a hash</p>
  </div>
  <div class="page">
    <p>CAONT-RS</p>
    <p>Transform s secret words d0, d1, , ds-1 into s+1</p>
    <p>CAONT words c0, c1, , cs:</p>
    <p>= XOR operator</p>
    <p>hkey = hash key generated from the secret via a</p>
    <p>cryptographic hash function (e.g., SHA-256)</p>
    <p>i = index</p>
    <p>E = encryption function (e.g., AES-256)</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>Evaluate the computational throughput of CRSSS</p>
    <p>and CAONT-RS</p>
    <p>Setup:</p>
    <p>OpenSSL for encryption (AES-256) and hash (SHA-256)</p>
    <p>Jerasure [Plank, 2014] &amp; GF-Complete [Plank, 2013] for encoding</p>
    <p>Implementation in C</p>
    <p>Compare:</p>
    <p>RSSS vs. CRSSS</p>
    <p>AONT-RS vs. CAONT-RS</p>
    <p>CRSSS vs. CAONT-RS 17</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>m = n - k</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>CRSSS has much higher overhead (~30%) than RSSS due</p>
    <p>to more hash computations; yet, CAONT-RS has limited</p>
    <p>overhead (~8%) over AONT-RS</p>
    <p>m = n - k</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>CRSSS and CAONT-RS are complementary in performance:</p>
    <p>CRSSS decreases in throughput due to more hashes, while</p>
    <p>CAONT-RS increases in throughput due to RS encoding</p>
    <p>m = n - k</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>For smaller r, CRSSS achieves much higher throughput</p>
    <p>(&gt;400MB/s), but with higher storage overhead</p>
    <p>tradeoff between throughput and storage</p>
    <p>m = n - k</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Defines a framework of convergent dispersal</p>
    <p>that enables keyless security and deduplication</p>
    <p>Two implementations based on state-of-the-art:</p>
    <p>CRSSS and CAONT-RS</p>
    <p>Both are complementary in performance</p>
    <p>Future work:</p>
    <p>Complete cloud storage prototype</p>
    <p>Cost-performance analysis</p>
    <p>Security analysis</p>
    <p>Evaluation in real-world deployment</p>
  </div>
</Presentation>
