<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LOOM: Bypassing Races in Live Applications with Execution Filters</p>
    <p>Jingyue Wu, Heming Cui, Junfeng Yang</p>
    <p>Columbia University</p>
  </div>
  <div class="page">
    <p>Mozilla Bug #133773</p>
    <p>void js_DestroyContext(</p>
    <p>JSContext *cx) {</p>
    <p>JS_LOCK_GC(cx-&gt;runtime);</p>
    <p>MarkAtomState(cx);</p>
    <p>if (last) { // last thread?</p>
    <p>...</p>
    <p>FreeAtomState(cx);</p>
    <p>...</p>
    <p>}</p>
    <p>JS_UNLOCK_GC(cx-&gt;runtime);</p>
    <p>}</p>
    <p>if (last) // return true</p>
    <p>FreeAtomState</p>
    <p>MarkAtomState</p>
    <p>A buggy interleaving</p>
    <p>Non-last Thread Last Thread</p>
    <p>bug</p>
  </div>
  <div class="page">
    <p>Complex Fix void js_DestroyContext() {</p>
    <p>if (last) {</p>
    <p>state = LANDING;</p>
    <p>if (requestDepth == 0)</p>
    <p>js_BeginRequest();</p>
    <p>while (gcLevel &gt; 0)</p>
    <p>JS_AWAIT_GC_DONE();</p>
    <p>js_ForceGC(true);</p>
    <p>while (gcPoke)</p>
    <p>js_GC(true);</p>
    <p>FreeAtomState();</p>
    <p>} else {</p>
    <p>gcPoke = true;</p>
    <p>js_GC(false);</p>
    <p>}</p>
    <p>}</p>
    <p>void js_BeginRequest() {</p>
    <p>while (gcLevel &gt; 0)</p>
    <p>JS_AWAIT_GC_DONE();</p>
    <p>}</p>
    <p>void js_ForceGC(bool last)</p>
    <p>{</p>
    <p>gcPoke = true;</p>
    <p>js_GC(last);</p>
    <p>}</p>
    <p>void js_GC(bool last) {</p>
    <p>if (state == LANDING &amp;&amp;</p>
    <p>!last)</p>
    <p>return;</p>
    <p>gcLock.acquire();</p>
    <p>if (!gcPoke) {</p>
    <p>gcLock.release();</p>
    <p>return;</p>
    <p>}</p>
    <p>if (gcLevel &gt; 0) {</p>
    <p>gcLevel++;</p>
    <p>while (gcLevel &gt; 0)</p>
    <p>JS_AWAIT_GC_DONE();</p>
    <p>gcLock.release();</p>
    <p>return;</p>
    <p>}</p>
    <p>gcLevel = 1;</p>
    <p>gcLock.release();</p>
    <p>restart:</p>
    <p>MarkAtomState();</p>
    <p>gcLock.acquire();</p>
    <p>if (gcLevel &gt; 1) {</p>
    <p>gcLevel = 1;</p>
    <p>gcLock.release();</p>
    <p>goto restart;</p>
    <p>}</p>
    <p>gcLevel = 0;</p>
    <p>gcPoke = false;</p>
    <p>gcLock.release();</p>
    <p>}</p>
    <p>4 functions; 3 integer flags  Nearly a month  Not the only example</p>
  </div>
  <div class="page">
    <p>LOOM: Live-workaround Races</p>
    <p>Execution filters: temporarily filter out buggy thread interleavings</p>
    <p>void js_DestroyContext(JSContext *cx) {</p>
    <p>MarkAtomState(cx);</p>
    <p>if (last thread) {</p>
    <p>...</p>
    <p>FreeAtomState(cx);</p>
    <p>...</p>
    <p>}</p>
    <p>} js_DestroyContext &lt;&gt; self</p>
    <p>Declarative, easy to write</p>
    <p>A mutual-exclusion</p>
    <p>execution filter to bypass</p>
    <p>the race on the left</p>
  </div>
  <div class="page">
    <p>LOOM: Live-workaround Races</p>
    <p>Execution filters: temporarily filter out buggy thread interleavings</p>
    <p>Installs execution filters to live applications  Improve server availability</p>
    <p>STUMP *PLDI 09+, Ginseng *PLDI 06+, KSplice *EUROSYS 09+</p>
    <p>Installs execution filters safely  Avoid introducing errors</p>
    <p>Incurs little overhead during normal execution</p>
  </div>
  <div class="page">
    <p>Summary of Results</p>
    <p>We evaluated LOOM on nine real races.</p>
    <p>Bypasses all the evaluated races safely</p>
    <p>Applies execution filters immediately</p>
    <p>Little performance overhead (&lt; 5%)</p>
    <p>Scales well with the number of application threads (&lt; 10% with 32 threads)</p>
    <p>Easy to use (&lt; 5 lines)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Architecture</p>
    <p>Combines static preparation and live update</p>
    <p>Safely updating live applications</p>
    <p>Reducing performance overhead</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>LLVM Compiler</p>
    <p>LOOM Compiler Plugin</p>
    <p>Application Source</p>
    <p>LOOM Update Engine</p>
    <p>Application Binary</p>
    <p>LOOM Update Engine</p>
    <p>Buggy Application</p>
    <p>LOOM Update Engine</p>
    <p>Patched Application</p>
    <p>Execution Filter</p>
    <p>LOOM Controller</p>
    <p>Static Preparation Live Update</p>
    <p>$ llvm-gcc</p>
    <p>$ opt load</p>
    <p>$ llc</p>
    <p>$ gcc</p>
    <p>js_DestroyContext</p>
    <p>&lt;&gt; self</p>
    <p>$ loomctl add &lt;pid&gt;</p>
    <p>&lt;filter file&gt;</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Architecture</p>
    <p>Combines static preparation and live update</p>
    <p>Safely updating live applications</p>
    <p>Reducing performance overhead</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Safety: Not Introducing New Errors</p>
    <p>PC</p>
    <p>Mutual Exclusion</p>
    <p>Lock</p>
    <p>Unlock</p>
    <p>Order Constraints</p>
    <p>PC</p>
    <p>PC Up</p>
    <p>Down</p>
    <p>PC</p>
    <p>PC</p>
    <p>Up</p>
    <p>Down</p>
  </div>
  <div class="page">
    <p>Evacuation Algorithm</p>
    <p>LOOM</p>
    <p>Update</p>
    <p>Engine</p>
    <p>PC</p>
    <p>Unsafe to update</p>
    <p>LOOM</p>
    <p>Update</p>
    <p>Engine</p>
    <p>Evacuate</p>
    <p>Safe to update</p>
    <p>LOOM</p>
    <p>Update</p>
    <p>Engine</p>
    <p>Install</p>
    <p>Filter</p>
    <p>Updated</p>
  </div>
  <div class="page">
    <p>Control Application Threads</p>
    <p>handle_client</p>
    <p>// do real work</p>
    <p>handle_client</p>
    <p>Y</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Control Application Threads (contd)</p>
    <p>handle_client</p>
    <p>// do real work</p>
    <p>handle_client</p>
    <p>Y</p>
    <p>N</p>
    <p>handle_client</p>
    <p>// do real work</p>
    <p>handle_client</p>
    <p>Y</p>
    <p>N cond_break()</p>
    <p>// not the final version</p>
    <p>void cond_break() {</p>
    <p>read_unlock(&amp;update);</p>
    <p>read_lock(&amp;update);</p>
    <p>}</p>
    <p>// not the final version</p>
    <p>void loom_update() {</p>
    <p>write_lock(&amp;update);</p>
    <p>install_filter();</p>
    <p>write_unlock(&amp;update);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Pausing Threads at Safe Locations</p>
    <p>void cond_break() {</p>
    <p>if (wait[backedge_id]) {</p>
    <p>read_unlock(&amp;update);</p>
    <p>while (wait[backedge_id]);</p>
    <p>read_lock(&amp;update);</p>
    <p>}</p>
    <p>}</p>
    <p>void loom_update() {</p>
    <p>identify_safe_locations();</p>
    <p>for each safe backedge E</p>
    <p>wait[E] = true;</p>
    <p>write_lock(&amp;update);</p>
    <p>install_filter();</p>
    <p>for each safe backedge E</p>
    <p>wait[E] = false;</p>
    <p>write_unlock(&amp;update);</p>
    <p>}</p>
    <p>handle_client</p>
    <p>// do real work</p>
    <p>handle_client</p>
    <p>Y</p>
    <p>N cond_break()</p>
    <p>cmpl 0x0, 0x845208c</p>
    <p>je 0x804b56d</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Architecture</p>
    <p>Combines static preparation and live update</p>
    <p>Safely updating live applications</p>
    <p>Reducing performance overhead</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Hybrid Instrumentation</p>
    <p>handle_client</p>
    <p>// do real work</p>
    <p>handle_client</p>
    <p>Y</p>
    <p>N slot();</p>
    <p>slot();</p>
    <p>// do real work</p>
    <p>slot();</p>
    <p>slot();</p>
    <p>switch?</p>
    <p>switch?</p>
    <p>N cond_break()</p>
    <p>handle_client</p>
    <p>// do real work</p>
    <p>handle_client</p>
    <p>Y</p>
    <p>N</p>
    <p>cond_break()</p>
    <p>void slot(int stmt_id) {</p>
    <p>op_list = operations[stmt_id];</p>
    <p>foreach op in op_list</p>
    <p>do op;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Bare Instrumentation Overhead</p>
  </div>
  <div class="page">
    <p>Bare Instrumentation Overhead</p>
  </div>
  <div class="page">
    <p>Scalability</p>
    <p>48-core machine with 4 CPUs; Each CPU has 12 cores.  Pin the server to CPU 0, 1, 2, and the client to CPU 3.</p>
    <p>-6% -4% -2% 0% 2% 4% 6% 8%</p>
    <p>O ve</p>
    <p>rh e</p>
    <p>a d</p>
    <p>( %</p>
    <p>)</p>
    <p>Number of threads</p>
    <p>Scalability on MySQL</p>
    <p>RESP</p>
    <p>TPUT</p>
    <p>Performance overhead does not increase</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>LOOM: A live-workaround system designed to quickly and safely bypass races</p>
    <p>Execution filters: easy to use and flexible (&lt; 5 lines)</p>
    <p>Evacuation algorithm: safe</p>
    <p>Hybrid instrumentation: fast (overhead &lt; 5%) and scalable (overhead &lt; 10% with 32 threads)</p>
    <p>Future work</p>
    <p>Generic hybrid instrumentation framework</p>
    <p>Extend the idea to other classes of errors</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
