<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>lprof : A Non-intrusive Request Flow Pro5iler for Distributed Systems Xu Zhao, Yongle Zhang, David Lion, Muhammad FaizanUllah, Yu Luo, Ding Yuan, Michael Stumm</p>
    <p>Oct. 8th 2014</p>
  </div>
  <div class="page">
    <p>Performance analysis tools are needed</p>
    <p>Poor performance of distributed systems leads to o Increase of user latency o Increase of data center cost</p>
    <p>Distributed system behavior is hard to understand</p>
    <p>o Concurrent requests being processed by mulLple nodes</p>
    <p>To diagnose poor performance, tools are needed to o Reconstruct the request control flow o Understand system behavior</p>
  </div>
  <div class="page">
    <p>Existing tools are intrusive</p>
    <p>Instrument systems to infer request control flow o E.g. MagPie, Project 5, X-Trace, Dapper, etc. o Incur performance overhead o InstrumentaLons are oQen system specific</p>
  </div>
  <div class="page">
    <p>System logs contain rich information</p>
    <p>Rich informaLon in logs is not coincidence o Developers rely on logs to perform manual debugging</p>
    <p>Distributed systems generate lots of logs o During normal execuLon</p>
  </div>
  <div class="page">
    <p>Existing log analyzers are limited</p>
    <p>Cannot infer request control flow o Machine learning based log analyzers</p>
    <p>E.g. [Xu09], DISTALYZER, SynopGc, etc.  Only detect system anomalies</p>
    <p>o Commercial tools  E.g. splunk, VMWare LogInsight  Require users to perform key-word based searches</p>
  </div>
  <div class="page">
    <p>Infers request control flow from system logs o Along with Lming informaLon o Group logs printed by the same request on mulLple nodes o Use informaGon generated by staGc analysis</p>
    <p>Node 2</p>
    <p>Node 1</p>
    <p>System logs</p>
    <p>request</p>
    <p>lprof: a non-intrusive pro5iler</p>
    <p>Node1 Node2</p>
    <p>Thread1</p>
    <p>Thread2</p>
    <p>Thread3</p>
    <p>Thread4</p>
    <p>Request control 5low</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>IntroducLon  Case Study  Design  EvaluaLon</p>
  </div>
  <div class="page">
    <p>A real-world example  Performance regression  HDFS-4049</p>
    <p>writeBlock is suspecious 8</p>
    <p>writeBlock readBlock</p>
    <p>Time</p>
    <p>La te nc y</p>
    <p>(ms) Latency for each type of request</p>
  </div>
  <div class="page">
    <p>o Intra-node latency doesnt increases while inter-node does o Conclusion: unnecessary network communicaLon</p>
    <p>Per-node Latency</p>
    <p>Node post-update writeBlock pre-update writeBlock</p>
    <p>La te nc y</p>
    <p>(ms)</p>
    <p>DN3</p>
    <p>Zoom into per-node latency</p>
    <p>DN2</p>
    <p>DN1</p>
    <p>DN3 DN2 DN1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>IntroducLon  Case Study  Design  EvaluaLon</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>StaLc analysis</p>
    <p>Log analysis</p>
    <p>VisualizaLon</p>
    <p>Model</p>
    <p>Request database</p>
    <p>lprof Byte code</p>
    <p>Logs</p>
  </div>
  <div class="page">
    <p>Goal: to sLtch log messages with respecLve requests</p>
    <p>Receiving block blk_01</p>
    <p>Receiving block blk_01 Receiving block blk_02 Received block blk_01 blk_01 terminating</p>
    <p>Logs are interleaved  From different request types  From different request instances of the same type</p>
    <p>Perfect idenLfiers doesnt always exist  Distributed across mulLple nodes</p>
    <p>log snippet from HDFS data nodes</p>
    <p>Challenges</p>
    <p>writeBlock1 writeBlock2</p>
    <p>DataNode1</p>
    <p>DataNode2</p>
    <p>HDFS_READ block blk_01 readBlock</p>
  </div>
  <div class="page">
    <p>Code snippet in HDFS 1 dataXCeiver() { 2 switch(opCode){ 3 case WRITE_BLOCK: 4 blk_id = getBlock(); 5 writeBlock(blk_id, ); 6 break; 7 case READ_BLOCK: 8 blk_id = getBlock(); 9 readBlock(blk_id, ); 10 break; 11 } 12}</p>
    <p>Top level method - starLng method to process a request  Request idenLfier - logged variable not modified in one request  Log temporal order - possible order between log statements  CommunicaLon behavior - communicaLon between threads</p>
  </div>
  <div class="page">
    <p>Find top level method  Find request idenLfiers  IntuiLon</p>
    <p>o Request idenLfiers already exist for manual debugging o Not modified within one request o Once modified, outside of the request</p>
    <p>Request analysis</p>
  </div>
  <div class="page">
    <p>Bokom-up analysis on call graph o Logged variables  idenLfier candidates (IC) o Number of Lmes they got printed  count</p>
    <p>IC: {} count:0</p>
    <p>writeBlock()</p>
    <p>IC: {blk_id} count: 8</p>
    <p>readBlock()</p>
    <p>IC: {blk_id} count: 7</p>
    <p>dataXCeiver()</p>
    <p>Call Graph</p>
    <p>Request analysis example</p>
    <p>top level method idenGfiers writeBlock blk_id readBlock blk_id</p>
    <p>o Once count decreases, pick top level method and idenLfier</p>
  </div>
  <div class="page">
    <p>Temporal order analysis</p>
    <p>Control flow analysis in each top level method</p>
    <p>temporal order</p>
  </div>
  <div class="page">
    <p>Communication pair analysis</p>
    <p>CommunicaLon between request top level methods o Intra-node: thread creaLon, shared objects o Network: socket, RPC</p>
    <p>Pair serializing and de-serializing methods</p>
  </div>
  <div class="page">
    <p>Summary of static analysis output  Top level method &amp; request idenLfier</p>
    <p>Log temporal order</p>
    <p>CommunicaLon pair</p>
    <p>PacketResponder.run()</p>
    <p>top level method idenGfiers writeBlock() blk_id readBlock() blk_id</p>
    <p>writeBlock()</p>
    <p>writeBlock()</p>
    <p>id: blk_id</p>
    <p>writeBlock()</p>
    <p>PacketResponder.run()</p>
    <p>id: blk_id type: Thread CreaLon type: Network</p>
  </div>
  <div class="page">
    <p>PktRsp.run</p>
    <p>[9 logs from 3 nodes], blk_01</p>
    <p>[log1,2,3] ,blk_01</p>
    <p>[log2,3],blk_01</p>
    <p>[log1],blk_01 writeBlock</p>
    <p>Node 2</p>
    <p>Node 1</p>
    <p>Map Combine Reduce</p>
    <p>writeBlock Node 3</p>
    <p>Distributed log stitching</p>
    <p>Implemented as a MapReduce job</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>IntroducLon  Case Study  Design  EvaluaLon</p>
  </div>
  <div class="page">
    <p>Evaluation methodology</p>
    <p>Evaluated on logs from 4 distributed systems o HDFS, Yarn, HBase, Cassandra o Logs generated on 200 Amazon EC2 nodes o HiBench, YCSB workload</p>
    <p>Authors manually verified each unique log sequence</p>
    <p>writeBlock log sequence</p>
    <p>Receiving block  Received block   terminating</p>
    <p>logs</p>
  </div>
  <div class="page">
    <p>Request attribution accuracy</p>
    <p>System Correct Incomplete Failed Incorrect</p>
    <p>HDFS Yarn</p>
    <p>Cassandra HBase</p>
    <p>Average 90.4% 5.7% 3.0% 1.0%</p>
    <p>accuracy for all the log messages</p>
  </div>
  <div class="page">
    <p>Real-world performance anomalies</p>
    <p>Randomly selected 23 anomalies o Reproduced each one to collect logs</p>
    <p>lprof is helpful for idenLfying the root cause for 65%</p>
    <p>Reasons for the cases lprof cannot help o Abnormal requests dont print any logs o The abnormal request only print 1 log  But latency is needed for debugging</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Intrusive tools o E.g. MagPie, Project 5, X-Trace, Dapper, etc.</p>
    <p>ExisLng log analyzers o E.g. [Xu09], DISTALYZER, SynopGc, etc.</p>
    <p>The Mystery Machine [Chow14] o Infers request flow across soQware layers o Analyzes criLcal path and slack o But requires instrumenLng IDs into logs</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>lprof: a profiler for distributed system o Infers request control flow along with Lming informaLon o Non-intrusive because enLrely from system logs o Analyzes logs with informaLon generated by staLc analysis</p>
    <p>lprof leverages the natural way developers do logging</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>lprof benefits from good logging pracLce o lprof cannot help when theres no log o Timestamp is required for latency analysis o Good idenLfier can improve the accuracy</p>
    <p>lprof cannot infer request across soQware layers</p>
    <p>lprof currently works on Java byte code</p>
  </div>
</Presentation>
