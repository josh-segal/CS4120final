<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SUDO: Optimizing Data Shuffling in Data-Parallel Computation</p>
    <p>by Understanding User-Defined Functions</p>
    <p>Jiaxing Zhang, Hucheng Zhou, Rishan Chen, Xuepeng Fan, Zhenyu Guo,</p>
    <p>Haoxiang Lin, Jack Y. Li, Wei Lin, Jingren Zhou, Lidong Zhou</p>
    <p>Microsoft Research Asia</p>
    <p>Microsoft Bing</p>
  </div>
  <div class="page">
    <p>Flow of Distributed Data Parallel Computation</p>
    <p>Scheduler</p>
    <p>Client</p>
    <p>Partitioned Data</p>
    <p>Local Processing</p>
    <p>Data Shuffling across machines</p>
    <p>Local Processing</p>
    <p>Data Shuffling across machines</p>
    <p>Local Processing</p>
    <p>2</p>
    <p>bing bing live live msn msn</p>
    <p>gnib evil evil nsm nsm</p>
    <p>evil evil gnib gnib nsm nsm</p>
    <p>bing bing live live msn msn</p>
    <p>gnib</p>
    <p>Hash By URL</p>
    <p>Hash By URL</p>
    <p>Shuffling as the dominant cost: 200 PB for one-month trace in a production bed 58.6% of cross-pod traffic</p>
  </div>
  <div class="page">
    <p>Scheduler</p>
    <p>Client</p>
    <p>Why Shuffling Stages Necessary?</p>
    <p>Hash By URL</p>
    <p>Hash By URL</p>
    <p>DPP (Data-Partition Properties): Clustered (URL)</p>
    <p>DPP: Clustered (URL)</p>
    <p>bing bing live live msn msn</p>
    <p>evil evil gnib gnib nsm nsm</p>
    <p>gnib evil evil nsm nsm gnib</p>
  </div>
  <div class="page">
    <p>Scheduler</p>
    <p>Client</p>
    <p>4</p>
    <p>Hash By URL</p>
    <p>Hash By URL</p>
    <p>evil evil gnib gnib nsm nsm</p>
    <p>gnib evil evil nsm nsm gnib</p>
    <p>DPP: Clustered (URL)</p>
    <p>live live msn msn</p>
    <p>Unnecessary Shuffling Stages</p>
    <p>DPP: Clustered (URL)</p>
    <p>DPP (Data-Partition Properties): Clustered (URL)</p>
    <p>bing bing</p>
  </div>
  <div class="page">
    <p>Scheduler</p>
    <p>Client</p>
    <p>Why Not Removed?</p>
    <p>Hash By URL</p>
    <p>Hash By URL</p>
    <p>Functional Property: One-to-One =&gt; None</p>
    <p>DPP: Clustered (URL)</p>
    <p>=&gt; None (URL)</p>
    <p>bing live live msn msn</p>
    <p>gnib evil evil nsm nsm gnib</p>
    <p>DPP (Data-Partition Properties): Clustered (URL)</p>
    <p>bing</p>
    <p>DPP: Clustered (URL)</p>
  </div>
  <div class="page">
    <p>What is SUDO?</p>
    <p>Remove unnecessary shuffling steps</p>
    <p>Reasoning DPP</p>
    <p>across UDFs and Shuffling Stages</p>
    <p>Extract functional properties of the UDF</p>
  </div>
  <div class="page">
    <p>Whats next?</p>
    <p>DPP (Data-partition properties)</p>
    <p>What are the DPP?</p>
    <p>How DPP change across shuffling stages?</p>
    <p>Functional Properties</p>
    <p>What are the functional properties?</p>
    <p>How DPP change across UDFs?</p>
    <p>How to identify the functional properties?</p>
  </div>
  <div class="page">
    <p>Data-partition Properties (DPP)</p>
    <p>Weak</p>
    <p>Strong</p>
    <p>Ranged</p>
    <p>Partitioned</p>
    <p>None</p>
    <p>None Sorted Contiguous</p>
    <p>CrossPartition</p>
    <p>WithinPartition</p>
    <p>AdHoc</p>
    <p>Disjoint</p>
    <p>LSorted</p>
    <p>GSorted</p>
    <p>Clustered PSorted</p>
  </div>
  <div class="page">
    <p>DPP Lattice</p>
    <p>Weak</p>
    <p>Strong</p>
    <p>Ranged</p>
    <p>Partitioned</p>
    <p>None</p>
    <p>None Sorted Contiguous</p>
    <p>CrossPartition</p>
    <p>WithinPartition</p>
    <p>AdHoc</p>
    <p>Disjoint</p>
    <p>LSorted</p>
    <p>GSorted</p>
    <p>Clustered PSorted</p>
  </div>
  <div class="page">
    <p>Scheduler</p>
    <p>Client</p>
    <p>Example: how DPP changes through shuffling steps</p>
    <p>Hash By URL</p>
    <p>Local sort</p>
    <p>Re-partition  hash  range</p>
    <p>Merge sort</p>
    <p>AdHoc</p>
    <p>LSorted</p>
    <p>Disjoint</p>
    <p>PSorted</p>
  </div>
  <div class="page">
    <p>How DPP changes through shuffling steps? (or how to achieve certain DPP via shuffling steps?)</p>
    <p>Local sort</p>
    <p>Re-partition  Hash  Range</p>
    <p>Merge</p>
    <p>H</p>
    <p>H</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>Local sort</p>
    <p>Re-partition  Hash  Range</p>
    <p>Merge</p>
    <p>H</p>
    <p>H</p>
    <p>R R R</p>
    <p>H</p>
    <p>How DPP changes through shuffling steps? (or how to achieve certain DPP via shuffling steps?)</p>
  </div>
  <div class="page">
    <p>Functional Properties</p>
    <p>LSorted</p>
    <p>Clustered</p>
    <p>GSorted Strictly</p>
    <p>monotonic</p>
    <p>One-to-One</p>
    <p>Monotonic</p>
    <p>Pass-Through</p>
    <p>Data-partition Properties Functional Properties</p>
    <p>StrictlyIncreasing</p>
    <p>StrictlyDecreasing</p>
    <p>Increasing</p>
    <p>Decreasing</p>
  </div>
  <div class="page">
    <p>How DPP changes through UDFs? Pass-through</p>
    <p>Strictly-monotonic</p>
    <p>Monotonic</p>
    <p>One-to-one</p>
  </div>
  <div class="page">
    <p>Scheduler</p>
    <p>Client</p>
    <p>Optimization: An Example</p>
    <p>Hash By URL</p>
    <p>AdHoc (URL)</p>
    <p>Clustered (URL)</p>
    <p>Hash By URL</p>
    <p>Clustered (URL)</p>
    <p>Step 1: collect data-shuffling requirements based on given execution plan</p>
    <p>Step 2: forward DPP propagation based on transition graph about DPP change across UDFs</p>
    <p>AdHoc (URL)</p>
    <p>Clustered (URL)</p>
    <p>Step 3: figure out shuffling `delta based on transition graph about DPP change across shuffling</p>
    <p>Local Sort Re-partition (hash) Merge Sort</p>
    <p>{} =&gt; removed</p>
  </div>
  <div class="page">
    <p>Identify Functional Properties via Rule-based Deduction</p>
    <p>Deduction Rules 16</p>
    <p>/</p>
    <p>Floor</p>
    <p>=</p>
    <p>PassThough(hour) PassThough (hour)</p>
    <p>Constant(24)</p>
    <p>Constant</p>
    <p>Increase(z, t) :- DIV z y x, Increase(y, t), Constant(x)</p>
    <p>Increase(x, t) :- PassThrough(x, t)</p>
    <p>Increase (tmp,hour)</p>
    <p>Increase(y, t) :- Floor y x, Increase(x, t) Increase (tmp,hour)</p>
    <p>_(y, t) :- ASSIGN y x, _(x, t) Increase (day,hour)</p>
    <p>UDF: day = Floor(hour/24)</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>UDF analyzer to extract functional property</p>
    <p>http://research.microsoft.com/Phoenix to extract AST with 8281 LOC (C#)</p>
    <p>http://bddbddb.sourceforge.net/ as deduction engine with ~100 Rules</p>
    <p>SUDO rewriter to do optimization</p>
    <p>~1316 LOC (C#)</p>
  </div>
  <div class="page">
    <p>Coverage Study</p>
    <p>Property UDF &lt;out-col, in-col&gt; # Ratio %</p>
    <p>Pass-through 1,998,819 84.73</p>
    <p>Strictly-increasing 147,820 6.27</p>
    <p>Strictly-decreasing 0 0</p>
    <p>Increasing 138 0</p>
    <p>Decreasing 0 0</p>
    <p>One-to-one 1,758 0.08</p>
    <p>Others 210,544 8.92</p>
    <p>Sum 2,359,079 100</p>
    <p>Dataset: 236,457 UDFs in in 10,099 jobs from production beds in 2010/2011.</p>
    <p>Among 2,278 (22.6%) eligible jobs in them, 17.5% of them can be optimized by SUDO.</p>
    <p>. Pass-through is the dominant functional property.</p>
    <p>. 91.2% of the functional properties are identified.</p>
    <p>. 17.5% of the eligible jobs can be optimized by SUDO.</p>
  </div>
  <div class="page">
    <p>Effectiveness Study</p>
    <p>Case Machine# Native Shuffling IO (TB)</p>
    <p>Native Latency (min)</p>
    <p>Shuffling Stage# Change</p>
    <p>Shuffling IO Reduction</p>
    <p>Latency Reduction</p>
    <p>Anchor Data Preprocessing</p>
    <p>Trend Analysis 1,000 60 230 3 =&gt; 1 35% 45%</p>
    <p>Query-Anchor Relevance</p>
    <p>. Shuffling IO reduction is significant</p>
    <p>. Latency reduction is introduced by data skew, which is rare case</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Data-partition property propagation to reduce shuffling stages</p>
    <p>Incorporating partitioning and parallel plans into the SCOPE optimizer (ICDE10)</p>
    <p>Apply program analysis to distributed dataparallel computation</p>
    <p>Manimal (PVLDB11)</p>
  </div>
  <div class="page">
    <p>An inter-disciplinary research area</p>
    <p>System</p>
    <p>A place where we leverage PL techniques to advance the state-of-the</p>
    <p>art in system and database fields</p>
    <p>Database</p>
    <p>PL</p>
    <p>SUDO is the beginning</p>
    <p>Engineering Performance PL</p>
  </div>
  <div class="page">
    <p>Thanks! Questions?</p>
    <p>Microsoft Research Asia</p>
    <p>Microsoft Bing</p>
  </div>
</Presentation>
