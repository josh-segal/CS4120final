<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scalable In-Memory Transaction</p>
    <p>Processing with HTM</p>
    <p>Yingjun Wu and Kian-Lee Tan</p>
    <p>National University of Singapore</p>
  </div>
  <div class="page">
    <p>HTM simplifies implementing</p>
    <p>concurrent programs</p>
    <p>Lock-free programming Hardware transactional memory</p>
    <p>__sync_bool_compare_and_swap()</p>
    <p>__sync_fetch_and_add()</p>
    <p>__sync_synchronize()</p>
    <p>...</p>
    <p>Atomic Buildins TSX Instructions</p>
    <p>_xbegin()</p>
    <p>_xend()</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>HTM is not a silver bullet for</p>
    <p>transaction processing</p>
    <p>Low-contention workload.</p>
    <p>(theta = 0) High-contention workload.</p>
    <p>(theta = 0.8)</p>
    <p>HTM-assisted main-memory database</p>
    <p>Processing multi-key transactions on a standard hash map.</p>
  </div>
  <div class="page">
    <p>HTM is not a silver bullet for</p>
    <p>transaction processing</p>
    <p>Existing works apply HTM to OCC protocol.</p>
    <p>High database transaction abort rate;</p>
    <p>High database transaction restart overhead.</p>
    <p>Read Validation Write</p>
    <p>Atomic execution Conventional</p>
    <p>OCC</p>
    <p>Vulnerable window</p>
    <p>HTM-assisted</p>
    <p>OCC Vulnerable window</p>
    <p>Protected!</p>
    <p>Modifiable!</p>
  </div>
  <div class="page">
    <p>Our proposal: HTCC</p>
    <p>A new HTM-assisted concurrency control protocol</p>
    <p>that targets at supporting scalable and robust</p>
    <p>transaction processing even under highly contended</p>
    <p>workload.</p>
    <p>Reduce transaction abort rate using a hybrid protocol;</p>
    <p>Minimize transaction restart overhead using delta</p>
    <p>restoration.</p>
  </div>
  <div class="page">
    <p>Data Classification</p>
    <p>Split the data into hot and cold records and process</p>
    <p>them differently.</p>
    <p>Database</p>
    <p>Hot data</p>
    <p>Cold data</p>
  </div>
  <div class="page">
    <p>Data Classification</p>
    <p>Data structure.</p>
    <p>ts Key Value</p>
    <p>ContentMetadata</p>
    <p>lock vis hot cnt</p>
  </div>
  <div class="page">
    <p>Data Classification</p>
    <p>Data structure.</p>
    <p>record1 N</p>
    <p>record2 N</p>
    <p>record3 N</p>
    <p>record4 Y</p>
    <p>record5 N</p>
    <p>hot cnt</p>
    <p>background thread</p>
  </div>
  <div class="page">
    <p>Data Classification</p>
    <p>Data structure.</p>
    <p>background thread</p>
    <p>record1 N 97</p>
    <p>record2 N 5</p>
    <p>record3 N 9</p>
    <p>record4 Y 23</p>
    <p>record5 N 17</p>
    <p>hot cnt Periodically check abort count.</p>
  </div>
  <div class="page">
    <p>Data Classification</p>
    <p>Data structure.</p>
    <p>background thread</p>
    <p>record1 N 97</p>
    <p>record2 N 5</p>
    <p>record3 N 9</p>
    <p>record4 Y 23</p>
    <p>record5 N 17</p>
    <p>hot cnt Detect top K hot records.</p>
  </div>
  <div class="page">
    <p>Data Classification</p>
    <p>Data structure.</p>
    <p>background thread</p>
    <p>Set the hot flag transactionally!</p>
    <p>record1 Y 97</p>
    <p>record2 N 5</p>
    <p>record3 N 9</p>
    <p>record4 N 23</p>
    <p>record5 N 17</p>
    <p>hot cnt</p>
  </div>
  <div class="page">
    <p>Hybrid Protocol</p>
    <p>Transaction phases.</p>
    <p>Txn begin Txn commit Txn end</p>
    <p>R-A R-B R-CRead</p>
    <p>Validation R-A R-B R-C</p>
    <p>Write R-A R-B R-C</p>
    <p>HTM region</p>
    <p>Fine-grained locking performs well for high-contention workload;</p>
    <p>HTM performs well for low-contention workload.</p>
    <p>COMMIT!</p>
    <p>Fine-grained locking for hot data</p>
    <p>HTM region for cold data</p>
  </div>
  <div class="page">
    <p>Delta Restoration</p>
    <p>Workset caching during the read phase.</p>
    <p>L1: x&lt;-read(A)</p>
    <p>L2: write(A, x+1)</p>
    <p>L3: y&lt;-read(B)</p>
    <p>L4: z&lt;-read(C)</p>
    <p>L5: write(z, x+y)</p>
    <p>PROGRAM STORAGECACHE</p>
    <p>R-A</p>
    <p>R-B</p>
    <p>R-C</p>
    <p>R-D</p>
    <p>R-A</p>
  </div>
  <div class="page">
    <p>Delta Restoration</p>
    <p>Operation restoration during the validation phase.</p>
    <p>L1: x&lt;-read(A)</p>
    <p>L2: write(A, x+1)</p>
    <p>L3: y&lt;-read(B)</p>
    <p>L4: z&lt;-read(C)</p>
    <p>L5: write(z, x+y)</p>
    <p>R-A</p>
    <p>R-A</p>
    <p>R-B</p>
    <p>R-C</p>
    <p>R-D</p>
    <p>PROGRAM CACHE STORAGE</p>
    <p>Accesses to cold records are still performed optimistically using HTM;</p>
    <p>Deadlock never happens because of HTMs guarantee of atomicity and isolation.</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Intel Xeon Processor E7-4820, 4 sockets, 40 cores.</p>
    <p>We compare with the following protocols:</p>
    <p>2PL: classic two-phase locking.</p>
    <p>OCC: classic optimistic concurrency control.</p>
    <p>SOCC: Silos OCC implementation.</p>
    <p>HOCC: Existing HTM-assisted OCC.</p>
    <p>HTO: Existing HTM-assisted timestamp ordering.</p>
  </div>
  <div class="page">
    <p>Experiments: Bottlenecks</p>
    <p>Database transaction rate with different restart threshold.</p>
    <p>TPC-C: 40 warehouse (low contention). TPC-C: 4 warehouse (high contention).</p>
  </div>
  <div class="page">
    <p>Experiments: Bottlenecks</p>
    <p>Database transaction abort rate with different restart threshold.</p>
  </div>
  <div class="page">
    <p>Experiments: Scalability</p>
    <p>Database transaction rate under different workloads.</p>
    <p>TPC-C: 40 warehouse (low contention). TPC-C: 4 warehouse (high contention).</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We proposed HTCC, an HTM-assisted concurrency</p>
    <p>control protocol that achieves scalable and robust</p>
    <p>in-memory transaction processing on multicores.</p>
    <p>Hybrid synchronization mechanism for reducing</p>
    <p>transaction abort rate;</p>
    <p>Workset caching for minimizing transaction restart</p>
    <p>overhead.</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
