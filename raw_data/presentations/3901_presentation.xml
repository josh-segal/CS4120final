<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance Support for Rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3</p>
    <p>June 16, 2012</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>The Problem: How to Support Rework</p>
    <p>Rework is quite common in software development processes</p>
    <p>Inconsistencies between requirement and design specifications cause reconsideration of both Inconsistencies between code and design too Most software engineering books ignore the topic</p>
    <p>Process provenance support could help</p>
    <p>People could review earlier decisions to facilitate rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Refactoring as an Example of Rework</p>
    <p>Refactoring is rework of design</p>
    <p>May or may not be triggered when code is recognized as being untidy There are many different design patterns [Fowler 1999]</p>
    <p>Separate Query from Modifier Refactoring Splits a method that was both a query and a modifier into two methods</p>
    <p>Create a query method to return the same value Change the return statement in original method to return the query Add calls to the query before the calls to the original method Change the original method to void and remove its return statements</p>
    <p>Executing this rework process can entail carrying out a number of different kinds of rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Refactoring as an Example of Rework</p>
    <p>Refactoring is rework of design</p>
    <p>May or may not be triggered when code is recognized as being untidy There are many different design patterns [Fowler 1999]</p>
    <p>Separate Query from Modifier Refactoring Splits a method that was both a query and a modifier into two methods</p>
    <p>Create a query method to return the same value Change the return statement in original method to return the query Add calls to the query before the calls to the original method Change the original method to void and remove its return statements</p>
    <p>Executing this rework process can entail carrying out a number of different kinds of rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Refactoring as an Example of Rework</p>
    <p>Refactoring is rework of design</p>
    <p>May or may not be triggered when code is recognized as being untidy There are many different design patterns [Fowler 1999]</p>
    <p>Separate Query from Modifier Refactoring Splits a method that was both a query and a modifier into two methods</p>
    <p>Create a query method to return the same value Change the return statement in original method to return the query Add calls to the query before the calls to the original method Change the original method to void and remove its return statements</p>
    <p>Executing this rework process can entail carrying out a number of different kinds of rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Separate Query from Modifier Refactoring as an Example of Rework</p>
    <p>Change return statement</p>
    <p>Compile</p>
    <p>Run unit tests</p>
    <p>Modify Original Method</p>
    <p>Handle Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestFailureException</p>
    <p>CompilationFailureException</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;compiledcode</p>
    <p>sourcefilename--&gt; testsuites--&gt;</p>
    <p>Exception instances are handled differently according to their types.</p>
    <p>Each exception instance triggers rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Separate Query from Modifier Refactoring as an Example of Rework</p>
    <p>Change return statement</p>
    <p>Compile</p>
    <p>Run unit tests</p>
    <p>Modify Original Method</p>
    <p>Handle Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestFailureException</p>
    <p>CompilationFailureException</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;compiledcode</p>
    <p>sourcefilename--&gt; testsuites--&gt;</p>
    <p>Exception instances are handled differently according to their types.</p>
    <p>Each exception instance triggers rework</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Exception-Triggered Rework Examples</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Rework is modeled very accurately as recursive step invocations</p>
    <p>Actual rework should be guided by context provided by provenance</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Exception-Triggered Rework Examples</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Rework is modeled very accurately as recursive step invocations</p>
    <p>Actual rework should be guided by context provided by provenance</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Exception-Triggered Rework Examples</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Rework is modeled very accurately as recursive step invocations</p>
    <p>Actual rework should be guided by context provided by provenance</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Typical Questions that Users Want Answers to during Rework</p>
    <p>Where am I?</p>
    <p>What am I doing here?</p>
    <p>How did I get here?</p>
    <p>What have I already tried?</p>
    <p>How did that work out?</p>
    <p>What alternatives do I have now?</p>
    <p>Which are likely to turn out best?</p>
    <p>Contextual information provided by provenance could help</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Typical Questions that Users Want Answers to during Rework</p>
    <p>Where am I?</p>
    <p>What am I doing here?</p>
    <p>How did I get here?</p>
    <p>What have I already tried?</p>
    <p>How did that work out?</p>
    <p>What alternatives do I have now?</p>
    <p>Which are likely to turn out best?</p>
    <p>Contextual information provided by provenance could help</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Context Information that could Help</p>
    <p>Present process execution state</p>
    <p>Current artifact values Pointers to executing steps and their recursions</p>
    <p>A complete process execution history</p>
    <p>Prior values of artifacts Previous step execution sequences</p>
    <p>Information that could help to form a plan for completing rework successfully</p>
    <p>Data Derivation Graph is the key artifact</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Change return statement</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>Run unit tests Handle Unit Test Compilation Failure</p>
    <p>Change return statement</p>
    <p>Creat query method</p>
    <p>Compile</p>
    <p>Handle Unit Test Compilation Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>Handle Unit Tests Failure</p>
    <p>UnitTestCompilationFailureException</p>
    <p>UnitTestFailureExceptionsourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>sourcefilename--&gt; --&gt;sourcefilecontent</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>CONTEXT</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Defined templates for translating Little-JIL step executions into DAG fragments</p>
    <p>Basic Features</p>
    <p>Represents how artifacts are derived from each other Incorporates scoping, nesting, hierarchy information</p>
    <p>Additional Features</p>
    <p>Links to previous artifacts values Detailed history is inferable</p>
    <p>Can generate DDGs dynamically while the process is executing</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Defined templates for translating Little-JIL step executions into DAG fragments</p>
    <p>Basic Features</p>
    <p>Represents how artifacts are derived from each other Incorporates scoping, nesting, hierarchy information</p>
    <p>Additional Features</p>
    <p>Links to previous artifacts values Detailed history is inferable</p>
    <p>Can generate DDGs dynamically while the process is executing</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Defined templates for translating Little-JIL step executions into DAG fragments</p>
    <p>Basic Features</p>
    <p>Represents how artifacts are derived from each other Incorporates scoping, nesting, hierarchy information</p>
    <p>Additional Features</p>
    <p>Links to previous artifacts values Detailed history is inferable</p>
    <p>Can generate DDGs dynamically while the process is executing</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Data Derivation Graph</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Defined templates for translating Little-JIL step executions into DAG fragments</p>
    <p>Basic Features</p>
    <p>Represents how artifacts are derived from each other Incorporates scoping, nesting, hierarchy information</p>
    <p>Additional Features</p>
    <p>Links to previous artifacts values Detailed history is inferable</p>
    <p>Can generate DDGs dynamically while the process is executing</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>How is it Supposed to be Helpful?</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Q: What did I do to (the same part of) the source code when I was trying to fix an issue caused by test case failure, which may possibly be the reason why the compilation fails right now?</p>
    <p>A: See the DDG</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>How is it Supposed to be Helpful?</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Q: What did I do to (the same part of) the source code when I was trying to fix an issue caused by test case failure, which may possibly be the reason why the compilation fails right now?</p>
    <p>A: See the DDG</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>How is it Supposed to be Helpful?</p>
    <p>Run unit tests</p>
    <p>Change return statement</p>
    <p>Unit Test Suite</p>
    <p>UnitTestFailureException</p>
    <p>sourcefilename</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>Compile</p>
    <p>sourcefilecontent</p>
    <p>UnitTestCompilationFailureException</p>
    <p>Change return statement</p>
    <p>sourcefilecontent</p>
    <p>Create query method</p>
    <p>sourcefilecontent</p>
    <p>Compile</p>
    <p>Compiled Code</p>
    <p>Run unit tests</p>
    <p>Legends</p>
    <p>Leaf Step Execution</p>
    <p>Data</p>
    <p>Exception</p>
    <p>Data Flow</p>
    <p>Handle Compilation Failure Finish</p>
    <p>Handle Unit Tests Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Start</p>
    <p>Handle Unit Test Compilation</p>
    <p>Failure Finish</p>
    <p>Handle Unit Tests Failure Finish</p>
    <p>Non-leaf Step Start/Finish</p>
    <p>Control Flow</p>
    <p>......</p>
    <p>Version</p>
    <p>Q: What did I do to (the same part of) the source code when I was trying to fix an issue caused by test case failure, which may possibly be the reason why the compilation fails right now?</p>
    <p>A: See the DDGXiang Zhao 1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Scientific Data Process</p>
    <p>Check our paper and poster for details</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>How to present the right information?</p>
    <p>How to support asking questions during rework? How to make sure the answers are presented in a meaningful way?</p>
    <p>Ripple effects Support for helping users decide the order in which to handle exceptions when many are thrown</p>
    <p>Probably can use prospection for this</p>
    <p>Study more refactoring patterns</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>How to present the right information?</p>
    <p>How to support asking questions during rework? How to make sure the answers are presented in a meaningful way?</p>
    <p>Ripple effects Support for helping users decide the order in which to handle exceptions when many are thrown</p>
    <p>Probably can use prospection for this</p>
    <p>Study more refactoring patterns</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Rework Formalization</p>
    <p>[Cass et al. EWSPT] proposed initial approaches of formalizing rework A pattern for modeling rework[Cass et al. ICSP 09]</p>
    <p>Context Support</p>
    <p>[Antunes et al. AITSE 10] proposed a context model in software development with multiple layers and perspectives. Mylyn [12] is a tool integrating task management and task context[Kersten et al. AOSD 05]</p>
    <p>Workflow Provenance: VisTrails[Callahan et al. SIGMOD 06], Kepler[Altintas et al. SSDBM 04], and etc.</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Executable model of rework processes</p>
    <p>Provenance as a first class data</p>
    <p>Available process wide Directly supports the process where it comes from</p>
    <p>DDG facilitates provenance support</p>
    <p>Scoping and nesting Version edges and equivalence edges Process introspection and retrospection</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Questions?</p>
    <p>Xiang Zhao1, Leon J. Osterweil1, Barbara Staudt Lerner2, Emery R. Boose3, Aaron M. Ellison3 Provenance Support for Rework</p>
  </div>
</Presentation>
