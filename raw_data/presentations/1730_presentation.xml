<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MIMIQ: Masking IPs with</p>
    <p>Migration in QUIC Ya s h o d h a r G o v i l , L i a n g Wa n g , a n d J e n n i fe r R e x fo r d</p>
    <p>P r i n c e t o n U n i v e r s i t y</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Internet communication is encrypted</p>
    <p>But IP addresses still visible</p>
    <p>May leak sensitive information</p>
  </div>
  <div class="page">
    <p>Existing Solutions for Hiding IP</p>
    <p>Network-layer anonymity systems face deployment challenges  Extensive modifications to Internet  Cooperation of multiple ASes along end-to-end path</p>
    <p>Address Hiding Protocol (AHP) are coarse-grained  Conceals client IP address in a single trusted AS  Works at the flow level  Susceptible to traffic-analysis attacks</p>
  </div>
  <div class="page">
    <p>Our Goal</p>
    <p>Can we achieve fine-grained and flexible IP address mixing?</p>
  </div>
  <div class="page">
    <p>Desired Properties</p>
    <p>Change IP rapidly --- Anonymity in the crowd</p>
    <p>Change IP anytime without breaking connection</p>
  </div>
  <div class="page">
    <p>Scenario: censorship circumvention</p>
    <p>Censored website: A</p>
    <p>Alice is using Tor. Drop the packets from 1.1.1.1!</p>
    <p>Alice IP = 1.1.1.1</p>
    <p>Encrypted channel</p>
    <p>The censor can identify obfuscated Tor PT connection based on the first 30 packets</p>
  </div>
  <div class="page">
    <p>Censored website: A</p>
    <p>Alice is using Tor. Drop the packets from 1.1.1.1!Alice</p>
    <p>IP = 1.1.1.1</p>
    <p>Encrypted channel</p>
    <p>Censored website: A</p>
    <p>Encrypted channel</p>
    <p>Alice IP = 1.1.1.2</p>
    <p>Per-flow IP mixing</p>
    <p>Change IP in mid-connection</p>
    <p>Scenario: censorship circumvention</p>
  </div>
  <div class="page">
    <p>But How?</p>
    <p>Using TCP, current cornerstone of the Internet  Difficult, if not infeasible  Easily break ongoing connections</p>
    <p>Using QUIC, rising star of the Internet  Doable?</p>
  </div>
  <div class="page">
    <p>What is QUIC?</p>
    <p>Recently developed by Google (2014)</p>
    <p>Still in development, but seeing increased adoption  Over 50% of Chrome  Google traffic is QUIC  HTTP/3 uses QUIC</p>
    <p>Whole host of new features</p>
    <p>Key feature for MIMIQ: IP address migration</p>
  </div>
  <div class="page">
    <p>What is QUIC?</p>
    <p>Allows client to change IP address without re-establishing connection</p>
    <p>But this is not enough</p>
  </div>
  <div class="page">
    <p>Some Other Challenges</p>
    <p>Address collisions  Different clients using the same IP address at same time</p>
    <p>Routing  Sending return traffic to client that now has different IP address</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
  </div>
  <div class="page">
    <p>Privacy Goals</p>
    <p>Make discovering the identity of the client more difficult</p>
    <p>Provide stronger resilience against traffic-analysis attacks  Client unlinkability  Adversary cannot link packets to client</p>
    <p>Key factor: QUICs handling of encryption and migration</p>
  </div>
  <div class="page">
    <p>Some Other Challenges</p>
    <p>Address collisions  Different clients using the same IP address at same time</p>
    <p>Routing  Sending return traffic to client that now has different IP address</p>
  </div>
  <div class="page">
    <p>MIMIQ Design</p>
    <p>Three components:</p>
    <p>Client agent</p>
    <p>Address allocation server</p>
    <p>Edge switch</p>
    <p>Key feature: QUIC connection migration and encryption</p>
  </div>
  <div class="page">
    <p>Some Other Challenges</p>
    <p>Address collisions  Different clients using the same IP address at same time</p>
    <p>One solution: let clients generate IP addresses  Might require crypto operations  Adversary can predict</p>
  </div>
  <div class="page">
    <p>Address Allocation</p>
    <p>MIMIQ agent runs on client hosts  talks to allocation server  Modifies client IP address and triggers connection migrations</p>
    <p>Address allocation server runs in the trusted network  Can assign an IP address set for flexible IP hopping</p>
    <p>IP address lifetime  Randomly assigned  Client stops using address when expired, address recycled</p>
  </div>
  <div class="page">
    <p>Some Other Challenges</p>
    <p>Routing  Sending return traffic to client that now has different IP address</p>
  </div>
  <div class="page">
    <p>Forwarding Return Traffic to Clients</p>
    <p>Switch Identifier (SID)  Each client facing switch has a unique fixed SID  Embedded in assigned IP addresses</p>
    <p>Allocation server maintains routing table of SIDs in edge switch  Drastically reduces forwarding table on edge switch</p>
  </div>
  <div class="page">
    <p>Routing Design</p>
  </div>
  <div class="page">
    <p>QUIC Connection Migration</p>
    <p>QUIC allows client to change IP address and resume ongoing connection</p>
    <p>Involves sending a relatively small token for path validation (some overhead)  Encrypted, looks like data</p>
    <p>Unlinkability  Packets have connection IDs  But, use new connection ID after migration  Connection IDs negotiation is encrypted  Congestion Control restarts</p>
  </div>
  <div class="page">
    <p>Evaluation  Impact of Migration</p>
    <p>Single client + Single server</p>
    <p>No allocation server  Want to test only performance impact of migration</p>
    <p>1,000 requests from client to download index.html file of www.example.com  Total data downloaded  2.7 MB  Vary number of migrations per 100 packets sent by client  Vary propagation delay</p>
  </div>
  <div class="page">
    <p>Evaluation - Results</p>
    <p>Propagation Delay</p>
  </div>
  <div class="page">
    <p>Evaluation - Prototype</p>
    <p>Run using Mininet and Chromium QUIC tools</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Implement prototype that scales to large networks</p>
    <p>Conduct a thorough security analysis</p>
    <p>Systematically evaluate effectiveness against traffic-analysis attacks</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We use QUIC connection migration + routing mobility</p>
    <p>To allow clients to rapidly change their IP address</p>
    <p>While minimizing the performance overhead and deployment barriers</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Yashodhar Govil: ygovil@princeton.edu</p>
    <p>Liang Wang: lw19@cs.princeton.edu</p>
    <p>Jennifer Rexford: jrex@cs.princeton.edu</p>
  </div>
</Presentation>
