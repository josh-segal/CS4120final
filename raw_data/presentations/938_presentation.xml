<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>UNIC: Secure Deduplication of General Computations</p>
    <p>Yang Tang and Junfeng Yang Columbia University</p>
  </div>
  <div class="page">
    <p>The worlds data is fast exploding</p>
    <p>A significant portion of the data is redundant.</p>
    <p>Data deduplication can hugely save storage and simplify management.</p>
  </div>
  <div class="page">
    <p>Not only is the data redundant</p>
    <p>The computations on top of the data are also redundant.</p>
    <p>Can we deduplicate computations as well?</p>
  </div>
  <div class="page">
    <p>Challenges How can we deduplicate computations done by mutually distrusting users?</p>
    <p>Users cant put wrong results in the cache.</p>
    <p>Users cant query the cache if they shouldnt.</p>
    <p>Dont authenticate users. Authenticate computations!</p>
    <p>The UNIC way: leverage code attestation.</p>
  </div>
  <div class="page">
    <p>More challenges How can we deduplicate general computations?</p>
    <p>Examples: virus scanning, compiling source code, compression, big-data analysis, CommonCrawl</p>
    <p>Impossible to understand every computation.</p>
    <p>With developers support, much more can be done.</p>
    <p>The UNIC way: provide a simple yet expressive API.</p>
  </div>
  <div class="page">
    <p>UNIC overview</p>
    <p>Application</p>
    <p>UNIC API</p>
    <p>UNIC cache</p>
    <p>UNIC</p>
    <p>Code attestation for integrity and secrecy</p>
    <p>UNIC: secure deduplication of general computations.</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>Security design</p>
    <p>Example</p>
    <p>UNIC API</p>
    <p>Evaluation</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Threats  Cache poisoning</p>
    <p>A malicious user may try to put wrong results.</p>
    <p>Query forging</p>
    <p>A malicious user may try to query entries in the result cache that she cannot access.</p>
    <p>UNIC leverages code attestation to enforce both integrity and secrecy of the result cache.</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Sign atu re</p>
    <p>Code attestation cryptographically binds the result with the code and input that produced the result.</p>
    <p>Code attestation</p>
    <p>input</p>
    <p>mov %edi,%ebp sub $0x3a8,%rsp mov (%rsi),%rdi mov %fs:0x28,%rax mov %rax,0x398(%rsp) xor %eax,%eax</p>
    <p>code</p>
    <p>result</p>
    <p>A computation is</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>UNIC design UNIC computes</p>
    <p>Sign atu re</p>
    <p>input mov %edi,%ebp sub $0x3a8,%rsp mov (%rsi),%rdi mov %fs:0x28,%rax mov %rax,0x398(%rsp) xor %eax,%eax</p>
    <p>code</p>
    <p>result</p>
    <p>(1) result = code(input)</p>
    <p>Run code on input to compute result.</p>
    <p>(2) sig = HMAC(hash(code) || hash(input) || result, K)</p>
    <p>Bind result with code and input.</p>
    <p>K is distributed among the trusted OSes.</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>UNIC protocol When an application wants to compute code(input)</p>
    <p>hash(code) || hash(input)</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
    <p>Application UNIC cache</p>
  </div>
  <div class="page">
    <p>UNIC protocol If cache hits</p>
    <p>hash(code) || hash(input)</p>
    <p>result</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
    <p>Application UNIC cache</p>
  </div>
  <div class="page">
    <p>UNIC protocol If cache misses</p>
    <p>hash(code) || hash(input)</p>
    <p>compute result = code(input) and sig = HMAC(hash(code) || hash(input) || result, K)</p>
    <p>cache does not exist</p>
    <p>hash(code) || hash(input), result, sig</p>
    <p>validate sig and update cache 13</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
    <p>Application UNIC cache</p>
  </div>
  <div class="page">
    <p>Example void simple_virus_scanner(file, options) { buffer = read(file); result = scan_signature(buffer, options); print(result); }</p>
    <p>A simple virus scanning application</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Example void simple_virus_scanner(file, options) { buffer = read(file); if (exists(scan_signature, buffer, options)) { result = get(scan_signature, buffer, options); } else { result = scan_signature(buffer, options); put(scan_signature, buffer, options, result); } print(result); } // red font: UNIC API</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Example void simple_virus_scanner(file, options) { buffer = read(file); if (exists(scan_signature, buffer, options)) { result = get(scan_signature, buffer, options); } else { result = scan_signature(buffer, options); put(scan_signature, buffer, options, result); } print(result); } // red font: UNIC API</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Example void simple_virus_scanner(file, options) { hash = get_file_hash(file); if (exists(scan_signature, hash, options)) { result = get(scan_signature, hash, options); } else { buffer = read(file); result = scan_signature(buffer, options); put(scan_signature, hash, options, result); } print(result); } // red font: UNIC API</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>UNIC API</p>
    <p>init()</p>
    <p>get_file_hash(file)</p>
    <p>exists(computation, hash, id)</p>
    <p>get(computation, hash, id)</p>
    <p>put(computation, hash, id, result, ttl)</p>
    <p>init()</p>
    <p>get_file_hash(file)</p>
    <p>exists(computation, hash, id)</p>
    <p>get(computation, hash, id)</p>
    <p>put(computation, hash, id, result, ttl)</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>UNIC API</p>
    <p>init()</p>
    <p>get_file_hash(file)</p>
    <p>exists(computation, hash, id)</p>
    <p>get(computation, hash, id)</p>
    <p>put(computation, hash, id, result, ttl)</p>
    <p>Leverages deduplication metadata from the underlying storage</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>UNIC API</p>
    <p>init()</p>
    <p>get_file_hash(file)</p>
    <p>exists(computation, hash, id)</p>
    <p>get(computation, hash, id)</p>
    <p>put(computation, hash, id, result)</p>
    <p>Application-defined string identifier</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Our experiments aim to answer:</p>
    <p>Is UNIC easy to use?</p>
    <p>Does UNIC reduce computation time?</p>
    <p>What is UNICs storage overhead?</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>We evaluated UNIC on 4 popular open-source apps:</p>
    <p>clamav: anti-virus software.</p>
    <p>pbzip2: multi-threaded compression utility.</p>
    <p>grep: pattern searching tool.</p>
    <p>gcc: compiler (using ccache).</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Application adaptation effort</p>
    <p>Application Total LoC Changes Percentage</p>
    <p>clamav 1,732,762 12 &lt;0.01%</p>
    <p>pbzip2 4,376 18 0.41%</p>
    <p>grep 9,658 35 0.36%</p>
    <p>gcc (ccache) 29,023 30 0.10%</p>
    <p>UNIC is easy to use. 23</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>R el</p>
    <p>at iv</p>
    <p>e ru</p>
    <p>nn in</p>
    <p>g tim</p>
    <p>e</p>
    <p>clamav-L clamav-D pbzip2-L grep-Ls grep-Lc grep-Ts grep-Tc gcc-L</p>
    <p>Application performance cache miss cache hit</p>
    <p>(L: Linux source code, T: ctags file, D: Dropbox folder, s: simple query, c: complex query)</p>
    <p>Baseline: without UNIC</p>
    <p>Reusing cached result is much faster. Average speedup = 7.6</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Working with changing data R</p>
    <p>un ni</p>
    <p>ng ti</p>
    <p>m e</p>
    <p>(s )</p>
    <p>Linux source code version</p>
    <p>original with UNIC</p>
    <p>Average speedup = 1.5</p>
    <p>UNIC also works well with partially duplicate data. 25</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>(L: Linux source code, T: ctags file, D: Dropbox folder, s: simple query, c: complex query)</p>
    <p>Storage overhead Application Dataset size Cache size Percentage</p>
    <p>clamav-L 508.1MB 2.8MB 0.55% clamav-D 10.8GB 4.4MB 0.04% pbzip2-L 544.0MB 106.4MB 19.55% grep-Ls 508.1MB 11.2MB 2.21% grep-Lc 508.1MB 4.2MB 0.83% grep-Ts 250.0MB 5.3MB 2.13% grep-Tc 250.0MB 4.5MB 1.80% gcc-L 508.1MB 2.3MB 0.46%</p>
    <p>UNIC incurs little storage overhead. 26</p>
    <p>EvaluationAPIExampleSecurityIntroduction</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>UNIC: secure deduplication of general computations.</p>
    <p>It uses code attestation for secrecy and integrity.</p>
    <p>It exports a simple yet expressive API.</p>
    <p>It explores a cross-layer design to leverage storage deduplication.</p>
  </div>
</Presentation>
