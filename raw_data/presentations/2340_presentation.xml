<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Compression and SSDs: Where and How?</p>
    <p>Aviad Zuck, Sivan Toledo, Dmitry Sotnikov, Danny Harnik</p>
  </div>
  <div class="page">
    <p>outline</p>
    <p>Introduction</p>
    <p>Compression and SSDs  Where and how</p>
    <p>Typical use case</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>why compress data</p>
    <p>data</p>
    <p>Databases, HPC, desktop apps, virtual machines</p>
    <p>More capacity</p>
    <p>less data transferred to the device via interconnect Reduced latency, improved throughput</p>
    <p>For SSDs less writes equals less wear Extended lifetime</p>
    <p>(or) free space beneficial to COW and log-structured systems (e.g. SSDs)</p>
  </div>
  <div class="page">
    <p>concerns of compression disks (mostly) read/write</p>
    <p>so do file-systems and operating systems</p>
    <p>compression turns 4KB-aligned data to variable</p>
    <p>sized chunks</p>
    <p>may need more complex data structures</p>
    <p>CPU works harder</p>
    <p>compression</p>
  </div>
  <div class="page">
    <p>file systems and applications often try to compress larger chunks</p>
    <p>potentially at the cost of increased accesses to disk</p>
    <p>(increase SSD wear)</p>
    <p>redundant reads and read-modify-write</p>
    <p>of entire chunk</p>
    <p>compress 4KB at a time</p>
    <p>compress all together</p>
    <p>compression improves as chunk size increases</p>
  </div>
  <div class="page">
    <p>outline</p>
    <p>Introduction</p>
    <p>Compression and SSDs  Where and how</p>
    <p>Typical use case</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>where and how</p>
    <p>Where should we place compression?</p>
    <p>Host or device?</p>
    <p>How should we do it?</p>
    <p>What granularity?</p>
    <p>Which layout?</p>
  </div>
  <div class="page">
    <p>where to compress</p>
    <p>Compression can be enabled in different levels:</p>
    <p>application (database)</p>
    <p>file system</p>
    <p>SSD FTL (embedded in device)</p>
  </div>
  <div class="page">
    <p>SSD use cases</p>
    <p>SSDs vs. magnetic disks (HDDs)  faster random accesses</p>
    <p>but more expensive</p>
    <p>Mostly used for  OLTP = OnLine Transaction Processing</p>
    <p>(MySQL, Oracle)</p>
    <p>Virtual Machines (Amazon AWS)</p>
    <p>HPC metadata</p>
    <p>Caching solutions</p>
    <p>Known to generate highly-compressible data</p>
    <p>(2-5x compressible)</p>
  </div>
  <div class="page">
    <p>mysql* database compression data stored in fixed-size B-tree pages (e.g. 16KB)</p>
    <p>in-page modifications log</p>
    <p>when log is full, re-compress entire page</p>
    <p>* most popular freely-available open-source database system.</p>
    <p>compress to smaller fixed-size compressed page (e.g. 4K, 8K)</p>
  </div>
  <div class="page">
    <p>padding and unutilized space  reduces compression gains</p>
    <p>may cause read-modify-write behavior</p>
    <p>fixed-size compression pages  compression failures</p>
    <p>logical view</p>
    <p>physical view</p>
  </div>
  <div class="page">
    <p>file system compression</p>
    <p>Btrfs  B-tree file system. In Linux kernel, still considered experimental</p>
    <p>ZFS  focused on protecting against data corruption (more conservative and robust)</p>
    <p>ext4  most popular Linux file system</p>
    <p>ZFS/Btrfs are copy-on-write file systems</p>
    <p>Support compression (easier with COW)</p>
    <p>Aligned storage units</p>
  </div>
  <div class="page">
    <p>COW good for compression, but causes fragmentation</p>
    <p>Splitting + recompressing storage units</p>
    <p>Read-modify-copy still possible</p>
    <p>Records/extents not always fragmented</p>
    <p>Unutilized space</p>
  </div>
  <div class="page">
    <p>brief summary</p>
    <p>Read-modify-write behavior</p>
    <p>Unutilized space</p>
    <p>Fragmentation</p>
  </div>
  <div class="page">
    <p>&quot;All problems in computer science can be solved by another level of indirection David Wheeler</p>
    <p>except of course for the problem of too many indirections</p>
  </div>
  <div class="page">
    <p>intra-SSD compression</p>
    <p>FTLs utilize indirection anyway (fixed-size)</p>
    <p>Re-use mapping table for compression</p>
    <p>Buffer write requests</p>
    <p>Compress</p>
    <p>Dump compressed data to flash</p>
    <p>Update mapping</p>
    <p>How? four possible packing schemes</p>
  </div>
  <div class="page">
    <p>chunk-based</p>
    <p>A1</p>
    <p>time</p>
    <p>A2 A3 A4</p>
    <p>A1 A2 A3 A4</p>
    <p>buffer in RAM</p>
    <p>dump to flash</p>
    <p>(A1+A2+A3+A4)</p>
    <p>compress as single large chunk</p>
  </div>
  <div class="page">
    <p>A 2</p>
    <p>binpacking</p>
    <p>A1</p>
    <p>time</p>
    <p>A2 A3 A4</p>
    <p>A1 A3 A4</p>
    <p>compress &amp; buffer in RAM</p>
    <p>dump to flash</p>
    <p>dump first buffer to make room</p>
    <p>A1 A 2</p>
    <p>A4`</p>
  </div>
  <div class="page">
    <p>re-ordering</p>
    <p>A1</p>
    <p>time</p>
    <p>A2 A3 A4</p>
    <p>A1 A 2</p>
    <p>A3 A4</p>
    <p>compress &amp; buffer in RAM</p>
    <p>re-buffer</p>
    <p>sort &amp; re-order A3 A1 A4</p>
    <p>A 2</p>
    <p>A3 A1 A4 A 2</p>
  </div>
  <div class="page">
    <p>A 2</p>
    <p>compaction</p>
    <p>A1</p>
    <p>time</p>
    <p>A2 A3 A4</p>
    <p>A1 A4</p>
    <p>compress &amp; buffer in RAM</p>
    <p>A3</p>
  </div>
  <div class="page">
    <p>outline</p>
    <p>Introduction</p>
    <p>Compression and SSDs  Where and how</p>
    <p>Typical use case</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>methodology</p>
    <p>4GB SSD</p>
    <p>VSSIM SSD emulator</p>
    <p>4KB pages, 64 pages/block</p>
    <p>50/250us read/write latency</p>
    <p>TPC-C workload (OLTP)</p>
    <p>Modified to provide three levels of compressibility (high/medium/low)</p>
    <p>repeated with compression enabled in every level</p>
    <p>QEMU Guest OS</p>
    <p>File system</p>
    <p>Block layer</p>
    <p>VSSIM SSD Module</p>
    <p>Latency</p>
    <p>Manager</p>
    <p>IDE Interface</p>
    <p>QEMU Ram disk</p>
  </div>
  <div class="page">
    <p>e x t4 zf s</p>
    <p>zf s+</p>
    <p>co m</p>
    <p>p</p>
    <p>b tr</p>
    <p>fs</p>
    <p>b tr</p>
    <p>fs + co</p>
    <p>m p</p>
    <p>e x t4 zf s</p>
    <p>zf s+</p>
    <p>co m</p>
    <p>p</p>
    <p>b tr</p>
    <p>fs</p>
    <p>b tr</p>
    <p>fs + co</p>
    <p>m p</p>
    <p>e x t4 zf s</p>
    <p>zf s+</p>
    <p>co m</p>
    <p>p</p>
    <p>b tr</p>
    <p>fs</p>
    <p>b tr</p>
    <p>fs + co</p>
    <p>m p</p>
    <p>high medium low</p>
    <p>reads/ tx writes/ tx tx/ s</p>
    <p>file-system compression</p>
    <p>ext4 w/o compression yields best results  MySQL+compression much worse in all configurations</p>
  </div>
  <div class="page">
    <p>embedded compression gains</p>
    <p>Total physical writes vs. FTL w/o compression  Compact and re-ordering schemes deliver similar performance</p>
    <p>re-ordering requires 30% less RAM for mapping data structures</p>
    <p>performance (tx/s) improved by 10-15% vs. no compression</p>
    <p>HighComp MedComp LowComp</p>
    <p>co m</p>
    <p>p re</p>
    <p>ss io</p>
    <p>n g</p>
    <p>a in</p>
    <p>compact</p>
    <p>chunk4</p>
    <p>chunk8</p>
    <p>bp32</p>
    <p>re-bp32</p>
  </div>
  <div class="page">
    <p>compression hardware</p>
    <p>compact chunk4 chunk8 bp32 re-bp32</p>
    <p>M B</p>
    <p>/s compress</p>
    <p>decompress</p>
    <p>More expensive compression HW</p>
  </div>
  <div class="page">
    <p>outline</p>
    <p>Introduction</p>
    <p>Compression and SSDs  Where and how</p>
    <p>Typical use case</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>conclusion</p>
    <p>Intra-SSD compression superior to using it in the existing application and file systems</p>
    <p>improvement vs. popular database application and file systems in OLTP workload</p>
    <p>Compressing OLTP workloads in larger chunks not always better</p>
    <p>Enhanced re-ordering scheme delivers optimal improvement using 30% less RAM requirements than new compact scheme</p>
  </div>
  <div class="page">
    <p>questions?</p>
    <p>Aviad Zuck, Sivan Toledo, Dmitry Sotnikov, Danny Harnik</p>
    <p>(http://www.tau.ac.il/~aviadzuc)</p>
    <p>INFLOW 2014</p>
  </div>
</Presentation>
