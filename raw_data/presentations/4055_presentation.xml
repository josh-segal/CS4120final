<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>We will see how this Android SDK class</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>}</p>
    <p>MISSING MODIFIER BEFORE OUR</p>
    <p>DISCLOSURE! (NOW PATCHED)</p>
  </div>
  <div class="page">
    <p>Led to this</p>
    <p>REPLACEMENT OF APPS</p>
    <p>SELINUX BYPASS</p>
    <p>ACCESS TO APPS DATA</p>
    <p>KERNEL CODE</p>
    <p>EXEUCTION*</p>
    <p>* On select devices</p>
  </div>
  <div class="page">
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Android Inter-App Communication 101</p>
  </div>
  <div class="page">
    <p>Android Inter-App Communication 101</p>
    <p>Intent { play:// }</p>
  </div>
  <div class="page">
    <p>Android Inter-App Communication 101</p>
    <p>Intent { play:// }</p>
    <p>Intent { sms:// }</p>
  </div>
  <div class="page">
    <p>An Intent can also contain</p>
    <p>Bundle</p>
    <p>SIMPLE OBJECTS</p>
  </div>
  <div class="page">
    <p>Bundle</p>
    <p>An Intent can also contain</p>
    <p>SIMPLE OBJECTS</p>
    <p>SERIALIZABLE OBJECTS</p>
  </div>
  <div class="page">
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>CVE-2014-7911 (Jann Horn):</p>
    <p>Non-Serializable Classes can be Deserialized on target.</p>
  </div>
  <div class="page">
    <p>Exploiting CVE-2014-7911</p>
    <p>MALWARE</p>
    <p>TARGET</p>
    <p>Step 1. Find an interesting target.</p>
  </div>
  <div class="page">
    <p>The Target</p>
    <p>system_server</p>
  </div>
  <div class="page">
    <p>Exploiting CVE-2014-7911</p>
    <p>MALWARE</p>
    <p>SYSTEM_SERVER</p>
    <p>Serialized Object of</p>
    <p>non-Serializable class</p>
    <p>Step 2. Send target a serialized object in a Bundle</p>
  </div>
  <div class="page">
    <p>The Serialized Object</p>
    <p>final class BinderProxy implements IBinder {</p>
    <p>private long mOrgue;  CONTROLALBLE NATIVE OBJECT</p>
    <p>private native final destroy();</p>
    <p>@Override protected void finalize() throws Throwable {</p>
    <p>try { destroy(); } finally { super.finalize(); }</p>
    <p>}</p>
    <p>USES THE OBJECT</p>
  </div>
  <div class="page">
    <p>Exploiting CVE-2014-7911</p>
    <p>MALWARE</p>
    <p>Deserialized Object</p>
    <p>Step 3. Make it deserialize on the target.</p>
    <p>SYSTEM_SERVER</p>
  </div>
  <div class="page">
    <p>Make it deserialize automatically</p>
    <p>All Bundle members are deserialized with a single touch on the incoming Bundle:</p>
    <p>e.g.</p>
    <p>public String getString(String key) }</p>
    <p>unparcel();  DESERIALIZES ALL final Object o = mMap.get(key); try { return (String) o; } catch (ClassCastException e) {}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Exploiting CVE-2014-7911</p>
    <p>MALWARE</p>
    <p>Step 4. Make one of its methods execute on target.</p>
    <p>Executed Object</p>
    <p>SYSTEM_SERVER</p>
  </div>
  <div class="page">
    <p>(4) Make it Execute some Sensitive Code</p>
    <p>final class BinderProxy implements IBinder {</p>
    <p>private long mOrgue;</p>
    <p>private native final destroy();</p>
    <p>@Override protected void finalize() throws Throwable {</p>
    <p>try { destroy(); } finally { super.finalize(); }</p>
    <p>}</p>
    <p>EXECUTED AUTOMATICALLY BY THE GC</p>
  </div>
  <div class="page">
    <p>Googles Fix for CVE-2014-7911</p>
    <p>Do Not Deserialize Non-Serializable Classes</p>
  </div>
  <div class="page">
    <p>Our 1st Contribution: The Android Vulnerability</p>
    <p>CVE-2015-3825</p>
  </div>
  <div class="page">
    <p>Our Research Question: A Potential Vulnerability</p>
    <p>class Foo implements Serializable {</p>
    <p>private long mObject;</p>
    <p>private native final destroy();</p>
    <p>@Override protected void finalize() throws Throwable {</p>
    <p>try { destroy(); } finally { super.finalize(); }</p>
    <p>}</p>
    <p>CONTROLLABLE POINTER</p>
    <p>POINTER USED IN NATIVE CODE.</p>
    <p>EXECUTED AUTOMATICALLY BY THE GC</p>
  </div>
  <div class="page">
    <p>Experiment 1</p>
    <p>boot.art</p>
  </div>
  <div class="page">
    <p>Experiment 1</p>
    <p>boot.art</p>
    <p>~13K Loadable Java</p>
    <p>Classes</p>
  </div>
  <div class="page">
    <p>Experiment 1</p>
    <p>boot.art App: Loaded classes using</p>
    <p>Reflection</p>
    <p>~13K Loadable Java</p>
    <p>Classes</p>
  </div>
  <div class="page">
    <p>Experiment 1</p>
    <p>boot.art App: Loaded classes using</p>
    <p>Reflection</p>
    <p>Dumped classes:</p>
    <p>fields</p>
    <p>~13K Loadable Java</p>
    <p>Classes</p>
  </div>
  <div class="page">
    <p>The Result</p>
    <p>OpenSSLX509Certificate</p>
  </div>
  <div class="page">
    <p>The Result</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>@Override protected void finalize() throws Throwable { ...</p>
    <p>NativeCrypto.X509_free(mContext); ...</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>The Result</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>@Override protected void finalize() throws Throwable { ...</p>
    <p>NativeCrypto.X509_free(mContext); ...</p>
    <p>} }</p>
    <p>(1) SERIALIZABLE</p>
  </div>
  <div class="page">
    <p>The Result</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>@Override protected void finalize() throws Throwable { ...</p>
    <p>NativeCrypto.X509_free(mContext); ...</p>
    <p>} }</p>
    <p>(1) SERIALIZABLE</p>
    <p>(2) CONTROLLABLE PTR</p>
  </div>
  <div class="page">
    <p>The Result</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>@Override protected void finalize() throws Throwable { ...</p>
    <p>NativeCrypto.X509_free(mContext); ...</p>
    <p>} }</p>
    <p>(3) EXECUTED AUTOMATICALLY BY THE GC</p>
    <p>(1) SERIALIZABLE</p>
    <p>(2) CONTROLLABLE PTR</p>
  </div>
  <div class="page">
    <p>Arbitrary Decrement</p>
    <p>NativeCrypto.X509_free(mContext)</p>
    <p>X509_free(x509);</p>
    <p>ASN1_item_free(x509, ...)</p>
    <p>asn1_item_combine_free(&amp;val, ...)</p>
    <p>if (asn1_do_lock(pval, -1,...) &gt; 0) return;</p>
    <p>// x509 = mContext</p>
    <p>// val = *pval = mContext</p>
    <p>// Decreases a reference counter (mContext+0x10) // MUST be POSITIVE INTEGER (MSB=0)</p>
  </div>
  <div class="page">
    <p>Arbitrary Decrement</p>
    <p>ref = mContext+0x10 if (*ref &gt; 0) *ref-</p>
    <p>else free()</p>
  </div>
  <div class="page">
    <p>Proof-of-Concept Exploit</p>
    <p>Arbitrary Code Execution in system_server</p>
  </div>
  <div class="page">
    <p>Exploit Outline</p>
    <p>MALWARE</p>
    <p>system_server</p>
    <p>Malicious Serialized Object(s)</p>
    <p>w/ payload buffer</p>
  </div>
  <div class="page">
    <p>Exploit Outline</p>
    <p>MALWARE</p>
    <p>system_server</p>
    <p>shellcode</p>
  </div>
  <div class="page">
    <p>First Step of the Exploit</p>
    <p>Own the Program Counter (PC)</p>
  </div>
  <div class="page">
    <p>Creating an Arbitrary Code Exec Exploit</p>
    <p>ARSENAL</p>
  </div>
  <div class="page">
    <p>Bundle</p>
    <p>Constrained Arbitrary Memory Overwrite</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
  </div>
  <div class="page">
    <p>Bundle</p>
    <p>Constrained Arbitrary Memory Overwrite</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>011111110 =</p>
  </div>
  <div class="page">
    <p>Bundle</p>
    <p>Constrained Arbitrary Memory Overwrite</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>OpenSSLX509Certificate mContext=011111100</p>
    <p>011111110 =</p>
    <p>If we knew the original value: Arbitrary Overwrite</p>
  </div>
  <div class="page">
    <p>Why Constraint Overwrite?</p>
  </div>
  <div class="page">
    <p>Solution in the Paper</p>
  </div>
  <div class="page">
    <p>Creating an Arbitrary Code Exec Exploit</p>
    <p>ARSENAL</p>
    <p>* If we knew the original value</p>
  </div>
  <div class="page">
    <p>Creating an Arbitrary Code Exec Exploit</p>
    <p>ARSENAL DEFENSES</p>
  </div>
  <div class="page">
    <p>Finding the Original Value: bye-bye ASLR</p>
    <p>fork()</p>
    <p>fork()</p>
    <p>fork()</p>
    <p>fork()</p>
    <p>libX: value libX: &amp;value</p>
    <p>fork without execve = no ASLR!</p>
    <p>Zygote system_server</p>
    <p>App_1</p>
    <p>App_N</p>
    <p>Exploit</p>
  </div>
  <div class="page">
    <p>Creating an Arbitrary Code Exec Exploit</p>
    <p>ARSENAL DEFENSES</p>
  </div>
  <div class="page">
    <p>Using the Arbitrary Overwrite</p>
    <p>Goal</p>
    <p>Overwrite some pointer</p>
    <p>Problem</p>
    <p>.got is read only (RELRO)</p>
  </div>
  <div class="page">
    <p>A Good Memory Overwrite Target</p>
    <p>A function pointer under .data</p>
    <p>id_callback in libcrypto</p>
    <p>Called during deserialization of:</p>
    <p>OpenSSLECPrivateKey</p>
  </div>
  <div class="page">
    <p>Bundle</p>
    <p>Triggering id_callback remotely</p>
    <p>system_server</p>
    <p>OpenSSLECPrivateKey BAD DATA</p>
    <p>that leads to the right path</p>
    <p>Malware</p>
  </div>
  <div class="page">
    <p>First step accomplished</p>
    <p>We now own the Program Counter</p>
  </div>
  <div class="page">
    <p>Creating an Arbitrary Code Exec Exploit</p>
    <p>ARSENAL DEFENSES</p>
  </div>
  <div class="page">
    <p>Next Steps of the PoC Exploit (simplified)</p>
    <p>system_server</p>
    <p>sp  r-x code rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc</p>
  </div>
  <div class="page">
    <p>Problem 1: SP does not point at ROP chain</p>
    <p>system_server</p>
    <p>sp  r-x code rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc</p>
  </div>
  <div class="page">
    <p>Solution: Stack Pivoting</p>
    <p>system_server</p>
    <p>sp  r-x code/pivot rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc</p>
    <p>Our buffer happens to be pointed by fp. The Gadget: mov sp, fp; , pop {}</p>
    <p>fp</p>
    <p>Gadget: Stack Pivot</p>
  </div>
  <div class="page">
    <p>Solution: Stack Pivoting</p>
    <p>system_server</p>
    <p>r-x code/pivot rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc</p>
    <p>Our buffer happens to be pointed by fp. The Gadget: mov sp, fp; , pop {}</p>
    <p>sp</p>
    <p>Gadget: Stack Pivot</p>
  </div>
  <div class="page">
    <p>Allocating RWX Memory</p>
    <p>system_server</p>
    <p>r-x code/mmap rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc  Gadget: Stack Pivot</p>
    <p>sp  Gadget: mmap/RWX</p>
  </div>
  <div class="page">
    <p>Problem 2: SELinux should prohibit mmap/RWX</p>
    <p>system_server</p>
    <p>r-x code/mmap rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc  Gadget: Stack Pivot</p>
    <p>sp  Gadget: mmap/RWX</p>
  </div>
  <div class="page">
    <p>Solution: Weak SELinux Policy for system_server</p>
    <p>Gadget: mmap/RWX</p>
    <p>system_server</p>
    <p>r-x code/mmap rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc  Gadget: Stack Pivot</p>
    <p>sp</p>
  </div>
  <div class="page">
    <p>Gadget: mmap/RWX</p>
    <p>system_server</p>
    <p>rx code/mmap rw- stack rw- ROP chain rw- shellcode</p>
    <p>pc  Gadget: Stack Pivot</p>
    <p>sp</p>
    <p>allow system_server self:process execmem</p>
    <p>Solution: Weak SELinux Policy for system_server</p>
  </div>
  <div class="page">
    <p>system_server</p>
    <p>r-x code/mmap rw- stack rw- ROP chain rw- shellcode rwx</p>
    <p>pc  Gadget: Stack Pivot</p>
    <p>sp  Gadget: mmap/RWX</p>
    <p>Allocating RWX Memory</p>
  </div>
  <div class="page">
    <p>Copying our Shellcode</p>
    <p>Gadget: memcpy</p>
    <p>system_server</p>
    <p>r-x code/memcpy rw- stack rw- ROP chain rw- shellcode rwx</p>
    <p>pc</p>
    <p>sp</p>
    <p>Gadget: Stack Pivot</p>
    <p>Gadget: mmap/RWX</p>
  </div>
  <div class="page">
    <p>Copying our Shellcode</p>
    <p>Gadget: memcpy</p>
    <p>system_server</p>
    <p>r-x code/memcpy rw- stack rw- ROP chain rw- shellcode rwx shellcode</p>
    <p>pc</p>
    <p>sp</p>
    <p>Gadget: Stack Pivot</p>
    <p>Gadget: mmap/RWX</p>
  </div>
  <div class="page">
    <p>Executing our Shellcode</p>
    <p>Gadget: memcpy</p>
    <p>shellcode</p>
    <p>system_server</p>
    <p>pc</p>
    <p>r-x code rw- stack rw- ROP chain rw- shellcode rwx shellcode</p>
    <p>sp</p>
    <p>Gadget: Stack Pivot</p>
    <p>Gadget: mmap/RWX</p>
  </div>
  <div class="page">
    <p>Creating an Arbitrary Code Exec Exploit</p>
    <p>ARSENAL DEFENSES</p>
    <p>* If we know the original value</p>
  </div>
  <div class="page">
    <p>Shellcode</p>
    <p>SELINUX BYPASS</p>
    <p>KERNEL CODE</p>
    <p>EXEUCTION*</p>
    <p>* On select devices</p>
    <p>Runs as system, still subject to the SELinux, but can:</p>
    <p>REPLACEMENT OF APPS</p>
    <p>ACCESS TO APPS DATA</p>
  </div>
  <div class="page">
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Googles Patch for CVE-2015-3825</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>}</p>
    <p>MISSING MODIFIER BEFORE OUR</p>
    <p>DISCLOSURE! (NOW PATCHED)</p>
  </div>
  <div class="page">
    <p>Googles Patch for CVE-2015-3825</p>
    <p>public class OpenSSLX509Certificate extends X509Certificate {</p>
    <p>private final long mContext;</p>
    <p>}</p>
    <p>MISSING MODIFIER BEFORE OUR</p>
    <p>DISCLOSURE! (NOW PATCHED)</p>
    <p>transient</p>
  </div>
  <div class="page">
    <p>Our 2nd Contribution: Vulnerabilities in SDKs</p>
    <p>CVE-2015-2000/1/2/3/4/20</p>
  </div>
  <div class="page">
    <p>Finding Similar Vulnerabilities in SDKs</p>
    <p>Goal. Find vulnerable Serializable classes in 3rd -party SDKs.</p>
    <p>Why. Fixing the Android Platform Vulnerability is not enough.</p>
  </div>
  <div class="page">
    <p>Experiment 2</p>
    <p>Analyzed over 32K of popular Android apps using dexlib2.</p>
    <p>CVE-2015-2000 Jumio SDK Code Exec. CVE-2015-2001 MetaIO SDK Code Exec. CVE-2015-2002 Esri ArcGis SDK Code Exec. CVE-2015-2003 PJSIP PJSUA2 SDK Code Exec. CVE-2015-2004 GraceNote SDK Code Exec. CVE-2015-2020 MyScript SDK Code Exec.</p>
    <p>Main Results</p>
  </div>
  <div class="page">
    <p>Root Cause (for most of the SDKs)</p>
    <p>SWIG, a C/C++ to Java interoperability tool, can generate vulnerable classes.</p>
    <p>public class Foo implements Bar { private long swigCPtr; protected boolean swigCMemOwn; ... protected void finalize() {</p>
    <p>delete(); } public synchronized void delete() {  exampleJNI.delete_Foo(swigCPtr);</p>
    <p>} ...</p>
    <p>}</p>
    <p>POSSIBLY SERIALIZABLE</p>
    <p>CONTROLLABLE POINTER</p>
    <p>POINTER USED IN NATIVE CODE</p>
  </div>
  <div class="page">
    <p>Wrap-up</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Found a high severity vulnerability in Android (Exp. 1).</p>
    <p>Wrote a reliable PoC exploit against it</p>
    <p>Found similar vulnerabilities in 6 third-party SDKs (Exp. 2)</p>
    <p>Patches are available for all of the vulnerabilities and also for</p>
    <p>SWIG.</p>
  </div>
  <div class="page">
    <p>`</p>
  </div>
  <div class="page">
    <p>Copyright IBM Corporation 2015. All rights reserved. The information contained in these materials is provided for informational purposes only, and is provided AS IS without warranty of any kind, express or implied. IBM shall not be responsible for any</p>
    <p>damages arising out of the use of, or otherwise related to, these materials. Nothing contained in these materials is intended to, nor shall have the effect of, creating any warranties or representations from IBM or its suppliers or licensors, or altering the terms and</p>
    <p>conditions of the applicable license agreement governing the use of IBM software. References in these materials to IBM products, programs, or services do not imply that they will be available in all countries in which IBM operates. Product release dates and / or</p>
    <p>capabilities referenced in these materials may change at any time at IBMs sole discretion based on market opportunities or other factors, and are not intended to be a commitment to future product or feature availability in any way. IBM, the IBM logo, and other</p>
    <p>IBM products and services are trademarks of the International Business Machines Corporation, in the United States, other countries or both. Other company, product, or service names may be trademarks or service marks of others.</p>
    <p>Statement of Good Security Practices: IT system security involves protecting systems and information through prevention, detection and response to improper access from within and outside your enterprise. Improper access can result in information being</p>
    <p>altered, destroyed, misappropriated or misused or can result in damage to or misuse of your systems, including for use in attacks on others. No IT system or product should be considered completely secure and no single product, service or security measure can</p>
    <p>be completely effective in preventing improper use or access. IBM systems, products and services are designed to be part of a lawful, comprehensive security approach, which will necessarily involve additional operational procedures, and may require other</p>
    <p>systems, products or services to be most effective. IBM DOES NOT WARRANT THAT ANY SYSTEMS, PRODUCTS OR SERVICES ARE IMMUNE FROM, OR WILL MAKE YOUR ENTERPRISE IMMUNE FROM, THE MALICIOUS OR ILLEGAL CONDUCT OF</p>
    <p>ANY PARTY.</p>
    <p>THANK YOU www.ibm.com/security</p>
  </div>
</Presentation>
