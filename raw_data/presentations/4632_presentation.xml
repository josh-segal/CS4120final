<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Software Stack for The Software Stack for</p>
    <p>Transactional MemoryTransactional Memory</p>
    <p>Challenges and OpportunitiesChallenges and Opportunities</p>
    <p>Brian D. Brian D. CarlstromCarlstrom</p>
    <p>JaeWoongJaeWoong Chung,Chung, ChristosChristos Kozyrakis, Kunle OlukotunKozyrakis, Kunle Olukotun</p>
    <p>Computer Systems LabComputer Systems Lab</p>
    <p>Stanford UniversityStanford University</p>
    <p>http://tcc.stanford.eduhttp://tcc.stanford.edu</p>
    <p>(picture will come here)</p>
  </div>
  <div class="page">
    <p>Parallel ProgrammingParallel Programming</p>
    <p>on Shared Memoryon Shared Memory</p>
    <p>Traditionally done using locksTraditionally done using locks</p>
    <p>But locks are hard to useBut locks are hard to use</p>
    <p>Semantic problemsSemantic problems</p>
    <p>DeadlockDeadlock</p>
    <p>Priority inversionPriority inversion</p>
    <p>Performance problemsPerformance problems</p>
    <p>Simplicity at the expense of concurrencySimplicity at the expense of concurrency</p>
    <p>High concurrency at the expense of simplicityHigh concurrency at the expense of simplicity</p>
    <p>Pessimistic concurrencyPessimistic concurrency</p>
  </div>
  <div class="page">
    <p>Transactional MemoryTransactional Memory</p>
    <p>Allows for lockAllows for lock--free parallel programmingfree parallel programming</p>
    <p>Transactions mark critical sectionsTransactions mark critical sections</p>
    <p>Same properties as database transactionsSame properties as database transactions</p>
    <p>Atomicity : all or nothingAtomicity : all or nothing</p>
    <p>Isolation : no partial updatesIsolation : no partial updates</p>
    <p>Transactions are easier to use than locksTransactions are easier to use than locks</p>
    <p>CoarseCoarse--grained nongrained non--blocking synchronizationblocking synchronization</p>
    <p>Optimistic concurrencyOptimistic concurrency</p>
  </div>
  <div class="page">
    <p>Opportunities and ChallengesOpportunities and Challenges</p>
    <p>TM is a promising solution for easy and TM is a promising solution for easy and efficient parallel programming on multiefficient parallel programming on multi-core systemscore systems</p>
    <p>TM brings up both opportunities and TM brings up both opportunities and challenges to software stackchallenges to software stack</p>
    <p>TodayTodays talk focuses on, but not limited to, s talk focuses on, but not limited to, the software stack on top of hardware TMthe software stack on top of hardware TM</p>
  </div>
  <div class="page">
    <p>ContentsContents</p>
    <p>Transactional Memory OverviewTransactional Memory Overview  What is TM?What is TM?</p>
    <p>Why is it interesting to MultiWhy is it interesting to Multi--core systems?core systems?</p>
    <p>TM example and primitivesTM example and primitives</p>
    <p>Software StackSoftware Stack  Data StructureData Structure</p>
    <p>ProgrammingProgramming CompositionComposition</p>
    <p>Operating SystemOperating System</p>
    <p>Language ImplementationLanguage Implementation</p>
    <p>Programming ModelsProgramming Models</p>
    <p>Distributed TransactionsDistributed Transactions</p>
    <p>ConclusionConclusion</p>
  </div>
  <div class="page">
    <p>TM execution model exampleTM execution model example (Transactional Coherence and Consistency)(Transactional Coherence and Consistency)</p>
    <p>CPU 0 CPU 1 CPU 2</p>
    <p>Commit</p>
    <p>Validation</p>
    <p>Execute</p>
    <p>Code</p>
    <p>Commit</p>
    <p>Validation</p>
    <p>Execute</p>
    <p>Code</p>
    <p>Violate</p>
    <p>Execute</p>
    <p>Code</p>
    <p>Re</p>
    <p>Execute</p>
    <p>Code</p>
    <p>...</p>
    <p>ld 0xaaaa</p>
    <p>ld 0xbbbb</p>
    <p>...</p>
    <p>ld 0xbeef</p>
    <p>...</p>
    <p>...</p>
    <p>st 0xbeef</p>
    <p>...</p>
    <p>ld 0xdddd</p>
    <p>ld 0xeeee</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Advanced TM primitivesAdvanced TM primitives  Nesting Nesting [isca06][isca06]</p>
    <p>CallbackCallback</p>
    <p>Violation Handler and Commit HandlerViolation Handler and Commit Handler</p>
    <p>&lt; Closed Nesting &gt; &lt; Open Nesting &gt;</p>
    <p>// A is initially 0;</p>
    <p>Atomic {</p>
    <p>....</p>
    <p>// A is initially 0;</p>
    <p>Atomic {</p>
    <p>....</p>
    <p>Open_Atomic {</p>
    <p>A++; // 1</p>
    <p>.</p>
    <p>}</p>
    <p>A++; // 2</p>
    <p>}</p>
    <p>A = ;</p>
    <p>Core 1Core 0 Core 1Core 0</p>
    <p>= A; // 0</p>
    <p>A = ;</p>
    <p>= A; // 1</p>
    <p>Atomic {</p>
    <p>A++; // 1</p>
    <p>.</p>
    <p>A++; // 2</p>
    <p>}</p>
    <p>} = A; // 2 = A; // 2</p>
  </div>
  <div class="page">
    <p>Data StructureData Structure (Opportunity)(Opportunity)</p>
    <p>CoarseCoarse--grain nongrain non--blocking synchronizationblocking synchronization</p>
    <p>Both easeBoth ease--toto--use and performanceuse and performance</p>
    <p>Nesting Nesting  reduces violation overheadreduces violation overhead</p>
    <p>Open nesting reduces the frequency of conflictsOpen nesting reduces the frequency of conflicts</p>
    <p>Closed nesting reduces the penalty of violationClosed nesting reduces the penalty of violation</p>
    <p>Callback Callback  provides more programmabilityprovides more programmability</p>
    <p>Violation HandlerViolation Handler</p>
    <p>Automatic cleanAutomatic clean--up at conflictsup at conflicts</p>
    <p>Application specific conflict handler Application specific conflict handler</p>
  </div>
  <div class="page">
    <p>Data StructureData Structure (Challenge)(Challenge)</p>
    <p>How to hide the advanced techniques for How to hide the advanced techniques for</p>
    <p>novice programmers?novice programmers?</p>
    <p>TMTM--based librarybased library</p>
    <p>like GNU like GNU classpathclasspath Java libraryJava library</p>
  </div>
  <div class="page">
    <p>Programming CompositionProgramming Composition (Opportunity)(Opportunity)</p>
    <p>Transaction nestingTransaction nesting</p>
    <p>Flexibility in composing transactionsFlexibility in composing transactions</p>
    <p>Speculative parallel loopsSpeculative parallel loops</p>
    <p>To avoid the hassle of setting and wrapping To avoid the hassle of setting and wrapping</p>
    <p>up multiple threadsup multiple threads</p>
    <p>T_FOR(..)</p>
    <p>{</p>
    <p>// loop iteration</p>
    <p>}</p>
    <p>Iter1</p>
    <p>tx1</p>
    <p>Iter2</p>
    <p>tx2</p>
    <p>IterN</p>
    <p>txN</p>
  </div>
  <div class="page">
    <p>Programming CompositionProgramming Composition (Challenge)(Challenge)</p>
    <p>Transactional I/OTransactional I/O</p>
    <p>I/O bufferingI/O buffering</p>
    <p>Defer I/O operations by the commitDefer I/O operations by the commit</p>
    <p>Execute the deferred operations at commitExecute the deferred operations at commit</p>
    <p>Conditional WaitsConditional Waits</p>
    <p>Wait() is related to lock objectsWait() is related to lock objects</p>
    <p>ComposibleComposible conditions for atomic regionsconditions for atomic regions</p>
    <p>OverflowsOverflows</p>
    <p>Deep call stacks make transactions longDeep call stacks make transactions long</p>
    <p>Buffer overflow mechanismBuffer overflow mechanism</p>
  </div>
  <div class="page">
    <p>Operating SystemOperating System (Opportunity)(Opportunity)</p>
    <p>NonNon--blocking synchronizationblocking synchronization</p>
    <p>Easier kernel constructionEasier kernel construction</p>
    <p>Potential for speedupPotential for speedup</p>
    <p>Atomicity for faultAtomicity for fault--tolerancetolerance</p>
    <p>TM undoesTM undoes instructions at rollbackinstructions at rollback</p>
    <p>Easy checkEasy check--pointingpointing</p>
    <p>Isolation for security Isolation for security [sosp03][sosp03]</p>
    <p>TM isolates instructions by commitTM isolates instructions by commit</p>
  </div>
  <div class="page">
    <p>Operating SystemOperating System (Challenge)(Challenge)</p>
    <p>ContextContext--switchswitch</p>
    <p>In hardware TMs, transactional states have In hardware TMs, transactional states have</p>
    <p>affinity to processors affinity to processors</p>
    <p>Interrupt Interrupt [hpca06][hpca06]</p>
    <p>Swapping in/out transactionsSwapping in/out transactions</p>
    <p>I/OI/O</p>
    <p>Software TM runs on virtual address spaceSoftware TM runs on virtual address space</p>
  </div>
  <div class="page">
    <p>Programming ModelsProgramming Models (Opportunity)(Opportunity)</p>
    <p>TMTM--based models tuned for parallelismbased models tuned for parallelism</p>
    <p>AtomosAtomos [pldi06][pldi06]</p>
    <p>Java Java  old synchronization APIs + new TM primitivesold synchronization APIs + new TM primitives</p>
    <p>support for nesting, callback, and highsupport for nesting, callback, and high--level level</p>
    <p>language constructlanguage construct</p>
    <p>X10, Fortress, and Chapel also explore X10, Fortress, and Chapel also explore</p>
    <p>transactions transactions</p>
  </div>
  <div class="page">
    <p>Programming ModelsProgramming Models (Challenge)(Challenge)</p>
    <p>Many different semantics for TMMany different semantics for TM</p>
    <p>Different definitions for the same termDifferent definitions for the same term</p>
    <p>Strong vs. weak consistencyStrong vs. weak consistency</p>
    <p>We prefer strong consistencyWe prefer strong consistency</p>
    <p>No need to worry about possible bugs due to interaction No need to worry about possible bugs due to interaction</p>
    <p>between transaction code and nonbetween transaction code and non--transactional code transactional code</p>
    <p>APIs for application and system programmingAPIs for application and system programming</p>
  </div>
  <div class="page">
    <p>Language ImplementationLanguage Implementation (Opportunity)(Opportunity)</p>
    <p>Aggressive JIT compiler optimizationAggressive JIT compiler optimization</p>
    <p>Try unsafe optimizationTry unsafe optimization</p>
    <p>Constant PropagationConstant Propagation</p>
    <p>Rollback the computation if there is a problemRollback the computation if there is a problem</p>
    <p>Restart with safe codeRestart with safe code</p>
    <p>Speculative ParallelismSpeculative Parallelism</p>
    <p>Make a code segment run in parallelMake a code segment run in parallel</p>
  </div>
  <div class="page">
    <p>Language ImplementationLanguage Implementation (Challenge)(Challenge)</p>
    <p>Memory allocationMemory allocation</p>
    <p>Private memory pool or NestingPrivate memory pool or Nesting</p>
    <p>Incremental/Concurrent garbage collectionIncremental/Concurrent garbage collection</p>
    <p>Use violation handlers to deal with conflicts Use violation handlers to deal with conflicts</p>
    <p>between collectors and between collectors and mutatorsmutators</p>
  </div>
  <div class="page">
    <p>Distributed TransactionsDistributed Transactions (Opportunity)(Opportunity)</p>
    <p>Integration with distributed transaction Integration with distributed transaction</p>
    <p>systemssystems</p>
    <p>Transaction Service in .Net, J2EE, and Transaction Service in .Net, J2EE, and</p>
    <p>CORBACORBA</p>
    <p>Extracting parallelism from distributed Extracting parallelism from distributed</p>
    <p>objects with transactional propertiesobjects with transactional properties</p>
    <p>Enterprise Java BeansEnterprise Java Beans</p>
    <p>TX_REQUIRED, TX_BEAN_MANAGEDTX_REQUIRED, TX_BEAN_MANAGED</p>
  </div>
  <div class="page">
    <p>Distributed TransactionsDistributed Transactions (Challenge)(Challenge)</p>
    <p>EE--commerce transactions are longcommerce transactions are long</p>
    <p>Longer than time quantaLonger than time quanta</p>
    <p>I/O operationsI/O operations</p>
    <p>TM virtualization can be helpfulTM virtualization can be helpful</p>
  </div>
  <div class="page">
    <p>ConclusionConclusion</p>
    <p>Transactional Memory is a promising Transactional Memory is a promising</p>
    <p>solution for parallel programmingsolution for parallel programming</p>
    <p>Transactional memory brings up both Transactional memory brings up both</p>
    <p>opportunities and challenges to software opportunities and challenges to software</p>
    <p>stackstack</p>
    <p>We hope research forces from many areas We hope research forces from many areas</p>
    <p>join the efforts for Transactional memoryjoin the efforts for Transactional memory</p>
  </div>
</Presentation>
