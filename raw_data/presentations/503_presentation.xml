<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Compiling X10 to Java</p>
    <p>Mikio Takeuchi, Yuki Makino, Kiyokuni Kawachiya, Hiroshi Horii, Toyotaro Suzumura, Toshio Suganuma, and Tamiya Onodera</p>
    <p>IBM Research  Tokyo IBM Yamato Software Development Laboratory</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Outline Value Proposition of Managed X10</p>
    <p>Challenges in Compiling X10 to Java  Types  Generics  Arrays</p>
    <p>Experimental Results  Sequential Benchmarks  Parallel Benchmarks  Distributed Benchmarks</p>
    <p>Conclusions</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Managed X10 (X10 on Java VMs) Managed X10 is an implementation of X10 on Java</p>
    <p>Is a tool for Java programmers to easily scale-out their existing applications with built-in distributed execution feature and better inter-operability with Java.</p>
    <p>Hello World in X10</p>
    <p>class MyHello { public static def main(Array[String]) {</p>
    <p>finish for (pl in Place.places()) { async at (pl) Console.OUT.println(</p>
    <p>&quot;Hello World from place &quot; + here.id); } } }</p>
    <p>$ x10c MyHello.x10 # Compile $ x10 MyHello # Run Hello World from place 3 Hello World from place 0 Hello World from place 1 Hello World from place 2</p>
    <p>APGAS programming model</p>
    <p>Place 0 Place 1 Place 2</p>
    <p>Remote reference</p>
    <p>Activity (Thread)</p>
    <p>Object</p>
    <p>Address space</p>
    <p>Local reference</p>
    <p>DistArray, etc.</p>
    <p>X10 Source</p>
    <p>Parsing / Type Check</p>
    <p>AST Optimizations AST LoweringX10 AST</p>
    <p>X10 AST</p>
    <p>C++ Code Generation</p>
    <p>Java Code Generation</p>
    <p>C++ Source Java Source</p>
    <p>C++ Compiler Java CompilerXRC XRJXRX</p>
    <p>Native Code Bytecode</p>
    <p>X10RT</p>
    <p>X10 Compiler Front-End</p>
    <p>C++ Back-End</p>
    <p>Java Back-End</p>
    <p>Java VMsNative Env JNINative X10 Managed X10</p>
    <p>X10 compilation flow AST: Abstract Syntax Tree XRX: X10 Runtime in X10 XRJ: X10 Runtime in Java XRC: X10 Runtime in C++ X10RT: X10 Comm. Runtime</p>
    <p>X10 program is compiled into Java source, and executed on Java VMs</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>X10 as a co-language for Java  for acceleration and scale-outIn Java ...</p>
    <p>In X10  Performance and Productivity at Scale</p>
    <p>Java</p>
    <p>X10 X10</p>
    <p>X10 X10 X10</p>
    <p>X10</p>
    <p>APGAS APGAS</p>
    <p>JavaJava</p>
    <p>Place 0 Place 1</p>
    <p>Java</p>
    <p>Place 34</p>
    <p>Managed Place</p>
    <p>Native Place</p>
    <p>APGAS APGAS</p>
    <p>APGAS APGAS</p>
    <p>GPU, FPGA</p>
    <p>X10 features</p>
    <p>Places</p>
    <p>Asyncs / Finish / Atomic</p>
    <p>Clocks</p>
    <p>...</p>
    <p>How do you deal with petabytes of data? How do you take advantage of GPUs and FPGAs?</p>
    <p>Managed X10 is one of key components in this architecture</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Java-like syntax, but uses var, val, def, ...</p>
    <p>Operators can also be defined</p>
    <p>New 1st class data types, structs and functions</p>
    <p>Strong type system  type parameters are not erased</p>
    <p>Primitive types (Int, Double, ...) are defined as structs</p>
    <p>Rich array class</p>
    <p>Parallel/distributed processing</p>
    <p>Global data access</p>
    <p>A Sample X10 Program</p>
    <p>X10X10</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Challenges in Compiling X10 to Java Types  mapping of X10 data types to Java</p>
    <p>How to translate X10 types (incl. structs and functions) to Java?  How to utilize Java primitive types?</p>
    <p>Generics  gaps between X10 generics and Java generics  How to implement X10s richer generics semantics?</p>
    <p>Arrays  optimizations of array access  How to make X10 Array performance comparable to Java?</p>
    <p>Places  distributed execution  How to utilize multiple computer nodes to run an X10 application?</p>
    <p>and others ...</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>X10 Types X10 has richer types than Java, and they need to be mapped to Java</p>
    <p>interface x10.lang.Any</p>
    <p>(Int, Int)=&gt;Int</p>
    <p>struct x10.lang.Int</p>
    <p>struct MyStruct</p>
    <p>(Double)=&gt;Double</p>
    <p>class x10.lang.Object class x10.lang.String</p>
    <p>class x10.array.Array[T]</p>
    <p>class MyClass class MySubClass</p>
    <p>class</p>
    <p>interface x10.util.Map[K,V] interface</p>
    <p>interface MyInterface A B B extends A X Y Y implements Xinterface MySubInterface</p>
    <p>Interface Any as a top-level Structs and functions Int (and UInt, ...) are structs No int or built-in arrayX10</p>
    <p>struct x10.lang.UInt</p>
    <p>class x10.util.HashMap[K,V]</p>
    <p>class x10.lang.Throwable class MyThrowable</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>class java.lang.Object</p>
    <p>class java.lang.Integer</p>
    <p>class java.lang.RuntimeException class x10.core.Throwable</p>
    <p>interface x10.core.fun.Fun</p>
    <p>interface x10.core.Any</p>
    <p>interface x10.core.RefI</p>
    <p>class MyThrowable</p>
    <p>interface x10.core.fun.Fun_0_0&lt;U&gt;</p>
    <p>interface x10.core.fun.Fun_0_1&lt;T1,U&gt;</p>
    <p>abstract class x10.core.Struct</p>
    <p>class x10.array.Array&lt;T&gt;</p>
    <p>class x10.core.Ref class x10.core.String</p>
    <p>class MyClass class MySubClass</p>
    <p>class MyStruct</p>
    <p>class x10.lang.UInt</p>
    <p>static class MyClass$ $Closure$0</p>
    <p>interface MyInterface interface MySubInterface</p>
    <p>A B B extends A X Y Y implements X A B B extends A X Y Y implements X</p>
    <p>interface x10.core.StructI</p>
    <p>class java.lang.String</p>
    <p>Mapping X10 Types to Java</p>
    <p>Interfaces to represent class/struct/function Some X10 types are mapped to Java primitives or wellknown Java classes Throwables are under RuntimeException</p>
    <p>Java</p>
    <p>int</p>
    <p>(in X10 2.2.0)</p>
    <p>Unsigned types will be mapped to Java primitives in X10 2.2.1</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Example of Compilation 1 class C(p:Int) { 2 val q:Int; var r:Int; 3 def u() { } 4 private def v() { } 5 def w() { return super.hashCode(); } 6 def this(p:Int) { 7 property(p); 8 q = 1; 9 }</p>
    <p>X10</p>
    <p>Java</p>
    <p>x10c</p>
    <p>(s om</p>
    <p>e lin</p>
    <p>es a</p>
    <p>re o</p>
    <p>m itt</p>
    <p>ed )</p>
    <p>Class/field names are basically same</p>
    <p>Constructor is separated into Java constructor and field initializer</p>
    <p>For private instance method, additional bridge method is generated</p>
    <p>Static-field initializer and deserializer are generated</p>
    <p>to support inlining by front-end</p>
    <p>to support multi-place initialization</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Static Initialization In X10, static fields are immutable and have the same value in all places. General approach: evaluate static fields in place 0 and broadcast them to all other places.</p>
    <p>Difficulty of the use of final keyword impacts performance.</p>
    <p>Optimization: evaluate as many static fields as possible in each place if compiler can determine it is safe.</p>
    <p>X10</p>
    <p>Java</p>
    <p>(s om</p>
    <p>e lin</p>
    <p>es a</p>
    <p>re o</p>
    <p>m itt</p>
    <p>ed )</p>
    <p>X10 also requires all static fields must be initialized successfully before the main method is executed. Current approach: preload all X10 classes.</p>
    <p>Large footprint  Massive class loading</p>
    <p>in a short time has impact to some JIT compilers (e.g. IBM J9)</p>
    <p>x10c</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Generics X10 generics must be implemented by type reification</p>
    <p>Type parameters are kept for each instance, like in C++ templates  e.g. new Sample[Int](1).typeName() returns Sample[x10.lang.Int]</p>
    <p>However, Java generics are implemented by type erasure  Type parameters are checked and erased by javac</p>
    <p>Quiz: How this X10 code can be translated to Java? 1 interface I[T] { 2 def m(T):T; 3 } 4 class B[T] { 5 def m(a:T):T {return a;} 6 } 7 class C[T1,T2] extends B[Int] implements I[String], I[Int] { 8 def this(T1){} 9 def this(T2){}</p>
    <p>How to implement both I[String] and I[Int]?</p>
    <p>How to overload m(T1) and m(T2)?</p>
    <p>How to pass primitive (unboxed) data to get better performance, while allowing access through B[Int]</p>
    <p>X10</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Generics Compilation</p>
    <p>Java</p>
    <p>x10c</p>
    <p>X10</p>
    <p>Static field $RTT holds X10-level class info</p>
    <p>Additional fields (T1,T2) are generated to hold type parameters</p>
    <p>Dispatch method is generated for overloading</p>
    <p>Method name is modified to include type parameters</p>
    <p>Primitives are used as much as possible, and bridge method is generated to access it through boxed types</p>
    <p>X10 generics are mapped to Java generics, but ...</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Arrays X10 array is not a built-in data type, but is a class</p>
    <p>It is generic, multi-dimensional, and sparse array An X10 array instance consists of three objects</p>
    <p>Array[T] holds array attributes  IndexedMemoryChunk[T] represents a contiguous 1-dimensional array  Actual Java array (e.g. String[ ] or int[ ]) to hold array elements</p>
    <p>raw</p>
    <p>region</p>
    <p>Array&lt;String&gt;</p>
    <p>layout</p>
    <p>value type</p>
    <p>IndexedMemoryChunk&lt;String&gt;</p>
    <p>String[ ]</p>
    <p>abc</p>
    <p>def</p>
    <p>Array&lt;Integer&gt; IndexedMemoryChunk&lt;Integer&gt;</p>
    <p>int[ ]( Integer[])</p>
    <p>raw$value int[]</p>
    <p>privatize</p>
    <p>raw</p>
    <p>region layout</p>
    <p>value type</p>
    <p>Array[String] Array[Int]</p>
    <p>To get performance, Array access is (should be) inlined and privatized in some situations</p>
    <p>X10</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Array Access (e.g. Array[Int]{rail}) 1 public final class Array[T] 2 (region:Region{self!=null}, rank:Int, rail:Boolean) {} 3 implements (Point(rank))=&gt;T, Iterable[Point(rank)] { 4 private val raw:IndexedMemoryChunk[T]; 5 private val layout:RectLayout; 6 public operator this(i0:Int){rank==1}:T { 7 if (rail) { 8 return raw(i0); 9 } else {</p>
    <p>Array.x10 IndexedMemoryChunk.x10</p>
    <p>IndexedMemoryChunk.java</p>
    <p>int[ ] (Integer[])</p>
    <p>Extra overhead in X10 3 field accesses 2 virtual calls 1 cast 1 boxing</p>
    <p>field/array access virtual call</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Optimized Array Access 1 val arr: Array[Int]{rail} =  2 var sum:Int = 0; 3 for (var i:Int = 0; i &lt; arr.size; ++i) { 4 sum += arr(i); 5 }</p>
    <p>X10 Java</p>
    <p>Java</p>
    <p>Java</p>
    <p>+ Operator inlining</p>
    <p>+ Privatization of Java backing array</p>
    <p>x10c</p>
    <p>Extra overhead in X10 3 field accesses 2 virtual calls 1 cast 1 boxing</p>
    <p>Extra overhead in X10 2 field accesses 1 cast</p>
    <p>Extra overhead in X10 None!</p>
    <p>We have implemented operator inlining and privatization for IndexedMemoryChunk but not for Array.</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Distributed Execution Multi-JVM is supported in X10 2.1.2</p>
    <p>Each X10 Place uses its own Java VM  Uses common X10RT (in C++) through JNI</p>
    <p>Place Q</p>
    <p>x10 command</p>
    <p>Initiate Places via SSHPlace P</p>
    <p>Communication Physical Layer (e.g. socket, MPI)</p>
    <p>x10rt_probe</p>
    <p>Communication Physical Layer (e.g. socket, MPI)</p>
    <p>Byte array message</p>
    <p>x10rt_send_msg</p>
    <p>Invoke function Run activity at place P</p>
    <p>x10.runtime.impl.java.Runtime</p>
    <p>Msg Buffer</p>
    <p>Deserialize function from byte array</p>
    <p>Receive byte array from place P</p>
    <p>JNI (Java-&gt;C++)</p>
    <p>Serialize function into byte array</p>
    <p>Send byte array</p>
    <p>x10.runtime.impl.java.Runtime</p>
    <p>Network</p>
    <p>JVM</p>
    <p>Byte array message</p>
    <p>JNI (Java-&gt;C++)</p>
    <p>JVM</p>
    <p>Uses backend unique wire format in X10 2.2.0</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Performance Improvement</p>
    <p>Performance on single JVM was much improved in 2.1.2</p>
    <p>Both in sequential (a), and parallel (b) benchmarks</p>
    <p>Multi-JVM also shows good scalability (c)</p>
    <p>Need further tuning</p>
    <p>Intel Xeon X5670 (6-core, SMT-off, 2.93GHz) x 2, 16GB memory 64-bit Red Hat Enterprise Linux Server release 5.5 (kernel 2.6.18-194.el5) IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr9-20110203_74623 (JIT enabled, AOT enabled)).</p>
    <p>(c) Distributed benchmark results KMeansSPMD</p>
    <p># of Places</p>
    <p>S ca</p>
    <p>la bi</p>
    <p>lit y</p>
    <p>(1 .0</p>
    <p>fo r 1</p>
    <p>P la</p>
    <p>ce ) X10 2.1.2+</p>
    <p>KMeansSequential</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>t im</p>
    <p>e (J</p>
    <p>av a=</p>
    <p>X10 2.0.3 X10 2.0.4 X10 2.0.5 X10 2.0.6 X10 2.1.0 X10 2.1.1 X10 2.1.2</p>
    <p>(a) Sequential benchmark results</p>
    <p>Rail Array</p>
    <p>(b) Parallel benchmark results</p>
    <p>Fib (25) Integrate (32) QuickSort (100,000)</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>t im</p>
    <p>e (J</p>
    <p>av a=</p>
    <p>X10 2.1.1+ X10 2.1.2</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Conclusions Presented value proposition of Managed X10</p>
    <p>Explained challenges in compiling X10 to Java  For performance and functionality</p>
    <p>Discussed compilation techniques</p>
    <p>Demonstrated performance improvement history</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Future Work Better Java Interoperability Heterogeneous Interoperability</p>
    <p>Sequential Performance (Array, Map, etc.) Parallel Performance (atomic) Distributed Performance and Scalability (Multi-JVM) Smaller Footprint</p>
  </div>
  <div class="page">
    <p>IBM Research - Tokyo</p>
    <p>Thank You</p>
  </div>
</Presentation>
