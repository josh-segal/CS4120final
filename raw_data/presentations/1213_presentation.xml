<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Twizzler: A Data-Centric OS for Persistent Memory</p>
    <p>Daniel Bittman Peter Alvaro Pankaj Mehra Darrell Long Ethan Miller</p>
    <p>Center for Research in Storage Systems University of California, Santa Cruz</p>
  </div>
  <div class="page">
    <p>Hardware Trends</p>
    <p>~1-10 ms</p>
    <p>sys_read</p>
    <p>~100-300 ns ~1 us</p>
    <p>Growing, becoming persistent Outdated interface Cannot compute on directly</p>
    <p>Persistent data should be operated on directly and like memory</p>
  </div>
  <div class="page">
    <p>Global Object Space: Abstract References</p>
    <p>Persistent data should be operated on directly and like memory</p>
    <p>A B</p>
    <p>C AB</p>
    <p>Process 1</p>
    <p>Process 2 A B</p>
  </div>
  <div class="page">
    <p>Existing approaches?</p>
    <p>PMDK No OS support</p>
    <p>Data sharing is hard</p>
    <p>Slow pointers</p>
    <p>POSIX Explicit persistence and data access</p>
    <p>Multiple forms of data</p>
    <p>Kernel involvement</p>
    <p>mmap helps, but does not solve the virtual memory problem</p>
    <p>Twizzlers goals Little kernel involvement</p>
    <p>Pervasive support (security, sharing)</p>
    <p>Low overhead persistent pointers</p>
  </div>
  <div class="page">
    <p>Design Overview</p>
    <p>application</p>
    <p>musl* libc</p>
    <p>libtwz</p>
    <p>twix</p>
    <p>Twizzler kernel</p>
    <p>view management, pointer translation, consistency primitives</p>
    <p>object &amp; thread management, trusted computing base</p>
    <p>* modified musl to change linux syscalls into function calls</p>
    <p>Linux syscall emulation</p>
    <p>data object</p>
    <p>userspace kernelspace</p>
    <p>POSIX access (read/write)</p>
    <p>direct access (memory-style)</p>
    <p>metadata &amp; FOT management</p>
    <p>create, delete, etc. physical mapping</p>
  </div>
  <div class="page">
    <p>Persistent Pointers</p>
    <p>Pointers may be cross-object: referring to data within a different object</p>
    <p>object-id offset</p>
    <p>FOT entry offset</p>
    <p>FOT Data</p>
    <p>Object Layout</p>
    <p>object ID or Name Name Resolver flags</p>
    <p>Foreign Object Table</p>
    <p>object ID or Name Name Resolver flags</p>
    <p>O</p>
    <p>FOT</p>
    <p>A</p>
    <p>FOT entry of &gt;0 means cross-objectpoints to a</p>
    <p>different object.</p>
  </div>
  <div class="page">
    <p>Implications for Data and Sharing</p>
    <p>Objects are self-contained</p>
    <p>Persistent pointers are based on identity not location</p>
    <p>Persistent pointers can be operated on generically</p>
    <p>Objects can be easily shared</p>
    <p>FOT entry offset</p>
    <p>object ID offset</p>
    <p>Pointers in Twizzler Pointers in PMDK</p>
    <p>management</p>
    <p>Coordination free sharing</p>
  </div>
  <div class="page">
    <p>Consistency and Security</p>
    <p>Cryptographically signed capabilities for access control</p>
    <p>The kernel cannot create capabilities, but it can (must) verify them.</p>
    <p>All enforcement must be done by hardware.</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>More details available at twizzler.io</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>Programmability, not performance (though, performance where we can get it)</p>
  </div>
  <div class="page">
    <p>Case Study: KVS</p>
    <p>Index Data</p>
    <p>Lookup returns direct pointers</p>
    <p>Data2</p>
    <p>Index</p>
    <p>Data1</p>
    <p>r-</p>
    <p>--</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Dell R640 Servers with Intel Optane DC</p>
    <p>Ported SQLite to Twizzler and to PMDK</p>
    <p>Compared to SQLite native and SQLite LMDB (mmap)</p>
  </div>
  <div class="page">
    <p>Performance: SQLite</p>
  </div>
  <div class="page">
    <p>Performance: SQLite</p>
  </div>
  <div class="page">
    <p>Future Work: Distributed Twizzler</p>
    <p>codedata</p>
    <p>Its a rendezvous problem</p>
    <p>node</p>
    <p>A</p>
    <p>D</p>
    <p>C</p>
    <p>B</p>
    <p>Explicit Relationships and the Object Graph</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Operating systems must evolve to support persistent data programming models directly</p>
    <p>Cross-object pointers allow us to realize the power of UNIX in a data-centric model</p>
    <p>Twizzler provides benefits for both NVM and traditional systems</p>
  </div>
  <div class="page">
    <p>Thank You! Questions?</p>
  </div>
</Presentation>
