<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Date</p>
    <p>Bayllocator: A proactive system to predict server utilization and dynamically allocate memory resources using Bayesian networks and ballooning</p>
    <p>LISA / USENIX 2012</p>
    <p>Evangelos Tasoulas - University of Oslo Hrek Haugerud - Oslo And Akershus University College Kyrre Begnum - Crayon NSA</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Consolidation of virtual machines is the norm</p>
    <p>Most systems are idle most of the time, so we can overcommit resources</p>
    <p>However, when they need to do their job, they need their resources</p>
    <p>... and could benefit if others dont need theirs</p>
    <p>Reactive resource allocation may not be fast enough</p>
    <p>The allocation mechanism is sometimes slow in itself</p>
  </div>
  <div class="page">
    <p>Problem statement and approach</p>
    <p>A proactive system to predict server load using Bayesian networks, and dynamically allocate resources on virtual machines running on a single hypervisor to provide more efficient utilization of the physical hardware</p>
    <p>Currently only focused on dynamic memory allocation using ballooning</p>
    <p>To get a flexible approach on improving utilization efficiency of hardware resources in a single hypervisor running virtual machines</p>
    <p>Approach:</p>
  </div>
  <div class="page">
    <p>Ballooning</p>
    <p>A kernel module is loaded into the kernel of the VM</p>
    <p>It can be controlled from the hypervisor to allocate or release memory</p>
    <p>The VM will therefore believe to have the same amount of memory, but have some of it locked</p>
  </div>
  <div class="page">
    <p>Bayllocator will ...</p>
    <p>Assume an over-provisioned environment</p>
    <p>Make a prediction of how much memory each VM needs + a defined percentage</p>
    <p>Ensure that a VMs min/max values are not violated</p>
    <p>Avoid Hypervisor swapping</p>
    <p>Distribute excessive memory fairly to all VMs</p>
    <p>Claim memory fairly</p>
  </div>
  <div class="page">
    <p>Prediction Algorithm</p>
    <p>Memory consumption is divided into categories</p>
    <p>Each category spans 100MB, f.e 400_500MB</p>
    <p>Given the input of: VM, weekday, time interval and current consumption, a probability is calculated for all categories</p>
    <p>Each probability is multiplied with a number representing the category</p>
    <p>In our case: 400_500MB -&gt; 450MB * P(400_500MB)</p>
  </div>
  <div class="page">
    <p>Simple example</p>
  </div>
  <div class="page">
    <p>The redistribution of wealth</p>
    <p>There may not be enough memory to meet all the predicted allocations</p>
    <p>Fair - Large VMs will need more memory, but should be expected to share more too</p>
    <p>In practice, use a percentage rather than memory values when awarding / claiming memory</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Both generated data and replays of real data</p>
    <p>Single KVM hypervisor with several VMs</p>
    <p>Special script mimicked workloads inside the VM</p>
    <p>Collected usage data into a DB and wrote a prototype using R and Perl</p>
  </div>
  <div class="page">
    <p>Results - Simulated data</p>
  </div>
  <div class="page">
    <p>Results - Real-life replay</p>
    <p>Predictions start Predictions start</p>
  </div>
  <div class="page">
    <p>Results - Learning periods and accuracy</p>
    <p>The more observed data, the better the accuracy of the predictions</p>
    <p>A fundamental difficulty with using historical data is that you need historical data</p>
    <p>High-quality historical data is hard to come by</p>
    <p>Often times underlying trends or gaps pollute the data</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>A virtual machine will never get less memory than has ever been observed on it*</p>
    <p>Why not choose the category with the highest probability, instead of calculating the sum?</p>
    <p>What is the training time?</p>
    <p>Why use only temporal parameters?</p>
    <p>Can I run it and expand on the bayesian network myself?</p>
    <p>Bayllocator is not about reactive, flashmob-mitigation</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Weight-lifting for servers: If we knew the signs of a flashmob, we could train the model for it.</p>
    <p>Investigate the outer limits of ballooning under extreme circumstances</p>
    <p>Comparison with memory de-duplication</p>
    <p>Combining Bayllocator with reactive behavior</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
  </div>
</Presentation>
