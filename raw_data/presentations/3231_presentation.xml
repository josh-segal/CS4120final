<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Control Flow Bending: On the Effectiveness of</p>
    <p>Control Flow Integrity</p>
    <p>Nicholas Carlini1, Antonio Barresi2, Mathias Payer3</p>
    <p>David Wagner1, Thomas R. Gross2</p>
  </div>
  <div class="page">
    <p>Background</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Memory Corruption</p>
    <p>Control Flow Integrity</p>
  </div>
  <div class="page">
    <p>Main Result: CFI does not stop all attacks.</p>
  </div>
  <div class="page">
    <p>Control-Flow Integrity</p>
  </div>
  <div class="page">
    <p>Control-Flow Integrity</p>
    <p>(*fn)(x);</p>
    <p>return 7;</p>
  </div>
  <div class="page">
    <p>Control-Flow Integrity</p>
    <p>CHECK(fn); (*fn)(x);</p>
    <p>return 7;</p>
  </div>
  <div class="page">
    <p>Control-Flow Integrity</p>
    <p>CHECK(fn); (*fn)(x);</p>
    <p>return 7;</p>
  </div>
  <div class="page">
    <p>Control-Flow Integrity</p>
    <p>CHECK(fn); (*fn)(x);</p>
    <p>CHECK_RET(); return 7;</p>
  </div>
  <div class="page">
    <p>Control-Flow Integrity</p>
    <p>CHECK(fn); (*fn)(x);</p>
    <p>CHECK_RET(); return 7;</p>
  </div>
  <div class="page">
    <p>Shadow Stacks</p>
    <p>Dynamic restrictions on return instructions</p>
  </div>
  <div class="page">
    <p>Shadow Stacks</p>
    <p>Dynamic restrictions on return instructions</p>
    <p>A C</p>
    <p>B</p>
    <p>A C</p>
    <p>B</p>
    <p>A C</p>
    <p>B</p>
    <p>A C</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Shadow Stacks</p>
    <p>Dynamic restrictions on return instructions</p>
    <p>A C</p>
    <p>B</p>
    <p>A C</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Two ways to weaken CFI:</p>
    <p>(1) Coarsen CFG (2) Remove Shadow Stack</p>
  </div>
  <div class="page">
    <p>Prior Work: Weak CFI is broken</p>
    <p>Gkta et al. IEEE S&amp;P '14 Out Of Control: Overcoming Control-Flow Integrity</p>
    <p>Carlini et al. USENIX Security '14 ROP is Still Dangerous: Breaking Modern Defenses</p>
    <p>Davi et al. USENIX Security '14 Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection</p>
    <p>Gkta et al. USENIX Security '14 Size Does Matter: Why Using Gadget-Chain Length to Prevent Code-Reuse Attacks is Hard</p>
  </div>
  <div class="page">
    <p>Our question: How secure are other CFI variants?</p>
  </div>
  <div class="page">
    <p>Our question: How secure are other CFI variants?</p>
  </div>
  <div class="page">
    <p>Fully-Precise Static CFI: CFI in its best possible form</p>
  </div>
  <div class="page">
    <p>A transfer from X to Y is allowed if and only if</p>
    <p>some benign execution uses it</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>How secure is half-weakened CFI?</p>
    <p>(Shadow stack removed)</p>
  </div>
  <div class="page">
    <p>Can we just do ROP?</p>
  </div>
  <div class="page">
    <p>Can we just do ROP?</p>
    <p>No.</p>
  </div>
  <div class="page">
    <p>Can we just do ROP?</p>
    <p>No.</p>
    <p>How about return-to-libc?</p>
  </div>
  <div class="page">
    <p>Return to Libc: Challenges</p>
  </div>
  <div class="page">
    <p>What does a CFG look like?</p>
  </div>
  <div class="page">
    <p>Exploit</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>Exploit</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>That picture is a lie</p>
  </div>
  <div class="page">
    <p>memcpy</p>
    <p>Exploit</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>memcpy</p>
    <p>Exploit</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>So simple paths between arbitrary points exist. But are they feasible?</p>
  </div>
  <div class="page">
    <p>Dispatcher Functions</p>
    <p>memcpy(dst, src, 8)</p>
    <p>Old stack data</p>
    <p>Stack</p>
  </div>
  <div class="page">
    <p>Dispatcher Functions</p>
    <p>memcpy(dst, src, 8)</p>
    <p>Old stack data</p>
    <p>memcpy frame</p>
    <p>Stack</p>
  </div>
  <div class="page">
    <p>Dispatcher Functions</p>
    <p>memcpy(dst, src, 8)</p>
    <p>Old stack data</p>
    <p>Return address</p>
    <p>Local data</p>
    <p>Stack</p>
  </div>
  <div class="page">
    <p>Dispatcher Functions</p>
    <p>memcpy(dst, src, 8)</p>
    <p>Old stack data</p>
    <p>Return address</p>
    <p>Local data</p>
    <p>Attacker data</p>
    <p>Stack</p>
  </div>
  <div class="page">
    <p>Dispatcher Functions</p>
  </div>
  <div class="page">
    <p>Return to Libc: Challenges</p>
  </div>
  <div class="page">
    <p>Evaluation (part 1)</p>
    <p>Analyzed six vulnerable binaries, assuming fully-precise static CFI was in place.</p>
    <p>What attacks are possible?</p>
    <p>Direct arbitrary code execution in 3 of the 6  File system access in 2 of the 6  Attack prevented in 1 of the 6</p>
  </div>
  <div class="page">
    <p>CFI without shadow stack is broken  even with fully precise static CFI.</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>How secure is un-weakened CFI?</p>
  </div>
  <div class="page">
    <p>This time: no dispatcher functions</p>
  </div>
  <div class="page">
    <p>Return to Libc: Challenges</p>
  </div>
  <div class="page">
    <p>Evaluation (part 2)</p>
    <p>Evaluate same 6 binaries; with shadow stack</p>
    <p>Direct arbitrary code execution in 1 of the 6  File system access in 2 of the 6  Confined code execution in 2 of the 6  Attack prevented in 1 of the 6</p>
  </div>
  <div class="page">
    <p>ROP gives us Turing-complete attacks. Can we do this with CFI</p>
    <p>and a shadow stack?</p>
  </div>
  <div class="page">
    <p>Printf-Oriented Programming</p>
    <p>A Turing complete domain-specific language</p>
    <p>Program  Format String</p>
    <p>Program Counter  Format String Counter</p>
  </div>
  <div class="page">
    <p>Printf-Oriented Programming</p>
    <p>Memory Reads  %s</p>
    <p>Memory Writes  %n</p>
    <p>Conditional  %.*d</p>
    <p>Loops? Write over the format specifier counter.</p>
  </div>
  <div class="page">
    <p>printf(&quot;%.0d%.0d%.0d%.0d%.0d%.0d%.0d%.0da%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%s%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%s%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%sa%hhn%hhn%sa%hhn% hhn%sa%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn% hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s %.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn% hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn% hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn %hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn% hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s %.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn% hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn% hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn %hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn% hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%s%.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%s %.*d%hhn%hhn%s%s%.*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn% hhn%s%s%s%hhn%hhn%s%s%hhn%hhn%s%s%*d%hhn%hhn%s%s%hhn%hhn%s%s%s%hhn%hhn%s%s%hhn&quot;, 0,0,0,0,0,0,0,0, &amp;var[32], &amp;args[2], pad, &amp;var[33], &amp;args[5], pad, &amp;var[34], &amp;args[8], pad, &amp;var[35], &amp;args[11], pad, &amp;var[36], &amp;args[14], pad, &amp;var[37], &amp;args[17], pad, &amp;var[38], &amp;args[20], pad, &amp;var[39], &amp;args[23], pad, &amp;var[64], &amp;args[26], pad, &amp;var[65], &amp;args[29], pad, &amp;var[66], &amp;args[32], pad, &amp;var[67], &amp;args[35], pad, &amp;var[68], &amp;args[38], pad, &amp;var[69], &amp;args[41], pad, &amp;var[70], &amp;args[44], pad, &amp;var[71], &amp;args[47], pad, &amp;var[300], &amp;var[32], 255, 0, &amp;var[999], &amp;args[54], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[60], pad, &amp;var[999], &amp;var[996], &amp;args[64], pad, &amp;var[996], &amp;var[64], 255, 0, &amp;var[999], &amp;args[71], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[77], pad, &amp;var[999], &amp;var[0], &amp;args[81], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[87], pad, &amp;var[999], &amp;var[998], &amp;args[91], pad, &amp;var[64], 255, 0, &amp;var[999], &amp;args[97], pad, &amp;var[999], &amp;var[997], &amp;args[101], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[106], pad, &amp;var[999], &amp;var[999], &amp;args[110], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[116], pad, &amp;var[999], &amp;var[193], &amp;args[120], pad, &amp;var[300], 255, 0, &amp;var[999], &amp;args[126], pad, &amp;var[999], &amp;var[998], &amp;args[130], pad, &amp;var[32], 255, 0, &amp;var[999], &amp;args[136], pad, &amp;var[999], &amp;var[997], &amp;args[140], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[145], pad, &amp;var[999], &amp;var[999], &amp;args[149], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[155], pad, &amp;var[999], &amp;var[194], &amp;args[159], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[164], pad, &amp;var[999], &amp;var[96], &amp;args[168], pad, &amp;var[96], &amp;var[33], 255, 0, &amp;var[999], &amp;args[175], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[181], pad, &amp;var[999], &amp;var[996], &amp;args[185], pad, &amp;var[996], &amp;var[65], 255, 0, &amp;var[999], &amp;args[192], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[198], pad, &amp;var[999], &amp;var[1], &amp;args[202], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[208], pad, &amp;var[999], &amp;var[998], &amp;args[212], pad, &amp;var[65], 255, 0, &amp;var[999], &amp;args[218], pad, &amp;var[999], &amp;var[997], &amp;args[222], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[227], pad, &amp;var[999], &amp;var[999], &amp;args[231], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[237], pad, &amp;var[999], &amp;var[193], &amp;args[241], pad, &amp;var[96], 255, 0, &amp;var[999], &amp;args[247], pad, &amp;var[999], &amp;var[998], &amp;args[251], pad, &amp;var[33], 255, 0, &amp;var[999], &amp;args[257], pad, &amp;var[999], &amp;var[997], &amp;args[261], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[266], pad, &amp;var[999], &amp;var[999], &amp;args[270], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[276], pad, &amp;var[999], &amp;var[194], &amp;args[280], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[285], pad, &amp;var[999], &amp;var[97], &amp;args[289], pad, &amp;var[97], &amp;var[34], 255, 0, &amp;var[999], &amp;args[296], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[302], pad, &amp;var[999], &amp;var[996], &amp;args[306], pad, &amp;var[996], &amp;var[66], 255, 0, &amp;var[999], &amp;args[313], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[319], pad, &amp;var[999], &amp;var[2], &amp;args[323], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[329], pad, &amp;var[999], &amp;var[998], &amp;args[333], pad, &amp;var[66], 255, 0, &amp;var[999], &amp;args[339], pad, &amp;var[999], &amp;var[997], &amp;args[343], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[348], pad, &amp;var[999], &amp;var[999], &amp;args[352], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[358], pad, &amp;var[999], &amp;var[193], &amp;args[362], pad, &amp;var[97], 255, 0, &amp;var[999], &amp;args[368], pad, &amp;var[999], &amp;var[998], &amp;args[372], pad, &amp;var[34], 255, 0, &amp;var[999], &amp;args[378], pad, &amp;var[999], &amp;var[997], &amp;args[382], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[387], pad, &amp;var[999], &amp;var[999], &amp;args[391], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[397], pad, &amp;var[999], &amp;var[194], &amp;args[401], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[406], pad, &amp;var[999], &amp;var[98], &amp;args[410], pad, &amp;var[98], &amp;var[35], 255, 0, &amp;var[999], &amp;args[417], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[423], pad, &amp;var[999], &amp;var[996], &amp;args[427], pad, &amp;var[996], &amp;var[67], 255, 0, &amp;var[999], &amp;args[434], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[440], pad, &amp;var[999], &amp;var[3], &amp;args[444], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[450], pad, &amp;var[999], &amp;var[998], &amp;args[454], pad, &amp;var[67], 255, 0, &amp;var[999], &amp;args[460], pad, &amp;var[999], &amp;var[997], &amp;args[464], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[469], pad, &amp;var[999], &amp;var[999], &amp;args[473], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[479], pad, &amp;var[999], &amp;var[193], &amp;args[483], pad, &amp;var[98], 255, 0, &amp;var[999], &amp;args[489], pad, &amp;var[999], &amp;var[998], &amp;args[493], pad, &amp;var[35], 255, 0, &amp;var[999], &amp;args[499], pad, &amp;var[999], &amp;var[997], &amp;args[503], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[508], pad, &amp;var[999], &amp;var[999], &amp;args[512], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[518], pad, &amp;var[999], &amp;var[194], &amp;args[522], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[527], pad, &amp;var[999], &amp;var[99], &amp;args[531], pad, &amp;var[99], &amp;var[36], 255, 0, &amp;var[999], &amp;args[538], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[544], pad, &amp;var[999], &amp;var[996], &amp;args[548], pad, &amp;var[996], &amp;var[68], 255, 0, &amp;var[999], &amp;args[555], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[561], pad, &amp;var[999], &amp;var[4], &amp;args[565], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[571], pad, &amp;var[999], &amp;var[998], &amp;args[575], pad, &amp;var[68], 255, 0, &amp;var[999], &amp;args[581], pad, &amp;var[999], &amp;var[997], &amp;args[585], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[590], pad, &amp;var[999], &amp;var[999], &amp;args[594], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[600], pad, &amp;var[999], &amp;var[193], &amp;args[604], pad, &amp;var[99], 255, 0, &amp;var[999], &amp;args[610], pad, &amp;var[999], &amp;var[998], &amp;args[614], pad, &amp;var[36], 255, 0, &amp;var[999], &amp;args[620], pad, &amp;var[999], &amp;var[997], &amp;args[624], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[629], pad, &amp;var[999], &amp;var[999], &amp;args[633], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[639], pad, &amp;var[999], &amp;var[194], &amp;args[643], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[648], pad, &amp;var[999], &amp;var[100], &amp;args[652], pad, &amp;var[100], &amp;var[37], 255, 0, &amp;var[999], &amp;args[659], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[665], pad, &amp;var[999], &amp;var[996], &amp;args[669], pad, &amp;var[996], &amp;var[69], 255, 0, &amp;var[999], &amp;args[676], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[682], pad, &amp;var[999], &amp;var[5], &amp;args[686], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[692], pad, &amp;var[999], &amp;var[998], &amp;args[696], pad, &amp;var[69], 255, 0, &amp;var[999], &amp;args[702], pad, &amp;var[999], &amp;var[997], &amp;args[706], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[711], pad, &amp;var[999], &amp;var[999], &amp;args[715], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[721], pad, &amp;var[999], &amp;var[193], &amp;args[725], pad, &amp;var[100], 255, 0, &amp;var[999], &amp;args[731], pad, &amp;var[999], &amp;var[998], &amp;args[735], pad, &amp;var[37], 255, 0, &amp;var[999], &amp;args[741], pad, &amp;var[999], &amp;var[997], &amp;args[745], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[750], pad, &amp;var[999], &amp;var[999], &amp;args[754], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[760], pad, &amp;var[999], &amp;var[194], &amp;args[764], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[769], pad, &amp;var[999], &amp;var[101], &amp;args[773], pad, &amp;var[101], &amp;var[38], 255, 0, &amp;var[999], &amp;args[780], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[786], pad, &amp;var[999], &amp;var[996], &amp;args[790], pad, &amp;var[996], &amp;var[70], 255, 0, &amp;var[999], &amp;args[797], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[803], pad, &amp;var[999], &amp;var[6], &amp;args[807], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[813], pad, &amp;var[999], &amp;var[998], &amp;args[817], pad, &amp;var[70], 255, 0, &amp;var[999], &amp;args[823], pad, &amp;var[999], &amp;var[997], &amp;args[827], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[832], pad, &amp;var[999], &amp;var[999], &amp;args[836], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[842], pad, &amp;var[999], &amp;var[193], &amp;args[846], pad, &amp;var[101], 255, 0, &amp;var[999], &amp;args[852], pad, &amp;var[999], &amp;var[998], &amp;args[856], pad, &amp;var[38], 255, 0, &amp;var[999], &amp;args[862], pad, &amp;var[999], &amp;var[997], &amp;args[866], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[871], pad, &amp;var[999], &amp;var[999], &amp;args[875], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[881], pad, &amp;var[999], &amp;var[194], &amp;args[885], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[890], pad, &amp;var[999], &amp;var[102], &amp;args[894], pad, &amp;var[102], &amp;var[39], 255, 0, &amp;var[999], &amp;args[901], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[907], pad, &amp;var[999], &amp;var[996], &amp;args[911], pad, &amp;var[996], &amp;var[71], 255, 0, &amp;var[999], &amp;args[918], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[924], pad, &amp;var[999], &amp;var[7], &amp;args[928], pad, &amp;var[996], 255, 0, &amp;var[999], &amp;args[934], pad, &amp;var[999], &amp;var[998], &amp;args[938], pad, &amp;var[71], 255, 0, &amp;var[999], &amp;args[944], pad, &amp;var[999], &amp;var[997], &amp;args[948], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[953], pad, &amp;var[999], &amp;var[999], &amp;args[957], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[963], pad, &amp;var[999], &amp;var[193], &amp;args[967], pad, &amp;var[102], 255, 0, &amp;var[999], &amp;args[973], pad, &amp;var[999], &amp;var[998], &amp;args[977], pad, &amp;var[39], 255, 0, &amp;var[999], &amp;args[983], pad, &amp;var[999], &amp;var[997], &amp;args[987], pad, &amp;var[998], &amp;var[997], &amp;var[999], &amp;args[992], pad, &amp;var[999], &amp;var[999], &amp;args[996], pad, &amp;var[999], 255, 0, &amp;var[999], &amp;args[1002], pad, &amp;var[999], &amp;var[194], &amp;args[1006], pad, &amp;var[193], &amp;var[194], &amp;var[999], &amp;args[1011], pad, &amp;var[999], &amp;var[103]);</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Conclusion</p>
    <p>CFI with shadow stack stops some attacks.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>CFI, in it's best form, can not stop all attacks.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Shadow stacks significantly complicates attacks.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Enforcing memory integrity may be more effective than control-flow integrity.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>but wait, you didn't break CFI!</p>
    <p>The goal of CFI is to make programs secure.</p>
    <p>The mechanism CFI uses is enforcing a CFG.</p>
    <p>We do not break the mechanism.</p>
    <p>We do break the goal.</p>
  </div>
</Presentation>
