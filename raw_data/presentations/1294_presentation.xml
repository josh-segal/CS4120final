<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PADS: Policy Architecture for Distributed Storage Systems</p>
    <p>Nalini Belaramani, Jiandan Zheng, Amol Nayate,</p>
    <p>Robert Soul, Mike Dahlin and Robert Grimm.</p>
    <p>University of Texas at AusHn, Amazon Inc., IBM T.J. Watson, New York University</p>
  </div>
  <div class="page">
    <p>Lots of data storage systems</p>
    <p>NFS</p>
    <p>AFS</p>
    <p>Coda</p>
    <p>Deceit</p>
    <p>Ficus</p>
    <p>Zebra</p>
    <p>Bayou</p>
    <p>XFS</p>
    <p>OceanStore</p>
    <p>Farsite</p>
    <p>Pangaea</p>
    <p>Ivy</p>
    <p>Google File System</p>
    <p>Chain Replication</p>
    <p>BlueFS</p>
    <p>Segank Ceph</p>
    <p>OmniStore</p>
    <p>WheelFS</p>
    <p>Dynamo</p>
    <p>TierStore</p>
    <p>WinFS</p>
    <p>Cimbiosys</p>
  </div>
  <div class="page">
    <p>Is there a beOer way</p>
    <p>to build distributed storage systems?</p>
  </div>
  <div class="page">
    <p>Microkernel approach</p>
    <p>General mechanism layer</p>
    <p>System development defining policy</p>
    <p>System 1 Policy</p>
    <p>PRACTI Mechanisms</p>
    <p>System 2 Policy System 3 Policy</p>
    <p>[*] PRACTI Replication, Nalini Belaramani, Mike Dahlin, Lei Gao, Amol Nayate, Arun Venkataramani, Praveen Yalagandula, and Jiandan Zheng. NSDI 2006.</p>
  </div>
  <div class="page">
    <p>Is it really a beOer way?</p>
    <p>Challenge: 10 systems, 1K lines each before you graduate</p>
    <p>*Gulp* How about 3?</p>
  </div>
  <div class="page">
    <p>Yes it is!</p>
    <p>With PADS: 2 grad students + 4 months = 12 diverse systems</p>
    <p>Topology Independence</p>
    <p>Any Consistency</p>
    <p>Bayou</p>
    <p>Pangaea Coda</p>
    <p>TRIP*</p>
    <p>Chain ReplicaHon</p>
    <p>TierStore</p>
    <p>FCS</p>
    <p>Par5al Replica5on</p>
    <p>Bayou*</p>
    <p>Coda* TierStore*</p>
    <p>TRIP</p>
    <p>SCS</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>PADS approach</p>
    <p>Policy  RouHng  Blocking</p>
    <p>EvaluaHon</p>
  </div>
  <div class="page">
    <p>Where is data stored?</p>
    <p>How is informaHon propagated?</p>
    <p>Consistency requirements?</p>
    <p>RouHng Blocking</p>
    <p>PADS</p>
    <p>Durability requirements?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>PADS approach</p>
    <p>Policy  RouHng  Blocking</p>
    <p>EvaluaHon</p>
  </div>
  <div class="page">
    <p>RouHng</p>
    <p>Data flows among nodes</p>
    <p>When and where to send an update?</p>
    <p>Who to contact on a local read miss?</p>
    <p>Bayou</p>
    <p>Coda</p>
    <p>Chain ReplicaHon TierStore</p>
  </div>
  <div class="page">
    <p>SubscripHon</p>
    <p>PrimiHve for update flow</p>
    <p>OpHons:</p>
    <p>Data set of interest (e.g. /vol1/*)  NoHficaHons (invalidaHons) in causal order or updates (bodies)</p>
    <p>Logical start Hme</p>
    <p>Source Node Destination Node</p>
  </div>
  <div class="page">
    <p>Eventdriven API</p>
    <p>To set up rouHng</p>
    <p>PADS</p>
    <p>RouHng Policy</p>
    <p>Blocking Policy</p>
    <p>Operation block Write Delete</p>
    <p>Inval arrived Send body succ Send body failed</p>
    <p>Subscription start Subscription caught</p>
    <p>up Subscription end</p>
    <p>Add inval sub Add body sub</p>
    <p>Remove inval sub Remove body sub</p>
    <p>Send body Assign seq</p>
    <p>B_action</p>
    <p>Events AcHons</p>
  </div>
  <div class="page">
    <p>To specify rouHng</p>
    <p>R/Overlog  RouHng language based on Overlog[*]  declaraHve rules fired by events</p>
    <p>Policy wriOen as rules  invoke acHons when events received</p>
    <p>Domainspecific language</p>
    <p>[*] ImplemenHng DeclaraHve Overlays. Boon Thau Loo, Tyson Condie, Joseph M. Hellerstein, Petros ManiaHs, Timothy Roscoe, Ion Stoica. SOSP 2005.</p>
  </div>
  <div class="page">
    <p>Simple example</p>
    <p>On read operaHon block, establish subscripHon to server</p>
    <p>PADS</p>
    <p>RouHng Policy</p>
    <p>Blocking Policy</p>
    <p>Read /foo</p>
    <p>Read Operation Block: /foo</p>
    <p>Add Subscription: Server to me, /foo</p>
  </div>
  <div class="page">
    <p>Simple example</p>
    <p>On read operaHon block, establish subscripHon to server</p>
    <p>addInvalSubscription(@C, S, C, Obj, Catchup) :operationBlock(@C, Obj, Off, Len, BPoint, _), serverId(@C, S), BPoint==ReadNowBlock, Catchup:=CP.</p>
    <p>Table lookup</p>
    <p>CondiHons Assignment</p>
    <p>ResulHng AcHon</p>
    <p>Triggering event</p>
  </div>
  <div class="page">
    <p>PTierStore RouHng</p>
    <p>in0 TRIG readEvent(@X, ObjId) :</p>
    <p>EVT iniHalize(@X), ObjId := &quot;/.parent.</p>
    <p>pp0 TBL parent(@X, P) : RCV parent(@X, P).</p>
    <p>pp1 TRIG readAndWatchEvent(@X, ObjId) : RCV iniHalize(@X), ObjId := &quot;/.subList&quot;.</p>
    <p>pSb0 TBL subscripHon(@X, SS) :</p>
    <p>RCV subscripHon(@X, SS).</p>
    <p>pSb1 ACT addInvalSub(@X, P, X, SS, CTP) :</p>
    <p>RCV subscripHon(@X, SS), TBL parent(@X, P), CTP==&quot;LOG&quot;.</p>
    <p>pSb2 ACT addBodySub(@X, P, X, SS) : RCV subscripHon(@X, SS), TBL parent(@X, P).</p>
    <p>f1 ACT addInvalSub(@X, P, X, SS, CTP) :</p>
    <p>TRIG subEnd(@X, P, X, SS, , Type), TBL parent(@X, P), Type==&quot;Inval&quot;, CTP:=&quot;LOG&quot;.</p>
    <p>f2 ACT addBodySub(@X, P, X, SS) : TRIG subEnd(@X, P, X, SS, , Type),</p>
    <p>TBL parent(@X, P), TYPE==&quot;Body&quot;, CTP:=&quot;LOG&quot;.</p>
    <p>cSb1 ACT addInvalSub(@X, C, X, SS, CTP) :</p>
    <p>TRIG subStart(@X, X, C, , Type), C 6= P, Type == &quot;Inval&quot;, SS := &quot;/*&quot;, CTP := &quot;LOG&quot;.</p>
    <p>cSb2 ACT addBodySub(@X, C, X, SS, CTP) :</p>
    <p>TRIG subStart(@X, X, C, , Type), C 6= P, Type == &quot;Body&quot;, SS := &quot;/*&quot;.</p>
    <p>dtn1 ACT addInvalSub(@X, R, X, SS, CTP) : EVT relayNodeArrives(@X, R),</p>
    <p>TBL subscripHon(@X, SS), CTP==&quot;LOG&quot;.</p>
    <p>dtn2 ACT addBodySub(@X, R, X, SS) :</p>
    <p>EVT relayNodeArrives(@X, R), TBL subscripHon(@X, SS), CTP==&quot;LOG&quot;.</p>
    <p>dtn3 ACT addInvalSub(@X, X, R, SS, CTP) : EVT relayNodeArrives(@X, R),</p>
    <p>SS:=&quot;/*&quot;, CTP==&quot;LOG&quot;.</p>
    <p>dtn4 ACT addBodySub(@X, X, R, SS) : EVT relayNodeArrives(@X, R), SS:=&quot;/*&quot;, CTP==&quot;LOG&quot;.</p>
    <p>Parent Config</p>
    <p>PublicaHons Config</p>
    <p>SubscripHons from parent</p>
    <p>SubscripHons from child</p>
    <p>DTN support</p>
    <p>[*] TierStore: A Distributed Storage System for Challenged Networks. M. Demmer, B. Du, and E. Brewer. FAST 2008.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>PADS approach</p>
    <p>Policy  RouHng  Blocking</p>
    <p>EvaluaHon</p>
  </div>
  <div class="page">
    <p>Blocking policy</p>
    <p>Is it safe to access local data?</p>
    <p>Consistency</p>
    <p>What version of data can be accessed?</p>
    <p>Durability</p>
    <p>Whether updates have propagated to safe locaHons?</p>
    <p>Block unHl semanHcs guaranteed</p>
  </div>
  <div class="page">
    <p>How to specify blocking policy?</p>
    <p>Where to block?</p>
    <p>At data access points</p>
    <p>What to specify?</p>
    <p>List of condiHons</p>
    <p>PADS provides</p>
    <p>4 builtin condiHons (local bookkeeping )</p>
    <p>1 extensible condiHon</p>
    <p>PADS</p>
    <p>Read Write</p>
    <p>Update</p>
    <p>Is valid Is causal</p>
    <p>Is sequenced Max staleness</p>
    <p>R_Msg</p>
  </div>
  <div class="page">
    <p>Blocking policy examples</p>
    <p>Consistency:  Read only causal data Read at block: Is_causal</p>
    <p>Durability:</p>
    <p>Block write unHl update reaches server Write after block : R_Msg (ackFromServer)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>PADS approach</p>
    <p>Policy  RouHng  Blocking</p>
    <p>EvaluaHon</p>
  </div>
  <div class="page">
    <p>Is PADS a beOer way to build distributed storage systems?</p>
    <p>General enough?  Easy to use?  Easy to adapt  Overheads?</p>
  </div>
  <div class="page">
    <p>General enough?</p>
    <p>Update Update Update Update Inval Inval Inval Inval v. update progagaHon</p>
    <p>Disconnected operaHon</p>
    <p>Leases</p>
    <p>Callbacks</p>
    <p>Mono Reads</p>
    <p>Causal Lineari zable</p>
    <p>Mono Reads</p>
    <p>Seque nHal</p>
    <p>Open/ Close</p>
    <p>Seque nHal</p>
    <p>Consistency</p>
    <p>Demand caching</p>
    <p>ParHal Full Full ParHal Full ParHal ParHal ReplicaHon</p>
    <p>AdHoc Ad Hoc</p>
    <p>Chains Tree Client/ Server</p>
    <p>Client/ Server</p>
    <p>Client/ Server</p>
    <p>Topology</p>
    <p>Pangaea Bayou Chain Repl</p>
    <p>Tier Store</p>
    <p>TRIP Coda FCS</p>
    <p>Prefetching</p>
    <p>Inval</p>
    <p>Seque nHal</p>
    <p>ParHal</p>
    <p>Client/ Server</p>
    <p>SCS</p>
    <p>CooperaHve caching</p>
  </div>
  <div class="page">
    <p>Easy to use?</p>
    <p>System</p>
    <p>PPangaea</p>
    <p>PBayou</p>
    <p>PTierStore</p>
    <p>PCoda</p>
    <p>PTRIP</p>
    <p>Rou5ng Rules</p>
    <p>Blocking Condi5ons</p>
    <p>PChain Rep 75 5</p>
    <p>PFCS 43 6</p>
    <p>PBayou* 9 3</p>
    <p>PCoda* 44 5</p>
    <p>PTierStore*</p>
    <p>PTRIP*</p>
  </div>
  <div class="page">
    <p>Easy to adapt?</p>
    <p>Coda  Restricts communicaHon to clientserver only  Cannot take advantage of nearby peers</p>
    <p>Added cooperaHve</p>
    <p>caching in</p>
    <p>Read Latency</p>
    <p>(ms)</p>
  </div>
  <div class="page">
    <p>Overheads?</p>
    <p>Kilobytes transferred</p>
    <p>Number of updates</p>
  </div>
  <div class="page">
    <p>Read/Write performance</p>
    <p>Time (ms)</p>
  </div>
  <div class="page">
    <p>Take away lesson</p>
  </div>
  <div class="page">
    <p>Distributed data storage systems</p>
    <p>RouHng Blocking</p>
    <p>Update propagaHon</p>
    <p>Consistency Durability</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
  <div class="page">
    <p>Easy to adapt?</p>
    <p>Bayou  Mechanisms only support full replicaHon</p>
    <p>Add small device support</p>
    <p>Change 4 rules Kilobytes</p>
    <p>Transferred</p>
  </div>
  <div class="page">
    <p>Real enough?</p>
  </div>
  <div class="page">
    <p>TierStore</p>
    <p>Data storage for developing environments</p>
    <p>Publishsubscribe system  Every node subscribes to publicaHons</p>
    <p>Hierarchical topology  Updates flood down the tree  Child updates go up the tree to the root</p>
    <p>[*] TierStore: A Distributed Storage System for Challenged Networks. M. Demmer, B. Du, and E. Brewer. FAST 2008.</p>
  </div>
</Presentation>
