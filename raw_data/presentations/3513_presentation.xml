<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>{ depth: 108421, errorMessage: &quot;too much recursion&quot;, errorName: &quot;InternalError&quot;, errorStacklength: 6912 }</p>
    <p>{ depth: 11416, errorMessage: &quot;Maximum call stack size exceeded&quot;, errorName: &quot;RangeError&quot;, errorStacklength: 1723 }</p>
  </div>
  <div class="page">
    <p>eval.toString()</p>
    <p>&quot;function eval() {</p>
    <p>[native code]</p>
    <p>}&quot;</p>
    <p>&quot;function eval() { [native code] }&quot;</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>HTMLCanvasElement.prototype.toDataURL.toString();</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Random Agent Spoofer 1.0 0.55</p>
    <p>User agent spoofers 1.0 0.86</p>
    <p>Canvas Defender 1.0 0.0</p>
    <p>Firefox protection 1.0 0.0</p>
    <p>Canvas FP Block 1.0 0.0</p>
    <p>FP-Random 1.0 0.0</p>
    <p>Brave 1.0 0.0</p>
    <p>No countermeasure 1.0 1.0</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>&gt; HTMLCanvasElement.prototype.toDataURL.toString();</p>
    <p>'function () {</p>
    <p>var width = this.width;</p>
    <p>var height = this.height;</p>
    <p>var context = this.getContext(&quot;2d&quot;);</p>
    <p>var imageData = context.getImageData(0, 0, width, height);</p>
    <p>for (var i = 0; i &lt; height; i++) {</p>
    <p>...</p>
    <p>}</p>
    <p>context.putImageData(imageData, 0, 0);</p>
    <p>showNotification();</p>
    <p>return old.apply(this, arguments);</p>
    <p>}'</p>
  </div>
  <div class="page">
    <p>const getOriginalFunction = Function.prototype.call.bind(</p>
    <p>Function.prototype.bind,</p>
    <p>Function.prototype.call</p>
    <p>);</p>
    <p>const originalToDataURL =</p>
    <p>getOriginalFunction(HTMLCanvasElement.prototype.toDataURL);</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
</Presentation>
