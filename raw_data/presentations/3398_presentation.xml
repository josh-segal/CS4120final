<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AWARE: Preventing Abuse of Privacy-Sensitive Sensors via Operation Bindings</p>
    <p>Giuseppe Petracca gxp18@cse.psu.edu</p>
    <p>The Pennsylvania State University School of Electrical Engineering and Computer Science</p>
    <p>Institute for Networking and Security Research</p>
    <p>Ahamad-Atamli Reineh atamli@cs.ox.ac.uk</p>
    <p>University of Oxford, UK Dept. of Electrical Engineering and Computer Science</p>
    <p>Yuqiong Sun yuqiong_sun@symantec.com Symantec Research Labs, US</p>
    <p>Jens Grossklags jens.grossklags@in.tum.de</p>
    <p>Technical University of Munich, DE</p>
    <p>Trent Jaeger tjaeger@cse.psu.edu</p>
    <p>The Pennsylvania State University School of Electrical Engineering and Computer Science</p>
    <p>Institute for Networking and Security Research</p>
  </div>
  <div class="page">
    <p>Increasing Availability of Privacy-Sensitive Sensors</p>
    <p>Controlling when applications may use privacy-sensitive sensors (i.e., cameras, microphones, and touch screens):</p>
    <p>BankingScreen Sharing</p>
    <p>Entertainment</p>
  </div>
  <div class="page">
    <p>Abuse of Privacy-Sensitive Sensors</p>
  </div>
  <div class="page">
    <p>Real World Incidents</p>
  </div>
  <div class="page">
    <p>Current Authorization Mechanisms</p>
    <p>Install-Time First-Use</p>
    <p>Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not whey the install the app!</p>
  </div>
  <div class="page">
    <p>Shortcomings</p>
  </div>
  <div class="page">
    <p>Shortcomings</p>
  </div>
  <div class="page">
    <p>Shortcomings</p>
  </div>
  <div class="page">
    <p>Proposed Defenses</p>
    <p>Input-Driven Access Control (IDAC) Authorize an operation request that immediately</p>
    <p>follows a user input event</p>
    <p>User inputs associated with operation authorizations</p>
    <p>Binding between the user inputs and the authorized operations still unknown to the system!</p>
  </div>
  <div class="page">
    <p>Proposed Defenses</p>
    <p>User-Driven Access Control (UDAC) Applications must use system-defined gadgets</p>
    <p>associated with particular operations</p>
    <p>Binding between the user input and the authorized operation explicit to the system</p>
    <p>Binding still not explicit to the user!</p>
  </div>
  <div class="page">
    <p>Proposed Defenses</p>
    <p>User-Driven Access Control (UDAC) Applications must use system-defined gadgets</p>
    <p>associated with particular operations</p>
    <p>Com pati</p>
    <p>bilit y Is</p>
    <p>sue</p>
  </div>
  <div class="page">
    <p>Proposed Defenses</p>
    <p>No C usto</p>
    <p>miz atio</p>
    <p>n 3,00</p>
    <p>pps</p>
    <p>Nee d Re</p>
    <p>des ign</p>
    <p>User-Driven Access Control (UDAC) Applications must use system-defined gadgets</p>
    <p>associated with particular operations</p>
  </div>
  <div class="page">
    <p>Limitations of Prior Work</p>
    <p>Leverage the user as weak link to circumvent protection mechanisms! User Interface Attacks</p>
    <p>User may fail to: Identify the application requesting sensor access Recognize subtle changes in the Graphic User Interface (GUI) Understand the operation granted by a particular gadget</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Bait-and-Switch)</p>
    <p>Window A x</p>
    <p>Interac(on #1</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Bait-and-Switch)</p>
    <p>Window A x</p>
    <p>Interac(on #2</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Bait-and-Switch)</p>
    <p>Window A x</p>
    <p>Interac(on #3</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Bait-and-Switch)</p>
    <p>Window A x</p>
    <p>Interac(on #4</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Bait-and-Switch)</p>
    <p>Window A x</p>
    <p>Interac(on #5</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Bait-and-Switch)</p>
    <p>Window A x</p>
    <p>Interac(on #4</p>
    <p>Bait-and-Switch A:ack</p>
    <p>The applica*on maintained the windowing display context</p>
    <p>but switched the widget to record audio</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Application Spoofing)</p>
    <p>Window A x</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Application Spoofing)</p>
    <p>A click by the user allows the Legi(mate App to record audio</p>
    <p>Window A x</p>
  </div>
  <div class="page">
    <p>Use Interface Attacks (Application Spoofing)</p>
    <p>Window A x</p>
    <p>A click by the user allows the Spoofing App to record audio</p>
    <p>Applica(on Spoofing A:ack</p>
  </div>
  <div class="page">
    <p>Research Objectives</p>
    <p>Prevent User Interface Attacks</p>
    <p>Maintain a low authorization effort for the user</p>
    <p>Ensure compatibility with existing applications</p>
    <p>Ensure a performance overhead not perceivable by the user</p>
  </div>
  <div class="page">
    <p>Preventing Operation Switching Attacks</p>
    <p>Goal: Prevent applications from changing the operation associated to a widget arbitrarily</p>
    <p>Window A x</p>
    <p>Take Photo Record Video</p>
  </div>
  <div class="page">
    <p>Preventing Operation Switching Attacks</p>
    <p>Goal: Prevent applications from changing the operation associated to a widget arbitrarily</p>
    <p>Window A x</p>
    <p>Insights: Bind each user input event (e) with the widget (w) displayed on the screen by the application (app)</p>
  </div>
  <div class="page">
    <p>Preventing Operation Switching Attacks</p>
    <p>Goal: Prevent applications from changing the operation associated to a widget arbitrarily</p>
    <p>Window A x</p>
    <p>Insights: Bind each user input event (e) with the widget (w) displayed on the screen by the application (app) Intercept the operation request (op) then bind it to the application identity (app) and the set of sensors (S) targeted by the operation</p>
    <p>capturePhoto()</p>
  </div>
  <div class="page">
    <p>Preventing Operation Switching Attacks</p>
    <p>Goal: Prevent applications from changing the operation associated to a widget arbitrarily</p>
    <p>Window A x Insights:</p>
    <p>Bind each user input event (e) with the widget (w) displayed on the screen by the application (app) Intercept the operation request (op) then bind it to the application identity (app) and the set of sensors (S) targeted by the operation Request the user to authorize the binding request explicitly</p>
  </div>
  <div class="page">
    <p>AWAREs Explicit Binding Request</p>
    <p>AWare Binding Request Allow Instagram to use the front Camera to take Pictures when pressing ?</p>
    <p>Allow Deny</p>
    <p>app (Application ID)</p>
    <p>Currently (First-Use)</p>
    <p>AWARE</p>
  </div>
  <div class="page">
    <p>AWAREs Explicit Binding Request</p>
    <p>S (Set of Sensors)</p>
    <p>AWare Binding Request Allow Instagram to use the front Camera to take Pictures when pressing ?</p>
    <p>Allow Deny</p>
  </div>
  <div class="page">
    <p>AWAREs Explicit Binding Request</p>
    <p>AWare Binding Request Allow Instagram to use the front Camera to take Pictures when pressing ?</p>
    <p>Allow Deny</p>
    <p>op (Requested Operation)</p>
  </div>
  <div class="page">
    <p>AWAREs Explicit Binding Request</p>
    <p>AWare Binding Request Allow Instagram to use the front Camera to take Pictures when pressing ?</p>
    <p>Allow Deny e</p>
    <p>(Input Event)</p>
  </div>
  <div class="page">
    <p>AWAREs Explicit Binding Request</p>
    <p>AWare Binding Request Allow Instagram to use the front Camera to take Pictures when pressing ?</p>
    <p>Allow Deny w (Widget)</p>
  </div>
  <div class="page">
    <p>Effect: Enable the user to verify the association between the operation being authorized and the widget (w) used to initiate the operation</p>
    <p>Advantages: Avoid authorizing an unwanted operation by a user input event (IDAC) Apps are allowed to choose the widgets to associate with particular operations (UDAC)</p>
    <p>Preventing Operation Switching Attacks</p>
    <p>Window A x</p>
    <p>Goal: Prevent applications from changing the operation associated to a widget arbitrarily</p>
  </div>
  <div class="page">
    <p>Preventing Bait-and-Switch Attacks</p>
    <p>Goal: Prevent applications from changing the user interface configuration for a widget</p>
    <p>Window A x</p>
    <p>capturePhoto()</p>
  </div>
  <div class="page">
    <p>Preventing Bait-and-Switch Attacks</p>
    <p>Goal: Prevent applications from changing the user interface configuration for a widget</p>
    <p>Window A x</p>
    <p>Insights: Bind the operation request (op) with the user interface configuration (c) used to display the widget (w) Define a display context as set of structural features of the most enclosing activity window containing the widget (w)</p>
    <p>capturePhoto()</p>
    <p>widgets position background</p>
    <p>border</p>
    <p>window title</p>
    <p>widgets size</p>
  </div>
  <div class="page">
    <p>Preventing Bait-and-Switch Attacks</p>
    <p>Goal: Prevent applications from changing the user interface configuration for a widget</p>
    <p>Window A x</p>
    <p>Effects: Identify instance of the same window (i.e., display context) with a different widget Identify same widget presented in a different window (i.e., display context)</p>
    <p>Advantage: User does not need to check for subtle changes to the widgets or their display context (IDAC and UDAC). Changes detected and flagged by the system automatically.</p>
    <p>Window A x</p>
    <p>Window A x Window A x</p>
  </div>
  <div class="page">
    <p>Preventing Application Spoofing Attacks</p>
    <p>Goal: Prevent applications from replacing the foreground activity window of another application</p>
    <p>Window A x</p>
    <p>Window A x</p>
    <p>Activity Window Hijacking</p>
  </div>
  <div class="page">
    <p>Preventing Application Spoofing Attacks</p>
    <p>Goal: Prevent applications from replacing the foreground activity window of another application</p>
    <p>Insight: Construct an Activity Window Call Graph (G) where nodes represent activity windows and edges represent enabled transitions (i.e., user inputs or system events)</p>
    <p>e1 e2 e3</p>
    <p>e5</p>
    <p>a_w1 a_w2</p>
    <p>bga_w4</p>
    <p>{w1,,w2}</p>
    <p>{w3}</p>
    <p>a_w3</p>
    <p>e4</p>
    <p>e6</p>
    <p>e7e8</p>
  </div>
  <div class="page">
    <p>Preventing Application Spoofing Attacks</p>
    <p>Goal: Prevent applications from replacing the foreground activity window of another application</p>
    <p>Effects: Activity Window Call Graph (G) built while the application runs Record the relationships among windows used by an application</p>
    <p>Advantage: Identify and block activity window hijacking (IDAC and UDAC)</p>
    <p>Window A x</p>
    <p>Window A x</p>
  </div>
  <div class="page">
    <p>AWAREs Operation Binding</p>
    <p>(app, S, op, e, w, c)</p>
    <p>app = application associated with widget and operation request S = set of sensors targeted by the request</p>
    <p>op = operation being requested e = user input event</p>
    <p>w = user interface widget c = user interface configuration containing the widget + activity window call graph</p>
    <p>AWare Binding Request Allow Instagram to use the front Camera to take Pictures when pressing ?</p>
    <p>Allow Deny</p>
    <p>AWARE: Authorization Framework extending OS middleware to make access to privacy-sensitive sensors explicit to both the system and the user</p>
    <p>System User</p>
  </div>
  <div class="page">
    <p>Maintain a Low Authorization Effort for the User</p>
    <p>Insights: Use a caching mechanism for operation bindings Remove an operation binding from cache if an app changes the way it elicits an operation</p>
    <p>Effect: The application will be automatically allowed to perform the requested operation on the set of sensors whenever the user produces the same input event using the same widget within the same user interface configuration</p>
    <p>Advantages: Require an explicit user's authorization only the first time an operation binding is identified (First-Use) Ensure that operation bindings do not become stale Prevent an operation from being authorized in multiple ways Ensure usability</p>
    <p>Goal: Limit the number of explicit authorizations by the user</p>
  </div>
  <div class="page">
    <p>Ensure Compatibility with Existing Apps</p>
    <p>Insights: No external libraries No code annotation No app code rewriting Dynamic monitoring and creation of operation bindings</p>
    <p>Effect: Can be integrated with existing off-the-shelf operating systems</p>
    <p>Advantages: Facilitate adoption and deployability No effort or burden for app developers</p>
    <p>Goal: Allow applications to choose how they elicit user approval for use of a sensor</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation</p>
    <p>Prototyped (Android OS 6.0.1_r5) Tested (Nexus 5 and Nexus 5X smartphones)</p>
    <p>Research Questions: To what degree is the AWARE operation binding concept assisting the users in avoiding attacks? (Effectiveness)</p>
    <p>What is the decision overhead imposed to users due to per-configuration access control? (Usability)</p>
    <p>How many existing apps malfunctioned due to the integration of AWARE? (Compatibility)</p>
    <p>What is the performance overhead imposed by AWARE for the operation binding construction and enforcement? (Performance)</p>
  </div>
  <div class="page">
    <p>Effectiveness</p>
    <p>To what degree is the AWARE operation binding concept assisting the users in avoiding attacks?</p>
    <p>Laboratory-Based User Study (90 Participants)</p>
    <p>Groups: Install-Time, First-Use, Input-Driven, System-Defined Gadgets, and AWARE</p>
  </div>
  <div class="page">
    <p>Effectiveness</p>
    <p>To what degree is the AWARE operation binding concept assisting the users in avoiding attacks?</p>
    <p>Laboratory-Based User Study (90 Participants)</p>
    <p>Groups: Install-Time, First-Use, Input-Driven, System-Defined Gadgets, and AWARE</p>
  </div>
  <div class="page">
    <p>Effectiveness</p>
    <p>To what degree is the AWARE operation binding concept assisting the users in avoiding attacks?</p>
    <p>Experimental Results: TASK 1: Operation performed by app not visible</p>
    <p>(Exception for Access Control Gadgets) Attack Prevention Rate: Others 2% vs AWARE 100%</p>
    <p>TASK 2 and TASK 3: Users were successfully tricked by switching the user interface configuration!</p>
    <p>Attack Prevention Rate: Others 2% vs AWARE 93%</p>
    <p>TASK 4: Real identity of the app performing the operation was not visible to users</p>
    <p>Attack Prevention Rate: Others 6% vs AWARE 100%</p>
  </div>
  <div class="page">
    <p>Usability</p>
    <p>What is the decision overhead imposed to users due to per-configuration access control?</p>
    <p>Field-Based User Study (24 Participants) 21 apps (7 categories)* 1 week</p>
    <p>(Comparison with First-Use)</p>
    <p>*www.statistica.com</p>
  </div>
  <div class="page">
    <p>Compatibility</p>
    <p>How many existing apps malfunctioned due to the integration of AWARE?</p>
    <p>Android Compatibility Test Suite (CTS): 1,000 apps (Google Play) 13 hours and 28 minutes</p>
    <p>Experimental Results: 126,681 passed tests over 126,686 [Viber] Camera and microphone probing at reboot (No impact on video or voice calls)</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>What is the performance overhead imposed by AWARE for the operation binding construction and enforcement?</p>
    <p>Android UI/Application Exerciser Monkey: 1,000 apps (Google Play) Nexus 5 and Nexus 5X</p>
    <p>Microbenchmark: Access requests for operation targeting privacy-sensitive sensors 10,000 operations</p>
    <p>Experimental Results: 0.33% system-wide performance overhead About 3 MB of memory for the operation binding cache and window call graphs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Authorization of sensor operations explicit to both system and user (Operation Binding + Explicit Authorization) Up to 100% user interface attack prevention (only up to 6% with alternative approaches)</p>
    <p>Low user effort (Caching of Bindings when the user interface configuration is same for the same operation) 4 explicit authorizations per-application on average</p>
    <p>Compatible with existing applications (No app modification or redesign) Only 5 minor compatibility issues out of 1,000 tested apps</p>
    <p>Negligible Performance Overhead (limited number of authorization hooks and quick retrieval of bindings) 0.33% performance overhead and 3 MB of cache</p>
  </div>
  <div class="page">
    <p>Thank You For Your Attention!</p>
    <p>Giuseppe Petracca Ph.D. Candidate</p>
    <p>gxp18@cse.psu.edu https//sites.psu.edu/petracca/</p>
    <p>Source Code: https:/github.com/gxp18/AWare</p>
    <p>Research Funded by:</p>
  </div>
  <div class="page">
    <p>Approach Overview</p>
    <p>AWARE Authorization Workflow</p>
  </div>
</Presentation>
