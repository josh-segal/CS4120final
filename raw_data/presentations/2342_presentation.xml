<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NVMOVE</p>
    <p>NVMOVE: Helping Programmers Move to Byte-based Persistence</p>
    <p>Himanshu Chauhan</p>
    <p>with Irina Calciu, Vijay Chidambaram,</p>
    <p>Eric Schkufza, Onur Mutlu, Pratap Subrahmanyam</p>
  </div>
  <div class="page">
    <p>Fast, but volatile.</p>
    <p>Persistent, but slow.</p>
    <p>Cache</p>
    <p>DRAM</p>
    <p>SSD</p>
    <p>Hard Disk</p>
    <p>Critical Performance Gap</p>
  </div>
  <div class="page">
    <p>Fast, but volatile.</p>
    <p>Persistent, but slow.</p>
    <p>Cache</p>
    <p>DRAM</p>
    <p>SSD</p>
    <p>Hard Disk</p>
    <p>Non-Volatile Memory Fast, and persistent.</p>
  </div>
  <div class="page">
    <p>Cache</p>
    <p>DRAM</p>
    <p>SSD</p>
    <p>Hard Disk</p>
  </div>
  <div class="page">
    <p>Persistent Programs</p>
    <p>typedef struct {</p>
    <p>} node</p>
  </div>
  <div class="page">
    <p>Persistence Today Persistence Today</p>
    <p>In-memory binary search tree</p>
    <p>Flat Buffer</p>
    <p>File</p>
    <p>Block-based Storage</p>
    <p>Serialization</p>
    <p>Block-sized Writes</p>
    <p>sprintf(buf, %d:%s, node-&gt;id, node-&gt;value)</p>
    <p>write(fd, buf, sizeof(buf)) fsync(fd)</p>
  </div>
  <div class="page">
    <p>Persistence with NVM Ideal Persistence on NVM</p>
    <p>In-memory binary search tree</p>
    <p>Byte-based NVM Byte-sized Writes</p>
    <p>node-&gt;id = 10 pmemcopy(node-&gt;value, myvalue)</p>
    <p>pmemobj_persist(node)</p>
  </div>
  <div class="page">
    <p>Changing Persistence Code</p>
    <p>/* allocate from volatile memory*/ node n* = malloc(sizeof())</p>
    <p>node-&gt;value = val //volatile update</p>
    <p>/* allocate from non-volatile memory*/ node n* = pmalloc(sizeof())</p>
    <p>node-&gt;value = val //persistent update</p>
    <p>/* flush cache and commit*/ __cache_flush + __commit</p>
    <p>Present NVM</p>
    <p>/* persist to block-storage*/ char *buf= malloc(sizeof()); int fd = open(&quot;data.db&quot;,O_WRITE); sprintf(buf,&quot;&quot;, node-&gt;id,</p>
    <p>node-&gt;value); write(fd, buf, sizeof(buf));</p>
  </div>
  <div class="page">
    <p>Porting to NVM: Tedious</p>
    <p>Identify data structures that should be on NVM</p>
    <p>Update them in a consistent manner</p>
    <p>Redis: simple key-value store (~50K LOC) - Industrial effort to port Redis is on-going after two years - Open-source effort to port Redis has minimum functionality</p>
  </div>
  <div class="page">
    <p>Changing Persistence Code</p>
    <p>/* allocate from volatile memory*/ node n* = malloc(sizeof())</p>
    <p>node-&gt;value = val //volatile update</p>
    <p>/* allocate from non-volatile memory*/ node n* = pmalloc(sizeof())</p>
    <p>node-&gt;value = val //persistent update</p>
    <p>/* flush cache and commit*/ __cache_flush + __commit</p>
    <p>Present NVM</p>
    <p>/* persist to block-storage*/ char *buf= malloc(sizeof()); int fd = open(&quot;data.db&quot;,O_WRITE); sprintf(buf,&quot;&quot;, node-&gt;id,</p>
    <p>node-&gt;value); write(fd, buf, sizeof(buf));</p>
  </div>
  <div class="page">
    <p>Goal: Port existing applications to</p>
    <p>NVM with minimal programmer involvement.</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>By Kiko Alario Salom [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons</p>
  </div>
  <div class="page">
    <p>Persistent Types in Source</p>
    <p>User defined source types (structs in C) that are persisted to block-storage.</p>
    <p>Block Storage</p>
    <p>Application Code</p>
  </div>
  <div class="page">
    <p>First Step: Identify persistent types in</p>
    <p>application source.</p>
  </div>
  <div class="page">
    <p>Solution: Static Analysis</p>
  </div>
  <div class="page">
    <p>Current Focus: C</p>
    <p>types = structs</p>
  </div>
  <div class="page">
    <p>Block Storage</p>
    <p>Application Code</p>
    <p>write system call</p>
  </div>
  <div class="page">
    <p>write system call</p>
    <p>/* persist to block-storage*/ char *buf= malloc()) int fd = open()</p>
    <p>sprintf(buf,,node-&gt;value)</p>
    <p>write(fd, buf, )</p>
    <p>node *n = malloc(sizeof(node))</p>
    <p>iter *it = malloc(sizeof(iter))</p>
    <p>node</p>
  </div>
  <div class="page">
    <p>write system call</p>
    <p>/* persist to block-storage*/ char *buf= malloc()) int fd = open()</p>
    <p>sprintf(buf,,node-&gt;value)</p>
    <p>write(fd, buf, )</p>
    <p>node *n = malloc(sizeof(node))</p>
    <p>iter *it = malloc(sizeof(iter))</p>
    <p>node</p>
  </div>
  <div class="page">
    <p>iter</p>
    <p>write system call</p>
    <p>/* persist to block-storage*/ char *buf= malloc()) int fd = open()</p>
    <p>sprintf(buf,,node-&gt;value)</p>
    <p>write(fd, buf, )</p>
    <p>node *n = malloc(sizeof(node))</p>
    <p>iter *it = malloc(sizeof(iter))</p>
    <p>node</p>
  </div>
  <div class="page">
    <p>write system call /* persist to block-storage*/</p>
    <p>write(fd, buf, )</p>
    <p>node</p>
    <p>/* write to error stream*/</p>
    <p>write(stderr, All is lost., )</p>
    <p>/* write to network socket*/</p>
    <p>write(socket, 404, )</p>
    <p>Storage NetworkPipe</p>
  </div>
  <div class="page">
    <p>Block Storage</p>
    <p>Save to block-storage</p>
    <p>node</p>
  </div>
  <div class="page">
    <p>Block Storage</p>
    <p>Save to block-storage Load/recover</p>
    <p>node</p>
  </div>
  <div class="page">
    <p>rdbLoad is the load/recovery function.</p>
  </div>
  <div class="page">
    <p>Mark every type that can be created during the recovery.</p>
    <p>*if defined in application source.</p>
  </div>
  <div class="page">
    <p>rdbLoad</p>
    <p>external library</p>
    <p>Call Graph from Load</p>
  </div>
  <div class="page">
    <p>rdbLoad</p>
    <p>external library</p>
    <p>BFS on Call Graph from Load</p>
  </div>
  <div class="page">
    <p>external library</p>
    <p>BFS on Call Graph from Load</p>
    <p>Application type created/modified</p>
  </div>
  <div class="page">
    <p>NVMovE Implementation</p>
    <p>Clang - Frontend Parsing</p>
    <p>Parse AST and Generate Call Graph - Find all statements that create/modify ap plication types in graph</p>
    <p>Currently supports C applications</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>In-memory data structure store - strings, hashes, lists, sets, indexes</p>
    <p>On-disk persistence  data-snapshots(RDB),</p>
    <p>command-logging (AOF)</p>
    <p>~50K lines-of-code</p>
  </div>
  <div class="page">
    <p>Identification Accuracy</p>
  </div>
  <div class="page">
    <p>Identification Accuracy</p>
  </div>
  <div class="page">
    <p>Identification Accuracy</p>
  </div>
  <div class="page">
    <p>Identification Accuracy</p>
    <p>Total types 122 NVMOVE identified persistent types 25 True positives (manually identified) 14 False positives 11 False negatives 0</p>
  </div>
  <div class="page">
    <p>Performance Impact</p>
  </div>
  <div class="page">
    <p>Redis Persistence</p>
    <p>Snapshot (RDB) Logging (AOF)</p>
    <p>Data snapshot per</p>
    <p>second</p>
    <p>Not fully durable</p>
    <p>Append each update</p>
    <p>command to a file</p>
    <p>Slow</p>
    <p>Both performed by forked background process.</p>
  </div>
  <div class="page">
    <p>NVM Emulation</p>
    <p>Emulate allocation of NVMovE identified</p>
    <p>types on NVM heap</p>
    <p>- Slow and Fast NVM</p>
    <p>- Inject delays for load/store of all NVM allocated types.</p>
    <p>- Worst-case performance estimate.</p>
    <p>Compare emulated NVM throughput against logging, and snapshot based persistence.</p>
  </div>
  <div class="page">
    <p>YCSB Benchmark Results</p>
    <p>Fraction of in-memory throughput</p>
    <p>write-heavy (90% updated, 10% read ops)</p>
    <p>Logging (disk) Logging (ssd) NVM (slow) NVM (fast) Snapshot (ssd)</p>
    <p>in-memory (=1.0)</p>
    <p>Possible Data loss 111 MB</p>
  </div>
  <div class="page">
    <p>Performance without False-Positives</p>
    <p>Speedup in throughput</p>
    <p>Slow NVM</p>
    <p>Fast NVM</p>
  </div>
  <div class="page">
    <p>First Step: Identify persistent types in</p>
    <p>application source.</p>
  </div>
  <div class="page">
    <p>Next steps:</p>
    <p>Improve identification accuracy.  Evaluate on other applications.</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Throughputs (ops/sec)</p>
    <p>readheavy balance writeheavy</p>
    <p>PCM 28399 25,302 9759</p>
    <p>STTRam 41213 38,048 12155</p>
    <p>AoF (disk) 15634 6,457 2868</p>
    <p>AoF (SSD) 27946 17,612 6605</p>
    <p>RDB 46355 47,609 26605</p>
    <p>Memory 50163 48,360 27156</p>
  </div>
  <div class="page">
    <p>NVM Emulation</p>
    <p>Read Latency</p>
    <p>Cache-line Flush Latency</p>
    <p>PCOMMIT Latency</p>
    <p>STT-RAM (Fast NVM)</p>
    <p>PCM (Slow NVM)</p>
    <p>*Xu &amp; Swanson, NOVA: A Log-structured File System for Hybrid Volatile/Non-volatile Main Memories, FAST16.</p>
  </div>
  <div class="page">
    <p>YCSB Benchmark Results</p>
    <p>Fraction of in-memory throughput</p>
    <p>in-memory (=1.0)</p>
    <p>PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB</p>
    <p>read-heavy</p>
    <p>PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB NVM</p>
  </div>
  <div class="page">
    <p>YCSB Benchmark Results</p>
    <p>Fraction of in-memory throughput</p>
    <p>in-memory (=1.0)</p>
    <p>PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB</p>
    <p>read-heavy balanced</p>
    <p>NVM NVM</p>
  </div>
  <div class="page">
    <p>YCSB Benchmark Results</p>
    <p>Fraction of in-memory throughput</p>
    <p>in-memory (=1.0)</p>
    <p>PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>RDB</p>
    <p>read-heavy balanced write-heavy</p>
    <p>NVM NVM NVM</p>
  </div>
  <div class="page">
    <p>RDB Data Loss</p>
    <p>read-heavy balanced write-heavy</p>
  </div>
  <div class="page">
    <p>Performance without False-Positives</p>
    <p>Speedup in</p>
    <p>throughput</p>
    <p>PCM STT PCM STT AOF(disk) AOF (ssd)</p>
    <p>PCM STT AOF (disk)</p>
    <p>AOF (ssd)</p>
    <p>read-heavy balanced write-heavy</p>
    <p>RDB (disk)</p>
    <p>RDB (disk)</p>
    <p>PCM PCM PCMSTT STT STT</p>
  </div>
</Presentation>
