<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Stealthy Tracking of Autonomous Vehicles with Cache Side Channels</p>
    <p>Mulong Luo, Andrew C. Myers, G. Edward Suh Cornell University 29th USENIX Security Symposium 2020</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Privacy in Cyber-Physical Systems (CPS)  Autonomous vehicles and other CPS (e.g.</p>
    <p>UAV) are widely used</p>
    <p>Privacy in CPS involves in physical information (e.g., location)</p>
    <p>CPS as computer systems, are vulnerable to cache side-channel attack</p>
    <p>Autonomous cars 1</p>
    <p>UAV 2</p>
  </div>
  <div class="page">
    <p>We identified CPS as victims that can expose physical privacy information  Traditional victims of cache side-channel attack usually leaks</p>
    <p>non-physical information (e.g., crypto keys)</p>
    <p>We showed adaptive algorithms whose computation depends on inputs in CPS are vulnerable to cache side-channel attack</p>
    <p>We demonstrated a concrete example of cache side-channel attack on autonomous vehicles for route prediction</p>
    <p>Main Contributions</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Threat Model  Attack software shares</p>
    <p>computer with victim software on the vehicle under attack</p>
    <p>Attack software has no permission to access location service (e.g., GPS)</p>
    <p>Attack software uses cache side-channel attack to infer the route of the vehicle from a set of known routes</p>
    <p>Hospital</p>
    <p>Airport</p>
    <p>Restaurant</p>
    <p>Attack software</p>
    <p>Cache Computer</p>
    <p>Home</p>
    <p>Victim software GPS</p>
    <p>Denied!</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Autonomous Vehicle Systems  Main components</p>
    <p>Sensors  Actuators  Computer</p>
    <p>Major navigation tasks  Estimation/localization</p>
    <p>software  Control/decision software</p>
    <p>GPS driver</p>
    <p>Lidar driver</p>
    <p>Controller driver</p>
    <p>State estimation</p>
    <p>Path planning</p>
    <p>Collision avoidance</p>
    <p>LTE/5G driver</p>
    <p>Infotainment</p>
    <p>Video recording</p>
    <p>Onboard computer</p>
    <p>Navigation stack</p>
    <p>OS kernel space</p>
    <p>Utility stack</p>
    <p>Remote control server</p>
    <p>Camera driver</p>
    <p>GPS receiver</p>
    <p>Lidar</p>
    <p>Camera</p>
    <p>LTE/5G Athena</p>
    <p>Steering controller</p>
    <p>Throttle controller</p>
    <p>Brake controller</p>
    <p>Sensors/Info collectors Actuators/command executors</p>
    <p>USB/PCIe/GPIO/CAN</p>
    <p>Syscalls</p>
  </div>
  <div class="page">
    <p>Adaptive Monte-Carlo Localization (AMCL): memory access pattern is affected by the physical sensor inputs</p>
    <p>Cache side-channel attack is used to extract the memory access patterns</p>
    <p>Machine learning (ML) models are used to infer the number of AMCL samples and the route of the vehicle</p>
    <p>Attack Outline</p>
    <p>AMCL ML Cache side channel</p>
    <p>ML</p>
    <p>M em</p>
    <p>or y</p>
    <p>ac ce</p>
    <p>ss</p>
    <p>Se ns</p>
    <p>or</p>
    <p>in pu</p>
    <p>t</p>
    <p>#A M</p>
    <p>CL</p>
    <p>sa m</p>
    <p>pl es</p>
    <p>Pr ed</p>
    <p>ict ed</p>
    <p>ro ut</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Adaptive Monte-Carlo Localization (AMCL)  Input: sensor image, and a map  Output: location on the map  Process:</p>
    <p>Randomly sample locations on the map, calculate the similarity with the sensor image</p>
    <p>Use k-means to find cluster center  Adaptivity: the number of samples varies</p>
    <p>adaptively depending on uncertainty1</p>
    <p>High curvature (uncertainty)  more AMCL samples  more memory access</p>
    <p>Sensor image</p>
    <p>map</p>
    <p>Nu m</p>
    <p>be r o</p>
    <p>f p ar</p>
    <p>tic le</p>
    <p>s</p>
    <p>Cu rv</p>
    <p>at ur</p>
    <p>e of</p>
    <p>th e</p>
    <p>tra ce</p>
    <p>(1 /m</p>
    <p>)</p>
    <p>time (s)</p>
    <p>N um</p>
    <p>be r o</p>
    <p>f A</p>
    <p>M C</p>
    <p>L sa</p>
    <p>m pl</p>
    <p>es</p>
    <p>C ur</p>
    <p>va tu</p>
    <p>re (1</p>
    <p>/m )</p>
  </div>
  <div class="page">
    <p>Adaptive Monte-Carlo Localization (AMCL): memory access pattern is affected by the physical sensor inputs</p>
    <p>Cache side-channel attack is used to extract the memory access patterns</p>
    <p>Machine learning (ML) models are used to infer the number of AMCL samples and the route of the vehicle</p>
    <p>Attack Outline</p>
    <p>AMCL ML Cache side channel</p>
    <p>ML</p>
    <p>M em</p>
    <p>or y</p>
    <p>ac ce</p>
    <p>ss</p>
    <p>Se ns</p>
    <p>or</p>
    <p>in pu</p>
    <p>t</p>
    <p>Pr ed</p>
    <p>ict ed</p>
    <p>ro ut</p>
    <p>e</p>
    <p>#A M</p>
    <p>CL</p>
    <p>sa m</p>
    <p>pl es</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Cache Side-Channel Attack  Sharing of cache  Memory accesses patterns</p>
    <p>from AMCL are left in the cache</p>
    <p>Attack program access the cache and infer AMCL accesses through timing  Prime+probe</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>Memory owned by AMCL</p>
    <p>Memory owned by attacker</p>
    <p>AMCL Attack program</p>
    <p>Main memory</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Cache Prime+Probe  For each prime+probe trial</p>
    <p>Probe each cache set and</p>
    <p>record the probing time</p>
    <p>High probing time (dark</p>
    <p>cell)  cache set accessed by a victim</p>
    <p>#dark cells  #AMCL samples</p>
    <p>ML model to predict number</p>
    <p>of samples</p>
    <p>C ache set index</p>
    <p>Probing Time (cycles)</p>
    <p>Prime+probe trial</p>
    <p>C ac</p>
    <p>he s</p>
    <p>et in</p>
    <p>de x</p>
    <p>Probing Time (cycles)</p>
    <p>Prime+probe trial</p>
    <p>C ac</p>
    <p>he s</p>
    <p>et in</p>
    <p>de x</p>
    <p>Probing Time (cycles)</p>
    <p>... C</p>
    <p>a c h e s</p>
    <p>e t in</p>
    <p>d e x (</p>
    <p>Prime+probe trial</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Adaptive Monte-Carlo Localization (AMCL): memory access pattern is affected by the physical sensor inputs</p>
    <p>Cache side-channel attack is used to extract the memory access patterns</p>
    <p>Machine learning (ML) models are used to infer the number of AMCL samples and the route of the vehicle</p>
    <p>Attack Outline</p>
    <p>AMCL ML Cache side channel</p>
    <p>ML</p>
    <p>M em</p>
    <p>or y</p>
    <p>ac ce</p>
    <p>ss</p>
    <p>Se ns</p>
    <p>or</p>
    <p>in pu</p>
    <p>t</p>
    <p>Pr ed</p>
    <p>ict ed</p>
    <p>ro ut</p>
    <p>e</p>
    <p>#A M</p>
    <p>CL</p>
    <p>sa m</p>
    <p>pl es</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>ML Model: #AMCL Samples Predictor  Formulated as a binary</p>
    <p>classification problem  Input: a window of cache</p>
    <p>probing time matrix  Output: two classes {High,</p>
    <p>Low} representing the number of samples</p>
    <p>RUSBoost1 binary predictor is used</p>
    <p>C ac</p>
    <p>he s</p>
    <p>et in</p>
    <p>de x</p>
    <p>Window size</p>
    <p>5 6 4 2 1 4 3 4 5 3 2 1 5 5 5  . . 1 2 5 N</p>
    <p>um be</p>
    <p>r o f s</p>
    <p>et s</p>
    <p>N um</p>
    <p>be r o</p>
    <p>f s am</p>
    <p>pl es</p>
    <p>time</p>
    <p>time</p>
    <p>High</p>
    <p>Low 1.C. Seiffert, et al., &quot;RUSBoost: Improving classification performance when training data is skewed,&quot; 2008 ICPR.</p>
  </div>
  <div class="page">
    <p>Adaptive Monte-Carlo Localization (AMCL): memory access pattern is affected by the physical sensor inputs</p>
    <p>Cache side-channel attack is used to extract the memory access patterns</p>
    <p>Machine learning (ML) models are used to infer the number of AMCL samples and the route of the vehicle</p>
    <p>Attack Outline</p>
    <p>AMCL ML Cache side channel</p>
    <p>ML</p>
    <p>M em</p>
    <p>or y</p>
    <p>ac ce</p>
    <p>ss</p>
    <p>Se ns</p>
    <p>or</p>
    <p>in pu</p>
    <p>t</p>
    <p>Pr ed</p>
    <p>ict ed</p>
    <p>ro ut</p>
    <p>e</p>
    <p>#A M</p>
    <p>CL</p>
    <p>sa m</p>
    <p>pl es</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>ML Model: Route Predictor  Formulated as a</p>
    <p>classification problem  Input: a series of {High,</p>
    <p>Low} which indicates the number of samples</p>
    <p>Output: label of the route  Decision tree/forest is</p>
    <p>used</p>
    <p>Low</p>
    <p>High</p>
    <p>High</p>
    <p>HighLow Low</p>
    <p>time</p>
    <p>High</p>
    <p>High</p>
    <p>Low</p>
    <p>N um</p>
    <p>be r</p>
    <p>of</p>
    <p>sa m</p>
    <p>pl es</p>
  </div>
  <div class="page">
    <p>Photos, illustrations, graphics here.</p>
    <p>Evaluation: Datasets  Two datasets used</p>
    <p>Gazebo/ROS1</p>
    <p>Simulated robot in a maze  Oxford2</p>
    <p>Data collected on a car driving around Oxford, UK</p>
    <p>Processors for evaluation  Intel i5-3317u, and Intel Xeon E5</p>
    <p>Gazebo/ROS simulation maze</p>
  </div>
  <div class="page">
    <p>7 randomly-selected routes with similar lengths</p>
    <p>Perform route prediction using L1D or LLC probing data</p>
    <p>Accuracy: L1D: 81.4%, LLC 75%</p>
    <p>Evaluation: Route Prediction - Gazebo</p>
    <p>Maze and 7 routes L1D prediction results LLC prediction results</p>
  </div>
  <div class="page">
    <p>7 routes with similar lengths from the Oxford dataset</p>
    <p>Perform route prediction using L1D or LLC probing data</p>
    <p>Accuracy: L1D: 74.6%, LLC 73.0%</p>
    <p>Evaluation: Route Prediction - Oxford</p>
    <p>Oxford dataset and</p>
    <p>seven routes</p>
    <p>L1D prediction results LLC prediction results</p>
  </div>
  <div class="page">
    <p>Evaluation: Host-client testbed architecture (Section 5.1.1)</p>
    <p>Location prediction (Section 5.3.2)</p>
    <p>L1D &amp; LLC comparison (Section 5.3.3)</p>
    <p>Discussion (Section 6)</p>
    <p>Processor architecture (Section 6.1)</p>
    <p>Generality of the vulnerability (Section 6.2)</p>
    <p>Limitations of the attack model (Section 6.3)</p>
    <p>Difficult-to-predict routes (Section 6.4)</p>
    <p>More In the Paper</p>
  </div>
  <div class="page">
    <p>We identified CPS as victim that can expose physical privacy information</p>
    <p>We showed adaptive algorithms in CPS are vulnerable to cache sidechannel attack</p>
    <p>We demonstrated a concrete example of cache side-channel attack on autonomous vehicles for route prediction</p>
    <p>Cache side-channel protection necessary for strong CPS physical privacy</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Thanks for listening! ml2558@cornell.edu</p>
  </div>
</Presentation>
