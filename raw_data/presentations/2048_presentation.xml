<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>l l d h d lFault Tolerance and the Five-Second Rule</p>
    <p>Ang Chen Hanjun Xiao</p>
    <p>Andreas Haeberlen Linh Thi Xuan Phan</p>
    <p>Department of Computer and Information Science University of Pennsylvania</p>
    <p>A. Haeberlen 1</p>
    <p>HotOS XV (May 18, 2015)</p>
  </div>
  <div class="page">
    <p>F lt i Di t ib t d S tFaults in Distributed Systems</p>
    <p>Balance: $100</p>
    <p>Transfer $9 to Marcos</p>
    <p>New balance: $1</p>
    <p>Nodes in a distributed system can fail</p>
    <p>bank.com</p>
    <p>Nodes in a distributed system can fail  Example: Online banking</p>
    <p>The consequences can be serious The consequences can be serious  Example: Monetary loss</p>
    <p>Solution: Use fault tolerance techniques A. Haeberlen</p>
    <p>Solution: Use fault-tolerance techniques 2</p>
    <p>HotOS XV (May 18, 2015)</p>
  </div>
  <div class="page">
    <p>F lt i R l LifFaults in Real Life</p>
    <p>$9, please!</p>
    <p>Your change:</p>
    <p>Transactions in real life can fail too! Transactions in real life can fail, too!  Example: Paying with cash at the checkout counter</p>
    <p>Failures can have bad consequences Failures can have bad consequences  Example: Getting shortchanged</p>
    <p>S l ti U f lt t l t h i ? A. Haeberlen</p>
    <p>Solution: Use fault-tolerance techniques? 3</p>
    <p>HotOS XV (May 18, 2015)</p>
  </div>
  <div class="page">
    <p>O li ffliOnline vs. offline</p>
    <p>How do we do handle this in the real world?  No masking: The transaction is allowed to fail initially  Detection: Participants check the results  Recovery: Detected failures are fixed if possible</p>
    <p>Timeliness: Checking happens quickly (to limit damage) Timeliness: Checking happens quickly (to limit damage)</p>
    <p>Can we do the same in distributed systems? Can we do the same in distributed systems?</p>
    <p>Our proposal: Bounded time recovery (BTR) Our proposal: Bounded-time recovery (BTR)  Intuition: When a node fails, the system may make mistakes</p>
    <p>for a limited time (e.g., 100ms), but then it recovers</p>
    <p>A. Haeberlen</p>
    <p>( g , ),  Should be a provable property - not just best-effort!</p>
  </div>
  <div class="page">
    <p>Wh ld BTR b ffi i t?When would BTR be sufficient?</p>
    <p>Not all systems can use BTR  Example: Systems where failures are</p>
    <p>i di l f limmediately fatal</p>
    <p>But there are systems that But there are systems that could benefit!</p>
    <p>Example: Cyber physical systems Example: Cyber-physical systems  Physical part often has some inertia  Control algorithms can often tolerate Control algorithms can often tolerate</p>
    <p>some mistakes  Time bound is key: Fixing problems</p>
    <p>'eventually' is not enough!</p>
    <p>A. Haeberlen</p>
    <p>'eventually' is not enough!</p>
  </div>
  <div class="page">
    <p>Wh t ld i f BTR?What could we gain from BTR?</p>
    <p>Opportunity #1: Lower cost  Detection is cheaper than masking  Particularly important for CPS</p>
    <p>O t it #2 Ti i t Opportunity #2: Timing guarantees  Even most BFT solutions cannot guarantee timely</p>
    <p>responses when the system is under attackresponses when the system is under attack</p>
    <p>Opportunity #3: Fine-grained responsesOpportunity #3: Fine grained responses  Typical fault-tolerance guarantee is &quot;all or nothing&quot;  BTR can recover failures in many ways, e.g., by dropping</p>
    <p>A. Haeberlen</p>
    <p>less important tasks or by adjusting the service level</p>
  </div>
  <div class="page">
    <p>O tliOutline</p>
    <p>Motivation  Idea: Bounded-Time Recovery (BTR)Idea: Bounded Time Recovery (BTR)</p>
    <p>Pros and Cons of BTR</p>
    <p>BTR defined NEXT BTR defined  Solution sketch</p>
    <p>Summary Summary</p>
    <p>A. Haeberlen 7</p>
    <p>HotOS XV (May 18, 2015)</p>
  </div>
  <div class="page">
    <p>A d d fi iti B d d ti</p>
    <p>A proposed definition  Bounded-time recovery:</p>
    <p>A system offers BTR with a time bound R if its outputs are correct in any interval [t t ] such that no fault hascorrect in any interval [t1,t2] such that no fault has manifested in [t1-R,t2]</p>
    <p>Fault</p>
    <p>TimeR R RSystem correct</p>
    <p>Some special cases: R 0: Similar to BFT (but with timing guarantees!) R=0: Similar to BFT (but with timing guarantees!)</p>
    <p>R=: Similar to self-stabilization  Small values of R are the most interesting (and the hardest)</p>
    <p>A. Haeberlen</p>
    <p>Small values of R are the most interesting (and the hardest)</p>
  </div>
  <div class="page">
    <p>Wh t ti d d?What assumptions do we need?</p>
    <p>BTR talks about time  Need synchrony!  Must have strong bounds on execution times  Must have strong bounds on message delays</p>
    <p>Thi i bl (i th CPS d i ) This is reasonable (in the CPS domain)  WCETs are often known or can be derived</p>
    <p>Networks have FEC and support bandwidth reservations Networks have FEC and support bandwidth reservations</p>
    <p>Can we assume Byzantine faults? Can we assume Byzantine faults?  Real, growing concern for CPS!  Qualified yes: Some hardware features needed</p>
    <p>A. Haeberlen</p>
    <p>Qualified yes: Some hardware features needed  Example: Protection against Babbling Idiots -- e.g., bus guardians</p>
  </div>
  <div class="page">
    <p>S l ti k t h Pl i A BA</p>
    <p>Solution sketch: Planning B</p>
    <p>Data flow A BA B</p>
    <p>Tasks</p>
    <p>C D Plan for &quot;B faulty&quot; mode</p>
    <p>C D Plan for &quot;no faults&quot; mode</p>
    <p>Ingredient #1: Planner System can run in several modes has a (static) plan System can run in several modes, has a (static) plan for what to run where in each mode</p>
    <p>Online vs. offline planning  Several interesting challenges (see paper for details)</p>
    <p>Example: Inter-mode dependencies; connections to game theory  Example: Distributed mixed-mode scheduling</p>
    <p>A. Haeberlen</p>
    <p>Example: Distributed mixed mode scheduling  Interesting opportunites, e.g., fine-grained responses</p>
  </div>
  <div class="page">
    <p>S l ti k t h D t tiSolution sketch: Detection</p>
    <p>Ingredient #2: Fault detector  Need to detect (at runtime) when a node misbehaves  Can we use PeerReview [SOSP07] for this?  No - PeerReview is for asynchronous systems!</p>
    <p>A  Challenge: Detecting temporal faults</p>
    <p>Example: Faulty node might send the</p>
    <p>A B</p>
    <p>Example: Faulty node might send the right message at the wrong time</p>
    <p>Challenge: Bounding time to detection  Adversary can win simply by delaying</p>
    <p>d t ti ( d th ) f t l !</p>
    <p>A. Haeberlen</p>
    <p>detection (and thus recovery) for too long!</p>
  </div>
  <div class="page">
    <p>S l ti k t h RSolution sketch: Recovery</p>
    <p>Ingredient #3: Evidence distributor  Need to convince other nodes that a fault really exists</p>
    <p>Ad i ht t t f th t b ti Adversary might try to confuse the system by reporting non-existent faults</p>
    <p>PeerReview-style protocols can provide evidence of faults  Challenge: Needs resources, new kinds of evidence</p>
    <p>Ingredient #4: Mode switcher  Each node needs to switch to the new planac ode eeds to s tc to t e e p a  Involves transferring state, starting/terminating tasks</p>
    <p>Some existing work on mode-change protocols S i i l l b l t t b d d</p>
    <p>A. Haeberlen</p>
    <p>Surprisingly, global agreement may not be needed</p>
  </div>
  <div class="page">
    <p>P tti it ll t thPutting it all together B is</p>
    <p>A B faulty!</p>
    <p>C D</p>
    <p>Evidence</p>
    <p>TimeR</p>
    <p>Planning: Decide what to run where in each mode  Detection: Nodes audit each other to look for faults  Evidence: Nodes prove existence of detected faults</p>
    <p>A. Haeberlen</p>
    <p>Mode change: System reconfigures 13</p>
    <p>HotOS XV (May 18, 2015)</p>
  </div>
  <div class="page">
    <p>SSummary</p>
    <p>We propose Bounded-Time Recovery (BTR)  New approach to fault tolerance  System is allowed to produce wrong outputs after a fault,</p>
    <p>but only for a limited time</p>
    <p>Case study: Cyber physical systems Case study: Cyber-physical systems  Support the additional assumptions that BTR requires  BTR could offer lower cost fine-grained responses to faults BTR could offer lower cost, fine-grained responses to faults</p>
    <p>Interesting research challenges Unusual scheduling problems new detection protocols Unusual scheduling problems, new detection protocols, ...</p>
    <p>Questions?</p>
    <p>A. Haeberlen 14</p>
    <p>HotOS XV (May 18, 2015)</p>
    <p>Questions?</p>
  </div>
</Presentation>
