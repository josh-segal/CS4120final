<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>D-PROV: Extending the PROV Provenance Model to express Workflow Structure</p>
    <p>Paolo Missier(1), Saumen Dey(2), Khalid Belhajjame(3), Vctor Cuevas-Vicenttn(2), Bertram Ludaescher(2)</p>
    <p>(1) Newcastle University, UK (2) UC Davis, CA, USA</p>
    <p>(3) University of Manchester, UK</p>
    <p>TAPP13 Lombard, IL. April, 2013</p>
  </div>
  <div class="page">
    <p>Queries that require provenance</p>
    <p>Q1: track the lineage of the final outputs of the workflow</p>
    <p>Q2: list the parameter values that were used for a specific task t in the workflow</p>
    <p>Q3: check that the provenance traces conform to the structure of the workflow</p>
    <p>Prospective Provenance (p-prov): - representation of the workflow itself;</p>
    <p>Retrospective Provenance (r-prov): - provenance of the data produced by one workflow run</p>
    <p>Provenance of the Process: - account of the evolution of the workflow across versions</p>
    <p>FREIRE, J., KOOP, D., SANTOS, E., AND SILVA, C. T. Provenance for Computational Tasks: A Survey. Computing in Science and Engineering 10, 3 (2008), 1121.</p>
  </div>
  <div class="page">
    <p>PROV @W3C: scope and structure</p>
    <p>Recommendation track</p>
  </div>
  <div class="page">
    <p>r-prov and p-prov in plain PROV</p>
    <p>d T2Inv usedT1Inv</p>
    <p>wasGeneratedBy</p>
    <p>p-prov</p>
    <p>wasAssociatedWith</p>
    <p>T1</p>
    <p>wasAssociatedWith</p>
    <p>T2prov:type= &quot;prov:plan&quot;</p>
    <p>r-prov</p>
    <p>// p-prov: tasks, but no data or activities entity(T1, [ prov:type = 'prov:plan']) entity(T2, [ prov:type = 'prov:plan']) // r-prov - task invocation and data activity(T1inv) activity(T2inv) entity(d) // data flowing between two task instances wasGeneratedBy(d, T1inv) used(T2inv, d) // connecting r-prov and p-prov wasAssociatedWith(T1inv, _, T1) // T1 is the plan for T1inv wasAssociatedWith(T2inv, _, T2) // T1 is the plan for T2inv</p>
  </div>
  <div class="page">
    <p>Reference dataflow models</p>
    <p>wf</p>
    <p>T1 op1</p>
    <p>op2 T2</p>
    <p>ip1</p>
    <p>ip2</p>
    <p>Processors, ports, data links</p>
    <p>wf</p>
    <p>T1 ch1 T2</p>
    <p>ch2</p>
    <p>Processors, channels</p>
    <p>Kepler Taverna VisTrails e-Science Central ...</p>
    <p>Dataflow process networks (*) (e.g. a specific Kepler semantics)</p>
    <p>(*) LEE, E. A., AND PARKS, T. M. Dataflow process networks. Proceedings of the IEEE 83, 5 (1995), 773801.</p>
  </div>
  <div class="page">
    <p>Extensions I / p-prov / ports model</p>
    <p>wf</p>
    <p>T1 op1</p>
    <p>op2 T2</p>
    <p>ip1</p>
    <p>ip2</p>
    <p>T1</p>
    <p>T2</p>
    <p>prov:type= &quot;prov:plan&quot; prov:type= &quot;D1:task&quot;</p>
    <p>op1</p>
    <p>ip1</p>
    <p>prov:type= &quot;D1:port&quot;</p>
    <p>prov:type= &quot;prov:plan&quot; prov:type= &quot;D1:task&quot;</p>
    <p>wfprov:type= &quot;D1:workflow&quot;</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
    <p>hasOutputPort</p>
    <p>dataLink</p>
    <p>hasInputPort</p>
    <p>hasOutPort(T1, op1) hasInPort(T2, ip1) dataLink(op1, ip1) isTaskOf(wf, T1) isTaskOf(wf, T2)</p>
  </div>
  <div class="page">
    <p>Extensions II / p-prov / channel model</p>
    <p>wf</p>
    <p>T1 ch1 T2</p>
    <p>ch2</p>
    <p>ch1</p>
    <p>T1</p>
    <p>T2 isSinkOf</p>
    <p>isSourceOf</p>
    <p>wf prov:type= &quot;D1:workflow&quot;,</p>
    <p>prov:type= &quot;prov:plan&quot;</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
    <p>prov:type= &quot;prov:plan&quot; prov:type= &quot;D1:task&quot;</p>
    <p>prov:type= &quot;prov:plan&quot; prov:type= &quot;D1:task&quot;</p>
    <p>ch2 isSourceOf</p>
    <p>prov:type= &quot;D1:channel&quot;</p>
    <p>isSourceOf(T1,ch2) isSourceOf(T1,ch1) isSinkOf(T2,ch1) isTaskOf(T1, wf) isTaskOf(T2, wf)</p>
  </div>
  <div class="page">
    <p>p-prov/r-prov pattern for port-oriented workflows</p>
    <p>onOutPort</p>
    <p>T1Inv</p>
    <p>d</p>
    <p>onInPort</p>
    <p>T2Inv</p>
    <p>wasAssociatedWith</p>
    <p>T1</p>
    <p>wasAssociatedWith</p>
    <p>T2</p>
    <p>op1</p>
    <p>ip1</p>
    <p>wf</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
    <p>hasInputPort</p>
    <p>hasOutputPort</p>
    <p>wfInv wasAssociatedWith</p>
    <p>wasStartedBy</p>
    <p>wasStartedBy</p>
    <p>dataLink</p>
    <p>hasOutPort(t1, op1) hasInPort(t2, ip1) dataLink(op1, ip1) isTaskOf(wf, t1) isTaskOf(wf, t2)</p>
    <p>activity (wfRun) activity ( t1inv ) activity ( t2inv ) entity (d) onOutPort(d, op1, t1Inv) onInPort(d, ip1, t2Inv)</p>
  </div>
  <div class="page">
    <p>p-prov/r-prov pattern for port-oriented workflows</p>
    <p>onOutPort</p>
    <p>T1Inv</p>
    <p>d</p>
    <p>onInPort</p>
    <p>T2Inv</p>
    <p>wasAssociatedWith</p>
    <p>T1</p>
    <p>wasAssociatedWith</p>
    <p>T2</p>
    <p>op1</p>
    <p>ip1</p>
    <p>wf</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
    <p>hasInputPort</p>
    <p>hasOutputPort</p>
    <p>wfInv wasAssociatedWith</p>
    <p>wasStartedBy</p>
    <p>wasStartedBy</p>
    <p>dataLink</p>
    <p>hasOutPort(t1, op1) hasInPort(t2, ip1) dataLink(op1, ip1) isTaskOf(wf, t1) isTaskOf(wf, t2)</p>
    <p>activity (wfRun) activity ( t1inv ) activity ( t2inv ) entity (d) onOutPort(d, op1, t1Inv) onInPort(d, ip1, t2Inv)</p>
    <p>wasGeneratedBy(D, tInv) : onOutPort(D, _, tInv ). used(tInv, D) : onInPort(D, _, tInv)</p>
    <p>Lossy mapping to plain PROV: Port removal</p>
  </div>
  <div class="page">
    <p>p-prov/r-prov pattern for channel-oriented workflows</p>
    <p>wasWrittenTo</p>
    <p>wasReadFrom</p>
    <p>ch1</p>
    <p>T1</p>
    <p>T2</p>
    <p>isSinkOf</p>
    <p>isSourceOf</p>
    <p>wf</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
    <p>d</p>
    <p>T1Inv</p>
    <p>wasAssociatedWith</p>
    <p>T2Inv</p>
    <p>wasAssociatedWith</p>
    <p>wfInv</p>
    <p>wasStartedBy</p>
    <p>wasStartedBy</p>
    <p>wasAssociatedWith</p>
    <p>sourceOf(t1,ch) sinkOf(t2,ch) isTaskOf(t1, wf) isTaskOf(t2, wf) activity (wfRun) activity ( t1inv ) activity ( t2inv ) entity (d) wasWrittenTo(d,ch, t1Inv) wasReadFrom(d,ch, t2Inv)</p>
  </div>
  <div class="page">
    <p>p-prov/r-prov pattern for channel-oriented workflows</p>
    <p>wasWrittenTo</p>
    <p>wasReadFrom</p>
    <p>ch1</p>
    <p>T1</p>
    <p>T2</p>
    <p>isSinkOf</p>
    <p>isSourceOf</p>
    <p>wf</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
    <p>d</p>
    <p>T1Inv</p>
    <p>wasAssociatedWith</p>
    <p>T2Inv</p>
    <p>wasAssociatedWith</p>
    <p>wfInv</p>
    <p>wasStartedBy</p>
    <p>wasStartedBy</p>
    <p>wasAssociatedWith</p>
    <p>sourceOf(t1,ch) sinkOf(t2,ch) isTaskOf(t1, wf) isTaskOf(t2, wf) activity (wfRun) activity ( t1inv ) activity ( t2inv ) entity (d) wasWrittenTo(d,ch, t1Inv) wasReadFrom(d,ch, t2Inv)</p>
    <p>wasGeneratedBy(d, tInv) : wasWrittenTo(d,ch, t1Inv ) used(tInv, D):wasReadFrom(d,ch,t2Inv)</p>
    <p>Lossy mapping to plain PROV: Channel removal:</p>
  </div>
  <div class="page">
    <p>Bundles, provenance of provenance</p>
    <p>A bundle is a named set of provenance descriptions, and is itself an entity, so allowing provenance of provenance to be expressed.</p>
    <p>bundle pm:bundle1</p>
    <p>entity(ex:draftComments) entity(ex:draftV1)</p>
    <p>activity(ex:commenting) wasGeneratedBy(ex:draftComments, ex:commenting,-) used(ex:commenting, ex:draftV1, -) endBundle ... entity(pm:bundle1, [ prov:type='prov:Bundle' ]) wasGeneratedBy(pm:bundle1, -, 2013-03-20T10:30:00) wasAttributedTo(pm:bundle1, ex:Bob)</p>
    <p>pm:bundle1</p>
    <p>commenting draft v1</p>
    <p>used draft comments</p>
    <p>wasGeneratedBy</p>
  </div>
  <div class="page">
    <p>Structural workflow nesting using bundles</p>
    <p>entity (wfRunTrace, [ prov:type=prov:Bundle ]) wasGeneratedBy(wfRunTrace,wfInv,-)</p>
    <p>Repurposing: use bundles to associate a workflow execution with the provenance it generates</p>
    <p>This makes it possible to write hierarchical provenance of nested workflows, recursively:</p>
    <p>entity (T, [prov:type=&quot;D1:task&quot;, prov:type=&quot;D1:workflow&quot;])</p>
    <p>bundle wfRunTrace activity(wfRun) // run of top level wf activity(Tinv) // run of T, a sub-workflow</p>
    <p>wasAssociatedWith(Tinv, _, T) entity(TinvTrace, [ prov:type='prov:Bundle' ]) wasGeneratedBy(TinvTrace, Tinv, _) ... endbundle</p>
  </div>
  <div class="page">
    <p>Answering the sample queries</p>
    <p>onOutPort</p>
    <p>D</p>
    <p>onInPort</p>
    <p>OP</p>
    <p>IP</p>
    <p>dataLink</p>
    <p>dataLink (OP, IP) : onOutPort(D,OP,_), onInPort(D,IP,_).</p>
    <p>Two steps: - define rules that entail p-prov relations from r-prov relations, and - check that those new p-prov relations are consistent with any constraints</p>
    <p>defined on the workflow structure / infer new p-prov statements</p>
    <p>Q3: match the provenance trace to the workflow structure</p>
    <p>T1 op1</p>
    <p>op2 T2</p>
    <p>ip1</p>
    <p>ip2</p>
    <p>wf</p>
    <p>constraint violation?</p>
  </div>
  <div class="page">
    <p>Structure inferences</p>
    <p>hasOutPort(T, OP) : onOutPort(D,OP,I1), wasAssociatedWith(I1,_,T1).onOutPort</p>
    <p>I1</p>
    <p>D</p>
    <p>onInPort</p>
    <p>I2</p>
    <p>wasAssociatedWith</p>
    <p>T1</p>
    <p>wasAssociatedWith</p>
    <p>T2</p>
    <p>OP</p>
    <p>IP</p>
    <p>hasInPort(T, IP) : onInPort(D,IP,I1), wasAssociatedWith(I1,_,T1).</p>
  </div>
  <div class="page">
    <p>Structure inferences</p>
    <p>isTaskOf(T2, Wf) : onOutPort(D,OP,I1), hasOutPort(T1, OP), onInPort(D,IP,I2), hasInPort(T2, IP), wasAssociatedWith(I1,_,T1), wasAssociatedWith(I2,_,T2), isTaskOf(T1, Wf).</p>
    <p>onOutPort</p>
    <p>I1</p>
    <p>D</p>
    <p>onInPort</p>
    <p>I2</p>
    <p>wasAssociatedWith</p>
    <p>T1</p>
    <p>wasAssociatedWith</p>
    <p>T2</p>
    <p>OP</p>
    <p>IP</p>
    <p>wf</p>
    <p>isTaskOf</p>
    <p>isTaskOf</p>
  </div>
  <div class="page">
    <p>Other PROV extensions into workflow-land</p>
    <p>virtual clusters based on these virtual machines following restrictions defined by scientists.</p>
    <p>The agent Scientist represents a person to use computational resources to execute the experiment (composed as a workflow). Also, the agent Scientist is associated to a machine (i.e. agent Machine). The agent Machine establishes an association with a workflow (plan Workflow), which is composed by a set of activities (i.e. plan WActivity). Each activity is responsible for executing a program in a machine with a specific configuration. The invocation of a program within a workflow (i.e. execution instance) uses a set of parameters that can be seen as a set of</p>
    <p>values to be consumed. To express all data that is consumed and produced by execution instances, the entity RelationSchema is associated with a schema and can be defined with multiple fields. Each field (i.e. entity Field) describes the meaning of each parameter associated to a program that is associated to a WActivity. The entity Value expresses the set of values of a field, each set associated to an execution instance. Furthermore, the entity File represents all files consumed and produced by a workflow execution and entity FileType represents the expected type of file to workflow. The entities with associations with consumption and production of files and value present two directional PROV associations expressed, respectively, by Used (consumption) and WasGeneratedBy (production).</p>
    <p>According to PROV data model, an agent is described as something that assumes some sort of responsibility. Additionally, PROV defines software agent as an entity that is capable of running software. Thus, Machine and Program are considered, respectively, an agent and a software agent. Furthermore, the activities in PROV data model are mapped to describe an action that happens in a period of time (during workflow execution). Also, some entities and plan (subclass of entity) can be used by a PROV activity. So, respecting these properties, two PROV-Wf activities were defined and tagged with prov:Activity. The first represents the execution of some activity instance (activity Execute activity), while the second defines the execution properties of one SWfMS (activity Execute workflow). Also, the execution of an activity instance determines which parameters are consumed by each instance of the activity.</p>
    <p>By using PROV-Wf we are able to represent provenance data to be distributed and queried at runtime. In the next sub-section we present how this provenance model is coupled to a set of components developed for capturing and querying runtime provenance data.</p>
    <p>Figure 1 PROV-Wf data model</p>
    <p>Flavio Costa, Vtor Silva, Daniel de Oliveira, Kary Ocaa, Eduardo Ogasawara, Jonas Dias, and Marta Mattoso, Capturing and Querying Workflow Runtime Provenance with PROV: a Practical Approach, Procs. BigProv13, Genova, Italy, March 2013</p>
    <p>WfProv from the Wf4Ever project</p>
    <p>www.wf4ever-project.org</p>
    <p>Prov-Wf:</p>
    <p>Workflow</p>
    <p>Process</p>
    <p>DataLink</p>
    <p>Input</p>
    <p>Output</p>
    <p>Plan</p>
    <p>Parameter</p>
    <p>hasInput</p>
    <p>hasOutput</p>
    <p>hasSubProcess</p>
    <p>hasDataLink</p>
    <p>hasSource</p>
    <p>hasSink cc</p>
    <p>wasGeneratedBy</p>
    <p>WorkflowEngine</p>
    <p>ProcessRun Artifact</p>
    <p>describedByProcess cc</p>
    <p>Entity</p>
    <p>usedInput</p>
    <p>wasOutputFrom</p>
    <p>used</p>
    <p>Activity</p>
    <p>describedByParameter cc</p>
    <p>wasEnactedBy</p>
    <p>SoftwareAgent</p>
  </div>
  <div class="page">
    <p>Summary and extensions</p>
    <p>Simple extensions to PROV  designed to model p-prov  complementary to r-prov</p>
    <p>They enable queries that cut across r-prov and p-prov</p>
    <p>Bundle mechanism used for provenance of nested workflow components</p>
    <p>Next step: harmonize similar extensions proposed by other groups  overall goal is to achieve interoperability 16</p>
  </div>
</Presentation>
