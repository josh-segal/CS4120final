<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Understanding, Detecting and Localizing Partial Failures in Large</p>
    <p>System Software Chang Lou*, Peng Huang, Scott Smith</p>
  </div>
  <div class="page">
    <p>All start from a puzzling incident..</p>
    <p>On-call engineer</p>
    <p>ZooKeeper Cluster</p>
    <p>LeaderFollower Follower</p>
  </div>
  <div class="page">
    <p>All start from a puzzling incident..</p>
    <p>On-call engineer</p>
    <p>ZooKeeper Cluster</p>
    <p>LeaderFollower Follower</p>
    <p>New Message: NEED HELP!  We met something puzzling. It has been going on for 10+ minutes.</p>
    <p>WRITE TIMEOUT WRITE TIMEOUT WRITE TIMEOUT</p>
  </div>
  <div class="page">
    <p>All start from a puzzling incident..</p>
    <p>LeaderFollower Follower logs</p>
    <p>resource meter</p>
    <p>RUOK IMOK</p>
    <p>ClientOn-call engineer</p>
    <p>READ OK WRITE TIMEOUT CREATE TIMEOUT</p>
  </div>
  <div class="page">
    <p>Client</p>
    <p>VhKLe (rTNNKNI) { RLeep()( ReNFHeCrSDeCS()( [</p>
    <p>RXNEhrONKzeF (NOFe) { OTSpTS.VrKSe;SrKNI(pCSh&quot; pCSh )( OTSpTS.VrKSe:eEOrF(NOFe&quot; NOFe )(</p>
    <p>[</p>
    <p>stuck at transient network error</p>
    <p>The failure off the radar Follower</p>
    <p>Leader Process</p>
    <p>create(node1)</p>
    <p>Request Processor Serializer</p>
    <p>Failure Detector</p>
  </div>
  <div class="page">
    <p>Modern software is complex</p>
    <p>pid1 Background tasks</p>
    <p>I/O workers</p>
    <p>Protocol related workers</p>
    <p>Local database operators</p>
    <p>Request workers</p>
  </div>
  <div class="page">
    <p>Modern software is complex</p>
    <p>pid1 Background tasks</p>
    <p>I/O workers</p>
    <p>Protocol related workers</p>
    <p>Local database operators</p>
    <p>Request workers</p>
  </div>
  <div class="page">
    <p>Modern software is complex</p>
    <p>pid1 Background tasks</p>
    <p>I/O workers</p>
    <p>Protocol related workers</p>
    <p>Local database operators</p>
    <p>Request workers</p>
    <p>process can fail partially</p>
  </div>
  <div class="page">
    <p>Real world outages caused by partial failures</p>
  </div>
  <div class="page">
    <p>Study methodology</p>
    <p>We study 100 partial failure cases from five large, widelyused software systems Interestingly, 54% of them occur in the most recent three years software releases (average lifespan of all systems is 9 years).</p>
    <p>Software Language Cases Versions Date Range</p>
    <p>ZooKeeper Java 20 17 (3.2.13.5.3) 12/01/200908/28/2018</p>
    <p>Cassandra Java 20 19 (0.7.43.0.13) 04/22/201108/31/2017</p>
    <p>HDFS Java 20 14 (0.20.13.1.0) 10/29/200908/06/2018</p>
    <p>Apache C 20 16 (2.0.402.4.29) 08/02/200203/20/2018</p>
    <p>Mesos C++ 20 11 (0.11.01.7.0) 04/08/201312/28/2018</p>
  </div>
  <div class="page">
    <p>A partial failure is, in a process  to be when a fault does not crash  but causes safety or liveness violation or severe slowness for some</p>
    <p>functionality Rf  R</p>
    <p>Study scope</p>
    <p>Process-level Service-level</p>
    <p>PID1 cluster</p>
    <p>computing engine</p>
    <p>storage engine</p>
    <p>index instance</p>
    <p>healthy/unhealthy</p>
    <p>query APIs are broken</p>
    <p>our focus</p>
    <p>crash</p>
  </div>
  <div class="page">
    <p>Finding 1: root causes are diverse</p>
    <p>There is no single uniformed or dominating root cause.</p>
    <p>The top three (total 48%) root cause types are uncaught errors, indefinite blocking, and buggy error handling.</p>
    <p>UE IB EH DD PB LE IL RL Other 0</p>
    <p>rc en</p>
    <p>t Apache Cassandra HDFS</p>
    <p>Mesos ZooKeeper</p>
    <p>Root cause distribution. UE: uncaught error; IB: indefinite blocking; EH: buggy error handling;</p>
    <p>DD: deadlock; PB: performance bug; LE: logic error; IL: infinite loop; RL: resource leak.</p>
  </div>
  <div class="page">
    <p>Finding 2: nearly half cases cause stuck issues</p>
    <p>Nearly half (48%) of the partial failures cause some functionality to be stuck.</p>
    <p>stuck slow zombieomissiondenial corrupt other 0</p>
    <p>Pe rc en</p>
    <p>t</p>
    <p>Apache Cassandra HDFS</p>
    <p>Mesos ZooKeeper</p>
    <p>Consequence of studied failures.</p>
  </div>
  <div class="page">
    <p>Finding 3: 15% cases are totally silent</p>
    <p>stuck slow zombieomissiondenial corrupt other 0</p>
    <p>Pe rc en</p>
    <p>t</p>
    <p>Apache Cassandra HDFS</p>
    <p>Mesos ZooKeeper</p>
    <p>Consequence of studied failures. APACHE-53727</p>
    <p>uncleaned buffer disconnected</p>
    <p>client</p>
    <p>new client</p>
  </div>
  <div class="page">
    <p>pTDLKE DXSe@A reCF.THHer(;SrKNI SCI){ KNS LeN = reCFINS(SCI)( KH (LeN == -1) reSTrN NTLL( DXSe@A Crr = NeV DXSe@LeNA(</p>
    <p>Finding 4: most cases are triggered by unique production workload or environment</p>
    <p>ZK-602 ZK-914</p>
    <p>Leader</p>
    <p>Follower Follower</p>
    <p>FollowerX</p>
    <p>schema_len</p>
  </div>
  <div class="page">
    <p>Finding 5: debugging time is long</p>
    <p>The median diagnosis time is 6 days and 5 hour. confusing symptoms of the failures mislead the diagnosis direction</p>
    <p>insu!cient exposure of runtime information in the faulty process</p>
    <p>INFO</p>
    <p>WARN</p>
    <p>DEBUG</p>
    <p>ERROR</p>
    <p>OC.VrKSeINS(LONIKeXMCp.RKze()&quot; MCp )( ! ;XRSeM.OTS.prKNSLN(UCL.IeSKeX())( OC.VrKSeLONI(UCL.IeSKeX()&quot; LONI )(</p>
    <p>enable DEBUG log instrument codeanalyze heap</p>
  </div>
  <div class="page">
    <p>How to deal with partial failures</p>
    <p>Static Approach Dynamic Approach</p>
    <p>detector</p>
    <p>pid1</p>
    <p>no unique production env/workload</p>
    <p>detector</p>
    <p>pid2</p>
    <p>detector</p>
    <p>pid3</p>
    <p>existing detectors are too shallow</p>
    <p>TestSet1</p>
    <p>TestSet2</p>
    <p>TestSet3</p>
    <p>WE NEED MORE POWERFUL RUNTIME CHECKERS</p>
  </div>
  <div class="page">
    <p>Manual vs generated checkers</p>
    <p>Ask developers to manually add defensive checks?</p>
    <p>datagramSocket.receive();   outputArchive.writeRecord(record);  randomAccessFile.seek();   CalcUtil.hash(buffer);  allocateMemory(size);</p>
    <p>+ long start = System.nanoTime();</p>
    <p>+ long elapsedTime = System.nanoTime() - start;</p>
    <p>+ try{</p>
    <p>}+ catch (NullPointerException e) {} + try{</p>
    <p>+ } catch (OutOfMemoryError e) {}</p>
    <p>+ try{</p>
    <p>}+ catch (IOException e) {}</p>
  </div>
  <div class="page">
    <p>Manual vs generated checkers</p>
    <p>Systematically generate checkers to ease developers burden</p>
    <p>challenge: di!cult to automate for all cases opportunity: most of partial failures do not rely on deep semantic understanding to detect, such checkers can potentially be automatically constructed</p>
  </div>
  <div class="page">
    <p>main program</p>
    <p>checker</p>
    <p>Design principle: checkers intersect with the execution of a monitored process</p>
    <p>main program</p>
    <p>checker</p>
    <p>existing approach</p>
    <p>main program</p>
    <p>checker</p>
    <p>our approach</p>
  </div>
  <div class="page">
    <p>Intrinsic watchdog: Runtime</p>
    <p>Request Listener Snapshot Manager Replication Engine</p>
    <p>Compaction Worker Session Manager</p>
    <p>Contexts watchdog</p>
    <p>driver</p>
    <p>main program</p>
    <p>checkers</p>
  </div>
  <div class="page">
    <p>Characteristic I: customized</p>
    <p>Request Listener Snapshot Manager Replication Engine</p>
    <p>Compaction Worker Session Manager</p>
    <p>Contexts</p>
    <p>checkers driver</p>
    <p>main program</p>
  </div>
  <div class="page">
    <p>Characteristic II: stateful</p>
    <p>Request Listener Snapshot Manager Replication Engine</p>
    <p>Compaction Worker Session Manager</p>
    <p>Contexts watchdog</p>
    <p>driver</p>
    <p>main program</p>
    <p>watchdog hooks</p>
    <p>states</p>
    <p>checkers</p>
  </div>
  <div class="page">
    <p>Characteristic III: concurrent</p>
    <p>Request Listener Snapshot Manager Replication Engine</p>
    <p>Compaction Worker Session Manager</p>
    <p>Contexts</p>
    <p>driver</p>
    <p>main program</p>
    <p>checkers</p>
  </div>
  <div class="page">
    <p>Core idea: mimic checking</p>
    <p>Client</p>
    <p>Leader Process</p>
    <p>create(node1)</p>
    <p>Request Processor Serializer</p>
    <p>RXNEhrONKzeF (NOFe) { OTSpTS.VrKSe;SrKNI(pCSh&quot; pCSh )( OTSpTS.VrKSe:eEOrF(NOFe&quot; NOFe )( [</p>
    <p>stuck at transient network error</p>
    <p>OTSpTS.VrKSe;SrKNI(pCSh&quot; pCSh )(</p>
    <p>Mimic checker</p>
  </div>
  <div class="page">
    <p>Tool overview</p>
    <p>% ./omegagen -jar zookeeper-3.4.6.jar -m zookeeper.manifest analyzing.. generating.. instrumenting.. repackaging.. done. Total 1min 6s. % ls output/ zookeeper-3.4.6-with-wd.jar</p>
    <p>OmegaGen a prototype that systematically generate mimic-type watchdogs for system softwares</p>
    <p>core technique: program reduction</p>
  </div>
  <div class="page">
    <p>What is program reduction?</p>
    <p>P W</p>
    <p>Given a program P, create a watchdog W that can detect partial failures in P without imposing on Ps execution.</p>
    <p>reduction</p>
    <p>W partial failure</p>
    <p>FAILURE!</p>
    <p>when failure happens</p>
  </div>
  <div class="page">
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( KH (EhKLFreN != NTLL) { HOr (;SrKNI EhKLF ' EhKLFreN) { pCSh.FeLeSe(OHH&quot; INSeIer.M-XB&gt;-L=1)( pCSh.CppeNF(EhKLF)( RerKCLKzeNOFe(OC&quot; pCSh)( [ [ [</p>
    <p>what if put the whole snapshot operation into the checker and run?</p>
    <p>Mimic checker</p>
  </div>
  <div class="page">
    <p>UOKF RerKCLKzeNOFe(OTSpTS-rEhKUe OC&quot; ;SrKNI.TKLFer pCSh) ShrOVR IO1xEepSKON { ;SrKNI pCSh;SrKNI = pCSh.SO;SrKNI()( DCSCNOFe NOFe = IeSNOFe(pCSh;SrKNI)(</p>
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( KH (EhKLFreN != NTLL) { HOr (;SrKNI EhKLF ' EhKLFreN) { pCSh.FeLeSe(OHH&quot; INSeIer.M-XB&gt;-L=1)( pCSh.CppeNF(EhKLF)( RerKCLKzeNOFe(OC&quot; pCSh)( [ [ [</p>
    <p>checker can detect the timeout, but we dont know which part goes wrong</p>
  </div>
  <div class="page">
    <p>UOKF RerKCLKzeNOFe(OTSpTS-rEhKUe OC&quot; ;SrKNI.TKLFer pCSh) ShrOVR IO1xEepSKON { ;SrKNI pCSh;SrKNI = pCSh.SO;SrKNI()( DCSCNOFe NOFe = IeSNOFe(pCSh;SrKNI)(</p>
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( KH (EhKLFreN != NTLL) { HOr (;SrKNI EhKLF ' EhKLFreN) { pCSh.FeLeSe(OHH&quot; INSeIer.M-XB&gt;-L=1)( pCSh.CppeNF(EhKLF)( RerKCLKzeNOFe(OC&quot; pCSh)( [ [ [</p>
  </div>
  <div class="page">
    <p>UOKF RerKCLKzeNOFe(OTSpTS-rEhKUe OC&quot; ;SrKNI.TKLFer pCSh) ShrOVR IO1xEepSKON { ;SrKNI pCSh;SrKNI = pCSh.SO;SrKNI()( DCSCNOFe NOFe = IeSNOFe(pCSh;SrKNI)(</p>
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( KH (EhKLFreN != NTLL) { HOr (;SrKNI EhKLF ' EhKLFreN) { pCSh.FeLeSe(OHH&quot; INSeIer.M-XB&gt;-L=1)( pCSh.CppeNF(EhKLF)( RerKCLKzeNOFe(OC&quot; pCSh)( [ [ [</p>
    <p>convert string</p>
    <p>a lot of operations are logically deterministic and should be checked before production</p>
    <p>convert array</p>
    <p>append path</p>
    <p>iterate children and modify path</p>
  </div>
  <div class="page">
    <p>UOKF RerKCLKzeNOFe(OTSpTS-rEhKUe OC&quot; ;SrKNI.TKLFer pCSh) ShrOVR IO1xEepSKON { ;SrKNI pCSh;SrKNI = pCSh.SO;SrKNI()( DCSCNOFe NOFe = IeSNOFe(pCSh;SrKNI)(</p>
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( KH (EhKLFreN != NTLL) { HOr (;SrKNI EhKLF ' EhKLFreN) { pCSh.FeLeSe(OHH&quot; INSeIer.M-XB&gt;-L=1)( pCSh.CppeNF(EhKLF)( RerKCLKzeNOFe(OC&quot; pCSh)( [ [ [</p>
    <p>do I/O + in synchronized block</p>
    <p>some operations are more vulnerable in the production environment</p>
    <p>OC.VrKSe:eEOrF(NOFe&quot; NOFe )(</p>
  </div>
  <div class="page">
    <p>Program reduction</p>
    <p>Five steps #1 locate long-running regions</p>
    <p>#2 reduce the program</p>
    <p>#3 locate vulnerable operations</p>
    <p>#4 encapsulate watchdog checkers</p>
    <p>#5 insert watchdog hooks</p>
  </div>
  <div class="page">
    <p>Step#1 locate long-running regions</p>
    <p>public class SyncRequestProcessor { public void run() { int logCount = 0;</p>
    <p>setRandRoll(r.nextInt(snapCount/2));</p>
    <p>while (running) {  if (logCount &gt; (snapCount / 2 )) zks.takeSnapshot();</p>
    <p>} .. LOG.info(&quot;SyncRequestProcessor exited!&quot;);</p>
    <p>}</p>
    <p>initialization stage</p>
    <p>cleanup stage</p>
    <p>long-running stage</p>
    <p>org.apache.zookeeper.server.ZooKe eperServer.takeSnapshot()</p>
    <p>entry list</p>
  </div>
  <div class="page">
    <p>Step#2 reduce the program public class SyncRequestProcessor { public static void serializeSnapshot(DataTree dt, ) {</p>
    <p>dt.serialize(oa, tree); }</p>
    <p>} public class DataTree{ public void serialize(OutputArchive oa, String tag) {</p>
    <p>scout = 0; serializeNode(oa, new StringBuilder());</p>
    <p>}</p>
    <p>keep reducing</p>
    <p>keep reducing</p>
  </div>
  <div class="page">
    <p>UOKF RerKCLKzeNOFe(OTSpTS-rEhKUe OC&quot; ;SrKNI.TKLFer pCSh) ShrOVR IO1xEepSKON { ;SrKNI pCSh;SrKNI = pCSh.SO;SrKNI()( DCSCNOFe NOFe = IeSNOFe(pCSh;SrKNI)(</p>
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( ] [</p>
    <p>Step#3 locate vulnerable operations</p>
    <p>I/O, synchronization, resource,</p>
    <p>communication related method invocations,</p>
    <p>our heuristic</p>
    <p>vulnerable op found, mark</p>
  </div>
  <div class="page">
    <p>Step#4 encapsulate watchdog checkers public class SyncRequestProcessor$Checker { public static void serializeNode_reduced(OutputArchive arg0, DataNode arg1) { try{</p>
    <p>arg0.writeRecord(arg1, node); } catch (Throwable ex)</p>
    <p>} public static Status checkTargetFunction0() {  Context ctx = ContextFactory.serializeNode_reduced_context(); if (ctx.status == READY) { OutputArchive arg0 = ctx.args_getter(0); DataNode arg1 = ctx.args_getter(1); executor.runAsyncWithTimeout(serializeSnapshot_reduced(arg0, arg1), TIMEOUT); } else LOG.debug(checker context not ready);  } }</p>
    <p>extracted vulnerable operations</p>
  </div>
  <div class="page">
    <p>UOKF RerKCLKzeNOFe(OTSpTS-rEhKUe OC&quot; ;SrKNI.TKLFer pCSh) ShrOVR IO1xEepSKON { ;SrKNI pCSh;SrKNI = pCSh.SO;SrKNI()( DCSCNOFe NOFe = IeSNOFe(pCSh;SrKNI)(</p>
    <p>;SrKNI EhKLFreN@A = NTLL( RXNEhrONKzeF (NOFe) { OC.VrKSe:eEOrF(NOFe&quot; NOFe )( ;eS);SrKNI+ EhKLFR = NOFe.IeS/hKLFreN()( KH (EhKLFR != NTLL) EhKLFreN = EhKLFR.SO-rrCX(NeV ;SrKNI@EhKLFR.RKze()A)( [ pCSh.CppeNF('/')( KNS OHH = pCSh.LeNISh()( ] [</p>
    <p>Step#5 insert watchdog hooks</p>
    <p>insert context hook before vulnerable operation</p>
    <p>!/ONSexSFCESOrX.RerKCLKzeNOFeBEONSexSBReSSer(OC&quot; NOFe)(</p>
  </div>
  <div class="page">
    <p>Validation</p>
    <p>An error reported by a watchdog checker could be transient or tolerable. e.g. a transient network delay that caused no damage</p>
    <p>Watchdog driver by default simply re-executes the checker and compare for transient errors. OmegaGen also allows developers write their own user-defined validation tasks to check some entry functions, e.g., processRequest(req)</p>
    <p>The tool would automate the part of deciding which validation task to invoke depending on which checker failed.</p>
  </div>
  <div class="page">
    <p>Prevent Side Effects</p>
    <p>Context Replication (memory isolation) context manager will replicate the checker context so that any modifications are contained in the watchdogs state</p>
    <p>main program</p>
    <p>watchdogs</p>
    <p>check</p>
    <p>time</p>
    <p>DataNode</p>
    <p>DataNode</p>
    <p>DataNode</p>
    <p>replicate</p>
    <p>DIRTY corrupt</p>
  </div>
  <div class="page">
    <p>Prevent Side Effects</p>
    <p>Context Replication (memory isolation) to reduce performance overhead: immutability analysis + lazy copy</p>
    <p>main program</p>
    <p>watchdogs</p>
    <p>check</p>
    <p>lazy copy</p>
    <p>DataNode 1</p>
    <p>DataNode 4</p>
    <p>DataNode 2</p>
    <p>time</p>
    <p>DataNode 3</p>
    <p>DataNode 4</p>
    <p>DataNode 1</p>
    <p>DataNode 2</p>
    <p>DataNode 3</p>
    <p>skipskipskip</p>
  </div>
  <div class="page">
    <p>Prevent Side Effects</p>
    <p>Context Replication (memory isolation) check consistency before copying and invocation with hashCode and versioning</p>
    <p>main program</p>
    <p>watchdogs</p>
    <p>check</p>
    <p>lazy copy</p>
    <p>DataNode 1</p>
    <p>DataNode 2</p>
    <p>DataNode 2</p>
    <p>DataNode 3</p>
    <p>check</p>
    <p>DataNode 3</p>
    <p>DataNode3 (m)</p>
    <p>mutated</p>
    <p>hash(val1) hash(val2)!=</p>
    <p>time</p>
    <p>unmatch, skip!</p>
  </div>
  <div class="page">
    <p>Prevent Side Effects</p>
    <p>I/O Redirection and Idempotent Wrappers (I/O isolation) write: file-related resource replicated with target path changed to test file</p>
    <p>read: watchdogs pre-read contexts and cache</p>
    <p>write-redirection read-redirection</p>
    <p>WD 1</p>
    <p>wrapper 1</p>
    <p>BufferStream</p>
    <p>buffer buffer</p>
    <p>flags flags</p>
    <p>outputFile (a.out)</p>
    <p>outputFile (a.out.mirror)</p>
    <p>copy 2 2</p>
    <p>check</p>
    <p>hang</p>
    <p>check</p>
    <p>timeout X</p>
    <p>try to fetch</p>
    <p>time</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluated systems</p>
    <p>ZooKeeper Cassandra HDFS HBase MapReduce Yarn</p>
    <p>SLOC 28K 102K 219K 728K 191K 229K</p>
    <p>Methods 3,562 12,919 79,584 179,821 16,633 10,432</p>
    <p>Scale of evaluated system software</p>
  </div>
  <div class="page">
    <p>Watchdog generation</p>
    <p>ZooKeeper Cassandra HDFS HBase MapReduce Yarn</p>
    <p>Watchdogs 96 190 174 358 161 88</p>
    <p>Methods 118 464 482 795 371 222</p>
    <p>Operations 488 2,112 3,416 9,557 6,116 752</p>
    <p>Number of watchdogs and checkers generated</p>
  </div>
  <div class="page">
    <p>JIRA Id. Id. Root Cause Conseq. Sticky? Study? ZooKeeper-2201 ZK1 Bad Synch. Stuck No Yes ZooKeeper-602 ZK2 Uncaught Error Zombie Yes Yes</p>
    <p>ZooKeeper-2325 ZK3 Logic Error Inconsist Yes No ZooKeeper-3131 ZK4 Resource Leak Slow Yes Yes Cassandra-6364 CS1 Uncaught Error Zombie Yes Yes Cassandra-6415 CS2 Indefinite Blocking Stuck No Yes Cassandra-9549 CS3 Resource Leak Slow Yes No Cassandra-9486 CS4 Performance Bug Slow Yes No</p>
    <p>HDFS-8429 HF1 Uncaught Error Stuck Yes Yes HDFS-11377 HF2 Indefinite Blocking Stuck No Yes HDFS-11352 HF3 Deadlock Stuck Yes No HDFS-4233 HF4 Uncaught Error Data Loss Yes No</p>
    <p>HBase-18137 HB1 Infinite Loop Stuck Yes No HBase-16429 HB2 Deadlock Stuck Yes No HBase-21464 HB3 Logic Error Stuck Yes No HBase-21357 HB4 Uncaught Error Denial Yes No HBase-16081 HB5 Indefinite Blocking Silent Yes No</p>
    <p>MapReduce-6351 MR1 Deadlock Stuck Yes No MapReduce-6190 MR2 Infinite Loop Stuck Yes No MapReduce-6957 MR3 Improper Err Handling Stuck Yes No MapReduce-3634 MR4 Uncaught Error Zombie Yes No</p>
    <p>Yarn-4254 YN1 Improper Err Handling Stuck Yes No</p>
  </div>
  <div class="page">
    <p>Detection Setup</p>
    <p>Detector Description</p>
    <p>Client (Panorama [OSDI 18]) instrument and monitor client responses</p>
    <p>Probe (Falcon [SOSP 11])</p>
    <p>daemon thread in the process that periodically invokes internal functions with synthetic requests</p>
    <p>Signal script that scans logs and checks JMX metrics</p>
    <p>Resource daemon thread that monitors memory usage, disk and I/O health, and active thread count</p>
    <p>Baseline checkers</p>
  </div>
  <div class="page">
    <p>Detection Time</p>
    <p>ZK1 ZK2 ZK3 ZK4 CS1 CS2 CS3 CS4 HF1 HF2 HF3 HF4 HB1 HB2 HB3 HB4 HB5 MR1 MR2 MR3 MR4 YN1</p>
    <p>Client  2.47 2.27  441         4.81  6.62     8.54 7.38</p>
    <p>Probe     15.84         4.71  7.76</p>
    <p>Signal 12.2 0.63 1.59 0.4 5.31       0.77 0.619  0.62 61.0     0.60 1.16</p>
    <p>Res. 5.33 0.56 0.72 17.17 209.5  -19.65  -3.13   0.83    0.60</p>
    <p>Watch 4.28 -5.89 3.00 41.19 -3.73 4.63 46.56 38.72 1.10 6.20 3.17 2.11 5.41 7.89  0.80 5.89 1.01 4.07 1.46 4.68</p>
    <p>Detection times (in secs) for the real-world cases</p>
  </div>
  <div class="page">
    <p>Detection Localization</p>
    <p>n/a</p>
    <p>UOKF RerKCLKzeNOFe() { RKze=RKze!1( OC.VrKSeINS(RKze)( OC.HLTRh()( [</p>
    <p>OC.VrKSeINS(RKze)(</p>
    <p>UOKF RerKCLKzeNOFe() { RKze=RKze!1( OC.VrKSeINS(RKze)( OC.HLTRh()( [</p>
    <p>OC.VrKSeINS(RKze)( NOT</p>
    <p>DETECTED pid1 pid2pid1</p>
    <p>RCUe() ..RerKCLKze;NCpRhOS() ].RerKCLKze() ]]RerKCLKzeNOFe()</p>
    <p>;erKCLKzer&lt;hreCF,rTN() ] RCUe() ..RerKCLKze;NCpRhOS() ].RerKCLKze()</p>
    <p>]]RerKCLKzeNOFe()</p>
    <p>faulty instr faulty func faulty call chain faulty entry faulty proc misjudged procno localize</p>
  </div>
  <div class="page">
    <p>Detection Localization ZK1 ZK2 ZK3 ZK4 CS1 CS2 CS3 CS4 HF1 HF2 HF3 HF4 HB1 HB2 HB3 HB4 HB5 MR1 MR2 MR3 MR4 YN1</p>
    <p>Client n/a   n/a  n/a n/a n/a n/a n/a n/a n/a n/a  n/a  n/a n/a n/a n/a</p>
    <p>Probe n/a n/a n/a n/a  n/a n/a n/a n/a n/a n/a n/a n/a  n/a  n/a n/a n/a n/a n/a n/a</p>
    <p>Signal      n/a n/a n/a n/a n/a n/a   n/a   n/a n/a n/a n/a</p>
    <p>Res.      n/a  n/a  n/a n/a  n/a n/a n/a  n/a n/a n/a n/a n/a n/a</p>
    <p>Watch               n/a       n/a</p>
    <p>Failure localization for the real-world cases.</p>
    <p>n/a</p>
    <p>UOKF RerKCLKzeNOFe() { RKze=RKze!1( OC.VrKSeINS(RKze)( OC.HLTRh()( [</p>
    <p>OC.VrKSeINS(RKze)(</p>
    <p>UOKF RerKCLKzeNOFe() { RKze=RKze!1( OC.VrKSeINS(RKze)( OC.HLTRh()( [</p>
    <p>OC.VrKSeINS(RKze)( NOT</p>
    <p>DETECTED pid1 pid2pid1</p>
    <p>RCUe() ..RerKCLKze;NCpRhOS() ].RerKCLKze() ]]RerKCLKzeNOFe()</p>
    <p>;erKCLKzer&lt;hreCF,rTN() ] RCUe() ..RerKCLKze;NCpRhOS() ].RerKCLKze()</p>
    <p>]]RerKCLKzeNOFe()</p>
    <p>faulty instr faulty func faulty call chain faulty entry faulty proc misjudged procno localize</p>
  </div>
  <div class="page">
    <p>[] Start to check for watchdog[ 66/96 ] [] Ready to run checker: org.apache.zookeeper.server.DataTree@void serializeAcls(org.apache.jute.OutputArchive) [] Start to check for interfaceinvoke a_.&lt;org.apache.jute.OutputArchive: void writeInt(int,java.lang.String)&gt;($r0, map) [] Try to clone for writeInt_$1, writeInt_$2 [] Status: TIMEOUT. Description: Execution time exceeds threshold. [] Context Index: 11763 [] Start to validate captured error..</p>
    <p>Discover new bug</p>
    <p>pTDLKE UOKF RerKCLKze-ELR() { ]</p>
    <p>RXNEhrONKzeF(ShKR) {</p>
    <p>OC.VrKSeINS(LONIKeXMCp.RKze()&quot; MCp )( HOr (MCp.1NSrX)LONI&quot; LKRS)-/L++ UCL ' LONIKeXMCp.eNSrX;eS()) { OC.VrKSeLONI(UCL.IeSKeX()&quot; LONI )(</p>
    <p>[ [</p>
    <p>[</p>
    <p>[] Start to check for interfaceinvoke a_.&lt;org.apache.jute.OutputArchive: void writeInt(int,java.lang.String)&gt;($r0, map) OC.VrKSeINS(LONIKeXMCp.RKze()&quot; MCp )(</p>
    <p>TIMEOUT</p>
  </div>
  <div class="page">
    <p>Discover new bug</p>
  </div>
  <div class="page">
    <p>False alarms</p>
    <p>ZooKeeper Cassandra HDFS HBase MapReduce Yarn</p>
    <p>probe 0% 0% 0% 0% 0% 0%</p>
    <p>resource 0%-3.4% 0%-6.3% 0.05%-3.5% 0%-3.72% 0.33%-0.67% 0%-6.1%</p>
    <p>signal 3.2%-9.6% 0% 0%-0.05% 0%-0.67% 0% 0%</p>
    <p>watch. 0%-0.73% 0%-1.2% 0% 0%-0.39% 0% 0%-0.31%</p>
    <p>watch_v. 0%-0.01% 0% 0% 0%-0.07% 0% 0%</p>
    <p>False alarm ratios of all detectors for six systems under various setups</p>
  </div>
  <div class="page">
    <p>System overhead</p>
    <p>ZooKeeper Cassandra HDFS HBase MapReduce Yarn</p>
    <p>Base 428.0 3174.9 90.6 387.1 45.0 45.0</p>
    <p>w/ Probe. 417.6 3128.2 89.4 374.3 44.9 44.9 w/</p>
    <p>Resource. 424.8 3145.4 89.9 385.6 44.9 44.6</p>
    <p>w/ Watch. 399.8 3014.7 85.1 366.4 42.1 42.3</p>
    <p>Throughput (op/s) w/ different checkers Heap memory usage w/ and w/o watchdogs</p>
  </div>
  <div class="page">
    <p>Conclusions Modern software are increasingly complex and often fail partially these partial failures cannot be detected by process-level failure detectors</p>
    <p>We conducted a study on 100 partial failure cases</p>
    <p>OmegaGen: a static analysis tool that automatically generates customized checkers successfully generate checkers for six systems and checkers can detect &amp;&amp; localize 18/22 real-world partial failures</p>
    <p>watchdog report helps to quickly discover a new bug in the latest zookeeper</p>
  </div>
  <div class="page">
    <p>Related Work Partial failures Fail-Stutter [HotOS 01], IRON [SOSP05], Limplock [SoCC '13], Fail-Slow Hardware [FAST '18], Gray Failure [HotOS '17]</p>
    <p>Failure detection Gossip [Middleware '98],  [SRDS '04], Falcon [SOSP '11], Pigeon [NSDI 13], Panorama [OSDI18]</p>
    <p>Software invariant generation Daikon [ICSE99], InvGen [CAV09], PCHECK [OSDI16]</p>
  </div>
</Presentation>
