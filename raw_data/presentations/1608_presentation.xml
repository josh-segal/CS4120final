<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Stash in a Flash</p>
    <p>Aviad Zuck, Yue li, Shuki Bruck, Donald E. Porter, Dan Tsafrir</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background  How to hide  Detectability  Performance  Conclusion</p>
  </div>
  <div class="page">
    <p>Context</p>
    <p>This paper is about hiding data with plausible deniability in flash memories</p>
    <p>Encryption denies access to private data  Our goal: adversary cant tell if system is even</p>
    <p>hiding data</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Human rights activist crossing a border in a country ruled by a dictatorship</p>
    <p>User device carries sensitive data  Intelligence officer at border checkpoint</p>
    <p>inspects device  Can confiscate device, and demand encryption</p>
    <p>key!  May be resolved with plausible deniability</p>
  </div>
  <div class="page">
    <p>Our contribution (in context)</p>
    <p>New data hiding technique in flash  Going against a potent adversary (e.g.,</p>
    <p>government) is extremely challenging  This paper: a building block towards complete</p>
    <p>solution  Some pieces solved by others  Some pieces open problems</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background  How to hide  Detectability  Performance  Conclusion</p>
  </div>
  <div class="page">
    <p>Storing a single bit in flash</p>
  </div>
  <div class="page">
    <p>Storing multiple bits in flash</p>
    <p>Page is the read/write unit  Block is the erase unit</p>
    <p>Block (1-4MB)</p>
    <p>page (4-16KB)</p>
  </div>
  <div class="page">
    <p>Histogram of bits in a flash chip</p>
    <p>V</p>
    <p>SLC programming</p>
    <p>n u m</p>
    <p>b e</p>
    <p>r o f</p>
    <p>ce ll s</p>
    <p>V</p>
    <p>n u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>ce ll s MLC programm ing</p>
    <p>threshold voltage</p>
    <p>Voltage</p>
    <p>Voltage</p>
  </div>
  <div class="page">
    <p>Programming a cell</p>
    <p>Voltage</p>
    <p>Flash hardware logic internally applies multiple charging pulses</p>
  </div>
  <div class="page">
    <p>Programming is imprecise (1)</p>
    <p>V</p>
    <p>SLC programming</p>
    <p>n u m</p>
    <p>b e</p>
    <p>r o f</p>
    <p>ce ll s</p>
    <p>single logical state</p>
    <p>buffer zone</p>
    <p>target threshold</p>
    <p>Voltage</p>
  </div>
  <div class="page">
    <p>Programming is imprecise (2)  Variations exist at all levels:</p>
    <p>Flash chips of same vendor and model  Different areas in chip  Different blocks/pages in same area</p>
    <p>% o</p>
    <p>f ce</p>
    <p>lls i n p</p>
    <p>a g e</p>
    <p>Normalized voltage level</p>
    <p>Sample 1 Sample 2 Sample 3 Sample 4</p>
    <p>0</p>
    <p>pages</p>
  </div>
  <div class="page">
    <p>Interference increases variations</p>
    <p>Programming a cell partially charges neighboring cells  20% of non-programmed cells positively charged</p>
    <p>% o</p>
    <p>f ce</p>
    <p>lls in</p>
    <p>p a g</p>
    <p>e</p>
    <p>Normalized voltage level</p>
    <p>Sample 1 Sample 2 Sample 3 Sample 4</p>
    <p>1</p>
    <p>pages</p>
  </div>
  <div class="page">
    <p>Wear-out adds more variations</p>
    <p>Cell degradation right-shifts distributions as more Program/Erase Cycles (PEC) applied</p>
    <p>% o</p>
    <p>f ce</p>
    <p>lls in</p>
    <p>b lo</p>
    <p>ck</p>
    <p>Normalized voltage level</p>
    <p>PEC 0 PEC 1000 PEC 2000 PEC 3000</p>
    <p>older cells</p>
    <p>1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background  How to hide  Detectability  Performance  Conclusion</p>
  </div>
  <div class="page">
    <p>Threat model</p>
    <p>User has public + secret key  Encrypts public data using public key  Secret key for hidden data w/plausible deniability!</p>
    <p>Adversary (e.g., NSA):  Confiscate device for inspection  Can probe visible data and voltage levels*</p>
    <p>* Requires NDA with vendors</p>
  </div>
  <div class="page">
    <p>Storing a hidden bit in flash</p>
    <p>01</p>
    <p>Voltage-hide method I. Store public data using coarse-grain programming</p>
  </div>
  <div class="page">
    <p>Where to hide</p>
    <p>K = secret key, n bits to hide  PRNG initialized with secret key K  Draw n random offsets in public</p>
    <p>1/0 bits of page</p>
    <p>PRNG</p>
    <p>p a g e</p>
    <p>. . . . . . . . . . . . . . . . . .</p>
    <p>n random numbers</p>
    <p>1</p>
    <p>1</p>
    <p>1</p>
    <p>1</p>
    <p>1</p>
    <p>1</p>
  </div>
  <div class="page">
    <p>0</p>
    <p>How to hide Voltage-hide method</p>
    <p>I. Store public data using coarse-grain programming II. Select cells to store extra hidden bits (PRNG + secret key) III. Store hidden data using fine-grain programming</p>
    <p>V</p>
    <p>01</p>
    <p>0</p>
    <p>00</p>
    <p>1</p>
    <p>hidden bit threshold voltage</p>
  </div>
  <div class="page">
    <p>0</p>
    <p>How to hide</p>
    <p>V</p>
    <p>01</p>
    <p>0</p>
    <p>00</p>
    <p>1</p>
    <p>hidden bit threshold voltage</p>
    <p>Voltage-hide method I. Store public data using coarse-grain programming II. Select cells to store extra hidden bits (PRNG + secret key) III. Store hidden data using fine-grain programming</p>
    <p>Vendors can tweak programming accuracy on the chip!  Voltage-level distribution width  Target voltage  Threshold voltage</p>
  </div>
  <div class="page">
    <p>Flash vendors: Control over low level features</p>
    <p>Us: Improvise by (very) crudely mimicking fine-grain programming</p>
  </div>
  <div class="page">
    <p>How to hide (cont.)</p>
    <p>Sequence of Partial-Programming (PP) steps (PROGRAM+ABORT)  Hiding in programmed cells too slow &amp; inaccurate  focus on non-programmed cells</p>
    <p>% o</p>
    <p>f ce</p>
    <p>lls in</p>
    <p>b lo</p>
    <p>ck</p>
    <p>Normalized voltage level</p>
    <p>normal '1'</p>
    <p>hidden '1' hidden '0'</p>
  </div>
  <div class="page">
    <p>Vendors can implement our scheme in firmware</p>
    <p>We are not flash vendors  We present an implementation on real</p>
    <p>hardware  Required vendor-specific voltage probing  Some limitations from inability to change firmware</p>
  </div>
  <div class="page">
    <p>Determining capacity</p>
    <p>Small number of nonprogrammed cells to manipulate (&lt;1K)  hide only 256 bits</p>
    <p>per page  Inherent limitation of</p>
    <p>not having vendor support</p>
    <p>right shift</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background  How to hide  Detectability  Performance  Conclusion</p>
  </div>
  <div class="page">
    <p>Basic idea</p>
    <p>Flash blocks with hidden data can be mistaken for normal blocks with similar age</p>
    <p>Voltage variations mistaken for naturally occurring ones (e.g., age, process variation)</p>
  </div>
  <div class="page">
    <p>Simulating adversary</p>
    <p>Apply Support Vector Machine (SVM) to voltage data</p>
    <p>Three chips with mix of public &amp; hidden data  Train: two chips, know which pages have hidden</p>
    <p>data  Classify: 3rd chip: given voltages, has hidden data?</p>
    <p>Hidden and public data PEC vary  e.g., normal PEC 1000, hidden PEC 2000  Optimal for adversary!</p>
  </div>
  <div class="page">
    <p>C la</p>
    <p>ss ifi</p>
    <p>ca tio</p>
    <p>n ac</p>
    <p>cu ra</p>
    <p>cy (%</p>
    <p>)</p>
    <p>Normal data PEC</p>
    <p>random guess</p>
    <p>Blocks w/hidden data</p>
    <p>Works when hidden and normal data PEC are close enough</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background  How to hide  Detectability  Performance  Conclusion</p>
  </div>
  <div class="page">
    <p>Metric Our method State of the art* Why?</p>
    <p>Encoding thr. 35 Kb/s 1.4 Kb/s Fewer programming steps (10 vs. hundreds)Latency (single bit) 6.9 ms 798 ms</p>
    <p>Energy 1,183 uJ 43,624 uJ</p>
    <p>Decoding thr. 2.7 Mb/s 54 Kb/s Single read vs. dozens of programming steps  Reduced wear out!</p>
    <p>* Hiding information in flash memory, IEEE Symposium on Security and Privacy (SP) 2013</p>
  </div>
  <div class="page">
    <p>Reliability and retention</p>
    <p>Emulate different retention periods using standard techniques*  Bake flash chip in special oven</p>
    <p>* Extended arrhenius law of time-to-breakdown of ultrathin gate oxides, APL03</p>
  </div>
  <div class="page">
    <p>N o rm</p>
    <p>a liz</p>
    <p>e d B</p>
    <p>E R</p>
    <p>PEC 0 PEC 1000 PEC 2000</p>
    <p>VT-HI normal VT-HI normal VT-HI normal</p>
    <p>Reliability and retention (cont.)</p>
    <p>normalized to zero time</p>
    <p>fresh cells retention  aged cells</p>
    <p>retention</p>
    <p>fresh cells retention</p>
    <p>aged cells retention</p>
    <p>Over time need stronger ECC/refresh</p>
  </div>
  <div class="page">
    <p>Reliability and retention (cont.)</p>
    <p>State of the art:  Similar BER for fresh cells</p>
    <p>(0.3% vs. 0.5% in VT-HI)  Unacceptable BER even for slightly aged cells</p>
    <p>(e.g., 12% BER for PEC 100)</p>
  </div>
  <div class="page">
    <p>Capacity</p>
    <p>So far mimicked fine-grain programming  Incremental PP  Bits per page: 256 vs. 1024 for state of the art</p>
    <p>Lets simulate what if we had vendor support?  10 PP  1 PP  256 bits x 10 2560 bits</p>
  </div>
  <div class="page">
    <p>How does hiding 10x more bits affect detectability?</p>
    <p>C la</p>
    <p>ss ifi</p>
    <p>ca tio</p>
    <p>n ac</p>
    <p>cu ra</p>
    <p>cy ( %</p>
    <p>)</p>
    <p>Normal data PEC</p>
    <p>PEC 0 PEC 1000 PEC 2000</p>
    <p>random guess1. Slightly more detectable</p>
  </div>
  <div class="page">
    <p>Vendor support (cont.)</p>
    <p>Problems should be resolved with vendor support: - Less interference, more accuracy - Can hide in programmed cells!</p>
    <p>Low-capacity &amp; suboptimal High-capacity, Efficient &amp; accurate</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>We can hide data within natural voltage variations  Already common to increase flash densities</p>
    <p>Vs. State of art:  24x and 50x faster encoding/decoding,  37x more power efficient, and  less wear</p>
    <p>Capacity should improve with vendor support</p>
    <p>Questions?</p>
  </div>
</Presentation>
