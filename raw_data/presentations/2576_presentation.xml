<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>I Know What Your Packet Did Last Hop: Using Packet Histories</p>
    <p>to Troubleshoot Networks</p>
    <p>Nikhil Handigol With</p>
    <p>Brandon Heller, Vimal Jeyakumar, David Mazires, Nick McKeown NSDI 2014, SeaOle, WA</p>
    <p>April 2, 2014</p>
  </div>
  <div class="page">
    <p>Bug Story: Incomplete Handover A</p>
    <p>B</p>
    <p>Switch X</p>
    <p>WiFi AP Y WiFi AP Z</p>
    <p>Match: AcQon Src A, Dst B: Output to Y</p>
  </div>
  <div class="page">
    <p>Network Outages make news headlines</p>
    <p>HosQng.com's New Jersey data center was taken down on June 1, 2010, igniQng a cloud outage and connec7vity loss for nearly two hours HosQng.com said the connecQvity loss was due to a so&gt;ware bug in a Cisco switch that caused the switch to fail.</p>
    <p>On April 26, 2010, NetSuite suffered a service outage that rendered its cloud-based applicaQons inaccessible to customers worldwide for 30 minutes NetSuite blamed a network issue for the downQme.</p>
    <p>The Planet was rocked by a pair of network outages that knocked it off line for about 90 minutes on May 2, 2010. The outages caused disrupQons for another 90 minutes the following morning.... InvesQgaQon found that the outage was caused by a fault in a router in one of the company's data centers.</p>
  </div>
  <div class="page">
    <p>TroubleshooQng Networks is Hard Today</p>
    <p>ping</p>
    <p>traceroute</p>
    <p>tcpdump/SPAN/sFlow</p>
    <p>SNMP</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Tedious and ad hoc  Requires skill and experience  Not guaranteed to provide helpful answers</p>
    <p>Lots and lots of graphs</p>
    <p>(source: NANOG Survey in AutomaQc Test Packet GeneraQon, Hongyi Zeng, et. al.)</p>
  </div>
  <div class="page">
    <p>We want complete network visibility</p>
    <p>ping</p>
    <p>traceroute sFlow</p>
    <p>SNMP</p>
    <p>Complete visibility: every event that ever happened to every packet</p>
    <p>We want to be here Visibility Spectrum</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
  </div>
  <div class="page">
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Packet History</p>
    <p>Packet history = Path taken by a packet + Header modificaQons</p>
    <p>+ Switch state encountered</p>
  </div>
  <div class="page">
    <p>Our TroubleshooQng Workflow</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
    <p>Forwarding State</p>
  </div>
  <div class="page">
    <p>NetSight A plagorm to capture and filter packet histories of interest</p>
  </div>
  <div class="page">
    <p>Postcard Collector</p>
    <p>Control Plane</p>
    <p>Flow Table State Recorder</p>
  </div>
  <div class="page">
    <p>Postcard Collector</p>
    <p>Control Plane</p>
    <p>Flow Table State Recorder Match ACT</p>
    <p>Match ACT</p>
  </div>
  <div class="page">
    <p>Postcard Collector</p>
    <p>Control Plane</p>
    <p>Flow Table State Recorder</p>
  </div>
  <div class="page">
    <p>Postcard Collector</p>
    <p>Control Plane</p>
    <p>Flow Table State Recorder</p>
    <p>Version -&gt; Flow Table State</p>
    <p>Packet Header</p>
    <p>Switch ID Output port</p>
    <p>Version</p>
    <p>Step 1: Generate postcards</p>
  </div>
  <div class="page">
    <p>ReconstrucQng Packet Histories Step 2: Group postcards by generaQng packet</p>
    <p>Packet Header</p>
    <p>Switch ID Output port</p>
    <p>Version</p>
    <p>Packet Header</p>
    <p>Switch ID Output port</p>
    <p>Version</p>
    <p>Packet Header</p>
    <p>Switch ID Output port</p>
    <p>Version</p>
    <p>Packet Header</p>
    <p>Switch ID Output port</p>
    <p>Version</p>
  </div>
  <div class="page">
    <p>ReconstrucQng Packet Histories Step 3: Sort postcards using topology</p>
    <p>Topo-sort</p>
  </div>
  <div class="page">
    <p>Postcard Collector</p>
    <p>Control Plane</p>
    <p>Flow Table State Recorder</p>
  </div>
  <div class="page">
    <p>Control Plane</p>
    <p>Flow Table State Recorder</p>
    <p>Postcard Collector</p>
    <p>NetSight API Packet History Filter: A regular-expression-like language to specify packet histories of interest</p>
    <p>Reachability errors  IsolaQon violaQon  Black holes  Waypoint rouQng violaQon</p>
    <p>TroubleshooQng Apps</p>
    <p>Postcards</p>
    <p>Packet History Assembly</p>
    <p>TroubleshooQng ApplicaQon</p>
    <p>TroubleshooQng ApplicaQon</p>
    <p>TroubleshooQng ApplicaQon</p>
    <p>TroubleshooQng App</p>
    <p>Filtered Packet Histories</p>
  </div>
  <div class="page">
    <p>Bug Story: Incomplete Handover</p>
    <p>Packet History Filter</p>
    <p>Packet History</p>
    <p>WiFi AP Y WiFi AP Z</p>
    <p>Switch X</p>
    <p>Packet History Filter Pkts from server not reaching the client</p>
    <p>Packet History Switch X: inport: p0, outports: [p1] mods: [...] state version: 3 Switch Y: inport p1, outports: [p3] mods: ...</p>
    <p>Y</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>TroubleshooQng Apps</p>
    <p>netshark nprof</p>
    <p>ndb netwatch ndb: InteracQve network debugger</p>
    <p>netwatch: Live network invariant monitor</p>
    <p>netshark: Network-wide wireshark</p>
    <p>nprof: Hierarchical network profiler</p>
  </div>
  <div class="page">
    <p>But will it scale?</p>
  </div>
  <div class="page">
    <p>Why generaQng postcards for every packet at every hop is crazy!</p>
    <p>Network Overhead  64 byte-postcard/pkt/hop  Stanford Network: 5 hops avg, 1031 byte avg pkt  31% extra traffic!</p>
    <p>Processing Overhead  Packet history assembly and filtering</p>
    <p>Storage Overhead</p>
  </div>
  <div class="page">
    <p>Why generaQng postcards for every packet at every hop is ^ crazy!</p>
    <p>Cost is OK for low-uQlizaQon networks  E.g., test networks, bring-up phase networks  Single server can handle enQre Stanford traffic</p>
    <p>not</p>
  </div>
  <div class="page">
    <p>Why generaQng postcards for every packet at every hop is ^ crazy!</p>
    <p>Huge redundancy in packet header fields  Only a few fields change  IP ID, TCP seq. no.  Postcards can be compressed to 10-20 bytes/pkt</p>
    <p>not</p>
    <p>Diff-based compression</p>
  </div>
  <div class="page">
    <p>Why generaQng postcards for every packet at every hop is ^ crazy!</p>
    <p>Postcard processing is embarrassingly parallel  Each packet history can be processed independent of other packet histories</p>
    <p>not</p>
    <p>Assembly Filtering</p>
  </div>
  <div class="page">
    <p>Scaling NetSight Performance</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Postcards</p>
    <p>Shuffle</p>
    <p>Compressed Postcard Lists</p>
    <p>Compressed Packet Histories</p>
  </div>
  <div class="page">
    <p>Scaling NetSight Performance</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Postcards</p>
    <p>Shuffle</p>
    <p>Compressed Postcard Lists</p>
    <p>Compressed Packet Histories</p>
  </div>
  <div class="page">
    <p>Scaling NetSight Performance</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Postcards</p>
    <p>Shuffle</p>
    <p>Compressed Postcard Lists</p>
    <p>Compressed Packet Histories</p>
  </div>
  <div class="page">
    <p>Scaling NetSight Performance</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Postcards</p>
    <p>Shuffle</p>
    <p>Compressed Postcard Lists</p>
    <p>Compressed Packet Histories</p>
  </div>
  <div class="page">
    <p>NetSight Variants</p>
  </div>
  <div class="page">
    <p>NetSight-SwitchAssist moves postcard compression to switches</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Shuffle</p>
    <p>Move postcard compression to switches with simple hardware mechanisms</p>
  </div>
  <div class="page">
    <p>NetSight-HostAssist exploits visibility from the hypervisor</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>Switch</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>NetSight Server</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Disk</p>
    <p>Shuffle</p>
    <p>HV Packet Header</p>
    <p>Mini-postcards contain only unique pkt ID and switch state version</p>
    <p>(1) Store packet header at the hypervisor (2) Add unique pkt ID</p>
  </div>
  <div class="page">
    <p>Overhead ReducQon in NetSight</p>
    <p>Basic (nave) NetSight : 31% extra traffic in Stanford backbone network</p>
    <p>NetSight Switch-Assist: 7%</p>
    <p>NetSight Host-Assist: 3%</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>Complete network visibility is possible  Packet History: a powerful troubleshooQng abstracQon that gives complete visibility</p>
    <p>NetSight: a plagorm to capture and filter packet histories of interest</p>
    <p>Complete network visibility is feasible  It is possible to collect and filter packet histories at scale</p>
  </div>
  <div class="page">
    <p>I Know What Your Packet Did Last Hop: Using Packet Histories to Troubleshoot Networks</p>
    <p>Nikhil Handigol, Brandon Heller, Vimalkumar Jeyakumar, David Mazieres, Nick McKeown {nikhilh,brandonh}@cs.stanford.edu, {jvimal,nickm}@stanford.edu, http: // www. scs. stanford. edu/</p>
    <p>~</p>
    <p>dm/ addr/</p>
    <p>Stanford University, Stanford, CA USA  These authors contributed equally to this work</p>
    <p>Abstract</p>
    <p>The complexity of networks has outpaced our tools to debug them; today, administrators use manual tools to diagnose problems. In this paper, we show how packet historiesthe full stories of every packets journey through the networkcan simplify network diagnosis. To demonstrate the usefulness of packet histories and the practical feasibility of constructing them, we built NetSight, an extensible platform that captures packet histories and enables applications to concisely and flexibly retrieve packet histories of interest. Atop NetSight, we built four applications that illustrate its flexibility: an interactive network debugger, a live invariant monitor, a path-aware history logger, and a hierarchical network profiler. On a single modern multi-core server, NetSight can process packet histories for the traffic of multiple 10 Gb/s links. For larger networks, NetSight scales linearly with additional servers and scales even further with straightforward additions to hardware- and hypervisor-based switches.</p>
    <p>We could easily diagnose many network problems if we could ask the network about suspect trac and receive an immediate answer. For example:</p>
    <p>Today, we cannot just ask these questions. Our network diagnosis tools either provide no way to pose such a question, or lack access to the information needed to provide a useful answer. But, these questions could be answered with an omniscient view of every packets journey through the network. We call this notion a packet history. More specifically,</p>
    <p>Definition A packet history is the route a packet takes through a network plus the switch state and header modifications it encounters at each hop.</p>
    <p>A single packet history can be the smoking gun that reveals why, how, and where a network failed, evidence that would otherwise remain hidden in gigabytes of message logs, flow records [8, 34], and packet dumps [15, 18, 32].</p>
    <p>Using this construct, it becomes possible to build network analysis programs to diagnose problems. We built four such applications: (1) ndb, an interactive network debugger, (2) netwatch, a live network invariant monitor, (3) netshark, a networkwide packet history logger, and (4) nprof, a hierarchical network profiler. The problems described above are a small sample from the set of problems these applications can help solve.</p>
    <p>These four applications run on top of a prototype platform we built, called NetSight. With a view of</p>
    <p>Every</p>
    <p>NetSight API</p>
    <p>hOp://yuba.stanford.edu/netsight</p>
  </div>
</Presentation>
