<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SATenstein: Automatically Building Local Search</p>
    <p>SAT Solvers From Components</p>
    <p>Ashiqur R. KhudaBukhsh, Lin Xu, Holger H. Hoos, Kevin Leyton-Brown</p>
    <p>Department of Computer Science</p>
    <p>University of British Columbia</p>
    <p>Canada</p>
  </div>
  <div class="page">
    <p>SATenstein?</p>
    <p>Frankenstein</p>
    <p>Create perfect human being from scavenged body parts</p>
    <p>SATenstein</p>
    <p>Create high-performance SAT solvers using components scavenged from existing solvers</p>
  </div>
  <div class="page">
    <p>Algorithm Design Approach</p>
    <p>Traditional approach  Hard-code various design choices  Iteratively conduct small experiments to improve the</p>
    <p>design</p>
    <p>Our approach  Make all design options explicit, encoding them as</p>
    <p>parameters  Results in a generalized, highly parameterized algorithm  Instantiation produces many different solvers</p>
    <p>Given a distribution, set the parameters using an automatic algorithm configuration procedure</p>
  </div>
  <div class="page">
    <p>SATenstein</p>
    <p>A highly parameterized, generalized SLS solver built on top of UBCSAT solver framework [Tompkins &amp; Hoos, 2004]</p>
    <p>3 categories of SLS algorithms  WalkSAT, G2WSAT, dynamic local search algorithms</p>
    <p>25 known algorithms</p>
    <p>41 parameters</p>
    <p>&gt; 2  1011 possible instantiations</p>
    <p>For each distribution, configured using ParamILS [Hutter et al., 2007-2009]</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>SLS SAT solvers  GSAT [Selman et al., 1992]  WalkSAT [Selman et al., 1994]  SAPS [Hutter et al., 2002]  gNovelty+ [Pham and Gretton, 2007]</p>
    <p>UBCSAT [Tompkins &amp; Hoos, 2004]  SLS solver development framework</p>
    <p>Genetic programming [Fukunaga, 2002; 2004]  Evolve variable selection mechanism for SLS solver</p>
    <p>SATzilla [Xu et al., 2008]  Instance-based algorithm selection from portfolio of SAT</p>
    <p>solvers</p>
  </div>
  <div class="page">
    <p>SATenstein vs SATzilla</p>
    <p>SATenstein  Can instantiate billions of solvers,</p>
    <p>most never studied before</p>
    <p>Selects a given configuration on a per-distribution basis</p>
    <p>Does not use runtime prediction</p>
    <p>SATzilla [Xu et al., 2008]  Relatively small number of known</p>
    <p>solvers</p>
    <p>Selects a given algorithm on a perinstance basis</p>
    <p>Creates empirical hardness model from given run-time data</p>
    <p>The approaches are complementary  SATenstein solvers can be used in SATzilla</p>
    <p>Satzilla2009_R in SAT competition 2009  Gold in random SAT+UNSAT  4th in random SAT</p>
  </div>
  <div class="page">
    <p>Performance objective</p>
    <p>Penalized Average Runtime (PAR)</p>
    <p>Want: Minimize mean runtime  What about capped runs?</p>
    <p>PAR = avg(completed runs + penalty  cutoff time)</p>
    <p>here: penalty = 10</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>6 well-known distributions of SAT instances</p>
    <p>Application/Industrial: FAC, CBMC-SE</p>
    <p>Crafted: QCP, SW-GCP,</p>
    <p>Random: HGEN, R3SAT</p>
    <p>11 challenger algorithms (medal-winning SLS solvers in the 2003 - 2008 SAT competitions)</p>
  </div>
  <div class="page">
    <p>Automatic configurator: ParamILS 2.2 [Hutter et al., 2007-2009]</p>
    <p>Iterated local search (ILS) based automated parameter tuning tool</p>
    <p>Previously used to tune:</p>
    <p>SPEAR, a highly parametric DPLL solver [Hutter et al., 2007a]</p>
    <p>SLS algorithm for timetabling [Chiarandini et al., 2008]</p>
    <p>CPLEX for mixed integer programming [Hutter et al., 2009]</p>
  </div>
  <div class="page">
    <p>Results  Factor of 70 - 1000 performance improvement over best</p>
    <p>challenger on QCP, HGEN, CBMC-SE</p>
    <p>Factor of 1.4 - 2 performance improvement over best challenger on SW-GCP, R3SAT and FAC</p>
    <p>Improved the state-of-the-art across all the solvers on</p>
    <p>SW-GCP, QCP , HGEN and R3SAT</p>
    <p>On CBMC-SE and FAC, reduced the gap between complete solvers and SLS solvers</p>
  </div>
  <div class="page">
    <p>PAR comparison on QCP</p>
  </div>
  <div class="page">
    <p>PAR comparison on CBMC(SE)</p>
  </div>
  <div class="page">
    <p>SATenstein-LS vs Top 3 challengers on HGEN</p>
  </div>
  <div class="page">
    <p>SATenstein-LS vs Top 3 challengers on CBMC-SE</p>
  </div>
  <div class="page">
    <p>SATenstein-LS vs Oracle on CBMC-SE</p>
    <p>Oracle selects the challenger with minimum median runtime on a per-instance basis</p>
  </div>
  <div class="page">
    <p>Conclusion  SATenstein: A new approach for building high</p>
    <p>performance algorithms.  A framework that flexibly combines components from</p>
    <p>high-performance algorithms</p>
    <p>A powerful algorithm configuration tool</p>
    <p>New state-of-the-art SAT solvers in 4 distributions</p>
    <p>Substantial improvement on 3 distributions</p>
    <p>(QCP, HGEN, CBMC-SE)</p>
    <p>Reduced gap between DPLL solvers and SLS solvers on CBMC-SE</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Use of preprocessing</p>
    <p>Mixed strategies</p>
    <p>Better understanding of the configurations found</p>
    <p>More problem distributions / other problems</p>
  </div>
</Presentation>
