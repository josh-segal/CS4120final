<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ModNet: A modular approach to network</p>
    <p>stack extension</p>
    <p>Sharvanath Pathak Vivek S. Pai</p>
    <p>Princeton University</p>
  </div>
  <div class="page">
    <p>Changing Trends in Networking</p>
    <p>Use of TCP for multimedia streaming o Netflix + YouTube &gt; 50% internet traffic at</p>
    <p>peak [Global Internet phenomena report]</p>
    <p>Tremendous growth of mobile devices o Wireless/mobile &gt; wired traffic by 2018</p>
    <p>[Cisco Visual Networking Index]</p>
  </div>
  <div class="page">
    <p>TCP Stack Limitations</p>
    <p>Little explicit feedback to applications</p>
    <p>Applications rely on implicit feedback o BW estimate via connection/request latency</p>
    <p>Hinders rapid content adaptation</p>
  </div>
  <div class="page">
    <p>TCP Stack Limitations</p>
    <p>Large buffers for performance (128kB-1MB) o Hides BWD-product, scheduler delays</p>
    <p>Slow to react to network hiccups o Large buffers drain slowly o Especially when BW drops</p>
  </div>
  <div class="page">
    <p>TCP Stack Limitations</p>
    <p>TCP stack modification o Want: better management of socket</p>
    <p>contents, timing and parameters</p>
    <p>Changing OS/stack/protocol difficult o Adoption: chicken &amp; egg problem o Deployment: middlebox problems</p>
  </div>
  <div class="page">
    <p>ModNet Overview</p>
    <p>Loosen the boundary between the OS and network applications</p>
    <p>Stick with TCP for practicality</p>
    <p>Provide opportunity for low-latency reaction</p>
  </div>
  <div class="page">
    <p>ModNet Techniques</p>
    <p>Delegation o Network modules for customizing TCP stack</p>
    <p>Inspection o Interfaces for exposing socket state</p>
    <p>Revocation o Modifying unsent socket buffer content</p>
  </div>
  <div class="page">
    <p>Delegation</p>
    <p>Allow sockets to be intercepted by one or more user-level modules o OS-like functionalities, e.g. socket buffer</p>
    <p>swapping</p>
    <p>o Reusable across applications, e.g. adaptive HTTP compression</p>
    <p>o Composable modules</p>
  </div>
  <div class="page">
    <p>Socket Stealing</p>
    <p>Application Module</p>
    <p>NIC</p>
    <p>ModNet (OS Kernel)</p>
    <p>Socki_app Sockm_left</p>
    <p>Sockm_right (Real)</p>
  </div>
  <div class="page">
    <p>Inspection</p>
    <p>Memory-mapped socket state o mmap (socket_fd, ) o Low cost: atomic counts &amp; shared memory o Safe access: shadowed values</p>
    <p>socket_state_struct last_ack_ts</p>
    <p>second_ack_ts last_ack_seq</p>
    <p>second_ack_seq tcp_sndwnd tcp_cwnd</p>
    <p>S TCP Socket</p>
    <p>mmap</p>
  </div>
  <div class="page">
    <p>Revocation</p>
    <p>o Allow applications to inspect or yank existing socket buffer data. modnet_yank (int socket_fd, char * buffer, int length,</p>
    <p>)</p>
    <p>o Affects only unsent (but OS-buffered) content</p>
    <p>o Normal mode: large buffers for performance Problems: yank &amp; replace for fast reaction</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Quantify the module overheads</p>
    <p>Evaluate the end-to-end performance of some interesting modules</p>
    <p>Evaluate the utility of revocation for more reactive video streaming</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Server Application (Nginx, Apache, MistServer)</p>
    <p>+</p>
    <p>ModNet Module (Image compression,</p>
    <p>SSD swap, etc.)</p>
    <p>Client Application (hLp client,</p>
    <p>VLC)</p>
    <p>Modified Linux Machine (ModNet )</p>
    <p>Standard Linux Machines</p>
  </div>
  <div class="page">
    <p>Overheads of Delegation</p>
    <p>Web server benchmark</p>
    <p>Nginx with and without dummy module</p>
    <p>400 concurrent connections from 2 client machines</p>
  </div>
  <div class="page">
    <p>Overheads of Delegation</p>
  </div>
  <div class="page">
    <p>Overheads of Delegation</p>
  </div>
  <div class="page">
    <p>Overheads of Delegation</p>
  </div>
  <div class="page">
    <p>Adaptive Image Compression</p>
    <p>Application-oblivious HTTP Jpeg compression (delegation)</p>
    <p>Passive bandwidth estimation (inspection)</p>
    <p>New dynamic Jpeg compression scheme o Adjust DCT coefficients mid-transmission o No client-side changes</p>
    <p>Similar experimental setup as last one</p>
  </div>
  <div class="page">
    <p>Jpeg module (3G network traces)</p>
  </div>
  <div class="page">
    <p>Jpeg module (3G network traces)</p>
  </div>
  <div class="page">
    <p>Jpeg module (3G network traces)</p>
  </div>
  <div class="page">
    <p>Swappable Socket Buffers</p>
    <p>Dynamic content generation</p>
  </div>
  <div class="page">
    <p>Dynamic Content Server</p>
    <p>THREAD 1</p>
    <p>THREAD 2</p>
    <p>THREAD 3</p>
    <p>Fast Client Request</p>
    <p>Slow Client Request BLOCKED on SEND!</p>
    <p>Connection Accept Queue</p>
    <p>BLOCKED on SEND!</p>
    <p>BLOCKED on SEND!</p>
  </div>
  <div class="page">
    <p>Swappable Socket Buffers</p>
    <p>Dynamic content generation o Flash crowd ties up all threads/processes o Server crawls, despite available bandwidth</p>
    <p>Socket buffer swap module o Swapping slow buffers to SSDs</p>
    <p>Dynamic file download with mixed workload</p>
  </div>
  <div class="page">
    <p>Swappable Socket Buffers</p>
    <p>OS-like functionalities in user space  Delegation for appropriate privileges,</p>
    <p>resource limits and scheduling</p>
    <p>Inspection - decide when to offload</p>
    <p>Revocation  yank slow content</p>
  </div>
  <div class="page">
    <p>Socket buffer swap module</p>
  </div>
  <div class="page">
    <p>Socket buffer swap module</p>
  </div>
  <div class="page">
    <p>Deduplicating Socket Buffers</p>
    <p>Templated dynamic web pages o Lots of near-duplicate content</p>
    <p>Reduce memory pressure via dedup</p>
    <p>Utilize the spare CPU cycles as opposed to spare SSD bandwidth in SSD swap module</p>
  </div>
  <div class="page">
    <p>Deduplication Module</p>
  </div>
  <div class="page">
    <p>Modified HTTP live streaming</p>
    <p>HLS (HTTP live streaming) protocol  When BW drops, buffered data causes</p>
    <p>slowdown</p>
    <p>With ModNet, server observes slowdown &amp; reacts as well  Truncation mechanism  Faster reaction using yank</p>
  </div>
  <div class="page">
    <p>Modified HTTP live streaming</p>
    <p>Inspection for estimating network conditions</p>
    <p>Revocation for yanking buffer content</p>
  </div>
  <div class="page">
    <p>Video streaming with revocation</p>
  </div>
  <div class="page">
    <p>Video streaming with revocation</p>
  </div>
  <div class="page">
    <p>Video streaming with revocation</p>
  </div>
  <div class="page">
    <p>Conclusions  ModNet enhances OS network API</p>
    <p>Delegation o Eases implementation and deployment of network stack extensions</p>
    <p>Inspection and Revocation o Better control and insight for applications and modules</p>
    <p>New interesting modules o Prove the utility of ModNet</p>
  </div>
  <div class="page">
    <p>Thanks sharvanath.info/modnet sharvanath@gmail.com</p>
  </div>
</Presentation>
