<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mark Gordon 1</p>
    <p>COMET: Code Offload by Migrating Execution Transparently</p>
    <p>OSDI'12</p>
    <p>Mark Gordon, Anoushe Jamshidi, Scott Mahlke, Z. Morley Mao, and Xu Chen</p>
    <p>University of Michigan, AT&amp;T Labs - Research</p>
  </div>
  <div class="page">
    <p>Mark Gordon 2</p>
    <p>Overview</p>
    <p>Introduction  Distributed Shared Memory  COMET Design  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Mark Gordon 3</p>
    <p>What is offloading?</p>
    <p>Mobile devices  Have limited resources  Are well connected</p>
    <p>Can we bring network resources to mobile?  Can a system transparently make this available?</p>
  </div>
  <div class="page">
    <p>Mark Gordon 4</p>
    <p>Related Work</p>
    <p>MAUI and CloneCloud  Utilize server resources</p>
    <p>Computation, energy, memory, disk</p>
    <p>'Capture and migrate' method level offloading</p>
    <p>Areas for improvement  Thread and synchronization support  Offload part of methods</p>
  </div>
  <div class="page">
    <p>Mark Gordon 5</p>
    <p>COMET's Goals</p>
  </div>
  <div class="page">
    <p>Mark Gordon 6</p>
    <p>Overview</p>
    <p>Introduction  Distributed Shared Memory  COMET Design  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Mark Gordon 7</p>
    <p>Distributed Shared Memory</p>
    <p>COMET is offloading + DSM  Offloading bridges computation disparity  DSM provides logically shared address space</p>
    <p>DSM usually applied to cluster environments  Low latency, high throughput</p>
    <p>Mobile relies on wireless communication</p>
  </div>
  <div class="page">
    <p>Mark Gordon 8</p>
    <p>X=123</p>
    <p>X=555</p>
    <p>X=555</p>
    <p>X=555</p>
    <p>X=?</p>
    <p>X=?</p>
    <p>X=123</p>
    <p>DSM (continued)</p>
    <p>Conventional DSM (Munin)</p>
    <p>X=123 Waited an RTT for a write Read could take RTT also</p>
  </div>
  <div class="page">
    <p>Mark Gordon 9</p>
    <p>Java Memory Model</p>
    <p>Dictates which writes a read can observe  Specifies 'happens-before' partial order</p>
    <p>Access in single thread totally ordered  Lazy Release Consistency locking</p>
    <p>Fundamental memory unit is the field</p>
    <p>Known alignment, known width</p>
  </div>
  <div class="page">
    <p>Mark Gordon 10</p>
    <p>Field DSM</p>
    <p>Track dirty fields locally  Need 'happens-before' established?</p>
    <p>Transmit dirty fields! (mark fields clean)</p>
    <p>Not clear it scales well past two endpoints  Not important to our motivation  Use classic cluster DSM on server</p>
  </div>
  <div class="page">
    <p>Mark Gordon 11</p>
    <p>Overview</p>
    <p>Introduction  Distributed Shared Memory  COMET Design  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Mark Gordon 12</p>
    <p>VM-synchronization</p>
    <p>Used to establish 'happens-before' relation  Directed operation between pusher and puller  Synchronizes</p>
    <p>Bytecode sources  Java thread stacks  Java heap</p>
  </div>
  <div class="page">
    <p>Mark Gordon 13</p>
    <p>Bytecode Update (Step 1 of 3)</p>
    <p>Operation begins by sending any new code</p>
    <p>I loaded file xyz.dex I have xyz.dex cachedSend xyz.dex[xyz.dex]</p>
    <p>Pusher</p>
    <p>Puller</p>
  </div>
  <div class="page">
    <p>Mark Gordon 14</p>
    <p>Stack Update (Step 2 of 3)</p>
    <p>Next we send over thread stacks</p>
    <p>Thread id: 2 job2::run pc:5 registers[42, 555, 0] workLoop pc:6 registers[0, [obj:9]] start pc:3 Registers[101, [obj:9]]</p>
    <p>Pusher Puller</p>
    <p>nom</p>
  </div>
  <div class="page">
    <p>Mark Gordon 15</p>
    <p>Heap Update (Step 3 of 3)</p>
    <p>Finally send over heap update  We send updates to any changed (or new) field  Only send updates of 'shared' heap</p>
    <p>Pusher Puller</p>
    <p>[obj:2].y = 1 [obj:4].z = [obj:3] ...</p>
  </div>
  <div class="page">
    <p>Mark Gordon 16</p>
    <p>Lock ownership</p>
    <p>Annotate with lock ownership flag  Establish 'happens-before' with VM-sync</p>
  </div>
  <div class="page">
    <p>Mark Gordon 17</p>
    <p>Thread Migration</p>
    <p>Thread migration trivial  Push VM-sync  Transfer lock ownership</p>
    <p>Pusher Puller</p>
  </div>
  <div class="page">
    <p>Mark Gordon 18</p>
    <p>Native Methods</p>
    <p>Written in C with bindings for Java  Math.sin(), OSFileSystem.write(), VMThread.currentThread()</p>
    <p>Native methods exist to  Access device resources (file system, display, etc)  For performance reasons  To work with existing libraries</p>
    <p>Not generally safe to run on either endpoint  Manually white list safe native methods</p>
  </div>
  <div class="page">
    <p>Mark Gordon 19</p>
    <p>Failure Recovery</p>
    <p>VM-synchronization is recovery safe  Always leave enough information on client  If server is lost resume threads running locally!  A few caveats (native methods)</p>
  </div>
  <div class="page">
    <p>Mark Gordon 20</p>
    <p>Tau-Scheduler</p>
    <p>= 2 * VM-synchronization time</p>
  </div>
  <div class="page">
    <p>Mark Gordon 21</p>
    <p>Implementation</p>
    <p>Built from gingerbread CyanogenMod source  ~5000 lines of C code  JIT not included</p>
    <p>Engine.c:offMigrateThread() offWriteU1(self, OFF_ACTION_MIGRATE); deactivate(self); offThreadWaitForResume(self);</p>
  </div>
  <div class="page">
    <p>Mark Gordon 22</p>
    <p>Overview</p>
    <p>Introduction  Distributed Shared Memory  COMET Design  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Mark Gordon 23</p>
    <p>Evaluation Setup</p>
    <p>Samsung Captivate (1 GHz Hummingbird)</p>
    <p>2 x 3.16GHz quad core Xeon X5460 cores</p>
  </div>
  <div class="page">
    <p>Mark Gordon 24</p>
    <p>Benchmarks</p>
    <p>8 applications from Google Play  Average speed-up of 2.88X on WiFi / 1.28X on 3G</p>
    <p>Average energy saving of 1.51X on WiFI / 0.84X on 3G</p>
    <p>2 computation benchmark applications  10.4X speed-up w/ WiFi on Linpack  500+X speed-up w/ multi-threaded factoring</p>
  </div>
  <div class="page">
    <p>Mark Gordon 25</p>
    <p>Rhino</p>
    <p>Java JavaScript Interpreter  Ran with SunSpider JavaScript benchmark</p>
  </div>
  <div class="page">
    <p>Mark Gordon 26</p>
    <p>Overview</p>
    <p>Introduction  Distributed Shared Memory  COMET Design  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Mark Gordon 27</p>
    <p>Summary</p>
    <p>Offloading+DSM=COMET  Improve computation speed  No programmer effort  Generalize well  Resist network failures</p>
  </div>
  <div class="page">
    <p>Mark Gordon 28</p>
    <p>Contributions</p>
    <p>Design/Impl. with four simultaneous goals  Fine granularity offloading  Mutli-threading support</p>
    <p>Field based DSM coherency</p>
  </div>
  <div class="page">
    <p>Mark Gordon 29</p>
    <p>Questions?</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Mark Gordon 30</p>
    <p>Macrobenchmarks</p>
  </div>
  <div class="page">
    <p>Mark Gordon 31</p>
    <p>Macrobenchmarks (continued)</p>
  </div>
</Presentation>
