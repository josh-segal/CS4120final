<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Approximation Algorithms for Prize-Collecting Forest Problems with Submodular</p>
    <p>Penalty Functions Chaitanya Swamy</p>
    <p>University of Waterloo</p>
    <p>Joint work with Yogeshwer Sharma David</p>
    <p>Williamson Cornell University</p>
  </div>
  <div class="page">
    <p>Prize-collecting Steiner tree (PCST)</p>
    <p>Given: graph G=(V,E), edge costs ce  0, root rV,</p>
    <p>penalties pv  0 on vertices</p>
    <p>Goal: choose a set of edges F E so as to</p>
    <p>minimize eF ce + v not connected to r pv cost of edges picked + penalty of nodes disconnected from r</p>
  </div>
  <div class="page">
    <p>Prize-collecting Steiner tree (PCST)</p>
    <p>Given: graph G=(V,E), edge costs ce  0, root rV,</p>
    <p>penalties pv  0 on vertices</p>
    <p>Goal: choose a set of edges F E so as to</p>
    <p>minimize eF ce + v not connected to r pv r</p>
    <p>cost of edges picked + penalty of nodes disconnected from r</p>
  </div>
  <div class="page">
    <p>Prize-collecting Steiner tree (PCST)</p>
    <p>Given: graph G=(V,E), edge costs ce  0, root rV,</p>
    <p>penalties pv  0 on vertices</p>
    <p>Goal: choose a set of edges F E so as to</p>
    <p>minimize eF ce + v not connected to r pv Bienstock et al.: gave a 3approx. LP-rounding algorithm</p>
    <p>Goemans-Williamson (GW): gave a primal-dual 2approx. algorithm</p>
    <p>r</p>
    <p>cost of edges picked + penalty of nodes disconnected from r</p>
  </div>
  <div class="page">
    <p>PCST with submodular penalty fn.</p>
    <p>Given: graph G=(V,E), edge costs ce  0, root rV,</p>
    <p>penalty is given by a set-function p : 2 V</p>
    <p>0</p>
    <p>p(A): penalty if set AV is disconnected from r</p>
    <p>p is submodular: p(A)+p(B)  p(A B) +p(A B)</p>
    <p>e.g., p(A) = min(|A|, M)</p>
    <p>Goal: choose a set of edges F E so as to minimize</p>
    <p>eF ce + p({v not connected to r})</p>
    <p>r</p>
    <p>Generalizes penalty function of PCST</p>
    <p>Introduced by Hayrapetyan-STardos: gave a 2-approximation algorithm by extending GW primal-dual algorithm</p>
  </div>
  <div class="page">
    <p>Prize-collecting Steiner forest (PCSF)</p>
    <p>Given: graph G=(V,E), edge costs ce  0, source-sink pairs si-ti penalties pi  0 on each si-ti pair</p>
    <p>Goal: choose a set of edges F E so as to</p>
    <p>minimize eF ce + i: si not connected to ti in F pi</p>
  </div>
  <div class="page">
    <p>Prize-collecting Steiner forest (PCSF)</p>
    <p>Given: graph G=(V,E), edge costs ce  0, source-sink pairs si-ti penalties pi  0 on each si-ti pair</p>
    <p>Goal: choose a set of edges F E so as to</p>
    <p>minimize eF ce + i: si not connected to ti in F pi Generalizes connectivity</p>
    <p>function of PCST</p>
    <p>Introduced by JainHajiaghayi: gave a 3approx. primal-dual algorithm</p>
  </div>
  <div class="page">
    <p>General framework for Prize-Collecting Forest</p>
    <p>Problems</p>
    <p>PCST with submodular</p>
    <p>penalty function</p>
    <p>Prizecollecting</p>
    <p>Steiner forest</p>
    <p>Prize-Collecting Forest (PCF)  connectivity function: arbitrary 0-1</p>
    <p>function  penalty function: submodular function</p>
    <p>on collections of sets of vertices</p>
    <p>Prize-collecting Steiner tree</p>
  </div>
  <div class="page">
    <p>Prize-Collecting Forest (PCF) Given: graph G=(V,E) (|V|=n), edge costs ce</p>
    <p>f(S)=1  need an edge from border of S, (S) := {(u,v)E: exactly one of u, v is in</p>
    <p>S}</p>
    <p>penalty function p: 22V   0 p(S): penalty if collection S of subsets is violated</p>
    <p>Goal: choose a set of edges F E so as to</p>
    <p>minimize eF ce + p({SV: f(S)=1, F(S)=})</p>
    <p>Example: Prize-collecting Steiner forest f(S) = 1 iff there exists some i s.t. exactly one of si, ti  S</p>
    <p>p(S) =  i:SS that separates si-ti pi</p>
    <p>violated subsets</p>
  </div>
  <div class="page">
    <p>PCF: properties of p(.)</p>
    <p>p()=0  Monotonicity: if ST then p(S)  p(T)  Submodularity: p(S) + p(T)  p(S T) + p(S T)  Complement property: for AV, p({A, Ac}) = p({A})  Union property: for A,B V, p({A, B, A B})=p({A,B})  Inactivity property: if f(A)=0, then p({A})=0</p>
    <p>For any 0-1 connectivity fn f, can define penalty function, pf(S) = M (very large #) if SS with f(S)=1; and 0 o/w.</p>
    <p>Solving PCF with (f, pf)  solving network design problem with connectivity fn. f  need certain restrictions on p(.)</p>
    <p>If f()=0, then f is 0-1 proper iff pf satisfies above properties. p(.) will be given as an oracle (ground set has 2|V| elements)</p>
  </div>
  <div class="page">
    <p>Our Results  Give a primal-dual 3-approximation algorithm</p>
    <p>Requires novel ideas in implementation and analysis, to overcome difficulties caused due to the exponential size of the ground set of p(.)</p>
    <p>Give an LP-rounding 2.54-approximation algorithm  solving the LP relaxation poses a significant</p>
    <p>challenge  LP has 2n constraints and 22n variables: not clear if</p>
    <p>even a basic solution has a polynomial description  Reformulate LP as a convex program, solve via</p>
    <p>ellipsoid method; evaluating objective fn and computing a subgradient both require solving an LP of size 2n22n</p>
    <p>overcome difficulty by proving certain structural properties; also required for the rounding procedure</p>
  </div>
  <div class="page">
    <p>An Integer Program</p>
    <p>xe : indicates if edge e is picked</p>
    <p>zS : indicates if penalty is incurred for collection S 2</p>
    <p>V</p>
    <p>Minimize e cexe + S p(S)zS subject to e(S) xe + S:SS zS  f(S) for each SV</p>
    <p>xe, zS  {0,1} for each e, S</p>
  </div>
  <div class="page">
    <p>A Linear Program</p>
    <p>xe : indicates if edge e is picked</p>
    <p>zS : indicates if penalty is incurred for collection S 2</p>
    <p>V</p>
    <p>Minimize e cexe + S p(S)zS (PCFLP)</p>
    <p>subject to e(S) xe + S:SS zS  f(S) for each SV</p>
    <p>xe, zS  {0,1} for each e, S</p>
    <p>xe, zS  0 for each e, S</p>
    <p>LP has 22n variables and 2n constraints  Not clear if even a basic solution has a</p>
    <p>polynomial-size description  what does solving the LP mean?</p>
  </div>
  <div class="page">
    <p>A Compact Formulation xe : indicates if edge e is picked</p>
    <p>zS : indicates if penalty is incurred for collection S 2</p>
    <p>V Minimize h(x) := e cexe + g(x) s.t. 0  xe  1 for each e</p>
    <p>(PCFCP)</p>
    <p>where, g(x):= min S p(S)zS (Pen-P)</p>
    <p>s.t. S:SS zS f(S)  e(S) xe for each SV</p>
    <p>zS  0 for each e, S</p>
    <p>g(x) is convex, so (PCF-CP) is a convex program Equivalent to earlier LP.</p>
  </div>
  <div class="page">
    <p>The Overall Strategy</p>
    <p>without penalties (Goemans-Williamson or Jain).</p>
    <p>Obtain a 2.54-approximation algorithm for the prize-collecting forest problem.</p>
  </div>
  <div class="page">
    <p>The Ellipsoid Method Start with ball containing polytope P. yi = center of current ellipsoid.</p>
    <p>Min h(x) subject to xP.</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>The Ellipsoid Method</p>
    <p>P</p>
    <p>New ellipsoid = min. volume ellipsoid containing unchopped half-ellipsoid.</p>
    <p>Min h(x) subject to xP.</p>
    <p>If yi is infeasible, use violated inequality to chop off infeasible half-ellipsoid.</p>
    <p>Start with ball containing polytope P. yi = center of current ellipsoid.</p>
  </div>
  <div class="page">
    <p>The Ellipsoid Method</p>
    <p>New ellipsoid = min. volume ellipsoid containing unchopped half-ellipsoid.</p>
    <p>P</p>
    <p>Min h(x) subject to xP.</p>
    <p>If yi is infeasible, use violated inequality to chop off infeasible half-ellipsoid.</p>
    <p>Start with ball containing polytope P. yi = center of current ellipsoid.</p>
    <p>If yi P  how to make progress?</p>
  </div>
  <div class="page">
    <p>The Ellipsoid Method</p>
    <p>Min h(x) subject to xP.</p>
    <p>P</p>
    <p>Start with ball containing polytope P. yi = center of current ellipsoid.If yi is infeasible, use violated inequality.If yi P  how to make progress?</p>
    <p>add inequality h(x)  h(yi)? Separation becomes difficult.yi</p>
    <p>h(x)  h(yi)</p>
  </div>
  <div class="page">
    <p>Let d = subgradient at yi.</p>
    <p>use subgradient cut d.(xyi)  0.Generate new min. volume</p>
    <p>ellipsoid.</p>
    <p>The Ellipsoid Method</p>
    <p>Min h(x) subject to xP.</p>
    <p>P</p>
    <p>Start with ball containing polytope P. yi = center of current ellipsoid.</p>
    <p>If yi P  how to make progress?</p>
    <p>d m is a subgradient of h(.) at u, if for every v, h(v)</p>
    <p>h(u)  d.(v-u).</p>
    <p>add inequality h(x)  h(yi)? Separation becomes difficult.</p>
    <p>If yi is infeasible, use violated inequality.</p>
    <p>d</p>
    <p>yi</p>
    <p>h(x)  h(yi)</p>
  </div>
  <div class="page">
    <p>The Ellipsoid Method</p>
    <p>Min h(x) subject to xP.</p>
    <p>P</p>
    <p>Start with ball containing polytope P. yi = center of current ellipsoid.</p>
    <p>If yi P  how to make progress?</p>
    <p>d m is a subgradient of h(.) at u, if for every v, h(v)</p>
    <p>h(u)  d.(v-u).</p>
    <p>Let d = subgradient at yi.</p>
    <p>use subgradient cut d.(xyi)  0.Generate new min. volume</p>
    <p>ellipsoid.</p>
    <p>x1, x2, , xk: points in P. Can show, mini=1k h(xi)  OPT+.</p>
    <p>x* x1</p>
    <p>x2</p>
    <p>add inequality h(x)  h(yi)? Separation becomes difficult.</p>
    <p>If yi is infeasible, use violated inequality.</p>
  </div>
  <div class="page">
    <p>Computing a subgradient h(x) := e cexe + g(x)</p>
    <p>g(x):=min. S p(S)zS</p>
    <p>s.t. S:SS zS  f(S)  e(S) xe</p>
    <p>SV</p>
    <p>zS  0 S</p>
  </div>
  <div class="page">
    <p>Computing a subgradient h(x) := e cexe + g(x)</p>
    <p>g(x):=min. S p(S)zS = max. S (f(S)  e(S) xe) yS</p>
    <p>s.t. S:SS zS  f(S)  e(S) xe s.t. SS yS  p(S) S</p>
    <p>SV</p>
    <p>zS  0 S yS  0 SConsider point u m. Let y  optimal dual solution to</p>
    <p>g(u). So h(u) = e ceue + S (f(S)  e(S) ue) yS = e deue + S f(S)yS where de = ce  S:e(S) yS.</p>
    <p>At any point vm, y is a feasible solution to dual of g(v), so</p>
    <p>h(v)  e ceve + S (f(S)  e(S) ve) yS = e deve + S f(S)yS</p>
    <p>Lemma: For any point vm, we have h(v)  h(u)  d.</p>
    <p>(v-u).  d is a subgradient of h(.) at point u.</p>
  </div>
  <div class="page">
    <p>Solving the dual</p>
    <p>g(x) = max S [f(S)  x((S))]yS (Pen-D)</p>
    <p>s.t. SS yS  p(S) for all S2 V</p>
    <p>yS  0 for all S</p>
    <p>Bad : Dual has 2n variables and 2 2n constraints</p>
    <p>Good : It is a polymatroid: p(.) is a monotone submodular fn.  Edmonds greedy algorithm yields optimal solution</p>
    <p>Sort the sets S in decreasing order of [f(S)x((S))]</p>
    <p>For the i-th set Si, if [f(Si)-x((Si))] &gt; 0, set ySi =</p>
    <p>p{S1,Si-1}(Si)</p>
    <p>Bad : Reduces complexity to 2n, but still not polytime Good : Show that optimal solution where the sets S with yS &gt; 0 form a laminar family  key structural lemma</p>
    <p>Notation: x((S))= e(S) xe pS(A) = p(S{A})  p(S)</p>
  </div>
  <div class="page">
    <p>Useful properties of p(.)</p>
    <p>If A, BS, then pS(T) = pS(Tc) = 0 for all sets T in {AB, AB, A\B, B\A, Ac, Bc}  due to complementarity and union properties</p>
    <p>If p({A}) = 0, then for any BV, pS{A}({B}) = pS({B})  due to submodularity  ordering of sets A with f(A)=0 is irrelevant</p>
    <p>If pS{A}({B}) = pS{B}({A}) = 0, then for any set TV, pS{A}({T}) = pS{B}({T})  by submodularity</p>
  </div>
  <div class="page">
    <p>Solving the dual (contd.)</p>
    <p>Initialize yS = 0 for all sets S, laminar family L .  While set S that does not cross any set of L</p>
    <p>find T = argmin {x((S)): S does not cross L}  if x((T))  1 return; else set yT = pL({T}), L L{T}</p>
    <p>Theorem: y is an optimal solution to (Pen-D).</p>
    <p>Let L' = {TL: yT&gt;0} = {T1,,Tk},</p>
    <p>Ti = maximal superset of {T1,,Ti} s.t. p(Ti) = p({T1,,Ti})</p>
    <p>Theorem: Setting zTi = x((Ti+1))  x((Ti)) (x((Tk+1)) := 1) for i=1,,k, and zS = 0 for all other S, yields an optimal solution to (Pen-P).</p>
    <p>Structural lemma yields following algorithm:</p>
  </div>
  <div class="page">
    <p>Rounding procedure</p>
    <p>Given: fractional solution x, sets T1,, Tk  gives succinct description of</p>
    <p>collections T1,,Tk, and hence optimal soln. z to (Pen-P)</p>
    <p>Let [0,1] be a parameter.  Define 0-1 connectivity function (S) = 1 if f(S) = 1 and S:SS zS &lt; ; 0</p>
    <p>otherwise.  Solve network design problem with connectivity</p>
    <p>function .</p>
    <p>If f is proper or weakly-supermodular, then so is , therefore</p>
    <p>cost of edges picked is bounded Penalty is at most p({S V: S:SS zS  })  [S</p>
    <p>p(S)zS]/</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>Is there a compact description of the LP? Or a more efficient procedure to solve it?</p>
    <p>Obtaining a 2-approximation algorithm: iterative rounding may be the way to go</p>
    <p>Applications to 2-stage stochastic network design: can the second-stage cost be captured by a nice penalty function?</p>
    <p>Extensions to higher connectivity reqmts.</p>
  </div>
  <div class="page">
    <p>Thank You.</p>
  </div>
</Presentation>
