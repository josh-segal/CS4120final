<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NV-Tree Reducing Consistency Cost for</p>
    <p>NVM-based Single Level Systems</p>
    <p>Jun Yang1, Qingsong Wei1, Cheng Chen1, Chundong Wang1, Khai Leong Yong1 and Bingsheng He2</p>
  </div>
  <div class="page">
    <p>Overview  Providing data consistency for B+tree or its variants in Non-volatile</p>
    <p>Memory is costly  Ordering memory writes is non-trivial and expensive in NVM  Logs are needed because the size of atomic writes is limited  Keeping in-node data sorted produces unnecessary ordered writes</p>
    <p>NV-Tree  Consistent, log-free and cache-optimized  Decouple leaf nodes (LNs) and internal nodes (INs)</p>
    <p>LN  Enforce consistency  Unsorted keys with append-only scheme</p>
    <p>IN  Reconstructable, no consistency guaranteed  Sorted keys and cache-optimized layout</p>
    <p>Results:  Reduce CPU cache line flush by 82-96%  12X faster than existing approaches under write-intensive workloads  NV-Store, a KV-store prototype</p>
    <p>Up to 4.8X faster than Redis under YCSB workloads</p>
    <p>Pg 2</p>
  </div>
  <div class="page">
    <p>Persistency boundary</p>
    <p>Motivation  Next generation of non-volatile memory (NVM)</p>
    <p>Provides DRAM-like performance and disk-like persistency  Can replace both DRAM and disk to build a single level system</p>
    <p>In-NVM data consistency is required  Ordering memory writes</p>
    <p>Fundamental for keeping data consistency  Non-trivial in NVM due to CPU design</p>
    <p>E.g, w1, (MFENCE,CLFLUSH,MFENCE), w2, (MFENCE,CLFLUSH,MFENCE)</p>
    <p>CPU Cache line</p>
    <p>Cache line</p>
    <p>Cache line</p>
    <p>NVM</p>
    <p>Memory Bus</p>
    <p>Pg 3</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Making B+tree or its variants consistent is expensive</p>
    <p>B+tree : 16X slower</p>
    <p>CDDS-tree : 20X slower</p>
    <p>CPU cache line invalidation is amplified due to CLFLUSH</p>
    <p>Sorting entries in LN produces up to &gt;90% of total CLFLUSH</p>
    <p>Pg 4</p>
  </div>
  <div class="page">
    <p>NV-Tree Overview</p>
    <p>Decouple LN and IN  Critical data  LN  Reconstructable data - IN</p>
    <p>Unsorted LN  entries are encapsulated</p>
    <p>and appended in LN</p>
    <p>Cache-optimized IN</p>
    <p>Pg 5</p>
  </div>
  <div class="page">
    <p>IN Design</p>
    <p>IN layout  All INs are stored in a continuous memory space</p>
    <p>Memory address of node id = addr + id * size_IN addr : memory address of node 0 size_IN : size of a IN</p>
    <p>Can be located without pointers  No consistency required</p>
    <p>Locating the next IN during tree traverse  E.g.</p>
    <p>one IN have m children Memory address of the k-th (k = 1 .. m) child of node id = addr + (id * m + k) * size_IN</p>
    <p>Pg 6</p>
  </div>
  <div class="page">
    <p>LN Design</p>
    <p>LN layout  Dynamically allocated and aligned to CPU cache line</p>
    <p>Every LN has a pointer from PLN  Data is encapsulated in LN_Elements</p>
    <p>LN_Elements are unsorted and append-only  In-node search is bounded by nElements  No partial modification</p>
    <p>(MFENCE,CLFLUSH, MFENCE)  Reads are never blocked by writes</p>
    <p>Pg 7</p>
  </div>
  <div class="page">
    <p>Insert/Delete/Update</p>
    <p>Insert (7, b) Delete (6, a) Update (8, c) -&gt; (8, y)</p>
    <p>Pg 8</p>
  </div>
  <div class="page">
    <p>Split  No partial split</p>
    <p>All data modified by unfinished split is invisible upon system failure  Those data become visible after a 8-byte atomic update</p>
    <p>Split / Replace / Merge  Minimal Fill Factor (MFF)</p>
    <p>Percentage of Valid Elements in Full Node</p>
    <p>Percentage of Total Elements in Right Sibling</p>
    <p>Action</p>
    <p>&gt; MFF - Split</p>
    <p>&lt; MFF &gt; MFF Replace</p>
    <p>&lt; MFF &lt; MFF Merge</p>
    <p>Pg 9</p>
  </div>
  <div class="page">
    <p>Rebuilding</p>
    <p>Triggered when a PLN is full  Due to the fixed position of each IN</p>
    <p>Strategy  Rebuild-from-PLN</p>
    <p>Reuse the existing &lt;key, LN_pointer&gt; array in PLNs  Rebuild-from-LN</p>
    <p>Pg 10</p>
  </div>
  <div class="page">
    <p>Recovery</p>
    <p>Instant recovery  Normal shutdown and NVM has enough space</p>
    <p>Keep all INs in NVM</p>
    <p>Otherwise  Rebuilding-from-LN</p>
    <p>Shutdown Type Shutdown Action Recovery Action</p>
    <p>Normal Store all INs to NVM Retrieve the root</p>
    <p>System Failure N/A Rebuild-from-LN</p>
    <p>Pg 12</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>NVDIMM server  Intel Xeon E5-2650</p>
    <p>2.4GHz, 512KB/2MB/20MB L1/L2/L3 Cache  16GB DRAM, 16GB NVDIMM</p>
    <p>NVDIMM has the same performance as DRAM</p>
    <p>Pg 13</p>
  </div>
  <div class="page">
    <p>Insertion Performance  LCB+Tree (Log-based Consistent B+Tree)  CDDS-Tree  NV-Tree</p>
    <p>LCB+Tree CDDS-Tree</p>
    <p>LCB+Tree CDDS-Tree</p>
    <p>Pg 14</p>
  </div>
  <div class="page">
    <p>Update/Delete/Search Throughput</p>
    <p>Update</p>
    <p>Delete</p>
    <p>Search</p>
    <p>LCB+Tree CDDS-Tree</p>
    <p>Comparable to CDDS-Tree with larger nodes</p>
    <p>Comparable to both competitors</p>
    <p>Pg 15</p>
  </div>
  <div class="page">
    <p>Mixed Workloads</p>
    <p>1 million operations (insertion/search)  On an existing NV-Tree with 1 million entries</p>
    <p>w/r LCB+Tree CDDS-Tree</p>
    <p>Pg 16</p>
  </div>
  <div class="page">
    <p>CPU Cache Efficiency</p>
    <p>Intel vTune Amplifer  Number of LOADs</p>
    <p>Number of L3 Misses</p>
    <p>LCB+Tree CDDS-Tree</p>
    <p>Up to 90% reduced</p>
    <p>Up to 92% reduced</p>
    <p>LCB+Tree CDDS-Tree</p>
    <p>Up to 83% reduced</p>
    <p>Up to 90% reduced</p>
    <p>Pg 17</p>
  </div>
  <div class="page">
    <p>Rebuilding</p>
    <p>1/10/100 Million Insertion, 512B/1KB/2KB/4KB Node Size  Rebuilding time is neglectable</p>
    <p>0.01% - 2.77%</p>
    <p>Rebuilding strategy  Rebuild-from-PLN is 22% - 47% faster</p>
    <p>Pg 18</p>
  </div>
  <div class="page">
    <p>End-to-End Performance</p>
    <p>KV-Stores  NV-Store  Redis</p>
    <p>Volatile / Consistent</p>
    <p>Workloads  YCSB</p>
    <p>StatusUpdate (read-latest)</p>
    <p>SessionStore (update-heavy)</p>
    <p>Pg 19</p>
  </div>
  <div class="page">
    <p>Additional Materials in The Paper</p>
    <p>NV-Tree performance simulation on different types of NVM  Different read/write performance</p>
    <p>STT-MRAM / PCM</p>
    <p>Future hardware support  Epoch  CLWB/CLFLUSHOPT/PCOMMIT</p>
    <p>Pg 20</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Q &amp; a</p>
    <p>Email: yangju@dsi.a-star.edu.sg</p>
  </div>
</Presentation>
