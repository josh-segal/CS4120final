<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>McTiny: Fast High-Confidence Post-Quantum Key Erasure</p>
    <p>for Tiny Network Servers</p>
    <p>Daniel J. Bernstein1,2 and Tanja Lange3</p>
    <p>USENIX Security 2020</p>
  </div>
  <div class="page">
    <p>Post-quantum cryptography</p>
    <p>Cryptography designed under the assumption that the attacker (not the user!) has a large quantum computer.</p>
    <p>Options: code-based, hash-based, isogeny-based, lattice-based, multivariates.</p>
    <p>I Original parameters designed for 264 security.</p>
    <p>I 2008 BernsteinLangePeters: broken in 260 cycles. I Easily scale up for higher security.</p>
    <p>I 1962 Prange: simple attack idea guiding sizes in 1978 McEliece. The McEliece system (with later key-size optimizations) achieves 2 security against Pranges attack using (0.741186 . . . + o(1))2(log2 )</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 2</p>
  </div>
  <div class="page">
    <p>Security analysis of McEliece encryption</p>
    <p>Some papers studying algorithms for attackers: 1962 Prange; 1981 ClarkCain, crediting Omura; 1988 LeeBrickell; 1988 Leon; 1989 Krouk;</p>
    <p>All of these attacks involve huge searches, like attacking AES. The quantum attacks (Grover etc.) leave at least half of the bits of security.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 3</p>
  </div>
  <div class="page">
    <p>Attack progress over time</p>
    <p>lim K</p>
    <p>log2 AttackCostyear(K )</p>
    <p>log2 AttackCost2020(K )</p>
    <p>Red: Lattices have lost much more security. Lattices had 42% higher security levels ten years ago than they have today.</p>
    <p>A jt</p>
    <p>a i</p>
    <p>K u</p>
    <p>m a r</p>
    <p>S iv</p>
    <p>a k</p>
    <p>u m</p>
    <p>a r</p>
    <p>N g</p>
    <p>u y e n</p>
    <p>V</p>
    <p>id ic</p>
    <p>k</p>
    <p>M ic</p>
    <p>c ia</p>
    <p>n c io</p>
    <p>V</p>
    <p>o u</p>
    <p>lg a ri</p>
    <p>s</p>
    <p>W a</p>
    <p>n g</p>
    <p>L</p>
    <p>iu</p>
    <p>T ia</p>
    <p>n</p>
    <p>B i</p>
    <p>Z h</p>
    <p>a n</p>
    <p>g</p>
    <p>P a</p>
    <p>n</p>
    <p>H u</p>
    <p>L a</p>
    <p>a rh</p>
    <p>o v e n</p>
    <p>L a</p>
    <p>a rh</p>
    <p>o v e n</p>
    <p>d</p>
    <p>e W</p>
    <p>e g</p>
    <p>e r</p>
    <p>B e c k e r</p>
    <p>D u</p>
    <p>c a</p>
    <p>s G</p>
    <p>a m</p>
    <p>a</p>
    <p>L a</p>
    <p>a rh</p>
    <p>o v e n</p>
    <p>C la</p>
    <p>rk</p>
    <p>C a</p>
    <p>in</p>
    <p>L e e</p>
    <p>B ri</p>
    <p>c k e ll</p>
    <p>L e o</p>
    <p>n</p>
    <p>K ro</p>
    <p>u k</p>
    <p>S te</p>
    <p>rn</p>
    <p>D u</p>
    <p>m e r</p>
    <p>C o</p>
    <p>ff e y</p>
    <p>G o</p>
    <p>o d</p>
    <p>m a</p>
    <p>n</p>
    <p>v a</p>
    <p>n T</p>
    <p>il b</p>
    <p>u rg</p>
    <p>D</p>
    <p>u m</p>
    <p>e r</p>
    <p>C o</p>
    <p>ff e y</p>
    <p>G o</p>
    <p>o d</p>
    <p>m a</p>
    <p>n</p>
    <p>F a rr</p>
    <p>e ll</p>
    <p>C h</p>
    <p>a b</p>
    <p>a n</p>
    <p>n e</p>
    <p>C o</p>
    <p>u rt</p>
    <p>e a</p>
    <p>u</p>
    <p>C h</p>
    <p>a b</p>
    <p>a u</p>
    <p>d</p>
    <p>v a</p>
    <p>n T</p>
    <p>il b</p>
    <p>u rg</p>
    <p>C</p>
    <p>a n</p>
    <p>te a</p>
    <p>u t</p>
    <p>C h</p>
    <p>a b</p>
    <p>a n</p>
    <p>n e</p>
    <p>C a</p>
    <p>n te</p>
    <p>a u</p>
    <p>t C</p>
    <p>h a</p>
    <p>b a</p>
    <p>u d</p>
    <p>C a</p>
    <p>n te</p>
    <p>a u</p>
    <p>t S</p>
    <p>e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>B e rn</p>
    <p>st e in</p>
    <p>L</p>
    <p>a n</p>
    <p>g e</p>
    <p>P e te</p>
    <p>rs</p>
    <p>B e rn</p>
    <p>st e in</p>
    <p>L</p>
    <p>a n</p>
    <p>g e</p>
    <p>P e te</p>
    <p>rs</p>
    <p>v a</p>
    <p>n T</p>
    <p>il b</p>
    <p>o rg</p>
    <p>F</p>
    <p>in ia</p>
    <p>sz</p>
    <p>S e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>B e rn</p>
    <p>st e in</p>
    <p>L</p>
    <p>a n</p>
    <p>g e</p>
    <p>P e te</p>
    <p>rs</p>
    <p>M a y</p>
    <p>M e u</p>
    <p>re r</p>
    <p>T h</p>
    <p>o m</p>
    <p>a e</p>
    <p>B e c k e r</p>
    <p>J o</p>
    <p>u x</p>
    <p>M a y</p>
    <p>M e u</p>
    <p>re r</p>
    <p>H a</p>
    <p>m d</p>
    <p>a o</p>
    <p>u i</p>
    <p>S e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>M a y</p>
    <p>O z e ro</p>
    <p>v</p>
    <p>C a</p>
    <p>n to</p>
    <p>T o rr</p>
    <p>e s</p>
    <p>S e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>B o</p>
    <p>th</p>
    <p>M a y</p>
    <p>B o</p>
    <p>th</p>
    <p>M a y</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 4</p>
  </div>
  <div class="page">
    <p>Attack progress over time</p>
    <p>lim K</p>
    <p>log2 AttackCostyear(K )</p>
    <p>log2 AttackCost2020(K )</p>
    <p>Red: Lattices have lost much more security. Lattices had 42% higher security levels ten years ago than they have today.</p>
    <p>A jt</p>
    <p>a i</p>
    <p>K u</p>
    <p>m a r</p>
    <p>S iv</p>
    <p>a k</p>
    <p>u m</p>
    <p>a r</p>
    <p>N g</p>
    <p>u y e n</p>
    <p>V</p>
    <p>id ic</p>
    <p>k</p>
    <p>M ic</p>
    <p>c ia</p>
    <p>n c io</p>
    <p>V</p>
    <p>o u</p>
    <p>lg a ri</p>
    <p>s</p>
    <p>W a</p>
    <p>n g</p>
    <p>L</p>
    <p>iu</p>
    <p>T ia</p>
    <p>n</p>
    <p>B i</p>
    <p>Z h</p>
    <p>a n</p>
    <p>g</p>
    <p>P a</p>
    <p>n</p>
    <p>H u</p>
    <p>L a</p>
    <p>a rh</p>
    <p>o v e n</p>
    <p>L a</p>
    <p>a rh</p>
    <p>o v e n</p>
    <p>d</p>
    <p>e W</p>
    <p>e g</p>
    <p>e r</p>
    <p>B e c k e r</p>
    <p>D u</p>
    <p>c a</p>
    <p>s G</p>
    <p>a m</p>
    <p>a</p>
    <p>L a</p>
    <p>a rh</p>
    <p>o v e n</p>
    <p>C la</p>
    <p>rk</p>
    <p>C a</p>
    <p>in</p>
    <p>L e e</p>
    <p>B ri</p>
    <p>c k e ll</p>
    <p>L e o</p>
    <p>n</p>
    <p>K ro</p>
    <p>u k</p>
    <p>S te</p>
    <p>rn</p>
    <p>D u</p>
    <p>m e r</p>
    <p>C o</p>
    <p>ff e y</p>
    <p>G o</p>
    <p>o d</p>
    <p>m a</p>
    <p>n</p>
    <p>v a</p>
    <p>n T</p>
    <p>il b</p>
    <p>u rg</p>
    <p>D</p>
    <p>u m</p>
    <p>e r</p>
    <p>C o</p>
    <p>ff e y</p>
    <p>G o</p>
    <p>o d</p>
    <p>m a</p>
    <p>n</p>
    <p>F a rr</p>
    <p>e ll</p>
    <p>C h</p>
    <p>a b</p>
    <p>a n</p>
    <p>n e</p>
    <p>C o</p>
    <p>u rt</p>
    <p>e a</p>
    <p>u</p>
    <p>C h</p>
    <p>a b</p>
    <p>a u</p>
    <p>d</p>
    <p>v a</p>
    <p>n T</p>
    <p>il b</p>
    <p>u rg</p>
    <p>C</p>
    <p>a n</p>
    <p>te a</p>
    <p>u t</p>
    <p>C h</p>
    <p>a b</p>
    <p>a n</p>
    <p>n e</p>
    <p>C a</p>
    <p>n te</p>
    <p>a u</p>
    <p>t C</p>
    <p>h a</p>
    <p>b a</p>
    <p>u d</p>
    <p>C a</p>
    <p>n te</p>
    <p>a u</p>
    <p>t S</p>
    <p>e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>B e rn</p>
    <p>st e in</p>
    <p>L</p>
    <p>a n</p>
    <p>g e</p>
    <p>P e te</p>
    <p>rs</p>
    <p>B e rn</p>
    <p>st e in</p>
    <p>L</p>
    <p>a n</p>
    <p>g e</p>
    <p>P e te</p>
    <p>rs</p>
    <p>v a</p>
    <p>n T</p>
    <p>il b</p>
    <p>o rg</p>
    <p>F</p>
    <p>in ia</p>
    <p>sz</p>
    <p>S e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>B e rn</p>
    <p>st e in</p>
    <p>L</p>
    <p>a n</p>
    <p>g e</p>
    <p>P e te</p>
    <p>rs</p>
    <p>M a y</p>
    <p>M e u</p>
    <p>re r</p>
    <p>T h</p>
    <p>o m</p>
    <p>a e</p>
    <p>B e c k e r</p>
    <p>J o</p>
    <p>u x</p>
    <p>M a y</p>
    <p>M e u</p>
    <p>re r</p>
    <p>H a</p>
    <p>m d</p>
    <p>a o</p>
    <p>u i</p>
    <p>S e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>M a y</p>
    <p>O z e ro</p>
    <p>v</p>
    <p>C a</p>
    <p>n to</p>
    <p>T o rr</p>
    <p>e s</p>
    <p>S e n</p>
    <p>d ri</p>
    <p>e r</p>
    <p>B o</p>
    <p>th</p>
    <p>M a y</p>
    <p>B o</p>
    <p>th</p>
    <p>M a y</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 4</p>
  </div>
  <div class="page">
    <p>NIST PQC submission Classic McEliece</p>
    <p>No patents. Shortest ciphertexts. Fast open-source constant-time software implementations. Very conservative system, expected to last; has strongest security track record.</p>
    <p>Sizes with similar post-quantum security to AES-128, AES-192, AES-256:</p>
    <p>Metric mceliece348864 mceliece460896 mceliece6960119 Public-key size 261120 bytes 524160 bytes 1047319 bytes</p>
    <p>Secret-key size 6452 bytes 13568 bytes 13908 bytes</p>
    <p>Ciphertext size 128 bytes 188 bytes 226 bytes</p>
    <p>Key-generation time 52415436 cycles 181063400 cycles 417271280 cycles</p>
    <p>Encapsulation time 43648 cycles 77380 cycles 143908 cycles</p>
    <p>Decapsulation time 130944 cycles 267828 cycles 295628 cycles</p>
    <p>See https://classic.mceliece.org for authors, details &amp; parameters.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 5</p>
  </div>
  <div class="page">
    <p>Key issues for McEliece</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 6</p>
  </div>
  <div class="page">
    <p>Key issues for McEliece</p>
    <p>BIG PUBLIC KEYS.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 6</p>
  </div>
  <div class="page">
    <p>Key issues for McEliece</p>
    <p>Users send big data anyway. We have lots of bandwidth. Maybe 1MB keys are okay.</p>
    <p>Each client spends a small fraction of a second generating new ephemeral 1MB key.</p>
    <p>But: If any client is allowed to send a new ephemeral 1MB McEliece key to server, an attacker can easily flood servers memory. This invites DoS attacks.</p>
    <p>Our goal: Eliminate these attacks by eliminating all per-client storage on server.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 6</p>
  </div>
  <div class="page">
    <p>Key issues for McEliece</p>
    <p>Users send big data anyway. We have lots of bandwidth. Maybe 1MB keys are okay.</p>
    <p>Each client spends a small fraction of a second generating new ephemeral 1MB key.</p>
    <p>But: If any client is allowed to send a new ephemeral 1MB McEliece key to server, an attacker can easily flood servers memory. This invites DoS attacks.</p>
    <p>Our goal: Eliminate these attacks by eliminating all per-client storage on server.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 6</p>
  </div>
  <div class="page">
    <p>Key issues for McEliece</p>
    <p>Users send big data anyway. We have lots of bandwidth. Maybe 1MB keys are okay.</p>
    <p>Each client spends a small fraction of a second generating new ephemeral 1MB key.</p>
    <p>But: If any client is allowed to send a new ephemeral 1MB McEliece key to server, an attacker can easily flood servers memory. This invites DoS attacks.</p>
    <p>Our goal: Eliminate these attacks by eliminating all per-client storage on server.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 6</p>
  </div>
  <div class="page">
    <p>Goodness, what big keys you have! Public keys look like this:</p>
    <p>K =</p>
    <p>... ...</p>
    <p>... 1 . . . 1 1 0 0 0 . . . 1 0 . . . 1 1 1</p>
    <p>Left part is (n k)  (n k) identity matrix (no need to send). Right part is random-looking (n k) k matrix. E.g. n = 6960, k = 5413, so n k = 1547.</p>
    <p>Encryption xors secretly selected columns, e.g.</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>=</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 7</p>
  </div>
  <div class="page">
    <p>Goodness, what big keys you have! Public keys look like this:</p>
    <p>K =</p>
    <p>... ...</p>
    <p>... 1 . . . 1 1 0 0 0 . . . 1 0 . . . 1 1 1</p>
    <p>Left part is (n k)  (n k) identity matrix (no need to send). Right part is random-looking (n k) k matrix. E.g. n = 6960, k = 5413, so n k = 1547. Encryption xors secretly selected columns, e.g.</p>
    <p>0 1 0 0</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>=</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 7</p>
  </div>
  <div class="page">
    <p>Can servers avoid storing big keys?</p>
    <p>K =</p>
    <p>... ...</p>
    <p>... 1 . . . 1 1 0 0 0 . . . 1 0 . . . 1 1 1</p>
    <p>= (Ink|K )</p>
    <p>Encryption xors secretly selected columns.</p>
    <p>With some storage and trusted environment: Receive columns of K  one at a time, store and update partial sum.</p>
    <p>On the real Internet, without per-client state: Dont reveal intermediate results! Which columns are picked is the secret message! Intermediate results show whether a column was used or not.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 8</p>
  </div>
  <div class="page">
    <p>Can servers avoid storing big keys?</p>
    <p>K =</p>
    <p>... ...</p>
    <p>... 1 . . . 1 1 0 0 0 . . . 1 0 . . . 1 1 1</p>
    <p>= (Ink|K )</p>
    <p>Encryption xors secretly selected columns.</p>
    <p>With some storage and trusted environment: Receive columns of K  one at a time, store and update partial sum.</p>
    <p>On the real Internet, without per-client state:</p>
    <p>Dont reveal intermediate results! Which columns are picked is the secret message! Intermediate results show whether a column was used or not.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 8</p>
  </div>
  <div class="page">
    <p>Can servers avoid storing big keys?</p>
    <p>K =</p>
    <p>... ...</p>
    <p>... 1 . . . 1 1 0 0 0 . . . 1 0 . . . 1 1 1</p>
    <p>= (Ink|K )</p>
    <p>Encryption xors secretly selected columns.</p>
    <p>With some storage and trusted environment: Receive columns of K  one at a time, store and update partial sum.</p>
    <p>On the real Internet, without per-client state: Dont reveal intermediate results! Which columns are picked is the secret message! Intermediate results show whether a column was used or not.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 8</p>
  </div>
  <div class="page">
    <p>McTiny Partition key</p>
    <p>K  =</p>
    <p>K1,1 K1,2 K1,3 . . . K1,` K2,1 K2,2 K2,3 . . . K2,` ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>Kr,1 Kr,2 Kr,3 . . . Kr,`</p>
    <p>I Each submatrix Ki,j small enough to fit (including header) into network packet. I Client feeds the Ki,j to server &amp; handles storage for the server. I Server computes Ki,jej , puts result into cookie. I Cookies are encrypted by server to itself using some temporary symmetric key</p>
    <p>(same key for all server connections). No per-client memory allocation.</p>
    <p>I Cookies also encrypted &amp; authenticated to client. I Client sends several Ki,jej cookies, receives their combination. I More stuff to avoid replay &amp; similar attacks.</p>
    <p>I Several round trips, but no per-client state on the server.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 9</p>
  </div>
  <div class="page">
    <p>McTiny Partition key</p>
    <p>K  =</p>
    <p>K1,1 K1,2 K1,3 . . . K1,` K2,1 K2,2 K2,3 . . . K2,` ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>Kr,1 Kr,2 Kr,3 . . . Kr,`</p>
    <p>I Each submatrix Ki,j small enough to fit (including header) into network packet. I Client feeds the Ki,j to server &amp; handles storage for the server. I Server computes Ki,jej , puts result into cookie. I Cookies are encrypted by server to itself using some temporary symmetric key</p>
    <p>(same key for all server connections). No per-client memory allocation.</p>
    <p>I Cookies also encrypted &amp; authenticated to client. I Client sends several Ki,jej cookies, receives their combination. I More stuff to avoid replay &amp; similar attacks. I Several round trips, but no per-client state on the server.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 9</p>
  </div>
  <div class="page">
    <p>Measurements of our software (https://mctiny.org)</p>
    <p>+</p>
    <p>++++++++++++++++++++ + + ++ + + + ++ + ++ + ++ ++ + ++ ++ ++ ++ + ++ ++ ++ ++ ++ ++ ++ + ++ ++ ++ ++ + ++ ++ + ++ ++ ++ + ++ ++ + ++ ++ + ++ + ++ + ++ + ++ + + ++ ++ + ++ + ++ ++ + + ++ ++ ++  ++ ++ + ++ + ++ + ++ ++ ++ ++ + + ++ + ++ ++ ++ + + ++ ++ ++ + ++ ++ ++ + ++ ++ ++ ++ ++ + ++ ++ ++ +++ + ++ ++ + ++ +++ + +++ + ++ ++ ++ + ++ ++ ++ + +++ ++ + + ++ + +++ ++ ++ ++ + + +++ + + +++ + ++ ++ ++ + +++ + +++ + + ++ + +++ + ++ + +++ + +++  +++ ++ + ++ + ++ + +++ ++ + ++ + +++ ++ + ++ ++ + ++ + ++ +++ + + ++ +++ ++ ++  +++ +++  ++ + +++ + ++ ++ + ++ ++ ++ ++ +++ + ++ + ++  ++ ++ + ++ ++ ++ ++ ++ + ++ ++ +++  ++ ++ ++ ++ ++ + + +++++  + ++ +++ + ++ + ++ + +++ ++ + + ++ ++ +++ ++  ++ ++ +++ ++  +++ ++++   ++ ++ +++  ++ +++ ++ + + ++ +++  +++ ++ ++ + ++  ++ +++ ++  +++ ++ +++  +++ + +++ + ++ ++ + ++ +++  +++ ++  +++ ++  +++ +++  +++ ++ + + +++ + ++ ++ + +++++  + +++++    +++ +++++  + ++ +++  +++  +++  +++++  + ++ +++ + ++ +  +++ +++++ + + + +++ + ++ +  ++++++ +  + ++++   +++ ++ ++++  +++  +++ + ++ + ++++++  +  +++ + + ++++  +++ + +++ + ++ +++ + ++   +++ ++++ + +++  + +++   ++++ ++ +++ + +++ + +++ + ++ + +++ + +++  + ++ ++++  ++++  + + ++++ +  +++ + ++ ++++ +   ++++ ++ ++++ + + +++ +  ++ ++++ +  +++ ++++ +  ++ + ++++ + ++ +  +++ + +++ + ++++ +  ++ ++++  + +++ + +++ ++  +++ + +++ +  +++ ++ ++  ++ ++ ++++ +  ++++  +++++ + +  ++ ++++ +  +++ + ++++  ++++  ++ +++  ++++  + +++ ++ +++ +   +++ ++ ++  +++++ +  ++++ + ++  ++ ++++  ++++  + ++++ +   +++ +++++ + + ++ +  ++++ ++ ++++  + ++++ + +                     +                                                        +                                                        +                                                         +                                                       +                                                        +                                                         +                                                       +                 +</p>
    <p>Client time vs. bytes sent, bytes acknowledged, bytes in acknowledgments. Curve shows packet pacing from our new user-level congestion-control library.</p>
    <p>Daniel J. Bernstein &amp; Tanja Lange McTiny https://mctiny.org/ 10</p>
  </div>
</Presentation>
