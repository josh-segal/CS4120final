<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Generation</p>
    <p>of Peephole Superoptimizers</p>
    <p>Sorav Bansal and Alex Aiken</p>
    <p>Stanford University</p>
    <p>{sbansal, aiken} s.stanford.edu</p>
    <p>Produced with LATEX seminar style &amp; PSTricks 1</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>SUPEROPTIMIZATION 3</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>Classical Meaning: To find the optimal code sequence for a</p>
    <p>single, loop-free assembly sequence of instructions</p>
    <p>Target Sequence</p>
    <p>Architecture Specification</p>
    <p>SUPEROPTIMIZATION 3-A</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>Classical Meaning: To find the optimal code sequence for a</p>
    <p>single, loop-free assembly sequence of instructions</p>
    <p>Target Sequence</p>
    <p>Exhaustive Search</p>
    <p>Architecture Specification</p>
    <p>SUPEROPTIMIZATION 3-B</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>Classical Meaning: To find the optimal code sequence for a</p>
    <p>single, loop-free assembly sequence of instructions</p>
    <p>Target Sequence</p>
    <p>Exhaustive Search</p>
    <p>Optimal Sequence</p>
    <p>Architecture Specification</p>
    <p>SUPEROPTIMIZATION 3-C</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>Classical Meaning: To find the optimal code sequence for a</p>
    <p>single, loop-free assembly sequence of instructions</p>
    <p>Common Point-of-View</p>
    <p>Superoptimization is Sloowww..</p>
    <p>Superoptimization is useful only for occasional optimization of</p>
    <p>the critical inner loop</p>
    <p>SUPEROPTIMIZATION 4</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>SUPEROPTIMIZATION 5</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>Exhaustive Search</p>
    <p>SUPEROPTIMIZATION 5-A</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>SUPEROPTIMIZATION 5-B</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>SUPEROPTIMIZATION 5-C</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>mov %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , %eax</p>
    <p>shll %ecx , movl %ecx , %eax</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>b.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>shll %ecx movl %ecx %eax</p>
    <p>movl %ecx %eax</p>
    <p>SUPEROPTIMIZATION 5-D</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>mov %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , %eax</p>
    <p>shll %ecx , movl %ecx , %eax</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>b.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>shll %ecx movl %ecx %eax</p>
    <p>movl %ecx %eax</p>
    <p>SUPEROPTIMIZATION 5-E</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>mov %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , %eax</p>
    <p>shll %ecx , movl %ecx , %eax</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>b.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>shll %ecx movl %ecx %eax</p>
    <p>movl %ecx %eax</p>
    <p>Optimization Database</p>
    <p>SUPEROPTIMIZATION 5-F</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>mov %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , %eax</p>
    <p>shll %ecx , movl %ecx , %eax</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>b.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>shll %ecx movl %ecx %eax</p>
    <p>movl %ecx %eax</p>
    <p>Optimization Database</p>
    <p>To what length of instruction sequences can we scale?</p>
    <p>SUPEROPTIMIZATION 5-G</p>
  </div>
  <div class="page">
    <p>SUPER OPTIMIZATION</p>
    <p>movl %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , (%ebx)</p>
    <p>shll (%ebx), addl $9 , (%ebx)</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>a.out</p>
    <p>mov %eax , %ecx</p>
    <p>in %al , shll %eax , leal (%ecx), %eax</p>
    <p>push (%ebx), movl %ecx , %eax</p>
    <p>shll %ecx , movl %ecx , %eax</p>
    <p>call func , mov %eax , %ecx</p>
    <p>shll %al , out %al , push (%ebx), mov %ecx , (%ebx)</p>
    <p>push %eax , mov %eax , %ecx</p>
    <p>b.out</p>
    <p>Exhaustive Search</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>Optimization Table target optimal</p>
    <p>shll (%ebx) movl %ebx (%ebx)</p>
    <p>addl $9 (%ebx)</p>
    <p>leal (%ecx) (%eax)</p>
    <p>shll %ecx movl %ecx %eax</p>
    <p>movl %ecx %eax</p>
    <p>Optimization Database</p>
    <p>To what length of instruction sequences can we scale?</p>
    <p>How large can we make the optimization database?</p>
    <p>SUPEROPTIMIZATION 5-H</p>
  </div>
  <div class="page">
    <p>Traversing a Link-List</p>
    <p>struct node {</p>
    <p>int val; struct node *next;</p>
    <p>};</p>
    <p>void traverse (struct node *head) {</p>
    <p>while (head) {</p>
    <p>head-&gt;value *= 2; head = head-&gt;next;</p>
    <p>} }</p>
    <p>SUPEROPTIMIZATION 6</p>
  </div>
  <div class="page">
    <p>Traversing a Link-List</p>
    <p>struct node {</p>
    <p>int val; struct node *next;</p>
    <p>};</p>
    <p>void traverse (struct node *head) {</p>
    <p>while (head) {</p>
    <p>head-&gt;value *= 2; head = head-&gt;next;</p>
    <p>} }</p>
    <p>SUPEROPTIMIZATION 6-A</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>SUPEROPTIMIZATION 7</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>SUPEROPTIMIZATION 7-A</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Automatic Removal of Redundant Load</p>
    <p>SUPEROPTIMIZATION 7-B</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>SUPEROPTIMIZATION 8</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>SUPEROPTIMIZATION 8-A</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Automatic Elimination of Memory Access</p>
    <p>SUPEROPTIMIZATION 8-B</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Automatic Instruction Selection</p>
    <p>SUPEROPTIMIZATION 9</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Automatic Removal of Redundant Load</p>
    <p>SUPEROPTIMIZATION 10</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Automatic Copy Propagation</p>
    <p>SUPEROPTIMIZATION 11</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Automatic Register Usage Optimization</p>
    <p>SUPEROPTIMIZATION 12</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>SUPEROPTIMIZATION 13</p>
  </div>
  <div class="page">
    <p>Traversing a Link List</p>
    <p>Global Optimizations involving loop carried dependencies</p>
    <p>cannot be handled by peephole optimizations</p>
    <p>SUPEROPTIMIZATION 13-A</p>
  </div>
  <div class="page">
    <p>Traversing a Link-List</p>
    <p>An automatically generated peephole optimizer can</p>
    <p>capture many traditional optimizations</p>
    <p>Removal of Redundant Loads</p>
    <p>Instruction Selection</p>
    <p>Copy Propagation</p>
    <p>Reducing Register Usage</p>
    <p>SUPEROPTIMIZATION 14</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>SYSTEM ARCHITECTURE 15</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>SYSTEM ARCHITECTURE 15-A</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester</p>
    <p>SYSTEM ARCHITECTURE 15-B</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer</p>
    <p>SYSTEM ARCHITECTURE 15-C</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>SYSTEM ARCHITECTURE 15-D</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>SYSTEM ARCHITECTURE 15-E</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>SYSTEM ARCHITECTURE 15-F</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>Fingerprinter</p>
    <p>SYSTEM ARCHITECTURE 15-G</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>Fingerprinter match?</p>
    <p>SYSTEM ARCHITECTURE 15-H</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>Fingerprinter match? Boolean</p>
    <p>Equivalence Test</p>
    <p>SYSTEM ARCHITECTURE 15-I</p>
  </div>
  <div class="page">
    <p>HARVESTER</p>
    <p>Harvests only loop-free instruction sequences that have a</p>
    <p>single entry point</p>
    <p>- no middle instruction is a jump target</p>
    <p>:</p>
    <p>: . . .</p>
    <p>:</p>
    <p>i : jne instruction 1</p>
    <p>HARVESTER 16</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>movl %esp, %ebp</p>
    <p>movl %ebp, %esp movl %esp, %ebp</p>
    <p>CANONICALIZER 17</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>movl %esp, %ebp</p>
    <p>movl %ebp, %esp movl %esp, %ebp</p>
    <p>movl %eax, %ebp</p>
    <p>movl %ebp, %eax movl %eax, %ebp</p>
    <p>CANONICALIZER 17-A</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>movl %esp, %ebp</p>
    <p>movl %ebp, %esp movl %esp, %ebp</p>
    <p>movl %eax, %ebp</p>
    <p>movl %ebp, %eax movl %eax, %ebp</p>
    <p>movl %esp, %esi</p>
    <p>movl %esi, %esp movl %esp, %esi</p>
    <p>CANONICALIZER 17-B</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>movl %esp, %ebp</p>
    <p>movl %ebp, %esp movl %esp, %ebp</p>
    <p>There are 56 variants of this rule</p>
    <p>CANONICALIZER 18</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>movl %esp, %ebp</p>
    <p>movl %ebp, %esp movl %esp, %ebp</p>
    <p>There are 56 variants of this rule</p>
    <p>movl reg1, reg2</p>
    <p>movl reg2, reg1 movl reg1, reg2</p>
    <p>Reduce it to one rule</p>
    <p>CANONICALIZER 18-A</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>addl %1234, %ebp</p>
    <p>addl %5678, %ebp addl %7912, %ebp</p>
    <p>CANONICALIZER 19</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>addl %1234, %ebp</p>
    <p>addl %5678, %ebp addl %7912, %ebp</p>
    <p>Use symbolic constants to deal with immediates</p>
    <p>addl cons0, %ebp</p>
    <p>addl cons1, %ebp addl cons0+cons1, %ebp</p>
    <p>CANONICALIZER 19-A</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>addl $47, %ebp</p>
    <p>addl $53, %ebp</p>
    <p>addl c0, %r0</p>
    <p>addl c1, %r0</p>
    <p>addl $100, %ebp addl c0+c1, %r0</p>
    <p>Canonicalize</p>
    <p>Query</p>
    <p>Optimization</p>
    <p>Database</p>
    <p>Un-Canonicalize</p>
    <p>CANONICALIZER 20</p>
  </div>
  <div class="page">
    <p>CANONICALIZER</p>
    <p>Only instruction sequences in canonical form are enumerated</p>
    <p>movl r3, r4</p>
    <p>movl r5, r3</p>
    <p>movl r0, r1</p>
    <p>movl r2, r0</p>
    <p>Special Constants are enumerated for immediate operands</p>
    <p>0 ; 1</p>
    <p>0 ; 1</p>
    <p>0 + 1 ; 0 - 1  0 + 1 ; 0 - 1</p>
    <p>CANONICALIZER 21</p>
  </div>
  <div class="page">
    <p>FINGERPRINTER</p>
    <p>FINGERPRINTER 22</p>
  </div>
  <div class="page">
    <p>FINGERPRINTER</p>
    <p>Execute the instruction sequences on random-bit states</p>
    <p>Use hash of result to compute a fingerprint</p>
    <p>FINGERPRINTER 22-A</p>
  </div>
  <div class="page">
    <p>FINGERPRINTER</p>
    <p>Execute the instruction sequences on random-bit states</p>
    <p>Use hash of result to compute a fingerprint</p>
    <p>Approximate memory by a small array (256 bytes)</p>
    <p>Two equivalent accesses guaranteed to access the same</p>
    <p>location in array</p>
    <p>FINGERPRINTER 22-B</p>
  </div>
  <div class="page">
    <p>FINGERPRINTER</p>
    <p>Execute the instruction sequences on random-bit states</p>
    <p>Use hash of result to compute a fingerprint</p>
    <p>Approximate memory by a small array (256 bytes)</p>
    <p>Two equivalent accesses guaranteed to access the same</p>
    <p>location in array</p>
    <p>Compute fingerprint by executing directly on hardware</p>
    <p>Fingerprint of a sequence computed in &lt;3s</p>
    <p>FINGERPRINTER 22-C</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>Fingerprinter match?</p>
    <p>SYSTEM ARCHITECTURE 23</p>
  </div>
  <div class="page">
    <p>SYSTEM ARCHITECTURE</p>
    <p>Training</p>
    <p>Programs</p>
    <p>Harvester Canonicalizer Fingerprinter</p>
    <p>Fingerprint Hashtable</p>
    <p>Fingerprinter match? Boolean</p>
    <p>Equivalence Test</p>
    <p>SYSTEM ARCHITECTURE 23-A</p>
  </div>
  <div class="page">
    <p>EQUIVALENCE TEST</p>
    <p>Execution Test</p>
    <p>(fast)</p>
    <p>Boolean Test</p>
    <p>(slower)</p>
    <p>Execution Test</p>
    <p>Fingerprint on many different states</p>
    <p>Boolean Test</p>
    <p>Use SAT Solver</p>
    <p>EQUIVALENCE TEST 24</p>
  </div>
  <div class="page">
    <p>BOOLEAN TEST</p>
    <p>Machine state represented by a set of registers and a model</p>
    <p>of memory</p>
    <p>BOOLEAN TEST 25</p>
  </div>
  <div class="page">
    <p>BOOLEAN TEST</p>
    <p>Machine state represented by a set of registers and a model</p>
    <p>of memory</p>
    <p>Memory model</p>
    <p>Map from address expressions to data expressions</p>
    <p>Aliasing handled by comparing addresses of multiple accesses</p>
    <p>BOOLEAN TEST 25-A</p>
  </div>
  <div class="page">
    <p>BOOLEAN TEST</p>
    <p>Machine state represented by a set of registers and a model</p>
    <p>of memory</p>
    <p>Memory model</p>
    <p>Map from address expressions to data expressions</p>
    <p>Aliasing handled by comparing addresses of multiple accesses</p>
    <p>Instructions encoded as boolean circuits</p>
    <p>input state output state</p>
    <p>BOOLEAN TEST 25-B</p>
  </div>
  <div class="page">
    <p>BOOLEAN TEST</p>
    <p>Machine state represented by a set of registers and a model</p>
    <p>of memory</p>
    <p>Memory model</p>
    <p>Map from address expressions to data expressions</p>
    <p>Aliasing handled by comparing addresses of multiple accesses</p>
    <p>Instructions encoded as boolean circuits</p>
    <p>input state output state</p>
    <p>Use a SAT Solver to compute equivalence</p>
    <p>BOOLEAN TEST 25-C</p>
  </div>
  <div class="page">
    <p>CONTEXT SENSITIVITY</p>
    <p>Equivalence of two instruction sequences is defined under</p>
    <p>the set of registers live beyond the sequence itself</p>
    <p>CONTEXT SENSITIVITY 26</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Length Original After Canonicalize</p>
    <p>Search Space and Prune</p>
    <p>Search Space</p>
    <p>Exhaustively enumerate sequences up to length 3</p>
    <p>EXPERIMENTAL RESULTS 27</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Integer addition</p>
    <p>for (i = 0; i &lt; 64; i++) sum += a[i]</p>
    <p>EXPERIMENTAL RESULTS 28</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Integer addition</p>
    <p>for (i = 0; i &lt; 64; i++) sum += a[i]</p>
    <p>psadbw: sum of absolute differences of 8 consecutive</p>
    <p>integers</p>
    <p>psubb %mm0, %mm0</p>
    <p>psadbw &amp;a[i], %mm0</p>
    <p>movd %mm0, sum</p>
    <p>EXPERIMENTAL RESULTS 28-A</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Comparison c[i] = (a[i] &lt; b[i]) ? c0 : c1 7x</p>
    <p>Minimum c[i] = (a[i] &lt; b[i]) ? a[i] : b[i] 8x</p>
    <p>Pixel-difference sum += abs(a[i] b[i]) 10x</p>
    <p>XOR c[i] = a[i] b[i] 2x</p>
    <p>Sprite Copy c[i] = (a[i] == 0)? b[i] : a[i] 2x</p>
    <p>MMX and conditional-move instructions are not well-exploited</p>
    <p>EXPERIMENTAL RESULTS 29</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>We evaluate our optimizer on SPEC benchmarks compiled</p>
    <p>using g</p>
    <p>Use two cost functions</p>
    <p>Codesize</p>
    <p>Runtime</p>
    <p>Number of memory accesses</p>
    <p>Number of jump instructions</p>
    <p>Instruction costs</p>
    <p>EXPERIMENTAL RESULTS 30</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Program Codesize</p>
    <p>Improvement</p>
    <p>gzip 3.95%</p>
    <p>mcf 5.86%</p>
    <p>crafty 1.71%</p>
    <p>bzip2 4.58%</p>
    <p>gcc 1.12%</p>
    <p>twolf 1.47%</p>
    <p>parser 3.06% Codesize improvement on executables</p>
    <p>already optimized for size (-Os) Codesize Improvement: 1  6%</p>
    <p>Time taken to optimize: &lt;3 secs</p>
    <p>EXPERIMENTAL RESULTS 31</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Program Instruction Count</p>
    <p>Improvement</p>
    <p>gzip 4.16%</p>
    <p>mcf 3.73%</p>
    <p>crafty 2.19%</p>
    <p>bzip2 4.11%</p>
    <p>gcc 2.44%</p>
    <p>twolf 2.17%</p>
    <p>parser 3.84% Instruction count improvement on</p>
    <p>optimized executables (-O2) Instruction Count Improvement: 2  4%</p>
    <p>Speedup: 1  5%</p>
    <p>Time taken to optimize: &lt;3 secs</p>
    <p>EXPERIMENTAL RESULTS 32</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
    <p>Number of Distinct Optimization Rules Learnt</p>
    <p>Codesize 3000</p>
    <p>Runtime 2100</p>
    <p>Re-use of Optimization Rules</p>
    <p>Frequency of Use</p>
    <p>&gt;1000</p>
    <p>Total: 28,593 optimizations</p>
    <p>EXPERIMENTAL RESULTS 33</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS</p>
    <p>We have demonstrated the construction of an optimizer</p>
    <p>using only exhaustive search</p>
    <p>Many (sometimes huge) performance opportunities are</p>
    <p>still unexploited by compilers</p>
    <p>Scaling to longer sequence lengths is the key</p>
    <p>http://cs.stanford.edu/sbansal/superoptimizer</p>
    <p>CONCLUSIONS 34</p>
  </div>
</Presentation>
