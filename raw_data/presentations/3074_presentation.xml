<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Principled Schedulability Analysis for Distributed Storage Systems</p>
    <p>Using Thread Architecture Models Suli Yang*, Jing Liu,</p>
    <p>Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
    <p>* work done while at UW-Madison</p>
  </div>
  <div class="page">
    <p>Scheduling: A Fundamental Primitive</p>
    <p>Modern storage systems are shared</p>
    <p>Correct and efficient request scheduling is indispensable</p>
    <p>N S</p>
    <p>snapchat</p>
    <p>A</p>
    <p>R/W R/W R/W R/W</p>
    <p>E</p>
    <p>Shared Storage</p>
    <p>A A</p>
    <p>A</p>
    <p>S N E</p>
  </div>
  <div class="page">
    <p>Popular storage systems have fundamental scheduling deficiencies</p>
    <p>Broken Scheduling in Current Systems</p>
    <p>[MongoDB - #21858]: A high throughput update workload  could cause starvation on secondary reads</p>
    <p>[HBase - #8884]:  when the read load is high on a specific RS is high, the write throughput also get impacted</p>
    <p>dramatically, and even write data loss...</p>
    <p>[Cassandra - #10989]: inability to balance writes/reads/compaction/flushing</p>
    <p>etc.</p>
  </div>
  <div class="page">
    <p>Why Is Scheduling Broken?  The complexities in modern storage systems</p>
    <p>- Distributed: &gt;1000 servers - Highly concurrent: ~1000 interacting threads in each server - Long execution path: requests traverses numerous threads across multiple machines</p>
    <p>We introduce Thread Architecture Model to describe scheduling complexities</p>
  </div>
  <div class="page">
    <p>Thread Architecture Model (TAM)  Encodes scheduling related info:</p>
    <p>Request flows  Thread interactions  Resource consumption patterns</p>
    <p>Easy to obtain automatically</p>
    <p>From complicated systems to an understandable and analyzable model  HBase  Cassandra  MongoDB  Riak</p>
    <p>Packet Ack ! &quot;#</p>
    <p>Data Xceive</p>
    <p>Ack Process</p>
    <p>! &quot; Data Stream</p>
    <p>Data Xceive ! &quot;#</p>
    <p>r1</p>
    <p>r2</p>
    <p>f1</p>
    <p>a3</p>
    <p>Packet Ack w6</p>
    <p>w7</p>
    <p>w3</p>
    <p>w7 w2</p>
    <p>w4</p>
    <p>a1</p>
    <p>w4</p>
    <p>w5</p>
    <p>w1</p>
    <p>w5 w3</p>
    <p>r1 r2</p>
    <p>w5</p>
    <p>w2</p>
    <p>w3</p>
    <p>a2</p>
    <p>LOG Sync</p>
    <p>Mem Flush !</p>
    <p>RPC Respond ! &quot;</p>
    <p>RPC Read ! &quot;</p>
    <p>LOG Append</p>
    <p>RPC Handle ! $&quot;%$#%</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode 5</p>
  </div>
  <div class="page">
    <p>TAM Exposes Scheduling Problems</p>
    <p>We discovered five categories of problems that happen in real systems</p>
    <p>- Lack of scheduling points</p>
    <p>- Unknown resource usage</p>
    <p>- Hidden contention between threads</p>
    <p>- Uncontrolled thread blocking</p>
    <p>- Ordering constraints upon requests</p>
  </div>
  <div class="page">
    <p>Fix Problems Leads to Effective Scheduling  TAM-based simulation finds problem-free thread architectures</p>
    <p>Provides schedulability: various desired scheduling policies can be realized</p>
    <p>HBase Tamed-HBase</p>
    <p>Implementation transforms system to be schedulable  Muzzled-HBase: approximated implementation</p>
    <p>Effective scheduling under YCSB and other workloads</p>
  </div>
  <div class="page">
    <p>Thread Architecture Model enables</p>
    <p>principled schedulability analysis on general distributed storage systems</p>
  </div>
  <div class="page">
    <p>Outline  Overview</p>
    <p>Thread Architecture Model</p>
    <p>Scheduling Problems</p>
    <p>Achieve Schedulability: A Case Study</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Thread Architecture Model</p>
    <p>Packet Ack ! &quot;#</p>
    <p>Data Xceive</p>
    <p>Ack Process</p>
    <p>! &quot; Data Stream</p>
    <p>Data Xceive ! &quot;#</p>
    <p>r1</p>
    <p>r2</p>
    <p>f1</p>
    <p>a3</p>
    <p>Packet Ack w6</p>
    <p>w7</p>
    <p>w3</p>
    <p>w7 w2</p>
    <p>w4</p>
    <p>a1</p>
    <p>w4</p>
    <p>w5</p>
    <p>w1</p>
    <p>w5 w3</p>
    <p>r1 r2</p>
    <p>w5</p>
    <p>w2</p>
    <p>w3</p>
    <p>a2</p>
    <p>LOG Sync</p>
    <p>Mem Flush !</p>
    <p>RPC Respond ! &quot;</p>
    <p>RPC Read ! &quot;</p>
    <p>LOG Append</p>
    <p>RPC Handle ! $&quot;%$#%</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode Packet AckData Xceive</p>
    <p>Ack Process</p>
    <p>Data Stream</p>
    <p>Data Xceive</p>
    <p>r1</p>
    <p>r2</p>
    <p>f1</p>
    <p>a3</p>
    <p>Packet Ack w6</p>
    <p>w7</p>
    <p>w3</p>
    <p>w7 w2</p>
    <p>w4</p>
    <p>a1</p>
    <p>w4</p>
    <p>w5</p>
    <p>w1</p>
    <p>w5 w3</p>
    <p>r1 r2</p>
    <p>w5</p>
    <p>w2</p>
    <p>w3</p>
    <p>a2</p>
    <p>LOG Sync</p>
    <p>Mem Flush</p>
    <p>RPC RespondRPC Read</p>
    <p>LOG Append</p>
    <p>RPC Handle</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode</p>
    <p>Packet AckData Xceive</p>
    <p>Ack Process</p>
    <p>Data Stream</p>
    <p>Data Xceive</p>
    <p>r1</p>
    <p>r2</p>
    <p>f1</p>
    <p>a3</p>
    <p>Packet Ack w6</p>
    <p>w7</p>
    <p>w3</p>
    <p>w7 w2</p>
    <p>w4</p>
    <p>a1</p>
    <p>w4</p>
    <p>w5</p>
    <p>w1</p>
    <p>w5 w3</p>
    <p>r1 r2</p>
    <p>w5</p>
    <p>w2</p>
    <p>w3</p>
    <p>a2</p>
    <p>LOG Sync</p>
    <p>Mem Flush</p>
    <p>RPC RespondRPC Read</p>
    <p>LOG Append</p>
    <p>RPC Handle</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode Packet AckData Xceive</p>
    <p>Ack Process</p>
    <p>Data Stream</p>
    <p>Data Xceive</p>
    <p>r1</p>
    <p>r2</p>
    <p>f1</p>
    <p>a3</p>
    <p>Packet Ack w6</p>
    <p>w7</p>
    <p>w3</p>
    <p>w7 w2</p>
    <p>w4</p>
    <p>a1</p>
    <p>w4</p>
    <p>w5</p>
    <p>w1</p>
    <p>w5 w3</p>
    <p>r1 r2</p>
    <p>w5</p>
    <p>w2</p>
    <p>w3</p>
    <p>a2</p>
    <p>LOG Sync</p>
    <p>Mem Flush</p>
    <p>RPC RespondRPC Read</p>
    <p>LOG Append</p>
    <p>RPC Handle</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode</p>
    <p>Name C NI L</p>
    <p>stage (threads performing similar tasks) Name</p>
    <p>&amp; ,</p>
    <p>CPU I/O network Lock</p>
    <p>resource usage</p>
    <p>request flow</p>
    <p>request queue (scheduling point)</p>
    <p>blocking</p>
  </div>
  <div class="page">
    <p>Thread Architecture Model  TAM encodes scheduling related info:</p>
    <p>Request flows  Thread interactions  Resource consumption patterns</p>
    <p>From complex systems to analyzable models</p>
    <p>TADalyzer: from live system to TAM automatically  Only 20-50 lines of user annotation code required</p>
  </div>
  <div class="page">
    <p>Outline  Overview</p>
    <p>Thread Architecture Model</p>
    <p>Scheduling Problems</p>
    <p>Achieve Schedulability: A Case Study</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>TAM Exposes Scheduling Problems  No scheduling  Unknown resource usage  Hidden contention  Blocking  Ordering constraint</p>
    <p>Common in distributed storage systems  HBase, Cassandra, MongoDB, Riak</p>
    <p>Directly identifiable from TAM  No low-level implementation details required</p>
    <p>Req Handle &amp;</p>
    <p>Req Handle</p>
  </div>
  <div class="page">
    <p>TAM Exposes Scheduling Problems  No scheduling  Unknown resource usage  Hidden contention  Blocking  Ordering constraint</p>
    <p>Common in distributed storage systems  HBase, Cassandra, MongoDB, Riak</p>
    <p>Directly identifiable from TAM  No low-level implementation details required</p>
  </div>
  <div class="page">
    <p>! &quot; C-ReqHandle</p>
    <p>! &quot; Msg In</p>
    <p>! #$% Read</p>
    <p>! #$% Mutation</p>
    <p>! #$% V-Mutation</p>
    <p>! Respond</p>
    <p>! &quot; C-Respond</p>
    <p>! &quot; Msg Out</p>
    <p>...</p>
    <p>! &quot; Msg In</p>
    <p>! #$% Read</p>
    <p>! #$% Mutation</p>
    <p>! #$% V-Mutation</p>
    <p>! Respond</p>
    <p>! &quot; Msg Out</p>
    <p>...</p>
    <p>l1</p>
    <p>l2</p>
    <p>l2</p>
    <p>Cassandra Node</p>
    <p>l1</p>
    <p>Scheduling Problem: Unknown Resource Usage</p>
  </div>
  <div class="page">
    <p>Scheduling Problem: Unknown Resource Usage</p>
    <p>Workload: C1: issues cold requests C2: issues cold and cached requests</p>
    <p>Expectation: C2 has much higher throughput (due to cached request)</p>
    <p>CPU underutilized</p>
  </div>
  <div class="page">
    <p>Unknown Resource Usage: Solution Workload:</p>
    <p>C1: issues cold requests C2: issues cold and cached requests</p>
    <p>Expectation: C2 has much higher throughput (due to cached request)</p>
  </div>
  <div class="page">
    <p>Scheduling Problem: Unknown Resource Usage</p>
    <p>Resource usage patterns unknown to schedulers until after the processing begins</p>
    <p>Forces schedulers to make decisions before information is available</p>
    <p>Identified as red square brackets around resource symbols in TAM</p>
    <p>Req Handle</p>
  </div>
  <div class="page">
    <p>Scheduling Problem: Blocking</p>
    <p>! &quot;#$% #&amp;% Worker</p>
    <p>&quot; Feedback</p>
    <p>! $ &amp; Oplog Writer</p>
    <p>! $ Writer Batcher</p>
    <p>&quot; NetInterfaceFetcher</p>
    <p>! &quot;#$% #&amp;% Worker1</p>
    <p>Primary NodeSecondary Node</p>
    <p>MongoDB</p>
  </div>
  <div class="page">
    <p>Scheduling Problem: Blocking</p>
    <p>MongoDB</p>
    <p>Workload: C1: reads from primary (does not go to secondary) C2: writes to primary (replicate to secondary node) time 10: the secondary node slows down</p>
    <p>Expectation: C1 reads throughput remains stable</p>
    <p>Time (s)</p>
  </div>
  <div class="page">
    <p>Blocking: Solution Workload:</p>
    <p>C1: reads C2: writes (replicate to secondary node) time 10: the secondary node slows down</p>
    <p>Expectation: C1 reads throughput remains stable</p>
    <p>MongoDB</p>
  </div>
  <div class="page">
    <p>Scheduling Problem: Blocking  Stages with fixed number of threads block on other stages</p>
    <p>Unable to schedule requests that could have been completed because all threads block</p>
    <p>Identified as dashed arrow point to stages with queues in TAM</p>
    <p>Req Handle &amp;</p>
    <p>I/O ,</p>
  </div>
  <div class="page">
    <p>Outline  Overview</p>
    <p>Thread Architecture Model</p>
    <p>Scheduling Problems</p>
    <p>Achieve Schedulability: A Case Study</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Fixing Problems Leads to Schedulability</p>
    <p>TAM-based simulation framework: explore thread architectures  Simulates how systems perform under workloads</p>
    <p>Easily study architecture designs and scheduling policies</p>
    <p>Implementation: realize schedulable systems  Also validates that simulation matches the real world</p>
  </div>
  <div class="page">
    <p>Simulation: HBase to Tamed-HBase</p>
    <p>Packet AckData Xceive</p>
    <p>Ack Process</p>
    <p>Data Stream</p>
    <p>Data Xceive</p>
    <p>r1</p>
    <p>r2</p>
    <p>f1</p>
    <p>a3</p>
    <p>Packet Ack w6</p>
    <p>w7</p>
    <p>w3</p>
    <p>w7 w2</p>
    <p>w4</p>
    <p>a1</p>
    <p>w4</p>
    <p>w5</p>
    <p>w1</p>
    <p>w5 w3</p>
    <p>r1 r2</p>
    <p>w5</p>
    <p>w2</p>
    <p>w3</p>
    <p>a2</p>
    <p>LOG Sync</p>
    <p>Mem Flush</p>
    <p>RPC RespondRPC Read</p>
    <p>LOG Append</p>
    <p>RPC Handle</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode</p>
    <p>RegionServer/DataNode</p>
    <p>Packet Ack</p>
    <p>Ack Process Packet Ack</p>
    <p>a1 CPU</p>
    <p>!</p>
    <p>RegionServer/DataNode</p>
    <p>IO &quot;</p>
    <p>LOG Sync</p>
    <p>Network ! #</p>
    <p>Network ! # &quot;</p>
    <p>IO</p>
    <p>Data Xceive ! #&quot;</p>
    <p>RPC Read ! #</p>
    <p>RPC Handle ! #$&quot;% [ ]</p>
    <p>RPC Respond ! # LOG Append</p>
    <p>&quot;</p>
    <p>Mem Flush !</p>
    <p>Data Stream ! #</p>
    <p>a2</p>
  </div>
  <div class="page">
    <p>Implementation : Tamed-HBase to Muzzled-HBase</p>
    <p>Some approximations to make implementation easier</p>
    <p>Supports multiple scheduling policies</p>
    <p>Proper scheduling under various workloads</p>
  </div>
  <div class="page">
    <p>Muzzled-HBase: Weighted Fairness</p>
    <p>Workloads: Five clients, each with different weight , run YCSB (reads mostly)</p>
    <p>Expectation: Client receives throughput proportional to weight</p>
  </div>
  <div class="page">
    <p>Muzzled-HBase: Weighted Fairness</p>
    <p>Workloads: Five clients, each with different weight , run YCSB (reads mostly)</p>
    <p>Expectation: Client receives throughput proportional to weight</p>
  </div>
  <div class="page">
    <p>Muzzled-HBase: Tail Latency Guarantee</p>
    <p>Workloads: Foreground client: runs YCSB (update-heavy) Background client: random Gets or Puts</p>
    <p>Expectation: Foreground latency remains stable</p>
  </div>
  <div class="page">
    <p>Muzzled-HBase: Tail Latency Guarantee</p>
    <p>Workloads: Foreground client: runs YCSB Background client: random Gets or Puts</p>
    <p>Expectation: Foreground latency remains stable</p>
  </div>
  <div class="page">
    <p>Muzzled-HBase: Tail Latency Guarantee</p>
    <p>Workloads: Foreground client: runs YCSB Background client: random Gets or Puts</p>
    <p>Expectation: Foreground latency remains stable</p>
  </div>
  <div class="page">
    <p>Outline  Overview</p>
    <p>Thread Architecture Model</p>
    <p>Scheduling Problems</p>
    <p>Achieve Schedulability: A Case Study</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion  We introduce thread architecture models</p>
    <p>Reduce complex distributed scheduling to an understandable representation</p>
    <p>Enable schedulability analysis</p>
    <p>We discover five scheduling problems  Point to problematic architecture that exist in real systems</p>
    <p>Fixing them enables effective scheduling</p>
    <p>Complex systems need to be built with the help of TAM  Analyze existing system and enable schedulability</p>
    <p>Design systems that are problem-free and natively schedulable</p>
  </div>
  <div class="page">
    <p>Thank you! Questions? (poster number: 28)</p>
    <p>OceanBase: We are Hiring Geo-scale relational database behind Alipay</p>
    <p>OceanBase 35</p>
  </div>
</Presentation>
