<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Xiaodong Yu, Ya Xiao, Kirk W. Cameron, Danfeng (Daphne) Yao</p>
    <p>Dept. of Computer Science, Virginia Tech</p>
    <p>Comparative Measurement of Cache Configurations Impacts on Cache Timing Side-Channel Attacks</p>
  </div>
  <div class="page">
    <p>Special Thanks to</p>
    <p>the whole VarSys project team: Thomas Lux, Bo Li, Jon Bernard, Chandler Jearls, Li Xu, Tyler Chang, Prof. Yili Hong, Prof. Layne Watson, Prof. Godmar Back, and Prof. Margaret Ellis</p>
  </div>
  <div class="page">
    <p>Cache Side-Channel Attacks are Real Dangers</p>
    <p>Secret Key</p>
    <p>Cipher AlgorithmPlaintext Ciphertext</p>
    <p>Various side-channels</p>
    <p>Power Consumption Electromagnetic Radiation</p>
    <p>Execution Time</p>
    <p>Cache Attacks: Guess the secret keys by exploiting the time differences between the cachehits and cache-misses</p>
    <p>Acoustic Emission</p>
    <p>Cache Side-Channel Attacks are Practical and Severe</p>
    <p>Both attacks break the application isolations by leveraging the cache side-channel as well as other instruction processing vulnerabilities 3</p>
  </div>
  <div class="page">
    <p>Targeted Problem</p>
    <p>How do cache configurations influence the performance of cache side-channel attacks?</p>
  </div>
  <div class="page">
    <p>Cache Configurations Impact on the Time-Driven Side-Channel Attacks</p>
    <p>Reference time model</p>
    <p>Attacking time data</p>
    <p>Correlating the reference and attacking data</p>
    <p>Reduced key search space</p>
    <p>Brute-force search</p>
    <p>Known Key Secret Key</p>
    <p>Recovered Key</p>
    <p>(a) Profiling phase (b) Attacking phase</p>
    <p>(c) correlating phase</p>
    <p>(d) searching phase</p>
    <p>O nline phases on victim</p>
    <p>server O</p>
    <p>ffline phases on local system</p>
    <p>Bernsteins Attack on AES Time-driven attacks solely rely on the time differences between cache-hits and cachemisses; more cache-misses  easier attacks</p>
    <p>Cache configurations can impact the timedriven attacks; but its unclear HOW</p>
    <p>Two difficulties in comparative measurements:  There is no quantifiable metric for the attacks  There is no configurable caches in</p>
    <p>commodity CPUs</p>
  </div>
  <div class="page">
    <p>Our Design: A Quantifiable Metric for Time-driven Cache Attacks The conventional success-fail binary metric cannot support the comparative measurements</p>
    <p>Equivalent Key Length (EKL): a normalized metric to represent the key search space</p>
    <p>!&quot;# = 1  ()*+ log/ 0(</p>
    <p>The success rate of the attacks: EKL/number of encryptions 6</p>
  </div>
  <div class="page">
    <p>Our Design: use GEM5 to Emulate the Configurable Caches GEM5 is a modular platform that has been widely used in computer architecture research community; we use GEM5 to cycle-accurately emulate the systems with configurable cache</p>
    <p>Private Cache Size Private Cache Associativity</p>
    <p>Shared Cache Associativity</p>
    <p>Shared Cache Size</p>
    <p>Cacheline Size</p>
    <p>Replacement Policy</p>
    <p>Clusivity</p>
  </div>
  <div class="page">
    <p>Measurement Results: Private Cache Size (PCS)</p>
    <p>X-axis: the number of encryptions that the attacker conducted Y-axis: the equivalent key length (EKL)</p>
    <p>Theoretical: larger PCS leads to more difficult attacks; after 4kB PCS, the attacks are impossible Fact: after 4kB PCS, although much harder, the attacks still can succeed Reason: AES computation itself and the system operations can kick some lookup table entries out of the private cache</p>
  </div>
  <div class="page">
    <p>Measurement Results: Private Cache Associativity (PCA)</p>
    <p>Basic cache unit is not Byte, but the cacheline</p>
    <p>cacheline cacheline cacheline cacheline</p>
    <p>cacheline cacheline cacheline cacheline</p>
    <p>cacheline cacheline cacheline cacheline</p>
    <p>cacheline cacheline cacheline cacheline</p>
    <p>set 2-way4-way</p>
    <p>loaded data</p>
    <p>Theoretical: larger PCA leads to more difficult attacks Fact: after 8-way PCA, the attacks get significant harder to succeed Reason: after 8-way PCA, loaded entry mostly can find an appropriate place in the set without flushing the next-read data</p>
  </div>
  <div class="page">
    <p>Measurement Results: Cache Clusivity (CC)</p>
    <p>Clusivity describes the consistency policy between private and shared cache</p>
    <p>shared cache</p>
    <p>private cache inclusiveexclusive</p>
    <p>Theoretical: inclusive policy results in less overall cache-miss penalties, hence harder attacks Fact: exclusive policy leads to harder attacks Reason: private caches cache-misses dominate the AES computation time</p>
  </div>
  <div class="page">
    <p>Measurement Results: SCS and SCA w/ and w/o Neighbor Processes</p>
    <p>Sh ar</p>
    <p>ed C</p>
    <p>ac he</p>
    <p>Si</p>
    <p>ze (S</p>
    <p>C S)</p>
    <p>w/ Neighbor Processes w/o Neighbor Processes Sh</p>
    <p>ar ed</p>
    <p>C ac</p>
    <p>he</p>
    <p>A ss</p>
    <p>oc ia</p>
    <p>ti vi</p>
    <p>ty (S</p>
    <p>C A</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Measurement Results: CLS and RP</p>
    <p>Cacheline Size (CLS) Replacement Policy (RP)</p>
    <p>Fact: insignificant impact Reason: AES computation has good spatial locality</p>
    <p>Fact: Random policy results in easiest attacks Reason: AES computation has good spatial locality, but Random leverages no locality</p>
  </div>
  <div class="page">
    <p>Suggestions to the Attackers, Defenders, and System Designers Takeaways: a) Private cache configuration is the key b) Shared cache configuration is trivial; adding the neighbor processes can increase</p>
    <p>the success rates; c) Replacement policies and clusivity also can influence the attacks success rates.</p>
    <p>To attackers: Binding a noise process with the same CPU of encryptions  easier attacks To defenders: a) Setting the private cache at the inflection points  optimal cost-efficiency balance b) Using lock-into-cache instruction  more difficult attacks To system designers: Heterogenous replacement policy and clusivity  good balance between system performance and security 13</p>
  </div>
  <div class="page">
    <p>Summary of Our Comparative Measurement Work</p>
    <p>We made the cache attack performances comparable</p>
    <p>We use the GEM5 platform to emulate the configurable caches</p>
    <p>We systematically each cache parameters influences: the private cache is the key; the shared caches impacts are trivial; The replacement policies and cache clusivity also have impacts</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>CPU Cache Model is a Two-Level Hierarchy</p>
    <p>Process 0 Process 1</p>
    <p>Two types of cache attacks:  Access-driven attacks  Time-driven attacks</p>
  </div>
  <div class="page">
    <p>Access-driven Attacks are Lightweight but Require Access Privileges</p>
    <p>The access-driven attacks are popular:  It is more accurate  It requires less computations</p>
    <p>attacker victim FLUSHAccess</p>
    <p>Fast RELOAD NO RELOAD</p>
    <p>Slow</p>
    <p>They require access privileges  Revoking the privilege</p>
    <p>using Intels Cache Allocation Technology (CAT) can prevent the attacks [Liu HPCA16]</p>
    <p>FLUSH+RELOAD Attack</p>
  </div>
  <div class="page">
    <p>Conducting Comparative Measurements</p>
    <p>Every GEM5 instances have the same system settings but different cache configurations</p>
    <p>Execute the Bernsteins attack on AES on each GEM5 instances</p>
    <p>Use the OpenSSLs AES implementation; OpenSSL precomputes the results of each AES step and stores them as a 4KB lookup table</p>
  </div>
  <div class="page">
    <p>Limitations and Future Research Directions Limitations: a) Unclear whether the measurement is compatible with other cache side-channel attacks b) The measurement does not count the effects of some modern hardware technologies</p>
    <p>Future directions: a) Study whether this measurements approach, findings, and conclusions transferable to</p>
    <p>other cache side-channel attacks b) Study whether the RISC-based embedded systems cache configurations have the same</p>
    <p>or similar impacts c) Study how accurate this emulation-based measurement is; try to exploit the findings to</p>
    <p>build a prediction model for the cache timing attack vulnerability of unseen systems 19</p>
  </div>
</Presentation>
