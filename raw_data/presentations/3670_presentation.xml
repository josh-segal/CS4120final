<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Detecting Attacks in Routers Using Sketches</p>
    <p>Dhiman Barman Piyush Satapathy Gianfranco Ciardo</p>
  </div>
  <div class="page">
    <p>Network Attack Detection</p>
    <p>Network anomalies are prevalent  Flash crowds, DoS, failures, worms,</p>
    <p>Detect Anamolies quickly and accurately  Two basic approaches</p>
    <p>Statistics-based: looking for abnormal behavior  E.g., heavy hitters, big changes  Prior knowledge not required</p>
    <p>Signature based: Looking for known patterns  Port scan, address scan, Mal wares</p>
  </div>
  <div class="page">
    <p>Problem Addressed  Accurate, memory efficient and scalable</p>
    <p>techniques to detect attacks  worms, viruses, superspreaders and DoS.</p>
    <p>Enabling change detection in the routers by looking only at the IP headers</p>
    <p>A general methodology to use sketches to recognize attacks in the routing architectures</p>
  </div>
  <div class="page">
    <p>Example of Attack</p>
    <p>Domain W to Domain J</p>
    <p>Domain X to Domain J</p>
    <p>Domain Y to Domain J</p>
    <p>Domain Z to Domain K</p>
    <p>Domain J</p>
    <p>Domain K</p>
    <p>Router Router</p>
    <p>Router</p>
    <p>Router</p>
    <p>Router</p>
    <p>Router A</p>
    <p>Attacker</p>
    <p>Link C</p>
    <p>Link B</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Attack Definitions  Sketch Background  Proposed Methods  Simulation and Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Background  Worm spreads and gains control of hundreds of computers in</p>
    <p>a few minutes  Example: Code Red version 1 and 2, Nimda etc</p>
    <p>State of the art:  PCA (offline) [Lakhina et. al SIGCOMM04],  Data mining [KrishnaMurthy et. al IMC03]  Time series analysis [Estan SIGCOMM03]</p>
    <p>Our Focus: Detecting and filtering attacks at short time scale by online Methods</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Put Sketch in the Router Line Card  Sketches will update the flow cache for each given time interval  Data Collection and Analysis part will analyze the change detection</p>
    <p>based on the algorithm and distance calculation functions.</p>
    <p>Data Collection And</p>
    <p>Analysis Over</p>
    <p>Forwarding Hard Ware</p>
    <p>Software</p>
    <p>NetFlow Flow Cache</p>
    <p>Processor</p>
    <p>Terminated Flow Records</p>
    <p>SketchesBus</p>
    <p>Update Alarm / No Alarm</p>
  </div>
  <div class="page">
    <p>Attack Definitions</p>
    <p>S is a sequence of packets identified by (&lt;i, j, p, q&gt;, v) where</p>
    <p>i and j denote packet source IP address and port</p>
    <p>p and q denote the destination IP address and port</p>
    <p>v denotes size of the packet</p>
    <p>Flow given by Cisco's NetFlow, R(i, j, p, q) is the multi set containing all the packets corresponding to a given (i, j, p, q) combination</p>
  </div>
  <div class="page">
    <p>Port Scans</p>
    <p>Attacks where a particular IP address and port pair connects to a destination on several ports</p>
    <p>PortScan(i, j, p)  |{q : | R(i, j, p, q)| &gt; 0}| &gt; PS</p>
    <p>srcIP srcPort</p>
    <p>destPort</p>
    <p>destIP</p>
  </div>
  <div class="page">
    <p>Address Scans  Attacks where a particular IP address</p>
    <p>connects to multiple destination IP addresses on a particularly vulnerable port</p>
    <p>AddrScan(I, j, q)  |{p : | R(i, j, p, q) &gt; 0}| &gt; AS</p>
    <p>or</p>
    <p>AddrScan(i, q)|  |{(j, p) : |R(i, j, p, q)| &gt; 0}| &gt; AS</p>
    <p>srcIP srcPort destPort destIP</p>
  </div>
  <div class="page">
    <p>Malware</p>
    <p>Attacks where a number of sources try to connect to a particular destination or a set of destinations on any ports. WormMalwSpam (i)  |{(j, p, q) : | R(i, j, p; q)| &gt; 0}| &gt; WMS</p>
    <p>srcIP srcPort destPort destIP</p>
  </div>
  <div class="page">
    <p>Sketch Background  A sketch of a data stream is a compact</p>
    <p>summarization  Sketched summary is much smaller than the data</p>
    <p>stream itself  Sketching is randomized projection of a signal</p>
    <p>(using hashing)  Examples:</p>
    <p>Count Min Sketch [Cormode 2003]  Count Bloom Filter [Broder Internet Mathematics</p>
  </div>
  <div class="page">
    <p>Count Min Sketch  CM sketch maintains an array of width (K) and</p>
    <p>depth (H).  Hashed by choosing a hash function uniformly at</p>
    <p>random from a pair wise independent family of hash functions.</p>
    <p>Update (Keyt, Valuet): Tj [ hj(keyt)] += Valuet (for all j)</p>
    <p>j</p>
    <p>H</p>
    <p>+Ct</p>
    <p>+Ct</p>
    <p>+Ct</p>
    <p>hj(k)</p>
    <p>hH(k)</p>
    <p>h1(k)</p>
    <p>Key t</p>
  </div>
  <div class="page">
    <p>Bloom Filter  An array of (m) bits initially all set to 0</p>
    <p>An incoming element is hashed through (k) hash functions and bit positions returned are set to 1</p>
    <p>Update (Keyt): Tj [ Hj(keyt)] = 1 (for all j)</p>
    <p>Update (Keyt, Valuet): Tj [ hj(keyt)] += Valuet (for all j) for Counting Bloom Filter</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>Hk</p>
    <p>m bit Vector</p>
    <p>K hash Functions</p>
    <p>Key t</p>
  </div>
  <div class="page">
    <p>Multi Count Bloom Filter</p>
    <p>Counting Bloom Filter with m counters and divided into k groups of size (m / k) each</p>
    <p>ith Hash function maps from [m*(i-1)/k]+1 to [m*i/k]  Update (keyt, valuet): Tj [ hj(keyt)] += value t (for all j)</p>
    <p>Key t</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>Hk</p>
    <p>m counters Divided into K groups</p>
    <p>K hash Functions</p>
  </div>
  <div class="page">
    <p>FM Sketch</p>
    <p>Estimates the number of distinct items in a stream of values from [0,, M-1]</p>
    <p>Assume a hash function h(x) that maps incoming values x in [0,, M1] uniformly across [0,, 2L-1], where L = O(logM)</p>
    <p>Let lsb(y) denote the position of the least-significant 1 bit in the binary representation of y  A value x is mapped to lsb(h(x))</p>
    <p>Maintain FM Sketch = BITMAP array of L bits, initialized to 0  For each incoming value x, set BITMAP[ lsb(h(x)) ] = 1</p>
    <p>Data stream: 3 0 5 3 0 1 7 5 1 0 3 7</p>
    <p>Number of distinct values: 5</p>
    <p>x = 5 h(x) = 101100 lsb(h(x)) = 2 0 0 0 001</p>
    <p>BITMAP 5 4 3 2 1 0</p>
  </div>
  <div class="page">
    <p>Space-Time Complexity Sketches Space Update Time Query Time</p>
    <p>Count-Min 1/ ; O(K) 1 1</p>
    <p>Bloom Filter m ; Constant k k</p>
    <p>Count Bloom Filter</p>
    <p>mC; O(m) k k</p>
    <p>Multi Counting Bloom filter</p>
    <p>mC; O(m) k k</p>
    <p>FM ML O(M) M M</p>
    <p>C = Number of Bits in the Counter in Bloom Filter M = Number of Bit Maps used in FM Sketch</p>
    <p>L = Number of Bits in FM Sketch All Notations Described Earlier</p>
  </div>
  <div class="page">
    <p>Our proposals  Linear Combination Approach</p>
    <p>Change between two sketches S1(1; 1) and S2(2; 2) is given as Sd = S2 - kS1 (sketches are closed under linear combination)</p>
    <p>If Sd &gt;  then there is an anomaly and Alarm raised  Use Count Min sketch, Count and Multi Count Bloom Filter</p>
    <p>Change Detection By Sliding Window Method  Using two windows, one static and one moving  Parallel Execution of all the given window lengths.  Use FM, Change Detection Algorithm and Distance function</p>
  </div>
  <div class="page">
    <p>Change Detection using FM Sketch</p>
    <p>A bit vector of length equal to k K different windows sizes</p>
    <p>Forming 2 diff. windows</p>
    <p>M</p>
    <p>Set the bit to 1</p>
    <p>Inputs: (A,M); A is a mX1 matrix and M is a KX3 matrix 1: c0  0 2: for i = 1 do 3: si  FMi 4: Windowx,i  mx,i intervals from time c0 5: Windowy,i  my,i intervals from in coming data streams 6: end for 7: while more flow counts to process do 8: slide windowy,i by 1 sample 9: if distance (windowx,i,windowy,i)  i then 10: c0  current time 11: Output change at time c0 12: clear all windows and GOTO step 1 13: end if 14: end while Output: c0</p>
  </div>
  <div class="page">
    <p>Distance Function</p>
    <p>Difference between two windows calculated using:  Probability Distribution [Kifer VLDB 2004]</p>
    <p>L1 Distance</p>
    <p>KL Distance (Empirical Distribution Function)</p>
  </div>
  <div class="page">
    <p>Sketches in Action</p>
    <p>Traces of given Time slots</p>
    <p>Sketching Change detection module</p>
    <p>(k,u)  Alarms Pre</p>
    <p>Processing</p>
    <p>sketches</p>
    <p>W, d, m</p>
    <p>K</p>
    <p>A, M</p>
    <p>Header Payload</p>
    <p>Time Key Count</p>
    <p>LBNL &amp; NLANR Traces</p>
    <p>CAIDAs Coral Software</p>
    <p>Sketch Library</p>
    <p>Functions</p>
  </div>
  <div class="page">
    <p>Experimental Issues</p>
    <p>Experiments Run on Intel Xeon 1.4Ghz processor with 512 MB of RAM</p>
    <p>Implementation of Sketches  Hash functions are created randomly  Random numbers are generated with the max number of 261-1</p>
    <p>Following Hash Functions for all the 4 sketches  Update (key,value)  getFrequency (key)</p>
    <p>Synthetics traces generated where attack flows are injected</p>
  </div>
  <div class="page">
    <p>Evaluation (Accuracy)</p>
    <p>Sketches of 10 heavy ranked flows Sketching changes in heavy ranked flows between two time intervals</p>
  </div>
  <div class="page">
    <p>Evaluation (Accuracy)</p>
    <p>FM sketch of 10 Intervals of normal traffic</p>
    <p>FM sketch of 10 Intervals of malicious traffic trace</p>
  </div>
  <div class="page">
    <p>Scatter Plot (Accuracy)</p>
    <p>Exact Flow Size (Bytes)</p>
    <p>E st</p>
    <p>. C</p>
    <p>ou nt</p>
    <p>B lo</p>
    <p>o m</p>
    <p>F lo</p>
    <p>w S</p>
    <p>iz e(</p>
    <p>B yt</p>
    <p>es )</p>
    <p>Exact Flow Size (Bytes)</p>
    <p>E st</p>
    <p>. M</p>
    <p>u ltC</p>
    <p>o u</p>
    <p>n tB</p>
    <p>lo o</p>
    <p>m S</p>
    <p>iz e</p>
    <p>(B yt</p>
    <p>e s)</p>
    <p>Exact Flow Size (Bytes)</p>
    <p>E st</p>
    <p>C o</p>
    <p>un t</p>
    <p>M in</p>
    <p>F lo</p>
    <p>w S</p>
    <p>iz e</p>
    <p>( B</p>
    <p>yt e</p>
    <p>s)</p>
    <p>Scatter plot of Exact Vs Est. CountMin</p>
  </div>
  <div class="page">
    <p>Count Min Sketch in Attack Detection</p>
    <p>Number of Hash Functions (K)</p>
    <p>F re</p>
    <p>q ue</p>
    <p>nc y</p>
    <p>E rr</p>
    <p>or (</p>
    <p>% )</p>
    <p>Port Scan Attack Detection By CountMin Sketch</p>
    <p>Number of Hash Functions (K)</p>
    <p>F re</p>
    <p>qu e</p>
    <p>n cy</p>
    <p>E rr</p>
    <p>o r</p>
    <p>(% )</p>
    <p>Address Scan Attack Detection By CountMin Sketch</p>
    <p>Number of Hash Functions (K)</p>
    <p>F re</p>
    <p>qu e</p>
    <p>n cy</p>
    <p>E rr</p>
    <p>or (</p>
    <p>% )</p>
    <p>Malware Attack Detection By CountMin Sketch</p>
  </div>
  <div class="page">
    <p>Attacks Vs Sketches (Efficiency)</p>
    <p>Number of Hash Functions (K)</p>
    <p>F re</p>
    <p>qu e</p>
    <p>nc y</p>
    <p>E rr</p>
    <p>o r</p>
    <p>(% )</p>
    <p>Port Scan Attack Detection By Different Sketches</p>
    <p>CountMin</p>
    <p>CountingBloom</p>
    <p>MultiCountingBloom</p>
    <p>Number of Hash Functions (K)</p>
    <p>F re</p>
    <p>qu en</p>
    <p>cy E</p>
    <p>rr or</p>
    <p>( %</p>
    <p>)</p>
    <p>Address Scan Attack Detection By Different Sketches</p>
    <p>CountMin CountingBloom MultiCountingBloom</p>
    <p>Number of Hash Functions (K)</p>
    <p>F re</p>
    <p>qu e</p>
    <p>nc y</p>
    <p>E rr</p>
    <p>o r</p>
    <p>(% )</p>
    <p>Malware Detection By Different Sketches</p>
    <p>CountMin CountingBloom MultiCountingBloom</p>
  </div>
  <div class="page">
    <p>Evaluation by FM Sketch (Accuracy)</p>
    <p>Change Detection Accuracy by FM sketch using probability distribution</p>
    <p>distance function</p>
    <p>Comparison of two different distance functions on exact</p>
    <p>flow counts</p>
  </div>
  <div class="page">
    <p>Evaluation by FM Sketch (Efficiency)</p>
    <p>Accuracy of two distance functions on synthetic traces. The x-axis represents values such as threshold is mean(X)+ std(X) where X is the flows counts.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Sketches can detect heavy changes quickly and accurately</p>
    <p>Compact sketch-like data structures can be implemented on-chip hardware</p>
    <p>Reverse hashing of sketches to identify malicious flows is challenging</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
