<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Apiary: Easy-to-Use Desktop Application Fault Containment on Commodity Operating Systems</p>
    <p>Shaya Potter and Jason Nieh June 23, 2010 USENIX ATC</p>
    <p>IBM Research Research performed at Columbia University</p>
  </div>
  <div class="page">
    <p>Desktop Applications are Buggy!</p>
    <p>Desktop applications are prone to being exploited  Adobe Acrobat  multiples times in 2009-2010</p>
    <p>PDF has dethroned MS Word documents as most common malware vector [F-Secure]</p>
    <p>But why should this even be possible?  I want to view the PDF as a read-only item</p>
  </div>
  <div class="page">
    <p>Approaches to Application Security</p>
    <p>Access Control Systems  Ex: Janus, Systrace, SELinux</p>
    <p>Rewrite/Recompile Applications  Ex: Java, Googles Native Client</p>
    <p>Isolating Applications in Virtual Machines  Ex: VMware Unity</p>
  </div>
  <div class="page">
    <p>Isolated VMs for each Application?</p>
    <p>Pros  No need to make complex rules  Exploited applications are isolated  Works with existing applications</p>
    <p>Cons  Exploited applications remain exploited  Significant runtime overhead  Lose integrated desktop feel  Increase management burden</p>
  </div>
  <div class="page">
    <p>Apiary</p>
  </div>
  <div class="page">
    <p>Desktop Applications are Isolated</p>
    <p>Web E-MailOffice Documents</p>
    <p>Banking / Finance</p>
    <p>IM Media</p>
  </div>
  <div class="page">
    <p>Persistent Application Containers</p>
    <p>Changes persist between application execution</p>
    <p>Needed for persistent data  Quicken  Research Papers</p>
    <p>But persistent data still needs to be isolated  Office documents have no need to access</p>
    <p>financial data in Quicken</p>
  </div>
  <div class="page">
    <p>Apiary Retains Desktop Look and Feel</p>
  </div>
  <div class="page">
    <p>Introduces Ephemeral Containers</p>
    <p>PDF</p>
    <p>Media</p>
    <p>PDF</p>
  </div>
  <div class="page">
    <p>Ephemeral Application Containers</p>
    <p>Compromises cannot persist  Protects from concurrent compromises  Protects privacy</p>
    <p>Enables untrusted data to be viewed safely</p>
  </div>
  <div class="page">
    <p>Problems to Solve</p>
    <p>Exploited applications remain exploited</p>
    <p>Significant overhead</p>
    <p>Lose integrated desktop feel</p>
    <p>Increase management burden</p>
  </div>
  <div class="page">
    <p>Apiarys Architecture</p>
    <p>3 Components</p>
  </div>
  <div class="page">
    <p>OS Containers</p>
    <p>OS Containers are prevalent on commodity OSs  Solaris Zones, Linux Containers/VServer</p>
    <p>Low overhead  Quick to instantiate</p>
    <p>Lower isolation than hardware VMs  Apiary can be used with hardware VMs if threat</p>
    <p>model requires it</p>
  </div>
  <div class="page">
    <p>Problems to Solve</p>
    <p>Exploited applications remain exploited</p>
    <p>Significant overhead</p>
    <p>Lose integrated desktop feel</p>
    <p>Increase management burden</p>
  </div>
  <div class="page">
    <p>Containers Integrated at Multiple Points</p>
  </div>
  <div class="page">
    <p>Integrated Display</p>
    <p>Problem  Each container must have isolated displays</p>
    <p>XSendEvent() / W32SendMessage() are vectors to exploit other running applications</p>
    <p>But, need a single desktop environment</p>
    <p>Solution  Provide each container with its own virtual display</p>
    <p>server  Viewer composes together containers displays</p>
    <p>Single display, menu, task bar</p>
  </div>
  <div class="page">
    <p>Display Integration</p>
  </div>
  <div class="page">
    <p>Integrated Applications</p>
    <p>Problem  Applications in different containers depend on</p>
    <p>each other  Firefox wants to run a PDF viewer or OpenOffice</p>
    <p>to view documents</p>
    <p>Solution  Applications can execute each other in an</p>
    <p>ephemeral helper mode</p>
  </div>
  <div class="page">
    <p>Integrated Applications</p>
    <p>PDF Media PDF</p>
    <p>Web</p>
  </div>
  <div class="page">
    <p>Integrated File System</p>
    <p>Problem:  Ephemeral helper applications are useless if</p>
    <p>data cant be shared  How does Firefox pass the PDF file to the PDF</p>
    <p>viewer?</p>
    <p>Solution  Limited File System Integration  Protected/Shared /tmp for inter-application</p>
    <p>execution</p>
  </div>
  <div class="page">
    <p>Integrated File System  /tmp</p>
    <p>Each container has its own directory under /tmp</p>
    <p>/tmp</p>
    <p>firefox ooffice t-bird</p>
  </div>
  <div class="page">
    <p>Integrated File System  /tmp</p>
    <p>Each container uses that directory as its own temp directory  Firefox will save all temporary files to /tmp/firefox</p>
    <p>/tmp</p>
    <p>firefox ooffice t-bird</p>
    <p>file.pdf</p>
  </div>
  <div class="page">
    <p>Integrated File System  /tmp</p>
    <p>But files are invisible to other containers</p>
    <p>/tmp</p>
    <p>firefox ooffice t-bird</p>
  </div>
  <div class="page">
    <p>Integrated File System  /tmp</p>
    <p>Firefox will launch xpdf /tmp/firefox/file.pdf</p>
    <p>/tmp</p>
    <p>firefox ooffice t-bird</p>
    <p>file.pdf</p>
  </div>
  <div class="page">
    <p>Integrated File System  /tmp</p>
    <p>Creates a new ephemeral container for Xpdf  Allows /tmp/firefox/file.pdf to be visible in</p>
    <p>the new ephemeral Xpdf container  Ephemeral Xpdf container executes program as</p>
    <p>called</p>
    <p>/tmp</p>
    <p>firefox ooffice eph-xpdft-bird</p>
    <p>file.pdf</p>
  </div>
  <div class="page">
    <p>Integrated File System  Global View</p>
    <p>Problem  Files might need to be shared between</p>
    <p>isolated containers.</p>
    <p>Solution  File System Manager Container  Provides a global namespace view to move</p>
    <p>files between containers</p>
  </div>
  <div class="page">
    <p>Problems to Solve</p>
    <p>Exploited applications remain exploited</p>
    <p>Significant overhead</p>
    <p>Lose integrated desktop feel</p>
    <p>Increase management burden</p>
  </div>
  <div class="page">
    <p>Container Management Problems</p>
    <p>How do we efficiently provision them?</p>
    <p>How do we efficiently store them?</p>
    <p>How do we efficiently get updates applied?</p>
  </div>
  <div class="page">
    <p>Possible Approaches?</p>
    <p>Package Management</p>
    <p>COW Disks/File Systems</p>
  </div>
  <div class="page">
    <p>Package Management</p>
    <p>Web PDF Office</p>
  </div>
  <div class="page">
    <p>COW Disks/File Systems</p>
    <p>Web PDF Office</p>
    <p>Web PDF Office</p>
    <p>Web PDF Office</p>
    <p>Template Image</p>
    <p>Clone #1</p>
    <p>Clone #2</p>
  </div>
  <div class="page">
    <p>COW Disks/File Systems</p>
    <p>Web-v2 PDF Office</p>
    <p>Web PDF Office</p>
    <p>Web PDF Office</p>
    <p>Template Image</p>
    <p>Clone #1</p>
    <p>Clone #2</p>
  </div>
  <div class="page">
    <p>The Virtual Layered File System</p>
    <p>Makes the FS a full partner with the package manager  Packages are transformed into a set of shared</p>
    <p>layers</p>
    <p>Combine Unioning File System concepts with package management</p>
  </div>
  <div class="page">
    <p>VLFS Example</p>
    <p>WebLayers Office LibC X11</p>
    <p>Provisioned VLFSs</p>
    <p>Web Office Suite</p>
  </div>
  <div class="page">
    <p>The VLFS/Software Appliance</p>
    <p>VLFS defines Software Appliance</p>
  </div>
  <div class="page">
    <p>How Apiary Uses the VLFS</p>
    <p>Users install application appliances instead of individual applications  Predefined sets of layers  Able to be created by various organizations</p>
    <p>Banks  ISVs</p>
    <p>Appliances leverage global set of layers  Dont need to manage systems from scratch</p>
  </div>
  <div class="page">
    <p>How Does it Solve the Problems?</p>
    <p>How do we efficiently provision them?  Shared Layers means no copying  Instantly able to create file systems for ephemeral</p>
    <p>execution</p>
    <p>How do we efficiently store them?  Each common layer is only stored once, like a regular</p>
    <p>system</p>
    <p>How do we efficiently get updates applied?  Update layer once in repository, able to be used by all</p>
    <p>application containers that depend on that layer</p>
  </div>
  <div class="page">
    <p>Other VLFS Advantages</p>
    <p>How do we make sure they are secure?  Dividing into layers isolates changes, makes</p>
    <p>malicious changes visible</p>
    <p>Avoids DLL Hell  Each application container has its own</p>
    <p>independent set of shared libraries  Allows incompatible applications to be installed in</p>
    <p>same machine</p>
  </div>
  <div class="page">
    <p>Problems to Solve</p>
    <p>Exploited applications remain exploited</p>
    <p>Significant overhead</p>
    <p>Lose integrated desktop feel</p>
    <p>Increase management burden</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
  </div>
  <div class="page">
    <p>Case Study #1  Malicious PDF File</p>
    <p>Traditional Desktop  Can destroy entire computer</p>
    <p>Always viewed in ephemeral container  Attack succeeds  Doesnt affect user</p>
  </div>
  <div class="page">
    <p>Case Study #2  Malicious Plugins</p>
    <p>Traditional Computer  Persistent, invisible</p>
    <p>Ephemeral Container  Doesnt impact user beyond current ephemeral instance</p>
    <p>Persistent Container  Worse  Does damage</p>
    <p>Can have multiple Persistent Containers for similar programs  Similar to Red/Green Isolation</p>
    <p>Can see if system programs were modified by looking at private layer</p>
  </div>
  <div class="page">
    <p>Usage Study</p>
    <p>24 Users performed tasks including:  E-mail  IMing  Web Browsing  Document editing</p>
    <p>Three environments  Plain Linux, No Ephemeral Containers, Ephemeral Containers</p>
  </div>
  <div class="page">
    <p>Usage Study</p>
    <p>Task completion time was about the same in all containers</p>
    <p>Users didnt notice overhead of instantiating ephemeral containers</p>
    <p>Users found environment easy to use</p>
  </div>
  <div class="page">
    <p>Overhead as Containers Scale</p>
    <p>25 parallel instances/containers running each test  Overhead generally minimal, even kernel build is</p>
    <p>only about 10%</p>
  </div>
  <div class="page">
    <p>Quick Instantiation</p>
    <p>Firefox T-Bird OOffice Xpdf Mplayer Apiary .005s .005s .005s .005s .005s Create 276s 294s 365s 291s 294s Tar Extract 86s 87s 150s 81s 81s FS-Snap .016s .016s .016s .016s .016s</p>
    <p>Why not use an FS with a snapshot/branching semantic (ZFS/Btrfs?)  Provisions basically as quick!  But, each FS once branched is independent</p>
    <p>Has to be managed independently!</p>
  </div>
  <div class="page">
    <p>Efficient Disk Usage</p>
    <p>Firefox T-Bird OOffice Xpdf Mplayer Size 353MB 367MB 645MB 339MB 355MB # Layer 129 125 186 130 162 Shared 330MB 335MB 329MB 330MB 326MB Unique 23MB 32MB 316MB 9MB 29MB</p>
    <p>Single FS Multiple FS VLFSs</p>
    <p>Size 743MB 2.1GB 743MB</p>
  </div>
  <div class="page">
    <p>Fast File System Updates</p>
    <p>Time is just for actual file system update  For machine maintenance in Apiary, machines can be</p>
    <p>offline which can add significant time to the traditional updates</p>
    <p>Traditional VLFS Time 18s 0.12s</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Apiary introduces a new compartmentalized application paradigm  Works with existing applications, without changes</p>
    <p>or recompilation  Introduces Ephemeral Containers to prevent</p>
    <p>compromises from persisting</p>
    <p>VLFS enables simple container management</p>
    <p>Low Overhead and Easy to Use</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>For more information</p>
    <p>http://www.ncl.cs.columbia.edu/</p>
    <p>spotter@cs.columbia.edu spotter@us.ibm.com</p>
  </div>
</Presentation>
