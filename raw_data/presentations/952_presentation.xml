<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Energy Discounted Computing on Multicore Smartphones</p>
    <p>Meng Zhu and Kai Shen</p>
  </div>
  <div class="page">
    <p>Power- Smartphones</p>
    <p>Ful &amp; Hungry</p>
    <p>Multi-core Popularity and Low Battery Anxiety</p>
    <p>Tri-cluster Deca-core</p>
  </div>
  <div class="page">
    <p>Multicore Energy Disproportionality</p>
    <p>Multicore processors are not energy proportional, despite all the efforts</p>
    <p>Aggressive hardware sharing  Shared clocking circuitry forces cores to operate at the same frequency  Power-gating enables low power idle state, but deep idle states can only be entered during simultaneous sleep</p>
  </div>
  <div class="page">
    <p>Multicore Energy Disproportionality</p>
    <p>State Name Power Description</p>
    <p>C0 Wait for interrupt (WFI)</p>
    <p>Individual core clock gated.</p>
    <p>C1 Individual powerdown</p>
    <p>- Individual core power gated. - L1 cache content lost</p>
    <p>C2 Cluster powerdown</p>
    <p>- Enter during simultaneous sleeps</p>
    <p>- All state (e.g. L2$) lost</p>
  </div>
  <div class="page">
    <p>Multicore Energy Disproportionality</p>
    <p>Very energy efficient during peak utilization</p>
    <p>Consume minimum power when all cores are quiescent</p>
    <p>Inefficient when only one core is utilized</p>
    <p>Number of active CPUs</p>
    <p>P ow</p>
    <p>er (W</p>
    <p>at ts</p>
    <p>)</p>
    <p>Tegra 3 based Nexus 7 tablet</p>
    <p>Number of active CPUs P</p>
    <p>ow er</p>
    <p>(W at</p>
    <p>ts )</p>
    <p>Kirin 925 based Huawei Mate7</p>
  </div>
  <div class="page">
    <p>Mobile Apps Lack Parallelism  Typical smartphone applications are built on event</p>
    <p>driven, UI-centric framework and serve a single user</p>
    <p>Do not have sufficient parallelism to utilize multiple CPU cores simultaneously</p>
    <p>On a quad-core system, of all the non-idle time:  All four cores are utilized: less than 1%  Only one core is utilized: 68%  Test conducted with a variety of popular mobile</p>
    <p>applications (Gao et al. ISPASS15)</p>
  </div>
  <div class="page">
    <p>Opportunity</p>
    <p>Hardware energy disproportionality and Lack of thread level parallelism &gt; Computing resources at additional cores are available at a deep energy discount</p>
    <p>Utilize these resources to run best-effort tasks: useful tasks on a smartphone but do not involve direct user interaction (thus its time of execution is flexible)</p>
  </div>
  <div class="page">
    <p>Best-effort Tasks</p>
    <p>Upload and download System maintenance work</p>
    <p>Background sensing Proactive Tasks</p>
  </div>
  <div class="page">
    <p>Energy Discounted Computing</p>
    <p>Bundling tasks to save energy on smartphones is not new  Lane et al. [Sensys 2013]: Piggybacking sensing</p>
    <p>activities  Nikzad et al. [ICSE 2014]: Annotation language for</p>
    <p>developers to delay certain work</p>
    <p>Our contribution: Maximum energy discount is only realized when the co-run best-effort task execution does not elevate the overall system power state.</p>
  </div>
  <div class="page">
    <p>Best-effort task execution must NOT</p>
    <p>Disrupt the multicore CPU idle state [C state]  Follow the step of interactive task execution  Non-work-conserving-scheduling</p>
    <p>Increase the core frequency [P state]  Invisible to the system frequency adjustment  Do not affect frequency scaling for interactive tasks</p>
    <p>Affect the smartphones suspension period [S state]</p>
    <p>Hide behind the CPU power profile of interactive tasks</p>
  </div>
  <div class="page">
    <p>Implementation (Huawei Mate7, Android 4.4, Linux 3.10.30)</p>
    <p>Best-effort tasks are put into a control group</p>
    <p>Idle state preservation:  Each core maintains a status bit: BUSY, IDLE,</p>
    <p>BEST-EFFORT  Regular tasks have absolute priority over best-effort</p>
    <p>ones  If a best-effort task is picked, check sibling cores to</p>
    <p>see if anyone is BUSY. If no one is BUSY, enter idle state directly (non-work-conserving scheduling)</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>CPU frequency preservation:  DVFS is controlled by cpufreq governor, adjust</p>
    <p>frequency based on load  Best-effort tasks are ignored during load calculation  Performance of regular tasks are not affected</p>
    <p>Suspension state preservation:  Best-effort tasks are not allowed to hold wakelocks</p>
  </div>
  <div class="page">
    <p>Contention Mitigation</p>
    <p>Co-run applications leads to contention on multicore resources, cause performance degradation to interactive applications</p>
    <p>Scheduler priority modification does not remove contention on shared resources, i.e. cache and memory bandwidth</p>
    <p>Monitoring last-level-cache miss rate using performance counters and throttle best-effort tasks accordingly</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Contention mitigation:  Monitor last-level-cache miss rate  ARMV7_A15_PERFCTR_L2_CACHE_REFILL_RE</p>
    <p>AD/WRITE  Sample every 20 ms  Stop scheduling best-effort tasks when the miss</p>
    <p>rate reaches certain threshold</p>
    <p>Overhead: less than 1% for all of our benchmarks</p>
  </div>
  <div class="page">
    <p>Evaluation: Setup</p>
    <p>Device: Huawei Mate7 (late 2014)  1.8 GHz ARM Cortex-A15 Quad Core  2MB L2 cache, 2GB RAM  Power measurement using Monsoon power meter</p>
    <p>with smartphone battery detached</p>
  </div>
  <div class="page">
    <p>Evaluation: Benchmark</p>
    <p>Interactive application:  Bbench: load locally cached websites  Angry bird: casual game</p>
    <p>Best-effort tasks: Spin, Compression, Encryption, AppOpt, FaceAnalysis</p>
  </div>
  <div class="page">
    <p>Evaluation: Test flow</p>
    <p>Use automate UI testing tools (RERAN[1]) to minimize variations</p>
    <p>Launch two applications roughly at the same time</p>
    <p>Configure the workload such that application executions mostly overlap</p>
    <p>[1] Gomez et al. ICSE13</p>
    <p>Discount</p>
    <p>model based library, to process images and extract positions of landmark features. This is particularly useful in facial expression analysis. We use it to represent emerging passive sensing applications. To make the experiment reproducible, we use locally cached face images as its input.</p>
    <p>Input Workload Application workloads are carefully chosen such that the executions of the interactive application and the best-effort task can mostly overlap with each other when using our co-run strategy. Specifically, Bbench are configured to load 15 websites with two seconds delay (to mimic user think time) between each website. The whole session takes roughly 44 seconds to complete. Angry Bird, on the other hand, is played for 42 seconds. Best-effort tasks are launched in the background shortly after the interactive application starts and the amount of the work is configured such that they can finish right before the interactive application ends under the most strict (throttling-based) best-effort task scheduling policy. To make experiments reproducible, we use RERUN [11], a record and replay tool for the Android operating system, to automate the test flow. User interaction sessions are recorded into a sequence of touch and system events. Later, these events are sent back to the phone to replay user interactions with precise timing and accuracy.</p>
    <p>To evaluate the energy efficiency of our system when running best-effort tasks with interactive applications, we run Bbench and Angry Bird with each of the five besteffort workloads. We run each pair under two different scheduling strategies:</p>
    <p>default, where there is no change to the original system behavior;</p>
    <p>power-states-preservation scheduling, where our non-work-conserving scheduling techniques are used.</p>
    <p>Figure 2 and Figure 3 show the result. Energy discount (s ) of the best-effort task is calculated as</p>
    <p>s = 1  Eco-run  Einteractive alone</p>
    <p>Ebest-effort alone (1)</p>
    <p>where Ebest-effort is the amount of energy consumed by the best-effort task running alone under the default system setting, Eco-run is the total system energy consumption of the co-run execution and Einteractive is the total system energy consumption when running the interactive application alone. Each of our energy metrics measures the</p>
    <p>active energythose consumed above the system idle power consumption.</p>
    <p>The result clearly shows that our system can realize deep energy discount in all co-run scenarios, ranging from 23% to 71%. We attribute this to the fact that the overall CPU power states are preservedthe execution of the best-effort task is completely hidden behind the interactive application power profile.</p>
    <p>Spin Compress Encrypt AppOpt FaceAnalysis 0</p>
    <p>E ne</p>
    <p>rg y</p>
    <p>di sc</p>
    <p>ou nt</p>
    <p>ra tio</p>
    <p>(A) Besteffort task energy discount</p>
    <p>Default corun Power states preservation scheduling Power states preservation and contentionaware scheduling</p>
    <p>Spin Compress Encrypt AppOpt FaceAnalysis 0</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>ti m</p>
    <p>e (in</p>
    <p>s ec</p>
    <p>on ds</p>
    <p>)</p>
    <p>(B) Besteffort task elapsed time</p>
    <p>Spin Compress Encrypt AppOpt FaceAnalysis 0</p>
    <p>Besteffort tasks</p>
    <p>W eb</p>
    <p>pa ge</p>
    <p>re nd</p>
    <p>er in</p>
    <p>g sl</p>
    <p>ow do</p>
    <p>w n</p>
    <p>ra tio (C) Impact on BBench interactivity</p>
    <p>Figure 2: Experimental results of running interactive application BBench web browsing with various best-effort tasks under different scheduling strategies. We show the best-effort task energy discount (A), best-effort task elapsed time (B), and impact on BBenchs interactivity (webpage rendering slowdown) (C).</p>
    <p>This is further illustrated in Figure 4. When Bbench running alone, the current trace shows the typical burstthen-idle pattern that is common on smartphones due to the long user think time between interactions. During these idle periods, the system is able to enter deep sleep states to conserve energy (trough in the current waveform). However, best-effort tasks, without any control, will disrupt these deep sleep states. In addition, during the burst period, simultaneous executions of both tasks would increase the system load and drive up the CPU fre</p>
  </div>
  <div class="page">
    <p>Energy Discount</p>
    <p>Spin Compress Encrypt AppOpt Face 0</p>
    <p>E ne</p>
    <p>rg y</p>
    <p>di sc</p>
    <p>ou nt</p>
    <p>ra tio</p>
    <p>AngryBird</p>
    <p>Spin Compress Encrypt AppOpt Face 0</p>
    <p>E ne</p>
    <p>rg y</p>
    <p>di sc</p>
    <p>ou nt</p>
    <p>ra tio</p>
    <p>Bbench</p>
    <p>Spin Compress Encrypt AppOpt Face 0</p>
    <p>E ne</p>
    <p>rg y</p>
    <p>di sc</p>
    <p>ou nt</p>
    <p>ra tio AngryBird</p>
    <p>Default corun Power states preservation scheduling</p>
  </div>
  <div class="page">
    <p>P state disruption</p>
    <p>Current Wave (Bbench + Spin)</p>
    <p>C state and P state disruption</p>
    <p>Time (Seconds)</p>
    <p>C ur</p>
    <p>re nt</p>
    <p>(A m</p>
    <p>ps ) Bbench running alone</p>
    <p>Time (Seconds)</p>
    <p>Bbench + Spin default corun</p>
    <p>Time (Seconds)</p>
    <p>Bbench + Spin with power state</p>
    <p>preserving scheduling</p>
  </div>
  <div class="page">
    <p>Energy Discount</p>
    <p>Spin Compress Encrypt AppOpt Face 0</p>
    <p>S AngryBird</p>
    <p>Spin Compress Encrypt AppOpt Face 0</p>
    <p>S lo</p>
    <p>w do</p>
    <p>w n</p>
    <p>ra tio</p>
    <p>Bbench</p>
    <p>Spin Compress Encrypt AppOptFaceAnalysis 0</p>
    <p>E ne</p>
    <p>rg y</p>
    <p>di sc</p>
    <p>ou nt</p>
    <p>ra tio</p>
    <p>Default corun Power states preservation scheduling Power states preservation and contentionaware scheduling</p>
  </div>
  <div class="page">
    <p>Abundance of Discounted CPU Cycles Category Abundance Frames of</p>
    <p>face analyzed Minutes of video</p>
    <p>encrypted Web</p>
    <p>browsing 1.63 30 21</p>
    <p>Video streaming</p>
    <p>Gaming 1.61 21 15</p>
    <p>Navigation 2.42 13 9</p>
    <p>Messaging 2.88 3 2</p>
    <p>Social network</p>
    <p>* Abundance of discounted CPU cycles is the ratio of energy discounted CPU cycles to the active CPU cycles used by the corresponding interactive application.</p>
  </div>
  <div class="page">
    <p>Summary - Energy disproportionality of multicore CPUs and lack of</p>
    <p>parallelism of smartphone applications provide abundant opportunities to run useful best-effort tasks at deep energy discount</p>
    <p>- Maximum energy discount can only be realized when overall system power states are preserved</p>
    <p>- Contention-aware scheduling based on monitoring hardware performance counters is effective in mitigating interactivity slowdown</p>
    <p>- Experiments show significant energy savings (up to 63%) and little performance impact (less than 4% in the worst case) to the smartphone interactivity</p>
  </div>
  <div class="page">
    <p>Energy Discounted Computing on Multicore Smartphones</p>
    <p>Meng Zhu and Kai Shen</p>
    <p>Thank you Questions?</p>
  </div>
</Presentation>
