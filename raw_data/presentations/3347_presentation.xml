<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>All Your Queries are Belong to Us:</p>
    <p>The Power of File-Injection Attacks on Searchable Encryption</p>
    <p>Yupeng Zhang , Jonathan Katz, Charalampos Papamanthou University of Maryland</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Background on Searchable Encryption</p>
    <p>Attacks on Searchable Encryption</p>
    <p>Experimental results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Email system</p>
    <p>client</p>
    <p>Privacy?</p>
    <p>Search?</p>
  </div>
  <div class="page">
    <p>Searchable Encryption</p>
  </div>
  <div class="page">
    <p>What is Searchable Encryption?</p>
    <p>client server</p>
    <p>search query: keyword</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Encrypted Storage: Skyhigh Networks, CipherCloud</p>
    <p>Encrypted Emails</p>
  </div>
  <div class="page">
    <p>Leakage</p>
  </div>
  <div class="page">
    <p>Leakage of Searchable Encryption</p>
    <p>client server</p>
    <p>search query: keyword</p>
    <p>deterministic!</p>
    <p>file access patterns!</p>
  </div>
  <div class="page">
    <p>Leakage of Searchable Encryption</p>
    <p>client server keyword</p>
    <p>new file:</p>
    <p>In or not?</p>
    <p>No forward privacy!</p>
  </div>
  <div class="page">
    <p>Leakage of Searchable Encryption</p>
    <p>Search pattern leakage: can tell when query repeats.  Access pattern leakage: can tell whether a file is returned. Leaked by all efficient searchable encryption schemes.</p>
    <p>No Forward Privacy: can search old tokens on new files.</p>
    <p>All SE schemes except [CM05, SPS14, Bost16] do not have forward privacy.</p>
  </div>
  <div class="page">
    <p>What information does this leakage reveal?</p>
  </div>
  <div class="page">
    <p>Prior Attacks on Searchable Encryption</p>
    <p>Islam et al. (IKK12) proposed a query recovery attack.  Cash et al. (CGPR15) proposed another attack with higher success</p>
    <p>probability.</p>
    <p>These attacks assume: the server knows all the clients files in plaintext.</p>
  </div>
  <div class="page">
    <p>Main Contributions  We study the file-injection attacks thoroughly. (First proposed in</p>
    <p>CGPR15).</p>
    <p>We present attacks that significantly improve the success probability.</p>
    <p>Eliminate or relax the clients file leakage assumption.</p>
    <p>Extends to conjunctive search.</p>
    <p>We suggest reducing or eliminating these leakages, instead of accepting them by default.</p>
  </div>
  <div class="page">
    <p>Attack Target: Query Recovery Attacks Why query privacy is important?</p>
    <p>Practical: Keywords are part of the files. File content can be recovered. (CGPR15) Keywords can be used to classify files and help other attacks.</p>
    <p>Theoretical: Unexpected vulnerabilities if searchable encryption is used as a building block.</p>
  </div>
  <div class="page">
    <p>Our Attacks</p>
  </div>
  <div class="page">
    <p>Attack Model: File-injection Attack</p>
    <p>client server</p>
    <p>search query:</p>
    <p>F1 F2 F3</p>
    <p>k</p>
    <p>F4</p>
    <p>F3 F4</p>
  </div>
  <div class="page">
    <p>Binary Search Attack</p>
    <p>k0 k1 k2 k3 k4 k5 k6 k7File 1:</p>
    <p>k0 k1 k2 k3 k4 k5 k6 k7File 2:</p>
    <p>k0 k1 k2 k3 k4 k5 k6 k7File 3:</p>
    <p>search result</p>
    <p>Only inject 14 files for a universe of 10,000 keywords.  Can recover all queries with probability 1.  Inject before seeing the queries (non-adaptive).  Only use file access pattern leakage.  Universe defined by the server (small universe).</p>
  </div>
  <div class="page">
    <p>Limitation</p>
    <p>Long injected files (|K|/2 keywords each).</p>
  </div>
  <div class="page">
    <p>Threshold Countermeasure</p>
    <p>Filter all files that contain more than T keywords. - Index only T keywords in a file that has more than T keywords.</p>
    <p>Enron data set: 30,109 files, universe of 5,000 keywords</p>
    <p>Only 3% of files have more than T=200 keywords.</p>
    <p>Enron email dataset. https://www.cs.cmu.edu/~./enron/. Accessed: 2015-12-14.</p>
  </div>
  <div class="page">
    <p>Attacks with Partial File Leakage</p>
    <p>The server learns a portion of clients files in plaintext. (Announcement and alert emails broadcasted to many people)</p>
  </div>
  <div class="page">
    <p>Attacks to Recover 1 Token</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3</p>
    <p>universe of keywords</p>
    <p>estimated frequency</p>
    <p>f*(k1)</p>
    <p>f*(k2)</p>
    <p>f*(k3)</p>
    <p>Frequency of a token/keyword:</p>
    <p># of files containing it total # of files</p>
    <p>t f(t)</p>
    <p>k4</p>
    <p>k5</p>
    <p>f*(k4)</p>
    <p>f*(k5)</p>
    <p>token exact</p>
    <p>frequency candidate universe: f*(k)f(t)</p>
    <p>binary search attack</p>
  </div>
  <div class="page">
    <p>Difference from Binary Search Attack 1. Adaptive.</p>
  </div>
  <div class="page">
    <p>Attacks to Recover Multiple Tokens</p>
    <p>Refer to our paper for an attack to recover multiple tokens.</p>
  </div>
  <div class="page">
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Experimental Methodology</p>
    <p>Enron data set with 30,109 emails.  Choose top 5,000 keywords with highest frequency as the universe.</p>
  </div>
  <div class="page">
    <p>Experimental Results: Recover 1 Query U = 5,000, T = 200, number of injected files = 9</p>
  </div>
  <div class="page">
    <p>Experimental Results: Recover 100 Queries U = 5,000, T = 200, number of injected files &lt;= 40</p>
  </div>
  <div class="page">
    <p>Insights</p>
    <p>Prior attacks: find the best match between keywords and tokens.</p>
    <p>Uniqueness of the frequency is distorted when less files are leaked.</p>
    <p>Our attacks: rule out bad matches, search on the remaining ones.</p>
  </div>
  <div class="page">
    <p>Conjunctive SE</p>
    <p>Our attacks can be extended to conjunctive searchable encryption. Refer to our paper for details.</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
  </div>
  <div class="page">
    <p>Search Result Padding</p>
    <p>Pad the search result with random files s.t. multiple tokens have the same frequency.</p>
    <p>Does not affect the binary search attack.</p>
    <p>Does not affect the advanced attacks: Close frequencies are still close after padding.</p>
  </div>
  <div class="page">
    <p>Search Result Padding: Experiments</p>
    <p>Attacking 1 token Attacking 100 tokens</p>
    <p>k: # of padded files for keyword k / the original # of files containing keyword k : average of all k</p>
  </div>
  <div class="page">
    <p>Padding</p>
    <p>= 0.4  = 0.6</p>
    <p>= 0  = 0.2</p>
  </div>
  <div class="page">
    <p>Other Countermeasures  File length padding. Partially works.</p>
    <p>Batched updates. Partially works.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>File-injection attacks are devastating for query privacy in SE.</p>
    <p>Is it a satisfactory tradeoff between efficiency and leakage for existing SE?</p>
    <p>Future research: Reduce or eliminate access pattern leakage. Exploring new directions such as multi-server schemes.</p>
    <p>Forward Privacy.</p>
  </div>
  <div class="page">
    <p>Thank you for listening!</p>
  </div>
</Presentation>
