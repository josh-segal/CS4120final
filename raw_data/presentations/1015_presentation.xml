<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>High Resolution Side Channels for Untrusted Operating Systems</p>
    <p>Marcus Hahnel 1 Marcus Peinado 2 Weidong Cui 2</p>
  </div>
  <div class="page">
    <p>Reasons to distrust the OS</p>
    <p>OS</p>
    <p>Large code bases, security bugs</p>
    <p>rootkit</p>
  </div>
  <div class="page">
    <p>Reasons to distrust the OS</p>
    <p>OS</p>
    <p>Large code bases, security bugs</p>
    <p>rootkit</p>
  </div>
  <div class="page">
    <p>Reasons to distrust the OS</p>
    <p>OS</p>
    <p>Large code bases, security bugs</p>
    <p>rootkit</p>
  </div>
  <div class="page">
    <p>Reasons to distrust the OS</p>
    <p>OS</p>
    <p>Large code bases, security bugs</p>
    <p>rootkit</p>
  </div>
  <div class="page">
    <p>Reasons to distrust the OS</p>
    <p>OS</p>
    <p>Large code bases, security bugs</p>
    <p>rootkit</p>
  </div>
  <div class="page">
    <p>Shielding Systems</p>
    <p>Removing the OS from the trusted computing base</p>
    <p>Hypervisor-based</p>
    <p>Overshadow [ASPLOS08]</p>
    <p>InkTag [ASPLOS13]</p>
    <p>Intel SGX-based</p>
    <p>Haven [OSDI14]</p>
    <p>VC3 [Oakland15]</p>
    <p>SCONE [OSDI16]</p>
    <p>Glamdring [ATC17]</p>
    <p>Hypervisor</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Shielding Systems</p>
    <p>Removing the OS from the trusted computing base</p>
    <p>Hypervisor-based</p>
    <p>Overshadow [ASPLOS08]</p>
    <p>InkTag [ASPLOS13]</p>
    <p>Intel SGX-based</p>
    <p>Haven [OSDI14]</p>
    <p>VC3 [Oakland15]</p>
    <p>SCONE [OSDI16]</p>
    <p>Glamdring [ATC17] Hypervisor</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Shielding Systems</p>
    <p>Removing the OS from the trusted computing base</p>
    <p>Hypervisor-based</p>
    <p>Overshadow [ASPLOS08]</p>
    <p>InkTag [ASPLOS13]</p>
    <p>Intel SGX-based</p>
    <p>Haven [OSDI14]</p>
    <p>VC3 [Oakland15]</p>
    <p>SCONE [OSDI16]</p>
    <p>Glamdring [ATC17]</p>
    <p>Hypervisor</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Shielding Systems</p>
    <p>Removing the OS from the trusted computing base</p>
    <p>Hypervisor-based</p>
    <p>Overshadow [ASPLOS08]</p>
    <p>InkTag [ASPLOS13]</p>
    <p>Intel SGX-based</p>
    <p>Haven [OSDI14]</p>
    <p>VC3 [Oakland15]</p>
    <p>SCONE [OSDI16]</p>
    <p>Glamdring [ATC17] Hypervisor or SGX CPU</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Shielding Systems</p>
    <p>Removing the OS from the trusted computing base</p>
    <p>Hypervisor-based</p>
    <p>Overshadow [ASPLOS08]</p>
    <p>InkTag [ASPLOS13]</p>
    <p>Intel SGX-based</p>
    <p>Haven [OSDI14]</p>
    <p>VC3 [Oakland15]</p>
    <p>SCONE [OSDI16]</p>
    <p>Glamdring [ATC17] Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application Memory Pages</p>
  </div>
  <div class="page">
    <p>Attack position</p>
    <p>But how well do these solutions protect the application?</p>
  </div>
  <div class="page">
    <p>Controlled Channels 1</p>
    <p>OS still manages shielded applications</p>
    <p>Control over page tables</p>
    <p>... and thus over page faults</p>
    <p>Retrieved</p>
    <p>outlines of images</p>
    <p>text from font rendering</p>
    <p>text from spell checking</p>
    <p>Data dependent control flow</p>
    <p>// @ Page 1 void p r o c e s s D a t a ( bool s e c r e t ) {</p>
    <p>i f ( s e c r e t ) { s e c r e t D a t a ( ) ; // @ Page 2</p>
    <p>} e l s e { p u b l i c D a t a ( ) ; // @ Page 3</p>
    <p>} }</p>
    <p>Page faults serve as de facto breakpoints and reveal memory access patterns</p>
  </div>
  <div class="page">
    <p>Controlled Channels 1</p>
    <p>OS still manages shielded applications</p>
    <p>Control over page tables</p>
    <p>... and thus over page faults</p>
    <p>Retrieved</p>
    <p>outlines of images</p>
    <p>text from font rendering</p>
    <p>text from spell checking</p>
    <p>Data dependent control flow</p>
    <p>// @ Page 1 void p r o c e s s D a t a ( bool s e c r e t ) {</p>
    <p>i f ( s e c r e t ) { s e c r e t D a t a ( ) ; // @ Page 2</p>
    <p>} e l s e { p u b l i c D a t a ( ) ; // @ Page 3</p>
    <p>} }</p>
    <p>Page faults serve as de facto breakpoints and reveal memory access patterns</p>
  </div>
  <div class="page">
    <p>Controlled Channels 1</p>
    <p>OS still manages shielded applications</p>
    <p>Control over page tables</p>
    <p>... and thus over page faults</p>
    <p>Retrieved</p>
    <p>outlines of images</p>
    <p>text from font rendering</p>
    <p>text from spell checking</p>
    <p>Data dependent control flow</p>
    <p>// @ Page 1 void p r o c e s s D a t a ( bool s e c r e t ) {</p>
    <p>i f ( s e c r e t ) { s e c r e t D a t a ( ) ; // @ Page 2</p>
    <p>} e l s e { p u b l i c D a t a ( ) ; // @ Page 3</p>
    <p>} }</p>
    <p>Page faults serve as de facto breakpoints and reveal memory access patterns</p>
  </div>
  <div class="page">
    <p>Controlled Channels 1</p>
    <p>OS still manages shielded applications</p>
    <p>Control over page tables</p>
    <p>... and thus over page faults</p>
    <p>Retrieved</p>
    <p>outlines of images</p>
    <p>text from font rendering</p>
    <p>text from spell checking</p>
    <p>Data dependent control flow</p>
    <p>// @ Page 1 void p r o c e s s D a t a ( bool s e c r e t ) {</p>
    <p>i f ( s e c r e t ) { s e c r e t D a t a ( ) ; // @ Page 2</p>
    <p>} e l s e { p u b l i c D a t a ( ) ; // @ Page 3</p>
    <p>} }</p>
    <p>Page faults serve as de facto breakpoints and reveal memory access patterns</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution requires page toggling</p>
    <p>Improve temporal resolution is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution</p>
    <p>requires page toggling</p>
    <p>Improve temporal resolution is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution</p>
    <p>requires page toggling</p>
    <p>Improve temporal resolution</p>
    <p>is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution</p>
    <p>requires page toggling</p>
    <p>Improve temporal resolution</p>
    <p>is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution requires page toggling</p>
    <p>Improve temporal resolution is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution requires page toggling</p>
    <p>Improve temporal resolution is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Page-Fault Channel Limitations</p>
    <p>limited to page granular memory observation</p>
    <p>Increase spatial resolution requires page toggling</p>
    <p>Improve temporal resolution is only means to set breakpoint (may be detectable)</p>
    <p>Other ways to step through the application</p>
    <p>Show more code than previously thought is vulnerable</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Assumptions</p>
    <p>Working shielding system</p>
    <p>... protects integrity and security of applications memory against direct access</p>
    <p>Commodity OS</p>
    <p>... is still responsible for:</p>
    <p>Memory management</p>
    <p>Scheduling</p>
    <p>Hardware Configuration</p>
    <p>Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Assumptions</p>
    <p>Working shielding system</p>
    <p>... protects integrity and security of applications memory against direct access</p>
    <p>Commodity OS</p>
    <p>... is still responsible for:</p>
    <p>Memory management</p>
    <p>Scheduling</p>
    <p>Hardware Configuration</p>
    <p>Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Assumptions</p>
    <p>Working shielding system</p>
    <p>... protects integrity and security of applications memory against direct access</p>
    <p>Commodity OS</p>
    <p>... is still responsible for:</p>
    <p>Memory management</p>
    <p>Scheduling</p>
    <p>Hardware Configuration</p>
    <p>Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Assumptions</p>
    <p>Working shielding system</p>
    <p>... protects integrity and security of applications memory against direct access</p>
    <p>Commodity OS</p>
    <p>... is still responsible for:</p>
    <p>Memory management</p>
    <p>Scheduling</p>
    <p>Hardware Configuration</p>
    <p>Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Assumptions</p>
    <p>Working shielding system</p>
    <p>... protects integrity and security of applications memory against direct access</p>
    <p>Commodity OS</p>
    <p>... is still responsible for:</p>
    <p>Memory management</p>
    <p>Scheduling</p>
    <p>Hardware Configuration</p>
    <p>Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Assumptions</p>
    <p>Working shielding system</p>
    <p>... protects integrity and security of applications memory against direct access</p>
    <p>Commodity OS</p>
    <p>... is still responsible for:</p>
    <p>Memory management</p>
    <p>Scheduling</p>
    <p>Hardware Configuration Hypervisor or SGX CPU</p>
    <p>OS</p>
    <p>Protected Application</p>
  </div>
  <div class="page">
    <p>New Attack Tools</p>
  </div>
  <div class="page">
    <p>Timer-based Attacks</p>
    <p>Scheduling</p>
    <p>The OS has control over scheduling ... and thus over timers</p>
    <p>Challenges</p>
    <p>No page fault address</p>
    <p>Figure: Accessed &amp; Dirty bits in PTE</p>
  </div>
  <div class="page">
    <p>Timer-based Attacks</p>
    <p>Scheduling</p>
    <p>The OS has control over scheduling ... and thus over timers</p>
    <p>Challenges</p>
    <p>No page fault address</p>
    <p>Figure: Accessed &amp; Dirty bits in PTE</p>
  </div>
  <div class="page">
    <p>Timer-based Attacks</p>
    <p>Scheduling</p>
    <p>The OS has control over scheduling ... and thus over timers</p>
    <p>Challenges</p>
    <p>No page fault address</p>
    <p>Figure: Accessed &amp; Dirty bits in PTE</p>
  </div>
  <div class="page">
    <p>Timer-based Attacks</p>
    <p>Scheduling</p>
    <p>The OS has control over scheduling ... and thus over timers</p>
    <p>Challenges</p>
    <p>No page fault address</p>
    <p>Figure: Accessed &amp; Dirty bits in PTE</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 0</p>
    <p>h e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 0</p>
    <p>h e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 0</p>
    <p>h e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 0</p>
    <p>h e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 1</p>
    <p>h e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 1</p>
    <p>h e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 1 h 1</p>
    <p>e 3 \0 4</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s i z e t s t r l e n ( const char s t r ) { s i z e t l e n = 0 ; while ( s t r != \0  ) {</p>
    <p>s t r ++; l e n ++;</p>
    <p>} return l e n ;</p>
    <p>}</p>
    <p>const char s =  The  ; i n t l = s t r l e n ( s ) ;</p>
    <p>*str Attacker count</p>
    <p>T 1 h 2 e 3</p>
    <p>\0 4</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>strlen function</p>
    <p>Can effectively single-step through the application</p>
    <p>Works where Page-Fault Channel fails</p>
    <p>Can replace page-fault based break points</p>
    <p>Requires fine-tuning for correct timing</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>Traditional Cache Side-Channel</p>
    <p>Unprivileged attacker and victim on same machine share cache</p>
    <p>Attacker can indirectly observe victims memory access</p>
    <p>Attacker: Prime</p>
    <p>Victim: Run</p>
    <p>Attacker: Probe</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>Traditional Cache Side-Channel</p>
    <p>Unprivileged attacker and victim on same machine share cache</p>
    <p>Attacker can indirectly observe victims memory access</p>
    <p>Attacker: Prime</p>
    <p>Victim: Run</p>
    <p>Attacker: Probe</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>Traditional Cache Side-Channel</p>
    <p>Unprivileged attacker and victim on same machine share cache</p>
    <p>Attacker can indirectly observe victims memory access</p>
    <p>Attacker: Prime</p>
    <p>Victim: Run</p>
    <p>Attacker: Probe</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>Traditional Cache Side-Channel</p>
    <p>Unprivileged attacker and victim on same machine share cache</p>
    <p>Attacker can indirectly observe victims memory access</p>
    <p>Attacker: Prime</p>
    <p>Victim: Run</p>
    <p>Attacker: Probe</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>Traditional Cache Side-Channel</p>
    <p>Unprivileged attacker and victim on same machine share cache</p>
    <p>Attacker can indirectly observe victims memory access</p>
    <p>Attacker: Prime</p>
    <p>Victim: Run</p>
    <p>Attacker: Probe</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>Traditional Cache Side-Channel</p>
    <p>Unprivileged attacker and victim on same machine share cache</p>
    <p>Attacker can indirectly observe victims memory access</p>
    <p>Attacker: Prime</p>
    <p>Victim: Run</p>
    <p>Attacker: Probe</p>
  </div>
  <div class="page">
    <p>Prime &amp; Probe</p>
    <p>But we are not an unprivileged attacker, but the OS</p>
    <p>Noise reduction by</p>
    <p>Targeted Breakpoints</p>
    <p>Preventing other applications from being scheduled</p>
    <p>Turn off prefetching</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Associativity Set</p>
    <p>A rr</p>
    <p>ay A</p>
    <p>cc es</p>
    <p>s 0 2 4 6 8</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Associativity Set</p>
    <p>A rr</p>
    <p>ay A</p>
    <p>cc es</p>
    <p>s 0 2 4 6 8</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Victims</p>
    <p>libjpeg: image decoding</p>
    <p>VC3: map-reduce framework for SGX</p>
  </div>
  <div class="page">
    <p>libjpeg: High resolution image extraction</p>
  </div>
  <div class="page">
    <p>libjpeg: High resolution image extraction</p>
  </div>
  <div class="page">
    <p>libjpeg: High resolution image extraction</p>
  </div>
  <div class="page">
    <p>VC3</p>
    <p>Why is attacking VC3 interesting</p>
    <p>First/only realistic shielding system for Hadoop</p>
    <p>Protects mapper and reducer applications and their data from the OS/cloud</p>
    <p>Uses SGX (Enclaves)</p>
    <p>Enclave Enclave Mapper</p>
    <p>VC3 Framework</p>
    <p>Decrypted inputs</p>
    <p>Plain intermediate KV pairs</p>
    <p>Encrypted inputs</p>
    <p>Encrypted intermediates</p>
    <p>Reducer</p>
    <p>VC3 Framework</p>
    <p>Decrypted intermediates</p>
    <p>Plain output</p>
    <p>Encrypted intermediates</p>
    <p>Encrypted output</p>
    <p>Encrypted</p>
    <p>Decrypted</p>
  </div>
  <div class="page">
    <p>VC3</p>
    <p>Why is attacking VC3 interesting</p>
    <p>First/only realistic shielding system for Hadoop</p>
    <p>Protects mapper and reducer applications and their data from the OS/cloud</p>
    <p>Uses SGX (Enclaves)</p>
    <p>Enclave Enclave Mapper</p>
    <p>VC3 Framework</p>
    <p>Decrypted inputs</p>
    <p>Plain intermediate KV pairs</p>
    <p>Encrypted inputs</p>
    <p>Encrypted intermediates</p>
    <p>Reducer</p>
    <p>VC3 Framework</p>
    <p>Decrypted intermediates</p>
    <p>Plain output</p>
    <p>Encrypted intermediates</p>
    <p>Encrypted output</p>
    <p>Encrypted</p>
    <p>Decrypted</p>
  </div>
  <div class="page">
    <p>Attack Overview</p>
    <p>Why is attacking VC3 hard</p>
    <p>Only attack framework; not users secret mappers and reducers</p>
    <p>Framework is small (only 13 code pages)</p>
    <p>Framework does not know application semantics</p>
    <p>Can this leak information?</p>
    <p>Map/Reduce spec</p>
    <p>The MapReduce library groups together all intermediate values associated with the same intermediate key I and passes them to the Reduce function 2</p>
    <p>VC3 implements grouping using a hash table</p>
  </div>
  <div class="page">
    <p>Attack Overview</p>
    <p>Why is attacking VC3 hard</p>
    <p>Only attack framework; not users secret mappers and reducers</p>
    <p>Framework is small (only 13 code pages)</p>
    <p>Framework does not know application semantics</p>
    <p>Can this leak information?</p>
    <p>Map/Reduce spec</p>
    <p>The MapReduce library groups together all intermediate values associated with the same intermediate key I and passes them to the Reduce function 2</p>
    <p>VC3 implements grouping using a hash table</p>
  </div>
  <div class="page">
    <p>Attack Overview</p>
    <p>Why is attacking VC3 hard</p>
    <p>Only attack framework; not users secret mappers and reducers</p>
    <p>Framework is small (only 13 code pages)</p>
    <p>Framework does not know application semantics</p>
    <p>Can this leak information?</p>
    <p>Map/Reduce spec</p>
    <p>The MapReduce library groups together all intermediate values associated with the same intermediate key I and passes them to the Reduce function 2</p>
    <p>VC3 implements grouping using a hash table</p>
  </div>
  <div class="page">
    <p>Attack: Information Gathering Phase</p>
    <p>Victim</p>
    <p>Concrete attack here: WordCount (or similar: e.g., inverted index)</p>
    <p>Word w hash(w)</p>
    <p>word length timer attack</p>
    <p>h(w) map[h(w)]</p>
    <p>hash(word) cache side-channel</p>
    <p>HashMap ...</p>
    <p>h(keya)</p>
    <p>h(keyb) ...</p>
  </div>
  <div class="page">
    <p>Attack: Information Gathering Phase</p>
    <p>Victim</p>
    <p>Concrete attack here: WordCount (or similar: e.g., inverted index)</p>
    <p>Word w</p>
    <p>hash(w)</p>
    <p>word length timer attack</p>
    <p>h(w) map[h(w)]</p>
    <p>hash(word) cache side-channel</p>
    <p>HashMap ...</p>
    <p>h(keya)</p>
    <p>h(keyb) ...</p>
  </div>
  <div class="page">
    <p>Attack: Information Gathering Phase</p>
    <p>Victim</p>
    <p>Concrete attack here: WordCount (or similar: e.g., inverted index)</p>
    <p>Word w hash(w)</p>
    <p>word length timer attack</p>
    <p>h(w)</p>
    <p>map[h(w)]</p>
    <p>hash(word) cache side-channel</p>
    <p>HashMap ...</p>
    <p>h(keya)</p>
    <p>h(keyb) ...</p>
  </div>
  <div class="page">
    <p>Attack: Information Gathering Phase</p>
    <p>Victim</p>
    <p>Concrete attack here: WordCount (or similar: e.g., inverted index)</p>
    <p>Word w hash(w)</p>
    <p>word length timer attack</p>
    <p>h(w) map[h(w)]</p>
    <p>hash(word) cache side-channel</p>
    <p>HashMap ...</p>
    <p>h(keya)</p>
    <p>h(keyb) ...</p>
  </div>
  <div class="page">
    <p>Attack: Information Gathering Phase</p>
    <p>Victim</p>
    <p>Concrete attack here: WordCount (or similar: e.g., inverted index)</p>
    <p>Word w hash(w)</p>
    <p>word length timer attack</p>
    <p>h(w) map[h(w)]</p>
    <p>hash(word) cache side-channel</p>
    <p>HashMap ...</p>
    <p>h(keya)</p>
    <p>h(keyb) ...</p>
  </div>
  <div class="page">
    <p>Attack: Information Gathering Phase</p>
    <p>Victim</p>
    <p>Concrete attack here: WordCount (or similar: e.g., inverted index)</p>
    <p>Word w hash(w)</p>
    <p>word length timer attack</p>
    <p>h(w) map[h(w)]</p>
    <p>hash(word) cache side-channel</p>
    <p>HashMap ...</p>
    <p>h(keya)</p>
    <p>h(keyb) ...</p>
  </div>
  <div class="page">
    <p>Attack: Text Recovery Phase</p>
    <p>Using the gathered information to re-construct the document</p>
    <p>Candidate List all words with length ln and hash hn</p>
    <p>Dictionary</p>
    <p>Prune and order candidate list</p>
    <p>wordn1, wordn2 ...</p>
    <p>...</p>
    <p>(lenn4, hashn4)</p>
    <p>(lenn3, hashn3)</p>
    <p>(lenn2, hashn2)</p>
    <p>(lenn1, hashn1)</p>
    <p>(lenn, hashn)</p>
    <p>(lenn+1, hashn+1)</p>
    <p>(lenn+2, hashn+2)</p>
    <p>(lenn+3, hashn+3)</p>
    <p>(lenn+4, hashn+4) ...</p>
  </div>
  <div class="page">
    <p>Attack: Text Recovery Phase</p>
    <p>Using the gathered information to re-construct the document</p>
    <p>Candidate List all words with length ln and hash hn</p>
    <p>Dictionary</p>
    <p>Prune and order candidate list</p>
    <p>wordn1, wordn2 ...</p>
    <p>...</p>
    <p>(lenn4, hashn4)</p>
    <p>(lenn3, hashn3)</p>
    <p>(lenn2, hashn2)</p>
    <p>(lenn1, hashn1)</p>
    <p>(lenn, hashn)</p>
    <p>(lenn+1, hashn+1)</p>
    <p>(lenn+2, hashn+2)</p>
    <p>(lenn+3, hashn+3)</p>
    <p>(lenn+4, hashn+4) ...</p>
  </div>
  <div class="page">
    <p>Attack: Text Recovery Phase</p>
    <p>Using the gathered information to re-construct the document</p>
    <p>Candidate List all words with length ln and hash hn</p>
    <p>Dictionary</p>
    <p>Prune and order candidate list</p>
    <p>wordn1, wordn2 ...</p>
    <p>...</p>
    <p>(lenn4, hashn4)</p>
    <p>(lenn3, hashn3)</p>
    <p>(lenn2, hashn2)</p>
    <p>(lenn1, hashn1)</p>
    <p>(lenn, hashn)</p>
    <p>(lenn+1, hashn+1)</p>
    <p>(lenn+2, hashn+2)</p>
    <p>(lenn+3, hashn+3)</p>
    <p>(lenn+4, hashn+4) ...</p>
  </div>
  <div class="page">
    <p>Attack: Text Recovery Phase</p>
    <p>Using the gathered information to re-construct the document</p>
    <p>Candidate List all words with length ln and hash hn</p>
    <p>Dictionary</p>
    <p>Prune and order candidate list</p>
    <p>wordn1, wordn2 ...</p>
    <p>...</p>
    <p>(lenn4, hashn4)</p>
    <p>(lenn3, hashn3)</p>
    <p>(lenn2, hashn2)</p>
    <p>(lenn1, hashn1)</p>
    <p>(lenn, hashn)</p>
    <p>(lenn+1, hashn+1)</p>
    <p>(lenn+2, hashn+2)</p>
    <p>(lenn+3, hashn+3)</p>
    <p>(lenn+4, hashn+4) ...</p>
  </div>
  <div class="page">
    <p>Oz text recovered</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Enhanced Side-Channels</p>
    <p>memory access detection at higher spatial resolution (64 byte vs. 4kB granularity)</p>
    <p>fine-granular breakpoints through timers</p>
    <p>low-noise cache side-channel with single execution</p>
    <p>Results</p>
    <p>High resolution image extraction from libjpeg</p>
    <p>Document extraction from map/reduce</p>
    <p>Mitigations</p>
    <p>Are increasingly important</p>
    <p>T-SGX, Intel Taint Analysis Tool, Trusted Schedulers</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Enhanced Side-Channels</p>
    <p>memory access detection at higher spatial resolution (64 byte vs. 4kB granularity)</p>
    <p>fine-granular breakpoints through timers</p>
    <p>low-noise cache side-channel with single execution</p>
    <p>Results</p>
    <p>High resolution image extraction from libjpeg</p>
    <p>Document extraction from map/reduce</p>
    <p>Mitigations</p>
    <p>Are increasingly important</p>
    <p>T-SGX, Intel Taint Analysis Tool, Trusted Schedulers</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Enhanced Side-Channels</p>
    <p>memory access detection at higher spatial resolution (64 byte vs. 4kB granularity)</p>
    <p>fine-granular breakpoints through timers</p>
    <p>low-noise cache side-channel with single execution</p>
    <p>Results</p>
    <p>High resolution image extraction from libjpeg</p>
    <p>Document extraction from map/reduce</p>
    <p>Mitigations</p>
    <p>Are increasingly important</p>
    <p>T-SGX, Intel Taint Analysis Tool, Trusted Schedulers</p>
  </div>
</Presentation>
