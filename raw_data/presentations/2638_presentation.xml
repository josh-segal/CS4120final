<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Global analy)cs in the face of bandwidth and regulatory constraints</p>
    <p>Ashish Vulimiriu Carlo Curinom Brighten Godfreyu Thomas Jungblutm Jitu Padhyem George Varghesem</p>
    <p>uUIUC mMicrosoA</p>
  </div>
  <div class="page">
    <p>Massive data volumes</p>
    <p>Facebook 600 TB/day</p>
    <p>Twi2er 100 TB/day</p>
    <p>Microso7 10s TB/day</p>
    <p>LinkedIn 10 TB/day</p>
    <p>Yahoo! 10 TB/day</p>
  </div>
  <div class="page">
    <p>Massive data volumes</p>
    <p>Use cases: - User acAvity logs - Monitoring remote infrastructures -</p>
    <p>Collected across several data centers for low user latency</p>
    <p>Facebook 600 TB/day</p>
    <p>Twi2er 100 TB/day</p>
    <p>Microso7 10s TB/day</p>
    <p>LinkedIn 10 TB/day</p>
    <p>Yahoo! 10 TB/day</p>
    <p>DC1 DC2</p>
    <p>DC3</p>
  </div>
  <div class="page">
    <p>DC1 DC2</p>
    <p>DC3</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>SQL analyAcs across geo-distributed data to extract insight</p>
    <p>current soluAon: centralize - copy all data to central data center - run all queries there</p>
  </div>
  <div class="page">
    <p>Centralized approach is inadequate</p>
    <p>current soluAon: copy all data to central DC, run all analyAcs there</p>
  </div>
  <div class="page">
    <p>Centralized approach is inadequate</p>
    <p>current soluAon: copy all data to central DC, run all analyAcs there</p>
    <p>slowing growth</p>
    <p>scarce capacity</p>
    <p>total Internet capacity</p>
    <p>rising costs</p>
    <p>external network is fastest rising DC cost</p>
    <p>recognized concern</p>
    <p>several other efforts to reduce wide-area traffic</p>
    <p>e.g. SWAN, B4</p>
    <p>Internet capacity growth (%)</p>
    <p>some DCs internal bisecAon b/w</p>
  </div>
  <div class="page">
    <p>Centralized approach is inadequate</p>
    <p>current soluAon: copy all data to central DC, run all analyAcs there</p>
  </div>
  <div class="page">
    <p>Centralized approach is inadequate</p>
    <p>current soluAon: copy all data to central DC, run all analyAcs there</p>
  </div>
  <div class="page">
    <p>Geo-distributed SQL analytics</p>
    <p>click_log(</p>
    <p>DC1( adserve_log(</p>
    <p>click_log(</p>
    <p>DCn( adserve_log(</p>
    <p>Centralized execution: 10 TB/day</p>
    <p>preprocess' adserve_log'</p>
    <p>join' k2means' clustering'</p>
    <p>preprocess' click_log'</p>
    <p>adserve_log'</p>
    <p>click_log'</p>
    <p>SQL query:</p>
  </div>
  <div class="page">
    <p>Geo-distributed SQL analytics</p>
    <p>click_log(</p>
    <p>DC1( adserve_log(</p>
    <p>click_log(</p>
    <p>DCn( adserve_log(</p>
    <p>Centralized execution: 10 TB/day Distributed execution: 0.03 TB/day t&quot;=&quot;0! push!down! preprocess!</p>
    <p>t&quot;=&quot;1! distributed! semi1join!</p>
    <p>t&quot;=&quot;2! centralized! k1means!</p>
    <p>preprocess' adserve_log'</p>
    <p>join' k2means' clustering'</p>
    <p>preprocess' click_log'</p>
    <p>adserve_log'</p>
    <p>click_log'</p>
    <p>SQL query:</p>
  </div>
  <div class="page">
    <p>Geo-distributed SQL analytics</p>
    <p>click_log(</p>
    <p>DC1( adserve_log(</p>
    <p>click_log(</p>
    <p>DCn( adserve_log(</p>
    <p>Centralized execution: 10 TB/day Distributed execution: 0.03 TB/day t&quot;=&quot;0! push!down! preprocess!</p>
    <p>t&quot;=&quot;1! distributed! semi1join!</p>
    <p>t&quot;=&quot;2! centralized! k1means!</p>
    <p>preprocess' adserve_log'</p>
    <p>join' k2means' clustering'</p>
    <p>preprocess' click_log'</p>
    <p>adserve_log'</p>
    <p>click_log'</p>
    <p>SQL query:</p>
  </div>
  <div class="page">
    <p>Geo-distributed SQL analytics</p>
    <p>OpAmizaAons: synthesize and extend ideas from - Parallel and distributed databases - Distributed systems  as well as novel techniques of our own</p>
    <p>Common thread: revisit classical database problems from networking perspecAve</p>
  </div>
  <div class="page">
    <p>PROBLEM DEFINITION</p>
  </div>
  <div class="page">
    <p>Requirements</p>
    <p>Possible challenges to address Bandwidth Sovereignty Fault-tolerance Latency Consistency</p>
    <p>We target the batch analyAcs dominant in organizaAons today</p>
  </div>
  <div class="page">
    <p>Key characteristics</p>
  </div>
  <div class="page">
    <p>Problem statement</p>
    <p>Given: data born distributed across DCs a certain way</p>
    <p>Goal: support SQL analyAcs on this data - Minimize bandwidth cost - Handle fault-tolerance, sovereignty constraints</p>
    <p>System will handle arbitrary queries at runAme - But will be tuned to opAmize known ~stable recurring workload</p>
  </div>
  <div class="page">
    <p>OUR APPROACH</p>
  </div>
  <div class="page">
    <p>Basic Architecture</p>
    <p>End-user facing DB (handles OLTP)</p>
    <p>Single-DC SQL stack [Hive]</p>
    <p>Local ETL</p>
    <p>Coordinator ReporAng pipeline</p>
    <p>Queries</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>Runtime data transfer reducAon</p>
    <p>SQL-aware workload planning</p>
    <p>Function-specific</p>
    <p>semanAc level</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>In our seing - CPU, storage,  within data centers is cheap - Cross-DC bandwidth is the expensive resource</p>
    <p>Trade off CPU, storage for bandwidth reducAon</p>
  </div>
  <div class="page">
    <p>aggressively cache all intermediate output</p>
    <p>t = 0 DCB asks DCA for results of subquery q</p>
    <p>q0q0</p>
    <p>DCA DCB</p>
  </div>
  <div class="page">
    <p>aggressively cache all intermediate output</p>
    <p>q0 q0</p>
    <p>cache cache</p>
    <p>DCA DCB</p>
  </div>
  <div class="page">
    <p>aggressively cache all intermediate output</p>
    <p>q0 q0cache cache</p>
    <p>t = 1 DCB asks DCA for results of subquery q again</p>
    <p>q1</p>
    <p>DCA DCB</p>
  </div>
  <div class="page">
    <p>( - )</p>
    <p>aggressively cache all intermediate output</p>
    <p>q0 q0cache cache</p>
    <p>t = 1 DCB asks DCA for results of subquery q again</p>
    <p>q1 q1 q0</p>
    <p>DCA DCB</p>
  </div>
  <div class="page">
    <p>( - )</p>
    <p>aggressively cache all intermediate output</p>
    <p>q0 q0cache cache</p>
    <p>q1 q1 q0</p>
    <p>DCA DC</p>
    <p>recompute q1 from scratch - not using caching to save latency, CPU - only bandwidth</p>
  </div>
  <div class="page">
    <p>aggressively cache all intermediate output</p>
    <p>Caching helps not only when same query arrives repeatedly</p>
    <p>but also when different queries have common sub-operaAons</p>
    <p>e.g. 6x data transfer reducAon in TPC-CH</p>
  </div>
  <div class="page">
    <p>aggressively cache all intermediate output</p>
    <p>Caching helps not only when same query arrives repeatedly</p>
    <p>but also when different queries have common sub-operaAons</p>
    <p>e.g. 6x data transfer reducAon in TPC-CH</p>
    <p>Database parallel: caching  view materializaAon  Caching is a low-level, mechanical form of view maintenance + Works for arbitrary computaAons, including arbitrary UDFs  Uses more CPU, storage  Can miss opportuniAes</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>Given - Stable workload (set of queries) - Fault-tolerance and sovereignty constraints</p>
    <p>Jointly opAmize - Query plan - Site selecAon (task scheduling) - Data replicaAon</p>
    <p>Replicate data for performance and/or fault-tolerance</p>
    <p>to minimize data transfer cost</p>
    <p>Challenge: opAmizaAon search space is exponenAally large</p>
    <p>Approach: simplify search space</p>
  </div>
  <div class="page">
    <p>Simplification</p>
    <p>Big table</p>
    <p>Small table</p>
    <p>ComputaAon: copy both tables to one DC, then join them</p>
    <p>Decision 1: do we copy the big table or the small table?</p>
    <p>US</p>
    <p>UK</p>
    <p>Japan copy 1</p>
    <p>copy 2</p>
  </div>
  <div class="page">
    <p>Simplification</p>
    <p>Big table</p>
    <p>Small table</p>
    <p>ComputaAon: copy both tables to one DC, then join them</p>
    <p>Decision 1: do we copy the big table or the small table?</p>
    <p>US</p>
    <p>UK</p>
    <p>Japan copy 1</p>
    <p>copy 2</p>
  </div>
  <div class="page">
    <p>Simplification</p>
    <p>Big table</p>
    <p>Small table</p>
    <p>ComputaAon: copy both tables to one DC, then join them</p>
    <p>Decision 1: do we copy the big table or the small table?</p>
    <p>Decision 2: which copy of the small table do we use?</p>
    <p>US</p>
    <p>UK</p>
    <p>Japan copy 1</p>
    <p>copy 2</p>
  </div>
  <div class="page">
    <p>Had two kinds of decisions to make:</p>
  </div>
  <div class="page">
    <p>Had two kinds of decisions to make:</p>
  </div>
  <div class="page">
    <p>Key insight - Logical choices: simple staAsAcs usually suffice - Physical choices: need more careful cost esAmates - Only an empirical insight</p>
    <p>But worked well in all our experimental workloads</p>
    <p>Simplification: Two-phase approach</p>
  </div>
  <div class="page">
    <p>query 1 query n</p>
    <p>DAG 1 DAG n</p>
    <p>profiled DAG 1</p>
    <p>profiled DAG n</p>
    <p>schedule tasks to DCs, decide data replicaAon policy</p>
    <p>workload</p>
    <p>logical plan</p>
    <p>physical plan</p>
  </div>
  <div class="page">
    <p>query 1 query n</p>
    <p>DAG 1 DAG n</p>
    <p>profiled DAG 1</p>
    <p>profiled DAG n</p>
    <p>schedule tasks to DCs, decide data replicaAon policy</p>
    <p>workload</p>
    <p>logical plan</p>
    <p>physical plan</p>
  </div>
  <div class="page">
    <p>query 1 query n</p>
    <p>DAG 1 DAG n</p>
    <p>profiled DAG 1</p>
    <p>profiled DAG n</p>
    <p>schedule tasks to DCs, decide data replicaAon policy</p>
    <p>workload</p>
    <p>logical plan</p>
    <p>physical plan</p>
  </div>
  <div class="page">
    <p>Profiling task graphs SELECT city, SUM(orderValue) FROM sales WHERE category = Electronics GROUP BY city</p>
    <p>Distributed deployment:</p>
    <p>US DC</p>
    <p>Japan DC</p>
    <p>coordinator DC</p>
    <p>parAal aggregate</p>
    <p>merge 70 GB 60 GB</p>
    <p>want to measure</p>
    <p>US</p>
    <p>UK</p>
    <p>JP</p>
    <p>US</p>
    <p>UK</p>
    <p>JP</p>
    <p>UK DC</p>
  </div>
  <div class="page">
    <p>Centralized deployment:</p>
    <p>Profiling task graphs SELECT city, SUM(orderValue) FROM sales WHERE category = Electronics GROUP BY city</p>
    <p>Distributed deployment:</p>
    <p>US DC</p>
    <p>Japan DC</p>
    <p>coordinator DC</p>
    <p>parAal aggregate</p>
    <p>merge 70 GB 60 GB</p>
    <p>want to measure</p>
    <p>US</p>
    <p>UK</p>
    <p>JP</p>
    <p>US</p>
    <p>UK</p>
    <p>JP</p>
    <p>UK DC</p>
    <p>inject filter WHERE country = US</p>
  </div>
  <div class="page">
    <p>Centralized deployment:</p>
    <p>Profiling task graphs SELECT city, SUM(orderValue) FROM sales WHERE category = Electronics GROUP BY city</p>
    <p>Distributed deployment:</p>
    <p>US DC</p>
    <p>Phase 1</p>
    <p>Japan DC</p>
    <p>coordinator DC</p>
    <p>merge 70 GB 60 GB</p>
    <p>want to measure</p>
    <p>US</p>
    <p>UK</p>
    <p>JP</p>
    <p>US</p>
    <p>UK</p>
    <p>JP</p>
    <p>UK DC</p>
    <p>inject filter WHERE country = US</p>
    <p>Pseudo-distributed execuAon</p>
    <p>Rewrite query DAGs to simulate alternate configuraAons</p>
    <p>Fully general what-if analysis. Use cases: - Bootstrap: centralized -&gt; distributed - Test alternate data replicaAon strategies - Simulate adding/removing data centers</p>
  </div>
  <div class="page">
    <p>query 1 query n</p>
    <p>DAG 1 DAG n</p>
    <p>profiled DAG 1</p>
    <p>profiled DAG n</p>
    <p>schedule tasks to DCs, decide data replicaAon policy</p>
    <p>see paper</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>Past work: large number of distributed algorithms targeAng specific problems</p>
    <p>Support via extensible user-defined funcAon interface - Allows registering mulAple implementaAons - OpAmizer will automaAcally choose best, based on profiling</p>
    <p>As examples, implemented - Top-k [1] - Approximate count-disAnct [2]</p>
    <p>[1] Efficient top-k query computaAon in distributed networks P. Cao, Z. Wang, PODC 2004 [2] HyperLogLog: the analysis of a near-opAmal cardinality esAmaAon algorithm P. Flajolet, E. Fusy, O. Gandouet, F. Meunier, AOFA 2007</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
  </div>
  <div class="page">
    <p>Implemented Hadoop-stack prototype - Prototype mulA-DC replacement for Apache Hive</p>
    <p>Experiments up to 10s of TBs scale - Real Microso7 producAon workload - Several syntheAc benchmarks:</p>
    <p>TPC-CH  BigBench-SQL  Berkeley Big-Data  YCSB</p>
  </div>
  <div class="page">
    <p>BigBench-SQL</p>
    <p>D at</p>
    <p>a tr</p>
    <p>an sf</p>
    <p>er G</p>
    <p>B (</p>
    <p>co m</p>
    <p>pr es</p>
    <p>se d)</p>
    <p>GB (raw, uncompressed) Size of updates to DB since last analytics run</p>
    <p>Centralized Distributed: no caching</p>
    <p>Distributed: with caching 330x</p>
  </div>
  <div class="page">
    <p>TPC-CH</p>
    <p>D at</p>
    <p>a tr</p>
    <p>an sf</p>
    <p>er G</p>
    <p>B (</p>
    <p>co m</p>
    <p>pr es</p>
    <p>se d)</p>
    <p>GB (raw, uncompressed) Size of updates to DB since last analytics run</p>
    <p>Centralized Distributed: no caching</p>
    <p>Distributed: with caching 360x</p>
  </div>
  <div class="page">
    <p>Microsoft production workload D</p>
    <p>at a</p>
    <p>tr an</p>
    <p>sf er</p>
    <p>(c o</p>
    <p>m pr</p>
    <p>es se</p>
    <p>d)</p>
    <p>Size of OLTP updates since last OLAP run (raw, uncompressed)</p>
    <p>Centralized Distributed: no caching</p>
    <p>Distributed: with caching 257x</p>
  </div>
  <div class="page">
    <p>Berkeley Big-Data</p>
    <p>D at</p>
    <p>a tr</p>
    <p>an sf</p>
    <p>er G</p>
    <p>B (</p>
    <p>co m</p>
    <p>pr es</p>
    <p>se d)</p>
    <p>GB (raw, uncompressed) Size of updates to DB since last analytics run</p>
    <p>Centralized Distributed: no caching</p>
    <p>Distributed: with caching Distributed: caching + top-k</p>
  </div>
  <div class="page">
    <p>Berkeley Big-Data</p>
    <p>D at</p>
    <p>a tr</p>
    <p>an sf</p>
    <p>er G</p>
    <p>B (</p>
    <p>co m</p>
    <p>pr es</p>
    <p>se d)</p>
    <p>GB (raw, uncompressed) Size of updates to DB since last analytics run</p>
    <p>Centralized Distributed: no caching</p>
    <p>Distributed: with caching Distributed: caching + top-k 27x</p>
  </div>
  <div class="page">
    <p>BEYOND SQL</p>
  </div>
  <div class="page">
    <p>Beyond SQL: DAG workflows</p>
    <p>ComputaAonal model: directed acyclic task graphs, each node = arbitrary computaAon</p>
    <p>Significantly more challenging seing</p>
    <p>IniAal results encouraging - Same level of improvement as SQL</p>
    <p>More details: [CIDR 2015]</p>
    <p>[CIDR 2015] WANalyAcs: AnalyAcs for a geo-distributed data-intensive world Vulimiri, Curino, Godfrey, Karanasos, Varghese</p>
  </div>
  <div class="page">
    <p>RELATED WORK</p>
    <p>Distributed and parallel databases</p>
    <p>Single-DC frameworks (Hadoop/Spark/)</p>
    <p>Data warehouses</p>
    <p>ScienAfic workflow systems</p>
    <p>Sensor networks</p>
    <p>Stream processing systems (e.g. JetStream)</p>
  </div>
  <div class="page">
    <p>Key characteristics</p>
  </div>
  <div class="page">
    <p>SUMMARY</p>
    <p>Centralized analyAcs becoming unsustainable</p>
    <p>Geo-distributed analyAcs: SQL and DAG workflows</p>
    <p>Several novel techniques - Redundancy eliminaAon via caching - Pseudo-distributed measurement - [SQL query planner + ILP] opAmizer</p>
    <p>Up to 360x less bandwidth on real &amp; syntheAc workloads</p>
  </div>
  <div class="page">
    <p>THANK YOU!</p>
  </div>
  <div class="page">
    <p>SUMMARY</p>
    <p>Centralized analyAcs becoming unsustainable</p>
    <p>Geo-distributed analyAcs: SQL and DAG workflows</p>
    <p>Several novel techniques - Redundancy eliminaAon via caching - Pseudo-distributed measurement - [SQL query planner + ILP] opAmizer</p>
    <p>Up to 360x less bandwidth on real &amp; syntheAc workloads</p>
  </div>
  <div class="page">
    <p>BACKUP SLIDES</p>
  </div>
  <div class="page">
    <p>Caching and view selection</p>
    <p>Consider SELECT val - avg(val) FROM table</p>
    <p>Cutpoint selecAon problem: do we cache - Base [val], or - Results a7er average has been subtracted</p>
    <p>Akin to view selecAon problem in SQL databases</p>
    <p>Current implementaAon makes wrong choice</p>
  </div>
  <div class="page">
    <p>Sovereignty: Partial support</p>
    <p>Our system respects data-at-rest regulaAons (e.g. German data should not leave Germany)</p>
    <p>But we allow arbitrary queries on the data</p>
    <p>LimitaAon: we dont differenAate between - Acceptable queries, e.g. whats the total revenue from each city</p>
    <p>- ProblemaAc queries, e.g. SELECT * FROM Germany</p>
  </div>
  <div class="page">
    <p>Sovereignty: Partial support</p>
    <p>SoluAon: either - Legally vet the core workload of queries - Use differenAal privacy mechanism</p>
    <p>Open problem</p>
  </div>
  <div class="page">
    <p>Past work</p>
  </div>
</Presentation>
