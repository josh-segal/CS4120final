<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>UKSM: Swift Memory Deduplication via Hierarchical and Adaptive</p>
    <p>Memory Region Distilling</p>
    <p>Nai Xia* Chen Tian* Yan Luo+ Hang Liu+ Xiaoliang Wang* *: Nanjing University +: University of Massachusetts Lowell</p>
    <p>Feb/15/2018</p>
  </div>
  <div class="page">
    <p>Background  What is Kernel Samepage Merging (KSM)?</p>
    <p>page 1</p>
    <p>page 2 Identical ?</p>
    <p>page 1</p>
    <p>page 2 Update, different?</p>
    <p>page 1</p>
    <p>page 2</p>
    <p>Goal: Reduce memory consumption when duplication exists.  Effectiveness: There exist tremendous (~86%) memory duplications in</p>
    <p>real-world applications, Change et al. [ISPA 2011].</p>
    <p>Merge Unmerge</p>
  </div>
  <div class="page">
    <p>Unique Challenges</p>
    <p>Storage deduplication deals with relatively static content, only concerns about duplication ratio.  Sparse Indexing [FAST 2009] , CAFTL [FAST 2011], El-Shimi et al. [ATC 2012], Cao et al. [Just now]</p>
    <p>Responsiveness:  Remove duplications before they exhaust the memory.</p>
    <p>Dynamic nature:  Duplication status may change over time.</p>
  </div>
  <div class="page">
    <p>Accelerate the deduplication of memory which is dynamic in nature!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Observation (Opportunity)  Overview  Hierarchical Region Distilling  Adaptive Partial Hashing  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Observation I: Pages within the Same Region Present Similar Patterns0 200 400 600 800 1000</p>
    <p>KVM Memory Space D</p>
    <p>up lic</p>
    <p>at ed</p>
    <p>P ag</p>
    <p>es</p>
    <p>Docker Memory Space</p>
    <p>D up</p>
    <p>lic at</p>
    <p>ed P</p>
    <p>ag es</p>
    <p>Test: Apache web server and MySQL database serving wordpress website in Ubuntu 16.04 (kernel version 4.4).</p>
    <p>Duplicated pages concentrate by memory region.</p>
    <p>*Please refer to our paper for other pattern analysis</p>
  </div>
  <div class="page">
    <p>Observation II: Hashing Needs to Be Adaptive</p>
    <p>Various applications need different hashing strengths to differentiate:  Image applications contain pages with highly similar contents.  Crypto applications contain diverse contents.</p>
    <p>We should adjust hashing strength accordingly.</p>
    <p>Page i</p>
    <p>Page j</p>
    <p>Page i</p>
    <p>Page j</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Assuming we have 9 memory regions, i.e., R0  R8.</p>
    <p>R0 R1 R2 R3 R4</p>
    <p>R5 R6 R7 R8</p>
    <p>Ri</p>
    <p>Low High Similarity</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Hierarchical memory region clustering.</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
    <p>R4R5 R6</p>
    <p>R7</p>
    <p>R8</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level N</p>
    <p>Ri</p>
    <p>Low High Similarity</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Hierarchical region distilling.</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
    <p>R4R5 R6</p>
    <p>R7</p>
    <p>R8</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level N</p>
    <p>Ri</p>
    <p>Low High Similarity</p>
  </div>
  <div class="page">
    <p>R3R3</p>
    <p>R8</p>
    <p>Overview</p>
    <p>Hierarchical region distilling.</p>
    <p>Ri</p>
    <p>Low High Similarity</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2 R4R5 R6</p>
    <p>R7</p>
    <p>R8</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level N</p>
    <p>Round n</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2 R4R5 R6</p>
    <p>R7</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level N</p>
    <p>Round n + 1</p>
  </div>
  <div class="page">
    <p>R3</p>
    <p>R3 R8</p>
    <p>Overview</p>
    <p>Hierarchical region distilling + Adaptive partial hashing.</p>
    <p>Ri</p>
    <p>Low High Similarity</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2 R4R5 R6</p>
    <p>R7</p>
    <p>R8</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level N</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2 R4R5 R6</p>
    <p>R7</p>
    <p>Round n Round n + 1</p>
  </div>
  <div class="page">
    <p>R3</p>
    <p>R3 R8</p>
    <p>Overview</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2 R4R5 R6</p>
    <p>R7</p>
    <p>R8</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level N</p>
    <p>R0</p>
    <p>R1</p>
    <p>R2 R4R5 R6</p>
    <p>R7</p>
    <p>Takeaway 1: Promote/demote regions.</p>
    <p>Takeaway 1</p>
    <p>Takeaway 2</p>
    <p>Takeaway 2: Sampling offset shift.</p>
    <p>Takeaway 3</p>
    <p>Takeaway 3: Hash strength adjustment.</p>
    <p>Round n Round n + 1</p>
    <p>Hierarchical region distilling + Adaptive partial hashing.</p>
  </div>
  <div class="page">
    <p>Hierarchical Region Distilling  Memory region characterization  Signatures:  Vcow: promote regions whose COW-broken ratios are lower than this.  Vdup: promote regions whose duplication ratios are higher than this.  Vlife: regions living longer than this threshold can be effectively scanned.</p>
    <p>Default empirical values:  Vcow = 10%, Vdup = 20% and Vlife = 100ms.</p>
    <p>Various commercial products adopt UKSM and observe different sweet spots.</p>
    <p>* COW: copy on write</p>
  </div>
  <div class="page">
    <p>Hierarchical Region Distilling</p>
    <p>Region Ri Sample &amp; Hash</p>
    <p>Treemerge</p>
    <p>Treeunmerge</p>
    <p>Adjust Vdup</p>
    <p>*: We adopt Linux KSM black-red tree design to track merged and unmerged pages.</p>
    <p>Write on merged tree, adjust Vcow</p>
    <p>move page from unmerged to merged tree</p>
  </div>
  <div class="page">
    <p>Adaptive Partial Hashing</p>
    <p>Half hashing strength Strength = Strength  DeltaProbe state</p>
    <p>Adjust hash strength</p>
    <p>We optimize SuperFastHash with the following key contributions:  Minimizing collisions  Optimizing avalanche for SuperFastHash [Hsieh 2004].  Progressive hashing  Support additivity while adjust hash strengths.</p>
    <p>Hash Hash value H2 (round n+1)</p>
    <p>Combine to H1,2 Hash Hash value H1 (round n)1</p>
    <p>st half</p>
    <p>Sampled page</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>6,000 Lines of Code in Linux kernel.  OS: Vanilla kernel 4.4.  Hardware:  Intel Core  i7 CPU 920 with four 2.67 GHz cores.  12 GB memory.</p>
    <p>For fair comparison  KSM is upgraded to SuperFastHash.</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>How efficient is UKSM on different workloads?  How flexible is UKSM regarding customization?  Whats the responsiveness of UKSM vs KSM?  How does adaptive partial hashing perform compared to non-adaptive</p>
    <p>algorithm?  Whats the performance penalty of UKSM?</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>How efficient is UKSM on different workloads?  How flexible is UKSM regarding customization?  Whats the responsiveness of UKSM vs KSM?  How does adaptive partial hashing perform compared to non-adaptive</p>
    <p>algorithm?  Whats the performance penalty of UKSM?</p>
  </div>
  <div class="page">
    <p>Parameter Analysis</p>
    <p>Seconds</p>
    <p>C P</p>
    <p>U U</p>
    <p>til iz</p>
    <p>at io</p>
    <p>n (%</p>
    <p>)</p>
    <p>Full Quiet</p>
    <p>Seconds</p>
    <p>M em</p>
    <p>or y</p>
    <p>S av</p>
    <p>in g</p>
    <p>(M B</p>
    <p>)</p>
    <p>Full Medium Low Quiet</p>
    <p>UKSM allows four levels of scanning strengths:  Level Full allows upto 95% CPU consumption and can scan the entire memory in 2 seconds.  Each lower level will half the CPU and potentially increase the scan time by 2x.</p>
    <p>Setting: Booting 25 VMs, each with 1 VCPU, 1GB memory.</p>
    <p>Catching up time</p>
  </div>
  <div class="page">
    <p>Responsiveness Analysis</p>
    <p>M em</p>
    <p>or y</p>
    <p>U til</p>
    <p>iz at</p>
    <p>io n</p>
    <p>(M B</p>
    <p>)</p>
    <p>UKSM KSM 100 Pages KSM 1000 Pages KSM 2000 Pages</p>
    <p>C P</p>
    <p>U (%</p>
    <p>o ne</p>
    <p>c or</p>
    <p>e)</p>
    <p>UKSM KSM 100 Pages KSM 1000 Pages KSM 2000 Pages</p>
    <p>UKSM is 8.3, 12.6, 11.5 more efficient than KSM at scan speed of 100, 1000, 2000 pages.</p>
    <p>Efficiency = &quot;#&quot;$%&amp; '()*+,-./ 0$+'1&quot;23*$+</p>
    <p>Setting: Two processes, each with 4GB memory. One contains identical pages while the other random ones.</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Content-based approach:  VMware ESX server, IBM active memory deduplication, Red Hat ksmtuned.  Majority of them treat every page equally.</p>
    <p>I/O hint based approach:  KSM++ [Resolve 2012], XLH[Usenix ATC 2013], CMD [VEE 2014].  Cannot track anonymous memory space (no I/O) or require hardware change.</p>
    <p>SmartMD [Usenix ATC 17]:  Consider various page sizes; we are orthogonal.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Memory deduplication faces the unique challenges. Our techniques:  Hierarchical region distilling.  Adaptive partial hashing.</p>
    <p>UKSM saves 12.6x and 5x more memory than KSM on static and dynamic workload, respectively, in the same time envelope.</p>
    <p>UKSM is an in production system: https://github.com/dolohow/uksm.  It has ~110 (watch, star and fork) after less than one year in GitHub.</p>
  </div>
  <div class="page">
    <p>Thank You &amp; Questions?</p>
    <p>We would like to thank our shepherd Dr. Hong Jiang and anonymous reviewers!</p>
  </div>
</Presentation>
