<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>(C) 2005 Multifacet Project http://www.cs.wisc.edu/gems</p>
    <p>ISCA Tutorial June 5th, 2005</p>
    <p>Mike Marty, Brad Beckmann, Luke Yen, Alaa Alameldeen, Min Xu, Kevin Moore</p>
    <p>Please Ask Questions</p>
  </div>
  <div class="page">
    <p>Slide 2 http://www.cs.wisc.edu/gems</p>
    <p>What do you want to simulate?</p>
    <p>Symmetric Multiprocessor</p>
    <p>Glueless Multiprocessor</p>
    <p>CPU</p>
    <p>Uniprocessor</p>
    <p>Multiple-CMP</p>
    <p>CMP CMP</p>
    <p>CMP CMP</p>
    <p>P</p>
    <p>Chip Multiprocessor (CMP)</p>
    <p>P P P</p>
    <p>$ $ $ $</p>
  </div>
  <div class="page">
    <p>Slide 3 http://www.cs.wisc.edu/gems</p>
    <p>Open Source Release of GEMS</p>
    <p>GEMS v1.1 released as GPL software</p>
    <p>http://www.cs.wisc.edu/gems</p>
    <p>Contributors</p>
    <p>Alaa Alameldeen</p>
    <p>Brad Beckmann</p>
    <p>Ross Dickson</p>
    <p>Pacia Harper</p>
    <p>Milo Martin</p>
    <p>Mike Marty</p>
    <p>Carl Mauer</p>
    <p>Kevin Moore</p>
    <p>Manoj Plakal</p>
    <p>Dan Sorin</p>
    <p>Min Xu</p>
    <p>Luke Yen</p>
    <p>Multifacet Project directed by Mark Hill &amp; David Wood</p>
  </div>
  <div class="page">
    <p>Slide 4 http://www.cs.wisc.edu/gems</p>
    <p>GEMS Requirements</p>
    <p>Virtutech Simics 2.0.x or 2.2.x  Personal academic licenses available</p>
    <p>http://www.virtutech.com</p>
    <p>Host Machine  x86 (32 or 64-bit) Linux or Sparc/Solaris host machine</p>
    <p>&gt; 1 GB Memory</p>
    <p>Workload Checkpoints YOU Create  License issues w/ releasing checkpoints</p>
  </div>
  <div class="page">
    <p>Slide 5 http://www.cs.wisc.edu/gems</p>
    <p>GEMS From 50,000 Feet</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
  </div>
  <div class="page">
    <p>Slide 6 http://www.cs.wisc.edu/gems</p>
    <p>GEMS From 50,000 Feet</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
    <p>Full-System Functional Simulator</p>
    <p>Boots unmodified Solaris 9  BUT, each instruction 1-cycle</p>
    <p>www.virtutech.com</p>
  </div>
  <div class="page">
    <p>Slide 7 http://www.cs.wisc.edu/gems</p>
    <p>GEMS From 50,000 Feet</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
    <p>Memory System Model</p>
    <p>Flexible multiprocessor memory hierarchy  Includes domain-specific language</p>
  </div>
  <div class="page">
    <p>Slide 8 http://www.cs.wisc.edu/gems</p>
    <p>GEMS From 50,000 Feet</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
    <p>OoO Processor Model</p>
    <p>Implements partial SPARC v9 ISA  Modeled after MIPS R10000</p>
  </div>
  <div class="page">
    <p>Slide 9 http://www.cs.wisc.edu/gems</p>
    <p>GEMS From 50,000 Feet</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
    <p>Other Drivers</p>
    <p>Testing independent of Simics  Microbenchmarks</p>
  </div>
  <div class="page">
    <p>Slide 10 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 11 http://www.cs.wisc.edu/gems</p>
    <p>Full-System Simulation with GEMS</p>
    <p>Steps:  Choosing a Ruby protocol  Building Ruby and Opal</p>
    <p>Starting and configuring Simics</p>
    <p>Loading and configuring Ruby  Loading and configuring Opal</p>
    <p>Running simulation</p>
    <p>Getting results</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 12 http://www.cs.wisc.edu/gems</p>
    <p>Choosing the Ruby System/Protocol</p>
    <p>Included with GEMS release v1.1</p>
    <p>CMP protocols  MOESI_CMP_token: M-CMP token coherence</p>
    <p>MSI_MOSI_CMP_directory: 2-level Directory</p>
    <p>MOESI_CMP_directory: higher performing 2-level Directory</p>
    <p>SMP protocols  MOSI_SMP_bcast: snooping on ordered interconnect  MOSI_SMP_directory  MOSI_SMP_hammer: based on AMD Hammer  And more</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 13 http://www.cs.wisc.edu/gems</p>
    <p>Building Ruby and Opal</p>
    <p>Ruby module</p>
    <p>cd $GEMS_ROOT/ruby</p>
    <p>set compile-time defaults vi config/rubyconfig.defaults</p>
    <p>Build module, choosing protocol and destination dir make PROTOCOL=MOESI_CMP_token DESTINATION=MOESI_CMP_token</p>
    <p>SLICC runs, generates HTML and additional C++ files  Ruby module built and moved to</p>
    <p>$GEMS_ROOT/simics/home/MOESI_CMP_token</p>
    <p>Build Opal</p>
    <p>cd $GEMS_ROOT/opal make module DESTINATION=MOESI_CMP_token</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 14 http://www.cs.wisc.edu/gems</p>
    <p>Starting Simics</p>
    <p>Start non-GUI Simics</p>
    <p>maya(9)% cd $GEMS_ROOT/simics/home/MOESI_CMP_token/</p>
    <p>maya(10)% ./simics</p>
    <p>Checking out a license... done: academic license.</p>
    <p>Looking for additional Simics modules in ./modules</p>
    <p>+----------------+ Copyright 1998-2004 by Virtutech, All Rights Reserved</p>
    <p>| Virtutech | Version: simics-2.0.23</p>
    <p>| Simics | Compiled: Thu Oct 14 20:27:36 CEST 2004</p>
    <p>+----------------+</p>
    <p>www.simics.com &quot;Virtutech&quot; and &quot;Simics&quot; are trademarks of Virtutech AB</p>
    <p>Type 'copyright' for details on copyright.</p>
    <p>Type 'license' for details on warranty, copying, etc.</p>
    <p>Type 'readme' for further information about this version.</p>
    <p>Type 'help help' for info on the on-line documentation.</p>
    <p>simics&gt;</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 15 http://www.cs.wisc.edu/gems</p>
    <p>Checkpoint and Configuration</p>
    <p>Checkpoints should be created first  Simics-only process</p>
    <p>simics&gt; read-configuration ../../checkpoints-u3/jbb/jbb-16p.check</p>
    <p>SpecJBB checkpoint loaded</p>
    <p>Load python scripts</p>
    <p>simics&gt; @sys.path.append(&quot;../../../gen-scripts&quot;) simics&gt; @import mfacet</p>
    <p>Configure Simics simics&gt; istc-disable Turning I-STC off and flushing old data simics&gt; dstc-disable Turning D-STC off and flushing old data simics&gt; instruction-fetch-mode instruction-fetch-trace simics&gt; magic-break-enable</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 16 http://www.cs.wisc.edu/gems</p>
    <p>Load and Configure Ruby</p>
    <p>Load module</p>
    <p>simics&gt; load-module ruby</p>
    <p>Setting # processors is required</p>
    <p>simics&gt; ruby0.setparam g_NUM_PROCESSORS 16</p>
    <p>Create a M-CMP system (4 chips, 4 procs/chip)</p>
    <p>simics&gt; ruby0.setparam g_PROCS_PER_CHIP 4</p>
    <p>Override compile-time defaults</p>
    <p>simics&gt; ruby0.setparam g_NUM_L2_BANKS 32 simics&gt; ruby0.setparam L2_CACHE_ASSOC 4 simics&gt; ruby0.setparam L2_CACHE_NUM_SETS_BITS 16 simics&gt; ruby0.setparam NETWORK_LINK_LATENCY 50</p>
    <p>Initialize</p>
    <p>simics&gt; ruby0.init</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 17 http://www.cs.wisc.edu/gems</p>
    <p>Optionally Load and Configure Opal</p>
    <p>Load module</p>
    <p>simics&gt; load-module opal</p>
    <p>Initialize default processor</p>
    <p>simics&gt; opal0.init</p>
    <p>simics&gt; opal0.listparam</p>
    <p>Start opal (but do not start simulating)</p>
    <p>simics&gt; opal0.sim-start output.opal&quot;</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 18 http://www.cs.wisc.edu/gems</p>
    <p>Running simulation</p>
    <p>Setup transaction-based simulation  magic breakpoints  Five JBB transactions</p>
    <p>simics&gt; @mfacet.setup_run_for_n_transactions(5,1)</p>
    <p>Start simulating  Ruby only (Simics drives Ruby):</p>
    <p>simics&gt; c</p>
    <p>Opal is loaded (Opal steps Simics):</p>
    <p>simics&gt; opal0.sim-step 9999999999</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 19 http://www.cs.wisc.edu/gems</p>
    <p>Dumping Some Output</p>
    <p>Opal stats</p>
    <p>simics&gt; opal0.stats</p>
    <p>Ruby stats</p>
    <p>simics&gt; ruby0.dump-stats ruby.stats</p>
    <p>Ruby short stats</p>
    <p>simics&gt; ruby0.dump-short-stats</p>
    <p>Ruby_cycles is a good runtime metric</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 20 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model  Overview (Drivers &amp; Memory System)</p>
    <p>Event-driven simulation</p>
    <p>Interconnection network</p>
    <p>SLICC: Specifying the logic of the system</p>
    <p>Simple example: SMP MI protocol</p>
    <p>Limitations</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 21 http://www.cs.wisc.edu/gems</p>
    <p>High-Level Infrastructure Map D</p>
    <p>ri v e rs</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>S y st</p>
    <p>e m</p>
    <p>In te</p>
    <p>rn al</p>
    <p>Ru by</p>
    <p>Te st</p>
    <p>er s</p>
    <p>Ex te</p>
    <p>rn al</p>
    <p>CP U</p>
    <p>M od</p>
    <p>el s</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
  </div>
  <div class="page">
    <p>Slide 22 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Driver: Random Tester</p>
    <p>Verifying a Multiprocessor Cache Controller Using Random Test Generation [Wood et al. 90]</p>
    <p>Purpose: Excite cache coherency bugs</p>
    <p>Competing actions performed then checked</p>
    <p>Utilizes false sharing  Multiple writers - action</p>
    <p>Single read - check</p>
    <p>Randomly inserted delay</p>
    <p>Random Tester</p>
  </div>
  <div class="page">
    <p>Slide 23 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Driver: Microbenchmarks</p>
    <p>Deterministic tester  Simple sequence of requests  Sanity checking and performance tuning</p>
    <p>DeterministicDriver.C  GETX, SeriesGETS, Inv</p>
    <p>Contended locks  Compare and swap atomic op.  RequestGenerator.C / SyntheticDriver.C</p>
    <p>Trace file  Issues requests one at a time</p>
    <p>Similar to cache warmup mechanism</p>
    <p>-z &lt;trace_file.gz&gt;</p>
    <p>Microbenchmarks</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e fi</p>
    <p>le</p>
  </div>
  <div class="page">
    <p>Slide 24 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Driver: In-order Processor Model</p>
    <p>Simics blocking interface (in-order processor)  Single issue, non-pipelined processor  Only one outstanding request per CPU</p>
    <p>SIMICS_RUBY_MULTIPLIER &gt; 1  Estimates a higher performance processor</p>
    <p>Multiple simics processor cycles == one ruby cycle</p>
    <p>Simics</p>
  </div>
  <div class="page">
    <p>Slide 25 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Driver: In-order Processor Model</p>
    <p>Implements Simics mh_memorytracer_possible_cache_miss()  Callback Simics with SIM_stall_cycle(proc_ptr, 0)</p>
    <p>P0</p>
    <p>Simics time queue</p>
    <p>P1 P2 P3</p>
    <p>sta ll()</p>
    <p>/un sta</p>
    <p>ll()</p>
    <p>sta ll()</p>
    <p>/un sta</p>
    <p>ll() stall()/unstall()</p>
    <p>stall()/unstall()</p>
    <p>instructions</p>
    <p>Simics in-order processo r model</p>
    <p>SIMICS</p>
    <p>Ruby Memory System Model</p>
  </div>
  <div class="page">
    <p>Slide 26 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Driver: Out-of-order Processor Model</p>
    <p>Opal (out-of-order processor)  Super-scalar pipelined processor  Multiple outstanding requests per CPU</p>
    <p>OPAL_RUBY_MULTIPLIER &gt; 1  Faster processor core frequency than memory</p>
    <p>Simulation execution optimization</p>
    <p>What are they driving?</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>Opal</p>
  </div>
  <div class="page">
    <p>Slide 27 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Multiprocessor Memory System</p>
    <p>Physical Components  Caches  Memory</p>
    <p>System Interconnect</p>
    <p>Determines the timing of memory requests  Driver issues memory request to Ruby  Ruby simulates the requests</p>
    <p>Ruby eventually callbacks the driver with the latency</p>
    <p>Rubys purpose:</p>
    <p>Return memory latency</p>
    <p>Ruby Memory System Model</p>
  </div>
  <div class="page">
    <p>Slide 28 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model  Overview (Drivers &amp; Memory System)</p>
    <p>Event-driven simulation</p>
    <p>Interconnection network</p>
    <p>SLICC: Specifying the logic of the system</p>
    <p>Simple example: SMP MI protocol</p>
    <p>Limitations</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 29 http://www.cs.wisc.edu/gems</p>
    <p>Discrete Event-driven Simulation</p>
    <p>Discrete event-driven simulation  Events change system state  Series of scheduled events</p>
    <p>Global EventQueue  Heart of Ruby</p>
    <p>Priority heap of event/time pairs  Not a true queue - not in FIFO order</p>
    <p>Self-sorting queue</p>
    <p>Given cycle events occur in arbitrary order</p>
    <p>All events must be at least one unit of time</p>
    <p>Global EventQueue</p>
    <p>Event | Time</p>
    <p>*Event G 7</p>
    <p>*Event B 5</p>
    <p>*Event J 3</p>
    <p>*Event S 3</p>
    <p>*Event A 4</p>
  </div>
  <div class="page">
    <p>Slide 30 http://www.cs.wisc.edu/gems</p>
    <p>Events and Consumers</p>
    <p>Event = Consumer Wakeup  Consumer determines event type  Consumer changes system state</p>
    <p>Typical event  Consumer wakes up to observe its input ports  Consumer acts upon the incoming message(s)</p>
    <p>Change system state  Enqueue outgoing messages</p>
    <p>Consumer pops the incoming message(s)  Consumer schedules outgoing message(s) consumers</p>
    <p>Input Port Consumer</p>
    <p>Output Port</p>
    <p>Output Port</p>
    <p>Consumer</p>
    <p>Consumer</p>
  </div>
  <div class="page">
    <p>Slide 31 http://www.cs.wisc.edu/gems</p>
    <p>Events and Consumers</p>
    <p>Stalled event  Consumer wakes up to observer its input ports  Consumer encounters a stall</p>
    <p>Consumer schedules itself again  Doesnt pop incoming queue</p>
    <p>Input Port Consumer</p>
    <p>Output Port</p>
    <p>Output Port</p>
    <p>Consumer</p>
    <p>Consumer</p>
  </div>
  <div class="page">
    <p>Slide 32 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model  Overview (Drivers &amp; Memory System)</p>
    <p>Event-driven simulation</p>
    <p>Interconnection network</p>
    <p>SLICC: Specifying the logic of the system</p>
    <p>Simple example: SMP MI protocol</p>
    <p>Limitations</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 33 http://www.cs.wisc.edu/gems</p>
    <p>Interconnection Network</p>
    <p>A single flexible infrastructure  Point-to-point links and switches: Consumers  Both intra-chip and inter-chip networks</p>
    <p>Dynamic network creation  Routing tables created at runtime</p>
    <p>Utilizes input parameters</p>
    <p>Two ways to generate topologies 1. Auto-generated</p>
    <p>Intra-chip network: Single on-chip switch</p>
    <p>Inter-chip network: 4 included (next slide)</p>
    <p>Specify one link per line</p>
    <p>Link</p>
    <p>Switch</p>
    <p>Throttle.C</p>
    <p>PerfectSwitch.C</p>
  </div>
  <div class="page">
    <p>Slide 34 http://www.cs.wisc.edu/gems</p>
    <p>Auto-generated Inter-chip Network Topologies</p>
    <p>TopologyType_TORUS_2D</p>
    <p>TopologyType_CROSSBAR</p>
    <p>TopologyType_HIERARCHICAL_SWITCH</p>
    <p>TopologyType_PT_TO_PT</p>
  </div>
  <div class="page">
    <p>Slide 35 http://www.cs.wisc.edu/gems</p>
    <p>Network Characteristics</p>
    <p>Link latency 1. Auto-generated</p>
    <p>ON_CHIP_LINK_LATENCY  NETWORK_LINK_LATENCY</p>
    <p>Link bandwidth  Bandwidth specified in 1000th of byte 1. Auto-generated</p>
    <p>On-chip = 10 x g_endpoint_bandwidth  Off-chip = g_endpoint_bandwidth</p>
    <p>Buffer size 1. Infinite by default 2. Customized network supports finite buffering</p>
    <p>Prevent 2D-mesh network deadlock through e-cube restrictive routing  link_weight</p>
  </div>
  <div class="page">
    <p>Slide 36 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model  Overview (Drivers &amp; Memory System)</p>
    <p>Event-driven simulation</p>
    <p>Interconnection network</p>
    <p>SLICC: Specifying the logic of the system</p>
    <p>Simple example: SMP MI protocol</p>
    <p>Limitations</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 37 http://www.cs.wisc.edu/gems</p>
    <p>Domain-specific language  Designed to specify state machines for cache coherence  Syntactically similar to C/C++/Java  Constrains to hardware-like structures (i.e. no loops)  Generates C++ tightly coupled to Ruby</p>
    <p>Two purposes 1. Specify system coherence</p>
    <p>Per-memory-block State Machines  I.e. cache and memory controller logic</p>
    <p>Specification Language for Implementing Cache Coherence (SLICC)</p>
    <p>SLICC State</p>
    <p>Machine</p>
    <p>Network In-ports</p>
    <p>Network Out-ports</p>
  </div>
  <div class="page">
    <p>Slide 38 http://www.cs.wisc.edu/gems</p>
    <p>System Flexibility via SLICC</p>
    <p>Substantial portion of Ruby code generated  In combination with dynamic network creation  Permits a tremendously flexible simulation infrastructure</p>
    <p>protocols/&lt;protocol_name&gt;.slicc  Indicates the SLICC files needed by the protocol</p>
    <p>Specifies the necessary generated objects  Controller state machines  Network messages</p>
    <p>Snooping protocol: requests and response messages  Directory protocol: requests, forwarded requests, and responses</p>
    <p>Allocates only C++ objects needed by the particular protocol  Ex. Shadow tags for an exclusive two-level cache  Ex. Persistent Request Table for Token coherence</p>
  </div>
  <div class="page">
    <p>Slide 39 http://www.cs.wisc.edu/gems</p>
    <p>Inside a SLICC State Machine</p>
    <p>Network buffers  Outgoing and incoming ports</p>
    <p>States  Base and transient states</p>
    <p>Events  Internal events that cause state transitions</p>
    <p>Ruby Structures  Caches, transaction buffers etc.</p>
    <p>Trigger events  Incoming messages trigger internal events</p>
    <p>Actions  Operations performed on structures</p>
    <p>Transitions  Cross-product of possible states and events</p>
    <p>Performs atomic sequence of actions</p>
    <p>&lt;controller_name&gt;.sm network ports</p>
    <p>states</p>
    <p>events</p>
    <p>ruby structures</p>
    <p>trigger events</p>
    <p>actions</p>
    <p>transitions</p>
  </div>
  <div class="page">
    <p>Slide 40 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model  Overview (Drivers &amp; Memory System)</p>
    <p>Event-driven simulation</p>
    <p>Interconnection network</p>
    <p>SLICC: Specifying the logic of the system</p>
    <p>Simple example: SMP MI protocol</p>
    <p>Limitations</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 41 http://www.cs.wisc.edu/gems</p>
    <p>Creating a protocol with SLICC</p>
    <p>MI-example protocol  Simple, SMP directory protocol  Cache and directory/memory controller</p>
    <p>Assume ordered interconnect (for simplicity)</p>
    <p>Demo</p>
    <p>$ $ $</p>
    <p>Ruby interconnect</p>
    <p>Ruby interconnect</p>
    <p>dir dir dir M</p>
    <p>I</p>
    <p>G E T S /G</p>
    <p>E T X</p>
    <p>F w</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Slide 42 http://www.cs.wisc.edu/gems</p>
    <p>MI Cache Controller  States and Events</p>
    <p>// STATES enumeration(State, desc=&quot;Cache states&quot;) {</p>
    <p>// stables states</p>
    <p>I, desc=&quot;Not Present/Invalid&quot;; M, desc=&quot;Modified&quot;;</p>
    <p>// transient states MI, desc=&quot;Modified, issued PUT&quot;; II, desc=&quot;Not Present/Invalid, issued PUT&quot;; IS, desc=&quot;Issued request for IFETCH/GETX&quot;; IM, desc=&quot;Issued request for STORE/ATOMIC&quot;; }</p>
    <p>// EVENTS enumeration(Event, desc=&quot;Cache events&quot;) { // from processor Load, desc=&quot;Load request from processor&quot;; Ifetch, desc=&quot;Ifetch request from processor&quot;; Store, desc=&quot;Store request from processor&quot;;</p>
    <p>Data, desc=&quot;Data from network&quot;; Fwd_GETX, desc=&quot;Forward from network&quot;;</p>
    <p>Replacement, desc=&quot;Replace a block&quot;; Writeback_Ack, desc=&quot;Ack from the directory for a writeback&quot;; Writeback_Nack, desc=&quot;Nack from the directory for a writeback&quot;; }</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 43 http://www.cs.wisc.edu/gems</p>
    <p>MI Cache Controller  Network Ports</p>
    <p>// NETWORK BUFFERS</p>
    <p>MessageBuffer requestFromCache, network=&quot;To&quot;, virtual_network=&quot;0&quot;, ordered=&quot;true&quot;;</p>
    <p>MessageBuffer responseFromCache, network=&quot;To&quot;, virtual_network=&quot;1&quot;, ordered=&quot;true&quot;;</p>
    <p>MessageBuffer forwardToCache, network=&quot;From&quot;, virtual_network=&quot;2&quot;, ordered=&quot;true&quot;;</p>
    <p>MessageBuffer responseToCache, network=&quot;From&quot;, virtual_network=&quot;1&quot;, ordered=&quot;true&quot;;</p>
    <p>// NETWORK PORTS</p>
    <p>out_port(requestNetwork_out, RequestMsg, requestFromCache);</p>
    <p>out_port(responseNetwork_out, ResponseMsg, responseFromCache);</p>
    <p>in_port(forwardRequestNetwork_in, RequestMsg, forwardToCache) {</p>
    <p>if (forwardRequestNetwork_in.isReady()) {</p>
    <p>peek(forwardRequestNetwork_in, RequestMsg) {</p>
    <p>if (in_msg.Type == CoherenceRequestType:GETX) {</p>
    <p>trigger(Event:Fwd_GETX, in_msg.Address);</p>
    <p>}</p>
    <p>else if (in_msg.Type == CoherenceRequestType:WB_ACK) {</p>
    <p>trigger(Event:Writeback_Ack, in_msg.Address);</p>
    <p>}</p>
    <p>else {</p>
    <p>error(&quot;Unexpected message&quot;);</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 44 http://www.cs.wisc.edu/gems</p>
    <p>MI Cache Controller  Structures</p>
    <p>// CacheEntry</p>
    <p>structure(Entry, desc=&quot;...&quot;, interface=&quot;AbstractCacheEntry&quot;) {</p>
    <p>State CacheState, desc=&quot;cache state&quot;;</p>
    <p>bool Dirty, desc=&quot;Is the data dirty (different than memory)?&quot;;</p>
    <p>DataBlock DataBlk, desc=&quot;data for the block&quot;;</p>
    <p>}</p>
    <p>external_type(CacheMemory) {</p>
    <p>bool cacheAvail(Address);</p>
    <p>Address cacheProbe(Address);</p>
    <p>void allocate(Address);</p>
    <p>void deallocate(Address);</p>
    <p>Entry lookup(Address);</p>
    <p>void changePermission(Address, AccessPermission);</p>
    <p>bool isTagPresent(Address);</p>
    <p>}</p>
    <p>CacheMemory cacheMemory, template_hack=&quot;&lt;L1Cache_Entry&gt;&quot;, constructor_hack='L1_CACHE_NUM_SETS_BITS, L1_CACHE_ASSOC, MachineType_L1Cache, int_to_string(i)+&quot;_L1&quot;', abstract_chip_ptr=&quot;true&quot;;</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 45 http://www.cs.wisc.edu/gems</p>
    <p>MI Cache Controller  Mandatory Queue</p>
    <p>// Mandatory Queue in_port(mandatoryQueue_in, CacheMsg, mandatoryQueue, desc=&quot;...&quot;) {</p>
    <p>if (mandatoryQueue_in.isReady()) {</p>
    <p>peek(mandatoryQueue_in, CacheMsg) {</p>
    <p>if (cacheMemory.isTagPresent(in_msg.Address) == false &amp;&amp;</p>
    <p>cacheMemory.cacheAvail(in_msg.Address) == false ) {</p>
    <p>// make room for the block</p>
    <p>trigger(Event:Replacement, cacheMemory.cacheProbe(in_msg.Address));</p>
    <p>}</p>
    <p>else {</p>
    <p>trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.Address);</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 46 http://www.cs.wisc.edu/gems</p>
    <p>MI Cache Controller  Transitions</p>
    <p>transition(I, Store, IM) {</p>
    <p>v_allocateTBE;</p>
    <p>i_allocateL1CacheBlock;</p>
    <p>a_issueRequest;</p>
    <p>m_popMandatoryQueue;</p>
    <p>}</p>
    <p>transition(IM, Data, M) {</p>
    <p>u_writeDataToCache;</p>
    <p>s_store_hit;</p>
    <p>w_deallocateTBE;</p>
    <p>n_popResponseQueue;</p>
    <p>}</p>
    <p>transition(M, Fwd_GETX, I) {</p>
    <p>e_sendData;</p>
    <p>o_popForwardedRequestQueue;</p>
    <p>}</p>
    <p>transition(M, Replacement, MI) { v_allocateTBE;</p>
    <p>b_issuePUT;</p>
    <p>x_copyDataFromCacheToTBE;</p>
    <p>h_deallocateL1CacheBlock;</p>
    <p>}</p>
    <p>Atomic sequence of actions</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 47 http://www.cs.wisc.edu/gems</p>
    <p>MI Cache Controller  Actions</p>
    <p>action(a_issueRequest, &quot;a&quot;, desc=&quot;Issue a request&quot;) {</p>
    <p>enqueue(requestNetwork_out, RequestMsg, latency=&quot;ISSUE_LATENCY&quot;) {</p>
    <p>out_msg.Address := address;</p>
    <p>out_msg.Type := CoherenceRequestType:GETX;</p>
    <p>out_msg.Requestor := machineID;</p>
    <p>out_msg.Destination.add(map_Address_to_Directory(address));</p>
    <p>out_msg.MessageSize := MessageSizeType:Control;</p>
    <p>}</p>
    <p>}</p>
    <p>action(e_sendData, &quot;e&quot;, desc=&quot;Send data from cache to requestor&quot;) {</p>
    <p>peek(forwardRequestNetwork_in, RequestMsg) {</p>
    <p>enqueue(responseNetwork_out, ResponseMsg, latency=&quot;CACHE_RESPONSE_LATENCY&quot;) {</p>
    <p>out_msg.Address := address;</p>
    <p>out_msg.Type := CoherenceResponseType:DATA;</p>
    <p>out_msg.Sender := machineID;</p>
    <p>out_msg.Destination.add(in_msg.Requestor);</p>
    <p>out_msg.DataBlk := cacheMemory[address].DataBlk;</p>
    <p>out_msg.MessageSize := MessageSizeType:Response_Data;</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 48 http://www.cs.wisc.edu/gems</p>
    <p>SLICC-generated HTML tablesDemo</p>
    <p>http://www.cs.wisc.edu/gems/MI_example_html/</p>
  </div>
  <div class="page">
    <p>Slide 49 http://www.cs.wisc.edu/gems</p>
    <p>Testing MI_exampleDemo</p>
    <p>Build Protocol</p>
    <p>cd $GEMS_ROOT/ruby</p>
    <p>make PROTOCOL=MI_example</p>
    <p>Random test  stresses protocol with simultaneous false-sharing requests  16 processors (-p), 10000 requests (-l)</p>
    <p>./amd64_linux/generated/MI_example/bin/tester.exec p 16 l 10000</p>
    <p>Deterministic test with transition trace  use a trace, requests handled one at a time</p>
    <p>input trace (-z), compressed or non-compressed  transition debug (-s) starting at cycle 1</p>
    <p>./amd64_linux/generated/MI_example/bin/tester.exec p 16 z ruby.trace.gz s 1</p>
  </div>
  <div class="page">
    <p>Slide 50 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model  Overview  Pipeline  Example: Load instruction</p>
    <p>Additional Tidbits</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 51 http://www.cs.wisc.edu/gems</p>
    <p>Overview</p>
    <p>What is OPAL?  Out-of-Order SPARC processor simulator</p>
    <p>(modeled after MIPS R10K)</p>
    <p>Uses Timing-First design</p>
    <p>Realized as a Simics module  like RUBY</p>
    <p>Does NOT use Simics MAI interface</p>
    <p>Goal of this section  Starting point for hacking Opal</p>
    <p>Learning approaches  Code review / summarization (using Control Flow Graphs)</p>
    <p>Example: a load instruction  Analogies to SimpleScalarpay attention to the differences</p>
  </div>
  <div class="page">
    <p>Slide 52 http://www.cs.wisc.edu/gems</p>
    <p>Ruby Driver: In-order Processor Model</p>
    <p>Implements Simics mh_memorytracer_possible_cache_miss()  Callback Simics with SIM_stall_cycle(proc_ptr, 0)</p>
    <p>P0</p>
    <p>Simics time queue</p>
    <p>P1 P2 P3</p>
    <p>sta ll()</p>
    <p>/un sta</p>
    <p>ll()</p>
    <p>sta ll()</p>
    <p>/un sta</p>
    <p>ll() stall()/unstall()</p>
    <p>stall()/unstall()</p>
    <p>instructions</p>
    <p>Simics in-order processo r model</p>
    <p>SIMICS</p>
    <p>Ruby Memory System Model</p>
  </div>
  <div class="page">
    <p>Slide 53 http://www.cs.wisc.edu/gems</p>
    <p>Preview: OPAL &amp; Simics</p>
    <p>Use opals opal0.sim-step command</p>
    <p>P0Phy_mem</p>
    <p>fetch</p>
    <p>decode</p>
    <p>Schedule/execute</p>
    <p>retire</p>
    <p>check</p>
    <p>SIMICS</p>
    <p>OPAL</p>
    <p>Instruction</p>
    <p>Step</p>
    <p>RUBY</p>
    <p>LOAD</p>
    <p>IFETCHHIT</p>
    <p>HIT</p>
  </div>
  <div class="page">
    <p>Slide 54 http://www.cs.wisc.edu/gems</p>
    <p>Timing-First Simulation [Mauer Sigmetrics 02]</p>
    <p>Timing Simulator (Opal)</p>
    <p>functional execution of user/supervisor operations</p>
    <p>speculative, OoO multiprocessor timing simulation</p>
    <p>does NOT implement full ISA or any devices</p>
    <p>Functional Simulator (Simics)</p>
    <p>full-system multiprocessor simulation</p>
    <p>does NOT model detailed micro-architectural timing</p>
    <p>KEY: Reload state if Opal state != Simics state</p>
  </div>
  <div class="page">
    <p>Slide 55 http://www.cs.wisc.edu/gems</p>
    <p>Measured Deviations</p>
    <p>Less than 20 deviations per 100,000 instructions (0.02%)</p>
    <p>Worst case performance error: 2.4% (assuming deviation latency is pipeline fush)</p>
    <p>additional timing slides</p>
  </div>
  <div class="page">
    <p>Slide 56 http://www.cs.wisc.edu/gems</p>
    <p>Opal and UltraSparc</p>
    <p>Functionally simulates 103 of 183 of UltraSparc ISA instructions (99.99% of all dynamic instr in workloads) LIST</p>
    <p>Sample of unimplemented instrs:  ARRAY -FEXPAND -FPADD -RDSOFTINT</p>
    <p>EDGE -FMUL8x16 -FPMERGE -RDSTICK</p>
    <p>SHUTDOWN -SIAM -SIR -WRSOFTINT -WRSTICK</p>
    <p>Does not functionally simulate devices or any I/O instructions  SCSI controllers and disks</p>
    <p>PCI and SBUS interfaces</p>
    <p>interrupt and DMA controllers</p>
    <p>temperature sensors</p>
    <p>Correctness type % error</p>
    <p>Functional</p>
    <p>Performance</p>
  </div>
  <div class="page">
    <p>Slide 57 http://www.cs.wisc.edu/gems</p>
    <p>Simulation Control (system.[C h])</p>
    <p>system_t::simulate(int instrs)</p>
    <p>Disable all simics procs</p>
    <p>returnSimulated enough instrs?</p>
    <p>No</p>
    <p>Yes</p>
    <p>Forall seq-&gt;advanceCycle()</p>
    <p>ruby-&gt;advanceTime()</p>
    <p>global_cycle++</p>
    <p>Pipeline is modeled here</p>
    <p>For MP sims: P0s instrs counted here</p>
  </div>
  <div class="page">
    <p>Slide 58 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model  Overview  Pipeline  Example: Load instruction</p>
    <p>Additional Tidbits</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 59 http://www.cs.wisc.edu/gems</p>
    <p>Whats done in a cycle?</p>
    <p>SimpleScalar uses a reverse order, why?</p>
    <p>pseq::advanceCycle()</p>
    <p>FetchInstructions()</p>
    <p>return</p>
    <p>DecodeInstructions()</p>
    <p>ScheduleInstructions()</p>
    <p>RetireInstructions()</p>
    <p>Scheduler-&gt;execute()</p>
    <p>Uses separate queues (finitecycle.h) to record how many instructions are available for each stage.</p>
    <p>The order is in fact not important here.</p>
  </div>
  <div class="page">
    <p>Slide 60 http://www.cs.wisc.edu/gems</p>
    <p>Pipeline Model (pseq.[C h])</p>
    <p>Instructions stored/tracked in a RUU-like structure (iwindow.[C h])</p>
    <p>Flexible multi-stage pipeline  Delay modeled with separate queues</p>
    <p>(finitecycle.h)</p>
    <p>Models fully-pipelined FUs  Types: CONFIG_ALU_MAPPING</p>
    <p>Number: CONFIG_NUM_ALUS</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>D</p>
    <p>D</p>
    <p>FU0</p>
    <p>FU0</p>
    <p>FU0</p>
    <p>R</p>
    <p>R</p>
    <p>FU1</p>
    <p>FU1</p>
    <p>F E T C</p>
    <p>H _S</p>
    <p>T A</p>
    <p>G E S</p>
    <p>D E C</p>
    <p>O D</p>
    <p>E _S</p>
    <p>T A</p>
    <p>G E S</p>
    <p>R E T IR</p>
    <p>E _S</p>
    <p>T A</p>
    <p>G E S</p>
    <p>Determined by CONFIG_ALU_LATENCY</p>
    <p>MAX_FETCH</p>
    <p>MAX_DECODE</p>
    <p>MAX_RETIRE</p>
    <p>MAX_DISPATCH Sched</p>
    <p>MAX_EXECUTE</p>
  </div>
  <div class="page">
    <p>Slide 61 http://www.cs.wisc.edu/gems</p>
    <p>Instructions ({dynamic,statici,memop,controlop}.[C h] )</p>
    <p>Dynamic</p>
    <p>Control (controlop. [C h])</p>
    <p>Memory (memop. [C h]) ALU (dynamic.[C h])</p>
    <p>decoded instr (statici.[C h])</p>
    <p>Traps</p>
    <p>Registers</p>
    <p>Event Times</p>
    <p>Seq # Wait List ptr</p>
    <p>Predicted Addr</p>
    <p>Actual Addr</p>
    <p>Virtual/Phys Addr</p>
    <p>LSQ index</p>
    <p>Taken/Not Taken</p>
  </div>
  <div class="page">
    <p>Slide 62 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model  Overview  Pipeline  Example: Load instruction</p>
    <p>Additional Tidbits</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 63 http://www.cs.wisc.edu/gems</p>
    <p>Fetch</p>
    <p>Is Fetch Ready?</p>
    <p>Address Translation I-TLB Miss?</p>
    <p>Emit NOP/Stall Fetch</p>
    <p>Yes</p>
    <p>Read instruction:</p>
    <p>pseq::getInstr()</p>
    <p>No</p>
    <p>Stall fetch</p>
    <p>Invoke Ruby to simulate Ifetch</p>
    <p>timing</p>
    <p>Create Dynamic Instr</p>
    <p>(load_inst_t)</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>Slide 64 http://www.cs.wisc.edu/gems</p>
    <p>Decode</p>
    <p>Get load instr from instr window</p>
    <p>dynamic_inst_t::d ecode()</p>
    <p>Insert decoded load inst in decode</p>
    <p>queue</p>
    <p>Get current source operand mappings :</p>
    <p>arf::readDecodeMap() (regmap.[C h], arf.[C h])</p>
    <p>Rename dest reg : arf::allocateRegister()</p>
    <p>(regmap.[C h], arf.[C h])</p>
  </div>
  <div class="page">
    <p>Slide 65 http://www.cs.wisc.edu/gems</p>
    <p>Schedule</p>
    <p>Get load instr from instr window</p>
    <p>Exceeded scheduling window?</p>
    <p>Stop scheduling</p>
    <p>Yes</p>
    <p>TestSourceReadiness() WAIT_XX_STAGE</p>
    <p>Source not ready</p>
    <p>Scheduler-&gt;schedule() All sources ready?</p>
    <p>Wakeup</p>
    <p>Yes</p>
    <p>No Source is ready</p>
  </div>
  <div class="page">
    <p>Slide 66 http://www.cs.wisc.edu/gems</p>
    <p>Execute</p>
    <p>Read port avail? D-TLB address translate</p>
    <p>(memory_inst_t::addresstranslate())</p>
    <p>TLB Miss?Raise TLB miss exception Yes</p>
    <p>No, reschedule</p>
    <p>Invoke Ruby to simulate load timing (rubycache_t::access())</p>
    <p>Read value from Simics memory (pseq-&gt;readPhysicalMemory())</p>
    <p>No</p>
    <p>Cache Miss?</p>
    <p>CACHE_MISS_STAGE</p>
    <p>Yes</p>
    <p>pseq-&gt;complete()</p>
    <p>No</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>Slide 67 http://www.cs.wisc.edu/gems</p>
    <p>Retire</p>
    <p>Get completed LD inst</p>
    <p>checkCriticalstate(): (PC, NPC,regs)</p>
    <p>checkChangedState() (verify load value)</p>
    <p>FullSquash() (reload state &amp;</p>
    <p>refetch from instr following LD)</p>
    <p>FAIL</p>
    <p>Step Simics (pseq-&gt;advanceSimics())</p>
    <p>Retire LD</p>
    <p>Traps?takeTrap() (set trap state,squash pipeline)</p>
    <p>Yes</p>
    <p>No</p>
    <p>FA IL</p>
    <p>Match</p>
    <p>Match</p>
    <p>Memory</p>
    <p>Consistency</p>
  </div>
  <div class="page">
    <p>Slide 68 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model  Overview  Pipeline  Example: Load instruction</p>
    <p>Additional Tidbits</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 69 http://www.cs.wisc.edu/gems</p>
    <p>Opal-Ruby Interface</p>
    <p>rubycache_t: access() complete()</p>
    <p>OpalInterface: isReady() makeRequest() hitCallback()</p>
    <p>OPAL RUBY</p>
    <p>system_t: rubyCompletedRequest()</p>
    <p>pseq_t: completedRequest()</p>
    <p>load_inst_t:: Execute()</p>
    <p>Complete()</p>
    <p>LD</p>
    <p>Asynchronou s</p>
  </div>
  <div class="page">
    <p>Slide 70 http://www.cs.wisc.edu/gems</p>
    <p>Branch Prediction</p>
    <p>pseq_t::createInstruction{  s_instr-&gt;nextPC()</p>
    <p>}</p>
    <p>dynamic_inst_t:: nextPC_call(), nextPC_predicated_branch(), nextPC_predict_branch(), nextPC_indirect()</p>
    <p>Branch predictor (fetch/{yags.[C h], } :</p>
    <p>Predict() Update()</p>
    <p>Predict() Controlop_t:: Execute(){ (check prediction and fush if mispredict) } Retire(){</p>
    <p>Bpred-&gt;Update()</p>
    <p>}</p>
    <p>Update()</p>
  </div>
  <div class="page">
    <p>Slide 71 http://www.cs.wisc.edu/gems</p>
    <p>Common Config Parameters</p>
    <p>Processor Width: MAX_FETCH</p>
    <p>_DECODE _DISPATCH _EXECUTE _RETIRE</p>
    <p>Pipeline Stages: FETCH_STAGES DECODE_STAGES RETIRE_STAGES</p>
    <p>Register File Sizes: CONFIG_IREG_PHYSICAL (int) CONFIG_FPREG_PHYSICAL (fp) CONFIG_CCREG_PHYSICAL (cond code)</p>
    <p>ROB Size: IWINDOW_ROB_SIZE</p>
    <p>Scheduling Window Size: IWINDOW_WIN_SIZE</p>
  </div>
  <div class="page">
    <p>Slide 72 http://www.cs.wisc.edu/gems</p>
    <p>Opal : Present and Future</p>
    <p>Implements Sparc instructions  Simulating additional Sparc instructions easy task  Porting to x86 substantial code rewrite</p>
    <p>Simulates timing of weaker memory consistency models  Add SC checks in Opal  Add write buffers for weaker models (like TSO)</p>
    <p>No functional simulation of I/O  Plug in disk simulator that interacts with Opal</p>
    <p>Not currently using MAI interface  Possible to replace Opal w/ MAI module that interacts with</p>
    <p>Ruby</p>
    <p>Aggressive micro-architectural techniques not modeled  Add support for trace caches, mem. dependence pred., etc</p>
  </div>
  <div class="page">
    <p>Slide 73 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation  Demo: Simulating a Multiple-CMP System with</p>
    <p>GEMS  Ruby: Memory system model  BREAK  Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one  Breakdown network stats  Example: Network contention with and without Opal  Simulation runtimes</p>
    <p>GEMS Source Code Tour and Extending Ruby  Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 74 http://www.cs.wisc.edu/gems</p>
    <p>Breaking Down Ruby Stats Files</p>
    <p>Ruby system config print  Values of all ruby config parameters</p>
    <p>Overall runtime  Target and host machine runtimes, IPC, etc.</p>
    <p>Cache profiling: L1I, L1D, L2etc.</p>
    <p>Structure occupancy  Demand for cache ports, transaction buffers</p>
    <p>Latency breakdown</p>
    <p>Request vs. system state (optional)</p>
    <p>Message delay cycles (optional)</p>
    <p>Network stats  Link and switch utilization</p>
    <p>CC event / transition counts</p>
    <p>&lt;system_config&gt;.stats Ruby config</p>
    <p>Overall runtime</p>
    <p>Cache profiling</p>
    <p>Demo</p>
    <p>Structure occupancy</p>
    <p>Latency breakdown</p>
    <p>Request vs. system state</p>
    <p>Message delay cycles</p>
    <p>Network stats</p>
    <p>Event / transition</p>
    <p>counts</p>
  </div>
  <div class="page">
    <p>Slide 75 http://www.cs.wisc.edu/gems</p>
    <p>Two GEMS are Better than One</p>
    <p>Network behavior with and without Opal  8 processor CMP  SPLASH benchmark: ocean  8 byte-wide links between CPUs &amp; L2 cache banks  Two runs using a customized network</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 76 http://www.cs.wisc.edu/gems</p>
    <p>Two GEMS are Better than One</p>
    <p>Ruby Only</p>
    <p>Demo</p>
    <p>Message Delayed Cycles ---------------------</p>
    <p>Total_delay_cycles: [binsize: 16 max: 553 count: 22892759 average: 0.534205 | standard deviation: 4.18656 | 22855760 20077 1945 325 309 175 105 3935 7681 518 338 254 397 273 166 130 142 33 41 25 26 29 15 10 10 2 0 2 0 4 4 10 7 6 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]</p>
    <p>Network Stats ------------</p>
    <p>links_utilized_percent_switch_0_link_3: 4.38966 bw: 8000 base_latency: 1</p>
    <p>links_utilized_percent_switch_0_link_4: 4.36838 bw: 8000 base_latency: 1</p>
    <p>Ruby_cycles: 41361869</p>
  </div>
  <div class="page">
    <p>Slide 77 http://www.cs.wisc.edu/gems</p>
    <p>Two GEMS are Better than One</p>
    <p>Ruby &amp; Opal</p>
    <p>Demo</p>
    <p>Message Delayed Cycles ---------------------</p>
    <p>Total_delay_cycles: [binsize: 16 max: 703 count: 22893122 average: 1.35992 (0.534205) | standard deviation: 6.55126 | 22608266 220366 29575 9084 4686 3248 2009 1687 6018 1798 1143 828 625 516 384 272 271 288 398 319 299 228 203 161 92 51 41 26 12 9 30 39 48 43 25 20 3 0 0 1 0 2 4 4 0 0 0 0 0 0 ]</p>
    <p>Network Stats ------------</p>
    <p>links_utilized_percent_switch_0_link_3: 7.81863 (4.38966) bw: 8000 base_latency: 1</p>
    <p>links_utilized_percent_switch_0_link_4: 7.64388 (4.36838) bw: 8000 base_latency: 1</p>
    <p>Ruby_cycles: 72550169 (41361869)</p>
  </div>
  <div class="page">
    <p>Slide 78 http://www.cs.wisc.edu/gems</p>
    <p>Simulation Time Comparison</p>
    <p>Comparisons of Runtimes  Progressively add more simulation fidelity</p>
    <p>Simics only</p>
    <p>Simics + Ruby  Simics + Ruby + Opal</p>
    <p>Accuracy vs. simulation time tradeoff</p>
    <p>Target Machine  8 UltraSPARC iii processor SMP (1 GHz)  4 GBs of memory</p>
    <p>Host Machine  AMD Opteron uniprocessor (2.2 GHz)</p>
    <p>4 GBs of memory</p>
  </div>
  <div class="page">
    <p>Slide 79 http://www.cs.wisc.edu/gems</p>
    <p>Simulation Slowdown</p>
    <p>Time Slowdown Slowdown / CPU</p>
    <p>Target 20 ms 1 1</p>
    <p>Simics 1 minute 3000 x 380 x</p>
    <p>Simics + Ruby 15 minutes 45000 x 5600 x</p>
    <p>Simics + Ruby + Opal 45 minutes 140000 x 17000 x</p>
    <p>CAVEAT: These performance numbers may not reflect the optimal configuration of Virtutech Simics. For example, running Simics in fast mode (or emulation-only mode) can reduce the slowdown (per CPU) of Simics, compared to real hardware, to less than 10x</p>
  </div>
  <div class="page">
    <p>Slide 80 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation  Demo: Simulating a Multiple-CMP System with</p>
    <p>GEMS  Ruby: Memory system model  BREAK  Opal: Out-of-order processor model  Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  GEMS software structure  Directory Tour  Demo: Extending Ruby and a CMP Protocol</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>http://www.cs.wisc.edu/gems</p>
    <p>GEMS Software Structure</p>
    <p>System</p>
    <p>DriverChip ProfilerNetwork common/Driver.h</p>
    <p>Internal Drivers</p>
    <p>Simics Interface</p>
    <p>Opal Interface</p>
    <p>generated/&lt;protocol&gt;/Chip.h</p>
    <p>profiler/Profiler.hnetwork/simple</p>
    <p>Deterministic Tester</p>
    <p>Contended Locks</p>
    <p>Random Tester</p>
    <p>tester/DeterministicDriver.h</p>
    <p>tester/SyntheticDriver.h</p>
    <p>Topology tester/Tester.h</p>
    <p>interface/OpalInterface.h</p>
    <p>simics/SimicsInterface.h</p>
    <p>network/simple/Topology.h</p>
    <p>Multiple Instantiations</p>
    <p>One Instantiation</p>
  </div>
  <div class="page">
    <p>http://www.cs.wisc.edu/gems</p>
    <p>Ruby Software Structure</p>
    <p>Chip</p>
    <p>Directory Sequencer</p>
    <p>Caches</p>
    <p>Cache Controllers</p>
    <p>Cache Line</p>
    <p>Directory State</p>
    <p>system/DirectoryMemory.hsystem/CacheMemory.h</p>
    <p>Directory Controller</p>
    <p>SLICC</p>
    <p>system/Sequencer.h</p>
    <p>Network Ports</p>
    <p>buffer/MessageBuffer.h</p>
    <p>generated/&lt;protocol&gt;/Chip.h SLICC</p>
    <p>generated/&lt;protocol&gt;/L1Cache_Controller.hgenerated/&lt;protocol&gt;/Directory_Controller.h generated/&lt;protocol&gt;/L2Cache_Controller.h</p>
    <p>Ruby</p>
    <p>Ruby</p>
    <p>generated/&lt;protocol&gt;/L1Cache_Entry.h</p>
    <p>generated/&lt;protocol&gt;/Directory_Entry.h</p>
  </div>
  <div class="page">
    <p>Slide 83 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation  Demo: Simulating a Multiple-CMP System with</p>
    <p>GEMS  Ruby: Memory system model  BREAK  Opal: Out-of-order processor model  Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  GEMS software structure  Directory Tour  Demo: Extending Ruby and a CMP Protocol</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 84 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: Top-Level</p>
    <p>Top-Level Directory</p>
    <p>ruby opal slicc protocols</p>
    <p>common gen-scripts scripts</p>
    <p>LICENSE KNOWN_ISSUESREADME</p>
    <p>microbenchmarks</p>
    <p>Memory System Components</p>
    <p>Processor Components</p>
    <p>Generator Code</p>
    <p>Protocol Specification Files</p>
    <p>Common GEMS C++ code</p>
    <p>Generated Simics Interface Scripts</p>
    <p>results Simulation Output</p>
    <p>Separate Microbenchmark Executables</p>
    <p>Common GEMS scripts</p>
  </div>
  <div class="page">
    <p>Slide 85 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: ruby</p>
    <p>ruby buffers common config</p>
    <p>MessageBuffer between consumers</p>
    <p>Ruby config files for Module and tester</p>
    <p>Common Ruby C++ structs</p>
    <p>eventqueue interfaces module network Global eventqueue</p>
    <p>Ruby  Opal &amp; Simics</p>
    <p>Simple network codeThe ruby simics module</p>
    <p>profiler recorder simics slicc_interface Profiling code cache and trace</p>
    <p>recorders Abstract classes interface with different protocols</p>
    <p>Simics  Ruby</p>
    <p>system tester platform generated Physical memory components</p>
    <p>Random tester &amp; ubenchmarks</p>
    <p>SLICC generated C++ files</p>
    <p>Object files &amp; executables</p>
    <p>html Protocol tables</p>
    <p>Example trace file</p>
    <p>Ruby debug flag infoRuby initializer &amp; destroyer</p>
    <p>ruby.trace.gz init.h/.C README.debugging</p>
    <p>Makefile</p>
  </div>
  <div class="page">
    <p>Slide 86 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: ruby/system</p>
    <p>ruby/system</p>
    <p>memory data structure</p>
    <p>object that identifies a unique chip or machine instatiation</p>
    <p>object that uniquely identifies all ruby machines</p>
    <p>specific to token protocol a fully associative,</p>
    <p>unbounded cache memory template</p>
    <p>specific to token protocol</p>
    <p>specific to token protocol</p>
    <p>manages memory requests between the driver and L1 cache controller</p>
    <p>used to simulate TSO-like timing</p>
    <p>top-level object of the ruby memory system, all ruby objects can be accessed via the g_system_ptr</p>
    <p>used to simulate TSO-like timing</p>
    <p>transaction buffer entry table used by cache controllers for transient requests</p>
    <p>specific to token protocol</p>
    <p>CacheMemory.h DirectoryMemory.h/C MachineID.h NodeID.h</p>
    <p>NodePresistentTable.h/C</p>
    <p>PerfrectCacheMemory.h PresistentArbiter.h/C PersistentTable.h/C</p>
    <p>Sequencer.h/C StoreBuffer.h/C StoreCache.h/C System.h/C</p>
    <p>TBETable.h/C TimerTable.h</p>
    <p>cache template data structure</p>
  </div>
  <div class="page">
    <p>Slide 87 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: ruby/slicc_interface</p>
    <p>ruby/slicc_interface</p>
    <p>ruby abstract class for the protocol specific chip object</p>
    <p>parent class of all messages messages communicated between consumers via MessageBuffers</p>
    <p>contains booleans to define protocol characteristics to ruby</p>
    <p>parent class of all network messages, each protocol implements unique network message objects to communicate between controllers</p>
    <p>All address manipulation to determine location and set mapping is here</p>
    <p>miscellaneous ruby functions used by the generated controllers</p>
    <p>interface between the generated protocol logic and the ruby profiler code</p>
    <p>wrapper for the RubySlicc interface files</p>
    <p>AbstractCacheEntry.h/C AbstractChip.h/C AbstractProtocol.h/C</p>
    <p>Message.h NetworkMessage.h RubySlicc_ComponentMapping.h</p>
    <p>RubySlicc_Profiler_interface.h/C RubySlicc_Util.h RubySlicc_includes.h</p>
    <p>ruby abstract class for the protocol specific cache entries</p>
  </div>
  <div class="page">
    <p>Slide 88 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: slicc</p>
    <p>slicc ast doc</p>
    <p>parser</p>
    <p>Abstract Syntax Tree code</p>
    <p>contains the lexer and parser that construct a protocols AST</p>
    <p>contains some old but useful documentation</p>
    <p>symbols contains SLICC objects created during the first pass of the AST, majority of code generated by these symbols</p>
    <p>generator file, html and MIF generator code</p>
    <p>platform generated generated lexer and parser files</p>
    <p>Object files &amp; executables</p>
    <p>main function of the SLICC executable</p>
    <p>defines typedef, namespaces, etc.</p>
    <p>main.h/C slicc_global.h</p>
    <p>Makefile</p>
    <p>README Summary of how SLICC works</p>
    <p>Makefile for the SLICC code generator executable</p>
  </div>
  <div class="page">
    <p>Slide 89 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: opal</p>
    <p>opal benchmark bypassing common</p>
    <p>Micro-architecture benchmarks</p>
    <p>Global Opal structsMisc. proc structs</p>
    <p>config design fetch module Module and tester config files</p>
    <p>Helpful informal design docs</p>
    <p>Code for Opal modulePredictors (branch,Trap,RAS)</p>
    <p>python regression sparc system Misc test and graphing scripts</p>
    <p>Golden results for tester</p>
    <p>Pipeline modelImplementationspecific defines</p>
    <p>tester trace platform generated Opal tester files Files for branch,</p>
    <p>memory traces Files for parsing config params</p>
    <p>Object files &amp; executables</p>
    <p>TODO Todo wish list Describes building</p>
    <p>&amp; running Opal Opal handling of mem. consistency</p>
    <p>README README.memory_consistency</p>
    <p>Makefile</p>
  </div>
  <div class="page">
    <p>Slide 90 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: opal/system (1)</p>
    <p>opal/system</p>
    <p>Register file interface</p>
    <p>Used to analyze mem dependencies</p>
    <p>Opals built-in cache structures</p>
    <p>Structs used in validation w/ Simics Type defines for</p>
    <p>config params Per opcode stats collector class</p>
    <p>Branch instr type class</p>
    <p>TLB implementation for stand-alone sims Code for execution</p>
    <p>of dynamic instrs Non-renamed register file interface</p>
    <p>Top-level class for all dynamic instrs</p>
    <p>CFG class Opal-Simics interface</p>
    <p>actor.[C h] arf.[C h] cache.[C h] chain.[C h]</p>
    <p>checkresult.h config.include controlop.[C h] decode.[C h]</p>
    <p>dtlb.[C h] dx.[C h i] dynamic.[C h] fatarf.[C h]</p>
    <p>fow.[C h] hfa.C</p>
    <p>General micro-arch. structure class</p>
    <p>hfa_init.h histogram.[C h]</p>
    <p>Opal-Simics interface externs</p>
    <p>Histogram stats class</p>
  </div>
  <div class="page">
    <p>Slide 91 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: opal/system (2)</p>
    <p>opal/system</p>
    <p>Instruction page cache class</p>
    <p>Code to execute CFG instructions</p>
    <p>RUU-like struct for storing/tracking instrs</p>
    <p>Stats on locks in system LSQ structure Memory addr stats</p>
    <p>class Memory instr class</p>
    <p>Simlink to Opal-Ruby interface MSHR structure</p>
    <p>(used in Opal cache hierarchy only)</p>
    <p>Single waiter object for pipepool</p>
    <p>Wait-list object . Used to model MSHR when running w/ Ruby</p>
    <p>Top-level proc sequencer</p>
    <p>Functions used for API calls to Simics</p>
    <p>ipage.[C h] ipagemap.[C h] iwindow.[C h] ix.[C h]</p>
    <p>lockstat.[C h] lsq.[C h] memop.[C h] memstat.[C h]</p>
    <p>mf_api.h mshr.[C h] pipepool.[C h] pipestate.[C h]</p>
    <p>pseq.[C h] pstate.[C h]</p>
    <p>Instruction page class</p>
    <p>ptrace.[C h] regbox.[C h]</p>
    <p>Used for analyzing memory traces</p>
    <p>Contains interface ptrs to registers.</p>
  </div>
  <div class="page">
    <p>Slide 92 http://www.cs.wisc.edu/gems</p>
    <p>Map of Directories: opal/system (3)</p>
    <p>opal/system</p>
    <p>Rename map structure</p>
    <p>Global event queueHandles all Opal Ruby memory transactions</p>
    <p>Dummy Simics functions for tester Several includes Decoded instr classStats class for</p>
    <p>static insts</p>
    <p>Timer class, used to collect time stats Stats class for</p>
    <p>dynamic insts Stats class for tracking per-thread stats</p>
    <p>Top-level class for manipulating sim</p>
    <p>Wait-list object for dynamic insts</p>
    <p>regfile.[C h] regmap.[C h] rubycache.[C h] scheduler.[C h]</p>
    <p>simdist12.C sparx.C sstat.[C h] statici.[C h]</p>
    <p>stopwatch.[C h] sysstat.[C h] system.[C h] threadstat.[C h]</p>
    <p>wait.[C h]</p>
    <p>Models the register file itself</p>
  </div>
  <div class="page">
    <p>Slide 93 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation  Demo: Simulating a Multiple-CMP System with</p>
    <p>GEMS  Ruby: Memory system model  BREAK  Opal: Out-of-order processor model  Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby  GEMS software structure  Directory Tour  Demo: Extending Ruby and a CMP Protocol</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 94 http://www.cs.wisc.edu/gems</p>
    <p>Extending Ruby</p>
    <p>Goal:  Add new functionality to Ruby and interface to SLICC</p>
    <p>DemoPrefetcher  Simple, L2-&gt;memory next-line prefetcher</p>
    <p>Module implemented as C++ object (DemoPrefetcher.C)</p>
    <p>New type added to SLICC  Observes L1 GETS requests via function call</p>
    <p>Triggers event for prefetch in next cycle  Object is connected to an in_port</p>
    <p>Not the only way (or the right way) of implementing a prefetcher</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 95 http://www.cs.wisc.edu/gems</p>
    <p>Implementing DemoPrefetcher</p>
    <p>Creating an object that can wakeup a controller</p>
    <p>DemoPrefetcher.h</p>
    <p>class DemoPrefetcher { public:</p>
    <p>// An object in a SLICC controller will be passed a Chip* DemoPrefetcher(Chip* chip_ptr);</p>
    <p>// Allow an in_port to be attached void setConsumer(Consumer* consumer_ptr) { m_consumer_ptr =</p>
    <p>consumer_ptr; }</p>
    <p>// When wakeup() is called, ensure it should do something bool isReady() const;</p>
    <p>// functions to implement simple next-line prefetching const Address&amp; popNextPrefetch(); const Address&amp; peekNextPrefetch() const; void cancelNextPrefetch(); void observeL1Request(const Address&amp; address);</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 96 http://www.cs.wisc.edu/gems</p>
    <p>Implementing DemoPrefetcher</p>
    <p>DemoPrefetcher.C</p>
    <p>void DemoPrefetcher::observeL1Request(const Address&amp; address) { // next-line prefetch address Address prefetch_addr = address; prefetch_addr.makeNextStrideAddress(1);</p>
    <p>// add to prefetch queue m_prefetch_queue.push( prefetch_addr );</p>
    <p>// when to wakeup-- choose 1 cycles later Time ready_time = g_eventQueue_ptr-&gt;getTime() + 1;</p>
    <p>// schedule a wakeup() so that the L2 controller can trigger g_eventQueue_ptr-&gt;scheduleEventAbsolute(m_consumer_ptr,</p>
    <p>ready_time);</p>
    <p>}</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 97 http://www.cs.wisc.edu/gems</p>
    <p>Interfacing DemoPrefetcher to SLICC</p>
    <p>external_type(DemoPrefetcher, inport=&quot;yes&quot;) { bool isReady(); Address popNextPrefetch(); void cancelNextPrefetch(); Address peekNextPrefetch(); void observeL1Request(Address); } DemoPrefetcher prefetcher;</p>
    <p>// wakeup logic in_port(prefetcher_in, Null, prefetcher) { if (prefetcher_in.isReady() ) { if (L2cacheMemory.cacheAvail(prefetcher.peekNextPrefetch()) ||</p>
    <p>L2cacheMemory.isTagPresent(prefetcher.peekNextPrefetch())) { if ( getState(prefetcher.peekNextPrefetch()) == State:I ||</p>
    <p>getState(prefetcher.peekNextPrefetch()) == State:NP ) { trigger(Event:Prefetch, prefetcher.popNextPrefetch()); } else { // tag is already present in a non-invalid state prefetcher.cancelNextPrefetch(); } } else { trigger(Event:L2_Replacement,</p>
    <p>L2cacheMemory.cacheProbe(prefetcher.peekNextPrefetch())); } } }</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 98 http://www.cs.wisc.edu/gems</p>
    <p>Implementing DemoPrefetcher</p>
    <p>Nice property of TokenCMP: no tracking of prefetch  A tag is allocated and a request issued to memory  keeps received tokens/data if tag allocated</p>
    <p>MOESI_CMP_tokenDEMO-L2cache.sm</p>
    <p>transition(NP, Prefetch, I) { vv_allocateL2CacheBlock;</p>
    <p>a_issuePrefetch;</p>
    <p>}</p>
    <p>transition(I, Prefetch) {</p>
    <p>a_issuePrefetch;</p>
    <p>}</p>
    <p>transition({S,O,M,I_L,S_L}, Prefetch) {</p>
    <p>// do nothing</p>
    <p>}</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Slide 99 http://www.cs.wisc.edu/gems</p>
    <p>Outline</p>
    <p>Introduction and Motivation</p>
    <p>Demo: Simulating a Multiple-CMP System with GEMS</p>
    <p>Ruby: Memory system model</p>
    <p>BREAK</p>
    <p>Opal: Out-of-order processor model</p>
    <p>Demo: Two gems are better than one</p>
    <p>GEMS Source Code Tour and Extending Ruby</p>
    <p>Building Workloads</p>
  </div>
  <div class="page">
    <p>Slide 100 http://www.cs.wisc.edu/gems</p>
    <p>Workloads for Simics/GEMS</p>
    <p>Unfortunately, we cannot release our workloads (legal reasons)</p>
    <p>Steps for Workload Development  Simple Example: Barnes-Hut</p>
    <p>What about more complex applications?</p>
    <p>Workload Simulation Methodology  Simulating transactions/requests</p>
    <p>Coping with workload variability</p>
  </div>
  <div class="page">
    <p>Slide 101 http://www.cs.wisc.edu/gems</p>
    <p>Workload Setup</p>
    <p>Simple Example: Barnes-Hut (Splash2 suite)  Commands not to be taken literally! (might be different in</p>
    <p>different versions)</p>
    <p>Main Steps:  Build OS checkpoint  Copy application source or binary to simulation</p>
    <p>Create initial (cold) application checkpoint in Simics</p>
    <p>Create warm application checkpoint with Simics/Ruby</p>
  </div>
  <div class="page">
    <p>Slide 102 http://www.cs.wisc.edu/gems</p>
    <p>Build OS Checkpoint</p>
    <p>Use Simics to boot your OS and get a checkpoint (assuming 16 processor serengeti target machine)  cd simics/home/sarek  ./simics x sarek-16p.simics</p>
    <p>Script loads configuration and boots Solaris  Scripts should be provided with your Simics distribution</p>
    <p>assuming you have Solaris license (contact Virtutech Simics Forum)</p>
    <p>Modify scripts to fit your target configuration (e.g., memory, disk, network)</p>
    <p>At the end of your script, take a system snapshot (checkpoint):</p>
    <p>simics&gt; write-configuration CHKPT_DIR/sarek-16p.check</p>
    <p>simics&gt; quit</p>
    <p>Use this checkpoint to build all your workloads 16 processor checkpoints</p>
  </div>
  <div class="page">
    <p>Slide 103 http://www.cs.wisc.edu/gems</p>
    <p>Copy Barnes Source or Binary</p>
    <p>Develop benchmark on real machine (if available)  Use Simics magic instructions after initialization</p>
    <p>See Simics reference manual for magic instruction use</p>
    <p>Compile benchmark with such instructions before running in Simics</p>
    <p>Load from your OS checkpoint  ./simics</p>
    <p>simics&gt; read-configuration CHKPT_DIR/sarek-16p.check</p>
    <p>simics&gt; magic-break-enable</p>
    <p>Copy binary into simulated machine (or copy source and compile)  Console commands:</p>
    <p>mount /host</p>
    <p>cp r /host/workloads/splash2/codes/apps/barnes/BARNES .</p>
    <p>See Simics reference manual on the use of the /host filesystem</p>
  </div>
  <div class="page">
    <p>Slide 104 http://www.cs.wisc.edu/gems</p>
    <p>Obtain Initial Barnes Checkpoint</p>
    <p>Warm up application in Simics  Console Commands:</p>
    <p>./BARNES &lt; input-warm</p>
    <p>input_warm specifies Barnes parameters</p>
    <p>./BARNES &lt; input-warm  Use this second run to warm up cache (see next slide)</p>
    <p>./BARNES &lt; input-run &gt; output; magic_call break</p>
    <p>After initial run, write checkpoint simics&gt; write-configuration CHKPT_DIR/barnes-cold16p.check</p>
    <p>simics&gt; quit</p>
    <p>Checkpoint is ready for GEMS run</p>
  </div>
  <div class="page">
    <p>Slide 105 http://www.cs.wisc.edu/gems</p>
    <p>Obtain Warm Barnes Checkpoint</p>
    <p>Load initial checkpoint  setenv CHECKPOINT_AT_END yes  setenv TRANSACTIONS 1  setenv PROCESSORS 16  setenv CHECKPOINT CHKPT_DIR/barnes-cold-16p.check  ./simics -no-win -x GEMS_ROOT/gen-scripts/go.simics</p>
    <p>Script (provided in release) should load ruby and run till the end of the warmup run  Also writes checkpoint at the end</p>
    <p>Edit checkpoint to remove ruby object</p>
    <p>Modify script to suit your needs</p>
  </div>
  <div class="page">
    <p>Slide 106 http://www.cs.wisc.edu/gems</p>
    <p>What About More Complex Applications?</p>
    <p>Setup on real hardware  Tune workload, OS parameters</p>
    <p>Scale-down for PC memory limits</p>
    <p>Re-tune</p>
    <p>For details, [Alameldeen et al., IEEE Computer, Feb03]</p>
    <p>What if we dont have access to real hardware?  Install applications and setup in Simics  Checkpoint often</p>
    <p>Not optimal for large scale applications!</p>
  </div>
  <div class="page">
    <p>Slide 107 http://www.cs.wisc.edu/gems</p>
    <p>Simulating Transactions/Requests</p>
    <p>Throughput-based applications  Work-based unit to compare configurations</p>
    <p>IPC not always meaningful</p>
    <p>Counting Transactions during Simulation  Enable magic breaks in Simics</p>
    <p>Benchmark traps to Simics on every magic instruction</p>
    <p>Count magic breaks until we reach required number of transactions</p>
    <p>Cope with benchmark variability</p>
  </div>
  <div class="page">
    <p>Slide 108 http://www.cs.wisc.edu/gems</p>
    <p>Why Consider Variability?</p>
    <p>OLTP</p>
  </div>
  <div class="page">
    <p>Slide 109 http://www.cs.wisc.edu/gems</p>
    <p>Workload Variability</p>
    <p>How can slower memory lead to faster workload?</p>
    <p>Answer: Multithreaded workload takes different paths  Different lock race outcomes</p>
    <p>Different scheduling decisions  Runs from same initial conditions can be different</p>
    <p>This can lead to wrong conclusions for deterministic simulations</p>
    <p>Solution with deterministic simulation  Add pseudo-random delay on memory accesses</p>
    <p>(MEMORY_LATENCY)  Simulate base (and enhanced) system multiple times</p>
    <p>Use simple or complex statistics [Alameldeen and Wood, HPCA 2003]</p>
  </div>
  <div class="page">
    <p>Slide 110 http://www.cs.wisc.edu/gems</p>
    <p>The End</p>
    <p>Download and Subscribe to Mailing Lists</p>
    <p>http://www.cs.wisc.edu/gems</p>
    <p>We encourage your contributions  Workloads</p>
    <p>Additional timing fidelity</p>
  </div>
  <div class="page">
    <p>Slide 111 http://www.cs.wisc.edu/gems</p>
    <p>Additional Opal Slides</p>
  </div>
  <div class="page">
    <p>Slide 112 http://www.cs.wisc.edu/gems</p>
    <p>Sensitivity Analysis</p>
    <p>return</p>
  </div>
  <div class="page">
    <p>Slide 113 http://www.cs.wisc.edu/gems</p>
    <p>Sensitivity Results</p>
    <p>return</p>
  </div>
  <div class="page">
    <p>Slide 114 http://www.cs.wisc.edu/gems</p>
    <p>Opal and Memory Consistency</p>
    <p>Designed to be aggressive OoO processor</p>
    <p>Our use of Simics is sequentially consistent execution</p>
    <p>Models the performance of weaker models (such as TSO) for only SC memory interleavings</p>
    <p>Violations of SC in Opal:  Identical MSHR entry for memory requests with same addr</p>
    <p>Executes Ld/St out of program order</p>
    <p>No snooping of LSQ for external stores</p>
    <p>Return</p>
  </div>
  <div class="page">
    <p>Slide 115 http://www.cs.wisc.edu/gems</p>
    <p>Implemented UltraSparc Instructions (1) add addc addcc addccc alignaddr alignaddrl and andcc andn andncc ba bcc bcs be bg bge bgu bl ble bleu bmask bn bne bneg bpa bpcc bpcs</p>
    <p>bpe bpg bpge bpgu bpl bple bpleu bpn bpne bpneg bpos bppos bpvc bpvs brgez brgz brlez brlz brnz brz bshuffle bvc bvs call casa casxa cmp done retry fabsd fabsq fabss</p>
    <p>faddd faddq fadds falignda ta fba fbe fbg fbge fbl fble fblg fbn fbne fbo fbpa fbpe fbpg fbpge fbpl fbple fbplg fbpn fbpne fbpo fbpu fbpue fbpug fbpuge fbpul fbpule fbu fbue fbug</p>
    <p>fbuge fbul fbule fcmpd fcmped fcmpeq fcmpeq16 fcmpeq32 fcmpes fcmpgt16 fcmpgt32 fcmple16 fcmple32 fcmpne16 fcmpne32 fcmpq fcmps fdivd fdivq fdivs fdmulq fdtoi fdtoq fdtos fdtox fitod fitoq fitos flush flushw fmovd fmovda fmovdcc fmovdcs fmovde</p>
    <p>fmovdg fmovdge fmovdgu fmovdl fmovdle fmovdleu fmovdn fmovdne fmovdneg fmovdpos fmovdvc fmovdvs fmovfda fmovfde fmovfdg fmovfdge fmovfdl fmovfdle fmovfdlg fmovfdn fmovfdne fmovfdo fmovfdu fmovfdue fmovfdug fmovfduge fmovfdul fmovfdule fmovfqa fmovfqe fmovfqg fmovfqge fmovfql fmovfqle</p>
    <p>fmovfqlg fmovfqn fmovfqne fmovfqo fmovfqu fmovfque fmovfqug fmovfquge fmovfqul fmovfqule fmovfsa fmovfse fmovfsg fmovfsge fmovfsl fmovfsle fmovfslg fmovfsn fmovfsne fmovfso fmovfsu fmovfsue fmovfsug fmovfsuge fmovfsul fmovfsule fmovq fmovqa fmovqcc fmovqcs fmovqe fmovqg fmovqge fmovqgu</p>
    <p>fmovql fmovqle fmovqleu fmovqn fmovqne fmovqneg fmovqpos fmovqvc fmovqvs fmovrdgez fmovrdgz fmovrdlez fmovrdlz fmovrdnz fmovrdz fmovrqgez fmovrqgz fmovrqlez fmovrqlz fmovrqnz fmovrqz fmovrsgez fmovrsgz fmovrslez fmovrslz fmovrsnz fmovrsz fmovs fmovsa fmovscc fmovscs fmovse fmovsg fmovsge</p>
    <p>fmovsgu fmovsl fmovsle fmovsleu fmovsn fmovsne fmovsneg fmovspos fmovsvc fmovsvs fmuld fmulq fmuls fnegd fnegq fnegs fqtod fqtoi fqtos fqtox fsmuld fsqrtd fsqrtq fsqrts fsrc1 fstod fstoi fstoq fstox fsubd fsubq fsubs fxtod fxtoq</p>
  </div>
  <div class="page">
    <p>Slide 116 http://www.cs.wisc.edu/gems</p>
    <p>Implemented UltraSparc Instructions (2)</p>
    <p>fxtos fzero fzeros ill impdep1 impdep2 jmp jmpl ldblk ldd ldda lddf lddfa ldf ldfa ldfsr ldqa ldqf ldqfa ldsb ldsba ldsh ldsha ldstub ldstuba ldsw ldswa ldub lduba lduh lduha lduw lduwa ldx</p>
    <p>ldxa ldxfsr membar mov mova movcc movcs move movfa movfe movfg movfge movfl movfle movflg movfn movfne movfo movfu movfue movfug movfuge movful movfule movg movge movgu movl movle movleu movn movne movneg movpos</p>
    <p>movrgez movrgz movrlez movrlz movrnz movrz movvc movvs mulscc mulx nop not or orcc orn orncc popc prefetch prefetcha rd rdcc rdpr restore restored retrn save saved sdiv sdivcc sdivx sethi sll sllx smul</p>
    <p>smulcc sra srax srl srlx stb stba stbar stblk std stda stdf stdfa stf stfa stfsr sth stha stqf stqfa stw stwa stx stxa stxfsr sub subc subcc subccc swap swapa ta taddcc taddcctv</p>
    <p>tcc tcs te tg tge tgu tl tle tleu tn tne tneg tpos trap tsubcc tsubcctv tvc tvs udiv udivcc udivx umul umulcc wr wrcc wrpr xnor xnorcc xor xorcc</p>
    <p>return</p>
  </div>
  <div class="page">
    <p>Slide 117 http://www.cs.wisc.edu/gems</p>
    <p>TLB Misses</p>
    <p>ITLB Misses  emit special NOP instruction: STATIC_INSTR_MOP; stall</p>
    <p>fetch</p>
    <p>does NOT update PC, NPC</p>
    <p>fetch resumes whenever any instr (including special NOP) squashes</p>
    <p>DTLB Misses  Set DTLB miss trap for instruction (setTrapType()) in</p>
    <p>Execute()</p>
    <p>In retireInstruction(), retrieve trap and call takeTrap() to set trap state for DTLB handler</p>
    <p>refetch from DTLB handler</p>
  </div>
  <div class="page">
    <p>Slide 118 http://www.cs.wisc.edu/gems</p>
    <p>Example: Load instruction</p>
    <p>In dynamic_t::Schedule(), load waits until all operands ready (WAIT_XX_STAGE cases)</p>
    <p>Scheduler gets invoked when all operands ready</p>
    <p>Load waits until read port to L1 is available</p>
    <p>Load_inst_t::Execute() gets called  Generates virtual address</p>
    <p>Performs D-TLB address translation</p>
    <p>Inserts entry in LSQ</p>
    <p>Initiates cache access (via Ruby or Opals built-in simple cache hierarchy)</p>
    <p>If cache miss -&gt; put on wait list (CACHE_MISS_STAGE) and is woken up by rubycache_t::complete()</p>
    <p>Invokes Simics to read actual memory value in load_inst_t::Complete()</p>
    <p>Retirement check of load value &amp; squash if value deviates from Simics</p>
  </div>
  <div class="page">
    <p>Slide 119 http://www.cs.wisc.edu/gems</p>
    <p>Modifying Opal-Ruby Interface</p>
    <p>Ruby-&gt;Opal interface defined in mf_opal_api object (ruby/interfaces/mf_api.h)</p>
    <p>Opal-&gt;Ruby interface defined in mf_ruby_api object  To create new Ruby-&gt;Opal callback (ex: hitCallback())</p>
    <p>Define function in ruby/interfaces/OpalInterface.C  Add new function pointer to mf_opal_api object</p>
    <p>Create a new function handler in opal/system/system.C and assign m_opal_api objects new function pointer to this function handler</p>
    <p>To create new Opal-&gt;Ruby callback (ex: makeRequest())  Define function in ruby/interfaces/OpalInterface.C  Add new function pointer to mf_ruby_api object</p>
    <p>Assign function pointer to new function in OpalInterface::installInterface()</p>
  </div>
</Presentation>
