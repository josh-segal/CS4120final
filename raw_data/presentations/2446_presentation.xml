<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CiAO: An Aspect-Oriented OS Family for Resource-Constrained Embedded Systems</p>
    <p>Daniel Lohmann Wanja Hofer Wolfgang Schrder-Preikschat</p>
    <p>Friedrich-Alexander University Erlangen-Nuremberg</p>
    <p>Jochen Streicher Olaf Spinczyk</p>
    <p>Technical University Dortmund</p>
    <p>CiAO is aspect-oriented</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 2 2</p>
    <p>Motivation: Embedded Systems</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 3 3</p>
    <p>Motivation: Embedded Systems</p>
    <p>Goal: Reuse</p>
    <p>Scalability, Configurability, Tailorability</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 4 4</p>
    <p>Motivation: Configurability of eCos</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 5 5</p>
    <p>Motivation: Configurability of eCos</p>
    <p>Kernel policies: Synchronization Instrumentation Tracing</p>
    <p>PROTOCOL</p>
    <p>CEILING</p>
    <p>INHERIT</p>
    <p>DYNAMIC</p>
    <p>Mutex options:</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 6 6</p>
    <p>Motivation: Configurability of eCos</p>
    <p>Kernel policies: Synchronization Instrumentation Tracing</p>
    <p>PROTOCOL</p>
    <p>CEILING</p>
    <p>INHERIT</p>
    <p>DYNAMIC</p>
    <p>Mutex options:</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 7 7</p>
    <p>Motivation: Configurability of eCos</p>
    <p>Kernel policies: Synchronization Instrumentation Tracing</p>
    <p>PROTOCOL</p>
    <p>CEILING</p>
    <p>INHERIT</p>
    <p>DYNAMIC</p>
    <p>Mutex options:</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 8 8</p>
    <p>Motivation: Configurability of eCos</p>
    <p>Base implementation:</p>
    <p>Cyg_Mutex::Cyg_Mutex() { locked = false; owner = NULL; }</p>
    <p>Cross-cutting concerns:</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 11 11</p>
    <p>Motivation: Configurability of OS</p>
    <p>Difficult to understand, maintain, evolve  Lack of encapsulation in the implementation  Tangling of many concerns in one implementation unit  Scattering across several implementation units</p>
    <p>#ifdef hell</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 12 12</p>
    <p>Talk Outline  Cross-cutting in Configurable System Software</p>
    <p>Aspect-Oriented Programming (AOP) to the Rescue?</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Evaluation: Suitability for Embedded Systems</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 13 13</p>
    <p>Talk Outline  Cross-cutting in Configurable System Software</p>
    <p>Aspect-Oriented Programming (AOP) to the Rescue?</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Evaluation: Suitability for Embedded Systems</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 14 14</p>
    <p>AOP to the Rescue?  AOP aids modularization of cross-cutting concerns</p>
    <p>badly modularized</p>
    <p>well modularized concern</p>
    <p>without AOP</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 15 15</p>
    <p>AOP to the Rescue?  AOP aids modularization of cross-cutting concerns  It does so by means of aspects</p>
    <p>badly modularized</p>
    <p>well modularized concern</p>
    <p>without AOP with AOP</p>
    <p>aspect</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 16 16</p>
    <p>AOP  Short Introduction</p>
    <p>Encapsulation of (cross-cutting) concerns in aspects</p>
    <p>aspect</p>
    <p>components</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 17 17</p>
    <p>AOP  Short Introduction</p>
    <p>Encapsulation of (cross-cutting) concerns in aspects</p>
    <p>Aspects give advice to join points in the target system</p>
    <p>aspect</p>
    <p>components</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 18 18</p>
    <p>AOP  Short Introduction</p>
    <p>Encapsulation of (cross-cutting) concerns in aspects</p>
    <p>Aspects give advice to join points in the target system</p>
    <p>Set of join points described by a pointcut expression aspect</p>
    <p>components</p>
    <p>pointcut</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 19 19</p>
    <p>AOP  Short Introduction</p>
    <p>Encapsulation of (cross-cutting) concerns in aspects</p>
    <p>Aspects give advice to join points in the target system</p>
    <p>Set of join points described by a pointcut expression aspect</p>
    <p>components</p>
    <p>pointcut</p>
    <p>Obliviousness &amp;</p>
    <p>Quantification</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 20 20</p>
    <p>AOP  AspectC++</p>
    <p>Extension to C++</p>
    <p>Source-to-source weaver</p>
    <p>http://www.aspectc.org</p>
    <p>C++ Sources AspectC++ Sources</p>
    <p>ac++</p>
    <p>Woven C++ Code</p>
    <p>c++</p>
    <p>Binary Program</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 21 21</p>
    <p>AOP  Why Can It Help?</p>
    <p>Inversion of callercallee binding:</p>
    <p>// traditional implementation</p>
    <p>void dingus() {</p>
    <p>// do basic stuff #ifdef OPT_FEATURE thingy(); #endif</p>
    <p>}</p>
    <p>void thingy() {</p>
    <p>// do optional stuff }</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 22 22</p>
    <p>AOP  Why Can It Help?</p>
    <p>Inversion of callercallee binding:</p>
    <p>// traditional implementation</p>
    <p>void dingus() {</p>
    <p>// do basic stuff #ifdef OPT_FEATURE thingy(); #endif</p>
    <p>}</p>
    <p>void thingy() {</p>
    <p>// do optional stuff }</p>
    <p>// AOP implementation</p>
    <p>void dingus() {</p>
    <p>// do basic stuff }</p>
    <p>advice execution(% dingus()) : after() {</p>
    <p>// do optional stuff }</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 23 23</p>
    <p>AOP  Why Can It Help?</p>
    <p>Quantification over multiple join points:</p>
    <p>// traditional implementation</p>
    <p>void dingus_foo() { #ifdef OPT_FEATURE thingy(); #endif</p>
    <p>}</p>
    <p>void dingus_bar() { #ifdef OPT_FEATURE thingy(); #endif</p>
    <p>}</p>
    <p>void thingy(){ // do optional stuff</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 24 24</p>
    <p>AOP  Why Can It Help?</p>
    <p>Quantification over multiple join points:</p>
    <p>// traditional implementation</p>
    <p>void dingus_foo() { #ifdef OPT_FEATURE thingy(); #endif</p>
    <p>}</p>
    <p>void dingus_bar() { #ifdef OPT_FEATURE thingy(); #endif</p>
    <p>}</p>
    <p>void thingy(){ // do optional stuff</p>
    <p>}</p>
    <p>// AOP implementation</p>
    <p>void dingus_foo() { }</p>
    <p>void dingus_bar() { }</p>
    <p>advice execution(% dingus%()) : after() {</p>
    <p>// do optional stuff }</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 25 25</p>
    <p>Talk Outline  Cross-cutting in Configurable System Software</p>
    <p>Aspect-Oriented Programming (AOP) to the Rescue?</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Evaluation: Suitability for Embedded Systems</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 26 26</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Goal of the CiAO project: Evaluate if AOP is suitable for the design of configurable embedded system software</p>
    <p>Can AOP help to avoid #ifdef hell?</p>
    <p>Is AOP efficient enough for the domain of embedded systems?</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 27 27</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Goal of the CiAO project: Evaluate if AOP is suitable for the design of configurable embedded system software</p>
    <p>Can AOP help to avoid #ifdef hell?</p>
    <p>Is AOP efficient enough for the domain of embedded systems?</p>
    <p>Yes, if the system is designed in an aspect-aware manner</p>
    <p>Obliviousness? No!</p>
    <p>Quantification? Yes!</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 28 28</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Idea of aspect awareness: Provide unambiguous and statically evaluable join points.</p>
    <p>Unambiguity: Important system state transitions can be captured by a pointcut expression.</p>
    <p>Static evaluation: Avoid necessity for dynamic pointcut functions, which bear an overhead.</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 31 31</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Result: Sparse base system designed with classes, most functionality provided by (optional) aspects</p>
    <p>Three main aspect purposes:  Extension aspects: add features  Policy aspects: glue components together  Upcall aspects: bind behavior to lower-level events</p>
    <p>Loose coupling Visible transitions</p>
    <p>Minimal extensions</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 32 32</p>
    <p>Extension Aspects</p>
    <p>Example: task scheduling</p>
    <p>// base implementation</p>
    <p>struct Task { Pri pri_; State state_;  };</p>
    <p>class Sched { Tasklist ready_; Task::Id running_; public: void activate(Task::Id t); void reschedule();  };</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 33 33</p>
    <p>Extension Aspects</p>
    <p>Example: task scheduling extended (resource control)</p>
    <p>// base implementation</p>
    <p>struct Task { Pri pri_; State state_;  };</p>
    <p>class Sched { Tasklist ready_; Task::Id running_; public: void activate(Task::Id t); void reschedule();  };</p>
    <p>aspect ResourceSupport {</p>
    <p>advice Task : slice struct { ResourceMask occupied_; Pri originalPri_; };</p>
    <p>advice Sched : slice class { public: void getRes(Res::Id r) { // lock mutex } void relRes(Res::Id r) { // unlock mutex } }; };</p>
    <p>ResourceSupport.ah</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 34 34</p>
    <p>Policy Aspects</p>
    <p>Example: specification of preemption points</p>
    <p>aspect FullPreemption {</p>
    <p>// points where another task may get a higher prio pointcut pcPreemptionPoints = % Sched::activate() || % Sched::setEvent() || % Sched::relRes();</p>
    <p>advice execution(pcPreemptionPoints()) : after() { tjp-&gt;that()-&gt;reschedule(); } };</p>
    <p>Preemption.ah</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 35 35</p>
    <p>Upcall Aspects</p>
    <p>Example: binding of an interrupt handler</p>
    <p>aspect TimerBinding {</p>
    <p>advice execution(% irq::Timer::handler()) : after() { // handle IRQ }</p>
    <p>};</p>
    <p>TimerBinding.ah</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 36 36</p>
    <p>Talk Outline  Cross-cutting in Configurable System Software</p>
    <p>Aspect-Oriented Programming (AOP) to the Rescue?</p>
    <p>CiAO: Aspect-Aware OS Design</p>
    <p>Evaluation: Suitability for Embedded Systems</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 37 37</p>
    <p>Evaluation</p>
    <p>Suitability of AOP for configurable systems  Increased modularization?  Scalability?</p>
    <p>Suitability of AOP for resource-constrained systems  Resource efficiency?  Scalability?</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 38 38</p>
    <p>Evaluation</p>
    <p>Suitability of AOP for configurable systems  Increased modularization?  Scalability?</p>
    <p>Suitability of AOP for resource-constrained systems  Resource efficiency?  Scalability?</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 39 39</p>
    <p>Evaluation</p>
    <p>Suitability of AOP for configurable systems  Increased modularization?  Scalability?</p>
    <p>Suitability of AOP for resource-constrained systems  Resource efficiency?  Scalability?</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 40 40</p>
    <p>Evaluation</p>
    <p>Suitability of AOP for configurable systems  Increased modularization?  Scalability?</p>
    <p>Suitability of AOP for resource-constrained systems  Resource efficiency?  Scalability?</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 41 41</p>
    <p>Evaluation</p>
    <p>Suitability of AOP for configurable systems  Increased modularization? Yes!  Scalability? Good!</p>
    <p>Suitability of AOP for resource-constrained systems  Resource efficiency? Good!  Scalability? Good!</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 42 42</p>
    <p>Evaluation: Issues</p>
    <p>Aspects for low-level code:  Transformations can break fragile join points (e.g., context switch)  Explicit join points with empty functions</p>
    <p>Aspectaspect interdependencies:  Order advice, if several aspects affect same join point</p>
    <p>Join-point traceability:  Visualization of join-point deltas between revisions  Further tool support needed (acdt.aspectc.org)</p>
    <p>Granularity:  Advices apply to procedures (i.e. calls), not statements</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 43 43</p>
    <p>Summary</p>
    <p>AOP is very well suited for the implementation of highly configurable system software, avoiding #ifdef hell</p>
    <p>With aspect-awareness design principles in mind, the increased modularization comes at no costs</p>
    <p>CiAO is the first aspect-oriented operating system</p>
  </div>
  <div class="page">
    <p>wosch@cs.fau.de - USENIX 2009 44 44</p>
    <p>Summary</p>
    <p>AOP is very well suited for the implementation of highly configurable system software, avoiding #ifdef hell</p>
    <p>With aspect-awareness design principles in mind, the increased modularization comes at no costs</p>
    <p>CiAO is the first aspect-oriented operating system</p>
    <p>Thanks for your attention!</p>
  </div>
</Presentation>
