<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DaVinci:</p>
    <p>Dynamically Adaptive Virtual Networks for a Customized Internet</p>
    <p>Jiayue He, Rui Zhang-Shen, Ying Li, Cheng-Yen Lee, Jennifer Rexford, and Mung Chiang</p>
    <p>Princeton University</p>
  </div>
  <div class="page">
    <p>Serving Diverse Applications</p>
    <p>One network does not fit all  Throughput-sensitive applications</p>
    <p>Prefer high-bandwidth paths  Keep queues occupied</p>
    <p>Delay-sensitive applications  Prefer low-propagation delay paths  Keep queues small</p>
    <p>An ISP can run multiple virtual networks  Customized routing and congestion control  Each VN maximizes its own notion of utility</p>
  </div>
  <div class="page">
    <p>Running Multiple Virtual Networks</p>
    <p>Multiple virtual networks share substrate node/link resources</p>
    <p>Substrate network</p>
    <p>Virtual Network 1</p>
    <p>Virtual Network 2</p>
  </div>
  <div class="page">
    <p>ISPs Problem</p>
    <p>How to allocate resources to maximize the aggregate performance of multiple applications with diverse requirements?</p>
  </div>
  <div class="page">
    <p>How to Allocate Bandwidth?</p>
    <p>Static partitioning  Simple, but can be inefficient  One virtual network could be congested</p>
    <p>while another is idle</p>
    <p>Dynamic partitioning based on demand</p>
    <p>Can be unstable</p>
    <p>Customization may result in worse performance</p>
  </div>
  <div class="page">
    <p>Desired Properties of the Solution</p>
    <p>System is stable  Aggregate utility of all VNs is maximized  Each VN independently runs distributed</p>
    <p>protocols to maximize its utility  The substrate links use simple local rules</p>
    <p>to adapt bandwidth allocation</p>
    <p>DaVinci: a resource allocation scheme derived using optimization theory</p>
  </div>
  <div class="page">
    <p>Optimization Decomposition</p>
    <p>Many network problems can be formulated as utility maximization problems  E.g., TCP:</p>
    <p>Optimization decomposition: technique for deriving a distributed protocol  Links calculate prices s (penalty for violating</p>
    <p>bandwidth constraint): packet loss or delay  Sources update rates x given prices: AIMD</p>
    <p>maximize U(x) = i ui(xi) subject to Rx  C</p>
    <p>happiness of user i, a function of flow rate</p>
    <p>routing matrix</p>
    <p>link bandwidths</p>
  </div>
  <div class="page">
    <p>The Master Optimization Problem: Maximizing aggregate utility</p>
    <p>Objective: maximize weighted sum of utilities  E.g., w1U1(x1,y1) + w2U2(x2,y2)  The weights reflect tradeoff between the</p>
    <p>VNs</p>
    <p>Constraint: allocated bandwidth to the VNs cannot exceed link bandwidth  E.g., yl1 + yl2  Cl , for all l</p>
  </div>
  <div class="page">
    <p>Primal Decomposition</p>
    <p>maximize w1U1(x1,y1) + w2U2(x2,y2) subject to y1 + y2  C variables x, y  0</p>
    <p>maximize U1(x1,y1) subject to R1x1  y1</p>
    <p>variables x1  0</p>
    <p>maximize U2(x2,y2) subject to R2x2  y2</p>
    <p>variables x2  0Bandwidth C reallocated between y1 and y2 periodically based on congestion prices of VNs</p>
  </div>
  <div class="page">
    <p>DaVinci Framework</p>
    <p>Each virtual network runs customized traffic management to optimize convex objective</p>
    <p>Each virtual link calculates congestion price</p>
    <p>Each substrate link enforces isolation with traffic shapers</p>
    <p>Sources update rates</p>
    <p>Periodically reallocates bandwidth</p>
  </div>
  <div class="page">
    <p>Theorem (Stability and Optimality)</p>
    <p>The bandwidth allocation algorithm together with per virtual network problem maximizes aggregate performance if</p>
    <p>The master problem is convex  Bandwidth adjustment stepsize diminishes  The bandwidth shares are updated when</p>
    <p>each VN has converged</p>
    <p>Proof technique: primal decomposition and gradient update</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Two traffic classes:  Delay-sensitive traffic (DST):</p>
    <p>Fixed demand  Minimize average delay</p>
    <p>Throughput-sensitive traffic (TST):  Elastic  Maximize user aggregate utility without</p>
    <p>causing congestion</p>
    <p>Bandwidth allocation updated after both VNs converge</p>
  </div>
  <div class="page">
    <p>Delay-Sensitive Traffic on Long Link</p>
    <p>DST does not use all the allocated bandwidth</p>
    <p>Demand = 110 Mbps</p>
    <p>Allocated bandwidth</p>
    <p>Traffic rate</p>
    <p>Optimal allocation</p>
  </div>
  <div class="page">
    <p>Changing Demand</p>
    <p>Abilene topology</p>
    <p>DST: 100 Mbps</p>
    <p>! 200 Mbps</p>
    <p>! 50 Mbps</p>
    <p>DaVinci reacts quickly to changing demand and topology</p>
    <p>Bandwidth allocated to DST</p>
    <p>DST traffic rate</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>QoS (Intserv, DiffServ, etc.)  Provides separate resources for each traffic class  DaVinci provides separate protocols and dynamic</p>
    <p>resource allocation</p>
    <p>Overlays  Provide customized protocols for each traffic class  Lack visibility and control of network conditions  DaVinci provides dedicated resources</p>
    <p>Network virtualization (VPN, VINI, etc.)  Uses static resource allocation, adjusted manually  DaVinci adjusts resource allocation according to demand</p>
  </div>
  <div class="page">
    <p>Adaptive network virtualization is key for supporting multiple traffic classes</p>
    <p>The DaVinci architecture  Derived from optimization theorystable, efficient  Each VN runs customized protocols  Resource allocation based on local link information</p>
    <p>Future directions  What if a VNs utility function is not convex?  Economic incentives for selfish VNs to cooperate?</p>
    <p>Conclusion and Future Work</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Motivation for Separate Queues and Routing</p>
    <p>Two traffic classes:  Delay-sensitive traffic (DST): fixed demand  Throughput-sensitive traffic (TST): elastic</p>
    <p>Single queue  TST can fill up both</p>
    <p>links  DST may not be</p>
    <p>satisfied</p>
    <p>Shared routing  DST chooses shorter</p>
    <p>path  Bandwidth wasted</p>
  </div>
  <div class="page">
    <p>Motivation for Resource Isolation</p>
    <p>Flow A</p>
    <p>Flow B</p>
    <p>Flow A given extra bandwidth</p>
    <p>Network A congested</p>
    <p>Bandwidth taken from Network B</p>
  </div>
  <div class="page">
    <p>DaVinci: Substrate Link</p>
    <p>Bandwidth shares</p>
    <p>computation link load</p>
    <p>yl (1)</p>
    <p>yl (2)</p>
    <p>yl (N)</p>
    <p>Congestion price</p>
    <p>computation</p>
    <p>sl (1)</p>
    <p>Use optimization to determine the computations</p>
    <p>Performan ce</p>
    <p>objective</p>
  </div>
  <div class="page">
    <p>Delay-sensitive Traffic Minimizes Delay</p>
    <p>min. lijHlj</p>
    <p>izj i(pl+f(ul))</p>
    <p>s.t. ul =(Hz)l/cl i zj</p>
    <p>i  xi D</p>
    <p>var. z Link Utilization ul</p>
    <p>Cos t f(ul)</p>
    <p>Propagation delayLinks are indexed by l</p>
    <p>ul =1</p>
    <p>Cost function represents penalty for long queues</p>
    <p>Traffic demand</p>
  </div>
  <div class="page">
    <p>i source-destination pair, j path number</p>
    <p>Throughput-sensitive Traffic</p>
    <p>max.i Ui(j zj i)  ql h(ul)</p>
    <p>s.t. link load  cl var. path rates z</p>
    <p>z1 1</p>
    <p>z2 1</p>
    <p>z3 1</p>
    <p>Path rate z captures source rate and routing</p>
  </div>
  <div class="page">
    <p>Substrate link updates bandwidth allocation</p>
    <p>Calculates the marginal utility of each VN  Based on congestion price and utility</p>
    <p>function</p>
    <p>Increase bandwidth allocation to each VN proportional to weight, marginal utility, and stepsize</p>
    <p>Project onto feasible region</p>
    <p>Feasible allocation s</p>
    <p>v</p>
  </div>
  <div class="page">
    <p>The Master Problem: Updating bandwidth allocation for link l  Calculates l(k), the marginal utility</p>
    <p>gain for more bandwidth  Based on sl(k) and utility function U(k)()</p>
    <p>Increase bandwidth allocation</p>
    <p>Projection onto feasible region:</p>
    <p>vl (k)(t+1) = [yl</p>
    <p>(k)(t) + y w (k)</p>
    <p>l (k)]+</p>
    <p>k yl (k)</p>
    <p>cl</p>
    <p>v</p>
  </div>
  <div class="page">
    <p>Sensitivity to Stepsize</p>
    <p>Abilene topology</p>
    <p>Constant stepsize should be chosen carefully</p>
  </div>
</Presentation>
