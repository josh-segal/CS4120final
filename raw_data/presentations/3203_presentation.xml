<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>+ Cardinal Pill Testing of</p>
    <p>System Virtual Machines</p>
    <p>Hao Shi haoshi@usc.edu Abdulla Alwabel alwabel@isi.edu Jelena Mirkovic mirkovic@isi.edu</p>
    <p>USENIX Security 2014 San Diego, CA, USA</p>
    <p>University of Southern California [USC/ISI]</p>
    <p>Motivations  Our Goal  Related Work  Architecture  Evaluation  Fixing Pills http://steel.isi.edu/Projects/cardinal/</p>
    <p>Information Science Institute</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>n Use of Virtual Machines in Current Malware Analysis n QEMU, Bochs, Anubis, TEMU, Ether, VMware,</p>
    <p>n Malwares Evasion Strategy (Anti-VM) n Detect VMs and change behavior from malicious to benign</p>
    <p>n CPU semantic attacks n Different execution of same instruction in a VM and a physical</p>
    <p>machine</p>
    <p>n Timing attacks, String attacks</p>
    <p>n Increasing popularity of anti-VM behavior in malicious binaries</p>
    <p>n 2.7% of 6,222 [Chen08], 25.6% of 1,686 [Lindofer11], 81.4% of 4,000,000 samples [Branco12]</p>
    <p>n Definition of Pill n Combination of instruction mnemonic + register/memory parameter</p>
    <p>(ranges) that leads to different execution in a VM and a physical machine</p>
    <p>+ 2/20 *</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>n Our Goal n Enumerate all the CPU semantic differences between a virtual machine</p>
    <p>(VM) and a physical machine (Oracle)</p>
    <p>n Lie to malware with the expected values for Oracle (like kernel rootkits)</p>
    <p>n Results n We find 5 times more pills running 15 times fewer tests Red Pill testing</p>
    <p>n Almost half of our tests yield a pill</p>
    <p>n We analyze two root causes of pills</p>
    <p>n VM does not adhere to specs</p>
    <p>n Vague specs lead to different implementations in CPUs</p>
    <p>n Most pills stem from differences in kernel registers</p>
    <p>n even with hardware-assisted VMs</p>
    <p>n We can enumerate all differences between a VM and a physical machine for selected instructions</p>
    <p>+ 3/20 *</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>n Red Pill Testing (EmuFuzzer, Martignoni09) n Generate random values for instruction parameters (user-space)</p>
    <p>n KEmuFuzzer [Martignoni10] (extend to kernel-space) n manually crafted test case templates for kernel instructions</p>
    <p>n Random values for instruction input</p>
    <p>n Hi-Fi tests for Lo-Fi emulators [Martignoni12] n Use symbolic execution to translate the code of a high-fidelity emulator</p>
    <p>n Generate test cases that can investigate all discovered code paths</p>
    <p>n These test cases are then used to test low-fidelity emulators</p>
    <p>+ 4/20 *</p>
    <p>Random tests cannot guarantee completeness</p>
    <p>Random tests cannot guarantee completeness  Custom kernel cannot be generalized</p>
    <p>Symbolic execution cannot test FPU instructions  Comparing two VMs is different from comparing</p>
    <p>a VM and a physical machine</p>
  </div>
  <div class="page">
    <p>Cardinal Pill Testing - Architecture Overview</p>
    <p>+ 5/20 *</p>
    <p>- WinDbg 6.12 - Stores test case states in</p>
    <p>various testing phases - Compare states to</p>
    <p>determine a pill</p>
    <p>- Store test cases - A daemon that helps communication</p>
    <p>between Master and a Slave - State: all user and kernel registers,</p>
    <p>the data stored in the part of code, data, and stack segments that test cases read or write</p>
    <p>physical serial wire</p>
  </div>
  <div class="page">
    <p>n The daemon loads the test case and then</p>
    <p>notifies Master</p>
    <p>n The test case performs initialization work and</p>
    <p>notifies Master</p>
    <p>n The test case executes the testing instruction</p>
    <p>and notifies Master</p>
    <p>+ 6/20 Cardinal Pill Testing - Logic Execution</p>
  </div>
  <div class="page">
    <p>Cardinal Pill Testing - Testing Goal</p>
    <p>n Generate a minimal set of test cases for each instruction that explore all possible code paths</p>
    <p>n Starting from Intel Manuals n Defined Behaviors: manuals have clear semantics for register</p>
    <p>modifications and exceptions</p>
    <p>n Undefined Behaviors: not specified by manuals n E.g., aaa adjusts the sum of two unpacked binary coded decimal to</p>
    <p>create an unpacked BCD result</p>
    <p>n Input: the al register and AF flag</p>
    <p>n Defined behavior: set AF and CF to 1 if there is a carry; otherwise 0</p>
    <p>n Undefined behavior: OF, SF, ZF, and PF are undefined</p>
    <p>+ 7/20</p>
  </div>
  <div class="page">
    <p>Cardinal Pill Testing - Testing Goal</p>
    <p>n For defined behaviors for a given instruction n Evaluate all code branches</p>
    <p>n Consider all flag bit states that are read implicitly or updated using results</p>
    <p>n Evaluate all exceptions n E.g., memory access, invalid input arguments</p>
    <p>n Investigate undefined behaviors n To reveal undocumented implementation specifics</p>
    <p>+ 8/20</p>
  </div>
  <div class="page">
    <p>Cardinal Pill Testing - Test Case Generation</p>
    <p>n Instruction Grouping (Intel x86) n Classify instructions into five broad categories</p>
    <p>n Arithmetic, data movement, logic, flow control, and misc</p>
    <p>+ 9/20</p>
  </div>
  <div class="page">
    <p>Cardinal Pill Testing - Test Case Generation</p>
    <p>n Arithmetic Group n Instructions first read arguments and then perform arithmetic operations</p>
    <p>n Combine instructions that read/write the same registers with similar rules into a partition</p>
    <p>n E.g. aaa, aas, daa, and das</p>
    <p>n Compare the al register with 0fh and check the adjustment flag AF</p>
    <p>n Test cases for this partition</p>
    <p>n Initialize al to min (00h), max (0ffh), boundary (0fh), random values in different ranges ([01h, 0eh], [10h, 0feh])</p>
    <p>n Also flip AF between clear and set for different al values</p>
    <p>+ 10/20</p>
  </div>
  <div class="page">
    <p>Evaluation - Overview</p>
    <p>n Test case generated from Intel IA-32 manual n 1,653 instructions, counting different addressing modes</p>
    <p>n 906 unique mnemonics</p>
    <p>n ~ 230 groups, ~ 1.5 human months to generate test cases</p>
    <p>n 19,412 test cases in total</p>
    <p>n Infrastructure and Software n QEMU (4 versions)</p>
    <p>n Tiny Code Generation mode: pure-software translation</p>
    <p>n VT-x (Intel hardware assisted, high fidelity)</p>
    <p>n Bochs 2.6.2 (pure-software translation)</p>
    <p>n Oracle 1: Intel Xeon E3 3.40GHz, Windows7 Pro x86</p>
    <p>n Oracle 2: Intel Xeon W3520 2.6GHz, Windows XP x86 SP3</p>
    <p>+ 11/20 *</p>
  </div>
  <div class="page">
    <p>Evaluation - Overview n Results (# test cases out of a total 19,412)</p>
    <p>n Crashed test cases: crash itself or the system n Fatal test cases: VM and Oracle exhibit different initial states</p>
    <p>n Due to VM implementation bugs</p>
    <p>n Note: Although Intel VT-x provides high-fidelity, the actual performance depends on how VMs utilize it</p>
    <p>+ 12/20</p>
    <p>VMs #Pill / Pct. #Crashed / Pct. #Fatal / Pct.</p>
    <p>Q1 (TCG) 9,255 / 47.7% 7 / &lt; 0.1% 1,378 / 7%</p>
    <p>Q2 (TCG) 9,201 / 47.4% 7 / &lt; 0.1% 1,376 / 7%</p>
    <p>Q1 (VT-x) 7,523 / 38.7% 2 / &lt; 0.1% 3 / &lt; 0.1%</p>
    <p>Q2 (VT-x) 7,478 / 38.5% 2 / &lt; 0.1% 0</p>
    <p>Bochs 8,958 / 46.1% 2 / &lt; 0.1% 950 / 4.9%</p>
  </div>
  <div class="page">
    <p>Evaluation - Comparison with Related Work</p>
    <p>n High yield = faster testing</p>
    <p>n We achieve a much larger yield rate (47.6%)!</p>
    <p>+ 13/20</p>
    <p>Total test cases</p>
    <p>Pills Found</p>
  </div>
  <div class="page">
    <p>Evaluation - Comparison with Related Work</p>
    <p>n All our pills are unique = faster testing n Unique Pills  different parameter values read by an instruction</p>
    <p>n E.g. the same pill:</p>
    <p>n Mov ebx, 80h; mov al, 9h; aaa;</p>
    <p>n Mov ebx, 0ffh; mov al, 9h; aaa;</p>
    <p>n Because aaa does not read ebx at all!</p>
    <p>+ 14/20</p>
  </div>
  <div class="page">
    <p>Evaluation - Comparison with Related Work</p>
    <p>n We cover all mnemonics = guarantee completeness n Unique Mnemonic</p>
    <p>n E.g., aaa, aad, fmul</p>
    <p>n Our pills cover 4 times more mnemonics than those found by EmuFuzzer!</p>
    <p>+ 15/20</p>
  </div>
  <div class="page">
    <p>Evaluation - Root Causes of Pills (Defined)</p>
    <p>n Root causes listed in Hi-Fi/Lo-Fi work n We find:</p>
    <p>n Pills in general purpose instructions</p>
    <p>n Pills due to QEMUs memory management unit</p>
    <p>n We do not find:</p>
    <p>n Pills in kernel instructions</p>
    <p>n E.g., iret pops items from stack differently from a physical machine</p>
    <p>n Because we do not extensively test kernel instructions</p>
    <p>n Due to extensive time required for testing kernel instructions</p>
    <p>n We leave this for future work</p>
    <p>+ 16/20</p>
  </div>
  <div class="page">
    <p>Evaluation - Root Causes of Pills (Defined)</p>
    <p>n Our new findings about QEMU n Incorrect 6 flags and 8 masks in mxcsr register when no exception</p>
    <p>happens</p>
    <p>n invalid operation, denormal flag, precision mask.</p>
    <p>n Incorrect 7 flags in fpsw status register</p>
    <p>n stack fault, FPU busy.</p>
    <p>n Fails to throw 5 exceptions</p>
    <p>n float_multiple_traps, float_multiple_faults, etc</p>
    <p>n Incorrect fptw tag register</p>
    <p>n sets to zero when it should be empty, etc</p>
    <p>n Incorrect floating-point instruction pointer and data pointer</p>
    <p>n Please check our paper and website for the detailed list.</p>
    <p>n http://steel.isi.edu/Projects/cardinal</p>
    <p>+ 17/20</p>
  </div>
  <div class="page">
    <p>Evaluation - Causes of Pills (Undefined)</p>
    <p>n The only source is EFLAGS register n Generate additional test cases to explore the semantics of modifications</p>
    <p>to undefined resources in each CPU</p>
    <p>n A flag may be (1) cleared, (2) intact, (3) set according to ALU output at the end of an instructions execution, or (4) set based on an ALU output of an intermediate operation</p>
    <p>n We devise a testing method to differentiate between these cases (more details in the paper)</p>
    <p>n Understand the semantics of undefined resource modification n Help devise hiding rules without exhaustive tests</p>
    <p>+ 18/20</p>
  </div>
  <div class="page">
    <p>+ Summary</p>
    <p>n We propose Cardinal Pill Testing: n Moderate manual effort to analyze instructions in a manual, then</p>
    <p>automated test generation and pill identification n Our tests have high yield and superb coverage, compared to related work</p>
    <p>n Completeness? n Pills for user-space instructions that affect defined resources (stem from</p>
    <p>incorrect VM implementation) - complete n Pills that affect undefined resources (stem from different implementations</p>
    <p>in physical machines)  complete only for a given VM/physical machine pair</p>
    <p>n We did not extensively test pills that relate to kernel-space instructions due to high test-time demand  incomplete</p>
    <p>n Propose a way to lie to malware via modification of VM translation engine n Details in the paper</p>
    <p>+ 19/20 *</p>
  </div>
  <div class="page">
    <p>+ Questions?</p>
    <p>n Thank you!!</p>
    <p>n Contact us: n Hao Shi haoshi@usc.edu</p>
    <p>n Abdulla Alwabel alwabel@isi.edu</p>
    <p>n Jelena Mirkovic mirkovic@isi.edu</p>
    <p>n http://steel.isi.edu/Projects/cardinal</p>
    <p>+ 20/20</p>
  </div>
</Presentation>
