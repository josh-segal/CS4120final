<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Extending Minimalism Outside of the Box</p>
    <p>Dan Williams and Ricardo Koller, IBM Research</p>
    <p>USENIX HotCloud 2016 June 20, 2016, Denver, CO</p>
    <p>Unikernel Monitors</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation2 24 June 2016</p>
    <p>Reduced attack surface</p>
    <p>Better understanding of the system</p>
    <p>Performance</p>
    <p>Management</p>
    <p>Minimalism is good</p>
    <p>Cloud</p>
    <p>Application and</p>
    <p>software stack</p>
    <p>Cloud</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation3 24 June 2016</p>
    <p>Cloud</p>
    <p>Built from fine-grained modules</p>
    <p>Only include what app needs</p>
    <p>Runs directly on virtual hardware</p>
    <p>Unikernels: minimal systems?</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation4 24 June 2016</p>
    <p>Is the interface minimal?</p>
    <p>The extent of minimalism?</p>
    <p>Linux / KVM</p>
    <p>QEMU</p>
    <p>Unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation5 24 June 2016</p>
    <p>Is the interface minimal?</p>
    <p>Is the monitor minimal?</p>
    <p>The extent of minimalism?</p>
    <p>Linux / KVM</p>
    <p>QEMU</p>
    <p>Unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation6 24 June 2016</p>
    <p>Is the interface minimal?</p>
    <p>Is the monitor minimal?</p>
    <p>Can we use similar dependency-tracking techniques?</p>
    <p>The extent of minimalism?</p>
    <p>Linux / KVM</p>
    <p>QEMU</p>
    <p>Unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation7 24 June 2016</p>
    <p>Executables contain both application and specialized monitor</p>
    <p>Unikernel monitors</p>
    <p>Unikernel + Monitor</p>
    <p>Linux / KVM</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation8 24 June 2016</p>
    <p>Type-II hypervisor  Sets up memory, VCPU</p>
    <p>HW-support for virtualization  provides isolated processor context</p>
    <p>All exits routed to monitor</p>
    <p>Runs MirageOS unikernels on Solo5 unikernel base</p>
    <p>https://github.com/djwillia/solo5</p>
    <p>Prototype monitor: ukvm</p>
    <p>ukvm MirageOS on Solo5</p>
    <p>Linux / KVM</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation9 24 June 2016</p>
    <p>Minimal interfaces</p>
    <p>Simplified monitor implementation and interface (~ 5% code size)</p>
    <p>Fast boot time (~ 10 ms)</p>
    <p>Advantages of unikernel monitors</p>
    <p>Unikernel + Monitor</p>
    <p>Linux / KVM</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation10 24 June 2016</p>
    <p>Interfaces to todays clouds are wide and general-purpose  Full virtualization, paravirtualization, OS-level (containers)</p>
    <p>A general purpose interface cannot be minimal</p>
    <p>Minimal interfaces</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation11 24 June 2016</p>
    <p>Default monitor provides generic virtual HW abstraction</p>
    <p>Building a unikernel</p>
    <p>net-backblk-back</p>
    <p>tap</p>
    <p>VMM abstraction</p>
    <p>guest setup</p>
    <p>m onitor</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation12 24 June 2016</p>
    <p>Default monitor provides generic virtual HW abstraction</p>
    <p>Application depends on  base runtime</p>
    <p>Building a unikernel</p>
    <p>app</p>
    <p>net-back</p>
    <p>base runtime</p>
    <p>blk-back</p>
    <p>tap</p>
    <p>VMM abstraction</p>
    <p>guest setup</p>
    <p>m onitor</p>
    <p>unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation13 24 June 2016</p>
    <p>Default monitor provides generic virtual HW abstraction</p>
    <p>Application depends on  base runtime  TCP stack</p>
    <p>Building a unikernel</p>
    <p>app</p>
    <p>TCP</p>
    <p>net-front</p>
    <p>net-back</p>
    <p>base runtime</p>
    <p>blk-back</p>
    <p>tap</p>
    <p>VMM abstraction</p>
    <p>guest setup</p>
    <p>m onitor</p>
    <p>unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation14 24 June 2016</p>
    <p>Default monitor provides generic virtual HW abstraction</p>
    <p>Application depends on  base runtime  TCP stack  No disk</p>
    <p>Monitor and interface are not minimal!  VENOM attack</p>
    <p>Building a unikernel</p>
    <p>app</p>
    <p>TCP</p>
    <p>net-front</p>
    <p>net-back</p>
    <p>base runtime</p>
    <p>blk-back</p>
    <p>tap</p>
    <p>VMM abstraction</p>
    <p>guest setup</p>
    <p>m onitor</p>
    <p>unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation15 24 June 2016</p>
    <p>Default monitor only provides isolated guest context  Destroys unikernel on any exit</p>
    <p>Building a unikernel and monitor</p>
    <p>guest setup</p>
    <p>m onitor</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation16 24 June 2016</p>
    <p>Default monitor only provides isolated guest context  Destroys unikernel on any exit</p>
    <p>Application depends on  base runtime</p>
    <p>Building a unikernel and monitor</p>
    <p>app</p>
    <p>base runtime</p>
    <p>guest setup</p>
    <p>m onitor</p>
    <p>unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation17 24 June 2016</p>
    <p>Default monitor only provides isolated guest context  Destroys unikernel on any exit</p>
    <p>Application depends on  base runtime  TCP stack</p>
    <p>Building a unikernel and monitor</p>
    <p>app</p>
    <p>TCP</p>
    <p>netif</p>
    <p>base runtime</p>
    <p>tap guest setup</p>
    <p>m onitor</p>
    <p>unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation18 24 June 2016</p>
    <p>Default monitor only provides isolated guest context  Destroys unikernel on any exit</p>
    <p>Application depends on  base runtime  TCP stack  No disk</p>
    <p>Monitor and interface is minimal!  Off by default</p>
    <p>Building a unikernel and monitor</p>
    <p>app</p>
    <p>TCP</p>
    <p>netif</p>
    <p>base runtime</p>
    <p>tap guest setup</p>
    <p>m onitor</p>
    <p>unikernel</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation19 24 June 2016</p>
    <p>Legacy standards are unnecessary for the cloud  BIOS? PCI?</p>
    <p>Example: shared memory to send network packet</p>
    <p>What level of abstraction?  Generality tax</p>
    <p>Specialized interfaces  E.g., avoid VM introspection</p>
    <p>Simplicity</p>
    <p>/* UKVM_PORT_NETWRITE */ struct ukvm_netwrite {</p>
    <p>void *data; /* IN */ int len; /* IN */ int ret; /* OUT */</p>
    <p>}</p>
    <p>QEMU ukvm</p>
    <p>Solo5 Kernel</p>
    <p>malloc 6282 6282 runtime 2689 2272 virtio 727 loader 886</p>
    <p>total 10484 8552</p>
    <p>Monitor QEMU 25003 ukvm - 990 (+ 172 tap)</p>
    <p>total 25003 1162</p>
    <p>Table 1: Lines of code for the kernel and the monitor for the general-purpose QEMU, and the specialized ukvm.</p>
    <p>a regular C main(). The memory and register setup includes settinga linearpage table (aunikernelhasa single address space), a stack, and loading registers with some arguments for the kernel (like the memory size). The I/O interfaces between ukvm and Solo5 look like</p>
    <p>theone inFigure2. Theyprovidezero-copy IObyallowing any address of memory to be used as a buffer (of any size), andmaking the callwith nomore thanasingleVM exit (no need to probe if the PCI bus is ready, as would be done with virtio). We implemented basic disk and network backends in ukvm by using TAP [18] and host file reads and writes. Table 4shows the lines of code needed for implement</p>
    <p>ing Solo5 on top of QEMU versus ukvm. Most of the reduction in Solo5 comes by removing virtio and the loader. Also, notice how an application configured not to use the network would have 10% less code in ukvm. For a concrete estimate of the size of the monitor in relation to the unikernel, the ukvm binary is 23KB compared to the 11MB Solo5 executable image when linked against the www Mirage application (only 0.2%). Our prototype implementation does not automatically</p>
    <p>select the minimal configuration needed to run; automatic selection is limited to the MirageOS components.</p>
    <p>BootTime. Wemeasuredboot timefor ukvm andcompared it against traditional virtualization approaches like QEMU, and to the more recent lkvm (used by kvmtool in clear containers [1]). QEMU exposes a physical machine abstraction and lkvm is a more lightweight monitor that skips the BIOS and bootloader phase and jumps directly to the 64-bit kernel. lkvm and QEMU were configured to use virtio network and block devices. The three monitors were configured to use 512 MB of memory, and one 2.90GHz CPU core. Furthermore, the monitors were instrumented to trace the first VM instruction, the first serial output, the first network output, and the final halt instruction. Figure 4 shows the boot times for QEMU, lkvm, and</p>
    <p>Figure4: Boot times for ukvm (U), lkvm (L), andQEMU (Q) for some applications. s and n indicate the first serial and network output, respectively.</p>
    <p>ukvm for 3 MirageOS applications: hello (prints hello to the console then exits), block (tests disk reads and writes), and www (serves static Web pages). The gray barson the left show the time spenton moni</p>
    <p>tor initialization. As expected, QEMU takes the longest, with 80ms compared to lkvm that takes an average of 45ms, and ukvm with 10ms. ukvm and lkvm load the 64bit kernel immediately, so the kernel produces its first serial output (the s) quicker than QEMU, which unpacks an ISOfile in realmode to load thekernel. The www bars show that ukvm is able to do realworkas soon as the kernel starts as the kernel sends its first network packet (the n) 18 milliseconds after its first serial output. lkvm and QEMU, on the other hand, first discover these devices, then initialize them before sending, resulting in at least 100ms delay.</p>
    <p>We propose a new unit of execution for the cloud, built from the bundling of unikernels and specialized unikernel monitors. As a first step, with our prototype monitor, ukvm, we have shown that such monitors can be small and simple, yet powerful enough to run real unikernels. We believe the advantages of specializingcloud software stacksincluding the monitorare key to realizing the security and responsiveness needs of future clouds.</p>
    <p>References [1] An introduction to Clear Containers. https://lwn.net/</p>
    <p>Articles/644675/. (Accessed on 2016-03-06). [2] AppArmor. http://wiki.apparmor.net/index.php/</p>
    <p>Main_Page. (Accessed on 2016-03-04). [3] AWS Lambda. https://aws.amazon.com/lambda/. (Ac</p>
    <p>cessed on 2016-03-04).</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation20 24 June 2016</p>
    <p>New application domains require on-the-fly service creation  IoT, NFV, Amazon Lambda  Zero-footprint cloud, transient microservices</p>
    <p>Legacy protocols/emulation, virtual hardware negotiation, and range of guest support can slow things down</p>
    <p>Boot time</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation21 24 June 2016</p>
    <p>3 applications  Hello world  Block device test  Static Web server</p>
    <p>QEMU: standard monitor</p>
    <p>lkvm: lightweight monitor</p>
    <p>ukvm: specialized monitor</p>
    <p>Boot times</p>
    <p>s n first network output</p>
    <p>first serial output</p>
    <p>monitor shutdown unikernel execution monitor boot</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation22 24 June 2016</p>
    <p>3 applications  Hello world  Block device test  Static Web server</p>
    <p>QEMU: standard monitor</p>
    <p>lkvm: lightweight monitor</p>
    <p>ukvm: specialized monitor</p>
    <p>Boot times</p>
    <p>s n first network output</p>
    <p>first serial output</p>
    <p>monitor shutdown unikernel execution monitor boot</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation23 24 June 2016</p>
    <p>3 applications  Hello world  Block device test  Static Web server</p>
    <p>QEMU: standard monitor</p>
    <p>lkvm: lightweight monitor</p>
    <p>ukvm: specialized monitor</p>
    <p>Boot times</p>
    <p>s n first network output</p>
    <p>first serial output</p>
    <p>monitor shutdown unikernel execution monitor boot</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation24 24 June 2016</p>
    <p>Monitor is outside hardware protection domain</p>
    <p>Small enough for formal verification, audit?</p>
    <p>Cloud providers restrict monitors to certified modules?</p>
    <p>Securing the monitors</p>
  </div>
  <div class="page">
    <p>2016 IBM Corporation25 24 June 2016</p>
    <p>Extend minimalism through both unikernel and specialized monitor  Better security  Better performance  Better management</p>
    <p>Prototype: ukvm  https://github.com/djwillia/solo5  Currently being upstreamed as</p>
    <p>MirageOS backend  Thank you to MirageOS community,</p>
    <p>(especially Martin Lucina, Docker)</p>
    <p>Summary</p>
    <p>Linux / KVM</p>
    <p>Unikernel + Monitor</p>
  </div>
  <div class="page">
    <p>2015 IBM Corporation</p>
  </div>
</Presentation>
