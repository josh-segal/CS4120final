<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RakshaRaksha: : A Flexible Information Flow</p>
    <p>Architecture for Software Security</p>
    <p>Michael Dalton, Hari Kannan, Christos Kozyrakis</p>
    <p>Computer Systems Laboratory</p>
    <p>Stanford University</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>MotivationMotivation</p>
    <p>Software security is in a crisis</p>
    <p>Ever increasing range of attacks</p>
    <p>High-level, semantic attacks are now the main threat  SQL injection, cross-site scripting, directory traversal,</p>
    <p>Low-level, memory corruption attacks are still common  Buffer overflow, double free, format string,</p>
    <p>Need an approach to software security that is</p>
    <p>Robust &amp; flexible</p>
    <p>Practical &amp; end-to-end</p>
    <p>Fast</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>DIFT: Dynamic Information Flow TrackingDIFT: Dynamic Information Flow Tracking</p>
    <p>DIFT taints data from untrusted sources</p>
    <p>Extra tag bit per word marks if untrusted</p>
    <p>Propagate taint during program execution</p>
    <p>Operations with tainted data produce tainted results</p>
    <p>Check for suspicious uses of tainted data</p>
    <p>Tainted code execution</p>
    <p>Tainted pointer dereference (code &amp; data)</p>
    <p>Tainted SQL command</p>
    <p>Potential: protection from low-level &amp; high-level threats</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>r1:0</p>
    <p>r2:idx</p>
    <p>r3:&amp;buffer</p>
    <p>r4:0</p>
    <p>Data T</p>
    <p>r5:x</p>
    <p>DIFT Example: Memory CorruptionDIFT Example: Memory Corruption</p>
    <p>Tainted pointer dereference  security trap</p>
    <p>int idx = tainted_input;</p>
    <p>buffer[idx] = x; // buffer overflow</p>
    <p>Vulnerable C Code</p>
    <p>set r1  &amp;tainted_input</p>
    <p>load r2  M[r1]</p>
    <p>add r4  r2 + r3</p>
    <p>store M[r4]  r5 r4:&amp;buffer+idx</p>
    <p>r1:&amp;input</p>
    <p>r2:idx=input</p>
    <p>TRAP</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Software DIFT Systems Software DIFT Systems</p>
    <p>DIFT through code instrumentation [Newsome05, Quin06]</p>
    <p>Transparent through dynamic binary translation</p>
    <p>Advantages</p>
    <p>Runs on existing hardware</p>
    <p>Flexible security policies</p>
    <p>Disadvantages</p>
    <p>High overhead (3x)  Does not work with threaded or self-modifying binaries</p>
    <p>Cannot protect OS</p>
    <p>Coverage: control-based, low-level attacks</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Hardware DIFT SystemsHardware DIFT Systems</p>
    <p>DIFT through HW extensions [Suh04, Crandall04, Chen05]  Extend HW state to include taint bits  Extend HW instructions to check &amp; propagate taint bits</p>
    <p>Advantages</p>
    <p>Negligible runtime overhead  Works with threaded and self-modifying binaries</p>
    <p>Disadvantages  Inflexible security policies  False positives &amp; false negatives  Cannot protect OS</p>
    <p>Coverage: control-based &amp; data-based, low-level attacks</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>OutlineOutline</p>
    <p>Motivation &amp; DIFT overview</p>
    <p>The Raksha architecture  Technical approach  Architectural features  Full-system prototype</p>
    <p>Evaluation  Security experiments  Lessons learned</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Raksha PhilosophyRaksha Philosophy</p>
    <p>Combine best of HW &amp; SW</p>
    <p>HW: fast checks &amp; propagation, works with any binary</p>
    <p>SW: flexible policies, high-level analysis &amp; decisions</p>
    <p>Goals</p>
    <p>Protect against high-level &amp; low-level attacks</p>
    <p>Protect against multiple concurrent attacks</p>
    <p>Protect OS code</p>
    <p>Comprehensive evaluation</p>
    <p>Run unmodified binaries on full-system prototype</p>
    <p>What works on a simulator, may not work in real life</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Raksha Architecture &amp; FeaturesRaksha Architecture &amp; Features</p>
    <p>HW ArchitectureHW Architecture Tags</p>
    <p>Operating SystemOperating System Tag</p>
    <p>Aware</p>
    <p>App</p>
    <p>Binary</p>
    <p>App</p>
    <p>Binary</p>
    <p>HW check/propagate</p>
    <p>User-level security traps</p>
    <p>App</p>
    <p>Binary</p>
    <p>App</p>
    <p>Binary Security</p>
    <p>Manager</p>
    <p>Security</p>
    <p>Manager</p>
    <p>User 1 SysAdminUser 2</p>
    <p>Cross-process info flow</p>
    <p>Save/restore tags</p>
    <p>Set security policies</p>
    <p>Control HW check/propagate</p>
    <p>Further SW analysis</p>
    <p>Unmodified binaries</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Setting HW Check/Propagate PoliciesSetting HW Check/Propagate Policies</p>
    <p>A pair of policy registers per tag bit</p>
    <p>Set by security manager (SW) when and as needed</p>
    <p>Policy granularity: operation type</p>
    <p>Select input operands to check if tainted</p>
    <p>Select input operands that propagate taint to output</p>
    <p>Select the propagation mode (and, or)</p>
    <p>ISA instructions decomposed to 1 operations</p>
    <p>Types: ALU, logical, branch, load/store, compare, FP,</p>
    <p>Makes policies independent of ISA packaging (RISC/CISC)</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Check Policy Example: Check Policy Example: loadload</p>
    <p>load r2  M[r1+offset]</p>
    <p>Check Enables</p>
    <p>Both enables may be set simultaneously</p>
    <p>load r2  M[r1+offset]load r2  M[r1+offset]</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Propagate Policy Example: Propagate Policy Example: loadload</p>
    <p>load r2  M[r1+offset]</p>
    <p>Propagate Enables</p>
    <p>AND mode: Tag(r2) Tag(r1) &amp; Tag(M[r1+offset])</p>
    <p>load r2  M[r1+offset]load r2  M[r1+offset]load r2  M[r1+offset]</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>UserUser--level Security Trapslevel Security Traps</p>
    <p>Why user-level security traps?</p>
    <p>Fast switch to SW  combine HW tainting with SW analysis</p>
    <p>No switch to OS  DIFT applicable to most of OS code</p>
    <p>Requires new operating mode, orthogonal to user/kernel</p>
    <p>On security trap</p>
    <p>Switch to trusted mode &amp; jump to predefined handler</p>
    <p>Maintain user/kernel mode (no address space change)</p>
    <p>User</p>
    <p>Kernel</p>
    <p>Untrusted</p>
    <p>Limited instructions; limited address ranges; VM</p>
    <p>Trusted</p>
    <p>Access to all instructions &amp; address ranges; VM/PM</p>
    <p>Tags are</p>
    <p>transparent</p>
    <p>Direct access to</p>
    <p>tag bits &amp; tag instructions</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Protecting the Trap HandlerProtecting the Trap Handler</p>
    <p>Can malicious user code overwrite handler?</p>
    <p>Use one tag bit to support a sandboxing policy</p>
    <p>Handler data &amp; code accessible only in trusted mode</p>
    <p>Memory</p>
    <p>User Code/Data</p>
    <p>Handler Code/Data</p>
    <p>Trusted (handler)</p>
    <p>Fetch/ld/st</p>
    <p>ld/st data</p>
    <p>ld/st tags</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Protecting the Trap HandlerProtecting the Trap Handler</p>
    <p>Can malicious user code overwrite handler?</p>
    <p>Use one tag bit to support a sandboxing policy</p>
    <p>Handler data &amp; code accessible only in trusted mode</p>
    <p>Memory</p>
    <p>User Code/Data</p>
    <p>Handler Code/Data</p>
    <p>Untrusted (user)</p>
    <p>Fetch/ld/st</p>
    <p>ld/st data</p>
    <p>ld/st tags TRAP</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Raksha Prototype SystemRaksha Prototype System</p>
    <p>Full-featured Linux system</p>
    <p>On-line since October 2006</p>
    <p>HW: modified Leon-3 processor</p>
    <p>Open-source, Sparc V8 processor</p>
    <p>Single-issue, in-order, 7-stage pipeline</p>
    <p>Modified RTL for processor &amp; system</p>
    <p>First DIFT system on FPGA</p>
    <p>SW: custom Linux distribution</p>
    <p>Based on 2.6 kernel (modified to be tag aware)</p>
    <p>Set HW policies using preloaded shared libraries</p>
    <p>120 packages (GNU toolchain, apache, postgresql, )</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Processor PipelineProcessor Pipeline</p>
    <p>Registers &amp; memory extended with tag bits</p>
    <p>Tags flow through pipeline along with corresponding data</p>
    <p>No changes in forwarding logic</p>
    <p>No significant sources of clock frequency slowdown</p>
    <p>Policy</p>
    <p>Decode</p>
    <p>Tag</p>
    <p>ALU</p>
    <p>Tag</p>
    <p>Check</p>
    <p>P</p>
    <p>C Decode D-CacheRegFile ALUI-Cache Traps</p>
    <p>W</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Tag Granularity &amp; StorageTag Granularity &amp; Storage</p>
    <p>Tag granularity</p>
    <p>HW maintains per word tag bits</p>
    <p>What if SW wants byte or bit granularity for some data?</p>
    <p>Maintain in SW using sandboxing &amp; fast user-level traps  Acceptable performance if not common case</p>
    <p>Tag storage</p>
    <p>Initial HW  +4 bits/word in registers, caches, memory  12.5% storage overhead</p>
    <p>Multi-granularity tag storage scheme [Suh04]  Exploit tag similarity to reduce storage overhead</p>
    <p>Page-level tags  cache line-level tags  word-level tags</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Prototype StatisticsPrototype Statistics</p>
    <p>Overhead over original</p>
    <p>Logic: 7%</p>
    <p>Storage: 12.5%</p>
    <p>Clock frequency: none</p>
    <p>Application performance</p>
    <p>Check/propagate tags  no slowdown</p>
    <p>Overhead depends on SW analysis  Frequency of traps, SW complexity,</p>
    <p>Worst-case example from experiments</p>
    <p>Filtering low-level false positives/negatives</p>
    <p>Bzip2: +33% with Rakshas user-level traps</p>
    <p>Bzip2: +280% with OS trapsGR-CPCI-XC2V</p>
    <p>Leon-3</p>
    <p>@40MHz</p>
    <p>DRAM</p>
    <p>Ethernet</p>
    <p>AoE</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Security ExperimentsSecurity Experiments</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>traceroute C Double Free Tainted data ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wabbit PHP Directory Traversal Escape Apache root w. tainted ..</p>
    <p>OpenSSH C Command Injection Execve tainted file</p>
    <p>ProFTPD C SQL Injection Tainted SQL command</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>PhpSysInfo PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Unmodified Sparc binaries from real-world programs  Basic/net utilities, servers, web apps, search engine</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Security ExperimentsSecurity Experiments</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>traceroute C Double Free Tainted data ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wabbit PHP Directory Traversal Escape Apache root w. tainted ..</p>
    <p>OpenSSH C Command Injection Execve tainted file</p>
    <p>ProFTPD C SQL Injection Tainted SQL command</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>PhpSysInfo PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Protection against low-level memory corruptions  Both control &amp; non-control data attacks</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Security ExperimentsSecurity Experiments</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>traceroute C Double Free Tainted data ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wabbit PHP Directory Traversal Escape Apache root w. tainted ..</p>
    <p>OpenSSH C Command Injection Execve tainted file</p>
    <p>ProFTPD C SQL Injection Tainted SQL command</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>PhpSysInfo PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>1st DIFT architecture to detect semantic attacks  Without the need to recompile applications</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Security ExperimentsSecurity Experiments</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>traceroute C Double Free Tainted data ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wabbit PHP Directory Traversal Escape Apache root w. tainted ..</p>
    <p>OpenSSH C Command Injection Execve tainted file</p>
    <p>ProFTPD C SQL Injection Tainted SQL command</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>PhpSysInfo PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Protection is independent of programming language  Catch suspicious behavior, regardless of language choice</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>HW Policies for Security ExperimentsHW Policies for Security Experiments</p>
    <p>Concurrent protection using 4 policies</p>
    <p>Propagate on arithmetic, load/store, logical  Check on tainted pointer/PC use  Trap handler untaints data validated by user code</p>
    <p>Propagate on arithmetic, load/store, logical  No checks</p>
    <p>No propagation  Check on system call in untrusted mode  Trap handler invokes proper SW analysis</p>
    <p>Handler taints its code &amp; data  Check on fetch/loads/stores in untrusted mode</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Lessons LearnedLessons Learned</p>
    <p>HW support for fine-grain tainting is crucial</p>
    <p>For both high-level and low-level attacks</p>
    <p>Provides fine-grain info to separate legal uses from attacks</p>
    <p>Lesson from high-level attacks</p>
    <p>Check for attacks at system calls</p>
    <p>Provides complete mediation, independent language/library</p>
    <p>Lessons from low-level attack</p>
    <p>Fixed policies from previous DIFT systems are broken  False positives &amp; negatives even within glibc</p>
    <p>Problem: what constitutes validation of tainted data?</p>
    <p>Need new SW analysis to couple with HW tainting  Rakshas flexibility and extensibility are crucial</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>ConclusionsConclusions</p>
    <p>Raksha: flexible DIFT architecture for SW security</p>
    <p>Protects against high-level &amp; low-level attacks</p>
    <p>Protects against multiple concurrent attacks</p>
    <p>Protects OS code (future work)</p>
    <p>Raksha characteristics</p>
    <p>Robust  applicable to high-level &amp; low-level attacks</p>
    <p>Flexible  programmable HW; extensible through SW</p>
    <p>Practical  works with any binary</p>
    <p>End-to-end  applicable to OS</p>
    <p>Fast  HW tainting &amp; fast security traps</p>
  </div>
  <div class="page">
    <p>ISCA07</p>
    <p>Questions? Questions?</p>
    <p>Want to use Raksha?</p>
    <p>Keep an eye on http://raksha.stanford.edu</p>
    <p>Raksha port to Xilinx XUP board ($300 for academics)</p>
    <p>Full RTL + Linux distribution</p>
    <p>Expected release date in early July</p>
  </div>
</Presentation>
