<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CleanOS: Limiting Mobile Data Exposure with Idle Eviction Yang Tang, Phillip Ames, Sravan Bhamidipati, Ashish Bijlani, Roxana Geambasu, Nikhil Sarda Columbia University</p>
    <p>Columbia University 1 CleanOS: Limiting Mobile Data Exposure with Idle Eviction</p>
  </div>
  <div class="page">
    <p>Mobiles are replacing desktops as primary computing platform</p>
    <p>The Transition to Mobile Devices</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 2</p>
    <p>Desktops Mobile Devices</p>
    <p>Linux, OS X, Windows  Emails, Web browsers, Office</p>
    <p>Android, iOS, Windows Phone  Emails, Web browsers, G Docs + New, fun, mobile apps + Increased productivity + Pervasive connectivity</p>
  </div>
  <div class="page">
    <p>Mobiles Bring New Challenges</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 3</p>
    <p>Desktops Mobile Devices</p>
    <p>Physical security, firewalled networks</p>
    <p>Unprotected outdoors, mobiles can be easily stolen, seized, or lost</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>OSes Not Designed for Challenges  Despite threats, mobile OSes have not evolved to protect</p>
    <p>sensitive data</p>
    <p>Like desktop OSes, mobile OSes accumulate enormous sensitive data  OS doesnt securely erase deallocated data  FS doesnt securely erase deleted files  Applications hoard sensitive data for performance or convenience</p>
    <p>This data is placed at risk if device is stolen or lost  Thief can dump RAM, flash memory contents  Thief can break passwords</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 4</p>
  </div>
  <div class="page">
    <p>Examples of Exposed Data</p>
    <p>We dumped memory and SQLite DB for 14 popular Android apps</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 5</p>
    <p>App Password Contents Email   Gmail  Y! Mail   Google Docs  OI Notepad  Dropbox  KeePass   Keeper   Amazon Pageonce   Mint  Google+  Facebook  LinkedIn  TOTAL 5/14 13/14</p>
    <p>Email</p>
    <p>Default Email App:</p>
    <p>Password and email snippets are kept in cleartext RAM at all times</p>
    <p>Everything is present in cleartext SQLite DB</p>
  </div>
  <div class="page">
    <p>Examples of Exposed Data</p>
    <p>We dumped memory and SQLite DB for 14 popular Android apps</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 6</p>
    <p>App Password Contents Email   Gmail  Y! Mail   Google Docs  OI Notepad  Dropbox  KeePass   Keeper   Amazon Pageonce   Mint  Google+  Facebook  LinkedIn  TOTAL 5/14 13/14 TOTAL 5/14 13/14</p>
    <p>Overall:</p>
    <p>Captured some sensitive data from 13/14 apps</p>
    <p>All 13/14 apps hoard some sensitive data in cleartext DB/RAM</p>
    <p>9/14 apps hoard sensitive data in cleartext RAM at all times</p>
  </div>
  <div class="page">
    <p>Securing Data Is Darn Hard!  Example protection systems:</p>
    <p>Encrypted file systems  Encrypted RAM  Remote wipe-out systems</p>
    <p>Challenges / limitations:  Users dont lock their devices (57%) or configure poor passwords  Physical attacks are notoriously difficult to protect against</p>
    <p>E.g., memory dumps, cold boot attacks, breaking trusted-hardware seals can reveal data or decryption keys</p>
    <p>In general, these are imperfect stop-gaps on top OSes that were never designed with physical insecurity in mind</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 7</p>
  </div>
  <div class="page">
    <p>Time for New OS Abstractions</p>
    <p>Mobile OSes should manage sensitive data rigorously, so as to maintain the device clean at any point in time in anticipation of device theft/loss</p>
    <p>If device is stolen or lost: 1. The minimal amount of sensitive data is exposed 2. User retains post-theft control over unexposed data</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 8</p>
  </div>
  <div class="page">
    <p>CleanOS  New Android-based OS that minimizes sensitive data</p>
    <p>exposure by evicting it to a trusted cloud whenever not under active use</p>
    <p>Implements sensitive data objects (SDOs)  Identifies locations of sensitive data in RAM and stable storage  Monitors its use by applications  Evicts sensitive data to the cloud whenever it is not under active use</p>
    <p>The cloud intermediates all accesses to unused SDOs and can offer a lot of useful post-loss functions:  Disable SDO access after theft  Audit SDO exposure and access  Rate-limit SDO accesses</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 9</p>
  </div>
  <div class="page">
    <p>This Talk  All layers of current OSes require cleanup  As first step, we focus on cleaning up the application layer  This talk: limit exposure of sensitive data hoarded by apps</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 10</p>
    <p>OS</p>
    <p>Libs SQLite libc</p>
    <p>App 1 App 2 App n...</p>
    <p>drivers file system</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  Architecture and Prototype</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 11</p>
  </div>
  <div class="page">
    <p>Mobile OS Insights 1. Although exposed permanently, much sensitive data is only</p>
    <p>actually used very rarely  Email password is constantly exposed, but only used upon refresh  Subjects are constantly exposed, but only used upon inbox listing  Contents are often exposed, but only used when user reads email</p>
    <p>Columbia University 12 CleanOS: Limiting Mobile Data Exposure with Idle Eviction</p>
  </div>
  <div class="page">
    <p>CleanOS Basic Functioning  Applications create SDOs and add sensitive data to them  CleanOS implements three functions for SDOs:</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 13</p>
    <p>Content SDO</p>
    <p>Password SDO</p>
    <p>Email App</p>
    <p>when user reads an email</p>
    <p>Content SDO</p>
    <p>Password SDO</p>
    <p>Email App</p>
    <p>when the app goes to the background</p>
    <p>evicted</p>
  </div>
  <div class="page">
    <p>Attacker</p>
    <p>CleanOS Increases Post-Loss Control</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 14</p>
    <p>CleanOS Minimize</p>
    <p>data on the device</p>
    <p>No access to device or cloud keys</p>
    <p>time Device</p>
    <p>lost/stolen User notices</p>
    <p>loss</p>
    <p>Tamper with device physically or in software:  break user password  decrypt all SDOs</p>
    <p>dump RAM  cold boot attacks  disable connectivity</p>
    <p>Control data accesses:</p>
    <p>audit accesses  disable or rate-limit suspicious accesses</p>
    <p>disable all accesses</p>
  </div>
  <div class="page">
    <p>The SDO Abstraction  An SDO is a logical collection of Java objects that contain</p>
    <p>sensitive data and that are related somehow  Email-password SDO: password string + all objects computed from it  Email-contents SDO: all emails in a thread  Bank-account SDO: all transactions in an account</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 15</p>
    <p>class SDO { SDO(String description, ...); // create SDO void add(Object o); // adds object to SDO void remove(Object o); // removes object from SDO  private int sdoID; // unique ID for SDO }</p>
    <p>human-readable and used for auditing</p>
    <p>used for identifying SDOs locally and remotely</p>
  </div>
  <div class="page">
    <p>Default Email app hoards passwords and subjects  Hard for apps to manage sensitive on their own</p>
    <p>With CleanOS, developers simply create SDOs and place their sensitive data in them</p>
    <p>Example: A Clean Email App</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 16</p>
    <p>SDO pwSDO = new SDO(Password of  + user); pwSDO.add(password); ... SDO emailSDO = new SDO(Email:  + mSubject); emailSDO.add(mSubject); emailSDO.add(mTextContent); emailSDO.add(mHtmlContent); emailSDO.add(mTextReply); emailSDO.add(mHtmlReply);</p>
    <p>(code adapted for clarity)</p>
  </div>
  <div class="page">
    <p>Application (Java)</p>
    <p>The CleanOS Architecture</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 17</p>
    <p>Mobile Device</p>
    <p>Dalvik VM</p>
    <p>Linux</p>
  </div>
  <div class="page">
    <p>Application (Java)</p>
    <p>CleanOS Dalvik VM</p>
    <p>pwSDO</p>
    <p>The CleanOS Architecture</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 18</p>
    <p>Mobile Device</p>
    <p>Tracking (modified</p>
    <p>TaintDroid)</p>
    <p>registerSDO( 123, com.android.email, Password of Yang, 0x1a2b)</p>
    <p>Linux</p>
    <p>Eviction (evict-idle</p>
    <p>GC)</p>
    <p>Decryption (modified</p>
    <p>interpreter)</p>
    <p>(SDO ID: 123, Key: 0x1a2b)</p>
    <p>Trusted Cloud(s)</p>
    <p>SDO Database</p>
    <p>ID: 123 App: com.android.email Desc: Password of Yang Key: 0x1a2b</p>
    <p>Audit Log Create SDO 123 App:  Desc:</p>
  </div>
  <div class="page">
    <p>Application (Java)</p>
    <p>CleanOS Dalvik VM</p>
    <p>Mobile Device</p>
    <p>Tracking (modified</p>
    <p>TaintDroid)</p>
    <p>registerSDO( 123, com.android.email, Password of Yang, 0x1a2b)</p>
    <p>Linux</p>
    <p>Eviction (evict-idle</p>
    <p>GC)</p>
    <p>Decryption (modified</p>
    <p>interpreter)</p>
    <p>(SDO ID: 123, Key: 0x1a2b)</p>
    <p>Trusted Cloud(s)</p>
    <p>SDO Database</p>
    <p>ID: 123 App: com.android.email Desc: Password of Yang Key: 0x1a2b</p>
    <p>Audit Log Create SDO 123 App:  Desc:</p>
    <p>pwSDO</p>
    <p>The CleanOS Architecture</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 19</p>
    <p>password</p>
    <p>imap://user:password@imap.server.com:143</p>
    <p>smtp://user:password@smtp.server.com:25</p>
    <p>pwSDO: Password of Yang</p>
  </div>
  <div class="page">
    <p>Application (Java)</p>
    <p>pwSDO</p>
    <p>The CleanOS Architecture</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 20</p>
    <p>Mobile Device</p>
    <p>CleanOS Dalvik VM</p>
    <p>Tracking (modified</p>
    <p>TaintDroid)</p>
    <p>Linux</p>
    <p>Eviction (evict-idle</p>
    <p>GC)</p>
    <p>Decryption (modified</p>
    <p>interpreter)</p>
    <p>(SDO ID: 123, Key: 0x1a2b)</p>
    <p>Trusted Cloud(s)</p>
    <p>SDO Database</p>
    <p>ID: 123 App: com.android.email Desc: Password of Yang Key: 0x1a2b</p>
    <p>Audit Log Create SDO 123 App:  Desc:</p>
  </div>
  <div class="page">
    <p>Application (Java)</p>
    <p>pwSDO</p>
    <p>The CleanOS Architecture</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 21</p>
    <p>Mobile Device</p>
    <p>CleanOS Dalvik VM</p>
    <p>Tracking (modified</p>
    <p>TaintDroid)</p>
    <p>Linux</p>
    <p>Eviction (evict-idle</p>
    <p>GC)</p>
    <p>Decryption (modified</p>
    <p>interpreter)</p>
    <p>sdoEvicted( com.android.email, 123)</p>
    <p>(SDO ID: 123, Key: ) Evicted</p>
    <p>Trusted Cloud(s)</p>
    <p>SDO Database</p>
    <p>ID: 123 App: com.android.email Desc: Password of Yang Key: 0x1a2b</p>
    <p>Audit Log Create SDO 123 App:  Desc:</p>
    <p>SDO 123 Evicted App:  Desc:</p>
  </div>
  <div class="page">
    <p>Application (Java)</p>
    <p>pwSDO</p>
    <p>The CleanOS Architecture</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 22</p>
    <p>Mobile Device Trusted Cloud(s)</p>
    <p>SDO Database</p>
    <p>ID: 123 App: com.android.email Desc: Password of Yang Key: 0x1a2b</p>
    <p>Audit Log Create SDO 123 App:  Desc:</p>
    <p>fetchKey( com.android.email, 123)</p>
    <p>SDO 123 Evicted App:  Desc:</p>
    <p>Fetch Key for SDO 123 App:  Desc:</p>
    <p>CleanOS Dalvik VM</p>
    <p>Tracking (modified</p>
    <p>TaintDroid)</p>
    <p>Linux</p>
    <p>Eviction (evict-idle</p>
    <p>GC)</p>
    <p>Decryption (modified</p>
    <p>interpreter)</p>
    <p>(SDO ID: 123, Key: 0x1a2b)</p>
  </div>
  <div class="page">
    <p>CleanOS uses a modified TaintDroid version to track SDOs</p>
    <p>TaintDroid uses 32-bit shadow taint tags to mark objects/ primitives with one or more taints</p>
    <p>CleanOS imposes a specific structure on taint tags  Includes new tainting scheme to propagate one SDO ID (see paper)</p>
    <p>SDO Tracking</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 23</p>
    <p>Java object / primitive 031</p>
    <p>SDO ID E</p>
  </div>
  <div class="page">
    <p>Evict-Idle Garbage Collection  To evict SDOs, we introduce a new type of Java garbage</p>
    <p>collector: the evict-idle garbage collector (eiGC)</p>
    <p>A traditional GC: deallocates only objects guaranteed to never be used in the future</p>
    <p>The eiGC: evicts objects that have not been used for a period of time, even if they might be used again in the future</p>
    <p>We run the eiGC periodically to evict idle SDOs  For any Java object that is tainted with an idle-SDOs ID, the eiGC</p>
    <p>evicts that object, setting its E bit in the tag</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 24</p>
  </div>
  <div class="page">
    <p>Sensitive Data Encryption</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 25</p>
    <p>Counter</p>
    <p>AES encryption SDO key</p>
    <p>Data field</p>
    <p>Ciphertext</p>
    <p>Primitives: ciphertext counter</p>
    <p>Metadata struct</p>
    <p>Arrays of primitives:</p>
    <p>pointer</p>
    <p>To evict a Java object, eiGC traverses it down to the data-bearing fields (primitives &amp; arrays of primitives) and encrypt those with a key generated from the SDOs key</p>
    <p>struct ArrayObject { contents[]; // evict in place counter; evicted_lock; ...;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>CleanOS Defaults  We hope for, but dont rely upon app modifications</p>
    <p>Hence, we provide a set of solid defaults:  SSL SDO  User Input SDO  Password SDO</p>
    <p>Although coarse-grained, default SDOs limit exposure of sensitive data in unmodified apps</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 26</p>
    <p>In SSL library (Java SDK):</p>
    <p>SDO sslSDO = new SDO(ssl); sslSDO.add(cleartextDataBuffer);</p>
    <p>In InputMethod (Android SDK):</p>
    <p>SDO inputSDO = new SDO(user input); SDO pwSDO = new SDO(password); if (type == InputType.TEXT_PASSWORD)</p>
    <p>pwSDO.add(text); else</p>
    <p>inputSDO.add(text);</p>
    <p>(code adapted for clarity)</p>
  </div>
  <div class="page">
    <p>Optimizations CleanOS includes a number of optimizations, which help with both performance and energy consumption</p>
    <p>active again</p>
    <p>fetches all those keys at once</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 27</p>
  </div>
  <div class="page">
    <p>Prototype  Modified Android and TaintDroid in significant ways</p>
    <p>Modified two dirty apps to use SDOs: Email and KeePass  Modifications are trivial: 7 LoC for each application</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 28</p>
  </div>
  <div class="page">
    <p>Post-Loss Services  Built a CleanOS service on Google App Engine that supports</p>
    <p>post-loss auditing</p>
    <p>Other services could be supported:  Disable keys after user notices theft  Monitor key accesses, detect anomalies, and rate-limit/disable access  Disable accesses to certain SDOs while outside a trusted network</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 29</p>
    <p>Screenshot of the CleanOS audit log</p>
  </div>
  <div class="page">
    <p>Outline  Motivation and Goals  Architecture and Prototype</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 30</p>
  </div>
  <div class="page">
    <p>Questions  Does CleanOS limit data exposure?  Does CleanOS support effective auditing?  Is CleanOS performance practical?  Is CleanOS energy consumption practical?  Is CleanOS network consumption practical?</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 31</p>
  </div>
  <div class="page">
    <p>Does CleanOS Limit Data Exposure?</p>
    <p>Default SDOs reduce exposure by 89.6-93.5%  App SDOs further reduce content exposure to 0.3%  Similar results in Facebook and Mint apps</p>
    <p>Thus, default SDOs drastically curb sensitive-data exposure</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 32</p>
    <p>Email App Version Password SDO</p>
    <p>Contents SDO</p>
    <p>Email without CleanOS 100% 95.5%</p>
    <p>Fraction of time in which sensitive data was exposed</p>
    <p>Email App Version Password SDO</p>
    <p>Contents SDO</p>
    <p>Email without CleanOS 100% 95.5% Email with default SDOs 6.5% 5.9%</p>
    <p>Email App Version Password SDO</p>
    <p>Contents SDO</p>
    <p>Email without CleanOS 100% 95.5% Email with default SDOs 6.5% 5.9% Cleaned Email with app SDOs 6.5% 0.3%</p>
  </div>
  <div class="page">
    <p>Is Auditing Effective?</p>
    <p>Thus, for best auditing properties, applications should define their own SDOs</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 33</p>
    <p>default SDOs app SDOs</p>
    <p>Email Password</p>
    <p>Email Contents</p>
    <p>A ud</p>
    <p>it P</p>
    <p>re ci</p>
    <p>si on</p>
    <p>( %</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Thus, overheads are largely unnoticeable over Wi-Fi</p>
    <p>Is CleanOS Practical (Wi-Fi)?</p>
    <p>m e</p>
    <p>(s )</p>
    <p>Android CleanOS</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 34</p>
  </div>
  <div class="page">
    <p>Is CleanOS Practical (3G)?</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Android</p>
    <p>CleanOS</p>
    <p>Optimized CleanOS</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 35</p>
  </div>
  <div class="page">
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Android</p>
    <p>CleanOS</p>
    <p>Optimized CleanOS</p>
    <p>Optimizations improve 3G performance significantly, making CleanOS practical</p>
    <p>Is CleanOS Practical (3G)?</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 36</p>
  </div>
  <div class="page">
    <p>Conclusions  Mobile OSes and apps accumulate a lot of sensitive data,</p>
    <p>exposing it to attacks if device is stolen or lost</p>
    <p>CleanOS is a new Android-based OS design that minimizes amount of sensitive data exposed on device at any time  SDO: new OS abstraction for managing sensitive data  eiGC: garbage-collector that evicts unused SDO data</p>
    <p>CleanOS brings new view on data security: minimize and audit exposure of sensitive data to attack  We believe that this view is applicable more broadly to other domains,</p>
    <p>such as datacenter and Web data security</p>
    <p>Columbia University CleanOS: Limiting Mobile Data Exposure with Idle Eviction 37</p>
  </div>
</Presentation>
