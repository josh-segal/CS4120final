<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>StripeFinder</p>
    <p>Erasure Coding of Small Objects over Key-Value Storage Devices</p>
    <p>Umesh Maheshwari Chiku Research</p>
    <p>USENIX HotStorage 2020</p>
  </div>
  <div class="page">
    <p>Context</p>
    <p>Host: key-value server  Device media: flash</p>
    <p>Device namespace: key-value  Lightweight server: no translation</p>
    <p>dev0</p>
    <p>home(k)</p>
    <p>B</p>
    <p>C</p>
    <p>dev1 G</p>
    <p>M</p>
    <p>dev2 R</p>
    <p>S</p>
    <p>dev3 T</p>
    <p>Y</p>
    <p>app</p>
    <p>key-value server</p>
    <p>.backend KV interface</p>
    <p>.frontend KV interface</p>
  </div>
  <div class="page">
    <p>Why Key-Value Devices</p>
    <p>DOUBLE WHAMMY!</p>
    <p>FINE AGAIN! BETTER?</p>
    <p>host key-value API</p>
    <p>key</p>
    <p>logical block</p>
    <p>Block Device</p>
    <p>logical block</p>
    <p>disk location</p>
    <p>FINE!</p>
    <p>disk</p>
    <p>host key-value API</p>
    <p>key</p>
    <p>logical block</p>
    <p>Block Device</p>
    <p>logical block</p>
    <p>flash block</p>
    <p>flash</p>
    <p>host key-value API</p>
    <p>key</p>
    <p>zone</p>
    <p>Zoned Device</p>
    <p>zone</p>
    <p>flash block</p>
    <p>flash</p>
    <p>host key-value API</p>
    <p>Key-Value Device</p>
    <p>key</p>
    <p>flash block</p>
    <p>flash</p>
  </div>
  <div class="page">
    <p>Erasure Coding Goals</p>
    <p>Tolerate loss of P devices (full/partial)  Restore corrupted object without full scan  Limit storage amplification</p>
    <p>replication  replicas: 1 + P  storage amp = 1 + P</p>
    <p>parity coding  stripe units: D data + P parity  storage amp = 1 + P/D</p>
    <p>dev0 dev1 dev2 dev3 dev4</p>
    <p>parity</p>
    <p>dev5</p>
    <p>paritydata data data data</p>
    <p>D = 4 P = 2</p>
    <p>app</p>
    <p>key-value server</p>
  </div>
  <div class="page">
    <p>For Large Objects: Splitting</p>
    <p>For frontend object  ~16 KB  1 frontend object  D backend objects</p>
    <p>Lightweight translation  backend_key = frontend_key . seq_num  home(k.i) = home(k)+i mod N</p>
    <p>Inefficient for small objects  degrades read throughput  creates too many objects</p>
    <p>dev0 dev1 dev2 dev3 dev4 dev5</p>
    <p>parity parity</p>
    <p>parity</p>
    <p>B0</p>
    <p>G0</p>
    <p>B1 B2 B3 B4 B5</p>
    <p>G1 G2 G3 G4</p>
    <p>R5 R0 R1 R2 R3</p>
    <p>home(k.i)</p>
    <p>G5</p>
    <p>parityR4</p>
    <p>app</p>
    <p>key-value server</p>
    <p>parity T5 T0 T1 T2T3</p>
    <p>parity T4</p>
  </div>
  <div class="page">
    <p>For Small Objects: Multi-Packing?</p>
    <p>A tempting approach  many frontend objects  1 large object  1 large object  D backend objects</p>
    <p>Heavyweight translation  large map: frontend key  backend key</p>
    <p>Defeats the purpose of key-value devices!</p>
    <p>dev0 dev1 dev2 dev3 dev4 dev5 0</p>
    <p>large map: B0, G0, R0,O1, T1, C2, M2, S2,</p>
    <p>parity parity</p>
    <p>1 2 3 4 5</p>
    <p>app</p>
    <p>key-value server</p>
  </div>
  <div class="page">
    <p>For Small Objects: Uni-Packing</p>
    <p>KVMD [1/FAST20]: uni-packing  1 frontend object  1 backend object</p>
    <p>Challenge 1: variable size objects  wait for D objects of similar size</p>
    <p>Challenge 2: find an objects stripe mates!  store per-stripe metadata</p>
    <p>dev0 dev1 dev2 dev3 dev4</p>
    <p>parity</p>
    <p>dev5</p>
    <p>parity B0 G0 R0 T0</p>
    <p>home(k.i)</p>
    <p>app</p>
    <p>key-value server</p>
  </div>
  <div class="page">
    <p>For Small Objects: Uni-Packing</p>
    <p>KVMD [1/FAST20]: uni-packing  1 frontend object  1 backend object</p>
    <p>Challenge 1: variable size objects  wait for D objects of similar size</p>
    <p>Challenge 2: find an objects stripe mates!  store per-stripe metadata</p>
    <p>Stripe metadata object  key = frontend_key . meta_num  value = sequence of keys in stripe</p>
    <p>Copies of metadata object  D siblings: one for each frontend object  P+1 clones: to tolerate P failures</p>
    <p>dev0 dev1 dev2 dev3 dev4</p>
    <p>parity</p>
    <p>dev5</p>
    <p>parity B0 G0 R0 T0</p>
    <p>home(k.i)</p>
    <p>B1 G1 R1 T1</p>
    <p>B2 G2 R2 T2</p>
    <p>B3 G3 R3T3</p>
    <p>app</p>
    <p>key-value server</p>
  </div>
  <div class="page">
    <p>The Metadata Overhead of Uni-Packing</p>
    <p>KVMD: object  1 KB, metadata is  small  Facebook [2/FAST20]: object &lt; 100 B  Object count</p>
    <p>data: D = 4; parity: P = 2  metadata: D(P+1) = 4x3 = 12 Amp = (4+2+12)/4 = 18/4 = 4.5</p>
    <p>Byte size  data: 256; parity: 256  metadata: K(1+D+P) = 16x7 = 112 Amp = (256x6+112x12)/(256x4) = 2.8</p>
    <p>parity repl unipack</p>
    <p>obj amp 1.5 3.0 4.5</p>
    <p>byte amp 1.5 3.0 2.8</p>
    <p>dev0 dev1 dev2 dev3 dev4</p>
    <p>parity</p>
    <p>dev5</p>
    <p>parity B0 G0 R0 T0</p>
    <p>home(k.i)</p>
    <p>B1 G1 R1 T1</p>
    <p>B2 G2 R2 T2</p>
    <p>B3 G3 R3T3</p>
    <p>app</p>
    <p>key-value server</p>
  </div>
  <div class="page">
    <p>StripeFinder: Reducing Byte Amplification</p>
    <p>Finder object  key = frontend_key . meta_num  value = next data key in stripe</p>
    <p>Finder ring  finds all data keys in stripe  tolerates P failures</p>
    <p>Parity key = strong hash of data keys  Byte size</p>
    <p>finder: K(1+1) = 16x2 = 32 Amp = (256x6+32x12)/(256x4) = 1.9</p>
    <p>parity repl uni-MD uni-SF</p>
    <p>obj amp 1.5 3.0 4.5 4.5</p>
    <p>byte amp 1.5 3.0 2.8 1.9</p>
    <p>dev0 dev1 dev2 dev3 dev4</p>
    <p>parity</p>
    <p>dev5</p>
    <p>parity B0 G0 R0 T0 0</p>
    <p>home(k.i)</p>
    <p>B1 G1 R1 T1</p>
    <p>B2 G2 R2 T2</p>
    <p>B3 G3 R3T3</p>
    <p>app</p>
    <p>key-value server</p>
    <p>1</p>
  </div>
  <div class="page">
    <p>Byte Amplification</p>
    <p>Parameters  P: losses to tolerate  D: data units in a stripe  X: object-key ratio</p>
    <p>Byte amplification  replication: 1+P  parity: 1+P/D  unipack-MD: (1+P/D) + (1+P)(1+D+P)/X  unipack-SF: (1+P/D) + (1+P)(1+1)/X</p>
    <p>fixed: P = 2, D = 4</p>
    <p>-- -- usable limit</p>
  </div>
  <div class="page">
    <p>Byte Amplification</p>
    <p>Parameters  P: losses to tolerate  D: data units in a stripe  X: object-key ratio</p>
    <p>Byte amplification  replication: 1+P  parity: 1+P/D  unipack-MD: (1+P/D) + (1+P)(1+D+P)/X  unipack-SF: (1+P/D) + (1+P)(1+1)/X</p>
    <p>fixed: X = 16</p>
    <p>-- -- usable limit</p>
  </div>
  <div class="page">
    <p>StripeFinder: Reducing Object Amplification</p>
    <p>Combine C finder objects  within same device, across stripes  whose keys hash to same value</p>
    <p>Combined finder object  key = hash(finder key)  can be accessed using any of C frontend keys</p>
    <p>Object amp  pre: (1+P/D) + (1+P)  post: (1+P/D) + (1+P)/C</p>
    <p>dev4 dev4</p>
    <p>parity repl uni-MD uni-SF C=1 C=10</p>
    <p>obj amp 1.5 3.0 4.5 4.5 1.8</p>
    <p>byte amp 1.5 3.0 2.8 1.9 1.9</p>
    <p>R1</p>
    <p>G2</p>
    <p>B3</p>
    <p>S1</p>
    <p>M2</p>
    <p>C3</p>
    <p>hash(k)==</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>StripeFinder reduces metadata overhead, expanding usability to smaller objects.  Even with StripeFinder, uni-packing is not practical for tiny objects.  A real implementation might expose further inefficiencies and complexities.</p>
    <p>parity code via splitting amp = 1+P/D</p>
    <p>parity code via uni-packing 1+P/D &lt; amp &lt; 3/4*(1+P)</p>
    <p>replication amp = 1+P</p>
    <p>~16 KB</p>
    <p>~448 B (KVMD) ~128 B (StripeFinder)</p>
  </div>
  <div class="page">
    <p>Future Directions</p>
    <p>Or, prove a lower bound on the amount of stripe metadata that must be maintained! 3. Question the need for parity coding on key-value devices:</p>
    <p>The amount of data stored on key-value devices might be a small fraction of overall data.  Simplicity might be more important than storage efficiency.</p>
  </div>
  <div class="page">
    <p>Information</p>
    <p>Author contact: umesh@alum.mit.edu  Acknowledgments: This work was done while author was affiliated with Hewlett Packard Enterprise.  References</p>
  </div>
</Presentation>
