<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Performant TCP for Low-Power Wireless Networks</p>
    <p>Sam Kumar, Michael P Andersen, Hyung-Sin Kim, David E. Culler</p>
    <p>University of California, Berkeley</p>
  </div>
  <div class="page">
    <p>Low-Power Wireless Personal Area Networks (LoWPANs)</p>
    <p>~1999: LoWPAN research begins, eschewing the Internet architecture</p>
    <p>~2008: IP introduced in LoWPANs</p>
    <p>~2012: IP becomes standard in LoWPANs</p>
    <p>S-MAC</p>
    <p>B-MAC</p>
    <p>X-MAC</p>
    <p>WiseMAC</p>
    <p>Trickle</p>
  </div>
  <div class="page">
    <p>uIP [ZAJ11] uIP [AMR+11]</p>
    <p>uIP [HDIV15]</p>
    <p>BLIP [KIL+15]</p>
    <p>Arch Rock [HC08]</p>
    <p>This Paper</p>
    <p>T C</p>
    <p>P G</p>
    <p>o o</p>
    <p>d p</p>
    <p>u t</p>
    <p>(k b</p>
    <p>/s )</p>
    <p>Single-Hop Multi-Hop</p>
    <p>Making TCP work well in LoWPANs</p>
    <p>Upper Bound (Single-Hop)</p>
    <p>Upper Bound (Multi-Hop)</p>
  </div>
  <div class="page">
    <p>What is a LoWPAN? LoWPAN = Low-Power Wireless Personal Area Network</p>
  </div>
  <div class="page">
    <p>Types of Wireless Networks</p>
    <p>High Cost, High Power</p>
    <p>Low Cost, Low Power</p>
    <p>Ultra-Low Cost, Ultra-Low Power</p>
    <p>Wi-Fi Wireless Local Area Network</p>
    <p>Bluetooth Cable-Replacement Channel</p>
    <p>LoWPAN Embedded Mesh Network</p>
    <p>Access Point</p>
    <p>Host</p>
    <p>Internet</p>
    <p>Follower</p>
    <p>Leader</p>
    <p>InternetBorder Router/Gateway</p>
    <p>Embedded System</p>
    <p>Smart Device</p>
    <p>Sensor</p>
  </div>
  <div class="page">
    <p>What are LoWPANs used for?</p>
    <p>Structural monitoring [2]</p>
    <p>Volcano monitoring [1]</p>
    <p>[1] Werner-Allen, G., Lorincz, K., Johnson, J., Lees, J., &amp; Welsh, M. Fidelity and yield in a volcano monitoring sensor network. In OSDI 2006. [2] Kim, S., Pakzad, S., Culler, D., Demmel, J., Fenves, G., Glaser, S., &amp; Turon, M. Health monitoring of civil infrastructures using wireless sensor networks. In IPSN 2007. [3] Hull, B., Jamieson, K., &amp; Balakrishnan, H. Mitigating congestion in wireless sensor networks. In SenSys 2004. [4] https://www.cisco.com/c/en/us/products/collateral/routers/1000-series-connected-grid-routers/datasheet-c78-741312.html [5] https://www.automatedhome.co.uk/new-products/thread-a-new-wireless-networking-protocol-for-the-home.html</p>
    <p>Indoor environment [3] Smart home and IoT [5]</p>
    <p>Smart grid [4]</p>
  </div>
  <div class="page">
    <p>Challenges of Low-Power Networks</p>
    <p>Resource Constraints</p>
    <p>Limited CPU/RAM</p>
    <p>Energy Constraints</p>
    <p>Duty-cycled radio</p>
    <p>Link-Layer Constraints</p>
    <p>Small MTU</p>
    <p>Low wireless range</p>
    <p>Multi-hop wireless</p>
  </div>
  <div class="page">
    <p>Low-Power Embedded Devices</p>
    <p>32 KiB Data Memory (RAM)</p>
    <p>250 kb/s IEEE 802.15.4 radio</p>
    <p>32-bit ARM Cortex M0+ @ 48 MHz</p>
    <p>256 KiB Code Memory (ROM)</p>
    <p>Hamilton Sensor Platform [KACKZMC18]</p>
    <p>5 centimeters Q: How should devices like these connect to the Internet?</p>
    <p>We show TCP/IP works well</p>
  </div>
  <div class="page">
    <p>LoWPAN Research has Steered Clear of TCP</p>
    <p>Expected Reasons for Poor Performance:</p>
    <p>TCP is too heavy</p>
    <p>TCPs features arent necessary and bring additional overhead</p>
    <p>TCP performs poorly in the presence of wireless loss</p>
  </div>
  <div class="page">
    <p>Finding: TCP Can Perform Well in LoWPANs</p>
    <p>Expected Reasons for Poor Performance:</p>
    <p>TCP is too heavy</p>
    <p>TCPs features arent necessary and bring additional overhead</p>
    <p>TCP performs poorly in the presence of wireless loss</p>
    <p>These would be fundamental</p>
    <p>Actual Reasons for Poor Performance:</p>
    <p>LoWPANs have a small L2 frame size  high header overhead</p>
    <p>Hidden terminals</p>
    <p>Link-layer scheduling not designed with TCP in mind</p>
    <p>These problems are fixable within the paradigm of TCP!</p>
    <p>We show how to address these issuesWe show why these dont actually apply</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
  </div>
  <div class="page">
    <p>Implementation of TCP</p>
    <p>Start with the mature, full-scale TCP implementation in FreeBSD</p>
    <p>Re-engineer key parts for the embedded platform</p>
    <p>Resulting implementation: TCPlp</p>
    <p>RFC 2525: Known TCP Implementation Problems</p>
  </div>
  <div class="page">
    <p>Resource Consumption of TCPlp</p>
    <p>TCPlp requires:   32 KiB of code memory (ROM)</p>
    <p>0.5 KiB of data memory (RAM) per connection</p>
    <p>Hamilton platform has:  256 KiB of code memory (ROM)</p>
    <p>32 KiB of data memory (RAM)</p>
  </div>
  <div class="page">
    <p>How Large do TCP Buffers Need to Be?</p>
    <p>Bandwidth-Delay Product (BDP)</p>
    <p>Empirical BDP:  2-3 KiB</p>
    <p>TCP, including buffers, fits comfortably in memory</p>
  </div>
  <div class="page">
    <p>How Many In-Flight Segments?</p>
    <p>Bandwidth-delay product is 2-3 KiB</p>
    <p>Each segment is  250 B to 500 B</p>
    <p>4 to 12 in-flight TCP segments</p>
    <p>This affects TCPs congestion control</p>
  </div>
  <div class="page">
    <p>TCP New Reno in a LoWPAN</p>
    <p>Congestion window recovers to BDP quickly (because BDP is small)</p>
    <p>TCP in a LoWPAN is more resilient to wireless losses</p>
    <p>MSS = 462 B MSS = 250 B, RED/ECN</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
  </div>
  <div class="page">
    <p>Overview of Techniques</p>
    <p>Zero-Copy Send Buffer</p>
    <p>In-Place Reassembly Queue</p>
    <p>Resource Constraints</p>
    <p>Adaptive Duty Cycle</p>
    <p>Link-Layer Queue Management</p>
    <p>Energy Constraints</p>
    <p>Atypical Maximum Segment Size</p>
    <p>Link Retry Delay</p>
    <p>Link-Layer Constraints</p>
  </div>
  <div class="page">
    <p>Focus of this Talk</p>
    <p>Zero-Copy Send Buffer</p>
    <p>In-Place Reassembly Queue</p>
    <p>Resource Constraints</p>
    <p>Adaptive Duty Cycle</p>
    <p>Link-Layer Queue Management</p>
    <p>Energy Constraints</p>
    <p>Atypical Maximum Segment Size</p>
    <p>Link Retry Delay</p>
    <p>Link-Layer Constraints</p>
  </div>
  <div class="page">
    <p>Duty-Cycling the Radio</p>
    <p>The duty cycle is the proportion of time that the radio is listening or transmitting</p>
    <p>OpenThread uses a receiver-initiated duty cycle protocol</p>
  </div>
  <div class="page">
    <p>Receiver-Initiated Radio Duty Cycle</p>
    <p>B W</p>
    <p>Frame</p>
    <p>Packets can be sent to W at any time</p>
    <p>Wall-Powered Node Radio is Always On</p>
    <p>Battery-Powered Node Radio is Duty-Cycled</p>
  </div>
  <div class="page">
    <p>Receiver-Initiated Radio Duty Cycle</p>
    <p>W</p>
    <p>Frame</p>
    <p>Packets can be sent to W at any time</p>
    <p>Packets for B wait until B is listening</p>
    <p>Wall-Powered Node Radio is Always On</p>
    <p>DataReqB</p>
    <p>Battery-Powered Node Radio is Duty-Cycled</p>
    <p>Indicates B is listening</p>
    <p>Bs idle duty cycle is determined by how frequently it sends DataReqs</p>
  </div>
  <div class="page">
    <p>How does Radio Duty Cycle affect TCP?</p>
    <p>Lets compare HTTP/TCP to CoAP</p>
    <p>Setup: B sends W a DataReq frame every 1000 ms</p>
    <p>HTTP request requires two round trips</p>
    <p>CoAP request requires one round trip</p>
  </div>
  <div class="page">
    <p>Solution: Adaptive Radio Duty Cycle</p>
    <p>Use HTTP/TCP protocol state to adapt the duty cycle</p>
    <p>Send DataReqs more frequently when a packet is expected</p>
    <p>Without Adaptive Duty Cycle With Adaptive Duty Cycle</p>
  </div>
  <div class="page">
    <p>Multiple Wireless Hops</p>
    <p>B</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>Border Router</p>
    <p>(Adaptive Duty Cycle)</p>
  </div>
  <div class="page">
    <p>Mitigating Hidden Terminals</p>
    <p>If transmission fails (no link-layer ACK), wait a random amount before retrying</p>
  </div>
  <div class="page">
    <p>Multiple Wireless Hops</p>
    <p>B</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>Border Router</p>
    <p>(Adaptive Duty Cycle)</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
  </div>
  <div class="page">
    <p>TCP uses the Link Efficiently</p>
    <p>75 kb/s goodput over one hop  540x more than prior studies</p>
    <p>Within 25% of a reasonable upper bound with headers</p>
    <p>Upper Bound (Radio)</p>
    <p>Upper Bound (Link/IP</p>
    <p>Headers)</p>
    <p>Upper Bound (Link/IP/TCP</p>
    <p>Headers)</p>
    <p>TCPlp</p>
    <p>G o</p>
    <p>o d</p>
    <p>p u</p>
    <p>t (k</p>
    <p>b /s</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>TCP uses Energy Efficiently</p>
    <p>We used TCP and CoAP for a sense-and-send task, and measured radio duty cycle over a 24-hour period</p>
    <p>Both TCP and CoAP have a radio duty cycle of 2%</p>
  </div>
  <div class="page">
    <p>Now that TCP is a Viable Option</p>
    <p>TCP allows for better interoperability</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>This material is based on work supported by the National Science Foundation Graduate Research Fellowship Program under Grant No. DGE-1752814. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.</p>
    <p>Thank you!</p>
  </div>
</Presentation>
