<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Featherweight Firefox Formalizing the Core of a Web Browser</p>
    <p>Aaron Bohannon Benjamin Pierce</p>
    <p>University of Pennsylvania</p>
    <p>June 24, 2010</p>
  </div>
  <div class="page">
    <p>Pop Quiz!</p>
  </div>
  <div class="page">
    <p>Question 1</p>
    <p>Assume d is a Document object.</p>
    <p>var e = d.createElement(&quot;div&quot;);</p>
    <p>Assume d and e remain unchanged.</p>
    <p>Is it guaranteed that e.ownerDocument == d</p>
    <p>is always true?</p>
    <p>a) Yes</p>
    <p>b) No</p>
  </div>
  <div class="page">
    <p>Question 1</p>
    <p>Assume d is a Document object.</p>
    <p>var e = d.createElement(&quot;div&quot;);</p>
    <p>Assume d and e remain unchanged.</p>
    <p>Is it guaranteed that e.ownerDocument == d</p>
    <p>is always true?</p>
    <p>a) Yes</p>
    <p>b) No</p>
  </div>
  <div class="page">
    <p>Question 1</p>
    <p>Assume d is a Document object.</p>
    <p>var e = d.createElement(&quot;div&quot;);</p>
    <p>Assume d and e remain unchanged.</p>
    <p>Is it guaranteed that e.ownerDocument == d</p>
    <p>is always true?</p>
    <p>a) Yes</p>
    <p>b) No 3 / 27</p>
  </div>
  <div class="page">
    <p>Question 1</p>
    <p>Assume d is a Document object.</p>
    <p>var e = d.createElement(&quot;div&quot;);</p>
    <p>Assume d and e remain unchanged.</p>
    <p>Is it guaranteed that e.ownerDocument == d</p>
    <p>is always true?</p>
    <p>a) Yes</p>
    <p>b) No 3 / 27</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above.</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above.</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above.</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above.</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above.</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above. 4 / 27</p>
  </div>
  <div class="page">
    <p>Question 2</p>
    <p>Which of the following can a script do to cause</p>
    <p>the browser to run (or re-run) some other script?</p>
    <p>a) Remove a script node from a document</p>
    <p>and insert it somewhere else.</p>
    <p>b) Replace a child text node of a script node.</p>
    <p>c) Assign a new value to an already-present src</p>
    <p>attribute of a script node.</p>
    <p>d) All of the above.</p>
    <p>e) None of the above. 4 / 27</p>
  </div>
  <div class="page">
    <p>Question 3</p>
    <p>A handler for a button click can always get a</p>
    <p>reference to the window in which the user clicked.</p>
    <p>a) True</p>
    <p>b) False</p>
  </div>
  <div class="page">
    <p>Question 3</p>
    <p>A handler for a button click can always get a</p>
    <p>reference to the window in which the user clicked.</p>
    <p>a) True</p>
    <p>b) False</p>
    <p>True. The handler can just use the expression</p>
    <p>self (or window).</p>
  </div>
  <div class="page">
    <p>Question 3</p>
    <p>A handler for a button click can always get a</p>
    <p>reference to the window in which the user clicked.</p>
    <p>a) True</p>
    <p>b) False</p>
    <p>No, false. self is statically scoped to refer to</p>
    <p>the window where the code is defined.</p>
  </div>
  <div class="page">
    <p>Question 3</p>
    <p>A handler for a button click can always get a</p>
    <p>reference to the window in which the user clicked.</p>
    <p>a) True</p>
    <p>b) False</p>
    <p>No, true. Button handlers can always check the</p>
    <p>ownerDocument property of the button node.</p>
  </div>
  <div class="page">
    <p>Question 3</p>
    <p>A handler for a button click can always get a</p>
    <p>reference to the window in which the user clicked.</p>
    <p>a) True</p>
    <p>b) False</p>
    <p>No, false. If a different handler runs first, it may</p>
    <p>move the button node to a different window!</p>
  </div>
  <div class="page">
    <p>Web Script Semantics</p>
    <p>Web script semantics are a bit peculiar.</p>
    <p>I Web scripts manipulate interconnected</p>
    <p>browser structures.</p>
    <p>I Web scripts are event-driven (user input,</p>
    <p>network responses, timer events, etc.).</p>
    <p>I Web scripts have interesting language</p>
    <p>constructs (first-class functions, dynamic</p>
    <p>evaluation, self, etc.).</p>
  </div>
  <div class="page">
    <p>Web Script Semantics</p>
    <p>Web script semantics are a bit peculiar.</p>
    <p>I Web scripts manipulate interconnected</p>
    <p>browser structures.</p>
    <p>I Web scripts are event-driven (user input,</p>
    <p>network responses, timer events, etc.).</p>
    <p>I Web scripts have interesting language</p>
    <p>constructs (first-class functions, dynamic</p>
    <p>evaluation, self, etc.).</p>
  </div>
  <div class="page">
    <p>Web Script Semantics</p>
    <p>Web script semantics are a bit peculiar.</p>
    <p>I Web scripts manipulate interconnected</p>
    <p>browser structures.</p>
    <p>I Web scripts are event-driven (user input,</p>
    <p>network responses, timer events, etc.).</p>
    <p>I Web scripts have interesting language</p>
    <p>constructs (first-class functions, dynamic</p>
    <p>evaluation, self, etc.).</p>
  </div>
  <div class="page">
    <p>Web Script Semantics</p>
    <p>Web script semantics are a bit peculiar.</p>
    <p>I Web scripts manipulate interconnected</p>
    <p>browser structures.</p>
    <p>I Web scripts are event-driven (user input,</p>
    <p>network responses, timer events, etc.).</p>
    <p>I Web scripts have interesting language</p>
    <p>constructs (first-class functions, dynamic</p>
    <p>evaluation, self, etc.).</p>
  </div>
  <div class="page">
    <p>Why Formalize This Stuff?</p>
    <p>I We want to perform a rigorous study of</p>
    <p>browser information security policies.</p>
    <p>I This demands a rigorous definition of</p>
    <p>browser behavior.</p>
  </div>
  <div class="page">
    <p>Why Formalize This Stuff?</p>
    <p>I We want to perform a rigorous study of</p>
    <p>browser information security policies.</p>
    <p>I This demands a rigorous definition of</p>
    <p>browser behavior.</p>
  </div>
  <div class="page">
    <p>Simplifying Assumptions</p>
    <p>I Abstract away from some lower-level details</p>
    <p>(parsing, rendering, DNS).</p>
    <p>I Make the semantics deterministic, modulo</p>
    <p>the order of input events.</p>
    <p>I Model the BOM operations semantics but</p>
    <p>not the details of the JavaScript langauge.</p>
    <p>I Omit all security mechanisms.</p>
  </div>
  <div class="page">
    <p>Simplifying Assumptions</p>
    <p>I Abstract away from some lower-level details</p>
    <p>(parsing, rendering, DNS).</p>
    <p>I Make the semantics deterministic, modulo</p>
    <p>the order of input events.</p>
    <p>I Model the BOM operations semantics but</p>
    <p>not the details of the JavaScript langauge.</p>
    <p>I Omit all security mechanisms.</p>
  </div>
  <div class="page">
    <p>Simplifying Assumptions</p>
    <p>I Abstract away from some lower-level details</p>
    <p>(parsing, rendering, DNS).</p>
    <p>I Make the semantics deterministic, modulo</p>
    <p>the order of input events.</p>
    <p>I Model the BOM operations semantics but</p>
    <p>not the details of the JavaScript langauge.</p>
    <p>I Omit all security mechanisms.</p>
  </div>
  <div class="page">
    <p>Simplifying Assumptions</p>
    <p>I Abstract away from some lower-level details</p>
    <p>(parsing, rendering, DNS).</p>
    <p>I Make the semantics deterministic, modulo</p>
    <p>the order of input events.</p>
    <p>I Model the BOM operations semantics but</p>
    <p>not the details of the JavaScript langauge.</p>
    <p>I Omit all security mechanisms.</p>
  </div>
  <div class="page">
    <p>Formalization Overview</p>
    <p>Weve designed a formal web browser semantics</p>
    <p>that . . .</p>
    <p>I includes many key browser features.</p>
    <p>I operates in a small-step style.</p>
    <p>I is declarative (in the style of logical</p>
    <p>inference rules).</p>
    <p>I is written down in a strongly-typed</p>
    <p>programming language (OCaml).</p>
  </div>
  <div class="page">
    <p>Formalization Overview</p>
    <p>Weve designed a formal web browser semantics</p>
    <p>that . . .</p>
    <p>I includes many key browser features.</p>
    <p>I operates in a small-step style.</p>
    <p>I is declarative (in the style of logical</p>
    <p>inference rules).</p>
    <p>I is written down in a strongly-typed</p>
    <p>programming language (OCaml).</p>
  </div>
  <div class="page">
    <p>Formalization Overview</p>
    <p>Weve designed a formal web browser semantics</p>
    <p>that . . .</p>
    <p>I includes many key browser features.</p>
    <p>I operates in a small-step style.</p>
    <p>I is declarative (in the style of logical</p>
    <p>inference rules).</p>
    <p>I is written down in a strongly-typed</p>
    <p>programming language (OCaml).</p>
  </div>
  <div class="page">
    <p>Formalization Overview</p>
    <p>Weve designed a formal web browser semantics</p>
    <p>that . . .</p>
    <p>I includes many key browser features.</p>
    <p>I operates in a small-step style.</p>
    <p>I is declarative (in the style of logical</p>
    <p>inference rules).</p>
    <p>I is written down in a strongly-typed</p>
    <p>programming language (OCaml).</p>
  </div>
  <div class="page">
    <p>Included Features</p>
    <p>I Multiple windows and pages</p>
    <p>I Mutable document node trees</p>
    <p>I Buttons and text boxes with handlers</p>
    <p>I Network requests and responses with</p>
    <p>cookies</p>
    <p>I Scripts with first-class functions, eval, and</p>
    <p>AJAX requests</p>
  </div>
  <div class="page">
    <p>Omitted Features</p>
    <p>I Browsing history</p>
    <p>I HTTP error codes and redirects</p>
    <p>I timeout events in scripts</p>
    <p>I javascript: URLs</p>
    <p>I file: URLs</p>
  </div>
  <div class="page">
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Whole Browser Formalizations</p>
    <p>I HTML5</p>
    <p>I Yu, Chander, Islam, and Serikov: JavaScript</p>
    <p>Instrumentation for Browser Security</p>
    <p>(POPL 2007).</p>
    <p>I Yoshihama, Tateishi, Tabuchi, and</p>
    <p>Matsumoto: Information-Flow Based</p>
    <p>Access Control for Web Browsers (IEICE</p>
    <p>Transactions, May 2009).</p>
  </div>
  <div class="page">
    <p>Whole Browser Formalizations</p>
    <p>I HTML5</p>
    <p>I Yu, Chander, Islam, and Serikov: JavaScript</p>
    <p>Instrumentation for Browser Security</p>
    <p>(POPL 2007).</p>
    <p>I Yoshihama, Tateishi, Tabuchi, and</p>
    <p>Matsumoto: Information-Flow Based</p>
    <p>Access Control for Web Browsers (IEICE</p>
    <p>Transactions, May 2009).</p>
  </div>
  <div class="page">
    <p>Whole Browser Formalizations</p>
    <p>I HTML5</p>
    <p>I Yu, Chander, Islam, and Serikov: JavaScript</p>
    <p>Instrumentation for Browser Security</p>
    <p>(POPL 2007).</p>
    <p>I Yoshihama, Tateishi, Tabuchi, and</p>
    <p>Matsumoto: Information-Flow Based</p>
    <p>Access Control for Web Browsers (IEICE</p>
    <p>Transactions, May 2009).</p>
  </div>
  <div class="page">
    <p>Other Formalizations</p>
    <p>I Maffeis, Mitchell, and Taly: An Operational</p>
    <p>Semantics for JavaScript (ASPLAS 2008).</p>
    <p>I Gardner, Smith, Wheelhouse, and Zarfaty:</p>
    <p>Local Hoare Reasoning About DOM</p>
    <p>(PODS 2008).</p>
    <p>I Akhawe, Barth, Lam, Mitchell, and Song:</p>
    <p>Towards a Formal Foundation of Web</p>
    <p>Security (CSF 2010).</p>
  </div>
  <div class="page">
    <p>Formalization Details</p>
  </div>
  <div class="page">
    <p>Reactive Systems</p>
    <p>Consumer States</p>
    <p>Producer States</p>
  </div>
  <div class="page">
    <p>Reactive Systems</p>
    <p>Consumer States</p>
    <p>Producer States</p>
    <p>i</p>
  </div>
  <div class="page">
    <p>Reactive Systems</p>
    <p>Consumer States</p>
    <p>Producer States</p>
    <p>i</p>
    <p>o</p>
  </div>
  <div class="page">
    <p>Reactive Systems</p>
    <p>Consumer States</p>
    <p>Producer States</p>
    <p>i</p>
    <p>o</p>
    <p>o</p>
  </div>
  <div class="page">
    <p>Web Browser Consumer State</p>
    <p>Window store</p>
    <p>Page store</p>
    <p>Node store</p>
    <p>Activation record store</p>
    <p>Cookie store List of open</p>
    <p>network connections</p>
  </div>
  <div class="page">
    <p>Web Browser Producer State</p>
    <p>Window store</p>
    <p>Page store</p>
    <p>Node store</p>
    <p>Activation record store</p>
    <p>Cookie store List of open</p>
    <p>network connections</p>
    <p>Task list</p>
  </div>
  <div class="page">
    <p>Window Store Window</p>
    <p>store Page store</p>
    <p>Node store</p>
    <p>Activation record store</p>
    <p>Cookie store List of open</p>
    <p>network connections</p>
    <p>Task list</p>
    <p>window:</p>
    <p>name string (optional)</p>
    <p>opener reference to a window (optional)</p>
    <p>current page reference to a page</p>
  </div>
  <div class="page">
    <p>Page Store Window</p>
    <p>store Page store</p>
    <p>Node store</p>
    <p>Activation record store</p>
    <p>Cookie store List of open</p>
    <p>network connections</p>
    <p>Task list</p>
    <p>page:</p>
    <p>address URL</p>
    <p>root node reference to a node</p>
    <p>environment reference to an activation record</p>
    <p>script queue list of scripts or placeholders</p>
  </div>
  <div class="page">
    <p>Network Connection List Window</p>
    <p>store Page store</p>
    <p>Node store</p>
    <p>Activation record store</p>
    <p>Cookie store List of open</p>
    <p>network connections</p>
    <p>Task list</p>
    <p>network connection:</p>
    <p>I connection for document request:</p>
    <p>URL, reference to a window</p>
    <p>I connection for script request:</p>
    <p>URL, reference to a node</p>
    <p>I connection for AJAX request:</p>
    <p>URL, reference to a page, expression</p>
  </div>
  <div class="page">
    <p>Selected Inputs</p>
    <p>From the user:</p>
    <p>I load in new window(url )</p>
    <p>I click button(win, n)</p>
    <p>From the network:</p>
    <p>I receive(d , n, resp)</p>
  </div>
  <div class="page">
    <p>Selected Outputs</p>
    <p>To the user:</p>
    <p>I win closed(win)</p>
    <p>I page updated(win, doc )</p>
    <p>To the network:</p>
    <p>I send(d , req uri , cookies, msg )</p>
  </div>
  <div class="page">
    <p>Whats Next?</p>
  </div>
  <div class="page">
    <p>Using Our Browser Semantics</p>
    <p>I Primarily, our formalization should be</p>
    <p>viewed as a human-readable template.</p>
    <p>I Others may be interested in slightly</p>
    <p>different features.</p>
    <p>I The semantics may need to be translated to</p>
    <p>a different machine-consumable form.</p>
  </div>
  <div class="page">
    <p>Using Our Browser Semantics</p>
    <p>I Primarily, our formalization should be</p>
    <p>viewed as a human-readable template.</p>
    <p>I Others may be interested in slightly</p>
    <p>different features.</p>
    <p>I The semantics may need to be translated to</p>
    <p>a different machine-consumable form.</p>
  </div>
  <div class="page">
    <p>Using Our Browser Semantics</p>
    <p>I Primarily, our formalization should be</p>
    <p>viewed as a human-readable template.</p>
    <p>I Others may be interested in slightly</p>
    <p>different features.</p>
    <p>I The semantics may need to be translated to</p>
    <p>a different machine-consumable form.</p>
  </div>
  <div class="page">
    <p>Work in Progress</p>
    <p>I Translate browser formaliztion into Coq.</p>
    <p>I Define security policies for the browser in</p>
    <p>terms of reactive noninterference</p>
    <p>(Bohannon, et al., CCS 2009).</p>
    <p>I Prove the soundness of some enforcement</p>
    <p>mechanisms for these policies.</p>
    <p>I Gain a better understanding of end-to-end</p>
    <p>web browser security.</p>
  </div>
  <div class="page">
    <p>Work in Progress</p>
    <p>I Translate browser formaliztion into Coq.</p>
    <p>I Define security policies for the browser in</p>
    <p>terms of reactive noninterference</p>
    <p>(Bohannon, et al., CCS 2009).</p>
    <p>I Prove the soundness of some enforcement</p>
    <p>mechanisms for these policies.</p>
    <p>I Gain a better understanding of end-to-end</p>
    <p>web browser security.</p>
  </div>
  <div class="page">
    <p>Work in Progress</p>
    <p>I Translate browser formaliztion into Coq.</p>
    <p>I Define security policies for the browser in</p>
    <p>terms of reactive noninterference</p>
    <p>(Bohannon, et al., CCS 2009).</p>
    <p>I Prove the soundness of some enforcement</p>
    <p>mechanisms for these policies.</p>
    <p>I Gain a better understanding of end-to-end</p>
    <p>web browser security.</p>
  </div>
  <div class="page">
    <p>Work in Progress</p>
    <p>I Translate browser formaliztion into Coq.</p>
    <p>I Define security policies for the browser in</p>
    <p>terms of reactive noninterference</p>
    <p>(Bohannon, et al., CCS 2009).</p>
    <p>I Prove the soundness of some enforcement</p>
    <p>mechanisms for these policies.</p>
    <p>I Gain a better understanding of end-to-end</p>
    <p>web browser security.</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
