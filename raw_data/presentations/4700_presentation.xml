<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Advanced Database Aggregation Query Processing</p>
    <p>Donghui Zhang</p>
    <p>Computer Science Department</p>
    <p>University of California, Riverside</p>
  </div>
  <div class="page">
    <p>Aggregation Problem  Maintain a set of objects, each</p>
    <p>having a value. Given a condition which holds for a sub-set of objects, compute the total value of objects in this sub-set.</p>
    <p>E.g. find the total salary of employees who joined the company less than a year.</p>
  </div>
  <div class="page">
    <p>Aggregation over Objects with Extent  Objects with extent: versus point objects.  Real-life applications: temporal, spatial,</p>
    <p>etc.  An employee works for the company</p>
    <p>during a certain period of time; find the total salary of employees who worked for the company during 1999.</p>
    <p>A rainfall record occurs within a spatial region; find the total volume of rainfall in Los Angeles.</p>
  </div>
  <div class="page">
    <p>Functional Box-Sum  Maintain a set of objects, each</p>
    <p>having a box and a value function;  given query box q, compute the total</p>
    <p>value of objects intersecting q, where  the contribution of an object is the</p>
    <p>integral of its value function over its intersection with q.</p>
  </div>
  <div class="page">
    <p>Functional Box-Sum</p>
    <p>y</p>
    <p>functional box-sum: 4*50+3*12 = 236.</p>
  </div>
  <div class="page">
    <p>Moreover, object value can be a function;  FBS=</p>
    <p>Functional Box-Sum</p>
    <p>y</p>
    <p>20</p>
    <p>15</p>
  </div>
  <div class="page">
    <p>Straightforward Approaches 1. No index. For each query, scan</p>
    <p>through all records. Not efficient.</p>
  </div>
  <div class="page">
    <p>Our Solution  We reduce the functional box-sum</p>
    <p>problem into a simpler problem (the dominance-sum problem) and we build an index specialized for computing the dominance-sums.</p>
    <p>Instead of storing the original data, the specialized index stores specially aggregated information, which leads to O(log2n) query time.</p>
  </div>
  <div class="page">
    <p>Functional Box-Sum  OIFBS</p>
    <p>A special case of functional box-sum is OIFBS (Origin-Involved Functional BoxSum), where the query box contains the origin of space.</p>
    <p>A functional Box-Sum query can be reduced to the OIFBS: we compute the OIFBS from origin to upper right corner of the query box, then subtract the parts to the left and below the query box (which are also OIFBS queries).</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>y</p>
    <p>Dominance-Sum  Maintain a set of weighted points;  Given query point p, compute total weight</p>
    <p>of objects dominated by p (i.e. to the lower left of p).</p>
    <p>dominance-sum = 18</p>
  </div>
  <div class="page">
    <p>OIFBS  Dominance-Sum</p>
    <p>Idea: to insert an object (with a rectangular region), insert its corner points, associating a function with each corner.</p>
    <p>To compute an OIFBS regarding box [origin, p], compute the dominancesum regarding p, i.e. the summation of functions associated with points dominated by p.</p>
  </div>
  <div class="page">
    <p>New Dominance-Sum Index</p>
    <p>For the dominance-sum problem, we propose the BA-tree:</p>
    <p>a k-d-B-tree augmented with additional information at index records.</p>
    <p>O(log2n) query time, when balanced.</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Functional box-sum query cost</p>
    <p>aR_d0 aR_d2 BAT_d0 BAT_d2</p>
    <p>IO</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>Summary of Our Aggregation Work</p>
    <p>The functional box-sum solution described here is to appear in [PODS02].</p>
    <p>Also in [PODS02], we solved a variation: a simple box-sum aggregation problem, which is to find the total value of objects intersecting the query rectangle.</p>
    <p>We solved some other aggregation problems...</p>
  </div>
  <div class="page">
    <p>Range-Temporal Aggregation  Maintain a set of temporal records,</p>
    <p>each having a key, a value and a time interval. Given a key range r and time interval i, compute the total value of records whose keys are in r and whose intervals intersect i.</p>
    <p>Appeared in [PODS01].</p>
  </div>
  <div class="page">
    <p>Temporal Aggregation over Data Streams  Temporal aggregation in the</p>
    <p>circumstance when records accumulate in a streaming manner. There is limited storage, but we want to answer aggregation queries both for recent data and for older data.</p>
    <p>To appear in [EDBT02].</p>
  </div>
  <div class="page">
    <p>Box-Max Aggregation</p>
    <p>Maintain a set of spatial objects, each having a spatial region and a value. Given a query region r, find the Min/Max value over all objects intersecting r.</p>
    <p>Appeared in [GIS01].</p>
  </div>
  <div class="page">
    <p>Conclusions  We have proposed specialized index</p>
    <p>structures for various complex aggregation problems.</p>
    <p>In all cases, our proposed methods have much better query performance than the existing approaches, sometimes over 100 times faster.</p>
    <p>We recommend that these indices should be implemented in commercial DBMS in circumstances when the aggregates need to be computed very fast.</p>
  </div>
</Presentation>
