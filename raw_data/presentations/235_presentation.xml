<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Gautam Altekar and Ion Stoica University of California, Berkeley</p>
  </div>
  <div class="page">
    <p>Large-scale, data-intensive, distributed apps</p>
    <p>Debugging datacenter software is really hard</p>
    <p>Datacenter software?</p>
    <p>Non-determinism  Cant reproduce</p>
    <p>failures  Cant cyclically</p>
    <p>debug</p>
    <p>Hard?</p>
    <p>How can we reproduce non-deterministic failures in datacenter software?</p>
  </div>
  <div class="page">
    <p>Why deterministic replay?  Model checking, testing, verification</p>
    <p>Goal: find errors pre-production</p>
    <p>Cant catch all errors</p>
    <p>Cant reproduce production failures</p>
    <p>Record Replay</p>
    <p>Non-deterministic data (e.g., inputs, thread interleaving)</p>
    <p>Log file</p>
    <p>Non-deterministic data</p>
    <p>Generate replica of original run, hence failures</p>
  </div>
  <div class="page">
    <p>Always-on production use</p>
    <p>&lt; 5% slowdown</p>
    <p>Log no more than traditional console logs (100 Kbps)</p>
    <p>High fidelity replay</p>
    <p>Reproduce the most difficult of non-deterministic bugs</p>
  </div>
  <div class="page">
    <p>Always-on operation?</p>
    <p>High fidelity replay?</p>
    <p>FDR, Capo, CoreDet</p>
    <p>No Yes</p>
    <p>VMWare, PRES, ReSpec</p>
    <p>Yes No</p>
    <p>ODR, ESD, SherLog</p>
    <p>Yes No</p>
    <p>R2 Yes No</p>
    <p>None suitable for the datacenter</p>
  </div>
  <div class="page">
    <p>Build a Data Center Replay System</p>
    <p>Record efficiently ~20% overhead, 100 KBps</p>
    <p>High replay fidelity  Replays difficult</p>
    <p>bugs</p>
    <p>Target Design for</p>
    <p>Large-scale, dataintensive, distributed apps</p>
    <p>Linux/x86</p>
  </div>
  <div class="page">
    <p>Overview  Approach  Testing the</p>
    <p>Hypothesis  Preliminary</p>
    <p>Results  Ongoing</p>
    <p>Work</p>
  </div>
  <div class="page">
    <p>For debugging, not necessary to produce identical run</p>
    <p>Often suffices to produce any run that has same control-plane behavior</p>
  </div>
  <div class="page">
    <p>Datacenter apps have two components</p>
    <p>Processes the data Simple, High traffic</p>
    <p>Checksum verification String matching</p>
    <p>Manages the data Complicated, Low traffic</p>
    <p>Distributed data placement Replica consistency</p>
  </div>
  <div class="page">
    <p>Relax guarantees to control-plane determinism</p>
    <p>Meet all requirements for a practical datacenter replay system</p>
  </div>
  <div class="page">
    <p>Overview  Approach  Testing the</p>
    <p>Hypothesis  Preliminary</p>
    <p>Results  Ongoing</p>
    <p>Work</p>
  </div>
  <div class="page">
    <p>Experimentally show the control plane has: 1. Higher bug rates, by far</p>
    <p>Most bugs must stem from control plane code</p>
    <p>Implies high fidelity replay</p>
    <p>Consumes and generates very little I/O</p>
    <p>Implies low overhead recording</p>
  </div>
  <div class="page">
    <p>Control Plane Data Plane</p>
    <p>Evidence support the hypothesis</p>
    <p>Bug Rate Data Rate Bug Rate Data Rate</p>
  </div>
  <div class="page">
    <p>Overview  Hypothesis  Testing the</p>
    <p>Hypothesis How?</p>
    <p>Preliminary Results</p>
    <p>Ongoing Work</p>
  </div>
  <div class="page">
    <p>To make statements about planes, we must first identify them</p>
    <p>Goal: Classify code as control and data plane code</p>
    <p>Hard: tied to program semantics</p>
    <p>Obvious approach: Manually identify plane code</p>
    <p>Error prone and unreliable</p>
  </div>
  <div class="page">
    <p>User data? E.g., file uploaded to HDFS</p>
    <p>Taint-flow analysis</p>
  </div>
  <div class="page">
    <p>Instruction-level</p>
    <p>Works with apps written in arbitrary languages</p>
    <p>Dynamic</p>
    <p>Easier to get accurate results (e.g., in the presence of dynamically generated code)</p>
    <p>Distributed</p>
    <p>Avoids need to identify user-data entry points for each component</p>
  </div>
  <div class="page">
    <p>Its imprecise</p>
    <p>We may have misidentified user data (unlikely)</p>
    <p>We dont propagate taint across tainted-pointer dereferences (to avoid false positives)</p>
    <p>Its incomplete</p>
    <p>Dynamic analysis often has low code coverage</p>
    <p>Results do not generalize to arbitrary executions</p>
  </div>
  <div class="page">
    <p>Overview  Hypothesis  Testing the</p>
    <p>Hypothesis  Evaluation  Ongoing</p>
    <p>Work</p>
  </div>
  <div class="page">
    <p>Distributed applications</p>
    <p>Hypertable: Key-value store</p>
    <p>KFS/CloudStore: Filesystem</p>
    <p>OpenSSH (scp): Secure file transfer</p>
    <p>Configuration</p>
    <p>1 client, 1 of each system node</p>
    <p>10 GB user-data file</p>
    <p>Kept simple to ease understanding</p>
  </div>
  <div class="page">
    <p>Bug rates</p>
    <p>Indirect: code size (static x86 instructions executed)</p>
    <p>Direct: Bug-report count (Bugzilla)</p>
    <p>Data rates</p>
    <p>Fraction of total I/O</p>
  </div>
  <div class="page">
    <p>Overview  Hypothesis  Testing the</p>
    <p>Hypothesis  Evaluation</p>
    <p>OpenSSH</p>
    <p>Ongoing Work</p>
  </div>
  <div class="page">
    <p>Control (%) Data (%) Total (K)</p>
    <p>Agent 100 0 11</p>
    <p>Server 97.8 2.2 103</p>
    <p>Client (scp) 98.9 1.1 69</p>
    <p>Average 98.9 1.1 61</p>
    <p>Even components that touch user-data are almost exclusively control plane</p>
    <p>OpenSSH: Executed Static Instructions</p>
  </div>
  <div class="page">
    <p>OpenSSH: Bugzilla Report Count</p>
    <p>Control (%) Data (%) Total</p>
    <p>Agent 100 0 2</p>
    <p>Server 100 0 215</p>
    <p>Client (scp) 99 1 153</p>
    <p>Average 99.7 0.3 123</p>
    <p>Control plane is the most error-prone, even in components that touch user-data</p>
  </div>
  <div class="page">
    <p>(1) Control plane executes many functions to perform its core tasks</p>
    <p>Control Data</p>
    <p>Agent 13 0</p>
    <p>Server 100 1</p>
    <p>Client (scp)</p>
    <p>Average 47 1</p>
    <p>OpenSSH: # of functions hosting top 90% of dynamic instructions</p>
    <p>Most active data plane functions:</p>
    <p>aes_encrypt() and aes_decrypt()</p>
  </div>
  <div class="page">
    <p>(2) Control plane relies heavily of custom code</p>
    <p>Control (%)</p>
    <p>Data (%)</p>
    <p>Agent 82.7 0</p>
    <p>Server 93.6 99.6</p>
    <p>Client (scp)</p>
    <p>Average 90.8 99.8</p>
    <p>OpenSSH: % of Dynamic Instructions Issued from Libraries</p>
    <p>Data plane often relies on well-tested libraries</p>
    <p>(e.g., libc, libcrypto, etc.)</p>
  </div>
  <div class="page">
    <p>Control (%) Data (%) Total (GB)</p>
    <p>Agent 100 0 0.001</p>
    <p>Server 0.8 99.2 20.2</p>
    <p>Client (scp) 0.6 99.4 20.2</p>
    <p>What should I say here?</p>
  </div>
  <div class="page">
    <p>How well do results generalize?</p>
    <p>To other code paths</p>
    <p>To other applications</p>
    <p>How do we achieve control plane determinism?</p>
    <p>Should we just ignore the data plane?</p>
    <p>Should we use inference techniques?</p>
  </div>
  <div class="page">
    <p>What have we argued? Control-plane determinism enables record</p>
    <p>efficient, high-fidelity datacenter replay</p>
    <p>Whats next? More application data points</p>
    <p>Questions?</p>
  </div>
</Presentation>
