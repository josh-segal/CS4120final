<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ariadne: A Minimal Approach to State Continuity</p>
    <p>Raoul Strackx Frank Piessens</p>
    <p>iMinds-DistriNet, KU Leuven, Belgium</p>
    <p>August 12, 2016</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 1 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Outline</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 2 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>A new approach</p>
    <p>After ASLR, stack guard, . . .exploits are still rampant</p>
    <p>The TCB is simply too large</p>
    <p>Main idea: Protect security sensitive application parts</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 3 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>A new approach</p>
    <p>After ASLR, stack guard, . . .exploits are still rampant</p>
    <p>The TCB is simply too large</p>
    <p>Main idea: Protect security sensitive application parts</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 3 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>A new approach</p>
    <p>After ASLR, stack guard, . . .exploits are still rampant</p>
    <p>The TCB is simply too large</p>
    <p>Main idea: Protect security sensitive application parts</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 3 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Dont Miss a Sec art installation by Monica Bonvicini (2004)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Dont Miss a Sec art installation by Monica Bonvicini (2004)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Protected-Module Architectures</p>
    <p>Key properties:</p>
    <p>Isolation: Program-counter-based access control:</p>
    <p>Access modules only from within Entry modules through entry points</p>
    <p>Key derivation: Unique key per module</p>
    <p>Intel SGX introduced in Skylake (Aug 2015)</p>
    <p>k = kdf(Kplatform, hash(moduleinitial_state))</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 4 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>What we can guarantee:</p>
    <p>SW properties of modules (in theory1) cannot be broken by SW attacks</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 5 / 27</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>What we can guarantee:</p>
    <p>SW properties of modules (in theory1) cannot be broken by SW attacks</p>
    <p>While the system executes continuously</p>
    <p>. . . but in real-life systems crash, reboot and power goes down</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 5 / 27</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Outline</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 6 / 27</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Making the module stateful</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 7 / 27</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Providing State Continuity</p>
    <p>Attack: Providing stale state</p>
    <p>Store the initial state</p>
    <p>Guess the password 3 times</p>
    <p>Crash the system</p>
    <p>Provide the initial state stored on disk as being fresh</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 8 / 27</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>state continuity: Requirements</p>
    <p>No rollback: prevent the use of stale data</p>
    <p>Continuous: output result of provided input, or never advance at all</p>
    <p>Liveness: a crash of the machine must not leave the machine unable to advance</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 9 / 27</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>state continuity: Requirements</p>
    <p>No rollback: prevent the use of stale data</p>
    <p>Continuous: output result of provided input, or never advance at all</p>
    <p>Liveness: a crash of the machine must not leave the machine unable to advance</p>
    <p>How can we reduce strain on access-controled non-volatile memory, without an UPS23?</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 9 / 27</p>
  </div>
  <div class="page">
    <p>libariadne</p>
    <p>Outline</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 10 / 27</p>
  </div>
  <div class="page">
    <p>libariadne</p>
    <p>libariadnes interface</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 11 / 27</p>
  </div>
  <div class="page">
    <p>libariadne</p>
    <p>A two-step approach</p>
    <p>Step I: State-continuity using a monotonic counter</p>
    <p>Step II: Reducing NVRAM wear &amp; performance overhead</p>
    <p>.. .we only discuss state-continuity for a single module here</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 12 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>A Library for State-continuous Storage</p>
    <p>Reducing the impact of side-channel attacks:</p>
    <p>Requirement: Consider all sources of non-determinism as input</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 13 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Packages: States stored on disk</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 14 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 1</p>
    <p>Crash!</p>
    <p>No such package exists!</p>
    <p>Imagine a crash.. .</p>
    <p>The fresh package was not stored yet!</p>
    <p>Violates liveness requirement</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 15 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 1</p>
    <p>No such package exists!</p>
    <p>Imagine a crash.. .</p>
    <p>The fresh package was not stored yet!</p>
    <p>Violates liveness requirement</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 15 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 1</p>
    <p>Imagine a crash.. .</p>
    <p>The fresh package was not stored yet!</p>
    <p>Violates liveness requirement</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 15 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>write_hdd( create_pkg( b, *cntr + 1 ) ); 4</p>
    <p>Crash!</p>
    <p>Crash!</p>
    <p>True, for both packages!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000 *cntr = 1001 HDD contents:</p>
    <p>Package( (s0, i0), 1000 )</p>
    <p>Package( (s, i), 1001 ) Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>write_hdd( create_pkg( b, *cntr + 1 ) ); 4</p>
    <p>Crash!</p>
    <p>Crash!</p>
    <p>True, for both packages!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000</p>
    <p>*cntr = 1001</p>
    <p>HDD contents:</p>
    <p>Package( (s0, i0), 1000 )</p>
    <p>Package( (s, i), 1001 ) Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>Crash!</p>
    <p>Crash!</p>
    <p>True, for both packages!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000</p>
    <p>*cntr = 1001</p>
    <p>HDD contents:</p>
    <p>Package( (s0, i0), 1000 ) Package( (s, i), 1001 )</p>
    <p>Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>write_hdd( create_pkg( b, *cntr + 1 ) ); 4 Crash! 5 *cntr++ 6</p>
    <p>Crash!</p>
    <p>True, for both packages!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000</p>
    <p>*cntr = 1001</p>
    <p>HDD contents:</p>
    <p>Package( (s0, i0), 1000 ) Package( (s, i), 1001 )</p>
    <p>Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>Crash!</p>
    <p>Crash!</p>
    <p>True, for both packages!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000</p>
    <p>*cntr = 1001</p>
    <p>HDD contents:</p>
    <p>Package( (s0, i0), 1000 ) Package( (s, i), 1001 ) Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>write_hdd( create_pkg( b, *cntr + 1 ) ); 4</p>
    <p>Crash!</p>
    <p>True, for both packages!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000</p>
    <p>*cntr = 1001 HDD contents:</p>
    <p>Package( (s0, i0), 1000 ) Package( (s, i), 1001 ) Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Attempt 2</p>
    <p>write_hdd( create_pkg( b, *cntr + 1 ) ); 4</p>
    <p>Crash!</p>
    <p>Crash!</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Update the state + inc cntr</p>
    <p>Crash</p>
    <p>Upon recovery we can start a dictionary attack</p>
    <p>The systems state:</p>
    <p>*cntr = 1000</p>
    <p>*cntr = 1001 HDD contents:</p>
    <p>Package( (s0, i0), 1000 ) Package( (s, i), 1001 ) Package( (s, i), 1001 )</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 16 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Key observations</p>
    <p>Were collecting state during execution</p>
    <p>pkg  hdd : cntr(pkg)  value(cntr) + 1</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 17 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Ariadne</p>
    <p>pkg  hdd : cntr(pkg)  value(cntr) + 1</p>
    <p>pkg  hdd : cntr(pkg)  value(cntr)</p>
    <p>pkg  hdd : cntr(pkg)  value(cntr)</p>
    <p>pkg  hdd : cntr(pkg) = value(cntr)</p>
    <p>blob(pkg) = blob</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 18 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step I: State-continuity based on a monotonic counter</p>
    <p>Ariadne</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 18 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step II: Reducing NVRAM wear &amp; performance overhead</p>
    <p>Step II: Storing the Counter</p>
    <p>The naive way:</p>
    <p>normal binary encoding</p>
    <p>System may crash during a write</p>
    <p>Requires a 2-phase commit protocol</p>
    <p>Suboptimal use of NVRAM (too much wear)  2x performance overhead to access NVRAM</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 19 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step II: Reducing NVRAM wear &amp; performance overhead</p>
    <p>Step II: Storing the Counter</p>
    <p>Balanced Gray Codes:</p>
    <p>Only bit one bit per incr.</p>
    <p>Use each bit equally</p>
    <p>Store one bit/storage unit:</p>
    <p>biti = #bits_set%2</p>
    <p>Crash: previous/next content</p>
    <p>Only one NVRAM write per state update</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 20 / 27</p>
  </div>
  <div class="page">
    <p>libariadne Step II: Reducing NVRAM wear &amp; performance overhead</p>
    <p>Step II: Storing the Counter</p>
    <p>n</p>
    <p>n-bit Gray code</p>
    <p>non-volatile memory</p>
    <p>n</p>
    <p>n-bit Gray code</p>
    <p>non-volatile memory</p>
    <p>next counter value</p>
    <p>c p b</p>
    <p>c p b</p>
    <p>Balanced Gray Codes:</p>
    <p>Only bit one bit per incr.</p>
    <p>Use each bit equally</p>
    <p>Store one bit/storage unit:</p>
    <p>biti = #bits_set%2</p>
    <p>Crash: previous/next content</p>
    <p>Only one NVRAM write per state update</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 20 / 27</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Outline</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 21 / 27</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Applications</p>
    <p>Intel SGX/TPM</p>
    <p>TPM monotonic counters</p>
    <p>Speed may be throttled Min inc: one/5 sec</p>
    <p>TPM NVRAM:</p>
    <p>Access controlled Wears out quickly! Very small Not enough info</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 22 / 27</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Applications</p>
    <p>Intel SGX/ME</p>
    <p>Adds ME to the TCB</p>
    <p>No info on wear</p>
    <p>Still quite slow</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 23 / 27</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Outline</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 24 / 27</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Conclusion</p>
    <p>Ariadne provides state-continuous execution that:</p>
    <p>Is proven secure</p>
    <p>Only requires 1 NVRAM write operation / state update</p>
    <p>Applicable on Intel SGX (Skylake) platforms today</p>
    <p>Applicable for low-end PMAs as well</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 25 / 27</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Questions?</p>
    <p>Raoul Strackx, Frank Piessens (KU Leuven) Ariadne: A Minimal Approach to State Continuity August 12, 2016 26 / 27</p>
  </div>
</Presentation>
