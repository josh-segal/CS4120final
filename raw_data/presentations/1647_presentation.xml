<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Approximate NN queries on Streams with Guaranteed Error/performance</p>
    <p>Bounds</p>
    <p>Nick Koudas @ AT&amp;T labs-research</p>
    <p>Beng Chin Ooi , Kian-Lee Tan , Rui Zhang</p>
    <p>@ National University of Singapore</p>
  </div>
  <div class="page">
    <p>Problem  Problem: kNN search.  Environment: data stream (one scan; memory</p>
    <p>constraint).  Approximate Solution: e-approximate kNN (ekNN).  Motivation: Applications in which absolute error is</p>
    <p>preferable or more straightforward.</p>
    <p>IP: 137.132.48.120 137.132.48.121</p>
  </div>
  <div class="page">
    <p>Two Optimization Problems:  memory optimization for a given error</p>
    <p>bound: given an error bound e, use as little memory as possible to answer ekNN queries.</p>
    <p>error minimization for a given memory size: given a fixed amount of memory, achieve the best accuracy for ekNN queries.</p>
    <p>Requirements:  One scan algorithm.</p>
    <p>Satisfies the constraints.</p>
    <p>Efficient updates and query processing.</p>
  </div>
  <div class="page">
    <p>A Framework  Divide space into equal square-shaped cells.  Maintain at most K points in each cell.  For any kK, absolute error of kNN distance is</p>
    <p>bounded by dM, the maximum distance within a cell. For Euclidean distance: dM =</p>
    <p>where d is dimensionality; u is the number of cells each dim is divided to.</p>
    <p>ud /</p>
  </div>
  <div class="page">
    <p>Maintenance of the Points --aDaptive Indexing on Streams by space-filling Curves (DISC)</p>
    <p>Cells are not explicitly maintained, only points.</p>
    <p>Cells linearized according to Z-curve.</p>
    <p>Z-value of the cell is the key of a point.</p>
    <p>Points maintained in a B*-tree.</p>
    <p>An efficient merge-cell algorithm possible.</p>
  </div>
  <div class="page">
    <p>Algorithm: Build index  m: the order of Z-curve, 2m cells each dim.  If e given, , we get .</p>
    <p>me is integer, so  If memory constraint given, set a large enough m.  Build index</p>
    <p>Initialize m  Read a record P, calculate Z-value, search the B*-tree and find out Nc:</p>
    <p>number of existing points in the cell P belongs to.  If Nc &lt; K</p>
    <p>Insert P to the B*-tree.</p>
    <p>Else  Discard one and insert P.</p>
    <p>If memory runs out //this only happens for the error minimization problem  Merge cells and let m=m-1</p>
    <p>Go back to Step 2 (Read next record)</p>
    <p>ed em 2/ )/(log2 edme</p>
    <p>)/(log2 edme</p>
  </div>
  <div class="page">
    <p>Algorithm: Merge Cells</p>
    <p>General Merge-Cell  Apply to any structure.</p>
    <p>For each new cell, find all the points of the old cells in it, and merge them.</p>
    <p>Bulk Merge-Cell  Only apply to DISC.</p>
    <p>Scan all the leaf pages once.</p>
  </div>
  <div class="page">
    <p>Algorithm: KNN search</p>
    <p>W: a window query centered at the center of the cell Q is in; and with gradually increasing side length s.</p>
    <p>Find the kNN to Q within W.  If the kNN distance is no larger</p>
    <p>than the distance between the nearest side of W to Q and Q, search terminates;</p>
    <p>Else increase s by 1/u .</p>
  </div>
  <div class="page">
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Questions ?</p>
  </div>
</Presentation>
