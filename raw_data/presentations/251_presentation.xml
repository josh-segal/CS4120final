<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Nameless Writes Remzi H. Arpaci-Dusseau</p>
    <p>Professor @ University of Wisconsin-Madison (+visiting professor @ EPFL)</p>
    <p>Joint work with: Andrea C. Arpaci-Dusseau (UW, EPFL)</p>
    <p>Vijayan Prabhakaran (MSR Silicon Valley)</p>
  </div>
  <div class="page">
    <p>Indirection</p>
    <p>All problems in computer science can be solved by another level of indirection</p>
    <p>- usually attributed to Butler Lampson</p>
  </div>
  <div class="page">
    <p>Problems?</p>
    <p>Too big, too slow</p>
    <p>Example: Virtual Memory code code heap heap</p>
    <p>stack stack</p>
    <p>Virtual Address Space</p>
    <p>code code heap</p>
    <p>heap stack</p>
    <p>stack</p>
    <p>Physical Memory</p>
    <p>Page Table V PFN 1 2 1 3 1 1 1 4 0 0 0 0 0 0 0 0 0 0 1 0 1 6</p>
  </div>
  <div class="page">
    <p>Another example: RAID</p>
    <p>Early RAIDs: Simple indirection</p>
    <p>Fixed mapping avoids need for indirection table</p>
    <p>M ir</p>
    <p>ro re</p>
    <p>d</p>
    <p>R A</p>
    <p>ID</p>
    <p>More sophisticated RAID, more sophisticated mappings</p>
    <p>e.g., AutoRAID</p>
  </div>
  <div class="page">
    <p>Too Much of a Good Thing?</p>
  </div>
  <div class="page">
    <p>Virtual Machine Monitors VMMs: Another layer, beneath OS</p>
    <p>Consolidation, multi-platform support, many other reasons</p>
    <p>But the cost of indirection grows</p>
    <p>Example: Virtual Memory (again)</p>
    <p>Double Indirection: Virtual to Physical to Machine</p>
  </div>
  <div class="page">
    <p>Many Examples</p>
    <p>VMMs and Memory</p>
    <p>File System and RAID</p>
    <p>File System and Disk (a little)</p>
    <p>File System and RAID and Disk</p>
    <p>File System and Flash FTL</p>
  </div>
  <div class="page">
    <p>Todays Focus: Flash</p>
  </div>
  <div class="page">
    <p>Flash FTL</p>
    <p>Flash Translation Layer (FTL)</p>
    <p>Turns read-erase/program into read-write</p>
    <p>Allows for wear leveling</p>
  </div>
  <div class="page">
    <p>Background Flash organized into blocks</p>
    <p>Each block contains some pages</p>
    <p>Problem:</p>
    <p>To program a page, must erase block first  Even worse: Erase is costly (ms not us)</p>
    <p>Implication: Simple mapping performs poorly</p>
    <p>Would turn each write into erase/program</p>
    <p>page page page page page page page page</p>
    <p>bl o ck</p>
  </div>
  <div class="page">
    <p>Solution: Use Indirection</p>
    <p>Solution: Borrow log-structuring ideas</p>
    <p>Organize flash into a log  Erase an active block  Direct all writes to active block  Record mapping in indirection table</p>
    <p>(i-table)</p>
  </div>
  <div class="page">
    <p>Useful for Wear Too Wear-leveling problem</p>
    <p>Too many erase-program cycles will render block unreadable (cant differentiate ones from zeroes)</p>
    <p>Indirection helps here too</p>
    <p>Balance write load across blocks  Might have to migrate blocks from live</p>
    <p>but not-often-used block for leveling</p>
  </div>
  <div class="page">
    <p>Problems</p>
  </div>
  <div class="page">
    <p>Cost of Indirection Too big</p>
    <p>i-table (naive): one mapping per page  i-table (hybrid): one per page for some,</p>
    <p>one per block for most</p>
    <p>Either way: MB (or GB) of memory, just for mapping information</p>
    <p>Too slow</p>
    <p>Could be a problem too (if i-table doesnt fit in memory)</p>
  </div>
  <div class="page">
    <p>So What Can We Do?</p>
  </div>
  <div class="page">
    <p>Key Idea: Turn Double Indirection</p>
    <p>To Our Advantage</p>
  </div>
  <div class="page">
    <p>Leverage: Double Indirection</p>
    <p>Double indirection example</p>
    <p>FS: virtual offset (in file) to logical block (on dev)</p>
    <p>Flash: logical block to physical page</p>
    <p>Can we remove one level of the indirection?</p>
    <p>Generically called de-indirection</p>
    <p>inode</p>
    <p>SSD 100: 8000 101: 9500</p>
    <p>inode</p>
    <p>SSD no mapping info needed</p>
  </div>
  <div class="page">
    <p>Our Solution: Nameless Writes</p>
  </div>
  <div class="page">
    <p>Nameless Writes</p>
    <p>Usual interface:</p>
    <p>write(address, data): return OK/FAIL Nameless interface</p>
    <p>write(data): return address, OK/FAIL</p>
    <p>Device chooses where to write block,</p>
    <p>and returns physical address to client (FS)</p>
  </div>
  <div class="page">
    <p>Simple Example Structures dirtied: inode (I), data (D)</p>
    <p>Usual approach</p>
    <p>D is allocated to address A(D)  I is at fixed location [A(D) inside]  Write them out whenever (depending on FS)</p>
    <p>Nameless approach</p>
    <p>Nameless write of D, returns A(D)  Update inode I with A(D)</p>
  </div>
  <div class="page">
    <p>What About Wear?</p>
    <p>Problem: Wear-leveling</p>
    <p>Wear-leveling algorithm still might need to move blocks</p>
    <p>Solution: Renaming callback</p>
    <p>Device upcalls into client, informs that device has moved block at address X to new location: addressY</p>
    <p>Client (FS) must take action as needed</p>
  </div>
  <div class="page">
    <p>Key Features</p>
    <p>Removes FTL indirection</p>
    <p>No more indirection table; assumed that client tracks locations</p>
    <p>Device retains control</p>
    <p>For performance, still log-structured  For reliability, still does wear leveling</p>
  </div>
  <div class="page">
    <p>But, Lots of Problems File system must delay allocation decision</p>
    <p>File system must be able to write out blocks in certain order</p>
    <p>File system must be able to handle callback</p>
    <p>Sometimes need a known location</p>
    <p>Device must be willing to expose its physical nature</p>
    <p>(many more; your thoughts/complaints go here)</p>
  </div>
  <div class="page">
    <p>Other Ways To Do This? Could remove FTL (file-system only)</p>
    <p>Buggy FS might do poor wear leveling  Device is better at managing its detailed</p>
    <p>performance characteristics</p>
    <p>Could do it in device (device only)</p>
    <p>Hard to do while device is mounted Could consider alternate interfaces</p>
    <p>e.g., inform device of pointers</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Nameless Writes Addresses overheads of FTL indirection</p>
    <p>Enables little or no mapping info  Device controls low-level decisions</p>
    <p>But, some pain points</p>
    <p>Integrating into existing/new file systems  Will devices expose physical names?</p>
    <p>General approach of de-indirection</p>
    <p>Likely more widely applicable</p>
  </div>
  <div class="page">
    <p>Indirection: Reprise</p>
    <p>All problems in computer science can be solved by another level of indirection - usually attributed to Butler Lampson</p>
    <p>Lampson attributes it to David Wheeler</p>
    <p>And Wheeler usually added: but that usually will create another problem</p>
  </div>
</Presentation>
