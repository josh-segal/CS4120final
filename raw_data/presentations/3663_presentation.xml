<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Everything Old is New Again:</p>
    <p>Binary Security of WebAssembly</p>
    <p>Daniel Lehmann* Johannes Kinder Michael Pradel*</p>
    <p>* University of Stuttgart Germany</p>
    <p>Bundeswehr University Munich Germany</p>
  </div>
  <div class="page">
    <p>void vuln(char* src) { char buf[8]; strcpy(buf, src);</p>
    <p>}</p>
    <p>Source program</p>
    <p>WebAssembly</p>
    <p>Fast, low-level, portable bytecode</p>
    <p>Support in browsers, Node.js, standalone VMs</p>
    <p>Compiled from C, C++, Rust, Go, ...</p>
    <p>Client-side</p>
    <p>WebAssembly binary</p>
    <p>Server-side /</p>
    <p>Standalone VMs</p>
  </div>
  <div class="page">
    <p>void vuln(char* src) { char buf[8]; strcpy(buf, src);</p>
    <p>}</p>
    <p>Source program</p>
    <p>Security?</p>
    <p>WebAssembly binary</p>
    <p>AAAAAA AAA...</p>
    <p>Virtual memory</p>
    <p>Stack canaries</p>
    <p>Control-Flow Integrity (CFI)</p>
    <p>...</p>
    <p>Native</p>
    <p>?&gt;&lt;</p>
  </div>
  <div class="page">
    <p>void vuln(char* src) { char buf[8]; strcpy(buf, src);</p>
    <p>}</p>
    <p>Source program</p>
    <p>Security?</p>
    <p>WebAssembly binary</p>
    <p>AAAAAA AAA...</p>
    <p>Native</p>
    <p>At worst, a buggy or exploited Web</p>
    <p>Assembly program can make a mess of the data in its own memory.</p>
    <p>Data execution prevention and stack</p>
    <p>smashing protection are not needed by WebAssembly programs.</p>
    <p>github.com/WebAssembly/design</p>
    <p>Haas et al., PLDI 2017</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>I. In-depth security analysis of WebAssembly</p>
    <p>Linear memory</p>
    <p>Mitigations</p>
    <p>II. Library of attack primitives</p>
    <p>III. Proof-of-concept exploits on three platforms</p>
    <p>IV. Measurements on real-world binaries</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>I. In-depth security analysis of WebAssembly</p>
    <p>Linear memory</p>
    <p>Mitigations</p>
    <p>II. Library of attack primitives</p>
    <p>III. Proof-of-concept exploits on three platforms</p>
    <p>IV. Measurements on real-world binaries</p>
  </div>
  <div class="page">
    <p>Attack Outline</p>
    <p>Buffer overflow on</p>
    <p>unmanaged stack</p>
    <p>Sensitive heap data</p>
    <p>XSS in the browser</p>
    <p>document.write(str)</p>
    <p>Stack Canaries</p>
    <p>Unmapped Pages</p>
    <p>Mitigations?</p>
  </div>
  <div class="page">
    <p>Managed vs. Unmanaged Data</p>
    <p>Managed by VM: scalar variables, return addresses</p>
    <p>Unmanaged data in memory:</p>
    <p>Unmanaged</p>
    <p>stack,</p>
    <p>used by 33%</p>
    <p>of all functions</p>
    <p>malloc(...)</p>
    <p>Heap allocations</p>
    <p>char array[10]</p>
    <p>struct Type complex</p>
    <p>Arrays, structs</p>
    <p>void function(int* out)</p>
    <p>Address taken, e.g.,</p>
    <p>out parameters</p>
    <p>const char* string = &quot;...&quot;</p>
    <p>Global data, e.g.,</p>
    <p>string literals</p>
    <p>(local $l i32) call $func</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>return address</p>
    <p>stack canary</p>
    <p>buf</p>
    <p>...</p>
    <p>return address</p>
    <p>stack canary</p>
    <p>buf</p>
    <p>Buffer Overflow  Native</p>
    <p>void vuln(char* src) { char buf[8]; strcpy(buf, src);</p>
    <p>} rsp</p>
    <p>Overflow</p>
    <p>Native stack,</p>
    <p>e.g., x86-64 Legacy code base</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>other</p>
    <p>buf</p>
    <p>...</p>
    <p>other</p>
    <p>buf</p>
    <p>Buffer Overflow  WebAssembly</p>
    <p>void vuln(char* src) { char buf[8]; strcpy(buf, src);</p>
    <p>}</p>
    <p>Legacy code base</p>
    <p>void caller() { char other[8]; vuln(src);</p>
    <p>}</p>
    <p>$sp</p>
    <p>Overflow</p>
    <p>Unmanaged stack</p>
    <p>Managed data</p>
    <p>...</p>
    <p>return address</p>
  </div>
  <div class="page">
    <p>Attack Outline</p>
    <p>Buffer overflow on</p>
    <p>unmanaged stack</p>
    <p>Sensitive heap data</p>
    <p>XSS in the browser</p>
    <p>document.write(str)</p>
    <p>Stack Canaries</p>
    <p>Unmapped Pages</p>
    <p>Mitigations?</p>
  </div>
  <div class="page">
    <p>... Heap</p>
    <p>Stack</p>
    <p>Static</p>
    <p>... Heap</p>
    <p>Stack</p>
    <p>Static</p>
    <p>Single 32-bit memory space</p>
    <p>Contains all unmanaged data</p>
    <p>No &quot;holes&quot;, ptr  [0, max_mem]</p>
    <p>No page protections</p>
    <p>No unmapped pages</p>
    <p>Always writable</p>
    <p>No ASLR, fully deterministic</p>
    <p>Linear Memory</p>
    <p>higher</p>
    <p>addresses</p>
    <p>Overflow</p>
  </div>
  <div class="page">
    <p>Attack Outline</p>
    <p>Buffer overflow on</p>
    <p>unmanaged stack</p>
    <p>Sensitive heap data</p>
    <p>XSS in the browser</p>
    <p>document.write(str)</p>
    <p>Stack Canaries</p>
    <p>Unmapped Pages</p>
    <p>Mitigations?</p>
  </div>
  <div class="page">
    <p>XSS in Browser: Demo</p>
    <p>std::string html = &quot;&lt;img&quot;; pnm2png(input, output); html += output + &quot;&gt;&quot;; document.write(html);</p>
    <p>void pnm2png(char* input) { // CVE-2018-14550</p>
    <p>}</p>
    <p>Heap &quot;&lt;img...&gt;&quot;</p>
    <p>Stack</p>
    <p>Static</p>
    <p>C++ web application 0</p>
    <p>higher</p>
    <p>addresses Heap</p>
    <p>&quot;&lt;img...&gt;&quot;</p>
    <p>Stack AAAA...</p>
    <p>Static</p>
    <p>alert(...) Stack-to-heap</p>
    <p>overflow</p>
  </div>
  <div class="page">
    <p>XSS in Browser: Demo</p>
  </div>
  <div class="page">
    <p>More Primitives...</p>
    <p>Stack-based</p>
    <p>buffer overflow</p>
    <p>Heap data</p>
    <p>Stack canaries Unmapped pages Safe unlinking</p>
    <p>Other stack frames Constant data</p>
    <p>Wasm CFI</p>
    <p>Heap metadata</p>
    <p>corruption</p>
    <p>Stack</p>
    <p>overflow</p>
    <p>Browser:</p>
    <p>XSS</p>
    <p>Node.js:</p>
    <p>exec() WASI:</p>
    <p>fwrite() Redirect calls</p>
  </div>
  <div class="page">
    <p>Stack  Heap Overwrite  XSS</p>
    <p>Safe unlinking</p>
    <p>Other stack frames Constant data</p>
    <p>Wasm CFI</p>
    <p>Heap metadata</p>
    <p>corruption</p>
    <p>Stack</p>
    <p>overflow</p>
    <p>Browser:</p>
    <p>XSS</p>
    <p>Node.js:</p>
    <p>exec() WASI:</p>
    <p>fwrite() Redirect calls</p>
    <p>Stack-based</p>
    <p>buffer overflow</p>
    <p>Heap data</p>
    <p>Stack canaries Unmapped pages</p>
  </div>
  <div class="page">
    <p>Constant data</p>
    <p>Stack-based</p>
    <p>buffer overflow</p>
    <p>Heap data</p>
    <p>Stack canaries Unmapped pages</p>
    <p>Stack</p>
    <p>overflow</p>
    <p>Browser:</p>
    <p>XSS</p>
    <p>WASI:</p>
    <p>fwrite()</p>
    <p>asd</p>
    <p>Heap Overflow  Function Ptr  RCE</p>
    <p>Safe unlinking</p>
    <p>Other stack frames</p>
    <p>Heap metadata</p>
    <p>corruption</p>
    <p>Node.js:</p>
    <p>exec() Redirect calls</p>
    <p>Wasm CFI</p>
  </div>
  <div class="page">
    <p>Safe unlinking</p>
    <p>Heap data Other stack frames</p>
    <p>Heap metadata</p>
    <p>corruption</p>
    <p>Stack</p>
    <p>overflow</p>
    <p>Browser:</p>
    <p>XSS</p>
    <p>Node.js:</p>
    <p>exec() Redirect calls</p>
    <p>Wasm CFI</p>
    <p>Stack  String Literal  File Write</p>
    <p>Stack-based</p>
    <p>buffer overflow</p>
    <p>Stack canaries Unmapped pages</p>
    <p>Constant data</p>
    <p>WASI:</p>
    <p>fwrite()</p>
    <p>const char* filename = &quot;benign.txt&quot;</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Summary</p>
    <p>WebAssembly binary security Managed vs.</p>
    <p>unmanaged data</p>
    <p>Linear memory</p>
    <p>Attack primitives and mitigations PoCs on three platforms</p>
  </div>
  <div class="page">
    <p>WebAssembly binary security Managed vs.</p>
    <p>unmanaged data</p>
    <p>Linear memory</p>
    <p>Attack primitives and mitigations PoCs on three platforms</p>
    <p>small icons: icons8.com</p>
    <p>mail@dlehmann.eu michael@binaervarianz.de johannes.kinder@unibw.de</p>
    <p>Questions?</p>
  </div>
</Presentation>
