<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Tintenfisch: File System Namespace Schemas and</p>
    <p>Generators Michael A. Sevilla, Reza Nasirigerdeh, Carlos Maltzahn, Jeff LeFevre, Noah</p>
    <p>Watkins, Peter Alvaro, Margaret Lawson*, Jay Lofstead*, Jim Pivarski^</p>
    <p>UC Santa Cruz, *Sandia National Laboratories, ^Princeton University</p>
  </div>
  <div class="page">
    <p>client</p>
    <p>client</p>
    <p>Related Work: Decouple</p>
    <p>FS Metadata Server</p>
    <p>Tintenfisch: client</p>
    <p>FS Metadata Server</p>
    <p>Overview: Transfer/Materialization of FS Lists</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Simulations</p>
    <p>F(x)</p>
    <p>G e</p>
    <p>n e</p>
    <p>ra to</p>
    <p>rs :</p>
    <p>for(i=0;i&lt;len;i++){</p>
    <p>*</p>
    <p>F(x) = 2 x n</p>
    <p>faster transfer  faster modification  faster generation</p>
    <p>but then reads must transferred &amp; materialized</p>
    <p>FS Metadata Server</p>
    <p>Problem: RPCs  ops</p>
    <p>in distributed file systems</p>
    <p>client</p>
    <p>client</p>
    <p>Namespaces are LARGE but predictable (bounded/balanced)Sc</p>
    <p>h e</p>
    <p>m a</p>
    <p>s:</p>
    <p>Michael A. Sevilla, CROSS, UCSC</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Names  Data; Hierarchical Structure</p>
    <p>Primer on file system namespaces</p>
    <p>subtree Hierarchical Semantics</p>
    <p>Global Semantics</p>
    <p>inherit parent's</p>
    <p>ownership</p>
    <p>strong consistency</p>
    <p>durability</p>
    <p>Problem! POSIX IO file system metadata</p>
    <p>access semantics are difficult to scale.</p>
    <p>/dir file .txt</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>[Sevilla et. al., SC'15]</p>
    <p>Many metadata reads/writes</p>
    <p>Fewer metadata reads/writes</p>
    <p>Primer on FS metadata access patterns:  Small and frequent requests  Target same resource</p>
    <p>Single Node File System</p>
    <p>m et</p>
    <p>ad at</p>
    <p>a I O</p>
    <p>(p er</p>
    <p>m iss</p>
    <p>io ns</p>
    <p>, s ize</p>
    <p>, a tim</p>
    <p>e, et</p>
    <p>c.)</p>
    <p>dat a IO</p>
    <p>client</p>
    <p>client</p>
    <p>Distributed File System</p>
    <p>[Mesnier et. al., IEEE Comm.]</p>
    <p>dat a IOm</p>
    <p>et ad</p>
    <p>at a</p>
    <p>IO</p>
    <p>metadata IO does not scale like data IO</p>
    <p>as a result</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>lock management  relaxing consistency  caching inodes  journal formats  journal safety  caching paths  metadata distribution  load balancing</p>
    <p>metadata cluster</p>
    <p>Hierarchical Semantics</p>
    <p>Global Semantics</p>
    <p>inherit parent's</p>
    <p>ownership</p>
    <p>strong consistency</p>
    <p>durability</p>
    <p>File system metadata access patterns:  Small and frequent requests  Target same resource</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>DeltaFS client</p>
    <p>Related Work: Decoupled Namespaces [Zheng et al., PDSW'14; Zheng et al., PDSW'15]</p>
    <p>Metadata Server</p>
    <p>Traditional Client</p>
    <p>RPCs</p>
    <p>How doe s this ap</p>
    <p>ply to</p>
    <p>today's n amespac</p>
    <p>es?</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Example : PLFS Namespace</p>
    <p>patternRepeat Pattern twice PLFS specific metadata</p>
    <p>Middleware used in HPC</p>
    <p>for checkpoint-restart [Bent et al., SC'09]</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Middleware used in HPC</p>
    <p>for checkpoint-restart [Bent et al., SC'09]</p>
    <p>patternRepeat Pattern twice PLFS specific</p>
    <p>metadata</p>
    <p>scales with # of clients</p>
    <p>Example : PLFS Namespace1</p>
    <p>RPCs probably not an option; decoupled writes x reads (RD)</p>
    <p>metadata Rd  metadata write</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>High Energy Physics</p>
    <p>High Perf. Computing</p>
    <p>Summary of File System Namespaces</p>
    <p>scales with # of clients  ~ billions of files</p>
    <p>data</p>
    <p>physics metadata</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Large Scale Simulations</p>
    <p>High Energy Physics</p>
    <p>High Perf. Computing</p>
    <p>Summary of File System Namespaces</p>
    <p>scales with # of clients  ~ trillions of objects ~ billions of files</p>
    <p>data</p>
    <p>physics metadata Metadata Service</p>
    <p>SQLiteClient (obj0  objn)</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulations</p>
    <p>High Perf. Computing</p>
    <p>Summary of File System Namespaces</p>
    <p>scales with # of clients  ~ trillions of objects ~ billions of files</p>
    <p>Metadata Service</p>
    <p>SQLiteClient (obj0  objn)</p>
    <p>data</p>
    <p>physics metadata</p>
    <p>but then reads must transferred &amp; materialized</p>
    <p>Decoupling definitely improves performance</p>
    <p>exa mp</p>
    <p>le</p>
    <p>Lo w</p>
    <p>e r</p>
    <p>is B</p>
    <p>e tt</p>
    <p>e r</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulations</p>
    <p>High Perf. Computing</p>
    <p>Summary of File System Namespaces</p>
    <p>scales with # of clients  ~ trillions of objects ~ billions of files</p>
    <p>Metadata Service</p>
    <p>SQLiteClient (obj0  objn)</p>
    <p>data</p>
    <p>physics metadata</p>
    <p>Sc h</p>
    <p>e m</p>
    <p>a s: Namespaces are</p>
    <p>LARGE but predictable (bounded/balanced)</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>&quot;Decoupled Namespace&quot; policy implemented on in Cudele [Sevilla et. al., IPDPS'18]</p>
    <p>Integrate w/ decoupled namespaces [Zheng et al., PDSW'15]</p>
    <p>Client</p>
    <p>Metadata Server</p>
    <p>Traditional Client</p>
    <p>RPCs</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Tintenfisch builds on decoupled namespaces</p>
    <p>Client</p>
    <p>Metadata Server</p>
    <p>Traditional Client</p>
    <p>RPCs</p>
    <p>[Sevilla et. al., IPDPS'18]</p>
    <p>Generator</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Namespace generators: compact metadata</p>
    <p>Pointer Generator</p>
    <p>Obj Store</p>
    <p>* * *</p>
    <p>Code Generator import bbox if(t&gt;30){ obj=bbox.split(4)</p>
    <p>Formula Generator Files(n) = 2 x n Dirs(m) = m</p>
    <p>faster transfer (metadata compaction)  faster modification (change generator)  faster generation (no more list/filter)</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Malacology [EuroSys '17]</p>
    <p>Prior work with programmable storage</p>
    <p>Consistency/Durability</p>
    <p>Load Balancing</p>
    <p>Mantle [SC '15, CCGrid '18]</p>
    <p>Cudele [IPDPS '18]</p>
    <p>Tintenfisch [HotStorage '18]</p>
    <p>Scalable File Systems</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>Related work: decoupled namespace overheads with large namespaces</p>
    <p>- High Performance Computing scales w/ @ of clients</p>
    <p>- High Energy Physics ~ billions of files</p>
    <p>- Large Scale Simulations ~ trillions of files</p>
    <p>Tintenfisch: metadata compaction</p>
    <p>Conclusion: transferring and materializing reads</p>
    <p>G e</p>
    <p>n e</p>
    <p>ra to</p>
    <p>rs :</p>
    <p>for(i=0;i&lt;len;i++){</p>
    <p>*</p>
    <p>F(x) = 2 x n  faster transfer  faster modification  faster generation</p>
    <p>Namespaces are LARGE but predictable (bounded/balanced)Sc</p>
    <p>h e</p>
    <p>m a</p>
    <p>s:</p>
  </div>
  <div class="page">
    <p>Schemas and Generators</p>
    <p>Michael A. Sevilla HotStorage '18</p>
    <p>July 9, 2018</p>
    <p>Introduction</p>
    <p>Related Work</p>
    <p>Motivating Examples</p>
    <p>High Perf. Computing</p>
    <p>High Energy Physics</p>
    <p>Large Scale Simulation</p>
    <p>Namespace Schemas</p>
    <p>Namespace Generators</p>
    <p>Conclusion</p>
    <p>proper sandboxing for security/correctness  more complex file system metadata</p>
    <p>permissions (workflows)  size of the file (Hadoop)  timestamps and dates (GC)</p>
    <p>storage system agnostic metadata generation</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>Tintenfisch: File System Namespace Schemas and Generators</p>
    <p>Michael A. Sevilla, Reza Nasirigerdeh, Carlos Maltzahn, Jeff LeFevre, Noah Watkins, Peter Alvaro,</p>
    <p>Margaret Lawson*, Jay Lofstead*, Jim Pivarski^</p>
    <p>UC Santa Cruz, *Sandia National Laboratories, ^Princeton University</p>
    <p>Thanks!</p>
    <p>More information: - programmability.us</p>
  </div>
</Presentation>
