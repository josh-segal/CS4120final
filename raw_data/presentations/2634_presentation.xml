<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Wormhole:</p>
    <p>Yogi Sharma</p>
    <p>Joint work with Philippe Ajoux, Petchean Ang, David Callies, Abhishek Choudhary, Laurent Demailly, Thomas Fersch, Liat Atsmon Guz, Andrzej Kotulski, Sachin Kulkarni, Sanjeev Kumar, Harry Li, Jun Li, Evgeniy Makeev, Kowshik Prakasam, Robbert van Renesse (Cornell), Sabyasachi Roy, Pratyush Seth, Yee Jiun Song, Kaushik Veeraraghavan, Benjamin Wester, Peter Xie.</p>
    <p>Reliable Pub-Sub to support Geo-replicated Internet Services</p>
    <p>Facebook</p>
  </div>
  <div class="page">
    <p>Challenge: Update Stale Data Graph Search</p>
  </div>
  <div class="page">
    <p>Alice moves away from Oakland</p>
    <p>(Alice lives in Oakland) (Alice lives in Boston)</p>
    <p>(Alice lives in Oakland)</p>
    <p>Alice: Change my city to Boston</p>
    <p>MySQL Graph Search</p>
    <p>Index</p>
  </div>
  <div class="page">
    <p>Alice moves away from Oakland</p>
    <p>Me: Get my friends in Oakland</p>
    <p>Result: . . . , Alice, . . .</p>
    <p>(Alice lives in Oakland) (Alice lives in Boston)</p>
    <p>Alice: Change my city to Boston</p>
    <p>MySQL (Alice lives in Oakland) Graph Search</p>
    <p>Index</p>
  </div>
  <div class="page">
    <p>Need for updates and its challenges</p>
    <p>HDFS</p>
    <p>Memcache TAO Cache</p>
    <p>MySQL RocksDB</p>
    <p>News Feed Index</p>
    <p>Graph Search Index</p>
    <p>Applications</p>
    <p>Datastores</p>
    <p>q Tens of applications</p>
    <p>q Heterogeneous datastores</p>
    <p>q Varying application speeds</p>
    <p>q Reliable delivery</p>
  </div>
  <div class="page">
    <p>Each application tails updates</p>
    <p>Memcache TAO Cache News Feed</p>
    <p>Index Graph Search</p>
    <p>Index</p>
    <p>Tailer</p>
    <p>MySQL</p>
    <p>Apply updates</p>
    <p>Tailer Tailer Tailer</p>
  </div>
  <div class="page">
    <p>MySQL q Tens of applications</p>
    <p>q Heterogeneous datastores</p>
    <p>q Varying application speeds</p>
    <p>q Reliable delivery</p>
    <p>The publisher pushes updates</p>
    <p>Memcache TAO Cache News Feed</p>
    <p>Index Graph Search</p>
    <p>Index</p>
    <p>Publisher</p>
    <p>Subscriber Subscriber Subscriber Subscriber</p>
  </div>
  <div class="page">
    <p>Runs on existing heterogeneous datastores  Delivers updates reliably  at least once, in-order  Handles varying application speeds efficiently</p>
    <p>Wormhole  a pub-sub system</p>
    <p>What it is:</p>
    <p>What it isnt:</p>
    <p>Transporting over 5 trillion updates per day in Facebook</p>
    <p>Not exactly-once delivery  Not a storage system  No global ordering across different datastores</p>
  </div>
  <div class="page">
    <p>q Tens of applications</p>
    <p>q Heterogeneous datastores</p>
    <p>q Varying application speeds</p>
    <p>q Reliable delivery</p>
    <p>Support heterogeneous datastores</p>
    <p>Memcache TAO Cache News Feed</p>
    <p>Index Graph Search</p>
    <p>Index</p>
    <p>MySQL</p>
    <p>Publisher</p>
    <p>Subscriber Subscriber Subscriber Subscriber</p>
    <p>MySQL Tailer</p>
    <p>Txn Logs</p>
    <p>Datastore agnostic Wormhole updates</p>
    <p>HDFS</p>
    <p>HDFS Tailer</p>
  </div>
  <div class="page">
    <p>Reliable delivery</p>
    <p>Transaction Log</p>
    <p>Subscriber</p>
    <p>Applications TAO Cache Graph Search Cache Memcache</p>
    <p>Subscriber Subscriber</p>
    <p>Publisher</p>
    <p>9</p>
    <p>Tailer</p>
    <p>Datastore</p>
  </div>
  <div class="page">
    <p>Reliable delivery</p>
    <p>Publisher</p>
    <p>Tailer</p>
    <p>Subscriber</p>
    <p>Applications TAO Cache Graph Search Cache Memcache</p>
    <p>Subscriber Subscriber</p>
    <p>9 8 5 6 7 10 11</p>
    <p>Datastore</p>
    <p>done?10 done?10 done?10</p>
    <p>ack10</p>
    <p>Store application markers in persistent storage</p>
    <p>Recover application from stored markers</p>
    <p>Crash</p>
    <p>q Tens of applications</p>
    <p>q Heterogeneous datastores</p>
    <p>q Varying application speeds</p>
    <p>q Reliable delivery</p>
    <p>Transaction Log</p>
  </div>
  <div class="page">
    <p>Applications failure and recovery</p>
    <p>Publisher</p>
    <p>Tailer</p>
    <p>Subscriber</p>
    <p>TAO Cache Graph Search</p>
    <p>Cache Memcache</p>
    <p>Subscriber Subscriber</p>
    <p>Crash Crash</p>
    <p>Datastore</p>
    <p>Applications</p>
    <p>Transaction Log</p>
  </div>
  <div class="page">
    <p>Applications failure and recovery</p>
    <p>Publisher</p>
    <p>Tailer Recovery Tailer</p>
    <p>Subscriber</p>
    <p>Applications TAO Cache Graph Search Cache Memcache</p>
    <p>Subscriber Subscriber</p>
    <p>Datastore</p>
    <p>Tradeoff: one recovery tailer versus multiple recovery tailers 7 9 9</p>
  </div>
  <div class="page">
    <p>Publisher</p>
    <p>Tailer Recovery Tailer</p>
    <p>Finish applications recovery</p>
    <p>Subscriber</p>
    <p>Applications TAO Cache Graph Search Cache Memcache</p>
    <p>Subscriber Subscriber</p>
    <p>Datastore</p>
    <p>q Tens of applications</p>
    <p>q Heterogeneous datastores</p>
    <p>q Varying application speeds</p>
    <p>q Reliable delivery</p>
    <p>Transaction Log</p>
  </div>
  <div class="page">
    <p>Tailers: I/O efficiency</p>
    <p>Production deployment  Many publishers and datastores  Replication, 6 applications  Metrics every 1 minute</p>
    <p>time (h)</p>
    <p>M B</p>
    <p>yt es</p>
    <p>/s ec</p>
    <p>Bytes sent from publishers to six applications</p>
    <p>time (h)</p>
    <p>M B</p>
    <p>yt es</p>
    <p>/s ec</p>
    <p>Bytes read from datastores by publishers</p>
  </div>
  <div class="page">
    <p>Tailers: I/O vs. latency tradeoff Experiment: Send part of a 20 GB data to 10 applications</p>
  </div>
  <div class="page">
    <p>Tailers: I/O vs. latency tradeoff</p>
    <p>I/O load (how many times data is read)</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(m in</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>One production publisher  Sample of 50k updates  Measure latency between</p>
    <p>write to datastore and delivery to application</p>
    <p>Latency of updates processing</p>
    <p>latency (ms)</p>
    <p>pe rc</p>
    <p>en til</p>
    <p>e of</p>
    <p>u pd</p>
    <p>at es</p>
  </div>
  <div class="page">
    <p>q Tens of applications</p>
    <p>q Heterogeneous datastores</p>
    <p>q Varying application speeds</p>
    <p>q Reliable delivery</p>
    <p>Whats next?</p>
    <p>What if datastore disk fails?</p>
  </div>
  <div class="page">
    <p>Coordination mechanism  Datastore agnostic position  Global application markers</p>
    <p>Reliable delivery despite datastore failure</p>
    <p>Datastore (Replica)</p>
    <p>Publisher</p>
    <p>Replication Datastore</p>
    <p>TAO Cache</p>
    <p>Subscriber</p>
    <p>Peer Publisher</p>
    <p>Disk failure</p>
    <p>Unusable</p>
    <p>Multi Copy Reliable Delivery</p>
  </div>
  <div class="page">
    <p>Multi copy reliable delivery</p>
    <p>DB in Region 1</p>
    <p>DB in Region 2</p>
    <p>R ep</p>
    <p>lic at</p>
    <p>io n</p>
    <p>Application 1</p>
    <p>Application 2</p>
    <p>preferred</p>
    <p>backup</p>
    <p>only source</p>
    <p>time (s)</p>
    <p>up da</p>
    <p>te s/</p>
    <p>se c</p>
    <p>(a) Updates to Application 1</p>
    <p>time (s)</p>
    <p>up da</p>
    <p>te s/</p>
    <p>se c</p>
    <p>(b) Updates to Application 2</p>
    <p>Red datastore fails</p>
    <p>Red datastore recovers</p>
  </div>
  <div class="page">
    <p>Wormhole scalable pub-sub in production at Facebook  Works with existing heterogeneous datastores  Provides at-least once, in-order delivery despite failures  Trades off latency and I/O using tailers</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
  <div class="page"/>
</Presentation>
