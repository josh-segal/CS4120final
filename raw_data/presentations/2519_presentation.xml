<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Design and Implementa/on of a Consolidated Middlebox</p>
    <p>Architecture</p>
    <p>Vyas Sekar Sylvia Ratnasamy Michael Reiter Norbert Egi Guangyu Shi</p>
  </div>
  <div class="page">
    <p>Need for Network Evolu/on</p>
    <p>New devices</p>
    <p>New applica/ons</p>
    <p>Evolving threats Policy</p>
    <p>constraints</p>
    <p>Performance, Security, Compliance</p>
  </div>
  <div class="page">
    <p>Type of appliance Number Firewalls 166 NIDS 127 Media gateways 110 Load balancers 67 Proxies 66 VPN gateways 45 WAN Op/mizers 44 Voice gateways 11 Total Middleboxes 636 Total routers ~900</p>
    <p>Network Evolu/on today: Middleboxes!</p>
    <p>Data from a large enterprise: &gt;80K users across tens of sites</p>
    <p>Just network security $10 billion</p>
  </div>
  <div class="page">
    <p>Specialized boxes</p>
    <p>Narrow interfaces</p>
    <p>Point solu/ons!</p>
    <p>Increases capital expenses &amp; sprawl Increases opera/ng expenses Limits extensibility and flexibility</p>
    <p>Management Management Management</p>
    <p>Key pain points</p>
  </div>
  <div class="page">
    <p>Mo/va/on</p>
    <p>High-level idea: Consolida?on</p>
    <p>System design</p>
    <p>Implementa/on and Evalua/on 5</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Consolida/on at Pla[orm-Level</p>
    <p>Proxy Firewall IDS/IPS AppFilter Today: Independent, specialized boxes</p>
    <p>Decouple Hardware and Soaware</p>
    <p>Consolida/on reduces capital expenses and sprawl</p>
    <p>e.g., FlowStream (UCL/Lancaster)</p>
  </div>
  <div class="page">
    <p>Consolida/on reduces CapEx</p>
    <p>N o</p>
    <p>rm a</p>
    <p>liz e</p>
    <p>d u</p>
    <p>til iz</p>
    <p>a tio</p>
    <p>n (</p>
    <p>% )</p>
    <p>Time (mm-dd,hr)</p>
    <p>WAN optimizer Proxy</p>
    <p>Load Balancer Firewall</p>
    <p>Mul/plexing benefit = Max_of_TotalU/liza/on / Sum_of_MaxU/liza/ons</p>
  </div>
  <div class="page">
    <p>Consolida/on Enables Extensibility</p>
    <p>Session Management</p>
    <p>Protocol Parsers</p>
    <p>VPN Web Mail IDS Proxy</p>
    <p>Firewall</p>
    <p>Contribu/on of reusable modules: 30  80 %</p>
    <p>e.g., xOMB (UCSD) Bro</p>
  </div>
  <div class="page">
    <p>Consolida/ng Management</p>
    <p>Network-Wide Management</p>
    <p>Logically centralized High-level interfaces e.g., SDN, OpenFlow, 4D</p>
    <p>Simplifies management to reduce opera/ng expenses</p>
  </div>
  <div class="page">
    <p>Consolida/on enables flexible resource management</p>
    <p>N1 N3</p>
    <p>N2 P: N1 N3</p>
    <p>Process (0.4 P)</p>
    <p>Today: All processing at logical ingress</p>
    <p>Overload!</p>
    <p>Distribu/on reduces load imbalance</p>
    <p>Process (0.3 P)</p>
    <p>Process (0.3 P) Process (P)</p>
  </div>
  <div class="page">
    <p>Mo/va/on</p>
    <p>High-level idea: Consolida/on</p>
    <p>CoMb: System design</p>
    <p>Implementa/on and Evalua/on 11</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Network-wide Controller</p>
    <p>CoMb System Overview</p>
    <p>Soaware-centric</p>
    <p>Logically centralized e.g., NOX, 4D</p>
    <p>Exis/ng work: simple, homogeneous rou/ng-like workload</p>
    <p>Middleboxes: complex, heterogeneous, new opportuni/es</p>
    <p>e.g., PacketShader, RouteBricks, ServerSwitch, SwitchBlade</p>
  </div>
  <div class="page">
    <p>Network-wide Controller</p>
    <p>Processing responsibili/es</p>
    <p>CoMb Management Layer</p>
    <p>Policy Constraints</p>
    <p>Resource Requirements</p>
    <p>Rou/ng, Traffic</p>
    <p>Goal: Balance load across network Exploit mul/plexing, reuse, distribu/on</p>
    <p>HTTP: IDS &lt; Proxy</p>
  </div>
  <div class="page">
    <p>Capturing Policy and Reuse Efficiently</p>
    <p>IDS Proxy</p>
    <p>common</p>
    <p>Footprint on resource</p>
    <p>HTTP UDP</p>
    <p>HTTP NFS</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>HTTP = IDS &amp; Proxy</p>
    <p>UDP = IDS</p>
    <p>NFS = Proxy</p>
    <p>CPU</p>
    <p>CPU</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>HyperApp: union of apps to run</p>
    <p>Policy, dependency are implicit Needs small brute-force step</p>
    <p>Need per-packet policy, reuse dependencies!</p>
    <p>HTTP: 1+2 unit of CPU 1+3 units of mem</p>
    <p>HTTP: IDS &lt; Proxy</p>
  </div>
  <div class="page">
    <p>Network-wide Op/miza/on</p>
    <p>Minimize Maximum Load, Subject to</p>
    <p>Processing coverage for each class of traffic  Frac/on of processed traffic adds up to 1</p>
    <p>Load on each node  sum over HyperApp responsibili/es per-path</p>
    <p>A simple, tractable linear program Very close (&lt; 0.1%) to theore/cal op/mal</p>
    <p>No explicit Dependency Policy</p>
  </div>
  <div class="page">
    <p>CoMb Pla[orm</p>
    <p>NIC</p>
    <p>Policy Shim (Pshim)</p>
    <p>Core1 Core4</p>
    <p>IDS</p>
    <p>Proxy</p>
    <p>Traffic</p>
    <p>Applica/ons</p>
    <p>Policy Enforcer</p>
    <p>Classifica?on: HTTP</p>
    <p>IDS &lt; Proxy</p>
    <p>Realize Hyperapp Parallelize</p>
    <p>Lightweight Parallelize</p>
    <p>No conten/on Fast classifica/on</p>
  </div>
  <div class="page">
    <p>Parallelizing Applica/on Instances</p>
    <p>- Inter-core communica/on - More work for PShim + No in-core context switch</p>
    <p>+ Keeps structures core-local + Beter for reuse - But incurs context-switch - Need replicas</p>
    <p>HyperApp-per-core is beter or comparable</p>
    <p>M1 M2</p>
    <p>PShim</p>
    <p>Core3</p>
    <p>M3</p>
    <p>PShim</p>
    <p>Core1 Core2</p>
    <p>HyperApp1: M1 &lt; M2 HyperApp2: M2 &lt; M3</p>
    <p>M2 M3</p>
    <p>PShim</p>
    <p>M1 M2</p>
    <p>PShim</p>
    <p>Core1 Core2</p>
    <p>HyperApp per core</p>
    <p>App Per core</p>
  </div>
  <div class="page">
    <p>CoMb Pla[orm Design</p>
    <p>Hyper App1</p>
    <p>Hyper App2</p>
    <p>Hyper App4</p>
    <p>Hyper App3</p>
    <p>Hyper App3</p>
    <p>PShim PShim PShim PShim PShim</p>
    <p>M1 M4 M1 M4 M2 M3</p>
    <p>Q1 Q3 Q2 Q4 Q5</p>
    <p>M1 M5</p>
    <p>Core 1 Core 3 Core 2</p>
    <p>NIC hardware</p>
    <p>Conten/on-free network I/O</p>
    <p>Core-local processing</p>
    <p>Parallel, core-local</p>
    <p>Workload balancing</p>
  </div>
  <div class="page">
    <p>Mo/va/on</p>
    <p>High-level idea: Consolida/on</p>
    <p>System design: Making Consolida/on Prac/cal</p>
    <p>Implementa?on and Evalua?on 19</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>CoMb Implementa/on</p>
    <p>Network-wide Management</p>
    <p>Session</p>
    <p>Protocol</p>
    <p>Extensible apps Standalone apps</p>
    <p>Policy Shim</p>
    <p>using CPLEX</p>
    <p>Kernel mode Click</p>
    <p>Ported logic From Bro  Click</p>
    <p>Memory mapped Or</p>
    <p>Virtual interfaces</p>
  </div>
  <div class="page">
    <p>Consolida/on is Prac/cal</p>
    <p>Low overhead for exis/ng applica/ons</p>
    <p>Controller takes &lt; 1.6s for 52-node topology  5x beter than VM-based consolida/on</p>
  </div>
  <div class="page">
    <p>Abile ne</p>
    <p>Gea nt</p>
    <p>Ente rpris</p>
    <p>e AS1</p>
    <p>R e la</p>
    <p>ti v e s</p>
    <p>a v in</p>
    <p>g s</p>
    <p>Benefits: Reduc/on in Maximum Load</p>
    <p>Consolida/on reduces maximum load by 2.5-25X</p>
    <p>MaxLoadToday /MaxLoadConsolidated</p>
    <p>Consolida/on reduces provisioning cost 1.8-2.5X</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Isola/on  Current: rely on process-level isola/on  Leverage user-space networking  Get reuse-despite-isola/on?</p>
    <p>Changes vendor business models  Already happening (e.g., virtual appliances)  Benefits imply someone will do it!  May already have extensible stacks</p>
  </div>
  <div class="page">
    <p>Most network evolu/on today occurs via middleboxes  Today: Narrow, point solu/ons  High CapEx, OpEx, and device sprawl  Inflexible, difficult to extend</p>
    <p>Our proposal: Consolidated architecture  Extensible, general-purpose  Reduces CapEx, OpEx, and device sprawl</p>
    <p>More opportuni/es  Isola/on  APIs (H/WApps, ManagementApps, App Stack)</p>
    <p>Conclusions</p>
  </div>
</Presentation>
