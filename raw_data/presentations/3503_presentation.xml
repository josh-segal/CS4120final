<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Distributed and Oblivious Heap</p>
    <p>Christian Scheideler and Stefan Schmid Dept. of Computer Science</p>
    <p>University of Paderborn</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>P2P systems: significant amount of attention.</p>
    <p>Holy grail: P2P systems that are highly scalable and robust</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>P2P systems face many threats: stop/fail attacks, join/leave attacks, Eclipse attacks, Sybil attacks, Denial-of-Service attacks, content pollution,</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Sybil Attacks</p>
    <p>Goal: flood network with fake peers</p>
    <p>Effect: disconnect good peers, drop messages, drop or manipulate data,</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Sybil Attacks</p>
    <p>Previous solutions:  Douceur 02: Use trusted authority to limit generation of</p>
    <p>identities  Bazzi et al. 05/06: Limit identities created at a particular</p>
    <p>location (e.g., within an ISP) of the Internet  Danezis et al. 05, Yu et al. 06: Network based on social</p>
    <p>contacts  Margolin &amp; Levine 07: Game theory General approach: add constraints Our approach: working P2P network despite Sybil attacks</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Connect to the older peers!</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Similar to preferential attachment graphs.</p>
    <p>Hope: peers already in the system when Sybil attack starts are not affected by it.</p>
    <p>Network Entry Point</p>
  </div>
  <div class="page">
    <p>How to connect to older peers?</p>
    <p>Naive solution:</p>
    <p>Connection to d older peers chosen uniformly at random:</p>
    <p>How to join and leave efficiently?  Not a self-routing topology! Better: distributed heap based on de Bruijn graph</p>
  </div>
  <div class="page">
    <p>Dynamic de Bruijn Network</p>
    <p>Classical network theory: family of graphs</p>
    <p>Example: d-dim. de Bruijn graph G=(V,E)  V = {0,1}d</p>
    <p>E = { {x,y} | x=(x1,,xd), y=(b,x1,,xd-1), for some b{0,1} }</p>
    <p>We need: dynamic form of de Bruijn graph (nodes join and leave) 00</p>
  </div>
  <div class="page">
    <p>Dynamic de Bruijn Network</p>
    <p>Example: d-dim. de Bruijn graph G=(V,E)  V = {0,1}d</p>
    <p>E = { {x,y} | x=(x1,,xd), y=(b,x1,,xd-1), for some b{0,1} }</p>
    <p>Represent (x1,,xd) as 0.x1 x2xd  [0,1), e.g. 0.101 = 1(1/2) + 0(1/4) + 1(1/8)</p>
    <p>Let d</p>
  </div>
  <div class="page">
    <p>Dynamic de Bruijn Network</p>
    <p>Example: d-dim. de Bruijn graph G=(V,E)  V = {0,1}d</p>
    <p>E = { {x,y} | x=(x1,,xd), y=(b,x1,,xd-1), for some b{0,1} }</p>
    <p>Result for d:  V = [0,1)  E = { {x,y}[0,1)2 | y=x/2 or y=(1+x)/2 }</p>
  </div>
  <div class="page">
    <p>Dynamic de Bruijn Network</p>
    <p>Continuous de Bruijn graph:  V = [0,1)  E = { {x,y}[0,1)2 | y=x/2 or y=(1+x)/2 }</p>
    <p>For any two regions R, R:  {x,y}E: (x,y)RxR or (x,y)RxR: each peer in R to all older peers in R</p>
    <p>cut [0,1) into regions of same size  assign peers to random points in [0,1)</p>
    <p>RR</p>
  </div>
  <div class="page">
    <p>Dynamic de Bruijn Network</p>
    <p>Continuous de Bruijn graph:  V = [0,1)  E = { {x,y}[0,1)2 | y=x/2 or y=(1+x)/2 }</p>
    <p>Dilemma: for any fixed region size EITHER : no neighbors OR : too many neighbors</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>SHELL: Hierarchy of de Bruijn networks</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>SHELL: distributed heap based on age</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>For every node v:  v has forward edges to older peers in its home region and</p>
    <p>de Bruijn regions  v has backward edges to all peers that have forward edges</p>
    <p>to it  Level of v is the lowest s.t. vs home region contains at</p>
    <p>least c log nv older nodes in this and higher levels (nv: total # nodes older than v) (How does v know?)</p>
    <p>Forward degree: O(log n), backward degree: O(log2 n) (w.h.p., based on random positions of peers)</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>Routing between two peers v and w: 1. use deBruijn routing along forward edges till region of w</p>
    <p>reached 2. descend along backward edges till w reached</p>
    <p>v</p>
    <p>w</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>Routing between two nodes v and w: 1. use deBruijn routing along forward edges till region of w</p>
    <p>reached 2. descend along backward edges till w reached</p>
    <p>v 1.</p>
    <p>forward edge youngest peer</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>Routing between two nodes v and w: 1. use deBruijn routing along forward edges till region</p>
    <p>of w reached 2. descend along backward edges till w reached</p>
    <p>Nice properties:  Only nodes visited that are at least as old as v and w  When every node v sends packet to random w,</p>
    <p>congestion at most O(log2 n) w.h.p.</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>Join(v): 1. find right region in right level prescribed by order nv and</p>
    <p>random point assigned to v O(log n) time w.h.p. (use routing)</p>
    <p>v</p>
    <p>w Expected O(1) lifts per level O(log n) work per lift w.h.p.</p>
    <p>Join/leave verkehrt!!</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>Leave(v):  Remove v from SHELL and adapt regions of</p>
    <p>neighbors (if needed) O(1) time, O(log2 n) work w.h.p.</p>
    <p>v w</p>
    <p>Expected O(1) drops per level O(log n) work per drop w.h.p.</p>
  </div>
  <div class="page">
    <p>SHELL</p>
    <p>Problem: node v needs to estimate its order nv (i.e. # nodes older than v)</p>
    <p>Solution:  B(j): number of nodes in home region of v in</p>
    <p>level j that are older than v  v finds largest j so that j &lt; B(j)/c  log B(j)</p>
    <p>Chosen level deviates by 1 from ideal level w.h.p.</p>
  </div>
  <div class="page">
    <p>Distributed Heaps</p>
    <p>Concurrent heaps:  Shavit &amp; Zemach 99: skip queue  Shavit &amp; Zemach 00: funnel tree not applicable in our context</p>
    <p>Distributed heaps:  Bhargava et al. 04: PAGODA</p>
    <p>join/leave: O(log2 n) time and work</p>
  </div>
  <div class="page">
    <p>Main Results</p>
    <p>Theorem: For any Sybil attack after step t0, all peers that were in the SHELL system before t0 can still perform reliable and efficient routing (and based on that, also data management).</p>
    <p>SHELL can also be applied as scalable, lowcongestion network for peers with arbitrary bandwidths.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>SHELL: distributed heap with essentially optimal runtime for routing, joining and leaving</p>
    <p>Future tasks:  Better congestion (O(log2 n) down to O(log n))  Locality  Realization?</p>
  </div>
</Presentation>
