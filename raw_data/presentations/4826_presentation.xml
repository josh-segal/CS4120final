<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Approximation Algorithms for Graph Homomorphism</p>
    <p>Problems Chaitanya Swamy</p>
    <p>University of Waterloo</p>
    <p>Joint work with Michael Langberg and Yuval</p>
    <p>Rabani Open University Technion</p>
  </div>
  <div class="page">
    <p>Maximum Graph Homomorphism</p>
    <p>Given: graphs G = (VG,EG) and H = (VH,EH)</p>
    <p>Value of mapping</p>
    <p>find a mapping : VGVH that</p>
    <p>maximizes no. of edges of G mapped to edges of H</p>
    <p>Goal: Maximize |{(u,v)EG : ((u),(v))EH }|</p>
    <p>G H</p>
  </div>
  <div class="page">
    <p>Maximum Graph Homomorphism</p>
    <p>Given: graphs G = (VG,EG) and H = (VH,EH)</p>
    <p>Value of mapping</p>
    <p>find a mapping : VGVH that</p>
    <p>maximizes no. of edges of G mapped to edges of H</p>
    <p>Goal: Maximize |{(u,v)EG : ((u),(v))EH }|</p>
    <p>G H</p>
  </div>
  <div class="page">
    <p>Maximum Graph Homomorphism</p>
    <p>Given: graphs G = (VG,EG) and H = (VH,EH)</p>
    <p>Value of mapping</p>
    <p>find a mapping : VGVH that</p>
    <p>maximizes no. of edges of G mapped to edges of H</p>
    <p>Goal: Maximize |{(u,v)EG : ((u),(v))EH }|</p>
    <p>G H</p>
  </div>
  <div class="page">
    <p>H = : Max-Cut problem</p>
    <p>G</p>
  </div>
  <div class="page">
    <p>H = : Max-Cut problem</p>
    <p>Problem is NP-hard, APX-hard even for fixed H</p>
    <p>Optimization version of H-coloring: decide if there is a mapping  of value |EG| (such a  homomorphism) e.g., when H is a k-clique, H-coloring k-coloring problem, maximum graph homomorphism (MGH) Max-k-Cut</p>
    <p>H-coloring is NP-complete if H is not bipartite and does not contain a self-loop (Hell &amp; Nesetril)</p>
    <p>G</p>
  </div>
  <div class="page">
    <p>Related Work MGH problem appears to be new.</p>
    <p>H-coloring: well studied problem; Hell &amp; Nesetril proved that H-coloring is either in P or is NP-complete  restrictive/list H-coloring: various restrictions placed on</p>
    <p>, e.g., restrictions on {(u)} for uVG, or -1(i) for iVH  counting versions of these problems: Dyer &amp; Greenhill</p>
    <p>proved a dichotomy theorem for counting # of Hcolorings</p>
    <p>sampling a random H-coloring</p>
    <p>Minimum cost homomorphism: find  that minimizes (cost of assigning labels to nodes) + (weights of images of EG); studied by Cohen et al., Gutin et al., Aggarwal et al.  if edge weights in H form a metric, this is the metric</p>
    <p>labeling problem (Kleinberg &amp; Tardos)</p>
  </div>
  <div class="page">
    <p>Related Work (contd.)  maximum common subgraph: given graphs G,</p>
    <p>H, find their largest common subgraph  essentially MGH where  is required to be one-one MGH can be reduced to this problem:  blow up each iVH to an independent set of size |VG|  replace each edge (i,j)EH by complete bipartite graph</p>
    <p>G H</p>
  </div>
  <div class="page">
    <p>Related Work (contd.)  maximum common subgraph: given graphs G,</p>
    <p>H, find their largest common subgraph  essentially MGH where  is required to be one-one MGH can be reduced to this problem:  blow up each iVH to an independent set of size |VG|  replace each edge (i,j)EH by complete bipartite graph</p>
    <p>G H</p>
    <p>Kann: (B+1)-approx. when degrees in G, H are  B.</p>
  </div>
  <div class="page">
    <p>A Trivial 0.5-approximation</p>
    <p>HG</p>
  </div>
  <div class="page">
    <p>A Trivial 0.5-approximation</p>
    <p>Each edge of G is mapped to (i,j) with probability ,  expected value of mapping = |EG|/2</p>
    <p>get 0.5-approximation algorithm (can derandomize)</p>
    <p>HG OPTMGH(G,H)</p>
    <p>MaxCut(G)</p>
    <p>|EG|/2</p>
  </div>
  <div class="page">
    <p>More generally, for a subset N  VH define its density r(N) = (2|E(N)|) / |N|2</p>
    <p>Mapping each uVG randomly to a label in</p>
    <p>N maps r(N).|EG| edges of G in expectation</p>
    <p>gives an r(N)-approximation algorithm</p>
    <p>e.g., if H has a triangle, get a 2/3approximation</p>
    <p>if H has a k-clique, get a (11/k)approximation</p>
    <p>In general, factor of 0.5 might be the best possible!</p>
  </div>
  <div class="page">
    <p>Informal Statement of Result</p>
    <p>There is no (0.5+)-approximation algorithm for MGH, unless certain average-case instances of subgraph isomomorphism can be solved in polynomial time.</p>
    <p>Gn,p  distribution on n-vertex graphs where each</p>
    <p>edge is chosen independently with probability p</p>
    <p>Our average-case instances are related to Gn,p</p>
    <p>Main question: how hard is subgraph isomomorphism on a pair of random graphs GGn,p and HGn,q where q &gt;&gt; p &gt; ln(n)/n?</p>
  </div>
  <div class="page">
    <p>The Roadmap Main Lemma: If H is triangle-free with k nodes, and</p>
    <p>GGn,p where p=c.ln(k)/n with n, c suitably large, then with high probability (over all Gs), OPT(G,H)  (1+)|EG|/2</p>
    <p>So, if G is a subgraph of H, OPT(G,H) = |EG|</p>
    <p>if G is not a subgraph of H, OPT(G,H)  (1+)|EG|/2 whp.</p>
    <p>A (0.5+)-approximation algorithm can be used to distinguish between these two cases</p>
    <p>Inapproximability result based on the assumption that this is hard when G, H are drawn from a suitable distribution on triangle-free graphs</p>
    <p>Formulate this precisely as a refutation problem</p>
    <p>factor 2 gap</p>
  </div>
  <div class="page">
    <p>The Refutation Problem Let n,p = distribution on n-node -free graphs obtained by taking GGn,p, removing edges randomly till no s remain Refutation problem: Find a poly-time algorithm that</p>
    <p>given Gn,p and Hn,q, where q &gt;&gt; p = c.ln(n)/n,</p>
    <p>(a) returns yes if GH, (b) returns no with probability</p>
    <p>[With very high probability G will not be a subgraph of H.]</p>
    <p>A (0.5+)-approx. algorithm A yields a refutation algorithm:</p>
    <p>if GH, then A(G,H)  (0.5+)|EG| otherwise, let G be obtained by removing edges</p>
    <p>from GGn,p</p>
    <p>OPT(G,H)  OPT(G,H)  (1+)|EG|/2  (1+)c.n ln(n)/4</p>
    <p>|EG|  c.n ln(n)/2 and (# of s in G)</p>
    <p>c3.ln3(n)n 1/2 whp.</p>
    <p>|EG|  (1)c.n ln(n)/2,</p>
    <p>A(G,H)  OPT(G,H)  (1+4)|EG|/2</p>
  </div>
  <div class="page">
    <p>Refutation Problem (contd.)</p>
    <p>Feige initiated the use of average-case complexity to prove hardness results, where average-case hardness translates to hardness of a refutation problem</p>
    <p>Can make refutation problem harder and more robust: require algorithm to say yes if G has a subgraph of size |EG|(1-) isomorphic to H</p>
    <p>How hard is the refutation problem? Open. But, local analysis does not work  return yes iff all small subgraphs of G are subgraphs of H. Also can make G have (ln(n)/lnln(n)) girth.</p>
    <p>We set q &gt;&gt; p, to be far from graph isomorphism which is poly-time solvable for random graphs</p>
  </div>
  <div class="page">
    <p>Main Lemma and Proof Lemma: Let   0.5. If</p>
    <p>H is triangle-free with k nodes,</p>
    <p>GGn,p where p=c.ln(k)/n with n  n0(), c  c0(), then whp.</p>
    <p>(a) OPT(G,H)  (1+)c.n ln(k)/4, (b) |EG|  (1</p>
    <p>)c.n ln(k)/2, so</p>
    <p>(c) OPT(G,H)  (1+4)|EG|/2</p>
    <p>Proof: (a) Fix a mapping . For a random GGn,p,</p>
    <p>Value of  = V() = (i,j)EH u,vVG :(u)=i, (v)=j Xuv</p>
    <p>E[V()] = p.(i,j)EH | -1(i)| |</p>
    <p>-1(j)|</p>
  </div>
  <div class="page">
    <p>Turans Theorem</p>
    <p>An n-node graph that is Kr+1-free has at most</p>
    <p>(1-1/r).n2/2 edges.</p>
    <p>Corollary: Let H be a n-node graph that is Kr+1-free. Let w:VHZ+ be a wt. function such that i wi = n. Then, (i,j)EH wi.wj  (1</p>
    <p>Proof:</p>
    <p>Blow iVH to independent set of size wi to get H H is also Kr+1-free  use Turan on H</p>
  </div>
  <div class="page">
    <p>Main Lemma and Proof Lemma: Let   0.5. If</p>
    <p>H is triangle-free with k nodes,</p>
    <p>GGn,p where p=c.ln(k)/n with n  n0(), c  c0(), then whp.</p>
    <p>(a) OPT(G,H)  (1+)c.n ln(k)/4, (b) |EG|  (1</p>
    <p>)c.n ln(k)/2, so</p>
    <p>(c) OPT(G,H)  (1+4)|EG|/2</p>
    <p>Proof: (a) Fix a mapping . For a random GGn,p,</p>
    <p>Value of  = V() = (i,j)EH u,vVG :(u)=i, (v)=j Xuv</p>
    <p>E[V()] = p.(i,j)EH | -1(i)| |</p>
    <p>-1(j)|</p>
  </div>
  <div class="page">
    <p>Main Lemma and Proof Lemma: Let   0.5. If</p>
    <p>H is triangle-free with k nodes,</p>
    <p>GGn,p where p=c.ln(k)/n with n  n0(), c  c0(), then whp.</p>
    <p>(a) OPT(G,H)  (1+)c.n ln(k)/4, (b) |EG|  (1</p>
    <p>)c.n ln(k)/2, so</p>
    <p>(c) OPT(G,H)  (1+4)|EG|/2</p>
    <p>Proof: (a) Fix a mapping . For a random GGn,p,</p>
    <p>Value of  = V() = (i,j)EH u,vVG :(u)=i, (v)=j Xuv</p>
    <p>E[V()] = p.(i,j)EH | -1(i)| |</p>
    <p>-1(j)|  p.n2/4 (by Turan) V() is sum of independent random variables, so</p>
    <p>Pr[V() &gt; (1+)E[V()]]  eO(n ln(k))</p>
    <p>kn total mappings, so by union bound, whp. V()</p>
    <p>(1+)c.n ln(k)/4 for all   OPT(G,H)  (1+)c.n ln(k)/4 whp.</p>
  </div>
  <div class="page">
    <p>(b) E[|EG|] = p.n(n1)/2  c.n ln(k)/2</p>
    <p>By Chernoff bounds, |EG|  (1)c.n ln(k)/2 whp.</p>
    <p>(c) Therefore, OPT(G,H)  (1+4)|EG|/2</p>
    <p>Refutation problem: Find a poly-time algorithm that given Gn,p and Hn,q,</p>
    <p>where q &gt;&gt; p = c.ln(n)/n, (a) returns yes if GH, (b) returns no with probability</p>
    <p>A (0.5+)-approx. algorithm yields an algorithm for the refutation problem</p>
  </div>
  <div class="page">
    <p>Other Results</p>
    <p>Can get an 0.5+(1/|VH| ln(|VH|))-approximation using SDP  gives improvements for any fixed H</p>
    <p>Prelabeled MGH: a partial labeling :UVH is also given and output  has to be an extension of .</p>
    <p>Encodes the Multiway-Uncut problem: given G and terminal-set TVG, partition VG into |T| parts with terminal in each part, to maximize (# uncut edges)</p>
    <p>Here H is |T|-self loops, :TVH is a bijection</p>
    <p>Get a .8535-approx. using LP rounding.</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>Hardness of refutation problem: is subgraph isomorphism solvable in polynomial time when GGn,p and HGn,q?</p>
    <p>Dense instances: G has (n2) edges, H is arbitrary; can one get a PTAS? Can get a quasi-PTAS and a PTAS for Max-k-Cut and in general when H is vertex-transitive</p>
    <p>Directed setting: improve upon trivial 0.25approx. Encodes Max-Acyclic-Subgraph (nothing better than 0.5 known).</p>
    <p>Prelabeled MGH: improve upon 1/3approximation.</p>
  </div>
  <div class="page">
    <p>Thank You.</p>
  </div>
</Presentation>
