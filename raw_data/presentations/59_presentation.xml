<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2007 Multifacet Project University of Wisconsin-Madison</p>
    <p>LogTM-SE: Decoupling Hardware Transactional</p>
    <p>Memory from Caches</p>
    <p>Luke Yen, Jayaram Bobba, Michael R. Marty, Kevin E. Moore, Haris Volos,</p>
    <p>Mark D. Hill, Michael M. Swift, and David A. Wood</p>
    <p>Multifacet Project (www.cs.wisc.edu/multifacet) Computer Sciences Dept., Univ. of Wisconsin-Madison</p>
  </div>
  <div class="page">
    <p>Executive Summary</p>
    <p>Hardware Transactional Memory (HTM) Fast  HW handles old/new versions (e.g., write buffer)</p>
    <p>HW handles conflict detection (R/W bits &amp; coherence)</p>
    <p>But Closely Coupled to L1 cache  On critical paths &amp; hard for SW to save/restore</p>
    <p>Our Approach: Decoupled, Simple HW, SW control</p>
    <p>LogTM Signature Edition (LogTM-SE)  HW: LogTMs Log + Signatures (from Illinois Bulk)</p>
    <p>SW: Unbounded nesting, thread switching, &amp; paging</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  How HTMs accelerate TM  HTM Issues  Our Approach  Logs for version management  Signatures for conflict detection</p>
    <p>LogTM Signature Edition (LogTM-SE) Hardware</p>
    <p>LogTM-SE in Operation</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>How HTMs Accelerate TM</p>
    <p>Version Management  Save old values (for abort) &amp; new values (for commit)  Write buffer, cache incoherence, overflow structures</p>
    <p>Conflict Detection  Record read/write sets &amp; detect overlaps</p>
    <p>Read/Write (R/W) bits on cache blocks &amp; coherence</p>
  </div>
  <div class="page">
    <p>Some HTM Issues</p>
    <p>R/W bits in precious L1 cache design</p>
    <p>Replicate R/W bits for SMT?</p>
    <p>Replicate again for (bounded) nesting?</p>
    <p>Save/restore R/W for thread switch?</p>
    <p>Modify for paging (virtual page moves)?</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Decoupled: Decouple HTM state from L1 caches</p>
    <p>Simple HW: Keep HW state simple &amp; SW accessible</p>
    <p>SW Control: Have SW manage rare, complex events</p>
    <p>(Apply classic systems principles to HTMs)</p>
  </div>
  <div class="page">
    <p>Decoupling R / W bits from Cache</p>
    <p>BEFORE:</p>
    <p>Data Caches</p>
    <p>Registers</p>
    <p>SMT Thread Context</p>
    <p>Write</p>
    <p>Read</p>
    <p>Tag DataR W R W</p>
    <p>R W</p>
    <p>R W</p>
    <p>AFTER:</p>
    <p>R W</p>
    <p>R W</p>
  </div>
  <div class="page">
    <p>Version Management</p>
    <p>Save old values (for abort) &amp; new values (for commit)</p>
    <p>Use LogTMs Log  Before writing new values into memory, HW writes</p>
    <p>old values (and their virtual addresses) into log  Allocated per-thread in virtual memory (like pthreads stacks)</p>
    <p>Log exposed to SW &amp; not tied to a processor</p>
    <p>Why?  Decoupled, Simple HW, SW Control</p>
  </div>
  <div class="page">
    <p>Version Management Processor Hardware</p>
    <p>Data Caches</p>
    <p>Registers Register Checkpoint</p>
    <p>LogFrame</p>
    <p>LogPtr</p>
    <p>TMcount</p>
    <p>SMT Thread Context</p>
    <p>Tag Data</p>
  </div>
  <div class="page">
    <p>Conflict Detection</p>
    <p>Record read/write sets &amp; detect overlaps</p>
    <p>Adapt Signatures from Bulk [Ceze et al., ISCA 2006]  Over-approximate read/write sets in per-proc. Bloom Filters</p>
    <p>Check signatures on coherence events (unlike Bulk)</p>
    <p>Replicate for SMT</p>
    <p>Exposed to SW for nesting, thread switching, etc.</p>
    <p>Why?  Decoupled, Simple HW, SW Control</p>
  </div>
  <div class="page">
    <p>Signature Operation</p>
    <p>Program:</p>
    <p>xbegin</p>
    <p>LD A</p>
    <p>ST B</p>
    <p>LD C</p>
    <p>LD D</p>
    <p>ST C</p>
    <p>Hash Function(s)</p>
    <p>R</p>
    <p>W</p>
    <p>ABCDExternal ST E</p>
    <p>ALIASFALSE POSITIVE: CONFLICT!</p>
    <p>External ST F</p>
    <p>NO CONFLICT</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>LogTM Signature Edition (LogTM-SE) Hardware  Single-CMP system</p>
    <p>Processor hardware</p>
    <p>Experimental Results</p>
    <p>LogTM-SE in Operation</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Single-CMP System</p>
    <p>L1 $L1 $</p>
    <p>Core1Core1</p>
    <p>L1$L1$</p>
    <p>Core2Core2</p>
    <p>L1$L1$</p>
    <p>Core14Core14</p>
    <p>L1$L1$</p>
    <p>Core15Core15</p>
    <p>L1$L1$</p>
    <p>Core16Core16</p>
    <p>L2 $ L2 $</p>
    <p>DRAM</p>
    <p>Interconnect</p>
  </div>
  <div class="page">
    <p>LogTM-SE Processor Hardware</p>
    <p>Segmented log, like LogTM</p>
    <p>Track R / W sets with R / W signatures  Over-approximate R / W sets</p>
    <p>Tracks physical addresses</p>
    <p>Summary signature used for virtualization</p>
    <p>Conflict detection by coherence protocol  Check signatures on every</p>
    <p>memory access for SMT</p>
    <p>Data Caches</p>
    <p>Registers Register Checkpoint</p>
    <p>LogFrame</p>
    <p>LogPtr</p>
    <p>TMcount</p>
    <p>Write</p>
    <p>SMT Thread Context</p>
    <p>Tag Data</p>
    <p>Read</p>
    <p>SummaryRead</p>
    <p>SummaryWrite</p>
    <p>NO TM STATE</p>
  </div>
  <div class="page">
    <p>Experimental Methodology</p>
    <p>Infrastructure  Virtutech Simics full-system simulation</p>
    <p>Wisconsin GEMS timing modules</p>
    <p>System  32 transactional threads (16 cores x 2 SMT threads/core)</p>
    <p>32kB 4-way L1 I and D, 64-byte blocks, 1cycle latency  8MB 8-way unified L2, 34 cycle latency</p>
    <p>L2 directory for coherence, maintains full sharer bit vector</p>
    <p>Workloads  Radiosity, Raytrace, Mp3d, Cholesky Berkeley DB</p>
  </div>
  <div class="page">
    <p>Lock Results</p>
  </div>
  <div class="page">
    <p>Perfect Signature Results</p>
    <p>Perfect signatures similar or better than Locks</p>
  </div>
  <div class="page">
    <p>Realistic Signature Results</p>
    <p>Realistic Signatures similar to Perfect Signatures and Locks</p>
    <p>For our workloads, false positives are not a problem</p>
  </div>
  <div class="page">
    <p>What about scalability?</p>
    <p>Bigger system  Bigger transactions</p>
    <p>False positives are a function of:  Transaction size  Transactional duty cycle  Number of concurrent transactional threads  Filtering due to on-chip directory protocol</p>
    <p>Signatures gracefully degrade to serialization</p>
  </div>
  <div class="page">
    <p>HTM Issues (Solutions)</p>
    <p>R/W bits in precious L1 cache design  R/W signatures: out of L1 cache &amp; software-accessible</p>
    <p>Replicate R/W bits for SMT?  Easier to replicate signatures for SMT, but false positives</p>
    <p>Replicate again for (bounded) nesting?</p>
    <p>Save/restore R/W for thread switch?</p>
    <p>Modify for paging (virtual page moves)?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>LogTM Signature Edition (LogTM-SE) Hardware</p>
    <p>LogTM-SE in Operation  Unbounded Nested Transactions</p>
    <p>Thread Switching</p>
    <p>(Paging)</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Unbounded Nesting Support</p>
    <p>Why?  Composability: libraries</p>
    <p>Software Constructs: Retry, OrElse [Harris, PPoPP 05]</p>
    <p>What?  Signatures for each nesting level</p>
    <p>How?  One R / W signature set per SMT thread</p>
    <p>Save / Restore signatures using Transaction Log</p>
  </div>
  <div class="page">
    <p>Nested Begin</p>
    <p>Transaction Log</p>
    <p>R</p>
    <p>W</p>
    <p>Log Frame</p>
    <p>Log Ptr Xact header</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>xbegin</p>
    <p>LD</p>
    <p>ST</p>
    <p>xbegin</p>
    <p>Program Processor State</p>
  </div>
  <div class="page">
    <p>Nested Begin</p>
    <p>Transaction Log</p>
    <p>R</p>
    <p>W</p>
    <p>Log Frame</p>
    <p>Log Ptr Xact header</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>xbegin</p>
    <p>LD</p>
    <p>ST</p>
    <p>xbegin</p>
    <p>Program Processor State</p>
  </div>
  <div class="page">
    <p>Partial Abort</p>
    <p>Transaction Log</p>
    <p>R</p>
    <p>W</p>
    <p>Log Frame</p>
    <p>Log Ptr Xact header</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>xbegin</p>
    <p>LD</p>
    <p>ST</p>
    <p>xbegin</p>
    <p>LD</p>
    <p>ST</p>
    <p>ABORT!</p>
    <p>Program Processor State</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
  </div>
  <div class="page">
    <p>Nested Commit</p>
    <p>Xact header</p>
    <p>Transaction Log</p>
    <p>R</p>
    <p>W</p>
    <p>Log Frame</p>
    <p>Log Ptr Xact header</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
    <p>xbegin</p>
    <p>LD</p>
    <p>ST</p>
    <p>xbegin</p>
    <p>LD</p>
    <p>ST</p>
    <p>xend</p>
    <p>Program Processor State</p>
    <p>Undo entry</p>
    <p>Undo entry</p>
  </div>
  <div class="page">
    <p>Unbounded Nesting Support Summary</p>
    <p>Closed nesting:  Begin: save signatures</p>
    <p>Abort: restore signatures</p>
    <p>Commit: No signature action</p>
    <p>Open nesting:  Begin: save signatures</p>
    <p>Abort: restore signatures</p>
    <p>Commit: restore signatures</p>
  </div>
  <div class="page">
    <p>Thread Switching Support</p>
    <p>Why?  Support long-running transactions</p>
    <p>What?  Conflict Detection for descheduled transactions</p>
    <p>How?  Summary Read / Write signatures:</p>
    <p>If thread t of process P is scheduled to use an active signature, the corresponding summary signature holds the union of the saved signatures from all descheduled threads from process P.</p>
    <p>Updated using TLB-shootdown-like mechanism</p>
  </div>
  <div class="page">
    <p>Summary 00000000 00000000</p>
    <p>W RSummary</p>
    <p>W R</p>
    <p>Handling Thread Switching</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 00000000</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 00000000 00000000</p>
    <p>W R</p>
    <p>P1 P2</p>
    <p>Summary 00000000 00000000</p>
    <p>W R</p>
    <p>P3 P4</p>
    <p>T1 T2 T3</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Handling Thread Switching</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 00000000</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 00000000 00000000</p>
    <p>W RSummary</p>
    <p>W R</p>
    <p>Summary 00000000 00000000</p>
    <p>W R Summary</p>
    <p>W R</p>
    <p>P1 P2 P3 P4</p>
    <p>Deschedule</p>
    <p>T1 T2 T3</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Handling Thread Switching</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 01001000</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 00000000 00000000</p>
    <p>W RSummary</p>
    <p>W R</p>
    <p>Summary 00000000 00000000</p>
    <p>W R Summary</p>
    <p>W R</p>
    <p>P1 P2 P3 P4</p>
    <p>Summary 01001000 01010010</p>
    <p>W R</p>
    <p>Summary 01001000 01010010</p>
    <p>W R</p>
    <p>Deschedule</p>
    <p>T1 T2 T3</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Handling Thread Switching</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 01001000</p>
    <p>W</p>
    <p>R</p>
    <p>Summary 00000000 00000000</p>
    <p>W R</p>
    <p>P1 P2 P3 P4</p>
    <p>Summary 01001000 01010010</p>
    <p>W R</p>
    <p>Summary 01001000 01010010</p>
    <p>W RSummary</p>
    <p>W R</p>
    <p>T2 T3</p>
    <p>T1 OS</p>
  </div>
  <div class="page">
    <p>Thread Switching Support Summary</p>
    <p>Summary Read / Write signatures  Summarizes descheduled threads with active</p>
    <p>transactions</p>
    <p>One OS structure per process</p>
    <p>Check summary signature on every memory access</p>
    <p>Updated on transaction deschedule  Similar to TLB shootdown</p>
    <p>Coherence</p>
  </div>
  <div class="page">
    <p>Paging Support Summary</p>
    <p>Problem:</p>
    <p>Changing page frames</p>
    <p>Need to maintain isolation on transactional blocks</p>
    <p>Solution:</p>
    <p>On Page-Out:  Save Virtual -&gt; Physical mapping</p>
    <p>On Page-In:</p>
    <p>If different page frame, update signatures with physical address of transactional blocks in new page frame.</p>
  </div>
  <div class="page">
    <p>HTM Issues (Solutions)</p>
    <p>R/W signatures: out of L1 &amp; software-accessible</p>
    <p>Replicate signatures for SMT, but false positives</p>
    <p>Replicate again for (bounded) nesting?  Signatures saved/restored on log</p>
    <p>Save/restore R/W for thread switch?  Signatures saved &amp; distributed in summary signatures</p>
    <p>Modify for paging (virtual page moves)?  (Physical) signatures updated on page-in</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Explore scalability of signatures  Bigger system</p>
    <p>Bigger transactions</p>
    <p>Modify OS for LogTM-SE</p>
    <p>Optimize OS-support for Reduced Overheads</p>
  </div>
  <div class="page">
    <p>Executive Summary</p>
    <p>Hardware Transactional Memory (HTM) Fast  HW handles old/new versions (e.g., write buffer)</p>
    <p>HW handles conflict detection (R/W bits &amp; coherence)</p>
    <p>But Closely Coupled to L1 cache  On critical paths &amp; hard for SW to save/restore</p>
    <p>LogTM Signature Edition (LogTM-SE)  HW: LogTMs Log + Signatures (from Illinois Bulk)  SW: Unbounded nesting, thread switching, &amp; paging</p>
    <p>Our Approach: Decoupled, Simple HW, SW control</p>
  </div>
  <div class="page">
    <p>Google Wisconsin GEMS</p>
    <p>Works w/ Simics (free to academics)  commercial OS/apps</p>
    <p>SPARC out-of-order, x86 in-order, CMPs, SMPs, &amp; LogTM</p>
    <p>GPL release of GEMS used in four HPCA 2007 papers</p>
    <p>Detailed Processor</p>
    <p>Model</p>
    <p>OpalSimics</p>
    <p>Microbenchmarks</p>
    <p>Random Tester</p>
    <p>D e te</p>
    <p>rm in</p>
    <p>is ti</p>
    <p>c</p>
    <p>C o n te</p>
    <p>n d e d l o c k s</p>
    <p>Tr a c e f</p>
    <p>ie</p>
  </div>
  <div class="page">
    <p>GEMS News</p>
    <p>Version 1.4 available Friday:  LogTM bugfixes</p>
    <p>MESI Single-CMP protocol</p>
    <p>Fixes for GCC 4.X Compilation</p>
    <p>See www.cs.wisc.edu/gems</p>
    <p>GEMS 2.0: A future major LogTM release will include:  Single-CMP TM protocol  Signature support</p>
    <p>Software abort handler</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Before Virtualization After Virtualization</p>
    <p>$ M</p>
    <p>iss</p>
    <p>C o</p>
    <p>m m</p>
    <p>it</p>
    <p>A b</p>
    <p>o rt</p>
    <p>$ E</p>
    <p>victio n</p>
    <p>$ M</p>
    <p>iss</p>
    <p>C o</p>
    <p>m m</p>
    <p>it</p>
    <p>A b</p>
    <p>o rt</p>
    <p>$ E</p>
    <p>victio n</p>
    <p>P a</p>
    <p>g in</p>
    <p>g</p>
    <p>T h</p>
    <p>re a</p>
    <p>d S</p>
    <p>w itch</p>
    <p>UTM - - - H H H HC H H H</p>
    <p>VTM - - - S S SC S S S SWV</p>
    <p>UnrestrictedTM - - - A B B B B AS AS</p>
    <p>XTM XTM-g</p>
    <p>ASC SC</p>
    <p>SCV SCV</p>
    <p>S S</p>
    <p>SC SC</p>
    <p>SC SC</p>
    <p>AS AS</p>
    <p>PTM-Copy PTM-Select</p>
    <p>SC S</p>
    <p>S H</p>
    <p>S S</p>
    <p>SC S</p>
    <p>SC S</p>
    <p>S S</p>
    <p>S S</p>
    <p>LogTM-SE - - SC - - S SC - S S</p>
    <p>Shaded = virtualization event - = handled in simple HW H = complex hardware</p>
    <p>S = handled in software A = abort transaction C = copy values</p>
    <p>W = walk cache V = validate read set B = block other transactions</p>
    <p>HTM Virtualization Mechanisms</p>
  </div>
  <div class="page">
    <p>LogTM Overview [HPCA 06]</p>
    <p>Version Management  Keep old values for abort AND new values for commit  LogTM:</p>
    <p>Eager: record old values elsewhere; update in place  Other HTMs:</p>
    <p>Lazy: update elsewhere; keep old values in place</p>
    <p>Conflict Detection  Find read-write, write-read or write-write conflicts</p>
    <p>among concurrent transactions  LogTM:</p>
    <p>Eager: detect conflict on every read/write  Other HTMs:</p>
    <p>Lazy: detect conflict at end (commit/abort)</p>
    <p>Fast Commit</p>
    <p>Allows Stalling</p>
  </div>
  <div class="page">
    <p>Benchmark Details</p>
    <p>Benchmark Input Unit of Work Units Measured</p>
    <p>BerkeleyDB 1000 words 1 database read 128</p>
    <p>Cholesky Tk14.O Factorization 1</p>
    <p>Radiosity batch 1 task 64</p>
    <p>Raytrace teapot Whole parallel phase</p>
    <p>Mp3d 128 molecules 1 step 1024</p>
  </div>
  <div class="page">
    <p>Signature Implementations</p>
    <p>Results assume 2048-bit signatures, and operates on physical addresses</p>
  </div>
  <div class="page">
    <p>Paging Support Summary</p>
    <p>At Page Out,  Remember VP-&gt;PP</p>
    <p>At Page In, if (VP-&gt;PP)</p>
    <p>for each thread t in process</p>
    <p>if t is in transaction: Update signatures of t</p>
  </div>
</Presentation>
