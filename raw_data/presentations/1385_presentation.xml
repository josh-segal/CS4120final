<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Build It Break It Fix It Andrew Ruef, Michael Hicks, Dave Levin, James Parker, Atif Memon, Jandelyn Plane</p>
  </div>
  <div class="page">
    <p>Whats the motivation?</p>
    <p>What goes into secure software development?  How could we measure and</p>
    <p>contrast different styles/languages?</p>
    <p>How do we teach people to write secure code?  What exercise will let people</p>
    <p>observe both building and breaking?</p>
  </div>
  <div class="page">
    <p>Whats our idea?  A contest where contestants  Build some secure software according to a specification  Break the software written by other contestants  Fix the bugs found in their software by other</p>
    <p>Organizers provide the specification</p>
    <p>Spread the contest over three weekends</p>
    <p>Each phase takes one weekend</p>
    <p>Announce two winners, one for best software, one for most bugs found</p>
  </div>
  <div class="page">
    <p>Challenge specifications  Needs to be at least a little fun</p>
    <p>Have high and low level security properties  Writing in Java or Python should not win by default</p>
    <p>Judge implementations on both correctness and performance</p>
    <p>Capable of unambiguously testing features</p>
    <p>Should be somewhat complicated, but doable in 72 hours</p>
  </div>
  <div class="page">
    <p>Fall 2014, alarm system  Two programs, logappend, logread,</p>
    <p>manipulate a secure log file to either add events or query events</p>
    <p>Both programs authenticate to each other via a single shared symmetric key</p>
    <p>Programs that run faster are better</p>
    <p>Smaller log file size is better</p>
  </div>
  <div class="page">
    <p>Three different types of bugs  Correctness  The program didnt meet some</p>
    <p>part of the specification, or crashes</p>
    <p>Integrity  The log can be modified to attest to a false fact</p>
    <p>Confidentiality  The log can be analyzed to determine a protected fact</p>
    <p>We can automatically judge correctness and integrity bugs</p>
    <p>Integrity, confidentiality, and a correctness bug that produces a crash are counted as exploits</p>
  </div>
  <div class="page">
    <p>Infrastructure  This is still a hacking competition, it would</p>
    <p>be nice to not be compromised by our contestants</p>
    <p>Interface with contestants  A Haskell webapp</p>
    <p>Run contestant code  An EC2 backend to run every test in its own</p>
    <p>container</p>
  </div>
  <div class="page">
    <p>What were the results?  We ran the contest over September</p>
    <p>Out of 90 registered teams with over 180 registered individuals, we had  20 teams attempt to submit something  11 teams submit code that passed core tests</p>
    <p>Successful submissions in Go, Haskell, Python, Java, C, and C++</p>
    <p>Some failed submissions in Ruby</p>
  </div>
  <div class="page">
    <p>Scores over time</p>
  </div>
  <div class="page">
    <p>Break-It round</p>
    <p>Correctness vs Exploits</p>
    <p>Correctness Exploits</p>
  </div>
  <div class="page">
    <p>Overall winners</p>
    <p>First place build-it languages  Python  Haskell</p>
    <p>First place break-it team wrote in Go (and was third in build-it)</p>
  </div>
  <div class="page">
    <p>Bug finding strategies</p>
    <p>First place break-it winner did everything with manual auditing</p>
    <p>Second place used some fuzzing</p>
    <p>One team reported repurposing testing infrastructure they used during build-it</p>
  </div>
  <div class="page">
    <p>What do we think about it?  Memory safety helped but was not</p>
    <p>sufficient  This is an important property for the competition</p>
    <p>Strong static typing helped but was not enough  Python still wound up beating Haskell and Go</p>
    <p>There might be some interesting properties in the programs we already have</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Our contestants had fun and learned about security</p>
    <p>We measured peoples ability to both find bugs and write code</p>
    <p>We amplified one CTF problem into N</p>
    <p>Well do it again</p>
  </div>
</Presentation>
