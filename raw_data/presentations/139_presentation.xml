<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Direct Addressed Caches for Reduced Power Consumption</p>
    <p>Emmett Witchel Sam Larsen C. Scott Ananian Krste Asanovi</p>
    <p>MIT Lab for Computer Science</p>
  </div>
  <div class="page">
    <p>The Domain</p>
    <p>n We are attempting to reduce power consumed by the caches and memory system. o Not discs or screens. o 16% of processor + cache energy for StrongARM is</p>
    <p>dissipated in the data cache.</p>
    <p>n We focus on the data cache. The instruction cache is amenable to hardware-only techniques.</p>
    <p>n We are interested in power optimizations that are not just existing speed optimizations.</p>
    <p>n Exploit compile time knowledge to avoid runtime work. o Partially evaluate a program for certain hardware</p>
    <p>resources.</p>
    <p>n We show how software can eliminate cache tag checks which saves energy.</p>
  </div>
  <div class="page">
    <p>The First Problem  Cache Tags</p>
    <p>n Both set-associative and CAM-tag caches spend the majority of their energy in the tag check.</p>
    <p>Individual accesses are moderate power. Most of the energy is in the tag check.</p>
    <p>Individual accesses are high power because of multiple tag and data reads.</p>
    <p>Individual accesses are low power.</p>
    <p>Lowest miss rates.</p>
    <p>Moderate miss rates.</p>
    <p>High miss rates which means high energy usage.</p>
    <p>Each memory location can be anywhere in a sub bank.</p>
    <p>Each memory location has a small number (e.g., 4) homes.</p>
    <p>Each memory location has a unique home.</p>
    <p>CAM-tagSet-AssociativeDirect Mapped</p>
  </div>
  <div class="page">
    <p>The Solution  Pass Software Information To Hardware</p>
    <p>n The compiler often knows when the program is accessing the same piece of memory. Dont check the cache tags for the second access.</p>
    <p>n HW challenge  make this path low power.</p>
    <p>n SW challenge  find the opportunities for use. o Two compiler algorithms for two languages (C and</p>
    <p>Java).</p>
    <p>n Interface challenge  minimize ISA changes, dont disrupt HW, dont expose too much HW detail. o New flavors of memory ops are a common ISA</p>
    <p>change.</p>
    <p>n Security challenge  Protect process data from other processes. o Snoop on evicts, detect invalid state early in pipeline</p>
  </div>
  <div class="page">
    <p>Direct Addressed CAM Tag Cache Virtually Indexed &amp; Tagged</p>
    <p>Instruction Fetch</p>
    <p>lwlda offset</p>
    <p>r1</p>
    <p>Register File</p>
    <p>r2</p>
    <p>Data</p>
    <p>Offset Calculation</p>
    <p>Hit?</p>
    <p>CAM Tag Stat</p>
    <p>DA registers</p>
    <p>da2</p>
  </div>
  <div class="page">
    <p>Direct Addressing</p>
    <p>Instruction Fetch</p>
    <p>lwda offset</p>
    <p>r1 r2</p>
    <p>Data</p>
    <p>Offset Calculation</p>
    <p>Hit?</p>
    <p>DA registers</p>
    <p>da2</p>
    <p>CAM Tag Stat</p>
    <p>Software directly indexes into data RAM: No tag checksRegister</p>
    <p>File</p>
  </div>
  <div class="page">
    <p>Spill Code Using Direct Address Registers</p>
    <p>n Old code o subu $sp, 64</p>
    <p>o sw $ra, 60($sp)</p>
    <p>o sw $fp, 56($sp)</p>
    <p>o sw $s0, 52($sp)</p>
    <p>n Transformed code o subu $sp, 64</p>
    <p>o swlda $ra,60($sp),$da0</p>
    <p>o swda $fp,56($sp),$da0</p>
    <p>o swda $s0,52($sp),$da0</p>
    <p>n One tag check per line used for spilling.</p>
    <p>n It is a simple transformation. o Similar to load/store multiple on StrongARM</p>
    <p>l Ld/st multiple is a limited model  cant handle read-modify-write.</p>
    <p>o Hardware only schemes capture many references, but add latency.</p>
  </div>
  <div class="page">
    <p>Compiler Algorithm (C)</p>
    <p>Find dominance relationship.  E.g., Read of P[1] in A</p>
    <p>dominates read of P[0] in D.</p>
    <p>Determine distance.  P[0] is offset 4 from P[1].  If dist == 0, done.</p>
    <p>Determine alignment.  Stack &amp; static data are</p>
    <p>aligned by our backend.  Loop unrolling to</p>
    <p>increase alignment.</p>
    <p>Eliminate tag check in the read of P[0].</p>
    <p>temp = P[1];</p>
    <p>if (temp &lt; 0)</p>
    <p>if (P[0] &lt; temp) {</p>
    <p>temp = -temp;</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>Code from gsm in mediabench</p>
    <p>int P[8];</p>
  </div>
  <div class="page">
    <p>C Compiler Infrastructure</p>
    <p>We use SUIF, with a C backend.</p>
    <p>Loop unrolling to increase aligned references.</p>
    <p>Distance information from memory object offset.  Use simple, local information for aliases.</p>
    <p>Profile information to set pre-loop break condition. for(i=0; i&lt;N; i++) {</p>
    <p>A[i] = 0;</p>
    <p>}</p>
    <p>for(i=0; i&lt;N; i++) {</p>
    <p>if(&amp;A[I] % line_size == 0) break;</p>
    <p>A[I] = 0;</p>
    <p>}</p>
    <p>for(; i&lt;N; i += 4) {</p>
    <p>A[i + 0] = 0; A[i + 1] = 0;</p>
    <p>A[i + 2] = 0; A[i + 3] = 0;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Results  C Implementation</p>
    <p>Mediabench n Data cache energy reduction 8.7 - 40%.</p>
    <p>n Function entry/exit code not included  expect greater savings.</p>
  </div>
  <div class="page">
    <p>Java Compiler Infrastructure</p>
    <p>FLEX is a bytecode to native compiler developed at MIT.</p>
    <p>We wrote a MIPS back end  Modified GNU as to accept new memory operations.  Modified ISA simulator to track DAR state.</p>
    <p>Loops are unrolled.</p>
    <p>Object type is tracked for additional opportunity.  Allows low level optimization of access to e.g., hash</p>
    <p>code.</p>
  </div>
  <div class="page">
    <p>Results  Java Implementation</p>
    <p>Tag Checks Eliminated</p>
    <p>Jess Jack Zip DB</p>
    <p>Load Store</p>
    <p>n One big advantage  function entry/exit code was transformed. o Calling convention</p>
    <p>modified.</p>
    <p>n Data cache power savings 26-31%</p>
    <p>n No profile feedback.</p>
    <p>SPEC JVM 98</p>
  </div>
  <div class="page">
    <p>Results  Comparison with L0 Cache</p>
    <p>Tag Checks Eliminated</p>
    <p>g7 21</p>
    <p>_d e</p>
    <p>un to</p>
    <p>as t</p>
    <p>to as</p>
    <p>t un</p>
    <p>ep ic</p>
    <p>n DARs usually tie L0 or exceed it.</p>
    <p>n When L0 exceeds DARs, DARs help L0.</p>
    <p>Mediabench</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>n Fisher &amp; Ellis used loop unrolling to reduce memory bank conflicts. o Barua expanded the work with Modulo</p>
    <p>Unrolling.</p>
    <p>n Burd and Kin have proposed hardware L0 caches.</p>
    <p>n Andras FlexCache does software wayprediction to software controlled array of tag registers.</p>
  </div>
  <div class="page">
    <p>Acknowledgements</p>
    <p>n Mark Hampton  GNU assembler, simulator.</p>
    <p>n Ronny Krashinsky  Energy modeling.</p>
    <p>n Sam Larsen  SUIF compiler.</p>
    <p>n C. Scott Ananian  Java compiler (FLEX)</p>
    <p>n DARPA, NSF, Infineon</p>
  </div>
</Presentation>
