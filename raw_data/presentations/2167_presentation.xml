<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Empirical Study of File-System Fragmentation in Mobile Storage Systems</p>
    <p>Cheng Ji, Li-Pin Chang, Liang Shi, Chao Wu Qiao Li, Chun Jason Xue City University of Hong Kong</p>
    <p>National Chiao-Tung University Chongqing University</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Background and Motivation</p>
    <p>Characteristics of Fragmentation</p>
    <p>Evaluation of Fragmentation</p>
    <p>Pilot Solutions</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Background  File System Fragmentation</p>
    <p>A common problem in file systems</p>
    <p>Emerges when file cannot get continuous free space</p>
    <p>Negatively affects I/O performance of hard disks</p>
    <p>Increasing the frequency of disk head movements</p>
    <p>Extent1  Extent 2  Extent 3</p>
    <p>Accessing a fragmented file</p>
    <p>Rotation</p>
    <p>Increased disk seek time</p>
    <p>File</p>
  </div>
  <div class="page">
    <p>Background  Mobile Devices and Flash Storage</p>
    <p>Mobile devices are becoming the necessities for daily life  They run file systems on top of flash storage, e.g., eMMC</p>
    <p>I/O performance is crucial to system performance  Performance drops when operations of database and filesystem are combined</p>
    <p>[LEE et al., EMSOFT12] , e.g., JOJ problem [Kim et al. FAST14]</p>
    <p>Mobile devices Flash storage</p>
    <p>However, no work targets to study fragmentation impact on mobile devices.</p>
  </div>
  <div class="page">
    <p>Motivating Questions</p>
    <p>Q1Whether there is fragmentation on mobile devices?</p>
    <p>Q2Does fragmentation impact the performance of mobile devices?</p>
    <p>Q3How to resolve fragmentation problem for mobile storages?</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Background and Motivation</p>
    <p>Characteristics of Fragmentation</p>
    <p>Evaluation of Fragmentation</p>
    <p>Pilot Solutions</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Fragmentation in Aged Smartphones</p>
    <p>4 Randomly selected smartphones were Investigated</p>
    <p>Common usages including web surfing, sending/receiving emails,</p>
    <p>social networking, and taking pictures</p>
    <p>Characteristics of the Aged Smartphones</p>
  </div>
  <div class="page">
    <p>Fragmentation in Aged Smartphones</p>
    <p>Single File Fragmentation are reported  Degree of Fragmentation (DoF) = Next / Nlowest_ext</p>
    <p>Database files are severely fragmented</p>
  </div>
  <div class="page">
    <p>Fragments on SQLite Files</p>
    <p>Reasons for fragmented SQLite files</p>
    <p>Filesystem aging</p>
    <p>- Small holes make file fragments inevitable under high space utilization</p>
    <p>Writing behaviors</p>
    <p>- Multiple database files in the same directory are growing in parallel</p>
  </div>
  <div class="page">
    <p>Fragments on SQLite Files</p>
    <p>Reasons for fragmented SQLite files</p>
    <p>Filesystem aging</p>
    <p>- Small holes make file fragments inevitable under high space utilization</p>
    <p>Writing behaviors</p>
    <p>- Multiple database files in the same directory are growing in parallel</p>
    <p>No, it is not caused by buggy apps or artificial fragmentation!</p>
    <p>Observing fragmentation under a newly formatted file system</p>
    <p>- Run apps on Nexus 5 with low space utilization 19% (previous 93%)</p>
  </div>
  <div class="page">
    <p>Fragments on SQLite Files</p>
    <p>Experiment results</p>
    <p>Facebook: 48 files have 190 fragments (extends)</p>
    <p>- Fragmented pieces were dispersed over 1 GB address space (9 out of 48)  Caused by the SQLite writing behavior</p>
    <p>Files are still severely fragmented even under low space utilization!!!</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Background and Motivation</p>
    <p>Characteristics of Fragmentation</p>
    <p>Evaluation of Fragmentation</p>
    <p>Pilot Solutions</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Overall Problem</p>
    <p>I/O latency vs. fragmentation  Emulate an aged file system on Ascend P7</p>
    <p>- Fill large files and small files alternatively - Delete small file randomly to create small holes</p>
    <p>Use Mobibench to replay the file-system traces in the aged file system</p>
  </div>
  <div class="page">
    <p>Overall Problem</p>
    <p>I/O latency vs. fragmentation  Emulate an aged file system on Ascend P7</p>
    <p>- Fill large files and small files alternatively - Delete small file randomly to create small holes</p>
    <p>Use Mobibench to replay the file-system traces in the aged file system</p>
    <p>But wait shouldn't flash storage be immune to fragmentation? Fragment count</p>
    <p>I/O latencies are proportional to degree of fragmentation</p>
  </div>
  <div class="page">
    <p>Two Impacts Caused by Fragmentation (1)</p>
    <p>First: Increased Block I/O Frequency</p>
    <p>Accessing fragmented file requires more block I/O frequency</p>
    <p>10% read performance drop 13% more block I/O</p>
    <p>Access File A File A</p>
    <p>Higher block I/O frequency</p>
  </div>
  <div class="page">
    <p>Two Impacts Cause by Fragmentation (2)</p>
    <p>Second: Dispersed Block I/O Patterns</p>
    <p>Observation: I/O traces associated with database files</p>
    <p>DB files contribute to 70% of block writes [LEE et al., EMSOFT12]!</p>
    <p>WeChat Google Earth</p>
    <p>Facebook Twitter</p>
  </div>
  <div class="page">
    <p>Dispersed Block I/O Patterns</p>
    <p>Shouldn't flash storage be immune to fragmentation?</p>
    <p>Real measurement says no!  Random read/write over different disk regions  1 GB: highly dispersed, 1MB: concentrated</p>
    <p>(a) Random sync writes (b) Random reads</p>
    <p>Not only write latency, but also read latency becomes higher when the I/Os are highly dispresed!</p>
  </div>
  <div class="page">
    <p>I/O Patterns vs. Mapping Cache</p>
    <p>What is the cause of the slow access under dispersed I/Os?  Based on our industry experience, many mobile storage devices (eMMCs)</p>
    <p>employ demand-based mapping cache - Caching a small active portion of mapping table - Spatial locality exploitation:  Prefetching multiple mapping entries  Prefetching is seriously harmful under random access</p>
    <p>Mapping cache overhead will be highly related to I/O latencies on flash storage</p>
  </div>
  <div class="page">
    <p>Simulation Settings  Cache line size (4 KB), replacement algorithm (LRU)</p>
    <p>Host System File A without fragments</p>
    <p>Mapping Cache</p>
    <p>NAND Flash</p>
    <p>Flash Device</p>
    <p>Cache line</p>
    <p>File System</p>
    <p>Data Page 100 101 102</p>
    <p>LPN PPN 300 310 311</p>
    <p>Page 1 Page 2 Page 3</p>
    <p>Translation Page</p>
    <p>Access File A</p>
    <p>Mapping Cache Simulation</p>
  </div>
  <div class="page">
    <p>Mapping Cache Simulation</p>
    <p>Accessing file without fragments</p>
    <p>Host System File A without fragments</p>
    <p>Mapping Cache</p>
    <p>NAND Flash</p>
    <p>Flash Device</p>
    <p>Data Page 100 101 102</p>
    <p>LPN PPN 300 310 311</p>
    <p>Page 1 Page 2 Page 3</p>
    <p>Translation Page</p>
    <p>File System</p>
    <p>Access File A</p>
  </div>
  <div class="page">
    <p>Mapping Cache Simulation</p>
    <p>Accessing fragmented file</p>
    <p>Host System File Afragmented 100</p>
    <p>Mapping Cache</p>
    <p>NAND Flash</p>
    <p>Flash Device</p>
    <p>File System</p>
    <p>Data Page 100 101 102</p>
    <p>LPN PPN 300 310 311</p>
    <p>Page 1 Page 2 Page 3</p>
    <p>Translation Page</p>
    <p>Access File A</p>
  </div>
  <div class="page">
    <p>Mapping Cache Simulation</p>
    <p>(a) Cache Write Ratio (b) Cache Read Ratio</p>
    <p>Dispersed access patterns impose a high pressure on the mapping cache</p>
    <p>Block trace replay</p>
    <p>Before and after defragmenting database files</p>
    <p>The higher the ratio is (&gt;1), the higher the pressure on cache is</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Background and Motivation</p>
    <p>Characteristics of Fragmentation</p>
    <p>Evaluation of Fragmentation</p>
    <p>Pilot Solutions</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Conventional Defragmentation</p>
    <p>Migrating fragmented file pieces to sequential free space</p>
    <p>Massive data copying</p>
    <p>A passive solution</p>
    <p>No defragmentation schemes have been suggested for flash</p>
    <p>storage</p>
    <p>Continuous blocks</p>
    <p>Data copying</p>
    <p>File</p>
    <p>Fragmented pieces</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Solution 1 - Defragmenting Flash Storage</p>
    <p>Exploit the mapping scheme in the FTL</p>
    <p>Adjusting the mapping cache, instead of copying data</p>
    <p>Through a new block command</p>
    <p>Restoring the logical sequentiality without actually copying data in flash!</p>
    <p>Before Defrag After Defrag</p>
  </div>
  <div class="page">
    <p>Solution 2 - Proactive Fragmentation Avoidance</p>
    <p>Proactively avoid fragmentation by allocating sufficient continuous</p>
    <p>space for files to grow</p>
    <p>Target files: database files</p>
    <p>Small pre-allocated space would be sufficient</p>
    <p>Pre-allocation</p>
    <p>File</p>
    <p>File</p>
    <p>Write to the reserved blocks</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Background and Motivation</p>
    <p>Characteristics of Fragmentation</p>
    <p>Evaluation of Fragmentation</p>
    <p>Pilot Solutions</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>SQLite database files are severely fragmented in Android  File fragments impact the I/O performance of mobile devices</p>
    <p>Amplified I/O frequency  Increased mapping cache cost  a unique problem with flash storage</p>
    <p>Two pilot solutions to optimize file fragmentation  Future work</p>
    <p>Characterizing the production of fragments,  Validating our mapping cache simulation against real eMMCs</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Questions?</p>
  </div>
</Presentation>
