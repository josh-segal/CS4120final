<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MetaSymploit: Day-One Defense Against Script-based Attacks</p>
    <p>with Security-Enhanced Symbolic Analysis</p>
    <p>Ruowen Wang1, Peng Ning1, Tao Xie2, Quan Chen1 1North Carolina State University</p>
  </div>
  <div class="page">
    <p>Background</p>
  </div>
  <div class="page">
    <p>Wri/en in scripting languages (e.g., Ruby, Python)</p>
    <p>Run on the a/acker side, generate specific a/ack payloads to exploit various vulnerable targets</p>
    <p>All-in-one framework with built-in components providing rich APIs</p>
    <p>Support quick development, making the cost of a/ack is much lower than the cost of defense</p>
    <p>h/p://sectools.org/tag/sploits/</p>
    <p>Script-based A/ack Framework</p>
  </div>
  <div class="page">
    <p>Ruby-based penetration framework  1000+ (keep increasing) a/ack scripts  Target all popular OS platforms  One a/ack script can generate different payloads</p>
    <p>Script kiddie/Bot friendly</p>
    <p>One Example: Metasploit</p>
  </div>
  <div class="page">
    <p>Metasploit Exploit Mechanism</p>
  </div>
  <div class="page">
    <p>Running Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</p>
    <p>def exploit connect() preamble = &quot;\x00\x4d\x00\x03\x00\x01&quot; version = probe_ver() if version == 5 payload = prep_ark5() else payload = prep_ark4() end preamble &lt;&lt; payload.length sock.put(preamble) # Required by protocol sock.get_once() sock.put(payload) # Send attack payload sock.get_once() ... # vulnerability triggered end def prep_ark5() payload = shellcode() payload &lt;&lt; rand_alpha(1167 - payload.length) payload &lt;&lt; &quot;\xe98&quot; + [-1172].pack(&quot;V&quot;) payload &lt;&lt; &quot;\xeb\xf9&quot; payload &lt;&lt; get_target_ret(5) # Tar_Ver: 5 payload &lt;&lt; rand_alpha(4096 - payload.length) return payload end</p>
  </div>
  <div class="page">
    <p>Malicious Use of Metasploit</p>
  </div>
  <div class="page">
    <p>An effective defense is needed against these a/ack scripts  Catch up the release speed of new a/ack scripts  Provide quick defense using existing IDS  Prevent public exploit resource misuse</p>
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>The First system of  Fast A/ack Script Analysis  Automatic IDS Signature Generation  Using Security-enhanced Symbolic Analysis</p>
    <p>Our Work: MetaSymploit</p>
  </div>
  <div class="page">
    <p>Features  Require NO vulnerable application or testing environments</p>
    <p>Expose a/ack behavior of each step under different conditions</p>
    <p>Generate IDS signature just in minutes  Provide Day-One defense against new scripts</p>
    <p>MetaSymploit</p>
  </div>
  <div class="page">
    <p>MetaSymploit Architecture</p>
    <p>Script-based Attack Framework &amp; Scripting Language Interpreter</p>
    <p>Symbolic API Extension</p>
    <p>Behavior &amp; Constraint Logging</p>
    <p>Output API Hooking</p>
    <p>Constant Pattern Extracting</p>
    <p>Pattern Refining &amp; Consolidating</p>
    <p>Pattern Context Deriving</p>
    <p>Symbolic Execution Layer (SymExeLayer)</p>
    <p>Attack Script</p>
    <p>Attack Payloads Behavioral API Calls &amp; Attack Constraints</p>
    <p>Signature Generation (SigGen)</p>
    <p>Extracted Patterns Pattern Context</p>
    <p>IDS Signatures</p>
    <p>Symbolically executed</p>
  </div>
  <div class="page">
    <p>MetaSymploit Architecture -Symbolic Execution Layer</p>
    <p>Symbolic API Extension</p>
    <p>Behavior &amp; Constraint Logging</p>
    <p>Output API Hooking</p>
    <p>Symbolic Execution Layer (SymExeLayer)</p>
    <p>Symbolize APIs to return symbolic values  APIs depend on environment/target  APIs generate dynamic payload content</p>
    <p>Capture fine-grained a/ack behaviors and conditions  Behavioral APIs related to environment/target and payload  Branch constraints that reflect a/ack conditions</p>
    <p>Hook output API to capture the entire a/ack payload  The exact same payload received by target</p>
  </div>
  <div class="page">
    <p>Example of MetaSymploit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</p>
    <p>def exploit connect() preamble = &quot;\x00\x4d\x00\x03\x00\x01&quot; version = probe_ver() if version == 5 payload = prep_ark5() else payload = prep_ark4() end preamble &lt;&lt; payload.length sock.put(preamble) # Required by protocol sock.get_once() sock.put(payload) # Send attack payload sock.get_once() ... # vulnerability triggered end def prep_ark5() payload = shellcode() payload &lt;&lt; rand_alpha(1167 - payload.length) payload &lt;&lt; &quot;\xe98&quot; + [-1172].pack(&quot;V&quot;) payload &lt;&lt; &quot;\xeb\xf9&quot; payload &lt;&lt; get_target_ret(5) # Tar_Ver: 5 payload &lt;&lt; rand_alpha(4096 - payload.length) return payload end</p>
    <p>Symbolic APIs: probe_ver() shellcode() rand_alpha() Behavior &amp; Constraint Logging: probe_ver() sym_ver == 5 shellcode() &amp; get_target_ret() Hook output API: sock.put(payload)</p>
  </div>
  <div class="page">
    <p>Extract signature pa/erns for specific a/ack payload  Based on network protocol format  Parse both symbolic and concrete contents</p>
    <p>Refine extracted pa/erns  Filter out benign/trivial pa/erns  Avoid duplicates based on pa/ern hashing</p>
    <p>Derive semantic context of pa/erns  Analyze the call sequence of behavioral APIs  AND all constraints as the overall a/ack condition</p>
    <p>MetaSymploit Architecture -Signature Generator</p>
    <p>Constant Pattern Extracting</p>
    <p>Pattern Refining &amp; Consolidating</p>
    <p>Pattern Context Deriving</p>
    <p>Signature Generation (SigGen)</p>
  </div>
  <div class="page">
    <p>alert tcp any any -&gt; any 617 ( msg:script: type77.rb (Win), target_version: 5, behavior: probe_version, stack_overflow, JMP to Shellcode with vulnerable_ret_addr&quot;;</p>
    <p>content:&quot;|e9 38 6c fb ff ff eb f9 ad 32 aa 71|&quot;; pcre:&quot;/[.]{1167}\xe9\x38\x6c\xfb\xff\xff\xeb \xf9\xad\x32\xaa\x71[a-zA-Z]{2917}/&quot;;</p>
    <p>classtype:shellcode-detect; sid:5000656;)</p>
    <p>Example of IDS Signature Line 23: payload =&gt; [&lt;sym_shellcode, len=sym_integer&gt;, &lt;sym_rand_alpha, len=(1167-sym_integer)&gt;, &lt;&quot;\xe9\x38\x6c\xfb\xff\xff\xeb\xf9\xad\x32\xaa\x71&quot;, 12&gt;, &lt;sym_rand_alpha, 2917&gt;]</p>
    <p>red is symbolic value, green is concrete value</p>
  </div>
  <div class="page">
    <p>Focus on Metasploit using Snort Rules  Integrate into Metasploit Console  Develop a lightweight symbolic execution engine for Ruby</p>
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>No modification to Ruby Interpreters  Compatible with Ruby 1.8/1.9/2.0  Leveraging Scripting Language Features</p>
    <p>Debug tracing (set_trace_func)  Runtime context binding (Rubys Binding)  Dynamic method overriding</p>
    <p>Implementation -Lightweight Symbolic Execution Engine for Ruby</p>
  </div>
  <div class="page">
    <p>Implementation  Current Prototype:</p>
    <p>Based on Metasploit 4.4  Ruby 1.9.3  Gecode/R &amp; HAMPI as constraint solvers  Support 10 popular components in Metasploit  Cover 548 a/ack scripts</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Coverage Testing of Symbolic Execution Engine</p>
    <p>Effectiveness Validation using Real-World Metasploit Exploits</p>
    <p>Comparison with Official Snort Rules</p>
  </div>
  <div class="page">
    <p>Tested 548 a/ack scripts. Average &lt; 1 minute per script  93% automatic, 4% manual effort, 3% not supported</p>
    <p>Evaluation -Coverage Testing</p>
  </div>
  <div class="page">
    <p>Evaluation -Effectiveness Validation using Metasploit  Collect 45 Metasploit attack scripts targeting 45</p>
    <p>vulnerable applications from exploit-db.com</p>
  </div>
  <div class="page">
    <p>Evaluation -Effectiveness Validation  All a/ack payload packets are detected using MetaSymploit automatically generated Snort rules (100% true positive)</p>
    <p>Test with normal daily network traffic in CS labs for 2 months. No benign packet is mistakenly caught (0% false positive)</p>
    <p>The result is expected thanks to Pa/ern Refining in Signature Generator</p>
  </div>
  <div class="page">
    <p>Pattern comparison between 53 MetaSymploit generated rules and 50 official Snort rules for 22 Metasploit attack scripts</p>
    <p>Evaluation -Comparison with official Snort Rules  Compare with the official Snort rules (version 11/2012) for the previous 45 a/ack scripts.</p>
    <p>Only 22 out of 45 scripts have corresponding official Snort rules based on CVE matching.</p>
  </div>
  <div class="page">
    <p>Updates  Version 07/2013 (snortrules-snapshot-2950)  The deficient rules are complemented with more rules to cover Metasploit exploits</p>
    <p>Recent rules covers more public exploits, including Meterpreter shellcode</p>
    <p>Introduce new rules: exploit-kit.rules, malware-tools.rules</p>
    <p>Evaluation -Comparison with official Snort Signatures</p>
  </div>
  <div class="page">
    <p>The more a/ack scripts, the more MetaSymploit IDS signatures  Use as First Aid before patches are available  Use relevant sigs based on pa/ern context</p>
    <p>Limitations of classical symbolic execution  Infinite symbolic loop  Path explosion  Unsolvable constraints</p>
    <p>Discussion</p>
  </div>
  <div class="page">
    <p>Possible ways to bypass MetaSymploit  Develop script variants without releasing  Inject junk code/complex loops/non-linear constraints</p>
    <p>Obfuscate script, like Blackhole Exploit Kit</p>
    <p>Discussion</p>
  </div>
  <div class="page">
    <p>Related Work  Signature Generation</p>
    <p>A/ack Perspective:  Autograph [USENIX Security 04], Polygraph [S&amp;P 05],</p>
    <p>Hamsa [S&amp;P06]  Vulnerability Perspective:</p>
    <p>Vigilante [SOSP 05], ShieldGen [S&amp;P 07], Bouncer [SOSP 07]  Symbolic Execution for Security</p>
    <p>Binary Level:  BitBlaze [ICISS 08], SAGE [NDSS '08], EXE [CCS '06], AEG</p>
    <p>[NDSS '11].  Scripting Languages focusing on web applications:</p>
    <p>JavaScript [S&amp;P 10], PHP [USENIX Security 06], Ruby on Rails [CCS 10]</p>
  </div>
  <div class="page">
    <p>Metasploit is AWESOME! We like it!  But public exploit should not be misused!</p>
    <p>When you publish a new exploit, a/ach IDS rule with it, to avoid bad guys taking advantage of your good contribution!</p>
    <p>Dont Get Me Wrong</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Questions?</p>
  </div>
</Presentation>
