<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Size Does Ma+er Why Using Gadget-Chain Length to Prevent Code- reuse A+acks is Hard ENES GKTA (VRIJE UNIVERSITEIT AMSTERDAM)</p>
    <p>ELIAS ATHANASOPOULOS (FORTH-ICS)</p>
    <p>MICHALIS POLYCHRONAKIS (COLUMBIA UNIVERSITY)</p>
    <p>HERBERT BOS (VRIJE UNIVERSITEIT AMSTERDAM)</p>
    <p>GEORGIOS PORTOKALIDIS (STEVENS INSTITUTE OF TECHNOLOGY)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Promising defense mechanism against ROP</p>
    <p>We showed that recent CFI proposals do not stop ROP a8acks (see Out of Control: Overcoming CFI, Oakland 14)</p>
    <p>Control-Flow Integrity</p>
    <p>Return-Oriented Programming Call-Oriented Programming call YYY retn</p>
    <p>call ZZZ retn</p>
    <p>call eax</p>
    <p>FuncIon A:</p>
    <p>call edx</p>
    <p>FuncIon B:</p>
  </div>
  <div class="page">
    <p>InspecTng Branching History AlternaIve promising defenses against ROP</p>
    <p>State-of-the-art proposals:  kBouncer (Pappas et al., Usenix Security 2013)  ROPecker (Cheng et al., NDSS 2014)</p>
    <p>Fundamentally based on:  a Control-Flow Integrity policy, and  a Heuris6c-based policy</p>
    <p>Assume to be broken</p>
    <p>Focus of this talk</p>
    <p>What are the security</p>
    <p>implica6ons?</p>
  </div>
  <div class="page">
    <p>Relies on two threshold parameters</p>
    <p>HeurisTc-based policy</p>
    <p>LT</p>
    <p>Chain length CT</p>
    <p>LT or less number of instrucIons are considered as gadgets = max gadget length</p>
    <p>CT or more gadgets in sequence is an a&gt;ack = gadget chain threshold</p>
    <p>pop ecx pop eax retn</p>
    <p>add eax, ecx retn</p>
    <p>pop esi pop edi retn</p>
    <p>add eax, esi add eax, edi pop ecx retn</p>
    <p>BH check</p>
    <p>4</p>
    <p>5</p>
  </div>
  <div class="page">
    <p>Picking the best Thresholds An a8acker could mix short gadgets with long gadgets longer than LT</p>
    <p>Preferably: LT as large as possible &amp; CT as small as possible</p>
    <p>But se[ng LT too large and CT too small can lead to False PosiIves Thresholds have to be chosen carefully!</p>
    <p>LT</p>
    <p>Chain length less than CT</p>
    <p>Chain length less than CT HeurisIc Breakers</p>
  </div>
  <div class="page">
    <p>Chosen thresholds of defenses</p>
    <p>kBouncer ROPecker Time-of-Check Entry of SensiIve API</p>
    <p>Entry of SensiIve API + Exit of executable code window</p>
    <p>Gadget Length 20 instrucIons 6 instrucIons</p>
    <p>Inspect BH instances</p>
    <p>Detected max &quot;benign&quot; gadget chain length: 5</p>
    <p>Detected max &quot;benign&quot; gadget chain length: 10</p>
    <p>Gadget Chain Length</p>
  </div>
  <div class="page">
    <p>DifficulTes with HeurisTc Breakers HeurisIc Breakers may easily:  Use high number of different registers</p>
    <p>Leave used registers dirty at exit</p>
    <p>Require memory preparaIons</p>
    <p>Have a whacky code sequence</p>
    <p>mov eax, ebx mov ecx, edx add esi, edi</p>
    <p>mov esi, [0x1234] cmp esi, 10 jg X</p>
    <p>mov ecx, 0x2321 div ecx mov [eax], edi</p>
    <p>mov ecx, 0x5678 and edi, ecx xor eax, edi retn</p>
  </div>
  <div class="page">
    <p>Proof-of-Concept Exploit Real IE8 vulnerability</p>
    <p>Bypasses ASLR, DEP, kBouncer</p>
    <p>Idea: intersperse a HeurisIc breaker in ROP chain to prevent reaching CT</p>
    <p>Goal: execute our injected code</p>
  </div>
  <div class="page">
    <p>Branching History</p>
    <p>VirtualProtect</p>
    <p>SHELLCODE</p>
    <p>BH check</p>
    <p># = Non-Gadget</p>
    <p># = Gadget</p>
    <p># = Nr. of instr.</p>
  </div>
  <div class="page">
    <p>Branching History</p>
    <p>VirtualProtect</p>
    <p>SHELLCODE</p>
    <p>BH check</p>
    <p># = Non-Gadget</p>
    <p># = Gadget</p>
    <p># = Nr. of instr.</p>
  </div>
  <div class="page">
    <p>Branching History</p>
    <p>VirtualProtect</p>
    <p>SHELLCODE</p>
    <p>BH check</p>
    <p>NO ATTACK</p>
    <p># = Non-Gadget</p>
    <p># = Gadget</p>
    <p># = Nr. of instr.</p>
  </div>
  <div class="page">
    <p>ImplicaTons of Stricter Thresholds On mixing short gadgets with HeurisIc Breakers</p>
    <p>LT</p>
    <p>Less than CT</p>
    <p>Assume: LT = 20 CT = 3 Less than CT</p>
    <p>DifficulIes for an a8acker:  Not enough space to prepare Heuris6c Breaker  Not enough space to restore state aTer Heuris6c Breaker  Not enough space to prepare a func6on call</p>
  </div>
  <div class="page">
    <p>Per ApplicaTon Thresholds</p>
  </div>
  <div class="page">
    <p>Conclusion Choosing the right thresholds for ROP detecIon is difficult</p>
    <p>The long gadgets are not usable assumpIon is broken</p>
    <p>We need be8er tools to evaluate our defenses</p>
  </div>
</Presentation>
