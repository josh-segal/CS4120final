<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Side-channel Attack on HotSpot Heap Management</p>
    <p>Xiaofeng Wu, Kun Suo, Yong Zhao, Jia Rao The University of Texas at Arlington</p>
    <p>July 9, 2018HotCloud18 1</p>
  </div>
  <div class="page">
    <p>Side-Channel Attack</p>
    <p>Attack based on information gained from the implementation of a computer system</p>
    <p>Shared cache</p>
    <p>Timing</p>
    <p>Power consumption</p>
    <p>Acoustic measurement</p>
    <p>Steal or infer secrets</p>
    <p>Infer user activities to launch well-timed attack</p>
    <p>Attack shared clock in multi-tenant systems to manipulate users time measurement</p>
  </div>
  <div class="page">
    <p>Garbage Collection in HotSpot JVM</p>
    <p>Parallel Scavenge</p>
    <p>eden s0 s1</p>
    <p>young gen old gen : Minor GC : Major GC</p>
    <p>.</p>
    <p>. . .</p>
    <p>VM thread GC threadsOther mutator threads VM thread</p>
    <p>.</p>
    <p>. . .</p>
    <p>Other mutator threads</p>
    <p>.</p>
    <p>.</p>
    <p>Stop The World</p>
    <p>Each individual GC shouldnt take too long  large heap  Total time spent in GC shouldnt be too much  small heap, too frequent GC</p>
  </div>
  <div class="page">
    <p>Adaptive Heap Sizing in PS GC</p>
    <p>Three objectives  Meet pause time target  Meet throughput goal  Minimize memory footprint</p>
    <p>JVM automatically determines the heap size in the range of the initial (-Xms) and the maximum (-Xmx) heap sizes</p>
    <p>Pause time</p>
    <p>Throughput</p>
    <p>Footprint</p>
    <p>Shrink heap</p>
    <p>Expand heap</p>
    <p>Shrink heap</p>
    <p>Time is used as an indirect measure for memory efficiency</p>
  </div>
  <div class="page">
    <p>Minor and Major GC</p>
    <p>Major GCmutator Minor GCmutator mutator</p>
    <p>T1</p>
    <p>T3</p>
    <p>T2</p>
    <p>Major GC</p>
    <p>T4</p>
    <p>Minor GC cost = T2 / ( T1+T2 )</p>
    <p>Major GC cost = T4 / ( T3+T4 )</p>
    <p>Minor mutator time Minor GC time</p>
    <p>Major mutator time Major GC time</p>
    <p>Minor GC</p>
    <p>Vulnerability</p>
    <p>JVM throws an out-of-memory (OOM) error if five GCs fail to resolve the memory allocation failure</p>
    <p>JVM infers heap efficiency based on measured lengths of minor and major GCs, and adjusts heap size accordingly</p>
    <p>step must be performed</p>
    <p>step may be performed</p>
    <p>Minor GCMem alloc failure Minor GC Check free space</p>
    <p>in Old Gen</p>
    <p>Major GC</p>
    <p>Fail Not enough</p>
    <p>Check free space in Old Gen</p>
    <p>Major GC</p>
    <p>Not enough</p>
    <p>Fail</p>
    <p>Fail</p>
    <p>Major GCMajor GC 2nd Alloc in Young Gen</p>
    <p>Fail 3rd Alloc in</p>
    <p>Old Gen Major GCFail Major GC</p>
    <p>Fail5th Alloc in Old Gen</p>
    <p>Fail Out of Memory</p>
  </div>
  <div class="page">
    <p>Shared Clock</p>
    <p>GC starts GC ends</p>
    <p>JVM is not running</p>
    <p>JVM is running</p>
    <p>JVM is running</p>
    <p>Measured GC time</p>
    <p>gettimeofday()gettimeofday()</p>
    <p>Time measurement can be inaccurate in the presence of CPU multiplexing</p>
  </div>
  <div class="page">
    <p>Three Types of Attacks</p>
    <p>Cause OOM errors  Prevent JVM from expanding the heap in 5 GCs</p>
    <p>Cause excessive GC  Cause bloated heap</p>
  </div>
  <div class="page">
    <p>OOM Attack</p>
    <p>Attack pause time target  When there is a spike in memory demand and allocation failure, attack major GC measurement</p>
    <p>Dilated major GC time cause</p>
    <p>the heap to shrink, missing the</p>
    <p>opportunity to avoid OOM errors</p>
    <p>Pause time</p>
    <p>Throughput</p>
    <p>Footprint</p>
    <p>Shrink heap</p>
    <p>Expand heap</p>
    <p>Shrink heap</p>
  </div>
  <div class="page">
    <p>Excessive GC Attack</p>
    <p>Similar to OOM attack but more general</p>
    <p>Old generation have a tendency to drop quickly, and the decrement of heap size results in more GCs</p>
    <p>mutatormutator mutator mutator</p>
    <p>T1 T2</p>
    <p>T3 T4</p>
    <p>mutator</p>
    <p>T5</p>
    <p>T6</p>
    <p>Minor GC Minor GC Minor GCMajor GC Major GC</p>
    <p>Major GCmutatorMinor GCmutator Minor GCmutatorMinor GCmutator Major GCmutator</p>
    <p>T1 T2</p>
    <p>T3 T4</p>
    <p>T5</p>
    <p>T6</p>
    <p>Target major GC, dilate its time</p>
  </div>
  <div class="page">
    <p>Memory Bloat Attack</p>
    <p>Major GCmutatormutator mutator Major GCmutator</p>
    <p>T1 T2</p>
    <p>T3 T4</p>
    <p>mutator</p>
    <p>T5</p>
    <p>T6</p>
    <p>Minor GC Minor GC Minor GC</p>
    <p>Major GCmutatorMinor GCmutator Minor GCmutatorMinor GCmutator Major GCmutator</p>
    <p>T1 T2</p>
    <p>T3 T4</p>
    <p>T5</p>
    <p>T6</p>
    <p>Throughput = T1</p>
    <p>T1 + T2 &lt;latexit sha1_base64=&quot;Rjym03mwzs1hdTQ10Uc/eE8jsGA=&quot;&gt;AAACBnicbVDLSgMxFM3UV62vUZciBIsgCGWmCLoRim5cVpg+oB1KJs10QjPJkGSEMszKjb/ixoUibv0Gd/6NaTsLbT1w4XDOvSTnBAmjSjvOt1VaWV1b3yhvVra2d3b37P2DthKpxKSFBROyGyBFGOWkpalmpJtIguKAkU4wvp36nQciFRXc05OE+DEacRpSjLSRBvaxF0mRjqIk1fAa9kOJcOa5uZlzr54P7KpTc2aAy8QtSBUUaA7sr/5Q4DQmXGOGlOq5TqL9DElNMSN5pZ8qkiA8RiPSM5SjmCg/m8XI4alRhjAU0gzXcKb+vshQrNQkDsxmjHSkFr2p+J/XS3V45WeUm5CE4/lDYcqgFnDaCRxSSbBmE0MQltT8FeIImSq0aa5iSnAXIy+Tdr3mOjX3/qLauCnqKIMjcALOgAsuQQPcgSZoAQwewTN4BW/Wk/VivVsf89WSVdwcgj+wPn8A/xqYJw==&lt;/latexit&gt;&lt;latexit sha1_base64=&quot;Rjym03mwzs1hdTQ10Uc/eE8jsGA=&quot;&gt;AAACBnicbVDLSgMxFM3UV62vUZciBIsgCGWmCLoRim5cVpg+oB1KJs10QjPJkGSEMszKjb/ixoUibv0Gd/6NaTsLbT1w4XDOvSTnBAmjSjvOt1VaWV1b3yhvVra2d3b37P2DthKpxKSFBROyGyBFGOWkpalmpJtIguKAkU4wvp36nQciFRXc05OE+DEacRpSjLSRBvaxF0mRjqIk1fAa9kOJcOa5uZlzr54P7KpTc2aAy8QtSBUUaA7sr/5Q4DQmXGOGlOq5TqL9DElNMSN5pZ8qkiA8RiPSM5SjmCg/m8XI4alRhjAU0gzXcKb+vshQrNQkDsxmjHSkFr2p+J/XS3V45WeUm5CE4/lDYcqgFnDaCRxSSbBmE0MQltT8FeIImSq0aa5iSnAXIy+Tdr3mOjX3/qLauCnqKIMjcALOgAsuQQPcgSZoAQwewTN4BW/Wk/VivVsf89WSVdwcgj+wPn8A/xqYJw==&lt;/latexit&gt;&lt;latexit sha1_base64=&quot;Rjym03mwzs1hdTQ10Uc/eE8jsGA=&quot;&gt;AAACBnicbVDLSgMxFM3UV62vUZciBIsgCGWmCLoRim5cVpg+oB1KJs10QjPJkGSEMszKjb/ixoUibv0Gd/6NaTsLbT1w4XDOvSTnBAmjSjvOt1VaWV1b3yhvVra2d3b37P2DthKpxKSFBROyGyBFGOWkpalmpJtIguKAkU4wvp36nQciFRXc05OE+DEacRpSjLSRBvaxF0mRjqIk1fAa9kOJcOa5uZlzr54P7KpTc2aAy8QtSBUUaA7sr/5Q4DQmXGOGlOq5TqL9DElNMSN5pZ8qkiA8RiPSM5SjmCg/m8XI4alRhjAU0gzXcKb+vshQrNQkDsxmjHSkFr2p+J/XS3V45WeUm5CE4/lDYcqgFnDaCRxSSbBmE0MQltT8FeIImSq0aa5iSnAXIy+Tdr3mOjX3/qLauCnqKIMjcALOgAsuQQPcgSZoAQwewTN4BW/Wk/VivVsf89WSVdwcgj+wPn8A/xqYJw==&lt;/latexit&gt;&lt;latexit sha1_base64=&quot;Rjym03mwzs1hdTQ10Uc/eE8jsGA=&quot;&gt;AAACBnicbVDLSgMxFM3UV62vUZciBIsgCGWmCLoRim5cVpg+oB1KJs10QjPJkGSEMszKjb/ixoUibv0Gd/6NaTsLbT1w4XDOvSTnBAmjSjvOt1VaWV1b3yhvVra2d3b37P2DthKpxKSFBROyGyBFGOWkpalmpJtIguKAkU4wvp36nQciFRXc05OE+DEacRpSjLSRBvaxF0mRjqIk1fAa9kOJcOa5uZlzr54P7KpTc2aAy8QtSBUUaA7sr/5Q4DQmXGOGlOq5TqL9DElNMSN5pZ8qkiA8RiPSM5SjmCg/m8XI4alRhjAU0gzXcKb+vshQrNQkDsxmjHSkFr2p+J/XS3V45WeUm5CE4/lDYcqgFnDaCRxSSbBmE0MQltT8FeIImSq0aa5iSnAXIy+Tdr3mOjX3/qLauCnqKIMjcALOgAsuQQPcgSZoAQwewTN4BW/Wk/VivVsf89WSVdwcgj+wPn8A/xqYJw==&lt;/latexit&gt;</p>
    <p>Throughput 0 =</p>
    <p>T1</p>
    <p>T1 + T2 0</p>
    <p>&lt;latexit sha1_base64=&quot;iZ8FzPFEAEZTvVCsMZjYVjlOpIc=&quot;&gt;AAACDnicbVDLSsNAFJ3UV62vqEs3g6UoCCUpgm6EohuXFdIHtLFMppNm6GQSZiZCCfkCN/6KGxeKuHXtzr9x0mahrQcuHM65l5lzvJhRqSzr2yitrK6tb5Q3K1vbO7t75v5BR0aJwKSNIxaJnockYZSTtqKKkV4sCAo9Rrre5Cb3uw9ESBpxR01j4oZozKlPMVJaGpo1JxBRMg7iRN2nJxm8ggNfIJw6dqbnzGnkajY0q1bdmgEuE7sgVVCgNTS/BqMIJyHhCjMkZd+2YuWmSCiKGckqg0SSGOEJGpO+phyFRLrpLE4Ga1oZQT8SeriCM/X3RYpCKaehpzdDpAK56OXif14/Uf6lm1KuwxKO5w/5CYMqgnk3cEQFwYpNNUFYUP1XiAOk61C6wYouwV6MvEw6jbpt1e2782rzuqijDI7AMTgFNrgATXALWqANMHgEz+AVvBlPxovxbnzMV0tGcXMI/sD4/AEM/Ztx&lt;/latexit&gt;&lt;latexit sha1_base64=&quot;iZ8FzPFEAEZTvVCsMZjYVjlOpIc=&quot;&gt;AAACDnicbVDLSsNAFJ3UV62vqEs3g6UoCCUpgm6EohuXFdIHtLFMppNm6GQSZiZCCfkCN/6KGxeKuHXtzr9x0mahrQcuHM65l5lzvJhRqSzr2yitrK6tb5Q3K1vbO7t75v5BR0aJwKSNIxaJnockYZSTtqKKkV4sCAo9Rrre5Cb3uw9ESBpxR01j4oZozKlPMVJaGpo1JxBRMg7iRN2nJxm8ggNfIJw6dqbnzGnkajY0q1bdmgEuE7sgVVCgNTS/BqMIJyHhCjMkZd+2YuWmSCiKGckqg0SSGOEJGpO+phyFRLrpLE4Ga1oZQT8SeriCM/X3RYpCKaehpzdDpAK56OXif14/Uf6lm1KuwxKO5w/5CYMqgnk3cEQFwYpNNUFYUP1XiAOk61C6wYouwV6MvEw6jbpt1e2782rzuqijDI7AMTgFNrgATXALWqANMHgEz+AVvBlPxovxbnzMV0tGcXMI/sD4/AEM/Ztx&lt;/latexit&gt;&lt;latexit sha1_base64=&quot;iZ8FzPFEAEZTvVCsMZjYVjlOpIc=&quot;&gt;AAACDnicbVDLSsNAFJ3UV62vqEs3g6UoCCUpgm6EohuXFdIHtLFMppNm6GQSZiZCCfkCN/6KGxeKuHXtzr9x0mahrQcuHM65l5lzvJhRqSzr2yitrK6tb5Q3K1vbO7t75v5BR0aJwKSNIxaJnockYZSTtqKKkV4sCAo9Rrre5Cb3uw9ESBpxR01j4oZozKlPMVJaGpo1JxBRMg7iRN2nJxm8ggNfIJw6dqbnzGnkajY0q1bdmgEuE7sgVVCgNTS/BqMIJyHhCjMkZd+2YuWmSCiKGckqg0SSGOEJGpO+phyFRLrpLE4Ga1oZQT8SeriCM/X3RYpCKaehpzdDpAK56OXif14/Uf6lm1KuwxKO5w/5CYMqgnk3cEQFwYpNNUFYUP1XiAOk61C6wYouwV6MvEw6jbpt1e2782rzuqijDI7AMTgFNrgATXALWqANMHgEz+AVvBlPxovxbnzMV0tGcXMI/sD4/AEM/Ztx&lt;/latexit&gt;&lt;latexit sha1_base64=&quot;iZ8FzPFEAEZTvVCsMZjYVjlOpIc=&quot;&gt;AAACDnicbVDLSsNAFJ3UV62vqEs3g6UoCCUpgm6EohuXFdIHtLFMppNm6GQSZiZCCfkCN/6KGxeKuHXtzr9x0mahrQcuHM65l5lzvJhRqSzr2yitrK6tb5Q3K1vbO7t75v5BR0aJwKSNIxaJnockYZSTtqKKkV4sCAo9Rrre5Cb3uw9ESBpxR01j4oZozKlPMVJaGpo1JxBRMg7iRN2nJxm8ggNfIJw6dqbnzGnkajY0q1bdmgEuE7sgVVCgNTS/BqMIJyHhCjMkZd+2YuWmSCiKGckqg0SSGOEJGpO+phyFRLrpLE4Ga1oZQT8SeriCM/X3RYpCKaehpzdDpAK56OXif14/Uf6lm1KuwxKO5w/5CYMqgnk3cEQFwYpNNUFYUP1XiAOk61C6wYouwV6MvEw6jbpt1e2782rzuqijDI7AMTgFNrgATXALWqANMHgEz+AVvBlPxovxbnzMV0tGcXMI/sD4/AEM/Ztx&lt;/latexit&gt;</p>
    <p>Pause time</p>
    <p>Throughput</p>
    <p>Footprint</p>
    <p>Shrink heap</p>
    <p>Expand heap</p>
    <p>Shrink heap X</p>
    <p>Attack minor GC to prevent the heap from shrinking even memory demand drops</p>
    <p>Violate throughput target</p>
  </div>
  <div class="page">
    <p>Launch Attacks</p>
    <p>Proof-of-concept attacks  Modify JVM source code to manipulate GC time in the adaptive sizing algorithm</p>
    <p>Realistic attacks  Use eBPF to monitor libjvm.so to obtain GC thread ID and slowdown a specific type of GC  Use cgroup to limit the CPU usage of GC threads and hence dilate GC time</p>
    <p>Results  Crash a Java-based micro-benchmark with OOM errors  Cause ~65% more GC time in DaCapo  Inflict up to ~400% memory bloat in SPECjvm2008</p>
  </div>
  <div class="page">
    <p>OOM Attack</p>
    <p>Attack major GC measurement  JAVA_OPTION=</p>
    <p>-XX:+UseAdaptiveSizePolicy  -XX:+UseParallelGC  -XX:+UseParallelOldGC  -XX:ParallelGCThreads=10  -Xms = 32m -Xmx = 2g</p>
    <p>Both proof-of-concept and realistic attacks crash the micro-benchmark</p>
    <p>ArrayDeque</p>
    <p>A micro-benchmark with a sudden spike in memory demand</p>
    <p>Pause time</p>
    <p>Throughput</p>
    <p>Footprint</p>
    <p>Shrink heap</p>
    <p>Expand heap</p>
    <p>Shrink heap</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Essence of the problem  Heap size should be determined by the characteristics of a Java program  But heap efficiency is measured by GC time, an indirect measure  External CPU contention can affect internal heap management</p>
    <p>Many programs designed for dedicated systems are vulnerable to similar attacks in multi-tenant systems</p>
    <p>CPU multiplexing  wall-clock time or virtual time?  VMs, containers, conventional processes  Linux jiffies and userspace gettimeofday track wall-clock time  Linux CFS uses steal_clock to track virtual time for thread scheduling</p>
  </div>
  <div class="page">
    <p>Is this a real problem?</p>
    <p>No  No evidence that many applications suffer from inaccurate time measurement.</p>
    <p>Even so, the effect is random and universally distributed among applications.</p>
    <p>Our attack is sophisticated and needs to target a specific type of GC, not easy.</p>
    <p>Yes  In theory, if not measuring absolute latency, time measurement that is only relevant to a particular program or to measure the relative progress of program threads, should use virtual time</p>
    <p>This could be the source of erroneous program behavior, unpredictability and inefficiency</p>
    <p>Should we devise a completely isolated virtual time interface for individual programs/VMs/containers ?</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>xiaofeng.wu@mavs.uta.edu</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>A Realistic Attack  All experiments were conducted on a 64-core machine using</p>
    <p>OpenJDK 1.8 and Linux 4.15.0.  The JVM was configured with 10 GC threads.  Benchmark</p>
    <p>Dacapo: h2  SPECjvm2008: mpegaudio</p>
  </div>
  <div class="page">
    <p>Pause time-oriented Attack (excessive GC)</p>
    <p>A realistic attack using eBPF  Benchmark: h2 from Dacapo  The initial and maximum heap sizes: 16 MB and 900 MB  The maximum pause time is set to 100 ms</p>
    <p>The attack shrinks the heap, causing 88% more GC time</p>
  </div>
  <div class="page">
    <p>Contd - Pause time-oriented  We choose h2 from Dacapo-9.12-MR1-bach as a case study</p>
    <p>execute a number of transactions  set the maximum pause time as 100 ms</p>
    <p>The overhead induced by the pause time-oriented attack to the micro-benchmark.</p>
  </div>
  <div class="page">
    <p>Contd - Throughput-oriented</p>
    <p>-Xms32m -Xmx32g  Heap size is 1.61 larger</p>
    <p>S iz</p>
    <p>e (M</p>
    <p>B )</p>
    <p>Time (s)</p>
    <p>(a) Changes of heap size without attack</p>
    <p>Used heap before GC Used heap after GC</p>
    <p>Heap size</p>
    <p>S iz</p>
    <p>e (M</p>
    <p>B )</p>
    <p>Time (s)</p>
    <p>(b) Changes of heap size under attack</p>
    <p>ArrayDeque</p>
    <p>pause time</p>
    <p>throughput</p>
    <p>footprint</p>
    <p>reduce generation</p>
    <p>increase generation</p>
    <p>reduce generation</p>
  </div>
  <div class="page">
    <p>Throughput-oriented Attack (memory bloat)</p>
    <p>A realistic attack using eBPF  mpegaudio from SPECjvm2008  The initial and maximum heap sizes: 32 MB and 2.5GB</p>
    <p>S iz</p>
    <p>e (M</p>
    <p>B )</p>
    <p>Time (s)</p>
    <p>(a) Changes of heap size without attack</p>
    <p>Used heap before GC Used heap after GC</p>
    <p>Heap size</p>
    <p>S iz</p>
    <p>e (M</p>
    <p>B )</p>
    <p>Time (s)</p>
    <p>(b) Changes of heap size under attack</p>
    <p>w/o attack</p>
    <p>under attack The attack prevents the heap from shrinking when memory demand drops, causing more</p>
    <p>than 400% waste of memory</p>
  </div>
</Presentation>
