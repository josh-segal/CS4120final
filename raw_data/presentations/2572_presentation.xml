<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>So#ware Dataplane Verifica2on</p>
    <p>Mihai Dobrescu Katerina Argyraki</p>
    <p>EPFL</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding</p>
    <p>applica,on accelera,on</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding</p>
    <p>applica,on accelera,on</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding applica,on accelera,on</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on IP forwarding</p>
    <p>applica,on accelera,on</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on IP forwarding</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on IP forwarding</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on IP forwarding</p>
  </div>
  <div class="page">
    <p>So&lt;ware dataplanes</p>
    <p>intrusion detec,on IP forwarding</p>
  </div>
  <div class="page">
    <p>Flexibility - new intrusion detec.on, traffic filtering,</p>
    <p>sampling, applica.on accelera.on, ...</p>
    <p>Unpredictability - special packet causes router to crash - or doubles per-packet latency</p>
    <p>So&lt;ware dataplanes</p>
  </div>
  <div class="page">
    <p>Dataplane verificaHon</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding applica,on accelera,on</p>
  </div>
  <div class="page">
    <p>Dataplane verificaHon</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding applica,on accelera,ondataplane executable D</p>
  </div>
  <div class="page">
    <p>Dataplane verificaHon</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding applica,on accelera,on</p>
    <p>verificaHon tool</p>
    <p>dataplane executable D</p>
  </div>
  <div class="page">
    <p>Dataplane verificaHon</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding applica,on accelera,on</p>
    <p>verificaHon tooltarget property P</p>
    <p>dataplane executable D</p>
  </div>
  <div class="page">
    <p>Dataplane verificaHon</p>
    <p>intrusion detec,on</p>
    <p>IP forwarding applica,on accelera,on</p>
    <p>verificaHon tool</p>
    <p>D does (not) saHsfy property P</p>
    <p>target property P</p>
    <p>dataplane executable D</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0 DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0 DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>DART, PLDI 2005 Klee, OSDI 2008</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>ComposiHonal Test GeneraHon, POPL 2007</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>ComposiHonal Test GeneraHon, POPL 2007</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>ComposiHonal Test GeneraHon, POPL 2007</p>
  </div>
  <div class="page">
    <p>if (in.x &lt; 0) out = ...;</p>
    <p>else out = in;</p>
    <p>if (in.y &lt; 10) out = ...;</p>
    <p>else out = in;</p>
    <p>in.x &lt; 0</p>
    <p>in.x  0</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
    <p>in.y &lt; 10</p>
    <p>in.y  10</p>
  </div>
  <div class="page">
    <p>Define the domain - propose rules on how to write dataplanes - make it easy to apply composi.on</p>
    <p>Leverage the domain specificity - use it to sidestep path explosion - open the door to dataplane verifica.on</p>
    <p>Dataplane-specific verificaHon</p>
  </div>
  <div class="page">
    <p>Pipeline  Loops  Data structures</p>
    <p>Results</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Pipeline  Loops  Data structures</p>
    <p>Results</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>n b ran</p>
    <p>che s</p>
    <p>per ele</p>
    <p>me nt</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>verificaHon Hme  2 n m</p>
    <p>n b ran</p>
    <p>che s</p>
    <p>per ele</p>
    <p>me nt</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>n b ran</p>
    <p>che s</p>
    <p>per ele</p>
    <p>me nt</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>n b ran</p>
    <p>che s</p>
    <p>per ele</p>
    <p>me nt</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>n b ran</p>
    <p>che s</p>
    <p>per ele</p>
    <p>me nt</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>m elements</p>
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>verificaHon Hme  m 2 n</p>
    <p>n b ran</p>
    <p>che s</p>
    <p>per ele</p>
    <p>me nt</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>IP forwarding</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>... assert(src != dst); ...</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>... assert(src != dst); ...</p>
  </div>
  <div class="page">
    <p>intrusion detec,on</p>
    <p>applica,on accelera,on</p>
    <p>do not share mutable state</p>
    <p>... assert(src != dst); ...</p>
  </div>
  <div class="page">
    <p>Rule: pipeline structure - dis.nct packet-processing elements - do not share mutable state</p>
    <p>Effect: compose at the element level - can reduce #paths from  2 n m</p>
    <p>- to  m 2 n</p>
    <p>Pipeline decomposiHon</p>
  </div>
  <div class="page">
    <p>Pipeline  Loops  Data structures</p>
    <p>Results</p>
    <p>Outline</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>IP op,ons</p>
  </div>
  <div class="page">
    <p>IP op,ons</p>
  </div>
  <div class="page">
    <p>...op,on #1 op,on #mop,on #2</p>
  </div>
  <div class="page">
    <p>...op,on #1 op,on #mop,on #2</p>
  </div>
  <div class="page">
    <p>...op,on #1 op,on #mop,on #2</p>
  </div>
  <div class="page">
    <p>...op,on #1 op,on #mop,on #2</p>
  </div>
  <div class="page">
    <p>...op,on #1 op,on #mop,on #2</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>...op,on #1 op,on #mop,on #2</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>...op,on #1 op,on #mop,on #2</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>...op,on #1 op,on #mop,on #2</p>
    <p>verificaHon Hme  n m</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
    <p>li`le state sharing across iteraHons</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
    <p>li`le state sharing across iteraHons</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
    <p>li`le state sharing across iteraHons</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>...</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
    <p>li`le state sharing across iteraHons</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>...</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
    <p>li`le state sharing across iteraHons</p>
  </div>
  <div class="page">
    <p>m opHons</p>
    <p>op,on #1 op,on #mop,on #2 ...</p>
    <p>...</p>
    <p>verificaHon Hme  m n</p>
    <p>n o pHo</p>
    <p>n</p>
    <p>typ es</p>
    <p>li`le state sharing across iteraHons</p>
  </div>
  <div class="page">
    <p>Rule: mini-pipeline structure - liAle state shared across itera.ons - made explicit by the programmer</p>
    <p>Effect: compose at the iteraHon level - can reduce #paths from  n m</p>
    <p>- to  m n</p>
    <p>Loop decomposiHon</p>
  </div>
  <div class="page">
    <p>Pipeline  Loops  Data structures</p>
    <p>Results</p>
    <p>Outline</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>IP lookup</p>
  </div>
  <div class="page">
    <p>IP lookup</p>
  </div>
  <div class="page">
    <p>output_port = table[ dst_prefix ]... ...</p>
  </div>
  <div class="page">
    <p>output_port = table[ dst_prefix ]... ...</p>
  </div>
  <div class="page">
    <p>output_port = table[ dst_prefix ]</p>
    <p>...</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>output_port = table[ dst_prefix ]</p>
    <p>...</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>output_port = table.read( dst prefix )</p>
    <p>...</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>output_port = table.read( dst prefix )</p>
    <p>...</p>
    <p>... ... table impl</p>
  </div>
  <div class="page">
    <p>output_port = table.read( dst prefix )... ... table impl</p>
  </div>
  <div class="page">
    <p>Rule: data-structure interface - made explicit by the programmer</p>
    <p>Effect: abstract data-structure implementaHon - prevents data-structure size from contribu.ng</p>
    <p>to path explosion</p>
    <p>Data-access decomposiHon</p>
  </div>
  <div class="page">
    <p>Use pre-allocated arrays - no dynamic memory (de)alloca.on - hash table, longest prefix match</p>
    <p>Trade-off memory for verifiability - at least as fast (array lookups) - but larger memory footprint (pre-alloca.on)</p>
    <p>Verified data structures</p>
  </div>
  <div class="page">
    <p>Pipeline  Loops  Data structures</p>
    <p>Results</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Verified stateless &amp; simple stateful pipelines - IP router, NAT box, traffic monitor</p>
    <p>Proved bounded execuHon - no more than X instruc.ons per packet - disparity between worst-case and common path</p>
    <p>Proved crash-freedom - no packet will cause the pipeline to abort</p>
  </div>
  <div class="page">
    <p>/* IPFragmenter:: optcopy */</p>
    <p>for ( int i = 0; i &lt; opts_len; ) { int opt = oin[i], optlen; if (opt == IPOPT_NOP)</p>
    <p>optlen = 1; else if (opt == IPOPT_EOL || i == opts_len - 1 || i + (optlen = oin[i+1]) &gt; opts_len)</p>
    <p>break; if (opt &amp; 0x80) {</p>
    <p>//copy the option memcpy(...);</p>
    <p>} i += optlen;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>/* IPFragmenter:: optcopy */</p>
    <p>for ( int i = 0; i &lt; opts_len; ) { int opt = oin[i], optlen; if (opt == IPOPT_NOP)</p>
    <p>optlen = 1; else if (opt == IPOPT_EOL || i == opts_len - 1 || i + (optlen = oin[i+1]) &gt; opts_len)</p>
    <p>break; if (opt &amp; 0x80) {</p>
    <p>//copy the option memcpy(...);</p>
    <p>} i += optlen;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>/* IPFragmenter:: optcopy */</p>
    <p>for ( int i = 0; i &lt; opts_len; ) { int opt = oin[i], optlen; if (opt == IPOPT_NOP)</p>
    <p>optlen = 1; else if (opt == IPOPT_EOL || i == opts_len - 1 || i + (optlen = oin[i+1]) &gt; opts_len)</p>
    <p>break; if (opt &amp; 0x80) {</p>
    <p>//copy the option memcpy(...);</p>
    <p>} i += optlen;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>/* IPFragmenter:: optcopy */</p>
    <p>for ( int i = 0; i &lt; opts_len; ) { int opt = oin[i], optlen; if (opt == IPOPT_NOP)</p>
    <p>optlen = 1; else if (opt == IPOPT_EOL || i == opts_len - 1 || i + (optlen = oin[i+1]) &gt; opts_len)</p>
    <p>break; if (opt &amp; 0x80) {</p>
    <p>//copy the option memcpy(...);</p>
    <p>} i += optlen;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>VerificaHon Hme for Click pipelines</p>
  </div>
  <div class="page">
    <p>Homage</p>
    <p>AcHve networks - Tennenhouse &amp; Wetherall, CCR 1996</p>
    <p>S2E so&lt;ware analyzer - Chipounov et al., ASPLOS 2011</p>
    <p>ComposiHonal analysis - Godefroid, POPL 2007</p>
    <p>Click programming framework - Kohler, PhD thesis, 2000</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Dataplane-specific verificaHon - symbolic execu.on + composi.on - pipeline structure, limited loops,</p>
    <p>pre-allocated key/value stores</p>
    <p>Enables dataplane verificaHon in useful Hme - complete and sound analysis - of stateless and 2 simple stateful pipelines</p>
  </div>
</Presentation>
