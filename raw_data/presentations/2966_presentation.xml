<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>All File Systems Are Not Created Equal: On the Complexity of Crafting Crash</p>
    <p>Consistent Applications</p>
    <p>Thanumalayan Sankaranarayana Pillai, Vijay Chidambaram, Ramnatthan Alagappan,</p>
    <p>Samer Al-Kiswany, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications</p>
    <p>Thanumalayan Sankaranarayana Pillai, Vijay Chidambaram, Ramnatthan Alagappan,</p>
    <p>Samer Al-Kiswany, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>Crash Consistency</p>
    <p>Maintaining data invariants across a system crash  Example: Database transactions should be atomic</p>
  </div>
  <div class="page">
    <p>Crash Consistency</p>
    <p>Maintaining data invariants across a system crash  Example: Database transactions should be atomic</p>
    <p>Important in systems  File Systems  Relational Databases  Key-Value Stores</p>
  </div>
  <div class="page">
    <p>Crash Consistency</p>
    <p>Maintaining data invariants across a system crash  Example: Database transactions should be atomic</p>
    <p>Important in systems  File Systems  Relational Databases  Key-Value Stores</p>
    <p>Hard to get right: ARIES invented only in 1992  Proving ARIES took 5 more years (1997)</p>
  </div>
  <div class="page">
    <p>Lots of work in file system crash consistency  Journaling, copy-on-write, soft updates ...</p>
    <p>File-System Crash Consistency</p>
  </div>
  <div class="page">
    <p>Lots of work in file system crash consistency  Journaling, copy-on-write, soft updates ...</p>
    <p>FS consistency focuses on internal metadata  Do directories only contain valid directory entries?</p>
    <p>File-System Crash Consistency</p>
  </div>
  <div class="page">
    <p>Lots of work in file system crash consistency  Journaling, copy-on-write, soft updates ...</p>
    <p>FS consistency focuses on internal metadata  Do directories only contain valid directory entries?</p>
    <p>What about user-level data?</p>
    <p>File-System Crash Consistency</p>
  </div>
  <div class="page">
    <p>What guarantees do file systems give applications?  That can be used for consistency of user-level data</p>
    <p>This work studies ...</p>
  </div>
  <div class="page">
    <p>What guarantees do file systems give applications?  That can be used for consistency of user-level data</p>
    <p>Do applications maintain consistency correctly?  Important applications require user-level consistency  Databases, key-value stores, distributed systems ...</p>
    <p>This work studies ...</p>
  </div>
  <div class="page">
    <p>File system guarantees vary widely  Studied 16 configs of ext2,ext3,ext4,btrfs,xfs,reiserfs  Guarantees vary among configs of same file system  Guarantees often side-effects of FS implementation  POSIX standards of guarantees, if any, are debated</p>
    <p>We find ...</p>
  </div>
  <div class="page">
    <p>File system guarantees vary widely  Studied 16 configs of ext2,ext3,ext4,btrfs,xfs,reiserfs  Guarantees vary among configs of same file system  Guarantees often side-effects of FS implementation  POSIX standards of guarantees, if any, are debated</p>
    <p>Applications depend on guarantees in subtle ways</p>
    <p>Studied 11 applications: Databases, Distributed systems, Virtualization software, Key-value stores, VCS</p>
    <p>60 vulnerabilities under a weak file system model  More than 30 vulnerabilities under ext3, ext4, btrfs</p>
    <p>We find ...</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>An Example</p>
    <p>BOB: Examining File System Behavior</p>
    <p>ALICE: Examining Applications</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>An Example</p>
    <p>BOB: Examining File System Behavior</p>
    <p>ALICE: Examining Applications</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>A file initially contains the string a foo  Assume each character in a foo is a block of data</p>
    <p>Task: Atomically change the contents to a bar  On a power loss, we must retrieve either a foo or a bar</p>
    <p>Toy Example: Overview</p>
  </div>
  <div class="page">
    <p>Toy Example: Simple Overwrite</p>
    <p>Initial state</p>
    <p>/x/f1 a foo</p>
    <p>Final state</p>
    <p>/x/f1 a bar</p>
    <p>Modification</p>
    <p>pwrite(/x/f1, 2, bar)</p>
    <p>&lt;offset&gt;</p>
  </div>
  <div class="page">
    <p>Intermediate states possible on crash</p>
    <p>Toy Example: Simple Overwrite</p>
    <p>Initial state</p>
    <p>/x/f1 a foo</p>
    <p>Modification</p>
    <p>pwrite(/x/f1, 2, bar)</p>
    <p>Final state</p>
    <p>/x/f1 a bar</p>
    <p>Intermediate state 1</p>
    <p>/x/f1 a boo</p>
    <p>Intermediate state 2</p>
    <p>/x/f1 a far</p>
    <p>Intermediate states 3, 4, 5 ....</p>
  </div>
  <div class="page">
    <p>What if crash atomicity is needed?</p>
    <p>Use application-level logging (a.k.a. undo logging/rollback journaling) a. Make a copy of old data in log file b. Modify actual file c. Delete log file d. On a crash, data can be recovered from the log</p>
    <p>Toy Example: Maintaining Consistency</p>
  </div>
  <div class="page">
    <p>What if crash atomicity is needed?</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>&lt;offset, size, data&gt; pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>Write to log</p>
    <p>Actual modification</p>
    <p>Delete log</p>
    <p>Toy Example: Protocol #1</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal)!</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>Toy Example: Protocol #1</p>
    <p>Some possible intermediate states</p>
    <p>/x/f1 a foo /x/log1</p>
    <p>/x/f1 a foo /x/log1 2, 3, f</p>
    <p>/x/f1 a boo /x/log1 2, 3, foo</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal)!</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>Some possible intermediate states</p>
    <p>/x/f1 a foo /x/log1</p>
    <p>/x/f1 a foo /x/log1 2, 3, f</p>
    <p>/x/f1 a boo /x/log1 2, 3, foo</p>
    <p>Toy Example: Protocol #1</p>
    <p>Simply delete log file during recovery</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal)!</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>Some possible intermediate states</p>
    <p>/x/f1 a foo /x/log1</p>
    <p>/x/f1 a foo /x/log1 2, 3, f</p>
    <p>/x/f1 a boo /x/log1 2, 3, foo</p>
    <p>Toy Example: Protocol #1</p>
    <p>Recover from log file during recovery</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal)!</p>
    <p>Doesnt work in ext3(data-ordered)</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>Toy Example: Protocol #1</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal)!</p>
    <p>Doesnt work in ext3(data-ordered)</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>ext3(ordered) can re-order these two requests, sending pwrite(f1) to disk first, before write(log1)</p>
    <p>Toy Example: Protocol #1</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal)!</p>
    <p>Doesnt work in ext3(data-ordered)</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo);</p>
    <p>pwrite(/x/f1, 2, bar);</p>
    <p>unlink(/x/log1);</p>
    <p>A possible intermediate state</p>
    <p>/x/f1 a boo /x/log1</p>
    <p>Recovery not possible!</p>
    <p>Toy Example: Protocol #1</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal), (data-ordered)!</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo); fsync(/x/log1);</p>
    <p>pwrite(/x/f1, 2, bar); fsync(/x/f1); unlink(/x/log1);</p>
    <p>Toy Example: Protocol #2</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal), (data-ordered)!</p>
    <p>Doesnt work in ext3(writeback)</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, foo); fsync(/x/log1);</p>
    <p>pwrite(/x/f1, 2, bar); fsync(/x/f1); unlink(/x/log1);</p>
    <p>A possible intermediate states</p>
    <p>/x/f1 a foo /x/log1 2, 3, #!@</p>
    <p>File size alone increases for log1, and garbage occurs. Recovery cannot differentiate between garbage and data!</p>
    <p>Crash here</p>
    <p>Toy Example: Protocol #2</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal), (data-ordered), (writeback)</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, checksum, foo); fsync(/x/log1);</p>
    <p>pwrite(/x/f1, 2, bar); fsync(/x/f1); unlink(/x/log1);</p>
    <p>Toy Example: Protocol #3</p>
  </div>
  <div class="page">
    <p>Works in ext3(data-journal), (data-ordered), (writeback)</p>
    <p>Not enough, according to Linux manpages</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, checksum, foo); fsync(/x/log1);</p>
    <p>pwrite(/x/f1, 2, bar); fsync(/x/f1); unlink(/x/log1);</p>
    <p>A possible intermediate states</p>
    <p>/x/f1 a boo</p>
    <p>The log files directory entry might never be created</p>
    <p>Toy Example: Protocol #3</p>
  </div>
  <div class="page">
    <p>Works in all file systems</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, checksum, foo); fsync(/x/log1); fsync(/x); pwrite(/x/f1, 2, bar); fsync(/x/f1); unlink(/x/log1);</p>
    <p>Toy Example: Protocol #4</p>
  </div>
  <div class="page">
    <p>Works in all file systems</p>
    <p>(Additional fsync() required for durability in all FS)</p>
    <p>Update Protocol creat(/x/log1); write(/x/log1, 2, 3, checksum, foo); fsync(/x/log1); fsync(/x); pwrite(/x/f1, 2, bar); fsync(/x/f1); unlink(/x/log1); fsync(/x);</p>
    <p>Toy Example: Protocol #5</p>
  </div>
  <div class="page">
    <p>File systems vary in crash-related behavior  ext3(ordered) re-orders, while ext3(journaled) does not</p>
    <p>Applications usually depend on some behavior  Depend on ordering: Some fsync() calls can be omitted</p>
    <p>Example: Summary</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>An Example</p>
    <p>BOB: Examining File System Behavior</p>
    <p>ALICE: Examining Applications</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Two classes of properties: atomicity and ordering  Atomicity example: Is a write() call atomic in the FS?  Ordering example: Are write() calls sent to disk in-order?</p>
    <p>Studied ext2, ext3, ext4, btrfs, xfs, reiserfs  We studied 16 configurations of the six file systems</p>
    <p>FS Behavior: Persistence Properties</p>
  </div>
  <div class="page">
    <p>Methodology: The Block-Order Breaker (BOB)</p>
  </div>
  <div class="page">
    <p>Methodology: The Block-Order Breaker (BOB)</p>
  </div>
  <div class="page">
    <p>Methodology: The Block-Order Breaker (BOB)</p>
  </div>
  <div class="page">
    <p>Methodology: The Block-Order Breaker (BOB)</p>
  </div>
  <div class="page">
    <p>File System Study: Results</p>
    <p>File system configuration</p>
    <p>Atomicity Ordering</p>
    <p>One sector overwrite</p>
    <p>Append content</p>
    <p>Many sector overwrite</p>
    <p>Directory operation</p>
    <p>Overwrite  Any op</p>
    <p>Append  Any op</p>
    <p>Dir-op  Any op</p>
    <p>Append  Rename</p>
    <p>ext2 async</p>
    <p>sync</p>
    <p>ext3</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>data-journal</p>
    <p>ext4</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>no-delalloc</p>
    <p>data-journal</p>
    <p>btrfs</p>
    <p>xfs default</p>
    <p>wsync</p>
  </div>
  <div class="page">
    <p>File System Study: Results</p>
    <p>File system configuration</p>
    <p>Atomicity Ordering</p>
    <p>One sector overwrite</p>
    <p>Append content</p>
    <p>Many sector overwrite</p>
    <p>Directory operation</p>
    <p>Overwrite  Any op</p>
    <p>Append  Any op</p>
    <p>Dir-op  Any op</p>
    <p>Append  Rename</p>
    <p>ext2 async</p>
    <p>sync</p>
    <p>ext3</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>data-journal</p>
    <p>ext4</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>no-delalloc</p>
    <p>data-journal</p>
    <p>btrfs</p>
    <p>xfs default</p>
    <p>wsync</p>
    <p>File System Different Configurations of File System</p>
  </div>
  <div class="page">
    <p>File System Study: Results</p>
    <p>File system configuration</p>
    <p>Atomicity Ordering</p>
    <p>One sector overwrite</p>
    <p>Append content</p>
    <p>Many sector overwrite</p>
    <p>Directory operation</p>
    <p>Overwrite  Any op</p>
    <p>Append  Any op</p>
    <p>Dir-op  Any op</p>
    <p>Append  Rename</p>
    <p>ext2 async</p>
    <p>sync</p>
    <p>ext3</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>data-journal</p>
    <p>ext4</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>no-delalloc</p>
    <p>data-journal</p>
    <p>btrfs</p>
    <p>xfs default</p>
    <p>wsync</p>
    <p>Persistence Properties considered</p>
  </div>
  <div class="page">
    <p>File System Study: Results</p>
    <p>File system configuration</p>
    <p>Atomicity Ordering</p>
    <p>One sector overwrite</p>
    <p>Append content</p>
    <p>Many sector overwrite</p>
    <p>Directory operation</p>
    <p>Overwrite  Any op</p>
    <p>Append  Any op</p>
    <p>Dir-op  Any op</p>
    <p>Append  Rename</p>
    <p>ext2 async</p>
    <p>sync</p>
    <p>ext3</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>data-journal</p>
    <p>ext4</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>no-delalloc</p>
    <p>data-journal</p>
    <p>btrfs</p>
    <p>xfs default</p>
    <p>wsync</p>
    <p>Is a directory operation, like rename(), atomic on a system crash?</p>
  </div>
  <div class="page">
    <p>File System Study: Results</p>
    <p>File system configuration</p>
    <p>Atomicity Ordering</p>
    <p>One sector overwrite</p>
    <p>Append content</p>
    <p>Many sector overwrite</p>
    <p>Directory operation</p>
    <p>Overwrite  Any op</p>
    <p>Append  Any op</p>
    <p>Dir-op  Any op</p>
    <p>Append  Rename</p>
    <p>ext2 async</p>
    <p>sync</p>
    <p>ext3</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>data-journal</p>
    <p>ext4</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>no-delalloc</p>
    <p>data-journal</p>
    <p>btrfs</p>
    <p>xfs default</p>
    <p>wsync</p>
    <p>Property certainly not obeyed</p>
    <p>We did not see a violation</p>
  </div>
  <div class="page">
    <p>File System Study: Results</p>
    <p>File system configuration</p>
    <p>Atomicity Ordering</p>
    <p>One sector overwrite</p>
    <p>Append content</p>
    <p>Many sector overwrite</p>
    <p>Directory operation</p>
    <p>Overwrite  Any op</p>
    <p>Append  Any op</p>
    <p>Dir-op  Any op</p>
    <p>Append  Rename</p>
    <p>ext2 async</p>
    <p>sync</p>
    <p>ext3</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>data-journal</p>
    <p>ext4</p>
    <p>writeback</p>
    <p>ordered</p>
    <p>no-delalloc</p>
    <p>data-journal</p>
    <p>btrfs</p>
    <p>xfs default</p>
    <p>wsync</p>
    <p>Main result: File systems vary in their persistence properties</p>
  </div>
  <div class="page">
    <p>Applications should not rely on persistence properties</p>
    <p>Testing applications on a specific FS is not enough  ext3(data-journal): Re-ordering vulnerabilities are hidden</p>
    <p>File System Study: Conclusion</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>An Example</p>
    <p>BOB: Examining File System Behavior</p>
    <p>ALICE: Examining Applications</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>ALICE: Goal</p>
    <p>Application-Level Intelligent Crash Explorer</p>
    <p>Goal: Tool to find crash vulnerabilities of an application  Find vulnerabilities across all file systems  Relate vulnerabilities to specific source lines  Relate vulnerabilities to file system behavior</p>
  </div>
  <div class="page">
    <p>ALICE: Technique User-supplied</p>
    <p>Application Workload</p>
    <p>ALICE</p>
    <p>User supplies ALICE with an application workload</p>
    <p>Example: A database transaction</p>
  </div>
  <div class="page">
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>ALICE runs workload and records system-call trace</p>
    <p>ALICE</p>
    <p>User-supplied Application Workload</p>
  </div>
  <div class="page">
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>APM: Abstract Persistence</p>
    <p>Model</p>
    <p>APM models all crash states that can occur on an FS</p>
    <p>Default, weak APM allows many possible states</p>
    <p>Custom APMs can be configured by user for a specific file system</p>
    <p>Eg: ext3(ordered) APM allows states with overwrites re-ordered; ext3(data-journal) APM does not</p>
    <p>ALICE</p>
    <p>User-supplied Application Workload</p>
  </div>
  <div class="page">
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>Explorer</p>
    <p>APM: Abstract Persistence</p>
    <p>Model</p>
    <p>Explorer reconstructs some states using the APM</p>
    <p>ALICE</p>
    <p>User-supplied Application Workload</p>
  </div>
  <div class="page">
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>Explorer</p>
    <p>...</p>
    <p>ALICE APM: Abstract</p>
    <p>Persistence Model</p>
    <p>Crash state #1 (Violates atomicity</p>
    <p>of syscall-1)</p>
    <p>Crash state #2 (Violates ordering of syscall-1 and 2)</p>
    <p>Explorer targets specific states  Relating to atomicity and</p>
    <p>re-ordering of each syscall</p>
    <p>User-supplied Application Workload</p>
  </div>
  <div class="page">
    <p>The application is run on each reconstructed state</p>
    <p>User supplies application checker  Example: Was ACID preserved?</p>
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>Explorer</p>
    <p>... User-supplied</p>
    <p>Application Checker</p>
    <p>ALICE APM: Abstract</p>
    <p>Persistence Model</p>
    <p>Crash state #1 (Violates atomicity</p>
    <p>of syscall-1)</p>
    <p>Crash state #2 (Violates ordering of syscall-1 and 2)</p>
    <p>User-supplied Application Workload</p>
  </div>
  <div class="page">
    <p>Checker shows which states are recovered from correctly</p>
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>Explorer</p>
    <p>...</p>
    <p>ALICE APM: Abstract</p>
    <p>Persistence Model</p>
    <p>Crash state #1 (Violates atomicity</p>
    <p>of syscall-1)</p>
    <p>Crash state #2 (Violates ordering of syscall-1 and 2)</p>
    <p>Correct Incorrect</p>
    <p>User-supplied Application Workload</p>
    <p>User-supplied Application</p>
    <p>Checker</p>
  </div>
  <div class="page">
    <p>From checker outputs, we determine vulnerabilities</p>
    <p>ALICE: Technique</p>
    <p>System-call Trace</p>
    <p>Explorer</p>
    <p>...</p>
    <p>Crash vulnerability: Reordering syscall-1 and 2</p>
    <p>ALICE APM: Abstract</p>
    <p>Persistence Model</p>
    <p>Crash state #1 (Violates atomicity</p>
    <p>of syscall-1)</p>
    <p>Crash state #2 (Violates ordering of syscall-1 and 2)</p>
    <p>Correct Incorrect</p>
    <p>User-supplied Application Workload</p>
    <p>User-supplied Application</p>
    <p>Checker</p>
  </div>
  <div class="page">
    <p>HDFS</p>
    <p>ZooKeeper</p>
    <p>VMWare Player</p>
    <p>LMDB</p>
    <p>GDBM LevelDB</p>
    <p>Postgres</p>
    <p>HSQLDB</p>
    <p>SQLite</p>
    <p>Mercurial</p>
    <p>Git</p>
    <p>Vulnerability Study: Applications</p>
    <p>Non-relational Databases</p>
    <p>Relational Databases</p>
    <p>Version Control Systems</p>
    <p>Virtualization Software</p>
    <p>Distributed Services</p>
  </div>
  <div class="page">
    <p>Example: Git</p>
    <p>creat(index.lock) mkdir(o/x)</p>
    <p>creat(o/x/tmp_y) append(o/x/tmp_y)</p>
    <p>fsync(o/x/tmp_y) link(o/x/tmp_y, o/x/y)</p>
    <p>unlink(o/x/tmp_y) append(index.lock)</p>
    <p>rename(index.lock,index) stdout(finished add)</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>creat(index.lock) mkdir(o/x)</p>
    <p>creat(o/x/tmp_y) append(o/x/tmp_y)</p>
    <p>fsync(o/x/tmp_y) link(o/x/tmp_y, o/x/y)</p>
    <p>unlink(o/x/tmp_y) append(index.lock)</p>
    <p>rename(index.lock,index) stdout(finished add)</p>
    <p>Example: Git</p>
    <p>Atomicity vulnerability</p>
    <p>Which system calls need to be atomic?</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>creat(index.lock) mkdir(o/x)</p>
    <p>creat(o/x/tmp_y) append(o/x/tmp_y)</p>
    <p>fsync(o/x/tmp_y) link(o/x/tmp_y, o/x/y)</p>
    <p>unlink(o/x/tmp_y) append(index.lock)</p>
    <p>rename(index.lock,index) stdout(finished add)</p>
    <p>Example: Git</p>
    <p>Atomicity vulnerability</p>
    <p>Ordering vulnerabilityWhich system-call re-orderings cause incorrectness?</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>Vulnerability Study: Default (Weak) APM</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>Vulnerability Study: Default (Weak) APM 60 Vulnerabilities</p>
    <p>Many result in silent data loss, inaccessible applications</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>Vulnerability Study: Btrfs APM</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>Vulnerability Study: Btrfs APM 31 Vulnerabilities</p>
    <p>Read the full paper to correctly interpret results!</p>
  </div>
  <div class="page">
    <p>Garbage during file-appends  Affects 3 applications  But, partial appends with actual data: 0 vulnerabilities</p>
    <p>FS safety heuristics seemingly dont help much  Only 2 found vulnerabilities by Flush data before rename  Heuristics might help other types of applications</p>
    <p>Non-synchronous directory operations  Affects durability of 6 applications</p>
    <p>What FS behavior affects applications?</p>
  </div>
  <div class="page">
    <p>In-depth: What FS behaviors affect applications</p>
    <p>Vulnerabilities under other APMs</p>
    <p>Interactions with application developers</p>
    <p>How not to interpret our results</p>
    <p>An efficient FS design with safety validated by ALICE</p>
    <p>In the paper ...</p>
  </div>
  <div class="page">
    <p>FS vary in behavior affecting application consistency</p>
    <p>ext2, ext3, ext4, btrfs, xfs, reiserfs vary even among their different configurations</p>
    <p>Subtle implementation details affect behavior</p>
    <p>Application protocols are complex, vulnerable  60 vulnerabilities under weak APM  More than half exposed under ext3, ext4, btrfs  Depend (by design or unwittingly) on FS implementation</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>A parting note ....</p>
    <p>Experienced App-Developer: POSIX doesnt let FSes do that</p>
    <p>Can you point us to the exact POSIX documentation?</p>
    <p>Developer: I cant find it, but I remember someone saying so</p>
  </div>
  <div class="page">
    <p>A parting note ....</p>
    <p>Experienced App-Developer: POSIX doesnt let FSes do that</p>
    <p>Can you point us to the exact POSIX documentation?</p>
    <p>Developer: I cant find it, but I remember someone saying so</p>
    <p>Experienced Academic: Real file systems dont do that</p>
    <p>But &lt;...&gt; does just that</p>
    <p>Academic: My students would flunk class if they built a file</p>
    <p>system that way ...</p>
  </div>
  <div class="page">
    <p>A parting note ....</p>
    <p>Experienced App-Developer: POSIX doesnt let FSes do that</p>
    <p>Can you point us to the exact POSIX documentation?</p>
    <p>Developer: I cant find it, but I remember someone saying so</p>
    <p>Experienced Academic: Real file systems dont do that</p>
    <p>But &lt;...&gt; does just that</p>
    <p>Academic: My students would flunk class if they built a file</p>
    <p>system that way ...</p>
    <p>Thank you!</p>
    <p>Download tools: http://research.cs.wisc.edu/adsl/Software/alice</p>
  </div>
</Presentation>
