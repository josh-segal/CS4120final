<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CDStore:</p>
    <p>Toward Reliable, Secure, and Cost-Efficient</p>
    <p>Cloud Storage via Convergent Dispersal</p>
    <p>Mingqiang Li, Chuan Qin, Patrick P. C. Lee</p>
    <p>The Chinese University of Hong Kong</p>
    <p>USENIX ATC15</p>
  </div>
  <div class="page">
    <p>Multiple-Cloud Storage</p>
    <p>Exploits diversity of multiple-cloud storage:</p>
    <p>Reliability</p>
    <p>Fault tolerance</p>
    <p>No vendor lock-in [Abu-Libdeh, SOCC10]</p>
    <p>Security 2</p>
  </div>
  <div class="page">
    <p>Secret Sharing</p>
    <p>Input: secret; output: multiple shares</p>
    <p>Properties:</p>
    <p>Reliability: secret is recoverable from enough shares</p>
    <p>Security: secret is inaccessible without enough</p>
    <p>shares</p>
    <p>Examples:</p>
    <p>Shamirs [CACM79]; Ramps [Crypto84]; AONT-RS [FAST11] 3</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Secret sharing prohibits deduplication</p>
    <p>Reason: Security builds on embedded randomness</p>
    <p>Identical secrets lead to different shares</p>
    <p>High bandwidth and storage overhead</p>
    <p>Our HotStorage14 paper convergent dispersal:</p>
    <p>Replaces random input with deterministic hash</p>
    <p>derived from original secret</p>
    <p>How to deploy in a real system?</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>CDStore: a unified multi-cloud storage system</p>
    <p>with reliability, security, and cost efficiency</p>
    <p>Also applicable for distributed storage systems</p>
    <p>A new instantiation of convergent dispersal</p>
    <p>Higher throughput than our prior approach</p>
    <p>Two-stage deduplication</p>
    <p>Bandwidth and storage savings</p>
    <p>Secure</p>
    <p>Trace-driven experiments and cost analysis</p>
  </div>
  <div class="page">
    <p>CDStore Architecture</p>
    <p>Client-server model</p>
    <p>For whom? an organization that needs storage</p>
    <p>outsourcing for users data</p>
    <p>For what workload? backup and archival 6</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Reliability:</p>
    <p>Availability if some clouds are operational</p>
    <p>No metadata loss if CDStore clients fail</p>
    <p>Security:</p>
    <p>Confidentiality (i.e., data is secret)</p>
    <p>Integrity (i.e., data is uncorrupted)</p>
    <p>Robust against side-channel attacks</p>
    <p>Cost efficiency:</p>
    <p>Low storage cost via deduplication</p>
    <p>Low VM computation and metadata overheads</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
    <p>Reliability:</p>
    <p>Efficient repair is not considered</p>
    <p>Security:</p>
    <p>Secrets drawn from large message space, so brute</p>
    <p>force attacks are infeasible [Bellare, Security13]</p>
    <p>Encrypted and authenticated client-server channels</p>
    <p>Cost efficiency:</p>
    <p>No billing for communication between co-locating</p>
    <p>VMs and storage</p>
  </div>
  <div class="page">
    <p>Convergent AONT-RS (CAONT-RS)</p>
    <p>Extension of AONT-RS [Resch, FAST11]</p>
    <p>Optimal asymmetric encryption padding (OAEP) AONT</p>
    <p>Single encryption on a large block</p>
    <p>Other instantiations in our prior HotStorage14 paper on</p>
    <p>Ramps and Rivests AONT 9</p>
    <p>random key  secrets hash</p>
    <p>n = 4, k = 3</p>
  </div>
  <div class="page">
    <p>CAONT-RS Encoding</p>
    <p>Generate CAONT package (Y, t):</p>
    <p>h = H(X)</p>
    <p>Y = X  G(h)</p>
    <p>G(h) = E(h, C)</p>
    <p>t = h  H(Y)</p>
    <p>Encode CAONT package with Reed-Solomon codes 10</p>
    <p>n = 4, k = 3</p>
    <p>H(.): hash function (e.g., SHA-256)</p>
    <p>G(.): generator function</p>
    <p>E(.): encryption function (e.g., AES-256)</p>
    <p>C: constant value block</p>
  </div>
  <div class="page">
    <p>Deduplication</p>
    <p>Deduplication at the secret level</p>
    <p>Same secret  same shares that are deduped</p>
    <p>Ensure the same share in the same cloud</p>
    <p>Share i stored in cloud i, where i = 0, 1, , n-1</p>
    <p>Nave approach: client-side global deduplication</p>
    <p>Saves most upload bandwidth and storage</p>
    <p>Susceptible to side-channel attacks</p>
    <p>Attackers can infer if other users have stored same data</p>
  </div>
  <div class="page">
    <p>Two-Stage Deduplication</p>
    <p>Decomposes deduplication into two stages:</p>
    <p>Client-side intra-user deduplication</p>
    <p>Each CDStore client uploads unique shares of same user</p>
    <p>Effective for backup workloads</p>
    <p>Server-side Inter-user deduplication</p>
    <p>Each CDStore server dedups same shares from different users</p>
    <p>Effective if many users share similar data (e.g., VM images)</p>
    <p>Fingerprint index maintained by CDStore servers</p>
  </div>
  <div class="page">
    <p>CDStore Implementation</p>
    <p>C++ implementation on Linux</p>
    <p>Features:</p>
    <p>Content-defined chunking (avg size = 8KB)</p>
    <p>Parallelization of encoding and I/O operations</p>
    <p>Batched network and storage I/Os</p>
    <p>Open issues:</p>
    <p>Storage reclaim via garbage collection and compression</p>
    <p>Multiple CDStore servers per cloud</p>
    <p>Consistency due to concurrent updates</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Testbeds:</p>
    <p>Local machines: Xeon 2.4GHz (slow), i5 3.4GHz (fast)</p>
    <p>LAN: Multiple i5 machines via 1Gb switch</p>
    <p>Cloud: Google, Azure, AWS and Rackspace</p>
    <p>Datasets:</p>
    <p>Synthetic unique and fully duplicate data</p>
    <p>FSL dataset from Stony Brook University</p>
    <p>Weekly file system snapshots</p>
    <p>Our own 156 VM images in a programming course</p>
    <p>Weekly VM image snapshots</p>
  </div>
  <div class="page">
    <p>Encoding Speeds</p>
    <p>OAEP-based AONT brings high performance gain</p>
    <p>CAONT-RS achieves 183MB/s on Local-i5</p>
    <p>Encoding speed slightly decreases with n</p>
    <p>RS coding has small overhead</p>
    <p>Multi-threading boosts speed (details in paper) 15</p>
    <p>Largest k</p>
    <p>with k/n  3/4</p>
  </div>
  <div class="page">
    <p>Storage Savings</p>
    <p>Intra-user dedup achieves high saving</p>
    <p>At least 98% after Week 1</p>
    <p>Inter-user dedup is effective for VM dataset</p>
    <p>Week 1: 93.4%</p>
    <p>After Week 1: 11.8% - 47.0%</p>
  </div>
  <div class="page">
    <p>Transfer Speeds</p>
    <p>(Single-client) upload speeds in LAN:</p>
    <p>Unique data ~ 77MB/s (network bound)</p>
    <p>Duplicate data ~ 150MB/s (bounded by encoding + chunking)</p>
    <p>Performance in cloud bounded by Internet bandwidth</p>
    <p>Aggregate upload speeds increase with number of</p>
    <p>clients (details in paper) 17</p>
  </div>
  <div class="page">
    <p>Cost Analysis</p>
    <p>Compared to solutions w/o dedup:</p>
    <p>(1) single cloud; (2) multiple clouds with AONT-RS</p>
    <p>At least 70% savings when dedup ratio is 10x  50x</p>
    <p>Jagged curves due to switching cheapest VM instances 18</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>CDStore: a unified multi-cloud storage system</p>
    <p>with three goals in mind: reliability, security, and</p>
    <p>cost efficiency</p>
    <p>Building blocks:</p>
    <p>Convergent dispersal</p>
    <p>Two-stage deduplication</p>
    <p>Source code:</p>
    <p>http://ansrlab.cse.cuhk.edu.hk/software/cdstore</p>
  </div>
</Presentation>
