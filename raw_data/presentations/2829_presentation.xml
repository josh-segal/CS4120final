<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Alexandru Agache, Marc Brooker, Andreea Florescu, Alexandra Iordache, Anthony Liguori, Rolf Neugebauer, Diana-Maria Popa, and Phil Piwonka</p>
    <p>February 2020</p>
    <p>Lightweight Virtualization for Serverless Applications</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>What is Firecracker?  Why Firecracker?  Performance  Challenges for the Future</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Firecracker is an open source VMM that is purpose-built for creating and managing</p>
    <p>secure, multi-tenant container and functionbased services.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates. Amazon Confidential 4</p>
    <p>Firecracker</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Started with a branch of crosvm  Removed &gt;50% of the code</p>
    <p>96% fewer lines of code than QEMU  Simplified device model</p>
    <p>no BIOS, no PCI, etc</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Linux and OSv guests  Integrated with container ecosystem</p>
    <p>Kata, FireKube, containerd  Apache 2.0 license</p>
    <p>https://github.com/firecracker-microvm/ firecracker</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>In production in AWS Lambda  Millions of workloads  Trillions of requests/month</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Why Firecracker?</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>EC2 m5.metal instance 384GB of RAM</p>
    <p>Smallest Lambda Function</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Isolation: It must be safe for multiple functions to run on the same hardware.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Overhead &amp; Density: Thousands of functions on a single machine.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Performance: Functions must perform similarly to running natively.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Compatibility: Arbitrary Linux binaries and libraries. No code changes or recompilation.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Soft Allocation: It must be possible to over commit CPU, memory and other resources.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Firecracker ticks all these boxes</p>
    <p>QEMU/KVM: density and overhead challenges  Linux containers: isolation and compatibility challenges  LibOS approaches: compatibility challenges  Language VM isolation: compatibility and isolation challenges</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Performance</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>MicroVM start latency (serial)</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>MicroVM start latency (50 parallel)</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>QD1 IO Latency vs Bare Metal</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>QD32 IO Throughput vs Bare Metal</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Operational Lessons</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Lesson #1: Compatibility is Hard</p>
    <p>Just disabling Hyperthreading revealed two bugs in Apache Commons HTTP Client, and one in our own code.</p>
    <p>Re-implementing OS components would have been worse.</p>
    <p>Performance compatibility too!</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Lesson #2: Immutable, Time-Limited Machines</p>
    <p>Common systems-administration tools like rpm and dpkg are nondeterministic.</p>
    <p>Limiting max fleet life helps operational hygiene.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Lesson #3: The Job is Never Done</p>
    <p>Changing customer needs means that there are always improvements to be made.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>The Future</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Opportunities</p>
    <p>IO performance and scalability (offload) Scheduling, especially for tail latency Formal correctness proofs</p>
    <p>Features like snapshots, ballooning, etc.</p>
    <p>rust-vmm, and the container community.</p>
  </div>
  <div class="page">
    <p>2020, Amazon Web Services, Inc. or its Affiliates.</p>
    <p>Q&amp;A Marc Brooker mbrooker@amazon.com @marcjbrooker</p>
  </div>
</Presentation>
