<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Micropayments Revisited</p>
    <p>Ronald L. Rivest (with Silvio Micali)</p>
    <p>MIT Laboratory for Computer Science</p>
    <p>RSA Conference 2002</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>The need for micropayments</p>
    <p>Dimensions in micropayment approaches</p>
    <p>Previous work  The Peppercorn proposal</p>
  </div>
  <div class="page">
    <p>What is a micropayment?</p>
    <p>A payment small enough that processing it is relatively costly. Note: processing one credit-card payment costs about 25</p>
    <p>A payment in the range 0.1 to $10.  Processing cost is the key issue for</p>
    <p>micropayment schemes. (There are of course other issues common to all payment schemes)</p>
  </div>
  <div class="page">
    <p>The need for small payments</p>
    <p>Pay-per-click purchases on Web:  Streaming music and video  Information services</p>
    <p>Mobile commerce ($20G by 2005)  Geographically based info services  Gaming  Small real world purchases</p>
    <p>Infrastructure accounting:  Paying for bandwidth</p>
  </div>
  <div class="page">
    <p>Payment schemes</p>
    <p>Dominant today:  Credit cards  Subscriptions  Advertisements</p>
    <p>Other possibilities:  Electronic checks  Anonymous digital cash  Micropayments</p>
    <p>FOR SALE</p>
  </div>
  <div class="page">
    <p>Why arent micropayments already here?</p>
    <p>The market need is still nascent.  Rolling out a new payment system</p>
    <p>requires the coordination of many players.</p>
    <p>Fundamentally: COST ! Existing micropayment schemes are too costly to implement.</p>
  </div>
  <div class="page">
    <p>Payment scheme costs:</p>
    <p>Customer acquisition and support  Disputes and chargebacks:</p>
    <p>User says he didnt place order  User says goods were poor or missing</p>
    <p>Overspending (more than authorized, or more than user can afford)</p>
    <p>Communication, computation, equipment  Fraud/Attacks on system</p>
  </div>
  <div class="page">
    <p>Payment Framework:</p>
    <p>Payment System Provider (PSP)</p>
    <p>User Merchant Payment(s)</p>
    <p>Authorization Deposit(s)</p>
  </div>
  <div class="page">
    <p>Dimensions to consider:</p>
    <p>Level and form of aggregation  On-line PSP vs. off-line PSP  Interactive vs. non-interactive  Ability to handle disputes  Ability to handle overspending  Computation/communication cost  Robustness against fraud</p>
  </div>
  <div class="page">
    <p>Level of Aggregation</p>
    <p>To reduce processing costs, many small micropayments should be aggregated into fewer macropayments.</p>
    <p>Possible levels of aggregation:  No aggregation: PSP sees every payment  Session-level aggregation: aggregate all</p>
    <p>payments in one user/merchant session  Global aggregation: Payments can be</p>
    <p>aggregated across users and merchants</p>
  </div>
  <div class="page">
    <p>Form of Aggregation</p>
    <p>Deterministic aggregation: Accounting is exact.</p>
    <p>Statistical aggregation: Value flow is accurately estimated (looks good for micropayments)</p>
    <p>Our Peppercorn proposal makes aggregation look deterministic/nonexistent to user but statistical to merchant and bank.</p>
  </div>
  <div class="page">
    <p>On-line PSP vs. Off-line PSP  On-line PSP:</p>
    <p>PSP authorizes each payment or each session.</p>
    <p>Off-line PSP: User and merchant can initiate session and transact without participation of PSP. (e.g. pay taxi)</p>
    <p>PSP should be off-line if scheme has global aggregation.</p>
    <p>If multiple PSPs involved, off-line is better.</p>
  </div>
  <div class="page">
    <p>Interactive vs. Noninteractive</p>
    <p>Interactive: Payment protocol is two-way dialogue</p>
    <p>Non-interactive: Payment protocol is one-way (e.g. anti-spam payment in email):</p>
  </div>
  <div class="page">
    <p>Ability to handle disputes</p>
    <p>User claims he didnt approve payment Solution: use digital signatures</p>
    <p>User claims goods are poor quality or were never sent. Solution: let user complain to merchant directly.</p>
    <p>A micropayment PSP cant afford to handle any such disputes!</p>
  </div>
  <div class="page">
    <p>Ability to handle overspending</p>
    <p>User may refuse to pay PSP for payments he has made. Solution: prepayment</p>
    <p>User may spend more than he was authorized to spend. Solution: penalties/deterrence</p>
  </div>
  <div class="page">
    <p>Computation Cost</p>
    <p>Digital signatures are still relatively expensive --but much cheaper than they used to be!</p>
    <p>Today, it seems reasonable to base a micropayment scheme on digital signatures. (E.g. Java card in cell phone)</p>
    <p>User and merchant are anyways involved with each transaction; digital signatures only add a few milliseconds.</p>
    <p>On-line/Off-line signature can also help.</p>
  </div>
  <div class="page">
    <p>Communication Cost</p>
    <p>Communication costs can be minimized by:  Keeping PSP off-line; both authorization</p>
    <p>and deposits are aggregated, so PSP only has overall view of value flow</p>
    <p>Making payment protocol noninteractive (e.g. reduce number of round-trips needed when buying with pay-per-click using browser)</p>
  </div>
  <div class="page">
    <p>Robustness against Fraud</p>
    <p>Any party (user/merchant/ PSP) may try to cheat another.</p>
    <p>Any two parties may try to cheat the third.</p>
  </div>
  <div class="page">
    <p>Previous Work: Digital Cash</p>
    <p>Example: Chaums digital coins  Emphasis on anonymity:</p>
    <p>Withdrawals use blind signatures  Problem of double-spending handled</p>
    <p>by having doubler-spenders revealed (e.g. Brands protocol)</p>
    <p>No aggregation: every coin spent is returned to the PSP.</p>
  </div>
  <div class="page">
    <p>Previous Work: PayWord</p>
    <p>Rivest and Shamir 96  Emphasis on reducing public-key</p>
    <p>operations by using hash-chains instead: x0 x1 x2 x3  xn</p>
    <p>User signs x0 and releases next xi for next payment</p>
    <p>Session-level aggregation only.</p>
  </div>
  <div class="page">
    <p>Previous Work: MicroMint  Rivest and Shamir 96  Eliminates public-key operations</p>
    <p>entirely; each digital coin is a four-way hash collision: y</p>
    <p>x0 x1 x2 x3  No aggregation: each coin is returned to</p>
    <p>PSP.</p>
  </div>
  <div class="page">
    <p>Previous Work: Millicent</p>
    <p>Manasse et al. 95  User buys merchant-specific scrip</p>
    <p>from PSP for each session.  Requires PSP to be on-line for scrip</p>
    <p>purchase  Session-level aggregation only</p>
  </div>
  <div class="page">
    <p>Previous Work: Lottery Tickets</p>
    <p>Electronic Lottery Tickets as Micropayments  Rivest 97 (similar to Transactions using Bets proposal by Wheeler 96; see also Lipton and Ostrovsky 98)</p>
    <p>Payments are probabilistic  First schemes to provide</p>
    <p>global aggregation: payments aggregated across all user/merchant pairs.</p>
  </div>
  <div class="page">
    <p>Lottery Tickets Explained</p>
    <p>Merchant gives user hash value y = h(x)  User writes Merchant check: This check</p>
    <p>is worth $10 if three low-order digits of h-1(y) are 756. (Signed by user, with certificate from PSP.)</p>
    <p>Merchant wins $10 with probability 1/1000. Expected value of payment is 1 cent.</p>
    <p>Bank sees only 1 out of every 1000 payments.</p>
  </div>
  <div class="page">
    <p>Our Peppercorn Proposal</p>
    <p>Under English law, one peppercorn is the smallest amount that can be paid in consideration for value received.</p>
    <p>Peppercorn scheme is an improvement of basic lottery ticket scheme, making it:  Non-interactive  Fair to user: user never overcharged</p>
  </div>
  <div class="page">
    <p>Non-interactive payment</p>
    <p>Revised probabilistic payment: This check is worth $10 if the three low-order digits of the hash of your digital signature on this check are 756.</p>
    <p>Merchants deterministic signature scheme is unpredictable to user.</p>
    <p>Merchant can convince PSP to pay.</p>
  </div>
  <div class="page">
    <p>Non-interactive payment (cont)</p>
    <p>Optimization: This check is worth $10 if the three low-order digits of the hash of your digital signature on the date of this check are 756.</p>
    <p>Merchants server only needs to apply signature function once a day.</p>
  </div>
  <div class="page">
    <p>User Fairness: No Overcharging</p>
    <p>With basic scheme, unlucky user might have to pay $20 for his first 2 cents of probabilistic payments!</p>
    <p>We say payment scheme is user-fair if user never need pay more than he would if all payments were non-probabilistic checks for exactly expected value (e.g. 1 cent)</p>
  </div>
  <div class="page">
    <p>Achieving User-Fairness  Assume for the moment that all</p>
    <p>payments are for exactly one cent.  Require user to sequence number</p>
    <p>his payments: 1, 2,   When merchant turns in winning</p>
    <p>payment with sequence number N PSP charges user N  (last N seen) cents</p>
    <p>User charged three cents for</p>
  </div>
  <div class="page">
    <p>User-Fairness (continued)  Note that merchant is still paid $10</p>
    <p>for each winning payment, while user is charged by difference between sequence numbers seen by PSP.</p>
    <p>Users severely penalized for using duplicate sequence numbers. If users payments win too often, he is converted to basic probabilistic scheme. PSP can manage risk.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Peppercorn micropayment scheme  Is highly scalable: bank can support</p>
    <p>billions of payments by processing only millions of transactions (1000x reduction)</p>
    <p>Provides global aggregation  Supports off-line payments  Provides for non-interactive payments  Protects user from statistical variations  Uses digital signatures, but overhead for</p>
    <p>merchant and bank can be minimized</p>
  </div>
  <div class="page">
    <p>(The End)</p>
  </div>
</Presentation>
