<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PKU Pitfalls: Attacks on PKU-based Memory Isolation</p>
    <p>Systems Joseph Connor Tyler McDaniel Jared M. Smith Max Schuchard</p>
  </div>
  <div class="page">
    <p>Overview  Intraprocess isolation: separating components</p>
    <p>within a process  Improves security  Allows finer-grained privilege separation  But:</p>
    <p>Not widely adopted  Has suffered from performance and complexity issues</p>
  </div>
  <div class="page">
    <p>Overview  Recent research shows improved performance using new</p>
    <p>hardware feature:  Protection Keys for Userspace (PKU)</p>
    <p>Our contribution: identify challenges and gaps in current approach  Researchers, OS devs have different goals and views on hardware,</p>
    <p>process security  Commonly-used assumptions may not hold in real-world systems</p>
  </div>
  <div class="page">
    <p>Background - PKU  Assigns a 4-bit protection key (0-15) to each page-table entry  Adds a new unprivileged 32-bit register  PKRU</p>
    <p>Modified with new instruction: wrpkru  Pairs of bits control access to the 16 protection keys</p>
    <p>MMU hardware checks PKRU on each memory access</p>
    <p>PKEY 1 PKEY 0</p>
    <p>WD AD WD AD</p>
    <p>PKEY 15 PKEY 14</p>
    <p>WD AD WD AD</p>
    <p>Protection Key</p>
    <p>Access/Write Disable</p>
    <p>Bit</p>
    <p>Bits 2i and 2i+1 control read/write access to pages with protection key i</p>
    <p>PKRU Register</p>
  </div>
  <div class="page">
    <p>Background - PKU  PKRU register is unprivileged  On its own, does not stop an attacker who has already</p>
    <p>hijacked control flow in a process  Code may contain wrpkru gadgets  Attacker may mmap() new code</p>
    <p>Proposed solutions to this problem:  ERIM (Vahldiek-Oberwagner et al.)  Hodor (Hedayati et al.)</p>
  </div>
  <div class="page">
    <p>Background  ERIM/Hodor  Divide process into separate components</p>
    <p>using PKU to control memory access  Ensure there are no wrpkru gadgets available</p>
    <p>for an attacker to exploit:  ERIM: using static binary rewriting  Hodor: using x86 hardware watchpoints</p>
    <p>Efficient context switching via safe call gates  wrpkru followed by jmp to trusted code  wrpkru followed by code to ensure PKRU is</p>
    <p>unprivileged</p>
    <p>PKRU Privileged?</p>
    <p>wrpkru</p>
    <p>Exit</p>
    <p>Continue</p>
  </div>
  <div class="page">
    <p>Background  ERIM/Hodor  Monitor newly executable pages created by mmap() or</p>
    <p>mprotect()  Using seccomp + ptrace  Using kernel modifications</p>
    <p>Scan new code for unsafe wrpkru gadgets  Enforce W^X: No memory is both writable and</p>
    <p>executable  Otherwise, attacker may create new wrpkru gadgets without</p>
    <p>interception</p>
  </div>
  <div class="page">
    <p>Our Approach  Examined kernel documentation, code, and developer</p>
    <p>communications in context of PKU-based sandboxes  Tested attacks on prototype in a realistic Linux system  Assumptions:</p>
    <p>Attacker can execute control-flow hijacking attack (e.g. ROP chain) in untrusted context</p>
    <p>Attacker must access memory of trusted component without using a legitimate call gate</p>
    <p>Developed 12 proof-of-concepts</p>
  </div>
  <div class="page">
    <p>Challenges for Intraprocess Isolation</p>
    <p>Fundamental departure from traditional OS security boundaries</p>
    <p>Researchers/OS devs have different perspectives on security models for processes and PKU  Kernel can act as confused deputy</p>
    <p>Lack of a method for systemic validation</p>
  </div>
  <div class="page">
    <p>Kernel As Confused Deputy</p>
    <p>Mailing list discussions show that kernel developers envisioned PKU use cases for reliability, not security</p>
    <p>Linux kernel intentionally does not absolutely enforce:  PKRU access checks  Page table entry read/write permissions</p>
    <p>get_user_pages_remote() circumvents these checks  ptrace()  process_vm_readv/writev()  /proc/&lt;pid&gt;/mem</p>
  </div>
  <div class="page">
    <p>Difficulty of W^X</p>
    <p>Research often assumes W^X  memory is not simultaneously writable and executable  PKU-based sandboxes rely on W^X to ensure wrpkru</p>
    <p>gadgets cannot be written without being intercepted  Enforced via userspace syscall interception</p>
    <p>(ptrace+seccomp) or kernel modifications  In practice, non-trivial to fully enforce on Linux</p>
  </div>
  <div class="page">
    <p>Difficulty of W^X</p>
    <p>Page permissions apply to mappings, not the physical memory  Pages may also be backed by other resources (e.g. files)</p>
    <p>Writes to memory-mapped files are reflected even in non-writable mappings</p>
    <p>Shared memory can be mapped more than once, with different permissions</p>
    <p>Some kernel interfaces ignore PTE permissions: ptrace(), /proc/&lt;pid&gt;mem</p>
  </div>
  <div class="page">
    <p>Conclusions  Seemingly simple assumptions (W^X) may not apply as</p>
    <p>expected in realistic settings  Retrofitting different security models is especially</p>
    <p>challenging:  One developers design choice is another developers</p>
    <p>vulnerability</p>
    <p>Systematic approach to validating security boundaries is needed</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Joseph Connor  rconnor6@utk.edu Tyler McDaniel  bmcdan16@utk.edu</p>
    <p>Jared M. Smith  jms@utk.edu Max Schuchard  mschucha@utk.edu</p>
  </div>
</Presentation>
