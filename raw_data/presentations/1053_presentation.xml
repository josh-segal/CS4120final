<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Bunshin: Compositing Security Mechanisms through Diversification</p>
    <p>Meng Xu, Kangjie Lu, Taesoo Kim, Wenke Lee</p>
    <p>Georgia Institute of Technology</p>
  </div>
  <div class="page">
    <p>Memory Corruptions Are Costly</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Name your phone Nexus 5X %x.%x</p>
  </div>
  <div class="page">
    <p>Battle against Memory Errors</p>
    <p>Existing security mechanisms: WR, ASLR, CFI  Not hard to by pass</p>
  </div>
  <div class="page">
    <p>Battle against Memory Errors</p>
    <p>Existing security mechanisms: WR, ASLR, CFI  Not hard to by pass</p>
    <p>Protect all dangerous operation using sanity checks:  Auto-applied at compile time</p>
    <p>void foo(T *a) { *a = 0x1234;</p>
    <p>}</p>
    <p>void foo(T *a) { if(!is_valid_address(a) {</p>
    <p>report_and_abort(); } *a = 0x1234;</p>
    <p>}</p>
    <p>Sanitize</p>
  </div>
  <div class="page">
    <p>Battle against Memory Errors</p>
    <p>Memory Error Main Causes Defenses</p>
    <p>Out-of-bound read/write</p>
    <p>Lack of length check</p>
    <p>Softbound AddressSanitizer</p>
    <p>Integer overflow</p>
    <p>Format string bug</p>
    <p>Bad type casting</p>
    <p>Use-after-free Dangling pointer CETS</p>
    <p>AddressSanitizerDouble free</p>
    <p>Uninitialized read</p>
    <p>Lack of initialization</p>
    <p>MemorySanitizerData structure alignment</p>
    <p>Subword copying</p>
    <p>Undefined behaviors</p>
    <p>Divide-by-zero</p>
    <p>UndefinedBehaviorSanitizerPointer misalignment</p>
    <p>Null-pointer dereference</p>
  </div>
  <div class="page">
    <p>Comprehensive Protection: Goal and Reality</p>
    <p>Accumulated execution slowdown  Example: Softbound + CETS  110% slowdown</p>
    <p>Implementation conflicts  Example: AddressSanitizer and MemorySanitizer</p>
  </div>
  <div class="page">
    <p>Comprehensive Protection with Bunshin</p>
    <p>Accumulated execution slowdown  Example: Softbound + CETS  110% slowdown</p>
    <p>Bunshin: Reduce to 60% or 40% (depends on the config)</p>
    <p>Implementation conflicts  Example: AddressSanitizer and MemorySanitizer</p>
    <p>Bunshin: Seamlessly enforce conflicting sanitizers 10</p>
  </div>
  <div class="page">
    <p>The N-Version Way</p>
    <p>Program</p>
    <p>Input</p>
    <p>Output</p>
  </div>
  <div class="page">
    <p>The N-Version Way</p>
    <p>Virtualization</p>
    <p>Synchronize Execution &amp; Consolidate Outputs</p>
    <p>Input</p>
    <p>Output</p>
    <p>Variant 1 Variant 2 Variant 3Program</p>
    <p>Input</p>
    <p>Output</p>
  </div>
  <div class="page">
    <p>The N-Version Way</p>
    <p>Virtualization</p>
    <p>Synchronize Execution &amp; Consolidate Outputs</p>
    <p>Input (benign)</p>
    <p>Output (consensus)</p>
    <p>Variant 1 Variant 2 Variant 3Program</p>
    <p>Input</p>
    <p>Output</p>
  </div>
  <div class="page">
    <p>The N-Version Way</p>
    <p>Virtualization</p>
    <p>Synchronize Execution &amp; Consolidate Outputs</p>
    <p>Output (divergence)</p>
    <p>Variant 1 Variant 2 Variant 3Program</p>
    <p>Input</p>
    <p>Output</p>
    <p>Input (malicious)</p>
  </div>
  <div class="page">
    <p>The N-Version Way</p>
    <p>Virtualization</p>
    <p>Synchronize Execution &amp; Consolidate Outputs</p>
    <p>Output (divergence)</p>
    <p>Variant 1 Variant 2 Variant 3Program</p>
    <p>Input</p>
    <p>Output</p>
    <p>Input (malicious)</p>
    <p>An attacker has to simultaneously compromise all variants in order to to</p>
    <p>compromise the whole system</p>
  </div>
  <div class="page">
    <p>Similar Ideas</p>
    <p>Two variants placed in disjoint memory partitions [N-Variant Systems]</p>
    <p>Two variants with stacks growing in different directions [Orchestra]</p>
    <p>Multiple variants with randomized heap object locations [DieHard]</p>
    <p>Multiple versions of the same program [Varan, Mx]</p>
  </div>
  <div class="page">
    <p>Bunshin Overview</p>
    <p>Goal:</p>
    <p>Reduce slowdown caused by security mechanisms</p>
    <p>Enable different or even conflicting mechanisms</p>
  </div>
  <div class="page">
    <p>Challenges for Bunshin</p>
    <p>How to generate these variants?</p>
    <p>What properties they should have?</p>
    <p>How to make them appear as one to outsiders?</p>
    <p>What is a behavior and what is a divergence?</p>
    <p>What if the sanitizers introduces new behaviors?</p>
    <p>Multi-threading support?</p>
  </div>
  <div class="page">
    <p>Variant Generation Intuitions</p>
    <p>Scope of protection required  Sanitizers selected</p>
    <p>Instrumented checks by each sanitizer</p>
    <p>Memory Error Defenses</p>
    <p>Out-of-bound read/write Softbound, AddressSanitizer</p>
    <p>Use-after-free CETS, AddressSanitizer</p>
    <p>Uninitialized read MemorySanitizer</p>
    <p>Undefined behaviors UndefinedBehaviorSanitizer</p>
    <p>void foo(T *a) { if(!is_valid_address(a) {</p>
    <p>report_and_abort(); } *a = 0x1234;</p>
    <p>}</p>
    <p>void bar(T *b) { if(!is_valid_address(b) {</p>
    <p>report_and_abort(); } *b = 0x5678;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Variant Generation Principles</p>
    <p>Check distribution</p>
    <p>Sanitizer distribution</p>
  </div>
  <div class="page">
    <p>Check Distribution</p>
    <p>Virtualization</p>
    <p>Synchronize Execution &amp; Consolidate Outputs</p>
    <p>Input</p>
    <p>Output</p>
    <p>Variant 1 Variant 2 Variant 3Program</p>
    <p>Input</p>
    <p>Output</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
  </div>
  <div class="page">
    <p>Sanitizer Distribution</p>
    <p>Virtualization</p>
    <p>Synchronize Execution &amp; Consolidate Outputs</p>
    <p>Input</p>
    <p>Output</p>
    <p>Variant 1 Variant 2 Variant 3Program</p>
    <p>Input</p>
    <p>Output</p>
    <p>A D D R E S S</p>
    <p>M E M O R Y</p>
    <p>U N D E F</p>
    <p>A D D R E S S</p>
    <p>M E M O R Y</p>
    <p>U N D E F</p>
  </div>
  <div class="page">
    <p>Cost Profiling</p>
    <p>Calculate the slowdown caused by the sanity checks</p>
    <p>void foo(T *a) { timing_start(); if(!is_valid_address(a) {</p>
    <p>report_and_abort(); } *a = 0x1234; timing_end();</p>
    <p>}</p>
    <p>void foo(T *a) { timing_start(); *a = 0x1234; timing_end();</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Cost Distribution</p>
    <p>Equally distribute overhead to variants so that they execute at the same speed</p>
    <p>Foo</p>
    <p>Bar</p>
    <p>Baz</p>
    <p>Qux</p>
    <p>Foo</p>
    <p>Baz</p>
    <p>Bar</p>
    <p>Qux</p>
    <p>Variant 1 (52% overhead)</p>
    <p>Variant 2 (48% overhead)</p>
  </div>
  <div class="page">
    <p>Variant Generation Process</p>
    <p>Costs profiling</p>
    <p>Security mechanisms</p>
    <p>Variant compiling</p>
    <p>Variant generator</p>
    <p>Source code</p>
    <p>Variants Overhead</p>
    <p>distribution (e.g., ASan, MSan, UBSan)</p>
    <p>opt.</p>
    <p>opt.</p>
    <p>w/ ASanw/ UBSan</p>
    <p>w/ MSan w/ ASan</p>
    <p>...</p>
    <p>full</p>
    <p>selective</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Variant Sync Considerations</p>
    <p>What is a behavior and what is a divergence?</p>
    <p>System call (both order and arguments)</p>
    <p>How to hook it?</p>
    <p>By patching the system call table with a kernel module</p>
    <p>What if different sanitizers introduce different system calls?</p>
    <p>Sync only when a program is in its main function</p>
    <p>Do not check system calls for memory management</p>
  </div>
  <div class="page">
    <p>System Call Synchronization</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>sync slot</p>
    <p>Syscall number</p>
    <p>Arguments</p>
    <p>Execution result</p>
  </div>
  <div class="page">
    <p>System Call Synchronization</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>Syscall number</p>
    <p>Arguments</p>
    <p>Execution result</p>
    <p>sync slot</p>
    <p>Leader enters syscall</p>
  </div>
  <div class="page">
    <p>System Call Synchronization</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>Syscall number</p>
    <p>Arguments</p>
    <p>Execution result</p>
    <p>sync slot</p>
    <p>Followers enter syscall</p>
  </div>
  <div class="page">
    <p>System Call Synchronization</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>Syscall number</p>
    <p>Arguments</p>
    <p>Execution result</p>
    <p>sync slot</p>
    <p>Kernel execute the syscall only once</p>
  </div>
  <div class="page">
    <p>System Call Synchronization</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>Syscall number</p>
    <p>Arguments</p>
    <p>Execution result</p>
    <p>sync slot</p>
    <p>Leader fetches syscall result  Followers fetch syscall result</p>
  </div>
  <div class="page">
    <p>Strict and Selective Lockstep</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>sync ring buffer</p>
    <p>Leader writes at the next available slot</p>
    <p>Followers read at their own speed</p>
  </div>
  <div class="page">
    <p>Strict and Selective Lockstep</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>sync ring buffer</p>
    <p>Always strictly synchronized for write related system calls</p>
  </div>
  <div class="page">
    <p>Strict and Selective Lockstep</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>Partition 3</p>
    <p>sync ring buffer</p>
    <p>Always strictly synchronized for write related system calls</p>
    <p>Selective-locksteps mitigates address leaks</p>
    <p>Address leak involves a &quot;write&quot; system call and with ASLR enabled, such leak attempt will be captured</p>
    <p>Reduce sync. overhead by 3% - 5%</p>
  </div>
  <div class="page">
    <p>Multi-threading Support</p>
    <p>Before fork</p>
    <p>After fork</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Original Execution group</p>
    <p>New Execution group</p>
    <p>New ring buffer</p>
  </div>
  <div class="page">
    <p>Multi-threading Support</p>
    <p>Before fork</p>
    <p>After fork</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Original Execution group</p>
    <p>New Execution group</p>
    <p>New ring buffer</p>
    <p>Works if there is no interleaving</p>
    <p>between threads</p>
  </div>
  <div class="page">
    <p>Multi-threading Support</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Total order of lock acquisition and releases</p>
    <p>Record Enforce Enforce</p>
  </div>
  <div class="page">
    <p>Multi-threading Support</p>
    <p>Leader Follower 1 Follower 2</p>
    <p>Userspace</p>
    <p>Kernel</p>
    <p>Total order of lock acquisition and releases</p>
    <p>Record Enforce Enforce Works under</p>
    <p>weak determinism (data race-free programs)</p>
    <p>Implementation specific (pthread APIs only)</p>
  </div>
  <div class="page">
    <p>Evaluate Bunshin</p>
    <p>Robustness and Security</p>
    <p>Efficiency and Scalability</p>
    <p>Protection Distribution Case Studies</p>
  </div>
  <div class="page">
    <p>Robustness</p>
    <p>Benchmark Single/Multi-thread Featuer Pass ?</p>
    <p>SPEC CPU2006 Single</p>
    <p>CPU IntensiveSPLASH-2x Multi</p>
    <p>PARSEC Multi 6 out of 13</p>
    <p>lighttpd Single</p>
    <p>I/O Intensive</p>
    <p>nginx Multi</p>
    <p>python, php Single Interpreter</p>
  </div>
  <div class="page">
    <p>Security</p>
    <p>RIPE Benchmark</p>
    <p>Real-world CVEs</p>
    <p>Config Succeed Probabilistic Failed Not possible</p>
    <p>Default 114 16 720 2990</p>
    <p>AddressSanitizer 8 0 842 2990</p>
    <p>Bunshin 8 0 842 2990</p>
    <p>Config CVE Exploits Sanitizer Detect</p>
    <p>nginx-1.4.0 2013-2028 Blind ROP AddressSanitizer</p>
    <p>cpython-2.7.10 2016-5636 Integer overflow AddressSanitizer</p>
    <p>php-5.6.6 2015-4602 Type confusion AddressSanitizer</p>
    <p>openssl-1.0.1a 2014-0160 Heartbleed AddressSanitizer</p>
    <p>httpd-2.4.10 2014-3581 Null dereference UndefinedBehaviorSanitizer</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Benchmark Items Strict-Lockstep Selective-Lockstep</p>
    <p>SPEC CPU2006 (19 Programs)</p>
    <p>Max 17.5% 14.7%</p>
    <p>Min 1.6% 1.0%</p>
    <p>Ave 8.6% 5.6%</p>
    <p>SPLASH-2X / PARSEC (19 Programs)</p>
    <p>Max 21.4% 18.9%</p>
    <p>Min 10.7% 6.6%</p>
    <p>Ave 16.6% 14.5%</p>
    <p>lighttpd 1MB File Request</p>
    <p>Ave 1.44% 1.21%</p>
    <p>nginx 1MB File Request Ave 1.71% 1.41%</p>
  </div>
  <div class="page">
    <p>Performance Highlights</p>
    <p>Low overhead (5% - 16%) for standard benchmarks</p>
    <p>Negligible overhead (&lt;= 2%) for server programs</p>
    <p>Extra cost of ensuring weak determinism is 8%</p>
    <p>Selective-lockstep saves around 3% overhead</p>
  </div>
  <div class="page">
    <p>Scalability - Number of Variants</p>
    <p>S yn</p>
    <p>c O</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(% )</p>
    <p>Number of variants 2 4 6 8</p>
    <p>Ave Max Min</p>
  </div>
  <div class="page">
    <p>Scalability - Number of Variants</p>
    <p>S yn</p>
    <p>c O</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(% )</p>
    <p>Number of variants 2 4 6 8</p>
    <p>Ave Max Min</p>
    <p>The number of variants Bunshin can support with a reasonable overhead depends on machine configurations</p>
    <p>and program characteristics.</p>
  </div>
  <div class="page">
    <p>Scalability - System Load</p>
    <p>S yn</p>
    <p>c O</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(% )</p>
    <p>Number of variants 2% 50% 99%</p>
    <p>Ave Max Min</p>
  </div>
  <div class="page">
    <p>Scalability - System Load</p>
    <p>S yn</p>
    <p>c O</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(% )</p>
    <p>Number of variants 2% 50% 99%</p>
    <p>Ave Max Min</p>
    <p>Bunshin works well in all levels of system load (i.e., Bunshin does not require exclusive cores)</p>
  </div>
  <div class="page">
    <p>Check Distribution - ASan</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 V3 Bunshin</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 Bunshin</p>
  </div>
  <div class="page">
    <p>Sanitizer Distribution - UBSan</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 V3 Bunshin</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 Bunshin</p>
  </div>
  <div class="page">
    <p>Deviation from Optimal - ASan</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 V3 Bunshin</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 Bunshin</p>
  </div>
  <div class="page">
    <p>Deviation from Optimal - UBSan</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 V3 Bunshin</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>Whole V1 V2 Bunshin</p>
  </div>
  <div class="page">
    <p>Reasons for Deviation from Optimal</p>
    <p>Synchronization overhead</p>
    <p>Inaccuracy in profiling</p>
    <p>Suboptimal distribution</p>
    <p>Non-distributable overhead</p>
  </div>
  <div class="page">
    <p>Unifying LLVM Sanitizers</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>gobmk povray h264ref average</p>
    <p>ASan MSan UBSan Bunshin</p>
  </div>
  <div class="page">
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (%</p>
    <p>)</p>
    <p>gobmk povray h264ref average</p>
    <p>ASan MSan UBSan Bunshin</p>
    <p>Unifying LLVM Sanitizers</p>
    <p>With an average of 5% more slowdown, Bunshin can seamlessly unify all three</p>
    <p>LLVM sanitizers</p>
  </div>
  <div class="page">
    <p>Limitations and Future Work</p>
    <p>Finer-grained check distribution</p>
    <p>Sanitizer integration</p>
    <p>Record-and-replay</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>It is feasible to achieve both comprehensive protection and high throughput with an N-version system</p>
    <p>Bunshin is effective in reducing slowdown caused by sanitizers  107%  47.1% for ASan, 228%  94.5% for UBSan</p>
    <p>Bunshin can seamlessly unify three LLVM sanitizers with 5% extra slowdown</p>
    <p>https://github.com/sslab-gatech/bunshin (Source code will be released soon)</p>
  </div>
</Presentation>
