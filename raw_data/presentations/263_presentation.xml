<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Extensible and Scalable Network Monitoring Using OpenSAFE</p>
    <p>Jeffrey R. Ballard Ian Rae Aditya Akella</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Outline 1 Background</p>
    <p>Network monitoring How monitoring is done today</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Network monitoring How monitoring is done today</p>
    <p>Motivation</p>
    <p>We want to monitor the network.</p>
    <p>Specifically, we want to allow administrators to easily:</p>
    <p>collect network usage statistics  detect intrusions  provide forensic evidence</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Network monitoring How monitoring is done today</p>
    <p>Challenges</p>
    <p>Middleboxes are commonly used, however, they present challenges. . .</p>
    <p>. . . making them ill suited for network monitoring.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Network monitoring How monitoring is done today</p>
    <p>Example: College of Engineering</p>
    <p>Building 1</p>
    <p>Building 3</p>
    <p>Building 2</p>
    <p>Building 4 Building 5</p>
    <p>Building 6</p>
    <p>Building 7</p>
    <p>Router 2</p>
    <p>Campus Backbone Routers</p>
    <p>Router 1</p>
    <p>x5 x2 x2 x2</p>
    <p>x2</p>
    <p>x2</p>
    <p>Red links = 10 Gbps White links = 1 Gbps</p>
    <p>Connections to the College: 2 x 10 Gbps links 22 x 1 Gbps links</p>
    <p>x2</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Network monitoring How monitoring is done today</p>
    <p>How do people actually do it?</p>
    <p>Mirror (or tap) an interesting network interface to another switch port, then listen to that port with something like Snort.</p>
    <p>Advantage over a middlebox: monitoring has no impact on the production traffic and routes.</p>
    <p>Disadvantages: the traffic can run you over, and its still hard to add new detectors.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Network monitoring How monitoring is done today</p>
    <p>What it looks like today</p>
    <p>Network B</p>
    <p>Network A</p>
    <p>Monitoring Device</p>
    <p>Network B Firewall</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Network monitoring How monitoring is done today</p>
    <p>What we want to do</p>
    <p>Network B</p>
    <p>Network A</p>
    <p>Programmable Network Layer</p>
    <p>Network B Firewall</p>
    <p>Monitoring Device 2</p>
    <p>Monitoring Device 1</p>
    <p>Monitoring Device n</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>OpenSAFE</p>
    <p>OpenSAFE uses a programmable network fabric to. . .</p>
    <p>Selectively match network flows  Arbitrarily direct network flows to other switch</p>
    <p>ports at line rate</p>
    <p>Direct exceptions to a software component  Enable the use of commodity network hardware</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Why not implement it in software?</p>
    <p>We could use something like Click to dynamically manage detectors.</p>
    <p>Major problem: software is not fast enough!</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Solution: Hardware!</p>
    <p>Easiest: Custom ASICs</p>
    <p>But we have something that can do this. . .</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Programmable Network Fabric</p>
    <p>While OpenSAFE would be compatible with any programmable network fabric, we implemented OpenSAFE in OpenFlow since it is available today.</p>
    <p>The key elements are:</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Example OpenSAFE Layout</p>
    <p>Network B</p>
    <p>Network A</p>
    <p>OpenFlow</p>
    <p>Network B Firewall</p>
    <p>dSniff</p>
    <p>Snort</p>
    <p>Decryption</p>
    <p>OpenFlow Controller</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>ALARMS</p>
    <p>ALARMS: A Language for Arbitrary Route Management for Security</p>
    <p>Basic building blocks are paths of:</p>
    <p>Inputs: copy of traffic from a mirror switch port  Selects: restricts the set of traffic for this rule  Filters: pass the traffic through an application  Sinks: where to finally direct the traffic</p>
    <p>Combining these gives us a rich set of configurations.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Simple Example</p>
    <p>We will use the following example over the next few slides:</p>
    <p>Mirror Port: 80</p>
    <p>Counter TCP Dump</p>
    <p>Take all TCP port 80 traffic, send it to a counter, and then send it to a machine running tcpdump.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Paths</p>
    <p>Input SinksSelect Filters</p>
    <p>A path is: A source switch port with selection criteria . . . which goes into zero or more filters . . . then out to one or more sinks</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>OpenSAFE Schematic</p>
    <p>OpenFlow Switch</p>
    <p>Input Sink1</p>
    <p>Filter1 Filterm</p>
    <p>Sinkn</p>
    <p>...</p>
    <p>...</p>
    <p>OpenFlow Controller</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Policy naming</p>
    <p>In OpenSAFE all switch ports are named.</p>
    <p>Logically, ALARMS articulates paths of named switch ports.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Revisiting our example</p>
    <p>Mirror Port: 80</p>
    <p>Counter TCP Dump</p>
    <p>. . . becomes . . .</p>
    <p>Mirror Counter TCP DumpPort 80</p>
    <p>mirror[http] -&gt; counter -&gt; tcpdump;</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Lets get some more paths</p>
    <p>Mirror Counter TCP DumpPort 80</p>
    <p>mirror[http] -&gt; counter -&gt; tcpdump;</p>
    <p>Mirror Counter TCP DumpPort 443 Decryption</p>
    <p>mirror[https] -&gt; decrypt -&gt;</p>
    <p>counter -&gt; tcpdump;</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Lets get some more paths</p>
    <p>Mirror Counter TCP DumpPort 80</p>
    <p>mirror[http] -&gt; counter -&gt; tcpdump;</p>
    <p>Mirror Counter TCP DumpPort 443 Decryption</p>
    <p>mirror[https] -&gt; decrypt -&gt;</p>
    <p>counter -&gt; tcpdump;</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Waypoints</p>
    <p>As more rules are added, often the rules follow the same paths making rule management difficult.</p>
    <p>Solution:</p>
    <p>Waypoint</p>
    <p>Waypoints are virtual destinations for paths.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Waypoint example</p>
    <p>Mirror Port 80</p>
    <p>Mirror</p>
    <p>Counter TCP Dump</p>
    <p>Port 443 Decryption</p>
    <p>Web</p>
    <p>mirror[https] -&gt; decrypt -&gt; web;</p>
    <p>mirror[http] -&gt; web;</p>
    <p>web -&gt; counter -&gt; tcpdump;</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Multiple Destinations</p>
    <p>In ALARMS, multiple destinations are easy:</p>
    <p>Mirror</p>
    <p>TCP Dump 1</p>
    <p>Port 80</p>
    <p>TCP Dump 2</p>
    <p>mirror[http] -&gt; {ALL, tcpdump1, tcpdump2};</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Distribution rules</p>
    <p>When parallel filters or sinks are used, distribution rules describe how traffic flows should be spread.</p>
    <p>Rules include:</p>
    <p>Any Randomly pick a switch port All Replicate packet to all switch ports</p>
    <p>Round Robin Cycle through the switch ports Hash Apply a hash function</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>OpenSAFE ALARMS Rule Aggregation Distribution</p>
    <p>Multiple Destinations</p>
    <p>Mirror</p>
    <p>TCP Dump 1</p>
    <p>Port 80</p>
    <p>Mirror</p>
    <p>TCP Dump 2</p>
    <p>Port 443 Decryption</p>
    <p>Web</p>
    <p>web -&gt; {ALL, tcpdump1, tcpdump2};</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Mapping to OpenFlow Switch Example</p>
    <p>Mapping the language into OpenFlow</p>
    <p>We want to handle lots of traffic, so need high performance.</p>
    <p>Hardware is fast. Software is slow.</p>
    <p>Install as many precomputed flow entries as possible.</p>
    <p>However, when the hardware does not support functions we must go to software. In OpenFlow this includes Any, Round Robin, and Hash distribution rules.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Mapping to OpenFlow Switch Example</p>
    <p>How it works under the hood</p>
    <p>Starting with the last path diagram we had before. . .</p>
    <p>Mirror</p>
    <p>TCP Dump 1</p>
    <p>Port 80</p>
    <p>Mirror</p>
    <p>TCP Dump 2</p>
    <p>Port 443 Decryption</p>
    <p>Web</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Mapping to OpenFlow Switch Example</p>
    <p>How it works under the hood</p>
    <p>OpenFlow SwitchMirror</p>
    <p>TCP Dump 1</p>
    <p>TCP Dump 2</p>
    <p>Decryption</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Mapping to OpenFlow Switch Example</p>
    <p>How it works under the hood</p>
    <p>OpenFlow SwitchMirror</p>
    <p>TCP Dump 1</p>
    <p>TCP Dump 2</p>
    <p>Decryption</p>
    <p>Web</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Mapping to OpenFlow Switch Example</p>
    <p>How it works under the hood</p>
    <p>OpenFlow SwitchMirror</p>
    <p>TCP Dump 1</p>
    <p>TCP Dump 2</p>
    <p>Decryption</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Related Work Future Work Conclusion</p>
    <p>Related Work: Ethane</p>
    <p>Ethane (the predecessor to OpenFlow) is an enterprise-wide security solution.</p>
    <p>The focus here is to insert a tool just at the border, optimized for the border.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Related Work Future Work Conclusion</p>
    <p>Related Work: Policy-aware switching</p>
    <p>Policy-aware switching, proposed by Joseph et al. is somewhat similar to Ethane.</p>
    <p>It removes the centralized controller, and has each switch determine the next hop.</p>
    <p>Also, the policy specification language, like Ethane, is centered around deciding appropriate paths for a flow.</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Related Work Future Work Conclusion</p>
    <p>What next?</p>
    <p>In the future, wed like to expand our system by exploring:</p>
    <p>incorporating dynamic feedback from filters and sinks</p>
    <p>precomputing more dynamic distribution rules</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Related Work Future Work Conclusion</p>
    <p>Conclusion</p>
    <p>OpenSAFE greatly simplifies high-speed network monitoring. It is also:</p>
    <p>Cost effective by using commodity hardware  Flexible and easy to modify  Capable of operating at high line rates</p>
  </div>
  <div class="page">
    <p>Background OpenSAFE and ALARMS</p>
    <p>Implementation Conclusion</p>
    <p>Questions?</p>
    <p>Questions?</p>
  </div>
</Presentation>
