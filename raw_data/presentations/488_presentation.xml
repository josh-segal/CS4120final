<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Intrusion Recovery using Selective Re-execution</p>
    <p>Taesoo Kim, Xi Wang, Nickolai Zeldovich, M. Frans Kaashoek</p>
    <p>MIT CSAIL</p>
  </div>
  <div class="page">
    <p>Attackers routinely compromise system integrity</p>
  </div>
  <div class="page">
    <p>Attackers routinely compromise system integrity</p>
  </div>
  <div class="page">
    <p>Attackers routinely compromise system integrity</p>
  </div>
  <div class="page">
    <p>Compromises inevitable</p>
    <p>Difficult to write bug-free software  Administrators mis-configure policies  Users choose weak, guessable passwords</p>
  </div>
  <div class="page">
    <p>Compromises inevitable</p>
    <p>Difficult to write bug-free software  Administrators mis-configure policies  Users choose weak, guessable passwords</p>
    <p>Need both proactive security, and reactive recovery mechanisms</p>
  </div>
  <div class="page">
    <p>Limited existing recovery tools</p>
    <p>Anti-virus tools  Only repair for predictable attacks</p>
    <p>Backup tools  Restoring from backup discards all changes</p>
  </div>
  <div class="page">
    <p>Limited existing recovery tools</p>
    <p>Anti-virus tools  Only repair for predictable attacks</p>
    <p>Backup tools  Restoring from backup discards all changes</p>
    <p>Administrators spend days or weeks manually tracking down all effects of the attack  No guarantee if they found everything</p>
  </div>
  <div class="page">
    <p>Challenge: disentangle changes by attacker and legitimate user</p>
    <p>Adversary could have modified many files directly</p>
    <p>Legitimate processes may have been affected  Users ran trojaned pdflatex or ls  SSH server read a modified /etc/passwd</p>
    <p>Those processes are now suspect as well</p>
  </div>
  <div class="page">
    <p>Our approach: help users disentangle on one machine</p>
    <p>Record history of all computations on machine</p>
    <p>After intrusion found, roll back affected objects</p>
    <p>Re-execute actions that were indirectly affected</p>
    <p>Minimize user input required to disentangle  User edited attacker's file with emacs  External effects outside of our control</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>New approach to system-wide intrusion recovery  Action history graph tracks computations and repairs  Techniques: re-execution, predicates, and refinement</p>
    <p>Retro: prototype recovery system for Linux  Recovers from 10 real-world and synthetic attacks  No user input required in most cases</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>New approach to system-wide intrusion recovery  Action history graph tracks computations and repairs  Techniques: re-execution, predicates, and refinement</p>
    <p>Retro: prototype recovery system for Linux  Recovers from 10 real-world and synthetic attacks  No user input required in most cases</p>
    <p>Instead of spending days on manual recovery, admin can use Retro to automatically recover, and ensure that all effects of attack are caught</p>
  </div>
  <div class="page">
    <p>Example attack scenario</p>
    <p>Attacker not targeting Alice, wants to run botnet</p>
    <p>Attacker modifies /etc/passwd to add new account  Installs trojan pdflatex, ls to restart, hide botnet</p>
    <p>Alice logs in via SSH  SSH server reads /etc/passwd  Alice runs trojaned pdflatex, ls</p>
    <p>Admin modifies /etc/passwd to add account for Alice</p>
  </div>
  <div class="page">
    <p>Strawman 1: Taint tracking</p>
    <p>Attacker process</p>
    <p>passwd file</p>
    <p>pdflatex binary</p>
    <p>botnet.c adduser alice</p>
    <p>Alice's login</p>
    <p>LaTeX process</p>
    <p>Alice's shell</p>
    <p>Admin's shell</p>
    <p>Alice's paper</p>
    <p>Alice's files</p>
    <p>Alice's PDF file</p>
  </div>
  <div class="page">
    <p>Strawman 1: Taint tracking</p>
    <p>Attacker process</p>
    <p>passwd file</p>
    <p>pdflatex binary</p>
    <p>botnet.c adduser alice</p>
    <p>Alice's login</p>
    <p>LaTeX process</p>
    <p>Alice's shell</p>
    <p>Admin's shell</p>
    <p>Alice's paper</p>
    <p>Alice's files</p>
    <p>Alice's PDF file</p>
    <p>Log all OS-level dependencies in system</p>
  </div>
  <div class="page">
    <p>Strawman 1: Taint tracking</p>
    <p>Attacker process</p>
    <p>passwd file</p>
    <p>pdflatex binary</p>
    <p>botnet.c adduser alice</p>
    <p>Alice's login</p>
    <p>LaTeX process</p>
    <p>Alice's shell</p>
    <p>Admin's shell</p>
    <p>Alice's paper</p>
    <p>Alice's files</p>
    <p>Alice's PDF file</p>
    <p>Given attack, track down all affected files, and restore just those files from backup</p>
    <p>Attack</p>
  </div>
  <div class="page">
    <p>Strawman 1: Taint tracking</p>
    <p>Attacker process</p>
    <p>passwd file</p>
    <p>pdflatex binary</p>
    <p>botnet.c adduser alice</p>
    <p>Alice's login</p>
    <p>LaTeX process</p>
    <p>Alice's shell</p>
    <p>Admin's shell</p>
    <p>Alice's paper</p>
    <p>Alice's files</p>
    <p>Alice's PDF file</p>
    <p>Given attack, track down all affected files, and restore just those files from backup</p>
    <p>Attack</p>
  </div>
  <div class="page">
    <p>Problem with taint tracking: false positives</p>
    <p>Attacker process</p>
    <p>passwd file</p>
    <p>pdflatex binary</p>
    <p>botnet.c adduser alice</p>
    <p>Alice's login</p>
    <p>LaTeX process</p>
    <p>Alice's shell</p>
    <p>Admin's shell</p>
    <p>Alice's paper</p>
    <p>Alice's files</p>
    <p>Alice's PDF file</p>
    <p>Taint tracking conservatively propagates everywhere through shared files</p>
    <p>Attack</p>
  </div>
  <div class="page">
    <p>Problem with taint tracking: false positives</p>
    <p>Attacker process</p>
    <p>passwd file</p>
    <p>pdflatex binary</p>
    <p>botnet.c adduser alice</p>
    <p>Alice's login</p>
    <p>LaTeX process</p>
    <p>Alice's shell</p>
    <p>Admin's shell</p>
    <p>Alice's paper</p>
    <p>Alice's files</p>
    <p>Alice's PDF file</p>
    <p>Taint tracking conservatively propagates everywhere through shared files</p>
    <p>Attack</p>
    <p>Alice's account and files are lost!</p>
  </div>
  <div class="page">
    <p>Strawman 2: VM</p>
    <p>Time</p>
    <p>Virtual machine</p>
  </div>
  <div class="page">
    <p>Strawman 2: VM</p>
    <p>Time</p>
    <p>Virtual machine</p>
    <p>Inputs</p>
    <p>Outputs</p>
  </div>
  <div class="page">
    <p>Periodic VM checkpoints</p>
    <p>Time</p>
    <p>Virtual machine</p>
    <p>Inputs</p>
    <p>Outputs</p>
  </div>
  <div class="page">
    <p>Step 1: identify attack input</p>
    <p>Time</p>
    <p>Virtual machine</p>
    <p>Inputs</p>
    <p>Outputs Attack input</p>
  </div>
  <div class="page">
    <p>Step 2: roll back to checkpoint</p>
    <p>Time</p>
    <p>Virtual machine</p>
    <p>Inputs</p>
    <p>Outputs Attack input</p>
  </div>
  <div class="page">
    <p>Step 3: replay non-attack inputs</p>
    <p>Time</p>
    <p>Virtual machine</p>
    <p>Inputs</p>
    <p>Outputs Attack input X</p>
  </div>
  <div class="page">
    <p>Problem with VM strawman: re-execution is expensive, diverges</p>
    <p>TimeInputs</p>
    <p>Outputs Attack input X</p>
    <p>May take one week to re-execute for a week-old attack</p>
    <p>Original VM inputs may be meaningless for new system  Non-determinism: new SSH crypto keys, inode #s, app state,</p>
    <p>Can't do deterministic re-execution, since some inputs changed</p>
  </div>
  <div class="page">
    <p>Retro's approach: selective re-execution</p>
    <p>Record fine-grained action history graph  Includes system call arguments, function calls,   Assume tamper-proof kernel, storage</p>
    <p>Roll back objects directly affected by attack  Avoid the false positives of taint tracking</p>
    <p>Re-execute actions indirectly affected by attack  Avoid expense, non-determinism of whole-VM re-exec.</p>
  </div>
  <div class="page">
    <p>Action history graph: Objects represent files, processes</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>Action history graph: Actions represent execution</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write(offset, data)</p>
    <p>Action history graph: Actions have dependencies</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write(offset, data) exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>Action history graph: Actions have dependencies</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>write(offset, data) exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>read(offset, data)</p>
    <p>Action history graph: Actions have dependencies</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write(offset, data) exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>read(offset, data)</p>
    <p>exit (status)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>Action history graph: Actions have dependencies</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write(offset, data) exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>read(offset, data)</p>
    <p>exit (status)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>Action history graph: Objects have checkpoints</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write(offset, data) exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>read(offset, data)</p>
    <p>exit (status)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>Step 1: find attack action</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>write(offset, data) exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>read(offset, data)</p>
    <p>exit (status)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>Step 2: roll back affected objects</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
  </div>
  <div class="page">
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>exit (status)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>X</p>
    <p>Step 3: redo non-attack actions</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>write(offset, data)</p>
  </div>
  <div class="page">
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X</p>
    <p>Repeat step 2: roll back objects</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>write(offset, data)</p>
  </div>
  <div class="page">
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X</p>
    <p>Repeat step 3: redo actions</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>Key advantage over VM strawman:</p>
    <p>Re-run only adduser, not entire VM.</p>
    <p>write(offset, data)</p>
  </div>
  <div class="page">
    <p>Repeat step 3: redo actions</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X write(offset, data)</p>
  </div>
  <div class="page">
    <p>Repeat step 3: redo actions</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X write(offset, data)</p>
    <p>Better than either VM or taint tracking:</p>
    <p>Alice account preserved, no re-run of entire VM</p>
  </div>
  <div class="page">
    <p>Challenge: how to avoid re-executing everything?</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X write(offset, data)</p>
    <p>Exit status affects shell, which affects sshd, and so on</p>
    <p>Nave process-level re-execution still re-executes entire system!</p>
  </div>
  <div class="page">
    <p>Observation: many suspect computations are not affected</p>
    <p>Attacker adds 1 account to password file  Alice's sshd reads password file,</p>
    <p>but looks up Alice's account instead of attacker's</p>
    <p>Attacker adds 1 line to pdflatex to restart botnet  Alice's pdflatex process may restart botnet,</p>
    <p>but otherwise does legitimate work</p>
    <p>Significant changes  can detect attack earlier</p>
  </div>
  <div class="page">
    <p>Approach: minimize re-execution</p>
    <p>Predicates: Retro skips equivalent computations  Predicate checks whether inputs are the same  If so, assume original result OK, avoid re-execution</p>
    <p>Refinement: Retro re-executes fine-grained actions  Avoid re-executing entire process or login session,</p>
    <p>when only a small part of it was affected</p>
  </div>
  <div class="page">
    <p>Example 1: exit status to shell unchanged</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X write(offset, data)</p>
  </div>
  <div class="page">
    <p>Predicates: avoid equivalent re-execution</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>adduser alice</p>
    <p>admin's shell</p>
    <p>read(offset, data)</p>
    <p>exec</p>
    <p>(prog, args,</p>
    <p>..)</p>
    <p>write</p>
    <p>(offse t, data</p>
    <p>)</p>
    <p>exit (status)</p>
    <p>X write(offset, data)</p>
    <p>Same input (exit status) as before?</p>
    <p>No need to re-run shell action.</p>
  </div>
  <div class="page">
    <p>read(offset, data)</p>
    <p>X write(offset, data)</p>
    <p>Example 2: user's password unchanged</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>alice's sshd</p>
  </div>
  <div class="page">
    <p>read(offset, data)</p>
    <p>call</p>
    <p>getpw nam(</p>
    <p>alice )</p>
    <p>return (Alice's password)</p>
    <p>X</p>
    <p>Refinement: re-execute individual functions</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>getpwnam function</p>
    <p>write(offset, data)</p>
    <p>alice's sshd</p>
  </div>
  <div class="page">
    <p>return (Alice's password)</p>
    <p>call</p>
    <p>getpw nam(</p>
    <p>alice )</p>
    <p>read(offset, data)</p>
    <p>X</p>
    <p>Refinement: re-execute individual functions</p>
    <p>Time attacker's process</p>
    <p>password file</p>
    <p>getpwnam function</p>
    <p>write(offset, data)</p>
    <p>Same return value as before?</p>
    <p>alice's sshd</p>
  </div>
  <div class="page">
    <p>Remaining challenge: external dependencies</p>
    <p>What if the attack was externally-visible?  Attacker sent spam, or user saw wrong output from ls</p>
    <p>Cannot solve general case (spam already sent)  Will need to pause repair and ask for user input</p>
    <p>Can do compensating actions in some cases</p>
  </div>
  <div class="page">
    <p>Compensating action for terminals: email diff to user</p>
    <p>nickolai@karakum:~$ cd undosys/libundo nickolai@karakum:~/undosys/libundo$ ls l rwrr 1 nickolai nickolai 493 20100513 09:46 Makefile  rwrr 1 nickolai nickolai 2124 20100513 10:22 attack.c drwxrxrx 2 nickolai nickolai 4096 20100513 09:46 bdb rwxrxrx 1 nickolai nickolai 973 20100513 09:46 mailserver.py drwxrxrx 2 nickolai nickolai 4096 20100513 09:46 php rwrr 1 nickolai nickolai 5221 20100513 09:46 pwd.c rwrr 1 nickolai nickolai 1424 20100513 09:46 undo.py + rwrr 1 nickolai nickolai 662 20100513 09:46 undocall.c + rwrr 1 nickolai nickolai 1340 20100513 09:46 undocall.h + rwrr 1 nickolai nickolai 755 20100513 09:46 undotest.c + rwxrxrx 1 nickolai nickolai 360 20100513 09:46 undotest.py rwrr 1 nickolai nickolai 6603 20100513 09:46 undowrap.c nickolai@karakum:~/undosys/libundo$ du ks .  84 . + 96 . nickolai@karakum:~/undosys/libundo$ cd .. nickolai@karakum:~/undosys$</p>
  </div>
  <div class="page">
    <p>Retro implementation</p>
    <p>Linux kernel</p>
    <p>Retro module</p>
    <p>Processes</p>
    <p>libc wrappers</p>
    <p>Action history graph</p>
    <p>Snapshots</p>
    <p>Log</p>
    <p>File system</p>
    <p>. . .</p>
    <p>Repair managers</p>
    <p>OS mgr</p>
    <p>File system</p>
    <p>Terminal</p>
    <p>Network Repair</p>
    <p>controller</p>
  </div>
  <div class="page">
    <p>Retro implementation</p>
    <p>Linux kernel</p>
    <p>Retro module</p>
    <p>Processes</p>
    <p>libc wrappers</p>
    <p>Action history graph</p>
    <p>Snapshots</p>
    <p>Log</p>
    <p>File system</p>
    <p>. . .</p>
    <p>Repair managers</p>
    <p>OS mgr</p>
    <p>File system</p>
    <p>Terminal</p>
    <p>Network Repair</p>
    <p>controller</p>
  </div>
  <div class="page">
    <p>Retro implementation</p>
    <p>Linux kernel</p>
    <p>Retro module</p>
    <p>Processes</p>
    <p>libc wrappers</p>
    <p>Action history graph</p>
    <p>Snapshots</p>
    <p>Log</p>
    <p>File system</p>
    <p>. . .</p>
    <p>Repair managers</p>
    <p>OS mgr</p>
    <p>File system</p>
    <p>Terminal</p>
    <p>Network Repair</p>
    <p>controller</p>
    <p>Existing checkpointing file system (e.g., btrfs)</p>
    <p>Preserve inode numbers by only reusing inodes</p>
    <p>that are free in every snapshot</p>
  </div>
  <div class="page">
    <p>Retro implementation</p>
    <p>Linux kernel</p>
    <p>Retro module</p>
    <p>Processes</p>
    <p>libc wrappers</p>
    <p>Action history graph</p>
    <p>Snapshots</p>
    <p>Log</p>
    <p>File system</p>
    <p>. . .</p>
    <p>Repair managers</p>
    <p>OS mgr</p>
    <p>File system</p>
    <p>Terminal</p>
    <p>Network Repair</p>
    <p>controller</p>
    <p>Shepherd re-execution using ptrace to detect and skip equivalent</p>
    <p>system calls (e.g., exec)</p>
  </div>
  <div class="page">
    <p>Retro implementation</p>
    <p>Linux kernel</p>
    <p>Retro module</p>
    <p>Processes</p>
    <p>libc wrappers</p>
    <p>Action history graph</p>
    <p>Snapshots</p>
    <p>Log</p>
    <p>File system</p>
    <p>. . .</p>
    <p>Repair managers</p>
    <p>OS mgr</p>
    <p>File system</p>
    <p>Terminal</p>
    <p>Network Repair</p>
    <p>controller</p>
    <p>Well-defined API: rollback, redo, equiv, connect</p>
  </div>
  <div class="page">
    <p>Evaluation questions</p>
    <p>How much better is Retro than manual repair?</p>
    <p>What is Retro's cost during normal execution?</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>2 real-world attacks from honeypot  Remove log entries, add accounts, run botnet</p>
    <p>2 synthetic challenge attacks  Running example (LaTeX trojan) and sshd trojan</p>
    <p>6 attacks from Taser recovery system [Goel'05]  File sharing, web servers, databases, desktop apps  Website backdoors, trojans in ls, new accounts</p>
  </div>
  <div class="page">
    <p>Retro repairs from all attacks</p>
    <p>Attack Retro User input required</p>
    <p>Root pw change Skip attacker's login attempt</p>
    <p>Log cleaning</p>
    <p>LaTeX trojan</p>
    <p>sshd trojan Packet replay req'd  conflict!</p>
    <p>Illegal storage</p>
    <p>Content destruct.  (generates terminal diff)</p>
    <p>Unhappy student  (generates terminal diff)</p>
    <p>Compromised DB</p>
    <p>Browser plugin Skip re-execution of browser</p>
    <p>Weak password Skip attacker's login attempt</p>
  </div>
  <div class="page">
    <p>Retro repairs from all attacks</p>
    <p>Attack Retro User input required</p>
    <p>Root pw change Skip attacker's login attempt</p>
    <p>Log cleaning</p>
    <p>LaTeX trojan</p>
    <p>sshd trojan Packet replay req'd  conflict!</p>
    <p>Illegal storage</p>
    <p>Content destruct.  (generates terminal diff)</p>
    <p>Unhappy student  (generates terminal diff)</p>
    <p>Compromised DB</p>
    <p>Browser plugin Skip re-execution of browser</p>
    <p>Weak password Skip attacker's login attempt</p>
  </div>
  <div class="page">
    <p>Root pw change Skip attacker's login attempt</p>
    <p>Log cleaning</p>
    <p>LaTeX trojan</p>
    <p>sshd trojan Packet replay req'd  conflict!</p>
    <p>Illegal storage</p>
    <p>Content destruct.  (generates terminal diff)</p>
    <p>Unhappy student  (generates terminal diff)</p>
    <p>Compromised DB</p>
    <p>Browser plugin Skip re-execution of browser</p>
    <p>Weak password Skip attacker's login attempt</p>
  </div>
  <div class="page">
    <p>Attack Retro User input required</p>
    <p>Root pw change Skip attacker's login attempt</p>
    <p>Log cleaning</p>
    <p>LaTeX trojan</p>
    <p>sshd trojan Packet replay req'd  conflict!</p>
    <p>Illegal storage</p>
    <p>Content destruct.  (generates terminal diff)</p>
    <p>Unhappy student  (generates terminal diff)</p>
    <p>Compromised DB</p>
    <p>Browser plugin Skip re-execution of browser</p>
    <p>Weak password Skip attacker's login attempt</p>
  </div>
  <div class="page">
    <p>Root pw change Skip attacker's login attempt</p>
    <p>Log cleaning</p>
    <p>LaTeX trojan</p>
    <p>sshd trojan Packet replay req'd  conflict!</p>
    <p>Illegal storage</p>
    <p>Content destruct.  (generates terminal diff)</p>
    <p>Unhappy student  (generates terminal diff)</p>
    <p>Compromised DB</p>
    <p>Browser plugin Skip re-execution of browser</p>
    <p>Weak password Skip attacker's login attempt</p>
  </div>
  <div class="page">
    <p>Repair cost: Retro repairs few objects</p>
    <p>Attack Objects repaired by Retro</p>
    <p>Root pw change 7 (0.5%)</p>
    <p>Log cleaning 99 (8%)</p>
    <p>LaTeX trojan 190 (15%)</p>
    <p>sshd trojan 880 (70%)</p>
  </div>
  <div class="page">
    <p>Repair cost: Retro repairs few objects</p>
    <p>Repair cost proportional to extent of attack</p>
    <p>Attack Objects repaired by Retro</p>
    <p>Root pw change 7 (0.5%)</p>
    <p>Log cleaning 99 (8%)</p>
    <p>LaTeX trojan 190 (15%)</p>
    <p>sshd trojan 880 (70%)</p>
  </div>
  <div class="page">
    <p>Repair time depends largely on # objects, not log size</p>
    <p>Total size of Retro log (action history graph)</p>
    <p>Repair time for 136 objects / 399 syscalls</p>
  </div>
  <div class="page">
    <p>Repair time depends largely on # objects, not log size</p>
    <p>10,000X increase in workload leads to 10X increase in repair time</p>
    <p>Much more efficient than whole-VM re-execution</p>
    <p>Total size of Retro log (action history graph)</p>
    <p>Repair time for 136 objects / 399 syscalls</p>
  </div>
  <div class="page">
    <p>Runtime overheads</p>
    <p>Workload CPU cost Storage overhead</p>
    <p>HotCRP conference web site 35% 4GB / day</p>
  </div>
  <div class="page">
    <p>Runtime overheads</p>
    <p>Workload CPU cost Storage overhead</p>
    <p>HotCRP conference web site 35% 4GB / day</p>
    <p>Apache, small static files 127% 100GB / day</p>
    <p>Continuous kernel recompile 89% 150GB / day</p>
    <p>Can store 2 weeks of logs on 2TB disk ($100) even for worst-case extreme workloads</p>
  </div>
  <div class="page">
    <p>Runtime overheads</p>
    <p>Workload CPU cost</p>
    <p>w/ 2nd core</p>
    <p>Storage overhead</p>
    <p>HotCRP conference web site 35% 2% 4GB / day</p>
    <p>Apache, small static files 127% 33% 100GB / day</p>
    <p>Continuous kernel recompile 89% 18% 150GB / day</p>
    <p>Can store 2 weeks of logs on 2TB disk ($100) even for worst-case extreme workloads</p>
    <p>Can off-load CPU overhead to extra core</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Tracking down intrusions  BackTracker [King'03], IntroVirt [Joshi'05]</p>
    <p>Taint tracking to find, revert affected files  Taser [Goel'05], Polygraph [Mahajan'09]</p>
    <p>Selective undo and re-execution  Undoable mail store [Brown'03]</p>
    <p>(fixing configuration errors in a single app)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Hard to recover from attacks and preserve legitimate user changes</p>
    <p>Retro repairs attacks, keeps legitimate changes  Key idea: re-execution of legitimate actions  Predicates and refinement minimize re-execution</p>
  </div>
  <div class="page">
    <p>Additional slides follow</p>
  </div>
  <div class="page">
    <p>Non-deterministic re-execution</p>
    <p>Goal: an acceptable execution  An execution that could have happened in the</p>
    <p>absence of the attack</p>
    <p>What if program is non-deterministic?  Re-run may lead to another acceptable execution  Result will not be influenced by attack  If significant differences arise (e.g., new crypto keys),</p>
    <p>might need user input to re-execute</p>
  </div>
</Presentation>
