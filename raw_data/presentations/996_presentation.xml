<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>T H U  H P C</p>
    <p>Squeezing out All the Value of Loaded Data:</p>
    <p>An Out-Of-Core Graph Processing System with Reduced Disk I/O</p>
    <p>Zhiyuan Ai1, Mingxing Zhang1, Yongwei Wu1, Xuehai Qian2, Kang Chen1, Weimin Zheng1</p>
    <p>Tsinghua University1, University of Southern California2</p>
  </div>
  <div class="page">
    <p>CLIPGraph Processing</p>
    <p>Single machine graph processing systems (Disk I/O is bottleneck )</p>
    <p>GraphChi [OSDI12]2012</p>
    <p>GridGraph [ATC15]2015</p>
    <p>X-Stream [SOSP13]2013</p>
    <p>FlashGraph [FAST15]2015</p>
    <p>Wrong trade-off !!</p>
  </div>
  <div class="page">
    <p>CLIPComparison</p>
    <p>I/O locality The amount of Disk I/O</p>
    <p>Prior systems Better Large</p>
    <p>CLIP Not better Little</p>
    <p>Bottleneck</p>
    <p>Squeezing out All the Value of Loaded Data Up to tens or even thousands of times speedup</p>
    <p>CLIP</p>
    <p>Trade-off</p>
    <p>Wrong</p>
  </div>
  <div class="page">
    <p>CLIPComparison</p>
    <p>Loaded Data (In-Memory)</p>
    <p>VS</p>
    <p>Prior systems C L I P</p>
    <p>Squeezing gently Many iterations</p>
    <p>Squeezing hard Few iterations</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>CLIP2.1 Shortcomings of prior works (1)</p>
    <p>Processing order is not flexible!!</p>
    <p>Block-1 Block-2   Block-n</p>
    <p>Part-1 Part-2   Part-n Vertices</p>
    <p>Edges</p>
    <p>1 (1, 1,1) 2 (2, 2,2) 3 (3, 3,3) 4 (4,4,4)</p>
    <p>v v v</p>
    <p>Disk</p>
    <p>Memory</p>
    <p>Load</p>
    <p>v</p>
    <p>e [] []</p>
    <p>1 2</p>
    <p>()</p>
    <p>()</p>
    <p>Vertex-centric</p>
    <p>Edge-centric</p>
    <p>One by one</p>
    <p>Next iteration</p>
    <p>Each edge is</p>
    <p>processed once</p>
    <p>The loaded data still has surplus value</p>
    <p>User-defined Function</p>
  </div>
  <div class="page">
    <p>CLIP2.1 Shortcomings of prior works (2)</p>
    <p>Constrained programming model</p>
    <p>V</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>E</p>
    <p>D</p>
    <p>F</p>
    <p>G</p>
    <p>Receive</p>
    <p>Send</p>
    <p>Vertex-centric</p>
    <p>Graphchi [OSDI12]</p>
    <p>~~~~~~~~~~~~</p>
    <p>Edge-centric</p>
    <p>GridGraph [ATC15]</p>
    <p>A</p>
    <p>C</p>
    <p>E</p>
    <p>D</p>
    <p>F</p>
    <p>G</p>
    <p>~~~~~~~</p>
    <p>More efficient algorithms cant be used</p>
  </div>
  <div class="page">
    <p>CLIP2.2 Our solutions</p>
    <p>e e e e</p>
    <p>Reentry</p>
    <p>Block-1</p>
    <p>Block-2</p>
    <p>Block-n</p>
    <p>S</p>
    <p>0,1 (2, 1)</p>
    <p>(i, j)</p>
    <p>()</p>
    <p>Edges (Sequential Read)</p>
    <p>v v</p>
    <p>Block-1 Block-2  Block-n</p>
    <p>Load</p>
    <p>Memory</p>
    <p>Disk Mmap()</p>
    <p>() Access an Arbitrary vertex</p>
  </div>
  <div class="page">
    <p>CLIP2.2 Our solutions</p>
    <p>CLIP: Squeezing out all the value of loaded data</p>
    <p>Principle: Processing the loaded data multiple times rather than once.</p>
    <p>Example: SSSP (Single Source Shortest Path).</p>
    <p>vertexs property.</p>
    <p>Example: WCC (Weakly Connected Component).</p>
  </div>
  <div class="page">
    <p>CLIP2.2.1 Reentry of Loaded Data</p>
    <p>Example: Calculating single source shortest path (SSSP)</p>
    <p>Start</p>
    <p>e1 1 6 1 e2 2 1 1 e3 3 2 1 e4 4 3 1 e5 5 4 1 e6 6 5 1</p>
    <p>Prior system: process once</p>
    <p>Disk Memory</p>
    <p>once</p>
  </div>
  <div class="page">
    <p>CLIP2.2.1 Reentry of Loaded Data</p>
    <p>Example: Calculating single source shortest path (SSSP)</p>
    <p>Start</p>
    <p>e1 1 6 1 e2 2 1 1 e3 3 2 1 e4 4 3 1 e5 5 4 1 e6 6 5 1</p>
    <p>Prior system: process once</p>
    <p>Disk Memory</p>
    <p>once</p>
  </div>
  <div class="page">
    <p>CLIP2.2.1 Reentry of Loaded Data</p>
    <p>Example: Calculating single source shortest path (SSSP)</p>
    <p>Start</p>
    <p>e1 1 6 1 e2 2 1 1 e3 3 2 1 e4 4 3 1 e5 5 4 1 e6 6 5 1</p>
    <p>Prior system: process once</p>
    <p>Disk Memory</p>
    <p>/:  ()</p>
  </div>
  <div class="page">
    <p>CLIP2.2.1 Reentry of Loaded DataCLIP</p>
    <p>Example: Calculating single source shortest path (SSSP)</p>
    <p>Start</p>
    <p>e1 1 6 1 e2 2 1 1 e3 3 2 1 e4 4 3 1 e5 5 4 1 e6 6 5 1</p>
    <p>CLIP: Process multiple times</p>
    <p>Disk Memory</p>
    <p>Pass one</p>
    <p>Pass two</p>
  </div>
  <div class="page">
    <p>CLIP2.2.1 Reentry of Loaded DataCLIP</p>
    <p>Example: Calculating single source shortest path (SSSP)</p>
    <p>Start</p>
    <p>e1 1 6 1 e2 2 1 1 e3 3 2 1 e4 4 3 1 e5 5 4 1 e6 6 5 1</p>
    <p>CLIP: Process multiple times</p>
    <p>/:  ()</p>
    <p>Disk Memory</p>
    <p>Pass one</p>
    <p>Pass two</p>
  </div>
  <div class="page">
    <p>CLIP2.2.2 Beyond the Neighborhood</p>
    <p>Example: Weakly Connected Component (WCC)</p>
    <p>Min</p>
    <p>Propagation VS</p>
    <p>(,)</p>
    <p>() ()</p>
  </div>
  <div class="page">
    <p>CLIP2.2.2 Beyond the Neighborhood</p>
    <p>Example: Calculating weakly connected component (WCC)</p>
    <p>e1 2 3</p>
    <p>e2 2 1</p>
    <p>e3 1 2</p>
    <p>e4 4 3</p>
    <p>e5 3 4</p>
    <p>e6 3 2</p>
    <p>Undirected graph</p>
    <p>Prior system: label propagation based</p>
    <p>Disk Memory</p>
    <p>Iteration 1 1 2 3 41 22</p>
    <p>v1 v2 v3v3 v4v2</p>
  </div>
  <div class="page">
    <p>CLIP2.2.2 Beyond the Neighborhood</p>
    <p>Example: Calculating weakly connected component (WCC)</p>
    <p>e1 2 3</p>
    <p>e2 2 1</p>
    <p>e3 1 2</p>
    <p>e4 4 3</p>
    <p>e5 3 4</p>
    <p>e6 3 2</p>
    <p>Undirected graph</p>
    <p>Prior system: label propagation based</p>
    <p>Disk Memory</p>
    <p>Iteration 1 1 2 3 41 22</p>
    <p>Iteration 2 1 2 2 21 11</p>
    <p>/:  ()</p>
  </div>
  <div class="page">
    <p>CLIP2.2.2 Beyond the NeighborhoodCLIP</p>
    <p>Example: Calculating weakly connected component (WCC)</p>
    <p>e1 2 3</p>
    <p>e2 2 1</p>
    <p>e3 1 2</p>
    <p>e4 4 3</p>
    <p>e5 3 4</p>
    <p>e6 3 2</p>
    <p>Undirected graph</p>
    <p>Clip: disjoint set (Can access an arbitrary vertex)</p>
    <p>Disk Memory</p>
    <p>v1 v2 v3 v4</p>
    <p>Iteration 1 1 2 3 4</p>
    <p>/:  ()</p>
  </div>
  <div class="page">
    <p>CLIP2.2.3 APIs Programming model of CLIP</p>
    <p>All vertices</p>
    <p>Simple</p>
  </div>
  <div class="page">
    <p>CLIP2.2.4 Applications</p>
    <p>Reentry of loaded data (Asynchronous applications)</p>
    <p>SSSP (Single Source Shortest Path)</p>
    <p>BFS (Breadth-first Search)</p>
    <p>Beyond-neighborhood applications</p>
    <p>WCC (Weakly connected component)</p>
    <p>MIS (Maximal Independent Set )</p>
    <p>Delta-based PageRank, Diameter Approximation, Transitive Closures, Betweenness Centrality ...</p>
    <p>Graph Stream Algorithms, SCC, Coloring, MCST, Triangle counting ...</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>CLIP3.1 Setup Testing three different scenarios:</p>
    <p>All-In-Memory Semi-External External</p>
    <p>Mem</p>
    <p>Disk</p>
    <p>Vertices</p>
    <p>Edges</p>
    <p>Most of edges</p>
    <p>All vertices All vertices</p>
    <p>(Limit is 32GB)</p>
  </div>
  <div class="page">
    <p>CLIP3.1 Setup</p>
    <p>Vertexes Edges Threshold</p>
    <p>External Semi</p>
    <p>LiveJournal 4.85M 69.0M 16MB 256MB</p>
    <p>Dimacs 23.9M 58.3M 64MB 256MB</p>
    <p>Twitter 41.7M 1.47B 128MB 4GB</p>
    <p>Friendster 65.6M 1.8B 128MB 4GB</p>
    <p>Yahoo 1.4B 6.64B 4GB 8GB</p>
    <p>The real-world graph datasets Test environment</p>
    <p>CPU: Two Intel(R) Xeon(R) CPU E5-2640 v2 @ 2.00GHz (each has 8-cores)</p>
    <p>DRAM: 32GB, L3 cache 20MB</p>
    <p>Disk: Standard 1TB SSD drive. The average throughput is about 450MB/s for sequential read.</p>
    <p>Tips: Dimacs and Yahoo have a large diameter</p>
  </div>
  <div class="page">
    <p>CLIP3.2 EvaluationLoaded data reentry Execution time (in seconds, external / semi-external / all-in-memory)</p>
    <p>LiveJornal Dimacs Friendster Twitter Yahoo</p>
    <p>SSSP</p>
    <p>X-Stream 45 10790 50 39 &gt;500</p>
    <p>GridGraph 37 10788 27 33 5824</p>
    <p>CLIP 8 934 1 19 484</p>
    <p>BFS</p>
    <p>X-Stream 16 6263 30 14 &gt;720</p>
    <p>GridGraph 15 6262 29 13 4375</p>
    <p>CLIP 4 574 1 5 243</p>
    <p>The number of iterations</p>
    <p>SSSP speedup: 1.8x-14.06x</p>
    <p>BFS speedup: 1.9x-12.08x</p>
  </div>
  <div class="page">
    <p>CLIP3.2 EvaluationLoaded data reentry</p>
    <p>LiveJournal</p>
    <p>Dimacs</p>
    <p>Friendster</p>
    <p>Twitter</p>
    <p>X-Stream</p>
    <p>GridGraph</p>
    <p>CLIP</p>
    <p>Total amount of disk I/O for SSSP (GB)</p>
    <p>MRT Values(seconds) Iteration</p>
    <p>SSSP on Dimacs graph</p>
    <p>All the values we reported is measured at MRT (Maximum Reentry Times) = 5  Heuristically setting MRT to 5-10 is usually enough (less than 4% difference)</p>
  </div>
  <div class="page">
    <p>CLIP3.3 EvaluationBeyond-neighborhood</p>
    <p>Execution time (in seconds, external / semi-external / all-in-memory)</p>
    <p>The number of iterations</p>
    <p>CLIP Sequential implementation</p>
    <p>But only need one iteration</p>
    <p>WCC speedup: 5.6x-4264x</p>
    <p>MIS speedup: 34x-60x</p>
    <p>LiveJornal Dimacs Friendster Twitter Yahoo</p>
    <p>WCC</p>
    <p>X-Stream 13 6263 24 16 &gt;360</p>
    <p>GridGraph 37 6261 12 10 1368</p>
    <p>CLIP 1 1 1 1 1</p>
    <p>MIS</p>
    <p>X-Stream 54 31 65 53 &gt;300</p>
    <p>GridGraph 53 31 64 52 &gt;400</p>
    <p>CLIP 1 1 1 1 1</p>
  </div>
  <div class="page">
    <p>CLIP3.4 EvaluationPreprocessing</p>
    <p>Preprocessing (Sorting) Evaluation</p>
    <p>Preprocessing time (seconds)</p>
    <p>Sorting is required by some algorithms and can be amortized by reusing</p>
    <p>Sort by source</p>
    <p>Proc. Exec. Total</p>
    <p>MIS</p>
    <p>X-Stream 0 4867 4867</p>
    <p>GridGraph 185.5 3777 3962.5</p>
    <p>Clip 145.3 62.49 207.79</p>
    <p>Total time on Friendster (seconds)</p>
    <p>MIS 19.07x faster than GridGraph MIS 23.42x faster than X-Stream</p>
  </div>
  <div class="page">
    <p>CLIP4 Conclusion</p>
    <p>CLIP: A single-machine graph processing system</p>
    <p>Two techniques:</p>
    <p>Reentry of Loaded Data</p>
    <p>Beyond the Neighborhood</p>
    <p>Processing the loaded data multiple times rather than once</p>
    <p>The user-defined function is allowed to update an arbitrary vertexs property</p>
    <p>Focus on squeezing out all the value of loaded data</p>
    <p>Reducing iterations Reducing the total amount of disk I/O</p>
    <p>Reducing execution time</p>
    <p>Up to tens or even thousands of times speedup</p>
  </div>
  <div class="page">
    <p>Thank You!!</p>
  </div>
</Presentation>
