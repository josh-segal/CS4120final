<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Decoupling Dynamic</p>
    <p>Information Flow Tracking</p>
    <p>with a Dedicated Coprocessor</p>
    <p>Hari Kannan, Michael Dalton, Christos Kozyrakis</p>
    <p>Computer Systems Laboratory</p>
    <p>Stanford University</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Dynamic analysis help better understand SW behavior Security, Debugging, Full system profiling</p>
    <p>Hardware support for such analyses very useful Provides speed advantage over SW solutions</p>
    <p>Systems manage metadata for analysis in hardware</p>
    <p>Implementation challenges Storage overheads of metadata (Suh05)</p>
    <p>Processing of metadata</p>
    <p>Need fast processing (low overheads)</p>
    <p>Need cost effective implementation</p>
    <p>Solution: Tightly coupled coprocessor for analysis 2</p>
  </div>
  <div class="page">
    <p>Case Study  DIFT (Dynamic Information Flow Tracking)</p>
    <p>DIFT taints data from untrusted sources</p>
    <p>Extra tag bit per word marks if untrusted</p>
    <p>Propagate taint during program execution</p>
    <p>Operations with tainted data produce tainted results</p>
    <p>Check for suspicious uses of tainted data</p>
    <p>Tainted code execution</p>
    <p>Tainted pointer dereference (code &amp; data)</p>
    <p>Tainted SQL command</p>
    <p>Can detect both low-level &amp; high-level threats 3</p>
  </div>
  <div class="page">
    <p>r1:0</p>
    <p>r2:idx</p>
    <p>r3:&amp;buffer</p>
    <p>r4:0</p>
    <p>Data T</p>
    <p>r5:x</p>
    <p>DIFT Example: Memory Corruption</p>
    <p>Tainted pointer dereference security trap</p>
    <p>int idx = tainted_input;</p>
    <p>buffer[idx] = x; // memory corruption</p>
    <p>Vulnerable C Code</p>
    <p>set r1 &amp;tainted_input</p>
    <p>load r2 M[r1]</p>
    <p>add r4 r2 + r3</p>
    <p>store M[r4] r5 r4:&amp;buffer+idx</p>
    <p>r1:&amp;input</p>
    <p>r2:idx=input</p>
    <p>TRAP</p>
  </div>
  <div class="page">
    <p>HW Option 1: In-core DIFT</p>
    <p>Policy Decode</p>
    <p>Tag ALU</p>
    <p>Tag Check</p>
    <p>Decode D-Cache RegFile ALU I-Cache Traps W</p>
    <p>B</p>
    <p>Integrated DIFT hardware [Dalton07, Suh04, Chen05]</p>
    <p>No performance, minor power, and minor area overhead</p>
    <p>Invasive changes to processor</p>
    <p>High design and validation costs</p>
    <p>Synchronizes metadata and data per instruction</p>
  </div>
  <div class="page">
    <p>Core 1</p>
    <p>(App)</p>
    <p>HW Option 2: Offloading DIFT</p>
    <p>Capture</p>
    <p>Trace</p>
    <p>Log buffer</p>
    <p>(L2 cache)</p>
    <p>Core 2</p>
    <p>(DIFT)</p>
    <p>Analyze</p>
    <p>Trace</p>
    <p>SW DIFT on modified multi-core chip (e.g., CMUs LBA)</p>
    <p>Flexible support for various analyses</p>
    <p>Large area &amp; power overhead (2nd core, trace compress)</p>
    <p>Large performance overhead (DBT, memory traffic)</p>
    <p>Significant changes to processor &amp; memory hierarchy</p>
    <p>General</p>
    <p>Purpose Core</p>
    <p>General</p>
    <p>Purpose Core</p>
  </div>
  <div class="page">
    <p>Our Proposal: DIFT Coprocessor</p>
    <p>Off-core DIFT coprocessor (similar to watchdog processors)</p>
    <p>Small performance, power, and area overhead</p>
    <p>Minor changes to processor</p>
    <p>Reuse across processor designs</p>
    <p>L2 Cache</p>
    <p>Cache</p>
    <p>Main</p>
    <p>Core</p>
    <p>Tag</p>
    <p>Cache</p>
    <p>Tag</p>
    <p>Core</p>
    <p>Instructions</p>
    <p>Exceptions</p>
    <p>DIFT</p>
    <p>Coprocessor</p>
    <p>General</p>
    <p>Purpose Core</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation &amp; Overview</p>
    <p>Software Interface of the coprocessor</p>
    <p>Architecture of the coprocessor</p>
    <p>Performance &amp; Security Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Coprocessor Setup</p>
    <p>A pair of policy registers Accessible via coprocessor instructions</p>
    <p>Could also be memory-mapped</p>
    <p>Policy granularity: operation type Select input operands to be checked (if tainted)</p>
    <p>Select input operands that propagate taint to output</p>
    <p>Select the propagation mode (and, or, xor)</p>
    <p>ISA instructions decomposed to 1 operations Types: ALU, logical, branch, memory, compare, FP,</p>
    <p>Makes policies independent of ISA packaging</p>
    <p>Same HW policies for both RISC &amp; CISC ISAs</p>
  </div>
  <div class="page">
    <p>r1:0</p>
    <p>r2:idx</p>
    <p>r3:&amp;buffer</p>
    <p>r4:0</p>
    <p>Data T</p>
    <p>r5:x</p>
    <p>What happens without Proc/Coproc Synchronization?</p>
    <p>int idx = tainted_input;</p>
    <p>buffer[idx] = x; // memory corruption</p>
    <p>Vulnerable C Code</p>
    <p>set r1 &amp;tainted_input</p>
    <p>load r2 M[r1]</p>
    <p>add r4 r2 + r3</p>
    <p>store M[r4] r5 r4:&amp;buffer+idx</p>
    <p>r1:&amp;input</p>
    <p>r2:idx=input</p>
    <p>EXPLOIT</p>
    <p>exec (sys call)</p>
    <p>Attacker executes system call system compromise</p>
    <p>SYSTEM</p>
    <p>COMPROMISE</p>
  </div>
  <div class="page">
    <p>System Calls as Sync points</p>
    <p>Key Idea: Main core and coproc sync at system calls</p>
    <p>Security: This prevents attacker from executing system calls</p>
    <p>Applications corrupted address space can be discarded</p>
    <p>Does not weaken the DIFT model</p>
    <p>DIFT detects attack only at time of exploit, not corruption</p>
    <p>Performance: Synchronization overhead typically tens of cycles</p>
    <p>Function of decoupling queue size</p>
    <p>Lost in the noise of system call overheads (hundreds of cycles)</p>
  </div>
  <div class="page">
    <p>r1:0</p>
    <p>r2:idx</p>
    <p>r3:&amp;buffer</p>
    <p>r4:0</p>
    <p>Data T</p>
    <p>r5:x</p>
    <p>System Call Synchronization</p>
    <p>int idx = tainted_input;</p>
    <p>buffer[idx] = x; // memory corruption</p>
    <p>Vulnerable C Code</p>
    <p>set r1 &amp;tainted_input</p>
    <p>load r2 M[r1]</p>
    <p>add r4 r2 + r3</p>
    <p>store M[r4] r5 r4:&amp;buffer+idx</p>
    <p>r1:&amp;input</p>
    <p>r2:idx=input</p>
    <p>TRAP</p>
    <p>exec (sys call) STALL</p>
    <p>Tainted pointer dereference security exception</p>
  </div>
  <div class="page">
    <p>Coprocessor Design</p>
    <p>DIFT functionality in a coprocessor</p>
    <p>Coprocessor Interface (via decoupling queue)</p>
    <p>Pass committed instruction information</p>
    <p>Instruction encoding could be at micro-op granularity (in x86)</p>
    <p>Physical address obviates need for MMU in coprocessor</p>
    <p>Processor</p>
    <p>Core</p>
    <p>I</p>
    <p>Cache</p>
    <p>D</p>
    <p>Cache</p>
    <p>Policy Decode</p>
    <p>Tag ALU</p>
    <p>Tag Check Tag</p>
    <p>Cache</p>
    <p>Tag RF W B</p>
    <p>DIFT Coprocessor PC</p>
    <p>Inst Encoding</p>
    <p>Physical Address</p>
    <p>Security exception</p>
    <p>L2 Cache</p>
    <p>Decoupling</p>
    <p>queue Stall</p>
  </div>
  <div class="page">
    <p>Prototype</p>
    <p>Leon-3</p>
    <p>@40MH z</p>
    <p>DRAM</p>
    <p>Ethernet</p>
    <p>AoE</p>
    <p>Ethernet</p>
    <p>AoE</p>
    <p>Leon-3</p>
    <p>@65MHz</p>
    <p>DRAM</p>
    <p>Hardware</p>
    <p>Paired with simple SPARC V8 core (Leon-3)</p>
    <p>Mapped to FPGA board</p>
    <p>Software</p>
    <p>Fully-featured Linux 2.6</p>
    <p>Design statistics</p>
    <p>Clock frequency: same as original</p>
    <p>Logic: +7.5% overhead</p>
    <p>of simple in-order core with no speculation</p>
  </div>
  <div class="page">
    <p>System Performance Overheads</p>
    <p>Runtime overhead &lt; 1% over SPEC benchmarks 512 byte tag cache</p>
    <p>gzip gap vpr gcc mcf crafty parser vortex bzip2 twolf</p>
    <p>R u</p>
    <p>n t im</p>
    <p>e O</p>
    <p>v e r h</p>
    <p>e a d</p>
    <p>( %</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Scaling the tag cache</p>
    <p>Worst case micro-benchmark 512-byte tag cache provides good performance</p>
    <p>R u</p>
    <p>n t im</p>
    <p>e O</p>
    <p>v e r h</p>
    <p>e a d</p>
    <p>( %</p>
    <p>)</p>
    <p>Size of the Tag Cache</p>
    <p>Queue full stalls</p>
    <p>Memory contention Stalls</p>
    <p>Queue full Stalls</p>
  </div>
  <div class="page">
    <p>Scaling the decoupling queue</p>
    <p>Worst case micro-benchmark 6 entry queue reduces performance overhead</p>
    <p>R u</p>
    <p>n t im</p>
    <p>e O</p>
    <p>v e r h</p>
    <p>e a d</p>
    <p>( %</p>
    <p>)</p>
    <p>Size of the Queue (no. of entries)</p>
    <p>Queue fill Stalls</p>
    <p>Memory contention Stalls</p>
    <p>Queue full Stalls</p>
  </div>
  <div class="page">
    <p>Coprocessors for complex cores</p>
    <p>Modest overheads with higher IPC cores Because main core rarely achieves peak IPC (=1)</p>
    <p>Coprocessor performs very simple operations</p>
    <p>Implies coprocessor can be paired with complex cores 18</p>
    <p>R e la</p>
    <p>t iv</p>
    <p>e O</p>
    <p>v e r h</p>
    <p>e a d</p>
    <p>Ratio of main core's clock to coprocessor's clock</p>
    <p>gzip</p>
    <p>gcc</p>
    <p>twolf</p>
  </div>
  <div class="page">
    <p>Security Policies Overview</p>
    <p>P Bit T Bit B Bit S Bit</p>
    <p>Buffer Overflow</p>
    <p>Policy</p>
    <p>Identify all pointers,</p>
    <p>and track data taint. Check for illegal</p>
    <p>tainted ptr use. Y Y</p>
    <p>Offset-based</p>
    <p>attacks (control ptr)</p>
    <p>Track data taint,</p>
    <p>and bounds check to validate.</p>
    <p>Y</p>
    <p>Format String</p>
    <p>Policy</p>
    <p>Check tainted args</p>
    <p>to print commands. Y Y</p>
    <p>SQL/XSS Check tainted</p>
    <p>commands. Y Y</p>
    <p>Red zone Policy Sandbox heap data. Y</p>
    <p>Sandboxing Policy Protect the security</p>
    <p>handler. Y</p>
  </div>
  <div class="page">
    <p>Security Experiments</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>tar C Directory Traversal Open tainted dir</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>SUS C Format String Tainted %n in syslog</p>
    <p>quotactl</p>
    <p>syscall</p>
    <p>C User/kernel pointer</p>
    <p>dereference</p>
    <p>Tainted pointer to kernelspace</p>
    <p>sendmail C Buffer (BSS) Overflow Tainted code ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Unmodified SPARC binaries from real-world programs</p>
    <p>Basic/net utilities, servers, web apps, search engine</p>
  </div>
  <div class="page">
    <p>Security Experiments</p>
    <p>Protection against low-level memory corruptions</p>
    <p>Both in userspace and kernelspace 21</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>tar C Directory Traversal Open tainted dir</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>SUS C Format String Tainted %n in syslog</p>
    <p>quotactl</p>
    <p>syscall</p>
    <p>C User/kernel pointer</p>
    <p>dereference</p>
    <p>Tainted pointer to kernelspace</p>
    <p>sendmail C Buffer (BSS) Overflow Tainted code ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
  </div>
  <div class="page">
    <p>Security Experiments</p>
    <p>Protection against semantic vulnerabilities</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>tar C Directory Traversal Open tainted dir</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>SUS C Format String Tainted %n in syslog</p>
    <p>quotactl</p>
    <p>syscall</p>
    <p>C User/kernel pointer</p>
    <p>dereference</p>
    <p>Tainted pointer to kernelspace</p>
    <p>sendmail C Buffer (BSS) Overflow Tainted code ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
  </div>
  <div class="page">
    <p>Security Experiments</p>
    <p>Protection is independent of programming language</p>
    <p>Propagation &amp; checks at the level of basic ops 23</p>
    <p>Program Lang. Attack Detected Vulnerability</p>
    <p>tar C Directory Traversal Open tainted dir</p>
    <p>gzip C Directory Traversal Open tainted dir</p>
    <p>Wu-FTPD C Format String Tainted %n in vfprintf string</p>
    <p>SUS C Format String Tainted %n in syslog</p>
    <p>quotactl</p>
    <p>syscall</p>
    <p>C User/kernel pointer</p>
    <p>dereference</p>
    <p>Tainted pointer to kernelspace</p>
    <p>sendmail C Buffer (BSS) Overflow Tainted code ptr</p>
    <p>polymorph C Buffer Overflow Tainted code ptr</p>
    <p>htdig C++ Cross-site Scripting Tainted &lt;script&gt; tag</p>
    <p>Scry PHP Cross-site Scripting Tainted &lt;script&gt; tag</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Hardware dynamic analyses aid program understanding</p>
    <p>Decoupling analyses from main core essential for practicality</p>
    <p>Proposed a tightly coupled coprocessor for DIFT</p>
    <p>Does not compromise security model</p>
    <p>Has low performance and area overheads</p>
    <p>Full-system FPGA prototype Reliably catches exploits in user &amp; kernel-space</p>
  </div>
</Presentation>
