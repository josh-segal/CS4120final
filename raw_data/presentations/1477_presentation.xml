<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Getting Real: Lessons in Transitioning Research Simulations into Hardware Systems</p>
    <p>Mohit Saxena, Yiying Zhang</p>
    <p>Michael Swift, Andrea Arpaci-Dusseau and Remzi Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>Flash Storage Stack Research</p>
    <p>SSD Design</p>
    <p>Flash management</p>
    <p>OS &amp; Applications</p>
    <p>File systems, block cache, K-V stores</p>
    <p>Device Interface</p>
    <p>read, write, trim</p>
  </div>
  <div class="page">
    <p>How to evaluate new SSD designs? 1. Modify SSD</p>
    <p>Replace firmware/FTL  Are you a device vendor?</p>
    <p>Flexible and fast  Hard and time-consuming</p>
  </div>
  <div class="page">
    <p>Simulator/Emulator Limitations  Real hardware performance</p>
    <p>SSDs are complex: banks, packages, planes</p>
    <p>Interaction with software stack  SSDs are sensitive to OS &amp;</p>
    <p>app behavior</p>
    <p>Trace replay  Unable to model request</p>
    <p>timing dependencies &amp; new commands</p>
    <p>FAST year</p>
    <p>Unmodified SSDs</p>
    <p>Simulator Hardware</p>
  </div>
  <div class="page">
    <p>Approach 4. SSD Prototyping Kit</p>
  </div>
  <div class="page">
    <p>In this Talk</p>
    <p>New SSD and Interface Designs</p>
    <p>Research Simulation  Hardware Prototype</p>
    <p>FlashTiers Solid-State Cache (SSC) [EuroSys 12]</p>
    <p>Nameless Write SSD [FAST 12]</p>
    <p>Challenges, Experiences and Lessons</p>
    <p>General insights applicable to other SSD designs and interfaces</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Introduction</p>
    <p>Background</p>
    <p>OpenSSD Hardware Platform</p>
    <p>SSC and Nameless Write SSD Interfaces</p>
    <p>Prototyping Experiences</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Flash SSD 101</p>
    <p>Remap in-place writes</p>
    <p>Address translation</p>
    <p>Log-structuring</p>
    <p>Garbage collection</p>
    <p>OS</p>
    <p>Pages in Flash Erase Block</p>
    <p>write</p>
    <p>FTL</p>
    <p>write 3</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>OpenSSD Hardware Platform</p>
    <p>Hardware: commodity  Indilinx Barefoot ARM</p>
    <p>SSD controller  64 MB DRAM, 128 GB</p>
    <p>NAND Flash</p>
    <p>Software: reference  Open-source FTL</p>
    <p>Interface: standard  SATA read &amp; write  UART serial debugging</p>
  </div>
  <div class="page">
    <p>Solid-State Disk (SSD)</p>
    <p>SSD Block Interface</p>
    <p>Emulate disk: persistent block store</p>
    <p>Application</p>
    <p>Block Layer File System</p>
    <p>read, write, trim</p>
    <p>SSD</p>
  </div>
  <div class="page">
    <p>Solid-State Cache (SSC)</p>
    <p>Application</p>
    <p>Block Layer File System</p>
    <p>read, write, trim</p>
    <p>SSD</p>
    <p>SSC Caching Interface</p>
    <p>Distinguish clean from dirty data</p>
    <p>Return not-present read errors for evicted blocks</p>
    <p>Fast and reliable SSC</p>
    <p>Cache Manager</p>
    <p>Application</p>
    <p>Block Layer File System</p>
    <p>read, clean, exists write-clean/dirty</p>
    <p>not-present errors</p>
    <p>SSC</p>
  </div>
  <div class="page">
    <p>Nameless-Write (NW-SSD)</p>
    <p>Application</p>
    <p>Block Layer File System</p>
    <p>read, write, trim</p>
    <p>Cache Manager</p>
    <p>Application</p>
    <p>Block Layer File System</p>
    <p>read, clean, exists write-clean/dirty</p>
    <p>not-present errors</p>
    <p>SSD SSC</p>
    <p>Nameless-Write SSD</p>
    <p>nameless-write/read : physical address</p>
    <p>migration callbacks : relocated blocks</p>
    <p>Cheap and fast SSD</p>
    <p>Application</p>
    <p>Block Layer File System</p>
    <p>virtual-write/read nameless-write/read</p>
    <p>callbacks phy-address</p>
    <p>NW-SSD</p>
  </div>
  <div class="page">
    <p>Summary of Interface Changes</p>
    <p>New Interface Extensions</p>
    <p>SSC Nameless-Write SSD</p>
    <p>Forward Commands</p>
    <p>write-dirty  write-clean  exists  clean</p>
    <p>nameless-write  physical-read  virtual-write  virtual-read</p>
    <p>Return Values</p>
    <p>not-present read errors</p>
    <p>physical addresses</p>
    <p>Device Responses</p>
    <p>migration-callbacks</p>
  </div>
  <div class="page">
    <p>Talk Outline  Introduction</p>
    <p>Background</p>
    <p>Prototyping Experiences  Challenges</p>
    <p>Solutions</p>
    <p>Lessons</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Prototyping Challenges</p>
  </div>
  <div class="page">
    <p>Cache Manager</p>
    <p>File System or Application</p>
    <p>Device Interface</p>
    <p>SSD</p>
    <p>Assumption</p>
    <p>File system &amp; cache manager directly interface with device</p>
    <p>write-dirty/clean, evict, clean, exists</p>
    <p>Simulated Interface (Function Calls)</p>
    <p>Simulated Device</p>
    <p>nw-write, physical-read, virtual-write virtual-read</p>
  </div>
  <div class="page">
    <p>Cache Manager</p>
    <p>File System or Application</p>
    <p>Device Mapper</p>
    <p>I/O Scheduler</p>
    <p>SCSI Layer</p>
    <p>ATA Layer</p>
    <p>AHCI Driver</p>
    <p>Device Interface</p>
    <p>Low-level drivers</p>
    <p>SSD</p>
    <p>Assumption</p>
    <p>File system &amp; cache manager directly interface with device</p>
    <p>Reality</p>
    <p>Several intermediate OS, firmware &amp; hardware layers</p>
    <p>write-dirty/clean, evict, clean, exists</p>
    <p>Hardware Command Queue &amp; Firmware</p>
    <p>nw-write, physical-read, virtual-write virtual-read</p>
  </div>
  <div class="page">
    <p>Implementing Forward Commands</p>
    <p>Cache Manager</p>
    <p>File System or Application</p>
    <p>Device Mapper</p>
    <p>I/O Scheduler</p>
    <p>SCSI Layer</p>
    <p>ATA Layer</p>
    <p>AHCI Driver</p>
    <p>Device Interface</p>
    <p>Low-level drivers</p>
    <p>SSD</p>
    <p>Solutions</p>
    <p>Disallow merging &amp; re-ordering</p>
    <p>Add new command sub-types</p>
    <p>Mask command subtype in firmware for hardware queues</p>
    <p>write-dirty/clean, evict, clean, exists</p>
    <p>nw-write, physical-read, virtual-write virtual-read</p>
    <p>Hardware Command Queue &amp; Firmware</p>
    <p>scsi_cmd</p>
    <p>ata_qc</p>
    <p>ahci_fis</p>
    <p>&lt;lba,length+sub-type&gt;</p>
  </div>
  <div class="page">
    <p>Lesson 1 Designing New Forward Commands</p>
    <p>Research lesson: consider all layers of OS  I/O scheduler: merging and re-ordering</p>
    <p>Storage device drivers: adding sub-types</p>
    <p>Research lesson: consider complete SSD ecosystem  Firmware: encoding sub-types</p>
    <p>Hardware: accelerating new command queues</p>
  </div>
  <div class="page">
    <p>Cache Manager</p>
    <p>File System or Application</p>
    <p>Device Responses</p>
    <p>SSD</p>
    <p>Assumption</p>
    <p>Device can directly send new responses to cache manager and file system</p>
    <p>phy-addresses, migration callbacks</p>
    <p>Simulated Responses (Function Upcalls)</p>
    <p>Simulated Device</p>
    <p>not-present read errors</p>
  </div>
  <div class="page">
    <p>Cache Manager</p>
    <p>File System or Application</p>
    <p>Device Mapper</p>
    <p>I/O Scheduler</p>
    <p>SCSI Layer</p>
    <p>ATA Layer</p>
    <p>AHCI Driver</p>
    <p>Low-level drivers</p>
    <p>SSD</p>
    <p>Reality  New errors do not</p>
    <p>propagate up beyond device drivers</p>
    <p>Write responses can not encode physical addresses</p>
    <p>Migration callbacks do not fit standard protocols</p>
    <p>ATA Responses and Protocol</p>
    <p>phy-addresses, migration callbacks</p>
    <p>not-present read errors</p>
    <p>Device Responses</p>
  </div>
  <div class="page">
    <p>Reverse Path Errors</p>
    <p>Cache Manager</p>
    <p>File System or Application</p>
    <p>Device Mapper</p>
    <p>I/O Scheduler</p>
    <p>SCSI Layer</p>
    <p>ATA Layer</p>
    <p>AHCI Driver</p>
    <p>Read Response Data</p>
    <p>Low-level drivers</p>
    <p>SSD</p>
    <p>Solution</p>
    <p>not-present errors overloaded on read response data from device to OS</p>
    <p>phy-addresses, migration callbacks</p>
    <p>not-present read errors</p>
    <p>Magic #@!!@</p>
  </div>
  <div class="page">
    <p>Split-FTL Design  Solution  Kernel and Device FTLs  Forward commands</p>
    <p>transformed to raw flash commands from KernelFTL</p>
    <p>Physical addresses &amp; migration callbacks returned from kernelFTL to file system</p>
    <p>Garbage collection: copyback from/to host</p>
    <p>File System or Application</p>
    <p>Block Layer I/O Scheduler</p>
    <p>Kernel-FTL</p>
    <p>SCSI, ATA, AHCI</p>
    <p>Device Interface</p>
    <p>Raw SSD</p>
    <p>flash page read/write, block erase</p>
    <p>Device FTL</p>
    <p>phy-addresses, migration callbacks</p>
    <p>nameless-read/write virtual-read/write</p>
    <p>copyback</p>
  </div>
  <div class="page">
    <p>Lesson 2 Designing New Device Responses</p>
    <p>Research lesson: consider all OS layers  Storage device drivers: handling of frequent</p>
    <p>benign errors  Device &amp; file system: race conditions for</p>
    <p>callbacks</p>
    <p>Prototyping lesson: simplicity and correctness  Kernel-FTL: simpler block layer OS interface  Device-FTL: enforce correct erase-before</p>
    <p>overwrite 24</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Introduction</p>
    <p>Background</p>
    <p>Prototyping Experiences</p>
    <p>Evaluation</p>
    <p>Validate Performance Claims</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Systems for comparison  SSD: Facebook FlashCache using SSD with GC</p>
    <p>SSC: modified Facebook FlashCache using SSC with silent eviction</p>
    <p>Nameless-Write SSD interface performance</p>
    <p>Workload: filebench with read/write/fsync</p>
    <p>Workload Ratio of operations</p>
    <p>fileserver 1:2 reads/writes</p>
    <p>webserver 10:1 reads/writes</p>
    <p>varmail 1:1:1 reads/writes/fysnc</p>
  </div>
  <div class="page">
    <p>SSC Prototype Performance</p>
    <p>P e</p>
    <p>rc e</p>
    <p>n t</p>
    <p>p e</p>
    <p>rf o</p>
    <p>rm a</p>
    <p>n ce</p>
    <p>(r</p>
    <p>e la</p>
    <p>ti ve</p>
    <p>t o</p>
    <p>n o</p>
    <p>c a</p>
    <p>ch e</p>
    <p>)</p>
    <p>write intensive read intensive fsync intensive</p>
    <p>fileserver webserver varmail</p>
    <p>No Cache SSD SSC</p>
    <p>+52%</p>
    <p>+27%</p>
    <p>SSC Claim 168% better perf. than common</p>
    <p>hybrid FTL SSD</p>
    <p>SSC Prototype 52% better perf. than faster</p>
    <p>page-map FTL SSD</p>
  </div>
  <div class="page">
    <p>Nameless-Write SSD Performance</p>
    <p>Seq. Write Rand. Write Seq. Read Rand. Read</p>
    <p>SSD Nameless-Write SSD</p>
    <p>Merging optimization</p>
    <p>NW-SSD Prototype Perf. almost close to page-map FTL</p>
    <p>-60%</p>
    <p>NW-SSD Claim Perf. close to page-map FTL</p>
    <p>I/ O</p>
    <p>o p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s/</p>
    <p>s</p>
    <p>Device Memory Page-map FTL: 53 MB</p>
    <p>NW-SSD: 803 KB</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>OpenSSD is a valuable tool for evaluating new SSD designs</p>
    <p>Prototyping and research lessons applicable to other SSD designs</p>
    <p>First high-performance open-source FTL  http://www.cs.wisc.edu/~msaxena/new/ftl.html</p>
    <p>OpenSSD prototype on display at poster session today</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Getting Real: Lessons in Transitioning Research Simulations into Hardware Systems</p>
    <p>Mohit Saxena, Yiying Zhang Michael Swift, Andrea Arpaci-Dusseau, Remzi Arpaci-Dusseau</p>
  </div>
</Presentation>
