<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>make world Chris Smowton</p>
    <p>University of Cambridge</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>spell-rite</p>
    <p>/usr/share/real_words</p>
    <p>~/nonsense</p>
  </div>
  <div class="page">
    <p>spell-rite</p>
    <p>/usr/share/real_words</p>
    <p>~/nonsense</p>
  </div>
  <div class="page">
    <p>spell-rite</p>
    <p>/usr/share/real_words</p>
    <p>~/nonsense</p>
  </div>
  <div class="page">
    <p>/usr/share/real_words</p>
    <p>~/nonsense</p>
  </div>
  <div class="page">
    <p>$&gt; echo quexalcote &gt;&gt; /usr/share/real_words $&gt; make speaknspell</p>
    <p>/usr/share/real_words</p>
    <p>~/nonsense</p>
  </div>
  <div class="page">
    <p>int f(bool x, int y) { if(x) { return 42;</p>
    <p>} else { return y;</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>int f(bool x, int y) { if(x) { return 42;</p>
    <p>} else { return y;</p>
    <p>} }</p>
    <p>x == true</p>
  </div>
  <div class="page">
    <p>int f(int y) { if(true) { return 42;</p>
    <p>} else { return y;</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>int f(int y) { if(true) { return 42;</p>
    <p>} else { return y;</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>return 42;</p>
  </div>
  <div class="page">
    <p>void spell(char* text) { Machine* m = make_machine();</p>
    <p>apply_machine(m, text); }</p>
  </div>
  <div class="page">
    <p>void spell(char* text) { Machine* m = make_machine();</p>
    <p>apply_machine(m, text); } /usr/share/dict is aardvark, ...</p>
  </div>
  <div class="page">
    <p>void spell(char* text) { Machine* m = make_machine();</p>
    <p>apply_machine(m, text); }</p>
  </div>
  <div class="page">
    <p>void spell(char* text) { Machine* m =</p>
    <p>apply_machine(m, text); }</p>
  </div>
  <div class="page">
    <p>void apply_machine( ) {</p>
    <p>// There are no words!</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void apply_machine( ) {</p>
    <p>// No word contains $!</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int f() {</p>
    <p>int x = 5; x = pow(x, x); printf(x);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int f() {</p>
    <p>int x = 5; x = pow(x, x); printf(x);</p>
    <p>}</p>
    <p>x?</p>
  </div>
  <div class="page">
    <p>int f() {</p>
    <p>int x = 5; x = pow(x, x); printf(x);</p>
    <p>}</p>
    <p>x == 3125</p>
    <p>return x ** x;</p>
  </div>
  <div class="page">
    <p>void spell() {</p>
    <p>... read(dict_fd, buf); ...</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void spell() {</p>
    <p>... read(dict_fd, buf); ...</p>
    <p>}</p>
    <p>buf?</p>
  </div>
  <div class="page">
    <p>void spell() {</p>
    <p>... read(dict_fd, buf); ...</p>
    <p>}</p>
    <p>buf == quexalcote\n</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = open(~/stuff); while(!eof) {</p>
    <p>read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = &lt;~/stuff, pos=0&gt;; while(!eof) {</p>
    <p>read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = &lt;~/stuff, pos=0&gt;; if(eof) return count;</p>
    <p>read(fd, buf); if(strstr(buf, bar)) count++;</p>
    <p>while(!eof) { read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = &lt;~/stuff, pos=0&gt;; if(eof) return count;</p>
    <p>read(fd, buf); if(strstr(buf, bar)) count++;</p>
    <p>while(!eof) { read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
    <p>Not EOF yet!Not EOF yet!</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = &lt;~/stuff, pos=0&gt;; read(fd, buf); if(strstr(buf, bar)) count++;</p>
    <p>while(!eof) { read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
    <p>buf == aardvark\n</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = &lt;~/stuff, pos=0&gt;; read(fd, buf); if(strstr(aardvark, bar)) count++;</p>
    <p>while(!eof) { read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { fd = &lt;~/stuff, pos=10&gt;; while(!eof) {</p>
    <p>read(fd, buf); if(strstr(buf, bar))</p>
    <p>count++; } return count;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { return 42;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { count = 42; fd = &lt;~/stuff, pos=200&gt; ...</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>int wordcount() { count = 42; fd = open(~/stuff); lseek(fd, 200, SEEK_SET);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Adaptive optimisation  IPC and servers  Efficiency</p>
  </div>
  <div class="page">
    <p>Summary  Make programs better!  No manual work!</p>
  </div>
</Presentation>
