<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Turning down the LAMP Software Specialisation for the Cloud</p>
    <p>Anil Madhavapeddy</p>
  </div>
  <div class="page">
    <p>Motivation: Layers</p>
    <p>Hardware</p>
    <p>Processes</p>
    <p>OS Kernel</p>
    <p>Threads</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Motivation: Layers</p>
    <p>Hardware</p>
    <p>Processes</p>
    <p>OS Kernel</p>
    <p>Threads</p>
    <p>Application</p>
    <p>Language Runtime</p>
  </div>
  <div class="page">
    <p>Motivation: Layers</p>
    <p>Hardware</p>
    <p>Processes</p>
    <p>OS Kernel</p>
    <p>Threads</p>
    <p>Application</p>
    <p>Hypervisor</p>
    <p>Language Runtime</p>
  </div>
  <div class="page">
    <p>Motivation: Security</p>
    <p>Linux Kernel</p>
    <p>Mar 1994: 176,250 LoC May 2010: 13,320,934 LoC</p>
    <p>Most core Internet services still written in C / C++</p>
  </div>
  <div class="page">
    <p>Approach: Reconstruct</p>
    <p>Most layers are in place for compatibility</p>
    <p>Xen: to run operating systems</p>
    <p>Linux: to run POSIX applications</p>
    <p>Processes: to protect C applications</p>
    <p>If we start again, how much can things be improved?</p>
  </div>
  <div class="page">
    <p>Language</p>
    <p>Choose a new implementation language that:</p>
    <p>Has strong static typing</p>
    <p>This improves performance (more work at compile time)</p>
    <p>Reduces run-time bugs (memory safety)</p>
    <p>Has a simple run-time system</p>
    <p>Essential for a low-level systems language</p>
    <p>Is extensible, e.g. for new methods of parallelization</p>
  </div>
  <div class="page">
    <p>Language: Objective Caml</p>
    <p>Developed since 1996 in INRIA, France.</p>
    <p>Based on the ML type-system: type inference, static typing</p>
    <p>Proven in industry:</p>
    <p>Citrix XenServer (virtualization)</p>
    <p>Jane Street Capital (finance)</p>
    <p>Skydeck, MLState (web)</p>
    <p>Extensible type-system and grammar (FlowCaml, JoCaml, HashCaml)</p>
  </div>
  <div class="page">
    <p>DNS: Performance of BIND (C) vs Deens (ML)</p>
  </div>
  <div class="page">
    <p>DNS: with functional memoisation</p>
  </div>
  <div class="page">
    <p>MirageOS: Specialised application kernels</p>
  </div>
  <div class="page">
    <p>MirageOS: memory layout, concurrency</p>
    <p>Memory</p>
    <p>64-bit PV layout  Single process  Zero-copy I/O to Xen  4MB super page mappings</p>
    <p>Concurrency</p>
    <p>Cooperative threading and events Fast inter-domain communication Works across cores and hosts</p>
  </div>
  <div class="page">
    <p>Mirage: storage</p>
    <p>Language-integrated storage:</p>
    <p>type t = { name: string; age: int }</p>
    <p>let me = { name = Anil; age=31 }</p>
    <p>let save () = t_save db me</p>
    <p>let get () = t_get ~age:(`Gt 30) db</p>
    <p>Advantage: SQLite is fast and simple</p>
    <p>Downside: interoperability. Object SCSI (Panassus) ?</p>
  </div>
  <div class="page">
    <p>Mirage: concurrency</p>
    <p>Language-integrated concurrency:</p>
    <p>let rec loop () =</p>
    <p>printf hello!\n;</p>
    <p>lwt s = sleep 2.5 in</p>
    <p>loop ()</p>
    <p># val loop : unit -&gt; Lwt.t unit = &lt;fun&gt;</p>
    <p>Advantage: Blocking functions have a special type Lwt.t</p>
    <p>Downside: Extra function call overhead</p>
  </div>
  <div class="page">
    <p>MirageOS: SQL performance vs PV Linux</p>
  </div>
  <div class="page">
    <p>MirageOS: memory performance vs PV Linux</p>
  </div>
  <div class="page">
    <p>The Future: Multi-scale Operating System</p>
    <p>We produce highly optimized kernels from a portable functional language code base which can adapt to the local hardware.</p>
    <p>Same source code runs efficiently on:</p>
    <p>mobile phone environment (e.g. using Cadmium or ARM)</p>
    <p>desktop OS for development (e.g. using Eclipse IDE)</p>
    <p>cloud for cheap scalability (using Xen kernel backend)</p>
    <p>and soon GPGPU? FPGA? Intel SCC?</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Dust Clouds</p>
    <p>Thousands of tiny virtual machines (~100k each)</p>
    <p>Same price as a few conventional large virtual machines</p>
    <p>Sprinkle them world-wide to run Tor anonymity nodes</p>
    <p>Self-scaling Services</p>
    <p>As load spikes, request more resources dynamically from cloud</p>
    <p>Detect resource imbalance and migrate globally on demand</p>
    <p>All requires low-latency, high-reliability cloud APIs</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Static address space layouts permit multiple language runtimes to run simultaneously in one VM container.</p>
    <p>Alternative to Facebook compiling PHP to C++ using HipHop</p>
    <p>Partial evaluation has the potential save huge amounts of energy</p>
    <p>Already used in systems, e.g. libc/arch/x86_64</p>
    <p>Thinking multi-scale instead of multi-core is important for OS and language design:</p>
    <p>Newer multi-core look like multiple hosts in many ways (failure, coherency, communication latency).</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Open-source:</p>
    <p>http://github.com/avsm/melange http://github.com/avsm/mirage http://github.com/mirage</p>
    <p>Contact:</p>
    <p>avsm2@cl.cam.ac.uk</p>
    <p>avsm</p>
  </div>
</Presentation>
