<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Decentralized Blockchain with High Throughput and Fast Confirmation</p>
    <p>Chenxing Li, Peilun Li, Dong Zhou, Zhe Yang, Ming Wu, Guang Yang, Wei Xu, Fan Long, Andrew Chi-Chih Yao</p>
    <p>Tsinghua University Conflux Foundation University of Toronto</p>
    <p>The first two authors contributed equally.</p>
  </div>
  <div class="page">
    <p>An Ideal Blockchain System</p>
    <p>Robustness  Safety against double spending attacks  Liveness against denial of service attacks</p>
    <p>Performance  High throughput  Fast confirmation</p>
    <p>Decentralization  Scale to large amount of participants  Permissionless to join and leave</p>
  </div>
  <div class="page">
    <p>Blockchain Performance Problem</p>
    <p>Transactions per Second: ~7</p>
    <p>~30 ~200 ~3000</p>
    <p>Undesirable user experience, long processing delay, and skyrocketing transaction fees!</p>
    <p>Confirmation Latency:</p>
  </div>
  <div class="page">
    <p>Bitcoin and Ethereum Background</p>
    <p>P2P gossip network</p>
    <p>Blue: 2 Red: 1</p>
    <p>Blue: 2 Red: 1</p>
    <p>Blue: 2 Red: 1</p>
    <p>Blue: 2 Red: 1</p>
    <p>Blue: 2 Red: 1</p>
    <p>Blue: 2 Red: 1</p>
    <p>Blue: 2 Red: 1 Blue: 2</p>
    <p>Red: 1</p>
    <p>The Blockchain: A record of transactions</p>
    <p>Secured by Proof-of-Work Sybil Attack</p>
  </div>
  <div class="page">
    <p>Standard Nakamoto Consensus</p>
    <p>Longest-chain: all participants agree on the longest chain as the valid transaction history  Security assumption is &gt;50% computation</p>
    <p>power owned by honest nodes.</p>
    <p>Slow/small block generation  Bitcoin: 1MB block per 10 minutes  Ethereum: ~100KB block per 15 seconds</p>
  </div>
  <div class="page">
    <p>What if we run Nakamoto Consensus with large</p>
    <p>blocks or fast generation?</p>
  </div>
  <div class="page">
    <p>Mining are concurrent and block broadcast has delay  Larger block size/faster block-gen rate -&gt; more forks</p>
    <p>Forks waste network/processing resources  Downgrade safety</p>
    <p>Block1 Block0 Block2 Blockn-1 Blockn</p>
    <p>fork</p>
    <p>fork fork</p>
    <p>fork</p>
    <p>fork</p>
    <p>fork</p>
    <p>Agreed chain</p>
  </div>
  <div class="page">
    <p>Longest Chain is Not Safe with Fast Generation</p>
    <p>Block1 Block0 Block2 Blockn-1 Blockn</p>
    <p>fork</p>
    <p>fork fork</p>
    <p>fork</p>
    <p>fork</p>
    <p>fork</p>
    <p>Suppose the Longest Chain has 10% of blocks</p>
    <p>A1A0 A2 Am-3 Am-2 Am-1 Am</p>
    <p>Attacker with more than 10% computation power will be able to revert the longest chain</p>
  </div>
  <div class="page">
    <p>GHOST Consensus</p>
    <p>Proposed by Sompolinsky et. al., ICFCDS15, adopted partially by Ethereum</p>
    <p>Heaviest subtree rule</p>
    <p>Start from the Genesis block</p>
    <p>Iteratively advance to the child block with the largest subtree</p>
  </div>
  <div class="page">
    <p>Genesis A</p>
    <p>B</p>
    <p>G</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>GHOST Rule:</p>
    <p>Subtree A has 6 blocks</p>
    <p>Subtree B has 5 blocks</p>
    <p>New Block</p>
    <p>All the blocks including forked blocks contribute to the chain selection</p>
  </div>
  <div class="page">
    <p>GHOST is Weak to Liveness Attacks</p>
    <p>When the block generation is much faster than d, an attacker with little computation power can stall the consensus forever!</p>
    <p>G</p>
    <p>A</p>
    <p>Honest Group A</p>
    <p>Honest Group B</p>
    <p>Maximum delay of d</p>
    <p>AttackerA AttackerA</p>
    <p>AttackerB AttackerB</p>
    <p>A A A A A A</p>
    <p>B B B B B B B</p>
  </div>
  <div class="page">
    <p>One Fix: Structured GHOST Approach</p>
    <p>Only 1/h of blocks have weights for chain selection  Remaining blocks only contribute transactions</p>
    <p>Secure against liveness attacks if h is large enough  Because concurrent generation of weighted blocks is rare</p>
    <p>Cons: Slow confirmation!  Need to wait for enough weighted blocks being generated to confirm</p>
    <p>G</p>
    <p>A A A A A A B</p>
    <p>B B B B B B</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>Greedy Heaviest Adaptive SubTree (GHAST)</p>
    <p>Assign different weights to generated blocks  Select pivot chain using heaviest subtree rule and decide total order</p>
    <p>of all blocks based on the pivot chain.  In normal scenarios, assign equal weights to all blocks</p>
    <p>Operate like GHOST  Achieve near optimal throughput and confirmation latency</p>
    <p>When attack happens, assign high weights to a small subset of blocks  Operate like structured GHOST  Slow confirmation to ensure consensus progress</p>
  </div>
  <div class="page">
    <p>How to make honest participants automatically switch between</p>
    <p>two scenarios?</p>
  </div>
  <div class="page">
    <p>Genesis Tx0 Tx1</p>
    <p>A Tx2</p>
    <p>B Tx3 Tx4</p>
    <p>G Tx4</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>Parent edges Ref edges</p>
    <p>Conflux operates with a Tree-Graph structure.</p>
    <p>Each block has one parent edge.</p>
  </div>
  <div class="page">
    <p>Genesis Tx0 Tx1</p>
    <p>A Tx2</p>
    <p>B Tx3 Tx4</p>
    <p>G Tx4</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>Parent edges Ref edges</p>
    <p>Each block may have multiple reference edges</p>
    <p>Reference edges simply denote happens-before relationships</p>
    <p>E admits that D is generated before E</p>
  </div>
  <div class="page">
    <p>Genesis Tx0 Tx1</p>
    <p>A Tx2</p>
    <p>B Tx3 Tx4</p>
    <p>G Tx4</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>Parent edges Ref edges</p>
    <p>New Block</p>
    <p>When generating a new block:</p>
  </div>
  <div class="page">
    <p>Genesis Tx0 Tx1</p>
    <p>A Tx2</p>
    <p>B Tx3 Tx4</p>
    <p>G Tx4</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>Parent edges Ref edges</p>
    <p>New Block</p>
    <p>Edges in the Tree-Graph capture the history blockchain state for each generated block</p>
    <p>The past-subgraph of a block  All blocks that the block generator saw</p>
  </div>
  <div class="page">
    <p>Determine Weights from Past Sub-graphs</p>
    <p>All honest participants will agree on the weights  Even with the presence of attackers!</p>
    <p>Weight of the generated</p>
    <p>block</p>
    <p>Is the past sub-graph stable enough?</p>
    <p>Yes: Assign weight 1 No: Assign weight h for 1/h blocks, 0 for other blocks</p>
  </div>
  <div class="page">
    <p>Determine Sub-graph Stability  Rationale: For any pivot chain block A that is generated long enough,</p>
    <p>one of its child A must become dominant  Most future blocks after A should accumulate under the subtree of A</p>
    <p>A Subtree of A</p>
    <p>A</p>
    <p>All blocks generated after A</p>
  </div>
  <div class="page">
    <p>Trusted Block Generation Time: TimerChain</p>
    <p>TimerChain: a blockchain embedded in TreeGraph with longest-chain rule and low generation rate.  A small subset of blocks (Timer Blocks) have weights, like structured GHOST</p>
    <p>Block generation time: the height of the latest Timer Block in its past.</p>
    <p>Past of A</p>
    <p>G A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>GenerationTime(A) = TimerChainHeight(C)</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Conflux Ordering Algorithm</p>
    <p>Key Idea: deterministically define a block total order of a Tree-Graph based on a chain</p>
    <p>First use GHAST to agree on a pivot chain of blocks</p>
    <p>Then extend the agreed pivot chain into a total order of all blocks in the Tree-Graph</p>
  </div>
  <div class="page">
    <p>Genesis A</p>
    <p>B</p>
    <p>G</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>Parent edges Ref edges</p>
    <p>Epoch of Genesis Epoch of A Epoch of C Epoch of E Epoch of H</p>
    <p>D belongs to the epoch of E, because D happens before E but does not happen before C</p>
  </div>
  <div class="page">
    <p>Genesis A</p>
    <p>B</p>
    <p>G</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>H</p>
    <p>J I K</p>
    <p>Parent edges Ref edges</p>
    <p>Epoch of Genesis Epoch of A Epoch of C Epoch of E Epoch of H</p>
    <p>Block Total Order: Genesis, A, B, C, D, F, E, G, J, I, H, K</p>
  </div>
  <div class="page">
    <p>Implementation &amp; Optimizations</p>
    <p>Implemented in Rust with a modified EVM to handle smart contract transactions.  Several key optimizations:  Link-cut tree and lazy validation</p>
    <p>Efficiently maintain weights in Tree-Graph</p>
    <p>Deferred execution  Avoid redundant execution rollbacks</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Experimental Environment</p>
    <p>Run up to 12k Conflux full nodes on Amazon EC2 m5.2xlarge VMs  Limit the bandwidth of each full node to 20Mbps  Simulate network latency between full nodes</p>
    <p>Measure the achieved throughput and confirmation latency  Consider a block confirmed if its confidence is the same as waiting for 6</p>
    <p>Bitcoin blocks</p>
  </div>
  <div class="page">
    <p>Throughput, Latency, and Scalability</p>
    <p>300K block size and 4 block per second.  Conflux achieves</p>
    <p>throughput.  Confirm transactions</p>
    <p>on avg. 51.5 seconds.  Scales to 12k full nodes</p>
    <p>Run up to 15 full nodes per EC2 VM and disabled transaction executions</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Conflux achieves both high throughput and fast confirmation.</p>
    <p>Conflux is safe against both double spending and liveness attacks.</p>
    <p>Conflux achieves this with a novel consensus protocol GHAST, which assigns different weights to blocks adaptively and automatically.</p>
    <p>With 12K nodes, Conflux can reach 9.6Mbps throughput and confirm blocks within one minute.</p>
  </div>
  <div class="page">
    <p>Thanks! Presenter Email: lpl15@mails.tsinghua.edu.cn</p>
    <p>Conflux Website: https://www.conflux-chain.org/</p>
  </div>
</Presentation>
