<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Simulating the Power Consumption of Large-Scale Sensor Network Applications</p>
    <p>Victor Shnayder, Mark Hempstead, Bor-rong Chen, Geoff Werner Allen, and Matt Welsh</p>
    <p>Harvard University</p>
    <p>shnayder@eecs.harvard.edu</p>
    <p>http://www.eecs.harvard.edu/~shnayder/ptossim/</p>
  </div>
  <div class="page">
    <p>Power Management is Important</p>
    <p>Need to simulate energy usage before deployment</p>
    <p>Sensors often deployed in hard to reach locations</p>
    <p>Replacing batteries is difficult and expensive</p>
  </div>
  <div class="page">
    <p>Our Contribution: PowerTOSSIM</p>
    <p>Simulates the energy consumption of each node in a sensor network</p>
    <p>Easy to use  Scalable</p>
    <p>Accurate  Integrated with TinyOS</p>
    <p>Measured power model of Mica2 mote</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background  Approaches to power simulation</p>
    <p>TinyOS, TOSSIM architecture Measurements</p>
    <p>Mica2 energy model Implementation Evaluation</p>
    <p>Does it work? (yes)</p>
  </div>
  <div class="page">
    <p>Approaches to Power Simulation</p>
    <p>Count high level events  Number of radio messages most common</p>
    <p>Pro: Very fast, easy, simple  Con: Can be very inaccurate</p>
    <p>Simulate at the bit/cycle level  Keep track of exactly what's happening in system  Pro: Extremely accurate  Con: Extremely slow-impractical for large scale simulation</p>
    <p>We want to be somewhere in between  Get best of both worlds</p>
  </div>
  <div class="page">
    <p>TOSSIM Architecture</p>
    <p>TOS System</p>
    <p>TOSSIM H/W Implementation</p>
    <p>Application  Component based  TOSSIM provides PC</p>
    <p>versions of hardware components</p>
    <p>Event driven runtime  Compile to a native PC</p>
    <p>binary</p>
    <p>Good structure for monitoring individual components</p>
    <p>CRC</p>
    <p>AMPHOTOTEMP</p>
    <p>LED PHOTOTEMP</p>
    <p>CC1000ADC CLOCK</p>
    <p>APPLICATION COMPONENTS</p>
  </div>
  <div class="page">
    <p>PowerTOSSIM Architecture</p>
    <p>PowerState</p>
    <p>CRC</p>
    <p>AMPHOTOTEMP</p>
    <p>LED PHOTOTEMP</p>
    <p>CC1000ADC CLOCK</p>
    <p>TOS System</p>
    <p>TOSSIM H/W Implementatio\n</p>
    <p>Application</p>
    <p>Power State Tracking</p>
    <p>Power State Transition Messages</p>
    <p>Post Processor</p>
    <p>Power Model</p>
    <p>TinyViz Plugin</p>
    <p>APPLICATION COMPONENTS  Add module for tracking power state</p>
    <p>Minor modifications to other modules to report transitions</p>
    <p>Decouple trace gathering from processing</p>
  </div>
  <div class="page">
    <p>Power Model</p>
    <p>Many device components  CPU</p>
    <p>Radio  Sensor devices</p>
    <p>LEDs  ADC  EEPROM</p>
    <p>All can be turned on/off independently</p>
    <p>Need to derive an accurate model of power consumption</p>
  </div>
  <div class="page">
    <p>Measurements</p>
    <p>Agilent Infiniium 54832B scope Digital multimeter for very</p>
    <p>small currents Designed microbenchmarks to</p>
    <p>isolate each component's energy use</p>
    <p>Mica2 mote</p>
  </div>
  <div class="page">
    <p>Microbenchmark Example</p>
    <p>Radio transmission at max power</p>
  </div>
  <div class="page">
    <p>Mica2 Power Model Component Current Component Current</p>
    <p>(mA) (mA)</p>
    <p>CPU Radio Active 8.00 Rx 7.00</p>
    <p>Idle 3.20 Tx (dBm)</p>
    <p>ADC NR 1.00 -20 3.70 Power-down 0.10 -19 5.20</p>
    <p>Power-save 0.11 -15 5.40 Standby 0.22 -8 6.50</p>
    <p>Extended Standby 0.22 -5 7.10 Internal Oscillator 0.93 0 8.50</p>
    <p>Sensor board 0.70 +4 11.60 LEDs 2.20 +6 13.80</p>
    <p>EEPROM +8 17.40 Read 6.20 +10 21.50</p>
    <p>Write 18.40</p>
  </div>
  <div class="page">
    <p>Visualization Plugin</p>
  </div>
  <div class="page">
    <p>Estimating CPU energy usage</p>
    <p>TOSSIM compiles application code into a native PC binary Therefore, difficult to determine how many CPU cycles used</p>
    <p>on the mote Could simulate at the AVR instruction level</p>
    <p>Very slow Instead, record runtime basic block execution counts, map</p>
    <p>basic blocks to cycles used on AVR.  This has low overhead</p>
  </div>
  <div class="page">
    <p>Cycle count estimation</p>
    <p>if(x&gt;0) { t = x+42; v = t / pi;</p>
    <p>} else { v = -1; }</p>
    <p>bb[mote][1]++; if(x&gt;0) {</p>
    <p>bb[mote][2]++; t = x+42; v = t / pi;</p>
    <p>} else { bb[mote][3]++;</p>
    <p>v = -1; }</p>
    <p>App Code Transformed Code</p>
    <p>Insert per-mote counters into each basic block</p>
    <p>CIL</p>
  </div>
  <div class="page">
    <p>Cycle count estimation</p>
    <p>if(x&gt;0) { t = x+42; v = t / pi;</p>
    <p>} else { v = -1; }</p>
    <p>if(x&gt;0) { t = x+42; v = t / pi;</p>
    <p>} else { v = -1; }</p>
    <p>Basic Block Cycles 1 2 2 21 3 1</p>
    <p>App Code</p>
    <p>Mote Binary</p>
    <p>Analyze Mica2 assembly code:  Compute number of CPU</p>
    <p>cycles executed for each basic block</p>
    <p>Compile</p>
    <p>Disassemble and analyze</p>
  </div>
  <div class="page">
    <p>Cycle count estimation(2) Basic Block Cycles</p>
    <p>Mote BB 1 BB 2 BB 3 Cycles 1 10 8 2 2 15 11 4 3 12 3 9</p>
    <p>This is fast Potential inaccuracies:</p>
    <p>Need accurate mapping from C basic blocks to binary  Some low level components have no mapping</p>
    <p>In many cases, active CPU cycles very small  Neglegible effect on total power</p>
  </div>
  <div class="page">
    <p>Efficiency</p>
    <p>OscilloscopeRF, 300 simulated seconds</p>
    <p>S im</p>
    <p>u la</p>
    <p>t i o n</p>
    <p>T i m</p>
    <p>e (</p>
    <p>s e co</p>
    <p>n d</p>
    <p>s)</p>
    <p>Number of simulated motes</p>
  </div>
  <div class="page">
    <p>Accuracy Measured Simulated</p>
    <p>CntToLedsAndRfm</p>
    <p>Total</p>
    <p>Radio</p>
    <p>CPU</p>
    <p>LEDs</p>
  </div>
  <div class="page">
    <p>Accuracy Measured Simulated</p>
    <p>Low power beacon program</p>
  </div>
  <div class="page">
    <p>Other benchmarks</p>
    <p>Beacon</p>
    <p>Blink</p>
    <p>CntToLeds</p>
    <p>CntTo LedsAnd Rfm</p>
    <p>Oscilloscope</p>
    <p>OscilloscopeRF</p>
    <p>Sense LightToLog</p>
    <p>TinyDB (idle)</p>
    <p>TinyDB (select light)</p>
    <p>Surge</p>
    <p>Simulated</p>
    <p>Measured</p>
    <p>PowerTOSSIM is accurate: less than 15% error for all tests</p>
    <p>Energy (mJ)</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Add battery model  Shouldn't require simulator modifications</p>
    <p>Extend to new node platforms  CC2420 radio  Different sensors</p>
    <p>Provide energy usage information at runtime  Could help nodes make better resource management</p>
    <p>decisions</p>
  </div>
  <div class="page">
    <p>Simulating the Power Consumption of Large-Scale Sensor Network Applications</p>
    <p>Victor Shnayder, Mark Hempstead, Bor-rong Chen, Geoff Werner Allen, and Matt Welsh</p>
    <p>Harvard University</p>
    <p>shnayder@eecs.harvard.edu</p>
    <p>http://www.eecs.harvard.edu/~shnayder/ptossim/</p>
    <p>PowerTOSSIM is integrated into TOSSIM in the TinyOS CVS tree, and will be part of the 1.1.9 release.</p>
  </div>
</Presentation>
