<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Integrating Adaptation Mechanisms Using Control Theory Centric Architecture Models: A Case Study</p>
    <p>ICAC14, Philadelphia, 18.6.2014</p>
    <p>Philippe Collet Romain Rouvoy University Lille 1 / LIFL</p>
    <p>INRIA Lille France</p>
    <p>Universit Nice Sophia Antipolis I3S - CNRS UMR 7271</p>
    <p>France</p>
    <p>University Lille 1 / LIFL INRIA Lille</p>
    <p>France</p>
    <p>Filip Kikava</p>
  </div>
  <div class="page">
    <p>SELF-ADAPTIVE SOFTWARE SYSTEMS, FEEDBACK CONTROL</p>
    <p>Increasing complexity of software systems, uncertain operating environment  A shift towards self-adaptive software systems  systems adjusting themselves in accordance with higher-level goals</p>
    <p>Feedback control loops (FCLs) provide a generic mechanism for engineering self-adaptive software systems</p>
    <p>Monitoring Reconfiguration</p>
    <p>Decision Making</p>
    <p>sensors effectors</p>
    <p>Target System</p>
    <p>events actions</p>
    <p>measures decisions</p>
    <p>system outputs (response time, utilization, throughput)</p>
    <p>system control inputs (queue size, scheduling policy, concurrency level)</p>
    <p>achieve externally specified goals</p>
  </div>
  <div class="page">
    <p>Engineering self-adaptive software systems is challenging  Example: web server self-optimization (MC based on MEM)</p>
    <p>CHALLENGES</p>
    <p>FCL control challenges</p>
    <p>control engineers</p>
    <p>FCL integration challenges</p>
    <p>software engineers</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>(a) SISO data, (b) SISO data, (c) MIMO data KA varying MC varying</p>
    <p>Figure 7: Experimental input-output data used for system ID.</p>
    <p>M EMk+1 = 0.485  M EMk + 3.63  104  M Ck (3)</p>
    <p>As mentioned earlier, when performing two separate SISO identifications, it is assumed that the two tuning parameters do not interact. However, from Figure 7(b), we can see that the MC sine wave has a significant effect on CPU. Hence, our assumption is invalid. This motivates the need for MIMO techniques in system identification.</p>
    <p>Identifying a MIMO model requires simultaneously varying both KA and MC in order to capture interactions between the parameters. As before, discrete sine waves are used. However, their frequencies shouldbe relativelyprimeso thatgoodcoverageof the input space is obtained (as in Figure 6). Figure7(c)plots the results of theMIMOidentificationexperiments. Using thisdata,</p>
    <p>a first-order linear MIMO model is constructed, as shown in Equation 4. Note that A and B are matrices instead of scalars. The matrix approach provides a way to model the combined effect of tuning parameters on utilizations. Specifically, all elements of the second matrix (B) are non-zero (although the effect of KA on MEM is much less than its effect on CPU).</p>
    <p>CP Uk+1 M EMk+1</p>
    <p>=</p>
    <p>0.537 0.109</p>
    <p>0.0256 0.630</p>
    <p>CP Uk M EMk</p>
    <p>+</p>
    <p>84.5 4.39 2.48 2.81</p>
    <p>104</p>
    <p>KAk M Ck</p>
    <p>(4)</p>
    <p>of a metric at time k + 1 is predicted based on measured values at time k. The second is multi-step prediction in which the value at k + 1 is predicted based on the prediction at time k. Throughout, we focus on CPU since the low variability of MEM makes it relatively easy to predict. Figure 8 plots predicted versus measured values for one-step predictions of CPU. A</p>
    <p>perfect model would have all observations (the diamonds) on the line of unit slope. Part (a) plots the SISO results using the SISO data. The fit is quite good; R2 = 0.934. Part (b) does the same for the MIMO model with the MIMO data. The fit here is also quite good, R2 = 0.915, although not as good as the SISO model.</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>(a) SISO data, (b) SISO data, (c) MIMO data KA varying MC varying</p>
    <p>Figure 7: Experimental input-output data used for system ID.</p>
    <p>M EMk+1 = 0.485  M EMk + 3.63  104  M Ck (3)</p>
    <p>As mentioned earlier, when performing two separate SISO identifications, it is assumed that the two tuning parameters do not interact. However, from Figure 7(b), we can see that the MC sine wave has a significant effect on CPU. Hence, our assumption is invalid. This motivates the need for MIMO techniques in system identification.</p>
    <p>Identifying a MIMO model requires simultaneously varying both KA and MC in order to capture interactions between the parameters. As before, discrete sine waves are used. However, their frequencies shouldbe relativelyprimeso thatgoodcoverageof the input space is obtained (as in Figure 6). Figure7(c)plots the results of theMIMOidentificationexperiments. Using thisdata,</p>
    <p>a first-order linear MIMO model is constructed, as shown in Equation 4. Note that A and B are matrices instead of scalars. The matrix approach provides a way to model the combined effect of tuning parameters on utilizations. Specifically, all elements of the second matrix (B) are non-zero (although the effect of KA on MEM is much less than its effect on CPU).</p>
    <p>CP Uk+1 M EMk+1</p>
    <p>=</p>
    <p>0.537 0.109</p>
    <p>0.0256 0.630</p>
    <p>CP Uk M EMk</p>
    <p>+</p>
    <p>84.5 4.39 2.48 2.81</p>
    <p>104</p>
    <p>KAk M Ck</p>
    <p>(4)</p>
    <p>of a metric at time k + 1 is predicted based on measured values at time k. The second is multi-step prediction in which the value at k + 1 is predicted based on the prediction at time k. Throughout, we focus on CPU since the low variability of MEM makes it relatively easy to predict. Figure 8 plots predicted versus measured values for one-step predictions of CPU. A</p>
    <p>perfect model would have all observations (the diamonds) on the line of unit slope. Part (a) plots the SISO results using the SISO data. The fit is quite good; R2 = 0.934. Part (b) does the same for the MIMO model with the MIMO data. The fit here is also quite good, R2 = 0.915, although not as good as the SISO model.</p>
    <p>Controller Apache</p>
    <p>Web Server</p>
    <p>MEMMCMEM</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>C P</p>
    <p>U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>P U</p>
    <p>M E</p>
    <p>M</p>
    <p>K A</p>
    <p>Time (s)</p>
    <p>M C</p>
    <p>(a) SISO data, (b) SISO data, (c) MIMO data KA varying MC varying</p>
    <p>Figure 7: Experimental input-output data used for system ID.</p>
    <p>M EMk+1 = 0.485  M EMk + 3.63  104  M Ck (3)</p>
    <p>As mentioned earlier, when performing two separate SISO identifications, it is assumed that the two tuning parameters do not interact. However, from Figure 7(b), we can see that the MC sine wave has a significant effect on CPU. Hence, our assumption is invalid. This motivates the need for MIMO techniques in system identification.</p>
    <p>Identifying a MIMO model requires simultaneously varying both KA and MC in order to capture interactions between the parameters. As before, discrete sine waves are used. However, their frequencies shouldbe relativelyprimeso thatgoodcoverageof the input space is obtained (as in Figure 6). Figure7(c)plots the results of theMIMOidentificationexperiments. Using thisdata,</p>
    <p>a first-order linear MIMO model is constructed, as shown in Equation 4. Note that A and B are matrices instead of scalars. The matrix approach provides a way to model the combined effect of tuning parameters on utilizations. Specifically, all elements of the second matrix (B) are non-zero (although the effect of KA on MEM is much less than its effect on CPU).</p>
    <p>CP Uk+1 M EMk+1</p>
    <p>=</p>
    <p>0.537 0.109</p>
    <p>0.0256 0.630</p>
    <p>CP Uk M EMk</p>
    <p>+</p>
    <p>84.5 4.39 2.48 2.81</p>
    <p>104</p>
    <p>KAk M Ck</p>
    <p>(4)</p>
    <p>of a metric at time k + 1 is predicted based on measured values at time k. The second is multi-step prediction in which the value at k + 1 is predicted based on the prediction at time k. Throughout, we focus on CPU since the low variability of MEM makes it relatively easy to predict. Figure 8 plots predicted versus measured values for one-step predictions of CPU. A</p>
    <p>perfect model would have all observations (the diamonds) on the line of unit slope. Part (a) plots the SISO results using the SISO data. The fit is quite good; R2 = 0.934. Part (b) does the same for the MIMO model with the MIMO data. The fit here is also quite good, R2 = 0.915, although not as good as the SISO model.</p>
    <p>Referring to the SISO models, note that the pole for the CPU model in Equation 2 is 0.595, and the pole for the MEM model in Equation 3 is 0.485. Thefirstproperty that canbedetermined fromthepole is stability. If |a| &gt; 1, then the</p>
    <p>system is unstable; yk grows without bound (the aj terms will explode as k approaches infinity). When |a| &lt; 1, the system is stable and the aj terms will remain bounded regardless of k. As noted above, the model can predict steady-state values of the output y for constant inputs u by finding fixed-points of Equation 5. Another dynamic property that can be determined by the pole is speed of response.</p>
    <p>As |a| approaches zero, the speed of response to changes in the input becomes faster. If a = 0, then yk+1 = b  uk. Hence, it takes one time step for the output, y, to converge after changes in the input. As |a| approaches one, it takes more time steps for the output to converge to a steady-state after changes in the input. This can be seen in Figure 9 in which aCP U = 0.595 &gt; 0.485 = aM EM , and MEM settles faster than CPU. The final property that can be determined by the pole is whether the system will</p>
    <p>respond in an oscillatory manner to changes in the input. If a &lt; 0, then the behavior of the system will be oscillatory due to the aj terms in Equation 5; when j is even, the term is positive, and when j is odd, the term is negative. In the vector case, the scalar parameters a and b in Equation 5 are replaced by matri</p>
    <p>ces, A and B. The solution to this vector time-series equation is similar to Equation 5. In this case, the response of the system is governed by the eigenvalues of A, which are the poles in the vector case. Note that in the vector case, the poles can be complex (with both real and imaginaryparts). Thepresenceofan imaginarypart cancauseoscillations even if the real part is positive. With multiple poles, the slowest or dominant poles (i.e., those whose magnitude is closest to one) determine settling times. The poles of the MIMO model of Equation 4 are 0.513 and 0.654, indicating that this model predicts a slower response than that predicted by the SISO model.</p>
    <p>plies it to Apache for the architectures shown in Figure 3. Section 4.1 introduces the methodology. Section 4.2 applies this methodology to designing SISO controllers, and Section 4.3 to MIMO design with LQR. Section 4.4 discusses controller robustness to changes in workloads.</p>
    <p>Because of its robustness, PI control is widely used in mechanical engineering and process control. PI control operates according to the following control law</p>
    <p>uk = KP ek + KI k1X</p>
    <p>j=1</p>
    <p>ej , (6)</p>
    <p>where uk is a tuning parameter, and ek = rk  yk is the control error. For the Apache system, rk is the desired policy (CPU and/or MEM), and yk is the measured metric (CPU and/or MEM). For SISO control, the policies (CPU, MEM) are considered individually; for MIMO control they are considered together. PI control has two parameters: KP , the proportional gain, and KI, the integral gain.</p>
    <p>As a rule of thumb, the proportional term is used to increase the speed of response and</p>
    <p>[Hellerstein et al., 2004]</p>
    <p>Design decision mechanism  data collection  model construction and evaluation  controller design</p>
    <p>API</p>
    <p>LOGS</p>
    <p>CONFIG FILES</p>
    <p>COMMANDS AOP</p>
    <p>PROFILER</p>
    <p>Prepare experimental environment  identify system outputs (sensors)  identify system control inputs (effectors)</p>
    <p>// Type definitions --------------------------------------typedef struct { // Positional ISA PID float K,Ti,Td,N,b,c,CSmin,CSmax,Ts; // parameters float Io,Do; // state vars float CSo; // for locks float SPo,PVo; // input mem float SP,PV,TR,CS; // I/O vars char TS,Fp,Fm,HI,LO; } ISAPIDpos_DATA; typedef struct { // Incremental ISA PID float K,Ti,Td,N,b,c,CSmin,CSmax,Ts; // parameters float CSo,Do; // state vars float SPo,PVo; // input mem float SP,PV,TR,CS; // I/O vars char TS,Fp,Fm,HI,LO; } ISAPIDinc_DATA; typedef struct { // 1st order t.f. w/o zeroes float mu,T,Ts; // parameters float xo; // state vars float u,y; // I/O vars } TF1P0Z_DATA; // Dynamic systems (init and run) ------------------------void isapidpos_coldinit(ISAPIDpos_DATA *pd, float K, float Ti, float Td, float N, float b, float c, float CSmin, float CSmax, float Ts, char TS, char Fp, char Fm) { pd-&amp;gt;K = K; pd-&amp;gt;Ti = Ti; pd-&amp;gt;Td = Td; pd-&amp;gt;N = N; pd-&amp;gt;b = b; pd-&amp;gt;c = c; pd-&amp;gt;CSmin = CSmin; pd-&amp;gt;CSmax = CSmax; pd-&amp;gt;Ts = Ts; pd-&amp;gt;TS = TS; pd-&amp;gt;Fp = Fp; pd-&amp;gt;Fm = Fm; pd-&amp;gt;Io = 0.0; pd-&amp;gt;Do = 0.0; pd-&amp;gt;SPo = 0.0; pd-&amp;gt;PVo = 0.0; pd-&amp;gt;CS = 0.0; pd-&amp;gt;HI = 0; pd-&amp;gt;LO = 0; } void isapidpos(ISAPIDpos_DATA *pd) { float DSP,DPV,P,I,D; if (pd-&amp;gt;TS==0) { // Automatic mode DSP = pd-&amp;gt;SP-pd-&amp;gt;SPo; DPV = pd-&amp;gt;PV-pd-&amp;gt;PVo; P = pd-&amp;gt;K*(pd-&amp;gt;b*pd-&amp;gt;SP-pd-&amp;gt;PV); I = pd-&amp;gt;Io+pd-&amp;gt;K*pd-&amp;gt;Ts/pd-&amp;gt;Ti*(pd-&amp;gt;SP-pd-&amp;gt;PV); D = (pd-&amp;gt;Td*pd-&amp;gt;Do+pd-&amp;gt;K*pd-&amp;gt;N*pd-&amp;gt;Td *(pd-&amp;gt;c*DSP-DPV))/(pd-&amp;gt;Td+pd-&amp;gt;N*pd-&amp;gt;Ts); pd-&amp;gt;CS = P+I+D; if ((pd-&amp;gt;CS&amp;gt;pd-&amp;gt;CSo &amp; pd-&amp;gt;Fp) |(pd-&amp;gt;CS&amp;lt;pd-&amp;gt;CSo &amp; pd-&amp;gt;Fm)) pd-&amp;gt;CS = pd-&amp;gt;CSo; } else { // Tracking mode (can override locks) pd-&amp;gt;CS = pd-&amp;gt;TR; D = 0; } // Antiwindup if (pd-&amp;gt;CS&amp;gt;pd-&amp;gt;CSmax) pd-&amp;gt;CS = pd-&amp;gt;CSmax; if (pd-&amp;gt;CS&amp;lt;pd-&amp;gt;CSmin) pd-&amp;gt;CS = pd-&amp;gt;CSmin; pd-&amp;gt;Io = pd-&amp;gt;CS-P-D; // Saturation signalling</p>
    <p>// Type definitions --------------------------------------typedef struct { // Positional ISA PID float K,Ti,Td,N,b,c,CSmin,CSmax,Ts; // parameters float Io,Do; // state vars float CSo; // for locks float SPo,PVo; // input mem float SP,PV,TR,CS; // I/O vars char TS,Fp,Fm,HI,LO; } ISAPIDpos_DATA; typedef struct { // Incremental ISA PID float K,Ti,Td,N,b,c,CSmin,CSmax,Ts; // parameters float CSo,Do; // state vars float SPo,PVo; // input mem float SP,PV,TR,CS; // I/O vars char TS,Fp,Fm,HI,LO; } ISAPIDinc_DATA; typedef struct { // 1st order t.f. w/o zeroes float mu,T,Ts; // parameters float xo; // state vars float u,y; // I/O vars } TF1P0Z_DATA; // Dynamic systems (init and run) ------------------------void isapidpos_coldinit(ISAPIDpos_DATA *pd, float K, float Ti, float Td, float N, float b, float c, float CSmin, float CSmax, float Ts, char TS, char Fp, char Fm) { pd-&amp;gt;K = K; pd-&amp;gt;Ti = Ti; pd-&amp;gt;Td = Td; pd-&amp;gt;N = N; pd-&amp;gt;b = b; pd-&amp;gt;c = c; pd-&amp;gt;CSmin = CSmin; pd-&amp;gt;CSmax = CSmax; pd-&amp;gt;Ts = Ts; pd-&amp;gt;TS = TS; pd-&amp;gt;Fp = Fp; pd-&amp;gt;Fm = Fm; pd-&amp;gt;Io = 0.0; pd-&amp;gt;Do = 0.0; pd-&amp;gt;SPo = 0.0; pd-&amp;gt;PVo = 0.0; pd-&amp;gt;CS = 0.0; pd-&amp;gt;HI = 0; pd-&amp;gt;LO = 0; } void isapidpos(ISAPIDpos_DATA *pd) { float DSP,DPV,P,I,D; if (pd-&amp;gt;TS==0) { // Automatic mode DSP = pd-&amp;gt;SP-pd-&amp;gt;SPo; DPV = pd-&amp;gt;PV-pd-&amp;gt;PVo; P = pd-&amp;gt;K*(pd-&amp;gt;b*pd-&amp;gt;SP-pd-&amp;gt;PV); I = pd-&amp;gt;Io+pd-&amp;gt;K*pd-&amp;gt;Ts/pd-&amp;gt;Ti*(pd-&amp;gt;SP-pd-&amp;gt;PV); D = (pd-&amp;gt;Td*pd-&amp;gt;Do+pd-&amp;gt;K*pd-&amp;gt;N*pd-&amp;gt;Td *(pd-&amp;gt;c*DSP-DPV))/(pd-&amp;gt;Td+pd-&amp;gt;N*pd-&amp;gt;Ts); pd-&amp;gt;CS = P+I+D; if ((pd-&amp;gt;CS&amp;gt;pd-&amp;gt;CSo &amp; pd-&amp;gt;Fp) |(pd-&amp;gt;CS&amp;lt;pd-&amp;gt;CSo &amp; pd-&amp;gt;Fm)) pd-&amp;gt;CS = pd-&amp;gt;CSo; } else { // Tracking mode (can override locks) pd-&amp;gt;CS = pd-&amp;gt;TR; D = 0; } // Antiwindup if (pd-&amp;gt;CS&amp;gt;pd-&amp;gt;CSmax) pd-&amp;gt;CS = pd-&amp;gt;CSmax; if (pd-&amp;gt;CS&amp;lt;pd-&amp;gt;CSmin) pd-&amp;gt;CS = pd-&amp;gt;CSmin; pd-&amp;gt;Io = pd-&amp;gt;CS-P-D; // Saturation signalling</p>
    <p>// Type definitions --------------------------------------typedef struct { // Positional ISA PID float K,Ti,Td,N,b,c,CSmin,CSmax,Ts; // parameters float Io,Do; // state vars float CSo; // for locks float SPo,PVo; // input mem float SP,PV,TR,CS; // I/O vars char TS,Fp,Fm,HI,LO; } ISAPIDpos_DATA; typedef struct { // Incremental ISA PID float K,Ti,Td,N,b,c,CSmin,CSmax,Ts; // parameters float CSo,Do; // state vars float SPo,PVo; // input mem float SP,PV,TR,CS; // I/O vars char TS,Fp,Fm,HI,LO; } ISAPIDinc_DATA; typedef struct { // 1st order t.f. w/o zeroes float mu,T,Ts; // parameters float xo; // state vars float u,y; // I/O vars } TF1P0Z_DATA; // Dynamic systems (init and run) ------------------------void isapidpos_coldinit(ISAPIDpos_DATA *pd, float K, float Ti, float Td, float N, float b, float c, float CSmin, float CSmax, float Ts, char TS, char Fp, char Fm) { pd-&amp;gt;K = K; pd-&amp;gt;Ti = Ti; pd-&amp;gt;Td = Td; pd-&amp;gt;N = N; pd-&amp;gt;b = b; pd-&amp;gt;c = c; pd-&amp;gt;CSmin = CSmin; pd-&amp;gt;CSmax = CSmax; pd-&amp;gt;Ts = Ts; pd-&amp;gt;TS = TS; pd-&amp;gt;Fp = Fp; pd-&amp;gt;Fm = Fm; pd-&amp;gt;Io = 0.0; pd-&amp;gt;Do = 0.0; pd-&amp;gt;SPo = 0.0; pd-&amp;gt;PVo = 0.0; pd-&amp;gt;CS = 0.0; pd-&amp;gt;HI = 0; pd-&amp;gt;LO = 0; } void isapidpos(ISAPIDpos_DATA *pd) { float DSP,DPV,P,I,D; if (pd-&amp;gt;TS==0) { // Automatic mode DSP = pd-&amp;gt;SP-pd-&amp;gt;SPo; DPV = pd-&amp;gt;PV-pd-&amp;gt;PVo; P = pd-&amp;gt;K*(pd-&amp;gt;b*pd-&amp;gt;SP-pd-&amp;gt;PV); I = pd-&amp;gt;Io+pd-&amp;gt;K*pd-&amp;gt;Ts/pd-&amp;gt;Ti*(pd-&amp;gt;SP-pd-&amp;gt;PV); D = (pd-&amp;gt;Td*pd-&amp;gt;Do+pd-&amp;gt;K*pd-&amp;gt;N*pd-&amp;gt;Td *(pd-&amp;gt;c*DSP-DPV))/(pd-&amp;gt;Td+pd-&amp;gt;N*pd-&amp;gt;Ts); pd-&amp;gt;CS = P+I+D; if ((pd-&amp;gt;CS&amp;gt;pd-&amp;gt;CSo &amp; pd-&amp;gt;Fp) |(pd-&amp;gt;CS&amp;lt;pd-&amp;gt;CSo &amp; pd-&amp;gt;Fm)) pd-&amp;gt;CS = pd-&amp;gt;CSo; } else { // Tracking mode (can override locks) pd-&amp;gt;CS = pd-&amp;gt;TR; D = 0; } // Antiwindup if (pd-&amp;gt;CS&amp;gt;pd-&amp;gt;CSmax) pd-&amp;gt;CS = pd-&amp;gt;CSmax; if (pd-&amp;gt;CS&amp;lt;pd-&amp;gt;CSmin) pd-&amp;gt;CS = pd-&amp;gt;CSmin; pd-&amp;gt;Io = pd-&amp;gt;CS-P-D; // Saturation signalling</p>
    <p>Implementation  integration into target system  consisten monitoring  coordinated reconfiguration</p>
  </div>
  <div class="page">
    <p>INTEGRATING ADAPTATION MECHANISMS</p>
    <p>Adhoc Implementations  Extensive handcrafting of non-trivial code  Low level of FCL abstraction  Low FCL visibility  Limited verification and reasoning  Giving raise to accidental complexities</p>
    <p>Reusing and adapting existing work  Often target specific types of adaptation problems [Bertran12]  Require the use of certain adaptation mechanism [Garlan04]  Applicable to single domain [Rouvoy08] or technology [Asadollahi09]  Do not support remoting or complex control schemes [Adamczyk08,</p>
    <p>Gorton06]  Overall lack of supporting control theory based controller  Limiting their applicability</p>
    <p>API</p>
    <p>LOGS</p>
    <p>CONFIGURATIONS</p>
    <p>COMMANDS</p>
    <p>AOP</p>
    <p>PROFILER</p>
  </div>
  <div class="page">
    <p>OVERVIEW</p>
    <p>Monitoring Reconfiguration</p>
    <p>Decision Making</p>
    <p>sensors effectors</p>
    <p>Target System</p>
    <p>events actions</p>
    <p>measures decisions Controller Target System</p>
    <p>Transduc er</p>
    <p>+</p>
    <p>= mX</p>
    <p>i=1</p>
    <p>d =</p>
    <p>m</p>
    <p>d</p>
    <p>(N) =   =</p>
    <p>m d</p>
    <p>d = m</p>
    <p>(N)</p>
    <p>API</p>
    <p>LOGS</p>
    <p>CONFIGURATIONS</p>
    <p>COMMANDS</p>
    <p>AOP</p>
    <p>PROFILER</p>
    <p>Feedback Control Definition Language1 The ZNN.COM case study2</p>
    <p>Systematic integration of self-adaptive mechanisms into software systems through control theory centric architecture models</p>
    <p>Generality Visibility Composition</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>FEEDBACK CONTROL DEFINITION LANGUAGE - IN A NUTSHELL</p>
    <p>Controller Apache</p>
    <p>Web Server</p>
    <p>MEMMCMEM</p>
    <p>Apache adaptation example - adjusts the maximum number of connections to be processed simultaneously (MC) based on the difference between reference (MEM*) and measured memory usage (MEM) [Hellerstain04].</p>
  </div>
  <div class="page">
    <p>FEEDBACK CONTROL DEFINITION LANGUAGE (FCDL) - IN A NUTSHELL</p>
    <p>Controller Apache</p>
    <p>Web Server</p>
    <p>MEMMCMEM</p>
    <p>Apache adaptation example - adjusts the maximum number of connections to be processed simultaneously (MC) based on the difference between reference (MEM*) and measured memory usage (MEM) [Hellerstain04].</p>
    <p>(effector)</p>
    <p>(controller)(processor)</p>
    <p>(sensor)</p>
    <p>memUsage : ProcessMem</p>
    <p>controller : IController</p>
    <p>mcConf : SetApacheConf</p>
    <p>out outputin input</p>
    <p>out output</p>
    <p>scheduler : PeriodTrigger</p>
    <p>out output</p>
    <p>in input</p>
    <p>in input</p>
    <p>MEM</p>
    <p>MEM</p>
    <p>MC -refMem</p>
    <p>-kI</p>
    <p>ps -o pmem= $(cat /var/run/httpd.pid) /etc/apache2/httpd.conf/etc/init.d/apachectl</p>
    <p>u(t) = u(k  1) + Kie(k)</p>
    <p>- initialPeriod</p>
    <p>- httpdConfPath- pid</p>
    <p>(target system)</p>
    <p>= h self; + (input); * (output?) i</p>
    <p>(provided sensor) (provided effector)</p>
    <p>in input</p>
    <p>setRefMemrefMem</p>
    <p>out output MEM MEM</p>
    <p>Domain-specific modeling language  Network of Adaptive Elements (AEs)</p>
    <p>actor-like element  push/pull communication  properties  specifies implementations  supports reflection  defines interaction contracts</p>
  </div>
  <div class="page">
    <p>THE ZNN.COM CASE STUDY 2</p>
  </div>
  <div class="page">
    <p>THE ZNN.COM CASE STUDY</p>
    <p>http://www.hpi.uni-potsdam.de/giese/public/selfadapt/exemplars/model-problem-znn-com/</p>
    <p>A news service model  Web-based N-tier client-server  Originally used for Rainbow evaluation [Cheng09]  Acknowledged SEAMS case-study  Partially used by others (e.g., DYNAMICO, Zenshin, AdaptCases) !  Objective</p>
    <p>To serve the content within reasonable response time and quality in the event of traffic spikes caused by highly popular news.</p>
    <p>!  Challenges</p>
    <p>content adaptation (e.g. serving reduced content quality),  service differentiation (e.g. prioritizing premium customers),  infrastructure adaptation (e.g. adapting the size of the server pool)</p>
  </div>
  <div class="page">
    <p>Idea: service time = fixed overhead + data-size dependent overhead</p>
    <p>QoS management control of web servers by content delivery adaptation</p>
    <p>[Abdelzaher et al., 1999, 2002]</p>
    <p>...</p>
    <p>serve from tree #2</p>
    <p>serve from tree #1</p>
    <p>Rejection Level</p>
    <p>Minimum Content Full Content</p>
    <p>Goal: maintain server load around some pre-set value</p>
    <p>/1/photo.jpg</p>
    <p>/2/photo.jpg</p>
    <p>/photo.jpg full quality</p>
    <p>degraded quality</p>
    <p>norma l load</p>
    <p>overload</p>
    <p>Prerequisite: preprocessed content (different quality and size)</p>
    <p>ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
    <p>Generality Visibility Composition</p>
    <p>Using FCDL</p>
  </div>
  <div class="page">
    <p>Compute severity of adaptation (G)</p>
    <p>Compute the requests rate (R), bandwidth (W) and utilization (U)</p>
    <p>Compute the number of requests (r) and size of responses (w)1 2</p>
    <p>ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
  </div>
  <div class="page">
    <p>Compute the number of requests (r) and size of responses (w)1</p>
    <p>accessLog : FileTailer</p>
    <p>out lines</p>
    <p>file=/var/log/apache2/access.log</p>
    <p>access_log</p>
    <p>active sensor FileTailer { push out port lines: String ! property file: String }</p>
    <p>processor Accumulator { push in port input: long pull out port sum: long }</p>
    <p>processor AccessLogParser { push in port lines: String push out port size: int push out port requests: int }</p>
    <p>Generality</p>
    <p>Visibility</p>
    <p>requestCounter : Accumulator</p>
    <p>responseSizeCounter : Accumulator</p>
    <p>in input</p>
    <p>out sum out sum</p>
    <p>in lines</p>
    <p>out sizeout requests</p>
    <p>accessLogParser : AccessLogParser</p>
    <p>ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
  </div>
  <div class="page">
    <p>access_log</p>
    <p>active processor PeriodTrigger&lt;T&gt; { pull in port input: T push out port output: T ! property initialPeriod = 10.seconds }</p>
    <p>requestCounter : Accumulator</p>
    <p>responseSizeCounter : Accumulator</p>
    <p>scheduler : PeriodTrigger</p>
    <p>loadMonitor : LoadMonitor</p>
    <p>in input</p>
    <p>out sum out sum</p>
    <p>in requests in size</p>
    <p>out utilization</p>
    <p>in input</p>
    <p>out output</p>
    <p>initialPeriod=10s</p>
    <p>accessLog : FileTailer</p>
    <p>in lines out lines</p>
    <p>file=/var/log/apache2/access_log</p>
    <p>out sizeout requests</p>
    <p>accessLogParser : AccessLogParser</p>
    <p>Compute the requests rate (R), bandwidth (W) and utilization (U)2 ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
    <p>Generality</p>
    <p>Visibility</p>
  </div>
  <div class="page">
    <p>content_treeaccess_log</p>
    <p>Compute severity of adaptation (G)3</p>
    <p>controller IController { in push port input: double out push port output: double ! property KI: double property reference: double property loBnd: double property upBnd: double }</p>
    <p>ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
    <p>utilController : IController</p>
    <p>in input</p>
    <p>requestCounter : Accumulator</p>
    <p>responseSizeCounter : Accumulator</p>
    <p>scheduler : PeriodTrigger</p>
    <p>loadMonitor : LoadMonitor</p>
    <p>in input</p>
    <p>out sum out sum</p>
    <p>in requests in size</p>
    <p>out utilization</p>
    <p>in input</p>
    <p>out output</p>
    <p>in input</p>
    <p>out output initialPeriod=10s</p>
    <p>adaptor : ContentAdaptor</p>
    <p>in contentTree</p>
    <p>accessLog : FileTailer</p>
    <p>in lines out lines</p>
    <p>file=/var/log/apache2/access_log</p>
    <p>out sizeout requests</p>
    <p>accessLogParser : AccessLogParser</p>
    <p>KI=? reference=?</p>
    <p>Generality</p>
    <p>Visibility</p>
  </div>
  <div class="page">
    <p>Composition</p>
    <p>composite ApacheQOS { ! feature accessLog = new FileTailer { file = /var/log/apache2/access_log } ! feature accessLogParser = new AccessLogParser feature requestCounter = new Accumulator feature responseSizeCounter = new Accumulator feature loadMonitor = new LoadMonitor feature scheduler = new PeriodTrigger&lt;Double&gt; feature utilController = new IController { reference = 0.8 } feature adaptor = new ContentAdaptor ! connect accessLog.lines to accessLogParser.lines connect accessLogParser.size to responseSizeCounter.input connect accessLogParser.requests to requestsCounter.input connect requestCounter.output to loadMonitor.requests connect responseSizeCounter.output to loadMonitor.size connect loadMonitor.utilization to scheduler.input connect scheduler.output to utilController.utilization connect utilController.contentTree to adaptor.contentTree }</p>
    <p>Complete model ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
    <p>ApacheQOS utilController : IController</p>
    <p>in input</p>
    <p>requestCounter : Accumulator</p>
    <p>responseSizeCounter : Accumulator</p>
    <p>scheduler : PeriodTrigger</p>
    <p>loadMonitor : LoadMonitor</p>
    <p>in input</p>
    <p>out sum out sum</p>
    <p>in requests in size</p>
    <p>out utilization</p>
    <p>in input</p>
    <p>out output</p>
    <p>in input</p>
    <p>out output</p>
    <p>sy st</p>
    <p>em</p>
    <p>la ye</p>
    <p>r co</p>
    <p>nt ro</p>
    <p>l la</p>
    <p>ye r</p>
    <p>initialPeriod=10s</p>
    <p>adaptor : ContentAdaptor</p>
    <p>in contentTree</p>
    <p>accessLog : FileTailer</p>
    <p>in lines out lines</p>
    <p>file=/var/log/apache2/access_log</p>
    <p>out sizeout requests</p>
    <p>accessLogParser : AccessLogParser</p>
    <p>KI=? reference=?</p>
    <p>Generality Visibility</p>
  </div>
  <div class="page">
    <p>Generality</p>
    <p>Visibility</p>
    <p>ZNN.COM - LOCAL CONTENT DELIVERY ADAPTATION</p>
    <p>ApacheQOS</p>
    <p>control : QOSControl</p>
    <p>in contentTree</p>
    <p>apache : ApacheWebServer</p>
    <p>in requests</p>
    <p>in size</p>
    <p>out requests</p>
    <p>out size</p>
    <p>out contentTree</p>
    <p>co nt</p>
    <p>ro l</p>
    <p>la ye</p>
    <p>r sy</p>
    <p>st em</p>
    <p>la</p>
    <p>ye r</p>
    <p>QOSControl utilController : IController</p>
    <p>utilization : UtilizationMonitor</p>
    <p>out contentTree</p>
    <p>scheduler : PeriodTrigger</p>
    <p>out utilization in input out output</p>
    <p>in input</p>
    <p>out outputin requests in size</p>
    <p>in requests in size</p>
    <p>adaptor : ContentAdaptor</p>
    <p>ou t</p>
    <p>si ze</p>
    <p>in contentTree</p>
    <p>out size</p>
    <p>ou t</p>
    <p>re qu</p>
    <p>es ts</p>
    <p>out requests in contentTree</p>
    <p>ApacheWebServer</p>
    <p>accessLog : FileTailer</p>
    <p>accessLogParser : AccessLogParser</p>
    <p>in lines</p>
    <p>out lines</p>
    <p>file=/var/log/apache2/access_log</p>
    <p>Composition</p>
  </div>
  <div class="page">
    <p>ZNN.COM - ADAPTIVE CONTROL</p>
    <p>Using the reflection support for adaptive control</p>
    <p>AdaptiveApacheQOS</p>
    <p>out utilization</p>
    <p>co nt</p>
    <p>ro l l</p>
    <p>ay er</p>
    <p>m et</p>
    <p>aco</p>
    <p>nt ro</p>
    <p>l la</p>
    <p>ye r</p>
    <p>sy st</p>
    <p>em la</p>
    <p>ye r</p>
    <p>in contentTree</p>
    <p>in requests</p>
    <p>in size</p>
    <p>out requests</p>
    <p>out size</p>
    <p>out contentTree</p>
    <p>provided in KI</p>
    <p>control : QOSControl</p>
    <p>out KI in utilization</p>
    <p>in contentTree</p>
    <p>KI</p>
    <p>server : ApacheWebServer</p>
    <p>adaptiveControl: AdaptiveControl</p>
  </div>
  <div class="page">
    <p>ILLUSTRATION - DISTRIBUTED CONTENT DELIVERY ADAPTATION  QoS management control of a pool of web servers using content</p>
    <p>delivery adaptation.  Load balancer schedules requests to a server with highest QoS.</p>
    <p>Znn.com</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client N</p>
    <p>Forwards requests to s</p>
    <p>Server cluster</p>
    <p>...</p>
    <p>Load Balancer</p>
    <p>...</p>
    <p>S</p>
    <p>G1</p>
    <p>G2</p>
    <p>Gn</p>
    <p>s 2 S such that Gs = max (G1, . . . , Gn)</p>
  </div>
  <div class="page">
    <p>LocalApacheQOS</p>
    <p>out contentTree</p>
    <p>contentTreeWithHost : Tuple2</p>
    <p>hostname : Hostname</p>
    <p>Si out output</p>
    <p>out hostname</p>
    <p>in input2</p>
    <p>in input1</p>
    <p>in input Gi</p>
    <p>contentTreePub : EventBusPublisher</p>
    <p>server : ApacheQOS</p>
    <p>(Si, Gi)</p>
    <p>scheduler : PeriodTrigger</p>
    <p>in input</p>
    <p>out output</p>
    <p>(Si, Gi)</p>
    <p>contentTree : Queue</p>
    <p>in input</p>
    <p>out output</p>
    <p>Gi</p>
    <p>ou t</p>
    <p>co nt</p>
    <p>en tT</p>
    <p>re e</p>
    <p>ApacheQOS</p>
    <p>in contentTree</p>
    <p>in requests</p>
    <p>in size</p>
    <p>out requests</p>
    <p>out size</p>
    <p>out contentTree</p>
    <p>server : ApacheWebServer</p>
    <p>control : QOSControl</p>
    <p>LoadBalancerControl contentTree : MapStore</p>
    <p>ctrl : LoadBalancerController</p>
    <p>contentTreeMin : MapMaxKey</p>
    <p>lbForwardHost : FileWriter</p>
    <p>out output out outputin input</p>
    <p>in input</p>
    <p>Siout output in value</p>
    <p>in hostname</p>
    <p>out hostname</p>
    <p>&gt;:</p>
    <p>S1 : G1 ...</p>
    <p>Sn : Gn</p>
    <p>&gt;;</p>
    <p>contentTreeSub : EventBusSubscriber</p>
    <p>scheduler : PeriodTrigger</p>
    <p>in input out output</p>
    <p>Si Si</p>
    <p>(Si, Gi)</p>
    <p>Load Balancer</p>
    <p>si</p>
    <p>ILLUSTRATION - DISTRIBUTED CONTENT DELIVERY ADAPTATION</p>
  </div>
  <div class="page">
    <p>ILLUSTRATION - RESOURCE MANAGEMENT</p>
    <p>ServerPoolControl contentTree : MapStore</p>
    <p>serverPoolController : IController</p>
    <p>contentTreeAvg : MapAvgValue</p>
    <p>clusterManager : ClusterManager</p>
    <p>out output out output</p>
    <p>n</p>
    <p>in input</p>
    <p>in input</p>
    <p>out output in numOfServers</p>
    <p>in input</p>
    <p>out output</p>
    <p>&gt;:</p>
    <p>S1 : G1 ...</p>
    <p>Sn : Gn</p>
    <p>&gt;;</p>
    <p>scheduler : PeriodTrigger</p>
    <p>in input out output</p>
    <p>(Si, Gi)</p>
    <p>G G</p>
    <p>contentTreeSub : EventBusSubscriber</p>
    <p>Load Balancer</p>
    <p>s1</p>
    <p>sn</p>
    <p>G1</p>
    <p>Gn</p>
    <p>n = n + KIE = n + KI(G   G)</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>ZNN.COM - SYSTEM IDENTIFICATION</p>
    <p>Support for FCL design - black-box modeling  Open control loops for data collection</p>
    <p>SystemIdentification</p>
    <p>out output</p>
    <p>log : FileWriter</p>
    <p>in value</p>
    <p>out utilization</p>
    <p>in requests</p>
    <p>in size scheduler : PeriodTrigger</p>
    <p>in input out output</p>
    <p>sample: Tuple2</p>
    <p>in input2</p>
    <p>in input1</p>
    <p>gQueue: Queue</p>
    <p>out output out requests</p>
    <p>out size</p>
    <p>in contentTree</p>
    <p>contentTree: SineWaveserver: ApacheWebServer</p>
    <p>(U, G) (U, G)</p>
    <p>utilization : UtilizationMonitor</p>
    <p>in input</p>
  </div>
  <div class="page">
    <p>Modeling</p>
    <p>VerificationCode Generation</p>
    <p>Reference implementation of FCDL based on Eclipse Modeling Framework  Eclipse IDE-based prototype to facilitate the use of FCDL - ACTRESS</p>
    <p>IMPLEMENTATION</p>
    <p>accessLogParser accessLog adaptor</p>
    <p>apache control</p>
    <p>requestCounter</p>
    <p>responseSizeCounter</p>
    <p>loadMonitor</p>
    <p>utilization</p>
    <p>scheduler utilController</p>
    <p>ApacheQOS</p>
    <p>ACTRESS Runtime</p>
    <p>actor</p>
    <p>actor with event listener</p>
    <p>composite actor</p>
    <p>containment</p>
    <p>message passing</p>
    <p>ApacheQOS utilController : IController</p>
    <p>in input</p>
    <p>requestCounter : Accumulator</p>
    <p>responseSizeCounter : Accumulator</p>
    <p>scheduler : PeriodTrigger</p>
    <p>loadMonitor : LoadMonitor</p>
    <p>in input</p>
    <p>out sum out sum</p>
    <p>in requests in size</p>
    <p>out utilization</p>
    <p>in input</p>
    <p>out output</p>
    <p>in input</p>
    <p>out output</p>
    <p>out requests</p>
    <p>out size</p>
    <p>initialPeriod=10s</p>
    <p>in contentTree</p>
    <p>server : ApacheWebServer</p>
    <p>KI=? reference=?</p>
    <p>Model well-formedness  User-defined structural constraints</p>
    <p>(OCL)  Architecture verification</p>
    <p>(completeness, consistency, determinacy)  Temporal properties (PROMELA/SPIN)</p>
    <p>xFCDL (Extended FCDL)  Textual DSL for authoring</p>
    <p>FCDL models  Modularity, Java</p>
    <p>interoperability, Xbase  Eclipse IDE support</p>
    <p>ACTRESS runtime  based on Java/AKKA</p>
  </div>
  <div class="page">
    <p>Conclusions 3</p>
  </div>
  <div class="page">
    <p>SUMMARY</p>
    <p>Combining self-adaptive software systems with principles of MDE to provide systematic and tooled approach for integrating control mechanisms into software systems. !  A proof of concept implementation and tools facilitating the language use</p>
    <p>including modeling, code synthesis and verification support.</p>
  </div>
  <div class="page">
    <p>FUTURE WORK</p>
    <p>Address ACTRESS limitations - a new MPS-based implementation  More robust FCDL - support data units, input output assertions  ZNN.COM challenge  From a case study to a benchmark  Easily reusable (docker packaging)  INRIA Lille Non-A team in charge of a new controller  Evaluation agains two base lines  Apache mod_proxy  Amazon elastic load balancer</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Filip Kikava filip.krikava@inria.fr</p>
  </div>
</Presentation>
