<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Slacker: Fast Distribution with Lazy Docker Containers</p>
    <p>Tyler Harter, Brandon Salmon, Rose Liu, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>Container Popularity</p>
    <p>spoon.net</p>
  </div>
  <div class="page">
    <p>Theory and Practice Theory: containers are lightweight</p>
    <p>just like starting a process!</p>
  </div>
  <div class="page">
    <p>Theory and Practice</p>
    <p>[1] Large-scale cluster management at Google with Borg. http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf</p>
    <p>Theory: containers are lightweight  just like starting a process!</p>
    <p>Practice: container startup is slow  25 second startup time [1]</p>
    <p>task startup latency (the time from job submission to a task running) is an area that has received and continues to receive significant attention. It is highly variable, with the median typically about 25 s. Package installation takes about 80% of the total: one of the known bottlenecks is contention for the local disk where packages are written.</p>
  </div>
  <div class="page">
    <p>Theory and Practice</p>
    <p>[1] Large-scale cluster management at Google with Borg. http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf</p>
    <p>Theory: containers are lightweight  just like starting a process!</p>
    <p>Practice: container startup is slow  25 second startup time [1]</p>
    <p>task startup latency (the time from job submission to a task running) is an area that has received and continues to receive significant attention. It is highly variable, with the median typically about 25 s. Package installation takes about 80% of the total: one of the known bottlenecks is contention for the local disk where packages are written.</p>
  </div>
  <div class="page">
    <p>Theory and Practice</p>
    <p>[1] Large-scale cluster management at Google with Borg. http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf</p>
    <p>Theory: containers are lightweight  just like starting a process!</p>
    <p>Practice: container startup is slow  25 second startup time [1]</p>
    <p>Startup time matters  flash crowds  load balance  interactive development</p>
  </div>
  <div class="page">
    <p>Contributions HelloBench</p>
    <p>Docker benchmark for stressing startup  based on 57 container workloads</p>
    <p>Startup analysis  76% of startup time spent copying/installing images  startup requires only 6% of that image data</p>
    <p>Slacker: Docker storage driver  lazily pull only needed data  leverage extensions to Linux kernel and NFS server  5-20x startup speedups</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Containers: lightweight isolation  Docker: file-system provisioning</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Why use containers?</p>
  </div>
  <div class="page">
    <p>Why use containers? (its trendy)</p>
  </div>
  <div class="page">
    <p>Why use containers? (its trendy)</p>
    <p>(efficient solution to classic problem)</p>
  </div>
  <div class="page">
    <p>Big Goal: Sharing and Isolation</p>
    <p>App A App B</p>
    <p>want: multitenancy Physical Machine</p>
  </div>
  <div class="page">
    <p>Big Goal: Sharing and Isolation</p>
    <p>App A App B</p>
    <p>dont want: crashes Physical Machine</p>
  </div>
  <div class="page">
    <p>Big Goal: Sharing and Isolation</p>
    <p>App A App B</p>
    <p>dont want: crashes Physical Machine</p>
  </div>
  <div class="page">
    <p>Big Goal: Sharing and Isolation</p>
    <p>App A App B</p>
    <p>dont want: unfairness Physical Machine</p>
  </div>
  <div class="page">
    <p>Big Goal: Sharing and Isolation</p>
    <p>App A App B</p>
    <p>dont want: leaks Physical Machine</p>
    <p>sensitive data</p>
  </div>
  <div class="page">
    <p>Solution: Virtualization namespaces and scheduling provide illusion of private resources</p>
  </div>
  <div class="page">
    <p>Evolution of Virtualization 1st generation: process virtualization</p>
    <p>isolate within OS (e.g., virtual memory)  fast, but incomplete (missing ports, file system, etc.)</p>
    <p>App A</p>
    <p>process</p>
    <p>App B</p>
    <p>process Operating System process virtualization</p>
  </div>
  <div class="page">
    <p>Evolution of Virtualization 1st generation: process virtualization</p>
    <p>isolate within OS (e.g., virtual memory)  fast, but incomplete (missing ports, file system, etc.)</p>
    <p>App A</p>
    <p>process</p>
    <p>App B</p>
    <p>process VM OSOS</p>
    <p>VM</p>
    <p>App A App B</p>
    <p>Operating System process virtualization machine virtualization</p>
  </div>
  <div class="page">
    <p>Evolution of Virtualization 1st generation: process virtualization</p>
    <p>isolate within OS (e.g., virtual memory)  fast, but incomplete (missing ports, file system, etc.)</p>
    <p>App A</p>
    <p>process</p>
    <p>App B</p>
    <p>process VM OSOS</p>
    <p>VM</p>
    <p>App A App B</p>
    <p>Operating System process virtualization machine virtualization</p>
  </div>
  <div class="page">
    <p>Evolution of Virtualization 1st generation: process virtualization</p>
    <p>isolate within OS (e.g., virtual memory)  fast, but incomplete (missing ports, file system, etc.)</p>
  </div>
  <div class="page">
    <p>Evolution of Virtualization 1st generation: process virtualization</p>
    <p>isolate within OS (e.g., virtual memory)  fast, but incomplete (missing ports, file system, etc.)</p>
    <p>many storage challenges</p>
  </div>
  <div class="page">
    <p>New Storage Challenges Crash isolation</p>
    <p>Physical Disentanglement in a Container-Based File System. Lanyue Lu, Yupu Zhang, Thanh Do, Samer Al-Kiswany, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau. OSDI 14.</p>
    <p>Performance isolation Split-level I/O Scheduling For Virtualized Environments. Suli Yang, Tyler Harter, Nishant Agrawal, Salini Selvaraj Kowsalya, Anand Krishnamurthy, Samer Al-Kiswany, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau. SOSP 15.</p>
    <p>File-system provisioning Slacker: Fast Distribution with Lazy Docker Containers. Tyler Harter, Brandon Salmon, Rose Liu, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau. FAST 16.</p>
    <p>today</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Containers: lightweight isolation  Docker: file-system provisioning</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Docker Background Deployment tool built on containers</p>
    <p>An application is defined by a file-system image  application binary  shared libraries  etc.</p>
    <p>Version-control model  extend images by committing additional files  deploy applications by pushing/pulling images</p>
  </div>
  <div class="page">
    <p>Containers as Repos LAMP stack example</p>
    <p>commit 1: Linux packages (e.g., Ubuntu)  commit 2: Apache  commit 3: MySQL  commit 4: PHP</p>
    <p>Central registries  Docker HUB  private registries</p>
    <p>Docker layer  commit  container scratch space</p>
  </div>
  <div class="page">
    <p>Push, Pull, Run registry</p>
    <p>worker workerworker</p>
  </div>
  <div class="page">
    <p>registry</p>
    <p>worker workerworker</p>
    <p>push</p>
    <p>Push, Pull, Run</p>
  </div>
  <div class="page">
    <p>registry</p>
    <p>worker workerworker</p>
    <p>Push, Pull, Run</p>
  </div>
  <div class="page">
    <p>registry</p>
    <p>worker workerworker</p>
    <p>pull pull</p>
    <p>Push, Pull, Run</p>
  </div>
  <div class="page">
    <p>registry</p>
    <p>worker workerworker</p>
    <p>Push, Pull, Run</p>
  </div>
  <div class="page">
    <p>registry</p>
    <p>worker workerworker</p>
    <p>Push, Pull, Run</p>
    <p>CC C run runrun</p>
  </div>
  <div class="page">
    <p>registry</p>
    <p>worker workerworker</p>
    <p>Push, Pull, Run</p>
    <p>CC C</p>
    <p>need a new benchmark to measure Docker push, pull, and run operations.</p>
    <p>run runrun</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads  HelloBench  Analysis</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>HelloBench Goal: stress container startup</p>
    <p>including push/pull  57 container images from Docker HUB  run simple hello world-like task  wait until its done/ready</p>
    <p>push pull run</p>
  </div>
  <div class="page">
    <p>HelloBench Goal: stress container startup</p>
    <p>including push/pull  57 container images from Docker HUB  run simple hello world-like task  wait until its done/ready</p>
    <p>push pull run</p>
  </div>
  <div class="page">
    <p>HelloBench Goal: stress container startup</p>
    <p>including push/pull  57 container images from Docker HUB  run simple hello world-like task  wait until its done/ready</p>
    <p>push pull run ready</p>
  </div>
  <div class="page">
    <p>HelloBench Goal: stress container startup</p>
    <p>including push/pull  57 container images from Docker HUB  run simple hello world-like task  wait until its done/ready</p>
    <p>Development cycle  distributed programming/testing</p>
    <p>push pull run ready</p>
    <p>development cycle</p>
  </div>
  <div class="page">
    <p>HelloBench Goal: stress container startup</p>
    <p>including push/pull  57 container images from Docker HUB  run simple hello world-like task  wait until its done/ready</p>
    <p>Development cycle  distributed programming/testing</p>
    <p>Deployment cycle  flash crowds, rebalance</p>
    <p>push pull run ready</p>
    <p>deployment cycle</p>
  </div>
  <div class="page">
    <p>Workload Categories Linux Distro alpine busybox centos cirros crux debian fedora mageia opensuse oraclelinux ubuntu ubuntudebootstrap ubuntu-upstart</p>
    <p>Database cassandra crate elas6csearch mariadb mongo mysql percona postgres redis rethinkdb ! Web Framework django iojs node rails</p>
    <p>Language clojure gcc golang haskell hylang java jruby julia mono perl php pypy python r-base rakudo-star ruby thri&lt;</p>
    <p>Web Server glassfish h&gt;pd je&gt;y nginx php-zendserver tomcat ! Other drupal ghost hello-world jenkins rabbitmq registry sonarqube</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads  HelloBench  Analysis</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers? !</p>
    <p>How much image data is needed for container startup? !</p>
    <p>How similar are reads between runs?</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers? !</p>
    <p>How much image data is needed for container startup? !</p>
    <p>How similar are reads between runs?</p>
  </div>
  <div class="page">
    <p>HelloBench images  circle: commit  red: image</p>
  </div>
  <div class="page">
    <p>Image Data Depth</p>
  </div>
  <div class="page">
    <p>Image Data Depth</p>
    <p>half of data is at depth 9+</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers?</p>
    <p>half of data is at depth 9+  design implication: flatten layers at runtime</p>
    <p>How much image data is needed for container startup?</p>
    <p>How similar are reads between runs?</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers?</p>
    <p>half of data is at depth 9+  design implication: flatten layers at runtime</p>
    <p>How much image data is needed for container startup?</p>
    <p>How similar are reads between runs?</p>
  </div>
  <div class="page">
    <p>Container Amplification</p>
  </div>
  <div class="page">
    <p>Container Amplification</p>
  </div>
  <div class="page">
    <p>Container Amplification</p>
    <p>only 6.4% of data needed during startup</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers?</p>
    <p>half of data is at depth 9+  design implication: flatten layers at runtime</p>
    <p>How much image data is needed for container startup?  6.4% of data is needed  design implication: lazily fetch data</p>
    <p>How similar are reads between runs?</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers?</p>
    <p>half of data is at depth 9+  design implication: flatten layers at runtime</p>
    <p>How much image data is needed for container startup?  6.4% of data is needed  design implication: lazily fetch data</p>
    <p>How similar are reads between runs?</p>
  </div>
  <div class="page">
    <p>Repeat Runs measure hits/misses for second of two runs</p>
  </div>
  <div class="page">
    <p>Repeat Runs</p>
    <p>up to 99% of reads could be serviced by a cache</p>
    <p>measure hits/misses for second of two runs</p>
  </div>
  <div class="page">
    <p>Questions How is data distributed across Docker layers?</p>
    <p>half of data is at depth 9+  design implication: flatten layers at runtime</p>
    <p>How much image data is needed for container startup?  6.4% of data is needed  design implication: lazily fetch data</p>
    <p>How similar are reads between runs?  containers from same image have similar read patterns  design implication: share cache state between containers</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS  Design  Performance</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
    <p>Operations  push  pull  run</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>layers:</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>directories:</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>PUSH directories:</p>
    <p>A B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B Ctar.gz</p>
    <p>PUSH</p>
    <p>directories:</p>
    <p>A B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B Ctar.gz</p>
    <p>PUSH</p>
    <p>directories:</p>
    <p>A B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>PULL</p>
    <p>directories:</p>
    <p>A B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>tar.gz</p>
    <p>PULL</p>
    <p>directories:</p>
    <p>A B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Ztar.gz</p>
    <p>PULL directories:</p>
    <p>A B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>PULL directories:</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN directories:</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN scratch dir:</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>root FS</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>read B</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>read B</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>read X</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>read X</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>append Z</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>append Z</p>
    <p>Z copy</p>
    <p>A B CA B C</p>
    <p>X Y Z</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>append Z</p>
    <p>Z</p>
    <p>X Y Z</p>
    <p>A B CA B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>append Z</p>
    <p>Z</p>
    <p>X Y Z</p>
    <p>A B CA B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver Uses AUFS file system (Another Union FS)</p>
    <p>stores data in an underlying FS (e.g., ext4)  each Docker layer is a directory in underlying FS  union these directories to create complete view of FS</p>
    <p>AUFS Driver</p>
    <p>A B C</p>
    <p>X Y Z</p>
    <p>RUN AUFS</p>
    <p>Z</p>
    <p>X Y Z</p>
    <p>A B CA B CA B C</p>
    <p>Uses AUFS file system (Another Union FS)  stores data in an underlying FS (e.g., ext4)  layer  directory in underlying FS  root FS  union of layer directories</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS  Design  Performance</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>AUFS File System</p>
  </div>
  <div class="page">
    <p>AUFS File System</p>
    <p>Deep data is slow</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver</p>
  </div>
  <div class="page">
    <p>AUFS Storage Driver</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Slacker Driver Goals</p>
    <p>make push+pull very fast  utilize powerful primitives of a modern storage server (Tintri VMstore)  create drop-in replacement; dont change Docker framework itself</p>
    <p>Design  lazy pull  layer flattening  cache sharing</p>
  </div>
  <div class="page">
    <p>Slacker Driver Goals</p>
    <p>make push+pull very fast  utilize powerful primitives of a modern storage server (Tintri VMstore)  create drop-in replacement; dont change Docker framework itself</p>
    <p>Design  lazy pull  layer flattening  cache sharing</p>
  </div>
  <div class="page">
    <p>images and containers</p>
    <p>Prefetch vs. Lazy Fetch</p>
    <p>registry</p>
    <p>images</p>
    <p>worker</p>
    <p>containers</p>
    <p>registry worker</p>
    <p>AUFS Slacker</p>
  </div>
  <div class="page">
    <p>images and containers</p>
    <p>Prefetch vs. Lazy Fetch</p>
    <p>registry</p>
    <p>images</p>
    <p>worker</p>
    <p>containers</p>
    <p>registry worker</p>
    <p>AUFS Slacker</p>
    <p>significant copying  over network  to/from disk</p>
    <p>centralized storage  easy sharing</p>
  </div>
  <div class="page">
    <p>Prefetch vs. Lazy Fetch</p>
    <p>registry</p>
    <p>images</p>
    <p>worker</p>
    <p>containers</p>
    <p>AUFS</p>
    <p>images and containers</p>
    <p>registry worker</p>
    <p>Slacker</p>
  </div>
  <div class="page">
    <p>Prefetch vs. Lazy Fetch</p>
    <p>images and containers</p>
    <p>registry</p>
    <p>Slacker</p>
    <p>loopback ext4</p>
    <p>container</p>
    <p>NFS File</p>
  </div>
  <div class="page">
    <p>loopback ext4</p>
    <p>container</p>
    <p>Prefetch vs. Lazy Fetch</p>
    <p>Slacker registry</p>
    <p>NFS File</p>
  </div>
  <div class="page">
    <p>loopback ext4</p>
    <p>container</p>
    <p>Prefetch vs. Lazy Fetch</p>
    <p>Slacker registry</p>
    <p>NFS File</p>
    <p>VMstore abstractions</p>
  </div>
  <div class="page">
    <p>VMstore Abstractions Copy-on-Write</p>
    <p>VMstore provides snapshot() and clone()  block granularity avoids AUFSs problems with file granularity</p>
    <p>snapshot(nfs_path)!  create read-only copy of NFS file  return snapshot ID</p>
    <p>clone(snapshot_id)!  create r/w NFS file from snapshot</p>
    <p>Slacker Usage  NFS files  container storage  snapshots  image storage  clone()  provision container from image  snapshot()  create image from container</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>container</p>
    <p>NFS file</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>snapshot</p>
    <p>Worker A: push</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>snapshot</p>
    <p>snap N COW</p>
    <p>Worker A: push</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>Worker A: push</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker A: push</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker A: push</p>
    <p>img</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Note: registry is only a name server. Maps layer metadata  snapshot ID</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker B: pull and run</p>
    <p>worker B</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker B: pull and run</p>
    <p>worker B N</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker B: pull and run</p>
    <p>worker B</p>
    <p>clone N</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker B: pull and run</p>
    <p>worker B</p>
    <p>clone N</p>
    <p>COW NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>registry</p>
    <p>Worker B: pull and run</p>
    <p>worker B</p>
    <p>NFS file</p>
    <p>N</p>
    <p>snap N</p>
    <p>Nimg</p>
  </div>
  <div class="page">
    <p>Snapshot and Clone</p>
    <p>Tintri VMstore</p>
    <p>worker A</p>
    <p>NFS file snap N</p>
    <p>registry</p>
    <p>Worker B: pull and run</p>
    <p>worker B</p>
    <p>NFS file</p>
    <p>container</p>
    <p>snap N</p>
    <p>img</p>
  </div>
  <div class="page">
    <p>Slacker Driver Goals</p>
    <p>make push+pull very fast  utilize powerful primitives of a modern storage server (Tintri VMstore)  create drop-in replacement; dont change Docker framework itself</p>
    <p>Design  lazy pull  layer flattening  cache sharing</p>
  </div>
  <div class="page">
    <p>Slacker Driver Goals</p>
    <p>make push+pull very fast  utilize powerful primitives of a modern storage server (Tintri VMstore)  create drop-in replacement; dont change Docker framework itself</p>
    <p>Design  lazy pull  layer flattening  cache sharing</p>
  </div>
  <div class="page">
    <p>Slacker Flattening File Namespace Level</p>
    <p>flatten layers  if B is child of A, then copy A to B to start. Dont make B empty</p>
    <p>Block Level  do COW+dedup beneath NFS files, inside VMstore</p>
    <p>ext4 dir dir dir dir</p>
    <p>copy-on-write ext4 NFS NFS NFS NFS</p>
    <p>copy-on-write</p>
    <p>ext4 ext4 ext4</p>
    <p>AUFS Slacker</p>
    <p>namespace</p>
    <p>block</p>
  </div>
  <div class="page">
    <p>Slacker Flattening File Namespace Level</p>
    <p>flatten layers  if B is child of A, then copy A to B to start. Dont make B empty</p>
    <p>Block Level  do COW+dedup beneath NFS files, inside VMstore</p>
    <p>ext4 A B C D</p>
    <p>copy-on-write ext4 A AB ABC ABCD</p>
    <p>copy-on-write</p>
    <p>ext4 ext4 ext4</p>
    <p>AUFS Slacker</p>
    <p>namespace</p>
    <p>block</p>
  </div>
  <div class="page">
    <p>Challenge: Framework Assumptions</p>
    <p>Assumed Layout Actual Layout</p>
    <p>D</p>
    <p>C</p>
    <p>B</p>
    <p>A</p>
    <p>La ye</p>
    <p>rs</p>
    <p>A B C D</p>
    <p>A B C</p>
    <p>A B</p>
    <p>A La</p>
    <p>ye rs</p>
    <p>runnable</p>
    <p>runnable</p>
  </div>
  <div class="page">
    <p>Challenge: Framework Assumptions</p>
    <p>D</p>
    <p>C</p>
    <p>B</p>
    <p>A</p>
    <p>La ye</p>
    <p>rs</p>
    <p>A B C D</p>
    <p>A B C</p>
    <p>A B</p>
    <p>A La</p>
    <p>ye rs</p>
    <p>pull pull</p>
    <p>Assumed Layout Actual Layout</p>
  </div>
  <div class="page">
    <p>Challenge: Framework Assumptions</p>
    <p>D</p>
    <p>C</p>
    <p>B</p>
    <p>A</p>
    <p>La ye</p>
    <p>rs</p>
    <p>A B C D</p>
    <p>A B C</p>
    <p>A B</p>
    <p>A La</p>
    <p>ye rs</p>
    <p>optimize</p>
    <p>Strategy: lazy cloning. Dont clone non-top layers until Docker tries to mount them.</p>
    <p>Assumed Layout Actual Layout</p>
  </div>
  <div class="page">
    <p>Slacker Driver Goals</p>
    <p>make push+pull very fast  utilize powerful primitives of a modern storage server (Tintri VMstore)  create drop-in replacement; dont change Docker framework itself</p>
    <p>Design  lazy pull  layer flattening  cache sharing</p>
  </div>
  <div class="page">
    <p>Slacker Driver Goals</p>
    <p>make push+pull very fast  utilize powerful primitives of a modern storage server (Tintri VMstore)  create drop-in replacement; dont change Docker framework itself</p>
    <p>Design  lazy pull  layer flattening  cache sharing</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>storage for 2 containers started from same image</p>
    <p>ABC image</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>read</p>
    <p>ABX ABY</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>AABX ABY</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>A</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>A</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>A A</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>A A</p>
    <p>Challenge: how to avoid space and I/O waste?</p>
  </div>
  <div class="page">
    <p>NFS Client:</p>
    <p>Challenge: Cache Sharing</p>
    <p>cache:</p>
    <p>ABX ABY</p>
    <p>A A</p>
    <p>Strategy: track differences and deduplicate I/O (more in paper)</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Questions What are deployment and development speedups?</p>
    <p>How is long-term performance? !</p>
  </div>
  <div class="page">
    <p>Questions What are deployment and development speedups?</p>
    <p>How is long-term performance?</p>
  </div>
  <div class="page">
    <p>HelloBench Performance</p>
    <p>deployment: pull+run development: push+pull+run</p>
  </div>
  <div class="page">
    <p>Questions What are deployment and development speedups?</p>
    <p>5x and 20x faster respectively (median speedup)</p>
    <p>How is long-term performance?</p>
  </div>
  <div class="page">
    <p>Questions What are deployment and development speedups?</p>
    <p>5x and 20x faster respectively (median speedup)</p>
    <p>How is long-term performance?</p>
  </div>
  <div class="page">
    <p>Server Benchmarks Databases and Web Servers</p>
    <p>PostgreSQL  Redis  Apache web server (static)  io.js Javascript server (dynamic)</p>
    <p>Experiment  measure throughput (after startup)  run 5 minutes</p>
  </div>
  <div class="page">
    <p>Server Benchmarks Databases and Web Servers</p>
    <p>PostgreSQL  Redis  Apache web server (static)  io.js Javascript server (dynamic)</p>
    <p>Experiment  measure throughput (after startup)  run 5 minutes</p>
    <p>Result: Slacker is always at least as fast as AUFS</p>
  </div>
  <div class="page">
    <p>Questions What are deployment and development speedups?</p>
    <p>5x and 20x faster respectively (median speedup)</p>
    <p>How is long-term performance?  there is no long-term penalty for being lazy</p>
  </div>
  <div class="page">
    <p>Slacker Outline Background</p>
    <p>Container Workloads</p>
    <p>Default Driver: AUFS</p>
    <p>Our Driver: Slacker</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion Containers are inherently lightweight</p>
    <p>but existing frameworks are not</p>
    <p>COW between workers is necessary for fast startup  use shared storage  utilize VMstore snapshot and clone</p>
    <p>Slacker driver  5x deployment speedup  20x development speedup</p>
    <p>HelloBench: https://github.com/Tintri/hello-bench</p>
  </div>
</Presentation>
