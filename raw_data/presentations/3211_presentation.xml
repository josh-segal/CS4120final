<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>JIGSAW: Protecting Resource Access by Inferring Programmer</p>
    <p>Expectations Hayawardh Vijayakumar, Xinyang Ge,</p>
    <p>Mathias Payer, Trent Jaeger SIIS Lab, Penn State University</p>
    <p>University of California Berkeley</p>
    <p>Samsung Research</p>
    <p>Purdue! University</p>
  </div>
  <div class="page">
    <p>Resource Access  Programs require a variety of resources to function</p>
    <p>Libraries</p>
    <p>Configuration Files</p>
    <p>Log Files</p>
    <p>Application Data</p>
    <p>How hard can accessing resources securely be?</p>
    <p>Just a simple open(filename), right?</p>
  </div>
  <div class="page">
    <p>A Webservers Story   Consider a university department webserver</p>
    <p>Apache Webserver</p>
    <p>student2/ public_html</p>
    <p>student1/ public_html</p>
    <p>faculty1/ public_html</p>
    <p>GET /~student1/index.html HTTP/1.1</p>
    <p>/etc/ passwd</p>
    <p>Link</p>
  </div>
  <div class="page">
    <p>Attack Video</p>
  </div>
  <div class="page">
    <p>What Just Happened?</p>
    <p>Webserver</p>
    <p>Password File</p>
    <p>Web Pages</p>
    <p>Authenticate</p>
    <p>! Passwd</p>
    <p>File</p>
    <p>Web PagesAuthenticate</p>
    <p>OK Not OK</p>
    <p>Passwd File</p>
    <p>Web PagesServe Webpage</p>
    <p>OK Not OK</p>
    <p>Program received an unexpected resource</p>
    <p>when expecting</p>
    <p>when expecting</p>
    <p>Serve Webpage</p>
  </div>
  <div class="page">
    <p>Deployment</p>
    <p>Cause 1 - Multiple Parties</p>
    <p>ProgrammerAdministrator OS distributor</p>
    <p>CodeConfiguration Access Control Policy</p>
    <p>??? ???</p>
    <p>open(config_file) open(html_file) open(tmp_file) mismatc</p>
    <p>mismatch</p>
    <p>Expectations mismatch, blame each other</p>
    <p>/var/www rwxrwxrwx</p>
    <p>UserDir public_html</p>
    <p>config_file, html_file protected</p>
  </div>
  <div class="page">
    <p>Cause 2 - Code Complexity</p>
    <p>Even when expected, filters complicated to write</p>
    <p>Check for symlink (lstat)</p>
    <p>Check for lstat-open race</p>
    <p>Check for inode recycling</p>
    <p>For each binding</p>
    <p>/, home, public_html, ...</p>
    <p>Cannot expect programmers to get this right!</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
    <p>Match programmer expectation onto system</p>
    <p>Irrespective of OS access control or admin configuration</p>
    <p>If programmer expects to access only , then they should not access</p>
    <p>Unexpected attack surface</p>
    <p>If programmer expects , then they should not access</p>
    <p>Well-known confused deputy</p>
  </div>
  <div class="page">
    <p>Solution Overview  {P} - System calls where programmer expects adversary control</p>
    <p>{S} - System calls in deployment that adversaries actually control</p>
    <p>{R} - System calls in deployment that access adversary-modifiable resources</p>
  </div>
  <div class="page">
    <p>Resource Access  Inputs: name, bindings</p>
    <p>Output: resource</p>
    <p>Popen(name2)</p>
    <p>Name1 Name2 Name3 Name4</p>
    <p>! Res3</p>
    <p>! Res2</p>
    <p>! Res1</p>
    <p>Namespace</p>
    <p>Bindings</p>
    <p>!</p>
    <p>Access Control Policy</p>
    <p>System Call</p>
    <p>Error / Resource</p>
    <p>Operating System</p>
  </div>
  <div class="page">
    <p>Resource Access Attacks  Adversaries control inputs -- name, bindings to</p>
    <p>direct victim programs to unexpected resources</p>
    <p>P open(name2)</p>
    <p>Name1 Name2 Name3 Name4</p>
    <p>! Res3</p>
    <p>! Res2</p>
    <p>! Res1</p>
    <p>Namespace</p>
    <p>Bindings</p>
    <p>!</p>
    <p>Access Control Policy</p>
    <p>System Call</p>
    <p>Error / Resource</p>
    <p>Operating System</p>
    <p>A Name</p>
    <p>Bind</p>
  </div>
  <div class="page">
    <p>Resource Access  Account for 10-15% of total vulnerabilities yearly</p>
  </div>
  <div class="page">
    <p>Previous Work  Problems during resource access known for a very</p>
    <p>long time</p>
    <p>TOCTTOU attacks known at least since 1973</p>
    <p>Solutions proposed, broken</p>
    <p>Cai et al. [SP 10]</p>
    <p>All system-only defences for TOCTTOU have false positives unless they know about system call intent</p>
    <p>More generally,</p>
    <p>Need to account for programmer expectations and system deployment</p>
  </div>
  <div class="page">
    <p>In this talk ...</p>
    <p>Can we find vulnerabilities due to mismatches?</p>
    <p>Can we protect programs from being exploited?</p>
  </div>
  <div class="page">
    <p>To Find Mismatches  Need a model that describes</p>
    <p>How a program performs resource access.  How do programs build names, bindings?</p>
    <p>What are programmer expectations for resource access?  If they expect adversary access to names, bindings: protect</p>
    <p>If not: do nothing :-&gt;</p>
  </div>
  <div class="page">
    <p>Programmer Expectations  Can we determine where a programmer expects</p>
    <p>adversarial control of resource access?</p>
    <p>Strawman solution</p>
    <p>Ask programmers to add annotations in code</p>
    <p>Insight: There are already annotations (sort of) -</p>
    <p>Filters (defensive code)!</p>
    <p>Program</p>
    <p>r1</p>
    <p>r2</p>
    <p>r3</p>
    <p>r4</p>
  </div>
  <div class="page">
    <p>Write defensive checks (filters) to protect resource accesses  Name filters  Binding filters</p>
    <p>Resource Access Filters</p>
    <p>cfd = open(config_file)</p>
    <p>log_file = read(cfd)</p>
    <p>sfd = socket(port 80)</p>
    <p>html_file = read(sfd)</p>
    <p>if S_ISLNK(html_file) log(error)</p>
    <p>html_fd = open(html_file) contents = read(html_fd) write(sfd, contents)</p>
    <p>lfd = open(log_file)</p>
    <p>log(OK)</p>
    <p>loop {</p>
    <p>}</p>
    <p>strip(html_file, &quot;../&quot;)</p>
    <p>r1</p>
    <p>r2</p>
    <p>r3</p>
    <p>r4</p>
    <p>NF</p>
    <p>B F</p>
  </div>
  <div class="page">
    <p>Filters as Annotations  Heuristic: If programmer expects adversarial control</p>
    <p>of resource access, she will add name/binding filters</p>
    <p>Corollary: No filter access only</p>
    <p>=)</p>
  </div>
  <div class="page">
    <p>Name Flow Graph  Data flow graph</p>
    <p>Nodes: resource accesses</p>
    <p>Edges: name flows</p>
    <p>Augment name flow graph with filter information</p>
    <p>cfd = open(config_file)</p>
    <p>log_file = read(cfd)</p>
    <p>sfd = socket(port 80)</p>
    <p>html_file = read(sfd)</p>
    <p>if S_ISLNK(html_file) log(error)</p>
    <p>html_fd = open(html_file) contents = read(html_fd) write(sfd, contents)</p>
    <p>lfd = open(log_file)</p>
    <p>log(OK)</p>
    <p>loop {</p>
    <p>}</p>
    <p>strip(html_file, &quot;../&quot;)</p>
    <p>r1 r2 r3</p>
    <p>r4</p>
    <p>Network Socket</p>
    <p>Config</p>
    <p>File</p>
    <p>ELF binary loader</p>
    <p>Log File</p>
    <p>HTML file</p>
    <p>r1</p>
    <p>r2</p>
    <p>r3r4</p>
  </div>
  <div class="page">
    <p>Determine P from filters  No filter not in expected attack surface P</p>
    <p>If no binding filter</p>
    <p>!</p>
    <p>If no name filter on an outgoing name flow</p>
    <p>!</p>
    <p>If a resource access not in P is reachable</p>
    <p>!</p>
    <p>Any remaining resource access is in P</p>
    <p>=)</p>
    <p>r1Base Case 1 r1 62 P=)</p>
    <p>r1Base Case 2 r1 62 P=)</p>
    <p>r1 62 P=)</p>
  </div>
  <div class="page">
    <p>Likely Missing Filters  From the name flow graph, we can locate cases</p>
    <p>where filters are likely missing</p>
    <p>Filter incoming name flow but not binding</p>
    <p>!</p>
    <p>Filter binding but not outgoing name flow</p>
    <p>r1</p>
    <p>r1</p>
  </div>
  <div class="page">
    <p>Runtime Mismatches</p>
  </div>
  <div class="page">
    <p>In this talk ...</p>
    <p>Can we find vulnerabilities due to mismatches?</p>
    <p>Can we protect vulnerabilities from being exploited?</p>
  </div>
  <div class="page">
    <p>Process Firewall</p>
    <p>File</p>
    <p>Dir</p>
    <p>IPC</p>
    <p>Access Control</p>
    <p>Signal</p>
    <p>OPERATING SYSTEMUSERSPACE</p>
    <p>Passwd</p>
    <p>Students</p>
    <p>! Check Passwd</p>
    <p>Serve HTML File</p>
    <p>.edu webserver</p>
    <p>/home/ student/ home.html</p>
    <p>Process Firewall</p>
    <p>Introspect</p>
    <p>Protection per resource access [Eurosys 13]</p>
  </div>
  <div class="page">
    <p>Process Introspection</p>
    <p>Why can we introspect into process?</p>
    <p>Mimicry attacks (intrusion detection systems)?</p>
    <p>The Process Firewall protects victim processes instead of confining adversary processes</p>
    <p>Mimicry only invalidates processs own protection</p>
    <p>Access Control</p>
    <p>Process Firewall</p>
    <p>Confine Protect</p>
  </div>
  <div class="page">
    <p>Process Firewall  Enforce rules without requiring program code or</p>
    <p>system policy/configuration change</p>
    <p>Each invariant is instantiated using rule templates</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Evaluation - Expectation</p>
    <p>In 4/5 programs, programmers implicitly expect &gt; 55% of resource accesses to never be adversary controlled in any deployment</p>
    <p>OpenSSH most secure</p>
    <p>We found 2 missing checks that corresponded to 2 previously-unknown vulnerabilities and 1 default misconfiguration in the Apache webserver</p>
  </div>
  <div class="page">
    <p>.htpasswd Vulnerability  Apache allows users to specify a password file to protect</p>
    <p>their pages in .htaccess</p>
    <p>!</p>
    <p>!</p>
    <p>Neither name flow nor binding is filtered</p>
    <p>User can specify any password file, even of other users, or the system-wide /etc/passwd (if in proper format)</p>
    <p>Can be used to brute-force passwords</p>
    <p>No rate limit on HTTP auth (unlike terminal logins)</p>
    <p>Vulnerability hidden all these years, showing importance of automated and principled reasoning of resource access</p>
  </div>
  <div class="page">
    <p>Vulnerability  Typical example of resource access vulnerability</p>
    <p>Who is to blame?</p>
    <p>Admin for not recognizing adversaries and improper configuration?</p>
    <p>OS distributor for default insecure configuration?</p>
    <p>Programmer for providing the configuration option?</p>
    <p>Difficult to tell, but the Process Firewall can fix vulnerability without forcing code or access control policy change</p>
  </div>
  <div class="page">
    <p>Enforcement</p>
    <p>In total, 281 rules for Inv. 1, 97 for Inv. 2</p>
    <p>We verified the ability of our generated rules to block discovered vulnerabilities</p>
    <p>In addition, we tested previously-known representative resource access</p>
  </div>
  <div class="page">
    <p>Conclusion  We define resource access vulnerabilities and</p>
    <p>propose principled invariants to block them</p>
    <p>Evaluation on programs showed</p>
    <p>Programmers have implicit expectations  In 4/5 programs we tested, &gt; 55% of resource accesses were</p>
    <p>unprotected</p>
    <p>Resource access currently reasoned in an ad-hoc way  Found vulnerabilities and a default misconfiguration in Apache</p>
    <p>Enforcement by the Process Firewall shows promise in blocking attacks without code or policy change</p>
  </div>
  <div class="page">
    <p>Process Firewall Availability</p>
    <p>https://github.com/siis/pfwall!</p>
    <p>hayawardh@gmail.com</p>
  </div>
</Presentation>
