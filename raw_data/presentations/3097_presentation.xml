<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CASSYOPIA Compiler Assisted Systems</p>
    <p>Optimization</p>
    <p>Mohan Rajagopalan Saumya Debray</p>
    <p>Matti Hiltunen Rick Schlichting</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Orthogonal concerns in optimization</p>
    <p>Whats missing</p>
    <p>Symbiotic optimizations</p>
    <p>Optimize whole system: OS + Application</p>
    <p>Use compiler optimization techniques along with OS design to minimize overheads</p>
    <p>Share information between OS and executable to allow fine grained control and tuning</p>
    <p>Design concerns</p>
  </div>
  <div class="page">
    <p>Example: System Call Optimization</p>
    <p>Optimize a programs system call behavior</p>
    <p>Profile system call sequences</p>
    <p>Cluster system calls  Compiler optimization techniques,</p>
    <p>e.g., code motion, loop unrolling</p>
    <p>Kernel support: multi-call  Execute multiple calls per boundary crossing</p>
    <p>Implementation  Optimization pass using PLTO binary rewriting toolkit</p>
  </div>
  <div class="page">
    <p>Preliminary Results System Call Optimization</p>
    <p>copy</p>
    <p>% Im</p>
    <p>po v.</p>
    <p>mpeg_play</p>
    <p>DG1 DG2 DG3 DG4 DG5 Input file</p>
    <p>Power consumption  Cache misses</p>
  </div>
  <div class="page">
    <p>Looking Ahead  Boundary crossing costs</p>
    <p>Distributed systems</p>
    <p>Fine-grain adaptation control  Power management</p>
    <p>Context-based adaptive scheduling</p>
    <p>Generic optimizations  Permission checking</p>
    <p>Redundant code elimination</p>
  </div>
  <div class="page">
    <p>CASSYOPIA HotOS IX</p>
  </div>
</Presentation>
