<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Analyzing and Minimizing the Impact of Opportunity Cost in</p>
    <p>QoS-aware Job Scheduling</p>
    <p>M. Islam, P. Balaji, G. Sabin and P. Sadayappan</p>
    <p>Computer Science and Engineering, Ohio State University</p>
    <p>Mathematics and Computer Science, Argonne National Laboratory</p>
    <p>RNet Technologies</p>
  </div>
  <div class="page">
    <p>Publicly Usable Supercomputer Centers</p>
    <p>Becoming increasingly common (OSC, SDSC, etc)</p>
    <p>Jobs submitted with resource requirements</p>
    <p>CPUs, Memory, Estimate Runtime</p>
    <p>Scheduler maps the requirements of the jobs to available resources</p>
    <p>If resources are available, job is scheduled immediately</p>
    <p>Else, queued and scheduled to execute at a later time</p>
    <p>Several job schedulers existing today: PBS, Maui, Silver</p>
    <p>Independent Parallel Job Scheduling Model</p>
    <p>Dynamically arriving Independent Parallel Jobs</p>
    <p>Popular model in most supercomputers</p>
    <p>Job Schedulers Today</p>
  </div>
  <div class="page">
    <p>Job Scheduler Processor Space</p>
    <p>User Execution Queue</p>
    <p>Reservation Queue</p>
    <p>Processors Status</p>
    <p>P6</p>
    <p>P1 P2</p>
    <p>P3 P4</p>
    <p>P5</p>
    <p>Simple Job Scheduler Model</p>
    <p>Job J1; 2 processors; 1 hour</p>
    <p>J1</p>
    <p>J2</p>
    <p>J3</p>
    <p>Job J2; 5 processors; 1 hourJob J3; 4 processors; 1 hour</p>
  </div>
  <div class="page">
    <p>J1</p>
    <p>J2</p>
    <p>Time</p>
    <p>P ro</p>
    <p>c e</p>
    <p>s so</p>
    <p>rs J3</p>
    <p>Current Time</p>
    <p>J5 J6J4 Job Queue</p>
    <p>Running Jobs</p>
    <p>Two Dimensional Scheduling Grid</p>
  </div>
  <div class="page">
    <p>Significant prior research on best-effort scheduling</p>
    <p>Optimizations proposed for different metrics  Utilization (U): what fraction of the resources is actually utilized.</p>
    <p>U = Resource Used / Resource Provided</p>
    <p>Response Time (RT): Time from submission to completion  RT = Jobs completion time  Jobs arrival time</p>
    <p>Slowdown (SD): How much slower is the system as compared to a dedicated system</p>
    <p>SD = Jobs Response Time / Jobs Runtime</p>
    <p>Prioritization: Static (user or group based) and Dynamic (how long the job was in the queue)</p>
    <p>NERSC cluster provides static prioritization based on job cost</p>
    <p>Previous Research in Job Scheduling</p>
  </div>
  <div class="page">
    <p>Users can request for guarantees in turnaround time  E.g., Submit a job before leaving work at 5pm and request for a</p>
    <p>deadline at 8am the next morning</p>
    <p>Two Components for QoS in Job Scheduling  Job Scheduling Component [islam03:qops]</p>
    <p>Admission Control: Can we meet the specified deadline?  Once admitted, cannot miss the specified deadline</p>
    <p>Revenue Management  Appropriate charging model  Urgent jobs cost more than non-urgent jobs  Need to prioritize jobs such that the incoming revenue is maximized</p>
    <p>[islam03:qops] QoPS: A QoS based scheme for Parallel Job Scheduling, M. Islam, P. Balaji, P. Sadayappan and D. K. Panda. Published in JSSPP 03 and LNCS 04.</p>
    <p>QoS in Job Scheduling</p>
  </div>
  <div class="page">
    <p>J1</p>
    <p>J2</p>
    <p>Time</p>
    <p>P ro</p>
    <p>c e</p>
    <p>ss o</p>
    <p>rs J3</p>
    <p>Current Time</p>
    <p>Running Jobs</p>
    <p>Opportunity Cost in Job Scheduling</p>
    <p>J4 (10$)</p>
    <p>D4 J5 (500$)</p>
    <p>D5</p>
    <p>By scheduling J4, we lost the future opportunity to schedule the more expensive job J5</p>
    <p>J4 has an opportunity cost of at least 500$</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>When the user submits a job, she pays an explicit cost</p>
    <p>However, the system also pays an implicit opportunity cost</p>
    <p>Accepting a job is beneficial if its explicit cost is greater</p>
    <p>than its opportunity cost</p>
    <p>How do we determine the opportunity cost?</p>
    <p>It depends on future jobs  no way to know</p>
    <p>How do we design a predictive algorithm to estimate the</p>
    <p>opportunity cost of a job?</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Motivation</p>
    <p>Background on QoPS and QoS Cost Models</p>
    <p>Minimizing Opportunity Cost with Value-aware QoPS</p>
    <p>Dynamic Self-learning Value-aware QoPS</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Advanced Reservation (before QoPS)  Before QoPS, the only way to guarantee a turnaround time</p>
    <p>Execution time window statically decided upfront</p>
    <p>Resources underutilized due to fragmentation  If resources are available early, the job cant be rescheduled</p>
    <p>Primary Goals of QoPS:  Provide admission control</p>
    <p>When a new job arrives:  Reorder existing jobs to find feasible schedules  Select the best feasible schedule</p>
    <p>Ensure deadline guarantees for the accepted jobs  A later arriving job cannot force an existing job to miss its deadline!</p>
    <p>QoPS: QoS for Parallel Job Scheduling</p>
  </div>
  <div class="page">
    <p>Most supercomputer centers today do not provide QoS</p>
    <p>Jobs are scheduled in a best-effort manner</p>
    <p>Thus, no special cost models for QoS either</p>
    <p>Some supercomputers provide prioritization (e.g., NERSC)</p>
    <p>Different queues of jobs exist</p>
    <p>More expensive queues get higher priority</p>
    <p>For QoS-driven supercomputers, a new model required</p>
    <p>Provider-centric: Supercomputer-center determines the charge</p>
    <p>User-centric: User offers the price / bid</p>
    <p>Supercomputer Cost Model</p>
  </div>
  <div class="page">
    <p>Market-based User-centric Cost Model</p>
    <p>User offers a price to the system  Market-based bidding system</p>
    <p>Proposed by Culler and Chase</p>
    <p>Price offered reduces with time (decay factor)</p>
    <p>Offered price touches zero at the job deadline time</p>
    <p>R e</p>
    <p>ve n</p>
    <p>u e</p>
    <p>Time</p>
    <p>Maximum Revenue</p>
    <p>Deadline</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Motivation</p>
    <p>Background on QoPS and QoS Cost Models</p>
    <p>Minimizing Opportunity Cost with Value-aware QoPS</p>
    <p>Dynamic Self-learning Value-aware QoPS</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Value-aware QoPS (VQoPS)</p>
    <p>Job acceptance based on two criteria:  The deadline should be achievable (evaluated using QoPS)  The job should provide enough revenue so as to offset a statically</p>
    <p>assumed opportunity cost  Product a fixed opportunity cost factor (OC-Factor) and the size of the</p>
    <p>job (i.e., number of processor-hours requested)  Large jobs (more nodes or long running) have a higher opportunity</p>
    <p>cost since they can potentially impact more later arriving jobs</p>
    <p>The OC-Factor has to be tuned by the system</p>
    <p>administrator based on the expected workload!  Complicated to evaluate  Difficult to adapt if workload changes</p>
  </div>
  <div class="page">
    <p>J1</p>
    <p>J2</p>
    <p>Time</p>
    <p>P ro</p>
    <p>c e</p>
    <p>ss o</p>
    <p>rs J3</p>
    <p>Current Time</p>
    <p>Running Jobs</p>
    <p>VQoPS: An Example Scenario</p>
    <p>J4 (10$)</p>
    <p>D4 J5 (500$)</p>
    <p>D5</p>
    <p>By not scheduling J4, we retained the future opportunity to schedule the more expensive job J5</p>
    <p>Choosing the right OC-Factor is important for the scheme to be effective</p>
    <p>Less than static opportunity cost (C)</p>
  </div>
  <div class="page">
    <p>VQoPS performance for different traces</p>
    <p>Relative Urgency</p>
    <p>Cost</p>
    <p>Urgent Jobs (%)</p>
    <p>Offered Load</p>
    <p>OC-Factors</p>
  </div>
  <div class="page">
    <p>VQoPS performance for different traces</p>
    <p>Relative Urgency</p>
    <p>Cost</p>
    <p>Urgent Jobs (%)</p>
    <p>Offered Load</p>
    <p>OC-Factors</p>
    <p>No single static OC-Factor is best for all cases.</p>
    <p>Best OC-Factor is dependent on trace characteristics.</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Motivation</p>
    <p>Background on QoPS and QoS Cost Models</p>
    <p>Minimizing Opportunity Cost with Value-aware QoPS</p>
    <p>Dynamic Self-learning Value-aware QoPS</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Estimate OC-Factor dynamically for best revenue gain</p>
    <p>OC-Factor depends on</p>
    <p>System Load</p>
    <p>Relative frequency of urgent jobs</p>
    <p>Relative price of urgent jobs</p>
    <p>DVQoPS considers a history-based adaptive technique</p>
    <p>to consider all of the factors</p>
    <p>Perform a what-if simulation by rolling back and find the best</p>
    <p>OC-Factor</p>
    <p>Dynamic Self-learning Value-aware QoPS</p>
  </div>
  <div class="page">
    <p>What-if Simulations in DVQoPS OC Factor = O</p>
    <p>O1 O2 O3 ON OC Factor = O3</p>
    <p>O1 O2 O3 ON</p>
    <p>OC Factor = O</p>
    <p>O3 gave us the best revenue  pick O3O2 gave us the best revenue  pick O2</p>
    <p>OC Factor = O2</p>
    <p>We dynamically pick the OC-Factor that gave the best revenue in the previous roll-back interval</p>
  </div>
  <div class="page">
    <p>Impact of Rollback Window Size  Balancing Sensitivity and Stability</p>
    <p>Sensitivity: Too long a rollback window loses sensitivity to small changes in the workload</p>
    <p>Stability: Too short a rollback window loses stability and causes the results to be noisy</p>
    <p>Need to calculate rollback window dynamically</p>
    <p>Rollback Window Size</p>
    <p>Average Instability in OC-Factor</p>
    <p>Load Variance Sensitivity</p>
    <p>Revenue</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Motivation</p>
    <p>Background on QoPS and QoS Cost Models</p>
    <p>Minimizing Opportunity Cost with Value-aware QoPS</p>
    <p>Dynamic Self-learning Value-aware QoPS</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Two categories of jobs</p>
    <p>Urgent Jobs</p>
    <p>Normal Jobs</p>
    <p>Job Mixes (Urgent, Normal):</p>
    <p>(80%, 20%), (50%, 50%), (20%, 80%)</p>
    <p>Urgency factor:</p>
    <p>Urgent job Revenue = URG_FACT x Normal Job Revenue</p>
    <p>URG_FACT used 10, 5, 2</p>
    <p>URG_FACT refers to the height and steepness of the cost</p>
    <p>model curve</p>
    <p>Simulation Setup</p>
  </div>
  <div class="page">
    <p>Impact of Job Mix (% of Urgent Jobs)</p>
    <p>DVQoPS performs within 2-3% of the best VQoPS implementation</p>
  </div>
  <div class="page">
    <p>Service Differentiation and Job Urgency</p>
    <p>DVQoPS provides appropriate amount of service differentiation depending on the cost difference</p>
    <p>As job urgency increases, higher VQoPS values perform better  DVQoPS automatically adjusts itself</p>
  </div>
  <div class="page">
    <p>Impact of Inaccurate User Estimates  Overall improvement in</p>
    <p>revenue drops considerably</p>
    <p>Inaccurate estimates result in</p>
    <p>a lot of wastage due to strict</p>
    <p>provisioning</p>
    <p>DVQoPS still performs</p>
    <p>within 2% of the best</p>
    <p>VQoPS implementation</p>
    <p>15% better than QoPS</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Motivation</p>
    <p>Background on QoPS and QoS Cost Models</p>
    <p>Minimizing Opportunity Cost with Value-aware QoPS</p>
    <p>Dynamic Self-learning Value-aware QoPS</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Concluding Remarks and Future Work  QoS in Scheduling is a new concept with growing interest</p>
    <p>Schemes such as QoPS (our previous work) that provide deadlines exist, but they do not deal with system revenue</p>
    <p>In this paper, we analyzed the behavior of systems when a cost model is introduced  System dynamism adds a new parameter Opportunity Cost which</p>
    <p>makes the issue unpredictable</p>
    <p>We presented two schemes, VQoPS and DVQoPS, which analyze Opportunity cost and minimize its impact</p>
    <p>Simulations show up to 200% better performance in some cases</p>
    <p>Future Work: Integrating QoS and prioritization and incorporating the code into standard schedulers</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Contacts:</p>
    <p>M. Islam: islammo@cse.ohio-state.edu</p>
    <p>P. Balaji: balaji@mcs.anl.gov</p>
    <p>G. Sabin: gsabin@rnet-tech.com</p>
    <p>P. Sadayappan: saday@cse.ohio-state.edu</p>
    <p>Web pointers:</p>
    <p>http://www.mcs.anl.gov/~balaji</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
  </div>
  <div class="page">
    <p>J6 J5 J4 J3 J2 J1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3 J2 J1J6 J5 J4 J3 J2 JN J1</p>
    <p>J1</p>
    <p>J6 J5 J4 J3 J2 JNJ6 J5 J4 J3 J2</p>
    <p>JN</p>
    <p>J1</p>
    <p>J2</p>
    <p>J1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3J6 J5 J4</p>
    <p>J3</p>
    <p>J1</p>
    <p>JN</p>
    <p>J2</p>
    <p>J1</p>
    <p>JN</p>
    <p>J3</p>
    <p>J6 J5 J4 J2</p>
    <p>J1</p>
    <p>JN</p>
    <p>J3</p>
    <p>J2</p>
    <p>J6 J5 J4</p>
    <p>MAX_ALLOWED_VIOLATION = 2</p>
    <p>CURRENT_VIOLATION = 0</p>
    <p>J6 J5 J4 J2 J3</p>
    <p>J1</p>
    <p>JN CURRENT_VIOLATION = 1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3 J2 J1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3 J2 J1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3 J2 J1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3 J2 J1</p>
    <p>JN</p>
    <p>J6 J5 J4 J3 J2 J1</p>
    <p>QoPS: An Example Scenario</p>
  </div>
  <div class="page">
    <p>Rollback Interval</p>
    <p>Effective rollback interval is estimated in every</p>
    <p>MAX_ROLLBACK_INTERVAL (e.g. 128 Hr)</p>
    <p>MaxRevenue = Revenue (currentSchedule)</p>
    <p>For each testInterval in {1hr, 4hr, 16hr, 64hr, 128Hr}  Run what-if simulation by rolling back testInterval  Revenue = Calculate revenue of the schedule  If Revenue &gt; MaxRevenue</p>
    <p>MaxRevenue = Revenue  Effective Rollback Interval = testInterval</p>
    <p>End for</p>
  </div>
</Presentation>
