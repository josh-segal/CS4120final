<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Practical Hardening of Crash-Tolerant Systems</p>
    <p>Marco Sera)ini (Yahoo! Research BCN) Joint work with: Miguel Correia (IST-UTL / INESC-ID)</p>
    <p>Daniel Gmez Ferro and Flavio Junqueira (Yahoo! Research BCN)</p>
  </div>
  <div class="page">
    <p>Dependability in data centers 0 Crashes are commonplace 0  but scarier faults do occur</p>
  </div>
  <div class="page">
    <p>A horror story An 8-hour system-wide outage due to a single hardware fault</p>
  </div>
  <div class="page">
    <p>What happened? 0 Quoted from the Amazon service health dashboard 0 A handful of messages had a single bit corrupted 0 The message was still intelligible, but the system state information was incorrect</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>Process i</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>Process i</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>min</p>
    <p>Process i</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Process i</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Process i</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>min</p>
    <p>x</p>
    <p>y</p>
    <p>Process i Process j</p>
  </div>
  <div class="page">
    <p>Error propagation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>min</p>
    <p>x</p>
    <p>y</p>
    <p>Event handling</p>
    <p>Process i Process j</p>
  </div>
  <div class="page">
    <p>A new approach to error isolation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>min</p>
    <p>x</p>
    <p>y</p>
    <p>Event handling</p>
    <p>Process i Process j</p>
  </div>
  <div class="page">
    <p>A new approach to error isolation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>min</p>
    <p>x</p>
    <p>y</p>
    <p>Event handling</p>
    <p>Process i Process j</p>
  </div>
  <div class="page">
    <p>A new approach to error isolation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>min</p>
    <p>x</p>
    <p>y</p>
    <p>Event handling</p>
    <p>Process i Process j</p>
  </div>
  <div class="page">
    <p>A new approach to error isolation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>min</p>
    <p>x</p>
    <p>y</p>
    <p>Event handling</p>
    <p>Process i Process j</p>
  </div>
  <div class="page">
    <p>Data corruptions 0 Commodity disks are known to be unreliable 0 Faulty [irmware is the [irst reason</p>
  </div>
  <div class="page">
    <p>Existing approaches Background</p>
  </div>
  <div class="page">
    <p>Common practice 0 Manual placement of error detection checks 0 Application knowledge 0 Time consuming</p>
  </div>
  <div class="page">
    <p>Byzantine fault model 0 Black-box model of faulty processes: adversarial 0 Hardening for error isolation [Nysiad NSDI 2008] 0 Based on state machine replication 0 Replication and performance costs</p>
    <p>Servers</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Byzantine faults 0 Byzantine hardening covers attacks and bugs 0  assuming, e.g., design diversity of replicas 0 Unpractical in most systems</p>
    <p>Attacks Bugs Data corruptions</p>
  </div>
  <div class="page">
    <p>Byzantine faults 0 Byzantine hardening covers attacks and bugs 0  assuming, e.g., design diversity of replicas 0 Unpractical in most systems</p>
    <p>Attacks</p>
    <p>Security</p>
    <p>Bugs</p>
    <p>V &amp; V</p>
    <p>Data corruptions</p>
    <p>ASC Hardening</p>
  </div>
  <div class="page">
    <p>Process and fault models De[ining Arbitrary State Corruptions</p>
  </div>
  <div class="page">
    <p>Process model</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>min</p>
    <p>mout</p>
    <p>State</p>
  </div>
  <div class="page">
    <p>ASC fault model 0 An Arbitrary State Corruption can make a process 0 Crash 0 Assign an arbitrary value to any variable 0 Start the execution from an arbitrary instruction</p>
    <p>v 5</p>
    <p>z 10</p>
    <p>PC 20</p>
    <p>v 12</p>
    <p>z 7</p>
    <p>PC 320</p>
  </div>
  <div class="page">
    <p>Fault frequency 0 One fault for every processed input message</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u= r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>min</p>
    <p>mout</p>
    <p>State</p>
  </div>
  <div class="page">
    <p>Fault diversity 0 A corrupted variable is different from its replica</p>
    <p>v 5</p>
    <p>z 10</p>
    <p>PC 20</p>
    <p>v 12</p>
    <p>z 7</p>
    <p>PC 320</p>
    <p>original replica original replica</p>
  </div>
  <div class="page">
    <p>Error propagation 0 Fault diversity does not hold 0 Hardening preserves diversity</p>
    <p>u</p>
    <p>v</p>
    <p>Original Replica</p>
  </div>
  <div class="page">
    <p>Error propagation 0 Fault diversity does not hold 0 Hardening preserves diversity</p>
    <p>u</p>
    <p>v</p>
    <p>Original Replica</p>
  </div>
  <div class="page">
    <p>Error propagation 0 Fault diversity does not hold 0 Hardening preserves diversity</p>
    <p>u</p>
    <p>v ?</p>
    <p>Original Replica Fault diversity</p>
  </div>
  <div class="page">
    <p>Error propagation 0 Fault diversity does not hold 0 Hardening preserves diversity</p>
    <p>u</p>
    <p>v</p>
    <p>Original Replica Fault diversity</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>ASC hardening From ASC faults to crashes and message omissions</p>
  </div>
  <div class="page">
    <p>From ASC to crashes 0 Transparent: to the hardened process 0 Local: no process replication on multiple machines 0 Untrusted: can have faults while executing hardening</p>
    <p>HARDENING RUNTIME</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>Original Replica</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>Fault diversity</p>
    <p>Original Replica</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>Fault diversity</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>Fault diversity</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>Fault diversity</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
    <p>Error propagation!</p>
  </div>
  <div class="page">
    <p>Simple hardening</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
    <p>Error propagation!</p>
  </div>
  <div class="page">
    <p>Protecting computation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
    <p>Redundant event handling</p>
  </div>
  <div class="page">
    <p>Protecting computation</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
    <p>Redundant event handling</p>
  </div>
  <div class="page">
    <p>Checking the checkers</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
  </div>
  <div class="page">
    <p>Checking the checkers</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
  </div>
  <div class="page">
    <p>Checking the checkers</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>Redundant event handling</p>
    <p>CHECK</p>
  </div>
  <div class="page">
    <p>Checking the checkers</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>Upon receive message &lt;REQ, r&gt; do! !if v &gt; 5 then! ! !u = r + v + 5;! !else! ! !u = r + v;! !v = u;! !send &lt;WRITE, v&gt; to process p!</p>
    <p>CHECK</p>
    <p>Redundant event handling</p>
  </div>
  <div class="page">
    <p>Issue with redundant checks</p>
    <p>u</p>
    <p>v</p>
    <p>min</p>
    <p>Original Replica</p>
  </div>
  <div class="page">
    <p>Issue with redundant checks</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
  </div>
  <div class="page">
    <p>Issue with redundant checks</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>CHECK</p>
    <p>Redundant event handling</p>
  </div>
  <div class="page">
    <p>Issue with redundant checks</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>CHECK</p>
    <p>Redundant event handling</p>
  </div>
  <div class="page">
    <p>Incremental buffer</p>
    <p>u</p>
    <p>v</p>
    <p>mout</p>
    <p>Event handling</p>
    <p>min</p>
    <p>Original Replica</p>
    <p>CHECK</p>
    <p>Redundant event handling</p>
  </div>
  <div class="page">
    <p>Control [low errors 0 A control [low error may subvert the execution 0 An event handler could be executed twice 0 Event handling may be skipped or incomplete</p>
  </div>
  <div class="page">
    <p>PASC runtime</p>
    <p>EH1 EH2 EH3</p>
    <p>Process state</p>
    <p>PASC checks</p>
    <p>PASC library</p>
    <p>User- de[ined</p>
    <p>Transparent</p>
    <p>Replica state</p>
  </div>
  <div class="page">
    <p>PASC runtime</p>
    <p>EH1 EH2 EH3</p>
    <p>Process state</p>
    <p>PASC checks</p>
    <p>PASC library</p>
    <p>User- de[ined</p>
    <p>Transparent</p>
    <p>Replica state</p>
  </div>
  <div class="page">
    <p>PASC runtime</p>
    <p>EH1 EH2 EH3</p>
    <p>Process state</p>
    <p>PASC checks</p>
    <p>PASC library</p>
    <p>User- de[ined</p>
    <p>Transparent</p>
    <p>github.com/yahoo/pasc</p>
    <p>Replica state</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Hardening an echo server</p>
    <p>L a te</p>
    <p>n c y i n m</p>
    <p>s</p>
    <p>Throughput in Kops/s</p>
    <p>PBFT PASC Echo</p>
    <p>Unprot. Echo</p>
  </div>
  <div class="page">
    <p>Hardening State Machine Replication</p>
    <p>La te</p>
    <p>nc y</p>
    <p>in m</p>
    <p>s</p>
    <p>Throughput in Kops/s</p>
    <p>PBFT PASC Paxos</p>
    <p>Unprot. Paxos</p>
  </div>
  <div class="page">
    <p>Hardening State Machine Replication</p>
    <p>+ 70 % - 15 %</p>
    <p>La te</p>
    <p>nc y</p>
    <p>in m</p>
    <p>s</p>
    <p>Throughput in Kops/s</p>
    <p>PBFT PASC Paxos</p>
    <p>Unprot. Paxos</p>
  </div>
  <div class="page">
    <p>Zookeeper</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y i n</p>
    <p>m s</p>
    <p>Throughput in Kops/s</p>
    <p>PASC ZooKeeper Unprot. ZooKeeper</p>
  </div>
  <div class="page">
    <p>Memory overhead</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>u s a g e i n M</p>
    <p>B</p>
    <p>Request size in bytes</p>
    <p>Unprot. Paxos PASC Paxos</p>
  </div>
  <div class="page">
    <p>Scalability</p>
    <p>M a x .</p>
    <p>th ro</p>
    <p>u g h p u t</p>
    <p>(k o p s/</p>
    <p>se c)</p>
    <p>Number of servers</p>
    <p>PASC sKV</p>
    <p>Unprot. sKV</p>
  </div>
  <div class="page">
    <p>PASC fault coverage 0 Injected random bit [lips in Paxos 0 Code corruptions: bytecode and binary code 0 State corruptions: pointers and primitive values</p>
    <p>Code corruptions State corruptions Unprot PASC Unprot PASC</p>
    <p>Undet. 3 0 93 0 Det. - 1 - 330 Crash 1640 1663 2301 2066 Total 2856 2856 5237 5237</p>
  </div>
  <div class="page">
    <p>Conclusions 0 Hardware data corruptions occur in data centers 0 Model as Arbitrary State Corruptions 0 ASC-hardening algorithm for error isolation 0 Local: does not require replication</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>sera)ini@yahoo-inc.com</p>
    <p>github.com/yahoo/pasc</p>
  </div>
</Presentation>
