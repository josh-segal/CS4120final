<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Non-Blocking Join Achieving Higher Early Result Rate with Statistical Guarantees</p>
    <p>Shimin Chen* Phillip B. Gibbons* Suman Nath+</p>
    <p>*Intel Labs Pittsburgh +Microsoft Research</p>
    <p>PR-Join:</p>
  </div>
  <div class="page">
    <p>Online Aggregation</p>
    <p>Data warehouse and business intelligence  Fast growing multi-billion dollar market</p>
    <p>Interactive ad-hoc queries on big data  Important for detecting new trends  Fast response time hard to achieve</p>
    <p>One promising approach: Online Aggregation (OLA)</p>
    <p>Provides early representative results for aggregate queries (sum, count, avg, etc.)</p>
    <p>For example, average is 123.4  5.6 with 95% confidence</p>
    <p>Essential to OLA: non-blocking join algorithm PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath 2</p>
    <p>[Hellerstein et al. 97]</p>
  </div>
  <div class="page">
    <p>Non-Blocking Join for OLA</p>
    <p>OLA assumption: relations are in random order 3</p>
    <p>Relation A</p>
    <p>Relation B Main</p>
    <p>memory</p>
    <p>Temporary storage</p>
    <p>Spill Read back</p>
    <p>Estimates based on current results</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Design Goals of Non-Blocking Joins</p>
    <p>Fast, representative early results  Good end-to-end performance</p>
    <p>Wrong query: stop early Accurate enough: stop early Slow convergence: wait longer  High variance, high selectivity, high group counts,</p>
    <p>data skews</p>
    <p>Need the full, accurate result: finish query</p>
    <p>User may find</p>
    <p>Design Goals</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Two Metrics in Algorithm Analysis</p>
    <p>Good end-to-end performance:  Fast early results:</p>
    <p>Result Rate = Newly covered area x selectivity</p>
    <p>I/Os for covering the new area</p>
    <p>new</p>
    <p>n e w</p>
    <p>records from B</p>
    <p>re c o rd</p>
    <p>s fr</p>
    <p>o m</p>
    <p>A</p>
    <p>Join: check all pairs of records from A and B</p>
    <p>Early : before completely reading A and B PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
    <p>Total I/Os</p>
  </div>
  <div class="page">
    <p>Design Space</p>
    <p>HighLow</p>
    <p>H ig</p>
    <p>h Lo</p>
    <p>w</p>
    <p>Total I/O Cost</p>
    <p>Ea rl</p>
    <p>y Re</p>
    <p>pr es</p>
    <p>en ta</p>
    <p>ti ve</p>
    <p>Re</p>
    <p>su lt</p>
    <p>R at</p>
    <p>e</p>
    <p>Hash Ripple [Luo, et al02] SMS [Jermaine, et al05]</p>
    <p>GRACE [Kitsuregawa, et al 83]</p>
    <p>Ripple</p>
    <p>PR-Join targets</p>
    <p>Ideal</p>
    <p>DBO [Jermaine, et al07]</p>
    <p>[Haas &amp; Hellerstein99]</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Performance Result Preview</p>
    <p>Near-optimal total I/O cost</p>
    <p>Higher early result rate</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  PR-Join (Partitioned expanding Ripple Join) Algorithm  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Background: Ripple Join</p>
    <p>records from B</p>
    <p>re co</p>
    <p>rd s</p>
    <p>fr om</p>
    <p>A</p>
    <p>spilled new</p>
    <p>s p</p>
    <p>il le</p>
    <p>d n</p>
    <p>e w</p>
    <p>For each ripple:</p>
    <p>Read new records from A and B; check for matches</p>
    <p>Read spilled records; check for matches with new records</p>
    <p>Spill new to disk</p>
    <p>[Haas &amp; Hellerstein99]</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Observations of Ripple Join</p>
    <p>Total I/Os: O(N2)  N = total # of input pages in A and B  I/Os of ripples form an arithmetic series</p>
    <p>Result rate of a ripple is higher if wider ripple  Increase ripple width</p>
    <p>But ripple width limited by the memory size</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
    <p>Result Rate = Newly covered area x selectivity</p>
    <p>I/Os for covering the new area</p>
    <p>Super linear growth</p>
    <p>Grows linearly</p>
  </div>
  <div class="page">
    <p>PR-Join Idea 1: Multiplicatively Expanding Ripples</p>
    <p>Total I/Os: O(N) linear  I/Os of ripples form a geometric series</p>
    <p>Higher result rate:  Wider ripple leads to higher result rate</p>
    <p>But must overcome memory size limitation</p>
  </div>
  <div class="page">
    <p>PR-Join Idea 2: Hash Partitioning</p>
    <p>Each partition &lt; memory  Every join invocation performs a ripple on a partition</p>
    <p>Estimation is updated after every join invocation  Much faster user responses  Statistically sound</p>
    <p>empty</p>
    <p>empty</p>
    <p>Partitioned on Join key</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Statistical Guarantees</p>
    <p>Idea: hash partitioning disjoint sub-spaces  Stratified sampling in statistics</p>
    <p>Statistical estimate: 1) Ripple join formula for every partition 2) Stratified sampling formula to combine estimates</p>
    <p>from partitioned ripples</p>
    <p>empty</p>
    <p>empty</p>
    <p>Partitioned on Join key</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Comparing Analytical Performance</p>
    <p>Early Result Rate Symmetric Hash 1 (when data fit in memory) Hash Ripple 0.5 SMS 0.6 Two-Way DBO 1.2 Ripple 1, 1.25, 1.40, 1.50, , 2 PR-Join 1, 1.7, 3.2, 6.2, 12.2,</p>
    <p>(Parameter setting details in paper) PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  PR-Join Algorithm  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Non-Blocking Join for OLA</p>
    <p>Relation A</p>
    <p>Relation B Main</p>
    <p>memory</p>
    <p>Temporary storage</p>
    <p>Spill Read back</p>
    <p>Estimates based on current results</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
    <p>Hard disk or SSD</p>
    <p>Hard disks</p>
  </div>
  <div class="page">
    <p>Disk as Temp Storage</p>
    <p>10GB joins 10GB</p>
    <p>500MB memory</p>
    <p>PR-Join achieves much better end-to-end performance than Ripple Join</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>Marginal Result Rate</p>
    <p>PR-Join achieves an order of magnitude higher result rate than Ripple Join</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
    <p>Disk as temp</p>
    <p>storage</p>
  </div>
  <div class="page">
    <p>SSD as Temp Storage</p>
    <p>Using SSD, PR-Join achieves near optimal I/O costs</p>
    <p>10GB joins 10GB</p>
    <p>500MB memory</p>
    <p>Temp I/Os are almost completely overlapped with I/Os to read input</p>
    <p>PR-Join: A Non-Blocking Join Achieving Higher Early Result Rate Shimin Chen, Phillip B. Gibbons, Suman Nath</p>
  </div>
  <div class="page">
    <p>More Details in Paper</p>
    <p>Joining finite data streams:  PR-Join can be easily used for joining finite data streams  Compared with state-of-the-art algorithm (RPJ [Tao et al.05])  PR-Join achieves better performance</p>
    <p>Analysis of non-blocking join algorithms for OLA  PR-Join parameter choices  Handling skews  More experimental results (see us at the plenary session)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>In this paper, we propose a new non-blocking join algorithm: PR-Join (Partitioned expanding Ripple Join)</p>
    <p>PR-Join for Online Aggregation:  Provides statistical guarantee  An order of magnitude higher result rate than prior approach  Near optimal total I/O cost</p>
    <p>PR-Join for finite data streams:  Better performance than state-of-the-art algorithm</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>shimin.chen@intel.com</p>
  </div>
</Presentation>
