<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dynamic, partially-stateful data-flow for high-performance Web applications</p>
    <p>Jon Gjengset</p>
    <p>Jonathan Behrens Lara Timb Arajo Martin Ek</p>
    <p>Eddie Kohler M. Frans Kaashoek Robert Morris</p>
    <p>Malte Schwarzkopf</p>
    <p>Noria</p>
  </div>
  <div class="page">
    <p>!2</p>
  </div>
  <div class="page">
    <p>Frontend !2</p>
  </div>
  <div class="page">
    <p>Frontend !2</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend !2</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend</p>
    <p>!3</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend</p>
    <p>!3</p>
    <p>Stories Votes</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend</p>
    <p>!4</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend</p>
    <p>!4</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend</p>
    <p>!4</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
  </div>
  <div class="page">
    <p>Backend</p>
    <p>Frontend</p>
    <p>!4</p>
    <p>Stories Votes</p>
    <p>Slow reads, repeated work!</p>
    <p>90% reads</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!5</p>
    <p>Stories Votes</p>
    <p>Precomputed results</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!5</p>
    <p>Stories Votes</p>
    <p>Precomputed results</p>
    <p>READ</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!5</p>
    <p>Stories Votes</p>
    <p>Precomputed results</p>
    <p>READ</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
    <p>Store in base table?  manual, slow.</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!5</p>
    <p>Stories Votes</p>
    <p>Precomputed results</p>
    <p>READ</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER Query</p>
    <p>Store in base table?  manual, slow.</p>
    <p>memcached?  complex [Facebook NSDI13].</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!5</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Streaming data-flow?</p>
    <p>Store in base table?  manual, slow.</p>
    <p>memcached?  complex [Facebook NSDI13].</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!6</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Streaming data-flow?</p>
    <p>INSERT</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!6</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Streaming data-flow?</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!6</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Materialized view</p>
    <p>Streaming data-flow?</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!6</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Materialized view</p>
    <p>Fast reads. Efficient writes. Parallelizes well.</p>
    <p>Streaming data-flow?</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!7</p>
    <p>Stories VotesChallenges</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!7</p>
    <p>Stories Votes</p>
    <p>Change queries? Restart!</p>
    <p>Challenges State-of-the-art data-flow systems:</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!7</p>
    <p>Stories Votes</p>
    <p>Change queries? Restart!</p>
    <p>Challenges State-of-the-art data-flow systems:</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER SUM 4</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!7</p>
    <p>Stories Votes</p>
    <p>Change queries? Restart!  Memory footprint? Grows!</p>
    <p>Challenges State-of-the-art data-flow systems:</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER SUM 4</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories VotesNoria</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Noria</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Change queries? Live.</p>
    <p>Noria</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Change queries? Live.</p>
    <p>Noria</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Change queries? Live.  Memory footprint? Bounded.</p>
    <p>Noria</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Change queries? Live.  Memory footprint? Bounded.</p>
    <p>Noria</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!8</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Change queries? Live.  Memory footprint? Bounded.  No global coordination.</p>
    <p>Noria</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
  </div>
  <div class="page">
    <p>New model: Partially-stateful data-flow</p>
    <p>!9</p>
  </div>
  <div class="page">
    <p>!10</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow</p>
    <p>Data-flow state is partial: entries for some keys are absent ( ).</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!10</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow</p>
    <p>Data-flow state is partial: entries for some keys are absent ( ).</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!10</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow</p>
    <p>Data-flow state is partial: entries for some keys are absent ( ).</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!10</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow</p>
    <p>Data-flow state is partial: entries for some keys are absent ( ).</p>
    <p>Lower memory footprint.</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!10</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow</p>
    <p>Data-flow state is partial: entries for some keys are absent ( ).</p>
    <p>Lower memory footprint. No need to update absent entries.</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!10</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow</p>
    <p>Data-flow state is partial: entries for some keys are absent ( ).</p>
    <p>Lower memory footprint. No need to update absent entries. Enables live data-flow changes.</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!11</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow: upqueries</p>
    <p>READ</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!11</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow: upqueries</p>
    <p>??? Need to fill absent entry! READ</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!11</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow: upqueries</p>
    <p>??? Need to fill absent entry! READ</p>
    <p>Solution: upquery through data-flow.  Compute missing entry from</p>
    <p>upstream state</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!12</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow: upqueries</p>
    <p>Solution: upquery through data-flow.  Compute missing entry from</p>
    <p>upstream state  Response fills missing entry</p>
    <p>READ</p>
  </div>
  <div class="page">
    <p>Frontend</p>
    <p>!12</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Partially-stateful data-flow: upqueries</p>
    <p>Solution: upquery through data-flow.  Compute missing entry from</p>
    <p>upstream state  Response fills missing entry</p>
    <p>READ</p>
  </div>
  <div class="page">
    <p>!13</p>
    <p>Start new views and operator state empty, fill via upqueries.</p>
    <p>Partial state enables live data-flow changes</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!13</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Start new views and operator state empty, fill via upqueries.</p>
    <p>Partial state enables live data-flow changes</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
  </div>
  <div class="page">
    <p>!13</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Start new views and operator state empty, fill via upqueries.</p>
    <p>Partial state enables live data-flow changes</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>READ #</p>
  </div>
  <div class="page">
    <p>!13</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Start new views and operator state empty, fill via upqueries.</p>
    <p>Partial state enables live data-flow changes</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>READ #</p>
  </div>
  <div class="page">
    <p>!13</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Start new views and operator state empty, fill via upqueries.</p>
    <p>Partial state enables live data-flow changes</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>READ #</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>High performance requires concurrency</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>High performance requires concurrency</p>
    <p>Process operators concurrently. Read from views concurrently. Process shards concurrently.</p>
    <p>Without global coordination!</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>High performance requires concurrency</p>
    <p>Process operators concurrently. Read from views concurrently. Process shards concurrently.</p>
    <p>Without global coordination!</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>#</p>
    <p>$</p>
    <p>SUM</p>
    <p>#</p>
    <p>$</p>
    <p>Stories Votes</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>Frontend</p>
    <p>High performance requires concurrency</p>
    <p>Process operators concurrently. Read from views concurrently. Process shards concurrently.</p>
    <p>Without global coordination!</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!15</p>
    <p>Must maintain correctness under concurrency!</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!15</p>
    <p>Must maintain correctness under concurrency!</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>COUNT 2</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>COUNT 2</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>COUNT 2</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>COUNT 2</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>Upquery response is a snapshot of state</p>
    <p>COUNT 2</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>Upquery response is a snapshot of state</p>
    <p>COUNT 2</p>
    <p>includes 12</p>
    <p>does not include3 3</p>
  </div>
  <div class="page">
    <p>Correctness under concurrency</p>
    <p>!16</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>Upquery response is a snapshot of state</p>
    <p>COUNT 2</p>
    <p>includes 12</p>
    <p>does not include</p>
    <p>Solution: Maintain order of upquery response and surrounding updates, despite lack of global coordination.</p>
  </div>
  <div class="page">
    <p>Upquery responses in total order with updates</p>
    <p>!17</p>
    <p>Goal: upquery restores state as if present all along.</p>
  </div>
  <div class="page">
    <p>Upquery responses in total order with updates</p>
    <p>!17</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>resulting state respects total order</p>
  </div>
  <div class="page">
    <p>Upquery responses in total order with updates</p>
    <p>!17</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>resulting state respects total order</p>
    <p>resulting state violates total order</p>
  </div>
  <div class="page">
    <p>Upquery responses in total order with updates</p>
    <p>!17</p>
    <p>Goal: upquery restores state as if present all along.</p>
    <p>resulting state respects total order</p>
    <p>resulting state violates total order</p>
    <p>More complex cases: merged upquery responses, evictions (Paper).</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!18</p>
    <p>Must maintain correctness under concurrency!</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!18</p>
    <p>COUNT</p>
    <p>absent</p>
    <p>Must maintain correctness under concurrency!</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!18</p>
    <p>COUNT</p>
    <p>absent</p>
    <p>Must maintain correctness under concurrency!</p>
    <p>Drop updates that touch absent state, future upquery repeats them.</p>
  </div>
  <div class="page">
    <p>Challenges implementing partially-stateful data-flow</p>
    <p>!18</p>
    <p>COUNT</p>
    <p>absent</p>
    <p>Must maintain correctness under concurrency!</p>
    <p>Drop updates that touch absent state, future upquery repeats them.</p>
    <p>(see Paper)</p>
  </div>
  <div class="page">
    <p>!19</p>
    <p>Noria implementation</p>
  </div>
  <div class="page">
    <p>!19</p>
    <p>Noria implementation</p>
  </div>
  <div class="page">
    <p>!19</p>
    <p>Noria implementation</p>
    <p>MySQL adapter</p>
  </div>
  <div class="page">
    <p>!19</p>
    <p>Noria implementation</p>
    <p>Data-flow graph</p>
    <p>MySQL adapter</p>
    <p>Transform</p>
  </div>
  <div class="page">
    <p>!19</p>
    <p>Noria implementation</p>
    <p>Data-flow graph</p>
    <p>MySQL adapter</p>
    <p>Transform</p>
  </div>
  <div class="page">
    <p>!19</p>
    <p>Noria implementation</p>
    <p>Data-flow graph</p>
    <p>MySQL adapter</p>
    <p>45k lines of Rust + 15k libraries  RocksDB for base table storage  ZooKeeper for leader election</p>
    <p>Transform</p>
  </div>
  <div class="page">
    <p>!20</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>!20</p>
    <p>Evaluation</p>
    <p>Amazon EC2 c5.4xlarge instance (16 vCPUs) Open-loop clients, measuring latency &amp; throughput</p>
    <p>Setup</p>
  </div>
  <div class="page">
    <p>!20</p>
    <p>Evaluation</p>
    <p>Amazon EC2 c5.4xlarge instance (16 vCPUs) Open-loop clients, measuring latency &amp; throughput</p>
    <p>Setup</p>
    <p>multi-machine experiments comparison with differential dataflow } see Paper</p>
  </div>
  <div class="page">
    <p>!21</p>
    <p>Case study: Lobsters (http://lobste.rs)</p>
  </div>
  <div class="page">
    <p>!21</p>
    <p>Case study: Lobsters (http://lobste.rs)</p>
    <p>Ruby-on-Rails application with MySQL backend</p>
  </div>
  <div class="page">
    <p>!21</p>
    <p>Case study: Lobsters (http://lobste.rs)</p>
    <p>Ruby-on-Rails application with MySQL backend Hand-optimized by</p>
    <p>developers to pre-compute aggregations</p>
  </div>
  <div class="page">
    <p>!21</p>
    <p>Case study: Lobsters (http://lobste.rs)</p>
    <p>Ruby-on-Rails application with MySQL backend Hand-optimized by</p>
    <p>developers to pre-compute aggregations Noria data-flow with</p>
  </div>
  <div class="page">
    <p>!21</p>
    <p>Case study: Lobsters (http://lobste.rs)</p>
    <p>Ruby-on-Rails application with MySQL backend Hand-optimized by</p>
    <p>developers to pre-compute aggregations Noria data-flow with</p>
  </div>
  <div class="page">
    <p>!22</p>
    <p>Can Noria improve Lobsters performance?</p>
  </div>
  <div class="page">
    <p>!22</p>
    <p>Can Noria improve Lobsters performance? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!22</p>
    <p>Can Noria improve Lobsters performance? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!22</p>
    <p>Can Noria improve Lobsters performance? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!22</p>
    <p>Noria with natural queries supports 5x MySQLs throughput.</p>
    <p>Can Noria improve Lobsters performance? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!23</p>
    <p>How does Noria compare to alternatives? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!23</p>
    <p>How does Noria compare to alternatives?</p>
    <p>Zipf-distributed story ID, 95% reads, 5% writes No TX, all in-memory</p>
    <p>B et</p>
    <p>te r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!23</p>
    <p>How does Noria compare to alternatives?</p>
    <p>Zipf-distributed story ID, 95% reads, 5% writes No TX, all in-memory</p>
    <p>B et</p>
    <p>te r</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>!24</p>
    <p>How does Noria compare to alternatives? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
    <p>Zipf-distributed story ID, 95% reads, 5% writes No TX, all in-memory</p>
  </div>
  <div class="page">
    <p>!24</p>
    <p>How does Noria compare to alternatives? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Better</p>
    <p>Zipf-distributed story ID, 95% reads, 5% writes No TX, all in-memory</p>
  </div>
  <div class="page">
    <p>!24</p>
    <p>How does Noria compare to alternatives?</p>
    <p>Noria outperforms an in-memory keyvalue store and simplifies its interface.</p>
    <p>B et</p>
    <p>te r</p>
    <p>Better</p>
    <p>Zipf-distributed story ID, 95% reads, 5% writes No TX, all in-memory</p>
  </div>
  <div class="page">
    <p>!25</p>
    <p>Can Noria change queries without downtime?</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>StoriesVotes</p>
  </div>
  <div class="page">
    <p>!25</p>
    <p>Can Noria change queries without downtime?</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>FILTER</p>
    <p>StoriesVotes</p>
    <p>AVG</p>
    <p>JOIN</p>
    <p>COUNT</p>
    <p>Ratings</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>Can Noria change queries without downtime? B</p>
    <p>et te</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>Can Noria change queries without downtime?</p>
    <p>new table &amp; query added</p>
    <p>B et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>Can Noria change queries without downtime?</p>
    <p>new table &amp; query added</p>
    <p>B et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>Can Noria change queries without downtime?</p>
    <p>new table &amp; query added</p>
    <p>B et</p>
    <p>te r</p>
    <p>Zipf-distributed story ID, 95% reads; 2M existing votes at transition</p>
  </div>
  <div class="page">
    <p>!27</p>
    <p>Can Noria change queries without downtime? B</p>
    <p>et te</p>
    <p>r</p>
    <p>Zipf-distributed story ID, 95% reads; 2M existing votes at transition Old view reads are live throughout</p>
  </div>
  <div class="page">
    <p>!27</p>
    <p>Can Noria change queries without downtime?</p>
    <p>instantaneous transition, no downtime for writes</p>
    <p>B et</p>
    <p>te r</p>
    <p>Zipf-distributed story ID, 95% reads; 2M existing votes at transition Old view reads are live throughout</p>
  </div>
  <div class="page">
    <p>!27</p>
    <p>Can Noria change queries without downtime?</p>
    <p>instantaneous transition, no downtime for writes</p>
    <p>B et</p>
    <p>te r</p>
    <p>Zipf-distributed story ID, 95% reads; 2M existing votes at transition Old view reads are live throughout</p>
  </div>
  <div class="page">
    <p>!27</p>
    <p>Can Noria change queries without downtime?</p>
    <p>instantaneous transition, no downtime for writes</p>
    <p>Noria achieves downtime-free query change with partial state.</p>
    <p>B et</p>
    <p>te r</p>
    <p>Zipf-distributed story ID, 95% reads; 2M existing votes at transition Old view reads are live throughout</p>
  </div>
  <div class="page">
    <p>New partially-stateful data-flow model.  Noria: new web application backend based on data-flow.  Partial state saves space and allows live change.  Supports high throughput on one or more machines.  Open source, try it out!</p>
    <p>!28</p>
    <p>Noria  Summary</p>
  </div>
  <div class="page">
    <p>New partially-stateful data-flow model.  Noria: new web application backend based on data-flow.  Partial state saves space and allows live change.  Supports high throughput on one or more machines.  Open source, try it out!</p>
    <p>!28</p>
    <p>https://pdos.csail.mit.edu/noria</p>
    <p>Noria  Summary</p>
    <p>(see our demo at poster #37 today!)</p>
  </div>
</Presentation>
