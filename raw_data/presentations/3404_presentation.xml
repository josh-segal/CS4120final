<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Extension Breakdown:</p>
    <p>Security Analysis of Browsers Extension Resources Control Policies</p>
    <p>Iskander Sanchez-Rola, Igor Santos, Davide Balzarotti</p>
  </div>
  <div class="page">
    <p>Extensions</p>
    <p>Browser extensions are the most popular technique currently available to extend the functionalities of modern web browsers.</p>
    <p>Extensions exist for most browser families, including major web browsers such as Firefox, Chrome, Safari, Opera and Edge.</p>
    <p>They can be easily installed by users from a central repository.</p>
  </div>
  <div class="page">
    <p>Extensions</p>
    <p>An extension is a bundle of resources, including code (such as HTML or JS), images, style sheets...</p>
    <p>Third-party websites should never have access to them, as some contain private information, vulnerabilities, keys</p>
    <p>Browsers need to somehow control the access to extensions files. This task is tricky and error prone.</p>
  </div>
  <div class="page">
    <p>Resources Control Policies</p>
    <p>Access Control Settings (Chromium+Firefox) Extensions themselves specify which resources they need to be kept private and which can be made publicly available. By default all resources are considered private.</p>
    <p>URI Randomization (Safari) There is no distinction between private or public resources, but instead the base URI of the extension is randomly re-generated in each session.</p>
  </div>
  <div class="page">
    <p>Access Control Settings</p>
    <p>Browsers currently implement ACS by performing two consecutive checks to verify: (i) if a certain extension is installed (ii) if the requested resource is publicly available</p>
    <p>This is prone to a timing side-channel attack that an adversary can use to identify the actual reason behind a request denial:  The extension is not present  Its resources are kept private</p>
  </div>
  <div class="page">
    <p>Access Control Settings X-extension://[fakeExtID]/[fakePath]</p>
  </div>
  <div class="page">
    <p>Access Control Settings X-extension://[realExtID]/[fakePath]</p>
  </div>
  <div class="page">
    <p>Access Control Settings X-extension://[realExtID]/[fakePath]</p>
  </div>
  <div class="page">
    <p>Access Control Settings</p>
    <p>We compared our approach to previous techniques capable of enumerating extensions by subverting access control settings. These methods are based on checking the existence of externally accessible resources in extensions.</p>
    <p>Chrome Firefox Total</p>
    <p># Extensions Tested % Previous Approaches</p>
    <p>% Our Approach 100.00% 100.00% 100.00%</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
    <p>Extensions are often used to inject additional content, controls, or simply alert panels into a website.</p>
    <p>This newly generated content can unintentionally leak the random extension URI, thus bypassing the security control measures and opening access to all the extension resources to any other code running in the same page.</p>
    <p>It is left to the extension developers to make sure this does not happen.</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
    <p>We propose a static analysis of all the JavaScript components of an extension.</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
    <p>We propose a static analysis of all the JavaScript components of an extension.</p>
    <p>(i) Identify the source locations where the code accesses the random extension URI (looking for calls to baseURI)</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
    <p>We propose a static analysis of all the JavaScript components of an extension.</p>
    <p>(i) Identify the source locations where the code accesses the random extension URI (looking for calls to baseURI)</p>
    <p>(ii) Analyze all the components that can use the retrieved value following the information flow</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
    <p>We propose a static analysis of all the JavaScript components of an extension.</p>
    <p>(i) Identify the source locations where the code accesses the random extension URI (looking for calls to baseURI)</p>
    <p>(ii) Analyze all the components that can use the retrieved value following the information flow</p>
    <p>(iii) For every identified components, locate the sinks (i.e., the location where new content is injected in the page)</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>Category # Ext. % Leak</p>
    <p>Shopping Email Security News Photos Bookmarking Productivity RSStools Entertainment Translation Social Developer Other Search urlshorteners</p>
    <p>Total 721 40.50%</p>
    <p>URI Randomization</p>
  </div>
  <div class="page">
    <p>URI Randomization</p>
    <p>We performed an exhaustive manual code review of security extensions to confirm the leakage.</p>
    <p>Popular protection extensions such as Adblock, Ghostery, Web Of Trust, and Adguard</p>
    <p>Password managers, such as LastPass, Dashline, Keeper, and TeedyID</p>
    <p>Combinations of the two, such as Blur from Abine</p>
  </div>
  <div class="page">
    <p>Impact</p>
    <p>There are several possible consequences of abusing the information provided by our two techniques:</p>
    <p>Fingerprinting and Analytics:  Stateless tracking  Browser identification (checking built-in extensions)  Determine users demographics</p>
  </div>
  <div class="page">
    <p>Impact</p>
    <p>There are several possible consequences of abusing the information provided by our two techniques:</p>
    <p>Fingerprinting and Analytics:  Stateless tracking  Browser identification (checking built-in extensions)  Determine users demographics</p>
    <p>Malicious Applications  Information gathering phase  Social-driven attacks  Exploitation of potential vulnerabilities</p>
  </div>
  <div class="page">
    <p>ImpactImpact</p>
    <p>Device Fingerprinting Viability Study</p>
    <p>Method Entropy</p>
    <p>Extensions 0.869</p>
    <p>List of Plugins List of Fonts User Agent Canvas Content Language Screen Resolution</p>
  </div>
  <div class="page">
    <p>Vulnerability Disclosure</p>
    <p>Developers were quite surprised, because they believed that the time difference in the checking phase were not significant enough to allow this type of attack.</p>
    <p>Developers are still working to solve this problem.</p>
    <p>In addition, as the new Firefox WebExtensions and Microsoft Edge (both currently in their early stages) use the same extension control mechanisms, we also notified their developers.</p>
    <p>Chromium Family</p>
  </div>
  <div class="page">
    <p>Vulnerability Disclosure</p>
    <p>Firefox non-WebExtensions problem was acknowledged and developers are currently discussing how to proceed.</p>
    <p>Regarding WebExtensions, the Firefox developers recently changed the way extensions are accessed to solve this timing side-channel and other related attacks. In particular, they changed the initial scheme from moz-extension://[extID]/[path] to moz-extension://[random-UUID]/[path]</p>
    <p>Firefox Family</p>
  </div>
  <div class="page">
    <p>Vulnerability Disclosure</p>
    <p>Firefox non-WebExtensions problem was acknowledged and developers are currently discussing how to proceed.</p>
    <p>Regarding WebExtensions, the Firefox developers recently changed the way extensions are accessed to solve this timing side-channel and other related attacks. In particular, they changed the initial scheme from moz-extension://[extID]/[path] to moz-extension://[random-UUID]/[path]</p>
    <p>This change introduced a new dangerous problem: the random-UUID token can now be used to precisely fingerprint users as once it is generated it never changes (also reported).</p>
    <p>Firefox Family</p>
  </div>
  <div class="page">
    <p>Vulnerability Disclosure</p>
    <p>The method that Safaris extension control employs to assure the proper accessibility of resources is, in principle, correct.</p>
    <p>We started reporting the problem to the developers of security extensions we already manually confirmed vulnerable, to help them solve their URI leakage problem.</p>
    <p>Safari</p>
  </div>
  <div class="page">
    <p>Security Proposal</p>
    <p>This random value should be modified across and during the same session and should be independent for each extension installed. In this way, the random value cannot be used to fingerprint users.</p>
  </div>
  <div class="page">
    <p>Security Proposal</p>
    <p>Browsers should also implement an access control (such as web accessible resource) to avoid any undesirable access to all extensions resources even when the random value is unintentionally leaked by the extension.2</p>
  </div>
  <div class="page">
    <p>Security Proposal</p>
    <p>Extensions should be analyzed for possible leakages before making them public to the users. For example, adopting a lightweight static analysis solution (similar to the one we discuss) to analyze the extensions in their market and flag those that leak the random token.</p>
    <p>Moreover, developer manuals should specifically discuss the problems that can cause the leakage of any random value generated.3</p>
  </div>
  <div class="page">
    <p>We already knew about the communication breakdown</p>
  </div>
  <div class="page">
    <p>We already knew about the communication breakdown</p>
  </div>
  <div class="page">
    <p>We already knew about the communication breakdown</p>
  </div>
  <div class="page">
    <p>We already knew about the communication breakdown</p>
  </div>
  <div class="page">
    <p>but browsers didnt told us about</p>
  </div>
  <div class="page">
    <p>their new single</p>
    <p>Extension Breakdown</p>
    <p>iskander.sanchez@deusto.es iskander-sanchez-rola.github.io</p>
  </div>
</Presentation>
