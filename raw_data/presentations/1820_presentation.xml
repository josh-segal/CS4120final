<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BitBill: Scalable, Robust, Verifiable Peer-to-Peer</p>
    <p>Billing for Cloud Computing Li Chen, Kai Chen</p>
    <p>SING Lab</p>
    <p>Computer Science and Engineering</p>
    <p>Hong Kong University of Science and Technology</p>
  </div>
  <div class="page">
    <p>Trust in the Cloud</p>
    <p>Cloud Service Provider</p>
    <p>Did I under-charge the tenant?</p>
    <p>Did I measure the usage correctly?</p>
    <p>Fulfill Service-Level Agreements (SLAs).</p>
    <p>Tenant</p>
    <p>Did I over-pay the provider?</p>
    <p>Can I justify my payment and usage?</p>
    <p>Pay only for what I use  61% of IT executives</p>
    <p>and CIOs</p>
    <p>Verify SLAs.</p>
  </div>
  <div class="page">
    <p>Current Solutions - Industry</p>
    <p>Unconditional trust model  All public cloud services in production</p>
    <p>Drawbacks:  Tenants have no power in accounting and billing of</p>
    <p>resource usage after signing the contract.</p>
  </div>
  <div class="page">
    <p>Current Solutions - Academia</p>
    <p>Third-party trust model:  THEMIS  ALIBI  Verifier</p>
    <p>Drawbacks:  Single point of failure</p>
    <p>Robustness issues</p>
    <p>Congestive hotspot  Scalability issues</p>
    <p>Assumes verifiers trustworthiness  No oversight  Another vulnerability</p>
    <p>Tenants</p>
    <p>Verifier (Trusted 3rd</p>
    <p>Party) Provider(s)</p>
  </div>
  <div class="page">
    <p>Problem Definition: Billing the Cloud  Mutual verification</p>
    <p>Scalability</p>
    <p>Robustness</p>
    <p>Our Proposal: A single global history that is maintained and verified by both the tenants and providers  i.e. Keeping a global ledger</p>
    <p>Public trust model</p>
  </div>
  <div class="page">
    <p>Public trust model</p>
    <p>No single entity is trusted, but the network is trusted as a whole.</p>
    <p>The tenants and provider(s) form a p2p network that maintains a log of billable events collaboratively.  Global history  Billing is intuitive based on this mutually maintained log</p>
    <p>Every log of billable event is signed by the corresponding node, and broadcasted to the network.  Full history of billable events are known to the BitBill network</p>
    <p>But what about malicious peers?  Malicious nodes may forge false events to cheat the other nodes.  How to keep global state in a untrustworthy environment?  The Byzantine Generals Problem</p>
    <p>Solved by BitCoin-like mechanism</p>
  </div>
  <div class="page">
    <p>Centralized Solution: Billable event chain</p>
    <p>Centralized time-stamper  Taking a hash of a block of items to be time-stamped and</p>
    <p>broadcast the hash.</p>
    <p>The time-stamp proves that the log item must have existed at the time, in order to get into the hash.</p>
    <p>Each timestamp includes the previous timestamp in its hash, forming a chain.</p>
    <p>With each additional timestamp reinforcing the ones before it.</p>
    <p>Log Item Log Item Log Item</p>
    <p>Hash</p>
    <p>Log Item Log Item Log Item</p>
    <p>Hash</p>
    <p>Log Block n Log Block n+1</p>
    <p>.. .</p>
    <p>.. .</p>
  </div>
  <div class="page">
    <p>Byzantine Generals Problem</p>
    <p>a.k.a, Byzantine fault tolerance, Two-generals problem.</p>
    <p>Reaching agreements with possible existence of malicious peers.</p>
    <p>Peers send/receive messages to/from each other trying to reach an agreement.</p>
    <p>BitCoin solves this by adding a cost to the announcement  So that malicious node cannot send frequently.  Only one node is allowed to send, acting like the time</p>
    <p>stamper.</p>
  </div>
  <div class="page">
    <p>Decentralize the Time-stamper: Proof-of-Work (PoW) technique</p>
    <p>Proof-of-work is the solution to the problem.</p>
    <p>Adding a cost to the announcement  Create insurmountable</p>
    <p>difficulty for the malicious nodes to forge logs.</p>
    <p>Nodes have to compute a number before sending out a broadcast  Calculation takes a long</p>
    <p>time, so that only one node in the network is able to find it at any given time.</p>
    <p>Log Item Log Item Log Item</p>
    <p>Log Block n</p>
    <p>...</p>
    <p>Previous Hash Nonce</p>
    <p>Log Item Log Item Log Item</p>
    <p>Log Block n+1</p>
    <p>...</p>
    <p>Previous Hash Nonce</p>
  </div>
  <div class="page">
    <p>BitBill network operations</p>
    <p>block in the chain, using the hash of the accepted block as the previous hash.</p>
  </div>
  <div class="page">
    <p>Existence of log items</p>
    <p>Merkle Tree  every non-leaf node is</p>
    <p>labelled with the hash of the labels of its children.</p>
    <p>Verifying  Find block headers of the</p>
    <p>longest chain  Obtain the Merkle branch</p>
    <p>linking the transaction to the block it's time-stamped in.</p>
    <p>Existence of log item:  A network node has</p>
    <p>accepted it  blocks added after it further</p>
    <p>confirm the network has accepted it.</p>
    <p>Merkle Root</p>
    <p>Hash01 Hash23</p>
    <p>Hash2 Hash3</p>
    <p>Item 2</p>
    <p>Previous Hash Nonce</p>
    <p>Block Header</p>
  </div>
  <div class="page">
    <p>BitBill verification</p>
    <p>BitBill does one thing and one thing only:  Keeping a global ledger (history of events)</p>
    <p>Identify and resolve these conflicts at the nodes.</p>
    <p>Verification is to resolve conflicts in the recorded events  A CPU cycle cannot be used concurrently by 2 tenants.</p>
    <p>Instantaneous bandwidth cannot exceed link capacity.</p>
    <p>Aggregated memory usage cannot exceed physical limit.</p>
  </div>
  <div class="page">
    <p>Resource to enable BitBill</p>
    <p>Influencing factors:</p>
    <p>On end-host:  Frequency of broadcast</p>
    <p>Difficulty of PoW</p>
    <p>Granularity of events</p>
    <p>On network  Number of nodes</p>
    <p>Frequency of broadcast</p>
  </div>
  <div class="page">
    <p>Discussions</p>
    <p>Privacy  decoupling public key and identity</p>
    <p>Deployment  preinstalled software package</p>
    <p>Resource monitoring  granularity</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>We introduce a new trust model, the public trust, with regard to mutually verifiable billing in the cloud.</p>
    <p>Novel use of the Bitcoin-like mechanism to deal with the Byzantine Generals Problem that comes with this model.</p>
    <p>We design a scalable and robust billing and accounting solution, BitBill.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Q&amp;A</p>
  </div>
</Presentation>
