<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Turtles Project: Design and Implementation of Nested Virtualization</p>
    <p>Muli Ben-Yehuda Michael D. Day Zvi Dubitzky Michael Factor</p>
    <p>Nadav HarEl Abel Gordon Anthony Liguori Orit Wasserman</p>
    <p>Ben-Ami Yassour</p>
    <p>IBM Research  Haifa</p>
    <p>IBM Linux Technology Center</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 1 / 22</p>
  </div>
  <div class="page">
    <p>What is nested x86 virtualization?</p>
    <p>Running multiple unmodified hypervisors With their associated unmodified VMs Simultaneously On the x86 architecture Which does not support nesting in hardware. . . . . . but does support a single level of virtualization Hardware</p>
    <p>Hypervisor</p>
    <p>Guest Hypervisor</p>
    <p>Guest OS</p>
    <p>Guest OS Guest OS</p>
    <p>Guest OS</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 2 / 22</p>
  </div>
  <div class="page">
    <p>Why?</p>
    <p>Operating systems are already hypervisors (Windows 7 with XP mode, Linux/KVM) To be able to run other hypervisors in clouds Security (e.g., hypervisor-level rootkits) Co-design of x86 hardware and system software Testing, demonstrating, debugging, live migration of hypervisors</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 3 / 22</p>
  </div>
  <div class="page">
    <p>Why?</p>
    <p>Operating systems are already hypervisors (Windows 7 with XP mode, Linux/KVM) To be able to run other hypervisors in clouds Security (e.g., hypervisor-level rootkits) Co-design of x86 hardware and system software Testing, demonstrating, debugging, live migration of hypervisors</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 3 / 22</p>
  </div>
  <div class="page">
    <p>Why?</p>
    <p>Operating systems are already hypervisors (Windows 7 with XP mode, Linux/KVM) To be able to run other hypervisors in clouds Security (e.g., hypervisor-level rootkits) Co-design of x86 hardware and system software Testing, demonstrating, debugging, live migration of hypervisors</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 3 / 22</p>
  </div>
  <div class="page">
    <p>Why?</p>
    <p>Operating systems are already hypervisors (Windows 7 with XP mode, Linux/KVM) To be able to run other hypervisors in clouds Security (e.g., hypervisor-level rootkits) Co-design of x86 hardware and system software Testing, demonstrating, debugging, live migration of hypervisors</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 3 / 22</p>
  </div>
  <div class="page">
    <p>Why?</p>
    <p>Operating systems are already hypervisors (Windows 7 with XP mode, Linux/KVM) To be able to run other hypervisors in clouds Security (e.g., hypervisor-level rootkits) Co-design of x86 hardware and system software Testing, demonstrating, debugging, live migration of hypervisors</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 3 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>First models for nested virtualization [PopekGoldberg74, BelpaireHsu75, LauerWyeth73] First implementation in the IBM z/VM; relies on architectural support for nested virtualization (sie) Microkernels meet recursive VMs [FordHibler96]: assumes we can modify software at all levels x86 software based approaches (slow!) [Berghmans10] KVM [KivityKamay07] with AMD SVM [RoedelGraf09] Early Xen prototype [He09] Blue Pill rootkit hiding from other hypervisors [Rutkowska06]</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 4 / 22</p>
  </div>
  <div class="page">
    <p>What is the Turtles project?</p>
    <p>Efficient nested virtualization for Intel x86 based on KVM Multiple guest hypervisors and VMs: VMware, Windows, . . . Code publicly available</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 5 / 22</p>
  </div>
  <div class="page">
    <p>What is the Turtles project? (cont)</p>
    <p>Nested VMX virtualization for nested CPU virtualization Multi-dimensional paging for nested MMU virtualization Multi-level device assignment for nested I/O virtualization Micro-optimizations to make it go fast (see paper)</p>
    <p>+ + =</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 6 / 22</p>
  </div>
  <div class="page">
    <p>What is the Turtles project? (cont)</p>
    <p>Nested VMX virtualization for nested CPU virtualization Multi-dimensional paging for nested MMU virtualization Multi-level device assignment for nested I/O virtualization Micro-optimizations to make it go fast (see paper)</p>
    <p>+ + =</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 6 / 22</p>
  </div>
  <div class="page">
    <p>What is the Turtles project? (cont)</p>
    <p>Nested VMX virtualization for nested CPU virtualization Multi-dimensional paging for nested MMU virtualization Multi-level device assignment for nested I/O virtualization Micro-optimizations to make it go fast (see paper)</p>
    <p>+ + =</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 6 / 22</p>
  </div>
  <div class="page">
    <p>What is the Turtles project? (cont)</p>
    <p>Nested VMX virtualization for nested CPU virtualization Multi-dimensional paging for nested MMU virtualization Multi-level device assignment for nested I/O virtualization Micro-optimizations to make it go fast (see paper)</p>
    <p>+ + =</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 6 / 22</p>
  </div>
  <div class="page">
    <p>Theory of nested CPU virtualization</p>
    <p>Single-level architectural support (x86) vs. multi-level architectural support (e.g., z/VM) Single level  one hypervisor, many guests Turtles approach: L0 multiplexes the hardware between L1 and L2, running both as guests of L0without either being aware of it (Scheme generalized for n levels; Our focus is n=2)</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Multiplexed on a single level Multiple logical levels</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L1</p>
    <p>Guest L2</p>
    <p>Guest L2</p>
    <p>L0</p>
    <p>Guest L2L2</p>
    <p>Guest Hypervisor</p>
    <p>Guest Hypervisor GuestGuest</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 7 / 22</p>
  </div>
  <div class="page">
    <p>Theory of nested CPU virtualization</p>
    <p>Single-level architectural support (x86) vs. multi-level architectural support (e.g., z/VM) Single level  one hypervisor, many guests Turtles approach: L0 multiplexes the hardware between L1 and L2, running both as guests of L0without either being aware of it (Scheme generalized for n levels; Our focus is n=2)</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Multiplexed on a single level Multiple logical levels</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L1</p>
    <p>Guest L2</p>
    <p>Guest L2</p>
    <p>L0</p>
    <p>Guest L2L2</p>
    <p>Guest Hypervisor</p>
    <p>Guest Hypervisor GuestGuest</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 7 / 22</p>
  </div>
  <div class="page">
    <p>Theory of nested CPU virtualization</p>
    <p>Single-level architectural support (x86) vs. multi-level architectural support (e.g., z/VM) Single level  one hypervisor, many guests Turtles approach: L0 multiplexes the hardware between L1 and L2, running both as guests of L0without either being aware of it (Scheme generalized for n levels; Our focus is n=2)</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Multiplexed on a single level Multiple logical levels</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L1</p>
    <p>Guest L2</p>
    <p>Guest L2</p>
    <p>L0</p>
    <p>Guest L2L2</p>
    <p>Guest Hypervisor</p>
    <p>Guest Hypervisor GuestGuest</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 7 / 22</p>
  </div>
  <div class="page">
    <p>Theory of nested CPU virtualization</p>
    <p>Single-level architectural support (x86) vs. multi-level architectural support (e.g., z/VM) Single level  one hypervisor, many guests Turtles approach: L0 multiplexes the hardware between L1 and L2, running both as guests of L0without either being aware of it (Scheme generalized for n levels; Our focus is n=2)</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Multiplexed on a single level Multiple logical levels</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L1</p>
    <p>Guest L2</p>
    <p>Guest L2</p>
    <p>L0</p>
    <p>Guest L2L2</p>
    <p>Guest Hypervisor</p>
    <p>Guest Hypervisor GuestGuest</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 7 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Nested VMX virtualization: flow</p>
    <p>L0 runs L1 with VMCS01 L1 prepares VMCS12 and executes vmlaunch vmlaunch traps to L0 L0 merges VMCSs: VMCS01 merged with VMCS12 is VMCS02 L0 launches L2 L2 causes a trap L0 handles trap itself or forwards it to L1 . . . eventually, L0 resumes L2 repeat</p>
    <p>Hardware</p>
    <p>Host Hypervisor</p>
    <p>Guest OS</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS</p>
    <p>Memory Tables</p>
    <p>VMCS Memory Tables</p>
    <p>L0</p>
    <p>L1 L2</p>
    <p>Guest Hypervisor</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 8 / 22</p>
  </div>
  <div class="page">
    <p>Exit multiplication makes angry turtle angry</p>
    <p>To handle a single L2 exit, L1 does many things: read and write the VMCS, disable interrupts, . . . Those operations can trap, leading to exit multiplication Exit multiplication: a single L2 exit can cause 40-50 L1 exits! Optimize: make a single exit fast and reduce frequency of exits</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L3</p>
    <p>Two Levels</p>
    <p>Three LevelsSingle Level</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 9 / 22</p>
  </div>
  <div class="page">
    <p>Exit multiplication makes angry turtle angry</p>
    <p>To handle a single L2 exit, L1 does many things: read and write the VMCS, disable interrupts, . . . Those operations can trap, leading to exit multiplication Exit multiplication: a single L2 exit can cause 40-50 L1 exits! Optimize: make a single exit fast and reduce frequency of exits</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L3</p>
    <p>Two Levels</p>
    <p>Three LevelsSingle Level</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 9 / 22</p>
  </div>
  <div class="page">
    <p>Exit multiplication makes angry turtle angry</p>
    <p>To handle a single L2 exit, L1 does many things: read and write the VMCS, disable interrupts, . . . Those operations can trap, leading to exit multiplication Exit multiplication: a single L2 exit can cause 40-50 L1 exits! Optimize: make a single exit fast and reduce frequency of exits</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L3</p>
    <p>Two Levels</p>
    <p>Three LevelsSingle Level</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 9 / 22</p>
  </div>
  <div class="page">
    <p>Exit multiplication makes angry turtle angry</p>
    <p>To handle a single L2 exit, L1 does many things: read and write the VMCS, disable interrupts, . . . Those operations can trap, leading to exit multiplication Exit multiplication: a single L2 exit can cause 40-50 L1 exits! Optimize: make a single exit fast and reduce frequency of exits</p>
    <p>L0</p>
    <p>L1</p>
    <p>L2</p>
    <p>L3</p>
    <p>Two Levels</p>
    <p>Three LevelsSingle Level</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 9 / 22</p>
  </div>
  <div class="page">
    <p>MMU virtualization via multi-dimensional paging</p>
    <p>Three logical translations: L2 virt  phys, L2  L1, L1  L0 Only two tables in hardware with EPT: virt  phys and guest physical  host physical L0 compresses three logical translations onto two hardware tables</p>
    <p>SPT12</p>
    <p>L2 virtual</p>
    <p>L2 physical</p>
    <p>L1 physical</p>
    <p>L0 physical</p>
    <p>GPT</p>
    <p>L2 virtual</p>
    <p>L2 physical</p>
    <p>L1 physical</p>
    <p>L0 physical</p>
    <p>GPT</p>
    <p>SPT02</p>
    <p>Shadow on top of shadow</p>
    <p>SPT12</p>
    <p>EPT01</p>
    <p>L2 virtual</p>
    <p>L2 physical</p>
    <p>L1 physical</p>
    <p>L0 physical</p>
    <p>GPT</p>
    <p>EPT02</p>
    <p>EPT12</p>
    <p>Multi-dimensional paging</p>
    <p>Shadow on top of EPT</p>
    <p>EPT01</p>
    <p>baseline better best</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 10 / 22</p>
  </div>
  <div class="page">
    <p>Baseline: shadow-on-shadow</p>
    <p>SPT12</p>
    <p>L2 virtual</p>
    <p>L2 physical</p>
    <p>L1 physical</p>
    <p>L0 physical</p>
    <p>GPT</p>
    <p>SPT02</p>
    <p>Assume no EPT table; all hypervisors use shadow paging Useful for old machines and as a baseline Maintaining shadow page tables is expensive Compress: three logical translations  one table in hardware</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 11 / 22</p>
  </div>
  <div class="page">
    <p>Better: shadow-on-EPT</p>
    <p>L2 virtual</p>
    <p>L2 physical</p>
    <p>L1 physical</p>
    <p>L0 physical</p>
    <p>SPT12</p>
    <p>EPT01</p>
    <p>GPT</p>
    <p>Instead of one hardware table we have two Compress: three logical translations  two in hardware Simple approach: L0 uses EPT, L1 uses shadow paging for L2 Every L2 page fault leads to multiple L1 exits</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 12 / 22</p>
  </div>
  <div class="page">
    <p>Best: multi-dimensional paging L2 virtual</p>
    <p>L2 physical</p>
    <p>L1 physical</p>
    <p>L0 physical</p>
    <p>GPT</p>
    <p>EPT02</p>
    <p>EPT12</p>
    <p>EPT01</p>
    <p>EPT table rarely changes; guest page table changes a lot Again, compress three logical translations  two in hardware L0 emulates EPT for L1 L0 uses EPT01 and EPT12 to construct EPT02 End result: a lot less exits!</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 13 / 22</p>
  </div>
  <div class="page">
    <p>Introduction to I/O virtualization</p>
    <p>Device emulation [Sugerman01] GUEST</p>
    <p>HOST</p>
    <p>device emulation</p>
    <p>driver device</p>
    <p>driver device</p>
    <p>Para-virtualized drivers [Barham03, Russell08] GUEST</p>
    <p>HOST</p>
    <p>driver</p>
    <p>backend</p>
    <p>virtual driver</p>
    <p>frontend</p>
    <p>virtualdevice driver</p>
    <p>Direct device assignment [Levasseur04,Yassour08] GUEST</p>
    <p>HOST</p>
    <p>device driver</p>
    <p>Direct assignment best performing option Direct assignment requires IOMMU for safe DMA bypass</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 14 / 22</p>
  </div>
  <div class="page">
    <p>Introduction to I/O virtualization</p>
    <p>Device emulation [Sugerman01] GUEST</p>
    <p>HOST</p>
    <p>device emulation</p>
    <p>driver device</p>
    <p>driver device</p>
    <p>Para-virtualized drivers [Barham03, Russell08] GUEST</p>
    <p>HOST</p>
    <p>driver</p>
    <p>backend</p>
    <p>virtual driver</p>
    <p>frontend</p>
    <p>virtualdevice driver</p>
    <p>Direct device assignment [Levasseur04,Yassour08] GUEST</p>
    <p>HOST</p>
    <p>device driver</p>
    <p>Direct assignment best performing option Direct assignment requires IOMMU for safe DMA bypass</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 14 / 22</p>
  </div>
  <div class="page">
    <p>Introduction to I/O virtualization</p>
    <p>Device emulation [Sugerman01] GUEST</p>
    <p>HOST</p>
    <p>device emulation</p>
    <p>driver device</p>
    <p>driver device</p>
    <p>Para-virtualized drivers [Barham03, Russell08] GUEST</p>
    <p>HOST</p>
    <p>driver</p>
    <p>backend</p>
    <p>virtual driver</p>
    <p>frontend</p>
    <p>virtualdevice driver</p>
    <p>Direct device assignment [Levasseur04,Yassour08] GUEST</p>
    <p>HOST</p>
    <p>device driver</p>
    <p>Direct assignment best performing option Direct assignment requires IOMMU for safe DMA bypass</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 14 / 22</p>
  </div>
  <div class="page">
    <p>Introduction to I/O virtualization</p>
    <p>Device emulation [Sugerman01] GUEST</p>
    <p>HOST</p>
    <p>device emulation</p>
    <p>driver device</p>
    <p>driver device</p>
    <p>Para-virtualized drivers [Barham03, Russell08] GUEST</p>
    <p>HOST</p>
    <p>driver</p>
    <p>backend</p>
    <p>virtual driver</p>
    <p>frontend</p>
    <p>virtualdevice driver</p>
    <p>Direct device assignment [Levasseur04,Yassour08] GUEST</p>
    <p>HOST</p>
    <p>device driver</p>
    <p>Direct assignment best performing option</p>
    <p>Direct assignment requires IOMMU for safe DMA bypass</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 14 / 22</p>
  </div>
  <div class="page">
    <p>Introduction to I/O virtualization</p>
    <p>Device emulation [Sugerman01] GUEST</p>
    <p>HOST</p>
    <p>device emulation</p>
    <p>driver device</p>
    <p>driver device</p>
    <p>Para-virtualized drivers [Barham03, Russell08] GUEST</p>
    <p>HOST</p>
    <p>driver</p>
    <p>backend</p>
    <p>virtual driver</p>
    <p>frontend</p>
    <p>virtualdevice driver</p>
    <p>Direct device assignment [Levasseur04,Yassour08] GUEST</p>
    <p>HOST</p>
    <p>device driver</p>
    <p>Direct assignment best performing option Direct assignment requires IOMMU for safe DMA bypass</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 14 / 22</p>
  </div>
  <div class="page">
    <p>Multi-level device assignment</p>
    <p>With nested 3x3 options for I/O virtualization (L2  L1  L0) Multi-level device assignment means giving an L2 guest direct access to L0s devices, safely bypassing both L0 and L1</p>
    <p>L1 hypervisor</p>
    <p>physical device</p>
    <p>L0 hypervisor</p>
    <p>L2 device driver</p>
    <p>MMIOs and PIOs</p>
    <p>L0 IOMMUL1 IOMMU</p>
    <p>Device DMA via platform IOMMU</p>
    <p>How? L0 emulates an IOMMU for L1 [Amit10] L0 compresses multiple IOMMU translations onto the single hardware IOMMU page table L2 programs the device directly Device DMAs into L2 memory space directly</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 15 / 22</p>
  </div>
  <div class="page">
    <p>Multi-level device assignment</p>
    <p>With nested 3x3 options for I/O virtualization (L2  L1  L0) Multi-level device assignment means giving an L2 guest direct access to L0s devices, safely bypassing both L0 and L1</p>
    <p>L1 hypervisor</p>
    <p>physical device</p>
    <p>L0 hypervisor</p>
    <p>L2 device driver</p>
    <p>MMIOs and PIOs</p>
    <p>L0 IOMMUL1 IOMMU</p>
    <p>Device DMA via platform IOMMU</p>
    <p>How? L0 emulates an IOMMU for L1 [Amit10] L0 compresses multiple IOMMU translations onto the single hardware IOMMU page table L2 programs the device directly Device DMAs into L2 memory space directly</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 15 / 22</p>
  </div>
  <div class="page">
    <p>Multi-level device assignment</p>
    <p>With nested 3x3 options for I/O virtualization (L2  L1  L0) Multi-level device assignment means giving an L2 guest direct access to L0s devices, safely bypassing both L0 and L1</p>
    <p>L1 hypervisor</p>
    <p>physical device</p>
    <p>L0 hypervisor</p>
    <p>L2 device driver</p>
    <p>MMIOs and PIOs</p>
    <p>L0 IOMMUL1 IOMMU</p>
    <p>Device DMA via platform IOMMU</p>
    <p>How? L0 emulates an IOMMU for L1 [Amit10] L0 compresses multiple IOMMU translations onto the single hardware IOMMU page table L2 programs the device directly Device DMAs into L2 memory space directly</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 15 / 22</p>
  </div>
  <div class="page">
    <p>Multi-level device assignment</p>
    <p>With nested 3x3 options for I/O virtualization (L2  L1  L0) Multi-level device assignment means giving an L2 guest direct access to L0s devices, safely bypassing both L0 and L1</p>
    <p>L1 hypervisor</p>
    <p>physical device</p>
    <p>L0 hypervisor</p>
    <p>L2 device driver</p>
    <p>MMIOs and PIOs</p>
    <p>L0 IOMMUL1 IOMMU</p>
    <p>Device DMA via platform IOMMU</p>
    <p>How? L0 emulates an IOMMU for L1 [Amit10] L0 compresses multiple IOMMU translations onto the single hardware IOMMU page table L2 programs the device directly Device DMAs into L2 memory space directly</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 15 / 22</p>
  </div>
  <div class="page">
    <p>Multi-level device assignment</p>
    <p>With nested 3x3 options for I/O virtualization (L2  L1  L0) Multi-level device assignment means giving an L2 guest direct access to L0s devices, safely bypassing both L0 and L1</p>
    <p>L1 hypervisor</p>
    <p>physical device</p>
    <p>L0 hypervisor</p>
    <p>L2 device driver</p>
    <p>MMIOs and PIOs</p>
    <p>L0 IOMMUL1 IOMMU</p>
    <p>Device DMA via platform IOMMU</p>
    <p>How? L0 emulates an IOMMU for L1 [Amit10] L0 compresses multiple IOMMU translations onto the single hardware IOMMU page table L2 programs the device directly Device DMAs into L2 memory space directly</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 15 / 22</p>
  </div>
  <div class="page">
    <p>Multi-level device assignment</p>
    <p>With nested 3x3 options for I/O virtualization (L2  L1  L0) Multi-level device assignment means giving an L2 guest direct access to L0s devices, safely bypassing both L0 and L1</p>
    <p>L1 hypervisor</p>
    <p>physical device</p>
    <p>L0 hypervisor</p>
    <p>L2 device driver</p>
    <p>MMIOs and PIOs</p>
    <p>L0 IOMMUL1 IOMMU</p>
    <p>Device DMA via platform IOMMU</p>
    <p>How? L0 emulates an IOMMU for L1 [Amit10] L0 compresses multiple IOMMU translations onto the single hardware IOMMU page table L2 programs the device directly Device DMAs into L2 memory space directly</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 15 / 22</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Running Linux, Windows, KVM, VMware, SMP, . . . Macro workloads:</p>
    <p>kernbench SPECjbb netperf</p>
    <p>Multi-dimensional paging? Multi-level device assignment? KVM as L1 vs. VMware as L1?</p>
    <p>See paper for full experimental details, more benchmarks and analysis, including worst case synthetic micro-benchmark</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 16 / 22</p>
  </div>
  <div class="page">
    <p>Macro: SPECjbb and kernbench</p>
    <p>kernbench Host Guest Nested NestedDRW</p>
    <p>Run time 324.3 355 406.3 391.5 % overhead vs. host - 9.5 25.3 20.7 % overhead vs. guest - - 14.5 10.3</p>
    <p>SPECjbb Host Guest Nested NestedDRW</p>
    <p>Score 90493 83599 77065 78347 % degradation vs. host - 7.6 14.8 13.4 % degradation vs. guest - - 7.8 6.3</p>
    <p>Table: kernbench and SPECjbb results</p>
    <p>Exit multiplication effect not as bad as we feared</p>
    <p>Direct vmread and vmwrite (DRW) give an immediate boost</p>
    <p>Take-away: each level of virtualization adds approximately the same overhead!</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 17 / 22</p>
  </div>
  <div class="page">
    <p>Macro: multi-dimensional paging</p>
    <p>Shadow on EPT Multidimensional paging</p>
    <p>kernbench specjbb netperf</p>
    <p>Im pr</p>
    <p>ov em</p>
    <p>en t r</p>
    <p>ati o</p>
    <p>Impact of multi-dimensional paging depends on rate of page faults Shadow-on-EPT: every L2 page fault causes L1 multiple exits Multi-dimensional paging: only EPT violations cause L1 exits EPT table rarely changes: #(EPT violations) &lt;&lt; #(page faults) Multi-dimensional paging huge win for page-fault intensive kernbench</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 18 / 22</p>
  </div>
  <div class="page">
    <p>Macro: multi-level device assignment</p>
    <p>throughput (Mbps) %cpu</p>
    <p>native single level guest</p>
    <p>emulation</p>
    <p>single level guest</p>
    <p>virtio</p>
    <p>single level guest</p>
    <p>direct access</p>
    <p>nested guest emulation / emulation</p>
    <p>nested guest virtio / emulation</p>
    <p>nested guest virtio / virtio</p>
    <p>nested guest direct / virtio</p>
    <p>nested guest direct / direct</p>
    <p>thr ou</p>
    <p>gh pu</p>
    <p>t (M bp</p>
    <p>s)</p>
    <p>% cp</p>
    <p>u</p>
    <p>Benchmark: netperf TCP_STREAM (transmit) Multi-level device assignment best performing option But: native at 20%, multi-level device assignment at 60% (x3!) Interrupts considered harmful, cause exit multiplication</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 19 / 22</p>
  </div>
  <div class="page">
    <p>Macro: multi-level device assignment (sans interrupts)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>bp s)</p>
    <p>Message size (netperf -m)</p>
    <p>L0 (bare metal) L2 (direct/direct) L2 (direct/virtio)</p>
    <p>What if we could deliver device interrupts directly to L2? Only 7% difference between native and nested guest!</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 20 / 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Efficient nested x86 virtualization is challenging but feasible A whole new ballpark opening up many exciting applicationssecurity, cloud, architecture, . . . Current overhead of 6-14%</p>
    <p>Negligible for some workloads, not yet for others Work in progressexpect at most 5% eventually</p>
    <p>Code is available Its turtles all the way down</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 21 / 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Efficient nested x86 virtualization is challenging but feasible A whole new ballpark opening up many exciting applicationssecurity, cloud, architecture, . . . Current overhead of 6-14%</p>
    <p>Negligible for some workloads, not yet for others Work in progressexpect at most 5% eventually</p>
    <p>Code is available Its turtles all the way down</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 21 / 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Efficient nested x86 virtualization is challenging but feasible A whole new ballpark opening up many exciting applicationssecurity, cloud, architecture, . . . Current overhead of 6-14%</p>
    <p>Negligible for some workloads, not yet for others Work in progressexpect at most 5% eventually</p>
    <p>Code is available Its turtles all the way down</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 21 / 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Efficient nested x86 virtualization is challenging but feasible A whole new ballpark opening up many exciting applicationssecurity, cloud, architecture, . . . Current overhead of 6-14%</p>
    <p>Negligible for some workloads, not yet for others Work in progressexpect at most 5% eventually</p>
    <p>Code is available Its turtles all the way down</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 21 / 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Efficient nested x86 virtualization is challenging but feasible A whole new ballpark opening up many exciting applicationssecurity, cloud, architecture, . . . Current overhead of 6-14%</p>
    <p>Negligible for some workloads, not yet for others Work in progressexpect at most 5% eventually</p>
    <p>Code is available Its turtles all the way down</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 21 / 22</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Ben-Yehuda et al. (IBM Research) The Turtles Project: Nested Virtualization OSDI 10 22 / 22</p>
  </div>
</Presentation>
