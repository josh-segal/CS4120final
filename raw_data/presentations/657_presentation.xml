<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>dBug: Systematic Evaluation of Distributed Systems</p>
    <p>Ji ima Randy Bryant, Garth Gibson</p>
    <p>PARALLEL DATA LABORATORY</p>
    <p>Carnegie Mellon University</p>
  </div>
  <div class="page">
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 2</p>
    <p>Concurrency Bugs Everywhere</p>
  </div>
  <div class="page">
    <p>Why Do Concurrency Bugs Exist?</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 3</p>
    <p>Server 1 Server i Server j Server n... ... ...</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Why Do Concurrency Bugs Exist?</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 4</p>
    <p>Server 1 Server i Server j Server n... ... ...</p>
    <p>Client Client</p>
  </div>
  <div class="page">
    <p>Motivating Example Lessons  Locking across RPC = bad idea  Explosion of possible scenarios  Corner case errors easy to miss</p>
    <p>Testing concurrent systems is hard:  Control / Enumerate possible scenarios  Tackle state space explosion</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 5</p>
  </div>
  <div class="page">
    <p>Need For Better Testing Methods  Hardware performance  Software complexity</p>
    <p>Formal specifications impractical  New systems rarely written from scratch</p>
    <p>Common testing mechanism: stress testing  Imprecise, falling behind</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 6</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  dBug Design</p>
    <p>dBug Prototype  Prototype Case Studies  Ongoing &amp; Future Work</p>
    <p>Conclusion</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 7</p>
  </div>
  <div class="page">
    <p>dBug Design  Goal: Enable systematic enumeration of (all)</p>
    <p>possible execution scenarios of a test</p>
    <p>Repeated execution of the same test is guaranteed to explore different scenarios</p>
    <p>Light-weight model checking  Fixed initial state  User provided test as a specification  State space of the actual implementation explored</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 8</p>
  </div>
  <div class="page">
    <p>Motivating Example dBug-ed</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 9</p>
    <p>Server 1 Server i Server j Server n... ... ...</p>
    <p>Client ClientArbiter 1 2 3</p>
  </div>
  <div class="page">
    <p>dBug Design Decisions  What events to control on and how?  When to signal a request?  How to (re)store a state of the system?  How to explore the state space?</p>
    <p>Parallel exploration  Exploration heuristics  State space reduction</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 10</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  dBug Design</p>
    <p>dBug Prototype  Prototype Case Studies  Ongoing &amp; Future Work</p>
    <p>Conclusion</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 11</p>
  </div>
  <div class="page">
    <p>Event Control Mechanism</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 12</p>
    <p>Application</p>
    <p>OS + Libraries</p>
    <p>Application</p>
    <p>OS + Libraries</p>
    <p>dBug interposition</p>
  </div>
  <div class="page">
    <p>Compile-time Interposition Source code annotation of:</p>
    <p>Creation of threads (processes)  Destruction of threads (processes)  Coordination primitives:</p>
    <p>Thread synchronization  Remote procedure calls  Your coordination primitive here</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 13</p>
  </div>
  <div class="page">
    <p>Client-Server Architecture</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 14</p>
    <p>dBug</p>
    <p>Original Distributed System</p>
    <p>dBug arbiter</p>
    <p>Thread 1</p>
    <p>dBug client</p>
    <p>Thread n</p>
    <p>dBug client</p>
    <p>. . .</p>
    <p>dBug server</p>
  </div>
  <div class="page">
    <p>When to Signal a Request?  Blind Mode:</p>
    <p>Uses a timeout  Pros: Easy to implement  Cons: Overhead, Imprecise</p>
    <p>Informed Mode  Uses application idle/progress hints  Pros: Fast, Accurate  Cons: Expert knowledge, Annotation</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 15</p>
  </div>
  <div class="page">
    <p>State Space Exploration</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 16</p>
    <p>dBug</p>
    <p>Original Distributed System</p>
    <p>dBug arbiter</p>
    <p>Thread 1</p>
    <p>dBug client</p>
    <p>Thread n</p>
    <p>dBug client</p>
    <p>. . .</p>
    <p>dBug server</p>
    <p>dBug</p>
    <p>Original Distributed System</p>
    <p>dBug arbiter</p>
    <p>Thread 1</p>
    <p>dBug client</p>
    <p>Thread n</p>
    <p>dBug client</p>
    <p>. . .</p>
    <p>dBug server</p>
    <p>dBug</p>
    <p>Original Distributed System</p>
    <p>dBug arbiter</p>
    <p>Thread 1</p>
    <p>dBug client</p>
    <p>Thread n</p>
    <p>dBug client</p>
    <p>. . .</p>
    <p>dBug server</p>
    <p>dBug</p>
    <p>Original Distributed System</p>
    <p>dBug arbiter</p>
    <p>Thread 1</p>
    <p>dBug client</p>
    <p>Thread n</p>
    <p>dBug client</p>
    <p>. . .</p>
    <p>dBug server</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  dBug Design</p>
    <p>dBug Prototype  Prototype Case Studies  Ongoing &amp; Future Work</p>
    <p>Conclusion</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 17</p>
  </div>
  <div class="page">
    <p>Fast Array of Wimpy Nodes  Energy-efficient architecture  FAWN-KV = distributed key-value storage  put()/get() interface, strong consistency  get() returns value of the last acked put()</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 18</p>
    <p>KV Ring Front-end</p>
    <p>Back-end</p>
    <p>Back-end</p>
    <p>Switch</p>
    <p>. . .</p>
  </div>
  <div class="page">
    <p>Case Study 1: Multi-threading</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 19</p>
    <p>Log-structured writes</p>
    <p>Need for clean-up</p>
    <p>Rewrite Operation  sequential scan  atomic swap</p>
    <p>Obsolete data Up-to-date data</p>
  </div>
  <div class="page">
    <p>Integrating FAWN-KV and dBug  Creation and destruction of threads</p>
    <p>20 lines of annotations</p>
    <p>Acquiring and releasing locks  Compile-time interposition on pthread interface</p>
    <p>Test case: put(key,value1); if (fork() == 0) { rewrite(); } else { put(key,value2); get(key); }</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 20</p>
  </div>
  <div class="page">
    <p>Case Study Results  Evaluated with the blind mode for ~24 hours  Over 7000 possible scenarios  Test always executed correctly</p>
    <p>Introduced and detected a data race bug  The bug showed up in ~700 scenarios</p>
    <p>Two person weeks of work</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 21</p>
  </div>
  <div class="page">
    <p>Case Study 2: Including RPCs</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 22</p>
    <p>H</p>
    <p>G</p>
    <p>F</p>
    <p>D</p>
    <p>C</p>
    <p>B</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>Integrating FAWN-KV with dBug  Creation and destruction of agents</p>
    <p>20 lines of annotations</p>
    <p>Issuing remote procedure calls  Modified Apache Thrift library (2 lines)</p>
    <p>Test case: put(key,value1); If (fork() == 0) { join(); } else { if (fork() == 0) put(key,value2); else get(key); }</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 23</p>
  </div>
  <div class="page">
    <p>Case Study Results  Evaluated with blind mode for 45 minutes  Total of 173 possible scenarios  Found a bug</p>
    <p>The bug showed up in only 3 scenarios  get(key) returns not found</p>
    <p>Two person weeks of work</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 24</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  dBug Design</p>
    <p>dBug Prototype  Prototype Case Studies  Ongoing &amp; Future Work</p>
    <p>Conclusion</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 25</p>
  </div>
  <div class="page">
    <p>dBug Evolution</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 26</p>
  </div>
  <div class="page">
    <p>dBug 2nd Generation  Open source Autotools project  dBug interposition as a shared library  Precise and automatic detection of when to</p>
    <p>signal a request</p>
    <p>Educational use of dBug:  In use to evaluate student solutions for 15-213  Found bugs in the TA implementation  Available to students to test their solutions</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 27</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 28</p>
    <p>Interface support State Space Case Studies Event Injection</p>
    <p>Parallel ExplorationPOSIX threads</p>
    <p>Local I/O</p>
    <p>Network I/O</p>
    <p>UNIX processes</p>
    <p>POSIX threads</p>
    <p>Local I/O</p>
    <p>Network I/O</p>
    <p>UNIX processes</p>
    <p>Fault Injection</p>
    <p>Time Distortion</p>
    <p>RAIDTool</p>
    <p>FAWN-KV</p>
    <p>PVFS</p>
    <p>Manual Ad hoc</p>
    <p>FAWN-KV</p>
    <p>PVFS</p>
    <p>PRESENT</p>
    <p>PAST</p>
    <p>FUTURE</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  dBug Design</p>
    <p>dBug Prototype  Prototype Case Studies  Ongoing &amp; Future Work</p>
    <p>Conclusion</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 29</p>
  </div>
  <div class="page">
    <p>Related Work  Verisoft [Godefroid98]</p>
    <p>manual, exhaustive, multi-threaded, C and C++ sources</p>
    <p>MaceMC [Killian07]  automated, selective, distributed, Mace sources</p>
    <p>CHESS [Musuvathi08]  automated, selective, multi-threaded, Windows binaries</p>
    <p>MoDist [Yang09]  automated, selective, distributed, Windows binaries</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 30</p>
  </div>
  <div class="page">
    <p>Conclusion  Systematic and automatic evaluation of</p>
    <p>distributed system test cases  Open source implementation of dBug  Experiments with:</p>
    <p>Parallel Virtual File System (C)  FAWN-based key value storage (C++)  CMU student class projects (C and C++)  RAIDTool (Java)</p>
    <p>Finding real bugs</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 31</p>
  </div>
  <div class="page">
    <p>References  [Godefroid98] P. Godefroid, VeriSoft: A Tool for the Automatic</p>
    <p>Analysis of Concurrent Reactive Software, CAV 1997.  [Killian07] C. Killian, J. W. Anderson, R. Jhala, and A. Vahdat:</p>
    <p>Life, Death, and the Critical Transition: Detecting Liveness Bugs in Systems Code, NSDI 2007.</p>
    <p>[Musuvathi08] M. Musuvathi, S. Qadeer, T. Ball, G. Basler, P. A. Nainar, I. Neamtiu. Finding and Reproducing Heisenbugs in Concurrent Programs, OSDI 2008.</p>
    <p>[Yang09] J. Yang, T. Chen, M. Wu, Z. Xu, X. Liu, H. Lin, M. Yang, F. Long, L. Zhang, L. Zhou: MODIST: Transparent Model Checking of Unmodified Distributed Systems, NSDI 2009.</p>
    <p>[Simsa10] J. Simsa, G. Gibson, R. Bryant: dBug: Systematic Evaluation of Distributed Systems, SSV 2010.</p>
    <p>Jiri Simsa  October 10!http://www.pdl.cmu.edu/ 32</p>
  </div>
</Presentation>
