<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Disaggregating Persistent Memory and Controlling Them Remotely:</p>
    <p>An Exploration of Passive Disaggregated Key-Value Stores</p>
    <p>Shin-Yeh Tsai, Yizhou Shan, Yiying Zhang</p>
  </div>
  <div class="page">
    <p>Resource Disaggregation Break monolithic servers into network-attached resource pools</p>
  </div>
  <div class="page">
    <p>Resource Disaggregation</p>
    <p>Network</p>
    <p>Break monolithic servers into network-attached resource pools</p>
  </div>
  <div class="page">
    <p>Resource Disaggregation</p>
    <p>Network</p>
    <p>Better manageability, independent scaling, tight resource packing</p>
    <p>Break monolithic servers into network-attached resource pools</p>
  </div>
  <div class="page">
    <p>Resource Disaggregation</p>
    <p>Network LegoOS</p>
    <p>Berkeley Firebox</p>
    <p>Better manageability, independent scaling, tight resource packing</p>
    <p>Break monolithic servers into network-attached resource pools</p>
  </div>
  <div class="page">
    <p>Disaggregated Storage</p>
    <p>Compute Pool</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r N</p>
    <p>et w</p>
    <p>or k</p>
    <p>Storage Pool</p>
    <p>Storage Pool</p>
    <p>Compute Pool</p>
    <p>Separate compute and storage pools</p>
    <p>Manage and scale independently</p>
    <p>A common practice in datacenters and clouds</p>
  </div>
  <div class="page">
    <p>Network is getting faster (e.g., 200 Gbps, sub-600 ns)</p>
    <p>Application need for large memory + memory-capacity wall</p>
    <p>Remote/disaggregated memory</p>
    <p>Applications access (large) non-local memory</p>
    <p>Compute Pool</p>
    <p>R D</p>
    <p>M A</p>
    <p>Memory Pool</p>
    <p>Memory Pool</p>
    <p>Compute Pool</p>
    <p>FaRM</p>
    <p>Disaggregated Memory</p>
    <p>Memory Blades, ISCA'09 NAM-DB, VLDB'17 ZombieLand, EuroSys'18 StRoM, EuroSys'20</p>
    <p>HTC-DC</p>
  </div>
  <div class="page">
    <p>Disaggregated Persistent Memory?</p>
  </div>
  <div class="page">
    <p>Disaggregated Persistent Memory? PM: byte-addressable, persistent, memory-like perf</p>
  </div>
  <div class="page">
    <p>Compute Pool</p>
    <p>R D</p>
    <p>M A</p>
    <p>PM Pool</p>
    <p>PM Pool</p>
    <p>Compute Pool</p>
    <p>Disaggregated Persistent Memory? PM: byte-addressable, persistent, memory-like perf</p>
    <p>Disaggregating PM (DPM)</p>
    <p>Enjoy disaggregations management, scalability, utilization benefits</p>
    <p>Easy way to integrate PM into current datacenters</p>
  </div>
  <div class="page">
    <p>Compute Pool</p>
    <p>R D</p>
    <p>M A</p>
    <p>PM Pool</p>
    <p>PM Pool</p>
    <p>Compute Pool</p>
    <p>Disaggregated Persistent Memory? PM: byte-addressable, persistent, memory-like perf</p>
    <p>Disaggregating PM (DPM)</p>
    <p>Enjoy disaggregations management, scalability, utilization benefits</p>
    <p>Easy way to integrate PM into current datacenters</p>
    <p>Use existing disaggregated systems for DPM?</p>
    <p>Disaggregated storage: software stack too slow for fast PM</p>
    <p>Disaggregated memory: do not provide data reliability</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>Non-Disaggregation</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Local PM</p>
    <p>Hotpot, SoCC17 Octopus, ATC17 Remote Regions, ATC18</p>
    <p>Mgmt</p>
    <p>Local PM Mgmt</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>Non-Disaggregation Active Disaggregation</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Mgmt</p>
    <p>Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Compute</p>
    <p>Local PM</p>
    <p>Hotpot, SoCC17 Octopus, ATC17 Remote Regions, ATC18</p>
    <p>HERD, SIGCOMM14 Decibel, NSDI17 HyperLoop, SIGCOMM18 Snowflake, NSDI20</p>
    <p>Mgmt</p>
    <p>Local PM Mgmt</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>Non-Disaggregation Active Disaggregation</p>
    <p>Traditional Storage Systems</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Mgmt</p>
    <p>Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Compute</p>
    <p>Local PM</p>
    <p>Hotpot, SoCC17 Octopus, ATC17 Remote Regions, ATC18</p>
    <p>HERD, SIGCOMM14 Decibel, NSDI17 HyperLoop, SIGCOMM18 Snowflake, NSDI20</p>
    <p>Mgmt</p>
    <p>Local PM Mgmt</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>Non-Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Traditional Storage Systems Unexplored Area!</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Mgmt</p>
    <p>Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Compute Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PMCompute Compute</p>
    <p>Mgmt</p>
    <p>Local PM</p>
    <p>Hotpot, SoCC17 Octopus, ATC17 Remote Regions, ATC18</p>
    <p>HERD, SIGCOMM14 Decibel, NSDI17 HyperLoop, SIGCOMM18 Snowflake, NSDI20</p>
    <p>Mgmt</p>
    <p>Local PM Mgmt</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>Non-Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Traditional Storage Systems Unexplored Area!</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Mgmt</p>
    <p>Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Compute Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PMCompute Compute</p>
    <p>Mgmt</p>
    <p>Local PM Mgmt</p>
    <p>Local PM Mgmt</p>
  </div>
  <div class="page">
    <p>Passive Disaggregated PM (pDPM)</p>
    <p>pDPM</p>
    <p>Passive PM devices with NIC and PM</p>
    <p>Accessible only via network</p>
    <p>Why pDPM?</p>
    <p>Low CapEx and OpEx</p>
    <p>Easy to add, remove, and change</p>
    <p>No scalability bottleneck at storage nodes</p>
    <p>Research value in exploring new design area</p>
    <p>Why possible now? Fast RDMA network + CPU bypassing</p>
    <p>Compute</p>
    <p>Mgmt</p>
    <p>Compute</p>
    <p>Mgmt</p>
    <p>PMNIC</p>
    <p>PMNIC</p>
  </div>
  <div class="page">
    <p>Without processing power at PM, where to process and manage data?</p>
  </div>
  <div class="page">
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>No Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Traditional Storage Systems Unexplored Area!</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Remote PM</p>
    <p>Mgmt</p>
    <p>Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PM</p>
    <p>Compute</p>
    <p>Compute Mgmt</p>
    <p>Remote PM</p>
    <p>Remote PMCompute Compute</p>
    <p>Mgmt</p>
    <p>Local PM Mgmt</p>
    <p>Local PM Mgmt</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data?</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>data access data access</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes At a coordinator</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>DN DN</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes At a coordinator</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator</p>
    <p>DN DN</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes At a coordinator</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>DN DN</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Non Disaggregation Active Disaggregation Passive Disaggregation</p>
    <p>Where to process and manage data? At compute nodes At a coordinatorA hybrid approach</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>Spectrum of Datacenter PM Deploy Models</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>CN: Compute Node, DN: Data Node with PM</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Passive Disaggregated PM (pDPM) Systems</p>
    <p>We design and implement three pDPM key-value stores</p>
    <p>At computer nodes</p>
    <p>At global coordinator</p>
    <p>A hybrid approach</p>
    <p>Carry out extensive experiments: performance, scalability, costs</p>
    <p>Clover is the best pDPM model: perf similar to active DPM, but lower costs</p>
    <p>Discovered tradeoffs between passive and active DPMs 12</p>
    <p>pDPM-Direct</p>
    <p>pDPM-Central</p>
    <p>Clover</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>pDPM-Direct: Directly Access and Manage DNs from CNs</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>DN DN</p>
    <p>CN CN</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>CNs access and manage DNs directly via one-sided RDMA</p>
    <p>Both data and control planes run within CNs</p>
    <p>pDPM-Direct: Directly Access and Manage DNs from CNs</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>One-sided RDMA</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>CNs access and manage DNs directly via one-sided RDMA</p>
    <p>Both data and control planes run within CNs</p>
    <p>pDPM-Direct: Directly Access and Manage DNs from CNs</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>One-sided RDMA</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>CNs access and manage DNs directly via one-sided RDMA</p>
    <p>Both data and control planes run within CNs</p>
    <p>Challenges</p>
    <p>How to manage DN space?</p>
    <p>How to coordinate concurrent reads/writes across CNs?</p>
    <p>pDPM-Direct: Directly Access and Manage DNs from CNs</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>One-sided RDMA</p>
  </div>
  <div class="page">
    <p>DN</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>CN</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
  </div>
  <div class="page">
    <p>un-committed committed</p>
    <p>DN</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>committed un-committed</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)</p>
    <p>CN</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>committed csum un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)</p>
    <p>CN</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>CN</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN data csumdata csum</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN data csumdata csum</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum</p>
    <p>data csum</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
    <p>un-committed</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum csumKV</p>
    <p>Entry</p>
    <p>KV Entry</p>
    <p>un-committed committed</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum csumKV</p>
    <p>Entry</p>
    <p>KV Entry</p>
    <p>un-committed committed</p>
  </div>
  <div class="page">
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum csum</p>
    <p>Read Flow</p>
    <p>CN reads committed data and CRC  CN checks if CRC match. If mismatch, retry</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
    <p>un-committed committed</p>
  </div>
  <div class="page">
    <p>data csum</p>
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum csum</p>
    <p>Read Flow</p>
    <p>CN reads committed data and CRC  CN checks if CRC match. If mismatch, retry</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
    <p>un-committed committed</p>
  </div>
  <div class="page">
    <p>data csum</p>
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum csum</p>
    <p>Read Flow</p>
    <p>CN reads committed data and CRC  CN checks if CRC match. If mismatch, retry</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
    <p>Best case Write: 4 RTT + csum calc Read: 1 RTT + csum calc</p>
    <p>un-committed committed</p>
  </div>
  <div class="page">
    <p>data csum</p>
    <p>un-committed csum committed csum</p>
    <p>DN</p>
    <p>lock</p>
    <p>pDPM-Direct</p>
    <p>CN</p>
    <p>lock committed csum</p>
    <p>un-committed csum</p>
    <p>. . .</p>
    <p>Our solution</p>
    <p>Pre-assign two spaces for each KV entry (committed+uncommitted)  Lock-free, checksum-based read (csum)  RDMA c&amp;s-based write lock (lock)</p>
    <p>Write Flow</p>
    <p>Acquire lock  Write new data+CRC into uncommitted space (redo-copy)  Write new data+CRC into committed space  Release lock</p>
    <p>CN</p>
    <p>csum csum</p>
    <p>Read Flow</p>
    <p>CN reads committed data and CRC  CN checks if CRC match. If mismatch, retry</p>
    <p>KV Entry</p>
    <p>KV Entry</p>
    <p>Best case Write: 4 RTT + csum calc Read: 1 RTT + csum calc</p>
    <p>Slow write Slow with large data Poor scalability under concurrent accesses</p>
    <p>un-committed committed</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover Metadata</p>
    <p>Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover Metadata</p>
    <p>Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
    <p>- Slow write - Slow for large data</p>
    <p>Distributed data &amp; metadata planes</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover Metadata</p>
    <p>Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
    <p>- Slow write - Slow for large data</p>
    <p>Distributed data &amp; metadata planes Centralized data &amp; metadata planes</p>
  </div>
  <div class="page">
    <p>The central coordinator</p>
    <p>Manages DN space</p>
    <p>Serializes CNs accesses with local locking</p>
    <p>CNs communicate with the coordinator through two-sided RDMA</p>
    <p>Coordinator accesses DNs through one-sided RDMA DN</p>
    <p>CN</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>CPUNIC DRAMPM</p>
    <p>Coordinator</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Two-sided RDMA</p>
    <p>One-sided RDMA</p>
    <p>pDPM-Central: A Central Coordinator between CNs and DNs</p>
  </div>
  <div class="page">
    <p>The central coordinator</p>
    <p>Manages DN space</p>
    <p>Serializes CNs accesses with local locking</p>
    <p>CNs communicate with the coordinator through two-sided RDMA</p>
    <p>Coordinator accesses DNs through one-sided RDMA DN</p>
    <p>CN</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>CPUNIC DRAMPM</p>
    <p>Coordinator</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Easier to manage DNs and coordinate concurrent accesses</p>
    <p>Two-sided RDMA</p>
    <p>One-sided RDMA</p>
    <p>pDPM-Central: A Central Coordinator between CNs and DNs</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>free space management</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>free space management</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>R P</p>
    <p>C</p>
    <p>Data</p>
    <p>free space management</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>R P</p>
    <p>C</p>
    <p>Data</p>
    <p>free space management</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>R P</p>
    <p>C</p>
    <p>Data</p>
    <p>free space management</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>R P</p>
    <p>C</p>
    <p>Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>CN sends RPC to Coordinator</p>
    <p>Data</p>
    <p>R P</p>
    <p>C</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>CN sends RPC to Coordinator  Coordinator locks the entry in mapping table</p>
    <p>Data</p>
    <p>R P</p>
    <p>C</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>CN sends RPC to Coordinator  Coordinator locks the entry in mapping table  Coordinator reads data from DN and then replies to CN</p>
    <p>Data</p>
    <p>R P</p>
    <p>C</p>
    <p>Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1 DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>CN sends RPC to Coordinator  Coordinator locks the entry in mapping table  Coordinator reads data from DN and then replies to CN</p>
    <p>Data</p>
    <p>Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1</p>
    <p>All cases Read: 2 RTTs Write: 2 RTTs</p>
    <p>DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>CN sends RPC to Coordinator  Coordinator locks the entry in mapping table  Coordinator reads data from DN and then replies to CN</p>
    <p>Data</p>
    <p>Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>pDPM-Central</p>
    <p>Coordinator</p>
    <p>DN1</p>
    <p>All cases Read: 2 RTTs Write: 2 RTTs</p>
    <p>Slower read Poor scalability: coordinator is the bottleneck</p>
    <p>DN2</p>
    <p>CN1 CN2</p>
    <p>Write Flow</p>
    <p>CN sends RPC (with data) to Coordinator  Coordinator allocates a new space for the write  Coordinator writes data to it (as redo-copy)  Coordinator updates its local map table (with a local lock)</p>
    <p>entry2 loc entry1 loc</p>
    <p>entryN loc . . .</p>
    <p>Mapping Table</p>
    <p>lock lock</p>
    <p>lock</p>
    <p>Entry1</p>
    <p>Read Flow</p>
    <p>CN sends RPC to Coordinator  Coordinator locks the entry in mapping table  Coordinator reads data from DN and then replies to CN</p>
    <p>Data</p>
    <p>Data</p>
    <p>free space management</p>
    <p>entry1 loc new</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover Metadata</p>
    <p>Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>- Slow write - Slow for large data</p>
    <p>- Extra read RTTs - Coordinator cannot scale</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>- Slow write - Slow for large data</p>
    <p>- Extra read RTTs - Coordinator cannot scale</p>
    <p>Centralized data &amp; metadata planes Distributed data &amp; metadata planes</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>- Slow write - Slow for large data</p>
    <p>- Extra read RTTs - Coordinator cannot scale</p>
    <p>Centralized data &amp; metadata planes Distributed data &amp; metadata planes</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
    <p>Separate data &amp; metadata planes</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>- Slow write - Slow for large data</p>
    <p>- Extra read RTTs - Coordinator cannot scale</p>
    <p>Centralized data &amp; metadata planes Distributed data &amp; metadata planes</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
    <p>Separate data &amp; metadata planes</p>
  </div>
  <div class="page">
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>CPUNIC DRAMPM</p>
    <p>Metadata Server</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Two-sided RDMA</p>
    <p>One-sided RDMA</p>
    <p>Clover: Combining Distributed and Centralized Approaches</p>
  </div>
  <div class="page">
    <p>High-level idea: separate data and metadata plane</p>
    <p>Separate locations</p>
    <p>Different communication methods</p>
    <p>Different management strategy CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>CPUNIC DRAMPM</p>
    <p>Metadata Server</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Two-sided RDMA</p>
    <p>One-sided RDMA</p>
    <p>Clover: Combining Distributed and Centralized Approaches</p>
  </div>
  <div class="page">
    <p>High-level idea: separate data and metadata plane</p>
    <p>Separate locations</p>
    <p>Different communication methods</p>
    <p>Different management strategy</p>
    <p>Data Plane</p>
    <p>CNs directly access DNs with one-sided RDMA</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>CPUNIC DRAMPM</p>
    <p>Metadata Server</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Two-sided RDMA</p>
    <p>One-sided RDMA</p>
    <p>Clover: Combining Distributed and Centralized Approaches</p>
  </div>
  <div class="page">
    <p>High-level idea: separate data and metadata plane</p>
    <p>Separate locations</p>
    <p>Different communication methods</p>
    <p>Different management strategy</p>
    <p>Data Plane</p>
    <p>CNs directly access DNs with one-sided RDMA</p>
    <p>Metadata Plane</p>
    <p>CNs talk to metadata server (MS) with two-sided RDMA</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>CPU NIC</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>NIC</p>
    <p>PM</p>
    <p>NIC</p>
    <p>CPUNIC DRAMPM</p>
    <p>Metadata Server</p>
    <p>DN DN</p>
    <p>CN CN</p>
    <p>Two-sided RDMA</p>
    <p>One-sided RDMA</p>
    <p>Clover: Combining Distributed and Centralized Approaches</p>
  </div>
  <div class="page">
    <p>Main Challenge in Data Plane:</p>
    <p>How to efficiently support concurrent data accesses from CNs to DNs?</p>
  </div>
  <div class="page">
    <p>Our Approaches:</p>
    <p>Lock-free data structures for un-orchestrated concurrent accesses</p>
    <p>Optimizations to further reduce read/write RTTs</p>
    <p>Guarantees read committed and atomic write</p>
    <p>Main Challenge in Data Plane:</p>
    <p>How to efficiently support concurrent data accesses from CNs to DNs?</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>CN2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head CN2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head CN2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0</p>
    <p>D0</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0</p>
    <p>D0</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>C ha</p>
    <p>in CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
    <p>D1</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>C ha</p>
    <p>in CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>C ha</p>
    <p>in CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>C ha</p>
    <p>in CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
    <p>CAS D0</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>C ha</p>
    <p>in CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
    <p>D1</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1 Lock-free data structures</p>
    <p>Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>D0</p>
    <p>pointer metadata</p>
    <p>head</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>C ha</p>
    <p>in CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor</p>
    <p>D1</p>
    <p>D0</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
    <p>C ha</p>
    <p>in</p>
    <p>D1D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Latest? No</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>D1D2</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>Latest? No</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Latest? Yes</p>
    <p>D1D2D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Latest? Yes</p>
    <p>D1D2D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Optimization: Shortcut Uses a shortcut to avoid long chain walk A shortcut at DN (mostly) points to the latest data 1. CN reads shortcut, then uses it to read data 2. CN still does cursor read in parallel  Returns when the faster of 1 and 2 finish</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Optimization: Shortcut Uses a shortcut to avoid long chain walk A shortcut at DN (mostly) points to the latest data 1. CN reads shortcut, then uses it to read data 2. CN still does cursor read in parallel  Returns when the faster of 1 and 2 finish</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>ptr meta</p>
    <p>shortcut</p>
    <p>shortcut</p>
    <p>D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Optimization: Shortcut Uses a shortcut to avoid long chain walk A shortcut at DN (mostly) points to the latest data 1. CN reads shortcut, then uses it to read data 2. CN still does cursor read in parallel  Returns when the faster of 1 and 2 finish</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>ptr meta</p>
    <p>shortcut</p>
    <p>shortcut Read</p>
    <p>Shortcut</p>
    <p>ptr meta</p>
    <p>D3</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Optimization: Shortcut Uses a shortcut to avoid long chain walk A shortcut at DN (mostly) points to the latest data 1. CN reads shortcut, then uses it to read data 2. CN still does cursor read in parallel  Returns when the faster of 1 and 2 finish</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>ptr meta</p>
    <p>shortcut</p>
    <p>shortcut</p>
    <p>Read D3</p>
    <p>Read Shortcut</p>
    <p>ptr meta</p>
    <p>D3 pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha in</p>
    <p>CN2</p>
    <p>Per-entry Cursor</p>
    <p>Per-entry Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>Read Flow 1. Fetch cursor-pointed data 2. Walks the chain until found the latest</p>
    <p>Optimization: Shortcut Uses a shortcut to avoid long chain walk A shortcut at DN (mostly) points to the latest data 1. CN reads shortcut, then uses it to read data 2. CN still does cursor read in parallel  Returns when the faster of 1 and 2 finish</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>ptr meta</p>
    <p>shortcut</p>
    <p>shortcut</p>
    <p>Read D3</p>
    <p>Read Shortcut</p>
    <p>ptr meta</p>
    <p>D3</p>
    <p>Perf when low contention Write: 2 RTT Read: 1 RTT</p>
    <p>pointer metadata</p>
    <p>Lock-free data structures Chained redo copies (versions) at DNs CNs cache a cursor that points to a version</p>
    <p>Write Flow 1. Out-of-place write (create redo copy) 2. Chain the redo-copy, using c&amp;s 3. If 2. fails, update cursor and retry</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>Main Challenges in Metadata Plane:</p>
    <p>How to provide low-overhead, scalable metadata service?</p>
  </div>
  <div class="page">
    <p>Our Approaches</p>
    <p>Move all metadata operations off performance critical paths</p>
    <p>Batch metadata operations</p>
    <p>No cache invalidation</p>
    <p>No performance overhead caused by metadata ops (common case)</p>
    <p>Main Challenges in Metadata Plane:</p>
    <p>How to provide low-overhead, scalable metadata service?</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha inCN2</p>
    <p>Per-data Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>MS</p>
    <p>FreeLists</p>
    <p>GCLists</p>
    <p>Metadata</p>
    <p>Two-sided RDMA</p>
    <p>Metadata Server (MS)</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut pointer metadata</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha inCN2</p>
    <p>Per-data Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>MS</p>
    <p>FreeLists</p>
    <p>GCLists</p>
    <p>Metadata</p>
    <p>Two-sided RDMA</p>
    <p>Metadata Server (MS)  Space management  Garbage collection  Global load balancing</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut pointer metadata</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha inCN2</p>
    <p>Per-data Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>MS</p>
    <p>FreeLists</p>
    <p>GCLists</p>
    <p>Metadata</p>
    <p>Two-sided RDMA</p>
    <p>Metadata Server (MS)  Space management  Garbage collection  Global load balancing</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>Alloc Flow  CN asks MS for a bunch of free</p>
    <p>buffers at a time  MS assigns spaces from FreeLists</p>
    <p>(with load balancing consideration)</p>
    <p>al lo</p>
    <p>c</p>
    <p>al lo</p>
    <p>c</p>
    <p>pointer metadata</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha inCN2</p>
    <p>Per-data Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>MS</p>
    <p>FreeLists</p>
    <p>GCLists</p>
    <p>Metadata</p>
    <p>Two-sided RDMA</p>
    <p>Metadata Server (MS)  Space management  Garbage collection  Global load balancing</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>Alloc Flow  CN asks MS for a bunch of free</p>
    <p>buffers at a time  MS assigns spaces from FreeLists</p>
    <p>(with load balancing consideration)</p>
    <p>pointer metadata</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>D0head C</p>
    <p>ha inCN2</p>
    <p>Per-data Cursor D0D1</p>
    <p>C ha</p>
    <p>in C</p>
    <p>ha in</p>
    <p>MS</p>
    <p>FreeLists</p>
    <p>GCLists</p>
    <p>Metadata</p>
    <p>Two-sided RDMA</p>
    <p>Metadata Server (MS)  Space management  Garbage collection  Global load balancing</p>
    <p>D3</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>shortcut</p>
    <p>Alloc Flow  CN asks MS for a bunch of free</p>
    <p>buffers at a time  MS assigns spaces from FreeLists</p>
    <p>(with load balancing consideration)</p>
    <p>GC Flow  After write, CN asynchronously retires a batch of old versions</p>
    <p>MS enqueues them into FreeLists</p>
    <p>re tir</p>
    <p>e</p>
    <p>re tir</p>
    <p>e</p>
    <p>pointer metadata</p>
  </div>
  <div class="page">
    <p>CN1</p>
    <p>DN1</p>
    <p>head</p>
    <p>CN2</p>
    <p>Per-data Cursor D0D1</p>
    <p>MS</p>
    <p>FreeLists</p>
    <p>GCLists</p>
    <p>Metadata</p>
    <p>Two-sided RDMA</p>
    <p>Metadata Server (MS)  Space management  Garbage collection  Global load balancing</p>
    <p>D3D3</p>
    <p>shortcut</p>
    <p>Alloc Flow  CN asks MS for a bunch of free</p>
    <p>buffers at a time  MS assigns spaces from FreeLists</p>
    <p>(with load balancing consideration)</p>
    <p>GC Flow  After write, CN asynchronously retires a batch of old versions</p>
    <p>MS enqueues them into FreeLists pointer metadata</p>
  </div>
  <div class="page">
    <p>DN1 DN2 DN3 DN4</p>
    <p>D0 D0</p>
    <p>Data reliability through a novel chaining replication  Link a version to all the replicas of next version</p>
    <p>Metadata reliability through shadow MS servers</p>
    <p>Reliability and Load Balancing</p>
    <p>CN1</p>
    <p>Load balancing via a two-level approach  MS and CNs both control location  Versions in a chain can be on different DNs</p>
  </div>
  <div class="page">
    <p>DN1 DN2 DN3 DN4</p>
    <p>D0 D0</p>
    <p>Data reliability through a novel chaining replication  Link a version to all the replicas of next version</p>
    <p>Metadata reliability through shadow MS servers</p>
    <p>Reliability and Load Balancing</p>
    <p>D1 D1</p>
    <p>D2 D2</p>
    <p>CN1</p>
    <p>Load balancing via a two-level approach  MS and CNs both control location  Versions in a chain can be on different DNs</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>- Write cannot scale - Large metadata consumption</p>
    <p>- Extra read RTTs - Coordinator cannot scale</p>
    <p>Centralized data &amp; metadata Distributed data &amp; metadata</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
    <p>Separate data &amp; metadata</p>
  </div>
  <div class="page">
    <p>Where to process and manage data?</p>
    <p>pDPM-Direct pDPM-CentralClover</p>
    <p>- Write cannot scale - Large metadata consumption</p>
    <p>- Extra read RTTs - Coordinator cannot scale</p>
    <p>Centralized data &amp; metadata Distributed data &amp; metadata</p>
    <p>Metadata Server</p>
    <p>DN DN DN DN</p>
    <p>CN CN</p>
    <p>CNCN</p>
    <p>CN CN</p>
    <p>control</p>
    <p>data access</p>
    <p>control</p>
    <p>data access</p>
    <p>Coordinator control coordinate access</p>
    <p>control</p>
    <p>data access data access</p>
    <p>DN DN</p>
    <p>data access data access</p>
    <p>Separate data &amp; metadata</p>
    <p>+ Good read/write performance + Scale with both CNs and DNs</p>
  </div>
  <div class="page">
    <p>Evaluation Setup Systems evaluated</p>
    <p>pDPM systems: pDPM-Direct, pDPM-Central, Clover  Non-disaggregated PM systems: Octopus [ATC17] and Hotpot [SoCC17]  Two-sided KVS: HERD [SIGCOMM14] (also ported to BlueField SmartNIC, HERD-BF)</p>
    <p>Testbed</p>
    <p>14 servers, each with a 100Gbps RDMA NIC, connected via a 100Gbps IB switch  DRAM as emulated PM</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
  </div>
  <div class="page">
    <p>Microbenchmark - Latency</p>
    <p>Read</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>Verbs read Clover pDPM-Direct pDPM-Central HERD HERD-BF</p>
    <p>Write</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>Request Size (B) 128 256 512 1K 2K 4K</p>
    <p>One CN synchronously reads/writes a KV entry on a DN  HERD and HERD-BF use 12 polling threads</p>
    <p>Clover read latency similar to raw RDMA write latency around 2x of raw RDMA</p>
  </div>
  <div class="page">
    <p>YCSB Results</p>
    <p>100K KV entries, 1 million operations, Zipf access distribution  4 CNs (8 threads per CN), 4 DNs</p>
  </div>
  <div class="page">
    <p>YCSB Results</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>O P</p>
    <p>S )</p>
    <p>C (0% Write) B (5% Write) A (50% Write)</p>
    <p>pDPM-Direct pDPM-Central Clover Octopus</p>
    <p>100K KV entries, 1 million operations, Zipf access distribution  4 CNs (8 threads per CN), 4 DNs</p>
  </div>
  <div class="page">
    <p>YCSB Results</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>O P</p>
    <p>S )</p>
    <p>C (0% Write) B (5% Write) A (50% Write)</p>
    <p>pDPM-Direct pDPM-Central Clover Octopus</p>
    <p>100K KV entries, 1 million operations, Zipf access distribution  4 CNs (8 threads per CN), 4 DNs</p>
  </div>
  <div class="page">
    <p>YCSB Results</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>O P</p>
    <p>S )</p>
    <p>C (0% Write) B (5% Write) A (50% Write)</p>
    <p>pDPM-Direct pDPM-Central Clover Octopus</p>
    <p>100K KV entries, 1 million operations, Zipf access distribution  4 CNs (8 threads per CN), 4 DNs</p>
  </div>
  <div class="page">
    <p>YCSB Results</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>O P</p>
    <p>S )</p>
    <p>C (0% Write) B (5% Write) A (50% Write)</p>
    <p>pDPM-Direct pDPM-Central Clover Octopus</p>
    <p>100K KV entries, 1 million operations, Zipf access distribution  4 CNs (8 threads per CN), 4 DNs</p>
    <p>Clover outperforms non-disaggregated PM systems and is similar to aDPM under common cases</p>
    <p>(worse under heavy concurrent writes)</p>
  </div>
  <div class="page">
    <p>YCSB Results</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>O P</p>
    <p>S )</p>
    <p>C (0% Write) B (5% Write) A (50% Write)</p>
    <p>pDPM-Direct pDPM-Central Clover Octopus</p>
    <p>100K KV entries, 1 million operations, Zipf access distribution  4 CNs (8 threads per CN), 4 DNs</p>
    <p>Clover outperforms non-disaggregated PM systems and is similar to aDPM under common cases</p>
    <p>(worse under heavy concurrent writes)</p>
    <p>Clover is cheap to build and run</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>pDPM offers deployment, cost, and performance benefits</p>
    <p>Cleanly separating data and metadata is crucial but not easy</p>
    <p>Our pDPM findings could also apply to disaggregated DRAM</p>
    <p>pDPM performs worse under high write contention or complex ops</p>
    <p>Future system could benefit from a hybrid disaggregation model</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>.io</p>
    <p>github.com/WukLab/pDPMopen source @</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>pDPM-Direct/Central RW Protocols</p>
    <p>CN</p>
    <p>DN</p>
    <p>C C</p>
    <p>Read Write C CRC Calculation</p>
    <p>CN</p>
    <p>Cor</p>
    <p>DN</p>
    <p>RL U</p>
    <p>Read Write</p>
    <p>WL UM U RL Reader Lock</p>
    <p>U Unlock</p>
    <p>WL Writer Lock</p>
    <p>UM Update Metadata</p>
  </div>
  <div class="page">
    <p>MS</p>
    <p>CN</p>
    <p>DN</p>
    <p>Write</p>
    <p>CreateRedo</p>
    <p>LinkRedo</p>
    <p>Write-Background</p>
    <p>UpdateShortcut</p>
    <p>GC</p>
    <p>Read</p>
    <p>Check if latest</p>
    <p>Clover RW Protocols</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write</p>
    <p>Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write</p>
    <p>Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write</p>
    <p>Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write GC</p>
    <p>Head Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write GC</p>
    <p>Head Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write GC Replication</p>
    <p>Head Head Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write GC Replication</p>
    <p>Head Head Head</p>
  </div>
  <div class="page">
    <p>Clover Data Structure</p>
    <p>Write GC Replication</p>
    <p>Head Head Head</p>
    <p>Load Balancing</p>
  </div>
  <div class="page">
    <p>Where is the key-value hashtable?</p>
    <p>pDPM-Direct: each CN has an identical mapping table</p>
    <p>pDPM-Central: each CN performs CN-&gt;coordinator mapping. Each coordinator has a full identical mapping table</p>
    <p>Clover: MSs have full mapping table, each CN caches a portion of it</p>
  </div>
  <div class="page">
    <p>Possible Questions</p>
    <p>If DPM-Central has multiple coordinates, cannot it scale?</p>
    <p>Why not use read-after-write to ensure remote persistency?</p>
    <p>Where is the key-&gt; entry hashtable?</p>
    <p>The whole table is at MS, each CN caches a portion of it?</p>
  </div>
</Presentation>
