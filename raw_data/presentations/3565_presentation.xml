<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Razor: A Framework for</p>
    <p>Post-deployment Software</p>
    <p>Debloating</p>
    <p>Chenxiong Qian, Hong Hu, Mansour Alharthi,</p>
    <p>Pak Ho (Simon) Chung, Taesoo Kim, Wenke Lee</p>
  </div>
  <div class="page">
    <p>Software Is Getting Bigger</p>
    <p>Li ne</p>
    <p>s of</p>
    <p>C od</p>
    <p>e</p>
    <p>Linux Kernel Version</p>
  </div>
  <div class="page">
    <p>Software Is Bloated  Software contains dead code.</p>
    <p>Avg: 73.01%</p>
    <p>Quach et al. (FEAST17) 3</p>
  </div>
  <div class="page">
    <p>Software Is Bloated  Software contains code that is never used by users.</p>
    <p>Avg: 20.96%</p>
    <p>Quach et al. (FEAST17) 4</p>
  </div>
  <div class="page">
    <p>Bloated Code Increases Attack Surface</p>
    <p>Example2: CVE-2014-0038  compat_sys_recvmmsg handles</p>
    <p>recvmmsg system call for x32 ABI.  x32 ABI takes advantage of the 64-bit</p>
    <p>environment while using 32-bit pointers for less overhead.</p>
    <p>Example1: HeartBleed</p>
    <p>No such programs exist in real world!</p>
    <p>X32 is enabled by default in all major distributions like Ubuntu!</p>
    <p>TLS heartbeat extension.  Not used by most users.  Enabled in default.</p>
  </div>
  <div class="page">
    <p>Software Debloating  All existing software debloating systems have the following limitations:</p>
    <p>Require source code.</p>
    <p>Source code is not always accessible to users.</p>
    <p>Its challenging and time-consuming to recompile source code.</p>
    <p>Assume test cases are complete.</p>
    <p>This assumption mostly fails in real world.</p>
    <p>Impossible to provide complete test cases for a particular functionality.</p>
  </div>
  <div class="page">
    <p>Razor</p>
    <p>Performs code reduction for deployed binaries.</p>
    <p>Uses heuristics to infer related code for given test cases.</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>bloated binary</p>
    <p>test cases</p>
    <p>Tracer</p>
    <p>Dynamorio</p>
    <p>Intel PIN</p>
    <p>Intel PT execution</p>
    <p>traces CFG</p>
    <p>decode</p>
    <p>Path Finder</p>
    <p>Heuristic A</p>
    <p>Heuristic B</p>
    <p>... CFG</p>
    <p>Generator</p>
    <p>assembler</p>
    <p>instrumenter</p>
    <p>fault handler</p>
    <p>debloated binary</p>
    <p>Razor</p>
  </div>
  <div class="page">
    <p>Tracer  Multiple tracers</p>
    <p>Software-based tracers (Dynamorio, Intel PIN)  Complete trace  Significant overhead</p>
    <p>Hardware-based tracer (Intel PT)  Small overhead  Incomplete trace</p>
    <p>Programs under different tracing environments show divergent paths.</p>
    <p>The collected trace contains three parts:</p>
    <p>Executed Blocks [0x4005c0, 0x4005f2] [0x400596,0x4005ae] ...</p>
    <p>Conditional Branches [0x4004e3: true] [0x4004ee: false] [0x400614: true, false] ...</p>
    <p>Indirect Calls/Jumps [0x400677, 0x4005e6#18, 0x4005f6#6 ...</p>
  </div>
  <div class="page">
    <p>Path Finder  Four Heuristics</p>
    <p>L1: cmp %rbx, %rax jge L3</p>
    <p>L3: cmp %rcx, %rax jge L5</p>
    <p>L5: test %rax, %rax jns L7</p>
    <p>L7: test %rax, %rax jle L9</p>
    <p>L9: mov %rax, %rdi call sqrtf@plt</p>
    <p>L2: mov %rbx, %rax jmp L3</p>
    <p>L4: mov %rcx, %rax jmp L5</p>
    <p>L6: mov %rax, %rdi call L_abs1 jmp L7</p>
    <p>L8: mov %rax, %rdi call sqrt@plt jmp L9</p>
    <p>T</p>
    <p>F</p>
    <p>T</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>L1: cmp %rbx, %rax jge L3</p>
    <p>L3: cmp %rcx, %rax jge L5</p>
    <p>L5: test %rax, %rax jns L7</p>
    <p>L7: test %rax, %rax jle L9</p>
    <p>L9: mov %rax, %rdi call sqrtf@plt</p>
    <p>L2: mov %rbx, %rax jmp L3</p>
    <p>F</p>
    <p>T</p>
    <p>T</p>
    <p>T</p>
    <p>T zCode</p>
    <p>zCode (zero code)  Only adds edges.</p>
    <p>L4: mov %rcx, %rax jmp L5</p>
    <p>F</p>
    <p>zCall</p>
    <p>zCall (zero call)  Call instructions are</p>
    <p>disallowed. L6: mov %rax, %rdi call L_abs1 jmp L7</p>
    <p>F</p>
    <p>zLib</p>
    <p>zLib (zero library call)  Non-executed library</p>
    <p>calls are disallowed.</p>
    <p>L8: mov %rax, %rdi call sqrt@plt jmp L9</p>
    <p>F</p>
    <p>zFunc</p>
    <p>zFun (zero functionality)  Library calls with</p>
    <p>different functionalities are disallowed.</p>
  </div>
  <div class="page">
    <p>Generator  Assembler</p>
    <p>Disassembles the binary based on the expanded CFG.  Symbolizes basic blocks.</p>
    <p>Instrumenter  Concretizes targets of indirect calls/jumps.  Fixes callback function pointers.  Enforce allowed control-flows.</p>
    <p>Fault handler  Dumps call stacks and exits the execution.</p>
    <p>Rewriter  Compiles the instrumented assembly code to an object file.  Copies the code section into original binary.  Fixes exception handlers addresses in `.gcc_except_table` section.</p>
  </div>
  <div class="page">
    <p>Generator  Assembler</p>
    <p>Disassembles the binary based on the expanded CFG.  Symbolizes basic blocks.</p>
    <p>Instrumenter  Concretizes targets of indirect calls/jumps.  Fixes callback function pointers.  Enforces allowed control-flows.</p>
    <p>Fault handler  Dumps call stacks and exits the execution.</p>
    <p>Rewriter  Compiles the instrumented assembly code to an object file.  Copies the code section into original binary.  Fixes exception handlers addresses in `.gcc_except_table` section.</p>
  </div>
  <div class="page">
    <p>Generator  Assembler</p>
    <p>Disassembles the binary based on the expanded CFG.  Symbolizes basic blocks.</p>
    <p>Instrumenter  Concretizes targets of indirect calls/jumps.  Fixes callback function pointers.  Enforce allowed control-flows.</p>
    <p>Fault handler  Dumps call stacks and exits the execution.</p>
    <p>Rewriter  Compiles the instrumented assembly code to an object file.  Copies the code section into original binary.  Fixes exception handlers addresses in `.gcc_except_table` section.</p>
  </div>
  <div class="page">
    <p>Generator  Assembler</p>
    <p>Disassembles the binary based on the expanded CFG.  Symbolizes basic blocks.</p>
    <p>Instrumenter  Concretizes targets of indirect calls/jumps.  Fixes callback function pointers.  Enforce allowed control-flows.</p>
    <p>Fault handler  Dumps call stacks and exits the execution.</p>
    <p>Rewriter  Compiles the instrumented assembly code to an object file.  Copies the code section into original binary.  Fixes exception handlers addresses in `.gcc_except_table` section.</p>
  </div>
  <div class="page">
    <p>Code Reduction  Comparing with Chisel</p>
    <p>Basic blocks  Razor -- 78.8%, Chisel -- 83.4%</p>
    <p>Instructions  Razor -- 61.9%, Chisel -- 85.1%</p>
  </div>
  <div class="page">
    <p>Functionality Validation</p>
    <p>Program # of Tests</p>
    <p>Failed by Chisel Failed by Razor</p>
    <p>W I C M bzip2 6 2 -- 2 -- -- (zLib) chown 14 -- -- -- -- -- (zFunc) date 50 5 -- 3 -- -- (zLib) grep 26 -- -- -- 6 -- (zLib) gzip 5 -- 1 -- -- -- (zLib) mkdir 13 -- -- -- 1 -- (zLib) rm 4 2 -- -- -- -- (zFunc) sort 112 -- -- -- -- -- (zCall) tar 26 3 -- -- 4 -- (zCall) uniq 16 -- -- -- -- -- (zCall)</p>
    <p>W : Wrong operation I : Infinite loop C : Crash M : Missing output</p>
    <p>Run the debloated binaries on the same test cases.</p>
  </div>
  <div class="page">
    <p>Effectiveness of Heuristics</p>
    <p>Run the debloated binaries on the different test cases.</p>
  </div>
  <div class="page">
    <p>Security Benefits</p>
    <p>Program CVE Orig Chisel Razor</p>
    <p>bzip2 CVE-2010-0405  CVE-2008-1372   CVE-2005-1260</p>
    <p>chown CVE-2017-18018*    date CVE-2014-9471*</p>
    <p>grep CVE-2015-1345*    CVE-2012-5667</p>
    <p>gzip CVE-2005-1228*    CVE-2009-2624  CVE-2010-0001</p>
    <p>mkdir CVE-2005-1039*  rm CVE-2015-1865*  tar CVE-2016-6321*</p>
    <p>binary is vulnerable to the CVE.  binary is not vulnerable to the CVE. * CVEs with * are evaluated by Chisel. 18</p>
  </div>
  <div class="page">
    <p>Runtime Overhead  On average, Razor introduces 1.7% slowdown.</p>
    <p>15.8% overhead for perlbench</p>
  </div>
  <div class="page">
    <p>Real-world Software Debloating  Firefox</p>
    <p>Load top 50 Alexa websites.  Randomly pick 25 websites for debloating, and use the other 25 websites for testing.</p>
    <p>FoxitReader  Open and scroll 55 different PDF files.  Randomly pick 15 files for debloating, and use the other 40 files for testing.</p>
    <p>Heuristic Firefox FoxitReader</p>
    <p>crash-sites code-reduction crash-PDFs code-reduction none 13 67.6% 39 89.8% zCode 13 68.0% 10 89.9% zCall 2 63.1% 5 89.4% zLib 0 60.1% 0 87.0% zFunc 0 60.0% 0 87.0%</p>
  </div>
  <div class="page">
    <p>Real-world Software Debloating  Use N-fold validation approach to apply zLib heuristic on Firefox.</p>
    <p>Split Alexas top 50 websites into five groups.  Select two groups (20 websites) for debloating and use the other 30 for testing.</p>
    <p>Group ID</p>
    <p># of Failed Websites</p>
    <p>Code Reduction</p>
    <p>Failed Websites</p>
    <p>G01 1 59.3% wordpress.com G02 0 59.3% G03 1 59.3% wordpress.com G04 1 59.3% twitch.tv G12 1 59.3% wordpress.com G13 1 59.5% wordpress.com G14 2 59.5% twitch.tv, wordpress.com G23 1 59.3% twitch.tv G24 1 59.3% twitch.tv G34 2 59.6% twitch.tv, wordpress.com</p>
  </div>
  <div class="page">
    <p>Per-site Browser Isolation  Create minimal versions of web browsers for particular websites.</p>
    <p>Type Website Code Reduction</p>
    <p>Heuristic Benefits</p>
    <p>Banking</p>
    <p>bankofamedica.com 69.4% zCall 6.3% chase.com 69.6% zCall 6.5% wellsfargo.com 68.8% zCall 5.7% all-3 68.1% zCall 5.0%</p>
    <p>E-commerce</p>
    <p>amazon.com 71.4% none 3.8% ebay.com 70.7% none 3.1% ikea.com 70.6% none 3.0% all-3 70.4% none 2.8%</p>
    <p>Social Media</p>
    <p>facebook.com 70.8% zCall 7.7% instagram.com 71.6% zCall 8.5% twitter.com 74.0% none 6.4% all-3 71.8% none 4.2% 22</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Performs code reduction for deployed binaries.</p>
    <p>Uses heuristics to infer related code for given test cases.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
