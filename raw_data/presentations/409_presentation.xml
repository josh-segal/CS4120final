<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Abel Gordon1 Muli Ben-Yehuda1,2 Dennis Filimonov2 Mahor Dahan2</p>
    <p>VAMOS: Virtualization Aware Middleware</p>
  </div>
  <div class="page">
    <p>VAMOS: Virtualization Aware Middleware</p>
    <p>Virtualization overhead is still high due to the transitions between the guest and the hypervisor</p>
    <p>Motivation: potential optimizations at the application layer have been ignored</p>
    <p>Software is still built based on models that apply to non-virtual systems</p>
    <p>Applications are not being adapted for the underlying virtual platform</p>
    <p>No cooperation between the application and the hypervisor</p>
    <p>Adapting the middleware such as Databases, Web Servers, Application Servers to virtualized platforms we can indirectly adapt many applications and regain lost performance</p>
  </div>
  <div class="page">
    <p>I/O virtualization with KVM, a long way down.</p>
    <p>Explored</p>
    <p>Unexplored</p>
  </div>
  <div class="page">
    <p>VAMOS Goals</p>
    <p>Reduce virtualization overhead by adding virtualization awareness to the middleware</p>
    <p>Avoid changes in the guest operating system</p>
    <p>Re-use/re-factor existent code by exploiting modularity</p>
    <p>Avoid software re-write/re-design</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>Application</p>
    <p>Middleware</p>
    <p>OS</p>
    <p>Physical Hardware</p>
    <p>Virtual Hardware Emulation</p>
    <p>Physical Hardware Manager</p>
    <p>VMM</p>
    <p>Traditional Architecture</p>
    <p>VAMOS Architecture</p>
    <p>Module A Module B Module C</p>
    <p>!</p>
    <p>Application</p>
    <p>Middleware</p>
    <p>OS</p>
    <p>Physical Hardware</p>
    <p>Virtual Hardware Emulation</p>
    <p>Physical Hardware Manager</p>
    <p>VMM</p>
    <p>Module A Module B</p>
    <p>Middleware</p>
    <p>Module C</p>
  </div>
  <div class="page">
    <p>Middleware Adaptation</p>
    <p>Middleware</p>
    <p>Module A Module B Module C</p>
  </div>
  <div class="page">
    <p>VAMOS Requirements</p>
    <p>Most hypervisors have a general purpose OS</p>
    <p>Para-virtualization channels are commonly used</p>
  </div>
  <div class="page">
    <p>Looking for the right balance</p>
    <p>High Performance Tight Coupling</p>
    <p>Unmodified Guests</p>
    <p>Para-Virtualization VAMOS</p>
    <p>SR-IOV I/O Pass-through</p>
    <p>Low Performance Loose Coupling</p>
  </div>
  <div class="page">
    <p>MySQL Software Architecture</p>
  </div>
  <div class="page">
    <p>VAMOS for MySQL</p>
    <p>&quot;!</p>
    <p>&quot; ##</p>
    <p>$</p>
    <p>Virtio guest middleware connector</p>
    <p>Virtio front-end</p>
    <p>Virtio back-end</p>
    <p>&quot; ##</p>
    <p>%</p>
    <p>!</p>
    <p>Virtio host middleware connector</p>
    <p>Host File System</p>
  </div>
  <div class="page">
    <p>Guest/Host  Cycles Distribution</p>
    <p>Experimental setup for different row sizes  Guest cycles: still the same  Host cycles: significantly reduced</p>
  </div>
  <div class="page">
    <p>Runtime Improvement</p>
    <p>Tradeoff between amount of data and number of switches:  VAMOS: number of switches depends on the request type  Virtio: number of switches depends on the amount of data</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Virtual Interface  Xen [Barham03]  HPC [Gavrilovska08]  Virtio [Rusell08]</p>
    <p>OS Interface  VirtFS [Jujjuri10]  Libra [Ammons07]</p>
    <p>Hardware Interface  SR-IOV [Dong08, Liu10]</p>
    <p>VAMOS takes virtualization awareness up into userspace (Middleware)</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>Virtualization overhead is still high due to the transitions between the guest and the hypervisor</p>
    <p>Running part of the middleware at the hypervisor level, VAMOS reduces the overall number of guest/hypervisor switches and improves I/O performance</p>
    <p>Exploiting existing modular designs and abstraction layers, middleware can be adapted to run at the hypervisor level with modest cost</p>
    <p>VAMOS presents a new design point to be considered in the [transparency vs. performance] trade-off spectrum</p>
    <p>Next Steps:  Apply VAMOS to other middleware  Explore additional areas such as memory over-commit  Analyze feasibility of building a common infrastructure shared across different middleware  Improve middleware isolation and security  Guest/Host communication optimizations  What can we do if we re-think the middleware from scratch ?</p>
  </div>
  <div class="page">
    <p>Questions ?</p>
  </div>
</Presentation>
