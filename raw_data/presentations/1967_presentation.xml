<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Running ZooKeeper Coordination Services in Untrusted Clouds</p>
    <p>HotDep14</p>
    <p>Stefan Brenner Colin Wulf Rudiger Kapitza</p>
    <p>Institute for Operating Systems and Computer Networks TU Braunschweig</p>
    <p>Oct 5th, 2014</p>
  </div>
  <div class="page">
    <p>Lack of Trust in Cloud Providers</p>
    <p>Privacy concerns slow down adoption of cloud technology  No trust in providers (especially sensitive applications)</p>
    <p>Snowden leaks arent driving companies away from the cloud; but [...] made them a lot more careful 1</p>
    <p>Most IT pros do not trust cloud services with sensitive data 2</p>
    <p>Challenge: Privacy in cloud computing  Encryption of sensitive data  Trusted execution  Verification of software stack</p>
  </div>
  <div class="page">
    <p>Trusted Cloud</p>
    <p>Establish Trust in the Cloud  Homomorphic encryption  TPM-based trusted software stack  Hardware-isolated environments</p>
    <p>Trusted Execution Environment (TEE)</p>
    <p>Isolation enforced by hardware  Intel SGX, ARM TrustZone</p>
    <p>Application logic split into trusted and untrusted part  Process sensitive data only in TEEs  Verification of trusted software stack  Minimizing trusted codebase  Fewer bugs reduce attack surface</p>
    <p>Hardware</p>
    <p>Trusted Application</p>
    <p>Secure OS</p>
    <p>Trusted Exec. Env. (TEE)</p>
    <p>Normal OS</p>
    <p>Rich Exec. Env. (REE)</p>
    <p>Normal Application</p>
  </div>
  <div class="page">
    <p>Trusted Coordination</p>
    <p>TEEs coming to cloud environments  Trusted distributed applications in the cloud  Trusted coordination</p>
    <p>Apache ZooKeeper  coord. service  Configuration management for distr. app.  Leader election</p>
    <p>Trusted ZooKeeper  Transparent encryption layer to ZooKeeper  All functionality of ZooKeeper preserved</p>
  </div>
  <div class="page">
    <p>Trusted Coordination</p>
    <p>TEEs coming to cloud environments  Trusted distributed applications in the cloud  Trusted coordination</p>
    <p>Apache ZooKeeper  coord. service  Configuration management for distr. app.  Leader election</p>
    <p>Trusted ZooKeeper  Transparent encryption layer to ZooKeeper  All functionality of ZooKeeper preserved</p>
  </div>
  <div class="page">
    <p>Trusted Coordination</p>
    <p>TEEs coming to cloud environments  Trusted distributed applications in the cloud  Trusted coordination</p>
    <p>Apache ZooKeeper  coord. service  Configuration management for distr. app.  Leader election</p>
    <p>Trusted ZooKeeper  Transparent encryption layer to ZooKeeper  All functionality of ZooKeeper preserved</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy System Architecture</p>
    <p>ZooKeeper</p>
    <p>Data items: znode  Callback mechanism</p>
    <p>Update notification  Sequential znodes</p>
    <p>Leader election  Fairness for distr. lock</p>
    <p>Cloud</p>
    <p>ZooKeeper</p>
    <p>Client 1 Client 2 Client 3</p>
    <p>ZooKeeper 2 ZooKeeper 3 ZooKeeper 1</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy System Architecture</p>
    <p>Threat  Provider/Attacker can</p>
    <p>eavesdrop all storage and transmitted messages</p>
    <p>Cloud</p>
    <p>ZooKeeper</p>
    <p>Client 1 Client 2 Client 3</p>
    <p>ZooKeeper 2 ZooKeeper 3 ZooKeeper 1</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy System Architecture</p>
    <p>Threat  Provider/Attacker can</p>
    <p>eavesdrop all storage and transmitted messages</p>
    <p>Provider/Attacker can not look inside TEEs</p>
    <p>Cloud</p>
    <p>TEE TEE TEE</p>
    <p>ZooKeeper</p>
    <p>Client 1 Client 2 Client 3</p>
    <p>ZooKeeper 2 ZooKeeper 3 ZooKeeper 1</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy System Architecture</p>
    <p>Our approach:</p>
    <p>ZooKeeper Privacy Proxy (ZPP)</p>
    <p>Running inside a TEE  Encryption of:</p>
    <p>Payload of znodes  Names of znodes</p>
    <p>Cloud</p>
    <p>TEE TEE TEE</p>
    <p>ZooKeeper</p>
    <p>Client 1 Client 2 Client 3</p>
    <p>ZooKeeper 2 ZooKeeper 3 ZooKeeper 1</p>
    <p>ZPP 1 ZPP 2 ZPP 3</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Link Encryption</p>
    <p>Client to ZPP  SSL-encrypted transport</p>
    <p>between Client and ZPP</p>
    <p>ZPP to ZooKeeper  Shared key-encrypted</p>
    <p>payload and node names between ZPP and ZooKeeper</p>
    <p>ZooKeeper 1 ZooKeeper 2</p>
    <p>SSL</p>
    <p>Client 1</p>
    <p>SSL</p>
    <p>Client 2</p>
    <p>TEE</p>
    <p>ZPP 1</p>
    <p>TEE</p>
    <p>ZPP 2</p>
    <p>ZooKeeper 3</p>
    <p>SSL</p>
    <p>Client 3</p>
    <p>TEE</p>
    <p>ZPP 3</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy znode Name Encryption</p>
    <p>Unencrypted Encrypted</p>
    <p>/</p>
    <p>seq</p>
    <p>config</p>
    <p>host001</p>
    <p>host002</p>
    <p>host003</p>
    <p>/</p>
    <p>y83Bnh</p>
    <p>xHj3a</p>
    <p>kj7H2lf</p>
    <p>jHj8Uh</p>
    <p>Encryption of znode names  Encryption of individual parts of paths  Hierarchy of znodes preserved</p>
    <p>Works for most operations</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Name Clash Sequence Numbers</p>
    <p>: Clienti : ZPPj : ZooKeeperk</p>
    <p>create(/foo, sequent.)</p>
    <p>create(ciph(/foo), sequent.)</p>
    <p>ciph(/foo) + 001</p>
    <p>/foo001</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Name Clash Sequence Numbers</p>
    <p>: Clienti : ZPPj : ZooKeeperk</p>
    <p>create(/foo, sequent.)</p>
    <p>create(ciph(/foo), sequent.)</p>
    <p>ciph(/foo) + 001</p>
    <p>/foo001</p>
    <p>create(/foo001, regular)</p>
    <p>create(ciph(/foo001), regular)</p>
    <p>ciph(/foo001)</p>
    <p>/foo001?</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Supporting Sequential znodes</p>
    <p>Dictionaries (Helper znodes)  Additional ZPP-maintained data  Encrypted payload of helper znode  Stored inside ZooKeeper  Hidden from clients</p>
    <p>Sequence numbers  Mapping of znode name to next free</p>
    <p>sequence number  Example: Payload of /dict/seqno: { &quot;dict&quot;: { &quot;/foo&quot;: 3, &quot;/bar&quot;: 2 } }</p>
    <p>/</p>
    <p>dict</p>
    <p>seqno</p>
    <p>foo node001</p>
    <p>node002</p>
    <p>bar</p>
    <p>host</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Dictionary Nodes</p>
    <p>Dictionary Maintenance</p>
    <p>Dictionary in-memory at all ZPPs  Monitoring dictionary causes callback on change</p>
    <p>Example: create() sequential node 1. Sequence number appended to znode name 2. Sequence number of parent znode incremented 3. Atomically create znode and update the dictionary</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Dictionary Nodes (Overview)</p>
    <p>: Clienti : ZPPj : ZooKeeperk</p>
    <p>get(/dict, watch)</p>
    <p>payload</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Dictionary Nodes (Overview)</p>
    <p>: Clienti : ZPPj : ZooKeeperk</p>
    <p>get(/dict, watch)</p>
    <p>payload</p>
    <p>create(/foo, sequent.)</p>
    <p>performCreate()</p>
    <p>/foo + SqN</p>
    <p>callback</p>
    <p>get(/dict, watch)</p>
    <p>payload</p>
  </div>
  <div class="page">
    <p>ZooKeeper Privacy Proxy Dictionary Nodes (create() detailed)</p>
    <p>: Clienti : ZPPj : ZooKeeperk</p>
    <p>create(/foo, sequent.)</p>
    <p>( set(/dict, SqN+1, version)</p>
    <p>create(ciph(/foo+SqN), regular)</p>
    <p>) call results</p>
    <p>atomic: performCreate()atomic: performCreate()</p>
    <p>/foo + SqN</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Untrusted storage</p>
    <p>Venus: Verification for untrusted cloud storage (CCSW10)  Fail-aware untrusted storage (DSN09)</p>
    <p>Full SQL interface</p>
    <p>TrustedDB: A Trusted Hardware Based Database with Privacy and Data Confidentiality. (TKDE13)</p>
    <p>The Blind Stone Tablet: Outsourcing Durability to Untrusted Parties. (NDSS09)</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experimental Setup</p>
    <p>OpenStack virtual machines  5 ZooKeeper replicas  1 ZooKeeper Privacy Proxy  1 Client VM</p>
    <p>Experiments</p>
    <p>Batch of 500+ operations  Various payload sizes  moderate throughput impact</p>
    <p>Synchronous operations</p>
    <p>Payload size (Byte)</p>
    <p>O p er a ti o n s/ s</p>
    <p>create() (no Proxy)</p>
    <p>create() (Proxy)</p>
    <p>delete() (no Proxy)</p>
    <p>delete() (Proxy)</p>
    <p>Payload size (Byte)</p>
    <p>O p er a ti o n s/ s</p>
    <p>setData() (no Proxy)</p>
    <p>setData() (Proxy)</p>
    <p>getData() (no Proxy)</p>
    <p>getData() (Proxy)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>No trust in cloud providers  Sensitive applications conflict untrusted providers</p>
    <p>ZooKeeper deployment in untrusted clouds  ZooKeeper Privacy Proxy  Application logic split in trusted and untrusted part  Encryption of all data stored inside ZooKeeper  All ZooKeeper functionality and semantics preserved</p>
    <p>SERECA: Upcoming EU project  Trusted execuction of distributed applications in the cloud  TEEs: ARM TrustZone and Intel SGX</p>
  </div>
</Presentation>
