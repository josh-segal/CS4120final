<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TU Wien, Vienna Austria Distributed Systems Group</p>
    <p>https://dsg.tuwien.ac.at</p>
    <p>Thomas Rausch @thrauat Waldemar Hummer Vinod Muthusamy Alexander Rashed Schahram Dustdar</p>
    <p>Towards a Serverless Platform for Edge AI</p>
    <p>IBM Research AI</p>
    <p>HotEdge19, Renton, WA</p>
  </div>
  <div class="page">
    <p>Drone</p>
    <p>With Accelerator</p>
    <p>Microsoft Build 2018 // Vision Keynote: https://www.youtube.com/watch?v=rd0Rd8w3FZ0</p>
  </div>
  <div class="page">
    <p>Edge AI Accelerators</p>
    <p>Google Edge TPU</p>
    <p>NVIDIA Jetson</p>
    <p>Intel Neural Compute Stick</p>
    <p>Baidu Kunlun</p>
    <p>Microsoft Project BrainWave</p>
    <p>Huawei Atlas</p>
  </div>
  <div class="page">
    <p>AI Operationalization</p>
    <p>Hummer et al., ModelOps: Cloud-based Lifecycle Management for Reliable and Trusted AI. IC2E19.</p>
    <p>Process Train Validate Servee</p>
    <p>Model Runtime</p>
    <p>Monitoring</p>
    <p>Data</p>
    <p>Perf.</p>
    <p>Process Train Validate Serve</p>
    <p>Object Store</p>
    <p>Compute Cluster</p>
    <p>Learning Cluster</p>
    <p>Read Data</p>
    <p>Train Model</p>
    <p>Write Model</p>
    <p>Data Asset</p>
    <p>Trained Model</p>
    <p>ModelOps Platform</p>
  </div>
  <div class="page">
    <p>Serverless Model</p>
    <p>{} Event (Request)</p>
    <p>Trigger Node</p>
    <p>Resource</p>
    <p>def handle(req): s3 = boto3.client('s3') with open(tmpfile, 'wb') as f: s3.download_fileobj('bucket', req['obj'], f) data = numpy.load(f)</p>
    <p>m = train_model(data, req['train_params']) s3.upload_fileobj(serialize(m), 'bucket', 'model']) # ...</p>
    <p>Function</p>
    <p>Scheduler</p>
    <p>Cloud Platform</p>
  </div>
  <div class="page">
    <p>Deviceless Model</p>
    <p>{} Event (Request)</p>
    <p>Trigger</p>
    <p>Function</p>
    <p>Scheduler</p>
    <p>??</p>
    <p>Edge Cloud</p>
    <p>Edge</p>
    <p>Edge Cloud Platform</p>
    <p>def handle(req): s3 = boto3.client('s3') with open(tmpfile, 'wb') as f: s3.download_fileobj('bucket', req['obj'], f) data = numpy.load(f)</p>
    <p>m = train_model(data, req['train_params']) s3.upload_fileobj(serialize(m), 'bucket', 'model']) # ...</p>
  </div>
  <div class="page">
    <p>Data and Models as first-class citizens</p>
    <p>Model Selectors</p>
    <p>Policies</p>
    <p>Gates</p>
    <p>AI Workflow Programming Model</p>
    <p>Deviceless function scheduling</p>
    <p>Policy enactment</p>
    <p>Context awareness</p>
    <p>Data locality awareness</p>
    <p>Execution Platform</p>
    <p>A Serverless Platform for Edge AI</p>
  </div>
  <div class="page">
    <p>@consumes.model(selector={ 'type': 'image_classifier', 'data_tags': ['machine_x'], 'accuracy': '&gt;=0.88' }) def inference(model: Model, request): data = request['input'] # data prep tasks prediction = model.estimate(data)</p>
    <p>@policy.deadline('2s')</p>
    <p>@policy.fn(node = 'user_device', capability = 'gpu')</p>
    <p>@policy.data(network=['company_network'], strict=True)</p>
    <p>@consumes.data( selector={'urn': 'mnist:data'}, holdout=0.2) @produce.model( type='classifier', urn='mnist:model') def train(data: Data, request) -&gt; Model: arr = data.to_ndarray() return Model(train_model(arr))</p>
    <p>@gate.bias(attribute = 'age', predicate = '&lt;0.8')</p>
    <p>@gate.drift(metric = 'confidence', predicate = '&lt;0.2')</p>
  </div>
  <div class="page">
    <p>@consumes.model(selector={'urn': 'model:base'})</p>
    <p>@consumes.data(batch = 100, selector=...)</p>
    <p>@produces.model(type='regressor', urn='model:user:{usr}')</p>
    <p>@policy.fn(node = 'local')</p>
    <p>@policy.data(network = 'local', strict=True)</p>
    <p>def refine(model: Model, data: Data):</p>
    <p>ndarr = data.to_ndarray() # data artifact API</p>
    <p># transfer learning code</p>
    <p>return refined_model</p>
    <p>@consumes.model(selector={'urn': 'model:base'})</p>
    <p>@consumes.data(batch = 100, selector=...)</p>
    <p>@produces.model(type='regressor', urn='model:user:{usr}')</p>
    <p>@policy.fn(node = 'local')</p>
    <p>@policy.data(network = 'local', strict=True)</p>
    <p>def refine(model: Model, data: Data):</p>
    <p>ndarr = data.to_ndarray() # data artifact API</p>
    <p># transfer learning code</p>
    <p>return refined_model</p>
    <p>Network (edge, private)</p>
    <p>node:{user}</p>
    <p>container</p>
    <p>Network (cloud)</p>
    <p>f(x) model</p>
    <p>u</p>
    <p>data</p>
    <p>data locality node</p>
    <p>model b</p>
    <p>Function preprocessor</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Data Locality Tradeoffs</p>
    <p>Cluster Middleware Cluster Middleware Cluster Middleware Cluster Middleware</p>
    <p>h</p>
    <p>Data proximity</p>
    <p>Container Image</p>
    <p>Deploy the container image to the edge?</p>
    <p>OR</p>
    <p>Send the data to the cloud?</p>
    <p>Edge</p>
  </div>
  <div class="page">
    <p>Preprocess Train Inference</p>
    <p>Scheduler + Simulator: https://git.dsg.tuwien.ac.at/serverless-edge-ai/sched-sim</p>
  </div>
  <div class="page">
    <p>Dipl.-Ing. (MSc), BSc</p>
    <p>Thomas Rausch Research Assistant</p>
    <p>TU Wien Institute of Information Systems Engineering Argentinierstrasse 8-194-02, Vienna, Austria T: +43 1 58801-184838 E: trausch@dsg.tuwien.ac.at https://dsg.tuwien.ac.at/staff/trausch</p>
    <p>@consumes.model(selector={'urn': 'model:base'})</p>
    <p>@consumes.data(batch = 100, selector=...)</p>
    <p>@produces.model(type='regressor', urn='model:user:{usr}')</p>
    <p>@policy.fn(node = 'local')</p>
    <p>@policy.data(network = 'local', strict=True)</p>
    <p>def refine(model: Model, data: Data):</p>
    <p>ndarr = data.to_ndarray() # data artifact API</p>
    <p># transfer learning code</p>
    <p>return refined_model</p>
    <p>Network (edge, private)</p>
    <p>node:{user}</p>
    <p>container</p>
    <p>Network (cloud)</p>
    <p>f(x) model</p>
    <p>u</p>
    <p>data</p>
    <p>data locality node</p>
    <p>model b</p>
    <p>Function preprocessor</p>
    <p>Scheduler</p>
    <p>{} Event (Request)</p>
    <p>Trigger</p>
    <p>Function</p>
    <p>Scheduler</p>
    <p>Edge Cloud</p>
    <p>Edge</p>
    <p>Cloud Platform</p>
    <p>def handle(req): s3 = boto3.client('s3') with open(tmpfile, 'wb') as f: s3.download_fileobj('bucket', req['obj'], f) data = numpy.load(f)</p>
    <p>m = train_model(data, req['train_params']) s3.upload_fileobj(serialize(m), 'bucket', 'model']) # ...</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Correct level of abstraction?  API/SDK features?  Validation criteria?</p>
    <p>Deviceless model (does it work?)  Transparent data management</p>
    <p>Request routing architecture  Proximity and bandwidth monitoring  Learning optimal placements</p>
    <p>Model too high-level for scheduler  Bring-your-own-device will fail</p>
    <p>Feedbacki Controversial pointsii</p>
    <p>Open issuesiii Failure risksiv</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Capability-Aware Pipeline Execution</p>
    <p>General Purpose Computing</p>
    <p>HPC</p>
    <p>Embedded AI (NVIDIA Jetson)</p>
    <p>Cluster Middleware</p>
    <p>Train</p>
    <p>Compress</p>
    <p>Process</p>
    <p>Validate</p>
    <p>Deploy</p>
    <p>execute</p>
  </div>
  <div class="page">
    <p>Hierarchical Model Deployments</p>
    <p>Source: Medtronic Sugar.IQ IBM</p>
    <p>Data centers</p>
    <p>IoT</p>
    <p>Edge Resources</p>
    <p>Anonymized data Base model deployment</p>
    <p>Base model training</p>
    <p>ML Model</p>
    <p>Model refinement</p>
    <p>Unfiltered data</p>
    <p>Personal Assistant</p>
  </div>
  <div class="page">
    <p>Kubernetes Scheduling Performance</p>
  </div>
  <div class="page">
    <p>Platform Perspective</p>
    <p>Source: Google Cloud IoT Edge</p>
  </div>
  <div class="page">
    <p>Cognitive Assistance Applications Satyanarayanan, M. (2017) The Emergence of Edge Computing. Computer.</p>
  </div>
</Presentation>
