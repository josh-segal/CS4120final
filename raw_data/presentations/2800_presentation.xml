<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Confluo: Distributed Monitoring and Diagnosis</p>
    <p>Stack for High-speed Networks</p>
    <p>Anurag Khandelwal, Rachit Agarwal, Ion Stoica</p>
    <p>1</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>!2</p>
  </div>
  <div class="page">
    <p>Motivation  Managing large scale networks is increasingly complex</p>
    <p>!</p>
    <p>Network Misconfigurations Network Failures Load Imbalance Network Congestion</p>
    <p>!2</p>
  </div>
  <div class="page">
    <p>Motivation  Managing large scale networks is increasingly complex</p>
    <p>!</p>
    <p>Network Misconfigurations Network Failures Load Imbalance Network Congestion</p>
    <p>Network issues  Performance degradation, loss in revenue</p>
    <p>!2</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>!3</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>!3</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>!3</p>
    <p>In-network techniques, e.g., Marple [SIGCOMM19], FlowRadar [NSDI16], UnivMon [SIGCOMM16]</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>!3</p>
    <p>Limited storage</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>!3</p>
    <p>Limited storage</p>
    <p>In-band Network Telemetry (INT)</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
    <p>!3</p>
    <p>Limited storage</p>
    <p>In-band Network Telemetry (INT)</p>
  </div>
  <div class="page">
    <p>Opportunity: Networks can capture a lot of data</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
    <p>!3</p>
    <p>Limited storage</p>
    <p>In-band Network Telemetry (INT)</p>
    <p>Analyze telemetry data at end-hosts e.g., Trumpet [SIGCOMM16], PathDump [OSDI16], SwitchPointer [NSDI18]</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1</p>
    <p>S1 S2 S3</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3 S1</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3 S1</p>
    <p>S2</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>Example: Checking Path Conformance</p>
    <p>!4</p>
    <p>S1 S2 S3</p>
    <p>Does the packet pass through switch S1? [PathDump, OSDI16]</p>
    <p>Embed wide range of telemetry data within packet headers:  Packet trajectory  Hop latency</p>
    <p>Queue lengths  Link utilization, and many more</p>
  </div>
  <div class="page">
    <p>!5</p>
    <p>Goals for end-host stack design</p>
  </div>
  <div class="page">
    <p>!5</p>
    <p>Goals for end-host stack design</p>
    <p>End-host stacks need to support:</p>
    <p>Real-time monitoring of rich telemetry data</p>
  </div>
  <div class="page">
    <p>!5</p>
    <p>Goals for end-host stack design</p>
    <p>End-host stacks need to support:</p>
    <p>Real-time monitoring of rich telemetry data</p>
    <p>Low-overhead distributed diagnosis of network events</p>
  </div>
  <div class="page">
    <p>!5</p>
    <p>Goals for end-host stack design</p>
    <p>End-host stacks need to support:</p>
    <p>Real-time monitoring of rich telemetry data</p>
    <p>Low-overhead distributed diagnosis of network events</p>
    <p>Highly-concurrent reads &amp; writes of headers using minimal CPU</p>
  </div>
  <div class="page">
    <p>Challenge: Networks capture a lot of data</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Challenge: Networks capture a lot of data</p>
    <p>Line-rate for 10Gbps links  0.9-16 million packets/second ~ 50 nanoseconds budget per packet header!</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Challenge: Networks capture a lot of data</p>
    <p>Line-rate for 10Gbps links  0.9-16 million packets/second ~ 50 nanoseconds budget per packet header!</p>
    <p>!6</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t (</p>
    <p>pa ck</p>
    <p>et s/</p>
    <p>s)</p>
    <p>Storm+Kafka Flink+Kafka Kafka BTrDB CorfuDB TimescaleDB</p>
    <p>#Cores 32 32 32 32 32 32</p>
    <p>Max packet rate @ 10Gbps</p>
  </div>
  <div class="page">
    <p>Challenge: Networks capture a lot of data</p>
    <p>Line-rate for 10Gbps links  0.9-16 million packets/second ~ 50 nanoseconds budget per packet header!</p>
    <p>!6</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t (</p>
    <p>pa ck</p>
    <p>et s/</p>
    <p>s)</p>
    <p>Storm+Kafka Flink+Kafka Kafka BTrDB CorfuDB TimescaleDB</p>
    <p>#Cores 32 32 32 32 32 32</p>
    <p>Transactional Semantics</p>
    <p>Max packet rate @ 10Gbps</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>Traditional stacksTraditional End-host Stacks Tribeca [VLDB96], Gigascope [SIGMOD03],</p>
    <p>Time Machine [SIGCOMM08]</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>Traditional stacks</p>
    <p>End-host Stacks using Stream-processing systems/Key-Value Stores</p>
    <p>OpenSOC, Tigon, PathDump [OSDI16], SwitchPointer [NSDI18]</p>
    <p>Stacks using external data-processing systems</p>
    <p>Traditional End-host Stacks Tribeca [VLDB96], Gigascope [SIGMOD03],</p>
    <p>Time Machine [SIGCOMM08]</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>Traditional stacks</p>
    <p>End-host Stacks using Stream-processing systems/Key-Value Stores</p>
    <p>OpenSOC, Tigon, PathDump [OSDI16], SwitchPointer [NSDI18]</p>
    <p>Stacks using external data-processing systems</p>
    <p>Monitor rich telemetry data, &lt;= 1Gbps links, high latency</p>
    <p>Traditional End-host Stacks Tribeca [VLDB96], Gigascope [SIGMOD03],</p>
    <p>Time Machine [SIGCOMM08]</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>Traditional stacks</p>
    <p>End-host Stacks using Stream-processing systems/Key-Value Stores</p>
    <p>OpenSOC, Tigon, PathDump [OSDI16], SwitchPointer [NSDI18]</p>
    <p>Stacks using external data-processing systems</p>
    <p>Custom-designed monitoring stacks</p>
    <p>Custom-designed monitoring stacks FloSIS [USENIX ATC15], Trumpet</p>
    <p>[SIGCOMM16]</p>
    <p>Traditional End-host Stacks Tribeca [VLDB96], Gigascope [SIGMOD03],</p>
    <p>Time Machine [SIGCOMM08]</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>Traditional stacks</p>
    <p>End-host Stacks using Stream-processing systems/Key-Value Stores</p>
    <p>OpenSOC, Tigon, PathDump [OSDI16], SwitchPointer [NSDI18]</p>
    <p>Stacks using external data-processing systems</p>
    <p>Custom-designed monitoring stacks</p>
    <p>Custom-designed monitoring stacks FloSIS [USENIX ATC15], Trumpet</p>
    <p>[SIGCOMM16]</p>
    <p>Traditional End-host Stacks Tribeca [VLDB96], Gigascope [SIGMOD03],</p>
    <p>Time Machine [SIGCOMM08]</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Fu nc</p>
    <p>tio na</p>
    <p>lit y</p>
    <p>Performance</p>
    <p>Traditional stacks</p>
    <p>End-host Stacks using Stream-processing systems/Key-Value Stores</p>
    <p>OpenSOC, Tigon, PathDump [OSDI16], SwitchPointer [NSDI18]</p>
    <p>Stacks using external data-processing systems</p>
    <p>Custom-designed monitoring stacks</p>
    <p>Custom-designed monitoring stacks FloSIS [USENIX ATC15], Trumpet</p>
    <p>[SIGCOMM16]</p>
    <p>Traditional End-host Stacks Tribeca [VLDB96], Gigascope [SIGMOD03],</p>
    <p>Time Machine [SIGCOMM08]</p>
    <p>Ideal</p>
    <p>Can we achieve both simultaneously? !7</p>
  </div>
  <div class="page">
    <p>Confluo</p>
    <p>!8</p>
    <p>W rit</p>
    <p>e T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( O</p>
    <p>ps )</p>
    <p>Storm+Kafka Flink+Kafka Kafka BTrDB CorfuDB TimescaleDB Atomic MultiLog</p>
    <p>#Cores 32 32 32 32 32 32 1</p>
  </div>
  <div class="page">
    <p>Confluo</p>
    <p>!8</p>
    <p>W rit</p>
    <p>e T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( O</p>
    <p>ps )</p>
    <p>Storm+Kafka Flink+Kafka Kafka BTrDB CorfuDB TimescaleDB Atomic MultiLog</p>
    <p>#Cores 32 32 32 32 32 32 1</p>
    <p>Max packet rate @ 10Gbps</p>
  </div>
  <div class="page">
    <p>Confluo</p>
    <p>!8</p>
    <p>W rit</p>
    <p>e T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( O</p>
    <p>ps )</p>
    <p>Storm+Kafka Flink+Kafka Kafka BTrDB CorfuDB TimescaleDB Atomic MultiLog</p>
    <p>#Cores 32 32 32 32 32 32 1</p>
    <p>Max packet rate @ 10Gbps</p>
    <p>Confluo achieves this using a new data structure Atomic MultiLog</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>!9</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>!9</p>
    <p>Attributes of interest are fixed-sized</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>!9</p>
    <p>Attributes of interest are fixed-sized</p>
    <p>Low-overhead indexing with specialized perfect k-ary trees</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>Data once written is not updated</p>
    <p>Aggregated only at coarse-grained timescales.</p>
    <p>!9</p>
    <p>Attributes of interest are fixed-sized</p>
    <p>Low-overhead indexing with specialized perfect k-ary trees</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>Data once written is not updated</p>
    <p>Aggregated only at coarse-grained timescales.</p>
    <p>!9</p>
    <p>Append-only write-efficient data structures</p>
    <p>Attributes of interest are fixed-sized</p>
    <p>Low-overhead indexing with specialized perfect k-ary trees</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>Data once written is not updated</p>
    <p>Aggregated only at coarse-grained timescales.</p>
    <p>!9</p>
    <p>Append-only write-efficient data structures</p>
    <p>Do not require serializable transactions, linearizability is sufficient</p>
    <p>Linearizability: single-operation, single-object Serializability: multi-operation, multi-object</p>
    <p>Attributes of interest are fixed-sized</p>
    <p>Low-overhead indexing with specialized perfect k-ary trees</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog New data structure that exploits structure in telemetry data to meet all goals</p>
    <p>Data once written is not updated</p>
    <p>Aggregated only at coarse-grained timescales.</p>
    <p>!9</p>
    <p>Append-only write-efficient data structures</p>
    <p>Do not require serializable transactions, linearizability is sufficient</p>
    <p>Linearizability: single-operation, single-object Serializability: multi-operation, multi-object</p>
    <p>Trim down concurrency mechanisms to updating 2 integers</p>
    <p>Attributes of interest are fixed-sized</p>
    <p>Low-overhead indexing with specialized perfect k-ary trees</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
  </div>
  <div class="page">
    <p>Traditional Data Stores: Use complex data structures to support general workloads, compromising on write efficiency</p>
    <p>Atomic MultiLog: Write Efficient Storage</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Data once written is not updated</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Header Log</p>
    <p>Concurrent, Append-Only Logs</p>
    <p>Data once written is not updated</p>
    <p>&lt;HeadeR1&gt;</p>
    <p>&lt;HeadeR2&gt;</p>
    <p>&lt;HeadeR3&gt;</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Header Log Attribute IndexES</p>
    <p>Concurrent, Append-Only Logs</p>
    <p>Reference Logs</p>
    <p>Data once written is not updated</p>
    <p>&lt;HeadeR1&gt;</p>
    <p>&lt;HeadeR2&gt;</p>
    <p>&lt;HeadeR3&gt;</p>
    <p>e.g., srcIP</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Header Log Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Concurrent, Append-Only Logs</p>
    <p>Reference Logs</p>
    <p>Data once written is not updated</p>
    <p>&lt;HeadeR1&gt;</p>
    <p>&lt;HeadeR2&gt;</p>
    <p>&lt;HeadeR3&gt;</p>
    <p>e.g., srcIP</p>
    <p>e.g., srcIP=10.0.0.1 &amp;&amp; distort=90</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Header Log Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Concurrent, Append-Only Logs</p>
    <p>Reference Logs</p>
    <p>Data once written is not updated</p>
    <p>&lt;HeadeR1&gt;</p>
    <p>&lt;HeadeR2&gt;</p>
    <p>&lt;HeadeR3&gt;</p>
    <p>e.g., srcIP</p>
    <p>e.g., srcIP=10.0.0.1 &amp;&amp; distort=90</p>
    <p>e.g., min(CWND)</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Header Log Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Concurrent, Append-Only Logs</p>
    <p>Reference Logs</p>
    <p>Append-only logs provide write efficiency</p>
    <p>Data once written is not updated</p>
    <p>&lt;HeadeR1&gt;</p>
    <p>&lt;HeadeR2&gt;</p>
    <p>&lt;HeadeR3&gt;</p>
    <p>e.g., srcIP</p>
    <p>e.g., srcIP=10.0.0.1 &amp;&amp; distort=90</p>
    <p>e.g., min(CWND)</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog: Write Efficient Storage</p>
    <p>Header Log Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Concurrent, Append-Only Logs</p>
    <p>Reference Logs</p>
    <p>Append-only logs provide write efficiency</p>
    <p>Do not support in-place updates</p>
    <p>Data once written is not updated</p>
    <p>&lt;HeadeR1&gt;</p>
    <p>&lt;HeadeR2&gt;</p>
    <p>&lt;HeadeR3&gt;</p>
    <p>e.g., srcIP</p>
    <p>e.g., srcIP=10.0.0.1 &amp;&amp; distort=90</p>
    <p>e.g., min(CWND)</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
    <p>Database Transactions</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
    <p>Database Transactions</p>
    <p>User:</p>
    <p>Read Write Write Read</p>
    <p>Write Read Write</p>
    <p>Write Write Read</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
    <p>Database Transactions</p>
    <p>Network Monitoring &amp; Diagnosis</p>
    <p>User:</p>
    <p>Read Write Write Read</p>
    <p>Write Read Write</p>
    <p>Write Write Read</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
    <p>Database Transactions</p>
    <p>Network Monitoring &amp; Diagnosis</p>
    <p>User:</p>
    <p>Read Write Write Read</p>
    <p>Write Read Write</p>
    <p>Write Write Read</p>
    <p>Network:</p>
    <p>Write</p>
    <p>Write</p>
    <p>Write</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
    <p>Database Transactions</p>
    <p>Network Monitoring &amp; Diagnosis</p>
    <p>User:</p>
    <p>Read Write Write Read</p>
    <p>Write Read Write</p>
    <p>Write Write Read</p>
    <p>Network:</p>
    <p>Write</p>
    <p>Write</p>
    <p>Write</p>
    <p>Network Operator:</p>
    <p>Read</p>
    <p>Read</p>
    <p>Read</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Consistency</p>
    <p>Do not require serializable transactions, linearizability is sufficient</p>
    <p>Database Transactions</p>
    <p>Network Monitoring &amp; Diagnosis</p>
    <p>User:</p>
    <p>Read Write Write Read</p>
    <p>Write Read Write</p>
    <p>Write Write Read</p>
    <p>Network:</p>
    <p>Write</p>
    <p>Write</p>
    <p>Write</p>
    <p>Network Operator:</p>
    <p>Read</p>
    <p>Read</p>
    <p>Read</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs Support for concurrent appends &amp; reads</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs</p>
    <p>Read-Tail, Write-Tail</p>
    <p>Support for concurrent appends &amp; reads</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs</p>
    <p>Read-Tail Write-Tail</p>
    <p>Append</p>
    <p>Support for concurrent appends &amp; reads</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs</p>
    <p>Read-Tail Write-Tail</p>
    <p>Append</p>
    <p>Support for concurrent appends &amp; reads</p>
    <p>Safe for Concurrent</p>
    <p>READS</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs</p>
    <p>Safe for Concurrent</p>
    <p>READS</p>
    <p>Read-Tail, Write-Tail</p>
    <p>Support for concurrent appends &amp; reads</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs</p>
    <p>Read-Tail, Write-Tail</p>
    <p>Linearizable reads &amp; appends</p>
    <p>Support for concurrent appends &amp; reads</p>
  </div>
  <div class="page">
    <p>Efficient Linearizablity for Logs</p>
    <p>Read-Tail, Write-Tail</p>
    <p>Lock-free techniques for efficiency</p>
    <p>Linearizable reads &amp; appends</p>
    <p>Support for concurrent appends &amp; reads</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Offsets</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Offsets</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Relax linearizability for individual logs; ensure linearizability only</p>
    <p>for end-to-end operations</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Relax linearizability for individual logs; ensure linearizability only</p>
    <p>for end-to-end operations</p>
    <p>Reference Logs</p>
    <p>ATOMIC MULTILOG</p>
    <p>Significant performance gains with linearizability at high degrees of concurrency</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Linearizability Header Log Attribute</p>
    <p>IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Global Read Tail</p>
    <p>Global Write Tail</p>
    <p>Offsets</p>
    <p>OFFSETS</p>
    <p>Relax linearizability for individual logs; ensure linearizability only</p>
    <p>for end-to-end operations</p>
    <p>Reference Logs</p>
    <p>No support for transactions</p>
    <p>ATOMIC MULTILOG</p>
    <p>Significant performance gains with linearizability at high degrees of concurrency</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Indexing</p>
  </div>
  <div class="page">
    <p>Traditional Indexes: Expensive to ensure atomicity, high overhead write paths, etc.</p>
    <p>Atomic MultiLog Indexing</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Attributes of interest are fixed-sized</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Reference Logs Leaf Nodes</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Reference Logs Leaf Nodes</p>
    <p>Efficient write path and write conflict resolutions</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Reference Logs Leaf Nodes</p>
    <p>Efficient write path and write conflict resolutions</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Reference Logs Leaf Nodes</p>
    <p>Efficient write path and write conflict resolutions</p>
    <p>Ordered access via inexpensive range queries</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Reference Logs Leaf Nodes</p>
    <p>Efficient write path and write conflict resolutions</p>
    <p>Ordered access via inexpensive range queries</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
    <p>~5.1x faster</p>
  </div>
  <div class="page">
    <p>Attribute IndexES</p>
    <p>Time-Indexed Filters</p>
    <p>Time-Indexed Aggregates</p>
    <p>Atomic MultiLog Indexing</p>
    <p>Perfect K-ary Tree</p>
    <p>NU LLN UL L</p>
    <p>Reference Logs Leaf Nodes</p>
    <p>Efficient write path and write conflict resolutions</p>
    <p>Ordered access via inexpensive range queries</p>
    <p>Only supports fixed-sized attributes 14</p>
    <p>Attributes of interest are fixed-sized Header fields have fixed domain sizes,</p>
    <p>e.g., 16-bit port in [0, 216]</p>
    <p>Exactly k children</p>
    <p>fixed-depth</p>
    <p>~5.1x faster</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>NIC</p>
    <p>Native Apps</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>NIC</p>
    <p>MM</p>
    <p>SM</p>
    <p>Native Apps</p>
    <p>MM = Mirror Module</p>
    <p>SM = Spray Module</p>
    <p>Ring Buffers</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>NIC</p>
    <p>MM</p>
    <p>SM</p>
    <p>Native Apps Writer Writer Writer</p>
    <p>Atomic MultiLog</p>
    <p>MM = Mirror Module</p>
    <p>SM = Spray Module</p>
    <p>Ring Buffers</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>NIC</p>
    <p>MM</p>
    <p>SM</p>
    <p>Native Apps Writer Writer Writer</p>
    <p>Atomic MultiLog</p>
    <p>Monitor Diagnoser</p>
    <p>MM = Mirror Module</p>
    <p>SM = Spray Module</p>
    <p>Ring Buffers</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>NIC</p>
    <p>MM</p>
    <p>SM</p>
    <p>Native Apps Writer Writer Writer</p>
    <p>Atomic MultiLog</p>
    <p>Monitor Diagnoser Archiver</p>
    <p>MM = Mirror Module</p>
    <p>SM = Spray Module</p>
    <p>Ring Buffers</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture</p>
    <p>Coordinator</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Confluo End-host Architecture</p>
    <p>Coordinator</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Hypervisor VM1</p>
    <p>VM2</p>
    <p>VMk</p>
    <p>End-host Module</p>
    <p>Consistent analysis of network-wide events using Linearizable Snapshots</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Diagnostic Query Q1</p>
    <p>Diagnostic Query Q2</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Diagnostic Query Q1</p>
    <p>Diagnostic Query Q2</p>
    <p>Snapshot S1</p>
    <p>Snapshot S2</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Diagnostic Query Q1</p>
    <p>Diagnostic Query Q2</p>
    <p>Snapshot S1</p>
    <p>Snapshot S2</p>
    <p>Confluo provides linearizable snapshots, i.e.,  Each snapshot is atomic  Snapshots are totally ordered, i.e.,</p>
    <p>if S1 happens before S2, S2 must contain all the changes in S1</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Diagnostic Query Q1</p>
    <p>Diagnostic Query Q2</p>
    <p>Snapshot S1</p>
    <p>Snapshot S2</p>
    <p>Confluo provides linearizable snapshots, i.e.,  Each snapshot is atomic  Snapshots are totally ordered, i.e.,</p>
    <p>if S1 happens before S2, S2 must contain all the changes in S1  Limitation: Does not consider stack delays in ordering packets across end-hosts</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Diagnostic Query Q1</p>
    <p>Diagnostic Query Q2</p>
    <p>Snapshot S1</p>
    <p>Snapshot S2</p>
    <p>Confluo provides linearizable snapshots, i.e.,  Each snapshot is atomic  Snapshots are totally ordered, i.e.,</p>
    <p>if S1 happens before S2, S2 must contain all the changes in S1  Limitation: Does not consider stack delays in ordering packets across end-hosts</p>
    <p>Please see our paper for details on snapshot algorithm!</p>
  </div>
  <div class="page">
    <p>Evaluation  Setup:  Servers: 12 core 2.3 GHz Xeon CPUs, 252GB RAM  Network: 10Gbps links, Pica8 P-3297 switches</p>
    <p>!17</p>
  </div>
  <div class="page">
    <p>Evaluation  Setup:  Servers: 12 core 2.3 GHz Xeon CPUs, 252GB RAM  Network: 10Gbps links, Pica8 P-3297 switches</p>
    <p>Summary of Results:  Capture packet headers at line rate &gt; 10Gbps while evaluating</p>
    <p>!17</p>
  </div>
  <div class="page">
    <p>Evaluation  Setup:  Servers: 12 core 2.3 GHz Xeon CPUs, 252GB RAM  Network: 10Gbps links, Pica8 P-3297 switches</p>
    <p>Summary of Results:  Capture packet headers at line rate &gt; 10Gbps while evaluating</p>
    <p>!17</p>
    <p>Exploit rich telemetry data in packet headers to enable large class of network monitoring and diagnosis applications</p>
  </div>
  <div class="page">
    <p>Evaluation  Setup:  Servers: 12 core 2.3 GHz Xeon CPUs, 252GB RAM  Network: 10Gbps links, Pica8 P-3297 switches</p>
    <p>Summary of Results:  Capture packet headers at line rate &gt; 10Gbps while evaluating</p>
    <p>Please see our paper for detailed evaluation!</p>
    <p>!17</p>
    <p>Exploit rich telemetry data in packet headers to enable large class of network monitoring and diagnosis applications</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance T</p>
    <p>hr o ug</p>
    <p>hp ut</p>
    <p>( Pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>#Indexes</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance T</p>
    <p>hr o ug</p>
    <p>hp ut</p>
    <p>( Pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>#Indexes</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: Packet write-rate degrades gracefully on adding more filters and indexes</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( Pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>#Indexes</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: Packet write-rate degrades gracefully on adding more filters and indexes</p>
    <p>Takeaway: Confluos write throughput scales well with #cores due to inexpensive concurrency control</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( Pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>#Indexes</p>
    <p>#Cores</p>
    <p>#Indexes</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance C</p>
    <p>P U</p>
    <p>U ti</p>
    <p>liz at</p>
    <p>io n</p>
    <p>(%</p>
    <p>)</p>
    <p>Packet Size (Bytes)</p>
    <p>Packet Size (Bytes)</p>
    <p>!19</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>CPU Utilization for processing packets at line rate on a 10Gbps link</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance C</p>
    <p>P U</p>
    <p>U ti</p>
    <p>liz at</p>
    <p>io n</p>
    <p>(%</p>
    <p>)</p>
    <p>Packet Size (Bytes)</p>
    <p>Packet Size (Bytes)</p>
    <p>!19</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>CPU Utilization for processing packets at line rate on a 10Gbps link</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance C</p>
    <p>P U</p>
    <p>U ti</p>
    <p>liz at</p>
    <p>io n</p>
    <p>(%</p>
    <p>)</p>
    <p>Packet Size (Bytes)</p>
    <p>Packet Size (Bytes)</p>
    <p>!19</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>CPU Utilization for processing packets at line rate on a 10Gbps link</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: Confluo can capture packets at line rate for 10Gbps links for a wide range of packet sizes using a single CPU core.</p>
    <p>C P</p>
    <p>U U</p>
    <p>ti liz</p>
    <p>at io</p>
    <p>n</p>
    <p>(% )</p>
    <p>Packet Size (Bytes)</p>
    <p>Packet Size (Bytes)</p>
    <p>!19</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>CPU Utilization for processing packets at line rate on a 10Gbps link</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: Confluo can capture packets at line rate for 10Gbps links for a wide range of packet sizes using a single CPU core.</p>
    <p>C P</p>
    <p>U U</p>
    <p>ti liz</p>
    <p>at io</p>
    <p>n</p>
    <p>(% )</p>
    <p>Packet Size (Bytes)</p>
    <p>Packet Size (Bytes)</p>
    <p>!19</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>Many more results in the paper</p>
    <p>CPU Utilization for processing packets at line rate on a 10Gbps link</p>
  </div>
  <div class="page">
    <p>General Applicability and Impact</p>
  </div>
  <div class="page">
    <p>Confluo exploits three properties: fixed-sized attributes, append-only, non-transactional</p>
    <p>General Applicability and Impact</p>
  </div>
  <div class="page">
    <p>Confluo exploits three properties: fixed-sized attributes, append-only, non-transactional</p>
    <p>Many other applications exhibit similar properties:</p>
    <p>Distributed messaging, e.g., Apache Kafka, Amazon Kinesis, etc.</p>
    <p>Time-series databases, e.g., OpenTSDB, InfluxDB, etc.</p>
    <p>General Applicability and Impact</p>
  </div>
  <div class="page">
    <p>Confluo exploits three properties: fixed-sized attributes, append-only, non-transactional</p>
    <p>Many other applications exhibit similar properties:</p>
    <p>Distributed messaging, e.g., Apache Kafka, Amazon Kinesis, etc.</p>
    <p>Time-series databases, e.g., OpenTSDB, InfluxDB, etc.</p>
    <p>We are actively exploring Confluo applicability beyond network monitoring and debugging</p>
    <p>General Applicability and Impact</p>
  </div>
  <div class="page">
    <p>Confluo exploits three properties: fixed-sized attributes, append-only, non-transactional</p>
    <p>Many other applications exhibit similar properties:</p>
    <p>Distributed messaging, e.g., Apache Kafka, Amazon Kinesis, etc.</p>
    <p>Time-series databases, e.g., OpenTSDB, InfluxDB, etc.</p>
    <p>We are actively exploring Confluo applicability beyond network monitoring and debugging</p>
    <p>General Applicability and Impact</p>
    <p>Open Source: https://www.github.com/ucbrise/confluo</p>
  </div>
  <div class="page">
    <p>Confluo Summary</p>
  </div>
  <div class="page">
    <p>Confluo Summary</p>
    <p>Thank You!</p>
    <p>https://www.github.com/ucbrise/confluo</p>
    <p>Introduces a new data structure: Atomic MultiLog</p>
    <p>Exploits structure in network telemetry data to support:</p>
    <p>Rich monitoring  Low-overhead diagnosis and,  High-concurrency reads and writes</p>
    <p>Distributed monitoring and diagnosis stack for high-speed networks</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: Packet write-rate degrades gracefully on adding more filters and indexes</p>
    <p>Takeaway: Confluos write throughput scales well with #cores owing to its inexpensive lock-free concurrency</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( Pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>#Indexes</p>
    <p>#Cores</p>
    <p>#Indexes</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
    <p>!23</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: At line rate of 10Gbps, Confluo can handle average packet size as small as 128B with 16 filters and 2 indexes on a single core.</p>
    <p>C PU</p>
    <p>U ti liz</p>
    <p>at io</p>
    <p>n (%</p>
    <p>)</p>
    <p>Packet Size (Bytes)</p>
    <p>Packet Size (Bytes)</p>
    <p>!24</p>
    <p>Indexes: srcIP, srcPort, dstIP, dstPort, timestamp</p>
    <p>Filter Templates: (f1) packets from VM A to VM B; (f2) packets to VM A; (f3) packets from VM A on destination port P; (f4) packets between (IP1, P1) and (IP2, P2); and (f5) packets to or from VM A.</p>
  </div>
  <div class="page">
    <p>Atomic MultiLog Performance</p>
    <p>Takeaway: Confluo can evaluate 1000s of trigger queries with less than 4% CPU utilization at 1ms intervals, and with latency less than 70s.</p>
    <p>Takeaway: Diagnostic query latency in Confluo increases linearly with number of captured packets in Confluo.</p>
    <p>C PU</p>
    <p>U ti liz</p>
    <p>at io</p>
    <p>n (%</p>
    <p>)</p>
    <p>#Triggers</p>
    <p>Tr ig</p>
    <p>ge r</p>
    <p>La te</p>
    <p>nc y</p>
    <p>#Cores</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>#Captured Packets (millions)</p>
    <p>q1 q2 q3 q4 q5</p>
    <p>Query Templates: (q1) packets from VM A to VM B; (q2) packets to VM A; (q3) packets from VM A on destination port P; (q4) packets between (IP1, P1) and (IP2, P2); and (q5) packets to or from VM A.</p>
    <p>Trigger Templates: aggregate &gt; threshold, aggregate in {sum(pktSize), min(priority), max(CWND), count(pkts), }</p>
    <p>!25</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Switch S'</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Filter TCP retransmissions as pkt_drops</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
    <p>Monitoring:</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Filter TCP retransmissions as pkt_drops</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
    <p>Aggregate drop_count on pkt_drops  Trigger alert if drop_count &gt; T in 1ms interval</p>
    <p>Monitoring:</p>
  </div>
  <div class="page">
    <p>Monitoring &amp; Diagnosis Scenario</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Filter TCP retransmissions as pkt_drops</p>
    <p>priority(flow1) &gt; priority(flow2)  drop_count(flow1) &lt; drop_count(flow2)</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
    <p>Aggregate drop_count on pkt_drops  Trigger alert if drop_count &gt; T in 1ms interval</p>
    <p>Diagnosis: Check if:</p>
    <p>Monitoring:</p>
  </div>
  <div class="page">
    <p>Diagnosing Losses due to Flow Priorities Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
  </div>
  <div class="page">
    <p>Diagnosing Losses due to Flow Priorities</p>
    <p>Setup: 15 low priority flows &amp; 1 high priority flow w/ 10Gbps links</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
  </div>
  <div class="page">
    <p>Diagnosing Losses due to Flow Priorities</p>
    <p>Setup: 15 low priority flows &amp; 1 high priority flow w/ 10Gbps links</p>
    <p>Takeaway: Confluo is able to diagnose packet drops due to flow priorities.</p>
    <p>dr o p_</p>
    <p>co un</p>
    <p>t</p>
    <p>FlowID</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>FlowID 1: High Priority, FlowID 2-16: Low Priority</p>
    <p>priority(flow1) &gt; priority(flow2)</p>
    <p>Flow1 Flow2</p>
    <p>Switch S'</p>
  </div>
  <div class="page">
    <p>Diagnosing Losses due to Flow Priorities Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
  </div>
  <div class="page">
    <p>Diagnosing Losses due to Flow Priorities Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Setup: k low priority flows &amp; 1 high priority flow w/ 10Gbps links</p>
  </div>
  <div class="page">
    <p>Diagnosing Losses due to Flow Priorities</p>
    <p>Takeaway: Confluo can diagnose issues across 100s of VMs in a few ms</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>#Low priority flows (k) 1 2 4 8 16 32 64 128</p>
    <p>Atomic Snapshot Query Execution</p>
    <p>Detect TCP packet losses, determine if it is due to difference in flow priorities.</p>
    <p>Setup: k low priority flows &amp; 1 high priority flow w/ 10Gbps links</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12 P32</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes</p>
    <p>Write begin</p>
    <p>Write Complete (Visible)</p>
    <p>P11</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12 P32</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Naive approach to snapshot: obtain globalReadTails for all MultiLogs</p>
    <p>Pi = Packet Writes</p>
    <p>P11</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12 P32</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Naive approach to snapshot: obtain globalReadTails for all MultiLogs</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12 P32</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Naive approach to snapshot: obtain globalReadTails for all MultiLogs</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Naive approach to snapshot: obtain globalReadTails for all MultiLogs</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>Snapshot 1 contains P22 but not P12, Snapshot 2 contains P12 but not P22 29</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>Consistency in Distributed Diagnosis</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Naive approach to snapshot: obtain globalReadTails for all MultiLogs</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>Snapshot 1 contains P22 but not P12, Snapshot 2 contains P12 but not P22</p>
    <p>Not consistent!</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Centralized sequencer orders all writes to system (e.g., DBMS)Existing Approaches</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Centralized sequencer orders all writes to system (e.g., DBMS)  Algorithms with weaker consistency (e.g., Chandy Lamport)</p>
    <p>Existing Approaches</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Consistency in Distributed Diagnosis</p>
    <p>Centralized sequencer orders all writes to system (e.g., DBMS)  Algorithms with weaker consistency (e.g., Chandy Lamport)</p>
    <p>Existing Approaches</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
    <p>Infeasible!</p>
  </div>
  <div class="page">
    <p>Linearizable Snapshots in Confluo</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Linearizable Snapshots in Confluo</p>
    <p>Impose order on some writes during query execution rather than during writes</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Linearizable Snapshots in Confluo</p>
    <p>Impose order on some writes during query execution rather than during writes  How do we make the naive snapshots consistent?</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22</p>
  </div>
  <div class="page">
    <p>Key insight: Delay visibility of P11, P22 to all queries until after the snapshots</p>
    <p>Linearizable Snapshots in Confluo</p>
    <p>Impose order on some writes during query execution rather than during writes</p>
    <p>P11, P12 now excluded from both snapshots 31</p>
    <p>MultiLog#1 Multilog#2 Multilog#3</p>
    <p>P12P12 P32</p>
    <p>W al lCl oc k Tim</p>
    <p>e P21 P31</p>
    <p>P22</p>
    <p>Pi = Packet Writes Snapshot 1</p>
    <p>P11</p>
    <p>Snapshot 2</p>
    <p>P22P22 P12</p>
  </div>
  <div class="page">
    <p>Linearizable Snapshots in Confluo</p>
    <p>Server#1 Server#3Server#2 Server#n Coordinator</p>
    <p>Delay packet writes that happen during a snapshot operation</p>
  </div>
  <div class="page">
    <p>Read-Tail Values</p>
    <p>GeT-And-Freeze</p>
    <p>Linearizable Snapshots in Confluo</p>
    <p>Server#1 Server#3Server#2 Server#n Coordinator</p>
    <p>Delay packet writes that happen during a snapshot operation</p>
  </div>
  <div class="page">
    <p>ACKS</p>
    <p>Linearizable Snapshots in Confluo</p>
    <p>Server#1 Server#3Server#2 Server#n Coordinator</p>
    <p>Un-freeze</p>
    <p>Delay packet writes that happen during a snapshot operation</p>
  </div>
  <div class="page">
    <p>Linearizable Snapshots in Confluo</p>
    <p>Server#1 Server#3Server#2 Server#n Coordinator</p>
    <p>The visibility of any packet write that would have completed during the snapshot is delayed by freezing the globalReadTail (Step 1)</p>
    <p>Delay packet writes that happen during a snapshot operation</p>
  </div>
  <div class="page">
    <p>Linearizable Snapshots in Confluo</p>
    <p>Server#1 Server#3Server#2 Server#n Coordinator</p>
    <p>The visibility of any packet write that would have completed during the snapshot is delayed by freezing the globalReadTail (Step 1)</p>
    <p>The packet writes are only made visible (in Step 3) after snapshot(s) have been collected (in Step 2)</p>
    <p>Delay packet writes that happen during a snapshot operation</p>
  </div>
</Presentation>
