<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Peer-to-Peer Bargaining in Container-Based Datacenters</p>
    <p>Yuan Feng*, Baochun Li* and Bo Li</p>
    <p>*Department of Electrical and Computer Engineering, University of Toronto Department of Computer Science, Hong Kong University of Science and</p>
    <p>Technology IPTPS 2010, San Jose, CA, USA</p>
  </div>
  <div class="page">
    <p>Container-Based (Modular) Datacenters</p>
    <p>Low resource utilization!</p>
  </div>
  <div class="page">
    <p>Improve Utilization</p>
    <p>Virtualization Technology</p>
    <p>Server virtualization techniques Storage virtualization techniques</p>
    <p>A right direction, but not enough!</p>
    <p>Component failures are the norm, rather than the exception. Failures in different resource dimensions in distinct containers may follow their own degradation distributions.</p>
  </div>
  <div class="page">
    <p>Our Contribution</p>
    <p>The application of Buffet Principle when launching application instances</p>
    <p>VM migration across the boundary containers in a peer-topeer fashion through bargaining in a local trading market</p>
  </div>
  <div class="page">
    <p>Applying the Buffet Principle</p>
    <p>Buffet Principle: resources should be utilized as long as the marginal cost is lower than the marginal benefit.</p>
    <p>In our context: simply let each container accommodate as many application instances as it can to saturate nearly all of its available resources, with respect to either bandwidth, CPU, or storage space.</p>
    <p>Aggressively use all available resources</p>
  </div>
  <div class="page">
    <p>VM Migration Algorithm</p>
    <p>The benefits of VM migration</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>relatively balanced. Such a design is simple and realistic to be implemented, and takes place in an autonomic and selforganized manner, precisely as any other bargaining trading markets.</p>
    <p>The remainder of this paper is organized as follows. In Sec. II, we briefly introduce the Buffet principle and the VM placement strategy. After showing the benefits of redistributing VMs across different containers, Sec. III describes the decentralized VM migration algorithm based on the Nash Bargaining Solution. In Sec. IV, we show the effectiveness of the proposed VM migration algorithm. We conclude this paper in Sec. V.</p>
    <p>II. APPLYING THE BUFFET PRINCIPLE Modern applications hosted by container-based datacenters</p>
    <p>are highly diverse in their resource requirements. For example, video streaming encoders requires substantial CPU computational resources; while one-click online hosting services have a huge appetite for storage space. Generally, to ensure efficiency, the number of application instances, in virtual machines (VMs), is determined within the context of the application. For example, the default number of replicas in Google File System is 3 [6], while alternative email services may require as many as 15 replicas.</p>
    <p>After the number of application instances is determined, each of these instances is then deployed according to certain load balancing considerations. The design objective of these strategies is the efficiency of utilizing resources, which attempt to find the sweet spot of operation, such that the performance per unit of resource consumed is maximized.</p>
    <p>However, a singular focus on efficiency may lead to the under-utilization of resources. Since application demands vary quickly over time, it is difficult to predict such demands accurately. To guarantee service quality during peak hours, container-based datacenters routinely over-provision resource availability. If resources provisioned in a datacenter has the ability to support 5 instances of 100 different applications, yet only 3 instances of these applications are deployed within, the strategy unnecessarily wastes resources even when they are readily available.</p>
    <p>We believe that this is a classic example where the Buffet principle [7] should be applied. The Buffet principle argues that resources should be utilized as long as the marginal cost is lower than the marginal benefit. In the context of designing a strategy to determine how many application instances should be placed in each container, we may simply let each container accommodate as many application instances as it can to saturate nearly all of its available resources, with respect to either bandwidth, CPU, or storage space. The Buffet principle is a natural fit in this context for the following reasons:</p>
    <p>Low marginal costs. Once provisioned during design, resources in a container would be wasted if not utilized. This implies that the marginal cost of using such resources is exceedingly low. Though performance gains beyond the sweet spot may not be substantial, the marginal benefits  such as improved resilience to failures if more replicas are maintained</p>
    <p>may still outweigh the marginal costs. With a container costing millions to acquire and hundreds of kilowatts of power to keep up, leaving resources unused may not rational.</p>
    <p>Simple design. Based on the Buffet principle, there is no need to design elaborate schemes to determine the number of application instances (as VMs) to be deployed in each container. The maximum number of VMs is deployed to utilize all available resources.</p>
    <p>Enhanced resilience. With the service demand fluctuating quickly and the network changing dynamically, the sweet spot is hard to be determined accurately. When experiencing a bursty increase of requests within one application, containers who hold this application currently may be overloaded, leading to performance degradation. Instead of setting a stringent limit on resource usage, a greedy consumption of resources may improve the resilience of the entire datacenter to unanticipated circumstances.</p>
    <p>III. THE VM MIGRATION ALGORITHM In this section, we propose a distributed VM migration</p>
    <p>algorithm based on Nash Bargaining Solution to alleviate resource under-utilization incurred by failures. To minimize the transmission overhead by migrating, the algorithm responds lazily and locally.</p>
    <p>A. The Benefits of VM Migration As component failures start to occur over time, and as</p>
    <p>availability of resources in one dimension (e.g., bandwidth) may decrease substantially, it is often the case that such reduced availability makes it harder to fully utilize resources in other dimensions (e.g., storage and CPU). For example, with BCube [8], the failure of an aggregator in one container will cause a decrease of its upload bandwidth; then, the reduced bandwidth may degrade the access to this containers storage and CPU computing resources.</p>
    <p>Taking full advantage of the virtualization technology, we may migrate VMs to an alternative container, to achieve a higher level of resource utilization in the system. The following example illustrates potential benefits by such migrating.</p>
    <p>Consider a datacenter which has two containers and two applications. Each of the applications is provided by a corresponding VM: VM1 and VM2, respectively. The available resources of containers at the beginning and resources required to handle one request in a VM are summarized in Table I.</p>
    <p>TABLE I AVAILABLE RESOURCES FOR EACH CONTAINER AND REQUIRED</p>
    <p>RESOURCES FOR EACH VM</p>
    <p>Resources Container 1/2 VM1 VM2 CPU (MIPS) 6 3 1</p>
    <p>Storage Space (GB) 6 3 3 Bandwidth (Mbps) 6 1 3</p>
    <p>Initially VMs are placed as shown in Fig. 1 (a), according to the application placement strategy we discussed in Sec. II. A containers resource utilization ratio is defined as the geometric mean of its utilization ratios in three resource dimensions,</p>
    <p>Resource utilization ratio: 76%</p>
  </div>
  <div class="page">
    <p>VM Migration Algorithm</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>CPU: -3 MIPS Bandwidth: -3 Mbps</p>
    <p>Without VM migration: utilization ratio 44%</p>
    <p>With VM migration: utilization ratio 87%</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
  </div>
  <div class="page">
    <p>System Model</p>
    <p>Containers: Container set: , for every container</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>Available storage space: Available bandwidth: Available CPU computing:</p>
    <p>VMs: Application instance set: , for every ,</p>
    <p>Required storage space: Required bandwidth: Required CPU computing:</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>M</p>
    <p>Ci(t) Ui(t)</p>
    <p>Pi(t)</p>
    <p>sk rk</p>
    <p>clk</p>
    <p>k M</p>
  </div>
  <div class="page">
    <p>Lazy Response</p>
    <p>Algorithm trigger: the imbalance of resource utilization ratios in different dimension alters over a threshold</p>
    <p>At time t, the utilization ratios of each container i:</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>The standard deviation:</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>Trigger: &gt;</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
    <p>storage space, bandwidth and CPU. In this datacenter, the</p>
    <p>average resource utilization ratio is about 76%. Then as time goes by, Container 1 loses some computing</p>
    <p>resources, which has only 3 MIPS left, and Container 2 loses some bandwidth, with 3 Mbps left. If no VM migration is involved, requests for Application 1 and 2 directed to the same container can not be satisfied at the same time, which leads</p>
    <p>to the average resource utilization ratio decreasing to around</p>
    <p>dimension, is fit into the container that holds more available</p>
    <p>resource in that dimension. Then, requests directed to the</p>
    <p>same container for both Application 1 and 2 can be satisfied simultaneously, so that the average resource utilization ratio</p>
    <p>can be increased to 87%.</p>
    <p>Container 1 Container 2</p>
    <p>(b) With VM migration(a) Without VM migration</p>
    <p>Container 1 Container 2</p>
    <p>VM1 VM2 VM1 VM2 VM2 VM2 VM1 VM1</p>
    <p>Fig. 1. The different application fit with and without VM migration.</p>
    <p>From this example, we can see that by allowing VM</p>
    <p>migration across different containers, the datacenter is not only</p>
    <p>able to gain higher resource utilization with limited system</p>
    <p>wide resources, but also gives a more satisfactory performance</p>
    <p>as it can handle more requests at the same time.</p>
    <p>B. The VM Migration Algorithm Based on Nash Bargaining Solution</p>
    <p>model. Let N denote the set of containers in a datacenter. For every container i  N , it is associated with a current available storage space of Ci(t), in Gigabytes; a bandwidth of Ui(t), in Mbps; and a CPU computing capability of Pi(t), capturing the amount of processing power it has, in MIPS. Let the set</p>
    <p>of application instances provided by the datacenter be denoted</p>
    <p>by M. For any k  M, VMk requires a certain amount of storage space sk, bandwidth of rk, and computing resource of clk to handle one request. I</p>
    <p>k i (t) is a binary variable indicating</p>
    <p>if VMk is provided by container i or not at time t. And Dki (t) represents the number of requests for VMk directed to container i at time t.</p>
    <p>Instead of responding to the failures eagerly or regularly,</p>
    <p>our VM migration algorithm responses lazily, i.e., it is only operated when the imbalance of resource utilization ratios in</p>
    <p>different dimensions alters over a certain threshold. To be pre</p>
    <p>cise, at time t, the utilization ratios in storage, bandwidth, and computing resources of each container i can be represented as</p>
    <p>follows:</p>
    <p>rsi (t) =</p>
    <p>kM I k i (t)skD</p>
    <p>k i (t)</p>
    <p>Ci(t)  1</p>
    <p>rbi (t) =</p>
    <p>kM I k i (t)rkD</p>
    <p>k i (t)</p>
    <p>Ui(t)  1</p>
    <p>rci (t) =</p>
    <p>kM I k i (t)clkD</p>
    <p>k i (t)</p>
    <p>Pi(t)  1,</p>
    <p>where inequalities are the resource constraints that resources utilized by all application instances stored on one container can</p>
    <p>not exceeds its available resources. Let ri (t) be the standard deviation of rsi (t), r</p>
    <p>b i (t) and r</p>
    <p>c i (t). When a container is</p>
    <p>r i (t)</p>
    <p>exceeds the pre-defined threshold threshold, this container will trigger the VM migration algorithm at time t.</p>
    <p>peer-to-peer fashion. We envision the existence of a bargaining</p>
    <p>trading market. VMs are considered as commodities in this</p>
    <p>market. Peers, containers who own the commodities, evaluate</p>
    <p>the utility of each commodity in the market, then try to bargain</p>
    <p>with each other and exchange their commodities to increase</p>
    <p>their own utilities.</p>
    <p>Our VM migration algorithm is based on the Nash Bargaining Solution, which is a Pareto efficient solution to a two-player bargaining game. In such a game, two individuals</p>
    <p>have the opportunity to collaborate for mutual benefit in</p>
    <p>more than one way. By assuming that I) two individuals are</p>
    <p>highly rational, II) each can accurately compare its desire for</p>
    <p>various things, III) they are equal in bargaining skill, and IV)</p>
    <p>each has full knowledge of the tastes and preferences of the</p>
    <p>other, Nash proposed a solution which should satisfy certain</p>
    <p>axioms [9]. Let u be the utility function for Player 1, and v the utility function for Player 2. Under these conditions, rational agents will choose what is known as the Nash bargaining</p>
    <p>solution. Namely, they will seek to maximize |u(x)  u(d)| and |v(y)  v(d)|, where u(d) and v(d) are the status quo utilities (i.e., the utility obtained if one decides not to bargain with the other player).</p>
    <p>In the datacenter trading market, there are multiple con</p>
    <p>tainers, i.e., possible players. The trigger peer will choose the corresponding player according to the following Player Selection Principle: when a container triggers the VM migration algorithm, it first checks out the dimension in which its resource utilization ratio is the highest; and then chooses the container with the lowest resource utilization ratio in this dimension to bargain with.</p>
    <p>The rationale behind is when ri (t) &gt; threshold, dimension with the highest ri becomes the bottleneck of fully utilizing resources in other dimensions. Application instances require</p>
    <p>high resource usage in the bottleneck dimension should be</p>
    <p>moved out to achieve a more balanced resource utilization</p>
    <p>in all dimensions. Reasonably, the ideal destination of these</p>
    <p>VMs should be a container with relatively sufficient available</p>
    <p>resources in the bottleneck dimension.</p>
    <p>The Nash Bargaining Solution tries to find the optimal</p>
    <p>ownerships of the two players commodities, so that both</p>
  </div>
  <div class="page">
    <p>Nash Bargaining Solution</p>
    <p>Pareto efficient solution to a two-player bargaining game</p>
    <p>Player Selection Principle</p>
    <p>Check out the dimension in which its resource utilization is the highest Chooses the container with the lowest resource utilization ratio in this dimension</p>
  </div>
  <div class="page">
    <p>Relaxed Nash Bargaining Solution</p>
    <p>Relax the Pareto optimality property</p>
    <p>players utilities can be maximized. Since a players utility here is the sum of all self-evaluated VMs utilities stored in this container, getting the optimal solution may require extensive VM transmissions, which causes heavy transmission overhead. Seeing that the objective here is to find a feasible solution, we relax the Pareto optimality property of Nash Bargaining Solution, making the solution practical and cost effective in datacenters.</p>
    <p>Specifically, both players evaluate each VM according to their own information. For player i, the utility of VMk is computed as:</p>
    <p>V ki (t) =  s i (t)</p>
    <p>skD k i (t)</p>
    <p>Ci(t) + bi (t)</p>
    <p>rkD k i (t)</p>
    <p>Ui(t) + ci (t)</p>
    <p>clkD k i (t)</p>
    <p>Pi(t) .</p>
    <p>(1) where si (t),</p>
    <p>b i (t) and</p>
    <p>c i (t) are the weights given to re</p>
    <p>sources in different dimensions according to the player is current resource usage states, and they are constrained by si (t) +</p>
    <p>b i (t) +</p>
    <p>c i (t) = 1. As we discussed before, resource</p>
    <p>usage in the bottleneck dimension should be given less value. For simplicity, we define the weights to be inversely proportional to the resource utilization ratio in the corresponding dimension, as:</p>
    <p>si (t) = 1</p>
    <p>rs i (t)</p>
    <p>sum 1 r (t)</p>
    <p>, bi (t) = 1</p>
    <p>rb i (t)</p>
    <p>sum 1 r (t)</p>
    <p>, ci (t) = 1</p>
    <p>rc i (t)</p>
    <p>sum 1 r (t)</p>
    <p>,</p>
    <p>where sum 1 r (t) = 1</p>
    <p>rs i (t)</p>
    <p>+ 1 rb</p>
    <p>i (t)</p>
    <p>+ 1 rc</p>
    <p>i (t)</p>
    <p>. The bargain process is based on the players own evalua</p>
    <p>tion of VMs. Whenever comes a win-win situation within resource constraints, i.e. the exchange of commodities leads to an increase of both players utilities:</p>
    <p>u(i)  u(d) =</p>
    <p>kM i</p>
    <p>V ki (t)</p>
    <p>kMi</p>
    <p>V ki (t) &gt; 0 AND</p>
    <p>v(j)  v(d) =</p>
    <p>kM j</p>
    <p>V kj (t)</p>
    <p>kMj</p>
    <p>V kj (t) &gt; 0,</p>
    <p>the trade is done. Mi and Mj are the owned VM sets of player i and j before commodities exchange, and Mi and M</p>
    <p>j</p>
    <p>are the owned VM sets of player i and j after commodities exchange. Once the standard deviation r of the trigger peer falls below the threshold, the market is closed, which means the VM migration algorithm is terminated. The VM migration algorithm is summarized as Algorithm 1.</p>
    <p>Lazy Response: Though migrating VMs have potential benefits to improve resource utilization ratio, it does not come without substantial upfront costs of bandwidth. An example orchestration of live VM and storage migration on the testbed through HARMONY shows the transaction throughput drops around 11.9% during VM migration [5]. Application performance may be affected severely by these live migrations, which requires avoiding the migration activities as much as possible. As a consequence, our VM migration algorithm responses lazily, i.e., it only starts when triggered and terminates immediately when the utilization ratio is tolerable.</p>
    <p>Algorithm 1 The VM Migration Algorithm. 1: Wait until a container is ri (t) &gt; threshold. Container i</p>
    <p>is the trigger peer. 2: According to the Player Selection Principle, the trigger</p>
    <p>peer chooses another player j in the Bargaining game. 3: while ri (t) &gt; threshold do 4: Player i and j compute the utilities of VMk, k  M</p>
    <p>according to Eqn. (1), and bargain with each other. 5: if u(i)  u(d) &gt; 0 and v(j)  v(d) &gt; 0 when</p>
    <p>commodities exchange of k1 and k2 happens, then 6: Player i and j trade with commodities k1 and k2. 7: end if 8: end while</p>
    <p>Prioritization to Traffic: To further reduce the affection of migration traffic to the productive work, prioritization can be adopted. The VM migration traffic gets lower priority. They can be deferring to other tasks, e.g., background transfer of TCP Nice or be restricted to opportunistic usage, i.e., VM traffic occurs only when the resource is idle [7].</p>
    <p>Algorithm Termination: In reality, it is possible that not a single win-win situation happens between two players. It is also possible that through several exchanging between two players, the standard deviation of resource utilization ratios of the trigger peer is still over the threshold. To ensure the stability, a limit on the number of bargain round can be added to the algorithm. When the number of bargain round is achieved, the algorithm is forced to be terminated. Then the trigger peer chooses the second proper player according to the Player Selection Principle in the next execution period.</p>
    <p>IV. EXPERIMENTAL EVALUATION We dedicate this section to investigations of how the pro</p>
    <p>posed VM migration algorithm performs in practical scenarios. The results validate that our VM migration algorithm increases resource utilization successfully in container-based datacenters.</p>
    <p>The evaluation of the proposed VM migration algorithm is based on its implementation in an event-driven simulator using C++. We simulate in a system with 20 containers and 100 VMs. Every container has the same 2000 storage, 2000 Mbps bandwidth and 2000 MIPS CPU computing resource capacities. For every container, resource in each dimension fail at times according to a Poisson distribution, the mean of which follows a normal distribution of N (30, 10) among containers. The amount of resource failures of each container at every time follows a uniform distribution of U (1, 50). Different resources required by individual VMs are generated according to a normal distribution of N (25, 10), with restriction of range between 1 and 100. We set threshold, the threshold of standard deviation of resource utilization ratios to trigger the VM migration algorithm, to be 0.1.</p>
    <p>Since our objective is to increase resource utilization ratio, the main performance metric in this simulation is the standard deviation of resource utilization ratios, which reflects the</p>
    <p>Whenever comes a win-win situation within resource constraints, i.e., the exchange of commodities leads to an increase of both players utilities:</p>
    <p>the trade is done.</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation</p>
    <p>Bargaining overhead 5</p>
    <p>Index</p>
    <p>S td</p>
    <p>. D</p>
    <p>e v . o f P</p>
    <p>la y e r</p>
    <p>Before</p>
    <p>After</p>
    <p>Fig. 2. Standard deviation of resource utilization ratios of Player 1 (trigger peer).</p>
    <p>Index</p>
    <p>S td</p>
    <p>. D</p>
    <p>e v . o f P</p>
    <p>la y e r</p>
    <p>Before</p>
    <p>After</p>
    <p>Fig. 3. Standard deviation of resource utilization ratios of Player 2.</p>
    <p>Index</p>
    <p>A v e ra</p>
    <p>g e o</p>
    <p>f S</p>
    <p>td . D</p>
    <p>e v . o f T</p>
    <p>w o P</p>
    <p>la y e rs</p>
    <p>Before</p>
    <p>After</p>
    <p>Fig. 4. The average of standard deviation of resource utilization ratios of two players.</p>
    <p>Index</p>
    <p>B a rg</p>
    <p>a in</p>
    <p>in g O</p>
    <p>v e rh</p>
    <p>e a d</p>
    <p>Successful Bargains</p>
    <p>Total Tried Bargains</p>
    <p>Fig. 5. The communication and transmission overhead of bargain.</p>
    <p>balanced level of resource usage in different dimensions. Besides, we also show the bargaining overhead from the implementation point of view. We collect 100 samples by running the VM migration algorithm.</p>
    <p>A. Overall Performance of the VM Migration Algorithm First, we would like to show the overall performance of</p>
    <p>the VM migration algorithm. From Fig. 2, we can observe that the standard deviation of resource utilization ratios of the trigger peer is successfully decreased below the threshold after running the algorithm. This shows the effectiveness of the VM migration algorithm to lessen the pressure of resource under-utilization put by imbalance usage among different dimensions.</p>
    <p>It is critical to point out that there are some cases that the standard deviation of Player 2 appears higher than without running the VM migration algorithm, which is indicated in Fig. 3. The reason is that by improving the trigger peers performance, sometimes it is required to scarifies the other containers performance a little bit, so that the overall performance is improved. As shown in Fig. 4, the average of the standard deviation of resource utilization ratios is improved evidently.</p>
    <p>B. Bargaining Overhead To investigate the communication and transmission over</p>
    <p>head incurred by bargain, we show how many tried bargaining rounds and actual trades are needed to lower the resource utilization ratios of all the containers to a tolerable balanced situation. As shown in Fig. 5, in most cases the algorithm terminates within dozens of bargain rounds, which implies the communication overhead is acceptable. It also reveals that in 80% of all the samples only 1 trade is needed. While sometimes it may require 2  3 successful trades between the two players, at most this number will not exceed 5, which suggests that the transmission overhead is pretty satisfying.</p>
    <p>V. CONCLUDING REMARKS AND FURTHER WORK Our focus in this paper is to fully utilize resources in</p>
    <p>container-based datacenters via VM migration. Before describing the VM migration algorithm, we propose a new application placement strategy based on Buffet principle, which advocates to use the resources aggressively. In contrast to having a</p>
    <p>centralized controller, we present the VM migration algorithm in a peer-to-peer fashion regulated by bargaining behaviors between containers. Relying on the inherent self-organized manner of bargaining games, the proposed VM migration algorithm is effective, with low management complexity. Resource utilization ratio can be increased locally by bargaining behaviors between two peers to increase their own utilities. As shown by experiment results, the proposed VM migration algorithm enjoys substantial improvement with respect to the resource utilization ratio.</p>
    <p>We believe that this work represents the first step towards raising resource utilization ratios in container-based datacenters. There are many other interesting topics worth discussing. For example, what is the best routing maps for VMs to maximize resource utilization ratios; how much is the performance gap between our bargaining solution and the optimal one, and so on. For the proposed VM migration algorithm, adopting trading strategies in some multiplayer bargaining games rather than the two-player bargaining game might obtain higher resource utilization. We defer these investigations to our future work.</p>
    <p>REFERENCES [1] [Online]. Available: http://searchdatacenter.techtarget.com/sDefinition/0,</p>
    <p>,sid80 gci1306761,00.html [2] A. Greenberg, J. Hamilton, D. A. Maltz, and P. Patel, The Cost of</p>
    <p>a Cloud: Research Problems in Data Center Networks, SIGCOMM Comput. Commun. Rev., vol. 39, no. 1, pp. 6873, 2009.</p>
    <p>[3] A. Greenberg, J. R. Hamilton, N. Jain, S. Kandula, C. Kim, P. Lahiri, D. A. Maltz, P. Patel, and S. Sengupta, VL2: A Scalable and Flexible Data Center Network, SIGCOMM Comput. Commun. Rev., vol. 39, no. 4, pp. 5162, 2009.</p>
    <p>[4] M. Korupolu, A. Singh, and B. Bamba, Coupled Placement in Modern Data Centers, in Proc. IEEE International Symposium on Parallel &amp; Distributed Processing (IPDPS), 2009, pp. 112.</p>
    <p>[5] A. Singh, M. Korupolu, and D. Mohapatra, Server-Storage Virtualization: Integration and Load Balancing in Data Centers, in Proc. of ACM/IEEE Conference on Supercomputing (SC), 2008, pp. 112.</p>
    <p>[6] S. Ghemawat, H. Gobioff, and S.-T. Leung, The Google File System, ACM SIGOPS Operating Systems Review, vol. 37, no. 5, pp. 2943, 2003.</p>
    <p>[7] R. R. Ratul Mahajan, Jitendra Padhye and B. Zill, Eat All You Can in an All-You-Can-Eat Buffet: A Case for Aggressive Resource usage, in Proc. 7th ACM Workshop on Hot Topics in Networks (Hotnets), 2008.</p>
    <p>[8] C. Guo, G. Lu, D. Li, H. Wu, X. Zhang, Y. Shi, C. Tian, Y. Zhang, and S. Lu, BCube: A High Performance, Server-centric Network Architecture for Modular Data Centers, in Proc. ACM SIGCOMM, 2009, pp. 6374.</p>
    <p>[9] J. Nash, The Bargaining Problem, Econometrica, vol. 18, no. 2, pp. 155162, 1950.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>A new application placement strategy based on Buffet Principle, which advocates to use the resources aggressively</p>
    <p>A VM migration algorithm in a peer-to-peer fashion regulated by bargaining behaviours between containers.</p>
  </div>
</Presentation>
