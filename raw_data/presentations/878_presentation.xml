<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MiniBox: A Two-Way Sandbox for x86 Native Code</p>
    <p>Yanlin Li, Jonathan McCune, Jim Newsome,</p>
    <p>Adrian Perrig, Brandon Baker, and Will Drewry</p>
    <p>Carnegie Mellon University Google, Inc.</p>
  </div>
  <div class="page">
    <p>Platform as a Service  One of the most commercialized forms of</p>
    <p>cloud computing  One million active applications were running on</p>
    <p>Google App Engine in 2012[1]  It is critical to protect the OS from the large</p>
    <p>number of applications in PaaS  Sandbox is deployed to protect the guest OS</p>
  </div>
  <div class="page">
    <p>Guest OS Guest OS</p>
    <p>Current Sandbox  Only one-way protection</p>
    <p>Protect OS from malicious Apps  App is exposed to malicious code in guest OS</p>
    <p>Not desired by customers</p>
    <p>Hypervisor</p>
    <p>Dom 0 VMI</p>
    <p>Hypervisor-based architecture</p>
    <p>APP APP</p>
    <p>cloud code</p>
    <p>Hardware hardware</p>
    <p>sandbox</p>
    <p>Customers app</p>
  </div>
  <div class="page">
    <p>Goal: Two-Way Sandbox  Two-way protection for x86 native code</p>
    <p>OS Protection: protect a benign OS from a misbehaving application</p>
    <p>Application Protection: protect an application from a malicious OS</p>
  </div>
  <div class="page">
    <p>Wait.. It has been solved!?  Intel Software Guard Extensions (SGX) [1]</p>
    <p>Hardware-based two-way memory isolation  TrustVisor (TV) [2]</p>
    <p>Hypervisor based two-way memory isolation  Only isolate a Piece of Application Logic (PAL)</p>
    <p>from the OS</p>
    <p>OS</p>
    <p>Isolation Module</p>
    <p>Sensitive PAL</p>
    <p>Non-sensitive PAL</p>
    <p>Subvert the OS</p>
    <p>SGX or TV</p>
    <p>[1] Innovative technology for CPU based attestation and sealing. HASSP (2013) [2] TrustVisor: Efficient TCB reduction and attestation. IEEE S&amp;P (2010)</p>
  </div>
  <div class="page">
    <p>Combine Sandbox and Isolation  Sandbox to confine the non-isolated PAL</p>
    <p>Sandbox exposes large interface to the application</p>
    <p>Developers need split the application  require substantial porting effort</p>
    <p>OS</p>
    <p>Isolation Module</p>
    <p>Sensitive PAL</p>
    <p>Non-sensitive PAL Subvert the OS SGX or TV</p>
    <p>Sandbox for OS protection</p>
    <p>Break sandbox</p>
  </div>
  <div class="page">
    <p>Combine Sandbox and Isolation  Deploy sandbox in an isolated environment</p>
    <p>Avoid porting effort  Sandbox exposes large interface to the application</p>
    <p>Iago attacks [1]:  A malicious OS subverts a protected process by</p>
    <p>returning a carefully chosen sequence of return values to sensitive system calls</p>
    <p>OS</p>
    <p>Isolation Module</p>
    <p>Sensitive PAL</p>
    <p>Non-sensitive PAL</p>
    <p>SGX or TV</p>
    <p>Sandbox for OS protection</p>
    <p>Break sandbox</p>
    <p>Iago attacks by syscall return values</p>
    <p>[1] Iago attacks: Why the system call API is a bad untrusted RPC interface. ASPLOS 2013</p>
  </div>
  <div class="page">
    <p>Challenges  It is promising to combine a one-way sandbox</p>
    <p>and a two-way memory isolation mechanism to establish two-way protection</p>
    <p>Challenges 1. System design of combining a one-way sandbox</p>
    <p>and a memory isolation mechanism to establish two-way protection</p>
  </div>
  <div class="page">
    <p>Contributions 1. Design, implement, and evaluate MiniBox, the first</p>
    <p>attempt toward a practical two-way sandbox for x86 native applications.</p>
  </div>
  <div class="page">
    <p>Outline  Motivations  Goal and Challenges  Assumptions &amp; Adversary Model  MiniBox Design  Implementation &amp; Evaluation  Related Work  Conclusion</p>
  </div>
  <div class="page">
    <p>Assumptions  For both protections</p>
    <p>No physical attacks (e.g., CPU is trusted)  Cryptographic primitives are secure</p>
    <p>For application protection  Applications do not have memory safety bugs</p>
    <p>(e.g., buffer overflows) or insecure design  For OS protection</p>
    <p>The small system call interface that OS exposes to the application on MiniBox is free of vulnerabilities</p>
    <p>OS does not have concurrency vulnerabilities in system call wrappers[1]</p>
  </div>
  <div class="page">
    <p>Adversary Model  Adversary model for App protection</p>
    <p>OS is controlled by adversaries  Attempt to access the apps memory  Attempt to perform Iago attacks</p>
    <p>Adversary model for OS protection  App is malicious and contains privileged</p>
    <p>instructions  Attempt to subvert and control the OS</p>
    <p>Do not prevent  DoS attacks or side channel attacks</p>
  </div>
  <div class="page">
    <p>MiniBox Overview 1. Combine one-way sandbox for x86 native code and</p>
    <p>hypervisor-based two-way memory isolation 2. Split sandbox components into service runtime</p>
    <p>modules and OS protection modules  Include the service runtime in the isolated</p>
    <p>memory space with the App to support App execution</p>
    <p>Handle sensitive calls in the isolated environment 4. Minimize and secure the communication interface</p>
    <p>between OS protection modules and the application 13</p>
  </div>
  <div class="page">
    <p>MiniBox Architecture</p>
    <p>Hypervisor</p>
    <p>OS protection</p>
    <p>(e.g., parameter sanitizing,</p>
    <p>access control)</p>
    <p>LibOS (e.g., dynamic memory, TLS, multithreading, secure I/O)</p>
    <p>Context switch</p>
    <p>Param marshaling</p>
    <p>Syscall dispatcher</p>
    <p>OS</p>
    <p>Hardware C</p>
    <p>ontext sw itch</p>
    <p>P aram</p>
    <p>unm arshal</p>
    <p>P rogram</p>
    <p>loader</p>
    <p>Non-sensitive calls Environment</p>
    <p>Switch Hypercall</p>
    <p>Mutually Isolated Execution Environment (MIEE)</p>
    <p>Regular Environment x86 native app</p>
    <p>x86 native App</p>
    <p>Sensitive PAL</p>
    <p>Non-sensitive PAL</p>
    <p>Hardware TCB for App protection</p>
    <p>TCB for OS protection</p>
  </div>
  <div class="page">
    <p>Minimized and Secure Communication Interface</p>
    <p>Minimized communication interface between two environments  In load time: program loader  In run time: only system call interface</p>
    <p>Secure communication between two environments  Application specifies system call information  Hypervisor passes system call parameters and</p>
    <p>return values between two environments  OS protection modules check the system call</p>
    <p>parameters</p>
  </div>
  <div class="page">
    <p>Exceptions/Interrupts and Debugging  Exceptions and interrupts</p>
    <p>Hypervisor handles exceptions and nonmaskable interrupts</p>
    <p>Maskable interrupts are disabled  MiniBox Debugging mode</p>
    <p>The hypervisor-based memory isolation is disabled</p>
    <p>One app-layer module copies system call parameters between two environments</p>
    <p>Developers can use GDB for applicaiton debugging</p>
  </div>
  <div class="page">
    <p>Implementation  MiniBox prototype</p>
    <p>Public implementation of TrustVisor (Version 0.2.1) [1]</p>
    <p>Native Client open source project [2]  Support for multi-core and both Intel and AMD</p>
    <p>processors  Ubuntu 10.04 as the guest OS</p>
    <p>Modules SLoC Hypervisor 14414 (TrustVisor), add 691 NaCl ELF file Loader add 299 Service runtime in MIEE (including the LibOS)</p>
    <p>[1] Design, implementation and verification of an extensible and modular hypervisor framework. IEEE S&amp;P (2013) [2] Native Client: A sandbox for portable, un- trusted x86 native code. IEEE S&amp;P (2009)</p>
  </div>
  <div class="page">
    <p>Evaluation  Microbechmarks</p>
    <p>System call overhead  Application benchmarks</p>
    <p>I/O-bound applications  CPU-bound applications</p>
  </div>
  <div class="page">
    <p>System Call Overhead</p>
    <p>System calls handled by the OS have high overhead on MiniBox  Each call causes environment switches  Hypervisor-based Environment switches on MiniBox</p>
    <p>cause high overhead for non-sensitive system calls  System calls handled inside the Mutually Isolated</p>
    <p>Execution Environment have similar performance to those on vanilla NaCl</p>
    <p>Handled by OS in regular environment</p>
    <p>Handled by LibOS in MIEE</p>
  </div>
  <div class="page">
    <p>I/O-Bound Application (Zlib)</p>
    <p>Zlib application  Read 1 MB of file data from file system  Compress the read data</p>
    <p>File I/O is expensive on MiniBox  We expect that cache buffer will improve the</p>
    <p>application performance in practice</p>
  </div>
  <div class="page">
    <p>CPU-Bound Applications</p>
    <p>AES key search  Encrypt 128-Byte plain text for 200, 000 times</p>
    <p>BitCoin  Perform 200, 000 SHA-256 computation</p>
    <p>MiniBox does not add any noticeable overhead to CPU-bound applications over NaCl</p>
  </div>
  <div class="page">
    <p>Related Work  Protecting applications</p>
    <p>HOFMANN, O., DUNN, A., KIM, S., LEE, M., AND WITCHEL, E. InkTag: Secure applications on an untrusted operating system. ASPLOS, 2013.</p>
    <p>BAUMANN, A., PEINADO, M., HUNT, G., ZMUDZINSKI, K., ROZAS, C. V., AND HOEKSTRA, M. Secure execution of un-modified applications on an untrusted host. http://research. microsoft.com/apps/pubs/default.aspx?id=204758, 2013.</p>
    <p>TA-MIN, R., LITTY, L., AND LIE, D. Splitting interfaces: Making trust between applications and operating systems configurable. SOSP, 2006.</p>
    <p>MCCUNE, J. M., LI, Y., QU, N., ZHOU, Z., DATTA, A., GLIGOR, V., AND PERRIG, A. TrustVisor: Efficient TCB reduction and attestation. IEEE S&amp;P, 2010.</p>
    <p>SINGARAVELU, L., PU, C., HA RTIG, H., AND HELMUTH, C. Reducing TCB complexity for security-sensitive applications. EuroSys, 2006.</p>
    <p>Sandbox for OS protection  PORTER, D. E., BOYD-WICKIZER, S., HOWELL, J., OLINSKY, R., AND HUNT, G. C.</p>
    <p>Rethinking the library OS from the top down. SIGPLAN, 2011.  YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY T., OKASAKA,</p>
    <p>S., NARULA, N., FULLAGAR, N., AND GOOGLE INC. Native Client: A sandbox for portable, un- trusted x86 native code. IEEE S&amp;P, 2009.</p>
    <p>JANA, S., PORTER, D. E., AND SHMATIKOV, V. TxBox: Building secure, efficient sandboxes with system transactions. In IEEE S&amp;P, 2011.</p>
    <p>KIM, T., AND ZELDOVICH, N. Practical and effective sand- boxing for non-root users. In Proceedings of USENIX ATC, 2013.</p>
  </div>
  <div class="page">
    <p>Conclusion  We made the first attempt toward a practical</p>
    <p>two-way sandbox for x86 native code.  We proposed a generic architecture for</p>
    <p>establishing two-way protection for x86 native code on commodity computer systems.</p>
    <p>We anticipate that MiniBox will be widely adopted on systems where two-way protection is desired (e.g., the PaaS cloud computing platforms).</p>
  </div>
  <div class="page">
    <p>Email: yanlli@cmu.edu</p>
  </div>
  <div class="page">
    <p>Native Client[1]  NaCl: a sandbox technology for running</p>
    <p>Native Module (NaM) on the Web  Software Fault Isolation (SFI)</p>
    <p>NaM runs in its own segmentations  Disassembler &amp; Validator</p>
    <p>Guarantee that there are no privileged instructions that can break the SFI in the NaM</p>
  </div>
  <div class="page">
    <p>Native Client[1]  Service Runtime in NaCl</p>
    <p>System call interfaces for NaM  Special toolchain to build NaM</p>
    <p>Support service call APIs</p>
    <p>Context Switch</p>
    <p>Native Module (NaM)</p>
    <p>Legacy OS or Libs</p>
    <p>System Call Dispatcher</p>
    <p>Native Client Sandbox</p>
    <p>[1] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Orm, S. Okasaka, N. Narula, N. Fullagar. Native client: A sandbox for portable, untrusted x86 native code. Oakland, 2009</p>
  </div>
  <div class="page">
    <p>TrustVisor[1]  A small hypervisor that:</p>
    <p>Isolates a Piece of Application Logic (PAL) from the legacy OS by nested pages</p>
    <p>Provides TPM APIs to the PAL  Measures integrity of PAL for attestation</p>
    <p>Integrity Measurement  Hardware TPM  TrustVisor  TrustVisor  PAL</p>
    <p>Shortcomings  No system call from PAL  Porting Effort</p>
    <p>APP B</p>
    <p>APP A</p>
    <p>PAL</p>
    <p>Untrusted Legacy OS</p>
    <p>TrustVisor uTPM</p>
    <p>TPM API</p>
    <p>Hardware TPM</p>
    <p>[1] J M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB reduction and attestation. Oakland, 2010</p>
  </div>
  <div class="page">
    <p>Exceptions/Interrupts and Debugging</p>
    <p>Exceptions and interrupts  Hypervisor handles exceptions and non</p>
    <p>maskable interrupts  Maskable interrupts are disabled</p>
    <p>Debugging mode  The hypervisor-based memory isolation is</p>
    <p>disabled  One app-layer module copies system call</p>
    <p>parameters between two environments</p>
  </div>
  <div class="page">
    <p>Against Iago Attacks  Handle sensitive calls in LibOS inside</p>
    <p>the isolated execution environment  LibOS supports</p>
    <p>Dynamic memory management  Thread local storage management  Multi-thread management  Secure file I/O</p>
  </div>
  <div class="page">
    <p>MiniBox Architecture</p>
    <p>CPU</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
    <p>Low-level System (e.g., Guest OS</p>
    <p>or VMM)</p>
    <p>Regular Environment Mutually Isolated Execution Environment (MIEE)</p>
    <p>x86 Native App</p>
    <p>Context Switch</p>
    <p>Param Marshaling</p>
    <p>System Call Dispatcher</p>
    <p>System call</p>
    <p>dispatcher (param</p>
    <p>sanitizing, access control)</p>
    <p>Environment Switch</p>
    <p>System Calls</p>
    <p>GDTLDT</p>
    <p>Thread Scheduler</p>
    <p>TPM</p>
    <p>uTPM</p>
    <p>Hypercalls</p>
    <p>Memory Management, TLS Management, Multi-threading,</p>
    <p>Secure !le IO, uTPM API</p>
    <p>C ontext Sw</p>
    <p>itch TCB for</p>
    <p>App Protection Security-Sensitive</p>
    <p>Piece of App Logic (PAL) Non-Sensitive</p>
    <p>Piece of App Logic (PAL) OS Protection</p>
    <p>Modules Param</p>
    <p>U nm</p>
    <p>arshaling</p>
    <p>Program loader</p>
  </div>
</Presentation>
