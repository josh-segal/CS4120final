<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Declaratively Processing Provenance Metadata</p>
    <p>Scott%Moore Joint%work%with%Ashish%Gehani%and%Natarajan%Shankar%</p>
    <p>TaPP%2013 2%April%2013</p>
  </div>
  <div class="page">
    <p>Processing Provenance Streams  Systems%that%collect%low@level%provenance%generate% a%lot%of%data...</p>
  </div>
  <div class="page">
    <p>Processing Provenance Streams  Systems%that%collect%low@level%provenance%generate% a%lot%of%data...</p>
    <p>SPADE%collects%I/O%system%calls</p>
    <p>Thousands%of%I/O%related%edges%during%process</p>
    <p>Need%some%way%to%manage%all%that%data!</p>
    <p>Reduce%storage%requirements,%simplify%queries,%...</p>
  </div>
  <div class="page">
    <p>Processing Provenance Streams  Systems%that%collect%low@level%provenance%generate% a%lot%of%data...</p>
    <p>SPADE%collects%I/O%system%calls</p>
    <p>Thousands%of%I/O%related%edges%during%process</p>
    <p>Need%some%way%to%manage%all%that%data!</p>
    <p>Reduce%storage%requirements,%simplify%queries,%...</p>
    <p>SPADE%uses%provenance)filters</p>
    <p>Running%example:%(Gehani%et%al,%POLICY%2010) Aggregate%I/O%events%for%consecutive%sequences% of%reads%or%writes%(an%I/O%Run)%%%%</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance public void putEdge(AbstractEdge incomingEdge) { if (incomingEdge instanceof Used) { Used usedEdge = (Used) incomingEdge; String fileVertexHash = usedEdge.getDestinationVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(usedEdge.getSourceVertex().hashCode()); if (!reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); reads.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(usedEdge.getDestinationVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge); if (writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); tempSet.remove(processVertexHash); } } else if (incomingEdge instanceof WasGeneratedBy) { WasGeneratedBy wgb = (WasGeneratedBy) incomingEdge; String fileVertexHash = wgb.getSourceVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(wgb.getDestinationVertex().hashCode()); if (!writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); writes.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(wgb.getSourceVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(wgb.getSourceVertex()); putInNextFilter(wgb.getSourceVertex()); putInNextFilter(wgb); if (reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); tempSet.remove(processVertexHash); } } else { putInNextFilter(incomingEdge); } } // ... more code for vertices ...</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance public void putEdge(AbstractEdge incomingEdge) { if (incomingEdge instanceof Used) { Used usedEdge = (Used) incomingEdge; String fileVertexHash = usedEdge.getDestinationVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(usedEdge.getSourceVertex().hashCode()); if (!reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); reads.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(usedEdge.getDestinationVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge); if (writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); tempSet.remove(processVertexHash); } } else if (incomingEdge instanceof WasGeneratedBy) { WasGeneratedBy wgb = (WasGeneratedBy) incomingEdge; String fileVertexHash = wgb.getSourceVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(wgb.getDestinationVertex().hashCode()); if (!writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); writes.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(wgb.getSourceVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(wgb.getSourceVertex()); putInNextFilter(wgb.getSourceVertex()); putInNextFilter(wgb); if (reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); tempSet.remove(processVertexHash); } } else { putInNextFilter(incomingEdge); } } // ... more code for vertices ...</p>
    <p>What%does%this%do?</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance public void putEdge(AbstractEdge incomingEdge) { if (incomingEdge instanceof Used) { Used usedEdge = (Used) incomingEdge; String fileVertexHash = usedEdge.getDestinationVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(usedEdge.getSourceVertex().hashCode()); if (!reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); reads.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(usedEdge.getDestinationVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge); if (writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); tempSet.remove(processVertexHash); } } else if (incomingEdge instanceof WasGeneratedBy) { WasGeneratedBy wgb = (WasGeneratedBy) incomingEdge; String fileVertexHash = wgb.getSourceVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(wgb.getDestinationVertex().hashCode()); if (!writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); writes.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(wgb.getSourceVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(wgb.getSourceVertex()); putInNextFilter(wgb.getSourceVertex()); putInNextFilter(wgb); if (reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); tempSet.remove(processVertexHash); } } else { putInNextFilter(incomingEdge); } } // ... more code for vertices ...</p>
    <p>What%does%this%do?</p>
    <p>What%does%the%provenance%it%records%mean?</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance public void putEdge(AbstractEdge incomingEdge) { if (incomingEdge instanceof Used) { Used usedEdge = (Used) incomingEdge; String fileVertexHash = usedEdge.getDestinationVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(usedEdge.getSourceVertex().hashCode()); if (!reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); reads.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(usedEdge.getDestinationVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge); if (writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); tempSet.remove(processVertexHash); } } else if (incomingEdge instanceof WasGeneratedBy) { WasGeneratedBy wgb = (WasGeneratedBy) incomingEdge; String fileVertexHash = wgb.getSourceVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(wgb.getDestinationVertex().hashCode()); if (!writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); writes.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(wgb.getSourceVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(wgb.getSourceVertex()); putInNextFilter(wgb.getSourceVertex()); putInNextFilter(wgb); if (reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); tempSet.remove(processVertexHash); } } else { putInNextFilter(incomingEdge); } } // ... more code for vertices ...</p>
    <p>What%does%this%do?</p>
    <p>What%does%the%provenance%it%records%mean?</p>
    <p>We%propose%a%declarative%programming% language%for%processing%provenance%metadata.</p>
  </div>
  <div class="page">
    <p>Datalog + Time: a Simple Event Logic</p>
    <p>Datalog%+%enough%to%process%events</p>
    <p>Declarative%networking:%OverLog,%Dedalus/Bloom,%etc.</p>
    <p>Synchronous%programming:%ESTEREL,%LUSTRE,%etc.</p>
  </div>
  <div class="page">
    <p>Datalog + Time: a Simple Event Logic</p>
    <p>Datalog%+%enough%to%process%events</p>
    <p>Declarative%networking:%OverLog,%Dedalus/Bloom,%etc.</p>
    <p>Synchronous%programming:%ESTEREL,%LUSTRE,%etc.</p>
    <p>SEL%programs%operate%on%streams%of%events</p>
    <p>Events%are%Datalog%facts%at%an%instant%in%time</p>
    <p>Inference%rules%generate%new%facts</p>
  </div>
  <div class="page">
    <p>Datalog + Time: a Simple Event Logic</p>
    <p>Datalog%+%enough%to%process%events</p>
    <p>Declarative%networking:%OverLog,%Dedalus/Bloom,%etc.</p>
    <p>Synchronous%programming:%ESTEREL,%LUSTRE,%etc.</p>
    <p>SEL%programs%operate%on%streams%of%events</p>
    <p>Events%are%Datalog%facts%at%an%instant%in%time</p>
    <p>Inference%rules%generate%new%facts</p>
    <p>A%single%temporal%operator%previously%(written%?)</p>
  </div>
  <div class="page">
    <p>SEL by Example module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>SEL by Example module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
    <p>Modules%operate%on%streams%of%events%and% generate%new%streams%of%events.</p>
  </div>
  <div class="page">
    <p>SEL by Example module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
    <p>A%change%event%happens%when%a%new%value,% value(Cur),%is%different%than%an%old%one,%?value(Old)</p>
  </div>
  <div class="page">
    <p>SEL by Example module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
    <p>The%first%value/1%event%is%received.%There%is%no% previous%value,%so%the%inference%rule%doesnt%fire.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta. When%the%next%event%is%received,%the%inference%rule%</p>
    <p>for%change%fires%and%generates%a%new%event.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta. When%the%next%event%is%received,%the%inference%rule%</p>
    <p>for%change%fires%and%generates%a%new%event.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta. Previously%refers%to%the%</p>
    <p>immediately%preceding%time%step.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta. Previously%refers%to%the%</p>
    <p>immediately%preceding%time%step.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
    <p>Each%module%has%its%own%clock.%Time%advances% only%when%input%events%happen.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>value(1).</p>
    <p>value(2).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>value(1).</p>
    <p>value(2).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta. Multiple%input%events%can%happen%simultaneously.%</p>
    <p>Like%Datalog,%SEL%computes%all%possible%facts.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>value(1).</p>
    <p>value(2).</p>
    <p>change(1).</p>
    <p>change(2).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta. Multiple%input%events%can%happen%simultaneously.%</p>
    <p>Like%Datalog,%SEL%computes%all%possible%facts.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>value(1).</p>
    <p>value(2).</p>
    <p>change(1).</p>
    <p>change(2).</p>
    <p>value(0).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>SEL by Example</p>
    <p>value(0). value(1).</p>
    <p>change(1).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>value(1).</p>
    <p>value(2).</p>
    <p>change(1).</p>
    <p>change(2).</p>
    <p>value(0).</p>
    <p>change(-1).</p>
    <p>change(-2).</p>
    <p>module delta. input value/1. output change/1.</p>
    <p>change(Change) :value(Cur), ?value(Old), Cur != Old, Change = Cur - Old.</p>
    <p>end delta.</p>
  </div>
  <div class="page">
    <p>Encoding Provenance</p>
    <p>Represent%provenance%as%edges%and%vertices%in%a%provenance% graph%with%attributes</p>
    <p>Similar%to%Missier%and%Belhajjames%PROV%encoding%(IPAW%12)</p>
    <p>process(42,process). attr(42,commandline,emacs example.txt). vertex(43,artifact). attr(43,location,example.txt). edge(44,used,42,43). attr(44,endtime,1363894844000).</p>
    <p>Process: emacs Command line: emacs example.txt</p>
    <p>location: example.txt endtime: 1363894844000</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance public void putEdge(AbstractEdge incomingEdge) { if (incomingEdge instanceof Used) { Used usedEdge = (Used) incomingEdge; String fileVertexHash = usedEdge.getDestinationVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(usedEdge.getSourceVertex().hashCode()); if (!reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); reads.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(usedEdge.getDestinationVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge.getDestinationVertex()); putInNextFilter(usedEdge); if (writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); tempSet.remove(processVertexHash); } } else if (incomingEdge instanceof WasGeneratedBy) { WasGeneratedBy wgb = (WasGeneratedBy) incomingEdge; String fileVertexHash = wgb.getSourceVertex().getAnnotation(artifactKey); String processVertexHash = Integer.toString(wgb.getDestinationVertex().hashCode()); if (!writes.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;(); tempSet.add(processVertexHash); writes.put(fileVertexHash, tempSet); } else { HashSet&lt;String&gt; tempSet = writes.get(fileVertexHash); if (tempSet.contains(processVertexHash)) { vertexBuffer.remove(wgb.getSourceVertex()); return; } else { tempSet.add(processVertexHash); } } vertexBuffer.remove(wgb.getSourceVertex()); putInNextFilter(wgb.getSourceVertex()); putInNextFilter(wgb); if (reads.containsKey(fileVertexHash)) { HashSet&lt;String&gt; tempSet = reads.get(fileVertexHash); tempSet.remove(processVertexHash); } } else { putInNextFilter(incomingEdge); } } // ... more code for vertices ...</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Module%for%buffering%and%combining%provenance% events.%Controlled%by%emit/1,%aggr/2,%and%drop/1.</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Immediately%output%edges%and%vertices%for% provenance%not%related%to%File%I/O.</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>A%Process%reads%a%File%(represented%by% an%Artifact)%if%it%used%it.</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>A%Process%is%reading%a%File%(an%I/O%run)%if% after%the%first%read%in%a%sequence%occurs.</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>A%reading%I/O%run%continues%until%there%is%a% write%(or%the%file%is%closed,%etc.)</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>If%a%read%happens%during%an%I/O%run,% aggregate%the%provenance%edges.</p>
  </div>
  <div class="page">
    <p>Aggregating File I/O Provenance import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :?reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Output%the%edges%in%the%buffer%associated% with%an%I/O%run%when%it%ends.</p>
  </div>
  <div class="page">
    <p>import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Benefits of Declarative Programming</p>
  </div>
  <div class="page">
    <p>import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Benefits of Declarative Programming  Easy%to%understand</p>
    <p>DSL%for%events</p>
    <p>Abstractions%for%buffering,%etc.</p>
  </div>
  <div class="page">
    <p>import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Benefits of Declarative Programming  Easy%to%understand</p>
    <p>DSL%for%events</p>
    <p>Abstractions%for%buffering,%etc.</p>
    <p>Built%in%query%language</p>
    <p>Reason%about%provenance%as%you% process%it!</p>
  </div>
  <div class="page">
    <p>import Aggregate.</p>
    <p>emit(ID) :- vertex(ID,Type), Type != artifact. emit(ID) :- edge(ID,Type,_,_), Type != used, Type != wasGeneratedBy.</p>
    <p>read(ID,Process,Artifact,File) :edge(ID,used,Process,Artifact), attr(Artifact,location,File).</p>
    <p>reading(ID,Process,Artifact,File) :read(ID,Process,Artifact,File), ?reading(_,Process ,_,File). reading(ID,Process ,Artifact,File) :reading(ID,Process ,Artifact,File), write(_,_,_,File).</p>
    <p>aggr(ReadSeries,Read) :reading(ReadSeries,Process,_,File), read(Read,Process,_,File).</p>
    <p>emit(Artifact) :reading(_,_,Artifact ,File), write(_,_,_,File). emit(Read) :reading(Read,_,_,File), write(_,_,_,File).</p>
    <p>Benefits of Declarative Programming  Easy%to%understand</p>
    <p>DSL%for%events</p>
    <p>Abstractions%for%buffering,%etc.</p>
    <p>Built%in%query%language</p>
    <p>Reason%about%provenance%as%you% process%it!</p>
    <p>Simple%formal%semantics</p>
    <p>Provenance%of%provenance?</p>
  </div>
  <div class="page">
    <p>Other applications  Filters%for%provenance%collection</p>
    <p>Filtering%application@level%provenance</p>
    <p>Aggregating%provenance%from%multiple%sources</p>
  </div>
  <div class="page">
    <p>Other applications  Filters%for%provenance%collection</p>
    <p>Filtering%application@level%provenance</p>
    <p>Aggregating%provenance%from%multiple%sources</p>
    <p>Monitoring%provenance%for%security%(Rachapalli%et%al,%TaPP%2012)</p>
  </div>
  <div class="page">
    <p>Other applications  Filters%for%provenance%collection</p>
    <p>Filtering%application@level%provenance</p>
    <p>Aggregating%provenance%from%multiple%sources</p>
    <p>Monitoring%provenance%for%security%(Rachapalli%et%al,%TaPP%2012) tainted(Arifact,File) :attr(Artifact,location,File), secret(File).</p>
    <p>tainted(Process,Secret) :edge(_,used,Process,Artifact), tainted(Artifact,Secret).</p>
    <p>tainted(Artifact,Secret) :edge(_,wasGeneratedBy,Artifact,Process), tainted(Process,Secret).</p>
    <p>tainted(Node,Secret) :?tainted(Node,Secret), attr(Node,endtime,_).</p>
    <p>leak(Secret,Connection) :edge(_,wasGeneratedBy,Connection,Process), attr(Conntection,subtype,network), tainted(Process,Secret).</p>
  </div>
  <div class="page">
    <p>Other applications  Filters%for%provenance%collection</p>
    <p>Filtering%application@level%provenance</p>
    <p>Aggregating%provenance%from%multiple%sources</p>
    <p>Monitoring%provenance%for%security%(Rachapalli%et%al,%TaPP%2012)</p>
    <p>Other%online%provenance%queries?</p>
    <p>tainted(Arifact,File) :attr(Artifact,location,File), secret(File).</p>
    <p>tainted(Process,Secret) :edge(_,used,Process,Artifact), tainted(Artifact,Secret).</p>
    <p>tainted(Artifact,Secret) :edge(_,wasGeneratedBy,Artifact,Process), tainted(Process,Secret).</p>
    <p>tainted(Node,Secret) :?tainted(Node,Secret), attr(Node,endtime,_).</p>
    <p>leak(Secret,Connection) :edge(_,wasGeneratedBy,Connection,Process), attr(Conntection,subtype,network), tainted(Process,Secret).</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Declarative%programming%makes%processing% provenance%metadata%much%easier</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Declarative%programming%makes%processing% provenance%metadata%much%easier</p>
    <p>Many%interesting%opportunities%for% processing%provenance%as%it%is%generated!</p>
  </div>
</Presentation>
