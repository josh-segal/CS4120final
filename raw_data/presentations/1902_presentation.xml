<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Cloud-Native File Systems</p>
    <p>Remzi H. Arpaci-Dusseau Andrea C. Arpaci-Dusseau</p>
    <p>University of Wisconsin-Madison</p>
    <p>Venkat Venkataramani Rockset, Inc.</p>
  </div>
  <div class="page">
    <p>How And What We Build Is Always Changing</p>
    <p>Earliest days  Assembly programming on single machines</p>
    <p>Big single-machine advances  Unix: A standard (and good) OS!  C: A systems language!</p>
    <p>Same thing, one level up: Distributed systems  Collect group of standard machines,</p>
    <p>build something interesting on top of them</p>
  </div>
  <div class="page">
    <p>Commonality: New System on Fixed Substrate</p>
    <p>Whether a single machine/distributed, we tend to build new systems on a fixed set of resources with fixed (sunk) cost</p>
    <p>Machine: X CPUs, Y GB memory, Z TB storage  Buy many such machines  Build new system of interest on those machines</p>
    <p>But the world is changing</p>
  </div>
  <div class="page">
    <p>Welcome To Cloud</p>
    <p>Cloud is a reality  Can rent cycles or bytes as needed  Per-unit cost is defined and known  Not just raw resources: services too</p>
    <p>Many new systems are being realized only in cloud  Excellent example: Snowflake elastic warehouse</p>
    <p>[sigmod 16]</p>
  </div>
  <div class="page">
    <p>Thus, Questions</p>
    <p>Cloud-native thinking: How should we build systems given the cloud?</p>
    <p>What new opportunities are available?  What new systems can we realize?  What can we stop worrying about?</p>
  </div>
  <div class="page">
    <p>In This Talk</p>
    <p>Cloud-native principles  Guidelines for how to think about building</p>
    <p>systems in the era of the cloud</p>
    <p>Cloud-native file system  Case study: How to transform a local file</p>
    <p>system into a cloud-native one</p>
  </div>
  <div class="page">
    <p>Principles</p>
    <p>Storage principles</p>
    <p>CPU principles</p>
    <p>Overarching principle</p>
    <p>(just highlights; more in paper)</p>
  </div>
  <div class="page">
    <p>Storage Reliability</p>
    <p>Storage reliability principle: Highly replicated, reliable, and available storage can (should?) be used (The S3 principle)</p>
    <p>11 9s of durability!</p>
    <p>Implication: Build on top of this, dont build YARSS (Yet Another Replicated Storage System)</p>
    <p>Example (kind of): BigTable on GFS</p>
  </div>
  <div class="page">
    <p>Storage Cost and Capacity Storage cost principle: Storage space is generally inexpensive</p>
    <p>At cheapest, $4 / month / TB Storage capacity principle: A lot of storage space available</p>
    <p>The total volume of data and number of objects you can store are unlimited (Amazon)</p>
    <p>Implication: Use space as needed to improve system  Example: Indices for added lookup performance</p>
  </div>
  <div class="page">
    <p>Storage Hierarchy</p>
    <p>Storage hierarchy principle: Storage is available in many forms, with noticeable differences in performance and cost across each level</p>
    <p>Example: Amazon Glacier vs S3</p>
    <p>Implication: Must manage data across levels  Can improve performance, reduce costs</p>
  </div>
  <div class="page">
    <p>CPU Parallelism</p>
    <p>CPU parallelism principle (or A x B = B x A): It should cost roughly the same to execute on A CPUs for B seconds as it does to execute on B CPUs for A seconds</p>
    <p>Granularity of accounting might limit you</p>
    <p>Implication: Do everything you can in parallel</p>
  </div>
  <div class="page">
    <p>CPU Capacity</p>
    <p>CPU capacity principle: Large numbers of CPUs are available</p>
    <p>As with storage, essentially unlimited</p>
    <p>Implication: Use as many CPUs as you need  Scale up to solve tasks quickly</p>
  </div>
  <div class="page">
    <p>CPU Scale-Up/Down</p>
    <p>CPU scale-up/scale-down principle: One should only use as many CPUs as needed for a task, and not more</p>
    <p>While cheap, CPUs are not free either</p>
    <p>Implication: Must monitor usage, turn off CPUS when unused</p>
  </div>
  <div class="page">
    <p>CPU Remote Work CPU remote-work principle: When possible, use remote CPU resources to do needed work</p>
    <p>Shared data store makes this easier</p>
    <p>Implication: Can separate foreground/background  Improve predictability of former,</p>
    <p>use parallelism for latter</p>
  </div>
  <div class="page">
    <p>CPU Hierarchy</p>
    <p>CPU hierarchy principle: CPU is available in different forms, with differences in performance, cost, and reliability across each level</p>
    <p>Normal vs. spot instance for example</p>
    <p>Implication: CPU types must be managed  Pick CPU right for given task</p>
  </div>
  <div class="page">
    <p>Overarching Principle Overall performance/cost principle: Every decision in cloud-native systems is ultimately driven by a cost/performance trade-off</p>
    <p>Cant make decisions without cost/perf knowledge  Extremes are interesting:</p>
    <p>highest performance, or lowest cost  But middle ground is important too:</p>
    <p>reasonable cost/performance</p>
    <p>Implication: Cost must be fundamental part of systems (and even applications above)</p>
  </div>
  <div class="page">
    <p>Implications Replicated storage: Dont reinvent the wheel Extra space is cheap: Use for performance? Massive parallelism: Use for background tasks Hierarchy: Continuous data migration to lower cost while keeping performance high? Cost: Have to know how much is OK to spend</p>
    <p>Overall: Proper utilization of the cloud requires rethinking of how we build the systems above them</p>
  </div>
  <div class="page">
    <p>Case Study: CNFS</p>
  </div>
  <div class="page">
    <p>Case Study: CNFS Case Study: Cloud-Native File System (CNFS)</p>
    <p>File System</p>
    <p>Classic</p>
    <p>CNFS</p>
    <p>Cloud-Native</p>
    <p>Cloud Block Service (e.g., EBS)</p>
  </div>
  <div class="page">
    <p>CNFS Architecture</p>
    <p>CNFS</p>
    <p>Amazon EBS High-Performance</p>
    <p>Amazon EBS Low-Cost</p>
    <p>Snap Snap Snap Snap Snap Snap</p>
    <p>Worker Worker</p>
    <p>CNFS ManagerVM</p>
    <p>Demote Compress</p>
    <p>Communicate</p>
    <p>Read/ Write</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>CNFS: Key Points Copy-on-write (COW): Natural fit for cloud</p>
    <p>Enables background work on immutable storage</p>
    <p>Storage work naturally offloaded from front end  Enables predictable low-latency for foreground  Adds massive parallelism for background</p>
    <p>Can optimize for cost or performance or mix  Need hints from above on what is important  New APIs too</p>
    <p>But, still needs help from cloud providers  Example: Cant access EBS volumes from many clients (now)</p>
  </div>
  <div class="page">
    <p>Conclusions Cloud Native</p>
    <p>New way to build systems upon substrate provided by Cloud</p>
    <p>Principles: New guidelines for design  Higher-level services: Dont reinvent the wheel  Flexible resources: Can use a lot or a little  Different types of resources: Costly/Fast vs. Cheap/Slow  Cost awareness: Nothing is free</p>
    <p>Case study: CNFS  A local COW file system built to run on EBS (not a disk)  Early prototype: Modified ext4 can migrate files across cloud volumes</p>
    <p>(but much still to be done)</p>
    <p>Cloud-native thinking: How does it change your next system?</p>
  </div>
  <div class="page">
    <p>End</p>
  </div>
</Presentation>
