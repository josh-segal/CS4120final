<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Finding Unknown Malice in 10 Seconds: Mass Vetting for New Threats at the Google-Play Scale</p>
    <p>Kai Chen,, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Nan Zhang, Heqing Huang, Wei Zou, Peng Liu</p>
    <p>Indiana University, Bloomington Institute of Information Engineering, Chinese Academy of Sciences</p>
    <p>College of IST, Penn State University</p>
    <p>http://www.appomicsec.com</p>
  </div>
  <div class="page">
    <p>Background  Android Malware</p>
    <p>Billions of mobile computing devices. 70% are Android.</p>
    <p>In 2014, 99% of mobile malware targets Android system</p>
    <p>Current Approaches  Signature-based detection &amp; Behavior-based detection</p>
    <p>Are they effective in malware detection?</p>
  </div>
  <div class="page">
    <p>Are they effective?  Signature-based detection</p>
    <p>Cannot detect new malware: Over 160,000 new malware samples created every day (Panda Security, 2014)</p>
    <p>Code obfuscation, e.g., DroidChameleon (AsiaCCS 2013)</p>
    <p>Behavior-based Detection  Heavyweight information-flow analysis</p>
    <p>Require known suspicious behaviors (e.g., Dynamic code loading)</p>
  </div>
  <div class="page">
    <p>Can we design an approach that is:</p>
    <p>Highly efficient</p>
    <p>Detect malware with unknown behaviors</p>
    <p>We achieve this goal using neither</p>
    <p>signatures nor behaviors. But only</p>
    <p>code comparison.</p>
  </div>
  <div class="page">
    <p>Observation: a unique business model</p>
    <p>Attackers like to attach the same attack payload to legitimate apps.</p>
  </div>
  <div class="page">
    <p>Results of Repackaging</p>
    <p>Compare related apps, check different code</p>
  </div>
  <div class="page">
    <p>Results of Repackaging Detect code intersection in apps with unrelated apps</p>
  </div>
  <div class="page">
    <p>Our approach: DiffCom Analysis</p>
    <p>Sim-View Analysis</p>
    <p>No</p>
    <p>Yes Diff Analysis</p>
    <p>Com Analysis</p>
    <p>Suspicious?</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: An example</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: An example</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: An example</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: An example</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: An example</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: View graph</p>
    <p>OnClick OnClick</p>
    <p>OnClick</p>
    <p>OnClick</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: View Graph</p>
    <p>OnClick OnClick</p>
    <p>OnClick</p>
    <p>OnClick</p>
    <p>OnDrag</p>
    <p>OnTouch</p>
    <p>OnClick OnClick</p>
    <p>OnListItemClick</p>
    <p>OnClick</p>
    <p>Another Entry Point</p>
    <p>AlertDialog</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: Compare View Graphs</p>
    <p>Onlick</p>
    <p>OnClick</p>
    <p>OnDrag</p>
    <p>OnTouch</p>
    <p>OnClick OnClick</p>
    <p>OnListItemClick</p>
    <p>OnClick</p>
    <p>AlertDialog</p>
    <p>Onlick</p>
    <p>OnClick</p>
    <p>OnDrag</p>
    <p>OnTouch</p>
    <p>OnClick OnClick</p>
    <p>OnListItemClick</p>
    <p>OnClick</p>
    <p>AlertDialog</p>
  </div>
  <div class="page">
    <p>Can we avoid graph isomorphism analysis?</p>
    <p>(2  2) (  )</p>
    <p>Enemy for scalability Goal</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: Challenge  Challenge 1: A Graph edge = abstract relation</p>
    <p>The abstract relation could have arbitrary length</p>
    <p>Challenge 2: Switching branches changes node positions</p>
    <p>Original Graph Challenge 1 Challenge 2</p>
  </div>
  <div class="page">
    <p>Our idea: Fix the nodes in the graph</p>
    <p>Step 1: view graph3D-view-graphv-core</p>
    <p>Step 2: Scalable comparison</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: v-core</p>
    <p>Step 1: Accurate mapping: view graph3D-view-graphv-core</p>
    <p>The coordinate is a vector &lt;x,y,z&gt;  x is the sequence number in the view graph</p>
    <p>y is the number of outgoing edges of the node  z is the depth of loop of the node</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: v-core</p>
    <p>Step 1: Accurate mapping: view graph3D-view-graphv-core</p>
    <p>A &lt;1, 1, 0&gt;; B &lt;2, 2, 1&gt;; C &lt;3, 2, 1&gt;; D &lt;4, 1, 1&gt;; E &lt;5, 1, 0&gt;; F &lt;6, 0, 0&gt;</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: v-core</p>
    <p>Step 1: Accurate mapping: view graph3D-view-graphv-core</p>
  </div>
  <div class="page">
    <p>Sim-View Analysis: v-core</p>
    <p>Step 2: Scalable comparison  First, sub-graph-level comparison</p>
    <p>Second, app-level comparison</p>
    <p>Feature 1: The similarity between two graphs is monotonically correlate to the distance between two v-cores.</p>
    <p>Feature 2: V-cores are sortable. We only need to compare a v-core with its neighbors, but not all v-cores.</p>
    <p>Localized global comparison</p>
  </div>
  <div class="page">
    <p>Diff Analysis</p>
    <p>For apps having the same view and different signatures, the different methods between the two apps may be malicious</p>
    <p>Challenge 1: How to quickly compare two apps and find the different methods?</p>
    <p>Challenge 2: Are the different methods malicious?</p>
  </div>
  <div class="page">
    <p>Diff Analysis</p>
    <p>Challenge 1: How to quickly compare two apps and find the different methods?</p>
    <p>Centroid on methods:</p>
    <p>Control flow graph (CFG)3D-CFGm-core</p>
    <p>m-core &lt;x,y,z,w&gt;</p>
  </div>
  <div class="page">
    <p>Diff Analysis  Challenge 2: Are the different methods malicious?</p>
    <p>Ads and other libraries</p>
    <p>Updated code (from the same author)</p>
    <p>Unharmful code</p>
    <p>Solution  White-list of libraries</p>
    <p>Stand-alone analysis</p>
    <p>Sensitive APIs  e.g., GetSimSerialNumber</p>
    <p>Avoid heavy-weight</p>
    <p>information flow analysis</p>
    <p>call</p>
    <p>call</p>
  </div>
  <div class="page">
    <p>Com Analysis</p>
    <p>For the apps with different views, find the common code</p>
    <p>Challenge 1: Are the two apps really unrelated?</p>
    <p>Challenge 2: Is the common code really malicious?</p>
  </div>
  <div class="page">
    <p>Com Analysis</p>
    <p>Challenge 1: Is the two apps really unrelated?</p>
    <p>Correlation check  Similar ideas with Diff</p>
    <p>Rovio Entertainment</p>
  </div>
  <div class="page">
    <p>Com Analysis</p>
    <p>Challenge 2: Is the common code really malicious?  Library code: Ads, third-party libraries</p>
    <p>Code reuse: templates</p>
    <p>Approach  White-listing popular libraries</p>
    <p>Training set: the methods not viewed as malicious by virustotal</p>
    <p>Report suspicious code: the method with dangerous APIs</p>
  </div>
  <div class="page">
    <p>Measurement  Scale of study</p>
    <p>Total apps collected : 1.2 million apps  Duplicates removed using MD5</p>
    <p>App markets covered : 33</p>
    <p># of apps collected from different markets and region</p>
    <p>GooglePlay : 400,000+ apps  Chinese app markets : 596,437 apps  European app markets : 61,866 apps  Other US stores : 27,047 apps</p>
  </div>
  <div class="page">
    <p>Measurement  False Positive</p>
    <p>Flagged apps by MassVet : 127,429 apps (10.93%)</p>
    <p>FDR (false-positive VS all detected) : 4.73%</p>
    <p>FPR (false-positive VS all apps analyzed) : &lt; 1%</p>
    <p>Manually studied: 20/40 malware</p>
    <p>FDR: 4.73%</p>
  </div>
  <div class="page">
    <p>Measurement  Coverage</p>
    <p>2700 Randomly sampled apps  Virustotal: 281 apps</p>
    <p>MassVet: 197 apps (70.11%)</p>
    <p>NOD32: 171 apps (60.85%)</p>
    <p>McAfee: 45 apps (16.01%)</p>
    <p>21 apps (11%) apps missed by Virustotal</p>
  </div>
  <div class="page">
    <p>Measurement  Performance</p>
    <p>A server with 260 GB memory, 40 cores at 2.8 GHz and 28 TB hard drives</p>
    <p>9 seconds from the submission of the app to the completion of the whole process on it.</p>
  </div>
  <div class="page">
    <p>Measurement  Landscape</p>
    <p>35,473 (north America), 4,852 (Europe), 87,104 (Asia)</p>
    <p>Apps from Google Play: 7.61% are potentially harmful</p>
    <p>Virustotal confirmed 91,648 malware  4.1% were alarmed by at least 25 out of 54 scanners</p>
  </div>
  <div class="page">
    <p>Measurement  Existing defense</p>
    <p>Existing defense: Google Play indeed makes effort to mitigate the malware threat</p>
    <p>Most malware we discovered were uploaded in the past 14 months</p>
  </div>
  <div class="page">
    <p>Measurement  Disappeared apps</p>
    <p>After uploading 3,711 apps to Virustotal (scan mode)  40 days later: 250 of them disappeared</p>
    <p>90 days later: another 129 apps disappeared</p>
    <p>Among the 379 disappeared apps, 54 apps (14%) are detected by Virustotal</p>
    <p>upload 3,711 apps</p>
  </div>
  <div class="page">
    <p>Measurement  Disappeared apps</p>
    <p>Track 2,265 developers of the 3,711 apps (2014/11~2015/02)  Additional 2014 apps disappeared (all detected by MassVet)</p>
    <p>We did NOT check them by virustotal  Google Play also looked into their common malicious components under the same</p>
    <p>developers, but not across the whole market (may take long time).</p>
    <p>Our work is just the one can help them (in several seconds).</p>
    <p>Reappeared apps  604 confirmed malware (28.4%) showed up in Google Play</p>
    <p>unchanged</p>
    <p>829 apps showed up using different names</p>
  </div>
  <div class="page">
    <p>Measurement  Impact</p>
    <p>Distribution of downloads for malicious or suspicious apps in GooglePlay</p>
  </div>
  <div class="page">
    <p>Measurement  Impact</p>
    <p>The distribution of rating for malicious or suspicious apps in GooglePlay</p>
  </div>
  <div class="page">
    <p>Measurement  Signatures</p>
    <p>Top 5 signatures used in apps</p>
  </div>
  <div class="page">
    <p>Measurement  Identities</p>
    <p>Top 5 signatures used by different identities</p>
  </div>
  <div class="page">
    <p>Conclusion  We propose a new technique for efficient vetting of apps</p>
    <p>for unknown malware  Compare an app with all other apps on a market (DiffCom Analysis)</p>
    <p>Light-weight code analysis compared with other approaches</p>
    <p>We implemented MassVet and apply it to analyze 1.2 million apps.</p>
    <p>MassVet found 127,429 malware (20 likely to be zero days)</p>
  </div>
  <div class="page">
    <p>MassVet Available Now</p>
    <p>http://www.appomicsec.com</p>
    <p>Thank You! Questions?</p>
  </div>
</Presentation>
