<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>OPERATING SYSTEM TRANSACTIONS</p>
    <p>Donald E. Porter, Owen S. Hofmann, Christopher J. Rossbach, Alexander Benn,</p>
    <p>and Emmett Witchel</p>
    <p>The University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>OS APIs dont handle concurrency 2</p>
    <p>OS is weak link in concurrent programming model</p>
    <p>Cant make consistent updates to system resources across multiple system calls  Race conditions for resources such as the file</p>
    <p>system  No simple work-around</p>
    <p>Applications cant express consistency requirements</p>
    <p>OS cant infer requirements</p>
  </div>
  <div class="page">
    <p>System transactions 3</p>
    <p>System transactions ensure consistent updates by concurrent applications  Prototype called TxOS</p>
    <p>Solve problems  System level race conditions (TOCTTOU)</p>
    <p>Build better applications  LDAP directory server  Software installation</p>
  </div>
  <div class="page">
    <p>System-level races</p>
    <p>if(access(foo)) {</p>
    <p>fd = open(foo); write(fd,);  }</p>
    <p>(root)</p>
    <p>foo == /etc/passwd</p>
    <p>Time-of-check-to-time-of-use (TOCTTOU) race condition</p>
  </div>
  <div class="page">
    <p>TOCTTOU race eliminated</p>
    <p>sys_xbegin(); if(access(foo)) { fd = open(foo); write(fd,);  } sys_xend();</p>
    <p>(root)</p>
  </div>
  <div class="page">
    <p>How to make consistent updates to stable storage?</p>
    <p>DatabaseDatabase</p>
    <p>rename()rename()</p>
    <p>Sys TxSys Tx</p>
    <p>Example 1: better application design 6</p>
    <p>Application Technique</p>
    <p>Edito r</p>
    <p>User directory service (LDAP)</p>
    <p>Enterprise data storage</p>
    <p>??? ?</p>
    <p>Simple</p>
    <p>Complex</p>
  </div>
  <div class="page">
    <p>Ex 2: transactional software install</p>
    <p>sys_xbegin();</p>
    <p>apt-get upgrade</p>
    <p>sys_xend();</p>
    <p>A failed install is automatically rolled back  Concurrent, unrelated operations are</p>
    <p>unaffected  System crash: reboot to entire upgrade or</p>
    <p>none</p>
  </div>
  <div class="page">
    <p>System transactions</p>
    <p>Simple API: sys_xbegin, sys_xend, sys_xabort  Transaction wraps group of system calls</p>
    <p>Results isolated from other threads until commit  Transactions execute concurrently for</p>
    <p>performance  Conflicting transactions must serialize for</p>
    <p>safety  Conflict most often read &amp; write of same datum  Too much serialization hurts performance</p>
  </div>
  <div class="page">
    <p>Related work 9</p>
    <p>Developers changing syscall API for concurrency  Ad hoc, partial solutions: openat(), etc.</p>
    <p>System transactions have been proposed and built  QuickSilver [SOSP 91], LOCUS [SOSP 85]</p>
    <p>Key contribution: new design and implementation  Uphold strong guarantees and good performance</p>
    <p>System transactions != transactional memory  TxOS runs on commodity hardware</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Example uses of system transactions  TxOS design and implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Building a transactional system</p>
    <p>Version management  Private copies instead of undo log</p>
    <p>Detect conflicts  Minimize performance impact of true</p>
    <p>conflicts  Eliminate false conflicts</p>
    <p>Resolve conflicts  Non-transactional code must respect</p>
    <p>transactional code</p>
  </div>
  <div class="page">
    <p>TxOS in action 12</p>
    <p>CPU 0 (low priority) sys_xbegin(); chmod(f, 0x755); sys_xend();</p>
    <p>CPU 0 (low priority) sys_xbegin(); chmod(f, 0x755); sys_xend();</p>
    <p>CPU 1 (high priority) sys_xbegin(); chown(f, 1001); sys_xend();</p>
    <p>CPU 1 (high priority) sys_xbegin(); chown(f, 1001); sys_xend();</p>
    <p>Inode f Header</p>
    <p>Private Copies Private Copies</p>
    <p>Inode f Data</p>
    <p>Conflicti ng</p>
    <p>Annotati on</p>
    <p>Conflicti ng</p>
    <p>Annotati on</p>
    <p>Contention Mgr.</p>
    <p>Contention Mgr.</p>
    <p>Abort CPU 0 (lower</p>
    <p>prio)</p>
    <p>Abort CPU 0 (lower</p>
    <p>prio)</p>
    <p>Inode f Data</p>
  </div>
  <div class="page">
    <p>System comparison 13</p>
    <p>Previous Systems</p>
    <p>TxOS</p>
    <p>Speculative write location Isolation mechanism Rollback mechanism Commit mechanism</p>
    <p>Deadlock proneDeadlock prone</p>
    <p>Can cause priority</p>
    <p>inversion</p>
    <p>Can cause priority</p>
    <p>inversion</p>
    <p>Shared data structures</p>
    <p>Two-phase locking</p>
    <p>Undo log</p>
    <p>Discard undo log, release locks</p>
    <p>Private copies of data structures Private copies + annotationsDiscard private copies Publish private copy by ptr swap</p>
  </div>
  <div class="page">
    <p>R Add/D el</p>
    <p>Add/Del+ R</p>
    <p>R</p>
    <p>Add/Del</p>
    <p>Add/Del+ R</p>
    <p>R W</p>
    <p>R</p>
    <p>W</p>
    <p>Minimizing false conflicts 14</p>
    <p>sys_xbegin(); create(/tmp/foo); sys_xend();</p>
    <p>sys_xbegin(); create(/tmp/bar); sys_xend();</p>
    <p>Insight: object semantics allow more permissive conflict definition and therefore more concurrency</p>
    <p>TxOS supports precise conflict definitions per object type</p>
    <p>Increases concurrency without relaxing isolation</p>
    <p>R Add/De l</p>
    <p>R</p>
    <p>Add/De l</p>
    <p>OK if different</p>
    <p>files created,</p>
    <p>Dir not read</p>
    <p>OK if different</p>
    <p>files created,</p>
    <p>Dir not read</p>
  </div>
  <div class="page">
    <p>Serializing transactions and nontransactions (strong isolation)</p>
    <p>TxOS mixes transactional and non-tx code  In database, everything is transaction  Semantically murky in historical systems</p>
    <p>Critical to correctness  Allows incremental adoption of transactions  TOCTTOU attacker will not use a transaction</p>
    <p>Problem: cant roll back non-transactional syscall  Always aborting transaction undermines</p>
    <p>fairness</p>
  </div>
  <div class="page">
    <p>Strong isolation in TxOS 16</p>
    <p>CPU 0</p>
    <p>symlink(/etc/passwd, /tmp/foo);</p>
    <p>CPU 0</p>
    <p>symlink(/etc/passwd, /tmp/foo);</p>
    <p>CPU 1 sys_xbegin(); if(access(/tmp/foo)) open(/tmp/foo); sys_xend();</p>
    <p>CPU 1 sys_xbegin(); if(access(/tmp/foo)) open(/tmp/foo); sys_xend();</p>
    <p>Dentry /tmp/foo Header</p>
    <p>Dentry /tmp/foo Data</p>
    <p>Conflicti ng</p>
    <p>Annotati on</p>
    <p>Conflicti ng</p>
    <p>Annotati on</p>
    <p>Options:  Abort CPU1  Deschedule</p>
    <p>CPU0</p>
    <p>Contention Manager</p>
    <p>Contention Manager</p>
  </div>
  <div class="page">
    <p>Transactions for application state 17</p>
    <p>System transactions only manage system state</p>
    <p>Applications can select their approach  Copy-on-write paging  Hardware or Software Transactional</p>
    <p>Memory (TM)  Application-specific compensation code</p>
  </div>
  <div class="page">
    <p>Transactions: a core OS abstraction 18</p>
    <p>Easy to make kernel subsystems transactional</p>
    <p>Transactional filesystems in TxOS  Transactions implemented in VFS or higher  FS responsible for atomic updates to stable</p>
    <p>store  Journal + TxOS = Transactional</p>
    <p>Filesystem  1 developer-month transactional ext3</p>
    <p>prototype</p>
  </div>
  <div class="page">
    <p>Evaluation 19</p>
    <p>Example uses of system transactions  TxOS design and implementation  Evaluation</p>
    <p>What is the cost of using transactions?  What overheads are imposed on non</p>
    <p>transactional applications?</p>
  </div>
  <div class="page">
    <p>TxOS Prototype 20</p>
    <p>Extend Linux 2.6.22 to support system transactions  Add 8,600 LOC to Linux  Minor modifications to 14,000 LOC</p>
    <p>Runs on commodity hardware  Transactional semantics for a range of</p>
    <p>resources:  File system, signals, processes, pipes</p>
  </div>
  <div class="page">
    <p>Hardware and benchmarks 21</p>
    <p>Quadcore 2.66 GHz Intel Core 2 CPU, 4 GB RAM Benchmark Description</p>
    <p>install install of svn 1.4.4</p>
    <p>make Compile nano 2.06 inside a tx</p>
    <p>dpkg dpkg install OpenSSH 4.6</p>
    <p>LFS large/small</p>
    <p>Wrap each phase in a tx</p>
    <p>RAB Reimplemeted Andrew Benchmark Each phase in a tx</p>
  </div>
  <div class="page">
    <p>Transactional software install</p>
    <p>A failed install is automatically rolled back  Concurrent, unrelated operations are unaffected</p>
    <p>System crash: reboot to entire upgrade or none</p>
    <p>sys_xbegin(); dpkg i openssh; sys_xend();</p>
    <p>sys_xbegin(); install svn; sys_xend();</p>
  </div>
  <div class="page">
    <p>Transaction overheads 23</p>
    <p>LFS Large Read Rnd</p>
    <p>LFS Small Read</p>
    <p>LFS Small Delete</p>
    <p>make</p>
    <p>dpkg</p>
    <p>install</p>
    <p>Execution Time Normalized to Linux</p>
    <p>Memory overheads on LFS large:  13% high, 5% low (kernel)</p>
  </div>
  <div class="page">
    <p>Write speedups 24</p>
    <p>LFS S Create</p>
    <p>LFS L Write Seq</p>
    <p>LFS L Write Rand</p>
    <p>RAB mkdir</p>
    <p>RAB cp</p>
    <p>Speedup over Linux</p>
    <p>Better I/O scheduling  not luck  Tx boundaries provide I/O scheduling hint to OS</p>
  </div>
  <div class="page">
    <p>Lightweight DB alternative 25</p>
    <p>OpenLDAP directory server  Replace BDB backend with transactions +</p>
    <p>flat files  2-4.2x speedup on write-intensive</p>
    <p>workloads  Comparable performance on read-only</p>
    <p>workloads  Primarily serviced from memory cache</p>
    <p>rename ()</p>
    <p>rename () Databases</p>
    <p>DatabasesSys TxSys Tx</p>
  </div>
  <div class="page">
    <p>Non-transactional overheads 26</p>
    <p>Non-transactional Linux compile: &lt;2% on TxOS  Transactions are pay-to-play</p>
    <p>Single system call: 42% geometric mean  With additional optimizations: 14%</p>
    <p>geomean  Optimizations approximated by eliding</p>
    <p>checks</p>
  </div>
  <div class="page">
    <p>What is practical? 27</p>
    <p>Feature creep over 2 years costs 16%  Developers are willing to give up performance for</p>
    <p>useful features  Transactions are in same range (14%), more powerful</p>
  </div>
  <div class="page">
    <p>OSes should support transactions  Practical implementation techniques for</p>
    <p>modern OS  Transactions solve long-standing problems</p>
    <p>Replace ad hoc solutions  Transactions enable better concurrent</p>
    <p>programs</p>
    <p>http://www.cs.utexas.edu/~porterde/txos porterde@cs.utexas.edu</p>
  </div>
  <div class="page">
    <p>Backup Slides 29</p>
  </div>
  <div class="page">
    <p>Windows kernel transaction manager 30</p>
    <p>Framework for 2-Phase Commit  Coordinate transactional file system, registry</p>
    <p>Transactional FS and registry  Completely different implementation  FS updates in place, Registry uses private copies  Little opportunity for code reuse across subsystems</p>
    <p>Explicitly transacted code  More conservative, limited design choice  TxOS allows implicit transactions, application</p>
    <p>wrappers</p>
  </div>
  <div class="page">
    <p>Distributed transactions 31</p>
    <p>User/language-level transactions  Cannot isolate OS managed resources</p>
    <p>TABS [SOSP 85], Argus [SOSP 87], Sinfonia [SOSP 07]</p>
    <p>TABS  transactional windows manager  Grayed out aborted dialog</p>
    <p>Argus  similar strategies for limiting false conflicts</p>
  </div>
  <div class="page">
    <p>Transactional file systems 32</p>
    <p>Good idea, difficult to implement  Challenging to implement below VFS layer  Valor [FAST 09] introduces OS support in</p>
    <p>page cache  Lack simple abstractions</p>
    <p>Users must understand implementation details  Deadlock detection (Transactional NTFS)  Logging and locking mechanism (Valor)</p>
    <p>Lack support for other OS resources in transactions  Windows KTM supports transactional</p>
    <p>registry</p>
  </div>
  <div class="page">
    <p>Speculator 33</p>
    <p>Goal: hide latency of operations  NFS client requests, synchronous writes,</p>
    <p>etc.  Similar implementation at points  Different goals, not sufficient to provide</p>
    <p>transactional semantics  Isolation vs. dependences</p>
  </div>
  <div class="page">
    <p>xCalls [EuroSys 09] 34</p>
    <p>User-level techniques for transactional system calls  Within a single application only</p>
    <p>Works for many common cases (buffering writes)  Edge cases difficult without system support</p>
    <p>E.g., close() or munmap() can implicitly delete a file</p>
  </div>
</Presentation>
