<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FStream: Managing Flash Streams</p>
    <p>in the File System</p>
    <p>Eunhee Rho, Kanchan Joshi, Seung-Uk Shin, Nitesh Jagadeesh Shetty, Joo-Young Hwang, Sangyeun Cho, Daniel DG Lee, Jaeheon Jeong</p>
    <p>Memory Division, Samsung Electronics Co., Ltd.</p>
  </div>
  <div class="page">
    <p>Table of Contents</p>
    <p>Flash-based SSDs</p>
    <p>Garbage Collection &amp; WAF</p>
    <p>Multi-stream</p>
    <p>FStream</p>
    <p>Workload Analysis &amp; Experimental Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Flash-based Solid State Drives  Replacement of HDDs</p>
    <p>Flash Translation Layer (FTL) allows SSDs to maintain traditional block interface</p>
    <p>Application</p>
    <p>OS</p>
    <p>File System</p>
    <p>Application</p>
    <p>OS</p>
    <p>File System</p>
    <p>HDD SSD</p>
    <p>Block Layer Block Layer</p>
    <p>Common Interface</p>
    <p>Faster</p>
    <p>Energy Efficient</p>
    <p>More Reliable</p>
    <p>FTL</p>
  </div>
  <div class="page">
    <p>Garbage Collection &amp; WAF  Garbage Collection (GC) Overheads</p>
    <p>Reclaiming space for empty blocks requires valid page copy</p>
    <p>Media write amplified due to garbage collection</p>
    <p>Shortens SSD lifetime and hampers performance</p>
    <p>Write Amplification Factor (WAF)</p>
    <p>Ratio of the actual media writes to the user I/O</p>
  </div>
  <div class="page">
    <p>Multi-stream  Managing data placement on a SSD with streams</p>
    <p>Mapping data to separate stream by their life expectancy</p>
    <p>Standardization status</p>
    <p>T10 (SCSI) standard &amp; NVME 1.3 directives</p>
  </div>
  <div class="page">
    <p>Multi-stream Contd  Data Placement Comparison</p>
    <p>H1</p>
    <p>C1</p>
    <p>H2</p>
    <p>C2</p>
    <p>C3</p>
    <p>H3</p>
    <p>H4</p>
    <p>C4</p>
    <p>Writes =</p>
    <p>H1, C1, H2, C2,</p>
    <p>C3, H3, H4, C4</p>
    <p>H1</p>
    <p>C1</p>
    <p>H2</p>
    <p>C2</p>
    <p>C3</p>
    <p>H3</p>
    <p>H4</p>
    <p>C4</p>
    <p>H1</p>
    <p>H2</p>
    <p>H4</p>
    <p>H3</p>
    <p>H1</p>
    <p>H2</p>
    <p>H4</p>
    <p>H3</p>
    <p>C1</p>
    <p>C2</p>
    <p>C3</p>
    <p>C4</p>
    <p>New Writes =</p>
    <p>H1, H2, H3, H4</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>H4</p>
    <p>C1</p>
    <p>C2</p>
    <p>C3</p>
    <p>C4</p>
    <p>Stream = X Stream = Y</p>
    <p>Stream = Y</p>
    <p>H1</p>
    <p>H2</p>
    <p>H4</p>
    <p>H3</p>
    <p>Stream = X</p>
    <p>Conventional SSD Multi-streamed SSD</p>
    <p>Free Space Fragmentation!</p>
    <p>Valid page copy required to reclaim the free space.</p>
    <p>Return to free block</p>
  </div>
  <div class="page">
    <p>FStream  Motivation</p>
    <p>We need easier, general method of stream assignment.</p>
    <p>Block device layer has limited information about data lifetime.</p>
    <p>File system metadata has different lifetime from user data, need be separated.</p>
    <p>Our Approach</p>
    <p>File system level stream assignment.</p>
    <p>Separate streams for file system metadata, journal, and user data.</p>
    <p>Implemented FStream in existing file systems.</p>
    <p>[1]</p>
    <p>[2]</p>
    <p>[1] Kang, JU et al., The Multi-streamed Solid-State Drive, HotStorage 14 [2] Yang, Jingpei et al., AutoStream: automatic stream management for multi-streamed SSDs, SYSTOR 17</p>
  </div>
  <div class="page">
    <p>EXT4 metadata and journaling</p>
    <p>EXT4 on-disk layout: block groups with data and metadata related to it</p>
    <p>EXT4 journal: write ordering in data=ordered mode</p>
    <p>Ext4</p>
  </div>
  <div class="page">
    <p>Ext4Stream  Mount options</p>
    <p>Journal-stream</p>
    <p>Separate journal writes</p>
    <p>Inode-stream</p>
    <p>Separate inode writes</p>
    <p>Dir-stream</p>
    <p>Separate directory blocks</p>
    <p>Misc-stream</p>
    <p>Inode/block bitmap and group-descriptor</p>
    <p>Fname-stream</p>
    <p>Distinct stream to file(s) with specific names</p>
    <p>Extn-stream</p>
    <p>File-extension based stream</p>
  </div>
  <div class="page">
    <p>XFS  XFS metadata and journaling</p>
    <p>Parallel metadata operations, metadata buffering (page cache not used)</p>
    <p>Mixture of logical and physical journaling</p>
    <p>Minimum inode update size is a chunk of 64 inodes.</p>
  </div>
  <div class="page">
    <p>XFStream  Mount options</p>
    <p>Log-stream</p>
    <p>Separate journal writes</p>
    <p>Inode-stream</p>
    <p>Separate inode writes</p>
    <p>Fname-stream</p>
    <p>Distinct stream to file(s) with specific names</p>
  </div>
  <div class="page">
    <p>Application Specific Data Separation</p>
    <p>Upon Write Request..</p>
    <p>flushed to SSTable</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1 K1 K2</p>
    <p>SSTable 2 K1 K3</p>
    <p>SSTable 3 K2 K3</p>
    <p>SSTable 4 K1 K3</p>
    <p>SSTable 5 K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>F lu</p>
    <p>sh in</p>
    <p>g</p>
    <p>Write</p>
    <p>Request</p>
    <p>Stream for Cassandras commit log file.</p>
    <p>Fname_stream option: commitlog-*</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>OS:</p>
    <p>Linux kernel v4.5 with io-streamid support</p>
    <p>System:</p>
    <p>Dell PowerEdge R720 server with 32 cores and 32GB memory</p>
    <p>SSD:</p>
    <p>Samsung PM963 480GB with streams support</p>
    <p>Benchmarks:</p>
    <p>Filebench: Varmail &amp; Fileserver</p>
    <p>YCSB on Cassandra</p>
  </div>
  <div class="page">
    <p>Filebench Workload Analysis  Varmail</p>
    <p>Fileserver</p>
    <p>Journal 61.0%</p>
    <p>Inode 8.0%</p>
    <p>Directory 4.0%</p>
    <p>Other meta 0.2%</p>
    <p>Data 26.8%</p>
    <p>EXT4</p>
    <p>Journal 60% Inode</p>
    <p>Data 31%</p>
    <p>XFS</p>
    <p>Inode 21.0% Directory</p>
    <p>Other meta 0.2%</p>
    <p>Data 63.0%</p>
    <p>EXT4 No Journal</p>
    <p>Journal 26%</p>
    <p>Inode 16%</p>
    <p>Directory 3%</p>
    <p>Other meta 0%</p>
    <p>Data 55%</p>
    <p>EXT4</p>
    <p>Journal 16%</p>
    <p>Inode 32%</p>
    <p>Data 52%</p>
    <p>XFS Workload Conditions - Filled 80% of disk before test</p>
    <p>- Number of test files: 900,000 (14GB)</p>
    <p>- Varmail : fsync-intensive</p>
    <p>- Runtime: 2 hours</p>
    <p>XFS writes more inodes (random writes) than Ext4.</p>
  </div>
  <div class="page">
    <p>Filebench: Performance  Fstream achieved 5 ~ 35% performance improvements.</p>
    <p>Ext4</p>
    <p>Ext4Stream</p>
    <p>Ext4-NJ</p>
    <p>Ext4Stream-NJ</p>
    <p>XFS</p>
    <p>XFStream</p>
    <p>Ext4</p>
    <p>Ext4Stream</p>
    <p>XFS</p>
    <p>XFStream</p>
    <p>O p s/</p>
    <p>se c</p>
    <p>O p s/</p>
    <p>se c</p>
    <p>Varmail Fileserver</p>
  </div>
  <div class="page">
    <p>Filebench: WAF</p>
    <p>Ext4</p>
    <p>Ext4Stream</p>
    <p>Ext4-NJ</p>
    <p>Ext4Stream-NJ</p>
    <p>XFS</p>
    <p>XFStream</p>
    <p>Ext4</p>
    <p>Ext4Stream</p>
    <p>XFS</p>
    <p>XFStream</p>
    <p>W A</p>
    <p>F</p>
    <p>W A</p>
    <p>F</p>
    <p>Varmail Fileserver</p>
    <p>Fstream achieved WAF of close to one.</p>
    <p>Ext4s WAF &lt; Ext4NJs WAF</p>
    <p>Journal is written in a circular fashion, so is invalidated periodically.</p>
  </div>
  <div class="page">
    <p>YCSB on Cassandra Results  Data intensive workload</p>
    <p>Load phase: 1KB record x 120 million inserts</p>
    <p>Run phase: 1KB record x 80 million inserts</p>
    <p>Ext4</p>
    <p>Ext4Stream</p>
    <p>XFS</p>
    <p>XFStream</p>
    <p>Ext4</p>
    <p>Ext4Stream</p>
    <p>XFS</p>
    <p>XFStream</p>
    <p>O p s/</p>
    <p>se c</p>
    <p>W A</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Conclusion and Acknowledgements  SSD Performance &amp; Lifetime</p>
    <p>The less FTL garbage collection overheads, the longer SSD lives and the faster SSD performs.</p>
    <p>Streams: SSD interface for separating data with different lifetimes</p>
    <p>FStream: stream assignment in file system</p>
    <p>Separate streams for file system metadata, journal, and user data.</p>
    <p>Provide filename and extension based user data separation.</p>
    <p>Achieved 5~35% performance improvement and near 1 WAF for filebench.</p>
    <p>Acknowledgements</p>
    <p>We thank Cristian Ungureanu, our shepherd, and anonymous reviewers for their feedbacks.</p>
  </div>
  <div class="page">
    <p>T H A N K</p>
    <p>Y O U</p>
  </div>
</Presentation>
