<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rethinking Adaptability in Wide-Area Stream Processing Systems</p>
    <p>Albert Jonathan, Abhishek Chandra, Jon Weissman</p>
    <p>University of Minnesota - Twin Cities</p>
  </div>
  <div class="page">
    <p>Wide-Area Streaming Analytics</p>
    <p>Lots of data are continuously born geo-distributed o CDN log updates</p>
    <p>o Microblogs from social network apps</p>
    <p>o Sensor readings from IoT</p>
    <p>Applications: o Monitoring CDN logs for Internet services</p>
    <p>o Global trend detection</p>
    <p>o Monitoring video surveillance</p>
    <p>AWS global infrastructure map</p>
  </div>
  <div class="page">
    <p>Geo-Distributed System Model</p>
    <p>Main challenges in wide-area data analytics o Limited WAN bandwidth (10s MBps)</p>
    <p>o Highly heterogeneous links (&gt;20X)</p>
    <p>o Expensive WAN bandwidth ($$$)</p>
    <p>Central aggregation is wasteful</p>
    <p>GDA systems span multiple sites o High performance  locality execution &amp; data pre-processing</p>
    <p>GDA System</p>
  </div>
  <div class="page">
    <p>Deploying Stream Queries in Wide Area SELECT  FROM  WHERE  GROUP BY  INTERVAL</p>
    <p>Submitted Query</p>
    <p>!</p>
    <p>! ! Logical Plan</p>
    <p>Physical Plan / Dataflow Program</p>
    <p>Runtime Environment</p>
    <p>DC 1 DC 2 Edge 1 Edge 2</p>
    <p>Parse a query into a DAG of operators</p>
    <p>Query Optimizer generates optimal plan  Operator orders  Parallelism  Locality</p>
    <p>Job Scheduler schedules and deploys tasks</p>
    <p>workload &amp; environment-dependent Source</p>
    <p>Map</p>
    <p>Source</p>
    <p>Map</p>
    <p>SourceJoin</p>
    <p>WindowReduceProject</p>
    <p>Source</p>
    <p>Map</p>
    <p>Source</p>
    <p>Map</p>
    <p>Query Optimizer &amp; Scheduler need WAN-awareness</p>
    <p>wide area is highly dynamic (5~10mins)  need to adapt</p>
  </div>
  <div class="page">
    <p>Adaptability in Wide-Area Stream Processing Systems</p>
    <p>Scale Up/Down o Increase/decrease task parallelism within a site</p>
    <p>o Provision more nodes to handle computing bottleneck</p>
    <p>Scale Out/In o Increase/decrease task parallelism across sites o Distribute workload across sites to handle WAN bottleneck</p>
    <p>Query Re-planning o Change logical query execution plan o Avoid WAN bandwidth contention</p>
  </div>
  <div class="page">
    <p>Scale Out/In in Wide-Area Settings</p>
    <p>Site CSite BSite A Site D</p>
    <p>The optimal physical execution depends on WAN condition</p>
    <p>overloaded</p>
    <p>Site E</p>
    <p>overloaded</p>
    <p>OUTIN</p>
    <p>Sources</p>
    <p>Intermediate ops</p>
    <p>Sinks</p>
  </div>
  <div class="page">
    <p>Scale Out/In in Wide-Area Settings</p>
    <p>Where to scale? o EC2: inter-site bandwidth within-region = ~5X compared to inter-region</p>
    <p>How to partition the streams across WAN? o Need to consider WAN bandwidth heterogeneity and availability</p>
    <p>When to scale? o Application specific (e.g., min. tolerable delay, throughput threshold)</p>
  </div>
  <div class="page">
    <p>Scale Out: Preliminary Experiment  Top-K tending topic on Twitter trace (~8000 tweets/sec) distributed based on locations  Varying network load by 10%-30%  scale when throughput &lt; 5000 tweets/sec</p>
    <p>Oracle</p>
    <p>Static with 2x nodes</p>
    <p>A ve</p>
    <p>. T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>(r</p>
    <p>e c</p>
    <p>o rd</p>
    <p>s/ se</p>
    <p>c )</p>
    <p>Time (mm:ss)</p>
    <p>Ideal Static Static-2 Scale Out</p>
  </div>
  <div class="page">
    <p>The optimal logical plan depends on WAN condition</p>
    <p>Query Re-Planning</p>
    <p>PLAN 1: WAN Consumption:</p>
    <p>Site B</p>
    <p>Site C</p>
    <p>!C src-C</p>
    <p>!ABC</p>
    <p>!B src-B</p>
    <p>!AB</p>
    <p>Site A</p>
    <p>!A src-A</p>
    <p>BW &lt; 10 MBps</p>
    <p>PLAN 2: WAN Consumption:</p>
    <p>Site B</p>
    <p>Site C</p>
    <p>Site A</p>
    <p>!B src-B</p>
    <p>!A src-A</p>
    <p>!ABC</p>
    <p>!C src-C</p>
    <p>!BC</p>
  </div>
  <div class="page">
    <p>Re-Planning: Preliminary Experiment</p>
    <p>Same setup as the previous result  1 query, 4 plans: different aggregation orders</p>
    <p>A ve</p>
    <p>ra g</p>
    <p>e T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(r e</p>
    <p>c o</p>
    <p>rd s/</p>
    <p>se c</p>
    <p>)</p>
    <p>Time (mm:ss)</p>
    <p>Plan 1 Plan 2 Plan 3 Plan 4</p>
  </div>
  <div class="page">
    <p>Scale Out vs. Query Re-Planning</p>
    <p>When to scale out/in and when to re-plan? o Type of operators (stateful, commutative)</p>
    <p>o Type of dynamics (short/long term)</p>
    <p>o Environment (node, bandwidth availability)</p>
    <p>Case-1 Case-2 Case-3</p>
    <p>A ve</p>
    <p>ra g</p>
    <p>e T</p>
    <p>hr o</p>
    <p>ug hp</p>
    <p>ut</p>
    <p>(r e</p>
    <p>c o</p>
    <p>rd s/</p>
    <p>se c</p>
    <p>)</p>
    <p>Static Scale Out Re-Plan</p>
    <p>Both work fine Scale out: No nearby site Scale out: better load distribution</p>
  </div>
  <div class="page">
    <p>Conclusion &amp; Next Steps</p>
    <p>Scale out and re-planning can be adapted to handle WAN dynamics  Scale out/in changes physical executions  Query re-planning changes logical executions</p>
    <p>Scale out vs. re-planning vs. approximation</p>
    <p>Adaptability to optimize multiple concurrent streaming analytics queries in wide-area</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
</Presentation>
