<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hypervisor Introspection: A Technique for Evading Passive Virtual Machine Monitoring</p>
    <p>Gary Wang1,2, Zachary J. Estrada1, Cuong Pham1, Zbigniew Kalbarczyk1, Ravishankar K. Iyer1</p>
    <p>USENIX WOOT 15</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Motivation and goals</p>
    <p>Identifying and exploiting a side-channel</p>
    <p>Example attacks</p>
    <p>Defenses</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Security in the cloud, especially Infrastructure-as-a</p>
    <p>Service (IaaS)</p>
    <p>Isolation in virtualized environments enables the cloud</p>
    <p>Do current techniques do enough to protect these</p>
    <p>environments?</p>
  </div>
  <div class="page">
    <p>Virtual machine introspection (VMI)</p>
    <p>Lets put security monitoring in the hypervisor!</p>
    <p>Can observe guest VMs hardware state</p>
    <p>Active and passive monitoring</p>
    <p>This is not about the semantic gap problem</p>
  </div>
  <div class="page">
    <p>What we want to know</p>
    <p>Can we detect hypervisor-level monitoring from within the</p>
    <p>guest VM?</p>
    <p>Hypervisor introspection (HI)</p>
    <p>If we can detect hypervisor-level monitoring, can we evade</p>
    <p>it?</p>
  </div>
  <div class="page">
    <p>Finding the side-channel</p>
    <p>Hypervisor activity suspends VM, which pauses all VM</p>
    <p>activity</p>
    <p>Duration of VM suspend is duration of hypervisor activity</p>
    <p>VM suspend side-channel</p>
  </div>
  <div class="page">
    <p>How do we detect VM suspends?</p>
  </div>
  <div class="page">
    <p>How do we detect VM suspends?</p>
    <p>Focus on host-based measurements</p>
    <p>Time frequently occurring events:</p>
    <p>Disk reads</p>
    <p>Process scheduling</p>
    <p>Other possible events</p>
  </div>
  <div class="page">
    <p>How do we detect VM suspends?</p>
    <p>Leverage kernel probes (kprobes) to hook into relevant</p>
    <p>kernel functions</p>
    <p>sys_read</p>
    <p>schedule</p>
    <p>Utilize special kprobes (jprobes) to implement our timing</p>
    <p>functionality</p>
  </div>
  <div class="page">
    <p>Whats a jprobe?</p>
  </div>
  <div class="page">
    <p>Our jprobe handler</p>
    <p>Calls do_gettimeofday and takes the difference with</p>
    <p>most recent timestamp</p>
    <p>Trigger alarm if difference is greater than threshold value of</p>
  </div>
  <div class="page">
    <p>HI kernel module output</p>
  </div>
  <div class="page">
    <p>Limitations of HI</p>
    <p>Accuracy of measurements</p>
    <p>Accurate up to polling rate of 10 Hz (check every 0.1s)</p>
    <p>Threshold for determining VM suspends</p>
    <p>Requires empirical testing, but there is some leniency</p>
  </div>
  <div class="page">
    <p>How do we use HI?</p>
    <p>Additional reconnaissance for attackers</p>
    <p>Hide malicious activity from a passive VMI system</p>
  </div>
  <div class="page">
    <p>Attack model and assumptions</p>
    <p>Insider threat model</p>
    <p>Attacker has root, but wishes to maintain presence on virtual</p>
    <p>systems after leaving</p>
    <p>VMI system checks for bad network connections</p>
    <p>No other monitoring systems</p>
  </div>
  <div class="page">
    <p>Large file transfer</p>
    <p>Attackers typically exfiltrate data out of the network</p>
    <p>Large files being exfiltrated will be detected by VMI</p>
    <p>Evade VMI by splitting the file up into smaller chunks</p>
  </div>
  <div class="page">
    <p>File transfer without HI</p>
  </div>
  <div class="page">
    <p>File transfer with HI</p>
  </div>
  <div class="page">
    <p>Large file transfer</p>
    <p>Python script transfers a chunk of the file each time its</p>
    <p>called</p>
    <p>Script called from kernel using call_usermodehelper</p>
    <p>Use HI to time calls to occur right after VMI check</p>
  </div>
  <div class="page">
    <p>Polling rate effects</p>
    <p>File transfer time depends on polling rate</p>
    <p>One chunk is transferred after each monitoring check</p>
    <p>But can change chunk size</p>
    <p>Chunk size/transfer time versus detection tradeoff</p>
  </div>
  <div class="page">
    <p>Backdoor shell</p>
    <p>Maintain access to system with backdoor</p>
    <p>Nave backdoor that listens for connections is detected by</p>
    <p>VMI</p>
    <p>Evade VMI by having VM connect back to attacker between</p>
    <p>monitoring checks</p>
  </div>
  <div class="page">
    <p>Command cycle</p>
  </div>
  <div class="page">
    <p>Command output latency</p>
    <p>Depends on polling frequency in similar manner to file transfer</p>
    <p>attack</p>
    <p>Command cycle steps occur between monitoring checks, so</p>
    <p>fewer monitoring checks lead to increased latency</p>
    <p>Attacker may batch commands to mitigate this somewhat</p>
  </div>
  <div class="page">
    <p>Possible defenses against HI</p>
    <p>Add noise to VM clocks</p>
    <p>Previous work has used virtual clock to hide activity</p>
    <p>Real time requirements may not allow this</p>
    <p>Randomized monitoring interval</p>
    <p>Pretty good at detecting file transfer (70% success)</p>
    <p>Does not catch backdoor shell</p>
  </div>
  <div class="page">
    <p>Possible defenses against HI</p>
    <p>Force processes to run for certain amount of time before</p>
    <p>scheduling</p>
    <p>Can observe other OS operations (network activity or memory</p>
    <p>allocation)</p>
    <p>Non-blocking monitoring check</p>
    <p>VMI may not always provide correct information</p>
  </div>
  <div class="page">
    <p>Proposed defenses against HI</p>
    <p>Virtual clock that only skews during VMI check</p>
    <p>Hide the VM suspend with skew/catchup</p>
    <p>Maintain real time requirement</p>
    <p>Use active VMI!</p>
    <p>Hard for HI to predict when checks occur, and monitoring is more</p>
    <p>targeted</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Virtualization cannot perfectly isolate everything</p>
    <p>Passive VMI has some inherent weaknesses that can be</p>
    <p>avoided with active monitoring</p>
  </div>
  <div class="page">
    <p>Acknowledgments</p>
    <p>Advisors:</p>
    <p>Professor Zbigniew Kalbarczyk and Professor Ravi Iyer</p>
    <p>Colleagues:</p>
    <p>Zak Estrada and Cuong Pham</p>
    <p>Funding:</p>
    <p>Illinois Cyber Security Scholars Program</p>
    <p>Air Force Research Laboratory</p>
    <p>MIT Lincoln Laboratory</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
