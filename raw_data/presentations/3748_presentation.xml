<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Computer Security Laboratory</p>
    <p>THE OHIO STATE UNIVERSITY</p>
    <p>TxSpector: Uncovering Attacks in Ethereum from Transactions</p>
    <p>Mengya Zhang, Xiaokuan Zhang, Yinqian Zhang, Zhiqiang Lin</p>
    <p>USENIX Security 2020</p>
  </div>
  <div class="page">
    <p>Motivations (1/3) - Deployed Smart Contracts are Immutable</p>
    <p>deploy</p>
    <p>Smart ContractSmart Contract</p>
    <p>Ethereum</p>
    <p>Immutable</p>
  </div>
  <div class="page">
    <p>Motivations (2/3) - Attacks can Cause Huge Financial Losses</p>
    <p>deploy call</p>
    <p>Transaction</p>
    <p>AttackerSmart ContractSmart Contract</p>
    <p>Ethereum  sender</p>
    <p>receiver</p>
    <p>value</p>
  </div>
  <div class="page">
    <p>Motivations (3/3) - Few Works focus on Transactions</p>
    <p>Smart Contracts 1 Oyente [LCO+16]</p>
    <p>Transactions 1 Sereum [RLKD19]</p>
  </div>
  <div class="page">
    <p>Goals (1/3) - Identify Real World Attacks</p>
    <p>Transaction Our Tool</p>
    <p>input</p>
  </div>
  <div class="page">
    <p>Goals (2/3) - Generic and Logic-driven Framework</p>
    <p>Transaction Our Tool</p>
    <p>input</p>
    <p>Transaction</p>
    <p>Transaction</p>
  </div>
  <div class="page">
    <p>Goals (3/3) - Forensic Analysis of the Attacks</p>
    <p>Transaction Our Tool Report</p>
    <p>input output</p>
    <p>Transaction</p>
    <p>Transaction</p>
  </div>
  <div class="page">
    <p>Overview of TxSpector</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Trace Extractor</p>
  </div>
  <div class="page">
    <p>Detailed Design -Trace Extractor</p>
    <p>Trace Extractor</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Challenges</p>
    <p>I Extract dependencies.</p>
    <p>Solutions</p>
    <p>I Record bytecode-level traces.</p>
  </div>
  <div class="page">
    <p>Detailed Design -Trace Extractor</p>
    <p>Trace Extractor</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Challenges</p>
    <p>I Extract dependencies.</p>
    <p>Solutions</p>
    <p>I Record bytecode-level traces.</p>
  </div>
  <div class="page">
    <p>Detailed Design - Execution Flow Graph Generator</p>
    <p>Trace Extractor</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Challenges</p>
    <p>I Extract dependencies.</p>
    <p>Solutions</p>
    <p>I Construct the Execution Flow Graph.</p>
  </div>
  <div class="page">
    <p>Detailed Design - Logic Relation Builder</p>
    <p>Trace Extractor</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Challenges</p>
    <p>I Encode dependencies.</p>
    <p>Solutions</p>
    <p>I Extract logic relations.</p>
  </div>
  <div class="page">
    <p>Detailed Design - Attack Detector</p>
    <p>Trace Extractor</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Challenges</p>
    <p>I Huge transaction volumes.</p>
    <p>Solutions</p>
    <p>I Construct once, detect multiple times.</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>Dataset</p>
    <p>January 2019  February 2019</p>
    <p>Reentrancy; Unchecked Call; Suicidal</p>
  </div>
  <div class="page">
    <p>Reentrancy Attacks - An Example</p>
    <p>Victim A</p>
    <p>Call B</p>
    <p>Attacker B Victim A</p>
    <p>Call A</p>
    <p>Return</p>
    <p>Return</p>
    <p>transfer</p>
    <p>transfer</p>
  </div>
  <div class="page">
    <p>Reentrancy Attacks - An Example</p>
    <p>inconsistent state 1 read-if dependency.</p>
    <p>Victim A</p>
    <p>Call B</p>
    <p>Attacker B Victim A</p>
    <p>Call A</p>
    <p>Return Return</p>
    <p>if(user[msg.sender] &gt;= amount)</p>
    <p>read v; if(v)</p>
    <p>transfer</p>
    <p>transfer</p>
  </div>
  <div class="page">
    <p>Reentrancy Attacks - An Example</p>
    <p>inconsistent state 1 read-if dependency.</p>
    <p>Victim A</p>
    <p>Call B</p>
    <p>Attacker B Victim A</p>
    <p>Call A</p>
    <p>Return Return</p>
    <p>if(user[msg.sender] &gt;= amount)</p>
    <p>read v; if(v)</p>
    <p>transfer</p>
    <p>transfer</p>
    <p>user[msg.sender] -= amount;</p>
  </div>
  <div class="page">
    <p>Experiment Results - Reentrancy Attacks</p>
    <p>Vulnerability System # Total # Timeout</p>
    <p>or Error # Remaining # Flagged</p>
    <p>Reentrancy</p>
    <p>TxSpector 9,661,593 336,909 (3.5%) 9,321,684 3,357 Sereum 9,661,593 N/A N/A 10,278 Securify 105,535 7,541 97,994 1196 Vandal 105,535 1,431 104,104 85,721 Gigahorse 105,535 N/A N/A 3,310</p>
  </div>
  <div class="page">
    <p>Experiment Results - Compare with Other Tools</p>
    <p>Vulnerability System # Total # Timeout</p>
    <p>or Error # Remaining # Flagged</p>
    <p>Reentrancy</p>
    <p>TxSpector 9,661,593 336,909 (3.5%) 9,321,684 3,357 Sereum 9,661,593 N/A N/A 10,278 Securify 105,535 7,541 97,994 1196 Vandal 105,535 1,431 104,104 85,721 Gigahorse 105,535 N/A N/A 3,310</p>
  </div>
  <div class="page">
    <p>Forensic Analysis - NIS</p>
    <p>The number of inconsistent state (NIS)</p>
  </div>
  <div class="page">
    <p>Forensic Analysis - Top 5 Victim Smart Contracts</p>
    <p>Address NIS Count 0xdf18880a02c7f3eb4f40fdf515fce31c1cb7ef66 4,803 0x1806b3527c18fb532c46405f6f014c1f381b499a 3,815 0xd7a14019aeeba25e676a1b596bb19b6f37db74d2 2,839 0x533bafa16aa76218ec4a365ad71bf8816cf21bbb 675 0x431d77f50803d31b090e86740b1d5848af54fad0 582</p>
  </div>
  <div class="page">
    <p>Forensic Analysis - Case Study: The DAO Smart Contract</p>
    <p>NIS in reentrancy transactions on DAO</p>
    <p>lo g</p>
    <p>x C</p>
    <p>o u</p>
    <p>n t)</p>
    <p>lo g</p>
    <p>x C</p>
    <p>o u</p>
    <p>n t)</p>
    <p>Distribution of reentrancy attacks on DAO.</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Systems Tx Or</p>
    <p>der De</p>
    <p>pe nd</p>
    <p>enc e</p>
    <p>Sta te</p>
    <p>De pe</p>
    <p>nd enc</p>
    <p>e</p>
    <p>Mi sha</p>
    <p>nd led</p>
    <p>Ex cep</p>
    <p>tio n</p>
    <p>Re -en</p>
    <p>tra ncy</p>
    <p>Re str</p>
    <p>ict ed</p>
    <p>Tra nsf</p>
    <p>er</p>
    <p>Fa iled</p>
    <p>Se nd</p>
    <p>Un sec</p>
    <p>ure d B</p>
    <p>ala nce</p>
    <p>Mi sus</p>
    <p>e-o f-o</p>
    <p>rig in</p>
    <p>Int ege</p>
    <p>r O ver</p>
    <p>flo w</p>
    <p>Su icid</p>
    <p>al</p>
    <p>De nia</p>
    <p>l-o f-S</p>
    <p>erv ice</p>
    <p>Oyente [LCO+16] N N N N</p>
    <p>Zeus [KGDS18] N N N N N N N</p>
    <p>Securify [TDDC+18] N N N N</p>
    <p>Vandal [BJK+18] N N N N N</p>
    <p>Gigahorse [GBSS19] N N N</p>
    <p>Maian [NKS+18] N N</p>
    <p>Slither [FGG19] N N N N N N N</p>
    <p>Mythril [Con] N N N N N N N N</p>
    <p>EthBMC [FAH20] N N</p>
    <p>Sereum [RLKD19] F</p>
    <p>ECFChecker [GAGG+17] F</p>
    <p>TxSpector F F F F F F F F</p>
    <p>Table: N: vulnerabilities in smart contracts; F: attacks in transactions. 19 / 20</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Trace Database</p>
    <p>Execution Flow Graph Generator</p>
    <p>Execution Flow Graphs</p>
    <p>Logic Relation Builder</p>
    <p>Logic Relation</p>
    <p>Database</p>
    <p>Attack Detector</p>
    <p>Attack Report</p>
    <p>Detection Rules (Re-entrancy, Suicidal, )</p>
    <p>Trace Extractor</p>
    <p>TxSpector I Generic, logic-driven, transactions</p>
    <p>Applications</p>
    <p>I Forensic analysis</p>
    <p>Source code is available at: https://github.com/OSUSecLab/TxSpector Email: (zhang.9407, zhang.5840, zhang.834, lin.3021)@osu.edu</p>
  </div>
  <div class="page">
    <p>References I</p>
    <p>Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, Francois Gauthier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz, Vandal: A</p>
    <p>scalable security analysis framework for smart contracts, arXiv preprint arXiv:1809.03981 (2018).</p>
    <p>ConsenSys, Mythril classic, https://github.com/ConsenSys/mythril-classic.</p>
    <p>Joel Frank, Cornelius Aschermann, and Thorsten Holz, ETHBMC: A bounded model checker for smart contracts, 29th USENIX Security</p>
    <p>Symposium (USENIX Security 20), USENIX Association, 2020.</p>
    <p>Josselin Feist, Gustavo Grieco, and Alex Groce, Slither: a static analysis framework for smart contracts, 2019 IEEE/ACM 2nd International</p>
    <p>Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB), IEEE, 2019.</p>
    <p>Shelly Grossman, Ittai Abraham, Guy Golan-Gueta, Yan Michalevsky, Noam Rinetzky, Mooly Sagiv, and Yoni Zohar, Online detection of</p>
    <p>effectively callback free objects with applications to smart contracts, Proceedings of the ACM on Programming Languages (2017).</p>
    <p>Neville Grech, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis, Gigahorse: Thorough, declarative decompilation of smart contracts,</p>
    <p>International Conference on Software Engineering (ICSE), 2019.</p>
    <p>Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma, Zeus: Analyzing safety of smart contracts, Proceedings of the 25th Annual</p>
    <p>Network and Distributed System Security Symposium, 2018.</p>
    <p>Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor, Making smart contracts smarter, Proceedings of the 2016 ACM</p>
    <p>SIGSAC conference on computer and communications security, ACM, 2016.</p>
  </div>
  <div class="page">
    <p>References II</p>
    <p>Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor, Finding the greedy, prodigal, and suicidal contracts at scale,</p>
    <p>Proceedings of the 34th Annual Computer Security Applications Conference, ACM, 2018.</p>
    <p>Michael Rodler, Wenting Li, Ghassan Karame, and Lucas Davi, Sereum: Protecting existing smart contracts against re-entrancy attacks,</p>
    <p>Proceedings of the 26th Network and Distributed System Security Symposium, 2019.</p>
    <p>Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais, Florian Buenzli, and Martin Vechev, Securify: Practical security analysis</p>
    <p>of smart contracts, Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, ACM, 2018.</p>
  </div>
</Presentation>
