<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING</p>
    <p>ALEX D. BRESLOW, DONG PING ZHANG, JOSEPH L. GREATHOUSE, NUWAN JAYASENA, AND DEAN M. TULLSEN</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20162</p>
    <p>THE ROLE OF HASH TABLES IN IN-MEMORY DATA-INTENSIVE COMPUTING</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20163</p>
    <p>THE ROLE OF HASH TABLES</p>
    <p>Data stores and caches</p>
    <p>Key-value stores (e.g., Memcached, Redis, and MongoDB)</p>
    <p>Relational databases (e.g., MonetDB, HyPer, IBM DB2 with BLU)</p>
    <p>IN IN-MEMORY DATA-INTENSIVE COMPUTING</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20164</p>
    <p>THE ROLE OF HASH TABLES</p>
    <p>Data stores and caches</p>
    <p>Key-value stores (e.g., Memcached, Redis, and MongoDB)</p>
    <p>Relational databases (e.g., MonetDB, HyPer, IBM DB2 with BLU)</p>
    <p>Graphics</p>
    <p>Accelerate computations by computing on hash tables that store sparse images, textures, or surfaces</p>
    <p>IN IN-MEMORY DATA-INTENSIVE COMPUTING</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20165</p>
    <p>THE ROLE OF HASH TABLES</p>
    <p>Data stores and caches</p>
    <p>Key-value stores (e.g., Memcached, Redis, and MongoDB)</p>
    <p>Relational databases (e.g., MonetDB, HyPer, IBM DB2 with BLU)</p>
    <p>Graphics</p>
    <p>Accelerate computations by computing on hash tables that store sparse images, textures, or surfaces</p>
    <p>General data compression schemes used in common compression utilities</p>
    <p>IN IN-MEMORY DATA-INTENSIVE COMPUTING</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20166</p>
    <p>THE ROLE OF HASH TABLES</p>
    <p>Data stores and caches</p>
    <p>Key-value stores (e.g., Memcached, Redis, and MongoDB)</p>
    <p>Relational databases (e.g., MonetDB, HyPer, IBM DB2 with BLU)</p>
    <p>Graphics</p>
    <p>Accelerate computations by computing on hash tables that store sparse images, textures, or surfaces</p>
    <p>General data compression schemes used in common compression utilities</p>
    <p>In each of these fields, having a fast hash table is important.</p>
    <p>IN IN-MEMORY DATA-INTENSIVE COMPUTING</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20167</p>
    <p>FOCUS OF THIS TALK OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20168</p>
    <p>FOCUS OF THIS TALK OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 20169</p>
    <p>FOCUS OF THIS TALK OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201610</p>
    <p>FOCUS OF THIS TALK OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201611</p>
    <p>FOCUS OF THIS TALK OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201612</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201613</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201614</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201615</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201616</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201617</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201618</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
    <p>Comparatively low bandwidth and high latency per memory transaction leads to</p>
    <p>memoryboundedness.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201619</p>
    <p>FOCUS OF THIS TALK</p>
    <p>Hash tables have poor temporal and spatial locality.</p>
    <p>In-memory hash tables often have hot working sets that are bigger than LLCs.</p>
    <p>OPTIMIZING MEMORY ACCESSES IN FAST IN-MEMORY HASH TABLES</p>
    <p>MAIN</p>
    <p>MEMORY</p>
    <p>SHARED</p>
    <p>LLCs</p>
    <p>PRIVATE CACHES</p>
    <p>COMPUTE ELEMENTS</p>
    <p>Comparatively low bandwidth and high latency per memory transaction leads to</p>
    <p>memoryboundedness.</p>
    <p>We need to aggressively</p>
    <p>optimize hash tables to be</p>
    <p>cognizant of this limitation.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201620</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201621</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201622</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201623</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201624</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>Load balancing Insert KV1 into the least full candidate bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201625</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>Load balancing Insert KV1 into the least full candidate bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201626</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>KV1</p>
    <p>Load balancing Insert KV1 into the least full candidate bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201627</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>Load balancing Insert KV1 into the least full candidate bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201628</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>Load balancing Insert KV1 into the least full candidate bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201629</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201630</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>First-fit Evaluate the hash functions in numerical order and insert KV1 into the first candidate bucket with a free slot</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201631</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>First-fit Evaluate the hash functions in numerical order and insert KV1 into the first candidate bucket with a free slot</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201632</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>First-fit Evaluate the hash functions in numerical order and insert KV1 into the first candidate bucket with a free slot</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201633</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201634</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H2</p>
    <p>H1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201635</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>Discover cuckoo chain with breadth-first search</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201636</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>Discover cuckoo chain with breadth-first search</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201637</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>Discover cuckoo chain with breadth-first search</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201638</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>Discover cuckoo chain with breadth-first search</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201639</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>Discover cuckoo chain with breadth-first search</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201640</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>Discover cuckoo chain with breadth-first search Remap in sequence with alternate hash function</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201641</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>e</p>
    <p>Discover cuckoo chain with breadth-first search Remap in sequence with alternate hash function</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201642</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>Discover cuckoo chain with breadth-first search Remap in sequence with alternate hash function</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201643</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>Discover cuckoo chain with breadth-first search Remap in sequence with alternate hash function</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201644</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>Discover cuckoo chain with breadth-first search Remap in sequence with alternate hash function</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201645</p>
    <p>BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>INSERT KV2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>Discover cuckoo chain with breadth-first search Remap in sequence with alternate hash function</p>
    <p>KV1</p>
    <p>Each bucket is typically sized to one hardware cache line or less.</p>
    <p>Overwhelmingly, accesses to the buckets cache line hit in the hardware caches during accesses to consecutive cells.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201646</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>KV1</p>
    <p>LOOKUPS AND LOAD BALANCING HEURISTIC BUCKETIZED CUCKOO HASH TABLES</p>
    <p>Expected Positive Lookup Cost Per Item in Buckets: (Fraction of Items Hashed by H1) + 2 * (Fraction of Items Hashed by H2)</p>
    <p>Expected Negative Lookup Cost per Item in Buckets: 2 (also worst-case)</p>
    <p>Expected Positive Lookup Cost Per Item in Buckets: 1.5 = (0.5 Hashed by H1) + 2 * (0.5 Hashed by H2)</p>
    <p>Expected Negative Lookup Cost per Item in Buckets: 2 (also worst-case)</p>
    <p>Load balancing Insert KV1 into the least full candidate bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201647</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>H2</p>
    <p>H1</p>
    <p>INSERT KV1</p>
    <p>KEY VALUE</p>
    <p>LOOKUPS AND FIRST-FIT INSERTION HEURISTIC BUCKETIZED CUCKOO HASH TABLES</p>
    <p>First-fit Insert KV1 into the first candidate with a free slot</p>
    <p>Expected Positive Lookup Cost Per Item in Buckets: 1 to 1.3ish depending on the table load factor and the slots per bucket</p>
    <p>Expected Negative Lookup Cost per Item in Buckets: 2 (also worst-case)</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201648</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201649</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1</p>
    <p>LOOKUP KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201650</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201651</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201652</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201653</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?b</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201654</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?b</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201655</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?bc</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201656</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?bc</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201657</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H23</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?bcKV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201658</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>LOOKUP KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?bcKV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201659</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>LOOKUP KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?bcKV1</p>
    <p>Positive Lookups:</p>
    <p>First-fit gets us most of the way to 1.0 on positive lookups because most elements are hashed with H1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201660</p>
    <p>BENEFITS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>LOOKUP KV2</p>
    <p>H2</p>
    <p>H1</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1 H1</p>
    <p>LOOKUP KV1</p>
    <p>a.key == KV1.key?bcKV1</p>
    <p>Positive Lookups:</p>
    <p>First-fit gets us most of the way to 1.0 on positive lookups because most elements are hashed with H1</p>
    <p>But</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201661</p>
    <p>LIMITATIONS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H2</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201662</p>
    <p>LIMITATIONS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H2</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1</p>
    <p>Expected Negative Lookup Cost per Item in Buckets:</p>
    <p>First-fit doesnt address the comparatively expensive negative lookup cost. We still need to check all candidate buckets.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201663</p>
    <p>LIMITATIONS OF FIRST-FIT BUCKETIZED CUCKOO HASH TABLES</p>
    <p>a b c EMPTY</p>
    <p>d e f g</p>
    <p>h EMPTY EMPTY EMPTY</p>
    <p>i j k l</p>
    <p>m n o p</p>
    <p>q r s EMPTY</p>
    <p>t u v w</p>
    <p>KEY VALUE</p>
    <p>H2</p>
    <p>e</p>
    <p>m</p>
    <p>u</p>
    <p>KV2</p>
    <p>KV1</p>
    <p>H1</p>
    <p>H2</p>
    <p>LOOKUP KV3</p>
    <p>Expected Negative Lookup Cost per Item in Buckets:</p>
    <p>First-fit doesnt address the comparatively expensive negative lookup cost. We still need to check all candidate buckets.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201664</p>
    <p>HORTON TABLES DESIGN GOALS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201665</p>
    <p>HORTON TABLES</p>
    <p>Positive lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>DESIGN GOALS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201666</p>
    <p>HORTON TABLES</p>
    <p>Positive lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>Negative lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>DESIGN GOALS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201667</p>
    <p>HORTON TABLES</p>
    <p>Positive lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>Negative lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>Retain a worst-case lookup cost of 2 buckets (i.e., often 2 hardware cache lines)</p>
    <p>DESIGN GOALS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201668</p>
    <p>HORTON TABLES</p>
    <p>Positive lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>Negative lookups that typically require accessing only 1 bucket per query</p>
    <p>If buckets are at most a cache line in size, then only 1 cache line is accessed as well.</p>
    <p>Retain a worst-case lookup cost of 2 buckets (i.e., often 2 hardware cache lines)</p>
    <p>Achieve a load factor exceeding 0.95 (akin to a bucketized cuckoo hash table that uses 2 hash functions and 4-cell buckets)</p>
    <p>DESIGN GOALS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201669</p>
    <p>HORTON TABLES PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201670</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201671</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201672</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201673</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>INSERT 13Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201674</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201675</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201676</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>INSERT 16Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201677</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>INSERT 16Hprimary16</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201678</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201679</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201680</p>
    <p>HORTON TABLES</p>
    <p>Horton tables start off as standard bucketized cuckoo hash tables</p>
    <p>Like first-fit, they strongly bias inserts by using a primary hash function called Hprimary</p>
    <p>Most positive lookups therefore only require accessing a single cache line</p>
    <p>PRIMARY INSERTIONS AND LOOKUPS</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Hprimary16</p>
    <p>LOOKUP 16</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201681</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201682</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>INSERT 23Hprimary16</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201683</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>INSERT 23Hprimary16</p>
    <p>Evict 163</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201684</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>INSERT 23Hprimary</p>
    <p>Evict 163</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201685</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>INSERT 23Hprimary</p>
    <p>Evict 16</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201686</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>INSERT 23Hprimary</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201687</p>
    <p>HORTON TABLES INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>INSERT 23</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201688</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201689</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201690</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201691</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201692</p>
    <p>INSERT 23</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R2</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201693</p>
    <p>INSERT 23</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R2</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201694</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201695</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201696</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201697</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Htag(23) = 17 0 20</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201698</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Htag(23) = 17 0 20</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input Store 2 at index Htag(23)=17 to indicate that R2 was used to remap 23</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 201699</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Htag(23) = 17 0 20</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input Store 2 at index Htag(23)=17 to indicate that R2 was used to remap 23</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016100</p>
    <p>INSERT 23</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>Htag(23) = 17 0 20</p>
    <p>Use R2 for inserting 23 because it maps 23 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input Store 2 at index Htag(23)=17 to indicate that R2 was used to remap 23</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016101</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016102</p>
    <p>secondary bucket.</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016103</p>
    <p>secondary bucket.</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016104</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016105</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R2 16</p>
    <p>R123</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016106</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>INSERT 16</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R2 16</p>
    <p>R3</p>
    <p>R123</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016107</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>INSERT 16</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R2 16</p>
    <p>R3</p>
    <p>R123</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016108</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016109</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016110</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016111</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016112</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016113</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input Store 3 at index Htag(16)=1 to indicate that R3 was used to remap 16</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016114</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input Store 3 at index Htag(16)=1 to indicate that R3 was used to remap 16</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016115</p>
    <p>secondary bucket.</p>
    <p>INSERT 16</p>
    <p>HORTON TABLES</p>
    <p>For buckets that overflow, we remap surplus elements using one of many secondary hash functions and register its numerical identifier (e.g., R1, R2, and R3) as an element in a remap entry array (REA), a sparse, in-bucket array that tracks remapped elements.</p>
    <p>INSERTS THAT TRIGGER CREATION OF REMAP ENTRY ARRAY</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Use R3 for inserting 16 because it maps 16 to least full secondary bucket candidate.</p>
    <p>Compute index into remap entry array using Htag with key as input Store 3 at index Htag(16)=1 to indicate that R3 was used to remap 16</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016116</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016117</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>Compute primary hash function and examine primary bucket (bucket 2)</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016118</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>LOOKUP 16Hprimary</p>
    <p>Compute primary hash function and examine primary bucket (bucket 2)</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016119</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>LOOKUP 16Hprimary</p>
    <p>Compute primary hash function and examine primary bucket (bucket 2) Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016120</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016121</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016122</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016123</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016124</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input The remap entry shows R3 was used to remap 16, so compute R3(16).</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016125</p>
    <p>LOOKUP 16</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input The remap entry shows R3 was used to remap 16, so compute R3(16).</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016126</p>
    <p>LOOKUP 16</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input The remap entry shows R3 was used to remap 16, so compute R3(16).</p>
    <p>Retrieve 16 from bucket 3</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016127</p>
    <p>LOOKUP 16</p>
    <p>HORTON TABLES</p>
    <p>Remapped items can always be retrieved by accessing 2 buckets, even when many secondary hash functions are used</p>
    <p>E.g., when retrieving 16, we only access buckets 2 (primary bucket) and 3 (secondary bucket). We skip buckets 4 and 5 even though they were previously candidates.</p>
    <p>RETRIEVING REMAPPED ITEMS</p>
    <p>R3</p>
    <p>Htag(16) = 1 0 20</p>
    <p>Determine 16 is not stored in its primary bucket and proceed to examine REA</p>
    <p>Compute index into remap entry array using Htag with key as input The remap entry shows R3 was used to remap 16, so compute R3(16).</p>
    <p>Retrieve 16 from bucket 3</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016128</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016129</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016130</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016131</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016132</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016133</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016134</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016135</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016136</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary bucket is a conventional BCHT bucket without remap entries only ever require examining 1 bucket and thus 1 cache line for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016137</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016138</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>LOOKUP 28</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016139</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>LOOKUP 28Hprimary</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016140</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>LOOKUP 28Hprimary</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016141</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>LOOKUP 28Hprimary</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016142</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>LOOKUP 28Hprimary</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016143</p>
    <p>HORTON TABLES</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>NEGATIVE LOOKUPS</p>
    <p>LOOKUP 28Hprimary</p>
    <p>Most negative lookups only require accessing a single bucket</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016144</p>
    <p>Most negative lookups only require accessing a single bucket</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016145</p>
    <p>Most negative lookups only require accessing a single bucket</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Determine 28 is not stored in its primary bucket (2) and proceed to examine REA</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016146</p>
    <p>Most negative lookups only require accessing a single bucket</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Determine 28 is not stored in its primary bucket (2) and proceed to examine REA Compute index into remap entry array using Htag with key as input</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016147</p>
    <p>Most negative lookups only require accessing a single bucket</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Htag(28) = 10 0 20</p>
    <p>Determine 28 is not stored in its primary bucket (2) and proceed to examine REA Compute index into remap entry array using Htag with key as input</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016148</p>
    <p>Most negative lookups only require accessing a single bucket</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS</p>
    <p>Htag(28) = 10 0 20</p>
    <p>Determine 28 is not stored in its primary bucket (2) and proceed to examine REA Compute index into remap entry array using Htag with key as input Examine 10th slot of remap entry array and see it is empty. The search can stop.</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016149</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016150</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016151</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016152</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016153</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016154</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016155</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016156</p>
    <p>Negative lookups only require accessing 2 buckets on a tag alias</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Determine 7 is not stored in its primary bucket (2) and proceed to examine REA</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016157</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016158</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016159</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Htag(7) = 17 0 20</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016160</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Htag(7) = 17 0 20</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
    <p>Examine 18th slot of remap entry array and see that R2 was likely used to remap 7.</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016161</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Htag(7) = 17 0 20</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
    <p>Examine 18th slot of remap entry array and see that R2 was likely used to remap 7.</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016162</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Htag(7) = 17 0 20</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
    <p>Examine 18th slot of remap entry array and see that R2 was likely used to remap 7.</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7R2</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016163</p>
    <p>Negative lookup with a tag alias, e.g. 7 reads remap entry set by 23</p>
    <p>HORTON TABLES NEGATIVE LOOKUPS WITH TAG ALIAS</p>
    <p>Htag(7) = 17 0 20</p>
    <p>Compute index into remap entry array using Htag with key as input</p>
    <p>Examine 18th slot of remap entry array and see that R2 was likely used to remap 7.</p>
    <p>Lookups where the primary buckets final slot is converted into an REA often only require accessing 1 bucket and at most 2 for positive and negative queries alike</p>
    <p>LOOKUP 7R2</p>
    <p>Determine that no slots of secondary bucket (0) match 7, so stop looking.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016164</p>
    <p>ADDITIONAL CONTENT IN THE PAPER</p>
    <p>Sharing of remap entries among multiple remapped elements while still permitting their deletion</p>
    <p>Further optimizations for improving lookup throughput</p>
    <p>Analytical models for lookups, insertions and deletions</p>
    <p>More in-depth discussion of prior work and how Horton tables improves over first-fit for positive lookups</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016165</p>
    <p>EXPERIMENTAL METHODOLOGY</p>
    <p>Conducted a series of analytical studies to determine 8-slots per bucket was a good design point (more details in paper)</p>
    <p>Fills a 64-byte cache line with 8-byte entries</p>
    <p>High load factors (&gt;95% table can be filled with key-value pairs)</p>
    <p>Positive lookups that typically access less than 1.18 buckets per query</p>
    <p>Negative lookups that typically access less than 1.06 buckets per query</p>
    <p>Further analytical studies demonstrated that 21 entries per REA and 7 secondary functions is often more than sufficient for 8-slot buckets (more details in paper)</p>
    <p>Experimental studies conducted on an AMD RadeonTM R9 290X GPU</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016166</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016167</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016168</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016169</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016170</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016171</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016172</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016173</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016174</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016175</p>
    <p>RESULTS POSITIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Positive Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
    <p>Load balancing insertion heuristic</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016176</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016177</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016178</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016179</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016180</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016181</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016182</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016183</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016184</p>
    <p>RESULTS NEGATIVE LOOKUPS</p>
    <p>Bytes Transferred from DRAM per Query</p>
    <p>Negative Lookup Throughput</p>
    <p>HIGHER IS BETTER</p>
    <p>LOWER</p>
    <p>IS BETTER</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016185</p>
    <p>CONCLUSIONS FROM HORTON TABLES</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016186</p>
    <p>CONCLUSIONS FROM HORTON TABLES</p>
    <p>Achieves lookup throughput that meets or exceeds prior approaches</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016187</p>
    <p>CONCLUSIONS FROM HORTON TABLES</p>
    <p>Achieves lookup throughput that meets or exceeds prior approaches</p>
    <p>The throughput improvement is achieved by reducing the number of cache lines that need to be accessed per lookup query to at most 1.18 for positive lookups and 1.06 for negative lookups.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016188</p>
    <p>CONCLUSIONS FROM HORTON TABLES</p>
    <p>Achieves lookup throughput that meets or exceeds prior approaches</p>
    <p>The throughput improvement is achieved by reducing the number of cache lines that need to be accessed per lookup query to at most 1.18 for positive lookups and 1.06 for negative lookups.</p>
    <p>Reducing cache accesses yields corresponding throughput improvements of 5% to 35% and 73% to 89%, for pos. and neg. lookups, respectively, on a very full table.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016189</p>
    <p>CONCLUSIONS FROM HORTON TABLES</p>
    <p>Achieves lookup throughput that meets or exceeds prior approaches</p>
    <p>The throughput improvement is achieved by reducing the number of cache lines that need to be accessed per lookup query to at most 1.18 for positive lookups and 1.06 for negative lookups.</p>
    <p>Reducing cache accesses yields corresponding throughput improvements of 5% to 35% and 73% to 89%, for pos. and neg. lookups, respectively, on a very full table.</p>
    <p>Optimizing hash table algorithms is important because of their wide use throughout all segments of computing (e.g., scientific computing and databases, data compression, computer graphics and data visualization).</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016190</p>
    <p>FUTURE WORK</p>
    <p>Evaluation of insertions and deletions and their optimization</p>
    <p>Write- and update-heavy workloads should also benefit from Horton tables approach.</p>
    <p>Application of Horton tables to data warehousing and analysis applications</p>
    <p>Database operators implementations (e.g., hash joins and grouping hash tables)</p>
    <p>Key-value stores</p>
    <p>Additional indices for speeding up lookups, insertions, and deletions</p>
    <p>Evaluation of Horton tables on new and emerging memory subsystems as well as tailoring the technique for persistent storage technologies such as SSDs</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016191</p>
    <p>QUESTIONS?</p>
    <p>Thanks for your attention.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016192</p>
    <p>DISCLAIMER &amp; ATTRIBUTION</p>
    <p>The information presented in this document is for informational purposes only and may contain technical inaccuracies, omissions and typographical errors.</p>
    <p>The information contained herein is subject to change and may be rendered inaccurate for many reasons, including but not limited to product and roadmap changes, component and motherboard version changes, new model and/or product releases, product differences between differing manufacturers, software changes, BIOS flashes, firmware upgrades, or the like. AMD assumes no obligation to update or otherwise correct or revise this information. However, AMD reserves the right to revise this information and to make changes from time to time to the content hereof without obligation of AMD to notify any person of such revisions or changes.</p>
    <p>AMD MAKES NO REPRESENTATIONS OR WARRANTIES WITH RESPECT TO THE CONTENTS HEREOF AND ASSUMES NO RESPONSIBILITY FOR ANY INACCURACIES, ERRORS OR OMISSIONS THAT MAY APPEAR IN THIS INFORMATION.</p>
    <p>AMD SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. IN NO EVENT WILL AMD BE LIABLE TO ANY PERSON FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL DAMAGES ARISING FROM THE USE OF ANY INFORMATION CONTAINED HEREIN, EVEN IF AMD IS EXPRESSLY ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>
    <p>ATTRIBUTION</p>
    <p>2016 Advanced Micro Devices, Inc. All rights reserved. AMD, the AMD Arrow logo, AMD Radeon, and combinations thereof are trademarks of Advanced Micro Devices, Inc. in the United States and/or other jurisdictions. Other names are for informational purposes only and may be trademarks of their respective owners.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016193</p>
    <p>BACKUP SLIDES</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016194</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016195</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>INSERT 27</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016196</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>INSERT 27Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016197</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>INSERT 27Hprimary</p>
    <p>We conclude that bucket 2 has no free slots, so we need to remap it.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016198</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016199</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Compute the Htag on the key</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016200</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016201</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016202</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key We see that the remap entry is set,</p>
    <p>so we try to use R3 to insert 27.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016203</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key We see that the remap entry is set,</p>
    <p>so we try to use R3 to insert 27.</p>
    <p>INSERT 27</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016204</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key We see that the remap entry is set,</p>
    <p>so we try to use R3 to insert 27.</p>
    <p>INSERT 27R3</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016205</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key We see that the remap entry is set,</p>
    <p>so we try to use R3 to insert 27.</p>
    <p>INSERT 27R327</p>
    <p>The insertion succeeds because the secondary bucket (3) has a free slot.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016206</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key We see that the remap entry is set,</p>
    <p>so we try to use R3 to insert 27.</p>
    <p>INSERT 27R327</p>
    <p>The insertion succeeds because the secondary bucket (3) has a free slot.</p>
    <p>If bucket 3 had been full, we could have swapped 27 with another item from 27s primary bucket (e.g., 35 in bucket 2) and remapped that item instead.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016207</p>
    <p>HORTON TABLES</p>
    <p>We permit a single remap entry to reference multiple remapped elements.</p>
    <p>Deleting remap entries is possible by having elements that share remap entries map to the same secondary bucket (see our paper for details).</p>
    <p>SHARING OF REMAP ENTRIES</p>
    <p>Htag(27) = 1 0 20</p>
    <p>Compute the Htag on the key We see that the remap entry is set,</p>
    <p>so we try to use R3 to insert 27.</p>
    <p>INSERT 27R327</p>
    <p>The insertion succeeds because the secondary bucket (3) has a free slot.</p>
    <p>If bucket 3 had been full, we could have swapped 27 with another item from 27s primary bucket (e.g., 35 in bucket 2) and remapped that item instead.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016208</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016209</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>DELETE 8</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016210</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>DELETE 8Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016211</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>DELETE 8Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016212</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016213</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>DELETE 27</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016214</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>DELETE 27Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016215</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>DELETE 27Hprimary</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016216</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016217</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016218</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016219</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016220</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016221</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016222</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
    <p>Search R3(27) = 3 and delete it upon discovery.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016223</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
    <p>Search R3(27) = 3 and delete it upon discovery.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016224</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
    <p>Search R3(27) = 3 and delete it upon discovery. Compute Hprimary on 16 and 37 and find that the remap entry is still active.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016225</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
    <p>Search R3(27) = 3 and delete it upon discovery. Compute Hprimary on 16 and 37 and find that the remap entry is still active. A subsequent deletion of 16 would cause the remap entry to be deleted.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016226</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
    <p>Search R3(27) = 3 and delete it upon discovery. Compute Hprimary on 16 and 37 and find that the remap entry is still active. A subsequent deletion of 16 would cause the remap entry to be deleted.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016227</p>
    <p>HORTON TABLES</p>
    <p>Deleting elements that are found in their primary bucket only requires accessing a single bucket</p>
    <p>A remapped element can be deleted by performing a secondary lookup followed by a deletion</p>
    <p>DELETING ELEMENTS</p>
    <p>EMPTY 5 EMPTY EMPTY</p>
    <p>Htag(27) = 1 0 20</p>
    <p>DELETE 27R3</p>
    <p>Search R3(27) = 3 and delete it upon discovery. Compute Hprimary on 16 and 37 and find that the remap entry is still active. A subsequent deletion of 16 would cause the remap entry to be deleted.</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016228</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016229</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016230</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016231</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37R3</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016232</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37R3</p>
    <p>INSERT 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016233</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37R3</p>
    <p>INSERT 37R1</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016234</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37R3</p>
    <p>INSERT 37R1</p>
    <p>INSERT 37</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016235</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37R3</p>
    <p>INSERT 37R1</p>
    <p>INSERT 37R2</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016236</p>
    <p>HORTON TABLES INSERTION WHERE ALL CANDIDATE SECONDARY BUCKETS ARE FULL</p>
    <p>EMPTY EMPTY EMPTY 37</p>
    <p>Htag(37) = 14 0 20</p>
    <p>Swap item with another from its primary bucket that can be remapped to a secondary bucket that is not full</p>
    <p>If this fails, then use cuckoo hashing</p>
    <p>Preferably enforcing as we do that secondary items cannot displace primary items</p>
    <p>INSERT 37R3</p>
    <p>INSERT 37R1</p>
    <p>INSERT 37R2</p>
    <p>REHASH 35</p>
  </div>
  <div class="page">
    <p>| HORTON TABLES: FAST HASH TABLES FOR IN-MEMORY DATA-INTENSIVE COMPUTING | JUNE 23, 2016237</p>
    <p>END OF BACKUP SLIDES</p>
  </div>
</Presentation>
