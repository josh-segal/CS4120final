<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>First Step Towards Automatic Correction of Firewall Policy Faults</p>
    <p>Fei Chen Alex X. Liu Computer Science and Engineering</p>
    <p>Michigan State University</p>
    <p>JeeHyun Hwang Tao Xie Computer Science</p>
    <p>North Carolina State University</p>
  </div>
  <div class="page">
    <p>What do we do here? Most firewall policies are poorly configured and contain faults. [Wool 2004 &amp; 2010]  A coworker may mess up your firewall rules  Any modification may introduce firewall faults.</p>
    <p>We invent methods for fixing firewall policies automatically.  We first model 5 types of faults.  For each type of faults, we develop an algorithm to fix them.  Given a faulty firewall policy, we propose a systematic method to fix the faults</p>
    <p>automatically using the 5 algorithms.</p>
  </div>
  <div class="page">
    <p>Roadmap Background  Firewalls  Firewall Policies  Firewall Policy Faults</p>
    <p>Technical Challenges Fault model of firewall policies  Five types of faults</p>
    <p>Problem formalization Our solution Experimental results</p>
  </div>
  <div class="page">
    <p>Background  Firewalls A firewall checks all outgoing and incoming packets The firewall policy decides whether to accept or discard a packet</p>
    <p>Firewall</p>
    <p>Private Network</p>
    <p>Outgoing Packets</p>
    <p>Incoming Packets Internet</p>
  </div>
  <div class="page">
    <p>Background  Firewall Policies A firewall policy is usually specified as a sequence of rules Each rule consists of a predicate and a decision.  A predicate typically includes five fields:</p>
    <p>source IP, destination IP, source port, destination port, protocol type  Typical decisions are accept and discard.</p>
    <p>Conflict Resolution: first-match</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Payload</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Decision r1 1.2.3.* 192.168.1.1 * 25 TCP Accept r2 1.2.3.9 192.168.1.1 * 25 * Discard r3 * * * * * Discard</p>
    <p>Packet</p>
    <p>Firewall Policy</p>
  </div>
  <div class="page">
    <p>Background  Firewall Policy Faults Most firewall policies are poorly configured and contain faults. [Wool 2004 &amp; 2010] It is dangerous to have faults in a firewall policy. A policy fault  either allows malicious traffic to sneak into the private network  or blocks legitimate traffic and disrupts normal business processes</p>
    <p>A faulty policy evaluates some packets to unexpected decisions.  Such packets are called misclassified packets of a faulty firewall policy</p>
    <p>Manually locating and correcting firewall faults are impractical.  A firewall may consist of thousands of rules</p>
    <p>Automatically correcting firewall faults is an important problem.</p>
  </div>
  <div class="page">
    <p>Roadmap Background  Firewalls  Firewall Policies  Firewall Policy Faults</p>
    <p>Technical Challenges Fault model of firewall policies  Five types of faults</p>
    <p>Problem formalization Our solution Experimental results</p>
  </div>
  <div class="page">
    <p>Three Key Technical Challenges It is difficult to determine the number of policy faults and the type of each fault.  A set of misclassified packets can be caused by different types of faults</p>
    <p>and different number of faults.</p>
    <p>It is difficult to correct a firewall fault.  A firewall policy may consists of a large number of rules.  Each rule has a predicate over multi-dimensional fields.</p>
    <p>It is difficult to correct a fault without introducing other faults  Due to the first match, correcting faults in a firewall rule affects the</p>
    <p>functionally of all the subsequent rules.</p>
  </div>
  <div class="page">
    <p>Roadmap Background  Firewalls  Firewall Policies  Firewall Policy Faults</p>
    <p>Technical Challenges Fault model of firewall policies  Five types of faults</p>
    <p>Problem formalization Our solution Experimental results</p>
  </div>
  <div class="page">
    <p>Fault Model of Firewall Policies (1/2) We propose a fault model that includes five types of faults (1) Wrong order: the order of firewall rules is wrong.</p>
    <p>Correction technique: Order Fixing (2) Missing rules: some rules are missed in the firewall policy.</p>
    <p>Correction technique: Rule Addition (3) Wrong predicates: the predicates of some rules are wrong.</p>
    <p>Correction technique: Predicate Fixing</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Decision</p>
    <p>r1 1.2.3.* 192.168.1.1 * 25 TCP Accept</p>
    <p>r2 1.2.3.9 192.168.1.1 * 25 * Discard</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Decision</p>
    <p>r1 1.2.3.* 192.168.1.1 * 25 TCP Accept</p>
    <p>r2 1.2.3.9 192.168.1.1 * 25 * Discard r*</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Decision</p>
    <p>r1 1.2.3.* 192.168.1.1 * 25 TCP Accept</p>
  </div>
  <div class="page">
    <p>Fault Model of Firewall Policies (2/2) (4) Wrong decisions: the decisions of some rules are wrong.</p>
    <p>Correction technique: Decision Fixing (5) Wrong extra rules: some rules are not needed in the policy.</p>
    <p>Correction technique: Rule Deletion</p>
    <p>Each operation of these five techniques is called a modification.</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Decision</p>
    <p>r1 1.2.3.* 192.168.1.1 * 25 TCP Accept</p>
    <p>r2 1.2.3.9 192.168.1.1 * 25 * Discard</p>
    <p>Src IP Dst IP Src Port Dst Port Protocol Decision</p>
    <p>r1 1.2.3.* 192.168.1.1 * 25 TCP Accept</p>
    <p>r2 1.2.3.9 192.168.1.1 * 25 * Discard</p>
    <p>r3 * * * * * Discard</p>
  </div>
  <div class="page">
    <p>Roadmap Background  Firewalls  Firewall Policies  Firewall Policy Faults</p>
    <p>Technical Challenges Fault model of firewall policies  Five types of faults</p>
    <p>Problem formalization Our solution Experimental results</p>
  </div>
  <div class="page">
    <p>Detection of Faulty Firewall Policies A faulty firewall policy is detected when  administrators find that the policy allows some malicious packets or blocks</p>
    <p>some legitimate packets.</p>
    <p>These packets cannot provide enough information about the faults  The number of these observed packets is typically small</p>
    <p>Bruteforce testing every possible packets needs 2104</p>
    <p>How to generate test packets for faulty firewall policies?</p>
    <p>Faulty Firewall Policy</p>
    <p>Administrator</p>
    <p>Malicious Packets</p>
    <p>Legitimate Packets</p>
  </div>
  <div class="page">
    <p>Generating Test Packets for Faulty Policies</p>
    <p>We employ the automated packet generation techniques in [Hwang et al. 2008] to generate test packets Administrators identify passed/failed tests automatically or manually According to security requirements for the firewall policy,  If the decision of a packet is correct, administrators classify it as a passed test.  Otherwise, administrators classify it as a failed test.</p>
    <p>Faulty Firewall Policy</p>
    <p>Packet Generation</p>
    <p>Classify Packets</p>
    <p>Passed Packets</p>
    <p>Failed Packets</p>
  </div>
  <div class="page">
    <p>Problem Statement Input: (1) A faulty firewall policy FW (2) A set of passed tests PT, |PT|0 (3) A set of failed tests FT, |FT|&gt;0 Output: A sequence of modifications &lt;M1, , Mm&gt;, where Mj (1j m) denotes one modifition, satisfies the following two conditions: (1) After applying &lt;M1, , Mm&gt; to FW, all tests in PT and FT become passed tests. (2) No other sequence that satisfies the first condition has the smaller number of modifications than m. This is a global optimization problem and hard to solve because  a policy may consist of a large number of rules, and  different combinations of modifications can be made.</p>
  </div>
  <div class="page">
    <p>Roadmap Background  Firewalls  Firewall Policies  Firewall Policy Faults</p>
    <p>Technical Challenges Fault model of firewall policies  Five types of faults</p>
    <p>Problem formalization Our solution Experimental results</p>
  </div>
  <div class="page">
    <p>Automatic Correction of Firewall Policy Faults We propose a greedy algorithm to address this problem.  For each step, we correct one fault in the policy such that |PT| increases.  To determine which technique should be used, we try the five correction</p>
    <p>techniques and then find the one that maximizes |PT|.</p>
    <p>Faulty Firewall Policy</p>
    <p>Passed Packets</p>
    <p>Failed Packets</p>
    <p>Order Fixing</p>
    <p>Rule Addition</p>
    <p>Predicate Fixing</p>
    <p>Decision Fixing</p>
    <p>Rule Deletion</p>
    <p>|Failed Tests|=0 ?</p>
    <p>Fixed Firewall Policy</p>
    <p>No</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>r1: F1  [1, 5]  F2  [1, 10]  a r2: F1  [1, 6]  F2  [3, 10]  a r3: F1  [6,10]  F2  [1, 3]  d r4: F1  [7,10]  F2  [4, 8]  a r5: F1  [1,10]  F2  [1, 10]  d</p>
    <p>p1: (3, 2)  a p2: (5, 7)  a p3: (6, 7)  a p4: (7, 2)  d p5: (8,10) d</p>
    <p>p6: (6, 3)  d p7: (7, 9)  a p8: (8, 5)  d</p>
    <p>A faulty firewall policy</p>
    <p>A set of passed tests A set of failed tests</p>
  </div>
  <div class="page">
    <p>Order Fixing (1/2) Swapping every two rules is computationally expensive.  There are (n-1)(n-2)/2 pairs of rules that can be swapped</p>
    <p>We use all-match firewall decision diagrams (all-match FDDs) [Liu et al. 2008] as the core data structure.  Any firewall policy can be converted to an equivalent all-match FDD.</p>
    <p>[1, 5] [7, 10] F1</p>
    <p>[1, 2] F2 F2</p>
    <p>[1,2] F2</p>
    <p>[3, 10] [3,3]</p>
    <p>[4,10] [1,3] [4,8]</p>
    <p>[9,10]</p>
    <p>[6, 6]</p>
    <p>r1: F1  [1, 5]  F2  [1, 10]  a r2: F1  [1, 6]  F2  [3, 10]  a r3: F1  [6,10]  F2  [1, 3]  d r4: F1  [7,10]  F2  [4, 8]  a r5: F1  [1,10]  F2  [1, 10]  d</p>
  </div>
  <div class="page">
    <p>Order Fixing (2/2) All-match FDD has the following nice property. Swapping two rules is equivalent to swapping the sequence</p>
    <p>numbers of the two rules in the terminal nodes of all-match FDD</p>
    <p>For the running example, this technique can find that swapping r2 and r3 can increase |PT| by 1  change the failed test (6, 3) d to a passed test</p>
    <p>[1, 5] [7, 10] F1</p>
    <p>[1, 2] F2 F2</p>
    <p>[1,2] F2</p>
    <p>[3, 10] [3,3]</p>
    <p>[4,10] [1,3] [4,8]</p>
    <p>[9,10]</p>
    <p>[6, 6]</p>
    <p>&lt;r1, r2, r3, r4, r5&gt;</p>
    <p>&lt;r1, r3, r2, r4, r5&gt;</p>
  </div>
  <div class="page">
    <p>Rule Addition Bruteforce addition for each position is computationally expensive  The number of possible rules that can be added for each position is O(2204).</p>
    <p>The basic idea of rule addition is that for each position  Find all possible failed tests that can be corrected by adding a rule</p>
    <p>Compute a rule that matches the maximum number of failed tests  For adding a rule between r1, r2, we can compute F1  [6, 8]  F2  [3, 5]  d to</p>
    <p>correct two failed tests p6: (6, 3)  d and p8: (8, 5)  d .</p>
    <p>r1: F1  [1, 5]  F2  [1, 10]  a</p>
    <p>r2: F1  [1, 6]  F2  [3, 10]  a</p>
    <p>r3: F1  [6,10]  F2  [1, 3]  d</p>
    <p>r4: F1  [7,10]  F2  [4, 8]  a</p>
    <p>r5: F1  [1,10]  F2  [1, 10]  d</p>
    <p>p7: (7, 9)  a p6: (6, 3)  d p8: (8, 5)  d</p>
    <p>p7: (7, 9)  a p6: (6, 3)  d p8: (8, 5)  d p6: (6, 3)  d</p>
    <p>p7: (7, 9)  a p8: (8, 5)  d</p>
    <p>p7: (7, 9)  a p8: (8, 5)  d p8: (8, 5)  d</p>
    <p>p7: (7, 9)  a</p>
    <p>r*: F1  [ , ]  F2  [ , ]  dec</p>
    <p>r*: F1  [ , ]  F2  [ , ]  dec</p>
    <p>r*: F1  [ , ]  F2  [ , ]  dec</p>
    <p>r*: F1  [ , ]  F2  [ , ]  dec</p>
    <p>r*: F1  [ , ]  F2  [ , ]  dec</p>
  </div>
  <div class="page">
    <p>Evaluation Setup We generate faulty firewall policies from 40 real-life policies.  Each faulty policy contains one type of fault, and the number of faults</p>
    <p>ranges from 1 to 5.  For each faulty policy, we employed the packet generating technique</p>
    <p>[Hwang et al. 2008] and then classified them into passed and failed tests  We applied our greedy algorithm to produce the fixed policy.</p>
    <p>Methodology  Difference ratio over FWreal, FWfaulty, and FWfixed</p>
    <p>The average number of modifications</p>
    <p>Real Policy FWreal</p>
    <p>Faulty Policy FWfaulty</p>
    <p>Fixed Policy FWfixed</p>
    <p>(FWreal , FWfaulty ) (FWreal , FWfixed )</p>
  </div>
  <div class="page">
    <p>Roadmap Background  Firewalls  Firewall Policies  Firewall Policy Faults</p>
    <p>Technical Challenges Fault model of firewall policies  Five types of faults</p>
    <p>Problem formalization Our solution Experimental results</p>
  </div>
  <div class="page">
    <p>Effectiveness (1/4) For wrong decision faults The percentages of fixed policies that are equivalent to their corresponding reallife policies are 73.5%, 68.8%, 63.7%, 59.3%, and 53.8%, respectively.</p>
  </div>
  <div class="page">
    <p>Effectiveness (2/4) For wrong order faults The percentages of fixed policies that are equivalent to their corresponding reallife policies are 69.7%, 64.2%, 59.7%, 54.3%, and 48.9%, respectively.</p>
  </div>
  <div class="page">
    <p>Effectiveness (3/4) For wrong extra rule faults The percentages of fixed policies that are equivalent to their corresponding reallife policies are 68.3%, 63.5%, 59.3%, 53.2%, and 47.3%, respectively.</p>
  </div>
  <div class="page">
    <p>Effectiveness (4/4) In terms the number of modifications The number of modifications of our approach is close to the minimum number.</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Propose the first comprehensive fault model for firewall policies</p>
    <p>Propose the first systematic approach that can automatically correct all or part of the misclassified packets of a faulty policy.</p>
    <p>Conduct extensive experiments on real-life firewall policies to evaluate the effectiveness of our approach.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Thank you!</p>
  </div>
</Presentation>
