<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GraphWalker: An I/O-Efficient and Resource-Friendly Graph Analytic System</p>
    <p>for Fast and Scalable Random Walks RuiWang, Yongkun Li, Hong Xie, Yinlong Xu, John C.S. Lui*</p>
    <p>University of Science and Technology of China  Chongqing University * The Chinese University of Hong Kong</p>
    <p>USENIX ATC 2020</p>
  </div>
  <div class="page">
    <p>Graph analytics is one of the top 10 data and analytics technology trends [1]</p>
    <p>[1] Gartner's top 10 data and analytics technology trends for 2019</p>
    <p>Recommendation systemsSocial networks Webpage links</p>
  </div>
  <div class="page">
    <p>Random walks can realize an approximate calculation on large graphs.</p>
  </div>
  <div class="page">
    <p>a)</p>
    <p>b)</p>
    <p>c)</p>
    <p>Massive walks situations!</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Memory</p>
    <p>Loop until all walks finished</p>
    <p>load a sub-graph to memory</p>
    <p>update walks in the sub-graph</p>
  </div>
  <div class="page">
    <p>How many walkers in each loaded sub-graph?</p>
    <p>How many steps each walker can update?</p>
  </div>
  <div class="page">
    <p>walks distribution among subgraphs after 4 steps</p>
    <p>I/O  = #,-./ ./0.#12134 ./0.- 56 3 -,70839:</p>
    <p>Some loaded blocks contain only few walkers, results in low I/O utilization</p>
    <p>Start 106 walks from a source in Friendster (68.3M vertices) on DurnkardMob</p>
    <p>More than 200000 walks</p>
    <p>Only 12 walks</p>
  </div>
  <div class="page">
    <p>block b0</p>
    <p>block b2 block b1</p>
    <p>&lt;=</p>
    <p>&gt;?</p>
    <p>&lt;</p>
    <p>=</p>
    <p>&gt;</p>
    <p>?block b0</p>
    <p>block b2 block b1</p>
    <p>Let the most walkers get moved by an I/O</p>
  </div>
  <div class="page">
    <p>Many walks remain in the current subgraph after walking one step Synchronized walk updating leads to low walk updating rate</p>
    <p>walk steps update rate in each I/O</p>
    <p>walks in 1st subgraph after each iteration</p>
    <p>Start 106 walks of 10 steps from a source in Friendster (68.3M vertices) on DurnkardMob</p>
    <p>Avg: 0.2%</p>
  </div>
  <div class="page">
    <p>Successively update each walk until it moved out of current subgraph</p>
    <p>Maximize the I/O utilization of a loaded subgraph</p>
    <p>Straggler problem: probabilistic approach</p>
    <p>with a probability p, we choose to load the subgraph with the shortest walker</p>
  </div>
  <div class="page">
    <p>#walk limited as its hard to flush all walks to disk for too many files</p>
    <p>walk arrays</p>
    <p>bucket array</p>
    <p>P1</p>
    <p>|v|</p>
    <p>|v|-128</p>
    <p>Too many walk arrays</p>
  </div>
  <div class="page">
    <p>Dynamic arrays bring high cost for storing walk data</p>
    <p>Frequent memory re-allocation</p>
    <p>p</p>
    <p>Dynamic walk arrays</p>
    <p>bucket array</p>
    <p>P1</p>
    <p>|v|</p>
    <p>|v|-128</p>
    <p>memory waste</p>
  </div>
  <div class="page">
    <p>Fixed-length block array</p>
    <p>Walk pool in disk file</p>
    <p>P</p>
    <p>Block array</p>
    <p>block 0</p>
    <p>block 1</p>
    <p>block P</p>
    <p>source current step 0133963 1440</p>
    <p>low s  less memory re-allocation low I/O cost</p>
  </div>
  <div class="page">
    <p>Other optimizations</p>
    <p>Graph block size configuration</p>
    <p>Walk-conscious cache strategy</p>
    <p>Data conflict optimization in multi-threads</p>
    <p>Prototype systemGraphWalker</p>
    <p>Light-weighted blocking</p>
    <p>More details are in the paper</p>
  </div>
  <div class="page">
    <p>Largest dataset</p>
  </div>
  <div class="page">
    <p>DrunkardMob Optimize the walk management</p>
    <p>Graphene Fine-grained I/O management</p>
    <p>GraFSoft</p>
    <p>KnightKing Optimize the walk forwarding process</p>
  </div>
  <div class="page">
    <p>Performance of random walks with different number of walks  Fix walk length as 10</p>
    <p>GraphWalker achieves 16x-70x speedup. GraphWalker is also capable to support huge graphs and massive walks.</p>
    <p>GraphWalker finishes running 1010 walks on the largest dataset CrawlWeb within around one hour.</p>
  </div>
  <div class="page">
    <p>Performance of random walks with different walk lengths  Fix the number of walks as 105</p>
    <p>GraphWalker achieves even more than three orders of magnitude in the best case. GraphWalker also achieves 7  10x speedup for Kron30.</p>
  </div>
  <div class="page">
    <p>I/O utilization and walk updating rate  RWD (|V| * 6 walks) in YahooWeb (1.6B vertices)</p>
    <p>DrunkardMob needs 150 I/Os and GraphWalker only needs 46 I/Os. GraphWalker achieves 2  4x I/O utilization.</p>
  </div>
  <div class="page">
    <p>Compare with single machine systems Graphene and GraFSoft  R * 10</p>
    <p>GraphWalker achieves 2 - 40x speedup compared to Graphene. GraphWalker achieves 1 - 37x speedup compared to GraFSoft.</p>
  </div>
  <div class="page">
    <p>Compare with distributed system KnightKing  Run |v| walks, each vertex start one walk  Terminate with probability 0.15 in each walk step</p>
    <p>GraphWalker (1 node) achieves comparable with KnightKing (8 nodes).</p>
  </div>
  <div class="page">
    <p>https://github.com/ustcadsl/graphwalker</p>
  </div>
  <div class="page"/>
</Presentation>
