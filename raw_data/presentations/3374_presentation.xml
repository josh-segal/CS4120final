<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On the effectiveness of mitigations against floating-point timing channels David Kohlbrenner Hovav Shacham UC San Diego</p>
  </div>
  <div class="page">
    <p>On the effectiveness of mitigations against floating-point timing channels David Kohlbrenner Hovav Shacham UC San Diego</p>
    <p>How effective are</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Safari CVE-2017-7006 Firefox CVE-2017-5407 Chrome CVE-2017-5107</p>
  </div>
  <div class="page">
    <p>Safari CVE-2017-7006 Firefox CVE-2017-5407 Chrome CVE-2017-5107</p>
    <p>Pixel-stealing attacks on browsers Using floating-point side-channels</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Background on pixel-stealing</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Attacker:  Hosts webpage</p>
    <p>Victim:  Visits attacker  Logged into target</p>
    <p>Target:  Website hosting private</p>
    <p>visual information</p>
    <p>Pixel-stealing attacks - Terminology</p>
    <p>Impact*:  Attacking page learns pixel</p>
    <p>information from target  Ex:</p>
    <p>Bank information  Login status  Usernames</p>
    <p>See Paul Stones Pixel Perfect Timing Attacks with HTML5 * Ask me about history sniffing!</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
    <p>See Paul Stones Pixel Perfect Timing Attacks with HTML5 and Andrysco et als On subnormal floating point and abnormal timing</p>
  </div>
  <div class="page">
    <p>Floating point format and</p>
    <p>performance</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>IEEE-754 Floating point format (single/float)</p>
    <p>Value = (1)sign  significand  2(exponent  bias)</p>
    <p>sign</p>
    <p>exponent (8 bits) significand (23 bits +1)</p>
  </div>
  <div class="page">
    <p>IEEE-754 Floating point format (single/float)</p>
    <p>Value = (1)sign  significand  2(exponent  bias)</p>
    <p>Normal values have nonzero exponent, implicit leading 1. before significand</p>
    <p>sign</p>
    <p>exponent (8 bits) significand (23 bits +1)</p>
  </div>
  <div class="page">
    <p>IEEE-754 Floating point format (single/float)</p>
    <p>Value = (1)sign  significand  2(exponent  bias)</p>
    <p>Normal values have nonzero exponent, implicit leading 1. before significand</p>
    <p>sign</p>
    <p>exponent (8 bits) significand (23 bits +1)</p>
  </div>
  <div class="page">
    <p>IEEE-754 Floating point format (single/float)</p>
    <p>Value = (1)sign  significand  2(exponent  bias)</p>
    <p>Normal values have nonzero exponent, implicit leading 1. before significand</p>
    <p>Subnormal values have all-zero exponent, implicit leading 0. before significand</p>
    <p>sign</p>
    <p>exponent (8 bits) significand (23 bits +1)</p>
  </div>
  <div class="page">
    <p>IEEE-754 Floating point format (single/float)</p>
    <p>Value = (1)sign  significand  2(exponent  bias)</p>
    <p>Normal values have nonzero exponent, implicit leading 1. before significand</p>
    <p>Subnormal values have all-zero exponent, implicit leading 0. before significand</p>
    <p>Single precision normal minimum: 1.18e38 !</p>
    <p>sign</p>
    <p>exponent (8 bits) significand (23 bits +1)</p>
  </div>
  <div class="page">
    <p>Floating point performance variation</p>
    <p>double-precision SSE scalar division on Intel i5-4460</p>
  </div>
  <div class="page">
    <p>Floating point performance variation</p>
    <p>double-precision SSE scalar division on Intel i5-4460</p>
  </div>
  <div class="page">
    <p>Floating point performance variation</p>
    <p>double-precision SSE scalar division on Intel i5-4460</p>
  </div>
  <div class="page">
    <p>Floating point performance variation</p>
    <p>double-precision SSE scalar division on Intel i5-4460</p>
  </div>
  <div class="page">
    <p>Floating point performance variation</p>
    <p>double-precision SSE scalar division on Intel i5-4460 * Ask me why it is 175 cycles</p>
  </div>
  <div class="page">
    <p>Summary of floating-point performance variations</p>
    <p>Intel i5-4460</p>
    <p>Slow subnormals: Subnormal operands induce slowdowns</p>
    <p>Fast zero: All zero significands cause speedups</p>
    <p>Many effects: Analog combinations of previous effects</p>
  </div>
  <div class="page">
    <p>Using floats for pixel-stealing</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
  </div>
  <div class="page">
    <p>Pixel-stealing attack overview</p>
  </div>
  <div class="page">
    <p>feConvolveMatrix as a target</p>
    <p>Input Pixel (copied)</p>
    <p>Kernel</p>
  </div>
  <div class="page">
    <p>feConvolveMatrix as a target</p>
    <p>Input Pixel (copied)</p>
    <p>Kernel X</p>
  </div>
  <div class="page">
    <p>feConvolveMatrix as a target</p>
    <p>Input Pixel (copied)</p>
    <p>Kernel X</p>
  </div>
  <div class="page">
    <p>feConvolveMatrix as a target</p>
    <p>Input Pixel (copied)</p>
    <p>Kernel X</p>
  </div>
  <div class="page">
    <p>feConvolveMatrix as a target</p>
    <p>Input Pixel (copied)</p>
    <p>KernelX</p>
  </div>
  <div class="page">
    <p>Pixel-stealing on 3 major browsers</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Browsers</p>
    <p>Escort</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Safari</p>
    <p>No response to previous attacks  feConvolveMatrix still a target</p>
  </div>
  <div class="page">
    <p>Safari</p>
    <p>No response to previous attacks  feConvolveMatrix still a target</p>
    <p>Attack modifications  Frame counting  Pixel-expansion</p>
  </div>
  <div class="page">
    <p>Safari</p>
    <p>No response to previous attacks  feConvolveMatrix still a target</p>
    <p>Attack modifications  Frame counting  Pixel-expansion</p>
    <p>Most stable of all attacks!</p>
  </div>
  <div class="page">
    <p>Firefox</p>
    <p>Switch to fixed-point in Firefox 28  feConvolveMatrix no longer vulnerable</p>
  </div>
  <div class="page">
    <p>Firefox</p>
    <p>Switch to fixed-point in Firefox 28  feConvolveMatrix no longer vulnerable</p>
    <p>We can use other filters!  feSpecularLighting  Not ported to fixed point yet</p>
  </div>
  <div class="page">
    <p>Firefox lighting code - Core loop</p>
    <p>int32_t sourceIndex = y * sourceStride + x; int32_t targetIndex = y * targetStride + 4 * x;</p>
    <p>Point3D normal = GenerateNormal(sourceData, sourceStride, x, y, mSurfaceScale, aKernelUnitLengthX, aKernelUnitLengthY);</p>
    <p>IntPoint pointInFilterSpace(aRect.x + x, aRect.y + y); Float Z = mSurfaceScale * sourceData[sourceIndex] / 255.0f; Point3D pt(pointInFilterSpace.x, pointInFilterSpace.y, Z); Point3D rayDir = mLight.GetVectorToLight(pt); uint32_t color = mLight.GetColor(lightColor, rayDir);</p>
  </div>
  <div class="page">
    <p>Firefox lighting code - Core loop</p>
    <p>int32_t sourceIndex = y * sourceStride + x; int32_t targetIndex = y * targetStride + 4 * x;</p>
    <p>Point3D normal = GenerateNormal(sourceData, sourceStride, x, y, mSurfaceScale, aKernelUnitLengthX, aKernelUnitLengthY);</p>
    <p>IntPoint pointInFilterSpace(aRect.x + x, aRect.y + y); Float Z = mSurfaceScale * sourceData[sourceIndex] / 255.0f; Point3D pt(pointInFilterSpace.x, pointInFilterSpace.y, Z); Point3D rayDir = mLight.GetVectorToLight(pt); uint32_t color = mLight.GetColor(lightColor, rayDir);</p>
  </div>
  <div class="page">
    <p>Firefox lighting code - Core loop</p>
    <p>int32_t sourceIndex = y * sourceStride + x; int32_t targetIndex = y * targetStride + 4 * x;</p>
    <p>Point3D normal = GenerateNormal(sourceData, sourceStride, x, y, mSurfaceScale, aKernelUnitLengthX, aKernelUnitLengthY);</p>
    <p>IntPoint pointInFilterSpace(aRect.x + x, aRect.y + y); Float Z = mSurfaceScale * sourceData[sourceIndex] / 255.0f; Point3D pt(pointInFilterSpace.x, pointInFilterSpace.y, Z); Point3D rayDir = mLight.GetVectorToLight(pt); uint32_t color = mLight.GetColor(lightColor, rayDir);</p>
  </div>
  <div class="page">
    <p>Firefox lighting code - Core loop</p>
    <p>int32_t sourceIndex = y * sourceStride + x; int32_t targetIndex = y * targetStride + 4 * x;</p>
    <p>Point3D normal = GenerateNormal(sourceData, sourceStride, x, y, mSurfaceScale, aKernelUnitLengthX, aKernelUnitLengthY);</p>
    <p>IntPoint pointInFilterSpace(aRect.x + x, aRect.y + y); Float Z = mSurfaceScale * sourceData[sourceIndex] / 255.0f; Point3D pt(pointInFilterSpace.x, pointInFilterSpace.y, Z); Point3D rayDir = mLight.GetVectorToLight(pt); uint32_t color = mLight.GetColor(lightColor, rayDir);</p>
  </div>
  <div class="page">
    <p>Chrome + FPU Flags</p>
    <p>Disable subnormals with FTZ/DAZ  FPU state flags  Difficult to manage</p>
  </div>
  <div class="page">
    <p>Chrome + FPU Flags</p>
    <p>Disable subnormals with FTZ/DAZ  FPU state flags  Difficult to manage  Not always effective!</p>
  </div>
  <div class="page">
    <p>FTZ/DAZ benchmarking - Bad news</p>
  </div>
  <div class="page">
    <p>FTZ/DAZ benchmarking - Bad news</p>
  </div>
  <div class="page">
    <p>FTZ/DAZ benchmarking - Good news</p>
  </div>
  <div class="page">
    <p>FTZ/DAZ benchmarking - Bad news</p>
  </div>
  <div class="page">
    <p>Chrome + FPU Flags</p>
    <p>Disable subnormals with FTZ/DAZ  FPU state flags  Difficult to manage  Not always effective!</p>
  </div>
  <div class="page">
    <p>Chrome + FPU Flags</p>
    <p>Disable subnormals with FTZ/DAZ  FPU state flags  Difficult to manage  Not always effective!</p>
    <p>Filter on GPU then bail to CPU  Doesnt set FPU flags correctly</p>
  </div>
  <div class="page">
    <p>Chrome filter rendering flow</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
  </div>
  <div class="page">
    <p>Chrome filter rendering flow - default</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
    <p>Set FTZ/DAZ</p>
  </div>
  <div class="page">
    <p>Chrome attack flow</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
  </div>
  <div class="page">
    <p>Chrome attack flow - Force to GPU</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
  </div>
  <div class="page">
    <p>Chrome attack flow - feConvolveMatrix</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
  </div>
  <div class="page">
    <p>Chrome attack flow - feConvolveMatrix</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
    <p>Filter small</p>
    <p>enough?</p>
  </div>
  <div class="page">
    <p>Chrome attack flow - feConvolveMatrix</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
    <p>Filter small</p>
    <p>enough?</p>
  </div>
  <div class="page">
    <p>Chrome attack flow - feConvolveMatrix</p>
    <p>Currently rendering on GPU?</p>
    <p>Filter supports</p>
    <p>GPU?</p>
    <p>Filter prefers GPU?</p>
    <p>Filter small</p>
    <p>enough?</p>
    <p>No FTZ/DAZ!</p>
  </div>
  <div class="page">
    <p>Examining Escort: a proposed</p>
    <p>hardware-based defense</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Browsers</p>
    <p>Escort</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Escort - Rane, Lin and Tiwari</p>
    <p>New hardware-based approach</p>
    <p>Run (some) FP ops on SIMD unit</p>
    <p>dummy escort op, runs worst-case time observed</p>
    <p>by program</p>
    <p>slow case</p>
    <p>fast case</p>
  </div>
  <div class="page">
    <p>Escort - Rane, Lin and Tiwari</p>
    <p>New hardware-based approach</p>
    <p>Run (some) FP ops on SIMD unit</p>
    <p>dummy escort op, runs worst-case time observed</p>
    <p>by program</p>
    <p>slow case</p>
    <p>fast case</p>
  </div>
  <div class="page">
    <p>slow case</p>
    <p>Escort - Rane, Lin and Tiwari</p>
    <p>New hardware-based approach</p>
    <p>Run (some) FP ops on SIMD unit</p>
    <p>dummy escort op, runs worst-case</p>
    <p>Conjecture: real, dummy ops run in parallel</p>
    <p>slow case</p>
    <p>always</p>
    <p>fast case</p>
    <p>dummyreal op</p>
    <p>time observed</p>
    <p>by program</p>
  </div>
  <div class="page">
    <p>Escort libdrag benchmarking</p>
  </div>
  <div class="page">
    <p>Escort libdrag benchmarking</p>
  </div>
  <div class="page">
    <p>Escort benchmarking summary</p>
    <p>Intel i5-4460</p>
    <p>Slow subnormals: Subnormal operands induce slowdowns</p>
    <p>Fast zero: All zero significands cause speedups</p>
    <p>Many effects: Analog combinations of previous effects</p>
  </div>
  <div class="page">
    <p>Escort benchmarking summary</p>
  </div>
  <div class="page">
    <p>Escort benchmarking summary</p>
  </div>
  <div class="page">
    <p>slow case</p>
    <p>Escort - Rane, Lin and Tiwari</p>
    <p>slow case</p>
    <p>always</p>
    <p>fast case</p>
    <p>dummyreal op</p>
    <p>time observed</p>
    <p>by program</p>
  </div>
  <div class="page">
    <p>slow case</p>
    <p>Escort - Rane, Lin and Tiwari</p>
    <p>slow case</p>
    <p>always</p>
    <p>fast case</p>
    <p>dummyreal op</p>
    <p>time observed</p>
    <p>by program slow case</p>
    <p>fast case</p>
    <p>dummy</p>
    <p>real op</p>
    <p>time observed</p>
    <p>by program</p>
    <p>slow case</p>
    <p>always</p>
  </div>
  <div class="page">
    <p>Escort - SIMD Implementation</p>
    <p>All evidence points to:</p>
    <p>Sequential execution</p>
    <p>Execution in microcode</p>
    <p>Slowdown on non-subnormals</p>
    <p>Examined inputs</p>
    <p>Backed up by performance counters</p>
    <p>Potentially useful</p>
    <p>Tricky to use safely</p>
    <p>slow case</p>
    <p>fast case</p>
    <p>dummy</p>
    <p>real op</p>
    <p>time observed</p>
    <p>by program</p>
    <p>slow case</p>
    <p>always</p>
  </div>
  <div class="page">
    <p>Fixes deployed and the future</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Browsers</p>
    <p>Escort</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Fixes deployed</p>
    <p>Firefox 52 - CVE-2017-5407  Restricted range of surfaceScale operand</p>
  </div>
  <div class="page">
    <p>Fixes deployed</p>
    <p>Firefox 52 - CVE-2017-5407  Restricted range of surfaceScale operand</p>
    <p>Chrome 60 - CVE-2017-5107  Ensured FTZ/DAZ scope includes GPU bail</p>
  </div>
  <div class="page">
    <p>Fixes deployed</p>
    <p>Firefox 52 - CVE-2017-5407  Restricted range of surfaceScale operand</p>
    <p>Chrome 60 - CVE-2017-5107  Ensured FTZ/DAZ scope includes GPU bail</p>
    <p>Safari 10.1.2 - CVE-2017-7006  Removed cross-origin SVG filters!*</p>
    <p>* Ask me about history sniffing!</p>
  </div>
  <div class="page">
    <p>Future</p>
    <p>Other browsers should remove cross-origin SVG</p>
    <p>Fixed-point still very promising  libftfp proved constant time*</p>
    <p>GPUs, ARM, etc  Also probably vulnerable</p>
    <p>* Almeida et al USENIX 2016</p>
  </div>
  <div class="page">
    <p>Floating point performance variation - extra</p>
  </div>
  <div class="page">
    <p>Floating point performance variation - extra</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Pixel-stealing attacks</p>
    <p>Floating-point benchmarking</p>
    <p>Attacking with floats</p>
    <p>Beating defenses</p>
    <p>Browsers</p>
    <p>Escort</p>
    <p>Conclusions Tools/Results available:https://cseweb.ucsd.edu/~dkohlbre/floats</p>
  </div>
</Presentation>
