<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ghostor: Toward a Secure Data-Sharing System from Decentralized Trust</p>
    <p>*Yuncong Hu, *Sam Kumar, and Raluca Ada Popa</p>
    <p>University of California, Berkeley</p>
    <p>*Co-primary authors</p>
  </div>
  <div class="page">
    <p>Motivating Example: Medical Record System</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Storage Server</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Alice</p>
    <p>Oncologist Storage Server</p>
  </div>
  <div class="page">
    <p>Existing Systems rely on Centralized Trust</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Central Point of Trust!</p>
    <p>Adversary can:  See files and who</p>
    <p>accesses them  Serve old or</p>
    <p>modified data</p>
    <p>Storage Server</p>
  </div>
  <div class="page">
    <p>End-to-End Encryption [CFS, SiRiUS, Plutus, etc.]</p>
    <p>Storage Server</p>
    <p>File A:</p>
    <p>File B:</p>
    <p>ACL:</p>
    <p>ACL:</p>
    <p>Content:</p>
    <p>Content:</p>
    <p>Bob, Oncologist</p>
    <p>Alice, Oncologist</p>
    <p>Alice</p>
    <p>Oncologist</p>
  </div>
  <div class="page">
    <p>Privacy Leakage in E2EE Data Sharing</p>
    <p>Storage Server</p>
    <p>File B:</p>
    <p>ACL:</p>
    <p>Content:</p>
    <p>Alice, Oncologist</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Alice has access to File B Oncologist has access to File B Alice accesses File B Oncologist accesses File B</p>
  </div>
  <div class="page">
    <p>Ghostor: Cryptographic Data-Sharing System</p>
    <p>Anonymity</p>
    <p>Verifiable Linearizability</p>
  </div>
  <div class="page">
    <p>Ghostor: Cryptographic Data-Sharing System</p>
    <p>Anonymity</p>
    <p>Verifiable Linearizability</p>
  </div>
  <div class="page">
    <p>Privacy Leakage in E2EE Data Sharing</p>
    <p>Storage Server</p>
    <p>File B:</p>
    <p>ACL:</p>
    <p>Content:</p>
    <p>Alice, Oncologist</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Alice has access to File B Oncologist has access to File B Alice accesses File B Oncologist accesses File B</p>
  </div>
  <div class="page">
    <p>E2EE Data Sharing vs. Ghostors Anonymity</p>
    <p>Storage Server</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Alice has access to File B Oncologist has access to File B Alice accesses File B Oncologist accesses File B</p>
    <p>E2EE Data Sharing</p>
  </div>
  <div class="page">
    <p>E2EE Data Sharing vs. Ghostors Anonymity</p>
    <p>Storage Server</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Alice has access to File B Oncologist has access to File B Alice accesses File B Oncologist accesses File B</p>
    <p>E2EE Data Sharing</p>
    <p>Storage Server</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>UNKNOWN has access to File B UNKNOWN accesses File B UNKNOWN accesses File B</p>
    <p>What files did Alice access? Is she part of the system?</p>
    <p>Ghostors Anonymity</p>
  </div>
  <div class="page">
    <p>E2EE Data Sharing vs. Ghostors Anonymity</p>
    <p>Storage Server</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Alice has access to File B Oncologist has access to File B Alice accesses File B Oncologist accesses File B</p>
    <p>E2EE Data Sharing</p>
    <p>Storage Server</p>
    <p>UNKNOWN has access to File B UNKNOWN accesses File B UNKNOWN accesses File B</p>
    <p>What files did Alice access? Is she part of the system?</p>
    <p>Ghostors Anonymity</p>
  </div>
  <div class="page">
    <p>E2EE Data Sharing vs. Ghostors Anonymity</p>
    <p>Storage Server</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Alice has access to File B Oncologist has access to File B Alice accesses File B Oncologist accesses File B</p>
    <p>E2EE Data Sharing</p>
    <p>Storage Server</p>
    <p>UNKNOWN has access to File B UNKNOWN accesses File B UNKNOWN accesses File B</p>
    <p>What files did Alice access? Is she part of the system?</p>
    <p>Ghostors Anonymity</p>
    <p>Ghostor-MH is a theoretical scheme that also hides</p>
    <p>access patterns (see paper)</p>
  </div>
  <div class="page">
    <p>Ghostor: Cryptographic Data-Sharing System</p>
    <p>Anonymity</p>
    <p>Verifiable Linearizability</p>
  </div>
  <div class="page">
    <p>Verifiable Linearizability</p>
    <p>Storage Server</p>
    <p>File A:</p>
    <p>File B:</p>
    <p>ACL:</p>
    <p>ACL:</p>
    <p>Content:</p>
    <p>Content:</p>
    <p>Bob, Oncologist</p>
    <p>Alice, Oncologist</p>
    <p>No allergy</p>
    <p>Alice</p>
    <p>Oncologist</p>
    <p>Allergic to X</p>
  </div>
  <div class="page">
    <p>Verifiable Linearizability</p>
    <p>Storage Server</p>
    <p>File A:</p>
    <p>File B:</p>
    <p>ACL:</p>
    <p>ACL:</p>
    <p>Content:</p>
    <p>Content:</p>
    <p>Bob, Oncologist</p>
    <p>Alice, Oncologist No allergy</p>
    <p>Alice</p>
    <p>Oncologist Allergic to X User can detect if he receives anything other than the latest write</p>
  </div>
  <div class="page">
    <p>Comparison to Existing Work</p>
    <p>Rely on Central Trust  Split server into two</p>
    <p>parts and assume one is honest, or</p>
    <p>Assume semi-honest adversary</p>
    <p>Ghostor</p>
    <p>Anonymity and Verifiable Linearizability</p>
    <p>Verena [KFPC16]: Verifiable Linearizability</p>
    <p>AnonymousCloud [KH12]: Anonymity</p>
    <p>Based on Decentralized Trust  Avoids placing trust in a</p>
    <p>few central machines</p>
  </div>
  <div class="page">
    <p>Bootstrapping Decentralized Trust</p>
    <p>Storage System based on</p>
    <p>Decentralized Trust</p>
    <p>Blockchain</p>
    <p>Transparency Logs Peer-to-Peer Bootstrap</p>
  </div>
  <div class="page">
    <p>Strawman: Use a Blockchain</p>
    <p>Users Machine</p>
    <p>Ghostor Client</p>
    <p>Blockchain</p>
    <p>read, write, create files</p>
    <p>Expensive!</p>
  </div>
  <div class="page">
    <p>Ghostors System Architecture</p>
    <p>Ghostor Storage Server</p>
    <p>Users Machine</p>
    <p>Ghostor Client</p>
    <p>Blockchain</p>
    <p>checkpoint</p>
    <p>checkpoint</p>
    <p>One checkpoint for the entire system once per epoch</p>
    <p>summary of operations</p>
    <p>checkpoint</p>
  </div>
  <div class="page">
    <p>History for each object is recorded as a hash chain of digests</p>
    <p>History is committed to blockchain at the end of each epoch</p>
    <p>Server Storage</p>
    <p>Blockchain</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>Write</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>End of Epoch 1</p>
    <p>Checkpoint: Epoch 1 Hash(Latest Digest)</p>
    <p>Chmod</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Write</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>Verifiable History (Strawman)</p>
  </div>
  <div class="page">
    <p>How to make Verifiable History Anonymous?</p>
    <p>Signing keys are like capabilities</p>
    <p>Idea: have different users share capabilities for each object</p>
  </div>
  <div class="page">
    <p>Shared Capabilities</p>
    <p>Header:</p>
    <p>Content:</p>
    <p>Object Data</p>
    <p>PKAlice PKDoctor</p>
    <p>WSK</p>
    <p>Key-Private Encryption</p>
    <p>WSK Padding</p>
    <p>PSK</p>
    <p>Stored by the objects owner</p>
    <p>RSK</p>
    <p>RSK</p>
    <p>RSK</p>
    <p>Might reveal users public keys!</p>
    <p>Permission Signing Key</p>
    <p>Reader Signing Key</p>
    <p>Writer Signing Key</p>
    <p>Anonymously Distributed Shared Capabilities</p>
  </div>
  <div class="page">
    <p>History for each object is recorded as a hash chain of digests</p>
    <p>History is committed to blockchain at the end of each epoch</p>
    <p>Server Storage</p>
    <p>Blockchain</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>Write</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>End of Epoch 1</p>
    <p>Checkpoint: Epoch 1 Hash(Latest Digest)</p>
    <p>Chmod</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Write</p>
    <p>Signed by Alice</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Signed by Doctor</p>
    <p>Signed by Server</p>
    <p>Verifiable History (Strawman)</p>
  </div>
  <div class="page">
    <p>History for each object is recorded as a hash chain of digests</p>
    <p>History is committed to blockchain at the end of each epoch</p>
    <p>Server Storage</p>
    <p>Blockchain</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Signed by PSK</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by RSK</p>
    <p>Signed by Server</p>
    <p>Write</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by WSK</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by RSK</p>
    <p>Signed by Server</p>
    <p>End of Epoch 1</p>
    <p>Checkpoint: Epoch 1 Hash(Latest Digest)</p>
    <p>Chmod</p>
    <p>Signed by PSK</p>
    <p>Signed by Server</p>
    <p>Write</p>
    <p>Signed by WSK</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Signed by RSK</p>
    <p>Signed by Server</p>
    <p>Read</p>
    <p>Signed by RSK</p>
    <p>Signed by Server</p>
    <p>Verifiable Anonymous History</p>
  </div>
  <div class="page">
    <p>Additional Challenge: Concurrent Operations</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Signed by PSK</p>
    <p>Signed by Server</p>
    <p>Read Hash(Previous)</p>
    <p>Signed by RSK</p>
    <p>Read Hash(Previous)</p>
    <p>Signed by RSK</p>
    <p>Suppose Alice and Doctor read the object concurrently</p>
    <p>Both see the same latest digest</p>
  </div>
  <div class="page">
    <p>Additional Challenge: Concurrent Operations</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Signed by PSK</p>
    <p>Signed by Server</p>
    <p>Suppose Alice and Doctor read the object concurrently</p>
    <p>Both see the same latest digest</p>
    <p>Read Hash(Previous)</p>
    <p>Signed by RSK</p>
    <p>Read Hash(Previous)</p>
    <p>Signed by RSK</p>
  </div>
  <div class="page">
    <p>Additional Challenge: Concurrent Operations</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Signed by PSK</p>
    <p>Signed by Server</p>
    <p>Suppose Alice and Doctor read the object concurrently</p>
    <p>Both see the same latest digest</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by RSK</p>
    <p>Signed by Server</p>
    <p>Read Hash(Previous)</p>
    <p>Signed by RSK</p>
    <p>Wrong Hash(Previous)!</p>
  </div>
  <div class="page">
    <p>Insight: Client Signs over only Some Fields</p>
    <p>Hash(Object) Hash(Previous)</p>
    <p>Server</p>
    <p>Read Nonce</p>
    <p>RSK</p>
    <p>Read</p>
    <p>Hash(Object) Hash(Previous Digest)</p>
    <p>Signed by RSK</p>
    <p>Signed by Server</p>
    <p>becomes</p>
  </div>
  <div class="page">
    <p>Concurrent Reads in Ghostor</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>Server</p>
    <p>Suppose Alice and Doctor read the object concurrently</p>
    <p>Both see the same latest digest</p>
    <p>Read Nonce</p>
    <p>RSK</p>
    <p>Read Nonce</p>
    <p>RSK</p>
    <p>PSK</p>
  </div>
  <div class="page">
    <p>Concurrent Reads in Ghostor</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client Suppose Alice and Doctor read the object concurrently</p>
    <p>Both see the same latest digest</p>
    <p>Hash(Object) Hash(Previous)</p>
    <p>Server</p>
    <p>Hash(Object) Hash(Previous)</p>
    <p>Server</p>
    <p>Read Nonce</p>
    <p>RSK</p>
    <p>Read Nonce</p>
    <p>Read</p>
    <p>RSKServer</p>
    <p>Read</p>
    <p>RSKServer</p>
    <p>RSK</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>ServerPSK</p>
  </div>
  <div class="page">
    <p>This Technique Does Not Work for Writes</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client Suppose Alice writes the file</p>
    <p>Write Nonce Hash(Object) WSK</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>ServerPSK</p>
  </div>
  <div class="page">
    <p>This Technique Does Not Work for Writes</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client Suppose Alice writes the file</p>
    <p>Hash(Previous)</p>
    <p>Server</p>
    <p>Hash(Previous)</p>
    <p>Server</p>
    <p>Write Nonce Hash(Object) WSK</p>
    <p>Write Nonce Hash(Object)</p>
    <p>Write</p>
    <p>WSKServer</p>
    <p>Hash(Previous)</p>
    <p>Server</p>
    <p>Write Nonce Hash(Object) WSKWSK</p>
    <p>Write Nonce Hash(Object) WSK</p>
    <p>Time-Stretch Attack</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>ServerPSK</p>
    <p>Write</p>
    <p>WSKServer</p>
  </div>
  <div class="page">
    <p>Concurrent Writes in Ghostor</p>
    <p>Server Storage</p>
    <p>Alices Client Doctors Client Suppose Alice writes the file</p>
    <p>Hash(Previous)</p>
    <p>Server</p>
    <p>Hash(Previous)</p>
    <p>Server</p>
    <p>Prepare Hash(Object)</p>
    <p>WSK</p>
    <p>Commit Hash(Object) Hash(Prepare)</p>
    <p>Prepare</p>
    <p>WSKServer</p>
    <p>WSK</p>
    <p>Commit</p>
    <p>WSKServer</p>
    <p>Hash(Object) Hash(Previous)</p>
    <p>Server</p>
    <p>Read Nonce</p>
    <p>RSK</p>
    <p>Read</p>
    <p>RSKServer</p>
    <p>Chmod</p>
    <p>Hash(Object) [first operation]</p>
    <p>ServerPSK</p>
  </div>
  <div class="page">
    <p>Ghostor Stack</p>
    <p>Anonymously Distributed Shared Capabilities</p>
    <p>Verifiable Anonymous History</p>
    <p>Concurrent Operations</p>
    <p>Preventing Resource Abuse</p>
    <p>Hiding Network Information</p>
    <p>Ghostor-MH</p>
  </div>
  <div class="page">
    <p>Ghostor Stack</p>
    <p>Anonymously Distributed Shared Capabilities</p>
    <p>Verifiable Anonymous History</p>
    <p>Concurrent Operations</p>
    <p>Preventing Resource Abuse</p>
    <p>Hiding Network Information</p>
    <p>Ghostor-MH</p>
    <p>Described in our paper</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implemented Ghostor prototype in Go</p>
    <p>Built on top of Ceph RADOS  Linearizable, distributed, fault-tolerant object store</p>
    <p>Benchmarked on Amazon EC2 in multi-node, multi-SSD setup</p>
  </div>
  <div class="page">
    <p>Server-Side Latency to PUT a 1 MiB Object</p>
    <p>Insecure End-to-End Encryption</p>
    <p>Anonymity Fork Consistency</p>
    <p>Verifiable Linearizability</p>
    <p>Ghostor</p>
    <p>La te</p>
    <p>n cy</p>
    <p>( m</p>
    <p>s)</p>
    <p>Small Overhead</p>
    <p>Small Overhead</p>
  </div>
  <div class="page">
    <p>Server-Side Latency to PUT a 1 MiB Object</p>
    <p>Insecure End-to-End Encryption</p>
    <p>Anonymity Fork Consistency</p>
    <p>Verifiable Linearizability</p>
    <p>Ghostor</p>
    <p>La te</p>
    <p>n cy</p>
    <p>( m</p>
    <p>s)</p>
  </div>
  <div class="page">
    <p>Total Latency</p>
    <p>To hide network information, Ghostor clients use the Tor anonymity network to contact the server</p>
    <p>With Tor, overall latency is several seconds</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Ghostor is a cryptographic data sharing system based on decentralized trust</p>
    <p>It achieves:</p>
    <p>Anonymity: server cannot tell which user makes an access</p>
    <p>Verifiable Linearizability: users detect if they dont receive the latest data</p>
    <p>Ghostors techniques could significantly boost the security guarantees of:</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Ghostor is a cryptographic data sharing system based on decentralized trust.</p>
    <p>It achieves:</p>
    <p>Anonymity: server cannot tell which user makes an access</p>
    <p>Verifiable Linearizability: users detect if they dont receive the latest data</p>
    <p>This material is based on work supported by the National Science Foundation Graduate Research Fellowship Program under Grant No. DGE-1752814. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.</p>
    <p>Thank you!</p>
  </div>
</Presentation>
