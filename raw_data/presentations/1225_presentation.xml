<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Adaptively Parallelizing Distributed Range Queries</p>
    <p>Ymir Vigfusson</p>
    <p>Adam Silberstein</p>
    <p>Brian Cooper</p>
    <p>Rodrigo Fonseca</p>
  </div>
  <div class="page">
    <p>Well understood database tasks are challenging again at web-scale  Millions of users  Terabytes of data  Low latency essential</p>
    <p>Shared-nothing databases</p>
    <p>Scale by adding servers with local disks</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>PNUTS</p>
    <p>Workload:  Analogous to OLTP  Random reads and updates of</p>
    <p>individual records  Online applications</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Important for web workloads  Time ordered data</p>
    <p>Range Queries</p>
    <p>Listing date Item for sale 07-24-2009 Used cowbell 08-10-2009 2003 Toyota 08-15-2009 Red Snuggie 08-18-2009 1930 Ford 08-22-2009 Harpsicord</p>
    <p>Listing date Item for sale 07-24-2009 Used cowbell 08-10-2009 2003 Toyota 08-15-2009 Red Snuggie 08-18-2009 1930 Ford 08-22-2009 Harpsicord</p>
    <p>New items</p>
  </div>
  <div class="page">
    <p>Important for web workloads  Time ordered data  Secondary indexes</p>
    <p>Range Queries</p>
    <p>Price Item ID $20 1727 $100 971 $1,500 251 $5,000 5578 $10,000 4921</p>
    <p>Item ID Item 1727 Used cowbell 4921 2003 Toyota 971 Red Snuggie 5578 Harpsicord 251 1930 Ford</p>
    <p>Item ID Item 1727 Used cowbell 4921 2003 Toyota 971 Red Snuggie 5578 Harpsicord 251 1930 Ford</p>
    <p>Price Item ID $20 1727 $100 971 $1,500 251 $5,000 5578 $10,000 4921</p>
    <p>Index Base Table</p>
  </div>
  <div class="page">
    <p>Important for web workloads  Time ordered data  Secondary indexes  etc.</p>
    <p>Could scan large fraction of the table  Short time to first result is crucial  Possibly a large number of results  Predicate might be selective</p>
    <p>Range Queries</p>
    <p>FIND ITEMS UNDER $100 WHERE Category =Cars AND Quantity&gt;0 FIND ITEMS OVER $100</p>
  </div>
  <div class="page">
    <p>Makes sense to parallelize queries  Tables are partitioned over many</p>
    <p>servers</p>
    <p>How parallel should a query be?  Too sequential: Slow rate of results  Too parallel: Client overloaded, wasting</p>
    <p>server resources</p>
    <p>Executing Range Queries</p>
  </div>
  <div class="page">
    <p>Makes sense to parallelize queries  Tables are partitioned over many</p>
    <p>servers</p>
    <p>How parallel should a query be?  Too sequential: Slow rate of results  Too parallel: Client overloaded, wasting</p>
    <p>server resources</p>
    <p>Executing Range Queries</p>
  </div>
  <div class="page">
    <p>PNUTS 101</p>
    <p>Routers</p>
    <p>Storage Units</p>
    <p>Partition map</p>
    <p>Load balancer</p>
    <p>Server monitor</p>
    <p>Partition Controller</p>
    <p>A</p>
    <p>B</p>
    <p>T</p>
    <p>L</p>
    <p>E</p>
    <p>Clients</p>
    <p>get set</p>
    <p>delete</p>
  </div>
  <div class="page">
    <p>Routers</p>
    <p>PNUTS + Range scans</p>
    <p>Clients</p>
    <p>Storage Units</p>
    <p>SCAN</p>
    <p>q = query</p>
    <p>= ideal parallelism level</p>
    <p>sL</p>
    <p>s</p>
    <p>= ideal server concurrency</p>
    <p>get set</p>
    <p>delete getrange</p>
  </div>
  <div class="page">
    <p>Equals number of disks (experimentally)  In our testbed,</p>
    <p>When does parallelism help?  range size: longer = more benefit  query selectivity: fewer results = more benefit  client speed: faster = more benefit</p>
    <p>Diminishing returns</p>
    <p>Range query parameters</p>
    <p>= ideal parallelism level</p>
    <p>sL = ideal server concurrency</p>
  </div>
  <div class="page">
    <p>Determining</p>
    <p>As shown, many influential factors  End-to-end insight: match rate of</p>
    <p>new results to clients uptake rate</p>
    <p>% Client Capacity</p>
  </div>
  <div class="page">
    <p>Determining</p>
    <p>% Client Capacity</p>
    <p>As shown, many influential factors  End-to-end insight: match rate of</p>
    <p>new results to clients uptake rate  Hard to measure client rate directly</p>
  </div>
  <div class="page">
    <p>On Heads  Increase K by 1  Improvement?</p>
    <p>Keep increasing K  No? Revert to old K</p>
    <p>On Tails  Decrease K by 1  Performance same?</p>
    <p>Keep decreasing K  No? Revert to old K</p>
    <p>Adaptive server allocation (ASA)</p>
    <p>Time</p>
    <p>Optimal</p>
    <p>K = 1</p>
    <p>Measure client uptake speed  If higher, increase K by 1 and</p>
    <p>repeat</p>
    <p>Client saturated, enter next phase</p>
    <p>Periodically, flip a coin</p>
  </div>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>Time</p>
    <p>Real</p>
    <p>K = 1</p>
    <p>Measure client uptake speed  If higher, increase K by 1 and</p>
    <p>repeat</p>
    <p>Client saturated, enter next phase</p>
    <p>Periodically, flip a biased coin w.p. 2/3  On heads, increase or decrease K by 1  If no improvement, revert to old K  Otherwise, keep K and go in the same direction next time we change it.</p>
    <p>A</p>
    <p>B</p>
    <p>T A</p>
    <p>B</p>
    <p>T</p>
    <p>L</p>
    <p>E</p>
    <p>Experimental Testbed</p>
    <p>x 4Clients</p>
    <p>Routers</p>
    <p>Storage Units</p>
    <p>x 1</p>
    <p>x 10</p>
  </div>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>x 1</p>
  </div>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>x 4</p>
  </div>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>x 4</p>
  </div>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>x 2</p>
    <p>K=5 K=5 K=2 K=8</p>
  </div>
  <div class="page">
    <p>Single Client</p>
    <p>Routers</p>
    <p>Clients</p>
    <p>Storage Units</p>
    <p>SCAN</p>
  </div>
  <div class="page">
    <p>Multiple Clients</p>
    <p>Clients</p>
    <p>Routers</p>
    <p>Storage Units</p>
    <p>SCAN SCAN</p>
  </div>
  <div class="page">
    <p>Multiple Clients</p>
    <p>Clients</p>
    <p>Routers</p>
    <p>Storage Units</p>
    <p>SCAN SCAN Scheduler</p>
  </div>
  <div class="page">
    <p>Scheduler Service</p>
    <p>Scan engine shares query information with central scheduler  Servers which hold needed partitions  Parallelism level</p>
    <p>Scheduler decides on who-should-gowhere-when to minimize contention</p>
    <p>How do we schedule multiple queries?</p>
    <p>qK</p>
  </div>
  <div class="page">
    <p>Scheduler Service</p>
    <p>Scan engine shares query information with central scheduler  Servers which hold needed partitions  Parallelism level</p>
    <p>Scheduler decides on who-should-gowhere-when to minimize contention</p>
    <p>How do we schedule multiple queries?</p>
    <p>qK</p>
  </div>
  <div class="page">
    <p>Scheduling Wishlist</p>
    <p>a) All queries should finish quickly b) Give preference to higher priority queries c) Prefer steady rate of results over bursts</p>
  </div>
  <div class="page">
    <p>Scheduling Wishlist</p>
    <p>a) All queries should finish quickly b) Give preference to higher priority queries c) Prefer steady rate of results over bursts</p>
    <p>Thm: The makespan of any greedy heuristic is at most 2OPT</p>
    <p>= Minimize makespan</p>
  </div>
  <div class="page">
    <p>Scheduling Heuristic</p>
    <p>a) All queries should finish quickly b) Give preference to higher priority queries c) Prefer steady rate of results over bursts</p>
    <p>Greedily schedule queries in order by</p>
    <p>Current idle period</p>
    <p>Priority preference parameter</p>
  </div>
  <div class="page">
    <p>Scheduler - Priority</p>
    <p>Priority=1</p>
    <p>Priority=2</p>
    <p>Priority=4</p>
  </div>
  <div class="page">
    <p>Scheduler  Result stream</p>
    <p>Priority=1</p>
    <p>Priority=4</p>
  </div>
  <div class="page">
    <p>Scheduler</p>
    <p>All queries should finish quickly Give preference to higher priority queries Prefer steady rate of results over bursts</p>
  </div>
  <div class="page">
    <p>Conclusion Supporting range queries at web-scale is challenging</p>
    <p>Too little: client suffers, too much: servers suffer</p>
    <p>Adaptive server allocation algorithm</p>
    <p>Greedy algorithm run by central scheduler Provably short makespan Respects priorities and provides a steady stream of results</p>
    <p>Our solution is entering production soon.</p>
    <p>How parallel should a query be?</p>
    <p>How do we schedule multiple queries?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>x 1</p>
    <p>K=2</p>
    <p>K=3</p>
    <p>K=5</p>
    <p>K=8</p>
  </div>
  <div class="page">
    <p>Scheduling Wishlist</p>
    <p>a) All queries should finish quickly b) Give preference to higher priority queries c) Prefer steady rate of results over bursts</p>
    <p>Thm: The makespan of any greedy heuristic is at most 2OPT</p>
    <p>Thm: OPT is exactly</p>
    <p>= Minimize makespan</p>
  </div>
  <div class="page">
    <p>Scheduling Wishlist</p>
    <p>E.g., gold/silver/bronze customers Or minimum completion time = OPT</p>
    <p>Priority bias parameter Greater penalty</p>
    <p>for long idle time</p>
    <p>Set of idle time periods</p>
    <p>a) All queries should finish quickly b) Give preference to higher priority queries c) Prefer steady rate of results over bursts</p>
  </div>
  <div class="page">
    <p>Impact of parallelism</p>
    <p>Range size: Longer queries = more benefit from parallelism.  Diminishing returns</p>
    <p>Query Selectivity: Fewer results = more benefit from parallelism  Client Rate: Faster clients = more benefit from parallelism</p>
    <p>Saturated clients do not benefit from extra servers</p>
  </div>
  <div class="page">
    <p>Scheduler - Priority</p>
    <p>Greedily schedule queries in order by</p>
    <p>Current idle period</p>
    <p>Query lengths 1,2,4,8%</p>
    <p>Max. completion time</p>
    <p>Avg. completion time</p>
    <p>Time of first result</p>
  </div>
  <div class="page">
    <p>Scheduler - Priority</p>
    <p>Greedily schedule queries in order by</p>
    <p>Query lengths 1,2,4,8% Different priorities</p>
  </div>
  <div class="page">
    <p>Road map</p>
    <p>System and problem overview  Adaptive server allocation  Multi-query scheduling  Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental test bed</p>
    <p>Clients</p>
    <p>A</p>
    <p>B</p>
    <p>T</p>
    <p>L</p>
    <p>E</p>
    <p>Clients</p>
    <p>Routers</p>
    <p>Storage Units</p>
    <p>x 1</p>
    <p>x 10</p>
    <p>x 4 20M records 1024 partitions</p>
  </div>
  <div class="page">
    <p>Adaptive server allocation (ASA)</p>
    <p>x 4</p>
  </div>
  <div class="page">
    <p>PNUTS 101</p>
    <p>Clients</p>
    <p>Routers</p>
    <p>Storage Units</p>
    <p>Partition map</p>
    <p>Load balancer</p>
    <p>Server monitor</p>
    <p>Tablet Controller</p>
    <p>T</p>
    <p>A</p>
    <p>B</p>
    <p>L</p>
    <p>E</p>
    <p>A</p>
    <p>B</p>
    <p>T L</p>
    <p>E</p>
  </div>
</Presentation>
