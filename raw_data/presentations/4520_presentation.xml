<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Systematic Implementation of Real-Time Models</p>
    <p>M. De Wulf, L. Doyen,J.-F. Raskin</p>
    <p>Universit Libre de Bruxelles Centre Fdr en Vrification</p>
  </div>
  <div class="page">
    <p>Model-based Development for Controllers</p>
    <p>Make a model of the environment Environment</p>
    <p>Make clear the control objective: Bad</p>
    <p>Make a model of your control strategy: ControllerMod</p>
    <p>Verify : Does Environment || ControllerMod avoid Bad?</p>
    <p>Good, but after ?</p>
    <p>Text</p>
  </div>
  <div class="page">
    <p>Goal</p>
    <p>Transfer of verified properties from models to code.</p>
    <p>Type of models we consider:  Controllers specified as timed automata</p>
  </div>
  <div class="page">
    <p>The Big picture Timed Controller</p>
    <p>Verification model</p>
    <p>Code</p>
    <p>Desired Properties</p>
    <p>OK ?</p>
    <p>Automatic Generation</p>
    <p>Verification</p>
    <p>Property Preservation</p>
  </div>
  <div class="page">
    <p>Outline of the talk</p>
    <p>Problems to implement T.A.</p>
    <p>AASAP semantics</p>
    <p>Verification in practice</p>
    <p>Case Study</p>
    <p>Code Generation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Timed automata are (in general) not implementable (in a formal sense)...</p>
    <p>Why ?</p>
    <p>Zenoness : 1/2, 3/4, 7/8, ...</p>
    <p>No minimal bound between two transitions : 1/2,1,1+3/4,2,2+7/8,3,...</p>
    <p>And more ...</p>
  </div>
  <div class="page">
    <p>More...</p>
    <p>One can specify instantaneous responses but not implement them.</p>
    <p>Not implementable</p>
  </div>
  <div class="page">
    <p>More...</p>
    <p>Instantaneous synchronisations between environment and controller are not implementable.</p>
    <p>Environment</p>
    <p>Not implementable Controller</p>
  </div>
  <div class="page">
    <p>More...</p>
    <p>Models use continuous clocks and implementations use digital clocks with finite precision</p>
    <p>Not implementable</p>
    <p>V.S</p>
  </div>
  <div class="page">
    <p>Problems : Summary</p>
    <p>My controller stragegy may be correct because  ... it is zeno...</p>
    <p>... it acts faster and faster?</p>
    <p>... it reacts instanteously to events, timeouts,...? (synchrony hypothesis)</p>
    <p>... it uses infinitely precise clocks?</p>
    <p>Text</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Outline of the talk</p>
    <p>Problems to implement T.A.</p>
    <p>AASAP semantics</p>
    <p>Verification in practice</p>
    <p>Case Study</p>
    <p>Code Generation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>A possible solution...</p>
    <p>Give an alternative semantics to timed automata : Almost ASAP semantics.</p>
    <p>Semantics parameterized by  in Q+</p>
    <p>enabled transitions of the controller become urgent only after  time units;</p>
    <p>events from the environment are received by the controller within  time units;</p>
    <p>truth values of guards are enlarged by f()</p>
  </div>
  <div class="page">
    <p>Intuition...</p>
    <p>One can specify instantaneous responses but not implement them.</p>
    <p>Not implementable Solution : allow some delay</p>
  </div>
  <div class="page">
    <p>Intuition...</p>
    <p>Instantaneous synchronizations between environment and controller are not implementable.</p>
    <p>Environment</p>
    <p>Not implementable Solution : Uncouple event from perception by the controller</p>
  </div>
  <div class="page">
    <p>Intuition...</p>
    <p>Models use continuous clocks and implementations use digital clocks with finite precision</p>
    <p>Not implementable Solution : Slightly relax the constraints</p>
    <p>V.S</p>
  </div>
  <div class="page">
    <p>Intuition</p>
    <p>AASAP semantics defines a tube of strategies instead of a unique strategy in the ASAP semantics.</p>
    <p>This tube can be refined into an implementation while preserving safety properties verified on the AASAP</p>
    <p>semantics</p>
    <p>ASAP semantics</p>
    <p>Implementation</p>
    <p>AASAP semantics</p>
    <p>f()</p>
  </div>
  <div class="page">
    <p>Outline of the talk</p>
    <p>Problems to implement T.A.</p>
    <p>AASAP semantics</p>
    <p>Verification in practice</p>
    <p>Case Study</p>
    <p>Code Generation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Verification</p>
    <p>The question that we ask when we make verification is no more:</p>
    <p>Does Environment || ControllerMod avoid Bad ?</p>
    <p>But: For which values of</p>
    <p>does Environment || ControllerMod() avoid Bad ?</p>
  </div>
  <div class="page">
    <p>Verification in practice ?</p>
    <p>The AASAP semantics can be coded into a parametric timed automata with only one clock compared to the</p>
    <p>parameter  in Q+ ...</p>
    <p>... But the initial coding we proposed in [DDR04] multiplied the number of locations by 2|input labels| !</p>
    <p>So, how to allow verification of large examples ?</p>
  </div>
  <div class="page">
    <p>Compositional Construction</p>
    <p>A model-checker like Uppaal constructs state space on the fly</p>
    <p>So, compositional construction : parallel composition of small automatas (called widgets) to encode AASAP</p>
    <p>semantics</p>
    <p>Number of locations polynomial in the size of the original model</p>
  </div>
  <div class="page">
    <p>Non-Compositional Compositional</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problems to implement T.A.</p>
    <p>AASAP semantics</p>
    <p>Verification in practice</p>
    <p>Case Study</p>
    <p>Code Generation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>A case study The Philips Audio Control Protocol</p>
    <p>extTextTxt</p>
    <p>Sender Receiver</p>
    <p>Observer</p>
    <p>Timed Manchester encoding</p>
  </div>
  <div class="page">
    <p>Properties /requirements for the protocol</p>
    <p>the receiver knows the length of a time slot but ignores when it begins;</p>
    <p>the receiver ignores length of the current bit string;</p>
    <p>only UP signals can be perceived reliably;</p>
    <p>S/R uses (unsync.) digital clocks : there will be imprecision in sending and perceived receiving times;</p>
    <p>Sensors are polled every time slice : discrepancy between occurence of UP events and detection.</p>
    <p>... 3 first items should be dealt with by the logic of the</p>
    <p>protocol, 2 last items are related to robustness of the</p>
    <p>protocol : the AASAP-semantics deals with it.</p>
  </div>
  <div class="page">
    <p>Application of the methodology</p>
    <p>Model (idealized) sender and receiver using the synchrony hypothesis</p>
    <p>Check for robustness : for which  :</p>
    <p>does Sender() || Receiver() || Observer avoid Bad ?  Generate correct code for RCX</p>
  </div>
  <div class="page">
    <p>Outline of the talk</p>
    <p>Problems to implement T.A.</p>
    <p>AASAP semantics</p>
    <p>Verification in practice</p>
    <p>Case Study</p>
    <p>Code Generation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Code Generation</p>
    <p>We simply annotate the transitions of the model with simple C code instructions</p>
    <p>For example : -in the model of the sender, the next bit to be sent is choosen non-deterministically : r=S[i]; i++; -in the model of the receiver, on a transition decoding a one : i++; R[i]=0;</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problems to implement T.A.</p>
    <p>AASAP semantics</p>
    <p>Verification in practice</p>
    <p>Case Study</p>
    <p>Code Generation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Almost ASAP semantics :  is implementable!</p>
    <p>is verifiable, even for non-trivial case studies!</p>
    <p>guarantees correct code and not only correct idealized model !</p>
    <p>is tool-supported !</p>
  </div>
  <div class="page">
    <p>Further Informations</p>
    <p>[DDR04] M. De Wulf, L. Doyen, J.-F. Raskin. Almost ASAP Semantics: From Timed Model to Timed Implementation. LNCS 2993, HSCC 2004.</p>
    <p>Journal Version to appear in Formal Aspects of Computing  http://www.ulb.ac.be/di/ssd/madewulf/aasap/</p>
    <p>Thank You</p>
  </div>
  <div class="page">
    <p>Proof of implementability ? [DDR04]</p>
    <p>We define an implementation semantics based on:</p>
    <p>The timed behaviour of this scheme is determined by two values :</p>
    <p>Time length of a loop : L  Time between two clock ticks : P</p>
    <p>We prove that this semantics is simulated (in the formal sense) by the AASAP-semantics if 3 DL + 4 DP &lt; D</p>
    <p>Read System Clock Read sensor values Check all transitions and fire one if possible</p>
  </div>
  <div class="page">
    <p>ASAP</p>
    <p>ASAP</p>
    <p>ASAP</p>
    <p>Only urgent if the 3 automata are in a location with an ASAP transition</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>To specify urgency compositionally : use of the ASAP flag on transitions</p>
    <p>Compositional Construction</p>
  </div>
  <div class="page">
    <p>Widget 1 : Event-Watcher</p>
    <p>Record event a; Wait at most D unit of time   before making the viewing of a urgent.</p>
  </div>
  <div class="page">
    <p>Widget 2 : Guard-Watcher</p>
    <p>Makes enabled transition in location l urgent D units of time after they became enabled.</p>
    <p>If a transition is enabled when x&gt; 3 It becomes urgent when x&gt; 3 + D</p>
  </div>
</Presentation>
