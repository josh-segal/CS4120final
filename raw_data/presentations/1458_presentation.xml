<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Denise Demirel, Jeroen van de Graaf, Roberto Arajo</p>
    <p>Improving Helios with Everlasting Privacy</p>
    <p>Towards the Public</p>
  </div>
  <div class="page">
    <p>Helios</p>
    <p>Introduced 2008 by Ben Adida</p>
    <p>Web application for Internet voting</p>
    <p>Online accessible:</p>
    <p>Easy to use, free of charge, provides end-to-end verifiability</p>
    <p>Tool to support elections for companies, online groups,</p>
    <p>President of the Universit Catholique de Louvain (2009)</p>
    <p>Princeton Undergraduate Student Government election (2009)</p>
  </div>
  <div class="page">
    <p>Helios Election Process (1)</p>
    <p>a) User creates election by setting parameters</p>
    <p>and list of eligible voters.</p>
    <p>b) Software generates election templates (e.g.</p>
    <p>ballot, key pair for threshold decryption).</p>
    <p>a) Voter receives email containing username,</p>
    <p>password, URL,...</p>
    <p>b) Single-page JavaScript application starts</p>
    <p>and downloads parameters and templates.</p>
    <p>Application</p>
    <p>Helios Server</p>
    <p>Voter @</p>
  </div>
  <div class="page">
    <p>c) Voter fills out the ballot, which is encrypted by the</p>
    <p>application.</p>
    <p>d) Hash of encrypted vote is shown to the voter.</p>
    <p>e) The voter has the option to audit.</p>
    <p>In this case go back to step 2c).</p>
    <p>f) Application clears scope, voter authenticates</p>
    <p>g) ID, password, encrypted vote and proofs are</p>
    <p>sent to the Helios server which responds with a</p>
    <p>success message.</p>
    <p>h) The Helios server sends the voter an email</p>
    <p>containing the hash of the cast vote.</p>
    <p>Helios Election Process (2)</p>
    <p>Application</p>
    <p>Helios Server</p>
    <p>Voter</p>
    <p>#</p>
    <p>#</p>
  </div>
  <div class="page">
    <p>Bulletin Board</p>
    <p>Election outcome</p>
    <p>Voter 1:</p>
    <p>Voter 2:</p>
    <p>Voter 3:</p>
    <p>Voter 4:</p>
    <p>Helios Election Process (3)</p>
    <p>a) The Helios server publishes the</p>
    <p>encrypted votes, hashes and proofs on</p>
    <p>the Bulletin Board.</p>
    <p>b) The Helios server computes the election</p>
    <p>outcome.</p>
    <p>Mixing + decryption + tallying</p>
    <p>Homomorphic tallying + decryption</p>
    <p>Helios Server</p>
    <p>#</p>
    <p>#</p>
    <p>#</p>
    <p>#</p>
    <p>#</p>
  </div>
  <div class="page">
    <p>Tallying and Publishing of Votes</p>
    <p>Vote is represented as vector 1,, .</p>
    <p>Vote for candidate  is vector where =1 and =0 for   .</p>
    <p>Each entry is encrypted individually using exponential ElGamal.</p>
    <p>Votes for each candidate are tallied homomorphically and decrypted.</p>
    <p>Decryption results in   (need to solve DL, but here values are small).</p>
    <p>Voters Candidate 1 Candidate 2  Candidate n</p>
    <p>Voter 1</p>
    <p>:</p>
    <p>Voter V</p>
    <p>(1 1 ) :</p>
    <p>(1  )</p>
    <p>(2 1 ) :</p>
    <p>(2  )</p>
    <p>:</p>
    <p>( 1 ) :</p>
    <p>(  )</p>
    <p>Total (1  ) (2  )  (  )</p>
    <p>Equals ( 1  ) ( 2  )  (   )</p>
  </div>
  <div class="page">
    <p>Individual Verifiability</p>
    <p>Universal Verifiability</p>
    <p>Correctness</p>
    <p>Computational Privacy</p>
    <p>Properties</p>
    <p>Voter</p>
    <p>#</p>
    <p>Bulletin Board</p>
    <p>Election outcome</p>
    <p>Voter 1:</p>
    <p>Voter 2:</p>
    <p>Voter 3:</p>
    <p>Voter 4:</p>
    <p>#</p>
    <p>#</p>
    <p>#</p>
    <p>#</p>
  </div>
  <div class="page">
    <p>Computational Privacy</p>
    <p>Homomorphic Public-Key Cryptography e.g. Paillier, ElGamal</p>
    <p>Computational Assumptions</p>
    <p>Brute-Force</p>
    <p>Principle of free suffrage</p>
  </div>
  <div class="page">
    <p>Helios Providing Everlasting Privacy Towards</p>
    <p>the Public</p>
    <p>Goal: Having all published data (Bulletin Board, receipts),</p>
    <p>even a computationally unbounded attacker cannot reveal</p>
    <p>the cast voting decision.</p>
    <p>Solution: Encryption of the cast voting decision using a</p>
    <p>One-Time-Pad.</p>
    <p>Challenge: How can a pair of voting decision and</p>
    <p>associated key be tallied homomorphically providing</p>
    <p>Verifiability and Everlasting Privacy regarding the</p>
    <p>published information?</p>
  </div>
  <div class="page">
    <p>Encoding using Pedersen Commitments</p>
    <p>Cyclic group G</p>
    <p>Random generators g and h (log unknown and</p>
    <p>computationally hard)</p>
    <p>Encoding of vote t  ||:  , =  with random</p>
    <p>number s  ||.</p>
  </div>
  <div class="page">
    <p>Properties of Pedersen Commitments</p>
    <p>Computational Binding:</p>
    <p>Decrypting (opening) to a different value is impossible given that</p>
    <p>solving Discrete Log is computationally hard.</p>
    <p>1, 1 = 1 1=22</p>
    <p>12=21</p>
    <p>=</p>
    <p>21 12</p>
    <p>Additive Homomorphic:</p>
    <p>1, 1  2, 2 = 11 22=  1+2, 1+2</p>
    <p>Everlasting Privacy:</p>
    <p>The commitment scheme is unconditionally hiding.</p>
  </div>
  <div class="page">
    <p>Modified Election Process (1)</p>
    <p>a) User creates election by setting parameters</p>
    <p>and list of eligible voters.</p>
    <p>b) Software generates election templates (e.g.</p>
    <p>ballot, key pair for threshold decryption,</p>
    <p>parameters for Pedersen Commitment).</p>
    <p>a) Voter receives email containing username,</p>
    <p>password, URL,...</p>
    <p>b) Single-page JavaScript application starts</p>
    <p>and downloads parameters and templates.</p>
    <p>Application</p>
    <p>Helios Server</p>
    <p>Voter @</p>
  </div>
  <div class="page">
    <p>c) Voter marks a choice, which is encoded using</p>
    <p>Pedersen Commitments.</p>
    <p>d) The Hash of the commitment is shown to the voter.</p>
    <p>e) The voter has the option to audit.</p>
    <p>In this case go back to step 2c).</p>
    <p>f) Application clears scope, voter authenticates</p>
    <p>g) ID, password, commitment, encrypted decommitment</p>
    <p>values and proofs are sent to the Helios server which</p>
    <p>responds with a success message.</p>
    <p>h) The Helios server sends the voter an email</p>
    <p>containing the hash of the cast vote.</p>
    <p>Modified Election Process (2)</p>
    <p>Application</p>
    <p>Helios Server</p>
    <p>Voter</p>
    <p>#</p>
    <p>#</p>
    <p>#</p>
  </div>
  <div class="page">
    <p>Everlasting Privacy</p>
    <p>Additional Assumption: There exists a private channel</p>
    <p>between the users browser and the server (e.g. by</p>
    <p>sending keys per mail).</p>
    <p>Additional Property:</p>
    <p>Everlasting Privacy towards the public.</p>
    <p>Attacking this version requires much more work.</p>
    <p>Helios Server</p>
    <p>Application Bulletin Board</p>
    <p>Key Trustees</p>
    <p>,</p>
    <p>*,*</p>
    <p>*,*</p>
  </div>
  <div class="page">
    <p>Modified Tallying Process</p>
    <p>(1)(1)</p>
    <p>: : : :</p>
    <p>V 1  = 1()1()    =</p>
    <p>()()</p>
    <p>1 =  1 ((1))</p>
    <p>:</p>
    <p>: : :</p>
    <p>V 1  = 1  (1())</p>
    <p>= ()(())</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>Public Helios Bulletin Board Helios Server (private Information)</p>
    <p>decrypt</p>
    <p>and</p>
    <p>publish</p>
    <p>(1)  ()</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>(1)  ()</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>1()   ()</p>
    <p>1 =  1 ((1))</p>
    <p>:</p>
    <p>: : :</p>
    <p>V 1  = 1  (1())</p>
    <p>= ()(())</p>
    <p>= 11 =</p>
  </div>
  <div class="page">
    <p>Modified Tallying Process</p>
    <p>(1)(1)</p>
    <p>: : : :</p>
    <p>V 1  = 1()1()    =</p>
    <p>()()</p>
    <p>1 =  1 ((1))</p>
    <p>:</p>
    <p>: : :</p>
    <p>V 1  = 1  (1())</p>
    <p>= ()(())</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>Public Helios Bulletin Board Helios Server (private Information)</p>
    <p>decrypt</p>
    <p>and</p>
    <p>publish</p>
    <p>(1)  ()</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>(1)  ()</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>1 = 1()</p>
    <p>= ()</p>
    <p>1()   ()</p>
    <p>1 =  1 ((1))</p>
    <p>:</p>
    <p>: : :</p>
    <p>V 1  = 1  (1())</p>
    <p>= ()(())</p>
    <p>= 11 =  Note: The Message space of the</p>
    <p>Commitment and the Encryption</p>
    <p>Scheme must match.</p>
  </div>
  <div class="page">
    <p>Parameters</p>
    <p>Need a commitment scheme with a matching semantically</p>
    <p>secure encryption scheme.</p>
    <p>Construction by Moran and Naor (Split Ballot):</p>
    <p>Paillier: N=12 where 1 and 2 are safe primes.</p>
    <p>Pedersen Commitments: Subgroup of Group  4+1</p>
    <p>having</p>
    <p>order , where 4+1 must be prime.</p>
  </div>
  <div class="page">
    <p>Proofs</p>
    <p>Modification of proof of validity [CFSY96].</p>
    <p>Prove knowledge of  1</p>
    <p>=1 using Schnorr.</p>
    <p>information</p>
    <p>Cut-and-Choose (Compare to [MN10]).</p>
  </div>
  <div class="page">
    <p>Proof of Validity</p>
    <p>=1</p>
    <p>,1,1,2</p>
    <p>1 11</p>
    <p>2 2</p>
    <p>21</p>
    <p>22+2</p>
    <p>=0</p>
    <p>,2,2,1</p>
    <p>1 1</p>
    <p>2 2(/)2</p>
    <p>12</p>
    <p>11+1</p>
    <p>Prover Verifier</p>
    <p>,1,2</p>
    <p>1,2,1,2</p>
    <p>1+2 11</p>
    <p>1</p>
    <p>22(/) 2</p>
  </div>
  <div class="page">
    <p>Consistency Proof</p>
    <p>=, = ,= Show knowledge of ,,, by Cut-and-Choose</p>
    <p>=</p>
    <p>= =</p>
    <p>,</p>
    <p>++</p>
    <p>+(  )</p>
    <p>+  (  )</p>
    <p>if 1 publish t+ t, s+s, r  r, r r.</p>
  </div>
  <div class="page">
    <p>Consistency Proof</p>
    <p>=, = ,= Show knowledge of ,,, by Cut-and-Choose</p>
    <p>=  =++</p>
    <p>= =</p>
    <p>,</p>
    <p>++</p>
    <p>+(  )</p>
    <p>+  (  )</p>
    <p>if 1 publish t+ t, s+s, r  r, r r.</p>
    <p>Probability that two different values for  and  will not be detected is</p>
    <p>for  iterations.</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Improvements for booth voting: Principle of free suffrage.</p>
    <p>Everlasting privacy can be implemented also for</p>
    <p>electronic voting systems like Prt  Voter, Scratch &amp;</p>
    <p>Vote and MarkPledge.</p>
    <p>Cuvelier, Peters and Pereiras Efficient commitment</p>
    <p>scheme with matching encryption scheme based on</p>
    <p>elliptic curves (presented at SecVote 2012).</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Questions?</p>
  </div>
</Presentation>
