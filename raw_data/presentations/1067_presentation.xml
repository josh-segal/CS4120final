<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DynaMix: Dynamic Mobile Device Integration for Efficient</p>
    <p>Cross-device Resource Sharing</p>
    <p>Dongju Chae1, Joonsung Kim2, Gwangmu Lee2, Hanjun Kim1,</p>
    <p>Kyung-Ah Chang3, Hyogun Lee3, and Jangwoo Kim2</p>
  </div>
  <div class="page">
    <p>Increasing Number of IoT Devices</p>
  </div>
  <div class="page">
    <p>Sharing Multi-device Enables Many Services</p>
    <p>I want to build my home theater</p>
    <p>, and various custom services.</p>
    <p>Remote Gaming System?</p>
    <p>Smart Monitoring System?</p>
    <p>Custom Home Theater</p>
    <p>Screen</p>
    <p>Audio</p>
    <p>Audio</p>
    <p>Storage</p>
  </div>
  <div class="page">
    <p>Index</p>
    <p>Limitations of existing schemes</p>
    <p>I/O request forwarding</p>
    <p>Manual programming</p>
    <p>DynaMix: Efficient dynamic resource sharing</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Running Example: Home Theater</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>L o a d e r</p>
    <p>D e c o d e r</p>
    <p>Program</p>
  </div>
  <div class="page">
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>Phone</p>
    <p>Screen</p>
    <p>I/O Resources</p>
    <p>Storage Screen</p>
    <p>I/O Resources</p>
    <p>I/O abstraction layer</p>
    <p>TV</p>
    <p>Storage</p>
    <p>L o a d e r</p>
    <p>Storage</p>
    <p>(1) I/O Request Forwarding - with the example of home theater</p>
    <p>Program</p>
    <p>L o a d e r</p>
    <p>D e c o d e r</p>
    <p>D e c o d e r</p>
    <p>data</p>
    <p>Decoded data</p>
    <p>High Traffic!</p>
    <p>Screen</p>
  </div>
  <div class="page">
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>Phone</p>
    <p>Screen</p>
    <p>I/O Resources</p>
    <p>Storage Screen</p>
    <p>I/O Resources</p>
    <p>I/O abstraction layer</p>
    <p>TV</p>
    <p>Storage</p>
    <p>L o a d e r</p>
    <p>Storage</p>
    <p>(1) I/O Request Forwarding - with the example of home theater</p>
    <p>Program</p>
    <p>L o a d e r</p>
    <p>D e c o d e r</p>
    <p>D e c o d e r</p>
    <p>data</p>
    <p>Decoded data High Traffic!</p>
    <p>Screen</p>
    <p>I/O abstraction layer for transparency  Easy programming environment</p>
    <p>Good</p>
    <p>High network traffic due to unoptimized datapath  Poor performance</p>
    <p>Bad</p>
  </div>
  <div class="page">
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>I/O Interface</p>
    <p>Phone</p>
    <p>Screen</p>
    <p>I/O Resources</p>
    <p>Storage Screen</p>
    <p>I/O Resources</p>
    <p>TV</p>
    <p>Storage</p>
    <p>I/O Interface</p>
    <p>(2) Manual Programming - with the example of home theater</p>
    <p>Storage</p>
    <p>L o a d e r</p>
    <p>Program</p>
    <p>S e n d e r</p>
    <p>L o a d e r</p>
    <p>S e n d e r</p>
    <p>R e c e iv</p>
    <p>e r</p>
    <p>Program</p>
    <p>D e c o d e r</p>
    <p>R e c e iv</p>
    <p>e r</p>
    <p>D e c o d e r</p>
    <p>Low Traffic!</p>
    <p>data</p>
    <p>Screen</p>
    <p>S e n d e r</p>
    <p>R e c e iv</p>
    <p>e r</p>
    <p>Program</p>
    <p>I/O Interface</p>
    <p>send(data);</p>
    <p>recv(data);</p>
    <p>I/O Interface Decoded</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>recv(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>send(data);</p>
    <p>I/O Interface</p>
    <p>Phone</p>
    <p>Screen</p>
    <p>I/O Resources</p>
    <p>Storage Screen</p>
    <p>I/O Resources</p>
    <p>TV</p>
    <p>Storage</p>
    <p>I/O Interface</p>
    <p>(2) Manual Programming - with the example of home theater</p>
    <p>Storage</p>
    <p>L o a d e r</p>
    <p>Program</p>
    <p>S e n d e r</p>
    <p>L o a d e r</p>
    <p>S e n d e r</p>
    <p>R e c e iv</p>
    <p>e r</p>
    <p>Program</p>
    <p>D e c o d e r</p>
    <p>R e c e iv</p>
    <p>e r</p>
    <p>D e c o d e r</p>
    <p>Low Traffic!</p>
    <p>data</p>
    <p>Screen</p>
    <p>Decoded data</p>
    <p>Phone</p>
    <p>Screen</p>
    <p>I/O Resources</p>
    <p>Storage Screen</p>
    <p>I/O Resources</p>
    <p>TV</p>
    <p>Storage</p>
    <p>L o a d e r</p>
    <p>Program</p>
    <p>D e c o d e r</p>
    <p>L o a d e r</p>
    <p>D e c o d e r</p>
    <p>I/O abstraction layer</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>open(storage);</p>
    <p>load(data);</p>
    <p>decode(data);</p>
    <p>render(data);</p>
    <p>S e n d e r</p>
    <p>R e c e iv</p>
    <p>e r</p>
    <p>Program</p>
    <p>D e c o d e r</p>
    <p>I/O InterfaceI/O Interface</p>
    <p>send(data);</p>
    <p>recv(data);</p>
    <p>Device-aware task partitioning  Good performance</p>
    <p>Good</p>
    <p>Hand-tuned multi-device application  High programming effort</p>
    <p>Bad</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>P ro</p>
    <p>g ra</p>
    <p>m m</p>
    <p>a b</p>
    <p>il it</p>
    <p>y</p>
    <p>Performance</p>
    <p>Manual Programming</p>
    <p>Request Forwarding</p>
    <p>DynaMix High Performance &amp; Programmability</p>
  </div>
  <div class="page">
    <p>Index</p>
    <p>Limitations of existing schemes</p>
    <p>DynaMix: Efficient dynamic resource sharing</p>
    <p>Key ideas</p>
    <p>Architecture &amp; Implementation</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Key Ideas of DynaMix</p>
    <p>Kernel-level resource integration</p>
    <p>Transparent integration (easy programmability)</p>
    <p>Sharing multiple types of resources (i.e., CPU, Memory, I/O)</p>
    <p>Wide resource coverage</p>
    <p>Contention detection based on resource usage</p>
    <p>Performance estimation for migration scenarios</p>
    <p>Optimized performance</p>
  </div>
  <div class="page">
    <p>Key Ideas of DynaMix (1/2)</p>
    <p>I want to use remote screen</p>
    <p>on TV!</p>
    <p>I/O Resource</p>
    <p>Loader</p>
    <p>DynaMix DynaMix</p>
    <p>Decoder</p>
    <p>Local I/O</p>
    <p>Remote I/O</p>
    <p>I/O datapath</p>
    <p>User</p>
    <p>Kernel</p>
    <p>I/O Resource</p>
    <p>Phone TV</p>
  </div>
  <div class="page">
    <p>Key Ideas of DynaMix (2/2)</p>
    <p>Phone TV</p>
    <p>I/O Resource I/O Resource</p>
    <p>DynaMix DynaMix</p>
    <p>Local I/O</p>
    <p>Remote I/O</p>
    <p>I/O datapath</p>
    <p>User</p>
    <p>KernelHigh</p>
    <p>Traffic!</p>
    <p>Decoder</p>
    <p>Loader</p>
  </div>
  <div class="page">
    <p>Key Ideas of DynaMix (2/2)</p>
    <p>Phone TV</p>
    <p>I/O Resource I/O Resource</p>
    <p>DynaMix DynaMix</p>
    <p>Local I/O</p>
    <p>Remote I/O</p>
    <p>I/O datapath</p>
    <p>User</p>
    <p>Kernel</p>
    <p>Decoder</p>
    <p>Loader Low</p>
    <p>Traffic!</p>
  </div>
  <div class="page">
    <p>Contention Detector</p>
    <p>Migration Selector</p>
    <p>DynaMix DynaMix</p>
    <p>Loader Decoder</p>
    <p>DynaMix Architecture</p>
    <p>Resource Integrator</p>
    <p>ScreenStorage</p>
    <p>Local Device (Master)</p>
    <p>Screen</p>
    <p>Remote Device</p>
    <p>Resource Integrator</p>
    <p>Contention Detector</p>
    <p>Migration Selector</p>
    <p>Resource IntegratorResource IntegratorSelect</p>
    <p>User</p>
    <p>Kernel</p>
    <p>(1)</p>
  </div>
  <div class="page">
    <p>Contention Detector</p>
    <p>Migration Selector</p>
    <p>DynaMix DynaMix</p>
    <p>Loader Decoder</p>
    <p>DynaMix Architecture</p>
    <p>Resource Integrator</p>
    <p>ScreenStorage</p>
    <p>Local Device (Master)</p>
    <p>Screen</p>
    <p>Remote Device</p>
    <p>Contention Detector</p>
    <p>Migration Selector</p>
    <p>Resource Integrator</p>
    <p>Contention Detector</p>
    <p>User</p>
    <p>Kernel</p>
    <p>(2)</p>
  </div>
  <div class="page">
    <p>Contention Detector</p>
    <p>Migration Selector</p>
    <p>DynaMix DynaMix</p>
    <p>Loader Decoder</p>
    <p>DynaMix Architecture</p>
    <p>Resource Integrator</p>
    <p>ScreenStorage</p>
    <p>Local Device (Master)</p>
    <p>Screen</p>
    <p>Remote Device</p>
    <p>Contention Detector</p>
    <p>Migration Selector</p>
    <p>Resource Integrator</p>
    <p>Migration Selector Migration Selector</p>
    <p>User</p>
    <p>Kernel</p>
    <p>(3)</p>
  </div>
  <div class="page">
    <p>(1) Resource Integrator  (Memory, CPU, I/O)</p>
    <p>Memory integration</p>
    <p>Distributed shared memory (DSM)</p>
    <p>Three perf. optimizations</p>
    <p>Lazy release consistency model</p>
    <p>Page-level coherency block</p>
    <p>Memory prefetching</p>
    <p>DSM</p>
    <p>Device Device 19/35</p>
  </div>
  <div class="page">
    <p>(1) Resource Integrator  (Memory, CPU, I/O)</p>
    <p>CPU integration</p>
    <p>Thread migration</p>
    <p>Optimizations</p>
    <p>Thread group granularity</p>
    <p>Clone-based migration</p>
    <p>Transparent live migration</p>
    <p>DSM</p>
    <p>Migration</p>
    <p>Loader DecoderDecoder Loader</p>
    <p>Device Device 20/35</p>
  </div>
  <div class="page">
    <p>(1) Resource Integrator  (Memory, CPU, I/O)</p>
    <p>DSM</p>
    <p>Resource XX</p>
    <p>Device File</p>
    <p>/dev/XX /dev/XX</p>
    <p>Migration</p>
    <p>Loader DecoderDecoder Loader  I/O resource integration</p>
    <p>Request forwarding (e.g., device file)</p>
    <p>Optimizations</p>
    <p>Data compression</p>
    <p>Platform-assisted handling</p>
    <p>Device Device 21/35</p>
  </div>
  <div class="page">
    <p>Loader Decoder</p>
    <p>Storage Screen</p>
    <p>DynaMix</p>
    <p>Loader</p>
    <p>Decoder</p>
    <p>Task Latency</p>
    <p>File</p>
    <p>Comp</p>
    <p>Low (fast) High</p>
    <p>Calculate the slowdown of each thread</p>
    <p>Collect per-thread resource usage (e.g., CPU, network, )</p>
    <p>Measure a stall time due to resource access</p>
    <p>Screen</p>
    <p>DynaMix</p>
    <p>user</p>
    <p>kernel</p>
    <p>Phone TV 22/35</p>
  </div>
  <div class="page">
    <p>Loader Decoder</p>
    <p>Storage Screen</p>
    <p>DynaMix</p>
    <p>Loader</p>
    <p>Decoder</p>
    <p>Task Latency</p>
    <p>File</p>
    <p>Comp</p>
    <p>Low (fast) High</p>
    <p>Network</p>
    <p>Calculate the slowdown of each thread</p>
    <p>Collect per-thread resource usage (e.g., CPU, network, )</p>
    <p>Measure a stall time due to resource access</p>
    <p>Contention Screen</p>
    <p>DynaMix</p>
    <p>user</p>
    <p>kernel</p>
    <p>Phone TV 23/35</p>
  </div>
  <div class="page">
    <p>Estimate the performance tradeoff after migration</p>
    <p>Utilize intra-/inter-device information to decide migration targets</p>
    <p>Loader</p>
    <p>Storage Screen</p>
    <p>Group 1 Group 2</p>
    <p>Decoder</p>
    <p>Player</p>
    <p>CPU</p>
    <p>Phone TV 24/35</p>
  </div>
  <div class="page">
    <p>Estimate the performance tradeoff after migration</p>
    <p>Utilize intra-/inter-device information to decide migration targets</p>
    <p>Calculate the tradeoffs of all possible migration scenarios</p>
    <p>Loader</p>
    <p>Decoder</p>
    <p>DynaMix DynaMix</p>
    <p>Storage Screen</p>
    <p>Scenario #1</p>
    <p>Storage Screen</p>
    <p>Scenario #3</p>
    <p>Loader</p>
    <p>Loader</p>
    <p>DynaMix</p>
    <p>Storage Screen</p>
    <p>Scenario #4</p>
    <p>Decoder</p>
    <p>Storage Screen</p>
    <p>Scenario #2</p>
    <p>TargetSelect</p>
    <p>DynaMix</p>
    <p>Decoder</p>
    <p>DynaMix</p>
    <p>Loader</p>
    <p>Decoder</p>
    <p>DynaMix DynaMix</p>
    <p>High traffic! High traffic! High mig. overhead!</p>
    <p>DynaMix</p>
    <p>Low traffic!</p>
  </div>
  <div class="page">
    <p>Index</p>
    <p>Limitations of existing schemes</p>
    <p>DynaMix: Efficient dynamic resource sharing</p>
    <p>Evaluation</p>
    <p>Scenario #1: Home theater</p>
    <p>Scenario #2: Smart monitoring</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Loader Decoder</p>
    <p>Storage Screen</p>
    <p>Phone (Master)</p>
    <p>Screen</p>
    <p>TV</p>
    <p>Audio</p>
    <p>Speaker</p>
    <p>Audio</p>
    <p>Evaluation Setup: Home theater</p>
    <p>Large TV (Remote)</p>
    <p>Master Device (Local)</p>
    <p>HQ Speaker (Remote)</p>
    <p>Android-based smartphones (5.1.1) - Nexus 5 (master) - Nexus 4 (connected to a speaker)</p>
    <p>Tizen-based smart TV (2.3)</p>
    <p>Home Theater</p>
  </div>
  <div class="page">
    <p>Performance Timeline - Resource reconfiguration (local screen  remote large screen)</p>
    <p>F ra</p>
    <p>m e</p>
    <p>s p</p>
    <p>e r</p>
    <p>se co</p>
    <p>n d</p>
    <p>( F</p>
    <p>P S</p>
    <p>)</p>
    <p>Time (sec)</p>
    <p>Remote Large Screen</p>
    <p>Restore the target performance</p>
    <p>Local Screen</p>
    <p>Detect contention &amp; Start analysis</p>
    <p>Select a remote large screen</p>
    <p>Start migration</p>
  </div>
  <div class="page">
    <p>Achieve (or closely) the target performance goal</p>
    <p>Throughput Improvement - Measured FPS for the home theater scenario</p>
    <p>F ra</p>
    <p>m e</p>
    <p>s P</p>
    <p>e r</p>
    <p>S e</p>
    <p>co n</p>
    <p>d</p>
    <p>Video quality</p>
    <p>Request Forwarding</p>
    <p>DynaMix</p>
    <p>Ideal (24 FPS)</p>
    <p>higher</p>
  </div>
  <div class="page">
    <p>Minimized Network Stall Time - Per-frame latency analysis for each datapath</p>
    <p>RF DM RF DM RF DM RF DM</p>
    <p>A vg</p>
    <p>. S</p>
    <p>ta ll</p>
    <p>P e</p>
    <p>r F</p>
    <p>ra m</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Video quality</p>
    <p>DecoderScreen</p>
    <p>LoaderDecoder</p>
    <p>DynaMix (DM)</p>
    <p>Request Forwarding (RF)</p>
    <p>Loader Decoder</p>
    <p>Storage Screen</p>
    <p>Phone</p>
    <p>Screen</p>
    <p>TV</p>
    <p>Loader</p>
    <p>Storage Screen Screen</p>
    <p>Decoder</p>
    <p>Reduce the exposed network traffic</p>
    <p>Phone TV</p>
  </div>
  <div class="page">
    <p>Camera</p>
    <p>Phone</p>
    <p>Camera</p>
    <p>Phone Processing</p>
    <p>CameraCamera</p>
    <p>Phone (Master)</p>
    <p>Screen</p>
    <p>Processing</p>
    <p>Selector Master Device</p>
    <p>(Local)</p>
    <p>Camera Device (Remote)</p>
    <p>Android-based smartphones (5.1.1) - Nexus 5 (master) - Nexus 5 (camera) x 3</p>
    <p>Smart Monitoring</p>
    <p>Evaluation Setup: Smart Monitoring</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>m e</p>
    <p>s P</p>
    <p>e r</p>
    <p>S e</p>
    <p>co n</p>
    <p>d</p>
    <p>Preview resolution (pixels)</p>
    <p>Request Forwarding</p>
    <p>DynaMix</p>
    <p>Throughput Improvement</p>
    <p>Ideal (15 FPS)</p>
    <p>- As the camera preview resolution increases</p>
    <p>Achieve higher throughput than Request Forwarding</p>
  </div>
  <div class="page">
    <p>RF DM RF DM RF DM RF DM RF DM</p>
    <p>A vg</p>
    <p>. F</p>
    <p>ra m</p>
    <p>e L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>( m</p>
    <p>s)</p>
    <p>Preview resolution (pixels)</p>
    <p>Network Computation</p>
    <p>Computation Bottleneck - Per-frame detection latency</p>
    <p>Potential to achieve higher throughput with faster CPUs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>DynaMix: Efficient cross-device resource sharing</p>
    <p>Transparent resource integration for diverse resources</p>
    <p>Resource-aware dynamic task redistribution</p>
    <p>Implementation on top of Android/Tizen devices</p>
    <p>Achieve target performance for multi-device services</p>
    <p>e.g., 8.2 FPS  24 FPS on the home theater scenario</p>
  </div>
  <div class="page">
    <p>DynaMix: Dynamic Mobile Device Integration for Efficient</p>
    <p>Cross-device Resource Sharing</p>
    <p>Thank You!</p>
    <p>Dongju Chae torr55@postech.ac.kr Department of Computer Science &amp; Engineering Pohang University of Science and Technology (POSTECH)</p>
  </div>
</Presentation>
