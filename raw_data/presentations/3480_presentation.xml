<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Simple Password-Hardened Encryption Services</p>
    <p>Russell W. F. Lai1, Christoph Egger1, Manuel Reinert2, Sherman S. M. Chow3, Matteo Maffei4, and Dominique Schrder1</p>
  </div>
  <div class="page">
    <p>Overview</p>
  </div>
  <div class="page">
    <p>One-Package Solution for Data Security  Password-Hardened Encryption</p>
    <p>What it does?</p>
    <p>To protect sensitive client data ... ... stored in a server with password (or biometric / two-factor / etc) authentication ...</p>
    <p>... even after the server is completely compromised... ... with minimal help from an external rate-limiter.</p>
    <p>Security Features</p>
    <p>Eliminate offline (e.g., dictionary) attacks  Rate-limit online (e.g., password guessing) attacks  Obliviousness (Rate-Limiter learns nothing)  Soundness (Rate-Limiter cannot cheat)  Support key-rotation (required in PCI DSS)</p>
    <p>Practicality</p>
    <p>Simple and easy to implement  Easy to convert from existing systems  250 logins per core per second</p>
    <p>PCI DSS: Payment Card Industry Data Security Standard</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 2/24</p>
  </div>
  <div class="page">
    <p>One-Package Solution for Data Security  Password-Hardened Encryption</p>
    <p>What it does?</p>
    <p>To protect sensitive client data ... ... stored in a server with password (or biometric / two-factor / etc) authentication ...</p>
    <p>... even after the server is completely compromised... ... with minimal help from an external rate-limiter.</p>
    <p>Security Features</p>
    <p>Eliminate offline (e.g., dictionary) attacks  Rate-limit online (e.g., password guessing) attacks  Obliviousness (Rate-Limiter learns nothing)  Soundness (Rate-Limiter cannot cheat)  Support key-rotation (required in PCI DSS)</p>
    <p>Practicality</p>
    <p>Simple and easy to implement  Easy to convert from existing systems  250 logins per core per second</p>
    <p>PCI DSS: Payment Card Industry Data Security Standard</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 2/24</p>
  </div>
  <div class="page">
    <p>One-Package Solution for Data Security  Password-Hardened Encryption</p>
    <p>What it does?</p>
    <p>To protect sensitive client data ... ... stored in a server with password (or biometric / two-factor / etc) authentication ...</p>
    <p>... even after the server is completely compromised... ... with minimal help from an external rate-limiter.</p>
    <p>Security Features</p>
    <p>Eliminate offline (e.g., dictionary) attacks  Rate-limit online (e.g., password guessing) attacks  Obliviousness (Rate-Limiter learns nothing)  Soundness (Rate-Limiter cannot cheat)  Support key-rotation (required in PCI DSS)</p>
    <p>Practicality</p>
    <p>Simple and easy to implement  Easy to convert from existing systems  250 logins per core per second</p>
    <p>PCI DSS: Payment Card Industry Data Security Standard</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 2/24</p>
  </div>
  <div class="page">
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Password Authenticated Data Retrieval</p>
    <p>Client C Username Alice Password 123456</p>
    <p>Server S Username Alice</p>
    <p>Hash h Salt aqZcSP</p>
    <p>Data Top Secret</p>
    <p>Hi! I am Alice.</p>
    <p>My password is 123456.</p>
    <p>if</p>
    <p>h ? = Hash(123456, aqZcSP)</p>
    <p>then</p>
    <p>Top Secret  Dec(skS, c)</p>
    <p>OK! Here is your data Top Secret!</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 4/24</p>
  </div>
  <div class="page">
    <p>Password Authenticated Encrypted Data Retrieval</p>
    <p>Client C Username Alice Password 123456</p>
    <p>Server S Username Alice</p>
    <p>Hash h Salt aqZcSP</p>
    <p>Encrypted Data c</p>
    <p>Hi! I am Alice.</p>
    <p>My password is 123456.</p>
    <p>if h ? = Hash(123456, aqZcSP) then</p>
    <p>Top Secret  Dec(skS, c)</p>
    <p>OK! Here is your data Top Secret!</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 4/24</p>
  </div>
  <div class="page">
    <p>Issues and Solutions</p>
    <p>Steal Hash Database</p>
    <p>Offline Dictionary</p>
    <p>Attack</p>
    <p>Log in using Stolen</p>
    <p>Password</p>
    <p>Obtain Client Data</p>
    <p>Complete Compromise</p>
    <p>Decrypt using Stolen Server</p>
    <p>Key</p>
    <p>Password-Hardening Facebook, PYTHIA [ECSJR@USENIX15],</p>
    <p>[SFSB@CCS16], PHOENIX [LESC@USENIX17]</p>
    <p>Password-Hardened Encryption [This Work]</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 5/24</p>
  </div>
  <div class="page">
    <p>Issues and Solutions</p>
    <p>Steal Hash Database</p>
    <p>Offline Dictionary</p>
    <p>Attack</p>
    <p>Log in using Stolen</p>
    <p>Password</p>
    <p>Obtain Client Data</p>
    <p>Complete Compromise</p>
    <p>Decrypt using Stolen Server</p>
    <p>Key</p>
    <p>Password-Hardening Facebook, PYTHIA [ECSJR@USENIX15],</p>
    <p>[SFSB@CCS16], PHOENIX [LESC@USENIX17]</p>
    <p>Password-Hardened Encryption [This Work]</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 5/24</p>
  </div>
  <div class="page">
    <p>Issues and Solutions</p>
    <p>Steal Hash Database</p>
    <p>Offline Dictionary</p>
    <p>Attack</p>
    <p>Log in using Stolen</p>
    <p>Password</p>
    <p>Obtain Client Data</p>
    <p>Complete Compromise</p>
    <p>Decrypt using Stolen Server</p>
    <p>Key</p>
    <p>Password-Hardening Facebook, PYTHIA [ECSJR@USENIX15],</p>
    <p>[SFSB@CCS16], PHOENIX [LESC@USENIX17]</p>
    <p>Password-Hardened Encryption [This Work]</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 5/24</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>PHOENIX [LESC@USENIX17]</p>
    <p>Simplified PHOENIX</p>
    <p>Password Hardened Encryption</p>
    <p>Simplify</p>
    <p>Upgrade: Encryption Functionality Stronger Soundness</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 6/24</p>
  </div>
  <div class="page">
    <p>Password-Hardening</p>
  </div>
  <div class="page">
    <p>Ingredient: A Key-Homomorphic Pseudorandom Function (PRF)</p>
    <p>Let G be a group of prime order q (written multiplicatively) where Decisional Diffie Hellman (DDH) is hard. Let H :{0, 1} G be a random oracle. The function</p>
    <p>PRF : Zq {0, 1} G (key, message) 7 H(message)key</p>
    <p>is pseudorandom under the DDH assumption.</p>
    <p>PRF is key-homomorphic:</p>
    <p>H(message)key+key  = H(message)key H(message)key</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 8/24</p>
  </div>
  <div class="page">
    <p>Simplified PHOENIX [LESC@USENIX17]  Registration</p>
    <p>Client C Server S Rate-Limiter R</p>
    <p>Register, Alice, 123456</p>
    <p>aqZcSP $ Salts Register</p>
    <p>OjQZEe $ Salts</p>
    <p>y, OjQZEe y  H(OjQZEe)skR</p>
    <p>h  H(aqZcSP, 123456)skS y Store (Alice, h, aqZcSP, OjQZEe)</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 9/24</p>
  </div>
  <div class="page">
    <p>Simplified PHOENIX [LESC@USENIX17]  Login</p>
    <p>Client C Server S Rate-Limiter R</p>
    <p>Login, Alice, 123456</p>
    <p>Retrieve (Alice, h, aqZcSP, OjQZEe)</p>
    <p>y  h/H(aqZcSP, 123456)skS Validate, y , OjQZEe</p>
    <p>Correct! Here is my proof! y ? = H(OjQZEe)skR</p>
    <p>OK! Come in!</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 10/24</p>
  </div>
  <div class="page">
    <p>Simplified PHOENIX [LESC@USENIX17]  Key-Rotation</p>
    <p>Server S Key skS</p>
    <p>h = H(aqZcSP, 123456)skS H(OjQZEe)skR</p>
    <p>Rate-Limiter R Key skR</p>
    <p>Server S Key skS =  skS</p>
    <p>h = h H(OjQZEe) = H(aqZcSP, 123456)skS H(OjQZEe)skR+ = H(aqZcSP, 123456)sk</p>
    <p>S H(OjQZEe)sk</p>
    <p>R</p>
    <p>Rate-Limiter R Key skR =  skR +</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 11/24</p>
  </div>
  <div class="page">
    <p>Simplified PHOENIX [LESC@USENIX17]  What the rate-limiter does?</p>
    <p>Equality Check Functionality: Check equality of pseudorandom function values.</p>
    <p>Rate-limiting Policy: Refuse to respond if OjQZEe appears too frequently.</p>
    <p>Rate-Limiter R</p>
    <p>y ? = H(OjQZEe)skR</p>
    <p>Idea: Upgrade to Password-Hardened Encryption</p>
    <p>Conditional Decryption Functionality: If Check equality of pseudorandom function values = True then</p>
    <p>Partially decrypt ciphertext.</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 12/24</p>
  </div>
  <div class="page">
    <p>Simplified PHOENIX [LESC@USENIX17]  What the rate-limiter does?</p>
    <p>Equality Check Functionality: Check equality of pseudorandom function values.</p>
    <p>Rate-limiting Policy: Refuse to respond if OjQZEe appears too frequently.</p>
    <p>Rate-Limiter R</p>
    <p>y ? = H(OjQZEe)skR</p>
    <p>Idea: Upgrade to Password-Hardened Encryption</p>
    <p>Conditional Decryption Functionality: If Check equality of pseudorandom function values = True then</p>
    <p>Partially decrypt ciphertext.</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 12/24</p>
  </div>
  <div class="page">
    <p>Password-Hardened Encryption</p>
  </div>
  <div class="page">
    <p>Password-Hardened Encryption  Registration</p>
    <p>Client C Server S Rate-Limiter R</p>
    <p>Register, Alice, 123456, Top Secret</p>
    <p>aqZcSP $ Salts Register</p>
    <p>K $ AES Keys OjQZEe $ Salts y0  H0(OjQZEe)skR</p>
    <p>y0, y1 y1  H1(OjQZEe)skR</p>
    <p>h0  H0(aqZcSP, 123456)skS y0 h1  H1(aqZcSP, 123456)skS y1 K skS</p>
    <p>c  AES.Enc(K , Top Secret) Store (Alice, (h0, h1, c), aqZcSP, OjQZEe)</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 14/24</p>
  </div>
  <div class="page">
    <p>Password-Hardened Encryption  Login</p>
    <p>Client C Server S Rate-Limiter R</p>
    <p>Login, Alice, 123456</p>
    <p>Retrieve (Alice, (h0, h1, c), aqZcSP, OjQZEe)</p>
    <p>y0  h0/H0(aqZcSP, 123456)skS Validate, y0, OjQZEe</p>
    <p>z  h1/H1(aqZcSP, 123456)skS if y0 = H0(OjQZEe)skR then</p>
    <p>Correct! Here is y1 and my proof! y1  H1(OjQZEe)skR</p>
    <p>K  (z/y1) 1</p>
    <p>skS</p>
    <p>Top Secret Top Secret  AES.Dec(K , c)</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 15/24</p>
  </div>
  <div class="page">
    <p>Password-Hardened Encryption  Security Features</p>
    <p>Against Compromised Server</p>
    <p>Eliminate Offline Attacks  Password Hashes are masked by Rs PRF  Compromised S must communicate with R</p>
    <p>Rate-Limit Online Attacks (per Client)  R records the salt (e.g., OjQZEe) in each login request  R refuses to respond if a client (a salt) tries to log in too frequently</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 16/24</p>
  </div>
  <div class="page">
    <p>Password-Hardened Encryption  Security Features</p>
    <p>Against Compromised Rate-Limiter</p>
    <p>Obliviousness  Registration and login requests are completely independent of clients passwords and data  R learns nothing about clients passwords and data</p>
    <p>Soundness  R must prove for both valid and invalid requests</p>
    <p>Proactive Security</p>
    <p>Key-Rotation  e.g., periodically and when one party is (suspected to be) compromised  Due to the key-homomorphic PRF</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 17/24</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>10 Core Intel Xeon E5-2640 CPU (both S and R)  Charm crypto prototyping library  Falcon Web Framework  HTTPS with keep-alive</p>
    <p>Comparison (Rate-Limiter Throughput)</p>
    <p>4x of PYTHIA [ECSJR@USENIX15]   1.5x of PHOENIX [LESC@USENIX17]  (Those are password-hardening without encryption!)</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 19/24</p>
  </div>
  <div class="page">
    <p>Performance Graphs</p>
    <p>re</p>
    <p>re</p>
    <p>re</p>
    <p>re</p>
    <p>re q/</p>
    <p>s</p>
    <p>Encrypt Decrypt-Success Decrypt-Fail</p>
    <p>Figure: Server throughput in req/s</p>
    <p>re</p>
    <p>re</p>
    <p>re</p>
    <p>re</p>
    <p>re q/</p>
    <p>s</p>
    <p>Encrypt Decrypt-Success Decrypt-Fail</p>
    <p>Figure: Rate-Limiter throughput in req/s</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 20/24</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Simple Password-Hardened Encryption Services  One-Package Solution for Data Security</p>
    <p>Russell W. F. Lai Friedrich-Alexander University Erlangen-Nuremberg russell.lai@cs.fau.de</p>
  </div>
  <div class="page">
    <p>Questions and Answers</p>
  </div>
  <div class="page">
    <p>Why ...?</p>
    <p>Why is it difficult to compromise both S and R?</p>
    <p>Compromising two parties require twice the effort.  We assume that R is built and maintained by security experts, so it is difficult to compromise.</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 23/24</p>
  </div>
  <div class="page">
    <p>Why not ...?</p>
    <p>Why not password-authenticated key-exchange (PAKE)?</p>
    <p>Different functionality. In PAKE, both parties know the password, and a fresh key is derived every time.</p>
    <p>Why not password-protected secret-sharing (PPSS)?</p>
    <p>No existing scheme supports efficient key-rotation.  PPSS is too strong: The user in PPSS (the counterpart of the server in PHE) has no secret key.</p>
    <p>Simple Password-Hardened Encryption Services Russel W. F. Lai 24/24</p>
  </div>
</Presentation>
