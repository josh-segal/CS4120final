<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HENG ZHANGHENG ZHANG, MINGKAI DONG, HAIBO CHEN</p>
    <p>Institute of Parallel and Distributed Systems Shanghai Jiao Tong University, China</p>
    <p>http://ipads.se.sjtu.edu.cn/pub/projects/cocytus</p>
    <p>Efficient and Available In-memory KV-Store with Hybrid Erasure Coding and Replication</p>
    <p>CocytusCocytus</p>
  </div>
  <div class="page">
    <p>In-memory KV-Stores: Key Building Blocks for Systems</p>
    <p>A key pillar for many systems  Data cache (e.g., Memcached in Facebook)  In-memory database</p>
    <p>Availability is important for in-memory KV-Stores  Services disruption  Recovery is time-consuming</p>
  </div>
  <div class="page">
    <p>Primary-backup Replication (PBR)</p>
    <p>A common way to achieve availability  E.g., Repcached, Redis</p>
    <p>Problems  Need M times extra memory to tolerate</p>
    <p>M failures  Redundant data is rarely accessed in</p>
    <p>strongly consistent systems</p>
    <p>Primary</p>
    <p>Backup Backup Backup</p>
    <p>Client</p>
    <p>Request</p>
    <p>Update</p>
  </div>
  <div class="page">
    <p>Erasure Coding (EC)</p>
    <p>A space-efficient way to prevent data loss</p>
    <p>Widely used in disk storage  RAID (Redundant Array of Independent Disks)  WAS (Windows Azure Storage)</p>
    <p>Data repair needs to collect data and decode them  A lot of computing work and data transfer</p>
    <p>Data Node</p>
    <p>Parity Node</p>
    <p>Parity Node</p>
    <p>Parity Node</p>
    <p>Client</p>
    <p>Update</p>
    <p>Update</p>
    <p>Data Node</p>
    <p>Data Node</p>
  </div>
  <div class="page">
    <p>Opportunity</p>
    <p>Large network bandwidth  Reaches 10Gb/s and 40Gb/s</p>
    <p>Fast speed of CPUs  Encoding/Decoding rates can also reach 40Gb/s on single core</p>
  </div>
  <div class="page">
    <p>Goal</p>
    <p>Erasure Coding + In-memory KV-StoresErasure Coding + In-memory KV-Stores</p>
    <p>Available and Memory Efficient In-memory KV-stores</p>
    <p>Available and Memory Efficient In-memory KV-stores</p>
  </div>
  <div class="page">
    <p>Intuited System Design</p>
    <p>K nodes for storing data  M nodes for storing parity  Each key-value pair is totally stored on one data node</p>
    <p>friendly for GET requests</p>
    <p>Key-Value</p>
    <p>NODE1 NODE2 NODE3 NODE4 NODE5</p>
    <p>KeyValue P1 P2</p>
    <p>UPDATESET</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Excessive metadata update</p>
    <p>Race condition in online recovery</p>
  </div>
  <div class="page">
    <p>Excessive Update on Metadata</p>
    <p>Metadata is usually achieved by scattered and linked data structure  E.g., hash table and binary search tree (BST), two popular data</p>
    <p>structures for in-memory index</p>
    <p>KV-Pair</p>
    <p>bucket bucket bucket bucket bucket bucket</p>
    <p>KV-Pair</p>
    <p>KV-Pair KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair</p>
    <p>KV-Pair KV-PairKV-Pair</p>
    <p>KV-Pair</p>
  </div>
  <div class="page">
    <p>Excessive Update on Metadata</p>
    <p>Metadata is usually achieved by scattered and linked data structure  Operations on metadata involve many scattered</p>
    <p>modifications  About 4 scattered modifications on allocating memory  About 7 scattered modifications on freeing memory  About 4 scattered modifications on inserting new item into bucket</p>
    <p>hash table  O(N) scattered modifications on resizing of hash table</p>
  </div>
  <div class="page">
    <p>Excessive Update on Metadata</p>
    <p>Metadata is usually achieved by scattered and linked data structure  Operations on metadata involve many scattered</p>
    <p>modifications  Erasure coding is not a good choice for metadata</p>
    <p>Complicated implementation  A SET request involve encoding/transfer for 7-14 scattered changes  Limit new metadata design</p>
  </div>
  <div class="page">
    <p>Solution: Separate data and metadata</p>
    <p>Use erasure coding to prevent data (values) loss  Pre-allocate virtual memory areas for data and parity  Modifications on these areas agree with erasure coding</p>
    <p>approach</p>
    <p>Use primary-backup replication to prevent metadata loss  Index information and allocation information are placed on</p>
    <p>outside of the area</p>
  </div>
  <div class="page">
    <p>Race Condition in Online Recovery  Handle GET/SET requests during recovery  Handling SET request involves update on multiple nodes  Data repair needs to collect data and parity among nodes</p>
    <p>Data Node</p>
    <p>Parity Node</p>
    <p>Parity Node</p>
    <p>Client</p>
    <p>Update</p>
    <p>Failed Data Node</p>
    <p>Data Node</p>
    <p>Update</p>
    <p>Update</p>
    <p>Recover Data</p>
    <p>Collect data Collect parity</p>
  </div>
  <div class="page">
    <p>Race Condition in Online Recovery  The interleaving of SET requests and data repair has race condition</p>
    <p>* The f1() and f2() is encoding functions * The g1() is a decoding function * The collected parity P1 loses the new update</p>
    <p>Data Node D2=1</p>
    <p>Parity Node</p>
    <p>P1=f1(2,1,3)</p>
    <p>Parity Node</p>
    <p>P2=f2(2,1,3)</p>
    <p>Client</p>
    <p>SET D2=5</p>
    <p>(Failed) Data Node D1=2</p>
    <p>Data Node D3=3</p>
    <p>Recover Data</p>
    <p>D2=5 D3=3 P1=f1(2,1,3)</p>
    <p>D1 = g1(f1(2,1,3), 5, 3) != 2</p>
  </div>
  <div class="page">
    <p>Online Recovery Protocol</p>
    <p>Use logical timestamp to indicate the version of data  Attach timestamps on SET requests  In-order completion</p>
    <p>Three steps for data collection 1. Start procedure 2. Decide data versions 3. Synchronize parity version</p>
    <p>Data Node T=1</p>
    <p>Parity Node</p>
    <p>T= &lt;3,1,2&gt;</p>
    <p>Parity Node</p>
    <p>T= &lt;3,1,2&gt;</p>
    <p>Failed Data Node T=3</p>
    <p>Data Node T=2</p>
    <p>Recovery Process</p>
  </div>
  <div class="page">
    <p>Cocytus Overview</p>
  </div>
  <div class="page">
    <p>EC-Group</p>
    <p>EC-Group is the basic component in Cocytus  A EC-Group consists K data processes and M parity processes  Connected by a FIFO channel like a TCP connection</p>
    <p>EC-GROUP DP1</p>
    <p>M 1</p>
    <p>D1</p>
    <p>DP2</p>
    <p>M 2</p>
    <p>D2</p>
    <p>DP3</p>
    <p>M 3</p>
    <p>D3</p>
    <p>PP1</p>
    <p>M 1</p>
    <p>PP2</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>M 3</p>
    <p>P1 P2</p>
  </div>
  <div class="page">
    <p>Data Process</p>
    <p>Metadata  Index information  Allocation information</p>
    <p>Data area  A memory area for values</p>
    <p>Logical timestamps  A Timestamp for the latest Received SET request (RT)  A Timestamp for the latest Stable (completed) SET request (ST)</p>
    <p>Data Process</p>
    <p>D</p>
    <p>M</p>
    <p>RT: 0</p>
    <p>ST: 0</p>
  </div>
  <div class="page">
    <p>Parity Process</p>
    <p>Metadata replicas of all data processes in the EC-Group</p>
    <p>Parity area  A memory area for parity</p>
    <p>Logical timestamps  A Timestamp Vector for the latest Received SET requests</p>
    <p>(RVT[1..K])  A Timestamp Vector for the latest Stable (completed) SET</p>
    <p>requests (SVT[1..K])</p>
    <p>Parity Process</p>
    <p>P</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RVT: 0,0,0</p>
    <p>SVT: 0,0,0</p>
  </div>
  <div class="page">
    <p>Workloads Imbalance</p>
    <p>Data processes and parity processes have different work  Data processes and parity processes reserve memory in</p>
    <p>different size</p>
    <p>Solution: interleaved layout</p>
    <p>NODE</p>
    <p>EC-GROUP DP DP DP PP PP</p>
    <p>EC-GROUP DPDP DP PPPP</p>
    <p>EC-GROUP DP DPDPPPPP</p>
    <p>EC-GROUP DPDP DPPP PP</p>
    <p>EC-GROUP DP DP DPPPPP</p>
    <p>NODE NODE NODE NODE</p>
  </div>
  <div class="page">
    <p>Handling SET Requests</p>
  </div>
  <div class="page">
    <p>Handling a SET Request</p>
    <p>Data Process</p>
    <p>D2</p>
    <p>M 2</p>
    <p>Parity Process</p>
    <p>P1</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RT: 0</p>
    <p>ST: 0</p>
    <p>RVT: 0,0,0</p>
    <p>SVT: 0,0,0</p>
    <p>Parity Process</p>
    <p>P2</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RVT: 0,0,0</p>
    <p>SVT: 0,0,0</p>
  </div>
  <div class="page">
    <p>Handling a SET Request</p>
    <p>process 1. Generate data diff 2. Update the timestamp 3. Forward request</p>
    <p>Data Process</p>
    <p>D2</p>
    <p>M 2</p>
    <p>Parity Process</p>
    <p>P1</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RT: 1</p>
    <p>ST: 0</p>
    <p>RVT: 0,0,0</p>
    <p>SVT: 0,0,0</p>
    <p>Parity Process</p>
    <p>P2</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RVT: 0,0,0</p>
    <p>SVT: 0,0,0</p>
  </div>
  <div class="page">
    <p>Handling a SET Request</p>
    <p>process 3. Handle the request on parity</p>
    <p>processes 1. Buffer the request 2. Update the timestamps 3. Send ACKs</p>
    <p>Data Process</p>
    <p>D2</p>
    <p>M 2</p>
    <p>Parity Process</p>
    <p>P1</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RT: 1</p>
    <p>ST: 0</p>
    <p>RVT: 0,1,0</p>
    <p>SVT: 0,0,0</p>
    <p>Parity Process</p>
    <p>P2</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RVT: 0,0,0</p>
    <p>SVT: 0,0,0</p>
  </div>
  <div class="page">
    <p>Handling a SET Request</p>
    <p>Data Process</p>
    <p>D2</p>
    <p>M 2</p>
    <p>Parity Process</p>
    <p>P1</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RT: 1</p>
    <p>ST: 1</p>
    <p>RVT: 0,1,0</p>
    <p>SVT: 0,0,0</p>
    <p>Parity Process</p>
    <p>P2</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RVT: 0,1,0</p>
    <p>SVT: 0,0,0</p>
  </div>
  <div class="page">
    <p>Handling a SET Request</p>
    <p>Data Process</p>
    <p>D2</p>
    <p>M 2</p>
    <p>Parity Process</p>
    <p>P1</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RT: 1</p>
    <p>ST: 1</p>
    <p>RVT: 0,1,0</p>
    <p>SVT: 0,1,0</p>
    <p>Parity Process</p>
    <p>P2</p>
    <p>M 1</p>
    <p>M 2</p>
    <p>M 3</p>
    <p>RVT: 0,1,0</p>
    <p>SVT: 0,0,0</p>
  </div>
  <div class="page">
    <p>Recovery</p>
  </div>
  <div class="page">
    <p>Online Recovery</p>
    <p>When a data process fails, Cocytus chooses a recovery process from parity processes  Start two-phases recovery  Provide continuously services</p>
    <p>Two-phases recovery  Preparation: synchronize parity processes  Online data repair: repair the data area while handling requests</p>
    <p>Choose a recovery leader on multiple failures</p>
  </div>
  <div class="page">
    <p>Preparation</p>
    <p>The recovery process synchronizes stable timestamp for the failed data process</p>
    <p>processes</p>
    <p>Parity processes complete the buffered requests that  contain equal or smaller timestamps than the synchronized stable</p>
    <p>timestamp  come from the failed data processes</p>
    <p>After preparation phase, all parity processes are consistent in the failed data process</p>
  </div>
  <div class="page">
    <p>Preparation</p>
    <p>The recovery process synchronizes stable timestamp for the failed data process</p>
    <p>processes</p>
    <p>Parity processes complete the buffered requests that  contain equal or smaller timestamps than the synchronized stable</p>
    <p>timestamp  come from the failed data processes</p>
  </div>
  <div class="page">
    <p>Online Data Repair</p>
    <p>Data area is repaired in a granularity of 4KB page</p>
    <p>Page repair happens  When requests need touch a lost page  In the background</p>
    <p>Under online recovery protocol</p>
  </div>
  <div class="page">
    <p>Recovery Protocol Recovery leader 1. Choose the parity participant 2. Notify alive data processes</p>
    <p>DP3 DP4</p>
    <p>DP1 (FAIL) DP2 (FAIL)</p>
    <p>PP1 PP2</p>
  </div>
  <div class="page">
    <p>Recovery Protocol Data processes 1. Decide stable timestamp 2. Send data page</p>
    <p>Parity processes 1. Synchronize the stable timestamps 2. Do partial decoding</p>
    <p>DP3 DP4</p>
    <p>DP1 (FAIL) DP2 (FAIL)</p>
    <p>PP1 PP2</p>
    <p>SVT=2,2,1,6 ST=7ST=3</p>
    <p>SVT=2,2,1,6</p>
    <p>SVT=2,2,1,7 SVT=2,2,1,7</p>
    <p>SVT=2,2,3,7 SVT=2,2,3,7</p>
  </div>
  <div class="page">
    <p>Recovery Protocol Parity processes 1. send partially decoded parity</p>
    <p>DP3 DP4</p>
    <p>DP1 (FAIL) DP2 (FAIL)</p>
    <p>PP1 PP2</p>
    <p>SVT=2,2,1,6 ST=7</p>
    <p>SVT=2,2,1,6</p>
    <p>SVT=2,2,1,7 SVT=2,2,1,7</p>
  </div>
  <div class="page">
    <p>Recovery Protocol Recovery leader 1. Complete the decoding 2. Send recovered data pages to</p>
    <p>other recovery processes</p>
    <p>DP3 DP4</p>
    <p>DP1 (FAIL) DP2 (FAIL)</p>
    <p>PP1 PP2</p>
    <p>SVT=2,2,1,6 ST=7</p>
    <p>SVT=2,2,1,6</p>
    <p>SVT=2,2,1,7 SVT=2,2,1,7</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Cocytus is implemented on Memcached 1.4.21  Implement a similar primary-backup replication version for comparison</p>
    <p>Coding Scheme  Reed-Solomon code provided by Jerasure</p>
  </div>
  <div class="page">
    <p>Evaluation  5-node cluster for server</p>
    <p>5 EC-Groups for Cocytus, each contains 3 DPs and 2 PPs  15 primary processes and 30 backup processes for primary-backup</p>
    <p>replication version  15 original processes for Memcached</p>
    <p>1 node for client, 20 cores  Run YCSB benchmark with 80 threads</p>
    <p>10Gbps network</p>
  </div>
  <div class="page">
    <p>Memory Consumption</p>
    <p>*ZIPF: Zipfian distribution over the range from 10B to 1KB 3842 pages</p>
  </div>
  <div class="page">
    <p>Recovery (R:W=95%:5% &amp; 1KB-size value &amp; 12GB data/node)</p>
    <p>Recovery completes1st failure</p>
  </div>
  <div class="page">
    <p>CPU Overhead</p>
    <p>Read:Write Memcached PB Replication Cocytus</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Separation of work  GnothiATC 12, UpRightSIGOPS 09</p>
    <p>Erasure coding  WASATC 12, XORing ElephantsVLDB 13</p>
    <p>Replication  MojimASPLOS 15, RAMCloudSOSP 11</p>
    <p>Key-value stores  PilafATC13, FaRMNSDI14, HERDSIGCOMM14, and C-HintSoCC14</p>
  </div>
  <div class="page">
    <p>Conclusion  Replication approach is quit memory-consuming for in-memory KV-Stores</p>
    <p>Cocytus combines erase coding and replication to achieve efficient and available in-memory KV-Store</p>
    <p>Cocytus could achieve better memory efficiency with low overhead compared with primary-backup replication on read-mostly workloads</p>
    <p>Thanks http://ipads.se.sjtu.edu.cn</p>
  </div>
</Presentation>
