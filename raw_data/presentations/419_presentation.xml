<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Automatically Checking Thousands of Failures</p>
    <p>with Micro-Specifications</p>
    <p>Haryadi S. Gunawi, Thanh Do, Pallavi Joshi, Joseph M. Hellerstein, Andrea C. Arpaci-Dusseau,</p>
    <p>Remzi H. Arpaci-Dusseau, Koushik Sen</p>
    <p>University of California, Berkeley  University of Wisconsin, Madison</p>
  </div>
  <div class="page">
    <p>Cloud Era</p>
    <p>Solve bigger human problems Use cluster of thousands of</p>
    <p>machines</p>
  </div>
  <div class="page">
    <p>Failures in The Cloud</p>
  </div>
  <div class="page">
    <p>Failures in The Cloud</p>
    <p>The future is a world of failures everywhere - Garth Gibson</p>
  </div>
  <div class="page">
    <p>Failures in The Cloud</p>
    <p>The future is a world of failures everywhere - Garth Gibson Recovery must be a first-class operation - Raghu Ramakrishnan</p>
  </div>
  <div class="page">
    <p>Failures in The Cloud</p>
    <p>The future is a world of failures everywhere - Garth Gibson Recovery must be a first-class operation - Raghu Ramakrishnan Reliability has to come from the software - Jeffrey Dean</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Why Failure Recovery Hard?  Testing is not advanced enough against complex</p>
    <p>failures  Diverse, frequent, and multiple failures  FaceBook photo loss</p>
    <p>Recovery is under specified  Need to specify failure recovery behaviors  Customized well-grounded protocols</p>
    <p>Example: Paxos made live  An engineering perspective [PODC 07]</p>
  </div>
  <div class="page">
    <p>Our Solutions</p>
  </div>
  <div class="page">
    <p>Our Solutions  FTS (FATE)  Failure Testing Service</p>
    <p>New abstraction for failure exploration  Systematically exercise 40,000 unique</p>
    <p>combinations of failures</p>
  </div>
  <div class="page">
    <p>Our Solutions  FTS (FATE)  Failure Testing Service</p>
    <p>New abstraction for failure exploration  Systematically exercise 40,000 unique</p>
    <p>combinations of failures  DTS (DESTINI)  Declarative Testing</p>
    <p>Specification  Enable concise recovery specifications  We have written 74 checks (3 lines / check)</p>
  </div>
  <div class="page">
    <p>Our Solutions  FTS (FATE)  Failure Testing Service</p>
    <p>New abstraction for failure exploration  Systematically exercise 40,000 unique</p>
    <p>combinations of failures  DTS (DESTINI)  Declarative Testing</p>
    <p>Specification  Enable concise recovery specifications  We have written 74 checks (3 lines / check)</p>
    <p>Note: Names have changed since the paper</p>
  </div>
  <div class="page">
    <p>Summary of Findings  Applied FATE and DESTINI to three cloud</p>
    <p>systems: HDFS, ZooKeeper, Cassandra  Found 16 new bugs  Reproduced 74 bugs  Problems found</p>
    <p>Inconsistency  Data loss  Rack awareness broken  Unavailability</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  FATE  DESTINI  Evaluation  Summary</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>M 1C 2 3</p>
    <p>No failures</p>
  </div>
  <div class="page">
    <p>M 1C 2 3</p>
    <p>No failures</p>
    <p>Alloc. Req.</p>
  </div>
  <div class="page">
    <p>M 1C 2 3</p>
    <p>No failures</p>
    <p>Setup Stage</p>
    <p>Alloc. Req.</p>
    <p>Data Transfer</p>
    <p>Stage</p>
  </div>
  <div class="page">
    <p>M 1C 2 3</p>
    <p>No failures</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 M 1C 2 3 4</p>
    <p>No failures Setup Stage Recovery: Recreate fresh pipeline</p>
    <p>X1</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 M 1C 2 3 4</p>
    <p>M 1C 2 3</p>
    <p>No failures Setup Stage Recovery: Recreate fresh pipeline</p>
    <p>Data transfer Stage Recovery: Continue on surviving nodes</p>
    <p>X2</p>
    <p>X1</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 M 1C 2 3 4</p>
    <p>M 1C 2 3 M 1C 2 3</p>
    <p>No failures Setup Stage Recovery: Recreate fresh pipeline</p>
    <p>Data transfer Stage Recovery: Continue on surviving nodes</p>
    <p>Bug in Data Transfer Stage Recovery</p>
    <p>X3X2</p>
    <p>X1</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 M 1C 2 3 4</p>
    <p>M 1C 2 3 M 1C 2 3</p>
    <p>No failures Setup Stage Recovery: Recreate fresh pipeline</p>
    <p>Data transfer Stage Recovery: Continue on surviving nodes</p>
    <p>Bug in Data Transfer Stage Recovery</p>
    <p>X3X2</p>
    <p>X1</p>
    <p>Failures at DIFFERENT STAGES</p>
    <p>lead to DIFFERENT FAILURE BEHAVIORS</p>
    <p>Goal: Exercise different failure recovery path</p>
  </div>
  <div class="page">
    <p>FATE</p>
    <p>A failure injection framework  target IO points  Systematically exploring failure  Multiple failures</p>
    <p>New abstraction of failure scenario  Remember injected failures  Increase failure coverage</p>
  </div>
  <div class="page">
    <p>FATE</p>
    <p>A failure injection framework  target IO points  Systematically exploring failure  Multiple failures</p>
    <p>New abstraction of failure scenario  Remember injected failures  Increase failure coverage</p>
    <p>M 1C 2 3</p>
  </div>
  <div class="page">
    <p>FATE</p>
    <p>A failure injection framework  target IO points  Systematically exploring failure  Multiple failures</p>
    <p>New abstraction of failure scenario  Remember injected failures  Increase failure coverage</p>
    <p>M 1C 2 3 X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>FATE</p>
    <p>A failure injection framework  target IO points  Systematically exploring failure  Multiple failures</p>
    <p>New abstraction of failure scenario  Remember injected failures  Increase failure coverage</p>
    <p>M 1C 2 3 X</p>
    <p>X X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>FATE</p>
    <p>A failure injection framework  target IO points  Systematically exploring failure  Multiple failures</p>
    <p>New abstraction of failure scenario  Remember injected failures  Increase failure coverage</p>
    <p>M 1C 2 3 X</p>
    <p>X X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>FATE</p>
    <p>A failure injection framework  target IO points  Systematically exploring failure  Multiple failures</p>
    <p>New abstraction of failure scenario  Remember injected failures  Increase failure coverage</p>
    <p>M 1C 2 3 X</p>
    <p>X X</p>
    <p>X</p>
    <p>X X</p>
  </div>
  <div class="page">
    <p>Failure ID</p>
  </div>
  <div class="page">
    <p>Failure ID</p>
    <p>FieldsFields Values Static Func. Call OutputStream.read()Static</p>
    <p>Source File BlockReceiver.java Dynamic Stack Track  Domain specific</p>
    <p>Source Node 2Domain specific Destination Node 3 Domain specific</p>
    <p>Net. Message Data Packet Failure Type Crash After Hash 1234872912348729</p>
  </div>
  <div class="page">
    <p>How Developers Build Failure ID?</p>
    <p>FATE intercepts all I/Os  Use aspectJ to collect information at</p>
    <p>every I/O point  I/O buffers (e.g file buffer, network</p>
    <p>buffer)  Target I/O (e.g. file name, IP address)</p>
    <p>Reverse engineer for domain specific information</p>
  </div>
  <div class="page">
    <p>Failure ID</p>
  </div>
  <div class="page">
    <p>Failure ID</p>
    <p>FieldsFields Values Static Func. Call OutputStream.read()Static</p>
    <p>Source File BlockReceiver.java Dynamic Stack Track  Domain specific</p>
    <p>Source Node 2Domain specific Destination Node 3 Domain specific</p>
    <p>Net. Message Data Packet Failure Type Crash After Hash 1234872912348729</p>
  </div>
  <div class="page">
    <p>Failure ID</p>
    <p>FieldsFields Values Static Func. Call OutputStream.read()Static</p>
    <p>Source File BlockReceiver.java Dynamic Stack Track  Domain specific</p>
    <p>Source Node 2Domain specific Destination Node 3 Domain specific</p>
    <p>Net. Message Data Packet Failure Type Crash After Hash 1234872912348729</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
    <p>M 1C 2 3</p>
    <p>AExp #1: A</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
    <p>M 1C 2 3</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>Exp #1: A</p>
    <p>Exp #2: B</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
    <p>M 1C 2 3</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B C</p>
    <p>Exp #1: A</p>
    <p>Exp #2: B</p>
    <p>Exp #3: C</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
    <p>M 1C 2 3</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B C</p>
    <p>Exp #1: A</p>
    <p>Exp #2: B</p>
    <p>Exp #3: C</p>
    <p>M 1C 2 3</p>
    <p>B</p>
    <p>AAB</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
    <p>M 1C 2 3</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B C</p>
    <p>Exp #1: A</p>
    <p>Exp #2: B</p>
    <p>Exp #3: C</p>
    <p>M 1C 2 3</p>
    <p>B C</p>
    <p>B</p>
    <p>A</p>
    <p>A</p>
    <p>AB</p>
    <p>AC</p>
  </div>
  <div class="page">
    <p>Exploring Failure Space</p>
    <p>M 1C 2 3</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B C</p>
    <p>Exp #1: A</p>
    <p>Exp #2: B</p>
    <p>Exp #3: C</p>
    <p>M 1C 2 3</p>
    <p>A</p>
    <p>B C</p>
    <p>B</p>
    <p>A</p>
    <p>A</p>
    <p>AB</p>
    <p>AC</p>
    <p>B C BC</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction FATE  DESTINI  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>DESTINI  Enable concise recovery specifications  Check if expected behaviors match with</p>
    <p>actual behaviors  Important elements:</p>
    <p>Expectations  Facts  Failure Events  Check Timing</p>
    <p>Interpose network and disk protocols</p>
  </div>
  <div class="page">
    <p>Writing specifications</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
    <p>violationTable():- expectationTable(), NOT-IN actualTable()</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
    <p>violationTable():- expectationTable(), NOT-IN actualTable()</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
    <p>violationTable():- expectationTable(), NOT-IN actualTable()</p>
    <p>DataLog syntax:</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
    <p>violationTable():- expectationTable(), NOT-IN actualTable()</p>
    <p>DataLog syntax: :- derivation</p>
  </div>
  <div class="page">
    <p>Writing specifications Violation if expectation is different from</p>
    <p>actual facts</p>
    <p>violationTable():- expectationTable(), NOT-IN actualTable()</p>
    <p>DataLog syntax: :- derivation , AND</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect Recovery</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect Recovery</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect Recovery</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect Recovery</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect Recovery</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node) B Node 1</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node) B Node 1</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node) B Node 2</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node) B Node 1</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node) B Node 2</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node) B Node 1</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node) B Node 2</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>BUILD EXPECTATIONS</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>Expected Nodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node) B Node 1</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node) B Node 2</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>BUILD EXPECTATIONS CAPTURE FACTS</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);</p>
  </div>
  <div class="page">
    <p>Building Expectations</p>
    <p>M 1C 2 3</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Building Expectations</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Master Client</p>
    <p>Give me list of nodes for B</p>
    <p>[Node 1, Node 2, Node 3]</p>
  </div>
  <div class="page">
    <p>Building Expectations</p>
    <p>expectedNodes(B, N) :- getBlockPipe(B, N);</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Master Client</p>
    <p>Give me list of nodes for B</p>
    <p>[Node 1, Node 2, Node 3]</p>
  </div>
  <div class="page">
    <p>Building Expectations</p>
    <p>expectedNodes(B, N) :- getBlockPipe(B, N);</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Master Client</p>
    <p>Give me list of nodes for B</p>
    <p>[Node 1, Node 2, Node 3]</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Client receives all acks from setup stage writeStage  enter Data Transfer stage</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Client receives all acks from setup stage writeStage  enter Data Transfer stage</p>
    <p>setupAcks (B, Pos, Ack) :- cdpSetupAck (B, Pos, Ack); goodAcksCnt (B, COUNT&lt;Ack&gt;) :- setupAcks (B, Pos, Ack), Ack == OK; nodesCnt (B, COUNT&lt;Node&gt;) :- pipeNodes (B, , N, ); writeStage (B, Stg) :- nodesCnt (NCnt), goodAcksCnt (ACnt), NCnt == Acnt, Stg := Data Transfer;</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Client receives all acks from setup stage writeStage  enter Data Transfer stage</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Client receives all acks from setup stage writeStage  enter Data Transfer stage</p>
    <p>Precise failure events</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Client receives all acks from setup stage writeStage  enter Data Transfer stage</p>
    <p>Precise failure events - Different stages  different recovery behaviors  different</p>
    <p>specifications</p>
  </div>
  <div class="page">
    <p>Updating Expectation</p>
    <p>DEL expectedNodes(B, N) :- fateCrashNode(N), writeStage(B, Stage), Stage = Data Transfer, expectedNode(B, N)</p>
    <p>Expected Nodes(Block, Node)Expected Nodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>B Node 2</p>
    <p>B Node 3</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Client receives all acks from setup stage writeStage  enter Data Transfer stage</p>
    <p>Precise failure events - Different stages  different recovery behaviors  different</p>
    <p>specifications - FATE and DESTINI must work hand in hand</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>actualNodes(B, N) :- blocksLocation(B, N, Gs), latestGenStamp(B, Gs)</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>actualNodes(B, N) :- blocksLocation(B, N, Gs), latestGenStamp(B, Gs)</p>
    <p>blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)</p>
    <p>B Node 1 2</p>
    <p>B Node 2 1</p>
    <p>B Node 3 1</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>actualNodes(B, N) :- blocksLocation(B, N, Gs), latestGenStamp(B, Gs)</p>
    <p>blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)</p>
    <p>B Node 1 2</p>
    <p>B Node 2 1</p>
    <p>B Node 3 1</p>
    <p>latestGenStamp(B, Gs)latestGenStamp(B, Gs)</p>
    <p>B 2</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>actualNodes(B, N) :- blocksLocation(B, N, Gs), latestGenStamp(B, Gs)</p>
    <p>blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)</p>
    <p>B Node 1 2</p>
    <p>B Node 2 1</p>
    <p>B Node 3 1</p>
    <p>latestGenStamp(B, Gs)latestGenStamp(B, Gs)</p>
    <p>B 2</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>actualNodes(B, N) :- blocksLocation(B, N, Gs), latestGenStamp(B, Gs)</p>
    <p>blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)</p>
    <p>B Node 1 2</p>
    <p>B Node 2 1</p>
    <p>B Node 3 1</p>
    <p>latestGenStamp(B, Gs)latestGenStamp(B, Gs)</p>
    <p>B 2</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Capture Facts</p>
    <p>actualNodes(B, N) :- blocksLocation(B, N, Gs), latestGenStamp(B, Gs)</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)blocksLocations(B, N, Gs)</p>
    <p>B Node 1 2</p>
    <p>B Node 2 1</p>
    <p>B Node 3 1</p>
    <p>latestGenStamp(B, Gs)latestGenStamp(B, Gs)</p>
    <p>B 2</p>
    <p>M 1C 2 3 Correct recovery</p>
    <p>X</p>
    <p>M 1C 2 3</p>
    <p>X</p>
    <p>Incorrect recovery</p>
    <p>B_gs2 B_gs1 B_gs1</p>
  </div>
  <div class="page">
    <p>Violation and Check-Timing</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>B Node 2</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N), cnpComplete(B) ;</p>
  </div>
  <div class="page">
    <p>Violation and Check-Timing</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>B Node 2</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N), cnpComplete(B) ;</p>
    <p>There is a point in time where recovery is ongoing, thus specifications are violated</p>
  </div>
  <div class="page">
    <p>Violation and Check-Timing</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>B Node 2</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N), cnpComplete(B) ;</p>
    <p>There is a point in time where recovery is ongoing, thus specifications are violated</p>
    <p>Need precise events to decide when the check should be done</p>
  </div>
  <div class="page">
    <p>Violation and Check-Timing</p>
    <p>actualNodes(Block, Node)actualNodes(Block, Node)</p>
    <p>B Node 1</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>ExpectedNodes (Block, Node)</p>
    <p>B Node 1 B Node 2</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>IncorrectNodes (Block, Node)</p>
    <p>B Node 2</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N), cnpComplete(B) ;</p>
    <p>There is a point in time where recovery is ongoing, thus specifications are violated</p>
    <p>Need precise events to decide when the check should be done  In this example, upon block completion</p>
  </div>
  <div class="page">
    <p>Rules</p>
    <p>r1 incorrectNodes (B, N) :- cnpComplete (B), expectedNodes (B, N), NOT-IN actualNodes (B, N); r2 pipeNodes (B, Pos, N) :- getBlkPipe (UFile, B, Gs, Pos, N); r3 expectedNodes (B, N) :- getBlkPipe (UFile, B, Gs, Pos, N); r4 DEL expectedNodes (B, N) :- fateCrashNode (N), pipeStage (B, Stg), Stg == 2, expectedNodes (B, N); r5 setupAcks (B, Pos, Ack) :- cdpSetupAck (B, Pos, Ack); r6 goodAcksCnt (B, CUUNT&lt;Ack&gt;) :- setupAcks (B, Pos, Ack), Ack == OK; r7 nodesCnt (B, COUNT&lt;Node&gt;) :- pipeNodes (B, , N, ); r8 pipeStage (B, Stg) :- nodesCnt (NCnt), goodAcksCnt (ACnt), NCnt == Acnt, Stg := 2; r9 blkGenStamp (B, Gs) :- dnpNextGenStamp (B, Gs); r10 blkGenStamp (B, Gs) :- cnpGetBlkPipe (UFile, B, Gs, , ); r11 diskFiles (N, File) :- fsCreate (N, File); r12 diskFiles (N, Dst) :- fsRename (N, Src, Dst), diskFiles (N, Src, Type); r13 DEL diskFiles (N, Src) :- fsRename (N, Src, Dst), diskFiles (N, Src, Type); r14 fileTypes (N, File, Type) :- diskFiles(N, File), Type := Util.getType(File); r15 blkMetas (N, B, Gs) :- fileTypes (N, File, Type), Type == metafile, Gs := Util.getGs(File); r16 actualNodes (B, N) :- blkMetas (N, B, Gs), blkGenStamp (B, Gs);</p>
  </div>
  <div class="page">
    <p>Rules</p>
    <p>r1 incorrectNodes (B, N) :- cnpComplete (B), expectedNodes (B, N), NOT-IN actualNodes (B, N); r2 pipeNodes (B, Pos, N) :- getBlkPipe (UFile, B, Gs, Pos, N); r3 expectedNodes (B, N) :- getBlkPipe (UFile, B, Gs, Pos, N); r4 DEL expectedNodes (B, N) :- fateCrashNode (N), pipeStage (B, Stg), Stg == 2, expectedNodes (B, N); r5 setupAcks (B, Pos, Ack) :- cdpSetupAck (B, Pos, Ack); r6 goodAcksCnt (B, CUUNT&lt;Ack&gt;) :- setupAcks (B, Pos, Ack), Ack == OK; r7 nodesCnt (B, COUNT&lt;Node&gt;) :- pipeNodes (B, , N, ); r8 pipeStage (B, Stg) :- nodesCnt (NCnt), goodAcksCnt (ACnt), NCnt == Acnt, Stg := 2; r9 blkGenStamp (B, Gs) :- dnpNextGenStamp (B, Gs); r10 blkGenStamp (B, Gs) :- cnpGetBlkPipe (UFile, B, Gs, , ); r11 diskFiles (N, File) :- fsCreate (N, File); r12 diskFiles (N, Dst) :- fsRename (N, Src, Dst), diskFiles (N, Src, Type); r13 DEL diskFiles (N, Src) :- fsRename (N, Src, Dst), diskFiles (N, Src, Type); r14 fileTypes (N, File, Type) :- diskFiles(N, File), Type := Util.getType(File); r15 blkMetas (N, B, Gs) :- fileTypes (N, File, Type), Type == metafile, Gs := Util.getGs(File); r16 actualNodes (B, N) :- blkMetas (N, B, Gs), blkGenStamp (B, Gs);</p>
  </div>
  <div class="page">
    <p>Rules</p>
    <p>r1 incorrectNodes (B, N) :- cnpComplete (B), expectedNodes (B, N), NOT-IN actualNodes (B, N); r2 pipeNodes (B, Pos, N) :- getBlkPipe (UFile, B, Gs, Pos, N); r3 expectedNodes (B, N) :- getBlkPipe (UFile, B, Gs, Pos, N); r4 DEL expectedNodes (B, N) :- fateCrashNode (N), pipeStage (B, Stg), Stg == 2, expectedNodes (B, N); r5 setupAcks (B, Pos, Ack) :- cdpSetupAck (B, Pos, Ack); r6 goodAcksCnt (B, CUUNT&lt;Ack&gt;) :- setupAcks (B, Pos, Ack), Ack == OK; r7 nodesCnt (B, COUNT&lt;Node&gt;) :- pipeNodes (B, , N, ); r8 pipeStage (B, Stg) :- nodesCnt (NCnt), goodAcksCnt (ACnt), NCnt == Acnt, Stg := 2; r9 blkGenStamp (B, Gs) :- dnpNextGenStamp (B, Gs); r10 blkGenStamp (B, Gs) :- cnpGetBlkPipe (UFile, B, Gs, , ); r11 diskFiles (N, File) :- fsCreate (N, File); r12 diskFiles (N, Dst) :- fsRename (N, Src, Dst), diskFiles (N, Src, Type); r13 DEL diskFiles (N, Src) :- fsRename (N, Src, Dst), diskFiles (N, Src, Type); r14 fileTypes (N, File, Type) :- diskFiles(N, File), Type := Util.getType(File); r15 blkMetas (N, B, Gs) :- fileTypes (N, File, Type), Type == metafile, Gs := Util.getGs(File); r16 actualNodes (B, N) :- blkMetas (N, B, Gs), blkGenStamp (B, Gs);</p>
    <p>Capture Facts, Build Expectation from IO events - No need to interpose internal functions</p>
    <p>Specification Reuse - For the first check, # rules : #check is 16:1 - Overall, #rules: # check ratio is 3:1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction FATE DESTINI  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Evaluation  FATE: 3900 lines, DESTINI: 1200 lines  Applied FATE and DESTINI to three</p>
    <p>cloud systems  HDFS, ZooKeeper, Cassandra</p>
    <p>40,000 unique combination of failures  Found 16 new bugs, reproduced 74</p>
    <p>bugs  74 recovery specifications</p>
    <p>3 lines / check 26</p>
  </div>
  <div class="page">
    <p>Bugs found</p>
    <p>Reduced availability and performance  Data loss due to multiple failures  Data loss in log recovery protocol  Data loss in append protocol  Rack awareness property is broken</p>
  </div>
  <div class="page">
    <p>Conclusion  FATE explores multiple failure systematically  DESTINI enables concise recovery specifications  FATE and DESTINI: a unified framework</p>
    <p>Testing recovery specifications requires a failure service  Failure service needs recovery specifications to catch</p>
    <p>recovery bugs</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>The Advanced Systems Laboratory</p>
    <p>http://www.cs.wisc.edu/adsl</p>
    <p>Berkeley Orders of Magnitude http://boom.cs.berkeley.edu</p>
    <p>QUESTIONS?</p>
    <p>Downloads our full TR paper from these websites</p>
  </div>
</Presentation>
