<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The TURBO Diaries: Application-based</p>
    <p>Frequency Scaling Explained Jons-Tobias Wamhoff Stephan Diestelhorst</p>
    <p>Christof Fetzer Technische Universitt Dresden, Germany</p>
    <p>! Patrick Marlier Pascal Felber</p>
    <p>Universit de Neuchtel, Switzerland !</p>
    <p>Dave Dice Oracle Labs, USA</p>
  </div>
  <div class="page">
    <p>Overview  Dynamic voltage and frequency scaling (DVFS)</p>
    <p>traditionally: used to save energy or boost sequential bottlenecks/serial peak loads</p>
    <p>today: improve performance by exposing asymmetric properties of applications</p>
    <p>!</p>
    <p>Outline  Recap DVFS features on current x86 multicores  DVFS properties: latency and power  Applying DVFS on application-level</p>
  </div>
  <div class="page">
    <p>P- and C-states</p>
    <p>P-states: performance states  predefined frequency/voltage pairs  controlled through machine-specific registers</p>
    <p>(MSRs, privileged rdmsr/wrmsr)</p>
    <p>C-states: power states  trade entry/wakeup latency for higher power</p>
    <p>savings</p>
    <p>entered by hlt or monitor/mwait</p>
    <p>Pturbo</p>
    <p>Pbase</p>
    <p>Pslow</p>
    <p>C0</p>
    <p>C1-Cnhalted</p>
    <p>fr eq ue nc y/ vo lt ag e</p>
  </div>
  <div class="page">
    <p>AMD Turbo CORE</p>
    <p>Voltage and frequency domain: module vs. package</p>
    <p>Intel Turbo Boost</p>
    <p>&amp;</p>
    <p>Boosting: deterministic vs. thermal</p>
    <p>Pbase Pbase Pbase Pbase</p>
    <p>Pturbo C1 C1 C1</p>
    <p>Pturbo Pslow Pslow Pslow</p>
    <p>HT HTx86 FPU x86</p>
    <p>AMD only: asymmetric frequencies with manual boost</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>Critical sections (CS) protected by MCS queue lock  Decorations on acquire/release  trigger DVFS  Variable size of CS  amortize DVFS cost  Effective CS frequency:  Energy for 1 hour at Pbase: 5</p>
    <p>fPbase tCStwaitAc</p>
    <p>qu ir e e nt ry</p>
    <p>A cq ui re ex it</p>
    <p>R el ea se</p>
    <p>time</p>
    <p>FORMULAS</p>
    <p>fCS = fbase  tCS</p>
    <p>tA+CS+R</p>
    <p>ENORM = Esample  tA+CS+R</p>
    <p>tCS</p>
    <p>FORMULAS</p>
    <p>fCS = fbase  tCS</p>
    <p>tA+CS+R</p>
    <p>ENORM = Esample  tA+CS+R</p>
    <p>tCS</p>
  </div>
  <div class="page">
    <p>Automatic Frequency Scaling</p>
    <p>Decoration: spinning vs. blocking  P-state transitions triggered by hardware</p>
    <p>fPturbo</p>
    <p>fPbase twait</p>
    <p>tCS</p>
    <p>t P ba se  C ha lt</p>
    <p>t C ha lt P b as e</p>
    <p>t P tu rb o P b as e</p>
    <p>tramp OS halt: entry, wakeup</p>
    <p>CPU deeper C-state boosted P-state</p>
  </div>
  <div class="page">
    <p>f C</p>
    <p>S (G</p>
    <p>H z)</p>
    <p>Frequency AMD</p>
    <p>Frequency Intel</p>
    <p>SizeCS (cycles, log)</p>
    <p>E N</p>
    <p>O R</p>
    <p>M (k</p>
    <p>W h)</p>
    <p>Energy AMD spin futex</p>
    <p>SizeCS (cycles, log)</p>
    <p>Energy Intel</p>
    <p>Blocking vs. Spinning Locks</p>
    <p>! 1.5M</p>
    <p>! 4M</p>
  </div>
  <div class="page">
    <p>Manual Frequency Scaling</p>
    <p>Decoration: spin and application-level DVFS control 8</p>
    <p>fPturbo</p>
    <p>fPbase fPslow</p>
    <p>twait</p>
    <p>tCS</p>
    <p>t P ba se  P s lo w</p>
    <p>t P sl ow  P t ur bo</p>
    <p>t P tu rb o P b as e</p>
    <p>tramp</p>
    <p>ioctl 1k 1k 1k</p>
    <p>wrmsr 28k 2k 23k</p>
    <p>transition 2k 225k 1k</p>
  </div>
  <div class="page">
    <p>SizeCS (cycles, log)</p>
    <p>f C</p>
    <p>S (G</p>
    <p>H z)</p>
    <p>Frequency AMD</p>
    <p>SizeCS (cycles, log)</p>
    <p>E N</p>
    <p>O R</p>
    <p>M (k</p>
    <p>W h)</p>
    <p>Energy AMD spin ownr dlgt mgrt</p>
    <p>Manual Lock Boosting</p>
    <p>spin: static Pbase  owner: dynamically boost</p>
    <p>delegate: dedicated wrmsr core  migrate: statically boosted core</p>
    <p>! 600k</p>
    <p>!200k ! 400k</p>
    <p>futex: 1.5M</p>
  </div>
  <div class="page">
    <p>TURBO Library  Convenient programmatical application-level DVFS control  Testbed to explore challenges of future heterogeneous cores</p>
    <p>Linux kernel and hardware interfaces</p>
    <p>Hardware abstraction</p>
    <p>Topology PCI-Configuration MSR-Interface - P-states</p>
    <p>PerfEvent - HW counters</p>
    <p>Performance configuration</p>
    <p>Thread - Migrate to core</p>
    <p>P-States - Setting &amp; configuration</p>
    <p>PerformanceMonitor - Low-level profiling</p>
    <p>Execution control</p>
    <p>ThreadRegistry - Create/Register</p>
    <p>ThreadControl - Decorate lock, barriers, : boosting/profiling</p>
  </div>
  <div class="page">
    <p>Boosting Applications</p>
    <p>Expose application knowledge  Asymmetric software transactional memory:</p>
    <p>up to 50% speedup with only 2% more energy</p>
    <p>Tradeoffs when IPC depends on core frequency  Hash table resize in memcached:</p>
    <p>Outweigh P-state latency by delegating CS  High cross-module round-trip delay (2k cycles)  Intra-module delay scales with P-state (Pboost: 280 cycles)</p>
  </div>
</Presentation>
