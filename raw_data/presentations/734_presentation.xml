<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ORDER: Object centRic DEterministic Replay for Java</p>
    <p>ZheMin Yang, Min Yang, Lvcai Xu, Haibo Chen and Binyu Zang</p>
    <p>Parallel Processing Institute, Fudan University</p>
  </div>
  <div class="page">
    <p>Debugging</p>
    <p>Buggy Execution</p>
    <p>Crash</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>T4</p>
    <p>Run again</p>
    <p>Bug</p>
    <p>Normal Run</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>T4</p>
  </div>
  <div class="page">
    <p>Deterministic Replay</p>
    <p>Record Mode</p>
    <p>Crash</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>T4</p>
    <p>Checkpoint B Checkpoint C</p>
    <p>log A log B log C</p>
    <p>Checkpoint A</p>
    <p>Crash</p>
    <p>Read Checkpoint B</p>
    <p>Replaying from</p>
    <p>log B, C Replay Mode</p>
    <p>Bug</p>
    <p>Bug</p>
  </div>
  <div class="page">
    <p>Primary Backup</p>
  </div>
  <div class="page">
    <p>State-of-the-art</p>
    <p>Mostly focus on native systems Address-based dependency tracking</p>
    <p>Special hardware support (FDR ISCA03, Bugnet ISCA05, Lreplay ISCA10, etc.)</p>
    <p>Software approach: large overhead, inscalable (SMP-Revirt, VEE07, etc.)</p>
    <p>Replay for managed runtime Not counting data race (JaRec, SPE04)</p>
    <p>Not cover external dependency, large overhead (Leap, FSE10)</p>
    <p>Not cover non-determinism inside managed runtime</p>
  </div>
  <div class="page">
    <p>Contribution</p>
    <p>Key observations False positive in garbage collection</p>
    <p>Access locality in object level</p>
    <p>ORDER</p>
    <p>Record and replay at object-level Eliminate false positive in GC</p>
    <p>Good locality and less contention</p>
    <p>Scalable performance (108% for JRuby, SpecJBB, SPECJVM)</p>
    <p>Cover more non-determinisms than before</p>
    <p>Good bug reproducibility</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Why object centric deterministic replay?</p>
    <p>Recording object access timeline</p>
    <p>Non-determinism mitigated</p>
    <p>Optimizations</p>
    <p>Evaluation Result</p>
  </div>
  <div class="page">
    <p>Java Runtime Behavior</p>
    <p>Garbage Collection</p>
    <p>Movement of object is quite often</p>
    <p>Object-oriented design</p>
    <p>Inherently good access locality</p>
  </div>
  <div class="page">
    <p>Address-based dependency tracking</p>
    <p>Ordering shared memory accesses:</p>
    <p>(space)</p>
    <p>Two instructions are tracked if:</p>
    <p>GC operates on the same heap space as the</p>
    <p>original application</p>
    <p>Huge write operations in GC</p>
    <p>GC threads are always different from Java threads</p>
  </div>
  <div class="page">
    <p>Dependencies Introduced by GC</p>
    <p>Write operations in GC introduce</p>
    <p>dependencies</p>
    <p>Two instructions are tracked if:</p>
    <p>GC operates on the same heap space as the</p>
    <p>original application</p>
    <p>Huge write operations in GC</p>
    <p>GC threads are always different from Java threads</p>
  </div>
  <div class="page">
    <p>Dependencies Introduced by GC</p>
    <p>They DO affect the address-based dependency</p>
    <p>tracking system</p>
    <p>Root cause: object movement</p>
    <p>So they can not be ignored</p>
    <p>Before Garbage Collection Mark&amp;Sweep Compression(Copying GC)</p>
    <p>Replay System</p>
    <p>Dependency Tracking</p>
    <p>Information</p>
    <p>Inconsistent</p>
  </div>
  <div class="page">
    <p>False Positives by GC</p>
  </div>
  <div class="page">
    <p>Interleaving of Object Accesses</p>
    <p>Java programs are commonly designed around</p>
    <p>objects</p>
    <p>Objects accessed by a thread are very likely to be</p>
    <p>accessed by the same thread soon</p>
  </div>
  <div class="page">
    <p>Interleaving of Object Accesses</p>
    <p>Object level interleaving rate: All less than 7%!</p>
  </div>
  <div class="page">
    <p>Object Centric Deterministic Replay</p>
    <p>Reveal new granularity: object</p>
    <p>Reduction of GC dependencies</p>
    <p>Reduced contention of synchronization</p>
    <p>Improved locality</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Why Object centric deterministic replay?</p>
    <p>Recording object access timeline</p>
    <p>Non-determinism mitigated</p>
    <p>Optimizations</p>
    <p>Evaluation Result</p>
  </div>
  <div class="page">
    <p>Design of ORDER</p>
    <p>Dynamic Instrumentation in Java compilation pipeline</p>
    <p>Handle dynamic loaded library and external code by default</p>
    <p>Extend object header with accessing information</p>
    <p>Object identifier (OI)</p>
    <p>Accessing thread identifier (AT)</p>
    <p>Access counter (AC)</p>
    <p>Object level lock</p>
    <p>Read-write flag</p>
  </div>
  <div class="page">
    <p>Recording Object Access Timeline</p>
  </div>
  <div class="page">
    <p>Recording Timeline</p>
  </div>
  <div class="page">
    <p>Replaying timeline</p>
    <p>Inconsistent</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Why Object centric deterministic replay?</p>
    <p>Recording object access timeline</p>
    <p>Non-determinism mitigated</p>
    <p>Optimizations</p>
    <p>Evaluation Result</p>
  </div>
  <div class="page">
    <p>Handling Non-determinisms</p>
    <p>Interleaved object accesses</p>
    <p>Lock acquirement</p>
    <p>Garbage collection</p>
    <p>In paper: Signal</p>
    <p>Program Input</p>
    <p>Library invocation</p>
    <p>Configuration of OS/JVM</p>
    <p>Adaptive Compilation</p>
    <p>Class Initialization</p>
    <p>Recording object access timeline</p>
    <p>Recording interfaces between GC/Java threads</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Why Object centric deterministic replay?</p>
    <p>Recording object access timeline</p>
    <p>Non-determinism mitigated</p>
    <p>Optimizations</p>
    <p>Evaluation Result</p>
  </div>
  <div class="page">
    <p>Opt: Unnecessary Timeline Recording</p>
    <p>Thread-local objects</p>
    <p>Identified by Escape Analysis [OOPSLA99]</p>
    <p>Assigned-once objects</p>
    <p>Continuous write operations during initialization</p>
    <p>After initialization, no thread will write to the fields of</p>
    <p>these objects</p>
    <p>Identified by modifying the Escape Analysis</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Why Object centric deterministic replay?</p>
    <p>Recording object access timeline</p>
    <p>Non-determinism mitigated</p>
    <p>Optimizations</p>
    <p>Evaluation Result</p>
  </div>
  <div class="page">
    <p>Evaluation Environments</p>
    <p>Implemented in Apache Harmony</p>
    <p>By modifying the compilation pipeline</p>
    <p>Machine setup</p>
    <p>Linux 2.6.26</p>
    <p>Benchmarks</p>
    <p>SPECjvm2008, Pseudojbb2005, JRuby</p>
  </div>
  <div class="page">
    <p>Evaluation Questions</p>
    <p>How much overhead ORDER incurs in record and</p>
    <p>replay?</p>
    <p>How does it compare to the state-of-the-art?</p>
    <p>How large is the log size?</p>
    <p>How about the bug reproducibility?</p>
  </div>
  <div class="page">
    <p>Evaluation Results: Record Slowdown</p>
    <p>About 2x slowdown, overhead most comes from</p>
    <p>tracing timeline in memory</p>
  </div>
  <div class="page">
    <p>Record slowdown(compared to LEAP)</p>
    <p>ORDER records more non-determinism</p>
  </div>
  <div class="page">
    <p>Scalability(Record Phase)</p>
    <p>(from 1 thread to 16 threads)</p>
    <p>Almost scalable</p>
  </div>
  <div class="page">
    <p>Replay Slowdown</p>
    <p>(from 1 thread to 16 threads)</p>
  </div>
  <div class="page">
    <p>Log size</p>
  </div>
  <div class="page">
    <p>Bug Reproducibility</p>
    <p>Real-world concurrent bugs</p>
    <p>reproduced by ORDER. Each of</p>
    <p>them comes from open source</p>
    <p>communities and causes real-world</p>
    <p>buggy execution.</p>
  </div>
  <div class="page">
    <p>Bug reproducibility(JRuby-2483)</p>
    <p>Concurrent bug caused by thread unsafe library</p>
    <p>HashMap</p>
    <p>Non-determinism in Library is also important</p>
    <p>Some discussion before:</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Java Deterministic Replay is unique Two observations on Java Runtime Behavior</p>
    <p>Object centric deterministic replay Reveal new granularity: Object</p>
    <p>Cover more non-determinisms than before</p>
    <p>Record timeline</p>
    <p>Performance About 108% performance slowdown, and scalable.</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>Parallel Processing Institute</p>
    <p>http://ppi.fudan.edu.cn</p>
    <p>Questions? ORDER</p>
    <p>Object-centRic Deterministic Replay for</p>
    <p>Java</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Comparison with Leap</p>
    <p>LEAP uses static instrumentation</p>
    <p>Cannot reproduce concurrent bugs caused by external</p>
    <p>code</p>
    <p>such as libraries or class files dynamically loaded during</p>
    <p>runtime.</p>
    <p>LEAP does not distinguish between instances of</p>
    <p>the same type</p>
    <p>may lead to large performance overhead when a class</p>
    <p>is massively instantiated</p>
  </div>
  <div class="page">
    <p>Dependency-based Deterministic Replay: JRuby</p>
    <p>Correct</p>
    <p>In dependency based replay , 2-&gt;3 or 3-&gt;2 is normally recorded Shared-memory(entry.method) is accessed in both 2 and 3 One of them(instruction 3) is write</p>
    <p>Whether 1-&gt;3 is recorded depends on: Whether 1 and 3 access a shared memory Depends on the record granularity</p>
  </div>
  <div class="page">
    <p>Opt: Unnecessary Timeline Recording</p>
    <p>Use soot to annotate such objects offline</p>
    <p>Reduce record/replay overhead as well as log size</p>
    <p>Static analysis is imprecise, so further log reduction is</p>
    <p>necessary</p>
    <p>Use a log compressor to eliminate the remaining</p>
    <p>thread local/assigned once objects after recording</p>
    <p>Used to reduce replay overhead as well as log size</p>
  </div>
  <div class="page">
    <p>Handling Other Non-Det (1/2)</p>
    <p>Signal Usually wrapped to wait, notify, and interrupt operations for thread</p>
    <p>Records return values and status of the pending queue</p>
    <p>Program Input Log the content of input</p>
    <p>Library invocation E.g., System.getCurrentTimeMillis(), Random/SecureRandom classes</p>
    <p>Logs return values of these methods</p>
  </div>
  <div class="page">
    <p>Handling Other Non-Det (2/2)</p>
    <p>Configuration of OS/JVM</p>
    <p>records the configuration of OS/JVM</p>
    <p>Class Initialization</p>
    <p>Records initialization thread identifier</p>
    <p>Forces same thread initialize same class in replay</p>
    <p>Adaptive Compilation</p>
    <p>Not supported yet, can be done similarly as Ogata et al.</p>
    <p>OOPLSA2006</p>
  </div>
</Presentation>
