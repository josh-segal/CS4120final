<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Direct Access File System (DAFS)</p>
    <p>Matt DeBergalis, Peter Corbett, Steve Kleiman, Arthur Lent, Dave Noveck, Tom Talpey, Mark Wittle</p>
    <p>Network Appliance, Inc.</p>
    <p>Usenix FAST 03</p>
    <p>Tom Talpey</p>
    <p>tmt@netapp.com</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>DAFS  Direct Access File System</p>
  </div>
  <div class="page">
    <p>DAFS Design Points</p>
  </div>
  <div class="page">
    <p>DAFS Protocol</p>
  </div>
  <div class="page">
    <p>DAFS Protocol Enhanced Semantics</p>
  </div>
  <div class="page">
    <p>DAT  Direct Access Transport</p>
    <p>Portable, high-performance transport underpinning for DAFS and applications</p>
    <p>Defines communications endpoints, transfer semantics, memory description, signalling, etc.</p>
  </div>
  <div class="page">
    <p>DAFS Inline Read</p>
    <p>READ_INLINE</p>
    <p>Application Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Client</p>
    <p>REPLY</p>
    <p>Server Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Server</p>
    <p>READ_INLINE</p>
    <p>REPLY</p>
  </div>
  <div class="page">
    <p>DAFS Direct Read</p>
    <p>READ_DIRECT</p>
    <p>Application Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Client</p>
    <p>REPLY</p>
    <p>Server Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Server</p>
    <p>READ_DIRECT</p>
    <p>REPLY</p>
    <p>RDMA Write</p>
  </div>
  <div class="page">
    <p>DAFS Inline Write</p>
    <p>WRITE_INLINE</p>
    <p>Application Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Client</p>
    <p>REPLY</p>
    <p>Server Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Server</p>
    <p>WRITE_INLINE</p>
    <p>REPLY</p>
  </div>
  <div class="page">
    <p>DAFS Direct Write</p>
    <p>WRITE_DIRECT</p>
    <p>Application Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Client</p>
    <p>REPLY</p>
    <p>Server Buffer</p>
    <p>Send Descriptor</p>
    <p>Receive Descriptor</p>
    <p>Server</p>
    <p>WRITE_DIRECT</p>
    <p>REPLY</p>
    <p>RDMA Read</p>
  </div>
  <div class="page">
    <p>DAFS-enabled Applications</p>
    <p>Raw Device Adapter</p>
    <p>Disk I/O Syscalls</p>
    <p>Application (unchanged)</p>
    <p>Buffers</p>
    <p>Device Driver</p>
    <p>DAFS Library</p>
    <p>DAT Provider Library</p>
    <p>NIC Driver</p>
    <p>RDMA NIC</p>
    <p>Kernel-level plug-in  Looks like raw disk  App uses standard</p>
    <p>disk I/O calls  Very limited access to</p>
    <p>DAFS features  Performance similar</p>
    <p>to direct-attached disk</p>
    <p>Kernel File System</p>
    <p>File I/O Syscalls</p>
    <p>Application (unchanged)</p>
    <p>Buffers</p>
    <p>File System</p>
    <p>DAFS Library</p>
    <p>DAT Provider Library</p>
    <p>NIC Driver</p>
    <p>RDMA NIC</p>
    <p>Kernel-level plug-in  Peer to local FS  App uses standard</p>
    <p>file I/O semantics  Limited access to</p>
    <p>DAFS features  Performance similar</p>
    <p>to local FS</p>
    <p>User Library</p>
    <p>Application (modified)</p>
    <p>Buffers</p>
    <p>RDNA NIC</p>
    <p>DAFS Library</p>
    <p>DAT Provider Library</p>
    <p>NIC Driver</p>
    <p>User Space</p>
    <p>OS Kernel</p>
    <p>H/W</p>
    <p>User-level library  Best performance  Full application</p>
    <p>access to DAFS semantics</p>
    <p>Paper focuses on this style</p>
    <p>User Space</p>
    <p>OS Kernel</p>
    <p>H/W</p>
    <p>DAFS API Calls</p>
  </div>
  <div class="page">
    <p>DAFS API</p>
    <p>capabilities 4 Portable and consistent interface and semantics</p>
    <p>across platforms  No need for different mount options, caching policies,</p>
    <p>client-side SCSI commands, etc.  DAFS API interface is completely specified in an open</p>
    <p>standard document, not in OS-specific documentation</p>
  </div>
  <div class="page">
    <p>The DAFS API</p>
    <p>File descriptor sharing, signals, fork()/exec()  Performance</p>
    <p>RDMA (memory registration), completion groups  New semantics</p>
    <p>Batch I/O, cache hints, named attributes, open with key, delete on last close</p>
    <p>Portability  OS independence and semantic consistency</p>
  </div>
  <div class="page">
    <p>Key DAFS API Features</p>
    <p>file I/O  Many I/Os can be issued and awaited concurrently</p>
    <p>RDMA (direct data placement)</p>
    <p>fencing, locking primitives</p>
    <p>any number of a set</p>
  </div>
  <div class="page">
    <p>Key DAFS API Features</p>
    <p>requests  Asynchronous notification of any number of completions  Scatter/gather file regions and memory regions</p>
    <p>independently  Support for high-latency operations  Cache hints</p>
    <p>plaintext password, HOSTKEY, Kerberos V, GSS-API</p>
    <p>multipathing</p>
  </div>
  <div class="page">
    <p>Benchmarks</p>
  </div>
  <div class="page">
    <p>Benchmark Configuration</p>
    <p>Adapters (GbE):  Intel PRO/1000  Emulex GN9000 VI/TCP</p>
    <p>NFSv3/UDP, DAFS</p>
    <p>Sun Gem 2.0  Emulex GN9000 VI/TCP</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>Increased throughput  Constant overhead per operation</p>
  </div>
  <div class="page">
    <p>Microbenchmark Results</p>
  </div>
  <div class="page">
    <p>Application (GNU gzip)</p>
    <p>Memory preregistration, asynchronous read and write</p>
  </div>
  <div class="page">
    <p>GNU gzip Runtimes</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
</Presentation>
