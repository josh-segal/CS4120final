<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AONT-RS:</p>
    <p>Jason Resch</p>
    <p>Cleversafe, Inc.</p>
    <p>Chicago, IL</p>
    <p>Blending Security and Performance in Dispersed Storage Systems</p>
    <p>James Plank</p>
    <p>University of Tennessee</p>
    <p>Knoxville, TN</p>
  </div>
  <div class="page">
    <p>Topics</p>
    <p>Appeals of Dispersed Storage</p>
    <p>Methods for Securing Dispersed Data</p>
    <p>A new approach: AONT-RS</p>
    <p>Results on a production system</p>
  </div>
  <div class="page">
    <p>What is Dispersed Storage?</p>
    <p>Definition:</p>
    <p>Computationally massaging data into related pieces and storing them to separate locations</p>
    <p>Data resiliency is usually achieved through forward error correction (erasure codes)</p>
    <p>Provides a K-of-N fault tolerance</p>
  </div>
  <div class="page">
    <p>Digital Content</p>
    <p>Site 1</p>
    <p>Site 2</p>
    <p>Site 3</p>
    <p>Site 4</p>
    <p>Total Slices = width = N</p>
    <p>Subset required to read = threshold = K</p>
    <p>IDA</p>
    <p>IDA</p>
  </div>
  <div class="page">
    <p>Benefits of Dispersing Data</p>
    <p>Data is highly reliable  Configurable tolerance for drive, node and site failure</p>
    <p>Distribution reduces risk of correlated failures</p>
    <p>Data can be efficiently stored  Allows for disaster recovery without replication</p>
    <p>Raw storage requirements often less than 2 copies</p>
    <p>Can also provide a high degree of security..</p>
  </div>
  <div class="page">
    <p>How do I Store Data Securely?</p>
    <p>Usual answer: Encrypt it!</p>
    <p>After encrypting, one has to protect a key  How does one store the key privately and reliably?</p>
    <p>If a key is lost, so is the data that it protects</p>
    <p>Increasing reliability or availability through replication opens additional vectors for attack and exposure</p>
    <p>In 1979, Adi Shamir and George Blakely independently discovered a better way.</p>
  </div>
  <div class="page">
    <p>Secret Sharing</p>
    <p>A secret is divided into N shares  Any threshold (K) number of shares yields the secret  Nothing is learned about the secret with &lt; K shares</p>
    <p>Allows a high degree of privacy and reliability  Exposing the secret requires multiple breaches  Shares can be unavailable yet recovery is still possible</p>
    <p>Encryption can be considered a special case of secret sharing, where N = K = 2</p>
  </div>
  <div class="page">
    <p>Drawbacks of Secret Sharing</p>
    <p>For Shamirs scheme, storage and bandwidth requirements are multiplied by N  E.g., 5 shares for 1 TB of data requires 5 TB raw  For Blakelys method, it is multiplied by (N  K)</p>
    <p>Encoding time per byte grows with N  K  Encoding for 3-of-5 is 10X faster than a 10-of-15</p>
    <p>These forms of secret sharing are unsuitable for performance- or cost-sensitive bulk data storage.</p>
  </div>
  <div class="page">
    <p>Information Dispersal</p>
    <p>Proposed by Michael O. Rabin in 1989 as a method to achieve efficiency, security, load balancing and fault tolerance</p>
    <p>Raw storage requirements are: (N / K)  Input Size  Very efficient since (N / K) may be chosen close to 1</p>
    <p>Security of Rabin is not as strong as Shamir  Having fewer than K shares yields some information  Repetitions in input create repetitions in output</p>
  </div>
  <div class="page">
    <p>Rabin IDA Security Example</p>
    <p>This occurs when the generator matrix is constant  Rabin suggested that it could be chosen randomly</p>
    <p>The problem becomes storing the random matrices:  Each matrix is N times larger than the input processed per matrix</p>
    <p>Input: a BMP file Rabin IDA Output True Security</p>
    <p>Images from http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation</p>
  </div>
  <div class="page">
    <p>Secret Sharing made Short</p>
    <p>In 1993, Hugo Krawczyk combined elements of Shamirs Secret Sharing with Rabins IDA</p>
    <p>The SSMS method:  Input is encrypted with a random encryption key  Encrypted result is dispersed using Rabins IDA  Random key is dispersed using Shamirs Secret Sharing</p>
    <p>Yields a computationally secure secret sharing scheme with good security and efficiency</p>
  </div>
  <div class="page">
    <p>AONT-RS</p>
    <p>AONT-RS was developed at Cleversafe in 2007  Combines Ron Rivests All-or-Nothing Transform with</p>
    <p>Systematic Reed-Solomon encoding</p>
    <p>Security and efficiency properties are similar to Secret Sharing made Short, but:  Encoding is faster</p>
    <p>Integrity is protected</p>
    <p>Output is shorter</p>
    <p>Rebuilding is simpler</p>
  </div>
  <div class="page">
    <p>All-or-Nothing Transform</p>
    <p>An unkeyed random transformation that is difficult to invert without all of the output  When one has all the output, reversing the</p>
    <p>transformation is trivial</p>
    <p>First described by Ron Rivest in 1997</p>
    <p>Combining an All-or-Nothing Transform with Reed-Solomon yields a computationally secure secret sharing scheme</p>
  </div>
  <div class="page">
    <p>Non-systematic Erasure Codes</p>
  </div>
  <div class="page">
    <p>Systematic Erasure Codes</p>
  </div>
  <div class="page">
    <p>Encoding Data with AONT-RS</p>
    <p>AONT Data</p>
    <p>IDA AONT</p>
    <p>Package</p>
    <p>Slice 1</p>
    <p>Slice 2</p>
    <p>Slice K</p>
    <p>Slice K+1</p>
    <p>Slice N</p>
    <p>AONT is applied as a pre-processing step to the IDA</p>
    <p>The IDA creates the first K slices by splitting the AONT package, the rest are generated using the matrix</p>
    <p>Without a threshold number of slices there is not enough information to recreate the AONT package</p>
  </div>
  <div class="page">
    <p>Enhancements to AONT</p>
    <p>Compared to Rivests original description, we made the following changes:</p>
    <p>Single application of hash function over the message</p>
    <p>Improves performance of hashing since the block size of hash functions is often larger than the ciphers block size</p>
    <p>Also allows use with stream ciphers as well as block ciphers</p>
    <p>Appending a known value prior to encryption</p>
    <p>CPU cost of hash function does not go to waste, we may check this known value to validate integrity of slices</p>
    <p>Data cannot be corrupted by an attacker with &lt; threshold</p>
  </div>
  <div class="page">
    <p>random key</p>
    <p>CipherData Hash</p>
    <p>hash valueXOR</p>
    <p>difference</p>
    <p>Encrypted Data and Canary</p>
    <p>canary</p>
    <p>Data</p>
    <p>Encoding with AONT</p>
  </div>
  <div class="page">
    <p>random key</p>
    <p>CipherData Hash</p>
    <p>hash valueXOR</p>
    <p>difference</p>
    <p>Encrypted Data and Canary</p>
    <p>canary</p>
    <p>Data</p>
    <p>Decoding with AONT</p>
  </div>
  <div class="page">
    <p>Cleversafe Architecture</p>
  </div>
  <div class="page">
    <p>Production System Results</p>
    <p>Performance was tested on Cleversafes production hardware</p>
    <p>Consisted of 1 or 2 clients writing to 8 servers</p>
    <p>Clients had 10 Gbps NICs, servers had 1 Gbps NICs. Bottleneck was CPU.</p>
  </div>
  <div class="page">
    <p>Observed Performance</p>
    <p>Algorithm Write Speed (MB/s) Read Speed (MB/s)</p>
    <p>Control 8-of-8: 214.24 174.31</p>
    <p>AONT-RS fast: 109.18 113.38</p>
    <p>AONT-RS secure: 70.84 69.18</p>
    <p>Rabin IDA: 118.79 137.83</p>
  </div>
  <div class="page">
    <p>Theoretical Performance</p>
    <p>Typical configurations our customers use:</p>
    <p>K / N close to 1 (for higher efficiency)</p>
    <p>N between 10 and 30</p>
  </div>
  <div class="page">
    <p>www.museum.tv</p>
    <p>Example Deployment</p>
    <p>Deployment details:  8 sites across US  3 power grids  10-of-16 configuration  40 TB usable, 64 TB raw</p>
    <p>Museum of Broadcast Communications</p>
    <p>100,000 hours of historic TV and radio content</p>
    <p>50,000 registered users</p>
    <p>2.6 million annual visitors</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Dispersal offers many benefits for storage:  Reliability, efficiency, scalability, and performance</p>
    <p>Dispersal may provide security without the need for a separate key management system</p>
    <p>We presented a new dispersal algorithm with an attractive blend of performance and security  Evaluated its theoretical and actual performance  Described a system in use, relying on this algorithm</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>http://www.cleversafe.com/ http://web.eecs.utk.edu/~plank/</p>
  </div>
</Presentation>
