<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BUZZ: Testing Context-Dependent Policies in Stateful Networks</p>
    <p>Seyed K. Fayaz, Tianlong Yu, Yoshiaki Tobioka, Sagar Chaki, Vyas Sekar</p>
  </div>
  <div class="page">
    <p>Overview of checking network policies</p>
    <p>Does the network do what I want it to do?</p>
    <p>Network operator</p>
    <p>Policies What I want the network to do</p>
    <p>Reality What the network does</p>
    <p>???</p>
    <p>network A B</p>
  </div>
  <div class="page">
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
    <p>R4 A B</p>
    <p>Existing work on checking network policies</p>
    <p>Static verification  HSA, NSDI12  Veriflow, NSDI13  NOD, NSDI15  Batfish, NSDI15</p>
    <p>reachability policies</p>
    <p>A can talk to BActive testing  Ping, Traceroute  ATPG, CoNext12  Pingmesh, SIGCOMM15</p>
    <p>Network operator</p>
    <p>stateless network</p>
  </div>
  <div class="page">
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
    <p>R4</p>
    <p>Light IPS Heavy IPS</p>
    <p>A B</p>
    <p>Real networks are about more than reachability</p>
    <p>context-dependent policies</p>
    <p>Network operator</p>
    <p>stateful network</p>
    <p>AB traffic</p>
    <p>Block</p>
    <p>Allow</p>
    <p>suspicious</p>
    <p>benign</p>
    <p>Heavy IPS</p>
    <p>bad signature found otherwise</p>
    <p>Light IPS # bad conn. &gt;= 10</p>
    <p>state context</p>
    <p>Light IPS</p>
    <p>suspicious</p>
    <p>How can we check context-dependent policies in stateful networks?</p>
    <p>Reachability policies  Context-dependent policies  Stateless networks  Stateful networks</p>
    <p>Scalability: How to explore the state space?</p>
    <p>Expressiveness: How to capture stateful behaviors? Challenges:</p>
  </div>
  <div class="page">
    <p>Our solution: BUZZ</p>
    <p>Operator</p>
    <p>stateful data plane</p>
    <p>FW ProxyIPS</p>
    <p>Pas s</p>
    <p>Fail</p>
    <p>BUZZ is an active testing framework to check context-dependent policies in stateful data planes</p>
    <p>BUZZ</p>
    <p>test traffic</p>
    <p>context-dependent policies</p>
  </div>
  <div class="page">
    <p>Outline  Motivation and challenges</p>
    <p>Design of BUZZ</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Data plane model</p>
    <p>Operator</p>
    <p>stateful data plane</p>
    <p>FW ProxyIPS</p>
    <p>Test traffic generation</p>
    <p>Pas s</p>
    <p>Fail</p>
    <p>context-dependent policies Challenge 1:Expressive</p>
    <p>models?</p>
    <p>Challenge 2: Scalable state</p>
    <p>space exploration test</p>
    <p>traffic</p>
    <p>Challenge 1: Expressive data plane model</p>
  </div>
  <div class="page">
    <p>Challenge 1: Expressive data plane model</p>
    <p>? ?</p>
    <p>? NF1 NF2 NF4</p>
    <p>NF3</p>
  </div>
  <div class="page">
    <p>Our idea: BDU as model of traffic unit Light IPS</p>
    <p>suspicious? or benign?</p>
    <p>Located packet (e.g., Pyretic, HSA) struct locPkt {</p>
    <p>IPHder ipHdr;</p>
    <p>NetworkPort port; };</p>
    <p>Context-carrying located packet struct CntxlocPkt {</p>
    <p>IPHder ipHdr;</p>
    <p>NetworkPort port;</p>
    <p>Context context; };</p>
    <p>struct BDU{</p>
    <p>IPHeader ipHdr;</p>
    <p>NetworkPort port;</p>
    <p>Context context;</p>
    <p>HTTPHdr httpHdr  };</p>
    <p>BUZZ Data Unit (BDU)</p>
    <p>Expressive Expressive</p>
    <p>Scalable</p>
    <p>Expressive Scalable</p>
    <p>IP packets IP packets</p>
    <p>BDU BDU</p>
  </div>
  <div class="page">
    <p>Our idea: NF as an ensemble of FSMs Light IPS</p>
    <p>NF model expressiveness</p>
    <p>NF model scalability</p>
    <p>Transfer function (e.g., Pyretic, HSA)</p>
    <p>YesNo</p>
    <p>No</p>
    <p>Yes</p>
    <p>state?</p>
    <p>middlebox code</p>
    <p>large codebase (e.g., 300K LoC)</p>
    <p>bugs? A monolithic FSM</p>
    <p>counthost1, counthost2,</p>
    <p>counthost1++, counthost2, host 1 makes</p>
    <p>a conn. attempt</p>
    <p>Ensemble of FSMs</p>
    <p>counthost1 counthost1++</p>
    <p>counthost2 counthost2++ Insight 1: Decoupling</p>
    <p>independent connections Insight 2: Decoupling</p>
    <p>independent tasks</p>
    <p>host 1 host 2</p>
    <p>T(.) located packet</p>
    <p>located packet</p>
  </div>
  <div class="page">
    <p>Putting it together: Composing NF models</p>
    <p>Individual NF models</p>
    <p>Data plane model</p>
  </div>
  <div class="page">
    <p>Data plane model</p>
    <p>Operator</p>
    <p>stateful data plane</p>
    <p>FW ProxyIPS</p>
    <p>Test traffic generation</p>
    <p>Pas s</p>
    <p>Fail</p>
    <p>context-dependent policies Challenge 1:Expressive</p>
    <p>models?</p>
    <p>Challenge 2: Scalable state</p>
    <p>space exploration test</p>
    <p>traffic</p>
    <p>Challenge 2: Scalable test traffic generation</p>
  </div>
  <div class="page">
    <p>Challenge 2: Exploring data plane state space</p>
    <p>coun%ng'IPS'per'host'modeling'</p>
    <p>&lt;0,$0&gt;$ &lt;1,0&gt;$ &lt;0,1&gt;$</p>
    <p>&lt;10,0&gt;$</p>
    <p>$</p>
    <p>&lt;10,1&gt;$ &lt;11,0&gt;$$</p>
    <p>&lt;0,10&gt;$ &lt;0,10&gt;$ &lt;0,11&gt;$</p>
    <p>$</p>
    <p>$</p>
    <p>ini#al&amp;state&amp;</p>
    <p>Conceptual view of test traffic generation: How to reach a colored state through a sequence of traffic units?</p>
    <p>Challenge of scalability wrt traffic space and state space  Strawman 1: All possible sequences of traffic units  Strawman 2: Generate random traffic units (e.g., fuzzing)  Strawman 3: Nave use of exploration tools (e.g., model checking)</p>
    <p>Light IPS host 1 host 2</p>
    <p>suspicious?</p>
  </div>
  <div class="page">
    <p>Our idea: Test traffic generation using optimized symbolic execution</p>
    <p>Optimized symbolic execution:  Minimize the number of symbolic BDUs  Scoping values of symbolic BDUs</p>
    <p>coun%ng'IPS'per'host'modeling'</p>
    <p>&lt;0,$0&gt;$ &lt;1,0&gt;$ &lt;0,1&gt;$</p>
    <p>&lt;10,0&gt;$</p>
    <p>$</p>
    <p>&lt;10,1&gt;$ &lt;11,0&gt;$$</p>
    <p>&lt;0,10&gt;$ &lt;0,10&gt;$ &lt;0,11&gt;$</p>
    <p>$</p>
    <p>$</p>
    <p>ini#al&amp;state&amp;</p>
    <p>Our high-level approach: Symbolic execution</p>
    <p>Light IPS host 1 host 2</p>
    <p>suspicious?</p>
  </div>
  <div class="page">
    <p>Outline  Motivation and challenges</p>
    <p>Design of BUZZ</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Policy parser</p>
    <p>Network operator</p>
    <p>Data plane model instantiation (C)</p>
    <p>BDU-level test traffic generation</p>
    <p>(KLEE+optimizations)</p>
    <p>Translation into test scripts (custom library + code)</p>
    <p>Library of NF models (C)</p>
    <p>Test resolution (custom code)</p>
    <p>monitoring logs</p>
    <p>(tcpdump)</p>
    <p>intended policies</p>
    <p>stateful data plane under test</p>
    <p>FW ProxyIPS</p>
    <p>Pas s</p>
    <p>Fail</p>
  </div>
  <div class="page">
    <p>Evaluation: Effectiveness of BUZZ  Found new bugs in recent SDN-based systems  Violations due to reactive control in Kinetic  Incorrect state migration in OpenNF  Faulty policy composition in PGA  Incorrect traffic tagging in FlowTags</p>
    <p>Found known violations  Broken link  Incorrect NAT configuration  SDN controller bug</p>
  </div>
  <div class="page">
    <p>Evaluation: Scalability of BUZZ</p>
    <p>Test generation takes &lt; 2min for a network with 600 switches and 60 middleboxes</p>
    <p>Topology size (# of switches) 6 52 92 196 400 600</p>
    <p>T e</p>
    <p>s t</p>
    <p>tr a</p>
    <p>ff ic</p>
    <p>g e</p>
    <p>n .</p>
    <p>la te</p>
    <p>n c y (</p>
    <p>s )</p>
    <p>BUZZ Naive Symbolic Execution Model Checking</p>
  </div>
  <div class="page">
    <p>Existing work has fundamental limitations in checking context-dependent policies in stateful data planes  Challenges:  Expressive-yet-scalable model of stateful data planes  Scalable state space exploration</p>
    <p>Our solution is BUZZ:  BUZZ Data Unit (BDU) as traffic unit model  Ensemble of FSMs as a network function (NF) model  Scalable exploration via domain-specific optimizations</p>
    <p>BUZZ can help find bugs and is scalable</p>
    <p>Conclusions</p>
  </div>
</Presentation>
