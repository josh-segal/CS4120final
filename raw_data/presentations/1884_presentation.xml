<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Time-based Coordination in Geo-Distributed Cyber-Physical Systems</p>
    <p>Sandeep Dsouza and Raj Rajkumar Carnegie Mellon University</p>
    <p>USENIX Workshop on Hot Topics in Cloud Computing 17</p>
  </div>
  <div class="page">
    <p>A Shared Notion of Time  Coordinated Actions  Ordering of Events</p>
    <p>A Shared Notion of Time is useful  Replace Communication with Local Computation*</p>
    <p>*Liskov, Distributed Computing 93</p>
  </div>
  <div class="page">
    <p>Geo-Distributed Cyber-Physical Systems  Distributed computation, sensing and actuation</p>
    <p>coordination at scale (local to planetary)  Emerging CPS characterized by:</p>
    <p>different applications, same infrastructure</p>
    <p>heterogeneous computation and networking</p>
    <p>A shared notion of time is useful to enable coordinated action in geo-distributed CPS</p>
  </div>
  <div class="page">
    <p>Coordination in Space and Time</p>
    <p>The cloud is key to achieve scale  Time-aware cloud for geo-distributed coordination</p>
  </div>
  <div class="page">
    <p>CPS and the Cloud  The cloud is key to enable geographical scaling</p>
    <p>data storage  host the intelligence behind CPS  enable coordination between smaller entities</p>
    <p>Low-latency requirements of CPS  Safety-critical + real-time performance  A hierarchy of cloudlet and cloud deployments</p>
    <p>Existing Research: Reduce Network Latency* and Efficient Data Storage#</p>
    <p>Required: Time-based coordination in CPS</p>
    <p>#Zhang, HotCloud 15 *Satyanarayanan, PerComm 15</p>
  </div>
  <div class="page">
    <p>Coordinated Vehicles using TimeNet  TimeNet: Cyber-Physical Internet</p>
    <p>ideal timesource, no uncertainty  perfect timestamping</p>
    <p>Dynamic Traffic Management  city-scale vehicular coordination  time-based hierarchical system</p>
    <p>timestamps event ordering  event ordering  policy</p>
    <p>Inherent uncertainties with synchronized clocks</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  Background</p>
    <p>Quality of Time (QoT)  QoT Architecture</p>
    <p>The Case for Shared Time and QoT  QoT-based Cloud CPS Architecture  Conclusion</p>
  </div>
  <div class="page">
    <p>Quality of Time (QoT)*  Quantified</p>
    <p>using clock parameters:  accuracy, precision, drift.</p>
    <p>w.r.t a reference clock (time)  Each timestamp has bounds</p>
    <p>Timestamp  {tl , t+</p>
    <p>h }</p>
    <p>The end-to-end uncertainty in the notion of time delivered to an application by the system</p>
    <p>*Anwar et al., RTSS 16</p>
  </div>
  <div class="page">
    <p>QoT Architecture*  Caters to application timing demands</p>
    <p>Applications specify QoT requirements  Provides guarantees on the received QoT</p>
    <p>Tunable clock synchronization  Exposes the obtained timing accuracy</p>
    <p>QoT-estimation mechanisms  Easy-to-use, secure and scalable</p>
    <p>Robust implementation</p>
    <p>Applications specify QoT requirements, the QoT Architecture orchestrates the system and returns the delivered QoT  closing the time loop</p>
    <p>*Anwar et al., RTSS 16</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  Background  The Case for Shared Time and QoT</p>
    <p>Coordination in CPS  Shared Time and QoT</p>
    <p>QoT-based CPS-Cloud Architecture  Conclusion</p>
  </div>
  <div class="page">
    <p>Coordination in CPS  Scalability</p>
    <p>Both numerical and geographical  Fault Tolerance and Reliability</p>
    <p>Both analytical and physical redundancy  Ease of Programmability</p>
    <p>coordination framework with APIs  Security</p>
    <p>Need for a QoT-based coordination framework for CPS</p>
  </div>
  <div class="page">
    <p>Uncertainty: Software Systems vs CPS  Software Systems</p>
    <p>lower timing uncertainty, better QoT, better performance  Spanner#: lower uncertainty, smaller commit wait</p>
    <p>Cyber-Physical Systems  if timing uncertainty exceeds specification (degraded QoT)  system cannot operate safely</p>
    <p>Application should be notified if QoT degrades  graceful degradation to satisfy safety requirements</p>
    <p>#Corbett et al., OSDI 12</p>
  </div>
  <div class="page">
    <p>QoT-based Connected Vehicles  Tolerable QoT Requirements based on</p>
    <p>timestamps event ordering  event ordering  policy</p>
    <p>If uncertainty exceeds tolerable limit  coordination policy can adapt  Graceful Degradation:</p>
    <p>Increase vehicular spacing  Safe Halt:</p>
    <p>Instruct vehicles to stop</p>
    <p>Synchronized Clocks  Scalable Coordination Quality of Time  Fault Tolerance  Need for a QoT-based CPS-Cloud Framework</p>
  </div>
  <div class="page">
    <p>Outline  Motivation  Background  The Case for Shared Time and QoT  QoT-based CPS-Cloud Architecture</p>
    <p>Architectural Challenges  QoT Stack for Linux</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Architectural Challenges  Fault-Tolerance Support</p>
    <p>Robust QoT-estimation mechanisms  Global Coordination Service</p>
    <p>Distributed apps, heterogeneous infrastructure  Scalable Synchronization Service</p>
    <p>Tunable clock synchronization, heterogeneous communication  Virtualization Support</p>
    <p>Adding QoT awareness to virtualized units of computing  QoT-Aware Cloud Scheduling</p>
    <p>VM/container placement based on application QoT requirements</p>
    <p>QoT-based platform-independent coordination API needed</p>
  </div>
  <div class="page">
    <p>Fault Tolerance  Failure Scenario:</p>
    <p>Clock Synchronization degrades  Reported QoT must degrade</p>
    <p>Application-specific failover mechanisms  Physical and Analytical Redundancy</p>
    <p>QoT can enable fault-tolerant coordination in CPS</p>
  </div>
  <div class="page">
    <p>Enabling Coordination at Scale  Timeline*: Virtual reference time base  Coordinated actions, distributed components</p>
    <p>all components bind to a timeline  each specifying its required QoT</p>
    <p>Required: Global-scale Timelines  Time-based coordination protocol</p>
    <p>Timelines abstract away clock synchronization  Applications specify QoT requirements, framework orchestrates the system</p>
    <p>*Anwar et al., RTSS 16</p>
    <p>Timeline</p>
  </div>
  <div class="page">
    <p>Virtualization and QoT  Higher clock-read and interrupt latencies*</p>
    <p>Can we get near-native performance?  VM Migration*</p>
    <p>Clock-related state in the VM or host?  Delivering and exposing QoT to applications</p>
    <p>Different VMs, different requirements</p>
    <p>Virtualization support required for utilizing the cloud</p>
    <p>*Broomhead et al., OSDI 10</p>
  </div>
  <div class="page">
    <p>QoT-Aware Cloud Scheduling  Multiple virtualized units running applications</p>
    <p>different QoT requirements  probabilistic QoT-based Service Level Agreements</p>
    <p>VM/container placement based on QoT requirements  dictate the host to which they are allocated</p>
    <p>Categorize Servers based on QoT rating  quality of on-board clocks  network-proximity to reference clock source</p>
    <p>Make QoT-Aware Cloud Scheduling work with existing multi-level cloud schedulers</p>
  </div>
  <div class="page">
    <p>QoT Stack for Linux</p>
    <p>Support for ARM and x86 platforms open source, modular implementation, no change to the Linux kernel</p>
  </div>
  <div class="page">
    <p>Conclusion and Future Work  Geo-Distributed CPS: Coordination at scale  Using a Shared notion of Time and QoT enables:</p>
    <p>Scalable Coordination with Fault Tolerance  Efficient Management of Time-related Resources</p>
    <p>QoT-based CPS-Cloud Architecture  Scalable Coordination and Clock Synchronization  Quartz-V: Adding QoT awareness to VMs  QoT-aware Cloud Scheduling</p>
    <p>Synchronized Clocks  Scalable Coordination Quality of Time  Fault Tolerance  QoT-based CPS-Cloud Coordination Framework</p>
  </div>
  <div class="page">
    <p>Thank You ! Questions ?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Discussion  Adding QoT awareness to VMs</p>
    <p>Paravitualization  Security</p>
    <p>QoT-aware Cloud Scheduling  Challenges?</p>
    <p>Utility of QoT in Software Systems  Tracing, Databases .</p>
    <p>.</p>
  </div>
</Presentation>
