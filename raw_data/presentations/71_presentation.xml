<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Yanlei Diao</p>
    <p>Michael Franklin</p>
    <p>University of California, Berkeley</p>
    <p>Query Processing for High-Volume XML</p>
    <p>Message Brokering</p>
  </div>
  <div class="page">
    <p>XML Message Brokers</p>
    <p>Data exchange in XML: Web services, data and application integration, information dissemination.</p>
    <p>XML message brokers: central exchange points for messages sent between applications/users.</p>
    <p>Main functions: For a large set of queries,  Filtering: matches messages to predicates representing</p>
    <p>interest specifications.</p>
    <p>Transformation: restructures matched messages according to recipient-specific requirements.</p>
    <p>Routing: delivers the customized data to the recipients.</p>
  </div>
  <div class="page">
    <p>Personalized Content Delivery</p>
    <p>Data Source</p>
    <p>Data Source</p>
    <p>Data Source</p>
    <p>XML streams</p>
    <p>user queries</p>
    <p>query results</p>
    <p>User subscriptions: Specification of user interests, written in an XML query language.</p>
    <p>XML streams: Continuously arriving XML data items. The message broker matches data items to queries, transforms them, and routes the results.</p>
    <p>Message</p>
    <p>Broker</p>
  </div>
  <div class="page">
    <p>XML filtering systems: XFilter, YFilter, XMLTK, XTrie, IndexFilter, MatchMaker</p>
    <p>YFilter: high-performance shared path matching engine</p>
    <p>XML Filtering and YFilter</p>
    <p>Q1=/a/b Q2=/a/c Q3=/a/b/c Q4=/a//b/c Q5=/a/*/c Q6=/a//c Q7=/a/*/*/c Q8=/a/b/c</p>
    <p>A large set of linear path expressions.</p>
    <p>{Q6}</p>
    <p>{Q7}</p>
    <p>{Q4}</p>
    <p>{Q1}</p>
    <p>{Q5}</p>
    <p>{Q2} a</p>
    <p>c</p>
    <p>c</p>
    <p>c b*</p>
    <p>c</p>
    <p>*</p>
    <p>* c</p>
    <p>b c {Q3, Q8}</p>
    <p>A single Non-Deterministic Finite Automaton, sharing all the common prefixes.</p>
    <p>Path sharing is the key to efficiency and scalability, orders of magnitude performance improvement!</p>
    <p>Diao et al. Path sharing and predicate evaluation for high-performance XML filtering. TODS, Dec. 2003 (to appear).</p>
  </div>
  <div class="page">
    <p>Leverage prior work on shared path matching (i.e.,YFilter)  How, and to what extent can a shared path matching</p>
    <p>engine be exploited?</p>
    <p>Efficient Transformation</p>
    <p>Goal: customized result generation for tens of thousands of queries!</p>
    <p>Build customization functionality on top of it  What post-processing of path matching output is needed?  How can this be done most efficiently?</p>
  </div>
  <div class="page">
    <p>Message Broker Architecture</p>
    <p>Query Processor</p>
    <p>message listener</p>
    <p>XML messages</p>
    <p>queries</p>
    <p>q u</p>
    <p>er y</p>
    <p>l is</p>
    <p>te n</p>
    <p>er</p>
    <p>SAX XML parser</p>
    <p>nodelabeled</p>
    <p>tree</p>
    <p>XQuery parser</p>
    <p>parsed queries</p>
    <p>results in an intermediate format</p>
    <p>message sender</p>
    <p>message factory</p>
    <p>customized XML messages</p>
    <p>runtime</p>
    <p>query compi</p>
    <p>ler</p>
    <p>path-tuple streams</p>
    <p>shared path matching engine</p>
    <p>post-processing module</p>
  </div>
  <div class="page">
    <p>Query Specification</p>
    <p>A query is a FLWR expression enclosed by a constant tag.</p>
    <p>binding path</p>
    <p>predicate paths</p>
    <p>return paths</p>
    <p>&lt;sections&gt; { for $s in $doc//section where $s/title = XML and $s/figure/title = XML processing return &lt;section&gt;</p>
    <p>{ $s//section//title } { $s//figure }</p>
    <p>&lt;/section&gt; } &lt;/sections&gt;</p>
  </div>
  <div class="page">
    <p>PathTuple Streams</p>
    <p>A PathTuple stream for each matched path expression:</p>
    <p>&lt;section&gt;</p>
    <p>&lt;section&gt; &lt;figure&gt;  &lt;/figure&gt; &lt;/section&gt; &lt;figure&gt;  &lt;/figure&gt; &lt;/section&gt;</p>
    <p>//section//figure /section/section/figure Node labeled tree</p>
    <p>section</p>
    <p>section</p>
    <p>figure</p>
    <p>figure</p>
    <p>PathTuple: A unique path match, one field per location step.</p>
    <p>Ordering: PathTuples in a stream are always output in increasing order of node ids in the last field.</p>
    <p>parsing events</p>
    <p>Path oriented shredding: query processing = operations on tuple streams.</p>
    <p>YFilter</p>
    <p>parsing events</p>
  </div>
  <div class="page">
    <p>&lt;sections&gt; { for $s in $doc//section where $s/title = XML and $s/figure/title = XML processing return &lt;section&gt;</p>
    <p>{ $s//section//title } { $s//figure }</p>
    <p>&lt;/section&gt; } &lt;/sections&gt;</p>
    <p>Output of Query Processor</p>
    <p>GroupSequence-ListSequence format for all the nodes selected from the input message.</p>
    <p>section_2:</p>
    <p>{title_6, title_8},</p>
    <p>{figure_5, figure_9}</p>
    <p>section_11:</p>
    <p>{title_14},</p>
    <p>{figure_15, figure_16}</p>
  </div>
  <div class="page">
    <p>Basic Approaches</p>
    <p>Three query processing approaches exploiting shared path matching.  Post-process path tuple streams to generate results.  Plans consist of relation-style/tree-search based operators.  Differ in the extent they push work down to the path engine.</p>
    <p>Tension between shared path matching and result customization!  PathTuples in a stream are returned in a single, fixed order for</p>
    <p>all queries containing the path.</p>
    <p>They can be used differently in post-processing of the queries.</p>
  </div>
  <div class="page">
    <p>for $s in $doc//section where $s/title = XML and $s/figure/title = XML processing return &lt;section&gt;</p>
    <p>{ $s//section//title } { $s//figure }</p>
    <p>&lt;/section&gt;</p>
    <p>Alternative 1: PathSharing-F</p>
    <p>Insert part of the binding path from the for clauses into the path engine.</p>
    <p>An external plan for each query:</p>
    <p>Query i</p>
    <p>DupElim</p>
    <p>Where-Filter</p>
    <p>Return-Select</p>
    <p>shared path matching engine</p>
    <p>//section</p>
    <p>Selection: value-based comparisons in the binding path (//section[@id &lt;= 2]).</p>
    <p>DupElim: when same node is bound multiple times in the stream.</p>
    <p>Where-Filter: tests predicate paths in the where clause (tree-search routine).</p>
    <p>Return-Select: applies the return clause (tree-search routine).</p>
    <p>//section</p>
  </div>
  <div class="page">
    <p>Duplicate Elimination</p>
    <p>&lt;figures&gt; { for $f in $doc//section[@id&lt;=2]//figure where  return  } &lt;/figures&gt;</p>
    <p>Duplicates for the binding path: PathTuples containing the same node id in the last field.</p>
    <p>YFilter</p>
    <p>//section//figure 1 3 2 3</p>
    <p>id = 1</p>
    <p>id = 2</p>
    <p>Cause redundant work in later operators and a duplicate result.</p>
    <p>DupElim ensures that the same node is emitted only once.</p>
    <p>Return-Select</p>
    <p>Where-Filter</p>
    <p>id &lt;=2</p>
    <p>DupElim</p>
  </div>
  <div class="page">
    <p>for $s in $doc//section where $s/title = XML and $s/figure/title = XML processing return &lt;section&gt;</p>
    <p>{ $s//section//title } { $s//figure }</p>
    <p>&lt;/section&gt;</p>
    <p>Alternative 2: PathSharing-FW</p>
    <p>In addition: push predicate paths from</p>
    <p>the where clause into the path engine.</p>
    <p>Semijoins: find query matches after paths in the for and the where clause are matched.</p>
    <p>shared path matching engine</p>
    <p>Query i Return-Select//section</p>
    <p>//section/title</p>
    <p>//section/figure/title</p>
    <p>DupElim</p>
    <p>order-preserving</p>
    <p>hash vs. merge based: hash based joins are more expensive</p>
    <p>//section //section/title</p>
    <p>//section/figure/title</p>
    <p>//section</p>
  </div>
  <div class="page">
    <p>Alternative 3: PathSharing-FWR</p>
    <p>Query i</p>
    <p>shared path matching engine</p>
    <p>Also push return paths from the return clause into the path engine.</p>
    <p>OuterJoin-Select: generate results.</p>
    <p>Duplicates for a return path:  Defined on the join field and the last field of the return path stream.</p>
    <p>Need DupElim on return paths before outer joins.</p>
    <p>order preserving</p>
    <p>create a group for each binding path tuple in the leftmost input.</p>
    <p>DupElim</p>
    <p>DupElimDupElim</p>
    <p>order preserving</p>
    <p>hash vs merge based</p>
    <p>OuterJoinSelect</p>
    <p>streams for return paths</p>
    <p>left outer join the binding path tuple with a return stream to create a list.</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>Observation: More path sharing  more sophisticated processing plans.</p>
    <p>Tension between shared path streams and result customization.  Different notions of duplicates for binding/return paths.  Different stream orders for the inputs of join operators.</p>
    <p>Optimizations based on query / DTD inspection:  Removing unnecessary DupElim operators;  Turning hash-based operators to merge/scan-based ones.</p>
  </div>
  <div class="page">
    <p>Performance Comparison</p>
    <p>Three alternatives w./w.o. optimizations, non-recursive data</p>
    <p>Bib DTD, number of distinct queries = 5000, number of predicate paths = 1, number of return paths = 2, // probability = 0.2</p>
    <p>Multi-Query Processing Time (MQPT) =</p>
    <p>wall clock time of processing a message</p>
    <p>message parsing time (msec)</p>
    <p>NoOpt Opt(q) Opt(q+dtd)</p>
    <p>Optim izations applied</p>
    <p>M Q</p>
    <p>P T</p>
    <p>( m</p>
    <p>s )</p>
    <p>PathSharing-F</p>
    <p>PathSharing-FW</p>
    <p>PathSharing-FWR</p>
  </div>
  <div class="page">
    <p>Other Results</p>
    <p>Three alternatives w./w.o. optimizations, recursive data  Vary number of predicate paths  Vary number of return paths  Vary // probability</p>
    <p>Summary of the results:</p>
    <p>PathSharing-FWR when combined with optimizations based on queries and DTD usually provides the best performance.  It performs rather poorly without optimizations.</p>
    <p>Effectiveness of optimizations:  Query inspection improves the performance of all alternatives;  Addition of DTD-based optimizations improves them further.  Recursive data challenges the effectiveness of optimizations.</p>
  </div>
  <div class="page">
    <p>Shared Post-processing</p>
    <p>So far, a separate post-processing plan per query.  The best performing approach (PathSharing-FWR) only uses</p>
    <p>relational style operators.  Sharing techniques similar to shared Continuous Query</p>
    <p>processing, but highly tailored for XML message brokering.  Query rewriting  Shared group by for outer joins  Selection pullup over semijoins (NiagaraCQ)  Shared selection (TriggerMan, NiagaraCQ, TelegraphCQ)</p>
    <p>Shared post-processing can provide great improvement in scalability!</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Result customization for a large set of queries:  Sharing is key to high-performance.  Can exploit existing path sharing technology, but</p>
    <p>need to resolve the inherent tension between path sharing and result customization.</p>
    <p>Results show that aggressive path sharing performs best when using optimizations.</p>
    <p>Relational style operators in post-processing enable use of techniques from the literature (multi-query optimization, CQ processing).</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Extending the range of shared post-processing.  Additional features in result customization</p>
    <p>OrderBy, aggregation, nested FLWR expressions, etc.</p>
    <p>Customization solutions based on shared tree pattern matching.</p>
    <p>Third component of the XML message broker</p>
    <p>content-based routing in an overlay network deployment.</p>
  </div>
</Presentation>
