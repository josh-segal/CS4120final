<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HEADER SPACE ANALYSIS: STATIC CHECKING FOR</p>
    <p>NETWORKS</p>
    <p>Peyman Kazemian (Stanford University)</p>
    <p>George Varghese (UCSD, Yahoo Labs)</p>
    <p>Nick McKeown (Stanford University)</p>
    <p>April 25th, 2012</p>
    <p>NSDI 2012 1</p>
  </div>
  <div class="page">
    <p>TODAY</p>
    <p>A typical network is a complex mix of protocols:</p>
    <p>Interact in complex ways.  Cause unforeseen behavior.  Hard to manage, understand and predict</p>
    <p>the behavior of networks.</p>
    <p>VLAN MPLS Spanning tree</p>
    <p>IPv4</p>
    <p>IPv6 NAT</p>
    <p>ARP GRE TCP</p>
    <p>UDP ICMP</p>
    <p>IGMP</p>
    <p>IPsec RSVP</p>
    <p>OSPF</p>
    <p>BGP</p>
  </div>
  <div class="page">
    <p>TODAY</p>
    <p>Even simple questions are hard to answer</p>
    <p>Can host A talk to host B?  What are all the packet headers from A that</p>
    <p>can reach B?  Are there any loops in the network?  Is Slice X isolated totally from Slice Y?  What will happen if I remove an entry from</p>
    <p>a router? 3</p>
  </div>
  <div class="page">
    <p>HEADER SPACE ANALYSIS</p>
    <p>A Powerful General Foundation that gives us</p>
    <p>A unified view of almost all type of boxes.  A powerful interface for answering different questions about the network.</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK SIMPLE OBSERVATION: A PACKET IS A POINT IN THE SPACE OF POSSIBLE HEADERS AND A BOX IS A TRANSFORMER ON THAT SPACE.</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Step 1 - Model packet header as a point in {0,1}L space  The Header Space</p>
    <p>L</p>
    <p>Header Data</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Step 2  Model all networking boxes as transformer of header space</p>
    <p>Packet Forwarding</p>
    <p>+ Send to port 3 Rewrite with 1xx011..x1</p>
    <p>Action 11xx..0x + Send to port 2</p>
    <p>Rewrite with 1x01xx..x1</p>
    <p>Transfer Function: T : (hin, pin) ! {(h1, p1), (h2, p2), . . . , (hn, pn)}</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Example: Transfer Function of an IPv4 Router</p>
    <p>172.24.74.0 255.255.255.0 Port1  172.24.128.0 255.255.255.0 Port2  171.67.0.0 255.255.0.0 Port3</p>
    <p>(h,1) if dst_ip(h) = 172.24.74.x</p>
    <p>(h,2) if dst_ip(h) = 172.24.128.x</p>
    <p>(h,3) if dst_ip(h) = 171.67.x.x</p>
    <p>T(h, p) =</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Example: Transfer Function of an IPv4 Router</p>
    <p>172.24.74.0 255.255.255.0 Port1  172.24.128.0 255.255.255.0 Port2  171.67.0.0 255.255.0.0 Port3</p>
    <p>(dec_ttl(h),1) if dst_ip(h) = 172.24.74.x</p>
    <p>(dec_ttl(h),2) if dst_ip(h) = 172.24.128.x</p>
    <p>(dec_ttl(h),3) if dst_ip(h) = 171.67.x.x</p>
    <p>T(h, p) =</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Example: Transfer Function of an IPv4 Router</p>
    <p>172.24.74.0 255.255.255.0 Port1  172.24.128.0 255.255.255.0 Port2  171.67.0.0 255.255.0.0 Port3</p>
    <p>(rw_mac(dec_ttl(h),next_mac) , 1) if dst_ip(h) = 172.24.74.x</p>
    <p>(rw_mac(dec_ttl(h),next_mac) , 2) if dst_ip(h) = 172.24.128.x</p>
    <p>(rw_mac(dec_ttl(h),next_mac) , 3) if dst_ip(h) = 171.67.x.x</p>
    <p>T(h, p) =</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Properties of transfer functions</p>
    <p>Composable:</p>
    <p>Invertible:</p>
    <p>T1(h, p)</p>
    <p>R1 R2 R3</p>
    <p>T2(h, p) T3(h, p)</p>
    <p>T3(T2(T1(h, p)))</p>
    <p>Domain (input) Range (output)</p>
    <p>TT1</p>
    <p>T2(T1(h, p))</p>
    <p>T3(T2(T1(h, p)))</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Step 3 - Develop an algebra to work on these spaces.</p>
    <p>Every object in Header Space, can be described by union of Wildcard Expressions.</p>
    <p>We want to perform the following set operations on wildcard expressions:  Intersection  Complementation  Difference</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>Finding Intersection:  Bit by bit intersect using intersection table:</p>
    <p>Example:  If result has any z, then intersection is empty:  Example:</p>
    <p>See the paper for how to find complement and difference.</p>
  </div>
  <div class="page">
    <p>USE CASES OF HEADER SPACE FRAMEWORK THESE ARE ONLY SOME EXAMPLE USE CASES THAT WE DEVELOPED SO FAR</p>
  </div>
  <div class="page">
    <p>USE CASES</p>
    <p>Can host A talk to B?</p>
    <p>Box 1 Box 2</p>
    <p>Box 3 Box 4</p>
    <p>A</p>
    <p>B</p>
    <p>T1(X,A)</p>
    <p>T2(T1(X,A))</p>
    <p>T4(T1(X,A))</p>
    <p>T3(T2(T1(X,A)) U T3(T4(T1(X,A))</p>
    <p>T-13</p>
    <p>T-13 T-14</p>
    <p>T-12 T-11</p>
    <p>T-11</p>
    <p>All Packets that A can use to communicate with B</p>
  </div>
  <div class="page">
    <p>USE CASES</p>
    <p>Is there a loop in the network?  Inject an all-x text packet from every switch-port  Follow the packet until it comes back to injection port</p>
    <p>Box 1</p>
    <p>Box 2</p>
    <p>Box 3</p>
    <p>Box 4</p>
    <p>T1(X,P) T2(T1(X,P))</p>
    <p>T3(T2(T1(X,P))) T4(T3(T2(T1(X,P))))</p>
    <p>Original HS</p>
    <p>Returned HS</p>
    <p>T-14</p>
    <p>T-13</p>
    <p>T-12</p>
    <p>T-11</p>
  </div>
  <div class="page">
    <p>USE CASES</p>
    <p>Is the loop infinite?</p>
    <p>Finite Loop Infinite Loop ?</p>
  </div>
  <div class="page">
    <p>USE CASES</p>
    <p>Are two slices isolated?</p>
    <p>What do we mean by slice?  Fixed Slices: VLAN slices  Programmable Slices: slices created by FlowVisor</p>
    <p>Why do we care about isolation?  Banks: for added security.  Healthcare: to comply with HIPAA.  GENI: to isolate different experiments running on the</p>
    <p>same network. 18</p>
  </div>
  <div class="page">
    <p>USE CASES</p>
    <p>Are two slices isolated?  1) slice definitions dont intersect.  2) packets do not leak.</p>
    <p>Box 1</p>
    <p>Box 2</p>
    <p>Box 3</p>
    <p>Box 4</p>
    <p>Solution: Apply header space reservation of each slice to the slices transfer function and check intersection of the result with other slices reservations</p>
  </div>
  <div class="page">
    <p>COMPLEXITY</p>
    <p>Run time Reachability: O(dR2)</p>
    <p>Loop Detection: O(dPR2)  R: maximum number of rules per box.  d: diameter of network.  P: number of ports to be tested</p>
    <p>Slice Isolation Test: O(NW2)  W: number of wildcard expressions in definition of a slice.  N: number of slices in the network.</p>
    <p>See paper for more details.</p>
  </div>
  <div class="page">
    <p>HEADER SPACE FRAMEWORK</p>
    <p>A Powerful General Foundation that gives us</p>
    <p>A unified view of almost all type of boxes.  Transfer Function.</p>
    <p>A powerful interface for answering different questions about the network.</p>
    <p>T(h,p) and T-1(h,p)  Set operations on Header Space</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION AND EVALUATION</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION</p>
    <p>Header Space Library (Hassel)  Written in Python  Implements Header Space Class</p>
    <p>Set operations  Implements Transfer Function Class</p>
    <p>T and T-1</p>
    <p>Implements Reachability, Loop Detection and Slice Isolation checks.  &lt; 50 lines of code</p>
    <p>Includes a Cisco IOS parser  Generates transfer function from output of IOS commands</p>
    <p>and config file.  Keeps the mapping from Transfer function rule to line</p>
    <p>number in config file.  Publicly available: git clone https://bitbucket.org/peymank/hassel-public.git</p>
  </div>
  <div class="page">
    <p>STANFORD BACKBONE NETWORK</p>
    <p>~750K IP fwd rule. ~1.5K ACL rules.</p>
    <p>~100 Vlans. Vlan forwarding.</p>
  </div>
  <div class="page">
    <p>STANFORD BACKBONE NETWORK</p>
    <p>Loop detection test  run time &lt; 10 minutes on a single laptop.</p>
    <p>Vlan RED Spanning</p>
    <p>Tree</p>
    <p>Vlan BLUE Spanning</p>
    <p>Tree</p>
  </div>
  <div class="page">
    <p>PERFORMANCE</p>
    <p>Generating TF Rules ~150 sec</p>
    <p>Loop Detection Test (30 ports) ~560 sec</p>
    <p>Average Per Port ~18 sec</p>
    <p>Min Per Port ~ 8 sec</p>
    <p>Max Per Port ~ 135 sec</p>
    <p>Reachability Test (Avg) ~13 sec</p>
    <p>Performance result for Stanford Backbone Network on a single machine: 4 core, 4GB RAM.</p>
  </div>
  <div class="page">
    <p>SUMMARY</p>
    <p>We Introduced Header Space Analysis: A Powerful General Foundation that gives us</p>
    <p>A unified view of almost all type of boxes.  A powerful interface for answering different questions about the network.</p>
    <p>We showed that our initial Python-based implementation can scale to enterprise-size networks on a single laptop.</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Questions?</p>
  </div>
</Presentation>
