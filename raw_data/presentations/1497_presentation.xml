<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SpringFS: Bridging Agility and Performance in Elastic Distributed Storage</p>
    <p>Lianghong Xu Jim Cipar, Elie Krevat, Alexey Tumanov, Nitin Gupta,</p>
    <p>Mike Kozuch (Intel), Greg Ganger</p>
    <p>Carnegie Mellon University</p>
    <p>http://www.pdl.cmu.edu/ Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Elasticity in Distributed Storage  Elasticity in distributed storage:</p>
    <p>ability to resize dynamically as workload varies  More difficult than elastic computing</p>
    <p>Benefits  Re-use for other purposes or reduce energy usage  Save machine hours (operating cost)</p>
    <p>Most distributed storage is not elastic  Designed for load balancing, not elasticity  E.g., GFS and HDFS  Deactivating servers may make data unavailable</p>
    <p>http://www.pdl.cmu.edu/ 2 Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>SpringFS Contributions</p>
    <p>http://www.pdl.cmu.edu/ 3</p>
    <p>Agility: speed of elastic resizing</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Sierra</p>
    <p>Some elasticity Max peak write performance</p>
    <p>Rabbit</p>
    <p>Max elasticity Sub-max peak write performance</p>
    <p>SpringFS</p>
    <p>minimize data migration minimize machine hours</p>
    <p>Key metrics</p>
  </div>
  <div class="page">
    <p>Agility is Important</p>
    <p>&lt;your name here&gt;  2/24/14!http://www.pdl.cmu.edu/ 4</p>
    <p>Burstiness in the Facebook HDFS trace</p>
  </div>
  <div class="page">
    <p>Agility is Important</p>
    <p>&lt;your name here&gt;  2/24/14!http://www.pdl.cmu.edu/ 5</p>
    <p>Burstiness in the Facebook HDFS trace</p>
  </div>
  <div class="page">
    <p>Agility is Important</p>
    <p>http://www.pdl.cmu.edu/ 6</p>
    <p>&gt; 50% potential saving of machine hours</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Agility allows close tracking of workload variation</p>
    <p>Burstiness in the Facebook HDFS trace</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>Background and motivation</p>
    <p>SpringFS design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
    <p>http://www.pdl.cmu.edu/ 7 Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Non-elastic Example: HDFS</p>
    <p>http://www.pdl.cmu.edu/ 8</p>
    <p>Almost all servers must be on to ensure 100% availability  Little potential for elastic resizing</p>
    <p>Primary replicas</p>
    <p>Tertiary replicas</p>
    <p>Secondary replicas</p>
    <p>Assumption: 3-way replication</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Server number D at</p>
    <p>a st</p>
    <p>or ed</p>
    <p>o n</p>
    <p>se rv</p>
    <p>er X</p>
    <p>N 1</p>
    <p>Pseudo-random placement, even data layout</p>
  </div>
  <div class="page">
    <p>Data Layout in Elastic Storage  General rule:</p>
    <p>Take advantage of replication  Always keep the first (primary) replicas on  The other replicas can be activated on demand</p>
    <p>Notable examples: Sierra [1] and Rabbit [2]</p>
    <p>[1] E. Thereska et al. Sierra: Practical Power-proportionality for Data Center Storage. Eurosys 2011.</p>
    <p>[2] J. Cipar et al. Robust and flexible power-proportional storage. SoCC 2010.</p>
    <p>&lt;your name here&gt;  2/24/14!http://www.pdl.cmu.edu/ 9</p>
  </div>
  <div class="page">
    <p>Sierra Data Layout</p>
    <p>http://www.pdl.cmu.edu/ 10</p>
    <p>N/3</p>
    <p>Peak write performance: N/3 (as good as HDFS)</p>
    <p>Primary servers</p>
    <p>Secondary and tertiary servers</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Server number</p>
    <p>D at</p>
    <p>a st</p>
    <p>or ed</p>
    <p>o n</p>
    <p>se rv</p>
    <p>er X</p>
    <p>N 1</p>
    <p>#servers with primary replicas: N/3</p>
  </div>
  <div class="page">
    <p>D at</p>
    <p>a st</p>
    <p>or ed</p>
    <p>o n</p>
    <p>se rv</p>
    <p>er X</p>
    <p>Server number N 1</p>
    <p>Rabbit Equal-work Data Layout</p>
    <p>http://www.pdl.cmu.edu/ 11</p>
    <p>Primary servers p = N / e2  0.13N</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Peak write performance: p</p>
    <p>#servers with primary replicas: p (theoretically the best)</p>
  </div>
  <div class="page">
    <p>Rabbit When Using Offloading</p>
    <p>http://www.pdl.cmu.edu/ 12</p>
    <p>D at</p>
    <p>a st</p>
    <p>or ed</p>
    <p>o n</p>
    <p>th e</p>
    <p>se rv</p>
    <p>er</p>
    <p>Server number N</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Primary replicas spread across all active servers</p>
    <p>Peak write performance: N/3  #servers with primary replicas: N</p>
  </div>
  <div class="page">
    <p>Tradeoff Space</p>
    <p>http://www.pdl.cmu.edu/ 13</p>
    <p>#s er</p>
    <p>ve rs</p>
    <p>w ith</p>
    <p>p rim</p>
    <p>ar y</p>
    <p>re pl</p>
    <p>ic as</p>
    <p>Peak write performance (normalized to 1 server) 0</p>
    <p>better</p>
    <p>be tt</p>
    <p>er</p>
    <p>N HDFS Rabbit (offloaded)</p>
    <p>N/3</p>
    <p>N/3 Sierra (all cases)</p>
    <p>p</p>
    <p>p Rabbit (no offload)</p>
    <p>SpringFS (depending on workload)</p>
    <p>Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>Background and motivation</p>
    <p>SpringFS design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
    <p>http://www.pdl.cmu.edu/ 14 Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>SpringFS Design  Bounded write offloading</p>
    <p>Dynamically constrain distribution of primary replicas</p>
    <p>Read offloading  Preferentially offload reads from write-heavy servers</p>
    <p>Passive migration  Delay migration on server re-integration</p>
    <p>http://www.pdl.cmu.edu/ 15 Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Bounded Write Offloading</p>
    <p>http://www.pdl.cmu.edu/ 16</p>
    <p>D at</p>
    <p>a st</p>
    <p>or ed</p>
    <p>o n</p>
    <p>se rv</p>
    <p>er X</p>
    <p>Server number N p m</p>
    <p>Offload set: automatically adapts to workload Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Bounded Write Offloading</p>
    <p>http://www.pdl.cmu.edu/ 17</p>
    <p>N m</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>m = N/3 m = p Rabbit Sierra</p>
  </div>
  <div class="page">
    <p>SpringFS Implementation  Modified instance of HDFS</p>
    <p>Written in Java and Python</p>
    <p>Built and used a Scriptable HDFS interface  Data placement  Load balancing  Data Migration  Implement SpringFS and Rabbit in the same system</p>
    <p>Resizing agent  Activate/deactivate servers according to workload</p>
    <p>&lt;your name here&gt;  2/24/14!http://www.pdl.cmu.edu/ 18</p>
  </div>
  <div class="page">
    <p>Outline  Introduction and motivation</p>
    <p>Background</p>
    <p>SpringFS design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
    <p>http://www.pdl.cmu.edu/ 19 Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Evaluation Overview  Experiments with SpringFS prototype</p>
    <p>Analysis with real-world traces  Hadoop/HDFS deployments at Facebook (FB) and</p>
    <p>Cloudera Customers (CC)</p>
    <p>Summary of results  SpringFS improves over state-of-the-art designs</p>
    <p>Reduces data migration  Reduces machine hour usage (often near-ideal)  Provides range of options between Rabbit and</p>
    <p>Sierra &lt;your name here&gt;  2/24/14!http://www.pdl.cmu.edu/ 20</p>
  </div>
  <div class="page">
    <p>Data Migration in SpringFS Prototype</p>
    <p>http://www.pdl.cmu.edu/ 21</p>
    <p>N um</p>
    <p>be r</p>
    <p>of b</p>
    <p>lo ck</p>
    <p>s to</p>
    <p>m ov</p>
    <p>e</p>
    <p>Target active servers</p>
    <p>Rabbit (no offload) Rabbit (offload=30) SpringFS(offload=6) SpringFS(offload=8) SpringFS(offload=10)</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>Experimental setup:  30 DataNodes  4 primary servers  2GB file per server  128MB block size</p>
    <p>Same performance</p>
  </div>
  <div class="page">
    <p>Policy Analysis with the Facebook Trace</p>
    <p>http://www.pdl.cmu.edu/ 22</p>
    <p>Ideal system: no migration for resizing</p>
    <p>Area under curve: aggregate machine hour usage</p>
    <p>Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Machine Hours (SpringFS vs. Ideal)</p>
    <p>http://www.pdl.cmu.edu/ 23</p>
    <p>No cleanup work</p>
    <p>Extra servers activated due to passive migration</p>
    <p>Lianghong Xu  Feb 14!</p>
    <p>#primary servers</p>
  </div>
  <div class="page">
    <p>Machine Hour Usage</p>
    <p>http://www.pdl.cmu.edu/ 24</p>
    <p>SpringFS: 6-120% improvement</p>
    <p>SpringFS within 5% off Ideal</p>
    <p>Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Data Migration</p>
    <p>http://www.pdl.cmu.edu/ 25</p>
    <p>SpringFS: 9-208X improvement</p>
    <p>Lianghong Xu  Feb 14!</p>
  </div>
  <div class="page">
    <p>Conclusion  SpringFS: a new elastic distributed storage</p>
    <p>Fills the gap in state-of-the-art designs</p>
    <p>Agility is important  Ability to track workload burstiness</p>
    <p>Address agility by minimizing data migration  Bounded write offloading  Read offloading + passive migration</p>
    <p>Much lower machine hour usage</p>
    <p>&lt;your name here&gt;  2/24/14!http://www.pdl.cmu.edu/ 26</p>
  </div>
</Presentation>
