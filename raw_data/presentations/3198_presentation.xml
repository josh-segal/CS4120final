<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu Purdue University</p>
    <p>Zhiqiang Lin UT Dallas</p>
    <p>Zhendong Su UC Davis</p>
    <p>X-Force: Force-Executing Binary Programs for Security Applications</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Design</p>
    <p>Implementation Challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Background &amp; Motivation</p>
    <p>Binary analysis</p>
    <p>The analysis on compiled binary software</p>
    <p>No source code &amp; symbolic information</p>
    <p>More challenging than software analysis using source code</p>
    <p>Control flow graph, variable type</p>
    <p>Binary analysis has many security applications</p>
    <p>Exposing malware behavior by constructing CFG/CG</p>
    <p>Identifying and patching security vulnerabilities</p>
  </div>
  <div class="page">
    <p>Background &amp; Motivation</p>
    <p>Existing approaches</p>
    <p>Static analysis (IDA)</p>
    <p>Examining the code without executing it</p>
    <p>Dynamic analysis (Valgrind, PIN)</p>
    <p>Testing and evaluation of an application during runtime</p>
    <p>Symbolic analysis (BitBlaze, S2E)</p>
    <p>Determine what inputs cause each part of the program to execute</p>
    <p>Good Coverage</p>
    <p>Packing &amp; Obfuscation</p>
    <p>Precision Scalability</p>
    <p>Static</p>
    <p>Dynamic</p>
    <p>Symbolic</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Design</p>
    <p>Implementation Challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>What is X-Force?</p>
    <p>Dynamic analysis engine that forces a binary to execute</p>
    <p>Provide no inputs or any environment setup</p>
    <p>Explore different paths by simply switching the outcome of predicates</p>
  </div>
  <div class="page">
    <p>Example -Hijack the name resolution for a specific domain</p>
    <p>Reads an integer x</p>
    <p>If condition satisfied, a DNS object is allocated to p</p>
    <p>If CODE_RED bit set is in x, get the domain name</p>
    <p>for the object in p Other objects are put into the hash table</p>
    <p>Fetch an object using key y==x</p>
    <p>If an object is fetched successfully, malicious</p>
    <p>payload triggered</p>
  </div>
  <div class="page">
    <p>Example  Static Analysis</p>
    <p>Object fetched at 13 is from either 8 or 11</p>
    <p>Truth: Only from 8</p>
  </div>
  <div class="page">
    <p>Example  Dynamic Analysis</p>
    <p>If CODE_RED bit is not set in x, an object with key x is not put into hash table</p>
    <p>Fetching object at line 13 fails</p>
    <p>Malicious payload is not triggered</p>
  </div>
  <div class="page">
    <p>Example  Symbolic Analysis</p>
    <p>Model x as symbolic variable, hidden payload may be</p>
    <p>reached File processing requires tremendous work due to</p>
    <p>nontrivial file size and format</p>
  </div>
  <div class="page">
    <p>Example  X-Force</p>
    <p>Provides random inputs</p>
    <p>Assume all 3 predicates go to</p>
    <p>false branch</p>
    <p>Leads to a noninteresting path</p>
  </div>
  <div class="page">
    <p>Example  X-Force</p>
    <p>Flip predicates one by one Flip predicate at line 4 first, line 5</p>
    <p>gets covered</p>
    <p>Leads to a noninteresting path</p>
  </div>
  <div class="page">
    <p>Example  X-Force</p>
    <p>Flip predicate at line 6</p>
    <p>Not covered, p = NULL</p>
    <p>Memory write exception, crash!</p>
  </div>
  <div class="page">
    <p>Crash-free Execution</p>
    <p>Ideas on memory access exception</p>
    <p>Skip it?</p>
    <p>A lot of following exceptions, cascading effect on program state corruption</p>
    <p>Lose heap data</p>
    <p>Allocate a piece of memory on demand</p>
    <p>It is not sufficient by just fixing the corrupted pointer itself</p>
    <p>Fix the other correlated pointers</p>
  </div>
  <div class="page">
    <p>Example  Dataflow</p>
    <p>Flip predicate at line 6</p>
    <p>Not covered, p = NULL</p>
    <p>Memory write exception, crash!</p>
  </div>
  <div class="page">
    <p>Crash-free Execution</p>
    <p>Observations</p>
    <p>Some pointers are correlated</p>
    <p>Correlated pointers are only linearly correlated</p>
    <p>No multiplication/division</p>
    <p>Solution  Linear set tracing</p>
    <p>Copying (e.g. b = a)</p>
    <p>Adding or subtracting (e.g. q = p +/- 4)</p>
  </div>
  <div class="page">
    <p>Example  Linear Set Tracing</p>
    <p>Memory write exception, crash!</p>
    <p>p q</p>
    <p>q-&gt;name</p>
  </div>
  <div class="page">
    <p>Path Exploration</p>
    <p>Exploration algorithms</p>
    <p>Branch coverage driven algorithm</p>
    <p>Number of executions - O(n)</p>
    <p>n denotes the number of basic blocks</p>
    <p>Exponential search algorithm - O(2n)</p>
    <p>Implement a taint analysis subsystem</p>
    <p>Determine branches that are input related</p>
  </div>
  <div class="page">
    <p>The Essence of X-Force</p>
    <p>X-Force</p>
    <p>Reachable program state</p>
    <p>Ideal coverage</p>
    <p>Static analysis</p>
    <p>Over-approximate coverage</p>
    <p>Dynamic analysis</p>
    <p>Under-approximate coverage</p>
    <p>X-Force</p>
    <p>Practicality</p>
  </div>
  <div class="page">
    <p>X-Force is important in practice</p>
    <p>Results are not affected much by infeasible paths</p>
    <p>Only a small number of predicates are switched</p>
    <p>Fast</p>
    <p>Naturally handle packed, obfuscated, and even self-modifying binaries</p>
    <p>Existing dynamic analysis can be easily ported to X-Force</p>
    <p>The Essence of X-Force</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Design</p>
    <p>Implementation Challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Implementation Challenges</p>
    <p>Indirect jump - Jump Table</p>
    <p>Leverage existing jump table reverse engineering techniques</p>
    <p>Treat them as direct conditional branch in exploration algorithms</p>
    <p>Loops</p>
    <p>If the loop bound is computed from input, it may be a corrupted value</p>
    <p>Use taint analysis subsystem to determine if its input related</p>
    <p>If so, set the loop bound to a pre-defined constant</p>
    <p>Recursions</p>
    <p>Maintain call stack during execution to detect recursion</p>
    <p>If recursion is too deep, skip calling into it by simulating a return instruction</p>
  </div>
  <div class="page">
    <p>Implementation Challenges</p>
    <p>Handling library function calls</p>
    <p>I/O functions, memory manipulation functions</p>
    <p>Protect stack memory</p>
    <p>return addresses, base pointers</p>
    <p>Handling multiple thread execution</p>
    <p>Serialize the execution</p>
    <p>Explore different thread scheduling</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Design</p>
    <p>Technical Challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation: Case Study I  CFG/CG Construction</p>
    <p>Instruction Coverage</p>
    <p>IDA Dynamic X-Force Dynamic \</p>
    <p>X-Force X-Force \ Dynamic</p>
  </div>
  <div class="page">
    <p>Evaluation: Case Study I  CFG/CG Construction</p>
    <p>Indirect Call Edge Coverage</p>
    <p>IDA Dynamic LLVM X-Force Dynamic \ X-Force</p>
    <p>X-Force \ Dynamic</p>
  </div>
  <div class="page">
    <p>Evaluation: Case Study I  CFG/CG Construction</p>
    <p>Performance</p>
    <p>Running Time (s) # of Runs Avg. Switched Predicates # / Total #</p>
  </div>
  <div class="page">
    <p>Evaluation: Case Study II  Malware Analysis</p>
    <p>X-Force discovers more lib calls than IDA for packed/obfuscated malware</p>
    <p>X-Force beats dynamic native run for all the programs</p>
  </div>
  <div class="page">
    <p>Evaluation: Case Study III  Type Reverse Engineering</p>
    <p>REWARDS</p>
    <p>A dynamic analysis tool of type reverse engineering</p>
    <p>Porting REWARDS to X-Force</p>
    <p>X-Force provides concrete execution states that are used by REWARDS</p>
    <p>Little modification</p>
    <p>Results</p>
    <p>Increase variable coverage from 57% to 84%</p>
    <p>Increase type reverse accuracy from 88% to 90%</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>Static analysis  Codesurfer/x86</p>
    <p>IDA-Pro</p>
    <p>Tie</p>
    <p>Dynamic analysis  Dart</p>
    <p>REWARDS</p>
    <p>Howard</p>
    <p>Panorama</p>
    <p>Symbolic analysis  KLEE</p>
    <p>S2E</p>
    <p>BitBlaze</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Design</p>
    <p>Technical Challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Propose dynamic analysis engine X-Force, a system that can force binary to be executed</p>
    <p>Requiring no inputs or any environment setup</p>
    <p>Develop a crash-free execution model</p>
    <p>Detect and recover exceptions properly.</p>
    <p>Develop various execution path exploration algorithms</p>
    <p>Provide customized options for users to reduce search spaces</p>
    <p>Evaluate X-Force on 3 types of case studies</p>
    <p>CFG/CG construction</p>
    <p>Malware analysis</p>
    <p>Type reverse engineering</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Q &amp; A</p>
  </div>
</Presentation>
