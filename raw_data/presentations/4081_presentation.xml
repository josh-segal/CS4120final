<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HARDWARE-ASSISTED ROOTKITS: ABUSING PERFORMANCE COUNTERS ON THE ARM AND X86 ARCHITECTURES</p>
    <p>Matt Spisak @matspisak</p>
    <p>USENIX WOOT 16, Austin TX</p>
  </div>
  <div class="page">
    <p>WOOT 16</p>
    <p>OUTLINE</p>
    <p>Motivation</p>
    <p>Performance Monitoring Unit</p>
    <p>ARM PMU-Assisted Rootkit</p>
    <p>Intel x64 PMU-Assisted Rootkit</p>
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>WOOT 16</p>
    <p>KERNEL PATCH PROTECTION</p>
    <p>Mitigations such as Kernel Patch Protection complicate rootkit development</p>
    <p>Examples of KPP:</p>
    <p>Microsoft PatchGuard - x64</p>
    <p>Samsung TIMA-RKP - TrustZone based kernel Monitor</p>
    <p>Apple WatchTower - iOS 9+</p>
    <p>MOTIVATION</p>
  </div>
  <div class="page">
    <p>WOOT 16</p>
    <p>PMU-ASSISTED SECURITY RESEARCH</p>
    <p>Prior art in (x86) PMU for debugging or defensive applications:</p>
    <p>ROP detection with mispredicted branches</p>
    <p>Control flow integrity (CFI) using Intel BTS and PMU</p>
    <p>Rootkit detection (NumChecker) using perf counters</p>
    <p>What about offensive applications for the PMU?</p>
    <p>And what about ARM?</p>
    <p>MOTIVATION</p>
  </div>
  <div class="page">
    <p>PERFORMANCE MONITORING UNIT</p>
  </div>
  <div class="page">
    <p>WOOT 16PERFORMANCE MONITORING UNIT</p>
    <p>PMU BACKGROUND</p>
    <p>Found in most modern CPUs</p>
    <p>Typically consists of the following components:</p>
    <p>1 or more counters (PMCs) for counting events</p>
    <p>Set of events that can be counted</p>
    <p>Interrupt (PMI) to signal a counter overflow == sampling period</p>
  </div>
  <div class="page">
    <p>WOOT 16PERFORMANCE MONITORING UNIT</p>
    <p>NORMAL USAGE OF PMU</p>
    <p>Provides real-time feedback on system</p>
    <p>Useful for software/hardware engineers</p>
    <p>Tools:</p>
    <p>Intel VTune</p>
    <p>ARM DS-5 Streamline</p>
    <p>Linux perf / oprofile</p>
    <p>Apple Xcode Instruments ARM DS-5 Streamline</p>
  </div>
  <div class="page">
    <p>WOOT 16PERFORMANCE MONITORING UNIT</p>
    <p>PMU COMPARISON</p>
    <p>Introduced ARMv6 Original Pentium</p>
    <p>Interfaces CP15 system control coprocessor</p>
    <p>memory-mapped (optional) external interface (optional)</p>
    <p>Model Specific Registers (MSRs)</p>
    <p>Interrupt Delivery IRQ Non-maskable Interrupt (NMI) Interrupt Descriptor Table (IDT)</p>
    <p>Number of Counters 1 cycle, up to 31 general purpose 3 fixed, 4+ general purpose</p>
    <p>Events Extensible Fixed (Intel Manual)</p>
    <p>User mode Access Yes* No * PMUSERENR.EN bit must first be set from PL1/EL1 or higher</p>
  </div>
  <div class="page">
    <p>WOOT 16PERFORMANCE MONITORING UNIT</p>
    <p>PMU WORKFLOW PMC1: 0xFFFFFFFD (-3) Event: 0x08 (Instruction Retired)</p>
    <p>overflow</p>
    <p>overflow</p>
    <p>overflow</p>
  </div>
  <div class="page">
    <p>WOOT 16PERFORMANCE MONITORING UNIT</p>
    <p>PMU-ASSISTED ROOTKIT APPROACH</p>
    <p>Identify candidate rootkit PMU events:</p>
    <p>event is superset of all system calls</p>
    <p>overhead of non-syscalls is low</p>
    <p>Trap all occurrences of rootkit event</p>
    <p>Attacker controlled ISR can optionally redirect execution</p>
  </div>
  <div class="page">
    <p>ARM ROOTKIT</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>INSPIRATION</p>
    <p>ARM Architecture Manual ARMv7-A&amp;R - Appendix C</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>COUNTING THE EXCEPTION VECTOR TABLE</p>
    <p>EVENT Cortex-A7 Cortex-A53 Cortex-A57 Cortex-A72 Scorpion Krait Kryo</p>
    <p>Undefined Instruction     ? SVC     ?</p>
    <p>Prefetch Abort     ? Data Abort     ?</p>
    <p>IRQ       ? FIQ       ? SMC * *     ? HVC   ? ? ?</p>
    <p>ARM Design Custom ARM-based Design</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>APPROACH</p>
    <p>Count and trap SVC instructions</p>
    <p>Motorola Nexus 6 Qualcomm APQ8084 (Krait) CPU Android 5.0</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>CHALLENGES</p>
    <p>Finding the PMU Interrupt</p>
    <p>Device tree source</p>
    <p>Brute force: Register unused PPI/SPIs; trigger PMIs; diff /proc/interrupts</p>
    <p>Registration: request_percpu_irq(), request_threaded_irq() on Android</p>
    <p>CPU Hot-Plugging</p>
    <p>Linux/Android provides a callback: register_hotcpu_notifier()</p>
    <p>Interrupt instruction skid</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>CHALLENGE: DELAYED INSTRUCTION SKID</p>
    <p>PMI triggered at some point after IRQs enabled in vector_swi</p>
    <p>3 cases we must deal with:</p>
    <p>IRQs enabled</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>CASE 1: INTERRUPT BEFORE BRANCH TO SYSCALL ROUTINE #define CPSIE_ADDR 0xC01064D0  irq_regs = get_irq_regs(); pregs = task_pt_regs(current);  if (pregs-&gt;ARM_r7 == 0x3) //sys_read { switch (irq_regs-&gt;ARM_pc - CPSIE_ADDR) //offset after CPSIE { //emulate remaining instructions up to LDRCC //can skip those involved in resolving syscall routine case 0x0: case 0x4: irq_regs-&gt;ARM_r9 = irq_regs-&gt;ARM_sp &amp; 0xFFFFE000 ;  case 0x14: case 0x18: case 0x1C: case 0x20: irq_regs-&gt;ARM_lr = ret_fast_syscall; case 0x24: irq_regs-&gt;ARM_pc = (uint32_t)hook_sysread;</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>CASE 2: SYSCALL ROUTINE ENTRY POINT</p>
    <p>Replace saved PC with address of hook</p>
    <p>irq_regs = get_irq_regs(); pregs = task_pt_regs(current);  if (pregs-&gt;ARM_r7 == 0x3) //sys_read { //Check if PMU interrupted at entry point addr of sys_read if (pregs-&gt;ARM_pc == orig_sys_read) { pregs-&gt;ARM_pc = (uint32_t)hook_sys_read;</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>CASE 3: MIDDLE OF SYSCALL ROUTINE</p>
    <p>Let syscall routine complete</p>
    <p>Find address of ret_fast_syscall on the stack and replace with address of trampoline</p>
    <p>Trampoline loads LR with ret_fast_syscall, and branches to a post_hook function</p>
    <p>post_hook can retrieve original params, and modify as necessary</p>
    <p>Case 3: Beyond entry point</p>
    <p>Find and replace on stack</p>
  </div>
  <div class="page">
    <p>WOOT 16ARM ROOTKIT</p>
    <p>DEMO</p>
    <p>Hook sys_read in context of qmuxd in order to intercept all QMI comms from modem to Android (using only the PMU)</p>
    <p>QMUXD QMI PROXY</p>
    <p>KERNELUSER SPACE</p>
    <p>sys_write</p>
    <p>MODEM sys_read</p>
    <p>SMS APP</p>
    <p>PHONE APP</p>
    <p>PMU HOOK</p>
  </div>
  <div class="page">
    <p>INTEL X64 ROOTKIT</p>
  </div>
  <div class="page">
    <p>WOOT 16INTEL X64 ROOTKIT</p>
    <p>FINDING A SYSCALL COUNTING EVENT</p>
    <p>No obvious PMU event like SVC for ARM</p>
    <p>SYSCALL instruction effectively takes a far branch to address in IA32_LSTAR (e.g. KiSystemCall64 on Windows)</p>
    <p>We can capture Far branches two ways with Intel PMU</p>
    <p>BR_INST_RETIRED.FAR_BRANCH</p>
    <p>ROB_MISC_EVENTS.LBR_INSERTED (requires LBR filtered to FAR only)</p>
    <p>Using this approach, we can now trap SYSCALLs on x64</p>
  </div>
  <div class="page">
    <p>WOOT 16INTEL X64 ROOTKIT</p>
    <p>PMU CONFIGURATION</p>
    <p>We can count Far Branches occurring in ring-0 only to reduce additional interrupts branches to user mode</p>
  </div>
  <div class="page">
    <p>WOOT 16INTEL X64 ROOTKIT</p>
    <p>SAMPLING PERIOD</p>
    <p>Resetting counter value to -1 will result in an interrupt loop due to the iretq in ISR returning to interrupted kernel code</p>
    <p>Choose counter value of -2</p>
  </div>
  <div class="page">
    <p>WOOT 16INTEL X64 ROOTKIT</p>
    <p>IMPLEMENTATION WITH LBR</p>
    <p>KiSystemCall64:</p>
    <p>-1 MOV r10, rcx -1 MOV eax, 0x4B -1 SYSCALL</p>
    <p>STI MOV [rbx+1E0h], rcx 0 MOV [rbx+1F8h], eax</p>
    <p>PMU ISR</p>
    <p>//Get Last Branch Recorded tos = rdmsr(LBR_TOS); lbr_to = rdmsr(LBR_TO + tos)</p>
    <p>//check if its a syscall if lbr_to == rdmsr(IA32_LSTAR) { //This was a syscall }</p>
    <p>IA32_PMC0: 0xFFFFFFFF (-1) Event: 0x5102C5</p>
  </div>
  <div class="page">
    <p>WOOT 16INTEL X64 ROOTKIT</p>
    <p>SUPPORTING VIRTUALIZED ENVIRONMENTS (NO LBR)</p>
    <p>KiSystemCall64:</p>
    <p>-1 MOV r10, rcx -1 MOV eax, 0x4B -1 SYSCALL</p>
    <p>STI MOV [rbx+1E0h], rcx 0 MOV [rbx+1F8h], eax</p>
    <p>PMU ISR</p>
    <p>//Get saved IP ip = KTRAP_FRAME.RIP;</p>
    <p>//check if IP is in KiSystemCall64 if rdmsr(IA32_LSTAR) &lt; ip &amp;&amp; ip &lt; (IA32_LSTAR + 0x290) { //This was a syscall }</p>
    <p>IA32_PMC0: 0xFFFFFFFF (-1) Event: 0x5102C5</p>
  </div>
  <div class="page">
    <p>WOOT 16INTEL X64 ROOTKIT</p>
    <p>CHALLENGES</p>
    <p>Finding the PMU Interrupt</p>
    <p>CPU Hot-Plugging</p>
    <p>Interrupt instruction skid</p>
    <p>99.9999% of trapped Win7 syscalls caught before jump to resolved routine from SSDT</p>
    <p>In other words, implementation on Windows/x64 is much easier than ARM</p>
  </div>
  <div class="page">
    <p>DEMO</p>
  </div>
  <div class="page">
    <p>WOOT 16ANALYSIS</p>
    <p>LIMITATIONS</p>
    <p>PMU Registers are not persistent to a core reset</p>
    <p>PMU registers could be modified by other kernel code</p>
    <p>PMU Watchdog may be necessary, a cloaked thread that monitors for someone changing PMU and changing back</p>
    <p>Detection could be based on increase in PMU interrupts serviced, or just presence of particular values in PMU registers</p>
    <p>That said, this is still a practical approach towards rootkits</p>
  </div>
  <div class="page">
    <p>WOOT 16ANALYSIS</p>
    <p>RESULTS</p>
    <p>Evades Kernel Patch Protection, including PatchGuard</p>
    <p>Could be extended to hook other IDT/EVT entries beyond SYSCALL/SVC</p>
    <p>Overhead is quite low:</p>
    <p>Benchmarking real-world usage is tough</p>
    <p>PassMark and JavaScript benchmarks used (2-6% Android, &lt;10% Windows)</p>
    <p>Not noticeable at all with subjective testing and analysis</p>
  </div>
  <div class="page">
    <p>WOOT 16</p>
    <p>ACKNOWLEDGEMENTS</p>
    <p>Cody Pierce, Endgame</p>
    <p>Kenny Fitch, Endgame</p>
    <p>Eric Miller, Endgame</p>
    <p>Jamie Butler, Endgame</p>
    <p>Several others at Endgame</p>
    <p>Researchers that paved the way for PMU assisted security research</p>
  </div>
  <div class="page">
    <p>QUESTIONS?</p>
  </div>
</Presentation>
