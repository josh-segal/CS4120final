<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Instant OS Updates via Userspace Checkpoint-and-Restart</p>
    <p>Sanidhya Kashyap, Changwoo Min, Byoungyoung Lee, Taesoo Kim, Pavel Emelyanov</p>
  </div>
  <div class="page">
    <p>OS updates are prevalent</p>
  </div>
  <div class="page">
    <p>And OS updates are unavoidable</p>
    <p>Prevent known, state-of-the-art attacks  Security patches</p>
    <p>Adopt new features  New I/O scheduler features</p>
    <p>Improve performance  Performance patches</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Unfortunately, system updates come at a cost</p>
    <p>Unavoidable downtime  Potential risk of system failure</p>
  </div>
  <div class="page">
    <p>Unfortunately, system updates come at a cost</p>
    <p>Unavoidable downtime  Potential risk of system failure</p>
    <p>$109k per minute Hidden costs (losing customers)</p>
  </div>
  <div class="page">
    <p>Example: memcached</p>
    <p>Facebook's memcached servers incur a downtime of 2-3 hours per machine  Warming cache (e.g., 120 GB) over the network</p>
  </div>
  <div class="page">
    <p>Example: memcached</p>
    <p>Facebook's memcached servers incur a downtime of 2-3 hours per machine  Warming cache (e.g., 120 GB) over the network</p>
    <p>Our approach updates OS in 3 secs for 32GB of data from v3.18 to v3.19</p>
    <p>for Ubuntu / Fedora releases</p>
  </div>
  <div class="page">
    <p>Existing practices for OS updates</p>
    <p>Dynamic Kernel Patching (e.g., kpatch, ksplice)</p>
    <p>Problem: only support minor patches</p>
    <p>Rolling Update (e.g., Google, Facebook, etc)</p>
    <p>Problem: inevitable downtime and requires careful planning</p>
  </div>
  <div class="page">
    <p>Existing practices for OS updates</p>
    <p>Dynamic Kernel Patching (e.g., kpatch, ksplice)</p>
    <p>Problem: only support minor patches</p>
    <p>Rolling Update (e.g., Google, Facebook, etc)</p>
    <p>Problem: inevitable downtime and requires careful planning</p>
    <p>Losing application state is inevitable  Restoring memcached takes 2-3 hours</p>
  </div>
  <div class="page">
    <p>Existing practices for OS updates</p>
    <p>Dynamic Kernel Patching (e.g., kpatch, ksplice)</p>
    <p>Problem: only support minor patches</p>
    <p>Rolling Update (e.g., Google, Facebook, etc)</p>
    <p>Problem: inevitable downtime and requires careful planning</p>
    <p>Losing application state is inevitable  Restoring memcached takes 2-3 hours</p>
    <p>Goals of this work:  Support all types of patches  Least downtime to update new OS  No kernel source modification</p>
  </div>
  <div class="page">
    <p>Problems of typical OS update</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OSOS OSStop service</p>
  </div>
  <div class="page">
    <p>Problems of typical OS update</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OS</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
  </div>
  <div class="page">
    <p>Problems of typical OS update</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
  </div>
  <div class="page">
    <p>Problems of typical OS update</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
  </div>
  <div class="page">
    <p>Problems of typical OS update</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
  </div>
  <div class="page">
    <p>Problems of typical OS update</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
    <p>Is it possible to keep the</p>
    <p>application state?</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
    <p>Memcached</p>
    <p>Checkpoint</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
    <p>Memcached</p>
    <p>Memcahed</p>
    <p>In-kernel switch</p>
    <p>Checkpoint</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>OS</p>
    <p>Memcached</p>
    <p>OS</p>
    <p>New OSNew OS</p>
    <p>Memcached</p>
    <p>OS OSStop service</p>
    <p>Soft reboot</p>
    <p>Start service</p>
    <p>Memcached</p>
    <p>Memcahed</p>
    <p>In-kernel switch</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>Stop service</p>
    <p>Start service</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>KUP's life cycle</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>Stop service</p>
    <p>Start service</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>KUP's life cycle</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>OS updates loose application states</p>
    <p>New OSNew OS</p>
    <p>Stop service</p>
    <p>Start service</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>KUP's life cycle</p>
    <p>KUP: Kernel update with application checkpoint-and-restore (C/R)</p>
    <p>In-kernel switch</p>
    <p>Challenge: how to further decrease</p>
    <p>the potential downtime?</p>
  </div>
  <div class="page">
    <p>Techniques to decrease the downtime</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>Techniques to decrease the downtime</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>Techniques to decrease the downtime</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>Techniques to decrease the downtime</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>Techniques to decrease the downtime</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>Incremental checkpoint</p>
    <p>Timeline</p>
    <p>S1</p>
    <p>Reduces downtime (up to 83.5%)  Problem: Multiple snapshots increase the restore time</p>
    <p>Naive checkpoint</p>
    <p>downtime</p>
    <p>Si Snapshot instance</p>
  </div>
  <div class="page">
    <p>Incremental checkpoint</p>
    <p>Timeline</p>
    <p>S1</p>
    <p>S1</p>
    <p>Reduces downtime (up to 83.5%)  Problem: Multiple snapshots increase the restore time</p>
    <p>Naive checkpoint</p>
    <p>Incremental checkpoint</p>
    <p>downtime</p>
    <p>Si Snapshot instance</p>
  </div>
  <div class="page">
    <p>Incremental checkpoint</p>
    <p>Timeline</p>
    <p>S1</p>
    <p>S1 S2</p>
    <p>Reduces downtime (up to 83.5%)  Problem: Multiple snapshots increase the restore time</p>
    <p>Naive checkpoint</p>
    <p>Incremental checkpoint</p>
    <p>downtime</p>
    <p>Si Snapshot instance</p>
  </div>
  <div class="page">
    <p>Incremental checkpoint</p>
    <p>Timeline</p>
    <p>S1</p>
    <p>S1 S2 S3</p>
    <p>Reduces downtime (up to 83.5%)  Problem: Multiple snapshots increase the restore time</p>
    <p>Naive checkpoint</p>
    <p>Incremental checkpoint</p>
    <p>downtime</p>
    <p>Si Snapshot instance</p>
  </div>
  <div class="page">
    <p>Incremental checkpoint</p>
    <p>Timeline</p>
    <p>S1</p>
    <p>S1 S2 S3</p>
    <p>Reduces downtime (up to 83.5%)  Problem: Multiple snapshots increase the restore time</p>
    <p>Naive checkpoint</p>
    <p>Incremental checkpoint S4</p>
    <p>downtime</p>
    <p>downtime</p>
    <p>Si Snapshot instance</p>
  </div>
  <div class="page">
    <p>On-demand restore  Rebind the memory once the application</p>
    <p>accesses it</p>
    <p>Only map the memory region with snapshot and restart the application</p>
    <p>Decreases the downtime (up to 99.6%)  Problem: Incompatible with incremental</p>
    <p>checkpoint</p>
  </div>
  <div class="page">
    <p>Problem: both techniques together result in inefficient application C/R</p>
    <p>During restore, need to map each pages individually</p>
    <p>Individual lookups to find the relevant pages  Individual page mapping to enable on-demand restore</p>
    <p>S1S1 2 43</p>
    <p>An application has 4 pages as its working set size</p>
    <p>Incremental checkpoint has 2 iterations</p>
    <p>1st iteration all 4 pages (1, 2, 3, 4) are dumped</p>
    <p>2nd iteration 2 pages (2, 4) are dirtied</p>
    <p>Increases the restoration downtime (42.5%)</p>
  </div>
  <div class="page">
    <p>Problem: both techniques together result in inefficient application C/R</p>
    <p>During restore, need to map each pages individually</p>
    <p>Individual lookups to find the relevant pages  Individual page mapping to enable on-demand restore</p>
    <p>S1S1 S2 3 2 4</p>
    <p>An application has 4 pages as its working set size</p>
    <p>Incremental checkpoint has 2 iterations</p>
    <p>1st iteration all 4 pages (1, 2, 3, 4) are dumped</p>
    <p>2nd iteration 2 pages (2, 4) are dirtied</p>
    <p>Increases the restoration downtime (42.5%)</p>
  </div>
  <div class="page">
    <p>New abstraction: file-offset based address mapping (FOAM)</p>
    <p>Flat address space representation for the snapshot  One-to-one mapping between the address space and the</p>
    <p>snapshot  No explicit lookups for the pages across the snapshots</p>
    <p>A few map operations to map the entire snapshot with address space</p>
    <p>Use sparse file representation  Rely on the concept of holes supported by modern file systems</p>
    <p>Simplifies incremental checkpoint and on-demand restore</p>
  </div>
  <div class="page">
    <p>Techniques to decrease the downtime</p>
    <p>Checkpoint</p>
    <p>Restore</p>
    <p>In-kernel switch</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>OS</p>
    <p>Running</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>Memcached</p>
    <p>RAM 2 431</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1Snapshot 2 431</p>
    <p>OS</p>
    <p>Checkpoint</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>RAM</p>
    <p>Memcached</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1Snapshot 2 431</p>
    <p>OS</p>
    <p>In-kernel switch</p>
    <p>New OS</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>Memcached</p>
    <p>RAM</p>
    <p>Memcached</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1Snapshot 2 431</p>
    <p>OS</p>
    <p>Restore</p>
    <p>New OS</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>Memcached</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1Snapshot 2 431</p>
    <p>OS</p>
    <p>Running</p>
    <p>New OS</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>MemcachedMemcached</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1Snapshot 2 431</p>
    <p>OS</p>
    <p>Running</p>
    <p>New OS</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>MemcachedMemcached</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
    <p>Dump data Read data</p>
  </div>
  <div class="page">
    <p>Redundant data copy</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1Snapshot 2 431</p>
    <p>OS</p>
    <p>Running</p>
    <p>New OS</p>
    <p>Application C/R copies data back and forth  Not a good fit for applications with huge memory</p>
    <p>Memcached MemcachedMemcached</p>
    <p>RAM 2 431</p>
    <p>MemcachedIs it possible to avoid memory copy?</p>
    <p>Dump data Read data</p>
  </div>
  <div class="page">
    <p>Avoid redundant data copy across reboot</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>OS</p>
    <p>Running</p>
    <p>Reserve the application's memory across reboot  Inherently rebind the memory without any copy</p>
    <p>Memcached</p>
    <p>RAM 2 431Memory actively used</p>
  </div>
  <div class="page">
    <p>Avoid redundant data copy across reboot</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1 Snapshot</p>
    <p>OS</p>
    <p>Checkpoint</p>
    <p>Reserve the application's memory across reboot  Inherently rebind the memory without any copy</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
    <p>Reserve the memory in the OS</p>
  </div>
  <div class="page">
    <p>Avoid redundant data copy across reboot</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1 Snapshot</p>
    <p>OS</p>
    <p>In-kernel switch</p>
    <p>New OSOld OS</p>
    <p>Reserve the application's memory across reboot  Inherently rebind the memory without any copy</p>
    <p>Memcached</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
    <p>Reserve the same memory in the new OS</p>
  </div>
  <div class="page">
    <p>Avoid redundant data copy across reboot</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1 Snapshot</p>
    <p>OS</p>
    <p>Restore</p>
    <p>New OSOld OS</p>
    <p>Reserve the application's memory across reboot  Inherently rebind the memory without any copy</p>
    <p>Memcached</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
    <p>Implicitly map the memory region</p>
  </div>
  <div class="page">
    <p>Avoid redundant data copy across reboot</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1 Snapshot</p>
    <p>OS</p>
    <p>Running</p>
    <p>New OSOld OS</p>
    <p>Reserve the application's memory across reboot  Inherently rebind the memory without any copy</p>
    <p>MemcachedMemcached</p>
    <p>RAM 2 431</p>
    <p>Memcached</p>
    <p>Memory again in use</p>
  </div>
  <div class="page">
    <p>Avoid redundant data copy across reboot</p>
    <p>Running Checkpoint In-kernel</p>
    <p>switch Restore Running</p>
    <p>S1 Snapshot</p>
    <p>OS</p>
    <p>Running</p>
    <p>New OSOld OS</p>
    <p>Reserve the application's memory across reboot  Inherently rebind the memory without any copy</p>
    <p>Memcached MemcachedMemcached</p>
    <p>RAM 2 431</p>
    <p>MemcachedChallenge: how to notify the newer</p>
    <p>OS without modifying its source? Memory again in use</p>
  </div>
  <div class="page">
    <p>Persist physical pages (PPP) without OS modification</p>
    <p>Reserve virtual-to-physical mapping information</p>
    <p>Static instrumentation of the OS binary  Inject our own memory reservation function, then</p>
    <p>further boot the OS  Handle page-faults for the restored application</p>
    <p>Dynamic kernel instrumentation  Inject our own page fault handler function for</p>
    <p>memory binding</p>
  </div>
  <div class="page">
    <p>Persist physical pages (PPP) without OS modification</p>
    <p>Reserve virtual-to-physical mapping information</p>
    <p>Static instrumentation of the OS binary  Inject our own memory reservation function, then</p>
    <p>further boot the OS  Handle page-faults for the restored application</p>
    <p>Dynamic kernel instrumentation  Inject our own page fault handler function for</p>
    <p>memory binding</p>
    <p>No explicit memory copy  Does not require any kernel source modification</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Application C/R  criu  Works at the namespace level</p>
    <p>In-kernel switch  kexec system call  A mini boot loader that bypasses BIOS while booting</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How effective is KUP's approach compared to the in-kernel hot patching?</p>
    <p>What is the effective performance of each technique during the update?</p>
  </div>
  <div class="page">
    <p>KUP can support major and minor updates in Ubuntu</p>
    <p>KUP supports 23 minor/4 major updates (v3.17v4.1)  However, kpatch can only update 2 versions</p>
    <p>e.g., layout change in data structure</p>
    <p>kpatch failure scenarios</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>Basic - SSD</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>Incremental checkpoint - SSD</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>On-demand restore - SSD</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>FOAM - SSD</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>Basic - RP-RAMFS</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>Incremental checkpoint - RP-RAMFS</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>On-demand restore - RP-RAMFS</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>FOAM - RP-RAMFS</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Bandwidth (MB)</p>
    <p>Timeline (sec)</p>
    <p>PPP</p>
  </div>
  <div class="page">
    <p>Updating OS with memcached  PPP has the least degradation  Storage also affects the performance</p>
    <p>Basic - SSD</p>
    <p>Incremental checkpoint - SSD</p>
    <p>On-demand restore - SSD</p>
    <p>FOAM - SSD</p>
    <p>Basic - RP-RAMFS</p>
    <p>Incremental checkpoint - RP-RAMFS</p>
    <p>On-demand restore - RP-RAMFS</p>
    <p>FOAM - RP-RAMFS</p>
    <p>Timeline (sec)</p>
    <p>PPP</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>KUP does not support checkpoint and restore all socket implementations</p>
    <p>TCP, UDP and netlink are supported  Failure during restoration</p>
    <p>System call is removal or interface modification</p>
  </div>
  <div class="page">
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>KUP: a simple update mechanism with application checkpoint-and-restore (C/R)</p>
    <p>Employs various techniques:  New data abstraction for application C/R  Fast in-kernel switching technique  A simple mechanism to persist the memory</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>KUP: a simple update mechanism with application checkpoint-and-restore (C/R)</p>
    <p>Employs various techniques:  New data abstraction for application C/R  Fast in-kernel switching technique  A simple mechanism to persist the memory</p>
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Handling in-kernel states</p>
    <p>Handles namespace and cgroups  ptrace() syscall to handle the blocking system calls ,</p>
    <p>timers, registers etc.  Parasite code to fetch / put the application's states  /proc file system exposes the required information</p>
    <p>for application C/R  A new mode (TCP_REPAIR) allows handling the TCP</p>
    <p>connections</p>
  </div>
  <div class="page">
    <p>What cannot be checkpointed</p>
    <p>X11 applications  Tasks with debugger attached  Tasks running in compat mode (32 bit)</p>
  </div>
  <div class="page">
    <p>Possible changes after application C/R</p>
    <p>Per-task statistics  Namespace IDs  Process start time  Mount point IDs  Socket IDs (st_ino)  VDSO</p>
  </div>
  <div class="page">
    <p>Suitable applications</p>
    <p>Suitable for all kinds of applications  PPP approach supports all types of applications</p>
    <p>May fail to restore on the previous kernel  FOAM is not a good candidate for write</p>
    <p>intensive applications</p>
    <p>More confidence in safely restoring the application on the previous kernel</p>
  </div>
  <div class="page">
    <p>PPP works effectively</p>
    <p>D o</p>
    <p>w n</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>WSS (GB) with 50% write</p>
    <p>FOAM - SSD</p>
    <p>FOAM on SSD slow  FOAM on RP-RAMFS space inefficient</p>
  </div>
  <div class="page">
    <p>PPP works effectively</p>
    <p>D o</p>
    <p>w n</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>WSS (GB) with 50% write</p>
    <p>Out of memory error</p>
    <p>FOAM - SSD FOAM - RP-RAMFS</p>
    <p>FOAM on SSD slow  FOAM on RP-RAMFS space inefficient</p>
  </div>
  <div class="page">
    <p>PPP works effectively</p>
    <p>D o</p>
    <p>w n</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>WSS (GB) with 50% write</p>
    <p>Out of memory error</p>
    <p>FOAM - SSD FOAM - RP-RAMFS PPP</p>
    <p>FOAM on SSD slow  FOAM on RP-RAMFS space inefficient</p>
  </div>
</Presentation>
