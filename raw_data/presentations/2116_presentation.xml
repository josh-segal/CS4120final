<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The TokuFS Streaming File System</p>
    <p>John Esmet Tokutek &amp; Rutgers</p>
    <p>Michael A. Bender Tokutek &amp; Stony Brook</p>
    <p>Martin Farach-Colton Tokutek &amp; Rutgers</p>
    <p>Bradley C. Kuszmaul Tokutek &amp; MIT</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>What are we going to talk about? First,</p>
    <p>What we built  The problem we wanted to address  What the results were</p>
    <p>Then,  How we did it  What the system looks like  What operations in our system look like  Interesting open problems</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS</p>
    <p>TokuDB</p>
    <p>XFS</p>
    <p>We built TokuFS TokuFS - the Fractal Tree filesystem</p>
    <p>Wanted to create a filesystem that could handle microdata workloads.</p>
    <p>We built a prototype filesystem using TokuDB. TokuDB is Tokuteks commercial Fractal Tree</p>
    <p>implementation.  Offers orders of magnitude speedup on microdata. Aggregates writes while indexing. So it can be faster than underlying filesystem.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS</p>
    <p>TokuDB</p>
    <p>XFS</p>
    <p>We built TokuFS TokuFS - the Fractal Tree filesystem</p>
    <p>Wanted to create a filesystem that could handle microdata workloads.</p>
    <p>We built a prototype filesystem using TokuDB. TokuDB is Tokuteks commercial Fractal Tree</p>
    <p>implementation.  Offers orders of magnitude speedup on microdata. Aggregates writes while indexing. So it can be faster than underlying filesystem.</p>
    <p>What is microdata?</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS</p>
    <p>TokuDB</p>
    <p>XFS</p>
    <p>We built TokuFS TokuFS - the Fractal Tree filesystem</p>
    <p>Wanted to create a filesystem that could handle microdata workloads.</p>
    <p>We built a prototype filesystem using TokuDB. TokuDB is Tokuteks commercial Fractal Tree</p>
    <p>implementation.  Offers orders of magnitude speedup on microdata. Aggregates writes while indexing. So it can be faster than underlying filesystem.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS</p>
    <p>TokuDB</p>
    <p>XFS</p>
    <p>We built TokuFS TokuFS - the Fractal Tree filesystem</p>
    <p>Wanted to create a filesystem that could handle microdata workloads.</p>
    <p>We built a prototype filesystem using TokuDB. TokuDB is Tokuteks commercial Fractal Tree</p>
    <p>implementation.  Offers orders of magnitude speedup on microdata. Aggregates writes while indexing. So it can be faster than underlying filesystem.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS is fully functional TokuFS is a prototype, but fully functional.</p>
    <p>Implements files, directories, metadata, etc.  Interfaces with applications via shared library, header.</p>
    <p>We wrote a FUSE implementation, too.  FUSE lets you implement filesystems in userspace.  But theres overhead, so performance isnt optimal.  The best way to run is through our POSIX-like file API.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Microdata is micro data Accessing data on disk has two components:</p>
    <p>Seek time -- fixed cost.  Bandwidth time -- proportional to data size.</p>
    <p>Microdata:  Size of data where bandwidth time &lt; seek time.</p>
    <p>Microwrite: Writing microdata  A random microwrite may pay full seek cost (expensive). Updating in place, like a B-tree or hash structure.</p>
    <p>A random microwrite may share seek cost (cheap). Logging updates to end of file.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>The microdata indexing problem Given:</p>
    <p>A large set of data.  Stream of microupdates arriving in random key order.</p>
    <p>Problem:  Ingest the stream of updates.  At any given time, respond to range queries on the data.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>The microdata indexing problem Given:</p>
    <p>A large set of data.  Stream of microupdates arriving in random key order.</p>
    <p>Problem:  Ingest the stream of updates.  At any given time, respond to range queries on the data.</p>
    <p>Claim: Filesystems face the microdata indexing problem</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Filesystem microdata example: atime Whenever a file is touched, its inode is updated with the new access time.</p>
    <p>Updating atime is a microwrite.  ext4 has noatime mount option to avoid the microwrite.  Also has relatime mount option to do less microwrites.</p>
    <p>What makes updating atime so expensive?  ext4s inode table updates in place, so theres disk I/O.  Could try and log writes so the write is cheap, But now we need to be able to find an inode in the log. The log exhibits no logical locality, so range queries suffer.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>atime can be problematic atime updates are by far the biggest IO performance deficiency that Linux has today. Getting rid of atime updates would give us more everyday Linux performance than all the pagecache speedups of the past 10 years, combined.</p>
    <p>Ingo Molnar, kernel developer</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>atime can be problematic</p>
    <p>Many distributions use relatime</p>
    <p>atime updates are by far the biggest IO performance deficiency that Linux has today. Getting rid of atime updates would give us more everyday Linux performance than all the pagecache speedups of the past 10 years, combined.</p>
    <p>Ingo Molnar, kernel developer</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>atime is part of a bigger problem Maybe atime itself isnt very exciting...</p>
    <p>We can probably live with just relatime.</p>
    <p>But it exposed a more fundamental problem:  Updating metadata using an update-in-place data</p>
    <p>structure incurs too much disk I/O.  Big scaling problem on disks capable of ~200 seeks/sec.</p>
    <p>Filesystems exhibit the microdata indexing problem, and it can be solved. TokuFS is a prototype that shows this.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Big speedups on microwrites We ran microdata-intensive benchmarks</p>
    <p>Compared TokuFS to ext4, XFS, Btrfs, ZFS.  Stressed metadata and file data.  Used commodity hardware: 2 core AMD, 4GB RAM Single 7200 RPM disk Simple, cheap setup. No hardware tricks.</p>
    <p>In all tests, orders of magnitude speed up.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Create 2 million 200-byte files in a shallow tree</p>
    <p>Faster on small file creation</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Create 2 million 200-byte files in a shallow tree</p>
    <p>Faster on small file creation</p>
    <p>Log scale</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Faster on metadata scan Recursively scan directory tree for metadata</p>
    <p>Use the same 2 million files created before.  Start on a cold cache to measure disk I/O efficiency</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Faster on big directories Create one million empty files in a directory</p>
    <p>Create files with random names, then read them back.  Tests how well a single directory scales.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Faster on microwrites in a big file Randomly write out a file in small, unaligned pieces</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS uses Fractal Trees Key to good performance is good data structures (Fractal Trees)</p>
    <p>As fast as LSM trees on writes.  As fast as B-trees on reads.</p>
    <p>No performance cliff when scaling out of RAM  Performance decreases smoothly as data grows.  Index never fragments.</p>
    <p>Efficient on mixed workloads  Reads just as fast even if mixed with writes.  Writes just as fast even if mixed with reads.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS employs two indexes Metadata index:</p>
    <p>The metadata index maps pathname to file metadata. /home/esmet  mode, file size, access times, ... /home/esmet/tokufs.c  mode, file size, access times, ...</p>
    <p>Data index:  The data index maps pathname, blocknum to bytes. /home/esmet/tokufs.c, 0  [ block of bytes ] /home/esmet/tokufs.c, 1  [ block of bytes ]</p>
    <p>Block size is a compile-time constant: 512. good performance on small files, moderate on large files</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Common queries exhibit locality Metadata index keys: Full path</p>
    <p>All the children of a directory are contiguous in the index.  Ordered by number of slashes first, then lexicographically.  Reading a directory is simple and fast. / /home/esmet /home/michael /home/esmet/file.c /home/esmet/talk /home/michael/notes.txt /home/esmet/talk/talk.pdf</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Common queries exhibit locality Metadata index keys: Full path</p>
    <p>All the children of a directory are contiguous in the index.  Ordered by number of slashes first, then lexicographically.  Reading a directory is simple and fast. / /home/esmet /home/michael /home/esmet/file.c /home/esmet/talk /home/michael/notes.txt /home/esmet/talk/talk.pdf</p>
    <p>Example: Reading /home/esmet</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Common queries exhibit locality Metadata index keys: Full path</p>
    <p>All the children of a directory are contiguous in the index.  Ordered by number of slashes first, then lexicographically.  Reading a directory is simple and fast. / /home/esmet /home/michael /home/esmet/file.c /home/esmet/talk /home/michael/notes.txt /home/esmet/talk/talk.pdf</p>
    <p>child child</p>
    <p>Example: Reading /home/esmet</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Common queries exhibit locality Metadata index keys: Full path</p>
    <p>All the children of a directory are contiguous in the index.  Ordered by number of slashes first, then lexicographically.  Reading a directory is simple and fast. / /home/esmet /home/michael /home/esmet/file.c /home/esmet/talk /home/michael/notes.txt /home/esmet/talk/talk.pdf</p>
    <p>child child</p>
    <p>Example: Reading /home/esmet</p>
    <p>not a child</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Common queries exhibit locality Data block index keys: &lt;full path, blocknum&gt;</p>
    <p>Keys ordered such that all data blocks are contiguous. So reading a file is simple and fast.</p>
    <p>Keys are also ordered such that all the files for a particular subtree are contiguous. Helps implement directory rename. More on this later.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>TokuFS compresses indexes Reduces overhead from full path keys</p>
    <p>Pathnames are highly prefix redundant.  They compress well in practice.</p>
    <p>Reduces overhead from zero-valued padding  Uninitialized bytes in a block are set to zero.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Upsert speeds up read-modify-write Read-Modify-Write</p>
    <p>Update by reading old value, writing new value.  Slow if implemented with a search + insert.</p>
    <p>Upserts (update + insert) make read-modifywrite fast</p>
    <p>Update with a message, targeted at a key.  Message starts at root, but affects queries immediately.  When root has too many messages, flush to children.  When message reaches the value, it is applied.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Use upsert for metadata To create a file:</p>
    <p>Message says: create an entry if one doesnt exists else do nothing</p>
    <p>To update atime:  Message says: replace old atime with new atime</p>
    <p>To update file size:  Message says: set file size to max(old_offset, new)</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Use upsert for file writes To update N bytes of a block at offset K:</p>
    <p>Message says: Replace N bytes at offset K. If block didnt exist, create one with zeros, then update.</p>
    <p>To update a file:  Send a message to each block to be modified.  Unaligned writes arent too much slower. If a write spans a block boundary, we can send a message</p>
    <p>to each block. This is nice compared to two I/Os on an update-in-place</p>
    <p>data structures.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Sometimes, cannot upsert Upsert can be used when an operation:</p>
    <p>Will have all the information it needs when applied.  Doesnt need the result to return.</p>
    <p>But some operations have hidden searches.  Creating a file in exclusive mode.  Here, the create may need to return error if file exists.  To know if the file exists, we need to search.</p>
    <p>Avoid hidden searches  When performance is a concern, architect a system to not</p>
    <p>require a search from your write operations.  Or use Bloom filters.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Caveat: Large File I/O Large file I/O has room for improvement</p>
    <p>Experiments show a factor of 3 to be gained compared to XFS in writing out a 400MB file sequentially.</p>
    <p>Ideas:  Try different compression methods Trade space for speed. The data is highly redundant, should work well even with a</p>
    <p>faster/lighter compressor  Use a dynamically growing block sizes for files Block sizes could grow exponentially as file size grows, to a</p>
    <p>limit, maybe 128Kb. Eliminate the need to tune block size for the expected</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Caveat: Directory Rename Directory rename is slow</p>
    <p>Since we use full pathnames in keys, renaming a directory requires modifying the key of every child</p>
    <p>For feature completeness, we implement a brute force algorithm that renames each child by deleting the old new and inserting the new.</p>
    <p>This scales poorly as the directory subtree grows</p>
    <p>Idea:  Implement a lifted fractal tree, nodes have key prefix.</p>
    <p>Clip-and-move subtrees along a root to leaf path for the renamed directory, moving each to the new location.</p>
    <p>Friday, June 29, 12</p>
  </div>
  <div class="page">
    <p>TokuFS: Hot Storage 2012</p>
    <p>Thank you! To learn more about Fractal Tree indexing:</p>
    <p>Why the best read optimization is a write optimization Leif Walsh, Tokutek, talk given at Percona Live Expo 2012</p>
    <p>How TokuDB Fractal Tree indexes work Bradley C. Kuszmaul, Tokutek and MIT, from MySQL UC</p>
    <p>To discuss ways to leverage them for highperformance filesystems:</p>
    <p>John Esmet  esmet@tokutek.com</p>
    <p>Friday, June 29, 12</p>
  </div>
</Presentation>
