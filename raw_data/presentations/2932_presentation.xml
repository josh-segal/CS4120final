<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Spotting Code Optimizations in DataParallel Pipelines through PeriSCOPE</p>
    <p>Zhenyu Guo, Xuepeng Fan, Rishan Chen, Jiaxing Zhang, Hucheng Zhou,</p>
    <p>Sean McDirmid, Chang Liu, Wei Lin*, Jingren Zhou*, Lidong Zhou</p>
    <p>Microsoft Research Asia</p>
    <p>*Microsoft BING</p>
  </div>
  <div class="page">
    <p>Distributed Data-Parallel Pipelines</p>
    <p>Data Shuffling</p>
    <p>Computation Phase #1</p>
    <p>Computation Phase #2</p>
    <p>IO Performance</p>
    <p>Critical</p>
  </div>
  <div class="page">
    <p>Opportunities</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Data Shuffling</p>
    <p>if (row[impr] &gt; MAX_IMPR) continue;</p>
    <p>row[domain] = ExtractURL(row[url]);</p>
    <p>bool p = row[query].Contains(KEYS);</p>
  </div>
  <div class="page">
    <p>Opportunities</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Data Shuffling</p>
    <p>if (row[impr] &gt; MAX_IMPR) continue;</p>
    <p>if (row[impr] &gt; MAX_IMPR) continue;</p>
    <p>row[domain] = ExtractURL(row[url]);</p>
    <p>string domain = ExtractURL(row[url]);</p>
    <p>IO Performance</p>
    <p>Optimized</p>
    <p>bool p = row[query].Contains(KEYS);</p>
    <p>row[p] = row[query].Contains(KEYS);</p>
    <p>if (row[impr] &gt; MAX_IMPR) continue;</p>
    <p>row[domain] = ExtractURL(row[url]);</p>
    <p>bool p = row[query].Contains(KEYS);</p>
  </div>
  <div class="page">
    <p>Current Practice: Separated Optimization</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE</p>
    <p>SQL-like</p>
    <p>code</p>
    <p>Query Optimizer</p>
    <p>Compiler</p>
    <p>Compiler</p>
    <p>As seen in SCOPE, DryadLINQ, Pig Latin, and Hive</p>
  </div>
  <div class="page">
    <p>Holistic optimization using query optimizer</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE</p>
    <p>Query Optimizer</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE SQL-like</p>
    <p>code</p>
    <p>e.g., Manimal, VLDB 11</p>
  </div>
  <div class="page">
    <p>Holistic optimization using query optimizer</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE</p>
    <p>Query Optimizer</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE SQL-like</p>
    <p>code</p>
    <p>e.g., Manimal, VLDB 11</p>
    <p>Very</p>
    <p>Limited!</p>
    <p>if (row[impr] &gt; MAX_IMPR) continue; =&gt; WHERE !(impr &gt; MAX_IMPR)</p>
  </div>
  <div class="page">
    <p>A New Perspective</p>
  </div>
  <div class="page">
    <p>PeriSCOPE: Pipeline-aware Holistic Code Optimization</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE</p>
    <p>SQL-like</p>
    <p>code</p>
    <p>Compiler</p>
    <p>Compiler</p>
    <p>Query Optimizer</p>
  </div>
  <div class="page">
    <p>PeriSCOPE: Pipeline-aware Holistic Code Optimization</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>USING</p>
    <p>USING</p>
    <p>REDUCE</p>
    <p>FROM EXTRACT</p>
    <p>PRODUCE</p>
    <p>SQL-like</p>
    <p>code Compiler</p>
    <p>Query Optimizer</p>
    <p>Much</p>
    <p>Deeper!</p>
  </div>
  <div class="page">
    <p>Optimization Steps</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Step 1: Construct inter-procedural flow graph</p>
  </div>
  <div class="page">
    <p>Optimization Steps</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Step 1: Construct inter-procedural flow graph</p>
  </div>
  <div class="page">
    <p>Optimization Steps</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Step 1: Construct inter-procedural flow graph</p>
    <p>Step 2: Add safety constraints for skipping shuffling code</p>
  </div>
  <div class="page">
    <p>Optimization Steps</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Step 1: Construct inter-procedural flow graph</p>
    <p>Step 2: Add safety constraints for skipping shuffling code</p>
    <p>Step 3: Transform code for reducing shuffling I/O</p>
  </div>
  <div class="page">
    <p>Column Reduction: Reduce Number of Columns</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
  </div>
  <div class="page">
    <p>Column Reduction: Reduce Number of Columns</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
  </div>
  <div class="page">
    <p>Early Filtering: Reduce Number of Rows</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
    <p>x</p>
    <p>Count++</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>Early Filtering: Reduce Number of Rows</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
    <p>X</p>
    <p>Count++</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>Smart Cut: Reduce Size of Each Row</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
    <p>isum += impr</p>
    <p>INPUT</p>
    <p>OUTPUT</p>
  </div>
  <div class="page">
    <p>Smart Cut: Reduce Size of Each Row</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
    <p>isum += impr</p>
    <p>INPUT</p>
    <p>OUTPUT</p>
    <p>clks:long:8</p>
    <p>clks:long:8</p>
    <p>impr:int:4</p>
    <p>-:-:</p>
  </div>
  <div class="page">
    <p>Smart Cut: Reduce Size of Each Row</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Procedural</p>
    <p>code</p>
    <p>Flow Graph</p>
    <p>Flow Graph</p>
    <p>Data Shuffling</p>
    <p>Procedural code</p>
    <p>Procedural code</p>
    <p>isum += impr</p>
    <p>INPUT</p>
    <p>OUTPUT</p>
    <p>clks:long:8</p>
    <p>clks:long:8</p>
    <p>impr:int:4</p>
    <p>-:-:</p>
  </div>
  <div class="page">
    <p>Coverage Study*</p>
    <p>* Study on 28,838 jobs collected from SCOPE clusters in 2010/2011.</p>
    <p>Optimization Eligible jobs</p>
    <p>Column Reduction 4,052 (14.05%)</p>
    <p>Early Filtering 3,020 (10.47%)</p>
    <p>Smart Cut 1,544 ( 5.35%)</p>
    <p>Overlapped Total 6,397 (22.18%)</p>
  </div>
  <div class="page">
    <p>Effectiveness and Observations</p>
    <p>I/O reduction is nice</p>
    <p>Latency reduction is generally smaller</p>
  </div>
  <div class="page">
    <p>Effectiveness and Observations</p>
    <p>Column Reduction</p>
    <p>Case 4: 18 in 22 columns are eliminated</p>
    <p>Case 7: 29 in 31 columns are eliminated</p>
    <p>Mostly due to UDF reuse</p>
    <p>80.2% of the functions eligible for column reduction are reused more than 13 times</p>
  </div>
  <div class="page">
    <p>Effectiveness and Observations</p>
    <p>Early Filtering</p>
    <p>Exclude rows with invalid format</p>
    <p>Case 8: ~0% reduction</p>
    <p>Exclude rows with certain unwanted values</p>
    <p>Case 1: 99% reduction</p>
  </div>
  <div class="page">
    <p>Effectiveness and Observations</p>
    <p>Smart Cut</p>
    <p>Unary operations</p>
    <p>String to integer types</p>
    <p>Trim, SubString</p>
    <p>Binary operations</p>
    <p>Case 5: DateTime.Parse(EndTs) - DateTime.Parse(StartTs)</p>
  </div>
  <div class="page">
    <p>Applicability to various data-parallel computation systems</p>
    <p>Generally applicable (e.g., Scope/DryadLINQ/Hive/Pig Latin)</p>
    <p>Impact factors to the coverage and effectiveness</p>
    <p>Data model</p>
    <p>Relational</p>
    <p>Object</p>
    <p>API interface</p>
    <p>Map(List&lt;Row&gt; rows, )</p>
    <p>Map(Row row, )</p>
  </div>
  <div class="page">
    <p>Future Directions</p>
    <p>Balance how easy it is for programming and how easy it is for automatic optimization</p>
    <p>Extract common computation patterns</p>
    <p>Redesign programming interface to achieve better trade-off</p>
    <p>Interfaces higher than MapReduce?</p>
  </div>
  <div class="page">
    <p>Future Directions</p>
    <p>Explore other components other than distributed data-parallel computation systems in large scale internet service systems</p>
    <p>e.g., automatic caching &amp; prefetching for userfacing web service frameworks</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Pipeline-aware holistic code optimization is promising  Project pipeline information to procedural code  Add safety rules to ensure correctness  I/O driven compiler-like optimization</p>
    <p>Improve performance without sacrificing programmability</p>
    <p>Considering more about how easy it is for optimization when designing programming frameworks</p>
  </div>
  <div class="page">
    <p>Spotting Code Optimizations in DataParallel Pipelines through PeriSCOPE</p>
    <p>Zhenyu Guo, Xuepeng Fan, Rishan Chen, Jiaxing Zhang, Hucheng Zhou,</p>
    <p>Sean McDirmid, Chang Liu, Wei Lin, Jingren Zhou, Lidong Zhou</p>
    <p>Microsoft Research Asia</p>
    <p>Microsoft BING</p>
    <p>Thanks! Questions?</p>
  </div>
</Presentation>
