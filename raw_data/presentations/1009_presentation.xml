<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Soft Updates Made Simple and Fast on Non-volatile Memory</p>
    <p>Mingkai Dong, Haibo Chen Institute of Parallel and Distributed Systems,</p>
    <p>Shanghai Jiao Tong University</p>
    <p>@ ATC 17</p>
  </div>
  <div class="page">
    <p>Non-volatile Memory (NVM)  Non-volatile  Byte-addressable  High throughput and low latency</p>
  </div>
  <div class="page">
    <p>NVM File Systems (NVMFS) Existing NVMFS use journaling or copy-on-write for crash consistency Synchronous cache flushes are necessary Cache flushes are expensive! Other options for crash consistency?</p>
    <p>A</p>
    <p>B C</p>
    <p>ED E</p>
    <p>C</p>
    <p>A</p>
    <p>File System Metadata</p>
    <p>Journal Area</p>
    <p>inode inode</p>
  </div>
  <div class="page">
    <p>NVM File Systems (NVMFS) Existing NVMFS use journaling or copy-on-write for crash consistency Synchronous cache flushes are necessary Cache flushes are expensive! Other options for crash consistency?</p>
    <p>A</p>
    <p>B C</p>
    <p>ED E</p>
    <p>C</p>
    <p>A</p>
    <p>File System Metadata</p>
    <p>Journal Area</p>
    <p>inode inode</p>
  </div>
  <div class="page">
    <p>DISK</p>
    <p>Soft Updates Latest metadata in DRAM  Updated in DRAM with dependency tracked  DRAM performance  No synchronous disk writes Consistent metadata in disks  Persisted to disks with dependency enforced  Always consistent  Immediately usable after crash</p>
    <p>DRAM (Page cache)</p>
    <p>Traditional Soft Updates</p>
  </div>
  <div class="page">
    <p>Soft Updates Update dependencies  E.g., allocating a new data block</p>
    <p>inode</p>
    <p>new data block</p>
    <p>block bitmap</p>
  </div>
  <div class="page">
    <p>Soft Updates Is Complicated Delayed disk writes  Auxiliary structures for each update  More complex dependencies</p>
    <p>inode</p>
    <p>new data block</p>
    <p>block bitmap</p>
    <p>Figures from Soft Updates: A Technique for Eliminating Most Synchronous Writes in the Fast Filesystem, ATC 99</p>
  </div>
  <div class="page">
    <p>Soft Updates Is Complicated Delayed disk writes  Auxiliary structures for each operation  More complex dependencies Cyclic dependencies  Rolling back/forward</p>
    <p>Inode #6</p>
    <p>inode #4 inode #5</p>
    <p>Inode #7</p>
    <p>&lt;--, #0&gt;</p>
    <p>&lt;A, #4&gt;</p>
    <p>&lt;E, #7&gt;</p>
    <p>inode Block Directory Block</p>
    <p>inode #6</p>
    <p>inode #4 inode #5</p>
    <p>inode #7</p>
    <p>inode block (in page cache)</p>
    <p>inode #6</p>
    <p>inode #4 inode #5</p>
    <p>inode #7</p>
    <p>inode block</p>
    <p>inode #6</p>
    <p>inode #4 inode #5</p>
    <p>inode #7</p>
    <p>inode block</p>
    <p>inode #6</p>
    <p>inode #4 inode #5</p>
    <p>inode #7</p>
    <p>inode block Rollback inode #6</p>
    <p>Rollforward inode #6Flush block to disks</p>
  </div>
  <div class="page">
    <p>Soft Updates Is Complicated Delayed disk writes  Auxiliary structures for each operation  More complex dependencies Cyclic dependencies  Rolling back/forward</p>
    <p>The mismatch between per-pointer-based dependency tracking and block-based interface of traditional disks</p>
  </div>
  <div class="page">
    <p>Soft Updates Meets NVM Soft Updates  No synchronous cache flushes  Immediately usable after crash NVM: byte-addressable and fast  Direct write to NVM without delays  No false sharing =&gt; no rolling back/forward  Simple dependency tracking/enforcement</p>
  </div>
  <div class="page">
    <p>SoupFS A simple and fast NVMFS derived from soft updates  Hashtable-based directories</p>
    <p>No false sharing</p>
    <p>Pointer-based dual views  No synchronous cache flushes</p>
    <p>Semantic-aware dependency tracking/enforcement  Simple dependency tracking/enforcement</p>
    <p>Get the best of both Soft Updates and NVM</p>
  </div>
  <div class="page">
    <p>Overview Background Design &amp; Implementation  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Overview Background Design &amp; Implementation  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Block-based Directories Block-based file systems usually use block-based directories  False sharing</p>
    <p>Cyclic dependency  Rolling back/forward</p>
    <p>Slow access  Linear scan</p>
    <p>Directory inode</p>
    <p>indirect block</p>
    <p>fs-long-lon g.exe|512</p>
    <p>l+f.dir|12</p>
  </div>
  <div class="page">
    <p>Hashtable-based Directories Optimized for cache lines  No false sharing  No cyclic dependency Efficient access  No linear scan</p>
    <p>Filename Pointer</p>
    <p>inode Pointer</p>
    <p>Consistent Next</p>
    <p>Latest Next</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>inodeHash Len Filename</p>
  </div>
  <div class="page">
    <p>Overview Background Design &amp; Implementation  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Dual Views Latest view in page cache Consistent view in disks</p>
    <p>Dual views  Eliminate synchronous writes  Provide usability after crash</p>
    <p>DISK</p>
    <p>DRAM (Page cache)</p>
    <p>Traditional Soft Updates</p>
  </div>
  <div class="page">
    <p>Dual Views Latest view in page cache Consistent view in disks NVM Latest view?</p>
    <p>Another copy of metadata in DRAM  Double writes  Double storage overhead  Unnecessary synchronizations</p>
    <p>DISK NVM</p>
    <p>DRAM (Page cache)</p>
    <p>Soft Updates on NVM</p>
    <p>Challenge: How to present latest view efficiently?</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views Reuse data structures in both views Distinguish views by different pointers/structures</p>
    <p>NVM</p>
    <p>DRAM</p>
    <p>Soft Updates on NVM</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views Reuse data structures in both views Distinguish views by different pointers/structures</p>
    <p>Data Structures In Consistent View In Latest View inode SoupFS inode VFS inode dentry consistent next pointer latest next pointer hash table bucket latest bucket if exists B-tree root/height in SoupFS inode root/height in VFS inode</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>create E File E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets  create E</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets  create E</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
    <p>Directory inode</p>
    <p>create E  unlink B</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
    <p>create E  unlink B</p>
    <p>Directory VFS inode</p>
    <p>Directory inode</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Latest Buckets</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E</p>
    <p>E</p>
    <p>create E  unlink B</p>
  </div>
  <div class="page">
    <p>create E  unlink B</p>
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E Latest Buckets</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>create E  unlink B</p>
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E Latest Buckets</p>
    <p>E</p>
    <p>File E</p>
  </div>
  <div class="page">
    <p>create E  unlink B</p>
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E Latest Buckets</p>
    <p>E</p>
    <p>File E</p>
  </div>
  <div class="page">
    <p>create E  unlink B</p>
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C B A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File B File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E Latest Buckets</p>
    <p>E</p>
    <p>File E</p>
  </div>
  <div class="page">
    <p>create E  unlink B</p>
    <p>Pointer-based Dual Views</p>
    <p>Buckets Directory</p>
    <p>inode</p>
    <p>D</p>
    <p>Directory VFS inode</p>
    <p>Volatile in DRAM Updates to NVM w/o persistence guarantee Persisted in NVM</p>
    <p>Dir</p>
    <p>File A File C File D</p>
    <p>Latest Next</p>
    <p>Consistent Next</p>
    <p>C A</p>
    <p>inodeFilename</p>
    <p>Dir</p>
    <p>File A File C File D</p>
    <p>Latest View</p>
    <p>Consistent View</p>
    <p>File E Latest Buckets</p>
    <p>E</p>
    <p>File E</p>
  </div>
  <div class="page">
    <p>Pointer-based Dual Views Reuse data structures in both views Distinguish views by different pointers/structures</p>
    <p>Eliminate synchronous writes  Provide usability after crash</p>
    <p>No double write  Little space overhead</p>
    <p>NVM</p>
    <p>DRAM</p>
    <p>Soft Updates on NVM</p>
  </div>
  <div class="page">
    <p>Overview Background Design &amp; Implementation  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Dependency Tracking Auxiliary structures for each updates</p>
  </div>
  <div class="page">
    <p>Dependency Tracking Auxiliary structures for each updates</p>
    <p>The semantic gap between the page cache (where enforcement happens)</p>
    <p>and the file system (where tracking happens)</p>
    <p>After removing page cache, SoupFS involves semantics in dependency tracking/enforcement</p>
  </div>
  <div class="page">
    <p>Semantic-aware Dependency Tracking Track semantic operations with complementary information  Enough for dependency enforcement</p>
    <p>Operation Type Complementary Information (pointers/integers) diradd added dentry, source directory, overwritten inode dirrem removed dentry, destination directory sizechg the old and new file size attrchg nothing</p>
    <p>Information tagged with  is for rename operation.</p>
  </div>
  <div class="page">
    <p>Semantic-aware Dependency Tracking Track semantic operations with complementary information  Enough for dependency enforcement Operations are stored in operation list of each VFS inode</p>
    <p>dirty inode list VFS inode list next operation</p>
    <p>list</p>
    <p>list next operation type Complimentary information</p>
    <p>VFS inode list next operation</p>
    <p>list</p>
    <p>VFS inode list next operation</p>
    <p>list</p>
  </div>
  <div class="page">
    <p>Semantic-aware Dependency Enforcement Persister daemons traverse the dirty inode list in background  persist each operation from the latest view to the consistent view</p>
    <p>with respect to update dependencies</p>
    <p>dirty inode list VFS inode list next operation</p>
    <p>list</p>
    <p>list next operation type Complimentary information</p>
    <p>VFS inode list next operation</p>
    <p>list</p>
    <p>VFS inode list next operation</p>
    <p>list</p>
  </div>
  <div class="page">
    <p>Overview Background Design &amp; Implementation  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation Setup Platform  Intel Xeon E5 server with two 8-core processors  48 GB DRAM and 64 GB NVDIMM</p>
    <p>File Systems  SoupFS, PMFS, NOVA, Ext4-DAX, Ext4</p>
    <p>NVM Write Delay Simulation  ndelay() after clflush</p>
    <p>Benchmarks  Micro-benchmarks: 100 iterations of 104 create/unlink/mkdir/rmdir  Filebench and Postmark</p>
  </div>
  <div class="page">
    <p>create unlink mkdir rmdir</p>
    <p>La te nc y (u s/ op</p>
    <p>)</p>
    <p>Ext4 Ext4-DAX PMFS NOVA SoupFS</p>
    <p>Micro-benchmark Latency</p>
    <p>Inefficient Directory Organization</p>
    <p>Lowest Latency</p>
    <p>CD F</p>
    <p>Latency (us)</p>
    <p>EXT4 Ext4-DAX PMFS NOVA SoupFS</p>
  </div>
  <div class="page">
    <p>La te nc y( us )</p>
    <p>Delay (ns)</p>
    <p>Create</p>
    <p>NOVA SoupFS</p>
    <p>La te nc y (u s)</p>
    <p>Delay (ns)</p>
    <p>Unlink</p>
    <p>PMFS</p>
    <p>NOVA</p>
    <p>SoupFS</p>
    <p>Sensitivity to NVM Write Delay</p>
    <p>No effect</p>
    <p>PMFS</p>
    <p>~200%</p>
    <p>~250%</p>
  </div>
  <div class="page">
    <p>Read Write</p>
    <p>Th ro ug hp</p>
    <p>ut (M</p>
    <p>B/ s)</p>
    <p>Postmark Ext4 Ext4-DAX PMFS NOVA SoupFS</p>
    <p>Postmark &amp; Filebench</p>
    <p>~50%</p>
    <p>Th ro ug hp</p>
    <p>ut (x 10</p>
    <p>Threads</p>
    <p>Fileserver-1K Ext4 Ext4-DAX PMFS NOVA SoupFS</p>
  </div>
  <div class="page">
    <p>Overview Background Design &amp; Implementation  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion  Soft updates is complicated due to the mismatch between</p>
    <p>per-pointer-based dependency tracking and block-based interface of traditional disks</p>
    <p>We design and implement SoupFS  Hashtable-based directories  Pointer-based dual views  Semantic-aware dependency tracking/enforcement</p>
    <p>Soft updates can be made simple and fast on NVM</p>
    <p>Thanks &amp; Questions? ;-)</p>
  </div>
</Presentation>
