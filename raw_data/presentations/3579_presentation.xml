<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CONFIRM: EVALUATING COMPATIBILITY AND RELEVANCE OF</p>
    <p>CONTROL-FLOW INTEGRITY PROTECTIONS FOR MODERN SOFTWARE</p>
    <p>Supported in part by:</p>
    <p>ONR award N00014-17-2995,</p>
    <p>DARPA award FA8750-19- C-0006,</p>
    <p>NSF awards #1513704 and #1834215,</p>
    <p>and an NSF I/UCRC Award from Lockheed Martin</p>
    <p>Any opinions, findings, conclusions, or recommendations expressed in this presentation are those of the author(s) and do not</p>
    <p>necessarily reflect the views of the ONR, DARPA, NSF, or Lockheed Martin.</p>
    <p>XIAOYANG XU, MASOUD GHAFFARINIA,</p>
    <p>WENHAO WANG, AND KEVIN W. HAMLEN</p>
    <p>THE UNIVERSITY OF TEXAS AT DALLAS</p>
    <p>ZHIQIANG LIN</p>
    <p>THE OHIO STATE UNIVERSITY</p>
  </div>
  <div class="page">
    <p>Compiler-based CFI</p>
    <p>transformation</p>
    <p>C o m</p>
    <p>p ile</p>
    <p>r</p>
    <p>Source-agnostic CFI</p>
    <p>transformation</p>
    <p>Control-Flow Integrity [M. Abadi, M. Budiu, . Erlingsson, and J. Ligatti; CCS05. ]</p>
    <p>Source</p>
    <p>code</p>
    <p>Binary</p>
    <p>code</p>
    <p>CFI instrumented</p>
    <p>binary code Control-flow</p>
    <p>graph policies</p>
  </div>
  <div class="page">
    <p>CFI Research Timeline 3</p>
    <p>SFI [Wahbe et al.]</p>
    <p>Prog. Shepherding [Kiriansky]</p>
    <p>ExecShield [van de Ven &amp; Moinar]</p>
    <p>CFI [Abadi et al.]</p>
    <p>XFI [Erlingsson et al.]</p>
    <p>PittSFIeld [McCamant &amp; Morrisett]</p>
    <p>NaCl [Yee et al.] Hypersafe [Wang &amp; Jiang]</p>
    <p>CFLocking [Bletsch et al.]</p>
    <p>MIP [Niu &amp; Tan]</p>
    <p>kBouncer [Pappas et al.]</p>
    <p>CFRestrictor [Pewny &amp; Holz]</p>
    <p>CCFIR [Zhang et al.]</p>
    <p>MoCFI [Davi et al.]</p>
    <p>Reins [Wartell et al.]</p>
    <p>STIR [Wartell et al.]</p>
    <p>ROPecker [Cheng et al.]</p>
    <p>KCoFI [Criswell et al.]</p>
    <p>SafeDispatch [Jang et al.]</p>
    <p>T-VIP [Gawlik]</p>
    <p>RockJIT [Niu &amp; Tan]</p>
    <p>VTV [Tice et al.]</p>
    <p>MCFI [Niu &amp; Tan]</p>
    <p>IFCC [Tice et al.]</p>
    <p>C-CFI [Mashtizadeh et al.]</p>
    <p>vfGuard [Prakash et al.]</p>
    <p>VTint [Zhang et al.]</p>
    <p>PathArmor [van der Veen]</p>
    <p>CFIGuard [Yuan et al.]</p>
    <p>Microsoft CFG</p>
    <p>CFI [Niu &amp; Tan]</p>
    <p>LLVM CFI</p>
    <p>Lockdown [Payer et al.]</p>
    <p>VTI [Bounov et al.]</p>
    <p>Kernel CFI [Ge et al.]</p>
    <p>TypeArmor [van der Veen]</p>
    <p>VTrust [Zhang et al.]</p>
    <p>VTPin [Sarbinowski et al.]</p>
    <p>vCFI [Li et al.]</p>
    <p>RAGuard [Zhang et al.]</p>
    <p>ECFI [Abbasi et al.]</p>
    <p>PT-CFI [Gu et al.]</p>
    <p>PittyPat [Ding et al.]</p>
    <p>OFI [Wang et al.]</p>
    <p>CFI [Muntean et al.]</p>
    <p>VM-CFI [Kwon et al.]</p>
    <p>LPCFI [Barbar et al.]</p>
    <p>CFIXX [Burow et al.]</p>
    <p>LEA-CFI [Qiu et al.]</p>
    <p>uCFI [Hu et al.]</p>
    <p>CFI: Precision, Security, and Performance [Burow et al., CSUR17]</p>
  </div>
  <div class="page">
    <p>Scalability Gap 4</p>
    <p>Desktop OS Market Share (2019-07)</p>
    <p>Windows Linux MacOS Other</p>
    <p>Top 10 Security Vulnerabilities Exploited by Hackers in 2018</p>
    <p>CFI Research Papers (2005-2018 )</p>
    <p>Windows Linux Other</p>
    <p>*Papers containing at least one experiment where at least one COMPLETE non-benchmark application for the indicated OS was rewritten &amp; secured</p>
    <p>Windows/MacOS in mission-critical environments</p>
    <p>About 75% of control systems are on Windows XP or other nonsupported OSes. Daryl Haegley, Office of Assistant Secretary of Defense for Energy, Installations and Environment</p>
    <p>More than 25% of all government computers currently run an outdated Windows or MacOS operating system. [BitSight, 6/1/17]</p>
    <p>DHS, Coast Guard, and Secret Service currently store top secret information on outdated Windows 2003 servers. [OIG-18-56, 3/1/18]</p>
    <p>Hundreds of satellites run Windows 95 and/or are controlled by Windows Mobile devices.</p>
  </div>
  <div class="page">
    <p>Why are the limitations? 5</p>
    <p>Compatibility of CFI solutions are</p>
    <p>under-studied</p>
    <p>CFI implementations are commonly</p>
    <p>evaluated in terms of performance and</p>
    <p>security</p>
    <p>CPU benchmarks are widely adopted</p>
    <p>for CFI evaluation</p>
    <p>A systematic study for CFI</p>
    <p>compatibility problems</p>
    <p>A new testing suite designed</p>
    <p>specifically for CFI evaluation</p>
    <p>CONFIRM (CONtrol-Flow Integrity Relevance Metrics)</p>
    <p>GoalsOur solution: CONFIRM</p>
    <p>A set of 20 widespread classes of</p>
    <p>compatibility problems identified</p>
    <p>The first testing suite designed specifically</p>
    <p>for CFI solution evaluation</p>
    <p>Reevaluation of 12 CFI implementations</p>
    <p>These CFI implementations pass 53% of</p>
    <p>CONFIRMs compatibility and security tests</p>
    <p>Correlation with CPU benchmarks</p>
    <p>Problems</p>
    <p>https://github.com/SoftwareLanguagesSecurityLab/Confirm</p>
  </div>
  <div class="page">
    <p>Compatibility Problem Real-world Software Examples</p>
    <p>Function Pointers 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Callbacks 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Dynamic Linking 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Delay-Loading Adobe Reader, Calculator, Chrome, Firefox, JVM, MS Paint, MS Powerpoint,</p>
    <p>Exporting/Importing Data Symbols 7-Zip, Apache, Calculator, Chrome, Dropbox, Firefox, MS Paint, MS Powerpoint,</p>
    <p>Virtual Functions 7-Zip, Adobe Reader, Calculator, Chrome, Dropbox, Firefox, JVM, Notepad,</p>
    <p>Writable Vtables programs with UIs based on GTK+ (Linux) or COM (Windows)</p>
    <p>Tail Calls programs compiled with tail-call optimization (e.g., -O2 or /O2)</p>
    <p>Switch-Case Statements 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Returns almost every benign program</p>
    <p>Unmatched Call/Return Pairs Adobe Reader, Apache, Chrome, Firefox, JVM, MS PowerPoint, Visual Studio,</p>
    <p>Exceptions 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Calling Conventions almost every program has functions</p>
    <p>Multithreading 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>TLS Callbacks Adobe Reader, Chrome, Firefox, MS Paint, TeXstudio, UPX</p>
    <p>Position-Independent Code 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Memory Management 7-Zip, Adobe Reader, Apache, Chrome, Dropbox, Firefox, MS PowerPoint,</p>
    <p>JIT Code Adobe Flash, Chrome, Dropbox, Firefox, JVM, MS PowerPoint, PotPlayer,</p>
    <p>Self-Unpacking programs decompressed by self-extractors (e.g., UPX, NSIS)</p>
    <p>Runtime API Hooking Microsoft Office, including MS Excel, MS PowerPoint, etc.</p>
  </div>
  <div class="page">
    <p>ConFIRM: Control-Flow Integrity Relevance Metrics 7</p>
  </div>
  <div class="page">
    <p>A Compatibility Problem Example  Returns 8</p>
    <p>Source Code</p>
    <p>Assembly Code</p>
    <p>CFI Hardened Assembly Code</p>
  </div>
  <div class="page">
    <p>Source Code</p>
    <p>int main() { f(); return 0;</p>
    <p>}</p>
    <p>void f() { try {</p>
    <p>g(); } catch (int e) { // Exception handler code } return;</p>
    <p>}</p>
    <p>void g() { h(); return;</p>
    <p>}</p>
    <p>void h() { throw 3; return;</p>
    <p>}</p>
    <p>Stack</p>
    <p>EIP</p>
    <p>Return address to previous function TOP</p>
    <p>Return address from f to main</p>
    <p>Return address from g to f</p>
    <p>Return address from h to g</p>
    <p>Stack</p>
    <p>unwinding</p>
    <p>Shadow Stack</p>
    <p>Return address to previous function TOP</p>
    <p>Return address from f to main</p>
    <p>Return address from g to f</p>
    <p>Return address from h to g</p>
    <p>Some shadow stack</p>
    <p>implementations are</p>
    <p>based on traditional</p>
    <p>call/return matching</p>
    <p>POLICY VIOLATION:</p>
    <p>return address on the stack</p>
    <p>return address on the</p>
    <p>shadow stack</p>
    <p>Another Compatibility Problem Example  Unmatched Call/Return Pairs</p>
    <p>int main() {</p>
    <p>void f() {</p>
    <p>void g() {</p>
    <p>void h() { throw 3;</p>
    <p>return;</p>
  </div>
  <div class="page">
    <p>Compatibility Metric Real-world Software Examples</p>
    <p>Function Pointers 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Callbacks 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Dynamic Linking 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Delay-Loading Adobe Reader, Calculator, Chrome, Firefox, JVM, MS Paint, MS Powerpoint,</p>
    <p>Exporting/Importing Data Symbols 7-Zip, Apache, Calculator, Chrome, Dropbox, Firefox, MS Paint, MS Powerpoint,</p>
    <p>Virtual Functions 7-Zip, Adobe Reader, Calculator, Chrome, Dropbox, Firefox, JVM, Notepad,</p>
    <p>Writable Vtables programs with UIs based on GTK+ (Linux) or COM (Windows)</p>
    <p>Tail Calls programs compiled with tail-call optimization (e.g., -O2 or /O2)</p>
    <p>Switch-Case Statements 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Returns almost every benign program</p>
    <p>Unmatched Call/Return Pairs Adobe Reader, Apache, Chrome, Firefox, JVM, MS PowerPoint, Visual Studio,</p>
    <p>Exceptions 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Calling Conventions almost every program has functions</p>
    <p>Multithreading 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>TLS Callbacks Adobe Reader, Chrome, Firefox, MS Paint, TeXstudio, UPX</p>
    <p>Position-Independent Code 7-Zip, Adobe Reader, Apache, Calculator, Chrome, Dropbox, Firefox, JVM,</p>
    <p>Memory Management 7-Zip, Adobe Reader, Apache, Chrome, Dropbox, Firefox, MS PowerPoint,</p>
    <p>JIT Code Adobe Flash, Chrome, Dropbox, Firefox, JVM, MS PowerPoint, PotPlayer,</p>
    <p>Self-Unpacking programs decompressed by self-extractors (e.g., UPX, NSIS)</p>
    <p>Runtime API Hooking Microsoft Office, including MS Excel, MS PowerPoint, etc.</p>
  </div>
  <div class="page">
    <p>Cross-Thread Stack-Smashing Attack 11</p>
    <p>Thread 1 (malicious)</p>
    <p>Thread 2 (CFI instrumented)</p>
    <p>TOCTOU</p>
    <p>window</p>
  </div>
  <div class="page">
    <p>ConFIRM: Control-Flow Integrity Relevance Metrics 12</p>
  </div>
  <div class="page">
    <p>CFI Performance Measurement Problems 13</p>
  </div>
  <div class="page">
    <p>Conclusions 14</p>
    <p>Compatibility of CFI solutions are under-studied</p>
    <p>Complicated compatibility problems lurking in large COTS software products</p>
    <p>CFI implementations are commonly evaluated in terms of performance and security using CPU benchmarks.</p>
    <p>Proposed solution: CONFIRM</p>
    <p>A set of 20 CFI-relevant compatibility problems</p>
    <p>The first testing suite designed specifically for CFI solution evaluation</p>
    <p>Reevaluation of 12 CFI implementations</p>
    <p>Correlation with SPEC CPU benchmarks</p>
    <p>https://github.com/SoftwareLanguagesSecurityLab/Confirm</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
    <p>Supported in part by:</p>
    <p>ONR award N00014-17-2995,</p>
    <p>DARPA award FA8750-19- C-0006,</p>
    <p>NSF awards #1513704 and #1834215,</p>
    <p>and an NSF I/UCRC Award from Lockheed Martin</p>
    <p>Any opinions, findings, conclusions, or recommendations expressed in this presentation are those of the author(s) and do not</p>
    <p>necessarily reflect the views of the ONR, DARPA, NSF, or Lockheed Martin.</p>
    <p>https://github.com/SoftwareLanguagesSecurityLab/Confirm</p>
  </div>
</Presentation>
