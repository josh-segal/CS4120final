<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Good randomness is hard to find</p>
    <p>XKCD</p>
  </div>
  <div class="page">
    <p>Games for Extracting Randomness</p>
    <p>Weizmann Institute of Science</p>
    <p>Israel</p>
    <p>Moni Naor</p>
    <p>Ran Halprin</p>
    <p>SOUPS, July 2009</p>
  </div>
  <div class="page">
    <p>Good randomness is hard to find</p>
    <p>Randomness: necessary in many computational tasks</p>
    <p>Especially in Cryptography!Especially in Cryptography!</p>
    <p>Randomness Generation - major point-of-failure in cryptography applications:</p>
    <p>The Debian Linux kernel (used in the Ubuntu distribution)</p>
    <p>Removed a refresh command, leaving only PID  Generated only 215 unique keys from 2006 to 2008</p>
  </div>
  <div class="page">
    <p>Sources of Randomness  Secret data: Network Card ID, Processor ID</p>
    <p>etc.  Adversary may have had access to hardware</p>
    <p>Real time data: HD access, click times, mouse positions</p>
    <p>HD doesnt always exist (PDAs, SSD Disks.)  System might not be in direct use</p>
    <p>Physical sources: Lava lamps, cloud patterns, atmospheric noise</p>
    <p>Can be manipulated (even by accident) or copied  Cumbersome and expensive</p>
    <p>User Request: please hit many keys, please swish mouseNot necessarily terrible. This work  mostly complementary</p>
    <p>QWERTY effect Keyboard buffer fills quickly</p>
  </div>
  <div class="page">
    <p>It is Only Human to be Biased</p>
    <p>Sequences and numbers generated by humans are far from being truly random  Problem: humans are notoriously bad at</p>
    <p>supplying randomness upon request  Humans randomness recognition is biased  Similar results in randomness generation  Humans assess human-generated randomness as</p>
    <p>more random than statistically good randomness</p>
    <p>Think of a number between 1 and 10  Think of a number between 1 and 20</p>
    <p>7?</p>
    <p>17?</p>
    <p>Hot Hand Gamblers fallacy Flip Bias</p>
    <p>Idea: use humans actions in a game as a source!</p>
  </div>
  <div class="page">
    <p>Why Games? 1. The competitive nature of the game makes</p>
    <p>humans act more randomly when playing games  Compare: when just asked to act randomly  Demonstrated in an experiment by Rapoport and</p>
    <p>Budescu 1992.</p>
    <p>Participate in the process  Supply more data.</p>
    <p>Von Ahns Games with a purpose</p>
  </div>
  <div class="page">
    <p>Matching Pennies</p>
    <p>Winne r!</p>
    <p>Player 1 (misleader) Wins on or</p>
    <p>Player 2 (guesser) Wins on or</p>
    <p>zero-sum mixed strategy game</p>
  </div>
  <div class="page">
    <p>Experiments in Psychology [RB92]</p>
    <p>Humans behave more randomly  when playing Matching Pennies  Than when asked to generate a</p>
    <p>sequence  Humans play against each other</p>
    <p>Look at a players moves  Black is 0, Red is 1</p>
    <p>Results in binary sequences (one for each player)  Consider tuples (2-tuples, 3-tuples, 4</p>
    <p>tuples)110011001001101110101</p>
    <p>Count how many appearances of each, detect sequential dependencies</p>
  </div>
  <div class="page">
    <p>Experiments in Psychology</p>
    <p>All four identical: 9.2%</p>
    <p>Alternations 15%</p>
    <p>All four identical: 5.2%</p>
    <p>Alternations: 19.9%</p>
    <p>Both expected 12.5%</p>
  </div>
  <div class="page">
    <p>But is it good enough?</p>
    <p>Still not quite random</p>
    <p>Only a single bit is generated</p>
    <p>Can apply extractors Combinatorial tool allowing us to smooth the randomness</p>
    <p>Crypto needs many bits to bootstrap  say 128 Need games where more bits are generated per round</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>The idea of using games to induce randomness for crypto</p>
    <p>Suggest a particular game Mice and Elephants  Test it</p>
    <p>Suggest how to incorporate randomness extraction from games into a system  Robust Pseudo-Random Generator  OS Independent</p>
  </div>
  <div class="page">
    <p>Games Used for Extraction: Desiderata</p>
    <p>Encourages players it to use strategy with high min-entropy</p>
    <p>There exists a way to bound from below the min entropy used by the player in an observed interaction Measurement of randomness</p>
  </div>
  <div class="page">
    <p>More Desiderata  Fun: Should be at least somewhat interesting</p>
    <p>Entertain players long enough so that they will willingly play enough to produce long sequences.</p>
    <p>Easy: not require extensive skills from the players</p>
    <p>Should be reasonably short  Should not require no expensive or large</p>
    <p>hardware  high resolution screen or a fast processor</p>
  </div>
  <div class="page">
    <p>Who is Our Adversary?  The user is not malicious</p>
    <p>Lazy?  Incompetent?  But not actively trying to subvert the system</p>
    <p>There is an external adversary and we are trying to protect the user from it  Generate a long and robust pseudo-random</p>
    <p>sequence</p>
    <p>There is a second chance to check the user</p>
  </div>
  <div class="page">
    <p>Hide and Seek</p>
    <p>n</p>
    <p>21</p>
    <p>Hider (Mislead er(</p>
    <p>Seeker (Guess er)</p>
  </div>
  <div class="page">
    <p>Hide and Seek</p>
    <p>n</p>
    <p>21</p>
  </div>
  <div class="page">
    <p>Hide and Seek  Natural extension of Matching Pennies</p>
    <p>Zero sum  Mixed Strategy</p>
    <p>Game produces log2(n) bits of raw data per move</p>
    <p>But how random is this data?  Estimate empirically</p>
  </div>
  <div class="page">
    <p>Mice and Elephant</p>
    <p>Human positions r mice  Computer positions elephant  Repeat until a mouse is crushed</p>
  </div>
  <div class="page">
    <p>Mice and Elephant</p>
    <p>Obstacles positioned at most popular locations - Lowers repetition rate - Adds visual interest</p>
  </div>
  <div class="page">
    <p>Elephant and obstacle positions  Usually randomly copy a recently played move  Occasionally random</p>
    <p>Human cannot predict even a bad PRG!  Adversary can know computer randomness  Doesnt help much in determining the humans</p>
    <p>moves</p>
    <p>Each pixel - a cell in the grid. Board: 512 x 256 pixels  Derives log2512 + log2256 = 17 bits of raw data</p>
    <p>per click</p>
    <p>Mice and Elephant</p>
  </div>
  <div class="page">
    <p>Min-Entropy Probability distribution X over {0,1}n</p>
    <p>H1(X) = - log maxx Pr[X = x]</p>
    <p>X is a k-source if H1(X)  k i.e., Pr[X = x]  2 -k</p>
    <p>for all x</p>
    <p>Represents the probability of the most likely value of X</p>
    <p>(X,Y) = a |Pr[X=a]  Pr[Y=a]|</p>
    <p>Statistical distance of distributions:</p>
    <p>Example:  Un  uniform distribution on {0,1}</p>
    <p>n</p>
    <p>H1(Un) = n</p>
    <p>H1(X) = min{log 2, log 4, log 8} = 1</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>Extractors Universal procedure for purifying an imperfect source</p>
    <p>Definition:</p>
    <p>Ext: {0,1}n  {0,1}d ! {0,1} is a (k,)extractor if for every k-source X result is close to random</p>
    <p>(Ext(X, Ud), U)</p>
    <p>d random bits seed</p>
    <p>EXT</p>
    <p>k-source of length n</p>
    <p>almost-uniform bits</p>
    <p>x</p>
    <p>s</p>
    <p>Strong: output close to random even after seeing the seed</p>
  </div>
  <div class="page">
    <p>Results: Humans playing patterns</p>
    <p>Tested 482 players, who played a total of 24,008 clicks</p>
    <p>Recruited mostly online  Did not know experiments</p>
    <p>objective  Clear bias for corners and</p>
    <p>edges  But maximal represented</p>
    <p>point has only 7 clicks  If each click is</p>
    <p>independent: min-entropy ~11.7 per click</p>
    <p>However, humans are not stateless distributions</p>
  </div>
  <div class="page">
    <p>Results: Humans playing patterns</p>
    <p>First order difference (log scale)  Clear preference for nearby region and axis of previous</p>
    <p>click  Maximal represented point  24. Estimated min-entropy is</p>
    <p>~9.96 per click</p>
  </div>
  <div class="page">
    <p>How to use the game  When entropy is needed - start a game  Repeat play until sufficient entropy is</p>
    <p>gathered  At least according to an estimate  Award points according to game</p>
    <p>Detect bad entropy moves  Have a dynamic score to punish such</p>
    <p>moves</p>
    <p>Second Chance</p>
  </div>
  <div class="page">
    <p>Robust PRG:  A Cryptographic Pseudo Random Generator  next() with an outputs a block  refresh() that gets fresh entropy, and an</p>
    <p>refreshes state</p>
    <p>Robust Pseudo-Random Generators</p>
    <p>[Barak-Halevi 05]</p>
    <p>next()</p>
    <p>Output 1</p>
    <p>State1 State2 refresh()</p>
    <p>entro py</p>
    <p>state3next()</p>
    <p>Output 2</p>
    <p>State3</p>
    <p>EXT</p>
  </div>
  <div class="page">
    <p>Forward secure  Backward secure  Immune to adversary control of entropy  Can combine different entropy sources</p>
    <p>Strongest link triumphs</p>
    <p>Robust Pseudo-Random Generators</p>
    <p>[Barak-Halevi 05]</p>
    <p>next()</p>
    <p>Output 1</p>
    <p>State1 State2 refresh()</p>
    <p>entro py</p>
    <p>state3next()</p>
    <p>Output 2</p>
    <p>State3</p>
    <p>EXT</p>
    <p>After break-in: past outputs of the system should still be indistinguishable from random</p>
    <p>After break-in, following the next refresh all outputs should be indistinguishable from random</p>
  </div>
  <div class="page">
    <p>A Complete Construction</p>
  </div>
  <div class="page">
    <p>A Complete Construction</p>
  </div>
  <div class="page">
    <p>Further Work and Open Problems</p>
    <p>Comparison to non-game inputs  Different games:</p>
    <p>anti-ESP game  Camera, accelerometer games</p>
    <p>Different populations  Complete system test  Human accuracy and Fitts law</p>
    <p>Thank You</p>
    <p>Non-gamers casual gamers heavy gamers</p>
  </div>
  <div class="page">
    <p>Good randomness is hard to find</p>
    <p>XKCD</p>
  </div>
</Presentation>
