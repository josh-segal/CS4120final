<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>VERIFICATION MEETS ALGORITHM ENGINEERING</p>
    <p>The Low-Level Bounded Model Checker LLBMC A Precise Memory Model for LLBMC</p>
    <p>Carsten Sinz Stephan Falke Florian Merz | October 7, 2010</p>
    <p>KIT  University of the State of Baden-Wuerttemberg and</p>
    <p>National Research Center of the Helmholtz Association</p>
    <p>www.kit.edu</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Buffer overflows are still the number one issue as reported in OS vendor advisories. (. . . ) Integer overflows, barely in the top ten overall in the past few years, are number two for OS vendor advisories (in 2006), behind buffer overflows</p>
    <p>Use-after-free vulnerability in Microsoft Internet Explorer (. . . ) allows remote attackers to execute arbitrary code by accessing a pointer associated with a deleted object (. . . )</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 2/19</p>
  </div>
  <div class="page">
    <p>What is LLBMC?</p>
    <p>LLBMC = Low-Level (Software) Bounded Model Checking Low-Level: Not operating on source code but on abstract assembler Software: Programs written in C/C++/Objective C and compiled into abstract assembler Bounded: restricted number of nested function calls and loop iterations Model Checking: bit-precise static analysis</p>
    <p>Properties checked: Built-in properties: invalid memory accesses, use-after-free, double free, range overflow, division by zero, . . . User-supplied properties: assert statements</p>
    <p>Focus on memory properties</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 3/19</p>
  </div>
  <div class="page">
    <p>Software Bounded Model Checking</p>
    <p>Programs typically deal with unbounded data structures such as linked lists, trees, etc.</p>
    <p>Property checking is undecidable for these programs</p>
    <p>Bugs manifest themselves in (typically short) finite runs of the program Software bounded model checking:</p>
    <p>Analyze only bounded program runs Restrict number of nested function calls and inline functions Restrict number of loop iterations and unroll loops</p>
    <p>Data structures are then bounded as well Property checking becomes decidable by a logical encoding into SAT or SMT</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 4/19</p>
  </div>
  <div class="page">
    <p>Specifying and Verifying Properties</p>
    <p>Properties are formalized using assume and assert statements assume states a pre-condition that is assumed to hold at its location assert states a post-condition that is to be checked at its location</p>
    <p>The program Prog is correct if</p>
    <p>Prog</p>
    <p>assume</p>
    <p>assert</p>
    <p>is valid</p>
    <p>In software bounded model checking, this can be decided using a logical encoding and a SAT or SMT solver</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 5/19</p>
  </div>
  <div class="page">
    <p>Low Level Bounded Model Checking</p>
    <p>Fully supporting real-life programming languages is cumbersome</p>
    <p>Particularly true for C/C++/Objective C due to their complex (sometimes ambiguous) semantics Key idea: Do not operate on the source code directly, use a compiler intermediate language (abstract assembler) instead</p>
    <p>Well-defined, simple semantics makes logical encoding easier Closer to the code that is actually run Compiler optimizations etc. come for free</p>
    <p>LLBMC uses the LLVM intermediate language and compiler infrastructure</p>
    <p>After the logical encoding, LLBMC uses the SMT solver Boolector (theory of bitvectors and arrays)</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 6/19</p>
  </div>
  <div class="page">
    <p>Overview of the LLBMC Approach</p>
    <p>Program Source Code</p>
    <p>Abstract Assembler</p>
    <p>Representation Bit-Vector Logic</p>
    <p>with Arrays Verification</p>
    <p>Result / Error Trace</p>
    <p>LLVM Compiler Frontend</p>
    <p>Transformed Assembler</p>
    <p>Representation</p>
    <p>Loop Unrolling / Function Inlining Logical Encoding SMT Solver</p>
    <p>Memory Model</p>
    <p>Memory model captures the semantics of memory accesses</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 7/19</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>s t r u c t S { i n t x ; s t r u c t S n ;</p>
    <p>};</p>
    <p>i n t main ( i n t argc , char a r g v [ ] ) { s t r u c t S p , q ;</p>
    <p>p = m a l l o c ( s i z e o f ( s t r u c t S ) ) ; p&gt;x = 5 ; p&gt;n = NULL ;</p>
    <p>i f ( a r g c &gt; 1 ) { q = m a l l o c ( s i z e o f ( s t r u c t S ) ) ; q&gt;x = 5 ; q&gt;n = p ;</p>
    <p>} e l s e { q = p ;</p>
    <p>}</p>
    <p>l l b m c a s s e r t ( p&gt;x + q&gt;x == 1 0 ) ;</p>
    <p>f r e e ( q ) ; f r e e ( p ) ;</p>
    <p>r e t u r n 0 ; }</p>
    <p>%s t r u c t . S = t y p e { i 3 2 , %s t r u c t . S }</p>
    <p>d e f i n e i 3 2 @main ( i 3 2 %argc , i 8 %a r g v ) { e n t r y :</p>
    <p>%0 = c a l l i 8 @malloc ( i 3 2 8 ) %p = b i t c a s t i 8 %0 t o %s t r u c t . S %p . x = g e t e l e m e n t p t r %s t r u c t . S %p , i 3 2 0 , i 3 2 0 s t o r e i 3 2 5 , i 3 2 %p . x %p . n = g e t e l e m e n t p t r %s t r u c t . S %p , i 3 2 0 , i 3 2 1 s t o r e %s t r u c t . S n u l l , %s t r u c t . S %p . n %c . 1 = icmp s g t i 3 2 %argc , 1 b r i 1 %c . 1 , l a b e l % i f . then , l a b e l % i f . end</p>
    <p>i f . t h e n : %1 = c a l l i 8 @malloc ( i 3 2 8 ) %q = b i t c a s t i 8 %1 t o %s t r u c t . S %q . x = g e t e l e m e n t p t r %s t r u c t . S %q , i 3 2 0 , i 3 2 0 s t o r e i 3 2 5 , i 3 2 %q . x %q . n = g e t e l e m e n t p t r %s t r u c t . S %q , i 3 2 0 , i 3 2 1 s t o r e %s t r u c t . S %p , %s t r u c t . S %q . n b r l a b e l % i f . end</p>
    <p>i f . end : %q . 0 = p h i %s t r u c t . S [ %q , % i f . t h e n ] , [ %p , %e n t r y ] %q . 0 . x = g e t e l e m e n t p t r %s t r u c t . S %q . 0 , i 3 2 0 , i 3 2 0 %2 = l o a d i 3 2 %p . x %3 = l o a d i 3 2 %q . 0 . x %4 = add i 3 2 %2, %3 %c . 2 = icmp eq i 3 2 %4, 10 %5 = z e x t i 1 %c . 2 t o i 3 2 c a l l v o i d @ l l b m c a s s e r t ( i 3 2 %5) %6 = b i t c a s t %s t r u c t . S %q . 0 t o i 8 c a l l v o i d @free ( i 8 %6) %7 = b i t c a s t %s t r u c t . S %p t o i 8 c a l l v o i d @free ( i 8 %7) r e t i 3 2 0</p>
    <p>}</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 8/19</p>
  </div>
  <div class="page">
    <p>Encoding of phi-Instructions</p>
    <p>The abstract assembler contains phi-instructions of the form</p>
    <p>i = phi[i1, bb1], . . . , [in, bbn]</p>
    <p>where bb1, . . . , bbn are basic blocks</p>
    <p>For the logical encoding, bbj is replaced by</p>
    <p>cexec(bbj ) t(bbj , b)</p>
    <p>where cexec(bbj ) is bbj s execution condition b is the basic block containing the phi-instruction t(bbj , b) is the condition under which control passes from bbj to b</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 9/19</p>
  </div>
  <div class="page">
    <p>Elimination of branches</p>
    <p>The memory can be modelled as an array of bytes SSA form for the memory by introducing an abstract type memstate:</p>
    <p>Memory is accessed using read-instructions Memory is changed using write-, malloc-, and free-instructions phi-instructions for memory states are introduced</p>
    <p>With the encoding of phi-instructions and the conversion of the memory to SSA form branches can be eliminated</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 10/19</p>
  </div>
  <div class="page">
    <p>Example %s t r u c t . S = t y p e { i 3 2 , %s t r u c t . S }</p>
    <p>d e f i n e i 3 2 @main ( i 3 2 %argc , i 8 %a r g v ) { e n t r y :</p>
    <p>%0 = c a l l i 8 @malloc ( i 3 2 8 ) %p = b i t c a s t i 8 %0 t o %s t r u c t . S %p . x = g e t e l e m e n t p t r %s t r u c t . S %p , i 3 2 0 , i 3 2 0 s t o r e i 3 2 5 , i 3 2 %p . x %p . n = g e t e l e m e n t p t r %s t r u c t . S %p , i 3 2 0 , i 3 2 1 s t o r e %s t r u c t . S n u l l , %s t r u c t . S %p . n %c . 1 = icmp s g t i 3 2 %argc , 1 b r i 1 %c . 1 , l a b e l % i f . then , l a b e l % i f . end</p>
    <p>i f . t h e n : %1 = c a l l i 8 @malloc ( i 3 2 8 ) %q = b i t c a s t i 8 %1 t o %s t r u c t . S %q . x = g e t e l e m e n t p t r %s t r u c t . S %q , i 3 2 0 , i 3 2 0 s t o r e i 3 2 5 , i 3 2 %q . x %q . n = g e t e l e m e n t p t r %s t r u c t . S %q , i 3 2 0 , i 3 2 1 s t o r e %s t r u c t . S %p , %s t r u c t . S %q . n b r l a b e l % i f . end</p>
    <p>i f . end : %q . 0 = p h i %s t r u c t . S [ %q , % i f . t h e n ] , [ %p , %e n t r y ] %q . 0 . x = g e t e l e m e n t p t r %s t r u c t . S %q . 0 , i 3 2 0 , i 3 2 0 %2 = l o a d i 3 2 %p . x %3 = l o a d i 3 2 %q . 0 . x %4 = add i 3 2 %2, %3 %c . 2 = icmp eq i 3 2 %4, 10 %5 = z e x t i 1 %c . 2 t o i 3 2 c a l l v o i d @ l l b m c a s s e r t ( i 3 2 %5) %6 = b i t c a s t %s t r u c t . S %q . 0 t o i 8 c a l l v o i d @free ( i 8 %6) %7 = b i t c a s t %s t r u c t . S %p t o i 8 c a l l v o i d @free ( i 8 %7) r e t i 3 2 0</p>
    <p>}</p>
    <p>s t r u c t . S = s t r u c t { i 3 2 , s t r u c t . S }</p>
    <p>memstate %mem0 i 8 %0 memstate %mem1 = m a l l o c (%mem0, %0, 8 ) s t r u c t . S %p = b i t c a s t (%0) i 3 2 %p . x = g e t e l e m e n t p t r (%p , 0 , 0 ) memstate %mem2 = s t o r e (%mem1, %p . x , 5 ) s t r u c t . S %p . n = g e t e l e m e n t p t r (%p , 0 , 1 ) memstate %mem3 = s t o r e (%mem2, %p . n , n u l l ) i 3 2 %a r g c i 1 %c . 1 = %a r g c &gt; 1</p>
    <p>i 8 %1 memstate %mem4 = m a l l o c (%mem3, %1, 8 ) s t r u c t . S %q = b i t c a s t (%1) i 3 2 %q . x = g e t e l e m e n t p t r (%q , 0 , 0 ) memstate %mem5 = s t o r e (%mem4, %q . x , 5 ) s t r u c t . S %q . n = g e t e l e m e n t p t r (%q , 0 , 1 ) memstate %mem6 = s t o r e (%mem5, %q . n , %p )</p>
    <p>memstate %mem7 = p h i ([%mem3, !%c . 1 ] , [%mem6, %c . 1 ] ) s t r u c t . S %q . 0 = p h i ([% p , !%c . 1 ] , [%q , %c . 1 ] ) i 3 2 %q . 0 . x = g e t e l e m e n t p t r (%q . 0 , 0 , 0 ) i 3 2 %2 = l o a d (%mem7, %p . x ) i 3 2 %3 = l o a d (%mem7, %q . 0 . x ) i 3 2 %4 = add (%2 , %3) i 1 %c . 2 = %4 == 10 a s s e r t (%c . 2 ) memstate %mem8 = f r e e (%mem7, %q . 0 ) memstate %mem9 = f r e e (%mem8, %p ) ;</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 11/19</p>
  </div>
  <div class="page">
    <p>Encoding Memory Constraints 1</p>
    <p>The following memory checks are built-in: Valid read/writes (i.e., only to allocated memory) Valid frees (i.e., free is only called for the beginning of a block of allocated memory) No double frees (i.e., no memory block is freed twice)</p>
    <p>Building blocks: valid mem access(m, p, s): the range p, . . . , p + s  1 is allocated in the memory state m deallocated(m, m, p): the block beginning at p is freed between m and m</p>
    <p>. . .</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 12/19</p>
  </div>
  <div class="page">
    <p>Memory Modification Graph</p>
    <p>Example s t r u c t . S = s t r u c t { i 3 2 , s t r u c t . S }</p>
    <p>memstate %mem0 i 8 %0 memstate %mem1 = m a l l o c (%mem0, %0, 8 ) s t r u c t . S %p = b i t c a s t (%0) i 3 2 %p . x = g e t e l e m e n t p t r (%p , 0 , 0 ) memstate %mem2 = s t o r e (%mem1, %p . x , 5 ) s t r u c t . S %p . n = g e t e l e m e n t p t r (%p , 0 , 1 ) memstate %mem3 = s t o r e (%mem2, %p . n , n u l l ) i 3 2 %a r g c i 1 %c . 1 = %a r g c &gt; 1</p>
    <p>i 8 %1 memstate %mem4 = m a l l o c (%mem3, %1, 8 ) s t r u c t . S %q = b i t c a s t (%1) i 3 2 %q . x = g e t e l e m e n t p t r (%q , 0 , 0 ) memstate %mem5 = s t o r e (%mem4, %q . x , 5 ) s t r u c t . S %q . n = g e t e l e m e n t p t r (%q , 0 , 1 ) memstate %mem6 = s t o r e (%mem5, %q . n , %p )</p>
    <p>memstate %mem7 = p h i ([%mem3, !%c . 1 ] , [%mem6, %c . 1 ] ) s t r u c t . S %q . 0 = p h i ([% p , !%c . 1 ] , [%q , %c . 1 ] ) i 3 2 %q . 0 . x = g e t e l e m e n t p t r (%q . 0 , 0 , 0 ) i 3 2 %2 = l o a d (%mem7, %p . x ) i 3 2 %3 = l o a d (%mem7, %q . 0 . x ) i 3 2 %4 = add (%2 , %3) i 1 %c . 2 = %4 == 10 a s s e r t (%c . 2 ) memstate %mem8 = f r e e (%mem7, %q . 0 ) memstate %mem9 = f r e e (%mem8, %p ) ;</p>
    <p>m0</p>
    <p>m1</p>
    <p>m8</p>
    <p>m7</p>
    <p>m6</p>
    <p>m5</p>
    <p>m4</p>
    <p>m3</p>
    <p>m2</p>
    <p>m9</p>
    <p>m1 = malloc(m0, p, 8)</p>
    <p>m2 = store(m1, p, 5)</p>
    <p>m3 = store(m2, pn, NULL)</p>
    <p>m4 = malloc(m3, q, 8)</p>
    <p>m5 = store(m4, q, 5)</p>
    <p>m6 = store(m5, qn, p)</p>
    <p>m8 = free(m7, q0)</p>
    <p>m9 = free(m8, p)</p>
    <p>m7 = phi [m6,c1] [m3, c1]</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 13/19</p>
  </div>
  <div class="page">
    <p>Encoding Memory Constraints 2</p>
    <p>m  m: there exists a path from m to m in the memory modification graph</p>
    <p>cexec(I): execution condition of the (basic block containing the) instruction I</p>
    <p>deallocated(m, m, p)</p>
    <p>mmm I: m= free(m,q)</p>
    <p>cexec(I)  p = q</p>
    <p>valid mem access(m, p, s)</p>
    <p>mm I: m= malloc(m,q,t)</p>
    <p>cexec(I)  (q  p  q + t  s) deallocated(m, m, q)</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 14/19</p>
  </div>
  <div class="page">
    <p>Encoding Memory Constraints 3</p>
    <p>Each m = write(m, p, x) and each x = read(m, p) is preceded by the assertion</p>
    <p>valid mem access(m, p, s)</p>
    <p>where s is the appropriate size</p>
    <p>Similar assertions are added for the other built-in memory checks</p>
    <p>For malloc-instructions, assumptions on disjointness of the allocated memory regions are added</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 15/19</p>
  </div>
  <div class="page">
    <p>Example s t r u c t . S = s t r u c t { i 3 2 , s t r u c t . S } memstate %i n i t i a l M e m S t a t e i 8 %0 i 1 %2 = 0x00000000 &lt;= ( v o i d)%0 i 3 2 %4 = add ( ( i 3 2 )%0 , 7 ) i 1 %6 = 0 x 5 f f f f f f f &gt;= ( v o i d)%4 i 1 %7 = ( v o i d)%0 &lt;= ( v o i d)%4 i 1 %8 = and (%2 , %6) i 1 %9 = and (%8 , %7) assume ( malloc assume , %9, 1 ) memstate %11 = m a l l o c ( heap , %i n i t i a l M e m S t a t e , %0, 8 , 1 ) i 3 2 %p . x = g e t e l e m e n t p t r ( ( s t r u c t . S)%0 , 0 , 0 ) i 1 %13 = 0 x b f f f f f f f &lt; ( v o i d)%p . x i 3 2 %14 = add ( ( i 3 2 )%p . x , 3 ) i 1 %16 = 0 x b f f f f f f f &gt;= ( v o i d)%14 i 1 %17 = and (%13 , %16) i 1 %18 = %0 &lt;= %p . x i 3 2 %19 = add ( ( i 3 2 )%p . x , 4 ) i 3 2 %21 = add ( ( i 3 2 )%0 , 8 ) i 1 %23 = ( v o i d)%19 &lt;= ( v o i d)%21 i 1 %24 = and (%18 , %23) i 1 %25 = o r (%17 , %24) a s s e r t ( v a l i d s t o r e , %25, 1 ) memstate %27 = s t o r e (%11 , %p . x , 5 , 1 ) s t r u c t . S %p . n = g e t e l e m e n t p t r ( ( s t r u c t . S)%0 , 0 , 1 ) i 1 %29 = 0 x b f f f f f f f &lt; ( v o i d)%p . n i 3 2 %30 = add ( ( i 3 2 )%p . n , 3 ) i 1 %32 = 0 x b f f f f f f f &gt;= ( v o i d)%30 i 1 %33 = and (%29 , %32) i 1 %34 = %0 &lt;= %p . n i 3 2 %35 = add ( ( i 3 2 )%p . n , 4 ) i 1 %37 = ( v o i d)%35 &lt;= ( v o i d)%21 i 1 %38 = and (%34 , %37) i 1 %39 = o r (%33 , %38) a s s e r t ( v a l i d s t o r e , %39, 1 ) memstate %41 = s t o r e (%27 , %p . n , 0x00000000 , 1 ) i 3 2 %a r g c i 1 %c . 1 = %a r g c &gt; 1 i 8 %42 i 1 %44 = 0x00000000 &lt;= ( v o i d)%42 i 3 2 %46 = add ( ( i 3 2 )%42 , 7 ) i 1 %48 = 0 x 5 f f f f f f f &gt;= ( v o i d)%46 i 1 %49 = ( v o i d)%42 &lt;= ( v o i d)%46 i 1 %50 = and (%44 , %48) i 1 %51 = and (%50 , %49) i 3 2 %52 = add ( ( i 3 2 )%42 , 8 ) i 1 %54 = ( v o i d)%52 &lt;= ( v o i d)%0 i 1 %55 = ( v o i d)%21 &lt;= ( v o i d)%42 i 1 %56 = o r (%54 , %55) i 1 %57 = and (%51 , %56) assume ( malloc assume , %57, %c . 1 ) memstate %59 = m a l l o c ( heap , %41, %42, 8 , %c . 1 ) i 3 2 %q . x = g e t e l e m e n t p t r ( ( s t r u c t . S)%42 , 0 , 0 ) i 1 %61 = 0 x b f f f f f f f &lt; ( v o i d)%q . x i 3 2 %62 = add ( ( i 3 2 )%q . x , 3 ) i 1 %64 = 0 x b f f f f f f f &gt;= ( v o i d)%62 i 1 %65 = and (%61 , %64) i 1 %66 = %0 &lt;= %q . x i 3 2 %67 = add ( ( i 3 2 )%q . x , 4 ) i 1 %69 = ( v o i d)%67 &lt;= ( v o i d)%21 i 1 %70 = and (%66 , %69) i 1 %71 = %42 &lt;= %q . x i 1 %72 = ( v o i d)%67 &lt;= ( v o i d)%52 i 1 %73 = and (%71 , %72) i 1 %74 = and(%c . 1 , %73) i 1 %75 = o r (%70 , %74) i 1 %76 = o r (%65 , %75) a s s e r t ( v a l i d s t o r e , %76, %c . 1 )</p>
    <p>a s s e r t ( v a l i d s t o r e , %76, %c . 1 ) memstate %78 = s t o r e (%59 , %q . x , 5 , %c . 1 ) s t r u c t . S %q . n = g e t e l e m e n t p t r ( ( s t r u c t . S)%42 , 0 , 1 ) i 1 %80 = 0 x b f f f f f f f &lt; ( v o i d)%q . n i 3 2 %81 = add ( ( i 3 2 )%q . n , 3 ) i 1 %83 = 0 x b f f f f f f f &gt;= ( v o i d)%81 i 1 %84 = and (%80 , %83) i 1 %85 = %0 &lt;= %q . n i 3 2 %86 = add ( ( i 3 2 )%q . n , 4 ) i 1 %88 = ( v o i d)%86 &lt;= ( v o i d)%21 i 1 %89 = and (%85 , %88) i 1 %90 = %42 &lt;= %q . n i 1 %91 = ( v o i d)%86 &lt;= ( v o i d)%52 i 1 %92 = and (%90 , %91) i 1 %93 = and(%c . 1 , %92) i 1 %94 = o r (%89 , %93) i 1 %95 = o r (%84 , %94) a s s e r t ( v a l i d s t o r e , %95, %c . 1 ) memstate %97 = s t o r e (%78 , %q . n , ( s t r u c t . S)%0 , %c . 1 ) v o i d %s t a c k t o p p t r 0 = p h i ( [ 0 x b f f f f f f f , !%c . 1 ] , [ 0 x b f f f f f f f , %c . 1 ] ) memstate % i f . end mem = p h i ( [ % 4 1 , !%c . 1 ] , [%97 , %c . 1 ] ) s t r u c t . S %q . 0 = p h i ( [ ( s t r u c t . S)%0 , !%c . 1 ] , [ ( s t r u c t . S)%42 , %c . 1 ] ) i 3 2 %q . 0 . x = g e t e l e m e n t p t r (%q . 0 , 0 , 0 ) i 1 %98 = %s t a c k t o p p t r 0 &lt; ( v o i d)%p . x i 1 %99 = and (%98 , %16) i 1 %100 = %42 &lt;= %p . x i 1 %101 = ( v o i d)%19 &lt;= ( v o i d)%52 i 1 %102 = and (%100 , %101) i 1 %103 = and(%c . 1 , %102) i 1 %104 = o r (%24 , %103) i 1 %105 = o r (%99 , %104) a s s e r t ( v a l i d l o a d , %105, 1 ) i 3 2 %107 = l o a d (% i f . end mem , %p . x , 1 ) i 1 %109 = %s t a c k t o p p t r 0 &lt; ( v o i d)%q . 0 . x i 3 2 %110 = add ( ( i 3 2 )%q . 0 . x , 3 ) i 1 %112 = 0 x b f f f f f f f &gt;= ( v o i d)%110 i 1 %113 = and (%109 , %112) i 1 %114 = %0 &lt;= %q . 0 . x i 3 2 %115 = add ( ( i 3 2 )%q . 0 . x , 4 ) i 1 %117 = ( v o i d)%115 &lt;= ( v o i d)%21 i 1 %118 = and (%114 , %117) i 1 %119 = %42 &lt;= %q . 0 . x i 1 %120 = ( v o i d)%115 &lt;= ( v o i d)%52 i 1 %121 = and (%119 , %120) i 1 %122 = and(%c . 1 , %121) i 1 %123 = o r (%118 , %122) i 1 %124 = o r (%113 , %123) a s s e r t ( v a l i d l o a d , %124, 1 ) i 3 2 %126 = l o a d (% i f . end mem , %q . 0 . x , 1 ) i 3 2 %127 = add (%107 , %126) i 1 %c . 2 = %127 == 10 i 1 %129 = ( i 8)%q . 0 == %0 i 1 %130 = ( i 8)%q . 0 == %42 i 1 %131 = and(%c . 1 , %130) i 1 %132 = o r (%129 , %131) a s s e r t ( v a l i d f r e e , %132, %c . 2 ) i 1 %134 = %0 == %0 i 1 %135 = %0 == ( i 8)%q . 0 i 1 %136 = and(%c . 2 , %135) i 1 %138 = and (%134 , !%136) i 1 %139 = %0 == %42 i 1 %140 = %42 == ( i 8)%q . 0 i 1 %141 = and(%c . 2 , %140) i 1 %143 = and (%139 , !%141) i 1 %144 = and(%c . 1 , %143) i 1 %145 = o r (%138 , %144) a s s e r t ( v a l i d f r e e , %145, %c . 2 ) a s s e r t ( custom , 0 , !%c . 2 )</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 16/19</p>
  </div>
  <div class="page">
    <p>Example (Memory Management) s t r u c t S {</p>
    <p>i n t x ; s t r u c t S n ;</p>
    <p>};</p>
    <p>i n t main ( i n t argc , char a r g v [ ] ) { s t r u c t S p , q ;</p>
    <p>p = m a l l o c ( s i z e o f ( s t r u c t S ) ) ; p&gt;x = 5 ; p&gt;n = NULL ;</p>
    <p>i f ( a r g c &gt; 1 ) { q = m a l l o c ( s i z e o f ( s t r u c t S ) ) ; q&gt;x = 5 ; q&gt;n = p ;</p>
    <p>} e l s e { q = p ;</p>
    <p>}</p>
    <p>l l b m c a s s e r t ( p&gt;x + q&gt;x == 1 0 ) ;</p>
    <p>f r e e ( q ) ; f r e e ( p ) ;</p>
    <p>r e t u r n 0 ; }</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 17/19</p>
  </div>
  <div class="page">
    <p>Example (Functional Correctness)</p>
    <p>i n t npo2 ( i n t x ) { unsigned i n t i ; x; f o r ( i = 1 ; i &lt; s i z e o f ( i n t )  8 ; i = 2 ) {</p>
    <p>x = x | ( x &gt;&gt; i ) ; } r e t u r n x + 1 ;</p>
    <p>}</p>
    <p>i n t main ( i n t argc , char a r g v [ ] ) { i n t x = a r g c ;</p>
    <p>l l b m c a s s u m e ( x &gt; 0 &amp;&amp; x &lt; ( INT MAX &gt;&gt; 1 ) ) ;</p>
    <p>i n t n = npo2 ( x ) ;</p>
    <p>l l b m c a s s e r t ( n &gt;= x ) ; l l b m c a s s e r t ( n &lt; ( x &lt;&lt; 1 ) ) ; l l b m c a s s e r t ( ( n &amp; ( n  1 ) ) == 0 ) ;</p>
    <p>r e t u r n 0 ; }</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 18/19</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Optimization of memory constraints Discharging of simple memory constraints using:</p>
    <p>Rewriting Restricted linear arithmetic Boolean simplification . . .</p>
    <p>Dedicated SMT solver for memory properties</p>
    <p>Function inlining and loop unrolling on demand</p>
    <p>Modular verification</p>
    <p>Handling system calls (strings, memory copy, etc.)</p>
    <p>Carsten Sinz, Stephan Falke, Florian Merz  LLBMC October 7, 2010 19/19</p>
  </div>
</Presentation>
