<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reverse Debugging of Kernel Failures in Deployed Systems</p>
    <p>Xinyang Ge, Ben Niu and Weidong Cui</p>
    <p>Microsoft Research</p>
    <p>USENIX Annual Technical Conference, 2020</p>
  </div>
  <div class="page">
    <p>What happened before the crash?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>REPT: Reverse Execution with Processor Trace</p>
  </div>
  <div class="page">
    <p>REPT: Reverse Execution with Processor Trace</p>
    <p>A practical reverse debugging solution for user-mode failures [OSDI18]</p>
    <p>Online hardware tracing (e.g., Intel Processor Trace)  Log the control flow with timestamps  Low runtime overhead (1-5%)  No data!</p>
    <p>Offline binary analysis  Recovers data flow from the control flow</p>
    <p>How to make REPT support the kernel?</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>How REPT works?</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>How REPT works?</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>How REPT works?</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>How REPT works?</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>add rax,rbx rax=3,rbx=1</p>
    <p>rax=?,rbx=?</p>
    <p>How REPT works?</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>add rax,rbx rax=3,rbx=1</p>
    <p>rax=2,rbx=1</p>
    <p>How REPT works?</p>
  </div>
  <div class="page">
    <p>Can we simply inverse the tracing?</p>
  </div>
  <div class="page">
    <p>Can we simply inverse the tracing?</p>
    <p>There are too many processes/threads on a system  High memory overhead for tracing</p>
    <p>Hardware events must be emulated in addition to CPU instructions  Interrupts</p>
    <p>Exceptions</p>
    <p>System calls</p>
  </div>
  <div class="page">
    <p>Here comes Kernel REPT</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>context switch</p>
    <p>is irreversible, and we log it in software.</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>syscalls interrupts/ exceptions</p>
  </div>
  <div class="page">
    <p>USER</p>
    <p>KERNEL</p>
    <p>syscalls interrupts/ exceptions</p>
    <p>Interrupt Descriptor Table</p>
    <p>INTERRUPT GATE 0</p>
    <p>INTERRUPT GATE 1</p>
    <p>INTERRUPT GATE 2</p>
    <p>INTERRUPT GATE N</p>
    <p>Different events can have different architectural effects</p>
    <p>Kernel Stack</p>
    <p>SS</p>
    <p>RSP</p>
    <p>RFLAGS</p>
    <p>CS</p>
    <p>RIP</p>
    <p>Error Code Stack Pointer</p>
  </div>
  <div class="page">
    <p>Thats it?</p>
  </div>
  <div class="page">
    <p>Automated Analyses</p>
    <p>A common bug pattern: missing undo operations  EnterCriticalRegion vs LeaveCriticalRegion</p>
    <p>Root-Cause Analysis  Scan the kernel execution trace to find missing undo operations</p>
    <p>Proactive Bug Detector  Sanitize the kernel execution based on specified invariants</p>
    <p>17 new bugs found and fixed!</p>
  </div>
  <div class="page">
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Debugging production kernel failures is hard</p>
    <p>REPT now supports the reverse debugging of the kernel  Per-core control flow tracing in hardware  Context switch logging in software  Recovers data flow via CPU instruction and hardware event emulation</p>
    <p>REPT enables automated analysis beyond reverse debugging  Root-cause analysis  Sanitizing analysis</p>
  </div>
</Presentation>
