<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Verifying Android Apps for the Absence of No-Sleep Energy Bugs</p>
    <p>Panagiotis Vekris</p>
    <p>Ranjit Jhala, Sorin Lerner, Yuvraj Agarwal</p>
    <p>University of California, San Diego</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Software Energy Bugs</p>
  </div>
  <div class="page">
    <p>Software Energy Bugs</p>
  </div>
  <div class="page">
    <p>Concept</p>
    <p>Opportunistic suspend</p>
    <p>WakeLock API</p>
    <p>App developer directives</p>
    <p>Keep a device component awake</p>
    <p>Power Manager</p>
  </div>
  <div class="page">
    <p>Lock Based Mechanism</p>
    <p>PowerManager pm = getSystemService(POWER); WakeLock l = pm.newWakeLock( SCREEN ); l.acquire(); //... screen stays on ... l.release();</p>
    <p>WakeLock Use</p>
  </div>
  <div class="page">
    <p>Lock Based Mechanism</p>
    <p>PowerManager pm = getSystemService(POWER); WakeLock l = pm.newWakeLock( SCREEN ); l.acquire(); //... screen stays on ...</p>
    <p>No-sleep bugs</p>
    <p>Misuse of WakeLock API</p>
    <p>Screen Awake =&gt; 25% battery drain per hour [Pathak12]</p>
    <p>Screen on indefinitely</p>
    <p>WakeLock Use</p>
  </div>
  <div class="page">
    <p>Track No-Sleep Bugs</p>
    <p>Pathak [MobiSys12] Reaching definitions dataflow analysis</p>
    <p>Detect known instances &amp; find new ones</p>
    <p>Our Work Define policies =&gt; Verify absence of bug</p>
    <p>Track asynchronous calls</p>
    <p>Precise dataflow analysis</p>
    <p>Static Analysis</p>
  </div>
  <div class="page">
    <p>A screen to interact with</p>
    <p>Application Component</p>
    <p>Building block</p>
    <p>Entry point</p>
    <p>Stack Model</p>
    <p>Top of stack = visible activity</p>
    <p>Activity</p>
  </div>
  <div class="page">
    <p>Callbacks</p>
    <p>Called by system on state transitions</p>
    <p>Created/ Background</p>
    <p>onForeground()</p>
    <p>onCreate()</p>
    <p>onBackground() Foreground</p>
    <p>Activity States</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock( SCREEN ); } onForeground() onBackground()</p>
    <p>Create a WakeLock  Associate with screen</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock( SCREEN ); } onForeground() { // ... l.acquire(); } onBackground()</p>
    <p>Acquire WakeLock l</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock( SCREEN ); } onForeground() { // ... l.acquire(); } onBackground()</p>
    <p>On Foreground with Screen WakeLock held</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock( SCREEN ); } onForeground() { // ... l.acquire(); } onBackground() { // ... l.release(); }</p>
    <p>Release WakeLock l</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock( SCREEN ); } onForeground() { // ... l.acquire(); } onBackground() { // ... l.release(); }</p>
    <p>At Background with Screen WakeLock</p>
    <p>released</p>
    <p>Correct Use</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock(CPU); l.acquire(); } //unimplemented onForeground(); //unimplenented onBackground();</p>
    <p>iZen Lite V2.3</p>
    <p>Application in background</p>
    <p>Acquire CPU WakeLock</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock(CPU); l.acquire(); } //unimplemented onForeground(); //unimplenented onBackground();</p>
    <p>Application in background holds CPU WakeLock</p>
    <p>Acquire CPU WakeLock</p>
    <p>iZen Lite V2.3</p>
  </div>
  <div class="page">
    <p>onCreate() { super.onCreate(); // setting up l = newWakeLock(CPU); l.acquire(); } //unimplemented onForeground(); //unimplenented onBackground();</p>
    <p>Application in background holds CPU WakeLock</p>
    <p>without doing useful work</p>
    <p>Incorrect Use</p>
    <p>Acquire CPU WakeLock</p>
    <p>iZen Lite V2.3</p>
  </div>
  <div class="page">
    <p>Invisible Activities should not hold resources</p>
    <p>Policies</p>
    <p>Rule</p>
    <p>Activity.onBackground( ) should release all</p>
    <p>WakeLocks Policy</p>
  </div>
  <div class="page">
    <p>Invisible Activities should not hold resources</p>
    <p>Policies</p>
    <p>Rule</p>
    <p>Activity.onBackground( ) should release all</p>
    <p>WakeLocks Policy</p>
    <p>Component</p>
  </div>
  <div class="page">
    <p>Invisible Activities should not hold resources</p>
    <p>Policies</p>
    <p>Rule</p>
    <p>Activity.onBackground( ) should release all</p>
    <p>WakeLocks Policy</p>
    <p>Callback</p>
  </div>
  <div class="page">
    <p>Invisible Activities should not hold resources</p>
    <p>Policies</p>
    <p>Rule</p>
    <p>Activity.onBackground( ) should release all</p>
    <p>WakeLocks Policy</p>
    <p>Expected State</p>
  </div>
  <div class="page">
    <p>General policies</p>
    <p>Policies</p>
    <p>Component Callback Expected</p>
    <p>WakeLock state</p>
    <p>WakeLocks Used in any component - Not only Activities</p>
    <p>Their effects cross component boundaries</p>
    <p>We defined policies for basic components</p>
    <p>Conservative for the rest</p>
    <p>Static Analysis to enforce them</p>
  </div>
  <div class="page">
    <p>Tool Overview</p>
    <p>Uses a precise Dataflow algorithm [RHS 95]</p>
    <p>State: Set of WakeLocks that</p>
    <p>may be held</p>
    <p>at given program point</p>
    <p>Validate</p>
    <p>Check if state complies to policies</p>
  </div>
  <div class="page">
    <p>How our tool works</p>
    <p>onForeground() {</p>
    <p>l = newWakeLock(CPU);</p>
    <p>if (random() % 2 == 0)</p>
    <p>l.acquire();</p>
    <p>}</p>
    <p>onBackground() {</p>
    <p>if (random() % 2 == 0)</p>
    <p>l.release();</p>
    <p>}</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>Connection point</p>
  </div>
  <div class="page">
    <p>{}</p>
    <p>WakeLocks that may be held. Initially empty set</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
  </div>
  <div class="page">
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>l is associated with CPU</p>
    <p>l -&gt; CPU State:</p>
    <p>Annotation: l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
  </div>
  <div class="page">
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>State is propagated to both branches</p>
    <p>l -&gt; CPU State:</p>
    <p>Annotation: l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU</p>
    <p>State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>l.acquire();</p>
    <p>Annotation:</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU</p>
    <p>State:</p>
    <p>l.acquire(); l.acquire(); l.acquire();</p>
    <p>Performed on WakeLock object l</p>
    <p>Virtual method call to acquire</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>l.acquire();</p>
    <p>Annotation:</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU</p>
    <p>State:</p>
    <p>l.acquire(); l.acquire(); l.acquire();</p>
    <p>A</p>
    <p>A U { l }</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>l.acquire();</p>
    <p>Annotation:</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU Annotation:</p>
    <p>Acquire introduces l to set</p>
    <p>State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>random() % 2 == 0</p>
    <p>{l}</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU Annotation:</p>
    <p>Join Statement</p>
    <p>A</p>
    <p>A  B</p>
    <p>B</p>
    <p>State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>random() % 2 == 0</p>
    <p>{l}</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU Annotation:</p>
    <p>Union of input sets</p>
    <p>State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>{l}</p>
    <p>l.release();</p>
    <p>{l} {l}</p>
  </div>
  <div class="page">
    <p>l -&gt; CPU Annotation:</p>
    <p>l.release();</p>
    <p>A</p>
    <p>A-{ l }</p>
    <p>State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>{l}</p>
    <p>l.release();</p>
    <p>{l} {l}</p>
  </div>
  <div class="page">
    <p>Release removes l from set</p>
    <p>Union of input sets</p>
    <p>l -&gt; CPU Annotation: State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>{l}</p>
    <p>{l} {l}</p>
    <p>{}</p>
    <p>{l}</p>
  </div>
  <div class="page">
    <p>WakeLock l may be held at the end of the code</p>
    <p>l -&gt; CPU Annotation: State:</p>
    <p>l = newWakeLock(CPU)</p>
    <p>random() % 2 == 0</p>
    <p>l.acquire();</p>
    <p>random() % 2 == 0</p>
    <p>l.release();</p>
    <p>{}</p>
    <p>{}</p>
    <p>{} {}</p>
    <p>{l}</p>
    <p>{l} {l}</p>
    <p>{}</p>
    <p>{l}</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>// ... critical operation</p>
    <p>if (l.isHeld())</p>
    <p>l.release();</p>
    <p>// ... Wakelock released</p>
    <p>Path Sensitivity l.acquire();</p>
    <p>l.isHeld()</p>
    <p>l.release();</p>
    <p>false true</p>
  </div>
  <div class="page">
    <p>Path Sensitivity</p>
    <p>{l}</p>
    <p>{l}</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}</p>
    <p>State empty in the end</p>
    <p>Remove it from set</p>
    <p>l is not held</p>
    <p>l.acquire();</p>
    <p>l.isHeld()</p>
    <p>l.release();</p>
    <p>false true</p>
  </div>
  <div class="page">
    <p>myRelease();</p>
    <p>myRelease();</p>
    <p>{ l }</p>
    <p>{ l }</p>
    <p>Context Sensitive Method Calls</p>
    <p>myRelease() {</p>
    <p>if (l.isHeld())</p>
    <p>l.release();</p>
    <p>return;</p>
    <p>}</p>
    <p>A</p>
    <p>A-{ l } { l }</p>
    <p>{ } myRelease() {</p>
    <p>if (l.isHeld())</p>
    <p>l.release();</p>
    <p>return;</p>
    <p>}</p>
    <p>A</p>
    <p>A-{ l }</p>
    <p>If l is held in the before calling</p>
    <p>myRelease</p>
    <p>It will be released after</p>
    <p>Method Summary</p>
  </div>
  <div class="page">
    <p>myRelease();</p>
    <p>myRelease();</p>
    <p>{ l }</p>
    <p>{ l }</p>
    <p>Context Sensitive Method Calls</p>
    <p>myRelease() {</p>
    <p>if (l.isHeld())</p>
    <p>l.release();</p>
    <p>return;</p>
    <p>}</p>
    <p>A</p>
    <p>A-{ l } { l }</p>
    <p>{ }</p>
  </div>
  <div class="page">
    <p>Intent calls</p>
    <p>Asynchronous messages among components</p>
    <p>Threaded execution</p>
    <p>Java Threads</p>
    <p>Posted on Message Queue (Android)</p>
    <p>Handling Asynchrony</p>
  </div>
  <div class="page">
    <p>Component A Component B</p>
    <p>Handling Asynchrony</p>
    <p>start(B);</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>start(B);</p>
    <p>l.release();</p>
    <p>Component A Component B</p>
    <p>{l}</p>
    <p>{} {l}</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}</p>
    <p>WakeLock set is preserved at</p>
    <p>component call</p>
    <p>{l}</p>
    <p>Handling Asynchrony</p>
    <p>Empty state is propagated back to caller component</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>start(B);</p>
    <p>l.release();</p>
    <p>Component A Component B</p>
    <p>{l}</p>
    <p>{} {l}</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}</p>
    <p>Component A exits in released</p>
    <p>state</p>
    <p>{l}</p>
    <p>Handling Asynchrony</p>
    <p>So does Component B</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>start(B);</p>
    <p>Component A Component B</p>
    <p>{l}</p>
    <p>{} {l}</p>
    <p>{}</p>
    <p>Component B does not operate on</p>
    <p>WakeLock l {l}</p>
    <p>l.release(); {l}</p>
    <p>{l}</p>
    <p>Handling Asynchrony</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>start(B);</p>
    <p>Component A Component B</p>
    <p>{l}</p>
    <p>{} {l}</p>
    <p>{} Component A exits with released state</p>
    <p>Component B does not operate on</p>
    <p>WakeLock l {l}</p>
    <p>l.release(); {l}</p>
    <p>{l}</p>
    <p>Handling Asynchrony</p>
    <p>Policies will not be checked against it</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>Component Helper Thread</p>
    <p>{ } { }</p>
    <p>Release does not remove</p>
    <p>asynchronously acquired lock</p>
    <p>{l}</p>
    <p>l.release();</p>
    <p>Handling Asynchrony</p>
    <p>Start();</p>
    <p>{l&lt;async&gt;}</p>
    <p>{l&lt;async&gt;}</p>
    <p>Race Condition</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>Component Helper Thread</p>
    <p>{ } { }</p>
    <p>{l}</p>
    <p>l.release();</p>
    <p>Handling Asynchrony</p>
    <p>Start();</p>
    <p>{l&lt;async&gt;}</p>
    <p>{l&lt;async&gt;}</p>
    <p>Policy violated</p>
    <p>Race Condition</p>
  </div>
  <div class="page">
    <p>l.acquire();</p>
    <p>Component Helper Thread</p>
    <p>{ } { }</p>
    <p>l.release();</p>
    <p>Handling Asynchrony</p>
    <p>Start();</p>
    <p>Race Condition</p>
    <p>{ }</p>
    <p>{l}</p>
    <p>{l&lt;async&gt;}</p>
  </div>
  <div class="page">
    <p>Apk (Dalvik Bytecode  Java Bytecode)</p>
    <p>740 apps with wakelocks (out of 2718)</p>
    <p>Retargeted Java Bytecode</p>
    <p>Optimized Java Bytecode</p>
    <p>328 correctly decompiled</p>
    <p>Ded/Dex2jar</p>
    <p>Soot</p>
    <p>Tool Workflow</p>
    <p>Input to WALA/ our tool</p>
  </div>
  <div class="page">
    <p>Analysis Results for 328 apps</p>
    <p>No Policy Violations</p>
    <p>Policy Violations</p>
    <p>Many bugs in real apps</p>
    <p>Too imprecise analysis</p>
    <p>or</p>
    <p>Manual inspection of 31 violating apps</p>
  </div>
  <div class="page">
    <p>Lifecycle Abuse</p>
    <p>Incorrect release conditions</p>
    <p>Not all paths released</p>
    <p>True Positives</p>
    <p>Apps confirmed to contain a bug: 14 of 31</p>
  </div>
  <div class="page">
    <p>Complex release conditions</p>
    <p>Too strict policies</p>
    <p>Unresolved Intent calls</p>
    <p>Wrapper with parameter</p>
    <p>Unrecognized callback</p>
    <p>Correct apps flagged as buggy: 17 of 31</p>
    <p>False Positives</p>
  </div>
  <div class="page">
    <p>WALA</p>
    <p>Conservative at handling exception edges</p>
    <p>Soundness</p>
    <p>Foo() { ... a.f; ... return; }</p>
    <p>Null pointer</p>
    <p>Exception Edge</p>
    <p>Keep analysis precise: Exception edges bypass release operations</p>
    <p>Kill state over exception edges</p>
  </div>
  <div class="page">
    <p>Soundness Exception edges</p>
    <p>Precision Add path sensitivity</p>
    <p>Asynchronous calls -&gt; precise points-to analysis</p>
    <p>Refine policies</p>
    <p>Retarget Dalvik effectively</p>
    <p>Future work</p>
  </div>
  <div class="page">
    <p>No-sleep bugs are real</p>
    <p>We presented a tool that:</p>
    <p>Uses static analysis</p>
    <p>Guarantees for absence of no-sleep bugs</p>
    <p>Tracks asynchronous calls</p>
    <p>Conclusion</p>
  </div>
</Presentation>
