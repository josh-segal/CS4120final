<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 1</p>
    <p>Continuous Reverse Nearest Neighbor Monitoring</p>
    <p>Tian Xia, Donghui Zhang</p>
    <p>College of Computer and Information Science</p>
    <p>Northeastern University</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 2</p>
    <p>Outline</p>
    <p>Background and Definitions  Related Work  The Monitoring Region  Query Processing  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 3</p>
    <p>o1</p>
    <p>Static NN and RNN Query</p>
    <p>Nearest Neighbor (NN) Query: Given a set of objects O and a query point q, determine the object closest to Q.</p>
    <p>q</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 4</p>
    <p>Static NN and RNN Query</p>
    <p>Reverse Nearest Neighbor (RNN) Query: Given a set of objects O and a query point q, determine the objects which have Q as their nearest neighbor.</p>
    <p>o1</p>
    <p>q o2</p>
    <p>o4</p>
    <p>o3</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 5</p>
    <p>Continuous Queries</p>
    <p>In moving-object databases, the query results are constantly changing over time.</p>
    <p>Continuous queries is to monitor the correct query results over time.</p>
    <p>Motivating examples are the numerous location-based applications: traffic monitoring, enhance 911 service, mixedreality games, and etc.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 6</p>
    <p>Our Problem</p>
    <p>Continuous Reverse Nearest Neighbor (CRNN) Query: Given a set of objects O and a set of query points Q, all being static or moving, monitor the exact reverse nearest neighbors of each query point over time.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 7</p>
    <p>o1</p>
    <p>q</p>
    <p>o2 o4</p>
    <p>o3</p>
    <p>Time stamp 2</p>
    <p>CRNN Query: Example</p>
    <p>o1</p>
    <p>qo2 o4</p>
    <p>o3</p>
    <p>Time stamp 1</p>
    <p>Results: o3 and o4. Results: o1, o3 and o4.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 8</p>
    <p>Problem Setup</p>
    <p>Objects and query points are moving unpredictably. Objects send their location updates to the server.</p>
    <p>Objects and query points are indexed using a regular grid to ensure short location-update time.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 9</p>
    <p>Outline</p>
    <p>Background and Definitions  Related Work  The Monitoring Region  Query Processing  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 10</p>
    <p>Solutions to static RNN Query</p>
    <p>Pre-computation based solutions (Korn and Muthukrishnan, 2000; Yang and Lin, 2001).</p>
    <p>q o4</p>
    <p>o3</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 11</p>
    <p>Solutions to static RNN Query</p>
    <p>SAE approach (Stanoi, et al., 2000)</p>
    <p>q</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 12</p>
    <p>Solutions to static RNN Query</p>
    <p>TPL approach (Tao, et al., 2004)</p>
    <p>q</p>
    <p>o1 o3</p>
    <p>o4</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 13</p>
    <p>To answer continuous RNN query, repeatedly re-compute from scratch the reverse nearest neighbors of every query point, upon every update.</p>
    <p>Lots of computations are wasted!</p>
    <p>Straightforward solution for CRNN</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 14</p>
    <p>Incremental Result Update</p>
    <p>Continuous range query (q1 and q2) and continuous NN query (q3).</p>
    <p>q1</p>
    <p>q2</p>
    <p>q3</p>
    <p>Shadowed area is called the monitoring region.  Updates outside the monitoring region will not affect the results.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 15</p>
    <p>Why CRNN query is difficult?</p>
    <p>Compared to static RNN query, incremental update and computation of query results are required.</p>
    <p>Compared to other continuous queries, CRNN query has no simple monitoring regions, due to the complex nature of the RNN query.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 16</p>
    <p>Outline</p>
    <p>Background and Definitions  Related Work  The Monitoring Region  Query Processing  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 17</p>
    <p>Three properties of a simple monitoring region</p>
    <p>Has a simple and regular shape.  Contains only the result objects.  Only rely on the distance between query and object.</p>
    <p>Continuous range query</p>
    <p>Continuous NN query</p>
    <p>qo1</p>
    <p>o2</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 18</p>
    <p>The Monitoring Regions of the CRNN Query</p>
    <p>The monitoring region of a CRNN query point does not satisfy any of the three properties.</p>
    <p>q o4</p>
    <p>o3</p>
    <p>o1</p>
    <p>o2</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 19</p>
    <p>The Monitoring Regions of the CRNN Query</p>
    <p>The monitoring region of a CRNN query point consists of two parts: pie-regions (shadowed) and circ-regions (red circles).</p>
    <p>S5</p>
    <p>S4</p>
    <p>S3</p>
    <p>S2</p>
    <p>S1</p>
    <p>S0</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 20</p>
    <p>The Monitoring Regions of the CRNN Query</p>
    <p>Pie-regions monitors all possible candidates (at most six).  Updates in the pie-regions may change the candidate set.</p>
    <p>Circ-regions decides whether a candidate is a false positive or not.  Updates in the circ-regions may invalidate positive</p>
    <p>candidates, or vice verse.</p>
    <p>The two kinds of regions are stored and manipulated completely differently!</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 21</p>
    <p>Outline</p>
    <p>Background and Definitions  Related Work  The Monitoring Region  Query Processing</p>
    <p>Initialization  Incremental Monitoring</p>
    <p>Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 22</p>
    <p>Initializing CRNN Query</p>
    <p>Combining SAE and Conceptual Partitioning (Mouratidis, et al. 2005).</p>
    <p>Features:  Performing six constrained NN searches</p>
    <p>simultaneously and optimally.  Partially integrating the refinement step with</p>
    <p>the filter step, due to the relaxation of the circ-regions.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 23</p>
    <p>Initializing CRNN Query</p>
    <p>q</p>
    <p>c0,0</p>
    <p>c3,6</p>
    <p>c3,5</p>
    <p>S5</p>
    <p>S4</p>
    <p>S3</p>
    <p>S2</p>
    <p>S1</p>
    <p>S0</p>
    <p>o4</p>
    <p>Early invalidation of candidate (e.g. o2) is done as much as possible in the filter step, saving NN search in the refinement step.</p>
    <p>o3</p>
    <p>o2</p>
    <p>o1</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 24</p>
    <p>Storing the Pie-regions</p>
    <p>The pie-regions are stored using the book-keeping technique, i.e. by associating cells and query points together.</p>
    <p>Each query point stores up-to six candidates and the distances to them.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 25</p>
    <p>Updating the Pie-regions</p>
    <p>Three cases:  Some object enters a pie-region which</p>
    <p>does not contain it.  A candidate leaves its pie-region.  A candidate moves within its pie-region.</p>
    <p>Pie-regions are expanded (shrunk) by associating (un-associating) the new (old) cells.</p>
    <p>In all three cases, the corresponding circ-regions need to be updated.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 26</p>
    <p>Why treat the circ-regions differently?</p>
    <p>A circ-region may change frequently, even if the corresponding pie-region is unchanged.</p>
    <p>Circ-regions is not always changed incrementally.</p>
    <p>Computation of NN queries for candidates is expensive and not always necessary.  Circ-regions do not need to be kept</p>
    <p>tight all the time!</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 27</p>
    <p>Storing the Circ-regions  The candidates of all query points are indexed by an in-memory</p>
    <p>Frequently Update R-tree (FUR-tree. Lee, et al., 2003).  Circles are virtually stored in the FUR-tree, i.e. the FUR-tree is</p>
    <p>augmented by the radiuses of circ-regions.  Objects invalidating the candidates are stored in a separate hash table</p>
    <p>(called NN-Hash), with pointers to the corresponding candidates.</p>
    <p>o1</p>
    <p>o2</p>
    <p>o3 o4</p>
    <p>o5</p>
    <p>o6</p>
    <p>o8</p>
    <p>o1 ~ o6</p>
    <p>FUR-tree</p>
    <p>o2 o1 o7</p>
    <p>NN-Hash</p>
    <p>Internal Hash table pointing to each leaf object</p>
    <p>o7 o8</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 28</p>
    <p>o6</p>
    <p>Updating the Circ-regions: the Lazy-Update Optimization</p>
    <p>Candidates are updated efficiently!  Most of the NN search are avoided!</p>
    <p>o8</p>
    <p>o6</p>
    <p>o6 o8</p>
    <p>o8</p>
    <p>o7</p>
    <p>o7</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 29</p>
    <p>Partial-Insert Optimization</p>
    <p>Only large circ-regions are stored in the FUR-tree.  Rationale: small circ-regions are unlikely to cause</p>
    <p>any result update, thus are stored separately in a hash table.</p>
    <p>Benefits:  FUR-tree size is reduced, leading to more efficient</p>
    <p>query processing.  There are less number of circ-region updates.  Insertion of a small circ-region is very simple.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 30</p>
    <p>Outline</p>
    <p>Background and Definitions  Related Work  The Monitoring Region  Query Processing  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 31</p>
    <p>Experimental Settings</p>
    <p>Dataset: Network based Generator of Moving Objects (Brinkhoff, 2002).</p>
    <p># of objects (K): 10, 20, 40, 60, 80, 100  # of query points (K): 1, 2, 4, 6, 8, 10  Object mobility (%): 1, 5, 10, 15, 20  Query point mobility (%): 1, 5, 10, 15, 20</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 32</p>
    <p>Comparison with TPL</p>
    <p>TPL-FUR: straightforwardly apply static TPL method on FUR-tree.  Incremental: our complete incremental approach.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 33</p>
    <p>Effects of Optimizations (1)</p>
    <p>Uniform: store and manipulating pie- and circ-regions uniformly.  LU-only: apply Lazy-Update optimization only.  LU+PI: apply both Lazy-Update and Partial-Insert optimizations.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 34</p>
    <p>Effects of Optimizations (2)</p>
    <p>Uniform: store and manipulating pie- and circ-regions uniformly.  LU-only: apply Lazy-Update optimization only.  LU+PI: apply both Lazy-Update and Partial-Insert optimizations.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 35</p>
    <p>Outline</p>
    <p>Background and Definitions  Related Work  The Monitoring Region  Query Processing  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 36</p>
    <p>Conclusions</p>
    <p>We addressed an interesting problem of monitoring continuous reverse nearest neighbors (CRNN) in a dynamic environment.</p>
    <p>We defined an effective monitoring region of a CRNN query point.</p>
    <p>We presented an incremental and scalable approach, and two important optimizations.</p>
    <p>Our experiments showed our method is much more efficient than straightforward ones.</p>
  </div>
  <div class="page">
    <p>April 7, 2006 ICDE 2006, Atlanta, GA 37</p>
  </div>
</Presentation>
