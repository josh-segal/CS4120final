<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ENVI: Elastic resource flexing for</p>
    <p>Network functions VIrtualization</p>
    <p>* Lianjie Cao , Purdue University</p>
    <p>Puneet Sharma, Hewlett Packard Labs</p>
    <p>Sonia Fahmy, Purdue University</p>
    <p>Vinay Saxena, Hewlett Packard Enterprise</p>
    <p>* This work was funded by Hewlett Packard Labs and done during internship program. 1</p>
  </div>
  <div class="page">
    <p>Background</p>
  </div>
  <div class="page">
    <p>Network Functions Virtualization</p>
    <p>IPS/IDS WAN Accelerator</p>
    <p>Traffic Manager</p>
    <p>Proprietary hardware Virtualization Platform</p>
    <p>Service Function Chaining</p>
    <p>CAPEX &amp; OPEX Reduction</p>
    <p>AgilityFlexibility Scalability Elasticity</p>
    <p>Auto Resource Flexing</p>
    <p>Virtualization Cloudification</p>
  </div>
  <div class="page">
    <p>VNF Resource Flexing Example</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>HTTP caching proxy - Squid</p>
  </div>
  <div class="page">
    <p>VNF Resource Flexing Example</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>HTTP caching proxy - Squid</p>
  </div>
  <div class="page">
    <p>VNF Resource Flexing Example</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Potential scaling point</p>
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>HTTP caching proxy - Squid</p>
  </div>
  <div class="page">
    <p>VNF Resource Flexing Example</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Potential scaling point</p>
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>Instance 1</p>
    <p>Flavor medium</p>
    <p>vCPU 2</p>
    <p>RAM 4 GB</p>
    <p>Disk 20 GB</p>
    <p>HTTP caching proxy - Squid</p>
  </div>
  <div class="page">
    <p>VNF Resource Flexing Example</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Potential scaling point</p>
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>Instance 1</p>
    <p>Flavor medium</p>
    <p>vCPU 2</p>
    <p>RAM 4 GB</p>
    <p>Disk 20 GB</p>
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>Instance 2</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>HTTP caching proxy - Squid</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Instance scaling detection  Low level infrastructure metrics: CPU, memory, network usages  Static rule-based policy: scale out if CPU &gt; 80%</p>
    <p>Resource flexing  Simple scaling: E2@SOSP15, Stratos  Traffic patterns assumption: CloudScale@SOCC11, DejaVu@ASPLOS12  Long term learning: DejaVu@ASPLOS12</p>
    <p>Service function chaining  Interdependence across VNFs is largely ignored</p>
  </div>
  <div class="page">
    <p>Instance 1</p>
    <p>Flavor small</p>
    <p>vCPU 1</p>
    <p>RAM 2 GB</p>
    <p>Disk 10 GB</p>
    <p>VNF Scaling Detection</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Type I workload</p>
    <p>Performance tests on HTTP caching proxy Squid (using NFV-VITAL@NFV-SDN15)</p>
  </div>
  <div class="page">
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>VNF Scaling Detection</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Type I workload Type II workload</p>
    <p>Performance tests on HTTP caching proxy Squid (using NFV-VITAL@NFV-SDN15)</p>
  </div>
  <div class="page">
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>VNF Scaling Detection</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g</p>
    <p>e</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Time</p>
    <p>Target Rate Throughput CPU</p>
    <p>Type I workload Type II workload</p>
    <p>CPU usage @ system capacity</p>
    <p>Performance tests on HTTP caching proxy Squid (using NFV-VITAL@NFV-SDN15)</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>How to do VNF auto resource flexing efficiently and effectively?</p>
    <p>VNF scaling points depends on  Workload dynamics</p>
    <p>Underlying infrastructure</p>
    <p>Current resource allocations</p>
    <p>VNF functionalities and implementations</p>
    <p>Costs associated with VNF scaling timing  Too soon  Increased costs</p>
    <p>Too late  Increased SLA violation penalties</p>
    <p>Service function chaining  Interdependence across VNFs in forwarding graph</p>
  </div>
  <div class="page">
    <p>ENVI  Our Solution</p>
  </div>
  <div class="page">
    <p>ENVI Architecture</p>
    <p>VNF Manager(s)</p>
    <p>Hardware resources</p>
    <p>Computing Hardware</p>
    <p>Storage Hardware</p>
    <p>Network Hardware</p>
    <p>Virtualization Layer</p>
    <p>Virtual Computing</p>
    <p>Virtual Storage</p>
    <p>Virtual Network</p>
    <p>EMS EMSEMS</p>
    <p>OSS/BSS</p>
    <p>Service, VNF and Infrastructure Description</p>
    <p>Orchestrator</p>
    <p>VNF Manager(s)</p>
    <p>VNF Manager(s)</p>
    <p>Virtualized Infrastructure</p>
    <p>Manager(s)</p>
    <p>NFVI</p>
    <p>VNF</p>
  </div>
  <div class="page">
    <p>ENVI</p>
    <p>ENVI Architecture</p>
    <p>Collect VNF-level and infrastructure-level feature info (VNF dependent).</p>
    <p>Pull feature info from VNF monitor every interval T,</p>
    <p>Determine if scaling action is required every interval W,</p>
    <p>Push the scale vector with collected info to RFE.</p>
    <p>Receive scale vector from SDE,  Evaluate overload situation of</p>
    <p>the entire SFC,  Make resource flexing plan and</p>
    <p>push them to PE.</p>
    <p>Receive resource flexing plan from RFE,</p>
    <p>Convert plan to executable actions (platform dependent),</p>
    <p>Push actions to orchestrator for execution.</p>
    <p>ETSI NFV Architecture</p>
    <p>VNF Manager(s)</p>
    <p>Hardware resources</p>
    <p>Computing Hardware</p>
    <p>Storage Hardware</p>
    <p>Network Hardware</p>
    <p>Virtualization Layer</p>
    <p>Virtual Computing</p>
    <p>Virtual Storage</p>
    <p>Virtual Network</p>
    <p>EMS EMSEMS</p>
    <p>OSS/BSS</p>
    <p>Service, VNF and Infrastructure Description</p>
    <p>Orchestrator</p>
    <p>VNF Manager(s)</p>
    <p>VNF Manager(s)</p>
    <p>Virtualized Infrastructure</p>
    <p>Manager(s)</p>
    <p>NFVI</p>
    <p>VNFVNF Monitor</p>
    <p>Infrastructure</p>
    <p>level features</p>
    <p>VNF-level</p>
    <p>features</p>
    <p>Scaling Decision</p>
    <p>Engine</p>
    <p>Resource</p>
    <p>Flexing Engine</p>
    <p>Fowarding Graph &amp;</p>
    <p>Instance Graph</p>
    <p>Placement</p>
    <p>Engine</p>
    <p>Actions</p>
  </div>
  <div class="page">
    <p>Key Contributions of SDE</p>
    <p>Infrastructure-level features</p>
  </div>
  <div class="page">
    <p>Key Contributions of SDE</p>
    <p>Infrastructure-level features</p>
  </div>
  <div class="page">
    <p>Key Contributions of SDE</p>
    <p>Infrastructure-level features  Better understanding of VNF status</p>
    <p>+ VNF-level features</p>
  </div>
  <div class="page">
    <p>Key Contributions of SDE</p>
    <p>Infrastructure-level features  Better understanding of VNF status</p>
    <p>Classification problem =&gt; do not scale or scale  Infeasible to formulate exact mathematical models</p>
    <p>Leverage machine learning algorithms</p>
    <p>+ VNF-level features</p>
  </div>
  <div class="page">
    <p>Key Contributions of SDE</p>
    <p>Infrastructure-level features  Better understanding of VNF status</p>
    <p>Classification problem =&gt; do not scale or scale  Infeasible to formulate exact mathematical models</p>
    <p>Leverage machine learning algorithms</p>
    <p>Neural network model  Select input features and construct new features through hidden layers</p>
    <p>Fit complex nonlinear functions</p>
    <p>Model dependence of input features and data points</p>
    <p>Four layers: Input layer, two hidden layers and output layer</p>
    <p>+ VNF-level features</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>Input Layer Hidden Layer Output Layer</p>
  </div>
  <div class="page">
    <p>Workflow of SDE</p>
    <p>Online</p>
    <p>Offline Performance</p>
    <p>Tests</p>
    <p>Train Neural</p>
    <p>Network Model Decision</p>
    <p>Evaluation</p>
    <p>Resource</p>
    <p>Flexing Engine</p>
    <p>Evaluation</p>
    <p>Training Data (Composite Features)</p>
    <p>Scale Vector</p>
  </div>
  <div class="page">
    <p>Workflow of SDE</p>
    <p>Offline  Performance tests to cover different types of workload</p>
    <p>Collect composite feature information as training data</p>
    <p>Label data points with do not scale and scale</p>
    <p>Train an initial model for each VNF</p>
    <p>Online</p>
    <p>Offline Performance</p>
    <p>Tests</p>
    <p>Train Neural</p>
    <p>Network Model Decision</p>
    <p>Evaluation</p>
    <p>Resource</p>
    <p>Flexing Engine</p>
    <p>Evaluation</p>
    <p>Training Data (Composite Features)</p>
    <p>Scale Vector</p>
  </div>
  <div class="page">
    <p>Workflow of SDE</p>
    <p>Offline  Performance tests to cover different types of workload</p>
    <p>Collect composite feature information as training data</p>
    <p>Label data points with do not scale and scale</p>
    <p>Train an initial model for each VNF</p>
    <p>Online  Keep collecting information of all features</p>
    <p>Generate scale vector based on current models</p>
    <p>Evaluate and keep training models with latest data points (background)</p>
    <p>Update current models periodically Online</p>
    <p>Offline Performance</p>
    <p>Tests</p>
    <p>Train Neural</p>
    <p>Network Model Decision</p>
    <p>Evaluation</p>
    <p>Resource</p>
    <p>Flexing Engine</p>
    <p>Evaluation</p>
    <p>Training Data (Composite Features)</p>
    <p>Scale Vector</p>
  </div>
  <div class="page">
    <p>Workflow of SDE</p>
    <p>Offline  Performance tests to cover different types of workload</p>
    <p>Collect composite feature information as training data</p>
    <p>Label data points with do not scale and scale</p>
    <p>Train an initial model for each VNF</p>
    <p>Online  Keep collecting information of all features</p>
    <p>Generate scale vector based on current models</p>
    <p>Evaluate and keep training models with latest data points (background)</p>
    <p>Update current models periodically</p>
    <p>Extending features  Domain knowledge, time series information, statistical information</p>
    <p>Online</p>
    <p>Offline Performance</p>
    <p>Tests</p>
    <p>Train Neural</p>
    <p>Network Model Decision</p>
    <p>Evaluation</p>
    <p>Resource</p>
    <p>Flexing Engine</p>
    <p>Evaluation</p>
    <p>Training Data (Composite Features)</p>
    <p>Scale Vector</p>
  </div>
  <div class="page">
    <p>ENVI Components</p>
    <p>VNF monitor  Develop VNF monitoring agent for each VNF</p>
    <p>Convert raw info to key-value data</p>
    <p>Scaling Decision Engine</p>
    <p>Resource flexing engine  Break multi-VNF scaling down to single-VNF scaling</p>
    <p>Redistribute flows</p>
    <p>Scale resource allocation</p>
    <p>Placement engine  Use OpenStack nova-scheduler service by default</p>
    <p>Compatible with other VNF placement algorithms, e.g., VNF-P@CNSM14</p>
  </div>
  <div class="page">
    <p>Prototype Evaluation (For Scaling Decision Engine)</p>
  </div>
  <div class="page">
    <p>Testbed</p>
    <p>3 * HP DL360p blade servers: 2 * Intel Xeon E5-2680 v2, 212 GB RAM</p>
    <p>2 * HP Z420 workstations: 1 * Intel Xeon E5-1620, 16 GB RAM</p>
    <p>1 * HPE 5820X 10 GB Switch</p>
    <p>Running OpenStack Kilo</p>
  </div>
  <div class="page">
    <p>Testbed</p>
    <p>3 * HP DL360p blade servers: 2 * Intel Xeon E5-2680 v2, 212 GB RAM</p>
    <p>2 * HP Z420 workstations: 1 * Intel Xeon E5-1620, 16 GB RAM</p>
    <p>1 * HPE 5820X 10 GB Switch</p>
    <p>Running OpenStack Kilo</p>
    <p>VNF Suricata Squid</p>
    <p>Functionality Intrusion detection system HTTP caching proxy</p>
    <p>Version 3.2.1 3.5.20</p>
    <p>Workload generator hping3 &amp; iperf Web Polygraph</p>
    <p>Workload types Malicious ratio 0% ~ 90% Response size 10KB ~ 100KB</p>
    <p>Experiment methodology</p>
    <p>Packet rate changes randomly around capacity point per minute</p>
    <p>HTTP request rate changes randomly around capacity point per minute</p>
  </div>
  <div class="page">
    <p>Example Features SquidSuricata</p>
    <p>app_layer.flow.dcerpc_tcp decoder.ipraw.invalid_ip_version dns.memcap_state</p>
    <p>app_layer.flow.dcerpc_udp decoder.ipv4 dns.memuse</p>
    <p>app_layer.flow.dns_tcp decoder.ipv4_in_ipv6 flow.emerg_mode_entered</p>
    <p>app_layer.flow.dns_udp decoder.ipv6 flow.emerg_mode_over</p>
    <p>app_layer.flow.failed_tcp decoder.ipv6_in_ipv6 flow.memcap</p>
    <p>app_layer.flow.failed_udp decoder.ltnull.pkt_too_small flow.memuse</p>
    <p>app_layer.flow.ftp decoder.ltnull.unsupported_type flow.spare</p>
    <p>app_layer.flow.http decoder.max_pkt_size flow.tcp_reuse</p>
    <p>app_layer.flow.imap decoder.mpls flow_mgr.bypassed_pruned</p>
    <p>app_layer.flow.msn decoder.null flow_mgr.closed_pruned</p>
    <p>app_layer.flow.smb decoder.pkts flow_mgr.est_pruned</p>
    <p>app_layer.flow.smtp decoder.ppp flow_mgr.flows_checked</p>
    <p>app_layer.flow.ssh decoder.pppoe flow_mgr.flows_notimeout</p>
    <p>app_layer.flow.tls decoder.raw flow_mgr.flows_removed</p>
    <p>app_layer.tx.dns_tcp decoder.sctp flow_mgr.flows_timeout</p>
    <p>app_layer.tx.http decoder.tcp flow_mgr.new_pruned</p>
    <p>app_layer.tx.smtp decoder.teredo flow_mgr.rows_busy</p>
    <p>app_layer.tx.tls decoder.udp flow_mgr.rows_checked</p>
    <p>capture.kernel_drops decoder.vlan flow_mgr.rows_empty</p>
    <p>capture.kernel_packets decoder.vlan_qinq flow_mgr.rows_maxlen</p>
    <p>decoder.avg_pkt_size defrag.ipv4.fragments flow_mgr.rows_skipped</p>
    <p>decoder.bytes defrag.ipv4.reassembled http.memcap</p>
    <p>decoder.dce.pkt_too_small defrag.ipv4.timeouts http.memuse</p>
    <p>decoder.erspan defrag.ipv6.fragments tcp.invalid_checksum</p>
    <p>decoder.ethernet defrag.ipv6.reassembled tcp.memuse</p>
    <p>decoder.gre defrag.ipv6.timeouts tcp.no_flow</p>
    <p>decoder.icmpv4 defrag.max_frag_hits tcp.pseudo</p>
    <p>decoder.icmpv6 detect.alert tcp.pseudo_failed</p>
    <p>decoder.invalid dns.memcap_global tcp.reassembly_gap</p>
    <p>CPU_Time Number_of_clients_accessing_cache icp.kbytes_sent</p>
    <p>CPU_Usage Number_of_file_desc icp.pkts_recv Cache_Hits Number_of_queued_ICP_replies icp.pkts_sent</p>
    <p>Cache_Misses Reserved_number_of_file_desc icp.q_kbytes_recv Cache_information_for_squid Resource_usage_for_squid icp.q_kbytes_sent</p>
    <p>Connection Select_loop_called icp.queries_recv</p>
    <p>Connection_information_for_squid Storage_Mem_capacity icp.queries_sent</p>
    <p>Content-Type Storage_Mem_size icp.query_median_svc_time</p>
    <p>Current_Time Storage_Swap_capacity icp.query_timeouts</p>
    <p>DNS_Lookups Storage_Swap_size icp.r_kbytes_recv</p>
    <p>File_descriptor_usage_for_squid Store_Disk_files_open icp.r_kbytes_sent</p>
    <p>Files_queued_for_open Total_accounted icp.replies_queued</p>
    <p>Free_Ordinary_blocks Total_free icp.replies_recv</p>
    <p>Free_Small_blocks Total_in_use icp.replies_sent</p>
    <p>HTTP_Requests_(All) Total_size icp.reply_median_svc_time</p>
    <p>Hits_as_%_of_all_requests Total_space_in_arena median_select_fds</p>
    <p>Hits_as_%_of_bytes_sent UP_Time memPoolAlloc_calls</p>
    <p>Holding_blocks aborted_requests memPoolFree_calls</p>
    <p>ICP_Queries average_select_fd_period memPool_accounted</p>
    <p>Internal_Data_Structures client_http.all_median_svc_time memPool_unaccounted</p>
    <p>Largest_file_desc_currently_in_use client_http.errors page_faults</p>
    <p>Last-Modified client_http.hit_median_svc_time sample_end_time</p>
    <p>Maximum_Resident_Size client_http.hits sample_start_time</p>
    <p>Maximum_number_of_file_descriptors client_http.kbytes_in select_fds</p>
    <p>Mean_Object_Size client_http.kbytes_out select_loops</p>
    <p>Number_of_HTCP_messages_received client_http.miss_median_svc_time server.all.errors</p>
    <p>Number_of_HTCP_messages_sent client_http.nh_median_svc_time server.all.kbytes_in</p>
    <p>server.all.kbytes_out server.ftp.kbytes_in syscalls.disk.closes</p>
    <p>server.all.requests server.ftp.kbytes_out syscalls.disk.opens</p>
    <p>server.ftp.errors server.ftp.requests syscalls.disk.reads15</p>
  </div>
  <div class="page">
    <p>Evaluation Methodology</p>
    <p>Training and testing  Train neural network model with  workload types,  = 1,2,,9</p>
    <p>Run 5-fold cross-validation to verify trained model</p>
    <p>Test the trained model on 10   workload types</p>
    <p>Metrics</p>
    <p>Accuracy:</p>
    <p>for overall correctness</p>
    <p>Precision:</p>
    <p>+  for exactness</p>
    <p>Recall:</p>
    <p>+  for completeness</p>
    <p>ROC and AUROC : true positive rate vs false positive rate</p>
    <p>Compared with decision tree (DT), random forest (RF), logistic regression (LR) and rule-based approach as baseline (BL)</p>
  </div>
  <div class="page">
    <p>Suricata Results</p>
  </div>
  <div class="page">
    <p>Suricata Results Infrastructure-level features VNF-level features Composite features</p>
    <p>NN  LR &gt; RF &gt; DT  0.85 for all metrics</p>
    <p>NN &gt; LR &gt; RF &gt; DT  Slightly worse than infrastructure</p>
    <p>level for DT, RF, LR  Suricata is a relatively simple VNF  Tight correlation with infrastructure</p>
    <p>resource usage</p>
    <p>NN &gt; LR &gt; RF &gt; DT</p>
  </div>
  <div class="page">
    <p>Suricata Results Infrastructure-level features VNF-level features Composite features</p>
    <p>NN  LR &gt; RF &gt; DT  0.85 for all metrics</p>
    <p>NN &gt; LR &gt; RF &gt; DT  Slightly worse than infrastructure</p>
    <p>level for DT, RF, LR  Suricata is a relatively simple VNF  Tight correlation with infrastructure</p>
    <p>resource usage</p>
    <p>NN &gt; LR &gt; RF &gt; DT</p>
  </div>
  <div class="page">
    <p>Suricata Results Infrastructure-level features VNF-level features Composite features</p>
    <p>NN  LR &gt; RF &gt; DT  0.85 for all metrics</p>
    <p>NN &gt; LR &gt; RF &gt; DT  Slightly worse than infrastructure</p>
    <p>level for DT, RF, LR  Suricata is a relatively simple VNF  Tight correlation with infrastructure</p>
    <p>resource usage</p>
    <p>NN &gt; LR &gt; RF &gt; DT  Composite features &gt; infrastructure-level features &gt; VNF-level features</p>
    <p>Neural network outperforms other algorithms</p>
  </div>
  <div class="page">
    <p>Squid Results</p>
  </div>
  <div class="page">
    <p>Squid Results Infrastructure-level features VNF-level features Composite features</p>
    <p>Low for all models and metrics  Squid is a relatively complex VNF  Infrastructure resource usage is not</p>
    <p>adequate</p>
    <p>NN &gt; LR &gt; RF &gt; DT  Much better than infrastructure-level</p>
    <p>for all models  NN gets &gt; 0.85 for all metrics</p>
    <p>NN &gt; LR &gt; RF &gt; DT</p>
  </div>
  <div class="page">
    <p>Squid Results Infrastructure-level features VNF-level features Composite features</p>
    <p>Low for all models and metrics  Squid is a relatively complex VNF  Infrastructure resource usage is not</p>
    <p>adequate</p>
    <p>NN &gt; LR &gt; RF &gt; DT  Much better than infrastructure-level</p>
    <p>for all models  NN gets &gt; 0.85 for all metrics</p>
    <p>NN &gt; LR &gt; RF &gt; DT</p>
    <p>Composite features ~= VNF-level features &gt; infrastructure-level features  Neural network outperforms other algorithms</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Designed a modular framework for NFV resource flexing</p>
    <p>Combined infrastructure-level features and VNF-level features to understand VNF performance behavior</p>
    <p>Adopted neural network model to make VNF scaling decisions</p>
    <p>Evaluated scaling decision engine with two open source VNFs</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Model Feature Set  Rely on vendors to expose relevant features</p>
    <p>Offline Model Training Overhead  Train a model for each VNF</p>
    <p>Online Model Evolution  Scoring function to evaluate false positive and false negative</p>
    <p>Finer-grained Resource Flexing  Customized dynamic resource sizing</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
  </div>
</Presentation>
