<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SecPod: A Framework for Virtualization-based</p>
    <p>Security Systems</p>
    <p>Xiaoguang Wang :</p>
    <p>Florida State University: Xian Jiaotong University6 Qihoo 360;</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 1/22</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 2/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Page Table Integrity</p>
    <p>Kernel protection requires page table integrity</p>
    <p>Page tables decide address translation (from VA to PA)</p>
    <p>Page tables control memory protection</p>
    <p>e.g. Data Execution Prevention (Write  eXecute)</p>
    <p>However, page tables are always writable in the kernel</p>
    <p>Kernel needs to frequently change memory mapping</p>
    <p>Kernel protection can be subverted by manipulating page tables</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 3/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Page Table Integrity</p>
    <p>Kernel protection requires page table integrity</p>
    <p>Page tables decide address translation (from VA to PA)</p>
    <p>Page tables control memory protection</p>
    <p>e.g. Data Execution Prevention (Write  eXecute)</p>
    <p>However, page tables are always writable in the kernel</p>
    <p>Kernel needs to frequently change memory mapping</p>
    <p>Kernel protection can be subverted by manipulating page tables</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 3/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Page Table Integrity</p>
    <p>Kernel protection requires page table integrity</p>
    <p>Page tables decide address translation (from VA to PA)</p>
    <p>Page tables control memory protection</p>
    <p>e.g. Data Execution Prevention (Write  eXecute)</p>
    <p>However, page tables are always writable in the kernel</p>
    <p>Kernel needs to frequently change memory mapping</p>
    <p>Kernel protection can be subverted by manipulating page tables</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 3/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Page Table Integrity</p>
    <p>Kernel protection requires page table integrity</p>
    <p>Page tables decide address translation (from VA to PA)</p>
    <p>Page tables control memory protection</p>
    <p>e.g. Data Execution Prevention (Write  eXecute)</p>
    <p>However, page tables are always writable in the kernel</p>
    <p>Kernel needs to frequently change memory mapping</p>
    <p>Kernel protection can be subverted by manipulating page tables</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 3/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization-based Kernel Protection</p>
    <p>Security tools are isolated out-of-the-box, but need to intercept key guest events  e.g., guest page table updates, control-register updates</p>
    <p>Shadow paging enables reliable kernel memory protection  Hypervisor uses shadow paging to virtualize memory  SPTs are synchronized with GPTs by the hypervisor</p>
    <p>security tools can intercept guest page table updates  SPTs supersede GPTs for address translation</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 4/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization-based Kernel Protection</p>
    <p>Security tools are isolated out-of-the-box, but need to intercept key guest events  e.g., guest page table updates, control-register updates</p>
    <p>Shadow paging enables reliable kernel memory protection  Hypervisor uses shadow paging to virtualize memory</p>
    <p>SPTs are synchronized with GPTs by the hypervisor security tools can intercept guest page table updates</p>
    <p>SPTs supersede GPTs for address translation</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 4/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization-based Kernel Protection</p>
    <p>Security tools are isolated out-of-the-box, but need to intercept key guest events  e.g., guest page table updates, control-register updates</p>
    <p>Shadow paging enables reliable kernel memory protection  Hypervisor uses shadow paging to virtualize memory  SPTs are synchronized with GPTs by the hypervisor</p>
    <p>security tools can intercept guest page table updates</p>
    <p>SPTs supersede GPTs for address translation</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 4/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization-based Kernel Protection</p>
    <p>Security tools are isolated out-of-the-box, but need to intercept key guest events  e.g., guest page table updates, control-register updates</p>
    <p>Shadow paging enables reliable kernel memory protection  Hypervisor uses shadow paging to virtualize memory  SPTs are synchronized with GPTs by the hypervisor</p>
    <p>security tools can intercept guest page table updates  SPTs supersede GPTs for address translation</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 4/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization Hardware Obsoletes Shadow Paging</p>
    <p>Nested paging introduces two-level address translation for VMs  Both GPT and NPT are used by CPU for address translation</p>
    <p>Nested paging has big performance advantage over SPT  An acceleration of up to 48% for MMU-intensive tasks 1</p>
    <p>Security tools cannot intercept guest memory updates with NPT  Guest is free to change its GPTs, without notifying hypervisor</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>Guest Physical Address</p>
    <p>Guest Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>Nested Page Table</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization Hardware Obsoletes Shadow Paging</p>
    <p>Nested paging introduces two-level address translation for VMs  Both GPT and NPT are used by CPU for address translation</p>
    <p>Nested paging has big performance advantage over SPT  An acceleration of up to 48% for MMU-intensive tasks 1</p>
    <p>Security tools cannot intercept guest memory updates with NPT  Guest is free to change its GPTs, without notifying hypervisor</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>Guest Physical Address</p>
    <p>Guest Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>Nested Page Table</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Virtualization Hardware Obsoletes Shadow Paging</p>
    <p>Nested paging introduces two-level address translation for VMs  Both GPT and NPT are used by CPU for address translation</p>
    <p>Nested paging has big performance advantage over SPT  An acceleration of up to 48% for MMU-intensive tasks 1</p>
    <p>Security tools cannot intercept guest memory updates with NPT  Guest is free to change its GPTs, without notifying hypervisor</p>
    <p>Shadow Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
    <p>Guest Physical Address</p>
    <p>Guest Page Table</p>
    <p>Guest Virtual Address</p>
    <p>Physical Address</p>
    <p>Nested Page Table</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>G u</p>
    <p>e st</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Why SecPod</p>
    <p>Our Goal:</p>
    <p>A framework for virtualization-based security tools on the modern virtualization hardware with nested paging</p>
    <p>Our Solution:</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 6/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Why SecPod</p>
    <p>Our Goal:</p>
    <p>A framework for virtualization-based security tools on the modern virtualization hardware with nested paging</p>
    <p>Our Solution:</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 6/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Threat Model and Assumption</p>
    <p>Trustworthy hardware and trusted booting  Load-time integrity is protected by trusted booting  IOMMU is properly configured to prevent DMA attacks</p>
    <p>Hypervisor is trusted  Formal verification [seL4, SOSP09], integrity protection and monitoring [HyperSafe, S&amp;P10]</p>
    <p>Kernel is benign but contains vulnerabilities  Powerful attackers can change arbitrary memory of the kernel</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 7/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Threat Model and Assumption</p>
    <p>Trustworthy hardware and trusted booting  Load-time integrity is protected by trusted booting  IOMMU is properly configured to prevent DMA attacks</p>
    <p>Hypervisor is trusted  Formal verification [seL4, SOSP09], integrity protection and monitoring [HyperSafe, S&amp;P10]</p>
    <p>Kernel is benign but contains vulnerabilities  Powerful attackers can change arbitrary memory of the kernel</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 7/22</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Threat Model and Assumption</p>
    <p>Trustworthy hardware and trusted booting  Load-time integrity is protected by trusted booting  IOMMU is properly configured to prevent DMA attacks</p>
    <p>Hypervisor is trusted  Formal verification [seL4, SOSP09], integrity protection and monitoring [HyperSafe, S&amp;P10]</p>
    <p>Kernel is benign but contains vulnerabilities  Powerful attackers can change arbitrary memory of the kernel</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 7/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>SecPod Architecture</p>
    <p>SecPod &amp; Security Tool Code/Data</p>
    <p>SPT Pool</p>
    <p>Entry Gate</p>
    <p>pv_mmu_ops.alloc_pud pv_mmu_ops.set_pud pv_mmu_ops.write_cr3 ...</p>
    <p>Normal Space Secure Space</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>Trusted Boot</p>
    <p>DMA Protection</p>
    <p>G u</p>
    <p>e st GPT</p>
    <p>Exit Gate</p>
    <p>User Mode</p>
    <p>Kernel Mode</p>
    <p>Key Technique I: Paging Delegation</p>
    <p>VMExit Handler</p>
    <p>Sensitive Instructions</p>
    <p>Key Technique II: Execution Trapping</p>
    <p>Up Call</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 8/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Key Technique I: Paging Delegation</p>
    <p>SecPod creates an isolated address space from the kernel</p>
    <p>Secure space maintains SPTs for the guest  SPTs are the only effective page tables for the guest  SPTs mirror GPTs (if no memory protection violation)</p>
    <p>SecPod forwards guest page table updates to secure space</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>N o</p>
    <p>rm a</p>
    <p>l S p</p>
    <p>a ce</p>
    <p>GPT SPT</p>
    <p>S e</p>
    <p>cu re</p>
    <p>sp a</p>
    <p>ce</p>
    <p>Traditional Shadow Paging Shadow Paging in SecPod</p>
    <p>NPT</p>
    <p>Guest</p>
    <p>HypervisorHypervisor</p>
    <p>Guest</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 9/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Key Technique I: Paging Delegation</p>
    <p>SecPod creates an isolated address space from the kernel</p>
    <p>Secure space maintains SPTs for the guest  SPTs are the only effective page tables for the guest  SPTs mirror GPTs (if no memory protection violation)</p>
    <p>SecPod forwards guest page table updates to secure space</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>N o</p>
    <p>rm a</p>
    <p>l S p</p>
    <p>a ce</p>
    <p>GPT SPT</p>
    <p>S e</p>
    <p>cu re</p>
    <p>sp a</p>
    <p>ce</p>
    <p>Traditional Shadow Paging Shadow Paging in SecPod</p>
    <p>NPT</p>
    <p>Guest</p>
    <p>HypervisorHypervisor</p>
    <p>Guest</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 9/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Key Technique I: Paging Delegation</p>
    <p>SecPod creates an isolated address space from the kernel</p>
    <p>Secure space maintains SPTs for the guest  SPTs are the only effective page tables for the guest  SPTs mirror GPTs (if no memory protection violation)</p>
    <p>SecPod forwards guest page table updates to secure space</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>N o</p>
    <p>rm a</p>
    <p>l S p</p>
    <p>a ce</p>
    <p>GPT SPT</p>
    <p>S e</p>
    <p>cu re</p>
    <p>sp a</p>
    <p>ce</p>
    <p>Traditional Shadow Paging Shadow Paging in SecPod</p>
    <p>NPT</p>
    <p>Guest</p>
    <p>HypervisorHypervisor</p>
    <p>Guest</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 9/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>SecPod Address Space Layout</p>
    <p>Normal/secure spaces use page-table based isolation  Entry/exit gates are the only passage</p>
    <p>Guest kernel is mapped in secure space  Security tools can access guest memory, but not execute it</p>
    <p>Normal Space Secure Space K</p>
    <p>e rn</p>
    <p>e l</p>
    <p>U se</p>
    <p>r P ro</p>
    <p>ce ss</p>
    <p>Kernel Data</p>
    <p>R W</p>
    <p>Kernel RO Data</p>
    <p>R -</p>
    <p>Kernel Code</p>
    <p>R -X</p>
    <p>Kernel Data</p>
    <p>R W</p>
    <p>Kernel RO Data</p>
    <p>R -</p>
    <p>Kernel Code</p>
    <p>R -</p>
    <p>SecPod Data</p>
    <p>R W</p>
    <p>SecPod Code</p>
    <p>R -X</p>
    <p>Security Tool Data</p>
    <p>R W</p>
    <p>Security Tool Code</p>
    <p>R -X</p>
    <p>Gate Data</p>
    <p>R W</p>
    <p>Entry/Exit Gates</p>
    <p>R -X</p>
    <p>User Data</p>
    <p>R W</p>
    <p>User Code</p>
    <p>R -X</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 10/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>SecPod Address Space Layout</p>
    <p>Normal/secure spaces use page-table based isolation  Entry/exit gates are the only passage</p>
    <p>Guest kernel is mapped in secure space  Security tools can access guest memory, but not execute it</p>
    <p>Normal Space Secure Space K</p>
    <p>e rn</p>
    <p>e l</p>
    <p>U se</p>
    <p>r P ro</p>
    <p>ce ss</p>
    <p>Kernel Data</p>
    <p>R W</p>
    <p>Kernel RO Data</p>
    <p>R -</p>
    <p>Kernel Code</p>
    <p>R -X</p>
    <p>Kernel Data</p>
    <p>R W</p>
    <p>Kernel RO Data</p>
    <p>R -</p>
    <p>Kernel Code</p>
    <p>R -</p>
    <p>SecPod Data</p>
    <p>R W</p>
    <p>SecPod Code</p>
    <p>R -X</p>
    <p>Security Tool Data</p>
    <p>R W</p>
    <p>Security Tool Code</p>
    <p>R -X</p>
    <p>Gate Data</p>
    <p>R W</p>
    <p>Entry/Exit Gates</p>
    <p>R -X</p>
    <p>User Data</p>
    <p>R W</p>
    <p>User Code</p>
    <p>R -X</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 10/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Protecting Secure Space</p>
    <p>Attacker might try to:</p>
    <p>Enter secure space without security checks</p>
    <p>Request malicious page table updates  e.g., to map secure memory in guest</p>
    <p>Misuse privileged instructions  e.g., to load a malicious page table, to disable paging...</p>
    <p>Our countermeasures:  Secure and efficient context switch</p>
    <p>Page table update validation</p>
    <p>Execution trapping of privileged instructions</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 11/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Protecting Secure Space</p>
    <p>Attacker might try to:</p>
    <p>Enter secure space without security checks</p>
    <p>Request malicious page table updates  e.g., to map secure memory in guest</p>
    <p>Misuse privileged instructions  e.g., to load a malicious page table, to disable paging...</p>
    <p>Our countermeasures:  Secure and efficient context switch</p>
    <p>Page table update validation</p>
    <p>Execution trapping of privileged instructions</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 11/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Secure and Efficient Context Switch</p>
    <p>Entry/exit gates are only passage between secure/normal spaces  Each gate switches the page table, the stack...  Entry gate runs atomically by disabling interrupts (SIM [CCS 09])</p>
    <p>Loading CR3 is a privileged instruction trapped by SecPod  Performance overhead is high if each context switch is trapped</p>
    <p>Intel CR3 target list to the rescue:  Four page tables can be loaded without being trapped by CPU  There are many SPTs for the guest</p>
    <p>use a fixed top-Level page table for all SPTs</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 12/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Secure and Efficient Context Switch</p>
    <p>Entry/exit gates are only passage between secure/normal spaces  Each gate switches the page table, the stack...  Entry gate runs atomically by disabling interrupts (SIM [CCS 09])</p>
    <p>Loading CR3 is a privileged instruction trapped by SecPod  Performance overhead is high if each context switch is trapped</p>
    <p>Intel CR3 target list to the rescue:  Four page tables can be loaded without being trapped by CPU  There are many SPTs for the guest</p>
    <p>use a fixed top-Level page table for all SPTs</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 12/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Secure and Efficient Context Switch</p>
    <p>Entry/exit gates are only passage between secure/normal spaces  Each gate switches the page table, the stack...  Entry gate runs atomically by disabling interrupts (SIM [CCS 09])</p>
    <p>Loading CR3 is a privileged instruction trapped by SecPod  Performance overhead is high if each context switch is trapped</p>
    <p>Intel CR3 target list to the rescue:  Four page tables can be loaded without being trapped by CPU  There are many SPTs for the guest</p>
    <p>use a fixed top-Level page table for all SPTs</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 12/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Page Table Update Validation</p>
    <p>SecPod enforces basic kernel memory integrity for guest  No mapping is allowed to the secure space code/data  Enforce kernel WX</p>
    <p>Guest Page Table Shadow Page Table</p>
    <p>SPT Update Verification</p>
    <p>Fast Index Tables</p>
    <p>PT</p>
    <p>PD SPD</p>
    <p>SPT</p>
    <p>N o</p>
    <p>rm a</p>
    <p>l S p</p>
    <p>a ce</p>
    <p>S e</p>
    <p>cu re</p>
    <p>S p</p>
    <p>a ce</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 13/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Key Technique II: Execute Trapping</p>
    <p>SecPod traps malicious privileged instructions executed by guest  It can trap intended and unintended2 privileged instructions</p>
    <p>Hypervisor notifies secure space trapped instructions via upcalls  Similar to signal delivery in the traditional OS</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 14/22</p>
  </div>
  <div class="page">
    <p>SecPod Design</p>
    <p>Trapped Sensitive Instructions</p>
    <p>Instruction Semantics LGDT Load global descriptor table LLDT load local descriptor table LIDT load interrupt descriptor table LMSW load machine status word MOV to CR0 write to CR0 MOV to CR4 write to CR4 MOV to CR8 write to CR8 MOV to CR3 load a new page table WRMSR write machine-specific registers</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 15/22</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implementation</p>
    <p>Paging delegation  Leverage Linux paravirtualization interface: pv mmu ops</p>
    <p>Execution trapping implemented in the Hypervisor (KVM)</p>
    <p>Security tools:  Compiled as ELF libraries and loaded into secure space  Implemented an example tool to prevent unauthorized kernel code from execution (Patagonix [USENIX Sec 08], NICKLE [RAID 08])</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 16/22</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implementation</p>
    <p>Paging delegation  Leverage Linux paravirtualization interface: pv mmu ops</p>
    <p>Execution trapping implemented in the Hypervisor (KVM)</p>
    <p>Security tools:  Compiled as ELF libraries and loaded into secure space  Implemented an example tool to prevent unauthorized kernel code from execution (Patagonix [USENIX Sec 08], NICKLE [RAID 08])</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 16/22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Security Analysis</p>
    <p>Maliciously modify secure space memory  Secure space memory is not mapped in the normal space</p>
    <p>try to map the secure space memory in the guest</p>
    <p>Directly change the page mapping</p>
    <p>SPT is isolated</p>
    <p>Ask SecPod to map secure memory</p>
    <p>SPT update validation</p>
    <p>Misuse privileged instructions  Privileged instructions by guest are trapped and verified</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 17/22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Security Analysis</p>
    <p>Maliciously modify secure space memory  Secure space memory is not mapped in the normal space</p>
    <p>try to map the secure space memory in the guest  Directly change the page mapping</p>
    <p>SPT is isolated</p>
    <p>Ask SecPod to map secure memory</p>
    <p>SPT update validation</p>
    <p>Misuse privileged instructions  Privileged instructions by guest are trapped and verified</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 17/22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Security Analysis</p>
    <p>Maliciously modify secure space memory  Secure space memory is not mapped in the normal space</p>
    <p>try to map the secure space memory in the guest  Directly change the page mapping  SPT is isolated  Ask SecPod to map secure memory  SPT update validation</p>
    <p>Misuse privileged instructions  Privileged instructions by guest are trapped and verified</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 17/22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Security Analysis</p>
    <p>Maliciously modify secure space memory  Secure space memory is not mapped in the normal space</p>
    <p>try to map the secure space memory in the guest  Directly change the page mapping  SPT is isolated  Ask SecPod to map secure memory  SPT update validation</p>
    <p>Misuse privileged instructions  Privileged instructions by guest are trapped and verified</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 17/22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Performance Evaluation: LMBench</p>
    <p>null open/close</p>
    <p>fork signal_install</p>
    <p>m m</p>
    <p>ap</p>
    <p>T C P_bandw</p>
    <p>idth</p>
    <p>file(create)</p>
    <p>select(250fd)</p>
    <p>stat ctxsw</p>
    <p>(4p/16k)</p>
    <p>B copy(libc)</p>
    <p>m ain_m</p>
    <p>em</p>
    <p>P e rf</p>
    <p>o rm</p>
    <p>a n</p>
    <p>c e O</p>
    <p>v e rh</p>
    <p>e a d</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 18/22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Performance Evaluation: SysBench OLTP</p>
    <p>T h ro</p>
    <p>u g h p u t</p>
    <p>(t ra</p>
    <p>n s/</p>
    <p>se c )</p>
    <p>Number of Threads</p>
    <p>Linux</p>
    <p>SecPod</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 19/22</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Related Work</p>
    <p>Virtualization-based security  Malware analysis: Ether[CCS08]  Rootkit detection and prevention: PoKeR[EuroSys09]  Virtual machine introspection: Virtuoso[S&amp;P11], SIM[CCS09]</p>
    <p>Kernel/user application security  Exploit mitigation techniques: ASLR, DEP, CFI[CCS07]  Kernel/hypervisor memory integrity: TZ-RKP[CCS14], HyperSafe[S&amp;P10], Nested Kernel[ASPLOS15]</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 20/22</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Summary</p>
    <p>SecPod &amp; Security Tool Code/Data</p>
    <p>SPT Pool</p>
    <p>Entry Gate</p>
    <p>pv_mmu_ops.alloc_pud pv_mmu_ops.set_pud pv_mmu_ops.write_cr3 ...</p>
    <p>Normal Space Secure Space</p>
    <p>H yp</p>
    <p>e rviso</p>
    <p>r</p>
    <p>Trusted Boot</p>
    <p>DMA Protection</p>
    <p>G u</p>
    <p>e st GPT</p>
    <p>Exit Gate</p>
    <p>User Mode</p>
    <p>Kernel Mode</p>
    <p>Key Technique I: Paging Delegation</p>
    <p>VMExit Handler</p>
    <p>Sensitive Instructions</p>
    <p>Key Technique II: Execution Trapping</p>
    <p>Up Call</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 21/22</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Thank you &amp; Questions?</p>
    <p>SecPod: A Framework for Virtualization-based Security Systems 2015 USENIX ATC July 8-10 2015 Santa Clara, CA 22/22</p>
  </div>
</Presentation>
