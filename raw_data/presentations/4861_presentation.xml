<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>http://www.c2s2.org</p>
    <p>Amin Firoozshahian, Alex Solomatnikov</p>
    <p>Hicamp Systems Inc.</p>
    <p>Ofer Shacham, Zain Asgar,</p>
    <p>Stephen Richardson, Christos Kozyrakis, Mark Horowitz</p>
    <p>Stanford University</p>
    <p>A Memory System Design Framework: Creating Smart Memories</p>
  </div>
  <div class="page">
    <p>An Era of Chip-Multiprocessors</p>
    <p>Single-thread performance scaling has stopped</p>
    <p>More processor cores on the same die</p>
    <p>Claim:</p>
    <p>Scale performance</p>
    <p>Keep design complexity constant</p>
    <p>IBM Cell Intel Nehalem Sun Rock</p>
  </div>
  <div class="page">
    <p>Looking a Little More Closely</p>
    <p>Sun Rock</p>
  </div>
  <div class="page">
    <p>Reality</p>
    <p>Replicated cores</p>
    <p>Incredibly complicated memory system</p>
    <p>Large amounts of logic</p>
    <p>Innovation is in the memory system</p>
    <p>Transactions, streaming, fast synchronization, security, etc.</p>
    <p>Never exactly the same</p>
    <p>Where all the bugs are!</p>
  </div>
  <div class="page">
    <p>ISA for Memory Systems</p>
    <p>Can we regularize the memory system hardware?</p>
    <p>Program it rather than Design it?</p>
    <p>Benefits:</p>
    <p>Reduce design time</p>
    <p>Patch errors</p>
    <p>Run-time tuning</p>
    <p>How can we do this?</p>
    <p>Amin Firoozshahian 5</p>
  </div>
  <div class="page">
    <p>Amin Firoozshahian</p>
    <p>Shared Memory System</p>
    <p>Resources:</p>
    <p>Local memory</p>
    <p>Data, state bits</p>
    <p>Interconnect</p>
    <p>Controllers</p>
    <p>Operations:</p>
    <p>Probing state bits</p>
    <p>Track requests</p>
    <p>Communication</p>
    <p>Data movements (spill / refill)</p>
    <p>$</p>
    <p>Cache Controller</p>
    <p>Proc Proc</p>
    <p>$</p>
    <p>Cache Controller</p>
    <p>Interconnect</p>
    <p>Memory</p>
    <p>miss</p>
    <p>Msg</p>
  </div>
  <div class="page">
    <p>Amin Firoozshahian</p>
    <p>Streaming Memory System</p>
    <p>Resources:</p>
    <p>Local memory</p>
    <p>Interconnect</p>
    <p>Controllers</p>
    <p>Operations:</p>
    <p>Communication</p>
    <p>Data movements</p>
    <p>Track outstanding transfers</p>
    <p>Local Mem</p>
    <p>Interconnect</p>
    <p>Memory</p>
    <p>Proc</p>
    <p>Local Mem</p>
    <p>DMA DMA</p>
    <p>Proc</p>
  </div>
  <div class="page">
    <p>Transactional Memory System</p>
    <p>Resources</p>
    <p>Local memory</p>
    <p>More state bits</p>
    <p>Interconnect</p>
    <p>Controllers</p>
    <p>Operations</p>
    <p>Data movements</p>
    <p>State checks / updates</p>
    <p>Communication</p>
    <p>$</p>
    <p>Commit Controller</p>
    <p>$</p>
    <p>Commit Controller</p>
    <p>Interconnect</p>
    <p>Memory</p>
    <p>Addr. FIFO</p>
    <p>Addr. FIFO</p>
    <p>Proc Proc</p>
  </div>
  <div class="page">
    <p>Commonalities</p>
    <p>Same resources and operations</p>
    <p>Different in:</p>
    <p>How the operations are sequenced</p>
    <p>Interpretation of state bits</p>
    <p>We need:</p>
    <p>Flexible local storage and interconnect</p>
    <p>Programmable controllers</p>
    <p>Amin Firoozshahian 9</p>
  </div>
  <div class="page">
    <p>Local Memories</p>
    <p>Programmable memory mat</p>
    <p>Data array</p>
    <p>State bits</p>
    <p>PLA logic</p>
    <p>Comparator</p>
    <p>Accessed by</p>
    <p>Address, Opcode</p>
    <p>Returns</p>
    <p>data, state, compare result</p>
    <p>[K. Mai et.al., Architecture and Circuit Techniques for a Reconfigurable Memory Block,</p>
    <p>IEEE International Solid-State Circuits Conference, February 2004 10</p>
    <p>Data State</p>
    <p>Cmp</p>
    <p>Update</p>
    <p>Address</p>
    <p>Opcode</p>
  </div>
  <div class="page">
    <p>Programmable Controllers</p>
    <p>Use an off-the-shelf processor?</p>
    <p>FLASH, Typhoon, etc.</p>
    <p>Too slow</p>
    <p>All the way to the L1 cache interface</p>
    <p>Our approach:</p>
    <p>Micro-coded engines (functional units)</p>
    <p>Each class of operations in a separate engine</p>
    <p>Amin Firoozshahian 11</p>
  </div>
  <div class="page">
    <p>Programming</p>
    <p>A set of subroutines</p>
    <p>A set of basic operations</p>
    <p>Executed in a functional unit</p>
    <p>Each one calls next</p>
    <p>Link subroutines to each other</p>
    <p>Amin Firoozshahian 12</p>
    <p>Msg</p>
    <p>Unit 1 Unit 3 Msg</p>
    <p>Unit 2</p>
  </div>
  <div class="page">
    <p>Microarchitecture</p>
    <p>A small pipeline</p>
    <p>Configuration (program) memories</p>
    <p>Horizontal micro-code</p>
    <p>Decide what to do</p>
    <p>Decide how to proceed</p>
  </div>
  <div class="page">
    <p>Organization</p>
    <p>Tracking State</p>
    <p>Update Data</p>
    <p>Movement</p>
    <p>USHR MSHR Line Buffers</p>
    <p>Processor Interface Network Interface</p>
    <p>Interrupt</p>
    <p>DMA DMA DMA</p>
    <p>To/From Processors To/From Network</p>
    <p>To/From local storages</p>
  </div>
  <div class="page">
    <p>Read Miss Example</p>
    <p>Amin Firoozshahian 15</p>
    <p>Tracking State</p>
    <p>Update Data</p>
    <p>Movement</p>
    <p>USHR MSHR Line Buffers</p>
    <p>Processor Interface Network Interface</p>
    <p>Interrupt</p>
    <p>DMA DMA DMA</p>
    <p>Miss Read Miss</p>
    <p>Evict</p>
    <p>Access Tags</p>
    <p>Line Read</p>
    <p>Access Data</p>
    <p>WB / Miss</p>
    <p>Spill Read Miss</p>
    <p>Read Miss</p>
    <p>Read Miss</p>
  </div>
  <div class="page">
    <p>Programming Complexity</p>
    <p>Cache Coherence</p>
    <p>Message types received by controller: 6</p>
    <p>From processor: Cache miss, Upgrade miss, Prefetch</p>
    <p>From network: Coherence request, Refill, Upgrade</p>
    <p>Subroutine types in Tracking unit: 11</p>
    <p>Streaming</p>
    <p>Message types: 5</p>
    <p>Direct access, Gather, Scatter, Gather reply, Scatter ack.</p>
    <p>Subroutine types in Tracking unit: 9</p>
  </div>
  <div class="page">
    <p>Smart Memories</p>
    <p>ST 90nm-GP CMOS technology</p>
    <p>m</p>
  </div>
  <div class="page">
    <p>Status</p>
    <p>System bring-up.....</p>
    <p>System configuration....</p>
    <p>JTAG tests....</p>
    <p>Coherent shared memory tests</p>
    <p>Transactional tests (TCC).</p>
    <p>Streaming tests</p>
    <p>More testing in progress</p>
    <p>Planning for a 32-processor system Test Chip</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Comparison with a hardwired controller</p>
    <p>But which one? You would claim I am cheating!</p>
    <p>Compare with an ideal controller</p>
    <p>Assume controller actions occur in zero time</p>
    <p>Account for external actions</p>
    <p>Data read/write</p>
    <p>Message send/receive</p>
    <p>Gives an upper bound</p>
    <p>Amin Firoozshahian 19</p>
  </div>
  <div class="page">
    <p>Average Read Latency</p>
    <p>Amin Firoozshahian 20</p>
    <p>Coherent</p>
    <p>Shared Memory Streaming Transactions</p>
    <p>F F</p>
    <p>T</p>
    <p>M P</p>
    <p>E G</p>
    <p>n c</p>
    <p>B a rn</p>
    <p>e s</p>
    <p>F M</p>
    <p>M</p>
    <p>rt</p>
    <p>B ito</p>
    <p>n ic</p>
    <p>S</p>
    <p>o rt</p>
    <p>M P</p>
    <p>E G</p>
    <p>n c</p>
    <p>B a rn</p>
    <p>e s</p>
    <p>M P</p>
    <p>C y</p>
    <p>c le</p>
    <p>s</p>
    <p>Average Read Latency - 32 processor system</p>
    <p>Real Controllers</p>
    <p>Ideal controllers</p>
  </div>
  <div class="page">
    <p>Execution Time</p>
    <p>Total average overhead: 15%</p>
    <p>Amin Firoozshahian 21</p>
    <p>Coherent</p>
    <p>Shared Memory Streaming Transactions</p>
    <p>O v e rh</p>
    <p>e a d</p>
    <p>( %</p>
    <p>)</p>
    <p>Average Overhead (%)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Strong similarity between memory systems</p>
    <p>Common resources and operations</p>
    <p>A framework for memory systems design</p>
    <p>Generate specific instances</p>
    <p>Modest performance overhead</p>
    <p>Compared to ideal systems</p>
    <p>Amin Firoozshahian 22</p>
  </div>
</Presentation>
