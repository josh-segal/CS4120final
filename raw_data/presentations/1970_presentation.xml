<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED</p>
    <p>Erasure Code with</p>
    <p>Shingled Local Parity Groups for</p>
    <p>Efficient Recovery from</p>
    <p>Multiple Disk Failures</p>
    <p>Takeshi Miyamae, Takanori Nakao, Kensuke Shiozawa</p>
    <p>Fujitsu Laboratories Ltd.</p>
    <p>October 5th, 2014 (HotDep14)</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED1</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED2</p>
  </div>
  <div class="page">
    <p>Backgrounds (1)</p>
    <p>Erasure codes for content data</p>
    <p>Content data for ICT services is ever-growing</p>
    <p>Demand for higher space efficiency and durability</p>
    <p>Reed Solomon code (de facto erasure code) improves both</p>
    <p>Reed Solomon Code(Old style)Triple Replication</p>
    <p>However, Reed Solomon code is not so recovery-efficient</p>
    <p>content data</p>
    <p>copy copy</p>
    <p>parity parity</p>
    <p>content data</p>
  </div>
  <div class="page">
    <p>Backgrounds (2)</p>
    <p>Local parity improves recovery efficiency</p>
    <p>Data recovery should be as efficient as possible</p>
    <p>in order to avoid multiple disk failures and data loss</p>
    <p>Reed Solomon code is improved by local parity methods</p>
    <p>data read from disks is reduced during recovery</p>
    <p>Data Chunks</p>
    <p>Parity Chunks</p>
    <p>Reed Solomon Code</p>
    <p>(No Local Parities) Local Parities</p>
    <p>data read from disks</p>
    <p>However, multiple disk failures is out of consideration</p>
    <p>A Local Parity Method</p>
  </div>
  <div class="page">
    <p>Local parity method for multiple disk failures</p>
    <p>Existing methods are optimized for single disk failure</p>
    <p>e.g. Microsoft MS-LRC, Facebook Xorbas</p>
    <p>However, Its recovery overhead is large in case of</p>
    <p>multiple disk failures</p>
    <p>because they have a chance to use global parities for recovery</p>
    <p>Our Goal</p>
    <p>A Local Parity Method</p>
    <p>Our goal is a method efficiently handling multiple disk failures</p>
    <p>Multiple Disk Failures</p>
  </div>
  <div class="page">
    <p>SHEC (= Shingled Erasure Code)</p>
    <p>An erasure code only with local parity groups</p>
    <p>to improve recovery efficiency in case of multiple disk failures</p>
    <p>The calculation ranges of local parities are shifted and</p>
    <p>partly overlap with each other (like the shingles on a roof)</p>
    <p>to keep enough durability</p>
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED</p>
    <p>Our Proposal Method (SHEC)</p>
    <p>k : data chunks (=10)</p>
    <p>m :</p>
    <p>parity</p>
    <p>chunks</p>
    <p>(=6) l : calculation range (=5)</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED7</p>
  </div>
  <div class="page">
    <p>Erasure Codes Properties</p>
    <p>Space Efficiency The ratio of user data</p>
    <p>Durability Probability of Data Loss (PDL)</p>
    <p>Recovery Efficiency The ratio of data read during recovery</p>
    <p>We picked three erasure codes properties for</p>
    <p>SHECs theoretical analysis</p>
    <p>Three-Way Trade-Off</p>
    <p>The properties satisfy a three-way trade-off relationship</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED</p>
    <p>High Recovery Efficiency from Multiple Disk Failures</p>
    <p>The amount of data read from disks is minimized</p>
    <p>(e.g.) When D6/D9 break out, SHEC will select P3/P4 for recovery</p>
    <p>SHECs Recovery Efficiency</p>
    <p>No need to be read</p>
    <p>a minimum union of calculation</p>
    <p>ranges including D6/D9</p>
    <p>Recovery efficiency is one of the biggest features of SHEC</p>
  </div>
  <div class="page">
    <p>SHEC is expected to recover more efficiently than</p>
    <p>the other methods in case of multiple disk failures</p>
    <p>Other methods : Reed Solomon, MS-LRC and Xorbas</p>
    <p>Comparison with Other Methods</p>
    <p>multiple disk failures</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED</p>
    <p>Durability Estimator (=ml/k)</p>
    <p>Indicates the number up to how many disks can be failed</p>
    <p>Therefore, ml/k+1 disk failures can cause data loss</p>
    <p>(e.g.) SHEC(10,6,5)s durability estimator is three. Therefore, four</p>
    <p>failures of D1/P1/P5/P6 cause data loss because D1 cannot be</p>
    <p>recovered from the remaining chunks</p>
    <p>SHECs Durability</p>
    <p>Durability Estimator</p>
    <p>ml/k = 3</p>
    <p>k =10</p>
    <p>m = 6 l = 5</p>
  </div>
  <div class="page">
    <p>Upper area becomes sparse</p>
    <p>Reed Solomon code has few recovery-efficient layouts</p>
    <p>Property Map of Reed Solomon code</p>
    <p>Durability(PDL)</p>
    <p>R e c o v e ry</p>
    <p>E ff ic</p>
    <p>ie n c y</p>
    <p>Space Efficiency</p>
    <p>RAID6=RS(4,2)</p>
    <p>sparse</p>
  </div>
  <div class="page">
    <p>Upper area is filled with SHEC-specific layouts</p>
    <p>SHEC provides many recovery-efficient layouts</p>
    <p>SHEC is more adjustable than Reed Solomon code</p>
    <p>Property Map of SHEC</p>
    <p>Durability(PDL)</p>
    <p>R e c o v e ry</p>
    <p>E ff ic</p>
    <p>ie n c y</p>
    <p>Space Efficiency</p>
    <p>RAID6=RS(4,2)</p>
    <p>SHEC(6,5,2)</p>
    <p>dense</p>
  </div>
  <div class="page">
    <p>Single disk failure case</p>
    <p>MS-LRC is plotted farther from the origin (= superior)</p>
    <p>SHEC is plotted in a broader area (= more flexible)</p>
    <p>Comparison with MS-LRC (1)</p>
    <p>(conditions: 16 OSDs)</p>
    <p>SHECMS-LRC emulation</p>
    <p>Space EfficiencySpace Efficiency</p>
    <p>R e</p>
    <p>c o</p>
    <p>v e</p>
    <p>ry E</p>
    <p>ff ic</p>
    <p>ie n</p>
    <p>c y</p>
    <p>R e</p>
    <p>c o</p>
    <p>v e</p>
    <p>ry E</p>
    <p>ff ic</p>
    <p>ie n</p>
    <p>c y</p>
    <p>durabilitydurability</p>
  </div>
  <div class="page">
    <p>Double disk failures case</p>
    <p>Both are plotted at the same distance from the origin</p>
    <p>SHEC is plotted in a broader area (=more flexible)</p>
    <p>Comparison with MS-LRC (2)</p>
    <p>(conditions: 16 OSDs)</p>
    <p>MS-LRC emulation SHEC</p>
    <p>Space Efficiency Space Efficiency</p>
    <p>R e</p>
    <p>c o</p>
    <p>v e</p>
    <p>ry E</p>
    <p>ff ic</p>
    <p>ie n</p>
    <p>c y</p>
    <p>R e</p>
    <p>c o</p>
    <p>v e</p>
    <p>ry E</p>
    <p>ff ic</p>
    <p>ie n</p>
    <p>c y</p>
    <p>durability durability</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED16</p>
  </div>
  <div class="page">
    <p>SHEC is implemented as an erasure code plugin of</p>
    <p>Ceph, an open source scalable object storage</p>
    <p>SHECs Implementation on Ceph</p>
    <p>into data/parity chunks,</p>
    <p>distributed over OSDs</p>
    <p>encode/decode logic is separated</p>
    <p>from main part of Ceph Storage</p>
    <p>SHEC plugin</p>
  </div>
  <div class="page">
    <p>Experiment of Recovery Efficiency</p>
    <p>Experiment Abstract</p>
    <p>Test items : Recovery completion time / Resource profiles</p>
    <p>Failure degree : Double disk failures</p>
    <p>Comparison : Reed Solomon RS(6,4) / SHEC(6,4,3)</p>
    <p>Hardware and Software Setup</p>
  </div>
  <div class="page">
    <p>SHECs recovery completion time was 18.6% faster</p>
    <p>OTOH, total amount of data read from disks was 26%</p>
    <p>decreased (= theoretical improvement)</p>
    <p>Recovery Completion Time</p>
    <p>Why were not these figures the same?</p>
  </div>
  <div class="page">
    <p>Disks were only partly (65%) bottlenecked</p>
    <p>The Reason (= Disk utilization)</p>
    <p>There is 35% room for recovery time improvement</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED21</p>
  </div>
  <div class="page">
    <p>Copyright 2014 FUJITSU LABORATORIES LIMITED</p>
    <p>SHEC is recovery-efficient especially in case of multiple</p>
    <p>disk failures</p>
    <p>Solomon code</p>
    <p>because SHEC provides many recovery-efficient layouts</p>
    <p>including Reed Solomon codes</p>
    <p>experiment</p>
    <p>SHECs recovery time was 18.6% faster than Reed</p>
    <p>Solomon code in case of double disk failures</p>
    <p>Summary</p>
  </div>
  <div class="page"/>
</Presentation>
