<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fast Computation of Fast Computation of Database Operations using Database Operations using Graphics ProcessorsGraphics Processors</p>
    <p>Naga K. Govindaraju Univ. of North Carolina</p>
  </div>
  <div class="page">
    <p>GoalGoal</p>
    <p>Utilize graphics processors for fast computation of common database operations</p>
  </div>
  <div class="page">
    <p>Motivation: Fast operationsMotivation: Fast operations</p>
    <p>Increasing database sizes</p>
    <p>Faster processor speeds but low improvement in query execution time  Memory stalls</p>
    <p>Branch mispredictions  Resource stalls Eg. Instruction dependency</p>
  </div>
  <div class="page">
    <p>Graphics ProcessorsGraphics Processors</p>
    <p>Present in most PCs</p>
    <p>Designed primarily for fast rendering  games</p>
    <p>High growth rate</p>
  </div>
  <div class="page">
    <p>CPU</p>
  </div>
  <div class="page">
    <p>GPU</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>Graphics ProcessorsGraphics Processors</p>
    <p>Large computational power  Simple but efficient pipeline design  Multiple processing units</p>
    <p>Programmable</p>
    <p>Vector Processors</p>
  </div>
  <div class="page">
    <p>Graphics ProcessorsGraphics Processors</p>
    <p>Low bandwidth to CPU</p>
  </div>
  <div class="page">
    <p>Bandwidth</p>
    <p>CPU</p>
    <p>GPU</p>
  </div>
  <div class="page">
    <p>Graphics Processors: Design Issues Graphics Processors: Design Issues</p>
    <p>Design database operations avoiding frame buffer readbacks</p>
    <p>No arbitrary writes  Design algorithms avoiding data rearrangements</p>
    <p>Programmable pipeline has poor branching  Design algorithms without branching in programmable</p>
    <p>pipeline - evaluate branches using fixed function tests</p>
  </div>
  <div class="page">
    <p>Related WorkRelated Work</p>
    <p>Hardware Acceleration for DB operations</p>
    <p>Vector processors for relational DB operations [Meki and Kambayashi 2000]</p>
    <p>SIMD instructions for relational DB operations [ Zhou and Ross 2002]</p>
    <p>GPUs for spatial selections and joins [Sun et al. 2003]</p>
    <p>General purpose computing using GPUs  Presented in rest of course.</p>
  </div>
  <div class="page">
    <p>OutlineOutline</p>
    <p>Database Operations on GPUs</p>
    <p>Implementation &amp; Results</p>
    <p>Analysis</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>OutlineOutline</p>
    <p>Database Operations on GPUs</p>
    <p>Implementation &amp; Results</p>
    <p>Analysis</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>OverviewOverview</p>
    <p>Database operations require comparisons</p>
    <p>Utilize depth test functionality of GPUs for performing comparisons  Implements all possible comparisons &lt;, &lt;=, &gt;=, &gt;, ==, !=,</p>
    <p>ALWAYS, NEVER</p>
    <p>Utilize stencil test for data validation and storing results of comparison operations</p>
  </div>
  <div class="page">
    <p>Basic OperationsBasic Operations</p>
    <p>Basic SQL query</p>
    <p>Select A</p>
    <p>From T</p>
    <p>Where C</p>
    <p>A= attributes or aggregations (SUM, COUNT, MAX etc)</p>
    <p>T=relational table</p>
    <p>C= Boolean Combination of Predicates (using operators AND, OR, NOT)</p>
  </div>
  <div class="page">
    <p>Outline: Database OperationsOutline: Database Operations</p>
    <p>Predicate Evaluation</p>
    <p>Boolean Combinations of Predicates</p>
    <p>Aggregations</p>
  </div>
  <div class="page">
    <p>Outline: Database OperationsOutline: Database Operations</p>
    <p>Predicate Evaluation</p>
    <p>Boolean Combinations of Predicates</p>
    <p>Aggregations</p>
  </div>
  <div class="page">
    <p>Basic OperationsBasic Operations</p>
    <p>Predicates  ai op constant or ai op aj  Op is one of &lt;,&gt;,&lt;=,&gt;=,!=, =, TRUE, FALSE</p>
    <p>Boolean combinations  Conjunctive Normal Form (CNF) expression evaluation</p>
    <p>Aggregations  COUNT, SUM, MAX, MEDIAN, AVG</p>
  </div>
  <div class="page">
    <p>Predicate EvaluationPredicate Evaluation</p>
    <p>ai op constant (d)</p>
    <p>Copy the attribute values ai into depth buffer</p>
    <p>Define the comparison operation using depth test  Draw a screen filling quad at depth d</p>
  </div>
  <div class="page">
    <p>Screen</p>
    <p>P If ( ai op d )</p>
    <p>pass fragment</p>
    <p>Else</p>
    <p>reject fragment</p>
    <p>ai op d</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Predicate EvaluationPredicate Evaluation</p>
    <p>ai op aj  Treat as (ai  aj) op 0</p>
    <p>Semi-linear queries  Defined as linear combination of attribute values compared</p>
    <p>against a constant  Linear combination is computed as a dot product of two</p>
    <p>vectors</p>
    <p>Utilize the vector processing capabilities of GPUs</p>
  </div>
  <div class="page">
    <p>Data ValidationData Validation</p>
    <p>Performed using stencil test</p>
    <p>Valid stencil values are set to a given value s</p>
    <p>Data values that fail predicate evaluation are set to zero</p>
  </div>
  <div class="page">
    <p>Outline: Database OperationsOutline: Database Operations</p>
    <p>Predicate Evaluation</p>
    <p>Boolean Combinations of Predicates</p>
    <p>Aggregations</p>
  </div>
  <div class="page">
    <p>Boolean CombinationsBoolean Combinations</p>
    <p>Expression provided as a CNF</p>
    <p>CNF is of form (A1 AND A2 AND  AND Ak)</p>
    <p>where Ai = (B i 1 OR B</p>
    <p>i 2 OR  OR B</p>
    <p>i mi )</p>
    <p>CNF does not have NOT operator</p>
    <p>If CNF has a NOT operator, invert comparison operation to eliminate NOT</p>
    <p>Eg. NOT (ai &lt; d) =&gt; (ai &gt;= d)</p>
  </div>
  <div class="page">
    <p>Boolean CombinationBoolean Combination</p>
    <p>We will focus on (A1 AND A2)</p>
    <p>All cases are considered</p>
    <p>A1 = (TRUE AND A1)</p>
    <p>If Ei = (A1 AND A2 AND  AND Ai-1 AND Ai),</p>
    <p>Ei = (Ei-1 AND Ai)</p>
  </div>
  <div class="page">
    <p>A1 AND A2A1 AND A2</p>
    <p>A1</p>
    <p>B21</p>
    <p>B22</p>
    <p>B23</p>
  </div>
  <div class="page">
    <p>A1 AND A2A1 AND A2</p>
    <p>A1</p>
    <p>Stencil value = 1</p>
  </div>
  <div class="page">
    <p>A1 AND A2A1 AND A2</p>
    <p>A1</p>
    <p>Stencil value = 0</p>
    <p>Stencil value = 1</p>
  </div>
  <div class="page">
    <p>A1 AND A2A1 AND A2</p>
    <p>A1</p>
    <p>Stencil = 0</p>
    <p>Stencil = 1</p>
    <p>B21</p>
    <p>Stencil=2</p>
    <p>B22</p>
    <p>Stencil=2</p>
    <p>B23</p>
    <p>Stencil=2</p>
  </div>
  <div class="page">
    <p>A1 AND A2A1 AND A2</p>
    <p>A1</p>
    <p>Stencil = 0</p>
    <p>Stencil = 1</p>
    <p>B21</p>
    <p>B22</p>
    <p>B23</p>
    <p>Stencil=2</p>
    <p>Stencil=2</p>
    <p>Stencil=2</p>
  </div>
  <div class="page">
    <p>A1 AND A2A1 AND A2</p>
    <p>Stencil = 0</p>
    <p>Stencil=2 A1 AND B</p>
    <p>Stencil = 2 A1 AND B</p>
    <p>A1 AND B 2 3</p>
  </div>
  <div class="page">
    <p>Range QueryRange Query</p>
    <p>Compute ai within [low, high]</p>
    <p>Evaluated as ( ai &gt;= low ) AND ( ai &lt;= high )</p>
  </div>
  <div class="page">
    <p>Outline: Database OperationsOutline: Database Operations</p>
    <p>Predicate Evaluation</p>
    <p>Boolean Combinations of Predicates</p>
    <p>Aggregations</p>
  </div>
  <div class="page">
    <p>AggregationsAggregations</p>
    <p>COUNT, MAX, MIN, SUM, AVG</p>
    <p>No data rearrangements</p>
  </div>
  <div class="page">
    <p>COUNTCOUNT</p>
    <p>Use occlusion queries to get pixel pass count</p>
    <p>Syntax:  Begin occlusion query  Perform database operation  End occlusion query  Get count of number of attributes that passed database</p>
    <p>operation</p>
    <p>Involves no additional overhead!</p>
  </div>
  <div class="page">
    <p>MAX, MIN, MEDIANMAX, MIN, MEDIAN</p>
    <p>We compute Kth-largest number</p>
    <p>Traditional algorithms require data rearrangements</p>
    <p>We perform no data rearrangements, no frame buffer readbacks</p>
  </div>
  <div class="page">
    <p>K-th Largest NumberK-th Largest Number</p>
    <p>Say vk is the k-th largest number</p>
    <p>How do we generate a number m equal to vk?</p>
    <p>Without knowing vks bit-representation and using comparisons</p>
  </div>
  <div class="page">
    <p>Our algorithmOur algorithm</p>
    <p>Initialize m to 0</p>
    <p>Start with the MSB and scan all bits till LSB</p>
    <p>At each bit, put 1 in the corresponding bit-position of m</p>
    <p>If m&gt;vk, make that bit 0</p>
    <p>Proceed to the next bit</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 00000000</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 10000000</p>
    <p>M &lt;= Vk</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11000000</p>
    <p>M &lt;= Vk</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11100000</p>
    <p>M &lt;= Vk</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11110000</p>
    <p>M &gt; Vk</p>
    <p>Make the bit 0</p>
    <p>M = 11100000</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11101000</p>
    <p>M &lt;= Vk</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11101100</p>
    <p>M &gt; Vk</p>
    <p>Make this bit 0</p>
    <p>M = 11101000</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11101010</p>
    <p>M &gt; Vk</p>
    <p>M = 11101000</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Vk = 11101001</p>
    <p>M = 11101001</p>
    <p>M &lt;= Vk</p>
  </div>
  <div class="page">
    <p>K-th Largest NumberK-th Largest Number</p>
    <p>Lemma: Let vk be the k-th largest number. Let count</p>
    <p>be the number of values &gt;= m</p>
    <p>If count &gt; (k-1): m&lt;= vk  If count &lt;= (k-1): m&gt;vk</p>
    <p>Apply the earlier algorithm ensuring that count &gt;(k1)</p>
  </div>
  <div class="page">
    <p>ExampleExample</p>
    <p>Integers ranging from 0 to 255</p>
    <p>Represent them in depth buffer</p>
    <p>Idea  Use depth functions to perform comparisons  Use NV_occlusion_query to determine maximum</p>
  </div>
  <div class="page">
    <p>Example: Parallel MaxExample: Parallel Max  S={10,24,37,99,192,200,200,232}  Step 1: Draw Quad at 128</p>
    <p>S = {10,24,37,99,192,200,200,232}</p>
    <p>Step 2: Draw Quad at 192  S = {10,24,37,192,200,200,232}</p>
    <p>Step 3: Draw Quad at 224  S = {10,24,37,192,200,200,232}</p>
    <p>Step 4: Draw Quad at 240  No values pass  Step 5: Draw Quad at 232</p>
    <p>S = {10,24,37,192,200,200,232}</p>
    <p>Step 6,7,8: Draw Quads at 236,234,233  No values pass</p>
    <p>Max is 232</p>
  </div>
  <div class="page">
    <p>Parallel MaxParallel Max</p>
    <p>Use occlusion queries to determine the next stepping value  No frame buffer readbacks</p>
  </div>
  <div class="page">
    <p>Accumulator, MeanAccumulator, Mean</p>
    <p>Accumulator - Use sorting algorithm and add all the values</p>
    <p>Mean  Use accumulator and divide by n</p>
    <p>Interval range arithmetic</p>
    <p>Alternative algorithm</p>
    <p>Use fragment programs  requires very few renderings  Use mipmaps [Harris et al. 02], fragment programs [Coombe et al.</p>
  </div>
  <div class="page">
    <p>AccumulatorAccumulator</p>
    <p>Data representation is of form</p>
    <p>ak 2 k + ak-1 2</p>
    <p>k-1 +  + a0</p>
    <p>Sum = sum(ak) 2 k+ sum(ak-1) 2</p>
    <p>k-1++sum(a0)</p>
    <p>Current GPUs support no bit-masking operations</p>
  </div>
  <div class="page">
    <p>TestBitTestBit</p>
    <p>Read the data value from texture, say ai</p>
    <p>F= frac(ai/2 k)</p>
    <p>If F&gt;=0.5, then k-th bit of ai is 1</p>
    <p>Set F to alpha value. Alpha test passes a fragment if alpha value&gt;=0.5</p>
  </div>
  <div class="page">
    <p>OutlineOutline</p>
    <p>Database Operations on GPUs</p>
    <p>Implementation &amp; Results</p>
    <p>Analysis</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>ImplementationImplementation</p>
    <p>Dell Precision Workstation with Dual 2.8GHz Xeon Processor</p>
    <p>NVIDIA GeForce FX 5900 Ultra GPU</p>
    <p>2GB RAM</p>
  </div>
  <div class="page">
    <p>ImplementationImplementation</p>
    <p>CPU  Intel compiler 7.1 with hyperthreading, multithreading, SIMD optimizations</p>
    <p>GPU  NVIDIA Cg Compiler</p>
  </div>
  <div class="page">
    <p>BenchmarksBenchmarks</p>
    <p>TCP/IP database with 1 million records and four attributes</p>
    <p>Census database with 360K records</p>
  </div>
  <div class="page">
    <p>Copy TimeCopy Time</p>
  </div>
  <div class="page">
    <p>Predicate EvaluationPredicate Evaluation</p>
  </div>
  <div class="page">
    <p>Range QueryRange Query</p>
  </div>
  <div class="page">
    <p>Multi-Attribute QueryMulti-Attribute Query</p>
  </div>
  <div class="page">
    <p>Semi-linear QuerySemi-linear Query</p>
  </div>
  <div class="page">
    <p>COUNTCOUNT</p>
    <p>Same timings for GPU implementation</p>
  </div>
  <div class="page">
    <p>Kth-LargestKth-Largest</p>
  </div>
  <div class="page">
    <p>Kth-LargestKth-Largest</p>
  </div>
  <div class="page">
    <p>Kth-Largest conditionalKth-Largest conditional</p>
  </div>
  <div class="page">
    <p>AccumulatorAccumulator</p>
  </div>
  <div class="page">
    <p>OutlineOutline</p>
    <p>Database Operations on GPUs</p>
    <p>Implementation &amp; Results</p>
    <p>Analysis</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Analysis: IssuesAnalysis: Issues</p>
    <p>Precision</p>
    <p>Copy time</p>
    <p>Integer arithmetic</p>
    <p>Depth compare masking</p>
    <p>Memory management</p>
    <p>No Branching</p>
    <p>No random writes</p>
  </div>
  <div class="page">
    <p>Analysis: PerformanceAnalysis: Performance</p>
    <p>Relative Performance Gain</p>
    <p>High Performance  Predicate evaluation, multi-attribute queries, semi-linear queries, count</p>
    <p>Medium Performance  Kth-largest number  Low Performance - Accumulator</p>
  </div>
  <div class="page">
    <p>High PerformanceHigh Performance</p>
    <p>Parallel pixel processing engines</p>
    <p>Pipelining</p>
    <p>Early Z-cull</p>
    <p>Eliminate branch mispredictions</p>
  </div>
  <div class="page">
    <p>Medium PerformanceMedium Performance</p>
    <p>Parallelism</p>
    <p>FX 5900 has clock speed 450MHz, 8 pixel processing engines</p>
    <p>Rendering single 1000x1000 quad takes 0.278ms</p>
    <p>Rendering 19 such quads take 5.28ms. Observed time is 6.6ms</p>
    <p>80% efficiency in parallelism!!</p>
  </div>
  <div class="page">
    <p>Low PerformanceLow Performance</p>
    <p>No gain over SIMD based CPU implementation</p>
    <p>Two main reasons:</p>
    <p>Lack of integer-arithmetic  Clock rate</p>
  </div>
  <div class="page">
    <p>AdvantagesAdvantages</p>
    <p>Algorithms progress at GPU growth rate</p>
    <p>Offload CPU work</p>
    <p>Fast due to massive parallelism on GPUs</p>
    <p>Algorithms could be generalized to any geometric shape  Eg. Max value within a triangular region</p>
  </div>
  <div class="page">
    <p>AdvantagesAdvantages</p>
    <p>Commodity hardware!</p>
  </div>
  <div class="page">
    <p>OutlineOutline</p>
    <p>Database Operations on GPUs</p>
    <p>Implementation &amp; Results</p>
    <p>Analysis</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>ConclusionsConclusions</p>
    <p>Novel algorithms to perform database operations on GPUs</p>
    <p>Evaluation of predicates, boolean combinations of predicates, aggregations</p>
    <p>Algorithms take into account GPU limitations</p>
    <p>No data rearrangements  No frame buffer readbacks</p>
  </div>
  <div class="page">
    <p>ConclusionsConclusions</p>
    <p>Preliminary comparisons with optimized CPU implementations is promising</p>
    <p>Discussed possible improvements on GPUs</p>
    <p>GPU as a useful co-processor</p>
  </div>
  <div class="page">
    <p>Future WorkFuture Work</p>
    <p>Improve performance of many of our algorithms</p>
    <p>More database operations such as join, sorting, classification and clustering.</p>
    <p>Queries on spatial and temporal databases</p>
  </div>
  <div class="page">
    <p>AcknowledgementsAcknowledgements</p>
    <p>Army Research Office</p>
    <p>National Science Foundation</p>
    <p>Office of Naval Research</p>
    <p>Intel Corporation</p>
    <p>NVIDIA Corporation</p>
    <p>Jasleen Sahni, UNC</p>
    <p>UNC GAMMA Group</p>
  </div>
</Presentation>
