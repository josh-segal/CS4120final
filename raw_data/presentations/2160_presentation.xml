<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ClusterOn: Building highly configurable and reusable clustered</p>
    <p>data services using simple data nodes Ali Anwar Yue Cheng Hai Huang Ali R. Butt</p>
  </div>
  <div class="page">
    <p>Growing data needs  new storage applications</p>
    <p>BigTable Redis Memcached</p>
    <p>DynamoDB</p>
    <p>K-V store</p>
    <p>Cassandra MongoDB HyperTable</p>
    <p>HyperDex</p>
    <p>NoSQL DB</p>
    <p>Swift Amazon S3</p>
    <p>Object store</p>
    <p>HDFS LustreFS</p>
    <p>DFS</p>
  </div>
  <div class="page">
    <p>A new storage system is born daily*</p>
    <p># st or ag e sy st em</p>
    <p>s</p>
    <p>Number of storage systems papers in SOSP, OSDI, ATC, and EuroSys conferences in the last decade</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Distributed storage systems are notoriously hard to implement!</p>
    <p>Fault-tolerant algorithms are notoriously hard to express correctly, even as pseudocode. This problem is worse when the code for such an algorithm is intermingled with all the other code that goes into building a complete system Tushar Chandra, Robert Griesemer, and Joshua Redstone, Paxos Made Live, PODC07</p>
  </div>
  <div class="page">
    <p>Case study: Redis 3.0.1</p>
    <p>replication.c  replicate data from master to slave, or slave to slave sentinel.c  monitoring nodes, handle failover from master to slave cluster.c  support cluster mode with multiple masters/shards These files are 20% of the code base (450K/2100K in size) 6</p>
  </div>
  <div class="page">
    <p>Quantifying LoC</p>
    <p>Redis HDFS</p>
    <p>% L oC</p>
    <p>Core IO  Core IO</p>
  </div>
  <div class="page">
    <p>Quantifying LoC</p>
    <p>Redis HDFS</p>
    <p>% L oC</p>
    <p>Core IO Management  Core IO  Distributed management</p>
  </div>
  <div class="page">
    <p>Quantifying LoC  Core IO  Distributed management  Etc: Config/auth/stats/</p>
    <p>compatibility ...</p>
    <p>Redis HDFS</p>
    <p>% L oC</p>
    <p>Core IO Management Etc</p>
    <p>Lines of code: 12955 31117</p>
  </div>
  <div class="page">
    <p>Quantifying LoC  Core IO  Distributed management  Etc: Config/auth/stats/</p>
    <p>compatibility ...</p>
    <p>Redis HDFS</p>
    <p>% L oC</p>
    <p>Core IO Management Etc</p>
    <p>Lines of code: 8237 56208 20202 25185</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Abstracting and generalizing common features/functionality can</p>
    <p>simplify development of new distributed storage applications</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Steps involved in developing a distributed storage application</p>
  </div>
  <div class="page">
    <p>(a) Vanilla</p>
  </div>
  <div class="page">
    <p>(b) Zookeeper based</p>
    <p>(a) Vanilla</p>
  </div>
  <div class="page">
    <p>(c) Vsync</p>
    <p>(a) Vanilla (b) Zookeeper based</p>
  </div>
  <div class="page">
    <p>(d) ClusterOn</p>
    <p>+ ClusterOn</p>
    <p>= Distributed applicaOon</p>
    <p>(a) Vanilla (b) Zookeeper based (c) Vsync</p>
  </div>
  <div class="page">
    <p>Design goals  Minimize framework overhead</p>
    <p>Enable effective service differentiation</p>
    <p>Realize reusable distributed storage platform components</p>
  </div>
  <div class="page">
    <p>Design challenges Diversity of applications</p>
    <p>- Replication policies - Sharding policies - Membership</p>
    <p>management - Failover recovery - Client connector</p>
    <p>CAP tradeoffs</p>
    <p>- Latency - Throughput - Availability</p>
    <p>Consistency</p>
    <p>- None - Strong - Eventual</p>
  </div>
  <div class="page">
    <p>Using ClusterOn</p>
    <p>Non-dist. kvstore App. developer</p>
    <p>{ Topology: Master-Slave, Consistency: Strong, Replication: 3, Sharding: false, }</p>
    <p>Bootstrap info</p>
    <p>kvs</p>
    <p>ClusterOn</p>
    <p>ReplicaOon Consistency Topology</p>
    <p>Load balancing Auto scaling Failover</p>
    <p>Metadata server</p>
    <p>D at al et</p>
    <p>kvs kvs kvs kvs kvs kvs kvs</p>
    <p>Object store File system Database etc...</p>
  </div>
  <div class="page">
    <p>ClusterOn architecture</p>
    <p>{ Topology: Master-Slave, Consistency: Strong, Replication: 3, Sharding: false, }</p>
    <p>Bootstrap info kvs</p>
    <p>ClusterOn</p>
    <p>ReplicaOon Consistency Topology</p>
    <p>Load balancing Auto scaling Failover</p>
    <p>Metadata server</p>
    <p>M id dl ew</p>
    <p>ar e</p>
    <p>A pp</p>
    <p>lic aO</p>
    <p>on</p>
    <p>kvs kvs kvs kvs kvs kvs kvs</p>
    <p>M S S</p>
    <p>User request Reply to user</p>
    <p>Master/slave; Strong consistency; Write request</p>
  </div>
  <div class="page">
    <p>Master/slave; Strong consistency; Failover</p>
    <p>ClusterOn architecture</p>
    <p>{ Topology: Master-Slave, Consistency: Strong, Replication: 3, Sharding: false, }</p>
    <p>Bootstrap info kvs</p>
    <p>ClusterOn</p>
    <p>ReplicaOon Consistency Topology</p>
    <p>Load balancing Auto scaling Failover</p>
    <p>Metadata server</p>
    <p>M id dl ew</p>
    <p>ar e</p>
    <p>kvs kvs kvs kvs kvs kvs kvs</p>
    <p>M S S</p>
    <p>kvs</p>
    <p>S</p>
    <p>A pp</p>
    <p>lic aO</p>
    <p>on</p>
    <p>Failover</p>
  </div>
  <div class="page">
    <p>Preliminary evaluation  Proof-of-concept prototype implementation</p>
    <p>ClusterOn framework (so far: 5000+ lines of C++; not including header files)</p>
    <p>Event handling, Protobuf  Strong consistency with Zookeeper</p>
    <p>Storage apps  Redis: in-memory KV cache/store  LevelDB: persistent KV store</p>
    <p>Measure overhead &amp; scalability 24</p>
  </div>
  <div class="page">
    <p>Data forwarding overhead: Redis</p>
    <p>Th ro ug hp</p>
    <p>ut (1</p>
    <p>Batch size</p>
    <p>Twemproxy + Redis</p>
  </div>
  <div class="page">
    <p>Data forwarding overhead: Redis</p>
    <p>Th ro ug hp</p>
    <p>ut (1</p>
    <p>Batch size</p>
    <p>Direct Redis</p>
    <p>Twemproxy + Redis</p>
  </div>
  <div class="page">
    <p>Data forwarding overhead: Redis</p>
    <p>Th ro ug hp</p>
    <p>ut (1</p>
    <p>Batch size</p>
    <p>ClusterOn + Redis</p>
    <p>Twemproxy + Redis</p>
    <p>Direct Redis</p>
  </div>
  <div class="page">
    <p>Scaling up: LevelDB</p>
    <p>SET GET Th ro ug hp</p>
    <p>ut (1</p>
    <p>Direct LDB ClusterOn+1LDB</p>
  </div>
  <div class="page">
    <p>Scaling up: LevelDB</p>
    <p>SET GET Th ro ug hp</p>
    <p>ut (1</p>
    <p>Direct LDB ClusterOn+1LDB ClusterOn+2LDB ClusterOn+4LDB</p>
  </div>
  <div class="page">
    <p>Scaling up: LevelDB</p>
    <p>SET GET Th ro ug hp</p>
    <p>ut (1</p>
    <p>Direct LDB ClusterOn+1LDB ClusterOn+2LDB ClusterOn+4LDB</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>CHUANG, W.-C., SANG, B., YOO, S., GU, R., KULKARNI, M., AND KILLIAN, C. Eventwave: Programming model and runtime support for tightly-coupled elastic cloud applications. In ACM SOCC13.</p>
    <p>HUNT, G. C., SCOTT, M. L., ET AL. The coign automatic distributed partitioning system. In USENIX OSDI99.</p>
    <p>Vsync: Consistent Data Replication for Cloud Computing https://vsync.codeplex.com/</p>
  </div>
  <div class="page">
    <p>Summary  Modern distributed storage applications share a large</p>
    <p>portion of common functionalities which can be generalized and abstracted</p>
    <p>ClusterOn can automatically provide core functionalities, such as service distribution, to reduce development effort  Faster realization of new storage applications  Easy code maintenance  Flexible and extensible service differentiation</p>
    <p>Questions &amp; contact: Ali Anwar, ali@vt.edu http://research.cs.vt.edu/dssl/</p>
  </div>
</Presentation>
