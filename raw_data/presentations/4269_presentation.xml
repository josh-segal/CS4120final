<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GraphGraph--Theoretic Analysis of Theoretic Analysis of Structured PeerStructured Peer--toto--Peer Peer Systems: Routing Distances Systems: Routing Distances and Fault Resilienceand Fault Resilience</p>
    <p>Presented by SeongPresented by Seong--Ryong KangRyong Kang</p>
    <p>Dmitri Loguinov, Anuj Kumar,Dmitri Loguinov, Anuj Kumar, Vivek Rai, and Sai GaneshVivek Rai, and Sai Ganesh Computer ScienceComputer Science Texas A&amp;M UniversityTexas A&amp;M University College Station, TX 77843College Station, TX 77843</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Motivation</p>
    <p>Optimal-diameter graphs</p>
    <p>Routing analysis  Shortest path distributions</p>
    <p>Resilience analysis (brief overview)</p>
    <p>Incremental construction of de Bruijn graphs</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Peer-to-peer (P2P) networks are important elements of the existing Internet</p>
    <p>Many recent proposals address the issue of constructing efficient DHTs (Distributed Hash Tables)</p>
    <p>However, two important pieces of analysis are missing from current work:  Comparison of existing methods with each other</p>
    <p>Full understanding of their optimality</p>
    <p>Our work aims to fill this void</p>
  </div>
  <div class="page">
    <p>Motivation 2</p>
    <p>Traditional DHTs (CAN, Chord, Pastry, Tapestry) are graphs with logN diameter and logN degree  N is the number of peers in the network</p>
    <p>Can these logarithmic bounds be improved?</p>
    <p>Other important questions:  Which existing proposal is best?</p>
    <p>What is the best possible diameter for a given degree?</p>
    <p>Can fault resilience of existing methods be improved?</p>
    <p>Can resilience and diameter be optimized at the same time?</p>
  </div>
  <div class="page">
    <p>Optimal Diameter</p>
    <p>Consider a problem of building a fixed-degree graph on N nodes with the smallest diameter  Assume k is the fixed degree of each node</p>
    <p>Since DHTs treat all peers equally, constant node degree is a realistic assumption</p>
    <p>Heterogeneous DHTs are beyond the scope of this work</p>
    <p>The smallest diameter is achieved in directed Moore graphs and equals:</p>
    <p>( )log ( 1) 1 1M kD N k=  +</p>
  </div>
  <div class="page">
    <p>Optimal Diameter 2</p>
    <p>One big problem with Moore graphs  Non-trivial Moore graphs do not exist</p>
    <p>Generalized de Bruijn graphs have the best known diameters  Diameter logkN  Asymptotically optimal</p>
    <p>Several versions exist, but only one allows efficient (greedy) routing rules  Imase and Itoh, 1981</p>
  </div>
  <div class="page">
    <p>Optimal Diameter 3</p>
    <p>Do we really care that de Bruijn graphs route faster than Chord/CAN/Pastry?</p>
    <p>Assume N = 1 million nodes  Chords degree is log2N = 20, diameter log2N = 20</p>
    <p>De Bruijns degree k = 20, diameter log20N = 5  Moore graph of degree 20: diameter also 5 hops</p>
    <p>Improvement by a factor of 4 is significant</p>
  </div>
  <div class="page">
    <p>De Bruijn Graphs</p>
    <p>Recall that de Bruijn graphs have very simple linking rules:  Each node is a D-character string in some alphabet   D is the diameter of the graph</p>
    <p>Each node (a1, , aD) links to all nodes (a2, , aD, x), for all x</p>
    <p>Self-loops are acceptable</p>
    <p>For now assume that each graph is fully populated with N nodes  Incremental and distributed construction will be</p>
    <p>discussed later</p>
  </div>
  <div class="page">
    <p>De Bruijn Graphs 2</p>
    <p>Shortest-path routing is very simple and greedy  See the paper for details</p>
    <p>Classical de Bruijn graph on N = 8 nodes, degree k = 2 and diameter D = 3:</p>
  </div>
  <div class="page">
    <p>De Bruijn Graphs 3</p>
    <p>Next study degree-diameter tradeoffs of P2P graphs with N = 106 users:</p>
    <p>Butterfly</p>
    <p>PastryCANChordde Bruijn</p>
    <p>Degree</p>
  </div>
  <div class="page">
    <p>De Bruijn Graphs 4  Improvement in the diameter is significant over</p>
    <p>all existing structures  Even the butterfly networks offer diameter 50-60%</p>
    <p>larger than that of de Bruijn graphs</p>
    <p>The improvement is most noticeable in lowdegree networks (k &lt; 20)  Large neighbor tables require substantial maintenance</p>
    <p>and keep-alive traffic when peers frequently fail  Thus, small-degree graphs are often desirables</p>
    <p>Asymptotically (for very large N), de Bruijn graphs offer diameter D twice as small as any other graph in related work</p>
  </div>
  <div class="page">
    <p>Routing Distances</p>
    <p>Next we analyze the average distance in each graph  This is the expected number of hops that each query</p>
    <p>must travel</p>
    <p>An important metric since there are graphs with diameters smaller than Chords, but larger average distance  Xu et al., IEEE JSAC 2003</p>
    <p>We also compare Chord and CAN in this study  Which one is better?</p>
  </div>
  <div class="page">
    <p>Routing Distances 2</p>
    <p>Chords distribution of shortest distances is known to be bell-shaped and appears Gaussian (left)</p>
    <p>CANs distribution progressively becomes Gaussian as well (right)</p>
    <p>distance d(x,y)</p>
    <p>pr ob</p>
    <p>ab ili</p>
    <p>ty</p>
    <p>Chord Gaussian model</p>
    <p>distance n</p>
    <p>pr ob</p>
    <p>ab ili</p>
    <p>ty</p>
  </div>
  <div class="page">
    <p>Routing Distances 3</p>
    <p>Lemma 1: Chords distribution of shortest distances is binomial with p = q =   Appears Gaussian for large D</p>
    <p>Lemma 2: CANs distribution of shortest distances is a d-fold convolution of this simple 1D distribution (d is the number of dimensions):</p>
    <p>( ) ( ),</p>
    <p>n n D</p>
    <p>p n q N n DN</p>
    <p>otherwise</p>
    <p>=  &lt; &lt;</p>
    <p>=  =</p>
    <p>q N N odd =</p>
    <p>=  =</p>
  </div>
  <div class="page">
    <p>Routing Distances 4  According to the Central Limit Theorem, self</p>
    <p>convolution of p1(n) also appears Gaussian</p>
    <p>Now notice that if the number of dimensions d is log2N/2, CANs degree and diameter are the same as Chords  However, there is more to it</p>
    <p>Lemma 3: When d = log2N/2, distribution of shortest distances in CAN and Chord are identical  Both graphs offer the same routing performance</p>
  </div>
  <div class="page">
    <p>Routing Distances 5  De Bruijn graphs have a completely different</p>
    <p>routing structure  These graphs expand exponentially</p>
    <p>Lemma 4: The distribution of shortest distances (PMF) in de Bruijn graphs is:</p>
    <p>The number of nodes at distance n is approximately kn  kn1</p>
    <p>p n N N N</p>
  </div>
  <div class="page">
    <p>Routing Distances 6  Simulations confirm that CAN and Chord for the</p>
    <p>same degree are identical (from the routing view) (figure below, left, N = 1,024)  However, they are not isomorphic</p>
    <p>De Bruijn graphs indeed expand exponentially (figure below, right, N = 1,000, k = 10)</p>
    <p>distance n</p>
    <p>pr ob</p>
    <p>ab ili</p>
    <p>ty</p>
    <p>CAN Chord</p>
    <p>distance n</p>
    <p>pr ob</p>
    <p>ab ili</p>
    <p>ty</p>
  </div>
  <div class="page">
    <p>Routing Distances 7</p>
    <p>Additional examples  The average distance d in graphs of size N = 106</p>
    <p>Butterfly</p>
    <p>2.982.98100 3.53.550</p>
    <p>11.911.73 250,00018.317.92</p>
    <p>CANChordde Bruijn</p>
    <p>MooreDegree</p>
  </div>
  <div class="page">
    <p>Routing Distances 8</p>
    <p>Exponential expansion in de Bruijn graphs leads to  Small diameter</p>
    <p>Very few short cycles</p>
    <p>Low clustering</p>
    <p>Non-existence of short cycles means that alternative (parallel) paths to destinations do not overlap</p>
    <p>This further leads to better resilience to edge and node failure as the graph is tightly packed  We verify this in the paper</p>
  </div>
  <div class="page">
    <p>Routing Distances 9</p>
    <p>Additional advantage of smaller average distance is the increased capacity of the network  For each useful request, peers need to forward (on</p>
    <p>average) d other requests  Thus, the capacity of the graph is inverse proportional to</p>
    <p>the average distance (similar to wireless networks)</p>
    <p>De Bruijn graphs offer log2log2N/2 times more capacity than Chord/CAN</p>
    <p>Asymptotically, 50% more than the butterfly  For N = 106, 22% more</p>
  </div>
  <div class="page">
    <p>Omitted Material  We derive clustering coefficients of each graph</p>
    <p>We perform a simple expansion analysis of each graph and generalize clustering to become global</p>
    <p>We further show that de Bruijn graphs have bisection width larger than Chords by a factor of log2log2N/2</p>
    <p>All these findings point toward higher resilience and better performance of de Bruijn graphs under node/edge failure</p>
    <p>We finally study the probability that a vertex appears in multiple parallel paths, per-node distribution of the number of non-overlapping shortest paths, and routing performance of these graphs under adversarial failure</p>
  </div>
  <div class="page">
    <p>ODRI</p>
    <p>We finish this talk by discussing incremental construction of de Bruijn graphs  ODRI  Optimal Diameter Routing Infrastructure</p>
    <p>Several other papers concurrently proposed de Bruijn graphs  Koorde, Kaashoek et al., 2003</p>
    <p>Distance Halving, Naor et al., 2003</p>
    <p>D2B, Fraigniaud et al., 2003</p>
    <p>Our construction is not substantially different</p>
  </div>
  <div class="page">
    <p>ODRI 2</p>
    <p>Organize all peers into a modulo-Nmax circle  Nmax is some upper limit on the number of users</p>
    <p>This circle represents the underlying de Bruijn graph that is split into zones by arriving users  Assume that degree k is known and Nmax is some power</p>
    <p>of k</p>
    <p>Each zone Zx = [z1,z2] held by peer x contains a certain number of de Bruijn vertices (all integers between z1 and z2)  Each vertex v  [z1,z2] links to k other de Bruijn vertices</p>
  </div>
  <div class="page">
    <p>ODRI 3</p>
    <p>Peer x then links to all peers holding the other end of each edge originating in Zx  In the figure, degree k = 2 and x links to peers y and w</p>
    <p>Zx</p>
    <p>Zy Zw</p>
  </div>
  <div class="page">
    <p>ODRI 4</p>
    <p>It is easy to demonstrate that if all zones are the same, then the application-layer diameter is optimal and the degree of each peer is exactly k</p>
    <p>Under a uniform hashing function, zone distributions are not equal  However, the diameter is still asymptotically optimal</p>
    <p>Simple join method (e.g., Chord, CAN): a joining peer generates a random number and joins the ring at that location (splitting an existing node in half or otherwise)  Imbalance by a factor of logN with high probability</p>
  </div>
  <div class="page">
    <p>ODRI 5  Power of two choices method: sample d</p>
    <p>locations in the graph and split the largest peer</p>
    <p>If the number of sampled locations is ~logN, then it can be guaranteed that the imbalance stays within a constant factor (usually 2) from the optimal  This method is implemented in Distance Halving (d =</p>
    <p>ODRI has its own variation of this method  Start from a random location and then walk through the</p>
    <p>graph searching for the largest node to split  Reduced join latency as d messages can sample dk</p>
    <p>peers (where k is the degree as before)</p>
  </div>
  <div class="page">
    <p>ODRI 6</p>
    <p>Example  N = 30,000, k = 8</p>
    <p>Traditional methods require over 400 messages to sample 82 peers, while ODRI needs only 10</p>
    <p>To further improve the search, ODRI is biased towards the largest neighbor at each step  Larger nodes cover more DHT space with their edges</p>
    <p>and are thus more likely to know other large nodes</p>
    <p>Loops are prevented by appending the entire path to each request packet</p>
  </div>
  <div class="page">
    <p>ODRI 7</p>
    <p>Node departure can re-introduce imbalance in zone distributions and actually make it worse</p>
    <p>Thus, each departing node x performs a d-walk searching for the smallest node to take its place  Once found, this smallest node y will take over xs zone</p>
    <p>Successor/predecessor of y will take over its zone</p>
    <p>The d-walk is still biased towards the largest neighbor at each step  Same reasoning as before</p>
    <p>Performs very well in practice</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Details of these algorithms and probabilistic analysis will be presented in the next paper  Evolution of Massive P2P Graphs: Zone Distribution</p>
    <p>Perspective</p>
    <p>Our results in the current paper indicate that de Bruijn graphs offer an appealing framework for P2P networks</p>
    <p>Their diameter and average distance are smaller than that of any alternative graph  Their bisection width and expansion are higher than that</p>
    <p>of Chord/CAN and no worse than that of the butterfly</p>
  </div>
  <div class="page">
    <p>Conclusion 2</p>
    <p>De Bruijn graphs are much easier to construct incrementally than other fixed-degree graphs (e.g., the butterfly)</p>
    <p>They exhibit very little path overlap, clustering, and susceptibility to node failure</p>
    <p>Nevertheless, the bisection width of de Bruijn graphs is far from optimal  Thus, one final question remains: is it possible to</p>
    <p>simultaneously optimize resilience (e.g., bisection width) and diameter?</p>
  </div>
</Presentation>
