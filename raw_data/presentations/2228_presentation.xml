<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ElasticBF: Fine-grained and Elastic Bloom Filter Towards Efficient Read for LSM-tree</p>
    <p>based KV Stores</p>
    <p>: : : : : ,:</p>
    <p>. , .</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background Key-value (KV) stores and LSM tree</p>
    <p>Motivation Read amplification problem in KV stores</p>
    <p>Design of ElasticBF Performance Evaluation Conclusion</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Key-value (KV) store has become an important storage engine for many applications</p>
    <p>Cloud systems Social networks</p>
    <p>Examples of KV stores Hbase @ Apache LevelDB @ Google RocksDB @ Facebook</p>
  </div>
  <div class="page">
    <p>LSM Tree</p>
    <p>The most common design of KV stores is based on LSM-tree (log structured merge tree)</p>
    <p>Fully sorted in each level</p>
    <p>Data is written to Level 0 first, then merged to Level 1 via compaction, then Level 2, and so on.</p>
    <p>Compaction incurs write amplificationLevel n</p>
    <p>Level 1</p>
    <p>Compaction (merge sort)</p>
    <p>Level 2</p>
    <p>Level 0</p>
  </div>
  <div class="page">
    <p>LSM Tree</p>
    <p>The most common design of KV stores is based on LSM-tree (log structured merge tree)</p>
    <p>Fully sorted in each level</p>
    <p>Looking up a key requires multiple I/O requests as it may require to search in multiple levels (read amplification).</p>
    <p>Searching multiple levels is neededLevel n</p>
    <p>Level 1</p>
    <p>Search order</p>
    <p>Level 2</p>
    <p>Level 0</p>
  </div>
  <div class="page">
    <p>LevelDB</p>
    <p>One typical implementation of LSM tree Focus on data layout on disk</p>
    <p>It suffers from read amplification problem, especially for a large KV store which has multiple levels.</p>
    <p>Level 0 (8MB)</p>
    <p>Level 1 (10MB)</p>
    <p>Level 6 (1TB)</p>
    <p>Level 2 (100MB)</p>
    <p>Key-value pairs</p>
  </div>
  <div class="page">
    <p>Bloom Filter</p>
    <p>Bloom filter in each SSTable A bit array with multiple hash functions Help quickly identify whether a key exists in an SSTable or not</p>
    <p>Bloom filter suffers from false positive (hash collision)  False positive rate (FPR)0.6185' (b: Bits-per-key)</p>
    <p>key:``762 Hash1(762)</p>
    <p>Hash2(762) Hash3(762)</p>
    <p>Bits-per-key 2bits 3bits 4bits 5bits 6bits FPR 40% 23.7% 14.7% 9.2% 5.6%</p>
  </div>
  <div class="page">
    <p>Read Flow with Bloom Filter</p>
    <p>Bloom filters are required to be cached in memory</p>
    <p>Example: Get(301)</p>
    <p>Memory Disk</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>KV stores suffer from large read amplification Bloom filter reduces read I/O, but has false positive Reducing false positive may need to allocate many bits for each key, incurs large memory overhead</p>
    <p>Question: how to improve the Bloom filter design with limited memory consumption so as to</p>
    <p>reduce extra I/O requests and improve read performance of KV stores</p>
  </div>
  <div class="page">
    <p>Main Idea Observation</p>
    <p>Access frequencies of SSTables in low levels are higher Unevenness of accesses even within the same level</p>
    <p>Main idea: ElasticBF An elastic scheme according to access frequency SSTables with high (low) access frequency  More (less) powerful Bloom filter (i.e., more (fewer) bits per key)  Lower (higher) false positive rate: fewer extra I/Os  Larger (smaller) memory consumption</p>
  </div>
  <div class="page">
    <p>ElasticBF Design</p>
    <p>Challenge to realize an elastic scheme according to access frequency of SSTables</p>
    <p>Data organization in SSTable is fixed after creation Adjusting the Bloom filter in SSTables requires to reorganize the data</p>
    <p>Immutable</p>
  </div>
  <div class="page">
    <p>ElasticBF Design</p>
    <p>Choice of ElasticBF: Step 1 Build multiple small filter units in each SSTable with different and independent hash functions</p>
    <p>Rationale Separability: Multiple filters have the same FPR as a single filter with the same bits-per-key  FRR of n filter units&quot;#$% 0.6185,- = 0.6185, ( &quot;#$% 0&quot; = 0 )</p>
  </div>
  <div class="page">
    <p>ElasticBF Design</p>
    <p>Choice of ElasticBF: Step 2 Dynamically adjust the filter units in memory for each SSTable according to its access frequency  Enable more filter units by loading them into memory  Disable in-memory filter units by simply discarding them</p>
    <p>Data organization in SSTable does not change</p>
    <p>Elastic feature: false positive rate can be dynamically adjusted</p>
  </div>
  <div class="page">
    <p>Key Issues</p>
    <p>How to determine the most appropriate number of filter units for each SSTable ? Adjusting Rule</p>
    <p>Multi-Queue How to realize a dynamic adjustment</p>
    <p>with small overhead ?</p>
  </div>
  <div class="page">
    <p>Goal Try to reduce the extra I/Os caused by false positive</p>
    <p>Access frequency of SSTable !&quot;# False positive rate of the Bloom filter in SSTable !&quot;$# Number of SSTables in the KV store %</p>
    <p>Adjusting Rule</p>
    <p>&amp;[&amp;()*+_-.] = 1 234</p>
    <p>ElasticBF estimates &quot;# in the runtime and adjusts &quot;$# accordingly so as to minimize &amp;[&amp;()*+_-.]</p>
  </div>
  <div class="page">
    <p>Multi-Queue</p>
    <p>MRULRU</p>
    <p>!&quot;</p>
    <p>!#</p>
    <p>!$</p>
    <p>!%</p>
    <p>- .</p>
    <p>.</p>
    <p>Guides dynamic adjustment of the number of enabled filter units for each SSTable</p>
    <p>Multiple least recently used queuesLRU !&amp; corresponds to the SSTables with ' filter units being enabled (!$ : hottest SSTables, !% : coldest SSTables)</p>
  </div>
  <div class="page">
    <p>Multi-Queue</p>
    <p>Dynamically adjust the filter units in Multi-Queue Enable filter unit when the SSTable is accessed and ![!&quot;#$%_&amp;'] can be reduced Disable filter unit according to expiring policy</p>
    <p>Disable one filter unit</p>
    <p>Enable one filter unit</p>
    <p>MRULRU</p>
    <p>()</p>
    <p>(*</p>
    <p>(+</p>
    <p>(,</p>
  </div>
  <div class="page">
    <p>Overhead Analysis</p>
    <p>Storage overhead</p>
    <p>Computation overhead Time of building filters~1% Sufficient CPU resources  Multi-threading: generate multiple filter units simultaneously</p>
    <p>Memory overhead</p>
    <p>Size of KV pair Size of SSTable # KV pairs in a SSTable bits-per-key Space percent 1KB 2MB 2048 4 0.05%</p>
    <p>Size of database Number of SSTables Memory overhead 100GB 50K 200KB</p>
  </div>
  <div class="page">
    <p>Experiment Setting</p>
    <p>CPU Disk OS</p>
    <p>Intel(R) Xeon(R) E5-2650 v4 @ 2.20GHz</p>
    <p>Intel 3700 series SSD</p>
    <p>CentOS 7.0/ Linux 3.10.0-5.14</p>
    <p>Size of</p>
    <p>KV pair</p>
    <p>Size of</p>
    <p>database</p>
    <p>Request</p>
    <p>Distribution</p>
    <p>Zipfian</p>
    <p>skew</p>
    <p>Zero lookup/</p>
    <p>Non-zero lookup</p>
    <p>Number of</p>
    <p>Get Requests</p>
    <p>Experiment environment Machine</p>
    <p>Workloads: YCSB</p>
  </div>
  <div class="page">
    <p>Experiment Results</p>
    <p>ElasticBF can achieve 1.94-2.24 read throughput and greatly reduce the number of I/Os for data access compared to LevelDB</p>
    <p>Throughput Number of I/Os for data access Read Performance</p>
  </div>
  <div class="page">
    <p>Experiment Results</p>
    <p>ElasticBF can achieve a similar read performance with LevelDB with only a half memory usage</p>
    <p>Read Performance vs Memory Usage</p>
  </div>
  <div class="page">
    <p>Experiment Results</p>
    <p>Write Performance Load 100GB KV store</p>
    <p>ElasticBF has almost the same write throughout with LevelDB</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>LSM tree suffers from read amplification problem Bloom filter reduces extra I/Os during read Uniform Bloom filter design either suffers from high false positive rate or incurs large memory overhead</p>
    <p>We develop ElasticBF An elastic scheme to dynamically adjust the Bloom filters in SSTables according to access frequency Improves read performance with limited memory Orthogonal to works optimizing LSM-tree structure</p>
  </div>
  <div class="page">
    <p>Thanks for your attention!</p>
    <p>For any questions, please feel free to contact Prof. Yongkun Li at USTC.</p>
    <p>ykli@ustc.edu.cn http://staff.ustc.edu.cn/~ykli/</p>
  </div>
</Presentation>
