<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Thanh Do, Tyler Harter, Yingchao Liu, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau Haryadi S. Gunawi</p>
    <p>HARDFS: Hardening HDFS with</p>
    <p>Selective and Lightweight Versioning</p>
  </div>
  <div class="page">
    <p>Cloud Reliability</p>
    <p>q Cloud systems  Complex software  Thousands of commodity machines  Rare failures become frequent [Hamilton]</p>
    <p>q Failure detection and recovery   has to come from the software [Dean]   must be a first-class operation [Ramakrishnan et al.]</p>
  </div>
  <div class="page">
    <p>Fail-stop failures q Machine crashes, disk failures</p>
    <p>q Pretty much handled</p>
    <p>q Current systems have sophisticated crashrecovery machineries  Data replication  Logging  Fail-over</p>
  </div>
  <div class="page">
    <p>Fail-silent failures</p>
    <p>q Exhibits incorrect behaviors instead of crashing</p>
    <p>q Caused by memory corruption or software bugs</p>
    <p>q Crash recovery is useless if fault can spread</p>
    <p>Master</p>
    <p>Workers</p>
  </div>
  <div class="page">
    <p>Fail-silent failure headlines</p>
  </div>
  <div class="page">
    <p>Current approaches</p>
    <p>Replicated state machine using BFT library</p>
    <p>Ver. 1 Ver.2</p>
    <p>Ver. 3 Agree?</p>
    <p>N-Version programing</p>
    <p>High resource consumption  High engineering effort  Rare deployment</p>
  </div>
  <div class="page">
    <p>Selective and Lightweight Versioning (SLEEVE)</p>
    <p>q 2nd version models basic protocols of the system</p>
    <p>q Detects and isolates fail-silent behaviors</p>
    <p>q Exploits crash recovery machinery for recovery 7</p>
    <p>Master</p>
    <p>Workers</p>
    <p>Trusted sources</p>
    <p>Reloading state during reboot</p>
  </div>
  <div class="page">
    <p>Selective and lightweight versioning (SLEEVE)</p>
    <p>q Selective  Goal: small engineering effort  Protects important parts</p>
    <p>- Bug sensitive - Frequently changed - Currently unprotected</p>
    <p>q Lightweight  Avoids replicating full state  Encodes states to reduce space</p>
    <p>A B C D</p>
    <p>A D</p>
  </div>
  <div class="page">
    <p>HARDFS q HARDFS - hardened version HDFS:  Namespace management  Replica management  Read/write protocol</p>
    <p>q HARDFS detects and recovers from:  90% of the faults caused by random memory corruption  100% of the faults caused by targeted memory corruption  5 injected software bugs</p>
    <p>q Fast recovery using micro-recovery  3 orders of magnitude faster than full reboot</p>
    <p>q Little space and performance overhead</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>q HARDFS Design</p>
    <p>q HARDFS Implementation</p>
    <p>q Evaluation</p>
    <p>q Conclusion</p>
  </div>
  <div class="page">
    <p>Case study:  namespace integrity</p>
    <p>NameNode</p>
    <p>Client</p>
    <p>Create(F)</p>
    <p>F</p>
    <p>F</p>
    <p>Normal Operation</p>
    <p>txCreat(F)</p>
    <p>NameNode</p>
    <p>Client</p>
    <p>exists(F)</p>
    <p>F</p>
    <p>No</p>
    <p>G</p>
    <p>Corrupted HDFS</p>
    <p>Client</p>
    <p>exists(F)</p>
    <p>F</p>
    <p>Yes</p>
    <p>G</p>
    <p>F</p>
    <p>F</p>
    <p>HARDFS</p>
    <p>NameNode</p>
    <p>Incorrect behavior</p>
    <p>Trusted source</p>
  </div>
  <div class="page">
    <p>SLEEVE layer components</p>
    <p>Interposition module  State manager  Action verifier  Recovery module</p>
  </div>
  <div class="page">
    <p>State manager q Replicates subset of state of the main version</p>
    <p>Directory entries without modification time</p>
    <p>q Adds new state incrementally  Adds permissions for security checks</p>
    <p>q Understands semantics of various protocol messages and thread events to update state correctly</p>
    <p>q Compresses state using compact encoding</p>
  </div>
  <div class="page">
    <p>Nave: Full replication</p>
    <p>q HDFS master manages millions of files</p>
    <p>q 100% memory overhead reduces HDFS master scalability [;login; 11]</p>
    <p>FF 100% memory overhead</p>
  </div>
  <div class="page">
    <p>Lightweight:  Counting Bloom Filters</p>
    <p>q Space-efficient data structure</p>
    <p>q Supports 3 APIs  insert(A fact)  delete(A fact)  exists(A fact)</p>
  </div>
  <div class="page">
    <p>Lightweight:  Counting Bloom Filters</p>
    <p>q Suitable for boolean checking  Does F exist?  Does F has length X?  Has block B been allocated? 16</p>
    <p>F is 10 bytes</p>
    <p>Disagreement detected!</p>
    <p>F:10</p>
    <p>insert(F is 10 bytes)</p>
    <p>F:10 F:5 F:10</p>
    <p>exists(F is 5 bytes)  NO</p>
    <p>Give me length of F</p>
  </div>
  <div class="page">
    <p>Challenges of using  Counting Bloom Filters</p>
    <p>q Hard to check stateful system</p>
    <p>q False positives</p>
  </div>
  <div class="page">
    <p>Non-boolean verification</p>
    <p>F is 20 bytes</p>
    <p>F:10 F:10 F:10 F:20</p>
    <p>X = returnSize(F) delete(F:X) insert(F:20)</p>
    <p>Bloom filter does not support this API</p>
    <p>Before After</p>
  </div>
  <div class="page">
    <p>Non-boolean verification</p>
    <p>F is 20 bytes</p>
    <p>F:10 F:10</p>
    <p>X  MainVersion.returnSize(F); IF exists(F:X) delete(F:X); insert(F:20); ELSE initiate recovery;</p>
    <p>Ask-Then-Check</p>
    <p>F:10 F:20</p>
    <p>Before After</p>
  </div>
  <div class="page">
    <p>Stateful verification</p>
    <p>Bloom Filter (boolean verification)</p>
    <p>Checking stateful systems</p>
    <p>Ask Then Check</p>
  </div>
  <div class="page">
    <p>Dealing with False positive q Bloom filters can give false positive</p>
    <p>4 per billion  1 false positive per month (given 100 op/s)</p>
    <p>q Only leads to unnecessary recovery</p>
    <p>F G</p>
    <p>Trusted source</p>
    <p>F</p>
    <p>F</p>
    <p>Reloading state</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>q HARDFS Design  Lightweight  Selective  Recovery</p>
    <p>q HARDFS Implementation</p>
    <p>q Evaluation</p>
    <p>q Conclusion</p>
  </div>
  <div class="page">
    <p>Selective Checks</p>
    <p>q Goals: small engineering effort</p>
    <p>q Selectively chooses namespace protection</p>
    <p>q Excludes security checks 23</p>
    <p>Client create(F)</p>
    <p>G F F</p>
    <p>HDFS Master</p>
    <p>F</p>
    <p>txCreate(F)</p>
    <p>Client</p>
    <p>Operation log</p>
    <p>exists(F)</p>
    <p>Disagreement detected! No Yes</p>
    <p>X  mainVersion.exists(F); Y  bloomFilter.exists(F); If X != Y then handleDisagreement();</p>
  </div>
  <div class="page">
    <p>Incorrect action examples</p>
    <p>Create(F)</p>
    <p>txCreate(F)</p>
    <p>Create(F)</p>
    <p>reject</p>
    <p>Create(F)</p>
    <p>txCreate(D/F) txMkdir(D)</p>
    <p>txCreate(F)</p>
    <p>Create(D/F) Mkdir(D)</p>
    <p>Normal correct action Corrupt action Missing action</p>
    <p>Orphan action Out-of-order action</p>
    <p>All of these happen in practice</p>
  </div>
  <div class="page">
    <p>Action verifier q Set of micro-checks to detect incorrect</p>
    <p>actions of the main version</p>
    <p>q Mechanisms:  Expected-action list  Actions dependency checking  Timeout  Domain knowledge to handle disagreement</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>q HARDFS Design  Lightweight  Selective q Recovery</p>
    <p>q HARDFS Implementation</p>
    <p>q Evaluation</p>
    <p>q Conclusion</p>
  </div>
  <div class="page">
    <p>Recovery</p>
    <p>q Crash is good provided no fault propagation</p>
    <p>q Detects and turns bad behaviors into crashes</p>
    <p>q Exploits HDFS crash recovery machineries 27</p>
    <p>Master</p>
    <p>Workers</p>
    <p>Trusted sources</p>
    <p>Reloading state during reboot</p>
  </div>
  <div class="page">
    <p>HARDFS Recovery</p>
    <p>q Full recovery (crash and reboot)</p>
    <p>q Micro-recovery  Repairing the main version  Repairing the 2nd version</p>
  </div>
  <div class="page">
    <p>Crash and Reboot</p>
    <p>q Full state is reconstructed from trusted sources</p>
    <p>q Full recovery may be expensive  Restarting an HDFS master could take hours</p>
    <p>Reloading Full state</p>
  </div>
  <div class="page">
    <p>Micro-recovery</p>
    <p>q Repairs only corrupted state from trusted sources</p>
    <p>q Falls back to full reboot when micro-recovery fails</p>
  </div>
  <div class="page">
    <p>Repairing main version</p>
    <p>Main Version</p>
    <p>F:100</p>
    <p>Trusted source: checkpoint file</p>
    <p>F:200 F:100</p>
    <p>Direct update F:200  F:100 F:100</p>
  </div>
  <div class="page">
    <p>Repairing 2nd version</p>
    <p>Main Version</p>
    <p>F:100</p>
    <p>Trusted source: checkpoint file</p>
    <p>F:200</p>
    <p>Must: 1. Delete(F is 200 bytes) 2. Insert(F is 100 bytes) F:100</p>
    <p>Solution: 1. Start with an empty BF 2. Add facts as they are verified</p>
    <p>F:100</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>HARDFS Design</p>
    <p>q HARDFS Implementation</p>
    <p>q Evaluation</p>
    <p>q Conclusion</p>
  </div>
  <div class="page">
    <p>Implementation q Hardens three functionalities of HDFS</p>
    <p>Namespace management (HARDFS-N)  Replica management (HARDFS-R)  Read/write protocol of datanodes (HARDFS-D)</p>
    <p>q Uses 3 Bloom filters API  insert(a fact), delete(a fact), exists(a fact)</p>
    <p>q Uses ask-then-check for non-boolean verification</p>
  </div>
  <div class="page">
    <p>Protecting  namespace integrity q Guards namespace structures necessary for</p>
    <p>reaching data:  File hierarchy  File-to-block mapping  File length information</p>
    <p>q Detects and recovers from namespacerelated problems:  Corrupt file-to-block mapping  Unreachable files</p>
  </div>
  <div class="page">
    <p>Namespace management Message Logic of the secondary version</p>
    <p>Create(F): Client request NN to create F</p>
    <p>Entry:  If exists(F) Then reject; Else insert(F); generateAction(txCreate[F]); Return: check response;</p>
    <p>AddBlock(F): client requests NN to allocate a block to file F</p>
    <p>Entry: F:X = ask-then-check(F); Return: B = addBlk(F); If exists(F) &amp; !exists(B) Then X = X  {B}; delete(F:X); insert(F:X) insert(B@0); Else declare error;</p>
  </div>
  <div class="page">
    <p>Outline  Introduction</p>
    <p>HARDFS Design</p>
    <p>HARDFS Implementation</p>
    <p>q Evaluation and Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>q Is HARDFS robust against fail-silent faults?</p>
    <p>q How much time and space overhead incurred?</p>
    <p>q Is micro-recovery efficient?</p>
    <p>q How much engineering effort required?</p>
  </div>
  <div class="page">
    <p>Random memory corruption results Outcome HDFS HARDFS</p>
    <p>Silent failure 117 9</p>
    <p>Detect and reboot 140</p>
    <p>Detect and micro-recover 107</p>
    <p>Crash 133 268</p>
    <p>Hang 22 16</p>
    <p>No problem observed 728 460</p>
    <p>q # fail-silent failures reduced by factor of 10</p>
    <p>q Crash happens twice as often</p>
  </div>
  <div class="page">
    <p>Silent failures FIELD HDFS HARDFS</p>
    <p>pathname 95 0</p>
    <p>replication 1 0</p>
    <p>modification time 6 8</p>
    <p>permission 3 0</p>
    <p>block size 12 1</p>
  </div>
  <div class="page">
    <p>M em</p>
    <p>or y al lo ca te d (M</p>
    <p>B)</p>
    <p>File system size (number of files) HDFS HARDFS + Concrete State HARDFS + Bloom Filters</p>
    <p>Namepsace management Space Overhead</p>
    <p>HARDFS with Bloom filter incurs little space overhead (2.6%)</p>
  </div>
  <div class="page">
    <p>Recovery Time</p>
    <p>ds )</p>
    <p>File system size (number of files)</p>
    <p>Reboot Micro-recovery OpGmized Micro-recovery</p>
    <p>Rebooting NameNode is expensive  Micro-recovery is 3 order of magnitude faster</p>
  </div>
  <div class="page">
    <p>Complexity (LOC)</p>
    <p>Functionality HDFS HARDFS</p>
    <p>Namespace management 10114 1751 17%</p>
    <p>Replica management 2342 934 40%</p>
    <p>Read/write protocol 5050 944 19%</p>
    <p>Others 13339</p>
    <p>Lightweight versions are smaller</p>
  </div>
  <div class="page">
    <p>Injecting software bugs Bug Year Priority Description HARDFS</p>
    <p>HADOOP-1135 2007 Major Blocks in block report wrongly marked for deletion</p>
    <p>HADOOP-3002 2008 Blocker Blocks removed during safemode</p>
    <p>HDFS-900 2010 Blocker Valid replica deleted rather than corrupt replica</p>
    <p>HDFS-1250 2010 Major Namenode processes block report from dead datanode</p>
    <p>HDFS-3087 2012 Critical Decommission before replication during namenode restart</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>q Crashing is good</p>
    <p>q To die (and be reborn) is better than to lie</p>
    <p>q But lies do happen in reality</p>
    <p>q HARDFS turns lies into crashes</p>
    <p>q Leverages existing crash recovery techniques to resurrect</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>http://research.cs.wisc.edu/adsl/</p>
    <p>http://ucare.cs.uchicago.edu/</p>
    <p>http://wisdom.cs.wisc.edu/</p>
  </div>
</Presentation>
