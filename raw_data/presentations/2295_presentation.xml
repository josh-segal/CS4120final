<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Computer Science</p>
    <p>AGILE: Elastic distributed resource scaling for Infrastructure-as-a-Service</p>
    <p>Hiep Nguyen, Zhiming Shen, Xiaohui (Helen) Gu North Carolina State University</p>
    <p>Sethuraman Subbiah</p>
    <p>NetApp John Wilkes</p>
    <p>Google</p>
  </div>
  <div class="page">
    <p>Elastic resource scaling for Infrastructure-as-aService  Elasticity: grow/shrink resource as required</p>
    <p>VM VM VM</p>
    <p>C PU</p>
    <p>d em</p>
    <p>an d</p>
    <p>Time</p>
    <p>VM VM VM</p>
    <p>VM VM VM VM VM VM</p>
    <p>VM VM VM</p>
    <p>VM VM VM</p>
  </div>
  <div class="page">
    <p>Design goals</p>
    <p>Application agnostic  Easy to deploy  Support different applications</p>
    <p>Effective overload handling  Predict overload accurately  Minimize SLO violations  Minimize resource cost</p>
    <p>Low overhead  Light-weight  Little interference</p>
  </div>
  <div class="page">
    <p>State of the art</p>
    <p>Reactive resource scaling [e.g., Amazon EC2]  Performance degradation due to long instantiation latency</p>
    <p>( 2 minutes)</p>
    <p>Trace-driven resource scaling [e.g., Chandra et al. IWQoS 2003, Gong et al. CNSM 2007, Shen et al. SOCC 2011 ]</p>
    <p>Focus on short-term prediction or need to assume cyclic workload patterns</p>
    <p>Model-driven resource scaling [e.g., Zhu et al. ICAC 2008, Kalyvianaki et al. ICAC 2009, Padala et al. Eurosys 2007]</p>
    <p>Have parameters that need to be specified or tuned offline for different applications/workloads</p>
  </div>
  <div class="page">
    <p>AGILE system overview</p>
    <p>Resource pressure modeling</p>
    <p>Server pool scaling manager</p>
    <p>Resource usage monitoring</p>
    <p>VM add/remove</p>
    <p>Resource demand prediction</p>
    <p>SLO violation feedback</p>
    <p>AGILE</p>
    <p>Server pool prediction</p>
    <p>VM VM VM VM VM VM VM VM VM</p>
    <p>Overload starts</p>
    <p>Advance alert</p>
    <p>Overload stops</p>
    <p>VM VM VM Future resource demand</p>
    <p>Resource to maintain</p>
    <p>When to scale How many VMs</p>
  </div>
  <div class="page">
    <p>Pre-copy live VM cloning</p>
    <p>Design goals  Immediate performance scale-up  Avoid storing and maintaining VM snapshots</p>
    <p>Memory</p>
    <p>Disk Image</p>
    <p>Pre-copy memory</p>
  </div>
  <div class="page">
    <p>Pre-copy live VM cloning</p>
    <p>Design goals  Immediate performance scale-up  Avoid storing and maintaining VM snapshots</p>
    <p>Disk Image</p>
    <p>Memory Memory Copy</p>
    <p>Incremental Image Incremental Image Read only</p>
  </div>
  <div class="page">
    <p>Pre-copy live VM cloning</p>
    <p>Dynamic copy-rate configuration  Minimum copy-rate (e.g., little interference)  Finish cloning within the overload pending</p>
    <p>time</p>
    <p>dirtyclone rtMemorySizeCopyRate += /</p>
    <p>Predicted overload</p>
    <p>(avg.  100 Mbps)</p>
  </div>
  <div class="page">
    <p>Performance scale-up comparison</p>
    <p>Immediate performance scale-up</p>
    <p>New VM request</p>
    <p>Application starts</p>
  </div>
  <div class="page">
    <p>Wavelet-based medium-term prediction</p>
    <p>Original signal</p>
    <p>Detail signals</p>
    <p>Scale 1</p>
    <p>Scale 2</p>
    <p>Scale 3</p>
    <p>Scale 4</p>
    <p>Scale 4 Approximation signals</p>
    <p>Decompose Synthesize</p>
  </div>
  <div class="page">
    <p>Online resource pressure modeling</p>
    <p>Mapping function between:  Resource pressure  SLO violation rate</p>
    <p>Observations</p>
  </div>
  <div class="page">
    <p>Optimizations for AGILE cloning</p>
    <p>Post-cloning auto-configuration  Event driven auto-configuration  Application VMs can subscribe to critical events</p>
    <p>False alarm handling  Continuously check predicted overload state  Cancel cloning triggered by the false alarm</p>
  </div>
  <div class="page">
    <p>Experimental evaluation</p>
    <p>Implemented on top of KVM  Modified KVM to support pre-copy live cloning</p>
    <p>Test bed:  10 cloud nodes running CentOS 6.2 with KVM</p>
    <p>RUBiS driven by four real workload traces  WorldCup' 98, EPA, Nasa, ClarkNet (one day traces)</p>
    <p>Google cluster data: 100 CPU usage and 100 Memory usage traces (29 days)</p>
  </div>
  <div class="page">
    <p>Wavelet-based prediction accuracy</p>
    <p>RUBiS traces</p>
  </div>
  <div class="page">
    <p>Wavelet-based prediction accuracy</p>
    <p>RUBiS traces</p>
  </div>
  <div class="page">
    <p>Wavelet-based prediction accuracy</p>
    <p>Google CPU traces</p>
  </div>
  <div class="page">
    <p>Overload handling</p>
    <p>Web server and database server scaling ( 2 hours, scale from 1 to 2 servers)</p>
  </div>
  <div class="page">
    <p>Overload handling</p>
    <p>Web server: during scaling</p>
  </div>
  <div class="page">
    <p>Dynamic copy-rate configuration</p>
    <p>Accurately control the cloning time under different deadlines 18</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Prediction-driven elastic distributed resource scaling:  Accurate medium-term prediction based on</p>
    <p>wavelet transforms  Adaptive copy-rate to minimize interference  Application-agnostic performance model</p>
    <p>Immediate performance scale-up with little overhead</p>
    <p>Thank you! http://dance.csc.ncsu.edu</p>
  </div>
  <div class="page">
    <p>Acknowledgement</p>
    <p>This work was sponsored in part by NSF CNS0915567 grant, NSF CNS0915861 grant, U.S. Army Research Office (ARO) under grant W911NF-10-1-0273, and Google Research Awards</p>
  </div>
</Presentation>
