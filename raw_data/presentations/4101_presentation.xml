<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Robert Gawlik and Thorsten Holz</p>
    <p>Ruhr-Universitt Bochum</p>
    <p>August 13/14 2018  Baltimore</p>
    <p>Make JIT-Spray Great Again</p>
  </div>
  <div class="page">
    <p>JIT Overview</p>
  </div>
  <div class="page">
    <p>JIT Just-In-Time Compilation (JIT)</p>
    <p>Generate native machine code from higher-level language JavaScript PHP Java x86_32, x86_64, ARM, AArch64 ActionScript ...</p>
    <p>Performance gain compared to interpreted execution</p>
  </div>
  <div class="page">
    <p>JIT Just-In-Time Compilation (JIT)</p>
    <p>Several compilers and optimization layers</p>
    <p>ActionScript:</p>
    <p>JS:</p>
    <p>NanoJIT</p>
    <p>TurboFan ChakraCore (2 Tier JIT)</p>
    <p>Baseline, IonMonkey</p>
    <p>Baseline, DFG, FTL Java: HotSpot JIT</p>
    <p>PHP:</p>
    <p>Linux Kernel: .Net:</p>
    <p>HHVM JIT</p>
    <p>eBPF RyuJIT</p>
  </div>
  <div class="page">
    <p>Baseline, IonMonkey</p>
    <p>JIT Just-In-Time Compilation (JIT)</p>
    <p>Several compilers and optimization layers</p>
    <p>ActionScript:</p>
    <p>JS:</p>
    <p>NanoJIT</p>
    <p>TurboFan ChakraCore (2 Tier JIT)</p>
    <p>Baseline, DFG, FTL Java: HotSpot JIT</p>
    <p>PHP:</p>
    <p>Linux Kernel: .Net:</p>
    <p>HHVM JIT</p>
    <p>eBPF RyuJIT</p>
    <p>More than 13 compilation engines. What could possibly go wrong?</p>
  </div>
  <div class="page">
    <p>JIT-Spray (x86)</p>
  </div>
  <div class="page">
    <p>JIT-Spray 1. Hide native instructions in constants of high-level language</p>
    <p>c = 0xa8909090 c += 0xa8909090</p>
    <p>x86 Disassembly @ offset 1</p>
    <p>Emitted JIT Code</p>
  </div>
  <div class="page">
    <p>JIT-Spray 1. Hide native instructions in constants of high-level language</p>
    <p>function JIT(){ c = 0xa8909090 c += 0xa8909090</p>
    <p>}</p>
    <p>While (not address_hit){ createFuncAndJIT()</p>
    <p>}</p>
    <p>predictable?!</p>
  </div>
  <div class="page">
    <p>JIT-Spray 1. Hide native instructions in constants of high-level language</p>
    <p>function JIT(){ c = 0xa8909090 c += 0xa8909090</p>
    <p>}</p>
    <p>While (not address_hit){ JIT()</p>
    <p>}</p>
    <p>predictable?!</p>
    <p>Used to bypass ASLR and DEP No info leak and code reuse necessary</p>
    <p>Memory corruptions are easier to exploit</p>
  </div>
  <div class="page">
    <p>Prominent JIT-Spray on x86</p>
  </div>
  <div class="page">
    <p>JIT-Spray Flash JIT-Spray (Dionysus Blazakis, 2010)</p>
    <p>Targets ActionScript (Tamarin VM)</p>
    <p>Long XOR sequence gets compiled to XOR instructions</p>
    <p>First of its kind known to public</p>
  </div>
  <div class="page">
    <p>JIT-Spray Writing JIT Shellcode (Alexey Sintsov, 2010)</p>
    <p>Nice methods to ease and automate payload generation:  split long instructions into instructions &lt;= 3 bytes</p>
    <p>semantic nops which dont change flags</p>
    <p>; 5 bytes mov ebx, 0xb1b2b3b4</p>
    <p>mov ebx, 0xb1b2xxxx ; 3 bytes mov bh, 0xb3 ; 2 bytes mov bl, 0xb4 ; 2 bytes</p>
  </div>
  <div class="page">
    <p>JIT-Spray JIT-Spray Attacks &amp; Advanced Shellcode (Alexey Sintsov, 2010)</p>
    <p>JIT-Spray in Apple Safari on Windows possible:</p>
    <p>use two of four immediate bytes as payload</p>
    <p>connect payload bytes with short jumps (stage0)</p>
    <p>copy stage1 payload to RWX JIT page and jump to it</p>
  </div>
  <div class="page">
    <p>JIT-Spray JIT-Spray Attacks &amp; Advanced Shellcode (Alexey Sintsov, 2010)</p>
  </div>
  <div class="page">
    <p>JIT-Spray Attacking Clientside JIT Compilers (Chris Rohlf &amp; Yan Ivnitskiy, 2011)</p>
    <p>In depth analysis of LLVM and Firefox JIT engines</p>
    <p>JIT-Spray techniques (i.e., with floating point values)</p>
    <p>JIT gadget techniques (gaJITs)</p>
    <p>Comparison of JIT hardening measurements</p>
  </div>
  <div class="page">
    <p>JIT-Spray Attacking Clientside JIT Compilers (Chris Rohlf &amp; Yan Ivnitskiy, 2011)</p>
    <p>In depth analysis of LLVM and Firefox JIT engines</p>
    <p>JIT-Spray techniques (i.e. with floating point values)</p>
    <p>JIT gadget techniques (gaJITs)</p>
    <p>Comparison of JIT hardening measurements</p>
  </div>
  <div class="page">
    <p>JIT-Spray Flash JIT  Spraying info leak gadgets (Fermin Serna, 2013)</p>
    <p>Bypass ASLR and random NOP insertion:</p>
    <p>spray few instructions to predictable address  prevents random NOPS  trigger UAF bug and call JIT gadget  JIT gadget writes return address into heap spray, continue execution in JS</p>
    <p>Mitigated with constant blinding in Flash 11.8</p>
  </div>
  <div class="page">
    <p>JIT-Spray Exploit Your Java Native Vulnerabilities on Win7/JRE7 in One Minute (Yuki Chen, 2013)</p>
    <p>JIT-Spray on Java Runtime Environment</p>
    <p>3 of 4 bytes of one constant usable as payload</p>
    <p>Spray multiple functions to hit predictable address (32-bit)</p>
    <p>Jump to it with EIP control</p>
  </div>
  <div class="page">
    <p>JIT-Spray Exploit Your Java Native Vulnerabilities on Win7/JRE7 in One Minute (Yuki Chen, 2013)</p>
    <p>School book JIT Spray on JRE 7</p>
    <p>3 of 4 bytes of one constant usable as payload</p>
    <p>Spray multiple functions to hit predictable address (32-bit)</p>
    <p>Jump to it with EIP control</p>
  </div>
  <div class="page">
    <p>ASM.JS JIT-Spray on OdinMonkey (x86)</p>
  </div>
  <div class="page">
    <p>ASM.JS</p>
    <p>Strict subset of JS  OdinMonkey: Ahead-Of-Time (AOT) compiler in Firefox</p>
    <p>Appeared in 2013 in Firefox 22</p>
    <p>No need to frequently execute JS as in traditional JITs</p>
    <p>Generates binary blob with native machine code</p>
    <p>ASM.JS JIT-Spray possible until Firefox 52 (2017) (CVE-2017-5375, CVE-2017-5400)</p>
  </div>
  <div class="page">
    <p>ASM.JS Simple ASM.JS module</p>
  </div>
  <div class="page">
    <p>ASM.JS Simple ASM.JS module</p>
    <p>Prolog directive</p>
  </div>
  <div class="page">
    <p>ASM.JS Simple ASM.JS module</p>
    <p>Prolog directive</p>
    <p>ASM.JS module body</p>
  </div>
  <div class="page">
    <p>ASM.JS Simple ASM.JS module</p>
    <p>Prolog directive</p>
    <p>ASM.JS module body</p>
    <p>Your calculations</p>
  </div>
  <div class="page">
    <p>ASM.JS Simple ASM.JS module</p>
    <p>Prolog directive</p>
    <p>ASM.JS module body</p>
    <p>Your calculations</p>
  </div>
  <div class="page">
    <p>ASM.JS Inject Code to Predictable Addresses</p>
    <p>Request ASM.JS module several times</p>
  </div>
  <div class="page">
    <p>ASM.JS Inject Code to Predictable Addresses</p>
    <p>Value appears in</p>
    <p>machine code</p>
  </div>
  <div class="page">
    <p>ASM.JS Inject Code to Predictable Addresses</p>
    <p>Unblinded constant 0xc1c2c3c4 appears many times</p>
  </div>
  <div class="page">
    <p>ASM.JS Inject Code to Predictable Addresses</p>
    <p>Unblinded constant 0xc1c2c3c4 appears many times</p>
    <p>many module requests yield many copies</p>
  </div>
  <div class="page">
    <p>ASM.JS Inject Code to Predictable Addresses</p>
    <p>Unblinded constant 0xc1c2c3c4 appears many times</p>
    <p>many module requests yield many copies</p>
    <p>aligned to predictable addresses</p>
  </div>
  <div class="page">
    <p>ASM.JS Inject Code to Predictable Addresses</p>
    <p>Unblinded constant 0xc1c2c3c4 appears many times</p>
    <p>many module requests yield many copies</p>
    <p>aligned to predictable addresses</p>
    <p>ASM.JS JIT-Spray unlocked</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>How to inject</p>
    <p>arbitrary code?</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Arithmetic instructions 01: 90 nop 02: 90 nop 03: 90 nop 04: a805 test al, 5 06: 90 nop 07: 90 nop 08: 90 nop</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Setting array elements</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Setting array elements</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Setting array elements</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Setting array elements</p>
    <p>connect with jumps</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Foreign function call with double values</p>
  </div>
  <div class="page">
    <p>ASM.JS Payloads ASM.JS Statements Suitable to Embed Code</p>
    <p>Foreign function call with double values 0x00: movsd xmm1, mmword [****0530] 0x08: movsd xmm3, mmword [****0538] 0x10: movsd xmm2, mmword [****0540] 0x18: movsd xmm0, mmword [****0548] ...</p>
    <p>****0530: 41414141 41414141 42424242 42424242 ****0540: 43434343 43434343 44444444 44444444 ...</p>
    <p>constants are referenced</p>
    <p>same executable region</p>
    <p>continuous in address space</p>
    <p>gapless, arbitrary shellcode possible</p>
  </div>
  <div class="page">
    <p>JIT-Spray (ARM)</p>
  </div>
  <div class="page">
    <p>JIT-Spray (ARM) Too leJIT to Quit (Lian et al., 2015)</p>
    <p>http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/09ExtendingJIT.slide_.pdf</p>
    <p>Target: JSC DFG JIT</p>
    <p>Thumb-2:  mixed 16-bit and 32-bit instructions</p>
    <p>16-bit alignment</p>
  </div>
  <div class="page">
    <p>JIT-Spray (ARM) A Call to ARMs (Lian et al., 2017)</p>
    <p>Control JIT to emit 32-bit ARM AND instructions</p>
    <p>Force interpretation of AND instruction as two consecutive 16-bit Thumb-2 instructions</p>
    <p>1st instruction: attacker operation 2nd instruction: PC-relative jump</p>
    <p>self-sustained payload without resynchronization (target: Firefox IonMonkey)</p>
  </div>
  <div class="page">
    <p>JIT-Spray (ARM) A Call to ARMs (Lian et al., 2017)</p>
    <p>Control JIT to emit 32-bit ARM AND instructions</p>
    <p>Force interpretation of AND instruction as two consecutive 16-bit Thumb-2 instructions</p>
    <p>1st instruction: attacker operation 2nd instruction: PC-relative jump</p>
    <p>self-sustained payload without resynchronization (target: Firefox IonMonkey)</p>
    <p>JIT-Spray on architecture with</p>
    <p>fixed instruction length and instruction alignment</p>
  </div>
  <div class="page">
    <p>JIT-based Code Reuse</p>
  </div>
  <div class="page">
    <p>JIT-Code Reuse  Similar to JIT-Spray but requires info leak</p>
    <p>Abuse JIT to achieve various goals:</p>
    <p>two payload bytes are enough to create gadgets  bypass static ROP protections</p>
    <p>hide code within direct branch offsets  bypass Execute-Only Memory</p>
    <p>find 4-byte constants missed by constant blinding  bypass constant blinding and create gadgets</p>
  </div>
  <div class="page">
    <p>More Flaws beyond JIT-Spray</p>
  </div>
  <div class="page">
    <p>Beyond JIT-Spray JIT-related flaws</p>
    <p>More exploit-mitigation bypasses</p>
    <p>DEP and CFG Bypass (Tencent, 2015)</p>
    <p>Chakra-JIT CFG Bypass (Theori, 2016)</p>
    <p>ACG Bypass (Ivan Fratric, 2018)</p>
  </div>
  <div class="page">
    <p>Beyond JIT-Spray JIT-related flaws</p>
    <p>Vulnerabilities in JIT-compilers</p>
    <p>Web Assembly bugs found by Google P0</p>
    <p>Safari JIT (Pwn2Own 2017, Pwn2Own 2018)</p>
    <p>Chrome 63 (Windows OSR Team)</p>
    <p>Chakra JIT (CVE-2018-8137, CVE-2018-0953)</p>
  </div>
  <div class="page">
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Summary  JIT-Spray simplified client-side exploitation in the past</p>
    <p>ASM.JS in OdinMonkey (x86) was the perfect JIT-Spray target</p>
    <p>JIT-Spray was possible on x86 and ARM</p>
    <p>JIT-Spray seems infeasible in a large (64-bit) address space, under ASLR and Control-Flow Integrity</p>
    <p>JIT compilers have a big attack surface and remain prone to vulnerabilities</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
  </div>
</Presentation>
