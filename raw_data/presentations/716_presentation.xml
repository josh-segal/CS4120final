<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Client Side HTML Security Policies</p>
    <p>Joel Weinberger, Adam Barth, Dawn Song</p>
  </div>
  <div class="page">
    <p>MySpace</p>
  </div>
  <div class="page">
    <p>Samy Worm</p>
  </div>
  <div class="page">
    <p>Content Injection</p>
    <p>The insertion of untrusted data, structure, or code into an application</p>
  </div>
  <div class="page">
    <p>Key Points</p>
    <p>Explicit policies form a compelling, unique point in the content injection protection design space</p>
    <p>The current trade-offs in explicit policy systems make none of the current systems completely viable</p>
    <p>Explicit policies are the way forward, but we need new system designs</p>
  </div>
  <div class="page">
    <p>Content Injection</p>
    <p>&lt;html&gt;</p>
    <p>&lt;h1&gt;Forum Post #1&lt;/h1&gt;</p>
    <p>&lt;div&gt;</p>
    <p>This is the content of the post.</p>
    <p>&lt;/div&gt;</p>
    <p>&lt;/html&gt;</p>
  </div>
  <div class="page">
    <p>Content Injection</p>
    <p>&lt;html&gt;</p>
    <p>&lt;h1&gt;Forum Post #1&lt;/h1&gt;</p>
    <p>&lt;div&gt;</p>
    <p>&lt;script&gt;alert(document.cookie);&lt;/script&gt;</p>
    <p>&lt;/div&gt;</p>
    <p>&lt;/html&gt;</p>
  </div>
  <div class="page">
    <p>Policies</p>
    <p>&lt;html&gt;</p>
    <p>&lt;h1&gt;Forum Post #1&lt;/h1&gt;</p>
    <p>&lt;div&gt;</p>
    <p>&lt;script&gt;alert(document.cookie);&lt;/script&gt;</p>
    <p>&lt;/div&gt;</p>
    <p>&lt;/html&gt;</p>
    <p>Trusted</p>
    <p>Untrusted</p>
    <p>Trusted Trusted</p>
  </div>
  <div class="page">
    <p>Web Application Frameworks</p>
    <p>Systems for writing web applications</p>
    <p>Frameworks provide tools for sanitizing content</p>
    <p>Turns out, sanitization is hard  Shameless plug for our ESORICS 2011 paper:</p>
    <p>A Systematic Analysis of XSS Sanitization in Web Application Frameworks</p>
  </div>
  <div class="page">
    <p>Implicit Policies</p>
    <p>Browser Web Application</p>
    <p>Policy</p>
  </div>
  <div class="page">
    <p>Explicit Policies</p>
    <p>Browser</p>
    <p>Web Application</p>
    <p>Policy</p>
  </div>
  <div class="page">
    <p>Key Points</p>
    <p>Explicit policies form a compelling, unique point in the content injection protection design space</p>
    <p>The current trade-offs in explicit policy systems make none of the current systems completely viable</p>
    <p>Explicit policies are the way forward, but we need new system designs</p>
  </div>
  <div class="page">
    <p>Explicit Policy Systems</p>
    <p>BEEP</p>
    <p>BLUEPRINT</p>
    <p>Content Security Policy (CSP)</p>
  </div>
  <div class="page">
    <p>BEEP</p>
    <p>Hashes of allowed scripts</p>
    <p>Performance: good</p>
    <p>Dynamic scripts are very hard to get right</p>
    <p>Only XSS</p>
  </div>
  <div class="page">
    <p>BLUEPRINT</p>
    <p>Structural description of page, enforced by JavaScript library</p>
    <p>Performance: poor</p>
    <p>Does not trust the browsers parser</p>
    <p>Very fine grained granularity</p>
  </div>
  <div class="page">
    <p>Content Security Policy (CSP)</p>
    <p>Specify allowed behaviors of page</p>
    <p>Performance: ?</p>
    <p>Only handles some content injection</p>
    <p>Coarse grained  What is the affect on how applications are written?</p>
  </div>
  <div class="page">
    <p>Applying CSP to Applications</p>
    <p>How does CSP affect Web applications?</p>
    <p>Apply CSP to Bugzilla and HotCRP</p>
    <p>Measure performance of applications and how the applications were changed</p>
  </div>
  <div class="page">
    <p>CSP Study</p>
    <p>Developer effort to retrofit applications to be CSP compatible is large</p>
    <p>Template variables cannot be used in scripts</p>
    <p>Need to lookup data through JavaScript</p>
    <p>Template logic no longer affects scripts</p>
  </div>
  <div class="page">
    <p>CSP Study</p>
    <p>Page No Inline JS Async JS</p>
    <p>index.cgi 14.8% -3.0%</p>
    <p>editsettings.cgi 6.3% 5.1%</p>
    <p>enter_bug.cgi 57.6% 44.2%</p>
    <p>show_bug.cgi 51.5% 4.0%</p>
    <p>Page No Inline JS Async JS</p>
    <p>index.php 45.3% 37.2%</p>
    <p>search.php 52.9% 50.4%</p>
    <p>settings.php 23.3% 16.1%</p>
    <p>paper.php 61.1% 58.5%</p>
    <p>contacts.php 67.8% 35.5%</p>
    <p>Bugzilla</p>
    <p>HotCRP</p>
  </div>
  <div class="page">
    <p>Key Points</p>
    <p>Explicit policies form a compelling, unique point in the content injection protection design space</p>
    <p>The current trade-offs in explicit policy systems make none of the current systems completely viable</p>
    <p>Explicit policies are the way forward, but we need new system designs</p>
  </div>
  <div class="page">
    <p>Explicit Policies: The Good and the Bad</p>
    <p>Provide a separation policy from application  Not doing this makes security hard</p>
    <p>Simple or complex: you choose</p>
    <p>Not good at performance and developer usability</p>
  </div>
  <div class="page">
    <p>Towards the Future</p>
    <p>Policy systems are useful and should be how we approach content injection</p>
    <p>CSP has some great properties, but suffers when applied to current applications</p>
    <p>How can we combine features from these different systems?</p>
  </div>
  <div class="page">
    <p>Key Points</p>
    <p>Explicit policies form a compelling, unique point in the content injection protection design space</p>
    <p>The current trade-offs in explicit policy systems make none of the current systems completely viable</p>
    <p>Explicit policies are the way forward, but we need new system designs</p>
  </div>
</Presentation>
