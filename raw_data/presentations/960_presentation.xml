<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Erasing Beladys Limitations: In Search of Flash Cache Offline Optimality</p>
    <p>Yue Cheng1,2 Fred Douglis2 Philip Shilane2 Michael Trachtman2 Grant Wallace2 Peter Desnoyers3 Kai Li4</p>
  </div>
  <div class="page">
    <p>Background  Unlike magnetic HDDs, flash SSDs erase</p>
    <p>data in large blocks  Limited number of erasures before errors</p>
    <p>occur</p>
    <p>... Want to make effective use of SSDs while being cognizant of erasure penalty</p>
  </div>
  <div class="page">
    <p>Flash Caching  Using SSDs for an HDD cache</p>
    <p>SSD cache as a tier btw. DRAM and HDD  Goal: to balance performance against endurance</p>
    <p>Nitro [USENIX ATC 14], CacheDedup [USENIX FAST 16]</p>
    <p>RIPQ [USENIX FAST 15]  Pannier [ACM Middleware 15]</p>
    <p>How do we know if were doing well?  Comparison against an offline optimal best case  But what is the offline optimal for flash caches?</p>
    <p>Clients</p>
    <p>DRAM</p>
    <p>Flash cache</p>
    <p>HDDs</p>
  </div>
  <div class="page">
    <p>Offline Optimality  Beladys MIN: A simple offline caching algorithm</p>
    <p>when the next access is known  Inserts a new entry into the cache, removing the entry</p>
    <p>that will be used furthest in the future  Yields the optimal read hit ratio (RHR)</p>
    <p>MIN is not able to provide the optimal erasures in the context of flash caching  MIN inserts data that wont actually</p>
    <p>be read</p>
    <p>Re ad</p>
    <p>h it r a*</p>
    <p>o (%</p>
    <p>)</p>
    <p>Norm. Erasures</p>
    <p>MIN Our alg</p>
  </div>
  <div class="page">
    <p>Flash Cache Offline Optimality  Objectives:  O1: Minimize erasures s.t. maximal RHR</p>
    <p>Never insert items if it does not increase RHR  O2: Maximize RHR s.t. an endurance limit  O3: Maximize combination of RHR and erasures</p>
    <p>True optimal  How to compute the offline optimal?  What is the complexity?</p>
    <p>Heuristics  How can we approximate? The focus of our work</p>
  </div>
  <div class="page">
    <p>MIN  Blocks  Minimum unit of access</p>
    <p>to the cache (e.g., 4KB)</p>
    <p>MIN priority queue (ranked based on next ref. timestamp) 1. Dont insert blocks w/</p>
    <p>furthest next ref.</p>
    <p>Block</p>
    <p>Head Tail</p>
    <p>Next ref Amestamp: 200</p>
    <p>Next ref timestamp</p>
  </div>
  <div class="page">
    <p>MIN  Blocks  Minimum unit of access</p>
    <p>to the cache (e.g., 4KB)</p>
    <p>MIN priority queue (ranked based on next ref. timestamp) 1. Dont insert blocks w/</p>
    <p>furthest next ref. 2. A new block is inserted</p>
    <p>Block</p>
    <p>Head Tail</p>
    <p>Next ref Amestamp: 18</p>
    <p>Next ref timestamp</p>
  </div>
  <div class="page">
    <p>Key Components  MIN priority queue</p>
    <p>In-RAM structure tracking runtime status at block granularity</p>
    <p>Containers  Unit of insertion &amp; eviction for flash</p>
    <p>cache (e.g., 2MB)  Write buffer</p>
    <p>Packs blocks into in-RAM write buffer (e.g., 8MB)</p>
    <p>Container priority queue  In-RAM structure tracking flash</p>
    <p>containers</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Container</p>
    <p>Container PQ</p>
    <p>RAM</p>
    <p>Flash</p>
    <p>Write buffer</p>
    <p>MIN PQ</p>
  </div>
  <div class="page">
    <p>Container-optimized Heuristic  Insert a block  Into the write buffer</p>
    <p>(sorted by eviction timestamp)</p>
    <p>Into the MIN queue (sorted by next ref. timestamp)</p>
    <p>Container PQ</p>
    <p>RAM</p>
    <p>Flash</p>
    <p>Write buffer</p>
    <p>MIN PQ</p>
    <p>BlockA BA: EvicAon Amestamp: 15 Next ref Amestamp: 10</p>
    <p>Earliest to die Latest to die</p>
    <p>Next ref. nearest Next ref. furthest</p>
  </div>
  <div class="page">
    <p>Container-optimized Heuristic  Insert a block  Into the write buffer</p>
    <p>(sorted by eviction timestamp)</p>
    <p>Into the MIN queue (sorted by next ref. timestamp)</p>
    <p>Container PQ</p>
    <p>RAM</p>
    <p>Flash</p>
    <p>Write buffer</p>
    <p>MIN PQ</p>
    <p>BlockB BB: EvicAon Amestamp: 25 Next ref Amestamp: 6</p>
    <p>BA BB</p>
    <p>BA: EvicAon Amestamp: 15 Next ref Amestamp: 10</p>
    <p>BB</p>
    <p>BA</p>
    <p>Earliest to die Latest to die</p>
    <p>Next ref. nearest Next ref. furthest</p>
  </div>
  <div class="page">
    <p>Container-optimized Heuristic  Write buffer is dispersed</p>
    <p>into containers when it is FULL</p>
    <p>The containers are written to the flash cache</p>
    <p>Container PQ</p>
    <p>RAM</p>
    <p>Flash</p>
    <p>Write buffer</p>
  </div>
  <div class="page">
    <p>Container-optimized Heuristic  Update block status on</p>
    <p>invalidation or when MIN would evict block as furthest in future (evictpending)  Remains in container until</p>
    <p>that is GCd  Rank container queue by #</p>
    <p>valid blocks  Evict the tail container to</p>
    <p>make room for new data  Copy forward valid blocks</p>
    <p>to the write buffer</p>
    <p>Valid Invalid Evict-pending</p>
    <p>Most valid blocks</p>
    <p>Least valid blocks</p>
    <p>Container</p>
    <p>MIN PQ ... Next ref. nearest Next ref. furthest</p>
    <p>Write buffer 12</p>
    <p>Container PQ</p>
  </div>
  <div class="page">
    <p>Optimizations  R1: Only insert blocks read at least once</p>
    <p>before eviction  TRIM: Skips dead blocks during GC  Dead: overwritten or never reaccessed</p>
    <p>Copy-forwarding reduction: Eliminates wasted CF blocks</p>
    <p>E: Segregates blocks by eviction timestamp</p>
  </div>
  <div class="page">
    <p>Experimental Methodology  Storage traces (34): limit to large enough datasets</p>
    <p>EMC VMAX: 25  MSR Cambridge: 3  MS Production Servers: 6</p>
    <p>Implementation  Full-system flash cache simulator  Vary cache size as function of unique data accessed in trace: 1-10%</p>
    <p>Metrics  Performance: Read hit ratio (RHR)  Endurance: Erasures per block per day (EPBPD)  Function of RHR and EPBPD: Weighted flash usage effectiveness (WFUE)</p>
  </div>
  <div class="page">
    <p>Comparing Algorithms</p>
    <p>Policy Description O C</p>
    <p>LRU Least recently used</p>
    <p>RIPQ+ Static web content</p>
    <p>Pannier Handles divergent containers</p>
    <p>MIN Dont insert data w/ furthest next ref</p>
    <p>MIN+ Dont insert data evicted w/o read</p>
    <p>C Our container-optimized heuristic</p>
    <p>(O=Offline, C=Container-op*mized)</p>
    <p>Re ad</p>
    <p>h it r a*</p>
    <p>o (%</p>
    <p>)</p>
    <p>Online Offline</p>
    <p>All 3 offline algorithms achieve the same (opAmal) RHR</p>
    <p>Higher is be\er!</p>
  </div>
  <div class="page">
    <p>Comparing Algorithms</p>
    <p>Re ad</p>
    <p>h it r a*</p>
    <p>o (%</p>
    <p>)</p>
    <p>EP BP</p>
    <p>D</p>
    <p>Online Offline</p>
    <p>Higher is be\er! Lower is be\er!</p>
    <p>C has significantly fewer EPBPD w/ idenAcal RHR!</p>
  </div>
  <div class="page">
    <p>Evaluating Heuristic Techniques</p>
    <p>EP BP</p>
    <p>D</p>
    <p>Base MIN +R1 +TRIM +CFR +E</p>
    <p>R1: Omit insertion with no reread</p>
    <p>TRIM: Notify GC to omit dead blocks</p>
    <p>CFR: Avoid wasted CF blocks</p>
    <p>E: Segregate blocks by evict timestamp</p>
  </div>
  <div class="page">
    <p>EP BP</p>
    <p>D</p>
    <p>Evaluating Heuristic Techniques</p>
    <p>Base MIN +R1 +TRIM +CFR +E</p>
    <p>R1: Omit insertion with no reread</p>
    <p>TRIM: Notify GC to omit dead blocks</p>
    <p>CFR: Avoid wasted CF blocks</p>
    <p>E: Segregate blocks by evict timestamp</p>
    <p>+TRIM 18</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Our container-optimized heuristic maintains the optimal RHR while reducing erasures by up to 67%</p>
    <p>Additional optimizations may be possible to move this heuristic to the true optimal</p>
    <p>RH R (%</p>
    <p>)</p>
    <p>EPBPD (log-scale)</p>
    <p>Important to have a baseline for the offline optimal considering both RHR and endurance</p>
    <p>C M Online</p>
  </div>
  <div class="page">
    <p>Erasing Beladys Limitations: In Search of Flash Cache Offline Optimality</p>
    <p>Thank you! Q &amp; A Acknowledgments:</p>
    <p>Dan Arnon, Cheng Li, Stephen Manley, Darren Sawyer, Dan Tsafrir, Kevin Xu, and Sanjeev Arora and his students from Princeton University</p>
  </div>
</Presentation>
