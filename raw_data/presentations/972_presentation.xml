<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scalable Low-Latency Indexes for a Key-Value Store</p>
    <p>Ankita Kejriwal</p>
    <p>With Arjun Gopalan, Ashish Gupta, Zhihao Jia, Stephen Yang</p>
    <p>and John Ousterhout</p>
  </div>
  <div class="page">
    <p>Can a key value store support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale?</p>
    <p>SLIK Slide 2</p>
    <p>Conjecture</p>
  </div>
  <div class="page">
    <p>Scalable Low-latency Indexes for a Key-value Store: SLIK  Enables multiple secondary keys for each object  Allows lookups and range queries on these keys</p>
    <p>Key design features:  Scalability using independent partitioning  Strong consistency using an ordered write approach</p>
    <p>Implemented in RAMCloud  Low-latency, DRAM-based, distributed key-value store</p>
    <p>Performance:  Scalability: Linear throughput increase with increasing number of partitions  Low-latency:11-13 s indexed reads, 29-37 s durable writes/overwrites  Latency approximately 2x non-indexed reads and writes</p>
    <p>Summary of Results</p>
    <p>SLIK Slide 3</p>
  </div>
  <div class="page">
    <p>SLIK Slide 4</p>
    <p>Talk Outline</p>
    <p>Motivation  Design  Performance  Related Work  Summary</p>
  </div>
  <div class="page">
    <p>SLIK Slide 5</p>
    <p>Motivation</p>
    <p>Traditional RDBMs</p>
    <p>MySQL</p>
  </div>
  <div class="page">
    <p>SLIK Slide 6</p>
    <p>Motivation</p>
    <p>Traditional RDBMs</p>
    <p>NoSQL Systems</p>
    <p>+ scalability</p>
    <p>- data models - consistency MySQL</p>
  </div>
  <div class="page">
    <p>SLIK Slide 7</p>
    <p>Motivation</p>
    <p>Traditional RDBMs</p>
    <p>NoSQL Systems</p>
    <p>+ scalability</p>
    <p>- data models - consistency MySQL</p>
    <p>+ consistency</p>
    <p>+ data models + low latency</p>
    <p>H-Base Espresso</p>
    <p>PNUTS Tao</p>
    <p>Spanner Megastore HyperDex MongoDB H-Store</p>
    <p>RAMCloud</p>
    <p>Memcached</p>
    <p>Yesquel</p>
  </div>
  <div class="page">
    <p>SLIK Slide 8</p>
    <p>Motivation</p>
    <p>Traditional RDBMs</p>
    <p>NoSQL Systems</p>
    <p>+ scalability</p>
    <p>- data models - consistency MySQL</p>
    <p>+ consistency</p>
    <p>+ data models + low latency</p>
    <p>H-Base Espresso</p>
    <p>PNUTS Tao</p>
    <p>Spanner Megastore HyperDex MongoDB H-Store</p>
    <p>RAMCloud</p>
    <p>Memcached</p>
    <p>Yesquel</p>
  </div>
  <div class="page">
    <p>SLIK Slide 9</p>
    <p>Talk Outline</p>
    <p>Motivation  Design  Performance  Related Work  Summary</p>
  </div>
  <div class="page">
    <p>Data model  Scalability  Strong consistency  Storage  Durability  Availability</p>
    <p>SLIK Slide 10</p>
    <p>Design</p>
  </div>
  <div class="page">
    <p>Data model  Scalability  Strong consistency  Storage  Durability  Availability</p>
    <p>SLIK Slide 11</p>
    <p>Design</p>
  </div>
  <div class="page">
    <p>Data model  Scalability  Strong consistency  Storage  Durability  Availability</p>
    <p>SLIK Slide 12</p>
    <p>Design</p>
  </div>
  <div class="page">
    <p>Nearly constant low latency irrespective of the server span</p>
    <p>Linear increase in throughput with the server span</p>
    <p>SLIK Slide 13</p>
    <p>Scalability</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Colocation</p>
    <p>Slide 14</p>
    <p>Colocate index entries and objects</p>
    <p>One of the keys used to partition the objects and indexes</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>v  5 e  4 g  6</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>b  8 m  7</p>
    <p>Indexlet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>n  3 q  1 a  2</p>
    <p>SLIK</p>
    <p>primary key</p>
    <p>index key</p>
    <p>value index key</p>
    <p>primary key</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Colocation</p>
    <p>Slide 15</p>
    <p>Colocate index entries and objects</p>
    <p>One of the keys used to partition the objects and indexes</p>
    <p>No association between index partitions and index key ranges</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>v  5 e  4 g  6</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>b  8 m  7</p>
    <p>Indexlet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>n  3 q  1 a  2 primary</p>
    <p>key</p>
    <p>index key</p>
    <p>value index key</p>
    <p>primary key Metadata:</p>
    <p>tablet &amp; indexlet w/ pk 1 to 3: S 1 tablet &amp; indexlet w/ pk 4 to 6: S 2 tablet &amp; indexlet w/ pk &gt;= 7: S 3</p>
  </div>
  <div class="page">
    <p>Slide 16</p>
    <p>Index Partitioning: Colocation</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>a  2 n  3 q  1</p>
    <p>Tablet</p>
    <p>v  5 e  4 g  6</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>b  8 m  7</p>
    <p>Indexlet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>SLIK</p>
    <p>Client query: objects with index key between m - q</p>
  </div>
  <div class="page">
    <p>Slide 17</p>
    <p>Index Partitioning: Colocation</p>
    <p>Client query: objects with index key between m - q</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>a  2 n  3 q  1</p>
    <p>Tablet</p>
    <p>v  5 e  4 g  6</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>b  8 m  7</p>
    <p>Indexlet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Slide 18</p>
    <p>Index Partitioning: Colocation</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>a  2 n  3 q  1</p>
    <p>Tablet</p>
    <p>v  5 e  4 g  6</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>b  8 m  7</p>
    <p>Indexlet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Client query: objects with index key between m - q</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Slide 19</p>
    <p>Index Partitioning: Colocation</p>
    <p>Not Scalable!</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>a  2 n  3 q  1</p>
    <p>Tablet</p>
    <p>v  5 e  4 g  6</p>
    <p>Indexlet</p>
    <p>Tablet</p>
    <p>b  8 m  7</p>
    <p>Indexlet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Client query: objects with index key between m - q</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Independent</p>
    <p>Slide 20</p>
    <p>Partition each index and table independently</p>
    <p>Partition each index according to sort order for that index</p>
    <p>SLIK</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Indexlet</p>
    <p>a  2 b  8 e  4 g  6</p>
    <p>Server 4</p>
    <p>Indexlet</p>
    <p>n  3 m  7 v  5 q  1</p>
    <p>Server 5</p>
    <p>primary key</p>
    <p>index key</p>
    <p>value index key</p>
    <p>primary key</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Independent</p>
    <p>Slide 21</p>
    <p>Partition each index and table independently</p>
    <p>Partition each index according to sort order for that index</p>
    <p>SLIK</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Indexlet</p>
    <p>a  2 b  8 e  4 g  6</p>
    <p>Server 4</p>
    <p>Indexlet</p>
    <p>n  3 m  7 v  5 q  1</p>
    <p>Server 5</p>
    <p>primary key</p>
    <p>index key</p>
    <p>value index key</p>
    <p>primary key</p>
    <p>Metadata: tablet w/ pk 1 to 3: S 1 tablet w/ pk 4 to 6: S 2 tablet w/ pk &gt;= 7: S 3 indexlet w/ sk a to g: S 4 indexlet w/ sk &gt;= h: S 5</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Independent</p>
    <p>Slide 22 SLIK</p>
    <p>Client query: objects with index key between m - q</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Indexlet</p>
    <p>a  2 b  8 e  4 g  6</p>
    <p>Server 4</p>
    <p>Indexlet</p>
    <p>n  3 m  7 v  5 q  1</p>
    <p>Server 5</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Independent</p>
    <p>Slide 23</p>
    <p>Client query: objects with index key between m - q</p>
    <p>Indexlet</p>
    <p>a  2 b  8 e  4 g  6</p>
    <p>Server 4</p>
    <p>Indexlet</p>
    <p>n  3 m  7 v  5 q  1</p>
    <p>Server 5</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Independent</p>
    <p>Slide 24</p>
    <p>Client query: objects with index key between m - q</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Indexlet</p>
    <p>a  2 b  8 e  4 g  6</p>
    <p>Server 4</p>
    <p>Indexlet</p>
    <p>n  3 m  7 v  5 q  1</p>
    <p>Server 5</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Index Partitioning: Independent</p>
    <p>Slide 25</p>
    <p>Client query: objects with index key between m - q</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Tablet</p>
    <p>Server 1 Server 2 Server 3</p>
    <p>Indexlet</p>
    <p>a  2 b  8 e  4 g  6</p>
    <p>Server 4</p>
    <p>Indexlet</p>
    <p>n  3 m  7 v  5 q  1</p>
    <p>Server 5</p>
    <p>Scalable!</p>
  </div>
  <div class="page">
    <p>Nearly constant low latency irrespective of the server span</p>
    <p>Linear increase in throughput with the server span</p>
    <p>SLIK Slide 26</p>
    <p>Scalability</p>
  </div>
  <div class="page">
    <p>Nearly constant low latency irrespective of the server span</p>
    <p>Linear increase in throughput with the server span  Solution: Use independent partitioning</p>
    <p>But: indexed object writes: distributed operations</p>
    <p>Potential consistency issues between indexes and objects</p>
    <p>SLIK Slide 27</p>
    <p>Scalability</p>
  </div>
  <div class="page">
    <p>Data model  Scalability  Strong consistency  Storage  Durability  Availability</p>
    <p>SLIK Slide 28</p>
    <p>Design</p>
  </div>
  <div class="page">
    <p>SLIK Slide 29</p>
    <p>Design</p>
    <p>Data model  Scalability  Strong consistency  Storage  Durability  Availability</p>
  </div>
  <div class="page">
    <p>SLIK Slide 30</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
  </div>
  <div class="page">
    <p>SLIK Slide 31</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
    <p>Frank</p>
    <p>Bob Alice</p>
    <p>Trent</p>
    <p>Carol Peggy</p>
  </div>
  <div class="page">
    <p>SLIK Slide 32</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
    <p>students with name</p>
    <p>between a  d?</p>
    <p>Alice</p>
    <p>Carol</p>
    <p>Frank</p>
    <p>Bob Alice</p>
    <p>Trent</p>
    <p>Carol Peggy</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>SLIK Slide 33</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
  </div>
  <div class="page">
    <p>SLIK Slide 34</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
    <p>Frank</p>
    <p>Bob Alice</p>
    <p>Trent</p>
    <p>Carol Peggy</p>
  </div>
  <div class="page">
    <p>SLIK Slide 35</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
    <p>students with name</p>
    <p>between a  d?</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>Carol</p>
    <p>Peggy</p>
    <p>Frank</p>
    <p>Bob Alice</p>
    <p>Trent</p>
    <p>Carol Peggy ?</p>
  </div>
  <div class="page">
    <p>SLIK Slide 36</p>
    <p>Consistency Properties</p>
    <p>If an object contains a given secondary key, then an index lookup with that key will return the object</p>
    <p>If an object is returned by index lookup, then this object contains a secondary key for that index within the specified range</p>
    <p>students with name</p>
    <p>between a  d?</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>Carol</p>
    <p>Frank</p>
    <p>Bob Alice</p>
    <p>Trent</p>
    <p>Carol Peggy</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 37</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 38</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>Foo Bob ... Object</p>
    <p>Index Entry</p>
    <p>Bob  Foo</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 39</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>Foo Bob ... Object</p>
    <p>Index Entry</p>
    <p>Bob  Foo Sam  Foo 1. Add new index entry</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 40</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>Foo Sam ... Object</p>
    <p>Index Entry</p>
    <p>Bob  Foo Sam  Foo 1. Add new index entry 2. Modify object</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 41</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>Foo Sam ... Object</p>
    <p>Index Entry</p>
    <p>Sam  Foo 1. Add new index entry 2. Modify object 3. Remove old index entry</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 42</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>time</p>
    <p>Bob  Foo</p>
    <p>Sam  Foo</p>
    <p>Foo Bob ... Foo Sam ... Object</p>
    <p>Index Entry</p>
    <p>modify object remove object write object</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 43</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>time</p>
    <p>Bob  Foo</p>
    <p>Sam  Foo</p>
    <p>Foo Bob ... Foo Sam ... Object</p>
    <p>Index Entry</p>
    <p>modify object remove object write object</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 44</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>time</p>
    <p>Bob  Foo</p>
    <p>Sam  Foo</p>
    <p>commit point commit point commit point</p>
    <p>Foo Bob ... Foo Sam ... Object</p>
    <p>Index Entry</p>
    <p>modify object remove object write object</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Slide 45</p>
    <p>Consistency properties:  If an object contains a given secondary key, then an index lookup with</p>
    <p>that key will return the object  If an object is returned by index lookup, then this object contains a</p>
    <p>secondary key for that index within the specified range</p>
    <p>Solution:  Longer index lifespan (via ordered writes)  Object data is ground truth and index entries serve as hints</p>
    <p>time</p>
    <p>Bob  Foo</p>
    <p>Sam  Foo</p>
    <p>commit point commit point commit point</p>
    <p>Foo Bob ... Foo Sam ... Object</p>
    <p>Index Entry</p>
    <p>modify object remove object write object</p>
  </div>
  <div class="page">
    <p>SLIK Slide 46</p>
    <p>Talk Outline</p>
    <p>Motivation  Design  Performance  Related Work  Summary</p>
  </div>
  <div class="page">
    <p>Does SLIK provide low latency?  Does SLIK provide scalability?</p>
    <p>How does the performance of indexing with SLIK compare to other state-of-the-art systems?</p>
    <p>SLIK Slide 47</p>
    <p>Performance: Questions</p>
  </div>
  <div class="page">
    <p>H-Store:  Main memory database  Data (and indexes) partitioned based on specified attribute  Many parameters for tuning</p>
    <p>Got assistance from developers to tune for each test  Examples: txn_incoming_delay, partitioning column</p>
    <p>HyperDex:  Spaces containing objects  Data (and indexes) partitioned using hyperspace hashing  Each index contains all object data  Designed to use disk for storage</p>
    <p>Slide 48</p>
    <p>Performance: Systems for Comparison</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>SLIK Slide 49</p>
    <p>Hardware</p>
  </div>
  <div class="page">
    <p>Slide 50</p>
    <p>Latency</p>
    <p>Experiments:</p>
    <p>Configuration:</p>
    <p>Single client</p>
    <p>Single partition for table and (each) index</p>
    <p>Object: 30 B pk, 30 B sk, 100 B value</p>
    <p>SLIK: Three-way replication to durable backups</p>
    <p>H-Store: No replication, durability disabled, single server</p>
  </div>
  <div class="page">
    <p>Slide 51</p>
    <p>Lookup Latency</p>
    <p>(c )</p>
    <p>O ve</p>
    <p>rw ri</p>
    <p>te L</p>
    <p>at en</p>
    <p>cy (</p>
    <p>s )</p>
    <p>Size of Index (# objects)</p>
    <p>H-Store SK Partitioned</p>
    <p>H-Store PK Partitioned</p>
    <p>HyperDex</p>
    <p>SLIK tcp</p>
    <p>SLIK</p>
    <p>(a ) L</p>
    <p>oo ku</p>
    <p>p La</p>
    <p>te nc</p>
    <p>y (</p>
    <p>s)</p>
    <p>H-Store</p>
    <p>SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Slide 52</p>
    <p>Lookup Latency</p>
    <p>(c )</p>
    <p>O ve</p>
    <p>rw ri</p>
    <p>te L</p>
    <p>at en</p>
    <p>cy (</p>
    <p>s )</p>
    <p>Size of Index (# objects)</p>
    <p>H-Store SK Partitioned</p>
    <p>H-Store PK Partitioned</p>
    <p>HyperDex</p>
    <p>SLIK tcp</p>
    <p>SLIK</p>
    <p>(a ) L</p>
    <p>oo ku</p>
    <p>p La</p>
    <p>te nc</p>
    <p>y (</p>
    <p>s)</p>
    <p>H-Store</p>
    <p>SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Overwrite Latency</p>
    <p>Slide 53</p>
    <p>(b ) O</p>
    <p>ve rw</p>
    <p>rit e</p>
    <p>La te</p>
    <p>nc y</p>
    <p>( s)</p>
    <p>Size of Index (# objects)</p>
    <p>H-Store</p>
    <p>SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Multiple Secondary Indexes</p>
    <p>Slide 54</p>
    <p>O ve</p>
    <p>rw rit</p>
    <p>e La</p>
    <p>te nc</p>
    <p>y (</p>
    <p>s)</p>
    <p>Number of Indexes</p>
    <p>H-Store via PK</p>
    <p>H-Store via SK</p>
    <p>SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Multiple Secondary Indexes</p>
    <p>Slide 55</p>
    <p>O ve</p>
    <p>rw rit</p>
    <p>e La</p>
    <p>te nc</p>
    <p>y (</p>
    <p>s)</p>
    <p>Number of Indexes</p>
    <p>H-Store via PK</p>
    <p>H-Store via SK</p>
    <p>SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Multiple Secondary Indexes</p>
    <p>Slide 56</p>
    <p>O ve</p>
    <p>rw rit</p>
    <p>e La</p>
    <p>te nc</p>
    <p>y (</p>
    <p>s)</p>
    <p>Number of Indexes</p>
    <p>H-Store via PK</p>
    <p>H-Store via SK</p>
    <p>SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Slide 57</p>
    <p>Scalability Compare: (a) partitioning approaches (b) systems</p>
    <p>Experiments:</p>
    <p>Configuration:</p>
    <p>Single table with one secondary index</p>
    <p>Table and index partitioned across servers</p>
    <p>Object: 30 B pk, 30 B sk, 100 B value</p>
    <p>Throughput experiments: Loaded system</p>
    <p>Latency experiments: Unloaded system</p>
  </div>
  <div class="page">
    <p>Scalability: Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (1</p>
    <p>oo ku</p>
    <p>ps /s</p>
    <p>ec )</p>
    <p>Number of Indexlets</p>
    <p>Independent Partitioning Colocation</p>
    <p>Slide 58</p>
  </div>
  <div class="page">
    <p>Slide 59</p>
    <p>Scalability: Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (1</p>
    <p>oo ku</p>
    <p>ps /s</p>
    <p>ec )</p>
    <p>Number of Servers</p>
    <p>H-Store SLIK TCP</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>Scalability: Latency</p>
    <p>Lo ok</p>
    <p>up L</p>
    <p>at en</p>
    <p>cy (</p>
    <p>s)</p>
    <p>Number of Servers</p>
    <p>Colocation size 1 Colocation size 10</p>
    <p>Independent size 1 Independent size 10</p>
    <p>Slide 60</p>
  </div>
  <div class="page">
    <p>Slide 61</p>
    <p>Scalability: Latency</p>
    <p>Av er</p>
    <p>ag e</p>
    <p>La te</p>
    <p>nc y</p>
    <p>pe r</p>
    <p>Lo ok</p>
    <p>up (</p>
    <p>s)</p>
    <p>Number of Indexlets</p>
    <p>H-Store</p>
    <p>SLIK</p>
  </div>
  <div class="page">
    <p>SLIK Slide 62</p>
    <p>Talk Outline</p>
    <p>Motivation  Design  Performance  Related Work  Summary</p>
  </div>
  <div class="page">
    <p>SLIK Slide 63</p>
    <p>Related Work</p>
    <p>Data storage system  Data model (spectrum from key-value to relational)  Consistency (spectrum from eventual to strong)  Performance: latency and/or throughput</p>
  </div>
  <div class="page">
    <p>Current Web Scale Datastores</p>
    <p>Slide 64 SLIK</p>
    <p>Eventual</p>
    <p>Strong</p>
    <p>Causal, SI, Define</p>
    <p>your own</p>
    <p>Read / write latency (approx)</p>
    <p>C o</p>
    <p>n si</p>
    <p>st en</p>
    <p>cy L</p>
    <p>ev el</p>
    <p>Better</p>
    <p>B et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>Current Web Scale Datastores</p>
    <p>Slide 65 SLIK</p>
    <p>Eventual</p>
    <p>Strong</p>
    <p>Causal, SI, Define</p>
    <p>your own</p>
    <p>Read / write latency (approx)</p>
    <p>C o</p>
    <p>n si</p>
    <p>st en</p>
    <p>cy L</p>
    <p>ev el</p>
    <p>Better</p>
    <p>B et</p>
    <p>te r</p>
    <p>Tao CouchDB</p>
    <p>Espresso PNUTS</p>
  </div>
  <div class="page">
    <p>Current Web Scale Datastores</p>
    <p>Slide 66 SLIK</p>
    <p>Eventual</p>
    <p>Strong</p>
    <p>Causal, SI, Define</p>
    <p>your own</p>
    <p>Read / write latency (approx)</p>
    <p>C o</p>
    <p>n si</p>
    <p>st en</p>
    <p>cy L</p>
    <p>ev el</p>
    <p>Better</p>
    <p>B et</p>
    <p>te r</p>
    <p>Tao CouchDB</p>
    <p>H-Store</p>
    <p>HyperDex</p>
    <p>MongoDB Spanner</p>
    <p>Espresso</p>
    <p>H-Base</p>
    <p>PNUTS</p>
  </div>
  <div class="page">
    <p>Current Web Scale Datastores</p>
    <p>Slide 67 SLIK</p>
    <p>Eventual</p>
    <p>Strong</p>
    <p>Causal, SI, Define</p>
    <p>your own</p>
    <p>Read / write latency (approx)</p>
    <p>C o</p>
    <p>n si</p>
    <p>st en</p>
    <p>cy L</p>
    <p>ev el</p>
    <p>Better</p>
    <p>B et</p>
    <p>te r</p>
    <p>Tao</p>
    <p>Cassandra</p>
    <p>CouchDB</p>
    <p>H-Store</p>
    <p>HyperDex</p>
    <p>MongoDB Spanner</p>
    <p>Espresso</p>
    <p>H-Base</p>
    <p>PNUTS</p>
  </div>
  <div class="page">
    <p>Current Web Scale Datastores</p>
    <p>Slide 68 SLIK</p>
    <p>Eventual</p>
    <p>Strong</p>
    <p>Causal, SI, Define</p>
    <p>your own</p>
    <p>Read / write latency (approx)</p>
    <p>C o</p>
    <p>n si</p>
    <p>st en</p>
    <p>cy L</p>
    <p>ev el</p>
    <p>Better</p>
    <p>B et</p>
    <p>te r SLIK</p>
    <p>Tao</p>
    <p>Cassandra</p>
    <p>CouchDB</p>
    <p>H-Store</p>
    <p>HyperDex</p>
    <p>MongoDB Spanner</p>
    <p>Espresso</p>
    <p>H-Base</p>
    <p>PNUTS</p>
  </div>
  <div class="page">
    <p>SLIK Slide 69</p>
    <p>Talk Outline</p>
    <p>Motivation  Design  Performance  Related Work  Summary</p>
  </div>
  <div class="page">
    <p>Can a key value store support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale?</p>
    <p>SLIK Slide 70</p>
    <p>Conjecture</p>
  </div>
  <div class="page">
    <p>A key value store can support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale.</p>
    <p>SLIK Slide 71</p>
    <p>Summary</p>
    <p>Lookups and range queries on secondary keys</p>
  </div>
  <div class="page">
    <p>A key value store can support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale.</p>
    <p>SLIK Slide 72</p>
    <p>Summary</p>
    <p>Lookups and range queries on secondary keys</p>
    <p>By using ordered writes and treating indexes as hints</p>
  </div>
  <div class="page">
    <p>A key value store can support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale.</p>
    <p>SLIK Slide 73</p>
    <p>Summary</p>
    <p>Lookups and range queries on secondary keys</p>
    <p>By using ordered writes and treating indexes as hints</p>
    <p>By using independent partitioning we get: linear throughput increase and minimal impact on latency as the scale increases</p>
  </div>
  <div class="page">
    <p>A key value store can support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale.</p>
    <p>SLIK Slide 74</p>
    <p>Summary</p>
    <p>Lookups and range queries on secondary keys</p>
    <p>By using approaches that have minimal overheads we get: 11-13 s lookups and 30-37 s (over)writes</p>
    <p>By using ordered writes and treating indexes as hints</p>
    <p>By using independent partitioning we get: linear throughput increase and minimal impact on latency as the scale increases</p>
  </div>
  <div class="page">
    <p>A key value store can support</p>
    <p>strongly consistent secondary indexes</p>
    <p>while operating at low latency and large scale.</p>
    <p>SLIK Slide 75</p>
    <p>Summary</p>
    <p>Lookups and range queries on secondary keys</p>
    <p>By using approaches that have minimal overheads we get: 11-13 s lookups and 30-37 s (over)writes</p>
    <p>By using ordered writes and treating indexes as hints</p>
    <p>By using independent partitioning we get: linear throughput increase and minimal impact on latency as the scale increases</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Code available free and open source: github.com/PlatformLab/RAMCloud</p>
    <p>My papers and other information at: stanford.edu/~ankitak I can be reached at: ankitak@cs.stanford.edu</p>
  </div>
</Presentation>
