<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Programmable Calendar Queues for High-speed Packet Scheduling</p>
    <p>Naveen Kr. Sharma1, Chenxingyu Zhao1, Ming Liu1, Pravein G Kannan2,</p>
    <p>Changhoon Kim3, Arvind Krishnamurthy1 and Anirudh Sivaraman4</p>
  </div>
  <div class="page">
    <p>Packet Scheduling</p>
    <p>Many scheduling algorithms require ordering packet at switches</p>
    <p>Enables rich application guarantees such as WFQ, EDF or SRPT</p>
    <p>Generally implemented using a priority queue with static priorities</p>
    <p>Packets priority (rank) is computed by the ingress pipeline</p>
    <p>The priority does not change until the packet is transmitted</p>
    <p>However, static priorities are insufficient for several algorithms</p>
  </div>
  <div class="page">
    <p>Static Priority Limitations</p>
    <p>Least Slack Time First</p>
    <p>Each packet has slack denoting time until delivery</p>
    <p>Enqueue packet with rank = current_time + slack</p>
    <p>Ranks increase over time, eventually exhausting priorities</p>
    <p>Other algorithms, WFQ, EDF, LBF have this property as well</p>
    <p>N</p>
    <p>Priority Levels</p>
    <p>Need a mechanism that supports dynamic priorities</p>
    <p>Implementable at high-speeds (preferably a bolt-on)</p>
  </div>
  <div class="page">
    <p>Calendar Queues (CQs)</p>
    <p>Proposed by Brown88 for processing events in discrete event simulator</p>
    <p>Bucketed priority queue with O(1) insert and deletes</p>
    <p>Analogous to a desk calendar, consisting of multiple days</p>
    <p>Events are scheduled by specifying a future day</p>
    <p>Dequeued from the current day in sorted order</p>
    <p>Once events are exhausted for a day, move onto next day  priority escalation</p>
    <p>Make the previous day available to reuse at lowest priority  priority reuse</p>
  </div>
  <div class="page">
    <p>Our Contribution: Programmable Calendar Queues</p>
    <p>Combine calendar queues abstraction with programmable pipelines</p>
    <p>to realize scheduling algorithms at line-rate on todays hardware</p>
    <p>Calendar Queues provide dynamic priorities</p>
    <p>Programmable pipelines maintain scheduling algorithm state</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background</p>
    <p>Programmable Calendar Queue (PCQs)</p>
    <p>Realizing scheduling algorithms on PCQs</p>
    <p>Implementing PCQs in hardware</p>
    <p>Case Study : Coflow Scheduling</p>
    <p>Case Study : Weighted Fair Queuing</p>
  </div>
  <div class="page">
    <p>Reconfigurable Switches</p>
    <p>Traffic Manager (TM)Ingress Pipeline Egress Pipeline</p>
    <p>Multiple FIFO queues</p>
    <p>Packets processed by ingress pipeline before being buffered in the TM</p>
    <p>Multiple queues attached to an egress port, configured using the switch CPU</p>
    <p>Queues scheduled using priority or round robin, with support for pausing</p>
  </div>
  <div class="page">
    <p>Calendar Queue with programmable and stateful rank computation</p>
    <p>Customizable and configurable day duration and rotation policy</p>
    <p>Each day is mapped to a FIFO queue</p>
    <p>Packet ranks are bucketed into days</p>
    <p>Earliest day has highest deque priority</p>
    <p>Move to next day periodically</p>
    <p>Reuse the queue for future day</p>
    <p>Programmable Calendar Queues (PCQs)</p>
    <p>Day 1</p>
    <p>Day 2</p>
    <p>Day 3</p>
    <p>...</p>
    <p>Day N</p>
    <p>Day N+1</p>
    <p>[0, 10)</p>
    <p>[10, 20)</p>
    <p>[20, 30)</p>
    <p>Deque Order</p>
    <p>FIFO queues</p>
  </div>
  <div class="page">
    <p>Realizing Algorithms using PCQs</p>
    <p>Calculate which day to enqueue arriving packets  Rank Compute</p>
    <p>How far into the future to schedule the packet</p>
    <p>Decide when to move onto next day  Queue Rotation</p>
    <p>When the current queue is empty  Logical Calendar Queue</p>
    <p>Periodically based on wall clock time  Physical Calendar Queue</p>
    <p>Update algorithm state and enqueing behavior  State Update</p>
    <p>Ensures algorithm invariants are maintained on rotation</p>
  </div>
  <div class="page">
    <p>Example using PCQs: Fair Queueing</p>
    <p>Emulate bit-by-bit round robin fair queueing</p>
    <p>Each round corresponds to a day in the CQ</p>
    <p>Rank Computation  Rank = bytes sent by flow / round size</p>
    <p>Queue Rotation  Whenever the current queue is empty</p>
    <p>State Update  Increment round number by 1</p>
    <p>Flow 1</p>
    <p>Flow 2</p>
    <p>Flow K</p>
    <p>Ideal per-flow queues</p>
    <p>A</p>
    <p>B</p>
    <p>D</p>
    <p>C</p>
    <p>AD</p>
    <p>BC</p>
    <p>Day 1</p>
    <p>Day 2</p>
    <p>Day N</p>
    <p>Calendar Queues</p>
    <p>... ...</p>
    <p>}</p>
    <p>Round Size</p>
  </div>
  <div class="page">
    <p>Bucket packet deadlines into queues based on day duration</p>
    <p>Keep track of drift to maintain correct dequeue order</p>
    <p>Rank Computation  Rank = deadline + drift / bucket size</p>
    <p>Rotation  Current queue is empty</p>
    <p>State Update  Adjust drift based on time spent</p>
    <p>Example using PCQs: Earliest Deadline First</p>
    <p>Day 1</p>
    <p>Day 2</p>
    <p>Day 3</p>
    <p>...</p>
    <p>Day N</p>
    <p>[0us, 10us)</p>
    <p>[10us, 20us)</p>
    <p>[20us, 30us)</p>
    <p>Calendar Queues</p>
    <p>[-5us, 5us)</p>
    <p>[15us, 25us)</p>
  </div>
  <div class="page">
    <p>Implementing PCQs in hardware</p>
    <p>Mutable switch state and recirculation of special packets</p>
    <p>Ability to change queue priority and status</p>
    <p>Traffic Manager Egress PipelineIngress Pipeline</p>
    <p>headQ = 1</p>
    <p>tailQ = N</p>
    <p>headQ = 1/ 2/ 2</p>
    <p>/ 1</p>
    <p>Marker Packet</p>
    <p>Day 1</p>
    <p>Day 2</p>
    <p>Day 3</p>
    <p>Day N</p>
    <p>Hi</p>
    <p>Lo</p>
    <p>Day N+1</p>
    <p>P</p>
    <p>P</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Hardware Feasibility</p>
    <p>Most efficient implementation requires data plane support for</p>
    <p>modifying queue priority and status</p>
    <p>Expected in next generation of programmable switches</p>
    <p>Limited version already available for PFC mechanism</p>
    <p>Less responsive version can be realized using control plane</p>
    <p>Our prototype uses switch CPU to update queue priorities</p>
  </div>
  <div class="page">
    <p>More details in the paper</p>
    <p>Approximations in PCQs</p>
    <p>Hierarchical Calendar Queues</p>
    <p>Expressiveness and Limitations of PCQs</p>
    <p>Hardware Prototype Results</p>
  </div>
  <div class="page">
    <p>Case Study: Coflow Scheduling</p>
    <p>Many applications optimize the performance of collection of flows</p>
    <p>Ordering coflows smallest to largest gives close to optimal results</p>
    <p>We implement such a scheme using LSTF scheduling on PCQs</p>
    <p>Slack is set to the expected finish time of the largest sub-flow</p>
    <p>At any hop, packet with the shortest slack is sent out first</p>
  </div>
  <div class="page">
    <p>Coflow Testbed Setup</p>
    <p>3-level fat-tree testbed with coflow and background traffic</p>
    <p>Each switch port implements a PCQ with 32 FIFO queues</p>
    <p>Compared with DCTCP over droptail and fair-queueing</p>
    <p>Measure and report the Coflow Completion Time (CCT)</p>
  </div>
  <div class="page">
    <p>Coflow Scheduling Evaluation</p>
    <p>Network Load (%)</p>
    <p>Average CCT</p>
    <p>Network Load (%)</p>
    <p>Droptail</p>
    <p>Fair Queue</p>
    <p>Ideal SRPT</p>
    <p>SRPT w CQs</p>
    <p>CCT in s</p>
  </div>
  <div class="page">
    <p>Case Study: Burst-friendly Fair Queueing</p>
    <p>Emulate a bit-by-bit round robin scheme at coarse granularity</p>
    <p>Desirable to permit a burst of packets for better tail latency</p>
    <p>Sacrifices fairness at short timescales but maintains it at long timescale</p>
    <p>Ideal Fair Queueing</p>
    <p>Bursty Fair Queueing</p>
  </div>
  <div class="page">
    <p>Burst-friendly Fair Queueing Evaluation</p>
    <p>Network Load (%)</p>
    <p>Ideal FQ</p>
    <p>FQ w/ CQs</p>
    <p>Bursty FQ 8</p>
    <p>Bursty FQ 16</p>
    <p>Network Load (%)</p>
    <p>Average Coflow Completion Time</p>
    <p>FCT in s</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Static priority mechanisms insufficient for class of scheduling algorithms</p>
    <p>Calendar Queue based approach is a better fit</p>
    <p>Can be implemented on todays multi-pipeline, high speed switches</p>
    <p>Inherently scalable to higher bandwidth and number of flows</p>
    <p>With a programmable pipeline, can implement a variety of algorithms</p>
  </div>
</Presentation>
