<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Network Design for Information Networks</p>
    <p>Chaitanya Swamy Caltech and U. Waterloo</p>
    <p>Ara Hayrapetyan va Tardos</p>
    <p>Cornell University</p>
  </div>
  <div class="page">
    <p>Typical Network Design</p>
    <p>Users/clients.  Each user has a demand  number of</p>
    <p>packets/bits.</p>
    <p>Cost of sending information on an edge for a set of users depends on a single parameter  the total demand of that set of users.</p>
    <p>e.g. Steiner tree: coste(S) = ce for S   Buy-at-bulk ND: coste(S) = ce.f(|S|), f concave</p>
    <p>Implicitly assumes that to route a set of users, have to send the total demand of that set.</p>
  </div>
  <div class="page">
    <p>Information Aggregation Model</p>
    <p>Take a higher level view  want to capture information aggregation.</p>
    <p>Each user has some information.  Interested in the total information flow of a set of</p>
    <p>users allowing for information aggregation.  cost of sending information of a set of users could be</p>
    <p>much less than the sum of the individual information needs</p>
    <p>incur cost savings  some information may aggregate better than others  aggregation/cost function depends on the set of users</p>
    <p>Can capture complex relations between users by using a set-based cost function.</p>
  </div>
  <div class="page">
    <p>D: set of terminals/users/clients.</p>
    <p>ce: length of edge e.</p>
    <p>Cost function h : 2D 0 , h() = 0</p>
    <p>Want to model economies of scale  will assume</p>
    <p>h(.) is increasing, submodular, i.e., if A B, iB, then</p>
    <p>h(A+i)  h(A)  h(B+i)  h(B)</p>
    <p>h(.) is given implicitly, e.g., via an oracle.</p>
    <p>Algorithm should make only polynomial number of queries.</p>
    <p>Model (contd.)</p>
    <p>Graph G = (V,E)</p>
  </div>
  <div class="page">
    <p>Applicability</p>
    <p>Sensor Networks  Distributed sensor nodes send information to</p>
    <p>central node(s)  Information can often be well aggregated</p>
    <p>along paths, e.g., temperature readings  May care only about aggregate information,</p>
    <p>e.g., average temperature, humidity</p>
    <p>Content-based publish-subscribe systems  Users publish or subscribe to information  Information flowing through network can be</p>
    <p>aggregated</p>
  </div>
  <div class="page">
    <p>Two Network Design Problems</p>
    <p>Single-sink problem</p>
    <p>For each terminal, choose a path to sink to send information.</p>
    <p>Goal: Minimize total cost of sending information</p>
    <p>= e ce.h(Ae)</p>
    <p>Ae : set of terminals using edge e</p>
    <p>: Terminal: Sink: Node</p>
  </div>
  <div class="page">
    <p>Two Network Design Problems</p>
    <p>Single-sink problem</p>
    <p>For each terminal, choose a path to sink to send information.</p>
    <p>Goal: Minimize total cost of sending information</p>
    <p>= e ce.h(Ae)</p>
    <p>Ae : set of terminals using edge e</p>
    <p>: Terminal: Sink: Node</p>
  </div>
  <div class="page">
    <p>Facility location setting Multiple facilities (sinks)  can route to facility i paying a fixed cost of fi</p>
    <p>For each terminal, choose a path to a facility to send information.</p>
    <p>Goal: Minimize facility opening + information sending costs</p>
    <p>= iF fi + e ce.h(Ae)</p>
    <p>Ae : set of terminals using edge e F : set of opened facilities</p>
    <p>: Terminal</p>
    <p>: Facilit y</p>
    <p>: Node</p>
  </div>
  <div class="page">
    <p>Buy-at-bulk network design. Facility location with buy-at-bulk</p>
    <p>connection costs  includes uncapacitated facility location.</p>
    <p>Dependent Maybecast  generalization of Karger-Minkoff (KM00) maybecast problem.</p>
    <p>2-stage stochastic Steiner tree problem. Well-approximates the multi-stage</p>
    <p>Stochastic Steiner tree problem.</p>
    <p>Interval routing problem (Williamson et al.): each user has to send an interval to the root on a single path; cost of e = total length of intervals sent on it</p>
    <p>General problem includes many interesting problem classes.</p>
  </div>
  <div class="page">
    <p>Our Results  Give an O(log |V|)-approximation for the general problem</p>
    <p>using tree embeddings.</p>
    <p>Obtain a 4-approximation for Group Facility Location:  terminals divided into groups; cost of e = ce.(# of groups using e)  have to open facilities and connect each group to open facilities via a Steiner forest.</p>
    <p>Algorithm combines [AKR, GW]-algorithm for Steiner forest and JV-algorithm for facility location via a novel cleanup phase.</p>
    <p>Give an O(k)-approximation for Dependent Maybecast (probabilistic Steiner tree) with k-level distribution tree.</p>
    <p>Get a 2k-approximation for k-stage Steiner tree problem. Also obtained independently by Gupta-Pal-Ravi-Sinha 05.</p>
  </div>
  <div class="page">
    <p>Dependent Maybecast Probability distribution on subsets of terminals  determines which terminals to connect to root r.</p>
    <p>Want a simple communication scheme.  Select a single tr path for each terminal t;  t will use this path to talk to the root when activated.</p>
    <p>Goal: Minimize expected cost of edges used</p>
    <p>= ES[tS c(path(t))] = e ce.p(Ae)</p>
    <p>Ae : set of terminals using edge e p(S) : probability that at least one terminal in S is active</p>
    <p>p(.) is submodular, so special case of single-sink problem. KM00 introduced the special case where they assume that each terminal is activated independently.</p>
  </div>
  <div class="page">
    <p>Tree-based distributions</p>
    <p>: Distribution tree with root , leaves are terminals.</p>
    <p>Distinct from the original graph. Each edge e labeled with pe [0, 1] and is turned on independently with probabililty pe.</p>
    <p>Activated terminals = {tD: all edges from t are turned on}</p>
    <p>level(0)</p>
  </div>
  <div class="page">
    <p>Tree-based distributions</p>
    <p>: Distribution tree with root , leaves are terminals.</p>
    <p>Distinct from the original graph. Each edge e labeled with pe [0, 1] and is turned on independently with probabililty pe.</p>
    <p>Activated terminals = {tD: all edges from t are turned on}</p>
    <p>Karger-Minkoff model  1-level tree With general trees, can model correlation between terminals.</p>
    <p>level(0)</p>
  </div>
  <div class="page">
    <p>The Algorithm</p>
    <p>level(0)</p>
    <p>Assume G is complete.</p>
    <p>root = node containing r</p>
    <p>distr. tree = subtree of  terminals = leaves of</p>
    <p>subtree )</p>
  </div>
  <div class="page">
    <p>Algorithm (contd.)</p>
    <p>level(0)</p>
    <p>Stage 0: Sample from . Build MST T on {r}  {sampled terminals}.</p>
    <p>Stage i+1: Consider each node  level(i+1)  : subtree rooted at . 0= , 1, , i+1=  : nodes on path from  to . Contract trees T, T1, , Ti.</p>
    <p>Sample from .</p>
    <p>Build MST in contracted graph on {r}  {sampled terminals}.</p>
    <p>level(i+1)</p>
    <p>Continue up to Stage k. Gives a tree which defines unique paths between terminals.</p>
  </div>
  <div class="page">
    <p>Analysis Stage 0: Cost incurred = stage(0) = MST(T).</p>
    <p>Let OS = cost incurred by OPT on terminal set S.</p>
    <p>OPT = ES[OS] and MST(S)  2.OS, so E[stage(0)]</p>
    <p>Stage i: Let level(i), q = product of pes for edges</p>
    <p>on  path.</p>
    <p>Tree T is used only by terminals in subtree   Pr[edge e of T is used]  q</p>
    <p>Define stage i cost = stage(i) = level(i) q.c(T)</p>
    <p>Total cost  i=0k stage(i)</p>
    <p>Will show that E[stage(i+1)]  E[stage(i)], 0  i &lt; k</p>
    <p>get a solution of expected cost  2(k+1).OPT.</p>
    <p>q = pe1 x   x pei</p>
  </div>
  <div class="page">
    <p>Cost sharing  (G, A, t) = ts share in building a tree on A in graph G Defining (G,A,t): build an MST on A {r}.</p>
    <p>(G, A, t) = cost of edge connecting t to its parent, OR 0 if tA</p>
    <p>Will cost-share trees built by the algorithm and compare expected total cost-shares across different stages. Cost-sharing idea first used in Gupta-Kumar-PlRoughgarden.</p>
    <p>: terminal in Ar</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>E[stage(i+1)]  E[stage(i)] Show this for i=0. Consider node level(1).</p>
    <p>Condition on set H' = nodes from ' picked in stage 0. Let S = nodes attached to  in stage 0. Same random process determines S in stage 0 and stage 1.</p>
    <p>'</p>
    <p>H'</p>
    <p>Cost share (CS) of S in stage 0</p>
    <p>= 0 if e is not on, tS (G, H'  S, t)</p>
    <p>otherwise.</p>
    <p>CS of S in stage 1 = tS (G/H, S, t)</p>
    <p>where H  H' = terminals activated in stage 0</p>
    <p>e</p>
    <p>S</p>
    <p>tS (G/H, S, t) = cost(MST(S) in G/H)  tS (G, H'  S, t)</p>
  </div>
  <div class="page">
    <p>Stochastic Steiner Tree Set of terminals to connect to the root is given by distribution.</p>
    <p>Can buy edges in stage I knowing only the distribution:</p>
    <p>pay cost of ce, OR Buy edges in stage II knowing the terminal set to connect:</p>
    <p>pay cost of Ace in scenario A.</p>
    <p>Choose which edges to buy in stage I so as to minimize expected total cost.</p>
  </div>
  <div class="page">
    <p>Open Questions  Better approximation for the general problem.  Approx. algorithms for dependent maybecast</p>
    <p>with  arbitrary distributions with only (conditional) black</p>
    <p>box sampling access  graph-based distributions.</p>
    <p>Approximation ratio independent of k for k-level dependent maybecast and k-stage Steiner tree.</p>
    <p>Cost oblivious network design: a single solution that is simultaneously near-optimal for every fn h(.) in a given class. Goel-Estrin04 designed a solution for all concave functions.</p>
  </div>
  <div class="page">
    <p>Thank You.</p>
  </div>
</Presentation>
