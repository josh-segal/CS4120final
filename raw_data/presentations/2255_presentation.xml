<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Embedded System Lab.HotStorage'20</p>
    <p>A New LSM-style Garbage Collection Scheme for ZNS SSDs</p>
    <p>Presentation by Choi, Gunhee</p>
    <p>choi_gunhee@dankook.ac.kr</p>
    <p>Gunhee Choi, Kwanghee Lee, Myunghoon Oh and Jongmoo Choi from Dankook University Jhuyeong Jhin and Yongseok Oh from SK hynix 12th USENIX Workshop on Hot Topic in Storage and File System (HotStorage 20), 2020</p>
  </div>
  <div class="page">
    <p>Content</p>
    <p>HotStorage'20 2</p>
    <p>- Appendix</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Traditional SSD</p>
    <p>Open-Channel SSD Key-Value SSD</p>
    <p>Zoned Namespace SSD Optane SSD</p>
    <p>What are Next Generation SSDs?</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Traditional SSD</p>
    <p>Benefits  Better performance and WAF by distributing different workloads into different zones</p>
    <p>Better isolation (IO Determinism)  Reduce DRAM usage and Over-provisioning area in SSDs</p>
    <p>LBA space</p>
    <p>NAND</p>
    <p>LBA space</p>
    <p>NAND</p>
    <p>Zone 1 Zone 2 Zone 3</p>
    <p>Zoned Namespace SSD</p>
    <p>What is ZNS SSD?</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Host Needs to handle zone controlsSequential write constraint</p>
    <p>Host</p>
    <p>ZNS SSD Controller</p>
    <p>Zone</p>
    <p>Write Pointer</p>
    <p>Writing progress direction</p>
    <p>Unable to write until zone reset</p>
    <p>Zone 1 Zone 2 Zone N</p>
    <p>Block device FTL absence</p>
    <p>App 1 App 1</p>
    <p>What are the issues of ZNS SSD?</p>
    <p>Sequential write constraint: writes need to be conducted in a sequential manner, like the SMR drives.</p>
    <p>Host needs to control zones directly such as zone open, close, reset and zone garbage collection.</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>SK Hynix Prototype ZNS SSD</p>
    <p>Ref : https://news.skhynix.co.kr/1915</p>
    <p>How much is the Zone Garbage Collection (hereafter ZGC) overhead?  Using real ZNS SSD prototype  Zone size: 1GB (note that the typical segment size in LFS is 2MB)</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Basic Zone Garbage Collection (Basic_ZGC)</p>
    <p>Memory Zone Bitmap</p>
    <p>Zone 0</p>
    <p>Zone 100</p>
    <p>Step 1. Select a candidate zone (Greedy or CB)</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Basic Zone Garbage Collection</p>
    <p>Memory Zone Bitmap</p>
    <p>Zone 0</p>
    <p>Zone 100</p>
    <p>Step 1. Select a candidate zone (Greedy or CB)</p>
    <p>Step 2. Find out valid blocks using a zone bitmap</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Basic Zone Garbage Collection</p>
    <p>Memory Zone Bitmap</p>
    <p>Zone 0</p>
    <p>Zone 100</p>
    <p>Step 3. Read valid data in 4KB (or larger) I/O size</p>
    <p>Step 1. Select a candidate zone (Greedy or CB)</p>
    <p>Step 2. Find out valid blocks using a zone bitmap</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Basic Zone Garbage Collection</p>
    <p>Memory Zone Bitmap</p>
    <p>Zone 0</p>
    <p>Zone 100</p>
    <p>Step 3. Read valid data in 4KB (or larger) I/O size</p>
    <p>Step 1. Select a candidate zone (Greedy or CB)</p>
    <p>Step 2. Find out valid blocks using a zone bitmap</p>
    <p>Step 4. Write data in 4KB (or larger) I/O size</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Basic Zone Garbage Collection</p>
    <p>Memory Zone Bitmap</p>
    <p>Zone 0</p>
    <p>Zone 100</p>
    <p>Step 3. Read valid data in 4KB (or larger) I/O size</p>
    <p>Step 1. Select a candidate zone (Greedy or CB)</p>
    <p>Step 2. Find out valid blocks using a zone bitmap</p>
    <p>Step 4. Write data in 4KB (or larger) I/O size</p>
    <p>Step 5. Reset the selected zone</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone : 1GB  Block : 4KB</p>
    <p>Observation 1: Zone garbage collection overhead</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone : 1GB  Block : 4KB</p>
    <p>Motivation 1: reducing utilization of a candidate zone is indispensable</p>
    <p>Observation 1: Zone garbage collection overhead</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Observation 2: I/O size for Read/Write</p>
    <p>Another feature of ZNS SSD  A zone is, in general, mapped into multiple channels/ways.</p>
    <p>Then, how about read/write data in a larger I/O size (e.g. 128KB)?</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Observation 2: I/O size for Read/Write</p>
    <p>Motivation 2: accessing in a larger I/O size is beneficial in ZNS SSDs</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>So, Our ideas are 1) Make the utilization of a candidate zone low 2) Access data in a larger I/O size</p>
    <p>How to access data in a larger I/O size?  The coexistence of valid and invalid data makes it difficult  Read not only valid but also invalid data in a larger I/O size</p>
    <p>How to make the utilization of a candidate zone low?  Traditional hot/cold separation is not applicable in ZNS SSDs since zone is quite big  Employ the segment concept for finer-grained hot/cold separation</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Two management units  Zone: for garbage collection vs. Segment: for hot/cold separation  A zone is divided into multiple segments (1GB vs. 2MB in this study)</p>
    <p>Segment state and transition rule (refer to our paper for details)  New data  C0  During ZGC, survived data from C0</p>
    <p>Data in a high utilized segment ( &gt; thresholdcold): cold  C1C  Others: hot (or unknown)  C1H  Reasoning: spatial locality, also observed in previous studies such as F2FS (FAST15),</p>
    <p>Multi-stream (FAST19), Key-range locality (FAST20)  During ZGC, survived data from C1C or C1H (second survived data) C2</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone 0</p>
    <p>Zone 1</p>
    <p>Zone 2</p>
    <p>Zone N-1</p>
    <p>C0_zone</p>
    <p>LSM(Log Structured Merge) Zone GC</p>
    <p>Zone 3</p>
    <p>Zone N</p>
    <p>Zone Bitmap</p>
    <p>Step 1. Select a candidate zone (or zones, Greedy or CB)</p>
    <p>C1H_zone</p>
    <p>C1C_zone</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone 0</p>
    <p>Zone 1</p>
    <p>Zone 2</p>
    <p>Zone N-1</p>
    <p>C0_zone</p>
    <p>LSM(Log Structured Merge) Zone GC</p>
    <p>Zone 3</p>
    <p>Zone N</p>
    <p>Zone Bitmap</p>
    <p>Step 1. Select a candidate zone (or zones, Greedy or CB)</p>
    <p>Step 2. Read all data in 128KB I/O size</p>
    <p>C1H_zone</p>
    <p>C1C_zone</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone 0</p>
    <p>Zone 1</p>
    <p>Zone 2</p>
    <p>Zone N-1</p>
    <p>C0_zone</p>
    <p>LSM(Log Structured Merge) Zone GC</p>
    <p>Zone 3</p>
    <p>Zone N</p>
    <p>Zone Bitmap</p>
    <p>Step 1. Select a candidate zone (or zones, Greedy or CB)</p>
    <p>Step 2. Read all data in 128KB I/O size</p>
    <p>Step 3-1. Check valid data</p>
    <p>Step 3-2. Identify Hot/Cold segment</p>
    <p>C1H_zone</p>
    <p>C1C_zone</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone 0</p>
    <p>Zone 1</p>
    <p>Zone 2</p>
    <p>Zone N-1</p>
    <p>C0_zone</p>
    <p>LSM(Log Structured Merge) Zone GC</p>
    <p>Zone 3</p>
    <p>Zone N</p>
    <p>Zone Bitmap</p>
    <p>C1H_zone</p>
    <p>C1C_zone</p>
    <p>Step 2. Read all data in 128KB I/O size</p>
    <p>Step 3-1. Check valid data</p>
    <p>Step 4. Merge valid data only according to hot/cold</p>
    <p>Hot Segment</p>
    <p>Cold Segment</p>
    <p>Step 3-2. Identify Hot/Cold segment</p>
    <p>Step 1. Select a candidate zone (or zones, Greedy or CB)</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Zone 0</p>
    <p>Zone 1</p>
    <p>Zone 2</p>
    <p>Zone N-1</p>
    <p>C0_zone</p>
    <p>LSM(Log Structured Merge) Zone GC</p>
    <p>Zone 3</p>
    <p>Zone N</p>
    <p>Zone Bitmap</p>
    <p>Step 1. Select a candidate zone (or zones, Greedy or CB)</p>
    <p>C1H_zone</p>
    <p>C1C_zone</p>
    <p>Step 2. Read all data in 128KB I/O size</p>
    <p>Step 4. Merge valid data only according to hot/cold</p>
    <p>Hot Segment</p>
    <p>Cold Segment</p>
    <p>Step 5. Write data in 128KB I/O size</p>
    <p>Step 3-1. Check valid data</p>
    <p>Step 3-2. Identify Hot/Cold segment</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Experimental environment  Intel Core i7 (8 core)  16GB DRAM  1TB ZNS SSD  Size of Zone : 1GB</p>
    <p>Average of 1.9 times</p>
    <p>Garbage collection overhead: uniform update pattern</p>
    <p>Max of 2.3 times</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Garbage collection overhead: skewed update pattern</p>
    <p>Experimental environment  Intel Core i7 (8 core)  16GB DRAM  1TB ZNS SSD  Size of Zone : 1GB</p>
    <p>Average of 1.4 times Max of 1.6 times</p>
    <p>Parameters  Workload: 70/30 hot/cold ratio  Threaholdcold : 0.8  average utilization: x-axis</p>
    <p>ba ge</p>
    <p>c ol</p>
    <p>le ct</p>
    <p>io n</p>
    <p>tim e</p>
    <p>(s ec</p>
    <p>)</p>
    <p>Utilization</p>
    <p>LSM_ZGC Basic_ZGC</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Hot/Cold Separation</p>
    <p>Without hot/cold separation</p>
    <p>With hot/cold separation</p>
    <p>Parameters  Workload: 70/30 hot/cold ratio  Threaholdcold : 0.8  Average utilization: 0.6</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Garbage Collection Count : 100</p>
    <p>Co un</p>
    <p>t</p>
    <p>Utilization</p>
    <p>Garbage Collection Count : 500</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Garbage Collection Count : 900</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Garbage Collection Count : 100</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Garbage Collection Count : 500</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Garbage Collection Count : 900</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Our contributions  Observation: a zone garbage collection really matters  Proposal: a new LSM-style zone garbage collection scheme  Evaluation: real implementation based results</p>
    <p>Future work</p>
    <p>We are currently extending F2FS on our ZNS SSD prototype  Also, evaluating LSM ZGC under diverse workloads with different hot</p>
    <p>/cold ratio, data size, initial placement and classification policies</p>
  </div>
  <div class="page">
    <p>Embedded System Lab.HotStorage'20</p>
    <p>Thank You!</p>
    <p>A New LSM-style Garbage Collection Scheme for ZNS SSDs</p>
    <p>Presentation by Choi, Gunhee</p>
    <p>choi_gunhee@dankook.ac.kr</p>
    <p>Gunhee Choi, Kwanghee Lee, Myunghoon Oh, Jhuyeong Jhin, Yongseok Oh, Jongmoo Choi 12th USENIX Workshop on Hot Topic in Storage and File System (HotStorage 20), 2020</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Performance comparison using multi-thread &amp; Scalability</p>
    <p>Non-linear Scalability</p>
    <p>Worker only: 40 With LSM_ZGC : 45 With Basic_ZGC : 53</p>
  </div>
  <div class="page">
    <p>HotStorage'20</p>
    <p>Sensitive Analysis: various parameters</p>
    <p>Effect of thresholdcold (initial utilization: 0.6)</p>
    <p>Effect of initial utilization of a zone (thresholdcold : 0.8)</p>
    <p>Co un</p>
    <p>t</p>
    <p>Utilization</p>
    <p>Threshold : 0.6</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Threshold : 0.8</p>
    <p>nt Utilization</p>
    <p>Initial Utilization : 0.8</p>
    <p>Co un</p>
    <p>t</p>
    <p>Utilization</p>
    <p>Initial Utilization : 0.9</p>
    <p>Co un</p>
    <p>t</p>
    <p>Utilization</p>
    <p>Initial Utilization : 0.5</p>
    <p>Co un</p>
    <p>t</p>
    <p>Utilization</p>
    <p>Initial Utilization : 0.6</p>
    <p>Co un t</p>
    <p>Utilization</p>
    <p>Threshold : 0.9</p>
  </div>
</Presentation>
