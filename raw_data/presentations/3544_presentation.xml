<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AntiFuzz: Impeding Fuzzing Audits of Binary Executables</p>
    <p>Usenix Security 2019, Santa Clara August 16, 2019</p>
    <p>Emre Gler, Cornelius Aschermann, Ali Abbasi, and Thorsten Holz</p>
    <p>Chair for Systems Security Ruhr-Universitt Bochum</p>
  </div>
  <div class="page">
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Trusted Party</p>
    <p>Untrusted Party</p>
    <p>But what about automated bug finding tools?</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Trusted Party  Can find bugs</p>
    <p>Untrusted Party  Cant find bugs</p>
    <p>But what about automated bug finding tools?</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Trusted Party  Can examine code = Can find bugs</p>
    <p>Untrusted Party  Cant examine code = Cant find bugs ?</p>
    <p>But what about automated bug finding tools?</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Trusted Party  Can examine code = Can find bugs</p>
    <p>Untrusted Party  Cant examine code = Cant find bugs ?</p>
    <p>But what about automated bug finding tools?</p>
  </div>
  <div class="page">
    <p>Impeding Fuzzing Audits</p>
  </div>
  <div class="page">
    <p>Impeding Fuzzing Audits</p>
    <p>Analyze diverse set of fuzzers</p>
    <p>Find assumptions fuzzers need to make  Invalidate those assumptions</p>
  </div>
  <div class="page">
    <p>Impeding Fuzzing Audits</p>
    <p>Analyze diverse set of fuzzers  Find assumptions fuzzers need to make</p>
    <p>Invalidate those assumptions</p>
  </div>
  <div class="page">
    <p>Impeding Fuzzing Audits</p>
    <p>Analyze diverse set of fuzzers  Find assumptions fuzzers need to make  Invalidate those assumptions</p>
  </div>
  <div class="page">
    <p>Finding Assumptions</p>
  </div>
  <div class="page">
    <p>Demo Application</p>
    <p>main</p>
    <p>in == &quot;ELF&quot;</p>
    <p>&quot;not ELF&quot; crash</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
  </div>
  <div class="page">
    <p>(A) Coverage Yields Relevant Feedback</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>Blind Fuzzer</p>
    <p>Mutate input  See if it crashes with given input</p>
    <p>Coverage-guided Fuzzer</p>
    <p>Mutate input  See if it crashes with given input  ... or if new coverage is found  If so, add input to queue  New Coverage = New Behavior</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>Blind Fuzzer  Mutate input</p>
    <p>See if it crashes with given input</p>
    <p>Coverage-guided Fuzzer  Mutate input</p>
    <p>See if it crashes with given input  ... or if new coverage is found  If so, add input to queue  New Coverage = New Behavior</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>Blind Fuzzer  Mutate input  See if it crashes with given input</p>
    <p>Coverage-guided Fuzzer  Mutate input  See if it crashes with given input</p>
    <p>... or if new coverage is found  If so, add input to queue  New Coverage = New Behavior</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>Blind Fuzzer  Mutate input  See if it crashes with given input</p>
    <p>Coverage-guided Fuzzer  Mutate input  See if it crashes with given input  ... or if new coverage is found</p>
    <p>If so, add input to queue  New Coverage = New Behavior</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>Blind Fuzzer  Mutate input  See if it crashes with given input</p>
    <p>Coverage-guided Fuzzer  Mutate input  See if it crashes with given input  ... or if new coverage is found  If so, add input to queue</p>
    <p>New Coverage = New Behavior</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>Blind Fuzzer  Mutate input  See if it crashes with given input</p>
    <p>Coverage-guided Fuzzer  Mutate input  See if it crashes with given input  ... or if new coverage is found  If so, add input to queue  New Coverage = New Behavior</p>
  </div>
  <div class="page">
    <p>Coverage Yields Relevant Feedback</p>
    <p>main</p>
    <p>in == &quot;ELF&quot;</p>
    <p>&quot;not ELF&quot; crash 10</p>
  </div>
  <div class="page">
    <p>(B) Crashes Can Be Detected</p>
  </div>
  <div class="page">
    <p>Crashes Can Be Detected</p>
    <p>main</p>
    <p>in == &quot;ELF&quot;</p>
    <p>&quot;not ELF&quot; crash</p>
    <p>exit() 12</p>
  </div>
  <div class="page">
    <p>(C) Many Executions Per Second</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Why is AFL so good?</p>
    <p>No human knowledge about target necessary</p>
    <p>Super fast implementation (thousands of executions per second)</p>
    <p>As long as we are fast, we dont need to be smart.</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Why is AFL so good?</p>
    <p>No human knowledge about target necessary</p>
    <p>Super fast implementation (thousands of executions per second)</p>
    <p>As long as we are fast, we dont need to be smart.</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Why is AFL so good?</p>
    <p>No human knowledge about target necessary</p>
    <p>Super fast implementation (thousands of executions per second)</p>
    <p>As long as we are fast, we dont need to be smart.</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Why is AFL so good?</p>
    <p>No human knowledge about target necessary</p>
    <p>Super fast implementation (thousands of executions per second)</p>
    <p>As long as we are fast, we dont need to be smart.</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Bad approach</p>
    <p>Slow down application  But: real-world usage also slows down</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Bad approach  Slow down application</p>
    <p>But: real-world usage also slows down</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Bad approach  Slow down application  But: real-world usage also slows down</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Bad approach  Slow down application  But: real-world usage also slows down</p>
    <p>Better approach</p>
    <p>Slow down application ...  ... only when its being fuzzed?</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Bad approach  Slow down application  But: real-world usage also slows down</p>
    <p>Better approach  Slow down application ...</p>
    <p>... only when its being fuzzed?</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>Bad approach  Slow down application  But: real-world usage also slows down</p>
    <p>Better approach  Slow down application ...  ... only when its being fuzzed?</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>What is the implication of being fuzzed?</p>
    <p>Most inputs will be malformed</p>
    <p>But in real-world scenarios, most inputs are well-formed</p>
    <p>Solution: slow down application if input is malformed</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>What is the implication of being fuzzed?</p>
    <p>Most inputs will be malformed</p>
    <p>But in real-world scenarios, most inputs are well-formed</p>
    <p>Solution: slow down application if input is malformed</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>What is the implication of being fuzzed?</p>
    <p>Most inputs will be malformed</p>
    <p>But in real-world scenarios, most inputs are well-formed</p>
    <p>Solution: slow down application if input is malformed</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>What is the implication of being fuzzed?</p>
    <p>Most inputs will be malformed</p>
    <p>But in real-world scenarios, most inputs are well-formed</p>
    <p>Solution: slow down application if input is malformed</p>
  </div>
  <div class="page">
    <p>Many Executions Per Second</p>
    <p>main</p>
    <p>in == &quot;ELF&quot;</p>
    <p>&quot;not ELF&quot; crash</p>
    <p>exit()sleep() 17</p>
  </div>
  <div class="page">
    <p>(D) Constraints Are Solvable with Symbolic Execution</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>Why use symbolic execution?</p>
    <p>Some constraints are too hard to solve via random mutations</p>
    <p>Lets get help from symbolic execution</p>
    <p>Assumption: some constraints are too hard to be solved by random mutations alone, but could be solved by symbolic execution</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>Why use symbolic execution?</p>
    <p>Some constraints are too hard to solve via random mutations</p>
    <p>Lets get help from symbolic execution</p>
    <p>Assumption: some constraints are too hard to be solved by random mutations alone, but could be solved by symbolic execution</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>Why use symbolic execution?</p>
    <p>Some constraints are too hard to solve via random mutations</p>
    <p>Lets get help from symbolic execution</p>
    <p>Assumption: some constraints are too hard to be solved by random mutations alone, but could be solved by symbolic execution</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>Why use symbolic execution?</p>
    <p>Some constraints are too hard to solve via random mutations</p>
    <p>Lets get help from symbolic execution</p>
    <p>Assumption: some constraints are too hard to be solved by random mutations alone, but could be solved by symbolic execution</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>How to break this assumption? Two techniques:</p>
    <p>Replace constants comparisons by hash comparisons  Put input through encryption and decryption before using</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>How to break this assumption? Two techniques:</p>
    <p>Replace constants comparisons by hash comparisons</p>
    <p>Put input through encryption and decryption before using</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>How to break this assumption? Two techniques:</p>
    <p>Replace constants comparisons by hash comparisons  Put input through encryption and decryption before using</p>
  </div>
  <div class="page">
    <p>Constraints Are Solvable with Symbolic Execution</p>
    <p>main</p>
    <p>in == &quot;ELF&quot;</p>
    <p>&quot;not ELF&quot; crash</p>
    <p>exit()sleep()</p>
    <p>h(in) == a27b...</p>
    <p>dec(enc(in))</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Dummy Application</p>
  </div>
  <div class="page">
    <p>Coverage Evaluation</p>
    <p>Vuzzer AFL Hongg QSYM</p>
    <p># B</p>
    <p>ra n</p>
    <p>c h</p>
    <p>e s c</p>
    <p>o v</p>
    <p>e re</p>
    <p>d Disabled</p>
    <p>Vuzzer AFL Hongg QSYM</p>
    <p>Enabledo b j d u m pPlain Protected</p>
    <p>objdump</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Systematic analysis reveals: contemporary fuzzers rely on four core assumptions</p>
    <p>Coverage Yields Relevant Feedback</p>
    <p>Crashes Can Be Detected</p>
    <p>Many Executions Per Second</p>
    <p>Constraints Are Solvable With Symbolic Execution</p>
    <p>AntiFuzz breaks these assumptions to impede fuzzing attempts</p>
    <p>https://github.com/RUB-SysSec/antifuzz</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Systematic analysis reveals: contemporary fuzzers rely on four core assumptions</p>
    <p>Coverage Yields Relevant Feedback</p>
    <p>Crashes Can Be Detected</p>
    <p>Many Executions Per Second</p>
    <p>Constraints Are Solvable With Symbolic Execution</p>
    <p>AntiFuzz breaks these assumptions to impede fuzzing attempts</p>
    <p>https://github.com/RUB-SysSec/antifuzz</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Systematic analysis reveals: contemporary fuzzers rely on four core assumptions</p>
    <p>Coverage Yields Relevant Feedback</p>
    <p>Crashes Can Be Detected</p>
    <p>Many Executions Per Second</p>
    <p>Constraints Are Solvable With Symbolic Execution</p>
    <p>AntiFuzz breaks these assumptions to impede fuzzing attempts</p>
    <p>https://github.com/RUB-SysSec/antifuzz</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Systematic analysis reveals: contemporary fuzzers rely on four core assumptions</p>
    <p>Coverage Yields Relevant Feedback</p>
    <p>Crashes Can Be Detected</p>
    <p>Many Executions Per Second</p>
    <p>Constraints Are Solvable With Symbolic Execution</p>
    <p>AntiFuzz breaks these assumptions to impede fuzzing attempts</p>
    <p>https://github.com/RUB-SysSec/antifuzz</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Q &amp; A</p>
  </div>
</Presentation>
