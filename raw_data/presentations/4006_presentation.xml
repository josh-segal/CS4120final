<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Frankenstein Stitching Malware from Benign Binaries</p>
    <p>Vishwath Mohan and Kevin W Hamlen</p>
    <p>University of Texas at Dallas</p>
    <p>Supported in part by AFOSR</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>(Drawbacks in) current approaches to obfuscation</p>
    <p>Our approach</p>
    <p>Implementation</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>The motivation</p>
    <p>Extend the malware obfuscation arsenal</p>
  </div>
  <div class="page">
    <p>The motivation</p>
    <p>The current state of detection  Largely static and feature-based  Complex analysis only for suspicious files</p>
    <p>The current state of obfuscation  Encryption</p>
    <p>Virtualization</p>
    <p>Metamorphism</p>
  </div>
  <div class="page">
    <p>The current state of detection  Largely static and feature-based  Complex analysis only for suspicious files</p>
    <p>The current state of obfuscation  Encryption, or &quot;I'm going to look suspicious&quot;</p>
    <p>Virtualization</p>
    <p>Metamorphism</p>
    <p>The motivation</p>
  </div>
  <div class="page">
    <p>The current state of detection  Largely static and feature-based  Complex analysis only for suspicious files</p>
    <p>The current state of obfuscation  Encryption, or &quot;I'm going to look suspicious&quot;</p>
    <p>Virtualization, or &quot;I'm going to carry a virtual machine around&quot;</p>
    <p>Metamorphism</p>
    <p>The motivation</p>
  </div>
  <div class="page">
    <p>The motivation</p>
    <p>The current state of detection  Largely static and feature-based  Complex analysis only for suspicious files</p>
    <p>The current state of obfuscation  Encryption, or &quot;I'm going to look suspicious&quot;</p>
    <p>Virtualization, or &quot;I'm going to carry a virtual machine around&quot;</p>
    <p>Metamorphism, or &quot;I'm going to change my code each time (but only in simple, detectable ways)&quot;</p>
  </div>
  <div class="page">
    <p>The motivation</p>
    <p>Gadgets are very interesting  Turing-complete functionality</p>
    <p>Found everywhere</p>
    <p>Classifiably benign!</p>
    <p>So why not use gadgets to compose your malware</p>
    <p>Gadget: A sequence of bytes representing a valid instruction sequence, and ending in return, that can be used to perform a semantically specific task.</p>
    <p>Eg: mov eax, ebx ret is a gadget that moves a value from one register (ebx) to another (eax)</p>
  </div>
  <div class="page">
    <p>The idea - Or Mary Shelley's recipe</p>
    <p>Consult a high-level blueprint of the human body malware</p>
    <p>Harvest organs gadgets from cadavers benign programs</p>
    <p>Stitch them together to (re)create Frankenstein the malware</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Frankenstein</p>
    <p>Executable Synthesis</p>
    <p>Code Generation</p>
    <p>Gadget ArrangementGadget Discovery</p>
    <p>Gadget Assignment</p>
    <p>Code InjectorSemantic Blueprint</p>
    <p>PE Template Obfuscated</p>
    <p>Copies Benign Binaries</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Frankenstein</p>
    <p>Executable Synthesis</p>
    <p>Code Generation</p>
    <p>Gadget ArrangementGadget Discovery</p>
    <p>Gadget Assignment</p>
    <p>Code InjectorSemantic Blueprint</p>
    <p>PE Template Obfuscated</p>
    <p>Copies Benign Binaries</p>
    <p>Malware functionality expressed as a set of logical predicates.</p>
  </div>
  <div class="page">
    <p>Semantic Blueprint</p>
    <p>Eg: semantic blueprint to find the slope of a line given two points (x1,y1) and (x2,y2)</p>
    <p>evil_slope := sub(L1, y1, y2), // L1 = y1 - y2</p>
    <p>sub(L2, x1, x2), // L2 = x1 - x2 div(L3, L1, L2). // L3 = (y1-y2) / (x1-x2)</p>
  </div>
  <div class="page">
    <p>Semantic Blueprint</p>
    <p>Logical predicates represent actions  Predicates can be layered for abstraction</p>
    <p>Lowest layer predicates match multiple gadgets</p>
    <p>The goal is to encode what rather than how</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Frankenstein</p>
    <p>Executable Synthesis</p>
    <p>Code Generation</p>
    <p>Gadget ArrangementGadget Discovery</p>
    <p>Gadget Assignment</p>
    <p>Code InjectorSemantic Blueprint</p>
    <p>PE Template Obfuscated</p>
    <p>Copies Benign Binaries</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Frankenstein</p>
    <p>Executable Synthesis</p>
    <p>Code Generation</p>
    <p>Gadget ArrangementGadget Discovery</p>
    <p>Gadget Assignment</p>
    <p>Code InjectorSemantic Blueprint</p>
    <p>PE Template Obfuscated</p>
    <p>Copies Benign Binaries</p>
    <p>Builds a database of gadgets from the benign binaries.</p>
  </div>
  <div class="page">
    <p>Abstract Evaluator</p>
    <p>Input: Instruction sequence, abstract state  Output: All gadget types that it can match  Algorithm:</p>
  </div>
  <div class="page">
    <p>Abstract Evaluator</p>
    <p>Input: Instruction sequence, abstract state  Output: All gadget types that it can match  Algorithm:</p>
    <p>A (contrived) example: Input: add eax, ebx mov ecx, edx Matched gadget types: 1) Arithmetic(eax &lt;-- eax + ebx) clobbers[ecx]</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Frankenstein</p>
    <p>Executable Synthesis</p>
    <p>Code Generation</p>
    <p>Gadget ArrangementGadget Discovery</p>
    <p>Gadget Assignment</p>
    <p>Code InjectorSemantic Blueprint</p>
    <p>PE Template Obfuscated</p>
    <p>Copies Benign Binaries</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Frankenstein</p>
    <p>Executable Synthesis</p>
    <p>Code Generation</p>
    <p>Gadget ArrangementGadget Discovery</p>
    <p>Gadget Assignment</p>
    <p>Code InjectorSemantic Blueprint</p>
    <p>PE Template Obfuscated</p>
    <p>Copies Benign Binaries</p>
    <p>Express blueprint as potential sequences of gadget types.</p>
    <p>Find gadgets to satisfy each identified arrangement</p>
    <p>Create binaries for each assignment by injecting into a template file.</p>
    <p>Multiple variants of Frankenstein</p>
  </div>
  <div class="page">
    <p>The implementation</p>
    <p>Combination of  Python - gadget discovery, executable synthesis</p>
    <p>Prolog - gadget assignment</p>
    <p>Small abstract evaluator  Only identifies 8 non-branch instructions</p>
    <p>Still more than sufficient for good results</p>
    <p>Not self-propagating (yet!)</p>
  </div>
  <div class="page">
    <p>The results</p>
    <p>Gadget discovery  Tested with files from windows/system32  Limited gadget size to 2-6 instructions</p>
    <p>Verdict:  46 gadgets per KB of code  2300 gadgets per second  Encouraging!</p>
  </div>
  <div class="page">
    <p>The results</p>
    <p>Generated working mutants  Gadgets only from explorer.exe  Insertion Sort  XOR-based olgimorphism</p>
    <p>Found over 10,000 viable gadget assignments each!</p>
    <p>Size increase a little less than double on average</p>
  </div>
  <div class="page">
    <p>The results</p>
    <p>Compositionally benign?</p>
    <p>Analyzed fresh n-grams across 20 mutants  2% common across 3 or more</p>
    <p>0.3% common across 5 or more</p>
    <p>0% common across 7 or more</p>
    <p>i.e: No defining n-grams across 35% or more</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>New way to obfuscate malware</p>
    <p>Principled approach to metamorphism</p>
    <p>Early results show high potential for nondistinguishability from benign programs</p>
    <p>Definitely worth developing further</p>
  </div>
  <div class="page">
    <p>Questions? Vishwath Mohan</p>
    <p>(vishwath.mohan@gmail.com)</p>
  </div>
  <div class="page">
    <p>Thank You Vishwath Mohan</p>
    <p>(vishwath.mohan@gmail.com)</p>
  </div>
  <div class="page">
    <p>Gadgets</p>
    <p>Less constrained notion of a gadget</p>
    <p>More varied (but less than micro-gadgets?)</p>
  </div>
  <div class="page">
    <p>Gadgets</p>
    <p>Less constrained notion of a gadget</p>
    <p>More varied (but less than micro-gadgets?)</p>
  </div>
</Presentation>
