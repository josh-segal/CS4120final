<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rashad S. Oreifej, Rawad N. Al-Haddad, Heng Tan and Ronald F. DeMara</p>
    <p>University of Central Florida</p>
    <p>Rashad S. Oreifej, Rawad N. Al-Haddad, Heng Tan and Ronald F. DeMara</p>
    <p>University of Central Florida</p>
    <p>Layered Approach To Intrinsic Evolvable Hardware Using Direct Bitstream</p>
    <p>Manipulation Of Virtex II Pro Devices</p>
  </div>
  <div class="page">
    <p>Evolvable Hardware</p>
    <p>Automated Construction: develop Electronic Circuits by Intelligent Search</p>
    <p>Applications: Design, Optimization, or Failure Recovery phases</p>
    <p>Evolvable Hardware</p>
    <p>Intellige nt</p>
    <p>Search</p>
    <p>Hardwar e</p>
    <p>Design</p>
    <p>Amplifiers</p>
    <p>Antennas</p>
    <p>Filters</p>
    <p>Bayesian</p>
    <p>Simulated Annealing</p>
    <p>Genetic Algorithms</p>
    <p>Nearest Neighbor</p>
    <p>FPGAs</p>
    <p>Applicatio ns</p>
    <p>IndividualIndividual (Chromosome)(Chromosome)</p>
    <p>GENEGENE</p>
    <p>GAs frequently use binary strings to GAs frequently use binary strings to represent candidate solutions: represent candidate solutions: genotypegenotype  Translation to FPGA Configuration bitstream</p>
    <p>maps genotype to phenotype FPGAs for evolving digital logic</p>
  </div>
  <div class="page">
    <p>GAs and Evolution</p>
    <p>Extrinsic Evolution</p>
    <p>Genetic</p>
    <p>Algorithm</p>
    <p>software model Done? Build it</p>
    <p>Simulation in the loop</p>
    <p>Genetic</p>
    <p>Algorithm</p>
    <p>Hardware in the loop</p>
    <p>Intrinsic Evolution  Fitness</p>
    <p>measured using physical device output</p>
    <p>Observes constraints imposed by internal structure</p>
    <p>Functional models abstract physical aspects of device</p>
    <p>Representation has to undergo placement and routing before implementation.</p>
    <p>Genetic Algorithms:Genetic Algorithms:  Implement guided trial-and-error search using</p>
    <p>principles of Darwinian evolution  Iterative selection enforces survival of the fittest  Genetic operators - mutation, crossover,  - can be</p>
    <p>used to refurbish designs</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Conventional vs. Evolutionary Design [Miller, Alg. Evol Strat. 98]Conventional vs. Evolutionary Design [Miller, Alg. Evol Strat. 98]  GA is presented that can evolve 100% functional adder and multiplier circuits  Explored the effect of the device physical constraints (Xilinx 6216 FPGA)  Emphasized EH feasibility over FPGA implementation concerns</p>
    <p>Fitness-based vs. Population-based Evolution Fitness-based vs. Population-based Evolution [Keymeulen, IEEE Trans. Rel 02][Keymeulen, IEEE Trans. Rel 02]  Design fault-insensitive electronic components using evolutionary techniques  Online and offline repair techniques via an intrinsic design tool (EHWPack)  Fine-grained CMOS Field Programmable Transistor Array (FPTA) architecture is used to evolve</p>
    <p>analog multiplier and digital XNOR</p>
    <p>Intrinsic EHW on Virtex Devices [Intrinsic EHW on Virtex Devices [Hollingworth, ICES00]00]  Evolution by partial reconfiguration of bitstream for changes from baseline circuit  Runtime configuration using Xilinxs JBits Interface (Java in the loop)</p>
    <p>Recent General-purpose Frameworks Support Bitstream ReuseRecent General-purpose Frameworks Support Bitstream Reuse  Blodget et al [Blodget FPL03]</p>
    <p>Two-layer framework for Virtex II devices using Xilinx Partial Reconfiguration Toolkit (XPART) utilzing a soft processor core within the FPGA</p>
    <p>Williams et al [Williams ERSA04]  Egret focuses on a full SOC solution using ICAP and an embedded Linux system on a Xilinx</p>
    <p>Virtex II chip with bash shell scripts to perform operations, such as obtaining partial bit streams from remote servers, and initiating reconfiguration</p>
    <p>Kalte et al [Kalte PDPS05]  REPLICA (Relocation per online Configuration Alteration) filter uses the SelectMAP interface to</p>
    <p>perform bitstream manipulation to carry out the relocation during the regular download process</p>
  </div>
  <div class="page">
    <p>UCF Intrinsic Evolution Platform</p>
    <p>The developed platform utilizes the following The developed platform utilizes the following hardwarehardware components on the FPGA chip: components on the FPGA chip:</p>
    <p>Tester (GNAT) from the FPGA side, and to Tester (GNAT) from the FPGA side, and to the parallel port (IEEE 1284) on the host PC the parallel port (IEEE 1284) on the host PC using a Xilinx Parallel Cableusing a Xilinx Parallel Cable</p>
    <p>Confers input/output data exchanged Confers input/output data exchanged between the host PC and the FPGAbetween the host PC and the FPGA</p>
    <p>the reconfigurable area the reconfigurable area  Connects to the BSCAN_VIRTEX2 block via Connects to the BSCAN_VIRTEX2 block via</p>
    <p>the Test Data Input (TDI), Test Data Output the Test Data Input (TDI), Test Data Output (TDO), and Control signals, and to the (TDO), and Control signals, and to the targeted circuit via a straightforward targeted circuit via a straightforward read/write bus interfaceread/write bus interface</p>
    <p>read/write bus of the GNAT to receive/deliver read/write bus of the GNAT to receive/deliver data throughput input/output data throughput input/output</p>
  </div>
  <div class="page">
    <p>UCF Platform Software Components</p>
    <p>The developed platform consists of following The developed platform consists of following softwaresoftware components: components:</p>
    <p>architecturearchitecture  Implements a conventional population-basedImplements a conventional population-based GA with runtime GA with runtime</p>
    <p>customizable parameterscustomizable parameters 2.2. Chromosome ManipulatorChromosome Manipulator</p>
    <p>C based GA operators library (yet executed using Visual Studio .NET)C based GA operators library (yet executed using Visual Studio .NET)  Provides a logical abstraction and hardware transparency of genetic Provides a logical abstraction and hardware transparency of genetic</p>
    <p>operators to the GA Engine moduleoperators to the GA Engine module 3.3. MRRAMRRA</p>
    <p>Partitions operations into Partitions operations into Logic, TranslationLogic, Translation, and , and Reconfiguration Reconfiguration layers with a standardized set of APIslayers with a standardized set of APIs</p>
    <p>FPGA configurations are manipulated at runtime using on-chip FPGA configurations are manipulated at runtime using on-chip resources on Xilinx Virtex II Pro via PC (JTAG) or PowerPC resources on Xilinx Virtex II Pro via PC (JTAG) or PowerPC (SelectMAP)(SelectMAP)</p>
    <p>toolstools  The platform manipulates this bitstream to carry out the physical The platform manipulates this bitstream to carry out the physical</p>
    <p>mapping of the crossover or mutation mapping of the crossover or mutation</p>
  </div>
  <div class="page">
    <p>Intrinsic Evolution Workflow</p>
    <p>FPGA ReconfigurationFPGA Reconfiguration Pattern EvaluationPattern Evaluation</p>
    <p>STARTSTART:: module-module</p>
    <p>based flowbased flow</p>
    <p>IterateIterate: : frame-frame</p>
    <p>based flowbased flow</p>
  </div>
  <div class="page">
    <p>Multilayer Runtime Reconfiguration Architecture (MRRA)</p>
    <p>Framework for Dynamic Reconfiguration</p>
    <p>High-Level Applications</p>
    <p>Mapping Engine</p>
    <p>RAM</p>
    <p>M ic</p>
    <p>ro pr</p>
    <p>oc es</p>
    <p>so r</p>
    <p>SelectMAP / JTAG / ICAP</p>
    <p>MRRA System</p>
    <p>Reconfigurable Units</p>
    <p>PC</p>
    <p>PowerPC</p>
    <p>and / or Logic Layer</p>
    <p>Reconfiguration Layer</p>
    <p>Translation Layer</p>
    <p>Three layers (Logic, Translation, and Reconfiguration) with well-defined interfaces promoting modularity and reuse within a set of high-level APIs to carry out the partial reconfiguration process with reduced manual intervention.</p>
    <p>Task-level Modularity: provide support at levels down to and including task-level granularity. A task is defined as an arbitrary function synthesized to a module that can be dynamically downloaded into the reconfigurable device: Module-based or Frame-based.</p>
    <p>Runtime Scenario Support: provide the ability to generate and reconfigure task bitstreams at runtime as well as design-time. Runtime scenarios envisioned at design-time may not necessarily know in advance which tasks will arrive nor when they will arrive, and in selected cases what some of their specific properties will be.</p>
    <p>Encapsulation: control logic of each layer self-contained with fixed interface to other layers. If new control algorithms are added or the device platform is changed, the system can be ported more readily.</p>
    <p>. . .</p>
    <p>PLB</p>
    <p>PowerPC</p>
    <p>O P</p>
    <p>B</p>
    <p>Reconfigurable Module</p>
    <p>Reconfigurable Module</p>
    <p>PCI</p>
    <p>FPGA</p>
    <p>Host PC</p>
    <p>PLB/OPB Bridge</p>
    <p>Block RAM</p>
    <p>UART</p>
    <p>SRAM Controller</p>
    <p>ICAP Controller</p>
    <p>External SRAM</p>
    <p>JTAG</p>
    <p>ICAP</p>
    <p>SelectMAP</p>
    <p>On Chip Data Flow</p>
    <p>Reconfiguration Data Flow</p>
    <p>External Data Flow</p>
    <p>JTAG / SelectMAP / ICAP Reconfiguration Interfaces</p>
  </div>
  <div class="page">
    <p>MRRA Logic Control Flow</p>
    <p>Top-Level Design</p>
    <p>Module-Level Design</p>
    <p>Module Implementation</p>
    <p>Final Assemble</p>
    <p>Configuration Data</p>
    <p>Logic Management</p>
    <p>Design Time Flow</p>
    <p>Run Time Flow</p>
    <p>PlanAhead</p>
    <p>FloorPlanner</p>
    <p>User Logic</p>
    <p>.ngc/.edf</p>
    <p>.ngc/.edf</p>
    <p>.ucf</p>
    <p>.ucf</p>
    <p>.bit</p>
    <p>.bit .bit</p>
    <p>.bit</p>
    <p>.bit</p>
    <p>Synthesis Tool</p>
    <p>Scripts / ISE</p>
    <p>One-Dimensional Area Management performed on full physical FPGA device by partitioning into 1-dimensional column-based rectangles, for fixed and reconfigurable modules arranged based on size and specified area constraints. Tools, such as PlanAhead, are accommodated.</p>
    <p>Bus Macros maintain correct connections between modules by spanning boundaries of these rectangular regions. Next, the modules are implemented and verified individually to create the Module Implementation and optimized by additional Two-Dimensional Area Allocation placements inside each module to minimize the partial reconfiguration bitstream size.</p>
    <p>After initial bitstream download, precompiled partial bitstreams can be monitored by algorithms in Logic Layer and updated directly to device for dynamic reconfiguration. New modification requests can be generated by the user logic in the form of hardwareindependent representation depicted by the Runtime Flow. Although boundary of module is fixed, physical logic resources inside can be modified at runtime.</p>
    <p>Integrated and adopted Modulebased Flow from the standard Xilinx flow plus selected area management ability and direct bit management process, we term Frame-based Flow.</p>
    <p>Module-based utilized at design time. Later, translation engine supports autonomous reconfiguration without GUI interface.</p>
  </div>
  <div class="page">
    <p>Direct Bitstream Manipulation Concept and Case Study</p>
    <p>Change one-bit full adder to a one-bit full subtracter  Both have three one-bit inputs and two one-bit outputs, 2 LUTs with identical logic connections between LUTs and I/O signals  Only difference is only one truth table stored inside one LUT, changing from 0xE8 to 0x8E  Practical case study: dynamically reconfigurable SHA-1/MD5 Message Digest hashing algorithms:</p>
    <p>STEP FUNCTION RESOURCE UTILIZATION AND POWER EVALUATION</p>
    <p>SHA-1 MD5 Combined</p>
    <p>Baseline Module Based</p>
    <p>Frame Based</p>
    <p>Baseline Module Based</p>
    <p>Frame Based Baseline Module Based Frame Based</p>
    <p>Area (slice) 192 65 (33.9%) 32 881 168 (19.1%) 32 1068 324 (30.3%) 32</p>
    <p>Dynamic Power (mW)</p>
    <p>(15.4%) N/A 274.12</p>
    <p>N/A</p>
    <p>Total Core Power (mW)</p>
    <p>N/A 517.70 301.82 (58.3%)</p>
    <p>N/A 536.62 342.28</p>
    <p>(63.8%) N/A</p>
    <p>X Y</p>
    <p>Cin / BinCout / Bout</p>
    <p>S / D</p>
    <p>Adder /</p>
    <p>Subtracter</p>
    <p>X Y Cin Cout S</p>
    <p>X Y Bin Bout D</p>
    <p>E8</p>
    <p>X</p>
    <p>Y S</p>
    <p>Cout</p>
    <p>Cin</p>
    <p>X</p>
    <p>Y D</p>
    <p>Bout</p>
    <p>Bin Logic</p>
    <p>Switch</p>
    <p>(a) 1 Bit Full Adder (b) 1 Bit Full Subtracter</p>
  </div>
  <div class="page">
    <p>Direct Bitstream Management Equations deduced to locate logic content in V2Pro bitstream</p>
    <p>Offset = 287</p>
    <p>Bitstream=0x6969</p>
    <p>Frame Address = 0x2C0400</p>
    <p>Offset = 282</p>
    <p>Bitstream=0x7171</p>
    <p>Frame Address = 0x2C0400</p>
    <p>Column Number:</p>
    <p>Row Number:</p>
    <p>Truth Table:</p>
    <p>A Direct Bitstream Mapping Example</p>
    <p>overheadXMJA  2 12mod XMNA  125)1(  YKOffset  Full configuration file: organized consecutively by frame without labeling:</p>
    <p>overheadFFFYXXOffset LIOILIOBGCLK  424)1(125)79()2mod(424424222</p>
    <p>Each CLB has 4 slices in 2 cols/2 rows as XiYj, where X is the slice column number, 0 &lt;= i &lt;= 2N-1, beginning from left. N=number CLB cols. Y = row number 0 &lt;= j &lt;= 2K-1 from bottom to top and K=number CLB rows, e.g. XC2VP7 N=40, K=34  Configuration frame has unique 32-bit address of Block Address (BA), a Major Address (MJA), a Minor Address (MNA), and a byte number offset  Let X denote column and overhead include GCLK + leftmost IOB + IOI col (e.g. 3):</p>
    <p>In 5 bytes of slice, first 16 bits for G-LUT truth table (left to right as MSB to LSB) and the last 16 bits for F-LUT (reverse order from LSB to MSB). Each LUT max 4 inputs with up to 16 truth table elements but when less than 4 inputs utilized, remaining unused entries are filled with the duplicated effective values of the used entries:</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Target CircuitTarget Circuit 4-bit x 4-bit unsigned adder4-bit x 4-bit unsigned adder</p>
    <p>ExperimentsExperiments</p>
    <p>GA ParametersGA Parameters</p>
    <p>ParameterParameter Range EvaluatedRange Evaluated Value SelectedValue Selected</p>
    <p>Number of LUTs for design 8 8</p>
    <p>Number of LUTs for repair 8-13 13</p>
    <p>Population Size 5-20 10</p>
    <p>Mutation Rate 5%-90% 50%</p>
    <p>Crossover Rate 30%-90% 60%</p>
    <p>Tournament Size 1-8 6</p>
    <p>Elitism Size 1-2 1</p>
  </div>
  <div class="page">
    <p>Stuck-at Zero and One Fault Modeling</p>
    <p>Virtex II Pro chip has 16-bit LUTs with four input lines and one output</p>
    <p>If the Least Significant Bit (LSB) input pin is stuck-at zero, only the memory locations of the pattern (XXX0)2 will be accessible</p>
    <p>This behavior can be achieved by copying the content of the memory locations of the pattern (XXX0)2 into (XXX1)2 and overwriting their old values</p>
    <p>The same concept can be extended where the location of the stuck input line (0,1,2,3) determines the stride (1,2,4,8) between the memory locations to copy, and the value of the stuck at condition (zero or one) determines the direction of the copy operation (left or right)</p>
    <p>LUT address</p>
  </div>
  <div class="page">
    <p>Performance Metrics</p>
    <p>: The numerical measure of fitness for best individual of final generation, : The numerical measure of fitness for best individual of final generation, e.g. 2^(two 4-bit inputs) * 5-bit output=1280e.g. 2^(two 4-bit inputs) * 5-bit output=1280</p>
    <p>: The arithmetic mean for the fitness of all individuals in the final : The arithmetic mean for the fitness of all individuals in the final generation of the rungeneration of the run</p>
    <p>: The total number of generations in the run: The total number of generations in the run</p>
    <p>: The time elapsed to perform the GA crossover and mutation during the : The time elapsed to perform the GA crossover and mutation during the entire runentire run</p>
    <p>: The time elapsed to apply the input patterns and read back the : The time elapsed to apply the input patterns and read back the corresponding outputs for all the fitness evaluations during the entire runcorresponding outputs for all the fitness evaluations during the entire run</p>
    <p>: The average time taken by a single genetic crossover for a certain GA : The average time taken by a single genetic crossover for a certain GA runrun</p>
    <p>: The average time taken by a single genetic mutation for a certain GA run : The average time taken by a single genetic mutation for a certain GA run</p>
    <p>maxF</p>
    <p>finalF</p>
    <p>G</p>
    <p>totalCM</p>
    <p>evaluationF</p>
    <p>C</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Experimental Results Summary</p>
    <p>Fastest convergence</p>
    <p>Repair must overcome</p>
    <p>failed resource limitation</p>
    <p>Microsecond Order</p>
  </div>
  <div class="page">
    <p>Circuit Evolution: Fitness vs. Time</p>
    <p>Unseeded Design Seeded Design</p>
    <p>Repair: Stuck-at</p>
    <p>Fault</p>
  </div>
  <div class="page">
    <p>Results Summary</p>
    <p>An An intrinsic evolution platform is developed for genetic operators and evolution platform is developed for genetic operators and fitness assessment using API layers which fitness assessment using API layers which directly manipulate the configuration bitstream on Xilinx Virtex II Pro devices on Xilinx Virtex II Pro devices</p>
    <p>Three experiments were conducted: Three experiments were conducted: unseeded design, , seeded design, , and and repair</p>
    <p>Full design/repair is achievable using this platform with an average time of Full design/repair is achievable using this platform with an average time of 0.4 microseconds to perform the genetic mutation, to perform the genetic mutation, 0.7 microseconds to to perform the genetic crossover, and perform the genetic crossover, and 5.6 milliseconds for one input pattern for one input pattern intrinsic evaluation intrinsic evaluation</p>
    <p>Performance advantage of Performance advantage of three orders of magnitude over JBITS and over JBITS and more than more than seven orders of magnitude over the Xilinx design tool driven over the Xilinx design tool driven flow for realizing intrinsic genetic operators on a Virtex II Pro deviceflow for realizing intrinsic genetic operators on a Virtex II Pro device</p>
    <p>Current work is on utilizing partial reconfiguration to reduce JTAG transfer Current work is on utilizing partial reconfiguration to reduce JTAG transfer time and porting to Virtex-4 platformtime and porting to Virtex-4 platform</p>
    <p>Millisecond OrderMultiple</p>
    <p>Seconds</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>[1] S. Vigander, &quot;Evolutionary Fault Repair in Space Applications,&quot; in Dept. of Computer &amp; Information Science, vol. Masters Thesis. Trondheim: Norwegian University of Science and Technology (NTNU), 2001.</p>
    <p>[2] J. F. Miller, P. Thomson, and T. Fogarty., &quot;Designing Electronic Circuits Using Evolutionary Algorithms. Arithmetic Circuits: A Case Study,&quot; in Algorithms and Evolution Strategy in Engineering and Computer Science, D. Quagliarella, J. Periaux, C. Poloni, and G. Winter, Eds. Chichester, England, 1998, pp. 105-131.</p>
    <p>[3] D. Keymeulen, R. S. Zebulum, Y. Jin, and A. Stoica, &quot;Fault-Tolerant Evolvable Hardware Using FieldProgrammable Transistor Arrays,&quot; IEEE Transactions On Reliability, vol. 49, issue 3, September 2000.</p>
    <p>[4] R. S. Oreifej, C. A. Sharma, and R. F. DeMara, &quot;Expediting GA-Based Evolution Using Group Testing Techniques for Reconfigurable Hardware,&quot; in proc. International Conference on Reconfigurable Computing and FPGAs (Reconfig'06), San Luis Potosi, Mexico, September 20-22, 2006, pp. 106-113.</p>
    <p>[5] R. F. DeMara and K. Zhang., &quot;Autonomous FPGA Fault Handling through Competitive Runtime Reconfiguration,&quot; in Proc. of the NASA/DoD Conference on Evolvable Hardware (EH'05), Washington D.C., U.S.A, June 29-01, 2005.</p>
    <p>[6] G. Hollingworth, S. Smith, and A. Tyrrell, &quot;The intrinsic evolution of virtex devices through internet reconfigurable logic,&quot; in Proc. of the Third International Conference on Evolvable System, April 2000.</p>
    <p>[7] H. Tan and R. F. DeMara, &quot;A Device-Controlled Dynamic Configuration Framework Supporting Heterogeneous Resource Management,&quot; in proc. of the International Conference on Engineering of Reconfigurable Systems and Algorithms (ERSA'05), Las Vegas, Nevada, U.S.A, June 27-30, 2005.</p>
    <p>[8] D. Wallace, &quot;Using the JTAG Interface as a General-Purpose Communication Port,&quot; www.xilinx.com/publications/xcellonline/xcell_53/xc_pdf/xc_jtag53.pdf, 2005.</p>
    <p>[9] Xilinx, &quot;Parallel Cable IV Connects Faster and Better,&quot; Xcell Journal, Spring 2002. [10] Xilinx, &quot;Using a Microprocessor to Configure Xilinx FPGAs via Slave Serial or SelectMAP Mode,&quot; v1.4,</p>
    <p>November 2003, [11] B. Blodget, P. James-Roxby, E. Keller, S. McMillan, and P. Sundararajan, A Self-Reconfiguring Platform, in</p>
    <p>Proceedings of Field-Programmable Logic and Applications 2003, Lisbon, Portugal, September 1-3, 2003. [12] J. Williams, and N. Bergmann, Embedded Linux as a Platform for Dynamically Self-Reconfiguring Systems</p>
    <p>On-Chip, in Proceedings of Engineering of Reconfigurable Systems and Algorithms (ERSA 2004), Las Vegas, Nevada, USA, 21-24 June, 2004.</p>
    <p>[13] H. Kalte, G. Lee, M. Porrmann, and U. Ruckert, REPLICA: A Bitstream Manipulation Filter for Module Relocation in Partial Reconfigurable Systems, in Proceedings of 19th IEEE International Proceedings of Parallel and Distributed Processing Symposium, Denver, Colorado, USA, April 04-08, 2005.</p>
  </div>
  <div class="page">
    <p>MRRA Translation Process</p>
    <p>Idle</p>
    <p>Receive LUT List</p>
    <p>Update Location Information</p>
    <p>LUT 1</p>
    <p>LUT 2</p>
    <p>.</p>
    <p>.</p>
    <p>. LUT N</p>
    <p>Read LUT i</p>
    <p>Check Location Flag</p>
    <p>Check Logic Flag</p>
    <p>Clear Location Modification Request</p>
    <p>Set Area Translation Indicator</p>
    <p>Area Translation Indicator</p>
    <p>Logic Translation Indicator</p>
    <p>Update Logic Information</p>
    <p>Clear Logic Modification Request</p>
    <p>Set Logic Translation Indicator</p>
    <p>Call Location Translation Engine</p>
    <p>Call Logic Translation Engine</p>
    <p>I ++</p>
  </div>
  <div class="page">
    <p>Current Work: Direct Bitstream Management</p>
    <p>TABLE VI TRANSLATION ENGINE EVALUATION</p>
    <p>Test Circuit Oringal Equivalent Gate Occupied Slices Bit file Size (Byte) Genera-tion Time (V6.2) Generation Time (V9.1)</p>
    <p>MRRA N/A 1472 548 K 4m 31s N/A</p>
    <p>C17 6 8 66 K 67s 101s</p>
    <p>C1908 603 41 89 K 69s 109s</p>
    <p>B02 28 11 66 K 66s 107s</p>
    <p>B03 160 45 75 K 70s 163s</p>
    <p>MD5 2496 168 120K 71s 111s</p>
    <p>OPTIMIZATION RESULTS</p>
    <p>Module name # of</p>
    <p>LUT. # of FF</p>
    <p># of block Multiplier</p>
    <p># of Slices</p>
    <p>Original File Size (Byte)</p>
    <p>Original Max. Delay (ns)</p>
    <p>Optimized File Size (byte)</p>
    <p>Optimized Max. Delay</p>
    <p>(ns)</p>
    <p>Area Saving</p>
    <p>Block Multiplier 8 25 1 17 88K 1.346 66K 1.346 25% LUT Multiplier 22 22 0 22 96K 1.367 68K 1.346 29%</p>
    <p>SECDED 93 41 0 74 89K 1.355 60K 1.355 33% MD5 292 128 0 168 120K 1.380 84K 1.322 30%</p>
  </div>
</Presentation>
