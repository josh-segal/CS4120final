<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Reliable Connection Migration Mechanism in Mobile Codes</p>
    <p>Xiliang Zhong, Cheng-Zhong Xu Dept. of Electrical and Computer Engineering</p>
    <p>Wayne State University, Detroit, Michigan {xlzhong,czxu}@wayne.edu http://cic.eng.wayne.edu</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background and Goal</p>
    <p>Message delivery protocols  NapletSocket: Synchronous comm.</p>
    <p>Design</p>
    <p>Concurrent Migration</p>
    <p>Security Concerns</p>
    <p>Experimental evaluation  Implementation as a Java middleware</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Code Mobility  Mobility</p>
    <p>Nature of human being, moving toward resources or away from scarcity</p>
    <p>User/device mobility vs computation migration</p>
    <p>Mobile agents:  Autonomous object, acting behalf</p>
    <p>of its client</p>
    <p>Able to travel proactively from machine to machine on open and distributed systems, carrying its code and state.</p>
  </div>
  <div class="page">
    <p>Comm. in Multi-Agent Systems  Multi-Agent comm. languages</p>
    <p>KQML and FIPAs ACL</p>
    <p>Message delivery protocols  Mailbox-based mechanism [Cao etc 02]</p>
    <p>Reliable message delivery [Cao, et al 04, Murphy et al 04]</p>
    <p>Sender</p>
    <p>Receiver</p>
    <p>Asynchronous Communication  Submitted messages are stored in</p>
    <p>the middleware system as long as it takes to deliver it the receiver</p>
  </div>
  <div class="page">
    <p>Synchronous Communication  Synchronous : messages</p>
    <p>are delivered only if both the sender and receiver are present.  E.g. socket</p>
    <p>Sender</p>
    <p>Receiver</p>
    <p>Complement to asynchronous comm. in support of collaborative computing</p>
    <p>How to deal with mobility?  Connection migration  Exactly-once delivery</p>
  </div>
  <div class="page">
    <p>Related works  Network layer</p>
    <p>Mobile IP (Ioannidis et al 2002)</p>
    <p>Transport layer  TCP-R (Funato, et al, 1997), MSOCKS (Maltz</p>
    <p>et al, 1998), Migrate (Snoeren et al 2000), MTCP (Sultan et al 2002)</p>
    <p>Problems  Most need to modify O.S. kernel which hinders</p>
    <p>deployment</p>
    <p>No control over the logical mobility</p>
  </div>
  <div class="page">
    <p>Related works (Conts)  Session layer</p>
    <p>Connection migration for code mobility</p>
    <p>Persistent Connection (Zhang, et al 1995)</p>
    <p>Mobile TCP (Qu, et al 1997)  MobileSocket (Okoshi, et al 1999)</p>
    <p>Fault tolerant connection  Robust TCP (Ekwall, et al 2002)  Reliable Sockets (Zandy, et al 2002)</p>
    <p>Agent migration (zhong:mdc 2004)  No support for simultaneous</p>
    <p>migration of agents</p>
    <p>Peer</p>
    <p>Peer</p>
    <p>Peer</p>
    <p>Peer Peer</p>
  </div>
  <div class="page">
    <p>Design of NapletSocket  A library built on top of Java Socket</p>
    <p>Similar APIs to standard socket  NapletSocket(agent-id), NapletServerSocket(aid)</p>
    <p>suspend, resume</p>
    <p>Integrated into Naplet mobile agent system</p>
  </div>
  <div class="page">
    <p>Naplet Mobile Agent System  Naplet is a featured mobile agent</p>
    <p>system in support of adaptive network services  Flexible: Separation of policy from</p>
    <p>mechanism</p>
    <p>Structured navigation mechanism</p>
    <p>Proportional-share resource management</p>
    <p>Agent-oriented coordinated access control</p>
    <p>Connection migration with mobile agents</p>
  </div>
  <div class="page">
    <p>Connection is suspended before migration and resumed afterward</p>
    <p>Data receiving and agent migration at the same time  Undelivered data is</p>
    <p>buffered before migration and migrate with agent</p>
    <p>Delivered right after connection is resumed.</p>
    <p>Basic Ideas of NapletSocket</p>
    <p>Side A Side B</p>
    <p>Suspend</p>
    <p>Suspend_Ack</p>
    <p>Migration</p>
    <p>Resume</p>
    <p>Resume_Ack</p>
  </div>
  <div class="page">
    <p>State Transitions</p>
  </div>
  <div class="page">
    <p>Open/Close</p>
    <p>Suspend/Resume</p>
  </div>
  <div class="page">
    <p>Concurrent Migration  A simple solution is to let one of the agents</p>
    <p>migrate first  The first one signals the blocked one after it</p>
    <p>finishes migration  No need to resume the connection when the</p>
    <p>first one finishes migration  Set priorities for the agents.</p>
    <p>Statically assign priority to client or server is not deadlock free</p>
    <p>Determine priority based on agent ID</p>
  </div>
  <div class="page">
    <p>Two requests at the same time.  Assume B has a</p>
    <p>higher priority</p>
    <p>Concurrent Migration(I) suspend</p>
    <p>suspend_ack</p>
    <p>ack_wait</p>
    <p>sus_res</p>
    <p>sus_res_ack</p>
    <p>resume</p>
    <p>resume_ack</p>
    <p>A B</p>
    <p>migration</p>
    <p>migration</p>
  </div>
  <div class="page">
    <p>Concurrent Migration(II)  One issues suspend</p>
    <p>request before the other completes.</p>
    <p>suspend</p>
    <p>suspend_ack</p>
    <p>resume</p>
    <p>resume_wait</p>
    <p>resume_ack</p>
    <p>resume</p>
    <p>A B</p>
    <p>migration</p>
    <p>suspend</p>
    <p>migration</p>
  </div>
  <div class="page">
    <p>Security Concerns  Agent docking system</p>
    <p>Agent should not have access to physical resource like port num</p>
    <p>User-based access control</p>
    <p>Security of the connection  Only the one who established a connection can</p>
    <p>operate on it.  By default, a request+Socket ID is enough for an</p>
    <p>action;  Use of a secret session key</p>
    <p>Diffie-Hellman key exchange protocol  Negotiate a key during connection setup and verify it during</p>
    <p>operation on the connection  Free from eavesdropping</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation  Experiments with NapletSocket vs. Java</p>
    <p>Socket  A group of Sun Blade workstation in</p>
    <p>Performance metrics  Cost of primitive operations</p>
    <p>Throughput</p>
  </div>
  <div class="page">
    <p>Cost of primitive operations</p>
    <p>Connection Type</p>
    <p>Open (ms)</p>
    <p>Close (ms)</p>
    <p>Java Socket 3.7 0.6</p>
    <p>NapletSocket w/o security</p>
    <p>NapletSocket w. security</p>
    <p>Open and close  One time operations  No need to reopen during migration</p>
  </div>
  <div class="page">
    <p>Cost of primitive ops. (cont)  Suspend and Resume</p>
    <p>27.8ms for suspend and 16.9ms for resume  The latency for suspend operation mainly due to</p>
    <p>exchange of message and check for input data  For resume operation, the cost is mainly for</p>
    <p>exchange of message and update of data socket and I/O</p>
    <p>Benefit of providing a reliable connection  suspend+resume: 44.7ms  close+reopen: 138.6ms  More time is saved as agents migrate more</p>
  </div>
  <div class="page">
    <p>Throughput between stationary Agents</p>
  </div>
  <div class="page">
    <p>Throughput of Itinerary Agents  Both agents keep sending messages to</p>
    <p>each other while they are migrating</p>
    <p>Effective throughput: total traffic communicated in a time unit</p>
  </div>
  <div class="page">
    <p>Impact of migration frequency</p>
  </div>
  <div class="page">
    <p>Impact of migration hops.</p>
  </div>
  <div class="page">
    <p>Conclusions  NapletSocket for synchronous communication</p>
    <p>between mobile agents.  A connection migration mechanism in support of</p>
    <p>concurrent agent migration</p>
    <p>Use of agent-oriented access control and secrete session keys to deal with security concerns</p>
    <p>Moderate cost in connection setup</p>
    <p>Marginal cost in message delivery</p>
    <p>Future work  Fault-tolerant for host/network failure</p>
    <p>Group communication</p>
  </div>
  <div class="page">
    <p>A Reliable and Secure Connection Migration Mechanism for Mobile Codes</p>
    <p>Thanks You!</p>
  </div>
  <div class="page">
    <p>Effectiveness of reliable comm.</p>
    <p>Exactly-Once Delivery Guarantee</p>
    <p>M-Point</p>
    <p>Peer</p>
    <p>Peer</p>
    <p>Peer</p>
    <p>M-Point M-Point</p>
  </div>
  <div class="page">
    <p>Concurrent Migration</p>
  </div>
  <div class="page">
    <p>Socket Handoff</p>
  </div>
  <div class="page">
    <p>Multiple connections</p>
  </div>
  <div class="page">
    <p>Impact of agent migration frequency on connection migratin cost</p>
  </div>
</Presentation>
