<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Staying in the Middle: Exact and Approximate Medians in R1 and R2 for Moving Points</p>
    <p>Pankaj K. Agarwal Mark de Berg</p>
    <p>Jie Gao Leonidas J. Guibas</p>
    <p>Sariel Har-Peled</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 1</p>
  </div>
  <div class="page">
    <p>Staying in the middle</p>
    <p>For a set of moving points, maintain another point (not necessarily in the</p>
    <p>set) that continuously stays in the middle.</p>
    <p>find a point with roughly the same number of points on each side (in</p>
    <p>R 1) or along each direction (in R2).</p>
    <p>Many range query data structures, e.g., kd-trees, are based on balanced</p>
    <p>space partitions.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 2</p>
  </div>
  <div class="page">
    <p>Medians and center points</p>
    <p>A median of a set of points on a line (in R1) is the one with rank n/2.</p>
    <p>The depth (p) of a point p  R2 is the minimum number of points on</p>
    <p>either side of any line passing through p. A point with depth at least n is</p>
    <p>called a -center point. By Hellys Theorem, a 1/3-center point exists for</p>
    <p>any point set and is called just a center point. For some k  n/2, the set</p>
    <p>of points with depth at least k is called k-th depth contour, denoted by Dk.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 3</p>
  </div>
  <div class="page">
    <p>Kinetic medians and center points</p>
    <p>Kinetic Data Structure (KDS) framework: the median/center point only</p>
    <p>changes at discrete times although the points move continuously.</p>
    <p>Maintain a number of combinatorial certificates whose validity</p>
    <p>certifies the correctness of the median/center point;</p>
    <p>When a certificate fails, i.e., an event happens, we update the</p>
    <p>certificate lists and the median/center point when necessary.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 4</p>
  </div>
  <div class="page">
    <p>Kinetic medians and center points</p>
    <p>Evaluation criteria of a KDS:</p>
    <p>compactness = # certificates in the proof;</p>
    <p>efficiency = # events under pseudo-algebraic motion;</p>
    <p>responsiveness = update cost to fix an event;</p>
    <p>locality = # certificates involving any point;</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 5</p>
  </div>
  <div class="page">
    <p>Part I: Maintaining the exact median and center points</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 6</p>
  </div>
  <div class="page">
    <p>A warm-up: maintaining the median in R1, I</p>
    <p>When the points move, the median follows n/2-level of the</p>
    <p>arrangement of the trajectories.</p>
    <p>time</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 7</p>
  </div>
  <div class="page">
    <p>Maintaining the rank k point in R1, II</p>
    <p>Maintain three points:</p>
    <p>the rank k point, pk;</p>
    <p>the max among points with rank less than k, p&lt;k, by a kinetic</p>
    <p>tournament;</p>
    <p>the min among points with rank more than k, p&gt;k, by a kinetic</p>
    <p>tournament.</p>
    <p>Certificates: p&lt;k  pk  p&gt;k, plus the certificates of the two kinetic</p>
    <p>tournaments.</p>
    <p>The total number of events is O(k(n) log 2 n), where k(n) is the</p>
    <p>complexity of the k-level. Each event can be handled in O(log n) time.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 8</p>
  </div>
  <div class="page">
    <p>Maintaining depth contour and center region in R2, I</p>
    <p>Consider the set of lines P  in the dual plane, a point p with depth k</p>
    <p>dualizes to a line between the k-level, k, and (n  k)-level, nk.</p>
    <p>primal</p>
    <p>p</p>
    <p>dual</p>
    <p>k</p>
    <p>p</p>
    <p>nk</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 9</p>
  </div>
  <div class="page">
    <p>Maintaining depth contour and center region in R2, II</p>
    <p>The k-depth contour in the primal plane, Dk, dualizes to the region bounded between the upper envelope of the k-level and lower envelope of the (n  k)-level.</p>
    <p>primal</p>
    <p>Dk</p>
    <p>dual</p>
    <p>Dk</p>
    <p>Problem reduces to maintaining the upper hull of the k-level of a set of moving lines L.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 10</p>
  </div>
  <div class="page">
    <p>Maintaining depth contour and center region in R2, III</p>
    <p>For each line   L, maintain the leftmost, v(), and rightmost, v+(), intersections of  with k-level k.</p>
    <p>Maintain the upper hull of those intersections V , UH(V ), by existing kinetic convex hull algorithm.</p>
    <p>dual</p>
    <p>This structure maintains O(n2) certificates, O(n4+) events such that each event can be updated in O(log2 n) time.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 11</p>
  </div>
  <div class="page">
    <p>Maintaining depth contour and center region in R2, III</p>
    <p>For each line   L, maintain the leftmost, v(), and rightmost, v+(), intersections of  with k-level k.</p>
    <p>Maintain the upper hull of those intersections V , UH(V ), by existing kinetic convex hull algorithm.</p>
    <p>dual</p>
    <p>UH(V )</p>
    <p>This structure maintains O(n2) certificates, O(n4+) events such that each event can be updated in O(log2 n) time.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 12</p>
  </div>
  <div class="page">
    <p>A space-efficient algorithm to maintain a center point, I</p>
    <p>Tverberg partition: any n = 3m points can be partitioned into m triples</p>
    <p>such that the intersections of these triangles i,  = m</p>
    <p>i=1 i, is</p>
    <p>non-empty (Tverberg 1966).</p>
    <p>Observation: any point inside  is a center point.</p>
    <p>So, we just maintain  under motion.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 13</p>
  </div>
  <div class="page">
    <p>A space-efficient algorithm to maintain a center point, II</p>
    <p>is the intersection of n half planes H. In the dual space, each half plane</p>
    <p>h maps to an oriented point h and  maps to the convex hull of H. We</p>
    <p>use existing kinetic convex hull algorithm to maintain CH(H).</p>
    <p>primal</p>
    <p>=</p>
    <p>H</p>
    <p>h  H dual</p>
    <p>h</p>
    <p>= CH(H)</p>
    <p>If  is non-empty, CH(H) is non-empty.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 14</p>
  </div>
  <div class="page">
    <p>A space-efficient algorithm to maintain center point, III</p>
    <p>When  shrinks to empty, we re-arrange the two or three triangles to re-establish the Tverberg partition.</p>
    <p>be</p>
    <p>a d</p>
    <p>f c</p>
    <p>e b</p>
    <p>d</p>
    <p>c</p>
    <p>a f</p>
    <p>a</p>
    <p>h</p>
    <p>o</p>
    <p>e</p>
    <p>f</p>
    <p>g</p>
    <p>d</p>
    <p>b</p>
    <p>c</p>
    <p>i</p>
    <p>b</p>
    <p>d</p>
    <p>g</p>
    <p>fa</p>
    <p>c</p>
    <p>i o</p>
    <p>e h</p>
    <p>We use O(n log n) certificates and O(n7+) events.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 15</p>
  </div>
  <div class="page">
    <p>Part II: Maintaining the approximate median and center points</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 16</p>
  </div>
  <div class="page">
    <p>Approximate medians and center points</p>
    <p>An -approximate median is a point in between the rank (1  )n/2 and</p>
    <p>(1 + )n/2 points. An -approximate center point is a point with depth in</p>
    <p>between (1  )n/3 and (1 + )n/3.</p>
    <p>Approximate medians and center points can change much less often than</p>
    <p>the exact ones.</p>
    <p>E.g., if the points follow linear motion, the best known bound on the</p>
    <p>number of changes of the exact median is O(n4/3). But an -approximate</p>
    <p>median can change only O(1/2) times and can be computed in time</p>
    <p>O(n log n/2) (Matousek 1990 and Agarwal et al. 2002).</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 17</p>
  </div>
  <div class="page">
    <p>The -approximation based algorithm</p>
    <p>For a range space X = (S, R), where S is a set and R  2S , a subset</p>
    <p>A  S is called an -approximation for X if, for every range R  R,</p>
    <p>|A</p>
    <p>T R|</p>
    <p>|A|  | R</p>
    <p>S |</p>
    <p>&lt; .</p>
    <p>For a finite range space, there exists an -approximation with size</p>
    <p>O( 1 2</p>
    <p>log 1  ).</p>
    <p>If the trajectories of the points are fixed, we can find an -approximation</p>
    <p>A of P in the standard way such that the median (or center point) of A is</p>
    <p>an -approximate median (or center point) of P , at any time.</p>
    <p>It seems we are all set, but not really...</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 18</p>
  </div>
  <div class="page">
    <p>The -approximation based algorithm</p>
    <p>If a point changes its trajectory, how to guarantee the -approximation is</p>
    <p>still good?</p>
    <p>We need a deterministic algorithm for an -approximation that allows</p>
    <p>dynamic update in polylogarithmic time.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 19</p>
  </div>
  <div class="page">
    <p>A dynamic algorithm for -approximation, I</p>
    <p>Build a balanced binary tree over the points of S (assuming |S| = 2k) ,</p>
    <p>and compute the -approximation in a bottom-up fashion, by using the</p>
    <p>followings (Chazelles book 2000).</p>
    <p>Merging: Merge the -approximation of the children.</p>
    <p>Halving: If the -approximation gets too large, then halve it (and lose</p>
    <p>a small approximation factor).</p>
    <p>Finally, one can get an -approximation with size O( 1 2</p>
    <p>log 1  ).</p>
    <p>Now, we make this structure dynamic.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 20</p>
  </div>
  <div class="page">
    <p>A dynamic algorithm for -approximation, II</p>
    <p>Invariant: Every internal node maintains an approximation to all the</p>
    <p>points in its subtree.</p>
    <p>When a point is inserted, make it a subtree. When a point is deleted, the</p>
    <p>original tree is cut into O(log n) pieces.</p>
    <p>Then we merge the trees and re-compute the approximation at each node</p>
    <p>(merge and halve the approximations of subtrees).</p>
    <p>Theorem Given a range space X = (S, R) of VC-dimension d and a parameter , one can (deterministically) maintain an -approximation of</p>
    <p>X of size O(1/2 log(1/)), in O (</p>
    <p>log2d+3 n 2d+2</p>
    <p>(log(log(n)/)) 2d+2</p>
    <p>)</p>
    <p>(you</p>
    <p>know, polylog) time per insertion or deletion.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 21</p>
  </div>
  <div class="page">
    <p>The -approximation based algorithm</p>
    <p>Theorem For a set of points S moving in R2, one construct a data structure that can be updated in (log(n)/)O(1) time whenever the</p>
    <p>trajectory of a point in S changes, and that, for any time t, can return an</p>
    <p>-approximate center point of S(t) in O(log(1/)) time based on the</p>
    <p>current trajectories of S.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 22</p>
  </div>
  <div class="page">
    <p>Faster off-line algorithms</p>
    <p>If the trajectories are fixed, we can find -approximate medians of size</p>
    <p>O(1/2) in time O(n log(1/) + 1/O( 2)), where  is the degree of the</p>
    <p>algebraic trajectory.</p>
    <p>If the trajectories are lines, we can find -approximate medians of size</p>
    <p>O(1/4/3 log2(1/)) in time O((n/1/3) log(1/)).</p>
    <p>Please see the full paper for details.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 23</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Approximate medians or center points change much less often than</p>
    <p>the exact ones.</p>
    <p>The deterministic dynamic algorithm for an -approximation is</p>
    <p>interesting on its own.</p>
    <p>August 10, 2005 Staying in the Middle @ CCCG 2005 24</p>
  </div>
</Presentation>
