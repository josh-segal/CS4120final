<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ODISSEA: a Peer-to-Peer Architecture for Scalable Web Search and IR</p>
    <p>Torsten Suel</p>
    <p>with C. Mathur, J. Wu, J. Zhang, A. Delis, M. Kharrazi, X. Long, K. Shanmugasunderam</p>
    <p>CIS Department Polytechnic University</p>
    <p>Brooklyn, NY 11201</p>
    <p>http://cis.poly.edu/westlab/odissea/ (google: odissea peer)</p>
  </div>
  <div class="page">
    <p>ODISSEA: architecture, motivation, ideology - system design</p>
    <p>- discussion of design choices</p>
    <p>- our vision: open distributed web search architecture</p>
    <p>Distributed query processing - query execution in large search engines</p>
    <p>- efficient distributed top-k queries</p>
    <p>- experimental results</p>
    <p>Open problems and future work</p>
    <p>Talk Outline:</p>
  </div>
  <div class="page">
    <p>huge amount of work on web search  huge amount of activity in P2P  so, how about P2P (full text) search? - to query content in P2P networks</p>
    <p>- to query content located outside P2P network</p>
    <p>current engines based on scalable PC clusters  so are many other giant scale services  we know how to do file sharing in P2P  how about search engines and large-scale IR?</p>
    <p>Introduction:</p>
  </div>
  <div class="page">
    <p>Open DIStributed Search Engine Architecture</p>
    <p>global indexing and query execution service - scalable to size of the web - scalable to large query load - highly robust - open</p>
    <p>ODISSEA:</p>
  </div>
  <div class="page">
    <p>avoids broadcasting query to all nodes  faces other problems: updates, long inverted lists  our main technical focus: efficient top-k queries</p>
    <p>Global index organization:</p>
    <p>local index organization global index organization</p>
  </div>
  <div class="page">
    <p>scalable lower tier for indexing and query execution  crawling outside system  open interface supporting client-based tools</p>
    <p>Two-tier architecture:</p>
  </div>
  <div class="page">
    <p>search of content located in P2P network</p>
    <p>distributed search in large organizations</p>
    <p>as a large-scale web search engine</p>
    <p>as global search middleware on top of system of local index structures</p>
    <p>Applications:</p>
  </div>
  <div class="page">
    <p>beyond current web search: - smart desktop-based search tools - browsing assistants, navigational toolbars - access lower-level search infrastructure</p>
    <p>can we have a common infrastructure? - open - scalable - agnostic</p>
    <p>example: Google API (not really)  discussion: entry barrier to search  tradeoff/challenge: performance vs. flexibility</p>
    <p>Vision: open web search infrastructure</p>
  </div>
  <div class="page">
    <p>P2P system spectrum: - unstructured (Gnutella etc) vs. structured (DHT) - rapidly evolving vs. fairly static</p>
    <p>massive data apps = fairly static system? - limit to how fast we can move data around - exception: file sharing (download, then share)</p>
    <p>we are at the more stable end of spectrum</p>
    <p>failures vs. unavailability</p>
    <p>replication and synchronization challenges</p>
    <p>Discussion: P2P and massive data</p>
  </div>
  <div class="page">
    <p>based on Pastry DHT  index and objects stored in Berkeley DB  fine-grained postings traffic via P2P links  replication for fault-tolerance  replication based on object groups  nodes may be temporarily unavailable  synchronization of nodes upon reentry</p>
    <p>Implementation:</p>
  </div>
  <div class="page">
    <p>inverted index - a data structure for supporting text queries - like index in a book</p>
    <p>Query processing in search engines</p>
    <p>inverted index</p>
    <p>aalborg 3452, 11437, .. .. . .. arm 4, 19, 29, 98, 143, ... armada 145, 457, 789, ... armadillo 678, 2134, 3970, ... armani 90, 256, 372, 511, ... . . . . . zz 602, 1189, 3209, ...</p>
    <p>disks with documents</p>
    <p>indexing</p>
    <p>Boolean queries: (zebra AND armadillo) OR armani</p>
    <p>unions/intersections of lists</p>
  </div>
  <div class="page">
    <p>scoring function: assigns score to each document with respect to a given query</p>
    <p>top-k queries: return k documents with highest score</p>
    <p>example cosine measure</p>
    <p>Ranking in search engines:</p>
    <p>term-based vs. link-based ranking</p>
    <p>many other important factors (links, user feedback, $, markup)</p>
  </div>
  <div class="page">
    <p>how to combine/add pagerank score and cosine? (addition)  use PR or log(PR) ?  normalize using mean of top-100 in list (Richardson/Domingo)</p>
    <p>Using Pagerank in ranking:</p>
  </div>
  <div class="page">
    <p>recent work by Fagin and others</p>
    <p>FA (Fagins algorithm), TA (Threshold algorithm), others</p>
    <p>term-based ranking: presort each list by contribution to cosine</p>
    <p>Efficient algorithms for top-k queries:</p>
    <p>Pagerank: (pre)sort by combination of cosine and Pagerank?</p>
  </div>
  <div class="page">
    <p>centralized setting  120 million crawled pages  Excite query trace  CA = clairvoyant algorithm</p>
    <p>Some results:</p>
  </div>
  <div class="page">
    <p>most savings for long lists  in fact, cos + log(PR) schemes get better and better</p>
    <p>More details:</p>
  </div>
  <div class="page">
    <p>some methods increase with length of other list  intersection pretty bad</p>
    <p>Shortest shorter lists:</p>
  </div>
  <div class="page">
    <p>only FA with cosine increases with length of longer list  others much better and closer to each other</p>
    <p>Medium shorter lists:</p>
  </div>
  <div class="page">
    <p>one round-trip  need to decide right length of prefix to send  can be extended to more than two keywords</p>
    <p>Distributed implementation:</p>
  </div>
  <div class="page">
    <p>top-10 queries  cosine (top) and cos + log(PR) (bottom)  8 bytes per posting  TCP performance model for congestion window  prefix length determined by threshold algorithm (TA)</p>
    <p>Results of distributed implementation:</p>
  </div>
  <div class="page">
    <p>P2P search: JXTA, pSearch, FASD, planetP, others</p>
    <p>with global index structure: - Gnawali (Chord)</p>
    <p>- Reynolds/Vahdat: Bloom filters</p>
    <p>- Li et al: feasibility of P2P search engines, Bloom filters and other techniques (IPTPS 2003)</p>
    <p>Pruning techniques for top-k queries - DB Community: Fagin et al. 1996 - now</p>
    <p>- IR Community: since 1980s (Buckley/Lewit SIGIR 85)</p>
    <p>- Persin/Zobel/Sacks-Davis 1996, Anh/Kretser/Moffat 2001</p>
    <p>- differences: random lookups, # of terms, AND vs. OR</p>
    <p>Related Work:</p>
  </div>
  <div class="page">
    <p>Current Status and Future Work:</p>
    <p>system still being built (very basic version done)  working on query optimization - integrating Bloom filters and other heuristics - optimizing query plans for 2 and more keywords - use of statistics</p>
    <p>loose ends in evaluation - results for three and more terms - integrating other measures (e.g., term distance)</p>
    <p>replication, synchronization</p>
    <p>more info: http://cis.poly.edu/westlab/odissea/ (google: odissea peer)</p>
  </div>
</Presentation>
