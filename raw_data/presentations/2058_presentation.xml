<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A simple, pipelined all-gather algorithm for large irregular problems</p>
    <p>Jesper Larsson Trff, Andreas Ripke, Christian Siebert,</p>
    <p>Pavan Balaji, Rajeev Thakur, William Gropp NEC Labs Europe, ANL, UIUC</p>
  </div>
  <div class="page">
    <p>An irregular all-gather data-exchange operationAn irregular all-gather data-exchange operation</p>
    <p>MPI_Allgatherv(sendbuf,,recvbuf,,counts,);</p>
    <p>A set of processes, 0, , p-1</p>
    <p>Each has a block of data Bi of (possibly) different size</p>
    <p>All processes have all blocks B0, B1, , B(p-1)</p>
    <p>counts[i]  |Bi|, all processes know the size of all blocks!</p>
    <p>B0 B1</p>
    <p>Bi</p>
    <p>Bi B(p-1)</p>
  </div>
  <div class="page">
    <p>MPI_Allgatherv used in numerical libraries eg. PETSc</p>
    <p>Other irregular collectives, eg. MPI_Alltoallw</p>
    <p>Irregular collectives algorithmically (much!) more difficult  challenging - than regular collectives:</p>
    <p>Load imbalance</p>
    <p>Difficult/expensive to compute schedule Optimality is (NP)hard!</p>
  </div>
  <div class="page">
    <p>Related work:</p>
    <p>Bruck et al. 97: simultaneous binomial tree algorithm:</p>
    <p>Benson et al. 03: MPI implementation of allgather algorithms on switched networks [non SMP-aware]</p>
    <p>Thakur et al. 04: mpich2 implementations of Bruck and other [non SMP-aware]</p>
    <p>Mamidala et al. 06: SMP implementations</p>
    <p>Trff06: Graceful degradation from Bruck to linear ring [SMPaware]</p>
    <p>MPI_Allgather</p>
    <p>MPI_Allgatherv</p>
    <p>Balaji et al 07: optimization in the context of PETSc</p>
    <p>(gossip, broadcast-to-all, )</p>
  </div>
  <div class="page">
    <p>An algorithm for large, regular all-gather problemsAn algorithm for large, regular all-gather problems</p>
    <p>Bi</p>
    <p>Linear ring: p-1 rounds</p>
    <p>Process i receives block B(i-1-k) and sends block B(i-k) in round k, k=0, , p-1</p>
    <p>Process i</p>
    <p>B(i+1)B(i-1)</p>
  </div>
  <div class="page">
    <p>Analysis:</p>
    <p>p-1 (regular) communication rounds</p>
    <p>Each round takes time O(mi), total O((p-1)mi) = O(m-m)</p>
    <p>Size per process mi = |Bi| = m (for regular problem)</p>
    <p>Total problem size m = mi</p>
    <p>Assumptions:</p>
    <p>Processes can send and receive simultaneously</p>
    <p>Cost of sending/receiving data of size m is O(m)</p>
    <p>Homogeneous communication along ring</p>
    <p>NOTE:</p>
    <p>For small m algorithm with log p rounds preferable!</p>
    <p>Optimal: no idle time, no superfluous data!</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>Linear ring: p-1 rounds</p>
    <p>Process i receives block B(i-1-k) from i-1 and sends block B(i-k) to i+1 in round k, k=0, , p-1</p>
    <p>Irregular problem:</p>
    <p>B(i+1)B(i-1)</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>Linear ring: p-1 rounds</p>
    <p>Process i receives block B(i-1-k) from i-1 and sends block B(i-k) to i+1 in round k, k=0, , p-1</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>Linear ring: p-1 rounds</p>
    <p>Process i receives block B(i-1-k) from i-1 and sends block B(i-k) to i+1 in round k, k=0, , p-1</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>Linear ring: p-1 rounds</p>
    <p>Process i receives block B(i-1-k) from i-1 and sends block B(i-k) to i+1 in round k, k=0, , p-1</p>
    <p>BUT:</p>
    <p>Time is O((p-1)max |Bi|) for last process to finish</p>
  </div>
  <div class="page">
    <p>Observation 1: linear ring works for clustered systems also</p>
    <p>Bi</p>
    <p>Linear ring: p-1 rounds</p>
    <p>Process i receives block B(i-1-k) from i-1 and sends block B(i-k) to i+1 in round k, k=0, , p-1</p>
    <p>node i node i+1node i-1</p>
    <p>MODIFICATION: Use virtual ranking, one process per node sends, one process per node receives</p>
    <p>B(i+1)B(i-1)</p>
  </div>
  <div class="page">
    <p>Analysis:</p>
    <p>p-1 rounds</p>
    <p>Inter-node connections busy in all rounds: one process per node sends, one process per node receives</p>
    <p>Each node sends and receives (p-1) blocks</p>
    <p>IMPROVEMENT:</p>
    <p>a node never receives a block that it already has (replace by intra-node all-gather).</p>
  </div>
  <div class="page">
    <p>Observation 2:</p>
    <p>linear ring on cluster solves irregular problem over nodes</p>
    <p>Bi</p>
    <p>node i node i+1node i-1</p>
    <p>Irregular problem can be solved by simulating clustered algorithm</p>
    <p>B(i+1)B(i-1)</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>process i process i+1process i-1</p>
    <p>Handle each block Bi as node of ceil(Bi/B) regular blocks of some size B</p>
    <p>B(i-1) B(i+1)</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>The algorithm for large, irregular all-gather problemsThe algorithm for large, irregular all-gather problems</p>
    <p>The blocked/pipelined ring algorithm</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>The blocked ring algorithm:</p>
    <p>mi</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
    <p>Total number of blocks b = bi</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>B0 B4B3</p>
    <p>B2</p>
    <p>B1</p>
    <p>B9</p>
    <p>B6</p>
    <p>B5</p>
    <p>si: first block of process i, si = (j&lt;i)bi</p>
    <p>B</p>
    <p>bi = ceil(mi/B)</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>At most one block per process may not be full (may be empty)</p>
    <p>B</p>
    <p>MODIFICATION:</p>
    <p>Empty blocks are neither sent nor received</p>
    <p>Only actual data of partial blocks is sent/received</p>
    <p>No process receives a block it already has</p>
    <p>The blocked ring algorithm:</p>
  </div>
  <div class="page">
    <p>Bi</p>
    <p>Process i</p>
    <p>Analysis:</p>
    <p>b-1 (almost) regular communication rounds</p>
    <p>Each round takes time O(B), total time O((b-1)B) = O((p+floor(Bi/B))B)  O(m)</p>
    <p>MUCH BETTER than O((p-1)max(mi)) of linear ring without blocking</p>
    <p>Total number of blocks b = bi</p>
  </div>
  <div class="page">
    <p>General principle:</p>
    <p>Blocked ring algorithm also works for MPI_Allgatherv on clustered system</p>
  </div>
  <div class="page">
    <p>Choosing the block size B:</p>
  </div>
  <div class="page">
    <p>Experimental resultsExperimental results</p>
    <p>Target systems</p>
    <p>NEC SX-8 - up to 30 nodes used</p>
    <p>Linux clusters with IB and Gig. Ethernet - 16 nodes, 24 nodes</p>
    <p>IBM Blue Gene/P - up to 4096 processes</p>
    <p>SiCortex 5832 - 5784 processes</p>
    <p>Comparison of blocked ring algorithm to standard ring:</p>
    <p>Performance</p>
    <p>Load balance</p>
    <p>Effect of block size B</p>
  </div>
  <div class="page">
    <p>Distributions</p>
    <p>p</p>
    <p>p</p>
    <p>p</p>
    <p>p</p>
    <p>p</p>
    <p>p</p>
    <p>m = c, c is Base Size</p>
    <p>m = pc, c is Base Size</p>
    <p>Comparable running times</p>
  </div>
  <div class="page">
    <p>SX-8, 30x1 processes</p>
    <p>p</p>
    <p>&gt; factor 10</p>
    <p>only  15% slower than MPI_Bcast</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page">
    <p>SX-8, 30x8 processes</p>
    <p>p</p>
    <p>&gt; factor 12</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page">
    <p>SX-8, 30x1 processes</p>
    <p>p</p>
    <p>Fixed B = 1MByte</p>
    <p>Same as broadcast distribution time</p>
  </div>
  <div class="page">
    <p>SX-8, 30x8 processes</p>
    <p>p</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page">
    <p>SX-8, 30x1 processes</p>
    <p>p</p>
    <p>Better pipelining!?</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page">
    <p>SX-8, 30x1 processes</p>
    <p>p</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page">
    <p>SX-8, 30x1 processes</p>
    <p>p</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page">
    <p>SX-8, 30x1 processes</p>
    <p>p</p>
    <p>Fixed B = 1MByte</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Yellow: idle time</p>
    <p>Blue: communication time</p>
    <p>Linux cluster, 96 processes</p>
    <p>p</p>
    <p>Linear ring</p>
    <p>Blocked ring</p>
  </div>
  <div class="page">
    <p>Linux cluster, 96 processes</p>
    <p>Fixed B = 32KByte</p>
    <p>p p</p>
  </div>
  <div class="page">
    <p>Linux cluster, varying number of processes</p>
    <p>p</p>
    <p>Fixed B = 32KByte</p>
  </div>
  <div class="page">
    <p>Blue Gene/P, 4096 processes</p>
    <p>Fixed B = 64KByte</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>SiCortex, 5784 processes</p>
    <p>Fixed B = 1MByte</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Linux cluster, 16x2 procs</p>
    <p>p</p>
    <p>Too small B</p>
    <p>Factor 2</p>
  </div>
  <div class="page">
    <p>Linux cluster, 16x2 procs</p>
    <p>p</p>
    <p>Too small B</p>
    <p>Too small B</p>
  </div>
  <div class="page">
    <p>Linux cluster, 16x2 procs</p>
    <p>p</p>
    <p>Little effect of block size B</p>
  </div>
  <div class="page">
    <p>Linux cluster, 16x2 procs</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>p</p>
    <p>Linux cluster, 16x2 procs</p>
    <p>Little effect of block size B</p>
  </div>
  <div class="page">
    <p>Linux cluster, 16x2 procs</p>
    <p>p</p>
    <p>Little/some effect of block size B</p>
    <p>Too large B</p>
  </div>
  <div class="page">
    <p>SummarySummary</p>
    <p>Simple, blocked linear ring algorithm for MPI_Allgatherv</p>
    <p>NEW? Observation not found in literature</p>
    <p>Large performance gains for large problems on different systems</p>
    <p>Good limit behavior: identical to linear ring for regular problems, similar to pipelined broadcast for extreme distributions</p>
    <p>Tuning of block size: dependent on data distribution, linear model inadequate, experimental work needed</p>
    <p>There are relationships between regular and irregular collectives (on processes and nodes) that can (sometimes) be exploited for design of new algorithms</p>
  </div>
</Presentation>
