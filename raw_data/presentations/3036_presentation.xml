<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Shape Segmentation and Applications Shape Segmentation and Applications</p>
    <p>in Sensor Networksin Sensor Networks</p>
    <p>Xianjin Zhu Rik Sarkar Jie Gao</p>
    <p>INFOCOM 2007</p>
  </div>
  <div class="page">
    <p>MotivationMotivation</p>
    <p>Common assumption: sensors are deployed uniformly randomly inside a simple region (e.g., square).</p>
    <p>In practice, can be complex.</p>
    <p>Obstacles (lakes, buildings)</p>
    <p>Terrain variation</p>
    <p>Degradation over time</p>
  </div>
  <div class="page">
    <p>Sensor Distribution in PracticeSensor Distribution in Practice</p>
    <p>Nodes are distributed in a geometric region with possible complex shape, with holes.</p>
  </div>
  <div class="page">
    <p>With holes or a complex shapeWith holes or a complex shape</p>
    <p>Some protocols may fail:</p>
    <p>Greedy forwarding: packets are</p>
    <p>greedily forward to the neighbor</p>
    <p>closest to the destination</p>
    <p>May get stuckWorks well</p>
    <p>Sparse, non-uniformDense uniform</p>
    <p>X</p>
    <p>Stuck</p>
    <p>Destination D</p>
  </div>
  <div class="page">
    <p>With holes or a complex shapeWith holes or a complex shape</p>
    <p>Some protocols have degraded performance</p>
    <p>Quad-tree type data storage hierarchy</p>
    <p>Data is hashed uniformly to the quads</p>
    <p>Empty Blocks</p>
    <p>Storage load</p>
  </div>
  <div class="page">
    <p>QuadQuad--Tree Type Hierarchy Tree Type Hierarchy</p>
    <p>Storage loadStorage load</p>
  </div>
  <div class="page">
    <p>Lesson Learned Lesson Learned</p>
    <p>Global geometric features affect many aspects of sensor networks.</p>
    <p>Affect system performance.</p>
    <p>Affect network design.</p>
    <p>Place base stations and</p>
    <p>avoid traffic bottleneck</p>
  </div>
  <div class="page">
    <p>How to Handle Complex Shape?How to Handle Complex Shape?</p>
    <p>Previous work</p>
    <p>Build problem specific virtual coordinate system</p>
    <p>(e.g., for routing)</p>
    <p>Redevelop every algorithm on virtual coordinate system</p>
    <p>Our approach: shape segmentation</p>
    <p>A unified approach to handle complex geometry</p>
    <p>Make existing protocols reusable</p>
  </div>
  <div class="page">
    <p>Sensor Field with Arbitrary ShapeSensor Field with Arbitrary Shape</p>
    <p>Density ranges from 7-12 neighbors/node</p>
  </div>
  <div class="page">
    <p>Simulation Results on SegmentationSimulation Results on Segmentation</p>
    <p>Density ranges from 7-12 neighbors/node Narrow necks</p>
  </div>
  <div class="page">
    <p>Our Approach: Shape SegmentationOur Approach: Shape Segmentation</p>
    <p>Segment the irregular field into nice pieces.</p>
    <p>Each piece has no holes, and has a relatively nice</p>
    <p>shape</p>
    <p>Apply existing algorithms inside each piece.</p>
    <p>Existing protocols are reusable</p>
    <p>Integrate the pieces together with</p>
    <p>a problem-dependent structure.</p>
  </div>
  <div class="page">
    <p>The rest of the talk The rest of the talk</p>
    <p>Segmentation algorithm</p>
    <p>Implementation issues</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>Flow Complex in continuous domain  Distance function h(x)=min{||x-p||2: p on boundary}  Medial axis: a set of points with at least two closest</p>
    <p>points on the boundary 0</p>
    <p>Local max</p>
    <p>p1</p>
    <p>H(p1)</p>
    <p>s1</p>
    <p>H(s1)</p>
    <p>s2 s3</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)</p>
    <p>Local max</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>s1 s2 s3</p>
    <p>p1</p>
    <p>p2</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)</p>
    <p>Local max</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>s1 s2 s3</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)</p>
    <p>Local max</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>s1 s2 s3</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)</p>
    <p>Local max</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>s1 s2 s3</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)</p>
    <p>Local max</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>s1 s2 s3</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)</p>
    <p>Local max</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
    <p>s1 s2 s3</p>
  </div>
  <div class="page">
    <p>Segmentation with Flow ComplexSegmentation with Flow Complex</p>
    <p>Flow Complex in Continuous domain  Flow direction: the direction that h(x) increases fastest  Sinks: local maximum, no flow direction (s1 &amp; s3 here)  Segments: set of points flow to the same sink</p>
    <p>Local max</p>
    <p>Naturally partition</p>
    <p>along</p>
    <p>narrow necks</p>
    <p>Reference: flow complex [Dey, Giesen, Goswami, WADS03]</p>
  </div>
  <div class="page">
    <p>No global view, no centralized authority</p>
    <p>No location, only connectivity information</p>
    <p>Distances are approximated by hop count</p>
    <p>Robust to inaccuracy, packet loss, etc.</p>
    <p>Goal: a distributed and robust segmentation</p>
    <p>algorithm.</p>
    <p>Implementation ChallengesImplementation Challenges</p>
  </div>
  <div class="page">
    <p>Algorithm OutlineAlgorithm Outline</p>
  </div>
  <div class="page">
    <p>Step 1: Compute the medial axisStep 1: Compute the medial axis</p>
    <p>Boundary nodes flood inward simultaneously.</p>
    <p>Nodes record: minimum hop count &amp;</p>
    <p>closest intervals on the boundary</p>
    <p>Medial axis: more than two closest intervals</p>
    <p>Green: medial axis Red: sinks</p>
    <p>Reference: Boundary Detection [Wang, Gao, Mitchell, MobiCom06]</p>
    <p>min_hop=2</p>
  </div>
  <div class="page">
    <p>Step2: Compute the flowStep2: Compute the flow</p>
    <p>Flow direction: a pointer to a neighbor with a higher hop count from the same boundary  Prefer neighbor with the most</p>
    <p>symmetric interval</p>
    <p>Sinks must be on the medial axis.</p>
    <p>Network is organized into forests, sinks are roots</p>
    <p>Nodes are classified into segments by their sinks.</p>
    <p>Too many segments!</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>Example of Heavy FragmentationExample of Heavy Fragmentation</p>
    <p>Fragmentation problem becomes severe with</p>
    <p>parallel boundaries.</p>
  </div>
  <div class="page">
    <p>Step3: Merge nearby sinksStep3: Merge nearby sinks</p>
    <p>Nearby sinks with similar hop count to the</p>
    <p>boundaries are merged (together with their</p>
    <p>segments).</p>
  </div>
  <div class="page">
    <p>Step3: Merge nearby sinksStep3: Merge nearby sinks</p>
    <p>Nearby sinks with similar hop count to the</p>
    <p>boundaries are merged (together with their</p>
    <p>segments).</p>
    <p>Segmentation granularity: |Hmax-Hmin|&lt; t</p>
    <p>t=2 t=4</p>
  </div>
  <div class="page">
    <p>Step4: Final cleanStep4: Final clean--upup</p>
    <p>Merge orphan nodes with nearby segments</p>
    <p>Orphan nodes: local maximum and nodes that</p>
    <p>flow into them</p>
    <p>Noise, orphan nodes</p>
  </div>
  <div class="page">
    <p>Final ResultFinal Result</p>
  </div>
  <div class="page">
    <p>Properties of SegmentationProperties of Segmentation</p>
    <p>A few fat segments</p>
    <p>Further merging only hurts fatness</p>
    <p>r</p>
    <p>R</p>
    <p>fatness = ____________________</p>
    <p>min enclosing ball radius</p>
    <p>max inscribing ball radius</p>
    <p>= r</p>
    <p>R</p>
    <p>__</p>
    <p>The bigger the fatter.</p>
  </div>
  <div class="page">
    <p>ConclusionConclusion</p>
    <p>A unified approach handling complex shape in sensor networks.</p>
    <p>A good example to extract high-level geometry from connectivity information.</p>
    <p>Network self-organizes by local operations.</p>
  </div>
  <div class="page">
    <p>Thank you!Thank you!</p>
    <p>Questions ?</p>
    <p>Email: {xjzhu, rik, jgao}@cs.sunysb.edu</p>
  </div>
</Presentation>
