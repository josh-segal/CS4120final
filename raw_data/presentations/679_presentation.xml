<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FVD: A High-Performance Virtual Machine Image Format for Cloud</p>
    <p>Chunqiang (CQ) Tang</p>
    <p>IBM T.J. Watson Research Center ctang@us.ibm.com</p>
    <p>June 2011</p>
  </div>
  <div class="page">
    <p>Virtual Disk Benefits from Copy-on-write, Copy-on-read, and Adaptive Prefetching</p>
    <p>A new VM's virtual disk is created as a copy-on-write image based on a shared, read-only image template</p>
    <p>Copy-on-read and adaptive prefetching avoid repeatedly read unmodified data from network attached storage</p>
  </div>
  <div class="page">
    <p>Challenges in Achieving High Performance for a Virtual Disk</p>
    <p>Why a virtual disk is slower than a</p>
    <p>physical disk?</p>
    <p>Address translation destroies locality</p>
    <p>Overhead in reading metadata</p>
    <p>Overhead in writing metadata</p>
    <p>Overhead of a host file system</p>
    <p>Implementation inefficiency, e.g., blocking metadata access</p>
    <p>How QCOW2 works</p>
  </div>
  <div class="page">
    <p>FVD Uses a Bitmap to Implement Copy-onwrite, Copy-on-read, and Adaptive Prefetching</p>
    <p>No address translation and hence keeps data locality</p>
    <p>Small bitmap size allows easy caching (2MB for 1TB disk)</p>
    <p>Several techniques eliminate metadata writes in common cases  Fee write to expanded disk space  Free write to zero-filled blocks  Free copy-on-read and prefetching  Zero overhead once prefetching</p>
    <p>finishes</p>
    <p>Benefit: a CoW FVD image can be as efficient as a raw image  due to minimal metadata reads and writes,</p>
    <p>and no address translation</p>
  </div>
  <div class="page">
    <p>FVD Can Optionally Uses a Lookup Table to Support Compact Image</p>
    <p>A chunk consists of multiple blocks</p>
    <p>One entry of the lookup table maps the address of a chunk</p>
    <p>One bit in the bitmap indicates whether a block was written before</p>
    <p>Benefit: small metadata size  FVD 6MB vs. QCOW2 128MB for 1TB disk</p>
  </div>
  <div class="page">
    <p>Journal and Snapshot in FVD</p>
    <p>Journal allows efficient metadata updates  batching, sequential writes, concurrent writes</p>
    <p>No journal cleaning overhead</p>
    <p>The refcount table supports efficientinternal snapshots  Creating/deleting a snapshot amounts to</p>
    <p>incrementing/decrementing reference counts</p>
    <p>More efficient thant QCOW2 snapshot  The refcount table is never updated during normal</p>
    <p>execution of VM</p>
  </div>
  <div class="page">
    <p>Experimental Result</p>
    <p>FVD is implemented in KVM/QEMU 0.12.30</p>
    <p>The throughput of FVD is 249% higher than that of QCOW2 when using the PostMark benchmark to create files</p>
  </div>
  <div class="page">
    <p>Copy-on-read Helps Reduce Network Traffic</p>
  </div>
  <div class="page">
    <p>Summary of FVD  FVD on-disk metadata  bitmap implements copy-on-write, copy-on-read, and adaptive prefetching</p>
    <p>lookup table optionally implements compact image (i.e., address translation)</p>
    <p>journal allows efficientmetadata updates</p>
    <p>refcount table implements efficient internal snapshot</p>
    <p>Other Features of FVD</p>
    <p>Storage thin provisioning without a host file system</p>
    <p>Encryption</p>
    <p>Fully asynchronous implementation</p>
    <p>Autoated testing with deterministic replay for debugging</p>
    <p>Source code available at https://sites.google.com/site/tangchq/qemu-fvd</p>
    <p>Longer version of the paper available at https://sites.google.com/site/tangchq/publications</p>
  </div>
</Presentation>
