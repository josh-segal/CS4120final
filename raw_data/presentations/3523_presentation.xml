<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Vetting Single Sign-On SDK Implementations</p>
    <p>via Symbolic Reasoning</p>
    <p>Ronghai Yang1,2, Wing Cheong Lau1, Jiongyi Chen1, Kehuan Zhang1</p>
  </div>
  <div class="page">
    <p>Strong Adoption of Single Sign-On Services</p>
    <p>Janrain Report: 75% of users prefer SSO and 91% of them are</p>
    <p>satisfied</p>
    <p>405 out of Top-1000 web applications support SSO services [1]</p>
    <p>1372 out of 4151 Android apps support SSO services [2]</p>
    <p>[1] Yang, R., Li, G., Lau, W. C., Zhang, K., and Hu, P. Model-based security testing: An empirical study on OAuth2.0 implementations. In AsiaCCS (2016) [2] Wang, H., Zhang, Y., Li, J., Liu, H., Yang, W., Li, B., and Gu, D. Vulnerability assessment of OAuth implementations in Android applications. In ACSAC (2015)</p>
  </div>
  <div class="page">
    <p>Basic Interactions of Single Sign-On (SSO)</p>
    <p>Three Parties: the third-party application (Relying Party, RP), the</p>
    <p>Identity Provider (IdP) and the client device</p>
    <p>RP server User IdP serverWho are you? Tell IMDb my identity</p>
    <p>This is your identity proofThis is my identity proof</p>
    <p>Welcome, Ronghai!</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>https://www.facebook.com/dialog/oauth? client_id=127059960673829&amp; response_type=code&amp; redirect_uri=https://secure.imdb.com/oauth/facebook&amp; scope=email,publish_stream,user_about_me&amp; state=13ce</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>grant permissions</p>
    <p>https://secure.imdb.com/oauth/facebook? code=AQD-nc...PqjeZC4HDFzR3RWjOp9b3M&amp; state=13ce#_=_</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>grant permissions</p>
    <p>https://graph.facebook.com/v2.3/oauth/access_token? client_id=127059960673829&amp; redirect_uri=https://secure.imdb.com/oauth/facebook&amp; client_secret={client-secret} &amp; code=AQD-nc...PqjeZC4HDFzR3RWjOp9b3MoS4oA</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>grant permissions</p>
    <p>{&quot;token_type&quot;:&quot;Bearer&quot;, &quot;expires_in&quot;:7104, &quot;access_token&quot;:&quot;CAABzj3PSN8C6OELrcr44hSlITO6}</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>grant permissions</p>
    <p>{ &quot;id&quot;: &quot;100008512695261&quot;, &quot;birthday&quot;: &quot;02/01/1991&quot;, &quot;email&quot;: &quot;alicesinglesignon\u0040gmail.com&quot;, &quot;first_name&quot;: &quot;Alice&quot;, &quot;gender&quot;: &quot;female&quot;, &quot;last_name&quot;: &quot;Sso&quot;, &quot;name&quot;: &quot;Alice Sso&quot;,</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>grant permissions</p>
  </div>
  <div class="page">
    <p>Single Sign-On Protocol Flow</p>
    <p>RP server User IdP server1). Req0: User visits App</p>
    <p>grant permissions</p>
  </div>
  <div class="page">
    <p>Complication of Single Sign-On</p>
    <p>Multi-party systems</p>
    <p>Multi-step operations</p>
    <p>SDKs are provided to help RP developers to</p>
    <p>implement SSO services</p>
  </div>
  <div class="page">
    <p>SDK Usages</p>
    <p>SDKs are provided not only by IdPs but</p>
    <p>often by 4th-party SDK providers (for</p>
    <p>cross-IdP support of an application)</p>
    <p>If the SDK is not secure, any</p>
    <p>application using the SDK will be</p>
    <p>insecure!</p>
    <p>SDK Names # of Downloads</p>
    <p>Facebook SDK 602,297</p>
    <p>Request-OAuthLib 4,785,778</p>
    <p>OAuthLib 6,476,894</p>
    <p>Sinaweibopy 28,019</p>
    <p>OAuth2Lib Not found</p>
    <p>Rauth 487,275</p>
    <p>Python-weixin 1,404</p>
    <p>BoxSDK 77,074</p>
    <p>Renrenpy 10,387</p>
    <p>Douban-client 30,601</p>
    <p>*: The number is retrieved from PyPI statistics and is a conservative estimate. The installed number for many IdPs (e.g., Facebook, Wechat, Renren, Douban), may not be included in the statistics.</p>
  </div>
  <div class="page">
    <p>Possible Attacks due to Vulnerabilities in SDKs</p>
    <p>Many attacks are due to the incorrect implementations of SDKs</p>
    <p>o For example, the SDK does not check the existence of access token (profile vulnerability</p>
    <p>[3,10])</p>
    <p>RP server User IdP serverWho are you? Tell IMDb my identity</p>
    <p>Access_Token + UIDUID</p>
    <p>Welcome, Ronghai !</p>
    <p>[3] Yang, R., Lau W.C., Breaking and fixing mobile app authentication with OAuth2.0-based protocols In ACNS (2017) [10] Yang, R., Lau, W. C., and Liu, T. Signing into one billion mobile app accounts effortlessly with Oauth 2.0. In BlackHat Europe (2016)</p>
  </div>
  <div class="page">
    <p>Prior Work on SSO Security</p>
    <p>Formal analysis of SSO protocol standards, including model checking</p>
    <p>[4,5,6] and cryptographic proof [7]</p>
    <p>[4] Bai, G., Lei, J., Meng, G., Venkatraman, S. S., Saxena, P., Sun, J., Liu, Y., and Dong, J. S. AUTHSCAN: automatic extraction of</p>
    <p>web authentication protocols from implementations. In NDSS (2013)</p>
    <p>[5] D. Fett, R. Kusters, and G. Schmitz. An expressive model for the web infrastructure: Defining and application to the Brower</p>
    <p>ID SSO system. In S&amp;P (2014)</p>
    <p>[6] Fett, D., Kusters, R., and Schmitz, G. A comprehensive formal security analysis of Oauth 2.0 In CCS (2016)</p>
    <p>[7] Chari, S., Jutla, C. S., and Roy, A. Universally composable security analysis of Oauth v2.0</p>
  </div>
  <div class="page">
    <p>Prior Work on SSO Security (contd)  Real-world vulnerability discovery using network traffic analysis [8,9,10] or</p>
    <p>Model-based automated testing [11,12]</p>
    <p>Discovery of hidden assumptions required for the proper use of SDK [13]</p>
    <p>[8] Wang, R., Chen, S., and Wang, X., Signing Me into your Accounts through Facebook and Google: a Traffic-Guided Security Study on</p>
    <p>Commercially Deployed Single-Sign-On Web Services, IEEE S&amp;P (2012)</p>
    <p>[9] Wang, H., Zhang, Y., Li, J., Liu, H., Yang, W., Li, B., and Gu, D. Vulnerability assessment of OAuth implementations in Android applications.</p>
    <p>ACSAC (2015)</p>
    <p>[10] Yang, R., Lau, W. C., and Liu, T. Signing into one billion mobile app accounts effortlessly with Oauth 2.0., BlackHat Europe (2016)</p>
    <p>[11] Ferry, E., ORaw, J., and Curran, K. Security evaluation of the Oauth 2.0 framework, Inf. &amp; Comput. Security (2015)</p>
    <p>[12] Yang, R., Li, G., Lau, W. C., Zhang, K., Hu, P. Model-based security testing: An empirical study on OAuth2.0 implementations, AsiaCCS (2016)</p>
    <p>[13] Wang, R., Zhou, Y., Chen, S., Qadeer, S., Evans, D., and Gurevich, Y. Explicating SDKs: Uncovering assumptions underlying secure</p>
    <p>authentication and authorization, USENIX Security (2013)</p>
  </div>
  <div class="page">
    <p>Prior Work on SSO Security (summary)</p>
    <p>Formal analysis of SSO protocol standards, including model checking [4,5,6]</p>
    <p>and cryptographic proof [7]</p>
    <p>Real-world vulnerability discovery using network traffic analysis [8,9,10] or</p>
    <p>model-based automated testing [11,12]</p>
    <p>Discovery of hidden assumptions required for the proper use of SDK [13]</p>
    <p>Little effort has been devoted to a systematic testing of implementation</p>
    <p>flaws in SSO SDK internals</p>
  </div>
  <div class="page">
    <p>Goal &amp; Scopes</p>
    <p>Is an SSO SDK vulnerable by itself ?</p>
    <p>o Work properly under whatever inputs</p>
    <p>from the attacker?</p>
    <p>Focus on logic vulnerabilities of the</p>
    <p>RP server SDK internals</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>The attacker can lure the victim to visit a malicious RP (mRP) server (to obtain a</p>
    <p>valid access token of the victims IdP account, but binding only to the mRP)</p>
    <p>The attacker can setup an external machine and use his/her own account to</p>
    <p>freely communicate with the client, the IdP server, and the RP server</p>
    <p>When HTTPS is NOT used, the attacker can eavesdrop victims communication</p>
  </div>
  <div class="page">
    <p>Roles of S3KVetter</p>
    <p>Single Sign-on SDK Vetter (S3KVetter)</p>
    <p>o Interact with the RP server and the IdP server as if it is the client device</p>
    <p>o Communicate with the RP server on behalf of the attacker</p>
    <p>RP server</p>
    <p>udy Open-source SDK</p>
    <p>Under study</p>
    <p>S3KVetter Remote IdP</p>
    <p>Server</p>
    <p>Client device</p>
    <p>Attacker</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Extract all the program paths from</p>
    <p>the SDK (via concolic execution)</p>
    <p>Define the security properties (i.e.,</p>
    <p>expected behaviors) for SSO SDKs</p>
    <p>Check whether the security</p>
    <p>properties hold on every program</p>
    <p>path (via theorem prover) Violations?</p>
    <p>Security Property</p>
    <p>Theorem Prover Satisfiability Modulo Theories</p>
    <p>Extract Paths in SDK</p>
  </div>
  <div class="page">
    <p>Technical Challenges</p>
    <p>Multiple-party communication and multi-lock-step operations</p>
    <p>o Some nonce parameters (e.g. code, state) can only be used for once</p>
    <p>o Some parameters are remotely generated and consumed by the remote server</p>
    <p>Extra effort required to create/manage inputs to properly feed SSO SDKs</p>
  </div>
  <div class="page">
    <p>Issues of Existing Approaches for performing Symbolic Execution on Multi-party Systems</p>
    <p>Run the external functions (of SDK) concretely</p>
    <p>o Remote IdP API imposes limit on API access rate</p>
    <p>Return a random value of the same return type of external functions</p>
    <p>without execution, e.g., DART</p>
    <p>o This causes false positives to the testing results</p>
    <p>Symbolically explore the external functions, e.g., KLEENet</p>
    <p>o We do not have access to the source code of the IdP server</p>
  </div>
  <div class="page">
    <p>S3KVetter System Architecture</p>
  </div>
  <div class="page">
    <p>Scheduling Request Orders</p>
    <p>Use a general and simple scheduling algorithm</p>
    <p>Interest in authentication property</p>
    <p>o Completed by the last request only</p>
  </div>
  <div class="page">
    <p>Coordinating Multi-party Communication</p>
    <p>S3KVetter simulates and modifies the</p>
    <p>external world for the SDK</p>
    <p>o S3KVetter generates a nonce parameter</p>
    <p>internally, on behalf of IdP</p>
    <p>o Use this nonce parameter, if it satisfies</p>
    <p>the conditions of the path to be explored</p>
    <p>o Locally solves the condition, if the nonce</p>
    <p>parameters does not satisfy the condition</p>
  </div>
  <div class="page">
    <p>Example Symbolic Predicate Tree of SDK</p>
  </div>
  <div class="page">
    <p>Translate the Predicate Tree</p>
    <p>Represent the predicate tree with SMT-Lib v2.0</p>
    <p>not (= Req0Flag 0) and (str.prefixof https Req1[uri]) and str.contains uri code and</p>
    <p>or not (= Req0Flag 0) and not (str.prefixof https Req1[uri]) and</p>
    <p>or</p>
  </div>
  <div class="page">
    <p>Formulation of Desired Security Properties</p>
    <p>Key observation: An RP server should login the user if and only if the</p>
    <p>exact user has actually authorized this specific RP</p>
  </div>
  <div class="page">
    <p>Results Overview</p>
    <p>Discover 7 types of vulnerabilities on</p>
    <p>o Four types are previously unknown</p>
    <p>Consequences:</p>
    <p>o Hijack users account in the RP, e.g. due to</p>
    <p>Access Token injection</p>
    <p>o Sniff users activities in the RP due to Use</p>
    <p>before-Assignment of state</p>
    <p>Violations?</p>
    <p>Security Property</p>
    <p>Theorem Prover Satisfiability Modulo Theories</p>
    <p>Extract Paths in SDK</p>
  </div>
  <div class="page">
    <p>Statistics of SDK under Study</p>
    <p>Compared to the Baseline, S3KVetter can achieve 2%-13% higher statement coverage</p>
    <p>and 2%-19% higher branch coverage for the SSO SDKs under test</p>
    <p>Discover 8 additional vulnerabilities in ten SSO SDKs</p>
  </div>
  <div class="page">
    <p>Summary of Discovered Vulnerabilities</p>
    <p>Use-before-Assignment of State variable =&gt; Allow sniffing of Victim activities via CSRF attacks</p>
    <p>Bypass MAC key, Refresh Token injection and Access Token Injection =&gt; Attacker can hijack Victims RP account.</p>
    <p>These vulnerabilities have been fixed after we informed the developers of the corresponding SDKs.</p>
  </div>
  <div class="page">
    <p>Example Vulnerability in OAuthLib: Access Token Injection</p>
    <p>Root cause of access token injection</p>
    <p>An attacker can remotely inject any access token of her choice</p>
    <p>https://RP.com?state=xxx&amp;code=fake code &amp;access token=victims access token at mRP</p>
  </div>
  <div class="page">
    <p>Example Exploit for Access Token Injection</p>
    <p>Assume the attacker has Alices access</p>
    <p>token</p>
    <p>o Setup a malicious RP, and lure the victim to</p>
    <p>login</p>
    <p>o Inject victims access token into the RP server</p>
    <p>The RP can obtain victim users resource</p>
    <p>hosted in IdP</p>
    <p>The attacker can log into the RP as the</p>
    <p>victim user</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Measurement study and new findings</p>
    <p>o In-depth security analysis on ten popular SSO SDKs</p>
    <p>o 7 types of serious logic vulnerabilities, four are previously unknown</p>
    <p>Vulnerability detection for multi-party systems</p>
    <p>o Symbolizing request orders &amp; multi-party coordination</p>
    <p>o Other usages: Payment system, etc.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Ronghai Yang1,2, Wing Cheong Lau1, Jiongyi Chen1 and Kehuan Zhang1</p>
  </div>
</Presentation>
