<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BScout: Direct Whole Patch Presence Test for Java Executables</p>
    <p>Jiarun Dai, Yuan Zhang, Zheyue Jiang, Yingtian Zhou, Junyan Chen,</p>
    <p>Xinyu Xing*, Xiaohan Zhang, Xin Tan, Min Yang, Zhemin Yang</p>
    <p>Fudan University *Pennsylvania State University</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Vulnerabilities in open-source libs/projects could be propagated to closed-source software</p>
    <p>Open-source libs/projects</p>
    <p>Known Vulnerabilities</p>
    <p>Closed-source Software</p>
    <p>Integrated or Customized</p>
    <p>Affect May Affect Research Problem: To check whether a given closedsource software is affected by known vulnerabilities</p>
  </div>
  <div class="page">
    <p>Patch Presence Test</p>
    <p>Check the presence of a patch in target software</p>
    <p>Open-source libs/projects</p>
    <p>Known Vulnerabilities</p>
    <p>Closed-source Software</p>
    <p>Propagated or Customized</p>
    <p>Affect May Affect</p>
    <p>Patch Presence Test Tool</p>
    <p>Security Patch</p>
  </div>
  <div class="page">
    <p>Target Users</p>
    <p>Government Agents</p>
    <p>Enterprise Users</p>
    <p>Security Companies</p>
    <p>Developers &amp;Testers</p>
    <p>Third-party users of closed-source product</p>
    <p>Security Analyst</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>1) Need to Perform Source-to-Binary Analysis  Different Language layers  Therefore, we need to perform a hard cross-layer code equivalence test</p>
    <p>Source code Bytecode</p>
    <p>Equivalent</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>2) Security patches may only introduce minor changes  Example: CVE-2018-9474, move only one line of code  Thus, we need fine-grained detection methods</p>
    <p>PATCH</p>
    <p>CVE-2018-9474</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>3) Test closed-source targets may be customized from opensource counterparts  Example: Android ROM, Linux Kernel  Thus, patch presence test should be resilient to code customization</p>
    <p>Android Framework (open-source)</p>
    <p>Vendors</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Customize</p>
  </div>
  <div class="page">
    <p>BScout</p>
    <p>BScout: Direct Whole Patch Presence Test for Java Executables  Directly test presence of the whole patch in Java Bytecode from Source</p>
    <p>.Smali</p>
    <p>Closed-source Software</p>
    <p>Smali code</p>
    <p>Convert Patched open-source</p>
    <p>libs/projects</p>
    <p>Unpatched open-source libs/projects</p>
    <p>.Java</p>
    <p>.Java</p>
    <p>.Diff</p>
    <p>Patch diff</p>
    <p>Key Idea-1: Cross-level features to bridge the gap between source and binary.</p>
  </div>
  <div class="page">
    <p>BScout</p>
    <p>BScout: Direct Whole Patch Presence Test for Java Executables  Directly test presence of the whole patch in Java Bytecode from Source</p>
    <p>iget-object v6, p0, L..ActivityManagerService;-&gt;mActivityManager:L..IActivityManager; iget-object v7, p1, L..ApplicationInfo;-&gt;packageName:Ljava/lang/String; const/4 v8, 0x0 invoke-interface {v6, v7, p2, v8}, L..IActivityManager;-&gt;bindBackupAgent(L..String;II)Z move-result v6 if-eqz v6, :cond_b1</p>
    <p>iget-object v6, p0, L..ActivityManagerService;-&gt;mActivityManager:L..IActivityManager; invoke-interface {v6, p1, p2}, L..IActivityManager;-&gt;bindBackupAgent(L..ApplicationInfo;I)Z move-result v6 if-eqz v6, :cond_b1</p>
    <p>Source code Lines</p>
    <p>Bytecode Line</p>
    <p>Bytecode Line</p>
    <p>Bytecode block</p>
    <p>Source code line</p>
    <p>Bytecode block</p>
    <p>Learning-based</p>
    <p>Line Segmentation</p>
    <p>Bytecode</p>
    <p>Key Idea-2: Perform fine-grained line-level matching techniques.</p>
  </div>
  <div class="page">
    <p>BScout</p>
    <p>BScout: Direct Whole Patch Presence Test for Java Executables  Directly test presence of the whole patch in Java Bytecode from Source</p>
    <p>Post-patch source code</p>
    <p>Target Binary</p>
    <p>Pre-patch source code</p>
    <p>Key Idea-3: Utilize pre-/post-patch code to neutralize customization.</p>
  </div>
  <div class="page">
    <p>Workflow</p>
    <p>Post-patch source code</p>
    <p>Target Binary</p>
    <p>Pre-patch source code</p>
    <p>Source code</p>
    <p>Feature Lines</p>
    <p>Bytecode</p>
    <p>Feature Lines</p>
    <p>Source code</p>
    <p>Feature Lines</p>
    <p>(1) Learning-based Line Segmentation</p>
    <p>Post-patch</p>
    <p>Line-to-Line Map</p>
    <p>Pre-patch</p>
    <p>Line-to-Line Map</p>
    <p>(2) Line-level Correlative Analysis</p>
    <p>Patch Presence</p>
    <p>Test Result Patch diff</p>
    <p>(3) Patch-derived Differential Analysis</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Dataset of Android ROMs 150 Android Framework CVEs(2015.8 ~ 2019.7)</p>
    <p>Google, Xiaomi, Meizu, Vivo, Oppo, Samsung</p>
    <p>Dataset of Java Apps 15 CVEs of 11 popular 3rd-party libraries</p>
  </div>
  <div class="page">
    <p>Empirical Study</p>
    <p>Understand Real-world Patch Application Practice</p>
    <p>Oppo, Vivo, Samsung)</p>
  </div>
  <div class="page">
    <p>Empirical Study</p>
    <p>Q1: What is the average lag for different vendors to apply a patch?</p>
    <p>Take-away:</p>
    <p>(1) Google proactively applies patches before</p>
    <p>announcing the vulnerabilities to the</p>
    <p>public.</p>
    <p>(2) Third-party device manufactures apply</p>
    <p>patches relatively slowly.</p>
  </div>
  <div class="page">
    <p>Empirical Study</p>
    <p>Q2: Do vendors patch vulnerabilities for one model but ignore another?</p>
    <p>Ill-managed Model: models forgotten by vendors to patch some vulnerabilities Ill-managed CVE: vulnerabilities forgotten by vendors to be patched</p>
    <p>Take-away:</p>
    <p>All vendors (including Google) have</p>
    <p>ever patched a vulnerability on one</p>
    <p>model but forgot to patch the same</p>
    <p>vulnerability on another model.</p>
  </div>
  <div class="page">
    <p>Empirical Study</p>
    <p>Q3: Do vendors correctly set security patch level?</p>
    <p>Take-away:</p>
    <p>Every vendor including Google</p>
    <p>inevitably over-claims the security</p>
    <p>patch level in some of their</p>
    <p>devices.</p>
  </div>
  <div class="page">
    <p>Empirical Study</p>
    <p>Complexity of a security patch?</p>
    <p>Severity of a vulnerability?</p>
    <p>Code Customization?</p>
    <p>Q4: Which factors affect the application ratio for a security patch?</p>
    <p>Take-away:</p>
    <p>It seems vulnerability severity and</p>
    <p>patch complexity are not considered</p>
    <p>by vendors in applying patches, but</p>
    <p>code customization is an obvious</p>
    <p>obstacle.</p>
  </div>
  <div class="page">
    <p>THANKS Q&amp;A</p>
    <p>jrdai14@fudan.edu.cn</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Comparison with Function-level Similarity  Leverage Centroid[1] to measure function-level similarity  Pre-patch and post-patch versions of 471 patch-related functions</p>
    <p>When |  | &gt; threshold</p>
    <p>if  &gt; , then patch is absent, otherwise, patch is present</p>
    <p>Detection Strategy</p>
    <p>How to determine the threshold ?</p>
    <p>When the threshold increases, 1) the ratio of can give result drop dramatically, 2) while the ratio of can give correct result does not increase significantly</p>
    <p>[1] Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets. In ICSE14.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Comparison with Version Pinning  Leverage LibScout[1] and OSSPolice[2] to do version pinning  Reference Set: 215 unique ROMs compiled from different tags and</p>
    <p>branches of AOSP</p>
    <p>[2] Identifying Open-Source License Violation and 1-day Security Risk at Large Scale. In CCS17</p>
  </div>
  <div class="page">
    <p>status.line 2237 const/4 v3, 0x0 Iput-object v3, p0, . .line 2238 :try_start_c iget-object v6, p0, L..ActivityManagerService;&gt;mActivityManager:L..IActivityManager; iget-object v7, p1, L..ApplicationInfo;-&gt;packageName:Ljava/lang/String; const/4 v8, 0x0 invoke-interface {v6, v7, p2, v8}, L..IActivityManager;&gt;bindBackupAgent(L..String;II)Z</p>
    <p>Trained CRFs Model</p>
    <p>Instruction Segmentation</p>
    <p>.line 2237 const/4 Iput-object .line 2238 :try_start_c iget-object iget-object const/4 invoke-interface</p>
    <p>B E</p>
    <p>B M M E</p>
    <p>Split raw continuous .smali instructions into segments  Segment: instructions generated from same Java source line  Conditional Random Fields</p>
    <p>Sequence Labeling</p>
    <p>S: single instruction, B: begin of a segment, M: middle of a segment, E: end of a segment</p>
    <p>Learning-based Line Segmentation</p>
  </div>
  <div class="page">
    <p>iget-object v6, p0, L..ActivityManagerService;-&gt;mActivityManager:L..IActivityManager; iget-object v7, p1, L..ApplicationInfo;-&gt;packageName:Ljava/lang/String; const/4 v8, 0x0 invoke-interface {v6, v7, p2, v8}, L..IActivityManager;-&gt;bindBackupAgent(L..String;II)Z move-result v6 if-eqz v6, :cond_b1</p>
    <p>iget-object v6, p0, L..ActivityManagerService;-&gt;mActivityManager:L..IActivityManager; invoke-interface {v6, p1, p2}, L..IActivityManager;-&gt;bindBackupAgent(L..ApplicationInfo;I)Z move-result v6 if-eqz v6, :cond_b1</p>
    <p>Source code Lines</p>
    <p>Bytecode Line</p>
    <p>Bytecode Line</p>
    <p>Bytecode block</p>
    <p>Source code line</p>
    <p>Bytecode block</p>
    <p>Construct function-level line-to-line map between source code and bytecode  1) Determine whether a source code line and a bytecode block are</p>
    <p>equivalent</p>
    <p>Line-level Correlative Analysis</p>
  </div>
  <div class="page">
    <p>Construct function-level line-to-line map between source code and bytecode  2) Map all source code lines and instruction blocks in the scope of the</p>
    <p>whole method</p>
    <p>Sliding Window 0</p>
    <p>Sliding Window 1</p>
    <p>Source Method Smali Method</p>
    <p>Matching candidate scope for first unmatched line</p>
    <p>First Unmatched Line</p>
    <p>Matched Parts</p>
    <p>Matching Relationship</p>
    <p>Unmatched Parts</p>
    <p>Line-level Correlative Analysis</p>
  </div>
  <div class="page">
    <p>Use following presence test strategies for a patch</p>
    <p>Patch-derived Differential Analysis</p>
  </div>
</Presentation>
