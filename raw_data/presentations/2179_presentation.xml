<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Silver: A Scalable, Distributed Multiversioning, Always Growing (Ag) File System Michael Wei *^, Amy Tai #^, Chris Rossbach^, Ittai Abraham^, Udi Wieder^, Steven Swanson*, Dahlia Malkhi^ ^ VMware Research * University of California, San Diego # Princeton University</p>
  </div>
  <div class="page">
    <p>Storage Needs Over The Years</p>
    <p>u Early FS: Static Mapping u Hierarchy u Streaming  Sequential I/O is king u Crash consistency, Journaling u Versioning, Snapshotting, Cloning u Dedupe, Encryption</p>
  </div>
  <div class="page">
    <p>Distributing File Systems is hard</p>
    <p>u Most file systems are built to span a single device u Emerging file systems (zfs, btrfs) may span multiple devices</p>
    <p>but doesnt scale past a single machine u Distributed file systems scale but suffer from consistency</p>
    <p>issues u Read/write is simple</p>
    <p>u Advanced features like snapshotting, versioning and cloning often require locking, if supported at all</p>
  </div>
  <div class="page">
    <p>Redesign a distributed FS from the ground up</p>
    <p>u A log is an ideal substrate for a FS u Employed by many filesystems today,</p>
    <p>dating from LFS u What if we had a efficient, distributed log?</p>
  </div>
  <div class="page">
    <p>Distributed Log u Silver leverages a fault-tolerant, replicated distributed log u Previously described in Corfu [NSDI12], Tango [SOSP13] u Augmented with Replex [1]</p>
    <p>u [1] Replex: A Scalable, Highly Available Multi-Index Data Store Amy Tai, Michael Wei, Michael J. Freedman, Ittai Abraham and Dahlia Malkhi</p>
  </div>
  <div class="page">
    <p>A distributed shared log</p>
    <p>Write Scaling  Fast Updates</p>
    <p>Read Scaling  Fast Random Reads</p>
    <p>Strong Consistency  Snapshots</p>
  </div>
  <div class="page">
    <p>Streams 7</p>
  </div>
  <div class="page">
    <p>Backpointers 8</p>
  </div>
  <div class="page">
    <p>Replex 9</p>
  </div>
  <div class="page">
    <p>Log Operations u Reads</p>
    <p>u Random log read given offset</p>
    <p>u Random stream read given offset</p>
    <p>u Bulk read of entire or partial stream</p>
    <p>u Writes u Append to a particular stream</p>
    <p>u Queries u Get last address written to a stream</p>
    <p>u Trim u Releases the space used for an address</p>
    <p>u Entries are variably sized</p>
  </div>
  <div class="page">
    <p>Silver Architecture</p>
    <p>u Composed of streams u Metadata streams, represent files</p>
    <p>u Data streams, represent file data</p>
    <p>u Directory streams, represent directories</p>
    <p>u First stream is a root directory stream u Each stream records deltas, or changes to that</p>
    <p>stream u Every overwrite is an append of the delta</p>
  </div>
  <div class="page">
    <p>Silver Example</p>
    <p>/</p>
    <p>/ d</p>
  </div>
  <div class="page">
    <p>Silver Example</p>
    <p>/</p>
    <p>/ d</p>
    <p>foo</p>
    <p>foo m d</p>
    <p>foo</p>
  </div>
  <div class="page">
    <p>Silver Example</p>
    <p>/</p>
    <p>/ d</p>
    <p>foo</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc</p>
    <p>abc</p>
  </div>
  <div class="page">
    <p>Silver Example</p>
    <p>/</p>
    <p>/ d</p>
    <p>foo</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc</p>
    <p>def</p>
    <p>da def</p>
  </div>
  <div class="page">
    <p>Silver Example</p>
    <p>/</p>
    <p>/ d</p>
    <p>foo</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
    <p>read 4? -&gt; abc</p>
  </div>
  <div class="page">
    <p>Continuous Snapshots</p>
    <p>/ d</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
  </div>
  <div class="page">
    <p>Caching</p>
    <p>/ d</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
  </div>
  <div class="page">
    <p>Tiering</p>
    <p>/ d</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
    <p>NVM</p>
    <p>SSD</p>
    <p>HDD</p>
    <p>/ d</p>
    <p>foo m</p>
    <p>/ d</p>
  </div>
  <div class="page">
    <p>Clones (CoW)</p>
    <p>/</p>
    <p>/ d</p>
    <p>foo</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
    <p>/@4 d</p>
    <p>foo@4</p>
    <p>m foo@4</p>
    <p>da da ghi</p>
  </div>
  <div class="page">
    <p>Clones (CoW)</p>
    <p>/</p>
    <p>/ d</p>
    <p>foo</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
    <p>/@4 d</p>
    <p>foo@4</p>
    <p>m foo@4</p>
    <p>da da ghi</p>
  </div>
  <div class="page">
    <p>Checkpointing</p>
    <p>/ d</p>
    <p>foo m d</p>
    <p>foo da</p>
    <p>abc da def</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>u Corfu log built in Java u FUSE prototype over JNR u Simple: ~4,000 SLOC u Java limits performance measurements u Log microbenchmarks:</p>
    <p>u 60K appends/s, ~100k streams</p>
    <p>u 50ms to read a stream with 200 entries in a system with 100k streams (compared to 200ms+ with backpointers).</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>u Basic Ops: u Cloning any part of FS: &lt;1ms</p>
    <p>u Accessing clones: ~.5ms overhead</p>
    <p>u Snapshot access: ~2ms to access typical snapshot</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>u Merge metadata streams into directory streams u Leverage transactional interface of Corfu u Performance tuning: C/C++ implementation u Comparison against HDFS, Ceph, CalvinFS</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>u Silver is a file system architected from the ground up to take advantage of a efficient, distributed log</p>
    <p>u Distributed logs make it easy to support advanced operations such as multi-versioning, CoW clones, distributed caching and tiering while maintaining consistency</p>
    <p>u In future work, we hope to take our Java design, which has enabled a very rapid prototype to be built and translate it into a performant native design</p>
  </div>
</Presentation>
