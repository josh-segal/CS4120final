<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Split / Merge ! System Support for Elastic Execution ! in Virtual Middleboxes!</p>
    <p>Shriram RAJAGOPALAN Dan WILLIAMS</p>
    <p>Hani JAMJOOM Andrew WARFIELD</p>
    <p>IBM Research &amp; UBC IBM Research IBM Research UBC</p>
  </div>
  <div class="page">
    <p>The Problem</p>
  </div>
  <div class="page">
    <p>Elastic Applications Need Elastic Middleboxes</p>
    <p>Clients</p>
    <p>Elastic Application Tier</p>
    <p>Edge Switch</p>
    <p>Software Defined Network!</p>
    <p>...</p>
    <p>IDS/IPS Firewall LB VPN Accelerator</p>
    <p>Flows</p>
    <p>Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>Hotspots Cannot be Alleviated Quickly</p>
    <p>Apps</p>
    <p>M2 M1</p>
    <p>When M1 is overloaded, provision more middleboxes to serve new flows</p>
    <p>Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>Scaling Inefficiencies Lead to Poor Utilization</p>
    <p>Apps</p>
    <p>In the worst case, active flows in each instance delay scale-in</p>
    <p>M1 M3 M4 M2 Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>The Insight</p>
  </div>
  <div class="page">
    <p>Flow State is Naturally Partitioned</p>
    <p>Apps</p>
    <p>M1 Flow Table</p>
    <p>Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>Enabling Elasticity in Virtual Middleboxes</p>
    <p>M Flow Table</p>
    <p>Dynamic partitioning of flow states among replicas enables elastic execution</p>
    <p>Apps</p>
    <p>M Flow Table Virtual</p>
    <p>Middleboxes</p>
  </div>
  <div class="page">
    <p>Understanding the State Inside a Middlebox</p>
    <p>Middlebox VM</p>
    <p>A pp</p>
    <p>lic at</p>
    <p>io n</p>
    <p>Lo gi</p>
    <p>c</p>
    <p>Input! ( Flows )!</p>
    <p>Output!</p>
  </div>
  <div class="page">
    <p>Understanding the State Inside a Middlebox</p>
    <p>Middlebox VM</p>
    <p>A pp</p>
    <p>lic at</p>
    <p>io n</p>
    <p>Lo gi</p>
    <p>c</p>
    <p>Flow Table! Key! Value!</p>
    <p>Input! ( Flows )!</p>
    <p>Output!</p>
  </div>
  <div class="page">
    <p>Understanding the State Inside a Middlebox</p>
    <p>Middlebox VM</p>
    <p>A pp</p>
    <p>lic at</p>
    <p>io n</p>
    <p>Lo gi</p>
    <p>c</p>
    <p>Flow Table! Key! Value!</p>
    <p>Threshold counters!</p>
    <p>Non-critical statistics!</p>
    <p>May be shared among replicas (coherent)!</p>
    <p>Input! ( Flows )!</p>
    <p>Output!</p>
  </div>
  <div class="page">
    <p>Understanding the State Inside a Middlebox</p>
    <p>Middlebox VM</p>
    <p>A pp</p>
    <p>lic at</p>
    <p>io n</p>
    <p>Lo gi</p>
    <p>c</p>
    <p>Flow Table! Key! Value!</p>
    <p>Threshold counters!</p>
    <p>Non-critical statistics!</p>
    <p>May be shared among replicas (coherent)!</p>
    <p>Caches! Other!processes! ...!</p>
    <p>Input! ( Flows )!</p>
    <p>Output!</p>
    <p>Internal to a replica (ephemeral)!</p>
  </div>
  <div class="page">
    <p>Our Contribution</p>
  </div>
  <div class="page">
    <p>Split/Merge: A State-Centric Approach to Elasticity</p>
    <p>Ephemeral!VM! Coherent!</p>
    <p>Partitionable ! (Flow States)!</p>
    <p>Virtual Network Interface!</p>
  </div>
  <div class="page">
    <p>Split/Merge: A State-Centric Approach to Elasticity</p>
    <p>Split!</p>
    <p>VM! 1! VM! 2! VM! 3!</p>
    <p>Replica 1! Replica 2! Replica 3!</p>
    <p>Ephemeral!VM! Coherent!</p>
    <p>Partitionable ! (Flow States)!</p>
    <p>Virtual Network Interface!</p>
  </div>
  <div class="page">
    <p>Split/Merge: A State-Centric Approach to Elasticity</p>
    <p>Split!</p>
    <p>VM! 1! VM! 2! VM! 3!Unchanged Interfaces!</p>
    <p>Merge!</p>
    <p>VM! 1! VM! 2!</p>
    <p>Replica 1! Replica 2! Replica 3!</p>
    <p>Replica 1! Replica 2+3!</p>
    <p>Coherency is maintained!</p>
    <p>Ephemeral!VM! Coherent!</p>
    <p>Partitionable ! (Flow States)!</p>
    <p>Virtual Network Interface!</p>
  </div>
  <div class="page">
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>FreeFlow</p>
    <p>A VMM based runtime that provides Split/Merge abstraction to applications!</p>
    <p>Developers modify application code to annotate flow state!</p>
    <p>FreeFlow takes care of the rest!!</p>
  </div>
  <div class="page">
    <p>FreeFlow: A Split/Merge Implementation</p>
    <p>VMM!VMM!</p>
    <p>VM! Replica 1!</p>
    <p>VM! Replica 2!</p>
    <p>Traffic to Middlebox!</p>
    <p>...!</p>
    <p>Flow 2! Flow 1!</p>
    <p>Ephemeral! Coherent!</p>
    <p>Partitionable ! (Flow States)!</p>
  </div>
  <div class="page">
    <p>Need to manage application state!</p>
    <p>VMM!VMM!</p>
    <p>VM! Replica 1!</p>
    <p>VM! Replica 2!</p>
    <p>Traffic to Middlebox!</p>
    <p>...!</p>
    <p>Flow 2! Flow 1!</p>
    <p>FreeFlow: A Split/Merge Implementation</p>
    <p>Fr ee</p>
    <p>Fl ow</p>
    <p>Li</p>
    <p>br ar</p>
    <p>y!</p>
    <p>Fr ee</p>
    <p>Fl ow</p>
    <p>Li</p>
    <p>br ar</p>
    <p>y!</p>
  </div>
  <div class="page">
    <p>Need to manage application state!</p>
    <p>Need to ensure flows are routed to the correct replica!</p>
    <p>FreeFlow: A Split/Merge Implementation</p>
    <p>VMM!VMM!</p>
    <p>VM! Replica 1!</p>
    <p>VM! Replica 2!</p>
    <p>Controller!</p>
    <p>Traffic to Middlebox!</p>
    <p>Flow 1! Flow 2!</p>
    <p>...!</p>
    <p>FreeFlow Module!</p>
    <p>Fr ee</p>
    <p>Fl ow</p>
    <p>Li</p>
    <p>br ar</p>
    <p>y!</p>
    <p>Fr ee</p>
    <p>Fl ow</p>
    <p>Li</p>
    <p>br ar</p>
    <p>y!</p>
  </div>
  <div class="page">
    <p>Need to manage application state!</p>
    <p>Need to ensure flows are routed to the correct replica!</p>
    <p>Need to decide when to split or merge a replica!</p>
    <p>FreeFlow: A Split/Merge Implementation</p>
    <p>VMM!VMM!</p>
    <p>VM! Replica 1!</p>
    <p>VM! Replica 2!</p>
    <p>Controller!</p>
    <p>Traffic to Middlebox!</p>
    <p>Flow 1! Flow 2!</p>
    <p>...!</p>
    <p>FreeFlow Module!</p>
    <p>Orchestrator !</p>
    <p>Fr ee</p>
    <p>Fl ow</p>
    <p>Li</p>
    <p>br ar</p>
    <p>y!</p>
    <p>Fr ee</p>
    <p>Fl ow</p>
    <p>Li</p>
    <p>br ar</p>
    <p>y!</p>
  </div>
  <div class="page">
    <p>Annotating State using FreeFlow API</p>
    <p>create_flow(flow_key, size)! delete_flow(flow_key)!! flow_state get_flow(flow_key)!</p>
    <p>put_flow(flow_key)! !</p>
    <p>flow_timer(flow_key, timeout, callback)!</p>
    <p>create_shared(key, size, cb) ! delete_shared(key)! !</p>
    <p>state get_shared(key, flags) // synch | pull |local! put_shared(key, flags) // synch | push |local!</p>
    <p>Partitioned State API</p>
    <p>Coherent State API</p>
  </div>
  <div class="page">
    <p>Forwarding Flows Correctly using OpenFlow</p>
    <p>OpenFlow Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>&lt;b&gt;! port 2!</p>
    <p>&lt;c&gt;! port 2!</p>
    <p>...!</p>
    <p>port 1! Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>...!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 1!</p>
    <p>Flow Table! &lt;a&gt;!</p>
    <p>...!</p>
    <p>port 2!</p>
    <p>Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;b&gt;! port 1!</p>
    <p>&lt;c&gt;! port 1!</p>
    <p>...!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 2!</p>
    <p>Flow Table!</p>
    <p>&lt;b&gt;!</p>
    <p>&lt;c&gt;!</p>
    <p>...!</p>
  </div>
  <div class="page">
    <p>Flow Migration</p>
    <p>OpenFlow Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>&lt;b&gt;! port 2!</p>
    <p>&lt;c&gt;! port 2!</p>
    <p>...!</p>
    <p>port 1! Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>...!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 1!</p>
    <p>Flow Table! &lt;a&gt;!</p>
    <p>...!</p>
    <p>port 2!</p>
    <p>Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;b&gt;! port 1!</p>
    <p>&lt;c&gt;! port 1!</p>
    <p>...!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 2!</p>
    <p>Flow Table!</p>
    <p>&lt;b&gt;!</p>
    <p>&lt;c&gt;!</p>
    <p>...!</p>
    <p>Migrating &lt;b&gt; from replica 2 to replica 1</p>
  </div>
  <div class="page">
    <p>Flow Migration</p>
    <p>OpenFlow Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>&lt;b&gt;! controller!</p>
    <p>&lt;c&gt;! port 2!</p>
    <p>...!</p>
    <p>port 1! Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>...!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 1!</p>
    <p>Flow Table! &lt;a&gt;!</p>
    <p>...!</p>
    <p>port 2!</p>
    <p>Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;c&gt;! port 1!</p>
    <p>!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 2!</p>
    <p>Flow Table!</p>
    <p>&lt;b&gt;!</p>
    <p>&lt;c&gt;!</p>
    <p>...!</p>
    <p>Suspend flow &amp; buffer packets</p>
  </div>
  <div class="page">
    <p>Flow Migration</p>
    <p>OpenFlow Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>&lt;b&gt;! controller!</p>
    <p>&lt;c&gt;! port 2!</p>
    <p>...!</p>
    <p>port 1! Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>...!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 1!</p>
    <p>Flow Table! &lt;a&gt;!</p>
    <p>&lt;b&gt;!</p>
    <p>...!</p>
    <p>port 2!</p>
    <p>Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;c&gt;! port 1!</p>
    <p>!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 2!</p>
    <p>Flow Table!</p>
    <p>&lt;c&gt;!</p>
    <p>...!</p>
    <p>Move flow state to target</p>
  </div>
  <div class="page">
    <p>Flow Migration</p>
    <p>OpenFlow Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>&lt;b&gt;! port 1!</p>
    <p>&lt;c&gt;! port 2!</p>
    <p>...!</p>
    <p>port 1! Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;a&gt;! port 1!</p>
    <p>&lt;b&gt;! port 1!</p>
    <p>!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 1!</p>
    <p>Flow Table! &lt;a&gt;!</p>
    <p>&lt;b&gt;!</p>
    <p>...!</p>
    <p>port 2!</p>
    <p>Virtual Switch!</p>
    <p>OpenFlow Table!</p>
    <p>&lt;c&gt;! port 1!</p>
    <p>!</p>
    <p>port 1!</p>
    <p>Middlebox Replica 2!</p>
    <p>Flow Table!</p>
    <p>&lt;c&gt;!</p>
    <p>...!</p>
    <p>Release buffer &amp; resume flow</p>
  </div>
  <div class="page">
    <p>Managing Coherent State</p>
    <p>create_shared(key, size, cb) ! delete_shared(key)! !</p>
    <p>state get_shared(key, flags) // synch | pull |local! put_shared(key, flags) // synch | push |local!</p>
  </div>
  <div class="page">
    <p>Managing Coherent State</p>
    <p>create_shared(foo, 4, NULL)!</p>
    <p>while (1)!</p>
    <p>!process_packet()!</p>
    <p>!p_foo = get_shared(foo, synch)!</p>
    <p>!val = (*p_foo)++!</p>
    <p>!put_shared(foo, synch)!</p>
    <p>!</p>
    <p>!if (val &gt; threshold)!</p>
    <p>! !bar()!</p>
    <p>Strong Consistency</p>
    <p>Middlebox applications rarely need strong consistency!</p>
    <p>Distributed lock for every update</p>
  </div>
  <div class="page">
    <p>Managing Coherent State</p>
    <p>create_shared(foo, 4, merge_fn)!</p>
    <p>while (1)!</p>
    <p>!process_packet()!</p>
    <p>!p_foo = get_shared(foo, local)!</p>
    <p>!val = (*p_foo)++!</p>
    <p>!put_shared(foo, local)!</p>
    <p>!</p>
    <p>!if (val &gt; threshold)!</p>
    <p>! bar()!</p>
    <p>! put_shared(foo, push)!</p>
    <p>Eventual Consistency</p>
    <p>Hi frequency local updates</p>
    <p>Periodic global updates</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation Overview</p>
    <p>Eliminating hotspots during scale-out!</p>
    <p>Fast and efficient scale-in!</p>
    <p>Split/Merge Bro during a load burst!</p>
  </div>
  <div class="page">
    <p>Hotspots Cannot be Alleviated Quickly</p>
    <p>Apps</p>
    <p>Virtual Middleboxes M2 M1</p>
    <p>When M1 is overloaded, provision more middleboxes to serve new flows</p>
  </div>
  <div class="page">
    <p>Eliminating Hotspots by Shedding Load</p>
    <p>M ax</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s) w/ FreeFlow</p>
    <p>M ax</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s)</p>
    <p>Time (s)</p>
    <p>w/o FreeFlow</p>
  </div>
  <div class="page">
    <p>vg L</p>
    <p>at en</p>
    <p>cy (m</p>
    <p>s) w/ FreeFlow</p>
    <p>A vg</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s)</p>
    <p>Time (s)</p>
    <p>w/o FreeFlow</p>
    <p>Eliminating Hotspots by Shedding Load</p>
  </div>
  <div class="page">
    <p>Scaling-In a Deployment : Best Case Scenario</p>
    <p>Apps</p>
    <p>Virtual Middleboxes M1 M3 M4 M2</p>
  </div>
  <div class="page">
    <p>Scaling-In a Deployment : Best Case Scenario</p>
    <p>Apps</p>
    <p>M1 M3 M2 Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>A vg</p>
    <p>S ys</p>
    <p>te m</p>
    <p>U til</p>
    <p>iz at</p>
    <p>io n</p>
    <p>(% )</p>
    <p>Time (s)</p>
    <p>Best Case</p>
    <p>Scaling-In: Best Case Scenario</p>
  </div>
  <div class="page">
    <p>Scaling-In using kill : Worst Case Scenario</p>
    <p>Apps</p>
    <p>M1 M3 M4 M2 Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>Scaling-In using kill : Worst Case Scenario</p>
    <p>Apps</p>
    <p>M1 M3 M4 M2 Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>Scaling-In using kill : Worst Case Scenario</p>
    <p>Apps</p>
    <p>In the worst case, active flows in each instance delay scale-in</p>
    <p>M1 M3 M4 M2 Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>A vg</p>
    <p>S ys</p>
    <p>te m</p>
    <p>U til</p>
    <p>iz at</p>
    <p>io n</p>
    <p>(% )</p>
    <p>Time (s)</p>
    <p>Best Case Worst Case (No FreeFlow)</p>
    <p>Scaling-In using kill : Slow &amp; Inefficient</p>
  </div>
  <div class="page">
    <p>Scaling-In using merge : Worst Case Scenario</p>
    <p>Apps</p>
    <p>M M M M Virtual Middleboxes</p>
    <p>FreeFlow</p>
  </div>
  <div class="page">
    <p>Scaling-In using merge : Worst Case Scenario</p>
    <p>Apps</p>
    <p>M M M M</p>
    <p>FreeFlow</p>
    <p>Virtual Middleboxes</p>
  </div>
  <div class="page">
    <p>Scaling-In using merge : Worst Case Scenario</p>
    <p>Apps</p>
    <p>M M M Virtual Middleboxes</p>
    <p>FreeFlow</p>
  </div>
  <div class="page">
    <p>Scaling-In using merge : Worst Case Scenario</p>
    <p>Apps</p>
    <p>FreeFlow consolidates state and flows from multiple replicas into one</p>
    <p>M 1+2+3+4</p>
    <p>Virtual Middleboxes</p>
    <p>FreeFlow</p>
  </div>
  <div class="page">
    <p>A vg</p>
    <p>S ys</p>
    <p>te m</p>
    <p>U til</p>
    <p>iz at</p>
    <p>io n</p>
    <p>(% )</p>
    <p>Time (s)</p>
    <p>Best Case Worst Case (No FreeFlow)</p>
    <p>Worst Case w/ FreeFlow</p>
    <p>Scaling-In using merge : Fast &amp; Efficient</p>
    <p>Merge</p>
  </div>
  <div class="page">
    <p>Ported the Event Engine to FreeFlow!</p>
    <p>Support for UDP, TCP/ HTTP protocols!</p>
    <p>SQL Injection Detection plugin!</p>
    <p>Splitting &amp; Merging Bro IDS</p>
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>FreeFlow</p>
  </div>
  <div class="page">
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>Handling a Load Burst</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
  </div>
  <div class="page">
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>Handling a Load Burst : No Scaling</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Without enough capacity to handle the load burst, the system performance degrades severely</p>
  </div>
  <div class="page">
    <p>Handling a Load Burst : Pre-Scaled</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Web Servers</p>
    <p>M1</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>Pre-scaled</p>
    <p>M2</p>
    <p>Two instances are provisioned apriori, enough to handle a load burst, if any</p>
  </div>
  <div class="page">
    <p>Web Servers</p>
    <p>M1</p>
    <p>SQL Injection Attacks</p>
    <p>Bro M2</p>
    <p>Handling a Load Burst : Pre-Scaled</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Load burst has no impact on system performance, as there is enough capacity to handle the load</p>
    <p>Pre-scaled</p>
  </div>
  <div class="page">
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>Handling a Load Burst : Split/Merge</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Dynamically scaled with FreeFlow</p>
    <p>FreeFlow</p>
    <p>One replica handles the load well, before the load burst</p>
  </div>
  <div class="page">
    <p>Handling a Load Burst : Split/Merge</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Dynamically scaled with FreeFlow</p>
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>FreeFlow</p>
    <p>Split</p>
    <p>When load burst starts, the Orchestrator splits the replica and rebalances the load</p>
  </div>
  <div class="page">
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>FreeFlow</p>
    <p>M</p>
    <p>Handling a Load Burst : Split/Merge</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Dynamically scaled with FreeFlow</p>
    <p>With the load rebalanced, performance returns to normal</p>
  </div>
  <div class="page">
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>FreeFlow</p>
    <p>M</p>
    <p>Handling a Load Burst : Split/Merge</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Dynamically scaled with FreeFlow</p>
    <p>Merge</p>
    <p>When system utilization drops after the load burst, the Orchestrator merges the two replicas</p>
  </div>
  <div class="page">
    <p>Handling a Load Burst : Split/Merge</p>
    <p>A tta</p>
    <p>ck s</p>
    <p>D et</p>
    <p>ec te</p>
    <p>d (%</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Load Burst</p>
    <p>Unscaled</p>
    <p>Pre-scaled</p>
    <p>Dynamically scaled with FreeFlow</p>
    <p>Web Servers</p>
    <p>M</p>
    <p>SQL Injection Attacks</p>
    <p>Bro</p>
    <p>FreeFlow</p>
  </div>
  <div class="page">
    <p>Summary</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Flow Migration Overhead - TCP</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>bi ts</p>
    <p>/s )</p>
    <p>Time (s)</p>
    <p>Baseline FreeFlow</p>
    <p>Flow Migration</p>
  </div>
  <div class="page">
    <p>Flow Migration Overhead - UDP</p>
    <p>Pa ck</p>
    <p>et L</p>
    <p>at en</p>
    <p>cy (m</p>
    <p>s)</p>
    <p>Time (s)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>bi ts</p>
    <p>) [5</p>
    <p>w in</p>
    <p>do w</p>
    <p>]</p>
    <p>Time (s)</p>
  </div>
</Presentation>
