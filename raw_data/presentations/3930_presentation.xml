<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance-aware Versioned</p>
    <p>Dataworkspaces Xing Niu,</p>
    <p>Bahareh Sadat Arab, Boris Glavic</p>
    <p>Dieter Gawlick, Zhen Hua Liu,</p>
    <p>Vasudha Krishnaswamy Oliver Kennedy</p>
    <p>Oracle</p>
  </div>
  <div class="page">
    <p>Introduction  Data preparation, curation, and analysis</p>
    <p>Interactive, iterative process with ample uncertainty</p>
    <p>What datasources to use?</p>
    <p>How to clean them?</p>
    <p>How to integrate heterogeneous sources?</p>
    <p>Requires a lot of backtracking and propagation of changes</p>
    <p>e.g., find mistake in a previous curation step and correct it</p>
    <p>How to support user in this process?</p>
  </div>
  <div class="page">
    <p>Our Vision</p>
    <p>Build a model and system implementing the model that supports:</p>
    <p>1) Incremental workflow construction with immediate feedback</p>
    <p>Any change to a curation workflow is immediately reflected in the data</p>
    <p>2) Regret-free exploration through sandboxing</p>
    <p>Any past choice can easily be undone/changed</p>
    <p>Derived data is automatically refreshed</p>
    <p>3) Full accountability through provenance tracking</p>
    <p>All data and transformations are versioned</p>
    <p>Workflow provenance as well as fine-grained data provenance</p>
  </div>
  <div class="page">
    <p>Our Vision</p>
    <p>4) Automatic conflict detection and resolution</p>
    <p>Detect conflicts during automatic refresh of derived data</p>
    <p>Provide a toolbox of automated resolution techniques for conflicts</p>
    <p>5) Merging of transformation pipelines</p>
    <p>Update an analysis result if the input data is refreshed</p>
    <p>6) Uncertainty as a first-class concept</p>
    <p>Expose and propagate uncertainty that naturally arises in data curation</p>
  </div>
  <div class="page">
    <p>Virtual Version Graph Model</p>
    <p>Version control mechanism for data and transformations</p>
    <p>Multiple parallel histories can co-exit</p>
    <p>Explicit tracking of transformations</p>
    <p>Automatic refresh of derived data</p>
    <p>A principled and non-invasive way of changing past transformations</p>
    <p>A lightweight way to represent data and versions</p>
    <p>Enables data to be materialized on-demand</p>
  </div>
  <div class="page">
    <p>PVDs</p>
    <p>Provenance-aware Versioned Dataworkspaces</p>
    <p>A sandboxed environment for data curation and analysis backed up by the VVG model</p>
    <p>Can be implemented on top of existing data processing platforms (e.g., relational DBMS)</p>
  </div>
  <div class="page">
    <p>Virtual Version Graph Model</p>
    <p>A directed acyclic hyper-graph</p>
    <p>Nodes are relation versions</p>
    <p>Edges are data transformations</p>
    <p>Two types of edges</p>
    <p>Derivation hyper-edge (Green edge)</p>
    <p>Version edge (Red edge)</p>
    <p>R</p>
    <p>V1</p>
    <p>V2</p>
    <p>V1</p>
    <p>V2</p>
    <p>Q2</p>
    <p>U</p>
    <p>Q2</p>
    <p>R</p>
    <p>Q1 Q1 Query</p>
    <p>Update</p>
  </div>
  <div class="page">
    <p>Running Example {&quot;Treatment&quot; : [ { &quot;Patient&quot;: &quot;John&quot;, &quot;Disease&quot;: &quot;Lung Cancer&quot;, &quot;Doctor&quot;: &quot;Xing&quot;, &quot;Treatment&quot;: &quot;Chemotherapy&quot;, &quot;Suc:&quot; false, &quot;Finish:&quot; true }, { &quot;Patient&quot;: &quot;Bob&quot;, &quot;Disease&quot;: &quot;Stomach Cancer&quot;, &quot;Doctor&quot;: &quot;Bahareh&quot;, &quot;Treatment&quot;: &quot;Radiation&quot;, &quot;Suc:&quot; false, },  ]}</p>
    <p>Alex: I want to build a workflow to determine the success rate of different treatments for lung cancer .</p>
    <p>Json Document J J</p>
    <p>Jason Document J -&gt;</p>
    <p>- add node J</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>Treatment Disease Success</p>
    <p>Chemotherapy Lung Cancer TRUE</p>
    <p>Chemotherapy Stomach Cancer TRUE</p>
    <p>Surgery Lung Cancer FALSE</p>
    <p>Radiation Lung Cancer FALSE J</p>
    <p>Q1</p>
    <p>T</p>
    <p>Relation T</p>
    <p>Alex: Extract data into table T.</p>
    <p>For every transformation Q with input I output O</p>
    <p>-&gt; - add node O - add derivation edge labelled Q</p>
    <p>from I to O</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>J</p>
    <p>Q1</p>
    <p>T</p>
    <p>S</p>
    <p>Q2</p>
    <p>Alex: Calculate the success rate of different treatment methods for Lung Cancer.</p>
    <p>Query Q2</p>
    <p>Queries are transfromations that create new relations</p>
    <p>SELECT SUM (CASE WHEN Success = TRUE) THEN 1 ELSE 0 END / count(*)) AS SuccessRate, FROM T WHERE Disease = Lung Cancer GROUP BY Treatment</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>J</p>
    <p>Q1</p>
    <p>T</p>
    <p>S</p>
    <p>Q2</p>
    <p>Result Relation S</p>
    <p>SuccessRate</p>
    <p>For transformation Q2 with input T output S</p>
    <p>-&gt; - add node S - add derivation edge labelled</p>
    <p>Q2 from T to S Alex: Calculate the success rate of Lung Cancer.</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>Json Document J</p>
    <p>Alex: *&amp;@#!, I made a mistake when extracting data from the JSON doc. I retrieved the values of attribute Success from the field Finish in the JSON document.</p>
    <p>{&quot;Treatment&quot; : [ { &quot;Patient&quot;: &quot;John&quot;, &quot;Disease&quot;: &quot;Lung Cancer&quot;, &quot;Doctor&quot;: &quot;Xing&quot;, &quot;Treatment&quot;: &quot;Chemotherapy&quot;, &quot;Suc:&quot; false, &quot;Finish:&quot; true }, { &quot;Patient&quot;: &quot;Bob&quot;, &quot;Disease&quot;: &quot;Stomach Cancer&quot;, &quot;Doctor&quot;: &quot;Bahareh&quot;, &quot;Treatment&quot;: &quot;Radiation&quot;, &quot;Suc:&quot; false, },  ]}</p>
    <p>Treatment Disease Success</p>
    <p>Chemotherapy Lung Cancer TRUE</p>
    <p>Chemotherapy Stomach Cancer</p>
    <p>TRUE</p>
    <p>Surgery Lung Cancer FALSE</p>
    <p>Radiation Lung Cancer FALSE</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>J</p>
    <p>Q1</p>
    <p>T</p>
    <p>S</p>
    <p>T</p>
    <p>Q2</p>
    <p>Q1</p>
    <p>Alex: I correct the query Q1 to Q1.</p>
    <p>Treatment Disease Success</p>
    <p>Chemotherapy Lung Cancer FALSE</p>
    <p>Chemotherapy Stomach Cancer TRUE</p>
    <p>Surgery Lung Cancer TRUE</p>
    <p>Radiation Lung Cancer TRUE</p>
    <p>Relation T</p>
    <p>When modify existing transformation Q to Q with input I and output O (the new version of O)</p>
    <p>-&gt; - add node O - add derivation edge labelled Q from I to O - add version edge (dash line) from O to O</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>J Q1</p>
    <p>T</p>
    <p>S</p>
    <p>T</p>
    <p>Q2</p>
    <p>Q1</p>
    <p>Alex: I want the derived relations can be automatic refreshed.</p>
    <p>Automatic refresh of derived relations Create new versions of relations (S) derived from modified relation (T).  In this case, create new version (S)</p>
    <p>-&gt; - add node S - add derivation edge labelled Q from T to S - add version edge (dash line) from S to S</p>
    <p>S</p>
    <p>Q2</p>
    <p>Result Relation S</p>
    <p>SuccessRate</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>{&quot;Treatment&quot; : [ { &quot;Patient&quot;: &quot;John&quot;, &quot;Disease&quot;: &quot;Lung Cancer&quot;, &quot;Doctor&quot;: &quot;Xing&quot;, &quot;Treatment&quot;: &quot;Chemotherapy&quot;, &quot;Suc:&quot; false, &quot;Finish:&quot; true },  ]}</p>
    <p>Treatment Disease Success</p>
    <p>Chemotherapy Lung Cancer John</p>
    <p>Chemotherapy Stomach Cancer</p>
    <p>Bob</p>
    <p>Surgery Lung Cancer Kile</p>
    <p>Radiation Lung Cancer Bill true or false</p>
    <p>Strings</p>
    <p>Conflict  Retrieve values of attribute Success &lt; Patient  Success : TRUE or FALSE  Patient : Just strings  Running Q2 &gt; Conflicts</p>
    <p>J Q1</p>
    <p>T</p>
    <p>S</p>
    <p>T Q2</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>S</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>J</p>
    <p>Q1</p>
    <p>T</p>
    <p>S</p>
    <p>T</p>
    <p>Q2</p>
    <p>Q1</p>
    <p>Alex: I got a conflict when doing automatic refresh.</p>
    <p>Detecting and Dealing with conflicts Automatic refresh =&gt; ill-defined relation versions  Mark this relation as invalid  Make semi-automatic and automatic conflict detection  Provide available resolution strategies</p>
    <p>Q2 Q2</p>
    <p>Fix</p>
    <p>F</p>
    <p>SS In this case, fix the relation T firstly, then do automatic refresh (Q2) based on the fixed relation F.</p>
    <p>-&gt; - add node F (fixed relation) - add node S - add derivation edge labelled Fix from T</p>
    <p>to F - add derivation edge labelled Q2 from F</p>
    <p>to S - add version edge (dash line) from S to S</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Version Control Systems</p>
    <p>Scientific workflow management systems</p>
    <p>VisTrails</p>
    <p>Workflow and Database Provenance</p>
  </div>
  <div class="page">
    <p>PVD  An interface similar to iPython</p>
    <p>System maintains a VVG for the users actions</p>
    <p>Relation versions can be stored in, e.g., a DBMS</p>
    <p>Visualizations are represented as special VVG nodes</p>
  </div>
  <div class="page">
    <p>PVD building blocks  Data curation with lenses [1]</p>
    <p>Powerful uncertainty aware data curation operations</p>
    <p>Uses probabilistic database techniques to keep track of uncertainty</p>
    <p>Provenance tracking and reenactment for updates [2]</p>
    <p>Declarative replay technique</p>
    <p>Retroactively compute provenance for updates</p>
    <p>Translates an update into an equivalent query</p>
  </div>
  <div class="page">
    <p>Implementation Challenges</p>
    <p>Strategies for materializing Which relation versions, when and how</p>
    <p>Methods for compressing VVGs</p>
    <p>Incremental view maintenance techniques</p>
    <p>Conflicts and merging VVGs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>A novel version model (VVG) and system vision (PVDs)</p>
    <p>Keep all track of users operations and data provenance</p>
    <p>Supports exploratory application of data curation and analysis operators</p>
    <p>Features</p>
    <p>Simple and clean model  Automatic refresh  Past transformations can be modified  Automatic conflict detection (and resolution)</p>
  </div>
  <div class="page">
    <p>Questions?  My Webpage</p>
    <p>http://www.cs.iit.edu/~dbgroup/people/xniu.php</p>
    <p>Our Groups Webpage</p>
    <p>http://cs.iit.edu/~dbgroup/research/index.html</p>
    <p>GProM</p>
    <p>http://www.cs.iit.edu/~dbgroup/research/gprom.php</p>
    <p>Mimir</p>
    <p>http://odin.cse.buffalo.edu/research/mimir/</p>
    <p>Vizier (The ODIn Lab)</p>
    <p>http://www.vizierdb.info</p>
  </div>
</Presentation>
