<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Virtually Eliminating Router Bugs</p>
    <p>Minlan Yu Princeton University</p>
    <p>http://verb.cs.princeton.edu</p>
    <p>Joint work with Eric Keller (Princeton), Matt Caesar (UIUC), Jennifer Rexford (Princeton)</p>
    <p>CoNEXT09</p>
  </div>
  <div class="page">
    <p>Router Bugs in the News</p>
  </div>
  <div class="page">
    <p>Router Bugs in the News</p>
  </div>
  <div class="page">
    <p>1 misconfiguration tickled 2 bugs (2 vendors)  Real bugs on Feb 16, 2009  Huge increase in the global rate of updates  10x increase in global instability for an hour</p>
    <p>Misconfiguration: as-path prepend 47868</p>
    <p>MikroTik bug: no-range check</p>
    <p>prepended 252 times</p>
    <p>Did not filter</p>
    <p>Cisco bug: Long AS paths</p>
    <p>AS path Prepending After: len &gt; 255</p>
    <p>Notification</p>
    <p>AS47878AS47878 AS29113AS29113</p>
    <p>Example of Router Bugs</p>
    <p>Global Instability by Country</p>
  </div>
  <div class="page">
    <p>Router Bugs</p>
    <p>Router bugs are a serious problem  Routers are getting more complicated</p>
    <p>Quagga 220K lines, XORP 826K lines</p>
    <p>Vendors are allowing third-party software  Other outages are becoming less common</p>
    <p>Router bugs are hard to detect and fix  Byzantine failures dont simply crash the router  Violate protocol, can cause cascading outages  Often discovered after serious outage</p>
    <p>How to detect bugs and stop their effects before they spread?</p>
    <p>How to detect bugs and stop their effects before they spread?</p>
  </div>
  <div class="page">
    <p>Avoiding Bugs via Diversity</p>
    <p>Run multiple, diverse routing instances  Use voting to select majority result  Software and Data Diversity (SDD) ensures</p>
    <p>correctness  E.g., XORP and Quagga, different update timing</p>
    <p>Similar approach applied in other fields  But new challenges and opportunities in routing</p>
    <p>Vote</p>
  </div>
  <div class="page">
    <p>SDD Challenges in Routers  Making replication transparent</p>
    <p>Interoperate with existing routers  Duplicate network state to routing instances  Present a common configuration interface</p>
    <p>Handling transient, real-time nature of routers  React quickly to network events</p>
    <p>E.g., buggy behaviors, link failures</p>
    <p>But not over-react to transient inconsistency</p>
    <p>Routing Instance I AA</p>
    <p>Routing Instance II BB CC</p>
    <p>BB AA CC</p>
  </div>
  <div class="page">
    <p>SDD Opportunities in Routers</p>
    <p>Easy to vote on standardized output  Control plane: IETF-standardized routing protocols  Data plane: forwarding-table entries</p>
    <p>Easy to recover from errors via bootstrap  Routing has limited dependency on history  Dont need much information to bootstrap instance</p>
    <p>Diversity is effective in avoiding router bugs  Based on our studies on router bugs and code</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Exploiting software and data diversity (SDD)  Effective in avoiding bugs  Enough hardware resources to support diversity</p>
    <p>Bug-tolerant router (BTR) architecture  Make replication transparent with low overhead  React quickly and handle transient inconsistency</p>
    <p>Prototype and evaluation  Small, trusted code base  Low processing overhead</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Exploiting software and data diversity (SDD)  Effective in avoiding bugs  Enough hardware resources to support diversity</p>
    <p>Bug-tolerant router (BTR) architecture  Make replication transparent with low overhead  React quickly and handle transient inconsistency</p>
    <p>Prototype and evaluation  Small, trusted code base  Low processing overhead</p>
  </div>
  <div class="page">
    <p>Why Diversity Works?  Enough diversity in routers</p>
    <p>Software: Quagga, XORP, BIRD  Protocols: OSPF and IS-IS  Environment: timing, ordering, memory</p>
    <p>Enough resources for diversity  Extra processor blades for hardware reliability  Multi-core processors, separate route servers</p>
    <p>Effective in avoiding bugs</p>
  </div>
  <div class="page">
    <p>Evaluate Diversity Effect</p>
    <p>Most bugs can be avoided by diversity  Reproduce and avoid real bugs  .. in XORP and Quagga bugzilla database</p>
    <p>Diversity on execution environment Diversity Mechanism Avoid bugs in</p>
    <p>database</p>
    <p>Timing/Order of Messages</p>
    <p>Configuration 25%</p>
    <p>Timing/Order of Connections</p>
    <p>Combining all execution diversity</p>
  </div>
  <div class="page">
    <p>Effect of Software Diversity</p>
    <p>Sanity check on implementation diversity  Picked 10 bugs from XORP, 10 bugs from Quagga  None were present in the other implementation</p>
    <p>Static code analysis on version diversity  Overlap decreases quickly between versions</p>
    <p>75% of bugs in Quagga 0.99.1 are fixed in Quagga 0.99.9  30% of bugs in Quagga 0.99.9 are newly introduced</p>
    <p>Vendors can also achieve software diversity  Different code versions, different code trains  Code from acquired companies, open-source</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Exploiting software and data diversity (SDD)  Effective in avoiding bugs  Enough hardware resources to support diversity</p>
    <p>Bug-tolerant router (BTR) architecture  Make replication transparent with low overhead  React quickly and handle transient inconsistency</p>
    <p>Prototype and evaluation  Small, trusted code base  Low processing overhead</p>
  </div>
  <div class="page">
    <p>Bug-tolerant Router Architecture</p>
    <p>UPDATE VOTER</p>
    <p>FIB VOTER</p>
    <p>REPLICA MANAGER</p>
    <p>Hypervisor</p>
    <p>Forwarding table (FIB) Interface 1</p>
    <p>Iinterface 2</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
  </div>
  <div class="page">
    <p>UPDATE VOTER</p>
    <p>FIB VOTER</p>
    <p>REPLICA MANAGER</p>
    <p>Hypervisor</p>
    <p>Forwarding table (FIB) Interface 1</p>
    <p>Iinterface 2</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Replicating Incoming Routing Messages</p>
    <p>No need for protocol parsing  operates at socket level</p>
  </div>
  <div class="page">
    <p>UPDATE VOTER</p>
    <p>FIB VOTER</p>
    <p>REPLICA MANAGER</p>
    <p>Hypervisor</p>
    <p>Forwarding table (FIB)Interface 1</p>
    <p>Iinterface 2</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Voting: Updates to Forwarding Table</p>
    <p>Transparent by intercepting calls to Netlink</p>
  </div>
  <div class="page">
    <p>UPDATE VOTER</p>
    <p>FIB VOTER</p>
    <p>REPLICA MANAGER</p>
    <p>Hypervisor</p>
    <p>Forwarding table (FIB)Interface 1</p>
    <p>Iinterface 2</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Protocol daemon</p>
    <p>Routing table</p>
    <p>Voting: Control-Plane Messages</p>
    <p>Transparent by intercepting socket system calls</p>
  </div>
  <div class="page">
    <p>Simple Voting Mechanisms  Tolerate transient periods of disagreement</p>
    <p>Different replicas can have different outputs   during routing-protocol convergence</p>
    <p>Several different voting mechanisms  Master-slave: speeding reaction time  Continuous majority: handling transience</p>
    <p>Routing Instance I AA</p>
    <p>Routing Instance II BB CC</p>
    <p>BB AA CC</p>
    <p>AA CC Routing Instance III time</p>
    <p>master</p>
  </div>
  <div class="page">
    <p>Simple Voting Mechanisms  Tolerate transient periods of disagreement</p>
    <p>Different replicas can have different outputs   during routing-protocol convergence</p>
    <p>Several different voting mechanisms  Master-slave: speeding reaction time  Continuous majority: handling transience</p>
    <p>Routing Instance I AA</p>
    <p>Routing Instance II BB CC</p>
    <p>BB AA CC</p>
    <p>AA CC Routing Instance III time</p>
    <p>Continuous majority AA</p>
    <p>BB</p>
    <p>AA</p>
    <p>AA</p>
    <p>BB CC</p>
    <p>CC</p>
    <p>CC</p>
    <p>CC</p>
  </div>
  <div class="page">
    <p>Simple Voting and Recovery</p>
    <p>Recovery  Hiding replica failure from neighboring routers  Hypervisor kills faulty instance, invokes new one</p>
    <p>Small, trusted software component  No parsing, treats data as opaque strings  Just 514 lines of code in voter implementation</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Exploiting software and data diversity (SDD)  Effective in avoiding bugs  Enough hardware resources to support diversity</p>
    <p>Bug-tolerant router (BTR) architecture  Make replication transparent with low overhead  React quickly and handle transient inconsistency</p>
    <p>Prototype and evaluation  Small, trusted code base  Low processing overhead</p>
  </div>
  <div class="page">
    <p>Prototype  Prototype implementation</p>
    <p>No modification of routing software  Simple, trusted hypervisor  Built on Linux with XORP and Quagga</p>
    <p>Evaluation environment  Evaluated in 3GHz Intel Xeon  BGP trace from Route Views on March, 2007</p>
    <p>Evaluation metric  Voting delay and fault rate of different voting algo.  Delay of hypervisor</p>
  </div>
  <div class="page">
    <p>Effectiveness of Voting  Setup</p>
    <p>3 XORP and 3 Quagga routing instances  Inject bugs of realistic frequency and duration</p>
    <p>Voting algorithm</p>
    <p>Avg voting delay (sec)</p>
    <p>Fault rate</p>
    <p>Single router - 0.066%</p>
    <p>Master-slave 0.02 0.0006%</p>
    <p>Continuousmajority</p>
  </div>
  <div class="page">
    <p>Small Overhead</p>
    <p>Small increase on FIB pass through time  Time between receiving an update to FIB changes  Delay overhead of just hypervisor is 0.1% (0.06sec)  Delay overhead of 5 routing instances is 4.6%</p>
    <p>Little effect on network-wide convergence  ISP networks from Rocketfuel, and cliques  Found no significant change in convergence (beyond the</p>
    <p>pass through time)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Seriousness of routing software bugs  Cause outages, misbehaviors, vulnerabilities  Violate protocol semantics, so not handled by</p>
    <p>traditional failure detection and recovery</p>
    <p>Software and data diversity (SDD)  Effective, has reasonable overhead</p>
    <p>Design and prototype of bug-tolerant router  Works with Quagga and XORP software  Low overhead, and small trusted code base</p>
  </div>
  <div class="page">
    <p>More information at http://verb.cs.princeton.edu</p>
    <p>Thanks!</p>
    <p>Questions?</p>
  </div>
</Presentation>
