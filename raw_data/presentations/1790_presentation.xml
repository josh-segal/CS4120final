<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Using R for Iterative and</p>
    <p>Incremental Processing</p>
    <p>Shivaram Venkataraman, Indrajit Roy, Alvin AuYoung, Robert Schreiber</p>
    <p>UC Berkeley and HP Labs</p>
    <p>UC BERKELEY</p>
  </div>
  <div class="page">
    <p>Big Data, Complex Algorithms</p>
    <p>PageRank</p>
    <p>(Dominant eigenvector)</p>
    <p>Recommendations</p>
    <p>(Matrix factorization)</p>
    <p>Anomaly detection</p>
    <p>(Top-K eigenvalues)</p>
    <p>User Importance</p>
    <p>(Vertex Centrality) 6/29/2012 2</p>
  </div>
  <div class="page">
    <p>Big Data, Complex Algorithms</p>
    <p>PageRank</p>
    <p>(Dominant eigenvector)</p>
    <p>Recommendations</p>
    <p>(Matrix factorization)</p>
    <p>Anomaly detection</p>
    <p>(Top-K eigenvalues)</p>
    <p>User Importance</p>
    <p>(Vertex Centrality) 6/29/2012 3</p>
    <p>Machine learning + Graph algorithms</p>
    <p>Iterative Linear Algebra Operations</p>
  </div>
  <div class="page">
    <p>PageRank Using Matrices</p>
    <p>Dominant eigenvector</p>
    <p>M = modified web graph matrix</p>
    <p>p = PageRank vector</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>p Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>p</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
    <p>Simplified algorithm:</p>
    <p>repeat { p = M*p + Z}</p>
  </div>
  <div class="page">
    <p>Breadth-first Search Using Matrices</p>
    <p>G = adjacency matrix</p>
    <p>X = BFS vector</p>
    <p>A B C D E</p>
    <p>A 1 1 1 0 0</p>
    <p>B 0 1 0 1 0</p>
    <p>C 0 1 1 0 0</p>
    <p>D 0 0 0 1 1</p>
    <p>E 0 0 0 0 1</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>X</p>
    <p>G</p>
    <p>Simplified algorithm:</p>
    <p>repeat { X = G*X }</p>
  </div>
  <div class="page">
    <p>Breadth-first Search Using Matrices</p>
    <p>G = adjacency matrix</p>
    <p>X = BFS vector</p>
    <p>A B C D E</p>
    <p>A 1 1 1 0 0</p>
    <p>B 0 1 0 1 0</p>
    <p>C 0 1 1 0 0</p>
    <p>D 0 0 0 1 1</p>
    <p>E 0 0 0 0 1</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>X</p>
    <p>G</p>
    <p>* * * 0 0</p>
    <p>A B C D E</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>Simplified algorithm:</p>
    <p>repeat { X = G*X }</p>
  </div>
  <div class="page">
    <p>Breadth-first Search Using Matrices</p>
    <p>G = adjacency matrix</p>
    <p>X = BFS vector</p>
    <p>A B C D E</p>
    <p>A 1 1 1 0 0</p>
    <p>B 0 1 0 1 0</p>
    <p>C 0 1 1 0 0</p>
    <p>D 0 0 0 1 1</p>
    <p>E 0 0 0 0 1</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>X</p>
    <p>G</p>
    <p>* * * 0 0</p>
    <p>A B C D E</p>
    <p>* * * * 0</p>
    <p>A B C D E</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>Simplified algorithm:</p>
    <p>repeat { X = G*X }</p>
  </div>
  <div class="page">
    <p>Breadth-first Search Using Matrices</p>
    <p>G = adjacency matrix</p>
    <p>X = BFS vector</p>
    <p>A B C D E</p>
    <p>A 1 1 1 0 0</p>
    <p>B 0 1 0 1 0</p>
    <p>C 0 1 1 0 0</p>
    <p>D 0 0 0 1 1</p>
    <p>E 0 0 0 0 1</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>X</p>
    <p>G</p>
    <p>* * * 0 0</p>
    <p>A B C D E</p>
    <p>* * * * 0</p>
    <p>A B C D E</p>
    <p>* * * * *</p>
    <p>A B C D E</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>Simplified algorithm:</p>
    <p>repeat { X = G*X }</p>
  </div>
  <div class="page">
    <p>Breadth-first Search Using Matrices</p>
    <p>G = adjacency matrix</p>
    <p>X = BFS vector</p>
    <p>A B C D E</p>
    <p>A 1 1 1 0 0</p>
    <p>B 0 1 0 1 0</p>
    <p>C 0 1 1 0 0</p>
    <p>D 0 0 0 1 1</p>
    <p>E 0 0 0 0 1</p>
    <p>A B C D E</p>
    <p>* * * * 0</p>
    <p>A B C D E</p>
    <p>* * * * *</p>
    <p>A B C D E</p>
    <p>Simplified algorithm:</p>
    <p>repeat { X = G*X }</p>
    <p>Matrix operations</p>
    <p>Easy to express</p>
    <p>Efficient to implement</p>
  </div>
  <div class="page">
    <p>Linear Algebra on Existing Frameworks</p>
    <p>Matrix Operations: Structured, coarse grained</p>
    <p>Need global state</p>
  </div>
  <div class="page">
    <p>Linear Algebra on Existing Frameworks</p>
    <p>Data-parallel frameworks  MapReduce/Dryad</p>
    <p>Process each record in parallel</p>
    <p>Use case: Computing sufficient statistics</p>
    <p>Matrix Operations: Structured, coarse grained</p>
    <p>Need global state</p>
  </div>
  <div class="page">
    <p>Linear Algebra on Existing Frameworks</p>
    <p>Data-parallel frameworks  MapReduce/Dryad</p>
    <p>Process each record in parallel</p>
    <p>Use case: Computing sufficient statistics</p>
    <p>Graph-centric frameworks  Pregel/GraphLab</p>
    <p>Process each vertex in parallel</p>
    <p>Use case: Graph models</p>
    <p>Matrix Operations: Structured, coarse grained</p>
    <p>Need global state</p>
  </div>
  <div class="page">
    <p>Challenge 1  Sparse Matrices</p>
  </div>
  <div class="page">
    <p>Challenge 1  Sparse Matrices</p>
  </div>
  <div class="page">
    <p>Challenge 1  Sparse Matrices</p>
  </div>
  <div class="page">
    <p>Challenge 1  Sparse Matrices</p>
    <p>lo c k d</p>
    <p>e n</p>
    <p>s it</p>
    <p>y (</p>
    <p>n o</p>
    <p>r m</p>
    <p>a li z e d</p>
    <p>)</p>
    <p>Block ID</p>
    <p>LiveJournal Netflix ClueWeb-1B</p>
  </div>
  <div class="page">
    <p>Challenge 1  Sparse Matrices</p>
    <p>lo c k d</p>
    <p>e n</p>
    <p>s it</p>
    <p>y (</p>
    <p>n o</p>
    <p>r m</p>
    <p>a li z e d</p>
    <p>)</p>
    <p>Block ID</p>
    <p>LiveJournal Netflix ClueWeb-1B</p>
  </div>
  <div class="page">
    <p>Challenge 1  Sparse Matrices</p>
    <p>lo c k d</p>
    <p>e n</p>
    <p>s it</p>
    <p>y (</p>
    <p>n o</p>
    <p>r m</p>
    <p>a li z e d</p>
    <p>)</p>
    <p>Block ID</p>
    <p>LiveJournal Netflix ClueWeb-1B</p>
  </div>
  <div class="page">
    <p>Challenge 2  Incremental Updates</p>
    <p>Incremental computation on consistent view of data</p>
    <p>Refine</p>
    <p>recommendations</p>
    <p>New movie</p>
    <p>ratings</p>
    <p>Better</p>
    <p>suggestions</p>
  </div>
  <div class="page">
    <p>Presto</p>
    <p>Framework for large-scale iterative linear algebra</p>
    <p>Extend R for scalability and incremental updates</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Programming model</p>
    <p>Design</p>
    <p>Applications and Results</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>One data structure: Distributed Array</p>
    <p>A  darray()</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Iteration: foreach</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Iteration: foreach</p>
    <p>Compute Compute Compute Compute 6/29/2012 24</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Incremental updates: onchange, update</p>
    <p>Compute Compute Compute Compute 6/29/2012 25</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Incremental updates: onchange, update</p>
    <p>Compute Compute Compute Compute</p>
    <p>Data Updated</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Incremental updates: onchange, update</p>
    <p>Compute Compute Compute Compute</p>
    <p>Data Updated</p>
  </div>
  <div class="page">
    <p>PageRank Using Presto</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N))</p>
    <p>P  darray(dim=c(N,1),blocks=(s,1))</p>
    <p>while(..){</p>
    <p>foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i),m=splits(M,i),</p>
    <p>x=splits(P_old),z=splits(Z,i)) {</p>
    <p>p  (m*x)+z</p>
    <p>}</p>
    <p>) P_old  P</p>
    <p>} 6/29/2012 28</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>PageRank Using Presto</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N))</p>
    <p>P  darray(dim=c(N,1),blocks=(s,1))</p>
    <p>while(..){</p>
    <p>foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i),m=splits(M,i),</p>
    <p>x=splits(P_old),z=splits(Z,i)) {</p>
    <p>p  (m*x)+z</p>
    <p>}</p>
    <p>) P_old  P</p>
    <p>}</p>
    <p>Create Distributed Array</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>PageRank Using Presto</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N))</p>
    <p>P  darray(dim=c(N,1),blocks=(s,1))</p>
    <p>while(..){</p>
    <p>foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i), m=splits(M,i),</p>
    <p>x=splits(P_old), z=splits(Z,i)) {</p>
    <p>p  (m*x)+z</p>
    <p>}</p>
    <p>) P_old  P</p>
    <p>} 6/29/2012 30</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>PageRank Using Presto</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N))</p>
    <p>P  darray(dim=c(N,1),blocks=(s,1))</p>
    <p>while(..){</p>
    <p>foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i), m=splits(M,i),</p>
    <p>x=splits(P_old), z=splits(Z,i)) {</p>
    <p>p  (m*x)+z</p>
    <p>}</p>
    <p>) P_old  P</p>
    <p>}</p>
    <p>Execute function in a cluster</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>PageRank Using Presto</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N))</p>
    <p>P  darray(dim=c(N,1),blocks=(s,1))</p>
    <p>while(..){</p>
    <p>foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i), m=splits(M,i),</p>
    <p>x=splits(P_old), z=splits(Z,i)) {</p>
    <p>p  (m*x)+z</p>
    <p>}</p>
    <p>) P_old  P</p>
    <p>}</p>
    <p>Execute function in a cluster</p>
    <p>Pass array partitions</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Incremental PageRank</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N)) P  darray(dim=c(N,1),blocks=(s1)) onchange(M) { while(..){ foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i), m=splits(M,i), x=splits(P_old), z=splits(Z,i)) { p  (m*x)+z update(p)</p>
    <p>}) P_old  P }} 6/29/2012 33</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Incremental PageRank</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N)) P  darray(dim=c(N,1),blocks=(s1)) onchange(M) { while(..){ foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i), m=splits(M,i), x=splits(P_old), z=splits(Z,i)) { p  (m*x)+z update(p)</p>
    <p>}) P_old  P }}</p>
    <p>Execute when data changes</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Incremental PageRank</p>
    <p>M  darray(dim=c(N,N),blocks=(s,N)) P  darray(dim=c(N,1),blocks=(s1)) onchange(M) { while(..){ foreach(i,1:len,</p>
    <p>calculate(p=splits(P,i), m=splits(M,i), x=splits(P_old), z=splits(Z,i)) { p  (m*x)+z update(p)</p>
    <p>}) P_old  P }}</p>
    <p>Execute when data changes</p>
    <p>Update page rank vector</p>
    <p>P2</p>
    <p>P1</p>
    <p>PN/s</p>
    <p>M</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P_old Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>P</p>
    <p>s P1</p>
    <p>P2</p>
    <p>PN/s</p>
    <p>N</p>
    <p>s</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Programming model</p>
    <p>Design</p>
    <p>Applications and Results</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Profile execution</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Profile execution</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Profile execution</p>
    <p>Partition</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Profile execution</p>
    <p>Partition</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Profile execution</p>
    <p>Partition</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Profile execution</p>
    <p>Partition</p>
    <p>Programmers specify size invariants.</p>
  </div>
  <div class="page">
    <p>Dynamic Partitioning of Matrices</p>
    <p>Up to 2x performance improvement</p>
  </div>
  <div class="page">
    <p>Incremental Updates Using Consistent Snapshots</p>
    <p>P</p>
    <p>Q</p>
    <p>R S</p>
    <p>Web Graph</p>
    <p>Adjacency Matrix</p>
  </div>
  <div class="page">
    <p>Incremental Updates Using Consistent Snapshots</p>
    <p>P</p>
    <p>Q</p>
    <p>R S</p>
    <p>Web Graph</p>
    <p>Adjacency Matrix</p>
    <p>onchange(M1)</p>
  </div>
  <div class="page">
    <p>Incremental Updates Using Consistent Snapshots</p>
    <p>P</p>
    <p>Q</p>
    <p>R S</p>
    <p>Web Graph</p>
    <p>Adjacency Matrix</p>
    <p>Page Rank</p>
    <p>update  P1</p>
  </div>
  <div class="page">
    <p>Incremental Updates Using Consistent Snapshots</p>
    <p>P</p>
    <p>Q</p>
    <p>R S</p>
    <p>Web Graph</p>
    <p>Adjacency Matrix</p>
    <p>Page Rank</p>
  </div>
  <div class="page">
    <p>Incremental Updates Using Consistent Snapshots</p>
    <p>P</p>
    <p>Q</p>
    <p>R S</p>
    <p>Web Graph</p>
    <p>Adjacency Matrix</p>
    <p>Page Rank</p>
    <p>onchange(M2)</p>
  </div>
  <div class="page">
    <p>Incremental Updates Using Consistent Snapshots</p>
    <p>P</p>
    <p>Q</p>
    <p>R S</p>
    <p>Web Graph</p>
    <p>Adjacency Matrix</p>
    <p>Page Rank</p>
    <p>update  P2</p>
  </div>
  <div class="page">
    <p>Versioned Distributed Arrays</p>
    <p>Mechanics of versioning</p>
    <p>update: Increment version number</p>
    <p>onchange: Bind a version number for the array</p>
    <p>before executing the handler</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Programming model</p>
    <p>Design</p>
    <p>Applications and Results</p>
  </div>
  <div class="page">
    <p>Applications Implemented in Presto</p>
    <p>Application Algorithm Presto LOC</p>
    <p>PageRank Eigenvector calculation 41</p>
    <p>Triangle counting Top-K eigenvalues 121</p>
    <p>Netflix recommendation Matrix factorization 130</p>
    <p>Centrality measure Graph algorithm 132</p>
    <p>k-path connectivity Graph algorithm 30</p>
    <p>k-means Clustering 71</p>
    <p>Sequence alignment Smith-Waterman 64</p>
  </div>
  <div class="page">
    <p>Applications Implemented in Presto</p>
    <p>Application Algorithm Presto LOC</p>
    <p>PageRank Eigenvector calculation 41</p>
    <p>Triangle counting Top-K eigenvalues 121</p>
    <p>Netflix recommendation Matrix factorization 130</p>
    <p>Centrality measure Graph algorithm 132</p>
    <p>k-path connectivity Graph algorithm 30</p>
    <p>k-means Clustering 71</p>
    <p>Sequence alignment Smith-Waterman 64</p>
    <p>Fewer than 140 lines of code</p>
  </div>
  <div class="page">
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Number of workers</p>
    <p>Presto Hadoop-InMem</p>
    <p>Presto is Fast !</p>
    <p>PageRank per-iteration execution time</p>
    <p>Data: 100M nodes, 1.2B edges. Setup: 10G network. 12 cores, 96GB RAM.</p>
  </div>
  <div class="page">
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Number of workers</p>
    <p>Presto Hadoop-InMem</p>
    <p>Presto is Fast !</p>
    <p>PageRank per-iteration execution time</p>
    <p>Data: 100M nodes, 1.2B edges. Setup: 10G network. 12 cores, 96GB RAM.</p>
    <p>More than 20x faster than Hadoop (w/ in-memory storage)</p>
  </div>
  <div class="page">
    <p>More in the Paper</p>
    <p>Memory management, caching of partitions</p>
    <p>Scheduling operations</p>
    <p>Storage driver interface to HBase</p>
    <p>Fault tolerance</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Linear Algebra is a powerful abstraction</p>
    <p>Easily express machine learning, graph algorithms</p>
    <p>Challenges: Sparse matrices, Incremental data</p>
    <p>Presto  prototype extends R</p>
    <p>Open source version soon !</p>
  </div>
</Presentation>
