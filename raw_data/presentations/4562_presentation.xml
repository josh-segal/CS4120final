<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Fault-Tolerant Routing Strategy for Fibonacci-Class Cubes</p>
    <p>Xinhua Zhang1 and Peter K. K. Loh2</p>
  </div>
  <div class="page">
    <p>Merits</p>
    <p>Applicable to all Fibonacci-class Cubes in a unified fashion, with only minimal modification of structural representation</p>
    <p>The maximum number of faulty components tolerable is the networks node availability: min(deg n) where n is a node</p>
    <p>For a n-dimensional Fibonacci-class Cube, each node of degree deg maintains and updates at most n(deg + 2) bits vector information</p>
    <p>Generates deadlock-free and livelock-free routes  Can be implemented almost entirely with simple and</p>
    <p>practical routing hardware requiring minimal processor control</p>
  </div>
  <div class="page">
    <p>Road Map</p>
    <p>Introduction  Generic approach to cycle-free routing</p>
    <p>(GACR)  Fault-tolerant Fibonacci routing (FTFR)  Experimental results  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Road Map</p>
    <p>Introduction  Generic approach to cycle-free routing</p>
    <p>(GACR)  Fault-tolerant Fibonacci routing (FTFR)  Experimental results  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: FC definition</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: FC example</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: FC equivalent definition</p>
    <p>1 20 || 10 ||n n nV V V  U 5n</p>
    <p>Edge: Hamming distance = 1</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: EFC definition</p>
    <p>n n n</p>
    <p>n n</p>
    <p>V V V</p>
    <p>V V</p>
    <p>U</p>
    <p>U U</p>
    <p>Edge: Hamming distance = 1</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: EFC example</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: XFC definition</p>
    <p>Edge: Hamming distance = 1</p>
    <p>( ) 0 || ( 1) 10 || ( 2)k k kV n V n V n  U 4n k</p>
    <p>( 2) {0, 1}kkV k</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: XFC example</p>
  </div>
  <div class="page">
    <p>Introduction 1. Fibonacci-class cubes: summary</p>
    <p>2 2: 00 || 10 ||n n n nEFC V V V  U</p>
    <p>In sum:</p>
    <p>: ( ) 0 || ( 1) 10 || ( 2)k k k kXFC n V n V n V n  U</p>
    <p>1 2: 0 || 10 ||n n n nFC V V V  U 5n</p>
    <p>4 40100 || 0101 ||n nV V U U</p>
    <p>Edge: Hamming distance = 1</p>
  </div>
  <div class="page">
    <p>Introduction 2. General Property</p>
    <p>Proposition.</p>
    <p>In a fault-free Fibonacci Cube, Enhanced Fibonacci Cube or Extended Fibonacci Cube:</p>
    <p>there is always a preferred dimension available at the packets present node before the destination is reached.</p>
    <p>Implication: the use of a spare dimension can be boiled down to the encounter of faulty components (now or before).</p>
  </div>
  <div class="page">
    <p>Road Map</p>
    <p>Introduction  Generic approach to cycle-free routing</p>
    <p>(GACR)  Fault-tolerant Fibonacci routing (FTFR)  Experimental results  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Generic approach to cycle-free routing (GACR)</p>
    <p>Purpose: 1. avoid cycles in routing by checking the traversal history</p>
  </div>
  <div class="page">
    <p>Generic approach to cycle-free routing: history vector</p>
    <p>history: 1210121</p>
  </div>
  <div class="page">
    <p>Generic approach to cycle-free routing: cycle check</p>
    <p>Equivalent condition for a route to contain cycle:</p>
    <p>there exists a way of inserting ( and ) into the sequence such that each number in the parenthesis appears for an even number of times.</p>
  </div>
  <div class="page">
    <p>Generic approach to cycle-free routing: Cost</p>
    <p>Cost:</p>
    <p>Overhead length:</p>
    <p>O(Lmax log n) = O(n log n) if O(Lmax) = O(n)</p>
    <p>Time complexity:</p>
    <p>To check whether string s has a single 1: O(1)</p>
    <p>To find all forbidden dimensions: O(Lcur) = O(n)</p>
  </div>
  <div class="page">
    <p>Road Map</p>
    <p>Introduction  Generic approach to cycle-free routing</p>
    <p>(GACR)  Fault-tolerant Fibonacci routing (FTFR)  Experimental results  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Fault-tolerant Fibonacci routing: Auxiliary vectors</p>
    <p>The main framework of the algorithm  Auxiliary vectors</p>
    <p>First filter out following dimensions  All the dimensions that are masked by GACR,</p>
    <p>including the incoming dimension  Dimensions which are faulty or non-existent by the</p>
    <p>definition of Fibonacci-class cubes (this makes the algorithm applicable to all Fibonacci-class cubes)</p>
    <p>Setting a mask vector, M, with 0 for dimensions meeting either of the conditions above, and 1 otherwise (adoptable).</p>
  </div>
  <div class="page">
    <p>Fault-tolerant Fibonacci routing: Overview</p>
  </div>
  <div class="page">
    <p>Fault-tolerant Fibonacci routing: Choosing from preferred dimensions</p>
    <p>If there are adoptable preferred dimensions  Look at neighbors on these dimensions</p>
    <p>Pick the neighbor which has the largest number of preferred dimension (relative to the neighbor)</p>
    <p>If tie, then pick the neighbor with the largest number of spare dimensions</p>
    <p>If still tie, choose 0-&gt;1 dimension</p>
  </div>
  <div class="page">
    <p>Fault-tolerant Fibonacci routing: Choosing from spare dimensions</p>
    <p>If there is NO adoptable preferred dimension  Look at neighbors on spare dimensions</p>
    <p>Pick the neighbor which has the largest number of preferred dimension</p>
    <p>If tie, then pick the neighbor with the largest number of spare dimensions</p>
    <p>If still tie, choose 1-&gt;1 dimension</p>
  </div>
  <div class="page">
    <p>Fault-tolerant Fibonacci routing: control of using spare dimension</p>
    <p>One caveat, control of using spare dimension  All dimensions can be used as a spare dimension</p>
    <p>for at most once  This is attained by using a mask vector DT:</p>
    <p>Set DT to straight 1 at the start/source.  If one spare dimension is chosen to be used</p>
    <p>Check if the corresponding bit in DT is 1  If 1, then OK. If 0, then forbid using it and try</p>
    <p>other dimensions.  After using the dimension, set the corresponding</p>
    <p>bit in DT to 0</p>
  </div>
  <div class="page">
    <p>Fault-tolerant Fibonacci routing: speed up</p>
    <p>two heuristics:  If the neighbor is the destination, then go to it.</p>
    <p>If the neighbor is on dimension d, and the destination has a (imagined) link on dimension d, then add the network availability to the score</p>
    <p># # _prefer n spare node availability</p>
  </div>
  <div class="page">
    <p>Road Map</p>
    <p>Introduction  Generic approach to cycle-free routing</p>
    <p>(GACR)  Fault-tolerant Fibonacci routing (FTFR)  Experimental results  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Check false abortion  enumerated all possible locations of faulty</p>
    <p>components and (source, destination) pairs for three kinds of Fibonacci-class Cubes with dimensionality lower than 7. No false abortion occurs.</p>
    <p>For higher dimensional cases, we can only randomly set faults and pick (source, destination) pairs. After one months simulation on a 2.3 GHz CPU, still no false abortion occurs.</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Experimental settings  location of faults, source and destination are all</p>
    <p>randomly chosen by uniform distribution  a node is faulty when all of its incident links are</p>
    <p>faulty  fixed packet-sized messages  source and destination nodes must be non-faulty  eager readership is employed when packet</p>
    <p>service rate is faster than packet arrival rate</p>
  </div>
  <div class="page">
    <p>Experimental Results  Comparison on various network sizes</p>
  </div>
  <div class="page">
    <p>Experimental Results  Comparison on various numbers of faults</p>
  </div>
  <div class="page">
    <p>Experimental Results  Comparison on various numbers of faults</p>
  </div>
  <div class="page">
    <p>Road Map</p>
    <p>Introduction  Generic approach to cycle-free routing</p>
    <p>(GACR)  Fault-tolerant Fibonacci routing (FTFR)  Experimental results  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Conclusion and future work</p>
    <p>Applicable to all Fibonacci-class cubes in a unified fashion.</p>
    <p>Although the Fibonacci-class cubes may be very sparsely connected, the algorithm can tolerate as many faulty components as the network node availability.</p>
    <p>The space and computation complexity as well as message overhead size are all moderate.</p>
    <p>Future: increase the number of faulty components tolerable, physical implementation.</p>
  </div>
  <div class="page">
    <p>Questions are</p>
    <p>welcomed.</p>
    <p>Thank you !</p>
  </div>
</Presentation>
