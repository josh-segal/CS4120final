<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Case of the Fake Picasso! Preventing History Forgery with</p>
    <p>Secure Provenance</p>
    <p>Ragib Hasan* , Radu Sion+ , Marianne Winslet * Dept. of Computer Science * University of Illinois at Urbana-Champaign + Stony Brook University</p>
    <p>USENIX FAST 2009 February 25, 2009</p>
  </div>
  <div class="page">
    <p>Lets play a game</p>
    <p>Can you spot the fake Picasso?</p>
    <p>Real, worth $101.8 million Fake, listed at eBay, worth nothing</p>
  </div>
  <div class="page">
    <p>So, how do art buyers authenticate art? Among other things, they look at provenance records</p>
    <p>Provenance: from Latin provenire come from, defined as</p>
    <p>(i) the fact of coming from some particular source or quarter; origin, derivation.</p>
    <p>(ii) the history or pedigree of a work of art, manuscript, rare book, etc.; a record of the ultimate derivation and passage of an item through its various owners (Oxford English Dictionary)</p>
    <p>In other words, who owned it, what was done to it, how was it transferred</p>
    <p>Widely used in arts, archives, and archeology, called the Fundamental Principle of Archival.</p>
    <p>http://moma.org/collection/provenance/items/644.67.htmlL'artiste et son modle (1928), at Museum of Modern Art</p>
  </div>
  <div class="page">
    <p>Data is generated, processed, and transmited between different systems and principals, and stored in</p>
    <p>database/storage</p>
    <p>Unlike data processing in the past, digital data can be rapidly copied, modified, and</p>
    <p>erased To trust data we receive from others or retrieve from storage,</p>
    <p>we need to look into the integrity of both the present state and the past history of data</p>
    <p>Lets consider the digital world Am I getting back</p>
    <p>untampered data?</p>
    <p>Was this data created and processed by persons I</p>
    <p>trust?</p>
    <p>Our life today has become increasingly dependent on digital data Our Most Valuable Asset is Data</p>
  </div>
  <div class="page">
    <p>What exactly is data provenance? Definition*</p>
    <p>Description of the origins of data and the process by which it arrived at the database. [Buneman et al.]</p>
    <p>Information describing materials and transformations applied to derive the data. [Lanter]</p>
    <p>Information that helps determine the derivation history of a data product, starting from its original sources. [Simmhan et al.]</p>
    <p>*Simmhan et al. A Survey of Provenance in E-Science. SIGMOD Record, 2005.</p>
  </div>
  <div class="page">
    <p>Example provenance systems</p>
    <p>Simmhan et al., 2005</p>
  </div>
  <div class="page">
    <p>What was the common theme of all those systems?</p>
    <p>They were all scientific computing systems  And scientists trust people (more or less)</p>
    <p>Previous research covers provenance collection, annotation, querying, and workflow, but security issues are not handled</p>
    <p>For provenance in untrusted environments, we need integrity, confidentiality and privacy guarantees</p>
    <p>So, we need provenance of provenance, i.e. a model for Secure Provenance</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>Secure provenance means preventing undetectable history rewriting</p>
    <p>Adversaries cannot insert fake events, remove genuine events from a documents provenance</p>
    <p>No one can deny history of own actions</p>
    <p>Allow fine grained preservation of privacy and confidentiality of actions  Users can choose which auditors can see details of their work  Attributes can be selectively disclosed or hidden without</p>
    <p>harming integrity check</p>
  </div>
  <div class="page">
    <p>Usage and threat model  Users: Edit documents on their</p>
    <p>machines  Documents: Are edited, transmitted</p>
    <p>to other users  Provenance entry = record of a users</p>
    <p>modifications and related context  Provenance chain = chronologically</p>
    <p>sorted list of entries; accompanies the document PAlice PBob PCharlie</p>
    <p>Marvin</p>
    <p>Alice Bob Charlie</p>
    <p>Audrey</p>
    <p>PAlice PBob PCharlie</p>
    <p>PMarvin</p>
    <p>Auditors: semi-trusted principals All auditors can verify chain integrity Only certain auditors can read each entry</p>
    <p>Adversaries: insiders or outsiders who  Add or remove history entries  Collude with others to</p>
    <p>add/remove entries  Claim a chain belongs to another</p>
    <p>document  Repudiate an entry</p>
    <p>Ragib Hasan, Radu Sion, and Marianne Winslett, Introducing Secure Provenance: Problems and Challenges, ACM StorageSS 2007</p>
  </div>
  <div class="page">
    <p>Previous work on integrity assurances  (Logically) centralized repository (CVS, Subversion, GIT)</p>
    <p>Changes to files recorded  Not applicable to mobile documents</p>
    <p>File systems with integrity assurances (SUNDR, PASIS, TCFS)  Provide local integrity checking  Do not apply to data that traverses systems</p>
    <p>System state entanglement (Baker 02)  Entangle one systems state with another, so others can serve as witness</p>
    <p>to a systems state  Not applicable to mobile data</p>
    <p>Secure audit logs / trails (Schneier and Kelsey 99), LogCrypt (Holt 2004), (Peterson et al. 2006)  Trusted notary certifies logs, or trusted third party given hash chain seed</p>
  </div>
  <div class="page">
    <p>Our solution: Overview</p>
    <p>Ui = identity of the principal</p>
    <p>(lineage) Ki = confidentiality</p>
    <p>locks for Wi Wi = Encrypted</p>
    <p>modification log Ci = integrity checksum(s)</p>
    <p>P1 P2 P3 P4 Pn-1 Pn</p>
    <p>U3 W3 K3 C3 Pub3</p>
    <p>Uid3 Pid3 Host3 IP3 time3</p>
    <p>Provenance Chain</p>
    <p>Provenance Entry</p>
  </div>
  <div class="page">
    <p>Our solution: Confidentiality</p>
    <p>Modification log Encrypted Modification log</p>
    <p>A single auditor</p>
    <p>Modification log Encrypted Modification log</p>
    <p>Multiple auditors</p>
    <p>Encrypted Modification log</p>
    <p>Modification log Encrypted Modification log</p>
    <p>Optimization: Use broadcast encryption tree to reduce number of required keys</p>
    <p>Issues</p>
    <p>Each user trusts a subset of the auditors</p>
    <p>Only the auditor(s) trusted by the user can see the users actions on the document</p>
  </div>
  <div class="page">
    <p>Our solution: Confidentiality</p>
    <p>ki is a secret key that authorized auditors can retrieve from the field Ki</p>
    <p>wi is either the diff or the set of actions taken on the file</p>
    <p>P1 P2 P3 P4 Pn-1 Pn</p>
    <p>U3 W3 K3 C3 Pub3</p>
    <p>Wi = Eki (wi)|hash(D) Ki = {Eka (ki) }</p>
    <p>ka is the key of a trusted auditor</p>
  </div>
  <div class="page">
    <p>Our solution: Integrity</p>
    <p>Ci = Sprivate_i (hash(Ui,Wi,Ki)|Ci1)</p>
    <p>Old Provenance Entry Old Checksum New Provenance Entry New Checksum</p>
    <p>Hash</p>
    <p>Sign</p>
  </div>
  <div class="page">
    <p>Fine grained control over confidentiality</p>
    <p>Nonsensitive Information Sensitive Information</p>
    <p>commitment</p>
    <p>Nonsensitive Info Sensitive info Commit(sensitive info)</p>
    <p>Checksum calculation</p>
    <p>Nonsensitive Info Commit(sensitive info)</p>
    <p>Original attributes</p>
    <p>Disclosable provenance entry</p>
    <p>Blinded entry disclosed to third party</p>
    <p>Classified Document Redacted (unclassified) Document</p>
    <p>P1 P2 P3 P4 P1 P2 P3 P4</p>
    <p>Declassify / release Provenance chain has sensitive info</p>
    <p>Deleting sensitive information will break integrity checks</p>
  </div>
  <div class="page">
    <p>We can summarize provenance chains to save space, make audits fast</p>
    <p>We can systematically remove entries from the chain while still being able to prove integrity of chain</p>
    <p>n:1 chain</p>
    <p>Each entry has 1 checksum, calculated from 1 previous checksum</p>
    <p>Each entry has n checksums, each of them calculated from 1 previous checksum</p>
  </div>
  <div class="page">
    <p>Our Sprov application-level library requires almost no application changes</p>
    <p>Sprov provides the file system APIs from stdio.h</p>
    <p>To add secure provenance, simply relink applications with Sprov library instead of stdio.h</p>
  </div>
  <div class="page">
    <p>Experimental settings</p>
    <p>Crypto settings  1024 bit DSA signatures  128 bit AES encryption  SHA-1 for hashes</p>
    <p>Experiment platform  Linux 2.6.11 with ext3  Pentium 3.4 GHz, 2GB RAM,  Disks: Seagate Barracuda 7200 rpm, WD Caviar SE16 7200 rpm</p>
    <p>Modes Config-Disk : Provenance chains stored on Disk Config-RD: Provenance chains stored on RAM Disk buffer, and</p>
    <p>periodically saved to disk</p>
  </div>
  <div class="page">
    <p>Postmark small file benchmark: Overhead &lt; 5% for realistic workloads</p>
    <p>20,000 small files (8KB-64KB) subjected to 100% to 0% write load with the Postmark benchmark</p>
    <p>At 100% write load, execution time overhead of using secure provenance over the noprovenance case is approx. 27% (12% with RD)</p>
    <p>At 50% write load, overheads go down to 16% (3% with RD)</p>
    <p>Overheads are less than 5% with 20% or less write load</p>
    <p>Config-Disk</p>
    <p>Config-RD</p>
  </div>
  <div class="page">
    <p>Hybrid workloads: Simulating real file systems</p>
    <p>File system distribution:  File size distribution in real file systems follows the log normal distribution</p>
    <p>[Bolosky and Douceur 99]  Median file size = 4KB , mean file size = 80KB  We created a file system with 20,000 files, using the lognormal parameters mu =</p>
    <p>Workload  INS: Instructional lab (1.1% writes) [Roselli 00]  RES: A research lab (2.9% writes) [Roselli 00]  CIFS-Corp: (15% writes) [Leung 08]  CIFS-Eng: (17% writes) [Leung 08]  EECS: (82% writes) [Ellard 03]</p>
  </div>
  <div class="page">
    <p>Typical real life workloads: 1 - 13% overhead</p>
    <p>INS and RES are read-intensive (80%+ reads), so overheads are very low in both cases.  CIFS-corp and CIFS-eng have 2:1 ratio of reads and writes, overheads are still low (range</p>
    <p>from 12% to 2.5%)  EECS has very high write load (82%+), so the overhead is higher, but still less than 35% for</p>
    <p>Config-Disk, and less than 7% for Config-RD</p>
    <p>Config-Disk Config-RD</p>
    <p>EECS</p>
    <p>CIFS-corp/eng</p>
    <p>INS, RES INS, RES</p>
    <p>EECS</p>
    <p>CIFS-corp/eng</p>
  </div>
  <div class="page">
    <p>Summary: Secure provenance possible at low cost</p>
    <p>Yes, We CAN achieve secure provenance with integrity and confidentiality assurances with reasonable overheads</p>
    <p>For most real-life workloads, overheads are between 1% and 15% only</p>
    <p>More info at htp://tinyurl.com/secprov</p>
  </div>
</Presentation>
