<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FuzzGen: Automatic Fuzzer Generation</p>
    <p>Kyriakos Ispoglou Google Inc.</p>
    <p>Daniel Austin Atlassian</p>
    <p>Vishwath Mohan Google Inc.</p>
    <p>Mathias Payer EPFL</p>
  </div>
  <div class="page">
    <p>Fuzzing libraries is hard  Cannot run as standalone programs  No dependency information across API</p>
    <p>Goal: Invoke API in the right order with the right arguments  Build complex, shared state to pass between calls  Reduce false positives (e.g. dont fuzz buffer lengths)</p>
    <p>Current approaches: AFL, libFuzzer  Low code coverage, manual, not scalable</p>
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Intuition Behind FuzzGen  Library code alone is insufficient</p>
    <p>Leverage a whole system analysis to synthesize fuzzers</p>
    <p>Utilize library consumers to:  Infer librarys API  Expose API interactions</p>
    <p>Abstract API Dependence Graph  Translate into (lib)Fuzzer stub</p>
  </div>
  <div class="page">
    <p>Design How its made</p>
  </div>
  <div class="page">
    <p>Constructing A2DG</p>
    <p>Synthesizing fuzzer stubs</p>
    <p>Inferring Argument Values</p>
    <p>Inferring API</p>
  </div>
  <div class="page">
    <p>Constructing A2DG</p>
    <p>Synthesizing fuzzer stubs</p>
    <p>Inferring Argument Values</p>
    <p>Inferring API</p>
  </div>
  <div class="page">
    <p>: All declared functions in the library</p>
    <p>: All declared functions in all consumer header files</p>
    <p>The final librarys API will be:</p>
    <p>Inferring API</p>
  </div>
  <div class="page">
    <p>Synthesizing fuzzer stubs</p>
    <p>Inferring Argument Values</p>
    <p>Inferring API</p>
    <p>Constructing A2DG</p>
  </div>
  <div class="page">
    <p>Abstract layout of a single library consumer</p>
    <p>Exposes complicated API interactions &amp; dependencies</p>
    <p>Encapsulates both control &amp; data dependencies</p>
    <p>Directed graph of API calls, generated from CFG  Node: An API call  Edge: The control flow between 2 API calls</p>
    <p>Abstract API Dependence Graph (A2DG)</p>
  </div>
  <div class="page">
    <p>A2DG Construction Example</p>
    <p>CFGA2DG</p>
  </div>
  <div class="page">
    <p>Each consumer has its own A2DG</p>
    <p>Coalesce A2DGs into a single one</p>
    <p>At least one common node is required  Common Node: Same API call &amp; same argument type</p>
    <p>Coalesce A2DGs by merging common nodes</p>
    <p>A2DG Coalescing</p>
  </div>
  <div class="page">
    <p>A2DG Coalescing Example</p>
  </div>
  <div class="page">
    <p>A2DG Coalescing Example</p>
  </div>
  <div class="page">
    <p>Inferring Argument Values</p>
    <p>Constructing A2DG</p>
    <p>Synthesizing fuzzer stubs</p>
    <p>Inferring API</p>
  </div>
  <div class="page">
    <p>Inferring Argument Values  Not all arguments should be fuzzed:</p>
    <p>void *memcpy(void *dest, const void *src, size_t n);  if (argc &gt; 3) {  }</p>
    <p>Decide what to fuzz and how to fuzz it  Infer argument space (Dataflow analysis + Backward slice)  Find dataflow dependencies across arguments</p>
    <p>Give attributes to each argument</p>
  </div>
  <div class="page">
    <p>Constructing A2DG</p>
    <p>Synthesizing fuzzer stubs</p>
    <p>Inferring Argument Values</p>
    <p>Inferring API</p>
  </div>
  <div class="page">
    <p>Synthesizing Fuzzer Stubs  Goal: Lift A2DG into C++ statements</p>
    <p>Leverage fuzzer entropy to traverse A2DG at runtime  Fuzzer explores the good paths</p>
    <p>Fuzzers should be fast to maximize random input tests  Encoding every A2DG edge reduces performance</p>
    <p>Flatten A2DG 17</p>
  </div>
  <div class="page">
    <p>Goal: Preserve the order of every API call</p>
    <p>Invoke every function exactly once</p>
    <p>Flattening algorithm:  Drop backward edges from A2DG to make it acyclic  Topologically sort to group nodes</p>
    <p>Results in a sequence of groups  Permute functions within group at runtime</p>
    <p>A2DG Flattening</p>
  </div>
  <div class="page">
    <p>A2DG Flattening Example</p>
    <p>Group #1: opus_packet_get_bandwidth &amp; opus_get_version_string</p>
    <p>Group #3: opus_decoder_create</p>
    <p>Group #2: opus_packet_get_nb_channels &amp; opus_get_version_string</p>
    <p>Group #4: opus_decoder_ctl &amp; opus_decoder_decode</p>
    <p>Group #5: opus_decoder_decode</p>
    <p>Group #6: opus_decoder_decode</p>
    <p>Group #7: opus_decoder_destory</p>
    <p>Group #8: opus_get_version_string</p>
  </div>
  <div class="page">
    <p>Evaluation Proof of Work</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Evaluate on Debian &amp; Android  7 codec libraries  libfuzzer + ASAN  24 hr experiments * 5 times each</p>
    <p>17 Bugs Found, 6 got a CVE:  CVE-2019-2176  CVE-2019-2108  CVE-2019-2107  CVE-2019-2106  CVE-2017-13187  CVE-2017-0858 (duplicate)</p>
  </div>
  <div class="page">
    <p>Comparing against manually written fuzzers  If no fuzzer found online, we created one</p>
    <p>Average Edge Coverage  FuzzGen fuzzers: 54.94% vs 48.00% of manual fuzzers  FuzzGen explores more aspects of the library</p>
    <p>Measuring bugs found  FuzzGen fuzzers: 17 vs 29 of manual fuzzers  Manual fuzzers test more thoroughly buggy parts</p>
    <p>Evaluation - Metrics</p>
  </div>
  <div class="page">
    <p>Evaluation - Edge Coverage for libavc</p>
  </div>
  <div class="page">
    <p>Whole system analysis infers API interactions</p>
    <p>Automatically synthesize high entropy (lib)Fuzzer stubs  Construct complex program state  Achieve high code coverage</p>
    <p>Evaluation found 6 CVEs and 17 previously unknown bugs</p>
    <p>Source code: https://github.com/HexHive/FuzzGen  (~20.000 LoC in C++ using LLVM)</p>
    <p>Conclusion</p>
  </div>
</Presentation>
