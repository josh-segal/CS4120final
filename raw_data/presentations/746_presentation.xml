<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Qi Zhang, Eren Gurses, Jin Xiao, Raouf Boutaba</p>
  </div>
  <div class="page">
    <p>Introduction  Cloud computing aims at providing resources to customers in an</p>
    <p>on-demand manner  A customer can purchase resources dynamically based on the current</p>
    <p>needs</p>
    <p>Typically, cloud providers employ usage-based pricing  A fixed unit price is specified for each type of VM offerings</p>
    <p>However, fixed pricing schemes lack incentives to encourage desirable customer behavior  Low demand results in poor resource utilization  high demand leads to revenue loss and customer dissatisfaction</p>
    <p>Market-based resource allocation is gaining popularity  Let the price fluctuates with supply and demand</p>
  </div>
  <div class="page">
    <p>Amazon EC2 Spot Instance Service</p>
    <p>Launched on Dec. 15, 2009  Multiple VM types per</p>
    <p>availability zone  Customers submit requests</p>
    <p>with bidding prices  Spot price fluctuates with</p>
    <p>supply and demand  Instances may be terminated</p>
    <p>with prior notice Price of a single m1.small linux instance in US-East-1 between Mar. 14- Mar. 20, 2011</p>
  </div>
  <div class="page">
    <p>Motivation  Multiple spot markets sharing the same resource pool</p>
    <p>As request arrival can be highly volatile, sometimes certain markets may be hotter than others</p>
    <p>A static allocation strategy can lead to situations where markets are over-supplied or under-supplied  Over-supplying a market causes poor resource utilization  Under-supplying a market leads to low income and customer</p>
    <p>dissatisfaction</p>
    <p>How to dynamically allocate resources to spot markets?</p>
  </div>
  <div class="page">
    <p>Contribution  We propose a framework that dynamically adjust supply of</p>
    <p>spot markets to maximize total revenue</p>
    <p>Challenges  Need to predict future demand for every spot market  Need to determine the allocation strategy that optimizes revenue</p>
    <p>Our solution  Predicting future demand using an autoregressive (AR) model  Compute expected spot price and allocation for each market to</p>
    <p>maximize total revenue  Schedule VMs according to expected price</p>
  </div>
  <div class="page">
    <p>Capacity Planner</p>
    <p>System Architecture</p>
    <p>Type 1</p>
    <p>Market Analyzer</p>
    <p>VM Scheduler</p>
    <p>Type 2</p>
    <p>Type 3</p>
    <p>Type 1</p>
    <p>Type 3 Type 3</p>
    <p>Type 1</p>
    <p>Type 1 Type 3</p>
    <p>Type 3</p>
  </div>
  <div class="page">
    <p>Demand Prediction</p>
    <p>Price</p>
    <p>Quantity</p>
    <p>P3 P2 P1</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q3</p>
    <p>Quantity</p>
    <p>t time</p>
    <p>q3</p>
    <p>t+T</p>
    <p>q2</p>
    <p>q1</p>
    <p>Demand curve can be modeled as a non-increasing, piecewiselinear function</p>
    <p>Predicting future demand curve using autoregressive (AR) functions</p>
    <p>Demand curve Predicting future demand curve</p>
  </div>
  <div class="page">
    <p>Computing Expected Allocation  Goal: determine the expected price and allocation of</p>
    <p>resources to spot markets to maximize total revenue</p>
    <p>Simple case: Prices are fixed  This problem is a variant of the NP-hard multiple knapsack</p>
    <p>problem (MKP)</p>
    <p>Real case: Prices are not fixed  Much harder than MKP, as objective function is non-linear  By approximating the revenue using a concave function, the</p>
    <p>problem can be reduced to a MKP</p>
  </div>
  <div class="page">
    <p>Scheduling Algorithm</p>
    <p>Type 1</p>
    <p>Scheduler</p>
    <p>Type 3</p>
    <p>Type 1</p>
    <p>Type 1</p>
    <p>Type 1</p>
    <p>Type 3</p>
    <p>Type 3</p>
    <p>Type 3</p>
    <p>Type 3</p>
    <p>Type 3</p>
    <p>Type 1</p>
    <p>Type 1</p>
    <p>Type 1</p>
    <p>Type 2</p>
    <p>Type 2</p>
    <p>Requests to be scheduled</p>
  </div>
  <div class="page">
    <p>Experiment Setup  Implemented the scheduler using CloudSim</p>
    <p>Modified default resource allocation policies</p>
    <p>Workload  Non-homogenous poisson process with artificial high and low</p>
    <p>arrival periods  Bidding price and running time are generated from normal</p>
    <p>distributions</p>
    <p>Scheduling policies  Static allocation for each individual market  Our dynamic allocation scheme</p>
  </div>
  <div class="page">
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Conclusion  Market-based resource allocation mechanisms provide</p>
    <p>economic incentives to encourage desirable customer behavior</p>
    <p>We have presented a framework that dynamically adjust supply for different spot markets, with the goal of maximizing total revenue  Practical and applicable for any market-based cloud</p>
    <p>environment that uses uniform price scheme</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Questions?</p>
  </div>
</Presentation>
