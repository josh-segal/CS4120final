<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>THE ZCACHE: DECOUPLING WAYS AND ASSOCIATIVITY</p>
    <p>Daniel Sanchez and Christos Kozyrakis</p>
    <p>Stanford University</p>
    <p>MICRO-43, December 6th 2010</p>
  </div>
  <div class="page">
    <p>Executive Summary</p>
    <p>Mitigating the memory wall requires large, highly associative caches</p>
    <p>Last-level caches take ~50% chip area, have 24-32 ways in latest CMPs</p>
    <p>More ways  large energy, latency and area overheads</p>
    <p>ZCache: A highly associative cache with a low number of ways</p>
    <p>ZCache: A highly associative cache with a low number of ways</p>
    <p>Improves associativity by increasing number of replacement candidates</p>
    <p>Retains low energy/hit, latency and area of caches with few ways</p>
    <p>Based on skew-associative caches and cuckoo hashing</p>
    <p>Analytical framework explains why zcache works</p>
    <p>Associativity depends on number of replacement candidates, not ways or locations a block can be in</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZCache</p>
    <p>Analytical Framework</p>
    <p>Evaluation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Uses of high associativity:</p>
    <p>Improve performance by reducing conflict misses</p>
    <p>Partitioning, pinning, storing speculative data ( e.g. TM, TLS)</p>
    <p>Increasing number of ways affects area, delay, energy</p>
    <p>Increasing number of ways affects area, delay, energy</p>
    <p>Area Hit Latency Hit Energy</p>
    <p>In cr e a s e o v e r 4 -w</p>
    <p>a y ( % )</p>
    <p>-4</p>
    <p>-2</p>
    <p>rand0 ammp_m</p>
    <p>IP C i m p ro v e m e n t</p>
    <p>v s 4 -w</p>
    <p>a y ( % )</p>
  </div>
  <div class="page">
    <p>Techniques for high associativity (1/2): Increase number of locations</p>
    <p>Allow multiple locations per way</p>
    <p>Column-associative caches [Agarwal93], set-balancing cache [Rolan09],</p>
    <p>Hit latency , hit energy</p>
    <p>Use a victim cache</p>
    <p>VC [Jouppi90], Scavenger [Basu07],</p>
    <p>Area , hit latency , hit energy</p>
    <p>Use indirection in the tag array</p>
    <p>IIC [Hallnor00], V-Way cache [Qureshi05]</p>
    <p>Area , hit latency , hit energy</p>
  </div>
  <div class="page">
    <p>Techniques for high associativity (2/2): Better hashing</p>
    <p>Use a hash function to index the cache</p>
    <p>Simple hashing significantly reduces conflicts [Karbutli04]</p>
    <p>Skew-associative caches [Seznec93]  Index each way using a different hash function</p>
    <p>A line conflicts with a different set of lines on each way, reducing</p>
    <p>A line conflicts with a different set of lines on each way, reducing conflict misses</p>
    <p>No sets, cannot use replacement policy that relies on set ordering</p>
    <p>H</p>
    <p>Line address</p>
    <p>Set index</p>
    <p>Hash function</p>
    <p>Way0 Way1 Way2</p>
    <p>Indexes</p>
    <p>H0</p>
    <p>H1</p>
    <p>H2</p>
    <p>Line address</p>
    <p>Way0 Way1 Way2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZCache</p>
    <p>Analytical Framework</p>
    <p>Evaluation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>The ZCache Design</p>
    <p>Lookups and hits happen as in a skew-associative cache</p>
    <p>Indexes</p>
    <p>H0</p>
    <p>H1</p>
    <p>H2</p>
    <p>Line address</p>
    <p>Way0 Way1 Way2</p>
    <p>Misses exploit the multiple hash functions to obtain an arbitrarily large number of replacement candidates</p>
    <p>Phase 1: Walk the tag array, get best candidate</p>
    <p>Phase 2: Move a few lines to fit everything</p>
    <p>This happens infrequently (on misses) and off the critical path</p>
    <p>Draws on prior research in cuckoo hashing</p>
  </div>
  <div class="page">
    <p>D</p>
    <p>M</p>
    <p>ZCache Replacement 9</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>H0</p>
    <p>H1</p>
    <p>Y</p>
    <p>A</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>Start replacement process while fetching Y</p>
    <p>A</p>
    <p>G</p>
    <p>Z</p>
    <p>T</p>
    <p>Q</p>
    <p>IH2</p>
    <p>L O S</p>
    <p>MISS</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>H0</p>
    <p>H1</p>
    <p>Y</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>D</p>
    <p>M</p>
    <p>AA</p>
    <p>G</p>
    <p>Z</p>
    <p>T</p>
    <p>Q</p>
    <p>IH2</p>
    <p>L O S</p>
  </div>
  <div class="page">
    <p>ZCache Replacement 11</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>H0</p>
    <p>H1</p>
    <p>A</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>A</p>
    <p>K</p>
    <p>X</p>
    <p>Instead of evicting A, can move it and evict K or X</p>
    <p>A</p>
    <p>G</p>
    <p>Z</p>
    <p>T</p>
    <p>Q</p>
    <p>IH2</p>
    <p>L O S</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>H0</p>
    <p>H1</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>A</p>
    <p>G</p>
    <p>Z</p>
    <p>T</p>
    <p>Q</p>
    <p>IH2</p>
    <p>L O S</p>
    <p>Addr Y A D M</p>
    <p>H0 5 5 3 2</p>
    <p>H1 4 2 4 5</p>
    <p>H2 0 1 7 0</p>
    <p>candidates</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>H0</p>
    <p>H1</p>
    <p>B</p>
    <p>K</p>
    <p>X</p>
    <p>P</p>
    <p>Z</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>A</p>
    <p>G</p>
    <p>Z</p>
    <p>T</p>
    <p>Q</p>
    <p>IH2</p>
    <p>L O S</p>
    <p>candidates</p>
    <p>Addr Y A D M</p>
    <p>H0 5 5 3 2</p>
    <p>H1 4 2 4 5</p>
    <p>H2 0 1 7 0</p>
    <p>Z</p>
    <p>S</p>
    <p>B K X P Z S</p>
    <p>candidates</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>H0</p>
    <p>H1</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>A</p>
    <p>G</p>
    <p>Z</p>
    <p>T</p>
    <p>Q</p>
    <p>IH2</p>
    <p>L O S</p>
    <p>Addr Y A D M B K X P Z S</p>
    <p>H0 5 5 3 2 3 7 4 2 6 1</p>
    <p>H1 4 2 4 5 6 2 3 3 5 2</p>
    <p>H2 0 1 7 0 1 0 1 5 3 7</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>Y</p>
    <p>A</p>
    <p>K X</p>
    <p>D</p>
    <p>B Z</p>
    <p>M</p>
    <p>PS</p>
    <p>L M N E T X G RE QF K</p>
    <p>Addr Y A D M B K X P Z S</p>
    <p>H0 5 5 3 2 3 7 4 2 6 1</p>
    <p>H1 4 2 4 5 6 2 3 3 5 2</p>
    <p>H2 0 1 7 0 1 0 1 5 3 7</p>
    <p>Chosen by replacement policy (e.g. LRU block)</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>Y</p>
    <p>A</p>
    <p>K X</p>
    <p>D</p>
    <p>B Z</p>
    <p>M</p>
    <p>PS</p>
    <p>L M N E</p>
    <p>U</p>
    <p>F</p>
    <p>N</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>G</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>T</p>
    <p>M</p>
    <p>X</p>
    <p>J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>I</p>
    <p>L O S</p>
    <p>Y</p>
    <p>T X G RE QF K</p>
  </div>
  <div class="page">
    <p>ZCache Replacement</p>
    <p>Y</p>
    <p>A</p>
    <p>K X</p>
    <p>D</p>
    <p>B Z</p>
    <p>M</p>
    <p>PS</p>
    <p>L M N E</p>
    <p>U</p>
    <p>F</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>G</p>
    <p>V</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>K</p>
    <p>Z</p>
    <p>T</p>
    <p>M</p>
    <p>X J</p>
    <p>R</p>
    <p>H</p>
    <p>Q</p>
    <p>I</p>
    <p>L O S</p>
    <p>Y</p>
    <p>T X G RE QF K</p>
  </div>
  <div class="page">
    <p>ZCache Replacement 18</p>
    <p>Hits always take a single lookup</p>
    <p>U</p>
    <p>F</p>
    <p>B</p>
    <p>P</p>
    <p>A</p>
    <p>V</p>
    <p>C</p>
    <p>E</p>
    <p>K</p>
    <p>M</p>
    <p>R</p>
    <p>H H0 5</p>
    <p>M 0</p>
    <p>Way 0 Way 1 Way 2</p>
    <p>B</p>
    <p>G</p>
    <p>D</p>
    <p>E</p>
    <p>Z</p>
    <p>T</p>
    <p>X J</p>
    <p>R</p>
    <p>Q</p>
    <p>I</p>
    <p>L O S</p>
    <p>Y</p>
    <p>H1</p>
    <p>H2</p>
    <p>Y 4</p>
    <p>HIT</p>
    <p>D</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>ZCache Implementation Overview</p>
    <p>Replacements take place:</p>
    <p>Off the critical path</p>
    <p>Concurrently with other operations</p>
    <p>Walk accesses are pipelined</p>
    <p>Do not saturate tag bandwidth</p>
    <p>No effect on hit latency</p>
    <p>Do not saturate tag bandwidth in practice</p>
    <p>Energy per miss mostly determined by walk  Similar to set-associative cache of same associativity</p>
    <p>Cheap to implement  SRAM with 10s of bits to track candidates</p>
    <p>Leverages existing MSHRs</p>
    <p>See paper for more details</p>
  </div>
  <div class="page">
    <p>Number of Candidates</p>
    <p>An L-level walk on a W-way zcache gets R candidates:</p>
    <p>=</p>
    <p>= L</p>
    <p>n</p>
    <p>n WWR</p>
    <p>)1(</p>
    <p>L W 2 3 4 8</p>
    <p>Few ways (W=4) give many candidates with shallow walks</p>
    <p>Ratio of tag bandwidth vs bandwidth of next level limits number of candidates</p>
    <p>L W</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZCache</p>
    <p>Analytical Framework</p>
    <p>Evaluation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>An Analytical Associativity Framework</p>
    <p>Comparing associativity across cache designs is hard</p>
    <p>Ways do not mean much</p>
    <p>Conflict misses are workload and architecture-specific</p>
    <p>Goals</p>
    <p>Goals</p>
    <p>Find a general way to characterize associativity</p>
    <p>Analyze what determines the performance of a zcache</p>
  </div>
  <div class="page">
    <p>General Cache Model</p>
    <p>Cache array:</p>
    <p>Holds tags and data</p>
    <p>Implements associative lookup by address</p>
    <p>On a replacement, gives list of replacement candidates</p>
    <p>On a replacement, gives list of replacement candidates</p>
    <p>Model assumes nothing about array organization</p>
    <p>Replacement policy: Maintains a global rank of which cache blocks to replace</p>
    <p>All policies conceptually do (LRU, LFU, OPT, )</p>
    <p>Implementation does not need to</p>
  </div>
  <div class="page">
    <p>Associativity Distribution</p>
    <p>Eviction priority: Rank of a block given by the replacement function, normalized to [0,1]</p>
    <p>Higher is better to evict</p>
    <p>Associativity distribution: Probability distribution of the eviction priorities of evicted blocks</p>
    <p>Higher associativity  distribution more skewed towards 1.0</p>
    <p>Measures how well the array does, not the replacement policy</p>
    <p>For good performance, replacement policy also needs to do a good job!</p>
  </div>
  <div class="page">
    <p>Uniformity Assumption</p>
    <p>If the cache array gives R replacement candidates with uniformly distributed priorities,</p>
    <p>},...,max{</p>
    <p>]1,0[...~,...,</p>
    <p>= EEA</p>
    <p>UdiiEE</p>
    <p>R</p>
    <p>R</p>
    <p>]1,0[,)()(</p>
    <p>},...,max{ 1</p>
    <p>==</p>
    <p>=</p>
    <p>xxxAPxF</p>
    <p>EEA</p>
    <p>R</p>
    <p>A</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>Associativity Distributions in Practice</p>
    <p>Set-associative caches do significantly worse than UA</p>
    <p>Hashing (H3) improves associativity, but still sensibly worse than UA</p>
  </div>
  <div class="page">
    <p>Associativity Distributions for ZCaches</p>
    <p>Skew-associative caches (1-level zcaches) are very close to UA</p>
    <p>close to UA</p>
    <p>Increasing candidates but not ways still yields distrib very close to UA</p>
  </div>
  <div class="page">
    <p>Analytical Framework: Conclusions</p>
    <p>In caches with good hashing, the number of replacement candidates R determines associativity</p>
    <p>ZCaches provide large number of candidates with few</p>
    <p>ZCaches provide large number of candidates with few ways  Decouple ways and associativity</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>ZCache</p>
    <p>Analytical Framework</p>
    <p>Evaluation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Infrastructure:</p>
    <p>CACTI-based models for cache cost estimates</p>
    <p>McPAT for full-CMP area, power estimations</p>
    <p>Microarchitectural simulation with Pin-based simulator</p>
    <p>Target system:</p>
    <p>Target system:  32 in-order x86-64 cores (single-issue, 2GHz, 32KB I/D L1s)</p>
    <p>Fully shared L2, 8MB, 8 1MB banks (set-assoc/zcache)</p>
    <p>All L2 caches use hashing (H3)</p>
    <p>72 workloads:  Multithreaded: PARSEC, SPECOMP</p>
    <p>Multiprogrammed: SPECCPU2006</p>
    <p>See paper for more details</p>
  </div>
  <div class="page">
    <p>Cache Costs</p>
    <p>SA 4-way SA 16-way SA 32-way Z 4/16 Z 4/52</p>
    <p>Each design is optimized for area*latency*energy</p>
    <p>ZCaches:</p>
    <p>Retain hit area, hit latency, hit energy of a 4-way SA cache</p>
    <p>Energy per miss comparable to similarly-associative SA cache</p>
    <p>Area (mm2)</p>
    <p>Hit Latency (ns)</p>
    <p>Hit Energy (nJ)</p>
    <p>Miss Energy (nJ)</p>
  </div>
  <div class="page">
    <p>Performance and Energy-Efficiency</p>
    <p>IP C i m p ro v e m e n t</p>
    <p>v s 4 -w</p>
    <p>a y ( % )</p>
    <p>SetAssoc 32-way Z 4-way/52-rc</p>
    <p>-5</p>
    <p>ammp_m rand0 cactusADM gmean (72) gmean (10)</p>
    <p>IP C</p>
    <p>v s</p>
    <p>-5</p>
    <p>ammp_m rand0 cactusADM gmean (72) gmean (10)</p>
    <p>B IP S /W</p>
    <p>im p ro v</p>
    <p>v s 4 -w</p>
    <p>a y ( % )</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>ZCaches enable efficient highly-associative caches</p>
    <p>Low number of ways</p>
    <p>Associativity gained by increasing replacement candidates</p>
    <p>Costs of high associativity (energy, tag bandwidth) paid only</p>
    <p>Costs of high associativity (energy, tag bandwidth) paid only on misses</p>
    <p>Analytical framework shows that replacement candidates determine associativity</p>
  </div>
  <div class="page">
    <p>THANK YOU FOR YOUR ATTENTION</p>
    <p>QUESTIONS?</p>
  </div>
  <div class="page">
    <p>Backup: Replacement Timeline 35</p>
    <p>Time</p>
    <p>Way0 Way1 Way2A</p>
    <p>d d</p>
    <p>re ss</p>
    <p>f o r</p>
    <p>re a</p>
    <p>d / w</p>
    <p>ri te</p>
    <p>Miss Walk Relocations</p>
    <p>A B P L N G F N A X Y D K Z T E E K M X S X M Q R X A</p>
    <p>A N A X Y D M X A</p>
    <p>Y N Y</p>
    <p>Way0 Way1 Way2</p>
    <p>Way0 Way1 Way2</p>
    <p>A d</p>
    <p>d re</p>
    <p>ss f</p>
    <p>o r</p>
    <p>Ta g</p>
    <p>p o rt</p>
    <p>o u t/</p>
    <p>in D</p>
    <p>a ta</p>
    <p>p o rt</p>
    <p>o u t/</p>
    <p>in</p>
    <p>Memory bus</p>
    <p>Fetch on miss Writeback (if needed) Miss response</p>
  </div>
  <div class="page">
    <p>Backup: LRU with coarse-grain timestamps 36</p>
    <p>8-bit timestamp per tag</p>
    <p>Tag each block with a global timestamp counter</p>
    <p>Increment timestamp every k=5% accesses</p>
    <p>Wraparounds are rare Wraparounds are rare</p>
    <p>T im</p>
    <p>e st</p>
    <p>a m</p>
    <p>p d</p>
    <p>is tr</p>
    <p>ib</p>
    <p>Timestamp 2550</p>
    <p>Current TS</p>
  </div>
</Presentation>
