<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Polaris: Faster Page Loads Using Fine- grained Dependency Tracking</p>
    <p>Ravi Netravali* Ameesh Goyal* James Mickens Hari Balakrishnan*</p>
    <p>*MIT CSAIL Harvard University</p>
  </div>
  <div class="page">
    <p>Web Performance  Users demand fast page loads  Slow page loads lead to lost revenue and low search rank</p>
  </div>
  <div class="page">
    <p>Page Load Client</p>
    <p>x.com web server</p>
    <p>HTTP GET /index.html</p>
    <p>&lt;script src=x.com/first.js/&gt;</p>
    <p>&lt;script src=x.com/second.js/&gt;</p>
    <p>&lt;link src=x.com/style.css/&gt;</p>
    <p>HTTP GET /first.js</p>
    <p>HTTP GET /second.js</p>
    <p>HTTP GET /style.css</p>
  </div>
  <div class="page">
    <p>Dependency Graphs</p>
    <p>index.html</p>
    <p>&lt;script src=x.com/first.js/&gt;</p>
    <p>&lt;script src=x.com/second.js/&gt;</p>
    <p>&lt;link src=x.com/style.css/&gt;</p>
    <p>first.js var x = 5;</p>
    <p>second.js var n = document.getElementsByTagName(link); if ( n == 0 ) {}</p>
    <p>style.css p { color: red; }</p>
    <p>index.html</p>
    <p>first.js</p>
    <p>style.css</p>
    <p>second.js</p>
    <p>Model page loads as directed acyclic graphs  Page load dme = dme to completely resolve dependency graph</p>
  </div>
  <div class="page">
    <p>Dependency Graphs</p>
    <p>Lexical HTML Dependencies</p>
    <p>index.html</p>
    <p>first.js second.js style.css</p>
    <p>index.html</p>
    <p>first.js</p>
    <p>style.css</p>
    <p>second.js</p>
    <p>True Dependency Graph</p>
    <p>index.html</p>
    <p>first.js</p>
    <p>second.js</p>
    <p>style.css</p>
    <p>HTML Tag Order</p>
    <p>Missing Dependencies</p>
    <p>Conservadve Assumpdons</p>
    <p>&lt;script src=x.com/first.js/&gt;</p>
    <p>&lt;script src=x.com/second.js/&gt;</p>
    <p>&lt;link src=x.com/style.css/&gt;</p>
  </div>
  <div class="page">
    <p>Outline  Scout: tracks fine-grained dependencies between pages objects</p>
    <p>Polaris: dynamic client-side scheduler wrigen in JavaScript  Uses fine-grained dependencies to reduce page load dmes</p>
    <p>Tradidonal dependency graphs miss 30% of edges</p>
    <p>34% faster (1.3 seconds) on 12 Mbits/s link with 100 ms RTT</p>
    <p>Client Server HTTP Request</p>
  </div>
  <div class="page">
    <p>Scout  Scout tracks many different dependencies across a pages state</p>
    <p>Write/Read first.js</p>
    <p>x = 6;</p>
    <p>second.js</p>
    <p>y = x + 5;</p>
    <p>Read/Write Write/Write first.js</p>
    <p>x = [1,3,5];</p>
    <p>third.js</p>
    <p>x.push(7);</p>
    <p>first.js</p>
    <p>alert(first message);</p>
    <p>second.js</p>
    <p>alert(second message);</p>
    <p>second.js</p>
    <p>y = x.length;</p>
  </div>
  <div class="page">
    <p>JS proxy objects</p>
    <p>var x =</p>
    <p>{prop: 1}; new Proxy({prop: 1}, log_handlers); read x.prop</p>
    <p>Log</p>
    <p>Read x.prop 1</p>
    <p>{prop: 1} x.prop = 9;</p>
    <p>write x.prop</p>
    <p>var y = x.prop;</p>
    <p>Write x.prop</p>
    <p>Tracking Dependencies</p>
    <p>Many others described in paper  Global variables  Recursive proxying (e.g., x.y.z)  DOM (e.g., document.getElementById(foo))</p>
    <p>{prop: 9}</p>
    <p>Proxy</p>
  </div>
  <div class="page">
    <p>What we found  Tradidonal graphs miss 30% of edges</p>
    <p>Tradidonal Dependency Graph Complete Dependency Graph</p>
    <p>Adding all edges  removes conservaJve assumpJons  faster page loads!</p>
    <p>weather.com</p>
    <p>80.8% of pages have altered cridcal paths</p>
  </div>
  <div class="page">
    <p>Polaris</p>
    <p>Scheduler Stub</p>
    <p>Unmodified Web</p>
    <p>Browser Fine-grained Dependency</p>
    <p>Graph</p>
    <p>HTTP(s) request (e.g., GET /)</p>
    <p>HTTP(s) response Offline</p>
    <p>Dependency Tracker (Scout) Client</p>
    <p>Web Servers</p>
    <p>Original HTML</p>
    <p>&lt;html&gt;  &lt;/html&gt;</p>
    <p>Scheduler Logic</p>
    <p>Fine-grained Dependency</p>
    <p>Graph</p>
  </div>
  <div class="page">
    <p>Request Scheduling with Polaris Always fetch objects on the dynamic criJcal path</p>
    <p>dynamic cridcal path</p>
    <p>stadc cridcal path</p>
    <p>Loaded object</p>
    <p>Unloaded object</p>
  </div>
  <div class="page">
    <p>Gains increase with increasing link rate</p>
    <p>Gains increase with increasing RTT</p>
    <p>Evaluadng Polaris</p>
    <p>Large error bars: page structure magers too!</p>
    <p>Baseline is Firefox (which does speculadve execudon)</p>
  </div>
  <div class="page">
    <p>Impact of Dependency Graph Structure</p>
    <p>weather.com</p>
    <p>apple.com</p>
    <p>Apple: scheduling doesnt mager (all requests have same priority)  Weather: short and long chains so scheduling magers</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Scout: tracks fine-grained dependencies between pages objects</p>
    <p>Polaris: dynamic client-side scheduler wrigen in JavaScript  Uses Scouts fine-grained dependencies to reduce page load dmes</p>
    <p>Prior dependency graphs miss 30% of edges</p>
    <p>34% faster (1.3 seconds) on 12 Mbits/s link with 100 ms RTT</p>
    <p>Browsers today are constrained by uncertainty!  Conservadve assumpdons lead to higher page load dmes</p>
    <p>hQp://web.mit.edu/polaris polarisweb@mit.edu</p>
    <p>Klotski (NSDI 15), WProf (NSDI 13), Browser Developer Tools</p>
  </div>
</Presentation>
