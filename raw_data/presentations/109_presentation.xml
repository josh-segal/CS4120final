<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reducing Accidental Complexity in Planning Problems</p>
    <p>P@trik Haslum</p>
    <p>National ICT Australia</p>
    <p>IJCAI07</p>
  </div>
  <div class="page">
    <p>A Theory of Easy Planning</p>
    <p>P@trik Haslum</p>
    <p>National ICT Australia</p>
    <p>IJCAI07</p>
  </div>
  <div class="page">
    <p>NICTAMotivation</p>
    <p>Accidental vs. Essential Complexity Planning is a hard problem... ...but not all planning problems are really hard. ...and even if a problem is hard, parts of the problem may be easy. Easy problems may be difficult to recognize when formulated in a domain-independent specification language (such as STRIPS).</p>
    <p>Reducing Accidental Complexity Applying solution-preserving (safe), polynomial simplifying problem transformations. Ideally, if the problem really is simple, it reduces to solved.</p>
  </div>
  <div class="page">
    <p>NICTAThe Main Tools</p>
    <p>Simplifications Transformations that reduce problem size and complexity.</p>
    <p>Relevance Analysis  Ignore irrelevant parts of the problem. Safe Abstraction  Postpone solving easy problem parts. Simple Decomposition  Solve independent parts separately.</p>
    <p>Reformulations Transformations that may enable further simplifications.</p>
    <p>Determined atom elimination. Action sequence composition. Compacting the representation.</p>
  </div>
  <div class="page">
    <p>NICTAResults</p>
    <p>IPC Domains Solved with Previous Techniques Logistics, Elevator-STRIPS</p>
    <p>IPC Domains Solved with New Techniques Gripper, Movie, Satellite</p>
    <p>IPC Domains with Significant Simplification Rovers (60  90% less atoms) Airport (40  60% less atoms) PSR (small; 0  50% less atoms).</p>
  </div>
  <div class="page">
    <p>NICTARepresentation</p>
    <p>Assume interchangeable (propositional) STRIPS and multi-valued state variable (SAS) representations. Variable domains correspond to exactly-one or at-most-one invariants of the STRIPS instance.</p>
    <p>The Domain Transition Graph (DTG) of a variable V is a directed graph on the domain of the variable with edges labeled by actions changing the variable.</p>
    <p>(pointing sat1 star0)</p>
    <p>(pointing sat1 ...){}/{}</p>
    <p>(pointing sat1 ...)</p>
    <p>{}/{}</p>
    <p>(pointing sat1 ...)</p>
    <p>{}/{}</p>
    <p>...</p>
    <p>{}/{}</p>
    <p>{}/{}</p>
    <p>{}/{} {}/{}</p>
    <p>{}/{} {}/{}</p>
    <p>{}/{}</p>
    <p>(avail)</p>
    <p>(on i1) {}/{(not (cal i1))}</p>
    <p>(on i2)</p>
    <p>{}/{(not (cal i2))}</p>
    <p>{}/{}</p>
    <p>{}/{}</p>
    <p>true false{} / {(movie-rewound)} {} / {}</p>
    <p>pointing(sat1) power(sat1) counter-at-zero</p>
  </div>
  <div class="page">
    <p>NICTASafe Abstraction</p>
    <p>(Hierarchical) Abstraction Planning Abstract away (forget) part of the problem; Solve what remains; Refine abstract solution by filling in the gaps; ...and do this recursively.</p>
    <p>Safe Abstraction Abstracting away a variable V is safe if every abstract solution is guaranteed to be refinable (Downward Refinement Property). In general,</p>
    <p>there may not be a (useful) safe abstraction hierarchy; deciding safeness is hard (as hard as planning?)</p>
  </div>
  <div class="page">
    <p>NICTASufficient Conditions for Safe Abstraction</p>
    <p>The free DTG of V is the subgraph of the variables DTG containing only actions with no pre- or post-condition on any variable besides V .</p>
    <p>(pointing sat1 star0)</p>
    <p>(pointing sat1 ...){}/{}</p>
    <p>(pointing sat1 ...)</p>
    <p>{}/{}</p>
    <p>(pointing sat1 ...)</p>
    <p>{}/{}</p>
    <p>...</p>
    <p>{}/{}</p>
    <p>{}/{}</p>
    <p>{}/{} {}/{}</p>
    <p>{}/{} {}/{}</p>
    <p>{}/{}</p>
    <p>(avail)</p>
    <p>(on i1) {}/{}</p>
    <p>(on i2) {}/{}</p>
    <p>truefalse {} / {}</p>
    <p>pointing(sat1) power(sat1) counter-at-zero</p>
    <p>Sufficient Conditions for Safe Abstractability of V (i) The free DTG is strongly connected (Helmert, 2005). (ii) Every value of V required by a non-free action is free</p>
    <p>reachable from the initial value of V and from from every value of V caused or required by a non-free action.</p>
  </div>
  <div class="page">
    <p>NICTA</p>
    <p>(pointing sat1 star0)</p>
    <p>(pointing sat1 ...){}/{}</p>
    <p>(pointing sat1 ...)</p>
    <p>{}/{}</p>
    <p>(pointing sat1 ...)</p>
    <p>{}/{}</p>
    <p>...</p>
    <p>{}/{}</p>
    <p>{}/{}</p>
    <p>{}/{} {}/{}</p>
    <p>{}/{} {}/{}</p>
    <p>{}/{}</p>
    <p>(avail)</p>
    <p>(on i1) {}/{}</p>
    <p>(on i2) {}/{}</p>
    <p>truefalse {} / {}</p>
    <p>pointing(sat1) power(sat1) counter-at-zero</p>
    <p>Safely abstractable by condition (i).</p>
    <p>Not safe to abstract. Safely abstractable by condition (ii) but not by (i).</p>
  </div>
  <div class="page">
    <p>NICTA</p>
    <p>Some Observations Can be done recursively: Abstracting away variable V makes a V -transition free if it previously depended only on V . Condition (ii) is strictly weaker than condition (i). Checking both conditions, and performing refinement, is polynomial in size of the domain of V . Both conditions trivially generalize to product variables, V1  V2  . . .  Vn, but the domain of the product variable may be exponentially large.</p>
  </div>
  <div class="page">
    <p>NICTAReformulations</p>
    <p>Determined Atom Elimination Certain invariants correspond to equivalences, which define some atoms in terms of other atoms; such atoms may then be eliminated by replacing them with the defining formula in action preconditions and goals.</p>
    <p>Action Sequence Composition Replacing a set of actions by all possible and useful macros over the set is safe if intermediate states are uninteresting, and can break temporary interactions between variables.</p>
    <p>Compacting the Representation Avoid building product variables with unnecessarily large domains.</p>
  </div>
  <div class="page">
    <p>NICTACompacting the Representation</p>
    <p>Example satellite problem, after abstraction of pointing(sat1):</p>
    <p>(avail)</p>
    <p>(on i1) {}/{(not (cal i1))}</p>
    <p>(on i2)</p>
    <p>{}/{(not (cal i2))}</p>
    <p>{}/{}</p>
    <p>{}/{}</p>
    <p>power(sat1)</p>
    <p>true false{power(sat1) = avail} / {power(sat1) = (on i1) {power(sat1) = (on i1)} / {}</p>
    <p>calibrated(i1)</p>
    <p>true false{power(sat1) = avail} / {power(sat1) = (on i2) {power(sat1) = (on i2)} / {}</p>
    <p>calibrated(i2)</p>
    <p>Product of all three variables is safely abstractable even though no variable is so by itself. Size of the product variable is product of individual variable sizes (i.e. exponential, in general).</p>
  </div>
  <div class="page">
    <p>NICTA</p>
    <p>Variables are Automata Accepting Sequences of Actions power(sat1)  cal(i1):</p>
    <p>{power = avail, (not (cal i1))</p>
    <p>{power = avail, (cal i1)}</p>
    <p>{power = (on i2), (cal i1)}</p>
    <p>(switch_on i2)</p>
    <p>{power = (on i1), (not (cal i1))</p>
    <p>(switch_on i1) {power = (on i1), (cal i1)}</p>
    <p>(switch_off i1)</p>
    <p>(switch_off i2)</p>
    <p>(switch_on i1)</p>
    <p>{power = (on i2), (not (cal i1))</p>
    <p>(switch_on i2)</p>
    <p>(calibrate i1)</p>
    <p>(switch_off i1) (switch_off i2)</p>
    <p>min(power(sat1)  cal(i1)):</p>
    <p>{power = avail, (not (cal i1))</p>
    <p>{power = (on i1), (cal i1)}</p>
    <p>(switch_off i1) {power = (on i1), (not (cal i1))</p>
    <p>(switch_on i1)</p>
    <p>{power = (on i2), (not (cal i1))</p>
    <p>(switch_on i2)</p>
    <p>(calibrate i1)</p>
    <p>(switch_off i1) (switch_off i2)</p>
    <p>Applying Myhill-Nerode minimization results in smaller automaton accepting exactly the same action sequences. Enforced by only changing action effects.</p>
  </div>
  <div class="page">
    <p>NICTA</p>
    <p>power(sat1)  cal(i1)  cal(i2) after minimization:</p>
    <p>{(power_avail), (not (cal i1)), (not (cal i2))}</p>
    <p>{(power_on i1), (not (cal i1)), (not (cal i2))}</p>
    <p>(switch_on i1)</p>
    <p>{(power_on i2), (not (cal i1)), (cal i2)}</p>
    <p>(switch_on i2)</p>
    <p>{(power_on i1), (cal i1), (not (cal i2))}</p>
    <p>(calibrate i1)</p>
    <p>(switch_off i1)</p>
    <p>{(power_on i2), (not (cal i1)), (cal i2)}</p>
    <p>(calibrate i2)</p>
    <p>(switch_off i2)</p>
    <p>Size of the product domain over the minimized variables is linear in sizes of component variables. Note that minimization is applied only to products of two variables.</p>
  </div>
  <div class="page">
    <p>NICTASummary &amp; Conclusions</p>
    <p>Reducing Accidental Complexity Apply safe, polynomial simplifying problem transformations.</p>
    <p>Two Approaches to Tractable Planning Polynomial algorithms that are sound and complete for some class of problems.</p>
    <p>Work by Jonsson &amp; Backstrom; Domshlak &amp; Brafman; etc. As presented earlier this session!</p>
    <p>Sound and complete algorithms that are polynomial for some class of problems.</p>
    <p>Heuristic search in cases for which heuristic is exact. As presented in this talk! Lack of precise characterisations of such problem classes.</p>
  </div>
  <div class="page">
    <p>NICTA</p>
    <p>Justified (?) Criticisms Its just a hack to deal with the IPC benchmarks!</p>
    <p>Result of iterative development. A test for benchmark triviality.</p>
    <p>No quality guarantee. Still sensitive to problem encoding.</p>
    <p>Open Problems What transformations to apply and in what order? Still sensitive to problem encoding. A safe, useful and computationally feasible notion of relevance is still lacking.</p>
  </div>
</Presentation>
