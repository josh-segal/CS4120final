<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ranking Refinement and its Application to Information Retrieval</p>
    <p>Rong Jin, Hamed Valizadegan</p>
    <p>Computer Science &amp; Engineering Michigan State University</p>
    <p>Hang Li</p>
    <p>Microsoft Research Asia</p>
  </div>
  <div class="page">
    <p>Ranking Refinement</p>
    <p>How to combine two sources of ranking information:</p>
    <p>Source 1 (S1): existing ranking function Source 2 (S2): users feedbacks</p>
    <p>The challenge is The existing ranking function is imperfect The users feedbacks are noisy</p>
  </div>
  <div class="page">
    <p>Applications Relevance Feedback</p>
    <p>S1: retrieval algorithm (e.g. Language Models) S2: relevance judgments by users</p>
    <p>Recommendation System S1: ranking by collaborative filtering S2: items rated by the target user</p>
    <p>Online ranking S1: existing ranking algorithm S2: additional training examples</p>
  </div>
  <div class="page">
    <p>Problem Definition :set of instances to</p>
    <p>be ordered Two sources of ranking information:</p>
    <p>Base ranker: Users feedback:</p>
    <p>Goal:</p>
    <p>G : Rd R</p>
    <p>O = {(xik  xjk)|k = 1, . . . ,m}</p>
    <p>F : Rd R</p>
    <p>D = {x1,x2, . . . ,xn}</p>
  </div>
  <div class="page">
    <p>Encode Base Ranker</p>
    <p>: confidence of ranking function</p>
    <p>=  Wi,j =</p>
    <p>= 0 Wi,j = 0.5</p>
    <p>W = [Wi,j]nn, Wi,j = exp(gi)</p>
    <p>exp(gi)+exp(gj)</p>
    <p>where gi  G(xi)</p>
  </div>
  <div class="page">
    <p>Encode User Feedback</p>
    <p>Related to probability of ranking xi before xj Similar to regularization in SVM.</p>
    <p>[0,1]</p>
    <p>T = [Ti,j]nn, Ti,j =</p>
    <p>1/2 (xi  xj)  O /2 otherwise</p>
  </div>
  <div class="page">
    <p>Ranking Errors</p>
    <p>Given a ranking function F, there are two types of errors:</p>
    <p>: ranking error of F relative to Wi,j : ranking error of F relative to Ti,jerrt</p>
    <p>errw</p>
    <p>errw = Pn</p>
    <p>i,j=1 Wi,jI(Fj  Fi)</p>
    <p>errt = Pn i,j=1 Ti,jI(Fj  Fi)</p>
  </div>
  <div class="page">
    <p>Ranking Error (contd)</p>
    <p>Relaxation by exponential functions</p>
    <p>Upper bounds Helps develop boosting algorithms</p>
    <p>cerrw = Pni,j=1 Wi,j exp(Fj Fi) cerrt = Pni,j=1 Ti,j exp(Fj Fi)</p>
    <p>cerrw  errw, cerrt  errt</p>
  </div>
  <div class="page">
    <p>Combining Errors</p>
    <p>Linear Ranking Refinement (LRR)</p>
    <p>Drawback: need to decide parameter</p>
    <p>La =  cerrw + cerrt =</p>
    <p>nX i,j=1</p>
    <p>(Wi,j + Ti,j)exp(Fj Fi)</p>
  </div>
  <div class="page">
    <p>Combining Errors (contd)</p>
    <p>Multiplicative Ranking Refinement (MRR)</p>
    <p>Solution is Pareto efficient</p>
    <p>Lp = cerrw  cerrt =</p>
    <p>nX i,j=1</p>
    <p>Ti,j exp(Fj Fi)</p>
    <p>nX i,j=1</p>
    <p>Wi,j exp(Fj Fi)</p>
  </div>
  <div class="page">
    <p>Boosting Algorithm</p>
    <p>Initialize F(x)=0</p>
    <p>F(x)</p>
    <p>Compute the ranking uncertainty for each pair</p>
    <p>Label data</p>
    <p>Compute the weight</p>
    <p>Sample data</p>
    <p>Train a binary classifier f(x)</p>
    <p>sign(wi)</p>
    <p>Compute the combination weight</p>
    <p>F(x)  F(x)+ f(x)</p>
    <p>abs(wi)</p>
    <p>i,j = ai,j +bi,j</p>
    <p>wi = Pn j=1 i,j j,i</p>
  </div>
  <div class="page">
    <p>Convergence of Boosting Alg.</p>
    <p>Aims to minimize</p>
    <p>Lp is reduced exponentially</p>
    <p>where is Lp at th Tth iteration</p>
    <p>Lp =</p>
    <p>nX i,j=1</p>
    <p>Ti,j exp(Fj Fi)</p>
    <p>nX i,j=1</p>
    <p>Wi,j exp(Fj Fi)</p>
    <p>LTp</p>
    <p>nX i,j=1</p>
    <p>Ti,j</p>
    <p>nX i,j=1</p>
    <p>Wi,j</p>
    <p>exp</p>
    <p>TX k=1</p>
    <p>k</p>
    <p>!</p>
    <p>LTp</p>
  </div>
  <div class="page">
    <p>Convergence (contd)</p>
  </div>
  <div class="page">
    <p>Experiments-data sets</p>
    <p>Letor test bed OHSUMED dataset: 106 queries, 16140 querydocument relevance judgment TREC dataset: 1000 queries, 49171 querydocument relevance judgment</p>
    <p>Movie recommendation 943 users, 1682 movies 51 binary features for each movie</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Following algorithms are compared: Base ranker Rocchio SVM Multiplicative Ranking Refinement (MRR) Linear Ranking Refinement (LRR)</p>
    <p>LRR-Worst: worst LRR-Best: best</p>
  </div>
  <div class="page">
    <p>Evaluation Metrics</p>
    <p>Precision</p>
    <p>Normalized Discounted Cumulative Gain (NDCG)</p>
    <p>PR@k = Pk</p>
    <p>i=1 rRi/k</p>
    <p>NDCGR@k = DCGR@k</p>
    <p>DCGT@k</p>
    <p>DCGX@k =</p>
    <p>( rX1 if k = 1</p>
    <p>rX1 + Pk</p>
    <p>i=2</p>
    <p>rXi log2 i</p>
    <p>if k &gt; 1</p>
  </div>
  <div class="page">
    <p>Relevance Feedback: Precision</p>
    <p>OHSUMED</p>
  </div>
  <div class="page">
    <p>Relevance Feedback: NDCG</p>
    <p>OHSUMED</p>
  </div>
  <div class="page">
    <p>Relevance Feedback: Effect of Base Rankers</p>
    <p>OHSUMED</p>
    <p>MRR</p>
    <p>Base ranker</p>
    <p>MRR</p>
    <p>Base ranker</p>
    <p>MRR</p>
    <p>Base ranker</p>
  </div>
  <div class="page">
    <p>Relevance Feedback: Number of Feedback Docs</p>
    <p>OHSUMED</p>
  </div>
  <div class="page">
    <p>Movie Recommendation: Precision</p>
  </div>
  <div class="page">
    <p>Movie Recommendation: Number of Rated Movies</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Present the problem of ranking refinement Proposed Boosting frameworks for ranking refinement Extensive studies with the proposed boosting framework for ranking refinement</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
