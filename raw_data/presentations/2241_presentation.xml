<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Specialize in Moderation Building Application-aware Storage Services using FPGAs in the Datacenter Lucas Kuhring, Eva Garcia, Zsolt Istvn</p>
    <p>IMDEA Software Institute, Madrid</p>
  </div>
  <div class="page">
    <p>ML Pipelines in the Cloud</p>
    <p>Clean NormalizeModify</p>
    <p>Transform Train/Infer</p>
    <p>Column-oriented file formats (e.g. Parquet)</p>
    <p>ML Framework/Service</p>
  </div>
  <div class="page">
    <p>Networking  Programmable switches</p>
    <p>SmartNICs</p>
    <p>Microsoft Catapult</p>
    <p>Compute accelerators  FPGA</p>
    <p>TPU</p>
    <p>Intel Xeon+FPGA</p>
    <p>Emerging Programmable Hardware</p>
  </div>
  <div class="page">
    <p>Lets build Specialized Nodes</p>
    <p>KVS on FPGAs well studied in related work  Several pipelined designs, saturate network link (e.g., Caribou,</p>
    <p>KV-Direct, BlueCache, )</p>
    <p>Can provide replication for fault-tolerance (Consensus in a box)</p>
    <p>ML Store microserver Low latency and high throughput access to data Low energy and small physical footprint Near data processing to filter/transform data Predictable behavior even with processing</p>
    <p>But Needs to be shared! Need to support other file types/apps! Software evolves!</p>
    <p>ML Datasets</p>
    <p>Spec. HW</p>
  </div>
  <div class="page">
    <p>Code &amp; Programmable Hardware</p>
    <p>Hardware is different from Software: code is converted to circuits  FPGAs synthesize logic gates</p>
    <p>P4 switches have bounded pipeline,</p>
    <p>Sharing is difficult if tenants require different functionality  Even parsing can be expensive</p>
    <p>Can lead to reduced usefulness for all!</p>
    <p>Protocol</p>
    <p>Manage Data</p>
    <p>Process</p>
    <p>Parse Parquet Metadata</p>
    <p>Parse Arrow Metadata</p>
    <p>Other processing</p>
  </div>
  <div class="page">
    <p>Parquet-aware KVS on FPGA</p>
    <p>Multes++</p>
    <p>Efficient multi-tenant use of KVS logic  data &amp; performance isolation [FPL18]</p>
    <p>Add deduplication in hardware  seamless processing in-storage</p>
    <p>Add software library to parse/manage Parquet files  easy to evolve</p>
    <p>Benefit from app-knowledge, while storage node remains general purpose</p>
    <p>This talk: Advocates for using service-centric design for specialized hardware solutions (SW+HW)</p>
  </div>
  <div class="page">
    <p>Parquet Files</p>
    <p>Data stored as pages, organized by columns  Flexible access  Efficient processing  Compression</p>
    <p>Opportunity for deduplication:  Changes in columns do not impact others  Changes in rows often local to subset of pages</p>
    <p>We can deduplicate without having to chunk the file inside the storage node!  Alternative requires more compute (e.g. Rabin</p>
    <p>Karp hash)</p>
    <p>Header</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Footer</p>
    <p>Column Chunk</p>
    <p>Column Chunk Page</p>
    <p>Page</p>
    <p>BLOB (content</p>
    <p>based chunking)</p>
    <p>Page</p>
    <p>R a</p>
    <p>b in</p>
    <p>h</p>
    <p>a sh</p>
  </div>
  <div class="page">
    <p>SW Library</p>
    <p>Written in Go</p>
    <p>Hides FPGA idiosyncrasies, takes advantage of pipelining, low latency</p>
    <p>Lib</p>
    <p>Protocol layer</p>
    <p>Basic operations</p>
    <p>Array operations</p>
    <p>Parquet Op.</p>
    <p>Network protocol over TCP (can be swapped for other KVS)</p>
    <p>Get/Set/Delete with arbitrary value sizes</p>
    <p>Manipulation of array (or set) data structures</p>
    <p>App-specific operations (could also be Arrow, etc.)</p>
    <p>Logical KV pair (e.g., Page)</p>
    <p>Physical KV pair *</p>
    <p>Physical KV pair</p>
    <p>Physical KV pair</p>
    <p>Physical KV pair</p>
    <p>Physical KV pair</p>
    <p>Physical KV pair</p>
    <p>Header</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Footer</p>
    <p>Page</p>
  </div>
  <div class="page">
    <p>In-line deduplication</p>
    <p>Protocol Processing</p>
    <p>SHA256 of Value</p>
    <p>Hash Table Value</p>
    <p>Access</p>
    <p>Key in Hash Table Pointer Meta-data</p>
    <p>Page_2_1 0x1112 0xDEADBEEF</p>
    <p>Page_3_1 0x1112 0xDEADBEEF</p>
    <p>Page_2_2 0x3256 0xF00FF00F</p>
    <p>Value Storage</p>
    <p>Replication Key Value</p>
    <p>Store</p>
    <p>Storage Medium</p>
    <p>Software clients</p>
  </div>
  <div class="page">
    <p>Data Access from Apps</p>
    <p>The library exposes experimental bindings to C and Python</p>
    <p>Access data easily by column</p>
    <p>Allow processing pushdown in the future</p>
    <p>Python example:</p>
    <p>h = pq.connect(11.1.212.209:2880) md = pq.open_metadata(h, p001, schema=0)</p>
    <p>airline = pq.get_string_column(h, md, 1) weight = pq.get_int_column(h, md, 10)</p>
    <p>df = pd.DataFrame(data={'a':airline, 'w':weight}) df.sort_values(by=['w'], inplace=True) print(df.head(5))</p>
    <p>Access storage node and get Parquet schema</p>
    <p>Read columns of interest</p>
    <p>Perform computation of interest</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>KVS: Xilinx VC709 (8GB DRAM)  In the meantime: ported to VCU1525 (64GB RAM),</p>
    <p>experimented with Optane NVDIMM timings</p>
    <p>4x servers: Intel Xeon Silver 4114 CPU and 10Gbps TCP/IP networking</p>
    <p>Datasets from https://datasf.org/opendata/</p>
    <p>Focus on writes and deduplication  Read throughput is not impacted</p>
    <p>ToR Switch</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Multes++</p>
  </div>
  <div class="page">
    <p>Throughput with deduplication  As expected from Hardware: line-rate operation</p>
    <p>Even single-threaded clients have good performance</p>
  </div>
  <div class="page">
    <p>Deduplication Effectiveness</p>
    <p>As good as VCS and requires no additional computation</p>
    <p>Used Police dataset: https://data.sfgov.org/PublicSafety/Police-Department-IncidentReports-Historical-2003/tmnf-yvry</p>
    <p>Header</p>
    <p>Block</p>
    <p>Block</p>
    <p>Block</p>
    <p>Footer</p>
    <p>Page</p>
    <p>R a</p>
    <p>b in</p>
    <p>h</p>
    <p>a sh</p>
    <p>( V</p>
    <p>C S</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Resource Consumption</p>
  </div>
  <div class="page">
    <p>Closing Thoughts</p>
    <p>We should use more specialized hardware in the cloud but design with service-centric view</p>
    <p>Parquet-aware KVS as an example  Deduplication, data management logic is common for tenants  HW  Each tenant can have different file format/library  SW  Benefits of specialized solution, flexibility of software</p>
    <p>In-storage processing of column chunks  no complex parsing is needed</p>
    <p>What areas outside of ML/Analytics would benefit from Smart Storage?</p>
    <p>What types of applications/services have a common element like KVSs?</p>
    <p>How do we systematically split applications across devices?</p>
  </div>
</Presentation>
