<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Toward Orchestration of Complex Networking</p>
    <p>Experiments Alefiya Hussain, Prateek Jaipuria, Geoff Lawler,</p>
    <p>Stephen Schwab, Terry Benzel</p>
    <p>Long Experience Paper</p>
  </div>
  <div class="page">
    <p>What is an Networking Experiment?</p>
    <p>Testbed</p>
    <p>- Create meso-scale representations of the internet - Understand how the system behaves</p>
    <p>System under test</p>
  </div>
  <div class="page">
    <p>What is an Networking Experiment?</p>
    <p>Testbed</p>
    <p>- Create meso-scale representations of the internet - Understand how the system behaves</p>
    <p>Representative Scenarios</p>
  </div>
  <div class="page">
    <p>What makes experiments complex?</p>
    <p>System under test</p>
  </div>
  <div class="page">
    <p>Complexity in networking experiments</p>
    <p>The system is mapped to different configuration</p>
  </div>
  <div class="page">
    <p>Complexity in networking experiments</p>
    <p>Each configuration is overlapped with rich set of application mixes</p>
  </div>
  <div class="page">
    <p>Complexity in networking experiments The configuration is converted to execution</p>
  </div>
  <div class="page">
    <p>Experiment Orchestration Definition: Sequence of steps required to execute the representative scenarios</p>
    <p>on the testbed</p>
    <p>Representative Scenarios Sequence of</p>
    <p>Steps Testbed</p>
  </div>
  <div class="page">
    <p>Related Work: Tools and Testbeds</p>
    <p>Shell or Ssh-based Scripts: +most popular -limited feedback and error handling</p>
    <p>Ansible and other configuration management Tools: +rich toolkit -limited expressibility</p>
    <p>Emulab:first emulation testbed *Tevc *Experimenters workbench</p>
    <p>PlanetLab: first globally distributed testbed *Plush</p>
    <p>GENI: Federated collection of testbeds *ansible * Labwiki *ODEL</p>
    <p>Emerging Testbeds: *Fabric *Chameleon *EdgeNet *MergeTB</p>
    <p>DETER:first cyber security testbed *SEER *MAGI</p>
  </div>
  <div class="page">
    <p>Experiment Orchestration in MAGI</p>
    <p>Representative Scenarios Sequence of</p>
    <p>Steps Testbed</p>
    <p>Design: agents for wide range of scenarios Execute: orchestrator and daemons</p>
  </div>
  <div class="page">
    <p>MAGI: Montage AGent Infrastructure</p>
    <p>Conceptual: Sequence of Steps</p>
    <p>Specification: agent activation language</p>
    <p>Execution:Orchestrator and node daemons, agents</p>
    <p>Design: agents for wide range of scenarios Execute: orchestrator and daemons</p>
  </div>
  <div class="page">
    <p>MAGI Specification Group: mapping of behavior roles to physical and virtual machines</p>
    <p>Agent: implementation of the behavior roles</p>
    <p>Event: a method that can be invoked in the agent</p>
    <p>Eventstreams:ordered collection of events that formulate the experiment behaviors</p>
    <p>Triggers: time- or condition based synchronization points</p>
  </div>
  <div class="page">
    <p>Specification Group: mapping of behavior roles to physical and virtual machines</p>
    <p>Agent: implementation of the behavior roles</p>
    <p>Event: a method that can be invoked in the agent</p>
    <p>Eventstreams:ordered collection of events that formulate the experiment behaviors</p>
    <p>Triggers: time- or condition based synchronization points</p>
  </div>
  <div class="page">
    <p>Specification Group: mapping of behavior roles to physical and virtual machines</p>
    <p>Agent: implementation of the behavior roles</p>
    <p>Event: a method that can be invoked in the agent</p>
    <p>Eventstreams:ordered collection of events that formulate the experiment behaviors</p>
    <p>Triggers: time- or condition based synchronization points</p>
  </div>
  <div class="page">
    <p>Specification Group: mapping of behavior roles to physical and virtual machines</p>
    <p>Agent: implementation of the behavior roles</p>
    <p>Event: a method that can be invoked in the agent</p>
    <p>Eventstreams:ordered collection of events that formulate the experiment behaviors</p>
    <p>Triggers: time- or condition based synchronization points</p>
  </div>
  <div class="page">
    <p>Specification Group: mapping of behavior roles to physical and virtual machines</p>
    <p>Agent: implementation of the behavior roles</p>
    <p>Event: a method that can be invoked in the agent</p>
    <p>Eventstreams:ordered collection of events that formulate the experiment behaviors</p>
    <p>Triggers: time- or condition based synchronization points</p>
  </div>
  <div class="page">
    <p>MAGI: Montage AGent Infrastructure</p>
    <p>Conceptual: Sequence of Steps</p>
    <p>Specification: agent activation language</p>
    <p>Execution:Orchestrator and node daemons, agents</p>
    <p>Design: agents for wide range of scenarios Execute: orchestrator and daemons</p>
  </div>
  <div class="page">
    <p>Orchestration Parser: Reads specification</p>
    <p>Scheduler: handles each eventstream concurrently, sends events to node daemons.</p>
    <p>Evaluator: receives return values from the node daemons to satisfy triggers</p>
  </div>
  <div class="page">
    <p>Daemons and Agents Daemons: lightweight control conduit Received events to launches and controls agents Returns values from agents to orchestrator for trigger evaluation</p>
    <p>Agent Modules: implementations on nodes in Python</p>
  </div>
  <div class="page">
    <p>Case Studies:</p>
    <p>Education</p>
    <p>Development and assessment of multi-user text-based chat client and server system</p>
    <p>40-75 students for undergraduate class, Introduction to Computer Networks;</p>
    <p>Student client with instructor server  Random client with student server  Upto 30 clients with student server</p>
    <p>Feedback Loops</p>
    <p>Different teams interact in an experiment; while limiting access to parts of the scenario</p>
    <p>2000 webclients, 1000 control clients, 50 apache2 servers in webfarm</p>
    <p>Sense traffic on network  Compute devise control action to</p>
    <p>increase, decrease or maintain traffic  Actuate executes control action</p>
  </div>
  <div class="page">
    <p>Case Studies:</p>
    <p>Integrated system development</p>
    <p>Five teams develop adversary-resistant communication to circumvent censorship in Tor</p>
    <p>Configure, deploy, manage Tor and technologies</p>
    <p>Multi-scale experiments, 10 machines to 100 machines</p>
    <p>Tor agents to start relays, bridges, and clients</p>
    <p>Large scale- 5120 client processes, microblogging, VoIP, file sharing apps</p>
    <p>Cyber physical systems</p>
    <p>Distributed optimization control algorithms for monitoring power flow oscillations in presence of DDoS attacks</p>
    <p>IEEE 39 bus power system overlaid on a 18 node communication topology</p>
    <p>High volume attacks and study impact on damping the oscillations.</p>
  </div>
  <div class="page">
    <p>Retrospective Takeaways  Specification is topology agnostic</p>
    <p>allows direct scaling experiments</p>
    <p>Unordered events and with synchronization triggers  enables exploiting concurrency and asynchronous execution in experiment</p>
    <p>Error handling and logging  Errors and failures forwarded from nodes to orchestrator</p>
  </div>
  <div class="page">
    <p>Conclusion The MAGI tool makes it easier to run large and complex experiments on testbeds by providing a wide range of traffic agents and automating the experiment execution.</p>
    <p>MAGI is general  runs on most testbeds  open source</p>
    <p>Available at https://github.com/deter-project/magi Documented with examples at https://montage.deterlab.net/magi</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Contact: Alefiya Hussain</p>
    <p>hussain@isi.edu</p>
  </div>
</Presentation>
