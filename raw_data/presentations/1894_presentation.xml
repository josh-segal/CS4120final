<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Kamala Ramasubramanian1, Kathryn Dahlgren1, Asha Karim1, Sanjana Maiya1, Sarah Borland1,</p>
    <p>Boaz Leskes2, Peter Alvaro1</p>
    <p>Growing a Protocol</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Elastic - distributed data store vendor whose products focus on real time search and analysis</p>
    <p>Data replication protocol is based on Primary/Backup</p>
    <p>Interested in a tool to determine if protocol was behaving correctly in the presence of faults as it evolves</p>
  </div>
  <div class="page">
    <p>Software engineering best practices:  Regression testing  Root cause analysis</p>
    <p>Does not work while reasoning about fault tolerance properties of distributed systems</p>
    <p>Associate specific inputs with system behaviors</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>An example</p>
  </div>
  <div class="page">
    <p>Naive Solution(s)</p>
    <p>Formal Methods Testing</p>
    <p>Need to explore all fault scenarios for EVERY version change</p>
    <p>Need to back port protocol changes to specifications</p>
  </div>
  <div class="page">
    <p>LDFI - Lineage Driven Fault Injection  Uses techniques from databases, logic programming and fault</p>
    <p>injection techniques</p>
    <p>Reasons about how a good outcome occurred to determine why a bad outcome might occur</p>
    <p>Lineage Driven Fault Injection</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>LDFI builds a system model beginning with the first execution being successful</p>
    <p>Fault scenarios explored are those which falsify good outcome</p>
  </div>
  <div class="page">
    <p>Catching Bugs early</p>
    <p>W2 W1</p>
    <p>n1 M n3n2 C</p>
    <p>Rep_W1</p>
    <p>Ack_int</p>
    <p>Rep_W1</p>
    <p>CRASHED5</p>
    <p>Rep_W2 Ack_int</p>
    <p>Ack_int</p>
    <p>Rep_W1</p>
    <p>Replica n2 is promoted to primary</p>
  </div>
  <div class="page">
    <p>Dormant bugs</p>
    <p>W 2</p>
    <p>n1 M n3n2 C</p>
    <p>Rep_W</p>
    <p>CRASHED</p>
    <p>Ack_int</p>
  </div>
  <div class="page">
    <p>Specially handling certain cases to avoid expensive operations</p>
    <p>Re-sync mechanisms</p>
    <p>The simplicity of an optimization is not a barometer in understanding if it *could* violate guarantees of the system</p>
    <p>A tale of two optimizations</p>
  </div>
  <div class="page">
    <p>Avoiding expensive operations</p>
    <p>W1 2</p>
    <p>n1 M n3n2 C</p>
    <p>Rep_W1</p>
    <p>CRASHED</p>
    <p>Replica n2 is promoted to primary</p>
    <p>W2Rep_W2</p>
    <p>Ack_int</p>
    <p>Ack</p>
  </div>
  <div class="page">
    <p>Past &amp; Future Work</p>
    <p>Concurrency bugs</p>
    <p>Explore not just schedules, but reorderings as well.</p>
    <p>Input Generation</p>
    <p>Different fault scenarios based on input data selected. Impacts bugs found.</p>
  </div>
  <div class="page">
    <p>Debugging distributed systems is hard!</p>
    <p>Need tools which straddle verification and testing</p>
    <p>Demonstrated that LDFI can be deployed as a tool in this space to find interesting bugs</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>palvaro@ucsc.edu</p>
  </div>
  <div class="page">
    <p>Questions ?</p>
    <p>kamala.ramas@ucsc.edu https://github.com/KamalaRamas/molly</p>
  </div>
</Presentation>
