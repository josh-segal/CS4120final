<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mercury Bandwidth-effective Prevention of Rollback Attacks Against Community Repositories</p>
    <p>Trishank Karthik Kuppusamy, Vladimir Diaz, Justin Cappos</p>
    <p>NYU Tandon School of Engineering</p>
  </div>
  <div class="page">
    <p>Software repositories</p>
  </div>
  <div class="page">
    <p>Software updates</p>
    <p>Experts agree: software updates the most important thing (USENIX SOUPS 2015)</p>
    <p>Updates fix security vulnerabilities</p>
    <p>However, important problem in software updates often neglected...</p>
  </div>
  <div class="page">
    <p>Repository compromise: impact</p>
    <p>Nation state actors:  Microsoft Windows Update (2012):</p>
    <p>Flame malware targeted Iran nuclear efforts</p>
    <p>South Korea cyberattack (2013): &gt;$750M USD in economic damage</p>
    <p>NotPetya (2017): infected multinational corporations</p>
    <p>Compromise millions of devices  Worst case: human lives</p>
  </div>
  <div class="page">
    <p>SSL / TLS</p>
    <p>Use online key to sign all updates (e.g., SSL / TLS, CUP)  Protects users from man-in-the-middle attacks</p>
    <p>Repository User</p>
  </div>
  <div class="page">
    <p>The problem with SSL / TLS</p>
    <p>Doesnt say anything about the security of the server: just the connection  Single point of failure: easy to compromise  If repository is compromised, attacker can install malware and control devices</p>
    <p>Repository User</p>
    <p>Attacker</p>
  </div>
  <div class="page">
    <p>GPG / RSA</p>
    <p>Why not sign updates using GPG / RSA keys kept off repository?</p>
  </div>
  <div class="page">
    <p>GPG / RSA</p>
    <p>Why not sign updates using GPG / RSA keys kept off repository?</p>
    <p>Assumes key distribution problem solved, but OK...</p>
    <p>Mission accomplished, right?</p>
  </div>
  <div class="page">
    <p>What do these organizations have in common?</p>
  </div>
  <div class="page">
    <p>Vulnerabilities in software updates</p>
  </div>
  <div class="page">
    <p>Goal: compromise-resilience</p>
    <p>Only a question of when, not if</p>
    <p>Cannot prevent a compromise</p>
    <p>But must severely limit its impact</p>
    <p>Internet</p>
    <p>Update X</p>
    <p>Update Y</p>
    <p>Update Z</p>
    <p>OEM repository</p>
    <p>Phone</p>
    <p>Tablet</p>
    <p>Laptop</p>
    <p>Users</p>
    <p>Attacker</p>
  </div>
  <div class="page">
    <p>One way GPG / RSA is insecure</p>
  </div>
  <div class="page">
    <p>Project metadata &amp; packages</p>
    <p>A repository has many projects</p>
    <p>A project has many packages</p>
    <p>A project signs a metadata file listing packages</p>
    <p>Django Django-1.8.tar.gz</p>
    <p>Bcrypt</p>
    <p>Django-1.7.tar.gz</p>
    <p>Bcrypt-1.0.tar.gz</p>
    <p>Bcrypt-0.1.tar.gz</p>
    <p>v4</p>
    <p>v7</p>
    <p>Metadata Packages</p>
    <p>hash</p>
    <p>hash</p>
    <p>hash</p>
    <p>hash</p>
  </div>
  <div class="page">
    <p>Rollback attacks</p>
    <p>Choose obsolete updates with known security vulnerabilities</p>
    <p>Django-1.11.3.tar.gz (2017)</p>
  </div>
  <div class="page">
    <p>Rollback attacks</p>
    <p>No need to tamper with signed updates</p>
    <p>Just replace new signed updates with old signed updates!</p>
    <p>Django-1.0.4.tar.gz (2009)</p>
  </div>
  <div class="page">
    <p>Why rollback attacks are bad</p>
    <p>Compromise users w/o tampering with updates! [CCS 2008]</p>
    <p>Obsolete = vulnerable = just as bad as malware</p>
  </div>
  <div class="page">
    <p>Prevents rollback attacks on installed projects</p>
    <p>Verify project metadata to verify packages</p>
    <p>Download project metadata for only package to be installed</p>
    <p>Compare previous &amp; current version numbers of project metadata</p>
    <p>Django</p>
    <p>Bcrypt</p>
    <p>Django-1.7.tar.gz</p>
    <p>Bcrypt-1.0.tar.gz</p>
    <p>Bcrypt-0.1.tar.gz</p>
    <p>v3</p>
    <p>v7</p>
    <p>Metadata Packages</p>
    <p>hash</p>
    <p>hash</p>
    <p>hash</p>
    <p>prev &gt; curr !</p>
  </div>
  <div class="page">
    <p>What about projects yet to be installed?</p>
    <p>BAD! Does not prevent rollback attacks on projects yet to be installed</p>
    <p>What is the previous version number?</p>
    <p>Django</p>
    <p>Bcrypt</p>
    <p>Django-1.7.tar.gz</p>
    <p>Bcrypt-0.1.tar.gz</p>
    <p>Metadata Packages</p>
    <p>v3</p>
    <p>v6</p>
    <p>prev  curr ?</p>
    <p>hash</p>
    <p>hash</p>
    <p>hash</p>
    <p>prev &gt; curr !</p>
  </div>
  <div class="page">
    <p>Compromise-resilience with Diplomat</p>
  </div>
  <div class="page">
    <p>The Update Framework (TUF)</p>
    <p>Design principles  Separation of duties  Threshold signatures  Explicit &amp; implicit revocation</p>
    <p>of keys  Minimizing risk using offline</p>
    <p>keys  Selective delegation of trust</p>
    <p>CCS 2010</p>
  </div>
  <div class="page">
    <p>Diplomat</p>
    <p>Provides compromise-resilience &amp; immediate project registration</p>
    <p>USENIX NSDI 2016</p>
  </div>
  <div class="page">
    <p>Snapshot metadata</p>
    <p>Repositories distribute snapshot metadata, or manifest of all projects</p>
  </div>
  <div class="page">
    <p>Download snapshot metadata</p>
    <p>To prevent rollback attacks, first download snapshot metadata</p>
  </div>
  <div class="page">
    <p>Download project metadata</p>
    <p>Then, compare previous &amp; current version number of project metadata</p>
    <p>prev &lt;= curr?</p>
  </div>
  <div class="page">
    <p>Download all project metadata</p>
    <p>Do this for every single project metadata file listed in snapshot metadata</p>
    <p>prev &lt;= curr?</p>
    <p>prev &lt;= curr?</p>
  </div>
  <div class="page">
    <p>Integrations &amp; deployments</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Diplomat too expensive on some repositories like PyPI</p>
    <p>A large number of frequently updated projects</p>
  </div>
  <div class="page">
    <p>Bandwidth cost for new users</p>
    <p>Requires new users to download all project metadata</p>
    <p>20MB (31x!)</p>
  </div>
  <div class="page">
    <p>Bandwidth cost for returning users</p>
    <p>Requires returning users to download all new or updated project metadata</p>
    <p>2.1MB (3.2x!)</p>
  </div>
  <div class="page">
    <p>Mercury: a new security system</p>
  </div>
  <div class="page">
    <p>Diplomat: repository cannot be trusted</p>
    <p>No trusted party (e.g., humans) to always correctly indicate new project metadata</p>
    <p>Projects are updated too rapidly</p>
    <p>? v4 v7</p>
  </div>
  <div class="page">
    <p>Diplomat: repository cannot be trusted</p>
    <p>Repositories use automation to indicate only which projects have been updated</p>
    <p>v4</p>
    <p>v7</p>
  </div>
  <div class="page">
    <p>Diplomat: repository cannot be trusted</p>
    <p>But attackers who compromise repository can launch rollback attacks</p>
    <p>Just point to obsolete project metadata!</p>
    <p>v3</p>
    <p>v6</p>
  </div>
  <div class="page">
    <p>Diplomat: only developers can be trusted</p>
    <p>Only developers trusted to provide version numbers</p>
    <p>Price: prohibitive b/w costs</p>
  </div>
  <div class="page">
    <p>Mercury: shift trust from developers to repository</p>
    <p>Safely shift source of trust from developers to repository</p>
    <p>Snapshot metadata indicates version numbers of project metadata</p>
  </div>
  <div class="page">
    <p>Mercury: low bandwidth cost</p>
    <p>Uses low bandwidth costs</p>
    <p>To prevent rollback attacks, first download snapshot metadata</p>
  </div>
  <div class="page">
    <p>Mercury: low bandwidth cost</p>
    <p>Download project metadata for only package to be installed</p>
    <p>Use delta compression for more savings</p>
  </div>
  <div class="page">
    <p>Security analysis</p>
    <p>But is it secure?</p>
  </div>
  <div class="page">
    <p>Security analysis: rollback attacks</p>
    <p>Mercury always prevents rollback attacks</p>
  </div>
  <div class="page">
    <p>Security analysis: rollback attacks</p>
    <p>Always compare previous &amp; current version numbers in snapshot metadata</p>
  </div>
  <div class="page">
    <p>Security analysis: rollback attacks</p>
    <p>Do not delete projects from snapshot metadata</p>
    <p>Otherwise, attackers can rollback these projects</p>
    <p>??</p>
  </div>
  <div class="page">
    <p>Security analysis: fast-forward attacks</p>
    <p>Unlike Diplomat, susceptible to fast-forward attacks</p>
  </div>
  <div class="page">
    <p>Security analysis: fast-forward attacks</p>
    <p>Arbitrarily increase version numbers in snapshot metadata</p>
    <p>Can deny packages to users</p>
  </div>
  <div class="page">
    <p>Security analysis: fast-forward attacks</p>
    <p>Waste b/w by setting arbitrarily large version numbers</p>
  </div>
  <div class="page">
    <p>Security analysis: fast-forward attacks</p>
    <p>Increase version numbers to MAXINT</p>
    <p>Makes recovery impossible</p>
  </div>
  <div class="page">
    <p>Recovering from fast-forward attacks</p>
    <p>Revoke and replace keys used to sign snapshot metadata</p>
    <p>Discard and replace snapshot metadata</p>
  </div>
  <div class="page">
    <p>Recovering from fast-forward attacks</p>
    <p>System / Cost</p>
    <p>Common case</p>
    <p>Rare case</p>
    <p>Diplomat More expensive</p>
    <p>Less complicated</p>
    <p>Mercury Less expensive</p>
    <p>More complicated</p>
  </div>
  <div class="page">
    <p>Persistent Mirror + Developer Compromise</p>
  </div>
  <div class="page">
    <p>Protection against malicious mirrors</p>
    <p>Malicious mirrors in powerful nation-states</p>
    <p>Cannot sign new snapshot metadata, but can sign some new project metadata</p>
    <p>Can switch project metadata w/o getting caught</p>
  </div>
  <div class="page">
    <p>Protection against malicious mirrors</p>
    <p>Mercury-hash: hash + version number in snapshot metadata</p>
    <p>Malicious mirrors cannot switch project metadata w/o getting caught</p>
    <p>Higher b/w cost</p>
  </div>
  <div class="page">
    <p>Evaluation of bandwidth costs</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Security systems  GPG / RSA  insecure!  Mercury  Mercury-hash  Diplomat-version: projects sign detached version numbers  Diplomat</p>
    <p>An anonymized log of a month of package downloads from PyPI</p>
  </div>
  <div class="page">
    <p>Bandwidth overhead by security system</p>
  </div>
  <div class="page">
    <p>Bandwidth overhead by security system</p>
  </div>
  <div class="page">
    <p>Bandwidth overhead by security system</p>
  </div>
  <div class="page">
    <p>Bandwidth overhead by security system</p>
  </div>
  <div class="page">
    <p>Bandwidth vs. number of projects</p>
  </div>
  <div class="page">
    <p>Bandwidth vs. rate of project updates</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>Safely shift trust from developers to repository</p>
    <p>Common case less expensive, but rare case slightly more complicated</p>
    <p>Practical use uncovers problems</p>
  </div>
  <div class="page">
    <p>Integrations &amp; deployments</p>
  </div>
  <div class="page">
    <p>Q &amp; A</p>
    <p>Thanks! Questions?</p>
    <p>https://theupdateframework.github.io/</p>
    <p>https://uptane.github.io/</p>
    <p>trishank@nyu.edu</p>
  </div>
</Presentation>
