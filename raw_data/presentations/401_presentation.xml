<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>D i t R F i (DRF)Dominant Resource Fairness (DRF) Fair Allocation of Multiple Resource Types</p>
    <p>Ali Ghodsi, Matei Zaharia B j i Hi d A d K i kiBenjamin Hindman, Andy Konwinski,</p>
    <p>Scott Shenker, Ion Stoica</p>
    <p>University of California, Berkeley</p>
    <p>alig@cs.berkeley.edu 1</p>
  </div>
  <div class="page">
    <p>What is fair sharing? CPU</p>
    <p>n users want to share a resource (e.g. CPU)  Solution:</p>
    <p>Allocate each 1/n of the shared resource 0%</p>
    <p>Generalized by maxmin fairness  Handles if a user wants less than its fair share</p>
    <p>E.g. user 1 wants no more than 20%</p>
    <p>G li d b i ht d i f i</p>
    <p>Generalized by weighted maxmin fairness  Give weights to users according to importance User 1 gets weight 1 user 2 weight 2</p>
    <p>User 1 gets weight 1, user 2 weight 2</p>
    <p>alig@cs.berkeley.edu 2</p>
  </div>
  <div class="page">
    <p>Properties of maxmin fairnessProperties of max min fairness</p>
    <p>Share guarantee  Each user can get at least 1/n of the resource  But will get less if her demand is less</p>
    <p>Strategyproof  Users are not better off by asking for more than they need  Users have no reason to lie</p>
    <p>Maxmin fairness is the only reasonable mechanism with these two properties</p>
    <p>alig@cs.berkeley.edu 3</p>
  </div>
  <div class="page">
    <p>Why care about fairness?Why care about fairness?  Desirable properties of maxmin fairness</p>
    <p>Isolation policy: A user gets her fair share irrespective of the demands of other usersother users</p>
    <p>Flexibility separates mechanism from policy: P i l h i i i iProportional sharing, priority, reservation,...</p>
    <p>Many schedulers use maxmin fairnessMany schedulers use max min fairness  Datacenters: Hadoops fair sched, capacity, Quincy  OS: rr, prop sharing, lottery, linux cfs, ...  Networking: wfq, wf2q, sfq, drr, csfq, ...</p>
    <p>alig@cs.berkeley.edu</p>
  </div>
  <div class="page">
    <p>Why is maxmin fairness not enough?Why is max min fairness not enough?</p>
    <p>Job scheduling in datacenters is not onlyJob scheduling in datacenters is not only about CPUs</p>
    <p>Jobs consume CPU memory disk and I/O Jobs consume CPU, memory, disk, and I/O</p>
    <p>D hi h ll ? Does this pose any challenge?</p>
    <p>alig@cs.berkeley.edu 5</p>
  </div>
  <div class="page">
    <p>Heterogeneous Resource Demands</p>
    <p>Some tasks are CPUintensive</p>
    <p>Most task need ~ &lt;2 CPU, 2 GB RAM&gt;</p>
    <p>Some tasks are memoryintensive</p>
    <p>alig@cs.berkeley.edu 6</p>
  </div>
  <div class="page">
    <p>ProblemProblem</p>
    <p>Single resource example</p>
    <p>CPU 0%</p>
    <p>Multiresource example  2 resources: CPUs &amp; mem</p>
    <p>User 1 wants &lt;1 CPU, 4 GB&gt; per task  User 2 wants &lt;3 CPU, 1 GB&gt; per task</p>
    <p>Whats a fair allocation? alig@cs.berkeley.edu 7</p>
    <p>CPU 0%</p>
    <p>mem</p>
  </div>
  <div class="page">
    <p>Problem definition f i l h l i l hHow to fairly share multiple resources when</p>
    <p>users have heterogenous demands on them?</p>
    <p>alig@cs.berkeley.edu 8</p>
  </div>
  <div class="page">
    <p>Talk OutlineTalk Outline  What properties do we want?</p>
    <p>How do we solve it (DRF)?</p>
    <p>How would an economist solve this?</p>
    <p>How well does this work in practice?</p>
    <p>alig@cs.berkeley.edu 9</p>
  </div>
  <div class="page">
    <p>ModelModel</p>
    <p>Users have tasks according to a demand vectorUsers have tasks according to a demand vector  e.g. &lt;2, 3, 1&gt; users tasks need 2 R1, 3 R2, 1 R3 Not needed in practice measure actual consumption Not needed in practice, measure actual consumption</p>
    <p>R i i lti l f d d t Resources given in multiples of demand vectors</p>
    <p>Assume divisible resources</p>
  </div>
  <div class="page">
    <p>A Natural Policy</p>
    <p>Asset Fairness</p>
    <p>A Natural Policy</p>
    <p>Asset Fairness  Equalize each users sum of resource shares</p>
    <p>Cluster with 70 CPUs, 70 GB RAM  U1 needs &lt;2 CPU, 2 GB RAM&gt; per task1 , p  U2 needs &lt;1 CPU, 2 GB RAM&gt; per task</p>
    <p>alig@cs.berkeley.edu</p>
  </div>
  <div class="page">
    <p>A Natural Policy</p>
    <p>Asset Fairness</p>
    <p>A Natural Policy</p>
    <p>Asset Fairness  Equalize each users sum of resource shares</p>
    <p>User 1 User 2</p>
    <p>Cluster with 70 CPUs, 70 GB RAM  U1 needs &lt;2 CPU, 2 GB RAM&gt; per task</p>
    <p>U2 needs &lt;1 CPU, 2 GB RAM&gt; per task 50%</p>
    <p>Better off in a separate cluster with 50% of the resources</p>
    <p>Asset fairness yields  U1: 15 tasks: 30 CPUs, 30 GB (=60)</p>
    <p>CPU 0%</p>
    <p>RAM</p>
    <p>U2: 20 tasks: 20 CPUs, 40 GB (=60)</p>
    <p>alig@cs.berkeley.edu</p>
  </div>
  <div class="page">
    <p>Share GuaranteeShare Guarantee</p>
    <p>Every user should get 1/n of at least oneEvery user should get 1/n of at least one resource</p>
    <p>Intuition:  You shouldnt be worse off than if you ran your own cluster with 1/n of the resources</p>
  </div>
  <div class="page">
    <p>Cheating the SchedulerCheating the Scheduler</p>
    <p>Users willing to game the system to get more resourcesg g y g</p>
    <p>Reallife examples  A cloud provider had quotas on map and reduce slots Some users found out that the mapquota was low Users implemented maps in the reduce slots! Users implemented maps in the reduce slots!</p>
    <p>A search company provided dedicated machines to users p y p that could ensure certain level of utilization (e.g. 80%)</p>
    <p>Users used busyloops to inflate utllization</p>
    <p>alig@cs.berkeley.edu 14</p>
  </div>
  <div class="page">
    <p>StrategyproofnessStrategy proofness</p>
    <p>A user should not be able to increase herA user should not be able to increase her allocation by lying about her demand vector</p>
    <p>Intuition:  Users are incentivized to provide truthful resource requirements</p>
  </div>
  <div class="page">
    <p>ChallengeChallenge</p>
    <p>Can we find a fair sharing policy that providesCan we find a fair sharing policy that provides  Strategyproofness Share guarantee Share guarantee</p>
    <p>M i f i f i l h d Maxmin fairness for a single resource had these properties  Can we generalize maxmin fairness to multiple resources?</p>
    <p>alig@cs.berkeley.edu 16</p>
  </div>
  <div class="page">
    <p>Talk OutlineTalk Outline  What properties do we want?</p>
    <p>How do we solve it (DRF)?</p>
    <p>How would an economist solve this?</p>
    <p>How well does this work in practice?</p>
    <p>alig@cs.berkeley.edu 17</p>
  </div>
  <div class="page">
    <p>Dominant Resource FairnessDominant Resource Fairness</p>
    <p>A users dominant resource is the resource she use s do a t esou ce s t e esou ce s e has the biggest share of  Example: Total resources: &lt;10 CPU, 4 GB&gt; User 1s allocation: &lt;2 CPU, 1 GB&gt;</p>
    <p>i i 1/4 2/10 (1/ )Dominant resource is memory as 1/4 &gt; 2/10 (1/5)</p>
    <p>A users dominant share is the fraction of the A user s dominant share is the fraction of the dominant resource she is allocated  User 1s dominant share is 25% (1/4)User 1 s dominant share is 25% (1/4)</p>
  </div>
  <div class="page">
    <p>Dominant Resource Fairness (2)  Apply maxmin fairness to dominant shares  Equalize the dominant share of the usersq</p>
    <p>Example: Total resources: &lt;9 CPU, 18 GB&gt; User 1 demand: &lt;1 CPU, 4 GB&gt; dom res: mem User 2 demand: &lt;3 CPU, 1 GB&gt; dom res: CPU</p>
    <p>User 1</p>
    <p>User 2</p>
    <p>(9 total) mem</p>
    <p>(18 total)</p>
  </div>
  <div class="page">
    <p>Online DRF Scheduler</p>
    <p>Wh h il bl d kWhenever there are available resources and tasks to run:</p>
    <p>Schedule a task to the user with smallest dominant share</p>
    <p>(l ) d b h O(log n) time per decision using binary heaps</p>
  </div>
  <div class="page">
    <p>Talk OutlineTalk Outline  What properties do we want?</p>
    <p>How do we solve it (DRF)?</p>
    <p>How would an economist solve this?</p>
    <p>How well does this work in practice?</p>
    <p>alig@cs.berkeley.edu 21</p>
  </div>
  <div class="page">
    <p>Why not use pricing?Why not use pricing?</p>
    <p>ApproachApproach  Set prices for each good Let users buy what they want Let users buy what they want</p>
    <p>P bl Problem  How do we determine the right prices for different</p>
    <p>d ?goods?</p>
    <p>alig@cs.berkeley.edu 22</p>
  </div>
  <div class="page">
    <p>How would an economist solve it?How would an economist solve it?</p>
    <p>Let the market determine the pricesLet the market determine the prices</p>
    <p>C i i ilib i f l Competitive Equilibrium from Equal Incomes (CEEI)  Give each user 1/n of every resource  Let users trade in a perfectly competitive market</p>
    <p>Not strategyproof!gy p</p>
  </div>
  <div class="page">
    <p>DRF vs CEEI  User 1: &lt;1 CPU, 4 GB&gt; User 2: &lt;3 CPU, 1 GB&gt;</p>
    <p>DRF more fair, CEEI better utilization</p>
    <p>Dominant Resource Fairness</p>
    <p>Competitive Equilibrium from Equal Incomes</p>
    <p>user 1</p>
    <p>user 250% 50%</p>
    <p>CPU mem</p>
    <p>CPU mem</p>
  </div>
  <div class="page">
    <p>DRF vs CEEI  User 1: &lt;1 CPU, 4 GB&gt; User 2: &lt;3 CPU, 1 GB&gt;</p>
    <p>DRF more fair, CEEI better utilization</p>
    <p>Dominant Resource Fairness</p>
    <p>Competitive Equilibrium from Equal Incomes</p>
    <p>Dominant Resource Fairness</p>
    <p>Competitive Equilibrium from Equal Incomes</p>
    <p>user 1</p>
    <p>user 250% 50%</p>
    <p>CPU mem</p>
    <p>CPU mem</p>
    <p>CPU mem</p>
    <p>CPU mem</p>
    <p>User 1: &lt;1 CPU, 4 GB&gt; User 2: &lt;3 CPU, 2 GB&gt;  User 2 increased her share of both CPU and memory</p>
  </div>
  <div class="page">
    <p>Gaming UtilizationOptimal SchedulersGaming Utilization Optimal Schedulers</p>
    <p>Cluster with &lt;100 CPU, 100 GB&gt;Cluster with 100 CPU, 100 GB  2 users, each demanding &lt;1 CPU, 2 GB&gt; per task</p>
    <p>User 1 User 2</p>
    <p>CPU 0%</p>
    <p>mem</p>
    <p>alig@cs.berkeley.edu 26</p>
  </div>
  <div class="page">
    <p>Gaming UtilizationOptimal SchedulersGaming Utilization Optimal Schedulers</p>
    <p>Cluster with &lt;100 CPU, 100 GB&gt;Cluster with 100 CPU, 100 GB  2 users, each demanding &lt;1 CPU, 2 GB&gt; per task</p>
    <p>User 1 User 2</p>
    <p>User 1 lies and demands &lt;2 CPU, 2 GB&gt;</p>
    <p>CPU 0%</p>
    <p>mem 0%</p>
    <p>CPU mem</p>
    <p>alig@cs.berkeley.edu 27</p>
    <p>UtilizationOptimal scheduler prefers user 1</p>
  </div>
  <div class="page">
    <p>Example of DRF vs Asset vs CEEI</p>
    <p>Resources &lt;1000 CPUs, 1000 GB&gt;  2 users A: &lt;2 CPU, 3 GB&gt; and B: &lt;5 CPU, 1 GB&gt;</p>
    <p>User B</p>
    <p>CPU M CPU M CPU M 0% 0% 0%</p>
    <p>CPU Mem CPU Mem CPU Mem</p>
    <p>c) CEEI</p>
  </div>
  <div class="page">
    <p>Properties of PoliciesProperties of Policies</p>
    <p>Property Asset CEEI DRFp y</p>
    <p>Share guarantee</p>
    <p>Strategyproofness  gy p</p>
    <p>Pareto efficiency</p>
    <p>Envyfreeness</p>
    <p>Single resource fairness</p>
    <p>Bottleneck res. fairness</p>
    <p>Population monotonicity</p>
    <p>Resource monotonicity</p>
    <p>alig@cs.berkeley.edu 29</p>
  </div>
  <div class="page">
    <p>Talk OutlineTalk Outline  What properties do we want?</p>
    <p>How do we solve it (DRF)?</p>
    <p>How would an economist solve this?</p>
    <p>How well does this work in practice?</p>
    <p>alig@cs.berkeley.edu 30</p>
  </div>
  <div class="page">
    <p>Evaluation MethodologyEvaluation Methodology</p>
    <p>Microexperiments on EC2Micro experiments on EC2</p>
    <p>Evaluate DRFs dynamic behavior when demands change</p>
    <p>Compare DRF with current Hadoop scheduler</p>
    <p>Macrobenchmark through simulations</p>
    <p>Simulate Facebook trace with DRF and current Hadoop scheduler</p>
    <p>alig@cs.berkeley.edu 31</p>
  </div>
  <div class="page">
    <p>DRF inside Mesos on EC2</p>
    <p>User 1s Shares</p>
    <p>User 2s Shares</p>
    <p>Dominant shares are equalized</p>
    <p>Dominant Shares equalized</p>
  </div>
  <div class="page">
    <p>DRF inside Mesos on EC2 Dominant resource</p>
    <p>is memory User 1s Shares</p>
    <p>Dominant resourceDominant resource is CPU</p>
    <p>User 2s Shares</p>
    <p>Share guarantee:Share guarantee: ~70% dominant</p>
    <p>share Dominant Shares</p>
  </div>
  <div class="page">
    <p>DRF inside Mesos on EC2 Dominant resource</p>
    <p>is CPU User 1s Shares</p>
    <p>Dominant resourceDominant resource is CPU</p>
    <p>User 2s Shares</p>
    <p>Share guarantee:Share guarantee: ~50% dominant</p>
    <p>share Dominant Shares</p>
  </div>
  <div class="page">
    <p>How is fairness solved in datacenters today?How is fairness solved in datacenters today?</p>
    <p>Hadoop Fair Scheduler/capacity/Quincy  Each machine consists of k slots (e.g. k=14)( g )  Run at most one task per slot  Give jobs equal number of slots,Give jobs equal number of slots, i.e., apply maxmin fairness to slotcount</p>
    <p>This is what we compare against</p>
  </div>
  <div class="page">
    <p>Experiment: DRF vs Slots Number of Type 1 Jobs FinishedNumber of Type 1 Jobs Finished</p>
    <p>Th his h ed</p>
    <p>Thrashing</p>
    <p>o b s fi n is</p>
    <p>Number of Type 2 Jobs Finished</p>
    <p>J</p>
    <p>yp</p>
    <p>Low utilization Thrashingis</p>
    <p>h ed</p>
    <p>g</p>
    <p>Jo b s fi n</p>
    <p>Type 1 jobs &lt;2 CPU, 2 GB&gt; Type 2 jobs &lt;1 CPU, 0.5GB&gt;</p>
  </div>
  <div class="page">
    <p>Experiment: DRF vs Slots Completion Time of Type 1 Jobsp yp</p>
    <p>Thrashing</p>
    <p>p le ti o n</p>
    <p>e o b c o m p</p>
    <p>ti m e</p>
    <p>Completion Time of Type 2 Jobs</p>
    <p>Jo</p>
    <p>Completion Time of Type 2 Jobs Low utilization</p>
    <p>hurts performance Thrashing</p>
    <p>p le ti o n</p>
    <p>e o b c o m p</p>
    <p>ti m e</p>
    <p>Type 1 job &lt;2 CPU, 2 GB&gt; Type 2 job &lt;1 CPU, 0.5GB&gt;</p>
    <p>Jo</p>
  </div>
  <div class="page">
    <p>Reduction in Job Completion Time DRF vs slotsDRF vs slots</p>
    <p>Simulation of 1week Facebook traces</p>
    <p>alig@cs.berkeley.edu 38</p>
  </div>
  <div class="page">
    <p>Utilization of DRF vs slots</p>
    <p>Simulation of Facebook workload</p>
    <p>alig@cs.berkeley.edu 39</p>
  </div>
  <div class="page">
    <p>ConclusionConclusion</p>
    <p>DRF provides multipleresource fairness in theDRF provides multiple resource fairness in the presence of heterogenous demand  First generalization of max min fairness to First generalization of maxmin fairness to multipleresources</p>
    <p>DRFs properties Sh t t l t 1/ f Share guarantee, at least 1/n of one resource</p>
    <p>Strategyproofness, lying can only hurt you P f b h h Performs better than current approaches</p>
  </div>
  <div class="page">
    <p>Conjecture i h l  bl  li h i fi DRF is the only reasonable policy that satisfies</p>
    <p>Strategyproofness  Share guarantee</p>
    <p>alig@cs.berkeley.edu 41</p>
  </div>
  <div class="page">
    <p>Future WorkFuture Work</p>
    <p>How to pack tasks to get high utilizationHow to pack tasks to get high utilization</p>
    <p>Use DRF as a OS schedulerUse DRF as a OS scheduler</p>
    <p>DRF with placement constraintsDRF with placement constraints</p>
  </div>
  <div class="page">
    <p>How do we know the demand vectors?How do we know the demand vectors?</p>
    <p>They can be measuredThey can be measured  Look at actual resource consumption of a user</p>
    <p>They can be provided the by user  What is done today</p>
    <p>In both cases, strategyproofness incentivizes user to consume resources wisely</p>
    <p>alig@cs.berkeley.edu 43</p>
  </div>
  <div class="page">
    <p>ReferencesReferences</p>
    <p>[Gree09] A. Greenberg, J. Hamilton, D. Maltz, P. Patel, The Cost of a Cloud: Research Problems in Data Center Networks, Sigcomm CCR 39:1, 2009</p>
    <p>[Bert92] D. Bertsekas, R. Gallager, Data Networks, Prentice Hall, 1992</p>
    <p>[Varian74] H. Varian, Equity, envy, and efficiency, Journal of Economic Theory 9(1):6391, 1974</p>
    <p>[Young94] H. Peyton Young, Equity: in theory and practise, Princeton University, 1994</p>
  </div>
  <div class="page">
    <p>AppendixAppendix</p>
    <p>A user Ui has a bottleneck resource Rj in anA user Ui has a bottleneck resource Rj in an allocation A iff Rj is saturated and all users using Rj have a smaller (or equal) dominantusing Rj have a smaller (or equal) dominant share than Ui</p>
    <p>Max/min Theorem for DRF  An allocation A is max/min fair iff every user has a bottleneck resource</p>
  </div>
  <div class="page">
    <p>Appendix 2Appendix 2</p>
    <p>Recall max/min fairness from networkingRecall max/min fairness from networking  Maximize the bandwidth of the minimum flow [Bert92][Bert92]</p>
    <p>P i filli (PF) l ith Progressive filling (PF) algorithm 1. Allocate  to every flow until some link saturated</p>
  </div>
  <div class="page">
    <p>Appendix 3Appendix 3</p>
    <p>P1. Pareto Efficiency. a eto ff c e cy  It should not be possible to allocate more resources to any user</p>
    <p>without hurting others</p>
    <p>P2. Singleresource fairness  If there is only one resource, it should be allocated according to y , g</p>
    <p>max/min fairness</p>
    <p>P3 Bottleneck fairness P3. Bottleneck fairness  If all users want most of one resource(s), that resource should</p>
    <p>be shared according to max/min fairness</p>
    <p>alig@cs.berkeley.edu 47</p>
  </div>
  <div class="page">
    <p>Appendix C bl ( )Desirable Fairness Properties (3)</p>
    <p>Assume positive demands (Dij &gt; 0 for all i and j)</p>
    <p>DRF will allocate same dominant share to all users  As soon as PF saturates a resource, allocation frozen</p>
  </div>
  <div class="page">
    <p>Appendix C ( )Datacenter Properties (1)</p>
    <p>P4. Population Monotonicity If l d li i h h If a user leaves and relinquishes her resources, no other users allocation should get hurt</p>
    <p>Can happen each time a job finishes</p>
    <p>CEEI violates population monotonicity</p>
  </div>
  <div class="page">
    <p>Appendix C ( )Datacenter Properties (2)</p>
    <p>DRF satisfies population monotonicity A i iti d d Assuming positive demands</p>
    <p>Intuitively DRF gives the same dominant share to all users so all users would be hurt contradictingall users, so all users would be hurt contradicting Pareto efficiency</p>
  </div>
  <div class="page">
    <p>Appendix C h h blThe unreachable</p>
    <p>Resource Monotonicity (RM)Resource Monotonicity (RM)  If a resource is increased, no users allocation will decreasedecrease</p>
    <p>Impossible to satisfy together with Share Impossible to satisfy together with Share Guarante and Pareto Efficiency</p>
  </div>
</Presentation>
