<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>iOS, Your OS, Everybody's OS: Vetting and Analyzing Network Services of iOS Applications</p>
    <p>Zhushou Tang1,6, Ke Tang1, Minhui Xue2, Yuan Tian3, Sen Chen4, Muhammad Ikram5, Tielei Wang6, Haojin Zhu1</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Network service is used to provide networked data storage, or other online functionality to apps.  Network service is wildly used in mobile applications.</p>
    <p>- Mobile device management. - Receive command from a peripheral equipment (IoT device). - File delivering, voice calls, etc., (Point-to-Point Network). - File or media sharing, etc., (Content Delivery Network).</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Network service is used to provide networked data storage, or other online functionality to apps.  Network service is wildly used in mobile applications.</p>
    <p>- Mobile device management. - Receive command from a peripheral equipment (IoT device). - File delivering, voice calls, etc., (Point-to-Point Network). - File or media sharing, etc., (Content Delivery Network).</p>
    <p>Projects app UI via USB Connection</p>
    <p>Touch events on the in-vehicle device</p>
    <p>The app turns the device to a server</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Smartphone applications that provide network service introduce significant security and privacy threats for users1.</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Smartphone applications that provide network service introduce significant security and privacy threats for users1.</p>
    <p>Related work  JIA et al. EuroS&amp;P17 Bu et al. FSE17 WU et al. NDSS19.</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Smartphone applications that provide network service introduce significant security and privacy threats for users1.</p>
    <p>Goals  Vetting and analyzing network services of iOS applications.  Understanding network service of iOS ecosystem.</p>
    <p>Related work  JIA et al. EuroS&amp;P17 Bu et al. FSE17 WU et al. NDSS19.</p>
  </div>
  <div class="page">
    <p>Challenges &amp; Design Overview</p>
    <p>Public repository of iOS apps is not available</p>
    <p>Practical tools for automatically analyzing iOS apps</p>
    <p>are not well developed.</p>
    <p>Network service libraries of iOS apps are not available.</p>
  </div>
  <div class="page">
    <p>Challenges &amp; Design Overview</p>
    <p>Public repository of iOS apps is not available</p>
    <p>Practical tools for automatically analyzing iOS apps</p>
    <p>are not well developed.</p>
    <p>Network service libraries of iOS apps are not available.</p>
  </div>
  <div class="page">
    <p>iOS Apps Collection</p>
    <p>Key steps:  Download apps from iTunes app store utilizing iTunes dll file</p>
    <p>Decrypt the app by only delivering the executable</p>
  </div>
  <div class="page">
    <p>iOS Apps Collection</p>
    <p>Performance of decryption</p>
  </div>
  <div class="page">
    <p>iOS Apps Collection</p>
    <p>Performance of decryption iOS app dataset</p>
  </div>
  <div class="page">
    <p>Workflow of Vetting</p>
  </div>
  <div class="page">
    <p>Vetting</p>
    <p>Dynamic Analysis</p>
    <p>Check which app provides a network service by inspecting network interface</p>
    <p>- Implement an addon for jailbroken iOS devices</p>
    <p>- Redirect the _bind API calls - Parse parameters of _bind API</p>
  </div>
  <div class="page">
    <p>Dynamic Analysis</p>
    <p>Check which app provides a network service by inspecting network interface</p>
    <p>- Implement an addon for jailbroken iOS devices</p>
    <p>- Redirect the _bind API calls - Parse parameters of _bind API</p>
    <p>Call stack extraction - The call stack is preserved by our addon for network service library analysis</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Dynamic Analysis - Results</p>
    <p>Three categories of network interfaces: - The dynamic port to which a socket binds is usually used for in-app communication.</p>
    <p>- Attack target network service on loopback interface is not practical in iOS . - For apps that use the LAN interface, we run static analysis on them later.</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Dynamic Analysis - Results</p>
    <p>Three categories of network interfaces: - The dynamic port to which a socket binds is usually used for in-app communication.</p>
    <p>- Attack target network service on loopback interface is not practical in iOS . - For apps that use the LAN interface, we run static analysis on them later.</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Dynamic Analysis - Results</p>
    <p>Three categories of network interfaces: - The dynamic port to which a socket binds is usually used for in-app communication.</p>
    <p>- Attack target network service on loopback interface is not practical in iOS . - For apps that use the LAN interface, we run static analysis on them later.</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Static Analysis</p>
    <p>Optimize the open-source framework2</p>
    <p>- Supplement semantics of more ARM instructions to the decompiler.</p>
    <p>- Convert inter-procedural data-flow analysis to on-demand inter-procedural.</p>
    <p>- Formulate and specify rules for the misuse of network services.</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Performance of static analyzer</p>
    <p>Static Analysis - Results</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Performance of static analyzer Static analysis result of NOW app</p>
    <p>Static Analysis - Results</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Manual Confirmation</p>
    <p>Dynamic first, static later, and manual confirmation last'</p>
    <p>Rationale behind</p>
    <p>Dynamic analysis can rapidly check for misconfigured network interfaces on a large scale, allowing us to pinpoint a small portion of candidate network service apps.</p>
    <p>The more time-consuming static analysis can then be used to perform a finegrained analysis and check for potential vulnerabilities.</p>
    <p>Finally, we verify the identified vulnerabilities manually in order to ensure vulnerabilities are not misidentified.</p>
    <p>Vetting</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>Call Stack Analysis</p>
    <p>Map the call stack to the executable.</p>
    <p>Call stack</p>
    <p>Method</p>
    <p>__text:000000010099E130 sub_10099E130 ; DATA XREF: -[TJGCDAsyncSocket acceptOnInterface:port:error:]+B0 o __text:000000010099E1F4 BL _bind __text:000000010099E1F8 CMN W0, #1 __text:000000010099E220 ADRP X2, #cfstr_ErrorInListenF@PAGE ; &quot;Error in listen() function&quot; __text:000000010099E224 ADD X2, X2, #cfstr_ErrorInListenF@PAGEOFF ; &quot;Error in listen() function&quot; __text:000000010099E314 RET</p>
    <p>__text:00000001009F1FBC ; id __cdecl +[TJCacheProtocol cacheServer](TJCacheProtocol_meta *self, SEL) __text:00000001009F1FBC __TJCacheProtocol_cacheServer_ ; DATA XREF: __objc_const:0000000101566448 o __text:00000001009F20F0 BL _objc_msgSend __text:00000001009F20F4 MOV X24, X0 __text:00000001009F2118 ADRP X3, #cfstr_TapjoyCacheRea@PAGE ; &quot;Tapjoy cache ready&quot; __text:00000001009F211C ADD X3, X3, #cfstr_TapjoyCacheRea@PAGEOFF ; &quot;Tapjoy cache ready&quot; __text:00000001009F218C ; End of function +[TJCacheProtocol cacheServer]</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>To collect system network service APIs, we travel the pointer in the call stack from top to bottom until we find the API the app code invoked.</p>
    <p>Call stack</p>
    <p>Method</p>
    <p>__text:000000010099E130 sub_10099E130 ; DATA XREF: -[TJGCDAsyncSocket acceptOnInterface:port:error:]+B0 o __text:000000010099E1F4 BL _bind __text:000000010099E1F8 CMN W0, #1 __text:000000010099E220 ADRP X2, #cfstr_ErrorInListenF@PAGE ; &quot;Error in listen() function&quot; __text:000000010099E224 ADD X2, X2, #cfstr_ErrorInListenF@PAGEOFF ; &quot;Error in listen() function&quot; __text:000000010099E314 RET</p>
    <p>__text:00000001009F1FBC ; id __cdecl +[TJCacheProtocol cacheServer](TJCacheProtocol_meta *self, SEL) __text:00000001009F1FBC __TJCacheProtocol_cacheServer_ ; DATA XREF: __objc_const:0000000101566448 o __text:00000001009F20F0 BL _objc_msgSend __text:00000001009F20F4 MOV X24, X0 __text:00000001009F2118 ADRP X3, #cfstr_TapjoyCacheRea@PAGE ; &quot;Tapjoy cache ready&quot; __text:00000001009F211C ADD X3, X3, #cfstr_TapjoyCacheRea@PAGEOFF ; &quot;Tapjoy cache ready&quot; __text:00000001009F218C ; End of function +[TJCacheProtocol cacheServer]</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>Stacks have no enough information, we map the call stacks to Token = t1  t2    ti.</p>
    <p>Call stack</p>
    <p>MethodToken</p>
    <p>__text:000000010099E130 sub_10099E130 ; DATA XREF: -[TJGCDAsyncSocket acceptOnInterface:port:error:]+B0 o __text:000000010099E1F4 BL _bind __text:000000010099E1F8 CMN W0, #1 __text:000000010099E220 ADRP X2, #cfstr_ErrorInListenF@PAGE ; &quot;Error in listen() function&quot; __text:000000010099E224 ADD X2, X2, #cfstr_ErrorInListenF@PAGEOFF ; &quot;Error in listen() function&quot; __text:000000010099E314 RET</p>
    <p>__text:00000001009F1FBC ; id __cdecl +[TJCacheProtocol cacheServer](TJCacheProtocol_meta *self, SEL) __text:00000001009F1FBC __TJCacheProtocol_cacheServer_ ; DATA XREF: __objc_const:0000000101566448 o __text:00000001009F20F0 BL _objc_msgSend __text:00000001009F20F4 MOV X24, X0 __text:00000001009F2118 ADRP X3, #cfstr_TapjoyCacheRea@PAGE ; &quot;Tapjoy cache ready&quot; __text:00000001009F211C ADD X3, X3, #cfstr_TapjoyCacheRea@PAGEOFF ; &quot;Tapjoy cache ready&quot; __text:00000001009F218C ; End of function +[TJCacheProtocol cacheServer]</p>
    <p>...&quot;Error in listen() function&quot;...&quot;Error in listen() function&quot;...&quot;+[TJCacheProtocol cacheServer](TJCacheProtocol_meta *self, SEL)&quot;...&quot;Tapjoy cache ready&quot;...&quot;Tapjoy cache ready&quot;...</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>Tokens corresponding to call stacks is a mixture of third-party libraries and developers ti.</p>
    <p>Third -Party</p>
    <p>library code</p>
    <p>D eveloper code</p>
    <p>Libby NOW</p>
    <p>IPv4 IPv4 Failed binding %s listening socket: %s (%i) Failed binding %s listening socket: %s (%i) Failed creating %s listening socket: %s (%i) Failed creating %s listening socket: %s (%i)   GCDWebServerDelegate *_delegate GCDWebServerDelegate *_delegate OS_dispatch_source *_source4 NSDictionary *_options</p>
    <p>GCDWebServer *_webServer</p>
    <p>Tokens of two apps</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>We assign the ti of third-party libraries a larger weight to increase the similarity ratio of two different call stacks.</p>
    <p>W eight</p>
    <p>Libby NOW</p>
    <p>IPv4 IPv4 Failed binding %s listening socket: %s (%i) Failed binding %s listening socket: %s (%i) Failed creating %s listening socket: %s (%i) Failed creating %s listening socket: %s (%i)   GCDWebServerDelegate *_delegate GCDWebServerDelegate *_delegate OS_dispatch_source *_source4 NSDictionary *_options</p>
    <p>GCDWebServer *_webServer</p>
    <p>Weighted Edit Distance</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>In practice, we duplicate ti multiple times according to the weight assigned to it. Then use Levenshtein edit distance ratio algorithm to compute the similarity of two new Tokens.</p>
    <p>Libby NOW</p>
    <p>[[4, &quot;\&quot;IPv4\&quot;&quot;], [4, &quot;\&quot;IPv4\&quot;&quot;], [4, &quot;\&quot;IPv6\&quot;&quot;], [4, &quot;\&quot;IPv6\&quot;&quot;], [4, &quot;\&quot;Failed binding %s listening socket: %s (%i)\&quot;&quot;], [4, &quot;\&quot;Failed binding %s listening socket: %s (%i)\&quot;&quot;], [4, &quot;\&quot;IPv4\&quot;&quot;], [4, &quot;\&quot;IPv4\&quot;&quot;], [4, &quot;\&quot;IPv6\&quot;&quot;], [4, &quot;\&quot;IPv6\&quot;&quot;], [4, &quot;\&quot;Failed creating %s listening socket: %s (%i)\&quot;&quot;], [4, &quot;\&quot;Failed creating %s listening socket: %s (%i)\&quot;&quot;], [4, &quot;\&quot;IPv4\&quot;&quot;], [4, &quot;\&quot;IPv4\&quot;&quot;], [4, &quot;\&quot;IPv6\&quot;&quot;], [4, &quot;\&quot;IPv6\&quot;&quot;], [4, &quot;\&quot;Failed starting %s listening socket: %s (%i)\&quot;&quot;], [4, &quot;\&quot;Failed starting %s listening socket: %s (%i)\&quot;&quot;], [3, &quot;NSDictionary *_options&quot;], [3, &quot;NSDictionary *_options&quot;], [3, &quot;\&quot;Port\&quot;&quot;], [3, &quot;\&quot;Port\&quot;&quot;], [3, &quot;\&quot;BindToLocalhost\&quot;&quot;], [3, &quot;\&quot;BindToLocalhost\&quot;&quot;], [3, &quot;\&quot;MaxPendingConnections\&quot;&quot;], [3, &quot;\&quot;MaxPendingConnections\&quot;&quot;], [3, &quot;\&quot;Failed retrieving socket address: %s (%i)\&quot;&quot;], [3, &quot;\&quot;Failed retrieving socket address: %s (%i)\&quot;&quot;], [3, &quot;\&quot;ServerName\&quot;&quot;], [3, &quot;\&quot;ServerName\&quot;&quot;], [3, &quot;NSString *_serverName&quot;], [3, &quot;NSString *_serverName&quot;], [3, &quot;\&quot;AuthenticationMethod\&quot;&quot;], [3, &quot;\&quot;AuthenticationMethod\&quot;&quot;], [3, &quot;\&quot;Basic\&quot;&quot;], [3, &quot;\&quot;Basic\&quot;&quot;], [3, &quot;\&quot;AuthenticationRealm\&quot;&quot;], [3, &quot;\&quot;AuthenticationRealm\&quot;&quot;], [3, &quot;NSString *_authenticationRealm&quot;], [3, &quot;NSString *_authenticationRealm&quot;], [3, &quot;NSMutableDictionary *_authenticationBasicAccounts&quot;], [3, &quot;NSMutableDictionary *_authenticationBasicAccounts&quot;], [3, &quot;\&quot;AuthenticationAccounts\&quot;&quot;], [3,</p>
    <p>[[5, &quot;\&quot;IPv4\&quot;&quot;], [5, &quot;\&quot;IPv4\&quot;&quot;], [5, &quot;\&quot;IPv6\&quot;&quot;], [5, &quot;\&quot;IPv6\&quot;&quot;], [5, &quot;\&quot;Failed binding %s listening socket: %s (%i)\&quot;&quot;], [5, &quot;\&quot;Failed binding %s listening socket: %s (%i)\&quot;&quot;], [5, &quot;\&quot;IPv4\&quot;&quot;], [5, &quot;\&quot;IPv4\&quot;&quot;], [5, &quot;\&quot;IPv6\&quot;&quot;], [5, &quot;\&quot;IPv6\&quot;&quot;], [5, &quot;\&quot;Failed creating %s listening socket: %s (%i) \&quot;&quot;], [5, &quot;\&quot;Failed creating %s listening socket: %s (%i)\&quot;&quot;], [5, &quot;\&quot;IPv4\&quot;&quot;], [5, &quot;\&quot;IPv4\&quot;&quot;], [5, &quot;\&quot;IPv6\&quot;&quot;], [5, &quot;\&quot;IPv6\&quot;&quot;], [5, &quot;\&quot;Failed starting %s listening socket: %s (%i)\&quot;&quot;], [5, &quot;\&quot;Failed starting %s listening socket: %s (%i)\&quot;&quot;], [4, &quot;NSDictionary *_options&quot;], [4, &quot;NSDictionary *_options&quot;], [4, &quot;\&quot;Port\&quot;&quot;], [4, &quot;\&quot;Port\&quot;&quot;], [4, &quot;\&quot;BindToLocalhost\&quot;&quot;], [4, &quot;\&quot;BindToLocalhost\&quot;&quot;], [4, &quot;\&quot;MaxPendingConnections\&quot;&quot;], [4, &quot;\&quot;MaxPendingConnections\&quot;&quot;], [4, &quot;-[GCDWebServer _createListeningSocket:localAddress:length:maxPendingConnections:error:]&quot;], [4, &quot;\&quot;Failed retrieving socket address: %s (%i)\&quot;&quot;], [4, &quot;\&quot;Failed retrieving socket address: %s (%i)\&quot;&quot;], [4, &quot;-[GCDWebServer _createListeningSocket:localAddress:length:maxPendingConnections:error:]&quot;], [4, &quot;\&quot;ServerName\&quot;&quot;], [4, &quot;\&quot;ServerName\&quot;&quot;], [4, &quot;NSString *_serverName&quot;], [4, &quot;NSString</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>The weighted edit distance can increase the distance ratio R of the call stacks for the same third-party network service library in different apps, but has slightly less influence for different libraries.</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Building Signature for Network Services</p>
    <p>We evaluate each string in Token by leveraging the TF/IDF algorithm to obtain the prominent string, which is used for identifying third-party network service libraries.</p>
    <p>TF/IDF</p>
    <p>Token Signature</p>
    <p>$&lt;$``\%@ started on port \%i and reachable at \%@'', ``GCDWebServer''$&gt;$</p>
    <p>Call Stack Analysis</p>
  </div>
  <div class="page">
    <p>Network Service of iOS Ecosystem</p>
    <p>Insight: Network services are prevalent in iOS apps. Over 40.98% apps potentially invoke system APIs to provide network services. The results show that apps in China are more inclined to provide network services than those in the United States.</p>
    <p>Large scale analysis by using system network service APIs</p>
  </div>
  <div class="page">
    <p>Insight: Apps in Game category are inclined to provide network services.</p>
    <p>System network services APIs across app categories</p>
    <p>Network Service of iOS Ecosystem</p>
  </div>
  <div class="page">
    <p>Insight: Apps in Game category are inclined to provide network services.</p>
    <p>System network services APIs across app categories</p>
    <p>Third-party network services libraries across app categories</p>
    <p>Insight: The Game category mainly uses CocoaHTTPServer and Tapjoy-CocoaHTTPServerExtension libraries may lead to the library misuse.</p>
    <p>Network Service of iOS Ecosystem</p>
  </div>
  <div class="page">
    <p>Association of third-party network service libraries and system network service APIs</p>
    <p>Layout of system network service APIs and third-party network service libraries</p>
    <p>Third-party network service libraries</p>
    <p>System network service APIs</p>
    <p>Cocoa Async SocketGCDWebServer</p>
    <p>Ionic s Webview</p>
    <p>PO SIX Layer (BSD sockets)</p>
    <p>CFSocketSetAddress res_9_query ...</p>
    <p>CocoaHTTPServerPureFTPd</p>
    <p>Tapjoy</p>
    <p>Syst em code</p>
    <p>Network Service of iOS Ecosystem</p>
  </div>
  <div class="page">
    <p>Vulnerabilities in iOS Apps</p>
  </div>
  <div class="page">
    <p>Vulnerabilities in iOS Apps</p>
  </div>
  <div class="page">
    <p>Demo</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Vulnerabilities: 11 in 1,300 seed apps, 92 in 168,951 apps</p>
    <p>CVEs: CVE-2019-14924, CVE-2019-14951</p>
    <p>Network service is wildly used in iOS applications.  Vulnerabilities are wildly exist in these network services.</p>
    <p>Mitigation:</p>
    <p>App developers to use the loopback interface as much as possible to avoid unnecessary use of the LAN interface, and to enforce the deliberately designed access control when using the LAN interface.</p>
    <p>To mitigate the attack via public Wi-Fi or cellular networks, we recommend network operators to implement stricter firewall strategies and block unknown connection attempts originating from the same LAN network.</p>
    <p>System vendors such as Apple should also apply a host-based firewall.</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Static analysis tool: https://github.com/pwnzen-mobile/ Dynamic analysis and dataset: https://github.com/SiOS-Submission/SiOS Authentication needed app collection: www.appscan.io</p>
  </div>
</Presentation>
