<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Composing XSL</p>
    <p>Transformations with XML</p>
    <p>Publishing Views Chengkai Li University of Illinois at Urbana</p>
    <p>Champaign</p>
    <p>Philip Bohannon Lucent Technologies, Bell Labs</p>
    <p>Henry F. Korth Lehigh University</p>
    <p>PPS Narayan Lucent Technologies, Bell Labs</p>
    <p>SIGMOD 2003</p>
  </div>
  <div class="page">
    <p>MotivationMotivation</p>
    <p>XML: popular for data representation and exchange</p>
    <p>The data: stored in RDBMS  Vast majority of existing data stored in RDBMS  Efficiency, robustness of RDBMS for XML applications  XML Publishing Views (SilkRoute, XPERANTO)</p>
    <p>The query: expressed as XSLT  Designed for document transformation  Popular as XML query language</p>
    <p>How to evaluate queries on relational data posed in XSLT?</p>
  </div>
  <div class="page">
    <p>XML PublishingXML Publishing</p>
    <p>SQL queryes</p>
    <p>Relational DB</p>
    <p>Query Logic</p>
    <p>Tagger</p>
    <p>XML data</p>
    <p>Publisher</p>
    <p>view query: specifies the mapping between relational tables and resulting XML document.</p>
    <p>view query</p>
  </div>
  <div class="page">
    <p>Example: tables and schema of view HOTEL</p>
    <p>hotelid name star metro_id 1 Hyatt 2 NYC</p>
    <p>metroid name NYC New York City</p>
    <p>CHI Chicago</p>
    <p>METROAREA</p>
    <p>ROOM</p>
    <p>hotel_id room # available 1 101 F</p>
    <p>/</p>
    <p>metro (name)</p>
    <p>hotel (name, star)</p>
    <p>room (#)total_room available</p>
  </div>
  <div class="page">
    <p>Example: published XML document</p>
    <p>/</p>
    <p>metro (Chicago)metro (New York City)</p>
    <p>room (2) total_room</p>
    <p>availableroom (1) 2</p>
    <p>hotel (Hilton, 4)</p>
    <p>room (102) total_room</p>
    <p>room (101) 2</p>
    <p>hotel (Hyatt, 2)</p>
  </div>
  <div class="page">
    <p>Example of View QueryExample of View Query Relational Schema</p>
    <p>Metroarea(metroid, metroname) Hotel(hotelid, hotelname, starrating, metro_id) Room(hotel_id, room#, available)</p>
    <p>Desired Hierarchical Structure of Published XML</p>
    <p>$m = SELECT metroid, metroname FROM metroarea</p>
    <p>$h =SELECT * FROM hotel WHERE metro_id = $m.metroid AND starrating &gt; 4</p>
    <p>&lt;metro&gt;</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt; &lt;available&gt;&lt;room&gt;</p>
    <p>/</p>
  </div>
  <div class="page">
    <p>Evaluate XSLT queries on relational data? Evaluate XSLT queries on relational data?</p>
    <p>publisher</p>
    <p>XSLT stylesheet</p>
    <p>view query</p>
    <p>view</p>
  </div>
  <div class="page">
    <p>Approach 1: MaterializationApproach 1: Materialization</p>
    <p>Approach 1</p>
    <p>XML parsing  relational engine for XML processing</p>
    <p>unnecessary materialization of nodes</p>
    <p>publisher</p>
    <p>XSLT stylesheet</p>
    <p>view query</p>
    <p>XSLT processor</p>
    <p>materialized view</p>
  </div>
  <div class="page">
    <p>Unnecessary MaterializationsUnnecessary Materializations</p>
    <p>rule 1. metro [@name=Chicago] : output name</p>
    <p>rule 2. hotel [@star&gt;3]: no output</p>
    <p>rule 3. total_room : output total number of rooms</p>
    <p>nodes that do not satisfy type requirement nodes that do not satisfy selection condition nodes not involved in output /</p>
    <p>metro (Chicago)metro (New York City)</p>
    <p>room (2) total_room</p>
    <p>availableroom (1) 2</p>
    <p>hotel (Hilton, 4)</p>
  </div>
  <div class="page">
    <p>Approach 2: View CompositionApproach 2: View Composition</p>
    <p>+ new</p>
    <p>view query</p>
    <p>publisher</p>
    <p>publisher</p>
    <p>XSLT stylesheet</p>
    <p>view query</p>
    <p>XSLT processor</p>
    <p>XSLT stylesheet</p>
    <p>view query</p>
    <p>XML data</p>
    <p>materialized view</p>
    <p>Approach 1 Approach 2</p>
    <p>XML parsing   relational engine for XML processing</p>
    <p>unnecessary materialization of nodes</p>
  </div>
  <div class="page">
    <p>Algorithm OverviewAlgorithm Overview</p>
    <p>nodes that do not satisfy type requirements:</p>
    <p>What type of nodes are accessed?</p>
    <p>nodes that do not satisfy selection condition:</p>
    <p>What are the instances of these types of nodes?</p>
    <p>nodes not involved in output: How do we avoid materializing uninvolved</p>
    <p>nodes?</p>
    <p>/</p>
    <p>metro (Chicago)metro (New York City)</p>
    <p>room (2) total_room</p>
    <p>availableroom (1) 2</p>
    <p>hotel (Hilton, 4)</p>
  </div>
  <div class="page">
    <p>Algorithm OverviewAlgorithm Overview view</p>
    <p>query XSLT</p>
    <p>stylesheet</p>
    <p>new view query</p>
    <p>+</p>
    <p>Context Transition Graph (CTG)</p>
    <p>Traverse View Query (TVQ)</p>
    <p>Output Tag Tree (OTT)</p>
    <p>What type of nodes are accessed?</p>
    <p>What are the instances of these types of nodes?</p>
    <p>How do we avoid materializing nodes uninvolved in output?</p>
  </div>
  <div class="page">
    <p>Example of XSLT StylesheetExample of XSLT Stylesheet</p>
    <p>R1: &lt;xsl:template match=/&gt; &lt;result_metro&gt; &lt;A/&gt; &lt;xsl:apply-templates select=metro/hotel/total_room/&gt; &lt;/result_metro&gt; &lt;/xsl:template&gt;</p>
    <p>R2: &lt;xsl:template match=total_room&gt; &lt;result_total&gt; &lt;B/&gt; &lt;xsl:apply-templates select=../available/../room/&gt; &lt;/result_total&gt; &lt;/xsl:template&gt;</p>
    <p>R3: &lt;xsl:template match=metro/hotel/room&gt; &lt;xsl:value-of select=./&gt; &lt;/xsl:template&gt;</p>
  </div>
  <div class="page">
    <p>Template RuleTemplate Rule</p>
    <p>&lt;xsl:template match=/&gt; &lt;result_metro&gt; &lt;A/&gt; &lt;xsl:apply-templates select=metro/hotel/total_room/&gt; &lt;/result_metro&gt; &lt;/xsl:template&gt;</p>
    <p>A stylesheet consists of a set of template rules.</p>
    <p>R = &lt;match_pattern(r), output(r), select_expression(r) &gt;</p>
    <p>match the root generate output process total_room for all hotels of all metro areas</p>
  </div>
  <div class="page">
    <p>Simplified RepresentationSimplified Representation</p>
    <p>R1: match=/ select=metro/hotel/total_room</p>
    <p>R2: match=total_room select=../available/../room</p>
    <p>R3: match=metro/hotel/room</p>
  </div>
  <div class="page">
    <p>XSLT processingXSLT processing</p>
    <p>R1: match=/ select=metro/hotel/total_room</p>
    <p>R2: match=total_room select=../available/../room</p>
    <p>R3: match=metro/hotel/room</p>
    <p>&lt;metro&gt;</p>
    <p>/</p>
    <p>&lt;metro&gt;</p>
    <p>&lt;hotel&gt; &lt;hotel&gt;</p>
    <p>&lt;room&gt;&lt;total_room&gt; &lt;room&gt; &lt;available&gt;</p>
    <p>(/, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
  </div>
  <div class="page">
    <p>Context Transition Graph (CTG)Context Transition Graph (CTG)</p>
    <p>(/, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
    <p>Document instances of &lt;total_room&gt; may be matched by R2, which further selects document instances of &lt;room&gt;, which may be matched by R3.</p>
    <p>MATCHQ: nodes SELECTQ: edges</p>
    <p>CTG: Which type of nodes are accessed?</p>
    <p>total_room: context node</p>
    <p>room: new context node</p>
  </div>
  <div class="page">
    <p>Instances of accessed nodes?Instances of accessed nodes?</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=?</p>
  </div>
  <div class="page">
    <p>Traverse View Query (TVQ)Traverse View Query (TVQ)</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3) $r_new =SELECT * FROM room WHERE hotel_id=$t_new.hotelid AND EXISTS (SELECT * FROM room WHERE hotel_id=$t_new.hotelid AND available = TRUE)</p>
    <p>TVQ: Instances of accessed nodes</p>
  </div>
  <div class="page">
    <p>TVQ: Instances of accessed nodesTVQ: Instances of accessed nodes</p>
    <p>R2: match=total_room select=../available/../room</p>
    <p>R3:match=metro/hotel/room</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt; &lt;room&gt;</p>
    <p>&lt;available&gt;</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;room&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt;</p>
    <p>&lt;room&gt;</p>
    <p>&lt;available&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=?</p>
  </div>
  <div class="page">
    <p>Select-Match Tree: How does context transition happen? Select-Match Tree: How does context transition happen?</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt;</p>
    <p>&lt;room&gt;</p>
    <p>&lt;available&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=?</p>
  </div>
  <div class="page">
    <p>UNBIND: Select-Match Tree  tag query UNBIND: Select-Match Tree  tag query</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt;</p>
    <p>&lt;room&gt;</p>
    <p>&lt;available&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=?</p>
  </div>
  <div class="page">
    <p>UNBIND: Select-Match Tree  tag query UNBIND: Select-Match Tree  tag query</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt; &lt;available&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=?</p>
    <p>&lt;room&gt; $r =SELECT * FROM room WHERE hotel_id=$h.hotelid</p>
  </div>
  <div class="page">
    <p>UNBIND: Select-Match Tree  tag query UNBIND: Select-Match Tree  tag query</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt; &lt;available&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=SELECT * FROM room WHERE hotel_id=$t_new.hotelid</p>
    <p>&lt;room&gt; $r =SELECT * FROM room WHERE hotel_id=$h.hotelid</p>
  </div>
  <div class="page">
    <p>UNBIND: Select-Match Tree  tag query UNBIND: Select-Match Tree  tag query</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new=SELECT * FROM room WHERE hotel_id=$t_new.hotelid</p>
    <p>&lt;room&gt;</p>
    <p>&lt;available&gt; $a=SELECT * FROM room WHERE hotel_id=$h.hotelid AND available = TRUE</p>
  </div>
  <div class="page">
    <p>UNBIND: Select-Match Tree  tag query UNBIND: Select-Match Tree  tag query</p>
    <p>&lt;hotel&gt;</p>
    <p>&lt;total_room&gt;</p>
    <p>&lt;metro&gt;</p>
    <p>Select-Match Tree</p>
    <p>(/, R1)</p>
    <p>(total_room,R2) $t_new=</p>
    <p>(room,R3)</p>
    <p>$r_new =SELECT * FROM room WHERE hotel_id=$t_new.hotelid AND EXISTS (SELECT * FROM room WHERE hotel_id=$t_new.hotelid AND available = TRUE)</p>
    <p>&lt;room&gt;</p>
    <p>&lt;available&gt; $a=SELECT * FROM room WHERE hotel_id=$h.hotelid AND available = TRUE</p>
  </div>
  <div class="page">
    <p>UNBIND: General Cases UNBIND: General Cases</p>
    <p>General Select-Match Tree with Predicates</p>
    <p>Unbind along the lowest common ancestor to the new context node (FROM)</p>
    <p>Nest of all sub-trees not on the two paths (WHERE EXISTS)</p>
    <p>Attribute access of all nodes (WHERE)</p>
    <p>lowest common ancestor</p>
    <p>a=10</p>
    <p>b&lt;5</p>
    <p>context node</p>
    <p>new context node</p>
  </div>
  <div class="page">
    <p>Output Tag TreeOutput Tag Tree</p>
    <p>(root, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
  </div>
  <div class="page">
    <p>Output Tag Tree (OTT)Output Tag Tree (OTT)</p>
    <p>R1: &lt;xsl:template match=``/''&gt;</p>
    <p>&lt;result_metro&gt; &lt;A/&gt; &lt;xsl:apply-templates select=``''/&gt; &lt;/result_metro&gt; &lt;/xsl:template&gt;</p>
    <p>&lt;result_metro&gt;</p>
    <p>&lt;A&gt;</p>
    <p>apply-template</p>
    <p>(root, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
  </div>
  <div class="page">
    <p>Output Tag Tree (OTT)Output Tag Tree (OTT)</p>
    <p>R2: &lt;xsl:template match=``total_room''&gt; &lt;result_total&gt; &lt;B/&gt; &lt;xsl:apply-templates select=``...''/&gt; &lt;/result_total&gt; &lt;/xsl:template&gt;</p>
    <p>&lt;result_metro&gt;</p>
    <p>&lt;A&gt;</p>
    <p>&lt;result_total&gt;</p>
    <p>&lt;B&gt;</p>
    <p>apply-template</p>
    <p>(root, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
  </div>
  <div class="page">
    <p>Output Tag Tree (OTT)Output Tag Tree (OTT)</p>
    <p>&lt;result_metro&gt;</p>
    <p>&lt;A&gt;</p>
    <p>&lt;result_total&gt;</p>
    <p>&lt;B&gt;</p>
    <p>&lt;room&gt;</p>
    <p>R3: &lt;xsl:template match=``metro/hotel/room''&gt; &lt;xsl:value-of select=''.''/&gt; &lt;/xsl:template&gt;</p>
    <p>(root, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
  </div>
  <div class="page">
    <p>New View QueryNew View Query</p>
    <p>&lt;result_metro&gt;</p>
    <p>&lt;A&gt;</p>
    <p>&lt;result_total&gt;</p>
    <p>&lt;B&gt;</p>
    <p>&lt;room&gt;</p>
    <p>Forced Unbind during the generation of OTT</p>
    <p>(root, R1)</p>
    <p>(total_room,R2)</p>
    <p>(room,R3)</p>
  </div>
  <div class="page">
    <p>XSLT_basicXSLT_basic</p>
    <p>no type coercion no document order no // no function no variable and parameter no recursion no predicate in expression no flow-control elements</p>
    <p>(&lt;xsl:if&gt;, &lt;xsl:for-each&gt;,&lt;xsl:choose&gt;) no conflicting rule resolution select of &lt;xsl:value-of&gt; is .</p>
  </div>
  <div class="page">
    <p>Relaxing AssumptionsRelaxing Assumptions</p>
    <p>recursion</p>
    <p>predicate in expression</p>
    <p>flow-control elements</p>
    <p>(&lt;xsl:if&gt;, &lt;xsl:for-each&gt;,&lt;xsl:choose&gt;)</p>
    <p>conflicting rule resolution</p>
    <p>select of &lt;xsl:value-of&gt; be other than . and @attribute</p>
  </div>
  <div class="page">
    <p>SummarySummary</p>
    <p>Problem: Composing XSL Transformations with XML publishing views</p>
    <p>Advantages compared with materialization approach</p>
    <p>Algorithm  Context Transition Graph  Traverse View Query  Output Tag Tree</p>
    <p>Relaxing Assumptions</p>
  </div>
  <div class="page">
    <p>Future WorkFuture Work</p>
    <p>//: CTG graph multigraph</p>
    <p>recursion</p>
  </div>
  <div class="page">
    <p>Related WorkRelated Work Translating XSLT into SQL queries: Jain et al, WWW 02</p>
    <p>XML publishing middleware SilkRoute: Fernandez et al, WWW 00, SIGMOD 01 XPERANTO: Carey et al, WebDB 00 &amp; Shanmugasundaram et al, VLDB 01</p>
    <p>Incorporating XSL processing into database engines: Moerkotte, VLDB 02</p>
  </div>
</Presentation>
