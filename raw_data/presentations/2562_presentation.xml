<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A new approach to reporting failures in distributed systems</p>
    <p>Joshua B. Leners*, Trinabh Gupta*,</p>
    <p>Marcos K. Aguilera, and Michael Walfish*</p>
    <p>*The University of Texas at Austin Microsoft Research Silicon Valley</p>
  </div>
  <div class="page">
    <p>Ad hoc failure handling logic</p>
    <p>Failure detection module</p>
    <p>Target process</p>
    <p>Client process</p>
  </div>
  <div class="page">
    <p>destination unreachable</p>
    <p>Client</p>
    <p>Transient or permanent</p>
    <p>Client process</p>
    <p>OS TCP acks,</p>
    <p>ECN</p>
    <p>? Client TargetNetwork</p>
    <p>Timeout fires!</p>
    <p>??</p>
    <p>? ?</p>
    <p>?</p>
    <p>? ? [Bertier et al. DSN02, Chen et al. 2002, -accrual FD SRDS04, sqrt(S) EuroSys07]</p>
  </div>
  <div class="page">
    <p>The network was designed to hide fine-grained failure information</p>
    <p>The architecture was to mask completely any transient failure.</p>
    <p>There are a number of services which are explicitly not assumed from the network [including] internal knowledge of failures ...</p>
    <p>[D.D. Clark. The design philosophy of the DARPA Internet protocols. SIGCOMM 1988]</p>
  </div>
  <div class="page">
    <p>This design choice is mismatched to todays requirements</p>
    <p>Universal recovery not optimal for</p>
    <p>every failure</p>
    <p>Apps choose</p>
    <p>universal recovery</p>
    <p>Failures are diverse</p>
    <p>Apps lack failure</p>
    <p>information</p>
    <p>Process crash</p>
    <p>Host crash</p>
    <p>Network partition Stale routing</p>
    <p>state</p>
    <p>Misconfigured network</p>
    <p>Network congestion</p>
    <p>Transmission errors</p>
    <p>Lower application availability</p>
    <p>A FAILURE</p>
  </div>
  <div class="page">
    <p>Applications choose a recovery action that must work for all failures</p>
    <p>Client</p>
    <p>Primary Backup</p>
    <p>Timeout</p>
    <p>Lease service</p>
  </div>
  <div class="page">
    <p>Applications choose a recovery action that must work for all failures</p>
    <p>If primary crashes, the backup must wait for the lease to expire.</p>
    <p>Client</p>
    <p>Primary Backup</p>
    <p>Timeout</p>
    <p>Lease service Network</p>
    <p>problem?</p>
  </div>
  <div class="page">
    <p>Improve recovery and availability using more information about failures</p>
    <p>The backup must wait for the lease to expire.</p>
    <p>Client</p>
    <p>Primary Backup</p>
    <p>Timeout</p>
    <p>Lease service Network</p>
    <p>problem?</p>
    <p>If the backup knew that the primary had crashed then it could immediately take over.</p>
  </div>
  <div class="page">
    <p>We argue:</p>
    <p>The network interface should expose information about failures</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>An Interface to failures and its implementation, Pigeon.</p>
    <p>Benefits of this Interface to real-world applications.</p>
  </div>
  <div class="page">
    <p>The network interface should expose information about failures</p>
    <p>But what failure information should it expose?</p>
  </div>
  <div class="page">
    <p>Process crash</p>
    <p>Host crash</p>
    <p>Network partition</p>
    <p>Stale routing state</p>
    <p>Misconfigured network</p>
    <p>CPU overload</p>
    <p>Network congestion</p>
    <p>Strawman: expose individual failure type to application</p>
    <p>Exposing too many failure types is burdensome.  Understand semantics of each failure</p>
    <p>New failure type requires updating code</p>
    <p>We need something simpler yet similarly effective.</p>
    <p>Host reboot And others ...</p>
  </div>
  <div class="page">
    <p>Our approach: group remote failures that applications handle similarly</p>
    <p>Process crash</p>
    <p>Host crash</p>
    <p>Network partitionStale routing</p>
    <p>state</p>
    <p>Misconfigured network</p>
    <p>CPU overload</p>
    <p>Network congestion</p>
    <p>Host reboot</p>
    <p>Stop: Target stopped</p>
    <p>permanently</p>
    <p>Unreachable: Target is unreachable</p>
    <p>Expected Duration</p>
    <p>Warning: Some resource is depleted</p>
    <p>Depleted Resource</p>
  </div>
  <div class="page">
    <p>A simple yet effective abstraction</p>
    <p>Less information Simple</p>
    <p>More information More benefits</p>
    <p>Existing interface</p>
    <p>Some failure Process Crash, Host Crash, Partition,</p>
    <p>Congestion, etc.</p>
    <p>Failure types</p>
    <p>Stop, Unreachable,</p>
    <p>Warning</p>
  </div>
  <div class="page">
    <p>Sensor (S)</p>
    <p>Interpreter</p>
    <p>Target process</p>
    <p>Client process</p>
    <p>Router</p>
    <p>Router</p>
    <p>SR Relay (R)</p>
    <p>Birds eye view of Pigeon</p>
    <p>Sensors gather local information; extends [Falcon SOSP11].</p>
    <p>Relays transport information to end-hosts.</p>
    <p>Interpreter presents the API to the applications.</p>
    <p>S</p>
    <p>SR S</p>
  </div>
  <div class="page">
    <p>Implementing the interface is easy but ...</p>
    <p>Pigeon must detect all possible remote failures and tolerate its own failures.</p>
    <p>Response: Use end-to-end timeouts.</p>
    <p>Pigeon must report duration of unreachability. Response: Use previously collected failure data.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>An Interface to failures and its implementation, Pigeon.</p>
    <p>Benefits of this Interface to real-world applications.</p>
  </div>
  <div class="page">
    <p>Evaluation questions</p>
    <p>Does using the interface improve application availability?</p>
    <p>Does using the interface let applications take optimal recovery actions?</p>
    <p>How much do all of these benefits cost?</p>
  </div>
  <div class="page">
    <p>Our test network</p>
    <p>16 physical routers running OSPF and connected in a 4-port fat-tree topology.</p>
    <p>12 hosts connected to this network.</p>
    <p>Router</p>
    <p>Host</p>
  </div>
  <div class="page">
    <p>Does distinguishing between host and network failures improve application availability?</p>
  </div>
  <div class="page">
    <p>Distinguishing host and network failures reduces unavailability by 4x</p>
    <p>Client</p>
    <p>Primary Backup</p>
    <p>Lease service</p>
    <p>Cant distinguish host and network failures</p>
    <p>Primary has stopped</p>
  </div>
  <div class="page">
    <p>Does reporting network failure information improve application availability?</p>
  </div>
  <div class="page">
    <p>Latency</p>
    <p>Data DigestDigest</p>
    <p>Coordinator</p>
    <p>Network</p>
    <p>Primary Backup Backup</p>
    <p>Client</p>
    <p>Coordinator uses smallest average latency of past requests to select primary.</p>
    <p>Cassandra</p>
  </div>
  <div class="page">
    <p>Throughput (reads/sec)</p>
    <p>Time (seconds)</p>
    <p>With Pigeon</p>
    <p>Without Pigeon</p>
    <p>Detecting failures quickly helps Cassandra optimize replica selection</p>
    <p>Transient routing problem</p>
  </div>
  <div class="page">
    <p>Does reporting the expected failure duration improve recovery decisions?</p>
  </div>
  <div class="page">
    <p>Master Recovery master</p>
    <p>Network</p>
    <p>Backup Backup Backup</p>
    <p>Client</p>
    <p>RAMCloud</p>
    <p>RAMCloud may recover even during transient problems.</p>
  </div>
  <div class="page">
    <p>Distinguishing transient and long-lasting failures helps avoid unnecessary recovery</p>
    <p>For a transient routing problem</p>
    <p># of times RAMCloud recovered</p>
    <p>System downtime</p>
    <p>Using timeout 10/10 2.8 seconds</p>
    <p>With Pigeon 0/10 2.6 seconds</p>
  </div>
  <div class="page">
    <p>The interface is generally applicable</p>
    <p>For a transient routing problem</p>
    <p>Application Action taken under Pigeon</p>
    <p>RAMCloud wait for problem to resolve</p>
    <p>Cassandra pick another primary replica</p>
  </div>
  <div class="page">
    <p>How much does Pigeon cost?</p>
  </div>
  <div class="page">
    <p>Pigeon provides benefits at low costs</p>
    <p>End-host</p>
    <p>CPU (2.4 GHz): 3.1 % Network: 2.3 kbps</p>
    <p>Router</p>
    <p>LOC</p>
    <p>Pigeon (C++, Java) 5400</p>
    <p>RAMCloud changes 68</p>
    <p>Cassandra changes 414</p>
    <p>CPU (480 MHz): 0.3 % Network: 2.1 kbps</p>
  </div>
  <div class="page">
    <p>Other related work: network monitoring</p>
    <p>For operators: ([Shaikh &amp; Greenberg NSDI04, Kompella et al. NSDI05, Zhao et al. SIGCOMM06, Goldberg et al. SIGMETRICS 08])</p>
    <p>For transport: ([Krishnan et al. Computer Networks 2004, Stone &amp; Partridge SIGCOMM00, NEH SIGCOMM08])</p>
    <p>For end-host app.  Latency: ([King IMW02, Meridian SIGCOMM05])  State of the network: ([CHHMR WORLDS04, Knowledge Plane</p>
    <p>SIGCOMM03, NetQuery SIGCOMM11, Sophia HotNets03, iPlane OSDI06])  Loss: ([Packet Obituaries HotNets04])  Path anomalies: ([PlanetSeer OSDI04])</p>
  </div>
  <div class="page">
    <p>Take-away points</p>
    <p>The network interface should expose failure information to applications.</p>
    <p>The interface should expose host and network failures, transient and long-lasting failures.</p>
    <p>This interface can be implemented at low cost (and with simple design) and benefits a variety of applications.</p>
  </div>
</Presentation>
