<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>David P. Reed/SAP Research</p>
    <p>Simultaneous Considered Harmful:</p>
    <p>Modular Parallelism</p>
  </div>
  <div class="page">
    <p>Time is what keeps everything from happening at once... And space is what keeps everything from happening to me.</p>
    <p>- John Wheeler (following Ray Cummings)</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 3 Public</p>
    <p>Overview</p>
    <p>Why must parallel computing be difficult? The world is embarrassingly parallel!</p>
    <p>A change in perspective is worth 80 IQ points. (Alan Kay)</p>
    <p>Traps Better ideas</p>
    <p>Careless primitive design Deprecate/replace them</p>
    <p>Bad modularity Hide internal effects</p>
    <p>Virtualization by parts Virtualization of wholes</p>
    <p>Calls to action</p>
    <p>Principles</p>
    <p>Escaping our tangled roots (examples)</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 4 Public</p>
    <p>Calls to Action</p>
    <p>Accept into your life: Parallel is the norm, not radical exception</p>
    <p>Simultaneous-action-at-a-distance is a bad habit:</p>
    <p>Eliminate constructs whose operational semantics feed the habit</p>
    <p>Question serializability for defining correctness</p>
    <p>Good modularity principles should never discuss simultaneous</p>
    <p>Fix programmer thinking: teach parallel programming first.</p>
    <p>Reject Amdahls Law. It dominates only</p>
    <p>because programs are conceived as sequential,</p>
    <p>not because the problems are sequential.</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 5 Public</p>
    <p>Issues</p>
    <p>All important computing systems will evolve, scale up, outlive embodiments</p>
    <p>Unfortunate belief from HPC culture: parallel means tune to bare silicon</p>
    <p>Parallel execution disrupts clean modular system designs, due to</p>
    <p>Nave time concept: total ordering</p>
    <p>Virtualization based on sequential (and hard to reverse) resource binding</p>
    <p>Coroutine-based processor multiplexing (time-sharing)</p>
    <p>Module composition conceived as order of execution</p>
    <p>Write-ordering to memory</p>
    <p>Caller waits for callee</p>
    <p>Concurrency control needed because concurrent modules interfere with each other</p>
    <p>Correctness defined by serializability  superscalar processor, DBMS</p>
    <p>Compilation and interpretation (hardware, OS, compiler, interpreter, DBMS)</p>
    <p>resource binding overconstrains execution flexibility, complicating design</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 6 Public</p>
    <p>Simultaneous should be unspeakable</p>
    <p>Lamport (Time, Clocks, and the Ordering of Events in a Distributed System)</p>
    <p>argued: causal ordering is sufficient to specify correct behavior and</p>
    <p>described a system of clocks that defines a total causal ordering</p>
    <p>But Einstein (and Goedel) argued for the universe being based on a causal</p>
    <p>partial ordering  different observers in the system may observe different</p>
    <p>orderings</p>
    <p>A consistent total ordering of all events is not needed to define correctness of</p>
    <p>any physical system (computing systems are a subset of physical systems).</p>
    <p>Total orderings are costly to achieve because they imply simultaneous</p>
    <p>operations at any distance.</p>
    <p>Far too many computing primitives imply simultaneous action across an</p>
    <p>unbounded system</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 7 Public</p>
    <p>Semantically problematic primitives</p>
    <p>Hardware, OS and language primitives implying simultaneous distant action</p>
    <p>Semaphores (Dijkstra  based on co-routines in THE O/S)</p>
    <p>POSIX shared memory mprotect system call</p>
    <p>POSIX open() system call binding a name to a file</p>
    <p>Compare-and-swap instruction</p>
    <p>Gratuituous implicit interactions (false sharing)</p>
    <p>Clean primitives that imply only causal partial ordering</p>
    <p>Fork() and join()</p>
    <p>Eventcounts and sequencers</p>
    <p>Producer-consumer LIFO and FIFO buffers</p>
    <p>Multicast send/receive</p>
    <p>Write-once, read-many memory cells</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 8 Public</p>
    <p>Good modularity in a parallel world</p>
    <p>Parnas  Information Hiding Principle (hide all information about how a</p>
    <p>module works inside the module)</p>
    <p>Cleaning Atomic Action</p>
    <p>System R locking paper: Atomic x = for all y, either x precedes y or y precedes x</p>
    <p>Serializable = as-if sequential</p>
    <p>Cleaner: nothing about how x is executed can be observed by y, no matter when y</p>
    <p>is carried out. (no hidden causal ordering)</p>
    <p>Simplifies parallel composition of modules when there is no causal connection</p>
    <p>Note: does not prevent transparent caching for speedup within modules.</p>
    <p>Idempotency  without ordering  helps build fault tolerance</p>
    <p>X || X || X == X can be implemented without simultaneous distant action</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 9 Public</p>
    <p>Virtualization with parallelism in mind</p>
    <p>Virtualization  reversible binding of an abstract computing platform to</p>
    <p>resources of an underlying computing platform of similar or different</p>
    <p>capability. e.g. virtual memory, virtual processor, virtual machine, virtual</p>
    <p>network,</p>
    <p>Virtualization (and emulation) usually enhance flexibility, scalability, fault</p>
    <p>tolerance, availability, security, etc.</p>
    <p>Not true when parallelism involved why?</p>
    <p>Observation: Ordering constraints on resource bindings of virtualization</p>
    <p>interfere with primitives and modules that imply simultaneous action at a</p>
    <p>distance.</p>
    <p>This is because virtualization of parts is not virtualization of the whole.</p>
    <p>A parallel machine where simultaneous is an unspeakable is easy to</p>
    <p>virtualize.</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 10 Public</p>
    <p>Implications</p>
    <p>Clarify modularity as isolation of internals and separation of concerns, not</p>
    <p>distinctions of time</p>
    <p>Scrub simultaneous thinking from our vocabulary and our computing</p>
    <p>concepts.</p>
    <p>Isolate legacy systems inside containers where only inputs and outputs are</p>
    <p>exposed. They dont scale today, and embed too many problematic concepts.</p>
    <p>Start all systems designs as parallel - deprecate sequential execution as a</p>
    <p>rare special case</p>
    <p>Dont try to parallelize sequential programs  Amdahls Law makes it a</p>
    <p>waste of time to try to undo all the implicit choices made.</p>
    <p>Parallel thinking is not any harder than sequential thinking, and ought to be a</p>
    <p>lot easier, since most activities are parallel.</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>Debate?</p>
    <p>Contact information: david.reed@sap.com</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 12 Public</p>
    <p>Example: Critical section</p>
    <p>Critical</p>
    <p>Section</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 13 Public</p>
    <p>Disclaimer</p>
    <p>This document contains research concepts from SAP, and is not intended to</p>
    <p>be binding upon SAP for any particular course of business, product strategy,</p>
    <p>and/or development. SAP assumes no responsibility for errors or omissions</p>
    <p>in this document. SAP does not warrant the accuracy or completeness of the</p>
    <p>information, text, graphics, links, or other items contained within this material</p>
  </div>
</Presentation>
