<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LOOM: Optimal Aggregation Overlays for In-Memory Big Data</p>
    <p>Processing</p>
    <p>William Culhane, Kirill Kogan, Chamikara Jayalath, Patrick Eugster</p>
    <p>Department of Computer Science, Purdue University</p>
    <p>Presented at HotCloud 14</p>
    <p>June 18, 2014</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Motivation and Background</p>
    <p>Model</p>
    <p>Heuristics</p>
    <p>Implementation</p>
    <p>Experimental Setup and Results</p>
    <p>Conclusions and Future Work</p>
    <p>Intro | Motivation | Model | Heuristics| Implementation | Experiments | Conclusions 2</p>
  </div>
  <div class="page">
    <p>Motivation and Background</p>
    <p>In-memory Big Data, e.g. RDDs [Zaharia et al.;NSDI 2012] Presto [Venkataraman et al.;Eurosys 13]</p>
    <p>Aggregation specific (MapReduceMerge, Yang et al., SIGMOD 07)</p>
    <p>Minimize latency of tree overlay</p>
    <p>Mathematically modeled optima [Kim et al.;IEEE Transactions on Aerospace and Electronic Systems 32, 2 (96)]</p>
    <p>Minimal analysis and configuration</p>
  </div>
  <div class="page">
    <p>Model</p>
    <p>Compute-Aggregate ( 0   )</p>
    <p>Customizable fanout</p>
  </div>
  <div class="page">
    <p>Examples</p>
    <p>Merge sorted elements</p>
    <p>Min/Max/Average</p>
    <p>Word count</p>
    <p>Top-k matching</p>
  </div>
  <div class="page">
    <p>Aggregation Function Rules</p>
    <p>Associative (  , )  ( , )</p>
    <p>Cumulative (  ,( ))  ( , )</p>
    <p>Commutative ( , )  ( , )</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
    <p>Assumptions on latency, not correctness</p>
    <p>Trees  each input included exactly once</p>
    <p>Full and balanced trees</p>
    <p>Monotonic aggregation with respect to size</p>
    <p>Homogenous levels</p>
    <p>Monotonic and constant ratio size changes</p>
  </div>
  <div class="page">
    <p>Variables</p>
    <p>Number of leaf nodes/inputs</p>
    <p>Fanout of aggregation tree</p>
    <p>Set of inputs (output from computation or prior aggregation)</p>
    <p>( )  Aggregation on</p>
    <p>Time cost of aggregation function</p>
    <p>0/  Ratio of output size to single input size</p>
  </div>
  <div class="page">
    <p>Heuristics</p>
    <p>Optimal Fanout Sublin. ( )</p>
    <p>Linear ( )</p>
    <p>Superlin. ( )</p>
    <p>0 &lt; 1 2</p>
    <p>0 = 1   *</p>
    <p>(1  log 0)  log0 )</p>
    <p>0 &gt;</p>
    <p>- Proven Optima * - Proven Near-Optima</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Independent aggregation subsystem</p>
    <p>Fifth main operation parallelAggregate() in FlumeJava [Chambers et al.;PLDI 10]</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Amazon EC2</p>
    <p>Maintained assumptions (full and balanced)</p>
    <p>Microbenchmarks  Generated data and simulated linear aggregation</p>
    <p>16 leaves</p>
    <p>Real world applications  Word count and top-k match on Yahoo! Hadoop</p>
    <p>cluster logs</p>
    <p>16 and 64 leaves</p>
  </div>
  <div class="page">
    <p>Results (Microbenchmarks  1/2)</p>
  </div>
  <div class="page">
    <p>Results (Microbenchmarks - 2/2)</p>
  </div>
  <div class="page">
    <p>Results (Applications)</p>
  </div>
  <div class="page">
    <p>What we have done</p>
    <p>Codified compute-aggregation definition</p>
    <p>Mathematically modeled aggregation time</p>
    <p>Provided heuristics for lightweight optimization</p>
    <p>Results usable even without our system with known 0</p>
    <p>Implemented subsystem with FlumeJava</p>
    <p>Experimentally validated modeled optima</p>
  </div>
  <div class="page">
    <p>What we are going to do</p>
    <p>Study the currently unproven cases</p>
    <p>Determine a good way to find/specify 0 (preferably automatically)</p>
    <p>Expand the limits of the testing</p>
    <p>Deal with broken assumptions</p>
    <p>Deal with heterogeneity</p>
    <p>Work on streaming inputs</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
