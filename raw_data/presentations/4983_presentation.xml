<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Performance Debugging in Data Centers:</p>
    <p>Doing More with Less</p>
    <p>Prashant Shenoy, UMass Amherst</p>
    <p>Joint work with Emmanuel Cecchet, Maitreya Natu, Vaishali Sadaphal and Harrick Vin</p>
  </div>
  <div class="page">
    <p>Data Centers Today</p>
    <p>Large number of computing, communication, and storage systems</p>
    <p>Wide range of applications and services  Rapidly increasing scale and complexity  Limited understanding and control over the</p>
    <p>operations</p>
  </div>
  <div class="page">
    <p>Equity Trade Plant</p>
    <p>Portion of the data center operated by an investment bank for processing trading orders; Nodes represent application processes; Edges indicate flow of requests;</p>
  </div>
  <div class="page">
    <p>Equity Trade Plant</p>
    <p>Receives and processes  4-6 million equity orders (trade requests)  10-100 million market updates (news, stock-tick</p>
    <p>updates, etc.)  IT infrastructure for processing orders and updates</p>
    <p>consists of thousands of application components running on hundreds of servers</p>
    <p>Portion of the data center operated by an investment bank for processing trading orders; Nodes represent application processes; Edges indicate flow of requests;</p>
  </div>
  <div class="page">
    <p>Performance Debugging in Data Centers</p>
    <p>Low end-to-end latency for processing each request is a critical business requirement</p>
    <p>Increase in latency can be due to  Dynamic changes in workload  Slowing down of a processing node due to hardware</p>
    <p>or software errors  Performance debugging involves detecting and</p>
    <p>localizing performance faults  Longer localization time leads to greater business</p>
    <p>impact</p>
  </div>
  <div class="page">
    <p>Performance Debugging in Data Centers</p>
    <p>Four key steps  Build a model of normal operations of a system  Place probes to monitor the operational system  Detect performance faults in near-real-time  Localize faults by combining the knowledge</p>
    <p>derived from model and monitored data</p>
  </div>
  <div class="page">
    <p>Performance Debugging in Data Centers</p>
    <p>Four key steps  Build a model of normal operations of a system  Place probes to monitor the operational system  Detect performance faults in near-real-time  Localize faults by combining the knowledge</p>
    <p>derived from model and monitored data</p>
    <p>Effectiveness of these steps depends on the number and type of data collection probes available in the system.</p>
    <p>However, system administrators are reluctant to introduce probes into production environment, especially if the probes are intrusive (and can modify the system behavior)</p>
  </div>
  <div class="page">
    <p>Basic Practical Requirement</p>
    <p>Minimize the amount of instrumentation to gather real-time operational statistics</p>
    <p>Minimize the intrusiveness of the data gathering methods</p>
  </div>
  <div class="page">
    <p>Basic Practical Requirement</p>
    <p>Minimize the amount of instrumentation to gather real-time operational statistics</p>
    <p>Minimize the intrusiveness of the data gathering methods</p>
    <p>Much of the prior research ignores this requirement and demands:  Significant instrumentation</p>
    <p>(e.g., requiring probes to be placed at each process/server)  Significant intrusiveness</p>
    <p>(e.g., requiring each request to carry a request-ID to track request flows)</p>
  </div>
  <div class="page">
    <p>Characterizing State-of-the-art</p>
  </div>
  <div class="page">
    <p>Basic Practical Requirement</p>
    <p>System operators are always  Minimize the amount of instrumentation to</p>
    <p>gather real-time operational statistics  Minimize the intrusiveness of the data</p>
    <p>gathering methods</p>
    <p>Much of the prior research ignores this requirement and demands:  Significant instrumentation</p>
    <p>(e.g., requiring probes to be placed at each process/server)  Significant intrusiveness</p>
    <p>(e.g., requiring each request to carry a request-ID to track request flows)</p>
    <p>For automated performance debugging to become practical and effective, one needs to develop techniques that are more effective with less instrumentation and intrusiveness</p>
    <p>We raise several issues and challenges in designing these techniques</p>
  </div>
  <div class="page">
    <p>Instrumentation Vs. Intrusiveness</p>
    <p>Extent of instrumentation and amount of intrusiveness complement each other  E.g., collection of request component dependency</p>
    <p>High instrumentation-Low intrusiveness  Each node monitors request arrival event</p>
    <p>Low instrumentation-High intrusiveness  Each request stores information of the component it passes</p>
    <p>through</p>
  </div>
  <div class="page">
    <p>Instrumentation Vs. Intrusiveness</p>
    <p>Extent of instrumentation and amount of intrusiveness complement each other  Collection of request component dependency  High instrumentation-Low intrusiveness</p>
    <p>Each node monitors request arrival event</p>
    <p>Low instrumentation-High intrusiveness  Each request stores information of the component it</p>
    <p>passes through</p>
    <p>Observation: It is possible to tradeoff the level of instrumentation against the level of intrusiveness</p>
    <p>needed for a technique</p>
  </div>
  <div class="page">
    <p>Instrumentation Vs. Intrusiveness</p>
    <p>Extent of instrumentation and amount of intrusiveness complement each other  Collection of request component dependency  High instrumentation-Low intrusiveness</p>
    <p>Each node monitors request arrival event</p>
    <p>Low instrumentation-High intrusiveness  Each request stores information of the component it</p>
    <p>passes through</p>
    <p>Observation: It is possible to tradeoff the level of instrumentation against the level of intrusiveness</p>
    <p>needed for a technique</p>
    <p>Production systems place significant restrictions on which nodes can be instrumented as well as the level of</p>
    <p>intrusiveness permitted</p>
  </div>
  <div class="page">
    <p>Instrumentation Vs. Intrusiveness</p>
    <p>Extent of instrumentation and amount of intrusiveness complement each other  Collection of request component dependency  High instrumentation-Low intrusiveness</p>
    <p>Each node monitors request arrival event</p>
    <p>Low instrumentation-High intrusiveness  Each request stores information of the component it</p>
    <p>passes through</p>
    <p>Observation 3: It is possible to tradeoff the level of instrumentation against the level of intrusiveness</p>
    <p>needed for a technique</p>
    <p>Production systems place significant restrictions on which nodes can be instrumented as well as the level of</p>
    <p>intrusiveness permitted</p>
    <p>Is it possible to achieve effective performance debugging using low instrumentation and low</p>
    <p>intrusiveness?</p>
  </div>
  <div class="page">
    <p>Doing More With Less: An Example</p>
  </div>
  <div class="page">
    <p>A Production Data Center: Characteristics and Constraints</p>
  </div>
  <div class="page">
    <p>A Production Data Center: Characteristics and Constraints</p>
    <p>469 nodes  Each node represents an</p>
    <p>application component that processes trading orders and forwards them to downstream node</p>
    <p>2,072 links  39,567 unique paths  SLO: end-to-end latency</p>
    <p>for processing each equity trade should not exceed 7-10ms</p>
  </div>
  <div class="page">
    <p>A Production Data Center: Characteristics and Constraints</p>
    <p>469 nodes  Each node represents an</p>
    <p>application component that processes trading orders and forwards them to downstream node</p>
    <p>2,072 links  39,567 unique paths  SLO: end-to-end latency</p>
    <p>for processing each equity trade should not exceed 7-10ms</p>
    <p>Environment imposes severe restrictions on the permitted instrumentation and intrusiveness  No instrumentation of intermediate nodes purely for performance debugging  SLA compliance is monitored at exit nodes by time-stamping request entry and exit</p>
    <p>Available information  Per-hop graph  SLO compliance information at the monitors at exit nodes</p>
    <p>No additional information is available</p>
  </div>
  <div class="page">
    <p>Problem Definition</p>
    <p>Given:  System graph depicting application component</p>
    <p>interactions  Instrumentation at the entry and exit nodes that</p>
    <p>timestamp requests</p>
    <p>Determine:  The root cause of SLO violations when one more</p>
    <p>exit nodes observe such violations</p>
  </div>
  <div class="page">
    <p>Straw-man Approaches</p>
    <p>Signature-based localization  Online signature matching via graph coloring</p>
  </div>
  <div class="page">
    <p>Signature-Based Localization</p>
    <p>Node signature:  Set of all monitors that are</p>
    <p>reachable from the node  K-bit string where each bit</p>
    <p>represents the accessibility of a monitor</p>
    <p>In presence of a failure some monitors will observe SLO violation, thus creating a violation signature</p>
    <p>Fault localization task is to determine the node that could have generated the violation signature</p>
    <p>Query exit points (SLA validation)</p>
  </div>
  <div class="page">
    <p>Signature-Based Localization</p>
    <p>Applying signature-based localization on equity trade plant system</p>
    <p>Monitors on 112 exit nodes generated 112-bit signatures  Generated 137 unique signatures for 357 non-exit nodes (38%)  Generated 71 unique signatures for 121 source nodes (58%)</p>
  </div>
  <div class="page">
    <p>Online signature matching</p>
    <p>Graph coloring technique</p>
    <p>SLA violation</p>
    <p>Mark suspect nodes</p>
    <p>Clear suspect nodes that lead to a valid request execution</p>
    <p>Root cause of SLA violation</p>
  </div>
  <div class="page">
    <p>Opportunities and Challenges</p>
  </div>
  <div class="page">
    <p>Deriving a System Model</p>
    <p>Objective:  Real production systems are too large and complex to</p>
    <p>manually derive a system model  Need for automatic generation and maintenance of model</p>
    <p>Challenges:  Need for reasonably low instrumentation and</p>
    <p>intrusiveness  Several low-cost mechanisms can be considered here</p>
    <p>Network packet sniffing to derive component communication pattern</p>
    <p>Examining application logs  to derive component communication pattern  to derive request flows</p>
  </div>
  <div class="page">
    <p>Monitor Placement</p>
    <p>Objective:  Place monitors at suitable locations to measure end</p>
    <p>to-end performance metrics  Challenges</p>
    <p>Deployment of monitors involves instrumentation overhead  Need to minimize the number of monitors</p>
    <p>Tradeoff between number of monitors and accuracy of fault detection and localization  Smaller number of monitors increases chances of signature</p>
    <p>collisions</p>
  </div>
  <div class="page">
    <p>Monitor Placement</p>
    <p>Structure of graph affects the distribution of signatures across nodes  In the ideal case n unique signatures can be generated</p>
    <p>using log(n) monitors</p>
    <p>N od</p>
    <p>es w</p>
    <p>it h</p>
    <p>sa m</p>
    <p>e si</p>
    <p>gn at</p>
    <p>ur e</p>
    <p>N odes w</p>
    <p>ith sam</p>
    <p>e sig nature</p>
  </div>
  <div class="page">
    <p>Real-Time Failure Detection</p>
    <p>Objective  Quick and accurate detection of the presence of</p>
    <p>failures based on observation at the monitor nodes  Challenges:</p>
    <p>Differentiate between the effect due to workload change and failure</p>
    <p>Deal with scenario where a node failure affects only few of the requests passing through the node</p>
    <p>Transient failures</p>
  </div>
  <div class="page">
    <p>Fault Localization</p>
    <p>Objective:  Identification of the root-cause of the problem after</p>
    <p>detecting failure at one or more monitor nodes (SLO violation signature)</p>
    <p>Challenges:  Presence of multiple failures leads to composite signature  Edges from the failed node to the monitors are traversed</p>
    <p>in a non-uniform manner leading to partial signature  Transient failures  Inherent non-determinism in real systems (e.g. presence of</p>
    <p>load balancers)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Detecting and localizing performance faults in data centers has become a pressing need and a challenge</p>
    <p>Performance debugging can become practical and effective only if it requires low levels of instrumentation and intrusiveness</p>
    <p>We proposed straw man approaches for performance debugging and presented issues and challenges for building practical and effective solutions</p>
  </div>
  <div class="page">
    <p>Instrumentation and Intrusiveness</p>
  </div>
  <div class="page">
    <p>Observation 1: The instrumentation intrusiveness is a direct function of the performance metric of interest</p>
    <p>Instrumentation for Failure Detection</p>
    <p>End-to-end latency: difference of the timestamps of arrival and departure of requests  High instrumentation intrusiveness</p>
    <p>Throughput: number of requests departing the system within a defined interval  Low instrumentation intrusiveness</p>
  </div>
  <div class="page">
    <p>Instrumentation for Fault Localization</p>
    <p>Simple solution: Measure performance metrics and resource utilization at all servers  High instrumentation  High overhead (monitoring and data management)</p>
    <p>Sophisticated solutions: Collect operational semantics of the system (e.g., request component dependencies)  Low instrumentation (not each node needs to be</p>
    <p>instrumented)  High intrusiveness (modifications at system,</p>
    <p>middleware, application level)</p>
  </div>
  <div class="page">
    <p>Instrumentation for Fault Localization</p>
    <p>Collection of different system information require different level of intrusiveness  Per-hop graph indicating component interactions: simple</p>
    <p>network sniffing  Derivation of flow of requests: application aware</p>
    <p>monitoring (e.g. by insertion of transaction-id in the requests)</p>
  </div>
  <div class="page">
    <p>Characterizing State-of-the-art</p>
    <p>Observation 2: Most techniques require high instrumentation or high intrusiveness or both</p>
  </div>
</Presentation>
