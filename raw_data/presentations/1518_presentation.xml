<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Having Your Cake and Eating It Too: Jointly Optimal Erasure Codes for I/O, Storage</p>
    <p>and Network-bandwidth</p>
    <p>K. V. Rashmi, Preetum Nakkiran, Jingyan Wang, Nihar B. Shah, Kannan Ramchandran</p>
    <p>EECS, UC Berkeley</p>
  </div>
  <div class="page">
    <p>Redundancy in distributed storage</p>
    <p>For durability and availability of data</p>
    <p>Simplest approach: replica@on  store mul@ple copies on different machines</p>
    <p>Alterna@ve approach: erasure coding</p>
  </div>
  <div class="page">
    <p>Erasure coding for distributed storage</p>
    <p>Storage space efficient  tradi@onal codes, e.g., Reed-Solomon, op@mal  maximum fault tolerance for storage overhead</p>
    <p>Another important metric: maintenance cost  replacing missing/unavailable data  quite frequent in distributed storage  network and I/O costs</p>
    <p>Tradi@onal codes highly inefficient</p>
  </div>
  <div class="page">
    <p>Birds-eye view</p>
    <p>Tradi@onal codes highly inefficient in replacing missing/unavailable data</p>
    <p>Considerable amount of on-going research in theory and systems communi@es</p>
    <p>A powerful class of erasure coding framework op@mizes only for storage and network- bandwidth costs</p>
    <p>We show how to transform these codes to op5mize I/O cost as well</p>
  </div>
  <div class="page">
    <p>Reconstruc@on costs</p>
    <p>I/O &amp; network cost = 1x I/O &amp; network cost = 4x</p>
    <p>(7, 4) Reed-Solomon code</p>
    <p>- any 4 out of 7 sufficient</p>
  </div>
  <div class="page">
    <p>Reed-Solomon Codes</p>
    <p>(n, k)  k data blocks, (n-k) parity blocks  any k out of n sufficient  op@mal storage and fault tolerance</p>
    <p>Reconstruc@on  any k out of the remaining (n-1) blocks</p>
    <p>n</p>
    <p>k+1</p>
    <p>k</p>
    <p>k+i</p>
    <p>k data blocks</p>
    <p>(n-k) parity blocks</p>
    <p>I/O &amp; network cost = k x (amount reconstructed) = 10x - 20x for typical parameters!</p>
  </div>
  <div class="page">
    <p>Recent research in theory and systems</p>
    <p>Theory: Minimum Storage Regenera@ng codes (Dimakis et al, Shah et al, Rashmi et al, Tamo et al, Wang et al, Papailiopoulos et al, Cadambe et al, etc.); Local codes (Gopalan et al, Papailiopoulos et al, Tamo et al, Kamath et al, etc.); Piggyback (Rashmi et al); Rotated-RS (Khan et al), etc.</p>
    <p>Systems: NCFS &amp; NC-Cloud (Hu et al), Xorbas (Sathiamoor thy et al), Hitchhiker (Rashmi et al), CORE (Li et al), Andre et al, etc.</p>
  </div>
  <div class="page">
    <p>Recent research in theory and systems</p>
    <p>Theory: Minimum Storage Regenera/ng codes (Dimakis et al, Shah et al, Rashmi et al, Tamo et al, Wang et al, Papailiopoulos et al, Cadambe et al, etc.); Local codes (Gopalan et al, Papailiopoulos et al, Tamo et al, Kamath et al, etc.); Piggyback (Rashmi et al); Rotated-RS (Khan et al), etc.</p>
    <p>Systems: NCFS &amp; NC-Cloud (Hu et al), Xorbas (Sathiamoor thy et al), Hitchhiker (Rashmi et al), CORE (Li et al), Andre et al, etc.</p>
  </div>
  <div class="page">
    <p>MSR framework</p>
    <p>Theore@cal framework that allows op@mizing storage and network-bandwidth costs</p>
    <p>Tells what is the minimum amount of transfer required for reconstruc@on</p>
    <p>Dimakis et al, IEEE Transac@ons on Informa@on Theory, 2010</p>
    <p>Minimum Storage Regenera@ng (MSR) framework:</p>
  </div>
  <div class="page">
    <p>MSR framework</p>
    <p>k data blocks</p>
    <p>n-k parity blocks</p>
    <p>Just as in RS,</p>
    <p>any k out of n blocks sufficient to recover all the data</p>
    <p>=&gt; Op5mal storage &amp; fault tolerance</p>
    <p>n</p>
    <p>k+1</p>
    <p>k</p>
    <p>k+i</p>
  </div>
  <div class="page">
    <p>MSR framework decoding node&quot;</p>
    <p>n</p>
    <p>k+1</p>
    <p>k</p>
    <p>k+i</p>
    <p>d helpers - any d of remaining (n-1) - small amount transferred</p>
    <p>from each</p>
    <p>Total amount of data transferred: - significantly smaller than RS - minimum possible</p>
    <p>k data blocks</p>
    <p>n-k parity blocks</p>
  </div>
  <div class="page">
    <p>Example: RS vs. MSR</p>
    <p>he lp</p>
    <p>er s&quot;</p>
    <p>decoding &quot; node&quot;</p>
    <p>Total transfer = 96 MB</p>
    <p>he lp</p>
    <p>er s&quot;</p>
    <p>decoding&quot; node&quot;</p>
    <p>Total transfer = 32 MB</p>
    <p>Reed-Solomon (12, 6) MSR framework with d = 10</p>
  </div>
  <div class="page">
    <p>MSR framework:  op@mizes storage and amount of data transfer  but not I/O consumed at helpers</p>
  </div>
  <div class="page">
    <p>Not reduced  Higher than in RS</p>
    <p>- 6 helpers in RS - 10 helpers in MSR</p>
    <p>I/O in MSR Framework</p>
    <p>he lp</p>
    <p>er s&quot;</p>
    <p>MSR framework with d = 10</p>
    <p>Minimal</p>
    <p>Compute 16 MB 3.2 MB</p>
    <p>I/O consumed</p>
    <p>Network BW consumed</p>
    <p>read transfer</p>
    <p>Helper</p>
    <p>Total transfer = 32 MB</p>
  </div>
  <div class="page">
    <p>Having your cake and ea@ng it too..</p>
    <p>In general, codes under MSR:  op@mal storage and fault tolerance  op@mal network bandwidth but..  do not op5mize I/O</p>
    <p>Op5mize I/O as well while retaining storage and bandwidth op@mality</p>
  </div>
  <div class="page">
    <p>In this talk</p>
    <p>Two algorithms that together transform MSR codes into codes that are I/O efficient as well</p>
    <p>while retaining storage and bandwidth op@mality</p>
    <p>Algorithm 1: transforms to minimizes I/O cost locally at each helper block</p>
    <p>Algorithm 2: builds on top of Algorithm 1 to minimize I/O cost globally across all blocks</p>
  </div>
  <div class="page">
    <p>PM codes exist for parameters:  storage overhead ~2x (or higher)  provides high (op@mal) fault tolerance  useful in applica@ons which need high fault tolerance, e.g., peer-to-peer storage</p>
    <p>Have your cake and eat it too</p>
    <p>Apply to Product-Matrix MSR (PM)  codes: a class of prac5cal MSR codes  transformed code = PM_RBT</p>
    <p>Rashmi et al, IEEE Transac@ons on Informa@on Theory, 2011</p>
  </div>
  <div class="page">
    <p>Implementa@on &amp; Evalua@on</p>
    <p>PM and PM_RBT in C</p>
    <p>Evalua@on on Amazon EC2 instances  Use Jerasure2 and GF-Complete for finite- field arithme@c and RS</p>
    <p>Plank et al, 2013, 2014</p>
  </div>
  <div class="page">
    <p>k = 6, d = 11  PM and RBT both have 3.27x lower transfers</p>
    <p>PM-RBT retains op@mality in network transfers during reconstruc@on as in PM</p>
    <p>Amount of data transfer</p>
  </div>
  <div class="page">
    <p>Number of IOPS consumed</p>
    <p>PM-RBT results in significant savings in IOPS</p>
    <p>k = 6, d = 11  RBT:</p>
    <p>5x lesser IOPS as PM  3x lesser IOPS as RS</p>
  </div>
  <div class="page">
    <p>I/O comple@on @me</p>
    <p>PM-RBT results in significantly faster comple@on of I/O</p>
    <p>k = 6, d = 11  RBT:</p>
    <p>5x - 6x faster I/O</p>
  </div>
  <div class="page">
    <p>Algorithm 1</p>
  </div>
  <div class="page">
    <p>Compute 16 MB 3.2 MB</p>
    <p>I/O consumed</p>
    <p>Network BW consumed</p>
    <p>read transfer</p>
    <p>I/O consumed</p>
    <p>Network BW consumed =</p>
    <p>Reconstruct-by-transfer (RBT)</p>
    <p>problem</p>
    <p>read &amp; transfer</p>
    <p>MSR framework:</p>
    <p>We would like:</p>
    <p>Helper</p>
    <p>Helper</p>
    <p>minimal</p>
  </div>
  <div class="page">
    <p>Algorithm 1</p>
    <p>Transforms MSR codes to achieve RBT  Applicable to all MSR codes that sa@sfy two proper@es</p>
    <p>I/O</p>
    <p>Network BW =</p>
    <p>read &amp; transfer</p>
    <p>Helper</p>
    <p>RBT</p>
  </div>
  <div class="page">
    <p>b</p>
    <p>f1(b)</p>
    <p>b</p>
    <p>f1(b) block 2</p>
    <p>other helpers</p>
    <p>block 2</p>
    <p>Property 1: Independence between helpers</p>
    <p>Func@on computed at a helper is not dependent on which other blocks are helping E.g.: #helpers = 4</p>
  </div>
  <div class="page">
    <p>A block computes pre- determined func5ons to aid in reconstruc@on of each of the other blocks</p>
    <p>f1(b)</p>
    <p>f3(b)</p>
    <p>b</p>
    <p>block 2</p>
    <p>f4(b) f5(b)</p>
    <p>f6(b)</p>
    <p>f7(b)</p>
    <p>When property 1 is sa5sfied..</p>
  </div>
  <div class="page">
    <p>f1(b)</p>
    <p>f3(b)</p>
    <p>b</p>
    <p>block 2</p>
    <p>f4(b) f5(b)</p>
    <p>f6(b)</p>
    <p>f7(b)</p>
    <p>Property 2: Independence between func5ons computed at helper block</p>
    <p>Any subset of size equal to block size are independent  for k =3, d=4 as in</p>
    <p>example, each func5on is half the block size</p>
    <p>any two of these func@ons must be independent</p>
  </div>
  <div class="page">
    <p>Algorithm 1: Precompute and Store</p>
    <p>f1(b)</p>
    <p>f3(b) b</p>
    <p>f4(b) f5(b)</p>
    <p>block 2 block 2</p>
    <p>f1(b) f3(b)</p>
    <p>block 2 can help reconstruct blocks 1 &amp; 3 in RBT-fashion</p>
    <p>Half block size  Any 2 independent</p>
    <p>transform</p>
  </div>
  <div class="page">
    <p>Op@mal I/O at each RBT-helper</p>
    <p>Under MSR, a block does minimum I/O when helping in RBT-fashion amount read = amount transferred</p>
    <p>= minimum possible (due to MSR)</p>
    <p>Minimum I/O when helping blocks 1 &amp; 3</p>
    <p>For other blocks, reads full block and does computa@on</p>
    <p>block 2</p>
    <p>f1(b) f3(b)</p>
  </div>
  <div class="page">
    <p>How to choose RBT-helper assignment?</p>
    <p>Algorithm 1 takes the assignment of who acts as RBT helper to whom as input</p>
    <p>How to choose this assignment?</p>
    <p>block 2</p>
    <p>f1(b) f3(b) f4(b) f5(b)</p>
  </div>
  <div class="page">
    <p>Algorithm 2</p>
    <p>Chooses RBT-helper assignment to minimize I/O cost globally across all blocks</p>
    <p>Greedy algorithm  Op@mal!</p>
  </div>
  <div class="page">
    <p>Algorithm 2: Two extreme cases</p>
    <p>Complete preferen@al treatment for data blocks  Each block RBT-helps data blocks  SYS patern</p>
    <p>Equality for all: no preferen@al treatment  Each block RBT-helps following blocks  CYC patern</p>
  </div>
  <div class="page">
    <p>Impact of the transforma@on on encoding and decoding speeds</p>
  </div>
  <div class="page">
    <p>Decoding speed (computa@on for reconstruc@on)</p>
    <p>n=2k, d = 2k-1  Single thread</p>
    <p>RS_m: m parity blocks and remaining (k-m) data blocks helping</p>
    <p>RBT does not affect the decoding speed of PM  Similar to RS decoding with two pari@es</p>
  </div>
  <div class="page">
    <p>Encoding speed (parity genera@on)</p>
    <p>Single thread  n=2k, d = 2k-1</p>
    <p>Slower than RS but s@ll prac@cal  RBT-SYS has higher encoding speed than PM</p>
  </div>
  <div class="page">
    <p>No original data blocks leu?</p>
    <p>Use symbol-remapping to retain original data blocks</p>
    <p>k original data blocks</p>
    <p>Symbol remapping</p>
    <p>k remapped data blocks</p>
    <p>MSR encoding +</p>
    <p>Transforma@on</p>
    <p>k original data blocks + parity blocks</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Algorithms to transform MSR codes  op@mize I/O retaining storage and network op@mality</p>
    <p>Implemented and evaluated applica@on onto Product-Matrix MSR codes  significant reduc@on in I/O costs</p>
    <p>Analy@cal results on op@mality</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
