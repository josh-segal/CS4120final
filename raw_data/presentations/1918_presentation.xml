<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RECap: RunEscape Capsule for On-demand Managed Service Delivery</p>
    <p>in the Cloud</p>
    <p>Shripad J Nadgowda, Sahil Suneja, Canturk Isci IBM T J Watson Research Center</p>
  </div>
  <div class="page">
    <p>Evolution of application runtimes (General-purpose &gt; Specialized)</p>
    <p>!2</p>
    <p>General Purpose OS (e.g. Ubuntu)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Physical Machines/ VMs</p>
    <p>General Purpose OS (e.g. Ubuntu)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Containers</p>
    <p>But, you promised that containers will be lightweight alternatives to VMs?</p>
    <p>Lightweight OS (e.g. Alpine)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Lightweight runtimes</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Microcontainers</p>
    <p>But, according to standard DevOps practice, container should be immutable ?</p>
    <p>Can you reduce TCB for secure containers?</p>
  </div>
  <div class="page">
    <p>Evolution of application runtimes (General-purpose &gt; Specialized)</p>
    <p>!3</p>
    <p>General Purpose OS (e.g. Ubuntu)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Physical Machines/ VMs</p>
    <p>General Purpose OS (e.g. Ubuntu)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Containers</p>
    <p>Lightweight OS (e.g. Alpine)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Lightweight runtimes</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Microcontainers</p>
    <p>general-purpose-O S</p>
    <p>lightw eight-O</p>
    <p>S</p>
    <p>scratch</p>
    <p>statically-com piled</p>
    <p># o</p>
    <p>f im</p>
    <p>a g</p>
    <p>e s</p>
    <p>Application runtimes</p>
  </div>
  <div class="page">
    <p>Evolution of application runtimes (General-purpose &gt; Specialized)</p>
    <p>!4</p>
    <p>General Purpose OS (e.g. Ubuntu)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Physical Machines/ VMs</p>
    <p>General Purpose OS (e.g. Ubuntu)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Containers</p>
    <p>Lightweight OS (e.g. Alpine)</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Lightweight runtimes</p>
    <p>Apps</p>
    <p>Deps</p>
    <p>Microcontainers</p>
    <p>You really did everything you promised. But now, how do I manage my containers?</p>
  </div>
  <div class="page">
    <p>!5</p>
    <p>Rule 1</p>
    <p>Functionality Dis-aggregation: Break your traditional monolithic applications into two parts, namely core application functions and other auxiliary functions</p>
    <p>Rule 2</p>
    <p>Use Micro-containers: Package and run your core application functions through micro-containers for safer execution</p>
    <p>Rule 3</p>
    <p>On-demand Auxiliary functions: Enable delivery common auxiliary functions as on-demand managed services on cloud</p>
  </div>
  <div class="page">
    <p>What are these auxiliary functions?</p>
    <p>!6</p>
    <p>System and Application Administration Debugging Monitoring</p>
    <p>Ad-hoc debugging: gdb, strace, tcpdump, iperf</p>
    <p>System metrics: CPU, Memory</p>
    <p>Application Metrics: # of connections, # of requests</p>
    <p>Typical cronjobs: malware scans, logrations, ntpupdate</p>
    <p>Application Utilities: MD5 checksum, archival with tar</p>
    <p>How to deliver these functions on-demand and securely to running containers ?</p>
  </div>
  <div class="page">
    <p>Inspiration</p>
    <p>!7</p>
    <p>Serverless or</p>
    <p>Function-as-a-Service</p>
  </div>
  <div class="page">
    <p>Introducing RunEscape Capsule (RECap) (also stands for Capability Redemption)</p>
    <p>!8</p>
    <p>Capsule RunEscape</p>
    <p>This itself is a microcontainer</p>
    <p>Encapsulates auxiliary function and all its dependencies together</p>
    <p>Existing tools and techniques (e.g. Dockerfiles) can be leveraged to create an image</p>
    <p>Capsule are dynamically-attached to app containers as a sidecar container</p>
    <p>Capsule is attached ONLY for the duration of running the function</p>
    <p>Capsule is then detached or Escape the app container</p>
  </div>
  <div class="page">
    <p>RECap: System Design</p>
    <p>!9</p>
    <p>Kubernetes Control Plane (Cloud Platform)</p>
    <p>type: kafka</p>
    <p>App</p>
    <p>SvcFunc</p>
    <p>SvcFunc</p>
    <p>type: redis</p>
    <p>App</p>
    <p>type: kafka</p>
    <p>App SvcFunc</p>
    <p>type: nginx</p>
    <p>App</p>
    <p>capletkubelet kubelet caplet</p>
    <p>apiVersion: extensions/v1beta1 kind: Capsule metadata:</p>
    <p>labels: type: kafka</p>
    <p>spec: exePolicy: parallel</p>
    <p>Capsule Image</p>
    <p>Capsule Deployment Manifest</p>
    <p>Capsule Container</p>
    <p>Application Container</p>
    <p>Kubernets controller</p>
    <p>Control Path</p>
    <p>Although agnostic to the underlying cloud substrate, we are currently designing RECap for Kubernetes</p>
  </div>
  <div class="page">
    <p>RECap: System Design</p>
    <p>!10</p>
    <p>Kubernetes Control Plane (Cloud Platform)</p>
    <p>type: kafka</p>
    <p>App</p>
    <p>SvcFunc</p>
    <p>SvcFunc</p>
    <p>type: redis</p>
    <p>App</p>
    <p>type: kafka</p>
    <p>App SvcFunc</p>
    <p>type: nginx</p>
    <p>App</p>
    <p>capletkubelet kubelet caplet</p>
    <p>apiVersion: extensions/v1beta1 kind: Capsule metadata:</p>
    <p>labels: type: kafka</p>
    <p>spec: exePolicy: parallel</p>
    <p>Capsule Image</p>
    <p>Capsule Deployment Manifest</p>
    <p>Capsule Container</p>
    <p>Application Container</p>
    <p>Kubernets controller</p>
    <p>Control Path</p>
    <p>Affinity between capsule and app container is established through K8s labels</p>
  </div>
  <div class="page">
    <p>RECap: System Design</p>
    <p>!11</p>
    <p>Kubernetes Control Plane (Cloud Platform)</p>
    <p>type: kafka</p>
    <p>App</p>
    <p>SvcFunc</p>
    <p>SvcFunc</p>
    <p>type: redis</p>
    <p>App</p>
    <p>type: kafka</p>
    <p>App SvcFunc</p>
    <p>type: nginx</p>
    <p>App</p>
    <p>capletkubelet kubelet caplet</p>
    <p>apiVersion: extensions/v1beta1 kind: Capsule metadata:</p>
    <p>labels: type: kafka</p>
    <p>spec: exePolicy: parallel</p>
    <p>Capsule Image</p>
    <p>Capsule Deployment Manifest</p>
    <p>Capsule Container</p>
    <p>Application Container</p>
    <p>Kubernets controller</p>
    <p>Control Path</p>
    <p>A special node agent caplet manages lifecycle of capsule containers</p>
  </div>
  <div class="page">
    <p>RECap: Evaluation</p>
    <p>!12</p>
    <p>Image Build App Deploy Docker Exec Capsule RunEscape</p>
    <p>Function exists in app</p>
    <p>container 0 0 0.083s 0</p>
    <p>Function does not exist in app</p>
    <p>container 5.24s 0.29s 0.083s 0</p>
    <p>Capsule Image is present on</p>
    <p>the node 0 0 0 0.243s</p>
    <p>Capsule Image is not present on the node</p>
  </div>
  <div class="page">
    <p>Recap on RECap</p>
    <p>!13</p>
    <p>Breaking monolithic applications into Microservices and delivering them in Microcontainers</p>
    <p>Ability to implement common system administration, debugging, monitoring functions on-demand</p>
    <p>RunEscape Capsule is a framework that promotes a cloud-native solution for on-demand managed service delivery</p>
    <p>Trend</p>
    <p>Challenge</p>
    <p>Solution</p>
  </div>
  <div class="page">
    <p>RECap: Discussion</p>
    <p>!14</p>
    <p>What is the criteria for deciding which functions can be de-coupled from application and delivered through RECap ?</p>
    <p>Is it safe to dynamically execute on-demand functions in the application context ?</p>
    <p>Whom does RECap is really going to help ? Developer, Administrator, Cloud provider, Everyone ?</p>
  </div>
  <div class="page">
    <p>Thank You nadgowda@us.ibm.com</p>
  </div>
</Presentation>
