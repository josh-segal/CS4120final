<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CS @ ILLINOIS</p>
    <p>A Model-Based Namespace Metadata Benchmark for HDFS</p>
    <p>Cristina L. Abad, Yi Lu, Roy H. Campbell, Nathan Roberts</p>
    <p>Escuela Superior Politcnica del Litoral</p>
    <p>University of Illinois at Urbana-Champaign</p>
    <p>Yahoo, Inc.</p>
  </div>
  <div class="page">
    <p>Big Data storage</p>
    <p>Facebook</p>
    <p>Yahoo</p>
    <p>Ebay</p>
    <p>ANL</p>
    <p>TACC</p>
    <p>ORNL</p>
  </div>
  <div class="page">
    <p>Metadata management</p>
    <p>Storage nodes</p>
    <p>MDS MDS MDS</p>
    <p>Clients</p>
  </div>
  <div class="page">
    <p>Metadata management</p>
    <p>Storage nodes</p>
    <p>MDS MDS MDS</p>
    <p>Clients</p>
    <p>open aFile</p>
  </div>
  <div class="page">
    <p>Metadata management</p>
    <p>Storage nodes</p>
    <p>MDS MDS MDS</p>
    <p>Clients</p>
    <p>OK, download from 1,3</p>
  </div>
  <div class="page">
    <p>Metadata management</p>
    <p>Storage nodes</p>
    <p>MDS MDS MDS</p>
    <p>Clients</p>
    <p>get aFile</p>
  </div>
  <div class="page">
    <p>Metadata management</p>
    <p>Storage nodes</p>
    <p>MDS MDS MDS</p>
    <p>Clients</p>
    <p>send aFile</p>
  </div>
  <div class="page">
    <p>Benchmarking Medatada Servers</p>
    <p>Desirable properties:  Metadata-intensive workloads</p>
    <p>No IO load (isolate MDS evaluation)</p>
    <p>Realistic workloads</p>
    <p>Type-aware workload generation</p>
    <p>Hierarchical namespaces</p>
  </div>
  <div class="page">
    <p>MimesisBench</p>
    <p>Realistic namespaces  Namespace Generation Module [IEEE/ACM UCC 2012]</p>
    <p>Preserve access patterns  Short-term temporal correlations  Temporal correlations due to long-term file popularity  Built-upon our model for object request streams [IFIP</p>
    <p>Performance 2013]</p>
    <p>Support for most common metadata operations  Create, delete, list, open</p>
    <p>Pre-existing namespace</p>
    <p>Realistic accesses on a hierarchical namespace</p>
  </div>
  <div class="page">
    <p>MimesisBench: Access model</p>
    <p>Original renewal process model:</p>
    <p>Extended to include creates, deletes and listStatus:</p>
  </div>
  <div class="page">
    <p>MimesisBench: Access model</p>
    <p>Original renewal process model:</p>
    <p>Extended to include creates, deletes and listStatus:</p>
    <p>Write</p>
    <p>Read</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>Phase (1):</p>
    <p>Create pre-existing</p>
    <p>namespace</p>
    <p>Phase (2):</p>
    <p>Issue model-based</p>
    <p>workload</p>
    <p>Multi-threaded producer-consumer approach</p>
  </div>
  <div class="page">
    <p>Scaling workloads</p>
    <p>Multi-dimensional workload scaling across dimensions:  Number of files</p>
    <p>Number of files of a particular type  By modifying the weights of the file types</p>
    <p>Time (interarrivals)  Can be accelerated or decelerated</p>
    <p>Active span (of the files)  Increases/decreases the access counts of the files</p>
  </div>
  <div class="page">
    <p>Using MimesisBench to evaluate HDFS performance</p>
    <p>Latency of opens, creates and deletes</p>
    <p>Throughput</p>
    <p>Flat vs. hierarchical namespaces</p>
    <p>Isolating workloads</p>
    <p>Evaluating an improvement (NN locking)</p>
    <p>k = 30</p>
    <p>Popularity CDF difference &lt; 4%</p>
  </div>
  <div class="page">
    <p>Operation latency</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y (</p>
    <p>m s e</p>
    <p>c s )</p>
    <p>Throughput (ops/sec)</p>
    <p>Create Open</p>
    <p>Delete</p>
  </div>
  <div class="page">
    <p>Flat vs. hierarchical namespaces</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y (</p>
    <p>m s e</p>
    <p>c s )</p>
    <p>Throughput (ops/sec)</p>
    <p>Hierarchical Flat</p>
  </div>
  <div class="page">
    <p>Evaluating an improvement: HDFS-5239  Allow FSNamesystem lock fairness to be</p>
    <p>configurable</p>
    <p>Throughput improvement:</p>
    <p>Fair lock Unfair lock Improvement</p>
    <p>Hierarchical 19 696 ops/sec 21 899 ops/sec 11%</p>
    <p>Flat 10 255 ops/sec 11 299 ops/sec 10%</p>
    <p>Read-mostly 53 324 ops/sec 103 331 ops/sec 94%</p>
    <p>Write-heavy 8 694 ops/sec 8 701 ops/sec 1%</p>
  </div>
  <div class="page">
    <p>MimesisBench summary</p>
    <p>Model-based approach for realistic workload generation</p>
    <p>Can be used with any storage system that is able to interface with Hadoop (HDFS, Lustre, etc.)</p>
    <p>Multi-dimensional workload scaling</p>
    <p>Autonomic type-aware model allows sensitivity and what-if analysis</p>
    <p>Stable results (very small coefficient of variation)</p>
  </div>
</Presentation>
