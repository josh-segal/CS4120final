<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exploring System Challenges of Ultra-Low Latency Solid State Drives</p>
    <p>Sungjoon Koh</p>
    <p>Changrim Lee, Miryeong Kwon, and Myoungsoo Jung</p>
    <p>Computer Architecture and Memory systems Lab</p>
  </div>
  <div class="page">
    <p>Executive Summary</p>
    <p>Motivation. Ultra-low latency (ULL) is emerging, but not characterized by far.</p>
    <p>Contributions.</p>
    <p>- Characterizing the performance behaviors of ULL SSD.</p>
    <p>- Studying several system-level challenges of the current storage stack.</p>
    <p>Key Observations.</p>
    <p>- ULL SSD minimizes the I/O interferences (interleaving reads and writes).</p>
    <p>- NVMe queue mechanisms are required to be optimized for ULL SSDs.</p>
    <p>- Polling-based I/O completion routine isnt effective for current NVMe SSDs.</p>
  </div>
  <div class="page">
    <p>Architectural Change of SSD</p>
    <p>MCH</p>
    <p>(North Bridge)</p>
    <p>PCI Express</p>
    <p>DRAM</p>
    <p>CPU</p>
    <p>PCI Express</p>
    <p>DRAM</p>
    <p>ICH</p>
    <p>(South Bridge)</p>
    <p>SATA</p>
    <p>Direct Access</p>
    <p>High</p>
    <p>bandwidth</p>
    <p>SATA SSD</p>
    <p>NVMe SSD</p>
  </div>
  <div class="page">
    <p>Evolution of SSDs</p>
    <p>NVMe SSD</p>
    <p>Read: 2.4GB/s</p>
    <p>Write: 1.2 GB/s</p>
    <p>SATA SSD</p>
    <p>Read: 0.5 GB/s</p>
    <p>Write: 0.5 GB/s</p>
    <p>Changes</p>
    <p>Bandwidth almost reaches the</p>
    <p>maximum performance.</p>
    <p>Still, long latency (far from DRAM)</p>
    <p>New flash memory, called Z-NAND</p>
  </div>
  <div class="page">
    <p>New Flash Memory</p>
    <p>Existing 3D NAND</p>
    <p>Read: 45-120 s</p>
    <p>Write: 660-5000 s</p>
    <p>Z-NAND [1]</p>
    <p>Read: 3s (15~20x)</p>
    <p>Write: 100s (6~7x)</p>
    <p>Z-NAND [1]</p>
    <p>Technology SLC based 3D NAND</p>
    <p>Capacity 64Gb</p>
    <p>Page Size 2kB/Page</p>
    <p>Z-NAND based archives Z-SSD</p>
  </div>
  <div class="page">
    <p>Characterization Categories</p>
    <p>Performance Analysis.</p>
    <p>- Average latency.</p>
    <p>- Long-tail latency.</p>
    <p>- Bandwidth.</p>
    <p>- I/O interference impact.</p>
    <p>Polling vs. Interrupt</p>
    <p>- Overall latency comparison.</p>
    <p>- CPU utilization analysis.</p>
    <p>- Memory requirement.</p>
    <p>- Five-nines latency.</p>
  </div>
  <div class="page">
    <p>Evaluation Settings</p>
    <p>Benchmark: Flexible I/O Tester (FIO v2.99)</p>
    <p>OS: Linux 4.14.10</p>
    <p>CPU: Intel Core i7-4790K (4-core, 4.00GHz)</p>
    <p>Memory: DDR4 DRAM (16GB)</p>
    <p>SSD</p>
    <p>- ULL SSD: Z-SSD Prototype (800GB)</p>
    <p>- NVMe SSD: Intel SSD 750 Series (400GB) &lt;Our testbed w/ Z-SSDs&gt;</p>
    <p>Z-SSD Prototype</p>
  </div>
  <div class="page">
    <p>Performance Analysis</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Host</p>
    <p>SSD</p>
    <p>Request Queue</p>
    <p>NVMe Controller</p>
    <p>NVMe Driver</p>
    <p>Increase queue depth</p>
    <p>Rd Wr Rd Wr Rd Wr Rd Wr</p>
    <p>Average latency &amp; Long-tail latency</p>
    <p>Bandwidth</p>
    <p>Read latency under Read &amp; Write intermixed workload</p>
    <p>Wr</p>
  </div>
  <div class="page">
    <p>Average Latency of ULL SSD</p>
    <p>Split-DMA &amp; Super-Channel</p>
    <p>t t</p>
    <p>NVMe</p>
    <p>A v e</p>
    <p>ra g</p>
    <p>e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e</p>
    <p>c )</p>
    <p>I/O Depth</p>
    <p>ULL</p>
    <p>NVMe</p>
    <p>A v e</p>
    <p>ra g</p>
    <p>e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e</p>
    <p>c )</p>
    <p>I/O Depth</p>
    <p>ULL</p>
    <p>Sequential WriteSequential Read</p>
    <p>SeqRd RndRd</p>
    <p>SeqWr RndWr</p>
    <p>A v e ra</p>
    <p>g e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e c )</p>
    <p>I/O Depth</p>
  </div>
  <div class="page">
    <p>Channel 1</p>
    <p>Channel 0</p>
    <p>Channel 1</p>
    <p>Split-DMA &amp; Super-Channel</p>
    <p>Request</p>
    <p>Z-SSD</p>
    <p>Split DMA</p>
    <p>Engine</p>
    <p>Split</p>
    <p>Channel 0</p>
    <p>Channel 2</p>
    <p>Channel 4</p>
    <p>Channel 3</p>
    <p>Channel 5</p>
    <p>Super</p>
    <p>Channel</p>
    <p>= 4</p>
    <p>Reference: Cheong, Woosung et al., A flash memory controller for 15s ultra-low</p>
    <p>latency SSD using high-speed 3D NAND flash with 3s read time, ISSCC, 2018</p>
  </div>
  <div class="page">
    <p>Long-tail Latency of ULL SSD</p>
    <p>Split DMA &amp;</p>
    <p>Suspend/Resume</p>
    <p>Resource conflict</p>
    <p>Insufficient internal buffer,</p>
    <p>Internal tasks</p>
    <p>ULL</p>
    <p>SeqRd RndRd</p>
    <p>SeqWr RndWr</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y (</p>
    <p>m s e</p>
    <p>c )</p>
    <p>I/O Depth</p>
    <p>NVMe</p>
    <p>SeqRd RndRd</p>
    <p>SeqWr RndWr</p>
  </div>
  <div class="page">
    <p>Suspend/Resume DMA Technique</p>
    <p>DMA (for write request)Way 1</p>
    <p>Way 2 CMD Data Out Reduce read latency &amp;</p>
    <p>Increase QoS</p>
    <p>Way 1</p>
    <p>Way 2 CMD Data Out</p>
    <p>DMA (for write request)</p>
    <p>Suspend Resume</p>
    <p>Wait</p>
    <p>Suspend/Resume [1]</p>
    <p>Read</p>
    <p>Reference: Cheong, Woosung et al., A flash memory controller for 15s ultra-low</p>
    <p>latency SSD using high-speed 3D NAND flash with 3s read time, ISSCC, 2018</p>
  </div>
  <div class="page">
    <p>Flush operation / meta data writes</p>
    <p>in file system are</p>
    <p>intermixed with user requests</p>
    <p>I/O Interference</p>
    <p>R e</p>
    <p>a d</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Write fraction (%)</p>
    <p>Average</p>
    <p>NVMe SSD</p>
    <p>ULL SSD</p>
    <p>R e</p>
    <p>a d</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Write fraction (%)</p>
    <p>Average</p>
    <p>NVMe SSD Significant performance</p>
    <p>degradation in intermixed</p>
    <p>workloads.How about ULL SSD?</p>
    <p>Remains almost constant</p>
    <p>Suspend/resume,  [1]</p>
    <p>ULL SSD can be applied to real-life</p>
    <p>storage stack w/o performance</p>
    <p>degradation.</p>
    <p>Great performance bottleneck of conventional SSDs.</p>
  </div>
  <div class="page">
    <p>Queue Analysis</p>
    <p>SeqRd RndRd</p>
    <p>SeqWr RndWr</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z e</p>
    <p>d B</p>
    <p>a n</p>
    <p>d w</p>
    <p>id th</p>
    <p>I/O Depth 4 8 12 16 20</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z e</p>
    <p>d B</p>
    <p>a n</p>
    <p>d w</p>
    <p>id th</p>
    <p>I/O Depth</p>
    <p>SeqRd RndRd</p>
    <p>SeqWr RndWr</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z e</p>
    <p>d B</p>
    <p>a n</p>
    <p>d w</p>
    <p>id th</p>
    <p>I/O Depth</p>
    <p>Only 6 entries required</p>
    <p>NVMe SSD ULL SSD</p>
    <p>Short write latency</p>
    <p>Only 50% of Max BW Almost Max BW</p>
    <p>Requires more than 100 entries.</p>
    <p>Light queue mechanisms (ex. NCQ)</p>
    <p>are not sufficient.</p>
    <p>Requires rich queue mechanism</p>
    <p>Well-aligned with light queue</p>
    <p>mechanisms (ex. NCQ).</p>
    <p>NVMe needs to be lightened</p>
    <p>Too long write latencyI/O request rescheduling within queue.</p>
  </div>
  <div class="page">
    <p>Polling vs. Interrupt</p>
    <p>Two different I/O completion methods</p>
  </div>
  <div class="page">
    <p>Interrupt / Polling</p>
    <p>Systems with short waiting time adopts polling-based</p>
    <p>waiting strategy.(even though it incurs lots of overheads)</p>
    <p>Does it really need for current NVMe SSDs?</p>
    <p>For example, spin lock, network message passing</p>
    <p>applies polling-based waiting strategy.</p>
    <p>Polling is currently implemented to NVMe storage stack.</p>
  </div>
  <div class="page">
    <p>Interrupt / Polling</p>
    <p>Submit request SleepCS Complete requestCS</p>
    <p>Command Execution</p>
    <p>ISRCS</p>
    <p>Submit request Polling Complete request</p>
    <p>Command Execution</p>
    <p>Interrupt.</p>
    <p>Polling.</p>
    <p>CS CS</p>
    <p>Gain</p>
    <p>NVMe Controller  Raise IRQ</p>
    <p>Wake</p>
    <p>SSD</p>
    <p>SSD</p>
    <p>Done??</p>
    <p>Finishes</p>
    <p>Shorter</p>
    <p>Low latency</p>
    <p>Larger portion</p>
  </div>
  <div class="page">
    <p>Overall Performance</p>
    <p>KB 32</p>
    <p>KB 14 16 18 20 22 24 26 28 30</p>
    <p>A v e ra</p>
    <p>g e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e c )</p>
    <p>Interrupt</p>
    <p>Polling</p>
    <p>KB 32</p>
    <p>KB</p>
    <p>A v e ra</p>
    <p>g e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e c )</p>
    <p>Interrupt</p>
    <p>Polling</p>
    <p>KB 32</p>
    <p>KB</p>
    <p>Polling</p>
    <p>A v e ra</p>
    <p>g e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e c )</p>
    <p>Interrupt</p>
    <p>KB 32</p>
    <p>KB</p>
    <p>A v e ra</p>
    <p>g e L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>s e c )</p>
    <p>Interrupt</p>
    <p>Polling</p>
    <p>NVMe SSD ULL SSD</p>
    <p>Decreases only</p>
    <p>Read: 0.9% &amp; Write: 8.2%</p>
    <p>Decreases by</p>
    <p>Read: 7.5% &amp; Write: 13.2%</p>
    <p>Read Write Read Write</p>
    <p>Polling-based I/O</p>
    <p>services are not</p>
    <p>effective for current</p>
    <p>NVMe SSDs.</p>
    <p>Does polling-based</p>
    <p>I/O works on ULL</p>
    <p>SSD?</p>
    <p>Future lower latency SSD can achieve</p>
    <p>remarkable performance improvement with</p>
    <p>polling-based I/O completion routine.</p>
  </div>
  <div class="page">
    <p>B 16</p>
    <p>K B 32</p>
    <p>K B</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry B</p>
    <p>o u</p>
    <p>n d</p>
    <p>( %</p>
    <p>)</p>
    <p>Interrupt</p>
    <p>System Challenges</p>
    <p>B 16</p>
    <p>K B 32</p>
    <p>K B</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry B</p>
    <p>o u</p>
    <p>n d</p>
    <p>( %</p>
    <p>) Polling</p>
    <p>Interrupt CPU Core 1</p>
    <p>CPU</p>
    <p>Core n</p>
    <p>NVMe Controller</p>
    <p>SQ Tail Doorbell</p>
    <p>CQ Head Doorbell</p>
    <p>Host</p>
    <p>Check CQ update NVMe Controller Memory Space</p>
    <p>Spin lock for</p>
    <p>head/tail pointer</p>
    <p>Synchronization</p>
    <p>&lt;Memory Bound&gt;</p>
    <p>Core 0</p>
    <p>CQSQ</p>
    <p>Time</p>
    <p>C P</p>
    <p>U U</p>
    <p>ti li z a ti o n (</p>
    <p>% )</p>
    <p>Interrupt</p>
    <p>Time</p>
    <p>C P</p>
    <p>U U</p>
    <p>ti li z a ti o n (</p>
    <p>% )</p>
    <p>Polling Core always</p>
    <p>Working</p>
    <p>L a te</p>
    <p>n c y (</p>
    <p>m s e c )</p>
    <p>ULL Write</p>
    <p>Interrupt</p>
    <p>Polling</p>
    <p>&lt;CPU Uitlization&gt;</p>
    <p>Polling does not</p>
    <p>release CPU</p>
    <p>CQ</p>
    <p>Head</p>
    <p>Tail SQ Head</p>
    <p>Tail</p>
    <p>Polling-based I/O services incur</p>
    <p>significant system-level overheads</p>
    <p>Needs to be addressed</p>
    <p>High CPU utilization Frequent memory access</p>
    <p>Memory bound</p>
    <p>= Fraction of slots where</p>
    <p>pipeline could be stalled</p>
    <p>due to load/store.</p>
    <p>High memory bound</p>
    <p>= Frequent memory access</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Motivation. Ultra-low latency (ULL) is emerging, but not characterized by far.</p>
    <p>Contributions.</p>
    <p>- Characterizing the performance behaviors of ULL SSD.</p>
    <p>- Studying several system-level challenges of the current storage stack.</p>
    <p>Key Insights.</p>
    <p>- ULL SSDs can be effectively applied to real-life storage stack. (RW mixed)</p>
    <p>- NVMe queue mechanisms are required to be optimized for ULL SSDs.</p>
    <p>- Polling-based I/O completion routine isnt effective for current NVMe SSDs.</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Q&amp;A</p>
  </div>
</Presentation>
