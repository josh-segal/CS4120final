<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity JetMax: Scalable Max-Min Congestion Control for HighSpeed Heterogeneous Networks</p>
    <p>JetMax: Scalable MaxJetMax: Scalable Max--Min Min Congestion Control for HighCongestion Control for High-Speed Heterogeneous Networks Speed Heterogeneous Networks</p>
    <p>Yueping ZhangYueping Zhang Joint work with Derek Leonard and Dmitri Joint work with Derek Leonard and Dmitri LoguinovLoguinov Internet Research LabInternet Research Lab Department of Computer ScienceDepartment of Computer Science Texas A&amp;M University, College Station, TX 77843Texas A&amp;M University, College Station, TX 77843</p>
    <p>April 26, 2006April 26, 2006</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>AgendaAgendaAgenda</p>
    <p>Introduction  Explicit congestion control and its designed properties</p>
    <p>Analysis of existing max-min methods  XCP, MKC, and MKC-AVQ</p>
    <p>JetMax  Stability and fairness  Performance and simulations</p>
    <p>Wrap-up</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Explicit Congestion ControlExplicit Congestion ControlExplicit Congestion Control</p>
    <p>In explicit congestion control, each user i forms a control loop around its sending rate xi(n) and feedback pi(n)</p>
    <p>Two directions emerged  pi = l: additive feedback (e.g., proportional fairness)  pi = max(l): max-min feedback (e.g., max-min fairness)</p>
    <p>What properties should a congestion control protocol ideally possess?</p>
    <p>pi</p>
    <p>f</p>
    <p>xi(n) xi(n+1)</p>
    <p>1 2 3</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Ideal Congestion ControlIdeal Congestion ControlIdeal Congestion Control</p>
    <p>Ideal congestion control</p>
    <p>Behavior Properties</p>
    <p>Efficient Fair</p>
    <p>Zero steadystate loss</p>
    <p>Zero transient loss</p>
    <p>Control theoretic stability</p>
    <p>Exponential convergence</p>
    <p>Can existing methods achieve these goals?</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>AgendaAgendaAgenda</p>
    <p>Introduction  Explicit congestion control and its designed properties</p>
    <p>Analysis of existing max-min methods  XCP, MKC, and MKC-AVQ</p>
    <p>JetMax  Stability and fairness  Performance and simulations</p>
    <p>Wrap-up</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Existing Max-min Congestion ControlsExisting MaxExisting Max--min Congestion Controlsmin Congestion Controls</p>
    <p>We study three explicit congestion control methods</p>
    <p>XCP (eXplicit Control Protocol)  Each router implements a fairness and efficiency controller</p>
    <p>MKC (Max-min Kelly Control)  Modification of Kellys equations for max-min feedback</p>
    <p>MKC-AVQ  Combination of MKC and Adaptive Virtual Queue (AVQ)  Eliminates steady-state loss of MKC</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Stability of Existing Max-min MethodsStability of Existing MaxStability of Existing Max--min Methodsmin Methods</p>
    <p>All three should be stable in single-link networks  We next compare their behavior under heterogeneous delay</p>
    <p>R1</p>
    <p>R2</p>
    <p>R3 R4</p>
    <p>x1 RTT = 200 ms</p>
    <p>x2 RTT = 2 sec</p>
    <p>Topology T1</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Stability of Existing Max-min Methods 2Stability of Existing MaxStability of Existing Max--min Methods 2min Methods 2</p>
    <p>MKC-based methods have no stability problems, but are very slow</p>
    <p>Fair rate 5.4 mb/s Fair rate 5.0 mb/s</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Stability of Existing Max-min Methods 3Stability of Existing MaxStability of Existing Max--min Methods 3min Methods 3</p>
    <p>Multi-link behavior  XCP example shows that bottleneck oscillations are possible</p>
    <p>R1 R2</p>
    <p>R3 R4</p>
    <p>topology T2</p>
    <p>x1 x2</p>
    <p>x4 x3</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Stability of Existing Max-min Methods 4Stability of Existing MaxStability of Existing Max--min Methods 4min Methods 4</p>
    <p>MKC and MKC-AVQ remain stable  AVQ overshoots available bandwidth in transient states,</p>
    <p>but is stable otherwise</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Properties of Existing Max-min MethodsProperties of Existing MaxProperties of Existing Max--min Methodsmin Methods</p>
    <p>XCP  Unstable in certain multi-link topologies  Convergence rate to fairness is unknown, but can be as</p>
    <p>large as 100s of RTTs if feedback delay is heterogeneous</p>
    <p>MKC  Steady-state packet loss proportional to N  Fairness is reached in (C) steps</p>
    <p>MKC-AVQ  Transient overshoot proportional to N  Convergence rate the same as in MKC</p>
    <p>The bottom line  current explicit-feedback methods do not satisfy our design criteria and offer little benefit over TCP</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>AgendaAgendaAgenda</p>
    <p>Introduction  Explicit congestion control and its designed properties</p>
    <p>Analysis of existing max-min methods  XCP, MKC, and MKC-AVQ</p>
    <p>JetMax  Stability and fairness  Performance and simulations</p>
    <p>Wrap-up</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax DesignJetMax DesignJetMax Design</p>
    <p>Assume that Nl(n) is the number of users congested by router l at time n (we call these flows responsive) and wl(n) is their combined rate  Label the remaining flows passing through l unresponsive</p>
    <p>and assume ul(n) is their total rate</p>
    <p>The main idea of JetMax is very simple  Divide the available bandwidth of l equally among Nl flows</p>
    <p>desired link utilization</p>
    <p>combined rate of unresponsive flowscurrent fair share</p>
    <p>at router l</p>
    <p>capacity of link l</p>
    <p>number of responsive flows</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax Design 2JetMax Design 2JetMax Design 2</p>
    <p>Users receive feedback gl(n) and utilize it in their controller</p>
    <p>The final issue is bottleneck switching  Routers decide to make a switch based on the virtual</p>
    <p>packet loss contained in the header:</p>
    <p>delay from the bottleneck to user iconstant</p>
    <p>RTT of user i</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax PropertiesJetMax PropertiesJetMax Properties</p>
    <p>Theorem 1: Under any fixed bottleneck assignment under max-min feedback, JetMax is globally asymptotically stable regardless of delay if and only if 0 &lt;  &lt; 2  For values of   1, the controller is also monotonic</p>
    <p>Theorem 2: Stationary resource allocation of JetMax is max-min fair</p>
    <p>Theorem 3: On a single link of any capacity, JetMax converges to within -percent of efficiency and fairness in a fixed number of RTT steps  For  = 0.5 and =1%, this is 6 steps</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax SimulationsJetMax SimulationsJetMax Simulations</p>
    <p>We start with ns2 simulations in T1 and T2  Topology T1 is changed to introduce random time-varying</p>
    <p>feedback delay in the control loop  no effect on stability</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax Simulations 2JetMax Simulations 2JetMax Simulations 2  Performance under mice cross-traffic</p>
    <p>A single link of capacity 100 mb/s shared by two long flows and a total of 500 short flows with random RTT in [40,1040] ms and uniform packet size in [800,1300] bytes</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax Simulations 3JetMax Simulations 3JetMax Simulations 3</p>
    <p>Short flows  Each lasts for a random</p>
    <p>duration with mean 10 seconds</p>
    <p>Achieve rates very close to fair-share 1.92 mb/s</p>
    <p>As flows depart after 120 seconds, their bandwidth is consumed by remaining flows</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax Linux Experiments 1JetMax Linux Experiments 1JetMax Linux Experiments 1</p>
    <p>Single-link scenario</p>
    <p>x1  x5 RTT=200 ms</p>
    <p>transition between states takes 1.2 seconds = 6 RTTs</p>
    <p>start transition</p>
    <p>re-stabilize</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>JetMax Linux Experiments 2JetMax Linux Experiments 2JetMax Linux Experiments 2</p>
    <p>Multi-link scenario  Flow x1 starts first, x2 arrives at time 20 seconds, x3</p>
    <p>arrives at 40 seconds, and x1 departs at 60 seconds</p>
    <p>x2</p>
    <p>x3</p>
  </div>
  <div class="page">
    <p>m p</p>
    <p>ut e</p>
    <p>ie nc</p>
    <p>e , T</p>
    <p>e xa</p>
    <p>s A</p>
    <p>&amp; M</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>ity</p>
    <p>Wrap-upWrapWrap--upup</p>
    <p>JetMax summary  Converges to the stationary state in the same number of</p>
    <p>RTTs regardless of link capacity and the number of flows  Achieves tunable utilization and zero loss  Is monotonic and stable under any time-varying delay</p>
    <p>More in the paper  Estimation of responsive/unresponsive rates  Bottleneck membership maintenance  Avoidance of transient overshoot  Additional simulations and experiments</p>
    <p>Linux and ns2 code  http://irl.cs.tamu.edu/mkc</p>
  </div>
</Presentation>
