<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2006 Mulitfacet Project University of Wisconsin-Madison</p>
    <p>LogTM: Log-Based Transactional Memory</p>
    <p>Kevin E. Moore, Jayaram Bobba, Michelle J. Moravan, Mark D. Hill, &amp; David A. Wood</p>
  </div>
  <div class="page">
    <p>Big Picture</p>
    <p>(Hardware) Transactional Memory promising  Most use lazy version management</p>
    <p>Old values in place  New values elsewhere</p>
    <p>Commits slower than aborts</p>
    <p>New LogTM: Log-based Transactional Memory  Uses eager version management (like most databases)</p>
    <p>Old values to log in thread-private virtual memory</p>
    <p>New values in place</p>
    <p>Makes common commits fast!</p>
    <p>Allows cache overflow</p>
    <p>Aborts handled in software</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation  Why Hardware Transactional Memory (TM)?</p>
    <p>How do TM systems differ?</p>
    <p>LogTM: Log-based Transactional Memory</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Why (Hardware) Transactional Memory (TM)?</p>
    <p>CMPs make multithreaded programming important</p>
    <p>Locks Challenging  Transactional Memory Promising</p>
    <p>Interface intuitive  begin_transaction { atomic execution } end_transaction</p>
    <p>Implementation manages data versions &amp; conflicts</p>
    <p>Speed is important  HTMs faster than STMs  HTMs faster than some lock regimes  Whole reason for parallelism</p>
  </div>
  <div class="page">
    <p>How Do Transactional Memory Systems Differ?</p>
    <p>(Data) Version Management  Keep old values for abort AND new values for commit</p>
    <p>Eager: record old values elsewhere; update in place</p>
    <p>Lazy: update elsewhere; keep old values in place</p>
    <p>(Data) Conflict Detection  Find read-write, write-read or write-write conflicts</p>
    <p>among concurrent transactions</p>
    <p>Eager: detect conflict on every read/write</p>
    <p>Lazy: detect conflict at end (commit/abort)</p>
    <p>Fast commit</p>
    <p>Less wasted work</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>LogTM: Log-based Transactional Memory  Eager Version Management  Eager Conflict Detection</p>
    <p>Conflict Resolution (working solution)</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>LogTMs Eager Version Management</p>
    <p>Old values stored in the transaction log  A per-thread linear (virtual) address space (like the</p>
    <p>stack)</p>
    <p>Filled by hardware (during transactions)</p>
    <p>Read by software (on abort)</p>
    <p>New values stored in place</p>
    <p>Current design requires hardware support</p>
  </div>
  <div class="page">
    <p>--------------23</p>
    <p>Transaction Log Example</p>
    <p>C0</p>
    <p>Initial State</p>
    <p>LogBase = LogPointer</p>
    <p>TM count &gt; 0</p>
    <p>Data BlockVA</p>
    <p>Log Base</p>
    <p>Log Ptr</p>
    <p>TM count</p>
    <p>R W</p>
  </div>
  <div class="page">
    <p>--------------23</p>
    <p>Transaction Log Example</p>
    <p>C0</p>
    <p>Store r2, (c0) /* r2 = 56 */  Set W bit for block (c0)</p>
    <p>Store address (c0) and old data on the log</p>
    <p>Increment Log Ptr to 1048</p>
    <p>Update memory</p>
    <p>Data BlockVA</p>
    <p>Log Base</p>
    <p>Log Ptr</p>
    <p>TM count</p>
    <p>R W</p>
    <p>c0</p>
  </div>
  <div class="page">
    <p>--------------23</p>
    <p>Transaction Log Example</p>
    <p>C0</p>
    <p>Commit transaction  Clear R &amp; W for all blocks  Reset Log Ptr to Log Base</p>
    <p>(1000)  Clear TM count</p>
    <p>Data BlockVA</p>
    <p>Log Base</p>
    <p>Log Ptr</p>
    <p>TM count</p>
    <p>R W</p>
    <p>-</p>
  </div>
  <div class="page">
    <p>Transaction Log Example</p>
    <p>--------------23</p>
    <p>C0</p>
    <p>Abort transaction  Replay log entries to undo</p>
    <p>the transaction  Reset Log Ptr to Log Base</p>
    <p>(1000)  Clear R &amp; W bits for all</p>
    <p>blocks  Clear TM count</p>
    <p>Data BlockVA</p>
    <p>Log Base</p>
    <p>Log Ptr</p>
    <p>TM count</p>
    <p>R W</p>
    <p>c0 34-----------</p>
    <p>-</p>
  </div>
  <div class="page">
    <p>Eager Version Management Discussion</p>
    <p>Advantages:  Fast Commits</p>
    <p>No copying  Common case</p>
    <p>Unambiguous Data Values  Value of a memory location is the value of the last store (no</p>
    <p>table lookup)</p>
    <p>Disadvantages  Slow/Complex Aborts</p>
    <p>Undo aborting transaction</p>
    <p>Relies on Eager Conflict Detection/Prevention</p>
  </div>
  <div class="page">
    <p>LogTMs Eager Conflict Detection</p>
    <p>Most Hardware TM Leverage Invalidation Cache Coherence  Add per-processor transactional write (W) &amp; read (R) bits</p>
    <p>Coherence protocol detects transactional data conflicts</p>
    <p>E.g., Writer seeks M copy, seeks S copies, &amp; finds R bit set</p>
    <p>LogTM detects conflicts this way using directory coherence  Requesting processor issues coherence request to directory</p>
    <p>Directory forwards to other processor(s)</p>
    <p>Responding processor detects conflict using local R/W bits &amp; informs requesting processor of conflict</p>
  </div>
  <div class="page">
    <p>I [old]M@P0 [old]</p>
    <p>I (--) [none]M (--) [old]M (-W) [new]</p>
    <p>Conflict Detection (example)</p>
    <p>Directory</p>
    <p>TM mode Overflow</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>P0 store  P0 sends get exclusive</p>
    <p>(GETX) request</p>
    <p>Directory responds with data (old)</p>
    <p>P0 executes store</p>
    <p>P0</p>
    <p>GETX DATA</p>
  </div>
  <div class="page">
    <p>M (-W) [new]M (-W) [new]</p>
    <p>Conflict Detection (example)</p>
    <p>Directory</p>
    <p>TM mode Overflow</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>M@P0 [old]</p>
    <p>In-cache transaction conflict  P1 sends get shared</p>
    <p>(GETS) request</p>
    <p>Directory forwards to P0</p>
    <p>P1 detects conflict and sends NACK</p>
    <p>P0</p>
    <p>GETS</p>
    <p>Fwd_GETS</p>
    <p>Conflict!</p>
    <p>NACK</p>
  </div>
  <div class="page">
    <p>M (-W) [new]I (--) [none]</p>
    <p>M@P0 [old]Msticky@P0 [new]</p>
    <p>Conflict Detection (example)</p>
    <p>Directory</p>
    <p>TM mode Overflow</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>Cache overflow  P0 sends put exclusive</p>
    <p>(PUTX) request</p>
    <p>Directory acknowledges</p>
    <p>P0 sets overflow bit</p>
    <p>P0 writes data back to memory</p>
    <p>P0</p>
    <p>PUTX ACK DATA</p>
  </div>
  <div class="page">
    <p>Conflict Detection (example)</p>
    <p>Directory</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>M@P0 [old]</p>
    <p>Out-of-cache conflict  P1 sends GETS request</p>
    <p>Directory forwards to P0</p>
    <p>P0 detects a (possible) conflict</p>
    <p>P0 sends NACK</p>
    <p>P0</p>
    <p>M (--) [old]M (-W) [new]</p>
    <p>Msticky@P0 [new]</p>
    <p>I (--) [none]</p>
    <p>GETS</p>
    <p>Fwd_GETS</p>
    <p>Conflict!</p>
    <p>NACK</p>
  </div>
  <div class="page">
    <p>Conflict Detection (example)</p>
    <p>Directory</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>M@P0 [old]</p>
    <p>Commit  P0 clears TM mode and</p>
    <p>Overflow bits</p>
    <p>P0</p>
    <p>M (--) [old]M (-W) [new]</p>
    <p>Msticky@P0 [new]</p>
    <p>I (--) [none]</p>
  </div>
  <div class="page">
    <p>Msticky@P0 [new]S(P1) [new]</p>
    <p>Conflict Detection (example)</p>
    <p>Directory</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>I (--) [none]</p>
    <p>TM mode Overflow</p>
    <p>Lazy cleanup  P1 sends GETS request</p>
    <p>Directory forwards request to P0</p>
    <p>P0 detects no conflict, sends CLEAN</p>
    <p>Directory sends Data to P1</p>
    <p>P0</p>
    <p>M (--) [old]M (-W) [new]I (--) [none]</p>
    <p>GETS</p>
    <p>Fwd_GETS CLEAN DATA</p>
    <p>S (--) [new]</p>
  </div>
  <div class="page">
    <p>LogTMs Conflict Detection w/ Cache Overflow</p>
    <p>At overflow at processor P  Set Ps overflow bit (1 bit per processor)</p>
    <p>Allow writeback, but set directory state to Sticky@P</p>
    <p>At transaction end (commit or abort) at processor P  Reset Ps overflow bit</p>
    <p>At (potential) conflicting request by processor R  Directory forwards Rs request to P.</p>
    <p>P tells R no conflict if overflow is reset</p>
    <p>But asserts conflict if set (w/ small chance of false positive)</p>
  </div>
  <div class="page">
    <p>Conflict Resolution</p>
    <p>Conflict Resolution  Can wait risking deadlock</p>
    <p>Can abort risking livelock</p>
    <p>Wait/abort transaction at requesting or responding proc?</p>
    <p>LogTM resolves conflicts at requesting processor  Requesting processor waits (using coherence nacks/retries)</p>
    <p>But aborts if other processor is waiting (deadlock possible) &amp; it is logically younger (using timestamps)</p>
    <p>Future: Requesting processor traps to software contention manager that decides who waits/aborts</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation  LogTM: Log-based Transactional Memory  Evaluation</p>
    <p>Methods  Shared-Counter Microbenchmark  SPLASH2 Benchmarks</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Methods</p>
    <p>Simulated Machine: 32-way non-CMP  32 SPARC V9 processors running Solaris 9 OS  1 GHz in-order processors w/ ideal IPC=1 &amp; private caches  16 kB 4-way split L1 cache, 1 cycle latency  4 MB 4-way unified L2 cache, 12 cycle latency  4 GB main memory, 80-cycle access latency  Full-bit vector directory w/ directory cache</p>
    <p>Simulation Infrastructure  Virtutech Simics for full-system function  Magic no-ops instructions for begin_transaction()etc.  Multifacet GEMS for memory system timing (Ruby only)</p>
    <p>GPL Release: http://www.cs.wisc.edu/gems/  LogTM simulator part of GEMS 2.0 (coming soon)</p>
  </div>
  <div class="page">
    <p>Microbenchmark Analysis</p>
    <p>Shared Counter  All threads update</p>
    <p>the same counter</p>
    <p>High contention</p>
    <p>Small Transactions</p>
    <p>LogTM v. Locks  EXP - Test-And-Test-And</p>
    <p>Set Locks with Exponential Backoff</p>
    <p>MCS - Software QueueBased Locks</p>
    <p>BEGIN_TRANSACTION();</p>
    <p>new_total = total.count + 1; private_data[id].count++; total.count = new_total;</p>
    <p>COMMIT_TRANSACTION();</p>
  </div>
  <div class="page">
    <p>Shared Counter</p>
    <p>LogTM (like other HTMs) does not read/write lock  LogTM has few aborts despite conflicts</p>
    <p>Threads (on 32 Processors)</p>
    <p>Execution Time (in millions of cycles)</p>
    <p>EXP MCS LogTM</p>
  </div>
  <div class="page">
    <p>SPLASH-2 Benchmarks</p>
    <p>Benchmark Input Synchronization</p>
    <p>Barnes 512 Bodies Locks on tree nodes</p>
    <p>Cholesky 14 Task queue locks</p>
    <p>Ocean Contiguous partitions, 258 Barriers</p>
    <p>Radiosity Room Task queue and buffer locks</p>
    <p>Raytrace Small image (teapot) Work list and counter locks</p>
    <p>Raytrace-Opt Small image (teapot) Work list and counter locks</p>
    <p>Water N-Squared 512 Molecules barriers</p>
    <p>False sharing optimization False sharing optimization</p>
  </div>
  <div class="page">
    <p>SPLASH2 Benchmark Results</p>
    <p>OCEAN RADIOSITY CHOLESKY RT-OPT RT-BASE BARNES WATER</p>
    <p>Benchmark</p>
    <p>Execution Time (in millions of cycles)</p>
    <p>LogTM (like other HTMs) does not read/write lock</p>
    <p>Allow critical section parallelism (e.g., 5.5 for RT-OPT)</p>
    <p>L o</p>
    <p>g T</p>
    <p>M S</p>
    <p>p e</p>
    <p>e d</p>
    <p>u p</p>
    <p>w .r .t</p>
    <p>. to</p>
    <p>P A</p>
    <p>R M</p>
    <p>A C</p>
    <p>L o</p>
    <p>ck s</p>
    <p>False sharing</p>
  </div>
  <div class="page">
    <p>SPLASH2 Benchmark Results</p>
    <p>Benchmark % Stalls % Aborts</p>
    <p>Barnes 4.89 15.3</p>
    <p>Cholesky 4.54 2.07</p>
    <p>Ocean .30 .52</p>
    <p>Radiosity 3.96 1.03</p>
    <p>Raytrace-Base 24.7 1.24</p>
    <p>Raytrace-Opt 2.04 .41</p>
    <p>Water 0 .11</p>
    <p>Conflicts Less Common</p>
    <p>Aborts</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Commits far more common than aborts  Conflicts are rare  Most conflicts can be resolved w/o aborts  Software aborts do not impact performance</p>
    <p>Overflows are rare (in current benchmarks)  LogTM</p>
    <p>Eager Version Management makes the common case (commit) fast</p>
    <p>Sticky States/Lazy Cleanup detects conflicts outside the cache (if overflows are infrequent)</p>
    <p>More work is needed to support virtualization and OS interaction</p>
    <p>False sharing has greater impact with TM</p>
  </div>
  <div class="page">
    <p>2006 Mulitfacet Project University of Wisconsin-Madison</p>
    <p>QUESTIONS?</p>
  </div>
  <div class="page">
    <p>How Do Transactional Memory Systems Differ?</p>
    <p>Lazy Version Management</p>
    <p>Eager Version Management</p>
    <p>Lazy Conflict Detection</p>
    <p>Eager Conflict Detection</p>
    <p>Wisconsin LogTM</p>
    <p>Herlihy/Moss TM</p>
    <p>MIT LTM</p>
    <p>Intel/Brown VTM</p>
    <p>Databases with Optimistic Conc. Ctrl.</p>
    <p>Stanford TCC</p>
    <p>Databases with Conservative C. Ctrl.</p>
    <p>MIT UTM</p>
    <p>Not done (yet)</p>
  </div>
  <div class="page">
    <p>Hardware State</p>
    <p>R and W bits in cache  track read and write sets</p>
    <p>Register checkpoint  Fast save/restore</p>
    <p>Log Base and Log Pointer</p>
    <p>TM mode bit</p>
    <p>R W Tag Data</p>
    <p>Data Caches</p>
    <p>Processor</p>
    <p>Registers Register Checkpoint</p>
    <p>LogBase</p>
    <p>LogPtr</p>
    <p>TMmode</p>
  </div>
</Presentation>
