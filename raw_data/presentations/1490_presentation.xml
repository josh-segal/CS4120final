<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Wear Unleveling: Improving NAND Flash Lifetime by Balancing Page Endurance</p>
    <p>Xavier Jimenez, David Novo, and Paolo Ienne</p>
    <p>Ecole Polytechnique Fdrale de Lausanne (EPFL) School of Computer and Communication Sciences</p>
    <p>CH-1015 Lausanne, Switzerland</p>
  </div>
  <div class="page">
    <p>Flash limited lifetime and endurance variance</p>
    <p>NAND Flash is organized in blocks of hundreds pages</p>
    <p>Some pages wear out faster than others</p>
    <p>a block</p>
    <p>Page 0 Page 1 Page 2 Page 3 Page 4 Page 5</p>
    <p>Page 127</p>
    <p>Weakest page</p>
    <p>The weakest page drives the block endurance</p>
    <p>Many pages could endure more writes</p>
  </div>
  <div class="page">
    <p>Some background on NAND flash</p>
    <p>Electron tunneling to add/remove charges into/from floating gate  Adding charges = Programming (page)  Removing charges = Erasing (block)  Out-of-place updates</p>
    <p>Memory cells degrade over Program/Erase (P/E) cycles  ECC units correct limited number of errors  Spare bytes in each page to store the codes and metadata</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3</p>
    <p>D4 D5</p>
    <p>D6 D7</p>
    <p>D8</p>
    <p>D9 D10</p>
    <p>D11 D12 D13</p>
    <p>D14 D15 Valid</p>
    <p>Invalid</p>
    <p>Clean</p>
    <p>Relieved</p>
    <p>Block A Block B Block C Block D</p>
    <p>D4 D1 D0 D2 D3</p>
    <p>D15</p>
    <p>D4 weak</p>
    <p>weak</p>
    <p>D5 D11</p>
    <p>D7</p>
    <p>Page states</p>
  </div>
  <div class="page">
    <p>Relieve pages to extend the endurance</p>
    <p>Page relief is characterized on two NAND flash chips</p>
    <p>Endurance  lifetime</p>
    <p>Endurance:</p>
    <p>Total P/E cycles</p>
    <p>Lifetime:</p>
    <p>Total data written</p>
    <p>Relief rate = 25% 50% 75%</p>
    <p>Endurance extension</p>
  </div>
  <div class="page">
    <p>Page relief on multi-level cells: page pairs</p>
    <p>Multi-level cells (MLCs) store two bits  Each bit mapped to a different page: LSB and MSB page pair</p>
    <p>Vthres</p>
    <p>Cell distribution</p>
    <p>Erase state LSB page programming (fast, coarse)</p>
    <p>MSB page programming (slow, precise)</p>
    <p>a block</p>
    <p>LSB</p>
    <p>MSB</p>
    <p>LSB</p>
    <p>MSB</p>
    <p>LSB</p>
    <p>MSB</p>
    <p>Programming Programmed Clean</p>
    <p>Legend</p>
  </div>
  <div class="page">
    <p>Half and full relief</p>
    <p>Half relief  SLC-mode[Roohparvar, patent 08] [Grupp et al., MICRO09]</p>
    <p>LSB programming approx. 3-4x faster than MSB</p>
    <p>Tradeoffs capacity for lower write latency</p>
    <p>LSB</p>
    <p>MSB</p>
    <p>Full relief</p>
    <p>LSB</p>
    <p>MSB</p>
    <p>Half relief Programmed</p>
    <p>Relieved</p>
    <p>Legend</p>
  </div>
  <div class="page">
    <p>Half and full relief characterization</p>
  </div>
  <div class="page">
    <p>Half relief can be more effective</p>
    <p>Relative wear of relief cycles for 2 chips</p>
    <p>Half relief is more effective in terms of written bits per cycle  2 bits written in 2 cycles:</p>
    <p>Chip Full Half</p>
    <p>C1 39% 61%</p>
    <p>C2 34% 55%</p>
    <p>Chip Full + Regular 2x Half</p>
    <p>C1 39%+100% = 139% 2 x 61% = 122%</p>
    <p>C2 34%+100% = 134% 2 x 55% = 110%</p>
  </div>
  <div class="page">
    <p>Hot blocks provide control and opportunity</p>
    <p>Flash Translation Layers (FTLs) provide simple interface, similar to magnetic disks  Garbage collection, wear leveling, and physical aspects of flash are hidden</p>
    <p>Logical space</p>
    <p>Physical space</p>
    <p>Valid Invalid Clean RelievedPage states</p>
    <p>Hot block Hot block</p>
    <p>Wear leveling swaps periodically hot and cold blocks</p>
  </div>
  <div class="page">
    <p>Reactive strategy: identifying weak pages on the fly</p>
    <p>ECC limit</p>
    <p>Weak threshold</p>
    <p>Block endurance extension</p>
  </div>
  <div class="page">
    <p>Reactive strategy: overheads</p>
    <p>Storage overhead:  2 bits per page  cheap</p>
    <p>FTL memory overhead:  2 bits per clean page (up to 32 Bytes per block with clean pages)</p>
    <p>Performance overhead:  Error monitoring: at worst, 1 extra read per write</p>
    <p>approx. +10% write latency</p>
    <p>Capacity reduction increases the garbage collection frequency</p>
    <p>Simple but slow to react  less potential</p>
  </div>
  <div class="page">
    <p>Proactive strategy: planning ahead of time</p>
    <p>Correlation between endurance and page pair number  We can compute the number of times weak pages should be relaxed to</p>
    <p>match the weakest pages extended endurance</p>
    <p>ECC limit</p>
    <p>Block endurance extension</p>
  </div>
  <div class="page">
    <p>Proactive strategy: adaptive planning</p>
    <p>Plan relief rates for multiple total relief cycles  Speculate on a number of relief cycles</p>
    <p>When exceeded, speculate for a higher one</p>
    <p>ECC limit</p>
  </div>
  <div class="page">
    <p>Proactive strategy on look-up tables</p>
    <p>Page pair Nb</p>
    <p>Half relief Full relief</p>
    <p>Weakest LSB/MSB page pair</p>
    <p>Plan 1 (4,000 relief cycles)</p>
    <p>Page pair Nb</p>
    <p>Half relief Full relief</p>
    <p>Plan 2 (2,000 relief cycles)</p>
  </div>
  <div class="page">
    <p>Proactive strategy overheads</p>
    <p>All the computational efforts done offline</p>
    <p>Storage/memory overhead:  A 16-bit counter per block to store relief cycles (similar to storing P/E cycles)</p>
    <p>About 1-2 KB to store the LUTs (typically 2-4 LUTs)  LUT are sparse  can be compressed</p>
    <p>Performance overhead  Capacity reduction increases garbage collection frequency</p>
  </div>
  <div class="page">
    <p>Device lifetime evaluation: simple model</p>
    <p>Max BER of 10-4</p>
    <p>Chip C2</p>
    <p>+50%</p>
    <p>+30%</p>
    <p>, max 10% bad blocks, 60% fixed hot write ratio</p>
  </div>
  <div class="page">
    <p>Relief can fix large variances</p>
    <p>Two 30 nm class chips with different architectures</p>
    <p>+50%</p>
    <p>+30%</p>
    <p>+10% +3%</p>
    <p>Chip 1 ABL (less interference)</p>
    <p>Chip 2 Interleaved (flexible, faster)</p>
  </div>
  <div class="page">
    <p>Evaluate the capacity loss impact</p>
    <p>We implemented the proactive strategy on two Hybrid FTLs  ROSE [TC11], ComboFTL [JSA10]</p>
  </div>
  <div class="page">
    <p>Lifetime extension</p>
    <p>MSR CambridgeOLTP</p>
    <p>+6%/3%</p>
    <p>ComboFTL ROSE</p>
  </div>
  <div class="page">
    <p>Lifetime extension</p>
    <p>MSR CambridgeOLTP</p>
    <p>+44%/48%</p>
    <p>ComboFTL ROSE</p>
  </div>
  <div class="page">
    <p>MSR CambridgeOLTP</p>
    <p>Half relief compensates GC overhead</p>
    <p>Despite the capacity loss, but thanks to half relief, execution time is stable</p>
    <p>-4%/-1.5%</p>
    <p>ComboFTL ROSE</p>
  </div>
  <div class="page">
    <p>MSR CambridgeOLTP</p>
    <p>Half relief compensates GC overhead</p>
    <p>Despite the capacity loss, but thanks to half relief, execution time is stable</p>
    <p>-1%</p>
    <p>ComboFTL ROSE</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>The relief effect was characterized and is significant</p>
    <p>Its exploitability largely depends on the page endurance variance</p>
    <p>We proposed two strategies to integrate this effect into FTLs</p>
    <p>Can be implemented today with off-the-shelf chips</p>
    <p>There is room to develop more efficient approaches  Leave more computational efforts to the controller</p>
    <p>Technology scaling will inevitably bring a larger variance  Relieving pages might help to overcome the challenge</p>
  </div>
</Presentation>
