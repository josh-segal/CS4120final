<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Performance Contracts for Software Network Functions</p>
    <p>Rishabh Iyer, Luis Pedrosa, Arseniy Zaostrovnykh, Solal Pirelli, Katerina Argyraki, George Candea</p>
  </div>
  <div class="page">
    <p>Software Network Functions  Pros and Cons o Increased flexibility</p>
    <p>o Reduced capital and operating expenses</p>
    <p>o Programming errors</p>
    <p>o Unexpected performance behaviour</p>
  </div>
  <div class="page">
    <p>Dealing with unexpected NF performance</p>
    <p>o Goal: Comprehensive understanding of NFs performance profile</p>
    <p>v Operators  capacity planning and anticipate attacks</p>
    <p>v Developers  informed development decisions</p>
    <p>o Previous work [NSDI12, NSDI18, SIGCOMM18]</p>
    <p>v Focus on narrow subset of input workloads</p>
    <p>v Offer few completeness guarantees</p>
  </div>
  <div class="page">
    <p>Performance Contracts for NFs</p>
    <p>Performance</p>
    <p>Prediction</p>
    <p>o Abstraction for users to parameterize arbitrary input workloads</p>
    <p>o Predict performance for workload spec without running NF</p>
    <p>o Performance predicted as function of Performance Critical Variables (PCVs)</p>
    <p>o Per-packet metrics: Instruction count, memory accesses, latency (cycles)</p>
    <p>Workload</p>
    <p>Spec</p>
    <p>Performance Contract</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>o What is a performance contract?</p>
    <p>o How does Bolt generate contracts?</p>
    <p>o Evaluation &amp; Use-Case</p>
  </div>
  <div class="page">
    <p>Running example</p>
  </div>
  <div class="page">
    <p>Running example</p>
  </div>
  <div class="page">
    <p>Running example</p>
  </div>
  <div class="page">
    <p>Running example</p>
  </div>
  <div class="page">
    <p>Key A</p>
    <p>Running example</p>
    <p>Hash 0</p>
    <p>Hash 1</p>
    <p>Hash 2</p>
    <p>Hash 3</p>
    <p>Hash 4</p>
    <p>Hash 5</p>
    <p>Key B Key C</p>
    <p>Key D</p>
    <p>MACtable implementation</p>
  </div>
  <div class="page">
    <p>Performance Contracts Example</p>
    <p>Performance Contract for MAC_bridge</p>
    <p>Traffic Class Performance</p>
    <p>Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Performance Contracts Example</p>
    <p>Traffic Class Performance Invalid Header</p>
    <p>Valid, DestMAC known Valid, DestMAC unknown</p>
    <p>Performance Contract for MAC_bridge Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Performance Contracts Example</p>
    <p>! = Number of hash collisions</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 3! + 20 Valid, DestMAC unknown 3! + 100</p>
    <p>Performance Contract for MAC_bridge Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Using performance contracts</p>
    <p>Spec 1: Unconstrained traffic</p>
    <p>! = Number of hash collisions</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 3! + 20 Valid, DestMAC unknown 3! + 100</p>
    <p>Performance Contract for MAC_bridge</p>
    <p>Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Using performance contracts</p>
    <p>Predicted performance:</p>
    <p>0 = max_&amp;'(()*)'+*</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 30 + 20 Valid, DestMAC unknown 30 + 100</p>
    <p>Spec 1: Unconstrained traffic Performance Contract for MAC_bridge</p>
    <p>Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Using performance contracts</p>
    <p>! = Number of hash collisions</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 3! + 20 Valid, DestMAC unknown 3! + 100</p>
    <p>Predicted performance:</p>
    <p>! = 0</p>
    <p>Spec 2: No hash collisions Performance Contract for MAC_bridge</p>
    <p>Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Using performance contracts</p>
    <p>! = Number of hash collisions</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 3! + 20 Valid, DestMAC unknown 3! + 100</p>
    <p>Predicted performance:</p>
    <p>! = 0</p>
    <p>Spec 3: Valid, no collisions,</p>
    <p>DestMAC known</p>
    <p>Performance Contract for MAC_bridge</p>
    <p>Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Using performance contracts</p>
    <p>! = Number of hash collisions</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 3! + 20 Valid, DestMAC unknown 3! + 100</p>
    <p>Predicted performance:</p>
    <p>! = 0</p>
    <p>Spec 3: Valid, no collisions,</p>
    <p>DestMAC known</p>
    <p>Contracts quantify performance for all traffic classes of the NF Users query contract for performance of specific input workloads</p>
    <p>Performance Contract for MAC_bridge</p>
    <p>Metric: Lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>o What is a performance contract?</p>
    <p>o How does Bolt generate contracts?</p>
    <p>o Evaluation &amp; Use-Case</p>
  </div>
  <div class="page">
    <p>Firewall NAT Bridge</p>
    <p>NF chain</p>
    <p>Generating performance contracts recursively</p>
    <p>+ + =</p>
  </div>
  <div class="page">
    <p>Generating performance contracts recursively Individual NF</p>
    <p>Stateful NF data structures</p>
    <p>Stateless Code</p>
    <p>MACtable put(), get()</p>
  </div>
  <div class="page">
    <p>Generating performance contracts recursively</p>
    <p>Individual NF</p>
    <p>Stateful NF data structures</p>
    <p>(Hard to analyze)*</p>
    <p>Stateless Code (Simple to analyze)*</p>
    <p>MACtable put(), get()</p>
    <p>*A.Zaostrovnykh, S.Pirelli, L.Pedrosa, K.Argyraki, G.Candea A Formally Verified NAT SIGCOMM 2017</p>
  </div>
  <div class="page">
    <p>Generating performance contracts recursively</p>
    <p>o Well defined separation between stateful and stateless NF code*</p>
    <p>o NFs typically have well defined, isolated state</p>
    <p>o Encapsulate NF state using a library of data structures</p>
    <p>o Stateful data structures  Base case of recursive process</p>
    <p>o Analyze once, reuse across NFs</p>
    <p>*A.Zaostrovnykh, S.Pirelli, L.Pedrosa, K.Argyraki, G.Candea A Formally Verified NAT SIGCOMM 2017</p>
  </div>
  <div class="page">
    <p>Analyzing stateful data structures</p>
    <p>!&quot;#$%#&amp;'()&quot;*+ = $ -(./0 .')1&quot;0,*+ 30'0&quot;,)%($-4, . .</p>
    <p>o Cannot account for all possible packet histories -&gt; Path explosion</p>
    <p>o BUT, performance of MACtable depends ONLY on number of hash collisions</p>
  </div>
  <div class="page">
    <p>Performance Critical Variables (PCVs)</p>
    <p>o Abstract away NF state specificities</p>
    <p>o Succinctly summarize impact of packet history, configuration on performance</p>
    <p>o Tailor legibility and detail to audience</p>
    <p>Traffic Class Performance Unconstrained 1! + 2</p>
    <p>Contract for MACtable_put Contract for MACtable_get</p>
    <p>Traffic Class Performance Key present 2! + 12 Key absent 2! + 7</p>
    <p>! = Number of hash collisions Only PCV required to summarize perf in terms of lines of pseudo-code</p>
  </div>
  <div class="page">
    <p>Generating Performance Contracts for NFs</p>
    <p>o Symbolically execute stateless code to traverse all execution paths</p>
    <p>o While traversing each path</p>
    <p>v Keep track of performance metrics for stateless code</p>
    <p>v Plug in contracts for stateful code using path constraints</p>
  </div>
  <div class="page">
    <p>Generating Performance Contracts for NFs</p>
    <p>Invalid Valid</p>
  </div>
  <div class="page">
    <p>Traffic Class Performance Unconstrained 1! + 2</p>
    <p>Contract for MACtable_put</p>
    <p>Generating Performance Contracts for NFs</p>
    <p>Invalid Valid</p>
  </div>
  <div class="page">
    <p>Traffic Class Performance Key present 2&quot; + 12 Key absent 2&quot; + 7 Contract for MACtable_get</p>
    <p>Generating Performance Contracts for NFs</p>
    <p>Invalid Valid</p>
    <p>DestMAC known DestMAC unknown</p>
  </div>
  <div class="page">
    <p>Generating Performance Contracts for NFs</p>
    <p>Invalid Valid</p>
    <p>DestMAC known DestMAC unknown</p>
  </div>
  <div class="page">
    <p>Invalid Valid</p>
    <p>DestMAC known DestMAC unknown</p>
    <p>Generating Performance Contracts for NFs</p>
    <p>Performance Contract for MAC_bridge</p>
    <p>! = Number of hash collisions</p>
    <p>Traffic Class Performance Invalid Header 3</p>
    <p>Valid, DestMAC known 3! + 20 Valid, DestMAC unknown 3! + 100</p>
  </div>
  <div class="page">
    <p>Performance Contracts for NF chains</p>
    <p>o Generate performance contracts for individual NFs in chain</p>
    <p>o Pair together traffic classes from communicating NFs</p>
    <p>o For each pair - AND respective constraints together</p>
    <p>v Equate packet sent by first NF to packet received by second</p>
  </div>
  <div class="page">
    <p>Performance Contract for NF chains - Example</p>
    <p>Firewall Traffic Class Perf</p>
    <p>IP opt 20 No IP opt 50</p>
    <p>Router</p>
    <p>Firewall</p>
    <p>Drops packets with IP options</p>
    <p>Fast path  No IP options</p>
    <p>Slow path  IP options</p>
    <p>Router Traffic Class Perf IP opt 500</p>
    <p>No IP opt 60 F1 F2</p>
    <p>R1 R2</p>
    <p>NF chain Traffic Class Perf</p>
    <p>IP opt 20 No IP opt 110</p>
    <p>&lt;F1&gt; &lt;F2, R2&gt;</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>o What is a performance contract?</p>
    <p>o How does Bolt generate contracts?</p>
    <p>o Evaluation and Use-Case</p>
  </div>
  <div class="page">
    <p>Evaluation setup &amp; methodology o 4 NFs - NAT, Maglev-like LB, MAC bridge, LPM router</p>
    <p>o Analyze NF logic + DPDK + NIC driver*</p>
    <p>o Metrics  instructions executed, memory accesses, execution cycles</p>
    <p>o Testbed - Intel Xeon E5-2667v2 3.3GHz, 82599ES 10Gb NICs o Compare predicted vs measured performance for various packet classes</p>
    <p>Tester Device under Test *S.Pirelli, A.Zaostrovnykh, G.Candea A Formally Verified NAT Stack KBNETS Workshop - SIGCOMM 2018</p>
  </div>
  <div class="page">
    <p>Predictions for Instruction Count, Memory Accesses</p>
    <p>Class Description</p>
    <p>LB1 Unconstrained traffic</p>
    <p>LB2 Client packet, new flow</p>
    <p>LB3 Client packet, existing flow,</p>
    <p>unresponsive backend</p>
    <p>LB4 Client packet, existing flow,</p>
    <p>existing backend</p>
    <p>LB5 Heartbeat packets</p>
    <p>Results for Maglev-like Load Balancer</p>
    <p>P r e</p>
    <p>d ic</p>
    <p>t io</p>
    <p>n G</p>
    <p>a p</p>
    <p>( %</p>
    <p>)</p>
    <p>Class</p>
    <p>LB1 LB2 LB3 LB4 LB5</p>
    <p>Instruction Count (IC) Memory Accesses (MA)</p>
  </div>
  <div class="page">
    <p>Why is there a prediction gap?</p>
    <p>o Source 1: Trade-off between precision and legibility in PCVs</p>
    <p>v Can be overcome by exposing more detail</p>
    <p>o Source 2: Differences between analyzed and production code</p>
    <p>v Disabled link time optimizations in analyzed code</p>
  </div>
  <div class="page">
    <p>Use Case  Informed cost-benefit analysis</p>
    <p>o Example: Bridge with randomized hash table</p>
    <p>v Incorporates random key into hash function</p>
    <p>v Rehashes all entries with a new key when collisions greater than a threshold</p>
    <p>o Question: Where to place threshold?</p>
    <p>v Avoid rehashing under normal operation</p>
    <p>v Should rehash under attack</p>
  </div>
  <div class="page">
    <p>Use Case  Informed cost-benefit analysis</p>
    <p>CC D</p>
    <p>F</p>
    <p>Pr ed</p>
    <p>ic te</p>
    <p>d IC</p>
    <p>Number of hash collisions</p>
    <p>Predicted IC</p>
  </div>
  <div class="page">
    <p>Use Case  Informed cost-benefit analysis</p>
    <p>CC D</p>
    <p>F</p>
    <p>Pr ed</p>
    <p>ic te</p>
    <p>d IC</p>
    <p>Number of hash collisions</p>
    <p>Predicted IC CCDF</p>
  </div>
  <div class="page">
    <p>Performance Contracts for NFs o Abstraction for users to parameterize arbitrary input workloads</p>
    <p>o Predict performance for workload spec without running NF</p>
    <p>o Performance predicted as function of Performance Critical Variables (PCVs)</p>
    <p>bolt-perf-contracts.github.io 41</p>
  </div>
  <div class="page">
    <p>o Distiller</p>
    <p>o Results  IC, MA</p>
    <p>o Results  NF chains</p>
    <p>o Results  Latency</p>
    <p>o Full Blown Contract</p>
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>The Bolt Distiller</p>
    <p>Back</p>
    <p>o Users need to know which traffic classes are likely</p>
    <p>o Bolt is a static analysis tool, cannot know probabilities of each traffic class</p>
    <p>o The Bolt Distiller</p>
    <p>v Input  A representative packet trace</p>
    <p>v Output - Execution path taken by each packet &amp; values of PCVs</p>
    <p>v Users can then extrapolate the likelihood and query contract accordingly</p>
  </div>
  <div class="page">
    <p>Predictions for Instruction Count, Memory Accesses</p>
    <p>Class Description</p>
    <p>NAT1 Unconstrained traffic NAT2 Client packet, new flow NAT3 Existing flow NAT4 External, dropped packet BR1 Unconstrained traffic BR2 Broadcast traffic BR3 Unicast traffic</p>
    <p>Results for NAT, Bridge</p>
    <p>Pr ed</p>
    <p>ic tio</p>
    <p>n G</p>
    <p>ap (%</p>
    <p>) Class</p>
    <p>NAT1 NAT2 NAT3 NAT4 BR1 BR2 BR3</p>
    <p>Instruction Count (IC) Memory Accesses (MA)</p>
    <p>Bolt predicts IC &amp; MA accurately, irrespective of NF/Traffic Class</p>
    <p>Back</p>
  </div>
  <div class="page">
    <p>Predictions for NF chains</p>
    <p>o NFs chained together v Firewall  drops packets with IP options v Router  Fast path (No IP options), Slow path (packets with IP options)</p>
    <p>Class Description</p>
    <p>C1 Packets with IP options C2 Packets without IP options</p>
    <p>C1 C2</p>
    <p>Instruction Count (IC) Memory Accesses (MA)</p>
    <p>Pr ed</p>
    <p>ic tio</p>
    <p>n G</p>
    <p>ap (%</p>
    <p>)</p>
    <p>Class</p>
    <p>Back</p>
  </div>
  <div class="page">
    <p>Predictions for Latency (Execution Cycles)</p>
    <p>Class Description</p>
    <p>LB1 Unconstrained traffic LB2 Client packet, new flow</p>
    <p>LB3 Client packet, existing flow,</p>
    <p>unresponsive backend</p>
    <p>LB4 Client packet, existing flow,</p>
    <p>existing backend LB5 Heartbeat packets</p>
    <p>Results for Maglev-like Load Balancer</p>
    <p>O ve</p>
    <p>res</p>
    <p>tim at</p>
    <p>io n</p>
    <p>Ra tio</p>
    <p>Class</p>
    <p>LB1 LB2 LB3 LB4 LB5</p>
    <p>Execution Cycles</p>
    <p>Back</p>
  </div>
  <div class="page">
    <p>Predictions for Execution Cycles Results for LB,NAT, Bridge,LPM</p>
    <p>Back</p>
  </div>
  <div class="page">
    <p>Full Blown Contract</p>
    <p>Back</p>
  </div>
</Presentation>
