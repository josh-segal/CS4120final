<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Software Persistent Memory</p>
    <p>Jorge Guerra, Leonardo Marmol, Daniel Campello, Carlos Crespo, Raju Rangaswami, Jinpeng Wei</p>
    <p>{jguerra, lmarm001, dcamp020, ccres008, raju, weijp}@cs.fiu.edu</p>
    <p>School of Computing and Information Sciences College of Engineering and Computing</p>
    <p>Florida International University</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Persistence is ubiquitous</p>
    <p>Metadata persistence in systems software</p>
    <p>Layout management (file systems, others)</p>
    <p>Journaling, Versioning, Snapshoting, CDP</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Persistence is ubiquitous</p>
    <p>Metadata persistence in systems software</p>
    <p>Layout management (file systems, others)</p>
    <p>Journaling, Versioning, Snapshoting, CDP</p>
    <p>Application data persistence</p>
    <p>End-user applications</p>
    <p>Databases</p>
    <p>Key-value stores</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Persistence is ubiquitous</p>
    <p>Metadata persistence in systems software</p>
    <p>Layout management (file systems, others)</p>
    <p>Journaling, Versioning, Snapshoting, CDP</p>
    <p>Application data persistence</p>
    <p>End-user applications</p>
    <p>Databases</p>
    <p>Key-value stores</p>
    <p>Computational state persistence</p>
    <p>Scientific (HPC) applications</p>
    <p>Big Data applications</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>What is needed for persistence?</p>
    <p>Required steps to persist data</p>
    <p>Tracking data dependencies</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>What is needed for persistence?</p>
    <p>Required steps to persist data</p>
    <p>Tracking data dependencies</p>
    <p>Transferring data from memory to persistent media</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>What is needed for persistence?</p>
    <p>Required steps to persist data</p>
    <p>Tracking data dependencies</p>
    <p>Transferring data from memory to persistent media</p>
    <p>Loading data back into memory</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Challenges of persisting memory</p>
    <p>Making a Balanced Binary Tree Persistent</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Challenges of persisting memory</p>
    <p>Making a Balanced Binary Tree Persistent</p>
    <p>Initial Tree</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Challenges of persisting memory</p>
    <p>Making a Balanced Binary Tree Persistent</p>
    <p>Initial Tree Before Balancing</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Challenges of persisting memory</p>
    <p>Making a Balanced Binary Tree Persistent</p>
    <p>Initial Tree Before Balancing Final Tree</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>A possible solution</p>
    <p>A Different Programming Model</p>
    <p>Automatically track data dependencies</p>
    <p>X Identify which memory regions must be made persistent</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>A possible solution</p>
    <p>A Different Programming Model</p>
    <p>Automatically track data dependencies</p>
    <p>X Identify which memory regions must be made persistent</p>
    <p>Transfer data from memory to the persistent media</p>
    <p>X Transactional model</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>A possible solution</p>
    <p>A Different Programming Model</p>
    <p>Automatically track data dependencies</p>
    <p>X Identify which memory regions must be made persistent</p>
    <p>Transfer data from memory to the persistent media</p>
    <p>X Transactional model</p>
    <p>Load data back into memory</p>
    <p>X Memory consistency</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Introducing Software Persistent Memory (SoftPM )</p>
    <p>SoftPM</p>
    <p>A type of application directed check-pointing</p>
    <p>Data to be check-pointed is automatically discovered</p>
    <p>Fast checkpoints and recovery</p>
    <p>Uses conventional volatile memory interfaces</p>
    <p>Works with existing technology</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Outline</p>
    <p>Design</p>
    <p>X Container Abstractions X Automatic Data Discovery</p>
    <p>X Code Modification X Architecture Overview</p>
    <p>Evaluation</p>
    <p>X Development Complexity</p>
    <p>X Performance</p>
    <p>Summary</p>
    <p>X Related Work X Conclusions</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>The Container abstraction</p>
    <p>Simple container</p>
    <p>Self-describing unit of persistent memory</p>
    <p>One or more containers per application</p>
    <p>Applications specify a root structure</p>
    <p>All data reachable from the root automatically discovered</p>
    <p>Restoreable with a single operation</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>We divide memory into 2 regions: volatile and persistent.</p>
    <p>Hence, there can be 4 types of pointers:</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>We divide memory into 2 regions: volatile and persistent.</p>
    <p>Hence, there can be 4 types of pointers:</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>We divide memory into 2 regions: volatile and persistent.</p>
    <p>Hence, there can be 4 types of pointers:</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>We divide memory into 2 regions: volatile and persistent.</p>
    <p>Hence, there can be 4 types of pointers:</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>We divide memory into 2 regions: volatile and persistent.</p>
    <p>Hence, there can be 4 types of pointers:</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>We divide memory into 2 regions: volatile and persistent.</p>
    <p>Hence, there can be 4 types of pointers:</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>VolatileVolatile</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>traverse pointer</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1</p>
    <p>create copy</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1 fix pointer</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1</p>
    <p>free previous</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1</p>
    <p>traverse pointer</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1 p2</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1 p2 p3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1 p2 p3</p>
    <p>fix references</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1 p2 p3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Automatically discovering data</p>
    <p>Initially all memory is volatile except a root structure.</p>
    <p>Volatile</p>
    <p>Persistent</p>
    <p>root</p>
    <p>v1 v2 v3</p>
    <p>p1 p2 p3v4</p>
    <p>p1 p2 p3</p>
    <p>This root structure and its closure form the container. 10 / 22</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list;</p>
    <p>foo() {</p>
    <p>list *n1 = malloc(...);</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>list *n1 = malloc(...);</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C;  foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
    <p>Y</p>
    <p>n2</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
    <p>Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>P2 n3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
    <p>Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>P2 n3</p>
    <p>Z</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
    <p>Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>P2 n3</p>
    <p>Z</p>
    <p>n3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Creating a persistence point</p>
    <p>typedef struct l { int v;</p>
    <p>struct l * next;</p>
    <p>} list; struct pcont {</p>
    <p>list *head;</p>
    <p>} *C; foo() {</p>
    <p>cid = pCAlloc(&amp;C, sizeof(*C));</p>
    <p>list *n1 = malloc(...);</p>
    <p>C-&gt;head = n1;</p>
    <p>n1-&gt;v = X;</p>
    <p>list *n2 = malloc(...);</p>
    <p>n1-&gt;v = Y;</p>
    <p>l-&gt;next = n1;</p>
    <p>list *n3 = malloc(...);</p>
    <p>n2-&gt;v = Z;</p>
    <p>n1-&gt;next = n2;</p>
    <p>pPoint(cid);</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P2 P3</p>
    <p>C P1 C</p>
    <p>n1 P1 n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2</p>
    <p>P1 n2</p>
    <p>Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>P2 n3</p>
    <p>Z</p>
    <p>n3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C;  foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P1 C n1</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P 1 C</p>
    <p>n1</p>
    <p>P1 n1n2</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P 1 C</p>
    <p>n1</p>
    <p>P 1</p>
    <p>n1n2  P1 n2</p>
    <p>n3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P 1 C</p>
    <p>n1</p>
    <p>P 1</p>
    <p>n1n2 P</p>
    <p>n3</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P 1 C</p>
    <p>n1</p>
    <p>P 1</p>
    <p>n1n2 P</p>
    <p>n3  P</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>} . . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P 1 C</p>
    <p>n1</p>
    <p>P 1</p>
    <p>n1n2 P</p>
    <p>n3 P</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Restoring a persistence point</p>
    <p>struct pcont { list *head;</p>
    <p>} *C; foo() {</p>
    <p>if (!(cid = pCRestore(&amp;C)))</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>}</p>
    <p>. . .</p>
    <p>}</p>
    <p>Process Memory</p>
    <p>Persistent Medium</p>
    <p>P1 P</p>
    <p>C</p>
    <p>n1</p>
    <p>n1</p>
    <p>X</p>
    <p>n2 Y</p>
    <p>n2</p>
    <p>n3</p>
    <p>n3 Z P1 C</p>
    <p>P1 n1</p>
    <p>P1 n2</p>
    <p>P2 n3</p>
    <p>P 1 C</p>
    <p>n1</p>
    <p>P 1</p>
    <p>n1n2 P</p>
    <p>n3 P</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>Prev Curr</p>
    <p>P1 P</p>
    <p>P2 P</p>
    <p>P3 P</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Static code analysis</p>
    <p>Type Definition Usage</p>
    <p>struct list { struct list *l = malloc(n); int val;</p>
    <p>struct list *next;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Static code analysis</p>
    <p>Type Definition Usage</p>
    <p>struct list { struct list *l = malloc(n); int val;</p>
    <p>struct list *next;</p>
    <p>};</p>
    <p>Source-to-source translation</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Static code analysis</p>
    <p>Type Definition Usage</p>
    <p>struct list { struct list *l = malloc(n); int val;</p>
    <p>mallocat(l, n);</p>
    <p>struct list *next;</p>
    <p>};</p>
    <p>Source-to-source translation</p>
    <p>Records the location and size of all memory allocations</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Static code analysis</p>
    <p>Type Definition Usage</p>
    <p>struct list { struct list *l = malloc(n); int val;</p>
    <p>mallocat(l, n);</p>
    <p>struct list *next; pointerat(&amp;l);</p>
    <p>};</p>
    <p>Source-to-source translation</p>
    <p>Records the location and size of all memory allocations</p>
    <p>Registers the location of all pointers at initialization</p>
    <p>X Explicit initialization: l-value of assignment operations</p>
    <p>X Implicit initialization: memory copying/move operations</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Architecture</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Architecture</p>
    <p>API</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Architecture</p>
    <p>API</p>
    <p>LIMA</p>
    <p>Container Manager</p>
    <p>Discovery &amp; Reorganization</p>
    <p>Write Handler Flusher</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Architecture</p>
    <p>API</p>
    <p>LIMA</p>
    <p>Container Manager</p>
    <p>Discovery &amp; Reorganization</p>
    <p>Write Handler Flusher</p>
    <p>SID</p>
    <p>Chunk Remapper</p>
    <p>Transaction Handler</p>
    <p>HDD module</p>
    <p>SSD module</p>
    <p>PFS module</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SoftPM Architecture</p>
    <p>API</p>
    <p>LIMA</p>
    <p>Container Manager</p>
    <p>Discovery &amp; Reorganization</p>
    <p>Write Handler Flusher</p>
    <p>SID</p>
    <p>Chunk Remapper</p>
    <p>Transaction Handler</p>
    <p>Network</p>
    <p>HDD module</p>
    <p>SSD module</p>
    <p>PFS module</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Evaluation</p>
    <p>Configurations</p>
    <p>Native: Original unmodified code (with/without</p>
    <p>persistence)</p>
    <p>TPL: Using a data structure serialization library</p>
    <p>SoftPM: Using SoftPM to identify and persist data</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Evaluation</p>
    <p>Configurations</p>
    <p>Native: Original unmodified code (with/without</p>
    <p>persistence)</p>
    <p>TPL: Using a data structure serialization library</p>
    <p>SoftPM: Using SoftPM to identify and persist data</p>
    <p>What we want to evaluate</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Evaluation</p>
    <p>Configurations</p>
    <p>Native: Original unmodified code (with/without</p>
    <p>persistence)</p>
    <p>TPL: Using a data structure serialization library</p>
    <p>SoftPM: Using SoftPM to identify and persist data</p>
    <p>What we want to evaluate</p>
    <p>Development complexity</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Evaluation</p>
    <p>Configurations</p>
    <p>Native: Original unmodified code (with/without</p>
    <p>persistence)</p>
    <p>TPL: Using a data structure serialization library</p>
    <p>SoftPM: Using SoftPM to identify and persist data</p>
    <p>What we want to evaluate</p>
    <p>Development complexity</p>
    <p>Application performance when using SoftPM</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Evaluating development complexity</p>
    <p>Data Structure</p>
    <p>or Application</p>
    <p>Arrays</p>
    <p>Linked List</p>
    <p>RB Tree</p>
    <p>Hash Table</p>
    <p>SQLite</p>
    <p>memcachedb</p>
    <p>Original LOC for LOC to use</p>
    <p>LOC Persistence SoftPM</p>
    <p>NOTE: SQLite and memcachedb implement their own persistence.</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>SQLite transaction performance</p>
    <p>Workload</p>
    <p>Benchmark creates a DB and performs random insert, select, update, and</p>
    <p>delete transactions.</p>
    <p>T ra</p>
    <p>n s a c ti o n s /s</p>
    <p>e c</p>
    <p>Number of Rows (x1000)</p>
    <p>SoftPM Native</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Memcachedb using different back-ends</p>
    <p>Workload</p>
    <p>The workload randomly adds, queries, and deletes 512 byte elements with 16</p>
    <p>byte keys. The dashed line represents a memory only solution.</p>
    <p>BDB-BTree</p>
    <p>BDB-HT</p>
    <p>SoftPM</p>
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s /S</p>
    <p>e c</p>
    <p>Persistence Backend</p>
    <p>Sync HDD Sync SSD</p>
    <p>Async HDD Async SSD</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Scalability of SoftPM</p>
    <p>Workload</p>
    <p>Multiple processes; multiple containers</p>
    <p>Each container stores a linked list of size 1GB/processes</p>
    <p>s is</p>
    <p>te n c e P</p>
    <p>o in</p>
    <p>t T</p>
    <p>im e (</p>
    <p>s e c s )</p>
    <p>Number of Processes</p>
    <p>TPL SoftPM</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Related Work</p>
    <p>Process Checkpointing</p>
    <p>libckpt[USENIX95]</p>
    <p>Zap[OSDI02]</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Related Work</p>
    <p>Process Checkpointing</p>
    <p>libckpt[USENIX95]</p>
    <p>Zap[OSDI02]</p>
    <p>Object Oriented DBs</p>
    <p>ObjectStore[CACM91]</p>
    <p>Thor[SIGMOD96]</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Related Work</p>
    <p>Process Checkpointing</p>
    <p>libckpt[USENIX95]</p>
    <p>Zap[OSDI02]</p>
    <p>Object Oriented DBs</p>
    <p>ObjectStore[CACM91]</p>
    <p>Thor[SIGMOD96]</p>
    <p>Persistent Memory</p>
    <p>RVM[CACM91]</p>
    <p>SSDAlloc[USENIX10]</p>
    <p>NVHeap and Mnemosyne[ASPLOS11]</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Conclusions</p>
    <p>SoftPM Offers a Different Programming Model</p>
    <p>A memory abstraction for persistent data</p>
    <p>Fully automated</p>
    <p>Transactional</p>
    <p>High-performance</p>
    <p>Traditional volatile interfaces</p>
    <p>Works with existing technologies</p>
  </div>
  <div class="page">
    <p>Introduction Design Evaluation Summary</p>
    <p>Thank you!</p>
    <p>(Ill be happy to take questions)</p>
  </div>
</Presentation>
