<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Differential Forms for Target Tracking and Aggregate Queries in</p>
    <p>Distributed Networks</p>
    <p>Rik Sarkar Jie Gao Stony Brook University</p>
  </div>
  <div class="page">
    <p>Target Tracking with Sensor Networks</p>
  </div>
  <div class="page">
    <p>Target Queries</p>
    <p>Range queries: # targets within</p>
    <p>any geographic range R.</p>
    <p>Tracking queries: Find the yellow</p>
    <p>car.  Closest target</p>
    <p>queries 3</p>
  </div>
  <div class="page">
    <p>Nave Solutions for Range Queries</p>
    <p>Sensors report targets to a central station.  Bottleneck and single point of failure.  Update cost is high.  Query cost is high if the central station is far away.</p>
    <p>Flood the region R, count # of targets.  Update cost ~ target movement distance.  Query cost ~ Area of R.</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
    <p>Use differential forms for tracking and answering range queries of mobile targets.  Decentralized.  Update cost ~ target movement distance  Query cost ~ Perimeter of R  Robust to node failures, link dynamics, mobility,</p>
    <p>coverage holes, sensing errors, location inaccuracies.</p>
  </div>
  <div class="page">
    <p>Using Range Queries for Target Tracking Find the yellow car?</p>
    <p>range contains the target</p>
    <p>queries 6</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Differential 1-form  Algorithms for computing 1-form  Network complications:</p>
    <p>Dynamics: node/edge failures  Sensing errors  Network coverage holes</p>
    <p>Simulations and comparisons</p>
  </div>
  <div class="page">
    <p>Differential 1-Form</p>
    <p>A function defined on edges of a planar graph  Integrating the edge weights on region boundary</p>
    <p>gives the total weight of the targets inside.</p>
    <p>up edge weights. 3. Target movement: change edge weight when a</p>
    <p>target crosses an edge</p>
  </div>
  <div class="page">
    <p>Definition: Differential 1-Form</p>
    <p>Planar graph G: a target stays within a face.  Maintain directed weights f on edges.</p>
    <p>For each face, summing up weights clockwise gives the total weights of targets inside:</p>
    <p>-1</p>
    <p>f(e)= w f(-e)= -w</p>
  </div>
  <div class="page">
    <p>Boundary Operator</p>
    <p>Formally, a boundary operator applies on a face and returns the sum of the boundary edges in clockwise directions.</p>
    <p>Extend f to a face.</p>
  </div>
  <div class="page">
    <p>Boundary Operator</p>
    <p>Boundary operator on a union of faces.</p>
    <p>[ ]= [ ]+[ ] = a b</p>
    <p>c</p>
    <p>+ -b</p>
    <p>=</p>
    <p>d</p>
    <p>e</p>
    <p>a</p>
    <p>c</p>
    <p>d</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Differential 1-Form for Range Queries</p>
    <p>Theorem: the total weights of targets inside a region R is the sum of edge weights of R.  R is simply a collection of faces, possibly</p>
    <p>disconnected.  Range query: walk along R in clockwise order</p>
    <p>and sum up edge weights.</p>
  </div>
  <div class="page">
    <p>Update 1-Form When Targets Move</p>
    <p>If a target crosses an edge e, subtract target weight from f(e).</p>
  </div>
  <div class="page">
    <p>Communication Cost</p>
    <p>Assuming sensors have constant density.</p>
    <p>Update cost = # edges crossed = O(distance moved)</p>
    <p>Query cost = # edges on R = O(perimeter of R)</p>
  </div>
  <div class="page">
    <p>Multiple Targets</p>
    <p>Counting range query only  Maintain a single 1-form for all targets</p>
    <p>Queries for identifiable targets  Maintain a 1-form for each target.</p>
    <p>Maintain 1-form for each identifiable family of targets.  E.g., all cabs, all police cars, etc.  # cabs in the neighborhood, find a nearby cab</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Differential 1-form  Algorithms for computing 1-form  Network complications:</p>
    <p>Dynamics: node/edge failures  Sensing inaccuracies  Network holes</p>
    <p>Simulations and comparisons</p>
  </div>
  <div class="page">
    <p>Extract a Planar Graph</p>
    <p>Extract a planar graph from connectivity graph  Location-based schemes</p>
    <p>e.g., [Gao, et al, 01] [Sarkar et al, 09]  Location-free schemes</p>
    <p>e.g., [Funke, Milosavljevic 07] [Zhang et. al, 08]  Virtual planar graph</p>
    <p>Only requirement: tell whether a target is within a face or not.</p>
  </div>
  <div class="page">
    <p>Initializing Differential 1-Form</p>
    <p>New targets coming into the network  Simply update f when a target comes in.</p>
    <p>For existing targets:  Imagine the target enters from the face of infinity</p>
    <p>along any path.</p>
    <p>w</p>
    <p>w</p>
    <p>w</p>
  </div>
  <div class="page">
    <p>Multiple Targets: Sweep the Network</p>
    <p>Find a spanning tree T of the dual graph G, rooted at the face of infinity.</p>
    <p>Aggregate the weight of edges on T.  Weight of an edge in the primal = weight of the dual edge.  Total communication cost for initialization =O(n)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Differential 1-form  Algorithms for initializing 1-form  Network complications:</p>
    <p>Dynamics: node/edge failures  Sensing inaccuracies  Network holes</p>
    <p>Simulations and comparisons</p>
  </div>
  <div class="page">
    <p>Robustness to Link or Node Failures</p>
    <p>A link failure or node failure in the interior or exterior of R does not affect the query result.</p>
  </div>
  <div class="page">
    <p>Robustness to Node Insertion</p>
    <p>Node insertion: refine the current face and give proper weights to the new edges.</p>
    <p>The weight of existing edges are not affected.</p>
  </div>
  <div class="page">
    <p>Robustness to Coverage Holes</p>
    <p>A target can be lost in the hole but range query results of a region enclosing or disjoint of the hole are not affected.</p>
  </div>
  <div class="page">
    <p>Ranges Cutting Through Holes or, geometric ranges not following graph edges</p>
    <p>Take the best inner and outer approximation.  Refine with detailed info from sensors near</p>
    <p>boundary</p>
  </div>
  <div class="page">
    <p>Robustness to Sensing Errors or Location Inaccuracies</p>
    <p>We are unsure of the precise target location but know the target is within a range.</p>
    <p>Any range query fully enclosing or disjoint with the target feasible location region gives correct results.</p>
  </div>
  <div class="page">
    <p>Tracking with Mobile Sensors</p>
    <p>Sensors can move.  Maintain the planar graph.</p>
    <p>e.g., [Karp Kung 2001] [Gao, et al, 01]  When a target crosses an edge, update the 1-form.</p>
  </div>
  <div class="page">
    <p>Range Query of Continuous Data Fields</p>
    <p>Sensors monitor a temperature field.  Treat each sensor reading as a target with</p>
    <p>certain weight.  Apply the same scheme.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Differential 1-form  Algorithms for initializing 1-form  Network complications:</p>
    <p>Dynamics: node/edge failures  Sensing inaccuracies  Network holes</p>
    <p>Simulations and comparisons  Compare with location services  Robustness to link failures and sensing errors</p>
  </div>
  <div class="page">
    <p>Comparison with Location Services</p>
    <p>LLS [Abraham etal 2004]  Track a mobile target  Distributed hash table with hierarchical partitions</p>
    <p>Tracked by one (hashed) location server at each square containing it at each level.</p>
    <p>Query goes to the (hashed) location server at each square containing the query node.</p>
    <p>Query cost : O(d)</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Location Services</p>
    <p>LLS: lazy updates  A target does not trigger updates unless it moves</p>
    <p>outside the 9 squares.  The cost is O(d).  The distance travelled is (d).  Do this for each level</p>
    <p>Total update cost: O(dlogd) amortized, where d is the movement distance.</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Differential Forms v.s. LLS Differential form  Designed for range</p>
    <p>queries  Use recursive search</p>
    <p>for tracking query</p>
    <p>LLS  Designed for tracking</p>
    <p>query  Use recursive search</p>
    <p>for range query --query maximum quads within R.</p>
  </div>
  <div class="page">
    <p>Differential Forms v.s. LLS</p>
    <p>Range query cost Differential forms &lt;&lt; LLS</p>
    <p>Query individual targets Differential forms ~ 2  LLS</p>
    <p>Update cost Differential forms &lt;&lt; LLS</p>
    <p>O(d) v.s. O(d log d) 32</p>
  </div>
  <div class="page">
    <p>Update Costs</p>
    <p>The target moves one unit randomly per time unit --- discrete Brownian motion.</p>
    <p>LLS cost is amortized, some moves are expensive.</p>
    <p>Average costs Max costs</p>
  </div>
  <div class="page">
    <p>Range Queries Costs</p>
    <p>Ranges: random rectangles  Caveats: for LLS we use the same hierarchy for</p>
    <p>all targets --- which saves query cost.</p>
    <p>Average costs Max costs</p>
  </div>
  <div class="page">
    <p>Tracking Query Costs</p>
    <p>Query for individual targets  The expanding and refinement steps makes</p>
    <p>differential forms more costly.</p>
    <p>Average costs Max costs</p>
  </div>
  <div class="page">
    <p>Target Detection Errors</p>
    <p>Fail to detect a target crossing an edge  Prob p: failure rate</p>
    <p>Target location error  LR: max distance of estimated loc from true loc</p>
    <p>Ranges: random axis-parallel rectangles  Relative error = error in counts/ # targets</p>
  </div>
  <div class="page">
    <p>Robustness to Crossing Errors</p>
  </div>
  <div class="page">
    <p>Robustness to Sensor Location Errors</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Differential form is a topological notion.  Location-free method</p>
    <p>Robust to network changes and sensing errors  Sub-sampling sensors to conserve power by</p>
    <p>allowing gracefully degradation of query results.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions and comments?</p>
  </div>
</Presentation>
