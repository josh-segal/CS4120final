<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Q: Exploit Hardening Made Easy</p>
    <p>Edward J. Schwartz, Thanassis Avgerinos, and David Brumley</p>
    <p>Carnegie Mellon University</p>
  </div>
  <div class="page">
    <p>Downloading Exploits</p>
    <p>Windows 7 Evil Ed</p>
    <p>I found a control flow</p>
    <p>hijack exploit online!</p>
    <p>Exploit</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Downloading Exploits</p>
    <p>Windows 7 Evil Ed</p>
    <p>Why didnt the exploit</p>
    <p>work?</p>
  </div>
  <div class="page">
    <p>Causes of Broken Exploits</p>
  </div>
  <div class="page">
    <p>OS Defenses</p>
    <p>Modern OS defenses are designed to make exploiting difficult  ASLR: Address Space Layout</p>
    <p>Randomization</p>
    <p>DEP: Data Execution Prevention</p>
    <p>Do not guarantee control flow integrity</p>
    <p>How difficult?</p>
  </div>
  <div class="page">
    <p>Exploit hardening: Modifying exploits to bypass</p>
    <p>defenses</p>
  </div>
  <div class="page">
    <p>Overview  Background: Defenses and Return Oriented</p>
    <p>Programming (ROP)</p>
    <p>Q: ROP + Hardening</p>
    <p>Automatic ROP</p>
    <p>Automatic Hardening</p>
    <p>Evaluation</p>
    <p>Limitations</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Simple Exploit</p>
    <p>Computation</p>
    <p>Shellcode</p>
    <p>Exploit</p>
    <p>Control</p>
    <p>Pointer Padding</p>
  </div>
  <div class="page">
    <p>Data Execution Prevention (DEP)</p>
    <p>Shellcode</p>
    <p>Exploit</p>
    <p>Pointer Padding</p>
    <p>DEP: Buffers cannot be writable and executable</p>
    <p>User input is non-executable</p>
    <p>Crash</p>
  </div>
  <div class="page">
    <p>Bypassing DEP</p>
    <p>Goal: Specify exploit computation even when DEP is enabled</p>
    <p>Return Oriented Programming [S07]</p>
    <p>Use existing instructions from program in special order to encode computation</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming</p>
    <p>Example: How can we write to memory without shellcode?</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming</p>
    <p>addr1 pop %eax</p>
    <p>ret</p>
    <p>addr2 pop %ebx</p>
    <p>ret</p>
    <p>addr3 movl %eax, (%ebx)</p>
    <p>ret</p>
    <p>Exploit nextaddr</p>
    <p>addr3 address addr2</p>
    <p>eax ebx</p>
    <p>stack value</p>
    <p>Gadgets</p>
  </div>
  <div class="page">
    <p>Address Space Layout Randomization (ASLR)</p>
    <p>ASLR disabled Exploit Gadgets</p>
    <p>Gadgets Exploit</p>
    <p>Crash</p>
    <p>ASLR enabled</p>
    <p>ASLR: Addresses are unpredictable</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming + ASLR</p>
    <p>Bad news: Randomized code cant be used for ROP</p>
    <p>Good news: ASLR implementations leave small amounts of code unrandomized</p>
    <p>Evil Ed</p>
  </div>
  <div class="page">
    <p>ASLR in Linux (Example)</p>
    <p>Randomized</p>
    <p>Stack</p>
    <p>Heap</p>
    <p>Unrandomized</p>
    <p>Executable</p>
    <p>Program Image</p>
    <p>Libc</p>
  </div>
  <div class="page">
    <p>Consequences</p>
    <p>Challenge: Program image is often the only unrandomized code</p>
    <p>Small</p>
    <p>Program-specific</p>
    <p>Prior work on ROP assumes unrandomized large code bases; cant simply reuse</p>
    <p>We developed new automated ROP techniques for targeting the program image</p>
  </div>
  <div class="page">
    <p>Overview  Background: Defenses and Return Oriented</p>
    <p>Programming (ROP)</p>
    <p>Q: ROP + Hardening</p>
    <p>Automatic ROP</p>
    <p>Automatic Hardening</p>
    <p>Evaluation</p>
    <p>Limitations</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Automatic ROP Overview</p>
    <p>Source P</p>
    <p>Computation</p>
    <p>Instructions from P</p>
  </div>
  <div class="page">
    <p>ROP Overview</p>
    <p>Source P</p>
    <p>Computation Arrangement</p>
    <p>Discovery</p>
    <p>Assignment</p>
  </div>
  <div class="page">
    <p>Gadget Discovery</p>
    <p>Gadget Discovery: Does instruction sequence do something we can use for our computation?</p>
    <p>Fast randomized test for every program location (thousands or millions)</p>
    <p>Source P sbb %eax, %eax; neg %eax; ret</p>
  </div>
  <div class="page">
    <p>Randomized Testing</p>
    <p>sbb %eax, %eax; neg %eax; ret</p>
    <p>EAX 0x0298a7bc</p>
    <p>CF 0x1</p>
    <p>ESP 0x81e4f104</p>
    <p>EAX 0x1</p>
    <p>ESP 0x81e4f108</p>
    <p>EBX 0x0298a7bc</p>
    <p>OutReg &lt;- InReg</p>
    <p>Semantic Definition For Move</p>
    <p>B e</p>
    <p>fo re</p>
    <p>A</p>
    <p>ft e</p>
    <p>r</p>
    <p>If 10 random runs satisfy a semantic definition, then Q probably found a</p>
    <p>gadget of that type</p>
  </div>
  <div class="page">
    <p>Qs Gadget Types</p>
    <p>Gadget Type Semantic Definition Real World Example</p>
    <p>MoveRegG Out &lt;- In xchg %eax, %ebp; ret</p>
    <p>LoadConstG Out &lt;- Constant pop %ebp; ret</p>
    <p>ArithmeticG Out &lt;- In1 + In2 add %edx, %eax; ret</p>
    <p>LoadMemG Out &lt;- M[Addr + Offset] movl 0x60(%eax), %eax; ret</p>
    <p>StoreMemG M[Addr + Offset] &lt;- In mov %dl, 0x13(%eax); ret</p>
    <p>ArithmeticLoadG Out +&lt;- M[Addr + Offset] add 0x1376dbe4(%ebx), %ecx; (); ret</p>
    <p>ArithmeticStoreG M[Addr + Offset] +&lt;- In add %al, 0x5de474c0(%ebp); ret</p>
  </div>
  <div class="page">
    <p>Qs Gadget Types</p>
    <p>Gadget Type Semantic Definition Real World Example</p>
    <p>MoveRegG Out &lt;- In xchg %eax, %ebp; ret</p>
    <p>LoadConstG Out &lt;- Constant pop %ebp; ret</p>
    <p>ArithmeticG Out &lt;- In1 + In2 add %edx, %eax; ret</p>
    <p>LoadMemG Out &lt;- M[Addr + Offset] movl 0x60(%eax), %eax; ret</p>
    <p>StoreMemG M[Addr + Offset] &lt;- In mov %dl, 0x13(%eax); ret</p>
    <p>ArithmeticLoadG Out +&lt;- M[Addr + Offset] add 0x1376dbe4(%ebx), %ecx; (); ret</p>
    <p>ArithmeticStoreG M[Addr + Offset] +&lt;- In add %al, 0x5de474c0(%ebp); ret</p>
  </div>
  <div class="page">
    <p>Qs Gadget Types</p>
    <p>Gadget Type Semantic Definition Real World Example</p>
    <p>MoveRegG Out &lt;- In xchg %eax, %ebp; ret</p>
    <p>LoadConstG Out &lt;- Constant pop %ebp; ret</p>
    <p>ArithmeticG Out &lt;- In1 + In2 add %edx, %eax; ret</p>
    <p>LoadMemG Out &lt;- M[Addr + Offset] movl 0x60(%eax), %eax; ret</p>
    <p>StoreMemG M[Addr + Offset] &lt;- In mov %dl, 0x13(%eax); ret</p>
    <p>ArithmeticLoadG Out +&lt;- M[Addr + Offset] add 0x1376dbe4(%ebx), %ecx; (); ret</p>
    <p>ArithmeticStoreG M[Addr + Offset] +&lt;- In add %al, 0x5de474c0(%ebp); ret</p>
  </div>
  <div class="page">
    <p>Randomized Testing</p>
    <p>Randomized testing tells us we likely found a gadget</p>
    <p>Fast; filters out many candidates</p>
    <p>Enables more expensive second stage</p>
    <p>Second stage: SMT-based gadget discovery</p>
    <p>Gadget discovery is program verification</p>
  </div>
  <div class="page">
    <p>SMT-Based Gadget Discovery</p>
    <p>sbb %eax, %eax neg %eax; ret</p>
    <p>EAX &lt;- CF Weakest</p>
    <p>Precondition F</p>
    <p>F SMT Validity</p>
    <p>Check</p>
    <p>Valid (Gadget) Invalid (not</p>
    <p>Gadget)</p>
    <p>[D76]</p>
  </div>
  <div class="page">
    <p>SMT-Based Gadget Discovery</p>
    <p>Q is better at finding gadgets than I am!</p>
    <p>imul $1, %eax, %ebx ret</p>
    <p>Move %eax to %ebx</p>
    <p>lea (%ebx,%ecx,1), %eax ret</p>
    <p>Store %ebx+%ecx in %eax</p>
    <p>sbb %eax, %eax; neg %eax ret</p>
    <p>Move carry flag to %eax</p>
  </div>
  <div class="page">
    <p>ROP Overview</p>
    <p>Source P</p>
    <p>Computation Arrangement</p>
    <p>Discovery</p>
    <p>Assignment</p>
  </div>
  <div class="page">
    <p>Gadget Arrangement</p>
    <p>Gadget Arrangement: How can gadget types be combined to implement a computation?</p>
    <p>Alternate view: Compile user computation for gadget type architecture</p>
    <p>Example: M[0xcafecafe] := 0xdeadbeef</p>
  </div>
  <div class="page">
    <p>Arrangement: Storing to Memory</p>
    <p>StoreMem, u32</p>
    <p>LoadConst deadbeef</p>
    <p>LoadConst cafecafe</p>
    <p>T1 T2 T3</p>
    <p>Value</p>
    <p>Address</p>
  </div>
  <div class="page">
    <p>Gadget Arrangement</p>
    <p>How can we write to memory without StoreMem?</p>
  </div>
  <div class="page">
    <p>Arrangement: Storing to Memory</p>
    <p>ArithmeticStore, u32, Bitwise And</p>
    <p>LoadConst 0</p>
    <p>LoadConst cafecafe</p>
    <p>T1 T2 T3</p>
    <p>Value</p>
    <p>Address</p>
    <p>Writes zero to M[cafecafe]</p>
  </div>
  <div class="page">
    <p>Arrangement: Storing to Memory</p>
    <p>ArithmeticStore, u32, Plus</p>
    <p>LoadConst deadbeef</p>
    <p>LoadConst cafecafe</p>
    <p>T1 T2 T3</p>
    <p>Value</p>
    <p>Address</p>
    <p>Adds deadbeef to M[cafecafe].</p>
  </div>
  <div class="page">
    <p>Gadget Arrangement</p>
    <p>Gadgets types are often unavailable  Synthesize alternatives on the fly</p>
    <p>Flexible arrangement rules are necessary for small code bases</p>
  </div>
  <div class="page">
    <p>ROP Overview</p>
    <p>Source P</p>
    <p>Computation Arrangement</p>
    <p>Discovery</p>
    <p>Assignment</p>
  </div>
  <div class="page">
    <p>Assignment</p>
    <p>Gadget Assignment: Assign concrete gadgets found in source program to arrangements</p>
    <p>Assignments must be compatible</p>
  </div>
  <div class="page">
    <p>Assignment: Register Mismatch</p>
    <p>StoreMem, u32</p>
    <p>LoadConst deadbeef</p>
    <p>LoadConst cafecafe</p>
    <p>pop %eax ret</p>
    <p>pop %ebx ret</p>
    <p>mov %eax, (%ecx) ret</p>
    <p>CONFLICT %ebx and %ecx</p>
    <p>mismatch</p>
  </div>
  <div class="page">
    <p>Gadget Assignment</p>
    <p>Need to search over</p>
    <p>Gadgets</p>
    <p>Schedules</p>
    <p>We developed dynamic programming approach to find assignment</p>
    <p>Easy to print payload bytes with assignment</p>
  </div>
  <div class="page">
    <p>Overview  Background: Defenses and Return Oriented</p>
    <p>Programming (ROP)</p>
    <p>Q: ROP + Hardening</p>
    <p>Automatic ROP</p>
    <p>Automatic Hardening</p>
    <p>Evaluation</p>
    <p>Limitations</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Exploit Hardening</p>
    <p>Old Exploit (stopped by DEP+ASLR)</p>
    <p>ROP Payload</p>
    <p>Hardened Exploit</p>
    <p>(bypasses DEP+ASLR)</p>
  </div>
  <div class="page">
    <p>Trace-based Analysis</p>
    <p>Record P on the old exploit</p>
    <p>Branch 2</p>
    <p>Branch 3</p>
    <p>Branch 1</p>
    <p>Stop at vulnerability condition</p>
  </div>
  <div class="page">
    <p>Reasoning about Executions</p>
    <p>Symbolic Execution</p>
    <p>Logical Formula For All Inputs</p>
    <p>On Path</p>
    <p>[SAB10]</p>
  </div>
  <div class="page">
    <p>Exploit Constraints</p>
    <p>Path Exploit</p>
  </div>
  <div class="page">
    <p>Exploit Constraints</p>
    <p>Exploit Gadgets</p>
    <p>M[ESP] = &amp;gadget1 M[ESP+off1] = &amp;gadget2 M[ESP+off2] = &amp;gadget3</p>
    <p>How do we ensure the ROP payload gets in the exploit?</p>
    <p>Exploit Constraints SMT Exploit</p>
    <p>Path Constraints</p>
  </div>
  <div class="page">
    <p>Demo!</p>
  </div>
  <div class="page">
    <p>Overview  Background: Defenses and Return Oriented</p>
    <p>Programming (ROP)</p>
    <p>Q: ROP + Hardening</p>
    <p>Automatic ROP</p>
    <p>Automatic Hardening</p>
    <p>Evaluation</p>
    <p>Limitations</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation Questions</p>
  </div>
  <div class="page">
    <p>Real Exploits</p>
    <p>Q was able to automatically harden nine exploits downloaded from exploit-db.com</p>
    <p>Name Total Time OS</p>
    <p>Free CD to MP3 Converter 130s Windows 7</p>
    <p>Fatplayer 133s Windows 7</p>
    <p>A-PDF Converter 378s Windows 7</p>
    <p>A-PDF Converter (SEH exploit) 357s Windows 7</p>
    <p>MP3 CD Converter Pro 158s Windows 7</p>
    <p>rsync 65s Linux</p>
    <p>opendchub 225s Linux</p>
    <p>gv 237s Linux</p>
    <p>Proftpd 44s Linux</p>
  </div>
  <div class="page">
    <p>ROP Probability</p>
    <p>Given program size, what is the probability Q can create a payload?  Measure over all programs in /usr/bin</p>
    <p>Depends on target computation</p>
    <p>Call functions statically or dynamically linked by the program (blue on next slide)</p>
    <p>Call any function in libc (red; harder)  system, execv, connect, mprotect,</p>
  </div>
  <div class="page">
    <p>ROP Probability</p>
    <p>P ro</p>
    <p>b a</p>
    <p>b il</p>
    <p>it y</p>
    <p>t h</p>
    <p>a t</p>
    <p>a tt</p>
    <p>a ck</p>
    <p>w o</p>
    <p>rk s Call linked functions in 80%</p>
    <p>of programs &gt;= true (20KB)</p>
    <p>Call libc functions in 80% of programs &gt;= nslookup (100KB)</p>
    <p>Program Size (bytes)</p>
  </div>
  <div class="page">
    <p>Overview  Background: Defenses and Return Oriented</p>
    <p>Programming (ROP)</p>
    <p>Q: ROP + Hardening</p>
    <p>Automatic ROP</p>
    <p>Automatic Hardening</p>
    <p>Evaluation</p>
    <p>Limitations</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Single path (trace-based) analysis</p>
    <p>restrictive; prevents finding exploits</p>
    <p>Qs gadgets types are not Turing-complete</p>
    <p>Calling system(/bin/sh) or mprotect() usually enough</p>
    <p>Comparison with related work</p>
    <p>Q cannot find conditional gadgets</p>
    <p>Potential automation of interesting work on ROP without Returns [CDSSW10]</p>
  </div>
  <div class="page">
    <p>Overview  Background: Defenses and Return Oriented</p>
    <p>Programming (ROP)</p>
    <p>Q: ROP + Hardening</p>
    <p>Automatic ROP</p>
    <p>Automatic Hardening</p>
    <p>Evaluation</p>
    <p>Limitations</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We built Q, a system that automatically hardens exploits to bypass defenses</p>
    <p>Challenge: Reusing small amounts of code</p>
    <p>Q automatically hardened nine real exploits found in the wild against latest OS defenses</p>
    <p>Takeaway: Unrandomized code is dangerous</p>
    <p>20KB makes DEP+ASLR ineffective</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Questions?</p>
    <p>Check out some of the gadgets Q can find at http://plaid.cylab.cmu.edu:8080/~ed/gadgets</p>
    <p>Edward J. Schwartz</p>
    <p>edmcman@cmu.edu</p>
    <p>http://www.ece.cmu.edu/~ejschwar</p>
  </div>
  <div class="page">
    <p>Sizes of Gadget Sources</p>
    <p>File size (bytes)</p>
    <p>R a</p>
    <p>ti o</p>
  </div>
  <div class="page">
    <p>Types of Gadgets</p>
    <p>Number of StoreMem</p>
    <p>Number of ArithStore</p>
  </div>
</Presentation>
