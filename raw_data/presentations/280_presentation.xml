<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Large-scale Incremental Data</p>
    <p>Processing with Change Propagation</p>
    <p>Pramod Bhatotia</p>
    <p>Alexander Wieder, Istemi Ekin Akkus, Rodrigo Rodrigues, Umut A. Acar</p>
    <p>MPI-SWS, Germany</p>
    <p>USENIX HotCloud 2011</p>
  </div>
  <div class="page">
    <p>Large-scale Data Processing</p>
    <p>Need to repeatedly process evolving data-sets  For Web search PageRank is re-computed for every crawl</p>
    <p>Online data-sets evolve slowly  Successive Yahoo! Web crawls change by 0.1% to 10%</p>
    <p>Need for incremental computations  Instead of re-computing from scratch</p>
  </div>
  <div class="page">
    <p>Incremental Data Processing</p>
    <p>Systems for incremental processing  Google Percolator [OSDI10]  Yahoo! CBP [SoCC10]</p>
    <p>Drawbacks of these systems  Adopt a new programming model  Require implementation of dynamic algorithms</p>
  </div>
  <div class="page">
    <p>Incremental Data Processing</p>
    <p>Systems for incremental processing  Google Percolator [OSDI10]  Yahoo! CBP [SoCC10]</p>
    <p>Drawbacks of these systems  Adopt a new programming model</p>
    <p>Require implementation of dynamic algorithms</p>
  </div>
  <div class="page">
    <p>Example of a Static Algorithm</p>
    <p>Compute the maximum element in a list</p>
    <p>Scan the list and compute max in O(n)</p>
  </div>
  <div class="page">
    <p>Static Algorithm with Input Change</p>
    <p>Modify the input and find the max</p>
    <p>Static algorithms re-computes from scratch: O(n)</p>
  </div>
  <div class="page">
    <p>Example of a Dynamic Algorithm</p>
    <p>maintain maximum heap</p>
  </div>
  <div class="page">
    <p>Example of a Dynamic Algorithm</p>
    <p>Incremental updates in O(logn) Asymptotically faster than the static algorithm</p>
  </div>
  <div class="page">
    <p>Example of a Dynamic Algorithm</p>
    <p>Incremental updates in O(logn) Asymptotically faster than the static algorithm</p>
  </div>
  <div class="page">
    <p>Static vs Dynamic</p>
    <p>Algorithm Simplicity Efficiency</p>
    <p>Linked list (Static)</p>
    <p>Easy O(n)</p>
    <p>Heap (Dynamic)</p>
    <p>Hard O(log n)</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Retain the simplicity of static algorithms  Achieve the efficiency of dynamic algorithms</p>
    <p>Can we meet these goals in distributed systems? This talk : MapReduce</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Take an unmodified MapReduce program  Automatically make it incremental</p>
    <p>Basic principle: Self-adjusting computations  Break computation into sub-computations  Memoize the results of sub-computations  Track dependencies between input and computation  Re-compute only the parts affected by changes</p>
  </div>
  <div class="page">
    <p>MapReduce with Change Propagation</p>
    <p>Changes propagate through dependence graph</p>
    <p>Read input</p>
    <p>Map tasks</p>
    <p>Reduce tasks</p>
    <p>Write output</p>
  </div>
  <div class="page">
    <p>MapReduce with Change Propagation</p>
    <p>Changes propagate through dependence graph</p>
    <p>Read input</p>
    <p>Map tasks</p>
    <p>Reduce tasks</p>
    <p>Write output</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>How to efficiently detect insertion/deletion ?</p>
    <p>How to minimize data movement ?</p>
    <p>How to perform fine-grained updates ?</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>How to efficiently detect insertion/deletion ?  How to minimize data movement ?  How to perform fine-grained updates ?</p>
  </div>
  <div class="page">
    <p>How to control granularity of Reduce ?</p>
    <p>Read input</p>
    <p>Map tasks</p>
    <p>Reduce tasks</p>
    <p>Write output</p>
  </div>
  <div class="page">
    <p>How to control granularity of Reduce ?</p>
    <p>Read input</p>
    <p>Map tasks</p>
    <p>Reduce tasks</p>
    <p>Write output</p>
  </div>
  <div class="page">
    <p>Controlling Reduce Granularity</p>
    <p>Leverage Combiners: pre-processing of Reduce  Co-located with Map task for local reduction</p>
    <p>Use them to break up Reduce work</p>
    <p>Reduce task</p>
    <p>Combiners</p>
    <p>Combiners</p>
  </div>
  <div class="page">
    <p>Contraction Phase: Tree of Combiners</p>
    <p>Read input</p>
    <p>Map tasks</p>
    <p>Write output</p>
    <p>Reduce tasks</p>
  </div>
  <div class="page">
    <p>Contraction Phase: Tree of Combiners</p>
    <p>Read input</p>
    <p>Map tasks</p>
    <p>Contraction</p>
    <p>Write output</p>
    <p>Reduce tasks</p>
  </div>
  <div class="page">
    <p>Evaluation: Proof-of-concept  Single-node MapReduce with change propagation  Computing maximum for a list with single modification</p>
    <p>Runtime ! &quot;!</p>
    <p>Run-time for computing from scratch Run-time for incremental computation</p>
    <p>SpeedUp =</p>
    <p>Sp ee du</p>
    <p>p</p>
    <p>Number of elements in list</p>
    <p>Asymptotic gains with increase in size of data-set</p>
  </div>
  <div class="page">
    <p>Summary Goals:  Retain the simplicity of static algorithms  Achieve the efficiency of dynamic algorithms</p>
    <p>This talk:  How to achieve these goals in MapReduce</p>
    <p>Future:  Apply principles to broad class of data processing systems</p>
  </div>
</Presentation>
