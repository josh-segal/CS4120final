<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Curvature-Based Computation of Antipodal Grasps</p>
    <p>Yan-Bin Jia</p>
    <p>Department of Computer Science Iowa State University Ames, IA 50011-1040</p>
  </div>
  <div class="page">
    <p>Antipodal Grasp</p>
  </div>
  <div class="page">
    <p>Antipodal Points</p>
    <p>Two points s* and t* on  are antipodal if their inward normals are collinear and pointing at each other.</p>
    <p>Curve : closed, simple, and twice continuously differentiable.</p>
    <p>N(s*) + N(t*) = 0 N(s*)  ((t*)  (s*)) = 0 N(s*)  ((t*)  (s*)) &gt; 0</p>
    <p>t*s* N(s*) N(t*)</p>
  </div>
  <div class="page">
    <p>Previous Work Antipodal Grasp &amp; Points</p>
    <p>Hong et al. 1990; Chen &amp; Burdick 1992; Ponce et al. 1993; Blake &amp; Taylor 1993</p>
    <p>Curve Processing Goodman 1991; Manocha &amp; Canny 1992; Sakai 1999; Jia 2001</p>
    <p>Computational Geometry Preparata &amp; Hong 1977; Yao 1982; Chazelle et al. 1993; Matousek &amp; Schwarzkopf 1996; Ramos 1997; Bespamyatnikh 1998</p>
    <p>Grasping &amp; Fixturing Salisbury &amp; Roth 1983; Mishra et al. 1987; Nguyen 1988;</p>
    <p>Markenscoff et al. 1992; Trinkle 1992; Brost &amp; Goldberg 1994; Bicchi 1995</p>
  </div>
  <div class="page">
    <p>Problems with Existing Methods</p>
    <p>geometric formulation  nonlinear programming + heuristics</p>
    <p>Incomplete</p>
    <p>(local methods) do not guarantee to find any if exist.</p>
    <p>do not guarantee to find all that exist.</p>
    <p>Inefficient</p>
    <p>many guesses of antipodal positions are needed.</p>
    <p>Why not exploit geometry (global &amp; differential)?</p>
  </div>
  <div class="page">
    <p>Antipodal Angle</p>
    <p>s</p>
    <p>N(s)</p>
    <p>t</p>
    <p>N(t ) r(s)</p>
    <p>s and t are antipodal if and only if (s) = 0.</p>
    <p>: antipodal angle</p>
    <p>simple antipodal points s* and t* if (s*) = 0 but (s*)  0.</p>
    <p>s*</p>
    <p>t*</p>
    <p>N(s) + N(t) = 0</p>
    <p>In the neighborhoods of antipodal points define opposite points by</p>
  </div>
  <div class="page">
    <p>Higher Order Antipodal Points</p>
    <p>center of curvature</p>
    <p>osculating circle</p>
    <p>curvature at s*</p>
    <p>kth order if (s*) =  =  (s*) = 0 but  (s*)  0. (k1) (k)</p>
    <p>We are primarily interested in finding simple antipodal points.</p>
    <p>radius of curvature at s*</p>
    <p>s*</p>
    <p>t* s*</p>
    <p>t*</p>
  </div>
  <div class="page">
    <p>The Case of Two Segments</p>
    <p>Assumptions for clarity (removable):</p>
    <p>i) No intersection</p>
    <p>ii) Curvature everywhere positive (convex) or everywhere negative (concave)</p>
    <p>iv) Total curvatures  [, ] (and with equal absolute value)</p>
    <p>T</p>
    <p>S T(s )a</p>
    <p>T(s )b</p>
    <p>T(s )b</p>
    <p>T(s )a</p>
    <p>total curvature</p>
    <p>iii) Opposite normals at corresponding endpoints (which are not antipodal)</p>
    <p>s</p>
    <p>t</p>
    <p>v) Normals at every pair of opposite points (s, t) pointing towards each other</p>
    <p>sb</p>
    <p>t a bt</p>
    <p>sa</p>
  </div>
  <div class="page">
    <p>Concave  Concave  antipodal angle increases monotonically as s increases.</p>
    <p>no antipodal points otherwise.</p>
    <p>t a</p>
    <p>S</p>
    <p>T</p>
    <p>sa sb</p>
    <p>bt</p>
    <p>(s )a(s )b</p>
    <p>unique pair of antipodal points if (s ) &lt; 0 and (s ) &gt; 0.a b</p>
    <p>Bisection over [s , s ]. a b s*</p>
    <p>t*</p>
  </div>
  <div class="page">
    <p>Convex  Convex : Case 1 Case 1: (s ) and (s ) have the same sign.a b</p>
    <p>If no antipodal points exist, the procedure will terminate at the other endpoints.</p>
    <p>If antipodal points exist, the procedure will converge to the closest pair at linear rate.</p>
    <p>t*</p>
    <p>s*</p>
    <p>as</p>
    <p>ta</p>
    <p>s =0</p>
    <p>t =0</p>
    <p>t2t1</p>
    <p>s12 s</p>
    <p>Marching</p>
    <p>monotonic sequences s ,s ,</p>
    <p>t , t ,</p>
    <p>defined by</p>
    <p>N(s )  r(s ) = 0 i+1 i</p>
    <p>N(t ) =  N(s )i+1 i+1</p>
    <p>as</p>
    <p>tb</p>
  </div>
  <div class="page">
    <p>Geometry at Antipodal Points (1)</p>
    <p>as</p>
    <p>ta 1/(s*) + 1/(t*) &lt; ||r(s*)||</p>
    <p>curvatures at the antipodal points (s*), (t*) &gt; 0.</p>
    <p>osculating circle</p>
    <p>center of curvature</p>
    <p>r(s*)</p>
    <p>Geometrically, the two centers of curvature do not cross each other on r(s*).</p>
    <p>tb</p>
    <p>bs</p>
    <p>t*</p>
    <p>s*</p>
  </div>
  <div class="page">
    <p>Convex  Convex : Case 2</p>
    <p>Case 2: (s ) and (s ) have different signs.a b</p>
    <p>Bisection finds the first pair.</p>
    <p>or</p>
    <p>s*</p>
    <p>t*</p>
    <p>At least one pair of antipodal points exists.</p>
  </div>
  <div class="page">
    <p>Recursively Finding All pairs</p>
    <p>bisection</p>
    <p>march</p>
    <p>t*1s*1</p>
    <p>t*2</p>
    <p>Case 1 Case 1</p>
    <p>Case 2 (bisection)</p>
    <p>Recursion tree:</p>
    <p>Case 1 (march) s* , t* 1 1</p>
    <p>s* , t* 2 2</p>
  </div>
  <div class="page">
    <p>Convex  Concave Segments</p>
    <p>Suppose segment S is convex and segment T is concave.</p>
    <p>t a bt</p>
    <p>sb sa S</p>
    <p>T</p>
    <p>t a bt</p>
    <p>sb</p>
    <p>sa</p>
    <p>ray of N(t )a</p>
    <p>No antipodal points exist if</p>
    <p>ray of N(t )b</p>
    <p>a</p>
    <p>b</p>
    <p>neither the ray of N(t ) nor the ray of N(t ) intersects segment S.</p>
  </div>
  <div class="page">
    <p>Marching</p>
    <p>- the ray of N(t ) or N(t ) intersects segment S - the two endpoint antipodal angles have the same sign.</p>
    <p>a b</p>
    <p>s =0</p>
    <p>t = 0</p>
    <p>s1</p>
    <p>t2</p>
    <p>t* s*</p>
    <p>tb bs</p>
    <p>t1</p>
    <p>When antipodal points exist, the procedure converges to the closest pair at linear rate.</p>
    <p>monotonic sequences: s ,s ,</p>
    <p>t , t ,  ta</p>
    <p>as</p>
    <p>If no antipodal points exist, the procedure will terminate at the other endpoints.</p>
  </div>
  <div class="page">
    <p>Geometry at Antipodal Points (2)</p>
    <p>Bisection is used when the antipodal angles have different signs at the two endpoints of segment S.</p>
    <p>t* s*</p>
    <p>-1/(t*)</p>
    <p>where (s*) &gt; 0 and (t*) &lt; 0</p>
    <p>t* and its center of curvature lie between s* and its center of curvature.</p>
    <p>Interleave marching with bisection recursively to find all pairs of antipodal points on S and T.</p>
  </div>
  <div class="page">
    <p>Preprocessing  Inflection Points</p>
    <p>How to generate segment pairs that satisfy conditions i)-v)?</p>
    <p>Step 1 Compute all simple inflection points.</p>
    <p>Step 2 Split every segment whose total curvature  [, ].</p>
    <p>simple Inflection:</p>
    <p>= 0 but   0</p>
    <p>&gt; 0</p>
    <p>&lt; 0</p>
    <p>&lt; 0</p>
    <p>&gt; 0</p>
  </div>
  <div class="page">
    <p>Preprocessing  Common Tangents</p>
    <p>Step 4 Compute common tangent lines</p>
    <p>Step 3 Intersect normal cones</p>
    <p>bt</p>
    <p>sa sb</p>
    <p>t a</p>
    <p>(quadratic convergence)</p>
    <p>a pair of normals pointing away from each other</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>closed cubic spline (10 pairs)  = 3/(1+0.5 cos(3))</p>
    <p>limacon</p>
    <p>= 4 + 2.5 cos</p>
    <p>elliptic lemniscate</p>
    <p>= (6 cos  + 3 sin )2 2 2 2 1/2</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>New insights into differential geometry of antipodal points.</p>
    <p>Completeness  finding all antipodal points</p>
    <p>Interleaving marching with numerical bisection (based on local/differential geometry)</p>
    <p>Dissecting the curve into monotone segments (preprocessing of global geometry)</p>
    <p>Provable convergence rate (independent of parameterization)</p>
    <p>Efficiency  O(n + m) two-level calls of numerical primitives2</p>
    <p>#inflections #antipodals (about 300 iterations per call)</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Computation of special substructures on curves</p>
    <p>Extension of the scheme to finding antipodal points on 3-D surfaces</p>
    <p>Optimization over parameterized curves</p>
  </div>
</Presentation>
