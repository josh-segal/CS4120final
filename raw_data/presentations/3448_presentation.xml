<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Blueprint for Constructing Peer-to-Peer Systems Robust to</p>
    <p>Dynamic Worst-Case Joins and Leaves</p>
    <p>Fabian Kuhn, Microsoft Research, Silicon Valley</p>
    <p>Stefan Schmid, ETH Zurich</p>
    <p>Joest Smit, ETH Zurich</p>
    <p>Roger Wattenhofer, ETH Zurich</p>
    <p>Yale University, New Haven, CT, USA, June 2006</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 2</p>
    <p>Brief Intro to Peer-to-Peer Computing (1)</p>
    <p>P2P computing = power by accumulating distributed resources</p>
    <p>(CPU cycles, disk space, )</p>
    <p>vs</p>
    <p>Client / Server - Centralized (one machine) - Bottleneck - Single Point of Failure -</p>
    <p>Peer-to-Peer - Decentralized (all machines) - Scalable - Efficient -</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 3</p>
    <p>Brief Intro to Peer-to-Peer Computing (2)</p>
    <p>Examples:</p>
    <p>- computing power (Folding@Home, )</p>
    <p>- file sharing (eMule, Kangoo, )</p>
    <p>- internet telephony (Skype, )</p>
    <p>- media streaming (Swistry, )</p>
    <p>file sharing</p>
    <p>distributed computations</p>
    <p>Swistry (live media streaming)</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 4</p>
    <p>Churn (1)</p>
    <p>But: unlike server, peers are transient!  Machines under control of individual users</p>
    <p>E.g., just connecting to download one file</p>
    <p>Membership changes are called churn</p>
    <p>Successful P2P systems have to cope with churn</p>
    <p>(i.e., guarantee correctness, efficiency, etc.)!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 5</p>
    <p>Churn (2)</p>
    <p>Dynamic resources: A challenge in P2P computing!</p>
    <p>Churn characteristics:  Depends on application (Skype vs. eMule vs. )  But: There may be dozens of membership changes per second!</p>
    <p>Peers may crash without notice!</p>
    <p>How can peers collaborate in spite of churn?</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 6</p>
    <p>Churn (3)</p>
    <p>Churn is important, as it threatens advantages of P2P computing!</p>
    <p>a lot of churn</p>
    <p>We have to actively maintain P2P systems!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 7</p>
    <p>Our Paper</p>
    <p>Peer degree, network diameter,</p>
    <p>adversary non-stop attacks weakest part</p>
    <p>(system never fully repaired, but always fully functional)</p>
    <p>presents techniques to:</p>
    <p>-  build and provably maintain P2P systems with desirable properties</p>
    <p>-  in spite of ongoing worst-case membership changes.</p>
    <p>Unfortunately, only few P2P systems have been analyzed under churn!</p>
    <p>Our paper</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 8</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 9</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 10</p>
    <p>Model for Dynamics</p>
    <p>Churn = possibly concurrent membership changes, at any time!</p>
    <p>We assume worst-case perspective: Adversary ADV(J,L)  i.e., joins and leaves may take place at the weakest spot of the network</p>
    <p>Synchronous model: time divided into rounds (e.g., max round trip time)</p>
    <p>time</p>
    <p>ADV(J,L): In each round, at most J peers may joins</p>
    <p>and at most L peers leave (crash).</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 11</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 12</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 13</p>
    <p>Topology Maintenance</p>
    <p>An efficient P2P topology under churn:</p>
    <p>1 2</p>
    <p>Almost impossible to maintain the hypercube!  How does peer 1 know that it should replace peer 2?  How does it get there when there are concurrent joins and leaves?</p>
    <p>Is there a more robust topology but  with same small degree and diameter?</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 14</p>
    <p>Our Approach</p>
    <p>Simple idea: Simulate the topology!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 15</p>
    <p>General Recipe for Robust Topologies</p>
    <p>a. Permanently run a peer distribution algorithm</p>
    <p>which ensures that all vertices have roughly the same amount</p>
    <p>of peers (token distribution algorithm).</p>
    <p>b. Estimate the total number of peers in the system and change</p>
    <p>dimension of topology accordingly</p>
    <p>(information aggregation algorithm and scaling algorithm).</p>
    <p>Resulting structure has similar properties as original graph</p>
    <p>(e.g., connectivity, degree, ), but is also maintainable under churn!</p>
    <p>There is always at least one peer per node (but not too many either).</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 16</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 17</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 18</p>
    <p>The Pancake Graph (1)</p>
    <p>A robust system with degree and diameter O(log n / loglog n): the pancake graph  E.g., Papadimitriou &amp; Gates!</p>
    <p>Pancake of dimension d:  d! nodes represented by unique permutation {l1, , ld} of set {1,,d}</p>
    <p>Two nodes u and v are adjacent iff u is a prefix-inversion of v</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 19</p>
    <p>The Pancake Graph (2)</p>
    <p>Properties</p>
    <p>Node degree  (log n / loglog n)</p>
    <p>Diameter  (log n / loglog n)</p>
    <p>where n is the total number of nodes</p>
    <p>A factor loglog n better than hypercube!</p>
    <p>But: difficult graph (diameter unknown!)</p>
    <p>No other graph can have a smaller</p>
    <p>degree and a smaller diameter!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 20</p>
    <p>Contribution</p>
    <p>Using peer distribution and information aggregation algorithms</p>
    <p>on the simulated pancake topology, we can construct:</p>
    <p>a peer-to-peer system (distributed hash table) with</p>
    <p>Peer degree and lookup / network diameter in  (log n / loglog n)</p>
    <p>Robustness to ADV( (log n / loglog n),  (log n / loglog n))  No data is ever lost!</p>
    <p>Asymptotically optimal!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 21</p>
    <p>The Pancake System</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 22</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 23</p>
    <p>Basic Components</p>
    <p>Peer Distribution Algorithm  Balance peers between neighboring nodes</p>
    <p>One (pancake-) dimension after the other!</p>
    <p>Information Aggregation Algorithm  Exploit recursive structure of pancake  Aggregate sub-pancakes with increasing order</p>
    <p>Both happens concurrently to ongoing churn!</p>
    <p>If fast enough, pancake is maintained!</p>
    <p>Always at least one peer per node!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 24</p>
    <p>Internals (1)</p>
    <p>How are peers connected in the simulated topology?</p>
    <p>Idea:</p>
    <p>Clique Clique</p>
    <p>Matching</p>
    <p>Problem: - There are up to  ((log n / loglog n)2) many peers in each node - Clique would render peer degree too large!</p>
    <p>Inside node, peers have to form a grid!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 25</p>
    <p>Internals (2)</p>
    <p>Solution:</p>
    <p>Grid</p>
    <p>Matching</p>
    <p>Grid</p>
    <p>Each peer is connected to all peers which are either</p>
    <p>in the same row or column  Degree is OK now, and still robust enough to churn!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 26</p>
    <p>Internals (3)</p>
    <p>Distributed Hash Table: - Stores data at nodes - But on which peers of node of given ID?</p>
    <p>- On just one is bad in dynamic enviroment!</p>
    <p>All? - Possible! - But much data movement during peer distribution.</p>
    <p>Better idea:</p>
    <p>- Peers of a node fall into two categories: Protons and Electrons - Protons = core peers, store data, are seldom used during token distribution - Electrons = peripheral peers, do not store data, are used for balancing</p>
    <p>- Make sure that there are always enough protons (no data loss)!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 27</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 28</p>
    <p>Talk Outline</p>
    <p>A model for dynamics</p>
    <p>Overview of techniques</p>
    <p>Example: A robust system with degree and diameter O(log n / loglog n)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 29</p>
    <p>Conclusion</p>
    <p>Contribution: A scheme to maintain quality of a peer-to-peer system in spite of worst-case membership changes.  Ingredients: base graph, token distribution &amp; information aggregation algorithm</p>
    <p>Proofs possible!</p>
    <p>Simulated graph can have similar</p>
    <p>properties as base graph.  Degree, diameter, etc.</p>
    <p>May require some additional thinking, though! (e.g., grid)</p>
    <p>A peer-to-peer system with degree and diameter</p>
    <p>in O(log n/loglog n) which tolerates O(log n/loglog n)</p>
    <p>joins and leaves per round.  Better than often-used hypercube graph!</p>
    <p>But: difficult graph! (e.g., dimension change)</p>
    <p>Open questions  How to coordinate dynamic peers or resources: An exciting field of research!</p>
    <p>E.g.: Self-stabilization, dirty leaves, etc.</p>
  </div>
  <div class="page">
    <p>Stefan Schmid, ETH Zurich @ IWQoS 2006 30</p>
    <p>Questions and Feedback?</p>
    <p>Stefan Schmid Distributed Computing Group</p>
    <p>schmiste@ethz.ch</p>
    <p>http://dcg.ethz.ch/members/stefan.html</p>
    <p>Thank you for your attention!</p>
  </div>
</Presentation>
