<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PartEmu: Enabling Dynamic Analysis of Real-World</p>
    <p>TrustZone Software Using Emulation</p>
    <p>Lee Harrison, Hayawardh Vijayakumar, Michael Grace</p>
    <p>Samsung Knox, Samsung Research America</p>
    <p>Rohan Padhye, Koushik Sen</p>
    <p>EECS Department, University of California, Berkeley</p>
  </div>
  <div class="page">
    <p>The Hidden Software Stack: TrustZone</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
  </div>
  <div class="page">
    <p>The Hidden Software Stack: TrustZone</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Separate software stack  Trusted applications (TAs)</p>
    <p>TrustZone OS (TZOS)</p>
  </div>
  <div class="page">
    <p>The Hidden Software Stack: TrustZone</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE  Separate software stack</p>
    <p>Trusted applications (TAs)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>TEE/REE</p>
  </div>
  <div class="page">
    <p>The Hidden Software Stack: TrustZone</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
    <p>Separate software stack  Trusted applications (TAs)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>TEE/REE</p>
    <p>Basis for security: Has access to hardware keys</p>
  </div>
  <div class="page">
    <p>The Hidden Software Stack: TrustZone</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
    <p>Separate software stack  Trusted applications (TAs)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>TEE/REE</p>
    <p>Basis for security: Has access to hardware keys</p>
    <p>Access to TZ locked down: Only signed software can run</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic analysis of TZ is hard!</p>
    <p>Approach</p>
    <p>Results: What did we learn?</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic Analysis of TZ is Hard</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic Analysis of TZ is Hard</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
    <p>Dynamic analysis needs ability to monitor target</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic Analysis of TZ is Hard</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
    <p>Dynamic analysis needs ability to monitor target  Debugging  needs</p>
    <p>memory/registers</p>
    <p>Feedback-driven fuzz testing  needs list of basic blocks covered</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic Analysis of TZ is Hard</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
    <p>Dynamic analysis needs ability to monitor target  Debugging  needs</p>
    <p>memory/registers</p>
    <p>Feedback-driven fuzz testing  needs list of basic blocks covered</p>
    <p>However, cannot instrument TZ software or monitor TZ memory due to signing!</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic Analysis of TZ is Hard</p>
    <p>Android apps</p>
    <p>Android framework</p>
    <p>Android apps</p>
    <p>OS: Linux kernel</p>
    <p>Secure Monitor</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Trusted App (TA)</p>
    <p>TrustZone OS (TZOS)</p>
    <p>Secure World/TEE</p>
    <p>HW Crypto Keys</p>
    <p>Secure Peripherals</p>
    <p>Prior dynamic analysis approaches limited!  TA/TZOS binary reverse</p>
    <p>engineering</p>
    <p>Fuzz testing without feedback</p>
  </div>
  <div class="page">
    <p>Solution: Dynamic Analysis By Emulation</p>
    <p>We build an emulator that runs real-world TZOSes and TAs</p>
  </div>
  <div class="page">
    <p>Solution: Dynamic Analysis By Emulation</p>
    <p>We build an emulator that runs real-world TZOSes and TAs</p>
    <p>Emulation enables dynamic analysis  Allows introspection and monitoring of TZ execution</p>
  </div>
  <div class="page">
    <p>Solution: Dynamic Analysis By Emulation</p>
    <p>We build an emulator that runs real-world TZOSes and TAs</p>
    <p>Emulation enables dynamic analysis  Allows introspection and monitoring of TZ execution</p>
    <p>We support four widely-used real-world TZOSes:  Qualcomms QSEE  Trustonics Kinibi  Samsungs TEEGRIS  Linaros OP-TEE</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic analysis of TZ is hard!</p>
    <p>Approach: How did we run TZ in an emulator?</p>
    <p>Results: What did we learn?</p>
  </div>
  <div class="page">
    <p>Challenge: Large Number of Components</p>
  </div>
  <div class="page">
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Software</p>
    <p>Challenge: Large Number of Components</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Software</p>
    <p>Challenge: Large Number of Components</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>Challenge: Large Number of Components</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>Challenge: Large Number of Components</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>Traditional Approach: Emulate all HW</p>
    <p>Reuse Unmodified</p>
    <p>Software Components</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>Traditional Approach: Emulate all HW</p>
    <p>Reuse Unmodified</p>
    <p>Software Components</p>
    <p>Emulate All Hardware</p>
    <p>Components</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>Traditional Approach: Emulate all HW</p>
    <p>Reuse Unmodified</p>
    <p>Software Components</p>
    <p>Emulate All Hardware</p>
    <p>Components</p>
    <p>Impractical to emulate all hardware</p>
  </div>
  <div class="page">
    <p>Our Approach: Emulate Subset of HW and SW</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Study Component</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Study Component</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Study Component</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Tighty coupled, difficult to emulate</p>
    <p>dependency</p>
    <p>Study Component</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Tighty coupled, difficult to emulate</p>
    <p>dependency</p>
    <p>Study Component</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Boot ldr</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Loosely coupled, easy to emulate</p>
    <p>dependency</p>
    <p>Tighty coupled, difficult to emulate</p>
    <p>dependency</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Boot ldr</p>
    <p>Emulate Bootloader Using Stub</p>
    <p>Exclude Storage</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Boot ldr</p>
    <p>Emulate Bootloader Using Stub</p>
    <p>Exclude Storage</p>
  </div>
  <div class="page">
    <p>TrustZone OS</p>
    <p>Secure Monitor</p>
    <p>Linux OS TEE Driver</p>
    <p>Hypervisor</p>
    <p>Android FW</p>
    <p>Android Apps</p>
    <p>TEE Userspace</p>
    <p>Trusted Apps</p>
    <p>Touchscreen</p>
    <p>Camera</p>
    <p>GPS</p>
    <p>Fingerprint</p>
    <p>Storage Crypto HW</p>
    <p>TZASC/TZPC</p>
    <p>Systemon-Chip</p>
    <p>Our Approach: Emulate Subset of HW and SW</p>
    <p>Boot ldr</p>
    <p>Emulate Bootloader Using Stub</p>
    <p>Exclude Storage</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
    <p>Patterns to Emulate Hardware (MMIO Loads and Stores)</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
    <p>Patterns to Emulate Hardware (MMIO Loads and Stores)</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
    <p>Patterns to Emulate Hardware (MMIO Loads and Stores)</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
    <p>Patterns to Emulate Software APIs</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
    <p>Patterns to Emulate Software APIs</p>
  </div>
  <div class="page">
    <p>Emulation Effort Feasible Using Patterns</p>
    <p>Patterns to Emulate Software APIs</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>QEMU</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>QEMU</p>
    <p>HW Emulation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>QEMU</p>
    <p>HW Emulation</p>
    <p>AFL Fuzz Module</p>
    <p>Debug Module</p>
    <p>PartEmu Module</p>
    <p>API</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>QEMU</p>
    <p>HW Emulation</p>
    <p>AFL Fuzz Module</p>
    <p>Debug Module</p>
    <p>PartEmu Module</p>
    <p>API</p>
    <p>Guest</p>
    <p>SW Emulation TAs</p>
    <p>TZOS</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>QEMU</p>
    <p>HW Emulation</p>
    <p>AFL Fuzz Module</p>
    <p>Debug Module</p>
    <p>PartEmu Module</p>
    <p>API</p>
    <p>PartEmu Run Management API</p>
    <p>Guest</p>
    <p>SW Emulation</p>
    <p>Driver</p>
    <p>TAs</p>
    <p>TZOS</p>
  </div>
  <div class="page">
    <p>Problem: Dynamic analysis of TZ is hard!</p>
    <p>Approach: How did we run TZ in an emulator?</p>
    <p>Results: What did we learn?</p>
  </div>
  <div class="page">
    <p>Fuzz Testing TAs Using AFL</p>
  </div>
  <div class="page">
    <p>Fuzz Testing TAs Using AFL</p>
  </div>
  <div class="page">
    <p>Fuzz Testing TAs Using AFL</p>
  </div>
  <div class="page">
    <p>Fuzz Testing TAs Using AFL</p>
  </div>
  <div class="page">
    <p>Fuzz Testing TAs Using AFL</p>
    <p>Found TZ-specific coding anti-patterns that led to crashes</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
    <p>Null-pointer dereference</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 1: Assumptions about Request Sequence  TAs split work into small units  receive a sequence of requests</p>
    <p>char *ptr = NULL; // global</p>
    <p>switch (request) {</p>
    <p>case INIT:</p>
    <p>init(ptr);</p>
    <p>break;</p>
    <p>case DO_ACTION:</p>
    <p>do_action(ptr);</p>
    <p>break;</p>
    <p>case UNINIT:</p>
    <p>uninit(ptr);</p>
    <p>break;</p>
    <p>};</p>
    <p>Null-pointer dereference</p>
    <p>TA should properly handle any sequence of requests from CA</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>Shared Memory</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
    <p>ptr = off +</p>
    <p>shm_ta_base</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
    <p>ptr = off +</p>
    <p>shm_ta_base</p>
    <p>ptr</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
    <p>ptr = off +</p>
    <p>shm_ta_base</p>
    <p>ptr mal_ptr</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
    <p>ptr = off +</p>
    <p>shm_ta_base</p>
    <p>ptr</p>
    <p>TA Memory leak / corruption</p>
    <p>mal_ptr</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 2: Unvalidated Normal-World Pointers</p>
    <p>Client App (CA)</p>
    <p>Normal World/REE</p>
    <p>Trusted App (TA)</p>
    <p>Secure World/TEE</p>
    <p>shm_ta_base</p>
    <p>Shared Memory</p>
    <p>ptr = off +</p>
    <p>shm_ta_base</p>
    <p>ptr</p>
    <p>TA Memory leak / corruption</p>
    <p>mal_ptr</p>
    <p>TA should check that CA-supplied pointers point to shared memory</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 3: Unvalidated Parameter Types</p>
    <p>GlobalPlatform TEE API allows 4 parameters in TA calls  Each parameter can be either a value or a pointer to a buffer</p>
    <p>TEE_Result TA_InvokeCommandEntryPoint(void *session, uint32_t cmd,</p>
    <p>uint32_t paramTypes, TEE_Params params[4])</p>
    <p>{</p>
    <p>// Use params[0] as a buffer</p>
    <p>request_ptr = (struct request_struct *) params[0];</p>
    <p>switch (request_ptr-&gt;request) {</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 3: Unvalidated Parameter Types</p>
    <p>GlobalPlatform TEE API allows 4 parameters in TA calls  Each parameter can be either a value or a pointer to a buffer</p>
    <p>TEE_Result TA_InvokeCommandEntryPoint(void *session, uint32_t cmd,</p>
    <p>uint32_t paramTypes, TEE_Params params[4])</p>
    <p>{</p>
    <p>// Use params[0] as a buffer</p>
    <p>request_ptr = (struct request_struct *) params[0];</p>
    <p>switch (request_ptr-&gt;request) {</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 3: Unvalidated Parameter Types</p>
    <p>GlobalPlatform TEE API allows 4 parameters in TA calls  Each parameter can be either a value or a pointer to a buffer</p>
    <p>TEE_Result TA_InvokeCommandEntryPoint(void *session, uint32_t cmd,</p>
    <p>uint32_t paramTypes, TEE_Params params[4])</p>
    <p>{</p>
    <p>// Use params[0] as a buffer</p>
    <p>request_ptr = (struct request_struct *) params[0];</p>
    <p>switch (request_ptr-&gt;request) {</p>
    <p>}</p>
    <p>}</p>
    <p>paramType(0) =</p>
    <p>TEEC_MEMREF;</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 3: Unvalidated Parameter Types</p>
    <p>GlobalPlatform TEE API allows 4 parameters in TA calls  Each parameter can be either a value or a pointer to a buffer</p>
    <p>TEE_Result TA_InvokeCommandEntryPoint(void *session, uint32_t cmd,</p>
    <p>uint32_t paramTypes, TEE_Params params[4])</p>
    <p>{</p>
    <p>// Use params[0] as a buffer</p>
    <p>request_ptr = (struct request_struct *) params[0];</p>
    <p>switch (request_ptr-&gt;request) {</p>
    <p>}</p>
    <p>}</p>
    <p>paramTypes(0) =</p>
    <p>TEEC_MEMREF;</p>
    <p>paramTypes(0) =</p>
    <p>TEEC_VALUE;</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 3: Unvalidated Parameter Types</p>
    <p>GlobalPlatform TEE API allows 4 parameters in TA calls  Each parameter can be either a value or a pointer to a buffer</p>
    <p>TEE_Result TA_InvokeCommandEntryPoint(void *session, uint32_t cmd,</p>
    <p>uint32_t paramTypes, TEE_Params params[4])</p>
    <p>{</p>
    <p>// Use params[0] as a buffer</p>
    <p>request_ptr = (struct request_struct *) params[0];</p>
    <p>switch (request_ptr-&gt;request) {</p>
    <p>}</p>
    <p>}</p>
    <p>paramTypes(0) =</p>
    <p>TEEC_MEMREF;</p>
    <p>paramTypes(0) =</p>
    <p>TEEC_VALUE;</p>
    <p>TA Memory leak / corruption</p>
  </div>
  <div class="page">
    <p>Anti-Pattern 3: Unvalidated Parameter Types</p>
    <p>GlobalPlatform TEE API allows 4 parameters in TA calls  Each parameter can be either a value or a pointer to a buffer</p>
    <p>TEE_Result TA_InvokeCommandEntryPoint(void *session, uint32_t cmd,</p>
    <p>uint32_t paramTypes, TEE_Params params[4])</p>
    <p>{</p>
    <p>// Use params[0] as a buffer</p>
    <p>request_ptr = (struct request_struct *) params[0];</p>
    <p>switch (request_ptr-&gt;request) {</p>
    <p>}</p>
    <p>}</p>
    <p>paramTypes(0) =</p>
    <p>TEEC_MEMREF;</p>
    <p>paramTypes(0) =</p>
    <p>TEEC_VALUE;</p>
    <p>TA Memory leak / corruption</p>
    <p>TA should check CA-supplied parameter types</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We showed that it is practically feasible to run real-world TZOSes and TAs in an emulator</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We showed that it is practically feasible to run real-world TZOSes and TAs in an emulator</p>
    <p>Large-scale fuzz testing of TAs using the emulator found several previously unknown vulnerabilities in TAs with high reproducibility</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We showed that it is practically feasible to run real-world TZOSes and TAs in an emulator</p>
    <p>Large-scale fuzz testing of TAs using the emulator found several previously unknown vulnerabilities in TAs with high reproducibility</p>
    <p>We identified vulnerability patterns unique to TA development  Pointing to the need for TZ-specific developer education</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We showed that it is practically feasible to run real-world TZOSes and TAs in an emulator</p>
    <p>Large-scale fuzz testing of TAs using the emulator found several previously unknown vulnerabilities in TAs with high reproducibility</p>
    <p>We identified vulnerability patterns unique to TA development  Pointing to the need for TZ-specific developer education</p>
    <p>Thank you!</p>
  </div>
</Presentation>
