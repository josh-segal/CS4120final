<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NAVEX: Precise and Scalable Exploit Generation for Dynamic Web Applications</p>
    <p>Abeer Alhuzali, Rigel Gjomemo, Birhanu Eshete, and V.N. Venkatakrishnan</p>
    <p>University of Illinois at Chicago</p>
  </div>
  <div class="page">
    <p>Web Applications  Common Characteristics</p>
    <p>Content generated on the fly to improve usability and responsiveness  Tasks require a series of steps to accomplish</p>
    <p>e.g., online shopping: view  select  add to cart  checkout  Dependencies among them</p>
    <p>However  Increase application complexity  Increase analysis difficulty</p>
  </div>
  <div class="page">
    <p>Web Application Example</p>
    <p>How to Exploit?  Find a vulnerability  Craft an exploit string for that vulnerability  Find a navigation path to the vulnerability</p>
    <p>e.g.: httpview.php  httpcart.php  http..checkout.php</p>
    <p>Exploit is:</p>
    <p>view.php addToCart.php checkout.php</p>
  </div>
  <div class="page">
    <p>Problem &amp; Challenges  Problem: How to automatically construct exploits for large and complex web</p>
    <p>application?  Challenge #1: Scalability:</p>
    <p>Large code base consisting of hundreds of modules with large number of intramodule execution paths</p>
    <p>Challenge #2: Sinks reachability:  Have to derive inputs that reach deep sinks  Exploit input has to</p>
    <p>navigate through the complex dependencies among modules  satisfy module and path constraints</p>
  </div>
  <div class="page">
    <p>Challenges  Challenge #3: Dynamic features of web applications</p>
    <p>dynamically generated content may drive the navigation of the application to vulnerable sinks</p>
    <p>Forms, links, JavaScript content  Challenge #4: handling multiple vulnerability classes</p>
    <p>e.g., injection vulnerabilities (SQLI, XSS, etc.) and logic vulnerabilities (e.g., EAR)</p>
    <p>minimal changes to the analysis Goal: Automatic exploit generation approach that addresses these</p>
    <p>challenges</p>
    <p>Our Main Contribution: NAVEX, a system that has identified over two hundred exploits in modern PHP web applications</p>
  </div>
  <div class="page">
    <p>Approach Overview  Find vulnerable sinks using static analysis methods  Build a graph representation of navigation structure of applications</p>
    <p>dynamically  Find navigation paths to the identified vulnerabilities  Final exploit construction</p>
  </div>
  <div class="page">
    <p>NAVEX Architecture</p>
    <p>APPROACH Abeer | February 7, 2018</p>
    <p>Vulnerability Spec.</p>
    <p>Vulnerable Sinks Identification</p>
    <p>Vulnerable Sinks Concrete Exploits Generation</p>
    <p>App source code</p>
    <p>Attack Dictionary</p>
    <p>Exploits Exploit Strings</p>
    <p>App source code</p>
    <p>Attack Dictionary</p>
    <p>Phase I : Vulnerable Sink Identification</p>
    <p>SQLI XSS</p>
    <p>File Inclusion ...</p>
    <p>Graph Construction Graph Traversal</p>
    <p>Formula Generation Solver</p>
    <p>Sanitizations Sinks Traversal Type Attack Strings Attack Instance</p>
    <p>NAVEX</p>
  </div>
  <div class="page">
    <p>Graph Construction</p>
    <p>Graph Traversal</p>
    <p>Formula Generation</p>
    <p>Step I: Vulnerable Sinks Identification</p>
    <p>Source Code</p>
    <p>Attack Dictionary</p>
    <p>Graph model of source code  Based on Code Property Graphs (CPGs)</p>
    <p>CPG = AST+CFG+ call graph+DDG  Extend CPGs with sanitization and database constraints tags</p>
    <p>Find vulnerable paths to sensitive sinks  Path sensitive analysis  Types: Forward and backward traversals based on vulnerability type</p>
    <p>E.g., backward search for injection vulnerabilities</p>
    <p>Construct formulas from vulnerable path statements  Use solver to generate exploit strings</p>
  </div>
  <div class="page">
    <p>Step II: Concrete Exploits Generation</p>
    <p>Dynamic Execution</p>
    <p>Navigation Graph</p>
    <p>Final Exploit Generator</p>
    <p>Solver</p>
    <p>Links: stored and used as new URLs to crawl  Forms: Generate form inputs automatically</p>
    <p>Extract constraints from forms  JavaScript : concolic execution based on NoTamper (Bisht et al.,CCS10)</p>
    <p>An application-wide navigation graph  represents possible sequences of module executions</p>
    <p>Directed graph  node: HTTP request  edge: navigation between nodes (type is link or form)</p>
    <p>Search the NG to find navigation paths to vulnerable sinks</p>
    <p>App</p>
    <p>Crawler</p>
  </div>
  <div class="page">
    <p>Client Formula extraction</p>
    <p>Constraint Solver</p>
    <p>HTTP request Formulation crawler</p>
    <p>Trace Analyzer</p>
    <p>Store info/create NG Node</p>
    <p>Extract Trace constraints (Fserver)</p>
    <p>Fform: Fhtml  Fjs</p>
    <p>Fform: Fhtml  Fjs  Fserver</p>
    <p>Solver model</p>
    <p>Input Generation</p>
  </div>
  <div class="page">
    <p>Combining Static &amp; Dynamic Results</p>
    <p>Example:</p>
    <p>vulnerability in PathToApp/App/checkout.php, checkout.php is included by hold.php (no direct access)</p>
    <p>Navigation Graph: no node of a URL = .checkout.php</p>
    <p>Problem: combining the results produced by the step of vulnerable sink</p>
    <p>identification (static analysis) with the Navigation Graph (dynamically generated).</p>
    <p>Solution: Inclusion Map</p>
    <p>Constructed statically, [Parent file -&gt; included files]</p>
  </div>
  <div class="page">
    <p>Searching Navigation Graph</p>
    <p>Input :  vulnerable sink (destination URL) = http://localhost/App/hold.php  exploit string is msg =&lt;script&gt;alert(XSS);&lt;/script&gt; (GET)  Public URL (source URL) = http://localhost/App/selectBooks.php</p>
    <p>Search Results:  nodes of [id=2, id=3, id=4, id=5, id=6]</p>
    <p>http://localhost/App/hold.php?step=checkout&amp;msg=done  http://localhost/App/hold.php?step=checkout&amp;msg=&lt;script&gt;alert(XSS);&lt;/script&gt;</p>
    <p>url:http://localhost/App/select Books.php</p>
    <p>id: 2</p>
    <p>form_params:[book_name= intro to CS by author1, edition=2,publisher=aaaaaaa</p>
    <p>role: [user, user]</p>
    <p>form</p>
    <p>url:http://localhost/App/ selectBooks.php?action =borrow</p>
    <p>id: 3</p>
    <p>role: [user, user]</p>
    <p>link</p>
    <p>url:http://localhost/App/ hold.php</p>
    <p>id: 4</p>
    <p>role: [user, user]</p>
    <p>url:http://localhost/App/ hold.php?step= checkout</p>
    <p>id: 5</p>
    <p>role: [user, user]</p>
    <p>link</p>
    <p>url:http://localhost/App/ hold.php?step =checkout&amp;msg=done</p>
    <p>id: 6</p>
    <p>role: [user, user]</p>
    <p>link</p>
    <p>ID: 2</p>
    <p>URL:http://localhost/App/select Books.php</p>
    <p>Form_Params: [book_name= intro to CS by author1, edition=2,publisher=aaaaaaa]</p>
    <p>Role: [uName, uPass]</p>
    <p>ID: 3</p>
    <p>URL:http://localhost/App/ selectBooks.php?action =borrow</p>
    <p>Role: [uName, uPass]</p>
    <p>FORM</p>
    <p>ID: 4</p>
    <p>URL:http://localhost/ App/hold.php</p>
    <p>Role: [uName, uPass]</p>
    <p>LINK</p>
    <p>ID: 5</p>
    <p>URL:http://localhost/ App/hold.php?step= checkout</p>
    <p>Role: [uName, uPass]</p>
    <p>LINK</p>
    <p>ID: 6</p>
    <p>URL:http://localhost/App /hold.php?step =checkout&amp;msg=done</p>
    <p>Role: [uName, uPass]</p>
    <p>LINK</p>
  </div>
  <div class="page">
    <p>Final Exploit</p>
    <p>POST params:[book name=intro to CS by author1, edition=2,publisher=aaaaaaa] 3. http://localhost/App/selectBooks.php?action=borrow 4. http://localhost/App/hold.php 5. http://localhost/App/hold.php?step=checkout 6. http://localhost/App/hold.php?step=checkout&amp;msg=&lt;script&gt;alert(XSS);&lt;/script&gt;</p>
    <p>url:http://localhost/App/select Books.php</p>
    <p>id: 2</p>
    <p>form_params:[book_name= intro to CS by author1, edition=2,publisher=aaaaaaa</p>
    <p>role: [user, user]</p>
    <p>form</p>
    <p>url:http://localhost/App/ selectBooks.php?action =borrow</p>
    <p>id: 3</p>
    <p>role: [user, user]</p>
    <p>link</p>
    <p>url:http://localhost/App/ hold.php</p>
    <p>id: 4</p>
    <p>role: [user, user]</p>
    <p>url:http://localhost/App/ hold.php?step= checkout</p>
    <p>id: 5</p>
    <p>role: [user, user]</p>
    <p>link</p>
    <p>url:http://localhost/App/ hold.php?step =checkout&amp;msg=done</p>
    <p>id: 6</p>
    <p>role: [user, user]</p>
    <p>link</p>
    <p>ID: 2</p>
    <p>URL:http://localhost/App/select Books.php</p>
    <p>Form_Params: [book_name= intro to CS by author1, edition=2,publisher=aaaaaaa]</p>
    <p>Role: [uName, uPass]</p>
    <p>ID: 3</p>
    <p>URL:http://localhost/App/ selectBooks.php?action =borrow</p>
    <p>Role: [uName, uPass]</p>
    <p>FORM</p>
    <p>ID: 4</p>
    <p>URL:http://localhost/ App/hold.php</p>
    <p>Role: [uName, uPass]</p>
    <p>LINK</p>
    <p>ID: 5</p>
    <p>URL:http://localhost/ App/hold.php?step= checkout</p>
    <p>Role: [uName, uPass]</p>
    <p>LINK</p>
    <p>ID: 6</p>
    <p>URL:http://localhost/App /hold.php?step =checkout&amp;msg=done</p>
    <p>Role: [uName, uPass]</p>
    <p>LINK</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
  </div>
  <div class="page">
    <p>Dataset  26 real-world open-source PHP web applications</p>
    <p>Total of 3.2M SLOC and 22K PHP files</p>
    <p>Applications selection criteria</p>
    <p>Popular and large PHP apps  Such as WordPress, OpenConf, HotCRP, Drupal, Gallery, Joomla,</p>
    <p>LimeSurvey, Collabtive, and MediaWiki  Comparison with state-of-the-art work in exploit generation (e.g.,</p>
    <p>Chainsaw (Alhuzali et al., CCS16)) and vulnerability analysis (e.g., RIPS (Dahse and Holz, NDSS14))</p>
  </div>
  <div class="page">
    <p>Results Summary  NAVEX constructed a total of 204 exploits</p>
    <p>195 are on injection vulnerabilities (SQLI and XSS).  9 are on logic vulnerabilities (EAR).</p>
    <p>The enhanced CPG reduced FPs by 87% on average.  Client-side code analysis for building the navigation graph enhanced the precision</p>
    <p>of exploit generation by 54% on average.  Drill down as deep as 6 HTTP requests to stitch together exploits.</p>
  </div>
  <div class="page">
    <p>SQLI Exploits  Reported 155 SQLI exploitable sinks  No false positives  Constructed 105 concrete SQLI exploits  Vulnerable web apps</p>
    <p>osCommerce (2.3.3)  phpBB (2.0.23)  myBloggie, Scarf, Dnscript, WeBid, Eve, SchoolMate, geccbblite, FAQforge,</p>
    <p>and WebChess</p>
  </div>
  <div class="page">
    <p>XSS Exploits  Found 133 XSS exploitable sinks  5 false positives  Generated 90 XSS exploits  Vulnerable web apps</p>
    <p>HotCRP (2.60)  osCommerce (2.3.4)  osCommerce (2.3.3)  CPG  MediaWiki  phpBB (2.0.23)  myBloggie, Scarf, Dnscript, WeBid, Eve, SchoolMate, FAQforge, and</p>
    <p>WebChess</p>
  </div>
  <div class="page">
    <p>EAR EXPLOITS (LOGIC EXPLOITS)</p>
    <p>Found 22 EAR vulnerabilities</p>
    <p>3 false positives</p>
    <p>Generated 9 EAR exploits</p>
    <p>Vulnerable web apps  HotCRP (2.100)  HotCRP (2.60)  OpenConf  osCommerce (2.3.4)  osCommerce (2.3.3)  LimeSurvey  Collabtive  MediaWiki  myBloggie, WeBid, and Eve</p>
  </div>
  <div class="page">
    <p>Performance and Scalability  Performance: total time to find exploitable sinks and to generate exploits per</p>
    <p>vulnerability type.</p>
    <p>Vulnerability identification from 17.28 to 109.27 minutes.  Exploit generation from 1.38 to 40.20 minutes.</p>
    <p>SQLI XSS File Inclu</p>
    <p>sion Comman</p>
    <p>d Injectio n</p>
    <p>Code Ex ecution EAR</p>
    <p>Exp. Sinks Finding Time (Mnts.)</p>
    <p>Exploit Generation Time (Mnts.)</p>
  </div>
  <div class="page">
    <p>Effect of Client-side Code Analysis  Forms are common</p>
    <p>Number of unique forms ranges from 3 to 186 (average of 45 form/application).  Input generation and constraints extraction from client-side code  improve the</p>
    <p>crawling coverage.  NAVEX constructed more exploits.</p>
    <p>SQLI XSS EAR</p>
    <p># Exploits Without Client-Side Code # Exploits With Client-Side Code</p>
  </div>
  <div class="page">
    <p>Conclusion  NAVEX is an automatic exploit generation system that considers</p>
    <p>dynamic features and the navigational complexities of modern web applications</p>
    <p>NAVEX constructed 204 exploits  195 are on injection vulnerabilities  9 are on logic vulnerabilities</p>
    <p>Outperform prior work on the precision, efficiency, and scalability of exploit generation.</p>
  </div>
  <div class="page">
    <p>THANK YOU FOR YOUR ATTENTION QUESTIONS?</p>
    <p>NAVEX is available at https://github.com/aalhuz/navex</p>
  </div>
  <div class="page">
    <p>REFERENCES 1. G. Wassermann, D. Yu, A. Chander, D. Dhurjati, H. Inamura, and Z. Su. Dynamic test input generation for web applications. In Proceedings of the 2008 international symposium on Software testing and</p>
    <p>analysis, pages 249260, 2008.</p>
  </div>
</Presentation>
