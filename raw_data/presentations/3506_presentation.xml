<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research</p>
    <p>USENIX Security 18, Baltimore, MD Aug 15, 2018</p>
    <p>ATtention Spanned: Comprehensive Vulnerability Analysis of AT Commands</p>
    <p>Within the Android Ecosystem Dave (Jing) Tian*, Grant Hernandez*, Joseph Choi*, Vanessa Frost*, Christie Ruales*,</p>
    <p>Patrick Traynor*, Hayawardh Vijayakumar**, Lee Harrison**, Amir Rahmati**^, Michael Grace**, Kevin Butler*</p>
    <p>*University of Florida, Gainesville, FL **Samsung Research America (SRA), Mountain View, CA</p>
    <p>^Stony Brook University, Stony Brook, NY</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 2</p>
    <p>Those BBS Days</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 3</p>
    <p>AT commands are not new</p>
    <p>Motivation</p>
    <p>The prevalence is unclear  The functionality is unclear  The security impact is unclear</p>
    <p>A systematic study of AT commands within the Android ecosystem</p>
    <p>CHARGE YOUR DEVICE WITH THE LATEST MALWARE</p>
    <p>Andr Pereira, Manuel E. Correia and Pedro Brando</p>
    <p>How to find them?  How to test them?  How to abuse them?</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 4</p>
    <p>Hayes</p>
    <p>ATD</p>
    <p>AT Commands</p>
    <p>A T + E X E C A T + R E A D ? A T + T E S T = ? A T + C S E T = 0 , 1 ,  p a r a m</p>
    <p>Modem Attention</p>
    <p>Extended Command Namespace (+, %, )</p>
    <p>Command Name Optional Parameters</p>
    <p>Figure 3: A colorized representation of AT command syntax.</p>
    <p>Figure 4: The regular expression developed to match extended AT commands. The regular expression syntax is from Python. All white space is ignored. Note that the regex is matching both text files and binary data.</p>
    <p>Filtering Lines containing AT commands as discovered using strings and grep are what we call coarse-grained matches. This means any matching lines may be invalid or spurious. We define an invalid match to mean not conforming to the expected patterns of an AT command. Figure 3 shows the syntax of an AT command, with different colors describing the modem attention string, command delimiter, command name, and parameter string. It also shows the four primary uses of AT commands: executing an action, reading from a parameter, testing for allowed parameters, and setting a parameter. In practice, what these types actually do is left up to the implementation. Regardless, these four types are the standard syntax patterns we aim to match.</p>
    <p>To capture these four types, we develop a regular expression as shown in Figure 4 to match their syntax. Line 1 of the RE will ignore any matches that are not at the beginning of the matched line and have a letter or number immediately to the left of the AT directive. Line 4-7 will capture and match the AT directive, the extended command namespace symbol, and the command name, which must be greater than or equal to three characters and only contain letters, numbers and underscores. Lines 9-15 will capture any optional argument to the command.</p>
    <p>Specification Usage # of AT Commands</p>
    <p>Hayes [16, 17] Basic 46 ITU-T V.250 [35] Application 61</p>
    <p>ETSI GSM 07.05 [25] SMS 20 ETSI TS 100 916 [26] GSM 95</p>
    <p>Total (unique) 222</p>
    <p>Table 2: Additional AT commands were manually collected from several specification documents, for a total of 222 unique AT commands.</p>
    <p>Line 10 will match a read variant, line 12 a set variant with a non-zero amount of numeric parameters, string parameters, and nested AT commands separated by semicolons (e.g., AT+CMD=1,10,&quot;var&quot;;+OTHER=1,2). Line 13 will match the test variant and finally line 14 will match an empty parameter.</p>
    <p>Despite this more restrictive regular expression, certain commands such as AT$L2f, AT+ baT, and AT^tAT commonly end up in the AT command database. Upon testing and visual inspection, we define commands of this appearance to be spurious matches. These false positive matches polluted our analytics and cause a large increase in unique commands, which in turn slows down our testing. By observing the make-up of these invalid commands, we developed a simple heuristic to score commands based off of three features: the command length, the character classes present, and the valid to invalid command ratio of the file in which it was discovered. For more details on this heuristic visit Section A.2.</p>
    <p>In summary, the regular expression helped us discard 33.2% of all 1,392,871 processed lines across all images. The heuristic eliminated an additional 2.4% of all processed lines and brought the total unique AT command count down from 4,654 to 3,500, a 24.8% reduction. With less invalid commands matched, the signal to noise ratio of database increased and our AT command testing was faster.</p>
    <p>Generating a DB Once we have filtered and stored every AT command along with any found parameters, we generate plain-text DB files for input into our testing framework. We create DB files containing every unique command and parameter and vendor-specific ATDB files. These give us different test profiles for phone testing. In addition, we also manually collect AT commands from multiple specifications, as shown in Table 2. Many of these commands are not extended AT commands (AT[symbol]) and would not be matched during our filtering step. Also, these AT commands may not be found inside the Android firmware, but should be supported by baseband processors meeting the public specifications. Thus, we include these in our database.</p>
    <p>ITU-T/ETSI</p>
    <p>AT+CMGS</p>
    <p>Android Ecosystem</p>
    <p>AT+USBDEBUG</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 5</p>
    <p>How to find them?</p>
    <p>build. prop build. prop atcmdsAT</p>
    <p>cmds</p>
    <p>LG HTC</p>
    <p>init.usbinit.usb</p>
    <p>Samsung</p>
    <p>Image 1 Image</p>
    <p>Image N</p>
    <p>Image unzip unpack decrypt</p>
    <p>grep AT AT DB</p>
    <p>parse filter assign</p>
    <p>Mfg. Sites Public Mirrors</p>
    <p>Figure 2: A graphical depiction of our papers Android firmware image processing pipeline.</p>
    <p>We first gather Android firmware images from manufacturer websites and third-party hosts. For more details on the downloading process, see Section A.3. With a corpus of firmware images, we begin extraction and filtering for commands. We traverse each Android firmware image as deeply as possible, recovering unique AT commands and parameter combinations. Additionally, we also capture build information for each image from the standard Android build properties file, build.prop. This file provides key metadata about the image itself. We also collect any USB init/pre-configuration files (e.g., init.usb.rc) found in Android boot images to gain insight into the USB modes supported by each firmware.</p>
    <p>In order to find AT commands present in firmware images, we look in every file for any string containing the regular expression AT[+*!@#$%^&amp;]. AT commands with a symbol immediately following the ATtention string are known as extended AT commands. Original Equipment Manufacturers (OEMs) are free to add any amount of extended commands to their products. We focus on solely collecting AT extended command references within these firmware images for later categorization and testing.</p>
    <p>Many pieces of firmware were archived using standard formats. Vendor-specific formats included: HTCs .exe format, unpackable using the HTC RUU Decrypt Tool [12]; Huaweis update.app format, unpackable using splitupdate [10]; LGs .kdz/.dz format, unpackable using LGE KDZ Utilities [7]; and Sonys .ftf format, unpackable using 7-Zip. Any nested archives directly under the top-level archive (e.g., Samsung images several nested tars) are similarly unpacked.</p>
    <p>Once all files are extracted from the archives, we process each file according to its characteristics. For native binaries, such as ELF, we are limited to using strings to extract all possible strings, over which we grep for any of our target AT prefixes. For text-based files, grep is applied directly to catch potential AT commands. For ZIP-like files, we unzip and traverse the directory to examine each extracted file. ZIP-like files include yaffs (unpacked using unyaffs [13]), Lenovos SZB (unpacked using szbtool [11]) and Lenovos QSB (unpacked using a</p>
    <p>qsb splitter [6]) formats. If the file is a VFAT or EXT4 filesystem image (e.g.,</p>
    <p>system.img), we mount the filesystem and traverse it once mounted to check each contained file. Filesystem images are not always readily mountable. They may be single or split-apart sparse Android images, which we first convert into EXT4 using the Android simg2img tool [9]. They may be provided as unsparse chunks, which need to be reconstituted according to an instruction XML file indicating start sector and number of partition sectors for each chunk. They may otherwise be provided as sparse Android data images (SDATs), which are converted into EXT4 using sdat2img [8]. Sony filesystem images, in particular, may be given in SIN format, which are converted into EXT4 using FlashTool [3].</p>
    <p>Android filesystem partitions contain APK files, which we decompile using dex2jar [2] and jd-cli [5] treating the output as text files to pull AT commands from. Similarly, we also decompile JAR files using jd-cli before extracting AT commands from them. Any discovered ODEX files are first disassembled using baksmali [1], after which we look for AT commands in the assembly output. We then reconstruct the DEX file using the assembly output with smali and decompile it using jadx [4] before looking for AT commands in the resulting output.</p>
    <p>After AT commands are extracted from each image, we develop a script to parse the AT matches. This script applies additional filtering with a more strict regular expression and uses a scoring heuristic to eliminate commands that appear to be invalid.</p>
    <p>For every command found, we record metadata such as the vendor, image, and filename where it was discovered. Additionally we find any parameters to the AT command and store the unique combinations with the command. To organize the data, we use MongoDB with a single toplevel document for each vendor. Each vendor has an array of images, which in turn have Android metadata, including, but not limited to, Android version, phone model, and build ID. Finally, each image has a list of AT commands.</p>
    <p>A T + E X E C A T + R E A D ? A T + T E S T = ? A T + C S E T = 0 , 1 ,  p a r a m</p>
    <p>Modem Attention</p>
    <p>Extended Command Namespace (+, %, )</p>
    <p>Command Name Optional Parameters</p>
    <p>Figure 3: A colorized representation of AT command syntax.</p>
    <p>Figure 4: The regular expression developed to match extended AT commands. The regular expression syntax is from Python. All white space is ignored. Note that the regex is matching both text files and binary data.</p>
    <p>Filtering Lines containing AT commands as discovered using strings and grep are what we call coarse-grained matches. This means any matching lines may be invalid or spurious. We define an invalid match to mean not conforming to the expected patterns of an AT command. Figure 3 shows the syntax of an AT command, with different colors describing the modem attention string, command delimiter, command name, and parameter string. It also shows the four primary uses of AT commands: executing an action, reading from a parameter, testing for allowed parameters, and setting a parameter. In practice, what these types actually do is left up to the implementation. Regardless, these four types are the standard syntax patterns we aim to match.</p>
    <p>To capture these four types, we develop a regular expression as shown in Figure 4 to match their syntax. Line 1 of the RE will ignore any matches that are not at the beginning of the matched line and have a letter or number immediately to the left of the AT directive. Line 4-7 will capture and match the AT directive, the extended command namespace symbol, and the command name, which must be greater than or equal to three characters and only contain letters, numbers and underscores. Lines 9-15 will capture any optional argument to the command.</p>
    <p>Specification Usage # of AT Commands</p>
    <p>Hayes [16, 17] Basic 46 ITU-T V.250 [35] Application 61</p>
    <p>ETSI GSM 07.05 [25] SMS 20 ETSI TS 100 916 [26] GSM 95</p>
    <p>Total (unique) 222</p>
    <p>Table 2: Additional AT commands were manually collected from several specification documents, for a total of 222 unique AT commands.</p>
    <p>Line 10 will match a read variant, line 12 a set variant with a non-zero amount of numeric parameters, string parameters, and nested AT commands separated by semicolons (e.g., AT+CMD=1,10,&quot;var&quot;;+OTHER=1,2). Line 13 will match the test variant and finally line 14 will match an empty parameter.</p>
    <p>Despite this more restrictive regular expression, certain commands such as AT$L2f, AT+ baT, and AT^tAT commonly end up in the AT command database. Upon testing and visual inspection, we define commands of this appearance to be spurious matches. These false positive matches polluted our analytics and cause a large increase in unique commands, which in turn slows down our testing. By observing the make-up of these invalid commands, we developed a simple heuristic to score commands based off of three features: the command length, the character classes present, and the valid to invalid command ratio of the file in which it was discovered. For more details on this heuristic visit Section A.2.</p>
    <p>In summary, the regular expression helped us discard 33.2% of all 1,392,871 processed lines across all images. The heuristic eliminated an additional 2.4% of all processed lines and brought the total unique AT command count down from 4,654 to 3,500, a 24.8% reduction. With less invalid commands matched, the signal to noise ratio of database increased and our AT command testing was faster.</p>
    <p>Generating a DB Once we have filtered and stored every AT command along with any found parameters, we generate plain-text DB files for input into our testing framework. We create DB files containing every unique command and parameter and vendor-specific ATDB files. These give us different test profiles for phone testing. In addition, we also manually collect AT commands from multiple specifications, as shown in Table 2. Many of these commands are not extended AT commands (AT[symbol]) and would not be matched during our filtering step. Also, these AT commands may not be found inside the Android firmware, but should be supported by baseband processors meeting the public specifications. Thus, we include these in our database.</p>
    <p>A T + E X E C A T + R E A D ? A T + T E S T = ? A T + C S E T = 0 , 1 ,  p a r a m</p>
    <p>Modem Attention</p>
    <p>Extended Command Namespace (+, %, )</p>
    <p>Command Name Optional Parameters</p>
    <p>Figure 3: A colorized representation of AT command syntax.</p>
    <p>Figure 4: The regular expression developed to match extended AT commands. The regular expression syntax is from Python. All white space is ignored. Note that the regex is matching both text files and binary data.</p>
    <p>Filtering Lines containing AT commands as discovered using strings and grep are what we call coarse-grained matches. This means any matching lines may be invalid or spurious. We define an invalid match to mean not conforming to the expected patterns of an AT command. Figure 3 shows the syntax of an AT command, with different colors describing the modem attention string, command delimiter, command name, and parameter string. It also shows the four primary uses of AT commands: executing an action, reading from a parameter, testing for allowed parameters, and setting a parameter. In practice, what these types actually do is left up to the implementation. Regardless, these four types are the standard syntax patterns we aim to match.</p>
    <p>To capture these four types, we develop a regular expression as shown in Figure 4 to match their syntax. Line 1 of the RE will ignore any matches that are not at the beginning of the matched line and have a letter or number immediately to the left of the AT directive. Line 4-7 will capture and match the AT directive, the extended command namespace symbol, and the command name, which must be greater than or equal to three characters and only contain letters, numbers and underscores. Lines 9-15 will capture any optional argument to the command.</p>
    <p>Specification Usage # of AT Commands</p>
    <p>Hayes [16, 17] Basic 46 ITU-T V.250 [35] Application 61</p>
    <p>ETSI GSM 07.05 [25] SMS 20 ETSI TS 100 916 [26] GSM 95</p>
    <p>Total (unique) 222</p>
    <p>Table 2: Additional AT commands were manually collected from several specification documents, for a total of 222 unique AT commands.</p>
    <p>Line 10 will match a read variant, line 12 a set variant with a non-zero amount of numeric parameters, string parameters, and nested AT commands separated by semicolons (e.g., AT+CMD=1,10,&quot;var&quot;;+OTHER=1,2). Line 13 will match the test variant and finally line 14 will match an empty parameter.</p>
    <p>Despite this more restrictive regular expression, certain commands such as AT$L2f, AT+ baT, and AT^tAT commonly end up in the AT command database. Upon testing and visual inspection, we define commands of this appearance to be spurious matches. These false positive matches polluted our analytics and cause a large increase in unique commands, which in turn slows down our testing. By observing the make-up of these invalid commands, we developed a simple heuristic to score commands based off of three features: the command length, the character classes present, and the valid to invalid command ratio of the file in which it was discovered. For more details on this heuristic visit Section A.2.</p>
    <p>In summary, the regular expression helped us discard 33.2% of all 1,392,871 processed lines across all images. The heuristic eliminated an additional 2.4% of all processed lines and brought the total unique AT command count down from 4,654 to 3,500, a 24.8% reduction. With less invalid commands matched, the signal to noise ratio of database increased and our AT command testing was faster.</p>
    <p>Generating a DB Once we have filtered and stored every AT command along with any found parameters, we generate plain-text DB files for input into our testing framework. We create DB files containing every unique command and parameter and vendor-specific ATDB files. These give us different test profiles for phone testing. In addition, we also manually collect AT commands from multiple specifications, as shown in Table 2. Many of these commands are not extended AT commands (AT[symbol]) and would not be matched during our filtering step. Also, these AT commands may not be found inside the Android firmware, but should be supported by baseband processors meeting the public specifications. Thus, we include these in our database.</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 6</p>
    <p>Android Version Distribution Other</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 7</p>
    <p>ATcmd Distribution Per Vendor</p>
    <p>A 7c</p>
    <p>m G#</p>
    <p>Google</p>
    <p>(a) ATcmd Distribution of Google.</p>
    <p>A 7c</p>
    <p>m d#</p>
    <p>(b) ATcmd Distribution of Samsung.</p>
    <p>A 7c</p>
    <p>m G#</p>
    <p>LG</p>
    <p>(c) ATcmd Distribution of LG.</p>
    <p>Figure 5: AT Command distribution across three major Android smartphone manufacturers.</p>
    <p>Google ATcmd#</p>
    <p>/vendor/lib/libsec-ril lte.so 183 /lib/libxgold-ril.so 73 /lib/libreference-ril.so 37 /lib/hw/bluetooth.default.so 23 /lib/bluez-plugin/audio.so 19</p>
    <p>Samsung /bin/at distributor 331 /md1rom.img 226 /app/FactoryTest CAM.apk 145 /bin/sec atd 142 /bin/engpc 140</p>
    <p>LG /bin/atd 354 /lib/libreference-ril.so 37 /lib/hw/bluetooth.default.so 27 /app/LGATCMDService/arm/LGATCMDService.odex 19 /app/LGBluetooth4/arm/LGBluetooth4.odex 15</p>
    <p>Table 3: Top 5 binaries which contain the most AT commands per Google, Samsung, and LG.</p>
    <p>Samsung images besides the 7 GSM-related commands. Surprisingly, 8 of the top 10 AT commands in LG are non-standard (prefixed by AT%). Further investigation shows them all to be vendor-specific. We extend our inspection to the top 20 AT commands and find the trend to be the same  the most frequent AT commands are standard for Google, a combination of standard and homemade for Samsung, and mainly vendor-specific for LG. AT Command Usage Per Binary. To see where these AT commands come from, we summarize the source of these commands and show the top 5 binaries that contribute the most commands for Google, Samsung, and LG. As shown in Table 3, most of the AT commands come from the RIL in Google. Note that some Bluetooth modules also contain AT commands. For Samsung, besides the modem image (md1rom.img), we could find Samsung-specific native daemons, such as at distributor. A factory testing app is also listed. For LG, atd seems to be the sole native daemon, taking care of the most AT commands.</p>
    <p>Two LG-specific apps also appear to serve some AT commands.</p>
    <p>To gain deeper insight into how AT commands can affect these systems, we analyzed the flow of AT commands starting from the gadget serial TTY device (usually /dev/ttyGS0) to any native daemons and finally to other devices or system applications. We analyzed the LG G4 and the Samsung S8+ images by reading the relevant USB init scripts and any native daemons using IDA Pro 7.0. We paired this with manual testing using the AT interface while monitoring the system with logcat.</p>
    <p>Samsung S8+. Samsungs heavy use of AT commands was confirmed through analysis of four key native daemons: ddexe, at distributor, smdexe, and port-bridge. The Data Distributor ddexe opens the primary /dev/ttyGS0 device, monitors USB for state changes, creates a UNIX domain socket server, and routes TTY data to clients. at distributor connects via UNIX socket (/data/.socket stream), receives commands, and either handles them itself or dispatches them to appropriate parts of the system.</p>
    <p>As a result of previous work (CVE-2016-4030, CVE2016-4031, and CVE-2016-4032), Samsung has locked down the exposed AT interface with a command whitelist. This whitelist is active when the ro.product ship property is set to true and limits the commands to information gathering only. Any non-whitelisted command responds with the generic reply of OK, even if it is invalid.</p>
    <p>LG G4. LG follows a similar structure to handling AT commands. Its primary daemon atd reads and writes to the gadget serial TTY device and handles or bypasses AT commands. Some commands are handled by a static dispatch table within atd and may propagate throughout the system via UNIX domain socket /dev/socket/atd. LGATCMDService is an Android background service that listens for and handles any incoming commands before sending back a response. At least 89 different commands</p>
    <p>~100</p>
    <p>~400 ~300</p>
    <p>Google Samsung LG</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 8</p>
    <p>Setup</p>
    <p>How to test them?</p>
    <p>Requirement</p>
    <p>/dev/ttyACM0</p>
    <p>A USB connection</p>
    <p>A USB CDC ACM interface</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 9</p>
    <p>Android Devices Tested Vendor USB.rc Avg. acm USB.rc Avg. diag</p>
    <p>w/ acm Triggers w/ diag Triggers</p>
    <p>ASUS 330 2.9 262 2.5 Google 73 5.6 496 29.2 HTC 253 14.3 253 31.3 Huawei 56 5 58 29.1 Lenovo 144 6.7 100 25.7 LG 591 1.1 693 1.0 LineageOS 168 4.4 281 15.1 Motorola 10 16 224 7.0 Samsung 581 5.4 509 19.6 Sony 56 4.7 56 21.2 ZTE 23 6.9 23 36.5</p>
    <p>Total 2955 4.1 2285 17.3</p>
    <p>Table 4: Per vendor counts of USB.rc files found to contain acm and diag triggers, alongside the average number of contained triggers. In total, we found 12,018 acm and 39,605 diag triggers across USB.rc files in 1,564 images.</p>
    <p>are handled by this application and, given its extensive system permissions, it is an interesting target. A previous vulnerability in 2016 [49] (CVE-2016-3117) gave any application the ability to communicate through LGATCMDService to atd, allowing the phone to be bricked or sensitive data to be read. Through static analysis of this service APK, we confirmed that there were now checks ensuring that only requests from the system user (UID 1000) would be allowed. Despite this patch, unlike Samsung, LG does not whitelist AT commands, so any that are supported by the Android system or modem are passed through the USB interface.</p>
    <p>USB Pre-Configuration Files. Now that we know the prevalence of AT commands in the gathered firmware images, we inspect the susceptibility of the images to AT commands. We do this by looking at USB init/preconfiguration files (e.g., init.usb.rc), referred from here on as USB.rc files, which provide details about the USB modes supported by the device. We were able to extract pre-configuration files from 1,564 of the 2,018 total images, some having multiple such files (for example, HTC images contain an average of 10).</p>
    <p>We look for property:sys.usb.config triggers in the pre-configuration files and discover that 864 images (55% of the images from which USB.rc files were successfully extracted) contain at least one USB.rc file with triggers for ACM mode. Since enabling USB modem functionality causes a CDC-ACM interface to be exposed, our finding suggests that over half6 of phone firmwares have the potential to provide modem functionality. We also look for triggers for diagnostic mode, indicated by</p>
    <p>Device Android Ver# Modem Exposed</p>
    <p>Samsung Galaxy Note 2 4.4.2 Y Samsung Galaxy S7 Edge 7.0 Y Samsung Galaxy S8 Plus 7.0 Y</p>
    <p>LG G3 6.0 Y LG G4 6.0 Y</p>
    <p>HTC One 4.4.2 Y* HTC Desire 626 5.1 N Asus ZenPhone 2 5.0 Y (root)</p>
    <p>Asus ZenPad 5.0.2 Y (root) Google Nexus 5 5.1.1 Y (root)</p>
    <p>Google Nexus 5X 6.0 Y (root) Google Nexus 6P 7.1.1 N*</p>
    <p>Google Pixel 7.1.1 N Motorola Moto X 5.1 N*</p>
    <p>Table 5: We examined 14 Android devices to find if they expose USB modem interfaces. 6 expose the modem by default; 4 can expose it after being rooted.</p>
    <p>diag, which usually activated the ACM interface once enabled. We discover that 1,175 images (75% of the images from which USB.rc files were extracted) contain at least one USB.rc file with diag triggers. Our finding suggests that even more phone firmwares (beyond those with ACM mode triggers) have the potential to provide modem functionality through alternative diag triggers.</p>
    <p>Table 4 presents the breakdown of average acm and diag trigger counts per vendor. Since each image may have multiple USB.rc files, we average trigger counts over the total number of these files from each vendor, rather than the number of images containing USB.rc files.</p>
    <p>We chose 8 devices shown in Table 6 for testing, including all devices exposing a USB modem interface by default, as well as 3 other devices that offer ways to enable such an interface. We use our AT command testing framework to send the 3500 unique AT commands we ex</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 10</p>
    <p>How to abuse them? (a) ATcmd Distribution of Google. (b) ATcmd Distribution of Samsung. (c) ATcmd Distribution of LG.</p>
    <p>Figure 5: AT Command distribution across three major Android smartphone manufacturers.</p>
    <p>Google ATcmd#</p>
    <p>/vendor/lib/libsec-ril lte.so 183 /lib/libxgold-ril.so 73 /lib/libreference-ril.so 37 /lib/hw/bluetooth.default.so 23 /lib/bluez-plugin/audio.so 19</p>
    <p>Samsung /bin/at distributor 331 /md1rom.img 226 /app/FactoryTest CAM.apk 145 /bin/sec atd 142 /bin/engpc 140</p>
    <p>LG /bin/atd 354 /lib/libreference-ril.so 37 /lib/hw/bluetooth.default.so 27 /app/LGATCMDService/arm/LGATCMDService.odex 19 /app/LGBluetooth4/arm/LGBluetooth4.odex 15</p>
    <p>Table 3: Top 5 binaries which contain the most AT commands per Google, Samsung, and LG.</p>
    <p>Samsung images besides the 7 GSM-related commands. Surprisingly, 8 of the top 10 AT commands in LG are non-standard (prefixed by AT%). Further investigation shows them all to be vendor-specific. We extend our inspection to the top 20 AT commands and find the trend to be the same  the most frequent AT commands are standard for Google, a combination of standard and homemade for Samsung, and mainly vendor-specific for LG. AT Command Usage Per Binary. To see where these AT commands come from, we summarize the source of these commands and show the top 5 binaries that contribute the most commands for Google, Samsung, and LG. As shown in Table 3, most of the AT commands come from the RIL in Google. Note that some Bluetooth modules also contain AT commands. For Samsung, besides the modem image (md1rom.img), we could find Samsung-specific native daemons, such as at distributor. A factory testing app is also listed. For LG, atd seems to be the sole native daemon, taking care of the most AT commands.</p>
    <p>Two LG-specific apps also appear to serve some AT commands.</p>
    <p>To gain deeper insight into how AT commands can affect these systems, we analyzed the flow of AT commands starting from the gadget serial TTY device (usually /dev/ttyGS0) to any native daemons and finally to other devices or system applications. We analyzed the LG G4 and the Samsung S8+ images by reading the relevant USB init scripts and any native daemons using IDA Pro 7.0. We paired this with manual testing using the AT interface while monitoring the system with logcat.</p>
    <p>Samsung S8+. Samsungs heavy use of AT commands was confirmed through analysis of four key native daemons: ddexe, at distributor, smdexe, and port-bridge. The Data Distributor ddexe opens the primary /dev/ttyGS0 device, monitors USB for state changes, creates a UNIX domain socket server, and routes TTY data to clients. at distributor connects via UNIX socket (/data/.socket stream), receives commands, and either handles them itself or dispatches them to appropriate parts of the system.</p>
    <p>As a result of previous work (CVE-2016-4030, CVE2016-4031, and CVE-2016-4032), Samsung has locked down the exposed AT interface with a command whitelist. This whitelist is active when the ro.product ship property is set to true and limits the commands to information gathering only. Any non-whitelisted command responds with the generic reply of OK, even if it is invalid.</p>
    <p>LG G4. LG follows a similar structure to handling AT commands. Its primary daemon atd reads and writes to the gadget serial TTY device and handles or bypasses AT commands. Some commands are handled by a static dispatch table within atd and may propagate throughout the system via UNIX domain socket /dev/socket/atd. LGATCMDService is an Android background service that listens for and handles any incoming commands before sending back a response. At least 89 different commands</p>
    <p>When the reply is OK</p>
    <p>Dynamic Analysis</p>
    <p>Static Analysis</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 11</p>
    <p>AT%DLOAD  AT+SUDDLMOD=0,0  AT+FUS?</p>
    <p>Firmware Flashing</p>
    <p>AT%MODEMRESET  AT%RESTART</p>
    <p>AT%FRST  AT+CRST=FS  AT+FACTORST=0,0</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 12</p>
    <p>ATD  ATH  ATA</p>
    <p>Android Security Bypassing</p>
    <p>AT%IMEI=[param]  AT%USB=adb  AT%KEYLOCK=0  AT+CKPD  AT+CMGS  AT+CGDATA</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 13</p>
    <p>34 AT commands</p>
    <p>Sensitive Information Leaking</p>
    <p>This section demonstrates AT commands that bypass different Android security mechanisms, such as lock screen, UI notification, etc., as shown in Table 8. We were able to make phone calls by sending an ATD command to the phone. Note that this command works even if there is a screen lock on the phone. Combined with ATH and ATA, one can call any number, accept any incoming call, and end a call via a USB connection. Note that the ATD vulnerability on Samsung phones was reported 2 years ago [47], and it was patched. Neither our Note 2 nor S7 Edge is able to make a call. Nevertheless, this oncepatched vulnerability reappears on the S8+. Similarly, AT commands for managing PINs on SIM cards and connecting to the Internet using mobile data were also accessible on four of the testing phones. These commands are all standard AT commands delivered to the modem by native daemons, bypassing the Android framework. We also find an LG-specific command that allows us to change the IMEI, again bypassing the Android layer.</p>
    <p>One USB debugging enabling command is found in LG phones, together with an AT command to unlock the screen. After USB debugging is enabled using this AT command, there is no indication on the UI showing USB debugging was enabled, and there is no prompt from the UI asking for the key to be added. This shows that the whole Android layer is bypassed without being notified when we enable USB debugging using this AT command. Commands for sending touchscreen events and keystrokes are also discovered for LG phones and the S8+; we can see the indications on the screen. We suspect these AT commands were mainly designed for UI automation testing, since they mimic human interactions. Unfortunately, they also enable more complicated attacks which only requires a USB connection, as we will show in a later section.</p>
    <p>While Android security has been improving over the years with respect to protecting privacy information, we found quite a few AT commands providing different kinds of information, including IMEI, battery level, phone model, serial number, manufacturer, filesystem partition information, software version, Android version, hardware version, SIM card details, etc., as shown in Table 9.10 Vendors also introduce their own commands to</p>
    <p>Command Action Tested Phones</p>
    <p>ATI Manufacturer, model, revision, SVN, IMEI</p>
    <p>G4/S8+/Nexus5/ ZenPhone2</p>
    <p>AT%SYSCAT Read and return data from /sys/*9</p>
    <p>G3/G4</p>
    <p>AT%PROCCAT Read and return data from /proc/*</p>
    <p>G3/G4</p>
    <p>AT+DEVCONINFO Phone model, serial number, IMEI, and etc.</p>
    <p>Note2/S7Edge/S8+</p>
    <p>AT+GMR Phone model G3/G4/Note2/S8+/ ZenPhone2</p>
    <p>AT+IMEINUM IMEI number Note2/S7Edge/S8+ AT+SERIALNO Serial number Note2/S7Edge/S8+ AT+SIZECHECK Filesystem partition</p>
    <p>information Note2/S7Edge/S8+</p>
    <p>AT+VERSNAME Android version S7Edge/S8+ AT+CLAC List all supported AT</p>
    <p>commands G3/G4/S7Edge/Nexus5/ ZenPad/ZenPhone2</p>
    <p>AT+ICCID Sim card ICCID G3/G4/Nexus5</p>
    <p>Table 9: A selection of commands that leak sensitive information about the device.</p>
    <p>[['AT+DEVCONINFO\r+DEVCONINFO: MN(SM-G955U);BASE(SM-N900);VER(G955USQU1AQD9/ G955UOYN1AQD9/G955USQU1AQD9/G955USQU1AQD9); HIDVER(G955USQU1AQD9/G955UOYN1AQD9/G955USQU1AQD9/ G955USQU1AQD9);MNC();MCC();PRD(VZW);;OMCCODE(); SN(R38HC09NWMR);IMEI(354003080061555); UN(9887BC45395656444F);PN();CON(AT,MTP);LOCK(NONE); LIMIT(FALSE);SDP(RUNTIME);HVID(Data:196609, Cache:262145,System:327681);USER(OWNER)\r', '#OK#\r', 'OK\r']]</p>
    <p>Figure 6: Output from AT+DEVCONINFO on a Samsung S8+. Note information in bold corresponding to model number, serial number, IMEI, and connection type.</p>
    <p>ease querying. These are unauthenticated commands that can be accessed by anyone. One example command is AT+DEVCONINFO from S8+, providing detailed information about the phone as shown in Figure 6. Shown in bold are examples of sensitive device information, including device model (MN), serial number (SN), IMEI, and connection over MTP.</p>
    <p>We also find 3 AT commands that report all supported AT commands on the device. AT+CLAC is a standard command; AT+LIST only works on Nexus 5; and AT$QCCLAC appears to be a Qualcomm-specific command supported by Qualcomm baseband processors. Note that both AT+CLAC and AT$QCCLAC could be supported at the same time within a device, returning different lists of supported AT commands. We also leveraged these commands to limit the scope of AT commands to try when we attempted to un-brick the LG G4.</p>
    <p>Unlike other Android devices, which rely on sys.usb.config to manage the USB functionality, ASUS ZenPhone 2 has a unique setting to enable the</p>
    <p>AT+CLAC  AT$QCCLAC</p>
    <p>AT%PROCCAT  AT%SYSCAT</p>
    <p>AT%PROCCAT=../arbitrary/file</p>
    <p>AT+DEVCONINFO  AT+IMEINUM  AT+SIZECHECK</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 14</p>
    <p>AT+TRACE  AT+XDBGCONF  AT+XABBTRACE  AT+XSYSTRACE  AT+XLOG=95,1</p>
    <p>Modem AT Proxy</p>
    <p>https://forum.xda-developers.com/galaxy-s2/help/how-to-talk-to-modem-commands-t1471241</p>
    <p>https://software.intel.com/en-us/blogs/2015/04/30/new-intel-usb-driver-version-190-for-androiddevices-available-for-download</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 15</p>
    <p>AT+VZWAPNE  AT$SPDEBUG  AT%MINIOS  AT%VZWHM  AT%VZWIOTHM  AT%AUTOUITEST</p>
    <p>Hidden Menus</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 16</p>
    <p>Demo</p>
    <p>Attack I: Man-in-the-USB</p>
    <p>Attack II: Confused-deputy-path-traversal</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 17</p>
    <p>Mitigations &amp; Fixes  Remove the USB Modem interface  Restrict the USB Modem interface  Use whitelist for command filtering</p>
    <p>LVE-SMP-180001</p>
    <p>Severity : High  Date reported : February 02, 2018  Affected device information : Android devices with OS 6.0, 6.0.1,</p>
    <p>Samsung and LG have issued security updates AT</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 18</p>
    <p>Now What?</p>
    <p>https://atcommands.org</p>
  </div>
  <div class="page">
    <p>Florida Institute of Cyber Security (FICS) Research 19</p>
    <p>Q&amp;A</p>
    <p>https://davejingtian.org</p>
    <p>Thanks!</p>
  </div>
</Presentation>
