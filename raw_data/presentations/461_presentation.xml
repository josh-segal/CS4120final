<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Retroac(ve Detec(on of Malware with Applica(ons to Mobile Pla8orms</p>
    <p>Markus Jakobsson KarlAnders Johansson FatSkunk</p>
  </div>
  <div class="page">
    <p>Market forecast for mobile</p>
    <p>More smartphones than PCs in 23 years  Dominant pla@orms targeted</p>
    <p>4G will fuel apps and mobile Internet use  Mcommerce, MvoJng, Parental Control,</p>
    <p>Phones are personal, have rich data  Social use makes users more vulnerable</p>
    <p>Power limitaJons stymie AnJ Virus products  Power consumpJon increases with # threats</p>
    <p>Likely big threats:  Bluetooth viruses, (piracy) trojans, social malware</p>
  </div>
  <div class="page">
    <p>Trends: Faster, stealthier, smarter</p>
    <p>kits, recompilers, polymorphism</p>
    <p>malware oTen installs AV (limit compeJJon)</p>
    <p>produced by organized crime</p>
  </div>
  <div class="page">
    <p>Contrast: What the consumer wants</p>
    <p>Freedom Undo</p>
  </div>
  <div class="page">
    <p>What makes this challenging</p>
  </div>
  <div class="page">
    <p>Main principles</p>
    <p>To block detecJon, malware must be ac2ve.  To be acJve, malware needs to be in RAM.  RAM is faster than flash and radio.</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
    <p>Contact markus@fatskunk.com for more details incl. improvements.</p>
    <p>External verifier provides this</p>
  </div>
  <div class="page">
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
    <p>Contact markus@fatskunk.com for more details incl. improvements.</p>
    <p>External verifier will Jme this (and check result of computaJon)</p>
  </div>
  <div class="page">
    <p>Contact markus@fatskunk.com for more details incl. improvements.</p>
    <p>monolith kernel</p>
    <p>cache</p>
    <p>RAM</p>
    <p>handover to wrong process 5. Agree to die / get detected</p>
    <p>Adversary wants to replace the legiJmate monolith kernel F with a funcJon F s.t. F'(x)=F(x) for all x, running in same amount of Jme, where F and F do not hand over control to the same processes at the end of their execuJon.</p>
  </div>
  <div class="page">
    <p>Some details</p>
    <p>Only requirement: know amount/type hardware  Full use of caching (instrucJon + data)  Strategy to maximize penalty for flash access  Two adversarial models: external aoacker or no  SIM card can be used as lowlatency Jmer</p>
  </div>
  <div class="page">
    <p>Some stats</p>
    <p>Variant implemented  takes &lt;3s on 256MB, 600 MHz Android board</p>
    <p>Speedup for mulJcore  Detects all acJve malware  retroacJvely  Provable security  no heurisJcs  Suitable for mobile pla@orms  Can be combined with a secure rsync</p>
  </div>
</Presentation>
