<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Page 1</p>
    <p>Dynamic Parallel Media Processing using Speculative Broadcast Loop (SBL)</p>
    <p>Jason Fritts Assistant Professor</p>
    <p>Department of Computer Science Co-Author: Prof. Wayne Wolf</p>
    <p>Overview</p>
    <p>Current Media Processing Solutions  Increasing demand for multimedia  advanced media apps demand greater throughput and flexibility  likely solution: media processors</p>
    <p>Parallelism in Media Processing</p>
    <p>Speculative Broadcast Loop (SBL) run-time method</p>
    <p>Evaluation Environment</p>
    <p>Results</p>
    <p>Conclusions and Future Research</p>
  </div>
  <div class="page">
    <p>Page 2</p>
    <p>Digital Multimedia</p>
    <p>Ever-growing range of applications  Communication</p>
    <p>video conferencing &amp; telephony  World Wide Web  digital libraries  advertising &amp; marketing</p>
    <p>Entertainment  games  home theater</p>
    <p>Computer Vision  image understanding  surveillance &amp; tracking</p>
    <p>Education  interactive learning  virtual classrooms</p>
    <p>Ubiquitous Computing  telecommuting  home networks &amp; internet appliances  military</p>
    <p>Art and Architecture</p>
    <p>Multimedia is primarily a</p>
    <p>communication media</p>
    <p>Multimedia is primarily a</p>
    <p>communication media</p>
    <p>Future of Multimedia</p>
    <p>Multimedia is moving towards</p>
    <p>advanced representations</p>
    <p>Multimedia is moving towards</p>
    <p>advanced representations</p>
    <p>Multimedia industry evolves with processor performance.</p>
    <p>Multimedia industry evolves with processor performance.</p>
    <p>P ro</p>
    <p>ce ss</p>
    <p>in g</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Compression</p>
    <p>Video</p>
    <p>Object-Based</p>
    <p>Multimedia</p>
    <p>Image</p>
    <p>Compression</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Page 3</p>
    <p>Current Media Processing Methods</p>
    <p>Application-specific processors  good performance  low cost &amp; power  BUT, limited flexibility</p>
    <p>Multimedia extensions to general-purpose processors  utilizes both ILP and subword parallelism  speedups of 2-8x possible using subword parallelism  minimal additional cost  BUT, processor optimized for GPP apps, not media apps</p>
    <p>Current programmable media processors (PMPs)  good performance</p>
    <p>special functional units: DCT, VBR coder, motion estimation  moderate frequency  reasonable flexibility</p>
    <p>special programming libraries or paradigms  current processors target a subset of media types</p>
    <p>graphics &amp; video / video &amp; audio / audio &amp; speech / etc.   ideally, desirable that processor be as general as possible</p>
    <p>Parallelism in Media Processing</p>
  </div>
  <div class="page">
    <p>Page 4</p>
    <p>Potential Parallelism</p>
    <p>H.263 Decode</p>
    <p>H.263 Encode</p>
    <p>MPEG-2 Decode</p>
    <p>MPEG-2 Encode</p>
    <p>MPEG-4 Decode</p>
    <p>MPEG-4 Encode</p>
    <p>Application</p>
    <p>IP C</p>
    <p>- video applications indicate significant</p>
    <p>available parallelism</p>
    <p>Studies indicate significant parallelism  Trace-driven studies (Oracle experiments)</p>
    <p>Where is parallelism available?  Data Parallelism</p>
    <p>Parallelism in Multimedia</p>
    <p>A) Instruction Level Parallelism (ILP)  Typical speedup of 2x</p>
    <p>B) Subword Parallelism  2-4x speedup with hand scheduling  Effective compilation unavailable (under development)</p>
    <p>C) Multi-processor (Loop-Level) Parallelism  Requires parallel compiler techniques  Currently most underutilized means of parallelism</p>
    <p>D) Task-Level Parallelism  Typically requires explicit parallel programming by user  Often used in hardware</p>
    <p>Coarser Granularity,</p>
    <p>More Potential, Lower</p>
    <p>Compilability</p>
    <p>Finer Granularity,</p>
    <p>Less Potential, Higher</p>
    <p>Compilability</p>
    <p>A B C D</p>
  </div>
  <div class="page">
    <p>Page 5</p>
    <p>Existing Programmable Media Processors</p>
    <p>MicroUnity MediaProcesor</p>
    <p>Samsung MSP-1</p>
    <p>Equator/Hitachi MAP1000A</p>
    <p>NEC V830R/AV</p>
    <p>Chromatic Research Mpact-1</p>
    <p>Chromatic Research Mpact-2</p>
    <p>Texas Instruments MVP (C8x)</p>
    <p>Texas Instruments VelociTI (C6x)</p>
    <p>Philips TriMedia TM-1000</p>
    <p>Philips TriMedia TM-2000</p>
    <p>Specialized Hardware</p>
    <p>ILP</p>
    <p>-</p>
    <p>Subword Parallelism</p>
    <p>50 MHz</p>
    <p>- 8-wide - 300 MHz</p>
    <p>5-wide - ~300 MHz</p>
    <p>5-wide</p>
    <p>-- 2-wide - 200 MHz</p>
    <p>4-wide</p>
    <p>5-wide</p>
    <p>-</p>
    <p>Media Processor Parallel</p>
    <p>Processing Clock</p>
    <p>Frequency</p>
    <p>?</p>
    <p>6-wide - 125 MHz</p>
    <p>Loop Characteristics</p>
    <p>v i d e</p>
    <p>o im</p>
    <p>a g e</p>
    <p>g r a p</p>
    <p>h i c s</p>
    <p>a u d i</p>
    <p>o</p>
    <p>sp e e</p>
    <p>c h</p>
    <p>se c u</p>
    <p>rit y</p>
    <p>m e d</p>
    <p>ia n</p>
    <p>M e d ia T yp e</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>N um</p>
    <p>be r</p>
    <p>of I</p>
    <p>te ra</p>
    <p>tio ns</p>
    <p>- large number of iterations</p>
    <p>per loop</p>
    <p>- highly loop centric</p>
    <p>Loop Level</p>
    <p>L o</p>
    <p>o p</p>
    <p>E x</p>
    <p>ec u</p>
    <p>ti on</p>
    <p>W ei</p>
    <p>g h</p>
    <p>t (%</p>
    <p>)</p>
    <p>video image</p>
    <p>graphics</p>
    <p>audio</p>
    <p>speech security</p>
    <p>average</p>
  </div>
  <div class="page">
    <p>Page 6</p>
    <p>Speculative Broadcast Loop (SBL) Method</p>
    <p>Hand-Scheduling Experiment Traditional DCT</p>
    <p>r0 = m r1 = n r2 = i r3 = j r4 = m * 4 r5 = n * 4 r6 = i * 4 r7 = j * 4 r8 = i * 4 * 8 r9 = j * 4 * 8</p>
    <p>r10 = &amp;x[0][0] r11 = &amp;x[i][0] r12 = &amp;c[0][n] r13 = &amp;c[0][m] r14 = &amp;c[i][m] r15 = x[i][j] r16 = c[i][m] r17 = c[j][l] r20 = y[m][n] r21 = &amp;y[m][n]</p>
    <p>for (m = 0; m &lt; 8; m++) for (n = 0; n &lt; 8; n++) {</p>
    <p>y[m][n] = 0;</p>
    <p>for (i = 0; i &lt; 8; i++) for (j = 0; j &lt; 8; j++)</p>
    <p>y[m][n] += y[m][n] + x[i][j] * c[i][m] * c[j][n]; }</p>
    <p>L0: mult r6, r2, 4 (1) mult r8, r6, 8 (2) add r11, r10, r8 (3) load r14, r13, r8 (4) add r20, 0, 0 (5)</p>
    <p>L1: mult r7, r3, 4 (6) mult r9, r7, 8 (7) load r15, r11, r7 (8) load r17, r12, r9 (9) mult r18, r16, r15 (10) mult r19, r18, r17 (11) add r20, r20, r19 (12) add r3, r3, 1 (13) bge r3, 8, L1 (14)</p>
    <p>L2: store r21, r20 (15) add r2, r2, 1 (16) bge r2, 8, L0 (17)</p>
    <p>L0: mult r6, r2, 4 (1) mult r8, r6, 8 (2) add r11, r10, r8 (3) load r14, r13, r8 (4) add r20, 0, 0 (5)</p>
    <p>L1: mult r7, r3, 4 (6) mult r9, r7, 8 (7) load r15, r11, r7 (8) load r17, r12, r9 (9) mult r18, r16, r15 (10) mult r19, r18, r17 (11) add r20, r20, r19 (12) add r3, r3, 1 (13) bge r3, 8, L1 (14)</p>
    <p>L2: store r21, r20 (15) add r2, r2, 1 (16) bge r2, 8, L0 (17)</p>
    <p>Two inner loops:</p>
  </div>
  <div class="page">
    <p>Page 7</p>
    <p>SIMD Parallelism Across Clusters</p>
    <p>L1</p>
    <p>L0</p>
    <p>L2</p>
    <p>i</p>
    <p>j</p>
    <p>n</p>
    <p>L1</p>
    <p>L0</p>
    <p>L2</p>
    <p>j</p>
    <p>L1</p>
    <p>L0</p>
    <p>L2</p>
    <p>j</p>
    <p>. . . (SIMD loop l)</p>
    <p>i i n</p>
    <p>X</p>
    <p>X = num clusters</p>
    <p>Speedup from SIMD Parallelism Across Clusters</p>
    <p>Full Search Motion Est.</p>
    <p>Motion Est.</p>
    <p>Straight DCT</p>
    <p>Row/Col DCT</p>
    <p>RGB to YCrCb CSC</p>
    <p>Kernel</p>
    <p>S p</p>
    <p>ee d</p>
    <p>u p</p>
  </div>
  <div class="page">
    <p>Page 8</p>
    <p>Parallel Compiler and Architecture Methods</p>
    <p>Determine independence of loop iterations  Static parallelization by a parallel compiler</p>
    <p>memory disambiguation may not be able to determine parallelism  must conservatively assume loop iterations are not parallel</p>
    <p>Run-time parallelization enables optimistic parallelization  non-speculative -&gt; inspector/executor approach  speculative -&gt; dynamic memory conflict checking</p>
    <p>Speculative run-time methods  LRPD Test (Rauchwerger)  Multiscalar Project (Franklin, Sohi)  Thread-Level Data Speculation (TLDS) (Mowry)  Thread-Level Speculation (TLS) (Olukotun, Lam)</p>
    <p>[LRauchwerger95] The LRPD Test: Speculative Run-Time Parallelization of Loops with Privatization and Reduction Parallelism, PLDI, 1995.</p>
    <p>[MFranklin93] The Multiscalar Architecture, Ph.D. Thesis, University of Wisconsin at Madison, 1993.</p>
    <p>[JGregory98] The Potential for Using Thread-Level Data Speculation to Facilitate Automatic Parallelization, HPCA-4, 1998.</p>
    <p>[JOplinger97] Software and Hardware for Exploiting Speculative Parallelism with a Multiprocessor, Technical Report CSL-TR-97-715, Stanford University, 1997.</p>
    <p>Speculative Broadcast Loop (SBL) Execution</p>
    <p>Speculative SIMD parallelism method for data parallelism  Simplified version of Multiscalar, TLDS, TLS approaches  Supports fully and partially parallel loops  Does not support parallelism across function boundaries</p>
    <p>SBL method ideal for multi-cluster architecture  Single instruction control stream may be broadcast for SIMD execution  Cluster independence corresponds well with loop independence  Processing regularity of multimedia data parallelism seems ideal for</p>
    <p>SIMD parallelism  Control synchronization is implicit in single control stream</p>
    <p>only need synchronization to ensure memory correctness</p>
    <p>Separate clusters provides automatic scalar privatization</p>
  </div>
  <div class="page">
    <p>Page 9</p>
    <p>Wide Issue =&gt; Clustered Architecture</p>
    <p>Global register file too slow for wide issue</p>
    <p>Separate datapath into disjoint clusters:  functional units (2-4 issue slots)  local register register file  local memories/caches</p>
    <p>Low latency network between clusters</p>
    <p>Cluster Cluster Cluster Cluster Instruction Cache</p>
    <p>Cluster Cluster Cluster Cluster</p>
    <p>Instruction Cache</p>
    <p>C on</p>
    <p>trol</p>
    <p>Network</p>
    <p>Mult Data RAM</p>
    <p>Register File</p>
    <p>ALU</p>
    <p>FPShift</p>
    <p>Implementing SBL Execution</p>
    <p>Major aspects of SBL execution  Loop broadcast and multi-level loop scheduling for SIMD parallelism across a</p>
    <p>multi-cluster architecture  Hardware support for large-scale speculative parallel execution</p>
    <p>Steps to implement SBL execution  Find potentially parallel loops using profiling and register dependence analysis  Select loops for broadcast and schedule them to eliminate all unnecessary</p>
    <p>branches (Multi-Level If-Conversion)  Provide speculative hardware for support large speculative state</p>
    <p>Multi-Level If-Conversion  Inner loops: combine all control paths into single control path  Nested loops: recursively if-convert nested loop regions</p>
  </div>
  <div class="page">
    <p>Page 10</p>
    <p>If-Conversion of Inner Loops</p>
    <p>(combine loop exits)</p>
    <p>BB2</p>
    <p>BB1</p>
    <p>BB0</p>
    <p>BBz</p>
    <p>BBe BBf</p>
    <p>BBdBBc</p>
    <p>BBb</p>
    <p>BBa</p>
    <p>BBe BBf</p>
    <p>new loop back basic block</p>
    <p>BBb</p>
    <p>BBdBBc</p>
    <p>BBz</p>
    <p>BB0</p>
    <p>BB1</p>
    <p>BB2</p>
    <p>rb = 0 ra = 0</p>
    <p>rc = 0 BBa</p>
    <p>ra = 1</p>
    <p>taken when rc == 1</p>
    <p>BBz rc = (loop back condition)</p>
    <p>rb = 1</p>
    <p>taken when rc == 0</p>
    <p>basic block new loop exit</p>
    <p>BB0</p>
    <p>rb == 1 taken when</p>
    <p>ra == 1 taken when</p>
    <p>If-Conversion of Nested Loop Regions</p>
    <p>Divide nested loop into inner loops, preloop regions, and post loop regions</p>
    <p>If-Conversion is similar for inner loops, preloop regions, and post loop regions</p>
    <p>Recursively apply nested loop if-conversion until no remaining nested loops</p>
    <p>combine_loop_exits (main_loop) { if (main_loop has child loops) { for each (child_loop) { combine_loop_exits (child_loop); combine_pre_loop_exits (child_loop); } combine_post_loop_exits ( child_loop); } else combine_inner_loop_exits (child_loop); }</p>
    <p>Pre-Loop Region</p>
    <p>Body Inner Loop</p>
    <p>Post-Loop Region</p>
  </div>
  <div class="page">
    <p>Page 11</p>
    <p>Speculative Hardware Support for SBL Execution</p>
    <p>SBL method must support speculation for  Memory Independence Speculation  Control Flow Speculation  Loop Continuance Speculation</p>
    <p>For large speculative state, use L1 data cache  Also need checkpoints and a restorable register file</p>
    <p>Loop Memory Conflict (LMC) cache monitors all memory accesses</p>
    <p>Memory conflict checking:  Compares memory accesses for separate iterations  Clusters have left-to-right ordering  Store-load conflict</p>
    <p>cancel iterations beyond load  Load-store/store-store conflict</p>
    <p>cancel iterations beyond first load or store</p>
    <p>load</p>
    <p>store</p>
    <p>X</p>
    <p>. . . . . .</p>
    <p>X</p>
    <p>store load</p>
    <p>or store</p>
    <p>X</p>
    <p>. . . . . .</p>
    <p>XX X</p>
    <p>Loop Memory Conflict (LMC) Cache</p>
    <p>- global LMC cache</p>
    <p>- distributed LMC cache</p>
    <p>BCI = byte conflict info</p>
    <p>. . .</p>
    <p>k -1Set</p>
    <p>Set 0</p>
    <p>Set 1</p>
    <p>Cluster 0 Cluster 1 Cluster 2 -1 jCluster. . .</p>
    <p>Cluster 0 Cluster 1 Cluster 2 -1 jCluster. . .</p>
    <p>BCI = byte conflict info</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Checker Conflict</p>
    <p>- compare tags of lines in same sets for each iteration</p>
    <p>- if tags match, check if iterations access the same byte</p>
    <p>- if multiple iterations access the same byte and at least one access is a write, indicate a conflict</p>
  </div>
  <div class="page">
    <p>Page 12</p>
    <p>Evaluation Environment</p>
    <p>MediaBench Benchmark Suite</p>
    <p>Developed at UCLA  MediaBench II currently under development</p>
    <p>[CLee97] MediaBench: A Tool for Evaluating and Synthesizing Multimedia Communication Systems, MICRO-30, 1997.</p>
    <p>Excellent combination of applications  video: MPEG-2  audio: ADPCM coder  graphics: Mesa  image: JPEG, EPIC, Ghostscript  security: PGP, Pegwit  speech: GSM, G.721, Rasta</p>
    <p>Augmented for greater representation of future multimedia  MPEG-4 object-oriented video  H.263 very-low bitrate video</p>
  </div>
  <div class="page">
    <p>Page 13</p>
    <p>IMPACT Compilation and Simulation Environment</p>
    <p>Aggressive ILP research compiler  speculation (via the superblock optimization)  predication (via the hyperblock optimization)  loop unrolling  BUT, does not support parallel compiler optimizations</p>
    <p>Architecture-independent evaluation  large, generic instruction set  retargetable back-end</p>
    <p>Performance analysis tools  profiling  simulation for superscalar &amp; VLIW architectures  extended simulation tools for simulation of:</p>
    <p>multi-cluster architectures  SIMD multi-processing</p>
    <p>Initial results assume perfect caches and classical compilation  further results also indicate very good memory performance</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Page 14</p>
    <p>Performance of SBL Execution</p>
    <p>- speedup of SBL execution on parallel loops in MediaBench</p>
    <p>- speedup of SBL method for full applications</p>
    <p>It er</p>
    <p>at io</p>
    <p>ns E</p>
    <p>xe cu</p>
    <p>te d</p>
    <p>i n</p>
    <p>P ar</p>
    <p>al le</p>
    <p>l</p>
    <p>Ideal Perfect True</p>
    <p>S pe</p>
    <p>ed up</p>
    <p>VLIW (ideal) VLIW (true) out-of-order superscalar (ideal) out-of-order superscalar (true)</p>
    <p>Improving Performance of SBL Execution</p>
    <p>- parallelism found by SBL execution</p>
    <p>- speedup from manually applying parallel compiler optimizations</p>
    <p>cj pe</p>
    <p>g</p>
    <p>dj pe</p>
    <p>g</p>
    <p>ep ic</p>
    <p>g7 21</p>
    <p>de c</p>
    <p>g7 21</p>
    <p>en c</p>
    <p>gs m</p>
    <p>de co</p>
    <p>de</p>
    <p>gs m</p>
    <p>en co</p>
    <p>de</p>
    <p>h2 63</p>
    <p>de c</p>
    <p>h2 63</p>
    <p>en c</p>
    <p>m ip</p>
    <p>m ap</p>
    <p>m pe</p>
    <p>g2 de</p>
    <p>c</p>
    <p>m pe</p>
    <p>g2 en</p>
    <p>c</p>
    <p>m pe</p>
    <p>g4 de</p>
    <p>c</p>
    <p>pe gw</p>
    <p>it de</p>
    <p>c</p>
    <p>pe gw</p>
    <p>it en</p>
    <p>c</p>
    <p>ra st</p>
    <p>a</p>
    <p>te xg</p>
    <p>en</p>
    <p>un ep</p>
    <p>ic</p>
    <p>Application</p>
    <p>L o</p>
    <p>o p</p>
    <p>P ar</p>
    <p>al le</p>
    <p>li sm</p>
    <p>( %</p>
    <p>) Training Data Set Evaluation Data Set</p>
    <p>S p</p>
    <p>ee d</p>
    <p>up</p>
    <p>VLIW (original)</p>
    <p>VLIW (parallelized)</p>
    <p>out-of-order superscalar (original) out-of-order superscalar (parallelized)</p>
  </div>
  <div class="page">
    <p>Page 15</p>
    <p>Conclusions and Future Work</p>
    <p>Conclusions  Multi-level if-conversion effective at minimizing control deviations in SIMD parallelism  Achieved performance within 80-90% of ideal parallelism on parallel loops (for up to</p>
    <p>Future Research  Use Parallel Compiler to Extract Data Parallelism</p>
    <p>available parallelism for static SIMD parallelism  available parallelism for SBL execution method  available parallelism for static multiprocessor parallelism</p>
    <p>Evaluate SBL Method on Single-Chip Multiprocessor  available parallelism for SBL execution on multiprocessor</p>
    <p>Examine hybrid of SBL and LRPD test  perform conflict checking only on memory accesses with indeterminate data dependences</p>
    <p>Extend Multi-Level If-Conversion to Subword Parallelism</p>
  </div>
</Presentation>
