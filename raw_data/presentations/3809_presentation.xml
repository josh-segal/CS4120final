<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Security In The Software Development Lifecycle</p>
    <p>Hala Assal &amp; Sonia Chiasson School of Computer Science, Carleton University</p>
    <p>Ottawa ON, Canada HalaAssal@scs.carleton.ca</p>
  </div>
  <div class="page">
    <p>Why?</p>
    <p>Vulnerabilities persist</p>
    <p>Increasing and evolving threats</p>
    <p>Developers are not the enemy</p>
    <p>https://www.forbes.com</p>
  </div>
  <div class="page">
    <p>Related Work  Security tools adoption</p>
    <p>E.g., Witschey et al., 2014; Xiao et al., 2014; Xie et al., 2011</p>
    <p>Proposing and improving new tools and methodologies</p>
    <p>E.g., Smith et al., 2018; Nguyen et al., 2017; Xie et al., 2011</p>
    <p>Developers abilities and experience</p>
    <p>E.g., Smith et al., 2015; Oliveira et al., 2014; Baca et al., 2009 3</p>
  </div>
  <div class="page">
    <p>The overall security process Existing practices compared to best practices</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Interview study Explore existing</p>
    <p>practices Amalgamate best</p>
    <p>practices</p>
    <p>Compare practices Explore influential</p>
    <p>factors</p>
  </div>
  <div class="page">
    <p>Study Design</p>
    <p>Semi-structured interview</p>
    <p>Software engineering + security topics</p>
    <p>~1hr sessions</p>
    <p>Audio recorded and transcribed</p>
  </div>
  <div class="page">
    <p>Participants</p>
    <p>13 professional developers</p>
    <p>Avg. experience = 9.35 years (Md=8)</p>
    <p>15 teams in 15 different companies</p>
    <p>7 SMEs and 8 large enterprises</p>
  </div>
  <div class="page">
    <p>Analysis Methodology</p>
    <p>Qualitative Content Analysis (Elo &amp; Kyngs, 2008)</p>
    <p>Deductive and inductive approaches</p>
    <p>Analysis Matrix of development activities</p>
    <p>264 unique excerpts</p>
    <p>Selecting the unit of analysis</p>
    <p>Making sense of the data and obtain a sense of whole</p>
    <p>Open coding</p>
    <p>Coding sheets</p>
    <p>Grouping</p>
    <p>Categorization</p>
    <p>Abstraction</p>
    <p>Developing structured analysis</p>
    <p>matrix</p>
    <p>Data coding according to the categories</p>
    <p>Hypothesis testing and comparison to earlier studies</p>
    <p>Developing analysis matrix</p>
    <p>Data gathering by content</p>
    <p>Model, conceptual system conceptual map or categories</p>
    <p>Deductive approach Inductive approach</p>
  </div>
  <div class="page">
    <p>Analysis Methodology</p>
    <p>Qualitative Content Analysis (Elo &amp; Kyngs, 2008)</p>
    <p>Deductive and inductive approaches</p>
    <p>Analysis Matrix of development activities</p>
    <p>264 unique excerpts</p>
    <p>Selecting the unit of analysis</p>
    <p>Making sense of the data and obtain a sense of whole</p>
    <p>Open coding</p>
    <p>Coding sheets</p>
    <p>Grouping</p>
    <p>Categorization</p>
    <p>Abstraction</p>
    <p>Developing structured analysis</p>
    <p>matrix</p>
    <p>Data coding according to the categories</p>
    <p>Hypothesis testing and comparison to earlier studies</p>
    <p>Developing analysis matrix</p>
    <p>Data gathering by content</p>
    <p>Model, conceptual system conceptual map or categories</p>
    <p>Deductive approach Inductive approach</p>
  </div>
  <div class="page">
    <p>Analysis Methodology</p>
    <p>Qualitative Content Analysis (Elo &amp; Kyngs, 2008)</p>
    <p>Deductive and inductive approaches</p>
    <p>Analysis Matrix of development activities</p>
    <p>264 unique excerpts</p>
    <p>Selecting the unit of analysis</p>
    <p>Making sense of the data and obtain a sense of whole</p>
    <p>Open coding</p>
    <p>Coding sheets</p>
    <p>Grouping</p>
    <p>Categorization</p>
    <p>Abstraction</p>
    <p>Developing structured analysis</p>
    <p>matrix</p>
    <p>Data coding according to the categories</p>
    <p>Hypothesis testing and comparison to earlier studies</p>
    <p>Developing analysis matrix</p>
    <p>Data gathering by content</p>
    <p>Model, conceptual system conceptual map or categories</p>
    <p>Deductive approach Inductive approach</p>
  </div>
  <div class="page">
    <p>Analysis Methodology</p>
    <p>Qualitative Content Analysis (Elo &amp; Kyngs, 2008)</p>
    <p>Deductive and inductive approaches</p>
    <p>Analysis Matrix of development activities</p>
    <p>264 unique excerpts</p>
    <p>Selecting the unit of analysis</p>
    <p>Making sense of the data and obtain a sense of whole</p>
    <p>Open coding</p>
    <p>Coding sheets</p>
    <p>Grouping</p>
    <p>Categorization</p>
    <p>Abstraction</p>
    <p>Developing structured analysis</p>
    <p>matrix</p>
    <p>Data coding according to the categories</p>
    <p>Hypothesis testing and comparison to earlier studies</p>
    <p>Developing analysis matrix</p>
    <p>Data gathering by content</p>
    <p>Model, conceptual system conceptual map or categories</p>
    <p>Deductive approach Inductive approach</p>
  </div>
  <div class="page">
    <p>Analysis Methodology</p>
    <p>Qualitative Content Analysis (Elo &amp; Kyngs, 2008)</p>
    <p>Deductive and inductive approaches</p>
    <p>Analysis Matrix of development activities</p>
    <p>264 unique excerpts</p>
    <p>Selecting the unit of analysis</p>
    <p>Making sense of the data and obtain a sense of whole</p>
    <p>Open coding</p>
    <p>Coding sheets</p>
    <p>Grouping</p>
    <p>Categorization</p>
    <p>Abstraction</p>
    <p>Developing structured analysis</p>
    <p>matrix</p>
    <p>Data coding according to the categories</p>
    <p>Hypothesis testing and comparison to earlier studies</p>
    <p>Developing analysis matrix</p>
    <p>Data gathering by content</p>
    <p>Model, conceptual system conceptual map or categories</p>
    <p>Deductive approach Inductive approach</p>
  </div>
  <div class="page">
    <p>Security In Practice</p>
  </div>
  <div class="page">
    <p>The Security Adopters &amp; The Security Inattentive</p>
    <p>Security Adopters Security Inattentive</p>
    <p>: secure, : somewhat secure, : not secure, : not performed, : no data 14</p>
  </div>
  <div class="page">
    <p>Table 2: Summary of themes emerging from the security adopters and the security inattentive, and common themes between the two groups. Although common themes exist, driving factors for these themes may dier. See Section 4.2 for more details.</p>
    <p>Security Adopters Themes Common Themes Security Inattentive Themes</p>
    <p>Design</p>
    <p>Security design is very important  Security is not considered in the design stage</p>
    <p>Security consideration in the design stage is adhoc</p>
    <p>Implementation</p>
    <p>Security is a priority during implementation</p>
    <p>Developers awareness of security is expected when implementing</p>
    <p>Security is not a priority during implementation  Developers take security for granted  Developers misuse frameworks  Developers lack security knowledge  Developers perceive their security knowledge inaccurately  Vulnerability discovery can motivate security</p>
    <p>Developer Testing</p>
    <p>Developers test for security fortuitously  Security is a priority during developer testing</p>
    <p>Developers do not test for security  Developers security testing is feature-driven</p>
    <p>Code Analysis</p>
    <p>Security is a priority during code analysis  Security is a secondary objective during code analysis  Developers rarely perform code analysis, never for security  Developers vary in awareness of analysis tools</p>
    <p>Code Review</p>
    <p>Code review is a formal process that includes security  Preliminary code review is done as a checkpoint before the formal review</p>
    <p>Security is not considered during code review  Security consideration in code review is minimal</p>
    <p>Post-development Testing</p>
    <p>Security is a priority during post-development testing  Post-development testing is used to discover security vulnerabilities, or for final verification</p>
    <p>Testers have the final approval</p>
    <p>Security is not considered in post-development testing  Post-development testing plans include a security dimension  Post-development security testing is feature-driven  Post-development security testing is adhoc  Post-development security testing is externally-driven</p>
    <p>and developers, whereas the Testing Guide [4] focuses on best practices for testing and evaluating security activities.</p>
    <p>Others. Additional resources for security best practices include: NASAs Software Assurance Guidebook [39], NISTs Special Publication 800-64 [32], US-CERTs Top 10 Secure Coding Practices [47], as well as various articles emphasizing the importance of secure development [7,36,37,57].</p>
    <p>B1 Identify security requirements. Identify security requirements for your application during the initial planning stages. The security of the application throughout its different stages should be evaluated based on its compliance with security requirements. B2 Design for security. Aim for simple designs because</p>
    <p>the likelihood of implementation errors increases with design complexity. Architect and design your software to implement security policies and comply with security principles such as: secure defaults, default deny, fail safe, and the principle of least privilege. B3 Perform threat modelling. Use threat modelling to analyze potential threats to your application. The result of threat modelling should inform security practices in the dierent SDLC stages, e.g., for creating test plans. B4 Perform secure implementation. Adopt secure coding standards for the programming language you use, e.g., validate input and sanitize data sent to other systems, and avoid using unsafe or deprecated functions. B5 Use approved tools and analyze third-party tools security. Only use approved tools, APIs, and frameworks or those evaluated for security and eectiveness. B6 Include security in testing. Integrate security testing in functional test plans to reduce redundancy. B7 Perform code analysis. Leverage automated tools such as SATs to detect vulnerabilities like buer overflows and improper user input validation. B8 Perform code review for security. Include security in code reviews and look for common programming errors that can lead to security vulnerabilities. B9 Perform post-development testing. Identify security issues further by using a combination of methods, e.g., dynamic analysis, penetration testing, or hiring external security reviewers to bring in a new perspective.</p>
    <p>B10 Apply defense in depth. Build security in all stages of the SDLC, so that if a vulnerability is missed in one stage, there is a chance to eliminate it through practices implemented in the remaining stages.</p>
  </div>
  <div class="page">
    <p>Table 2: Summary of themes emerging from the security adopters and the security inattentive, and common themes between the two groups. Although common themes exist, driving factors for these themes may dier. See Section 4.2 for more details.</p>
    <p>Security Adopters Themes Common Themes Security Inattentive Themes</p>
    <p>Design</p>
    <p>Security design is very important  Security is not considered in the design stage</p>
    <p>Security consideration in the design stage is adhoc</p>
    <p>Implementation</p>
    <p>Security is a priority during implementation</p>
    <p>Developers awareness of security is expected when implementing</p>
    <p>Security is not a priority during implementation  Developers take security for granted  Developers misuse frameworks  Developers lack security knowledge  Developers perceive their security knowledge inaccurately  Vulnerability discovery can motivate security</p>
    <p>Developer Testing</p>
    <p>Developers test for security fortuitously  Security is a priority during developer testing</p>
    <p>Developers do not test for security  Developers security testing is feature-driven</p>
    <p>Code Analysis</p>
    <p>Security is a priority during code analysis  Security is a secondary objective during code analysis  Developers rarely perform code analysis, never for security  Developers vary in awareness of analysis tools</p>
    <p>Code Review</p>
    <p>Code review is a formal process that includes security  Preliminary code review is done as a checkpoint before the formal review</p>
    <p>Security is not considered during code review  Security consideration in code review is minimal</p>
    <p>Post-development Testing</p>
    <p>Security is a priority during post-development testing  Post-development testing is used to discover security vulnerabilities, or for final verification</p>
    <p>Testers have the final approval</p>
    <p>Security is not considered in post-development testing  Post-development testing plans include a security dimension  Post-development security testing is feature-driven  Post-development security testing is adhoc  Post-development security testing is externally-driven</p>
    <p>and developers, whereas the Testing Guide [4] focuses on best practices for testing and evaluating security activities.</p>
    <p>Others. Additional resources for security best practices include: NASAs Software Assurance Guidebook [39], NISTs Special Publication 800-64 [32], US-CERTs Top 10 Secure Coding Practices [47], as well as various articles emphasizing the importance of secure development [7,36,37,57].</p>
    <p>B1 Identify security requirements. Identify security requirements for your application during the initial planning stages. The security of the application throughout its different stages should be evaluated based on its compliance with security requirements. B2 Design for security. Aim for simple designs because</p>
    <p>the likelihood of implementation errors increases with design complexity. Architect and design your software to implement security policies and comply with security principles such as: secure defaults, default deny, fail safe, and the principle of least privilege. B3 Perform threat modelling. Use threat modelling to analyze potential threats to your application. The result of threat modelling should inform security practices in the dierent SDLC stages, e.g., for creating test plans. B4 Perform secure implementation. Adopt secure coding standards for the programming language you use, e.g., validate input and sanitize data sent to other systems, and avoid using unsafe or deprecated functions. B5 Use approved tools and analyze third-party tools security. Only use approved tools, APIs, and frameworks or those evaluated for security and eectiveness. B6 Include security in testing. Integrate security testing in functional test plans to reduce redundancy. B7 Perform code analysis. Leverage automated tools such as SATs to detect vulnerabilities like buer overflows and improper user input validation. B8 Perform code review for security. Include security in code reviews and look for common programming errors that can lead to security vulnerabilities. B9 Perform post-development testing. Identify security issues further by using a combination of methods, e.g., dynamic analysis, penetration testing, or hiring external security reviewers to bring in a new perspective.</p>
    <p>B10 Apply defense in depth. Build security in all stages of the SDLC, so that if a vulnerability is missed in one stage, there is a chance to eliminate it through practices implemented in the remaining stages.</p>
    <p>Sec urit</p>
    <p>y Ad opt</p>
    <p>ers</p>
    <p>Sec urit</p>
    <p>y In atte</p>
    <p>ntiv e</p>
  </div>
  <div class="page">
    <p>Table 2: Summary of themes emerging from the security adopters and the security inattentive, and common themes between the two groups. Although common themes exist, driving factors for these themes may dier. See Section 4.2 for more details.</p>
    <p>Security Adopters Themes Common Themes Security Inattentive Themes</p>
    <p>Design</p>
    <p>Security design is very important  Security is not considered in the design stage</p>
    <p>Security consideration in the design stage is adhoc</p>
    <p>Implementation</p>
    <p>Security is a priority during implementation</p>
    <p>Developers awareness of security is expected when implementing</p>
    <p>Security is not a priority during implementation  Developers take security for granted  Developers misuse frameworks  Developers lack security knowledge  Developers perceive their security knowledge inaccurately  Vulnerability discovery can motivate security</p>
    <p>Developer Testing</p>
    <p>Developers test for security fortuitously  Security is a priority during developer testing</p>
    <p>Developers do not test for security  Developers security testing is feature-driven</p>
    <p>Code Analysis</p>
    <p>Security is a priority during code analysis  Security is a secondary objective during code analysis  Developers rarely perform code analysis, never for security  Developers vary in awareness of analysis tools</p>
    <p>Code Review</p>
    <p>Code review is a formal process that includes security  Preliminary code review is done as a checkpoint before the formal review</p>
    <p>Security is not considered during code review  Security consideration in code review is minimal</p>
    <p>Post-development Testing</p>
    <p>Security is a priority during post-development testing  Post-development testing is used to discover security vulnerabilities, or for final verification</p>
    <p>Testers have the final approval</p>
    <p>Security is not considered in post-development testing  Post-development testing plans include a security dimension  Post-development security testing is feature-driven  Post-development security testing is adhoc  Post-development security testing is externally-driven</p>
    <p>and developers, whereas the Testing Guide [4] focuses on best practices for testing and evaluating security activities.</p>
    <p>Others. Additional resources for security best practices include: NASAs Software Assurance Guidebook [39], NISTs Special Publication 800-64 [32], US-CERTs Top 10 Secure Coding Practices [47], as well as various articles emphasizing the importance of secure development [7,36,37,57].</p>
    <p>B1 Identify security requirements. Identify security requirements for your application during the initial planning stages. The security of the application throughout its different stages should be evaluated based on its compliance with security requirements. B2 Design for security. Aim for simple designs because</p>
    <p>the likelihood of implementation errors increases with design complexity. Architect and design your software to implement security policies and comply with security principles such as: secure defaults, default deny, fail safe, and the principle of least privilege. B3 Perform threat modelling. Use threat modelling to analyze potential threats to your application. The result of threat modelling should inform security practices in the dierent SDLC stages, e.g., for creating test plans. B4 Perform secure implementation. Adopt secure coding standards for the programming language you use, e.g., validate input and sanitize data sent to other systems, and avoid using unsafe or deprecated functions. B5 Use approved tools and analyze third-party tools security. Only use approved tools, APIs, and frameworks or those evaluated for security and eectiveness. B6 Include security in testing. Integrate security testing in functional test plans to reduce redundancy. B7 Perform code analysis. Leverage automated tools such as SATs to detect vulnerabilities like buer overflows and improper user input validation. B8 Perform code review for security. Include security in code reviews and look for common programming errors that can lead to security vulnerabilities. B9 Perform post-development testing. Identify security issues further by using a combination of methods, e.g., dynamic analysis, penetration testing, or hiring external security reviewers to bring in a new perspective.</p>
    <p>B10 Apply defense in depth. Build security in all stages of the SDLC, so that if a vulnerability is missed in one stage, there is a chance to eliminate it through practices implemented in the remaining stages.</p>
    <p>Com mon</p>
  </div>
  <div class="page">
    <p>Table 2: Summary of themes emerging from the security adopters and the security inattentive, and common themes between the two groups. Although common themes exist, driving factors for these themes may dier. See Section 4.2 for more details.</p>
    <p>Security Adopters Themes Common Themes Security Inattentive Themes</p>
    <p>Design</p>
    <p>Security design is very important  Security is not considered in the design stage</p>
    <p>Security consideration in the design stage is adhoc</p>
    <p>Implementation</p>
    <p>Security is a priority during implementation</p>
    <p>Developers awareness of security is expected when implementing</p>
    <p>Security is not a priority during implementation  Developers take security for granted  Developers misuse frameworks  Developers lack security knowledge  Developers perceive their security knowledge inaccurately  Vulnerability discovery can motivate security</p>
    <p>Developer Testing</p>
    <p>Developers test for security fortuitously  Security is a priority during developer testing</p>
    <p>Developers do not test for security  Developers security testing is feature-driven</p>
    <p>Code Analysis</p>
    <p>Security is a priority during code analysis  Security is a secondary objective during code analysis  Developers rarely perform code analysis, never for security  Developers vary in awareness of analysis tools</p>
    <p>Code Review</p>
    <p>Code review is a formal process that includes security  Preliminary code review is done as a checkpoint before the formal review</p>
    <p>Security is not considered during code review  Security consideration in code review is minimal</p>
    <p>Post-development Testing</p>
    <p>Security is a priority during post-development testing  Post-development testing is used to discover security vulnerabilities, or for final verification</p>
    <p>Testers have the final approval</p>
    <p>Security is not considered in post-development testing  Post-development testing plans include a security dimension  Post-development security testing is feature-driven  Post-development security testing is adhoc  Post-development security testing is externally-driven</p>
    <p>and developers, whereas the Testing Guide [4] focuses on best practices for testing and evaluating security activities.</p>
    <p>Others. Additional resources for security best practices include: NASAs Software Assurance Guidebook [39], NISTs Special Publication 800-64 [32], US-CERTs Top 10 Secure Coding Practices [47], as well as various articles emphasizing the importance of secure development [7,36,37,57].</p>
    <p>B1 Identify security requirements. Identify security requirements for your application during the initial planning stages. The security of the application throughout its different stages should be evaluated based on its compliance with security requirements. B2 Design for security. Aim for simple designs because</p>
    <p>the likelihood of implementation errors increases with design complexity. Architect and design your software to implement security policies and comply with security principles such as: secure defaults, default deny, fail safe, and the principle of least privilege. B3 Perform threat modelling. Use threat modelling to analyze potential threats to your application. The result of threat modelling should inform security practices in the dierent SDLC stages, e.g., for creating test plans. B4 Perform secure implementation. Adopt secure coding standards for the programming language you use, e.g., validate input and sanitize data sent to other systems, and avoid using unsafe or deprecated functions. B5 Use approved tools and analyze third-party tools security. Only use approved tools, APIs, and frameworks or those evaluated for security and eectiveness. B6 Include security in testing. Integrate security testing in functional test plans to reduce redundancy. B7 Perform code analysis. Leverage automated tools such as SATs to detect vulnerabilities like buer overflows and improper user input validation. B8 Perform code review for security. Include security in code reviews and look for common programming errors that can lead to security vulnerabilities. B9 Perform post-development testing. Identify security issues further by using a combination of methods, e.g., dynamic analysis, penetration testing, or hiring external security reviewers to bring in a new perspective.</p>
    <p>B10 Apply defense in depth. Build security in all stages of the SDLC, so that if a vulnerability is missed in one stage, there is a chance to eliminate it through practices implemented in the remaining stages.</p>
  </div>
  <div class="page">
    <p>Security Adopters Themes Common Themes Security Inattentive Themes</p>
    <p>Design</p>
    <p>Security design is very important  Security is not considered in the design stage</p>
    <p>Security consideration in the design stage is adhoc</p>
    <p>Implementation</p>
    <p>Security is a priority during implementation</p>
    <p>Developers awareness of security is expected when implementing</p>
    <p>Security is not a priority during implementation  Developers take security for granted  Developers misuse frameworks  Developers lack security knowledge  Developers perceive their security knowledge inaccurately  Vulnerability discovery can motivate security</p>
    <p>Developer Testing</p>
    <p>Developers test for security fortuitously  Security is a priority during developer testing</p>
    <p>Developers do not test for security  Developers security testing is feature-driven</p>
    <p>Code Analysis</p>
    <p>Security is a priority during code analysis  Security is a secondary objective during code analysis  Developers rarely perform code analysis, never for security  Developers vary in awareness of analysis tools</p>
    <p>Code Review</p>
    <p>Code review is a formal process that includes security  Preliminary code review is done as a checkpoint before the formal review</p>
    <p>Security is not considered during code review  Security consideration in code review is minimal</p>
    <p>Post-development Testing</p>
    <p>Security is a priority during post-development testing  Post-development testing is used to discover security vulnerabilities, or for final verification</p>
    <p>Testers have the final approval</p>
    <p>Security is not considered in post-development testing  Post-development testing plans include a security dimension  Post-development security testing is feature-driven  Post-development security testing is adhoc  Post-development security testing is externally-driven</p>
    <p>Security is a priority during post-development Security is not considered in post-development</p>
  </div>
  <div class="page">
    <p>Table 2: Summary of themes emerging from the security adopters and the security inattentive, and common themes between the two groups. Although common themes exist, driving factors for these themes may dier. See Section 4.2 for more details.</p>
    <p>Security Adopters Themes Common Themes Security Inattentive Themes</p>
    <p>Design</p>
    <p>Security design is very important  Security is not considered in the design stage</p>
    <p>Security consideration in the design stage is adhoc</p>
    <p>Implementation</p>
    <p>Security is a priority during implementation</p>
    <p>Developers awareness of security is expected when implementing</p>
    <p>Security is not a priority during implementation  Developers take security for granted  Developers misuse frameworks  Developers lack security knowledge  Developers perceive their security knowledge inaccurately  Vulnerability discovery can motivate security</p>
    <p>Developer Testing</p>
    <p>Developers test for security fortuitously  Security is a priority during developer testing</p>
    <p>Developers do not test for security  Developers security testing is feature-driven</p>
    <p>Code Analysis</p>
    <p>Security is a priority during code analysis  Security is a secondary objective during code analysis  Developers rarely perform code analysis, never for security  Developers vary in awareness of analysis tools</p>
    <p>Code Review</p>
    <p>Code review is a formal process that includes security  Preliminary code review is done as a checkpoint before the formal review</p>
    <p>Security is not considered during code review  Security consideration in code review is minimal</p>
    <p>Post-development Testing</p>
    <p>Security is a priority during post-development testing  Post-development testing is used to discover security vulnerabilities, or for final verification</p>
    <p>Testers have the final approval</p>
    <p>Security is not considered in post-development testing  Post-development testing plans include a security dimension  Post-development security testing is feature-driven  Post-development security testing is adhoc  Post-development security testing is externally-driven</p>
    <p>and developers, whereas the Testing Guide [4] focuses on best practices for testing and evaluating security activities.</p>
    <p>Others. Additional resources for security best practices include: NASAs Software Assurance Guidebook [39], NISTs Special Publication 800-64 [32], US-CERTs Top 10 Secure Coding Practices [47], as well as various articles emphasizing the importance of secure development [7,36,37,57].</p>
    <p>B1 Identify security requirements. Identify security requirements for your application during the initial planning stages. The security of the application throughout its different stages should be evaluated based on its compliance with security requirements. B2 Design for security. Aim for simple designs because</p>
    <p>the likelihood of implementation errors increases with design complexity. Architect and design your software to implement security policies and comply with security principles such as: secure defaults, default deny, fail safe, and the principle of least privilege. B3 Perform threat modelling. Use threat modelling to analyze potential threats to your application. The result of threat modelling should inform security practices in the dierent SDLC stages, e.g., for creating test plans. B4 Perform secure implementation. Adopt secure coding standards for the programming language you use, e.g., validate input and sanitize data sent to other systems, and avoid using unsafe or deprecated functions. B5 Use approved tools and analyze third-party tools security. Only use approved tools, APIs, and frameworks or those evaluated for security and eectiveness. B6 Include security in testing. Integrate security testing in functional test plans to reduce redundancy. B7 Perform code analysis. Leverage automated tools such as SATs to detect vulnerabilities like buer overflows and improper user input validation. B8 Perform code review for security. Include security in code reviews and look for common programming errors that can lead to security vulnerabilities. B9 Perform post-development testing. Identify security issues further by using a combination of methods, e.g., dynamic analysis, penetration testing, or hiring external security reviewers to bring in a new perspective.</p>
    <p>B10 Apply defense in depth. Build security in all stages of the SDLC, so that if a vulnerability is missed in one stage, there is a chance to eliminate it through practices implemented in the remaining stages.</p>
  </div>
  <div class="page">
    <p>Adopters theme: Security design is very important</p>
    <p>When we go to do a further security analysis, we have a lot more context in terms of what were</p>
    <p>thinking, and people arent running around sort of defending threats that arent there.</p>
  </div>
  <div class="page">
    <p>Inattentive theme: Developer testing is feature-driven</p>
    <p>Security testing [pause] I would say less than 5%. Because were doing embedded systems, so security</p>
    <p>[is] pretty low in this kind of work.</p>
  </div>
  <div class="page">
    <p>Digging Deeper</p>
  </div>
  <div class="page">
    <p>Division of labour  Resource availability  Security knowledge</p>
    <p>Company culture  External pressure  Experiencing a security incident</p>
    <p>Factors Affecting Security Practices</p>
  </div>
  <div class="page">
    <p>Factors Affecting Security Practices  Division of labour  Resource availability  Security knowledge</p>
    <p>Company culture  External pressure  Experiencing a security incident</p>
  </div>
  <div class="page">
    <p>Division of labour  Resource availability  Security knowledge</p>
    <p>Company culture  External pressure  Experiencing a security incident</p>
    <p>Factors Affecting Security Practices</p>
    <p>Probably in the two years that Ive been working, I never got feedback [on] the security of my code [...]</p>
    <p>[Developers reviewing code] dont pay attention to the security aspect and</p>
    <p>they cant basically make a comment about the security of your code.</p>
  </div>
  <div class="page">
    <p>Factors Affecting Security Practices  Division of labour  Resource availability  Security knowledge</p>
    <p>Company culture  External pressure  Experiencing a security incident</p>
  </div>
  <div class="page">
    <p>Factors Affecting Security Practices  Division of labour  Resource availability  Security knowledge</p>
    <p>Company culture  External pressure  Experiencing a security incident</p>
    <p>No one had really been thinking about looking at the product from security</p>
    <p>stand-point and so the new tester we had hired, he really went at it from how can I really break this thing? [..] and found quite</p>
    <p>a few problems with the product that way.</p>
  </div>
  <div class="page">
    <p>Now What?</p>
  </div>
  <div class="page">
    <p>Now What?</p>
    <p>Rethink best practices</p>
    <p>Focus on building a security company culture</p>
  </div>
  <div class="page">
    <p>To be honest, I dont think anybody cares about [security]. Ive never heard or seen people talk</p>
    <p>about security at work [...] I did ask about this to my managers, but they just said well, thats how the</p>
    <p>company is. Security is not something we focus on right now.</p>
    <p>Factor : Company culture</p>
  </div>
</Presentation>
