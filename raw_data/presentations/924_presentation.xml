<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NVMKV: A Scalable and Lightweight Flash Aware Key-Value Store</p>
    <p>Leonardo Mrmol*, Swaminathan Sundararaman, Nisha Talagala, Raju Rangaswami</p>
    <p>SanDisk  Florida Interna&gt;onal University work done at SanDisk</p>
  </div>
  <div class="page">
    <p>Introducing KV Stores</p>
    <p>Preferred data management soluDon for Internet services</p>
    <p>Provide simple interface  get, put, delete</p>
    <p>Provide weaker consistency model  Compared to RDMS  Tradeoff between performance and consistency</p>
  </div>
  <div class="page">
    <p>LimitaDons of exisDng soluDons*</p>
    <p>Use log-structured/out-of-place updates  BeSer performance on hard-disk and older SSDs</p>
    <p>Require compacDon/garbage collecDon  Creates auxiliary write amplificaDon  Performance penalty  Reduces the life of NAND flash</p>
  </div>
  <div class="page">
    <p>How bad is the situaDon?</p>
    <p>Auxiliary write amplificaDon varying from 2.5x to 43x  Dont Stack your Log on my Log by Yang et al. (INFLOW14)</p>
    <p>W or se</p>
    <p>Be S er</p>
  </div>
  <div class="page">
    <p>ExisDng KV Store Designs</p>
    <p>Logging Data</p>
    <p>Mapping</p>
    <p>KV Store</p>
    <p>FTL</p>
    <p>App</p>
    <p>CompacDon / GC</p>
  </div>
  <div class="page">
    <p>ExisDng KV Store Designs</p>
    <p>Logging Data</p>
    <p>Mapping</p>
    <p>KV Store</p>
    <p>FTL</p>
    <p>App</p>
    <p>CompacDon / GC</p>
    <p>` Logging</p>
    <p>Data Mapping</p>
    <p>CompacDon / GC</p>
    <p>Others Subsystems</p>
    <p>Standard R/W Interface</p>
    <p>FTL</p>
  </div>
  <div class="page">
    <p>ExisDng KV Store Designs</p>
    <p>Logging Data</p>
    <p>Mapping</p>
    <p>KV Store</p>
    <p>FTL</p>
    <p>App</p>
    <p>CompacDon / GC</p>
    <p>` Logging</p>
    <p>Data Mapping</p>
    <p>CompacDon / GC</p>
    <p>Others Subsystems</p>
    <p>Standard R/W Interface</p>
    <p>FTL</p>
  </div>
  <div class="page">
    <p>FTL CooperaDve KV Store Design</p>
    <p>FTL</p>
    <p>App</p>
    <p>CompacDon / GC</p>
    <p>` Logging</p>
    <p>Data Mapping</p>
    <p>CompacDon / GC</p>
    <p>Others Subsystems</p>
    <p>Standard R/W Interface</p>
    <p>FTL</p>
    <p>Sparse Data Mapping</p>
    <p>Extended Interface</p>
    <p>KV Store</p>
    <p>Hashing Scheme</p>
  </div>
  <div class="page">
    <p>Design</p>
  </div>
  <div class="page">
    <p>NVMKV System Architecture</p>
    <p>NVMKV Library</p>
    <p>Appi Appj</p>
    <p>FTL</p>
    <p>Flash</p>
    <p>FTL PrimiDves</p>
    <p>NVMKV API U se r Sp ac e</p>
    <p>Ke rn el S pa ce</p>
    <p>Get Put Delete</p>
    <p>Read / Write Trim + Exists Atomic_write Iterate</p>
    <p>Direct Access to Sparse Block Device</p>
  </div>
  <div class="page">
    <p>NVMKV API</p>
    <p>Management  Open / Create  Close / Destroy</p>
    <p>Basic operaDons  Get, Put, Delete</p>
    <p>Batch operaDons  Batch-Get, Batch-Put  Batch-Delete  Delete-all</p>
    <p>fd = open(dev_name,); id = nvmkv_open(fd,);  nvmkv_put(id,k1,v1,);  nvmkv_exists(id,k2,);  nvmkv_get(id,k2,);  nvmkv_close(id); close(fd)</p>
    <p>A full descripDon of the API can be found in the paper  Beyond Block I/O: Rethinking TradiDonal Storage PrimiDves by Ouyang et al.</p>
    <p>Code Fragment</p>
  </div>
  <div class="page">
    <p>I/O on a Sparse Block Device</p>
    <p>&lt;k,v&gt;</p>
    <p>Sparse Address</p>
    <p>FTL Mapping</p>
    <p>FLASH</p>
    <p>LBA=Hash(key)</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
    <p>Exists(LBA) does not perform I/O  New LBA(s) are computed using polynomial probing  The size of the virtual slots can be configured</p>
    <p>Empty Virtual Slot</p>
    <p>Exists(LBA) Write(&lt;key, val&gt;, LBA)</p>
  </div>
  <div class="page">
    <p>MulDple NVMKV On Single Device</p>
    <p>Pool: Set of unique key-value pairs that shared the same pool id.  Part of hashing scheme  LBA = Hash(key, pool_id)</p>
    <p>No in-memory metadata  No extra I/O operaDons  Now operaDons required pool_id, in addiDon to key &amp; value</p>
    <p>Single NVMKV Instance</p>
    <p>Pool:1</p>
    <p>Pool:2</p>
    <p>&lt;k1,v1,p1&gt; &lt;k2,v2,p1&gt;</p>
    <p>&lt;k2,v2,p2&gt;</p>
    <p>&lt;k3,v3,p1&gt;</p>
  </div>
  <div class="page">
    <p>InserDng KV-Pairs into Pools</p>
    <p>&lt;k,v&gt;</p>
    <p>Sparse Address</p>
    <p>FTL Mapping</p>
    <p>FLASH</p>
    <p>LBA = Hash(key, pool_id) Exists(LBA) Write(&lt;key, val&gt;, LBA)</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
    <p>Only one &lt;key,val&gt; per virtual slot  Offset within the virtual slot determines the pool_id  Offsets in virtual address does not creates wasted space in flash</p>
    <p>Empty Virtual Slot O ff se t</p>
  </div>
  <div class="page">
    <p>Improving Performance by Caching</p>
    <p>Read-only Cache: Improves read performance.</p>
    <p>Collision Cache: Prevents mulDple I/Os when cache collision occurs.</p>
    <p>For more details, please consult the paper.</p>
  </div>
  <div class="page">
    <p>EvaluaDon Results</p>
  </div>
  <div class="page">
    <p>NVMKV Performance</p>
    <p>Be S er</p>
    <p>W or se</p>
    <p>NVMKV outperform LevelDB even when LevelDB uses async writes  NVMKV writes are always synchronous (no buffering)</p>
  </div>
  <div class="page">
    <p>NVMKV Performance</p>
    <p>Be S er</p>
    <p>W or se</p>
    <p>LevelDB benefits from both its own cache and the file system cache (warmed)  NVMKV perform compeDDvely up to 32 pools even without any caching</p>
  </div>
  <div class="page">
    <p>YCSB Benchmark</p>
    <p>Be S er</p>
    <p>W or se</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>We propose a FTL cooperaDve design that allows for:  Simple KV-Store design and implementaDon  Constant amount of metadata  MulDple KV-Stores sharing the same FLASH  High performance / parallelism  Atomicity and durability of KV operaDons  Low write amplificaDon</p>
    <p>Reduced write amplificaDon by up to 29x compared to LevelDB</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>opennvm.github.io</p>
  </div>
</Presentation>
