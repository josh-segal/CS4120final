<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PlatPal: Detecting Malicious Documents with Platform Diversity</p>
    <p>Meng Xu and Taesoo Kim</p>
    <p>Georgia Institute of Technology</p>
  </div>
  <div class="page">
    <p>Malicious Documents On the Rise</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Adobe Components Exploited</p>
    <p>Element parser</p>
    <p>JavaScript engine</p>
    <p>Font manager</p>
    <p>System dependencies</p>
  </div>
  <div class="page">
    <p>Maldoc Formula</p>
    <p>Flexibility of doc spec</p>
    <p>A large attack surface</p>
    <p>Less caution from users</p>
    <p>More opportunities to profit</p>
  </div>
  <div class="page">
    <p>Battle against Maldoc - A Survey</p>
    <p>Category Focus Work Year Detection</p>
    <p>Static</p>
    <p>Dynamic</p>
  </div>
  <div class="page">
    <p>Battle against Maldoc - A Survey</p>
    <p>Category Focus Work Year Detection</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering</p>
    <p>JavaScript Lux0r 2014 API reference classification</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig</p>
    <p>Dynamic</p>
  </div>
  <div class="page">
    <p>Battle against Maldoc - A Survey</p>
    <p>Category Focus Work Year Detection</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering</p>
    <p>JavaScript Lux0r 2014 API reference classification</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure</p>
    <p>Metadata PDFrate 2012 Content meta-features</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined</p>
    <p>Dynamic</p>
  </div>
  <div class="page">
    <p>Battle against Maldoc - A Survey</p>
    <p>Category Focus Work Year Detection</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering</p>
    <p>JavaScript Lux0r 2014 API reference classification</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure</p>
    <p>Metadata PDFrate 2012 Content meta-features</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns</p>
    <p>JavaScript ShellOS 2011 Memory access patterns</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors</p>
  </div>
  <div class="page">
    <p>Battle against Maldoc - A Survey</p>
    <p>Category Focus Work Year Detection</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering</p>
    <p>JavaScript Lux0r 2014 API reference classification</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure</p>
    <p>Metadata PDFrate 2012 Content meta-features</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns</p>
    <p>JavaScript ShellOS 2011 Memory access patterns</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors</p>
    <p>Memory CWXDetector 2012 Violation of invariants</p>
  </div>
  <div class="page">
    <p>Reliance on External PDF Parser</p>
    <p>Category Focus Work Year Detection External Parser ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig No</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig Yes</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns Yes</p>
    <p>JavaScript ShellOS 2011 Memory access patterns Yes</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors No</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
  </div>
  <div class="page">
    <p>Category Focus Work Year Detection External Parser ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig No</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig Yes</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns Yes</p>
    <p>JavaScript ShellOS 2011 Memory access patterns Yes</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors No</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
    <p>Reliance on External PDF Parser</p>
    <p>Parser-confusion attacks (Carmony et al., NDSS16)</p>
  </div>
  <div class="page">
    <p>Reliance on Machine Learning</p>
    <p>Category Focus Work Year Detection Machine Learning ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig No</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig No</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns No</p>
    <p>JavaScript ShellOS 2011 Memory access patterns No</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors No</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
  </div>
  <div class="page">
    <p>Reliance on Machine Learning</p>
    <p>Category Focus Work Year Detection Machine Learning ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig No</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig No</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns No</p>
    <p>JavaScript ShellOS 2011 Memory access patterns No</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors No</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
    <p>Automatic classifier evasions (Xu et al., NDSS16)</p>
  </div>
  <div class="page">
    <p>Reliance on Known Attacks</p>
    <p>Category Focus Work Year Detection Known Attacks ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig Yes</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig Yes</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns Yes</p>
    <p>JavaScript ShellOS 2011 Memory access patterns Yes</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors Yes</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
  </div>
  <div class="page">
    <p>Reliance on Known Attacks</p>
    <p>Category Focus Work Year Detection Known Attacks ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig Yes</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig Yes</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns Yes</p>
    <p>JavaScript ShellOS 2011 Memory access patterns Yes</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors Yes</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
    <p>How about zero-day attacks ?</p>
  </div>
  <div class="page">
    <p>Reliance on Detectable Discrepancy (between benign and malicious docs)</p>
    <p>Category Focus Work Year Detection Discrepancy ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig No</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig No</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns No</p>
    <p>JavaScript ShellOS 2011 Memory access patterns Yes</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors Yes</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
  </div>
  <div class="page">
    <p>Reliance on Detectable Discrepancy (between benign and malicious docs)</p>
    <p>Category Focus Work Year Detection Discrepancy ?</p>
    <p>Static</p>
    <p>JavaScript PJScan 2011 Lexical analysis Yes</p>
    <p>JavaScript Vatamanu et al. 2012 Token clustering Yes</p>
    <p>JavaScript Lux0r 2014 API reference classification Yes</p>
    <p>JavaScript MPScan 2013 Shellcode and opcode sig No</p>
    <p>Metadata PDF Malware Slayer 2012 Linearized object path Yes</p>
    <p>Metadata Srndic et al. 2013 Hierarchical structure Yes</p>
    <p>Metadata PDFrate 2012 Content meta-features Yes</p>
    <p>Both Maiorca et al. 2016 Many heuristics combined Yes</p>
    <p>Dynamic</p>
    <p>JavaScript MDScan 2011 Shellcode and opcode sig No</p>
    <p>JavaScript PDF Scrutinizer 2012 Known attack patterns No</p>
    <p>JavaScript ShellOS 2011 Memory access patterns Yes</p>
    <p>JavaScript Liu et al. 2014 Common attack behaviors Yes</p>
    <p>Memory CWXDetector 2012 Violation of invariants No</p>
    <p>Mimicry and reverse mimicry attacks (Srndic et al., Oakland14 and Maiorca et al, AsiaCCS13)</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Highlights of the Survey</p>
    <p>Parser-confusion attacks</p>
    <p>Automatic classifier evasion</p>
    <p>Zero-day attacks</p>
    <p>Mimicry and reverse mimicry</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Motivations for PlatPal</p>
    <p>What PlatPal aims to achieve</p>
    <p>Using Adobes parser</p>
    <p>Using only simple heuristics</p>
    <p>Capable to detect zero-days</p>
    <p>Do not assume discrepancy</p>
    <p>Complementary to prior works</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Motivations for PlatPal</p>
    <p>What PlatPal aims to achieve</p>
    <p>Using Adobes parser</p>
    <p>Using only simple heuristics</p>
    <p>Capable to detect zero-days</p>
    <p>Do not assume discrepancy</p>
    <p>Complementary to prior works</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Motivations for PlatPal</p>
    <p>What PlatPal aims to achieve</p>
    <p>Using Adobes parser</p>
    <p>Using only simple heuristics</p>
    <p>Capable to detect zero-days</p>
    <p>Do not assume discrepancy</p>
    <p>Complementary to prior works</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Motivations for PlatPal</p>
    <p>What PlatPal aims to achieve</p>
    <p>Using Adobes parser</p>
    <p>Using only simple heuristics</p>
    <p>Capable to detect zero-days</p>
    <p>Do not assume discrepancy</p>
    <p>Complementary to prior works</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Motivations for PlatPal</p>
    <p>What PlatPal aims to achieve</p>
    <p>Using Adobes parser</p>
    <p>Using only simple heuristics</p>
    <p>Capable to detect zero-days</p>
    <p>Do not assume discrepancy</p>
    <p>Complementary to prior works</p>
  </div>
  <div class="page">
    <p>Prior works rely on</p>
    <p>External PDF parsers</p>
    <p>Machine learning</p>
    <p>Known attack signatures</p>
    <p>Detectable discrepancy</p>
    <p>Motivations for PlatPal</p>
    <p>What PlatPal aims to achieve</p>
    <p>Using Adobes parser</p>
    <p>Using only simple heuristics</p>
    <p>Capable to detect zero-days</p>
    <p>Do not assume discrepancy</p>
    <p>Complementary to prior works</p>
  </div>
  <div class="page">
    <p>A Motivating Example</p>
    <p>A CVE-2013-2729 PoC against Adobe Reader 10.1.4 SHA-1: 74543610d9908698cb0b4bfcc73fc007bfeb6d84</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Platform Diversity as A Heuristic</p>
    <p>When the same document is opened across different platforms:</p>
    <p>A benign document behaves the same  A malicious document behaves differently</p>
  </div>
  <div class="page">
    <p>Similar Ideas</p>
    <p>Two variants placed in disjoint memory partitions [N-Variant Systems]</p>
    <p>Two variants with stacks growing in different directions [Orchestra]</p>
    <p>Multiple variants with randomized heap object locations [DieHard]</p>
    <p>Multiple versions of the same program [Varan, Mx]</p>
  </div>
  <div class="page">
    <p>Questions for PlatPal</p>
    <p>What is a behavior ?</p>
    <p>What is a divergence ?</p>
    <p>How to trace them ?</p>
    <p>How to compare them ?</p>
  </div>
  <div class="page">
    <p>PlatPal Basic Setup</p>
    <p>Windows Host</p>
    <p>Virtual Machine 1</p>
    <p>Adobe Reader</p>
    <p>MacOS Host</p>
    <p>Virtual Machine 2</p>
    <p>Adobe Reader</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>PlatPal Dual-Level Tracing</p>
    <p>Virtual Machine 1</p>
    <p>Adobe Reader</p>
    <p>Internal Tracer</p>
    <p>Virtual Machine 2</p>
    <p>Adobe Reader</p>
    <p>Internal Tracer</p>
    <p>?</p>
    <p>Windows Host MacOS Host</p>
    <p>Traces of PDF processing</p>
  </div>
  <div class="page">
    <p>PlatPal Dual-Level Tracing</p>
    <p>Virtual Machine 1</p>
    <p>Adobe Reader</p>
    <p>Internal Tracer</p>
    <p>Syscalls</p>
    <p>External Tracer</p>
    <p>Virtual Machine 2</p>
    <p>Adobe Reader</p>
    <p>Internal Tracer</p>
    <p>Syscalls</p>
    <p>External Tracer</p>
    <p>?</p>
    <p>Windows Host MacOS Host</p>
    <p>Impacts on host platform</p>
    <p>Traces of PDF processing</p>
  </div>
  <div class="page">
    <p>PlatPal Internal Tracer</p>
    <p>Adobe Reader</p>
    <p>Internal Tracer</p>
    <p>COS object parsing</p>
    <p>PD tree construction</p>
    <p>Script execution</p>
    <p>Other actions</p>
    <p>Element rendering</p>
    <p>Implemented as an Adobe Reader plugin.</p>
    <p>Hooks critical functions and callbacks during the PDF processing lifecycle.</p>
    <p>Very fast and stable across Adobe Reader versions.</p>
  </div>
  <div class="page">
    <p>PlatPal External Tracer</p>
    <p>Virtual Machine</p>
    <p>Adobe Reader</p>
    <p>Syscalls</p>
    <p>External Tracer</p>
    <p>Host Platform</p>
    <p>Filesystem Operations</p>
    <p>Network Activities</p>
    <p>Program Executions</p>
    <p>Normal Exit or Crash</p>
    <p>Implemented based on NtTrace (for Windows) and Dtrace (for MacOS).</p>
    <p>Resembles high-level system impacts in the same manner as Cuckoo guest agent.</p>
    <p>Starts tracing only after the document is loaded into Adobe Reader.</p>
  </div>
  <div class="page">
    <p>PlatPal Automated Workflow</p>
    <p>Windows VM</p>
    <p>Restore Clean Snapshot</p>
    <p>Launch Adobe Reader</p>
    <p>Attach External Tracer</p>
    <p>Open PDF</p>
    <p>Drive PDF by Internal Tracer</p>
    <p>Dump Traces</p>
    <p>Restore Clean Snapshot</p>
    <p>Launch Adobe Reader</p>
    <p>Attach External Tracer</p>
    <p>Open PDF</p>
    <p>Drive PDF by Internal Tracer</p>
    <p>Dump Traces</p>
    <p>MacOS VMCompare Traces</p>
    <p>PlatPal &lt;file-to-check&gt;</p>
  </div>
  <div class="page">
    <p>Evaluate PlatPal</p>
    <p>Robustness against benign samples A benign document behaves the same ?</p>
    <p>Effectiveness against malicious samples A malicious document behaves differently ?</p>
    <p>Speed and resource usages</p>
  </div>
  <div class="page">
    <p>Robustness</p>
    <p>Sample Type Number of Samples Divergence Detected ? (i.e., False Positive)</p>
    <p>Plain PDF 966 No</p>
    <p>Embedded fonts 34 No</p>
    <p>JavaScript code 32 No</p>
    <p>AcroForm 17 No</p>
    <p>1000 samples from Google search.  30 samples that use advanced features in PDF standards</p>
    <p>from PDF learning sites.</p>
  </div>
  <div class="page">
    <p>Effectiveness</p>
    <p>320 malicious samples from VirusTotal with CVE labels.</p>
    <p>Restricted to analyze CVEs published after 2013.</p>
    <p>Use the most recent version of Adobe Reader when the CVE is published.</p>
  </div>
  <div class="page">
    <p>Effectiveness</p>
    <p>Analysis Results of 320 Maldoc Samples</p>
    <p>No Divergence Both Crash Divergence</p>
  </div>
  <div class="page">
    <p>Effectiveness</p>
    <p>Analysis Results of 320 Maldoc Samples</p>
    <p>No Divergence</p>
    <p>Breakdown of 77 potentially false positives</p>
    <p>Targets old versions Mis-classified by AV vendor No malicious activity trigerred Unknown</p>
  </div>
  <div class="page">
    <p>Time and Resource Usages</p>
    <p>Average Analysis Time Breakdown (unit. Seconds)</p>
    <p>Item Windows MacOS</p>
    <p>Snapshot restore 9.7 12.6</p>
    <p>Document parsing 0.5 0.6</p>
    <p>Script execution 10.5 5.1</p>
    <p>Element rendering 7.3 6.2</p>
    <p>Total 23.7 22.1</p>
    <p>Resource Usages</p>
    <p>2GB memory per running virtual machine.</p>
    <p>60GB disk space for Windows and MacOS snapshots that each corresponds to one of the 6 Adobe Readers versions.</p>
  </div>
  <div class="page">
    <p>Evaluation Highlights</p>
    <p>Confirms our fundamental assumption in general: benign document behaves the same</p>
    <p>malicious document behaves differently</p>
    <p>PlatPal is subject to the pitfalls of dynamic analysis i.e., prepare the environment to lure the malicious behaviors</p>
    <p>Incurs reasonable analysis time to make PlatPal practical</p>
  </div>
  <div class="page">
    <p>Further Analysis</p>
    <p>What could be the root causes of these divergences?</p>
  </div>
  <div class="page">
    <p>Diversified Factors across Platforms</p>
    <p>Category Factor Windows MacOS</p>
    <p>Shellcode Creation</p>
    <p>Memory Management</p>
    <p>Platform Features</p>
  </div>
  <div class="page">
    <p>Diversified Factors across Platforms</p>
    <p>Category Factor Windows MacOS</p>
    <p>Shellcode Creation</p>
    <p>Syscall semantics Both the syscall number and the register set used to hold syscall arguments are different</p>
    <p>Calling convention rcx, rdx, r8 for first 3 args rdi, rsi, rdx for first 3 args</p>
    <p>Library dependencies e.g., LoadLibraryA e.g. dlopen</p>
    <p>Memory Management</p>
    <p>Platform Features</p>
  </div>
  <div class="page">
    <p>Diversified Factors across Platforms</p>
    <p>Category Factor Windows MacOS</p>
    <p>Shellcode Creation</p>
    <p>Syscall semantics Both the syscall number and the register set used to hold syscall arguments are different</p>
    <p>Calling convention rcx, rdx, r8 for first 3 args rdi, rsi, rdx for first 3 args</p>
    <p>Library dependencies e.g., LoadLibraryA e.g. dlopen</p>
    <p>Memory Management</p>
    <p>Memory layout Offset from attack point (e.g., overflowed buffer) to target address (e.g., vtable entries) are different</p>
    <p>Heap management Segment heap Magazine malloc</p>
    <p>Platform Features</p>
  </div>
  <div class="page">
    <p>Diversified Factors across Platforms</p>
    <p>Category Factor Windows MacOS</p>
    <p>Shellcode Creation</p>
    <p>Syscall semantics Both the syscall number and the register set used to hold syscall arguments are different</p>
    <p>Calling convention rcx, rdx, r8 for first 3 args rdi, rsi, rdx for first 3 args</p>
    <p>Library dependencies e.g., LoadLibraryA e.g. dlopen</p>
    <p>Memory Management</p>
    <p>Memory layout Offset from attack point (e.g., overflowed buffer) to target address (e.g., vtable entries) are different</p>
    <p>Heap management Segment heap Magazine malloc</p>
    <p>Platform Features</p>
    <p>Executable format COM, PE, NE Mach-O</p>
    <p>Filesystem semantics \ as separator, prefixed drive letter C:\</p>
    <p>/ as separator, no prefixed drive letter</p>
    <p>Config and info hub registry proc</p>
    <p>Expected programs MS Office, IE, etc Safari, etc</p>
  </div>
  <div class="page">
    <p>Back to The Motivating Example</p>
  </div>
  <div class="page">
    <p>Another Case Study</p>
    <p>CVE-2014-0521 PoC Example</p>
  </div>
  <div class="page">
    <p>Apply Diversity to Stop Attacks</p>
    <p>Vulnerability Discovery Exploitation Malicious Activities Success</p>
  </div>
  <div class="page">
    <p>e.g. bugs in system library CVE-2015-2426</p>
    <p>Platform-specific bugs</p>
    <p>Apply Diversity to Stop Attacks</p>
    <p>Vulnerability Discovery Exploitation Malicious Activities Success</p>
    <p>Adobe implementation bugs</p>
  </div>
  <div class="page">
    <p>e.g. bugs in system library CVE-2015-2426</p>
    <p>Platform-specific bugs</p>
    <p>Apply Diversity to Stop Attacks</p>
    <p>Vulnerability Discovery Exploitation Malicious Activities Success</p>
    <p>Adobe implementation bugs</p>
    <p>e.g. bugs in element parser CVE-2013-2729</p>
    <p>Memory corruption</p>
    <p>Logic bugs e.g. bugs in JavaScript API CVE-2014-0521</p>
  </div>
  <div class="page">
    <p>e.g. bugs in system library CVE-2015-2426</p>
    <p>Platform-specific bugs</p>
    <p>Apply Diversity to Stop Attacks</p>
    <p>Vulnerability Discovery Exploitation Malicious Activities Success</p>
    <p>Adobe implementation bugs</p>
    <p>e.g. bugs in element parser CVE-2013-2729</p>
    <p>Memory corruption</p>
    <p>Logic bugs e.g. bugs in JavaScript API CVE-2014-0521</p>
    <p>Execute shellcode</p>
    <p>Load executables</p>
    <p>Steal sensitive info</p>
    <p>Drop other exploits</p>
    <p>Other activities</p>
  </div>
  <div class="page">
    <p>e.g. bugs in system library CVE-2015-2426</p>
    <p>Platform-specific bugs</p>
    <p>Apply Diversity to Stop Attacks</p>
    <p>Vulnerability Discovery Exploitation Malicious Activities Success</p>
    <p>Adobe implementation bugs</p>
    <p>e.g. bugs in element parser CVE-2013-2729</p>
    <p>Memory corruption</p>
    <p>Logic bugs e.g. bugs in JavaScript API CVE-2014-0521</p>
    <p>Execute shellcode</p>
    <p>Load executables</p>
    <p>Steal sensitive info</p>
    <p>Drop other exploits</p>
    <p>Other activities</p>
    <p>Attacks that cannot be</p>
    <p>detected with platform diversity</p>
  </div>
  <div class="page">
    <p>Bypass PlatPal ?</p>
    <p>An attacker has to simultaneously compromise all platforms in order to</p>
    <p>bypass PlatPal.</p>
  </div>
  <div class="page">
    <p>Platform-agnostic Attacks</p>
    <p>Heap feng-shui Predict the address of next allocation and de-allocation.</p>
    <p>Heap spray and NOP-sled Alleviate attackers from using precise memory address.</p>
    <p>Polyglot shellcode trampoline Find operations that are meaningful on one platform and NOP on the other.</p>
  </div>
  <div class="page">
    <p>Limitations of PlatPal</p>
    <p>User-interaction driven attacks</p>
    <p>Social engineering attacks e.g., fake password prompt</p>
    <p>Other none-determinism to cause divergences e.g., JavaScript gettime or RNG functions</p>
  </div>
  <div class="page">
    <p>Potential Deployment of PlatPal</p>
    <p>Not suitable for on-device analysis.</p>
    <p>Best suited for cloud storage providers which can scan for maldocs among existing files or new uploads.</p>
    <p>Also fits the model of online malware scanning services like VirusTotal.</p>
    <p>As a complementary scheme, PlatPal can be integrated with prior works to provide better prediction accuracy.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>It is feasible to harvest platform diversity for malicious document detection.</p>
    <p>PlatPal raises no false alarms in benign samples and detects a variety of behavioral discrepancies in malicious samples.</p>
    <p>PlatPal is scalable with various ways to deploy and integrate.</p>
    <p>https://github.com/sslab-gatech/platpal (Source code will be released soon)</p>
  </div>
</Presentation>
