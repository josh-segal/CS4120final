<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HotCloud 18, July 9th, 2018, Boston, MA</p>
    <p>Oliver Michel John Sonchack</p>
    <p>Eric Keller Jonathan M. Smith</p>
    <p>Packet-Level Analytics in Software without Compromises</p>
  </div>
  <div class="page">
    <p>Security issues</p>
    <p>Performance issues</p>
    <p>Equipment failure</p>
    <p>Misconfiguration</p>
    <p>Network monitoring is important</p>
    <p>Switch +</p>
    <p>Telemetry</p>
    <p>Analytics Platform</p>
  </div>
  <div class="page">
    <p>Challenging environment</p>
    <p>more traffic</p>
    <p>more threats</p>
    <p>encrypted traffic</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 3</p>
    <p>Fraction of encrypted HTTP traffic in Google Chrome</p>
    <p>% e</p>
    <p>nc ry</p>
    <p>pt ed</p>
    <p>Jun 6 2015 Jun 4 2016 Jun 3 2017 Jun 2 2018</p>
    <p>[Google Transparency Report 2018]</p>
    <p>Total Ransomware Samples</p>
    <p>C ol</p>
    <p>le ct</p>
    <p>ed S</p>
    <p>am pl</p>
    <p>es [M</p>
    <p>]</p>
    <p>Q4 2015 Q12016 Q2 2016 Q3 2016 Q4 2016 Q1 2017 Q2 2017 Q3 2017</p>
    <p>[McAfee Labs Thread Report Dec. 2017]</p>
  </div>
  <div class="page">
    <p>Existing systems make compromises</p>
    <p>collector analytics</p>
    <p>filteringsampling6 4 2 aggregation PFE</p>
    <p>filter() groupby() zip()</p>
    <p>loss of information</p>
    <p>loss of capability</p>
  </div>
  <div class="page">
    <p>Programmable Forwarding Engines  Marple [SIGCOMM 2017]  *flow [ATC 2018]</p>
    <p>Programmable Forwarding Engines</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 5</p>
    <p>High-Performance Network Telemetry ?</p>
    <p>~ 131 M packet records/s *flow technology</p>
  </div>
  <div class="page">
    <p>per-packet records</p>
    <p>x86 / general purpose programming language</p>
    <p>~5M pps per core</p>
    <p>The ideal network analytics system</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 6</p>
    <p>Is it possible to perform packet-level analytics on cloud-scale infrastructures without compromises?</p>
  </div>
  <div class="page">
    <p>Leveraging parallel architectures</p>
    <p>source sink</p>
    <p>parallel operators</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 7</p>
  </div>
  <div class="page">
    <p>Leveraging parallel architectures</p>
    <p>NIC Backend</p>
    <p>(e.g., time series DB)</p>
    <p>input stage</p>
    <p>processing stages</p>
    <p>aggregation stage</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 8</p>
  </div>
  <div class="page">
    <p>Network attached input</p>
    <p>Partitionability/aggregation</p>
    <p>High rates, small, well-formed records</p>
    <p>Characteristics of packet record workloads</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 9</p>
    <p>Can we use properties of packet analytics workloads to our advantage?</p>
  </div>
  <div class="page">
    <p>Network attached input</p>
    <p>queue</p>
    <p>queue</p>
    <p>queue</p>
    <p>NIC DMA</p>
    <p>NIC DMA</p>
    <p>NIC DMA</p>
    <p>analytics pipeline</p>
    <p>analytics pipeline</p>
    <p>analytics pipeline</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 10</p>
  </div>
  <div class="page">
    <p>Array vs. linked list</p>
    <p>Lock-free design</p>
    <p>Wait-free design</p>
    <p>Zero-copy operations</p>
    <p>Many small records</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 11</p>
    <p>th ro</p>
    <p>ug hp</p>
    <p>ut [M</p>
    <p>re co</p>
    <p>rd s/</p>
    <p>s]</p>
    <p>lock-based, array lock-free, linked list lock-free,array</p>
  </div>
  <div class="page">
    <p>Programming Abstraction</p>
    <p>auto source = app.add_stage&lt;source&gt;(1, enp6s0f0); auto sink = app.add_stage&lt;sink&gt;(1, std::cout); app.connect&lt;jetstream::pkt_t&gt;(source, sink); app();</p>
    <p>jetstream::app app;</p>
    <p>source sink</p>
    <p>port port</p>
    <p>ring buffer</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 12</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Packet-Level Analytics in Software without Compromises  Oliver Michel 13 th</p>
    <p>ro ug</p>
    <p>hp ut</p>
    <p>[M p</p>
    <p>ac ke</p>
    <p>ts /s</p>
    <p>]</p>
    <p>intermediate processors</p>
    <p>passthrough packets per source</p>
    <p>parallel operators</p>
    <p>sinksource</p>
  </div>
  <div class="page">
    <p>Facebook web cluster: ~ 91M egress pps</p>
    <p>~32 cores for basic packet-level insight</p>
    <p>176 web servers  1 analytics server: ~0.5% of cluster capacity</p>
    <p>Performance</p>
    <p>[Arjun Roy, Hongyi Zeng, Jasmeet Bagga, George Porter, and Alex C. Snoeren. 2015. Inside the Social Network's (Datacenter) Network. SIGCOMM Comput. Commun. Rev.</p>
    <p>~352 Gb/s</p>
    <p>~88 Gb/s  91M p/s</p>
    <p>jetstream 32 cores</p>
  </div>
  <div class="page">
    <p>Conclusion / Discussion</p>
    <p>jetstream high-performance, softwarenetwork analytics platform</p>
    <p>Is it possible to perform packet-level analytics on cloud-scale infrastructures without compromises?</p>
  </div>
  <div class="page">
    <p>Q&amp;A / DISCUSSION</p>
    <p>Oliver Michel</p>
    <p>oliver.michel@colorado.edu http://nsr.colorado.edu/oliver</p>
  </div>
  <div class="page">
    <p>The right approach for network monitoring and analytics?</p>
    <p>What data do we need for monitoring/debugging?</p>
    <p>packet-level flow-level</p>
    <p>software hardware</p>
  </div>
  <div class="page">
    <p>PANEL OPENING SLIDE</p>
  </div>
  <div class="page">
    <p>source sink</p>
    <p>parallel operators</p>
    <p>behavioral analysis packet level record generation software processing</p>
    <p>Packet-Level Analytics in Software without Compromises</p>
    <p>encrypted traffic programmable forwarding engines complex applications</p>
    <p>Oliver Michel, John Sonchack, Eric Keller, Jonathan M. Smith University of Colorado Boulder, University of Pennsylvania</p>
  </div>
  <div class="page">
    <p>BACKUP SLIDES</p>
  </div>
  <div class="page">
    <p>[Apache Flink] [StreamBox Miao 18]</p>
  </div>
  <div class="page">
    <p>Programming abstraction</p>
    <p>Processor definition</p>
  </div>
  <div class="page">
    <p>Jetstream architecture</p>
    <p>NIC Backend</p>
    <p>(e.g., time series DB)</p>
    <p>NUMA awareness pipeline 1 CPU socket 1</p>
    <p>pipeline 2 CPU socket 2</p>
  </div>
  <div class="page">
    <p>Stream Processing</p>
    <p>Filter only TCP</p>
    <p>Packet Packet TCP</p>
    <p>Packet TCP</p>
    <p>Packet</p>
    <p>Parallelize group by IP Destination</p>
    <p>ip_dst % 2 == 1</p>
    <p>ip_dst % 2 == 0</p>
    <p>Bin</p>
    <p>by time (e.g,, 10sec)</p>
    <p>Filter &gt; n Bytes per 10 sec</p>
    <p>Alert</p>
  </div>
  <div class="page">
    <p>Reducing copy operations</p>
    <p>Packet Buffer</p>
    <p>Pointer Passing</p>
    <p>queue&lt;pkt*&gt; queue&lt;pkt*&gt;</p>
  </div>
  <div class="page">
    <p>Reducing copy operations</p>
    <p>queue&lt;pkt&gt;</p>
    <p>pointer directly into queue PointerPassing</p>
  </div>
  <div class="page">
    <p>Technologies</p>
    <p>Programmable switches and PISA: Protocol Independent Switch Architecture  Reconfigurable match-action tables in hardware  multiple stages with TCAM/ALU pair, fixed processing time,</p>
    <p>guarantees line rate</p>
  </div>
</Presentation>
