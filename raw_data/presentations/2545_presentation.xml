<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>F10: A Fault-Tolerant Engineered Network</p>
    <p>Vincent Liu, Daniel Halperin, Arvind Krishnamurthy, Thomas Anderson</p>
    <p>University of Washington</p>
  </div>
  <div class="page">
    <p>Todays Data Centers</p>
    <p>Todays data centers are built using mulI-rooted trees  Commodity switches for cost, bisecIon bandwidth, and resilience to failures</p>
    <p>*From Al-Fares et al. SIGCOMM 08</p>
  </div>
  <div class="page">
    <p>FatTree Example: PortLand</p>
    <p>Heartbeats to detect failures  Centralized controller installs updated routes  Exploits path redundancy</p>
  </div>
  <div class="page">
    <p>Unsolved Issues with FatTrees</p>
    <p>Slow Detec/on  Commodity switches fail oYen  Not always sure they failed (gray/parIal failures)</p>
    <p>Slow Recovery  Failure recovery is not local  Topology does not support local reroutes</p>
    <p>Subop/mal Flow Assignment  Failures result in an unbalanced tree  Loses load balancing properIes</p>
  </div>
  <div class="page">
    <p>F10</p>
    <p>Co-design of topology, rouIng protocols and failure detector  Novel topology that enables local, fast recovery  Cascading protocols for opImal recovery  Fine-grained failure detector for fast detecIon</p>
    <p>Same # of switches/links as FatTrees</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoIvaIon &amp; Approach  Topology: AB FatTree  Cascaded Failover Protocols  Failure DetecIon  EvaluaIon  Conclusion</p>
  </div>
  <div class="page">
    <p>Why is FatTree Recovery Slow?</p>
    <p>Lots of redundancy on the upward path  Immediately restore connecIvity at the point of failure</p>
    <p>dst src</p>
  </div>
  <div class="page">
    <p>Why is FatTree Recovery Slow?</p>
    <p>No redundancy on the way down  AlternaIves are many hops away</p>
    <p>dst src src</p>
    <p>No direct path</p>
    <p>Has alternate path</p>
  </div>
  <div class="page">
    <p>Type A Subtree</p>
    <p>x y</p>
    <p>ConsecuIve Parents</p>
  </div>
  <div class="page">
    <p>Type B Subtree</p>
    <p>x y</p>
    <p>Strided Parents</p>
  </div>
  <div class="page">
    <p>AB FatTree</p>
  </div>
  <div class="page">
    <p>AlternaIves in AB FatTrees</p>
    <p>More nodes have alternaIve, direct paths  One hop away from node with an</p>
    <p>alternaIve</p>
    <p>dst src src</p>
    <p>No direct path</p>
    <p>Has alternate path</p>
  </div>
  <div class="page">
    <p>Cascaded Failover Protocols</p>
    <p>A local rerouIng mechanism  Immediate restoraIon</p>
    <p>A pushback noIficaIon scheme  Restore direct paths</p>
    <p>An epoch-based centralized scheduler  globally re-opImizes traffic</p>
    <p>s</p>
    <p>ms</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Local RerouIng</p>
    <p>Route to a sibling in an opposite-type subtree  Immediate, local rerouIng around the failure</p>
    <p>dst</p>
    <p>u</p>
  </div>
  <div class="page">
    <p>Local RerouIng  MulIple Failures</p>
    <p>Resilient to mulIple failures, refer to paper  Increased load and path dilaIon</p>
    <p>dst</p>
    <p>u</p>
  </div>
  <div class="page">
    <p>Pushback NoIficaIon</p>
    <p>DetecIng switch broadcasts noIficaIon  Restores direct paths, but not finished yet</p>
    <p>u</p>
    <p>No direct path</p>
    <p>Has alternate path</p>
    <p>u</p>
  </div>
  <div class="page">
    <p>Centralized Scheduler</p>
    <p>Related to exisIng work (Hedera, MicroTE)</p>
    <p>Gather traffic matrices  Place long-lived flows based on their size  Place shorter flows with weighted ECMP</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoIvaIon &amp; Approach  Topology: AB FatTree  Cascaded Failover Protocols  Failure DetecIon  EvaluaIon  Conclusion</p>
  </div>
  <div class="page">
    <p>Why are Todays Detectors Slow?</p>
    <p>Based on loss of mulIple heartbeats  Detector is separated from failure</p>
    <p>Slow because:  CongesIon  Gray failures  Dont want to waste too many resources</p>
  </div>
  <div class="page">
    <p>F10 Failure Detector</p>
    <p>Look at the link itself  Send traffic to physical neighbors when idle  Monitor incoming bit transiIons and packets  Stop sending and reroute the very next packet</p>
    <p>Can be fast because rerouIng is cheap</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoIvaIon &amp; Approach  Topology: AB FatTree  Cascaded Failover Protocols  Failure DetecIon  EvaluaIon  Conclusion</p>
  </div>
  <div class="page">
    <p>EvaluaIon</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Testbed  Emulab w/ Click implementaIon  Used smaller packets to account for slower speed</p>
    <p>Packet-level simulator  24-port 10GbE switches, 3 levels  Traffic model from Benson et al. IMC 2010  Failure model from Gill et al. SIGCOMM 2011  Validated using testbed</p>
  </div>
  <div class="page">
    <p>F10 Can Reroute Quickly</p>
    <p>F10 can recover from failures in under a millisecond  Much less Ime than a TCP Imeout</p>
    <p>C on</p>
    <p>ge st</p>
    <p>io n</p>
    <p>W in</p>
    <p>do w</p>
    <p>time (ms)</p>
    <p>Without Failure With Failure</p>
  </div>
  <div class="page">
    <p>F10 Can Avoid CongesIon Loss</p>
    <p>PortLand has 7.6x the congesIon loss of F10 under realisIc traffic and failure condiIons</p>
    <p>C D</p>
    <p>F ov</p>
    <p>er T</p>
    <p>im e</p>
    <p>In te</p>
    <p>rv al</p>
    <p>s</p>
    <p>Normalized Congestion Loss</p>
    <p>F10 PortLand</p>
    <p>C D</p>
    <p>F ov</p>
    <p>er T</p>
    <p>im e</p>
    <p>In te</p>
    <p>rv al</p>
    <p>s</p>
    <p>Normalized Congestion Loss</p>
    <p>F10 PortLand</p>
  </div>
  <div class="page">
    <p>F10 Improves App Performance</p>
    <p>Median speedup is 1.3x 26</p>
    <p>C D</p>
    <p>F o</p>
    <p>ve r</p>
    <p>tr ia</p>
    <p>ls</p>
    <p>Job completion time with PortLand/F10, i.e., Speedup</p>
    <p>Speedup of a MapReduce computation</p>
    <p>C D</p>
    <p>F o</p>
    <p>ve r</p>
    <p>tr ia</p>
    <p>ls</p>
    <p>Job completion time with PortLand/F10, i.e., Speedup</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>F10 is a co-design of topology, rouIng protocols, and failure detector:  AB FatTrees to allow local recovery and increase path diversity</p>
    <p>Pushback and global re-opImizaIon restore congesIon-free operaIon</p>
    <p>Significant benefit to applicaIon performance on typical workloads and failure condiIons</p>
    <p>Thanks!</p>
  </div>
</Presentation>
