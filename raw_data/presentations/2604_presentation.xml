<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Enabling Queries on Compressed Data</p>
    <p>Succinct</p>
  </div>
  <div class="page">
    <p>Distributed data stores</p>
    <p>Fundamental building blocks for many cloud services</p>
    <p>MICA RAMCloud MemC3</p>
  </div>
  <div class="page">
    <p>Records, primary key, secondary keys</p>
    <p>Data stored as collection of records</p>
    <p>USER POSITION BOSS BOSS Description</p>
    <p>Anurag Student Rachit Serious, Pushy ..</p>
    <p>Rachit Postdoc Ion Curious, funny</p>
  </div>
  <div class="page">
    <p>Records, primary key, secondary keys</p>
    <p>Data stored as collection of records</p>
    <p>USER POSITION BOSS BOSS Description</p>
    <p>Anurag Student Rachit Serious, Pushy ..</p>
    <p>Rachit Postdoc Ion Curious, funny</p>
    <p>Primary key</p>
  </div>
  <div class="page">
    <p>Records, primary key, secondary keys</p>
    <p>Data stored as collection of records</p>
    <p>USER POSITION BOSS BOSS Description</p>
    <p>Anurag Student Rachit Serious, Pushy ..</p>
    <p>Rachit Postdoc Ion Curious, funny</p>
    <p>Secondary keys</p>
  </div>
  <div class="page">
    <p>Queries in data stores</p>
    <p>Queries on primary keys  GET, PUT, DELETE  Very efficient [MICA, Redis, RAMCloud]</p>
  </div>
  <div class="page">
    <p>Queries in data stores</p>
    <p>Queries on primary keys  GET, PUT, DELETE  Very efficient [MICA, Redis, RAMCloud]</p>
    <p>Queries on secondary keys  E.g., search  Executed via</p>
    <p>Data scans [columnar stores]  Indexes [Cassandra, MongoDB]</p>
    <p>Either slow or large storage overhead</p>
  </div>
  <div class="page">
    <p>Flat (unstructured) files</p>
    <p>For now, focus on:  Queries on flat (unstructured) files  Very powerful primitive</p>
    <p>Allows queries on semi-structured data  Discussed later</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans</p>
    <p>Low storage! High Latency</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans Indexes</p>
    <p>Low storage! High Latency</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans Indexes</p>
    <p>Low storage! High Latency</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans Indexes</p>
    <p>Low storage! High Latency</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Data Scans Indexes</p>
    <p>Low storage! High Latency</p>
    <p>High storage! Low Latency</p>
    <p>Search( )</p>
  </div>
  <div class="page">
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
  </div>
  <div class="page">
    <p>Scans in ! faster storage</p>
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
  </div>
  <div class="page">
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
    <p>Scans in ! slower storage</p>
  </div>
  <div class="page">
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
    <p>Indexes</p>
  </div>
  <div class="page">
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
    <p>Indexes</p>
    <p>Indexes in ! faster storage</p>
  </div>
  <div class="page">
    <p>Indexes in ! slower storage</p>
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
    <p>Indexes</p>
  </div>
  <div class="page">
    <p>executing queries off slower storage</p>
    <p>Latency with increasing input size</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Data scans</p>
    <p>Indexes</p>
  </div>
  <div class="page">
    <p>Succinct</p>
    <p>Push more data in faster storage  Storage &lt; Input data size</p>
  </div>
  <div class="page">
    <p>Succinct</p>
    <p>Push more data in faster storage  Storage &lt; Input data size</p>
    <p>Execute queries directly on compressed data  No data scans  No data decompression</p>
  </div>
  <div class="page">
    <p>Succinct</p>
    <p>Push more data in faster storage  Storage &lt; Input data size</p>
    <p>Execute queries directly on compressed data  No data scans  No data decompression</p>
    <p>Target: read-heavy append-only workloads</p>
  </div>
  <div class="page">
    <p>Succinct</p>
    <p>Push more data in faster storage  Storage &lt; Input data size</p>
    <p>Execute queries directly on compressed data  No data scans  No data decompression</p>
    <p>Target: read-heavy append-only workloads</p>
    <p>Non-goals: Fault tolerance, data consistency</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
    <p>Queries executed! directly on the !</p>
    <p>compressed representation</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
    <p>Low storage! Low Latency</p>
    <p>Queries executed! directly on the !</p>
    <p>compressed representation</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
    <p>Low storage! Low Latency</p>
    <p>Queries executed! directly on the !</p>
    <p>compressed representation</p>
    <p>What makes Succinct unique</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
    <p>Low storage! Low Latency</p>
    <p>Queries executed! directly on the !</p>
    <p>compressed representation</p>
    <p>What makes Succinct unique</p>
    <p>No additional indexes</p>
    <p>Query responses! embedded within !</p>
    <p>the compressed representation</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
    <p>Low storage! Low Latency</p>
    <p>Queries executed! directly on the !</p>
    <p>compressed representation</p>
    <p>What makes Succinct unique</p>
    <p>No additional indexes</p>
    <p>Query responses! embedded within !</p>
    <p>the compressed representation</p>
    <p>No data scans Functionality of indexes</p>
  </div>
  <div class="page">
    <p>Example: Search( , file)</p>
    <p>Succinct</p>
    <p>Low storage! Low Latency</p>
    <p>Queries executed! directly on the !</p>
    <p>compressed representation</p>
    <p>What makes Succinct unique</p>
    <p>No additional indexes</p>
    <p>Query responses! embedded within !</p>
    <p>the compressed representation</p>
    <p>No data scans Functionality of indexes</p>
    <p>No decompression</p>
    <p>Queries directly on ! the compressed representation! (except for data access queries)</p>
  </div>
  <div class="page">
    <p>Search latency, qualitatively</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Indexes</p>
    <p>Succinct</p>
    <p>Data scans</p>
  </div>
  <div class="page">
    <p>Search latency, qualitatively</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Indexes</p>
    <p>Succinct</p>
    <p>Avoiding data scans</p>
    <p>Data scans</p>
  </div>
  <div class="page">
    <p>Search latency, qualitatively</p>
    <p>Input size</p>
    <p>Query! Latency</p>
    <p>Indexes</p>
    <p>Succinct</p>
    <p>Avoiding queries off slower storage</p>
    <p>Data scans</p>
  </div>
  <div class="page">
    <p>What do we lose?</p>
    <p>Succinct  No secondary indexes  No data scans, no data decompression</p>
  </div>
  <div class="page">
    <p>What do we lose?</p>
    <p>Succinct  No secondary indexes  No data scans, no data decompression</p>
    <p>What do we lose?</p>
  </div>
  <div class="page">
    <p>What do we lose?</p>
    <p>Succinct  No secondary indexes  No data scans, no data decompression</p>
    <p>What do we lose?  Preprocessing expensive (4GB/hour/core)  CPU (for data access)  Sequential scan throughput (13Mbps/thread)  In-place updates</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Builds upon a large body of theory results</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Builds upon a large body of theory results  FM-index</p>
    <p>BWT-based technique  Compressed Suffix arrays</p>
    <p>Suffix array based technique</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Builds upon a large body of theory results  FM-index</p>
    <p>BWT-based technique  Compressed Suffix arrays</p>
    <p>Suffix array based technique</p>
    <p>Succinct  Builds upon latter due to simplicity  Improved data structures (1.253x more space efficient)  New query algorithm (2.3x faster on average)</p>
  </div>
  <div class="page">
    <p>Array of suffixes (AoS)</p>
  </div>
  <div class="page">
    <p>Step 1: ! Construct set of suffixes</p>
    <p>Array of suffixes (AoS)</p>
  </div>
  <div class="page">
    <p>Step 1: ! Construct set of suffixes</p>
    <p>Array of suffixes (AoS)</p>
  </div>
  <div class="page">
    <p>Step 1: ! Construct set of suffixes</p>
    <p>Array of suffixes (AoS)</p>
    <p>h a p p y p u p p y</p>
  </div>
  <div class="page">
    <p>Step 1: ! Construct set of suffixes</p>
    <p>Array of suffixes (AoS)</p>
    <p>h a p p y p u p p y</p>
  </div>
  <div class="page">
    <p>Step 1: ! Construct set of suffixes</p>
    <p>Array of suffixes (AoS)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
  </div>
  <div class="page">
    <p>Step 1: ! Construct set of suffixes</p>
    <p>Array of suffixes (AoS)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Array of suffixes (AoS)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
    <p>Step 2: ! Sort suffixes!</p>
    <p>(lexicographically)</p>
  </div>
  <div class="page">
    <p>Array of suffixes (AoS)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
    <p>Array of suffixes (AoS)</p>
  </div>
  <div class="page">
    <p>Step 3: ! Mark location of</p>
    <p>each sorted suffix ! (in input file)</p>
    <p>Suffix array (AoS2Input)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Step 3: ! Mark location of</p>
    <p>each sorted suffix ! (in input file)</p>
    <p>Suffix array (AoS2Input)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Step 3: ! Mark location of</p>
    <p>each sorted suffix ! (in input file)</p>
    <p>Suffix array (AoS2Input)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Step 3: ! Mark location of</p>
    <p>each sorted suffix ! (in input file)</p>
    <p>Suffix array (AoS2Input)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Step 3: ! Mark location of</p>
    <p>each sorted suffix ! (in input file)</p>
    <p>Suffix array (AoS2Input)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Suffix array (AoS2Input)</p>
    <p>h a p p y p u p p y</p>
    <p>a p p y p u p p y</p>
    <p>p p y p u p p y</p>
    <p>p y p u p p y</p>
    <p>y p u p p y</p>
    <p>p u p p y</p>
    <p>u p p y</p>
    <p>p p y</p>
    <p>p y</p>
    <p>y</p>
    <p>AoS2Input</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>Array of Suffixes (AoS)! (suffixes in sorted order)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>AoS2Input! (location of suffix in file)</p>
    <p>Array of Suffixes (AoS)! (suffixes in sorted order)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Arbitrary substring search! via binary searchya</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem1: Size of AoS! O(n*n) bits</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem1: Size of AoS! O(n*n) bits</p>
    <p>Problem2: Size of AoS2Input! each entry takes log(n) bits</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>h a</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p p</p>
    <p>y</p>
    <p>p p</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>p y</p>
    <p>p y</p>
    <p>p u</p>
    <p>p p</p>
    <p>y</p>
    <p>u p</p>
    <p>p y</p>
    <p>y p</p>
    <p>u p</p>
    <p>p y</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
    <p>ya h p u No redundancy in AoS2Input</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
    <p>ya h p u</p>
    <p>NextCharIdx! (index of next larger value in</p>
    <p>AoS2Input)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
    <p>ya h p u</p>
    <p>NextCharIdx! (index of next larger value in</p>
    <p>AoS2Input)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>NextCharIdx! (index of suffix after removing</p>
    <p>the first character)</p>
    <p>ya h p u</p>
    <p>NextCharIdx! (index of next larger value in</p>
    <p>AoS2Input)</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya h p u No redundancy in AoS2Input</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Solution: Sample!</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem: How to find unsampled values?!</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem: How to find unsampled values?!</p>
    <p>Solution:Follow ! NextCharIdx pointers until</p>
    <p>you hit a sampled value</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem: How to find unsampled values?!</p>
    <p>Solution:Follow ! NextCharIdx pointers until</p>
    <p>you hit a sampled value</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem: How to find unsampled values?!</p>
    <p>Solution:Follow ! NextCharIdx pointers until</p>
    <p>you hit a sampled value</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Problem: How to find unsampled values?!</p>
    <p>Solution:Follow ! NextCharIdx pointers until</p>
    <p>you hit a sampled value</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Succinct Data Representation</p>
    <p>Increasing Integer Sequences</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Can be compressed!</p>
    <p>Succinct Data Representation</p>
    <p>Increasing Integer Sequences</p>
    <p>ya h p u</p>
  </div>
  <div class="page">
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Original Input</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Original Input Succinct</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Original Input Succinct</p>
    <p>Search( ) = {0, 10, 14, 16, 19, 26, 29}</p>
    <p>Search: returns offsets of arbitrary strings in uncompressed file</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Original Input</p>
    <p>Extract: returns data at arbitrary offsets in uncompressed file</p>
    <p>Succinct</p>
    <p>Search( ) = {0, 10, 14, 16, 19, 26, 29} Extract(0, 5) = { , , , , }</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Original Input</p>
    <p>Count: returns count of arbitrary strings in uncompressed file</p>
    <p>Succinct</p>
    <p>Search( ) = {0, 10, 14, 16, 19, 26, 29} Extract(0, 5) = { , , , , }</p>
    <p>Count( ) = 7</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
  </div>
  <div class="page">
    <p>Original Input Succinct</p>
    <p>Search( ) = {0, 10, 14, 16, 19, 26, 29} Extract(0, 5) = { , , , , }</p>
    <p>Count( ) = 7</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
    <p>Append( , , , , )</p>
  </div>
  <div class="page">
    <p>Original Input Succinct</p>
    <p>Search( ) = {0, 10, 14, 16, 19, 26, 29} Extract(0, 5) = { , , , , }</p>
    <p>Count( ) = 7</p>
    <p>Input: flat (unstructured) files</p>
    <p>Data Model and API</p>
    <p>Append( , , , , ) Range and Wildcard queries</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?  Many powerful abstractions on top</p>
    <p>Key-value store [Dynamo, MICA]  Tables [Cassandra, BigTable]  Documents [MongoDB]</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?  Many powerful abstractions on top</p>
    <p>Key-value store [Dynamo, MICA]  Tables [Cassandra, BigTable]  Documents [MongoDB]</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?  Many powerful abstractions on top</p>
    <p>Key-value store [Dynamo, MICA]  Tables [Cassandra, BigTable]  Documents [MongoDB]</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?  Many powerful abstractions on top</p>
    <p>Key-value store [Dynamo, MICA]  Tables [Cassandra, BigTable]  Documents [MongoDB]</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?  Many powerful abstractions on top</p>
    <p>Key-value store [Dynamo, MICA]  Tables [Cassandra, BigTable]  Documents [MongoDB]</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Why flat unstructured files?  Many powerful abstractions on top</p>
    <p>Key-value store [Dynamo, MICA]  Tables [Cassandra, BigTable]  Documents [MongoDB]</p>
    <p>Search(Column1, ) Search( )</p>
    <p>Power of queries on flat files</p>
  </div>
  <div class="page">
    <p>Handling Appends</p>
    <p>Fine-grained updates of compressed data challenging  Succinct does not support in-place updates  Uses a multi-store architecture for appends  Similar to SILT [SOSP11]</p>
  </div>
  <div class="page">
    <p>Handling Appends</p>
    <p>Fine-grained updates of compressed data challenging  Succinct does not support in-place updates  Uses a multi-store architecture for appends  Similar to SILT [SOSP11]</p>
    <p>Challenge</p>
  </div>
  <div class="page">
    <p>Handling Appends</p>
    <p>Fine-grained updates of compressed data challenging  Succinct does not support in-place updates  Uses a multi-store architecture for appends  Similar to SILT [SOSP11]</p>
    <p>Challenge  Multi-store architectures not new  Challenge: supporting queries efficiently  Details in paper</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>LogStore</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuffixStore LogStore</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
  </div>
  <div class="page">
    <p>Cluster Management!  Maintains lists of active servers!  Periodic heartbeats</p>
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
  </div>
  <div class="page">
    <p>Data Management!  Updated pointers to locate data!  Pushes these pointers to servers</p>
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
    <p>QH QH QH QH QH QH QH QH</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
    <p>QH QH QH QH QH QH QH QH</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
    <p>QH QH QH QH QH QH QH QH</p>
    <p>Client</p>
    <p>Query! (primary key)</p>
  </div>
  <div class="page">
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
    <p>QH QH QH QH QH QH QH QH</p>
    <p>Client</p>
    <p>Query! (primary key)</p>
  </div>
  <div class="page">
    <p>Query! (secondary key)</p>
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
    <p>QH QH QH QH QH QH QH QH</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Query! (secondary key)</p>
    <p>End-to-end System</p>
    <p>SuccinctStores SuffixStore LogStore</p>
    <p>Coordinator</p>
    <p>QH QH QH QH QH QH QH QH</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Datasets SmallKV, LargeKV from Conviva customers</p>
    <p>Record length: 140B (SmallKV), 1.3kB (LargeKV)</p>
    <p>Cluster Amazon EC2, 10 machines, m1.xlarge machines</p>
    <p>Workload YCSB for primary; YCSB mapped to secondary keys</p>
    <p>Systems MongoDB, Cassandra, HyperDex, DB-X</p>
    <p>Caveat Absolute numbers are dataset dependent</p>
  </div>
  <div class="page">
    <p>Take-away: Succinct pushes 10-11x more data in faster storage than systems with similar functionality ! (including every single bit stored)</p>
    <p>D a ta</p>
    <p>S iz</p>
    <p>e th</p>
    <p>a t</p>
    <p>F it</p>
    <p>s in</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>(G B</p>
    <p>)</p>
    <p>smallVal LargeVal</p>
    <p>MongoDB</p>
    <p>Cassandra</p>
    <p>HyperDex</p>
    <p>Succinct</p>
    <p>Figure 11: Input data size that each system fits in-memory on a distributed cluster with 150GB main memory (thick horizontal line). Succinct pushes 10-11 larger amount of data in memory compared to popular open-source data stores, while</p>
    <p>providing similar or stronger functionality.</p>
    <p>searches. HyperDex and DB-X do not support wildcard searches. Thus, the evaluated systems provide slightly weaker functionality than Succinct. Finally, for Succinct, we disabled dictionary encoding to evaluate the performance of Succinct techniques in isolation.</p>
    <p>Datasets, Workloads and Cluster. We use two multiattribute record datasets, one smallVal and one largeVal from Conviva customers as shown in Table 2. The workloads used in our evaluation are also summarized in Table 2. Our workloads closely follow YCSB workloads; in particular, we used YCSB to generate query keys and corresponding query frequencies, which were then mapped to the queries in our datasets (for each of read, write, and search queries). All our experiments were performed on Amazon EC2 m1.xlarge machines with 15GB RAM and 4 cores, except for DB-X where we used pre-installed r2.2xlarge instances. Each of the system was warmed up for 5 minutes to maximize the amount of data cached in available memory.</p>
    <p>Figure 11 shows the amount of input data (without indexes) that each system fits across a distributed cluster with 150GB main memory. Succinct supports inmemory queries on data sizes larger than the system RAM; note that Succinct results do not use dictionary encoding and also include pointers required for NoSQL interface extensions (2.1, 5). MongoDB and Cassandra fit roughly 1011 less data than Succinct due to storing secondary indexes along with the input data. HyperDex not only stores large metadata but also avoids touching multiple machines by storing a copy of the entire record with each subspace, thus fitting up to 126 less data than Succinct.</p>
    <p>We now evaluate system throughput using a distributed 10 machine Amazon EC2 cluster. Figure 12 shows throughput results for smallVal and LargeVal datasets across the four workloads from Table 2.</p>
    <p>Workload A. When MongoDB and Cassandra can fit datasets in memory (17GB for smallVal and 23GB for LargeVal across a 150GB RAM cluster), Succincts relative performance depends on record size. For small record sizes, Succinct achieves higher throughput than MongoDB and Cassandra. For MongoDB, the routing server becomes a throughput bottleneck; for Cassandra, the throughput is lower because more queries are executed off-disk. However, when record sizes are large, Succinct achieves slightly lower throughput than MongoDB due to increase in Succincts extract latency.</p>
    <p>When MongoDB and Cassandra data does not fit in memory, Succinct achieves better throughput since it performs in-memory operations while MongoDB and Cassandra have to execute some queries off-disk. Moreover, we observe that Succinct achieves consistent performance across data sizes varying from tens of GB to hundreds of GB.</p>
    <p>Workload B. MongoDB and Succinct observe reduced throughput when a small fraction of queries are append queries. MongoDB throughput reduces since indexes need to be updated upon each write; for Succinct, LogStore writes become a throughput bottleneck. Cassandra being write-optimized observes minimal reduction in throughput. We observe again that, as we increase the data sizes from 17GB to 192GB (for SmallVal) and from 23GB to 242GB (for LargeVal), Succincts throughput remains essentially unchanged.</p>
    <p>Workload C. For search workloads, we expect MongoDB and Cassandra to achieve high throughput due to storing indexes. However, Cassandra requires scanning indexes for search queries leading to low throughput. The case of MongoDB is more interesting. For datasets with fewer number of attributes (SmallVal dataset), MongoDB achieves high throughput due to caching being more effective; for LargeVal dataset, MongoDB search throughput reduces significantly even when the entire index fits in memory. When MongoDB indexes do not fit in memory, Succinct achieves 13134 higher throughput since queries are executed in-memory.</p>
    <p>As earlier, even with 10 increase in data size (for both smallVal and LargeVal), Succinct throughput reduces minimally. As a result, Succincts performance for large datasets is comparable to the performance of MongoDB and Cassandra for much smaller datasets.</p>
  </div>
  <div class="page">
    <p>Take-away: Succinct achieves performance comparable to existing open-source systems for queries on primary attributes</p>
    <p>Throughput for 95% GET + 5% PUT (SmallKV)</p>
    <p>Table 2: (left) Datasets used in our evaluation; (right) Workloads used in our evaluation. All workloads use a query popularity that follows a Zipf distribution with skewness 0.99, similar to YCSB [20].</p>
    <p>Size (Bytes) #Attr- #Records Key Value ibutes (Millions)</p>
    <p>smallVal 8 140 15 1231393 LargeVal 8 1300 98 19200</p>
    <p>Workload Remarks</p>
    <p>A 100% Reads YCSB workload C</p>
    <p>B 95% Reads, 5% appends YCSB workload D</p>
    <p>C 100% Search</p>
    <p>D 95% Search, 5% appends YCSB workload E</p>
    <p>MongoDB Cassandra Succinct</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F 62.5 GB</p>
    <p>RAM+Disk 192 GB</p>
    <p>RAM+Disk</p>
    <p>(a) Workload B, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload D, SmallVal (a) Workload D, LargeVal</p>
    <p>Figure 12: Succinct throughput against MongoDB and Cassandra for varying datasets, data sizes and workloads. MongoDB and Cassandra fit 17GB of SmallVal dataset and 23GB of LargeVal dataset in memory; Succinct fits 192GB and 242GB,</p>
    <p>respectively. DNF denote the experiment did not finish after 100 hours of data loading, mostly due to index construction time. Note that top four figures have different y-scales.</p>
    <p>Table 2: (left) Datasets used in our evaluation; (right) Workloads used in our evaluation. All workloads use a query popularity that follows a Zipf distribution with skewness 0.99, similar to YCSB [20].</p>
    <p>Size (Bytes) #Attr- #Records Key Value ibutes (Millions)</p>
    <p>smallVal 8 140 15 1231393 LargeVal 8 1300 98 19200</p>
    <p>Workload Remarks</p>
    <p>A 100% Reads YCSB workload C</p>
    <p>B 95% Reads, 5% appends YCSB workload D</p>
    <p>C 100% Search</p>
    <p>D 95% Search, 5% appends YCSB workload E</p>
    <p>MongoDB Cassandra Succinct</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload D, SmallVal (a) Workload D, LargeVal</p>
    <p>Figure 12: Succinct throughput against MongoDB and Cassandra for varying datasets, data sizes and workloads. MongoDB and Cassandra fit 17GB of SmallVal dataset and 23GB of LargeVal dataset in memory; Succinct fits 192GB and 242GB,</p>
    <p>respectively. DNF denote the experiment did not finish after 100 hours of data loading, mostly due to index construction time. Note that top four figures have different y-scales.</p>
  </div>
  <div class="page">
    <p>Take-away: Succinct by pushing more data in faster storage provides performance similar to existing systems for 10-11x larger data sizes</p>
    <p>Throughput for 95% SEARCH + 5% PUT (SmallKV)</p>
    <p>Table 2: (left) Datasets used in our evaluation; (right) Workloads used in our evaluation. All workloads use a query popularity that follows a Zipf distribution with skewness 0.99, similar to YCSB [20].</p>
    <p>Size (Bytes) #Attr- #Records Key Value ibutes (Millions)</p>
    <p>smallVal 8 140 15 1231393 LargeVal 8 1300 98 19200</p>
    <p>Workload Remarks</p>
    <p>A 100% Reads YCSB workload C</p>
    <p>B 95% Reads, 5% appends YCSB workload D</p>
    <p>C 100% Search</p>
    <p>D 95% Search, 5% appends YCSB workload E</p>
    <p>MongoDB Cassandra Succinct</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload D, SmallVal (a) Workload D, LargeVal</p>
    <p>Figure 12: Succinct throughput against MongoDB and Cassandra for varying datasets, data sizes and workloads. MongoDB and Cassandra fit 17GB of SmallVal dataset and 23GB of LargeVal dataset in memory; Succinct fits 192GB and 242GB,</p>
    <p>respectively. DNF denote the experiment did not finish after 100 hours of data loading, mostly due to index construction time. Note that top four figures have different y-scales.</p>
    <p>Table 2: (left) Datasets used in our evaluation; (right) Workloads used in our evaluation. All workloads use a query popularity that follows a Zipf distribution with skewness 0.99, similar to YCSB [20].</p>
    <p>Size (Bytes) #Attr- #Records Key Value ibutes (Millions)</p>
    <p>smallVal 8 140 15 1231393 LargeVal 8 1300 98 19200</p>
    <p>Workload Remarks</p>
    <p>A 100% Reads YCSB workload C</p>
    <p>B 95% Reads, 5% appends YCSB workload D</p>
    <p>C 100% Search</p>
    <p>D 95% Search, 5% appends YCSB workload E</p>
    <p>MongoDB Cassandra Succinct</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>103 (a) Workload A, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload B, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, SmallVal</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>(O p</p>
    <p>s/ se</p>
    <p>co n</p>
    <p>d )</p>
    <p>D N</p>
    <p>F</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload C, LargeVal</p>
    <p>D N</p>
    <p>F</p>
    <p>(a) Workload D, SmallVal (a) Workload D, LargeVal</p>
    <p>Figure 12: Succinct throughput against MongoDB and Cassandra for varying datasets, data sizes and workloads. MongoDB and Cassandra fit 17GB of SmallVal dataset and 23GB of LargeVal dataset in memory; Succinct fits 192GB and 242GB,</p>
    <p>respectively. DNF denote the experiment did not finish after 100 hours of data loading, mostly due to index construction time. Note that top four figures have different y-scales.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Succinct pushes 10-11x more data in faster storage! (compared to popular open-source systems)</p>
    <p>Succinct executes queries directly on compressed representation</p>
    <p>Avoids data scans and data decompression costs</p>
    <p>Enables interactive queries on secondary keys ! (for semi-structured data)!</p>
  </div>
</Presentation>
