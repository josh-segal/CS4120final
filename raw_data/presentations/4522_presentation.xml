<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>InvisiFence: Performance-Transparent Memory Ordering</p>
    <p>in Conventional Multiprocessors Colin Blundell (University of Pennsylvania)</p>
    <p>Milo M. K. Martin (University of Pennsylvania) Thomas F. Wenisch (University of Michigan)</p>
  </div>
  <div class="page">
    <p>This work licensed under the Creative Commons Attribution-Share Alike 3.0 United StatesLicense</p>
    <p>You are free:  to Share  to copy, distribute, display, and perform the work  to Remix  to make derivative works</p>
    <p>Under the following conditions:  Attribution. You must attribute the work in the manner specified by the author or</p>
    <p>licensor (but not in any way that suggests that they endorse you or your use of the work).  Share Alike. If you alter, transform, or build upon this work, you may distribute the</p>
    <p>resulting work only under the same, similar or a compatible license.</p>
    <p>For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do this is with a link to:</p>
    <p>http://creativecommons.org/licenses/by-sa/3.0/us/  Any of the above conditions can be waived if you get permission from the</p>
    <p>copyright holder.  Apart from the remix rights granted under this license, nothing in this</p>
    <p>license impairs or restricts the author's moral rights.</p>
    <p>[ 2 ]InvisiFence - Blundell - ISCA 2009</p>
  </div>
  <div class="page">
    <p>Performance Impact of Memory Ordering</p>
    <p>Memory ordering (still) causes stalls</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 3 ]</p>
  </div>
  <div class="page">
    <p>Performance Impact of Memory Ordering</p>
    <p>Even with relaxed memory models  Frequent memory fences &amp; atomic RMWs (synchronization)</p>
    <p>Even with aggressive in-window speculation  Cant tolerate long miss latencies</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 4 ]</p>
    <p>sc ts o</p>
    <p>rm o sc ts o</p>
    <p>rm o sc ts o</p>
    <p>rm o sc ts o</p>
    <p>rm o sc ts o</p>
    <p>rm o sc ts o</p>
    <p>rm o sc ts o</p>
    <p>rm o</p>
    <p>% T</p>
    <p>im e</p>
    <p>St al</p>
    <p>lin g</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>Speculative Memory Ordering</p>
    <p>Hide stalls with beyond-the-window speculation  Races rare  ordering stalls usually unnecessary [Gniady99]</p>
    <p>Past work focused on programmability  Thus, focused on strong ordering (SC/PC)</p>
    <p>+ Effectively eliminate stalling  Complex mechanisms:</p>
    <p>Fine-grained (per-store) tracking</p>
    <p>[Wenisch07]</p>
    <p>Expensive commit</p>
    <p>[Ceze07, Wenisch07]</p>
    <p>Unconventional memory system</p>
    <p>[Ceze07]</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 5 ]</p>
  </div>
  <div class="page">
    <p>Our Approach: InvisiFence</p>
    <p>Key departure: apply to weakly-ordered system  Straightforward hardware; fewest stalls to address</p>
    <p>Augment with familiar deep speculation mechanisms  Violation detection: read/write bits in cache  Version management: clean to L2 before 1st write</p>
    <p>Result: eliminate fence stalls (up to 13% speedup)  No fine-grained (per-store) tracking  Fast &amp; simple commit and rollback  Conventional memory system</p>
    <p>For strong ordering: speculate more (implicit fences)  Bonus: can even eliminate LSQ snooping! (a la [Ceze07])</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 6 ]</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>InvisiFence for weak ordering  Generalizing InvisiFence to stronger models  Subsuming in-window speculation  Conclusions</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 7 ]</p>
  </div>
  <div class="page">
    <p>Background: Weak Ordering</p>
    <p>Relaxes ordering except at programmer-inserted fences  Allows unordered store buffer to hide store misses</p>
    <p>Unordered, coalescing store buffers  simple, scalable  Cache-like organization  Store hits skip store buffer; only one entry per miss  Result: largely eliminate capacity stalls of FIFO store buffers</p>
    <p>However, still incur consistency-induced stalls even with in-window speculation (LSQ snooping)  Fences: drain store buffer (stall until empty)  Atomic ops: stall until has write permission</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 8 ]</p>
  </div>
  <div class="page">
    <p>InvisiFence For Weak Ordering</p>
    <p>Add deep speculation to eliminate stalling on fences</p>
    <p>Mechanism: register ckpt + 2 bits per L1 cache line  Similar HW to other deep speculation (TLS, TM, Cherry)</p>
    <p>Initiate speculation at fence instructions  Detect violations via cache coherence protocol  Preserve non-speculative data in L2 (facilitates rollback)</p>
    <p>Speculation ends when store buffer becomes empty  Commit by flash-clearing read/write bits</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 9 ]</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence Hardware</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 10 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>L2</p>
    <p>Baseline: OoO pipeline LSQ snooping Writeback L1 &amp; L2 Invalidation-based CC Coalescing store buffer</p>
    <p>InvisiFence extensions: Register checkpoint 2 bits per L1 cache line 2 bits per SB entry</p>
    <p>SB r/w?</p>
    <p>Ckpt</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Example</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 11 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail FS L S</p>
    <p>r/w?</p>
    <p>Ckpt</p>
    <p>S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Initiate speculation Speculatively retire fence</p>
    <p>L2</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
    <p>Fence wants to retire</p>
    <p>but store miss outstanding</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Violation Detection</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 12 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail S L</p>
    <p>r/w?</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>At store retirement: Set write bit</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>S</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Violation Detection</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 13 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail S L</p>
    <p>r/w?</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2</p>
    <p>At load retirement: Set read bit</p>
    <p>S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Violation Detection</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 14 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail S L</p>
    <p>r/w?</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2</p>
    <p>To detect violations: snoop bits</p>
    <p>S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Dirty</p>
    <p>Head</p>
    <p>InvisiFence: Version Management</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 15 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail S</p>
    <p>r/w?</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2</p>
    <p>Clean to L2 before 1st speculative write</p>
    <p>S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Version Management</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 16 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>S</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Version Management</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 17 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>Can always recover non-spec version from L2</p>
    <p>(no custom storage)</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Rollback</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 18 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
  </div>
  <div class="page">
    <p>Flash-inval spec. dirty blocks</p>
    <p>Head</p>
    <p>InvisiFence: Rollback</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 19 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2</p>
    <p>Restore checkpoint</p>
    <p>S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
    <p>Flash-inval spec. dirty blocks Flash-clear bits</p>
    <p>Flash-clear bits</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Rollback</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 20 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>F</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>DirtyDirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
    <p>Begin re-execution</p>
    <p>Rollback: Fast &amp; simple</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: When to Commit?</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 21 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB</p>
    <p>S</p>
    <p>r/w?</p>
    <p>Back to speculation: Store returns</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: When to Commit?</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 22 ]</p>
    <p>P0 ROB</p>
    <p>L1 SB</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>S</p>
    <p>r/w? Move store &amp; r/w bit</p>
    <p>from SB to L1</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: When to Commit?</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 23 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB r/w? No outstanding stores:</p>
    <p>Legal to commit</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Commit</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 24 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>w</p>
    <p>r</p>
    <p>w</p>
    <p>Ckpt</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB r/w?</p>
    <p>Flash-clear bits</p>
    <p>Discard checkpoint</p>
  </div>
  <div class="page">
    <p>Head</p>
    <p>InvisiFence: Commit</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 25 ]</p>
    <p>P0 ROB</p>
    <p>L1</p>
    <p>P1Tail</p>
    <p>r/w?</p>
    <p>L2 S</p>
    <p>F</p>
    <p>LStore Load Fence Other Insn</p>
    <p>Key</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>Dirty</p>
    <p>SB r/w? Commit:</p>
    <p>Fast &amp; simple</p>
  </div>
  <div class="page">
    <p>InvisiFence Performance</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 26 ]</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>SimFlex simulation of 16-node directory-based SPARC MP SPARCs RMO (similar to Alpha, ARM, PowerPC)</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>InvisiFence Performance</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 27 ]</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>rm o</p>
    <p>IF -r</p>
    <p>m o</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>InvisiFence eliminates fence stalls without violations But what about models requiring stronger ordering?</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>Generalizing InvisiFence for Strong Ordering</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 28 ]</p>
    <p>Strong models impose additional ordering constraints  Processor Consistency (x86, TSO): ordering between stores  Sequential Consistency: ordering between all operations</p>
    <p>These constraints are conceptually implicit fences  e.g., for SC: every operation is implicit fence</p>
    <p>InvisiFence can handle these just like explicit fences!  Increases speculation frequency</p>
    <p>No other hardware changes</p>
  </div>
  <div class="page">
    <p>Strong Ordering Performance (SC)</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 29 ]</p>
    <p>scIF-scASOscscIF-scscIF-scscIF-scscIF-scscIF-scscIF-sc 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
    <p>Violations are negligible (3% slowdown from IF-RMO) How does this compare to prior work?</p>
  </div>
  <div class="page">
    <p>Strong Ordering Performance (SC)</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 30 ]</p>
    <p>scIF-scASOscscIF-scASOscscIF-scASOscscIF-scASOscscIF-scASOscscIF-scASOscscIF-scASOsc 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>Comparison to Atomic Sequence Ordering [Wenisch`07]: Both eliminate stalls</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>ASO &amp; InvisiFence: Design Comparison</p>
    <p>Fine-grained tracking  1K-entry store buffer  10 KB</p>
    <p>Lengthy commit  Atomically drain SB to L2  Multiple checkpoints</p>
    <p>Changes to L1  Mult. per-block R/W bits  Write-through  Per-word valid bits</p>
    <p>Coalesced tracking  8-entry store buffer  &lt; 1 KB</p>
    <p>Constant-time commit  Flash-clear bits  Single checkpoint</p>
    <p>Changes to L1  Single per-block R/W bits  Clean to L2</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 31 ]</p>
    <p>Both eliminate stalls, but InvisiFence hardware simpler</p>
    <p>ASO [Wenisch07] InvisiFence</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>InvisiFence for weak ordering  Generalizing InvisiFence to stronger models  Subsuming in-window speculation  Conclusions</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 32 ]</p>
  </div>
  <div class="page">
    <p>Prior work: subsume LSQ snooping via continuous spec.  Execution divided into continuous speculative chunks  Deep spec. tracks loads from execution to chunk commit  Commit a chunk once all stores complete &amp; all loads retire</p>
    <p>Existing designs acquire store permissions at commit  Lazy conflict detection (lowers vulnerability to violations)  Shown to be useful for other applications (TM, debugging, )  Requires extensions to conventional memory systems</p>
    <p>InvisiFence can also support continuous speculation  Eliminates LSQ snooping with local commit  Like prior work, pipelines commit with second checkpoint</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 33 ]</p>
    <p>Key Idea: Continuous Speculation [Hammond04, Ceze07]</p>
  </div>
  <div class="page">
    <p>Continuous Speculation Performance</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 34 ]</p>
    <p>scIF-contIF-cont+scIF-contscIF-contscIF-contscIF-contscIF-contscIF-cont 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>To reduce rollbacks: Commit on Violation  Temporarily defer conflicting requests</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>Continuous Speculation Performance</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 35 ]</p>
    <p>scIF-contIF-cont+scIF-contIF-cont+scIF-contIF-cont+scIF-contIF-cont+scIF-contIF-cont+scIF-contIF-cont+scIF-contIF-cont+ 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>Continuous Speculation Performance</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 36 ]</p>
    <p>scIF-contIF-cont+IF-scscIF-contIF-cont+IF-scscIF-contIF-cont+IF-scscIF-contIF-cont+IF-scscIF-contIF-cont+IF-scscIF-contIF-cont+IF-scscIF-contIF-cont+IF-sc 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>IF-cont+ (with commit on violation) achieves IF-sc performance without LSQ snooping</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>InvisiFence eliminates stalls from weak ordering  Without per-store buffering  With fast &amp; simple commit and abort  Using a conventional memory system</p>
    <p>Same hardware can provide strong ordering  Adjust policy to start speculation  InvisiFence-SC: within 3% of InvisiFence-RMO</p>
    <p>Subsume in-window speculation mechanisms  Add continuous speculation + commit on violation  InvisiFence-SC performance without LSQ snooping</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 37 ]</p>
  </div>
  <div class="page">
    <p>InvisiFence - Blundell - ISCA 2009 [ 38 ]</p>
  </div>
  <div class="page">
    <p>InvisiFenceNormalized Runtime Results</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 39 ]</p>
    <p>IF-rmoIF-tsoIF-scIF-cont+IF-rmoIF-tsoIF-scIF-cont+IF-rmoIF-tsoIF-scIF-cont+IF-rmoIF-tsoIF-scIF-cont+IF-rmoIF-tsoIF-scIF-cont+IF-rmoIF-tsoIF-scIF-cont+IF-rmoIF-tsoIF-scIF-cont+ 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>Same perf. for any model; identical hardware</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>TSO Performance</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 40 ]</p>
    <p>tsoIF-tsotsoIF-tsotsoIF-tsotsoIF-tsotsoIF-tsotsoIF-tsotsoIF-tso 0.0</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>InvisiFence eliminates ordering stalls, improves MLP</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
  </div>
  <div class="page">
    <p>Generalizing InvisiFence for Strong Ordering</p>
    <p>InvisiFence - Blundell - ISCA 2009 [ 41 ]</p>
    <p>Strong models impose additional ordering constraints  InvisiFence treats these constraints as implicit fences  Increases speculation frequency</p>
    <p>IF-rmoIF-tsoIF-scIF-rmoIF-tsoIF-scIF-rmoIF-tsoIF-scIF-rmoIF-tsoIF-scIF-rmoIF-tsoIF-scIF-rmoIF-tsoIF-scIF-rmoIF-tsoIF-sc 0%</p>
    <p>Ti m</p>
    <p>e sp</p>
    <p>ec ul</p>
    <p>ati ng</p>
    <p>apache zeus oracle oltp-db2 dss-db2 barnes ocean</p>
    <p>No other hardware changes</p>
  </div>
</Presentation>
