<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ang Li Xiaowei Yang Duke University Srikanth Kandula Ming Zhang Microsoft Research</p>
  </div>
  <div class="page">
    <p>Cloud computing is gaining popularity</p>
    <p>Which cloud provider is best suited for my application?</p>
    <p>Potential Cloud Customer</p>
    <p>Legacy Application</p>
  </div>
  <div class="page">
    <p>Reason #1: clouds have different service models  Infrastructure-as-a-Service  Virtual machines with customized guest OSes  Applications run on virtual machines using OS APIs  Platform-as-a-Service  Sandbox environment with specific platform APIs  A mixture of both  E.g., Amazon AWS</p>
    <p>Unclear how to compare clouds with different service models</p>
  </div>
  <div class="page">
    <p>Reason #2: clouds offer different charging schemes  Pay per instance-hour  How many instances are allocated and how long each one</p>
    <p>is used  Charged regardless of utilization  Pay per CPU cycle  How many CPU cycles are consumed by the application  An idle application incurs no cost</p>
    <p>Prices of different clouds are not directly comparable</p>
  </div>
  <div class="page">
    <p>Reason #3: applications have different characteristics  Storage intensive  E.g., backup services  Computation intensive  E.g., scientific computing, data processing (MapReduce, Dryad)  Network latency sensitive  E.g., online web services</p>
    <p>One/few application benchmarks may not represent all types of applications</p>
  </div>
  <div class="page">
    <p>Reason #4: high overhead to port application to clouds  Different and incompatible APIs  Especially true for PaaS providers  Configuration and data migration  Time-consuming  Privacy concern</p>
  </div>
  <div class="page">
    <p>The ultimate goal:</p>
    <p>Application-specific  Little/no deployment overhead  Help understand performance-cost trade-off</p>
    <p>Estimate the performance and costs of an application on a cloud without actually deploying it</p>
  </div>
  <div class="page">
    <p>Proposed design of CloudCmp  Identify common services  Benchmark services  Capture application workload  Predict performance and costs</p>
    <p>Challenges  How to design the benchmarking tasks</p>
    <p>Benchmarking results  Correlate well with actual application</p>
    <p>performance  Conclusion</p>
  </div>
  <div class="page">
    <p>Step 1: identify the common cloud services  Step 2: benchmark the services</p>
    <p>Intra-cloud network</p>
    <p>Storage service</p>
    <p>Computation service</p>
    <p>Wide-area network</p>
    <p>Web application</p>
  </div>
  <div class="page">
    <p>Step 3: capture realistic application workload  Extract the execution path of each request</p>
    <p>Step 4: estimate the performance and costs  Combine benchmarking results and workload information</p>
    <p>Frontend</p>
    <p>Database</p>
    <p>Request</p>
    <p>Response</p>
    <p>Estimated processing time Estimated cost</p>
  </div>
  <div class="page">
    <p>How to design the benchmarking tasks?  Fair and representative</p>
    <p>How to accurately capture the execution path of a request?  An execution path can be complex, across</p>
    <p>multiple machines</p>
    <p>How to estimate the overall processing time of an application  Applications can be multi-threaded</p>
  </div>
  <div class="page">
    <p>How to design the benchmarking tasks?  Fair and representative</p>
    <p>How to accurately capture the execution path of a request?  An execution path can be complex, across</p>
    <p>multiple machines</p>
    <p>How to estimate the overall processing time of an application  Applications can be multi-threaded</p>
  </div>
  <div class="page">
    <p>Java-based benchmarking tasks  CPU/memory/disk I/O intensive  Same byte-code on different providers  Minimize the bias introduced by different compilers/</p>
    <p>interpreters</p>
    <p>Measure the cost per task  Pay per instance-hour  Compute using the per hour price and the task</p>
    <p>running time  Pay per CPU cycle  Obtain the CPU cycles using cloud APIs</p>
  </div>
  <div class="page">
    <p>Test common storage operations  Insert/fetch/query  Test against tables with different sizes</p>
    <p>Measure each operations latency and cost</p>
  </div>
  <div class="page">
    <p>Intra-cloud network  Measure the TCP throughput and latency</p>
    <p>between two randomly chosen instances</p>
    <p>Wide-area network  Measure the latency from vantage points on</p>
    <p>PlanetLab  Vantage points are chosen from diverse locations</p>
  </div>
  <div class="page">
    <p>Measure three popular cloud providers  One PaaS, two IaaS with storage APIs  Names of the clouds are removed due to legal</p>
    <p>concerns  Referred to as Cloud X, Y, and Z</p>
  </div>
  <div class="page">
    <p>At similar pricing points, different clouds can offer greatly diverse performance</p>
    <p>Benchmark finishing time Benchmark running cost</p>
  </div>
  <div class="page">
    <p>Despite Xs good performance in computation, its storage service can be slower than the others  A cloud may not ace all services</p>
  </div>
  <div class="page">
    <p>Minimum latency to the closest data center</p>
    <p>On average, Xs wide-area network latency can be up to 80% shorter than that of the others</p>
  </div>
  <div class="page">
    <p>Deploy real application on different clouds  BLAST: distributed, computation intensive</p>
    <p>Cloud Y Cloud Z</p>
    <p>Future work: to estimate the exact time and costs using the benchmarking results</p>
    <p>X Y Z</p>
  </div>
  <div class="page">
    <p>Choosing the best-suited cloud is non-trivial  CloudCmp aims to help compare cloud providers</p>
    <p>without actual deployment  Application-specific  Little deployment overhead  Estimate both performance and costs</p>
    <p>We think CloudCmp can be useful in practice  Clouds offer diverse performance  No cloud aces all services  Benchmarking results correlate well with actual application</p>
    <p>performance</p>
  </div>
  <div class="page">
    <p>Questions?  http://cloudcmp.net</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>The scaling latencies of different providers vary significantly (Zs latency is more than twice as high as Ys)  The choice of operating system can affect scaling performance as well</p>
  </div>
  <div class="page">
    <p>Blackbox tools to infer causal relationship  Do not require modifying the application  vPath [Tak09]  Exploit the common programming model of web applications  //Trace [Mesnier07]  A more general approach using the throttling technique</p>
  </div>
  <div class="page">
    <p>Simulate the execution process  Similar to the technique used in WebProphet [Li2010]  Estimate the time spent on each component using</p>
    <p>benchmarking results  Simulate the execution with the constraints of the</p>
    <p>causal relationships  E.g., component A depends on component B, then A can only</p>
    <p>be executed after B has finished</p>
  </div>
</Presentation>
