<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards prac+cal incremental recomputa+on for scien+sts</p>
    <p>Philip J. Guo and Dawson Engler</p>
    <p>Workshop on the Theory and Prac+ce of Provenance Feb 22, 2010</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
  </div>
  <div class="page">
    <p>Types of programs</p>
    <p>All programs wriKen</p>
    <p>Size &amp; complexity</p>
    <p>Research prototypes Data munging and analysis scripts</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Scien+fic data processing and analysis scripts oQen execute for several minutes to hours, which slows down the scien+sts itera+on and debugging cycle.</p>
  </div>
  <div class="page">
    <p>Manually coping</p>
    <p>Code size and complexity</p>
    <p>Itera+on / reexecu+on</p>
    <p>+me</p>
    <p>Write ini+al singlefile Python prototype</p>
    <p>Rewrite to break computa+on into mul+ple stages (files) and selec+vely commentout code to test</p>
    <p>Write code to cache intermediate results to disk and manually manage dependencies</p>
  </div>
  <div class="page">
    <p>Code amount and complexity</p>
    <p>Let interpreter cache and manage intermediate results</p>
    <p>Itera+on / reexecu+on</p>
    <p>+me</p>
    <p>Write ini+al singlefile Python prototype</p>
    <p>Automated solu+on</p>
  </div>
  <div class="page">
    <p>Ideal workflow</p>
  </div>
  <div class="page">
    <p>Technique</p>
    <p>Fully automa+c and persistent memoiza+on for a general purpose impera+ve language</p>
  </div>
  <div class="page">
    <p>Tradi+onal memoiza+on</p>
    <p>def Fib(n): if n &lt;= 2: return 1 else: return Fib(n1) + Fib(n2)</p>
  </div>
  <div class="page">
    <p>Tradi+onal memoiza+on</p>
    <p>MemoTable = {}</p>
    <p>def Fib(n): if n &lt;= 2: return 1 else: if n in MemoTable: return MemoTable[n] else: MemoTable[n] = Fib(n1) + Fib(n2) return MemoTable[n]</p>
    <p>Input (n) Result</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs</p>
  </div>
  <div class="page">
    <p>def stageC(datLst): res = ... # run for 10 minutes munging datLst return res</p>
    <p>Input (datLst) Result</p>
    <p>[1,2,3,4] 10</p>
    <p>[5,6,7,8] 20</p>
    <p>[9,10,11,12] 30</p>
    <p>Automemoizing real programs: Detec+ng code changes</p>
  </div>
  <div class="page">
    <p>def stageC(datLst): res = ... # run for 10 minutes munging datLst return res</p>
    <p>Input (datLst) Code deps. Result</p>
    <p>[1,2,3,4] stageC &gt; C1 10</p>
    <p>[5,6,7,8] stageC &gt; C1 20</p>
    <p>[9,10,11,12] stageC &gt; C1 30</p>
    <p>Automemoizing real programs: Detec+ng code changes</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng code changes</p>
    <p>def stageC(datLst): res = ... # run for 10 minutes munging datLst return (res * 1)</p>
    <p>Input (datLst) Code deps. Result</p>
    <p>[1,2,3,4] stageC &gt; C1 10</p>
    <p>[5,6,7,8] stageC &gt; C1 20</p>
    <p>[9,10,11,12] stageC &gt; C1 30</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng code changes</p>
    <p>def stageC(datLst): res = ... # run for 10 minutes munging datLst return (res * 1)</p>
    <p>Input (datLst) Code deps. Result</p>
    <p>[1,2,3,4] stageC &gt; C1 10</p>
    <p>[5,6,7,8] stageC &gt; C1 20</p>
    <p>[9,10,11,12] stageC &gt; C1 30</p>
    <p>[1,2,3,4] stageC &gt; C2 10</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng file reads</p>
    <p>Input (queryStr) Code deps. Result</p>
    <p>SELECT * FROM tbl1 stageB &gt; B1 1</p>
    <p>SELECT * FROM tbl2 stageB &gt; B1 2</p>
    <p>def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return res</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng file reads</p>
    <p>def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return res</p>
    <p>Input (queryStr) Code deps. File deps. Result</p>
    <p>SELECT * FROM tbl1 stageB &gt; B1 test.db &gt; DB1 1</p>
    <p>SELECT * FROM tbl2 stageB &gt; B1 test.db &gt; DB1 2</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng global variable reads</p>
    <p>MULTIPLIER = 5 def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return (res * MULTIPLIER)</p>
    <p>Input (queryStr) Code deps. File deps. Result</p>
    <p>SELECT * FROM tbl1 stageB &gt; B2 test.db &gt; DB1 5</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng global variable reads</p>
    <p>Input (queryStr) Code deps. File deps. Global deps. Result</p>
    <p>SELECT * FROM tbl1 stageB &gt; B2 test.db &gt; DB1 MULTIPLIER &gt; 5 5</p>
    <p>MULTIPLIER = 5 def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return (res * MULTIPLIER)</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng global variable reads</p>
    <p>Input (queryStr) Code deps. File deps. Global deps. Result</p>
    <p>SELECT * FROM tbl1 stageB &gt; B2 test.db &gt; DB1 MULTIPLIER &gt; 5 5</p>
    <p>SELECT * FROM tbl1 stageB &gt; B2 test.db &gt; DB1 MULTIPLIER &gt; 10 10</p>
    <p>MULTIPLIER = 10 def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return (res * MULTIPLIER)</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng transi+ve dependencies</p>
    <p>Input (filename) Code deps. File deps. Global deps. Result</p>
    <p>queries.txt stageA &gt; A1 queries.txt &gt; Q1 50</p>
    <p>def stageA(filename): lst = [] for line in open(filename): lst.append(stageB(line)) transformedLst = stageC(lst) return sum(transformedLst)</p>
  </div>
  <div class="page">
    <p>def stageA(filename): lst = [] for line in open(filename): lst.append(stageB(line)) transformedLst = stageC(lst) return sum(transformedLst)</p>
    <p>def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return (res * MULTIPLIER)</p>
    <p>def stageC(datLst): res = ... # run for 10 minutes munging datLst return res</p>
    <p>queries.txt</p>
    <p>MULTIPLIER = 5</p>
    <p>test.db</p>
    <p>Automemoizing real programs: Detec+ng transi+ve dependencies</p>
  </div>
  <div class="page">
    <p>Automemoizing real programs: Detec+ng transi+ve dependencies</p>
    <p>Input (filename) Code deps. File deps. Global deps. Result</p>
    <p>queries.txt stageA &gt; A1 stageB &gt; B1 stageC &gt; C1</p>
    <p>queries.txt &gt; Q1 test.db &gt; DB1</p>
    <p>MULTIPLIER &gt; 5 50</p>
    <p>def stageA(filename): lst = [] for line in open(filename): lst.append(stageB(line)) transformedLst = stageC(lst) return sum(transformedLst)</p>
  </div>
  <div class="page">
    <p>Before memoizing a given rou+ne, the programmer needs to verify that there is no internal dependency on side effects. This is not always simple; despite aKempts to encourage a func+onal programming style, programmers will occasionally discover that some rou+ne their func+on depended upon had some deeply buried dependence on a global variable or the slot value of a CLOS [Common Lisp Object System] Instance. [Hall and Mayfield, 1993]</p>
    <p>Automemoizing real programs: Detec+ng impurity</p>
  </div>
  <div class="page">
    <p>All func+ons start out pure  Mark all func+ons on stack as impure when:  Muta+ng a nonlocal value  Wri+ng to a file  Calling a nondeterminis+c func+on</p>
    <p>Data analysis func+ons mostly pure</p>
    <p>Automemoizing real programs: Detec+ng impurity</p>
  </div>
  <div class="page">
    <p>Incremental recomputa+on</p>
    <p>def stageA(filename): lst = [] for line in open(filename): lst.append(stageB(line)) transformedLst = stageC(lst) return sum(transformedLst)</p>
    <p>def stageB(queryStr): db = sql_open_db(test.db) q = db.query(queryStr) res = ... # run for 10 minutes processing q return (res * MULTIPLIER)</p>
    <p>def stageC(datLst): res = ... # run for 10 minutes munging datLst return res</p>
    <p>queries.txt</p>
    <p>SELECT  SELECT  SELECT  SELECT  SELECT</p>
    <p>MULTIPLIER = 5</p>
    <p>test.db</p>
  </div>
  <div class="page">
    <p>Benefits</p>
  </div>
  <div class="page">
    <p>Talk review</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Ongoing and future work</p>
    <p>Provenance browsing  Databaseaware caching  Networkaware caching  Lightweight programmer annota+ons  Finergrained tracking within func+ons</p>
  </div>
  <div class="page">
    <p>Implementa+on</p>
    <p>Python as target language  Plugandplay with no code changes  Low run+me overhead  Compa+ble with 3rdparty libraries</p>
  </div>
</Presentation>
