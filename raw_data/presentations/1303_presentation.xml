<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Branching vs. Linear Time: Semantical Perspective</p>
    <p>Moshe Y. Vardi</p>
    <p>Rice University</p>
    <p>Updated version of paper posted on home page. Joint work with Sumit Nain</p>
  </div>
  <div class="page">
    <p>Formal Verification Today</p>
    <p>Verification as debugging: Failure of verification identifies bugs.</p>
    <p>Both specifications and programs attempt to formalize informal requirements.</p>
    <p>Verification contrasts two independent formalizations.</p>
    <p>Failure of verification reveals inconsistency between the two formalizations.</p>
    <p>Model checking: uncommonly effective debugging tool</p>
    <p>a systematic exploration of the design state space</p>
    <p>good at catching difficult corner cases</p>
  </div>
  <div class="page">
    <p>Designs are Labeled Graphs</p>
    <p>Key Idea: Designs can be represented as transition systems (finite-state machines)</p>
    <p>State-Transition System: M = (W,I,R,F,)</p>
    <p>W : states</p>
    <p>I  W : initial states</p>
    <p>R  W  W : transition relation</p>
    <p>F  W : fair states</p>
    <p>: W  Powerset(Prop): Observation function</p>
    <p>Fairness: An assumption of reasonableness  restrict attention to computations that visit F infinitely often, e.g., the channel will be up infinitely often.</p>
  </div>
  <div class="page">
    <p>Specifications</p>
    <p>Behavioral Specifications: properties of computations.</p>
    <p>Examples:</p>
    <p>No two processes can be in the critical section at the same time.  safety</p>
    <p>Every request is eventually granted.  liveness</p>
    <p>Every continuous request is eventually granted.  liveness</p>
    <p>Every repeated request is eventually granted.  liveness</p>
    <p>Desideratum: A formal logic to specify requirements  a temporal logic.</p>
  </div>
  <div class="page">
    <p>Temporal Logic</p>
    <p>Linear Temporal logic (LTL): logic of temporal sequences (Pnueli, 1977)</p>
    <p>Main feature: time is implicit</p>
    <p>next :  holds in the next state.</p>
    <p>eventually :  holds eventually</p>
    <p>always :  holds from now on</p>
    <p>until :  holds until  holds.</p>
    <p>,w |= next  if w  -</p>
    <p>-  - -. . .</p>
    <p>,w |=  until  if w</p>
    <p>-</p>
    <p>-</p>
    <p>-</p>
    <p>-. . .</p>
  </div>
  <div class="page">
    <p>Examples</p>
    <p>always not (CS1 and CS2): mutual exclusion (safety)</p>
    <p>always (Request implies eventually Grant): liveness</p>
    <p>always (Request implies (Request until Grant)): liveness</p>
    <p>always (always eventually Request) implies eventually Grant: liveness</p>
  </div>
  <div class="page">
    <p>Linear vs. Branching Time</p>
    <p>Lamport, 1980: Sometimes is sometimes Not Never</p>
    <p>Linear time: a system induces a set of traces</p>
    <p>Specs: describe traces</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Branching time: a system induces a trace tree</p>
    <p>Specs: describe trace trees</p>
    <p>A B</p>
    <p>AB BB</p>
    <p>ABB BBBBABAABBBA</p>
    <p>BA</p>
    <p>ABABAA</p>
    <p>AA</p>
    <p>AAA</p>
  </div>
  <div class="page">
    <p>Linear vs. Branching Time: Logics</p>
    <p>Linear time: a system generates a set of computations</p>
    <p>Specs: describe computations</p>
    <p>LTL: always (request  eventually grant)</p>
    <p>Branching time: a program generates a computation tree</p>
    <p>Specs: describe computation trees</p>
    <p>CTL: always (request  eventually grant)</p>
  </div>
  <div class="page">
    <p>Linear vs. Branching Time: Long Debate</p>
    <p>Pnueli, 1977: linear time (LTL)</p>
    <p>Lamport, 1980: linear time better than branching time</p>
    <p>Ben-Ari, Pnueli, and Manna, 1981: branching time (UB)</p>
    <p>Emerson and Clarke, 1981: branching time (CTL)</p>
    <p>Pnueli, 1985: linear time</p>
    <p>Emerson and Halpern, 1986: branching time (CTL)</p>
    <p>Emerson and Lei, 1985: branching time (CTL)</p>
    <p>Conclusion: Philosophically and technically  a draw.</p>
  </div>
  <div class="page">
    <p>Linear vs. Branching Time: Prehistory</p>
    <p>A.N. Priors first lecture on tense logic, Wellington University, 1954: linear time.</p>
    <p>Priors Time and modality, 1957: relationship between linear tense logic and modal logic.</p>
    <p>Sep. 1958, letter from Kripke: [I]n an indetermined system, we perhaps should not regard time as a linear series, as you have done. Given the present moment, there are several possibilities for what the next moment may be like  and for each possible next moment, there are several possibilities for the moment after that. Thus the situation takes the form, not of a linear sequence, but of a tree. (Kripke was a high-school student, not quite 18, in Omaha, Nebraska.)</p>
    <p>Kripke became interested in modal logic through reading Priors Modality and Quantification in S5 in 1956. His letter was in response to Priors Time and Modality.</p>
  </div>
  <div class="page">
    <p>Linear vs. Branching Time: Philosophy</p>
    <p>Philosophical Conundrum</p>
    <p>Prior:</p>
    <p>Nature of course of time  branching</p>
    <p>Nature of course of events  linear</p>
    <p>Rescher:</p>
    <p>Nature of time  linear</p>
    <p>Nature of course of events  branching</p>
    <p>We have branching in time, not branching of time.</p>
  </div>
  <div class="page">
    <p>Linear vs. Branching Time: Final Showdown</p>
    <p>V., 2001: a pragmatic examination (motivated by hardware verification)</p>
    <p>Expressiveness</p>
    <p>Computational Complexity</p>
    <p>Compositionality</p>
    <p>Conclusion: Linear time wins for pragmatic reasons!</p>
  </div>
  <div class="page">
    <p>The Pragmatic Argument</p>
    <p>Verification engineers find branching time unintuitive. (IBM: nontrivial CTL equations are hard to understand and prone to error.)</p>
    <p>Branching time was designed for reasoning about closed rather than open systems. Branchingtime modular reasoning is exceedingly hard.</p>
    <p>Combining formal and dynamic validation (i.e., simulation) techniques for branching-time model checking is essentially impractical, as dynamic validation is inherently linear.</p>
    <p>Industry-Standard Languages:  PSL: Essentially linear time  SVA: Linear time</p>
  </div>
  <div class="page">
    <p>Concurrency-Theoretical Critique</p>
    <p>Critique 2001-2: Linear-time semantics is too weak; two processes may be trace equivalent, but one may deadlock in a context where the other one would not!</p>
    <p>Classical Example: The two processes</p>
    <p>if (true  a?x; h!x)2(true  b?x; h!x)fi</p>
    <p>if (a?x  h!x)2(b?x  h!x)fi</p>
    <p>have the same set of communication traces, but only the first one may deadlock when run in parallel with a process such as b!0.</p>
    <p>But: Branching-time semantics distinguishes between the two processes  they are not bisimilar.</p>
    <p>V., 2002: Its time to start learning about concurrency semantics.</p>
  </div>
  <div class="page">
    <p>Concurrency Semantics</p>
    <p>N.&amp;V., 2006: State of art is highly unsatisfying!</p>
    <p>Wide Agreement: Process equivalence is the most fundamental notion in concurrency semantics.</p>
    <p>No Agreement: When are two processes equivalent? Profusion of answers (The next 700 ... Syndrome)!</p>
    <p>van Glabbeek, 1990: It is not the task of process theory to find the true semantics of processes, but rather to determine which process semantics is suitable for which application</p>
  </div>
  <div class="page">
    <p>Semantics: Processes vs. Programs</p>
    <p>Process semantics:</p>
    <p>Wide Agreement: Two processes are equivalent if they pass the same tests  testing equivalence.</p>
    <p>No Agreement: What is a test?</p>
    <p>Program semantics:</p>
    <p>Wide Agreement: Two programs are equivalent if they behave the same in all contexts  contextual equivalence.</p>
    <p>Wide Agreement: Behavior refers to I/O behavior.</p>
    <p>N.&amp;V., 2006: Why does equivalence not mean the same thing in process semantics and program semantics?</p>
    <p>Our Approach: Three fundamental principles.</p>
  </div>
  <div class="page">
    <p>Contextual Equivalence</p>
    <p>Principle of Contextual Equivalence: Two processes are equivalent if they behave the same in all contexts.</p>
    <p>Contexts:</p>
    <p>Question: What is a context?</p>
    <p>Answer: A context is a process with a hole.</p>
    <p>Excluded: Button-pushing experiments [Milner, 1980]</p>
    <p>Why?: Experiments can be too weak or too strong (cf. [De Nicola-Hennessy, 1987])</p>
  </div>
  <div class="page">
    <p>Bisimulation: Pro</p>
    <p>Definition: Processes P1 and P2 are bisimilar if there is behavior-preserving relation between the states of P1 and the states of P2.</p>
    <p>Bisimulation occupies a special place of honor in concurrency theory:</p>
    <p>Stirling, 1998: The joys of bisimulation</p>
    <p>Mathematical elegance (e.g., colagebraic formulation)</p>
    <p>Ubiquity in logic (e.g., modal logic, non-wellfounded set theory)</p>
    <p>Finest process equivalence relation (almost)</p>
  </div>
  <div class="page">
    <p>Bisimulation: Cons</p>
    <p>N.&amp;V.: None of those makes bisimulation a reasonable notion of process equivalence!</p>
    <p>Bisimulation is not a contextual equivalence relation  tests that correspond to bisimulation are too powerful, not realizable as processes.</p>
    <p>Bisimulation is a structural similarity relation, not behavioral; not a reasonable relation to expect in general between implementation and specification.</p>
    <p>Elegance does not guarantee usefulness; the latter requires pragmatic evaluation, e.g., is bisimulation-based minimization cost effective? (Fisler-V., 2002: not in the context of model checking).</p>
  </div>
  <div class="page">
    <p>What Is Process Behavior?</p>
    <p>Principle of Contextual Equivalence: Two processes are equivalent if they behave the same in all contexts.</p>
    <p>Old Problem: Non-observable behavior  communication traces do not model all behavior, e.g., deadlocks and livelocks.</p>
    <p>Hoare, Brookes, Roscoe, 1984: enrich the theory  failure semantics, failure-divergence semantics, etc.</p>
    <p>N.&amp;V., 2006: In digital circuits, all relevant behavior is observable, including deadlock and livelock!</p>
    <p>Principle of Comprehensive Modeling: Process description should model all relevant aspects of process behavior.</p>
    <p>Why: Relevant behavior should be captured by the description of the process, not by theoreticians!</p>
  </div>
  <div class="page">
    <p>Receptiveness</p>
    <p>Example: if (true  a?x; h!x)2(true  b?x; h!x)fi</p>
    <p>Problem: Process is not receptive to communication on channel b, when it is in the left branch</p>
    <p>Popular requirement: Processes need to be receptive [Dill, 1989, Lynch-Tuttle, 1989, AbadiLamport 1993].</p>
    <p>Problem: CSP/CCS formalisms are under-specified; do not tell us what happens when receptiveness fail (so are also state-transition systems)!</p>
  </div>
  <div class="page">
    <p>Digression: Nonmonotonic Logic</p>
    <p>Basic Idea: Draw conclusions from absence of premises. [Clarke, 1978, McCarthy, 1980].</p>
    <p>Example: If Tweety is a bird, and I dont know that Tweety is a penguin, then I can infer that Tweety can fly.</p>
    <p>Today: 700 nomonotonic logics!  circumscription, default reasoning, negation by failure, stable-model semantics, well-founded semantics, . . .</p>
    <p>Why?: No universally accepted way to draw conclusions from absence of premises  numerous interpretations!</p>
  </div>
  <div class="page">
    <p>Comprehensiveness and Abstraction</p>
    <p>Question: Is there a contradiction between comprehensiveness and abstraction? Does the Comprehensive-Modeling Principle push us to very low-level detailed models?</p>
    <p>Answer: The principle required relevant details to be modeled; relevance is determined by abstraction level.</p>
    <p>Digital circuits: analog aspects irrelevant.</p>
    <p>Metastable circuit states: analog aspects relevant.</p>
    <p>Example: Should normal termination be distinguished from deadlocked termination? It depends on the abstraction!</p>
    <p>Reasoning about termination: deadlocks irrelevant.</p>
    <p>Reasoning about deadlocks: deadlocks relevant</p>
    <p>Who decides? N.&amp;V.: The modeler, not the theoretician!</p>
  </div>
  <div class="page">
    <p>What is Process Behavior</p>
    <p>Principle of Contextual Equivalence: Two processes are equivalent if they behave the same in all contexts.</p>
    <p>Question: What does behave mean?</p>
    <p>Answer: It means that the same behavior is being observed.</p>
    <p>Principle of Observable I/O: The observable behavior of a process is precisely its input/output behavior.</p>
    <p>Conclusion: The observable result of a test is an I/O trace.</p>
    <p>Nondeterminism: The observable result of a test is a set of I/O traces.</p>
    <p>Unifies may and must testing.</p>
  </div>
  <div class="page">
    <p>An Opposing View</p>
    <p>van Glabbeek, 2001:</p>
    <p>In practice, however, there appears to be doubt and difference of opinion concerning the observable behaviour of systems. Moreover, what is observable may depend on the nature of the systems on which the concept will be applied and the context in which they will be operating.</p>
    <p>Our perspective:</p>
    <p>Consider all possible contexts.</p>
    <p>A context can decide what behaviors to observe.</p>
    <p>The modeler decide what behaviors are observable.</p>
    <p>Crux: doubt and difference of opinion is the result of formalism under-specificity!</p>
  </div>
  <div class="page">
    <p>Properties and Observability</p>
    <p>Principle of Observable properties: Behavioral properties ought to be observable.</p>
    <p>Definition: A property  is observable if whenever P1 |=  and P2 6|= , then there is a context C such that C[P1] and C[P2] have different sets of I/O traces.</p>
    <p>Lemma: the CTL property</p>
    <p>always  eventually p</p>
    <p>is not observable.</p>
    <p>Conclusion: The CTL property  always  eventually p is a structural, rather than behavioral property.</p>
  </div>
  <div class="page">
    <p>Case Study: Back to Transducers</p>
    <p>Moore, 1956, Milner, 1975:</p>
    <p>Transducer: M = (Q,q0,I,O,,,)  Q: states  q0  Q: start state  I: input channels  O: output channels   : I  O  2: alphabet assignment   : Q  O  : output function   : Q  (i1)  . . .(in)  2</p>
    <p>Q: transition function.</p>
    <p>Notes:</p>
    <p>States are always observable (via output function) and receptive.</p>
    <p>Inputs at time k take effect at time k+1 (no causal loops).</p>
    <p>Deadlocks needs to be modeled explicitly, e.g., output = nothing</p>
    <p>Nondeterminism.</p>
  </div>
  <div class="page">
    <p>Parallel Composition</p>
    <p>Connection: For a set M of transducers, a connection C consists of a set of pairs (iA,oB) of compatible input/output channels.</p>
    <p>Synchronous Parallel Composition: CM runs all transducers in M in parallel, binding input to output channels per C.</p>
    <p>Composition Theorem: Given a set M of transducers, a connection C and a single transducer A in M, we can express CM as a binary composition of A with a single transducer.</p>
    <p>In words: A context with a hole is equivalent to a single transducer  testing process.</p>
  </div>
  <div class="page">
    <p>Transducer Equivalence</p>
    <p>Trace: infinite sequence of input/output pairs, corresponding to an execution.</p>
    <p>Trace equivalence A T B: A and B have the same set of traces.</p>
    <p>Contextual Equivalence A C B: for all transducers M, we have that AM T BM.</p>
    <p>Note:</p>
    <p>Observe whole trace; no test success.</p>
    <p>Observe all possible traces; no may or must.</p>
    <p>Theorem: Trace equivalence and contextual equivalence coincide (adequacy and full abstraction).</p>
    <p>Conclusion: A very robust notion of equivalence (hinted at in Vaandrager, 1991).</p>
  </div>
  <div class="page">
    <p>What Is a Trace</p>
    <p>But: van Glabbeek is partly right; there is no agreement on what is a trace!</p>
    <p>Finite traces</p>
    <p>Infinite traces</p>
    <p>fair traces</p>
    <p>. . .</p>
    <p>Compositional Traces:</p>
    <p>Define a binary composition operation  on sets of traces.</p>
    <p>Require that traces(M1)traces(M2)  traces(M1M2)</p>
    <p>Theorem: Adequacy and full abstraction apply to all compositional notion of traces.</p>
    <p>Robust result: Linear-time semantics provide the right notion of process equivalence.</p>
  </div>
  <div class="page">
    <p>What Is Linear-Time Logic?</p>
    <p>Given: Property , Observables O, alphabet  = 2O.</p>
    <p>Standard Approach:</p>
    <p>models()   (set of traces).</p>
    <p>M |=  if traces(M)  models() (trace containment).</p>
    <p>New Approach:</p>
    <p>model()  2</p>
    <p>(family of sets of traces).</p>
    <p>M |=  if traces(M)  models() (trace-set membership)</p>
    <p>Reason for Change: Promptness cannot be captured by trace containment!  promptly p  p will occur within a bounded amount of time.  eventually p does not guarantee boundness.</p>
  </div>
  <div class="page">
    <p>Summary: Three Principles</p>
  </div>
  <div class="page">
    <p>Response to Criticism</p>
    <p>Possible criticism: Principle of Comprehensive Modeling forces a very low-level view of systems [Vaandrager, 1991, wrt I/O automata].</p>
    <p>Response 1: You cannot focus solely on the high-level view if the low-level details are relevant. Make up your mind on what is relevant!</p>
    <p>Response 2: To avoid clutter, have highlevel language features, as well as low-level language features:  Let user chose whether deadlock is observable or not.</p>
    <p>Response 3: Accept that high-level model is not fully specified, let theoreticians determine observables, and allow (700) different interpretations.</p>
  </div>
  <div class="page">
    <p>What is New Here?</p>
    <p>Well known that bisimulation is not testable!</p>
    <p>But bisimulation is still widely acceptable as a reasonable notion of process equivalence (e.g., van Glabbeek, 2001).</p>
    <p>Decorated trace equivalence - enrich traces with observables.</p>
    <p>We do not add observables to traces; process description includes all relevant observables.</p>
    <p>Brookes, 2002: We do not augment traces with extraneous book-keeping information, or impose complex closure conditions. Instead we incorporate the crucial information about blocking directly in the internal structure of traces.</p>
    <p>We agree. Our principles elaborate on Brookes approach.</p>
  </div>
  <div class="page">
    <p>In Conclusion</p>
    <p>Provocative Thesis: Concurrency theory went off the charted path, into the wild forest.</p>
    <p>Obvious definition of contextual equivalence abandoned.</p>
    <p>Under-specificity of formalisms led to numerous interpretations.</p>
    <p>Next:</p>
    <p>Re-examine more complex settings, e.g., probabilistic behavior.</p>
    <p>Let the debate over the principles of process equivalence begin.</p>
  </div>
  <div class="page">
    <p>Postscript: Branching Time In Verification</p>
    <p>Agreed: Linear-time verification can be hard!</p>
    <p>Trace containment of finite transition systems is PSPACE-complete.</p>
    <p>Reasonable Approaches:</p>
    <p>Use branching-time relations as an approximation, e.g., simulation under-approximates trace containment [Kesten-Piterman-Pnueli, 2003].</p>
    <p>Use structural relations to prove trace containment [Abadi-Lamport,1991].</p>
    <p>Furthermore: Sometime implementation is obtained from specification via a structural refinement, e.g., pipelined vs. non-pipelined architectures.</p>
    <p>Flushing simulation - flushed pipelined states correspond to non-pipelined states [Burch-Dill, 1994].</p>
    <p>Symbolic simulation [Jones, 1999]</p>
    <p>Well-founded equivalence bisimulation [Manolios, 2000].</p>
  </div>
  <div class="page">
    <p>Branching-Time Logic</p>
    <p>Wrong Corollary: Branching-time logics are needed to specify systems.</p>
    <p>Structural relations used here to prove trace containment. Branching time in the service of linear time!</p>
  </div>
</Presentation>
