<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DADI Block-Level Image Service for Agile and Elastic Application Deployment</p>
    <p>Huiba Li, Yifan Yuan, Rui Du, Kai Ma, Lanzheng Liu and Windsor Hsu Alibaba Group</p>
  </div>
  <div class="page">
    <p>The Problem  Container deployment (cold startup) is slow</p>
    <p>Long-tail latency reaches 10s of minutes  The essential reasons are image downloading and unpacking</p>
    <p>Only 6.4% [Slacker] of the image is used for startup  A regression to a decade ago, when VM images were also downloaded to hosts</p>
    <p>P2P downloading [Dragonfly, Kraken, Borg, Tupperware, FID] is not enough  Deals with only half the reason  Little effect for small clusters</p>
    <p>Slimming the images [DockerSlim, Cntr] is not universal  Hard to automatically find all dependencies for all applications  Hard to support ad-hoc operations</p>
  </div>
  <div class="page">
    <p>Remote Image  is the trend</p>
    <p>[CRFS, Teleport, CernVM-FS, Slacker, Wharf, CFS, Cider]  Optionally with P2P transfer for large clusters</p>
    <p>Container image (tarball) is, however, NOT viable for remote image  Designed for unpacking, not seekable  Hard to support advanced features, such as xattr, cross-layer reference, etc.  Wed better to design a new one</p>
    <p>Type of image  File-system-based image?  Block-device-based image?</p>
  </div>
  <div class="page">
    <p>Type of Image: Block! Features Existing Sys Complexity Universality Security Overall</p>
    <p>BlockDeviceBased</p>
    <p>Work together with a regular file system, such as ext4</p>
    <p>Viable for container, secure container and virtual machine</p>
    <p>Cider (based on Ceph;</p>
    <p>no layering format.)</p>
    <p>Low</p>
    <p>stability optimization</p>
    <p>advanced features</p>
    <p>App can choose a best-match file system, e.g. NTFS, and pack it into the image as a dependence.</p>
    <p>small attack surface</p>
    <p>need the courage to walk alone</p>
    <p>(almost)</p>
    <p>TODO: layering</p>
    <p>FileSystemBased</p>
    <p>Provides a file-system interface directly</p>
    <p>Natural extension of container image</p>
    <p>Less mental friction (due to inertia and following the crowd)</p>
    <p>CRFS, Teleport, CernVM-FS,</p>
    <p>Slacker, Wharf, CFS</p>
    <p>High</p>
    <p>stability optimization</p>
    <p>advanced features</p>
    <p>Fixed features; may not match all</p>
    <p>applications.</p>
    <p>(e.g. a Windows container on a</p>
    <p>Linux host)</p>
    <p>large attack surface</p>
    <p>Technical advantage is insignificant.</p>
  </div>
  <div class="page">
    <p>Background: Layered Image of Container</p>
    <p>docker registry</p>
    <p>download</p>
    <p>untar</p>
  </div>
  <div class="page">
    <p>Background: Layered Image of Container</p>
    <p>Each layer is a change set compared to the previous state (files added, modified, deleted)</p>
    <p>(read-only, shared)</p>
    <p>docker registry</p>
    <p>download</p>
    <p>untar</p>
  </div>
  <div class="page">
    <p>Background: Layered Image of Container</p>
    <p>Each layer is a change set compared to the previous state (files added, modified, deleted)</p>
    <p>(read-only, shared)</p>
    <p>Container layer is a change set compared to the image</p>
    <p>(files added, modified, deleted) (read-write, private)docker</p>
    <p>registry</p>
    <p>download</p>
    <p>untar</p>
  </div>
  <div class="page">
    <p>Background: Layered Image of Container</p>
    <p>Each layer is a change set compared to the previous state (files added, modified, deleted)</p>
    <p>(read-only, shared)</p>
    <p>Container layer is a change set compared to the image</p>
    <p>(files added, modified, deleted) (read-write, private)</p>
    <p>Usually the layers are stored in separate directories, and a merged view is created with a kernel module overlayfs.</p>
    <p>docker registry</p>
    <p>download</p>
    <p>untar</p>
  </div>
  <div class="page">
    <p>Background: I/O Path</p>
    <p>App Processes</p>
    <p>directories</p>
    <p>container</p>
    <p>user space</p>
    <p>kernel space</p>
    <p>overlayfs directories layers (directories)</p>
    <p>Docker Registry</p>
    <p>download, ungzip &amp; untar</p>
  </div>
  <div class="page">
    <p>DADI Remote Image  A layered image format</p>
    <p>based on virtual block device  work together with a regular file system, e.g. ext4  a general solution for container ecology</p>
    <p>Compression  and seekable decompression (online)</p>
    <p>Scalability  peer-to-peer (P2P) transfer</p>
  </div>
  <div class="page">
    <p>DADI Remote Image  A layered image format</p>
    <p>based on virtual block device  work together with a regular file system, e.g. ext4  a general solution for container ecology</p>
    <p>Compression  and seekable decompression (online)</p>
    <p>Scalability  peer-to-peer (P2P) transfer</p>
    <p>Overlay Block Device</p>
  </div>
  <div class="page">
    <p>DADI Remote Image  A layered image format</p>
    <p>based on virtual block device  work together with a regular file system, e.g. ext4  a general solution for container ecology</p>
    <p>Compression  and seekable decompression (online)</p>
    <p>Scalability  peer-to-peer (P2P) transfer</p>
    <p>ZFile</p>
    <p>Overlay Block Device</p>
  </div>
  <div class="page">
    <p>DADI Remote Image  A layered image format</p>
    <p>based on virtual block device  work together with a regular file system, e.g. ext4  a general solution for container ecology</p>
    <p>Compression  and seekable decompression (online)</p>
    <p>Scalability  peer-to-peer (P2P) transfer</p>
    <p>ZFile</p>
    <p>P2P on-demand read in a tree-structured topology</p>
    <p>Overlay Block Device</p>
  </div>
  <div class="page">
    <p>DADI I/O Path</p>
    <p>App Processes</p>
    <p>regular file system (ext4, etc.) virtual block device</p>
    <p>OverlayBD</p>
    <p>file system (ext4, etc.)</p>
    <p>container</p>
    <p>P2P RPC</p>
    <p>for downloaded layers</p>
    <p>user space</p>
    <p>kernel space</p>
    <p>for new layers</p>
    <p>ZFile</p>
    <p>lsmd daemon</p>
    <p>ZFile ZFile (layer blobs)</p>
  </div>
  <div class="page">
    <p>pread offset length Segment</p>
    <p>raw data to readraw data</p>
    <p>raw data to read</p>
    <p>hole hole</p>
    <p>raw data to read</p>
    <p>Overlay Block Device</p>
    <p>Each layer is a change set of overwritten blocks  no concept of file or file system  512 bytes block size (granularity)</p>
    <p>An index for fast reading  variable-length entries to</p>
    <p>save memory by combining  non-overlapping entries</p>
    <p>sorted by logical offsets  range query by binary search</p>
  </div>
  <div class="page">
    <p>Index Merge</p>
    <p>+</p>
    <p>=&gt;</p>
    <p>offset length</p>
    <p>Segment</p>
    <p># of</p>
    <p>S eg</p>
    <p>m en</p>
    <p>ts in</p>
    <p>M er</p>
    <p>ge d</p>
    <p>In de</p>
    <p>x</p>
    <p>Layers Depth 0 5 10 15 20 25 30 35 40 45</p>
    <p>Merged Index Size of Productional Images</p>
  </div>
  <div class="page">
    <p>Index Performance Q</p>
    <p>ue rie</p>
    <p>s / S</p>
    <p>ec on</p>
    <p>d</p>
    <p>Size of Index (# of Segments) 1K 2K 3K 4K 5K 6K 7K 8K 9K 10K</p>
    <p>IO PS</p>
    <p>(b s=</p>
    <p>, n on</p>
    <p>-c ac</p>
    <p>he d)</p>
    <p>I/O Queue Depth 1 2 4 8 16 32 64 128 256</p>
    <p>Thin LVM DADI w/o comp DADI - ZFile</p>
    <p>&gt; 6M QPS for productional images</p>
  </div>
  <div class="page">
    <p>Writable Layer  Log-structured design</p>
    <p>appending index and raw data to separate logs  Maintaining an in-memory index</p>
    <p>red-black-tree  Commit only useful data blocks (in offset order)</p>
    <p>combine index entries</p>
    <p>Data (R/W)</p>
    <p>Index (R/W) Header Index TrailerRaw Data</p>
    <p>Layer (RO)Header Raw Data</p>
    <p>IndexHeader append</p>
    <p>append</p>
    <p>commit</p>
  </div>
  <div class="page">
    <p>Header Index TrailerCompressed Chunks[Dict]</p>
    <p>Header Index TrailerRaw Data</p>
    <p>ZFile</p>
    <p>Underlay file (DADI layer blob)</p>
    <p>ZFile</p>
    <p>A seekable compression format  random reading, and online decompression</p>
    <p>Compressed by fixed-sized chunks  Decompressed only needed chunks  Not tied to DADI</p>
  </div>
  <div class="page">
    <p>On-Demand P2P Transfer  In a tree-structured topology</p>
    <p>Each P2P node caches recently used data blocks.  A request is likely to hit parents cache,  or the parent will forward the request upward, recursively.</p>
    <p>Registry</p>
    <p>DADI-Root</p>
    <p>DADI-Agent DADI-Agent</p>
    <p>DADI-Agent</p>
    <p>DADI-Agent</p>
    <p>DADI-Agent DADI-Agent</p>
    <p>DADI-Root</p>
    <p>DADI-Agent DADI-Agent</p>
    <p>DADI-Agent</p>
    <p>DADI-Agent DADI-Agent</p>
    <p>DADI-Agent DADI-Agent</p>
    <p>DADI-Agent</p>
    <p>HTTP(S) request DADI request</p>
    <p>Datacenter 1 Datacenter 2</p>
    <p>DADI-Agent</p>
  </div>
  <div class="page">
    <p>Evaluations</p>
  </div>
  <div class="page">
    <p>Startup Latency with DADI C</p>
    <p>ol d</p>
    <p>S ta</p>
    <p>rt L</p>
    <p>at en</p>
    <p>cy (s</p>
    <p>)</p>
    <p>.tgz + overlay2</p>
    <p>CRFS pseudo Slacker</p>
    <p>DADI from Registry</p>
    <p>DADI from P2P Root</p>
    <p>Image Pull App Launch</p>
    <p>W ar</p>
    <p>m S</p>
    <p>ta rt</p>
    <p>up L</p>
    <p>at en</p>
    <p>cy (s</p>
    <p>)</p>
    <p>overlay2 Thin LVM (device mapper)</p>
    <p>DADI</p>
    <p>NVMe SSD Cloud Disk</p>
  </div>
  <div class="page">
    <p>Startup Latency with DADI</p>
    <p>S ta</p>
    <p>rt up</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(s )</p>
    <p>Warm Cache</p>
    <p>Cold Cache</p>
    <p>app launch with prefetch app launch</p>
    <p>C ol</p>
    <p>d S</p>
    <p>ta rt</p>
    <p>up L</p>
    <p>at en</p>
    <p>cy (s</p>
    <p>)</p>
    <p># of Hosts (and Containers) 0 10 20 30 40</p>
    <p>pseudo-Slacker DADI</p>
  </div>
  <div class="page">
    <p>Scalability with DADI #</p>
    <p>of C</p>
    <p>on ta</p>
    <p>in er</p>
    <p>In st</p>
    <p>an ce</p>
    <p>s S</p>
    <p>ta rt</p>
    <p>ed</p>
    <p>Time (s) 0 1 2 3 4</p>
    <p>Cold Startup 1 Cold Startup 2 Cold Startup 3 Warm Startup</p>
    <p>Es tim</p>
    <p>at ed</p>
    <p>S ta</p>
    <p>rt up</p>
    <p>L at</p>
    <p>en ci</p>
    <p>es (s</p>
    <p>)</p>
    <p># of Containers 10K 20K 30K 40K 50K 60K 70K 80K 90K 100K</p>
    <p>Large-Scale Startup of Agilityon 1,000 hosts Projected Hyper-Scale Startup of Agility (by evaluating a single branch of the P2P tree)</p>
    <p>(Agility is a small application specifically written in Python to assist the test)</p>
  </div>
  <div class="page">
    <p>I/O Performance Ti</p>
    <p>m e</p>
    <p>to d</p>
    <p>u A</p>
    <p>ll Fi</p>
    <p>le s</p>
    <p>(s )</p>
    <p>overlay2 Thin LVM DADI</p>
    <p>NVMe SSD Cloud Disk</p>
    <p>Ti m</p>
    <p>e to</p>
    <p>ta r A</p>
    <p>ll Fi</p>
    <p>le s</p>
    <p>(s )</p>
    <p>overlay2 Thin LVM DADI</p>
    <p>NVMe SSD Cloud Disk</p>
    <p>Image Scanning with du Image Scanning with tar</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
