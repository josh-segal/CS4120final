<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Application-Defined Decentralized Access Control</p>
    <p>Yuanzhong Xu, Alan Dunn, Owen Hofmann*, Michael Lee, Syed Akbar Mehdi, Emmett Witchel</p>
    <p>! UT-Austin, Google*</p>
  </div>
  <div class="page">
    <p>Access control mechanism</p>
    <p>Simplicity  Flexibility</p>
    <p>Easy to understand</p>
    <p>Less prone to bugs</p>
    <p>Expressive</p>
    <p>Support many use cases</p>
  </div>
  <div class="page">
    <p>UNIX/Linux - simplicity</p>
    <p>Simplicity</p>
    <p>Easy to understand</p>
    <p>Less prone to bugs</p>
    <p>Linux/UNIX</p>
    <p>User: UID</p>
    <p>Group: GID</p>
    <p>Admin: root user</p>
  </div>
  <div class="page">
    <p>UNIX/Linux - more flexibility</p>
    <p>Simplicity</p>
    <p>Easy to understand</p>
    <p>Less prone to bugs</p>
    <p>Linux/UNIX</p>
    <p>User: UID</p>
    <p>Group: GID</p>
    <p>Admin: root user</p>
    <p>setuid binary</p>
    <p>effective UID</p>
    <p>FS UID</p>
    <p>sticky bit</p>
    <p>Need more flexibility</p>
  </div>
  <div class="page">
    <p>setuid binaries make things tricky</p>
    <p>suEXEC of Apache server: using setuid binaries to run CGI/SSI with different UIDs</p>
    <p>If you aren't familiar with managing setuid root programs and the security issues they present, we highly recommend that you not consider using suEXEC.</p>
    <p>http://httpd.apache.org/docs/2.2/suexec.html</p>
    <p>setuid binary</p>
    <p>effective UID</p>
    <p>FS UID</p>
    <p>sticky bit</p>
    <p>Need more flexibility</p>
  </div>
  <div class="page">
    <p>Server application</p>
    <p>Access control in server applications  A server application typically uses its own, hand</p>
    <p>crafted program logic to enforce access control</p>
    <p>OS</p>
    <p>A ccess control</p>
    <p>Access control is hard to get right ! Source of bugs: among OWASP top 10 application security risks ! https://www.owasp.org/index.php/Top_10_2010-Main</p>
    <p>Why OS access control CANNOT help?</p>
  </div>
  <div class="page">
    <p>Consequences  different servers/apps CANNOT</p>
    <p>manage principals separately  requires mapping between</p>
    <p>server users and OS UIDs</p>
    <p>Inflexible OS-level access control  Numerical identifiers for</p>
    <p>principals in a flat namespace</p>
    <p>32-bit integer UID, GID (Linux)</p>
    <p>centralized management of principals</p>
    <p>root/administrator privilege required to manage users/ groups</p>
    <p>/etc/passwd, /etc/group</p>
    <p>regular user CANNOT define an ad hoc group (like a circle in Google+)</p>
    <p>creating a server user requires modifying system-wide sensitive files</p>
  </div>
  <div class="page">
    <p>OS mechanism: inflexible, but robust</p>
    <p>Used beyond basic access control of OS users</p>
    <p>Privilege separation in SSHD - different components have different UIDs</p>
    <p>Android - each application has a unique UID</p>
    <p>Mac OS X Seatbelt application sandbox</p>
  </div>
  <div class="page">
    <p>Privilege separation</p>
    <p>Application sandbox</p>
    <p>Access control in server applications</p>
    <p>Flexible group sharing</p>
    <p>A unified OS-level mechanism to support all those scenarios?</p>
    <p>- a balance between Simplicity and Flexibility</p>
    <p>User/Application-defined access control</p>
  </div>
  <div class="page">
    <p>DCAC  DeCentralized Access Control</p>
    <p>Conceptually similar to traditional UNIX discretionary access control (DAC)</p>
    <p>But generalized, more flexible</p>
    <p>A unified model: familiar, intuitive - can naturally represent users/groups</p>
    <p>Coexists with DAC</p>
  </div>
  <div class="page">
    <p>DCAC mechanisms summary</p>
    <p>Augment! privilege/access</p>
    <p>Restrict! privilege/access</p>
    <p>DCAC basic attribute-based</p>
    <p>model</p>
    <p>Add child attribute Drop attribute</p>
    <p>Attribute gateway</p>
    <p>Mechanisms for coexisting with DAC</p>
    <p>Grant access when EITHER DCAC OR</p>
    <p>DAC passes pmask, UID-bit</p>
  </div>
  <div class="page">
    <p>DCAC Attributes - principal identifiers</p>
    <p>Attributes  hierarchically named strings - components separated by .</p>
    <p>is the parent attribute of A parent attribute represents a superset of privileges of its child attributes</p>
    <p>.u.alice</p>
    <p>.u.alice</p>
    <p>.u .g</p>
    <p>.u.bob .g.student</p>
    <p>.u.alice.photo</p>
    <p>.u.alice.photo</p>
  </div>
  <div class="page">
    <p>DCAC Attributes - principal identifiers</p>
    <p>Attribute is a generic abstraction  can represent different types of principals</p>
    <p>OS users/groups  Server users/groups  Applications  Application components</p>
    <p>Naming conventions for OS users and groups:  user .u.&lt;username&gt;  group .g.&lt;groupname&gt;</p>
  </div>
  <div class="page">
    <p>DCAC processes vs Linux processes</p>
    <p>DCAC Process</p>
    <p>.u.alice</p>
    <p>.u.alice.photos</p>
    <p>.g.students</p>
    <p>Attribute set</p>
    <p>Linux Process</p>
    <p>UID: 1000</p>
    <p>GIDs: 4, 20,</p>
    <p>Inherite d</p>
    <p>across fork() and</p>
    <p>Inherited across fork() and exec()</p>
  </div>
  <div class="page">
    <p>DCAC objects vs Linux objects</p>
    <p>Linux File/IPC object</p>
    <p>permission bits</p>
    <p>DCAC File/IPC object</p>
    <p>ACL: 4 access modes</p>
    <p>read = .g.students V .u.alice.photos</p>
    <p>write = .u.alice.photos</p>
    <p>execute =</p>
    <p>modify = .u.alice</p>
    <p>GID: 100 (group: student)</p>
    <p>-rwxr-xr-x</p>
    <p>UID: 1000 (owner: alice)</p>
    <p>Each access mode is a formula</p>
    <p>of attributes in disjunctive normal form (DNF), w/o</p>
    <p>negations</p>
  </div>
  <div class="page">
    <p>DCAC ACL access modes</p>
    <p>DCAC traditional DAC (discretionary</p>
    <p>access control)</p>
    <p>permission to read/ write/execute</p>
    <p>read, write, execute access modes</p>
    <p>rwx permission bits -rwxr-xr-x</p>
    <p>Admin privilege  change access modify access mode UID (owner)</p>
    <p>A matching process can change ACL of the file</p>
    <p>A process with the same UID can chmod</p>
  </div>
  <div class="page">
    <p>Any process can change its attribute set</p>
    <p>Deprivilege a process without root:</p>
    <p>A process can add a child attribute of any existing attribute in its attribute set</p>
    <p>A process can always drop any attribute</p>
    <p>Decentralized in privilege,compared to Linux: setuid() syscall restricted to root</p>
    <p>.u.alice</p>
    <p>.u.alice</p>
    <p>.u.alice.photo</p>
    <p>add child</p>
    <p>drop parent</p>
    <p>.u.alice.photo</p>
  </div>
  <div class="page">
    <p>Example: sandbox a PDF viewer</p>
    <p>Alices shell process</p>
    <p>.u.alice</p>
    <p>.u.alice fork</p>
    <p>fork</p>
    <p>.u.alice.pdf</p>
    <p>add drop exec</p>
    <p>pdf viewer</p>
    <p>read = .u.alice.pdf</p>
  </div>
  <div class="page">
    <p>Example: support server-defined users</p>
    <p>dispatcher process</p>
    <p>.apps.server</p>
    <p>fork</p>
    <p>worker process for Bob</p>
    <p>worker process for Alice</p>
    <p>.apps.server</p>
    <p>.apps.server</p>
    <p>process request for Bob</p>
    <p>process request for Alice</p>
    <p>.apps.server.u.bob</p>
    <p>.apps.server.u.alice</p>
    <p>BobAlice</p>
  </div>
  <div class="page">
    <p>Augmenting a process privilege</p>
    <p>setuid binaries: !  e.g. sudo !</p>
    <p>sudo allows a users process to become root, if the user is in group admin</p>
    <p>DCAC:Linux:</p>
    <p>Attribute gateways: !  e.g., represent an ad</p>
    <p>hoc group: !</p>
    <p>the gateway allows a group members process to add the group attribute</p>
  </div>
  <div class="page">
    <p>Ad hoc group</p>
    <p>Ad hoc group:  created/managed by</p>
    <p>regular users  Who are members of</p>
    <p>the group?  Who are admins of</p>
    <p>the group?</p>
    <p>Group: reading-group defined by Alice</p>
    <p>members</p>
    <p>admins</p>
  </div>
  <div class="page">
    <p>Ad hoc group as gateway</p>
    <p>Group: reading-group defined by Alice</p>
    <p>members</p>
    <p>admins</p>
    <p>Gateway  ACL for attribute</p>
    <p>.u.alice.reading-group ACL</p>
    <p>read = .u.chris V .u.david</p>
    <p>modify = .u.alice V .u.bob</p>
    <p>gateway: a special file</p>
  </div>
  <div class="page">
    <p>Ad hoc group as gateway</p>
    <p>Group: reading-group defined by Alice</p>
    <p>members</p>
    <p>admins</p>
    <p>Gateway  ACL for attribute</p>
    <p>.u.alice.reading-group ACL</p>
    <p>read = .u.chris V .u.david</p>
    <p>modify = .u.alice V .u.bob</p>
    <p>child attribute of .u.alice:</p>
    <p>under control of Alice</p>
    <p>gateway: a special file</p>
  </div>
  <div class="page">
    <p>Ad hoc group as gateway</p>
    <p>Group: reading-group defined by Alice</p>
    <p>members</p>
    <p>admins</p>
    <p>Gateway  ACL for attribute</p>
    <p>.u.alice.reading-group ACL</p>
    <p>read = .u.chris V .u.david</p>
    <p>modify = .u.alice V .u.bob</p>
    <p>Regular members as the read</p>
    <p>access mode</p>
    <p>gateway: a special file</p>
  </div>
  <div class="page">
    <p>Ad hoc group as gateway</p>
    <p>Group: reading-group defined by Alice</p>
    <p>members</p>
    <p>admins</p>
    <p>Gateway  ACL for attribute</p>
    <p>.u.alice.reading-group ACL</p>
    <p>read = .u.chris V .u.david</p>
    <p>modify = .u.alice V .u.bob</p>
    <p>Admins as the modify access mode:</p>
    <p>! Admin Privilege</p>
    <p>can modify this gateway, or create new gateways</p>
    <p>for .u.alice.reading-group</p>
    <p>gateway: a special file</p>
  </div>
  <div class="page">
    <p>Ad hoc groups in a server application</p>
    <p>dispatcher process</p>
    <p>.apps.server fork</p>
    <p>worker process for Bob</p>
    <p>worker process for Alice</p>
    <p>.apps.server.u.bob</p>
    <p>.apps.server.u.alice</p>
    <p>.apps.server.u.bob. friends</p>
    <p>gateway .apps.server.u .bob.friends</p>
    <p>read=</p>
  </div>
  <div class="page">
    <p>Decentralized attribute gateways</p>
    <p>DCAC doesnt enforce the location of gateways</p>
    <p>Specific OS distributions/applications should develop conventions</p>
  </div>
  <div class="page">
    <p>Decentralized attribute gateways</p>
    <p>Different applications manage their own gateways separately</p>
    <p>Application 1 Application 2 Application 3</p>
    <p>gateways gateways gateways</p>
  </div>
  <div class="page">
    <p>Coexisting with DAC in Linux DCAC Process</p>
    <p>.u.alice</p>
    <p>.u.alice.photos</p>
    <p>.g.students</p>
    <p>Attribute set</p>
    <p>Linux Process in DAC</p>
    <p>GIDs: 4, 20,</p>
    <p>UID: 1000 (alice)</p>
    <p>DAC: traditional discretionary access control</p>
  </div>
  <div class="page">
    <p>Coexisting with DAC in Linux DCAC Process</p>
    <p>.u.alice</p>
    <p>.u.alice.photos</p>
    <p>.g.students</p>
    <p>Attribute set</p>
    <p>GIDs: 4, 20,</p>
    <p>Grant access when either DCAC or DAC</p>
    <p>passes !</p>
    <p>A valid Linux disk image is a valid DCAC disk image (enables incremental deployment)</p>
    <p>More permissive than DAC only</p>
    <p>UID: 1000 (alice)</p>
    <p>DAC: traditional discretionary access control</p>
    <p>isolate processes with the same UID</p>
    <p>How to restrict DAC?</p>
  </div>
  <div class="page">
    <p>How to restrict DAC?</p>
    <p>DCAC Process</p>
    <p>.u.alice</p>
    <p>.u.alice.photos</p>
    <p>.g.students</p>
    <p>Attribute set</p>
    <p>pmask = 0555</p>
    <p>pmask</p>
    <p>GIDs: 4, 20,  UID: 1000 (alice)</p>
    <p>permission bits ANDed with pmask</p>
    <p>e.g. pmask=0555: DAC cant grant write permission</p>
    <p>DAC: traditional discretionary access control</p>
    <p>A process can ONLY clear bits in pmask and UID-bit  to deprivilege itself</p>
    <p>UID-bit = 0</p>
    <p>UID-bit If UID-bit=0: - give up the UID-based ambient authority e.g. DAC cant allow chmod</p>
  </div>
  <div class="page">
    <p>Bootstrap DCAC</p>
    <p>Attributes can only be added based on the current attribute set</p>
    <p>Who sets up the initial attribute?</p>
    <p>Allow a root process to add any attribute</p>
    <p>Modify login/sshd/lightDM to set up attribute set of a users process with: - .u.&lt;username&gt;, with admin privilege - .g.&lt;groupname&gt;, without admin privilege</p>
  </div>
  <div class="page">
    <p>Represent ACLs on objects</p>
    <p>ACLs for persistent files are stored in extended attributes (xattr)</p>
    <p>ACLs are also cached in memory</p>
    <p>support in-memory files, IPC objects</p>
    <p>improve performance</p>
    <p>can be invalidated by NFS according to time stamps, or hashes</p>
  </div>
  <div class="page">
    <p>Applications A single model that supports these scenarios:  A wrapper program that sets up a sandbox, for unmodified</p>
    <p>applications.</p>
    <p>DokuWiki [246 lines code change] - use DCAC to enforce access control - support ad hoc groups</p>
    <p>NFS [326 lines code change] - DCAC can operate on multiple machines - No centralized attribute server</p>
    <p>SSHD [81 lines code change] - Allow a regular OS user to define his/her sub-users, who can log in with a subset of the OS users privilege.</p>
  </div>
  <div class="page">
    <p>Performance  File system micro-benchmarks (Reimplemented Andrew</p>
    <p>Benchmarks, small file):</p>
    <p>DCAC only adds overhead on open, create, delete, etc.</p>
    <p>ext4: 32B ACL: under4% slowdown - in-inode xattr 256B ACL: under 9% slowdown - extra disk block for xattr</p>
    <p>NFSv3: under 5% slowdown ACL size has small impact on performance Extra round-trips (for fetching ACLs)  but not often, cached for most of the time</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Macro-benchmarks</p>
    <p>Kernel compile: under 2% slowdown - both ext4 and NFSv3</p>
    <p>DokuWiki: 0% slowdown - playing back 6,430 revisions of 765 pages to the DokuWiki website</p>
  </div>
  <div class="page">
    <p>Conclusion  DCAC generalizes OS access control to support user/</p>
    <p>application-defined scenarios</p>
    <p>DCAC avoids the requirement of root privilege in many use cases</p>
    <p>DCAC does not require centralized attribute management</p>
    <p>DCAC coexists with DAC (discretionary access control)</p>
    <p>Code available on GitHub: https://github.com/ut-osa/dcac</p>
  </div>
</Presentation>
