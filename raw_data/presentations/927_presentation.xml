<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lightweight Application-Level Crash Consistency</p>
    <p>on Transactional Flash Storage</p>
    <p>Changwoo Min, Woon-Hak Kang, Taesoo Kim, Sang-Won Lee, Young Ik Eom</p>
    <p>Georgia Institute of Technology Sungkyunkwan University</p>
  </div>
  <div class="page">
    <p>Application's data is not consistent after random failures</p>
    <p>Mobile Phone Bank Account</p>
    <p>Hang while booting</p>
    <p>Financial loss</p>
  </div>
  <div class="page">
    <p>Application's data is not consistent after random failures</p>
    <p>Mobile Phone Bank Account</p>
    <p>Hang while booting</p>
    <p>Financial loss</p>
    <p>Power Outage Hardware Errors</p>
    <p>Software Panics (OS, Device Driver)</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Storage Device /db1 bitmap inode data</p>
    <p>/db2</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Storage Device /db1 bitmap inode data</p>
    <p>/db2</p>
    <p>/db1 data block is allocated.</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Storage Device /db1 bitmap inode data</p>
    <p>/db2</p>
    <p>/db1 data block is allocated.</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Storage Device /db1 bitmap inode data</p>
    <p>/db2</p>
    <p>/db1 data block is allocated.</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Storage Device /db1 bitmap inode data</p>
    <p>/db2</p>
    <p>/db1 data block is allocated.</p>
  </div>
  <div class="page">
    <p>Example: inserting records in two databases</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Storage Device /db1 bitmap inode data</p>
    <p>/db2</p>
    <p>Ran dom</p>
    <p>fai lur</p>
    <p>es?</p>
    <p>D ata</p>
    <p>co rru</p>
    <p>pti on!</p>
    <p>/db1 data block is allocated.</p>
  </div>
  <div class="page">
    <p>How to Achieve Crash Consistency : The Case of SQLite</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>Logging (i.e., journaling) &amp; Crash Recovery Write logs first before writing data in place</p>
  </div>
  <div class="page">
    <p>How to Achieve Crash Consistency : The Case of SQLite</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>Logging (i.e., journaling) &amp; Crash Recovery Write logs first before writing data in place</p>
    <p>Maintaining three log files : for each DB and their master : 3 create() &amp; 3 unlink()</p>
  </div>
  <div class="page">
    <p>How to Achieve Crash Consistency : The Case of SQLite</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>Logging (i.e., journaling) &amp; Crash Recovery Write logs first before writing data in place</p>
    <p>Maintaining three log files : for each DB and their master : 3 create() &amp; 3 unlink()</p>
    <p>Redundant write : 7 write()</p>
  </div>
  <div class="page">
    <p>How to Achieve Crash Consistency : The Case of SQLite</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>Logging (i.e., journaling) &amp; Crash Recovery Write logs first before writing data in place</p>
    <p>Ordering &amp; durability : 11 fsync()</p>
    <p>Maintaining three log files : for each DB and their master : 3 create() &amp; 3 unlink()</p>
    <p>Redundant write : 7 write()</p>
  </div>
  <div class="page">
    <p>How to Achieve Crash Consistency : The Case of SQLite</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>// create master journal open(/master.jnl); write(/master.jnl, /db1,/db2); fsync(/master.jnl); fsync(/); // update db1 open(/db1.jnl); write(/db1.jnl, old); fsync(/db1.jnl); fsync(/); write(/db1.jnl, master.jnl); fsync(/db1.jnl); write(/db1, new); fsync(/db1);</p>
    <p>// update db2 open(/db2.jnl); write(/db2.jnl, old); fsync(/db2.jnl) fsync(/); write(/db2.jnl, master.jnl); fsync(/db2.jnl); write(/db2, new); fsync(/db2); // clean up journals unlink(/master.jnl); fsync(/); unlink(/db1.jnl); unlink(/db1.jnl);</p>
  </div>
  <div class="page">
    <p>How to Achieve Crash Consistency : The Case of SQLite</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>// create master journal open(/master.jnl); write(/master.jnl, /db1,/db2); fsync(/master.jnl); fsync(/); // update db1 open(/db1.jnl); write(/db1.jnl, old); fsync(/db1.jnl); fsync(/); write(/db1.jnl, master.jnl); fsync(/db1.jnl); write(/db1, new); fsync(/db1);</p>
    <p>// update db2 open(/db2.jnl); write(/db2.jnl, old); fsync(/db2.jnl) fsync(/); write(/db2.jnl, master.jnl); fsync(/db2.jnl); write(/db2, new); fsync(/db2); // clean up journals unlink(/master.jnl); fsync(/); unlink(/db1.jnl); unlink(/db1.jnl);</p>
  </div>
  <div class="page">
    <p>Cost of Crash Consistency : The Case of SQLite</p>
    <p>ext4 0</p>
    <p>Written Pages</p>
    <p>Database update: 2 pages</p>
  </div>
  <div class="page">
    <p>Cost of Crash Consistency : The Case of SQLite</p>
    <p>ext4 0</p>
    <p>Written Pages</p>
    <p>Database update: 2 pages</p>
    <p>SQLite journaling: 3 pages</p>
  </div>
  <div class="page">
    <p>Cost of Crash Consistency : The Case of SQLite</p>
    <p>ext4 0</p>
    <p>Written Pages</p>
    <p>Database update: 2 pages</p>
    <p>SQLite journaling: 3 pages</p>
    <p>Ext4 journaling+metadata: 33.6 pages</p>
    <p>Write Amplification = 38.6/2 = 19.3</p>
  </div>
  <div class="page">
    <p>Cost of Crash Consistency : The Case of SQLite</p>
    <p>ext4 0</p>
    <p>Written Pages</p>
    <p>Database update: 2 pages</p>
    <p>SQLite journaling: 3 pages</p>
    <p>Ext4 journaling+metadata: 33.6 pages</p>
    <p>Write Amplification = 38.6/2 = 19.3</p>
    <p>Redundant disk writes per single data page write</p>
  </div>
  <div class="page">
    <p>Cost of Crash Consistency : The Case of SQLite</p>
    <p>ext4 0</p>
    <p>Disk Flush</p>
    <p>fsync() + FS journaling: 12.7</p>
  </div>
  <div class="page">
    <p>Cost of Crash Consistency : The Case of SQLite</p>
    <p>ext4 0</p>
    <p>Disk Flush</p>
    <p>fsync() + FS journaling: 12.7</p>
    <p>Notoriously slow! xsyncfs [Nightingale:OSDI06]</p>
    <p>OptFS [Chidambaram:SOSP13] DuraSSD [Kang:SIGMOD14]</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Problem: complex, redundant software stack for crash consistency</p>
    <p>How can we simplify mechanisms for application crash consistency?</p>
  </div>
  <div class="page">
    <p>Problem: complex, redundant software stack for crash consistency</p>
    <p>Can we use atomic updates of multi pages</p>
    <p>provided by transactional flash?</p>
    <p>How can we simplify mechanisms for application crash consistency?</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>NAND Flash SSD  No in-place update  Log-structured write  Mapping table: logical address physical address</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn...Flash Chips</p>
    <p>Mapping Table</p>
    <p>LBN PBN</p>
    <p>Pn</p>
    <p>P1</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>NAND Flash SSD  No in-place update  Log-structured write  Mapping table: logical address physical address</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn P1...Flash Chips</p>
    <p>Mapping Table</p>
    <p>LBN PBN</p>
    <p>Pn</p>
    <p>P1 write(P1)</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>NAND Flash SSD  No in-place update  Log-structured write  Mapping table: logical address physical address</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn P1...Flash Chips</p>
    <p>Mapping Table</p>
    <p>LBN PBN</p>
    <p>Pn</p>
    <p>P1 write(P1)</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>NAND Flash SSD  No in-place update  Log-structured write  Mapping table: logical address physical address</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn</p>
    <p>New copy of P1,  , Pn</p>
    <p>P1 Pn... ...Flash Chips</p>
    <p>Mapping Table</p>
    <p>LBN PBN</p>
    <p>Pn</p>
    <p>P1 write(P1)</p>
    <p>write(Pn)</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>Transactional Flash SSD  Atomic multi-page write by atomically updating the</p>
    <p>mapping table at commit request  write(txid, page), commit(txid), abort(txid)</p>
    <p>H/W implementation or S/W emulation</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn...Flash Chips</p>
    <p>Mapping Table</p>
    <p>LBN PBN</p>
    <p>Pn</p>
    <p>P1</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>Transactional Flash SSD  Atomic multi-page write by atomically updating the</p>
    <p>mapping table at commit request  write(txid, page), commit(txid), abort(txid)</p>
    <p>H/W implementation or S/W emulation</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn</p>
    <p>New copy of P1,  , Pn</p>
    <p>P1...Flash Chips</p>
    <p>Mapping Table</p>
    <p>write(txid, P1)</p>
    <p>LBN PBN</p>
    <p>Pn</p>
    <p>P1</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>Transactional Flash SSD  Atomic multi-page write by atomically updating the</p>
    <p>mapping table at commit request  write(txid, page), commit(txid), abort(txid)</p>
    <p>H/W implementation or S/W emulation</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn</p>
    <p>New copy of P1,  , Pn</p>
    <p>P1 Pn... ...Flash Chips</p>
    <p>Mapping Table</p>
    <p>write(txid, P1)</p>
    <p>commit(txid)LBN PBN Pn</p>
    <p>P1</p>
    <p>write(txid, Pn)</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>Transactional Flash SSD  Atomic multi-page write by atomically updating the</p>
    <p>mapping table at commit request  write(txid, page), commit(txid), abort(txid)</p>
    <p>H/W implementation or S/W emulation</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn</p>
    <p>New copy of P1,  , Pn</p>
    <p>P1 Pn... ...Flash Chips</p>
    <p>Mapping Table</p>
    <p>commit(txid)LBN PBN Pn</p>
    <p>P1</p>
  </div>
  <div class="page">
    <p>Transactional Flash 101</p>
    <p>Transactional Flash SSD  Atomic multi-page write by atomically updating the</p>
    <p>mapping table at commit request  write(txid, page), commit(txid), abort(txid)</p>
    <p>H/W implementation or S/W emulation</p>
    <p>Old copy of P1,  , Pn</p>
    <p>P1 Pn</p>
    <p>New copy of P1,  , Pn</p>
    <p>P1 Pn... ...Flash Chips</p>
    <p>Mapping Table</p>
    <p>commit(txid)LBN PBN Pn</p>
    <p>P1</p>
  </div>
  <div class="page">
    <p>Our Solution: CFS, a new file system using transactional flash</p>
    <p>Simplifying</p>
    <p>applications' crash consistency</p>
    <p>using atomic multi-page write</p>
    <p>of transactional flash</p>
  </div>
  <div class="page">
    <p>Our Solution: CFS</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
  </div>
  <div class="page">
    <p>Our Solution: CFS</p>
    <p>atomic_update { write(/db1, new); write(/db2, new); }</p>
    <p>write(/db1, new); write(/db2, new);</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
    <p>+ cfs_begin();</p>
    <p>+ cfs_commit();</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  CFS Design  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>CFS Architecture</p>
    <p>Transactional Flash</p>
    <p>CFS</p>
    <p>Application (e.g., DBMS, K/V)</p>
    <p>Block Storage (e.g., HDD/SSD)</p>
    <p>File System (e.g., ext4)</p>
    <p>Application (e.g., DBMS, K/V)</p>
    <p>Journaling</p>
    <p>Journaling</p>
    <p>write(txid, LBA) commit(txid) abort(txid)</p>
    <p>cfs_begin() cfs_commit() cfs_abort()</p>
    <p>Removing redundant journaling with new primitives provided by transactional flash</p>
  </div>
  <div class="page">
    <p>Four Challenges</p>
  </div>
  <div class="page">
    <p>#1. Unit of Atomic Write : Atomic Propagation Group</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
  </div>
  <div class="page">
    <p>#1. Unit of Atomic Write : Atomic Propagation Group</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
  </div>
  <div class="page">
    <p>#1. Unit of Atomic Write : Atomic Propagation Group</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
  </div>
  <div class="page">
    <p>#1. Unit of Atomic Write : Atomic Propagation Group</p>
    <p>Application</p>
    <p>For each database  Allocates new data block (bitmap)  Fills data block with user data (data)  Sets location of data block (inode)</p>
    <p>File System</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>Updated data and file system metadata pages need to be atomically updated.  Use atomic multi-page write operations</p>
    <p>Atomic Propagation Group</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Application</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>/db3</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Application</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>+ cfs_begin(); write(/db3, new); ...</p>
    <p>/db3</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Application</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>+ cfs_begin(); write(/db3, new); ...</p>
    <p>/db3</p>
    <p>What if /db3 bitmap locates in the /db2 bitmap?</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Application</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>+ cfs_begin(); write(/db3, new); ...</p>
    <p>/db3</p>
    <p>What if /db3 bitmap locates in the /db2 bitmap?</p>
    <p>/db3 data block is allocated.</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Application</p>
    <p>Transactional Flash</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>+ cfs_begin(); write(/db3, new); ...</p>
    <p>/db3</p>
    <p>What if /db3 bitmap locates in the /db2 bitmap?</p>
    <p>/db3 data block is allocated.</p>
  </div>
  <div class="page">
    <p>Problem: entangled disk pages</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>/db3</p>
  </div>
  <div class="page">
    <p>Problem: entangled disk pages</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>/db3</p>
  </div>
  <div class="page">
    <p>Problem: entangled disk pages</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>/db3</p>
  </div>
  <div class="page">
    <p>Problem: entangled disk pages</p>
    <p>/db1</p>
    <p>bitmap inode data</p>
    <p>/db2</p>
    <p>/db3</p>
    <p>/db3 data block is allocated.</p>
    <p>Incorrect bitmap - Free block is marked as allocated.</p>
  </div>
  <div class="page">
    <p>Problem: entangled disk pages</p>
    <p>/db1</p>
    <p>bitmap</p>
    <p>/db2</p>
    <p>/db3</p>
    <p>False Sharing of Metadata Pages</p>
    <p>+ cfs_begin(); write(/db1, new); write(/db2, new); + cfs_commit();</p>
    <p>+ cfs_begin(); write(/db3, new); ... - sudden power outage</p>
  </div>
  <div class="page">
    <p>#2. Metadata False Sharing : In-Memory Metadata Logging</p>
    <p>Operational Logging for in-memory metadata change  toggle_bit(free_block_bitmap, LBA)</p>
    <p>sub(free_block_count, 1)</p>
    <p>Maintain two versions of in-memory metadata to selectively propagate only relevant changes to storage  Memory version: on-going modification  Storage version: committed version, used for storage IO</p>
  </div>
  <div class="page">
    <p>REDO or UNDO operational logs</p>
    <p>cfs_commit() { storage version += REDO(logs); write(txid, storage version); commit(txid); }</p>
    <p>cfs_abort() { memory version -= UNDO(logs); abort(txid); }</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>cfs_commit()</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>cfs_commit()</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>cfs_commit()</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
    <p>Bitmap for db3 is not written.</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>cfs_abort()cfs_commit()</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
    <p>Bitmap for db3 is not written.</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>cfs_abort()cfs_commit()</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
    <p>Bitmap for db3 is not written. Bitmap for db3 is reverted.</p>
  </div>
  <div class="page">
    <p>Example: Two apps. are running</p>
    <p>Transactional Flash</p>
    <p>In-Memory Metadata</p>
    <p>Memory Version</p>
    <p>Storage Version</p>
    <p>App 1 App 2</p>
    <p>Operational Log for Atomic Propagation Group</p>
    <p>cfs_abort()cfs_commit()</p>
    <p>Turn on a bit Turn on a bit</p>
    <p>bitmap</p>
    <p>Selective Propagation of Metadata Change</p>
    <p>Bitmap for db3 is not written. Bitmap for db3 is reverted.</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>cfs_begin(); write(/my_file, 200); ...</p>
    <p>/my_file</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>cfs_begin(); write(/my_file, 200); ...</p>
    <p>/my_file</p>
    <p>cfs_begin(); val = read(/my_file); ...</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>cfs_begin(); write(/my_file, 200); ...</p>
    <p>/my_file</p>
    <p>cfs_begin(); val = read(/my_file); ...</p>
    <p>What val should be either of 100 or 200?</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>cfs_begin(); write(/my_file, 200); ...</p>
    <p>/my_file</p>
    <p>cfs_begin(); val = read(/my_file); ...</p>
    <p>What val should be either of 100 or 200?</p>
    <p>It depends on application semantics.</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>Deposit of bank account must be 200.</p>
    <p>&gt; START TRANSACTION &gt; UPDATE account SET deposit='200' &gt; ... &gt; COMMIT</p>
    <p>/bank_account &gt; START TRANSACTION &gt; SELECT deposit FROM account &gt; ... &gt; COMMIT</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>Deposit of bank account must be 200.</p>
    <p>Likes of SNS account can be either of 100 or 200.</p>
    <p>&gt; START TRANSACTION &gt; UPDATE account SET deposit='200' &gt; ... &gt; COMMIT</p>
    <p>/bank_account &gt; START TRANSACTION &gt; SELECT deposit FROM account &gt; ... &gt; COMMIT</p>
    <p>KV begin_transaction(...); KV set(account.likes, 200); ... KV end_transaction(...);</p>
    <p>/sns_account KV begin_transaction(...); KV get(account.deposit);  ... KV end_transaction(...);</p>
  </div>
  <div class="page">
    <p>#3. Isolation? Concurrency Control? : Leave It to Application</p>
    <p>Isolation and crash-consistency are orthogonal.  Even the SQL standard defines four different isolation</p>
    <p>levels.</p>
    <p>CFS does not provide its own concurrency control mechanism.  If needed, use existing synchronization primitives (e.g.,</p>
    <p>mutex, RW lock, etc).</p>
  </div>
  <div class="page">
    <p>#4. Legacy Application Support</p>
    <p>System-Wide Atomic Propagation Group  Every update from legacy applications belongs.  Automatically committed by sync() or page flusher</p>
    <p>CFS supports legacy applications without any modification.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  CFS Design  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Implementation  CFS</p>
    <p>5.8k LoC modification of ext4 on Linux 3.10  Capture logs by inserting 182 places in ext4</p>
    <p>Transactional Flash  OpenSSD: 8KB, 128 pages/block, 8GB w/ SATA2  X-FTL/SSD [Kang:SIGMOD'13]</p>
  </div>
  <div class="page">
    <p>Real Application &amp; Workloads</p>
    <p>Mobile Database</p>
    <p>SQL Database</p>
    <p>Key/Value Store</p>
    <p>Package Installer</p>
    <p>Text Editor</p>
    <p>+ RLBench + Facebook</p>
    <p>+ SysBench + LinkBench</p>
    <p>+ kctreetest + db_bench apt-get</p>
  </div>
  <div class="page">
    <p>Real Application &amp; Workloads</p>
    <p>Mobile Database</p>
    <p>SQL Database</p>
    <p>Key/Value Store</p>
    <p>Package Installer</p>
    <p>Text Editor</p>
    <p>+ RLBench + Facebook</p>
    <p>+ SysBench + LinkBench</p>
    <p>+ kctreetest + db_bench apt-get</p>
    <p>CFS is easy-to-use! : 317 LoC changes out of 3.5 million</p>
  </div>
  <div class="page">
    <p>SQLite + Facebook App. SQL Trace</p>
    <p>ext4 CFS 0</p>
    <p>App Jnl</p>
    <p>App</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
    <p>Ext4: ordered journal mode SQLite: rollback journal mode</p>
  </div>
  <div class="page">
    <p>MariaDB + LinkBench</p>
    <p>ext4 CFS 0</p>
    <p>FS Jnl + Metadata</p>
    <p>App Jnl</p>
    <p>App</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
    <p>Write Amplification Disk Flush Performance</p>
    <p>Ext4: ordered journal mode</p>
  </div>
  <div class="page">
    <p>KyotoCabinet + db_bench</p>
    <p>ext4 CFS 0</p>
    <p>App Jnl</p>
    <p>App</p>
    <p>ext4 CFS 0</p>
    <p>ext4 CFS 0</p>
    <p>Ext4: ordered journal mode</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Current mechanisms for crash consistency is complex, slow, and error-prone.</p>
    <p>CFS simplifies application's crash consistency using transactional flash.  Atomic propagation group  In-memory metadata logging</p>
    <p>Our evaluation shows  Less write: 2 ~ 4x  Less disk flush: 3 ~ 17x  Higher performance: 2 ~ 5x</p>
  </div>
  <div class="page">
    <p>Changwoo Min changwoo@gatech.edu</p>
    <p>Woon-Hak Kang, Taesoo Kim, Sang-Won Lee, Young Ik Eom</p>
    <p>Georgia Institute of Technology Sungkyunkwan University</p>
    <p>Thank you!</p>
    <p>Questions?</p>
  </div>
</Presentation>
