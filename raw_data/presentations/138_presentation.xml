<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TraceBack: First Fault Diagnosis by Reconstruction of Distributed</p>
    <p>Control Flow</p>
    <p>Andrew Ayers Chris Metcalf Junghwan Rhee Richard Schooler VERITAS Emmett Witchel Microsoft Anant Agarwal UT Austin</p>
    <p>MIT</p>
  </div>
  <div class="page">
    <p>Software Support</p>
    <p>Why arent users also useful testers?  Neither users nor developers benefit from bug</p>
    <p>Many options for user, all bad</p>
    <p>Developer tools cant be used in production</p>
    <p>Sometimes testers arent useful testers</p>
    <p>Designer</p>
    <p>Developer</p>
    <p>Knowledge Base</p>
    <p>Support Desk</p>
    <p>User</p>
    <p>Support Engineer</p>
    <p>Debugger</p>
    <p>Memory Checker</p>
    <p>Debug Mode</p>
  </div>
  <div class="page">
    <p>Bug Reports Lack Information</p>
    <p>Thoroughly documenting a bug is difficult</p>
    <p>Bug re-creation is difficult and expensive  Many software components, what version?</p>
    <p>Might require large, expensive infrastructure</p>
    <p>Might require high load levels, concurrent activity (not reproducible by user)</p>
    <p>Might involve proprietary code or data</p>
    <p>Bug re-creation does not leverage users initial bug experience</p>
  </div>
  <div class="page">
    <p>TraceBack: First Fault Diagnosis</p>
    <p>Provide debugger-like experience to developer from users execution  TraceBack helps first time user has a problem</p>
    <p>Easier model for users and testers</p>
    <p>TraceBack constraints  Consume limited resources (always on)</p>
    <p>Tolerate failure conditions</p>
    <p>Do not modify source code</p>
    <p>Systems are more expensive to support than they are to purchase</p>
  </div>
  <div class="page">
    <p>TraceBack In Action</p>
    <p>Step back</p>
    <p>Step back out</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Design</p>
    <p>Implementation</p>
    <p>Deployment issues  Supporting long-running applications</p>
    <p>Memory allocation issues</p>
    <p>Generating TraceBack bug reports</p>
    <p>Trace viewing</p>
    <p>Cross-language, cross-machine traces</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>TraceBack Design</p>
    <p>Code instrumentation + runtime support  Do more work before and after execution</p>
    <p>time to minimize impact on execution time  Records only control flow</p>
    <p>Stores environment + optionally core dump</p>
    <p>Captures only recent history  Circular buffer of trace records in memory  Previous 64K lines</p>
    <p>Vendor statically instruments product using TB, gets TB bug reports from field</p>
  </div>
  <div class="page">
    <p>Instrumentation Code  Instrumentation records execution history</p>
    <p>Executable instrumented with code probes (staticallyminimize impact on execution time)</p>
    <p>Code probes write trace records in memory</p>
    <p>Common caseflip one bit per basic block</p>
    <p>Each thread has its own trace buffer Instrumentation original code</p>
    <p>Instrumentation original code</p>
    <p>Instrumented executable</p>
    <p>Trace records</p>
    <p>Buffer header</p>
    <p>Trace buffer</p>
  </div>
  <div class="page">
    <p>Efficiently Encoding Control Flow</p>
    <p>DAG Headers</p>
    <p>DAG 2</p>
    <p>DAG 1</p>
    <p>Minimize time &amp; space overhead</p>
    <p>Partition control flow graph by DAGs  Trace recordone word per DAG</p>
    <p>DAG header writes DAG number</p>
    <p>DAG blocks set bits (with single or)</p>
    <p>Break DAGs at calls  Easiest way for inter-procedural trace</p>
    <p>Any call can cross modules</p>
    <p>Performance overhead</p>
    <p>Module becomes sequence of DAGs Control flow graph of basic blocks</p>
  </div>
  <div class="page">
    <p>Module DAG Renumbering</p>
    <p>Real applications made of many modules</p>
    <p>Code modules instrumented independently  Which DAG is really DAG number 1?</p>
    <p>Modules heuristically instrumented with disjoint DAG number spaces (dll rebasing)</p>
    <p>TraceBack runtime monitors DAG space  If it loads a module with a conflicting space, it</p>
    <p>renumbers the DAGs</p>
    <p>If it reloads same module, it uses the same number space (support long running apps)</p>
  </div>
  <div class="page">
    <p>Allocating Trace Buffers  What happens if there are more threads</p>
    <p>than trace buffers?  Delegate one buffer as desperation buffer  Instrumentation must write records somewhere</p>
    <p>Dont recover trace data, but dont crash</p>
    <p>On buffer wrap, retry buffer allocation</p>
    <p>What if no buffers can be allocated?  Use static buffer, compiled into runtime</p>
    <p>What if thread runs no instrumented code?  Start it in zero-length probation buffer</p>
  </div>
  <div class="page">
    <p>Sub-Buffering</p>
    <p>Current trace record pointer is in thread-local storage  When a thread terminates abruptly,</p>
    <p>pointer disappears</p>
    <p>Where is the last record?</p>
    <p>Break buffers into regions  Zero sub-region when code enters</p>
    <p>Current sub-buffer is the one with zeroed records</p>
    <p>Buffer Header</p>
    <p>Trace Buffer</p>
    <p>Thread 0 Buffer Ptr</p>
    <p>Trace Records</p>
    <p>Buffer Header</p>
    <p>Trailer</p>
    <p>Trailer</p>
    <p>Zeroed Partition</p>
    <p>Sub-Buffer</p>
    <p>Sub-Buffer</p>
  </div>
  <div class="page">
    <p>Snapshots</p>
    <p>Trace buffer in memory mapped file  Persistent even if application crashes/hangs</p>
    <p>Snapshot is a copy of the trace buffers  External program (e.g., on program hang)</p>
    <p>Program event, like an exception (debugging)</p>
    <p>Programmatic API (at unreachable point)</p>
    <p>Snap suppression is keyusers want to store and examine unique snapshots</p>
  </div>
  <div class="page">
    <p>Trace Reconstruction</p>
    <p>Trace records converted to line trace</p>
    <p>Refine line trace for exceptions  Users hate seeing a line executed after the</p>
    <p>line that took an exception</p>
    <p>Call structure recreated  Dont waste time &amp; space at runtime</p>
    <p>Threads interleaved plausibly  Realtime timestamps for ordering</p>
  </div>
  <div class="page">
    <p>Cross language trace  Trace records are language independent</p>
  </div>
  <div class="page">
    <p>Distributed Tracing</p>
    <p>Logical threads</p>
    <p>Real time clocks</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>TraceBack on x866 engineer-years (99-01)  20 engineer-years total for TB functionality</p>
    <p>Still sold as part of VERITAS Application Saver</p>
    <p>TraceBack product supports many platforms</p>
    <p>Language OS/Architecture</p>
    <p>C/C++, VB6, Java, .NET Windows/x86</p>
    <p>C/C++, Java Linux/x86, Solaris/SPARC</p>
    <p>Java only AIX/PPC, HP-UX/PA</p>
    <p>COBOL OS/390</p>
  </div>
  <div class="page">
    <p>SPECInt2000 Performance Results</p>
    <p>Geometric mean slowdown 60%</p>
    <p>3GHz P4, 2GB RAM, VC 7.1, ref inputs</p>
  </div>
  <div class="page">
    <p>Webserver Performance Results SPECJbb SPECWeb99/Apache</p>
    <p>Multi-threaded, long running server apps  SPECJbb throughput reduced 16%25%  SPECWeb throughput &amp; latency reduced &lt; 5%  Phase Forward slowdown less than 5%</p>
  </div>
  <div class="page">
    <p>Real World Examples  Phase Forwards C++ application hung due to a third</p>
    <p>party database dll  Cross-process trace got Phase Forward a fix from database</p>
    <p>company</p>
    <p>At Oracle, TraceBack found cause of a slow Java/C++ applicationtoo many Java exceptions  A call to sleep had been wrapped in a try/catch block  Argument to sleep was a random integer, negative half the time</p>
    <p>The TraceBack GUI itself (written in C++) is instrumented with TraceBack  At eBay, the GUI became unresponsive (to Ayers)  Ayers took a snap, and sent the trace, in real time (to Metcalf)  Culprit was an O(n2) algorithm in the GUI  Ayers told the engineers at eBay, right then, about the bug and</p>
    <p>its fix</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Path profiling [Ball/Larus 96, Duesterwald 00, Nandy 03, Bond 05]  Some interprocedural extensions. [Tallam 04]</p>
    <p>Most recent work on making it more efficient (e.g., using sampling which TraceBack cant).</p>
    <p>Statistical bug hunting [Liblit 03 &amp; 05]  Virtutechs Hindsight, reverse execution in a</p>
    <p>machine simulator 2005.</p>
    <p>Omniscient debugger [Lewis 03]</p>
    <p>Microsoft Watson crashdump analysis.</p>
    <p>Static translation systems (ATOM, etc.)</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Navelcurrent project at UT</p>
    <p>Connect user with workarounds for common bugs  Use program trace to search knowledge base</p>
    <p>Machine learning does the fuzzy matching</p>
    <p>Eliminating duplicate bug reports</p>
    <p>Program behavior is useful data</p>
  </div>
  <div class="page">
    <p>TraceBack</p>
    <p>Application of binary translation research  Efficient enough to be always on</p>
    <p>Provides developer with debugger-like information from crash report  Multiple threads  Multiple languages</p>
    <p>Multiple machines</p>
    <p>Thank you</p>
  </div>
</Presentation>
