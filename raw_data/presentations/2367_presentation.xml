<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reverse Traceroute</p>
    <p>Ethan Katz-Bassett, Harsha V. Madhyastha, Vijay K. Adhikari, Colin Scott, Justine Sherry, Peter van Wesep, Arvind Krishnamurthy, Thomas Anderson</p>
    <p>NSDI, April 2010 This work partially supported by Cisco, Google, NSF</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Researchers Need Reverse Paths, Too The inability to measure reverse paths was</p>
    <p>the biggest limitation of my previous systems: ! Geolocation constraints too loose ! Hubble cant locate reverse path outages ! iPlane predictions inaccurate</p>
    <p>Other systems use sophisticated measurements but are forced to assume symmetric paths:</p>
    <p>! Netdiff compares ISP performance ! iSpy detects prefix hijacking ! Eriksson et al. infer topology</p>
    <p>[IMC 06] [NSDI 08] [NSDI 09]</p>
    <p>[NSDI 08] [SIGCOMM 08] [SIGCOMM 08]</p>
  </div>
  <div class="page">
    <p>Everyone Needs Reverse Paths</p>
    <p>The number one go-to tool is traceroute. Asymmetric paths are the number one plague. The reverse path itself is completely invisible.</p>
    <p>NANOG Network operators troubleshooting tutorial, 2009.</p>
    <p>Goal: Reverse traceroute, without control of destination and deployable today without new support</p>
  </div>
  <div class="page">
    <p>! Want path from D back to S, dont control D</p>
    <p>! Traceroute gives S to D, but likely asymmetric</p>
    <p>! Cant use traceroutes TTL limiting on reverse path</p>
    <p>! Technique does not require control of destination KEY IDEA</p>
  </div>
  <div class="page">
    <p>! Want path from D back to S, dont control D</p>
    <p>! Set of vantage points</p>
    <p>! Multiple VPs combine for view unattainable from any one KEY IDEA</p>
  </div>
  <div class="page">
    <p>! Traceroute from all vantage points to S</p>
    <p>! Gives atlas of paths to S; if we hit one, we know rest of path &quot; Destination-based</p>
    <p>routing</p>
    <p>! Traceroute atlas gives baseline we bootstrap from KEY IDEA</p>
  </div>
  <div class="page">
    <p>! Destination-based routing &quot; Path from R1 depends only on S &quot; Does not depend on source &quot; Does not depend on</p>
    <p>path from D to R1</p>
    <p>! Destination-based routing lets us stitch path hop-by-hop KEY IDEA</p>
  </div>
  <div class="page">
    <p>! Destination-based routing lets us stitch path hop-by-hop KEY IDEA</p>
    <p>! Destination-based routing &quot; Path from R3 depends only on S &quot; Does not depend on source &quot; Does not depend on</p>
    <p>path from D to R3</p>
  </div>
  <div class="page">
    <p>! Destination-based routing lets us stitch path hop-by-hop KEY IDEA</p>
    <p>! Destination-based routing &quot; Path from R4 depends only on S &quot; Does not depend on source &quot; Does not depend on</p>
    <p>path from D to R4</p>
  </div>
  <div class="page">
    <p>! Destination-based routing lets us stitch path hop-by-hop ! Traceroute atlas gives baseline we bootstrap from</p>
    <p>KEY IDEAS</p>
    <p>! Once we intersect a path in our atlas, we know rest of route</p>
  </div>
  <div class="page">
    <p>! Destination-based routing lets us stitch path hop-by-hop ! Traceroute atlas gives baseline we bootstrap from</p>
    <p>! Segments combine to give complete path</p>
    <p>But how do we get segments?</p>
    <p>KEY IDEAS</p>
  </div>
  <div class="page">
    <p>How do we get segments? ! Unlike TTL, IP Options</p>
    <p>are reflected in reply ! Record Route (RR) Option</p>
    <p>&quot; Record first 9 routers &quot; If D within 8,</p>
    <p>reverse hops fill rest of slots</p>
    <p>! IP Options work over forward and reverse path KEY IDEA</p>
  </div>
  <div class="page">
    <p>How do we get segments? ! Unlike TTL, IP Options</p>
    <p>are reflected in reply ! Record Route (RR) Option</p>
    <p>&quot; Record first 9 routers &quot; If D within 8,</p>
    <p>reverse hops fill rest of slots</p>
    <p>&quot;  but average path is 15 hops, 30 round-trip</p>
    <p>! IP Options work over forward and reverse path KEY IDEA</p>
  </div>
  <div class="page">
    <p>! From vantage point within 8 hops of D, ping D spoofing as S with Record Route Option</p>
    <p>! Ds response records hop(s) on return path</p>
    <p>! Spoofing lets us use vantage point in best position</p>
    <p>To: D Fr: S Ping? RR:__</p>
    <p>To: D Fr: S Ping? RR: h1,,h7</p>
    <p>To: S Fr: D Ping! RR: h1,,h7,D,R1</p>
    <p>KEY IDEA</p>
    <p>To: S Fr: D Ping! RR: h1,,h7,D</p>
  </div>
  <div class="page">
    <p>! Iterate, performing spoofed Record Routes to each router we discover on return path</p>
    <p>! Spoofing lets us use vantage point in best position ! Destination-based routing lets us stitch path hop-by-hop</p>
    <p>To: R1 Fr: S Ping? RR:__</p>
    <p>To: S Fr: R1 Ping! RR: h1,,h6,R1,R2,R3</p>
    <p>KEY IDEAS</p>
  </div>
  <div class="page">
    <p>KEY IDEAS ! Spoofing lets us use vantage point in best position ! Destination-based routing lets us stitch path hop-by-hop</p>
    <p>What if no vantage point is within 8 hops for Record Route?</p>
    <p>! Consult atlas of known paths to find adjacencies</p>
  </div>
  <div class="page">
    <p>! Known paths provide set of possible next hops to guess KEY IDEA</p>
    <p>What if no vantage point is within 8 hops for Record Route?</p>
    <p>! Consult atlas of known paths to find adjacencies</p>
  </div>
  <div class="page">
    <p>How do we verify which possible next hop is actually on path?</p>
    <p>! IP Timestamp (TS) Option &quot; Specify ! 4 IPs,</p>
    <p>each timestamps if traversed in order</p>
    <p>To: R3 Fr: S Ping? TS: R3? R4?</p>
    <p>To: S Fr: R3 Ping! TS: R3! R4?</p>
    <p>To: S Fr: R3 Ping! TS: R3! R4!</p>
    <p>KEY IDEAS ! Known paths provide set of possible next hops to guess ! IP Options work over forward and reverse path</p>
  </div>
  <div class="page">
    <p>! Destination-based routing lets us stitch path hop-by-hop KEY IDEA</p>
  </div>
  <div class="page">
    <p>! Once we intersect a path in our atlas, we know rest of route</p>
    <p>KEY IDEAS ! Destination-based routing lets us stitch path hop-by-hop ! Traceroute atlas gives baseline we bootstrap from</p>
  </div>
  <div class="page">
    <p>! Techniques combine to give complete path</p>
    <p>KEY IDEAS ! Destination-based routing lets us stitch path hop-by-hop ! Traceroute atlas gives baseline we bootstrap from</p>
  </div>
  <div class="page">
    <p>Key Ideas ! Works without control of destination ! Multiple vantage points ! Stitch path hop-by-hop ! Traceroute atlas provides:</p>
    <p>&quot; Baseline paths &quot; Adjacencies</p>
    <p>! IP Options work over forward and reverse path ! Spoofing lets us use vantage point in best position</p>
    <p>See paper for techniques to address: ! Accuracy: Some routers process options incorrectly ! Coverage: Some ISPs filter probe packets ! Scalability: Need to select vantage points carefully</p>
  </div>
  <div class="page">
    <p>Deployment Coverage tied to set of spoofing vantage</p>
    <p>points (VPs)</p>
    <p>! Current: &quot; VPs: PlanetLab / Measurement Lab</p>
    <p>! ~90 sites did not filter spoofing &quot; Sources: Closed system of PlanetLab sources,</p>
    <p>demo at http://revtr.cs.washington.edu ! Future plans:</p>
    <p>&quot; VPs: Recruit participants to improve coverage &quot; Sources: Open system to outside sources</p>
  </div>
  <div class="page">
    <p>Evaluation See paper for: ! Coverage: How often are our techniques able to</p>
    <p>measure reverse hops? ! Overhead: How much time and how many packets</p>
    <p>does a reverse traceroute require?</p>
    <p>Next: ! Accuracy: Does it yield the same path as if you</p>
    <p>could issue a traceroute from destination? &quot; 2200 PlanetLab to PlanetLab paths &quot; Allows comparison to direct traceroute on reverse path</p>
  </div>
  <div class="page">
    <p>Does it give the same path as traceroute?</p>
    <p>! We identify most hops seen by traceroute ! Hard to know if 2 IPs actually are the same router</p>
    <p>Median: 38% if assume symmetric</p>
    <p>Median: 87% with our system</p>
  </div>
  <div class="page">
    <p>Median: 38% if assume symmetric</p>
    <p>Median: 87% with our system</p>
    <p>Does it give the same path as traceroute?</p>
    <p>! We identify most hops seen by traceroute ! Hard to know if 2 IPs actually are the same router</p>
    <p>&quot; If we consider PoPs instead, median=100% accurate</p>
  </div>
  <div class="page">
    <p>Example of debugging inflated path</p>
    <p>! Indirectness: FL#DC#FL But does not explain huge latency jump from 9 to 10</p>
    <p>! 150ms round-trip time Orlando to Seattle, 2-3x expected &quot; E.g., Content provider detects poor client performance</p>
    <p>! (Current practice) Issue traceroute, check if indirect</p>
  </div>
  <div class="page">
    <p>Example of debugging inflated path ! (Current practice) Issue traceroute, check if indirect</p>
    <p>&quot; Does not fully explain inflated latency ! (Our tool) Use reverse traceroute to check reverse path</p>
    <p>! Indirectness: WA#LA#WA Bad reverse path causes inflated round-trip delay</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Case Study: Sprint Link Latencies</p>
    <p>! Reverse traceroute sees 79 of 89 inter-PoP links, whereas traceroute only sees 61</p>
    <p>! Median (0.4ms), mean (0.6ms), worst case (2.2ms) error all 10x better than with traditional approach</p>
  </div>
  <div class="page">
    <p>Conclusion ! Traceroute is very useful, but cant give reverse path ! Our reverse traceroute system addresses limitation,</p>
    <p>providing complementary information &quot; Multiple vantage points build the path incrementally &quot; Gives most hops as if you issued traceroute from</p>
    <p>destination, without requiring you to control it ! Useful in a range of contexts</p>
    <p>! Demo at http://revtr.cs.washington.edu ! Plan to open system to outside sources in future</p>
  </div>
</Presentation>
