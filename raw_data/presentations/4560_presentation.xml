<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Improving Test Case Generation for Web Applications Using</p>
    <p>Automated Interface Discovery</p>
    <p>William G.J. Halfond and Alessandro Orso</p>
    <p>Georgia Institute of Technology</p>
  </div>
  <div class="page">
    <p>Web Application Overview</p>
    <p>DB</p>
    <p>Other Systems</p>
    <p>Web Server</p>
    <p>End Users</p>
    <p>Request http://host?login=alice&amp;pin=1234</p>
    <p>HTML Pages</p>
    <p>Web Application</p>
    <p>HTML</p>
    <p>Servlets</p>
  </div>
  <div class="page">
    <p>public void write(File outfile, String buffer, int length)</p>
    <p>Testing Web Applications</p>
    <p>Domain information</p>
    <p>Parameter grouping</p>
  </div>
  <div class="page">
    <p>Testing Web Applications void main(Request req)</p>
    <p>String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) // generate second registration page else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else // generate initial registration page</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Testing Web Applications void main(Request req)</p>
    <p>String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) // generate second registration page else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else // generate initial registration page</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Testing Web Applications void main(Request req)</p>
    <p>String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) // generate second registration page else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else // generate initial registration page</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Testing Web Applications void main(Request req)</p>
    <p>String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) // generate second registration page else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else // generate initial registration page</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Testing Web Applications void main(Request req)</p>
    <p>String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) // generate second registration page else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else // generate initial registration page</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Testing Web Applications void main(Request req)</p>
    <p>String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) // generate second registration page else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else // generate initial registration page</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Developer-specified models Ricca and Tonella, ICSE 2001</p>
    <p>Approaches to Web Application Testing</p>
    <p>Captured user-sessions Kallepalli and Tian, TSE 2001</p>
    <p>Sprenkle et. al., ASE 2006 Elbaum et. al., ICSE 2003</p>
    <p>Black-box analysis Huang et. al., WWW 2003</p>
    <p>Elbaum et. al., WODA 2006</p>
    <p>Static code analysis Deng et al., SEN 2004</p>
  </div>
  <div class="page">
    <p>Goal of Our Approach</p>
    <p>Develop a technique to automatically discover all of the interfaces to a web application</p>
    <p>Interfaces</p>
    <p>Web Application</p>
    <p>HTML</p>
    <p>Servlets  Input parameters  Domain information</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Definitions  Interface Discovery Algorithm  Empirical Evaluation  Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Definitions: 1. Input Parameter</p>
    <p>void main(Request req) String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
    <p>http://host?login=alice&amp;pin=1234</p>
  </div>
  <div class="page">
    <p>Definitions: 1. Input Parameter 2. Parameter Function</p>
    <p>void main(Request req) String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Definitions: 1. Input Parameter 2. Parameter Function 3. Domain Operations</p>
    <p>void main(Request req) String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Definitions: 1. Input Parameter 2. Parameter Function 3. Domain Operations 4. Web Interface</p>
    <p>void main(Request req) String formAction = req.getParam(formAction) if (formAction.equals(chooseLogin)) String requestedLogin = req.getParam(login) int pin = getNumParam(req, pin) registerLogin(requestedLogin, pin) else if (formAction.equals(personalInfo)) String name = req.getParam(name) int zip = getNumParam(req, zip) if (zip == 30318) finishRegistration(id, name) else error(You do not live in 30318) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
  </div>
  <div class="page">
    <p>Interface Discovery Algorithm</p>
    <p>Phase 1: Compute domain information for each Input Parameter</p>
    <p>Phase 2: Identify names of Input Parameters and group them into distinct interfaces</p>
    <p>Phase 1 Phase 2 Interfaces</p>
    <p>Web Application</p>
    <p>HTML</p>
    <p>Servlets</p>
  </div>
  <div class="page">
    <p>Phase 1: Compute Domain Information</p>
    <p>For each call to a Parameter Function: 1. Infer domain information by</p>
    <p>Following def-use chains involving the return value  Considering operations performed on the uses</p>
    <p>Web Application with domain information annotations</p>
    <p>Web Application</p>
    <p>HTML</p>
    <p>Servlets</p>
    <p>Phase 1</p>
  </div>
  <div class="page">
    <p>Phase 1 Extract domain</p>
    <p>information.</p>
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParameter(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot; ) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
    <p>Numeric</p>
    <p>Numeric</p>
    <p>Numeric 30318</p>
    <p>String chooseLogin personalInfo</p>
    <p>String</p>
    <p>String</p>
  </div>
  <div class="page">
    <p>Phase 2: Compute Interfaces</p>
    <p>For each method m: 1. Discover Input Parameter names 2. Identify sets of Input Parameters accessed along a path 3. For each set, add to ms summary an interface consisting of</p>
    <p>Input Parameters in the set  Corresponding domain information</p>
    <p>Web Application with domain information annotations</p>
    <p>Phase 2 Interfaces</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
    <p>String chooseLogin personalInfo</p>
    <p>String</p>
    <p>Numeric</p>
    <p>Numeric</p>
    <p>Numeric 30318</p>
    <p>String</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
    <p>paramName:Numeric</p>
    <p>String chooseLogin personalInfo</p>
    <p>String</p>
    <p>Numeric</p>
    <p>Numeric 30318</p>
    <p>String</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>int getNumParam(Request req, String paramName) String paramValue = req.getParam(paramName) int param = Integer.parseInt(paramValue) return param</p>
    <p>String chooseLogin personalInfo</p>
    <p>String</p>
    <p>Numeric</p>
    <p>Numeric 30318</p>
    <p>String</p>
    <p>fp(2):Numeric</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>String chooseLogin personalInfo</p>
    <p>String</p>
    <p>Numeric</p>
    <p>Numeric 30318</p>
    <p>String</p>
    <p>getNumParam(Request req, String paramName) fp(2):Numeric</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>login:String</p>
    <p>formAction:String chooseLogin personalInfo</p>
    <p>pin:Numeric</p>
    <p>zip:Numeric 30318</p>
    <p>name:String</p>
    <p>getNumParam(Request req, String paramName) fp(2):Numeric</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>login:String</p>
    <p>formAction:String chooseLogin personalInfo</p>
    <p>pin:Numeric</p>
    <p>zip:Numeric 30318</p>
    <p>name:String</p>
    <p>getNumParam(Request req, String paramName) fp(2):Numeric</p>
    <p>Servlet Interfaces: (formAction, login, pin)</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>login:String</p>
    <p>formAction:String chooseLogin personalInfo</p>
    <p>pin:Numeric</p>
    <p>zip:Numeric 30318</p>
    <p>name:String</p>
    <p>getNumParam(Request req, String paramName) fp(2):Numeric</p>
    <p>Servlet Interfaces: (formAction, login, pin) (formAction, name, zip)</p>
  </div>
  <div class="page">
    <p>void main(Request req) String formAction = req.getParam(&quot;formAction) if (formAction.equals(&quot;chooseLogin )) String requestedLogin = req.getParam(&quot;login&quot;) int pin = getNumParam(req, &quot;pin&quot;) registerLogin(requestedLogin, pin) else if (formAction.equals(&quot;personalInfo&quot;)) String name = req.getParam(&quot;name&quot;) int zip = getNumParam(req, &quot;zip&quot;) if (zip == 30318) finishRegistration(id, name) else error(&quot;You do not live in 30318&quot;) else</p>
    <p>login:String</p>
    <p>formAction:String chooseLogin personalInfo</p>
    <p>pin:Numeric</p>
    <p>zip:Numeric 30318</p>
    <p>name:String</p>
    <p>getNumParam(Request req, String paramName) fp(2):Numeric</p>
    <p>Servlet Interfaces: (formAction, login, pin) (formAction, name, zip) (formAction)</p>
  </div>
  <div class="page">
    <p>Servlet Interfaces</p>
    <p>personalInfo chooseLogin</p>
    <p>StringformAction3 30318Numericpin</p>
    <p>-Stringlogin</p>
    <p>personalInfo chooseLogin</p>
    <p>StringformAction</p>
    <p>-Numericpin -Stringlogin</p>
    <p>personalInfo chooseLogin</p>
    <p>StringformAction</p>
    <p>Relevant ValuesDomain-TypeNameInterface</p>
  </div>
  <div class="page">
    <p>Empirical Evaluation</p>
    <p>Research Question 1: Does our technique discover a higher number of interfaces than a conventional approach?</p>
    <p>Research Question 2: Does testing effectiveness improve when using interface information generated by our technique instead of a conventional approach?</p>
  </div>
  <div class="page">
    <p>Prototype Implementation - WAM</p>
    <p>Analyzes bytecode of Web application servlets</p>
    <p>Targets Java Enterprise Edition (JEE)  Uses several analysis libraries and tools  Call and control-flow graphs: SOOT  Data-dependency: INDUS  Resolving string values: JSA</p>
  </div>
  <div class="page">
    <p>Spider Implementation</p>
    <p>Crawl pages and links of a web application  Parse HTML to get interface information  Extract &lt;form&gt; and &lt;input&gt; elements  Record default values</p>
    <p>Based on OWASP WebScarab Project  Widely used code-base  Actively maintained</p>
  </div>
  <div class="page">
    <p>Evaluation Subjects</p>
    <p>Subject LOC Servlets</p>
    <p>Bookstore 19,402 28</p>
    <p>Checkers 5,415 33</p>
    <p>Classifieds 10,702 19</p>
    <p>Employee Directory 5,529 11</p>
    <p>Events 7,164 13</p>
    <p>Office Talk 4,670 38</p>
    <p>Portal 16,089 28</p>
  </div>
  <div class="page">
    <p>Research Question 1  Results</p>
    <p>Number of Discovered Interfaces</p>
    <p>B oo</p>
    <p>ks to</p>
    <p>re</p>
    <p>C he</p>
    <p>ck er</p>
    <p>s</p>
    <p>C la ss</p>
    <p>ifi ed</p>
    <p>s</p>
    <p>O ffi ce</p>
    <p>T al k</p>
    <p>P or</p>
    <p>ta l</p>
    <p>E m</p>
    <p>pl oy</p>
    <p>ee D</p>
    <p>ir.</p>
    <p>E ve</p>
    <p>nt s</p>
    <p># I</p>
    <p>n t e</p>
    <p>r f a</p>
    <p>c e</p>
    <p>s</p>
    <p>spider</p>
    <p>wam</p>
  </div>
  <div class="page">
    <p>Research Question 2: Compare Coverage</p>
  </div>
  <div class="page">
    <p>Block Coverage</p>
    <p>B oo</p>
    <p>ks to</p>
    <p>re</p>
    <p>C he</p>
    <p>ck er</p>
    <p>s</p>
    <p>C la</p>
    <p>ss ifi ed</p>
    <p>s</p>
    <p>E m</p>
    <p>pl oy</p>
    <p>ee D</p>
    <p>ir.</p>
    <p>E ve</p>
    <p>nt s</p>
    <p>P or</p>
    <p>ta l</p>
    <p>O ffi ce</p>
    <p>T al k</p>
    <p>P e</p>
    <p>rc e</p>
    <p>n t</p>
    <p>C o</p>
    <p>v e</p>
    <p>ra g</p>
    <p>e</p>
    <p>Spider</p>
    <p>WAM</p>
    <p>Research Question 2  Results</p>
    <p>Average increase: 30%</p>
  </div>
  <div class="page">
    <p>Branch Coverage</p>
    <p>B oo</p>
    <p>ks to</p>
    <p>re</p>
    <p>C he</p>
    <p>ck er</p>
    <p>s</p>
    <p>C la</p>
    <p>ss ifi ed</p>
    <p>s</p>
    <p>E m</p>
    <p>pl oy</p>
    <p>ee D</p>
    <p>ir.</p>
    <p>E ve</p>
    <p>nt s</p>
    <p>P or</p>
    <p>ta l</p>
    <p>O ffi ce</p>
    <p>T al k</p>
    <p>P e</p>
    <p>rc e</p>
    <p>n t</p>
    <p>C o</p>
    <p>v e</p>
    <p>ra g</p>
    <p>e</p>
    <p>Spider</p>
    <p>WAM</p>
    <p>Research Question 2  Results</p>
    <p>Average increase: 48%</p>
  </div>
  <div class="page">
    <p>Database Command-form Coverage</p>
    <p>B oo</p>
    <p>ks to</p>
    <p>re</p>
    <p>C he</p>
    <p>ck er</p>
    <p>s</p>
    <p>C la</p>
    <p>ss ifi ed</p>
    <p>s</p>
    <p>E m</p>
    <p>pl oy</p>
    <p>ee D</p>
    <p>ir.</p>
    <p>E ve</p>
    <p>nt s</p>
    <p>P or</p>
    <p>ta l</p>
    <p>O ffi ce</p>
    <p>T al k</p>
    <p># o</p>
    <p>f C</p>
    <p>o m</p>
    <p>m a n</p>
    <p>d -f</p>
    <p>o rm</p>
    <p>s</p>
    <p>Spider</p>
    <p>WAM</p>
    <p>Research Question 2  Results</p>
    <p>Average increase: 94%</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>Fully automated static analysis technique for discovering web application interfaces</p>
    <p>Empirical evaluation against Spider  Discovered higher number of interfaces  Led to test inputs with higher coverage</p>
    <p>Future work includes:  Apply symbolic execution to improve domain</p>
    <p>information  Improve automated modeling of web applications</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
