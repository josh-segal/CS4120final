<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Supporting Strong Cache Coherency for Active Caches in Multi-Tier DataCenters over InfiniBand</p>
    <p>S. Narravula, P. Balaji, K. Vaidyanathan, S. Krishnamoorthy, J. Wu and D. K. Panda</p>
    <p>The Ohio State University</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation</p>
    <p>Design and Implementation</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Fast Internet Growth  Number of Users  Amount of data  Types of services</p>
    <p>Several uses  E-Commerce, Online Banking, Online Auctions, etc</p>
    <p>Types of Content  Images, documents, audio clips, video clips, etc - Static</p>
    <p>Content  Stock Quotes, Online Stores (Amazon), Online Banking,</p>
    <p>etc. - Dynamic Content (Active</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation  Multi-Tier Data-Centers  Active Caches  InfiniBand</p>
    <p>Design and Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Multi-Tier Data-Centers</p>
    <p>Single Powerful Computers  Clusters</p>
    <p>Low Cost to Performance Ratio  Increasingly Popular</p>
    <p>Multi-Tier Data-Centers  Scalability  an important issue</p>
  </div>
  <div class="page">
    <p>A Typical Multi-Tier DataCenter</p>
    <p>Database Servers</p>
    <p>Clients</p>
    <p>Application Servers</p>
    <p>Web Servers</p>
    <p>Proxy Nodes</p>
    <p>Tier 0</p>
    <p>Tier 1</p>
    <p>Tier 2</p>
    <p>Apache</p>
    <p>PHP</p>
    <p>WAN</p>
  </div>
  <div class="page">
    <p>Tiers of a Typical Multi-Tier Data-Center  Proxy Nodes</p>
    <p>Handle Caching, load balancing, security, etc  Web Servers</p>
    <p>Handle the HTML content  Application Servers</p>
    <p>Handle Dynamic Content, Provide Services  Database Servers</p>
    <p>Handle persistent storage</p>
  </div>
  <div class="page">
    <p>Data-Center Characteristics</p>
    <p>Computation</p>
    <p>Front-End Tiers</p>
    <p>Back-End Tiers</p>
    <p>The amount of computation required for processing each request increases as we go to the inner tiers of the Data-Center  Caching at the front tiers is an important factor for scalability</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation  Introduction  Multi-Tier Data-Centers  Active Caches  InfiniBand</p>
    <p>Design and Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Caching</p>
    <p>Can avoid re-fetching of content</p>
    <p>Beneficial if requests repeat</p>
    <p>Static content caching  Well studied in the past  Widely used</p>
    <p>Front-End Tiers</p>
    <p>Back-End Tiers</p>
    <p>Number of Requests Decrease</p>
  </div>
  <div class="page">
    <p>Active Caching  Dynamic Data</p>
    <p>Stock Quotes, Scores, Personalized Content, etc</p>
    <p>Simple caching methods not suited  Issues</p>
    <p>Consistency  Coherency</p>
    <p>Proxy Node Cache</p>
    <p>Back-End Data</p>
    <p>User Request</p>
    <p>Update</p>
  </div>
  <div class="page">
    <p>Cache Consistency</p>
    <p>Non-decreasing views of system state  Updates seen by all or none</p>
    <p>User Requests</p>
    <p>Proxy Nodes</p>
    <p>Back-End Nodes</p>
    <p>Update</p>
  </div>
  <div class="page">
    <p>Cache Coherency</p>
    <p>Refers to the average staleness of the document served from cache</p>
    <p>Two models of coherence  Bounded staleness (Weak Coherency)  Strong or immediate (Strong Coherency)</p>
  </div>
  <div class="page">
    <p>Strong Cache Coherency</p>
    <p>An absolute necessity for certain kinds of data  Online shopping, Travel ticket availability, Stock</p>
    <p>Quotes, Online auctions  Example: Online banking</p>
    <p>Cannot afford to show different values to different concurrent requests</p>
  </div>
  <div class="page">
    <p>Caching policies Consistency Coherency</p>
    <p>No Caching   Client Polling   Invalidation *   TTL/Adaptive TTL</p>
    <p>*D. Li, P. Cao, and M. Dahlin. WCIP: Web Cache Invalidation Protocol. IETF Internet Draft, November 2000.</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation  Introduction  Multi-Tier Data-Centers  Active Caches  InfiniBand</p>
    <p>Design and Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>InfiniBand  High Performance</p>
    <p>Low latency  High Bandwidth</p>
    <p>Open Industry Standard  Provides rich features</p>
    <p>RDMA, Remote Atomic operations, etc  Targeted for Data-Centers  Transport Layers</p>
    <p>VAPI  IPoIB  SDP</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Low latencies of less than 5us achieved  Bandwidth over 840 MB/s</p>
    <p>* SDP and IPoIB from Voltaires Software Stack</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Receiver side CPU utilization is very low  Leveraging the benefits of One sided communication</p>
  </div>
  <div class="page">
    <p>Caching policies</p>
    <p>Consistency Coherency</p>
    <p>No Caching   Client Polling   Invalidation   TTL/Adaptive TTL</p>
  </div>
  <div class="page">
    <p>Objective</p>
    <p>To design an architecture that very</p>
    <p>efficiently supports strong cache</p>
    <p>coherency on InfiniBand</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation</p>
    <p>Design and Implementation</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Basic Architecture</p>
    <p>External modules are used  Module communication can use any transport</p>
    <p>Versioning:  Application servers version dynamic data  Version value of data passed to front end with</p>
    <p>every request to back-end  Version maintained by front end along with</p>
    <p>cached value of response</p>
  </div>
  <div class="page">
    <p>Mechanism</p>
    <p>Cache Hit:  Back-end Version Check  If version current, use cache  Invalidate data for failed version check</p>
    <p>Cache Miss  Get data to cache  Initialize local versions</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Front-End Back-End</p>
    <p>Request</p>
    <p>Cache Hit</p>
    <p>Cache Miss</p>
    <p>Response</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>Every server has an associated module that uses IPoIB, SDP or VAPI to communicate</p>
    <p>VAPI:  When a request arrives at proxy, VAPI module is</p>
    <p>contacted.  Module reads latest version of the data from the</p>
    <p>back-end using one-sided RDMA Read operation  If versions do not match, cached value is</p>
    <p>invalidated</p>
  </div>
  <div class="page">
    <p>VAPI Architecture</p>
    <p>Front-End Back-End</p>
    <p>Request</p>
    <p>Cache Hit</p>
    <p>Cache Miss</p>
    <p>Response</p>
    <p>RDMA Read</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Socket-based Implementation:  IPoIB and SDP are used  Back-end version check is done using two-sided</p>
    <p>communication from the module  Requests to read and update are mutually</p>
    <p>excluded at the back-end module to avoid simultaneous readers and writers accessing the same data.</p>
    <p>Minimal changes to existing software</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation</p>
    <p>Design and Implementation</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Data-Center: Performance</p>
    <p>The VAPI module can sustain performance even with heavy load on the back-end servers</p>
  </div>
  <div class="page">
    <p>Data-Center: Performance</p>
    <p>The VAPI module responds faster even with heavy load on the back-end servers</p>
  </div>
  <div class="page">
    <p>Response Time Breakup</p>
    <p>Worst case Module Overhead less than 10% of the response time  Minimal overhead for VAPI based version check even for 200 compute threads</p>
  </div>
  <div class="page">
    <p>Data-Center: Throughput</p>
    <p>The drop in the throughput of VAPI in World cup trace is due to the higher penalty for cache misses under increased load  VAPI implementation does better for real trace too</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>An architecture for supporting Strong Cache Coherence</p>
    <p>External module based design  Freedom in choice of transport  Minimal changes to existing software</p>
    <p>Sockets API inherent limitation  Two-sided communication  High performance Sockets not the solution (SDP)</p>
    <p>Main benefit  One sided nature of RDMA calls</p>
  </div>
  <div class="page">
    <p>Web Pointers</p>
    <p>http://nowlab.cis.ohio-state.edu/</p>
    <p>E-mail: {narravul, balaji, vaidyana, savitha, wuj, panda} @cis.ohio-state.edu</p>
    <p>NBC home page</p>
  </div>
</Presentation>
