<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Managing State for Ajax-Driven Web Components</p>
    <p>John Ousterhout and Eric Stratmann Stanford University</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 2</p>
    <p>Introduction</p>
    <p>Problem: Ajax complicates Web applications</p>
    <p>Solution: reusable Ajax components that hide complexity</p>
    <p>Problem: components require state that spans Web requests</p>
    <p>Security issues Page properties: store state on servers</p>
    <p>Garbage collection issues</p>
    <p>Overall, better to store state on servers</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 3</p>
    <p>Ajax Basics</p>
    <p>Incremental updates to existing Web pages</p>
    <p>Enables richer interactions: Draggable maps Auto-complete Live feeds and updates</p>
    <p>ServerBrowser Initial page fetch</p>
    <p>HTML</p>
    <p>Ajax requests</p>
    <p>HTML, JSON, Javascript ...</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 4</p>
    <p>Ajax Adds Complexity</p>
    <p>Every Ajax request must pass through controller</p>
    <p>Exposes controller to internals of views</p>
    <p>Scales poorly as pages get more complex</p>
    <p>Controller Model</p>
    <p>View View View View</p>
    <p>Render</p>
    <p>Page</p>
    <p>Ajax</p>
    <p>Request</p>
    <p>Manage application</p>
    <p>data</p>
    <p>Render HTML</p>
    <p>presentation</p>
    <p>Top-level control for a collection of related pages</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 5</p>
    <p>Goal: Use Components</p>
    <p>Hide complex Ajax behavior in components</p>
    <p>Fiz: component-based framework</p>
    <p>E.g., tree component manages: HTML tree layout Javascript event handlers Ajax calls for incremental expansion Communication with external data source</p>
    <p>Controller provides: Data source Formatting (icons, etc.)</p>
    <p>new TreeSection(&quot;FS.fileInDir&quot;, &quot;code/Fiz&quot;);</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 6</p>
    <p>Ajax Component with MVC</p>
    <p>Bypass controller during Ajax requests Change URL routing rules</p>
    <p>Controller Model</p>
    <p>View View View View</p>
    <p>Render</p>
    <p>Page</p>
    <p>Ajax</p>
    <p>Request</p>
    <p>Tree Component</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 7</p>
    <p>Problems with State</p>
    <p>Bypass controller during Ajax requests Change URL routing rules</p>
    <p>During Ajax requests, state from original rendering no longer available</p>
    <p>Controller Model</p>
    <p>View View View View</p>
    <p>Render</p>
    <p>Page</p>
    <p>Ajax</p>
    <p>Request</p>
    <p>Tree Component</p>
    <p>State Info: data source, etc.</p>
    <p>???</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 8</p>
    <p>Reminders</p>
    <p>Reminder: collection of name/value pairs</p>
    <p>Embedded in page by server-side component</p>
    <p>Returned selectively in Ajax requests</p>
    <p>Similar to ASP.net ViewState, except granular</p>
    <p>Server Page Load</p>
    <p>Reminders</p>
    <p>Subdirectory names</p>
    <p>(for expansion)</p>
    <p>Overall info: data source, formatting</p>
    <p>Ajax Request</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 9</p>
    <p>Reminder Evaluation</p>
    <p>Allows Ajax encapsulation: state visible only to components</p>
    <p>Additional overhead for transmitting reminders Reminders typically small</p>
    <p>Security implications: Reminders store internal server state; potentially sensitive Must protect integrity (MACs) May need encryption also Granularity enables mix-and-match replays</p>
    <p>Unlikely that developers will recognize security risks</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 10</p>
    <p>Page Properties</p>
    <p>Page properties: name-value pairs specific to a page Stored in session Created during initial page rendering Accessible/modifiable during later Ajax requests</p>
    <p>Page identifier: Stored with page on browser Included in Ajax requests to find appropriate properties</p>
    <p>id</p>
    <p>Pages</p>
    <p>Properties</p>
    <p>Sessions</p>
    <p>id</p>
    <p>Page Load</p>
    <p>Ajax Request</p>
    <p>Page Identifier</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 11</p>
    <p>Page Property Evaluation</p>
    <p>Allows Ajax encapsulation</p>
    <p>No security issues: all state kept on server</p>
    <p>Overhead for saving page properties Must be persisted with session data</p>
    <p>Garbage collection When is it safe to delete old page properties? Can return to old pages at any time (tabs) Potential for &quot;broken pages&quot; (forced refresh)</p>
    <p>How much state must be retained to keep users happy?</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 12</p>
    <p>Trace-Driven Simulation</p>
    <p>Data from 30 Firefox users over 2 months (200,000 page views)</p>
    <p>LRU list length (per-user)</p>
    <p>B ro</p>
    <p>ke n</p>
    <p>p ag</p>
    <p>es /1</p>
    <p>vi ew</p>
    <p>s 100th Percentile User 90th Percentile User 50th Percentile User</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 13</p>
    <p>Per-Tab LRU Lists</p>
    <p>Unfortunately, browsers don't identify tabs/windows</p>
    <p>Would be a useful and simple addition</p>
    <p>LRU list length (per-user)</p>
    <p>B ro</p>
    <p>ke n</p>
    <p>p ag</p>
    <p>es /1</p>
    <p>vi ew</p>
    <p>s</p>
    <p>LRU List Length (per-tab)</p>
    <p>B ro</p>
    <p>ke n</p>
    <p>p ag</p>
    <p>es /1</p>
    <p>vi ew</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 14</p>
    <p>Conclusions</p>
    <p>Managing Web application state is hard State distributed between browser and server Servers don't maintain state between requests Ajax makes things even worse</p>
    <p>Finer-grain interactions Components make things worse</p>
    <p>Need more state to maintain modularity</p>
    <p>Neither reminders nor page properties ideal Reminders: security problems Page properties: garbage collection problems</p>
    <p>Overall, page properties are probably better</p>
    <p>Browsers should provide tab identifiers</p>
  </div>
  <div class="page">
    <p>June 24, 2010 Managing State for Ajax Slide 15</p>
    <p>Related Work</p>
    <p>ViewState in Microsoft ASP.net Monolithic: all state for entire page sent with each request</p>
    <p>Javascript-driven applications (e.g. Gmail): Application exists as Javascript in browser Server provides data only All page state kept in Javascript Security issues simpler/more obvious Overheads for downloading Javascript Business rules must still be enforced on the server</p>
  </div>
</Presentation>
