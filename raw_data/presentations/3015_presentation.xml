<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>JetStream: Cluster-scale Parallelization of Information Flow Queries</p>
    <p>Andrew Quinn, David Devecsery, Peter Chen and Jason Flinn</p>
  </div>
  <div class="page">
    <p>DIFT instruments execution to track causality  Also known as Taint-Tracking</p>
    <p>Dynamic Information Flow Tracking</p>
    <p>Sources (Inputs)</p>
    <p>Sinks (Outputs)</p>
  </div>
  <div class="page">
    <p>o1</p>
    <p>DIFT for Debugging</p>
    <p>o1Server</p>
  </div>
  <div class="page">
    <p>DIFT for Debugging</p>
    <p>o1</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>DIFT for Debugging</p>
    <p>o1</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>DIFT for Debugging</p>
    <p>o1</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>DIFT for Debugging</p>
    <p>o1</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>DIFT  limitations</p>
    <p>Arnold 14 Overheads ~100x</p>
    <p>X-Ray 12 Long queries</p>
    <p>TaintDroid 10 No native code</p>
    <p>Backtracker 03 Coarse-grained causality</p>
  </div>
  <div class="page">
    <p>Parallelize DIFT</p>
  </div>
  <div class="page">
    <p>Parallelizing DIFT is HARD</p>
    <p>A = read() B = read() C = A + B D = X + Y E = C B = 0 Z = A[D] F = E write(F)</p>
    <p>Sequential Dependencies</p>
  </div>
  <div class="page">
    <p>Parallelizing DIFT is HARD</p>
    <p>A = read() B = read() C = A + B D = X + Y E = C B = 0 Z = A[D] F = E write(F)</p>
    <p>Sequential Dependencies</p>
    <p>Speck (ASPLOS 08)</p>
    <p>Parallel Lifeguards (ASPLOS 08)</p>
  </div>
  <div class="page">
    <p>Parallelizing DIFT is HARD</p>
    <p>A = read() B = read() C = A + B D = X + Y E = C B = 0 Z = A[D] F = E write(F)</p>
    <p>Sequential Dependencies</p>
    <p>Speck (ASPLOS 08)</p>
    <p>Parallel Lifeguards (APSLOS 08)</p>
    <p>Embarrassingly Sequential - Ruwase et al.</p>
  </div>
  <div class="page">
    <p>JetStream</p>
    <p>Aggregation  pipeline parallelism</p>
    <p>Local DIFT  epoch parallelism 2x 21x</p>
    <p>Faster than original execution!</p>
  </div>
  <div class="page">
    <p>Design of JetStream  Local DIFT  Aggregation</p>
    <p>Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Debugging Query</p>
    <p>Outputs</p>
    <p>Inputs</p>
  </div>
  <div class="page">
    <p>Local DIFT</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Time slice execution into Epochs</p>
  </div>
  <div class="page">
    <p>Local DIFT</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Leverage Record and Replay to calculate DIFT in parallel</p>
  </div>
  <div class="page">
    <p>Local DIFT</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Track mapping between all intermediate locations</p>
  </div>
  <div class="page">
    <p>Local DIFT</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Mapping is too expensive to calculate:  log operations  defer calculating relationships until aggregation</p>
  </div>
  <div class="page">
    <p>DIFT</p>
    <p>D = B + C C = A[D]</p>
    <p>Fast Forward: replay execution until start of epoch  Analysis: log operations using a graph</p>
    <p>CAFast Forward</p>
    <p>Analysis</p>
    <p>B D</p>
    <p>CA B D</p>
  </div>
  <div class="page">
    <p>DIFT</p>
    <p>D = B + C C = A[D]</p>
    <p>Fast Forward: replay execution until start of epoch  Analysis: log operations using a graph</p>
    <p>CAFast Forward</p>
    <p>Analysis</p>
    <p>B D</p>
    <p>CA B D</p>
  </div>
  <div class="page">
    <p>DIFT</p>
    <p>D = B + C C = A[D]</p>
    <p>Fast Forward: replay execution until start of epoch  Analysis: log operations using a graph</p>
    <p>CAFast Forward</p>
    <p>Analysis</p>
    <p>B D</p>
    <p>CA B D</p>
  </div>
  <div class="page">
    <p>Local DIFT output</p>
    <p>Outputs</p>
    <p>Inputs</p>
  </div>
  <div class="page">
    <p>JetStream Local DIFT  epoch parallelism</p>
    <p>Aggregation  pipeline parallelism</p>
  </div>
  <div class="page">
    <p>Aggregation</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Calculate paths between source and sinks  Many nodes are not on path between source and sink  Use sequential information to prune work</p>
  </div>
  <div class="page">
    <p>Forward Pass</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Pass locations which are derived from a source</p>
    <p>derived locations</p>
  </div>
  <div class="page">
    <p>Forward Pass</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>Pass locations which are derived from a source</p>
    <p>derived locations</p>
  </div>
  <div class="page">
    <p>Backward Pass</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>used locations</p>
    <p>Pass locations which are used by a sink</p>
  </div>
  <div class="page">
    <p>Backward Pass</p>
    <p>Outputs</p>
    <p>Inputs</p>
    <p>used locations</p>
    <p>Pass locations which are used by a sink</p>
  </div>
  <div class="page">
    <p>In the paper:  Insights about why nave approaches fail  Partitioning  challenging to predict the local DIFT time  Pre-pruning  garbage collection of the graph</p>
    <p>JetStream</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>CloudLab cluster of 32 machines, 1128 cores</p>
    <p>Experimental Setup</p>
    <p>Benchmark Sequential DIFT Time (Minutes)</p>
    <p>Sources (millions)</p>
    <p>Sinks (millions)</p>
    <p>Ghostscript 1.3 3 0.2 Gzip 1.8 64 488 Evince 3.9 10 104 Nginx 3.3 10 35 Mongodb 5.2 9 117 OpenOffice 7.0 10 32 Firefox 30.6 0.9 2</p>
  </div>
  <div class="page">
    <p>Benchmark Sequential DIFT Time (Minutes)</p>
    <p>Sources (millions)</p>
    <p>Sinks (millions)</p>
    <p>Ghostscript 1.3 3 0.2 Gzip 1.8 64 488 Evince 3.9 10 104 Nginx 3.3 10 35 Mongodb 5.2 9 117 OpenOffice 7.0 10 32 Firefox 30.6 0.9 2</p>
    <p>CloudLab cluster of 32 machines, 1128 cores</p>
    <p>Experimental Setup</p>
    <p>sources: Cookies sinks: suspicious connections</p>
    <p>sources: home directory sinks: all</p>
  </div>
  <div class="page">
    <p>Unexpected analysis:  prioritize low record overhead</p>
    <p>Expected analysis  periodic checkpoint  gather partitioning stats</p>
    <p>Two Different Scenarios</p>
  </div>
  <div class="page">
    <p>N or m al iz ed</p>
    <p>S pe</p>
    <p>du p</p>
    <p>Number of Cores Gzip Ghostscript Evince Mongodb Nginx OpenOffice Firefox Ideal</p>
    <p>mean: 13x</p>
    <p>Scalability of Unexpected Analysis</p>
  </div>
  <div class="page">
    <p>N or m al iz ed</p>
    <p>S pe</p>
    <p>ed up</p>
    <p>Number of Cores Gzip Ghostscript Evince Mongodb Nginx OpenOffice Firefox Ideal</p>
    <p>mean: 21x</p>
    <p>Scalability of Expected Analysis</p>
  </div>
  <div class="page">
    <p>JetStream</p>
    <p>Aggregation  pipeline parallelism</p>
    <p>Local DIFT  epoch parallelism 2x 21x</p>
    <p>Faster than original execution!</p>
  </div>
  <div class="page">
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Epoch Parallelism  Wallace and Hazelwood, SuperPin: Parallelizing</p>
    <p>Dynamic Instrumentation for Real-Time Performance</p>
    <p>Local DIFT  Ruwase et al. Parallelizing Dynamic Information Flow</p>
    <p>Tracking  Nightengale et al. Parallelizing security checks on</p>
    <p>commodity hardware</p>
  </div>
  <div class="page">
    <p>Benchmarks</p>
    <p>Benchmark Replay Time (seconds)</p>
    <p>JetStream Time (seconds)</p>
    <p>Ghostscript 1.0 5.6 Gzip 3.0 2.3 Evince 13.5 19.5 Nginx 4.8 5.6 Mongodb 22.8 13.8 OpenOffice 7.6 25.0 Firefox 67.4 94.4</p>
  </div>
  <div class="page">
    <p>Aggregation Results</p>
    <p>Backwards Pass (seconds)</p>
    <p>Both Passes Time (seconds)</p>
  </div>
  <div class="page">
    <p>Fast Forward Instrumentation Analysis Pre-prune Forward Pass Prune Backward Pass</p>
    <p>Gzip</p>
    <p>Gzip First Query</p>
    <p>Gzip Second Query</p>
  </div>
  <div class="page">
    <p>Fast Forward Instrumentation Analysis Pre-prune Forward Pass Prune Backward Pass</p>
    <p>OpenOffice</p>
    <p>OpenOffice First Query</p>
    <p>OpenOffice Second Query</p>
  </div>
</Presentation>
