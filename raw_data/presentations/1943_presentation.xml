<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Cloud Gaming Framework for Dynamic Graphical Rendering Towards Achieving Distributed Game Engines</p>
    <p>James Bulman, Peter Garraghan</p>
    <p>Evolving Distributed Systems Lab</p>
    <p>Lancaster University, UK</p>
  </div>
  <div class="page">
    <p>Game Instance</p>
    <p>Video Games</p>
    <p>Worlds largest entertainment sector  $143.5 billion in 2020</p>
    <p>Game engines use tightly-coupled subsystems  Graphics, physics, AI, lighting, audio, etc</p>
    <p>Synchronize within the game loop</p>
    <p>Ambitious creativity -&gt; Quality of Experience  Higher computation &amp; hardware demands</p>
    <p>Game consoles, GPUs, VR, etc.</p>
    <p>Update game state</p>
    <p>Render game state</p>
    <p>Handle Input</p>
    <p>Swap Buffers</p>
    <p>Game Code</p>
    <p>Graphical API</p>
    <p>Operating System</p>
    <p>Hardware</p>
  </div>
  <div class="page">
    <p>Cloud Gaming</p>
    <p>Cloud gaming exploits cloud resources providing Games as a Service  Google Stadia, Microsoft Project xCloud</p>
    <p>Game executed in cloud VM with minor* modifications</p>
    <p>Benefits  Instant access to games without downloads</p>
    <p>Powerful hardware -&gt; higher quality experiences</p>
    <p>Cross-device access</p>
    <p>Cloud VM</p>
    <p>Video by Jordan Mechner, licensed under the Creative Commons Attribution-Share Alike 4.0 International</p>
  </div>
  <div class="page">
    <p>Research Problem</p>
    <p>Reliance on Cloud performance &amp; dependability  VM interference or failure</p>
    <p>Network volatility</p>
    <p>Inconsistent framerate, total service loss</p>
    <p>Monolithic game engine architectures  Tightly-coupled subsystems</p>
    <p>Limited portability (OS, graphics API)</p>
    <p>Game per VM: Equiv. game experience + latency</p>
    <p>Allow cloud-client execution</p>
    <p>Distributed game subsystems</p>
    <p>Client device</p>
    <p>Input processor</p>
    <p>Video player</p>
    <p>Input Video</p>
    <p>Cloud VM</p>
    <p>Input processor</p>
    <p>Update game state</p>
    <p>Render game state</p>
    <p>Video encoding</p>
  </div>
  <div class="page">
    <p>Objectives</p>
    <p>Features  Loose-coupling graphical renderer and game engine</p>
    <p>Dynamic cloud-client frame interlacing</p>
    <p>Graphical API hot-swapping</p>
    <p>Advantages  Platform and graphics API independence</p>
    <p>Tolerate against Cloud failure and network loss</p>
    <p>First distributed game engine designed for the cloud</p>
    <p>A Cloud Gaming Framework for Distributed Game Engines</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>CloudRend  Leverages generic graphical commands</p>
    <p>Converts these commands to API specific calls</p>
    <p>Cloud-client rendering</p>
    <p>Supports Vulkan, OpenGL</p>
    <p>Cloud VM CloudRend</p>
    <p>Mitigation</p>
    <p>API Hotswap</p>
    <p>Frame Interlacing</p>
    <p>Game Instance Manager</p>
    <p>Graphic Converter</p>
    <p>QoS Monitor</p>
    <p>Renderer Selector</p>
    <p>Command Buffer</p>
    <p>CloudRend CloudRend</p>
    <p>OpenGL Vulkan</p>
  </div>
  <div class="page">
    <p>Mitigation</p>
    <p>Hotswap Run-time switching of Graphical APIs</p>
    <p>(Vulkan, OpenGL)</p>
    <p>Frame Interlacing Collaborative cloud-client rendering</p>
    <p>(based on network)</p>
    <p>Cloud VM</p>
    <p>OpenGL</p>
    <p>Vulkan</p>
    <p>Cloud VM</p>
    <p>OpenGL</p>
    <p>Cloud VM</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Game Loop</p>
    <p>Screen</p>
    <p>Local Renderer Instance</p>
    <p>OpenGL</p>
    <p>CloudRend Instance</p>
    <p>#2</p>
    <p>OpenGL</p>
    <p>Encoder</p>
    <p>CloudRend Instance</p>
    <p>#1</p>
    <p>Vulkan</p>
    <p>Encoder</p>
    <p>CloudRend Interface</p>
    <p>Decoder</p>
    <p>Client Cloud</p>
  </div>
  <div class="page">
    <p>CloudRend</p>
    <p>Client Cloud</p>
    <p>Screen</p>
    <p>Game Loop CloudRend Interface</p>
    <p>RenderModel()</p>
    <p>RenderLightSet()</p>
    <p>EndFrame() Transmit</p>
    <p>Command Buffer</p>
    <p>Decode Frame</p>
    <p>CloudRend Instance</p>
    <p>Command Processor</p>
    <p>RenderModel()</p>
    <p>RenderLightSet()</p>
    <p>RenderModel Vulkan</p>
    <p>vkCmdBindVertexBuffers()</p>
    <p>vkCmdPushConstants()</p>
    <p>vkCmdBindIndexBuffers()</p>
    <p>vkCmdDrawIndexed()</p>
    <p>RenderLightSet Vulkan</p>
    <p>vkCmdPushConstants() Encode Frame</p>
    <p>Read Framebuffer</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>System</p>
    <p>Cloud: i7-7700HQ, GTX 1050 GPU, Vulkan/OpenGL</p>
    <p>Client: Raspberry Pi 4, Quad Core Cortex-A72, OpenGL ES 3.0</p>
    <p>Variable latency wireless network (16  100 ms)</p>
    <p>Experiments</p>
    <p>Cloud-client frame interlacing (100-0%  0%-100%)</p>
    <p>Graphical API hotswapping per frame</p>
    <p>10,000 frame per run, frames per second (FPS), network</p>
    <p>Low: 500 vertices</p>
    <p>High: 200k vertices</p>
  </div>
  <div class="page">
    <p>Initial Results</p>
    <p>Higher consistent framerates when interlacing</p>
    <p>Low network utilization ~4 Mbps</p>
    <p>Local 25% Cloud</p>
    <p>Cloud</p>
    <p>F ra</p>
    <p>m e</p>
    <p>ra te</p>
    <p>( F</p>
    <p>P S</p>
    <p>)</p>
    <p>Low Vertices Scene</p>
    <p>High Vertices Scene Trade-off render complexity vs network latency</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Cloud gaming framework via distributed game engines  Successful game distribution across cloud and client devices</p>
    <p>33% performance gains, cloud latency vs. client computation</p>
    <p>Vision  Create fully-fledged cloud gaming framework and distributed game engines  Cloud gaming in the home</p>
    <p>Future Work  Network-aware + power-aware frame interlacing</p>
    <p>System at scale  shared subsystems</p>
    <p>More decoupled subsystems  AI, collision detection, physics</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>Contact  James Bulman - j.bulman@lancaster.ac.uk</p>
    <p>Peter Garraghan - p.garraghan@lancaster.ac.uk</p>
    <p>Evolving Distributed Systems Lab</p>
    <p>School of Computing &amp; Communications</p>
    <p>Lancaster University, UK</p>
  </div>
</Presentation>
