<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FUZZIFICATION: Anti-Fuzzing Techniques</p>
    <p>Jinho Jung, Hong Hu, David Solodukhin, Daniel Pagan,</p>
    <p>Kyu Hyung Lee*, Taesoo Kim</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Fuzzing Discovers Many Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Fuzzing Discovers Many Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Testers Find Bugs with Fuzzing</p>
    <p>Source</p>
    <p>Compilation</p>
    <p>Released</p>
    <p>binary</p>
    <p>Normal users</p>
    <p>Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Compilation Distribution Fuzzing</p>
  </div>
  <div class="page">
    <p>But Attackers Also Find Bugs</p>
    <p>Source</p>
    <p>Compilation</p>
    <p>Released</p>
    <p>binary</p>
    <p>Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Attackers</p>
    <p>Normal users</p>
  </div>
  <div class="page">
    <p>Our work: Make the Fuzzing Only Effective to the Testers</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Adversaries try to find vulnerabilities from fuzzing</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Adversaries only have a copy of fortified binary</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Adversaries know Fuzzification and try to nullify</p>
  </div>
  <div class="page">
    <p>Research Goals</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
  </div>
  <div class="page">
    <p>Research Goals</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Hinder Fuzzing Reduce the number of detected bugs</p>
  </div>
  <div class="page">
    <p>Research Goals</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Generic Affect most of the fuzzers</p>
    <p>AFL</p>
    <p>HonggFuzz</p>
    <p>VUzzer</p>
    <p>QSym</p>
  </div>
  <div class="page">
    <p>Research Goals</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Low overhead to normal user</p>
    <p>High overhead to attackers Overhead</p>
  </div>
  <div class="page">
    <p>Research Goals</p>
    <p>Source</p>
    <p>Fuzzification</p>
    <p>Compilation</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Binary Testers</p>
    <p>Detected</p>
    <p>bugs</p>
    <p>Attackers</p>
    <p>Compilation Distribution Fuzzing</p>
    <p>Normal users</p>
    <p>Fortified</p>
    <p>binary</p>
    <p>Resilient to the adversarial analysisResiliency</p>
  </div>
  <div class="page">
    <p>Why Existing Methods Are Not Applicable?</p>
    <p>Method Generic to</p>
    <p>most fuzzers</p>
    <p>Low</p>
    <p>overhead</p>
    <p>Resilient to</p>
    <p>adversary</p>
    <p>Packing or obfuscation O X O</p>
  </div>
  <div class="page">
    <p>Why Existing Methods Are Not Applicable?</p>
    <p>Method Generic to</p>
    <p>most fuzzers</p>
    <p>Low</p>
    <p>overhead</p>
    <p>Resilient to</p>
    <p>adversary</p>
    <p>Packing or obfuscation O X O</p>
    <p>Bug injection O O X</p>
  </div>
  <div class="page">
    <p>Why Existing Methods Are Not Applicable?</p>
    <p>Method Generic to</p>
    <p>most fuzzers</p>
    <p>Low</p>
    <p>overhead</p>
    <p>Resilient to</p>
    <p>adversary</p>
    <p>Packing or obfuscation O X O</p>
    <p>Bug injection O O X</p>
    <p>Fuzzer detection X O X</p>
  </div>
  <div class="page">
    <p>Why Existing Methods Are Not Applicable?</p>
    <p>Method Generic to</p>
    <p>most fuzzers</p>
    <p>Low</p>
    <p>overhead</p>
    <p>Resilient to</p>
    <p>adversary</p>
    <p>Packing or obfuscation O X O</p>
    <p>Bug injection O O X</p>
    <p>Fuzzer detection X O X</p>
    <p>Emulator detection X O X</p>
  </div>
  <div class="page">
    <p>Why Existing Methods Are Not Applicable?</p>
    <p>Method Generic to</p>
    <p>most fuzzers</p>
    <p>Low</p>
    <p>overhead</p>
    <p>Resilient to</p>
    <p>adversary</p>
    <p>Packing or obfuscation O X O</p>
    <p>Bug injection O O X</p>
    <p>Fuzzer detection X O X</p>
    <p>Emulator detection X O X</p>
    <p>Fuzzification O O O</p>
  </div>
  <div class="page">
    <p>Fuzzification Hinders Advanced Features</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach</p>
    <p>H/W</p>
    <p>feature</p>
  </div>
  <div class="page">
    <p>Fuzzification Hinders Advanced Features</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>H/W</p>
    <p>feature</p>
    <p>SpeedBump</p>
  </div>
  <div class="page">
    <p>Fuzzification Hinders Advanced Features</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Coverage</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach</p>
    <p>H/W</p>
    <p>feature</p>
  </div>
  <div class="page">
    <p>Fuzzification Hinders Advanced Features</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Coverage</p>
    <p>H/W</p>
    <p>feature</p>
    <p>BranchTrap</p>
  </div>
  <div class="page">
    <p>Fuzzification Hinders Advanced Features</p>
    <p>Symbolic</p>
    <p>execution</p>
    <p>Dynamic</p>
    <p>taint</p>
    <p>analysis</p>
    <p>Queue</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Coverage</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach</p>
    <p>H/W</p>
    <p>feature</p>
  </div>
  <div class="page">
    <p>Fuzzification Hinders Advanced Features</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach Symbolic execution</p>
    <p>Dynamic</p>
    <p>taint</p>
    <p>analysis</p>
    <p>Queue</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Coverage</p>
    <p>H/W</p>
    <p>feature Anti-Hybrid</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>Basic block</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>Basic block</p>
    <p>Rarely visited path</p>
    <p>Frequently visited path</p>
    <p>Identify frequently and rarely visited paths</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>Basic block</p>
    <p>Rarely visited path</p>
    <p>Frequently visited path</p>
    <p>Identify frequently and rarely visited paths</p>
    <p>Inject delays from the most rarely visited edges</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>Basic block</p>
    <p>Rarely visited path</p>
    <p>Frequently visited path</p>
    <p>Why this is effective?</p>
    <p>User: follows common paths</p>
    <p>Attacker: searches for new paths</p>
    <p>Impact of delay is more significant to attackers</p>
  </div>
  <div class="page">
    <p>SpeedBump: How to delay?</p>
    <p>Strawman: using sleep()</p>
    <p>trivially removed by adversary</p>
  </div>
  <div class="page">
    <p>SpeedBump: How to delay?</p>
    <p>Strawman: using sleep()</p>
    <p>trivially removed by adversary</p>
    <p>Counter to advanced adversary</p>
    <p>Use randomly generated code  avoid static-pattern</p>
  </div>
  <div class="page">
    <p>SpeedBump: How to delay?</p>
    <p>Strawman: using sleep()</p>
    <p>trivially removed by adversary</p>
    <p>Counter to advanced adversary</p>
    <p>Use randomly generated code  avoid static-pattern</p>
    <p>Impose control-flow and data-flow dependency  avoid automated analysis</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>int rarely_executed_code () {</p>
    <p>return 0; }</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>int rarely_executed_code () {</p>
    <p>return 0; }</p>
    <p>//define global variables int global1 = 1; int global2 = 2;</p>
    <p>int rarely_executed_code () {</p>
    <p>//inject delay function int pass = 20; global2 = func(pass); return 0;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>SpeedBump: Selective Delay Injection</p>
    <p>int func(int p6) { int local1[10];</p>
    <p>// affect global1 variable global1 = 45; int local2 = global1; for (int i = 0; i &lt; 1000; i++) // affect local1 variable local1[i] = p6 + local2 + i;</p>
    <p>// affect global2 variable return local1[5];</p>
    <p>}</p>
    <p>int rarely_executed_code () {</p>
    <p>return 0; }</p>
    <p>//define global variables int global1 = 1; int global2 = 2;</p>
    <p>int rarely_executed_code () {</p>
    <p>//inject delay function int pass = 20; global2 = func(pass); return 0;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>BranchTrap Hinders Coverage Management</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach Symbolic execution</p>
    <p>Dynamic</p>
    <p>taint</p>
    <p>analysis</p>
    <p>Queue</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Coverage</p>
    <p>H/W</p>
    <p>feature</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: Fabricates Input-sensitive Paths</p>
    <p>AAAA</p>
    <p>Coverage #1</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: Fabricates Input-sensitive Paths</p>
    <p>AAAA AAAB</p>
    <p>Coverage #1 Coverage #2</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: Fabricates Input-sensitive Paths</p>
    <p>AAAA AAAB</p>
    <p>Coverage #1 Coverage #2</p>
    <p>AAAA</p>
    <p>Coverage #1</p>
    <p>BranchTrap</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: Fabricates Input-sensitive Paths</p>
    <p>AAAA AAAB</p>
    <p>Coverage #1 Coverage #2</p>
    <p>AAAA</p>
    <p>Coverage #1</p>
    <p>AAAB</p>
    <p>Coverage #2</p>
    <p>BranchTrap</p>
  </div>
  <div class="page">
    <p>Func1 (arg1, arg2)</p>
    <p>call Func1</p>
    <p>next inst</p>
    <p>Caller</p>
    <p>Original</p>
    <p>epilogue</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>BranchTrap#1: ROP-based Fake Paths Generation</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: ROP-based Fake Paths Generation</p>
    <p>Code</p>
    <p>snippet 1</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Code</p>
    <p>snippet 2</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>call Func1</p>
    <p>next inst</p>
    <p>Original</p>
    <p>epilogue</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret Code</p>
    <p>snippet N</p>
    <p>Func1 (arg1, arg2)</p>
    <p>Caller</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: ROP-based Fake Paths Generation</p>
    <p>index = arg1 ^ arg2</p>
    <p>Code</p>
    <p>snippet 1</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Code</p>
    <p>snippet 2</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Code</p>
    <p>snippet N</p>
    <p>call Func1</p>
    <p>next inst</p>
    <p>Original</p>
    <p>epilogue</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Func1 (arg1, arg2)</p>
    <p>Caller</p>
  </div>
  <div class="page">
    <p>BranchTrap#1: ROP-based Fake Paths Generation</p>
    <p>index = arg1 ^ arg2</p>
    <p>Code</p>
    <p>snippet 1</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Code</p>
    <p>snippet 2</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>jmp table [index] call Func1</p>
    <p>next inst</p>
    <p>Original</p>
    <p>epilogue</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret Code</p>
    <p>snippet N</p>
    <p>Func1 (arg1, arg2)</p>
    <p>Caller</p>
  </div>
  <div class="page">
    <p>Code</p>
    <p>snippet 1</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Code</p>
    <p>snippet 2</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Code</p>
    <p>snippet N</p>
    <p>BranchTrap#1: ROP-based Fake Paths Generation</p>
    <p>index = arg1 ^ arg2</p>
    <p>jmp table [index] call Func1</p>
    <p>next inst</p>
    <p>Original</p>
    <p>epilogue</p>
    <p>pop rbp</p>
    <p>pop r15</p>
    <p>ret</p>
    <p>Func1 (arg1, arg2)</p>
    <p>Caller</p>
  </div>
  <div class="page">
    <p>BranchTrap#2: Saturate Feedback State</p>
    <p>One-time visit makes effect</p>
    <p>BranchTrap:</p>
    <p>Saturates bitmap data</p>
    <p>Prevents coverage recording</p>
  </div>
  <div class="page">
    <p>AntiHybrid Hinders Hybrid Fuzzing</p>
    <p>Fast execution</p>
    <p>Coverage-guidance</p>
    <p>Hybrid approach Symbolic execution</p>
    <p>Dynamic</p>
    <p>taint</p>
    <p>analysis</p>
    <p>Queue</p>
    <p>Parallel execution</p>
    <p>Fork</p>
    <p>server</p>
    <p>Coverage</p>
    <p>H/W</p>
    <p>feature</p>
  </div>
  <div class="page">
    <p>Challenge of Hybrid Fuzzing</p>
    <p>Dynamic taint analysis</p>
    <p>Expensive implicit flow</p>
    <p>Transform explicit data-flow  implicit data-flow</p>
  </div>
  <div class="page">
    <p>Challenge of Hybrid Fuzzing</p>
    <p>Dynamic taint analysis</p>
    <p>Expensive implicit flow</p>
    <p>Symbolic execution</p>
    <p>Path explosion</p>
    <p>Transform explicit data-flow  implicit data-flow</p>
    <p>Introduce an arbitrary path explosions</p>
  </div>
  <div class="page">
    <p>AntiHybrid Avoids Dynamic Taint Analysis</p>
    <p>Transform explicit data-flow to implicit data-flow</p>
    <p>char input = a;</p>
    <p>char anti_dta; if (input == 97)</p>
    <p>anti_dta = a;</p>
    <p>if (!strcmp(anti_dta, a)) {  }</p>
    <p>char input = a;</p>
    <p>if (!strcmp(input, a)) {  }</p>
    <p>Unable to</p>
    <p>taint</p>
    <p>input</p>
    <p>anti_dta</p>
  </div>
  <div class="page">
    <p>AntiHybrid Incurs Path Explosions</p>
    <p>Inject hash calculations into branches</p>
    <p>if(a == 30) {  }</p>
    <p>if(Hash(a) == 0x300df11) {  }</p>
    <p>Path Explosion</p>
  </div>
  <div class="page">
    <p>Fuzzification Work-flow</p>
    <p>Profile</p>
    <p>Binary</p>
    <p>Source</p>
    <p>RunValid/invlid inputs</p>
  </div>
  <div class="page">
    <p>Fuzzification Work-flow</p>
    <p>Profile</p>
    <p>Binary</p>
    <p>Source</p>
    <p>Inject component</p>
    <p>LLVM</p>
    <p>IR</p>
    <p>SpeedBump</p>
    <p>BranchTrap</p>
    <p>AntiHybrid</p>
    <p>RunValid/invlid inputs</p>
  </div>
  <div class="page">
    <p>Fuzzification Work-flow</p>
    <p>Profile</p>
    <p>Binary</p>
    <p>Source</p>
    <p>Inject component</p>
    <p>LLVM</p>
    <p>IR</p>
    <p>SpeedBump</p>
    <p>BranchTrap</p>
    <p>AntiHybrid Test run</p>
    <p>RunValid/invlid inputs</p>
  </div>
  <div class="page">
    <p>Fuzzification Work-flow</p>
    <p>Profile</p>
    <p>Binary</p>
    <p>Source</p>
    <p>Inject component</p>
    <p>LLVM</p>
    <p>IR</p>
    <p>SpeedBump</p>
    <p>BranchTrap</p>
    <p>AntiHybrid Test run Release</p>
    <p>fortified</p>
    <p>binary</p>
    <p>RunValid/invlid inputs</p>
  </div>
  <div class="page">
    <p>Evaluation Summary</p>
    <p>Implementation</p>
    <p>6,599 lines of Python and 758 lines of C++</p>
    <p>Evaluation questions:</p>
    <p>Effective in Reducing discovered paths and bugs?</p>
    <p>Effective on Various fuzzers?</p>
    <p>Impose Low overhead to the normal user?</p>
  </div>
  <div class="page">
    <p>Reduced the Discovered Coverage By 71%</p>
    <p>BranchTrap</p>
    <p>No Fuzzification</p>
    <p>All Fuzzifications</p>
    <p>AntiHybrid</p>
    <p>SpeedBump</p>
    <p>D is</p>
    <p>c o v e re</p>
    <p>d P</p>
    <p>a th</p>
    <p>s</p>
    <p>* Fuzzing result on AFL-QEMU</p>
    <p>objdump (binutils)</p>
  </div>
  <div class="page">
    <p>Reduced the Discovered Coverage By 71%</p>
    <p>Other binaries</p>
  </div>
  <div class="page">
    <p>Fuzzification is Effective on Various Fuzzers</p>
    <p>Fuzzer Result</p>
    <p>AFL (QEMU) 74%</p>
    <p>HonggFuzz (PT) 61%</p>
    <p>QSym (AFL-QEMU) 80%</p>
    <p>Average 71%</p>
    <p>Reduced code coverage</p>
  </div>
  <div class="page">
    <p>Reduced the Discovered Bugs</p>
    <p>Fuzzer Result</p>
    <p>AFL (QEMU) 88%</p>
    <p>HonggFuzz (PT) 98%</p>
    <p>QSym (AFL-QEMU) 94%</p>
    <p>Average 93%</p>
    <p>Fuzzer Result</p>
    <p>Vuzzer 56%</p>
    <p>QSym (AFL-QEMU) 78%</p>
    <p>Average 67%</p>
    <p>binutils v2.3.0 LAVA-M dataset</p>
  </div>
  <div class="page">
    <p>File size &amp; CPU Overheads</p>
    <p>Overhead Result</p>
    <p>File Size 1.4MB (62.1%)</p>
    <p>CPU Overhead 3.7%</p>
    <p>* Both overheads are configurable</p>
    <p>binutils v2.3.0</p>
    <p>Overhead Result</p>
    <p>File Size 1.3MB (5.4%)</p>
    <p>CPU Overhead 0.73%</p>
    <p>Real-world applications (e.g., GUI)</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Best-effort protections against adversarial analysis</p>
    <p>Complementary to other defense techniques</p>
    <p>Not hiding all vulnerabilities</p>
    <p>But introducing significant cost on attacker</p>
  </div>
  <div class="page">
    <p>Comparison: Fuzzification vs. AntiFuzz</p>
    <p>Component Fuzzification AntiFuzz</p>
    <p>Delay execution  (+ cold path)</p>
    <p>Fake coverage  (randomized return)  (fake code)</p>
    <p>Saturate coverage</p>
    <p>Prevent crash</p>
    <p>Anti-hybrid  (+ anti-DTA)</p>
    <p>Countermeasures   64</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>SpeedBump: Inject delays and only affects attackers</p>
    <p>BranchTrap: Insert input-sensitive branches</p>
    <p>AntiHybrid: Hinder hybrid fuzzing techniques</p>
    <p>Make the fuzzing only effective to the testers</p>
    <p>https://github.com/sslab-gatech/fuzzification</p>
  </div>
</Presentation>
