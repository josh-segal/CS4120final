<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Software Engagement with Sleeping CPUs</p>
    <p>Qi Zhu, Meng Zhu, Bo Wu, Xipeng Shen, Kai Shen, and Zhiying Wang North Carolina State University, USA</p>
    <p>University of Rochester, USA Colorado School of Mines, USA</p>
    <p>National University of Defense Technology, China</p>
    <p>HotOS XV1</p>
  </div>
  <div class="page">
    <p>Energy Proportionality and CPU Sleeps</p>
    <p>HotOS XV2</p>
    <p>Energy proportionality [Barroso and Hlzle 2007]  Energy is consumed only when performing work.</p>
    <p>CPU hardware sleeps, idle states, or C states  An idle CPU can save power by halting cycles, shutting off clocks, flushing</p>
    <p>and powering down caches, and even removing core voltage.  On a dual-socket (24-cpu) Intel Haswell machine, active idle of all CPUs</p>
    <p>consume 91W (processor+DRAM) while C6 sleeps consume just 14W.</p>
    <p>The energy benefit is recognized [Le Sueur and Heiser 2011] and CPU sleeps are routinely utilized in existing systems  But profound system implications in todays context (emerging devices and</p>
    <p>workloads) require strong, principled software management.</p>
  </div>
  <div class="page">
    <p>Sleep Exits Are Not Instantaneous</p>
    <p>HotOS XV3</p>
    <p>Deep CPU sleeps incur delays to reactivate  Activating voltage/clocks, resuming cycles, loading flushed cachelines,   100usecs or more on modern multicore processors</p>
    <p>May add substantial (possibly multi-fold) delays to  operations on emerging fast devices like SSDs and integrated GPUs  fine-grained network services (e.g., in-memory hashtable) in a data center</p>
    <p>On-demand (interrupt-driven) resource activation is inadequate for high responsiveness.</p>
  </div>
  <div class="page">
    <p>Energy Disproportionality on Multicores</p>
    <p>HotOS XV4</p>
    <p>Due to multicore resource sharing, power is not proportional to the number of active (non-sleeping) CPUs.</p>
    <p>Energy efficiency motivates new resource scheduling to shape desirable sleep patterns.</p>
  </div>
  <div class="page">
    <p>Anticipatory CPU Wakeups</p>
    <p>HotOS XV5</p>
    <p>For high responsiveness, a sleeping CPU should wake up in advance so that it is immediately ready for work when needed.</p>
    <p>Main challenge: anticipate the timing of future work.  When blocked on SSD I/O, future work is anticipated at the I/O completion</p>
    <p>time (modeled linearly on the I/O size)  Anticipation in system  Computation time on Turing-complete GPUs is hard to model, but many</p>
    <p>apps (iterative solvers, ML refinements) iterate over similar kernels many times and allow history-based prediction  Anticipation by application</p>
    <p>On a network server, anticipation of future client requests may require client notification in advance  Anticipation over network</p>
    <p>Related to anticipatory I/O [Iyer and Druschel 2001]  Aiming for a binary decision, rather than anticipating the future event timing</p>
  </div>
  <div class="page">
    <p>A Simple Prototype</p>
    <p>HotOS XV6</p>
    <p>We augment the block layer  predict SSD I/O time using a linear model (on I/O size)  request anticipatory CPU wakeup for synchronous I/O operation  fully transparent to applications</p>
    <p>Activate all CPUs necessary for work  CPU thatll run the blocked application process  CPU thatll handle the I/O interrupt</p>
  </div>
  <div class="page">
    <p>Preliminary Evaluation</p>
    <p>HotOS XV7</p>
    <p>24-CPU Intel Haswell machine, Samsung 850 PRO SSD</p>
  </div>
  <div class="page">
    <p>EnergyConserving Sleep Shaping</p>
    <p>HotOS XV8</p>
    <p>Saving most power on multicore by simultaneous CPU sleeps of  an entire multicore socket  the high-power cluster on a heterogamous smartphone SOC</p>
    <p>Motivate energy-conserving sleep shaping  Non-work-conserving CPU scheduling</p>
    <p>Exploit quality-of-service slacks for opportunities to delay work  Not all work in a smartphone system critically affects user interaction.  A server system may only be concerned about responses beyond a certain</p>
    <p>threshold.</p>
  </div>
  <div class="page">
    <p>Server Staged Bursts</p>
    <p>HotOS XV9</p>
    <p>A server machine alternates between two phases  a staging phase that buffers requests without running them, and  a burst phase that runs buffered requests in high parallelism.</p>
    <p>The staging proxy best runs on a low-power companion processor, or on a few designated proxies in a data center.</p>
    <p>A simple case evaluation:  Apache Solr search engine, searching Wikipedia pages,100 reqs/sec workload  reduce power from 68 Watts to 53 Watts, while keeping peak responses</p>
    <p>below 500 msecs</p>
  </div>
  <div class="page">
    <p>EnergyConserving Sleep Shaping</p>
    <p>HotOS XV10</p>
    <p>Main challenge:  When can work be delayed or slowed without hurting quality-of-service?</p>
    <p>In a smartphone system  Quality-of-service is defined by responsiveness to a user interaction (from</p>
    <p>touch screen input to screen rendering of results).  Identify causal dependencies and critical path in a user interaction through</p>
    <p>sync/communication events (pipes, sockets, signals, Android binders, ).  During an I/O operation on the critical path, concurrent CPU work may be</p>
    <p>delayed or slowed without hurting user response.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>HotOS XV11</p>
    <p>Energy proportionality has brought us aggressive CPU sleeps, but  sleep exit time is causing significant latency increase on emerging fast devices</p>
    <p>(SSDs, integrated accelerators) and fine-grained network services  on multicores, power is disproportionate to the number of active (non</p>
    <p>sleeping) CPUs</p>
    <p>Advocate new CPU resource management approaches  anticipatory wakeups to minimize latency impact  non-work-conserving sleep shaping to maximize energy efficiency</p>
    <p>Concept (particularly anticipatory wakeups) is applicable to other dynamic-power resources (memory, storage, )</p>
  </div>
</Presentation>
