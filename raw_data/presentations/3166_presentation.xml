<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SpanDex: Secure Password Tracking for Android</p>
    <p>Landon P. Cox, Peter Gilbert, Geoffrey Lawler, Valen3n Pistol, Ali Razeen, Sai Cheemalapa3,</p>
    <p>and Bi Wu</p>
    <p>Duke University</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>me@gmail.com</p>
  </div>
  <div class="page">
    <p>imo.com mint.com Real Sync FriendCaster</p>
    <p>Yahoo! BoA DropBox Facebook</p>
  </div>
  <div class="page">
    <p>Where do your passwords go?</p>
  </div>
  <div class="page">
    <p>Phishing apps</p>
    <p>Malware Genome Project (NCSU) http://www.malgenomeproject.org!</p>
    <p>Sends passwords to hCp://erofolio.no-ip.biz/login.php</p>
    <p>Fake NetFlix app From Malware Genome Project</p>
  </div>
  <div class="page">
    <p>Phishing apps</p>
    <p>https://blog.malwarebytes.org/mobile-2/2013/10/trojan-looks-to-wrob-android-users/! http://securelist.com/blog/research/57301/the-android-trojan-svpeng-now-capable-of-mobile-phishing/!</p>
    <p>Wroba (Korean malware) Svpeng (Russian malware)</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>Lets use taint tracking!</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>General approach</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>General approach</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>General approach</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>General approach</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>General approach</p>
    <p>ScreenPass [MobiSys 13] Spoof-resistant UI for entering passwords</p>
  </div>
  <div class="page">
    <p>me@gmail.com</p>
    <p>PASS1!</p>
    <p>!&quot;</p>
    <p>General approach</p>
    <p>TaintDroid [OSDI 10] tracks how data flows through Android apps</p>
  </div>
  <div class="page">
    <p>Taint-tracking basics</p>
    <p>c  a op b taint(c)  taint(a)  taint(b)</p>
    <p>Each variable has a label/tag; Labels reflect data dependencies</p>
  </div>
  <div class="page">
    <p>Taint-tracking basics</p>
    <p>c  a op b taint(c)  taint(a)  taint(b)</p>
    <p>Operabons/bytecodes propagate taint between</p>
    <p>variables labels</p>
  </div>
  <div class="page">
    <p>Taint-tracking basics</p>
    <p>c  a op b taint(c)  taint(a)  taint(b)</p>
    <p>setTaint(a,t)</p>
    <p>c = a + b taint(c)  {t}  {} = {t}</p>
    <p>taint(a)  {t}</p>
    <p>c = a + b</p>
    <p>Explicit flow Directly transfers informa3on from source to des3na3on</p>
  </div>
  <div class="page">
    <p>Taint-tracking basics</p>
    <p>c  a op b taint(c)  taint(a)  taint(b)</p>
    <p>setTaint(a,t)</p>
    <p>c = a + b taint(c)  {t}  {} = {t}</p>
    <p>taint(a)  {t}</p>
    <p>if (c == 0) s = 1 ???</p>
    <p>c = a + b</p>
    <p>Implicit flow Informa3on transferred via</p>
    <p>control flow</p>
  </div>
  <div class="page">
    <p>Tracking implicit flows is (really) hard.</p>
  </div>
  <div class="page">
    <p>Taint the PC</p>
    <p>if (s == 0) { x = a } else { y = b } output x output y</p>
    <p>taint(PCcurr)  taint(s)  taint(PCprev)</p>
    <p>taint(x)  taint(a)  taint(PCcurr)</p>
    <p>taint(PCcurr)  taint(PCprev)</p>
    <p>Tainbng the PC captures Informabon flow into x</p>
  </div>
  <div class="page">
    <p>Taint the PC</p>
    <p>if (s == 0) { x = a } else { y = b } output x output y</p>
    <p>taint(PCcurr)  taint(s)  taint(PCprev)</p>
    <p>taint(x)  taint(a)  taint(PCcurr)</p>
    <p>taint(PCcurr)  taint(PCprev)</p>
    <p>Problem: y contains same secret informabon as x, even though it wasnt updated</p>
  </div>
  <div class="page">
    <p>Bigger problem: overtainbng</p>
    <p>if (s == 0) { // complex block of code ... }</p>
    <p>Condibon may reveal very lidle secret informabon</p>
    <p>Taint tags updated as if objects contain all secret informabon</p>
  </div>
  <div class="page">
    <p>Not much informabon transferred to a large number of objects.</p>
  </div>
  <div class="page">
    <p>Problem: overtain3ng</p>
    <p>TaintDroid (explicit flows)</p>
    <p>TaintDroid ++ (explicit flows, tainted PC)</p>
    <p>linkedin</p>
    <p>tw itter</p>
    <p>tum blr</p>
    <p>instagram</p>
    <p>linkedin</p>
    <p>tw itter</p>
    <p>tum blr</p>
    <p>instagram</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f T a in</p>
    <p>te d O</p>
    <p>u tp</p>
    <p>u ts</p>
    <p>File Network SSL</p>
    <p>TaintDroid++TaintDroid</p>
  </div>
  <div class="page">
    <p>Problem: overtain3ng</p>
    <p>TaintDroid (explicit flows)</p>
    <p>TaintDroid ++ (explicit flows, tainted PC)</p>
    <p>linkedin</p>
    <p>tw itter</p>
    <p>tum blr</p>
    <p>instagram</p>
    <p>linkedin</p>
    <p>tw itter</p>
    <p>tum blr</p>
    <p>instagram</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f T o ta</p>
    <p>l T a in</p>
    <p>te d O</p>
    <p>u tp</p>
    <p>u ts</p>
    <p>Official CDN Other</p>
    <p>TaintDroid++TaintDroid</p>
  </div>
  <div class="page">
    <p>Key observa3on</p>
    <p>if (s == 0) { x = a ... } else { y = b ... }</p>
    <p>At most, reveals whether s is 0 If OK to leak that</p>
    <p>s!=0, then dont propagate taint</p>
  </div>
  <div class="page">
    <p>Tracks implicit flows within Dalvik VM  Can compute a useful upper bound on info leaks</p>
    <p>Leverages key properbes of passwords  Short strings  Never displayed on screen  Limited local processing</p>
    <p>Our solu3on: SpanDex</p>
  </div>
  <div class="page">
    <p>SpanDex overview</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
    <p>INIT_PSET(c,[32,126])</p>
    <p>p-set: [32, 126] size: 95</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
    <p>INIT_PSET(c,[32,126])</p>
    <p>LOG_CMP(c&gt;=65, T)</p>
    <p>p-set: [65, 126] size: 62</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
    <p>INIT_PSET(c,[32,126])</p>
    <p>LOG_CMP(c&gt;=65, T) LOG_CMP(c&lt;=90, T)</p>
    <p>p-set: [65, 90] size: 26 (uppercase leCers)</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
    <p>INIT_PSET(c,[32,126])</p>
    <p>LOG_CMP(c&gt;=65, T) LOG_CMP(c&lt;=90, T) LOG_OP(lc=c+32)</p>
    <p>p-set: [65, 90] size: 26 (uppercase leCers)</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
    <p>INIT_PSET(c,[32,126])</p>
    <p>LOG_CMP(c&gt;=65, T) LOG_CMP(c&lt;=90, T) LOG_OP(lc=c+32)</p>
    <p>LOG_CMP(lc==p, T)</p>
    <p>p-set: [80] size: 1 (P)</p>
  </div>
  <div class="page">
    <p>High-level example</p>
    <p>// password input P initPset(c, PASSWORD) // end password input</p>
    <p>if (c &gt;= A &amp;&amp; c &lt;= Z) lc = c + 32</p>
    <p>if (lc == p) output value was P</p>
    <p>INIT_PSET(c,[32,126])</p>
    <p>LOG_CMP(c&gt;=65, T) LOG_CMP(c&lt;=90, T) LOG_OP(lc=c+32)</p>
    <p>LOG_CMP(lc==p, T)</p>
    <p>p-set: [80] size: 1 (P)</p>
  </div>
  <div class="page">
    <p>Lower-level example</p>
    <p>V1</p>
    <p>V1 label=Root</p>
    <p>V0</p>
    <p>V0 label=Root</p>
    <p>V2</p>
    <p>V2 label=N4</p>
    <p>V3</p>
    <p>V3 label=N3</p>
    <p>p-set Secret = 'p'Root</p>
    <p>+ 3 RootN1</p>
    <p>+ N1 2N2</p>
    <p>- 6 N2N3</p>
    <p>+ N2 7N4 Dalvik internal heapDalvik internal stack</p>
    <p>p-set = [32, 121]</p>
    <p>V4</p>
    <p>V4 label=null</p>
    <p>Domain = 'FB'0000: mov v1, v0 // v0, v1 label=N0</p>
    <p>Labels point to op-DAG nodes Explicit flows</p>
    <p>create new op- DAG nodes</p>
    <p>Condibonal branches require solving CSP to</p>
    <p>update p-set(s)</p>
  </div>
  <div class="page">
    <p>Lower-level example</p>
    <p>V1</p>
    <p>V1 label=Root</p>
    <p>V0</p>
    <p>V0 label=Root</p>
    <p>V2</p>
    <p>V2 label=N4</p>
    <p>V3</p>
    <p>V3 label=N3</p>
    <p>p-set Secret = 'p'Root</p>
    <p>+ 3 RootN1</p>
    <p>+ N1 2N2</p>
    <p>- 6 N2N3</p>
    <p>+ N2 7N4 Dalvik internal heapDalvik internal stack</p>
    <p>p-set = [32, 121]</p>
    <p>V4</p>
    <p>V4 label=null</p>
    <p>Domain = 'FB'0000: mov v1, v0 // v0, v1 label=N0</p>
    <p>CSP solver traverses op-DAG back to root !</p>
    <p>v0 + 6 - 2  3 &lt;= 122</p>
  </div>
  <div class="page">
    <p>Other considera3ons</p>
    <p>CSPs may hard to solve  CSP may involve mul3ple sources (e.g., pw chars)  CSP may involve complex opera3ons (e.g., bitwise)  We see this in crypto and string-encoding libraries</p>
    <p>Solubon  Define a set of trusted run3me libraries  No CSP-solving internally  Taint all trusted-lib outputs  Ban complex opera3ons in untrusted code</p>
    <p>More details in paper Constrains how apps operate on secret data</p>
    <p>(e.g., must use trusted crypto lib)</p>
  </div>
  <div class="page">
    <p>SpanDex evalua3on</p>
    <p>What is SpanDexs run3me overhead?  What p-sets do we observe in real apps?  How well does SpanDex protect passwords?</p>
  </div>
  <div class="page">
    <p>SpanDex evalua3on</p>
    <p>What is SpanDexs run3me overhead?  How do apps update p-sets?  How well does SpanDex protect passwords?</p>
  </div>
  <div class="page">
    <p>ACacker model</p>
    <p>me@gmail.com Username</p>
    <p>Password</p>
    <p>Large DB of plaintext passwords</p>
    <p>Adacker can leak username + p-set of each pw character +</p>
    <p>pw length</p>
    <p>Assume targets password is in</p>
    <p>database</p>
  </div>
  <div class="page">
    <p>ACack simula3on</p>
    <p>Assume adacker learns each characters type  Lower case (a-z) or  Upper case (A-Z) or  Numeric (0-9) or  Special (!@#$ )</p>
    <p>How many guesses would adacker need?  Assume online querying  Hope that number of guesses is large</p>
  </div>
  <div class="page">
    <p>ACack simula3on</p>
    <p>Dataset  DB of 131 million unique passwords  Collected from a variety of well known leaks</p>
    <p>Procedure  For each password, P, in DB  Generate rule describing each chars type  Match set := set of passwords that match Ps length, char types  Match set is set of all possible passwords that could be P  Want to know, for each P, how large is its match set?</p>
  </div>
  <div class="page">
    <p>Match-set size distribu3on</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>Matches</p>
    <p>Passwords CDF</p>
    <p>Interesbng implicabon of adacker model: longer passwords are less secure</p>
  </div>
  <div class="page">
    <p>Match-set size distribu3on</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>Matches</p>
    <p>Passwords CDF</p>
    <p>But what if some passwords are more likely than others?</p>
    <p>What is the expected number of tries before a successful guess?</p>
  </div>
  <div class="page">
    <p>Uniform password usage</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>Expected number of tries (logscale)</p>
    <p>CDF of expected tries&gt;10 tries for 99% of passwords</p>
    <p>&gt;100 tries for 90% of passwords</p>
  </div>
  <div class="page">
    <p>Bad Zipf-like password usage</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>Expected number of tries</p>
    <p>CDF of expected tries</p>
    <p>s=1 s=0.7878 (rockyou)</p>
    <p>s=0.695 (flirtlife)</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>Expected number of tries (logscale)</p>
    <p>CDF of expected tries</p>
    <p>s=0.246 (hotmail) s=0.23 (c-bits)</p>
    <p>BeCer Zipf-like password usage</p>
    <p>&gt;10 tries for 99% of passwords</p>
    <p>&gt;100 tries for 85% of passwords</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>Expected number of tries (logscale)</p>
    <p>CDF of expected tries</p>
    <p>s=0.246 (hotmail) s=0.23 (c-bits)</p>
    <p>BeCer Zipf-like password usage</p>
    <p>Expected number of tries largely depends on usage distribubon. A wide range have</p>
    <p>been observed pracbce.</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Dynamic tracking for implicit flows  Dytan [Clause 07], DTA++ [Kang 11]</p>
    <p>Quanbfying revealed info  FlowCheck [McCamant 08]</p>
    <p>Process-level tracking  Asbestos [Efstathopoulos 05], HiStar [Zeldovich 06], Flume [Krohn 07]</p>
    <p>Symbolic execubon</p>
  </div>
  <div class="page">
    <p>SpanDex</p>
    <p>p-sets give upper bound on implicit leaks  Can track in real-3me  Rich policy possibili3es</p>
    <p>Useful under specific condibons  We havent solved the implicit-flow problem  Requires simple processing of secret data</p>
    <p>Future  Can look at other types (e.g., CCNs, SSNs)  Run3me CSPs limita3ons may be useful</p>
  </div>
  <div class="page">
    <p>Run3me performance</p>
    <p>Runbme overhead, no sensibve data:  16% vs 10% for TaintDroid</p>
    <p>Time to handle branch on sensibve data:  &lt; 0.1ms for logs up to 100 arith. Ops  Log length in prac3ce: avg: 2 ops, max: 93 ops  Rate of tainted branches: ~100s/min  Expect to spend a few ms per sec updabng p-sets</p>
    <p>Summary: can track p-sets in real-bme</p>
  </div>
</Presentation>
