<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sebas&amp;an Biallas, Jrg Brauer &amp; Stefan Kowalewski</p>
    <p>RWTH Aachen University {lastname}@embedded.rwth-aachen.de</p>
    <p>Counterexample-Guided AbstracMon Refinement for PLCs</p>
    <p>SSV 2010-10-06</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 2</p>
    <p>IntroducMon &amp; MoMvaMon - PLCs - Model checking PLC programs</p>
    <p>Abstract simulaMon with refinement - Use constraint solving for refinements - Different refinement step</p>
    <p>local variables  global variables</p>
    <p>Case studies &amp; implementaMon  Conclusion &amp; future work</p>
  </div>
  <div class="page">
    <p>Programmable Logic Controllers</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 3</p>
    <p>Used in the automaMon industry  Controlling many safety-criMcal systems  OperaMng in cyclic scanning mode (sensing inputs,</p>
    <p>processing, wriMng outputs)  No non-determinism during cycle  Different programming languages, here instruc(on list</p>
    <p>Variables</p>
    <p>Program</p>
    <p>Inputs Outputs</p>
  </div>
  <div class="page">
    <p>Example IL Program</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 4</p>
    <p>LD input0 ADD 50 GT 100 JMPC Label</p>
    <p>LD input1 ST var0 RET</p>
    <p>Label:</p>
    <p>LD var0 ST output0 RET</p>
    <p>input0, input1 INPUT</p>
    <p>output0 OUTPUT</p>
    <p>var0 GLOBAL</p>
    <p>Type BYTE 0..255</p>
    <p>input0 + 50 &gt; 100</p>
    <p>output0 &lt;- var0 var0 &lt;- input1</p>
    <p>Yes</p>
    <p>No</p>
  </div>
  <div class="page">
    <p>Building the State Space</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 5</p>
    <p>LD input0 ADD 50 GT 100 JMPC Label</p>
    <p>LD input1 ST var0 RET</p>
    <p>Label:</p>
    <p>LD var0 ST output0 RET</p>
    <p>input0, input1 INPUT</p>
    <p>output0 OUTPUT</p>
    <p>var0 GLOBAL</p>
    <p>Type BYTE 0..255</p>
    <p>input0 = 0 3</p>
    <p>input1 =</p>
  </div>
  <div class="page">
    <p>Building the Abstract State Space</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 6</p>
    <p>LD input0 ADD 50 GT 100 JMPC Label</p>
    <p>LD input1 ST var0 RET</p>
    <p>Label:</p>
    <p>LD var0 ST output0 RET</p>
    <p>input0, input1 INPUT</p>
    <p>output0 OUTPUT</p>
    <p>var0 GLOBAL</p>
    <p>Type BYTE 0..255</p>
    <p>input0 =</p>
    <p>input1 =</p>
    <p>[0, 49] [0, 255]</p>
    <p>[50, 255] [0, 0]</p>
    <p>[50, 255] [50, 255] [1, 1] [255, 255]</p>
  </div>
  <div class="page">
    <p>Abstract Domains</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 7</p>
    <p>Intervals - [1, 50] + [2, 3] = [3, 53]</p>
    <p>Bit sets - Each bit is 0, 1 or  - 0101 &amp; 010010 = 01000</p>
    <p>We use the reduced product of intervals and bit sets</p>
  </div>
  <div class="page">
    <p>Example (cont.)</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 8</p>
    <p>Lets start with input0 = [0, 255]  CondiMon jump (JMPC) demands a concrete value in accumulator  This poses a constraint on the abstract value in the accumulator  IntuiMvely: Restart cycle with abstract values [0, 49] and [50, 255]</p>
    <p>for input0 to obey constraint</p>
    <p>LD input0 ADD 50 GT 100 JMPC Label</p>
    <p>...</p>
    <p>Program Accumulator</p>
    <p>[0, 255] [50, 305] [0, 1]</p>
  </div>
  <div class="page">
    <p>csf(v) : Abstract value v is consistent under condiMon f</p>
    <p>- cs&gt;50([0, 255]) is false - cs&gt;50([51, 101]), cs&gt;50([3, 7]) are true</p>
    <p>cssing(v) : v represents a single value</p>
    <p>Idea: - Extend constraints to expressions - To guard condiMonal jumps, etc - Next: Formal model for IL programs</p>
    <p>Constraints on Abstract Values</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 9</p>
  </div>
  <div class="page">
    <p>SSA Form</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 10</p>
    <p>If cssing(acc(2)) is not fulfilled, input0(0) should be split</p>
    <p>Next step: Transform cssing(acc(2)) into a constraint on input0(0)</p>
    <p>LD input0 ADD 50 GT 100 JMPC Label</p>
    <p>...</p>
    <p>Program</p>
    <p>acc(0) := input0(0) acc(1) := acc(0) + 50 acc(2) := acc(1) &gt; 100 guard(cssing (acc(2)) ...</p>
    <p>SSA form</p>
  </div>
  <div class="page">
    <p>Transforming Constraints</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 11</p>
    <p>csf1(e1)  csf2(e2) : csf2(e2) implies the consistency of csf2(e2)</p>
    <p>E.g. cs&gt;50(a + 5)  cs&gt;45(a)</p>
    <p>acc0 := input00 acc1 := acc0 + 50 acc2 := acc1 &gt; 100 guard(cssing(acc2)) ...</p>
    <p>cssing(acc 2)  cssing(acc1 &gt; 100)</p>
    <p>cs&gt;100(acc1)  cs&gt;100(acc0 + 50)  cs&gt;10050(acc0)  cs&gt;50(input0 0)</p>
  </div>
  <div class="page">
    <p>Constraint Guards</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 12</p>
    <p>Constraint guards are needed - for determinisMc control flow - for some hardware funcMon blocks (e.g. Mmers) that require concrete values - to guarantee that the atomic proposiMons of the model-checker have a consistent truth value</p>
    <p>If those constraints are not fulfilled they are transform into constraints on variables</p>
  </div>
  <div class="page">
    <p>Refinements of Local Variables</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 13</p>
    <p>Refinement loop: Begin with  for all inputs  Transform constraints to constraints on inputs  Refine inputs and restart cycle  Each restart refines an abstract value, so the refinement process terminates</p>
    <p>Protect all global variables with single value constraints (no non-determinism in the state space)</p>
  </div>
  <div class="page">
    <p>input0 = [51, 255] input1 = [0, 255] var0 = [0, 255] output0 = [0, 255]</p>
    <p>input0 = [0, 50] input1 = [0, 255] var0 = [0, 255] output0 = [0, 0]</p>
    <p>input0 = [51, 255] input1 = [0, 255] var0 = [50, 255] output0 = [50, 255]</p>
    <p>input0 = [0, 50] input1 = [50, 255] var0 = [50, 255] output0 = [0, 0]</p>
    <p>input0 = [0, 50] input1 = [0, 49] var0 = [0, 49] output0 = [0, 0]</p>
    <p>input0 = [51, 255] input1 = [0, 255] var0 = [0, 49] ouput0 = [0, 49]</p>
    <p>Refinements of Global Variables</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 14</p>
    <p>AG output0 &lt; 50</p>
    <p>?</p>
    <p>Lemma: cs&lt; 50(var0)</p>
    <p>LD input0 ADD 50 GT 100 JMPC Label LD input1 ST var0 RET</p>
    <p>Label: LD var0 ST output0</p>
  </div>
  <div class="page">
    <p>Refinements of Global Variables</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 15</p>
    <p>Storing abstract values in states possibly allows new behavior - A valid ACTL formula is also valid in the concrete state space - For an invalid ACTL formula, we have to check whether we found a real counterexample - This is achieved by rebuilding the state space using the lemmas as refinements</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 16</p>
    <p>Constraint</p>
    <p>Restart cycle</p>
    <p>Rebuild state space</p>
    <p>Input variable</p>
    <p>Global variable</p>
    <p>Store lemma</p>
    <p>Split abstract value</p>
  </div>
  <div class="page">
    <p>Case Studies</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 17</p>
    <p>FuncMon block for monitoring a guard lock (PLCopen)</p>
    <p>8 Boolean inputs and 5 outputs  We used an implementaMon with 300 lines of IL code and 16 internal variables</p>
    <p>Abstrac&amp;on technique</p>
    <p># stored states</p>
    <p># created states</p>
    <p>State space size [MB]</p>
    <p>Time [s]</p>
    <p>Without 780 172 199 724 033 1 704 5 633</p>
    <p>Only inputs 132 242 3 155 467 351 326</p>
    <p>All variables 75 203 1 098 220 163 99</p>
  </div>
  <div class="page">
    <p>ImplementaMon in [mc]square</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 18</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>Conclusion &amp; Future Work</p>
    <p>2010 SebasMan Biallas, Embedded SoYware Laboratory, RWTH Aachen University 19</p>
    <p>Conclusion - AbstracMon refinement for PLC programs - Based on constraint resolving - Different refinement loop for local and global variables</p>
    <p>Future Work - Bever constraint resolving using SMT, SAT solvers - Incremental rebuild of state space - RelaMonal domains construcMons</p>
  </div>
</Presentation>
