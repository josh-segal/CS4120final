<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>From IP ID to Device ID and KASLR Bypass</p>
    <p>Amit Klein (joint research with Benny Pinkas)</p>
    <p>Bar-Ilan University</p>
  </div>
  <div class="page">
    <p>Why do we need user (device) tracking? From the literature:</p>
    <p>Real-time targeted marketing (John Wilander, yesterday: Cross Site Tracking)</p>
    <p>Campaign measurement</p>
    <p>Fraud detection</p>
    <p>Protection against account hijacking</p>
    <p>Anti-bot and anti-scraping services</p>
    <p>Enterprise security management</p>
    <p>Protection against DDOS attacks</p>
    <p>Reaching customers across devices</p>
    <p>Limiting number of accesses to services</p>
  </div>
  <div class="page">
    <p>Introduction to IP ID</p>
    <p>IP ID  16 bit IP header field  Identify fragments of the same IP datagram</p>
    <p>Should not repeat too closely for same IPSRC, IPDST, protocol</p>
    <p>Should not be predictable</p>
    <p>Implementation scheme (Windows, Linux+Android stateless protocols)  Large array of counters (M=2048/8192)</p>
    <p>Hash function from IPSRC, IPDST, protocol, key to a counter</p>
    <p>Increment the counter [Linux+Android: with extra randomness via tnow-told]</p>
    <p>Use the result [Windows: add hash of IPSRC, IPDST, key2]</p>
  </div>
  <div class="page">
    <p>Windows Linux</p>
  </div>
  <div class="page">
    <p>Attack setup</p>
    <p>Tracking HTML snippet, containing JS code  Can be embedded in any website</p>
    <p>The snippet forces the browser to connect to multiple attacker IPs</p>
    <p>Attacker collects IP ID for multiple (attacker) destination IPs</p>
    <p>We show how an attacker can calculate a device ID  Device ID remains unchanged across browsers, network switches, etc.</p>
    <p>Can be used to track the user (device)</p>
    <p>Each snippet (site) can use a different set of destination IPs</p>
  </div>
  <div class="page">
    <p>Attack concept</p>
    <p>Based on cryptanalysis of the IP ID generation algorithm</p>
    <p>Requires IP IDs sent to multiple destinations (IP addresses)</p>
    <p>We use collisions of the hash values (array indices), which result in related counter values (same bucket, different times)</p>
  </div>
  <div class="page">
    <p>Attack concept</p>
    <p>We find the algorithm key (in full or in part)  32 to 48 bits  This key is essentially unique per-device (up to the birthday paradox)</p>
    <p>The key is only regenerated at startup (Windows  only at restart):  Same key for all browsers, incl. privacy mode</p>
    <p>Same key for all networks (incl. many VPNs!)</p>
    <p>Invariant w.r.t. the set of destination IP addresses</p>
  </div>
  <div class="page">
    <p>Windows - The IP ID Algorithm</p>
    <p>[] is the counter array, of size M=8192.</p>
    <p>IP ID generation algorithm (reverse engineered</p>
    <p>from tcpip.sys): ihK,K2(class B of IPDST, IPSRC) mod M</p>
    <p>v[i] + (K1  T(K,IPDST||IPSRC)) mod 2 32</p>
    <p>[i]++</p>
    <p>IPID  v mod 215</p>
    <p>K1 (32 bits), K2 (32 bits), K (320 bits) - keys</p>
    <p>Hash function T (Toeplitz Hash) is bilinear (=very weak)</p>
  </div>
  <div class="page">
    <p>Windows Attack  Phase 1</p>
    <p>Note that the index i depends only on class B network of IPDST  Note that only 15 least significant bits of the counter [i] are used</p>
    <p>Have several=6 IPs in the same class B, and obtain IP IDs for them:  All fall into the same counter [i]</p>
    <p>Enumerate over 215 values of [i], and get 15 linear equations over GF(2) on K:</p>
    <p>For IPp and IPIDp , IPq and IPIDq IPIDx = [i]+x+(K1T(K,IPx||IPSRC)) mod 2</p>
    <p>(IPIDp - [i]-p)(IPIDq - [i]-q) = T(K,IPp||IPSRC) T(K,IPq||IPSRC)</p>
    <p>= T(K, IPp  IPq)</p>
    <p>Solve linear equations to obtain 30 bits of K (16 high bits of IPp  IPq are 0)</p>
  </div>
  <div class="page">
    <p>Windows Attack  Phase 2</p>
    <p>Have several pairs of IPs, each pair in its own class B network</p>
    <p>Enumerate over additional 16 bits of K, to calculate any T(K,32-bit)</p>
    <p>From phase 1:</p>
    <p>IPID* = [*]+ (K1T(K,IP*||IPSRC||0 32)) mod 215</p>
    <p>K1T(K,0||IPSRC||0 32)=(IPID* - [*]) T(K,IP*)=X</p>
    <p>So (for each pair IP0, IP1 in the same class B network):</p>
    <p>IPIDj -j-(K1T(K,IPj||IPSRC||0 32)) mod 215 = []</p>
    <p>IPIDj -j-(T(K,IPj)  X) mod 2 15 = []</p>
    <p>Compare [] from j=0 and j=1, and eliminate</p>
  </div>
  <div class="page">
    <p>Linux+Android  Introduction to KASLR</p>
    <p>KASLR=Kernel Address Space Layout Randomization</p>
    <p>ASLR is used to mitigate ROP (Return-Oriented Programming) and similar techniques  ROP is based on chaining ROP gadgets to form a (malicious) program</p>
    <p>ROP gadget is code in a known location</p>
    <p>ASLR randomizes the image load address (of modules, programs, etc.) to prevent the attacker from knowing the location of ROP gadgets</p>
    <p>KASLR randomizes the kernel image load address. Enumeration is N/A since a miss results in O/S crash (very invasive)</p>
    <p>Typically KASLR adds a random offset (Linux  9 bits, Android - 16 bits) in 2MB increments</p>
    <p>KASLR bypass = knowing kernel image address offset.</p>
  </div>
  <div class="page">
    <p>Linux+Android  stateless protocol (e.g. UDP) IP ID Algorithm  Algorithm:</p>
    <p>ihashK(IPDST||IPSRC||protocol g(net)) mod M</p>
    <p>[i]([i]+1+random({0,,tnow-t[i]-1})) mod 2 16</p>
    <p>t[i]  tnow IPID  [i]</p>
    <p>M=2048, K is a 32 bit key, protocol=17 (UDP)</p>
    <p>t  in jiffies (100Hz/250Hz/300Hz) since boot</p>
  </div>
  <div class="page">
    <p>Linux+Android  stateless protocol (e.g. UDP) IP ID Algorithm  Algorithm:</p>
    <p>ihashK(IPDST||IPSRC||protocol g(net)) mod M</p>
    <p>[i]([i]+1+random({0,,tnow-t[i]-1})) mod 2 16</p>
    <p>t[i]  tnow IPID  [i]</p>
    <p>M=2048, K is a 32 bit key, protocol=17 (UDP)</p>
    <p>t  in jiffies (100Hz/250Hz/300Hz) since boot</p>
    <p>net  in kernel v4.1 and above, kernel address of net namespace struct (address publicly known per build, up to KASLR offset)</p>
    <p>g()  shift right by const (7/6/12) and truncate to 32 bits. Gets all the KASLR offset bits into the mix</p>
  </div>
  <div class="page">
    <p>The underlying issue in Linux/Android</p>
  </div>
  <div class="page">
    <p>Linux+Android Attack (simplified)</p>
    <p>Send a burst of L=400 UDP packets (one per IP address)</p>
    <p>Consider a bucket collision (same i) for two IP addresses:</p>
    <p>A burst means that tnow-t[i] is small and therefore random(0,,tnow-t[i]-1) is small</p>
    <p>Therefore, the 2nd packet IPID will be only slightly higher than the 1st packet IPID</p>
    <p>Collect pairs of IP addresses that obey the above</p>
    <p>There will be false positives</p>
    <p>Enumerate over a 32-bit key (for newer kernels  also the KASLR offset, 9-bit or 16-bit quantity)</p>
    <p>For each key, count number of actual bucket collisions in the pairs collected</p>
    <p>For a correct key this would be above some threshold (=11)</p>
    <p>Enumeration is CPU intensive, may take time (esp. for 248)</p>
    <p>We also find the KASLR offset  hence KASLR bypass</p>
  </div>
  <div class="page">
    <p>Vendor Status Following Our Reports</p>
    <p>Windows (CVE-2019-0688)  fixed by Microsoft in April 2019 Update  Nature of the fix  unknown. Presumably a different algorithm.</p>
    <p>Undocumented registry setting can force fallback to the old (vulnerable) version ;-) (only for version&lt;1903)</p>
    <p>Linux  KASLR bypass (CVE-2019-10639)  fixed mainline (5.1-rc4), stable (5.0.8) and all</p>
    <p>relevant long term versions (4.19.35, 4.14.112, 4.9.169, 4.4.179)</p>
    <p>Also extends key size to 64-bit</p>
    <p>Extend key size to 64-bit in 3.18.139, 3.16.67 via a patch contributed by the authors</p>
    <p>Switch to SipHash and 128-bit key (CVE-2019-10638)  5.2-rc1, 5.1.7, 5.0.21, 4.19.48, 4.14.124 (+ 3.16.72 released August 13th)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Security/privacy is a concern, even when generating seemingly nonsecurity data</p>
    <p>Use industrial-strength crypto</p>
    <p>Use adequate-sized key</p>
    <p>Dont use sensitive data as key</p>
  </div>
  <div class="page">
    <p>Q&amp;A</p>
    <p>Thanks!</p>
    <p>Extended version of the paper:</p>
    <p>https://arxiv.org/pdf/1906.10478.pdf</p>
  </div>
</Presentation>
