<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Design and Implementation of an Embedded Python</p>
    <p>Run-Time System Thomas W. Barr, Rebecca Smith, Scott Rixner</p>
    <p>Rice University, Department of Computer Science USENIX Annual Technical Conference, June 2012</p>
    <p>!1</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>The computing landscape</p>
    <p>!2</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Microcontrollers: Theyre everywhere.</p>
    <p>!3</p>
    <p>~1000s~1bil~10bilUncountable?</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Microcontrollers: Theyre everywhere.</p>
    <p>- Virtually no run-time support (yet) - Storage? - Memory allocation? - Interrupt handlers? - Console?</p>
    <p>!4</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Microcontrollers: Theyre everywhere.</p>
    <p>- 32-bit ARM Cortex-M3 - 64-128KB RAM - Up to 512KB Flash - 50-100MHz</p>
    <p>- Interpreters on microcontrollers? - Java Card - eLua - Python-on-a-chip</p>
    <p>!5</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>- Run-time and toolchain - Open-source</p>
    <p>- Based on p14p - Interactive prompt - Profilers - Programmers - A lot more</p>
    <p>- It works. Today. - Focus on two parts today - Store Python objects - Call C functions</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: Toolchain and run-time</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Representing programs</p>
    <p>- Python source code</p>
    <p>!8</p>
    <p>def foo(): a = 'foo' b = (42, 'bar') c = 27 + 3</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Representing programs</p>
    <p>- Compiler builds code objects - Bytecode to represent user program</p>
    <p>!9</p>
    <p>Bytecodes: LOAD_CONST 0 STORE_NAME 0 ...</p>
    <p>def foo(): a = 'foo' b = (42, 'bar') c = 27 + 3</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Representing programs</p>
    <p>- Must include data along with code - Constants, names, etc. - .pyc file, .class file</p>
    <p>!10</p>
    <p>Bytecodes: LOAD_CONST 0 STORE_NAME 0 ...</p>
    <p>Constants: 0: 'foo' 1: (42, 'bar') ...</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Loading programs</p>
    <p>!11</p>
    <p>File: 0: 'foo' 1: (42, 'bar') ...</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Loading programs</p>
    <p>!12</p>
    <p>File: 0: 'foo' 1: (42, 'bar') ...</p>
    <p>Memory</p>
    <p>str:</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Loading programs</p>
    <p>!13</p>
    <p>File: 0: 'foo' 1: (42, 'bar') ...</p>
    <p>Memory</p>
    <p>str: 'foo'</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Loading programs</p>
    <p>!14</p>
    <p>File: 0: 'foo' 1: (42, 'bar') ... str: 'foo'</p>
    <p>Memory</p>
    <p>str: 'bar'</p>
    <p>tup: _, _</p>
    <p>int: 42</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Loading programs</p>
    <p>- Intermediate files - Python .pyc file, Java .class file, etc. - Loaded at runtime, then executed</p>
    <p>- Load before execution - Copy and transform</p>
    <p>- Link compound objects with references - Makes sense on x86</p>
    <p>- RAM is plentiful - Doesnt on microcontroller</p>
    <p>- Can't afford to copy anything</p>
    <p>!15</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Loading programs</p>
    <p>!16</p>
    <p>str: 'foo'</p>
    <p>Memory image</p>
    <p>str: 'bar'</p>
    <p>tup: _, _</p>
    <p>int: 42- Owl memory image - Unique on interpreted</p>
    <p>embedded systems - Store objects in form that</p>
    <p>is used by the VM - Object headers - Byte-order</p>
    <p>- How do we store compound objects?</p>
  </div>
  <div class="page">
    <p>packed tuple:</p>
    <p>rice computer architecture group!17</p>
    <p>str: 'bar'int: 42</p>
    <p>- Packed tuples - Store objects inside of nested containers - Transplantable</p>
    <p>- Computer  Controller - Controller  Controller</p>
    <p>- No pointers to fix up</p>
    <p>Loading programs</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Memory images</p>
    <p>- p14p, eLua use dynamic loaders - Objects copied from flash to RAM</p>
    <p>- Owl uses memory images - Can stay in flash, not SRAM - 512KB flash vs. 96KB SRAM</p>
    <p>- Results - 4x reduced SRAM footprint</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions</p>
    <p>- C is a necessary evil - Peripheral I/O libraries</p>
    <p>- Generally vendor provided - Must provide a way for Python to call C</p>
    <p>- Two techniques compared - Automatically expose functions from .h file - Trade-offs in space and speed</p>
    <p>!19</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions</p>
    <p>- User cannot directly control execution - In an interpreter loop - Need some way to let</p>
    <p>programmer break out of loop</p>
    <p>!20</p>
    <p>bytecode = *IP; switch bytecode: case BINARY_ADD: // add two Python ints // together IP++; case JUMP: // change IP case CALL_FUNCTION: // create new frame // change IP to new frame</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions</p>
    <p>!21</p>
    <p>bytecode = *IP; switch bytecode: case BINARY_ADD: // add two Python ints together IP++; case JUMP: // change IP case CALL_FUNCTION: // create new frame // change IP to new frame</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions</p>
    <p>!22</p>
    <p>bytecode = *IP; switch bytecode: case BINARY_ADD: // add two Python ints together IP++; case JUMP: // change IP case CALL_FUNCTION: if (func_name == &quot;uart_init&quot;) { call_uart_init(); } else { // create new frame // change IP to new frame }</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions</p>
    <p>!23</p>
    <p>bytecode = *IP; switch bytecode: case BINARY_ADD: // add two Python ints together IP++; case JUMP: // change IP case CALL_FUNCTION: if (func_name == &quot;uart_init&quot;) { call_uart_init(); } else if (func_name == &quot;uart_send&quot;) { call_uart_send(); } else { // create new frame // change IP to new frame }</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>call_uart_init()</p>
    <p>- Wrappers for functions - Interpreter calls</p>
    <p>wrapper - Wrapper converts</p>
    <p>arguments - Calls function - Wrapper converts result - Returns result on stack</p>
    <p>- Call C as you call Python</p>
    <p>Use this style: perldoc Go</p>
    <p>Home FAQ Languages Demo Who uses it? Download Documentation Contribute</p>
    <p>Entry 45439 out.c</p>
    <p>Submitted by anonymous on June 6, 2012 at 1:34 a.m. Language: C. Code size: 680 bytes.</p>
    <p>Important: This entry is not yet stored in the database.</p>
    <p>Save it permanently or Delete it now</p>
    <p>/* Variable declarations */ PmReturn_t retval = PM_RET_OK; pPmObj_t p0; uint32_t peripheral;</p>
    <p>/* If wrong number of arguments, raise TypeError */ if (NATIVE_GET_NUM_ARGS() != 1) { PM_RAISE(retval, PM_RET_EX_TYPE); return retval; }</p>
    <p>/* Get Python argument */ p0 = NATIVE_GET_LOCAL(0);</p>
    <p>/* If wrong argument type, raise TypeError */ if (OBJ_GET_TYPE(p0) != OBJ_TYPE_INT) { PM_RAISE(retval, PM_RET_EX_TYPE); return retval; }</p>
    <p>/* Convert Python argument to C argument */ peripheral = ((pPmInt_t)p0)-&gt;val;</p>
    <p>/* Actual call to native function */ SysCtlPeripheralEnable(peripheral);</p>
    <p>/* Return Python object */ NATIVE_SET_TOS(PM_NONE); return retval;</p>
    <p>This snippet took 0.00 seconds to highlight.</p>
    <p>Back to the Entry List or Home. !24</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions import gpio class Output: def __init__(self, portpin): self.port = PORTS[portpin[0]] self.pin = PINS[portpin[1]] # turn on GPIO module init_port(portpin[0]) # configure pin for output gpio.GPIOPinTypeGPIOOutput(self.port, self.pin) def write(self, value): if value: # turn pin on gpio.GPIOPinWrite(self.port, self.pin, self.pin) else: # turn pin off gpio.GPIOPinWrite(self.port, self.pin, 0)</p>
    <p>!25</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions import gpio class Output: def __init__(self, portpin): self.port = PORTS[portpin[0]] self.pin = PINS[portpin[1]] # turn on GPIO module init_port(portpin[0]) # configure pin for output gpio.GPIOPinTypeGPIOOutput(self.port, self.pin) def write(self, value): if value: # turn pin on gpio.GPIOPinWrite(self.port, self.pin, self.pin) else: # turn pin off gpio.GPIOPinWrite(self.port, self.pin, 0)</p>
    <p>!26</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Calling C library functions</p>
    <p>- Wrapped functions - Manually write</p>
    <p>wrappers - p14p, eLua</p>
    <p>- Autowrapping - Similar to SWIG</p>
    <p>- Simple - Any compiler - Any architecture - Lots of duplicated code</p>
    <p>Use this style: perldoc Go</p>
    <p>Home FAQ Languages Demo Who uses it? Download Documentation Contribute</p>
    <p>Entry 45439 out.c</p>
    <p>Submitted by anonymous on June 6, 2012 at 1:34 a.m. Language: C. Code size: 680 bytes.</p>
    <p>Important: This entry is not yet stored in the database.</p>
    <p>Save it permanently or Delete it now</p>
    <p>/* Variable declarations */ PmReturn_t retval = PM_RET_OK; pPmObj_t p0; uint32_t peripheral;</p>
    <p>/* If wrong number of arguments, raise TypeError */ if (NATIVE_GET_NUM_ARGS() != 1) { PM_RAISE(retval, PM_RET_EX_TYPE); return retval; }</p>
    <p>/* Get Python argument */ p0 = NATIVE_GET_LOCAL(0);</p>
    <p>/* If wrong argument type, raise TypeError */ if (OBJ_GET_TYPE(p0) != OBJ_TYPE_INT) { PM_RAISE(retval, PM_RET_EX_TYPE); return retval; }</p>
    <p>/* Convert Python argument to C argument */ peripheral = ((pPmInt_t)p0)-&gt;val;</p>
    <p>/* Actual call to native function */ SysCtlPeripheralEnable(peripheral);</p>
    <p>/* Return Python object */ NATIVE_SET_TOS(PM_NONE); return retval;</p>
    <p>This snippet took 0.00 seconds to highlight.</p>
    <p>Back to the Entry List or Home. !27</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Foreign Function Interface</p>
    <p>- Based on libffi - Calls C functions with arbitrary signature - Implements calling convention</p>
    <p>- Custom port to Cortex-M3 - eFFI - Functions statically linked into program - Function pointer tables instead of DWARF symbol</p>
    <p>headers - Compatible with statically linked embedded system</p>
    <p>- No duplicated code</p>
    <p>!28</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Comparison</p>
    <p>- eFFI smaller - VM 2KB larger - Eliminates 21KB of wrappers</p>
    <p>- Wrapper functions simpler - 2x faster, largely irrelevant in practice</p>
    <p>interp.c - 13kb</p>
    <p>Virtual machine 34.9kb</p>
    <p>Lib (C) 9.8kb</p>
    <p>(libm) - 10kb</p>
    <p>ieee754-df.S - 6kb</p>
    <p>ieee754-sf.S - 5kb</p>
    <p>Math 20.8kb</p>
    <p>uip.c - 4kb</p>
    <p>IP 7.8kb</p>
    <p>(usblib) - 7kb</p>
    <p>(driverlib) - 6kb</p>
    <p>Platform 15.2kb</p>
    <p>[bytecodes] - 5kb</p>
    <p>[debug] - 5kb</p>
    <p>[strings] - 9kb</p>
    <p>[other] - 6kb</p>
    <p>Lib (Py) 25.0kb</p>
    <p>adc - 4kb</p>
    <p>i2c - 4kb</p>
    <p>uart - 3kb</p>
    <p>I/O (C) 21.1kb</p>
    <p>[bytecodes] - 5kb</p>
    <p>[strings] - 14kb</p>
    <p>[other] - 5kb</p>
    <p>I/O (Py) 26.5kb</p>
    <p>interp.c - 13kb</p>
    <p>Virtual machine 36.6kb</p>
    <p>Lib (C) 10.2kb</p>
    <p>(libm) - 10kb</p>
    <p>ieee754-df.S - 6kb</p>
    <p>ieee754-sf.S - 5kb</p>
    <p>Math 20.8kb</p>
    <p>uip.c - 4kb</p>
    <p>IP 7.8kb</p>
    <p>(usblib) - 7kb</p>
    <p>Platform 12.2kb</p>
    <p>[bytecodes] - 5kb</p>
    <p>[debug] - 5kb</p>
    <p>[strings] - 9kb</p>
    <p>[other] - 6kb</p>
    <p>Lib (Py) 25.4kb</p>
    <p>[bytecodes] - 5kb</p>
    <p>[strings] - 15kb</p>
    <p>[other] - 7kb</p>
    <p>I/O (Py) 29.1kb</p>
    <p>src 8.8kb</p>
    <p>(libc, libm) - 64kb</p>
    <p>(other) 65.9kb</p>
    <p>lparser.c - 6kb</p>
    <p>lvm.c - 5kb</p>
    <p>lstrlib.c - 4kb</p>
    <p>lbaselib.c - 4kb</p>
    <p>lcode.c - 4kb</p>
    <p>lapi.c - 4kb</p>
    <p>lua 63.5kb</p>
    <p>luarpc.c - 6kb</p>
    <p>modules 20.6kb</p>
    <p>platform.c - 4kb</p>
    <p>uip.c - 4kb</p>
    <p>ieee754-df.S - 7kb</p>
    <p>arm 10.2kb</p>
    <p>tasks.c - 6kb</p>
    <p>Source 9.2kb</p>
    <p>IntQueue.c - 4kb</p>
    <p>Minimal 13.2kb</p>
    <p>(driverlib) - 7kb</p>
    <p>(other) 10.0kb</p>
    <p>uip.c - 10kb</p>
    <p>uip 14.8kb</p>
    <p>webserver 13.0kb</p>
    <p>bitmap.h - 5kb</p>
    <p>RTOSDemo 14.2kb</p>
    <p>Figure 5: Static binary analysis, from top to bottom, of the Owl virtual machine using wrapped functions, using the foreign function interface, of the eLua virtual machine and of an example program using SafeRTOS.</p>
    <p>a floating-point benchmark that simulates the motion of the Sun and the four planets of the outer solar system.</p>
    <p>This section presents an analysis of the Owl system. The overhead of including the virtual machine in flash can be quite small, as low as 32 KB compared to 22 KB for a simple RTOS. We show that for the embedded workloads, garbage collection has almost no impact on runtime performance. Finally, we show that using a loaderless architecture uses four times less SRAM than a traditional system.</p>
    <p>Figure 5 shows the output of the static binary analyzer. The four rows in the figure are the Owl run-time system using autowrapping, the Owl run-time system using eFFI, the eLua interpreter, and the SafeRTOS demonstration program. SafeRTOS is an open-source real-time operating system that is representative of the types of runtime systems in use on microcontrollers today.</p>
    <p>Consider the Owl run-time system using autowrapping. The virtual machine section includes the interpreter and support code to create and manage Python objects. The math section includes support for software floating point and mathematical functions, while the IP section provides support for Ethernet networking. The platform</p>
    <p>section is the StellarisWare peripheral and USB driver libraries. The lib sections (C and Python) are the Python standard libraries for the Owl run-time system. Finally, the I/O sections (C and Python) are the calls to the peripheral library, wrapped by the autowrapper tool.</p>
    <p>The Python standard libraries consume a significant fraction of the total flash memory required for the Owl run-time system. The capabilities that these libraries provide are mostly optional, and therefore can be removed to save space. However, they provide many useful and convenient functionalities beyond the basic Python bytecodes, such as string manipulation. These sections also include optional debugging information (5 KB).</p>
    <p>With eFFI, the binary is roughly 19 KB smaller, illustrating the advantage of using a foreign function interface. While the code required to manually create stack frames and call functions marginally increases the size of the virtual machine and stores some additional information in the Python code objects, it completely eliminates the need for C wrappers.</p>
    <p>The Owl virtual machine itself is actually quite small, approximately 35 KB. It contains all of the code necessary for manipulating objects, interpreting bytecodes, managing threads, and calling foreign functions. This is significantly smaller than eLuas core, which takes up 63 KB, and not much larger than the so-called light weight SafeRTOS, which requires 22 KB (the Source and Minimal sections). Note also that the supposed compactness of SafeRTOS is deceptive, as it is statically</p>
    <p>!29</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>!30</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>!31</p>
    <p>- Yes, you can run a managed run-time on a microcontroller.</p>
    <p>- It works, right now. - Autonomous car - Toys - Courseware</p>
    <p>- ENGI128 at Rice - Cookware - ...</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>- Yes, you can run a managed run-time on a microcontroller.</p>
    <p>- It works, right now. - Autonomous car - Toys - Courseware</p>
    <p>- ENGI128 at Rice - Cookware - ...</p>
    <p>!32</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>!33</p>
    <p>- Yes, you can run a managed run-time on a microcontroller.</p>
    <p>- It works, right now. - Autonomous car - Toys - Courseware</p>
    <p>- ENGI128 at Rice - Cookware - ...</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>- Interesting area for research - Two innovations presented here - More in paper - Far more in the future?</p>
    <p>- Compare to C? - To MATLAB?</p>
    <p>- Vital area for research - Microcontrollers are getting more common - Larger peripheral set is making programming harder</p>
    <p>- We can and must reverse this trend</p>
    <p>!34</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl: A Development Environment for Microcontrollers</p>
    <p>!35</p>
    <p>embeddedowl@gmail.com</p>
  </div>
</Presentation>
