<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DeepHammer: Depleting the Intelligence of Deep Neural Networks through Targeted Chain of Bit Flips</p>
    <p>Fan Yao1 Adnan Siraj Rakin2 Deliang Fan2</p>
  </div>
  <div class="page">
    <p>Security of Machine Learning</p>
    <p>Tremendous advances of machine learning (ML)  Wide deployment of machine learning platforms (e.g., MLaaS) - Amazon AWS AI, Google Cloud and Microsoft Azure ML</p>
    <p>DNN applications increasingly integrated in critical systems - E.g., Medical diagnostics, access control and malware detection</p>
    <p>DNN model integrity as a key concern  Model tampering can introduce severe consequences - E.g., Making wrong decisions during autonomous driving</p>
  </div>
  <div class="page">
    <p>DNN Model Tampering Threats</p>
    <p>ML hardware platform</p>
  </div>
  <div class="page">
    <p>DNN Model Tampering Threats</p>
    <p>Malicious inputs</p>
    <p>Outputs</p>
    <p>ML hardware platform</p>
    <p>External threats  Adversarial inputs  Data poisoning</p>
  </div>
  <div class="page">
    <p>HW is prone to faults Computing logic Caches DRAM modules (i.e.,</p>
    <p>Rowhammer)</p>
    <p>DNN Model Tampering Threats</p>
    <p>Malicious inputs</p>
    <p>Outputs</p>
    <p>ML hardware platform</p>
    <p>External threats  Adversarial inputs  Data poisoning</p>
  </div>
  <div class="page">
    <p>Are Deep Neural Networks vulnerable to Internal Adversaries exploiting Hardware-based Faults?</p>
  </div>
  <div class="page">
    <p>Scope of Attack</p>
    <p>Focusing on Quantized DNNs  Quantized models are more robust to bit flip (Hong et al. SEC19)  Quantization is a widely applied technique</p>
    <p>Leveraging Rowhammer to inject faults to DNN model weights  Allow deterministic bit flips in memory by unprivileged software</p>
    <p>We termed the attack: DeepHammer</p>
  </div>
  <div class="page">
    <p>Objective of DeepHammer</p>
  </div>
  <div class="page">
    <p>Objective of DeepHammer</p>
    <p>Degrade the inference accuracy to the level of Random Guess</p>
  </div>
  <div class="page">
    <p>Objective of DeepHammer</p>
    <p>Degrade the inference accuracy to the level of Random Guess</p>
    <p>Example: ResNet-20 for CIFAR-10, 10 output classes</p>
    <p>In te</p>
    <p>ll ig</p>
    <p>en ce</p>
    <p>In te</p>
    <p>ll ig</p>
    <p>en ce</p>
    <p>Before attack, Accuracy: 90.2% After attack, Accuracy: ~10% (1/10)</p>
  </div>
  <div class="page">
    <p>Objective of DeepHammer</p>
    <p>Degrade the inference accuracy to the level of Random Guess</p>
    <p>Depleting the intelligence of well-trained DNNs</p>
    <p>Example: ResNet-20 for CIFAR-10, 10 output classes</p>
    <p>In te</p>
    <p>ll ig</p>
    <p>en ce</p>
    <p>In te</p>
    <p>ll ig</p>
    <p>en ce</p>
    <p>Before attack, Accuracy: 90.2% After attack, Accuracy: ~10% (1/10)</p>
  </div>
  <div class="page">
    <p>Attack Challenges</p>
    <p>Challenges to carry out attacks on quantized DNNs</p>
  </div>
  <div class="page">
    <p>Attack Challenges</p>
    <p>C1: How to identify the most vulnerable bits?  Algorithm challenge</p>
    <p>C2: How to successfully flip the selected bits?  System challenge</p>
    <p>Challenges to carry out attacks on quantized DNNs</p>
  </div>
  <div class="page">
    <p>Locating the Most Vulnerable Weight Bits  An iterative bit search process (one bit at a time)  For each iteration:</p>
    <p>Perform Gradient-based Bit Ranking (GBR)</p>
    <p>Flip-aware Bit Search (FBS), Select a bit that: - Incurs most accuracy lost - location flippable (checks bit flip profile)</p>
    <p>If accuracy target not reached: next iteration 8</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>l Layers</p>
    <p>bn11 b n1 2 b</p>
    <p>n1 3 b</p>
    <p>n1 l</p>
    <p>Sort based</p>
    <p>on accuracy loss l x p bits</p>
    <p>Find optimal flippable bit to target</p>
    <p>p bits</p>
  </div>
  <div class="page">
    <p>Locating the Most Vulnerable Weight Bits  An iterative bit search process (one bit at a time)  For each iteration:</p>
    <p>Perform Gradient-based Bit Ranking (GBR)</p>
    <p>Flip-aware Bit Search (FBS), Select a bit that: - Incurs most accuracy lost - location flippable (checks bit flip profile)</p>
    <p>If accuracy target not reached: next iteration 8</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>l Layers</p>
    <p>bn11 b n1 2 b</p>
    <p>n1 3 b</p>
    <p>n1 l</p>
    <p>Sort based</p>
    <p>on accuracy loss l x p bits</p>
    <p>Find optimal flippable bit to target</p>
    <p>p bits</p>
  </div>
  <div class="page">
    <p>Locating the Most Vulnerable Weight Bits  An iterative bit search process (one bit at a time)  For each iteration:</p>
    <p>Perform Gradient-based Bit Ranking (GBR)</p>
    <p>Flip-aware Bit Search (FBS), Select a bit that: - Incurs most accuracy lost - location flippable (checks bit flip profile)</p>
    <p>If accuracy target not reached: next iteration 8</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>l Layers</p>
    <p>bn11 b n1 2 b</p>
    <p>n1 3 b</p>
    <p>n1 l</p>
    <p>Sort based</p>
    <p>on accuracy loss l x p bits</p>
    <p>Find optimal flippable bit to target</p>
    <p>p bits</p>
  </div>
  <div class="page">
    <p>Locating the Most Vulnerable Weight Bits  An iterative bit search process (one bit at a time)  For each iteration:</p>
    <p>Perform Gradient-based Bit Ranking (GBR)</p>
    <p>Flip-aware Bit Search (FBS), Select a bit that: - Incurs most accuracy lost - location flippable (checks bit flip profile)</p>
    <p>If accuracy target not reached: next iteration 8</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>l Layers</p>
    <p>bn11 b n1 2 b</p>
    <p>n1 3 b</p>
    <p>n1 l</p>
    <p>Sort based</p>
    <p>on accuracy loss l x p bits</p>
    <p>Find optimal flippable bit to target</p>
    <p>p bits</p>
  </div>
  <div class="page">
    <p>Locating the Most Vulnerable Weight Bits  An iterative bit search process (one bit at a time)  For each iteration:</p>
    <p>Perform Gradient-based Bit Ranking (GBR)</p>
    <p>Flip-aware Bit Search (FBS), Select a bit that: - Incurs most accuracy lost - location flippable (checks bit flip profile)</p>
    <p>If accuracy target not reached: next iteration 8</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>l Layers</p>
    <p>bn11 b n1 2 b</p>
    <p>n1 3 b</p>
    <p>n1 l</p>
    <p>Sort based</p>
    <p>on accuracy loss l x p bits</p>
    <p>Find optimal flippable bit to target</p>
    <p>p bits</p>
  </div>
  <div class="page">
    <p>Locating the Most Vulnerable Weight Bits  An iterative bit search process (one bit at a time)  For each iteration:</p>
    <p>Perform Gradient-based Bit Ranking (GBR)</p>
    <p>Flip-aware Bit Search (FBS), Select a bit that: - Incurs most accuracy lost - location flippable (checks bit flip profile)</p>
    <p>If accuracy target not reached: next iteration 8</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>l Layers</p>
    <p>bn11 b n1 2 b</p>
    <p>n1 3 b</p>
    <p>n1 l</p>
    <p>Sort based</p>
    <p>on accuracy loss l x p bits</p>
    <p>Find optimal flippable bit to target</p>
    <p>p bits</p>
  </div>
  <div class="page">
    <p>Rowhammer Framework in DeepHammer</p>
  </div>
  <div class="page">
    <p>Rowhammer Framework in DeepHammer</p>
    <p>Three advanced Rowhammer techniques  Multi-page memory massaging - Enables fast and efficient victim page relocation</p>
    <p>Precise rowhammering - Ensures exact bit flips based on the targeted bit chain</p>
    <p>Online memory re-templating - Allows fast correction of obsolete DRAM bit flip profile</p>
  </div>
  <div class="page">
    <p>Multi-page Memory Massaging</p>
    <p>Goal: map multiple victim weight pages to exploitable DRAM rows  In-row pages and compact aggressor rows  Target page positioning using per-cpu pageset - Last In First Out (LIFO)</p>
    <p>P1 P2</p>
    <p>P3 P4 P5 P6</p>
    <p>Logical Bank</p>
    <p>Single channel single DIMM</p>
  </div>
  <div class="page">
    <p>Multi-page Memory Massaging</p>
    <p>Goal: map multiple victim weight pages to exploitable DRAM rows  In-row pages and compact aggressor rows  Target page positioning using per-cpu pageset - Last In First Out (LIFO)</p>
    <p>P1 P2</p>
    <p>P3 P4 P5 P6</p>
    <p>Logical Bank</p>
    <p>Single channel single DIMM</p>
    <p>In-row page</p>
  </div>
  <div class="page">
    <p>Multi-page Memory Massaging</p>
    <p>Goal: map multiple victim weight pages to exploitable DRAM rows  In-row pages and compact aggressor rows  Target page positioning using per-cpu pageset - Last In First Out (LIFO)</p>
    <p>P1 P2</p>
    <p>P3 P4 P5 P6</p>
    <p>Logical Bank</p>
    <p>Single channel single DIMM</p>
    <p>In-row page</p>
    <p>Compact aggressor rows</p>
  </div>
  <div class="page">
    <p>Multi-page Memory Massaging</p>
    <p>Goal: map multiple victim weight pages to exploitable DRAM rows  In-row pages and compact aggressor rows  Target page positioning using per-cpu pageset - Last In First Out (LIFO)</p>
    <p>Logical Bank</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2 pp1: bop1</p>
    <p>pp2: bop2</p>
    <p>pp3: bop3 pp4: bop4</p>
    <p>per-cpu free page list</p>
    <p>in out</p>
    <p>P1 P2</p>
    <p>P3 P4 P5 P6</p>
    <p>Logical Bank</p>
    <p>Single channel single DIMM</p>
    <p>In-row page</p>
    <p>Compact aggressor rows</p>
  </div>
  <div class="page">
    <p>Multi-page Memory Massaging</p>
    <p>Goal: map multiple victim weight pages to exploitable DRAM rows  In-row pages and compact aggressor rows  Target page positioning using per-cpu pageset - Last In First Out (LIFO)</p>
    <p>Logical Bank</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2 pp1: bop1</p>
    <p>pp2: bop2</p>
    <p>pp3: bop3 pp4: bop4</p>
    <p>pp1pp2pp3</p>
    <p>Released</p>
    <p>pp4</p>
    <p>Released</p>
    <p>Released Released</p>
    <p>per-cpu free page list</p>
    <p>in out</p>
    <p>P1 P2</p>
    <p>P3 P4 P5 P6</p>
    <p>Logical Bank</p>
    <p>Single channel single DIMM</p>
    <p>In-row page</p>
    <p>Compact aggressor rows</p>
  </div>
  <div class="page">
    <p>Multi-page Memory Massaging</p>
    <p>Goal: map multiple victim weight pages to exploitable DRAM rows  In-row pages and compact aggressor rows  Target page positioning using per-cpu pageset - Last In First Out (LIFO)</p>
    <p>Logical Bank</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2</p>
    <p>aggressor-1</p>
    <p>aggressor-2 pp1: bop1</p>
    <p>pp2: bop2</p>
    <p>pp3: bop3 pp4: bop4</p>
    <p>Released Released</p>
    <p>Released Released</p>
    <p>per-cpu free page list</p>
    <p>in out</p>
    <p>vp1 vp2</p>
    <p>vp3 vp4</p>
    <p>P1 P2</p>
    <p>P3 P4 P5 P6</p>
    <p>Logical Bank</p>
    <p>Single channel single DIMM</p>
    <p>In-row page</p>
    <p>Compact aggressor rows</p>
  </div>
  <div class="page">
    <p>Precise Hammering</p>
    <p>Motivation: need to flip the exact bits  Undesired bit flips can fail the attack</p>
    <p>Unexpected bit flips could happen  E.g., multiple vulnerable cells in one row</p>
    <p>Logical Bank</p>
    <p>t</p>
    <p>t</p>
    <p>t</p>
    <p>t</p>
    <p>X  0  X X  1  X X  0  X</p>
    <p>X  1  X X  0  X X  1  X</p>
    <p>X  0  X X  1  X X  0  X</p>
    <p>X  1 X X  0 X</p>
    <p>X  0 X</p>
    <p>Proposed column-page-stripe Only bj will flip</p>
    <p>b0 b1 b2  bj bk  bn</p>
    <p>b0 b1 b2   bnbj bk</p>
    <p>b0 b1 b2   bnbj bk</p>
    <p>Agg. Row 1</p>
    <p>Agg. Row 2</p>
    <p>Victim row</p>
  </div>
  <div class="page">
    <p>Fast Memory Re-templating</p>
    <p>New issue: Bit flip profile can be obsolete  After power cycle or reboot</p>
    <p>Observations  The location of vulnerable cells have not changed (page offset)  Potential reason: data scrambling by memory controllers</p>
    <p>How to update the bit flip profile at runtime?  Only re-template physical pages with desired exploitable offsets  Drastically reduce templating time: days to minutes!</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>DNN configurations  Image processing dataset: Fashion MNIST, CIFAR-10 and ImageNet  Speech recognition dataset: Google Speech Command  DNN models: 11 mainstream architectures, including 2 mobile networks</p>
    <p>Training platform (GPU)  GeForce GTX 1080 Ti GPU, 11 GB dedicated memory</p>
    <p>Inference platform (CPU)  Intel Ivy-Bridge processors  4GB DDR3 DIMMs with single/dual channel setup</p>
  </div>
  <div class="page">
    <p>Evaluation: Bit Search Results</p>
    <p>Dataset Architecture Network</p>
    <p>Parameters Acc. Before Attack (%)</p>
    <p>Random Guess Acc. (%)</p>
    <p>Acc. After Attack (%)</p>
    <p>Min. # of Bit-flips</p>
    <p>Fashion MNIST LeNet 0.65M 90.20 10.00 10.00 3</p>
    <p>Google Speech Command</p>
    <p>VGG-11 132M 96.36 8.33</p>
    <p>VGG-13 133M 96.38 3.25 7</p>
    <p>CIFAR-10</p>
    <p>ResNet-20 0.27M 90.70</p>
    <p>ImageNet</p>
    <p>SqueezeNet 1.2M 57.00</p>
    <p>ResNet-18 11M 69.52 0.19 24 ResNet-34 21M 72.78 0.18 23 ResNet-50 23M 75.56 0.17 23</p>
  </div>
  <div class="page">
    <p>Evaluation: Bit Search Results</p>
    <p>Dataset Architecture Network</p>
    <p>Parameters Acc. Before Attack (%)</p>
    <p>Random Guess Acc. (%)</p>
    <p>Acc. After Attack (%)</p>
    <p>Min. # of Bit-flips</p>
    <p>Fashion MNIST LeNet 0.65M 90.20 10.00 10.00 3</p>
    <p>Google Speech Command</p>
    <p>VGG-11 132M 96.36 8.33</p>
    <p>VGG-13 133M 96.38 3.25 7</p>
    <p>CIFAR-10</p>
    <p>ResNet-20 0.27M 90.70</p>
    <p>ImageNet</p>
    <p>SqueezeNet 1.2M 57.00</p>
    <p>ResNet-18 11M 69.52 0.19 24 ResNet-34 21M 72.78 0.18 23 ResNet-50 23M 75.56 0.17 23</p>
  </div>
  <div class="page">
    <p>Evaluation: Bit Search Results</p>
    <p>Dataset Architecture Network</p>
    <p>Parameters Acc. Before Attack (%)</p>
    <p>Random Guess Acc. (%)</p>
    <p>Acc. After Attack (%)</p>
    <p>Min. # of Bit-flips</p>
    <p>Fashion MNIST LeNet 0.65M 90.20 10.00 10.00 3</p>
    <p>Google Speech Command</p>
    <p>VGG-11 132M 96.36 8.33</p>
    <p>VGG-13 133M 96.38 3.25 7</p>
    <p>CIFAR-10</p>
    <p>ResNet-20 0.27M 90.70</p>
    <p>ImageNet</p>
    <p>SqueezeNet 1.2M 57.00</p>
    <p>ResNet-18 11M 69.52 0.19 24 ResNet-34 21M 72.78 0.18 23 ResNet-50 23M 75.56 0.17 23</p>
  </div>
  <div class="page">
    <p>DeepHammer Runtime Exploitations</p>
    <p>FM NI .-L eN et</p>
    <p>Go og leVG G1 1</p>
    <p>Go og leVG G1 3</p>
    <p>CI FA RRN 20</p>
    <p>CI FA RAl ex Ne t</p>
    <p>CI FA RVG G1 1</p>
    <p>CI FA RVG G1 6</p>
    <p>Im ag eN etSq u.</p>
    <p>Im ag eN etM ob i.</p>
    <p>Im ag eN etRN 18</p>
    <p>Im ag eN etRN 34</p>
    <p>Im ag eN etRN 50</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>ec )</p>
    <p>Re-templating Precise-hammering</p>
    <p>DeepHammer re-templating time and hammering time</p>
  </div>
  <div class="page">
    <p>DeepHammer Runtime Exploitations</p>
    <p>FM NI .-L eN et</p>
    <p>Go og leVG G1 1</p>
    <p>Go og leVG G1 3</p>
    <p>CI FA RRN 20</p>
    <p>CI FA RAl ex Ne t</p>
    <p>CI FA RVG G1 1</p>
    <p>CI FA RVG G1 6</p>
    <p>Im ag eN etSq u.</p>
    <p>Im ag eN etM ob i.</p>
    <p>Im ag eN etRN 18</p>
    <p>Im ag eN etRN 34</p>
    <p>Im ag eN etRN 50</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>ec )</p>
    <p>Re-templating Precise-hammering</p>
    <p>DeepHammer re-templating time and hammering time Refer to the paper for more details on the attack and mitigation dicussions</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>We highlighted that multiple deterministic bit flips are required to tamper quantized DNN models.</p>
    <p>We proposed a new attack-DeepHammer-that depletes DNN intelligence through DRAM fault injections.</p>
    <p>We designed novel algorithm- and system-level techniques that enable internal tampering of DNNs with DeepHammer.</p>
    <p>Our work motivates the need to enhance the robustness of DNNs against hardware-based fault injections.</p>
  </div>
  <div class="page">
    <p>Thanks! Questions? Email: fan.yao@ucf.edu</p>
  </div>
</Presentation>
