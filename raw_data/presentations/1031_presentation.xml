<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Everything you always wanted to know</p>
    <p>about multicore graph processing but</p>
    <p>were afraid to ask</p>
    <p>Jasmina Malicevic Baptiste Lepers Willy Zwaenepoel</p>
    <p>EPFL, Switzerland</p>
    <p>USENIX Annual Technical Conference, Jul 12th -14th 2017 , Santa Clara, CA ,USA</p>
    <p>EPFL, Switzerland EPFL, Switzerland</p>
  </div>
  <div class="page">
    <p>Graphs are everywhere</p>
    <p>Social networks</p>
    <p>Item</p>
    <p>recommendation</p>
    <p>Search and</p>
    <p>website ranking</p>
  </div>
  <div class="page">
    <p>The maze of graph analytics platforms</p>
    <p>Ligra</p>
    <p>Polymer</p>
    <p>Galois</p>
    <p>Pregel</p>
    <p>Powergraph</p>
    <p>PowerLyra</p>
    <p>Gemini</p>
    <p>GraphChi</p>
    <p>X-Stream</p>
    <p>GridGraph</p>
    <p>Mosaic</p>
    <p>Chaos</p>
    <p>Single machine</p>
    <p>Distributed</p>
    <p>In-memory Out-of-core</p>
  </div>
  <div class="page">
    <p>The maze of graph analytics platforms</p>
    <p>Ligra</p>
    <p>Polymer</p>
    <p>Galois</p>
    <p>Pregel</p>
    <p>Powergraph</p>
    <p>PowerLyra</p>
    <p>Gemini</p>
    <p>GraphChi</p>
    <p>X-Stream</p>
    <p>GridGraph</p>
    <p>Mosaic</p>
    <p>Chaos</p>
    <p>Single machine</p>
    <p>Distributed</p>
    <p>In-memory Out-of-core</p>
  </div>
  <div class="page">
    <p>Everything you always wanted to know</p>
    <p>What techniques work and why?</p>
  </div>
  <div class="page">
    <p>Why is our work different?</p>
    <p>End-to-end evaluation</p>
    <p>Comparison of techniques, rather than systems</p>
  </div>
  <div class="page">
    <p>End-to-end evaluation</p>
    <p>Executing the algorithm is only one piece of the puzzle</p>
    <p>Pre-processing Algorithm time</p>
    <p>Time</p>
    <p>End-to-end time = Pre-processing + Algorithm time</p>
  </div>
  <div class="page">
    <p>Motivation: Why end-to-end time?</p>
    <p>baseline optimized code</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Algorithm</p>
    <p>BFS on Twitter [Ligra]</p>
  </div>
  <div class="page">
    <p>Motivation: Why end-to-end time?</p>
    <p>Need to understand the trade-off in end-to-end time!</p>
    <p>baseline optimized code</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Pre-processing Algorithm</p>
    <p>BFS on Twitter [Ligra]</p>
  </div>
  <div class="page">
    <p>Comparison of techniques not systems</p>
    <p>Implement techniques from different systems within one system</p>
    <p>Evaluation of techniques in isolation</p>
    <p>Not constrained by system defined API</p>
    <p>Implementation is comparable/better than the original system</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>Algorithm</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>The answers depend on:</p>
    <p>Algorithm  differ in # of active vertices per iteration</p>
    <p>Only a subset active: BFS</p>
    <p>Entire graph active: Pagerank, SpMV</p>
    <p>Graph shape</p>
    <p>Social networks (power law) graphs</p>
    <p>Synthetic graph; 1B edges 64M vertices</p>
    <p>Stored as edge array</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>Algorithm</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Graph representation</p>
    <p>Edge array</p>
    <p>Adjacency list: outgoing edges</p>
    <p>x Pre-processing to group edges by vertex  Easy to locate edges of a particular vertex</p>
    <p>Layout is the same as input  no pre-processing</p>
    <p>x To locate edges of a vertex, need to read all edges</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for hardware?(NUMA)</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>Algorithm</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Creating adjacency lists using dynamic allocation</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
  </div>
  <div class="page">
    <p>Creating adjacency lists using dynamic allocation</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>null3</p>
  </div>
  <div class="page">
    <p>Creating adjacency lists using dynamic allocation</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>null</p>
    <p>Frequent reallocations</p>
    <p>Adjacency lists spread out in memory</p>
  </div>
  <div class="page">
    <p>Creating adjacency lists using sorting</p>
    <p>or</p>
    <p>Radix Sort</p>
    <p>Load edge array into memory</p>
    <p>Sort by source or destination</p>
    <p>Vertices point to start of their adjacency list 0 1 2 3</p>
    <p>Avoid reallocations</p>
    <p>Adjacency lists contiguous in memory</p>
  </div>
  <div class="page">
    <p>Creating adjacency lists using sorting</p>
    <p>or</p>
    <p>Radix Sort</p>
    <p>Load edge array into memory</p>
    <p>Sort by source or destination</p>
    <p>Vertices point to start of their adjacency list 0 1 2 3</p>
    <p>Avoid reallocations</p>
    <p>Adjacency lists contiguous in memory</p>
    <p>Q: Which approach is better?</p>
  </div>
  <div class="page">
    <p>Which pre-processing method is better?</p>
    <p>Pre-processing technique Time (sec) Dynamic 15.0</p>
    <p>Count sort 13.5</p>
    <p>Radix sort 4.0</p>
    <p>LLC misses 69%</p>
    <p>Radix sort low LLC miss rate =&gt; 3.5X better</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>o Radix sort wins for adjacency lists</p>
    <p>Algorithm</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Which is data layout is better?</p>
    <p>adjacency list edge array T</p>
    <p>im e (s</p>
    <p>) Data layout</p>
    <p>Pagerank Algorithm</p>
    <p>adjacency list edge array</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Data layout</p>
    <p>BFS Algorithm</p>
  </div>
  <div class="page">
    <p>Which is better?</p>
    <p>adjacency list edge array T</p>
    <p>im e (s</p>
    <p>) Data layout</p>
    <p>Pagerank Pre-processing Algorithm</p>
    <p>adjacency list edge array</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Data layout</p>
    <p>BFS Pre-processing Algorithm</p>
  </div>
  <div class="page">
    <p>Adjacency lists always wins?</p>
    <p>adjacency list edge array</p>
    <p>SPMV</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Pre-processing Algorithm</p>
    <p>SpMV  one pass over the edge array</p>
    <p>Pre-processing not amortized</p>
    <p>Cost is = pass over edge array</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>o Radix sort wins for adjacency lists</p>
    <p>o BFS: Adj. list PR: Adj.list SpMV: Edge array</p>
    <p>Algorithm</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Memory accesses  edge arrays</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Vertex state array: Edge array:</p>
    <p>Fetch edge:</p>
    <p>Fetch state of source:</p>
    <p>S(0)</p>
    <p>Fetch state of destination:</p>
    <p>S(3)</p>
  </div>
  <div class="page">
    <p>Memory accesses  edge arrays</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Vertex state array: Edge array:</p>
    <p>Fetch edge: 0 - 3</p>
    <p>Fetch state of source:</p>
    <p>S(0)</p>
    <p>Fetch state of destination:</p>
    <p>S(3)</p>
    <p>Cache-friendly edge read</p>
  </div>
  <div class="page">
    <p>Memory accesses  edge arrays</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Vertex state array: Edge array:</p>
    <p>Fetch edge: 0 - 3</p>
    <p>Fetch state of source: S(0)</p>
    <p>Fetch state of destination:</p>
    <p>S(3)</p>
    <p>Cache-friendly edge read x Potentially random access to source state</p>
  </div>
  <div class="page">
    <p>Memory accesses  edge arrays</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Vertex state array: Edge array:</p>
    <p>Fetch edge: 0 - 3</p>
    <p>Fetch state of source: S(0)</p>
    <p>Fetch state of destination: S(3)</p>
    <p>Cache-friendly edge read x Potentially random access to source state x Random access to destination state</p>
  </div>
  <div class="page">
    <p>Memory accesses  adjacency lists</p>
    <p>Adjacency list</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Fetch edge:</p>
    <p>Fetch state of source:</p>
    <p>Fetch state of destination:</p>
    <p>S(0)</p>
    <p>S(3)</p>
    <p>Vertex state array:</p>
  </div>
  <div class="page">
    <p>Memory accesses  adjacency lists</p>
    <p>Adjacency list</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Fetch edge:</p>
    <p>Fetch state of source:</p>
    <p>Fetch state of destination:</p>
    <p>S(3)</p>
    <p>Vertex state array:</p>
  </div>
  <div class="page">
    <p>Memory accesses  adjacency lists</p>
    <p>Adjacency list</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Fetch edge:</p>
    <p>Fetch state of source:</p>
    <p>Fetch state of destination:</p>
    <p>S(3)</p>
    <p>Cache-friendly edge read</p>
    <p>Vertex state array:</p>
  </div>
  <div class="page">
    <p>Memory accesses  adjacency lists</p>
    <p>Adjacency list</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Fetch edge:</p>
    <p>Fetch state of source:</p>
    <p>Fetch state of destination:</p>
    <p>S(0) S(3)</p>
    <p>Cache-friendly edge read Cache-friendly source state read</p>
    <p>Vertex state array:</p>
  </div>
  <div class="page">
    <p>Memory accesses  adjacency lists</p>
    <p>Adjacency list</p>
    <p>S(0)</p>
    <p>S(1)</p>
    <p>S(2)</p>
    <p>S(3)</p>
    <p>Fetch edge:</p>
    <p>Fetch state of source:</p>
    <p>Fetch state of destination:</p>
    <p>S(0)</p>
    <p>S(3)</p>
    <p>Cache-friendly edge read Cache-friendly source state read x Random access to destination state</p>
    <p>Vertex state array:</p>
  </div>
  <div class="page">
    <p>LLC miss rate</p>
    <p>Data layout BFS PageRank Edge array 57% 83%</p>
    <p>Adjacency list 63% 78%</p>
  </div>
  <div class="page">
    <p>LLC miss rate</p>
    <p>Data layout BFS PageRank Edge array 57% 83%</p>
    <p>Adjacency list 63% 78%</p>
    <p>Q: Can the miss rate be improved ? At what cost?</p>
  </div>
  <div class="page">
    <p>Improving cache locality</p>
    <p>Idea: Constrain the number of vertices accessed Solution: Use out-of core technique  2D Grid [from GridGraph]</p>
  </div>
  <div class="page">
    <p>Improving cache locality</p>
    <p>Idea: Constrain the number of vertices accessed Solution: Use out-of core technique  2D Grid [from GridGraph]</p>
    <p>Edges placed in a cell:</p>
    <p>Row of source vertex</p>
    <p>Column of destination vertex</p>
  </div>
  <div class="page">
    <p>Improving cache locality</p>
    <p>Idea: Constrain the number of vertices accessed Solution: Use out-of core technique  2D Grid [from GridGraph]</p>
    <p>Edges placed in a cell:</p>
    <p>Row of source vertex</p>
    <p>Column of destination vertex</p>
  </div>
  <div class="page">
    <p>Improving cache locality</p>
    <p>Idea: Constrain the number of vertices accessed Solution: Use out-of core technique  2D Grid [from GridGraph]</p>
    <p>Edges placed in a cell:</p>
    <p>Row of source vertex</p>
    <p>Column of destination vertex</p>
  </div>
  <div class="page">
    <p>Improving cache locality</p>
    <p>Idea: Constrain the number of vertices accessed Solution: Use out-of core technique  2D Grid [from GridGraph]</p>
    <p>Edges placed in a cell:</p>
    <p>Row of source vertex</p>
    <p>Column of destination vertex</p>
  </div>
  <div class="page">
    <p>Improving cache locality</p>
    <p>Idea: Constrain the number of vertices accessed Solution: Use out-of core technique  2D Grid [from GridGraph]</p>
    <p>Edges placed in a cell:</p>
    <p>Row of source vertex</p>
    <p>Column of destination vertex</p>
    <p>Compute over cells of row or column</p>
  </div>
  <div class="page">
    <p>Cache-miss rate: Grid</p>
    <p>Data layout BFS PageRank Edge array 57% 83%</p>
    <p>Adjacency list 63% 78%</p>
  </div>
  <div class="page">
    <p>adj list edge array grid</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Data layout</p>
    <p>BFS Algorithm</p>
    <p>Evaluation: cache-optimization (BFS)</p>
  </div>
  <div class="page">
    <p>Evaluation: cache-optimization (BFS)</p>
    <p>adj list edge array grid</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Data layout</p>
    <p>BFS Pre-processing Algorithm</p>
  </div>
  <div class="page">
    <p>Evaluation: cache-optimization (BFS)</p>
    <p>adj list edge array grid</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Data layout</p>
    <p>BFS Pre-processing Algorithm</p>
    <p>Adjacency lists have the best performance on BFS.</p>
  </div>
  <div class="page">
    <p>Evaluation: cache-optimization (PageRank)</p>
    <p>adj list edge array grid</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Data Layout</p>
    <p>Algorithm</p>
  </div>
  <div class="page">
    <p>Evaluation: cache-optimization (PageRank)</p>
    <p>adj list edge array grid</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Data Layout</p>
    <p>Pre-processing Algorithm</p>
  </div>
  <div class="page">
    <p>Evaluation: cache-optimization (PageRank)</p>
    <p>adj list edge array grid</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Data Layout</p>
    <p>Pre-processing Algorithm</p>
    <p>For Pagerank, the grid is the winning approach.</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>o Radix sort wins for adjacency lists</p>
    <p>o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>Algorithm o Yes. By laying out the edges in a grid format o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>NUMA-Aware optimizations</p>
    <p>NUMA-Aware data placement</p>
    <p>Additional partitioning step in the pre-processing phase</p>
    <p>NUMA-Aware computation</p>
    <p>Threads compute on local data</p>
    <p>Evaluation environment</p>
    <p>Machine A: 2 NUMA nodes, 128GB DRAM, 16 Cores</p>
    <p>Machine B: 4 NUMA nodes, 256GB DRAM, 32 Cores</p>
  </div>
  <div class="page">
    <p>NUMA-Aware data placement</p>
    <p>NUMA node 1</p>
    <p>NUMA node 2</p>
    <p>Vertices spread across NUMA nodes</p>
    <p>Edges collocated with their destination vertex</p>
  </div>
  <div class="page">
    <p>NUMA-Aware data placement</p>
    <p>NUMA node 1</p>
    <p>NUMA node 2</p>
    <p>Vertices spread across NUMA nodes</p>
    <p>Edges collocated with their destination vertex</p>
  </div>
  <div class="page">
    <p>NUMA-Aware data placement</p>
    <p>NUMA node 1</p>
    <p>NUMA node 2</p>
    <p>Vertices spread across NUMA nodes</p>
    <p>Edges collocated with their destination vertex</p>
  </div>
  <div class="page">
    <p>PageRank</p>
    <p>interleaved NUMA interleaved NUMA</p>
    <p>A A B B</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Algorithm</p>
    <p>MA: 2 NUMA nodes MB: 4 NUMA nodes</p>
  </div>
  <div class="page">
    <p>PageRank</p>
    <p>interleaved NUMA interleaved NUMA</p>
    <p>A A B B</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Algorithm</p>
    <p>MA: 2 NUMA nodes MB: 4 NUMA nodes</p>
  </div>
  <div class="page">
    <p>PageRank</p>
    <p>interleaved NUMA interleaved NUMA</p>
    <p>A A B B</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Pre-processing Partitioning Algorithm</p>
    <p>MA: 2 NUMA nodes MB: 4 NUMA nodes</p>
  </div>
  <div class="page">
    <p>PageRank</p>
    <p>interleaved NUMA interleaved NUMA</p>
    <p>A A B B</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
    <p>Pre-processing Partitioning Algorithm</p>
    <p>MA: 2 NUMA nodes MB: 4 NUMA nodes</p>
    <p>Pre-processing amortized only on Machine B</p>
  </div>
  <div class="page">
    <p>BFS</p>
    <p>interleaved NUMA interleaved NUMA</p>
    <p>A A B B</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Algorithm</p>
    <p>MA: 2 NUMA nodes MB: 4 NUMA nodes</p>
  </div>
  <div class="page">
    <p>BFS</p>
    <p>interleaved NUMA interleaved NUMA</p>
    <p>A A B B</p>
    <p>T im</p>
    <p>e (</p>
    <p>s e c )</p>
    <p>Algorithm</p>
    <p>MA: 2 NUMA nodes MB: 4 NUMA nodes</p>
    <p>No gain in algorithm time, contention on memory bus</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>o Radix sort wins for adjacency lists</p>
    <p>o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>Algorithm o Yes. By laying out the edges in a grid format o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>o Can pay off only on big machines</p>
    <p>o BFS &amp; SpMV: No gain PR: NUMA-optimize</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Information flow</p>
    <p>Push</p>
    <p>You push information to your neighbors  You need outgoing edges</p>
    <p>Pull</p>
    <p>You pull information from your neighbors  You need incoming edges</p>
  </div>
  <div class="page">
    <p>Which one is better?</p>
    <p>Push</p>
    <p>You push information to your neighbors - write to state of others</p>
    <p>Pull</p>
    <p>You pull information from your neighbors  write to own state</p>
  </div>
  <div class="page">
    <p>Which one is better?</p>
    <p>Push</p>
    <p>You push information to your neighbors - write to state of others Good when few vertices are active x Needs locks</p>
    <p>Pull</p>
    <p>You pull information from your neighbors  write to own state Good when many vertices are active Locks can be avoided</p>
  </div>
  <div class="page">
    <p>PUSH vs. PULL  BFS &amp; PR</p>
    <p>adj. push adj. pull</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Information flow</p>
    <p>Pre-processing</p>
    <p>grid (push) grid (pull)</p>
    <p>Pre-processing Algorithm</p>
    <p>BFS Pagerank</p>
    <p>Information flow</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>o Radix sort wins for adjacency lists</p>
    <p>o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>Algorithm o Yes. By laying out the edges in a grid format o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>o Can pay off only on big machines</p>
    <p>o BFS &amp; SpMV: No gain PR: NUMA-optimize</p>
    <p>o Less synchronization not always a win o BFS: Push (locks) PR: Pull (no locks)</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Push &amp; Pull both win in different situations</p>
    <p>Combine them</p>
    <p>Use push when it is efficient</p>
    <p>Use pull when it is efficient</p>
    <p>Cost: You need both, incoming and outgoing edges</p>
  </div>
  <div class="page">
    <p>Benefit of Push/Pull</p>
    <p>adj. push adj. pull adj. push/pull</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Information flow</p>
    <p>BFS</p>
  </div>
  <div class="page">
    <p>Benefit of Push/Pull</p>
    <p>adj. push adj. pull adj. push/pull</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>Information flow</p>
    <p>Pre-processing Algorithm</p>
    <p>BFS</p>
  </div>
  <div class="page">
    <p>Questions we want to answer:</p>
    <p>How to represent the graph?</p>
    <p>Cost of creating the representation?</p>
    <p>What data layout is best?</p>
    <p>Can we improve cache locality?</p>
    <p>Should we optimize for NUMA?</p>
    <p>Information flow: push, pull or a both?</p>
    <p>o Adjacency lists Edge arrays</p>
    <p>o Radix sort wins for adjacency lists</p>
    <p>o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>Algorithms o Yes. By laying out the edges in a grid format o BFS: Adj. list PR: Grid SpMV: Edge array</p>
    <p>o Can pay off only on big machines</p>
    <p>o BFS &amp; SpMV: No gain PR: NUMA-optimize</p>
    <p>o Less synchronization not always a win o BFS: Push (locks) PR: Pull (no locks) o Push/Pull no win in end-to-end (directed graphs)</p>
    <p>Pre-processing</p>
  </div>
  <div class="page">
    <p>Additional results in the paper</p>
    <p>Scalability of pre-processing approaches</p>
    <p>Relation between pre-processing and loading from HDD and SSD</p>
    <p>Results on other algorithms</p>
    <p>Results for different graph types</p>
  </div>
  <div class="page">
    <p>Systems that motivated the paper</p>
    <p>System DataLayout Iteration Model Push or</p>
    <p>Pull NUMAAware</p>
    <p>Ligra [PPoPP 13] Adj. List Vertex-centric Push &amp; Pull</p>
    <p>Polymer [PPoPP 15] Adj. List Vertex-centric Push &amp; Pull</p>
    <p>Gemini [OSDI16] Adj. List Vertex-centric Push &amp; Pull</p>
    <p>X-Stream [SOSP13] Edge Array Edge-centric Push</p>
    <p>GridGraph [ATC 15] Grid Grid-cell Push</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Edge arrays</p>
    <p>Adjacency lists</p>
    <p>Sorting techniques</p>
    <p>Cache-optimizations</p>
    <p>Push vs. Pull</p>
    <p>Synchronization</p>
    <p>NUMA-aware computation</p>
    <p>Pre-processing Algorithm time</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>v Improvement in computation is not free v Trade-off between added pre-processing time and algorithm time</p>
    <p>Whether optimization cost in pre-processing is amortized, depends on algorithm:</p>
    <p>SpMV: Short algorithm and does not benefit from additional optimizations</p>
    <p>BFS: Building adjacency lists</p>
    <p>Pagerank: Optimizing for cache locality (grid) &amp; NUMA-Awareness</p>
    <p>Fork us on GitHub: https://github.com/epfl-labos/EverythingGraph.git</p>
  </div>
</Presentation>
