<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Static Checking of Dynamically-Varying Security Policies in Database-Backed</p>
    <p>Applications</p>
    <p>Adam Chlipala OSDI 2010</p>
  </div>
  <div class="page">
    <p>Beyond Code Injection</p>
    <p>An application includes an unintended runtime program interpreter</p>
    <p>Dependent on applicationspecific authentication and access control regimes!</p>
    <p>....</p>
  </div>
  <div class="page">
    <p>Authentication Snafus</p>
  </div>
  <div class="page">
    <p>Surprise attack</p>
    <p>Security Policy</p>
    <p>Roads to Security</p>
    <p>Resource</p>
    <p>Attack vector #1</p>
    <p>Attack vector #2</p>
    <p>Attack vector #3</p>
    <p>Audit</p>
    <p>Audit</p>
    <p>Audit</p>
    <p>Information flow: who can learn what</p>
    <p>Access control: who can change what</p>
  </div>
  <div class="page">
    <p>Dynamic Checking Database</p>
    <p>Program Variable</p>
    <p>Sensitive Datum</p>
    <p>Program Variable</p>
    <p>Program Variable</p>
    <p>Output to User</p>
    <p>Store security information with values Check before interaction with environment.</p>
    <p>Pros Easy to add to existing programs Flexibility in coding security checks Cons Bugs are only found for program paths that are tested. Performance overhead</p>
  </div>
  <div class="page">
    <p>Static Checking Database</p>
    <p>Program Variable</p>
    <p>Program Variable</p>
    <p>Program Variable</p>
    <p>Output to User</p>
    <p>Pros Checks all program paths at compile time No changes to run-time behavior required Cons Usually requires extensive program annotation Limited policy expressiveness</p>
    <p>Type Type Type</p>
    <p>Type</p>
    <p>Type</p>
    <p>Sensitive Datum High Security Low Security</p>
    <p>Subtyping check</p>
  </div>
  <div class="page">
    <p>The Best of Both Worlds</p>
    <p>The</p>
    <p>UrFlow analysis</p>
    <p>for the Ur/Web</p>
    <p>programming language</p>
    <p>Like Dynamic Checking: No program annotations required Flexible and programmer-accessible policy language (SQL)</p>
    <p>Like Security Typing: Checks all program paths statically No run-time overhead</p>
  </div>
  <div class="page">
    <p>A Word About Ur/Web</p>
    <p>queryX (SELECT * FROM t) (fn row =&gt; &lt;xml&gt;&lt;tr&gt; &lt;td&gt;{[row.T.A]}&lt;/td&gt; &lt;td&gt;{[row.T.B]}&lt;/td&gt; &lt;td&gt;{[row.T.C]}&lt;/td&gt; &lt;td&gt;{[row.T.D]}&lt;/td&gt; &lt;td&gt;&lt;form&gt;&lt;submit action={delete row.T.A} value=&quot;Delete&quot;/&gt; &lt;/form&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/xml&gt;);</p>
    <p>Integrated parsing and type-checking of SQL and HTML</p>
  </div>
  <div class="page">
    <p>Simple Policies</p>
    <p>policy sendClient (SELECT Id, Name FROM Secrets)</p>
    <p>Id Name Secret</p>
    <p>Secrets</p>
    <p>Client may learn anything this query</p>
    <p>could return.</p>
  </div>
  <div class="page">
    <p>Reasoning About Knowledge</p>
    <p>policy sendClient (SELECT * FROM Secrets WHERE known(Code))</p>
    <p>Id Name Secret Code</p>
    <p>Secrets</p>
  </div>
  <div class="page">
    <p>What is known? Web page that generated this requestApp source</p>
    <p>foo</p>
    <p>AUTH</p>
    <p>(Username, Password) = (U, P)</p>
    <p>Cookies</p>
    <p>n</p>
    <p>v</p>
    <p>known: foo 42 n v (U, P)</p>
    <p>U P</p>
    <p>((42, v), P)</p>
    <p>(foo, n) (42, v)</p>
  </div>
  <div class="page">
    <p>Multi-Table Policies</p>
    <p>policy sendClient (SELECT Secret FROM Secrets, Users WHERE Owner = Users.Id AND known(Password))</p>
    <p>Id Name Secret Owner</p>
    <p>Secrets</p>
    <p>Id Name Password</p>
    <p>Users</p>
  </div>
  <div class="page">
    <p>Understanding SQL Usage Program Execution</p>
    <p>...</p>
    <p>... (U, P) = readCookie(AUTH); pass = SELECT Password FROM Users WHERE Id = U; if (pass != P) abort(); ... ... ... rows = SELECT Secret FROM Secrets WHERE Owner = U; // Send rows to client.... ...</p>
    <p>u  Users. u.Id = U  u.Password = P</p>
    <p>v. mightSend(v)   s  Secrets. s.Owner = U  v = s.Secret</p>
    <p>known (U, P)</p>
  </div>
  <div class="page">
    <p>Understanding SQL Usage</p>
    <p>u  Users. u.Id = U  u.Password = P</p>
    <p>v. mightSend(v)   s  Secrets. s.Owner = U  v = s.Secret</p>
    <p>known (U, P)</p>
    <p>policy sendClient (SELECT Secret FROM Secrets, Users WHERE Owner = Users.Id AND known(Password))</p>
    <p>s  Secrets.  u  Users. s.Owner = u.Id  known(u.Password)  allowed(s.Secret)</p>
    <p>Prove:  v. mightSend(v)  allowed(v)</p>
  </div>
  <div class="page">
    <p>UrFlow Sketch Program Code Policies (SQL)</p>
    <p>Policies (First-Order Logic)</p>
    <p>Finite set of execution paths</p>
    <p>Symbolic executions</p>
    <p>State: P1 P2 P3 ... PN</p>
    <p>Check:</p>
    <p>Q1 Q2 ...</p>
    <p>Automated Theorem-Prover</p>
    <p>P2 /\ policies =&gt; Q1</p>
  </div>
  <div class="page">
    <p>Fancier Policies</p>
    <p>policy sendClient (SELECT Body FROM Messages, ACL, Users WHERE ACL.Forum = Messages.Forum AND ACL.User = User.Id AND known(Password) AND Level &gt;= 42)</p>
    <p>Forum Body</p>
    <p>Messages</p>
    <p>Id Password</p>
    <p>Users</p>
    <p>Forum User Level</p>
    <p>ACL</p>
  </div>
  <div class="page">
    <p>Write Policies</p>
    <p>policy mayInsert (SELECT * FROM Secrets AS New, Users WHERE New.Owner = Users.Id AND known(Password) AND known(New.Secret))</p>
    <p>Id Name Secret Owner</p>
    <p>Secrets</p>
    <p>Id Name Password</p>
    <p>Users</p>
  </div>
  <div class="page">
    <p>Case Studies</p>
  </div>
  <div class="page">
    <p>Progress</p>
    <p>Programming Languages Researchers</p>
    <p>Practitioners</p>
    <p>Imperative programs are too hard to analyze!</p>
    <p>Just use declarative languages, and your life will be</p>
    <p>so much easier.</p>
    <p>Database</p>
    <p>App</p>
    <p>Maybe later. I'm going to get back to coding my web application, which does almost nothing besides SQL</p>
    <p>queries.</p>
    <p>UrFlow</p>
  </div>
  <div class="page">
    <p>Ur/Web Available At:</p>
    <p>http://www.impredicative.com/ur/</p>
    <p>Including online demos with syntax-highlighted source code</p>
  </div>
</Presentation>
