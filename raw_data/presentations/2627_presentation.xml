<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>JITSU: JUST-IN-TIME SUMMONING OF UNIKERNELS</p>
    <p>Anil Madhavapeddy University of Cambridge @avsm</p>
    <p>Magnus Skjegstad University of Cambridge @MagnusSkjegstad</p>
    <p>on behalf of: Thomas Gazagnaire, David Scott, Richard Mortier, Thomas Leonard, David Sheets, Amir Chaudhry, Jon Ludlam, Balraj Singh, Jon Crowcroft, Ian Leslie</p>
    <p>http://openmirage.org/ http://decks.openmirage.org/nsdi2015/</p>
    <p>Press &lt;esc&gt; to view the slide index, and the &lt;arrow&gt; keys to navigate.</p>
  </div>
  <div class="page">
    <p>THE IOT SPRING</p>
  </div>
  <div class="page">
    <p>FASTER THAN LIGHT? Many network services suffer as latency increases, e.g.,</p>
    <p>Siri Google Glass</p>
    <p>...to say nothing of how they operate when disconnected.</p>
    <p>So let's move the computation closer to the data and reduce dependency on a remote cloud</p>
  </div>
  <div class="page">
    <p>THE PAST YEAR Heartbleed: 17% of all Internet secure web servers vulnerable to a single bug. Described as &quot;catastrophic&quot; by Bruce Schneier. ShellShock: CGI, Web, DHCP all vulnerable to code execution. Millions of sites potentially vulnerable. JP Morgan: 76 million homes and 8 million small businesses exposed in a single data breach. Target: 40 million credit cards stolen electronically.</p>
    <p>System security is in a disastrous state, and seemingly getting worse with IoT.</p>
  </div>
  <div class="page">
    <p>STRONGER THAN STEEL? We earlier noted the many recent network security problems:</p>
    <p>Heartbleed Shellshock</p>
    <p>...and such bugs will reoccur, now in our homes, cars, fridges</p>
    <p>So let's build fundamentally more robust edge network services</p>
  </div>
  <div class="page">
    <p>THE CHALLENGES VMs are the strongest practical isolation on physical devices</p>
    <p>But resource heavy on embedded devices Long boot times and management overheads</p>
    <p>Containers are really easy to use But isolation is poor due to wide interfaces Often requires disk I/O to boot</p>
    <p>Can we eliminate tradeoff between latency and isolation at the edge?</p>
  </div>
  <div class="page">
    <p>MEANWHILE, IN YOUR CAR...</p>
    <p>-- via embedded-computing.com @whitequark</p>
  </div>
  <div class="page">
    <p>THE UNIKERNEL APPROACH Unikernels are specialised virtual machine</p>
    <p>images compiled from the full stack of application code, system libraries and config</p>
    <p>This means they realise several benefits:</p>
    <p>Contained, simplifying deployment and management. Compact, reducing attack surface and boot times. Efficient, able to better use host resources.</p>
  </div>
  <div class="page">
    <p>REAL TIME BOOT Unikernels can boot and respond to network traffic in real-time.</p>
    <p>See Also: HotCloud 2011, ASPLOS 2013, Communications of the ACM Jan 2014</p>
  </div>
  <div class="page">
    <p>CONTRIBUTIONS Built platform support required for ARM cloud deployments:</p>
    <p>Ported unikernels to the new Xen/ARMv7 architecture</p>
    <p>Runs VMs on commodity ARM hardware (Cubieboard) Type-safe, native code down to the device drivers</p>
    <p>Constructed Jitsu toolstack to launch unikernels ondemand</p>
    <p>Race-free booting of unikernels in response to DNS Evaluated against alternative service isolation techniques</p>
    <p>E.g. Docker containers</p>
  </div>
  <div class="page">
    <p>ARTIFACT: MIRAGE OS 2.0 These slides were written using MirageOS on Mac OS X:</p>
    <p>They are hosted in a 2MB Xen unikernel written in statically type-safe OCaml, including device drivers and network stack.</p>
    <p>Their application logic is just a couple of source files, written independently of any OS dependencies.</p>
    <p>Running on an ARM CubieBoard2, and hosted on the cloud.</p>
    <p>Binaries small enough to track the entire deployment in Git!</p>
  </div>
  <div class="page">
    <p>ARTIFACT: MIRAGE OS 2.0</p>
  </div>
  <div class="page">
    <p>JUST-IN-TIME SUMMONING A toolstack to launch unikernels on-demand with low latency:</p>
    <p>Performance improvements to Xen's boot process &amp; toolstack</p>
    <p>Are VMs fundamentally too slow for real-time launch? Currently: 3-4s to boot a Linux VM on ARM</p>
    <p>Conduit, shared-memory communication between unikernels Low-latency toolstack communications Currently: loopback TCP over bridge</p>
    <p>Synjitsu and the Jitsu Directory Service Launch services on-demand in real time</p>
  </div>
  <div class="page">
    <p>JITSU ARCHITECTURE</p>
  </div>
  <div class="page">
    <p>XEN/ARM TOOLSTACK Required a new &quot;MiniOS&quot; for Xen/ARMv7 architecture.</p>
    <p>Removal of libc reduces attack surface and image size Vast majority of networking code in pure OCaml</p>
    <p>Xen PV driver model only  no hardware emulation ARM does not need all the legacy support of Xen/x86!</p>
    <p>Much less CPU available, so need to optimise toolstack Linux VM takes 3-4s to boot on Cubieboard</p>
  </div>
  <div class="page">
    <p>PARALLEL BOOT</p>
    <p>Improving inter-VM XenStore coordination database had scaling problems with concurrency conflicts, resolved via custom merge functions.</p>
  </div>
  <div class="page">
    <p>DESERIALISATION</p>
    <p>Methodical elimination of forking crimes such as dom0 shell scripts</p>
  </div>
  <div class="page">
    <p>CONDUIT Establishes zero-copy shared-memory pages between peers</p>
    <p>Xen grant tables map pages between VMs (/dev/gntmap), synchronised via event channels (/dev/evtchn)</p>
    <p>Provides a rendezvous facility for VMs to discover named peers Also supports unikernel and legacy VM rendezvous</p>
    <p>Hooks into higher-level name services like DNS</p>
    <p>Compatible with the vchan inter-VM communication protocol</p>
    <p>Code: https://github.com/mirage/ocaml-conduit</p>
  </div>
  <div class="page">
    <p>RENDEZVOUS XenStore acts as an incoming connection queue Client requests are registered in a new /conduit subtree Client picks port and writes to the target listen queue Connection metadata (grant table, event channel refs) is written into /local/domain/domid/vchan</p>
    <p>...and the data flows</p>
  </div>
  <div class="page">
    <p>JITSU DIRECTORY SERVICE Performs the role of Unix's inetd:</p>
    <p>Jitsu VM launches at boot time to handle name resolution (whether local via a well known jitsud Conduit node in XenStore or remote via DNS)</p>
    <p>When a request arrives for a live unikernel, Jitsu returns the appropriate endpoint</p>
    <p>If the unikernel is not live, Jitsu boots it, and acts as proxy until the unikernel is ready</p>
  </div>
  <div class="page">
    <p>MASKING BOOT LATENCY</p>
    <p>The Jitsu toolstack listens for DNS requests and boots the relevant unikernel and responds immediately.</p>
  </div>
  <div class="page">
    <p>MASKING BOOT LATENCY</p>
    <p>But a fast client might still lose a TCP SYN if unikernel isnt ready, thus causing SYN retransmits (slow!).</p>
  </div>
  <div class="page">
    <p>MASKING BOOT LATENCY</p>
    <p>Synjitsu responds to requests and serialises connection state until VM is ready and network plugged in.</p>
  </div>
  <div class="page">
    <p>MASKING BOOT LATENCY</p>
    <p>By buffering TCP requests into XenStore and then replaying, Synjitsu parallelises connection setup and unikernel boot</p>
  </div>
  <div class="page">
    <p>MASKING BOOT LATENCY Jitsu optimisations bring boot latency down to ~3045 ms (x86) and ~350400 ms (ARM).</p>
    <p>Docker time was 1.1s (Linux), 1.2s (Xen) from an SD card Mounting Docker's volumes on an ext4 loopback volume inside of a tmpfs reduced latency but often terminated early due to many buffer IO, e xt4 and VFS errors</p>
  </div>
  <div class="page">
    <p>DEMO Walkthrough of the key functionality with and without Synjitsu: https://www.dropbox.com/s/ra5qib321d53nfi/nsdi_screencast.mov</p>
  </div>
  <div class="page">
    <p>SUMMARY Xen/ARM is here! Good way to run embedded experiments.</p>
    <p>GitHub build scripts: GitHub libraries: protocol code at Robust existing Xen tools all continue to work. Jitsu optimises away a lot of latency at the edge.</p>
    <p>No fundamental drawback to VMs vs containers Unikernels competitive with containers on embedded Shipping out specialised type-safe code is practical Not touching disk while booting further improves latency</p>
    <p>mirage/xen-arm-builder openmirage.org</p>
  </div>
  <div class="page">
    <p>ONGOING WORK Multiprotocol Synjitsu</p>
    <p>Extend to the TLS handshake to pipeline secure connections Add vanilla TCP load balancing support</p>
    <p>Wide area redirection DNS proxy to redirect to cloud if ARM node is down First ARM cloud hosting via</p>
    <p>More platforms Integrating to boot without Xen Working with partners to provide home router platform for future deployments</p>
    <p>Scaleway</p>
    <p>rump kernels UCN</p>
  </div>
  <div class="page">
    <p>HTTP://OPENMIRAGE.ORG/ A Linux Foundation Incubator Project lead from the University of Cambridge and Citrix Systems.</p>
    <p>Featuring blog posts on new features by:</p>
    <p>, , , , , , ,</p>
    <p>, and .</p>
    <p>Amir Chaudhry Thomas Gazagnaire David Kaloper Thomas Leonard Jon Ludlam Hannes Mehnert Mindy Preston Dave Scott Jeremy Yallop</p>
    <p>Thanks for listening! Questions? Contributions very welcome at</p>
    <p>Mailing list at openmirage.org</p>
    <p>mirageos-devel@lists.xenproject.org</p>
  </div>
</Presentation>
