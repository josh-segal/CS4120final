<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Asynchronous Zero-copy Communication for Synchronous</p>
    <p>Sockets in the Sockets Direct Protocol over</p>
    <p>InfiniBand P. Balaji, S. Bhagvat, H. W. Jin and D. K. Panda</p>
    <p>Network Based Computing Laboratory (NBCL)</p>
    <p>Computer Science and Engineering</p>
    <p>Ohio State University</p>
  </div>
  <div class="page">
    <p>InfiniBand Overview</p>
    <p>An emerging industry standard</p>
    <p>High Performance  Low latency (about 2us)</p>
    <p>High Throughput (8Gbps, 16Gbps and higher)</p>
    <p>Advanced Features  Hardware offloaded protocol stack</p>
    <p>Kernel bypass  direct access to network for</p>
    <p>applications</p>
    <p>RDMA operations  direct access to remote memory</p>
  </div>
  <div class="page">
    <p>Sockets Direct Protocol (SDP)</p>
    <p>High-Performance Alternative to TCP/IP sockets for IB, etc.</p>
    <p>Hijack and redirect socket calls</p>
    <p>Application transparent  Binary compatibility (most</p>
    <p>cases)</p>
    <p>Utilizes IB capabilities  Offloaded Protocol</p>
    <p>RDMA operations</p>
    <p>Kernel bypass</p>
    <p>Sockets Direct Protocol</p>
    <p>App #1 App #2</p>
    <p>High-speed Network</p>
    <p>Device Driver</p>
    <p>IP</p>
    <p>TCP</p>
    <p>Traditional Sockets</p>
    <p>Sockets Interface</p>
    <p>Offloaded Protocol</p>
    <p>App #N</p>
    <p>Advanced Features</p>
  </div>
  <div class="page">
    <p>Sockets APIs Supported by SDP</p>
    <p>Synchronous Sockets</p>
    <p>Asynchronous Sockets</p>
    <p>Extended Sockets (OSU Specific)*</p>
    <p>Communication Synchronous Asynchronous Asynchronous</p>
    <p>Operations Outstanding</p>
    <p>At most one More than one More than one</p>
    <p>SDP Implementations</p>
    <p>BSDP, ZSDP BSDP, ZSDP BSDP, ZSDP</p>
    <p>Existing Applications</p>
    <p>Most Few Very few</p>
    <p>Potential for Performance</p>
    <p>Limited High High</p>
    <p>(Portions of this table have been borrowed from Mellanox Technologies)* RAIT05: Supporting iWARP compatibility and features for regular network</p>
    <p>adapters. P. Balaji, H. W. Jin, K. Vaidyanathan and D. K. Panda. RAIT Workshop; in conjunction with Cluster 05</p>
    <p>BSDP, ZSDP, AZ-SDP</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Background</p>
    <p>Understanding Asynchronous Zero-copy SDP</p>
    <p>Design Issues in AZ-SDP</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Buffer-copy SDP (BSDP)</p>
    <p>Several buffer-copy</p>
    <p>based implementations</p>
    <p>of SDP exist  OSU, Mellanox, Voltaire</p>
    <p>HCA offloads transport</p>
    <p>and network layers</p>
    <p>Copy overhead still</p>
    <p>present</p>
    <p>Data Source</p>
    <p>App Buffer</p>
    <p>App Buffer</p>
    <p>SDP Buffer</p>
    <p>SDP Buffer</p>
    <p>SDP</p>
    <p>Buffer</p>
    <p>SDP Buffer</p>
    <p>SDP Buffer</p>
    <p>SDP</p>
    <p>Buffer</p>
    <p>Data Sink</p>
    <p>SDP Data Message</p>
    <p>ISPASS04: Sockets Direct Protocol over InfiniBand in Clusters: Is it Beneficial?. P. Balaji, S. Narravula, K. Vaidyanathan, S. Krishnamoorthy and D. K. Panda. IEEE International Conference on Performance Analysis of Systems and Software (ISPASS), 2004.</p>
  </div>
  <div class="page">
    <p>Zero-copy SDP (ZSDP)  Implemented by Mellanox</p>
    <p>RDMA Read based design</p>
    <p>Benefits of zero-copy</p>
    <p>Limited by the API of Synchronous Sockets  At most one outstanding</p>
    <p>communication request</p>
    <p>Control message latency (50% time for 16K message)</p>
    <p>Intolerant to Skew Data Source</p>
    <p>App Buffer</p>
    <p>Data Sink</p>
    <p>SRC AVAIL</p>
    <p>App Buffer</p>
    <p>send()</p>
    <p>Send Complete</p>
    <p>Application Blocks</p>
    <p>App Buffer</p>
    <p>SRC AVAIL</p>
    <p>App Buffer</p>
    <p>send()</p>
    <p>Send Complete</p>
    <p>Application Blocks</p>
    <p>GET COMPLETE</p>
    <p>GET COMPLETE</p>
  </div>
  <div class="page">
    <p>Asynchronous Zero-copy SDP (AZ-SDP)</p>
    <p>Basic zero-copy communication is synchronous  Data communication accompanied by control messages</p>
    <p>Communication will be latency bound</p>
    <p>Asynchronous Zero-copy SDP  Utilize the benefits of asynchronous communication</p>
    <p>(more than one outstanding communication operation)</p>
    <p>Maintain the semantics of synchronous sockets (application can assume that it is using synchronous sockets)</p>
    <p>Objectives: Correctness, Transparency and Performance</p>
    <p>Key Idea: Memory protect buffers</p>
  </div>
  <div class="page">
    <p>Memory Protect</p>
    <p>Memory Protect</p>
    <p>AZ-SDP Functionality</p>
    <p>Send returns as soon as communication is initiated  Application thinks</p>
    <p>communication is synchronous</p>
    <p>Memory unprotected after communication completes</p>
    <p>If application touches buffer  Communication complete:</p>
    <p>Great!</p>
    <p>Else PAGE FAULT generated</p>
    <p>SRC AVAIL send()</p>
    <p>App Buffer1</p>
    <p>SRC AVAIL send()</p>
    <p>App Buffer2</p>
    <p>Memory Unprotect</p>
    <p>GET COMPLETE</p>
    <p>App Buffer1</p>
    <p>App Buffer2</p>
    <p>Data Source</p>
    <p>Data Sink</p>
    <p>Get Data</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Background</p>
    <p>Understanding Asynchronous Zero-copy SDP</p>
    <p>Design Issues in AZ-SDP</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Design Issues in AZ-SDP  Handling a Page Fault</p>
    <p>Block-on-Write: Wait till the communication has</p>
    <p>finished</p>
    <p>Copy-on-Write: Copy data to internal buffer and carry</p>
    <p>on communication</p>
    <p>Handling Buffer Sharing  Buffers shared through mmap()</p>
    <p>Handling Unaligned Buffers  Memory protection is only in the granularity of a page</p>
    <p>Malloc hook overheads</p>
  </div>
  <div class="page">
    <p>Handling a Page Fault  Memory protection needed to disallow the</p>
    <p>application from accessing an occupied</p>
    <p>communication buffer</p>
    <p>Page fault generated on access</p>
    <p>Number of page faults generated are application</p>
    <p>dependent</p>
    <p>Two approaches for handling the page-fault</p>
    <p>Block on Write</p>
    <p>Copy on Write</p>
  </div>
  <div class="page">
    <p>Memory Protect</p>
    <p>Block-on-Write</p>
    <p>Optimistic approach to avoid blocking for communication  ZSDP blocks during the</p>
    <p>communication call</p>
    <p>AZ-SDP delays blocking</p>
    <p>Advantage:  Zero-copy communication</p>
    <p>SDP specification compliant</p>
    <p>Disadvantage:  Not skew tolerant</p>
    <p>SRC AVAIL send()</p>
    <p>App Buffer1</p>
    <p>Memory Unprotect</p>
    <p>GET COMPLETE</p>
    <p>App Buffer1</p>
    <p>Data Source</p>
    <p>Data Sink</p>
    <p>Get Data</p>
    <p>Application touches buffer</p>
    <p>PAGE FAULT generated</p>
    <p>Block</p>
  </div>
  <div class="page">
    <p>Memory Protect</p>
    <p>Copy-on-Write</p>
    <p>Enhances the functionality of Block-on-Write  Does not blindly block</p>
    <p>Advantage:  Zero-copy communication</p>
    <p>when possible</p>
    <p>Skew tolerant when receiver is not ready</p>
    <p>Disadvantage  Not SDP specification</p>
    <p>compliant</p>
    <p>SRC AVAIL send()</p>
    <p>App Buffer1</p>
    <p>Memory Unprotect</p>
    <p>GET COMPLETE</p>
    <p>App Buffer1</p>
    <p>Data Source</p>
    <p>Data Sink</p>
    <p>Application touches buffer</p>
    <p>PAGE FAULT generated</p>
    <p>Block</p>
    <p>Atomic Lock</p>
    <p>Atomic Lock Failed</p>
    <p>App Buffer1</p>
    <p>Atomic Lock Successful</p>
    <p>Copy to temp. buffer</p>
    <p>SRC UPDATE</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Background</p>
    <p>Understanding Asynchronous Zero-copy SDP</p>
    <p>Design Issues in AZ-SDP</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Experimental Test-Bed</p>
    <p>4 node cluster</p>
    <p>Dual 3.6 GHz Intel Xeon EM64T processors (2 MB L2</p>
    <p>cache), 512 MB of 333 MHz DDR SDRAM</p>
    <p>Mellanox MT25208 InfiniHost III DDR PCI-Express</p>
    <p>adapters (capable of a link-rate of 16 Gbps)</p>
    <p>Mellanox MTS-2400, 24-port fully non-blocking DDR</p>
    <p>switch</p>
  </div>
  <div class="page">
    <p>Throughput and Comp./Comm. Overlap</p>
    <p>30% improvement in the throughput  Up to 2X improvement in computation/communication overlap</p>
    <p>tests</p>
  </div>
  <div class="page">
    <p>Impact of Page-faults</p>
    <p>When application touches the communication buffer very frequently, PAGE FAULT overheads degrade AZ-SDPs performance</p>
  </div>
  <div class="page">
    <p>Presentation Layout</p>
    <p>Introduction and Background</p>
    <p>Understanding Asynchronous Zero-copy SDP</p>
    <p>Design Issues in AZ-SDP</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Work</p>
    <p>Current Zero-copy SDP approaches: Very</p>
    <p>restrictive</p>
    <p>AZ-SDP brings the benefits of asynchronous</p>
    <p>sockets to synchronous sockets in a TRANSPARENT</p>
    <p>manner</p>
    <p>30% better throughput and 2X improvement in</p>
    <p>computation-communication overlap tests</p>
    <p>Analysis with applications and large-scale clusters</p>
    <p>Integration with OpenIB/Gen2</p>
  </div>
  <div class="page">
    <p>Acknowledgements</p>
    <p>Our research is supported by the following organizations  Current Funding support by</p>
    <p>Current Equipment support by</p>
  </div>
  <div class="page">
    <p>Web Pointers</p>
    <p>Network Based Computing</p>
    <p>Laboratory</p>
    <p>Website: http://www.cse.ohio-state.edu/~balaji</p>
    <p>Group Homepage: http://nowlab.cse.ohio-state.edu</p>
    <p>Email: balaji@cse.ohio-state.edu</p>
    <p>NBCL</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Sockets Programming Model</p>
    <p>Several high-speed networks available today  E.g., InfiniBand (IB), Myrinet, 10-Gigabit Ethernet</p>
    <p>Common programming models  E.g., Sockets, MPI, Shared Memory Models</p>
    <p>Network independent parallel and distributed</p>
    <p>applications</p>
    <p>Sockets programming model is of particular</p>
    <p>interest  Scientific apps, file/storage systems, commercial apps</p>
    <p>Traditionally built over TCP/IP (and others)</p>
    <p>Performance of such implementations is not the best</p>
  </div>
  <div class="page">
    <p>Limitations of TCP/IP Sockets for High-speed</p>
    <p>Networks  Network/Transport layers processed by the</p>
    <p>host</p>
    <p>Limited performance</p>
    <p>Excessive resource usage (CPU, Memory traffic)</p>
    <p>Generic optimizations for TCP/IP sockets</p>
    <p>Cannot sustain the performance of high-speed</p>
    <p>networks</p>
    <p>Performance on IB (16Gbps) adapters limited to</p>
    <p>Sockets Direct Protocol (SDP) proposed</p>
    <p>Alternative to TCP/IP Sockets</p>
  </div>
  <div class="page">
    <p>Zero-Copy Mechanisms in SDP</p>
    <p>SRC Available</p>
    <p>RDMA Read Data</p>
    <p>GET Complete</p>
    <p>Sender Receiver</p>
    <p>SINK Available</p>
    <p>RDMA Write Data</p>
    <p>PUT Complete</p>
    <p>Sender Receiver</p>
    <p>Register BufferRegister Buffer</p>
    <p>SOURCE-AVAIL SINK-AVAIL</p>
  </div>
  <div class="page">
    <p>Prior Research  Prior Research on High-Performance Sockets</p>
    <p>spanning various networks (Giganet CLAN, VIA,</p>
    <p>GbE, Myrinet)</p>
    <p>SDP over IBA: Buffer-copy based implementation</p>
    <p>Recent research on Zero-copy SDP</p>
    <p>[Goldenberg05]</p>
    <p>Zero-copy schemes to optimize TCP and UDP</p>
    <p>stacks</p>
    <p>Mostly for asynchronous sockets</p>
    <p>May require kernel/NIC firmware modifications</p>
  </div>
  <div class="page">
    <p>Latency and Throughput</p>
  </div>
  <div class="page">
    <p>Computation/Communicat ion Overlap</p>
  </div>
  <div class="page">
    <p>Multi-connection Tests</p>
  </div>
  <div class="page">
    <p>Hot-spot Latency Test</p>
  </div>
  <div class="page">
    <p>Buffer Sharing</p>
    <p>Memory-protect B1 and disallow all</p>
    <p>access to it</p>
    <p>Override the mmap() call (libc) with a</p>
    <p>new mmap call</p>
    <p>New mmap() call contains</p>
    <p>mapping of all memory-mapped</p>
    <p>buffers</p>
    <p>B1</p>
    <p>B2</p>
    <p>B1 and B2 are memory mapped to each other</p>
    <p>Send()</p>
    <p>Write()</p>
  </div>
  <div class="page">
    <p>Managing Un-aligned Buffers</p>
    <p>Two approaches  Malloc Hook  Hybrid approach with Buffered SDP</p>
    <p>Physical Page</p>
    <p>VAPI Control Buffer Application Buffer</p>
    <p>Shared Page</p>
  </div>
  <div class="page">
    <p>Malloc Hook  Approach overrides the malloc() and free()</p>
    <p>system calls  New Malloc() allocates physical page</p>
    <p>boundary-aligned N + PAGE_SIZE bytes, when N bytes are requested</p>
    <p>Advantage :  Simple Approach</p>
    <p>Disadvantage :  Very small buffer requests may result in buffer</p>
    <p>wastage  Time to malloc few bytes to Physical Page size is the</p>
    <p>same</p>
  </div>
  <div class="page">
    <p>Hybrid approach with Buffered SDP</p>
    <p>Hybrid Mechanism between BSDP and AZ-SDP</p>
    <p>Physical Page</p>
    <p>VAPI Control Buffer Application Buffer</p>
    <p>AZ-SDP communication</p>
    <p>BSDP comm.</p>
    <p>BSDP comm.</p>
    <p>A single communication might be carried out in multiple operations (upto three)</p>
    <p>5-10% better performance than Malloc-hook based scheme</p>
  </div>
  <div class="page">
    <p>Copy-on-Write</p>
    <p>Control maintained via Locks at the receiver</p>
    <p>end by the AZ-SDP layer</p>
    <p>Receiver obtains the lock, if recv() is called</p>
    <p>first</p>
    <p>Sender can obtain the lock on generation of a</p>
    <p>page fault and can perform a copy-on-write</p>
    <p>operation</p>
  </div>
</Presentation>
