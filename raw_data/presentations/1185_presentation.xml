<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LXDs: Towards Isolation of Kernel Subsystems</p>
    <p>Vikram Narayanan1, Abhiram Balasubramanian2, Charlie Jacobsen2, Sarah Spall2, Scott Bauer2, Michael Quigley2, Aftab Hussain1, Abdullah Younis1, Junjie Shen1, Moinak Bhattacharyya1, Anton Burtsev1</p>
  </div>
  <div class="page">
    <p>Commodity kernels</p>
    <p>Linux kernel</p>
    <p>Kernel space</p>
    <p>User space</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Memory management</p>
    <p>SchedulerFile systems Device drivers</p>
    <p>Commodity kernels are monolithic</p>
    <p>Kernel extensions (fs, network stacks, drivers) run in the same address space</p>
    <p>Vulnerability in a single component propagates to the entire kernel</p>
  </div>
  <div class="page">
    <p>Commodity kernels</p>
    <p>Linux kernel</p>
    <p>Kernel space</p>
    <p>User space</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Memory management</p>
    <p>SchedulerFile systems Device drivers</p>
    <p>Commodity kernels are monolithic</p>
    <p>Kernel extensions (fs, network stacks, drivers) run in the same address space</p>
    <p>Vulnerability in a single component propagates to the entire kernel 1</p>
  </div>
  <div class="page">
    <p>Commodity kernels</p>
    <p>Linux kernel</p>
    <p>Kernel space</p>
    <p>User space</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Memory management</p>
    <p>SchedulerFile systems Device drivers</p>
    <p>Commodity kernels are monolithic</p>
    <p>Kernel extensions (fs, network stacks, drivers) run in the same address space</p>
    <p>Vulnerability in a single component propagates to the entire kernel 1</p>
  </div>
  <div class="page">
    <p>Isolation</p>
    <p>Linux kernel</p>
    <p>Isolation</p>
    <p>domains Kernel space</p>
    <p>User space</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Memory management</p>
    <p>SchedulerFile systems Device drivers</p>
    <p>Split monolithic kernel into isolated components</p>
    <p>to confine faults  to improve reliability</p>
  </div>
  <div class="page">
    <p>Lightweight eXecution Domains: Architecture</p>
  </div>
  <div class="page">
    <p>LXDs:Design goals</p>
    <p>backward compatibility with unmodified code</p>
    <p>transparent object synchronization across domain boundaries</p>
  </div>
  <div class="page">
    <p>LXDs:Design goals</p>
    <p>backward compatibility with unmodified code  transparent object synchronization across domain boundaries</p>
  </div>
  <div class="page">
    <p>LXDs Framework : fIPC</p>
    <p>fast inter process communication (fIPC)</p>
    <p>Networking NIC driver</p>
    <p>Quick path interconnect (QPI)</p>
    <p>processor cachelines</p>
    <p>Ring Buffers</p>
  </div>
  <div class="page">
    <p>LXDs Framework : IDL</p>
    <p>int register_netdev(struct net_device *dev);</p>
    <p>/* Projections */ projection &lt;struct net_device&gt; net_device {</p>
    <p>... /* [modifier] &lt;data_type&gt; &lt;struct_member_name&gt; */; [in] unsigned int flags; [in] unsigned long long hw_features; [in] unsigned long long features; ... projection net_device_ops [alloc(caller)] *netdev_ops;</p>
    <p>};</p>
    <p>Interface definition language</p>
    <p>asynchronous runtime (async threads)</p>
  </div>
  <div class="page">
    <p>LXDs Framework : IDL</p>
    <p>int register_netdev(struct net_device *dev);</p>
    <p>/* Projections */ projection &lt;struct net_device&gt; net_device {</p>
    <p>... /* [modifier] &lt;data_type&gt; &lt;struct_member_name&gt; */; [in] unsigned int flags; [in] unsigned long long hw_features; [in] unsigned long long features; ... projection net_device_ops [alloc(caller)] *netdev_ops;</p>
    <p>};</p>
    <p>Interface definition language  asynchronous runtime (async threads)</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Software-only device  network (dummy)  block device (null-blk)</p>
    <p>Hardware device  Intel 82599 10 Gbps ethernet controller (ixgbe)  iperf tx benchmarks: within 6-13% of the native driver</p>
    <p>Visit us!</p>
    <p>Usenix ATC19 July 10, Track II - Security #1: Kernel</p>
    <p>(4:10 - 5:30 PM)</p>
  </div>
</Presentation>
