<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ConfigTron: Tackling network diversity with heterogeneous configurations</p>
    <p>Usama Naseer , Theophilus Benson Duke University</p>
  </div>
  <div class="page">
    <p>Diversity in network conditions</p>
    <p>Region RTT in ms</p>
    <p>UK to Oceanic ~400</p>
    <p>US to Southeastern Asia ~260</p>
    <p>UK to East Asia ~350</p>
    <p>North-America to India ~380</p>
    <p>http://www.verizonenterprise.com/about/network/latency/#latency</p>
    <p>Region Avg. RTT in ms Avg. packet loss %</p>
    <p>Trans-Atlantic 74 0.05</p>
    <p>Europe 11.25 0.05</p>
    <p>North America 35 0.05</p>
    <p>Intra-Japan 9 1</p>
    <p>Trans-Pacific 102.8 1</p>
    <p>Asia Pacific 102.6 1</p>
    <p>Latin America 135 1</p>
    <p>EMEA to Asia Pacific 120.5 1</p>
  </div>
  <div class="page">
    <p>Web App</p>
    <p>HTTP</p>
    <p>TLS</p>
    <p>TCP</p>
    <p>HTTP/1.1</p>
    <p>Compression strategies</p>
    <p>HTTP/2</p>
    <p>v1.0, v1.1, v1.2, v1.3</p>
    <p>Content serving stack</p>
    <p>Cubic, Reno, Vegas, BBR, etc.</p>
    <p>ICW, RTO, FastOpen etc.</p>
    <p>Choice of queuing FIFO, FQ etc.</p>
    <p>What we can have</p>
    <p>Web App</p>
    <p>HTTP/2</p>
    <p>QUIC</p>
    <p>Server OS</p>
    <p>UDP</p>
    <p>L4</p>
    <p>L6</p>
    <p>L7</p>
  </div>
  <div class="page">
    <p>Web App</p>
    <p>HTTP</p>
    <p>TLS</p>
    <p>TCP</p>
    <p>Content serving stack</p>
    <p>L4</p>
    <p>L6</p>
    <p>L7</p>
    <p>HTTP/1.1</p>
    <p>H264</p>
    <p>v1.3</p>
    <p>Cubic</p>
    <p>ICW=10 RTO=3s</p>
    <p>FIFO</p>
    <p>What we actually have  one size fits all!</p>
  </div>
  <div class="page">
    <p>In the light of divergent network characteristics, is the one-size-fits-all networking stack optimal?</p>
  </div>
  <div class="page">
    <p>Are the configurations being used optimal for everyone?</p>
    <p>How speedy is SPDY? (NSDI 14)</p>
    <p>Verus (NSDI 15) -TCP versions</p>
    <p>How quick is QUIC? (IEEE ICC 16) -QUIC vs HTTP2 vs HTTP1.1</p>
    <p>Overclocking the Yahoo!: CDN for faster web page loads. (ACM SIGCOMM 11) -HTTP pipelining, TCP ICW, ABCA broader study to understand the impact of reconfiguration across different</p>
    <p>layers.</p>
  </div>
  <div class="page">
    <p>Experimental setup  Controlled website replay</p>
    <p>- MahiMahi</p>
    <p>Network emulation - NetEM + TC</p>
    <p>Realistic workloads - Alexa top 100</p>
    <p>Dimensions Values</p>
    <p>Network  RTT  Bandwidth  Loss rate</p>
    <p>TCP/IP stack</p>
    <p>TCP ICW  Congestion control  Slow_start_after_idle  Low_latency  Auto_corking  Packet scheduling</p>
    <p>Web App  HTTP protocol</p>
    <p>Website  Web object size  # of objects</p>
  </div>
  <div class="page">
    <p>Reconfiguration improves performance!</p>
    <p>Loss &gt; 2.5% BW &lt; 1Mbps</p>
    <p>Higher number of objects</p>
  </div>
  <div class="page">
    <p>Given the benefits of reconfiguration, how can we use network conditions reconfigure on the go?</p>
  </div>
  <div class="page">
    <p>ConfigTron optimizes web performance by systematically reconfiguring web servers in a principled manner.</p>
    <p>Website properties</p>
    <p>Users network characteristics</p>
    <p>Optimal configurationsIN</p>
    <p>P U</p>
    <p>T S</p>
    <p>O U</p>
    <p>T P</p>
    <p>U T</p>
    <p>ConfigTron</p>
  </div>
  <div class="page">
    <p>ConfigTron architecture</p>
    <p>Configuration Manager</p>
    <p>Request Router</p>
    <p>Web server</p>
    <p>Config. Agent</p>
    <p>Predicts optimal config.  Propagates information.</p>
    <p>Forwards users request to the reconfigured server.</p>
    <p>Gets mappings from config. manager.</p>
    <p>Reconfigures servers stack.</p>
    <p>* Not required for every request.</p>
  </div>
  <div class="page">
    <p>Configuration Manager</p>
    <p>Learning Database Learning Function</p>
  </div>
  <div class="page">
    <p>Learning Database  Generates data related to performance of different configurations.</p>
    <p>Synthetic data:  Mahimahi based web emulation  Pros</p>
    <p>Can be generated offline.</p>
    <p>Cons  Requires lots of resources.  Requires lots of execution time.</p>
    <p>Real world data:  A/B tests  Pros</p>
    <p>Dynamic.  Adjusts with time.</p>
    <p>Cons  Impacts real users.  Needs mechanism for selection of real</p>
    <p>users. (Kraken OSDI 16)</p>
    <p>Configuration Manager</p>
    <p>Learning Database Learning Function</p>
  </div>
  <div class="page">
    <p>Learning Function</p>
    <p>Aggregates data from learning database to predict optimal configurations.</p>
    <p>Requires a learning algorithm to learn mappings from network conditions</p>
    <p>to configurations.</p>
    <p>Machine Learning (Decision trees, SVM), Deep Learning (Reinforcement</p>
    <p>learning), Statistical (Markov process)</p>
    <p>Decision Trees</p>
    <p>One decision tree per website category.</p>
    <p>Reno/Cubic ICW = 16</p>
    <p>Configuration Manager</p>
    <p>Learning Database Learning Function</p>
  </div>
  <div class="page">
    <p>Challenges in reconfiguring todays stack</p>
    <p>Dimensions Values Configuration Granularity</p>
    <p>TCP/IP stack</p>
    <p>TCP ICW Per connection (IP tables)</p>
    <p>Congestion control Per connection (setsockopt)</p>
    <p>Auto_corking</p>
    <p>Low_latency Kernel wide (proc interface)</p>
    <p>Slow_start_after_idle</p>
    <p>TLS and HTTP layers are more flexible due to user space.</p>
    <p>Challenges:</p>
    <p>- Requires rewriting chunks of kernel.</p>
    <p>- User space TCP stacks are limited in configuration diversity (eg, only cubic or reno).</p>
  </div>
  <div class="page">
    <p>Request Router</p>
    <p>Configuration Manager</p>
    <p>IP-prefix to VM mapping</p>
    <p>Config. rules</p>
    <p>Telemetry</p>
    <p>ConfigTron architecture (VM based)</p>
  </div>
  <div class="page">
    <p>Configuration Manager</p>
    <p>Config. Rules + IP-prefix to port mapping</p>
    <p>Telemetry</p>
    <p>ConfigTron architecture (Socket based)</p>
    <p>o n</p>
    <p>fi g</p>
    <p>. A</p>
    <p>g e</p>
    <p>n t H</p>
    <p>T T</p>
    <p>P S</p>
    <p>e rve</p>
    <p>r</p>
    <p>Sidecar</p>
    <p>ConfigProxy</p>
    <p>ConfigProxy</p>
    <p>ConfigProxy</p>
    <p>ConfigProxy</p>
    <p>Web Server</p>
    <p>R e</p>
    <p>q u</p>
    <p>e st</p>
    <p>R o</p>
    <p>u te</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>VM based:</p>
    <p>Pros: - VMs can be reconfigured in isolation. - Fine-grained control over resource usage.</p>
    <p>Cons: - Higher resource usage. - Traps resources. - High startup times. May need to have</p>
    <p>VMs on standby.</p>
    <p>Socket based:</p>
    <p>Pros: - Less resource intensive. - Can be created on-the-go.</p>
    <p>Cons: - Not all TCP parameters are reconfigurable</p>
    <p>by setsockopt.</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>- Overclocking Yahoo! CDN (ACM SIGCOMM 11) looks at configuring TCP at end hosts in a datacenter environment where controller has a view of entire network.</p>
    <p>- We are broader in the sense that we are looking at more parameters across different layers.</p>
    <p>- OpenTCP (Hot Topics in networks, ACM 12.) reconfigures TCP in data center environment whereas Software Defined Transport (ONS 14) presents a programmable centralized platform to define transport mechanisms in data centers with a central controller. Similarly TROLL (IEEE NetSys 17) uses central controller for protocol suggestions and makes decisions for network core and edge devices.</p>
    <p>- ConfigTron is different since it reconfigures multiple layers in CDN server to optimize web performance, without the presence of a centralized controller.</p>
    <p>- No control over end hosts (users) in case of web.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>One-size-fits-all configurations can be sub-optimal for a proportion of users.</p>
    <p>Network diversity can be tackled by heterogeneity in configurations.</p>
    <p>Reconfiguration can improve PLT by as much as 40%.</p>
  </div>
  <div class="page">
    <p>Future work + Discussion</p>
    <p>Inspector Gadget -- infers network stack configuration for web servers by active probing.</p>
    <p>AWS + PlanetLab deployment.</p>
    <p>Extending user-space TCP stacks.</p>
    <p>Network Estimation.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>unaseer@cs.duke.edu</p>
  </div>
  <div class="page">
    <p>How many configurations are too many?</p>
  </div>
  <div class="page">
    <p>No configuration is better than others!</p>
  </div>
  <div class="page">
    <p>Chen, Yingying, et al. &quot;A provider-side view of web search response time.&quot; ACM SIGCOMM Computer Communication Review 43.4 (2013): 243254.</p>
  </div>
  <div class="page">
    <p>Network coverage wrt number of configurations</p>
  </div>
</Presentation>
