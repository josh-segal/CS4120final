<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A DSL Approach to Reconcile Equivalent Divergent Program Executions</p>
    <p>Lus Pina</p>
    <p>Daniel Grumberg</p>
    <p>Anastasios Andronidis</p>
    <p>Cristian Cadar</p>
    <p>{l.pina / daniel.grumberg14 / a.andronidis15 / c.cadar}@imperial.ac.uk Imperial College London</p>
    <p>London, UK</p>
    <p>July 13th, 2017</p>
  </div>
  <div class="page">
    <p>What are Equivalent Divergent Program Executions?</p>
    <p>And why should I care about reconciling them?</p>
  </div>
  <div class="page">
    <p>Equivalent Divergent Program Executions</p>
    <p>&gt;./hello1 &gt;./hello2 Hello world Hello world</p>
    <p>&gt;ldd hello1 &gt;ldd hello2 libc.so.6 libc.so.6</p>
    <p>jemalloc.so.6 &gt;strace hello1 &gt;strace hello2 write(1, &quot;Hello world&quot;, 11) write(1, &quot;Hello &quot;, 6)</p>
    <p>write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Equivalent Divergent Program Executions</p>
    <p>&gt;./hello1 &gt;./hello2 Hello world Hello world &gt;ldd hello1 &gt;ldd hello2 libc.so.6 libc.so.6</p>
    <p>jemalloc.so.6</p>
    <p>&gt;strace hello1 &gt;strace hello2 write(1, &quot;Hello world&quot;, 11) write(1, &quot;Hello &quot;, 6)</p>
    <p>write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Equivalent Divergent Program Executions</p>
    <p>&gt;./hello1 &gt;./hello2 Hello world Hello world &gt;ldd hello1 &gt;ldd hello2 libc.so.6 libc.so.6</p>
    <p>jemalloc.so.6 &gt;strace hello1 &gt;strace hello2 write(1, &quot;Hello world&quot;, 11) write(1, &quot;Hello &quot;, 6)</p>
    <p>write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Multi-Version Execution (MVE)</p>
    <p>Run multiple versions as one</p>
    <p>I Improves reliability malloc(WEIRD_NUMBER) jemalloc(WEIRD_NUMBER) SEGFAULT OK</p>
    <p>I Improves security &gt;strace hello1 &gt;strace hello2 write(1,&quot;Hello world&quot;) write(1,&quot;Hello, &quot;)</p>
    <p>fork() execve(&quot;/bin/sh&quot;) write(1,&quot;world!&quot;)</p>
    <p>Versions should be diverse but equivalent</p>
  </div>
  <div class="page">
    <p>Multi-Version Execution (MVE)</p>
    <p>Run multiple versions as one</p>
    <p>I Improves reliability malloc(WEIRD_NUMBER) jemalloc(WEIRD_NUMBER) SEGFAULT OK</p>
    <p>I Improves security &gt;strace hello1 &gt;strace hello2 write(1,&quot;Hello world&quot;) write(1,&quot;Hello, &quot;)</p>
    <p>fork() execve(&quot;/bin/sh&quot;) write(1,&quot;world!&quot;)</p>
    <p>Versions should be diverse but equivalent</p>
  </div>
  <div class="page">
    <p>Multi-Version Execution (MVE)</p>
    <p>Run multiple versions as one</p>
    <p>I Improves reliability malloc(WEIRD_NUMBER) jemalloc(WEIRD_NUMBER) SEGFAULT OK</p>
    <p>I Improves security &gt;strace hello1 &gt;strace hello2 write(1,&quot;Hello world&quot;) write(1,&quot;Hello, &quot;)</p>
    <p>fork() execve(&quot;/bin/sh&quot;) write(1,&quot;world!&quot;)</p>
    <p>Versions should be diverse but equivalent</p>
  </div>
  <div class="page">
    <p>Multi-Version Execution (MVE)</p>
    <p>Run multiple versions as one</p>
    <p>I Improves reliability malloc(WEIRD_NUMBER) jemalloc(WEIRD_NUMBER) SEGFAULT OK</p>
    <p>I Improves security &gt;strace hello1 &gt;strace hello2 write(1,&quot;Hello world&quot;) write(1,&quot;Hello, &quot;)</p>
    <p>fork() execve(&quot;/bin/sh&quot;) write(1,&quot;world!&quot;)</p>
    <p>Versions should be diverse but equivalent 9</p>
  </div>
  <div class="page">
    <p>Versions should be diverse but equivalent</p>
    <p>What about equivalent executions that issue divergent sequences of system calls?</p>
    <p>&gt;strace hello1 &gt;strace hello2 write(1,&quot;Hello world&quot;, 11)</p>
    <p>=&gt;</p>
    <p>write(1,&quot;Hello &quot;, 6)</p>
    <p>,</p>
    <p>write(1,&quot;world&quot; , 5)</p>
    <p>Describe the divergences with a Domain Specific Language (DSL)</p>
  </div>
  <div class="page">
    <p>Versions should be diverse but equivalent</p>
    <p>What about equivalent executions that issue divergent sequences of system calls?</p>
    <p>&gt;strace hello1 &gt;strace hello2 write(1,&quot;Hello world&quot;, 11)</p>
    <p>=&gt;</p>
    <p>write(1,&quot;Hello &quot;, 6)</p>
    <p>,</p>
    <p>write(1,&quot;world&quot; , 5)</p>
    <p>Describe the divergences with a Domain Specific Language (DSL)</p>
  </div>
  <div class="page">
    <p>Versions should be diverse but equivalent</p>
    <p>What about equivalent executions that issue divergent sequences of system calls?</p>
    <p>&gt;strace hello1 &gt;strace hello2</p>
    <p>write(1,&quot;Hello world&quot;, 11)</p>
    <p>=&gt;</p>
    <p>write(1,&quot;Hello &quot;, 6)</p>
    <p>,</p>
    <p>write(1,&quot;world&quot; , 5)</p>
    <p>Describe the divergences with a Domain Specific Language (DSL)</p>
  </div>
  <div class="page">
    <p>Versions should be diverse but equivalent</p>
    <p>What about equivalent executions that issue divergent sequences of system calls?</p>
    <p>&gt;strace hello1 &gt;strace hello2</p>
    <p>write(1,&quot;Hello world&quot;, 11) =&gt; write(1,&quot;Hello &quot;, 6) , write(1,&quot;world&quot; , 5)</p>
    <p>Describe the divergences with a Domain Specific Language (DSL)</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>MVE Architecture Varan</p>
    <p>Ring Buffer</p>
    <p>Shared Memory</p>
    <p>Leader Follower</p>
    <p>User</p>
    <p>Varan</p>
    <p>OS Kernel</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128)</p>
    <p>read(0,_,128) = 6 // &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Recorded</p>
    <p>Replayed</p>
    <p>DSL</p>
  </div>
  <div class="page">
    <p>DSL Architecture Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>DSL Architecture Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>DSL Architecture Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>DSL Rules</p>
    <p>I Default rule: read(_,_,_) as r =&gt; r I Actions</p>
    <p>I MATCH I NOP I SKIP I EXECUTE I STORE</p>
    <p>I Further examples I Hello world I nothing keyword I C predicates</p>
  </div>
  <div class="page">
    <p>Hello World Rule</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL</p>
    <p>nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>Hello World Rule Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>write(1, &quot;Hello world&quot;, 11) =&gt; write(1, &quot;Hello &quot;, 6), write(1, &quot;world&quot; , 5)</p>
  </div>
  <div class="page">
    <p>nothing Keyword</p>
    <p>nothing =&gt; sched_yield()</p>
  </div>
  <div class="page">
    <p>nothing Keyword Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL</p>
    <p>nop exec sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>nothing =&gt; sched_yield() 37</p>
  </div>
  <div class="page">
    <p>nothing Keyword Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>nothing =&gt; sched_yield() 38</p>
  </div>
  <div class="page">
    <p>nothing Keyword Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>nothing =&gt; sched_yield() 39</p>
  </div>
  <div class="page">
    <p>nothing Keyword Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>nothing =&gt; sched_yield()</p>
  </div>
  <div class="page">
    <p>C Predicates and multiple left-hand side</p>
    <p>// extern int sig1, sig2; sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>C Predicates Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>C Predicates Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>C Predicates Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>C Predicates Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>C Predicates Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig11.</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig22.</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>C Predicates Recorded</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . . Replayed</p>
    <p>read &quot;foobar&quot;</p>
    <p>. . .</p>
    <p>DSL</p>
    <p>match match</p>
    <p>read &quot;foobar&quot;</p>
    <p>read &quot;foobar&quot;</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;Hello &quot; write</p>
    <p>&quot;world&quot;</p>
    <p>DSL nop exec</p>
    <p>write &quot;Hello &quot;</p>
    <p>DSL</p>
    <p>skip exec</p>
    <p>write &quot;Hello world&quot;</p>
    <p>write &quot;world&quot;</p>
    <p>?</p>
    <p>sched_yield</p>
    <p>DSL nop</p>
    <p>exec</p>
    <p>sched_yield</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>? sigaction</p>
    <p>sig2 sigaction</p>
    <p>sig1</p>
    <p>DSL</p>
    <p>store</p>
    <p>nop</p>
    <p>sigaction sig1</p>
    <p>DSL</p>
    <p>store nop</p>
    <p>sigaction sig2</p>
    <p>DSL</p>
    <p>match 2</p>
    <p>match</p>
    <p>sigaction sig2</p>
    <p>DSL</p>
    <p>match 1</p>
    <p>match</p>
    <p>sigaction sig1</p>
    <p>sigaction sig2</p>
    <p>sigaction sig1</p>
    <p>sigact(sig,_,_) { $(sig) == sig1; } as s1, sigact(sig,_,_) { $(sig) == sig2; } as s2 =&gt; s2, s1</p>
  </div>
  <div class="page">
    <p>Deployment scenarios</p>
    <p>I Different configurations I Different releases I Different dynamic analyses</p>
  </div>
  <div class="page">
    <p>Deployment scenarios Different configurations</p>
    <p>Recorded Redis minimal config Replayed 1 Redis with persistency (3 rules) Replayed 2 Redis with verbose logs (4 rules) Replayed 3 Redis with persistency and verbose logs (7 rules)</p>
  </div>
  <div class="page">
    <p>Deployment scenarios Different releases</p>
    <p>ID Redis Versions Commits RulesRecorded  Replayed 1 1.3.8  1.3.10 40 0</p>
  </div>
  <div class="page">
    <p>Deployment scenarios Analyses</p>
    <p>Recorded Native Replayed 1 Asan (3 rules) Replayed 2 Msan (1 rule) Replayed 3 Tsan (5 rules) Replayed 4 Valgrind (14 rules)1</p>
    <p>I git (log, blame, diff, tag)I openssh (ssh, ssh-keygen) I htop I vim</p>
  </div>
  <div class="page">
    <p>Deployment scenarios Analyses</p>
    <p>Recorded Native Replayed 1 Asan (3 rules) Replayed 2 Msan (1 rule) Replayed 3 Tsan (5 rules) Replayed 4 Valgrind (14 rules)1</p>
    <p>I git (log, blame, diff, tag) I openssh (ssh, ssh-keygen) I htop I vim</p>
  </div>
  <div class="page">
    <p>Deployment scenarios Analyses</p>
    <p>Recorded Native Replayed 1 Asan (3 rules) Replayed 2 Msan (1 rule) Replayed 3 Tsan (5 rules) Replayed 4 Valgrind (14 rules)1</p>
    <p>I git (log, blame, diff, tag)I openssh (ssh, ssh-keygen) I htop I vim</p>
  </div>
  <div class="page">
    <p>Finding these rules must be hard. . .</p>
    <p>It isnt</p>
  </div>
  <div class="page">
    <p>Finding these rules must be hard. . .</p>
    <p>It isnt</p>
  </div>
  <div class="page">
    <p>Finding Rules</p>
  </div>
  <div class="page">
    <p>Finding Rules vimdiff native.log</p>
    <p>gettid</p>
    <p>read(3, ..., 4096) gettid</p>
    <p>lseek(3, -2347, SEEK_CUR) gettid</p>
    <p>read(3, ..., 4096) gettid</p>
    <p>close(3)</p>
    <p>valgrind.log gettid() write(1029, &quot;D&quot;, 1) sigprocmask([], ~[...]) read(3, ..., 4096) sigprocmask(~[...], NULL) gettid() read(1028, &quot;D&quot;, 1) lseek(3, -2347, SEEK_CUR) gettid() write(1029, &quot;E&quot;, 1) sigprocmask([], ~[...]) read(3, ..., 4096) sigprocmask( [...], NULL) gettid() read(1028, &quot;E&quot;, 1) close(3)</p>
  </div>
  <div class="page">
    <p>Finding Rules vimdiff native.log</p>
    <p>gettid</p>
    <p>read(3, ..., 4096) gettid</p>
    <p>lseek(3, -2347, SEEK_CUR)</p>
    <p>gettid</p>
    <p>read(3, ..., 4096) gettid</p>
    <p>close(3)</p>
    <p>valgrind.log gettid() write(1029, &quot;D&quot;, 1) sigprocmask([], ~[...]) read(3, ..., 4096) sigprocmask(~[...], NULL) gettid() read(1028, &quot;D&quot;, 1)</p>
    <p>lseek(3, -2347, SEEK_CUR)</p>
    <p>gettid() write(1029, &quot;E&quot;, 1) sigprocmask([], ~[...]) read(3, ..., 4096) sigprocmask( [...], NULL) gettid() read(1028, &quot;E&quot;, 1)</p>
    <p>close(3)</p>
  </div>
  <div class="page">
    <p>Finding Rules vimdiff native.log</p>
    <p>gettid</p>
    <p>read( _ , _ , _ ) as r =&gt; gettid</p>
    <p>lseek(3, -2347, SEEK_CUR)</p>
    <p>gettid</p>
    <p>read(3, ..., 4096) gettid</p>
    <p>close(3)</p>
    <p>valgrind.log gettid() , write(1029, _ , 1) , sigprocmask( _ , _ ) , r,</p>
    <p>sigprocmask( _ , _ ) , gettid() , read(1028, _ , 1)</p>
    <p>lseek(3, -2347, SEEK_CUR)</p>
    <p>gettid() write(1029, &quot;E&quot;, 1) sigprocmask([], ~[...]) read(3, ..., 4096) sigprocmask( [...], NULL) gettid() read(1028, &quot;E&quot;, 1)</p>
    <p>close(3)</p>
  </div>
  <div class="page">
    <p>Rule synthesis algorithm</p>
    <p>I Rules with the shape: syscall as s =&gt; ..., s, ... I Input: recorded and replayed traces I Output: set of candidate rules I Was able to find 16 out of 19 applicable rules</p>
    <p>I Non-determinism and infrequent syscalls impact quality of rules I Details in the paper</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>A DSL Approach to Reconcile Equivalent Divergent Program Executions</p>
    <p>I Increases the applicability of multi-version execution I For reliability and security I State-of-the-art MVE struggles with divergences</p>
    <p>I Simple expressive language for reconciling system call sequences I Recorded and replayed I DSL provides the required action to tolerate divergences</p>
    <p>I Necessary rules are easy to identify I vimdiff of strace logs</p>
    <p>I Automatic algorithm to synthethize rules I From equivalent strace logs</p>
  </div>
  <div class="page">
    <p>Were hiring!</p>
    <p>I Post-doc position in Software Systems and Program Analysis I Starting in November 2017, apply until August 2017 I Up to 17 months, possibly extendable to 24 I Details: https://srg.ic.ac.uk/vacancies</p>
  </div>
  <div class="page">
    <p>A DSL Approach to Reconcile Equivalent Divergent Program Executions</p>
    <p>I Increases the applicability of multi-version execution I For reliability and security I State-of-the-art MVE struggles with divergences</p>
    <p>I Simple expressive language for reconciling system call sequences I Recorded and replayed I DSL provides the required action to tolerate divergences</p>
    <p>I Necessary rules are easy to identify I vimdiff of strace logs</p>
    <p>I Automatic algorithm to synthethize rules I From equivalent strace logs</p>
    <p>Lus Pina, Daniel Grumberg, Anastasios Andronidis, Cristian Cadar Imperial College London</p>
  </div>
</Presentation>
