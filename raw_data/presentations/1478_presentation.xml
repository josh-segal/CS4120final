<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ffsck: The Fast File System Checker + Ao Ma, + Chris Dragga, + Andrea C. Arpaci-Dusseau, + Remzi H. Arpaci-Dusseau</p>
    <p>* Backup Recovery Systems Division, EMC</p>
    <p>+ University of Wisconsin, Madison</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>File system  Data integrity is critically important</p>
    <p>Should be robust and reliable</p>
    <p>Factors can corrupt FS  Unclean shutdown / system crash</p>
    <p>File system bugs</p>
    <p>Hardware failures</p>
  </div>
  <div class="page">
    <p>Existing Solutions  Journaling</p>
    <p>Copy-on-Write</p>
    <p>Soft updates</p>
    <p>Debugging</p>
    <p>Bug finding tools</p>
    <p>Checksums</p>
    <p>Scrubbing</p>
    <p>Unclean shutdown</p>
    <p>System crash</p>
    <p>Bugs</p>
    <p>Hardware failures</p>
    <p>Reduce the probability of faults</p>
    <p>but cant protect against all of them</p>
  </div>
  <div class="page">
    <p>fsck: Last Resort To Repair</p>
    <p>Approach  Scan FS offline</p>
    <p>Check metadata redundancy info</p>
    <p>Restore a damaged FS back to usable state</p>
    <p>Dilemma  Fsck is slow, causing long downtime</p>
    <p>Unpredictable checking time</p>
  </div>
  <div class="page">
    <p>fsck Challenges</p>
    <p>File system is evolving</p>
    <p>Capacity is increasing</p>
    <p>More complexity (more bugs and hardware failures)</p>
    <p>Impact on fsck</p>
    <p>Longer downtime</p>
    <p>Use more frequently</p>
  </div>
  <div class="page">
    <p>What we did</p>
    <p>Fast file system checker (ffsck)</p>
    <p>10 times faster with identical checking policy</p>
    <p>A modified version of ext3 (rext3)</p>
    <p>20% improvement in big writes</p>
    <p>43% improvement in random reads</p>
    <p>10% degradation in small reads</p>
  </div>
  <div class="page">
    <p>Outline fsck analysis  Checking approach</p>
    <p>Performance</p>
    <p>FS tradeoffs</p>
    <p>ffsck &amp; rext3  Goals</p>
    <p>Novel features</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>E2fsck Checking Approach Phase checking tasks</p>
  </div>
  <div class="page">
    <p>Performance Analysis</p>
    <p>Initialize disk image by creating directories with small files (4KB- 2MB)</p>
    <p>Increase FS size by creating new files and appending data to files(4KB-1MB)</p>
    <p>E2fsck doesnt scale well</p>
    <p>Phase 1 dominates the checking time</p>
    <p>phase 1 phase 2 phase 3 phase 4 phase 5</p>
    <p>Total Checking Time (second)</p>
    <p>FS size</p>
  </div>
  <div class="page">
    <p>Cumulative Time Spent on Reading Indirect Blocks and Inode Blocks</p>
    <p>Indirect blocks are the bottleneck 10</p>
    <p>inode block indirect block</p>
    <p>Millisecond</p>
    <p>Read Block Number</p>
  </div>
  <div class="page">
    <p>File System Design Tradeoffs</p>
    <p>Identical allocation for data and indirect blocks</p>
    <p>Pros: store them contiguously and facilitate sequential access</p>
    <p>Cons: metadata scatters across disk</p>
    <p>Rely on tree structure to locate indirect blocks  Pros: simple and straightforward</p>
    <p>Cons: impose a strict ordering of access</p>
  </div>
  <div class="page">
    <p>Fsck: An Afterthought Design</p>
    <p>Repairing capability is not prioritized</p>
    <p>File system has limited support for checker</p>
    <p>Checker is developed as a peripheral addition, rather</p>
    <p>than a tight component</p>
  </div>
  <div class="page">
    <p>Outline fsck analysis  Checking approach</p>
    <p>Performance</p>
    <p>FS tradeoffs</p>
    <p>ffsck &amp; rext3  Goals</p>
    <p>Novel features</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Ffsck and Rext3</p>
    <p>Prioritize fast repair when design FS  Fast scan</p>
    <p>Robust checking performance</p>
    <p>Competitive FS performance</p>
    <p>ffsck and rext3 is based on e2fsck and ext3</p>
  </div>
  <div class="page">
    <p>Basic Layout of Ext3</p>
    <p>Block Group 0</p>
    <p>Super block</p>
    <p>Group Descriptor</p>
    <p>Data Bitmap</p>
    <p>Inode Bitmap</p>
    <p>Inode table</p>
    <p>Data blocks</p>
    <p>Block Group n Block Group i</p>
  </div>
  <div class="page">
    <p>Overview of ffsck and rext3</p>
    <p>New disk layout</p>
    <p>Disk-order scan</p>
    <p>Self-check and Cross-check</p>
    <p>Fast recovery with bitmap snapshot</p>
  </div>
  <div class="page">
    <p>Rext3 Disk Layout Decouple allocation</p>
    <p>Improve metadata density</p>
    <p>Indirect block, directory data block</p>
    <p>Super block</p>
    <p>Group Descriptor</p>
    <p>Data Bitmap</p>
    <p>Inode Bitmap</p>
    <p>Inode table</p>
    <p>Data blocks Indirect region</p>
    <p>Inode table Indirect region Data blocks</p>
    <p>New allocation example</p>
    <p>Ino Ind 1</p>
    <p>D1  Ind 2</p>
    <p>Da Db</p>
  </div>
  <div class="page">
    <p>Rext3 Disk Layout</p>
    <p>More additional seeks?</p>
    <p>Disk track buffer</p>
    <p>Track buffer</p>
    <p>Rotates this way</p>
    <p>Heads Data</p>
    <p>Size keeps increasing</p>
  </div>
  <div class="page">
    <p>Disk-order Scan Most efficient way to scan metadata Predictable scanning time</p>
    <p>Super block</p>
    <p>Group Descriptor</p>
    <p>Data Bitmap</p>
    <p>Inode Bitmap</p>
    <p>Inode table</p>
    <p>Indirect region</p>
    <p>Data Region</p>
    <p>Metadata region</p>
    <p>Data Region</p>
    <p>Data Region</p>
    <p>Metadata region</p>
    <p>Metadata region</p>
    <p>block group 0 block group 1 block group n</p>
    <p>read seek read seek read seek</p>
  </div>
  <div class="page">
    <p>Memory Pressure</p>
    <p>Disk-order scan accesses all the indirect</p>
    <p>blocks without using the indirect tree</p>
    <p>Cant perform checking until all the related</p>
    <p>metadata are cached</p>
    <p>Impractical for large-scale FS</p>
  </div>
  <div class="page">
    <p>Self-check, Cross-check</p>
    <p>Separate self-check and cross-check</p>
    <p>Self-ID is added</p>
    <p>Finish most checks without referring to other</p>
    <p>metadata (self-check)</p>
    <p>Self-check and discard</p>
    <p>Once self-check is performed, remove unused</p>
    <p>fields for cross-check</p>
  </div>
  <div class="page">
    <p>Example: Self-check &amp; Discard</p>
    <p>ino</p>
    <p>Its own LBA</p>
    <p>Blk_num = 84</p>
    <p>Last pointer offset = 83</p>
    <p>Last Pointer: 94</p>
    <p>Compression ratio is nearly 250:1</p>
    <p>Indirect block disk copy</p>
    <p>Self-check: 1. blk range check 2. bitmap</p>
    <p>ino</p>
    <p>Blk 11</p>
    <p>Blk 12</p>
    <p>Blk .</p>
    <p>Blk 94</p>
    <p>self-check Indirect block memory copy</p>
  </div>
  <div class="page">
    <p>Example: Cross-check of File Size Inode</p>
    <p>Last pointer offset: 13</p>
    <p>Double Indirect</p>
    <p>Last pointer offset: 2</p>
    <p>Indirect Block</p>
    <p>Last pointer offset: 12</p>
    <p>Last pointer: 36</p>
    <p>Last pointer: 157</p>
    <p>Last pointer : 950</p>
    <p>LBA: 36</p>
    <p>LBA: 157</p>
  </div>
  <div class="page">
    <p>Fast Recovery with Bitmap Snapshot</p>
    <p>Costly double scan of inode and indirect blocks</p>
    <p>Detect multiple-claimed blocks in 1st scan</p>
    <p>Detect their owners during 2nd scan</p>
    <p>ffsck: 1 full scan + 1 partial rescan</p>
    <p>ffsck builds a list of bitmap snapshots to limit the</p>
    <p>rescans scope</p>
  </div>
  <div class="page">
    <p>Fast Recovery with Bitmap Snapshot</p>
    <p>Create snapshot for each group of inodes</p>
    <p>snapshot1 snapshot2 snapshot3</p>
    <p>Only need to rescan</p>
    <p>the group of inodes for snapshot1</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Decouple allocation  Improve metadata density</p>
    <p>Disk-order scan</p>
    <p>Most efficient scan approach</p>
    <p>Self-check &amp; cross-check</p>
    <p>Avoid memory saturation</p>
    <p>Fast recovery with bitmap snapshot</p>
    <p>One full scan + partial rescan</p>
  </div>
  <div class="page">
    <p>Outline fsck analysis  Checking approach</p>
    <p>Performance</p>
    <p>FS tradeoffs</p>
    <p>ffsck &amp; rext3  Goals</p>
    <p>Novel features</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Checking Performance Comparison</p>
    <p>Question1:</p>
    <p>Will ffsck scale well?</p>
    <p>Question2:</p>
    <p>Can ffsck perform consistently as the FS ages?</p>
  </div>
  <div class="page">
    <p>Checking Time Comparison</p>
    <p>e2fsck ffsck</p>
    <p>Time (seconds)</p>
    <p>FS size</p>
    <p>Initialize disk image by creating directories with small files (4KB- 2MB)</p>
    <p>Increase FS size by creating new files and appending data to files(4KB-1MB)</p>
    <p>Ffsck checking time is determined</p>
    <p>when the file system is created</p>
  </div>
  <div class="page">
    <p>Checking Speed Comparison on Aging FS Image</p>
    <p>MB/s</p>
    <p>Operations/Group</p>
    <p>Aging FS image by performing file</p>
    <p>creations, appends, truncations and deletions</p>
    <p>(750GB partition, roughly 95% utilization)</p>
    <p>e2fsck on ext3 ffsck on rext3 optimal disk bandwidth</p>
    <p>Much faster and robust</p>
  </div>
  <div class="page">
    <p>File System Comparison</p>
    <p>Question1:</p>
    <p>Can rext3 compete with ext3 in sequential reads?</p>
    <p>Question2:</p>
    <p>What is its impact on sequential writes?</p>
    <p>Question3 and 4:</p>
    <p>What about random reads and macro-benchmark?</p>
  </div>
  <div class="page">
    <p>Sequential Read</p>
    <p>ext3 rext3</p>
    <p>File size</p>
    <p>Throughput (MB/sec)</p>
    <p>The disk track buffer allows rext3 to match ext3s</p>
    <p>performance, except for small reads</p>
  </div>
  <div class="page">
    <p>Sequential Write</p>
    <p>ext3 rext3</p>
    <p>Throughput (MB/S)</p>
    <p>File Size</p>
    <p>Indirect region aids ext3s ordered journaling mechanism</p>
  </div>
  <div class="page">
    <p>Random Read</p>
    <p>Indirect region benefits from disk buffer</p>
    <p>ext3 rext3 Throughput (MB/S)</p>
    <p>Read number</p>
    <p>Randomly read 4KB blocks from a 2GB file</p>
  </div>
  <div class="page">
    <p>Postmark</p>
    <p>ext3 rext3</p>
    <p>Filebench</p>
    <p>Time (Seconds)</p>
    <p>Transaction number</p>
    <p>File Server Web Server Varmail</p>
    <p>ext3 rext3</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Make fast repair a primary concern of FS design</p>
    <p>FS provides direct support for the fast checker</p>
    <p>Benefits:</p>
    <p>10 times checking speed</p>
    <p>Big improvement for large writes and random reads</p>
    <p>Small penalty for small reads</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>How to protect against corruptions is well-known</p>
    <p>FS repairing is important but receives little attention</p>
    <p>Build the checker as an integral component rather than</p>
    <p>a peripheral addition</p>
    <p>ffsck is not a universal solution, other FSes may</p>
    <p>require other methods</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Questions?</p>
    <p>Wisconsin Institute on Software-defined Datacenters in Madison http://wisdom.cs.wisc.edu/</p>
  </div>
</Presentation>
