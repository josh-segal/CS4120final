<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Vesper: Measuring Time-to-Interactivity for Web Pages</p>
    <p>*MIT CSAIL Harvard University</p>
    <p>Ravi Netravali* Vikram Nathan* James Mickens Hari Balakrishnan*</p>
  </div>
  <div class="page">
    <p>The Importance of Page Load Time Slow page loads  lost revenue and low search rank</p>
  </div>
  <div class="page">
    <p>Everyone agrees that web pages should load quickly</p>
  </div>
  <div class="page">
    <p>Everyone agrees that web pages should load quickly</p>
    <p>but how should page load time be defined?</p>
  </div>
  <div class="page">
    <p>page loads for time-to-interactivity 4. User studies: interactive users strongly prefer pages</p>
    <p>that optimize for RI</p>
    <p>Contributions</p>
  </div>
  <div class="page">
    <p>Outline  How pages load today  Existing Metrics  Ready Index (RI)  Definition  Measurement system (Vesper)</p>
    <p>Evaluation  RI vs. preexisting metrics  Optimizing pages for RI (time-to-interactivity)  User studies: how does RI capture user experience?</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
    <p>var x = 10; var y = {prop1: x};</p>
    <p>JavaScript Engine</p>
    <p>JavaScript Heap</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
    <p>var x = 10; var y = {prop1: x};</p>
    <p>JavaScript Engine</p>
    <p>s&lt;html&gt; DOM tree (representation</p>
    <p>of HTML)&lt;head&gt; &lt;body&gt;</p>
    <p>Rendering Engine</p>
    <p>JavaScript Heap</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
    <p>var x = 10; var y = {prop1: x};</p>
    <p>JavaScript Engine</p>
    <p>s&lt;html&gt; DOM tree (representation</p>
    <p>of HTML)&lt;head&gt; &lt;body&gt;</p>
    <p>DOM Interface Rendering Engine</p>
    <p>JavaScript Heap</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>static.amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
    <p>var x = 10; var y = {prop1: x};</p>
    <p>JavaScript Engine</p>
    <p>s&lt;html&gt; DOM tree (representation</p>
    <p>of HTML)&lt;head&gt; &lt;body&gt;</p>
    <p>DOM Interface Rendering Engine</p>
    <p>JavaScript Heap</p>
  </div>
  <div class="page">
    <p>Page Loads Today</p>
    <p>amazon.com</p>
    <p>static.amazon.com</p>
    <p>browser</p>
    <p>http://www.amazon.com</p>
    <p>var x = 10; var y = {prop1: x};</p>
    <p>JavaScript Engine</p>
    <p>s&lt;html&gt; DOM tree (representation</p>
    <p>of HTML)&lt;head&gt; &lt;body&gt;</p>
    <p>DOM Interface Rendering Engine</p>
    <p>JavaScript Heap</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Too conservative</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Speed Index (SI): time to render above-the-fold  Too conservative</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Speed Index (SI): time to render above-the-fold  Too conservative</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Speed Index (SI): time to render above-the-fold  Too conservative</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Speed Index (SI): time to render above-the-fold  Too conservative</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Existing Metrics</p>
    <p>Above The Fold</p>
    <p>Page load time (PLT): time until all objects are fetched and evaluated</p>
    <p>Speed Index (SI): time to render above-the-fold  Too conservative</p>
    <p>Ignores JavaScript that supports functionality</p>
    <p>Below The Fold</p>
    <p>JavaScript heapDOM Tree</p>
  </div>
  <div class="page">
    <p>Interactive page: above-the-fold is visually ready and fully functional</p>
  </div>
  <div class="page">
    <p>Interactive page: above-the-fold is visually ready and fully functional</p>
    <p>Median: 182 handlers 95th percentile: 1252 handlers</p>
  </div>
  <div class="page">
    <p>Interactive page: above-the-fold is visually ready and fully functional</p>
    <p>Challenge: nobody knows a good way to automatically identify that interactive state</p>
    <p>Median: 182 handlers 95th percentile: 1252 handlers</p>
  </div>
  <div class="page">
    <p>Interactive page: above-the-fold is visually ready and fully functional</p>
    <p>Challenge: nobody knows a good way to automatically identify that interactive state</p>
    <p>Median: 182 handlers 95th percentile: 1252 handlers</p>
  </div>
  <div class="page">
    <p>Outline  How pages load today</p>
    <p>Existing Metrics</p>
    <p>Ready Index (RI) + Vesper</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Ready Index</p>
  </div>
  <div class="page">
    <p>Ready Index Functionality:</p>
    <p>above-the-fold element time when es JavaScript handlers are registered, and state that handlers access when fired is loaded</p>
  </div>
  <div class="page">
    <p>Ready Index Functionality:</p>
    <p>Visibility:</p>
    <p>paint events that affect e</p>
    <p>es paint events that are finished by time t</p>
    <p>- e = above-the-fold element - te = time when es handlers are registered, and state they access when fired is loaded</p>
  </div>
  <div class="page">
    <p>Ready Index Functionality:</p>
    <p>Visibility:</p>
    <p>Element Readiness: R(e,t)= 1 2 F(e,t)+1</p>
    <p>- e = above-the-fold element - te = time when es handlers are registered, and state they access when fired is loaded - P(e) = paint events that affect e - Pt(e) = es paint events that are finished by time t</p>
  </div>
  <div class="page">
    <p>Ready Index Functionality:</p>
    <p>Visibility:</p>
    <p>Element Readiness: R(e,t)= 1 2 F(e,t)+1</p>
    <p>Page Readiness: R(t)= A(e)R(e,t) eE</p>
    <p>pixel area of e</p>
    <p>- e = above-the-fold element - te = time when es handlers are registered, and state they access when fired is loaded - P(e) = paint events that affect e - Pt(e) = es paint events that are finished by time t</p>
  </div>
  <div class="page">
    <p>Ready Index Functionality:</p>
    <p>Visibility:</p>
    <p>Element Readiness: R(e,t)= 1 2 F(e,t)+1</p>
    <p>Page Readiness: R(t)= A(e)R(e,t) eE</p>
    <p>Ready Index: RI= 1 R(t) R(T)</p>
    <p>d(t) 0</p>
    <p>T</p>
    <p>loose upper bound on load time</p>
    <p>- e = above-the-fold element - te = time when es handlers are registered, and state they access when fired is loaded - P(e) = paint events that affect e - Pt(e) = es paint events that are finished by time t</p>
    <p>- A(e) = pixel area of e</p>
  </div>
  <div class="page">
    <p>Ready Index Functionality:</p>
    <p>Visibility:</p>
    <p>Element Readiness: R(e,t)= 1 2 F(e,t)+1</p>
    <p>Page Readiness: R(t)= A(e)R(e,t) eE</p>
    <p>Ready Index: RI= 1 R(t) R(T)</p>
    <p>d(t) 0</p>
    <p>T</p>
    <p>Ready Time (RT): smallest time when all above-the-fold elements are ready</p>
    <p>- e = above-the-fold element - te = time when es handlers are registered, and state they access when fired is loaded - P(e) = paint events that affect e - Pt(e) = es paint events that are finished by time t</p>
    <p>- A(e) = pixel area of e</p>
    <p>- T = loose upper bound on load time</p>
  </div>
  <div class="page">
    <p>Measuring Ready Index (RI)</p>
  </div>
  <div class="page">
    <p>Measuring Ready Index (RI)</p>
    <p>Need to know: Visible elements and their event handlers</p>
    <p>State that handlers access when fired</p>
    <p>Effect and timing of browser paint events</p>
  </div>
  <div class="page">
    <p>Measuring Ready Index (RI)</p>
    <p>Need to know:</p>
    <p>Requirements for instrumentation:</p>
    <p>Visible elements and their event handlers</p>
    <p>State that handlers access when fired</p>
    <p>Effect and timing of browser paint events</p>
    <p>No developer annotations Low overhead Generic</p>
  </div>
  <div class="page">
    <p>Vesper: Overview</p>
    <p>Phase 1 (offline): Identify pages interactive state</p>
    <p>Original page</p>
    <p>Rewriter 1</p>
    <p>Instrumented page 1</p>
    <p>Phase 2: Track loading progress of interactive state</p>
    <p>RI/RTOriginal page</p>
    <p>Rewriter 2</p>
    <p>Instrumented page 2</p>
    <p>Approach: Use two measurement phases to reduce impact of instrumentation</p>
    <p>List of interactive DOM nodes and JavaScript state</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 1 Goal: Identify visible elements, event handlers, and the state handlers access when fired</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 1 Goal: Identify visible elements, event handlers, and the state handlers access when fired</p>
    <p>Above The Fold</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 1 Goal: Identify visible elements, event handlers, and the state handlers access when fired</p>
    <p>Above The Fold</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>Element visibility: analyze element bounding boxes and CSS rules</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 1 Goal: Identify visible elements, event handlers, and the state handlers access when fired</p>
    <p>Above The Fold</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>Element visibility: analyze element bounding boxes and CSS rules</p>
    <p>Logging event handlers: shim event handler registration mechanisms</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 1 Goal: Identify visible elements, event handlers, and the state handlers access when fired</p>
    <p>Above The Fold</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>Element visibility: analyze element bounding boxes and CSS rules</p>
    <p>Logging event handlers: shim event handler registration mechanisms</p>
    <p>Event handler state: fire handlers and log accessed state with Scout</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 1 Goal: Identify visible elements, event handlers, and the state handlers access when fired</p>
    <p>Above The Fold</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>Element visibility: analyze element bounding boxes and CSS rules</p>
    <p>Logging event handlers: shim event handler registration mechanisms</p>
    <p>Event handler state: fire handlers and log accessed state with Scout</p>
    <p>Phase 1: 4.5% overhead</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2 Goal: Track loading progress of interactive state from Phase 1</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>Goal: Track loading progress of interactive state from Phase 1</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>Goal: Track loading progress of interactive state from Phase 1</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>DOM Tree</p>
    <p>JavaScript heap</p>
    <p>DOM Tree DOM Tree</p>
    <p>JavaScript heap JavaScript heap</p>
    <p>Goal: Track loading progress of interactive state from Phase 1</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2 Goal: Track loading progress of interactive state from Phase 1</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2 Goal: Track loading progress of interactive state from Phase 1  Log last writes for DOM/heap state</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>var x = 50; var y = 0; while (y &lt; 50) { x = x + 1; y = y + 1; } x = x + 5;</p>
    <p>Goal: Track loading progress of interactive state from Phase 1  Log last writes for DOM/heap state</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>var x = 50; var y = 0; while (y &lt; 50) { x = x + 1; y = y + 1; if (y == 49) { vesper_log(y); } } x = x + 5; vesper_log(x);</p>
    <p>Goal: Track loading progress of interactive state from Phase 1  Log last writes for DOM/heap state</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>var x = 50; var y = 0; while (y &lt; 50) { x = x + 1; y = y + 1; if (y == 49) { vesper_log(y); } } x = x + 5; vesper_log(x);</p>
    <p>Goal: Track loading progress of interactive state from Phase 1  Log last writes for DOM/heap state  Track browser layout/paint events</p>
  </div>
  <div class="page">
    <p>Vesper: Phase 2</p>
    <p>Phase 2: 1.9% overhead</p>
    <p>var x = 50; var y = 0; while (y &lt; 50) { x = x + 1; y = y + 1; if (y == 49) { vesper_log(y); } } x = x + 5; vesper_log(x);</p>
    <p>Goal: Track loading progress of interactive state from Phase 1  Log last writes for DOM/heap state  Track browser layout/paint events</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>How pages load today</p>
    <p>Existing Metrics</p>
    <p>Ready Index (RI) + Vesper</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation Outline  Are there differences between Ready Index and existing metrics?</p>
    <p>Can we optimize a page load for Ready Index?</p>
    <p>How well does Ready Index capture user experience?</p>
  </div>
  <div class="page">
    <p>AFT vs. RT vs. PLT</p>
    <p>amazon.com</p>
  </div>
  <div class="page">
    <p>AFT vs. RT vs. PLT</p>
    <p>Above-the-fold time (AFT) underestimates interactive time by 2.56 seconds!</p>
    <p>amazon.com</p>
  </div>
  <div class="page">
    <p>AFT vs. RT vs. PLT</p>
    <p>Page load time (PLT) overestimates interactive time by 2.72 seconds!</p>
    <p>Above-the-fold time (AFT) underestimates interactive time by 2.56 seconds!</p>
    <p>amazon.com</p>
  </div>
  <div class="page">
    <p>PLT: 3.4 s RT: 2.5 s AFT: 1.9 s</p>
  </div>
  <div class="page">
    <p>PLT &gt; RT &gt; AFT (differences of 24.0%-64.3%, 0.3-3.6 seconds)</p>
    <p>PLT: 3.4 s RT: 2.5 s AFT: 1.9 s</p>
  </div>
  <div class="page">
    <p>PLT &gt; RT &gt; AFT (differences of 24.0%-64.3%, 0.3-3.6 seconds)</p>
    <p>PLT: 3.4 s RT: 2.5 s AFT: 1.9 s</p>
    <p>Differences increase as RTTs increase</p>
  </div>
  <div class="page">
    <p>RI: 1759 ms SI: 1325 ms</p>
  </div>
  <div class="page">
    <p>Optimizing for Ready Index  Vesper: identify objects of importance  Polaris: optimize loading of important objects  Dependency-aware request scheduler that uses dynamic critical path analysis to reduce page load times</p>
  </div>
  <div class="page">
    <p>Optimizing for Ready Index</p>
    <p>Polaris_PLT</p>
    <p>Vesper: identify objects of importance  Polaris: optimize loading of important objects  Dependency-aware request scheduler that uses dynamic critical path analysis to reduce page load times</p>
  </div>
  <div class="page">
    <p>Optimizing for Ready Index</p>
    <p>Polaris_PLT Polaris_SI</p>
    <p>Vesper: identify objects of importance  Polaris: optimize loading of important objects  Dependency-aware request scheduler that uses dynamic critical path analysis to reduce page load times</p>
  </div>
  <div class="page">
    <p>Optimizing for Ready Index</p>
    <p>Polaris_PLT Polaris_SI Polaris_RI</p>
    <p>Vesper: identify objects of importance  Polaris: optimize loading of important objects  Dependency-aware request scheduler that uses dynamic critical path analysis to reduce page load times</p>
  </div>
  <div class="page">
    <p>Optimization Results</p>
    <p>Weight PLT RI SI Polaris-PLT 36% 8% -7% Polaris-RI 23% 29% 12% Polaris-SI 10% 14% 18%</p>
  </div>
  <div class="page">
    <p>Optimization Results</p>
    <p>Weight PLT RI SI Polaris-PLT 36% 8% -7% Polaris-RI 23% 29% 12% Polaris-SI 10% 14% 18%</p>
    <p>Targeted metrics improve the most!</p>
  </div>
  <div class="page">
    <p>User Study 1: Interactivity  Perform interactive task with Polaris-PLT, Polaris-RI,</p>
    <p>Polaris-SI: which is fastest?  5 sites, 85 users</p>
  </div>
  <div class="page">
    <p>User Study 1: Interactivity  Perform interactive task with Polaris-PLT, Polaris-RI,</p>
    <p>Polaris-SI: which is fastest?  5 sites, 85 users</p>
    <p>Scheduling policy Preference percentage Polaris-RI 83% Polaris-SI 4% Polaris-PLT 7%</p>
    <p>None 6%</p>
    <p>Takeaway: interactive users strongly prefer pages optimized for RI</p>
  </div>
  <div class="page">
    <p>User Study 2: Rendering  15 sites, 73 users</p>
  </div>
  <div class="page">
    <p>User Study 2: Rendering  15 sites, 73 users</p>
    <p>Takeaway: Polaris-SI is best for rendering, but Polaris-RI is comparable</p>
  </div>
  <div class="page">
    <p>Conclusion  Existing web performance metrics ignore page interactivity</p>
    <p>Over or underestimate time-to-interactivity by 24%-64%</p>
    <p>Ready Index (RI): analytical definition of page time-to- interactivity</p>
    <p>Vesper: system to automatically measure RI by identifying and tracking loading of pages interactive state  Helps reduce time-to-interactivity by 32%</p>
  </div>
</Presentation>
