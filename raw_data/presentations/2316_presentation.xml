<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Adap%ve, Model-driven Autoscaling for Cloud Applica%ons</p>
    <p>Anshul Gandhi IBM T. J. Watson Research Center</p>
    <p>Stony Brook University</p>
    <p>Parijat Dube, Alexei Karve, Andrew Kochut, Li Zhang IBM T. J. Watson Research Center</p>
  </div>
  <div class="page">
    <p>Mo%va%on</p>
    <p>Businesses have started moving to the cloud for their IT needs  reduces capital cost of buying servers  allows for elas%c resizing of applica%ons that have dynamic workload demand</p>
    <p>Cloud Service Providers (CSPs) offer monitoring and rule-based triggers to enable dynamic scaling of applica%ons</p>
    <p>Amazon auto scaling Microsoft Azure Watch</p>
    <p>Time</p>
    <p>D em</p>
    <p>an d</p>
  </div>
  <div class="page">
    <p>Mo%va%on</p>
    <p>The values have to be determined by the user  requires expert knowledge of applica%on (CPU, memory, n/w thresholds)  requires performance modeling exper%se (when and how to scale)</p>
    <p>Amazon auto scaling Microsoft Azure Watch</p>
    <p>How to set these values ??</p>
  </div>
  <div class="page">
    <p>Mo%va%on</p>
    <p>The values have to be determined by the user  requires expert knowledge of applica%on (CPU, memory, n/w thresholds)  requires performance modeling exper%se (when and how to scale)</p>
    <p>arrival rate (req/s)</p>
    <p>s)</p>
    <p>Offline benchmarking  Trial-and-error  Expert applica%on knowledge</p>
    <p>Not possible for CSPs !</p>
  </div>
  <div class="page">
    <p>View from users perspec%ve</p>
  </div>
  <div class="page">
    <p>View from CSPs perspec%ve</p>
  </div>
  <div class="page">
    <p>Problem statement</p>
    <p>How to scale an unobservable cloud applicaEon to provide performance guarantees ?</p>
  </div>
  <div class="page">
    <p>DC2: High-level idea</p>
    <p>VM utilization</p>
    <p>Request rate</p>
    <p>End-to-end response time</p>
    <p>Service requirements of requests at each tier</p>
    <p>Network delay</p>
    <p>Background utilization (overhead)</p>
  </div>
  <div class="page">
    <p>DC2: High-level idea</p>
    <p>Service requirements of requests at each tier</p>
    <p>Network delay</p>
    <p>Background utilization (overhead)</p>
    <p>VM utilization</p>
    <p>Request rate</p>
    <p>End-to-end response time</p>
    <p>Kalman filtering</p>
  </div>
  <div class="page">
    <p>DC2: High-level idea</p>
    <p>Service requirements of requests at each tier</p>
    <p>Network delay</p>
    <p>Background utilization (overhead)</p>
    <p>VM utilization</p>
    <p>Request rate</p>
    <p>End-to-end response time</p>
    <p>Kalman filtering</p>
  </div>
  <div class="page">
    <p>DC2: Modeling</p>
    <p>mul%-%er queueing network model</p>
    <p>home browse</p>
    <p>buy</p>
  </div>
  <div class="page">
    <p>DC2: Modeling</p>
    <p>1 2 3</p>
    <p>T1 T2 T3</p>
    <p>S11 S21 S31 S13 S23 S33</p>
    <p>S12 S22 S32</p>
    <p>U0j di</p>
    <p>Parameters:  i  Request rate for class i  Ti  Response %me for class i  Sij  Service requirement for class i at %er j  di  Network latency for class i  U0j  Background u%liza%on on %er j  Uj  U%liza%on of %er j 24 parameters 9 known + 15 unknown</p>
    <p>+=</p>
    <p>+=</p>
    <p>i ijijj</p>
    <p>j j</p>
    <p>ij ii</p>
    <p>SU0U</p>
    <p>U S</p>
    <p>dT</p>
  </div>
  <div class="page">
    <p>DC2: Modeling Parameters:  i  Request rate for class i  Ti  Response %me for class i  Sij  Service requirement for class i at %er j  di  Network latency for class i  U0j  Background u%liza%on on %er j  Uj  U%liza%on of %er j 24 parameters 9 known + 15 unknown</p>
    <p>+=</p>
    <p>+=</p>
    <p>i ijijj</p>
    <p>j j</p>
    <p>ij ii</p>
    <p>SU0U</p>
    <p>U S</p>
    <p>dT</p>
    <p>Underdetermined system  Need to infer unknowns  Can leverage monitored values  Kalman filtering</p>
    <p>Observed states: {i, Ti, Uj}  Hidden states: {Sij, di, U0j}</p>
    <p>Guess unknowns</p>
    <p>Evaluate func%ons using guesses</p>
    <p>Compare with monitored values</p>
    <p>Improve guess</p>
  </div>
  <div class="page">
    <p>Kalman filtering + Queueing: Evalua%on</p>
    <p>Time to converge ~1 min (6 intervals)</p>
    <p>Good accuracy</p>
    <p>Change in workload triggered</p>
    <p>Time to converge ~3 min (18 intervals)</p>
    <p>Good accuracy</p>
  </div>
  <div class="page">
    <p>RUBiS</p>
    <p>RUBiS is an open source benchmark inspired by ebay.com  Hosted on SomLayer hypervisors via OpenStack  We focus on scaling Tomcat app %er</p>
    <p>interval</p>
  </div>
  <div class="page">
    <p>DC2: All traces</p>
    <p>Bursty trace [WITS] Hill trace [ITA] Rampdown trace [WITS]</p>
  </div>
  <div class="page">
    <p>Bursty trace: All policies</p>
    <p>Bursty trace [WITS] Hill trace [ITA] Rampdown trace [WITS]</p>
    <p>DC2</p>
    <p>THRES(30,60)</p>
    <p>THRES(30,50)</p>
    <p>THRES(40,60)</p>
    <p>V=0% K=2.50 V=0% K=2.44 V=0% K=4.76</p>
    <p>V=0% K=2.50 V=6.66% K=2.56 V=0% K=6.00</p>
    <p>V=0% K=2.79 V=0% K=2.72 V=0% K=6.00</p>
    <p>V=2.02% K=2.19 V=15.87% K=2.13 V=0% K=4.62</p>
  </div>
  <div class="page">
    <p>All traces: All policies</p>
    <p>Bursty trace [WITS] Hill trace [ITA] Rampdown trace [WITS]</p>
    <p>DC2</p>
    <p>THRES(30,60)</p>
    <p>THRES(30,50)</p>
    <p>THRES(40,60)</p>
    <p>V=0% K=2.50 V=0% K=2.44 V=0% K=4.76</p>
    <p>V=0% K=2.50 V=6.66% K=2.56 V=0% K=6.00</p>
    <p>V=0% K=2.79 V=0% K=2.72 V=0% K=6.00</p>
    <p>V=2.02% K=2.19 V=15.87% K=2.13 V=0% K=4.62</p>
  </div>
  <div class="page">
    <p>Limita%ons and future work</p>
    <p>Evalua%on limited to dynamic web applica%ons  Currently inves%ga%ng Hadoop-type applica%ons</p>
    <p>Only applies to stateless %ers  DB scaling would be challenging</p>
    <p>Scaling algorithm can be modified</p>
    <p>Kalman Filtering can be replaced by other black-box approaches  Machine Learning approaches?</p>
    <p>Non-zero convergence %me</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Need for adap%ve scaling services for (opaque) cloud applica%ons  Applica%on agnos%c  Robust to arrival pauerns</p>
    <p>Exis%ng commercial offerings do not suffice: rule-based  Exis%ng auto-scaling research solu%ons do not apply due to lack of visibility and control of opaque cloud applica%ons</p>
    <p>Our solu%on: Dependable Compute Cloud (DC2)  Does not require offline benchmarking or expert knowledge  Can adapt to dynamic changes in workload</p>
    <p>Well suited for cloud users who lack exper%se in system modeling and applica%on knowledge</p>
  </div>
  <div class="page">
    <p>Thank You !</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Need for adap%ve scaling services for (opaque) cloud applica%ons  Applica%on agnos%c  Robust to arrival pauerns</p>
    <p>Exis%ng commercial offerings do not suffice: rule-based  Exis%ng auto-scaling research solu%ons do not apply due to lack of visibility and control of opaque cloud applica%ons</p>
    <p>Our solu%on: Dependable Compute Cloud (DC2)  Does not require offline benchmarking or expert knowledge  Can adapt to dynamic changes in workload</p>
    <p>Well suited for cloud users who lack exper%se in system modeling and applica%on knowledge</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Exis%ng CSP solu%ons</p>
    <p>Resource usage triggers  Amazon Auto Scaling, Microsom Azure Watch, VMware AppInsight, CiRBA</p>
    <p>Request rate for specific somware (ex: apache)  RightScale</p>
    <p>Latency/VM  Amazon Elas%c Load balancing</p>
    <p>Web site response %me  Scalr</p>
    <p>User has to set values</p>
  </div>
  <div class="page">
    <p>All workloads: All policies (Bursty trace)</p>
    <p>STATIC-OPT</p>
    <p>DC2</p>
    <p>THRES(30,60)</p>
    <p>V=0% K=3.00 V=0% K=4.00 V=0% K=3.00 V=0% K=3.00</p>
    <p>V=0% K=2.50 V=0% K=3.66 V=0% K=2.94 V=0% K=2.87</p>
    <p>V=0% K=2.50 V=3.06% K=3.40 V=2.04% K=2.98 V=0% K=3.00</p>
    <p>Base MoreDB MoreApp MoreWeb</p>
    <p>Rule-based policies like THRES require tuning and are not robust  Other auto-scaling policies require control of applica%on  DC2 is superior to THRES and does not require applica%on control</p>
  </div>
  <div class="page">
    <p>Kalman filtering</p>
    <p>Guess unknowns</p>
    <p>Evaluate func%ons using guesses</p>
    <p>Compare with monitored values</p>
    <p>Improve guess</p>
    <p>KF is a reac%ve, feedback-based es%ma%on approach that has only recently been employed for computer systems</p>
    <p>KF automa%cally learns the (possibly changing) system parameters, for any system, including combina%on of workloads</p>
    <p>We extend KF to a 3-%er 3-workload-class system  Based on KF es%ma%on, DC2 automa%cally, and proac4vely, detects which %er is the bouleneck, and how to resolve the bouleneck (scale VMs)</p>
    <p>do not require any knowledge of applica%on, except topology</p>
  </div>
  <div class="page">
    <p>Kalman filtering + Queueing</p>
    <p>Guess unknowns</p>
    <p>Evaluate func%ons using guesses</p>
    <p>Compare with monitored values</p>
    <p>Improve guess</p>
    <p>KF can be integrated with system models (ex, queueing models) to improve accuracy and convergence</p>
    <p>Model need not be accurate  KF leverages (true) monitored values to account for model inaccuracies  Well suited for approximate system models such as queueing-theore%c models  Can use other models as well, ex: machine-learning based models</p>
  </div>
  <div class="page">
    <p>All traces: All policies</p>
    <p>Bursty trace [WITS] Hill trace [ITA] Rampdown trace [WITS]</p>
    <p>STATIC-OPT</p>
    <p>DC2</p>
    <p>THRES(30,60)</p>
    <p>THRES(30,50)</p>
    <p>THRES(40,60)</p>
    <p>V=0% K=3.00 V=0% K=4.00 V=0% K=6.00</p>
    <p>V=0% K=2.50 V=0% K=2.44 V=0% K=4.76</p>
    <p>V=0% K=2.50 V=6.66% K=2.56 V=0% K=6.00</p>
    <p>V=0% K=2.79 V=0% K=2.72 V=0% K=6.00</p>
    <p>V=2.02% K=2.19 V=15.87% K=2.13 V=0% K=4.62</p>
  </div>
</Presentation>
