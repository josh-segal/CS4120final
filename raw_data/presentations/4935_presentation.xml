<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Application-Specific Customization of Soft Processor Microarchitecture Peter Yiannacouras J. Gregory Steffan Jonathan Rose</p>
    <p>University of Toronto</p>
    <p>Edward S. Rogers Sr. Department of Electrical and Computer Engineering</p>
  </div>
  <div class="page">
    <p>Processors and FPGA Systems</p>
    <p>We seek improvement through customization</p>
    <p>Processors lie at the heart of FPGA systems</p>
    <p>Memory Interface</p>
    <p>UART</p>
    <p>Custom Logic</p>
    <p>Ethernet</p>
    <p>Performs coordination and even computation  Better processors =&gt; less hardware to design</p>
    <p>Soft Processor</p>
  </div>
  <div class="page">
    <p>Motivating Application-Specific Customizations of Soft Processors</p>
    <p>We want to evaluate effectiveness of specialization</p>
  </div>
  <div class="page">
    <p>Research Goals</p>
    <p>To investigate 1. The potential for Application-tuning</p>
    <p>Tune processor microarchitecture to favour an application  Preserve general purpose functionality</p>
    <p>Measure efficiency gained through real implementations</p>
  </div>
  <div class="page">
    <p>SPREE</p>
    <p>SPREE System (Soft Processor Rapid Exploration Environment)</p>
    <p>RTL</p>
    <p>ISA Datapath  Input: Processor description  Made of hand-coded components</p>
    <p>Multi-cycle/variable-cycle FUs  Multiplexer select signals  Interlocking  Branch handling</p>
    <p>SPREE System</p>
    <p>Output: Synthesizable Verilog</p>
    <p>Processor Description</p>
  </div>
  <div class="page">
    <p>Back-End Infrastructure</p>
    <p>RTL</p>
    <p>Quartus II 4.2 CAD Software</p>
    <p>Modelsim RTL Simulator</p>
    <p>Benchmarks (MiBench,</p>
    <p>Dhrystone 2.1, RATES, XiRisc)</p>
    <p>Stratix 1S40C5</p>
    <p>We can measure area/performance/energy accurately</p>
  </div>
  <div class="page">
    <p>Comparison to Alteras Nios II</p>
    <p>Has three variations:  Nios II/e  unpipelined, no HW multiplier  Nios II/s  5-stage, with HW multiplier  Nios II/f  6-stage, dynamic branch prediction</p>
  </div>
  <div class="page">
    <p>Architectural Parameters Used in SPREE</p>
    <p>We focus on core microarchitecture</p>
    <p>Multiplication Support  Hardware FU or software routine</p>
    <p>Shifter implementation  Flipflops, multiplier, or LUTs</p>
    <p>Pipelining  Depth</p>
    <p>(2-7 stages)</p>
    <p>Organization  Forwarding</p>
  </div>
  <div class="page">
    <p>Area (Equivalent LEs)</p>
    <p>G e</p>
    <p>o m</p>
    <p>e a</p>
    <p>n W</p>
    <p>a ll C</p>
    <p>lo c</p>
    <p>k T</p>
    <p>im e</p>
    <p>( u</p>
    <p>s ) SPREE Processors</p>
    <p>Altera Nios II/e</p>
    <p>Altera Nios II/s</p>
    <p>Altera Nios II/f</p>
    <p>SPREE vs Nios II</p>
    <p>smaller</p>
    <p>faster</p>
    <p>-3-stage pipe -HW multiply -Multiply-based shifter</p>
  </div>
  <div class="page">
    <p>Exploration of Soft Processor Architectural Customizations</p>
  </div>
  <div class="page">
    <p>Vary the same parameters  Multiplication Support  Shifter implementation  Pipelining</p>
    <p>Determine 1. Best overall (general purpose) processor</p>
    <p>Metric: Performance per Area (MIPS/LE)  Basically inverse of Area-Delay product</p>
  </div>
  <div class="page">
    <p>u b</p>
    <p>b le</p>
    <p>_ so</p>
    <p>rt</p>
    <p>cr c</p>
    <p>d e</p>
    <p>s fft fir</p>
    <p>q u</p>
    <p>a n</p>
    <p>t</p>
    <p>iq u</p>
    <p>a n</p>
    <p>t</p>
    <p>tu rb</p>
    <p>o</p>
    <p>vl c</p>
    <p>b itc</p>
    <p>n ts</p>
    <p>C R</p>
    <p>C 3</p>
    <p>q so</p>
    <p>rt</p>
    <p>sh a</p>
    <p>st ri</p>
    <p>n g</p>
    <p>se a</p>
    <p>rc h</p>
    <p>F F</p>
    <p>T</p>
    <p>d ijk</p>
    <p>st ra</p>
    <p>p a</p>
    <p>tr ic</p>
    <p>ia</p>
    <p>g o</p>
    <p>l</p>
    <p>d ct</p>
    <p>d h</p>
    <p>ry</p>
    <p>O V</p>
    <p>E R</p>
    <p>A L</p>
    <p>L</p>
    <p>Benchmark</p>
    <p>P e</p>
    <p>rf o</p>
    <p>rm a</p>
    <p>n c</p>
    <p>e p</p>
    <p>e r</p>
    <p>U n</p>
    <p>it A</p>
    <p>re a</p>
    <p>( M</p>
    <p>IP S</p>
    <p>/L E</p>
    <p>)</p>
    <p>Performance per Area of All Processors</p>
    <p>u b</p>
    <p>b le</p>
    <p>_ so</p>
    <p>rt</p>
    <p>cr c</p>
    <p>d e</p>
    <p>s fft fir</p>
    <p>q u</p>
    <p>a n</p>
    <p>t</p>
    <p>iq u</p>
    <p>a n</p>
    <p>t</p>
    <p>tu rb</p>
    <p>o</p>
    <p>vl c</p>
    <p>b itc</p>
    <p>n ts</p>
    <p>C R</p>
    <p>C 3</p>
    <p>q so</p>
    <p>rt</p>
    <p>sh a</p>
    <p>st ri</p>
    <p>n g</p>
    <p>se a</p>
    <p>rc h</p>
    <p>F F</p>
    <p>T</p>
    <p>d ijk</p>
    <p>st ra</p>
    <p>p a</p>
    <p>tr ic</p>
    <p>ia</p>
    <p>g o</p>
    <p>l</p>
    <p>d ct</p>
    <p>d h</p>
    <p>ry</p>
    <p>O V</p>
    <p>E R</p>
    <p>A L</p>
    <p>L</p>
    <p>Benchmark</p>
    <p>P e</p>
    <p>rf o</p>
    <p>rm a</p>
    <p>n c</p>
    <p>e p</p>
    <p>e r</p>
    <p>U n</p>
    <p>it A</p>
    <p>re a</p>
    <p>( M</p>
    <p>IP S</p>
    <p>/L E</p>
    <p>)</p>
    <p>General Purpose</p>
    <p>serialshift_norise</p>
    <p>serialshift_lowrise</p>
    <p>serialshift_judicialrise</p>
    <p>serialshift_highrise</p>
    <p>mulshift_norise</p>
    <p>mulshift_minrise</p>
    <p>mulshift_highrise</p>
    <p>barrelshift_norise</p>
    <p>barrelshift_minrise</p>
    <p>barrelshift_highrise</p>
    <p>serialshiftdatamem_nori se pipe3_serialshift</p>
    <p>pipe3_mulshift</p>
    <p>pipe3_barrelshift</p>
    <p>pipe4_serialshift</p>
    <p>pipe4_mulshift</p>
    <p>pipe4_barrelshift</p>
    <p>pipe4_serialshift_2</p>
    <p>pipe4_mulshift_stall_2</p>
    <p>pipe4_barrelshift_2</p>
    <p>pipe5_serialshift</p>
    <p>pipe5_mulshift</p>
    <p>pipe5_barrelshift</p>
    <p>pipe5_serialshift_load</p>
    <p>pipe5_mulshift_load</p>
    <p>pipe5_mulshift_stall_loa d pipe5_barrelshift_load</p>
    <p>pipe7_serialshift</p>
    <p>pipe7_mulshift</p>
    <p>pipe7_barrelshift</p>
    <p>pipe7_barrelshift_2</p>
    <p>barrelshift_norise.nomul</p>
    <p>barrelshift_minrise.nom ul barrelshift_highrise.nom ul serialshift_norise.nomul</p>
    <p>serialshift_lowrise.nomu l serialshift_judicialrise.n omul serialshift_highrise.nom ul mulshift_norise.nomul</p>
    <p>mulshift_minrise.nomul</p>
    <p>mulshift_highrise.nomul</p>
    <p>serialshiftdatamem_nori se.nomul pipe3_serialshift.nomul</p>
    <p>pipe3_mulshift.nomul</p>
    <p>pipe3_mulshift_stall.no mul pipe3_barrelshift.nomul</p>
    <p>pipe4_serialshift.nomul</p>
    <p>pipe4_mulshift.nomul</p>
    <p>pipe4_barrelshift.nomul</p>
    <p>pipe5_serialshift.nomul</p>
    <p>pipe5_mulshift.nomul</p>
    <p>pipe5_barrelshift.nomul</p>
    <p>u b</p>
    <p>b le</p>
    <p>_ so</p>
    <p>rt</p>
    <p>cr c</p>
    <p>d e</p>
    <p>s fft fir</p>
    <p>q u</p>
    <p>a n</p>
    <p>t</p>
    <p>iq u</p>
    <p>a n</p>
    <p>t</p>
    <p>tu rb</p>
    <p>o</p>
    <p>vl c</p>
    <p>b itc</p>
    <p>n ts</p>
    <p>C R</p>
    <p>C 3</p>
    <p>q so</p>
    <p>rt</p>
    <p>sh a</p>
    <p>st ri</p>
    <p>n g</p>
    <p>se a</p>
    <p>rc h</p>
    <p>F F</p>
    <p>T</p>
    <p>d ijk</p>
    <p>st ra</p>
    <p>p a</p>
    <p>tr ic</p>
    <p>ia</p>
    <p>g o</p>
    <p>l</p>
    <p>d ct</p>
    <p>d h</p>
    <p>ry</p>
    <p>O V</p>
    <p>E R</p>
    <p>A L</p>
    <p>L</p>
    <p>Benchmark</p>
    <p>P e</p>
    <p>rf o</p>
    <p>rm a</p>
    <p>n c</p>
    <p>e p</p>
    <p>e r</p>
    <p>U n</p>
    <p>it A</p>
    <p>re a</p>
    <p>( M</p>
    <p>IP S</p>
    <p>/L E</p>
    <p>)</p>
    <p>General Purpose</p>
    <p>Application-tuned</p>
    <p>serialshift_norise</p>
    <p>serialshift_lowrise</p>
    <p>serialshift_judicialrise</p>
    <p>serialshift_highrise</p>
    <p>mulshift_norise</p>
    <p>mulshift_minrise</p>
    <p>mulshift_highrise</p>
    <p>barrelshift_norise</p>
    <p>barrelshift_minrise</p>
    <p>barrelshift_highrise</p>
    <p>serialshiftdatamem_n orise pipe3_serialshift</p>
    <p>pipe3_mulshift</p>
    <p>pipe3_barrelshift</p>
    <p>pipe4_serialshift</p>
    <p>pipe4_mulshift</p>
    <p>pipe4_barrelshift</p>
    <p>pipe4_serialshift_2</p>
    <p>pipe4_mulshift_stall_ 2 pipe4_barrelshift_2</p>
    <p>pipe5_serialshift</p>
    <p>pipe5_mulshift</p>
    <p>pipe5_barrelshift</p>
    <p>pipe5_serialshift_load</p>
    <p>pipe5_mulshift_load</p>
    <p>pipe5_mulshift_stall_l oad pipe5_barrelshift_loa d pipe7_serialshift</p>
    <p>pipe7_mulshift</p>
    <p>pipe7_barrelshift</p>
    <p>pipe7_barrelshift_2</p>
    <p>barrelshift_norise.nom ul barrelshift_minrise.no mul barrelshift_highrise.no mul serialshift_norise.nom ul serialshift_lowrise.no mul serialshift_judicialrise. nomul serialshift_highrise.no mul mulshift_norise.nomul</p>
    <p>mulshift_minrise.nomu l mulshift_highrise.nom ul serialshiftdatamem_n orise.nomul pipe3_serialshift.nom ul pipe3_mulshift.nomul</p>
    <p>pipe3_mulshift_stall.n omul pipe3_barrelshift.nom ul pipe4_serialshift.nom ul pipe4_mulshift.nomul</p>
    <p>pipe4_barrelshift.nom ul pipe5_serialshift.nom ul pipe5_mulshift.nomul</p>
    <p>pipe5_barrelshift.nom ul</p>
  </div>
  <div class="page">
    <p>SPREE automatically removes  Unused connections  Unused components</p>
    <p>Reduce processor by reducing the ISA  Can create application-specific processor</p>
    <p>Eliminate unused parts of the ISA</p>
  </div>
  <div class="page">
    <p>Instruction-set Usage of Benchmarks</p>
    <p>Applications do not use complete ISA</p>
    <p>Strong potential for hardware reduction</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>c ti</p>
    <p>o n</p>
    <p>o f</p>
    <p>A re</p>
    <p>a Area Reduction from Subsetting</p>
    <p>Area reduced by 60% in some, 23% on average</p>
    <p>Similar reductions for energy, small impact on performance</p>
  </div>
  <div class="page">
    <p>Subsetting is effective on its own  Can apply subsetting on top of tuning</p>
    <p>Compare different customization methods 1. Tuning</p>
  </div>
  <div class="page">
    <p>Combining Application Tuning and Instruction-set Subsetting</p>
    <p>Tuning reduces the waste that subsetting eliminates</p>
  </div>
  <div class="page">
    <p>Summary of Presented Architectural Conclusions</p>
    <p>Application tuning  14% average efficiency gain  Will increase with more architectural axes</p>
    <p>Instruction-set Subsetting  Up to 60% area &amp; energy savings  16% average efficiency gain</p>
    <p>Combined Tuning &amp; Subsetting  25% average efficiency gain</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Consider other promising architectural axes  Branch prediction, aggressive forwarding  ISA changes  Datapaths (eg. VLIW)  Caches and memory hierarchy</p>
    <p>Compiler assistance  Can improve tuning &amp; subsetting</p>
  </div>
</Presentation>
