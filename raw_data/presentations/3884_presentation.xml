<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Striping without Sacrifices: Maintaining POSIX Semantics in a Parallel File System</p>
    <p>Jan Stender Bjrn Kolbeck</p>
    <p>Zuse Institute Berlin</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 2</p>
    <p>Outline</p>
    <p>Introduction</p>
    <p>Problem Description</p>
    <p>Striping Protocol</p>
    <p>Experimental Results</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 3</p>
    <p>Introduction</p>
    <p>Striping increases the performance of file systems</p>
    <p>a single file is split up in chunks scattered across multiple storage resources</p>
    <p>chunks can be accessed in parallel</p>
    <p>a single file can be accessed with the accumulated performance of multiple storage resources</p>
    <p>Parallel file systems have distributed storage resources</p>
    <p>chunks reside on different storage servers</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 4</p>
    <p>Introduction</p>
    <p>General-purpose file systems are expected to be POSIX-compliant</p>
    <p>well-defined interfaces and behavior</p>
    <p>no specific API, applications run w/o being modified or relinked</p>
    <p>POSIX-compliant file systems can be used by any application</p>
    <p>POSIX defines how read and write operations behave in certain corner cases:</p>
    <p>''gaps''</p>
    <p>reading beyond EOF</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 5</p>
    <p>Introduction</p>
    <p>Gaps</p>
    <p>writes at an offset beyond EOF implicitly creates a gap, i.e. a region of missing data</p>
    <p>reading bytes in a gap must return binary zeros</p>
    <p>EOF</p>
    <p>reading a range of bytes to an offset beyond EOF must prune the resulting buffer (less bytes than requested)</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 6</p>
    <p>Problem Description</p>
    <p>Problem: How to distinguish between a gap and the EOF in a parallel file system?</p>
    <p>process A creates new file by writing chunk 1 and 3</p>
    <p>chunk 2 is not explicitly filled with data</p>
    <p>process B requests missing chunk 2</p>
    <p>storage server 2 must decide whether to respond with an empty buffer (EOF) or a zero-padded buffer (gap)</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 7</p>
    <p>Problem Description</p>
    <p>Basic idea: provide for a consistent view on the file size among all storage servers</p>
    <p>However, ...</p>
    <p>synchronizing each append-write operation across all storage servers is too expensive</p>
    <p>a central server that stores the file size would be a bottleneck</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 8</p>
    <p>Striping Protocol</p>
    <p>Solution: decentralized, loosely-synchronized approach</p>
    <p>storage servers disseminate and keep track of hints about the current file size (i.e. the globally last chunk number)</p>
    <p>if a requested chunk is missing, these hints are used to decide between a gap and an EOF</p>
    <p>if no decision is possible, the file size is explicitly synchronized by fetching the last chunk number from all storage servers</p>
    <p>implicit assumption: files grow monotonously</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 9</p>
    <p>Striping Protocol</p>
    <p>start</p>
    <p>chunk no. &gt; last known</p>
    <p>one? yes</p>
    <p>no</p>
    <p>stop</p>
    <p>write chunk locally</p>
    <p>send new chunk number to remote</p>
    <p>servers</p>
    <p>start</p>
    <p>chunk no. &gt; last known</p>
    <p>one? yes</p>
    <p>no</p>
    <p>stop</p>
    <p>receive chunk number</p>
    <p>replace largest known chunk no. with received one</p>
    <p>Write</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 10</p>
    <p>Striping Protocol</p>
    <p>Read start</p>
    <p>chunk present? yes</p>
    <p>no</p>
    <p>stop</p>
    <p>read chunk locally</p>
    <p>return chunk</p>
    <p>return gap last known</p>
    <p>chunk number &gt; requested</p>
    <p>one?</p>
    <p>yes</p>
    <p>no</p>
    <p>fetch last known chunk numbers from all remote servers, replace local one with greatest if necessary</p>
    <p>last known chunk number &gt; requested</p>
    <p>one?</p>
    <p>yes</p>
    <p>return gap</p>
    <p>no return EOF</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 11</p>
    <p>Striping Protocol</p>
    <p>Truncate  problem: violates our monotony assumption on the file size</p>
    <p>solution: ''truncate epochs''</p>
    <p>file size hints consist of chunk number + epoch number</p>
    <p>a designated server is responsible for truncate operations</p>
    <p>it increments the epoch number</p>
    <p>it synchronously updates the file size + epoch on all remote servers</p>
    <p>a server receiving a file size hint updates its local chunk and epoch number if</p>
    <p>the received epoch number is greater than the local one</p>
    <p>both epoch numbers are equal and the received chunk number is greater than the local chunk number</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 12</p>
    <p>Experimental Results</p>
    <p>reads and append writes scale linearly</p>
    <p>low latency for reading gaps and data, as no file size synchronization is necessary</p>
    <p>higher latency for reading beyond the EOF, due to file size synchronization</p>
    <p>striping width/number of OSDs</p>
    <p>th o ru</p>
    <p>g h</p>
    <p>p u t</p>
    <p>in M</p>
    <p>B /s</p>
    <p>striping width/number of OSDs</p>
    <p>th o ru</p>
    <p>g h p u t</p>
    <p>in M</p>
    <p>B /s</p>
    <p>read gap read data read beyond EOF</p>
    <p>re q</p>
    <p>u e s t</p>
    <p>d u</p>
    <p>ra ti</p>
    <p>o n i n</p>
    <p>m s</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 13</p>
    <p>Summary</p>
    <p>The suggested protocol exhibits a POSIX-compliant behavior while ensuring scalability</p>
    <p>Frequent operations are fast</p>
    <p>append and random writes</p>
    <p>reads in file bounds</p>
    <p>The protocol does not enforce locking</p>
    <p>parallel access is possible by multiple clients</p>
    <p>The protocol inherently supports sparse files</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 14</p>
    <p>Thank you!</p>
    <p>Questions?</p>
    <p>Funded by the European Commision's FP6 programme under contract #FP6-033576</p>
  </div>
  <div class="page">
    <p>Bjrn Kolbeck, Jan Stender  LASCO '08, Boston, 23-JUN-2008  Page 15</p>
    <p>XtreemFS - Architecture</p>
  </div>
</Presentation>
