<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sweet Storage SLOs with Frosting</p>
    <p>Andrew Wang, Shivaram Venkataraman,</p>
    <p>Sara Alspaugh, Ion Stoica, Randy Katz</p>
  </div>
  <div class="page">
    <p>Exploratory drill-down</p>
    <p>Interactive web-serving</p>
    <p>HDFS</p>
    <p>Batch analytics</p>
    <p>HBase MySQL</p>
  </div>
  <div class="page">
    <p>Exploratory drill-down</p>
    <p>Interactive web-serving</p>
    <p>HDFS</p>
    <p>Batch analytics</p>
    <p>HBase MySQL</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Exploratory drill-down</p>
    <p>Interactive web-serving</p>
    <p>HDFS</p>
    <p>Batch analytics</p>
    <p>HBase MySQL</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Exploratory drill-down</p>
    <p>Interactive web-serving</p>
    <p>HDFS</p>
    <p>Batch analytics</p>
    <p>HBase MySQL</p>
  </div>
  <div class="page">
    <p>Todays Clusters</p>
    <p>Segregated storage systems</p>
    <p>Downsides</p>
    <p>Delayed reaction time from analytics</p>
    <p>Increased provisioning costs ($$$)</p>
    <p>Reduced cluster utilization</p>
    <p>Duplication of data</p>
    <p>Ideally, all apps share a single storage system!</p>
  </div>
  <div class="page">
    <p>Exploratory drill-down</p>
    <p>Interactive web-serving</p>
    <p>Unified Storage Layer</p>
    <p>Batch analytics</p>
    <p>Storage layer is not aware of each applications SLO!</p>
  </div>
  <div class="page">
    <p>Mixing Front-end and Batch</p>
  </div>
  <div class="page">
    <p>High-percentile Latency SLOs</p>
    <p>Metric of merit for latency</p>
    <p>95th or 99th percentile</p>
    <p>Important with request fan-out</p>
    <p>Stragglers affect overall latency</p>
    <p>Growing importance for complex pages</p>
    <p>Status updates, profile pics, friend requests, etc.</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Want to multiplex front-end and batch workloads</p>
    <p>Also need 99th percentile latency guarantees for front-end storage system operations</p>
  </div>
  <div class="page">
    <p>Existing solutions</p>
    <p>Mismatch between apps and storage systems</p>
    <p>Apps think about key-value or row operations</p>
    <p>Storage systems think about disks</p>
    <p>Need to manually tune low-level parameters</p>
    <p>MB/s, IOPS, etc.</p>
    <p>Use average latency, not 99th percentile</p>
  </div>
  <div class="page">
    <p>Goals of Frosting</p>
    <p>Enable a single, shared storage layer</p>
    <p>High-level service-level objectives (SLOs) specified directly to the storage system</p>
    <p>my gets will finish in 200 ms, 99% of the time</p>
    <p>No manual tuning by the app programmer</p>
  </div>
  <div class="page">
    <p>Deep Software Stacks</p>
    <p>HBase</p>
    <p>BigTable-like</p>
    <p>Distributed column store</p>
    <p>Get, put, scans on rows</p>
    <p>HDFS</p>
    <p>GFS-like</p>
    <p>Distributed filesystem</p>
    <p>OS</p>
    <p>Interfaces with hardware</p>
    <p>HBase</p>
    <p>HDFS</p>
    <p>Client</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Deep Software Stacks</p>
    <p>Clean layered architecture</p>
    <p>Request processing traverses software stack</p>
    <p>Hard to debug latency!</p>
    <p>Lots of code</p>
    <p>Complex interactions</p>
    <p>HBase</p>
    <p>HDFS</p>
    <p>Client</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Frosting Architecture</p>
    <p>Try the simple approach</p>
    <p>HBase</p>
    <p>HDFS</p>
    <p>Client</p>
    <p>OS</p>
  </div>
  <div class="page">
    <p>Frosting Architecture</p>
    <p>Try the simple approach</p>
    <p>Insert scheduling at the top layer (HBase)</p>
    <p>Proportional share among HBase clients</p>
    <p>Dynamically adjust shares to enforce client SLOs</p>
    <p>HBase</p>
    <p>HDFS</p>
    <p>Client</p>
    <p>OS</p>
    <p>Frosting</p>
  </div>
  <div class="page">
    <p>High-level SLO Enforcement</p>
    <p>Feedback loop</p>
    <p>Measure each clients performance</p>
    <p>Compare with SLO</p>
    <p>Increase or decrease allocation accordingly</p>
    <p>Performance measurements</p>
    <p>Allocation optimizer</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>HBase cluster on c1.xlarge EC2 nodes</p>
    <p>8 CPU cores</p>
    <p>4 local disks</p>
    <p>Yahoo! Cloud Serving Benchmark clients</p>
    <p>Frontend: 1-row gets, high priority</p>
    <p>Batch: 500-row scans, low priority</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Fundamental latency vs. throughput tradeoff</p>
    <p>High-level SLOs can be enforced directly and automatically by the storage system</p>
    <p>Ideas can be applied to existing systems</p>
  </div>
  <div class="page"/>
</Presentation>
