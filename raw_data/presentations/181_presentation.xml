<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rashad S. Oreifej, Carthik A. Sharma, and Ronald F. DeMara University of Central Florida</p>
    <p>Rashad S. Oreifej, Carthik A. Sharma, and Ronald F. DeMara University of Central Florida</p>
    <p>Expediting GA-Based Evolution Using Group Testing Techniques for Reconfigurable</p>
    <p>Hardware1</p>
    <p>ReConFig06ReConFig06 San Luis Potosi - MexicoSan Luis Potosi - Mexico</p>
    <p>ReConFig06ReConFig06 San Luis Potosi - MexicoSan Luis Potosi - Mexico</p>
  </div>
  <div class="page">
    <p>Evolvable Hardware</p>
    <p>Evolutionary Design:Evolutionary Design:  Start with available CLBs and IOBs  Implement a design using Genetic Operators etc</p>
    <p>[Fogarty97]  Limited or no ability to re-design to account for</p>
    <p>suspected faulty resources</p>
    <p>Evolutionary Regeneration:Evolutionary Regeneration:  Start with an existing pool of designs  Some existing configurations may use faulty resources  Eliminate use of suspected faulty resources</p>
    <p>Genetic Operators can be applied to refurbish designs [Vigander01]</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>Pre-compiled Column-Based Dual FPGA architecture [Mitra04]Pre-compiled Column-Based Dual FPGA architecture [Mitra04]  Autonomous detection, repair by shifting pre-compiled columns  Isolation using distributed CED-checkers and blind reconfiguration</p>
    <p>attempts</p>
    <p>Overview of Combinatorial Group Testing and Applications Overview of Combinatorial Group Testing and Applications [Du00][Du00]  Provides taxonomy and general algorithms for applying CGT  Examples of CGT applications: DNA clone library filtering, vaccine</p>
    <p>screening, computer fault diagnosis, etc.</p>
    <p>CGT Enhanced Circuit Diagnosis [Kahng04]CGT Enhanced Circuit Diagnosis [Kahng04]  Present doubling, halving etc for circuit fault diagnosis using BIST,</p>
    <p>CGT  Requires ability to test resources individually</p>
    <p>Chinese Remainder Sieve technique [Eppstein05]Chinese Remainder Sieve technique [Eppstein05]  Efficient non-adaptive and two-stage CGT based on prime number</p>
    <p>driven test formation  Improved algorithms for practical problem sizes (n &lt; 1080) with small</p>
    <p>number of defectives (d &lt; 4)</p>
  </div>
  <div class="page">
    <p>Genetic Algorithms &amp; Evolvable Hardware</p>
    <p>GAs are strong candidates for implementing system GAs are strong candidates for implementing system refurbishment:refurbishment:  They implement guided trial-and-error search using principles of</p>
    <p>Darwinian evolution  Iterative selection enforces survival of the fittest  Genetic operators - mutation, crossover,  - can be used to</p>
    <p>refurbish designs  HypothesisHypothesis: Information regarding resource performance can</p>
    <p>expedite GA-based refurbishment IndividualIndividual (Chromosome)(Chromosome)</p>
    <p>GENEGENE</p>
    <p>GAs frequently use strings of 1s and 0s to GAs frequently use strings of 1s and 0s to represent candidate solutionsrepresent candidate solutions  FPGA Configuration File is a String of 1s and 0s</p>
  </div>
  <div class="page">
    <p>Conventional vs. CGT-Pruned GA</p>
    <p>Conventional GA: Conventional GA: Searches the whole space to evolve a working design or repair  Information about resource suitability may accelerate search</p>
    <p>CGT-Pruned GA: CGT-Pruned GA: Prefers resources of higher fitness to evolve a working design or repair.</p>
    <p>Q. How to obtain resource fitness information? A. Using Group Testing Techniques.</p>
    <p>Combinatorial Group Testing identifies a decreasing group of defectives by iterative refinement</p>
    <p>Tests on subsets of suspects  Is expected to take less time. Faster Design and Faster</p>
    <p>Repair</p>
  </div>
  <div class="page">
    <p>CGT-Pruned GA Simulator</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Target CircuitTarget Circuit 3-bit x 2-bit Multiplier</p>
    <p>No. of ExperimentsNo. of Experiments 120 (60/Experiment Type Repair and Design)</p>
    <p>FPGA ArchitectureFPGA Architecture Feed-Forward design</p>
    <p>No. of ResourcesNo. of Resources 60 LUTs (15 CLB, 4LUTs/CLB)</p>
    <p>Fault ModelFault Model Logic Single Fault Model</p>
    <p>Fault TypeFault Type Stuck at One</p>
  </div>
  <div class="page">
    <p>CGT-Pruned Refurbishment</p>
    <p>IsolateIsolate and A and Avoidvoid suspect resources from being used suspect resources from being used</p>
    <p>HypothesisHypothesis:  CGT-Pruned GA Repair evolves a full fitness circuit faster</p>
    <p>than Conventional GA Repair  Results show performance improvement in CGT-Pruned</p>
    <p>Repair</p>
  </div>
  <div class="page">
    <p>Results: Conventional Vs. CGT-Pruned Repair</p>
    <p>CGT-Pruned GA out-performs Conventional GA</p>
    <p>Experiment Type Conventional Repair CGT-pruned Repair</p>
    <p>Circuit 3-bit x 2-bit Multiplier 3-bit x 2-bit Multiplier</p>
    <p>Number of Experiments 30 30</p>
    <p>Arithmetic Mean (Generations)</p>
    <p>Standard Deviation 15650 12550</p>
    <p>Standard Error of the Mean 2850 2300</p>
  </div>
  <div class="page">
    <p>Achieving Refurbishment with Cell Swapping</p>
    <p>IsolateIsolate and and SwapSwap suspect resources suspect resources  Cell SwappingCell Swapping Operator Operator</p>
    <p>Copy suspect resource Cell configuration to another unused cell  GA searches for routing strategy to re-route interconnect to the</p>
    <p>previously-unused cell  Refurbishment with Cell SwappingRefurbishment with Cell Swapping</p>
    <p>Swap suspect cells one by one and evaluate fitness until full fitness is evolved</p>
    <p>If swapping all suspect cells does not realize complete refurbishment, then employ other GA operators</p>
  </div>
  <div class="page">
    <p>Repair Progress</p>
  </div>
  <div class="page">
    <p>CGT-Pruned GA Design</p>
    <p>Evolve the entire circuit design from scratchEvolve the entire circuit design from scratch  Avoid Avoid suspectsuspect resources and take advantage of resources and take advantage of</p>
    <p>resource redundancy within the FPGAresource redundancy within the FPGA</p>
    <p>CGT-Pruning outperforms Conventional GA-based techniques</p>
  </div>
  <div class="page">
    <p>Results: Conventional Vs. CGT-Pruned Design</p>
    <p>Design of a circuit in the presence of a single stuck-at fault</p>
    <p>Experiment Type Conventional design CGT-pruned design</p>
    <p>Circuit 3-bit x 2-bit Multiplier 3-bit x 2-bit Multiplier</p>
    <p>Number of Experiments 30 30</p>
    <p>Arithmetic Mean (Generations)</p>
    <p>Standard Deviation 36000 37300</p>
    <p>Standard Error of the Mean 7200 7450</p>
  </div>
  <div class="page">
    <p>Comparison of Performance  Number of Generations for Repair</p>
    <p>More than 70%70% of the experiments benefited substantially from resource information generated using CGT</p>
  </div>
  <div class="page">
    <p>Results Summary</p>
    <p>As opposed to Conventional GAs, CGT-Pruned GAsCGT-Pruned GAs::  Completely refurbish configurations in 38%38% fewer generations  Design fully functional configurations in 16%16% fewer generations  Faulty resources are eliminated from</p>
    <p>Pool of unused-resources in the case of repair as opposed to the pool of all-resources in the case of design.</p>
    <p>Repair complexity vs. Design complexity  Repair complexity &lt;&lt; Design complexity</p>
    <p>Repairs were realized in one-fifthone-fifth of the time required for Design</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
    <p>On following pages</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Mission-critical Embedded Systems require high Mission-critical Embedded Systems require high reliability and availabilityreliability and availability</p>
    <p>Characteristics of Operating Environment may Characteristics of Operating Environment may induce hardware failures:induce hardware failures:  Aging, Manufacturing Defects, etc.</p>
    <p>System Reliability:System Reliability:  Fault Avoidance. Always Possible? No  Design Margin. Always Adequate? No  Modular Redundancy. Always Recoverable?No  Fault Refurbishment. Highly Flexible?  Yes  but</p>
    <p>technically challenging to achieve</p>
  </div>
  <div class="page">
    <p>Group Testing Techniques</p>
    <p>Competitive Group TestingCompetitive Group Testing  Algorithm based on Algorithm based on group testinggroup testing</p>
    <p>methodsmethods  Use Use competitioncompetition between between</p>
    <p>configurationsconfigurations  Temporal information stored in Temporal information stored in HH matrix matrix  Successive intersectionSuccessive intersection  Monitor health history of resources Monitor health history of resources</p>
    <p>which presents resource fitnesswhich presents resource fitness  Simulated using C programming Simulated using C programming</p>
    <p>language and GSL functions language and GSL functions [Sharma-[Sharma06]06]</p>
    <p>Relative fitness of resource  1/H [i,j]</p>
    <p>H H [i,j][i,j]</p>
    <p>i,j</p>
  </div>
  <div class="page">
    <p>Three Fast Runs of the CGTpruned GA Repair</p>
    <p>GA evolves to a relatively very high fitness within the first few hundreds generations, but takes significantly more generations to reach the maximum fitness</p>
  </div>
  <div class="page">
    <p>References [1] Fogarty T. C., J. F. Miller, and P. Thomson, &quot;Evolving Digital Logic Circuits on Xilinx 6000 Family FPGAs,&quot; in Proceedings of The</p>
    <p>[2] Sverre Vigander, Evolutionary Fault Repair in Space Applications, Masters Thesis, Dept. of Computer &amp; Information Science, Norwegian University of Science and Technology (NTNU), Trondheim, 2001.</p>
    <p>[3] C. A. Sharma, R. F. DeMara, &quot;A Combinatorial Group Testing Method for FPGA Fault Location&quot;, accepted to International Conference on Advances in Computer Science and Technology (ACST 2006), Puerto Vallarta, Mexico, January 23 - 25, 2006</p>
    <p>[4] S. Mitra and E. J. McCluskey, Which Concurrent Error Detection Scheme to Choose?, in Proceedings of the International Test Conference 2000, p. 985, October 2000.</p>
    <p>[5] D. Du and F. K. Hwang. Combinatorial Group Testing and its Applications, volume 12 of Series on Applied Mathematics. World Scientific, 2000.</p>
    <p>[6] A. B. Kahng and S. Reda. Combinatorial Group Testing Methods for the BIST Diagnosis Problem, in Proceedings of the Asia and South Pacific Design Automation Conference, January 2004.</p>
    <p>[7] Keymeulen, D.; Zebulum, R.S.; Jin, Y.; Stoica, A.. Fault-Tolerant Evolvable Hardware Using Field-Programmable Transistor Arrays, IEEE Transactions On Reliability, Vol. 49, No. 3, September 2000</p>
    <p>[8] Lohn, J.; Larchev, G.; DeMara, R. Evolutionary fault recovery in a Virtex FPGA using a representation that incorporates routing, Parallel and Distributed Processing Symposium, 2003. Proceedings. International 22-26 April 2003</p>
    <p>[9] Lach, J.; Mangione-Smith, W.H.; Potkonjak, M. Low overhead fault-tolerant FPGA systems, Very Large Scale Integration (VLSI) Systems, IEEE Transactions on Volume 6, Issue 2, June 1998</p>
    <p>[10] Miron Abramovici, John M. Emmert and Charles E. Stroud , Roving Stars: An Integrated Approach To On-Line Testing, Diagnosis, And Fault Tolerance For Fpgas In Adaptive Computing Systems, The Third NASA/DoD Workshop on Evolvable Hardware, Long Beach, Cailfornia 2001</p>
    <p>[11] DeMara, R.F.; Kening Zhang. Autonomous FPGA Fault Handling through Competitive Runtime Reconfiguration, Evolvable Hardware, 2005. Proceedings. 2005 NASA/DoD Conference on 29-01 June 2005</p>
    <p>[12] D. Eppstein, M. T. Goodrich, and D. S. Hirschberg. Improved combinatorial group testing for realworld problem sizes, In Workshop on Algorithms and Data Structures (WADS), Lecture Notes Comput. Sci. Springer, 2005.</p>
    <p>[13] J. F. Miller, P. Thomson, and T. Fogarty. Designing Electronic Circuits Using Evolutionary Algorithms. Arithmetic Circuits: A Case Study, In D. Quagliarella, J. Periaux, C. Poloni, and G. Winter, editors, Genetic Algorithms and Evolution Strategy in Engineering and Computer Science, pages 105--131. Morgan Kaufmann, Chichester, England, 1998.</p>
  </div>
  <div class="page">
    <p>Fault Tolerant Design and Detection Characteristics</p>
    <p>***Incorporates resource performance information</p>
    <p>Previous Work</p>
  </div>
  <div class="page">
    <p>Fault Recovery Characteristics</p>
    <p>Previous Work</p>
  </div>
  <div class="page">
    <p>Our Goal: Autonomous FPGA Refurbishment</p>
    <p>Redundancy</p>
    <p>increases with amount of spare capacity</p>
    <p>restricted at design-time</p>
    <p>based on time required to select spare resource</p>
    <p>determined by adequacy of spares available (?)</p>
    <p>yes</p>
    <p>Refurbishment</p>
    <p>weakly-related to number</p>
    <p>recovery capacity</p>
    <p>variable at recovery-time</p>
    <p>based on time required to find suitable recovery</p>
    <p>affected by multiple characteristics (+ or -)</p>
    <p>yes</p>
    <p>Overhead from Unutilized Spares weight, size, power</p>
    <p>Granularity of Fault Coverage resolution where fault handled</p>
    <p>Fault-Resolution Latency availability via downtime required to handle fault</p>
    <p>Quality of Repair likelihood and completeness</p>
    <p>Autonomous Operation fix without outside intervention</p>
    <p>increase availability without carrying pre-configured spares</p>
    <p>everyday example</p>
    <p>spare tires can of fix-a-flat</p>
  </div>
  <div class="page">
    <p>Commercial Applications:  Nextel: frequency allocation for cellular phone networks -- $15M</p>
    <p>predicted savings in NY market  Pratt &amp; Whitney: turbine engine design --- engineer: 8 weeks;</p>
    <p>GA: 2 days w/3x improvement</p>
    <p>International Truck: production scheduling improved by 90% in 5 plants</p>
    <p>NASA: superior Jupiter trajectory optimization, antennas, FPGAs</p>
    <p>Koza: 25 instances showing human-competitive performance such as analog circuit design, amplifiers, filters</p>
    <p>GA Success Stories</p>
  </div>
  <div class="page">
    <p>Adaptive GA Design</p>
    <p>Circuit: 2 to 4 Decoder</p>
    <p>CLBs: 2</p>
    <p>LUTs/CLB: 4</p>
    <p>Fault: Stuck at 1 and Stuck at 0</p>
    <p>Traditional GA: 220 Generations *, std dev 240**</p>
    <p>Adaptive GA: 152 Generations *, std dev 120**</p>
    <p>* Arithmetic mean for twenty experiments ** Standard Deviation for twenty experiments</p>
  </div>
  <div class="page">
    <p>Analysis Metrics</p>
    <p>Mean:</p>
    <p>Standard Deviation:</p>
    <p>Standard Error of the Mean:</p>
    <p>Confidence Level:</p>
    <p>)( 1</p>
    <p>n</p>
    <p>x n</p>
    <p>k xk</p>
    <p>x</p>
    <p>n</p>
    <p>x n</p>
    <p>k k</p>
    <p>x</p>
    <p>1</p>
    <p>n SEM xx</p>
    <p>%68)(   xxx SEMCL</p>
    <p>%95)2(   xxx SEMCL</p>
  </div>
  <div class="page">
    <p>CGT-Pruned GA Simulator</p>
    <p>C++ based console applicationC++ based console application  Consists of:Consists of:</p>
    <p>Combinatorial Group Testing component  Uses Gnu Scientific Library (GSL)</p>
    <p>Genetic Algorithm component  Object oriented architecture that models FPGA resources</p>
    <p>Modes of Operation:Modes of Operation:  CGT-Pruned GA Repair</p>
    <p>Use CGT to isolate suspect resources  Avoid use of suspect-faulty resource in design refurbishment</p>
    <p>process  CGT-Pruned GA Repair with Cell Swapping</p>
    <p>Swap suspect-faulty resources with previously unused resources to evolve a recovery</p>
    <p>CGT-Pruned GA Design  Evolve a new working design while avoiding suspect resources</p>
  </div>
</Presentation>
