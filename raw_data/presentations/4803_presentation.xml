<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PROMISE: Peer-to-Peer Media Streaming Using CollectCast</p>
    <p>Mohamed Hefeeda1</p>
    <p>Joint work with Ahsan Habib2, Boyan Botev1, Dongyan Xu1, Bharat Bhargava1</p>
    <p>Support: NSF</p>
  </div>
  <div class="page">
    <p>Peer-to-Peer (P2P) systems gained much attention in recent years</p>
    <p>- File sharing, CFS, distributed processing, streaming</p>
    <p>Peers characterized as [Saroiu, et al. 02] - Highly diverse - Dynamic - Have limited capacity, reliability</p>
    <p>Problem - How to select and coordinate multiple peers to</p>
    <p>render the best possible quality streaming?</p>
    <p>Motivations</p>
  </div>
  <div class="page">
    <p>Motivations (contd)</p>
    <p>Previous work either - Assume one sender, e.g., [Tran, et al. 03] [Bawa, et al. 02]</p>
    <p>Ignores peer limited capacity</p>
    <p>- Or, multiple senders but no careful selection, e.g., [Padmanabhan, et al. 02] [Nguyen &amp; Zakhor 02]</p>
    <p>Ignores peer diversity and network conditions</p>
    <p>Our Solution - CollectCast</p>
    <p>- PROMISE</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview of CollectCast  Peer model  Peer selection  Topology inference and labeling  Simulations  PROMISE and experiments on PlanetLab  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>CollectCast</p>
    <p>CollectCast is a new P2P service - Middleware layer between a P2P lookup</p>
    <p>substrate and applications</p>
    <p>- Collects data from multiple senders</p>
    <p>Functions - Infer and label topology</p>
    <p>- Select best sending peers for each session</p>
    <p>- Aggregate and coordinate contributions from peers</p>
    <p>- Adapt to peer failures and network conditions</p>
  </div>
  <div class="page">
    <p>CollectCast (contd)</p>
  </div>
  <div class="page">
    <p>Peer Model</p>
    <p>Peers are - Heterogeneous, limited in capacity, failure</p>
    <p>prone</p>
    <p>Peer model - Offered rate Rp &lt; R0</p>
    <p>Maximum rate peer p can (or is willing) to contribute</p>
    <p>Captures heterogeneity and limited capacity</p>
    <p>- Availability Ap(t)  The fraction of time peer p is available for streaming</p>
    <p>Captures reliability</p>
    <p>A collection of random variables (stochastic process)</p>
  </div>
  <div class="page">
    <p>Peer Selection</p>
    <p>Given a set of candidate peers, select sending peers</p>
    <p>Three approaches - Random Selection</p>
    <p>- End-to-End Selection</p>
    <p>- Topology-Aware Selection (used in CollectCast)</p>
  </div>
  <div class="page">
    <p>Peer Selection: End-to-End</p>
    <p>Considers: Rp, Ap(t) and e2e available bandwidth and loss rate  Ignores: Shared path segments</p>
  </div>
  <div class="page">
    <p>Peer Selection: Topology-Aware</p>
    <p>Considers: Rp, Ap(t), e2e available bandwidth and loss rate, and Shared path segments</p>
  </div>
  <div class="page">
    <p>Topology-Aware Selection (contd)</p>
    <p>Goodness Topology - Directed graph that interconnects candidate</p>
    <p>peers and receiving peer - Edge  one or more links with no branching</p>
    <p>points (we call it path segment) - Each segment is labeled with a quality or</p>
    <p>goodness metric</p>
    <p>- Built in two steps  Network tomography techniques are used to infer and</p>
    <p>label topology with loss rate and available bandwidth</p>
    <p>Transform network metrics to a combined logical goodness metric</p>
  </div>
  <div class="page">
    <p>Topology-Aware Selection (contd)</p>
    <p>Assume we have an inferred topology with loss rate and available bandwidth (later, we discuss how to get that)</p>
    <p>We define segment goodness as:</p>
    <p>w: weight based on available bandwidth and level of sharing</p>
    <p>x: binary random variable that depends on loss rate:</p>
    <p>jijiji w   xg</p>
    <p>otherwise,0</p>
    <p>on lost ispacket a if,1 ji ji</p>
    <p>not x</p>
  </div>
  <div class="page">
    <p>Topology-Aware Selection (contd)</p>
    <p>Segment weight is a per-peer metric</p>
    <p>Example - Consider segment 5-&gt;3</p>
    <p>- P6  w = 1</p>
    <p>- P5  w = 0</p>
    <p>p</p>
    <p>rsjiSs sji</p>
    <p>p ji</p>
    <p>R</p>
    <p>Rb</p>
    <p>w ,)( ,0max,1min</p>
  </div>
  <div class="page">
    <p>Topology-Aware Selection (contd)</p>
    <p>Peer goodness: How good this peer is for the session</p>
    <p>Active Peer Selection Problem:</p>
    <p>Given the goodness topology, find the set of active</p>
    <p>peers that maximizes the expected aggregate rate at</p>
    <p>the receiver, provided that the receiver in-bound</p>
    <p>bandwidth is not exceeded</p>
    <p>rpji</p>
    <p>ji p</p>
    <p>jip rpji</p>
    <p>jipp w xAgAG )(</p>
  </div>
  <div class="page">
    <p>Topology-Aware Selection (contd)</p>
    <p>Mathematically, find Pactv that</p>
    <p>Given this formulation, a simple iterative algorithm finds the best active set</p>
    <p>u Pp</p>
    <p>pl</p>
    <p>Pp pp</p>
    <p>RRR</p>
    <p>RE</p>
    <p>actv</p>
    <p>actv</p>
    <p>oSubject t</p>
    <p>Maximizes G</p>
  </div>
  <div class="page">
    <p>Topology Inference</p>
    <p>Network Tomography - Infer internal network characteristics from e2e probing</p>
    <p>[Coates, et al., 02], [Bestavros, et al. 02], [Harfoush, et al. 03]</p>
    <p>- Premise in literature  Applications may achieve significant performance gain</p>
    <p>Few applications make use of it</p>
    <p>Why? Techniques are generic and quite expensive</p>
    <p>- Our contribution  Adapt some of them to problem in hand</p>
    <p>Show a concrete example for the potential benefits</p>
    <p>- CollectCast is orthogonal to inference techniques  Few years later  better techniques</p>
    <p>CollectCast is ready!</p>
  </div>
  <div class="page">
    <p>Topology Inference (contd)</p>
    <p>Measuring available bandwidth - Basic technique [Jain &amp; Dovrolis 02]</p>
    <p>End-to-end path available bandwidth (not segment-wise)  Idea: one-way delay differences of a periodic packet</p>
    <p>stream is a good indication for the available bandwidth</p>
    <p>- Our approach  Not interested in the exact bandwidth, rather  Can a path accommodate the aggregate rate from peers?  One peer may not be able to send at R0, coordinate</p>
    <p>multiple of them to do the task. Its a P2P world!!  Conservatively mark all segments with the min avail bw  Send real data (from the movie) as probes!  Trade-off unneeded accuracy with much less overhead</p>
  </div>
  <div class="page">
    <p>Topology Inference: Example</p>
    <p>Let us estimate avail bw metric on segment 53</p>
  </div>
  <div class="page">
    <p>Topology Inference: Loss Rates</p>
    <p>We already have them e2e - During avail bw measurements, record lost packets</p>
    <p>- We know data packets that are supposed to be sent</p>
    <p>Segment-wise loss rates - Passive network tomography [Padmanabhan, et al. 03 ]</p>
    <p>- Think of it as a system identification problem</p>
    <p>- Use ideas from image processing (restoration) field  Bayesian inference using Gibbs sampling</p>
    <p>Assume initial distribution  Use measured data and initial distribution to compute</p>
    <p>posterior distribution  Iterate</p>
  </div>
  <div class="page">
    <p>Topology Inference: Overhead</p>
    <p>Communication overhead - We use real data for probing  - Little communication overhead! - Receiver needs larger buffer, though (order of Mbytes) - Longer start up time (still order of seconds)</p>
    <p>Processing overhead - To run estimation procedures and construct topology - Not a big concern (order of milliseconds)</p>
    <p>Small topologies (10  25 nodes)  Fast processors</p>
    <p>Frequency of update - Internet path properties (loss, bw, delay) exhibit relative</p>
    <p>constancy, at least in order of minutes [Zhang, et al. 01]</p>
  </div>
  <div class="page">
    <p>Simulations</p>
    <p>Compare selection techniques in terms of - The aggregated received rate, and</p>
    <p>- The aggregated loss rate</p>
    <p>- With and without peer failures</p>
    <p>Impact of peer availability on size of candidate set</p>
    <p>Size of active set  Load on peers</p>
  </div>
  <div class="page">
    <p>Simulation: Setup</p>
    <p>Topology - On average 600 routers and 1,000 peers</p>
    <p>- Hierarchical (Internet-like)</p>
    <p>Cross traffic - We approximate its effects through</p>
    <p>Attaching stochastic loss model to links  Two-state Markov chain  Captures temporal dependence</p>
    <p>in packet losses [Yajnik et al., 99 ]</p>
    <p>Randomly vary link bandwidth  Uniform in [0.25R0, 1.5R0 ]</p>
    <p>G B</p>
    <p>p</p>
    <p>q</p>
  </div>
  <div class="page">
    <p>Simulations: Setup (contd)</p>
    <p>Streaming session - Rate R0 = 1 Mb/s</p>
    <p>- Duration = 60 minutes</p>
    <p>- Loss tolerance level u = 1.2</p>
    <p>Peers - Offered rate: uniform in [0.125R0, 0.5R0]</p>
    <p>- Availability: uniform in [0.1, 0.9]</p>
    <p>- Diverse P2P community</p>
    <p>Results are averaged over 100 runs with different seeds</p>
  </div>
  <div class="page">
    <p>Aggregate Rated: No Failures</p>
    <p>Careful selection pays off!</p>
  </div>
  <div class="page">
    <p>Aggregate Rate: With Peer Failures</p>
    <p>Good performance, but starts to degrade as we encounter many failures  How large should the candidate set be?</p>
  </div>
  <div class="page">
    <p>PROMISE and Experiments on PlanetLab</p>
    <p>PROMISE is a P2P media streaming system built on top of CollectCast</p>
    <p>Tested in local and wide area environments  Extended Pastry to support multiple peer</p>
    <p>look up</p>
  </div>
  <div class="page">
    <p>PlanetLab Experiments*</p>
    <p>PROMISE is installed on 15 nodes  Use several MPGE-4 movie traces  Select peers using topology-aware (the one</p>
    <p>used in CollectCast) and end-to-end  Evaluate</p>
    <p>- Packet-level performance</p>
    <p>- Frame-level performance and initial buffering</p>
    <p>- Impact of changing system parameters</p>
    <p>- Peer failure and dynamic switching</p>
    <p>*Most of these results are presented in the extended version of the paper</p>
  </div>
  <div class="page">
    <p>Packet-Level: Aggregated Rate</p>
    <p>Smoother aggregated rate achieved by CollectCast</p>
  </div>
  <div class="page">
    <p>Frame-Level: #Frames Missed Deadline</p>
    <p>Much fewer frames miss their deadlines with CollectCast  CollectCast requires, on the average, half of the initial</p>
    <p>buffering time to ensure all frames meet their deadlines</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>New service for P2P networks (CollectCast) - Infer and leverage network performance</p>
    <p>information in selecting and coordinating peers</p>
    <p>PROMISE is built on top of CollectCast to demonstrate its merits</p>
    <p>Internet Experiments show proof of concept - Streaming from multiple, heterogeneous, failure</p>
    <p>prone, peers is indeed feasible</p>
    <p>Extend P2P systems beyond file sharing  Concrete example of network tomography</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Extend CollectCast beyond physical network characteristics</p>
    <p>- Consider peer trustworthiness/reputation into peer selection</p>
    <p>- Graph labeled with trust metric</p>
    <p>- Would enable security-sensitive applications on top of CollectCast</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>The extended version of the paper is available at</p>
    <p>http://www.cs.purdue.edu/homes/mhefeeda/promise</p>
  </div>
</Presentation>
