<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Java, Peer-to-Peer, and Accountability: Building Blocks for Distributed Cycle</p>
    <p>Sharing</p>
    <p>Ali Raza Butt Xing Fang</p>
    <p>Y. Charlie Hu Samuel Midkiff</p>
  </div>
  <div class="page">
    <p>The need for sharing compute-cycles  Scientific applications</p>
    <p>Complex, large data sets</p>
    <p>Dedicated resources Expensive</p>
    <p>Modern workstation Powerful resource Available in large numbers Underutilized</p>
    <p>Harness idle-cycles of network of workstations</p>
  </div>
  <div class="page">
    <p>Current cycle-sharing schemes  Examples: SETI@Home, Distributed.net, Entropia</p>
    <p>Use centralized application servers Performance bottleneck Single point of failure</p>
    <p>Applications are explicitly trusted Introduce a plethora of security problems</p>
    <p>Users contribute compute-cycles Individuals cannot utilize the shared cycles</p>
  </div>
  <div class="page">
    <p>Cycles-sharing for All!  Goal: all participants can utilize the system</p>
    <p>Challenges: Resource discovery</p>
    <p>and management</p>
    <p>Portability Safety Security</p>
    <p>Fairness</p>
    <p>Our solution: Exploit existing peer-to-peer</p>
    <p>networking</p>
    <p>Leverage Java Virtual Machine Sandboxing</p>
    <p>Add the ability to remotely monitor Java program progress</p>
    <p>Develop distributed credit based accountability</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Discovering resources  Ensuring fairness  Design &amp; Implementation  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Background: Overlay Networks</p>
    <p>P2P networks are self-organizing overlay networks without central control</p>
    <p>ISP3</p>
    <p>ISP1 ISP2</p>
    <p>Site 1</p>
    <p>Site 4</p>
    <p>Site 3Site 2 N</p>
    <p>N N</p>
    <p>N</p>
    <p>N</p>
    <p>N N</p>
  </div>
  <div class="page">
    <p>Background: structured p2p overlays  Overlays with imposed structure</p>
    <p>Each node has a unique random nodeId Each message has a key The nodeId and key reside in the same name space</p>
    <p>Routing: Takes a message with a key and sends it to a unique node</p>
    <p>Implements Distributed Hash Table (DHT) abstraction</p>
    <p>DHT abstraction is preserved in the presence of node failure/departure</p>
  </div>
  <div class="page">
    <p>Properties of structured p2p networks  Scalable  Self-organizing  Fault-tolerant  Locality-aware  Simple to deploy</p>
    <p>Many implementations available E.g. Pastry, Tapestry, Chord, CAN</p>
  </div>
  <div class="page">
    <p>Example: Pastry</p>
    <p>128-bit circular identifier space</p>
    <p>Routing: A message is routed reliably to a node with nodeId numerically closest to the key</p>
    <p>Locality-aware Routing table has O(log N) entries matching increasingly long prefix of local nodeId</p>
    <p>Identifier space</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Discovering resources  Ensuring fairness  Design &amp; Implementation  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Resource availability information  Announcements to nearby nodes</p>
    <p>Contain resource characteristics and availability information</p>
    <p>Leverage locality-aware routing table</p>
    <p>Soft state Periodically refreshed</p>
  </div>
  <div class="page">
    <p>Resource announcements</p>
    <p>are physically close to</p>
  </div>
  <div class="page">
    <p>Execution node selection  Utilize local resource availability information</p>
    <p>Query nearby nodes for job execution Proximity Credit-worthiness</p>
    <p>Request remote execution</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Discovering resources  Ensuring fairness  Design &amp; Implementation  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Fairness in cycle-sharing  More complex than fairness in storage sharing</p>
    <p>[Samsara: SOSP 2003] Cycles are perishable resources</p>
    <p>Challenge Mutual guarantees for submitting and contributing nodes</p>
    <p>Our Solution: VM and compiler instrumented code for progress monitoring DHT based feedback system to report unfair nodes Assumption: nodes act in their own self-interest</p>
  </div>
  <div class="page">
    <p>Job progress monitoring  System leverages existing Instrumentation Sampling</p>
    <p>Framework</p>
    <p>A thread periodically retrieves contents of Method Invocation Counters</p>
    <p>VM communicates progress (using beacons) asynchronously to the Reporting Module</p>
  </div>
  <div class="page">
    <p>Monitoring setup  Reporting module</p>
    <p>Provides submitter with job monitoring capability</p>
    <p>Decouples design of beacons from that of query</p>
    <p>Provides asynchronous job monitoring</p>
    <p>Execution node</p>
    <p>Reporting module</p>
    <p>program and</p>
    <p>beacons</p>
    <p>Submission node</p>
    <p>Progress info</p>
    <p>query processing</p>
    <p>probe query</p>
  </div>
  <div class="page">
    <p>Distributed credit feedback system  Ensure compensation for consumed cycles</p>
    <p>Tradable credit-reports Digitally signed Un-forgeable</p>
    <p>DHT based distributed credit tracking Allows a nodes transactions to be checked by other nodes Allows determination of a nodes credit-worthiness</p>
    <p>Credit-worthiness used to punish and reward nodes</p>
  </div>
  <div class="page">
    <p>Node C</p>
    <p>Job</p>
    <p>Credit</p>
    <p>job</p>
    <p>Progress report</p>
    <p>signed credit</p>
    <p>check credit</p>
    <p>trade insert credit</p>
    <p>Node Z</p>
    <p>check credit</p>
    <p>trade</p>
    <p>DHT</p>
    <p>Node A Node B</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Discovering resources  Ensuring fairness  Design &amp; Implementation  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Implementation  Prototype implementation:</p>
    <p>P2p functionality using FreePastry 1.3 DHT feedback built on PAST</p>
    <p>Augmented Jikes RVM Added new VM thread to use adaptive compiler information to monitor progress</p>
  </div>
  <div class="page">
    <p>p2p network</p>
    <p>Modified JVM with</p>
    <p>Probe support</p>
    <p>Resource Manager</p>
    <p>P2p communication</p>
    <p>Remote job probing</p>
    <p>Code instrumentation</p>
    <p>engine</p>
    <p>Credit generator</p>
    <p>P2p Storage</p>
    <p>Software modules</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Discovering resources  Ensuring fairness  Design &amp; Implementation  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Methodology  Overhead measurement in a real implementation</p>
    <p>Overhead of beacons Overhead of reporting module</p>
    <p>Effectiveness of catching thieves in a large scale simulation</p>
  </div>
  <div class="page">
    <p>Implementation Setup  Hardware</p>
    <p>Pentium 4, 2 GHz, 512MB RAM Linux kernel 2.4.18 Connected via 100 Mb/s Ethernet</p>
  </div>
  <div class="page">
    <p>Overhead of beacons</p>
  </div>
  <div class="page">
    <p>Overhead of the reporting module</p>
  </div>
  <div class="page">
    <p>Simulations  1000 Nodes setup</p>
    <p>Georgia Tech-Internet Topology Models (GT-ITM) Transit-stub model 100 transit domains 10 stub domains</p>
    <p>Sequence 100 (issue time: T, job length: L) pairs Interval (TnTn-1), L uniform distribution [1,17] Random overload/idle periods</p>
  </div>
  <div class="page">
    <p>Jobs issued and completed: No cheaters</p>
  </div>
  <div class="page">
    <p>Jobs issued and completed: cheaters</p>
  </div>
  <div class="page">
    <p>Jobs issued and completed: cheaters caught</p>
  </div>
  <div class="page">
    <p>Evaluation conclusion  The overhead of monitoring code is insignificant</p>
    <p>The accounting system effectively recognizes cheating nodes and restricts them</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Discovering resources  Ensuring fairness  Design &amp; Implementation  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusions  Building blocks for cycle-sharing</p>
    <p>Peer-to-peer networks Java based progress monitoring and security Credit-based accountability mechanisms</p>
    <p>Ideal system for inter-organizational networks of pooled resources</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
