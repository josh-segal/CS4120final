<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Too Many Knobs to Tune? Towards Faster Database Tuning by</p>
    <p>Pre-selecting Important Knobs</p>
    <p>Konstantinos Kanellis, Ramnatthan Alagappan, Shivaram Venkataraman</p>
  </div>
  <div class="page">
    <p>Database tuning is important!</p>
    <p>... commitlog_sync_period_in_ms: 10000 commitlog_segment_size_in_mb: 32 compaction_throughput_mb_per_sec: 16 concurrent_reads: 32 concurrent_writes: 32 memtable_heap_space_in_mb: 2048 memtable_cleanup_threshold: 0.33 native_transport_max_threads: 128 ...</p>
    <p>Cassandra Default Configuration</p>
    <p>HotStorage20</p>
    <p>Properly tuned database systems can achieve 2-3x higher throughput (or lower 99-tile latency) compared to default configuration (PostgreSQL) [1]</p>
    <p>[1] Dana Van Aken et. al. Automatic Database Management System Tuning Through Large-scale Machine Learning. (SIGMOD 17)</p>
    <p>... commitlog_sync_period_in_ms: 50000 commitlog_segment_size_in_mb: 128 compaction_throughput_mb_per_sec: 16 concurrent_reads: 128 concurrent_writes: 64 memtable_heap_space_in_mb: 1024 memtable_cleanup_threshold: 0.85 native_transport_max_threads: 256 ...</p>
    <p>CassandraTuned Configuration</p>
    <p>Tuning</p>
    <p>Process</p>
    <p>Realizing high performance requires finding optimal values for configuration knobs</p>
  </div>
  <div class="page">
    <p>but its hard</p>
    <p>- 100s knobs in a typical system</p>
    <p>- Most knobs take continuous values</p>
    <p>- Unknown interactions among knobs</p>
    <p>- Evaluating a single configuration is expensive</p>
    <p>Earlier tuning efforts relied on experience from human experts</p>
    <p>Recently proposed tuning frameworks can automate the procedure</p>
    <p>Can achieve same (or even better) performance compared to manual tuning [2]</p>
    <p>[2] Zhang, Ji, et al. An end-to-end automatic cloud database tuning system using deep reinforcement learning (SIGMOD19)</p>
    <p>... commitlog_sync_period_in_ms: 50000 commitlog_segment_size_in_mb: 128 compaction_throughput_mb_per_sec: 16 concurrent_reads: 128 concurrent_writes: 64 memtable_heap_space_in_mb: 1024 memtable_cleanup_threshold: 0.85 native_transport_max_threads: 256 ...</p>
    <p>Cassandra configuration</p>
  </div>
  <div class="page">
    <p>Automated database tuning</p>
    <p>Most existing auto-tuning database frameworks consist of (a) initial offline profiling phase and (b) an online tuning phase</p>
    <p>All Tunable Knobs</p>
    <p>Mix of Workloads</p>
    <p>Generate and</p>
    <p>Evaluate Configs</p>
    <p>Offline Profiling/Training Phase</p>
    <p>Train / Store or</p>
    <p>Evaluate</p>
    <p>Config</p>
    <p>Online Tuning Phase</p>
    <p>Propose Config or</p>
    <p>Subset of Knobs</p>
    <p>Target Workload Feedback</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Offline profiling is vital for the quality of proposed configurations</p>
    <p>All Tunable Knobs ?</p>
    <p>Mix of Workloads ? Generate and</p>
    <p>Evaluate Configs</p>
    <p>Offline Profiling/Training Phase</p>
    <p>Train / Store</p>
    <p>Yet, this phase may account for &gt;95% of the entire tuning time</p>
    <p>HotStorage20</p>
    <p>How many knobs do we need to achieve good performance?</p>
    <p>Can we exploit this to accelerate the offline phase?</p>
  </div>
  <div class="page">
    <p>Experimental study</p>
    <p>How many knobs do we need to achieve good performance?</p>
    <p>Do similar results hold for different workloads?</p>
    <p>Do similar results hold for a different database system?</p>
    <p>Cassandra YCSB-A</p>
    <p>Cassandra YCSB-B</p>
    <p>Same 5 knobs!</p>
    <p>PostgreSQL YCSB-A, YCSB-B</p>
    <p>Yes!</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Methodology</p>
    <p>Results</p>
    <p>Towards Faster Database Tuning</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>(I) Ground-truth</p>
    <p>dataset collection</p>
    <p>(II) Identify most</p>
    <p>important knobs</p>
    <p>Evaluate top-k</p>
    <p>knobs performance</p>
    <p>Generate and evaluate configuration samples</p>
    <p>(many knobs)</p>
    <p>Generate samples and find one with best perf.</p>
    <p>(top-k knobs)</p>
    <p>Identify relationship of each knob with</p>
    <p>system performance</p>
    <p>Dataset Knobs Ranking</p>
    <p>System Compare with</p>
    <p>ground-truth</p>
    <p>HotStorage20</p>
    <p>&gt;=&lt;</p>
  </div>
  <div class="page">
    <p>(I) Generate and collect configuration samples</p>
    <p>Latin Hypercube Sampling (LHS)</p>
    <p>- Uniformly and thoroughly cover configuration space</p>
    <p>- Employed by multiple existing systems</p>
    <p>Intractable configuration space  limited number of samples</p>
    <p>Number of Samples</p>
    <p>Knobs / Range of values</p>
    <p>{ commitlog_sync_period: 10 ms concurrent_writes: 8 memtable_cleanup_threshold: 0.2 }</p>
    <p>{ commitlog_sync_period: 5 ms concurrent_writes: 64 memtable_cleanup_threshold: 0.8 }</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>(II) Identify Important Knobs</p>
    <p>,</p>
    <p>,</p>
    <p>CART</p>
    <p>{</p>
    <p>commitlog_sync_period: 10 secs concurrent_writes: 8 memtable_cleanup_threshold: 0.2 }</p>
    <p>{</p>
    <p>commitlog_sync_period: 5 secs concurrent_writes: 64 memtable_cleanup_threshold: 0.8 }</p>
    <p>,</p>
    <p>{</p>
    <p>commitlog_sync_period: 2 secs concurrent_writes: 24 memtable_cleanup_threshold: 0.5 }</p>
    <p>Knobs values</p>
    <p>Random Forest Performance</p>
    <p>Train Regression</p>
    <p>Model</p>
    <p>commitlog_sync_period</p>
    <p>Knob Relative Importance Ranking</p>
    <p>concurrent_writes</p>
    <p>memtable_cleanup_threshold</p>
    <p>More Important</p>
    <p>(features) (outcome)</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Machine hardware</p>
    <p>- Intel Xeon Silver 4114 CPU, 64 GB RAM, 480GB SSD, Ubuntu 18.04</p>
    <p>- Employ 30 identical machines to parallelize the evaluation process (CloudLab)</p>
    <p>Ground-truth sample collection</p>
    <p>- Apache Cassandra v3.11, PostgreSQL v9.6</p>
    <p>- YCSB-A (50% read/50% write), YCSB-B (95% read/5% write)</p>
    <p>- 25,000 samples with LHS  tweaking ~30 knobs for both systems</p>
    <p>- Each sample takes ~9 minutes to evaluate</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Methodology</p>
    <p>Results</p>
    <p>Towards Faster Database Tuning</p>
  </div>
  <div class="page">
    <p>How many knobs matter?</p>
    <p>Apache Cassandra  YCSB-A</p>
    <p>Most important knobs</p>
    <p>- concurrent_reads: number of concurrent read operations</p>
    <p>- native_transport_max_threads: number of threads used to handle requests</p>
    <p>- memory tablerelated knobs: size of memtable, when to flush to disk</p>
    <p>HotStorage20</p>
    <p>According to the ML model, these 5 knobs have the most impact</p>
    <p>on system performance</p>
  </div>
  <div class="page">
    <p>but how much performance can we achieve?</p>
    <p>Apache Cassandra  YCSB-A</p>
    <p>Best Configuration Performance</p>
    <p>Throughput (ops/sec)</p>
    <p>Read Latency (micro-seconds)</p>
    <p>Write Latency (micro-seconds)</p>
    <p>Tuning 30 knobs 74780.33 744.34 302.82</p>
    <p>Tuning 5 knobs 74304.42 750.56 308.08</p>
    <p>% of tuning 30 knobs 99.36% 100.84% 101.41%</p>
    <p>HotStorage20</p>
    <p>Tuning just a few important knobs can still yield high performance!</p>
  </div>
  <div class="page">
    <p>What about a different workload?</p>
    <p>Apache Cassandra  YCSB-B</p>
    <p>YCSB-B (95%/5% r/w) YCSB-A (50%/50% r/w)</p>
    <p>#1: A handful of knobs affect the performance for YCSB-B</p>
    <p>#2: Overlap of important knobs across the two workloads</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>What about a different database system?</p>
    <p>PostgreSQL  YCSB-A, YCSB-B</p>
    <p>YCSB-A (50%/50% r/w) YCSB-B (95%/5% r/w)</p>
    <p>In general, we observe similar results for PostgreSQL</p>
    <p>Knob importance ranking more diverse between the workloads</p>
    <p>still top-8 knobs are almost identical HotStorage20</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background &amp; Motivation</p>
    <p>Methodology</p>
    <p>Results</p>
    <p>Towards Faster Database Tuning</p>
  </div>
  <div class="page">
    <p>Pre-selecting Important Knobs</p>
    <p>Utilize the ML model to identify important knobs before running the tuner</p>
    <p>Reduces configuration search space size / training dataset of tuners</p>
    <p>All Tunable Knobs</p>
    <p>Mix of Workloads</p>
    <p>Auto-Tuning</p>
    <p>Framework</p>
    <p>Configurations</p>
    <p>Current design</p>
    <p>All Tunable Knobs</p>
    <p>Few Workloads Auto-Tuning</p>
    <p>Framework</p>
    <p>Pre-select</p>
    <p>Important Knobs</p>
    <p>Important</p>
    <p>Knobs</p>
    <p>Configurations</p>
    <p>Our proposed two-level design</p>
    <p>Mix of Workloads</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>Pre-selecting Important Knobs</p>
    <p>Utilize the ML model to identify important knobs before running the tuner</p>
    <p>Reduces configuration search space size / training dataset of tuners</p>
    <p>All Tunable Knobs</p>
    <p>Mix of Workloads</p>
    <p>Auto-Tuning</p>
    <p>Framework</p>
    <p>Configurations</p>
    <p>Current design</p>
    <p>All Tunable Knobs</p>
    <p>Few Workloads Auto-Tuning</p>
    <p>Framework</p>
    <p>Pre-select</p>
    <p>Important Knobs</p>
    <p>Important</p>
    <p>Knobs</p>
    <p>Configurations</p>
    <p>Our proposed two-level design</p>
    <p>Mix of Workloads</p>
    <p>HotStorage20</p>
    <p>Early results with an existing tuner, BestConfig.</p>
    <p>When tuning top-5 knobs the best performance is reached with 5x fewer iterations compared to tuning 30 knobs</p>
    <p>(Apache Cassandra, YCSB-A)</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Can we make the pre-selection step cheaper? (25,000 samples)</p>
    <p>- With our ML-based method ~400 samples are needed (early results)</p>
    <p>- Can we use some other (cheaper) method? (evaluate few workloads?)</p>
    <p>How does the hardware affect the important knobs?</p>
    <p>- Can we avoid (or minimize) tuner adaptation time to new hardware?</p>
    <p>Can we account for system reliability when tuning?</p>
    <p>- Existing tuners may sacrifice reliability for performance</p>
    <p>- fsync / recovery-related flags / checkpointing settings</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Tuning with few important knobs can yield high performance</p>
    <p>- Trend seems to hold across different workloads and systems</p>
    <p>- Significant overlap of top knobs across different workloads</p>
    <p>Proposed an initial design to accelerate database auto-tuners</p>
    <p>- Pre-selecting important knobs reduces configuration search space</p>
    <p>- Exploit top knobs similarity across workloads to make it faster?</p>
    <p>HotStorage20</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Tuning with few important knobs can yield high performance</p>
    <p>- Trend seems to hold across different workloads and systems</p>
    <p>- Significant overlap of top knobs across different workloads</p>
    <p>Proposed an initial design to accelerate database auto-tuners</p>
    <p>- Pre-selecting important knobs reduces configuration search space</p>
    <p>- Exploit top knobs similarity across workloads to make it faster?</p>
    <p>HotStorage20</p>
    <p>Thank you! Questions?</p>
    <p>Reach me at kkanellis@cs.wisc.edu</p>
  </div>
</Presentation>
