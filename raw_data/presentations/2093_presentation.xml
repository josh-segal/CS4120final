<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Determinism Is Not Enough: What Really Makes Mul9threaded</p>
    <p>Programs Hard to Get Right and What Can Be Done about It?</p>
    <p>Junfeng Yang, Heming Cui, Jingyue Wu, Columbia University</p>
  </div>
  <div class="page">
    <p>One-slide summary</p>
    <p>Mul=threaded programs: cri=cal but hard to get right</p>
    <p>Many blamed nondeterminism  Determinis=c mul=threading (DMT): one input  one schedule</p>
    <p>But, determinism is neither sufficient nor necessary for reliability!</p>
    <p>True culprit is rather quan=ta=ve: too many schedules  Stable Mul=threading (StableMT): all inputs  a small set of schedules</p>
  </div>
  <div class="page">
    <p>Background and mo=va=on</p>
  </div>
  <div class="page">
    <p>Mul=threaded programs: hard to get right</p>
    <p>Plagued with concurrency bugs  Data races, atomicity viola=ons, order viola=ons, deadlocks, etc</p>
    <p>Concurrency bugs: bad  Have taken lives in the Therac 25 incidents and caused the 2003 Northeast blackout</p>
    <p>May be exploited by aTackers to violate confiden=ality, integrity, and availability of cri=cal systems [Hotpar 12]</p>
  </div>
  <div class="page">
    <p>Thread 0 Thread 1</p>
    <p>Apache Bug #21287</p>
    <p>Thread 0 Thread 1</p>
    <p>mutex_lock(M) *obj =  mutex_unlock(M)</p>
    <p>mutex_lock(M) free(obj) mutex_unlock(M)</p>
    <p>mutex_lock(M) *obj =  mutex_unlock(M) mutex_lock(M)</p>
    <p>free(obj) mutex_unlock(M)</p>
    <p>Concurrency bug examples</p>
    <p>Thread 0 Thread 1</p>
    <p>FFT in SPLASH2</p>
    <p>barrier_wait(B) print(result)</p>
    <p>barrier_wait(B) result +=</p>
    <p>Thread 0 Thread 1</p>
    <p>barrier_wait(B) print(result)</p>
    <p>barrier_wait(B) result +=</p>
    <p>Schedule: sequence of communica=on opera=ons  Buggy schedule: schedule that triggers concurrency bug</p>
  </div>
  <div class="page">
    <p>Challenges caused by nondeterminism</p>
    <p>Tes=ng: less effec=ve  Debugging: more challenging</p>
    <p>Tradi=onal mul=threading</p>
    <p>Buggy</p>
  </div>
  <div class="page">
    <p>Challenges caused by too many schedules</p>
    <p>m threads, k lock()  more than (m!)^k schedules  Even more schedules aggregated over all inputs  Finding buggy schedules is like finding needles in a haystack</p>
    <p>Tradi=onal mul=threading</p>
    <p>Buggy</p>
  </div>
  <div class="page">
    <p>Determinism: neither sufficient nor necessary for reliability</p>
  </div>
  <div class="page">
    <p>Determinis=c mul=threading (DMT): one input  one schedule</p>
    <p>One tes=ng execu=on validates all future execu=ons on the same input</p>
    <p>Reproducing a concurrency bug requires only the input</p>
    <p>Tradi=onal mul=threading</p>
    <p>Determinis=c mul=threading</p>
  </div>
  <div class="page">
    <p>Determinism: not sufficient</p>
    <p>Determinism is a narrow property  Same input + same program  same behavior  Input or program changes slightly? Unstable</p>
    <p>Tradi=onal mul=threading</p>
    <p>Determinis=c mul=threading</p>
  </div>
  <div class="page">
    <p>Determinism: not necessary</p>
    <p>Determinism is a binary property  Nondeterminis=c if one input  n &gt; 1 schedules</p>
    <p>Small n (e.g., 2)  challenges caused by nondeterminism are easy to solve</p>
    <p>Tradi=onal mul=threading</p>
    <p>Determinis=c mul=threading</p>
    <p>Stable mul=threading</p>
  </div>
  <div class="page">
    <p>Improving reliability with stable mul=threading</p>
  </div>
  <div class="page">
    <p>Are all exponen=ally many schedules necessary?</p>
    <p>Insight 1: for many programs, a wide range of inputs share the same equivalent class of schedules</p>
    <p>Insight 2: the overhead of enforcing a schedule on different inputs is low (e.g., 15%)</p>
  </div>
  <div class="page">
    <p>Stable mul=threading (StableMT): all inputs  a small set of schedules</p>
    <p>Vastly shrink the haystack  needles much easier to find</p>
    <p>Provide an=cipated robustness and stability 14</p>
    <p>Stable mul=threading</p>
    <p>Tradi=onal mul=threading</p>
    <p>Determinis=c mul=threading</p>
  </div>
  <div class="page">
    <p>StableMT and DMT: orthogonal</p>
    <p>Stable determinis=c mul=threading</p>
    <p>Tradi=onal mul=threading</p>
    <p>Determinis=c mul=threading</p>
  </div>
  <div class="page">
    <p>Implemen=ng and applying StableMT</p>
    <p>How can we compute the schedules to map inputs to?  Tern [OSDI 10]</p>
    <p>How can we enforce schedules determinis=cally and efficiently?  Peregrine [SOSP 11]</p>
    <p>How can we apply StableMT to effec=vely analyze mul=threaded programs?  Schedule specializa=on [PLDI 12]</p>
  </div>
  <div class="page">
    <p>Conclusion  Determinism: neither sufficient nor necessary for reliability</p>
    <p>StableMT: map all inputs to vastly reduced set of schedules, greatly improving reliability</p>
    <p>Future work  Systems level: more efficient, lightweight, scalable  Applica=on level: more applica=ons  Conceptual level: StableMT programming languages, models, and methods</p>
  </div>
  <div class="page">
    <p>Applying StableMT to beTer analyze mul=threaded programs</p>
    <p>coverage (# of analyzed schedules / # of total schedules)</p>
    <p>precision Total Schedules</p>
    <p>Analyzed Schedules</p>
    <p>Sta=c Analysis</p>
    <p>Dynamic Analysis</p>
    <p>Analyzed Schedules</p>
    <p>?</p>
    <p>Analyzing mul=threaded programs: hard</p>
  </div>
  <div class="page">
    <p>Precision: Analyze the program over a small set of schedules.  Coverage: Enforce these schedules at run=me.</p>
    <p>Schedule Specializa=on [PLDI 12]</p>
    <p>coverage (# of analyzed schedules / # of total schedules)</p>
    <p>precision Total Schedules</p>
    <p>Sta=c Analysis</p>
    <p>Dynamic Analysis</p>
    <p>Analyzed Schedules</p>
    <p>Enforced Schedules</p>
    <p>Schedule Specializa=on</p>
  </div>
</Presentation>
