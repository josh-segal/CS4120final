<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SoftFlowSoftFlow: A Middlebox Architecture for Open vSwitch Ethan J. Jackson Melvin Walls Aurojit Panda Justin Pettit</p>
    <p>Ben Pfaff Jarno Rajahalme Teemu Koponen Scott Shenker$</p>
    <p>VMware, Inc. UC Berkeley Styra, Inc. $ICSI Penn State Harrisburg</p>
    <p>Abstract Open vSwitch is a high-performance multi-layer virtual switch that serves as a flexible foundation for building virtualized, stateless Layer 2 and 3 network services in multitenant datacenters. As workloads become more sophisticated, providing tenants with virtualized middlebox services is an increasingly important and recurring theme, yet it remains difficult to integrate these stateful services efficiently into Open vSwitch and its OpenFlow forwarding model: middleboxes perform complex operations that depend on internal state and inspection of packet payloads  functionality which is impossible to express in OpenFlow. In this paper, we present SoftFlow, an extension of Open vSwitch that seamlessly integrates middlebox functionality while maintaining the familiar OpenFlow forwarding model and performing significantly better than alternative techniques for middlebox integration.</p>
    <p>provider of network services in virtualized clouds has migrated from the physical datacenter fabric to the hypervisor virtual switch. This trend demands virtual switches implement virtual networks that faithfully reproduce complex L2L3 network topologies that were once entirely the concern of network hardware.</p>
    <p>As network virtualization systems mature and workloads increase in sophistication and complexity, pressure continues to mount on virtual switches to provide more advanced features without sacrificing flexibility or performance. In particular, middleboxes  firewalls, NATs, load balancers, and the like  that are ubiquitous in enterprise networks [32] have begun to make their way into network virtualization systems.</p>
    <p>Open vSwitch (OVS)  the open source virtual switch utilized by a majority of these systems  is not immune to this pressure. Its flow based forwarding model (based on OpenFlow) makes it particularly well suited to stateless L2L3 forwarding, allowing it to achieve a high level of generality without sacrificing performance [23]. However, extending this model to middleboxes has proven difficult due to three fundamental challenges:  Open vSwitch (and OpenFlow) models packet processing</p>
    <p>as a series of flow tables operating over packet headers. Middleboxes, on the other hand, rely on per-connection state and inspection of packet payloads that are hard to express in this model.</p>
    <p>In order to achieve reasonable performance, Open vSwitch uses a flow caching algorithm that depends</p>
    <p>necessarily on the stateless nature of OpenFlow to produce consistent results  packets with the exact same header must be forwarded the exact same way every single time. Middleboxes reliance on internal state and inspection of packet payloads causes them to make different forwarding decisions for packets with the same header. This breaks the fundamental assumptions of the flow cache.</p>
    <p>Packet parsing and classification are elementary operations among all network services that long complex service chains must perform many times for a given packet. While it is feasible to integrate middleboxes with Open vSwitch using virtual machines, its unclear how to share this work across middleboxes as Open vSwitch is able to for stateless L2L3 OpenFlow pipelines. In this paper we design SoftFlow, a data plane forwarding</p>
    <p>model with unified semantics for all types of packet operations. SoftFlow is an extension of Open vSwitch designed around three design principles:</p>
    <p>Maintain the Open vSwitch forwarding model. Open vSwitch is built on OpenFlow, which has arguably helped it achieve the wide deployment it enjoys today and we see no reason to abandon it. A great deal of traditional middlebox functionality, e.g., L2, L3, and ACL processing, can be implemented naturally as flows, leaving us with only a small subset of functionality that needs special processing: operations which require per-packet state and operations which inspect packet payloads. These operations can be handled with our SoftFlow extensions.</p>
    <p>Reduce packet classifications. On general-purpose processors algorithmic packet classification is expensive. In our experience, it frequently consumes the majority of datapath CPU time and experiments in 7 indicate the same.1 We aim to extend the benefits of Open vSwitch flow caching to middleboxes by designing for middlebox aware flow caching to exploit localities across packets, and shared packet classification between middlebox services to mitigate redundant computation. In doing so, we reduce the overhead of classification-heavy middleboxes like NATs and firewalls.</p>
    <p>Increase processing locality. Running services outside of the virtual switch on separate VMs or processes provides strong isolation, both in terms of performance and memory. However, this isolation comes at a cost  performance suffers</p>
  </div>
  <div class="page">
    <p>SoftFlow  Middleboxes for Open vSwitch</p>
    <p>While maintaining OpenFlow programmability</p>
    <p>And good performance</p>
    <p>Run to completion</p>
    <p>Flow caching</p>
  </div>
  <div class="page">
    <p>Open vSwitch  Open source software switch</p>
    <p>Dominant software OpenFlow implementation</p>
    <p>Use cases</p>
    <p>Hypervisor vSwitch</p>
    <p>Network virtualization gateway</p>
    <p>SDN</p>
    <p>Open vSwitch</p>
  </div>
  <div class="page">
    <p>OpenFlow The Open vSwitch forwarding model.</p>
  </div>
  <div class="page">
    <p>OpenFlow</p>
    <p>Great for L2/L3</p>
    <p>Packet Classification</p>
    <p>Flow Caching</p>
  </div>
  <div class="page">
    <p>OpenFlow  Limitations</p>
    <p>Stateful processing</p>
    <p>Deep packet inspection</p>
    <p>Header non-determinism</p>
    <p>Middleboxes</p>
  </div>
  <div class="page">
    <p>The Problem  Wide deployment of OVS SDN gateways</p>
    <p>Customers want new middlebox services</p>
    <p>Firewall</p>
    <p>NAT</p>
    <p>OpenFlow is ill suited for the task</p>
    <p>SDN</p>
    <p>Open vSwitch</p>
  </div>
  <div class="page">
    <p>What about NFV?</p>
    <p>Service chain of Middleboxes (NFs)</p>
    <p>Highly expressive</p>
    <p>Strong Isolation</p>
  </div>
  <div class="page">
    <p>What about NFV?</p>
    <p>Block-box network functions</p>
    <p>No cross VM flow caching</p>
    <p>Isolation overhead</p>
    <p>Abandons OpenFlow programmability</p>
  </div>
  <div class="page">
    <p>SoftFlow Middleboxes for Open vSwitch</p>
  </div>
  <div class="page">
    <p>SoftFlow  Start with Open vSwitch</p>
    <p>Use OpenFlow wherever possible</p>
    <p>Middlebox services use SoftFlow Actions</p>
    <p>Plugin library of stateful processing elements</p>
    <p>Accessible from OpenFlow</p>
  </div>
  <div class="page">
    <p>SoftFlow Firewall  Access Control List</p>
    <p>Stateless packet classification</p>
    <p>Implemented In OpenFlow</p>
    <p>Connection Tracking</p>
    <p>Stateful processing</p>
    <p>Implemented as a SoftFlow Action</p>
  </div>
  <div class="page">
    <p>Open vSwitch</p>
  </div>
  <div class="page">
    <p>Open vSwitch</p>
  </div>
  <div class="page">
    <p>SoftFlow</p>
    <p>Actions</p>
    <p>Arbitrary x86 Code</p>
    <p>Reside in the datapath</p>
    <p>Callable from OpenFlow</p>
  </div>
  <div class="page">
    <p>SoftFlow  First Packet</p>
  </div>
  <div class="page">
    <p>SoftFlow  Subsequent Packets</p>
  </div>
  <div class="page">
    <p>SoftFlow  Subsequent Packets</p>
    <p>Three classifications</p>
    <p>Ingress</p>
    <p>Post Conntrack</p>
    <p>Post Load Balancer</p>
  </div>
  <div class="page">
    <p>Data Path Classifications</p>
    <p>Open vSwitch</p>
    <p>One data path classification</p>
    <p>Middlebox processing is non-deterministic</p>
    <p>Must re-classify after each SoftFlow action traversal</p>
  </div>
  <div class="page">
    <p>Classification Coalescing</p>
    <p>Some Middleboxes are mostly deterministic</p>
    <p>Connection tracker  almost always allow</p>
    <p>Furthermore, they know when theyre deterministic</p>
    <p>In these cases, skip data path classification</p>
  </div>
  <div class="page">
    <p>Classification Coalescing</p>
  </div>
  <div class="page">
    <p>Classification Coalescing</p>
  </div>
  <div class="page">
    <p>Classification Coalescing</p>
    <p>Reduce Packet Classification</p>
    <p>Cross-NF flow caching</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Measure performance impact</p>
    <p>Run to completion</p>
    <p>Classification coalescing</p>
    <p>Much more in the paper</p>
  </div>
  <div class="page">
    <p>Traces  Trace 1</p>
    <p>Collected from SDN Gateway</p>
    <p>Trace2</p>
    <p>Trace 1 with packets truncated to 64 bytes</p>
    <p>Trace 3</p>
    <p>Synthetic trace with 32 long-lived connections</p>
  </div>
  <div class="page">
    <p>Pipelines  Pipeline A</p>
    <p>L2 -&gt; L3 -&gt; Stateful Firewall -&gt; L2</p>
    <p>Pipeline B</p>
    <p>L2 -&gt; L3 -&gt; Stateful Firewall -&gt; AES Transcoder -&gt; L2</p>
    <p>Pipeline C</p>
    <p>L2 -&gt; L3 -&gt; Stateful Firewall -&gt; Load Balancer -&gt; L2</p>
  </div>
  <div class="page">
    <p>SoftFlow vs VM NFs</p>
    <p>Equivalent Middleboxes Implemented as VMs</p>
    <p>Shared Memory</p>
    <p>Traditional vNIC</p>
    <p>Log Scale 95% - 278% Improvement</p>
  </div>
  <div class="page">
    <p>Coalescing Percent Improvement</p>
  </div>
  <div class="page">
    <p>SoftFlow</p>
    <p>Middleboxes for Open vSwitch</p>
    <p>Maintain the benefits of OpenFlow</p>
    <p>Plugin library of flexible NFs</p>
    <p>Much more in the paper</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
