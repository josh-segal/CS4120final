<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Case for Parallelizing Web Pages</p>
    <p>Haohui Mai, Shuo Tang, Samuel T. King University of Illinois and Valkyrie Computer Systems</p>
    <p>Calin Cascaval, Pablo Montesinos Qualcomm Research</p>
  </div>
  <div class="page">
    <p>Google: slower web, fewer searches</p>
    <p>~$200m / yr</p>
    <p>2 weeks until search rate recovered</p>
    <p>Similar results from Facebook and Microsoft</p>
    <p>[Figure from Speed Matters for Google Web Search by Jake Brutlag]</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Agenda</p>
    <p>Motivation  Overview  Design challenges  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Adrenaline Browser</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>wikipedia.org</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>wikipedia.org</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>wikipedia.org</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>wikipedia.org</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>wikipedia.org</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>wikipedia.org</p>
    <p>Adrenaline Browser</p>
    <p>Adrenaline Server</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Advantages</p>
    <p>Improve performance  Easily adoptable  Maintain current web app semantics</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>Hello</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>Hello</p>
    <p>... &lt;body&gt; &lt;p id=bar&gt;Hello&lt;/p&gt; &lt;img src=foo.png/&gt; &lt;/body&gt; ...</p>
    <p>HTML</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>Hello</p>
    <p>... &lt;body&gt; &lt;p id=bar&gt;Hello&lt;/p&gt; &lt;img src=foo.png/&gt; &lt;/body&gt; ...</p>
    <p>HTML</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt; &lt;img&gt;</p>
    <p>Hello @src@id</p>
    <p>DOM</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>Hello</p>
    <p>... &lt;body&gt; &lt;p id=bar&gt;Hello&lt;/p&gt; &lt;img src=foo.png/&gt; &lt;/body&gt; ...</p>
    <p>HTML</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt; &lt;img&gt;</p>
    <p>Hello @src@id</p>
    <p>DOM</p>
    <p>getElementById(bar)</p>
    <p>.innerText = World;</p>
    <p>JavaScript</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>Hello</p>
    <p>... &lt;body&gt; &lt;p id=bar&gt;Hello&lt;/p&gt; &lt;img src=foo.png/&gt; &lt;/body&gt; ...</p>
    <p>HTML</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt; &lt;img&gt;</p>
    <p>Hello @src@id</p>
    <p>DOM</p>
    <p>getElementById(bar)</p>
    <p>.innerText = World;</p>
    <p>JavaScript</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>Hello</p>
    <p>... &lt;body&gt; &lt;p id=bar&gt;Hello&lt;/p&gt; &lt;img src=foo.png/&gt; &lt;/body&gt; ...</p>
    <p>HTML</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt; &lt;img&gt;</p>
    <p>Hello @src@id</p>
    <p>DOM</p>
    <p>getElementById(bar)</p>
    <p>.innerText = World;</p>
    <p>JavaScript</p>
    <p>World</p>
    <p>World</p>
  </div>
  <div class="page">
    <p>Browser 101</p>
    <p>DOM is the core data structure</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Overview</p>
    <p>Design challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Design challenges  Distributed  Compatibility</p>
  </div>
  <div class="page">
    <p>JavaScript and DOM compatibility  Visual compatibility  Reducing synchronization overhead  ...</p>
    <p>Design challenges  Distributed  Compatibility</p>
  </div>
  <div class="page">
    <p>JavaScript and DOM compatibility</p>
    <p>Distributed states of DOM / JavaScript</p>
  </div>
  <div class="page">
    <p>JavaScript and DOM compatibility</p>
    <p>Distributed states of DOM / JavaScript</p>
    <p>Solution  Only the main page executes JavaScript  Merge distributed states back into the main</p>
    <p>page on demand</p>
  </div>
  <div class="page">
    <p>Example Hello</p>
  </div>
  <div class="page">
    <p>Example &lt;body&gt;</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id Hello</p>
    <p>Hello</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>foo = getElementById(bar); foo.innerText = World;</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id Hello</p>
    <p>Hello</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>foo = getElementById(bar); foo.innerText = World;</p>
    <p>getElementById(id) { foreach(m in minipages) if(m-&gt;contains(id)) { n = createNode(fetchDOM()); m-&gt;parent-&gt;replaceChild(n, m); } }</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id Hello</p>
    <p>Hello</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>foo = getElementById(bar); foo.innerText = World;</p>
    <p>getElementById(id) { foreach(m in minipages) if(m-&gt;contains(id)) { n = createNode(fetchDOM()); m-&gt;parent-&gt;replaceChild(n, m); } }</p>
    <p>&lt;body&gt;</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id Hello</p>
    <p>Hello</p>
  </div>
  <div class="page">
    <p>Example(cont.)</p>
    <p>foo = getElementById(bar); foo.innerText = World;</p>
    <p>getElementById(id) { foreach(m in minipages) if(m-&gt;contains(id)) { n = createNode(fetchDOM()); m-&gt;parent-&gt;replaceChild(n, m); } }</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id Hello</p>
    <p>Hello &lt;body&gt;</p>
  </div>
  <div class="page">
    <p>Example(cont.)</p>
    <p>foo = getElementById(bar); foo.innerText = World;</p>
    <p>getElementById(id) { foreach(m in minipages) if(m-&gt;contains(id)) { n = createNode(fetchDOM()); m-&gt;parent-&gt;replaceChild(n, m); } }</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id Hello</p>
    <p>Hello &lt;body&gt;</p>
  </div>
  <div class="page">
    <p>Example(cont.)</p>
    <p>foo = getElementById(bar); foo.innerText = World;</p>
    <p>getElementById(id) { foreach(m in minipages) if(m-&gt;contains(id)) { n = createNode(fetchDOM()); m-&gt;parent-&gt;replaceChild(n, m); } }</p>
    <p>&lt;p&gt;&lt;img&gt;</p>
    <p>Hello@src @id</p>
    <p>Hello &lt;body&gt;World</p>
    <p>World</p>
  </div>
  <div class="page">
    <p>Visual compatibility</p>
    <p>Users see the same page, and interact with it in the same way</p>
  </div>
  <div class="page">
    <p>Visual compatibility</p>
    <p>Users see the same page, and interact with it in the same way</p>
    <p>Solution  The main page resembles other mini</p>
    <p>pages into its display</p>
    <p>Reroute events to mini pages</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Main page</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>X</p>
    <p>Main page</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>X Mouse event</p>
    <p>Main page Mini page</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>X Mouse event</p>
    <p>DOM onclick</p>
    <p>Main page Mini page</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>X Mouse event</p>
    <p>linkClickHandler() { // process event }</p>
    <p>DOM onclick</p>
    <p>Main page Mini page</p>
  </div>
  <div class="page">
    <p>Reducing overhead</p>
    <p>&gt;1k+ IPC calls for getElementById()</p>
  </div>
  <div class="page">
    <p>Reducing overhead</p>
    <p>&gt;1k+ IPC calls for getElementById()</p>
    <p>Solution  Pre-compute a data structure to cache the</p>
    <p>results</p>
    <p>Bloom filter: a space-efficient data structure without false negatives</p>
  </div>
  <div class="page">
    <p>Additional challenges</p>
    <p>Server architecture  Algorithm to decompose web pages  On going work</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Overview</p>
    <p>Design challenges</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementation on top of QtWebKit  Evaluated 170 of the most popular sites</p>
    <p>Setup  Running on a quad-core ARM board  Local network</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Mean speed up / reduction of latency:1.54x / 1.75s  Speed up 89% of sites</p>
    <p>C um</p>
    <p>ul at</p>
    <p>iv e</p>
    <p>P ro</p>
    <p>ba bi</p>
    <p>lit y</p>
    <p>Difference in Page Load Latency(s)</p>
  </div>
  <div class="page">
    <p>Case study: Wiki-Nokia</p>
    <p>16.7s =&gt; 4.99s  3.34x speed up</p>
    <p>Pa ge</p>
    <p>lo ad</p>
    <p>la te</p>
    <p>nc y(</p>
    <p>s)</p>
    <p>QtBrowser Adrenaline</p>
  </div>
  <div class="page">
    <p>Parallelization offloads ~33% workload to Mini Page 1</p>
    <p>Wall Clock(s)</p>
    <p>QtBrowser</p>
    <p>Main Page</p>
    <p>Mini Page 1</p>
    <p>Mini Page 2</p>
    <p>QtBrowser</p>
    <p>Adrenaline</p>
  </div>
  <div class="page">
    <p>V8 Kernel Painting CSS WK w/o CSS libc+Qt</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>E xe</p>
    <p>cu tio</p>
    <p>n Ti</p>
    <p>m e</p>
    <p>Category</p>
    <p>QtBrowser Main Page</p>
    <p>Mini Page 1 Mini Page 2</p>
    <p>Less work because of decomposition</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Early evaluation results are promising</p>
    <p>Browser developers should think about parallelizing web pages</p>
  </div>
  <div class="page">
    <p>Demo!</p>
    <p>http://www.youtube.com/watch?v=TBcurpe89PI</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
