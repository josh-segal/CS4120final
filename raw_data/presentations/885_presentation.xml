<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Flash on Rails: Consistent Flash Performance through Redundancy</p>
    <p>Dimitris Skourtis, Dimitris Achlioptas, Noah Watkins, Carlos Maltzahn, Scott Brandt</p>
    <p>! University of California, Santa Cruz</p>
  </div>
  <div class="page">
    <p>Motivation  Applications require storage systems with</p>
    <p>Consistent/predictable performance</p>
    <p>High throughput</p>
    <p>Low latency</p>
    <p>Example application: Storage for VMs</p>
  </div>
  <div class="page">
    <p>Hardware options  Memory (DRAM)</p>
    <p>Expensive (for primary storage)</p>
    <p>Often unnecessarily fast (given its cost)</p>
    <p>Hard-drives</p>
    <p>Too slow &amp; unpredictable (random workloads)</p>
    <p>Solid-state drives (or Flash in general)</p>
    <p>Balance cost &amp; performance</p>
    <p>Not quite predictable but fast</p>
  </div>
  <div class="page">
    <p>Can we achieve predictable storage</p>
    <p>performance efficiently?</p>
  </div>
  <div class="page">
    <p>Outline  Performance (un)predictability in SSDs</p>
    <p>Making SSD storage predictable</p>
    <p>Basic solution with two drives, replication</p>
    <p>Generic solution with n drives</p>
    <p>Performance evaluation</p>
  </div>
  <div class="page">
    <p>SSD Performance Unpredictability</p>
  </div>
  <div class="page">
    <p>Reads are perfect</p>
  </div>
  <div class="page">
    <p>Writes are unpredictable</p>
  </div>
  <div class="page">
    <p>Blocking events</p>
    <p>For 600ms out of 1sec the device is blocked 9</p>
  </div>
  <div class="page">
    <p>Read/write performance</p>
  </div>
  <div class="page">
    <p>Read/write performance</p>
  </div>
  <div class="page">
    <p>Physical read/write separation</p>
  </div>
  <div class="page">
    <p>Basic 2 drive design</p>
    <p>SSD 1 Read mode</p>
    <p>Writes from previous period</p>
    <p>WritesReads</p>
    <p>Cache</p>
    <p>SSD 2 Write mode</p>
    <p>Writes of current period</p>
    <p>Drives stay in sync (periodically)</p>
  </div>
  <div class="page">
    <p>Design properties  Consistency</p>
    <p>Heterogeneity</p>
    <p>Power failure</p>
    <p>Twice the cost?</p>
    <p>SSD 1 Read mode</p>
    <p>Writes from previous period</p>
    <p>WritesReads</p>
    <p>Cache</p>
    <p>SSD 2 Write mode</p>
    <p>Writes of current period</p>
    <p>Cache + SSD 1 = Cache + SSD 2</p>
  </div>
  <div class="page">
    <p>Design generalization</p>
    <p>W W WW</p>
    <p>Readers</p>
    <p>W WWW</p>
    <p>R R R</p>
    <p>Frame i</p>
    <p>Frame i+1</p>
    <p>R</p>
    <p>Readers</p>
    <p>R R R R</p>
    <p>Large storage arrays and distributed storage already employ redundancy (replication or erasure coding)</p>
  </div>
  <div class="page">
    <p>An object is spread among nodes depending on the redundancy</p>
    <p>Reading nodes accumulate writes in RAM</p>
    <p>Controller</p>
    <p>Readers window</p>
    <p>DriveDriveDrive Drive</p>
    <p>O(1) O(2) O(3) O(4) O(5) O(6)</p>
    <p>Drive Drive</p>
    <p>Object O (write)</p>
    <p>Flash</p>
    <p>RAM</p>
    <p>Node 1  Node 6</p>
  </div>
  <div class="page">
    <p>Flushing writes</p>
    <p>Readers window</p>
    <p>Dk (6)</p>
    <p>Time frame k = i + 1</p>
    <p>Time frame i</p>
    <p>DriveDriveDriveDrive DriveDrive</p>
    <p>Di...k (5)Di-1k</p>
    <p>(1) Di...k (2) Di-2k</p>
    <p>(3) Di-1k (4)</p>
    <p>DriveDriveDrive Drive</p>
    <p>Di-4i (1) Di-3i</p>
    <p>(2) Di-2...i (3) Di-1i</p>
    <p>(4) Di (5) Di</p>
    <p>(6)</p>
    <p>Drive Drive Flash</p>
    <p>RAM</p>
    <p>Flash</p>
    <p>RAM</p>
    <p>Write nodes flush data to drives</p>
    <p>Di-4,i-3,i-2(1) flushed during</p>
    <p>frame i</p>
  </div>
  <div class="page">
    <p>Performance implications: replication</p>
    <p>The effective throughput is dynamically adjustable through the window size</p>
    <p>Reads: 0 to 100% of total throughput</p>
    <p>Writes: 0 to 100/N% of total throughput</p>
    <p>Enables on-the-fly ratio adjustments</p>
    <p>Reflects workload demand</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Read/Write performance (without Rails)</p>
  </div>
  <div class="page">
    <p>Reads mostly unaffected (with Rails)</p>
  </div>
  <div class="page">
    <p>Reads mostly unaffected</p>
  </div>
  <div class="page">
    <p>Small requests</p>
  </div>
  <div class="page">
    <p>Blocking events when running traces</p>
    <p>Without Rails With Rails</p>
  </div>
  <div class="page">
    <p>Performance using 3 drives (without Rails)</p>
  </div>
  <div class="page">
    <p>Performance using 3 drives (with Rails)</p>
  </div>
  <div class="page">
    <p>Conclusion  Solid-state drives</p>
    <p>Fast but lack consistent performance under R/W workloads</p>
    <p>Modern applications (e.g., VM storage) require</p>
    <p>Consistent performance</p>
    <p>Low latency (consistently)</p>
    <p>Rails</p>
    <p>Uses redundancy to physically separate reads from writes</p>
    <p>Provides read-only throughput and latency (for reads)</p>
    <p>Performance is at least as good for writes as before</p>
  </div>
</Presentation>
