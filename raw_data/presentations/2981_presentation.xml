<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Torturing Databases for Fun and Profit</p>
    <p>The Ohio State University HP Labs</p>
    <p>Mai Zheng, Joseph Tucek, Dachuan Huang, Feng Qin, Mark Lillibridge Elizabeth S Yang, Bill W Zhao, Shashank Singh</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>database</p>
  </div>
  <div class="page">
    <p>ACID: atomicity, consistency, isolation, and durability - even under failures</p>
  </div>
  <div class="page">
    <p>List of databases survived</p>
  </div>
  <div class="page">
    <p>Database</p>
    <p>File System</p>
    <p>Workload W-1 W-2 W-3 W-4.1 W-4.2 W-4.3</p>
    <p>TokyoCabinet ext3 D D D ACD ACD ACD XFS -- D D ACD D ACD</p>
    <p>MariaDB ext3 D D D D D D XFS D D D D D D</p>
    <p>LightningDB ext3 -- -- -- -- -- D XFS -- -- -- -- -- -</p>
    <p>SQLite ext3 D D -- D D D XFS -- -- D D D D</p>
    <p>KVS-A ext3 -- -- Hang -- -- -XFS -- -- -- -- -- -</p>
    <p>SQL-A ext3 D D D D D D XFS D D D D D D</p>
    <p>SQL-B ext3 D D CD CD CD CD XFS CD D CD CD CD CD</p>
    <p>SQL-C NTFS D D D D D D</p>
    <p>Everything is broken under simulated power faults</p>
  </div>
  <div class="page">
    <p>Power faults cannot happen nowadays, right?</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Database Torture 101</p>
  </div>
  <div class="page">
    <p>database</p>
    <p>on-the-fly I/O blocks</p>
    <p>minimum atomic transfer unit</p>
    <p>(e.g., 512B/4KB)</p>
    <p>blocks transferred to durable media</p>
    <p>Fault Model: Clean termination of I/O stream</p>
  </div>
  <div class="page">
    <p>database</p>
    <p>on-the-fly I/O blocks</p>
    <p>blocks transferred to durable media</p>
    <p>a fault happens</p>
    <p>blocks after the fault have no effect</p>
    <p>blocks before the fault are NOT corrupted/ dropped/reordered</p>
    <p>Fault Model: Clean termination of I/O stream</p>
  </div>
  <div class="page">
    <p>Unreasonable to require databases to handle arbitrary bad behavior introduced in the lower layers</p>
    <p>Simulated bad behavior w/o verification by real failures may be unrealistic</p>
    <p>- I/O path in kernel &amp; device puts constraints on failure states</p>
    <p>Why not introduce corruption/dropping/reordering?</p>
  </div>
  <div class="page">
    <p>How do we test DBs on multiple OSes w/ high fidelity?</p>
    <p>database</p>
    <p>No disturbance on thread scheduling No disturbance on interactions among DB, memory manager, FS, volume manager, I/O scheduler,</p>
  </div>
  <div class="page">
    <p>iSCSI iSCSI initiator target</p>
    <p>decouple via iSCSI</p>
    <p>SCSI commands</p>
    <p>over network</p>
    <p>torturing framework</p>
    <p>database</p>
    <p>How do we test DBs on multiple OSes w/ high fidelity?</p>
  </div>
  <div class="page">
    <p>iSCSI iSCSI initiator target</p>
    <p>decouple via iSCSI</p>
    <p>SCSI commands</p>
    <p>over network</p>
    <p>torturing framework</p>
    <p>database</p>
    <p>How do we test DBs on multiple OSes w/ high fidelity?</p>
  </div>
  <div class="page">
    <p>Record &amp; Replayer</p>
    <p>Worker &amp; Checker</p>
    <p>SCSI cmds</p>
    <p>Framework Overview</p>
    <p>database</p>
  </div>
  <div class="page">
    <p>Record &amp; Replayer</p>
    <p>Worker &amp; Checker</p>
    <p>SCSI cmds</p>
    <p>database</p>
    <p>Framework Overview</p>
  </div>
  <div class="page">
    <p>DB table</p>
    <p>key value</p>
    <p>Workload Example</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>THR-1-TXN-1 v-init-THR-1-TXN-1</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-init-2</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-init-5</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
  </div>
  <div class="page">
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Workload Example</p>
    <p>two parts</p>
    <p>per thread</p>
    <p>THR-1-TXN-1 v-init-THR-1-TXN-1</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-init-2</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-init-5</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>key value</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 v-init-THR-1-TXN-1</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-init-2</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-init-5</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>DB table</p>
    <p>Has known initial state</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>key value</p>
  </div>
  <div class="page">
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Each transaction updates N random work rows + 1 meta row</p>
    <p>THR-1-TXN-1 v-init-THR-1-TXN-1</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-init-2</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-init-5</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>key value</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 v-init-THR-1-TXN-1</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-init-2</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-init-5</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Each transaction updates N random work rows + 1 meta row</p>
    <p>key value</p>
    <p>THR-1-TXN-1</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 v-init-THR-1-TXN-1</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Each transaction updates N random work rows + 1 meta row</p>
    <p>key value</p>
    <p>THR-1-TXN-1</p>
    <p>save transaction ID</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Each transaction updates N random work rows + 1 meta row</p>
    <p>key value</p>
    <p>THR-1-TXN-1</p>
    <p>save transaction ID</p>
    <p>save work-row keys &amp; timestamp right before commit</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 v-init-THR-2-TXN-1</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-init-6</p>
    <p>k-7 v-init-7</p>
    <p>k-8 v-init-8</p>
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>key value</p>
    <p>THR-1-TXN-1</p>
    <p>Fully exercise concurrency control</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 v-init-THR-1-TXN-2</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-2-TXN-1</p>
    <p>k-7 v-THR-2-TXN-1</p>
    <p>k-8 v-init-8</p>
    <p>DB table</p>
    <p>Fully exercise concurrency control</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>key value</p>
    <p>THR-2-TXN-1</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-init-3</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-1</p>
    <p>k-8 v-THR-1-TXN-2</p>
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Fully exercise concurrency control</p>
    <p>key value</p>
    <p>THR-1-TXN-2</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 k-3-k-7-TS-00:14</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
    <p>DB table</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>Fully exercise concurrency control</p>
    <p>key value</p>
    <p>THR-2-TXN-2</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>A power fault just happened during our workload ...</p>
  </div>
  <div class="page">
    <p>meta rows</p>
    <p>work rows</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
    <p>key value THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
  </div>
  <div class="page">
    <p>meta rows</p>
    <p>work rows</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
    <p>key value THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
  </div>
  <div class="page">
    <p>meta rows</p>
    <p>work rows</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
    <p>key value THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
  </div>
  <div class="page">
    <p>meta rows</p>
    <p>work rows</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
    <p>key value THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
  </div>
  <div class="page">
    <p>meta rows</p>
    <p>work rows</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
    <p>key value THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
    <p>Atomicity violation! should have been updated w/ work rows</p>
  </div>
  <div class="page">
    <p>meta rows</p>
    <p>work rows</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
    <p>key value THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
    <p>allow checking time &amp; order related properties</p>
  </div>
  <div class="page">
    <p>THR-1-TXN-1 k-2-k-5-TS-00:01</p>
    <p>THR-1-TXN-2 k-6-k-8-TS-00:13</p>
    <p>THR-2-TXN-1 k-7-k-6-TS-00:03</p>
    <p>THR-2-TXN-2 v-init-THR-2-TXN-2</p>
    <p>k-1 v-init-1</p>
    <p>k-2 v-THR-1-TXN-1</p>
    <p>k-3 v-THR-2-TXN-2</p>
    <p>k-4 v-init-4</p>
    <p>k-5 v-THR-1-TXN-1</p>
    <p>k-6 v-THR-1-TXN-2</p>
    <p>k-7 v-THR-2-TXN-2</p>
    <p>k-8 v-THR-1-TXN-2</p>
    <p>meta rows</p>
    <p>work rows</p>
    <p>key value</p>
    <p>More workloads &amp; ACID checking in the paper</p>
    <p>Is there any ACID violation after recovery?</p>
    <p>recovered DB table</p>
  </div>
  <div class="page">
    <p>Record &amp; Replayer</p>
    <p>Worker &amp; Checker</p>
    <p>SCSI cmds</p>
    <p>database</p>
    <p>Framework Overview</p>
  </div>
  <div class="page">
    <p>Record &amp; Replayer</p>
    <p>Worker &amp; Checker</p>
    <p>SCSI cmds</p>
    <p>database</p>
    <p>Framework Overview</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>backing store</p>
    <p>Worker</p>
    <p>SCSI cmds</p>
    <p>Capturing I/O trace without kernel modification</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>backing store</p>
    <p>Worker</p>
    <p>SCSI cmds</p>
    <p>Capturing I/O trace without kernel modification</p>
    <p>Workers block trace</p>
    <p>minimum atomic block-transfer operations (mini ops)</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>backing store clean image</p>
    <p>SCSI cmds</p>
    <p>Constructing a post-fault disk image</p>
    <p>Workers block trace</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>failure image backing store</p>
    <p>SCSI cmds</p>
    <p>fault point</p>
    <p>Constructing a post-fault disk image</p>
    <p>Workers block trace</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>failure image</p>
    <p>SCSI cmds</p>
    <p>fault point</p>
    <p>Checking the post-fault DB</p>
    <p>Workers block trace Checker</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>Checker</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>failure image</p>
    <p>SCSI cmds</p>
    <p>fault point</p>
    <p>autorecovery</p>
    <p>fsck</p>
    <p>Checking the post-fault DB</p>
    <p>check log</p>
    <p>Workers block trace</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>Checker</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>clean image backing store</p>
    <p>SCSI cmds</p>
    <p>fault point Workers</p>
    <p>block trace</p>
    <p>Testing different fault points easily</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>Checker</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>SCSI cmds</p>
    <p>fault point Workers</p>
    <p>block trace</p>
    <p>Testing different fault points easily</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>Checker</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>failure image backing store</p>
    <p>SCSI cmds</p>
    <p>fault point</p>
    <p>Workers block trace</p>
    <p>Testing different fault points easily</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>The framework is not good enough</p>
    <p>Sometimes need several days - too many mini operations, too many</p>
    <p>potential fault points</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>The framework is not good enough</p>
    <p>Sometimes need several days - too many mini operations, too many</p>
    <p>potential fault points</p>
    <p>We tried sampling - but only a few fault points trigger ACID</p>
    <p>violations</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>The framework is not good enough</p>
    <p>Sometimes need several days - too many mini operations, too many</p>
    <p>potential fault points</p>
    <p>We tried sampling - but only a few fault points trigger ACID</p>
    <p>violations</p>
    <p>Dont know why</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>Enhanced Design</p>
  </div>
  <div class="page">
    <p>Record &amp; Replayer</p>
    <p>Worker &amp; Checker</p>
    <p>SCSI cmds</p>
    <p>database</p>
    <p>Multi-layer Tracer</p>
    <p>Framework Overview</p>
  </div>
  <div class="page">
    <p>Record &amp; Replayer</p>
    <p>Worker &amp; Checker</p>
    <p>SCSI cmds</p>
    <p>database</p>
    <p>Multi-layer Tracer</p>
    <p>Framework Overview</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>backing store</p>
    <p>Worker</p>
    <p>SCSI</p>
    <p>op# content LBA</p>
    <p>Workers block trace</p>
    <p>Original trace provides little semantics</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>backing store</p>
    <p>Worker</p>
    <p>SCSI</p>
    <p>op# content LBA timestamp SCSI cmd# file syscall</p>
    <p>Enhancing w/ more context</p>
    <p>Workers multi-layer trace</p>
    <p>multi-layer tracer</p>
  </div>
  <div class="page">
    <p>Checking result Workers multi-layer trace</p>
    <p>What makes some fault points special?</p>
    <p>op# content LBA ts cmd# file syscall</p>
    <p>...     ...</p>
    <p>...     ...</p>
    <p>... ...    ...</p>
    <p>...</p>
    <p>anything special?</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
    <p>intended</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
    <p>intended</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
    <p>implicit flush of dirty blocks by kernel or FS under heavy transactions</p>
    <p>unintended</p>
    <p>intended</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
    <p>unintended</p>
    <p>intended</p>
    <p>special!</p>
  </div>
  <div class="page">
    <p>MMAPp : unintended update to mmaped blocks</p>
    <p>op# LBA file syscall ... ... ... ...</p>
    <p>... ... ... ...</p>
    <p>...</p>
    <p>Four more patterns: REPp , JUMPp , HEADp , TRANp</p>
    <p>unintended</p>
    <p>intended</p>
    <p>special!</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>Replayer</p>
    <p>Workers blk trace</p>
    <p>backing store</p>
    <p>Checker</p>
    <p>check log</p>
    <p>Fault Injection</p>
    <p>Policy SCSI</p>
    <p>Add fault injection policy to determine where to inject faults</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>op# LBA cmd# file syscall</p>
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>MMAPp REPp JUMPp HEADp TRANp total score</p>
    <p>predicted most error-prone</p>
    <p>Workers multi-layer trace Scoreboard</p>
  </div>
  <div class="page">
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>predicted most error-prone</p>
  </div>
  <div class="page">
    <p>Alternative to Exhaustive: Pattern-based Ranking</p>
    <p>predicted most error-prone</p>
  </div>
  <div class="page">
    <p>Diagnosis Support</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>SCSI</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>backing store</p>
    <p>Worker</p>
    <p>Workers multi-layer trace helps understand what happened at fault time</p>
    <p>Workers multi-layer trace:</p>
    <p>op#,</p>
    <p>content, LBA,</p>
    <p>timestamp, SCSI cmd#,</p>
    <p>file, syscall,</p>
    <p>multi-layer tracer</p>
  </div>
  <div class="page">
    <p>file system</p>
    <p>SCSI</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>backing store</p>
    <p>Worker</p>
    <p>multi-layer tracer</p>
    <p>Workers multi-layer trace:</p>
    <p>op#,</p>
    <p>content, LBA,</p>
    <p>timestamp, SCSI cmd#,</p>
    <p>file, syscall,</p>
    <p>function call</p>
    <p>Add function-call tracing to disclose more semantics for diagnosis</p>
  </div>
  <div class="page">
    <p>Replayer</p>
    <p>Checker</p>
    <p>check log</p>
    <p>SCSI</p>
    <p>Workers block trace</p>
    <p>Enable same tracing during checking to see why recovery didnt work</p>
    <p>a fault point triggering</p>
    <p>ACID violation</p>
    <p>Checkers multi-layer trace:</p>
    <p>op#,</p>
    <p>content, LBA,</p>
    <p>timestamp, SCSI cmd#,</p>
    <p>file, syscall,</p>
    <p>function call</p>
    <p>target daemon</p>
    <p>SCSI Tracer</p>
    <p>file system</p>
    <p>multi-layer tracer</p>
  </div>
  <div class="page">
    <p>Results</p>
  </div>
  <div class="page">
    <p>8 databases - Open-source: TokyoCabinet, MariaDB, LightningDB, SQLite - Commercial: KVS-A, SQL-A, SQL-B, SQL-C</p>
    <p>4 workloads  3 file systems - ext3, XFS, NTFS</p>
    <p>Several operating systems - Linux: RHEL 6, Debian6, Ubuntu 12 LTS - Windows 7 Enterprise</p>
    <p>Experimental Environment</p>
  </div>
  <div class="page">
    <p>DB FS W-1 W-2 W-3 W-4.1 W-4.2 W-4.3 A C I D</p>
    <p>TokyoCabinet ext3 D D D ACD ACD ACD 0.15% 0.14% 0 16.05% XFS -- D D ACD D ACD &lt;0.01% 0.01% 0 4.38%</p>
    <p>MariaDB ext3 D D D D D D 0 0 0 1.36% XFS D D D D D D 0 0 0 0.49%</p>
    <p>LightningDB ext3 -- -- -- -- -- D 0 0 0 0.05% XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQLite ext3 D D -- D D D 0 0 0 19.15% XFS -- -- D D D D 0 0 0 10.60%</p>
    <p>KVS-A ext3 -- -- Hang -- -- -- 0 0 0 0 XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQL-A ext3 D D D D D D 0 0 0 3.31% XFS D D D D D D 0 0 0 0.92%</p>
    <p>SQL-B ext3 D D CD CD CD CD 0 8.96% 0 3.24% XFS CD D CD CD CD CD 0 7.77% 0 3.90%</p>
    <p>SQL-C NTFS D D D D D D 0 0 0 8.08%</p>
    <p>Not a single DB can survive all tests</p>
  </div>
  <div class="page">
    <p>DB FS W-1 W-2 W-3 W-4.1 W-4.2 W-4.3 A C I D</p>
    <p>TokyoCabinet ext3 D D D ACD ACD ACD 0.15% 0.14% 0 16.05% XFS -- D D ACD D ACD &lt;0.01% 0.01% 0 4.38%</p>
    <p>MariaDB ext3 D D D D D D 0 0 0 1.36% XFS D D D D D D 0 0 0 0.49%</p>
    <p>LightningDB ext3 -- -- -- -- -- D 0 0 0 0.05% XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQLite ext3 D D -- D D D 0 0 0 19.15% XFS -- -- D D D D 0 0 0 10.60%</p>
    <p>KVS-A ext3 -- -- Hang -- -- -- 0 0 0 0 XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQL-A ext3 D D D D D D 0 0 0 3.31% XFS D D D D D D 0 0 0 0.92%</p>
    <p>SQL-B ext3 D D CD CD CD CD 0 8.96% 0 3.24% XFS CD D CD CD CD CD 0 7.77% 0 3.90%</p>
    <p>SQL-C NTFS D D D D D D 0 0 0 8.08%</p>
    <p>Durability violation is most common</p>
  </div>
  <div class="page">
    <p>DB FS W-1 W-2 W-3 W-4.1 W-4.2 W-4.3 A C I D</p>
    <p>TokyoCabinet ext3 D D D ACD ACD ACD 0.15% 0.14% 0 16.05% XFS -- D D ACD D ACD &lt;0.01% 0.01% 0 4.38%</p>
    <p>MariaDB ext3 D D D D D D 0 0 0 1.36% XFS D D D D D D 0 0 0 0.49%</p>
    <p>LightningDB ext3 -- -- -- -- -- D 0 0 0 0.05% XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQLite ext3 D D -- D D D 0 0 0 19.15% XFS -- -- D D D D 0 0 0 10.60%</p>
    <p>KVS-A ext3 -- -- Hang -- -- -- 0 0 0 0 XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQL-A ext3 D D D D D D 0 0 0 3.31% XFS D D D D D D 0 0 0 0.92%</p>
    <p>SQL-B ext3 D D CD CD CD CD 0 8.96% 0 3.24% XFS CD D CD CD CD CD 0 7.77% 0 3.90%</p>
    <p>SQL-C NTFS D D D D D D 0 0 0 8.08%</p>
    <p>Some violations are difficult to trigger</p>
  </div>
  <div class="page">
    <p>DB FS W-1 W-2 W-3 W-4.1 W-4.2 W-4.3 A C I D</p>
    <p>TokyoCabinet ext3 D D D ACD ACD ACD 0.15% 0.14% 0 16.05% XFS -- D D ACD D ACD &lt;0.01% 0.01% 0 4.38%</p>
    <p>MariaDB ext3 D D D D D D 0 0 0 1.36% XFS D D D D D D 0 0 0 0.49%</p>
    <p>LightningDB ext3 -- -- -- -- -- D 0 0 0 0.05% XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQLite ext3 D D -- D D D 0 0 0 19.15% XFS -- -- D D D D 0 0 0 10.60%</p>
    <p>KVS-A ext3 -- -- Hang -- -- -- 0 0 0 0 XFS -- -- -- -- -- -- 0 0 0 0</p>
    <p>SQL-A ext3 D D D D D D 0 0 0 3.31% XFS D D D D D D 0 0 0 0.92%</p>
    <p>SQL-B ext3 D D CD CD CD CD 0 8.96% 0 3.24% XFS CD D CD CD CD CD 0 7.77% 0 3.90%</p>
    <p>SQL-C NTFS D D D D D D 0 0 0 8.08%</p>
    <p>Some violations are difficult to trigger</p>
  </div>
  <div class="page">
    <p>Failure symptoms faults injected in a region of operations cause: - A violation: a transaction is partially committed - D violation: some rows are irretrievable - C violation: retrievable rows by range query and point</p>
    <p>queries are different</p>
    <p>Case Study: A TokyoCabinet Bug</p>
  </div>
  <div class="page">
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb tcbdbget() ...</p>
    <p>Why recovery didnt work?</p>
    <p>Checkers trace when no violation</p>
    <p>was found</p>
    <p>Checkers trace when ACID violations</p>
    <p>were found</p>
    <p>Delta Debugging [Zeller, SIGSOFT02/FSE-10]</p>
  </div>
  <div class="page">
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Checkers trace when no violation</p>
    <p>was found</p>
    <p>Checkers trace when ACID violations</p>
    <p>were found</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work?</p>
    <p>Delta Debugging [Zeller, SIGSOFT02/FSE-10]</p>
  </div>
  <div class="page">
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Checkers trace when no violation</p>
    <p>was found</p>
    <p>Checkers trace when ACID violations</p>
    <p>were found</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work?</p>
    <p>Delta Debugging [Zeller, SIGSOFT02/FSE-10]</p>
  </div>
  <div class="page">
    <p>... mmap(8192, x.tcb, 0) ... fsync(x.tcb.wal) //op#, LBA, content, file, syscall op#26, 630, ............, x.tcb.wal, fsync(x.tcb.wal) op#27, 960, ............, fs-j , fsync(x.tcb.wal) op#28, 964, ............, fs-j , fsync(x.tcb.wal) op#29, 480, ...100..., x.tcb , fsync(x.tcb.wal) ... msync(x.tcb) //op#, LBA, content, file, syscall op#91, 480, ...101..., x.tcb, msync(x.tcb) ...</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work? What happened at fault time?</p>
    <p>Workers trace around the bug-triggering</p>
    <p>fault points op#30#90</p>
  </div>
  <div class="page">
    <p>... mmap(8192, x.tcb, 0) ... fsync(x.tcb.wal) //op#, LBA, content, file, syscall op#26, 630, ............, x.tcb.wal, fsync(x.tcb.wal) op#27, 960, ............, fs-j , fsync(x.tcb.wal) op#28, 964, ............, fs-j , fsync(x.tcb.wal) op#29, 480, ...100..., x.tcb , fsync(x.tcb.wal) ... msync(x.tcb) //op#, LBA, content, file, syscall op#91, 480, ...101..., x.tcb, msync(x.tcb) ...</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work? What happened at fault time?</p>
    <p>Workers trace around the bug-triggering</p>
    <p>fault points op#30#90</p>
  </div>
  <div class="page">
    <p>... mmap(8192, x.tcb, 0) ... fsync(x.tcb.wal) //op#, LBA, content, file, syscall op#26, 630, ............, x.tcb.wal, fsync(x.tcb.wal) op#27, 960, ............, fs-j , fsync(x.tcb.wal) op#28, 964, ............, fs-j , fsync(x.tcb.wal) op#29, 480, ...100..., x.tcb , fsync(x.tcb.wal) ... msync(x.tcb) //op#, LBA, content, file, syscall op#91, 480, ...101..., x.tcb, msync(x.tcb) ...</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work? What happened at fault time?</p>
    <p>Intended update</p>
    <p>Workers trace around the bug-triggering</p>
    <p>fault points op#30#90</p>
  </div>
  <div class="page">
    <p>... mmap(8192, x.tcb, 0) ... fsync(x.tcb.wal) //op#, LBA, content, file, syscall op#26, 630, ............, x.tcb.wal, fsync(x.tcb.wal) op#27, 960, ............, fs-j , fsync(x.tcb.wal) op#28, 964, ............, fs-j , fsync(x.tcb.wal) op#29, 480, ...100..., x.tcb , fsync(x.tcb.wal) ... msync(x.tcb) //op#, LBA, content, file, syscall op#91, 480, ...101..., x.tcb, msync(x.tcb) ...</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work? What happened at fault time?</p>
    <p>Workers trace around the bug-triggering</p>
    <p>fault points op#30#90</p>
    <p>Intended update</p>
  </div>
  <div class="page">
    <p>... mmap(8192, x.tcb, 0) ... fsync(x.tcb.wal) //op#, LBA, content, file, syscall op#26, 630, ............, x.tcb.wal, fsync(x.tcb.wal) op#27, 960, ............, fs-j , fsync(x.tcb.wal) op#28, 964, ............, fs-j , fsync(x.tcb.wal) op#29, 480, ...100..., x.tcb , fsync(x.tcb.wal) ... msync(x.tcb) //op#, LBA, content, file, syscall op#91, 480, ...101..., x.tcb, msync(x.tcb) ...</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work? What happened at fault time?</p>
    <p>Unintended update!</p>
    <p>Workers trace around the bug-triggering</p>
    <p>fault points op#30#90</p>
    <p>Intended update</p>
  </div>
  <div class="page">
    <p>... mmap(8192, x.tcb, 0) ... fsync(x.tcb.wal) //op#, LBA, content, file, syscall op#26, 630, ............, x.tcb.wal, fsync(x.tcb.wal) op#27, 960, ............, fs-j , fsync(x.tcb.wal) op#28, 964, ............, fs-j , fsync(x.tcb.wal) op#29, 480, ...100..., x.tcb , fsync(x.tcb.wal) ... msync(x.tcb) //op#, LBA, content, file, syscall op#91, 480, ...101..., x.tcb, msync(x.tcb) ...</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...101..., x.tcb tchdbwalrestore() tcbdbget() ...</p>
    <p>Case Study: A TokyoCabinet Bug</p>
    <p>... tchdbopenimpl(x.tcb) ... open(x.tcb) = 3 read(x.tcb) = 256 //op#, LBA, content, file op#1, 480, ...100..., x.tcb //no tchdbwalrestore() tcbdbget() ...</p>
    <p>Why recovery didnt work? What happened at fault time?</p>
    <p>One solution: Failure-atomic msync() [Park et.al., EuroSys13]</p>
    <p>Workers trace around the bug-triggering</p>
    <p>fault points op#30#90</p>
  </div>
  <div class="page">
    <p>TokyoCabinet</p>
    <p>SQLite</p>
    <p>SQL-A</p>
    <p>SQL-B</p>
    <p>LightningDB</p>
    <p>KVS-A</p>
    <p>MariaDB</p>
    <p>SQL-C</p>
    <p>reduction factor =</p>
    <p>Patterns reduce required test points greatly while achieving similar coverage</p>
  </div>
  <div class="page">
    <p>TokyoCabinet</p>
    <p>SQLite</p>
    <p>SQL-A</p>
    <p>SQL-B</p>
    <p>LightningDB</p>
    <p>KVS-A</p>
    <p>MariaDB</p>
    <p>SQL-C</p>
    <p>reduction factor =</p>
    <p>Patterns reduce required test points greatly while achieving similar coverage</p>
    <p>the 2 databases from which patterns are extracted</p>
  </div>
  <div class="page">
    <p>TokyoCabinet</p>
    <p>SQLite</p>
    <p>SQL-A</p>
    <p>SQL-B</p>
    <p>LightningDB</p>
    <p>KVS-A</p>
    <p>MariaDB</p>
    <p>SQL-C</p>
    <p>reduction factor =</p>
    <p>Patterns reduce required test points greatly while achieving similar coverage</p>
    <p>reduce testing time from &gt; 2 months</p>
    <p>to &lt; 3 days!</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>A wake-up call - traditional testing methodology may not be enough for todays</p>
    <p>complex storage systems - thorough testing requires purpose-built workloads and</p>
    <p>intelligent fault injection techniques</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>A wake-up call - traditional testing methodology may not be enough for todays</p>
    <p>complex storage systems - thorough testing requires purpose-built workloads and</p>
    <p>intelligent fault injection techniques</p>
    <p>Different layers in OS can help in different ways - iSCSI: fault injection w/ high portability &amp; high fidelity - LBA &amp; syscall: generic behavior patterns - combined multi-layer info: clear whole picture of complicated</p>
    <p>scenarios</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>We should bridge the gaps of understanding/assumptions!</p>
    <p>between User &amp; DB</p>
    <p>between DB &amp; OS</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>We should bridge the gaps of understanding/assumptions!</p>
    <p>Pop Quiz: true or false? mmap'ed files are not updated until msync() file-length update are persistent after fdatasync() durability is provided by the default configuration transactions are durable after COMMIT</p>
    <p>between User &amp; DB</p>
    <p>between DB &amp; OS</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>We should bridge the gaps of understanding/assumptions!</p>
    <p>Pop Quiz: true or false? mmap'ed files are not updated until msync() false file-length update are persistent after fdatasync() durability is provided by the default configuration transactions are durable after COMMIT</p>
    <p>between User &amp; DB</p>
    <p>between DB &amp; OS</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>We should bridge the gaps of understanding/assumptions!</p>
    <p>Pop Quiz: true or false? mmap'ed files are not updated until msync() false file-length update are persistent after fdatasync() depends! durability is provided by the default configuration depends! transactions are durable after COMMIT depends!</p>
    <p>between User &amp; DB</p>
    <p>between DB &amp; OS</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>We should bridge the gaps of understanding/assumptions!</p>
    <p>Thank you!</p>
    <p>Pop Quiz: true or false? mmap'ed files are not updated until msync() false file-length update are persistent after fdatasync() depends! durability is provided by the default configuration depends! transactions are durable after COMMIT depends!</p>
    <p>between User &amp; DB</p>
    <p>between DB &amp; OS</p>
  </div>
</Presentation>
