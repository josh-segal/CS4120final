<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hera-JVM: Abstracting Processor Heterogeneity</p>
    <p>Behind a Virtual Machine</p>
    <p>Ross McIlroy and Joe Sventek University of Glasgow</p>
    <p>Department of Computing Science</p>
    <p>Carnegie Trust for the Universities of Scotland</p>
  </div>
  <div class="page">
    <p>Heterogeneous Multi-Core Architectures</p>
    <p>CPUs are becoming increasingly Multi-Core  Should these cores all be identical?</p>
    <p>- Specialise cores for particular workloads - Large core for sequential code, many small cores for</p>
    <p>parallel code</p>
    <p>Found in specialist niches currently - e.g. network processors (Intel IXP), games consoles (Cell)</p>
    <p>Likely to become more common - On-chip GPUs (AMD Fusion), Intel Larrabee</p>
  </div>
  <div class="page">
    <p>Developing for HMAs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for HMAs Main Arch Code Secondary Arch Code</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for HMAs</p>
    <p>Main Core Secondary Cores</p>
    <p>Main Arch Code Secondary Arch Code</p>
  </div>
  <div class="page">
    <p>Developing for HMAs</p>
    <p>Main Core Secondary Cores</p>
    <p>Main Arch Code Secondary Arch Code Support Code</p>
  </div>
  <div class="page">
    <p>Developing for HMAs</p>
    <p>Main Core Secondary Cores</p>
    <p>Main Arch Code Secondary Arch Code Support Code</p>
  </div>
  <div class="page">
    <p>Developing for HMAs</p>
    <p>Main Core Secondary Cores</p>
    <p>Main Arch Code Secondary Arch Code Support Code</p>
  </div>
  <div class="page">
    <p>Developing for HMAs</p>
    <p>Main Core Secondary Cores</p>
    <p>Main Arch Code Secondary Arch Code Support Code Libraries</p>
    <p>main.o secondary.o</p>
  </div>
  <div class="page">
    <p>Hera-JVM</p>
    <p>Hide this heterogeneity from the application developer - Present the illusion of a homogeneous multi-threaded virtual machine - The same code will run on either core type</p>
    <p>Runtime system is aware of heterogeneous resources - Can transparently migrate threads between core types based upon</p>
    <p>this knowledge</p>
    <p>Provide portable application behaviour hints to enable runtime system to infer the applications heterogeneity</p>
    <p>- Explicit Code Annotations - Static Code Analysis / Typing information - Runtime Monitoring / Profiling</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Developing for Hera-JVM</p>
    <p>Main Core Secondary Cores</p>
    <p>Integer FloatRandom Memory Access</p>
    <p>Branching Code</p>
    <p>Sequential Memory Access</p>
    <p>Runtime System</p>
    <p>Int, Float, Seq Rand</p>
    <p>Rand Int, Float</p>
    <p>Main Core Costs</p>
    <p>Sec. Core Costs</p>
    <p>Application Threads</p>
  </div>
  <div class="page">
    <p>Cell Processor</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>SPE Compiler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>SPE Compiler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>SPE Compiler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>SPE Compiler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>A JVM for Two Architectures</p>
    <p>Built upon JikesRVM - Java in Java - PowerPC and x86 support</p>
    <p>PPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>PPE Compiler</p>
    <p>SPE Assembler</p>
    <p>Low Level Assembly</p>
    <p>SPE Compiler</p>
    <p>Runtime System</p>
    <p>Java Library</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Migration</p>
    <p>A thread can migrate between the PPE and SPE cores at any method invocation - Migration is triggered either by an explicit annotation or is</p>
    <p>signalled dynamically by the scheduler - Syscalls and native methods always migrate back to PPE</p>
    <p>Migration from core type A to B: - Thread traps to support code on core A, which saves arguments - Method JITed for core type B if required - Migration marker and migration support frame pushed onto stack - Thread placed on ready queue of core type B</p>
  </div>
  <div class="page">
    <p>SPE Local Memory  Instead of a cache, SPEs have 256KB of explicitly</p>
    <p>accessible local memory</p>
    <p>Main memory accessed through DMA using MFC (Memory Flow Controller)</p>
    <p>Setting up many small DMA transfers is costly</p>
    <p>Main Memory</p>
    <p>Local Memory</p>
    <p>MFCSPE</p>
  </div>
  <div class="page">
    <p>Software Caching in a High Level Language</p>
    <p>Java bytecodes are typed, therefore, we have high level knowledge of whats being cached - Cache an object completely when it is accessed - Cache arrays in 1KB blocks</p>
    <p>Java memory model only requires coherency operations at synchronisation points</p>
    <p>Methods are cached in their entirety when invoked</p>
  </div>
  <div class="page">
    <p>Hera-JVM Performance</p>
    <p>!&quot;</p>
    <p>!#$&quot;</p>
    <p>%&quot;</p>
    <p>%#$&quot;</p>
    <p>&amp;&quot;</p>
    <p>!&quot; #! $% &amp;</p>
    <p>' () *+ ,%$ .&amp;</p>
    <p>!&quot; #! /( %! +&amp;</p>
    <p>!&quot; #,0 &amp;</p>
    <p>!&quot; #&quot; $) .+ 1( %, $&amp;</p>
    <p>' $, 2 3) &amp;</p>
    <p>!&quot; #4 .&amp;</p>
    <p>' /+ 56 0* 7$ &amp;</p>
    <p>' $) .+ :( %, $&amp;</p>
    <p>:$ &quot; /% +! !&amp;</p>
    <p>; / + + * 0 / &amp;</p>
    <p>;&lt;=&amp;&gt;#!#&amp;&lt;&lt;=&amp;</p>
    <p>Single Threaded</p>
    <p>SP E</p>
    <p>v. s.</p>
    <p>PP E</p>
    <p>Sp ee</p>
    <p>du p</p>
  </div>
  <div class="page">
    <p>Hera-JVM Performance</p>
    <p>!&quot;</p>
    <p>!#$&quot;</p>
    <p>%&quot;</p>
    <p>%#$&quot;</p>
    <p>&amp;&quot;</p>
    <p>!&quot; #! $% &amp;</p>
    <p>' () *+ ,%$ .&amp;</p>
    <p>!&quot; #! /( %! +&amp;</p>
    <p>!&quot; #,0 &amp;</p>
    <p>!&quot; #&quot; $) .+ 1( %, $&amp;</p>
    <p>' $, 2 3) &amp;</p>
    <p>!&quot; #4 .&amp;</p>
    <p>' /+ 56 0* 7$ &amp;</p>
    <p>' $) .+ :( %, $&amp;</p>
    <p>:$ &quot; /% +! !&amp;</p>
    <p>; / + + * 0 / &amp;</p>
    <p>;&lt;=&amp;&gt;#!#&amp;&lt;&lt;=&amp;</p>
    <p>Single Threaded</p>
    <p>SP E</p>
    <p>v. s.</p>
    <p>PP E</p>
    <p>Sp ee</p>
    <p>du p</p>
  </div>
  <div class="page">
    <p>!&quot;</p>
    <p>#&quot;</p>
    <p>$&quot;</p>
    <p>%&quot;</p>
    <p>&amp;&quot;</p>
    <p>'!&quot;</p>
    <p>'#&quot;</p>
    <p>() *( +, &quot;</p>
    <p>./ 01 23 ,+ 4&quot;</p>
    <p>() *( 5. ,( 1&quot;</p>
    <p>() *26 &quot;</p>
    <p>() *) +/ 41 7. ,2 +&quot;</p>
    <p>+2 8 9/ &quot;</p>
    <p>() *: 4&quot;</p>
    <p>&gt;. 9&quot; ?, .7 1, &quot;</p>
    <p>+/ 41 @. ,2 +&quot;</p>
    <p>@+ ) 5, 1( (&quot;</p>
    <p>! &quot; # # $ % &quot; &amp;</p>
    <p>'&amp;!()*&amp;+,*,&amp;(()&amp;</p>
    <p>Hera-JVM Performance Multi-Threaded</p>
    <p>(6 threads)</p>
    <p>Es v</p>
    <p>.s . P</p>
    <p>PE S</p>
    <p>pe ed</p>
    <p>up</p>
  </div>
  <div class="page">
    <p>Proportion of Execution Time by Operation</p>
    <p>!&quot;# $!&quot;# %!&quot;# &amp;!&quot;# '!&quot;# (!!&quot;#</p>
    <p>)*+,-.//#</p>
    <p>+,.01234*#</p>
    <p>&lt;58.0.-#</p>
    <p>=-15)&gt;#</p>
    <p>?81)@#</p>
    <p>A*)16#B.+*-C#</p>
    <p>B145#B.+*-C#</p>
  </div>
  <div class="page">
    <p>Data Cache Hit-Rate</p>
    <p>!&quot;#$</p>
    <p>!&quot;%$</p>
    <p>!&quot;&amp;$</p>
    <p>!&quot;'$</p>
    <p>!&quot;($</p>
    <p>!&quot;)$</p>
    <p>!&quot;*$</p>
    <p>+$</p>
    <p>+&quot;+$</p>
    <p>!$)$+'$,%$#,$%!$%)$&amp;'$'%$(,$)!$))$*'$+!%$</p>
    <p>! &quot; #$ % #&amp;</p>
    <p>' ( ) &quot; ** ** ** ** ** ** ** **</p>
    <p>+# &quot; ,' . &quot; */ % *0 1 2 3 *4 &quot; $' 5 ,/ 6*</p>
    <p>!&quot;#$</p>
    <p>!&quot;#%$</p>
    <p>!&quot;&amp;$</p>
    <p>!&quot;&amp;%$</p>
    <p>!&quot;'$</p>
    <p>!&quot;'%$</p>
    <p>($</p>
    <p>! &quot; #&quot; $% &amp;# $' &quot; #( $</p>
    <p>)*+,-.//$ +,.01234*$ +153.67-*8$</p>
  </div>
  <div class="page">
    <p>Code Cache Hit-Rate</p>
    <p>!&quot;#$</p>
    <p>!&quot;%$</p>
    <p>!&quot;&amp;$</p>
    <p>!&quot;'$</p>
    <p>($</p>
    <p>(&quot;($</p>
    <p>!$&amp;$(#$)*$+)$*!$*&amp;$,#$#*$%)$&amp;!$&amp;&amp;$</p>
    <p>! &quot; #$ % #&amp;</p>
    <p>' ( ) &quot; ** ** ** ** ** ** ** ** **</p>
    <p>+# &quot; ,' . &quot; */ % *0 1 2 3 *4 &quot; $' 5 ,/ 6*</p>
    <p>!&quot;#$</p>
    <p>!&quot;%$</p>
    <p>!&quot;&amp;$</p>
    <p>!&quot;'$</p>
    <p>($</p>
    <p>! &quot; #$ % &amp; '( )# '* + #&quot; '</p>
    <p>)*+,-.//$ +,.01234*$ +153.67-*8$</p>
  </div>
  <div class="page">
    <p>Conclusion / Future Work  Architectures are likely to become more heterogeneous  This heterogeneity should be taken out of the hands of</p>
    <p>non-specialist programmers</p>
    <p>Instead, hide this heterogeneity from the programmer and provide abstractions to infer a programs heterogeneity - E.g. code annotations, runtime monitoring, etc.</p>
    <p>Hera-JVM is a proof of concept of this approach - Overheads involved in hiding the heterogeneity are tolerable for</p>
    <p>most applications</p>
    <p>Next Stage : Fully integrate behaviour tagging with scheduling / migration decisions</p>
  </div>
</Presentation>
