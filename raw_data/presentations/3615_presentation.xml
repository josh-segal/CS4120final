<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation</p>
    <p>Abraham Clements*, Eric Gustafson*, Tobias Scharnowski, Paul Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer</p>
  </div>
  <div class="page">
    <p>IoT and Operational Technology</p>
  </div>
  <div class="page">
    <p>Device Internals</p>
  </div>
  <div class="page">
    <p>Baremetal Firmware</p>
    <p>Baremetal</p>
    <p>Firmware ??</p>
    <p>On-chip Hardware (eg.., MMIO)</p>
    <p>Off-chip Hardware (e.g., sensors, radio, ...)</p>
    <p>Raw hardware access</p>
    <p>.text</p>
    <p>.data</p>
    <p>.bss</p>
    <p>.plt</p>
    <p>libc.so.6</p>
    <p>Kernel abstractions used for hardware interactions</p>
    <p>main()</p>
    <p>read() send()</p>
    <p>Linux ELF file</p>
  </div>
  <div class="page">
    <p>Hardware is Hard!</p>
    <p>Debug access  Should be disabled  If present, very limited</p>
    <p>Limits parallelism Other limitations</p>
    <p>Can be expensive ($100 - $10k)  Brittle - easily bricked</p>
  </div>
  <div class="page">
    <p>Re-hosting to the Rescue?</p>
    <p>HALucinators Goal: Enable scalable firmware testing without requiring specialized hardware</p>
    <p>Emulator</p>
  </div>
  <div class="page">
    <p>Peripherals Prevent Re-hosting</p>
    <p>On chip CPU AES Accelerator Hash Coprocessor Timers Counters Flash Controller Clock Config IAP DMA</p>
    <p>Off chip Ethernet SD-MMC GPIO Camera LCD Touch Screen Wireless EEPROM Serial CAN Analog IO USB</p>
    <p>Peripherals</p>
  </div>
  <div class="page">
    <p>Peripherals Prevent Re-hosting</p>
    <p>On chip CPU AES Accelerator Hash Coprocessor Timers Counters Flash Controller Clock Config IAP DMA</p>
    <p>Off chip Ethernet SD-MMC GPIO Camera LCD Touch Screen Wireless EEPROM Serial CAN Analog IO USB</p>
    <p>Mouser Lists 44,520 Microcontrollers 3,502 Datasheets 26 Manufacturers</p>
    <p>Peripherals</p>
  </div>
  <div class="page">
    <p>Peripherals Prevent Re-hosting</p>
    <p>On chip CPU AES Accelerator Hash Coprocessor Timers Counters Flash Controller Clock Config IAP DMA</p>
    <p>Off chip Ethernet SD-MMC GPIO Camera LCD Touch Screen Wireless EEPROM Serial CAN Analog IO USB</p>
    <p>Mouser Lists 44,520 Microcontrollers 3,502 Datasheets 26 Manufactures</p>
    <p>Without support for peripherals baremetal firmware will not run! There are 10,000s of peripherals and combinations there of!</p>
    <p>Peripherals</p>
  </div>
  <div class="page">
    <p>Hardware Abstraction Libraries</p>
  </div>
  <div class="page">
    <p>HALs are Everywhere</p>
  </div>
  <div class="page">
    <p>HALs are Everywhere</p>
    <p>HALucinator Enables replacing HALs and other libraries with high level</p>
    <p>implementations. Transforming the re-hosting scaling problem from supporting 10,000s of devices to dozens of HALS</p>
  </div>
  <div class="page">
    <p>The Modern Firmware Stack</p>
    <p>On-chip Hardware (eg., MMIO)</p>
    <p>Firmware</p>
    <p>Off-chip Hardware (e.g., sensors, radio, ...)</p>
  </div>
  <div class="page">
    <p>High Level Emulation</p>
    <p>On-chip Hardware (eg., MMIO)</p>
    <p>Off-chip Hardware (e.g., sensors, radio, ...)</p>
    <p>Application Code</p>
    <p>RTOS</p>
    <p>Protocol Stacks</p>
    <p>(IP, Zigbee)</p>
    <p>Peripheral Libraries (sensors,</p>
    <p>etc)</p>
    <p>Vendor HAL, Platform HAL, etc</p>
    <p>M id</p>
    <p>dl ew</p>
    <p>ar e</p>
    <p>H A</p>
    <p>L H</p>
    <p>ar dw</p>
    <p>ar e</p>
  </div>
  <div class="page">
    <p>High Level Emulation</p>
    <p>On-chip Hardware (eg., MMIO)</p>
    <p>Off-chip Hardware (e.g., sensors, radio, ...)</p>
    <p>Application Code</p>
    <p>RTOS</p>
    <p>Protocol Stacks</p>
    <p>(IP, Zigbee)</p>
    <p>Peripheral Libraries (sensors,</p>
    <p>etc)</p>
    <p>Vendor HAL, Platform HAL, etc</p>
    <p>QEMU</p>
    <p>Application Code</p>
    <p>RTOS</p>
    <p>Protocol Stacks</p>
    <p>(IP, Zigbee)</p>
    <p>Peripheral Libraries (sensors,</p>
    <p>etc)</p>
    <p>High Level Replacements Re-Host!</p>
    <p>M id</p>
    <p>dl ew</p>
    <p>ar e</p>
    <p>H A</p>
    <p>L H</p>
    <p>ar dw</p>
    <p>ar e</p>
  </div>
  <div class="page">
    <p>High Level Emulation</p>
    <p>On-chip Hardware (eg., MMIO)</p>
    <p>Off-chip Hardware (e.g., sensors, radio, ...)</p>
    <p>Application Code</p>
    <p>RTOS</p>
    <p>Protocol Stacks</p>
    <p>(IP, Zigbee)</p>
    <p>Peripheral Libraries (sensors,</p>
    <p>etc)</p>
    <p>Vendor HAL, Platform HAL, etc</p>
    <p>QEMU</p>
    <p>Application Code</p>
    <p>RTOS</p>
    <p>Protocol Stacks (e.g., IP Zigbee,</p>
    <p>)</p>
    <p>Peripheral Libraries (sensors,</p>
    <p>etc)High Level Replacements</p>
    <p>Re-Host!</p>
    <p>M id</p>
    <p>dl ew</p>
    <p>ar e</p>
    <p>H A</p>
    <p>L H</p>
    <p>ar dw</p>
    <p>ar e</p>
  </div>
  <div class="page">
    <p>HALucinator implementation</p>
    <p>Firmware LibMatch</p>
    <p>HAL Source</p>
    <p>Func. Addrs</p>
    <p>CPU Emulator (QEMU)</p>
    <p>UART Handler</p>
    <p>Peripheral Models</p>
    <p>IO Server</p>
    <p>HALucinator</p>
    <p>Ethernet Handler...</p>
    <p>Our Contributions</p>
    <p>FW</p>
  </div>
  <div class="page">
    <p>Handler Example</p>
    <p>QEMU</p>
    <p>Device-specific code</p>
    <p>Libraries (HALs, libc)Python</p>
    <p>def i2c_read_buf(uc): # i2c_read_buf(char* buf, int len); buf = uc.regs.r1 # arg 0: The buffer l = uc.regs.r2 # arg 1: Buffer length assert(buf != 0) # Crash on bad arguments assert(len &gt; 0) data = I2CModel.rx('i2c', 0, len) # Get the data # from the virtual bus uc.mem[buf] = data # Store it in the emulator</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>libfoo.o</p>
    <p>Step 1: Match library content 20</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFailHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_ReadHAL_ETH_Rx</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write HAL_UART_ReadHAL_ETH_Rx</p>
    <p>HAL_PutChar</p>
    <p>HAL_SPI_Write</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write HAL_UART_ReadHAL_ETH_Rx</p>
    <p>HAL_PutChar</p>
    <p>HAL_SPI_Write</p>
    <p>libfoo.o</p>
    <p>libbar.o</p>
    <p>Step 2: Caller Context 23</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write HAL_UART_ReadHAL_ETH_Rx</p>
    <p>HAL_PutChar</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write HAL_UART_ReadHAL_ETH_Rx</p>
    <p>HAL_PutChar</p>
    <p>Step 3: Callee Context libfoo.o</p>
    <p>libbar.o</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write HAL_UART_ReadHAL_ETH_Rx</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write</p>
    <p>ETH_Rx_Callback</p>
    <p>HAL_UART_ReadHAL_ETH_Rx</p>
    <p>libfoo.o</p>
    <p>libbar.o</p>
  </div>
  <div class="page">
    <p>LibMatch</p>
    <p>HAL_AssertFail HAL_GetCharHAL_DebugPrint</p>
    <p>SystemClockConfig</p>
    <p>HAL_UART_Write</p>
    <p>_flush ETH_Rx_Callback</p>
    <p>HAL_UART_Read</p>
    <p>malloc</p>
    <p>HAL_ETH_Rx HAL_UART_Available</p>
  </div>
  <div class="page">
    <p>hal-fuzz</p>
    <p>Built on AFL-Unicorn  Program exits when the input is exhausted  Deterministic timers based on block counts  Interrupt events also based on block counts  Crashes detected via Unicorns own error</p>
    <p>detector as well as handler assertions</p>
  </div>
  <div class="page">
    <p>ATMEL ASF  USART  FAT32 on SD-Card  HTTP Server  6LoWPAN Sender and Receiver</p>
    <p>STM32Cube  UART  FAT32 on SD-Card  UDP-Echo Server and Client  TCP-Echo Server and Client  PLC</p>
    <p>NXP -MCUXpresso  UART  UDP Echo Server  TCP Echo Server  HTTP Server</p>
  </div>
  <div class="page">
    <p>LibMatch Results</p>
    <p>Nave LibMatch (Bindiff)</p>
    <p>LibMatch w/ context</p>
    <p>Correct 74.5% 87.4%</p>
    <p>Missing 5.0% 3.2%</p>
    <p>Collisions 18.8% 8.5%</p>
    <p>Incorrect 2.5% 0.9%</p>
    <p>External -- 9.96%</p>
    <p>% matches across 16 test binaries 31</p>
  </div>
  <div class="page">
    <p>Ease of Use</p>
    <p>Three Handler categories:  Trivial: Does nothing / returns a constant  Translating: Collects arguments, interacts with</p>
    <p>a Model, returns a result  Internal Logic: Needs to re-implement</p>
    <p>undocumented internal details</p>
  </div>
  <div class="page">
    <p>Ease of Use</p>
    <p>Over 85% of handlers require little effort  44.5% (37) are trivial  42.2% (35) are translating</p>
    <p>Remainder (11): Internal logic  HAL behavior doesnt abstract hardware well enough  HAL behavior makes assumptions not in the docs (e.g.,</p>
    <p>uses its own heap allocator)</p>
  </div>
  <div class="page">
    <p>Fuzzing!</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>AFL</p>
    <p>Hundreds of millions of executions with real parallel AFL</p>
    <p>New crashes in:  STMs ST-PLC Kit  Atmels HTTP Server</p>
    <p>example  Atmels Contiki 6LowPAN</p>
    <p>examples</p>
  </div>
  <div class="page">
    <p>Multi-layer Fuzzing!</p>
    <p>QEMU</p>
    <p>HTTP Server</p>
    <p>RTOS LwIP</p>
    <p>High Level Replacements</p>
    <p>QEMU</p>
    <p>HTTP Server</p>
    <p>RTOS</p>
    <p>Protocol Stacks (e.g., IP Zigbee,</p>
    <p>)</p>
    <p>Peripheral Libraries (sensors,</p>
    <p>etc)High Level Replacements</p>
    <p>Info Leak!</p>
    <p>Heap Corruption!</p>
    <p>Atmel HTTP Server firmware sample</p>
  </div>
  <div class="page">
    <p>Discovered CVEs</p>
    <p>CVE-2019-8359: Remote code execution via buffer overflow in packet reassembly of Contiki OS</p>
    <p>CVE-2019-9183: Remote Denial-of-Service via Integer underflow in packet reassembly of Contiki OS</p>
  </div>
  <div class="page">
    <p>CSAW ESC 2019 results</p>
    <p>Re-hosted ARM portion of all challenge sets  Solved 18/19 challenges  Verified 17/18 solutions w/ just the emulator  Solved 3 challenges automatically using fuzzing  Won first place!</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>HALucinator eliminates implementing 10,000s of peripherals by using HALs</p>
    <p>CPU Emulator (QEMU)</p>
    <p>Uart Handler</p>
    <p>Peripheral Models</p>
    <p>IO Server</p>
    <p>Ethernet Handler...</p>
    <p>github.com/embedded-sec/halucinator github.com/ucsb-seclab/hal-fuzz</p>
    <p>FW</p>
  </div>
</Presentation>
