<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scaling Guest OS Critical Sections with eCS</p>
    <p>Sanidhya Kashyap, Changwoo Min, Taesoo Kim</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Physical machine (Host) pCPU 1 pCPU 2 pCPU 3 pCPU 4</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Hardware abstraction Physical machine (Host)</p>
    <p>pCPU 1 pCPU 2 pCPU 3 pCPU 4</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>Virtual machine vCPU 1 vCPU 2 vCPU 3 vCPU 4</p>
    <p>App App App... Hardware abstraction</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Hardware abstraction</p>
    <p>Software abstraction</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>Virtual machine vCPU 1 vCPU 2 vCPU 3 vCPU 4</p>
    <p>App App App...  Mismatch between</p>
    <p>CPU abstraction</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
    <p>VM consolidation - Contention on pCPU</p>
    <p>Hardware abstraction</p>
    <p>Software abstraction</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>Virtual machine vCPU 1 vCPU 2 vCPU 3 vCPU 4</p>
    <p>App App App...</p>
    <p>Multiple vCPUs</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>VM2</p>
    <p>Apps</p>
    <p>VM3</p>
    <p>Apps</p>
    <p>VM4</p>
    <p>Apps</p>
    <p>VM1</p>
    <p>Apps</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
    <p>VM consolidation - Contention on pCPU</p>
    <p>Hardware abstraction</p>
    <p>Software abstraction</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>Virtual machine vCPU 1 vCPU 2 vCPU 3 vCPU 4</p>
    <p>App App App...</p>
    <p>Multiple vCPUs</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>VM2</p>
    <p>Apps</p>
    <p>VM3</p>
    <p>Apps</p>
    <p>VM4</p>
    <p>Apps</p>
    <p>VM1</p>
    <p>Apps</p>
    <p>A vCPU can be preempted without notification</p>
  </div>
  <div class="page">
    <p>The physical and virtual CPU abstraction</p>
    <p>Mismatch between</p>
    <p>CPU abstraction</p>
    <p>VM consolidation - Contention on vCPU</p>
    <p>Hardware abstraction</p>
    <p>Software abstraction</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>Virtual machine vCPU 1 vCPU 2 vCPU 3 vCPU 4</p>
    <p>App App App...</p>
    <p>Multiple vCPUs</p>
    <p>Physical machine (Host) pCPU 1</p>
    <p>Hypervisor</p>
    <p>pCPU 2 pCPU 3 pCPU 4</p>
    <p>VM2</p>
    <p>Apps</p>
    <p>VM3</p>
    <p>Apps</p>
    <p>VM4</p>
    <p>Apps</p>
    <p>VM1</p>
    <p>Apps</p>
    <p>A vCPU can be preempted without notification</p>
    <p>Double scheduling issue</p>
  </div>
  <div class="page">
    <p>vCPU 1 vCPU 3vCPU 2vCPU 1</p>
    <p>Double scheduling: Lock holder preemption (LHP)</p>
    <p>vCPU holding a lock is preempted</p>
    <p>Preemption hinders forward progress of the VM</p>
    <p>Can lead to application slowdown by 20 -- 130%</p>
    <p>vCPU scheduled</p>
    <p>vCPU preempted</p>
    <p>A B C</p>
    <p>File</p>
    <p>Access a file Running task in a VM</p>
  </div>
  <div class="page">
    <p>Efforts to mitigate preemption issues</p>
    <p>Focussed only non-blocking locks</p>
    <p>Acquire iff sufficient schedule time</p>
    <p>Hotplug vCPUs on the fly</p>
    <p>May not scale to large vCPU VMs</p>
    <p>VM co-scheduling</p>
    <p>Does not always alleviate the issue</p>
    <p>Mostly address other preemption</p>
    <p>problem</p>
    <p>Blocking locks</p>
    <p>Unfair non-blocking locks</p>
    <p>Hardware features to mitigate</p>
    <p>preemptions</p>
    <p>Research efforts Current practice</p>
  </div>
  <div class="page">
    <p>Efforts to mitigate preemption issues</p>
    <p>Focussed only non-blocking locks</p>
    <p>Acquire iff sufficient schedule time</p>
    <p>Hotplug vCPUs on the fly</p>
    <p>May not scale to large vCPU VMs</p>
    <p>VM co-scheduling</p>
    <p>Does not always alleviate the issue</p>
    <p>Mostly address other preemption</p>
    <p>problem</p>
    <p>Blocking locks</p>
    <p>Unfair non-blocking locks</p>
    <p>Hardware features to mitigate</p>
    <p>preemptions</p>
    <p>Research efforts Current practice</p>
    <p>Prior approaches are mostly specialized</p>
  </div>
  <div class="page">
    <p>Still the double scheduling is looming!  LHP for blocking locks</p>
    <p>mutex, rwsem</p>
    <p>Readers preemption (RP) in read-write locks</p>
    <p>A reader is preempted while holding the lock</p>
    <p>Interrupt context preemption (ICP)</p>
    <p>Preemption of a vCPU processing an interrupt</p>
    <p>Blocked-waiter wakeup (BWW)</p>
    <p>Waking up a blocked thread on an idle vCPU is at least 10 times costlier</p>
  </div>
  <div class="page">
    <p>Still the double scheduling is looming!  LHP for blocking locks</p>
    <p>mutex, rwsem</p>
    <p>Readers preemption (RP) in read-write locks</p>
    <p>A reader is preempted while holding the lock</p>
    <p>Interrupt context preemption (ICP)</p>
    <p>Preemption of a vCPU processing an interrupt</p>
    <p>Blocked-waiter wakeup (BWW)</p>
    <p>Waking up a blocked thread on an idle vCPU is at least 10 times costlier</p>
    <p>Semantic gap between virtual and physical CPU</p>
  </div>
  <div class="page">
    <p>Our approach to address semantic gap</p>
    <p>Insight: A vCPU may be running a critical task!</p>
    <p>Approach: Avoid preempting a vCPU with a critical task</p>
    <p>Design: Identify and mark/unmark a critical task</p>
  </div>
  <div class="page">
    <p>vCPU 1vCPU 1 vCPU 2vCPU 2 vCPU 3</p>
    <p>Identifying each critical section with eCS</p>
    <p>Scheduled vCPU</p>
    <p>Preempted vCPU</p>
    <p>A B C</p>
    <p>File</p>
    <p>Access a file</p>
    <p>Synchronization primitives protect critical sections  ensure OS progress</p>
    <p>Mark and unmark critical sections before and after the critical section</p>
    <p>Conservative, but effective approach to address each preemption problem</p>
    <p>60 LoC annotates 85K lock invocations in 13M LoC in Linux</p>
    <p>Running task in a VM</p>
  </div>
  <div class="page">
    <p>vCPU 1vCPU 1 vCPU 2vCPU 2 vCPU 3</p>
    <p>Identifying each critical section with eCS</p>
    <p>Scheduled vCPU</p>
    <p>Preempted vCPU</p>
    <p>A B C</p>
    <p>File</p>
    <p>Access a file Enlightened vCPU</p>
    <p>Synchronization primitives protect critical sections  ensure OS progress</p>
    <p>Mark and unmark critical sections before and after the critical section</p>
    <p>Conservative, but effective approach to address each preemption problem</p>
    <p>60 LoC annotates 85K lock invocations in 13M LoC in Linux</p>
    <p>Running task in a VM</p>
  </div>
  <div class="page">
    <p>vCPU 1 vCPU 2vCPU 2 vCPU 3</p>
    <p>Identifying each critical section with eCS</p>
    <p>Scheduled vCPU</p>
    <p>Preempted vCPU</p>
    <p>A B C</p>
    <p>File</p>
    <p>Access a file Enlightened vCPU</p>
    <p>Synchronization primitives protect critical sections  ensure OS progress</p>
    <p>Mark and unmark critical sections before and after the critical section</p>
    <p>Conservative, but effective approach to address each preemption problem</p>
    <p>60 LoC annotates 85K lock invocations in 13M LoC in Linux</p>
    <p>Running task in a VM</p>
  </div>
  <div class="page">
    <p>Sharing the state for efficient notification</p>
    <p>vCPU(A) vCPU(B) vCPU(C)</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>VM</p>
    <p>...</p>
    <p>pcpu_overloaded (0/1) vcpu_preempted (0/1)</p>
    <p>non_preemptable_ecs_count preemptable_ecs_count</p>
    <p>vCPU(A) state</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>vCPU(B) state</p>
    <p>vCPU(C) state</p>
    <p>Hypervisor</p>
    <p>...</p>
    <p>Each vCPU shares memory with the hypervisor</p>
    <p>vCPU updates information for critical sections</p>
    <p>Notifies critical task to the hypervisor</p>
    <p>Hypervisor also updates scheduler context</p>
    <p>before/after scheduling out a vCPU</p>
    <p>Enables vCPU to make efficient scheduling</p>
    <p>decisions</p>
  </div>
  <div class="page">
    <p>Lightweight para-virtualized APIs to update states</p>
    <p>vCPU(A) vCPU(B) vCPU(C)</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>VM</p>
    <p>...</p>
    <p>pcpu_overloaded (0/1) vcpu_preempted (0/1)</p>
    <p>Hint API</p>
    <p>VM  Hypervisor</p>
    <p>activate_non_preemptable_ecs(cpu)</p>
    <p>deactivate_non_preemptable_ecs(cpu_id)</p>
    <p>activate_preemptable_ecs(cpu_id))</p>
    <p>deactivate_preemptable_ecs(cpu_id)</p>
    <p>Hypervisor  VM is_vcpu_preempted(cpu_id)</p>
    <p>is_pcpu_overloaded(cpu_id)</p>
    <p>non_preemptable_ecs_count preemptable_ecs_count</p>
    <p>vCPU(A) state</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>vCPU(B) state</p>
    <p>vCPU(C) state</p>
    <p>Hypervisor</p>
    <p>...</p>
    <p>Updated by each vCPU; read by the hypervisor</p>
    <p>Update by the hypervisor; read by a vCPU</p>
  </div>
  <div class="page">
    <p>vCPU 1 vCPU 3vCPU 2vCPU 1</p>
    <p>Hypervisor checks eCS state before scheduling out a vCPU</p>
    <p>A B C</p>
    <p>File</p>
    <p>Access a file</p>
    <p>vCPU(A) vCPU(B) vCPU(C)</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>ecs_count (0)</p>
    <p>VM1</p>
    <p>...</p>
    <p>ecs_count (1)ecs_count (0)</p>
    <p>...</p>
    <p>Time shared pCPU 1</p>
    <p>vCPU 1VM2</p>
    <p>vCPU 1VM1</p>
    <p>Scheduled vCPU</p>
    <p>Preempted vCPU</p>
    <p>Enlightened vCPU</p>
    <p>Running task in a VM</p>
    <p>Running vCPU 1  vCPU 1 acquires lock  vCPU 1 updates eCS count  Hypervisor checks states before vCPU 1 preemption  Hypervisor lets vCPU 1 runs for extra time  vCPU 1 finishes and updates eCS count  Hypervisor penalizes vCPU 1 later</p>
    <p>VM1</p>
  </div>
  <div class="page">
    <p>vCPU 1 vCPU 3vCPU 2vCPU 1</p>
    <p>Hypervisor checks eCS state before scheduling out a vCPU</p>
    <p>A B C</p>
    <p>File</p>
    <p>Access a file</p>
    <p>vCPU(A) vCPU(B) vCPU(C)</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>ecs_count (0)</p>
    <p>VM1</p>
    <p>...</p>
    <p>ecs_count (1)ecs_count (0)</p>
    <p>...</p>
    <p>Time shared pCPU 1</p>
    <p>vCPU 1VM2</p>
    <p>vCPU 1VM1</p>
    <p>Scheduled vCPU</p>
    <p>Preempted vCPU</p>
    <p>Enlightened vCPU</p>
    <p>Running task in a VM</p>
    <p>Running vCPU 1  vCPU 1 acquires lock  vCPU 1 updates eCS count  Hypervisor checks states before vCPU 1 preemption  Hypervisor lets vCPU 1 runs for extra time  vCPU 1 finishes and updates eCS count  Hypervisor penalizes vCPU 1 later</p>
    <p>VM1</p>
    <p>Extended schedule Penalized schedule</p>
  </div>
  <div class="page">
    <p>The case for system eventual fairness  Hypervisor accounts extra time and later penalizes the enlightened VM</p>
    <p>Penalize the schedule of an enlightened VM</p>
    <p>Extend the schedule of the very next VM</p>
    <p>Hypervisor optimistically extends time for an enlightened CS</p>
    <p>Decision made just before scheduling out a vCPU</p>
    <p>Extra time (schedule) to avoid preemption: 1 ms</p>
  </div>
  <div class="page">
    <p>Even vCPU can make efficient scheduling decisions</p>
    <p>Share the hypervisor context with each VM  Lock waiters can avoid bWW problem</p>
    <p>Virtualized scheduling-aware spinning  Lock waiter keeps spinning until the lock is not</p>
    <p>acquired if the pCPU is not overloaded</p>
    <p>vCPU(A) vCPU(B) vCPU(C)</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>vCPU(A) state</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>eCS states</p>
    <p>vCPU(B) state</p>
    <p>vCPU(C) state</p>
    <p>Hypervisor</p>
    <p>VM</p>
    <p>...</p>
    <p>...</p>
    <p>pcpu_overloaded (0/1)</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Rely on paravirtualized VM</p>
    <p>Extended schedulers preempt_notifier API to check eCS states</p>
    <p>Rely on scheduler_tick() to avoid vCPU preemption</p>
    <p>Overall implementation is 1000 LoC</p>
    <p>60 LoC for annotating almost every lock-based critical section</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Does eCS improves VMs performance?</p>
    <p>Does hypervisor maintain system eventual fairness?</p>
    <p>Setup: 8-socket, 80-core NUMA machine</p>
  </div>
  <div class="page">
    <p>Impact of eCS in over-committed scenario</p>
    <p>Apache web server Psearchy</p>
    <p>Experiment: run two VMs running same application</p>
    <p>eCS improves application throughput by 1.2 -- 2.3X</p>
    <p>eCS avoids preemptions by 85.8--100%  an extra schedule tick is sufficient</p>
    <p>Preemptions avoided</p>
  </div>
  <div class="page">
    <p>Impact of eCS in under-committed scenario</p>
    <p>Experiment: Run only one VM with an application</p>
    <p>eCS improves application performance by 1.2 -- 1.9X</p>
    <p>Virtualized scheduling-aware spinning addresses BWW for blocking locks Apache web server Psearchy</p>
  </div>
  <div class="page">
    <p>System eventual fairness</p>
    <p>Experiment: an application reading a file</p>
    <p>Hypervisors scheduler (CFS) maintains eventual fairness</p>
    <p>Both VMs get equal time even though VM2 (eCS) is granted extra schedules</p>
    <p>CFS maintains eventual fairness by penalizing VM2</p>
    <p>Each run for equal time (4.95 seconds out of 10 seconds)</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Right approach for Linux adoption</p>
    <p>Leverage steal_time_struct that exposes preempted method</p>
    <p>Annotation</p>
    <p>Use VM  Hypervisor API to mark functions</p>
    <p>Extending the concept to the userspace</p>
    <p>Require composable scheduling abstraction to support user space</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Double scheduling leads to several preemption problems</p>
    <p>Six lightweight paravirtualized methods to annotate critical sections</p>
    <p>Leverage hypervisors scheduler to mitigate vCPU preemptions</p>
    <p>Allow vCPU to make efficient scheduling decision</p>
    <p>A generic approach to mitigate all preemption problems!</p>
    <p>Thank you!</p>
  </div>
</Presentation>
