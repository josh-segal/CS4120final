<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Empirical Study of Web Resource Manipulation in Real-world Mobile Applications</p>
    <p>Xiaohan Zhang, Yuan Zhang, Qianqian Mo, Hao Xia, Zhemin Yang, Min Yang</p>
    <p>XiaoFeng Wang, Long Lu, and Haixin Duan</p>
  </div>
  <div class="page">
    <p>Page 2</p>
    <p>Background</p>
    <p>Mobile apps are integrating more and more Web services</p>
    <p>advertising</p>
    <p>social sharing</p>
    <p>even authentication and authorization</p>
    <p>Most of Web-App integrations are through light-weight in-app Web browsers, called WebViews</p>
    <p>Android: WebView</p>
    <p>iOS: UIWebView/WKWebView</p>
    <p>Mobile app</p>
    <p>WebView</p>
    <p>Web</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>Page 3</p>
    <p>Web-App Integration Security Risks</p>
    <p>Web App</p>
    <p>Security risks to both sides  Web-to-App attacks</p>
    <p>App-to-Web attacks</p>
  </div>
  <div class="page">
    <p>Page 4</p>
    <p>Web-App Integration Security Risks</p>
    <p>Web App</p>
    <p>Security risks on both sides  Web-to-App attack  App-to-Web attack</p>
    <p>Web-to-App attacks  where unauthorized Web code access</p>
    <p>sensitive functions of the host apps</p>
    <p>Existing works  attacks [luo et al. ACSAC11], [Sooel et.al, NDSS 16],</p>
    <p>[OSV-Hunter, S&amp;P 18]</p>
    <p>detections [BridgeScope, RAID17]  defenses [NoFrak, NDSS14], [Draco, CCS16]</p>
    <p>well</p>
    <p>studied</p>
  </div>
  <div class="page">
    <p>Page 5</p>
    <p>Web-App Integration Security Risks</p>
    <p>Web App</p>
    <p>Security risks on both sides  Web-to-App attacks</p>
    <p>App-to-Web attacks</p>
    <p>App-to-Web attacks  where the host apps manipulate</p>
    <p>sensitive resources of the Web</p>
    <p>Existing works  partially mentioned in theory [luo et</p>
    <p>al. ACSAC11], [Eric et al. CCS14]</p>
    <p>no real-world cases</p>
    <p>not</p>
    <p>measured</p>
    <p>Open Questions:</p>
    <p>by real-world apps?</p>
    <p>attacks?</p>
  </div>
  <div class="page">
    <p>Page 6</p>
    <p>Web Resource Manipulation APIs</p>
    <p>Both Android and iOS provide a handful of APIs for host apps to manipulate the Web resources</p>
    <p>Examples:</p>
    <p>Manipulated Web</p>
    <p>Resources Android WebView iOS UIWebView iOS WKWebView</p>
    <p>Local Storage CookieManager NSHTTPCookieStorage WKWebsiteDataStorage</p>
    <p>Web Content loadUrl,</p>
    <p>evaulateJavascript</p>
    <p>stringByEvaluatingJavascript</p>
    <p>FromString evaluateJavascript</p>
    <p>Web Address onPageFinished,</p>
    <p>shouldOverrideUrlLoading \ \</p>
    <p>Network Traffic shouldInteceptRequest shouldStartLoadWithRequest decidePolicyForNavigationAction,</p>
    <p>decidePolicyForNavigationResponse</p>
    <p>Is it secure?</p>
  </div>
  <div class="page">
    <p>Page 7</p>
    <p>Motivating Example</p>
    <p>The Website facebook.com is loaded into WebViews of two apps</p>
    <p>both apps use CookieManager.getCookie to get cookies of facebook.com</p>
    <p>facebook.com</p>
    <p>// get Facebook</p>
    <p>cookies</p>
    <p>CookieManager.getI</p>
    <p>nstance().getCookie(</p>
    <p>facebook.com&quot;);</p>
    <p>// get Facebook</p>
    <p>cookies</p>
    <p>CookieManager.getI</p>
    <p>nstance().getCookie(</p>
    <p>facebook.com&quot;);</p>
    <p>Observation: it is risky when security principals are crossed!</p>
    <p>App A : Facebooks official app</p>
    <p>App B: Chatous, a third-party app</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>Page 8</p>
    <p>Definitions</p>
    <p>Two security principals involved  Web Principal, the manipulated Web resources,   App Principal, the manipulating code,</p>
    <p>Cross Principal Manipulation (XPM)</p>
    <p>Target: to measure XPMs in real-world apps</p>
    <p>facebook.com</p>
    <p>// get Facebook</p>
    <p>cookies</p>
    <p>CookieManager.getI</p>
    <p>nstance().getCookie(</p>
    <p>facebook.com&quot;);</p>
    <p>:</p>
    <p>:</p>
    <p>XPM</p>
  </div>
  <div class="page">
    <p>Page 9</p>
    <p>Methodology</p>
    <p>package com.chatous.chatous.managers;</p>
    <p>if (CookieManager.getInstance().getCookie(https://facebook.com&quot;) != null) {</p>
    <p>// get Facebook cookies</p>
    <p>cookies =</p>
    <p>CookieManager.getInstance().getCookie(https://facebook.com&quot;); // store these cookies</p>
    <p>BasicCookieStore cookieStore = new BasicCookieStore();</p>
    <p>cookieStore.addCookie(cookies);</p>
    <p>// abuse these cookies to collect user privacy information.</p>
    <p>Finding XPMs in real-world apps</p>
    <p>XPM</p>
    <p>Non-trivial</p>
  </div>
  <div class="page">
    <p>Page 10</p>
    <p>Identify App Principals</p>
    <p>Challenge 1: multiple security principals exist in the app</p>
    <p>the host app itself  several third-party libraries</p>
    <p>Solution: identify third-party libraries   of third-party library: library name   of the host app: host apps meta-info</p>
    <p>library identification algorithm  Merkle-tree based code signature  please refer to our paper for more details</p>
    <p>facebook.com</p>
    <p>// get Facebook</p>
    <p>cookies</p>
    <p>CookieManager.getI</p>
    <p>nstance().getCookie(</p>
    <p>facebook.com&quot;);</p>
    <p>:</p>
    <p>FB_SDK</p>
    <p>not XPM</p>
    <p>XPM</p>
  </div>
  <div class="page">
    <p>Page 11</p>
    <p>Determine  =  ?</p>
    <p>Challenge 2: semantic gaps between  and</p>
    <p>chatous and facebook</p>
    <p>google and youtube</p>
    <p>abbreviation: fb and facebook</p>
    <p>facebook.com</p>
    <p>// get Facebook</p>
    <p>cookies</p>
    <p>CookieManager.getI</p>
    <p>nstance().getCookie(</p>
    <p>facebook.com&quot;);</p>
    <p>:</p>
    <p>:</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Page 12</p>
    <p>Determine  =  ?</p>
    <p>Challenge 2: semantic gaps between  and</p>
    <p>chatous and facebook</p>
    <p>google and youtube</p>
    <p>abbreviation: fb and facebook</p>
    <p>solution: ask search engine  e.g. facebook and fb have more than 80%</p>
    <p>similarity in google search result</p>
    <p>searching-based classifier  normalize search results into    using</p>
    <p>bag-of-words model</p>
    <p>similarity distances between these two vectors</p>
    <p>,  _ ,</p>
  </div>
  <div class="page">
    <p>Page 13</p>
    <p>XPMChecker Design &amp; Implementation</p>
    <p>Implementation is based on Soot and FlowDroid</p>
    <p>with customized ICFG</p>
    <p>API-specific data flow analysis</p>
    <p>Manipulation</p>
    <p>Information</p>
    <p>Extractor</p>
    <p>API Model</p>
    <p>Database</p>
    <p>Principal Identifier</p>
    <p>XPMClassifier</p>
    <p>Search engine</p>
    <p>Web principal App principal</p>
    <p>XPMChecker Overview</p>
    <p>XPM?</p>
    <p>(please refer to our paper for more technical details)</p>
  </div>
  <div class="page">
    <p>Page 14</p>
    <p>XPMChecker Evaluation</p>
    <p>Dataset  84,712 apps from Google Play during Jul 2017, with at least 5,000</p>
    <p>installations across 48 categories.</p>
    <p>Performance  95.3% of all apps (80,694/84,712) are successfully analyzed  233 hours with 9 processes, 10 seconds/app.</p>
    <p>CentOS 7.4 64-bit server, 64 CPU cores (2GHz), 188 GB memory  9 processes, 20 minutes timeout</p>
    <p>Effectiveness  with 200 manually labeled ground truth  98.9% precision and 97.9% recall ( = 0.3134)</p>
  </div>
  <div class="page">
    <p>Page 15</p>
    <p>Finding: XPM Prevalence</p>
    <p>XPMs are very popular in real-world apps  4.8% (3,858/80,694) of all apps contain XPMs</p>
    <p>49.2% (14,776/29,448) of all Web resource manipulations are cross-principal.</p>
    <p># of Apps (% in all apps) # of manipulations</p>
    <p>Apps that manipulate Web</p>
    <p>resources</p>
    <p>Apps with XPMs 3,858 (4.8%) 14,476 (49.2%)</p>
  </div>
  <div class="page">
    <p>Page 16</p>
    <p>Finding: XPM Location</p>
    <p>A large part of XPMs are from libraries.</p>
    <p>63.6% of XPMs originate from 88 libraries in our dataset</p>
    <p>Reflections on current defensive work</p>
    <p>works that consider the app as a single principal is not fine-grained enough nor accurate [WIREFRAME, AsiaCCS17]</p>
    <p>XPM in</p>
    <p>host apps</p>
    <p>XPM in</p>
    <p>libraries</p>
    <p>XPM LOCATION</p>
  </div>
  <div class="page">
    <p>Page 17</p>
    <p>More than 90% XPMs provide normal utilities  Inject JS to customize Web services to improve user experience</p>
    <p>add navigation controls</p>
    <p>customize Google Cloud Print</p>
    <p>Monitor Web addresses to invoke local apps</p>
    <p>Finding: XPM Intents</p>
    <p>Web App</p>
  </div>
  <div class="page">
    <p>Page 18</p>
    <p>Malicious XPM Intents</p>
    <p>Confirm malicious XPMs in real-world for the first time  find 22 malicious XPMs in 21 apps, with up to 130M installations</p>
    <p>report to Google and the malicious intents are removed</p>
    <p>4 iOS apps with such malicious XPMs are also confirmed</p>
    <p>Three categories:</p>
    <p>Malicious behavior # of apps</p>
    <p>impersonating legitimate relying party in OAuth 2</p>
    <p>stealing user credentials 6</p>
    <p>stealing and abusing cookies 14</p>
  </div>
  <div class="page">
    <p>Page 19</p>
    <p>Case Study 1. Impersonating relying party in OAuth</p>
    <p>App instaview impersonates Tinder in Instagram OAuth  a profile tracker for users to see their Instagram visiting statistics</p>
    <p>1,000,000-5,000,000 installations</p>
    <p>package com.instaview.app;</p>
    <p>public class LoginActivity extends Activity{</p>
    <p>// get Tinders client ID</p>
    <p>String clientId = getTinderClientId();</p>
    <p>this.webview.setWebViewClient(new WebViewClient() {</p>
    <p>public boolean shouldOverrideUrlLoading(WebView arg1, String url) {</p>
    <p>// check if url is Instagrams OAuth API and extract the acess token for Tinder</p>
    <p>if (url.startsWith(api.instagram.com/oauth) &amp;&amp; contains(code=) {</p>
    <p>String accessToken = url.substring(url.indexOf(code=) + 5, url.length());</p>
    <p>// then use this token to access users profile info</p>
  </div>
  <div class="page">
    <p>Page 20</p>
    <p>Case Study 2. Stealing user credentials</p>
    <p>adkingkong steals users Google account credentials</p>
    <p>an advertising app with 500,000  1,000,000 installations</p>
    <p>package co.kr.adkingkong.libs.autoinstall;</p>
    <p>public class GoogleWebLogin extends RelativeLayout {</p>
    <p>// load Google login Web page</p>
    <p>this.webview.loadUrl(accounts.google.com);</p>
    <p>this.webview.setWebViewClient(new WebViewClient() {</p>
    <p>public void onPageFinished(WebView arg1, String url) {</p>
    <p>// inject JS to steal users email and password</p>
    <p>arg1.loadUrl(javascript:</p>
    <p>if (document.getElementById('gaia_loginform') !== null) {</p>
    <p>document.getElementById(gaia_loginform).onsubmit = function onSubmit(form) {</p>
    <p>// extract email and password from the login form</p>
    <p>email = document.getElementById(email-display).innerHTML;</p>
    <p>passwd = document.getElementById(Passwd).value);</p>
    <p>);</p>
  </div>
  <div class="page">
    <p>Page 21</p>
    <p>Case Study 3. Stealing and abusing Cookies</p>
    <p>App chatous steals Facebook cookies and abuses them to collect sensitive user info and send spams</p>
    <p>a random chatting app with 10,000,000 to 50,000,000 installations</p>
    <p>package com.chatous.chatous.managers;</p>
    <p>public class FacebookManager extends Manager {</p>
    <p>if (CookieManager.getInstance().getCookie(https://facebook.com&quot;) != null) { // get Facebook cookies</p>
    <p>cookies = CookieManager.getInstance().getCookie(https://facebook.com&quot;); // use these cookies to access users Facebook homepage</p>
    <p>DefaultHttpClient httpclient = new DefaultHttpClient();</p>
    <p>htttpclient.setCookieStore(cookieStore);</p>
    <p>HttpResponse response =</p>
    <p>httpclient.execute(new HttpGet(https://facebook.com/first_degree.php? + ));</p>
    <p>// get users friend list and send spam invitations</p>
    <p>List&lt;String&gt; friends = parse_response(response);</p>
    <p>for (friend: friends) {</p>
    <p>send_invitations(friend);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Page 22</p>
    <p>Finding: XPM Targets and Their Awareness</p>
    <p>More than 70% of XPMs target top popular Web services  such as Google, Facebook, YouTube,</p>
    <p>Twitter, etc.</p>
    <p>However, most of them are unaware of such risks  all the above providers except Goolge allow</p>
    <p>sensitive Web services to be loaded into WebViews of any apps.</p>
    <p>Google are unable to effectively prevent users from using WebView to do OAuth.</p>
    <p>Google announcement, Aug 2016</p>
    <p>Other Web</p>
    <p>services</p>
    <p>Top 10</p>
    <p>Web</p>
    <p>services</p>
    <p>XPM TARGET</p>
  </div>
  <div class="page">
    <p>Page 23</p>
    <p>Conclusion</p>
    <p>Measurement tool: automatically find Cross Principal Manipulation (XPM)</p>
    <p>First large scale empirical study on XPM in real-world  better understanding of the threat and development of countermeasures</p>
    <p>confirm malicious App-to-Web attacks on both Android and iOS that already affect a large number of devices</p>
    <p>Dataset released: https://xhzhang.github.io/XPMChecker/</p>
  </div>
  <div class="page">
    <p>Page 24</p>
    <p>Q&amp;A</p>
    <p>Thanks !</p>
    <p>Xiaohan Zhang</p>
    <p>xh_zhang@fudan.edu.cn</p>
  </div>
  <div class="page">
    <p>Page 25</p>
    <p>Backup slides</p>
  </div>
  <div class="page">
    <p>Page 26</p>
    <p>Future work</p>
    <p>Hybrid frameworks, such as Cordova</p>
    <p>Customized browser, such as Tencent X5</p>
    <p>Other methods besides manipulation APIs</p>
    <p>Currently we rely on manual effort to confirm malicious XPM behaviors</p>
    <p>Heuristic rules based on current findings</p>
  </div>
  <div class="page">
    <p>Page 27</p>
    <p>Three types of APIs based on the source of manipulated Web URL</p>
    <p>Type I: URL from a parameter</p>
    <p>Type II: URL from base WebView instance</p>
    <p>Type III: URL from a callback parameter (runtime URL)</p>
    <p>API Models</p>
  </div>
  <div class="page">
    <p>Page 28</p>
    <p>Identifying third-party libraries</p>
    <p>idea: library code must exist in more than one apps with different developers</p>
    <p>extra benefits: name recovery even some apps obfuscate their code</p>
    <p>Merkle-tree based code signature</p>
    <p>[libPecker SANER18]</p>
  </div>
  <div class="page">
    <p>Page 29</p>
    <p>Similarity Distance</p>
    <p>_ , = cos , =</p>
    <p>=1</p>
    <p>=1 A 2</p>
    <p>=1</p>
    <p>,       ,</p>
  </div>
  <div class="page">
    <p>Page 30</p>
    <p>Determine the threshold</p>
    <p>Manually labeled 1200 &lt;, &gt; pairs  1000 are used to determine threshold</p>
    <p>200 are used to test the performance</p>
    <p>ROC &amp; EER point   = 0.3134, AUC = 97.8%</p>
    <p>27% improvement in precision comparing to simple word similarity</p>
  </div>
  <div class="page">
    <p>Page 31</p>
    <p>Case 3 More details</p>
    <p>User complaints on malicious Chatous app</p>
  </div>
</Presentation>
