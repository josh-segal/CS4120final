<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TEEREX: Discovery and Exploitation of Memory</p>
    <p>Corruption Vulnerabilities in SGX Enclaves</p>
    <p>Secure Software Systems</p>
    <p>University of Duisburg-Essen, Germany</p>
    <p>Tobias Cloosters, Michael Rodler, Lucas Davi</p>
  </div>
  <div class="page">
    <p>Find memory corruption vulnerabilities specific to SGX enclaves</p>
    <p>SGX Enclave</p>
    <p>ECALL</p>
    <p>TEEREX Symbolic Execution</p>
    <p>Successfully exploited:  Code from Intel, Baidu/Apache, WolfSSL  Fingerprint Drivers</p>
    <p>Synaptics (Lenovo/HP): CVE-2019-18619  Goodix (Dell): CVE-2020-11667</p>
  </div>
  <div class="page">
    <p>Motivation: Why SGX?</p>
    <p>How to reliably protect sensitive data and code from disclosure and modification?</p>
    <p>****</p>
    <p>Passwords Intellectual Property Medical records</p>
  </div>
  <div class="page">
    <p>System Model of SGX</p>
    <p>Host application</p>
    <p>Enclave</p>
    <p>Processing untrusted data</p>
    <p>and secrets</p>
    <p>Untrusted data</p>
    <p>Secure storage for secrets</p>
    <p>Results</p>
    <p>Trust Boundary Critical point</p>
  </div>
  <div class="page">
    <p>SGX  Application Layout</p>
    <p>Application CFG</p>
    <p>start</p>
    <p>SGX</p>
    <p>Memory</p>
    <p>Secure Memory</p>
  </div>
  <div class="page">
    <p>SGX  Trusted Runtime</p>
    <p>EENTER</p>
    <p>init INT</p>
    <p>ECALL ORET</p>
    <p>EEXIT</p>
    <p>trts SGX Enclave</p>
    <p>----</p>
    <p>Memory</p>
    <p>Secure Memory</p>
  </div>
  <div class="page">
    <p>SGX  ECALL</p>
    <p>*args</p>
    <p>secure copy of *args</p>
    <p>copy output</p>
    <p>SDK</p>
    <p>SDK custom</p>
    <p>custom</p>
    <p>ECALL logic</p>
  </div>
  <div class="page">
    <p>Large attack surface</p>
    <p>Trust input data: exploitable</p>
    <p>Trust system calls: exploitable</p>
    <p>Use NULL-pointer: exploitable</p>
    <p>One corruptible byte: exploitable</p>
    <p>Trust pointers to enclave memory: exploitable</p>
    <p>Reserved (NULL)</p>
    <p>Host Application</p>
    <p>Enclave</p>
    <p>OSS ys</p>
    <p>te m</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
  </div>
  <div class="page">
    <p>Symbolic Execution Vulnerability Detection</p>
    <p>a b c</p>
    <p>*c=</p>
    <p>=*b</p>
    <p>*0</p>
    <p>a</p>
    <p>Controlled Jump  Controlled Memory Access  NULL-pointer Dereference</p>
  </div>
  <div class="page">
    <p>TeeRex Architecture</p>
    <p>Enclave Binary</p>
    <p>Preprocessor (Static Analysis)</p>
    <p>Identify ECALLs</p>
    <p>Symbolic Hooks for common</p>
    <p>Functions</p>
    <p>Exploit</p>
    <p>Vulnerability Report</p>
    <p>Controlled Pointer</p>
    <p>Symbolic Execution Trace</p>
    <p>Vuln. Instruction</p>
    <p>Vulnerability Class</p>
    <p>TEEREX Symbolic Execution</p>
    <p>Emulation of Special</p>
    <p>Instructions</p>
    <p>Pointer Tracking</p>
    <p>Symbolic Explorer (ANGR)</p>
    <p>Enclave Loader</p>
    <p>Vulnerability Detection</p>
    <p>Controlled Jumps</p>
    <p>Controlled Write</p>
    <p>NULL dereference</p>
  </div>
  <div class="page">
    <p>Exploits in Public Enclaves found with TEEREX</p>
    <p>Project Exploit Fixed Source Code</p>
    <p>Target</p>
    <p>Intel SGX GMP Example    Linux amd64</p>
    <p>Baidu Rust SGX SDK tlsclient    Linux amd64</p>
    <p>TaLoS  Not planned  Linux amd64</p>
    <p>WolfSSL Example Enclave    Linux amd64</p>
    <p>Synaptics Fingerprint Driver    Windows amd64</p>
    <p>Goodix Fingerprint Driver    Windows amd64</p>
    <p>SignalApp Contact Discovery  -  Linux amd64</p>
    <p>CVE-2019-18619</p>
    <p>CVE-2020-11667</p>
    <p>Exploit Source Code: https://github.com/uni-due-syssec/teerex-exploits</p>
  </div>
  <div class="page">
    <p>Baidu/Apache Rust SDK: tlsclient Pointers to overlapping memory</p>
    <p>APP</p>
    <p>Enclave</p>
    <p>Enclave Code</p>
    <p>return new SSLSession if sgx_is_outside_enclave(ssl)</p>
    <p>return ERROR;</p>
    <p>// use ssl session</p>
    <p>ORET Primitive Arbitrary code execution</p>
    <p>Memory MemoryEnclave Memory SSLSSL SSL</p>
    <p>v p</p>
    <p>tr</p>
    <p>SSL object is not strictly outside vtable pointer in object (outside enclave)</p>
  </div>
  <div class="page">
    <p>Limited Exploit Primitives</p>
    <p>void arbitrary_write(int* a, int b)</p>
    <p>{</p>
    <p>*a = b;</p>
    <p>}</p>
    <p>void fixed_address(int b)</p>
    <p>{</p>
    <p>global_mem = b;</p>
    <p>}</p>
    <p>void limited_value(int* a)</p>
    <p>{</p>
    <p>OR: *a = 42;</p>
    <p>*a = global_mem;</p>
    <p>}</p>
    <p>void limited_size(int* a, char b)</p>
    <p>{</p>
    <p>*(char*)a = b;</p>
    <p>}</p>
    <p>void no_user_input()</p>
    <p>{</p>
    <p>global_mem = 42;</p>
    <p>}</p>
    <p>int global_mem = 0;</p>
    <p>int* global_addr;</p>
    <p>Controlled Address Controlled Value</p>
    <p>void limited_address(int b)</p>
    <p>{</p>
    <p>*global_addr = b;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Obj* data;</p>
    <p>void ecall_init() {</p>
    <p>data = new Obj();</p>
    <p>}</p>
    <p>void ecall_process(int arg) {</p>
    <p>if (data)</p>
    <p>data-&gt;foo(arg);</p>
    <p>}</p>
    <p>void ecall_vuln(Bar* p) {</p>
    <p>if (...)</p>
    <p>p-&gt;return_value = ERROR;</p>
    <p>}</p>
    <p>Exploiting using Multiple Limited Primitives:  ecall_process trusts data</p>
    <p>In secure memory  Never leaves enclave  NULL checked</p>
    <p>Attacker can corrupt data  ecall_vuln writes a small constant to</p>
    <p>an unchecked address</p>
    <p>Changing one byte moves data to unsecure memory</p>
    <p>Combined the attacker can execute arbitrary code</p>
    <p>return_value</p>
    <p>Corrupted to point outside enclave memory</p>
    <p>Enclave loads code pointer from host-memory</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Enclave boundary is a highly critical attack surface</p>
    <p>Current development practices do not consider such vulnerabilities  Increase awareness  Automatic analysis tools needed</p>
    <p>TeeRex can automatically detect vulnerabilities!</p>
  </div>
  <div class="page">
    <p>TEEREX: Discovery and Exploitation of Memory Corruption Vulnerabilities in SGX Enclaves</p>
    <p>Secure Software Systems https://www.syssec.wiwi.uni-due.de/</p>
    <p>Tobias Cloosters, Michael Rodler, Lucas Davi tobias.cloosters@uni-due.de, michael.rodler@uni-due.de, lucas.davi@uni-due.de</p>
    <p>Exploit Source Code: https://github.com/uni-due-syssec/teerex-exploits</p>
  </div>
</Presentation>
