<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Challenges to Adopting Stronger Consistency at Scale</p>
    <p>HotOS 2015 19 May</p>
    <p>Phillipe Ajoux, Nathan Bronson, Sanjeev Kumar, Wyatt Lloyd, Kaushik Veeraraghavan</p>
  </div>
  <div class="page">
    <p>A user-visible inconsistency</p>
    <p>NOT YET ARRIVED</p>
  </div>
  <div class="page">
    <p>People should think FB runs on one computer</p>
  </div>
  <div class="page">
    <p>How can we fix inconsistencies?</p>
    <p>or</p>
    <p>(or both)</p>
  </div>
  <div class="page">
    <p>Application Data</p>
    <p>API</p>
    <p>Building a site (software engineering)</p>
  </div>
  <div class="page">
    <p>App Data</p>
    <p>App Data</p>
    <p>Scaling by sharding and replicating</p>
    <p>App Data</p>
    <p>Now with more realism! Still implementable!</p>
  </div>
  <div class="page">
    <p>Why not strengthen the data store?</p>
    <p>Will it meet our requirements?  Outlier sensitivity  latency &amp; availability  Pathological data access patterns see the paper  Low average latency needed for efficiency</p>
    <p>What about data copies?  Lots of systems store ad-hoc data copies more slides  Those systems are loosely coupled</p>
  </div>
  <div class="page">
    <p>Social graph = types nodes + edges</p>
    <p>COMMENT</p>
    <p>POST</p>
    <p>USER</p>
    <p>USER</p>
    <p>PHOTO</p>
    <p>LOCATION</p>
    <p>USER Janet</p>
    <p>USER USER</p>
    <p>USER</p>
    <p>GPS_DATA</p>
    <p>APP iPhoto</p>
    <p>AT</p>
    <p>PHOTO</p>
    <p>U P</p>
    <p>LO A</p>
    <p>D _</p>
    <p>FR O</p>
    <p>M</p>
    <p>LIKE</p>
    <p>LIKE LIKE LIKE</p>
    <p>AUTHOR</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>Communicating stateful services</p>
    <p>Graph search (Unicorn)</p>
    <p>Graph store (TAO)</p>
    <p>Master DBs</p>
    <p>News feed</p>
    <p>Edge index service</p>
    <p>Timeline</p>
    <p>Web servers</p>
  </div>
  <div class="page">
    <p>Consistency glue challenges</p>
    <p>Multiple copies of the data  Copies are materialized query results</p>
    <p>Ad-hoc query languages  Service building block is RPC call  Didnt design API as a language</p>
    <p>Loose coupling  Separate teams, different languages  Different deployment schedules, reliability goals</p>
    <p>Graph search (Unicorn)</p>
    <p>Graph store (TAO)</p>
    <p>Master DBs</p>
    <p>News feed</p>
    <p>Edge index</p>
    <p>service</p>
    <p>Timeline</p>
    <p>Web servers</p>
  </div>
  <div class="page">
    <p>Techniques from tightly-coupled databases</p>
    <p>Consistency glue  Unified analyzable query language</p>
    <p>Two phase locking</p>
    <p>Range locks, table locks</p>
    <p>Predicate locks</p>
    <p>Totally-ordered sequence numbers</p>
    <p>Foreign key constraints</p>
    <p>Linear durable log</p>
    <p>Locality  Denormalization</p>
    <p>Caching</p>
    <p>Materialized join views</p>
    <p>Secondary indices</p>
    <p>Covering indices</p>
    <p>Partial indices</p>
    <p>Stored procedures</p>
  </div>
  <div class="page">
    <p>What do I hope?</p>
    <p>Add tools for locality optimization to existing systems</p>
    <p>Make the problem topology more realistic</p>
    <p>Are there tools for end-to-end consistency?</p>
  </div>
  <div class="page"/>
</Presentation>
