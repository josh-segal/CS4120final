<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Parallel Programming for the Web</p>
    <p>Stephan Herhut, Richard L. Hudson, Tatiana Shpeisman, Jaswanth Sreeram</p>
    <p>HotPar 12, June, 7th 2012</p>
  </div>
  <div class="page">
    <p>JavaScript*  What You Need To Know</p>
    <p>It is not Java*</p>
    <p>Blend of many programming paradigms</p>
    <p>Object oriented with prototypes</p>
    <p>Higher-order functions and first class function objects</p>
    <p>Dynamically typed and interpreted</p>
    <p>Safety and security built in</p>
    <p>Requirement for web programming</p>
    <p>Managed runtime</p>
    <p>No pointers, no overflows,</p>
    <p>Designed for portability</p>
    <p>Fully abstracts hardware capabilities</p>
  </div>
  <div class="page">
    <p>Concurrency in JavaScript*</p>
    <p>Cooperative multi-tasking</p>
    <p>Scripts compete with the browser for computing resources</p>
    <p>Event driven execution model</p>
    <p>Concurrent programming mindset</p>
    <p>Asynchronous call-backs for latency hiding</p>
    <p>Fully deterministic</p>
    <p>Run-to-completion semantics</p>
    <p>No concurrent side effects</p>
    <p>No support for concurrent execution</p>
    <p>Single threaded evaluation of JavaScript</p>
  </div>
  <div class="page">
    <p>Yet Another Parallel Programming API?</p>
  </div>
  <div class="page">
    <p>Design Considerations</p>
  </div>
  <div class="page">
    <p>Language Design with the Web in Mind</p>
    <p>Build on developers existing knowledge</p>
    <p>Allow for mash-up of sequential and parallel code</p>
    <p>Meant to be a scripting language [] for the designer, the amateur programmer, the beginner programmer</p>
    <p>Brendan Eich, CTO Mozilla</p>
  </div>
  <div class="page">
    <p>Language Design with the Web in Mind</p>
    <p>Build on developers existing knowledge</p>
    <p>Allow for mash-up of sequential and parallel code</p>
    <p>Support all kinds of platforms, parallel or not</p>
    <p>Perform well on different parallel architectures (multi-core, GPUs, )</p>
    <p>Meet existing safety and security promises</p>
    <p>Needs to be reasonably easy to implement in JavaScript JIT engines</p>
    <p>Challenge: meet these criteria and get good performance</p>
  </div>
  <div class="page">
    <p>Design Choices</p>
    <p>Performance portability</p>
    <p>Use High-Level Parallel Patterns</p>
    <p>Deterministic execution model</p>
    <p>No side effects: shared state is immutable</p>
    <p>Require commutative and associative operators</p>
    <p>No magic: floating point anomalies may still occur</p>
    <p>Support mash-up coding</p>
    <p>All code still written purely in JavaScript</p>
    <p>Looks like JavaScript*, behaves like JavaScript*</p>
    <p>Maintain JavaScript*s Safety and Security</p>
    <p>Use fully managed runtime</p>
  </div>
  <div class="page">
    <p>River Trail API</p>
  </div>
  <div class="page">
    <p>Three Pillar Approach</p>
    <p>Data structure: ParallelArray</p>
    <p>Immutable, dense and homogeneous</p>
    <p>Six Methods: map, combine, reduce, scan, filter, scatter</p>
    <p>Provide the basic skeletons for parallel computing</p>
    <p>Typically creates a freshly minted ParallelArray</p>
    <p>Elemental functions (kernel functions)</p>
    <p>Written purely in JavaScript</p>
    <p>Side effect free</p>
    <p>pa = new ParallelArray([1, 2, 3, 4]);</p>
    <p>pa.map(function (v) { return v+1; })</p>
  </div>
  <div class="page">
    <p>An Example: Grayscale Conversion</p>
    <p>pixelData.map(toGrayScale)</p>
    <p>.map(function toRGBA(color) {</p>
    <p>return [color,color,color,255];</p>
    <p>}</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Prototype Implementation</p>
  </div>
  <div class="page">
    <p>Type inference  Infers array types and shapes  Checks for side effects</p>
    <p>Representation analysis  Computes bounds on local</p>
    <p>variables  Updates type information of</p>
    <p>known Integer numbers</p>
    <p>Static memory allocation</p>
    <p>Bounds check elimination</p>
    <p>Code generation  Emits OpenCL code</p>
    <p>Compiling River Trail (Prototype)</p>
    <p>JavaScript Engine</p>
  </div>
  <div class="page">
    <p>Compiling River Trail (Prototype)</p>
    <p>JavaScript Engine OpenCL Runtime Hardware</p>
    <p>multi-core</p>
    <p>CPUs</p>
    <p>SIMD</p>
    <p>instructions</p>
    <p>GPU</p>
  </div>
  <div class="page">
    <p>Performance Results: Particle Physics</p>
    <p>Particle model (O(n2)) computed using River Trail on a 2nd Generation Core i7 with 4 cores</p>
    <p>http://github.com/RiverTrail/RiverTrail/wiki</p>
    <p>F r a m</p>
    <p>e s /</p>
    <p>S e c o</p>
    <p>n d</p>
    <p># of runtime threads</p>
  </div>
  <div class="page">
    <p>Performance Results: Matrix Matrix Multiply</p>
    <p>O(n3) dense matrix matrix multiplication on 1000 x 1000 element matrices;</p>
    <p>dual-core 2nd Generation Core i5 with HyperThreading enabled and 4GB RAM;</p>
    <p>JavaScript* benchmarks use Firefox 8</p>
    <p>JavaScript seq. C seq. ParallelArray</p>
  </div>
  <div class="page">
    <p>Status Quo</p>
    <p>Open source Firefox prototype available on GitHub</p>
    <p>Pre-built binary extension for Firefox 12</p>
    <p>Sequential library fall back for other browsers</p>
    <p>ECMAScript proposal of the full API published</p>
    <p>Removes many limitations of the prototype</p>
    <p>First sequential implementation for SpiderMonkey</p>
    <p>Lives in Mozillas IonMonkey branch</p>
    <p>Intended as API testing vehicle</p>
    <p>http://github.com/RiverTrail/RiverTrail/wiki</p>
    <p>http://wiki.ecmascript.org/doku.php?id=strawm</p>
    <p>an:data_parallelism</p>
  </div>
  <div class="page"/>
</Presentation>
