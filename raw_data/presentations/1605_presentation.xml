<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RFLUSH: Rethink the Flush</p>
    <p>USENIX FAST18</p>
    <p>Jeseong Yeon1, Minseong Jeong1, Sungjin Lee2, Eunji Lee1,3</p>
  </div>
  <div class="page">
    <p>Storage Interfaces are Evolving!</p>
    <p>Standard block interface</p>
    <p>Commands over logical block address space</p>
    <p>READ, WRITE and FLUSH</p>
    <p>Abstract of a storage device allows a host to use a device in an efficient manner</p>
  </div>
  <div class="page">
    <p>Storage Interfaces are Evolving!</p>
    <p>Extend interfaces for new media</p>
    <p>Command  TRIM, Nameless Write, Remap, In-storage Copy, Atomic Update, Multi-stream SSD.</p>
    <p>Protocol  NVMe / PCI-express</p>
    <p>Architecture  Host-manageable SSD, Userprogrammable SSD</p>
  </div>
  <div class="page">
    <p>Rethink the Flush</p>
    <p>Volatile buffer in storage</p>
    <p>Absorb write and minimize seeks in HDD</p>
    <p>Improve random write performance and mask limited endurance in SSD</p>
    <p>Data loss and improper ordering in power outage</p>
    <p>FLUSH command</p>
    <p>Force all pending writes immediately</p>
    <p>Ensure persistence and proper serialization</p>
    <p>Storage Device</p>
    <p>Volatile Buffer</p>
    <p>Non-Volatile Media(flash)</p>
  </div>
  <div class="page">
    <p>Rethink the Flush</p>
    <p>Lump-sum approach</p>
    <p>(-) Slow down non-volatile materialization of the writes that need to be made durable</p>
    <p>(-) Deprive non-urgent data of an opportunity to absorb future write and coalesce in a buffer</p>
    <p>Volatile Buffer</p>
    <p>Non-Volatile Memory X5</p>
    <p>On-line banking Data Analytics</p>
    <p>FLUSH</p>
  </div>
  <div class="page">
    <p>SSD Trends</p>
    <p>FLUSH cost rises up with next-gen SSD</p>
    <p>Larger buffer to compensate for steadily increasing latencies and endurance limits</p>
    <p>512MB to 2GB</p>
    <p>Samsung 3D V-NAND 16 TB has 32GB DRAM</p>
    <p>DRAM-less SSD</p>
    <p>Use host memory (Few GBs)</p>
    <p>Limited form-factor</p>
    <p>Competitive price</p>
  </div>
  <div class="page">
    <p>Alternatives</p>
    <p>Supercapacitor</p>
    <p>Provide energy to force all dirty data in volatile buffer at power outage</p>
    <p>Non-volatile memory</p>
    <p>Volatile read cache and non-volatile write buffer</p>
    <p>Challenges</p>
    <p>Increase manufacturing cost</p>
    <p>Write endurance</p>
    <p>Limited form factor</p>
  </div>
  <div class="page">
    <p>Range Flush Primitive</p>
    <p>RFLUSH</p>
    <p>Fine-grained control over forcing buffered data</p>
    <p>Transfer a range of LBAs to persist with it</p>
    <p>(+) Speed up non-volatile materialization of target data</p>
    <p>(+) Enhance buffering and coalescing of other dirty data</p>
    <p>Volatile Buffer</p>
    <p>Non-Volatile Memory X1</p>
    <p>On-line banking Data Analytics</p>
    <p>RFLUSH(50)</p>
    <p>LBA 50 51 52 53 54</p>
  </div>
  <div class="page">
    <p>Getting Real</p>
    <p>Realizing RFLUSH is not without challenges</p>
    <p>How to implement RFLUSH?</p>
    <p>Where to use RFLUSH?</p>
    <p>How much performance gain can be achieved?</p>
    <p>Prototype Implementation</p>
    <p>RFLUSH is implemented in open-source flash development platform (BlueDBM)</p>
    <p>F2FS is modified to use RFLUSH during handling of fsync/fdatasync</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Problem and Solution</p>
    <p>Implementation</p>
    <p>Performance Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Where to Use RFLUSH</p>
    <p>How to Address the Associated Data</p>
    <p>How to Handle Metadata</p>
    <p>How to Integrate into a Storage Protocol</p>
  </div>
  <div class="page">
    <p>Where to use RFLUSH</p>
    <p>More general than FLUSH</p>
    <p>Allow fine-grained control over what to flush</p>
    <p>FLUSH usage cases</p>
    <p>E.g., Transaction commit in file system/ DB / KV-store</p>
    <p>Our Study  fsync / fdatasync</p>
    <p>No application modifications  fsync semantics are preserved</p>
    <p>Easy to determine associate data for RFLUSH</p>
    <p>Noticeable performance gains when isolating regions to flush</p>
  </div>
  <div class="page">
    <p>How to Specify Associated Data</p>
    <p>fsync</p>
    <p>Transfer LBAs of dirty pages of target file</p>
    <p>Page Cache A B C D E` F G</p>
    <p>Storage Media</p>
    <p>fsync</p>
    <p>target file Data block</p>
    <p>LBA 5 6 7</p>
    <p>RFLUSH(LBA: 5)</p>
    <p>E`</p>
  </div>
  <div class="page">
    <p>How to Specify Associated Data</p>
    <p>fsync</p>
    <p>Transfer LBAs of dirty pages - Incorrect</p>
    <p>Page Cache A B C D E` F G</p>
    <p>Storage Media</p>
    <p>fsync</p>
    <p>LBA 5 6 7</p>
    <p>RFLUSH(LBA: 5)</p>
    <p>E`</p>
    <p>Pages could have been sent to storage!</p>
    <p>If the data are missing, semantics of fsync are violated</p>
  </div>
  <div class="page">
    <p>How to Specify Associated Data</p>
    <p>fsync</p>
    <p>Transfer LBAs of dirty pages  Incorrect</p>
    <p>Transfer ALL LBAs of the file</p>
    <p>Page Cache A B C D E` F G</p>
    <p>Storage Media</p>
    <p>fsync</p>
    <p>LBA 5 6 7</p>
    <p>RFLUSH(LBA: 5-7)</p>
    <p>E`</p>
    <p>LBA of a file are likely to be adjacent</p>
  </div>
  <div class="page">
    <p>How to Specify Associated Data</p>
    <p>fsync</p>
    <p>Transfer LBAs of dirty pages  Incorrect</p>
    <p>Transfer ALL LBAs of the file  Correct, but costly</p>
    <p>Page Cache A B C D E` F G</p>
    <p>Storage Media</p>
    <p>fsync</p>
    <p>LBA 5 101 30</p>
    <p>RFLUSH(LBA: 50, 101, 30)</p>
    <p>E`</p>
    <p>Fragmentation with aging</p>
  </div>
  <div class="page">
    <p>How to Specify Associated Data</p>
    <p>fsync</p>
    <p>Transfer LBAs of dirty pages  Incorrect</p>
    <p>Transfer ALL LBAs of the file  Correct, but costly</p>
    <p>Transfer Inode number of the target file</p>
    <p>Page Cache A B C D E` F G</p>
    <p>Storage Media</p>
    <p>fsync</p>
    <p>RFLUSH(ino : 40)</p>
    <p>E`</p>
  </div>
  <div class="page">
    <p>How to Specify Associated Data</p>
    <p>Ino-based RFLUSH protocol</p>
    <p>HOST</p>
    <p>Buffer</p>
    <p>WRITE( ino : 40 ) RFLUSH( ino : 40 )</p>
    <p>C` E`</p>
    <p>Inode tag + Hash</p>
    <p>Standard SSD</p>
    <p>Buffer C` E`</p>
    <p>Storage</p>
    <p>Refer to host kernel</p>
    <p>Open-channel SSD</p>
    <p>HOST</p>
    <p>RFLUSH( ino : 40 )</p>
    <p>inode : 40 LBAs : 50-80, 100-200</p>
  </div>
  <div class="page">
    <p>How to Handle Metadata</p>
    <p>fsync</p>
    <p>Proper synchronization of dependent metadata</p>
    <p>Small and random metadata updates</p>
    <p>Encode a full range of metadata area</p>
    <p>F2FS On-storage Layout (USENIX FAST 15)</p>
  </div>
  <div class="page">
    <p>Integration into a Storage Protocol</p>
    <p>Open-channel SSD : BlueDBM</p>
    <p>Developed by MIT CSAIL</p>
    <p>SSD emulator with allocated memory</p>
    <p>File System</p>
    <p>Block I/O Layer</p>
    <p>Device Driver</p>
    <p>FTL</p>
    <p>NAND Flash</p>
    <p>FTL</p>
    <p>HOST</p>
    <p>Storage</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Problem and Solution</p>
    <p>Implementation</p>
    <p>Performance Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Linux 4.7.2</p>
    <p>Benchmark  FIO, Linkbench, TPC-C, Fileserver</p>
    <p>SSD Platform Setup</p>
  </div>
  <div class="page">
    <p>FIO Benchmark - IOPS</p>
    <p>Single synching thread : write + periodic sync</p>
    <p>Multiple non-syncing threads : write</p>
    <p>Syncing Thread Non-syncing Thread</p>
    <p>FLUSH</p>
    <p>RFLUSH</p>
    <p>FLUSH</p>
  </div>
  <div class="page">
    <p>Tail Latency</p>
    <p>Response time(FIO Benchmark)</p>
    <p>RFLUSH is critical to providing a consistent performance from a storage device</p>
    <p>Syncing Thread Non-syncing Thread</p>
    <p>RFLUSH</p>
    <p>FLUSH</p>
    <p>RFLUSH</p>
    <p>FLUSH</p>
  </div>
  <div class="page">
    <p>Write Traffic</p>
    <p>Reduce write traffic by 24% to 43%</p>
    <p>FLUSH</p>
    <p>RFLUSH</p>
  </div>
  <div class="page">
    <p>Real-world Benchmark</p>
    <p>Fileserver, Linkbench and TPC-C</p>
    <p>Measure performance when a pair is run</p>
    <p>TPC-C Linkbench</p>
    <p>Fileserver</p>
    <p>IO P</p>
    <p>S</p>
    <p>Fileserver TPC-C</p>
    <p>R e</p>
    <p>q /s</p>
    <p>Fileserver Linkbench</p>
    <p>Tp m</p>
    <p>FLUSH</p>
    <p>RFLUSH</p>
    <p>Linkbench TPC-C</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Raise the issue of the negative performance impact of a lump-sum approach to persisting buffered data within storage</p>
    <p>Present RFLUSH that allows fine-grained persistence control</p>
    <p>RFLUSH prototype is implemented in F2FS and open-channel SSD</p>
    <p>Increase IOPS up to 5.3x, reduce write traffic by 43%</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Q&amp;A</p>
  </div>
</Presentation>
