<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Real Time Network Policy Checking Using Header Space Analysis</p>
    <p>Peyman Kazemian with</p>
    <p>Michael Chang, Hongyi Zeng, George Varghese, Nick McKeown, ScoD Whyte</p>
    <p>NSDI 2013  Lombard, IL</p>
  </div>
  <div class="page">
    <p>Network debugging is hard!</p>
    <p>Forwarding state is hard to analyze!</p>
    <p>. . .</p>
    <p>Rule Rule</p>
    <p>Rule</p>
    <p>. . .</p>
    <p>Rule Rule</p>
    <p>. . .</p>
    <p>Rule Rule</p>
    <p>Rule</p>
    <p>Rule</p>
  </div>
  <div class="page">
    <p>Network debugging is hard!</p>
    <p>Forwarding state is hard to analyze! 1. Distributed across mulSple tables and boxes. 2. WriDen to network by mulSple independent</p>
    <p>writers (different protocols, network admins) 3. Presented in different formats by vendors. 4. Not directly observable or controllable.</p>
    <p>Not constructed in a way that lend itself well to checking and verificaSon.</p>
  </div>
  <div class="page">
    <p>Header Space Analysis: Snapshot-based Checking</p>
    <p>TA</p>
    <p>TB</p>
    <p>TD</p>
    <p>TC</p>
    <p>a</p>
    <p>b Can host a talk to host b?</p>
    <p>Is there any forwarding loop in the network?</p>
  </div>
  <div class="page">
    <p>Steam-based Checking</p>
    <p>+ - + -</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Steam-based Checking</p>
    <p>+ -</p>
    <p>+</p>
    <p>-</p>
    <p>?</p>
    <p>Set of Policies/Invariants</p>
    <p>Yes/No</p>
    <p>Time</p>
    <p>Prevent errors before they hit network. Report a violaSon as soon as it happens.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoSvaSons.  NetPlumber: Real Sme policy checking tool.  How it works?  How to check policy?  How to parallelize?</p>
    <p>EvaluaSon on Google WAN.  Conclusions.</p>
  </div>
  <div class="page">
    <p>NetPlumber</p>
    <p>Controller</p>
    <p>App App App App</p>
    <p>NetPlumber</p>
    <p>The System we build for real Sme policy checking is called NetPlumber.</p>
    <p>State updates</p>
    <p>Logically centralized locaSon to observe the state changes. SNMP Trap</p>
  </div>
  <div class="page">
    <p>NetPlumber</p>
    <p>The System we build for real Sme policy checking is called NetPlumber.  Creates a dependency graph of all forwarding rules in the network and uses it to verify policy.</p>
    <p>Nodes: forwarding rules in the network.  Directed Edges: next hop dependency of rules.</p>
    <p>R1 R2</p>
    <p>Switch 1 Switch 2</p>
  </div>
  <div class="page">
    <p>NetPlumber  Nodes and Edges</p>
    <p>S</p>
    <p>S</p>
  </div>
  <div class="page">
    <p>NetPlumber  Intra table dependency</p>
    <p>S</p>
    <p>S</p>
  </div>
  <div class="page">
    <p>Probe Node</p>
    <p>NetPlumber  CompuSng Reachability</p>
    <p>S</p>
    <p>S</p>
    <p>A</p>
    <p>B</p>
    <p>?</p>
    <p>Source Node</p>
  </div>
  <div class="page">
    <p>NetPlumber  CompuSng Reachability</p>
    <p>S</p>
    <p>S</p>
    <p>A</p>
    <p>B</p>
    <p>?</p>
    <p>Source Node</p>
  </div>
  <div class="page">
    <p>NetPlumber  CompuSng Reachability</p>
    <p>S</p>
    <p>S</p>
    <p>A</p>
    <p>B</p>
    <p>?</p>
    <p>Source Node</p>
    <p>-</p>
  </div>
  <div class="page">
    <p>NetPlumber  Checking Policy</p>
    <p>S</p>
    <p>S</p>
    <p>A</p>
    <p>B</p>
    <p>?</p>
    <p>Source Node</p>
    <p>Policy: packets go through RED box.</p>
  </div>
  <div class="page">
    <p>NetPlumber  Checking Policy</p>
    <p>S</p>
    <p>S</p>
    <p>A</p>
    <p>B</p>
    <p>?</p>
    <p>Source Node</p>
    <p>Policy: packets go through RED box.</p>
  </div>
  <div class="page">
    <p>Checking Policy with NetPlumber</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>. . . .</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>Policy: Guests can not access Server S.</p>
    <p>S</p>
    <p>?</p>
    <p>G1</p>
    <p>G2</p>
  </div>
  <div class="page">
    <p>Checking Policy with NetPlumber</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>. . . .</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>Policy: hDp traffic from client C to server S doesnt go through more than 4 hops.</p>
    <p>C</p>
    <p>?</p>
    <p>S</p>
    <p>HTTP</p>
  </div>
  <div class="page">
    <p>Checking Policy with NetPlumber</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>. . . .</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>Policy: traffic from client C to server S should go through middle box M.</p>
    <p>C</p>
    <p>?</p>
    <p>S</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Why the dependency graph helps</p>
    <p>Incremental update.  Only have to trace through dependency sub-graph affected by an update.</p>
    <p>Flexible policy expression.  Probe and source nodes are flexible to place and configure.</p>
    <p>ParallelizaSon.  Can parSSon dependency graph into clusters to minimize inter-cluster dependences.</p>
  </div>
  <div class="page">
    <p>Distributed NetPlumber</p>
    <p>S</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Dependency Graph Clustering</p>
    <p>S</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>?</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoSvaSons.  NetPlumber: Real Sme policy checking tool  How it works?  How to check policy?  How to parallelize?</p>
    <p>EvaluaSon on Google WAN.  Conclusions.</p>
  </div>
  <div class="page">
    <p>Experiment On Google WAN</p>
    <p>Google Inter-datacenter WAN.  Largest deployed SDN, running OpenFlow.  ~143,000 OF rules.</p>
  </div>
  <div class="page">
    <p>Experiment On Google WAN  Policy check: all 52 edge</p>
    <p>switches can talk to each other.</p>
    <p>More than 2500 pairwise reachability check.</p>
    <p>Used two snapshots taken 6 weeks apart.</p>
    <p>Used the first snapshot to create iniSal NetPlumber state and used the diff as a sequenSal update.</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Experiment On Google WAN</p>
    <p>Run Time of NetPlumber (ms)</p>
    <p>F( x)</p>
    <p>Single instance 2 instances 3 instances 4 instances 5 instances</p>
    <p>Default/Aggregate Rules.</p>
    <p>Not much more benefit!</p>
    <p>Run Sme with Hassel &gt; 100s</p>
  </div>
  <div class="page">
    <p>Benchmarking Experiment</p>
    <p>For a single pairwise reachability check.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Designed a protocol-independent system for real Sme network policy checking.</p>
    <p>Key component: dependency graph of forwarding rule, capturing all flow paths.  Incremental update.  Flexible policy expressions.  ParallelizaSon by clustering.</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
</Presentation>
