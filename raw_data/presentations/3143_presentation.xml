<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Securing Embedded User Interfaces: Android and Beyond</p>
    <p>Franziska Roesner and Tadayoshi Kohno University of Washington</p>
  </div>
  <div class="page">
    <p>Embedded User Interfaces</p>
    <p>Embedded third-party UIs are common on websites and in smartphone apps.</p>
    <p>On the Web: via iframes</p>
    <p>&lt;iframe src=&quot;https:// maps.google.com/...&gt; &lt;/iframe&gt;!</p>
  </div>
  <div class="page">
    <p>Embedded User Interfaces</p>
    <p>Embedded third-party UIs are common on websites and in smartphone apps.</p>
    <p>On Android: include library code</p>
  </div>
  <div class="page">
    <p>Security and Embedding</p>
    <p>Browsers provide secure isolation between an embedding page and embedded content.</p>
    <p>Android does not.  Third-party libraries run in apps context.  No true cross-application UI embedding.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>The Case for Secure UI in Android  Design &amp; Implementation: LayerCake  Evaluation  Functionality case studies  Performance</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>The Case for Secure UI in Android  Design &amp; Implementation: LayerCake  Evaluation  Functionality case studies  Performance</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Security Concerns on Android</p>
    <p>Both the parent and the child may be malicious.</p>
    <p>Parent</p>
    <p>Child</p>
    <p>Parent</p>
    <p>Child</p>
    <p>UI Layout Tree</p>
  </div>
  <div class="page">
    <p>Security Concerns: Malicious Child</p>
    <p>Example: Screen takeover (or redirection)</p>
    <p>Like us on Facebook!</p>
    <p>! ! ! !</p>
    <p>View parent = adView.getParent();! parent.removeChildren();!</p>
    <p>parent.addChild(fullScreenAd);!</p>
    <p>Ad Library Code</p>
    <p>Code in the same context can access all UI elements.</p>
    <p>Frame Layout</p>
    <p>AdView</p>
    <p>MapView</p>
    <p>LikeView</p>
    <p>FullScreenAd</p>
  </div>
  <div class="page">
    <p>Security Concerns: Malicious Parent</p>
    <p>Example: Input Eavesdropping and Blocking</p>
    <p>Input events propagate down the UI layout tree, through potentially untrusted nodes.</p>
    <p>Frame Layout</p>
    <p>TextView</p>
    <p>WebView</p>
    <p>password</p>
    <p>********</p>
  </div>
  <div class="page">
    <p>Many Security Concerns</p>
    <p>Malicious parents and children can both perform: Data theft, Display forgery, Focus stealing,</p>
    <p>Programmatic input forgery Additionally, a malicious parent can perform:</p>
    <p>Input eavesdropping, Input DoS, Size manipulation, Clickjacking</p>
    <p>Additionally, a malicious child can perform: Ancestor redirection</p>
  </div>
  <div class="page">
    <p>This Work</p>
    <p>Many (though not all) of these attacks are impossible with iframes on the Web.</p>
    <p>Most of these attacks are possible on Android.  Existing approaches [AdDroid: Pearce et al., AdSplit:</p>
    <p>Shekhar et al.] only target ad scenario.  Our prior work [UIST 12] considered secure UI</p>
    <p>embedding in theory.</p>
    <p>What does it take to implement secure third-party embedding on Android?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>The Case for Secure UI in Android  Design &amp; Implementation: LayerCake  Evaluation  Functionality case studies  Performance</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Secure UI Embedding for Android</p>
    <p>LayerCake is a modified version of Android 4.2 (Jelly Bean) that securely supports embedded applications.</p>
    <p>Location Gadget</p>
    <p>MapView</p>
    <p>AdView</p>
  </div>
  <div class="page">
    <p>Android Background</p>
    <p>Activity: A page of an applications UI.  Only one Activity in the foreground at a time.</p>
    <p>Activity consists of tree of UI elements (Views).</p>
    <p>Activity drawn in a Window.  Contains one View tree.</p>
    <p>Button (View)</p>
  </div>
  <div class="page">
    <p>Supporting Embedded Activities</p>
    <p>Goal: Allow an Activity in one application to securely embed an Activity from another app.</p>
    <p>ParentActivity</p>
    <p>AdActivity</p>
    <p>Requires pervasive changes to ActivityManager and WindowManager.</p>
  </div>
  <div class="page">
    <p>(1) Separate Processes</p>
    <p>Allow developers to embed Activities from other applications (iframes for Android).</p>
    <p>ParentActivity</p>
    <p>AdActivity</p>
    <p>Challenges:  Developer API (EmbeddedActivityView)</p>
    <p>Multiple running Activities  Parent-child communication</p>
    <p>Separating code into processes prevents direct UI manipulation.</p>
  </div>
  <div class="page">
    <p>Separate Processes Not Sufficient</p>
    <p>ParentActivity</p>
    <p>AdActivity</p>
    <p>How does LayerCake actually embed cross-application UI?</p>
    <p>WindowManager</p>
    <p>Relative Layout</p>
    <p>Frame Layout</p>
    <p>()</p>
    <p>() Embedded ActivityView (AdActivity)</p>
    <p>app window</p>
    <p>user input</p>
  </div>
  <div class="page">
    <p>(2) Separate Windows</p>
    <p>ParentActivity</p>
    <p>AdActivity</p>
    <p>Visually overlay separate windows, dont nest UI trees.</p>
    <p>WindowManager</p>
    <p>Relative Layout</p>
    <p>Frame Layout</p>
    <p>() () Embedded ActivityView (AdActivity)</p>
    <p>parent window child window</p>
    <p>Visually overlay child window on parent window.</p>
    <p>Separating UI trees prevents input eavesdropping and DoS attacks.</p>
  </div>
  <div class="page">
    <p>Overlaying: Practical Challenges</p>
    <p>Layout changes must be automatically propagated across processes.</p>
    <p>Cropping is needed to make overlaying look like embedding.</p>
  </div>
  <div class="page">
    <p>(3) Additional Security: Handling Size Conflicts</p>
    <p>Threat: What if the parent makes the child too small? (e.g., camera preview)</p>
    <p>Observation: Enforcing a minimum size provides no additional security on its own: attacker can mimic effect by scrolling or obstructing. 20</p>
    <p>ParentActivity</p>
    <p>(1 pixel X 1 pixel camera preview)</p>
  </div>
  <div class="page">
    <p>Threat: Trick user into clicking on an embedded element that is visually obscured.</p>
    <p>Embedded Activities can request to NOT receive user input events if they are:</p>
    <p>(3) Additional Security: Preventing Clickjacking</p>
    <p>(Additional clickjacking protection: e.g., InContext: Huang et al.)</p>
  </div>
  <div class="page">
    <p>(3) Additional Security: Preventing Ancestor Redirection</p>
    <p>Threat: What if a malicious child tries to open a new top-level Activity?</p>
    <p>Note: Opening another embedded Activity (in its place) is ok.</p>
    <p>On attempt to open top-level Activity:  Prompt user, or  Allow automatically if in response to user click ( user intent)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>The Case for Secure UI in Android  Design &amp; Implementation: LayerCake  Evaluation  Functionality case studies  Performance</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Functionality Case Studies</p>
    <p>Not (securely) possible on stock Android; enabled by LayerCake:</p>
    <p>Advertising</p>
    <p>Facebook Widgets Secure WebView</p>
    <p>User-Driven Access Control [Oakland 12]</p>
    <p>Apply to top-level redirection.</p>
  </div>
  <div class="page">
    <p>Legacy Applications</p>
    <p>Applications dont require modification to be embedded.</p>
  </div>
  <div class="page">
    <p>Performance Evaluation: Activity Load Time</p>
    <p>Application Load time (10 trial average) No Embedding Embedding*</p>
    <p>RestaurantReviewer 163 ms 533 ms FacebookDemo 158 ms 305 ms Listen&amp;Shop 160 ms 303 ms</p>
    <p>* Note that load time for parent Activity is unaffected.</p>
  </div>
  <div class="page">
    <p>Performance Evaluation: Event Dispatch</p>
    <p>Scenario Event Dispatch Time (10 trial average)</p>
    <p>Stock Android 1.9 ms No focus change 2.1 ms Focus change 3.6 ms</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>The Case for Secure UI in Android  Design &amp; Implementation: LayerCake  Evaluation  Functionality case studies  Performance</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>LayerCake: Artifact resulting from systematic application of secure embedded UI concepts.</p>
    <p>Code: http://layercake.cs.washington.edu</p>
    <p>Lessons Learned:  Visually overlay windows, dont nest UI trees.  Size manipulation, scroll placement, and</p>
    <p>obstruction must be considered together.  Ancestor redirection can follow user intent.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Embedded third-party UIs pose security concerns, unaddressed on Android.</p>
    <p>LayerCake: modified version of Android that securely supports application embedding.</p>
    <p>See me for demo!</p>
    <p>http://layercake.cs.washington.edu</p>
  </div>
</Presentation>
