<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimizing Every Operation in a Write-Optimized File System</p>
    <p>Jun Yuan, Yang Zhan, William Jannen, Prashant Pandey, Amogh Akshintala, Kanchan Chandnani, Pooja Deo, Zardosht Kasheff, Leif Walsh, Michael Bender,</p>
    <p>Martin Farach-Colton, Rob Johnson, Bradley C. Kuszmaul, Donald E. Porter</p>
    <p>Stony Brook University, Facebook, Two Sigma, Rutgers University, Massachusetts Institute of Technology</p>
  </div>
  <div class="page">
    <p>Need to perform well on many operations:</p>
    <p>Sequential reads  Sequential writes  Random writes  File/directory renames  File deletes  Recursive scans  Metadata updates</p>
    <p>BetrFS goal: High-performance, general-purpose file system</p>
  </div>
  <div class="page">
    <p>Some operations seem to require a trade-off</p>
    <p>sequential reads</p>
    <p>random writes</p>
    <p>directory scans</p>
    <p>renames</p>
    <p>update-in-place log structured</p>
    <p>inodes full-path indexing</p>
    <p>No trade-off Be t r FS</p>
  </div>
  <div class="page">
    <p>Full-path indexing yields fast directory scans</p>
    <p>Example: grep -r key /home/rob/doc/</p>
    <p>Disk (physical)Directory Tree (logical)</p>
    <p>/home/rob/doc /home/rob/doc/latex /home/rob/doc/latex/a.tex /home/rob/doc/latex/b.tex /home/rob/doc/bar.c /home/rob/local</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>h o</p>
    <p>m e</p>
    <p>ro b</p>
    <p>lo ca</p>
    <p>l 2 .jp</p>
    <p>g</p>
    <p>videodo c</p>
    <p>la te</p>
    <p>x 1.m p 4</p>
    <p>a. te</p>
    <p>x b.tex bar.c</p>
    <p>disk head</p>
  </div>
  <div class="page">
    <p>h o</p>
    <p>m e</p>
    <p>ro b</p>
    <p>lo ca</p>
    <p>l 2 .jp</p>
    <p>g</p>
    <p>videodo c</p>
    <p>la te</p>
    <p>x 1.m p 4</p>
    <p>a. te</p>
    <p>x b.tex bar.c</p>
    <p>Rename is expensive when using full-path indexing</p>
    <p>/home/rob/doc</p>
    <p>/home/rob/doc/bar.c /home/rob/local</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Example: mv /home/rob/doc/latex /home/rob</p>
    <p>/home/rob/latex/a.tex /home/rob/latex/b.tex</p>
    <p>/home/rob/latex</p>
    <p>/home/rob/doc/latex/b.tex /home/rob/doc/latex/a.tex</p>
    <p>Disk (physical)Directory Tree (logical)</p>
    <p>/home/rob/doc/latex</p>
    <p>la te</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>This trade-off affects real performance</p>
    <p>Lower is better</p>
    <p>BetrFS and ext4 represent different trade-offs between directory scan and rename performance</p>
    <p>Lower is better</p>
    <p>scans</p>
    <p>Ext4 uses inodes  BetrFS uses full-path indexing</p>
    <p>Orders of magnitude</p>
    <p>slower renames</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Zoning: a technique for fast renames + scans  Other contributions (sketch)  Evaluation</p>
  </div>
  <div class="page">
    <p>The tension between fast rename and fast scanZoning: balancing indirection and locality</p>
    <p>Scan cost</p>
    <p>Rename cost</p>
    <p>Indirection LocalityZones</p>
  </div>
  <div class="page">
    <p>Implication: Recursive directory scans only perform seeks when</p>
    <p>crossing zones</p>
    <p>BetrFS v0.2 rethinking the schema</p>
    <p>Partition file system into zones</p>
    <p>Use full-path indexing within zones</p>
    <p>Use inodes between zones</p>
    <p>Zone: a subtree of the directory hierarchy</p>
    <p>h o m</p>
    <p>e ro</p>
    <p>b lo</p>
    <p>ca l</p>
    <p>g</p>
    <p>videodo c</p>
    <p>p 4l</p>
    <p>at ex</p>
    <p>a. te</p>
    <p>x b.tex bar.c</p>
    <p>Zone 1 Zone 2Zone 0</p>
  </div>
  <div class="page">
    <p>BetrFS v0.2 rethinking the schema Moving the root of a zone is cheap</p>
    <p>h o m</p>
    <p>e ro</p>
    <p>b lo</p>
    <p>ca l</p>
    <p>g</p>
    <p>videodo c</p>
    <p>p 4la</p>
    <p>te x</p>
    <p>a. te</p>
    <p>x b.tex bar.c</p>
    <p>Zone 1 Zone 2</p>
    <p>Example: mv /home/rob/video/1.mp4 /home/rob/doc</p>
    <p>Zone 0</p>
  </div>
  <div class="page">
    <p>BetrFS v0.2 rethinking the schema</p>
    <p>h o m</p>
    <p>e ro</p>
    <p>b lo</p>
    <p>ca l</p>
    <p>g</p>
    <p>videodo c</p>
    <p>la te</p>
    <p>x</p>
    <p>a. te</p>
    <p>x b.tex bar.c</p>
    <p>Zone 1 Zone 2</p>
    <p>Example: mv /home/rob/doc/latex /home/rob/latex</p>
    <p>Zone 0</p>
    <p>Renaming a subtree of a zone requires copying</p>
    <p>la te</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>BetrFS v0.2 rethinking the schema</p>
    <p>h o m</p>
    <p>e ro</p>
    <p>b lo</p>
    <p>ca l</p>
    <p>g</p>
    <p>videodo c</p>
    <p>a. te</p>
    <p>x b.tex</p>
    <p>bar.c</p>
    <p>Zone 1 Zone 2</p>
    <p>Zone 0</p>
    <p>Managing zone sizes</p>
    <p>la te</p>
    <p>x</p>
    <p>Large zones  fast directory scans Small zones  fast renames</p>
    <p>We can keep zone sizes in a sweet spot by splitting large zones and merging small zones</p>
  </div>
  <div class="page">
    <p>How big should zones be?</p>
    <p>BetrFS-0.2 uses 512KB zones to balance rename and scan performance</p>
    <p>Cost of renaming root of a zone</p>
    <p>Cost of renaming via copy</p>
  </div>
  <div class="page">
    <p>Other contributions</p>
  </div>
  <div class="page">
    <p>Late-binding journal</p>
    <p>Fast sequential writes with full data journaling</p>
    <p>See paper for details</p>
    <p>Sequential write</p>
  </div>
  <div class="page">
    <p>Rangecast delete</p>
    <p>Linear in size of file</p>
    <p>Constant latency, about 30% faster than ext4</p>
    <p>File delete</p>
  </div>
  <div class="page">
    <p>Is BetrFS still fast at other operations?</p>
  </div>
  <div class="page">
    <p>BetrFS still performs random writes orders of magnitude faster than</p>
    <p>other file systems</p>
    <p>BetrFS still has metadata updates almost 100x</p>
    <p>faster than ext4</p>
    <p>Zone splits</p>
  </div>
  <div class="page">
    <p>What about real application performance?</p>
  </div>
  <div class="page">
    <p>git clone git diff</p>
    <p>Macrobenchmark: git</p>
    <p>Performance comparable to other file systems Recursive scan performance</p>
    <p>pays off in real applications</p>
  </div>
  <div class="page">
    <p>Macrobenchmark: dovecot imap maildir workload</p>
    <p>Payoff of improved delete and rename performance</p>
  </div>
  <div class="page">
    <p>Conclusion  A write-optimized file system can be general purpose</p>
    <p>Write optimization is not a trade-off</p>
    <p>BetrFS has strong performance across many operations  And across many applications</p>
    <p>Opportunity to re-examine file system trade-offs in light of new data structures</p>
    <p>Code available at betrfs.org</p>
  </div>
  <div class="page">
    <p>SSD performance preview</p>
    <p>Still work to do</p>
  </div>
</Presentation>
