<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Characterizing, Modeling, and Benchmarking RocksDB Key-Value Workloads at Facebook</p>
    <p>Zhichao Cao1,2, Siying Dong2 , Sagar Vemuri2, and David H.C. Du1</p>
  </div>
  <div class="page">
    <p>Key-Value Stores are Widely Used</p>
    <p>SQL Database Transactions File system Object storage ML services Storage services</p>
  </div>
  <div class="page">
    <p>Key-Value Store is a Hot Research Area</p>
    <p>VLDB SIGMOD OSDI/SOSP FAST ATC</p>
    <p>The number of key-value store related papers appearing in some of the conferences</p>
  </div>
  <div class="page">
    <p>However...  Key-value workloads in different applications are very different. But there are very limited</p>
    <p>studies of real-world workload characterization and analysis for different applications that using key-value stores.</p>
    <p>The analytic methods for characterizing KV-store workloads are different from the existing workload characterization. How to capture, characterize, and model the workloads of KV store in different applications are challenging?</p>
    <p>Based on the real-world workloads, whats the limitations of existing key-value benchmarks (e.g., query similarity or storage I/Os)? How to further improve the benchmarks?</p>
  </div>
  <div class="page">
    <p>Methodology and Tool Set  Methodology: collect workloads-&gt; analyze workloads-&gt;model the workloads</p>
    <p>-&gt; compare and improve benchmarks-&gt; tune and improve key-value stores  Tools: trace collector, trace replayer, trace analyzer, benchmarks</p>
  </div>
  <div class="page">
    <p>Modeling</p>
    <p>Trace Collector</p>
    <p>Trace files</p>
    <p>Workload characteristics</p>
    <p>Benchmarking</p>
    <p>Trace Analyzer</p>
    <p>Trace Replayer</p>
    <p>Production Workloads</p>
    <p>from Different Applications</p>
    <p>RocksDB Compare &amp;</p>
    <p>Analyze</p>
    <p>Tune or improve</p>
    <p>Adjust or improve</p>
    <p>Generate</p>
  </div>
  <div class="page">
    <p>Background  RocksDB introductions  Three RocksDB applications: 1) UDB, 2) ZippyDB, and 3) UP2X</p>
  </div>
  <div class="page">
    <p>RocksDB Preliminary</p>
    <p>MemtableImmutableMemtable</p>
    <p>SST SST</p>
    <p>SST SST SST</p>
    <p>SST SST</p>
    <p>Level 0</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Column Family X Column Family Y</p>
    <p>MemtableImmutableMemtable</p>
    <p>SST SST</p>
    <p>SST SST</p>
    <p>SST SST</p>
    <p>Block Cache</p>
    <p>Manifest</p>
    <p>Write Ahead Log</p>
    <p>Shared Data</p>
    <p>Flush Flush Memory</p>
    <p>Persistent Storage</p>
    <p>SST</p>
    <p>compaction compaction</p>
  </div>
  <div class="page">
    <p>Use Case 1: UDB Social Graph Related</p>
    <p>Applications</p>
    <p>MySQL</p>
    <p>RocksDB</p>
    <p>File System</p>
    <p>SSD</p>
    <p>SQL/Connections RocksDB Key RocksDB Value</p>
    <p>RocksDB Key RocksDB Value</p>
    <p>Table Index Number Primary Key Columns Checksum</p>
    <p>Table Index Number Secondary Key Primary Key Checksum</p>
    <p>Primary key indexed raw mapping to a RocksDB KV-pair</p>
    <p>Secondary key indexed raw mapping to a RocksDB KV-pair</p>
    <p>MyRocks</p>
    <p>Graph data: Objects and associations</p>
  </div>
  <div class="page">
    <p>Use Case 2: ZippyDB</p>
    <p>Secondary</p>
    <p>RocksDB</p>
    <p>Primary</p>
    <p>RocksDB</p>
    <p>Secondary</p>
    <p>RocksDB</p>
    <p>Secondary</p>
    <p>RocksDB . Primary</p>
    <p>RocksDB</p>
    <p>ZippyDB Data Management Service</p>
    <p>Application 1 Application 2 .Application 3 ObjStorageMetadata Service</p>
  </div>
  <div class="page">
    <p>Use Case 3: UP2X</p>
    <p>RocksDB RocksDB RocksDB.</p>
    <p>UP2X Merge Get Put</p>
    <p>User Profile Updates Different ML/AI services data reads</p>
    <p>RocksDB</p>
  </div>
  <div class="page">
    <p>Workload Characterization for Three RocksDB Production Use cases  24 hours to 14 days traces.  Query composition  Key and value size statistics and distributions  KV-pair hotness and access count distributions  Query per second (QPS)  Hot key distributions in key-space  Key-space and temporal localities  ..</p>
  </div>
  <div class="page">
    <p>Query composition can be very different in different applications and even in different CFs in the same DB.  Get is the most frequently used query type in UDB and ZippyDB, while Merge dominates the queries in UP2X.  Query composition can be very different in different CFs in UDB</p>
    <p>Ge t</p>
    <p>Pu t</p>
    <p>De let e</p>
    <p>Si ng leD ele te</p>
    <p>Ite rat or</p>
    <p>M erg e</p>
    <p>UDB ZippyDB UP2X</p>
    <p>Ob jec</p>
    <p>t</p>
    <p>Ob jec</p>
    <p>t_2 ry</p>
    <p>As so</p>
    <p>c</p>
    <p>As so</p>
    <p>c_ 2ry</p>
    <p>As so</p>
    <p>c_ co</p>
    <p>un t</p>
    <p>No n_</p>
    <p>SG</p>
    <p>Q ue</p>
    <p>ri es</p>
    <p>(m ill</p>
    <p>io n)</p>
    <p>Get Put Delete Single_delete Iterator_Seek Iterator_SeekForPrev</p>
    <p>Key-Value Query Composition</p>
  </div>
  <div class="page">
    <p>The standard deviation of key sizes is relatively small, while the standard deviation of value size is large.</p>
    <p>The average value size of UDB is larger than the other two.</p>
    <p>Key and Value Size Statistics</p>
  </div>
  <div class="page">
    <p>Key size is closely related to the way of key compositions in upper layer applications  key sizes are usually small and have a narrow distribution  The key size distributions in different CFs and in different query types are different.</p>
    <p>Key size distribution of UDB Key size distribution of ZippyDB Key size distribution of UP2X</p>
    <p>Key Size Distributions in Three Use Cases</p>
  </div>
  <div class="page">
    <p>Value size distribution is wider than key size distribution  value sizes are closely related to the types of data being stored by different applications</p>
    <p>Value size distribution of UDB Value size distribution of ZippyDB Value size distribution of UP2X</p>
    <p>Value Size Distributions in Three Use Cases</p>
  </div>
  <div class="page">
    <p>The daily QPS variations of UDB are related to social network behaviors.  The QPS of some CFs in UDB have strong diurnal patterns, while we can observe only</p>
    <p>slight QPS variations during day and night time in ZippyDB and UP2X.</p>
    <p>QPS of different query types and different column families in UDB during 14-day period</p>
    <p>Query Per Second (QPS)</p>
  </div>
  <div class="page">
    <p>The access count distributions are very different in different applications and CFs  In UDB, only a very small portion of KV-pairs are hot and most KV-pairs are cold.  The access count distributions are different even in different CFs.</p>
    <p>Access count distribution of Get in UDB Access count distribution of Put in UDB</p>
    <p>KV-pair Hotness and Access Count Distributions</p>
  </div>
  <div class="page">
    <p>Access count distribution ZippyDB Access count distribution of UP2X</p>
    <p>KV-pair Hotness and Access Count Distributions  The access count distributions are very different in different applications and CFs  In ZippyDB, only a very small portion of KV-pairs are hot and the access count</p>
    <p>distributions of different query types are different  UP2X has a wider distribution especially for Get and Merge.</p>
  </div>
  <div class="page">
    <p>The heat-maps of the three use cases show a strong key-space locality.</p>
    <p>Hot KV-pairs are not evenly distributed in the key-space. Instead, they are closely located in the key-space.</p>
    <p>ZippyDB</p>
    <p>UP2X</p>
    <p>Column Family Object of UDB</p>
    <p>Note: 1) Keys are first sorted the same as they are in the database, and assigned with a integer as key sequence number. 2) Y-axis is the access count of a KV-pair during 24-hour period. 3) Red line is the separation of MySQL tables.</p>
    <p>Access Heat-map</p>
  </div>
  <div class="page">
    <p>Time series figure of KV-pairs accessed by Merge in UP2X</p>
    <p>Note: 1) X-axis is the key sequence number which is the same as that in heatmap, 2) Y-axis is time starting and starts at the time when tracing begins, and 3) Red line is the separation of MySQL tables.</p>
    <p>The time series figures of Delete and SingleDelete for UDB and Merge for UP2X show strong temporal locality.</p>
    <p>For some query types, KV-pairs in some key-ranges are intensively accessed during a short period of time.</p>
    <p>Key-Space and Temporal Localities</p>
  </div>
  <div class="page">
    <p>Modeling and Benchmarking  After we have the detailed characteristics of real workload, we can compare the</p>
    <p>benchmarking results with the real-world workloads to explore its effectiveness.</p>
    <p>If the existing benchmark has limitations, the new workload modeling can be done with the help from workload characteristics. We can further improve the existing benchmarks or develop new benchmarks based on the new models.</p>
  </div>
  <div class="page">
    <p>Investigate the Backend Storage I/Os  YCSB can generate queries that have similar</p>
    <p>statistics for a given query type ratio, KV-pair hotness distribution, and value size distribution as those in realistic workloads.</p>
    <p>However, it is unclear whether their generated workloads can match the I/Os of underlying storage systems in realistic workloads.</p>
    <p>We focus on: block reads (block_read), block cache hits (block_cache_hit), bytes being read (read_bytes), and bytes being written (write_bytes).</p>
    <p>YCSB</p>
    <p>RocksDB</p>
    <p>File System</p>
    <p>SSD</p>
    <p>KV queries</p>
    <p>Data block reads/writes</p>
  </div>
  <div class="page">
    <p>Generate</p>
    <p>Tune or improve</p>
    <p>Modeling</p>
    <p>Trace Collector</p>
    <p>Trace files</p>
    <p>Workload characteristics</p>
    <p>Benchmarking</p>
    <p>Trace Analyzer</p>
    <p>Trace Replayer</p>
    <p>Production Workloads</p>
    <p>RocksDB Compare &amp;</p>
    <p>Analyze</p>
    <p>Adjust or improve</p>
  </div>
  <div class="page">
    <p>Replay of ZippyDB vs. Fitted YCSB</p>
    <p>block_read block_cache_hit read_bytes write_bytes</p>
    <p># tim es of re pl ay re su lts</p>
    <p>Uniform Zipfian Hotspot Exponential</p>
    <p>Replay</p>
    <p>Read more  write less</p>
  </div>
  <div class="page">
    <p>Problem and Solution  The hot KV-pairs are actually randomly</p>
    <p>distributed in the whole key-space  Due to the cache space limit, a large</p>
    <p>number of hot data blocks that consist of the requested KV-pairs will not be cached, which triggers an extremely large number of block reads.</p>
    <p>Instead of only modeling the overall KV-pair hotness, we cut the whole key space into small key-ranges and models the hotness of these keyranges.</p>
    <p>In each key-range, KV-pairs follow the overall hotness distributions.</p>
    <p>Build the new benchmark based on key-range based modeling</p>
    <p>Heatmap changes to</p>
  </div>
  <div class="page">
    <p>New Benchmark vs. YCSB  All_random: KV-pairs are randomly</p>
    <p>distributed  All_dist: hot KV-pairs are allocated</p>
    <p>together  Prefix_random: KV-pairs are allocated to</p>
    <p>different key-ranges based on key-range hotness. KV-pairs in a key-range are randomly distributed.</p>
    <p>Prefix_dist: KV-pairs are allocated to different key-ranges and hot KV-pairs in a key-range are allocated close by</p>
    <p>Al l_r</p>
    <p>an do</p>
    <p>m</p>
    <p>Al l_d</p>
    <p>ist</p>
    <p>Pr efi</p>
    <p>x_ ran</p>
    <p>do m</p>
    <p>Pr efi</p>
    <p>x_ dis</p>
    <p>t</p>
    <p>YC SB</p>
    <p>_ra nd</p>
    <p>om</p>
    <p>YC SB</p>
    <p>_z ipf</p>
    <p>ian</p>
    <p>YC SB</p>
    <p>_h ots</p>
    <p>po t</p>
    <p>YC SB</p>
    <p>_e xp</p>
    <p>N or</p>
    <p>m oa</p>
    <p>liz ed</p>
    <p>S ta</p>
    <p>tis tic</p>
    <p>R es</p>
    <p>ul ts</p>
    <p>Block_read Block_cache_hit Read_bytes Write_bytes</p>
  </div>
  <div class="page">
    <p>Conclusion and Future Work</p>
  </div>
  <div class="page">
    <p>We introduce the key-value workload analyzing, modeling, and benchmarking methodologies. The tools are open-sourced and people can use them to extend the exploration to more applications</p>
    <p>With the help of tracing, replaying, and analyzing tools, we characterized key-value workloads of three typical RocksDB production use cases at Facebook. The findings of key/value size distribution, access patterns, key-range localities, and workload variations provide insights that can help optimize KV-store performance.</p>
    <p>We propose a key-range based model to better preserve key-space localities. The new benchmark not only provides a good emulation of workloads at the query level, but also achieves more precise RocksDB storage I/Os than that of YCSB.</p>
    <p>In the future, we will continue improve YCSB such as key-range based distribution and QPS variation. Also, we will extend the workload characterization to other dimensions such as the correlations between queries, the correlation between KV-pair hotness and KV-pair sizes.</p>
  </div>
  <div class="page">
    <p>A fast and easy to use persistent key-value store for any workload on any hardware platform.</p>
    <p>Future of RocksDB</p>
    <p>Efficiency Easy To Use Performance</p>
    <p>https://github.com/facebook/rocksdb</p>
  </div>
  <div class="page">
    <p>Thank You! Q&amp;A</p>
  </div>
  <div class="page"/>
</Presentation>
