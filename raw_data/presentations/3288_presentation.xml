<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien Octeau, and Sebastian Weisgerber</p>
    <p>USENIX Security Symposium</p>
    <p>Austin, August 12th, 2016</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Motivation</p>
    <p>Application framework internals still largely a black box</p>
    <p>How do internals influence platform security and user-privacy</p>
    <p>Every security analysis requires a solid foundation</p>
    <p>How to analyze the target in the first place?</p>
    <p>Any platform-specific peculiarities</p>
    <p>that impede a static analysis?</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Motivation</p>
    <p>Lot of work established such knowledge for apps</p>
    <p>Entry points (Chex, FlowDroid)</p>
    <p>Generation of a static runtime model (FlowDroid, R-Droid, Epicc)</p>
    <p>Sources/sinks (SuSi)</p>
    <p>Yet, such a knowledge base is missing for the</p>
    <p>application framework</p>
    <p>System services provide core functionality</p>
    <p>Existing knowledge from app analysis can not be transferred</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Contributions</p>
    <p>Systematic methodology on how to statically analyze</p>
    <p>the application framework</p>
    <p>How to enumerate framework entry points</p>
    <p>How to generate a precise static runtime model</p>
    <p>Re-Visiting permission specification analysis</p>
    <p>More precise permission mappings for SDK / framework</p>
    <p>Study internals of Androids permission system</p>
    <p>How to classify sensitive operations guarded by permission checks</p>
    <p>Where are permissions checked?</p>
  </div>
  <div class="page">
    <p>How to analyze the framework</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Analysis Ingredients</p>
    <p>How to enumerate framework entry points?</p>
    <p>How to generate a static model that approximates runtime behavior?</p>
    <p>What are the sensitive sinks within the framework?</p>
    <p>#1</p>
    <p>#2</p>
    <p>#3</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Framework Entry Points (#1)</p>
    <p>What functionality is exposed to app layer?</p>
    <p>Key observation: Functionality only exposed via Binder-IPC</p>
    <p>Entry class enumeration via class hierarchy analysis</p>
    <p>IInterface</p>
    <p>AIDL-IF Non-AIDL-IF</p>
    <p>Proxy Stub Native</p>
    <p>Service AMS</p>
    <p>Proxy</p>
    <p>extends extends</p>
    <p>extendsextends</p>
    <p>implements implements implements implements</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Static Runtime Model (#2)</p>
    <p>Framework services follow the principle of separation of duty</p>
    <p>Highly responsive to process simultaneous queries from</p>
    <p>multiple clients (apps)</p>
    <p>Various concurrency pattern that complicate static analysis</p>
    <p>Handler</p>
    <p>AsyncChannel (framework only)</p>
    <p>StateMachines (framework only)</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Static Runtime Model - Handler</p>
    <p>Many services have a dedicated handler to process messages in a</p>
    <p>separate thread</p>
    <p>public void enable() { Message msg = mHandler.obtainMessage(MESSAGE_ENABLE) mHandler.sendMessage(msg);</p>
    <p>}</p>
    <p>class BluetoothHandler extends Handler { public void handleMessage(Message msg) {</p>
    <p>switch (msg.what) { case MESSAGE_ENABLE: // do_enable case MESSAGE_DISABLE: // do_disable // other cases</p>
    <p>}}}</p>
    <p>Runtime</p>
    <p>type Message</p>
    <p>code</p>
    <p>Path</p>
    <p>sensitivity</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Protected Resources (#3)</p>
    <p>Concept of sources/sinks a list of APIs is no longer applicable</p>
    <p>Analysis now shifts into the framework API</p>
    <p>How do we classify sensitive functionality?</p>
    <p>Consider permission checks as guards of sensitive operations</p>
    <p>Protected resources are security-sensitive operations</p>
    <p>that have a tangible side-effect on</p>
    <p>the system state or</p>
    <p>use of privacy</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Taxonomy of Protected Resource Types</p>
    <p>Protected resource</p>
    <p>Method invocation</p>
    <p>Field update</p>
    <p>Return value</p>
    <p>Throw instruction</p>
    <p>Native method</p>
    <p>invocation</p>
    <p>Broadcast sender</p>
    <p>Throw</p>
    <p>RuntimeException</p>
    <p>No ground truth so far, thus we manually investigated 35 entry</p>
    <p>points from different services</p>
    <p>Diversity of operations forced us to create higher-level classification</p>
    <p>on operation types</p>
  </div>
  <div class="page">
    <p>Use-Case: Permission Analysis</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>More Effort = Better Results?</p>
    <p>Generating precise graphs requires a lot of resources</p>
    <p>Do we perform better than existing work?</p>
    <p>Re-visit Android permission mappings!</p>
    <p>Why? Still, one of the major security mechansim</p>
    <p>Important for app developers &amp; security research</p>
    <p>Compare with state-of-the-art tool PScout (API 16)</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Android Permission Mappings - Framework</p>
    <p>Permission checks</p>
    <p>Data-flow</p>
    <p>Framework / undocumented map</p>
    <p>Framework entry point List of required permissions</p>
    <p>com.android.phone.PhoneInterfaceManager.getDeviceId() android.permission.READ_PHONE_STATE</p>
    <p>Map framework entry points</p>
    <p>to required permissions</p>
    <p>Approach: Forward</p>
    <p>control-flow slicing</p>
    <p>String analysis to resolve</p>
    <p>permission strings</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Framework API Mapping</p>
    <p># m</p>
    <p>a p p</p>
    <p>in g s</p>
    <p>axplorer PScout</p>
    <p># of API to permission mappings</p>
    <p>PScout includes normal + dangerous permissions</p>
    <p>axplorer additionally includes system + systemOrSignatures</p>
    <p>permissions</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Framework API Mapping</p>
    <p># m</p>
    <p>a p p</p>
    <p>in g s</p>
    <p>axplorer PScout</p>
    <p>Less false mappings</p>
    <p>Reduced over-approximation</p>
    <p>through more precise call-graphs</p>
    <p>Entrypoint definition ensures</p>
    <p>valid mappings</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Android Permission Mappings - SDK</p>
    <p>SDK Permission checks</p>
    <p>IPC Data-flow</p>
    <p>Framework / undocumented map</p>
    <p>SDK / documented map</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>SDK Mapping (1)</p>
    <p>Number of permissions required by documented APIs</p>
    <p>axplorer (total: 352)</p>
    <p>PScout (total: 469)</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>SDK Mapping (1)</p>
    <p>axplorer (total: 352)</p>
    <p>PScout (total: 469)</p>
    <p>Connecting SDK to framework</p>
    <p>eliminates false-mappings</p>
    <p>Mappings with non-entry methods</p>
    <p>are ruled out</p>
    <p>Path-sensitivity in Handler</p>
    <p>eliminates outliers</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>SDK Mapping (2)</p>
    <p>ACCESS_COARSE_LOCATION</p>
    <p>ACCESS_FINE_LOCATION</p>
    <p>WAKE_LOCK</p>
    <p>BLUETOOTH</p>
    <p>BROADCAST_STICKY</p>
    <p>SET_WALLPAPER</p>
    <p>NFC</p>
    <p>axplorer</p>
    <p>PScout</p>
    <p>Number of documented APIs that require a specific permission</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>SDK Mapping (2)</p>
    <p>ACCESS_COARSE_LOCATION</p>
    <p>ACCESS_FINE_LOCATION</p>
    <p>WAKE_LOCK</p>
    <p>BLUETOOTH</p>
    <p>BROADCAST_STICKY</p>
    <p>SET_WALLPAPER</p>
    <p>NFC</p>
    <p>axplorer</p>
    <p>PScout</p>
    <p>Manually validated the top 4</p>
    <p>permissions</p>
    <p>Differences due to SDK analysis</p>
    <p>Context class difficult to get right</p>
    <p>(&gt;100 direct and indirect subclasses)</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Permission Locality</p>
    <p>Services follow the principle of separation of duty</p>
    <p>How are permission checks distributed?</p>
    <p>Across API versions ~20% of permissions are checked</p>
    <p>in &gt;1 class and at most in 10 classes</p>
    <p>This equally affects all protection levels (dangerous, system,..)</p>
    <p>There is a trend towards more checks in more classes</p>
    <p>in newer Android versions</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Permission Locality</p>
    <p>Locality measured in terms of number of distinct classes that</p>
    <p>check a given permission</p>
    <p>High permission locality</p>
    <p>Permission is checked/enforced at a single service</p>
    <p>SET_WALLPAPER is only enforced at WallpaperManagerService</p>
    <p>Low permission locality</p>
    <p>Permission is enforced at different (possibly unrelated) services</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Low Permission Locality</p>
    <p>Framework API 16 (4.1.1)</p>
    <p>Permission: READ_PHONE_STATE</p>
    <p>Level: dangerous</p>
    <p>internal.telephony. PhoneSubInfo</p>
    <p>phone. PhoneInterfaceManager</p>
    <p>server. TelephonyRegistry</p>
    <p>server.net. NetworkPolicyManagerService</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>internal.telephony. PhoneSubInfoProxy</p>
    <p>Framework API 22 (5.1)</p>
    <p>Permission: READ_PHONE_STATE</p>
    <p>Level: dangerous</p>
    <p>Low Permission Locality</p>
    <p>internal.telephony. PhoneSubInfoProxy</p>
    <p>phone. PhoneInterfaceManager</p>
    <p>server. TelephonyRegistry</p>
    <p>server.net. NetworkPolicyManagerService</p>
    <p>internal.telephony. SubscriptionController</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Permission Locality</p>
    <p>Locality steadily decreases between new Android versions</p>
    <p>Impedes understanding the big picture of Android permissions</p>
    <p>Single enforcement point for permissions?</p>
    <p>Facilitates policy generation for access control frameworks (ASM/ASF)</p>
    <p>How to establish?</p>
    <p>Identify owning class/service for each permission</p>
    <p>Dedicated permission check method that is exposed via IInterface</p>
  </div>
  <div class="page">
    <p>Erik Derr - USENIX Sec 2016 - On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis</p>
    <p>Conclusion</p>
    <p>Comprehensive and systematic methodology on how to analyze</p>
    <p>Androids application framework</p>
    <p>First high-level classification of protected resource types</p>
    <p>Re-Visited permission analysis</p>
    <p>Improved on prior results of SDK / framework mappings</p>
    <p>Permission locality improves understanding of permission system</p>
    <p>Check out www.axplorer.org</p>
  </div>
</Presentation>
