<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Deukyeon Hwang UNIST</p>
    <p>Wook-Hee Kim UNIST</p>
    <p>Youjip Won Hanyang Univ.</p>
    <p>Beomseok Nam UNIST</p>
  </div>
  <div class="page">
    <p>Fast but Asymmetric</p>
    <p>Access Latency Non-Volatility Byte-Addressability Large Capacity</p>
  </div>
  <div class="page">
    <p>CPU Caches (Volatile) Persistent Memory (Non-Volatile)</p>
    <p>cache line</p>
  </div>
  <div class="page">
    <p>CPU Caches (Volatile) Persistent Memory (Non-Volatile)</p>
    <p>cache line</p>
  </div>
  <div class="page">
    <p>CPU Caches (Volatile) Persistent Memory (Non-Volatile)</p>
    <p>cache line</p>
  </div>
  <div class="page">
    <p>CPU Caches (Volatile) Persistent Memory (Non-Volatile)</p>
    <p>FLUSH</p>
    <p>cache line</p>
  </div>
  <div class="page">
    <p>CPU Caches (Volatile) Persistent Memory (Non-Volatile)</p>
    <p>cache line</p>
  </div>
  <div class="page">
    <p>CPU Caches (Volatile) Persistent Memory (Non-Volatile)</p>
    <p>LOST 40!</p>
    <p>cache line</p>
  </div>
  <div class="page">
    <p>Inserting 25 into a node</p>
    <p>(0)</p>
    <p>(1) Partially updated tree node is inconsistent</p>
    <p>Append-Only Update</p>
    <p>(2)</p>
    <p>(3)</p>
  </div>
  <div class="page">
    <p>P4 P6</p>
    <p>Node B</p>
    <p>Logging  Selective Persistence (Internal node in DRAM)</p>
    <p>Node Split</p>
    <p>P1 P2 P3</p>
    <p>Node A</p>
  </div>
  <div class="page">
    <p>Append-Only  Unsorted keys</p>
    <p>Selective Persistence  Internal node  DRAM  Internal nodes have to be reconstructed from leaf nodes after failures  Logging for leaf nodes</p>
    <p>Previous solutions</p>
    <p>NV-Tree [FAST15] Append-Only leaf update + Selective Persistence</p>
    <p>wB+-Tree [VLDB15] Append-Only node update + bitmap/slot array metadata</p>
    <p>FP-Tree [SIGMOD16] Append-Only leaf update + fingerprints + Selective Persistence</p>
  </div>
  <div class="page">
    <p>Selective Persistence (DRAM + PM)</p>
    <p>Append-Only (Unsorted keys)</p>
    <p>Lock-Free Search</p>
    <p>Failure-Atomic ShifT (FAST)</p>
    <p>Failure-Atomic In-place Rebalancing</p>
    <p>(FAIR)</p>
  </div>
  <div class="page">
    <p>Modern processors reorder instructions to utilize the memory bandwidth  Memory ordering in x86 and ARM</p>
    <p>x86 guarantees Total Store Ordering (TSO)  Dependent instructions are not reordered</p>
    <p>x86 ARM stores-after-stores Y N stores-after-loads N N loads-after-stores N N loads-after-loads N N Inst. w/ dependency Y Y</p>
  </div>
  <div class="page">
    <p>Pointers in B+-Tree store unique memory addresses  8-byte pointer can be atomically updated</p>
    <p>Read transactions detect transient inconsistency between duplicate pointers</p>
    <p>transient inconsistency  In-flight state partially updated by a write transaction</p>
    <p>P1 P2 P3 P4 P5 P5</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>mfence();mfence(); TSO</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Read transactions can succeed in finding a key even if a system crashes in any step</p>
    <p>Insert (25, P6) into a node using FAST</p>
    <p>g: Garbage : Null</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>g</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>g</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>g</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>g</p>
    <p>Key 40 between duplicate pointers is ignored!</p>
    <p>Insert (25, P6) into a node using FAST read transaction</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P4 P5</p>
    <p>g</p>
    <p>Shifting P4 invalidates the left 40</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P4 P5</p>
    <p>g</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P3 P4 P5</p>
    <p>g</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P3 P4 P5</p>
    <p>g</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P6 P4 P5</p>
    <p>g</p>
    <p>Storing P6 validates 25</p>
    <p>Insert (25, P6) into a node using FAST</p>
  </div>
  <div class="page">
    <p>It is necessary to call clflush at the boundary of cache line</p>
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Cache Line 1 Cache Line 2</p>
    <p>P1 P2 P3 P3 P4 P5</p>
    <p>g</p>
    <p>Cache Line 1 Cache Line 2</p>
    <p>mfence() clflush( ) mfence()</p>
    <p>Cache Line 2</p>
  </div>
  <div class="page">
    <p>Lets avoid expensive logging</p>
    <p>by making read transactions be aware of rebalancing operations</p>
    <p>Blink-Tree</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P6</p>
    <p>Node A</p>
    <p>A read transaction can detect transient inconsistency if keys are out of order</p>
    <p>FAIR split a node</p>
    <p>P4 P6</p>
    <p>Node B</p>
  </div>
  <div class="page">
    <p>P1 P2 P3</p>
    <p>P4 P6</p>
    <p>Node BNode A</p>
    <p>Setting NULL pointer validates Node B. Node A and Node B are virtually a single node</p>
    <p>FAIR split a node</p>
  </div>
  <div class="page">
    <p>P1 P2 P3</p>
    <p>P4 P6</p>
    <p>Node BNode A</p>
    <p>Migrated keys can be accessed via sibling pointer</p>
    <p>FAIR split a node</p>
  </div>
  <div class="page">
    <p>P1 P2 P3</p>
    <p>P4 P6</p>
    <p>Node BNode A 60</p>
    <p>P5</p>
    <p>FAIR split a node</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C3 C3</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C2 C3</p>
    <p>Node B can be accessed from Node A</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C2 C3</p>
    <p>Node B can be accessed from Node A</p>
    <p>Searching the key 50 from the root after a system crash</p>
    <p>key accessed by read transaction</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C2 C3</p>
    <p>Node B can be accessed from Node A</p>
    <p>Searching the key 50 from the root after a system crash</p>
    <p>key accessed by read transaction</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C2 C3</p>
    <p>Node B can be accessed from Node A</p>
    <p>Searching the key 50 from the root after a system crash</p>
    <p>key accessed by read transaction</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C2 C3</p>
    <p>Node B can be accessed from Node A</p>
    <p>Searching the key 50 from the root after a system crash</p>
    <p>key accessed by read transaction</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>root</p>
    <p>C2 C4 C3</p>
    <p>FAST inserting makes Node B visible atomically</p>
    <p>Insert a key into the parent node using FAST after FAIR split</p>
  </div>
  <div class="page">
    <p>Read transactions can tolerate any inconsistency caused by write transactions</p>
    <p>Read transactions can access the transient inconsistent tree node being modified by a write transaction</p>
    <p>Lock-Free Search</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>[Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P5 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P4 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P4 P4 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P3 P4 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P3 P3 P4 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transaction [Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>P1 P2 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Read transaction</p>
    <p>Write transactionFOUND!</p>
    <p>[Example 1] Searching 30 while inserting (15, P6)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction [Example 2] Searching 30 while deleting (20, P2)</p>
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P3 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P3 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>read</p>
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P3 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>read</p>
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P3 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>read</p>
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P3 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P4 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P4 P4 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P4 P5 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P4 P5 P5</p>
    <p>g</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Read transaction</p>
    <p>Write transaction</p>
    <p>P1 P3 P4 P5 P5</p>
    <p>g</p>
    <p>The read transaction cannot find the key 30 due to shift operation</p>
    <p>[Example 2] Searching 30 while deleting (20, P2)</p>
    <p>read</p>
    <p>shift</p>
  </div>
  <div class="page">
    <p>Direction flag:  Even Number</p>
    <p>Insertion shifts to the right.  Search must scan from Left to Right</p>
    <p>shift</p>
    <p>read</p>
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Odd Number  Deletion shifts to the left.  Search must scan from Right to Left</p>
    <p>counter 2</p>
    <p>Search 40</p>
    <p>Insert 25</p>
  </div>
  <div class="page">
    <p>Direction flag:  Even Number</p>
    <p>Insertion shifts to the right.  Search must scan from Left to Right</p>
    <p>shift</p>
    <p>read</p>
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Odd Number  Deletion shifts to the left.  Search must scan from Right to Left</p>
    <p>counter 3</p>
    <p>Search 40</p>
    <p>Delete 25</p>
  </div>
  <div class="page">
    <p>Direction flag:  Even Number</p>
    <p>Insertion shifts to the right.  Search must scan from Left to Right</p>
    <p>shift</p>
    <p>P1 P2 P3 P4 P5</p>
    <p>g</p>
    <p>Odd Number  Deletion shifts to the left.  Search must scan from Right to Left</p>
    <p>counter 2</p>
    <p>Search 40 read</p>
    <p>Delete 25</p>
    <p>The read transaction has to check the counter once again to make sure the counter has not changed. Otherwise, search the node again.</p>
  </div>
  <div class="page">
    <p>Transaction A Transaction B</p>
    <p>The ordering of Transaction A and Transaction B cannot be determined</p>
    <p>BEGIN INSERT 10 SUSPENDED</p>
    <p>WAKE UP</p>
    <p>ABORT</p>
    <p>BEGIN SEARCH 10(FOUND) COMMIT</p>
    <p>Dirty reads problem</p>
  </div>
  <div class="page">
    <p>Our Lock-Free Search supports low isolation level</p>
    <p>Highest</p>
    <p>Lowest</p>
    <p>Isolation Level</p>
    <p>Serializable</p>
    <p>Repeatable reads</p>
    <p>Read committed</p>
    <p>Read uncommitted</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>For higher isolation level, read lock is necessary for leaf nodes</p>
    <p>Leaf</p>
    <p>Root</p>
    <p>Lock-Free Search</p>
    <p>High</p>
    <p>Low</p>
    <p>Lock Contention</p>
  </div>
  <div class="page">
    <p>Xeon Haswell-Ex E7-4809 v3 processors  2.0 GHz, 16 vCPUs with hyper-threading enabled, and 20 MB L3 cache  Total Store Ordering (TSO) is guaranteed</p>
    <p>g++ 4.8.2 with -O3  PM latency  Read latency</p>
    <p>A DRAM-based PM latency emulator, Quartz  Write latency</p>
    <p>Injecting delay</p>
  </div>
  <div class="page">
    <p>Sorted keys, cache locality, and memory level parallelism  up to 20X speed up</p>
  </div>
  <div class="page">
    <p>FAST+FAIR FP-Tree  wB+-Tree  WORT  Skiplist</p>
  </div>
  <div class="page">
    <p>FAST+Logging uses logging instead of FAIR when splitting a node</p>
    <p>WORT, FAST+FAIR, FP-Tree  FAST+Logging  wB+-Tree  Skiplist</p>
    <p>clflush: I/O time  Search: Tree traversal time  Node Update: Computation</p>
    <p>time</p>
  </div>
  <div class="page">
    <p>New Order</p>
    <p>Paymen t</p>
    <p>Order Status</p>
    <p>Delivery Stock Level</p>
    <p>W1 34% 43% 5% 4% 14%</p>
    <p>W2 27% 43% 15% 4% 11%</p>
    <p>W3 20% 43% 25% 4% 8%</p>
    <p>W4 13% 43% 35% 4% 5%</p>
    <p>FAST+FAIR consistently outperforms other indexes because of its good insertion performance and superior range query performance</p>
    <p>Specification of TPCC workloads More Range Queries</p>
  </div>
  <div class="page">
    <p>(a) 50M Search (b) 50M Insertion (c) 200M Search / 50M Insertion / 12.5M Deletion</p>
    <p>Lock-free search with FAST+FAIR shows high scalability and performance  FAST+FAIR+LeafLock shows comparable scalability and provides high</p>
    <p>concurrency level</p>
  </div>
  <div class="page">
    <p>We designed a byte addressable persistent B+-Tree that  stores keys in order  avoids expensive logging</p>
    <p>FAST and FAIR always transform B+-Trees into consistent/transient inconsistent B+-Trees</p>
    <p>Lock-Free search  By tolerating transient inconsistency</p>
  </div>
  <div class="page">
    <p>Deukyeon Hwang UNIST</p>
    <p>Wook-Hee Kim UNIST</p>
    <p>Youjip Won Hanyang Univ.</p>
    <p>Beomseok Nam UNIST</p>
  </div>
  <div class="page">
    <p>To guarantee the order of instructions, the dmb instruction is used for FAST+FAIR</p>
    <p>Although there is an overhead by dmb, FAST+FAIR is less affected by latency</p>
  </div>
</Presentation>
