<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Multipath Protocol for Delay-Sensitive Traffic</p>
    <p>Jennifer Rexford Princeton University</p>
    <p>Joint work with Umar Javed, Martin Suchara, and Jiayue He</p>
    <p>http://www.cs.princeton.edu/~jrex/papers/comsnets09.p df</p>
  </div>
  <div class="page">
    <p>Clean-Slate Network Architecture</p>
    <p>Network architecture  More than designing a single protocol  Definition and placement of function</p>
    <p>Clean-slate design  Without the constraints of todays artifacts  To have a stronger intellectual foundation  And move beyond the incremental fixes</p>
    <p>But, how do we do clean-slate design?</p>
  </div>
  <div class="page">
    <p>Protocols as Distributed Optimizers</p>
    <p>Example: TCP congestion control  Additive increase, multiplicative decrease  Implicitly maximizes aggregate utility  TCP variants have different utility functions</p>
    <p>Optimization for forward engineering  Start with a central optimization problem  Decompose to divide the computation   among the sources and the links</p>
    <p>Research by Frank Kelly, Steven Low, Mung Chiang, and others</p>
  </div>
  <div class="page">
    <p>Our Focus: Delay-Sensitive Traffic</p>
    <p>Interactive applications  Voice over IP (VoIP)  Online gaming  IP television</p>
    <p>Path-selection goals  Paths with low propagation delay   as long as paths are not overloaded</p>
    <p>For now, assume the network carries only delay-sensitive traffic</p>
  </div>
  <div class="page">
    <p>Strawman: Min Propagation Delay</p>
    <p>Operator: Sets weights to propagation delay</p>
    <p>Routers: Link-state routing</p>
    <p>But links may become congested, causing packet loss and delay</p>
  </div>
  <div class="page">
    <p>Our Goal: Adaptive Load Balancing</p>
    <p>Distributed protocol that automatically minimizes delay</p>
    <p>Division of functionality  Links: feedback on network conditions  Edge routers: balance load over paths</p>
  </div>
  <div class="page">
    <p>Multiple Paths With Flexible Splitting</p>
    <p>Multiple paths between edge nodes  Paths with low propagation delay</p>
    <p>Flexible traffic-splitting ratio  Traffic rate xi for src-dest pair i  Traffic rate zij over path j</p>
    <p>z1 1</p>
    <p>z2 1z3</p>
    <p>x1 = z 1</p>
  </div>
  <div class="page">
    <p>Objective: Minimize Average Delay</p>
    <p>Minimize average delay  End-to-end delay on each path  Weighted by the traffic on the path</p>
    <p>Delay for link l  Propagation delay pl  Congestion penalty f(load on link l)</p>
    <p>Delay for link l: pl + f()Summed: i j l z i j R</p>
    <p>i lj (pl +</p>
    <p>f()) Weighted: zij R</p>
    <p>i lj (pl + f())</p>
  </div>
  <div class="page">
    <p>Constraints</p>
    <p>Carry the offered load for each source</p>
    <p>j zij = xi  Avoid overloading each link</p>
    <p>i j zij Rilj  cl  Carry non-negative traffic on each path</p>
    <p>0  zij</p>
  </div>
  <div class="page">
    <p>Optimization Decomposition</p>
    <p>Deriving source and link algorithms  Prices: penalties for violating a constraint  Path rates: updates driven by prices</p>
    <p>Example: TCP congestion control  Link prices: packet loss or delay  Source rates: AIMD based on prices</p>
    <p>Our problem is more complicated  More complex objective, multiple paths</p>
  </div>
  <div class="page">
    <p>Capacity constraint</p>
    <p>Subgradient feedback price update:</p>
    <p>Stepsize controls the granularity of reaction</p>
    <p>Link computes price  as feedback to sources</p>
    <p>Example Decomposition: Link Capacity</p>
    <p>l(t+1) = [l(t) + stepsize*(link load  cl )]</p>
    <p>+</p>
    <p>link load  cl</p>
    <p>Source does similar update for carry all offered load constraint.</p>
  </div>
  <div class="page">
    <p>Path Rate Updates</p>
    <p>Each source i does a local optimization  To update the path rates zij</p>
    <p>Based on  The prices of violating constraints   and the objective function</p>
    <p>Closed-form expression  With piecewise-linear queuing function f()  See the paper for the exact equation</p>
    <p>Derived by taking the Lagrangian and applying KKT conditions.</p>
  </div>
  <div class="page">
    <p>Distributed Multipath Protocol</p>
    <p>Edge node: Update path rates z Split traffic over paths</p>
    <p>Operator: Select function f Tune step sizes</p>
    <p>Routers: Set up multiple paths Measure link load Update link prices</p>
  </div>
  <div class="page">
    <p>Optimality and stability  Provably optimal  Provably converges for diminishing step sizes</p>
    <p>Practical limitations  Must have well-chosen step sizes   to achieve fast convergence</p>
    <p>Matlab experiments to sweep parameters  Good heuristics for setting (constant) step</p>
    <p>sizes</p>
    <p>Theoretical Results</p>
  </div>
  <div class="page">
    <p>Converting to Packet-Level Protocol</p>
    <p>Packets rather than fluid  Links compute load over a time interval  Counting the sizes of the packets</p>
    <p>Feedback delay of round-trip time  Multiple paths have different RTTs  Path rate updates once per max of RTTs</p>
    <p>Implemented in ns-2 simulator  For more realistic evaluation</p>
  </div>
  <div class="page">
    <p>Comparison With Shortest-Path Routing</p>
    <p>Shortest-path routing  Link weights equal propagation delay</p>
    <p>Under low load  The two protocols behave the same way</p>
    <p>Under higher load  Our protocol gradually shifts traffic   to longer paths to avoid overload   while keeping end-to-end delay small</p>
  </div>
  <div class="page">
    <p>Convergence Under Dynamic Traffic</p>
  </div>
  <div class="page">
    <p>Multiple Classes of Traffic</p>
    <p>Satisfying multiple traffic classes  Delay-sensitive: VoIP and gaming  Throughput-sensitive: file transfers</p>
    <p>Running separate virtual networks  Customized protocol for each traffic class  Dynamic update to bandwidth shares  Provably maximizes aggregate performance</p>
    <p>Derived using optimization theory</p>
    <p>http://www.cs.princeton.edu/~jrex/papers/davinci.pdf</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Delay-sensitive applications  VoIP, online gaming, IPTV</p>
    <p>Customized routing protocol  Load balancing over multiple paths  Minimizing end-to-end delay</p>
    <p>Optimization decomposition  Rigorous way to design new protocols  With provable optimality and stability</p>
    <p>Ongoing work: network virtualization</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Protocol Dynamics</p>
    <p>Good heuristics for setting step size  Converges quickly under range of settings</p>
    <p>Relatively fast convergence  Small tens of seconds in worst case  Better under more realistic settings</p>
    <p>Quick response to changes in load  Fast adaptation to new traffic demands</p>
  </div>
</Presentation>
