<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provable Security: How feasible is it? Gerwin Klein, Toby Murray,</p>
    <p>Peter Gammie, Thomas Sewell and Simon Winwood</p>
    <p>Thursday, 5 May 2011</p>
  </div>
  <div class="page">
    <p>In Short</p>
    <p>Very feasible  For certain systems and security properties  But feasible does not mean easy</p>
    <p>Lets stop being lame, and start doing  real proofs of  real security properties of  real code of  real systems</p>
  </div>
  <div class="page">
    <p>Real proofs</p>
    <p>Are not done with pen and paper  Are machine-checked  Turn up unexpected things you didnt know</p>
    <p>about your system or property  When the proof fails  Usually, in the more</p>
    <p>complicated parts of the API</p>
  </div>
  <div class="page">
    <p>Real security properties</p>
    <p>Are not absence of buffer-overflows etc.  (these should be trivially implied)</p>
    <p>Are specific to the purpose of each system  Are properties of whole systems</p>
    <p>Include high-level security goals, like:  Integrity, Confidentiality</p>
    <p>Reflect the complexities of real systems  e.g. authority encoded in non-cap state in seL4</p>
  </div>
  <div class="page">
    <p>Real Code</p>
    <p>Is not a high-level logic or language  Is C or assembler</p>
    <p>Is written to be run, not to be proved  Often trades-off clarity for performance</p>
    <p>Can be reasoned about via abstraction  But you have to prove the abstraction is sound</p>
    <p>Specification</p>
    <p>(25 py)</p>
    <p>C Code</p>
    <p>Property</p>
    <p>(1 py)</p>
    <p>Thursday, 5 May 2011</p>
  </div>
  <div class="page">
    <p>Real Systems</p>
    <p>Are deployed in the wild  Are big (&gt; MLOC)  Are the imperfect results of balancing</p>
    <p>many (competing) tadeoffs  Performance, security, usability, simplicity</p>
    <p>Contain design- and implementation-quirks  Inevitably reflected in proofs and properties  May not adhere to textbook security defns</p>
    <p>Require real security properties</p>
  </div>
  <div class="page">
    <p>Example: seL4 Enforces Integrity</p>
    <p>Machine-checked proof (~10,000 LOC)  took 12 person-months (atop 30 py FC proof)</p>
    <p>2-part security property of the seL4 kernel:  write-authority enforcement, and  authority-propagation</p>
    <p>Applies to the kernels source code  Reflects the curiosities of the seL4 API</p>
    <p>Is a general property about the kernel  not yet fully applied to a specific system</p>
  </div>
  <div class="page">
    <p>The Immediate Horizon</p>
    <p>Security Properties  Integrity  Confidentiality excluding timing channels (e.g.</p>
    <p>untimed noninterference)  Systems</p>
    <p>MILS architectures with few, small (~10,000 LOC each) trusted components,</p>
    <p>built atop small, proven kernels</p>
    <p>Hardware Kernel</p>
    <p>Components</p>
    <p>Thursday, 5 May 2011</p>
  </div>
  <div class="page">
    <p>What Is Still Too Hard</p>
    <p>Proving the absence of timing channels  Requires very detailed model of hardware  Likely infeasible on high-performance,</p>
    <p>commodity hardware  Will have to live with mitigation only, or use</p>
    <p>custom hardware that allows OS to carefully control timing effects</p>
    <p>Systems with large trusted components  Linux, Windows</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Real kernels need real security properties  Now feasible to prove for small kernels</p>
    <p>And carefully architected whole-systems  Not all properties are feasible</p>
    <p>e.g. absence of timing channels  But this is still a huge step forward</p>
    <p>Security-critical systems demand real proofs of their code  Not only necessary, but now feasible at</p>
    <p>reasonable cost</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Thursday, 5 May 2011</p>
  </div>
</Presentation>
