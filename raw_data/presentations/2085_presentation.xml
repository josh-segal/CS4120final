<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NUMA-Friendly Stack (using Delegation and Elimination)</p>
    <p>Irina Calciu</p>
    <p>Justin Gottschlich</p>
    <p>Maurice Herlihy</p>
    <p>HotPar 13</p>
  </div>
  <div class="page">
    <p>Trends for Future Architectures</p>
  </div>
  <div class="page">
    <p>Uniform Memory Access (UMA)</p>
  </div>
  <div class="page">
    <p>Non-Uniform Memory Access (NUMA)</p>
    <p>(interconnect)</p>
    <p>NUMA NODE (multiple cores, shared Last Level Cache)</p>
    <p>NUMA NODE (multiple cores, shared Last Level Cache)</p>
    <p>NUMA NODE (multiple cores, shared Last Level Cache)</p>
    <p>NUMA NODE (multiple cores, shared Last Level Cache)</p>
    <p>Cache coherency maintained between caches on different NUMA nodes</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Motivation</p>
    <p>Algorithms</p>
    <p>Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Delegation</p>
    <p>NUMA node 0 NUMA node 1</p>
    <p>Clients Clients</p>
    <p>SEQ STACK</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Delegation</p>
    <p>NUMA node 0 NUMA node 1</p>
    <p>Server</p>
    <p>Client 5</p>
    <p>Client 6</p>
    <p>Client 7</p>
    <p>Client 8</p>
    <p>Slots Client 1 Client 2</p>
    <p>Client 3 Client 4</p>
    <p>Slots</p>
    <p>Loops through all slots</p>
    <p>SEQ STACK</p>
  </div>
  <div class="page">
    <p>Elimination, Rendezvous</p>
  </div>
  <div class="page">
    <p>Local Rendezvous</p>
    <p>NUMA node 0 NUMA node 1</p>
    <p>STACK</p>
  </div>
  <div class="page">
    <p>Delegation + Elimination</p>
    <p>NUMA node 0 NUMA node 1</p>
    <p>Clients Clients</p>
    <p>SEQ STACK</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Delegation + LOCAL Elimination</p>
    <p>NUMA node 0 NUMA node 1</p>
    <p>Clients</p>
    <p>Clients</p>
    <p>SEQ STACK</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Effect of Elimination</p>
    <p>Throughput (Better)</p>
  </div>
  <div class="page">
    <p>Effect of Delegation</p>
    <p>Throughput (Better)</p>
  </div>
  <div class="page">
    <p>Number of Slots</p>
    <p>Throughput (Better)</p>
  </div>
  <div class="page">
    <p>Workloads: Balanced vs. Unbalanced</p>
    <p>Throughput (Better)</p>
  </div>
  <div class="page">
    <p>Advantages</p>
    <p>Memory and cache locality</p>
    <p>Reduced bus traffic</p>
    <p>Increased parallelism through elimination</p>
  </div>
  <div class="page">
    <p>Drawbacks</p>
    <p>Communication cost between clients and server thread</p>
    <p>o Insignificant compared to the benefits</p>
    <p>Serializing otherwise parallel data structures</p>
    <p>o Parallelism through elimination</p>
    <p>Elimination opportunities decrease as workload more unbalanced</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>Are there other data structures where we can use delegation and elimination?</p>
    <p>Are there data structures where direct access is much better?</p>
    <p>What can we do for those data structures?</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>A Scalable Lock-free Stack Algorithm http://www.inf.ufsc.br/~dovicchi/pos-ed/pos/artigos/p206hendler.pdf</p>
    <p>Flat Combining and the Synchronization-Parallelism Tradeoff http://www.cs.bgu.ac.il/~hendlerd/papers/flat-combining.pdf</p>
    <p>Fast and Scalable Rendezvousing http://www.cs.tau.ac.il/~afek/rendezvous.pdf</p>
  </div>
  <div class="page">
    <p>Cache to Cache Traffic</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>Coefficient of Variation</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>Flat Combining</p>
  </div>
  <div class="page">
    <p>Delegation</p>
    <p>CLIENT Find corresponding slot (by NUMA node and cpuid) Post message Wait for response Get response</p>
    <p>SERVER Loop through all slots: If slot has message:</p>
    <p>Take message Process message Send response</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Delegation</p>
    <p>CLIENT Find corresponding slot (by NUMA node and cpuid) try_elimination: if (eliminate) return Post message Wait for response Get response else try_elimination</p>
    <p>SERVER Loop through all slots: If slot has message:</p>
    <p>Take message Process message Send response</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Delegation</p>
    <p>CLIENT Find corresponding slot (by NUMA node and cpuid) try_elimination: if (eliminate) return if (Acquire slot lock) Post message Wait for response Get response Release slot lock else try_elimination</p>
    <p>SERVER Loop through all slots: If slot has message:</p>
    <p>Take message Process message Send response</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>Performance</p>
    <p>Scalability</p>
    <p>Power</p>
  </div>
</Presentation>
