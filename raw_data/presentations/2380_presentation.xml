<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FlexFS: A Flexible Flash File System for MLC NAND Flash Memory</p>
    <p>School of Computer Science and Engineering</p>
    <p>Seoul National University</p>
    <p>* Samsung Advanced Institute of Technology</p>
    <p>Samsung Electronics</p>
    <p>Sungjin Lee, Keonsoo Ha, Kangwon Zhang, Jihong Kim, and Junghwan Kim*</p>
    <p>USENIX Annual Technical Conference 2009</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Background  Flexible Flash File System  Experimental Results  Conclusion</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>NAND flash memory is becoming an attractive storage solution</p>
    <p>Two types of NAND flash memory  Single-Level Cell (SLC) and Multi-Level Cell (MLC) NAND flash memory  They are distinctive in terms of performance, capacity, and endurance</p>
    <p>NAND flash memory</p>
    <p>Mobile phones</p>
    <p>Laptops</p>
    <p>Server storage</p>
    <p>Desirable characteristics (high perf. &amp; low power)</p>
    <p>Density increases</p>
  </div>
  <div class="page">
    <p>Comparisons of SLC and MLC flashes</p>
    <p>Performance</p>
    <p>Capacity</p>
    <p>Endurance</p>
    <p>SLC Flash Memory (1 bit / cell)</p>
    <p>High performance</p>
    <p>Low capacity</p>
    <p>MLC Flash Memory (2 bits / cell)</p>
    <p>Performance</p>
    <p>Capacity</p>
    <p>Endurance</p>
    <p>Low performance</p>
    <p>High capacity</p>
  </div>
  <div class="page">
    <p>Comparisons of SLC and MLC flashes</p>
    <p>Performance</p>
    <p>Capacity</p>
    <p>Endurance</p>
    <p>Ideal NAND flash memory</p>
    <p>However, consumers want to have a storage system with high performance, high capacity, and high endurance</p>
    <p>How to take the benefits of two different types of NAND flash memory</p>
  </div>
  <div class="page">
    <p>Flexible Cell Programming</p>
    <p>A writing method of MLC flash memory that allows each memory cell to be used as SLC or MLC</p>
    <p>Makes it possible to take benefits of two different types of NAND flash memory</p>
    <p>MLC Flash Memory (2 bits / cell)</p>
    <p>Performance</p>
    <p>Capacity</p>
    <p>Endurance</p>
    <p>High performance High capacity</p>
    <p>Flexible cell programming</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Proposes a flash file system called FlexFS  Exploits the flexible cell programming of MLC flash memory  Provides the high performance of SLC flash memory and the</p>
    <p>capacity of MLC flash memory  Provides a mechanism that copes with a poor wear characteristic</p>
    <p>of MLC flash memory  Designed for mobile systems, such as mobile phones</p>
    <p>Implements on a real system  Implements FlexFS on a real mobile platform  Evaluates FlexFS with real mobile workloads</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Background  Flexible Flash File System  Experimental Results  Conclusion</p>
  </div>
  <div class="page">
    <p>NAND Flash Memory - Overview</p>
    <p>Flash memory organization  A chip (e.g., 1 GB) blocks (e.g., 512 KB)pages (e.g., 4 KB) cells</p>
    <p>Flash memory characteristics  Asymmetric read/write and erase operations</p>
    <p>A page is a unit of read/write and a block is a unit of erase  Physical restrictions</p>
    <p>Erase-before-write restriction  The number of erase cycles allowed for each block is limited</p>
    <p>block 1 block 2 block n</p>
    <p>page 1</p>
    <p>page 2</p>
    <p>page k</p>
    <p>page 1</p>
    <p>page 2</p>
    <p>page k</p>
    <p>page 1</p>
    <p>page 2</p>
    <p>page k</p>
    <p>A chip</p>
    <p>memory cell ( 1 or more bits)</p>
  </div>
  <div class="page">
    <p>NAND Flash Memory - Cell</p>
    <p>Flash memory cell : a floating gate transistor  The number of electrons on the floating gate determines the threshold voltage Vt  The threshold voltage represents a logical bit value (e.g., 1 or 0)</p>
    <p>Threshold voltage distributionsFloating gate transistor</p>
  </div>
  <div class="page">
    <p>MLC</p>
    <p>Flexible Cell Programming</p>
    <p>The flexible cell programming is a writing method of MLC flash memory</p>
    <p>(1) MLC programming method  Uses all four values of cell by writing data to both LSB and MSB bits  Low performance / High capacity (2 bits per cell)</p>
    <p>(2) SLC programming method  Uses only two values of cell by writing data to LSB bit (or MSB bit)  High performance / Low capacity (1 bit per cell)</p>
    <p>SLC</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Background  Flexible Flash File System  Experimental Results  Conclusion</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>Flash Manager  Manages heterogeneous cells</p>
    <p>Performance manager  Exploits I/O characteristics  To achieve the high performance</p>
    <p>and high capacity</p>
    <p>Wear manager  Guarantees a reasonable lifetime  Distributes erase cycles evenly</p>
    <p>MLC NAND Flash Memory</p>
    <p>VFS Interface</p>
    <p>Virtual File System</p>
    <p>Performance Manager</p>
    <p>Flash Manager</p>
    <p>Wear Manager</p>
    <p>FlexFS</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>MLC NAND Flash Memory</p>
    <p>VFS Interface</p>
    <p>Virtual File System</p>
    <p>Performance Manager</p>
    <p>Flash Manager</p>
    <p>Wear Manager</p>
    <p>FlexFS</p>
  </div>
  <div class="page">
    <p>How Flash Manager Handles Heterogeneous Cells</p>
    <p>Three types of flash memory block: SLC block, MLC block, and free block  Manages them as two regions and one free block pool</p>
    <p>SLC block 1 (256 KB)</p>
    <p>SLC block 2 (256 KB)</p>
    <p>SLC block 3 (256 KB)</p>
    <p>MLC block 1 (512 KB)</p>
    <p>MLC block 2 (512 KB)</p>
    <p>Free block (Unknown)</p>
    <p>Free block (Unknown)</p>
    <p>SLC region</p>
    <p>Free block pool</p>
    <p>MLC region</p>
    <p>SLC block 1 (256 KB)</p>
    <p>MLC block 1 (512 KB)</p>
    <p>SLC block 2 (256 KB)</p>
    <p>Free block (Unknown)</p>
    <p>Free block (Unknown)</p>
    <p>MLC block 2 (512 KB)</p>
    <p>SLC block 3 (256 KB)</p>
    <p>Physical Flash Memory View</p>
    <p>Free block pool</p>
    <p>Logical Flash Memory View</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>MLC NAND Flash Memory</p>
    <p>VFS Interface</p>
    <p>Virtual File System</p>
    <p>Performance Manager</p>
    <p>Flash Manager</p>
    <p>Wear Manager</p>
    <p>FlexFS</p>
  </div>
  <div class="page">
    <p>Performance Manager</p>
    <p>Manages SLC and MLC regions  To provide the SLC performance</p>
    <p>and MLC capacity  Exploits I/O characteristics, such as</p>
    <p>idle time and locality</p>
    <p>Three key techniques  Dynamic allocation  Background migration  Locality-aware data management</p>
    <p>MLC region</p>
    <p>Dynamic Allocation</p>
    <p>Requested data</p>
    <p>SLC region</p>
    <p>Background Migration</p>
    <p>HotCold</p>
    <p>Cold</p>
  </div>
  <div class="page">
    <p>Baseline Approach</p>
    <p>SLC block (256 KB)</p>
    <p>SLC regionMLC region</p>
    <p>SLC programming</p>
    <p>Free block pool</p>
    <p>Free block (Unknown)</p>
    <p>Requested data</p>
    <p>MLC block (512 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>MLC programming</p>
    <p>Incoming I/O requests should be suspended, incurring performance degradation</p>
    <p>Incoming data is written to SLC region</p>
    <p>Moves data to MLC region when free space is exhausted</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
  </div>
  <div class="page">
    <p>Background Migration</p>
    <p>MLC region</p>
    <p>SLC programming</p>
    <p>Requested data</p>
    <p>MLC block (512 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>Background Migration</p>
    <p>Exploit idle times to hide migration overhead from end-user</p>
    <p>SLC region</p>
    <p>Free block pool</p>
    <p>Free block (Unknown)</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
  </div>
  <div class="page">
    <p>Background Migration</p>
    <p>Triggers data migrations in background, not doing it on-demand  Generates enough free blocks for SLC programming if idle time is sufficient</p>
    <p>User I/O request</p>
    <p>Data migration (SLC MLC)</p>
    <p>SLC programming SLC programming</p>
    <p>Time</p>
    <p>MLC programming</p>
    <p>Detect idle time &amp; Trigger data migration</p>
    <p>Try to suspend data migration</p>
    <p>I/O request Response time delay !!!</p>
    <p>Idle time</p>
  </div>
  <div class="page">
    <p>Background Migration</p>
    <p>Triggers data migrations in background, not doing it on-demand  Generates enough free blocks for SLC programming if idle time is sufficient</p>
    <p>User I/O request</p>
    <p>Data migration (SLC MLC)</p>
    <p>SLC programming SLC programming</p>
    <p>Time</p>
    <p>Stop data migration</p>
    <p>I/O request</p>
    <p>Detect idle time &amp; Start data migration</p>
    <p>Utilizes a small fraction of all the available idle time (e.g., 10%)  Reduces the probability that I/O request is issued while migration is running</p>
    <p>Idle time</p>
  </div>
  <div class="page">
    <p>Dynamic Allocation</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>SLC regionMLC region</p>
    <p>Free block pool</p>
    <p>Free block (Unknown)</p>
    <p>Requested data</p>
    <p>MLC block (512 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>Background Migration</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>If system has insufficient idle times, it cannot generate enough free blocks</p>
    <p>SLC programming</p>
  </div>
  <div class="page">
    <p>Dynamic Allocation</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>SLC region (1.0 MB)</p>
    <p>MLC region (1.0 MB)</p>
    <p>Free block pool</p>
    <p>Free block (Unknown)</p>
    <p>Requested data</p>
    <p>MLC block (512 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>Background Migration</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>Writes part of data to MLC region depending on the amount of idle time</p>
    <p>Dynamic Allocation</p>
  </div>
  <div class="page">
    <p>Dynamic Allocation</p>
    <p>Divides the time into several time windows  Time window presents the period during which Np pages are written</p>
    <p>Predicts the idle time Tpredict for the next time window</p>
    <p>Calculates the allocation ratio,   Determine the amount of data destined for the SLC or MLC region</p>
    <p>Np Np</p>
    <p>Previous time window</p>
    <p>Previous time window</p>
    <p>Next time window</p>
    <p>TpredictIdle Busy</p>
    <p>= Tpredict</p>
    <p>Np  Tcopy (If Tpredict  Np  Tcopy , then  = 1.0)</p>
    <p>Where Tcopy is the time required to copy a single page from SLC to MLC</p>
  </div>
  <div class="page">
    <p>Dynamic Allocation</p>
    <p>Distributes the incoming data across two regions depending on</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>SLC region (512 KB)</p>
    <p>MLC region (1.5 MB)</p>
    <p>Dynamic Allocation</p>
    <p>MLC block (512 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>Background Migration</p>
    <p>MLC block (512 KB)</p>
    <p>= 0.6</p>
  </div>
  <div class="page">
    <p>Locality-aware Data Management</p>
    <p>Hot data will be invalidated shortly; it has a high temporal locality</p>
    <p>Data migration for hot data is unnecessary  Reduce the amount of data to move to MLC region from SLC region</p>
    <p>Increase the value of  for the same amount of idle times</p>
    <p>= Tpredict</p>
    <p>(Np - Np hot)  Tcopy</p>
    <p>Where Np hot is the number of hot pages for a time window</p>
  </div>
  <div class="page">
    <p>Locality-aware Data Management</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>SLC regionMLC region</p>
    <p>MLC block (512 KB)</p>
    <p>Dynamic Allocation</p>
    <p>Free block pool</p>
    <p>Free block (Unknown)</p>
    <p>Free block (Unknown)</p>
    <p>Requested data</p>
    <p>Hot dataCold data</p>
    <p>Background Migration</p>
    <p>Cold data</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
    <p>MLC NAND Flash Memory</p>
    <p>VFS Interface</p>
    <p>Virtual File System</p>
    <p>Performance Manager</p>
    <p>Flash Manager</p>
    <p>Wear Manager</p>
    <p>FlexFS</p>
  </div>
  <div class="page">
    <p>Wear Management</p>
    <p>Data migration incurs several block erase operations  How to give a reasonable lifetime to end-users</p>
    <p>Our approach  Controls the wearing rate so that total erase count is close to the</p>
    <p>maximum erase cycles Nerase at a given lifetime Lmin</p>
    <p>Wearing rate : the rate at which flash memory wears out  Nerase : the maximum number of erase cycles for flash memory  Lmin : the lifetime of flash memory</p>
  </div>
  <div class="page">
    <p>Wearing Rate Control</p>
    <p>How FlexFS controls the wearing rate  The wearing rate is directly proportional to the value of</p>
    <p>SLC block (256 KB)</p>
    <p>Free block (Unknown)</p>
    <p>SLC block (256 KB)</p>
    <p>Writing 512 KB of data</p>
    <p>Data migration</p>
    <p>= 1.0</p>
    <p>SLC block (256 KB)</p>
    <p>MLC block (512 KB)</p>
    <p>SLC block (256 KB)</p>
    <p>copy</p>
    <p>MLC block (512 KB)</p>
    <p>= 0.0</p>
    <p>MLC block (512 KB)</p>
  </div>
  <div class="page">
    <p>Wearing Rate Control : Example</p>
    <p>Lmin</p>
    <p>Actual erase count</p>
    <p>Actual erase count is larger than expected erase count  Reduces the value of</p>
    <p>t1 t2 t3 t4</p>
    <p>Expected erase count Nerase</p>
  </div>
  <div class="page">
    <p>Wearing Rate Control : Example</p>
    <p>Actual erase count is smaller than expected erase count  Increases the value of</p>
    <p>t1 t2 t3 t4</p>
    <p>Expected erase count Nerase</p>
    <p>Lmin</p>
    <p>Actual erase count</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Background  Flexible Flash File System  Experimental Results  Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental Environment</p>
    <p>Experimental setup  OMAP2420 processor (400 MHz)  Linux 2.6.25.14 kernel  Samsungs 1GB NAND flash memory</p>
    <p>512 KB block (128 pages per block)  4 KB page</p>
    <p>Benchmarks  Synthetic workloads  Real mobile workloads</p>
  </div>
  <div class="page">
    <p>I/O Throughput</p>
    <p>Measure I/O throughputs with three synthetic benchmarks</p>
    <p>FlexFS configurations</p>
    <p>Benchmark Description</p>
    <p>Idle Sufficient idle times for data migrations</p>
    <p>Busy Insufficient idle times for data migrations</p>
    <p>Locality Similar to the Busy benchmark, except for simulating locality of I/O references (25% of data is rewritten)</p>
    <p>Configurations Description</p>
    <p>Baseline Uses no optimization techniques</p>
    <p>BM Uses background migration</p>
    <p>DA Uses background migration + dynamic allocation</p>
    <p>LA Uses all the optimization techniques (default configuration)</p>
  </div>
  <div class="page">
    <p>I/O Throughput : Result</p>
  </div>
  <div class="page">
    <p>I/O Response Time</p>
    <p>Measure the worst-case response time  Makes write requests while the background migration is running</p>
    <p>FlexFS configurations  Uses all the optimization techniques while varying idle time utilizations</p>
    <p>Configurations Description</p>
    <p>OPT No background migration (No response time delay)</p>
    <p>U10 Utilizes 10% of all the available idle times (default configuration)</p>
    <p>U50 Utilizes 50% of all the available idle times</p>
    <p>U100 Utilizes all the available idle times</p>
  </div>
  <div class="page">
    <p>I/O Response Time : Result</p>
  </div>
  <div class="page">
    <p>Endurance</p>
    <p>Uses a workload that generates 2638 of erase cycles when all the data is written to SLC region</p>
    <p>FlexFS configuration  Nerase: 2400 cycles (240 blocks / 10 cycles for each block)  Lmin: 4000 seconds</p>
    <p>FlexFS should guarantee 4000 seconds of flash lifetime while ensuring block erase cycles to be smaller than 2400 cycles</p>
  </div>
  <div class="page">
    <p>Endurance : Result</p>
    <p>Summary of results relevant to endurance after 4000 seconds</p>
    <p>With wearing rate control policy, we can guarantee the given lifetime of flash memory</p>
    <p>Configuration Total erase cycles Average value of</p>
    <p>wo/ wearing rate control 2638 cycles &gt; 2400 cycles 1.0</p>
    <p>w/ wearing rate control 2252 cycles &lt; 2400 cycles 0.88</p>
  </div>
  <div class="page">
    <p>Real Mobile Workload</p>
    <p>Executes mobile applications using a representative usage profile</p>
    <p>FlexFS configurations Configurations Description</p>
    <p>JFFS2 Original JFFS2 with MLC NAND flash memory</p>
    <p>FlexFSSLC Uses only LSB bit</p>
    <p>FlexFSMLC Uses both LSB and MSB bits (default configuration)</p>
    <p>Application Description</p>
    <p>SMS Send short messages</p>
    <p>Address book Register/modify/remove addresses</p>
    <p>Memo Write short memos</p>
    <p>Game Play a puzzle game</p>
    <p>MP3 Download MP3 files (18 MB)</p>
    <p>Camera Take pictures (18 MB)</p>
    <p>- 5.7 MB of data is read / 39 MB of data is written</p>
  </div>
  <div class="page">
    <p>Real Mobile Workload : Result</p>
    <p>FlexFSMLC shows the write performance close to FlexFSSLC  Small performance penalty is caused by ensuring the given lifetime</p>
    <p>FlexFSMLC shows about 30% higher write performance compared to JFFS2</p>
    <p>There is no significant difference between read operations  SLC and MLC blocks have a similar read performance</p>
    <p>Response time (usec)</p>
    <p>Throughput (MB/sec)</p>
    <p>Capacity</p>
    <p>Read Write Write</p>
    <p>FlexFSSLC 34 334 3.02</p>
    <p>FlexFSMLC 37 345 2.93 FlexFSSLC x 2.0</p>
    <p>JFFS2 36 473 2.12 FlexFSSLC x 2.0</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Propose a new file system for MLC NAND flash memory  Exploits the flexible cell programming to achieve the SLC</p>
    <p>performance and MLC capacity  Achieves both the SLC performance and MLC capacity for</p>
    <p>mobile workloads while ensuring a reasonable lifetime</p>
    <p>Future works  Deals with a trade-off between performance and energy  Develops a new wear-management policy for SLC/MLC hybrid</p>
    <p>storage architecture</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Previous Approaches</p>
    <p>SLC/MLC hybrid storage [Chang et al (2008), Park et al (2008), Im et al (2009)]  Composed of a single SLC chip and many MLC chips  Uses the SLC chip as a write buffer for MLC chips</p>
    <p>Redirects frequently accessed small data into the SLC chip  Redirects bulk data into the MLC chips</p>
    <p>Low cost and fast response time  But low bandwidth</p>
    <p>SLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>MLC chip</p>
    <p>Co n</p>
    <p>tr ol</p>
    <p>le r</p>
    <p>(f ir</p>
    <p>m w</p>
    <p>ar e)</p>
    <p>Flash Storage</p>
    <p>H os</p>
    <p>t sy</p>
    <p>st em</p>
    <p>ATA, MMC</p>
  </div>
  <div class="page">
    <p>Flexible Cell Programming</p>
    <p>How system software selectively uses a bit position of a bit pattern  Two pages, LSB and MSB pages, share the same word line WL(k)  LSB pages use LSB bit of cell, and MSB pages use LSB bit of cell  SLC programming can be easily made by writing data into LSB pages (or MSB pages)</p>
  </div>
  <div class="page">
    <p>Evaluation of Flexible Programming</p>
    <p>SLC programming (MLC flash memory)</p>
    <p>MLC programming (MLC flash memory)</p>
    <p>Page size 4 KB 4 KB</p>
    <p>Block size 256 KB (64 pages) 512 KB (128 pages)</p>
    <p>Performance comparison (* Measured at the device driver)</p>
    <p>Capacity comparison  SLC programming improves the write speed close to SLC flash memory</p>
    <p>SLC programming reduces the capacity of a block by half (e.g., 512 KB  256 KB)</p>
  </div>
  <div class="page">
    <p>Design Objectives of FlexFS</p>
    <p>Design goals  Provides the maximum capacity of</p>
    <p>MLC flash memory to end-users  Provides the performance close to</p>
    <p>SLC flash memory</p>
    <p>Our approaches  Logically divides flash memory into</p>
    <p>two regions, SLC and MLC regions  Provides the several modules</p>
    <p>managing two different regions to give high performance and capacity</p>
    <p>Provides operating system with homogeneous view of storage</p>
    <p>FlexFS</p>
    <p>SLC region MLC region</p>
    <p>Operating System</p>
    <p>MLC NAND Flash Memory</p>
    <p>Manages heterogeneous cells</p>
    <p>Provides homogeneous view of storage (High performance &amp; High capacity)</p>
  </div>
  <div class="page">
    <p>Write Operation</p>
    <p>Similar to other log-structured file systems, such as JFFS2 and YAFFS</p>
    <p>Uses a double-logging approach for writing data to flash memory  Two write buffers reserved for SLC and MLC blocks  Two log blocks reserved for SLC and MLC blocks</p>
    <p>SLC write buffer (4 KB)</p>
    <p>MLC write buffer (4 KB)</p>
    <p>SLC programming MLC programming</p>
    <p>Logging</p>
    <p>Write requests</p>
    <p>Physical NAND Flash Memory Layout</p>
    <p>SLC block 1 (256 KB)</p>
    <p>MLC block 1 (512 KB)</p>
    <p>SLC block 2 (256 KB)</p>
    <p>Free block (Unknown)</p>
    <p>Free block (Unknown)</p>
    <p>MLC block 2 (512 KB)</p>
    <p>SLC block 3 (256 KB)</p>
  </div>
  <div class="page">
    <p>Read Operation</p>
    <p>Find a physical location of a given data from the inode cache  Maintains physical locations for data associated with inodes in the inode cache</p>
    <p>Read data from the physical location, regardless of block type</p>
    <p>Physical NAND Flash Memory Layout</p>
    <p>Inode Cache</p>
    <p>Read requests</p>
    <p>Physical location</p>
    <p>(inode, file offset)</p>
    <p>SLC block 1 (256 KB)</p>
    <p>MLC block 1 (512 KB)</p>
    <p>SLC block 2 (256 KB)</p>
    <p>Free block (Unknown)</p>
    <p>Free block (Unknown)</p>
    <p>MLC block 2 (512 KB)</p>
    <p>SLC block 3 (256 KB)</p>
  </div>
  <div class="page">
    <p>Wear leveling of FlexFS</p>
    <p>Used two wear-leveling policies  Swaps the most worn-out block with the least worn-out block  Uses a free block with the smallest erased cycles for writing</p>
    <p>Distribution of block erase cycles</p>
  </div>
  <div class="page">
    <p>Overheads</p>
    <p>Overheads introduced by device driver and file system</p>
    <p>MLC (LSB and MSB)</p>
    <p>MLC (LSB)</p>
  </div>
</Presentation>
