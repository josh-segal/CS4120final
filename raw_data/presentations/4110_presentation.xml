<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Symbolic Execution of Security Protocol</p>
    <p>Impl.: Handling Cryptographic Primitives</p>
    <p>Mathy Vanhoef  @vanhoefm</p>
    <p>USENIX WOOT, Baltimore, US, 14 August 2018</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Symbolic Execution</p>
    <p>Handling Crypto</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Symbolic Execution</p>
    <p>Handling Crypto</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>void recv(data, len) {</p>
    <p>if (data[0] != 1) return</p>
    <p>if (data[1] != len) return</p>
    <p>int num = len/data[2] ...</p>
    <p>}</p>
    <p>Mark data as symbolic</p>
    <p>Symbolic branch</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>data[0] != 1</p>
    <p>void recv(data, len) {</p>
    <p>if (data[0] != 1) return</p>
    <p>if (data[1] != len) return</p>
    <p>int num = len/data[2] ...</p>
    <p>}</p>
    <p>data[0] == 1</p>
    <p>void recv(data, len) {</p>
    <p>if (data[0] != 1) return</p>
    <p>if (data[1] != len) return</p>
    <p>int num = len/data[2] ...</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>data[0] == 1data[0] != 1</p>
    <p>Continue execution:</p>
    <p>if (data[1] != len)</p>
    <p>PC = Path</p>
    <p>Constraint</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>data[0] != 1</p>
    <p>Continue</p>
    <p>execution</p>
    <p>data[0] == 1 &amp;&amp; data[1] != len</p>
    <p>data[0] == 1 &amp;&amp; data[1] == len</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>Can data[2] equal zero</p>
    <p>under the current PC?</p>
    <p>data[0] == 1 &amp;&amp; data[1] == len</p>
    <p>void recv(data, len) {</p>
    <p>if (data[0] != 1) return</p>
    <p>if (data[1] != len) return</p>
    <p>int num = len/data[2] ...</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>Can data[2] equal zero</p>
    <p>under the current PC?</p>
    <p>Yes! Bug detected!</p>
    <p>data[0] == 1 &amp;&amp; data[1] == len</p>
    <p>void recv(data, len) {</p>
    <p>if (data[0] != 1) return</p>
    <p>if (data[1] != len) return</p>
    <p>int num = len/data[2] ...</p>
  </div>
  <div class="page">
    <p>Implementations</p>
    <p>Practical limitations:</p>
    <p>= 2||</p>
    <p>Infinite-length paths</p>
    <p>SMT query complexity</p>
    <p>We build upon KLEE</p>
    <p>Works on LLVM bytecode</p>
    <p>Actively maintained</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Symbolic Execution</p>
    <p>Handling Crypto</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Motivating Example</p>
    <p>void recv(data, len) { plain = decrypt(data, len) if (plain == NULL) return</p>
    <p>if (plain[0] == COMMAND) process_command(plain)</p>
    <p>else ...</p>
    <p>}</p>
    <p>Mark data as symbolic</p>
  </div>
  <div class="page">
    <p>Motivating Example</p>
    <p>void recv(data, len) { plain = decrypt(data, len) if (plain == NULL) return</p>
    <p>if (plain[0] == COMMAND) process_command(plain)</p>
    <p>else ...</p>
    <p>}</p>
    <p>Mark data as symbolic</p>
    <p>Summarize crypto algo.</p>
    <p>(time consuming)</p>
    <p>Analyze crypto algo.</p>
    <p>(time consuming)</p>
    <p>Wont reach this code!</p>
  </div>
  <div class="page">
    <p>Efficiently handling decryption?</p>
    <p>Decrypted output</p>
    <p>=</p>
    <p>fresh symbolic variable</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>void recv(data, len) { plain = decrypt(data, len) if (plain == NULL) return</p>
    <p>if (plain[0] == COMMAND) process_command(plain)</p>
    <p>else ...</p>
    <p>}</p>
    <p>create fresh</p>
    <p>symbolic variable</p>
    <p>Normal analysis</p>
    <p>Mark data as symbolic</p>
    <p>Can now analyze code</p>
    <p>that parses decrypted data</p>
  </div>
  <div class="page">
    <p>Other Applications</p>
    <p>Handling hash functions</p>
    <p>Output = fresh symbolic variable</p>
    <p>Also works for HMACs (Message Authentication Codes)</p>
    <p>Tracking use of crypto primitives?</p>
    <p>Recording relationship between input &amp; output</p>
    <p>Treating fresh variable as information flow taint</p>
  </div>
  <div class="page">
    <p>Detecting Crypto Misuse</p>
    <p>Timing side-channels</p>
    <p>(): all bytes of MAC in path constraint?</p>
    <p>If not: comparison exits on first difference</p>
    <p>Decryption oracles</p>
    <p>Behavior depends on unauth. decrypted data</p>
    <p>Decrypt data is in path constraint, but not in MAC</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Symbolic Execution</p>
    <p>Handling Crypto</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>The 4-way handshake</p>
    <p>Used to connect to any protected Wi-Fi network</p>
    <p>Negotiates fresh PTK:</p>
    <p>pairwise transient keyMutual authentication</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>PTK = Combine(shared secret,</p>
    <p>ANonce, SNonce)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Encrypted with PTK</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Authenticated</p>
    <p>with a MAC</p>
  </div>
  <div class="page">
    <p>We focus on the client</p>
    <p>Symbolic execution of</p>
    <p>How to get these working under KLEE?</p>
    <p>Intels iwd deamon wpa_supplicant kernel driver</p>
  </div>
  <div class="page">
    <p>Intels iwd</p>
    <p>Avoid running full program under KLEE</p>
    <p>Would need to model Wi-Fi stack symbolically</p>
    <p>Our approach</p>
    <p>iwd contains unit test for the 4-way handshake</p>
    <p>Reuse initialization code of unit test!</p>
    <p>Symbolically execute only receive function</p>
  </div>
  <div class="page">
    <p>wpa_supplicant</p>
    <p>Unit test uses virtual hardware and runs full AP</p>
    <p>Still need to simulate Wi-Fi stack</p>
    <p>Alternative approach:</p>
    <p>Write unit test that isolates 4-way handshake like iwd</p>
    <p>Then symbolically execute receive function!</p>
    <p>Need to modify code of wpa_supplicant (non-trivial)</p>
  </div>
  <div class="page">
    <p>MediaTeks Driver</p>
    <p>No unit tests &amp; its a Linux driver</p>
    <p>Symbolically executing the Linux kernel?!</p>
    <p>Inspired by previous cases</p>
    <p>Write unit test &amp; simulate used kernel functions in userspace</p>
    <p>Verify extracted code is correctly simulated in userspace!</p>
  </div>
  <div class="page">
    <p>Not all our unit tests are created equally</p>
    <p>https://github.com/vanhoefm/woot2018</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Symbolic Execution</p>
    <p>Handling Crypto</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Discovered Bugs I</p>
    <p>Timing side-channels</p>
    <p>Authentication tag not checked in constant time</p>
    <p>MediaTek and iwd are vulnerable</p>
    <p>Denial-of-service in iwd</p>
    <p>Caused by integer underflow</p>
    <p>Leads to huge malloc that fails</p>
  </div>
  <div class="page">
    <p>Discovered Bugs II</p>
    <p>Flawed AES unwrap crypto primitive</p>
    <p>Also in MediaTeks kernel driver</p>
    <p>Manually discovered</p>
    <p>Buffer overflow in MediaTek kernel driver</p>
    <p>Occurs when copying the group key</p>
    <p>May lead to remote code execution</p>
  </div>
  <div class="page">
    <p>Decryption oracle in wpa_supplicant</p>
    <p>Decrypt group key (GTK) in Message 3 (Msg3)</p>
    <p>Decryption oracle:</p>
    <p>Doesnt check authenticity of</p>
    <p>malformed handshake message</p>
    <p>But does decrypt and process data</p>
  </div>
  <div class="page">
    <p>Decryption oracle in wpa_supplicant II</p>
    <p>Msg3: decrypted using RC4, but not authenticated</p>
    <p>header 221 36</p>
    <p>Type Length GTK Type Length</p>
    <p>header 221 38</p>
    <p>Type Length GTK</p>
    <p>Parsing only succeeds if 37 is zero</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Short-term</p>
    <p>Efficiently simulate reception of multiple packets</p>
    <p>If 1st packet doesnt affect state, stop exploring this path</p>
    <p>Long-term</p>
    <p>Extract packet formats and state machine</p>
    <p>Verify basic properties of protocol</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Symbolic execution of protocols</p>
    <p>Simple simulation of crypto</p>
    <p>Interesting future work</p>
  </div>
  <div class="page">
    <p>As a final note</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Thank you!</p>
  </div>
</Presentation>
