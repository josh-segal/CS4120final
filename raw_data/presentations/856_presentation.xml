<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DEFINED: Deterministic Execution for</p>
    <p>Interactive Control-Plane Debugging</p>
    <p>Chia-Chi Lin, Virajith Jalaparti, and Matthew Caesar</p>
    <p>University of Illinois at Urbana-Champaign Jacobus Van der Merwe</p>
    <p>University of Utah</p>
  </div>
  <div class="page">
    <p>Control-Plane Software</p>
    <p>Participates in routing protocols to draw a network map</p>
    <p>Responsible for 95-99% of the observed bugs in todays networks (Altekar et al. Focus Replay Debugging Effort on the Control Plane. HotDep 10.)</p>
  </div>
  <div class="page">
    <p>Automatic Control-Plane Debugging</p>
    <p>Builds models of control-plane software to check for bugs and defects</p>
    <p>Detects anomalies but does not correct them</p>
    <p>Eventually, requires developers to understand and fix the bugs</p>
  </div>
  <div class="page">
    <p>Todays Solution: Interactive Debugging with Logging</p>
    <p>Records nondeterministic events to enable deterministic replay</p>
    <p>Two varieties:  Comprehensive logging</p>
    <p>Records everything  Able to reproduce everything  Doesnt scale to todays production networks</p>
    <p>Partial logging  Records partial information  Scales to large-scale networks  Unable to precisely reproduce execution</p>
  </div>
  <div class="page">
    <p>DEFINED Goals</p>
    <p>Reproducibility  Precisely preserve execution without</p>
    <p>comprehensive logging</p>
    <p>Efficiency  Maintain fast convergence time in</p>
    <p>production networks</p>
    <p>Usability  Enable interactive control for debugging</p>
    <p>Scalability  Support enterprise and campus networks</p>
  </div>
  <div class="page">
    <p>Interactive Debugging with Deterministic Execution</p>
    <p>Nondeterministic events in control-plane software  External events</p>
    <p>E.g., routers or links go down  Internal events</p>
    <p>E.g., routers exchange messages (Bergan et al. Deterministic Process Groups in dOS. OSDI 10.)</p>
    <p>Logs only external events  Eliminates nondeterminism from</p>
    <p>internal events</p>
  </div>
  <div class="page">
    <p>DEFINED Overview</p>
    <p>A library  Records external</p>
    <p>events</p>
    <p>Intercepts internal message events</p>
    <p>Provides deterministic timer APIs</p>
    <p>Network Node</p>
    <p>Control-Plane Software</p>
    <p>Operating System</p>
    <p>DEFINED</p>
  </div>
  <div class="page">
    <p>DEFINED Algorithms</p>
    <p>DEFINED-RB for production networks  Designed for efficiency  Implements speculative execution with</p>
    <p>RollBacks</p>
    <p>DEFINED-LS for debugging networks  Designed for interactive control  Steps through network execution with a</p>
    <p>LockStep algorithm</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>DEFINED-RB in Production Networks</p>
    <p>DEFINED-LS in Debugging Networks</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Interfacing with Production Networks</p>
    <p>Each network node independently determines an ordering function to order internal events</p>
    <p>If events execute in the wrong order, DEFINED-RB rolls back the state of the network node and replays events in the correct order</p>
  </div>
  <div class="page">
    <p>DEFINED-RB</p>
    <p>Rolling Back Software States</p>
    <p>ControlPlane</p>
    <p>Software</p>
    <p>ControlPlane</p>
    <p>Software</p>
    <p>ControlPlane</p>
    <p>Software</p>
    <p>Shared Memory</p>
    <p>Shared Memory</p>
  </div>
  <div class="page">
    <p>Ordering Internal Events with Logical Timestamps</p>
    <p>One network node periodically broadcast logical timestamps</p>
    <p>Each node records external events in logical time</p>
    <p>Each node tags and orders internal messages with logical timestamps and fires timers in logical time</p>
  </div>
  <div class="page">
    <p>Cascading Rollbacks Within a Logical Time Unit</p>
    <p>Order before</p>
  </div>
  <div class="page">
    <p>Optimized Ordering Function with Latency Information</p>
    <p>&lt; 3 2</p>
  </div>
  <div class="page">
    <p>Stepping through Debugging Networks</p>
    <p>DEFINED-LS divides network execution into logical steps</p>
    <p>Each step has two phases  Transmission phase</p>
    <p>Each network node sends messages to neighboring nodes</p>
    <p>Processing phase  Each network node processes its internal</p>
    <p>events</p>
  </div>
  <div class="page">
    <p>A Step in DEFINED-LS</p>
    <p>Control-Plane Software</p>
    <p>DEFINED-LS</p>
    <p>Transmission Phase Processing Phase</p>
  </div>
  <div class="page">
    <p>Centralized Coordinator for Interactive Stepping</p>
    <p>Coordinates phase transitions among network nodes</p>
    <p>Allows developers to issue a step command</p>
    <p>Steps may be chosen at various levels of granularity (per-event or perlogical-time-unit)</p>
  </div>
  <div class="page">
    <p>Evaluation Methodology</p>
    <p>Software: XORP OSPF 1.6  Environment: Emulab  Topology: Rocketfuel and BRITE</p>
    <p>(we present results from the Rocketfuel Sprintlink topology)</p>
    <p>Traces: 2 weeks of Tier-1 ISP area 0 OSPF traces (324 network nodes and 651 events)</p>
  </div>
  <div class="page">
    <p>DEFINED-RB Performance</p>
  </div>
  <div class="page">
    <p>DEFINED-LS Performance</p>
    <p>Every step command completes in less than 1 second</p>
  </div>
  <div class="page">
    <p>DEFINED-RB Scalability</p>
    <p>Optimized Ordering reduces the convergence time by 1.35 seconds Optimized Ordering adds only 0.73 seconds to the convergence time</p>
  </div>
  <div class="page">
    <p>DEFINED-LS Scalability</p>
    <p>A step command completes in less than 0.8 seconds on average</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>A debugger for control-plane software  Uses deterministic execution to avoid</p>
    <p>logging internal nondeterminism  Implements speculative execution to</p>
    <p>maintain efficiency in production networks</p>
    <p>Leverages a lockstep algorithm to provide interactive control in debugging networks</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
  </div>
</Presentation>
