<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NVMKV: A Scalable and Lightweight Flash Aware Key-Value Store</p>
    <p>Leonardo Mrmol, Swaminathan Sundararaman,</p>
    <p>Nisha Talagala, Raju Rangaswami, Sushma Devendrappa, Bharath Ramsundar, Sriram Ganesan</p>
    <p>FusionIO  Florida International University work done at FusionIO</p>
  </div>
  <div class="page">
    <p>Introducing KV Stores</p>
    <p>Preferred data management solution for Internet services</p>
    <p>Provide simple interface</p>
    <p>get, put, delete</p>
    <p>Provide weaker consistency model</p>
    <p>compared to RDMS</p>
  </div>
  <div class="page">
    <p>Limitations of existing solutions</p>
    <p>Use log-structured/out-of-place updates</p>
    <p>Better performance on hard-disk and older SSDs</p>
    <p>Require compaction/garbage collection</p>
    <p>Creates auxiliary write amplification</p>
    <p>Performance penalty</p>
    <p>Reduces the life of NAND flash</p>
  </div>
  <div class="page">
    <p>Auxiliary Write Amplification</p>
    <p>App</p>
    <p>KV Store</p>
    <p>FTL</p>
    <p>W</p>
    <p>a W . . .</p>
    <p>Write application data</p>
    <p>Update metadata</p>
    <p>Data compaction / GC</p>
  </div>
  <div class="page">
    <p>How bad is the situation?</p>
    <p>Auxiliary write amplification varying from 2.5x to 43x</p>
    <p>W o</p>
    <p>rs e</p>
    <p>B e</p>
    <p>tt e</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Existing KV Store Designs</p>
    <p>Logging Data</p>
    <p>Mapping</p>
    <p>KV Store</p>
    <p>FTL</p>
    <p>App</p>
    <p>Compaction / GC</p>
    <p>` Logging</p>
    <p>Data Mapping</p>
    <p>Compaction / GC</p>
    <p>Others Subsystems</p>
    <p>Standard R/W Interface</p>
    <p>FTL</p>
  </div>
  <div class="page">
    <p>FTL Cooperative KV Store Design</p>
    <p>Logging Data</p>
    <p>Mapping</p>
    <p>KV Store</p>
    <p>FTL</p>
    <p>App</p>
    <p>Compaction / GC</p>
    <p>` Logging</p>
    <p>Data Mapping</p>
    <p>Compaction / GC</p>
    <p>Others Subsystems</p>
    <p>Standard R/W Interface</p>
    <p>FTL</p>
  </div>
  <div class="page">
    <p>FTL Cooperative KV Store Design</p>
    <p>FTL</p>
    <p>App</p>
    <p>Compaction / GC</p>
    <p>` Logging</p>
    <p>Data Mapping</p>
    <p>Compaction / GC</p>
    <p>Others Subsystems</p>
    <p>Standard R/W Interface</p>
    <p>FTL</p>
    <p>Sparse Data Mapping</p>
    <p>Extended Interface</p>
    <p>KV Store</p>
    <p>Hashing Scheme</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>Cooperative design with FTL  Minimize auxiliary write amplification</p>
    <p>Maximize application level performance</p>
    <p>Leverage FTL for atomicity and durability  Using the extended interface, updates are done atomically</p>
    <p>Use constant amount of metadata  Independent of the number of KV pairs</p>
    <p>Provide close to raw device performance</p>
    <p>Provide greater I/O parallelism  Implementation with fewer locks</p>
  </div>
  <div class="page">
    <p>Classes of Key-Value Stores</p>
    <p>Disk Optimized SSD Optimized</p>
    <p>BerkeleyDB</p>
    <p>HashCache</p>
    <p>MemcacheDB</p>
    <p>MengoDB</p>
    <p>LevelDB</p>
    <p>RockDB</p>
    <p>SILT</p>
    <p>FlashStore FAWN-KV</p>
    <p>Skimpy-Stash</p>
    <p>FTL Optimized</p>
    <p>NVMKV</p>
  </div>
  <div class="page">
    <p>Design</p>
  </div>
  <div class="page">
    <p>Sparse Address Mapping</p>
  </div>
  <div class="page">
    <p>Extended FTL Interface</p>
    <p>Primitive Description</p>
    <p>Exists Query if an address is populated.</p>
    <p>Atomic-Write Write to an address range atomically.</p>
    <p>Atomic-Trim Delete an address range atomically.</p>
    <p>Iterate Return all populated addresses.</p>
    <p>Many applications will benefit from having this extended interface available to them!</p>
  </div>
  <div class="page">
    <p>Hashing and Collision</p>
    <p>Put(key, val)</p>
    <p>LBA = hash(key, i)</p>
    <p>Exists(LBA)</p>
    <p>Atomic-Write(LBA,  )</p>
    <p>i += 1</p>
    <p>i &gt; MAXFailed</p>
    <p>No</p>
    <p>Yes</p>
    <p>i=0</p>
    <p>No</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>Hashing and Collision (Details)</p>
    <p>Keys are hashed into 48-bit addresses</p>
    <p>Key Bit Range (KBR): maximum number of keys</p>
    <p>Value Bit Range (VBR): maximum kv-pair size</p>
    <p>KBR + VBR = 48 bits</p>
    <p>Collision are handle with Polynomial probing</p>
    <p>Try 8 different locations before failing</p>
    <p>Case Study: {Device Size: 1TB, KBR: 36, VBR: 12}</p>
    <p>64 billion kv-pairs of 2MB of maximum size</p>
    <p>Probability of put failing is 1/240</p>
  </div>
  <div class="page">
    <p>Evaluation Results</p>
  </div>
  <div class="page">
    <p>Microbenchmark Results</p>
    <p>NVMKV scales better than LevelDB as the number of threads increases  NVMKV outperforms LevelDB even at low thread counts and without FS cache  NVMKV provides durability and atomicity of put operations</p>
    <p>B e</p>
    <p>tt e</p>
    <p>r W</p>
    <p>o rs</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>LevelDB Comparison using YCSB</p>
    <p>NVMKV outperforms LevelDB in every workload using 1/4 of the cache size  LevelDB uses both its own cache and the file system cache  Unlike LevelDB, NVMKV perform every update atomically and synchronous</p>
    <p>B e</p>
    <p>tt e</p>
    <p>r W</p>
    <p>o rs</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>LevelDB Comparison using YCSB</p>
    <p>NVMKV outperforms LevelDB in both sync and async configurations  NVMKK provides a more stable and predictable performance</p>
    <p>W o</p>
    <p>rs e</p>
    <p>B e</p>
    <p>tt e</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Auxiliary Write Amplification</p>
    <p>W o</p>
    <p>rs e</p>
    <p>B e</p>
    <p>tt e</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>We propose a FTL cooperative design that allows for:</p>
    <p>Simple KV-Store design and implementation</p>
    <p>Constant amount of metadata</p>
    <p>High performance / parallelism</p>
    <p>Atomicity and durability of KV operations</p>
    <p>Low write amplification</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>opennvm.github.io</p>
  </div>
</Presentation>
