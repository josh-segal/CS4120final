<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LIBERATED: A fully in-browser client and server web application debug and test environment</p>
    <p>Derrell Lipman University of Massachusetts Lowell</p>
  </div>
  <div class="page">
    <p>Overview of the Client/Server Environment</p>
    <p>Client Machine (Browser)</p>
    <p>Server Machine</p>
    <p>User Interface</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>Frontend Code</p>
    <p>API to web server</p>
    <p>Database</p>
    <p>Backend Code</p>
    <p>Business logic</p>
    <p>Web server</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>HTTP</p>
  </div>
  <div class="page">
    <p>Many Skill Sets Required</p>
    <p>Database</p>
    <p>Backend Code</p>
    <p>Business logic</p>
    <p>Web server</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>User Interface</p>
    <p>Frontend Code</p>
    <p>API to web server</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>Client-side languages: JavaScript, HTML</p>
    <p>In-browser debugging Comms interface JavaScript framework</p>
    <p>Server-side languages: PHP, ASP.net</p>
    <p>Server code debugging Comms interface Database interface</p>
    <p>Schema design</p>
    <p>Human Factors Visual Design</p>
  </div>
  <div class="page">
    <p>Debugging Difficulties</p>
    <p>Client/server interaction is asynchronous  Not possible to step into server code from browser  Different people (skill sets) required at client and</p>
    <p>server  Methodologies, techniques differ between client and</p>
    <p>server</p>
  </div>
  <div class="page">
    <p>My Research Question</p>
    <p>Is it feasible to design an architecture and framework for client/server application implementation that allows:</p>
  </div>
  <div class="page">
    <p>Desired Architecture</p>
    <p>Client Machine (Browser) Server Machine</p>
    <p>User Interface</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>Frontend Code</p>
    <p>API to web server</p>
    <p>Database</p>
    <p>Backend Code</p>
    <p>Web server</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>HTTP</p>
    <p>Database</p>
    <p>Backend Code</p>
    <p>Business logic</p>
    <p>Web server</p>
    <p>Application Communication</p>
    <p>Protocol</p>
    <p>In Browser</p>
  </div>
  <div class="page">
    <p>Research Sub-questions</p>
    <p>How much of a compromise does this architecture impose, i.e., what common facilities become unavailable or more difficult to use?</p>
    <p>Does this new architecture create new problems of its own?</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
    <p>Glue: Inbrowser vs. real server</p>
    <p>Interface between database abstraction and the simulated in browser, and real databases</p>
    <p>Interface from incoming request to server code</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
    <p>Glue: Inbrowser vs. real server</p>
    <p>Interface from incoming request to server code</p>
    <p>Interface between database abstraction and the simulated in browser, and real databases</p>
    <p>An application to show that the architecture works</p>
  </div>
  <div class="page">
    <p>Introducing LIBERATED</p>
    <p>Liberates the developer from the hassles of traditional client/server application debugging and testing</p>
    <p>Currently supports:</p>
    <p>Simulation environment (in browser)  App Engine  Jetty / SQLite</p>
    <p>Implemented with qooxdoo JavaScript framework</p>
    <p>Provides traditional classbased object programming model</p>
    <p>LIBERATED could be used when developing a non qooxdoobased application</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
    <p>Glue: Inbrowser vs. real server</p>
    <p>Interface from incoming request to server code</p>
    <p>Interface between database abstraction and the simulated in browser, and real databases</p>
    <p>An application to show that the architecture works</p>
  </div>
  <div class="page">
    <p>Transports</p>
    <p>Application</p>
    <p>Application Communication Protocol (e.g., RPC, RESTful)</p>
    <p>XMLHttpRequest Script IFrame</p>
    <p>Client (browser)</p>
    <p>Server</p>
    <p>Web Server</p>
    <p>Transports</p>
  </div>
  <div class="page">
    <p>Adding a Simulation Transport</p>
    <p>Application</p>
    <p>Application Communication Protocol (e.g., RPC, RESTful)</p>
    <p>XMLHttpRequest Script IFrame</p>
    <p>Client (browser)</p>
    <p>Server</p>
    <p>Web Server</p>
    <p>Simulation</p>
    <p>Simulated Web Server</p>
    <p>Transports</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
    <p>Glue: Inbrowser vs. real server</p>
    <p>Interface from incoming request to server code</p>
    <p>Interface between database abstraction and the simulated in browser, and real databases</p>
    <p>An application to show that the architecture works</p>
  </div>
  <div class="page">
    <p>Server-side JavaScript</p>
    <p>Rhino  Mozilla Foundation</p>
    <p>SpiderMonkey  Embedded in some Mozilla products</p>
    <p>V8 (Node.js)  Used in the Chrome browser</p>
    <p>Via Rhino: any Java environment</p>
  </div>
  <div class="page">
    <p>In-browser or real server: Application Communication Protocol</p>
    <p>Common approaches  REST (Representational State Transfer)  RPC (Remote Procedure Call)</p>
    <p>XMLRPC  JSONRPC (Very easy to implement in JavaScript)</p>
    <p>Grow your own</p>
  </div>
  <div class="page">
    <p>Entity Class Entity Instance</p>
    <p>In-browser or real server: Database Abstraction Abstract class: Entity</p>
    <p>Instance Properties</p>
    <p>data  Per-entity field data</p>
    <p>brandNew  Whether this entity was first</p>
    <p>retrieved from the database</p>
    <p>uid  Unique auto-generated key, if</p>
    <p>no key field is specified</p>
    <p>Instance Methods</p>
    <p>put ( )  Write this entity to database</p>
    <p>removeSelf ( )  Delete this entity from database</p>
    <p>Class Functions</p>
    <p>query ( )  Retrieve data from one or more</p>
    <p>entity types in the database</p>
    <p>registerPropertyTypes ( )  Specify the field values for this</p>
    <p>type of entity</p>
    <p>registerDatabaseProvider ( )  A specific database server</p>
    <p>registers its handlers for all primitive operations</p>
    <p>putBlob ( ) getBlob ( ) removeBlob ( )</p>
    <p>Manage large objects</p>
  </div>
  <div class="page">
    <p>Entity Type definition for a simple counter</p>
    <p>qx.Class.define(&quot;example.ObjCounter&quot;, { extend : liberated.dbif.Entity, construct : function(id) { this.setData({ &quot;count&quot; : 0 }); this.base(arguments, &quot;counter&quot;, id); }, defer : function() { var Entity = liberated.dbif.Entity;</p>
    <p>Entity.registerEntityType(example.ObjCounter, &quot;counter&quot;);</p>
    <p>Entity.registerPropertyTypes( &quot;counter&quot;, { &quot;id&quot; : &quot;String&quot;, &quot;count&quot; : &quot;Integer&quot; }, &quot;id&quot;); } });</p>
  </div>
  <div class="page">
    <p>RPC implementation</p>
    <p>qx.Mixin.define(&quot;example.MCounter&quot;, { construct : function() { this.registerService( &quot;countPlusOne&quot;, this.countPlusOne,[ &quot;counterId&quot; ]); }, members : { countPlusOne : function(counter) { var counterObj, counterDataObj;</p>
    <p>liberated.dbif.Entity.asTransaction( function() { counterObj = new example.ObjCounter(counter); counterDataObj = counterObj.getData(); ++counterDataObj.count; counterObj.put(); }, [], this);</p>
    <p>return counterDataObj.count; } } });</p>
  </div>
  <div class="page">
    <p>A second example, using a query</p>
    <p>// Issue a query of dogs. results = query( &quot;app.Dog&quot;, // Entity type to query.</p>
    <p>{ // search criteria type : &quot;op&quot;, method : &quot;and&quot;, children : [ { field : &quot;breed&quot;, value : &quot;retriever&quot; }, { field : &quot;training&quot;, value : &quot;search&quot; }, { field : &quot;age&quot;, value : 3, filterOp : &quot;&gt;=&quot; } ] },</p>
    <p>[ // result criteria { type : &quot;limit&quot;, value : 5 }, { type : &quot;offset&quot;, value : 10 }, { type : &quot;sort&quot;, field : &quot;age&quot;, order : &quot;desc&quot; } ]);</p>
    <p>SQL equivalent:</p>
    <p>SELECT * FROM app.Dog WHERE breed = 'retriever' AND training = 'search' AND age &gt;= 3 SORT BY age DESC OFFSET 10 LIMIT 5;</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>Means to select transport</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
    <p>Glue: Inbrowser vs. real server</p>
    <p>Interface from incoming request to server code</p>
    <p>Interface between database abstraction and the simulated in browser, and real databases</p>
    <p>An application to show that the architecture works</p>
  </div>
  <div class="page">
    <p>Glue: Using common code in browser or real server</p>
    <p>Web server interface:  Request arrived  Sending response</p>
    <p>Interface with database  Simulation database  App Engine datastore  SQLite</p>
  </div>
  <div class="page">
    <p>The Pieces of the Puzzle</p>
    <p>Switchable transports</p>
    <p>Add local transport to talk to inbrowser server</p>
    <p>JavaScript code to run inbrowser or on the real server</p>
    <p>Serverside JavaScript</p>
    <p>Application communication protocol server</p>
    <p>Database operation abstraction</p>
    <p>Compiling JavaScript to Java's .class format</p>
    <p>Glue: Inbrowser vs. real server</p>
    <p>Interface from incoming request to server code</p>
    <p>Interface between database abstraction and the simulated in browser, and real databases</p>
    <p>An application to show that the architecture works</p>
  </div>
  <div class="page">
    <p>Incorporating into an application: App Inventor Community Gallery</p>
    <p>App Inventor (Google / MIT)  Blocks programming language (puzzle pieces)</p>
    <p>Similar to Scratch, Lego Mindstorms environments</p>
    <p>Destination: Android phones</p>
    <p>App Inventor Community Gallery  Sharing of source code, libraries, components</p>
    <p>Social aspects: Like It!, comments</p>
    <p>Developed and tested using inbrowser backend  Unit/regression tests for individual RPC implementations and for full RPC</p>
    <p>roundtrip invocation</p>
    <p>Runs on App Engine</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Nothing else fully answers my research question???  Areas of related work</p>
    <p>Google Web Toolkit (GWT)  Plain Old Webserver  Wakanda</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Is it feasible to design an architecture and framework for client/server application implementation that allows:</p>
    <p>YES! (with caveats)</p>
  </div>
  <div class="page">
    <p>Compromises and New Problems Imposed by This Architecture</p>
    <p>Compromises  Browser database capabilities are limited  Limited number of property types  Required schema  Conversion from native language to JavaScript  Database driver mappings  difficult?</p>
    <p>New problems  Serverside JavaScript is still young</p>
    <p>Plentiful libraries of code available elsewhere are not yet here (but Node is quickly solving this)</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Rigorous evaluation of LIBERATED vs. more traditional development paradigms.</p>
    <p>Determine impact of described compromises  May require implementing parallel environment in</p>
    <p>different language</p>
    <p>Object relations  Currently adhoc, enforced by application</p>
    <p>Better browserbased persistent storage  Indexed Database instead of localStorage?</p>
    <p>Additional operators in queries  Currently only and is supported</p>
  </div>
  <div class="page">
    <p>Source Code</p>
    <p>LIBERATED  https://github.com/liberated/liberated</p>
    <p>App Inventor Community Gallery  https://github.com/appinventorgallery/aig</p>
  </div>
</Presentation>
