<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ICNP07, Beijing, China 1</p>
    <p>PSM-throttling: Minimizing Energy Consumption for Bulk Data Communications in WLANs</p>
    <p>Enhua Tan1, Lei Guo1, Songqing Chen2, Xiaodong Zhang1</p>
  </div>
  <div class="page">
    <p>What is Going on in Internet?</p>
    <p>Wireless accesses to Internet are very pervasive:  Everywhere: campus, offices, home, public utilities   Most are supported by Wireless LANs</p>
    <p>Media content is heavily delivered in Internet:  Streaming: Real or Window media (&gt; 80% in TCP)  HTTP-based streaming: YouTube, Google Video (TCP)  TCP downloading: web sites (traditional or web 2.0)</p>
    <p>Mobile devices are increasingly diverse and portable:  Laptop, PDA, iPhone, WiFi phone</p>
    <p>Challenge: mobile devices can easily exhaust their batteries by viewing streaming media.</p>
  </div>
  <div class="page">
    <p>Limited Power in Mobile Devices</p>
    <p>WLAN</p>
    <p>Internet</p>
    <p>Access Point (AP)</p>
    <p>WiFi Phone</p>
    <p>Laptop PDA</p>
    <p>YouTube Servers</p>
    <p>Windows/Real Media Server</p>
    <p>Question: Can we minimize WNI (Wireless Network Interface) power consumption while satisfying the QoS requirement?</p>
    <p>Web Server</p>
    <p>Wireless Network Interface</p>
    <p>is a major power consuming source!</p>
  </div>
  <div class="page">
    <p>802.11 Power Saving Mode (PSM):  Wakeup every 100ms via PS poll  Limits:</p>
    <p>Buffered packets lead to delayed TCP acknowledgements  Increase round trip time estimation at the sender side  May degrade the TCP throughput</p>
    <p>PSM adaptive (PSM-A):  Widely used in commercial products  Only sleep when no packet receives for a while (e.g. 75ms)  Offer less power saving, but retain TCP performance</p>
  </div>
  <div class="page">
    <p>Ideal Power Saving Condition: Sleep Well and Work Energetically</p>
    <p>If the media traffic can form a predictable pattern:  periodic bursts  Client WNI can sleep/work periodically</p>
    <p>Time</p>
    <p>Sleeping</p>
    <p>Receiving Packets</p>
  </div>
  <div class="page">
    <p>Forming Ideal Condition by Proxy</p>
    <p>Buffer and shape media traffic into periodical bursts  A proxy between mobile devices and media servers  Devices can predict packet arrival time, safely sleeping</p>
    <p>minimizing power consumption without performance loss  Limits:</p>
    <p>modified client  Proxy needs to handle diverse communication protocols  Needs a dedicated and expensive infrastructure</p>
    <p>Reference: Chandra &amp; Vahdat, USENIX02</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Can we minimize mobile devices power consumption while satisfying the QoS requirement, without using a dedicated proxy?</p>
    <p>Internet Server</p>
    <p>Wireless Device</p>
    <p>Proxy</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem Statement  Motivation and Overview Design  Internet Experiments on Bandwidth Throttling  PSM-throttling Design  Evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Conventional TCP Throughput Control</p>
    <p>Internet</p>
    <p>Server</p>
    <p>Client Full-Speed Transmission</p>
    <p>TCP Congestion Control</p>
    <p>TCP Congestion Control</p>
    <p>Works well for low volume of simultaneous requests</p>
    <p>Large volume of simultaneous requests make servers be the bottleneck</p>
    <p>TCP congestion control cannot well address server bottleneck problem</p>
  </div>
  <div class="page">
    <p>Bandwidth Throttling: Serve Large Volume of Requests Simultaneously</p>
    <p>Internet</p>
    <p>Media Server</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Bandwidth Throttling:</p>
    <p>Server sends packets at a limited constant rate (lower than end-to-end bandwidth)  More Simultaneous requests will be served</p>
    <p>Underutilized bandwidth</p>
  </div>
  <div class="page">
    <p>Bandwidth Throttled TCP Transmission</p>
    <p>Server</p>
    <p>Client WNI</p>
    <p>Win = 256 K</p>
    <p>Receiving</p>
    <p>Window size defaults to 256K  ACK every two data packets  Transfer rate throttled by the server in a constant rate  WNI is busy receiving, no time to sleep</p>
  </div>
  <div class="page">
    <p>PSM-throttling: A Client-hinted Mechanism to Create Bursts for Power Saving</p>
    <p>Server</p>
    <p>Client WNI</p>
    <p>Win = 20 K</p>
    <p>Win = 0</p>
    <p>recv sleep</p>
    <p>Flow burst period</p>
    <p>Win = 20 K</p>
    <p>Win = 0</p>
    <p>recv sleep</p>
    <p>Flow burst period</p>
    <p>Win = 20 K</p>
    <p>Burst tput  E2E</p>
    <p>bandwidth</p>
    <p>Average throughput = Normal</p>
    <p>Streaming/Transfer Rate</p>
    <p>No proxy needed  Application independent and client-centric: only</p>
    <p>add a new function in client WNI driver</p>
  </div>
  <div class="page">
    <p>Related Technical Issues</p>
    <p>How can a server recognize client hints?  Utilizing TCP flow control mechanism: placing hints in</p>
    <p>receive window field in the TCP header  No change to servers</p>
    <p>An ACK packet during sleep consumes trivial power  For a given flow burst period (T), E2E bandwidth, and</p>
    <p>average throughput (r), (win size = T  r)  burst and sleep times are determined  to sufficiently sleep, T should be larger than 2  RTT</p>
  </div>
  <div class="page">
    <p>Bandwidth Throttling Detection in TCP-based Media Transmissions</p>
    <p>Major media servers, such as Windows/Real Media servers, and lighttpd server (used by YouTube), have build-in bandwidth throttling</p>
    <p>We confirm this by detecting server-side throttling:  Choke the transmission for 200 ms at client side: Win = 0  Unchoke: Win = Original</p>
    <p>If resulting traffic bursts and the TCP throughput is remained the same  server is using bandwidth throttling</p>
    <p>We analyze the burst patterns and throughputs of Internet traffics to verify our detection methods</p>
  </div>
  <div class="page">
    <p>Real Media Server: A Sequence without Choke/Unchoke</p>
    <p>Packets are continuously Delivered: Tput = 350Kbps</p>
  </div>
  <div class="page">
    <p>Real Media Server: the Sequence with Periodical Choking</p>
    <p>Bursty and keeps the TCP Throughput: Tput = 350Kbps</p>
  </div>
  <div class="page">
    <p>Windows Media Server: a Sequence without Choke/Unchoke</p>
  </div>
  <div class="page">
    <p>Windows Media Server: the Sequence with Periodical Choking</p>
    <p>Bursty and keeps the TCP throughput</p>
  </div>
  <div class="page">
    <p>Linux File Server: a Sequence without choke/unchoke</p>
  </div>
  <div class="page">
    <p>Linux File Server: the Sequence with Periodical Choking</p>
    <p>TCP throughput reduced!  No throttling at the server side</p>
  </div>
  <div class="page">
    <p>PSM-throttling Design: Bandwidth Throttling Detection</p>
    <p>Measure the stable flow rate r for a specific duration T0</p>
    <p>Creating bursts by choking the connection for half of the time</p>
    <p>Measure the flow burst rate r</p>
    <p>If r  2r, server is engaging bandwidth throttling, which can be used for power saving in PSM-throttling</p>
  </div>
  <div class="page">
    <p>PSM-throttling Design: Further Increase Traffic Burst</p>
    <p>If the burst rate is not high enough (not fully utilizing the wireless channel):</p>
    <p>Client waits for about 20 ms so that there are enough packets buffered at the AP</p>
    <p>PS Poll to receive the buffered packets  More bursty!</p>
  </div>
  <div class="page">
    <p>Prototype Implementation</p>
    <p>Add a new function to client WNI driver:  D-Link DWL-G520 wireless card (Atheros chipset)  Madwifi 0.9.2 driver under Linux 2.6.18</p>
    <p>Comparing with 4 other schemes  CAM: Continually Aware Mode (no power saving)  CC: Client-Centric (IWQoS04)  PSM: Power Saving Mode (IEEE standard)  PSM-A: PSM Adaptive (focus on comparing with)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Lab and Internet Experiments:</p>
  </div>
  <div class="page">
    <p>Performance Evaluation Results</p>
    <p>Windows and Real media streaming</p>
    <p>-50%</p>
    <p>-75%</p>
  </div>
  <div class="page">
    <p>Performance Evaluation Results (cont.)</p>
    <p>YouTube pseudo streaming; HTTP downloading</p>
    <p>-75%</p>
    <p>-58%</p>
  </div>
  <div class="page">
    <p>Summary  Internet bandwidth is no longer critical bottleneck, but servers</p>
    <p>due to increasingly high volume of simultaneous requests  Bandwidth throttling addresses this problem</p>
    <p>We take this unique opportunity to design and implement PSMthrottling to create receive/sleep periods for power saving on WNI</p>
    <p>PSM-throttling has the merits of:  No additional infrastructure support</p>
    <p>Application independent and client-centric</p>
    <p>Save up to 75% of the power and keep the TCP throughput</p>
    <p>Applicable for cellular networks and WiMax networks</p>
    <p>Hints from applications can further improve PSM-throttling</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Enhua Tan: etan@cse.ohio-state.edu http://www.cse.ohio-state.edu/hpcs/</p>
  </div>
  <div class="page">
    <p>PSM-throttling: Adaptation to Server Transmission Rate</p>
    <p>Dynamically adjust the receive window size</p>
    <p>If the throughput is not decreasing, increase the recv wnd size</p>
    <p>If sleep time falls below a RTT, decrease the recv wnd size</p>
  </div>
  <div class="page">
    <p>Evaluation of PSM-throttling Adaptation to Server Transmission Fluctuations</p>
    <p>As title</p>
  </div>
</Presentation>
