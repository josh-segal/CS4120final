<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Full Path to Full-Path Indexing</p>
    <p>Yang Zhan, Alex Conway, Yizheng Jiao, Eric Knorr, Michael A. Bender, Martin Farach-Colton, William Jannen, Rob Johnson, Donald E. Porter, Jun Yuan</p>
  </div>
  <div class="page">
    <p>Talk Overview  What is full-path indexing and its benefits?</p>
    <p>locality  What are the challenges?</p>
    <p>renames  How do we overcome them?</p>
    <p>data structure techniques: tree surgery and lifting</p>
  </div>
  <div class="page">
    <p>Conventional file systems use inodes /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>data of D ...</p>
    <p>...</p>
    <p>... data of C</p>
    <p>data of A</p>
    <p>... data of E</p>
    <p>... data of B</p>
    <p>disk ...</p>
    <p>worst case: no relation between the logical and physical locations</p>
  </div>
  <div class="page">
    <p>Inode file systems show no locality in the worst case /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>data of D ...</p>
    <p>...</p>
    <p>... data of C</p>
    <p>data of A</p>
    <p>... data of E</p>
    <p>... data of B</p>
    <p>disk ...</p>
    <p>read all files under /foo</p>
    <p>data of D</p>
    <p>data of C</p>
    <p>data of E</p>
    <p>multiple random IOs</p>
  </div>
  <div class="page">
    <p>Full-path indexing file systems use full-paths  Full-path indexing file systems index metadata and</p>
    <p>data in key-value stores using full-paths</p>
  </div>
  <div class="page">
    <p>Full-path indexing file systems use full-paths /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>disk</p>
    <p>logically related things are physically related</p>
    <p>... /A: data /bar/B: data /foo/C: data /foo/var/D: data</p>
    <p>... /foo/var/E: data</p>
  </div>
  <div class="page">
    <p>Full-path file systems ensure locality /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>disk</p>
    <p>read all files under /foo</p>
    <p>one large IO</p>
    <p>... /A: data /bar/B: data /foo/C: data /foo/var/D: data</p>
    <p>... /foo/var/E: data</p>
    <p>/foo/C: data /foo/var/D: data /foo/var/E: data</p>
  </div>
  <div class="page">
    <p>Scans are fast in full-path file systems</p>
    <p>ext4 btrfs BetrFS-FPxfs zfs</p>
    <p>se co</p>
    <p>nd s</p>
    <p>Time to grep the linux source directory (lower is better)</p>
    <p>full-path file systems are 3.3x faster than other file systems</p>
  </div>
  <div class="page">
    <p>Talk Overview  What is full-path indexing and its benefits?</p>
    <p>locality  What are the challenges?</p>
    <p>renames  How do we overcome them?</p>
    <p>data structure techniques: tree surgery and lifting</p>
  </div>
  <div class="page">
    <p>Renames are cheap in inode file systems /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>data of D ...</p>
    <p>...</p>
    <p>... data of C</p>
    <p>data of A</p>
    <p>... data of E</p>
    <p>... data of B</p>
    <p>disk ...</p>
    <p>rename /foo/var to /bar/var</p>
    <p>one pointer swing</p>
  </div>
  <div class="page">
    <p>Renames are cheap in inode file systems /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>data of D ...</p>
    <p>...</p>
    <p>... data of C</p>
    <p>data of A</p>
    <p>... data of E</p>
    <p>... data of B</p>
    <p>disk ...</p>
    <p>rename /foo/var to /bar/var</p>
    <p>no change</p>
  </div>
  <div class="page">
    <p>Renames seem expensive with full-path indexing /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>... /A: data /bar/B: data /foo/C: data /foo/var/D: data</p>
    <p>... /foo/var/E: data</p>
    <p>disk</p>
    <p>rename /foo/var to /bar/var</p>
    <p>/foo/var/D: data /foo/var/E: data</p>
    <p>need to maintain key order</p>
  </div>
  <div class="page">
    <p>Renames seem expensive with full-path indexing</p>
    <p>... /A: data /bar/B: data /foo/C: data</p>
    <p>...</p>
    <p>/foo/var/D: data /foo/var/E: data</p>
    <p>... /A: data /bar/B: data</p>
    <p>/foo/C: data ...</p>
    <p>/bar/var/D: data /bar/var/E: data</p>
    <p>Expensive when rename size is large</p>
  </div>
  <div class="page">
    <p>Renaming big files are slow in full-path file systems</p>
  </div>
  <div class="page">
    <p>Renaming big files are slow in full-path file systems</p>
    <p>slow</p>
  </div>
  <div class="page">
    <p>Renaming big files are slow in full-path file systems</p>
    <p>Rename the Linux source directory takes 20 seconds</p>
    <p>slow</p>
  </div>
  <div class="page">
    <p>Inode vs. Full-path indexing</p>
    <p>rename locality</p>
    <p>inode file systems</p>
    <p>full-path file systems</p>
    <p>We want to get decent renames with good locality</p>
  </div>
  <div class="page">
    <p>In FAST 2016, zoning was introduced to BetrFS  Zoning tries to get both locality and fast renames</p>
    <p>Zoning tries to solve the rename problem</p>
  </div>
  <div class="page">
    <p>Zoning Example /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>full-path indexing within one zone</p>
    <p>indirection between zones zone maintenance cost: a zone is too large: zone split a zone is too small: zone merge</p>
  </div>
  <div class="page">
    <p>Zoning tries to achieve both fast renames and locality</p>
    <p>small zones (inode file systems)</p>
    <p>big zones (full-path file systems)</p>
    <p>scan cost rename cost</p>
    <p>sweet spot</p>
  </div>
  <div class="page">
    <p>Zoning performance</p>
    <p>rename locality other operations</p>
    <p>zoning</p>
  </div>
  <div class="page">
    <p>Zoning achieves cheap renames</p>
  </div>
  <div class="page">
    <p>Zoning achieves cheap renames</p>
    <p>big files form their own zones, renaming them is cheap</p>
  </div>
  <div class="page">
    <p>Zoning performance</p>
    <p>rename locality other operations</p>
    <p>zoning</p>
  </div>
  <div class="page">
    <p>Zoning has relatively good locality</p>
    <p>ext4 btrfs BetrFS-FPxfs zfs</p>
    <p>se co</p>
    <p>nd s</p>
    <p>Time to grep the linux source directory (lower is better)</p>
    <p>BetrFS-Zone</p>
    <p>zoning is still 2.2x faster than other file systems, but 33% slower than full-path indexing</p>
  </div>
  <div class="page">
    <p>Zoning performance</p>
    <p>rename locality other operations</p>
    <p>zoning</p>
  </div>
  <div class="page">
    <p>Zone maintenance can be expensive</p>
  </div>
  <div class="page">
    <p>Zoning performance</p>
    <p>rename locality other operations</p>
    <p>zoning</p>
    <p>Zoning is not the answer</p>
  </div>
  <div class="page">
    <p>Talk Overview  What is full-path indexing and its benefits?</p>
    <p>locality  What are the challenges?</p>
    <p>renames  How do we overcome them?</p>
    <p>data structure techniques: tree surgery and lifting</p>
  </div>
  <div class="page">
    <p>Moving is expensive in an array /</p>
    <p>foo</p>
    <p>bar</p>
    <p>var</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>disk</p>
    <p>... /A /bar/B /foo/C /foo/var/D</p>
    <p>... /foo/var/E</p>
    <p>Moving kv pairs looks hard in an array, but they are stored in a B-tree in BetrFS</p>
  </div>
  <div class="page">
    <p>B-trees sometimes allow easy moves Can be viewed as B-trees in this talk</p>
    <p>/foo/var/D /foo/var/E</p>
    <p>/foo/C</p>
    <p>/bar/B</p>
    <p>/A</p>
    <p>leaves store kv pairs</p>
    <p>/bar/B /foo/C</p>
    <p>/A</p>
    <p>interior nodes store pivots and pointers to children</p>
  </div>
  <div class="page">
    <p>B-trees sometimes allow easy moves</p>
    <p>/foo/var/D /foo/var/E</p>
    <p>/foo/C</p>
    <p>/bar/B</p>
    <p>/A</p>
    <p>/bar/B /foo/C</p>
    <p>/A</p>
    <p>/foo/C</p>
    <p>move /foo/C to /C</p>
    <p>This move can be done by changing pivots and a pointer swing</p>
    <p>/foo/var/E</p>
  </div>
  <div class="page">
    <p>B-trees sometimes allow easy moves</p>
    <p>/foo/var/D /foo/var/E</p>
    <p>/foo/C</p>
    <p>/bar/B</p>
    <p>/A</p>
    <p>/bar/B /foo/C</p>
    <p>/A</p>
    <p>/foo/C</p>
    <p>move /foo/C to /C</p>
    <p>This move can be done by changing pivots and a pointer swing</p>
    <p>/C</p>
    <p>Problem 1: keys are not updated (should be /C)</p>
    <p>/foo/var/E</p>
    <p>Problem 2: not easy to move /foo/var/E</p>
    <p>/C</p>
  </div>
  <div class="page">
    <p>Two problems:  need to get an isolated subtree</p>
    <p>tree surgery in O(B-tree height) IOs  need to update keys</p>
    <p>lifting, no additional IO cost  The whole solution is called range-rename</p>
    <p>A rename can be done by moving a subtree</p>
  </div>
  <div class="page">
    <p>Tree surgery slices out an isolated subtree ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ......</p>
    <p>...</p>
    <p>... ..... .</p>
    <p>...</p>
    <p>get a subtree of range (/redmin, /redmax)</p>
    <p>completely in range</p>
    <p>need to take care of fringe nodes</p>
  </div>
  <div class="page">
    <p>Tree surgery slices out an isolated subtree ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ......</p>
    <p>...</p>
    <p>... ..... .</p>
    <p>...</p>
    <p>get a subtree of range (/redmin, /redmax)</p>
  </div>
  <div class="page">
    <p>Tree surgery slices out an isolated subtree ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ......</p>
    <p>...</p>
    <p>... ..... .</p>
    <p>...</p>
    <p>get a subtree of range (/redmin, /redmax)</p>
  </div>
  <div class="page">
    <p>Tree surgery slices out an isolated subtree ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>get a subtree of range (/redmin, /redmax)</p>
  </div>
  <div class="page">
    <p>Tree surgery slices out an isolated subtree ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>get a subtree of range (/redmin, /redmax)</p>
  </div>
  <div class="page">
    <p>Tree surgery slices out an isolated subtree ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>get a subtree of range (/redmin, /redmax)</p>
    <p>we now have a isolated subtree</p>
  </div>
  <div class="page">
    <p>Reasons:  to setup pivots for the source tree  POSIX allows renames to overwrite files</p>
    <p>Tree surgery also slices at the destination</p>
  </div>
  <div class="page">
    <p>Tree surgery finishes with a pointer swing</p>
    <p>... ...</p>
    <p>...</p>
    <p>rename /red to /blue</p>
    <p>...</p>
    <p>... ...</p>
    <p>.... ..</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Tree surgery finishes with a pointer swing</p>
    <p>... ...</p>
    <p>...</p>
    <p>rename /red to /blue</p>
    <p>...</p>
    <p>... ...</p>
    <p>.... ..</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Tree surgery completes in O(B-tree height) IOs ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ......</p>
    <p>...</p>
    <p>... ..... .</p>
    <p>...</p>
    <p>most data: not touched</p>
    <p>each subtree slicing go through two root-to-leaf path</p>
  </div>
  <div class="page">
    <p>Revert the IO cost to O(subtree size)</p>
    <p>Solution: lifting to convert B-trees to lifted B-trees  prefix updates are free</p>
    <p>Updating all keys in the subtree is expensive</p>
  </div>
  <div class="page">
    <p>Lifting lifts the common prefix of two pivots</p>
    <p>/redmax</p>
    <p>/orange /redmin</p>
    <p>/yellow /red/v /red/e</p>
    <p>/red/d /red/c</p>
    <p>/red/x /red/w</p>
    <p>/red/z /red/y</p>
    <p>/red/b /red/a</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>Common_prefix(/redmin, /redmax) = /red</p>
    <p>all keys in the subtree must have prefix /red, there is no need to store that</p>
    <p>lift /red</p>
  </div>
  <div class="page">
    <p>Lifting lifts the common prefix of two pivots</p>
    <p>/redmax</p>
    <p>/orange /redmin</p>
    <p>/yellow /v /e</p>
    <p>/d /c</p>
    <p>/x /w</p>
    <p>/z /y</p>
    <p>/b /a</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>lift /red</p>
    <p>Search for /red/z</p>
    <p>/red lifted, search for /z</p>
    <p>/red lifted, search for /z</p>
    <p>/red lifted, search for /z</p>
  </div>
  <div class="page">
    <p>Lifting lifts the common prefix of two pivots</p>
    <p>/redmax</p>
    <p>/orange /redmin</p>
    <p>/yellow /v /e</p>
    <p>/d /c</p>
    <p>/x /w</p>
    <p>/z /y</p>
    <p>/b /a</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>lift /red</p>
    <p>/bluemax</p>
    <p>/aqua /bluemin</p>
    <p>/orange</p>
    <p>lift /blue</p>
  </div>
  <div class="page">
    <p>Lifting lifts the common prefix of two pivots</p>
    <p>/blue/v /blue/e</p>
    <p>/blue/d /blue/c</p>
    <p>/blue/x /blue/w</p>
    <p>/blue/z /blue/y</p>
    <p>/blue/b /blue/a</p>
    <p>... ...</p>
    <p>...</p>
    <p>... ...</p>
    <p>/bluemax</p>
    <p>/aqua /bluemin</p>
    <p>/orange</p>
    <p>lift /blue</p>
    <p>all keys in the subtree are updated automatically after the pointer swing</p>
  </div>
  <div class="page">
    <p>Lifting happens at all times  Cost of other operations:</p>
    <p>collect lifted parts along the root-to-leaf path  no additional IO</p>
    <p>Cost of maintaining key lifting  key lifting can only change in node splits/merges  no additional IO</p>
    <p>Lifting does not introduce additional IOs</p>
  </div>
  <div class="page">
    <p>Range-rename performs tree surgery  O(B-tree height) IOs</p>
    <p>Key/value pairs are stored in lifted B-trees  keys are updated after tree surgery without cost</p>
    <p>Range-rename completes in O(B-tree height) IOs</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>other operations rename applications</p>
    <p>range-rename</p>
  </div>
  <div class="page">
    <p>Dell optilex destop  4-core 3.4 GHz i7, 4 GB RAM  7200 RPM 500 GB Seagate Barrcuda</p>
    <p>Experimental Setup</p>
  </div>
  <div class="page">
    <p>Tokubench</p>
    <p>no cliff</p>
    <p>Range-rename doesnt charge other operations as much as zoning</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>other operations rename applications</p>
    <p>range-rename</p>
  </div>
  <div class="page">
    <p>Rename Throughput</p>
  </div>
  <div class="page">
    <p>Rename Throughput</p>
    <p>In normal cases, range-rename can rename as fast as other file systems</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>other operations rename applications</p>
    <p>range-rename</p>
  </div>
  <div class="page">
    <p>IMAP benchmark</p>
    <p>ext4 btrfs BetrFS-Zonexfs zfs BetrFS-RR</p>
    <p>The throughput of 4 threads operating on the dovecot server (higher is better)</p>
    <p>op s/</p>
    <p>s</p>
    <p>BetrFS-RR is 12% faster than BetrFS-Zone</p>
  </div>
  <div class="page">
    <p>rsync benchmark</p>
    <p>ext4 btrfs BetrFS-Zonexfs zfs BetrFS-RR 0</p>
    <p>M B</p>
    <p>/s</p>
    <p>The throughput of rsync to copy the linux directory (higher is better)</p>
    <p>BetrFS-RR is 13% faster than BetrFS-Zone</p>
    <p>BetrFS-RR is faster than BetrFS-Zone in application benchmarks</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>other operations rename applications</p>
    <p>range-rename</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>other operations rename applications</p>
    <p>range-rename</p>
    <p>Lower taxes on non-rename operations  A few regressions</p>
    <p>Worst case rename costs: logarithmic in size  Additional opportunities for range rename</p>
    <p>in paper</p>
  </div>
  <div class="page">
    <p>BetrFS with range-rename  maintain full-path indexing  decent rename performance  no tradeoff: locality, rename and other operations</p>
    <p>Conclusion</p>
    <p>Web: betrfs.org Code: https://github.com/oscarlab/betrfs</p>
    <p>Email: betrfs@googlegroups.com</p>
  </div>
</Presentation>
