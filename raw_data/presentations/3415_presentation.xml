<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Loophole: Timing Attacks on Shared Event Loops in Chrome</p>
    <p>Pepe Vila and Boris Kpf</p>
    <p>vwzq.net</p>
    <p>@cgvwzq</p>
    <p>github.com/cgvwzq</p>
  </div>
  <div class="page">
    <p>EVENT DRIVEN PROGRAMMING</p>
    <p>SO HOT RIGHT NOW</p>
  </div>
  <div class="page">
    <p>EVENT DRIVEN PROGRAMMING</p>
    <p>SO HOT RIGHT NOW</p>
  </div>
  <div class="page">
    <p>Source: http://berb.github.io/diploma-thesis/original/042_serverarch.html</p>
  </div>
  <div class="page">
    <p>We exploit 2 different shared Event Loops in Chrome:</p>
  </div>
  <div class="page">
    <p>We exploit 2 different shared Event Loops in Chrome:</p>
    <p>I/Os of the Host Process</p>
    <p>Main threads of Renderers</p>
  </div>
  <div class="page">
    <p>We exploit 2 different shared Event Loops in Chrome:</p>
    <p>I/Os of the Host Process</p>
    <p>Main threads of Renderers</p>
    <p>And implement 3 different attacks:</p>
  </div>
  <div class="page">
    <p>Page Identification</p>
    <p>And implement 3 different attacks:</p>
    <p>We exploit 2 different shared Event Loops in Chrome:</p>
    <p>I/Os of the Host Process</p>
    <p>Main threads of Renderers</p>
  </div>
  <div class="page">
    <p>And implement 3 different attacks:</p>
    <p>Inter-keystroke Timing</p>
    <p>Page Identification</p>
    <p>We exploit 2 different shared Event Loops in Chrome:</p>
    <p>I/Os of the Host Process</p>
    <p>Main threads of Renderers</p>
  </div>
  <div class="page">
    <p>We exploit 2 different shared Event Loops in Chrome:</p>
    <p>I/Os of the Host Process</p>
    <p>Main threads of Renderers</p>
    <p>And implement 3 different attacks:</p>
    <p>Page Identification Covert Channel</p>
    <p>Inter-keystroke Timing</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher timee0</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e1</p>
    <p>e0</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e1</p>
    <p>e0</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0</p>
    <p>e1</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0</p>
    <p>e1</p>
    <p>e2</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1</p>
    <p>e2</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0</p>
    <p>e2</p>
    <p>e1</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1</p>
    <p>e2</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1</p>
    <p>e2</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1</p>
    <p>e2</p>
    <p>e3</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2</p>
    <p>e3</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1</p>
    <p>e3</p>
    <p>e2</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2</p>
    <p>e3</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2</p>
    <p>e3</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2</p>
    <p>e3</p>
    <p>e4</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2</p>
    <p>e4</p>
    <p>e3</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2 e3</p>
    <p>e4</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>e0 e1 e2 e3 e4</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>d0 d1 d2 d3</p>
    <p>e0 e1 e2 e3 e4</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>FIFO queue</p>
    <p>Dispatcher time</p>
    <p>Event-delay trace</p>
    <p>d0 d1 d2 d3</p>
    <p>e0 e1 e2 e3 e4</p>
    <p>Shared Event Loop</p>
  </div>
  <div class="page">
    <p>SYSTEM/INTERNET</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>NETWORK REQUESTS  IPC COMMUNICATION  DISPATCHES USER</p>
    <p>ACTIONS</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1 RENDERER 2 tab1 | trusted.com tab 2 |</p>
    <p>SHARED BETWEEN ALL RENDERERS</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1 RENDERER 2 tab1 | trusted.com tab 2 |</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1 RENDERER 2 tab1 | trusted.com tab 2 | evil.com</p>
  </div>
  <div class="page">
    <p>&lt;script&gt; function loop () { save(performance.now()); fetch(new Request(&quot;http://0/&quot;))</p>
    <p>.catch(loop); } loop(); &lt;/script&gt;</p>
    <p>Timing resolution of ~500 s</p>
    <p>Spying on the Host</p>
  </div>
  <div class="page">
    <p>Timing resolution of ~500 s</p>
    <p>With some smarter techniques we obtain &lt;100 s (see the paper)</p>
    <p>&lt;script&gt; function loop () { save(performance.now()); fetch(new Request(&quot;http://0/&quot;))</p>
    <p>.catch(loop); } loop(); &lt;/script&gt;</p>
    <p>Spying on the Host</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1 tab1 | trusted.com</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1</p>
    <p>JAVASCRIPT EXECUTION  RESOURCE PARSING  LAYOUT &amp; RENDERING</p>
    <p>tab1 | trusted.com</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1</p>
    <p>iframe | SHARED BETWEEN IFRAMES, POPUPS, MAX #RENDERER EXCEEDED</p>
    <p>tab1 | trusted.com</p>
  </div>
  <div class="page">
    <p>HOST PROCESS</p>
    <p>SYSTEM/INTERNET</p>
    <p>RENDERER 1</p>
    <p>iframe | evil.co</p>
    <p>tab1 | trusted.com</p>
  </div>
  <div class="page">
    <p>&lt;script&gt; function loop() { save(performance.now()); self.postMessage(0, &quot;*&quot;); } self.onmessage = loop; loop(); &lt;/script&gt;</p>
    <p>Timing resolution of &lt;25 s</p>
    <p>Spying on the Renderer</p>
  </div>
  <div class="page">
    <p>Duration of Events in the Renderer</p>
    <p>loop()</p>
    <p>GC scavenge</p>
    <p>Mouse movement</p>
    <p>JS event handlers</p>
    <p>-arch events</p>
  </div>
  <div class="page">
    <p>Duration of Events</p>
    <p>Responsive code is harder to identify</p>
    <p>loop()</p>
    <p>GC scavenge</p>
    <p>Mouse movement</p>
    <p>JS event handlers</p>
    <p>-arch events</p>
  </div>
  <div class="page">
    <p>LoopScan Tool</p>
    <p>https://github.com/cgvwzq/loopscan</p>
  </div>
  <div class="page">
    <p>Web Page Identification</p>
    <p>&amp; Inter-keystroke Timing</p>
  </div>
  <div class="page">
    <p>Web Page Identification</p>
    <p>Monitor the EventLoop while</p>
    <p>page loading</p>
  </div>
  <div class="page">
    <p>Dynamic Time Warping</p>
    <p>DTW is resistant to delays in the occurrence of events</p>
  </div>
  <div class="page">
    <p>Dynamic Time Warping</p>
    <p>DTW is resistant to delays in the occurrence of events</p>
  </div>
  <div class="page">
    <p>Dynamic Time Warping</p>
    <p>DTW is resistant to delays in the occurrence of events</p>
    <p>One trace for training</p>
  </div>
  <div class="page">
    <p>Web Page Identification</p>
    <p>Renderers main thread:</p>
    <p>Hosts I/O thread:</p>
    <p>(Linux desktop)</p>
    <p>(Macbook Pro)</p>
    <p>(recognition rates below 5% across machines)</p>
    <p>R-library and datasets: https://github.com/cgvwzq/rlang-loophole</p>
  </div>
  <div class="page">
    <p>Inter-keystroke Timing</p>
    <p>We obtain the password length and time between consecutive pressed keys</p>
  </div>
  <div class="page">
    <p>Inter-keystroke Timing</p>
    <p>precision:  = 6.1 ms</p>
  </div>
  <div class="page">
    <p>Inter-keystroke Timing</p>
    <p>More precision than network based attacks.</p>
    <p>Less noise than in micro-architectural attacks.</p>
    <p>No privileges. No training.</p>
    <p>precision:  = 6.1 ms</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
    <p>Reduce clock resolution</p>
    <p>Site Isolation Project</p>
    <p>CPU throttling</p>
    <p>Rate limiting</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
    <p>Reduce clock resolution</p>
    <p>Site Isolation Project</p>
    <p>CPU throttling</p>
    <p>Rate limiting</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Shared event loops in Chrome are vulnerable to timing side-channels</p>
    <p>We systematically study how this channel can be used for different attacks</p>
    <p>Fundamental design issues that need to be addressed</p>
  </div>
  <div class="page">
    <p>Thank you! :) Questions?</p>
  </div>
</Presentation>
