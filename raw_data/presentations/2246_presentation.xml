<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fair-EDF: A Latency Fairness Framework for Shared Storage Systems</p>
    <p>Yuhan Peng1, Peter Varman2</p>
    <p>Department of Computer Science1</p>
    <p>Department of Electrical and Computer Engineering2</p>
    <p>Rice University</p>
  </div>
  <div class="page">
    <p>Clustered Storage Systems</p>
  </div>
  <div class="page">
    <p>Latency Support</p>
    <p>Guaranteeing the response time</p>
    <p>Meet explicitly-specified QoS latency bounds</p>
    <p>Implicitly optimize average/tail latencies</p>
    <p>Request scheduling using metadata (tags)</p>
    <p>Needs enough server capacity to ensure latencies</p>
    <p>Admission control: overload avoidance or detection</p>
  </div>
  <div class="page">
    <p>Overload Avoidance Approaches</p>
    <p>Regulate input request traffic using token bucket</p>
    <p>Token bucket parameters based on QoS requirements</p>
    <p>pClock (SIGMETRICS PER 07), Nested QoS (Intel Tech Journal 12), PriorityMeister (SoCC 14)</p>
    <p>Requests delayed to conform to clients QoS input rate</p>
    <p>Clients which exceed their input rate incur high latency</p>
    <p>Cascading delays can cause excessive latency violations</p>
  </div>
  <div class="page">
    <p>Overload Detection Approaches</p>
    <p>RT-OPT (CASES Workshop 99)</p>
    <p>Offline algorithm for streaming videos</p>
    <p>Drops minimum number of overloaded requests</p>
    <p>All taken requests deadlines are guaranteed</p>
    <p>MittOS (SOSP 17)</p>
    <p>Predicts whether a request can meet its deadline</p>
    <p>System support for dropping or redirecting requests</p>
  </div>
  <div class="page">
    <p>Latency Support Difficulties</p>
    <p>Admission control in a distributed context is difficult</p>
    <p>Aggregate traffic control may be feasible</p>
    <p>Run-time variability makes per server control hard</p>
    <p>Requires accurate server workload estimation</p>
    <p>Inaccurate estimation may cause cascading deadline misses</p>
    <p>Needs significant capacity overprovisioning</p>
  </div>
  <div class="page">
    <p>This Paper</p>
    <p>Detecting and resolving server overloading by dropping requests</p>
    <p>Requests chosen to</p>
    <p>Minimize number of dropped requests</p>
    <p>Shape client QoS (% deadline violations)</p>
    <p>Assumes OS support like MittOS to support the dropped requests</p>
  </div>
  <div class="page">
    <p>EDF Scheduler</p>
    <p>Low implementation overhead</p>
    <p>Deadlines guaranteed if capacity is enough</p>
    <p>Limitations</p>
    <p>EDF cannot guarantee deadlines when overloaded</p>
    <p>The delays aggregate when overloaded</p>
    <p>Does not provide QoS</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Each request r</p>
    <p>Arrival time tr</p>
    <p>Deadline dr</p>
    <p>Service time</p>
    <p>Successful: r completes no later than dr</p>
    <p>Wasted:</p>
    <p>r is dropped (not scheduled)</p>
    <p>r completes after dr</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Client is success ratio fi  The fraction of Client is requests that succeed</p>
    <p>System success ratio F</p>
    <p>The fraction of the total requests that succeed</p>
    <p>Goal: min-max criterion</p>
    <p>Maximizing F</p>
    <p>Equalizing fi, i.e. maximize the lowest client success ratio</p>
  </div>
  <div class="page">
    <p>Fair-EDF Framework</p>
  </div>
  <div class="page">
    <p>Occupancy Chart</p>
    <p>Maintains the current set of taken requests</p>
    <p>Detects overload condition</p>
    <p>Provides information for which request to drop</p>
    <p>Each request r occupies one time slot of length</p>
    <p>Indicates the latest time to dispatch r to ensure all requests with deadlines later than dr are successful</p>
    <p>Partitioned into busy and idle intervals</p>
    <p>If no interval cross the current time Tnow, the server is not overloaded, i.e. all requests deadlines will be met</p>
  </div>
  <div class="page">
    <p>Occupancy Chart: Illustration 1</p>
    <p>= 10</p>
    <p>Tnow = 10</p>
  </div>
  <div class="page">
    <p>Occupancy Chart: Handling New Request</p>
    <p>Step 1: update the occupancy chart</p>
    <p>Locate dr in the occupancy chart</p>
    <p>If dr is in a idle interval: insert a new interval for r</p>
    <p>If dr is in a busy interval: add r to the interval and reduce the left bound of that interval by</p>
    <p>Merge the overlapping intervals</p>
  </div>
  <div class="page">
    <p>Occupancy Chart: Illustration 2</p>
    <p>Before</p>
    <p>A new request a5 arrives with deadline 70</p>
    <p>Create and insert the interval [60, 70]</p>
  </div>
  <div class="page">
    <p>Occupancy Chart: Illustration 3</p>
    <p>Before</p>
    <p>A new request b4 arrives with deadline 45</p>
    <p>Left shift the interval [40, 50] by 10</p>
    <p>Resulting interval [30, 50]</p>
    <p>Needs a merge since overlaps with [20, 30]</p>
  </div>
  <div class="page">
    <p>Occupancy Chart: Handling New Request</p>
    <p>Step 2: drop an overloaded request, if necessary</p>
    <p>The occupancy chart may become overloaded after adding the new request</p>
    <p>The first interval [L0, R0] has L0 &lt; Tnow</p>
    <p>Drop one from the first interval, based on QoS</p>
    <p>Drop a request from the candidate set that belongs to a client with the highest success ratio</p>
  </div>
  <div class="page">
    <p>Occupancy Chart: Illustration 4</p>
    <p>Before</p>
    <p>Two requests c1 and c2 arrive with deadlines 20 and 45</p>
    <p>Drop one from {a1, b1, b4, c1, c2}</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Implemented Fair-EDF in OpenMP</p>
    <p>Run experiments on a Linux server</p>
    <p>Hard disk: Intel SSD DC S3700</p>
    <p>CPU: Intel Xeon E5-2697</p>
    <p>Random uncached reads from a large file</p>
    <p>The server has a profiled capacity of 7300 IOPS</p>
    <p>We use  = 137s</p>
  </div>
  <div class="page">
    <p>Evaluation Methodology</p>
    <p>Compare Fair-EDF against (normal) EDF and Prudent-EDF</p>
    <p>Prudent-EDF seeks requests in EDF order</p>
    <p>Prudent-EDF drops requests with deadline already missed</p>
    <p>Prudent-EDF drops minimum number of request possible, but cannot shape the QoS profiles</p>
  </div>
  <div class="page">
    <p>Experiment 1: 2 Clients</p>
    <p>Configuration:</p>
    <p>Client 1 sends one request every 0.15ms</p>
    <p>6667 IOPS</p>
    <p>Client 2 sends a burst of 15 requests every 10ms</p>
    <p>1500 IOPS</p>
    <p>Total load 8167 IOPS &gt; server capacity 7300 IOPS</p>
    <p>System success ratio can be at most 0.89</p>
    <p>Client 1 requests latency bound = 0.5ms</p>
    <p>Client 2 requests latency bound = 25ms</p>
  </div>
  <div class="page">
    <p>Experiment 1: Success Ratio For Both Clients</p>
  </div>
  <div class="page">
    <p>Experiment 2: 10 Clients</p>
    <p>Configuration:</p>
    <p>Clients 1 ~ 8 send requests with different fixed rates</p>
    <p>Smaller latency bound</p>
    <p>Client 9, 10 send requests in bursty manners</p>
    <p>Higher latency bound</p>
    <p>Total load 8000 IOPS &gt; server capacity 7300 IOPS</p>
    <p>System success ratio can be at most 0.91</p>
  </div>
  <div class="page">
    <p>Experiment 2: Success Ratio For All Clients</p>
  </div>
  <div class="page">
    <p>Experiment 3: Adding SLOs</p>
    <p>Configuration:</p>
    <p>Same as Experiment 2, and adding SLOs</p>
    <p>Gold group: desired success ratio = 0.9</p>
    <p>Silver group: desired success ratio = 0.8</p>
    <p>Goal: equalizing relative success ratio / desired success ratio</p>
    <p>Try two group policies</p>
    <p>Policy 1: Gold = {1 ~ 8}, Silver = {9, 10}</p>
    <p>Policy 2: Gold = {9, 10}, Silver = {1 ~ 8}</p>
  </div>
  <div class="page">
    <p>Experiment 3: Success Ratio For All Clients</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Fair-EDF: fairness control for latency QoS</p>
    <p>Extends the standard EDF scheduler</p>
    <p>Use occupancy chart for overload detection</p>
    <p>Drops minimum number of requests</p>
    <p>Good for streaming applications</p>
    <p>Future work</p>
    <p>Supporting more QoS policies</p>
    <p>Optimize the algorithm for better scalability 27</p>
  </div>
  <div class="page">
    <p>Questions to Ask</p>
    <p>How does the industry think the importance of this problem?</p>
    <p>Would there be QoS-per-client or will just categories (platinum, gold, silver) be more useful?</p>
    <p>How to use machine learning in the framework for better prediction?</p>
  </div>
  <div class="page">
    <p>Backup Slide: Handling Dropped Requests</p>
    <p>Most old storage latency solutions tried to give isolation</p>
    <p>Delaying requests from clients behaving abnormally</p>
    <p>We have extended the idea to allow for unknown service times by using a secondary queue</p>
    <p>&quot;Latency Fairness Scheduling for Shared Storage Systems, IEEE NAS 2019</p>
  </div>
</Presentation>
