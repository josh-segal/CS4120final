<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RDMA Capable iWARP over Datagrams</p>
    <p>Ryan E. Grant1, Mohammad J. Rashti1, Pavan Balaji2, Ahmad Afsahi1</p>
    <p>Queens University Kingston, ON, Canada K7L 3N6</p>
    <p>Argonne National Laboratory</p>
    <p>Argonne, IL, USA</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Motivation  Background Information  Design  Experimental Framework and Results</p>
    <p>Microbenchmarks  Applications</p>
    <p>Conclusions  Future Work</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Existing RDMA designs do not provide support for RDMA write operations over unreliable datagram (UD) transports</p>
    <p>Popular applications use datagrams  video on demand streaming  high-speed financial trading applications</p>
    <p>Desirable to leverage RDMA technology to improve application performance</p>
    <p>Improve performance of inter-node communication for Ethernet clusters</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Sandvine Inc. Report from Monday  Netflix consumes 29.7% of peak time</p>
    <p>bandwidth in North America  Real-time entertainment consumes 49.2%  Predicting entertainment will consume 55-60%</p>
    <p>of peak time bandwidth by the end of 2011  RTE and filesharing consume almost 70% of</p>
    <p>peak time bandwidth</p>
    <p>Source: www.sandvine.com/news/pr_detail.asp?ID=312</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Why use UD?  Scalability, no need for connections  Speed, no TCP congestion control  Simplicity, less complex implementation for</p>
    <p>UD offloading than a TOE</p>
    <p>Drawbacks to UD?  Unreliability  Potential packet loss from congestion</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background Information  Design  Experimental Framework and Results</p>
    <p>Microbenchmarks  Applications</p>
    <p>Conclusions  Future Work</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Background Information</p>
    <p>iWARP  Remote Direct Memory Access over Ethernet</p>
    <p>Standard built on TCP or SCTP lower layer</p>
    <p>Queue pair based network</p>
    <p>Untagged and tagged models  Untagged, sent data matched with a posted receive</p>
    <p>for local data placement  Tagged, sender aware of remote memory window</p>
    <p>and provides target memory location</p>
  </div>
  <div class="page">
    <p>Background Information</p>
    <p>iWARP (UD) Stack versus Kernel TCP/IP Stack</p>
  </div>
  <div class="page">
    <p>Background Information</p>
    <p>Traditional iWARP RDMA Write</p>
    <p>W A</p>
    <p>R P</p>
    <p>s ta</p>
    <p>ck a</p>
    <p>p p li</p>
    <p>es t</p>
    <p>ag g</p>
    <p>ed</p>
    <p>h ea</p>
    <p>d er</p>
    <p>( S</p>
    <p>T ag</p>
    <p>a n</p>
    <p>d o</p>
    <p>ff se</p>
    <p>t)</p>
    <p>at a</p>
    <p>w ri</p>
    <p>tt en</p>
    <p>i n to</p>
    <p>m em</p>
    <p>o ry</p>
    <p>b as</p>
    <p>ed o</p>
    <p>n S</p>
    <p>T ag</p>
    <p>a n d</p>
    <p>o ff</p>
    <p>se t</p>
    <p>en d r</p>
    <p>eq u es</p>
    <p>t p</p>
    <p>o st</p>
    <p>ed</p>
    <p>ec v r</p>
    <p>eq u es</p>
    <p>t H</p>
    <p>an d</p>
    <p>le d</p>
    <p>Alternatively, the application can poll a bit in memory to determine when write is complete</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Relies on the lower layer (TCP) for reliability</p>
    <p>With a UD LLP:  If using UD, target buffer may not have</p>
    <p>complete message  Final send/recv lost in transit means complete</p>
    <p>iWARP message loss</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background Information  Design  Experimental Framework and Results</p>
    <p>Microbenchmarks  Applications</p>
    <p>Conclusions  Future Work</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Design - Challenges with UD Transports</p>
    <p>UD Transports provide additional challenges over TCP  Unreliable!  No order guarantees  No connection information</p>
    <p>But solves some problems as well  No middlebox fragmentation issues</p>
    <p>No need for iWARP markers</p>
  </div>
  <div class="page">
    <p>Challenges with UD</p>
    <p>RDMA functions like a local DMA, but Remote  For UD need to treat RDMA like an unreliable</p>
    <p>memory  Indicate which areas of memory are bad due</p>
    <p>to message loss</p>
    <p>Ideally it should be compatible with socket semantics  Done through an intermediate interface or</p>
    <p>protocol</p>
  </div>
  <div class="page">
    <p>Challenges with UD</p>
    <p>Allow for socket semantics compatibility  Each incoming message can result in a</p>
    <p>completion notification  Functions like traditional recvmsg but using</p>
    <p>user buffers  Similar to send/recv without posted recvs</p>
    <p>Allow for DMA-like interface  Produce a validity map for all valid areas of</p>
    <p>memory in a defined memory region  Essentially an aggregate of many completion</p>
    <p>notifications, delivered at once</p>
  </div>
  <div class="page">
    <p>Background InformationBackground Information</p>
    <p>iWARP RDMA Write-Record</p>
    <p>W A</p>
    <p>R P</p>
    <p>s ta</p>
    <p>ck a</p>
    <p>p p li</p>
    <p>es t</p>
    <p>ag g</p>
    <p>ed</p>
    <p>h ea</p>
    <p>d er</p>
    <p>( S</p>
    <p>T ag</p>
    <p>a n</p>
    <p>d o</p>
    <p>ff se</p>
    <p>t)</p>
    <p>at a</p>
    <p>w ri</p>
    <p>tt en</p>
    <p>i n to</p>
    <p>m em</p>
    <p>o ry</p>
    <p>b as</p>
    <p>ed o</p>
    <p>n S</p>
    <p>T ag</p>
    <p>a n d</p>
    <p>o ff</p>
    <p>se t</p>
  </div>
  <div class="page">
    <p>Solving the Challenges of UD</p>
    <p>Ordering  Small messages are typical of UD (&lt; 64K)  Direct placement avoids ordering issues for</p>
    <p>small messages  Large messages  need to keep a message</p>
    <p>sequence number counter for each user of a memory region</p>
    <p>No Connection Information  Pass senders IP/Port back to application upon</p>
    <p>application validity data fetch</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background Information  Design  Experimental Framework and Results</p>
    <p>Microbenchmarks  Applications</p>
    <p>Conclusions  Future Work</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Experimental Framework</p>
    <p>OS Processors NIC Switch</p>
    <p>Fedora Kernel 2.6.31</p>
    <p>NetEffect 10GigE Fujitsu 10GigE Switch</p>
    <p>Network Performance data collected using custom microbenchmark suite for software iWARP</p>
    <p>Application results collected using a custom socket interface to software iWARP and the following software:</p>
    <p>VideoLans VLC (http://www.videolan.org/vlc)</p>
    <p>SIPp (http://sipp.sourceforge.net)</p>
    <p>UD Send/Recv first proposed in: Mohammad J. Rashti, Ryan E. Grant, Pavan Balaji, and Ahmad Afsahi, &quot;iWARP Redefined: Scalable Connectionless Communication over High-Speed Ethernet&quot;, 17th International Conference on High Performance Computing (HiPC 2010), Goa, India, December 19-22, 2010.</p>
  </div>
  <div class="page">
    <p>Microbenchmark Results</p>
    <p>UD RDMA Write-Record has the lowest small message latency, similar to UD Send/Recv</p>
    <p>Verbs Small Message Latency</p>
    <p>Message Size (Bytes)</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y</p>
    <p>(</p>
    <p>s )</p>
    <p>UD Send/Recv RC Send/Recv</p>
    <p>UD RDMA Write-Record RC RDMA Write</p>
  </div>
  <div class="page">
    <p>Baseline Multi-Stream Performance</p>
    <p>RDMA Write-Record also has higher bandwidth for larger message sizes, and outperforms at medium message sizes as well</p>
    <p>UniDirectional Bandwidth</p>
    <p>Message Size (Bytes)</p>
    <p>B a</p>
    <p>n d</p>
    <p>w id</p>
    <p>th (</p>
    <p>M B</p>
    <p>/s )</p>
    <p>UD Send/Recv RC Send/Recv UD RDMA Write-Record RC RDMA Write</p>
  </div>
  <div class="page">
    <p>Microbenchmark Results  RDMA Write-Record is more loss tolerant for large messages than Send/Recv</p>
    <p>as well, as it delivers partial messages (messages may span multiple 64K UDP messages)</p>
    <p>UD Send/Recv Bandwidth under Packet Loss Conditions</p>
    <p>Message Size (Bytes)</p>
    <p>B a n d w id</p>
    <p>th ( M</p>
    <p>B /s</p>
    <p>)</p>
    <p>UD RDMA Write-Record Bandwidth under Packet Loss Conditions</p>
    <p>Message Size (Bytes)</p>
    <p>B a n d w id</p>
    <p>th ( M</p>
    <p>B /s</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Microbenchmark Summary</p>
    <p>RDMA Write-Record provides good performance  Beats RC RDMA Write at the most important</p>
    <p>message sizes for latency and bandwidth  Improves upon UD Send/Recv</p>
    <p>RDMA Write-Record fits well within existing socket semantics, enabling easy adoption  Removes MPA layer complexity as well as TCP</p>
    <p>bottlenecks to enhance performance and reduce overall stack complexity</p>
  </div>
  <div class="page">
    <p>Application Performance Results</p>
  </div>
  <div class="page">
    <p>Application Performance</p>
    <p>Tested with Media Streaming and SIP phone applications for performance  Developed a sockets to verbs interface to allow</p>
    <p>existing applications to use software iWARP stack (UD/RC iWARP)</p>
    <p>Lightweight interface to test functionality  Formally specified socket interface would be helpful</p>
    <p>in facilitating acceptance  Operates in one iWARP transport mode at a time</p>
    <p>only, RC or UD.  Sockets Direct Protocol is available for RC mode</p>
    <p>hardware (not compatible with software iWARP)</p>
  </div>
  <div class="page">
    <p>VLC Performance</p>
    <p>VLC performance shows significantly less buffering time required for UD iWARP over RC iWARP, a 74% average improvement.</p>
    <p>VLC Streaming Media Buffering Performance</p>
    <p>UD RC Transport Type</p>
    <p>T im</p>
    <p>e (</p>
    <p>m s</p>
    <p>)</p>
    <p>Send/Recv RDMA Write (Record)</p>
  </div>
  <div class="page">
    <p>SIP Performance</p>
    <p>Sip shows a 43.1% improvement in response times using UD over RC (send/recv and RDMA Write (Record) are statistically tied in performance for this test)</p>
    <p>SIP Response times</p>
    <p>UD RC</p>
    <p>Transport</p>
    <p>T im</p>
    <p>e (</p>
    <p>m s</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Application Performance Discussion</p>
    <p>Performance with UD is better than with RC</p>
    <p>Software solution is still using TCP/IP and UDP stacks  OS related overhead in both cases is similar  Performance benefits from simpler UDP</p>
    <p>transport  Hardware solutions would show benefit</p>
    <p>from having no target CPU involvement required for data reception (no posted recvs)</p>
    <p>Target system can receive information without local machine work request</p>
  </div>
  <div class="page">
    <p>Application Memory Usage</p>
    <p>The memory usage of a UD solution for a SIP application can be significantly less than that of an RC solution (24.1% @ 10000 clients)</p>
    <p>% Improvement in Memory Usage - UD vs RC</p>
    <p>Number of Concurrent Calls</p>
    <p>% I</p>
    <p>m p</p>
    <p>ro v</p>
    <p>e m</p>
    <p>e n</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Application Memory Usage</p>
    <p>Memory usage calculated using whole application memory usage as well as memory usage from the slab.</p>
    <p>Improvement of 24.1% @10000 users contrasts to theoretical improvement of 28.1%  Difference is in SIP applications requirement</p>
    <p>to store information on active UDP clients</p>
    <p>Scalability and offloaded networking for iWARP UD hardware are promising for increasing server capacity and throughput</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background Information  Design  Experimental Framework and Results</p>
    <p>Microbenchmarks  Applications</p>
    <p>Conclusions  Future Work</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>RDMA Write-Record is the first one-sided RDMA operation operable over UD on iWARP</p>
    <p>RDMA Write-Record allows for data transfer that can tolerate packet loss</p>
    <p>UD solution is more scalable than connection based one</p>
    <p>Full specifications for a two-sided Send/Recv and one-sided RDMA Write-Record over iWARP are now available</p>
    <p>Real applications show performance improvements using UD based iWARP</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Extend the work to include a reliable datagram transport, broadening the potential application space</p>
    <p>MPI-RDMA Write-Record interface for HPC applications</p>
    <p>Provide an SDP-like interface for UD iWARP</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Questions?</p>
    <p>Questions?</p>
    <p>This work was supported in part by: Natural Sciences and Engineering Research Council of Canada Grant #RGPIN/238964-2005, Canada Foundation for Innovation and Ontario Innovation Trust Grant #7154, Office of Advanced Scientific Computing Research, Office of Science, U.S. Department of Energy, under Contract DE-AC02-06CH11357, and the National Science Foundation Grant #0702182</p>
  </div>
</Presentation>
