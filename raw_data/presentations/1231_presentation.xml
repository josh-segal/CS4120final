<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FuZZan: Efficient Sanitizer Metadata Design for Fuzzing</p>
    <p>Yuseok Jeon1, WookHyun Han2, Nathan Burow1, Mathias Payer1 3</p>
  </div>
  <div class="page">
    <p>Sanitizer: Debug Policy Violations</p>
    <p>Observe actual execution and flag incorrect behavior  E.g., detect memory corruption or memory leak</p>
    <p>Many different sanitizers exist  Address Sanitizer (ASan)  Memory Sanitizer (MSan)  Thread Sanitizer (TSan)  Undefined Behavior Sanitizer (UBSan)</p>
  </div>
  <div class="page">
    <p>Address Sanitizer (ASan)  Address Sanitizer is the most widely used sanitizer</p>
    <p>Focuses on memory safety violations  Inserts redzone around objects  Uses shadow memory to record whether each byte is accessible  Detected over 10,000 memory safety violations</p>
    <p>Process memory Shadow memory</p>
    <p>RedZones</p>
    <p>Access invalid address p IsAccessible(p)</p>
    <p>accessible</p>
    <p>inaccessible</p>
    <p>inaccessible</p>
    <p>accessible inaccessible</p>
    <p>Bug</p>
  </div>
  <div class="page">
    <p>Fuzzing is an automated software testing technique  To detect triggered bugs, fuzzers leverage sanitizers  Combining a fuzzer with a sanitizer is popular and effective</p>
    <p>Fuzzer Random inputs</p>
    <p>Feedback</p>
    <p>Sanitizers</p>
    <p>Bug</p>
    <p>Fuzzing and Context</p>
  </div>
  <div class="page">
    <p>Sanitizer is not optimized for fuzzing environment  Highly repetitive and short execution</p>
    <p>Adapting ASan increases fuzzing performance overhead  E.g., avg 3.4x (up to 6.59x)</p>
    <p>Motivation</p>
    <p>Fuzzer + ASan Bug</p>
  </div>
  <div class="page">
    <p>(1) Memory management  Accessing large virtual memory area incurs overhead  Large memory area causes sparse Page Table Entries</p>
    <p>(2) ASan initialization (3) ASan logging</p>
    <p>Sanitizers Have High Overhead</p>
    <p>Page faults Memory management time</p>
    <p>[*] Memory manage functions: (i) do_wp_page, (ii) sys_mmap, (iii) unmap_vmas, and (iv) free_pgtable</p>
  </div>
  <div class="page">
    <p>FuZZan</p>
    <p>Introduce alternate light-weight metadata structures  Avoid sparse Page Table Entries  Minimize memory management overhead</p>
    <p>Runtime profiling to select optimal metadata structure</p>
    <p>Remove ASan logging overhead</p>
    <p>Remove ASan initialization overhead</p>
  </div>
  <div class="page">
    <p>FuZZan Design</p>
    <p>Fuzzer Target</p>
    <p>FuZZan sampling</p>
    <p>ASan shadow memory</p>
    <p>FuZZan RB-tree</p>
    <p>FuZZan Minshadow memory</p>
    <p>Fuzzing module</p>
    <p>Metadata structure selector</p>
    <p>Calculate the optimal metadata structure</p>
    <p>Dynamic feedback</p>
    <p>Switch</p>
    <p>Switch to selected optimal metadata structure</p>
    <p>Target</p>
  </div>
  <div class="page">
    <p>Propose two different light-weight metadata structures</p>
    <p>New Metadata Structures</p>
    <p>Metadata Structures</p>
    <p>Memory Management</p>
    <p>Cost</p>
    <p>Metadata Access Cost Target</p>
    <p>Address Sanitizer High Low O(1)</p>
    <p>FuZZan RB-tree Low</p>
    <p>High O(log n)</p>
    <p>Few metadata access</p>
    <p>Min-shadow Medium Low O(1)</p>
    <p>Frequent metadata access</p>
  </div>
  <div class="page">
    <p>ASan Memory Mapping</p>
    <p>Stack</p>
    <p>Heap (4TB)</p>
    <p>Shadow</p>
    <p>Bad</p>
    <p>Shadow</p>
    <p>BSS &amp; Data &amp; Text</p>
    <p>Stack</p>
    <p>Heap (4TB)</p>
    <p>Shadow</p>
    <p>Bad</p>
    <p>Shadow</p>
    <p>BSS &amp; Data &amp; Text</p>
    <p>+ Heap)</p>
  </div>
  <div class="page">
    <p>Min-shadow Memory Mapping</p>
    <p>Bad</p>
    <p>Shadow</p>
    <p>Stack (1GB)</p>
    <p>Heap (1GB)</p>
    <p>BSS &amp; Data &amp; Text</p>
    <p>Bad</p>
    <p>Shadow</p>
    <p>Stack (1GB)</p>
    <p>Heap (1GB)</p>
    <p>BSS &amp; Data &amp; Text</p>
    <p>+ heap)</p>
  </div>
  <div class="page">
    <p>Other Min-shadow Memory Modes</p>
    <p>Create additional min-shadow memory modes  To accommodate large heap size  1GB, 4GB, 8GB, and 16GB</p>
    <p>Bad Shadow</p>
    <p>Stack (1GB) Heap (1GB) BSS &amp; Data &amp; text (2GB)</p>
    <p>Shadow Memory 512MB</p>
    <p>Shadow Memory 896MB</p>
    <p>Shadow Memory 1.4G</p>
    <p>Shadow Memory 2.4G</p>
    <p>Bad Shadow</p>
    <p>Stack (1GB)</p>
    <p>Heap (4GB)</p>
    <p>BSS &amp; Data &amp; text (2GB)</p>
    <p>Bad Shadow</p>
    <p>Stack (1GB)</p>
    <p>Heap (8GB)</p>
    <p>BSS &amp; Data &amp; text (2GB)</p>
    <p>Bad Shadow</p>
    <p>Stack (1GB)</p>
    <p>Heap (16GB)</p>
    <p>BSS &amp; Data &amp; text (2GB)</p>
  </div>
  <div class="page">
    <p>Dynamic Switching Mode  Switch to selected metadata structure during fuzzing</p>
    <p>(1) Avoid users manual extra effort to select optimal metadata structure  No single metadata structure is optimal across all applications  E.g., RB tree for allocating few objects</p>
    <p>(2) Change metadata structure according to the targets behavior  Profile at runtime and switch to selected metadata structure  E.g., find new path</p>
    <p>(3) Increase heap size when target exceeds limitation</p>
  </div>
  <div class="page">
    <p>Sampling Mode</p>
    <p>Periodically measure the target programs behavior  Metadata access count (stack, heap, and global)  Heap object allocation size</p>
    <p>Maintain ASans error detection capabilities</p>
  </div>
  <div class="page">
    <p>Initialization/Logging Overhead</p>
    <p>Use fork server to avoid unnecessary re-initialization  E.g., poisoning of global variable  Move ASans initialization point before fork servers entry point</p>
    <p>Modify ASan to disable the logging functionality  Complete logging can be recovered with full ASan</p>
  </div>
  <div class="page">
    <p>Detection Capability  Juliet Test Suite</p>
    <p>NIST provides a test suite of all CWEs called Juliet  Test using memory corruption CWEs  Verified pass or fail all test cases as ASan</p>
    <p>Address Sanitizer provided unit test  Verified pass all possible test cases</p>
    <p>Fuzzing test using Google Fuzzer Test Suite  Fuzzing using 26 applications in test suite  Verified same detection capability during fuzzing</p>
    <p>CWE: Common Weakness Enumeration</p>
  </div>
  <div class="page">
    <p>Metadata Structure Performance</p>
  </div>
  <div class="page">
    <p>Performance Optimizations</p>
    <p>FuZZan-Logging-Opt: optimization for logging overhead FuZZan-Init-Opt: optimization for Initialization overhead FuZZan-Min-1G-Opt: min-shadow memory (1G) mode with logging and initialization overhead</p>
    <p>Compared to Asan</p>
    <p>Compared to AsanCompared to Asan</p>
  </div>
  <div class="page">
    <p>Dynamic Switching Performance</p>
  </div>
  <div class="page">
    <p>Performance Overhead Analysis</p>
    <p>Page faultsMemory management time</p>
    <p>Fuzzer + ASan Bug</p>
    <p>Fuzzer + FuZZan</p>
  </div>
  <div class="page">
    <p>Bug Finding Speed Testing</p>
  </div>
  <div class="page">
    <p>Real-world Fuzz Testing</p>
    <p>Unique discovered path</p>
    <p>Total execution number</p>
    <p>* the (M) denotes 1,000,000 (one million)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Combining a fuzzer with sanitizer hurts performance</p>
    <p>FuZZan massively reduces performance overhead  Novel metadata structures to condense memory space  Dynamic switching between metadata structures  Removing unnecessary operations</p>
    <p>FuZZan improves fuzzing throughput over ASan  Improves fuzzing throughput by 48% starting with provided seeds</p>
    <p>52% starting with empty seeds  Discovers 13% more unique paths given the same 24 hours  Provides flexibility to other sanitizers and AFL-based fuzzers</p>
    <p>https://github.com/HexHive/FuZZan</p>
  </div>
</Presentation>
