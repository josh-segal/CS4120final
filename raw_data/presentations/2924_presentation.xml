<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Making Geo-Replicated Systems Fast as Possible Consistent when Necessary</p>
    <p>Cheng Li, Daniel Porto, Allen Clement Johannes Gehrke, Nuno Preguia, Rodrigo Rodrigues</p>
    <p>Max Planck InsJtute for SoLware Systems, CITI / Universidade Nova de Lisboa, Cornell University</p>
  </div>
  <div class="page">
    <p>Higher latency =&gt; Less money</p>
    <p>[source: E. Schurman and J. Brutlag, Performance Related Changes and their User Impact. Talk at Velocity 09]</p>
  </div>
  <div class="page">
    <p>Geo-replicaJon is needed!</p>
    <p>Geo-replicaJon is used by major providers of Internet services.  e.g., Google, Amazon, Facebook, etc</p>
  </div>
  <div class="page">
    <p>Consistency or performance?</p>
    <p>Eventual consistency  e.g., Dynamo [SOSP07], Bayou [SOSP95]  Pros: Low latency  Cons: Undesirable behaviors</p>
    <p>Strong consistency  e.g., Paxos [TOCS98]  Pros: Natural seman7cs  Cons: High latency</p>
    <p>Can we build geo-replicated systems that are both fast and consistent?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Mixing strong and eventual consistency in a single system</p>
    <p>Transforming applicaJons to safely leverage eventual consistency when possible</p>
    <p>EvaluaJon</p>
  </div>
  <div class="page">
    <p>Balance strong/eventual consistency</p>
    <p>Strong consistency Eventual consistency</p>
    <p>A1 B1</p>
    <p>B2</p>
    <p>A2</p>
    <p>B3</p>
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
  </div>
  <div class="page">
    <p>Balance strong/eventual consistency</p>
    <p>Strong consistency Eventual consistency</p>
    <p>A1 B1</p>
    <p>B2</p>
    <p>A2</p>
    <p>B3</p>
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
  </div>
  <div class="page">
    <p>Balance strong/eventual consistency</p>
    <p>A1 B1</p>
    <p>B2</p>
    <p>A2</p>
    <p>B3</p>
    <p>R1</p>
    <p>R2</p>
    <p>R3</p>
    <p>A1</p>
    <p>R1</p>
    <p>B1</p>
    <p>B2</p>
    <p>R2 A2</p>
    <p>B3 R3</p>
    <p>RedBlue  Low latency of eventual consistency when possible  CoordinaJon for strong consistency only when necessary</p>
    <p>Eventual consistency Strong consistency</p>
  </div>
  <div class="page">
    <p>Gemini coordinaJon system</p>
    <p>Storage engine</p>
    <p>Storage engine</p>
    <p>Coordinator Coordinator</p>
    <p>Cross-site communicaJon</p>
    <p>A1</p>
    <p>R1</p>
    <p>B1</p>
    <p>B2</p>
    <p>A1 B1</p>
    <p>A1 B1</p>
    <p>R1</p>
    <p>R1</p>
    <p>B2</p>
    <p>B2</p>
    <p>Alice Bob R2</p>
    <p>R2</p>
    <p>R2</p>
  </div>
  <div class="page">
    <p>Gemini coordinaJon system</p>
    <p>Storage engine</p>
    <p>Storage engine</p>
    <p>Coordinator Coordinator</p>
    <p>Cross-site communicaJon</p>
    <p>A1</p>
    <p>R1</p>
    <p>B1</p>
    <p>B2</p>
    <p>R2</p>
    <p>Alice Bob</p>
    <p>A1 R1</p>
    <p>B1</p>
    <p>B1 B2 A1 R1</p>
    <p>B2</p>
    <p>R2 A2</p>
    <p>A2</p>
    <p>A2 B4</p>
    <p>B4</p>
    <p>R3</p>
    <p>R3</p>
    <p>B4 R3</p>
    <p>R2</p>
  </div>
  <div class="page">
    <p>A RedBlue consistent bank system</p>
  </div>
  <div class="page">
    <p>float balance, interest;</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(){ float delta=balance  interest; balance=balance + delta; }</p>
    <p>withdraw(float m){ if(balance-m&gt;=0) balance=balance - m; else print Error }</p>
    <p>A RedBlue consistent bank system</p>
    <p>float balance, interest;</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(){ float delta=balance  interest; balance=balance + delta; }</p>
    <p>withdraw(float m){ if(balance-m&gt;=0) balance=balance - m; else print Error }</p>
    <p>Alice in EU Bob in US</p>
    <p>IniBal: balance = 100, interest = 0.05</p>
    <p>deposit(20) accrueinterest()</p>
    <p>deposit(20) accrueinterest()</p>
    <p>float balance, interest;</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(){ float delta=balance  interest; balance=balance + delta; }</p>
    <p>withdraw(float m){ if(balance-m&gt;=0) balance=balance - m; else print Error }</p>
    <p>Problem: Different execuJon orders lead to divergent state.</p>
    <p>Cause: accrueinterest doesnt commute with deposit.</p>
    <p>ImplicaBon: Convergence requires Red, but Red is slow.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Mixing strong and eventual consistency in a single system</p>
    <p>Transforming applicaJons to safely leverage eventual consistency when possible</p>
    <p>EvaluaJon</p>
  </div>
  <div class="page">
    <p>Problem of replicaJng operaJons</p>
    <p>Alice in EU Bob in US</p>
    <p>IniBal: balance = 100, interest = 0.05</p>
    <p>deposit(20): +20 accrueinterest(): +5</p>
    <p>deposit(20) : +20 accrueinterest(): +6</p>
    <p>Two different decisions made by the same operaBon</p>
  </div>
  <div class="page">
    <p>Generator/Shadow operaJon</p>
    <p>IntuiJvely, the execuJon of accrueinterest can be divided into:  A generator operaJon</p>
    <p>decides how much interest to be accrued  has no side effects</p>
    <p>A shadow operaJon  adds the decided interest to the balance</p>
  </div>
  <div class="page">
    <p>Generate once, shadow everywhere</p>
    <p>Storage engine</p>
    <p>Storage engine</p>
    <p>Coordinator Coordinator</p>
    <p>Cross-site communicaJon</p>
    <p>Alice Bob</p>
    <p>G</p>
    <p>h(d,S) h(d,S)</p>
    <p>A1</p>
  </div>
  <div class="page">
    <p>Bank generator/shadow operaJons</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(){ float delta=balance  interest; balance=balance + delta; }</p>
    <p>withdraw(float m){ if(balance-m&gt;=0) balance=balance - m; else print Error }</p>
    <p>Original/Generator operaJon Shadow operaJon</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(float delta){ balance=balance + delta; }</p>
    <p>withdrawAck(float m) { balance=balance - m;</p>
    <p>} withdrawFail(){ }</p>
    <p>produces</p>
    <p>produces</p>
    <p>produces</p>
    <p>produces</p>
  </div>
  <div class="page">
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(float delta){ balance=balance + delta; }</p>
    <p>withdrawAck(float m) { balance=balance - m;</p>
    <p>} withdrawFail(){ }</p>
    <p>Bank generator/shadow operaJons</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(){ float delta=balance  interest; balance=balance + delta; }</p>
    <p>withdraw(float m){ if(balance-m&gt;=0) balance=balance - m; else print Error }</p>
    <p>Original/Generator operaJon Shadow operaJon</p>
    <p>deposit(float m){ balance = balance + m; }</p>
    <p>accrueinterest(float delta){ balance=balance + delta; }</p>
    <p>withdrawAck(float m) { balance=balance - m;</p>
    <p>} withdrawFail(){ }</p>
    <p>produces</p>
    <p>produces</p>
    <p>+m</p>
    <p>+delta</p>
    <p>produces</p>
    <p>produces</p>
    <p>-m</p>
    <p>All four shadow banking operaBons commute with each other!</p>
  </div>
  <div class="page">
    <p>Fast and consistent bank</p>
    <p>Alice in EU Bob in US</p>
    <p>deposit(20) : +20</p>
    <p>+20</p>
    <p>accrueinterest(): +5</p>
    <p>+5</p>
    <p>Generator op</p>
    <p>Shadow op</p>
    <p>IniBal: balance = 100, interest = 0.05</p>
    <p>+20 +5</p>
  </div>
  <div class="page">
    <p>Not so fast</p>
    <p>Alice in EU Bob in US</p>
    <p>deposit(20) : +20</p>
    <p>+20</p>
    <p>accrueinterest(): +5</p>
    <p>+5</p>
    <p>IniBal: balance = 100, interest = 0.05</p>
    <p>+5 +20</p>
  </div>
  <div class="page">
    <p>Not so fast</p>
    <p>Alice in EU Bob in US</p>
    <p>55 55</p>
    <p>-100 -80 -100 -80</p>
    <p>Problem: Different execuJon orders lead to a negaJve balance.</p>
    <p>Cause: Blue operaJons that potenJally break invariants execute without coordinaJon.</p>
    <p>ImplicaBon: We must label successful withdrawal ( withdrawAck) as Red.</p>
  </div>
  <div class="page">
    <p>Which must be Red or can be Blue?</p>
    <p>a shadow operaBon u</p>
    <p>commutes with all others?</p>
    <p>breaks invariants? Red Blue</p>
    <p>No</p>
    <p>Yes</p>
    <p>Yes</p>
    <p>No</p>
    <p>Ensuring state convergence</p>
    <p>Ensuring invariant preservaJon</p>
  </div>
  <div class="page">
    <p>Key ideas so far</p>
    <p>RedBlue consistency combines strong and eventual consistency into a single system.</p>
    <p>The decomposiJon of generator/shadow operaJons expands the space of possible Blue operaJons.</p>
    <p>A simple rule for labeling is provably state convergent and invariant preserving.</p>
  </div>
  <div class="page">
    <p>Evalua5on</p>
  </div>
  <div class="page">
    <p>QuesJons</p>
    <p>How common are Blue operaJons?</p>
    <p>Does RedBlue consistency improve user-observed latency?</p>
    <p>Does throughput scale with the number of sites?</p>
  </div>
  <div class="page">
    <p>QuesJons</p>
    <p>How common are Blue operaJons?</p>
    <p>Does RedBlue consistency improve user-observed latency?</p>
    <p>Does throughput scale with the number of sites?</p>
  </div>
  <div class="page">
    <p>Case studies</p>
    <p>ApplicaJons:  Two e-commerce benchmarks: TPC-W, RUBiS  One social networking app: Quoddy</p>
    <p>Apps # Original update txns # Blue/Red update ops</p>
    <p>TPC-W 7 0/7</p>
    <p>RUBiS 5 0/5</p>
    <p>Quoddy 4 0/4</p>
  </div>
  <div class="page">
    <p>Case studies</p>
    <p>ApplicaJons:  Two e-commerce benchmarks: TPC-W, RUBiS  One social networking app: Quoddy</p>
    <p>Apps # Original update txns # Blue/Red update ops # Shadow ops</p>
    <p># Blue/Red update ops</p>
    <p>TPC-W 7 0/7 16 14/2</p>
    <p>RUBiS 5 0/5 9 7/2</p>
    <p>Quoddy 4 0/4 4 4/0</p>
  </div>
  <div class="page">
    <p>How common are Blue operaJons?</p>
    <p>RunJme Blue/Red raJo in different applicaJons with different workloads:</p>
    <p>Apps workload Originally</p>
    <p>Blue (%) Red(%)</p>
    <p>TPC-W</p>
    <p>Browsing mix 96.0 4.0</p>
    <p>Shopping mix 85.0 15.0</p>
    <p>Ordering mix 63.0 37.0</p>
    <p>RUBiS Bidding mix 85.0 15.0</p>
    <p>Quoddy a mix with 15% update 85.0 15.0</p>
  </div>
  <div class="page">
    <p>How common are Blue operaJons?</p>
    <p>RunJme Blue/Red raJo in different applicaJons with different workloads:</p>
    <p>The vast majority of operaBons are Blue.</p>
    <p>Apps workload Originally With shadow ops</p>
    <p>Blue (%) Red(%) Blue (%) Red(%)</p>
    <p>TPC-W</p>
    <p>Browsing mix 96.0 4.0 99.5 0.5</p>
    <p>Shopping mix 85.0 15.0 99.2 0.8</p>
    <p>Ordering mix 63.0 37.0 93.6 6.4</p>
    <p>RUBiS Bidding mix 85.0 15.0 97.4 2.6</p>
    <p>Quoddy a mix with 15% update 85.0 15.0 100 0</p>
  </div>
  <div class="page">
    <p>QuesJons</p>
    <p>How common are Blue operaJons?</p>
    <p>Does RedBlue consistency improve user-observed latency?</p>
    <p>Does throughput scale with the number of sites?</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Experiments with:  TPC-W, RUBiS and Quoddy</p>
    <p>Deployment in Amazon EC2  spanning 5 sites (US-East, US-West, Ireland, Brazil, Singapore)</p>
    <p>locaJng users in all five sites and direcJng their requests to closest server</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Experiments with:  TPC-W, RUBiS and Quoddy</p>
    <p>Deployment in Amazon EC2  spanning 5 sites (US-East, US-West, Ireland, Brazil, Singapore)</p>
    <p>locaJng users in all five sites and direcJng their requests to closest server</p>
  </div>
  <div class="page">
    <p>Does RedBlue consistency improve user-observed latency?</p>
  </div>
  <div class="page">
    <p>Does throughput scale with the number of sites?</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>RedBlue consistency allows strong consistency and eventual consistency to coexist.</p>
    <p>Generator/shadow operaJon extends the space of fast operaJons.</p>
    <p>A precise labeling methodology allows for systems to be fast and behave as expected.</p>
    <p>Experimental results show our soluJon improves both latency and throughput.</p>
  </div>
  <div class="page">
    <p>THANK YOU!</p>
    <p>Making Geo-Replicated Systems Fast as Possible, Consistent when Necessary</p>
  </div>
</Presentation>
