<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ensuring Authorized Updates in</p>
    <p>Multi-user Database-Backed</p>
    <p>Applications</p>
    <p>Kevin Eykholt, Atul Prakash, Barzan Mozafari</p>
    <p>University of Michigan Ann Arbor</p>
  </div>
  <div class="page">
    <p>Database Backend</p>
    <p>Web Applications allow users to remotely</p>
    <p>access services</p>
    <p>Information stored in database</p>
    <p>Browser HTTP</p>
    <p>Front-end App Driver</p>
    <p>Connection Pool</p>
    <p>DDBMS</p>
    <p>Database Server</p>
    <p>Application Server</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Built-in Database Access Controls</p>
    <p>Browser Apache App Driver (JDBC)</p>
    <p>Connection Pool</p>
    <p>DDBMS</p>
    <p>Database Server</p>
    <p>Application Server</p>
    <p>Some DMBS provide fine-grained access control based context of connected user</p>
  </div>
  <div class="page">
    <p>Built-in Database Access Controls</p>
    <p>Browser Apache App Driver (JDBC)</p>
    <p>Connection Pool</p>
    <p>DDBMS</p>
    <p>Database Server</p>
    <p>Application Server</p>
    <p>But database user is not the same as application user!</p>
  </div>
  <div class="page">
    <p>Application based Access Controls</p>
    <p>CLAMP and Nemesis both define per-user access control policies on each table</p>
    <p>Most existing work defines access control policies using database views</p>
    <p>B. Parno, J. M. McCune, D. Wendlandt, D. G. Andersen, and A. Perrig. Clamp: Practical prevention of large-scale data leaks. In S &amp; P, 2009. M. Dalton, C. Kozyrakis, and N. Zeldovich. Nemesis: Preventing authentication &amp; access control vulnerabilities in web applications. In USENIX, 2009.</p>
  </div>
  <div class="page">
    <p>Database View</p>
    <p>Database views restrict a user to a portion of the database using a SELECT query</p>
    <p>Only allow customers to view their own orders</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = $current_id</p>
  </div>
  <div class="page">
    <p>Database View</p>
    <p>Existing techniques use views to restrict read/write access</p>
    <p>The same query can also express the write policy: Only allow customers to update their own orders</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = $current_id</p>
  </div>
  <div class="page">
    <p>What if you cant map a</p>
    <p>user to authorized rows</p>
    <p>in the table?</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>SELECT R.*</p>
    <p>FROM reviews R, orders_products P, orders O</p>
    <p>WHERE O.cust_id = current_id AND</p>
    <p>O.oid = OP.oid AND</p>
    <p>OP.product_id = R.product_id AND</p>
    <p>R.cust_id = $current_id</p>
    <p>Customers can only leave reviews for</p>
    <p>items they have purchased</p>
  </div>
  <div class="page">
    <p>Survey of Existing Web Applications</p>
  </div>
  <div class="page">
    <p>Insecure Code</p>
    <p>R. Abela. Infographic: Statistics about the security scans of 396 open source web applications. https://www.netsparker.com/s/r/bl/2016_statistics_open_source_web_application_scans.png</p>
  </div>
  <div class="page">
    <p>Insecure Code</p>
    <p>Symantec patches high risk vulnerabilities in endpoint protection. http://www.securityweek.com/symantec-patches-high-risk-vulnerabilities-endpoint-protection</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>Generality: Access control policy can be enforced read/write queries</p>
    <p>Correctness: Current user can only view/modify authorized information</p>
    <p>Architectural Compatibility:</p>
    <p>Solution works with existing web applications without requiring major changes</p>
    <p>Solution is not database specific</p>
    <p>Simple: Preliminary knowledge overhead is low</p>
  </div>
  <div class="page">
    <p>Proposed Solution</p>
    <p>Client HTTP</p>
    <p>Front-end App Driver</p>
    <p>Connection Pool</p>
    <p>DDBMS</p>
    <p>Database Server</p>
    <p>Application Server</p>
    <p>Implement the control in the database driver</p>
  </div>
  <div class="page">
    <p>Solution Outline</p>
    <p>What is Query Safety?</p>
    <p>How can Query Safety be enforced?</p>
    <p>Experiments with proposed methodology</p>
  </div>
  <div class="page">
    <p>Database Policies</p>
    <p>Two types of policies:</p>
    <p>Read Policy</p>
    <p>Write Policy</p>
    <p>A policy is composed of a set of rules for</p>
    <p>each database table</p>
  </div>
  <div class="page">
    <p>Policy Definitions</p>
    <p>Customers can only view/modify their own</p>
    <p>orders</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = current_id</p>
    <p>Read/Write Policy</p>
  </div>
  <div class="page">
    <p>Policy Definitions</p>
    <p>Customers can view items available in the</p>
    <p>store</p>
    <p>SELECT P.*</p>
    <p>FROM products P</p>
    <p>Read Policy</p>
    <p>SELECT P.*</p>
    <p>FROM products P</p>
    <p>WHERE 1=0</p>
    <p>Write Policy</p>
  </div>
  <div class="page">
    <p>Policy Definitions</p>
    <p>Customers can read any review, but only</p>
    <p>leave reviews for items they purchased</p>
    <p>SELECT R.*</p>
    <p>FROM reviews R</p>
    <p>Read Policy</p>
    <p>Write Policy SELECT R.*</p>
    <p>FROM reviews R, orders_products P, orders O</p>
    <p>WHERE O.cust_id = current_id AND</p>
    <p>O.oid = OP.oid AND</p>
    <p>OP.product_id = R.product_id AND</p>
    <p>R.cust_id = current_id</p>
  </div>
  <div class="page">
    <p>Query Safety</p>
    <p>A safe query is one that allows a user to</p>
    <p>only view/modify authorized tuples in the</p>
    <p>database identified by the security policy</p>
    <p>A read query is safe if it is read-safe</p>
    <p>A write query is safe if it is write-safe</p>
  </div>
  <div class="page">
    <p>Read-Safe Query</p>
    <p>A query is read-safe if the querys result is</p>
    <p>unchanged when executed on only the</p>
    <p>tables a user is authorized to access</p>
  </div>
  <div class="page">
    <p>Read-Safe Query</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = 1</p>
    <p>Read Policy</p>
    <p>SELECT orders_id</p>
    <p>FROM orders</p>
    <p>WHERE cust_id = 1</p>
    <p>Read-Safe</p>
    <p>SELECT *</p>
    <p>FROM orders</p>
    <p>Not Read-Safe</p>
  </div>
  <div class="page">
    <p>Write-Safe Query</p>
    <p>A query is write-safe if:</p>
    <p>tuples</p>
    <p>The results of the query should not change if the</p>
    <p>query is restricted to modifying tuples in the write</p>
    <p>policy</p>
  </div>
  <div class="page">
    <p>Write-Safe Query</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = 1</p>
    <p>Write Policy</p>
    <p>DELETE FROM orders</p>
    <p>WHERE cust_id = 1</p>
    <p>Write-Safe Queries</p>
    <p>DELETE FROM orders</p>
    <p>Not Write-Safe Queries</p>
    <p>INSERT INTO orders</p>
    <p>AS SELECT *</p>
    <p>FROM orders</p>
  </div>
  <div class="page">
    <p>Solution Outline</p>
    <p>What is Query Safety?</p>
    <p>How can Query Safety be enforced?</p>
    <p>Experiments with proposed methodology</p>
  </div>
  <div class="page">
    <p>Ensuring Query Safety</p>
    <p>Read Set Intersection</p>
    <p>Query</p>
    <p>Select Query?</p>
    <p>Execute Safe Query</p>
    <p>Phantom Extraction</p>
    <p>Yes</p>
    <p>No</p>
    <p>Read Safe Query</p>
    <p>Write Safe Query</p>
  </div>
  <div class="page">
    <p>Read Set Intersection</p>
    <p>Any query can be transformed to a read</p>
    <p>safe query by adding additional conditions</p>
    <p>to the WHERE clause of any SELECT</p>
    <p>queries</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = 1</p>
    <p>Read Policy</p>
    <p>SELECT *</p>
    <p>FROM orders</p>
    <p>SELECT *</p>
    <p>FROM orders</p>
    <p>WHERE O.cust_id = 1</p>
  </div>
  <div class="page">
    <p>Phantom Extraction</p>
    <p>query (Read Set Intersection)</p>
    <p>tuples authorized by the write policy</p>
    <p>Two strategies for step 2:</p>
    <p>V-Copy</p>
    <p>No-Copy</p>
  </div>
  <div class="page">
    <p>V-Copy</p>
    <p>Determines query safety using temporary</p>
    <p>tables</p>
    <p>Given a query, V-Copy always results in</p>
    <p>safe behavior</p>
  </div>
  <div class="page">
    <p>oid cust_id</p>
    <p>V-Copy</p>
    <p>oid cust_id</p>
    <p>INSERT INTO orders</p>
    <p>(oid, cust_id)</p>
    <p>VALUES(22, 2);</p>
    <p>Customer 1</p>
    <p>Driver</p>
    <p>oid cust_id</p>
    <p>INSERT INTO orders</p>
    <p>(oid, cust_id)</p>
    <p>VALUES(22, 2);</p>
    <p>oid cust_id</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = 1</p>
  </div>
  <div class="page">
    <p>oid cust_id</p>
    <p>V-Copy</p>
    <p>OID Cust_ID</p>
    <p>DELETE FROM</p>
    <p>orders</p>
    <p>Customer 1</p>
    <p>Driver</p>
    <p>oid cust_id</p>
    <p>DELETE FROM</p>
    <p>orders</p>
    <p>oid cust_id</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = 1</p>
    <p>oid cust_id</p>
  </div>
  <div class="page">
    <p>No-Copy</p>
    <p>Can only use when:</p>
    <p>Write Policy for table does not contains a join</p>
    <p>Query is not a nested INSERT</p>
    <p>And if the query is UPDATE, the SET clause</p>
    <p>only contains static values</p>
  </div>
  <div class="page">
    <p>No-Copy</p>
    <p>If the query is DELETE, append</p>
    <p>additional conditions to WHERE clause</p>
    <p>SELECT O.*</p>
    <p>FROM orders O</p>
    <p>WHERE O.cust_id = 1</p>
    <p>Write Policy</p>
    <p>DELETE</p>
    <p>FROM orders</p>
    <p>DELETE</p>
    <p>FROM orders</p>
    <p>WHERE O.cust_id = 1</p>
  </div>
  <div class="page">
    <p>Solution Outline</p>
    <p>What is Query Safety?</p>
    <p>How can Query Safety be enforced?</p>
    <p>Experiments with proposed</p>
    <p>methodology</p>
  </div>
  <div class="page">
    <p>SafeD</p>
    <p>We created SafeD, a custom JDBC driver,</p>
    <p>that implements both V-Copy and No-Copy</p>
    <p>Client HTTP</p>
    <p>Server App</p>
    <p>SafeD Driver</p>
    <p>Connection Pool</p>
    <p>MySql/ Postgres</p>
    <p>Database Server</p>
    <p>Application Server</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>TPC-C Benchmark</p>
    <p>Provided in OLTPBenchmark</p>
    <p>5 transaction types</p>
    <p>Scale factor: 20</p>
    <p>Worker count:</p>
    <p>60 (PostgreSQL)</p>
    <p>100 (MySQL)</p>
    <p>Phase Duration: 10 minutes</p>
  </div>
  <div class="page">
    <p>Access Roles and Policy</p>
    <p>Customer: Executes new order, order</p>
    <p>status, payment transactions</p>
    <p>Managers: Executes delivery and stock</p>
    <p>transactions</p>
  </div>
  <div class="page">
    <p>Performance Measures</p>
    <p>Average Latency</p>
    <p>Average Throughput</p>
  </div>
  <div class="page">
    <p>Performance Measurements</p>
    <p>When queries in the workload are safe</p>
    <p>What is the performance overhead compared</p>
    <p>to a database without built-in access controls?</p>
    <p>How does SafeD compare to an existing built</p>
    <p>in access control mechanism</p>
    <p>How does overall performance vary as the</p>
    <p>number of unsafe queries in the workload</p>
    <p>increase?</p>
  </div>
  <div class="page">
    <p>MySQL Performance Results</p>
    <p>No-Copy has an average latency overhead of 5.9% V-Copy has an average latency overhead of 6.1%</p>
  </div>
  <div class="page">
    <p>PostgreSQL Performance Results</p>
    <p>SafeD access controls has comparable performance to built-in Postgres Access Control</p>
  </div>
  <div class="page">
    <p>Modified Security Policy</p>
  </div>
  <div class="page">
    <p>Security Policy  Policy 2</p>
  </div>
  <div class="page">
    <p>PostgreSQL Performance Results</p>
    <p>No-Copy can sustain a much higher transaction throughput with much lower latency</p>
  </div>
  <div class="page">
    <p>Unsafe Queries</p>
    <p>Previous performance numbers were</p>
    <p>measured when all the queries in the</p>
    <p>workload were safe</p>
    <p>In addition to the normal TPC-C queries,</p>
    <p>we added a mix of unsafe read and write</p>
    <p>queries to the workload</p>
  </div>
  <div class="page">
    <p>PostgreSQL Performance Results  Unsafe</p>
    <p>Queries with Policy 1</p>
    <p>V-copy does not scale well as the number of unsafe queries increases</p>
  </div>
  <div class="page">
    <p>PostgreSQL Performance Results  Unsafe</p>
    <p>Queries with Policy 1 No-Copy sustains a higher average transaction rate</p>
  </div>
  <div class="page">
    <p>Syntax Knowledge Required</p>
    <p>SafeD  SELECT</p>
    <p>PostgreSQL  Policy and policy condition</p>
    <p>Role</p>
    <p>Oracle  System Context</p>
    <p>Login Trigger</p>
    <p>Policy</p>
    <p>Policy function</p>
  </div>
  <div class="page">
    <p>Developer Effort</p>
    <p>SafeD only requires basic SQL syntax to define</p>
    <p>Policies defined as intuitive SELECT statements</p>
    <p>Postgres and Oracle both have database specific syntax for access control</p>
  </div>
  <div class="page">
    <p>Ensuring Authorized Updates in Multi-user</p>
    <p>Database-Backed Applications</p>
    <p>Client HTTP</p>
    <p>Server App</p>
    <p>SafeD Driver</p>
    <p>Connection Pool</p>
    <p>DDBMS</p>
    <p>Database Server</p>
    <p>Application Server</p>
    <p>Kevin Eykholt keykholt@umich.edu</p>
  </div>
</Presentation>
