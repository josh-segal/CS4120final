<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Frontiers of Software Maintenance:</p>
    <p>Program Slicing</p>
    <p>Dave Binkley Loyola College</p>
    <p>Keith Gallagher Durham University</p>
  </div>
  <div class="page">
    <p>The Outline Slide!</p>
  </div>
  <div class="page">
    <p>The Little Slicer: Definition</p>
    <p>x = 42 d = 23 d</p>
    <p>x = 42 // !! d = 23</p>
  </div>
  <div class="page">
    <p>The Little Slicer: Data Dependence</p>
    <p>a = 42 x = 2 b = 23 + a y = 3 c = b + 2</p>
    <p>a = 42 x = 2 b = 23 + a y = 3 c = b + 2 c</p>
  </div>
  <div class="page">
    <p>The Little Slicer: Control Dependence</p>
    <p>a = 42 while (B) {</p>
    <p>a = b  2</p>
    <p>b = 64 } c = a + 2</p>
    <p>a = 42 while (B) {</p>
    <p>a = b  2 x = 10 b = 64</p>
    <p>} c = a + 2 c</p>
  </div>
  <div class="page">
    <p>The Little Slicer: Meaningful Semantics</p>
    <p>sum = 0 prod = 1 i = 1 while ( i &lt; 11) {</p>
    <p>prod = prod * i i = i + 1</p>
    <p>}</p>
    <p>sum = 0 prod = 1 i = 1 while ( i &lt; 11) {</p>
    <p>sum = sum + i prod = prod * i i = i + 1</p>
    <p>} prod</p>
  </div>
  <div class="page">
    <p>The Little Slicer: hmmm....</p>
    <p>y = 2</p>
    <p>while ( true) {</p>
    <p>x = 1 } y = 2 y</p>
  </div>
  <div class="page">
    <p>The Little Slicer: OOOWWW!!!</p>
    <p>L1: y = 1 goto L3</p>
    <p>L3:</p>
    <p>print y</p>
    <p>if (b) goto L2</p>
    <p>L1: y = 1 goto L3 z = 2</p>
    <p>L2: x = 3 goto L1</p>
    <p>L3: print x</p>
    <p>print y y</p>
  </div>
  <div class="page">
    <p>The Little Slicer Other Techniques: Forward</p>
    <p>sum =0 prod = 1 prod i = 0 while( i &lt; 11) {</p>
    <p>sum = sum + i prod = prod * i i = i + 1</p>
    <p>}</p>
    <p>prod = 1</p>
    <p>prod = prod * i</p>
  </div>
  <div class="page">
    <p>The Little Slicer Other Techniques: Dynamic</p>
    <p>// input 42</p>
    <p>read (a) if ( a &lt; 0)</p>
    <p>a = a x = 1 / a x</p>
    <p>// input 42</p>
    <p>read (a)</p>
    <p>x = 1 / a</p>
  </div>
  <div class="page">
    <p>The Little Slicer Other Techniques: Conditioned</p>
    <p>// a &gt; 0</p>
    <p>read (a) if ( a &lt; 0)</p>
    <p>a = a x = 1 / a x</p>
    <p>// a &gt; 0</p>
    <p>read (a)</p>
    <p>x = 1 / a</p>
  </div>
  <div class="page">
    <p>The Little Slicer Other Techniques: Amorphous</p>
    <p>sum =0 prod = 1 i = 0 while( i &lt; 11) {</p>
    <p>sum = sum + i i = i + 1</p>
    <p>} sum sum = 55</p>
  </div>
  <div class="page">
    <p>The Little Slicer Applications: Dicing main() { int c, nl, nc; nl = 0; nc = 1; c = getchar(); while ( c != EOF ) { nc = nc + 1; if ( c == '\n') nl = nl + 1; c = getchar(); } printf(&quot;%d \n&quot;, nl); printf(&quot;%d \n&quot;, nc); }</p>
  </div>
  <div class="page">
    <p>The Little Slicer Applications: Regression Testing</p>
    <p>main() { int c, nl, nc; nl = 1; nc = 0; c = getchar(); while ( c != EOF ) { nc = nc + 1; if ( c == '\n') nl = nl + 1; c = getchar(); } printf(&quot;%d \n&quot;, nl); printf(&quot;%d \n&quot;, nc); }</p>
  </div>
  <div class="page">
    <p>The Little Slicer Applications: Maintenance</p>
    <p>inword = NO; nl = 0; nw = 0; nc = 0; c = getchar(); while ( c != EOF ) { nc = nc + 1; if ( c == '\n') nl = nl + 1; if ( c == ' ' || c == '\n' || c == '\t') inword = NO; else if ( inword == NO ) { inword = YES; nw = nw + 1; } c = getchar(); }</p>
  </div>
  <div class="page">
    <p>Challenges Trends Future</p>
  </div>
  <div class="page">
    <p>Challenge 1</p>
    <p>Programs are less static</p>
    <p>Harder to statically predict code used (an issue for all static analysis)</p>
    <p>Consider imperative  OO  agents</p>
  </div>
  <div class="page">
    <p>Challenge 2</p>
    <p>Observation slicing has failed</p>
    <p>to capture the intuition that engineers bring to programming</p>
  </div>
  <div class="page">
    <p>Challenges  Intuition</p>
    <p>Observation slicing has failed to capture the intuition</p>
    <p>.</p>
    <p>This means opportunity!!</p>
    <p>For you!</p>
  </div>
  <div class="page">
    <p>Challenges  Intuition</p>
    <p>Why has slicing has failed to capture the intuition .</p>
    <p>At an average 1/3 of the program, perhaps slices are too large</p>
    <p>For example one might ask</p>
  </div>
  <div class="page">
    <p>Challenges  intuition One recent proposal thin slicing</p>
    <p>A thin slice includes only producer statements</p>
    <p>a = new A() // produces object o1</p>
    <p>a.f = new F() // produces o1.f d = a // not a producer x = d.f // uses o1.f (but not d)</p>
  </div>
  <div class="page">
    <p>From Challenges to Trends</p>
    <p>But first the dream</p>
  </div>
  <div class="page">
    <p>The (original) Dream Now Ill just slice on sum</p>
    <p>Programmer in Pink</p>
  </div>
  <div class="page">
    <p>Current Trends (the Reality)</p>
    <p>Slicing used to aid other analyses  in part</p>
    <p>e.g., Pauls SCAM Codesurfer Keynote  in whole</p>
    <p>model checking  dependence structure</p>
    <p>in theory</p>
  </div>
  <div class="page">
    <p>Trend 1 Slicing as an Aid</p>
    <p>Consider model checking when verifying a property</p>
    <p>Is there a memory leak when sending a message?</p>
  </div>
  <div class="page">
    <p>Slicing as an Aid</p>
  </div>
  <div class="page">
    <p>Slicing as an Aid</p>
    <p>5 times faster after slicing!</p>
  </div>
  <div class="page">
    <p>Trend 2 Slicing as an Aid</p>
    <p>Understanding dependence structure</p>
  </div>
  <div class="page">
    <p>(commitment) Dependence</p>
    <p>Ill go if you go</p>
  </div>
  <div class="page">
    <p>Dependence Cluster</p>
    <p>Ill go if you go</p>
    <p>Ill go if you go Ill go if you go</p>
    <p>Thus you get all or nothing!</p>
  </div>
  <div class="page">
    <p>Dependence Structure S</p>
    <p>lic e</p>
    <p>si ze</p>
    <p>Slices (sorted by size)</p>
  </div>
  <div class="page">
    <p>Dependence Structure A Second Program</p>
  </div>
  <div class="page">
    <p>Dependence Structure Breaking Dependence Clusters</p>
  </div>
  <div class="page">
    <p>Dependence Structure Automated Breaking</p>
    <p>time wdiff</p>
    <p>ctags</p>
    <p>barcode</p>
  </div>
  <div class="page">
    <p>Trend 3 In Theory</p>
    <p>Better Formal Understanding</p>
  </div>
  <div class="page">
    <p>Formalization</p>
    <p>Relate traditional operational semantics to</p>
    <p>more declarative denotational semantics</p>
  </div>
  <div class="page">
    <p>Formalization</p>
    <p>Semantics of reactive systems</p>
    <p>Example  rethink of control dependence definition</p>
  </div>
  <div class="page">
    <p>Control Dependence</p>
    <p>Traditional definition paths to END</p>
  </div>
  <div class="page">
    <p>Control Dependence</p>
    <p>Reactive definition oops  there is no END</p>
  </div>
  <div class="page">
    <p>Finally the Future</p>
    <p>iow, what my friends working on</p>
  </div>
  <div class="page">
    <p>Future Ideas</p>
    <p>Slicing design level concepts in code  Slicing architecture descriptions  Slicing UML  Slicing comments and documentation  Slicing from requirements to code and</p>
    <p>back  Slices as building blocks</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Think of a program as composed of particular syntactic entities</p>
    <p>Co de</p>
    <p>M on</p>
    <p>ke y Program</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Dominant tiles 1960s assembler instructions</p>
    <p>ADD CSECT BALR 12,0 USING *,12 AR 2,3 BR 14</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Dominant tiles 1970s statements</p>
    <p>if x 10,20,20 10 x = x * 1 20 continue</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Dominant tiles 1980s functions</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Dominant tiles 1990s objects</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Dominant tiles 2000s services</p>
  </div>
  <div class="page">
    <p>Future Ideas Program Composition</p>
    <p>Dominant tiles of the future</p>
    <p>slices!</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Sample Tool URLs  www.dsic.upv.es/users/elp/german/slicing  kathrin.dagstuhl.de/05451/Materials2  bandera.projects.cis.ksu.edu/papers/slicing.shtml  www.ssw.unilinz.ac.at/Research/Projects/ProgramSlicing  jslice.sourceforge.net  hissa.ncsl.nist.gov/~jimmy/refs.html  www.dagstuhl.de/en/program/calendar/semhp/?semnr=05451  www.gramatech.com</p>
    <p>(largely from the first 200 hits of the web search program slicing tools)</p>
  </div>
</Presentation>
