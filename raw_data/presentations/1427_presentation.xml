<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Software Engineering Institute Carnegie Mellon University Pittsburgh, PA 15213</p>
    <p>Historical Analysis of Exploit Availability Timelines</p>
    <p>(research paper, long) CSET August 10, 2020</p>
    <p>Allen D. Householder, Jeff Chrabaszcz, Trent Novelly, David Warren, Jonathan M. Spring</p>
  </div>
  <div class="page">
    <p>Document Markings Copyright 2020 Carnegie Mellon University.</p>
    <p>This material is based upon work funded and supported by the Department of Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center. References herein to any specific commercial product, process, or service by trade name, trade mark, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, recommendation, or favoring by Carnegie Mellon University or its Software Engineering Institute. NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN &quot;AS-IS&quot; BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT. [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution. Please see Copyright notice for non-US Government use and distribution. This material may be reproduced in its entirety, without modification, and freely distributed in written or electronic form without requesting formal permission. Permission is required for any other use. Requests for permission should be directed to the Software Engineering Institute at permission@sei.cmu.edu.</p>
    <p>CERT Coordination Center is registered in the U.S. Patent and Trademark Office by Carnegie Mellon University. DM20-0572</p>
  </div>
  <div class="page">
    <p>Exploit Development Lifecycle</p>
  </div>
  <div class="page">
    <p>Research questions</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>We want to use exploit publication as part of prioritization and triage of work items related to vulnerabilities1</p>
    <p>There is a long history of both practitioners2,3 and researchers4,5 using either active exploitation or public exploit code as part of vulnerability priority</p>
    <p>But none of this work has presented a data-driven, historical view of what has influenced exploit code publication during a long time window</p>
    <p>(EPSS). In Workshop on the Economics of Information Security, Boston, MA, June 2019. 4 Luca Allodi and Fabio Massacci. Comparing vulnerability severity and exploits using case-control studies. Transactions on</p>
    <p>Information and System Security, 17(1):120, 2014. 5 Carl Sabottke, Octavian Suciu, and Tudor Dumitras. Vulnerability disclosure in the age of social media: Exploiting twitter</p>
    <p>for predicting real-world exploits. In USENIX Security, pages 10411056, Washington, D.C., August 2015.</p>
  </div>
  <div class="page">
    <p>Methodology  Survival analysis</p>
    <p>We use survival analysis,1 by metaphor to hazard analysis in medicine, to estimate the impact of different factors on the survival of a CVE-ID  A CVE-ID survives as long as no public exploit code is</p>
    <p>associated with it  Publication date is  0, because we consider publication of</p>
    <p>exploit code tagged with the CVE-ID as de facto public disclosure</p>
    <p>The statistical model provides an interval estimate of how different features effect the survival of CVE-IDs in the population  Model assumes a proportional (multiplicative) relationship for the</p>
    <p>effect of each variable 1 David R Cox. Regression models and life-tables. Journal of the Royal Statistical Society: Series B (Methodological), 34(2):187202,</p>
  </div>
  <div class="page">
    <p>Data sources</p>
    <p>CVE-ID publication date and other data (2013-2020)  National Vulnerability Database  MITRE (for CVE, CWE, and CPE)  CERT/CC vulnerability notes  The Zero Day Initiative</p>
    <p>Exploit code publication date  GitHub repositories for:</p>
    <p>- Exploit Database - Metasploit Framework</p>
    <p>Data challenges:  Identifying equivalent exploits  Quality of manual tags</p>
  </div>
  <div class="page">
    <p>Results (all CVE-IDs)</p>
  </div>
  <div class="page">
    <p>Results (RQ1 and RQ2)</p>
    <p>- ~3,100 of ~75,800 CVE-IDs studied  ~42% of exploits published occur on the same day as</p>
    <p>disclosure 2. How quickly is such code published?</p>
    <p>Median: 2 days;  Mean: 91.5 days.  Different CWEs have different publication rates. E.g.:</p>
    <p>- CWE-400 (uncontrolled resource consumption) is 2-9 times less likely</p>
    <p>- CWE-113 (improper CRLF neutralization in HTTP headers) is 60-90 times more likely</p>
  </div>
  <div class="page">
    <p>Exploit Availability Accelerates with CWE Age</p>
    <p>Buffer Overflow Format String Path Traversal</p>
    <p>Cross-Site Request Forgery Use-After Free Dangerous File Upload</p>
    <p>Blue/Top Line: Older Red/Bottom Line: Newer Teal/Middle Line: Baseline</p>
    <p>Deserialization XML External Entity Reference</p>
    <p>Command Injection</p>
  </div>
  <div class="page">
    <p>Results (RQ3)</p>
    <p>likely to see a exploit publication  Number of CVE-IDs in the CWE category  larger category</p>
    <p>is 1.15 to 1.4 times more likely  CVE-ID publication date  more recently published CVE-IDs</p>
    <p>are 1.23 to 1.32 times more likely  Vendor  some vendors are more likely to have exploits</p>
    <p>published for their products than others; mostly, these are vendors of security products</p>
    <p>Number of vendors involved in vulnerability  no clear correlation between multi-party cases and exploitation</p>
  </div>
  <div class="page">
    <p>Interpretation</p>
    <p>Good: Relatively few CVE-IDs have exploit code published Good: Exploit search could be an automated part of prioritization Bad: CVE-IDs with exploit code often have it published quickly Bad: Exploit code publication speed is increasing over time</p>
    <p>One consistent interpretation is that the features that increase hazard (exploit code publication likelihood) are proxies for something like the value to attackers of the vulnerable component</p>
    <p>We lack a direct measure of value to attackers to check this</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Undercounting  Not all vulnerabilities get CVE-IDs  Not all exploit code is published  Not all public exploit code is collated in ExploitDB and Metasploit  Not all ExploitDB/Metasploit modules contain a CVE-ID Practical application  Not all ExploitDB/Metasploit modules are used by attackers  We are only able to measure correlation, not causation</p>
  </div>
  <div class="page">
    <p>Going forwards</p>
    <p>Try to assess latent variable of value of the vulnerable component to the adversary Integrate automated exploit code search into vulnerability triage and prioritization Assess categories of vulnerabilities that may not receive a CVE-ID or where exploit code is a configuration of some open-source tool  Attacks related to TLS certificates by an on-path attacker, for</p>
    <p>example, can be done by configuring a HTTP proxy</p>
  </div>
  <div class="page">
    <p>Thanks for your time!</p>
    <p>Contact jspring AT sei cmu edu Code:</p>
    <p>https://github.com/CERTCC/git_vul_driller</p>
    <p>Questions?</p>
  </div>
</Presentation>
