<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Weird Machines in ELF: A Spotlight on the Underappreciated Metadata</p>
    <p>Rebecca bx Shapiro bx@cs.dartmouth.edu</p>
    <p>Sergey Bratus sergey@cs.dartmouth.edu</p>
    <p>Sean W. Smith sws@cs.dartmouth.edu</p>
    <p>Dartmouth College</p>
    <p>WOOT Aug 13, 2013</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>History of metadata  In exploitation</p>
    <p>In defense</p>
    <p>Motivation: why ELF metadata  Overview of runtime loading  Cobbler: ELF metadata-driven computation  Conclusion</p>
  </div>
  <div class="page">
    <p>Our contributions  Highlight metadata as interesting attack vector  Built Turing-complete computation environment</p>
    <p>ELF metadata  instructions</p>
    <p>Runtime loader  machine</p>
    <p>Highlight loader's role in composition &amp; trust</p>
    <p>Image source: JHU Engineering Magazine</p>
  </div>
  <div class="page">
    <p>One of these things is not like the others...</p>
    <p>Trojans/viruses  SQL injection  Cross site scripting  Stack smashing (Aleph One)  Return-oriented programming</p>
  </div>
  <div class="page">
    <p>One of these things is not like the others...</p>
    <p>Trojans/viruses  SQL injection  Cross site scripting  Stack smashing (Aleph One)  Return-oriented programming</p>
    <p>bring your own code</p>
  </div>
  <div class="page">
    <p>One of these things is not like the others...</p>
    <p>Trojans/viruses  SQL injection  Cross site scripting  Stack smashing (Aleph One)  Return-oriented programming</p>
    <p>bring your own code</p>
    <p>bring your own data</p>
  </div>
  <div class="page">
    <p>BYO Code Attacks</p>
    <p>Idea  Untrusted-code injection == bad</p>
    <p>Defenses  Antivirus</p>
    <p>Data Execution Prevention (DEP)</p>
    <p>Address Space Layout Randomization (ASLR)</p>
    <p>Code signing</p>
    <p>Input sanitation</p>
  </div>
  <div class="page">
    <p>Malicious data execution</p>
    <p>Idea  Data  virtual machine bytecode  Execution environment  virtual machine  Weird machine</p>
    <p>Example  ROP  Injected well-formed stack frames  bytecode  Processor  virtual machine</p>
    <p>Defenses  ASLR (for ROP)  Code signing (sometimes)  Input sanity checking (sometimes)</p>
    <p>fuzzing</p>
  </div>
  <div class="page">
    <p>Role of data in attacks</p>
    <p>Typically straightforward: overwrite function pointers  Stack smashing</p>
    <p>Heap smashing</p>
    <p>Viruses</p>
    <p>(Means to an end)</p>
    <p>But not always  LOCREATE (Scapy)</p>
    <p>PE metadata-driven unpacker</p>
    <p>Signed PE code injection (Glcksmann)  Took advantage unsigned signature metadata</p>
  </div>
  <div class="page">
    <p>ELF Metadata-driven weird machines  Most defenses focus on BYO code attacks</p>
    <p>DEP, Antivirus</p>
    <p>Not deterred by existing ASLR  ELF metadata knows address layout</p>
    <p>Code never changed  Well-formed metadata</p>
    <p>Doesn't fail parsing checks</p>
    <p>Metadata more trusted than</p>
    <p>code  Defines address space layout</p>
    <p>Not focus of antivirus</p>
    <p>Achilles' heal of codesigning</p>
  </div>
  <div class="page">
    <p>Data-driven weird Turing machines</p>
    <p>Stack frames drive ROP machines  DWARF error handling metadata (Oakley, Bratus)  HTML + CSS3 (Fox-Epstein)  C++ Templates (Veldhuizen)</p>
  </div>
  <div class="page">
    <p>Loading, Linking, and ELF</p>
  </div>
  <div class="page">
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello)</p>
  </div>
  <div class="page">
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
  </div>
  <div class="page">
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
  </div>
  <div class="page">
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so RTLD_START()</p>
  </div>
  <div class="page">
    <p>libc.so</p>
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so RTLD_START()</p>
  </div>
  <div class="page">
    <p>libc.so</p>
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so hello RTLD_START() start()</p>
  </div>
  <div class="page">
    <p>libc.so</p>
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so hello ld.so RTLD_START() start()</p>
    <p>_dl_fixup()</p>
  </div>
  <div class="page">
    <p>libc.so</p>
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so hello ld.so RTLD_START() start()</p>
    <p>_dl_fixup()</p>
    <p>Runtime loading</p>
  </div>
  <div class="page">
    <p>libc.so</p>
    <p>How to execute an ELF exec(hello);</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so hello ld.so RTLD_START() start()</p>
    <p>_dl_fixup()</p>
    <p>Runtime loading Runtime linking</p>
  </div>
  <div class="page">
    <p>ELF metadata in a nutshell ELF executable</p>
    <p>what ELF contains</p>
    <p>expected memory map</p>
    <p>ELF metadata summary for RTLD</p>
    <p>in/exported functions/objects</p>
    <p>virtual addrs to patch</p>
    <p>Symbol + relocation metadata = virtual addr patching instructions</p>
    <p>Section headers</p>
    <p>Segment headers</p>
    <p>Dynamic table</p>
    <p>Symbol metadata</p>
    <p>Relocation metadata</p>
    <p>Program data</p>
    <p>Program code (text)</p>
    <p>Other ELF metadata</p>
  </div>
  <div class="page">
    <p>Introducing: Cobbler Our toolkit for taming the ELF weird machine</p>
    <p>Warning: the following is specific to Ubuntu 11.10's eglibc-2.13 on amd64</p>
  </div>
  <div class="page">
    <p>Cobbler: BrainF***-to-ELF compiler</p>
    <p>BF: an esoteric Turing-complete language  If BF program finishes  executable cleanly</p>
    <p>runs</p>
  </div>
  <div class="page">
    <p>Cobbler: BrainF***-to-ELF compiler</p>
    <p>BF: an esoteric Turing-complete language  If BF program finishes  executable cleanly</p>
    <p>runs</p>
    <p>hello ELF</p>
    <p>Eresi ELF parser</p>
  </div>
  <div class="page">
    <p>Cobbler: BrainF***-to-ELF compiler</p>
    <p>BF: an esoteric Turing-complete language  If BF program finishes  executable cleanly</p>
    <p>runs</p>
    <p>BF sourcehello ELF</p>
    <p>BF parser</p>
    <p>Eresi ELF parser</p>
  </div>
  <div class="page">
    <p>Cobbler: BrainF***-to-ELF compiler</p>
    <p>BF: an esoteric Turing-complete language  If BF program finishes  executable cleanly</p>
    <p>runs</p>
    <p>BF sourcehello ELF</p>
    <p>BF parser</p>
    <p>Eresi ELF parser</p>
    <p>BF-&gt;ELF compiler</p>
  </div>
  <div class="page">
    <p>Cobbler: BrainF***-to-ELF compiler</p>
    <p>BF: an esoteric Turing-complete language  If BF program finishes  executable cleanly</p>
    <p>runs</p>
    <p>BF sourcehello ELF</p>
    <p>BF parser</p>
    <p>Eresi ELF parser</p>
    <p>BF-&gt;ELF compiler</p>
    <p>Eresi ELF</p>
    <p>writer</p>
  </div>
  <div class="page">
    <p>Cobbler: BrainF***-to-ELF compiler</p>
    <p>BF: an esoteric Turing-complete language  If BF program finishes  executable cleanly</p>
    <p>runs</p>
    <p>BF sourcehello ELF</p>
    <p>BF parser</p>
    <p>Eresi ELF parser</p>
    <p>BF-&gt;ELF compiler</p>
    <p>Eresi ELF</p>
    <p>writer + hello ELF</p>
    <p>executable</p>
    <p>BF ELF</p>
  </div>
  <div class="page">
    <p>Section headers'</p>
    <p>Segment headers'</p>
    <p>Dynamic table'</p>
    <p>Symbol metadata</p>
    <p>Relocation metadata</p>
    <p>Program data</p>
    <p>Program code (text)</p>
    <p>Other ELF metadata</p>
    <p>BF Symbol metadata BF Relocation metadata</p>
    <p>BF-enhanced ELF executable</p>
  </div>
  <div class="page">
    <p>The BF-ELF virtual machine</p>
    <p>libc.so</p>
    <p>exec(hello) kernel</p>
    <p>hello ld.so</p>
    <p>ld.so RTLD_START() start()</p>
    <p>hello ld.so</p>
    <p>_dl_fixup()</p>
  </div>
  <div class="page">
    <p>Executing BF-ELF</p>
    <p>Required libraries loaded</p>
    <p>link_map structures created</p>
    <p>Relocations performed</p>
    <p>RTLD_START() start()</p>
    <p>in the runtime loader</p>
  </div>
  <div class="page">
    <p>Cobbler primitives</p>
    <p>Symbol metadata act as registers  Symbol value  register contents</p>
    <p>Memory mapped</p>
    <p>Contains metadata</p>
    <p>Bytecode built from relocation metadata</p>
    <p>add, mov, jnz</p>
  </div>
  <div class="page">
    <p>Cobbler bytecode</p>
    <p>Types of operands</p>
    <p>Immediate  value in relocation entry ($0x01)  Direct  address of value in relocation entry</p>
    <p>(*0xdeadbeef)  Register  value in register (%reg)</p>
    <p>Register = symbol specified by relocation entry  Register indirect  register contains address of the</p>
    <p>value ([%reg])  All destinations are specified in direct mode</p>
  </div>
  <div class="page">
    <p>Mov (immediate)</p>
    <p>Example: mov *0xbeef0000, $0x04</p>
    <p>mov &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)  &lt;value&gt; = immediate</p>
    <p>_RELATIVE beef0000 X 4</p>
    <p>virtual address relocation entry</p>
    <p>other regions of memory</p>
  </div>
  <div class="page">
    <p>type offset symbol addend</p>
    <p>_RELATIVE beef0000 X 4</p>
    <p>Mov (immediate)</p>
    <p>Example: mov *0xbeef0000, $0x04</p>
    <p>_RELATIVE beef0008 X 4</p>
    <p>mov &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)  &lt;value&gt; = immediate</p>
  </div>
  <div class="page">
    <p>type offset symbol addend</p>
    <p>_RELATIVE beef0000 X 4</p>
    <p>Mov (immediate)</p>
    <p>Example: mov *0xbeef0000, $0x04</p>
    <p>_RELATIVE beef0008 X 4</p>
    <p>mov &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)  &lt;value&gt; = immediate</p>
  </div>
  <div class="page">
    <p>type offset symbol addend</p>
    <p>_RELATIVE beef0000 X 4</p>
    <p>Mov (immediate)</p>
    <p>Example: mov *0xbeef0000, $0x04</p>
    <p>_RELATIVE beef0008 X 4</p>
    <p>mov &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)  &lt;value&gt; = immediate</p>
  </div>
  <div class="page">
    <p>type offset symbol addend</p>
    <p>_RELATIVE beef0000 X 4</p>
    <p>Mov (immediate)</p>
    <p>Example: mov *0xbeef0000, $0x04</p>
    <p>_RELATIVE beef0008 X 4</p>
    <p>mov &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)  &lt;value&gt; = immediate</p>
  </div>
  <div class="page">
    <p>type offset symbol addend</p>
    <p>_RELATIVE beef0000 X 4</p>
    <p>Mov (immediate)</p>
    <p>Example: mov *0xbeef0000, $0x04</p>
    <p>_RELATIVE beef0008 X 4</p>
    <p>mov &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)  &lt;value&gt; = immediate</p>
  </div>
  <div class="page">
    <p>Mov (indirect)</p>
    <p>Example: mov *0xbeef0000, [%foo]</p>
    <p>foo 0xbeef000 FUNC X 8</p>
    <p>_COPY beef0008 foo X</p>
    <p>(See publication)</p>
  </div>
  <div class="page">
    <p>Addition  add &lt;destination&gt;, &lt;addend 1&gt;, &lt;addend 2&gt;</p>
    <p>&lt;destination&gt; = direct (address of destination)</p>
    <p>&lt;addend 1&gt; = register</p>
    <p>&lt;addend 2&gt; = immediate</p>
  </div>
  <div class="page">
    <p>Addition</p>
    <p>add1 0x1 FUNC X X</p>
    <p>_SYM beef0000 add1 2</p>
    <p>Example: add *0xbeef0000, %add1, $0x02</p>
    <p>Symbol/Register</p>
  </div>
  <div class="page">
    <p>Addition</p>
    <p>add1 0x1 FUNC X X</p>
    <p>_SYM beef0000 add1 2</p>
    <p>Example: add *0xbeef0000, %add1, $0x02</p>
  </div>
  <div class="page">
    <p>Addition</p>
    <p>add1 0x1 FUNC X X</p>
    <p>_SYM beef0000 add1 2</p>
    <p>Example: add *0xbeef0000, %add1, $0x02</p>
  </div>
  <div class="page">
    <p>Addition</p>
    <p>add1 0x1 FUNC X X</p>
    <p>_SYM beef0000 add1 2</p>
    <p>Example: add *0xbeef0000, %add1, $0x02</p>
  </div>
  <div class="page">
    <p>Addition</p>
    <p>add1 0x1 FUNC X X</p>
    <p>_SYM beef0000 add1 2</p>
    <p>Example: add *0xbeef0000, %add1, $0x02</p>
  </div>
  <div class="page">
    <p>Jump if not zero</p>
    <p>jnz &lt;destination&gt;, &lt;value&gt;  &lt;destination&gt; = direct (address of destination)</p>
    <p>&lt;value&gt; = direct (address of value to check)</p>
  </div>
  <div class="page">
    <p>One does not simply tell the loader to not process the next relocation entry...</p>
  </div>
  <div class="page">
    <p>One does not simply tell the loader to not process the next relocation entry...</p>
    <p>(jnz cannot be implemented with a single relocation entry)</p>
  </div>
  <div class="page">
    <p>How relocation entries are processed (pseudocode)</p>
    <p>while (lm != NULL) {</p>
    <p>r = lm-&gt;dyn[DT_RELA];</p>
    <p>end = r + lm-&gt;dyn[DT_RELASZ];</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[DT_SYM]);</p>
    <p>}</p>
    <p>lm = lm-&gt;prev;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Clobbering ld.so data</p>
    <p>Next rela to process  lm-&gt;dyn[RELASZ]</p>
    <p># to process</p>
    <p>loop</p>
    <p>while (lm != NULL) {</p>
    <p>r = lm-&gt;dyn[RELA];</p>
    <p>end = r + lm-&gt;dyn[RELASZ];</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>lm = lm-&gt;prev;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Clobbering ld.so data</p>
    <p>Next rela to process  lm-&gt;dyn[RELASZ]</p>
    <p># to process</p>
    <p>loop</p>
    <p>while (lm != NULL) {</p>
    <p>r = lm-&gt;dyn[RELA];</p>
    <p>end = r + lm-&gt;dyn[RELASZ];</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>lm = lm-&gt;prev;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Clobbering ld.so data</p>
    <p>Next rela to process  lm-&gt;dyn[RELASZ]</p>
    <p># to process</p>
    <p>loop</p>
    <p>while (lm != NULL) {</p>
    <p>r = lm-&gt;dyn[RELA];</p>
    <p>end = r + lm-&gt;dyn[RELASZ];</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>lm = lm-&gt;prev;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Clobbering ld.so data</p>
    <p>Next rela to process  lm-&gt;dyn[RELASZ]</p>
    <p># to process</p>
    <p>loop</p>
    <p>while (lm != NULL) {</p>
    <p>r = lm-&gt;dyn[RELA];</p>
    <p>end = r + lm-&gt;dyn[RELASZ];</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>lm = lm-&gt;prev;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Clobbering ld.so data</p>
    <p>Next rela to process  lm-&gt;dyn[RELASZ]</p>
    <p># to process</p>
    <p>loop</p>
    <p>while (lm != NULL) {</p>
    <p>r = lm-&gt;dyn[RELA];</p>
    <p>end = r + lm-&gt;dyn[RELASZ];</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>lm = lm-&gt;prev;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Clobbering ld.so data</p>
  </div>
  <div class="page">
    <p>Conditional Branching  Have relocation entries do necessary bookkeeping  Use IFUNC symbol with a value that points to code</p>
    <p>that returns 0</p>
    <p>IFUNC symbol value treated as function pointer</p>
    <p>Symbols of type IFUNC only processed as function if st_shndx != 0</p>
    <p>Move value to test to ifunc's st_shndx  mov *(&amp;(ifunc_sym.st_shndx), &lt;test value&gt;)</p>
    <p>Finally .</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step</p>
    <p>ifunc 0xf0020 IFUNC ? X</p>
    <p>&amp;end</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step</p>
    <p>ifunc 0xf0020 IFUNC ? X</p>
    <p>&amp;end</p>
    <p>value to test</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step</p>
    <p>ifunc 0xf0020 IFUNC ? X</p>
    <p>&amp;end</p>
    <p>value to test</p>
    <p>returns 0</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if zero</p>
    <p>ifunc 0xf0020 IFUNC 0 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if zero</p>
    <p>ifunc 0xf0020 IFUNC 0 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if zero</p>
    <p>ifunc 0xf0020 IFUNC 0 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if zero</p>
    <p>ifunc 0xf0020 IFUNC 0 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if zero</p>
    <p>ifunc 0xf0020 IFUNC 0 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if zero</p>
    <p>ifunc 0xf0020 IFUNC 0 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if not zero</p>
    <p>ifunc 0xf0020 IFUNC 1 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if not zero</p>
    <p>ifunc 0xf0020 IFUNC 1 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>for (r; r &lt; end; r++ ) {</p>
    <p>relocate(lm, r, &amp;dyn[SYM]);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Jump if not zero  final step if not zero</p>
    <p>ifunc 0xf0020 IFUNC 1 X</p>
    <p>type offset symbol addend</p>
    <p>_SYM 0xdeadbee8 ifunc X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>X X X X</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Challenges  Preserve/restore ELF's existing metadata  Sanity checks make branching harder  Address of ld.so + it's data is randomized</p>
    <p>Addr of executable's link_map at fixed virtual addr</p>
    <p>&lt;end&gt; is stored on stack  Can locate stack at runtime</p>
  </div>
  <div class="page">
    <p>What else can ELF metadata do?</p>
    <p>Locate stack (see code)  Locate all mapped libraries (see paper)  Redirect library calls</p>
    <p>To insert root shell backdoor into ping (see paper)</p>
    <p>Perform function calls  (controlling arguments are tricky)</p>
  </div>
  <div class="page">
    <p>Conclusion  Code injection can lead to Bad Things  Defenders focus on code injection  Data can be just as powerful</p>
    <p>RTLD ELF relocation engine  Turing complete!</p>
    <p>ELF don't care about DEP or ASLR</p>
    <p>Loader implicitly trusts ELF</p>
    <p>Adaptability v. computing power  Is there a good balance?</p>
    <p>Image source: Jaganath on Wikipedia CC BY-SA 3.0</p>
  </div>
  <div class="page">
    <p>End.</p>
    <p>Thanks you!  The Dartmouth Trust Lab</p>
    <p>Sergey Bratus, Sean Smith</p>
    <p>WOOT reviewers (you know who you are)</p>
    <p>Qualcomm</p>
    <p>Our sponsors*</p>
    <p>*This work was sponsored in part by the DOE and Intel</p>
  </div>
  <div class="page">
    <p>Questions ?</p>
    <p>elf-bf-tools repository on github</p>
    <p>https://github.com/bx/elf-bf-tools</p>
    <p>@bxsays on twitter</p>
  </div>
</Presentation>
