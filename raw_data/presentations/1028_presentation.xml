<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Application Partitioning for Intel SGX Joshua Lind, Christian Priebe, Divya Muthukumaran,</p>
    <p>Dan OKeeffe, Pierre-Louis Aublin, Florian Kelbert Imperial College London</p>
    <p>Tobias Reiher TU Dresden</p>
    <p>Rdiger Kapitza TU Braunschweig</p>
    <p>David Goltzsche TU Braunschweig</p>
    <p>David Eyers University of Otago</p>
    <p>Christof Fetzer TU Dresden</p>
    <p>Peter Pietzuch Imperial College London</p>
    <p>dmuthuku@imperial.ac.uk</p>
  </div>
  <div class="page">
    <p>Trust in Cloud Services</p>
    <p>OS VMM</p>
    <p>Cloud platform</p>
    <p>Firmware</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Trust in Cloud Services</p>
    <p>Threats  Insider Attacks  Human error despite best practices  Vulnerabilities in large code bases</p>
    <p>OS VMM</p>
    <p>Cloud platform</p>
    <p>Firmware</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Trust in Cloud Services</p>
    <p>Traditional Security Models  Protect privileged code from untrusted user-level code</p>
    <p>OS VMM</p>
    <p>Cloud platform</p>
    <p>Firmware</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environments</p>
    <p>Flips Security Model  Secure area of a processor  Provides protection from higher privileged code  Trusted environment on top of untrusted cloud</p>
    <p>OS VMM</p>
    <p>Cloud platform</p>
    <p>Firmware</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Intel Software Guard Extensions (SGX)</p>
    <p>On commodity processors starting with Skylake  TEEs are called enclaves  18 CPU instructions to manage enclave lifecycle  Code &amp; data reside in Enclave Page Cache (EPC)</p>
    <p>Cache lines encrypted when written to memory  Restricted to 128MB</p>
    <p>Intel provides an SDK for Windows and Linux</p>
  </div>
  <div class="page">
    <p>Enclave Application Lifecycle</p>
    <p>Trusted function</p>
    <p>Ocall</p>
    <p>Return</p>
    <p>Start Enclave</p>
    <p>Ecall</p>
    <p>Higher Privileged Code (OS, VMM)</p>
    <p>Untrusted Code Enclave</p>
  </div>
  <div class="page">
    <p>Enclave Application Lifecycle</p>
    <p>Trusted function</p>
    <p>Return</p>
    <p>Start Enclave</p>
    <p>Ecall</p>
    <p>Untrusted Code Enclave</p>
    <p>Higher Privileged Code (OS, VMM)</p>
  </div>
  <div class="page">
    <p>Enclave Application Lifecycle</p>
    <p>Trusted function</p>
    <p>Return</p>
    <p>Start Enclave</p>
    <p>Ecall</p>
    <p>Untrusted Code Enclave</p>
    <p>Higher Privileged Code (OS, VMM)</p>
    <p>Enclave crossings through ecalls and ocalls incur a performance penalty</p>
  </div>
  <div class="page">
    <p>Porting applications to Enclaves</p>
    <p>Client</p>
    <p>How do you port a key-value store to run in an enclave?</p>
    <p>Get/Update</p>
    <p>Response</p>
  </div>
  <div class="page">
    <p>Library OS Inside Enclaves</p>
    <p>Standard Libraries</p>
    <p>Library OS</p>
    <p>Host OS</p>
    <p>Haven [OSDI14]</p>
    <p>Minimal system calls</p>
    <p>Pros  Run unmodified applications  Fixed shielded interface</p>
    <p>Cons  TCB is millions LoC!  Performance overhead</p>
  </div>
  <div class="page">
    <p>Standard Library Inside Enclaves</p>
    <p>Standard Libraries</p>
    <p>Library OS</p>
    <p>Host OS</p>
    <p>System calls</p>
    <p>Enhanced C Library</p>
    <p>Host OS</p>
    <p>Pros  Smaller TCB than Haven  Fixed shielded interface</p>
    <p>Cons  TCB = 0.6x2x of</p>
    <p>application size  Recompilation needed</p>
    <p>SCONE [OSDI16]</p>
  </div>
  <div class="page">
    <p>Minimum TCB Inside Enclaves</p>
    <p>Principle of Least Privilege Only move the code needed to enforce security policy</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Enclave</p>
    <p>Policy: Confidentiality and Integrity of key-value pairs</p>
  </div>
  <div class="page">
    <p>Minimum TCB Inside Enclaves</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Interface</p>
    <p>Standard Libraries</p>
    <p>Host OS</p>
    <p>Principle of Least Privilege Only move the code needed to enforce security policy</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Policy: Confidentiality and Integrity of key-value pairs</p>
  </div>
  <div class="page">
    <p>Application Partitioning to Minimise TCB</p>
    <p>Prior work has manually partitioned applications</p>
  </div>
  <div class="page">
    <p>Application Partitioning to Minimise TCB</p>
    <p>Prior work has manually partitioned applications</p>
    <p>Automatically determine the minimum functionality to be run inside an enclave in order to enforce a security policy</p>
  </div>
  <div class="page">
    <p>Challenges in Automated Partitioning</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Interface</p>
    <p>Standard Libraries</p>
    <p>Host OS</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Identifying security-sensitive code relevant to a security policy  Preventing interfaces from violating security policy  Avoiding performance degradation</p>
    <p>Policy: Confidentiality and Integrity of key-value pairs</p>
  </div>
  <div class="page">
    <p>Challenges in Automated Partitioning</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Interface</p>
    <p>Standard Libraries</p>
    <p>Host OS</p>
    <p>Identifying security-sensitive code relevant to a security policy  Preventing interfaces from violating security policy  Avoiding performance degradation</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Policy: Confidentiality and Integrity of key-value pairs</p>
  </div>
  <div class="page">
    <p>Challenges in Automated Partitioning</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Interface</p>
    <p>Standard Libraries</p>
    <p>Host OS</p>
    <p>Identifying security-sensitive code relevant to a security policy  Preventing interfaces from violating security policy  Avoiding performance degradation</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Policy: Confidentiality and Integrity of key-value pairs</p>
  </div>
  <div class="page">
    <p>Challenges in Automated Partitioning</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Interface</p>
    <p>Standard Libraries</p>
    <p>Host OS</p>
    <p>Identifying security-sensitive code relevant to a security policy  Preventing interfaces from violating security policy  Avoiding performance degradation</p>
    <p>Application (Sensitive)</p>
    <p>Application (Untrusted)</p>
    <p>Policy: Confidentiality and Integrity of key-value pairs</p>
  </div>
  <div class="page">
    <p>Glamdring Partitioning Framework</p>
    <p>Static Analysis</p>
    <p>Forward Analysis</p>
    <p>Backward Analysis</p>
    <p>Partition specification</p>
    <p>Source-Source Transformation</p>
    <p>Instrumentation of Runtime Invariants</p>
    <p>Enclave Code</p>
    <p>Outside Code</p>
    <p>Interface Spec</p>
    <p>Invariants</p>
    <p>Application CodeAnnotation</p>
    <p>Enclave Boundary Relocation</p>
  </div>
  <div class="page">
    <p>Static Analysis</p>
    <p>Forward Analysis</p>
    <p>Backward Analysis</p>
    <p>Partition specification</p>
    <p>Source-Source Transformation</p>
    <p>Instrumentation of Runtime Invariants</p>
    <p>Enclave Code</p>
    <p>Outside Code</p>
    <p>Interface Spec</p>
    <p>Invariants</p>
    <p>Application CodeAnnotation</p>
    <p>Enclave Boundary Relocation</p>
    <p>Static Analysis conservatively identifies subset of code dependent on programmer annotated security-sensitive data</p>
  </div>
  <div class="page">
    <p>Client Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>read()</p>
    <p>Annotation of Security-Sensitive Data</p>
    <p>If (cmd ==GET)</p>
    <p>What to Annotate  Indicate where security-sensitive</p>
    <p>data enters or leaves the program  Security-sensitive data can be</p>
    <p>encrypted and signed until first use</p>
  </div>
  <div class="page">
    <p>Client Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>read() cmd</p>
    <p>cmd</p>
    <p>Annotation of Security-Sensitive Data</p>
    <p>If (cmd ==GET)</p>
    <p>What to Annotate  Indicate where security-sensitive</p>
    <p>data enters or leaves the program  Sensitive data can be encrypted</p>
    <p>and signed until first use</p>
  </div>
  <div class="page">
    <p>Client</p>
    <p>cmd</p>
    <p>cmd</p>
    <p>Annotation of Security-Sensitive Data</p>
    <p>What to Annotate  Indicate where security-sensitive</p>
    <p>data enters or leaves the program  Sensitive data can be encrypted</p>
    <p>and signed until first use</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>read()</p>
    <p>If (cmd ==GET)</p>
  </div>
  <div class="page">
    <p>Client Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>read() cmd</p>
    <p>cmd</p>
    <p>Annotation of Security-Sensitive Data</p>
    <p>If (cmd ==GET)</p>
    <p>#pragma glamdring sensitive source(cmd)</p>
    <p>void Dispatch(char *cmd) {</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Static Analysis Goals</p>
    <p>Enforcing Confidentiality: Identify all functions that depend on sensitive data.</p>
    <p>Enforcing Integrity: Identify all functions on which the value of sensitive data depends</p>
    <p>Why Static Analysis?  Static Analysis is conservative, independent of</p>
    <p>the input to the program</p>
  </div>
  <div class="page">
    <p>Program Dependence Graph Captures the control and data dependencies in the program</p>
  </div>
  <div class="page">
    <p>Program Dependence Graph</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)</p>
    <p>Nodes = Statements cmd = read(..)</p>
    <p>Captures the control and data dependencies in the program</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4S5</p>
  </div>
  <div class="page">
    <p>Program Dependence Graph</p>
    <p>Dispatch(cmd)</p>
    <p>Get()</p>
    <p>If (cmd ==GET)</p>
    <p>Data Dependence Edge Data defined in a statement is used in the another statement</p>
    <p>cmd = read(..)</p>
    <p>Update()</p>
    <p>Captures the control and data dependencies in the program</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4S5</p>
  </div>
  <div class="page">
    <p>Program Dependence Graph Captures the control and data dependencies in the program</p>
    <p>Dispatch(cmd)</p>
    <p>Get()</p>
    <p>If (cmd ==GET)</p>
    <p>Control Dependence Edge One Statement determines if</p>
    <p>another gets executed</p>
    <p>cmd = read(..)</p>
    <p>Update()</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4S5</p>
  </div>
  <div class="page">
    <p>Program Dependence Graph</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>Format()</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
  </div>
  <div class="page">
    <p>Forwards Dataflow Analysis</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>#prama glamdring sensitive data(cmd)Format()</p>
    <p>Confidentiality Using Graph Reachability identify all nodes with transitive control/data dependency on annotated node</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
  </div>
  <div class="page">
    <p>Forwards Dataflow Analysis</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>#prama glamdring sensitive data(cmd)Format()</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
    <p>Confidentiality Using Graph Reachability identify all nodes with transitive control/data dependency on annotated node</p>
  </div>
  <div class="page">
    <p>Forwards Dataflow Analysis</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>#prama glamdring sensitive data(cmd)Format()</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
    <p>Integrity Using Graph Reachability identify all nodes that are transitive control/data dependent on annotated node</p>
  </div>
  <div class="page">
    <p>Forwards Dataflow Analysis</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>#prama glamdring sensitive data(cmd)Format()</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
    <p>Integrity Using Graph Reachability identify all nodes that are transitive control/data dependent on annotated node</p>
  </div>
  <div class="page">
    <p>Security Sensitive Code</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>Format()</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
    <p>Union of nodes found with forwards and backwards analyses</p>
  </div>
  <div class="page">
    <p>Produce Partition Specification</p>
    <p>ProcessCmd(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)Write(res)</p>
    <p>Rest of the program</p>
    <p>Format()</p>
    <p>cmd = read(..)</p>
    <p>Format()</p>
    <p>Partition Specification</p>
    <p>* Enclave Functions: Dispatch Get Update</p>
    <p>* Enclave Allocations: malloc@241 * Enclave Allocated Globals</p>
    <p>hash_items</p>
  </div>
  <div class="page">
    <p>Static Analysis</p>
    <p>Forward Analysis</p>
    <p>Backward Analysis</p>
    <p>Partition specification</p>
    <p>Source-Source Transformation</p>
    <p>Instrumentation of Runtime Invariants</p>
    <p>Enclave Code</p>
    <p>Outside Code</p>
    <p>Interface Spec</p>
    <p>Invariants</p>
    <p>Application CodeAnnotation</p>
    <p>Enclave Boundary Relocation</p>
    <p>Automatically move code into enclave and outside codebases; Generate interface specification for SDK</p>
  </div>
  <div class="page">
    <p>void Read() { Dispatch();</p>
    <p>}</p>
    <p>void Dispatch(){  }</p>
    <p>void Get() {  }</p>
    <p>void Put() {  }</p>
    <p>Partition Spec * Enclave Functions: Dispatch, Get, Update</p>
    <p>* Enclave Allocations: malloc@241 * Enclave Allocated Globals</p>
    <p>hash_items</p>
    <p>Source-Source Transformation</p>
  </div>
  <div class="page">
    <p>Source-Source Transformation</p>
    <p>void Read() { Dispatch();</p>
    <p>}</p>
    <p>void Dispatch(){  }</p>
    <p>void Get() {  }</p>
    <p>void Put() {  }</p>
    <p>Partition Spec * Enclave Functions: Dispatch, Get, Update</p>
    <p>* Enclave Allocations: malloc@241 * Enclave Allocated Globals</p>
    <p>hash_items</p>
  </div>
  <div class="page">
    <p>Source-Source Transformation</p>
    <p>void ecall__Dispatch(){  }</p>
    <p>void Get() {  }</p>
    <p>void Put() {  }</p>
    <p>Outside</p>
    <p>Enclave</p>
    <p>void Read() { ecall__Dispatch();</p>
    <p>} Partition Spec * Enclave Functions: Dispatch, Get, Update</p>
    <p>* Enclave Allocations: malloc@241 * Enclave Allocated Globals</p>
    <p>hash_items</p>
  </div>
  <div class="page">
    <p>Static Analysis</p>
    <p>Forward Analysis</p>
    <p>Backward Analysis</p>
    <p>Partition specification</p>
    <p>Source-Source Transformation</p>
    <p>Instrumentation of Runtime Invariants</p>
    <p>Enclave Code</p>
    <p>Outside Code</p>
    <p>Interface Spec</p>
    <p>Invariants</p>
    <p>Application CodeAnnotation</p>
    <p>Enclave Boundary Relocation</p>
    <p>Ensure that invariants on program state used by the static analysis are enforced at runtime</p>
  </div>
  <div class="page">
    <p>Infeasible Program Paths</p>
    <p>int flag = 0;</p>
    <p>int SomeFunc() { if(flag == 1)</p>
    <p>memcpy(data, sensitive_data); else</p>
    <p>memcpy(data, declassify(sensitive_data)); Write(data); }</p>
    <p>Problem Static Analysis prunes infeasible paths by inferring invariants on program state</p>
  </div>
  <div class="page">
    <p>Infeasible Program Paths</p>
    <p>int flag = 0;</p>
    <p>int SomeFunc() { if(flag == 1)</p>
    <p>memcpy(data, sensitive_data); else</p>
    <p>memcpy(data, declassify(sensitive_data)); Write(data); }</p>
    <p>/* flag == 0 */</p>
    <p>Problem Static Analysis prunes infeasible paths by inferring invariants on program state</p>
  </div>
  <div class="page">
    <p>Violating Static Analysis Invariants</p>
    <p>int flag = 0;</p>
    <p>int SomeFunc() { if(flag == 1)</p>
    <p>memcpy(data, sensitive_data); else</p>
    <p>memcpy(data, declassify(sensitive_data)); Write(data); }</p>
    <p>Enclave</p>
    <p>Problem Attacker controlling untrusted code can violate the assumptions made by static analysis after partitioning</p>
  </div>
  <div class="page">
    <p>Adding Runtime Invariant Checks</p>
    <p>int flag = 0;</p>
    <p>int SomeFunc() { + assert(flag == 0);</p>
    <p>if(flag == 1) memcpy(data, sensitive_data);</p>
    <p>else memcpy(data, declassify(sensitive_data));</p>
    <p>Write(data); }</p>
    <p>Enclave</p>
    <p>Solution Add assertions to enforce statically inferred invariants on program state</p>
  </div>
  <div class="page">
    <p>Static Analysis</p>
    <p>Forward Analysis</p>
    <p>Backward Analysis</p>
    <p>Partition specification</p>
    <p>Source-Source Transformation</p>
    <p>Instrumentation of Runtime Invariants</p>
    <p>Enclave Code</p>
    <p>Outside Code</p>
    <p>Interface Spec</p>
    <p>Invariants</p>
    <p>Application CodeAnnotation</p>
    <p>Enclave Boundary Relocation</p>
    <p>Runtime Profiling</p>
    <p>Use results of runtime profiling to remove expensive functions from enclave interface</p>
  </div>
  <div class="page">
    <p>Performance of Partitioned Applications</p>
    <p>Expensive Interface Functions Some of the interface functions may be hotspots called too frequently</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)</p>
    <p>SomeFunc()</p>
  </div>
  <div class="page">
    <p>Performance of Partitioned Applications</p>
    <p>Expensive Interface Functions Some of the interface functions may be hotspots called too frequently</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)</p>
    <p>SomeFunc() 2000</p>
    <p>Runtime profiling can help identify hotspots</p>
  </div>
  <div class="page">
    <p>Enclave Boundary Relocation</p>
    <p>Adding Functions to Enclave Move additional functions into enclave to create a new interface that avoid hotspots</p>
    <p>Dispatch(cmd)</p>
    <p>Get() Update()</p>
    <p>If (cmd ==GET)</p>
    <p>SomeFunc() 2000</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>How does Glamdring compare to other design choices</p>
    <p>Security: Size of TCB  Performance: Throughput</p>
  </div>
  <div class="page">
    <p>Applications and Implementation</p>
    <p>Static Analysis:  Existing tools</p>
    <p>Code Generation:  LLVM/Clang 3.9  around 5000 LoC</p>
    <p>Application Data Confidentiality Integrity</p>
    <p>Memcached Key-Value pairs Yes Yes</p>
    <p>LibreSSL CA Root certificate</p>
    <p>Yes Yes</p>
    <p>Digital Bitbox Private Keys Yes Yes</p>
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>Security Evaluation - TCB size</p>
    <p>Applications Code Size (kLoC) TCB size</p>
    <p>Memcached 31 12 (40%)</p>
    <p>DigitalBitbox 23 8 (38%)</p>
    <p>LibreSSL 176 38 (22%)</p>
    <p>TCB is less than 40% of the application size</p>
    <p>How big is the TCB of applications?</p>
  </div>
  <div class="page">
    <p>Security Evaluation - TCB size</p>
    <p>Applications TCB size (kLoC) Binary Size</p>
    <p>Memcached (Glamdring) 42 770 kB</p>
    <p>Memcached (SCONE) 149 3.3 MB</p>
    <p>Memcached (Graphene) 746 4.1 MB</p>
    <p>TCB size comparison with Graphene and SCONE</p>
  </div>
  <div class="page">
    <p>Security Evaluation - TCB size</p>
    <p>Applications TCB size (kLoC) Binary Size</p>
    <p>Memcached (Glamdring) 42 770 kB</p>
    <p>Memcached (SCONE) 149 3.3 MB</p>
    <p>Memcached (Graphene) 746 4.1 MB</p>
    <p>TCB size comparison with Graphene and SCONE</p>
  </div>
  <div class="page">
    <p>Security Evaluation - TCB size</p>
    <p>Applications TCB size (kLoC) Binary Size</p>
    <p>Memcached (Glamdring) 42 770 kB</p>
    <p>Memcached (SCONE) 149 3.3 MB</p>
    <p>Memcached (Graphene) 746 4.1 MB</p>
    <p>TCB size comparison with Graphene and SCONE</p>
    <p>Order of magnitude less than with Graphene 1/3 size of TCB when using SCONE</p>
  </div>
  <div class="page">
    <p>Comparing Performance of Design Approaches</p>
    <p>Throughput of Memcached ported using Glamdring with native, SCONE and Graphene</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>Throughput</p>
    <p>Native</p>
    <p>Comparing Performance of Design Approaches Throughput of Memcached ported using Glamdring</p>
    <p>with native, SCONE and Graphene</p>
  </div>
  <div class="page">
    <p>Throughput vs Latency</p>
    <p>La te</p>
    <p>nc y</p>
    <p>Throughput</p>
    <p>Native SCONE</p>
    <p>Avoids enclave transitions with user-level threading; higher TCB than Glamdring</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>Throughput</p>
    <p>Native SCONE Graphene</p>
    <p>Throughput vs Latency Entire Library OS inside enclave</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>Throughput</p>
    <p>Native SCONE Graphene Glamdring</p>
    <p>Throughput vs Latency</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>Throughput</p>
    <p>Native SCONE Graphene Glamdring</p>
    <p>Throughput vs Latency Enclave transitions dominate the cost of request handling;</p>
    <p>batching requests into multi-get gets 210k req/sec</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Port applications into Intel SGX enclaves with minimal TCB  Glamdring  Automated program partitioning using static</p>
    <p>analysis  Identifies minimum TCB, produces partitioned code,</p>
    <p>enforces program state invariants, uses</p>
    <p>Evaluated three applications - smaller TCB than prior approaches with acceptable performance</p>
    <p>dmuthuku@imperial.ac.uk</p>
    <p>Divya Muthukumaran</p>
  </div>
  <div class="page">
    <p>Security Evaluation - Attacks and Defences</p>
    <p>Enclave Call Ordering Attacks: By construction. EBR does not affect this.</p>
    <p>Iago Attacks: By enforcing invariants  Replay Attacks: Freshness counter  Enclave Code Vulnerabilities: TCB is reduced</p>
    <p>enables code analysis</p>
  </div>
  <div class="page">
    <p>Evaluation - Impact of EBR</p>
    <p>How many functions were moved into the enclave, and what was the impact on enclave crossings</p>
    <p>Application EBR Enclave Functions Enclave</p>
    <p>Crossings (No EBR)</p>
    <p>Enclave Crossings (With EBR)</p>
    <p>Memcached 1 54 6</p>
    <p>LibreSSL 2 24,780 6727</p>
    <p>Digital Bitbox 4 10,943 38</p>
  </div>
  <div class="page">
    <p>Evaluation - Impact of EBR</p>
    <p>Application EBR Enclave Functions Enclave</p>
    <p>Crossings (No EBR)</p>
    <p>Enclave Crossings (With EBR)</p>
    <p>Memcached 1 54 6</p>
    <p>LibreSSL 2 24,780 6727</p>
    <p>Digital Bitbox 4 10,943 38</p>
    <p>Even few functions inside. reduced enclave crossings by orders of magnitude</p>
  </div>
</Presentation>
