<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Jackstraws: Picking Command and Control Connections from Bot Traffic</p>
    <p>Gregoire Jacob1, Ralf Hund2, Christopher Kruegel1, Thorsten Holz2</p>
    <p>Fri Aug 12 2011</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 1 / 20</p>
  </div>
  <div class="page">
    <p>Introduction: the botnet threat</p>
    <p>What do botnets do?</p>
    <p>Support large-scale malicious activities and the underground economy</p>
    <p>Coordination of malicious attacks e.g., denial of service, spam campaigns, click fraud</p>
    <p>Sensitive information theft e.g., credentials, credit card numbers</p>
    <p>Why are botnets so convenient for attackers?</p>
    <p>Command &amp; Control (C&amp;C) infrastructure for remote control</p>
    <p>Incoming commands to trigger attacks and updates</p>
    <p>Outgoing responses for status monitoring and information leakage</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 2 / 20</p>
  </div>
  <div class="page">
    <p>Introduction: fighting against botnets</p>
    <p>Botnet detection and mitigation</p>
    <p>Host-based techniques</p>
    <p>- Traditional malware detection and mitigation - Signature matching and behavior monitoring</p>
    <p>Network-based techniques</p>
    <p>- Blacklisting IPs related to C&amp;C servers - Signatures matching C&amp;C protocol and commands</p>
    <p>Automatic generation of these signatures, IP lists or models</p>
    <p>- Clean C&amp;C only logs needed for traffic and system calls</p>
    <p>Difficulty of identifying C&amp;C traffic</p>
    <p>Potentially encrypted C&amp;C traffic</p>
    <p>Non-C&amp;C or noise traffic interleaved</p>
    <p>- Malicious connections to 3rd party websites (e.g., part of the attacks) - Configuration connections (e.g., connectivity tests, time recovery) - Fake benign connections (e.g., mimicry of legitimate applications)</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 3 / 20</p>
  </div>
  <div class="page">
    <p>Introduction: identifying C&amp;C traffic</p>
    <p>Our approach: Jackstraws</p>
    <p>Combination of network traces and host-based activity</p>
    <p>- Rationale: C&amp;C traffic results in observable host activity e.g. system modifications, critical information accesses</p>
    <p>- Host-based model: system call graphs with data dependency - Network-related link: each graph associated to a network connection</p>
    <p>Machine learning to identify and generalize C&amp;C-related host activity</p>
    <p>- Rationale: similar commands result in similar core activities even for different bots</p>
    <p>- Mining significant activities: graph mining over known connections - Identifying similar activity types: graph clustering - Abstracting activity types: graph merging into templates - Detecting C&amp;C activity: template matching over unknown connections</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 4 / 20</p>
  </div>
  <div class="page">
    <p>System: Jackstraws overview</p>
    <p>System architecture</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 5 / 20</p>
  </div>
  <div class="page">
    <p>System: graph collection</p>
    <p>Analysis environment</p>
    <p>Logging: system calls and network API calls</p>
    <p>Tainting: data flows in memory and over the file system</p>
    <p>Graph generation</p>
    <p>Input: trace of system and network calls</p>
    <p>Output: a call graph for each successful connection</p>
    <p>Algorithm: - Graph root: successful connect and associated sends/recvs - Nodes extension: recursive backward dependency over system calls - Nodes labeling: call parameters, resource names being abstracted - Graph collapsing: collapse duplicate nodes</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 6 / 20</p>
  </div>
  <div class="page">
    <p>System: graph collection</p>
    <p>Graph generation</p>
    <p>network: recv</p>
    <p>systemcall: NtWriteFile</p>
    <p>arg: Buffer=buf</p>
    <p>systemcall: NtWriteFile</p>
    <p>arg: Buffer=buf</p>
    <p>systemcall: NtWriteFile</p>
    <p>arg: Buffer=buf</p>
    <p>systemcall: NtCreateFile</p>
    <p>FileName: isSystemDirectory/isExecutable DesiredAccess: FileReadAttributes</p>
    <p>Attributes: AttributeNormal CreateDisposition: FileSupersede</p>
    <p>arg: FileHandle=FileHandle</p>
    <p>arg: FileHandle=FileHandle</p>
    <p>network: recv</p>
    <p>systemcall: NtWriteFile</p>
    <p>Collapse: isMultiple</p>
    <p>arg: Buffer=buf</p>
    <p>systemcall: NtCreateFile</p>
    <p>FileName: isSystemDirectory/isExecutable DesiredAccess: FileReadAttributes</p>
    <p>Attributes: AttributeNormal CreateDisposition: FileSupersede</p>
    <p>arg: FileHandle=FileHandle</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 7 / 20</p>
  </div>
  <div class="page">
    <p>System: graph mining</p>
    <p>Frequent subgraph mining:</p>
    <p>Input: call graphs associated to malicious vs. benign connections</p>
    <p>Output: significant subgraphs covering only malicious (C&amp;C) activity</p>
    <p>Algorithm: - Graph mining: frequent subgraphs from malicious connections - Maximization: stripping induced subgraphs from the mined set - Set difference: stripping subgraphs included in benign connections</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 8 / 20</p>
  </div>
  <div class="page">
    <p>System: graph mining</p>
    <p>Frequent subgraph mining</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 9 / 20</p>
  </div>
  <div class="page">
    <p>System: graph clustering and template generation</p>
    <p>Graph clustering:</p>
    <p>Input: significant malicious subgraphs</p>
    <p>Output: clusters group graphs that represent similar activity</p>
    <p>Algorithm: - Graph similarity: common edges in the maximal common subgraph - Graph clustering: clustering by repeated bisection</p>
    <p>Template generation:</p>
    <p>Input: clusters of similar malicious subgraphs</p>
    <p>Output: graph template covering the graphs of the cluster</p>
    <p>Algorithm: - Template construction: minimal common supergraph - Template generalization: supergraph weighted by node frequency</p>
    <p>+ Frequent nodes constitute the core activity shared by bots</p>
    <p>+ Infrequent nodes constitute optional activity specific to different bots</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 10 / 20</p>
  </div>
  <div class="page">
    <p>System: graph clustering and template generation</p>
    <p>Graph clustering and template generation</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 11 / 20</p>
  </div>
  <div class="page">
    <p>System: template matching</p>
    <p>Template matching:</p>
    <p>Input: template, unlabeled collected call graphs</p>
    <p>Output: match result</p>
    <p>Algorithm: - Core matching: subgraph isomorphism with core nodes</p>
    <p>+ Mandatory nodes must be present</p>
    <p>- Extended match: maximal common supergraph for optional nodes + Isomorphism result used to initialize search</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 12 / 20</p>
  </div>
  <div class="page">
    <p>System: template matching</p>
    <p>Template matching</p>
    <p>systemcall: recv</p>
    <p>network: connect</p>
    <p>port: 443</p>
    <p>#ip=193.23.126.55 #ip=94.75.255.138</p>
    <p>arg: ip=buf</p>
    <p>systemcall: NtCreateFile</p>
    <p>Filename: inProgramDirectory\isExecutable DesiredAccess: FileReadAttributes</p>
    <p>Attributes: AttributeNormal CreateDisposition: FileSupersede</p>
    <p>#Filename=\??\C:\Program Files\temp\ldr.exe</p>
    <p>arg: ObjectAttributes=buf</p>
    <p>systemcall: NtCreateFile</p>
    <p>Filename: inProgramDirectory\isExecutable DesiredAccess: FileReadAttributes | FileWriteAttributes</p>
    <p>Attributes: AttributeNormal CreateDisposition: FileSupersede</p>
    <p>#Filename=\??\C:\Program Files\temp\ldr.exe</p>
    <p>arg: ObjectAttributes=buf</p>
    <p>network: recv</p>
    <p>Collapse: isMultiple</p>
    <p>arg: Socket=Socket</p>
    <p>systemcall: NtAllocateVirtualMemory</p>
    <p>*: *</p>
    <p>arg: ObjectAttributes=RegionSize</p>
    <p>systemcall: NtDeviceIoControlFile</p>
    <p>*: *</p>
    <p>arg: InputBuffer=buf</p>
    <p>systemcall: NtWriteFile</p>
    <p>Collapse: isMultiple</p>
    <p>arg: Buffer=buf arg: Length=buf</p>
    <p>systemcall: NtSetInformationFile</p>
    <p>Collapse: isMultiple</p>
    <p>arg: FileInformation=buf</p>
    <p>process: start</p>
    <p>arg: buf=buf</p>
    <p>arg: FileHandle=FileHandle</p>
    <p>arg: FileHandle=FileHandle</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 13 / 20</p>
  </div>
  <div class="page">
    <p>Evaluation: dataset presentation</p>
    <p>Collected botnet traffic</p>
    <p>37,572 bot samples corresponding to 745 families (e.g. EgroupDial, Palevo, Virut)</p>
    <p>130,635 network connections and associated behavior graphs (successful connections only)</p>
    <p>Labeling connections for ground truth</p>
    <p>Manually-crafted network signatures: 385 C&amp;C, 162 benign</p>
    <p>10,801 malicious connections</p>
    <p>12,367 benign connections</p>
    <p>66,538 unknown connections</p>
    <p>40,929 incomplete or irrelevant graphs removed</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 14 / 20</p>
  </div>
  <div class="page">
    <p>Evaluation: dataset presentation</p>
    <p>Training and testing sets</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 15 / 20</p>
  </div>
  <div class="page">
    <p>Evaluation: training the system</p>
    <p>System configuration</p>
    <p>Mining frequency threshold: 10% - Trade-off between maximum coverage and mining runtime</p>
    <p>Bisection threshold: 60% average and 40% minimal similarity - Higher thresholds reduce the effect of generalization</p>
    <p>System runtime</p>
    <p>Mining: 16h, Clustering: 4.5h, Generalization: 30min</p>
    <p>Reasonable processing time wrt. the NP-hardness of algorithms</p>
    <p>Templates quality</p>
    <p>417 templates generated - 397 templates semantically meaningful</p>
    <p>Different types of commands covered - Information leakage, download and execute, startup, stealth</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 16 / 20</p>
  </div>
  <div class="page">
    <p>Evaluation: testing the system</p>
    <p>Testing over labeled connections</p>
    <p>Detection rate: 81.6%</p>
    <p>Detection without the generalization: 66.0%</p>
    <p>Detection of new families that were missing in the training set</p>
    <p>False negatives: 18.4% mainly due to incomplete/infrequent activity</p>
    <p>False positives: 0.2% mainly due to weaker templates</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 17 / 20</p>
  </div>
  <div class="page">
    <p>Evaluation: testing the system</p>
    <p>Testing over unknown connections</p>
    <p>66,538 unknow connections</p>
    <p>New matches: 9,464 connections</p>
    <p>New detected families: 193 not covered by network signatures</p>
    <p>New detected variants: missed by outdated network signatures</p>
    <p>False negatives: high proportion of benign traffic (manual verification)</p>
    <p>False positives: 27</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 18 / 20</p>
  </div>
  <div class="page">
    <p>Evaluation: system limitations</p>
    <p>Testing over unknown connections</p>
    <p>Weakness Consequences Potential remediation Supported</p>
    <p>Dynamic analysis Incomplete Enhanced analysis environment: call logs e.g. multi-path execution 5</p>
    <p>Computational Non-termination Algorithm optimizations: time e.g. node labeling, 3</p>
    <p>graph collapsing 3</p>
    <p>Interleaved calls Noise against System calls selection: mining e.g. calls with data dependency 3</p>
    <p>Functional No core activity Normalizing graphs: polymorphism e.g. duplicate nodes collapsing, 3</p>
    <p>Rewriting rules: e.g. equivalent operations 5</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 19 / 20</p>
  </div>
  <div class="page">
    <p>Conclusion: Jackstraws</p>
    <p>Contributions</p>
    <p>Solution to the problem of identifying C&amp;C traffic from noise</p>
    <p>Automated generation of templates representing C&amp;C behaviors</p>
    <p>Gains provided by the template generalization: - Protocol-agnostic representation of C&amp;C activity - Increased level of understanding for analysts - Coverage extended to families unknown during training</p>
    <p>G. Jacob (UCSB) Fri Aug 12 2011 20 / 20</p>
  </div>
</Presentation>
