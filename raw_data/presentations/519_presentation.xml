<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>EUROPA: Efficient User-Mode Packet Forwarding in Network</p>
    <p>VirtualizationVirtualization Yong Liao Dong Yin Lixin GaoYong Liao, Dong Yin, Lixin Gao</p>
    <p>Univ. of Massachusetts, Amherst</p>
  </div>
  <div class="page">
    <p>Network Virtualization PlatformNetwork Virtualization Platform</p>
    <p>Concurrent virtual networks running in the b t tsame substrate</p>
    <p>VINI, Trellis, VRouter  NP, NetFPGA</p>
    <p>R i t f h Requirements for such a platform  Flexibility &amp; isolation  PerformancePerformance</p>
  </div>
  <div class="page">
    <p>Achieving the Design GoalAchieving the Design Goal</p>
    <p>Flexibility and isolation  User mode virtual router</p>
    <p>High-performance is challenging Sl f di i VM Slow forwarding in VM</p>
    <p>Overhead of running in user mode  Solution</p>
    <p>Efficient forwarding in user mode VM Efficient forwarding in user mode VM</p>
  </div>
  <div class="page">
    <p>Causes of Slow User Mode Forwarding</p>
    <p>OS OS user spaceOS user space</p>
    <p>pass pointer of pkt RcvPkt SndPktProcessPkt</p>
    <p>Packet Buffer OS user space</p>
    <p>Packet Buffer OS kernel space</p>
    <p>Packet Buffer</p>
    <p>RcvPkt SndPktProcessPkt</p>
    <p>OS kernel space</p>
    <p>RcvPkt ProcessPkt SndPkt pass pointer of pkt</p>
    <p>RcvPkt SndPkt</p>
    <p>from NIC to NIC from NIC to NIC</p>
    <p>OverheadOverhead  Copying packets between kernel and user space  Invoking system calls Invoking system calls</p>
  </div>
  <div class="page">
    <p>Quantify the OverheadQuantify the Overhead 2 66G CPU 2.66G CPU System call Send packet Receive packet CPU cycles 3,000 3,400</p>
    <p>Copying 64-byte packetCopying 64 byte packet Memory copy Copy to user Copy from user CPU cycles 160 140CPU cycles 160 140</p>
    <p>Overall overhead  6,700 cycles per packet  No more than 400kpps in a 2 66G CPUNo more than 400kpps in a 2.66G CPU</p>
  </div>
  <div class="page">
    <p>Avoiding the OverheadAvoiding the Overhead</p>
    <p>Packet copying  Sharing buffer between kernel and user space g p</p>
    <p>virtual routers  System calls System calls</p>
    <p>Kernel and user space virtual routers h l k t b ffasynchronously access packet buffer</p>
    <p>A state flag for each packet as mutex</p>
  </div>
  <div class="page">
    <p>Related Work in Improving I/O Performance</p>
    <p>Zero-copying schemes Wid l t di d i OS it Widely studied in OS community</p>
    <p>Have not applied to virtual routers</p>
    <p>Polling for packets Polling for packets  Waiting for packets is expensive  Example: Click polling mode</p>
  </div>
  <div class="page">
    <p>Europa ArchitectureEuropa Architecture Sli i i t VM (O VZ) Slicing server into VMs (OpenVZ)  VR data plane running in VM</p>
    <p>Shared packet pools (mmap mechanism) One for each VR One for each VR</p>
    <p>Europa kernelp  One module</p>
    <p>serving for allserving for all VRs</p>
  </div>
  <div class="page">
    <p>Europa Kernel ModuleEuropa Kernel Module R i i k t Receiving packet  Classifying  Moving to VRs pool  Writing index in rx ring  Changing packet state</p>
    <p>Sending packetg p  Reading index in VRs</p>
    <p>tx ringg  Polling packet state  Sending out via NICg</p>
  </div>
  <div class="page">
    <p>Europa Virtual RouterEuropa Virtual Router</p>
    <p>Receiving packet vNIC vNIC</p>
    <p>Receiving packet  Reading index from VRs rx ring, polling packet state</p>
    <p>Processing packetProcessing packet  In-place processing</p>
    <p>Sending packetg p  Writing an index into VRs tx ring, changing packet state</p>
  </div>
  <div class="page">
    <p>Prototyping ImplementationPrototyping Implementation H d Hardware  Workstation PC with: 2.66G Core2 Duo CPU, 4G</p>
    <p>memory, Intel E1000 Gbit NICmemory, Intel E1000 Gbit NIC  Virtualization: OpenVZ  Kernel module</p>
    <p>Kernel Click: interact with NIC, classify packets, copy packets to VMs shared buffer M lti th d d Cli k Multi-threaded Click</p>
    <p>User module User Click: process packet in an in place manner User Click: process packet in an in-place manner</p>
  </div>
  <div class="page">
    <p>Evaluation: UDP ExperimentsEvaluation: UDP Experiments</p>
    <p>Forwarding 64-byte UDP packets</p>
    <p>Europa matches kernel Click Europa matches kernel Click</p>
  </div>
  <div class="page">
    <p>Evaluation: TCP ExperimentsEvaluation: TCP Experiments</p>
    <p>TCP throughput</p>
  </div>
  <div class="page">
    <p>Scalability of EuropaScalability of Europa M lti l VR t f di Multiple VRs concurrent forwarding</p>
    <p>More VRs, slower aggregate speed  Multi-core CPUu t co e C U</p>
  </div>
  <div class="page">
    <p>Pool Size vs. Forwarding Performance</p>
    <p>Two concurrent VRs</p>
    <p>Speed is not sensiti e to b ffer si e Speed is not sensitive to buffer size</p>
  </div>
  <div class="page">
    <p>Conclusion and Future WorkConclusion and Future Work</p>
    <p>Poor performance of conventional user mode packet processingp p g</p>
    <p>Flexibility benefits of processing packet in user modeuser mode</p>
    <p>Europa achieves both flexibility and performance goal in virtual network</p>
    <p>Adaptive polling packets as future work Adaptive polling packets as future work</p>
  </div>
  <div class="page">
    <p>Packet Forwarding in EuropaPacket Forwarding in Europa</p>
    <p>memory mapping between user space and kernel space</p>
  </div>
</Presentation>
