<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fewer Cores, More Hertz: Leveraging High-Frequency Cores in the OS</p>
    <p>Scheduler for Improved Application Performance</p>
    <p>R. Gouicem, D. Carver, J. Sopena, J. Lawall, G. Muller Sorbonne University, LIP6, Inria</p>
    <p>B. Lepers, W. Zwaenepoel University of Sydney</p>
    <p>J.-P. Lozi Oracle</p>
    <p>N. Palix Universit Grenoble Alpes</p>
    <p>ATC20</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Before</p>
    <p>CPU frequency changes depending on load</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Before</p>
    <p>CPU frequency changes depending on load</p>
    <p>Frequency is managed at chip granularity</p>
    <p>The load of a single CPU impacts the frequency of all CPUs on the chip</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Before</p>
    <p>CPU frequency changes depending on load</p>
    <p>Frequency is managed at chip granularity</p>
    <p>The load of a single CPU impacts the frequency of all CPUs on the chip</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Before</p>
    <p>CPU frequency changes depending on load</p>
    <p>Frequency is managed at chip granularity</p>
    <p>The load of a single CPU impacts the frequency of all CPUs on the chip</p>
    <p>With all CPUs fully loaded, nominal frequency is guaranteed</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Before</p>
    <p>CPU frequency changes depending on load</p>
    <p>Frequency is managed at chip granularity</p>
    <p>The load of a single CPU impacts the frequency of all CPUs on the chip</p>
    <p>With all CPUs fully loaded, nominal frequency is guaranteed</p>
    <p>Turbo mode: when some CPUs are idle, busy CPUs can use even higher frequencies</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Now</p>
    <p>Frequency is managed at core granularity</p>
    <p>At least since: - Intel Cascade Lake (2019) - AMD Ryzen (2019)</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Now</p>
    <p>Frequency is managed at core granularity</p>
    <p>At least since: - Intel Cascade Lake (2019) - AMD Ryzen (2019)</p>
    <p>Idle cores can run at minimal frequency while other cores run at maximal frequency</p>
    <p>Energy savings</p>
  </div>
  <div class="page">
    <p>Dynamic Frequency Scaling Now</p>
    <p>Frequency is managed at core granularity</p>
    <p>At least since: - Intel Cascade Lake (2019) - AMD Ryzen (2019)</p>
    <p>Idle cores can run at minimal frequency while other cores run at maximal frequency</p>
    <p>Energy savings</p>
    <p>Each core individually sets a frequency that matches its load</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>Focus on changing the frequency to match load - Linux scaling governors (ondemand, schedutil) - hardware frequency scaling (Intel)</p>
    <p>Frequency scaling was used to - maximize instructions per joule metric (Weiser94) - reduce contention (Merkel10, Zhang10) - reduce energy usage (Bianchini03)</p>
    <p>Recent work by the Linux scheduler community - TurboSched: small jitter tasks on Turbo cores - support for heterogeneous architectures (big.LITTLE), ...</p>
  </div>
  <div class="page">
    <p>Case Study: Compiling Linux Setup:</p>
    <p>- 4x20-core Intel Xeon E7-8870 v4 (160 HW threads with HyperThreading) - 2.1 GHz nominal frequency, up to 3.0 GHz with Turbo Boost - Per-core frequency scaling - 512 GB of RAM - Debian 10 Buster with Linux 5.4</p>
    <p>Maximum Turbo frequencies:</p>
    <p>Active cores 1-2 3 4 5-8 &gt;8</p>
    <p>Max Turbo 3.0 GHz 2.8 GHz 2.7 GHz 2.6 GHz 2.1 GHz</p>
    <p>For clarity, we only present the compilation of the scheduler subsystem</p>
  </div>
  <div class="page">
    <p>Case Study: Tracing the Frequency</p>
  </div>
  <div class="page">
    <p>Case Study: Tracing the Frequency</p>
    <p>Few cores running but no Turbo!</p>
  </div>
  <div class="page">
    <p>Case Study: Tracing the Frequency</p>
    <p>Few cores running but no Turbo!</p>
    <p>Most cores used, but frequency is lower than nominal!</p>
  </div>
  <div class="page">
    <p>Case Study: Zooming In</p>
  </div>
  <div class="page">
    <p>Case Study: Zooming In</p>
    <p>Busy at low frequency</p>
  </div>
  <div class="page">
    <p>Case Study: Zooming In</p>
    <p>Busy at low frequency</p>
    <p>Idle at high frequency</p>
  </div>
  <div class="page">
    <p>Case Study: Zooming In</p>
    <p>Busy at low frequency</p>
    <p>Frequency and load are mismatched!</p>
    <p>Idle at high frequency</p>
  </div>
  <div class="page">
    <p>Frequency Transition Latency FTL: Latency between a change of load and change of frequency We measure it from idleness to 100% load on our server</p>
  </div>
  <div class="page">
    <p>Frequency Transition Latency FTL: Latency between a change of load and change of frequency We measure it from idleness to 100% load on our server</p>
  </div>
  <div class="page">
    <p>Frequency Transition Latency FTL: Latency between a change of load and change of frequency We measure it from idleness to 100% load on our server</p>
    <p>Changing frequency is not instantaneous!</p>
  </div>
  <div class="page">
    <p>Tracing Scheduler Events Behavior of Linux scheduler (CFS):</p>
    <p>New and waking threads are placed on idle cores if available</p>
    <p>work conserving</p>
  </div>
  <div class="page">
    <p>Tracing Scheduler Events Behavior of Linux scheduler (CFS):</p>
    <p>New and waking threads are placed on idle cores if available</p>
    <p>work conserving</p>
    <p>This repeated fork/wait pattern is a common occurrence in our case study.</p>
  </div>
  <div class="page">
    <p>Problem: Frequency Inversion</p>
    <p>Long FTLs Work conserving scheduler</p>
    <p>+</p>
    <p>The frequencies at which two cores operate are inverted as compared to their load</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>Problem: With CFS</p>
    <p>Ideal situation, both cores are busy</p>
  </div>
  <div class="page">
    <p>Problem: With CFS</p>
    <p>Ideal situation, both cores are busy</p>
    <p>Two cores used for a sequential work, prone to frequency inversion</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>Instead, Slocal cancels this migration and always places the child thread on C0.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>Instead, Slocal cancels this migration and always places the child thread on C0.</p>
    <p>Parent thread calls the wait() syscall, the child thread is scheduled on C0.</p>
    <p>We use a single core for a sequential work.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>Instead, Slocal cancels this migration and always places the child thread on C0.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>Instead, Slocal cancels this migration and always places the child thread on C0.</p>
    <p>If the parent thread keeps running, C0 will stay overloaded,</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>Instead, Slocal cancels this migration and always places the child thread on C0.</p>
    <p>If the parent thread keeps running, C0 will stay overloaded, until load balancing migrates the child thread on C1.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement We propose local placement with Slocal.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>Instead, Slocal cancels this migration and always places the child thread on C0.</p>
    <p>If the parent thread keeps running, C0 will stay overloaded, until load balancing migrates the child thread on C1.</p>
    <p>Both cores are used, but we lost tens of milliseconds of execution for the child thread.</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement</p>
    <p>C FS</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement</p>
    <p>C FS</p>
    <p>S local</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement</p>
    <p>Turbo</p>
    <p>C FS</p>
    <p>S local</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement</p>
    <p>Turbo Longer high</p>
    <p>frequency periods</p>
    <p>C FS</p>
    <p>S local</p>
  </div>
  <div class="page">
    <p>Solution 1: Local Placement</p>
    <p>&lt;5 cores used, more Turbo</p>
    <p>Longer high frequency periods</p>
    <p>C FS</p>
    <p>S local</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>If C1 runs at a low frequency, instead of placing the child thread on C1, we arm a timer that expires in 50s and place the child thread on C0.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>If C1 runs at a low frequency, instead of placing the child thread on C1, we arm a timer that expires in 50s and place the child thread on C0.</p>
    <p>When the timer is triggered 50s later,</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>If C1 runs at a low frequency, instead of placing the child thread on C1, we arm a timer that expires in 50s and place the child thread on C0.</p>
    <p>When the timer is triggered 50s later, we migrate the child thread to C1. We only lose 50s compared to CFS or Slocal.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>If C1 runs at a low frequency, instead of placing the child thread on C1, we arm a timer that expires in 50s and place the child thread on C0.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>If C1 runs at a low frequency, instead of placing the child thread on C1, we arm a timer that expires in 50s and place the child thread on C0.</p>
    <p>Parent thread calls the wait() syscall, the child thread is scheduled on C0, the timer is cancelled.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations We propose to delay migrations with Smove.</p>
    <p>Parent thread runs on C0, calls the fork() syscall. CFS decides to place the child thread on C1.</p>
    <p>If C1 runs at a low frequency, instead of placing the child thread on C1, we arm a timer that expires in 50s and place the child thread on C0.</p>
    <p>Parent thread calls the wait() syscall, the child thread is scheduled on C0, the timer is cancelled.</p>
    <p>This sequential program uses a single core, running at a high frequency, and C1 stays idle.</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations</p>
    <p>C FS</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations</p>
    <p>C FS</p>
    <p>S m</p>
    <p>ove</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations</p>
    <p>Turbo</p>
    <p>C FS</p>
    <p>S m</p>
    <p>ove</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations</p>
    <p>Turbo Longer high</p>
    <p>frequency periods</p>
    <p>C FS</p>
    <p>S m</p>
    <p>ove</p>
  </div>
  <div class="page">
    <p>Solution 2: Deferring Thread Migrations</p>
    <p>&lt;5 cores used, more Turbo</p>
    <p>Longer high frequency periods</p>
    <p>C FS</p>
    <p>S m</p>
    <p>ove</p>
  </div>
  <div class="page">
    <p>Our Solutions: Slocal and Smove</p>
    <p>Both solutions behave similarly on our case study</p>
  </div>
  <div class="page">
    <p>Our Solutions: Slocal and Smove</p>
    <p>Both solutions behave similarly on our case study</p>
    <p>Slocal</p>
    <p>is more aggressive and simple (3 lines of code), changes the behavior of CFS and heavily relies on periodic load balancing to fix mistakes</p>
  </div>
  <div class="page">
    <p>Our Solutions: Slocal and Smove</p>
    <p>Both solutions behave similarly on our case study</p>
    <p>Slocal</p>
    <p>Smove</p>
    <p>is more aggressive and simple (3 lines of code), changes the behavior of CFS and heavily relies on periodic load balancing to fix mistakes</p>
    <p>is more balanced, and accounts for frequency, more complicated (124 lines of code, timers), but keeps the overall ideas of CFS</p>
  </div>
  <div class="page">
    <p>Performance and Energy Evaluation 60 applications from:</p>
    <p>- NAS: HPC applications, - Phoronix: web servers, compilations, DNN libs, compression, databases, ... - hackbench &amp; sysbench OLTP</p>
  </div>
  <div class="page">
    <p>Performance and Energy Evaluation Compared to CFS, server machine, powersave governor, higher is better</p>
  </div>
  <div class="page">
    <p>Performance and Energy Evaluation Compared to CFS, server machine, powersave governor, higher is better</p>
    <p>&gt;23 apps outperform CFS</p>
  </div>
  <div class="page">
    <p>Performance and Energy Evaluation Compared to CFS, server machine, powersave governor, higher is better</p>
    <p>&gt;23 apps outperform CFS</p>
  </div>
  <div class="page">
    <p>Performance and Energy Evaluation Compared to CFS, server machine, powersave governor, higher is better</p>
    <p>&gt;23 apps outperform CFS</p>
    <p>Same performance, less energy consumed</p>
  </div>
  <div class="page">
    <p>Performance and Energy Evaluation Compared to CFS, server machine, powersave governor, higher is better</p>
    <p>&gt;23 apps outperform CFS</p>
    <p>Same performance, less energy consumed</p>
    <p>Detailed analysis in the paper!</p>
  </div>
  <div class="page">
    <p>Take away Frequency inversion problem</p>
    <p>- FTL + frequency agnostic scheduler - New because of per-core dynamic frequency scaling</p>
    <p>Solutions implemented in Linux - Slocal: simple, aggressive, relies on load balancing - Smove: frequency-aware, more balanced - Both are available at: https://gitlab.inria.fr/whisper-public/atc20</p>
    <p>Possible extensions: - Fully frequency aware scheduler - Modeling the frequency behavior of a CPU (#active cores, temperature,</p>
    <p>instruction set, ) - Shortening FTL with faster frequency reconfiguration</p>
  </div>
</Presentation>
