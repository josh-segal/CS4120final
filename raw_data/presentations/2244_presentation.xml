<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>File Systems as Processes</p>
    <p>Jing Liu, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau University of Wisconsin Madison</p>
    <p>Sudarsun Kannan Rutgers University</p>
  </div>
  <div class="page">
    <p>Motivation: #1 Storage Devices Evolve Fast</p>
    <p>PCIe SSD Ultra-fast Devices</p>
    <p>IOPS: BW: Latency:</p>
    <p>HDD</p>
  </div>
  <div class="page">
    <p>Motivation: #2 OS Architectures fails behind</p>
    <p>OS design decisions were made for millisecond-scale I/O devices  e.g., HDD access outweighs the cost of two context switches (microseconds)</p>
    <p>kernel space</p>
    <p>User space</p>
    <p>~ms</p>
    <p>~us~us</p>
    <p>~us</p>
  </div>
  <div class="page">
    <p>Motivation: #3 File Systems born in single-core era</p>
    <p>Poor multi-core scalability  Hard to leverage multi-core hardware features  e.g., fast inter-core communication, cache locality</p>
    <p>core is running FS</p>
    <p>Single-core CFS &amp; Kernel FS</p>
    <p>CFS: Completely Fair Scheduler</p>
    <p>Multi-core CFS &amp; Kernel FS</p>
    <p>What if ?</p>
  </div>
  <div class="page">
    <p>Motivation: #4 HW optimized toolkits are in the wild</p>
    <p>Developing toolkits for high performance in userland:  Data Plane Development Kit (DPDK)  Storage Performance Development Kit (SPDK)  Threading Building Blocks (TBB)</p>
    <p>kernel space</p>
    <p>User space</p>
    <p>D ri</p>
    <p>ve r</p>
    <p>A PI</p>
    <p>Kits</p>
    <p>Directly Manage Devices</p>
    <p>System SW ?</p>
    <p>OS  Valuable cornerstone for Storage Stack</p>
    <p>Make FS development easier (than kernel)  Reconsider legacy OS design decisions:</p>
    <p>Interrupt-based notification  Operating system managed threading</p>
  </div>
  <div class="page">
    <p>Our Idea: File Systems as Processes</p>
    <p>A direct-access file system as a ------user-level process  Advantages:  Developer velocity  Guarantee essential file system properties</p>
    <p>integrity, concurrency, crash-consistency and security</p>
    <p>High performance  Prototype - DashFS</p>
    <p>User space File</p>
    <p>System Direct</p>
    <p>App Process App Process</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  FSP Architecture  Challenges  Prototype - DashFS  Conclusion</p>
  </div>
  <div class="page">
    <p>Classes of File System Architectures</p>
    <p>Kernel-level FS Hybrid user-level FS Microkernel FS Process</p>
    <p>Library FS Dev</p>
    <p>App</p>
    <p>kernel FS</p>
    <p>Security</p>
    <p>Integrity</p>
    <p>Sharing</p>
    <p>App FS Proc</p>
    <p>micro-kernel</p>
    <p>Security</p>
    <p>Sharing</p>
    <p>Integrity</p>
    <p>Dev</p>
    <p>IPC</p>
    <p>Our FS Process</p>
    <p>kernel FS</p>
    <p>Security</p>
    <p>Integrity</p>
    <p>Sharing</p>
    <p>Dev</p>
    <p>App</p>
    <p>Once</p>
    <p>Security</p>
    <p>FS Proc</p>
    <p>kernel</p>
    <p>Security</p>
    <p>App Sharing</p>
    <p>Integrity Dev</p>
  </div>
  <div class="page">
    <p>User space</p>
    <p>File Systems as Processes (FSP) Architecture</p>
    <p>FS Proc: a standalone user-level process  FSLib: provides POSIX compatibility; send(recv) req(reply) to(from) Fs Proc  Communication Channel: shared memory between App and FS Proc</p>
    <p>FS Proc</p>
    <p>Dev</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel One core for FS Proc</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>Kernel space</p>
    <p>kernel</p>
    <p>Kernel is only involved once to securely set up Communication Channel</p>
  </div>
  <div class="page">
    <p>User space</p>
    <p>File Systems as Processes (FSP) Architecture</p>
    <p>FS Proc: a standalone user-level process  FSLib: provides POSIX compatibility; send(recv) req(reply) to(from) Fs Proc  Communication Channel: shared memory between App and FS Proc</p>
    <p>FS Proc</p>
    <p>Dev</p>
    <p>One core for FS Proc</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>Kernel space</p>
    <p>kernel</p>
    <p>FS access initialization</p>
    <p>verify credential, allocate mem ...</p>
    <p>security</p>
    <p>fs_init() init_proc_access()</p>
  </div>
  <div class="page">
    <p>User space</p>
    <p>File Systems as Processes (FSP) Architecture</p>
    <p>FS Proc: a standalone user-level process  FSLib: provides POSIX compatibility; send(recv) req(res) to(from) Fs Proc  Communication Channel: shared memory between App and FS Proc</p>
    <p>FS Proc</p>
    <p>Dev</p>
    <p>One core for FS Proc</p>
    <p>FSLib App Proc</p>
    <p>Kernel space</p>
    <p>kernel</p>
    <p>open a file security</p>
    <p>Sharing</p>
    <p>Integrity</p>
    <p>fs_open()</p>
    <p>req</p>
    <p>... res</p>
    <p>req</p>
  </div>
  <div class="page">
    <p>Challenges of FSP</p>
    <p>Efficient Communication</p>
    <p>Scheduling &amp; Concurrency OS Coordination Reliability</p>
    <p>Focus on challenges unique to FSP approach</p>
  </div>
  <div class="page">
    <p>Efficient Communication</p>
    <p>The foundation of a high-performance file system process</p>
    <p>App Proc</p>
    <p>FS Proc</p>
    <p>Shared Mem</p>
    <p>Overhead:  Address Space Switch  Cache pollution</p>
    <p>App Proc</p>
    <p>FS Proc</p>
    <p>Solution:  Leverage fast inter-core communication and cache-to-cache transfer  Specialized memory management</p>
  </div>
  <div class="page">
    <p>Scheduling &amp; Concurrency</p>
    <p>User space</p>
    <p>FS Proc</p>
    <p>Dev</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>More concurrency (threads) to be managed  The complexity of threading (similar to building a web server)  The complexity of asynchronous programming</p>
    <p>Poll-mode driver (no interrupt) and complicated FSM cross several layers</p>
    <p>poll_apps()</p>
    <p>poll_dev()</p>
    <p>FSM interact w/ app</p>
    <p>interact w/ dev</p>
    <p>FS properties</p>
  </div>
  <div class="page">
    <p>OS Coordination</p>
    <p>I/O related information is maintained as part of the processs OS state  e.g., credential and process aliveness</p>
    <p>CPU scheduler should be aware of the core running FS 15</p>
    <p>User space</p>
    <p>FS Proc</p>
    <p>Dev</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel One core for FS Proc</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>Kernel space</p>
    <p>kernel pid: {uid, gid, ...} pid: {zombie?}</p>
    <p>CPU scheduler</p>
    <p>update_ cred() proc_ exit()</p>
    <p>upcall</p>
  </div>
  <div class="page">
    <p>Reliability</p>
    <p>An new opportunity for applications to stay alive when FS crashes  Problems: crash detection and states reconstruction</p>
    <p>Backward mode which resembles kernel FS crash semantics 16</p>
    <p>User space</p>
    <p>FS Proc</p>
    <p>Dev</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>FSLib App Proc Communication</p>
    <p>Channel</p>
    <p>Kernel space</p>
    <p>kernel</p>
    <p>Daemon</p>
    <p>fs alive? / restart</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  FSP Architecture  Challenges  DashFS Prototype  Conclusion</p>
  </div>
  <div class="page">
    <p>DashFS Prototype</p>
    <p>Current Status:  Support open(), read(), write(), close(), stat(), sync() and init()  Efficient Communication is in hand  Working on the rest three challenges</p>
    <p>Evaluation:  The communication channel is efficient  Micro-benchmark results are promising</p>
    <p>Experiment Platform:  Intel i7-8700K CPU, 32G RAM and an Intel Optane SSD 905P (960GB)</p>
  </div>
  <div class="page">
    <p>App Thread Number</p>
    <p>IO P</p>
    <p>S (M</p>
    <p>ill io</p>
    <p>n R</p>
    <p>eq s/</p>
    <p>se c)</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>An Application issues 4KB sequential write requests through various # of threads  Uses memory as backend</p>
    <p>The communication channel is efficient</p>
    <p>Unlikely to be a throughput bottleneck  Able to achieve sub-microsecond latency</p>
    <p>Storage Device Max IOPS</p>
  </div>
  <div class="page">
    <p>Micro-benchmark Results</p>
    <p>Single Operation:  4K Random Read to single</p>
    <p>file</p>
    <p>Multiple operations:  create(). write() . sync()</p>
    <p>....close()  Several traps when using ext4</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Towards a storage era of microsecond latency  Eliminating software (OS) overhead is critical  Without compromising essential file system properties</p>
    <p>Building a file system as a user-level process can be a promising avenue  Great development velocity  Leverage inter-core communication  Initial results present significant performance gain</p>
    <p>We are working on tackling more challenges via DashFS</p>
  </div>
</Presentation>
