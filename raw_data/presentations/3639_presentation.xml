<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Temporal System Call Specialization for Attack Surface Reduction</p>
    <p>Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, Michalis Polychronakis</p>
    <p>{sghavamnia, tpalit, shmishra, mikepo}@cs.stonybrook.edu</p>
  </div>
  <div class="page">
    <p>Software Debloating and Specialization</p>
    <p>Applications typically include code they dont use and have access to features they dont need  Some modules/plugins are not needed by a given configuration</p>
    <p>Some library functions are not imported at all</p>
    <p>Some system calls are never used</p>
    <p>main</p>
    <p>prctl</p>
    <p>execve</p>
    <p>prctl</p>
    <p>execve</p>
    <p>open open</p>
    <p>strcpy</p>
    <p>SyscallLib. Func.App. Func.</p>
    <p>fork fork</p>
    <p>#include &lt;stdlib.h&gt; #include &lt;fcntl.h&gt;</p>
    <p>int main(int argc, char** argv){ char dest[1024]; if ( argc == 2 ){</p>
    <p>strcpy(dest, argv[1]); int fd = open(dest,O_CREAT);</p>
    <p>} return 0;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Software Debloating and Specialization</p>
    <p>This code bloat has security implications</p>
    <p>Unneeded code: more ROP gadgets for writing code reuse exploits</p>
    <p>Unused (dangerous) system calls: exploit code can still invoke them to perform harmful operations (e.g., execve())</p>
    <p>Unused system calls: entry points for exploiting kernel vulnerabilities that can lead to privilege escalation</p>
    <p>Our focus: reduce the attack surface by disabling system calls</p>
    <p>Break exploit payloads (shellcode, ROP)</p>
    <p>Neutralize kernel vulnerabilities associated with certain system calls</p>
  </div>
  <div class="page">
    <p>Existing Work: Library Debloating</p>
    <p>Applications typically use only a fraction of library functions</p>
    <p>Library debloating: remove non-imported functions from memory [Mulliner and Neugschwandtner 15] [Quach et al. 18] [Agadakos et al. 19] [Porter et al. 20]</p>
    <p>Generate the call graph of imported shared libraries</p>
    <p>Identify library function dependencies</p>
    <p>Caveat: the entire lifetime of the program is considered  If a function/system call is used even only once, it cannot be disabled</p>
    <p>Can we disable more system calls by differentiating between a process different phases of execution?</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Server applications typically perform initialization operations at the beginning of their execution  Read configuration files</p>
    <p>Fork worker processes</p>
    <p>Execute other programs</p>
    <p>Create files and set their permissions</p>
    <p>Afterwards, they enter their main serving phase  Handle client requests</p>
    <p>Establish connections</p>
  </div>
  <div class="page">
    <p>Example: Apache Web Server</p>
    <p>main</p>
    <p>sock_bind</p>
    <p>p_listn</p>
    <p>child_main read</p>
    <p>bind</p>
    <p>writev</p>
    <p>execve</p>
    <p>malloc</p>
    <p>bind</p>
    <p>listen execve</p>
    <p>writev</p>
    <p>mmap</p>
    <p>read</p>
    <p>SyscallLib. Func.App. Func.</p>
    <p>fork</p>
    <p>pre_config</p>
    <p>mk_child</p>
    <p>proc_fork apr_palloc</p>
    <p>file_writev</p>
    <p>sock_recv</p>
    <p>prctl prctl</p>
    <p>mkdir mknod</p>
    <p>brctl brctl</p>
    <p>setns setns</p>
    <p>fcntl fcntl</p>
    <p>bind mmapreadmknod brctlfcntl listen execve writevforkprctl setns</p>
    <p>Initialization Serving</p>
    <p>Required System Calls</p>
  </div>
  <div class="page">
    <p>Temporal System Call Specialization</p>
    <p>Disable additional system calls that are needed only during the initialization phase, after entering the serving phase</p>
    <p>Examples  Apache Httpd and Nginx invoke execve only during initialization</p>
    <p>Lighttpd, Bind, and Redis invoke chmod only during initialization</p>
    <p>Disables 51% more security-critical system calls, breaking 218 more shellcodes and ROP payloads</p>
    <p>Mitigates 13 more Linux kernel CVEs</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Generating the call graph  Pruning based on argument types</p>
    <p>Pruning based on taken addresses</p>
    <p>Identifying the required system calls for each phase</p>
    <p>Enforcing system call filters after the initialization phase</p>
    <p>Experimental evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>System Overview</p>
    <p>LLVM IR</p>
    <p>Programmer-provided Function List</p>
    <p>SVF Andersens Analysis</p>
    <p>Type-based Pruning</p>
    <p>Address-taken Based Pruning</p>
    <p>Seccomp Filter Generation</p>
    <p>filter(SYS_execve) filter(SYS_setuid) filter(SYS_setsid) filter(SYS_bind) filter(SYS_listen)</p>
    <p>Imprecise Call Graph Precise Call GraphCall Graph with Type-based Pruning</p>
  </div>
  <div class="page">
    <p>Call Graph Generation</p>
    <p>A complete and sound call graph is required to identify unnecessary system calls  The use of function pointers necessitates points-to analysis</p>
    <p>While sound, points-to analysis comes with severe over-approximation</p>
    <p>Over-approximation prevents the precise differentiation of the system call requirements between the two phases  No security benefit if both initialization and serving phases use the same</p>
    <p>set of system calls</p>
    <p>Goal: improve precision without losing soundness</p>
  </div>
  <div class="page">
    <p>Pruning based on Argument Types</p>
    <p>Match arguments passed to callsite with function argument types</p>
    <p>Consider only struct types (no primitives, no void*)</p>
    <p>Consider only non-variadic functions</p>
    <p>(*gic)(int r, void *d, apr_wait_t s)</p>
    <p>Callsite</p>
    <p>piped_log_mnt (int p, void *m, apr_wait_t a)</p>
    <p>event_run (apr_pool * p, apr_pool * pl, serv_rec * s)</p>
    <p>Target Functions</p>
  </div>
  <div class="page">
    <p>Pruning based on Argument Types</p>
    <p>Match arguments passed to callsite with function argument types</p>
    <p>Consider only struct types (no primitives, no void*)</p>
    <p>Consider only non-variadic functions</p>
    <p>(*gic)(int r, void *d, apr_wait_t s)</p>
    <p>Callsite</p>
    <p>piped_log_mnt (int p, void *m, apr_wait_t a)</p>
    <p>event_run (apr_pool * p, apr_pool * pl, serv_rec * s)</p>
    <p>Target Functions</p>
  </div>
  <div class="page">
    <p>Pruning based on Argument Types</p>
    <p>Match arguments passed to callsite with function argument types</p>
    <p>Consider only struct types (no primitives, no void*)</p>
    <p>Consider only non-variadic functions</p>
    <p>(*gic)(int r, void *d, apr_wait_t s)</p>
    <p>Callsite</p>
    <p>piped_log_mnt (int p, void *m, apr_wait_t a)</p>
    <p>event_run (apr_pool * p, apr_pool * pl, serv_rec * s)</p>
    <p>Target Functions</p>
  </div>
  <div class="page">
    <p>Pruning based on Argument Types</p>
    <p>Match arguments passed to callsite with function argument types</p>
    <p>Consider only struct types (no primitives, no void*)</p>
    <p>Consider only non-variadic functions</p>
    <p>(*gic)(int r, void *d, apr_wait_t s)</p>
    <p>Callsite</p>
    <p>piped_log_mnt (int p, void *m, apr_wait_t a)</p>
    <p>event_run (apr_pool * p, apr_pool * pl, serv_rec * s)</p>
    <p>Target Functions</p>
  </div>
  <div class="page">
    <p>Pruning based on Argument Types</p>
    <p>Match arguments passed to callsite with function argument types</p>
    <p>Consider only struct types (no primitives, no void*)</p>
    <p>Consider only non-variadic functions</p>
    <p>(*gic)(int r, void *d, apr_wait_t s)</p>
    <p>Callsite</p>
    <p>piped_log_mnt (int p, void *m, apr_wait_t a)</p>
    <p>event_run (apr_pool * p, apr_pool * pl, serv_rec * s)</p>
    <p>Target Functions</p>
  </div>
  <div class="page">
    <p>Pruning based on Taken Addresses</p>
    <p>Identify where a function address is being taken (global and local)</p>
    <p>Check if those locations (local) are accessible from main()</p>
    <p>Prune edges to functions that are:  Not accessed directly and</p>
    <p>The location where the address is being taken is not accessible</p>
    <p>Example: address of piped_log_mnt is only taken in start_module  start_module is not accessible from main</p>
    <p>(*gic)(int r, void *d, apr_wait_t s)</p>
    <p>Callsite</p>
    <p>piped_log_mnt (int p, void *m, apr_wait_t a)</p>
    <p>Target Functions</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Generating the call graph  Pruning based on argument types</p>
    <p>Pruning based on taken addresses</p>
    <p>Identifying the required system calls for each phase</p>
    <p>Enforcing system call filters after the initialization phase</p>
    <p>Experimental evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>System Call Mapping</p>
    <p>Glibc call graph generation  Map all exported functions to</p>
    <p>the system calls they use</p>
    <p>Generate call graph for all libraries  Leaves are either system calls or</p>
    <p>Functions from other libraries</p>
    <p>Combine all call graphs to create a complete graph</p>
    <p>main</p>
    <p>sock_bind</p>
    <p>p_listn</p>
    <p>bind</p>
    <p>execve</p>
    <p>bind</p>
    <p>listen</p>
    <p>execve</p>
    <p>fork</p>
    <p>pre_config</p>
    <p>proc_fork</p>
    <p>listen</p>
    <p>sslcrt</p>
    <p>Apache</p>
    <p>Glibc</p>
    <p>Openssl</p>
    <p>sslbrk</p>
    <p>fork</p>
    <p>sslocrt</p>
    <p>write</p>
    <p>write brk</p>
    <p>brk</p>
    <p>SyscallLib. Func.App. Func.</p>
  </div>
  <div class="page">
    <p>System Call Mapping</p>
    <p>main</p>
    <p>sock_bind</p>
    <p>p_listn</p>
    <p>bind</p>
    <p>execve</p>
    <p>bind</p>
    <p>listen</p>
    <p>execve</p>
    <p>fork</p>
    <p>pre_config</p>
    <p>proc_fork</p>
    <p>listen</p>
    <p>sslcrt</p>
    <p>Apache</p>
    <p>Glibc</p>
    <p>Openssl</p>
    <p>sslbrk</p>
    <p>fork</p>
    <p>sslocrt</p>
    <p>write</p>
    <p>write brk</p>
    <p>brk</p>
    <p>SyscallLib. Func.App. Func.</p>
    <p>Glibc call graph generation  Map all exported functions to</p>
    <p>the system calls they use</p>
    <p>Generate call graph for all libraries  Leaves are either system calls or</p>
    <p>Functions from other libraries</p>
    <p>Combine all call graphs to create a complete graph</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Generating the call graph  Pruning based on argument types</p>
    <p>Pruning based on taken addresses</p>
    <p>Identifying the required system calls for each phase</p>
    <p>Enforcing system call filters after the initialization phase</p>
    <p>Experimental evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>System Call Filtering Enforcement</p>
    <p>Seccomp BPF  Standard Linux kernel facility for system call filtering</p>
    <p>Filters installed by invoking the seccomp or prctl system call</p>
    <p>In case of filter conflicts, the least privileged ones are considered</p>
    <p>Install more restrictive filters after entering the serving phase</p>
    <p>main</p>
    <p>sock_bind</p>
    <p>p_listn</p>
    <p>child_main read</p>
    <p>bind</p>
    <p>writev</p>
    <p>execve</p>
    <p>malloc</p>
    <p>bind</p>
    <p>listen execve</p>
    <p>writev</p>
    <p>mmap</p>
    <p>read</p>
    <p>fork</p>
    <p>pre_config</p>
    <p>mk_child</p>
    <p>proc_fork apr_palloc</p>
    <p>file_writev</p>
    <p>sock_recv</p>
    <p>Initialization Serving</p>
    <p>install_filter(SYS_execve); install_filter(SYS_bind); install_filter(SYS_listen); install_filter(SYS_fork);</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Generating the call graph  Pruning based on argument types</p>
    <p>Pruning based on taken addresses</p>
    <p>Identifying the required system calls for each phase</p>
    <p>Enforcing system call filters after the initialization phase</p>
    <p>Experimental evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Lib. vs. Temporal Specialization: Retained System Calls</p>
    <p>Application Library Debloating Temporal Specialization</p>
    <p>Initialization Serving</p>
    <p>Nginx 104 104 97</p>
    <p>Apache Httpd 105 94 79</p>
    <p>Lighttpd 95 95 76</p>
    <p>Bind 127 99 85</p>
    <p>Memcached 99 99 84</p>
    <p>Redis 90 90 82</p>
    <p>Number of system calls retained (out of 333 available) after applying library debloating and temporal specialization</p>
  </div>
  <div class="page">
    <p>Security-critical System Calls Disabled</p>
    <p>Syscall Nginx Apache Httpd Lighttpd Bind Memcached Redis</p>
    <p>Lib. Temp. Lib. Temp. Lib. Temp. Lib. Temp. Lib. Temp. Lib. Temp.</p>
    <p>C m</p>
    <p>d E</p>
    <p>xe cu</p>
    <p>ti o</p>
    <p>n clone    *  *  *  *  *</p>
    <p>execveat</p>
    <p>execve</p>
    <p>fork</p>
    <p>ptrace</p>
    <p>P e</p>
    <p>rm is</p>
    <p>si o</p>
    <p>n s</p>
    <p>chmod</p>
    <p>mprotect</p>
    <p>setgid</p>
    <p>setreuid</p>
    <p>setuid</p>
    <p>: Syscall is removed : Syscall is not removed : Can be removed by applying configuration-driven specialization *: Can be removed by applying API specialization</p>
  </div>
  <div class="page">
    <p>Broken Shellcodes and ROP Payloads</p>
    <p>Collected 567 shellcodes and 17 ROP payloads</p>
    <p>Increased set of shellcodes to 1,726 by generating shellcode variations based on equivalent system calls  Example: accept and accept4 are equivalent</p>
    <p>Payload Category Count Library Debloating Temporal Specialization</p>
    <p>Shellcode 1726 1103 (63%) 1321 (76%)</p>
    <p>ROP Payloads 17 9 (52%) 11.6 (68%)</p>
    <p>Average number (%) of payloads broken by library and temporal specialization across applications</p>
  </div>
  <div class="page">
    <p>Neutralized Linux Kernel CVEs</p>
    <p>CVE System Call(s) Description Library Temporal</p>
    <p>CVE-2018-18281 execve(at), remap Allows user to gain access to a physical page after it has been released 0 4</p>
    <p>CVE-2016-3672 execve(at) Allows user to bypass ASLR by disabling stack consumption resource limits 2 4</p>
    <p>CVE-2015-3339 execve(at) Race condition allows privilege escalation by executing program 2 4</p>
    <p>CVE-2015-1593 execve(at) Bug in stack randomization allows attackers to bypass ASLR by predicting top of stack 2 4</p>
    <p>CVE-2014-9585 execve(at) ASLR protection can be bypassed du to bug in choosing memory locations 2 4</p>
    <p>CVE-2013-0914 execve(at) Allows local user to bypass ASLR by executing a crafted application 2 4</p>
    <p>CVE-2012-4530 execve(at) Sensitive information from the kernel can be leaked via a crafted application 2 4</p>
    <p>CVE-2012-3375 epoll_ctl Denial of service can be caused due to improper checks in epoll operations 0 1</p>
    <p>CVE-2011-1082 epoll_(ctl, pwait, wait) Local user can cause denial of service due to improper checks in epoll data structures 0 1</p>
    <p>CVE-2010-4346 execve(at) Allows attacker to conduct NULL pointer dereference attack via a crafted application 2 4</p>
    <p>CVE-2010-4243 uselib, execve(at) Denial of service can be caused via a crafted exec system call 2 4</p>
    <p>CVE-2010-3858 execve(at) Denial of service can be caused due to bug in restricting stack memory consumption 2 4</p>
    <p>CVE-2008-3527 execve(at) Allows a local user to escalate privileges or cause DoS due to improper boundary checks 2 4</p>
    <p>Kernel CVEs mitigated by filtering unneeded system calls</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Temporal specialization removes security-critical system calls by differentiating between the execution phases of a process  Proposed two novel call graph pruning techniques</p>
    <p>Filters 51% more security-critical system calls than previous library debloating techniques</p>
    <p>Mitigates 13 more Linux kernel CVEs compared to previous library debloating techniques</p>
    <p>Temporal System Call Specialization for Attack Surface Reduction Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, Michalis Polychronakis {sghavamnia, tpalit, shmishra, mikepo}@cs.stonybrook.edu</p>
    <p>Source code: https://github.com/shamedgh/temporal-specialization</p>
  </div>
</Presentation>
