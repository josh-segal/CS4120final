<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Faculty of Electrical Engineering, TechnionFaculty of Electrical Engineering, Technion FuDiCo IIFuDiCo IIG. Badishi &amp; I. KeidarG. Badishi &amp; I. Keidar</p>
    <p>Towards Survivability of Towards Survivability of Application-Level MulticastApplication-Level Multicast</p>
    <p>Towards Survivability of Towards Survivability of Application-Level MulticastApplication-Level Multicast</p>
    <p>Gal Badishi, Idit Keidar, Roie Gal Badishi, Idit Keidar, Roie MelamedMelamed</p>
    <p>Gal Badishi, Idit Keidar, Roie Gal Badishi, Idit Keidar, Roie MelamedMelamed</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>OutlineOutlineOutlineOutline</p>
    <p>Threats and problemsThreats and problems  Application-level multicastApplication-level multicast</p>
    <p>Robust gossip - DrumRobust gossip - Drum  Robust overlay - AraneolaRobust overlay - Araneola</p>
    <p>Challenges and future directionsChallenges and future directions</p>
    <p>Threats and problemsThreats and problems  Application-level multicastApplication-level multicast</p>
    <p>Robust gossip - DrumRobust gossip - Drum  Robust overlay - AraneolaRobust overlay - Araneola</p>
    <p>Challenges and future directionsChallenges and future directions</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>The Net as a WarzoneThe Net as a WarzoneThe Net as a WarzoneThe Net as a Warzone</p>
    <p>Crash failures, message lossCrash failures, message loss  Rapid dynamic changes  churnRapid dynamic changes  churn</p>
    <p>Can cause denial of serviceCan cause denial of service</p>
    <p>Denial of Service (DoS)Denial of Service (DoS)  Uncooperative usersUncooperative users  Forgery/spoofingForgery/spoofing  PenetrationPenetration</p>
    <p>Crash failures, message lossCrash failures, message loss  Rapid dynamic changes  churnRapid dynamic changes  churn</p>
    <p>Can cause denial of serviceCan cause denial of service</p>
    <p>Denial of Service (DoS)Denial of Service (DoS)  Uncooperative usersUncooperative users  Forgery/spoofingForgery/spoofing  PenetrationPenetration</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Denial of ServiceDenial of ServiceDenial of ServiceDenial of Service</p>
    <p>Unavailability of serviceUnavailability of service  Exhausting resourcesExhausting resources</p>
    <p>Remote attacksRemote attacks  Network levelNetwork level</p>
    <p>Solutions do not solve all application problemsSolutions do not solve all application problems  Application levelApplication level</p>
    <p>Got little attentionGot little attention Quantitative analysis of impact on application Quantitative analysis of impact on application</p>
    <p>and identification of vulnerabilities neededand identification of vulnerabilities needed</p>
    <p>Unavailability of serviceUnavailability of service  Exhausting resourcesExhausting resources</p>
    <p>Remote attacksRemote attacks  Network levelNetwork level</p>
    <p>Solutions do not solve all application problemsSolutions do not solve all application problems  Application levelApplication level</p>
    <p>Got little attentionGot little attention Quantitative analysis of impact on application Quantitative analysis of impact on application</p>
    <p>and identification of vulnerabilities neededand identification of vulnerabilities needed</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>DoS - ChallengesDoS - ChallengesDoS - ChallengesDoS - Challenges</p>
    <p>Quantify the effect of DoS at the Quantify the effect of DoS at the application levelapplication level</p>
    <p>Expose vulnerabilitiesExpose vulnerabilities  Find effective DoS-mitigation Find effective DoS-mitigation</p>
    <p>techniquestechniques  Prove their usefulness using the found Prove their usefulness using the found</p>
    <p>metricmetric</p>
    <p>Multicast as an exampleMulticast as an example</p>
    <p>Quantify the effect of DoS at the Quantify the effect of DoS at the application levelapplication level</p>
    <p>Expose vulnerabilitiesExpose vulnerabilities  Find effective DoS-mitigation Find effective DoS-mitigation</p>
    <p>techniquestechniques  Prove their usefulness using the found Prove their usefulness using the found</p>
    <p>metricmetric</p>
    <p>Multicast as an exampleMulticast as an example</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Application-Level MulticastApplication-Level MulticastApplication-Level MulticastApplication-Level Multicast</p>
    <p>Tree-basedTree-based  Single points of failureSingle points of failure</p>
    <p>Gossip-basedGossip-based  Overlay networksOverlay networks</p>
    <p>Tree-basedTree-based  Single points of failureSingle points of failure</p>
    <p>Gossip-basedGossip-based  Overlay networksOverlay networks</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Gossip-Based MulticastGossip-Based MulticastGossip-Based MulticastGossip-Based Multicast</p>
    <p>Progresses in roundsProgresses in rounds  Every roundEvery round</p>
    <p>Choose random partners Choose random partners  Send (push) or receive (pull) messagesSend (push) or receive (pull) messages  Discard old msgs from bufferDiscard old msgs from buffer</p>
    <p>Probabilistic reliabilityProbabilistic reliability  Uses redundancy to achieve robustnessUses redundancy to achieve robustness</p>
    <p>Progresses in roundsProgresses in rounds  Every roundEvery round</p>
    <p>Choose random partners Choose random partners  Send (push) or receive (pull) messagesSend (push) or receive (pull) messages  Discard old msgs from bufferDiscard old msgs from buffer</p>
    <p>Probabilistic reliabilityProbabilistic reliability  Uses redundancy to achieve robustnessUses redundancy to achieve robustness</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Effects of DoS on GossipEffects of DoS on GossipEffects of DoS on GossipEffects of DoS on Gossip</p>
    <p>Surprisingly, we show that nave Surprisingly, we show that nave gossip is vulnerable to DoS attacksgossip is vulnerable to DoS attacks</p>
    <p>Attacking a process in pull-based Attacking a process in pull-based gossip may prevent it from gossip may prevent it from sendingsending messagesmessages</p>
    <p>Attacking a process in push-based Attacking a process in push-based gossip may prevent it from gossip may prevent it from receivingreceiving messagesmessages</p>
    <p>Surprisingly, we show that nave Surprisingly, we show that nave gossip is vulnerable to DoS attacksgossip is vulnerable to DoS attacks</p>
    <p>Attacking a process in pull-based Attacking a process in pull-based gossip may prevent it from gossip may prevent it from sendingsending messagesmessages</p>
    <p>Attacking a process in push-based Attacking a process in push-based gossip may prevent it from gossip may prevent it from receivingreceiving messagesmessages</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Drum Drum [DSN 04][DSN 04]Drum Drum [DSN 04][DSN 04]</p>
    <p>A new gossip-based ALM protocolA new gossip-based ALM protocol  DoS-mitigation techniques:DoS-mitigation techniques:</p>
    <p>Using random one-time ports to Using random one-time ports to communicatecommunicate</p>
    <p>Combining both push and pullCombining both push and pull  Separating and bounding resourcesSeparating and bounding resources</p>
    <p>Eliminates vulnerabilities to DoSEliminates vulnerabilities to DoS  Proven robust using formal analysis and Proven robust using formal analysis and</p>
    <p>empirical measurementsempirical measurements</p>
    <p>A new gossip-based ALM protocolA new gossip-based ALM protocol  DoS-mitigation techniques:DoS-mitigation techniques:</p>
    <p>Using random one-time ports to Using random one-time ports to communicatecommunicate</p>
    <p>Combining both push and pullCombining both push and pull  Separating and bounding resourcesSeparating and bounding resources</p>
    <p>Eliminates vulnerabilities to DoSEliminates vulnerabilities to DoS  Proven robust using formal analysis and Proven robust using formal analysis and</p>
    <p>empirical measurementsempirical measurements</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Random PortsRandom PortsRandom PortsRandom Ports</p>
    <p>Any request necessitating a reply Any request necessitating a reply contains a random port numbercontains a random port number  Invisible to the attacker (e.g., Invisible to the attacker (e.g.,</p>
    <p>encrypted)encrypted)</p>
    <p>The reply is sent to that random portThe reply is sent to that random port  Assumption: Network withstands loadAssumption: Network withstands load</p>
    <p>Any request necessitating a reply Any request necessitating a reply contains a random port numbercontains a random port number  Invisible to the attacker (e.g., Invisible to the attacker (e.g.,</p>
    <p>encrypted)encrypted)</p>
    <p>The reply is sent to that random portThe reply is sent to that random port  Assumption: Network withstands loadAssumption: Network withstands load</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Combining Push and PullCombining Push and PullCombining Push and PullCombining Push and Pull</p>
    <p>Attacking push cannot prevent Attacking push cannot prevent receiving messages via pull (random receiving messages via pull (random ports)ports)</p>
    <p>Attacking pull cannot prevent Attacking pull cannot prevent sending via pushsending via push</p>
    <p>Each process has some control over Each process has some control over the processes it communicates withthe processes it communicates with</p>
    <p>Attacking push cannot prevent Attacking push cannot prevent receiving messages via pull (random receiving messages via pull (random ports)ports)</p>
    <p>Attacking pull cannot prevent Attacking pull cannot prevent sending via pushsending via push</p>
    <p>Each process has some control over Each process has some control over the processes it communicates withthe processes it communicates with</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Bounding ResourcesBounding ResourcesBounding ResourcesBounding Resources</p>
    <p>Prevent resource exhaustionPrevent resource exhaustion  Separate resources for orthogonal Separate resources for orthogonal</p>
    <p>operationsoperations</p>
    <p>Prevent resource exhaustionPrevent resource exhaustion  Separate resources for orthogonal Separate resources for orthogonal</p>
    <p>operationsoperations</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Evaluation: Staged DoS Evaluation: Staged DoS AttacksAttacks</p>
    <p>Evaluation: Staged DoS Evaluation: Staged DoS AttacksAttacks</p>
    <p>Increasing strength Increasing strength  shows trend under DoSshows trend under DoS</p>
    <p>Fixed strength Fixed strength  exposes vulnerabilitiesexposes vulnerabilities</p>
    <p>Source is always attackedSource is always attacked  Analysis, simulations, measurementsAnalysis, simulations, measurements</p>
    <p>Increasing strength Increasing strength  shows trend under DoSshows trend under DoS</p>
    <p>Fixed strength Fixed strength  exposes vulnerabilitiesexposes vulnerabilities</p>
    <p>Source is always attackedSource is always attacked  Analysis, simulations, measurementsAnalysis, simulations, measurements</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Analysis  Increasing Analysis  Increasing StrengthStrength</p>
    <p>Analysis  Increasing Analysis  Increasing StrengthStrength</p>
    <p>Assume static group, strict subset is Assume static group, strict subset is attackedattacked</p>
    <p>Lemma 1Lemma 1: : Drums propagation time is Drums propagation time is bounded from above by a constant bounded from above by a constant independent of the attack rateindependent of the attack rate</p>
    <p>Lemma 2Lemma 2: : The propagation time of Push The propagation time of Push grows at least linearly with the attack rategrows at least linearly with the attack rate</p>
    <p>Lemma 3Lemma 3: : The propagation time of Pull The propagation time of Pull grows at least linearly with the attack rategrows at least linearly with the attack rate</p>
    <p>Assume static group, strict subset is Assume static group, strict subset is attackedattacked</p>
    <p>Lemma 1Lemma 1: : Drums propagation time is Drums propagation time is bounded from above by a constant bounded from above by a constant independent of the attack rateindependent of the attack rate</p>
    <p>Lemma 2Lemma 2: : The propagation time of Push The propagation time of Push grows at least linearly with the attack rategrows at least linearly with the attack rate</p>
    <p>Lemma 3Lemma 3: : The propagation time of Pull The propagation time of Pull grows at least linearly with the attack rategrows at least linearly with the attack rate</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Attack Rate</p>
    <p># ro</p>
    <p>u n</p>
    <p>d s</p>
    <p>Expected Propagation Time, 10% Attacked</p>
    <p>Push, n = 1000 Push, n = 120 Pull, n = 1000 Pull, n = 120 Drum, n = 1000 Drum, n = 120</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Attack Rate</p>
    <p># ro</p>
    <p>u n</p>
    <p>d s</p>
    <p>Drum - Known Ports Drum - Random Ports</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Attack Rate</p>
    <p># ro</p>
    <p>u n</p>
    <p>d s</p>
    <p>Expected Propagation Time, 10% Attacked (of 50)</p>
    <p>Drum - Shared Bounds Drum - Separate Bounds</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Analysis  Fixed StrengthAnalysis  Fixed StrengthAnalysis  Fixed StrengthAnalysis  Fixed Strength</p>
    <p>Lemma 4Lemma 4: : For strong enough attacks, For strong enough attacks, Drums expected propagation time is Drums expected propagation time is monotonically increasing as the monotonically increasing as the percentage of attacked processes percentage of attacked processes increasesincreases</p>
    <p>Lemma 4Lemma 4: : For strong enough attacks, For strong enough attacks, Drums expected propagation time is Drums expected propagation time is monotonically increasing as the monotonically increasing as the percentage of attacked processes percentage of attacked processes increasesincreases</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>ro u</p>
    <p>n d</p>
    <p>s</p>
    <p>% attacked processes</p>
    <p>Expected Propagation Time, Fixed Strength (c = 10)</p>
    <p>Push, n = 120 Push, n = 500 Pull, n = 120 Pull, n = 500 Drum, n = 120 Drum, n = 500</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>General PrinciplesGeneral PrinciplesGeneral PrinciplesGeneral Principles</p>
    <p>Network-level DoS mitigation necessary but Network-level DoS mitigation necessary but not sufficient: application needs not sufficient: application needs consideration too!consideration too!</p>
    <p>DoS-mitigation techniques: DoS-mitigation techniques:  random portsrandom ports  neighbor-selection by local choicesneighbor-selection by local choices  separate resource boundsseparate resource bounds</p>
    <p>Design goal: eliminate vulnerabilities Design goal: eliminate vulnerabilities  The most effective attack is a broad oneThe most effective attack is a broad one</p>
    <p>Analysis and quantitative evaluation of Analysis and quantitative evaluation of impact of DoSimpact of DoS</p>
    <p>Network-level DoS mitigation necessary but Network-level DoS mitigation necessary but not sufficient: application needs not sufficient: application needs consideration too!consideration too!</p>
    <p>DoS-mitigation techniques: DoS-mitigation techniques:  random portsrandom ports  neighbor-selection by local choicesneighbor-selection by local choices  separate resource boundsseparate resource bounds</p>
    <p>Design goal: eliminate vulnerabilities Design goal: eliminate vulnerabilities  The most effective attack is a broad oneThe most effective attack is a broad one</p>
    <p>Analysis and quantitative evaluation of Analysis and quantitative evaluation of impact of DoSimpact of DoS</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Further ChallengesFurther ChallengesFurther ChallengesFurther Challenges</p>
    <p>Not bandwidth-optimizedNot bandwidth-optimized  Reliability is achieved at the cost of high Reliability is achieved at the cost of high</p>
    <p>redundancyredundancy</p>
    <p>Rapid change in communication Rapid change in communication partners makes diagnosis of partners makes diagnosis of neighbors correct operation difficultneighbors correct operation difficult  Hard to incentivize cooperationHard to incentivize cooperation</p>
    <p>Not bandwidth-optimizedNot bandwidth-optimized  Reliability is achieved at the cost of high Reliability is achieved at the cost of high</p>
    <p>redundancyredundancy</p>
    <p>Rapid change in communication Rapid change in communication partners makes diagnosis of partners makes diagnosis of neighbors correct operation difficultneighbors correct operation difficult  Hard to incentivize cooperationHard to incentivize cooperation</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>AraneolaAraneolaAraneolaAraneola</p>
    <p>Overlay-based application-level multicastOverlay-based application-level multicast  Bandwidth efficiency:Bandwidth efficiency:</p>
    <p>Basic overlay: random links, low degrees for Basic overlay: random links, low degrees for all all nodesnodes</p>
    <p>Add local links according to available bandwidthAdd local links according to available bandwidth</p>
    <p>Robustness to link &amp; node failuresRobustness to link &amp; node failures  Cheap maintenanceCheap maintenance</p>
    <p>Amortize join/leave costsAmortize join/leave costs  Can handle high churnCan handle high churn</p>
    <p>Overlay-based application-level multicastOverlay-based application-level multicast  Bandwidth efficiency:Bandwidth efficiency:</p>
    <p>Basic overlay: random links, low degrees for Basic overlay: random links, low degrees for all all nodesnodes</p>
    <p>Add local links according to available bandwidthAdd local links according to available bandwidth</p>
    <p>Robustness to link &amp; node failuresRobustness to link &amp; node failures  Cheap maintenanceCheap maintenance</p>
    <p>Amortize join/leave costsAmortize join/leave costs  Can handle high churnCan handle high churn</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Basic (Random) OverlayBasic (Random) OverlayBasic (Random) OverlayBasic (Random) Overlay</p>
    <p>For k  3, approximate k-regular random graph:  each node has either k or k+1 random neighbors  logarithmic diameter  k-connected  expander, remains highly connected following</p>
    <p>random removal of large subsets of edges or nodes</p>
    <p>Cheap maintenance: each join or leave operation incurs sending only a total of about 3k messages</p>
    <p>For k  3, approximate k-regular random graph:  each node has either k or k+1 random neighbors  logarithmic diameter  k-connected  expander, remains highly connected following</p>
    <p>random removal of large subsets of edges or nodes</p>
    <p>Cheap maintenance: each join or leave operation incurs sending only a total of about 3k messages</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Overhead for Dealing with Join/Leave Operations</p>
    <p>Overhead for Dealing with Join/Leave Operations</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Impact of Edge Failures Impact of Edge Failures on Connectivityon Connectivity</p>
    <p>Impact of Edge Failures Impact of Edge Failures on Connectivityon Connectivity</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Impact of Node Failures Impact of Node Failures on Connectivityon Connectivity</p>
    <p>Impact of Node Failures Impact of Node Failures on Connectivityon Connectivity</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Further ChallengesFurther ChallengesFurther ChallengesFurther Challenges</p>
    <p>Does not currently deal with Does not currently deal with  DoSDoS  uncooperative usersuncooperative users  non-random link/node failuresnon-random link/node failures</p>
    <p>Does not currently deal with Does not currently deal with  DoSDoS  uncooperative usersuncooperative users  non-random link/node failuresnon-random link/node failures</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
    <p>Future DirectionsFuture DirectionsFuture DirectionsFuture Directions</p>
    <p>Can we get the best of all worlds? Can we get the best of all worlds?  BW/latency efficient, churn/DoS resistant, detects BW/latency efficient, churn/DoS resistant, detects</p>
    <p>incorrect nodes, overcomes adversarial failuresincorrect nodes, overcomes adversarial failures</p>
    <p>Test neighbors for cooperativenessTest neighbors for cooperativeness  Communicate with same neighbors for long periods Communicate with same neighbors for long periods</p>
    <p>Can we eliminate well-known ports altogether?Can we eliminate well-known ports altogether?  Use pseudo-random ports insteadUse pseudo-random ports instead  Challenge: agree upon seeds without exposing themChallenge: agree upon seeds without exposing them</p>
    <p>Can we get the best of all worlds? Can we get the best of all worlds?  BW/latency efficient, churn/DoS resistant, detects BW/latency efficient, churn/DoS resistant, detects</p>
    <p>incorrect nodes, overcomes adversarial failuresincorrect nodes, overcomes adversarial failures</p>
    <p>Test neighbors for cooperativenessTest neighbors for cooperativeness  Communicate with same neighbors for long periods Communicate with same neighbors for long periods</p>
    <p>Can we eliminate well-known ports altogether?Can we eliminate well-known ports altogether?  Use pseudo-random ports insteadUse pseudo-random ports instead  Challenge: agree upon seeds without exposing themChallenge: agree upon seeds without exposing them</p>
  </div>
  <div class="page">
    <p>G. Badishi &amp; I.Keidar</p>
    <p>FuDiCo II</p>
  </div>
</Presentation>
