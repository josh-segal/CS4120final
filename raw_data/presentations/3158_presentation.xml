<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Value Function Approximation on Non-linear Manifolds for Robot Motor Control</p>
    <p>Masashi Sugiyama1)2) Hirotaka Hachiya1)2) Christopher Towell2) Sethu Vijayakumar2)</p>
  </div>
  <div class="page">
    <p>Robot knows its position but doesnt know which direction to go. We dont teach the best action to take at each position but give a reward at the goal. Task: make the robot select the optimal action.</p>
    <p>Up</p>
    <p>RightLeft</p>
    <p>Down</p>
    <p>Possible actions</p>
    <p>Position (x,y)</p>
    <p>Goal</p>
    <p>reward</p>
  </div>
  <div class="page">
    <p>: set of states, : set of actions, : transition probability, : reward,</p>
    <p>An action the robot takes at state is specified by policy .</p>
    <p>Goal: make the robot learn optimal policy</p>
    <p>{ }RPAS ,,, S A P R</p>
    <p>{ }is { }right left, down, up,</p>
    <p>)s(s,a,</p>
    <p>)(sa =</p>
    <p>),( asR a s</p>
  </div>
  <div class="page">
    <p>discounted sum of future rewards when taking in and following thereafter Optimal value:</p>
    <p>Optimal policy: is computed if is given.</p>
    <p>Question: How to compute ?</p>
    <p>===</p>
    <p>=</p>
    <p>aassrEasQ t</p>
    <p>t t</p>
    <p>,),(</p>
    <p>),(maxarg),( asQasQ</p>
    <p>=</p>
    <p>),(maxarg),( asQas a</p>
    <p>=</p>
    <p>a s</p>
    <p>Q</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Policy iteration always converges to if in step 1 can be computed. Question: How to compute ?</p>
    <p>(Sutton &amp; Barto, 1998)</p>
    <p>),(maxarg)( asQs a</p>
    <p>=</p>
    <p>===</p>
    <p>=</p>
    <p>aassrEasQ t</p>
    <p>t t</p>
    <p>,|),(</p>
    <p>),( asQ</p>
    <p>),( asQ</p>
    <p>),( asQ</p>
  </div>
  <div class="page">
    <p>can be recursively expressed by</p>
    <p>can be computed by solving Bellman equation Drawback: dimensionality of Bellman equation becomes huge in large state and action spaces</p>
    <p>Bellman Equation</p>
    <p>high computational cost</p>
    <p>))'(,'()',,(),(),( '</p>
    <p>ssQsasPasRasQ s</p>
    <p>+=</p>
    <p>),( asQ</p>
    <p>),( asQ</p>
    <p>as  ,</p>
    <p>AS</p>
  </div>
  <div class="page">
    <p>is learned so as to optimally approximate Bellman equation in the least-squares sense # of parameters is only :</p>
    <p>LSPI works well if we choose appropriate Question: How to choose ?</p>
    <p>(Lagoudakis and Parr, 2003)</p>
    <p>: fixed basis functions : parameters : # of basis functions</p>
    <p>),(),( 1</p>
    <p>aswasQ i K</p>
    <p>i i</p>
    <p>=</p>
    <p>= ),( asi iw K</p>
    <p>K ASK &lt;&lt;</p>
    <p>K ii 1}{ =</p>
    <p>K ii 1}{ =</p>
    <p>K iiw 1}{ =</p>
  </div>
  <div class="page">
    <p>Smooth Gaussian tail goes over partitions</p>
    <p>: Euclidean distance : Centre state</p>
    <p>= 2</p>
    <p>exp)(  ssED</p>
    <p>sk c</p>
    <p>ED cs</p>
    <p>cs</p>
    <p>cs</p>
    <p>Partitions</p>
  </div>
  <div class="page">
    <p>Values around the partitions are not approximated well.</p>
    <p>Approximated by GKOptimal value function Log scale</p>
  </div>
  <div class="page">
    <p>GK provides an undesired policy around the partition.</p>
    <p>GK-based policyOptimal policy</p>
  </div>
  <div class="page">
    <p>We propose new Gaussian kernel to overcome this problem.</p>
  </div>
  <div class="page">
    <p>Euclidean distance does not incorporate state space structure, so tail problems occur. We represent state space structure by a graph, and use it for defining Gaussian kernels.</p>
    <p>(Mahadevan, ICML 2005)</p>
    <p>= 2</p>
    <p>exp)(  ssED</p>
    <p>sk c</p>
  </div>
  <div class="page">
    <p>Natural distance on graph is shortest path.</p>
    <p>We use shortest path in Gaussian function.</p>
    <p>We call this kernel geodesic Gaussian. SP can be efficiently computed by Dijkstra.</p>
    <p>Geodesic Gaussian Kernels</p>
    <p>= 2</p>
    <p>exp)(  ssSP</p>
    <p>sk c Euclidean distance</p>
    <p>Shortest path</p>
  </div>
  <div class="page">
    <p>Tails do not go across the partition. Values smoothly decrease along the maze.</p>
    <p>Geodesic GaussianOrdinary Gaussian cs</p>
    <p>cs cs</p>
  </div>
  <div class="page">
    <p>Values near the partition are well approximated. Discontinuity across the partition is preserved.</p>
    <p>Ordinary Gaussian</p>
    <p>Optimal Comparison of Value Functions</p>
    <p>Geodesic Gaussian</p>
  </div>
  <div class="page">
    <p>GGKs provide good policies near the partition.</p>
    <p>Geodesic GaussianOrdinary Gaussian</p>
  </div>
  <div class="page">
    <p>Average over 100 runs</p>
    <p>Geodesic</p>
    <p>Ordinary</p>
    <p>Ordinary Gaussian: tail problem Geodesic Gaussian: no tail problem</p>
    <p>Experimental Result</p>
    <p>Number of kernels</p>
    <p>F ra</p>
    <p>ct io</p>
    <p>n of</p>
    <p>o pt</p>
    <p>im al</p>
    <p>s ta</p>
    <p>te s</p>
  </div>
  <div class="page">
    <p>Joint 1</p>
    <p>Joint 2</p>
    <p>End effector</p>
    <p>Object</p>
    <p>Obstacle</p>
    <p>Joint 1 (degree)</p>
    <p>Jo in</p>
    <p>t 2 (</p>
    <p>de gr</p>
    <p>ee )</p>
    <p>-180 1000-100Reward:</p>
    <p>+1 reach the object 0 otherwise</p>
    <p>Task: move the end effector to reach the object</p>
  </div>
  <div class="page">
    <p>Successfully avoids the obstacle and</p>
    <p>can reach the object.</p>
    <p>Moves directly towards the object without</p>
    <p>avoiding the obstacle.</p>
    <p>Ordinary Gaussian Geodesic Gaussian</p>
  </div>
  <div class="page">
    <p>Reward: +1 (forward) -2 (collision) 0 (others)</p>
    <p>Sensor value: 0 - 1030</p>
  </div>
  <div class="page">
    <p>1000 800 600 400 200 0 200 400 600 800 1000 400</p>
    <p>200</p>
    <p>Partitions</p>
  </div>
  <div class="page">
    <p>When facing obstacle, goes backward</p>
    <p>(and goes forward again).</p>
    <p>When facing obstacle, makes a turn</p>
    <p>(and go forward).</p>
    <p>Ordinary Gaussian Geodesic Gaussian</p>
  </div>
  <div class="page">
    <p>Geodesic outperforms ordinary Gaussian.</p>
    <p>Geodesic</p>
    <p>Ordinary</p>
  </div>
  <div class="page">
    <p>good basis function needed Ordinary Gaussian kernel:</p>
    <p>tail goes over discontinuities Geodesic Gaussian kernel:</p>
    <p>smooth along the state space Through the experiments, we showed geodesic Gaussian is promising in high-dimensional continuous problems!</p>
  </div>
</Presentation>
