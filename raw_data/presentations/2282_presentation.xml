<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy University of Washington</p>
    <p>NSDI 10, San Jose, CA</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>The web is an ever-changing, interesting, and incredibly massive database of information  Google,7/25/08: 1 trillion unique URLS in index</p>
    <p>There are many crawler applications that scour the web to harvest data</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Crawl the entire web and use all of the content</p>
    <p>Crawl the entire web and use a small subset of the content</p>
  </div>
  <div class="page">
    <p>Crawler Applications do two tasks:  Crawl the entire web  Application specific work</p>
    <p>Crawling at web scale is hard  Expensive  Operationally difficult  Discards most documents</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Decouple the difficult crawling tasks from the application-specific tasks</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>Web</p>
  </div>
  <div class="page">
    <p>Share the crawler as a common service  Still need to deliver the deluge</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>Web</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
  </div>
  <div class="page">
    <p>Ex te</p>
    <p>ns ib</p>
    <p>le C</p>
    <p>ra w</p>
    <p>le r</p>
    <p>Make filtering a shared resource  Only a small trickle of documents now!</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>Web</p>
    <p>ap p</p>
    <p>sp ec</p>
    <p>ifi c</p>
  </div>
  <div class="page">
    <p>Ex te</p>
    <p>ns ib</p>
    <p>le C</p>
    <p>ra w</p>
    <p>le r</p>
    <p>Web</p>
    <p>Client uses filter language to inject filters  The crawler harvests webpages and dispatches</p>
    <p>documents  A filter engine evaluates documents  Document matches are collected by crawler apps</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>As banks deal with fraud Democrats are embolden.. Air travelers stranded in ..</p>
    <p>Defense Secretary Robert .. write(unescape(%20%de..</p>
    <p>&lt;script language= Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy</p>
  </div>
  <div class="page">
    <p>match Web</p>
    <p>Client uses filter language to inject filters  The crawler harvests webpages and dispatches</p>
    <p>documents  A filter engine evaluates documents  Document matches are collected by crawler apps</p>
    <p>Ex te</p>
    <p>ns ib</p>
    <p>le C</p>
    <p>ra w</p>
    <p>le r</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>As banks deal with fraud Democrats are embolden.. Air travelers stranded in ..</p>
    <p>Defense Secretary Robert .. write(unescape(%20%de..</p>
    <p>&lt;script language= Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy</p>
  </div>
  <div class="page">
    <p>The extensible crawler is a service that must be:  Flexible</p>
    <p>Support a diverse set of crawler applications  Expressive filter language for complex web data</p>
    <p>Scalable  large filter sets (10s millions-billions)</p>
    <p>efficient filter execution  high document throughput (100k docs/s)</p>
    <p>commodity cluster architecture  Low Latency</p>
    <p>support real-time applications</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Search engine  Millions of humans</p>
    <p>constantly enter one query at a time  Queries are keywords  Query latency important  Return only the top-ranked</p>
    <p>subset of matches</p>
    <p>Process a stream of queries against a document index</p>
    <p>Extensible crawler  Hundreds of programs</p>
    <p>periodically enter millions of filters  Filters are conjuncts of</p>
    <p>expressions.  Doc latency important  Returns all matches</p>
    <p>Process a stream of documents against a filter index</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Implementation and Evaluation Conclusion</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Web</p>
    <p>Design Tradeoffs of Filter Language  Efficient Filter Evaluation</p>
    <p>Ex te</p>
    <p>ns ib</p>
    <p>le C</p>
    <p>ra w</p>
    <p>le r</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>Fi lte</p>
    <p>r Ev</p>
    <p>al ua</p>
    <p>tio n</p>
    <p>E ng</p>
    <p>in e</p>
    <p>As banks deal with fraud Democrats are embolden.. Air travelers stranded in ..</p>
    <p>Defense Secretary Robert .. write(unescape(%20%de..</p>
    <p>&lt;script language= Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy</p>
    <p>Filter Injection Interface</p>
    <p>raw docs matches</p>
  </div>
  <div class="page">
    <p>Web</p>
    <p>Design Tradeoffs of Filter Language  Efficient Filter Evaluation</p>
    <p>Ex te</p>
    <p>ns ib</p>
    <p>le C</p>
    <p>ra w</p>
    <p>le r</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>Fi lte</p>
    <p>r Ev</p>
    <p>al ua</p>
    <p>tio n</p>
    <p>E ng</p>
    <p>in e</p>
    <p>As banks deal with fraud Democrats are embolden.. Air travelers stranded in ..</p>
    <p>Defense Secretary Robert .. write(unescape(%20%de..</p>
    <p>&lt;script language= Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy</p>
    <p>Filter Injection Interface</p>
    <p>As banks deal with fraud Democrats are embolden.. Air travelers stranded in ..</p>
    <p>Defense Secretary Robert .. write(unescape(%20%de..</p>
    <p>&lt;script language= Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy</p>
    <p>As banks deal with fraud Democrats are embolden.. Air travelers stranded in ..</p>
    <p>Defense Secretary Robert .. write(unescape(%20%de..</p>
    <p>&lt;script language= Jonathan Hsieh Steve Gribble</p>
    <p>Hank Levy</p>
    <p>filter index</p>
    <p>raw docs matches</p>
  </div>
  <div class="page">
    <p>Web</p>
    <p>Design Tradeoffs of Filter Language  Efficient Filter Evaluation  Achieving Scale with Commodity Clusters</p>
    <p>Ex te</p>
    <p>ns ib</p>
    <p>le C</p>
    <p>ra w</p>
    <p>le r</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>Fi lte</p>
    <p>r Ev</p>
    <p>al ua</p>
    <p>tio n</p>
    <p>E ng</p>
    <p>in e</p>
    <p>Filter Injection Interface</p>
    <p>filter index</p>
    <p>filter index</p>
    <p>filter index</p>
    <p>filter index</p>
    <p>filter index raw docs</p>
    <p>matches</p>
  </div>
  <div class="page">
    <p>The filter language needs to be expressive  Support a wide variety of apps  Web data is complex, largely unstructured</p>
    <p>Examples:  substring(Jonathan Hsieh)  regex(Jonathan.{1,20}Hsieh)  substring(Jonathan) AND substring (Hsieh)</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Filter engine transforms and executes filters</p>
    <p>Efficient  indexing and evaluation</p>
    <p>Expressive  support complex data and</p>
    <p>diverse apps  Accurate</p>
    <p>we promise 100% recall  we permit false positives</p>
    <p>(less than 100% precision) to gain efficiency</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>efficient</p>
    <p>expressive accurate</p>
  </div>
  <div class="page">
    <p>One pass per document per filter  Work = # documents * # filters</p>
    <p>Not cost efficient</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>inject filters for D = next document</p>
    <p>for each F in set of filters if F accepts D</p>
    <p>forward to collector else</p>
    <p>drop</p>
  </div>
  <div class="page">
    <p>inject filters for D = next document</p>
    <p>for each F in set of filters if F accepts D</p>
    <p>forward to collector else</p>
    <p>drop</p>
    <p>Indexing filters.  Trade memory for CPU  Execute all filters simultaneously for less than linear cost.  Compile cost is amortized because filters change infrequently</p>
    <p>Single pass per document</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>index and inject filters for D = next document</p>
    <p>if filterIndex accepts D forward to collector</p>
    <p>else drop</p>
  </div>
  <div class="page">
    <p>Execution of many substrings  One pass per filter</p>
    <p>Execution of AhoCorasick DFA in one pass  One pass for all filters</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>As banks de Air travelers</p>
    <p>A s i r</p>
    <p>b</p>
    <p>compile into Aho Corasick DFA</p>
    <p>a</p>
    <p>t r</p>
    <p>n k a</p>
    <p>s v</p>
    <p>e l</p>
    <p>d e e</p>
  </div>
  <div class="page">
    <p>workers pod</p>
    <p>Web</p>
    <p>di sp</p>
    <p>at ch</p>
    <p>co lle</p>
    <p>ct</p>
    <p>Fk Fo</p>
    <p>crawler app</p>
    <p>crawler app</p>
    <p>crawler app</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>FfFj</p>
    <p>FpFt</p>
    <p>FuFz</p>
    <p>FaFe</p>
  </div>
  <div class="page">
    <p>workers pod</p>
    <p>Web</p>
    <p>di sp</p>
    <p>at ch</p>
    <p>co lle</p>
    <p>ct</p>
    <p>Fk Fo</p>
    <p>crawler app</p>
    <p>crawler app</p>
    <p>crawler app</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>FfFj</p>
    <p>FpFt</p>
    <p>FuFz</p>
    <p>FaFe</p>
  </div>
  <div class="page">
    <p>Web</p>
    <p>crawler app</p>
    <p>crawler app</p>
    <p>crawler app</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>di sp</p>
    <p>at ch</p>
    <p>co lle</p>
    <p>ct FaFm</p>
    <p>FnFq</p>
    <p>FrFz di</p>
    <p>sp at</p>
    <p>ch</p>
    <p>co lle</p>
    <p>ct FaFm</p>
    <p>FnFq</p>
    <p>FrFz</p>
    <p>di sp</p>
    <p>at ch</p>
    <p>co lle</p>
    <p>ct FaFm</p>
    <p>FnFq</p>
    <p>FrFz</p>
    <p>pod</p>
    <p>pod</p>
    <p>pod</p>
  </div>
  <div class="page">
    <p>Document partitioning  Every document must be evaluated by a pod  Pods are independent  Document workload is embarrassingly parallel</p>
    <p>Filter set partitioning  Every document must evaluated by every machine</p>
    <p>in a pod  Constrained by slowest node in a pod</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Motivation Architecture</p>
    <p>Conclusion</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Worker execution optimization  Relaxing and Staging filters</p>
    <p>Pod filter partitioning strategies  Random vs Sorted</p>
    <p>Prototype crawler applications</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
  </div>
  <div class="page">
    <p>universe of all possible documents</p>
    <p>relaxed matches</p>
    <p>Indexing is not always efficient  Relax filters to a less precise</p>
    <p>version  False positives now possible  Trade accuracy for reduced</p>
    <p>resource requirements exact</p>
    <p>matches</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>substring(General Motors said on Wednesday that it had a positive cash flow of $1 billion in the six months after emerging from bankruptcy protection)</p>
    <p>substring(General Motors said on Wednesday) that it had a positive cash flow of $1 billion in the six months after emerging from bankruptcy protection).</p>
  </div>
  <div class="page">
    <p>Relaxing introduces false positives  A relaxed filter may accept too many</p>
    <p>documents  Solution: Optional second phase</p>
    <p>called staging  If a relaxed filter matches in first</p>
    <p>stage, only execute its full filter in second stage</p>
    <p>Clean up false positives if cheap enough</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>relaxed matches</p>
    <p>exact matches</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>regex(&lt;script language=&quot;javascript&quot;&gt; eval (unescape(&quot;%66%75%6e%63%74%69%6f%6e%20%. {4}%28%.{4}%29%7b%76%61%72%20)</p>
    <p>Relaxing a malware regular expression</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%) AND substring(%28%) AND substring(%29%7b%76%61%72%20)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%) AND substring(%28%) AND substring(%29%7b%76%61%72%20)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term  Relax long substring into short substring</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term  Relax long substring into short substring</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term  Relax long substring into short substring  Select relaxations carefully!</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(&lt;script language=&quot;javascript&quot;&gt; eval(unescape(&quot;%66%75%6e%63%74%69%6f%6e %20%)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term  Relax long substring into short substring  Select relaxations carefully!</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>substring(75%6e%63%74%69%6f%6e%20%)</p>
    <p>Relaxing a malware regular expression  Relax regex into a conjunct of substrings  Relax conjunct into a single term  Relax long substring into short substring  Select relaxations carefully!</p>
  </div>
  <div class="page">
    <p>Nave filter execution is not cost effective  Index filters to use memory instead of CPU</p>
    <p>Each machines does more work</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p># no</p>
    <p>de s</p>
    <p>fo r</p>
    <p>do cs</p>
    <p>/s</p>
    <p># wikipedia filters</p>
    <p>nave</p>
    <p># no</p>
    <p>de s</p>
    <p>fo r</p>
    <p>do cs</p>
    <p>/s</p>
    <p># wikipedia filters</p>
    <p>nave index+opt</p>
  </div>
  <div class="page">
    <p>Indexing is very memory intensive.  Relax filters for less memory consumption</p>
    <p>Order of magnitude less memory used  Order of magnitude more filters on a worker</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>m em</p>
    <p>or y</p>
    <p>fo ot</p>
    <p>pr in</p>
    <p>t ( G</p>
    <p>B )</p>
    <p># wikipedia filters (millions)</p>
    <p>nave indexed</p>
    <p>m em</p>
    <p>or y</p>
    <p>fo ot</p>
    <p>pr in</p>
    <p>t ( G</p>
    <p>B )</p>
    <p># wikipedia filters (millions)</p>
    <p>nave indexed relaxed+indexed</p>
  </div>
  <div class="page">
    <p>Indexes for large filter sets are too big for a single machine  Partition filters and build</p>
    <p>indexes on subsets</p>
    <p>Different strategies affect pod performance  Random: cheap and quick  Sorted: sharing efficiences</p>
    <p>sorted partitioning (alpha)</p>
    <p>random partitioning</p>
    <p>As banks deal with fraud</p>
    <p>Democrats are embolden..</p>
    <p>Air travelers stranded in ..</p>
    <p>Defense Secretary Robert ..</p>
    <p>As banks deal with fraud</p>
    <p>Democrats are embolden..</p>
    <p>Air travelers stranded in ..</p>
    <p>Defense Secretary Robert ..</p>
  </div>
  <div class="page">
    <p>Random filter partitioning has low throughput variance  Sorted partitioning (alphabetizing) improves most nodes</p>
    <p>throughput, but has high variance.  Compensate for variance by blacklisting troublesome filters</p>
    <p>max random throughput</p>
    <p>max alpha throughput</p>
    <p>max alpha + blacklist</p>
    <p>throughput</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
    <p>no de</p>
    <p>th ro</p>
    <p>ug hp</p>
    <p>ut (d</p>
    <p>oc s/</p>
    <p>s)</p>
    <p>node #</p>
    <p>random 0</p>
    <p>no de</p>
    <p>th ro</p>
    <p>ug hp</p>
    <p>ut (d</p>
    <p>oc s/</p>
    <p>s)</p>
    <p>node #</p>
    <p>random alphabetic</p>
    <p>no de</p>
    <p>th ro</p>
    <p>ug hp</p>
    <p>ut (d</p>
    <p>oc s/</p>
    <p>s)</p>
    <p>random alphabetic alphabetic-BL</p>
    <p>Most machines not at capacity!</p>
  </div>
  <div class="page">
    <p>Copyright Violation/Plagiarism  Sentences from Wikipedia, AP, and Reuters articles</p>
    <p>Web Malware Detection  Regexes from ClamAV web malware signatures</p>
    <p>Vanity/Online Identity Service  Regexes generated from names in a university</p>
    <p>directory</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
  </div>
  <div class="page">
    <p>Applications tested against 3.68M web documents  Gathered by Nutch 0.9 crawler and seeded by DMOZ</p>
    <p>Hsieh, Gribble, Levy. NSDI'10</p>
    <p>Copyright Malware Identity</p>
    <p># filters 251,657 3,128 10,622 Relaxed-only Doc Hit Rate 0.664% 45.4% 69.0%</p>
    <p>Throughput (docs/s) 8,535 8,534 7,244</p>
    <p>Relax+staged Doc Hit Rate 0.016% 0.009% 13.1% Throughput (docs/s) 8,229 6,354 592 # machines for 100k docs/s 12.2 15.7 169</p>
  </div>
  <div class="page">
    <p>Motivation Architecture</p>
    <p>Implementation and Evaluation</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>We introduced the service, the architecture, and the implementation of the extensible crawler  Flexible filter language for efficiently filtering</p>
    <p>complex web data  Scalable and cost-efficient on commodity clusters</p>
    <p>architecture  Low latency to support real-time web</p>
    <p>applications</p>
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
  <div class="page">
    <p>Hsieh, Gribble, Levy. NSDI'10 4/29/2010</p>
  </div>
</Presentation>
