<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LAMINAR: PRACTICAL FINE-GRAINED DECENTRALIZED INFORMATION FLOW CONTROL (DIFC)</p>
    <p>Indrajit Roy, Donald E. Porter, Michael D. Bond,</p>
    <p>Kathryn S. McKinley, Emmett Witchel</p>
    <p>The University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>Untrusted code on trusted data  Your computer holds trusted and</p>
    <p>sensitive data  Credit card number, SSN, personal</p>
    <p>calendar  But not every program you run is trusted</p>
    <p>Bugs in code, malicious plugins</p>
    <p>Security breach !</p>
  </div>
  <div class="page">
    <p>Security model</p>
    <p>Decentralized Information Flow Control (DIFC) [Myers and Liskov 97]</p>
    <p>Associate labels with the data  System tracks the flow of data and the</p>
    <p>labels  Access and distribution of data depends</p>
    <p>on labels  Firefox may read the credit card number  But firefox may not send it to the outside</p>
    <p>world</p>
  </div>
  <div class="page">
    <p>Control thy data (and its fate)</p>
    <p>File Syste</p>
    <p>m</p>
    <p>Networ k</p>
  </div>
  <div class="page">
    <p>DIFC Implementation</p>
    <p>How do we rethink and rewrite code for security?  Hopefully not many changes</p>
    <p>Users create a lattice of labels  Associate labels with the data-structure</p>
    <p>Calendar datastructure</p>
    <p>User Mon. Tue. Wed.</p>
    <p>Alice Watc h</p>
    <p>game</p>
    <p>Office work</p>
    <p>Free</p>
    <p>Bob Free Meet docto</p>
    <p>r</p>
    <p>Free</p>
    <p>{Alice, Bob}</p>
    <p>{Alic e}</p>
    <p>{Bo b}{</p>
    <p>} Information flow in a</p>
    <p>lattice</p>
  </div>
  <div class="page">
    <p>Challenge: Programmability vs. security</p>
    <p>An ideal DIFC system  No code refactoring or changes to the data</p>
    <p>structures  Naturally interact with the file system and</p>
    <p>the network  Enforce fine-grained policies</p>
    <p>User Mon. Tue. Wed.</p>
    <p>Alice Watc h</p>
    <p>game</p>
    <p>Office work</p>
    <p>Free</p>
    <p>Bob Free Meet docto</p>
    <p>r</p>
    <p>Free</p>
    <p>Calendar datastructure</p>
    <p>{Alice, Bob}</p>
    <p>{Alic e}</p>
    <p>{Bo b}{</p>
    <p>} Information flow in a</p>
    <p>lattice</p>
  </div>
  <div class="page">
    <p>In this talk: Laminar</p>
    <p>A practical way to provide end-to-end security guarantees.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Comparison with current DIFC systems  Laminar: programming model</p>
    <p>Design: PL + OS techniques  Security regions</p>
    <p>Case studies and evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Current DIFC enabled systems</p>
  </div>
  <div class="page">
    <p>Advantages of Laminar</p>
    <p>PL Based</p>
    <p>OS based Laminar</p>
    <p>Fine grained</p>
    <p>Object level Address</p>
    <p>space or page level</p>
  </div>
  <div class="page">
    <p>Advantages of Laminar</p>
    <p>PL Based</p>
    <p>OS based Laminar</p>
    <p>Fine grained</p>
    <p>End-to-end guarantee</p>
    <p>Information leaks possible through files and sockets</p>
  </div>
  <div class="page">
    <p>Advantages of Laminar</p>
    <p>PL Based</p>
    <p>OS based Laminar</p>
    <p>Fine grained</p>
    <p>End-to-end guarantee</p>
    <p>Incrementally deployable</p>
    <p>New language or type system</p>
    <p>Code refactoring</p>
  </div>
  <div class="page">
    <p>Advantages of Laminar</p>
    <p>PL Based</p>
    <p>OS based Laminar</p>
    <p>Fine grained</p>
    <p>End-to-end guarantee</p>
    <p>Incrementally deployable</p>
    <p>Advanced language features * *Dynamic class loading, reflection, multithreading</p>
  </div>
  <div class="page">
    <p>Advantages of Laminar</p>
    <p>PL Based</p>
    <p>OS based Laminar</p>
    <p>Fine grained</p>
    <p>End-to-end guarantee</p>
    <p>Incrementally deployable</p>
    <p>Advanced language features Dynamic</p>
    <p>analysis Security regions (new PL</p>
    <p>construct)</p>
    <p>JVM+OS integration</p>
    <p>JVM tracks labels</p>
    <p>of objects</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Comparison with current DIFC systems  Laminar: programming model</p>
    <p>Design: PL + OS techniques  Security regions</p>
    <p>Case studies and evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Programming model</p>
    <p>No modifications to code that does not access the calendar  No need to trust such code!</p>
    <p>Security regions  Wraps the code that accesses the calendar  Again, no need to trust the code!</p>
    <p>Unless it modifies the labels of the data structure</p>
    <p>User Monda y</p>
    <p>Tuesda y</p>
    <p>Alice Watch game</p>
    <p>Office work</p>
    <p>Bob Free Meet doctor</p>
    <p>Less work by the programmer. Laminar</p>
    <p>enforces user security policy.</p>
  </div>
  <div class="page">
    <p>Trust assumptions</p>
    <p>Laminar JVM and Laminar OS should perform the correct DIFC checks</p>
    <p>Programmers should correctly specify the security policies using labels</p>
    <p>Limitation  covert channels  Timing channels  Termination channels  Probabilistic channels</p>
  </div>
  <div class="page">
    <p>Laminar design</p>
    <p>JVM</p>
    <p>OS Reference monitor</p>
    <p>Dynamic analysis</p>
    <p>APP Security regions</p>
  </div>
  <div class="page">
    <p>Laminar design: security regions</p>
    <p>Programming language construct</p>
    <p>Security sensitive data accessed only inside a security region</p>
    <p>Lowers overhead of DIFC checks</p>
    <p>Helps incremental deployment</p>
    <p>JVM</p>
    <p>OS Reference monitor</p>
    <p>Dynamic analysis</p>
    <p>APP Security regions</p>
  </div>
  <div class="page">
    <p>Laminar design: JVM</p>
    <p>Dynamic security checks</p>
    <p>on app. data</p>
    <p>Fine-grained enforcement</p>
    <p>Less code refactoring</p>
    <p>JVM</p>
    <p>OS Reference monitor</p>
    <p>Dynamic analysis</p>
    <p>APP Security regions</p>
    <p>Encapsulate access to secure</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>Laminar design : OS</p>
    <p>Security checks on</p>
    <p>files/sockets</p>
    <p>Prevents security violation on system</p>
    <p>resources</p>
    <p>JVM</p>
    <p>OS Reference monitor</p>
    <p>Dynamic analysis</p>
    <p>APP Security regions</p>
    <p>Fine-grained enforcement</p>
    <p>Encapsulate access to secure</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>Laminar design : JVM+OS</p>
    <p>Comprehensive security</p>
    <p>guarantee</p>
    <p>JVM</p>
    <p>OS Reference monitor</p>
    <p>Dynamic analysis</p>
    <p>APP Security regions</p>
    <p>Integration of VM+OS</p>
    <p>mechanisms</p>
    <p>Fine-grained enforcement</p>
    <p>Encapsulate access to secure</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Comparison with current DIFC systems  Laminar: programming model</p>
    <p>Design: PL + OS techniques  Security regions</p>
    <p>Case studies and evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Example: calendar</p>
    <p>Pseudo code to find a common meeting time for Alice and Bob</p>
    <p>Calendar cal; // has label {Alice, Bob}</p>
    <p>secure(new Label(Alice, Bob)){ Calendar a = readFile(alice.cal); Calendar b = readFile(bob.cal); cal.addDates(a, b); Date d = cal.findMeeting();  } catch(..){}</p>
    <p>This code has been simplified to help explanation. Refer to the paper for exact syntax.</p>
    <p>Labeled Data</p>
    <p>Read data of Alice and Bob.</p>
    <p>Access checks by OS</p>
    <p>Can read data of Alice and Bob.</p>
    <p>Add to common calendar</p>
    <p>Calen dar</p>
    <p>Monda y</p>
    <p>Tuesd ay</p>
    <p>Alice Watch game</p>
    <p>Office work</p>
    <p>Bob Free Meet doctor</p>
    <p>bob.ca l</p>
    <p>Find common meeting time</p>
    <p>alice.c al</p>
  </div>
  <div class="page">
    <p>Security regions for programming ease</p>
    <p>Easier to add security policies  Wrap code that touches</p>
    <p>sensitive data inside security region</p>
    <p>Hypothesis: only small portions of code and data are security sensitive</p>
    <p>Simplifies auditing</p>
    <p>APP Security region</p>
    <p>Untrusted Code</p>
    <p>Untrusted Code</p>
  </div>
  <div class="page">
    <p>Threads and security regions</p>
    <p>APP Security region</p>
    <p>Untrusted Code</p>
    <p>Untrusted Code</p>
    <p>THREADS</p>
    <p>Threads execute the application code</p>
    <p>On entering, threads get the labels and privileges of the security region</p>
  </div>
  <div class="page">
    <p>Supporting security regions: JVM+OS</p>
    <p>Calendar cal; // has label {Alice, Bob}</p>
    <p>secure(new Label(Alice, Bob)){ Calendar a = readFile(alice.cal); Calendar b = readFile(bob.cal); cal.addDates(a, b); Date d = cal.findMeeting();  } catch(..){}</p>
    <p>OS Referen</p>
    <p>ce monitor</p>
    <p>JVM Dynami</p>
    <p>c analysis</p>
    <p>APP Securi</p>
    <p>ty region</p>
    <p>{Alice, Bob}</p>
    <p>{Alic e}</p>
    <p>{Bo b}{</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Labeling application data</p>
    <p>JVM allocates labeled objects from a separate heap space  Efficient checks on whether an object is labeled  Object header points to secrecy and integrity</p>
    <p>labels  Locals and statics are not labeled</p>
    <p>Restricted use inside and outside security regions  Prevents illegal information flow</p>
    <p>We are extending our implementation to support labeled statics</p>
  </div>
  <div class="page">
    <p>Security regions for efficiency</p>
    <p>Limits the amount of work done by the VM to enforce DIFC</p>
    <p>Prevent access to labeled objects outside security regions</p>
    <p>Use read/write barriers</p>
    <p>Perform efficient address range checks on objects</p>
    <p>APP Security region</p>
    <p>Untrusted Code</p>
    <p>Untrusted Code</p>
    <p>THRE AD</p>
  </div>
  <div class="page">
    <p>Checks outside a security region</p>
    <p>APP Security region</p>
    <p>Untrusted Code</p>
    <p>Untrusted Code</p>
    <p>THRE AD</p>
    <p>Label credentials = new Label (Alice, Bob); Calendar cal; // has label {Alice, Bob}</p>
    <p>secure(credentials){  cal.addDates(a, b); Date d = cal.findMeeting();  } catch(..){}</p>
    <p>Date d= cal.getMeetTime();</p>
    <p>Labeled object read outside the security</p>
    <p>region</p>
  </div>
  <div class="page">
    <p>Checks inside a security region</p>
    <p>Mandatory DIFC checks inside security regions</p>
    <p>Secrecy rule  Cannot read more secret  Cannot write to less secret</p>
    <p>Integrity rule  Cannot read less trusted  Cannot write to more trusted</p>
    <p>APP Security region</p>
    <p>Untrusted Code</p>
    <p>Untrusted Code</p>
    <p>THRE AD</p>
  </div>
  <div class="page">
    <p>Checks inside a security region</p>
    <p>Label credentials = new Label (Alice, Bob); Calendar mainCal; // has label {Alice, Bob} Calendar aliceCal; //has label {Alice}</p>
    <p>secure(credentials){  mainCal.event = aliceCal.date;</p>
    <p>} catch(..){}</p>
    <p>Information flow</p>
    <p>Thread in security region</p>
    <p>aliceCal.dat e</p>
    <p>{Alice, Bob}</p>
    <p>{Alic e}</p>
    <p>{Bo b}{</p>
    <p>} Information flow in a</p>
    <p>lattice</p>
    <p>mainCal.ev ent</p>
    <p>REA D</p>
    <p>WRI TE</p>
  </div>
  <div class="page">
    <p>Checks inside a security region</p>
    <p>Label credentials = new Label (Alice, Bob); Calendar mainCal; // has label {Alice, Bob} Calendar aliceCal; //has label {Alice}</p>
    <p>secure(credentials){  aliceCal.date = mainCal.event ;</p>
    <p>} catch(..){}</p>
    <p>Information flow</p>
    <p>Thread in security region</p>
    <p>mainCal.ev ent</p>
    <p>{Alice, Bob}</p>
    <p>{Alic e}</p>
    <p>{Bo b}{</p>
    <p>} Information flow in a</p>
    <p>lattice</p>
    <p>aliceCal.dat e</p>
    <p>REA D</p>
    <p>WRI TE</p>
  </div>
  <div class="page">
    <p>Nested security regions</p>
    <p>Laminar allows nesting of security regions</p>
    <p>For nesting, the parent security region should have the correct privileges to initialize the child security region  Natural hierarchical semantics</p>
    <p>More details are present in the paper</p>
  </div>
  <div class="page">
    <p>Supporting security regions: OS</p>
    <p>OS acts as a repository for labels  New labels can be allocated using a</p>
    <p>system call</p>
    <p>Labels stored in security fields of the kernel objects</p>
    <p>Before each resource access, the reference monitor performs DIFC checks  E.g. inode permission checks, file access</p>
    <p>checks</p>
    <p>OS Referen</p>
    <p>ce monitor</p>
    <p>JVM Dynami</p>
    <p>c analysis</p>
    <p>APP Securi</p>
    <p>ty region</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Comparison with current DIFC systems  Laminar: programming model</p>
    <p>Design: PL + OS techniques  Security regions</p>
    <p>Case studies and evaluation  Summary</p>
  </div>
  <div class="page">
    <p>Evaluation hypothesis</p>
    <p>Laminar requires modest code changes to retrofit security to applications  Less burden on the programmer</p>
    <p>Laminar incurs modest overheads  Practical and efficient</p>
  </div>
  <div class="page">
    <p>Laminar requires modest changes</p>
    <p>Applicatio n</p>
    <p>LOC Protected Data</p>
    <p>LOC Added</p>
    <p>GradeSheet 900 Student grades</p>
    <p>Battleship 1,700 Ship locations</p>
    <p>Calendar 6,200 Schedules 290 (5%)</p>
    <p>FreeCS (Chat</p>
    <p>server)</p>
    <p>properties</p>
    <p>10% changes</p>
  </div>
  <div class="page">
    <p>Laminar has modest overheads  Compared against unmodified applications</p>
    <p>running on unmodified JVM and OS  Overheads range from 1% to 54%  IO disabled to prevent masking effect</p>
    <p>Lower overheads expected in real deployment</p>
    <p>All experiments on Quad-code Intel Xeon 2.83 GHz</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>IFC and lattice model  Lattice Model[Denning76], Biba77, Bell-LaPadula73</p>
    <p>Language level DIFC  Jif[Myers97], FlowCaml[Simonet03],</p>
    <p>Swift[Chong07]</p>
    <p>OS based DIFC  Asbestos[Efstathopoulos05], HiStar[Zeldovich06],</p>
    <p>Flume[Krohn07], DStar[Zeldovich08]</p>
  </div>
  <div class="page">
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>BACKUP SLIDES !</p>
    <p>The University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>Implicit information flow</p>
    <p>// H has label {secret} // L has label {} L.val = false;</p>
    <p>if(H.val) L.val = true;</p>
    <p>L is assigned true</p>
    <p>H is secret</p>
    <p>Value of L</p>
    <p>reveals H</p>
    <p>L remains false</p>
    <p>H.val =true</p>
    <p>N O</p>
    <p>YE S</p>
  </div>
  <div class="page">
    <p>Handling implicit information flows</p>
    <p>// H has label {secret} // L has label {} L.val = false; secure(credentials){ if(H.val) L.val = true; } catch() { }</p>
    <p>Mandatory catch block. Executes with same</p>
    <p>labels as the security region</p>
    <p>H.val =true</p>
    <p>L.val not assigned</p>
    <p>VM raises</p>
    <p>exception</p>
    <p>L.val not assigned</p>
    <p>N O</p>
    <p>YES</p>
    <p>L.val always false !</p>
    <p>No implicit flow</p>
    <p>Exception not</p>
    <p>revealed</p>
  </div>
</Presentation>
