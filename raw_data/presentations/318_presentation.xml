<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Emmanuel Cecchet, Veena Udayabhanu, Timothy Wood, Prashant Shenoy</p>
    <p>University of Massachusetts Amherst</p>
    <p>BenchLab An Open Testbed for Realistic Benchmarking of Web Applications</p>
    <p>http://lass.cs.umass.edu/projects/benchlab/</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>WEBAPPS YESTERDAY AND TODAY</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>TPC-W BENCHMARK</p>
    <p>Online bookstore emulating amazon.com!  Reference benchmark still in use today in the Systems</p>
    <p>community</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>TYPICAL E-COMMERCE BENCHMARK AVAILABLE TO THE RESEARCH COMMUNITY</p>
    <p>Setup for performance benchmarking  Browser emulator  Static load distribution</p>
    <p>Missing features  Content: Javascript, AJAX, cookies,   Network: HTTP 1.1 request pipelining, caching, SSL  Latencies: WAN, rendering time</p>
    <p>Emulated clients DatabaseApp. Servers</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>BENCHMARK DESIGN</p>
    <p>Workload definition Application under TestWeb Emulator</p>
    <p>HTTP trace Application under TestReal Web Browsers</p>
    <p>+</p>
    <p>http://... http://... http://... http://... http://... http://...</p>
    <p>http://... http://... http://... http://... http://... http://...</p>
    <p>BenchLab approach</p>
    <p>Traditional approach (TPC-W, RUBiS)</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>OUTLINE</p>
    <p>What has changed in WebApps Benchmarking real applications with</p>
    <p>BenchLab Experimental results</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>WEB APPLICATIONS HAVE CHANGED</p>
    <p>Web 2.0 applications o Rich client interactions (AJAX, JS) o Multimedia content o Replication, caching o Large databases (few GB to multiple TB)  Complex Web interactions o HTTP 1.1, CSS, images, flash, HTML 5 o WAN latencies, caching, Content Delivery</p>
    <p>Networks</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>EVOLUTION OF WEB APPLICATIONS</p>
    <p>Applications HTML CSS JS Multimedia Total</p>
    <p>RUBiS 1 0 0 1 2 eBay.com 1 3 3 31 38</p>
    <p>TPC-W 1 0 0 5 6 amazon.com 6 13 33 91 141 CloudStone 1 2 4 21 28</p>
    <p>facebook.com 6 13 22 135 176 wikibooks.org 1 19 23 35 78 wikipedia.org 1 5 10 20 36</p>
    <p>Number of interactions to fetch the home page of various web sites and benchmarks</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>HTTP VS BROWSER REPLAY</p>
    <p>Browsers are smart  Caching, prefetching, parallelism  Javascript can trigger additional requests</p>
    <p>HTTP replay cannot approximate real Web browser access to resources</p>
    <p>GET /wiki/page</p>
    <p>Analyze page</p>
    <p>generate page</p>
    <p>GET combined.min.css GET jquery-ui.css GET main-ltr.css GET commonPrint.css GET shared.css GET flaggedrevs.css GET Common.css GET wikibits.js GET jquery.min.js GET ajax.js GET mwsuggest.js GET plugins...js GET Print.css GET Vector.css GET raw&amp;gen=css GET ClickTracking.js GET Vector...js GET js&amp;useskin GET WikiTable.css GET CommonsTicker.css GET flaggedrevs.js GET Infobox.css GET Messagebox.css GET Hoverbox.css GET Autocount.css GET toc.css GET Multilingual.css GET mediawiki_88x31.png</p>
    <p>Rendering + JavaScript</p>
    <p>GET ExtraTools.js GET Navigation.js GET NavigationTabs.js GET Displaytitle.js GET RandomBook.js GET Edittools.js GET EditToolbar.js GET BookSearch.js GET MediaWikiCommon.css</p>
    <p>send files</p>
    <p>GET page-base.png GET page-fade.png GET border.png GET 1.png GET external-link.png GET bullet-icon.png GET user-icon.png GET tab-break.png GET tab-current.png GET tab-normal-fade.png GET search-fade.png GET search-ltr.png GET wiki.png GET portal-break.png</p>
    <p>Rendering0.28s GET arrow-down.png GET portal-break.png GET arrow-right.png</p>
    <p>send files</p>
    <p>send files</p>
    <p>send files</p>
    <p>Rendering + JavaScript</p>
    <p>Replay</p>
    <p>Total network time</p>
    <p>GET home page and receive HTML (0.25s)  Parse HTML (0.06s)</p>
    <p>GET CSS and Javascript on 6 connections in parallel (Firefox)</p>
    <p>Starts rendering and execute Javascript  GET additional Javascript imports  Complete Javascript and continue rendering</p>
    <p>Download images  More rendering</p>
    <p>Download final images</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>TYPING SPEED MATTERS</p>
    <p>Auto-completion in search fields is common  Each keystroke can generate a query  Text searches use a lot of resources</p>
    <p>GET /api.php?action=opensearch&amp;search=W GET /api.php?action=opensearch&amp;search=Web GET /api.php?action=opensearch&amp;search=Web+ GET /api.php?action=opensearch&amp;search=Web+2 GET /api.php?action=opensearch&amp;search=Web+2. GET /api.php?action=opensearch&amp;search=Web+2.0</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>STATE SIZE MATTERS</p>
    <p>Does the entire DB of Amazon or eBay fit in the memory of a cell phone?  TPC-W DB size: 684MB  RUBiS DB size: 1022MB</p>
    <p>Impact of CloudStone database size on performance</p>
    <p>Dataset size</p>
    <p>State size (in GB)</p>
    <p>Database rows</p>
    <p>Avg cpu load with 25 users</p>
    <p>CloudStone Web application server load observed for various dataset sizes using a workload trace of 25 users replayed with Apache HttpClient 3.</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>OUTLINE</p>
    <p>What has changed in WebApps Benchmarking real applications</p>
    <p>with BenchLab Experimental results</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>BENCHLAB</p>
    <p>Capture application workloads  Replay captured traces in real Web browsers  Store detailed performance results</p>
    <p>Benchmark repository  Store virtual machines of applications under test  Store test traces, configurations and results  Repeat experiments  Compare results</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>3 options to record traces in HTTP Archive (HAR) format  directly in Web browser  at HA proxy load balancer level  using Apache httpd logs</p>
    <p>Internet Frontend/ Load balancer</p>
    <p>Databases</p>
    <p>App. Servers</p>
    <p>RECORDING HTTP TRACES</p>
    <p>HA Proxy recorder</p>
    <p>httpd recorder</p>
    <p>Recording in the Web browser</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>BENCHLAB WEBAPP</p>
    <p>Upload traces / VMs Define and run</p>
    <p>experiments Compare results Distribute</p>
    <p>benchmarks, traces, configs and results</p>
    <p>http://... http://... http://... http://... http://... http://...</p>
    <p>http://... http://... http://... http://... http://... http://...</p>
    <p>Web Frontend</p>
    <p>Experiment scheduler</p>
    <p>Traces (HAR or access_log) Results (HAR or latency)</p>
    <p>Experiment Config Benchmark VMs</p>
    <p>Traces (HAR or access_log) Results (HAR or latency)</p>
    <p>Experiment Config Benchmark VMs</p>
    <p>E xp</p>
    <p>er im</p>
    <p>en t</p>
    <p>st ar</p>
    <p>t/s to</p>
    <p>p</p>
    <p>T ra</p>
    <p>ce d</p>
    <p>ow nl</p>
    <p>oa d</p>
    <p>B ro</p>
    <p>w se</p>
    <p>r re</p>
    <p>gi st</p>
    <p>ra tio</p>
    <p>n</p>
    <p>R es</p>
    <p>ul ts</p>
    <p>u pl</p>
    <p>oa d</p>
    <p>JEE WebApp with embedded database  Repository of benchmarks and traces  Schedule and control experiment execution  Results repository  Can be used to distribute / reproduce</p>
    <p>experiments and compare results</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>BENCHLAB CLIENT RUNTIME (BCR)  Replay traces in real Web browsers  Small Java runtime based on Selenium/WebDriver  Collect detailed response times in HAR format  Can record HTML and page snapshots  Upload results to BenchLab WebApp when done</p>
    <p>BCRBCR</p>
    <p>HAR resultsWeb page browsing and rendering</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>WIKIMEDIA FOUNDATION WIKIS</p>
    <p>Wikimedia Wiki open source software stack  Lots of extensions  Very complex to setup/install  Real database dumps (up to 6TB)</p>
    <p>3 months to create a dump  3 years to restore with default tools</p>
    <p>Multimedia content  Images, audio, video  Generators (dynamic or static) to avoid copyright issues  Real Web traces from Wikimedia  Packaged as Virtual Appliances</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>Web Frontend</p>
    <p>Experiment scheduler</p>
    <p>Traces (HAR or access_log) Results (HAR or latency)</p>
    <p>Experiment Config Benchmark VMs</p>
    <p>Traces (HAR or access_log) Results (HAR or latency)</p>
    <p>Experiment Config Benchmark VMs</p>
    <p>E xp</p>
    <p>er im</p>
    <p>en t</p>
    <p>st ar</p>
    <p>t/s to</p>
    <p>p</p>
    <p>T ra</p>
    <p>ce d</p>
    <p>ow nl</p>
    <p>oa d</p>
    <p>B ro</p>
    <p>w se</p>
    <p>r re</p>
    <p>gi st</p>
    <p>ra tio</p>
    <p>n</p>
    <p>R es</p>
    <p>ul ts</p>
    <p>u pl</p>
    <p>oa d</p>
    <p>RUNNING AN EXPERIMENT WITH BENCHLAB</p>
    <p>Use your own deployment framework and monitoring  Real browser replay</p>
    <p>Full rendering with AJAX, JS, multimedia  Emulate human typing speed while filling form, click buttons</p>
    <p>Analyze, compare &amp; share results</p>
    <p>Detailed Network and Browser timings</p>
    <p>Play trace</p>
    <p>Upload results</p>
    <p>View results</p>
    <p>Repeat experiment  Export setup/traces/</p>
    <p>VMs/results</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>OUTLINE</p>
    <p>What has changed in WebApps Benchmarking real applications with</p>
    <p>BenchLab Experimental results</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>EMULATED VS REAL BROWSER  CPU and IO usage varies greatly on server for same workload  CloudStone with 25 users workload from Amazon EC2 East</p>
    <p>Coast to Umass Amherst  Avg CPU emulated: 63.2%  Avg CPU real browser: 77.7%</p>
    <p>Resource access pattern affects file caching on server</p>
    <p>Emulated browser Real browser</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>JAVASCRIPT EFFECTS ON WORKLOAD  Server side resource usage varies greatly  Additional queries during form processing</p>
    <p>Good Input</p>
    <p>Bad Input</p>
    <p>Real BrowserEmulated Browser</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>LAN VS WAN LOAD INJECTION  Deployed BCR instances in Amazon EC2 data centers</p>
    <p>As little as $0.59/hour for 25 instances for Linux  Windows from $0.84 to $3/hour</p>
    <p>CPU usage varies greatly on server for same workload (LAN 38.3% vs WAN 54.4%)</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>CONCLUSION</p>
    <p>Web Applications have changed  Real browsers needed for modern WebApp</p>
    <p>benchmarking  BenchLab provides</p>
    <p>Infrastructure for Internet scale Benchmarking of real applications</p>
    <p>Virtual Appliances of real applications  Repository of traces, benchmarks and results</p>
    <p>A lot to explore</p>
  </div>
  <div class="page">
    <p>B en</p>
    <p>b</p>
    <p>ce cc</p>
    <p>he t@</p>
    <p>cs .u</p>
    <p>m as</p>
    <p>s. ed</p>
    <p>u</p>
    <p>Q&amp;A</p>
    <p>http://lass.cs.umass.edu/projects/benchlab/</p>
    <p>COME AND SEE OUR POSTER AND DEMO</p>
  </div>
</Presentation>
