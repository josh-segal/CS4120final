<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ariel Rabkin Princeton University</p>
    <p>asrabkin@cs.princeton.edu</p>
    <p>Aggregation and Degradation in JetStream: Streaming Analytics in the Wide Area</p>
    <p>Work done with Matvey Arye, Siddhartha Sen, Vivek S. Pai, and Michael J. Freedman</p>
  </div>
  <div class="page">
    <p>Todays Analytics Architectures</p>
    <p>Backhaul is inefficient and inflexible</p>
    <p>MillWheel (Google) Storm</p>
  </div>
  <div class="page">
    <p>Tomorrows Architecture: JetStream</p>
    <p>Backhaul is inefficient and inflexible  Goal: optimize use of WAN links by</p>
    <p>exposing them to streaming system.</p>
    <p>JetStream</p>
  </div>
  <div class="page">
    <p>Backhaul is Intrinsically Inefficient</p>
    <p>Time [two days]</p>
    <p>B an</p>
    <p>dw id</p>
    <p>th</p>
    <p>Available</p>
    <p>Buyers remorse: wasted bandwidth</p>
    <p>Analysts remorse: system overload or missing data</p>
    <p>Needed for backhaul</p>
  </div>
  <div class="page">
    <p>Stream Processing Basics</p>
    <p>Filtering (count &gt; 100) Sampling (drop 90% of data) Image Compression</p>
    <p>Quantiles (95th percentile) Query stored data</p>
    <p>Site A</p>
    <p>Some Operators in JetStream:</p>
    <p>Stream Operators</p>
    <p>In pu</p>
    <p>t D at</p>
    <p>a</p>
    <p>Stream Operators</p>
    <p>In pu</p>
    <p>t D at</p>
    <p>a</p>
    <p>Stream Operators</p>
    <p>Stream Operators</p>
    <p>Site B</p>
    <p>Stream Operator</p>
    <p>Site C</p>
  </div>
  <div class="page">
    <p>The JetStream System</p>
    <p>What: Streaming with aggregation and degradation as first-class primitives</p>
    <p>Where: Storage and processing at edge</p>
    <p>Why: Maximize goodput using aggregation and degradation</p>
    <p>How: Data cubes and feedback control</p>
  </div>
  <div class="page">
    <p>An Example Query</p>
    <p>How popular is every URL?</p>
    <p>Requests Requests CDN</p>
    <p>Requests</p>
    <p>Requests Requests CDN</p>
    <p>Requests</p>
  </div>
  <div class="page">
    <p>Mechanism 1: Storage with Aggregation</p>
    <p>Requests Requests CDN</p>
    <p>Requests</p>
    <p>Requests Requests CDN</p>
    <p>Requests Every minute, compute request counts by URL</p>
    <p>Local Aggregation and Storage</p>
    <p>Local Aggregation and Storage</p>
  </div>
  <div class="page">
    <p>Mechanism 2: Adaptive Degradation</p>
    <p>Requests Requests CDN</p>
    <p>Requests</p>
    <p>Requests Requests CDN</p>
    <p>Requests Every minute, compute request counts by URL</p>
    <p>Local Aggregation and Storage</p>
    <p>Local Aggregation and Storage</p>
    <p>Adjustable Filtering</p>
    <p>Adjustable Filtering</p>
  </div>
  <div class="page">
    <p>Requirements for Storage Abstraction</p>
    <p>Update-able (locally and incrementally)</p>
    <p>Data Data Merged Representation + =</p>
    <p>Data Data</p>
    <p>Merge-able (without accuracy penalty)</p>
    <p>Data size is reducible (with predictable accuracy cost)</p>
    <p>Stored Data += Data</p>
  </div>
  <div class="page">
    <p>The Data Cube Model</p>
    <p>Aggregation used for:  Updates  Roll-ups  Merging cubes  Summarizing cubes</p>
    <p>Counts by URL 12:00 12:01 12:02</p>
    <p>www.mysite.com/a 3 5 0</p>
    <p>www.mysite.com/b 0 2 0</p>
    <p>www.yoursite.com 5 4</p>
    <p>www.her-site.com 8 12</p>
    <p>Cube: A multidimensional array, indexed by a set of dimensions, whose cells hold aggregates.</p>
    <p>Cubes have aggregation function: Agg( , )</p>
  </div>
  <div class="page">
    <p>Cubes can be Rolled Up</p>
    <p>Counts by URL 12:00 12:01 12:02</p>
    <p>www.mysite.com/a 3 5 0</p>
    <p>www.mysite.com/b 0 2 0</p>
    <p>www.yoursite.com 5 4</p>
    <p>www.her-site.com 8 12</p>
    <p>Cube: A multidimensional array, indexed by a set of dimensions, whose cells hold aggregates.</p>
    <p>Counts by URL *</p>
    <p>www.mysite.com/a 8</p>
    <p>www.mysite.com/b 2</p>
    <p>www.yoursite.com 9</p>
    <p>www.her-site.com 20</p>
    <p>Counts by URL 12:00 12:01 12:02 * 16 23</p>
  </div>
  <div class="page">
    <p>Cubes Unify Storage and Aggregation</p>
    <p>Stored Data Update</p>
    <p>Update</p>
    <p>Update</p>
    <p>Update sent downstream</p>
    <p>Standing Query</p>
    <p>One-off query</p>
  </div>
  <div class="page">
    <p>Feedback control</p>
    <p>Degradation: The Big Picture</p>
    <p>Local Data Dataflow</p>
    <p>Operators Summarized or Approximated</p>
    <p>Data</p>
    <p>Level of degradation auto-tuned to match bandwidth.  Challenge: Supporting mergeability and flexible policies</p>
    <p>Network Dataflow Operators</p>
  </div>
  <div class="page">
    <p>Mergeability Imposes Constraints</p>
    <p>Insight: Degradation may be discontinuous</p>
    <p>??????</p>
  </div>
  <div class="page">
    <p>There Are Many Ways to Degrade Data</p>
    <p>Can coarsen a dimension</p>
    <p>Can drop low-rank values</p>
  </div>
  <div class="page">
    <p>S av</p>
    <p>in gs</p>
    <p>fr om</p>
    <p>A gg</p>
    <p>re ga</p>
    <p>tio n</p>
    <p>Domains</p>
    <p>Coarsening Does Not Always Help</p>
    <p>S av</p>
    <p>in gs</p>
    <p>fr om</p>
    <p>A gg</p>
    <p>re ga</p>
    <p>tio n</p>
    <p>Domains URLs</p>
  </div>
  <div class="page">
    <p>Degradations Have Trade-offs</p>
    <p>Name Fixed BW Savings</p>
    <p>Fixed Accuracy cost</p>
    <p>Parameter</p>
    <p>Dim. Coarsening Usually no Yes Dimension Scale</p>
    <p>Drop values (locally)</p>
    <p>Yes No Cut-off</p>
    <p>Drop values (globally)</p>
    <p>No, multi-round protocol</p>
    <p>Yes Cut-off</p>
    <p>Audiovisual downsampling</p>
    <p>Yes Yes Sample rate</p>
    <p>Histogram Coarsening</p>
    <p>Yes</p>
    <p>Yes</p>
    <p>Number of Buckets</p>
  </div>
  <div class="page">
    <p>A Simple Idea that Does Not Work</p>
    <p>We have sensors that report congestion.  Have operators read sensor and adjust themselves?</p>
    <p>Coarsening Operator</p>
    <p>Incoming data Network</p>
    <p>Sampled Data</p>
    <p>Sending 4x too much</p>
  </div>
  <div class="page">
    <p>A Simple Idea that Does Not Work</p>
    <p>We have sensors that report congestion.  Have operators read sensor and adjust themselves?</p>
    <p>Coarsening Operator</p>
    <p>Incoming data Network</p>
    <p>Sampled Data</p>
    <p>Sending 4x too much</p>
    <p>Increase aggregation period up to 10 sec. If</p>
    <p>insufficient, use sampling</p>
  </div>
  <div class="page">
    <p>Challenge: Composite Policies</p>
    <p>Chaos if two operators are simultaneously responding to the same sensor</p>
    <p>Coarsening Operator</p>
    <p>Incoming data Network</p>
    <p>Sampling Operator</p>
    <p>Sending 4x too much</p>
  </div>
  <div class="page">
    <p>Interfacing with Operators</p>
    <p>Shrinking data by 50% Possible levels:</p>
    <p>[0%, 50%, 75%, 95%, ]</p>
    <p>Go to level 75%</p>
    <p>Coarsening Operator</p>
    <p>Incoming data Network</p>
    <p>Sampling Operator</p>
    <p>Controller</p>
    <p>Sending 4x too much</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Policy: Drop data if insufficient BW</p>
    <p>Princeton</p>
  </div>
  <div class="page">
    <p>W (M</p>
    <p>bi ts</p>
    <p>/s ec</p>
    <p>) Without Degradation</p>
    <p>Drop BW</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>)</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>)</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>)</p>
    <p>Median Latency</p>
    <p>Maximum latency</p>
  </div>
  <div class="page">
    <p>W (M</p>
    <p>bi ts</p>
    <p>/s ec</p>
    <p>) Degradation Keeps Latency Bounded</p>
    <p>Bandwidth Shaping</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>)</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>)</p>
    <p>Median Latency</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>) Showing maximum latencies</p>
    <p>Median Latency</p>
    <p>Maximum Latency</p>
  </div>
  <div class="page">
    <p>Programming Ease</p>
    <p>Scenario Lines of code Slow requests 5 Requests by URL 5</p>
    <p>Bandwidth by node 15 Bad referrers 16 Latency and size quantiles 25 Success by domain 30 Top 10 domains by period 40</p>
    <p>Big Requests 97</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Work</p>
    <p>Useful to embed aggregation and degradation abstractions in streaming systems.</p>
    <p>Aggregation can be unified with storage.</p>
    <p>System must accommodate degradation semantics.</p>
    <p>Open questions:  How to guide users to the right degradation policy?  How to embed abstractions in higher-level language?</p>
  </div>
</Presentation>
