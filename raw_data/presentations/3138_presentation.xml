<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Eradicating DNS Rebinding with the Extended Same-Origin Policy</p>
    <p>Martin Johns, Sebastian Lekies and Ben Stock USENIX Security August 16th, 2013</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>DNS Rebinding  The basic attack</p>
    <p>History repeating</p>
    <p>HTML5 Offline Application Cache Attack  Extending the Same-Origin Policy</p>
    <p>The three principals of Web Interaction</p>
    <p>Extending the SOP with server-provided information</p>
    <p>Conclusion &amp; Future Work</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 2</p>
  </div>
  <div class="page">
    <p>Technical Background</p>
  </div>
  <div class="page">
    <p>Web Application 101</p>
    <p>Active Content enables Web Apps to  interact with the Document (via the DOM)</p>
    <p>interact with the Server (via XMLHttpRequests, Iframes, etc)</p>
    <p>... in the name of the user  security sensitive  sensitive data and active content may</p>
    <p>originate from different sources</p>
    <p>Access is governed by the Same-Origin Policy</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 4</p>
    <p>http://example.org</p>
    <p>Server</p>
    <p>Client</p>
    <p>h&quot;p://example.org Browser</p>
    <p>Active Content</p>
    <p>HTML</p>
  </div>
  <div class="page">
    <p>The Same-Origin Policy</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 5</p>
    <p>The Same-Origin Policy restricts access of active content to objects that share the same origin. The origin is, hereby, defined by the protocol, the domain and the port used to retrieve the object. *</p>
    <p>http://example.org:80/some/webpage.html</p>
    <p>protocol domain port</p>
    <p>Target host Access Reason</p>
    <p>h&quot;p://example.org Yes ---</p>
    <p>h&quot;ps://example.org No Protocol mismatch</p>
    <p>h&quot;p://example.org:8080 No Port mismatch</p>
    <p>h&quot;p://facebook.com No Domain mismatch</p>
    <p>* Paraphrasing RFC 6454</p>
  </div>
  <div class="page">
    <p>Protecting the Intranet</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 6</p>
    <p>h&quot;p://a&quot;acker.org Browser</p>
    <p>http://attacker.org</p>
    <p>Active Content</p>
    <p>Firewall 10.0.0.0/8</p>
    <p>Internet Intranet</p>
    <p>h&quot;p://a&quot;acker.org != h&quot;p://10.0.0.20</p>
    <p>SOP Mismatch! Access Denied!</p>
    <p>http://10.0.0.20</p>
  </div>
  <div class="page">
    <p>DNS Rebinding</p>
  </div>
  <div class="page">
    <p>DNS Rebinding</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 8</p>
    <p>h&quot;p://a&quot;acker.org Browser</p>
    <p>http://attacker.org</p>
    <p>Active Content</p>
    <p>h&quot;p://a&quot;acker.org = h&quot;p://a&quot;acker.org</p>
    <p>SOP matches! Access granted</p>
    <p>http://attacker.org</p>
    <p>DNS Server</p>
    <p>Firewall 10.0.0.0/8</p>
    <p>Internet Intranet</p>
  </div>
  <div class="page">
    <p>History Repeating</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 9</p>
    <p>Countermeasure: Strict IP-based access control for Java applets  Java applets are only allowed to connect to their servers IP address  Maintainted over the entire lifetime of the applet</p>
    <p>even inside the Browsers Java Cache</p>
  </div>
  <div class="page">
    <p>History Repeating</p>
    <p>Countermeasure: Explicit domain relaxation  Both involved frames need to use domain relaxation Countermeasure: DNS-Pinning  Browser caches domain-to-IP mapping</p>
    <p>Browser resolves mapping only once per session</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 10</p>
    <p>Domain 1 attacker.org  10.0.0.20</p>
    <p>Domain 2 evil.attacker.org  6.6.6.6</p>
    <p>Quick-Swap DNS</p>
  </div>
  <div class="page">
    <p>History Repeating</p>
    <p>Countermeasure: Host-header checking  In HTTP 1.1, the browser attaches an additional header containing the hostname  Applications need to check this header for correctness</p>
    <p>Countermeasure: Restrictive Networking Capabilities for plug-ins  Plugins are only allowed to connect to a limited set of ports</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 11</p>
    <p>JavaScript, Flash, Java, ...</p>
    <p>Even allowing socket communication</p>
  </div>
  <div class="page">
    <p>HTML5 Offline Application Cache Attack</p>
  </div>
  <div class="page">
    <p>Abusing the Cache</p>
    <p>Idea: use the cache to store resource until domain-to-IP mapping is lost</p>
    <p>Abusing the cache for DNS Rebinding as such is straight-forward</p>
    <p>However, normal caching is not reliable</p>
    <p>HTML5 AppCache enables a  controllable caching behaviour  and thus, a way for content to easily exceed DNS pinning times</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 13</p>
  </div>
  <div class="page">
    <p>HTML5 AppCache</p>
    <p>Used to store parts of an application in the Cache  e.g. to reduce bandwidth consumption</p>
    <p>New attribute manifest added in HTML5  URL to a file containing resources the browser should cache</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 14</p>
    <p>CACHE MANIFEST http://example.org/index.php http://example.org/flash.swf</p>
  </div>
  <div class="page">
    <p>How the AppCache works</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 15</p>
    <p>h&quot;p://example.org Browser</p>
    <p>&lt;html manifest=/manifest.mf&gt;</p>
    <p>http://example.org</p>
    <p>h&quot;p://example.org Browser</p>
    <p>&lt;html manifest=/manifest.mf&gt;</p>
    <p>http://example.org/ manifest.mf</p>
    <p>/manifest.mf</p>
  </div>
  <div class="page">
    <p>Abusing the HTML 5 AppCache</p>
    <p>server</p>
    <p>We only have one shot</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 16</p>
  </div>
  <div class="page">
    <p>Solution: Cross-domain caching</p>
    <p>AppCache allows us to store cross-domain resources  Have two domains  one for rebinding, one for manifest</p>
    <p>Domain attacker1.org hosts manifest and iframe with source attacker2.org/index.php</p>
    <p>attacker2.org is rebound  In the final step, manifest is retrieved from http://attacker1.org (still</p>
    <p>working)</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 17</p>
    <p>CACHE MANIFEST http://attacker2.org/index.php http://attacker2.org/flash.swf</p>
  </div>
  <div class="page">
    <p>History Repeating</p>
    <p>Countermeasure:</p>
    <p>The extended Same-Origin Policy Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 18</p>
    <p>IE does not allow for cross-domain caching</p>
  </div>
  <div class="page">
    <p>The extended Same-Origin Policy</p>
  </div>
  <div class="page">
    <p>The three principals of Web interaction</p>
    <p>The Same-Origin Policys duty is  to isolate unrelated Web applications from each other  based on the origin of the interacting resources</p>
    <p>Semantics of the SOP are built around two entities:  The Web client (browser) enforces the policy  The Web server provides the resources subject to the policy decision</p>
    <p>However, the involved entities differ:  The Web client (browser) enforces the policy  The DNS server provides the information used in the policy decision</p>
    <p>Principal mismatch: Web server is not involved in the decision Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 20</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>(DG1) Client-side enforcement  SOP is a client-side security policy and thus checking should be</p>
    <p>conducted in the browser</p>
    <p>(DG2) Protocol layer  Applications must not to be changed, only the protocol layer should be</p>
    <p>modified</p>
    <p>(DG3) Dedicated security functionality  Host header as such is not a security functionality</p>
    <p>(DG4) Non-disruptive  Our approach should not break existing browsers or applications</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 21</p>
  </div>
  <div class="page">
    <p>Extending the SOP with server-provided information</p>
    <p>Only the server should be capable of settings its trust boundary  Currently, the browser is guessing this boundary</p>
    <p>based on information delivered by the network</p>
    <p>Therefore, we propose to extend the Same-Origin Policy  with server-provided input</p>
    <p>delivered through an HTTP response header to be</p>
    <p>{ protocol, domain, port, server-origin }</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 22</p>
  </div>
  <div class="page">
    <p>Extended Same-Origin Policy decision logic</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 23</p>
    <p>The eSOP is satisfied iff:</p>
    <p>{protocol, domain, port}A == {protocol, domain, port }T and</p>
    <p>domainA  server-originT</p>
    <p>If the server-originT property is empty, the second criterion always evaluates as true.</p>
    <p>Example  10.0.0.20s server-origin = { 10.0.0.20, wiki.corp }  2. part of the SOP decision: attacker.org  of { 10.0.0.20, wiki.corp }  false  Many edge cases are explained in the paper</p>
  </div>
  <div class="page">
    <p>Analysis of the eSOP</p>
    <p>The eSOP, summarized  client-side enforcement (DG1)</p>
    <p>HTTP header used, no change to applications necessary (DG2)</p>
    <p>HTTP header only used for security (DG3)</p>
    <p>browsers fall back to old SOP when header is not sent (DG4)</p>
    <p>We implemented a prototype into Chromium  consists of header extraction (array access) and string matching</p>
    <p>actually in two separate places, but similar method</p>
    <p>overhead not noticable</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 24</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>The Same-Origin Policy is the most basic security policy in the browser  it isolates unrelated Web applications from each other</p>
    <p>based on the origin of the interacting resources (protocol, domain, port)  DNS Rebinding circumvents the SOP</p>
    <p>by associating a domain name with two unrelated IPs</p>
    <p>vulnerabilities discovered in 1996, 2002, 2006 and 2013</p>
    <p>DNS Rebinding is a protocol-level flaw  Network governs the servers security characteristics</p>
    <p>We enhanced the SOP with explicit server-origin to eridicate DNS Rebinding</p>
    <p>our approach was implemented within Chromium and proofed to have no overhead</p>
    <p>Opt-in, but on the target server-side</p>
    <p>Johns, Lekies, Stock: Eradicating DNS Rebinding with the Extended Same-Origin Policy 26</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Rethink the notion of origins in the browser  Use the server-provided origin instead of the domain</p>
    <p>Adopt the newly developed SOP to other parts of the browser  password manager (e.g. defeats certain phishing attacks)</p>
    <p>postMessage (currently only URL is known by recipient)</p>
    <p>Adopt policy for plugins  Rethink CORS-like preflight requests</p>
    <p>Different attacker model</p>
    <p>Lehrstuhl fr IT-Sicherheitsinfrastrukturen 27</p>
  </div>
  <div class="page">
    <p>Thank you for your attention</p>
    <p>ben.stock@cs.fau.de  @kcotsneb</p>
  </div>
</Presentation>
