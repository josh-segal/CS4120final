<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Controlling File System Write Ordering</p>
    <p>Nathan C. Burnett Andrea C. Arpaci-Dusseau Remzi H. Arpaci-Dusseau</p>
    <p>University of Wisconsin - Madison</p>
  </div>
  <div class="page">
    <p>Why control write ordering?</p>
    <p>WAL requires control over write ordering</p>
    <p>How is it done now?  Application managed storage (raw device)</p>
    <p>Makes management difficult</p>
    <p>Direct I/O  Slow, not portable</p>
    <p>fsync(), synchronous I/O  Slow</p>
    <p>write() and hope  Consistency guarantees are lost</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Create interface to express ordering to OS</p>
    <p>What is the right interface?  Simple</p>
    <p>Portable</p>
    <p>Asynchronous</p>
    <p>Fast</p>
  </div>
  <div class="page">
    <p>File System Barriers</p>
    <p>Added barrier() system call</p>
    <p>Writes do not get reordered across barrier  e.g. write(log, ), barrier(), write(data, )</p>
    <p>Advantages  Easy to understand</p>
    <p>Replaces fsync() and sync() for ordering</p>
    <p>Asynchronous and fast</p>
    <p>But it still restrains OS I/O scheduling</p>
  </div>
  <div class="page">
    <p>Asynchronous Graphs</p>
    <p>Specify exactly when order matters  For two write ops, say which one goes first</p>
    <p>Specify no ordering if it doesnt matter</p>
    <p>Generates graph of order dependencies</p>
    <p>Data will be written in order when needed</p>
    <p>OS is free to reorder other requests</p>
  </div>
  <div class="page">
    <p>A Quick Example</p>
    <p>Chain log updates so commit is last log update</p>
    <p>Ordering between data updates unspecified</p>
    <p>All data written after the log commit record</p>
    <p>Commit Record</p>
    <p>Data Update 2</p>
    <p>Data Update 2</p>
    <p>Data Update 1</p>
    <p>Log updateLog update</p>
  </div>
  <div class="page">
    <p>Current Status</p>
    <p>Barriers implemented in FreeBSD 5.4</p>
    <p>Exploring benefits in simple simulation  Simulates buffer cache and disk</p>
    <p>Disk writes are either seq (fast) or not (slow)</p>
    <p>We can show for a transactional load:  agraphs requires fewer I/Os</p>
    <p>agraphs requires fewer non-sequential I/Os</p>
  </div>
  <div class="page">
    <p>Performance Benefits</p>
    <p>Fewer writes overall  log writes are generally very small</p>
    <p>fsync and barriers separate small writes</p>
    <p>asynchronous graphs combines them</p>
    <p>Fewer random I/Os  delay log updates, 1 big I/O not 100 small I/Os</p>
  </div>
  <div class="page">
    <p>Whats Next?</p>
    <p>Extend our simulator to include:  clustered writes</p>
    <p>buffer cleaning daemons (syncd, bufd)</p>
    <p>better disk model</p>
    <p>Implement agraphs in FreeBSD  Evaluate implementation complexity</p>
    <p>Test performance on real &amp; synth workloads</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Comments?</p>
    <p>Questions?</p>
    <p>Jobs?</p>
    <p>ncb@cs.wisc.edu</p>
    <p>http://www.cs.wisc.edu/~ncb/</p>
  </div>
</Presentation>
