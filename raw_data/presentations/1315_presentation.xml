<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A graph model for data and workflow provenance</p>
    <p>Umut Acar, Peter Buneman, James Cheney, Natalia Kwasnikowska,</p>
    <p>Jan van den Bussche, &amp; Stijn Vansummeren</p>
    <p>TaPP 2010</p>
  </div>
  <div class="page">
    <p>Provenance in ...  Databases</p>
    <p>Mainly for (nested) relational model</p>
    <p>Where-provenance (&quot;source location&quot;)</p>
    <p>Lineage, why (&quot;witnesses&quot;)</p>
    <p>How/semiring model</p>
    <p>Relatively formal</p>
    <p>Workflows  Many different systems</p>
    <p>Many different models</p>
    <p>(converging on OPM?)</p>
    <p>Graphs/DAGs</p>
    <p>Relatively informal</p>
  </div>
  <div class="page">
    <p>Provenance in ...  Databases</p>
    <p>Mainly for (nested) relational model</p>
    <p>Where-provenance (&quot;source location&quot;)</p>
    <p>Lineage, why (&quot;witnesses&quot;)</p>
    <p>How/semiring model</p>
    <p>Relatively formal</p>
    <p>Workflows  Many different systems</p>
    <p>Many different models</p>
    <p>(converging on OPM?)</p>
    <p>Graphs/DAGs</p>
    <p>Relatively informal</p>
    <p>?????</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Relate database &amp; workflow &quot;styles&quot;  Develop a common graph formalism  Need a common, expressive language that</p>
    <p>supports many database queries  describes some (simple) workflows</p>
  </div>
  <div class="page">
    <p>Previous work</p>
    <p>Dataflow calculus (DFL), based on nested relational calculus (NRC)</p>
    <p>Provenance &quot;run&quot; model by Kwasnikowska &amp; Van den Bussche (DILS 07, IPAW 08)</p>
    <p>&quot;Provenance trace&quot; model for NRC  by (Acar, Ahmed &amp; C. '08)</p>
    <p>Open Provenance Model (bipartite graphs)  (Moreau et al. 2008-9), used in many WF systems</p>
  </div>
  <div class="page">
    <p>NRC/DFL background</p>
    <p>A very simple, functional language:  basic functions +, *,... &amp; constants 0,1,2,3...  variables x,y,z  pair/record types (A:e,...,B:e), A (e)  collection (set) types  {e,...} e  e {e | x in e'} e</p>
  </div>
  <div class="page">
    <p>An example</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Suppose R = {(1,2,3), (4,5,6), (9,8,7)}</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Suppose R = {(1,2,3), (4,5,6), (9,8,7)}</p>
    <p>sum { x * y | (x,y,z) in R, x &lt; y}</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Suppose R = {(1,2,3), (4,5,6), (9,8,7)}</p>
    <p>sum { x * y | (x,y,z) in R, x &lt; y}</p>
    <p>= sum { x * y | (x,y,z) in {(1,2,3), (4,5,6)}}</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Suppose R = {(1,2,3), (4,5,6), (9,8,7)}</p>
    <p>sum { x * y | (x,y,z) in R, x &lt; y}</p>
    <p>= sum { x * y | (x,y,z) in {(1,2,3), (4,5,6)}}</p>
    <p>= sum {1 * 2, 4 * 5}</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Suppose R = {(1,2,3), (4,5,6), (9,8,7)}</p>
    <p>sum { x * y | (x,y,z) in R, x &lt; y}</p>
    <p>= sum { x * y | (x,y,z) in {(1,2,3), (4,5,6)}}</p>
    <p>= sum {1 * 2, 4 * 5}</p>
    <p>= sum {2,20}</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Suppose R = {(1,2,3), (4,5,6), (9,8,7)}</p>
    <p>sum { x * y | (x,y,z) in R, x &lt; y}</p>
    <p>= sum { x * y | (x,y,z) in {(1,2,3), (4,5,6)}}</p>
    <p>= sum {1 * 2, 4 * 5}</p>
    <p>= sum {2,20}</p>
    <p>= 22</p>
  </div>
  <div class="page">
    <p>Another example</p>
    <p>In DFL, built-in functions / constants can be whole programs &amp; files,</p>
    <p>as in Provenance Challenge 1 workflow: let WarpParams := {align_warp(img,hdr})</p>
    <p>| (img,hdr) in Inputs} in</p>
    <p>let Reslices := {reslice(wp)</p>
    <p>| wp in WarpParams} in</p>
    <p>softmean(Reslices)</p>
  </div>
  <div class="page">
    <p>Goal: Define &quot;provenance graphs&quot; for DFL</p>
  </div>
  <div class="page">
    <p>Goal: Define &quot;provenance graphs&quot; for DFL</p>
    <p>let WarpParams := {align_warp(img,hdr}) | (img,hdr) in Inputs} in let Reslices := {reslice(wp) | wp in WarpParams} in in softmean(Reslices)</p>
  </div>
  <div class="page">
    <p>Goal: Define &quot;provenance graphs&quot; for DFL</p>
    <p>let WarpParams := {align_warp(img,hdr}) | (img,hdr) in Inputs} in let Reslices := {reslice(wp) | wp in WarpParams} in in softmean(Reslices)</p>
    <p>http://www.flickr.com/photos/schneertz/679692806/</p>
  </div>
  <div class="page">
    <p>First step: values</p>
    <p>c</p>
    <p>&lt;&gt;{}</p>
    <p>...</p>
    <p>elem</p>
    <p>elem A1</p>
    <p>An</p>
    <p>v</p>
    <p>v</p>
    <p>v</p>
    <p>or</p>
    <p>v</p>
    <p>v</p>
    <p>or</p>
    <p>... copyvor</p>
  </div>
  <div class="page">
    <p>Example value</p>
    <p>&lt;&gt;</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>A</p>
    <p>B 2</p>
    <p>&lt;&gt; A</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Next step: evaluation nodes (&quot;process&quot;)</p>
    <p>c ...</p>
    <p>n</p>
    <p>e</p>
    <p>f e</p>
    <p>x letx body</p>
    <p>e</p>
    <p>e</p>
    <p>Constants, primitive functions</p>
    <p>Variables &amp; temporary bindings</p>
    <p>head</p>
  </div>
  <div class="page">
    <p>Pairing</p>
    <p>...</p>
    <p>A1</p>
    <p>An</p>
    <p>e</p>
    <p>&lt;&gt; e</p>
    <p>Ae</p>
    <p>Record building</p>
    <p>Field lookup</p>
  </div>
  <div class="page">
    <p>Conditionals</p>
    <p>if test</p>
    <p>then</p>
    <p>e</p>
    <p>e if</p>
    <p>test</p>
    <p>else</p>
    <p>e</p>
    <p>e</p>
    <p>Note: Only taken branch is recorded</p>
  </div>
  <div class="page">
    <p>Sets: basic operations</p>
    <p>{}e</p>
    <p>1</p>
    <p>e</p>
    <p>e</p>
    <p>Empty set</p>
    <p>Singleton</p>
    <p>Union</p>
  </div>
  <div class="page">
    <p>Sets: complex operations</p>
    <p>e</p>
    <p>forx</p>
    <p>head</p>
    <p>body</p>
    <p>e</p>
    <p>e</p>
    <p>e body...</p>
    <p>Flattening</p>
    <p>Iteration</p>
  </div>
  <div class="page">
    <p>Provenance graphs</p>
    <p>are graphs with &quot;both value and evaluation structure&quot;</p>
    <p>!</p>
    <p>&quot; #</p>
    <p>$</p>
    <p>% &amp;</p>
    <p>!</p>
    <p>&quot;</p>
    <p># $%&amp;&quot; '</p>
    <p>(</p>
    <p>)</p>
    <p># $%&amp;&quot;</p>
    <p>'</p>
    <p>(</p>
    <p>*</p>
    <p>+</p>
    <p>, '</p>
    <p>'(</p>
    <p>./01&quot;</p>
    <p>(5 6%4&quot;</p>
    <p>./01!</p>
    <p>$%&amp;&quot;</p>
    <p>!</p>
    <p>&quot; #</p>
    <p>$</p>
    <p>%</p>
    <p>&amp;'(</p>
    <p>)</p>
    <p>#</p>
    <p>* %</p>
    <p>+,&amp;'(</p>
    <p>#</p>
    <p>%</p>
    <p>./01</p>
  </div>
  <div class="page">
    <p>A bigger example</p>
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Value structure</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Value structure</p>
    <p>{} {} {}</p>
    <p>C</p>
    <p>C</p>
    <p>C</p>
    <p>C C</p>
    <p>C</p>
    <p>C</p>
    <p>C</p>
    <p>T</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}&lt;&gt;</p>
    <p>C</p>
    <p>{}</p>
    <p>C</p>
    <p>C</p>
    <p>C C</p>
    <p>C F</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Input values</p>
    <p>{} {} {}</p>
    <p>C</p>
    <p>C</p>
    <p>C</p>
    <p>C C</p>
    <p>C</p>
    <p>C</p>
    <p>C</p>
    <p>T</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}&lt;&gt;</p>
    <p>C</p>
    <p>{}</p>
    <p>C</p>
    <p>C</p>
    <p>C C</p>
    <p>C F</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Return value</p>
    <p>{} {} {}</p>
    <p>C</p>
    <p>C</p>
    <p>C</p>
    <p>C C</p>
    <p>C</p>
    <p>C</p>
    <p>C</p>
    <p>T</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}</p>
    <p>{}&lt;&gt;</p>
    <p>C</p>
    <p>{}</p>
    <p>C</p>
    <p>C</p>
    <p>C C</p>
    <p>C F</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Expression structure</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Expression structure</p>
    <p>=</p>
    <p>fst x</p>
    <p>snd</p>
    <p>empty</p>
    <p>let R</p>
    <p>let S</p>
    <p>for ys Ufor x</p>
    <p>if</p>
    <p>if</p>
    <p>R =</p>
    <p>{}x</p>
    <p>snd</p>
    <p>fst</p>
    <p>fst</p>
    <p>snd y</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Building provenance graphs</p>
    <p>is complicated  Here we'll use high-level &quot;graph rewrite</p>
    <p>rule&quot; formalism</p>
    <p>Mostly because it is nicer to look at than formal version</p>
  </div>
  <div class="page">
    <p>cc c</p>
    <p>ff f(v1,...,vn) 1</p>
    <p>n vn</p>
    <p>v1</p>
    <p>...</p>
    <p>n vn</p>
    <p>v1</p>
    <p>...</p>
    <p>letx</p>
    <p>head</p>
    <p>body</p>
    <p>v</p>
    <p>ex</p>
    <p>head</p>
    <p>body</p>
    <p>v</p>
    <p>ex letx copy</p>
    <p>copy</p>
  </div>
  <div class="page">
    <p>Ai&lt;&gt; A1</p>
    <p>An vn</p>
    <p>v1</p>
    <p>...</p>
    <p>&lt;&gt;</p>
    <p>A1</p>
    <p>An v</p>
    <p>v</p>
    <p>... Ai...vi copy</p>
    <p>... ...</p>
    <p>vi</p>
    <p>&lt;&gt; A1</p>
    <p>An vn</p>
    <p>v1</p>
    <p>...</p>
    <p>A1</p>
    <p>An vn</p>
    <p>v1</p>
    <p>... &lt;&gt; &lt;&gt;</p>
    <p>A1</p>
    <p>An</p>
  </div>
  <div class="page">
    <p>if</p>
    <p>e2</p>
    <p>e1</p>
    <p>True</p>
    <p>e1</p>
    <p>True if</p>
    <p>test</p>
    <p>then</p>
    <p>test</p>
    <p>then</p>
    <p>else</p>
    <p>if</p>
    <p>e2</p>
    <p>e1</p>
    <p>False</p>
    <p>e2</p>
    <p>False if</p>
    <p>test</p>
    <p>else</p>
    <p>test</p>
    <p>then</p>
    <p>else copy</p>
    <p>copy</p>
  </div>
  <div class="page">
    <p>empty?{} {} empty? False</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>empty?{} {} empty? True</p>
  </div>
  <div class="page">
    <p>{}</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>{}</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>{}</p>
    <p>v</p>
    <p>elem</p>
    <p>v {}{}</p>
    <p>{} ...</p>
    <p>v</p>
    <p>v</p>
    <p>...</p>
    <p>v</p>
    <p>v</p>
    <p>elem</p>
    <p>elem</p>
    <p>{}</p>
    <p>elem</p>
    <p>elem</p>
    <p>{}</p>
    <p>elem</p>
    <p>elem</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>OK, take a deep breath!</p>
  </div>
  <div class="page">
    <p>e</p>
    <p>e</p>
    <p>x copy</p>
    <p>x copy</p>
    <p>forx</p>
    <p>head</p>
    <p>body</p>
    <p>{}</p>
    <p>ex</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>vn</p>
    <p>v1</p>
    <p>head</p>
    <p>body</p>
    <p>{}</p>
    <p>... elem</p>
    <p>elem</p>
    <p>vn</p>
    <p>v1</p>
    <p>body</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>...</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>{}</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>{}</p>
    <p>elem</p>
    <p>elem</p>
    <p>{}</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>{}</p>
    <p>...</p>
    <p>elem</p>
    <p>elem</p>
    <p>v</p>
    <p>v</p>
    <p>{}</p>
    <p>elem</p>
    <p>elem</p>
    <p>{} {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>... ...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>forx</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>+ 1</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>forx</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>+ 1</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>+ 1</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>+ 1</p>
    <p>x C</p>
    <p>x C</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>+ 1</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>+ 1</p>
    <p>x C</p>
    <p>x C</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>+</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>+</p>
    <p>x C</p>
    <p>x C</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>+</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>+</p>
    <p>x C</p>
    <p>x C</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>head</p>
    <p>body</p>
    <p>{} elem</p>
    <p>elem</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>x C</p>
    <p>x C</p>
    <p>+ 2</p>
    <p>+ 3</p>
  </div>
  <div class="page">
    <p>Graphs can &quot;lie&quot; (inconsistency)</p>
    <p>+ 5</p>
  </div>
  <div class="page">
    <p>Graphs can &quot;lie&quot; (inconsistency)</p>
    <p>+ 5</p>
    <p>if copy</p>
    <p>True test</p>
    <p>else</p>
  </div>
  <div class="page">
    <p>Graphs can &quot;lie&quot; (inconsistency)</p>
    <p>+ 5</p>
    <p>if copy</p>
    <p>True test</p>
    <p>else</p>
    <p>head</p>
    <p>body</p>
    <p>elem</p>
    <p>elem</p>
    <p>body</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>{}</p>
  </div>
  <div class="page">
    <p>Graphs can &quot;lie&quot; (inconsistency)</p>
    <p>+ 5</p>
    <p>if copy</p>
    <p>True test</p>
    <p>else</p>
    <p>head</p>
    <p>body</p>
    <p>elem</p>
    <p>elem</p>
    <p>body</p>
    <p>forx {}</p>
    <p>elem</p>
    <p>elem</p>
    <p>{}</p>
    <p>&quot;Locally&quot; but not &quot;globally&quot; consistent</p>
  </div>
  <div class="page">
    <p>Graph queries</p>
    <p>Many possible approaches  In paper: some Datalog</p>
    <p>Maybe overkill, seems fragile  In code: some &quot;annotation propagation&quot;</p>
    <p>traversals</p>
    <p>Seems to handle where, &quot;explanations&quot;, &quot;summaries&quot;</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Explaining</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Explaining</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Explaining</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Explaining</p>
    <p>Note: Smallest consistent subgraph (NOT</p>
    <p>transitive closure!)</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>Summarizing</p>
  </div>
  <div class="page">
    <p>!</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+, $-.</p>
    <p>/&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>%98</p>
    <p>&quot;</p>
    <p>#$%</p>
    <p>&amp;'()</p>
    <p>*+,</p>
    <p>$-. /</p>
    <p>&amp;'() 0</p>
    <p>&amp;'() 1</p>
    <p>;&lt;=$8 %8$%</p>
    <p>#'6+&quot;&amp;'() 98&lt;.</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'() &gt;'.)</p>
    <p>?2+3</p>
    <p>@</p>
    <p>)</p>
    <p>#$%</p>
    <p>&amp;'() $-. A</p>
    <p>&amp;'()</p>
    <p>#'6+) &amp;'() 98&lt;.</p>
    <p>&gt;'.)</p>
    <p>&gt;'.)</p>
    <p>=8%+!</p>
    <p>&amp;'()</p>
    <p>&gt;'.)</p>
    <p>&amp;'()</p>
    <p>+ 2</p>
    <p>Summarizing</p>
    <p>{} 1</p>
  </div>
  <div class="page">
    <p>Graphs are partially &quot;replayable&quot;</p>
    <p>If we change a value node, can try to &quot;readjust&quot; to recover consistency</p>
    <p>Formalized in (Acar, Ahmed, Cheney 08)</p>
    <p>+ 4</p>
  </div>
  <div class="page">
    <p>Graphs are partially &quot;replayable&quot;</p>
    <p>If we change a value node, can try to &quot;readjust&quot; to recover consistency</p>
    <p>Formalized in (Acar, Ahmed, Cheney 08)</p>
    <p>+ 4</p>
  </div>
  <div class="page">
    <p>Graphs are partially &quot;replayable&quot;</p>
    <p>If we change a value node, can try to &quot;readjust&quot; to recover consistency</p>
    <p>Formalized in (Acar, Ahmed, Cheney 08)</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Graphs are partially &quot;replayable&quot;</p>
    <p>If we change a value node, can try to &quot;readjust&quot; to recover consistency</p>
    <p>Formalized in (Acar, Ahmed, Cheney 08)</p>
    <p>+</p>
    <p>if copy</p>
    <p>test</p>
    <p>else</p>
    <p>False</p>
  </div>
  <div class="page">
    <p>Graphs are partially &quot;replayable&quot;</p>
    <p>If we change a value node, can try to &quot;readjust&quot; to recover consistency</p>
    <p>Formalized in (Acar, Ahmed, Cheney 08)</p>
    <p>+</p>
    <p>if copy</p>
    <p>True test</p>
    <p>else</p>
  </div>
  <div class="page">
    <p>Graphs are partially &quot;replayable&quot;</p>
    <p>If we change a value node, can try to &quot;readjust&quot; to recover consistency</p>
    <p>Formalized in (Acar, Ahmed, Cheney 08)</p>
    <p>+</p>
    <p>if</p>
    <p>True test</p>
    <p>else</p>
    <p>Stuck!</p>
    <p>????</p>
  </div>
  <div class="page">
    <p>Implementation in Haskell</p>
    <p>Summarized in paper, full code on request  roughly 250 LOC for basic evaluator  another 300 for graphviz translation, basic queries, examples</p>
    <p>Point?  No claim of efficiency/scalability but easy to understand,</p>
    <p>experiment</p>
    <p>Elucidates some tricky details that pictures hide  Similar &quot;lightweight modeling&quot; might be valuable for</p>
    <p>understanding/relating other WF/DB models</p>
  </div>
  <div class="page">
    <p>Related work  This work synthesizes/rearranges ideas from</p>
    <p>several previous works &amp; &quot;folklore&quot;</p>
    <p>traces (Acar, Ahmed, Cheney 2008)  runs (Kwasnikowska, van den Bussche, DILS 2007, IPAW</p>
    <p>OPM graphs (Moreau et al. IPAW 2008 etc.)  and many workflow systems</p>
    <p>More can be done to relate DB &amp; workflow models</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>This is work in progress  Next steps:</p>
    <p>Extending to understand/model other workflow features</p>
    <p>Better grasp of &quot;real&quot; queries and features needed  Implementa(tion|ability)?  Optimization?</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>DB &amp; WF provenance have much in common</p>
    <p>We develop common graph model  with both intuitive &amp; precise presentations</p>
    <p>Still much to do to relate and integrate DB &amp; WF models</p>
    <p>let alone integrate models at scale in real systems</p>
  </div>
</Presentation>
