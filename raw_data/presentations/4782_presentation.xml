<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Approximation Algorithms for Envy-free Profit</p>
    <p>maximization problems</p>
    <p>Chaitanya Swamy University of Waterloo</p>
    <p>Joint work with Maurice Cheung Cornell University</p>
  </div>
  <div class="page">
    <p>Profit-maximization pricing problems</p>
    <p>seller with m indivisible non-identical items  items available in limited supply or capacity  n customers wanting subset(s) of items</p>
    <p>Profit-maximization problem: set prices on items and allocate items to customers so that  capacity constraints are respected  each customer can afford her allotted subset (value  price)</p>
    <p>GOAL: maximize seller profit = total price paid by customers</p>
    <p>Envy-free (EF) profit maximization: also require that  customer is allotted set with maximum utility (= value  price)</p>
  </div>
  <div class="page">
    <p>Why envy-freeness? Economic motivation  models a fair, equilibrium outcome  Fairness: seller is not biased towards any</p>
    <p>specific customer  Equilibrium: each customer is maximally</p>
    <p>happy, no incentive to deviate from/dispute the allocation (given the prices)</p>
    <p>In settings where customers may lie about valuations, envy-free problem used as a metric for comparing profit-maximization truthful mechanisms</p>
    <p>[Here: consider setting where valuations are known]</p>
  </div>
  <div class="page">
    <p>With arbitrary (set-based) customer valuation functions {vi(.)}, envy-free problem becomes very hard:  complexity issues in describing the valuation</p>
    <p>functions</p>
    <p>even deciding if a given solution (pricing + allocation) is feasible is coNP-hard (even given a value oracle for computing vi(S) given set S)</p>
    <p>even structured cases are not well understood Focus on a more structured setting  the single-minded setting</p>
  </div>
  <div class="page">
    <p>The single-minded problem (SMEFP)</p>
    <p>m non-identical items: item e has supply ue (possibly )  n customers: customer i desires a single subset Si of items</p>
    <p>has valuation vi = max amount she will pay for Si</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>item</p>
    <p>valuation viset Si</p>
    <p>ue= 2 for all items</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>price pe</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>winner</p>
    <p>price pe</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>envy-free solution with profit = 2(3+5)+5 = 21</p>
    <p>winner</p>
    <p>price pe</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>envy-free solution with profit = 2(5+3+3) = 22</p>
    <p>winner</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>NOT an envy-free solution</p>
    <p>Set prices {pe} on items, choose a set W of winners s.t.</p>
    <p>capacity constraints: |{ iW: e Si }|  ue for all items e</p>
    <p>every winner can afford her set: vi   eSi pe</p>
    <p>for all iW</p>
    <p>envy-freeness: vi   eSi pe for all iW</p>
    <p>GOAL: maximize profit =  iW  eSi pe</p>
    <p>=  e pe.|{ iW: e Si }|</p>
  </div>
  <div class="page">
    <p>Two special cases</p>
    <p>Tollbooth problem: items are edges of a graph G, each set Si is a path of G  problem is APX-hard even when G is a star, all vi = 1, all ue =  (Guruswami et al. (G+05))</p>
    <p>Highway problem: the graph G is a path  sets Si  intervals  problem is NP-hard even when the intervals are nested, unlimited supply: all ue =  (Briest-Krysta)</p>
  </div>
  <div class="page">
    <p>Approximation Algorithm</p>
    <p>Hard to solve the single-minded problem exactly  even very specialized cases are NP-hard. Settle for approximate solutions. Give polytime algorithm that always finds near-optimal solutions.</p>
    <p>A is a -approximation algorithm if,</p>
    <p>A runs in polynomial time, A(I)  OPT(I)/ on all instances I (  1).</p>
    <p>is called the approximation ratio of A.</p>
  </div>
  <div class="page">
    <p>Related Work  Guruswami et al. (G+05) introduced the envy-free</p>
    <p>problem  also introduced the structured case of unit-demand</p>
    <p>customers</p>
    <p>NO previous approx. results for SMEFP (with limited supply) or even its special cases, e.g., tollbooth, highway problems</p>
    <p>Previous settings considered  unlimited supply problem: logarithmic</p>
    <p>approximation bounds; G+05, Briest-Krysta (BK05), Balcan-Blum (BB05)</p>
    <p>non-envy-free limited supply problem: quasi- or pseudo-polytime exact algorithms/approx. schemes for restricted SM instances; G+05, BK05, BB05, Grigoriev et al., Elbassioni et al.</p>
    <p>non-EF problem with submodular+ valuations: Dobzinski et al., Balcan et al.</p>
    <p>Techniques do not extend to the envy-free problem.</p>
  </div>
  <div class="page">
    <p>Related Work (contd.)</p>
    <p>Hardness results:  general SM problem: m</p>
    <p>inapproximability even when ue = 1 e; log c m-inapproximability (c &lt; 1) with unlimited-supply (Demaine et al.)</p>
    <p>specialized cases are also APX- or NPhard (G+05, BK05)</p>
  </div>
  <div class="page">
    <p>Our Results  Give the first approximation algorithms for single-minded</p>
    <p>envy-free profit-maximization (SMEFP) with limited supply  for any class of single-minded problems, given LP-based</p>
    <p>approx. algorithm for finding the max-value allocation, find an EF solution with Profit  O(OPTvalue/(.log umax))  O(.log umax)approx.</p>
    <p>O(m . log umax)-approx. for general SMEFP  O(log umax)-approx. for tollbooth problem on trees</p>
    <p>[Often -inapprox. for max-value problem -inapprox. for SMEFP]</p>
    <p>Reduction shows  concrete, explicit connection b/w OPTvalue and optimum profit  ratio of profit obtained by non-EF and EF solutions = O(.log umax)</p>
  </div>
  <div class="page">
    <p>Social-welfaremaximization (SWM)</p>
    <p>problem Choose an allocation, i.e., winner-set W, with maximum total value that satisfies capacity constraints: |{ iW: eSi }|  ue e</p>
    <p>LP relaxation: xi : indicates if i is chosen as a winner</p>
    <p>Maximize i vixi subject to, i:eSi xi  ue for all e</p>
    <p>But how does the LP help in setting prices?</p>
  </div>
  <div class="page">
    <p>OPT := max i vixi (P)</p>
    <p>s.t. i:eSi xi  ue e</p>
  </div>
  <div class="page">
    <p>OPT := max i vixi (P) = min e ueye + i zi (D) s.t. i:eSi xi  ue e s.t.</p>
    <p>eSi ye + zi  vi i</p>
    <p>Key insight: the dual variables (ye) furnish envy-free prices</p>
    <p>By complementary slackness, at optimality,</p>
    <p>if xi &gt; 0 then eSi ye + zi = vi  eSi ye  vi</p>
    <p>if xi &lt; 1 then zi = 0  eSi ye  vi</p>
    <p>if ye &gt; 0 then i:eSi xi = ue</p>
    <p>if x is an integer optimal soln. to (P), (y, z) is opt. soln. to (D), then x along with prices {ye} is a feasible soln. with profit e ueye</p>
    <p>x (P) need not have an integer optimal solution x e ueye could be much smaller than the optimum profit</p>
  </div>
  <div class="page">
    <p>Highway problem m edges on a path, edge e has capacity ue n customers, customer i has valuation vi for subpath Si</p>
    <p>if x is an integer optimal soln. to (P), (y, z) is opt. soln. to (D), then allocn. x + prices {ye} is a feasible soln. with profit e ueye x (P) need not have an integer optimal solution (P) always has an integer optimal soln.  follows from total-unimodularity</p>
    <p>OPT := max i vixi (P) = min e ueye + i zi (D)</p>
    <p>s.t. i:eSi xi  ue e s.t. eSi ye + zi</p>
    <p>vi i</p>
  </div>
  <div class="page">
    <p>x e ueye could be much smaller than the optimum profit  with unit capacities ue = 1 e, there is an optimal soln. to (D) with zi = 0 for all i  get Profit = OPT</p>
    <p>What about higher capacities?</p>
    <p>OPT := max i vixi (P) = min e ueye + i zi (D)</p>
    <p>s.t. i:eSi xi  ue e s.t. eSi ye + zi</p>
    <p>vi i</p>
    <p>ue= 2 for all e vi = 1 for all i</p>
    <p>(a )</p>
    <p>In every optimal soln. to (D), have e ye  1 since (a) is a winner, so Profit = e ueye  2,</p>
    <p>BUT setting price = 1 for all e yields optimal profit = n  1</p>
  </div>
  <div class="page">
    <p>Idea: lowering capacities can increase profit Above: if we set ue = 1 for all e, then there is an optimal soln. with ye = 1 e  get optimal profit</p>
    <p>Key technical lemma: can always find a capacityvector u'  u s.t. there exists an optimal dual soln. with capacities {u'e} with e u'eye  OPT/O(log umax)</p>
    <p>if we solve (P) and (D) with capacities u' to get allocation and prices, then get soln. with Profit  OPT/O(log umax)</p>
    <p>ue= 2 for all e vi = 1 for all i</p>
    <p>(a )</p>
  </div>
  <div class="page">
    <p>The Algorithm Consider uniform capacities ue = U for simplicity</p>
    <p>(Pk), (Dk): primal, dual LPs with ue = k,</p>
    <p>OPT(k) : common optimal value of (Pk) and (Dk)</p>
    <p>(k)) to (Dk) that maximizes e k ye.</p>
    <p>as allocation.Can be made polytime by considering k = powers of (1+).</p>
  </div>
  <div class="page">
    <p>Analysis OPT(k) := max i vixi (Pk) = min</p>
    <p>e k ye + i zi (Dk)</p>
    <p>s.t. i:eSi xi  k e s.t. eSi ye + zi</p>
    <p>vi i</p>
    <p>Lemma: OPT(.) is a concave fn. OPT(.) is linear b/w k and k' iff common soln. (y, z) that is optimal for both (Dk), (Dk')</p>
    <p>Why? If c = k+(1)k', opt. soln. to (Dc) is feasible for (Dk), (Dk')</p>
    <p>OPT(1 )</p>
    <p>OPT(U )</p>
    <p>U</p>
  </div>
  <div class="page">
    <p>Let bk = break pt. of OPT(.) before k</p>
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>Let bk = break pt. of OPT(.) before k</p>
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>Proof: Let (y, z) be common optimal solution to (Dk), (Dbk).</p>
    <p>RHS = e k ye  e k ye (k).</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)OPT(U) 2.HU</p>
    <p>Theorem: Return Profit P*</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>OPT(U) 2.HU</p>
    <p>Theorem: Return Profit P*</p>
    <p>Proof: We have P*  e k ye (k) k.</p>
    <p>P*(U  bU)/U  OPT(U)  OPT(bU)</p>
    <p>P*(k bk)/k  OPT(k)  OPT(bk)</p>
    <p>P*  OPT(1) [b1 = 0]</p>
    <p>...</p>
    <p>...</p>
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>Suppose first that bk = k-1 k.</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>OPT(U) 2.HU</p>
    <p>Theorem: Return Profit P*</p>
    <p>Proof: We have P*  e k ye (k) k.</p>
    <p>P*/U = P*(U  bU)/U  OPT(U)  OPT(bU)</p>
    <p>P*/k = P*(k bk)/k  OPT(k)  OPT(bk)</p>
    <p>P* = P*  OPT(1) [b1 = 0]</p>
    <p>...</p>
    <p>...</p>
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>Suppose first that bk = k-1 k.</p>
    <p>P*.HU  OPT(U)</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>OPT(U) 2.HU</p>
    <p>Theorem: Return Profit P*</p>
    <p>Proof: We have P*  e k ye (k) k.</p>
    <p>P*(U  bU)/U  OPT(U)  OPT(bU)</p>
    <p>P*/k  [OPT(bk+1)  OPT(k)]/[bk+1  k]</p>
    <p>P*(k bk)/k  OPT(k)  OPT(bk)</p>
    <p>P*  OPT(1)[b1 = 0]</p>
    <p>...</p>
    <p>...</p>
    <p>k+ 1</p>
    <p>bk+ 1</p>
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>May assume that bk [k1,k) k.</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>OPT(U) 2.HU</p>
    <p>Theorem: Return profit P*</p>
    <p>Proof: We have P*  e k ye (k) k.</p>
    <p>P*(U  bU)/U  OPT(U)  OPT(bU)</p>
    <p>P*(bk+1  k)/k  OPT(bk+1)  OPT(k)</p>
    <p>P*(k bk)/k  OPT(k)  OPT(bk)</p>
    <p>P*  OPT(1) [b1 = 0]</p>
    <p>...</p>
    <p>...</p>
    <p>May assume that bk [k1,k) k.</p>
    <p>k+ 1</p>
    <p>bk+ 1</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>Lemma: e k ye (k)  k.</p>
    <p>k  bk</p>
    <p>OPT(k)-OPT(bk)</p>
    <p>OPT(U) 2.HU</p>
    <p>Theorem: Return profit P*</p>
    <p>Proof: We have P*  e k ye (k) k.</p>
    <p>P*/U  P*(U  bU)/U  OPT(U)  OPT(bU)</p>
    <p>P*/k  P*(bk+1  k)/k  OPT(bk+1)  OPT(k)</p>
    <p>P*/k  P*(k bk)/k  OPT(k)  OPT(bk)</p>
    <p>P*  P*(b2  1)  OPT(b2)  OPT(1)</p>
    <p>P*  P*  OPT(1) [b1 = 0]</p>
    <p>...</p>
    <p>...</p>
    <p>May assume that bk [k1,k) k.</p>
    <p>k+ 1</p>
    <p>bk+ 1</p>
    <p>k</p>
    <p>OPT(k)</p>
    <p>bk</p>
    <p>.. .</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>Remark: Can prove that all break pts. bk are integers i.e., dual soln. changes only at integer values of k  can take bk = k-1 k and save factor of 2</p>
    <p>Proof heavily uses total-unimodularity of constraint matrix</p>
    <p>Open Question:</p>
    <p>What does this integer-breakpoint property mean?  Implications about structure of polytope?</p>
    <p>Applications in combinatorial optimization (CO)? How does it relate to other concepts in CO?</p>
    <p>Are there other interesting classes of problems with (approx.) integerbreakpoint property?</p>
  </div>
  <div class="page">
    <p>The general problem (SMEFP)</p>
    <p>Recall complementary slackness: at optimality,  if xi &gt; 0 then eSi ye + zi = vi</p>
    <p>eSi ye  vi  if xi &lt; 1 then zi = 0  eSi</p>
    <p>ye  vi  if ye &gt; 0 then i:eSi xi = ue</p>
    <p>x (P) need not have an integer optimal solution if we have a winner-set W s.t. {i: xi = 1}  W  {i: xi &gt; 0}, and ue  |{ iW: e Si }|  i:eSi xi / for every e,</p>
    <p>then (W, {ye}) is a feasible soln. with Profit  e ueye/</p>
    <p>OPT := max i vixi (P) = min e ueye + i zi (D)</p>
    <p>s.t. i:eSi xi  ue e s.t. eSi ye + zi</p>
    <p>vi i</p>
  </div>
  <div class="page">
    <p>Can use an LP-based -approx. algorithm for SWM-problem to obtain W with desired properties  W  {i: xi = 1}</p>
    <p>decompose (remaining fractional soln.) / into convex combination of integer solns. (CarrVempala, Lavi-S)</p>
    <p>Key technical lemma: can always find a capacityvector u'  u s.t. there exists an optimal dual soln. with capacities {u'e} with e u'eye  OPT/O(log umax)</p>
    <p>if we solve (Du') to get prices, round opt. soln. to (Pu') to get W, then get soln. with Profit  OPT/O(.log umax)</p>
  </div>
  <div class="page">
    <p>How to deal with non-uniform capacities?</p>
    <p>Similar approach: obtain a bound on max. profit achievable with an optimal dual soln. with capacities {u'e}</p>
    <p>Leverage this to get a telescoping-sum argument</p>
    <p>BUT, OPT(.) is now a multivariate function  makes both steps more difficult</p>
    <p>Need to define and analyze breakpoints, slopes of OPT(.) along suitable directions.</p>
  </div>
  <div class="page">
    <p>Algorithm for (general) SMEFP</p>
    <p>polynomial) find optimal soln. (y(k), z (k)) to (Dk)</p>
    <p>that maximizes e keye.</p>
    <p>(c).</p>
    <p>to (Pc) to obtain W.</p>
    <p>(Pk), (Dk): primal, dual LPs with ue = ke e,</p>
    <p>OPT(k) : common optimal value of (Pk) and (Dk)</p>
  </div>
  <div class="page">
    <p>Summary of Results  Give the first approx. algorithms for single-minded envy</p>
    <p>free profit-maximization problems with limited supply  primal LP for SWM-problem can be rounded to get</p>
    <p>allocation; dual LP furnishes envy-free prices  can find capacity-vector u'  u and opt. dual soln. (y, z) for</p>
    <p>(Du') s.t. e u'eye  OPT/O(log umax)  so LP-based -approx. for SWM-problem  O(.log umax)</p>
    <p>approx. for envy-free problem</p>
    <p>Same guarantees when customers desire multiple disjoint multisets, and for non-EF versions of these problems</p>
    <p>Envy-freeness hurts seller by at most O(.log umax)-factor</p>
  </div>
  <div class="page">
    <p>Open Questions  Results for (more) general set-based valuation</p>
    <p>functions, say, given a demand-oracle for each customer. Need a new upper bound  OPTSWM can be &gt;&gt; opt. profit (Blum)</p>
    <p>Improved results for structured SM problems. Constantfactor for tollbooth problem? PTAS for highway problem?</p>
    <p>Better understanding of the integer-breakpoint property.  Implications about structure of polytope?</p>
    <p>Applications in combinatorial optimization (CO)? How does it relate to other concepts in CO?</p>
    <p>Are there other interesting classes of problems with (approx.) integer-breakpoint property?</p>
  </div>
  <div class="page">
    <p>Thank You.</p>
  </div>
</Presentation>
