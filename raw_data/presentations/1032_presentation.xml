<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Execu&amp;on Templates: Caching Control Plane Decisions for Strong Scaling of Data Analy&amp;cs</p>
    <p>Omid Mashayekhi Hang Qu Chinmayee Shah Philip Levis</p>
    <p>July 13, 2017</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Cloud Frameworks</p>
    <p>SQL Streaming Machine Learning</p>
    <p>Graph</p>
    <p>Cloud Framework</p>
    <p>......</p>
    <p>Cloud frameworks abstract away the complexi&amp;es of the cloud infrastructure from the applica&amp;on developers:</p>
  </div>
  <div class="page">
    <p>Cloud Frameworks</p>
    <p>SQL Job</p>
    <p>Control Plane</p>
    <p>......</p>
    <p>Job is an instance of the applica&amp;on running in the framework.  Task is the unit of computa&amp;on for the job.  Control plane par&amp;&amp;ons job in to tasks, schedules task, and recovers from faults.</p>
    <p>Task</p>
  </div>
  <div class="page">
    <p>I/O-bound data analy&amp;cs MapReduce Hadoop</p>
    <p>Task Length</p>
    <p>Evolu&amp;on of Cloud Frameworks</p>
  </div>
  <div class="page">
    <p>I/O-bound data analy&amp;cs</p>
    <p>In-memory data analy&amp;cs</p>
    <p>MapReduce Hadoop</p>
    <p>Task Length</p>
    <p>Spark Naiad</p>
    <p>Evolu&amp;on of Cloud Frameworks</p>
  </div>
  <div class="page">
    <p>I/O-bound data analy&amp;cs</p>
    <p>In-memory data analy&amp;cs</p>
    <p>Op&amp;mized data analy&amp;cs</p>
    <p>MapReduce Hadoop</p>
    <p>Task Length</p>
    <p>Spark Naiad</p>
    <p>Spark 2.0 Common IL</p>
    <p>C++</p>
    <p>Evolu&amp;on of Cloud Frameworks</p>
  </div>
  <div class="page">
    <p>Individual tasks are ge]ng faster.</p>
    <p>But does it necessarily mean that job comple&amp;on &amp;me is ge]ng shorter?</p>
  </div>
  <div class="page">
    <p>Control Plane The New Boaleneck</p>
    <p>Logis&amp;c regression over a data set of size 100GB.  Classic Spark used to be CPU-bound.</p>
  </div>
  <div class="page">
    <p>Control Plane The New Boaleneck</p>
    <p>Logis&amp;c regression over a data set of size 100GB.  Spark 2.0 with Scala implementa&amp;on is already control-bound.</p>
  </div>
  <div class="page">
    <p>Control Plane The New Boaleneck</p>
    <p>Logis&amp;c regression over a data set of size 100GB.  Spark-opt: hypothe&amp;cal case where Spark runs tasks as fast as C++.</p>
  </div>
  <div class="page">
    <p>Control plane is the emerging boaleneck for the cloud compu&amp;ng frameworks.</p>
  </div>
  <div class="page">
    <p>Control Plane Design Scope CHAPTER 1. INTRODUCTION 6</p>
    <p>Control Plane Example Task Throughput Scheduling Cost Design Framework (task per sec) (per task)</p>
    <p>Centralized MapReduce</p>
    <p>1, 000  100sHadoop Spark</p>
    <p>Distributed Naiad  100, 000  100, 000s TensorFlow</p>
    <p>Centralized w/ Nimbus  100, 000  100s</p>
    <p>Execution Templates</p>
    <p>Table 1.1: Current cloud computing frameworks have either a centralized control plane model with fast, dynamic scheduling but limited task throughput, or a distributed control plane model with orders of magnitude higher task throughput but very high scheduling cost. Execution templates (4) introduced by this dissertation enable Nimbus (5) to match the task throughput of a distributed framework, while providing the fast, dynamic scheduling similar to centralized frameworks.</p>
    <p>at a higher rate to keep workers busy. Current frameworks fail to deliver the high</p>
    <p>task throughput required by the applications at scale without sacrificing low latency,</p>
    <p>dynamic scheduling. Table 1.1 summarizes these two design approaches for the control</p>
    <p>plane with example frameworks and their characteristics in terms of task throughput</p>
    <p>and dynamic scheduling cost.</p>
    <p>This dissertation presents a third strategy using an abstraction called execution tem</p>
    <p>plates. Execution templates schedule at the same per-task granularity as centralized</p>
    <p>schedulers do. They do so while imposing the same minimal control overhead as</p>
    <p>distributed execution plans. Execution templates leverage the fact that long-running</p>
    <p>jobs (e.g. machine learning and graph processing) are iterative, running the same</p>
    <p>computation many times [119]. Machine learning algorithms, for example, typically</p>
    <p>iterate until the estimation error drops below a threshold.</p>
    <p>Logically, a framework using execution templates centrally schedules at the task</p>
    <p>Centralized controller adapts to scheduling changes reac&amp;vely with a low cost, but has limited task throughput and boalenecks at scale.</p>
    <p>Distributed controller scales well, but any scheduling change requires stopping all nodes and installing new data flow with high latency.</p>
  </div>
  <div class="page">
    <p>Execu&gt;on Templates is an abstrac&amp;on for the control plane of cloud compu&amp;ng frameworks, that enables orders of magnitude higher task throughput, while</p>
    <p>keeping the fine-grained, flexible scheduling with low cost.</p>
  </div>
  <div class="page">
    <p>Control Plane The New Boaleneck</p>
    <p>Logis&amp;c regression over a data set of size 100GB.  Nimbus with execu&gt;on templates scales almost linearly, with low cost scheduling.</p>
  </div>
  <div class="page">
    <p>Repe&amp;&amp;ve Paaerns</p>
    <p>Advanced data analy&amp;cs are itera&amp;ve in nature.  Machine learning, graph processing, image recogni&amp;on, etc.</p>
    <p>This results in repe&amp;&amp;ve paaerns in the control plane.  Similar tasks execute with minor differences.</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Model</p>
    <p>Controller Driver Program</p>
    <p>Data</p>
    <p>Map</p>
    <p>Reduce D at a fl o w</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Model</p>
    <p>Controller Driver Program</p>
    <p>Data</p>
    <p>Map</p>
    <p>Reduce D at a fl o w</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>C Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Model</p>
    <p>Controller Driver Program</p>
    <p>Data</p>
    <p>Map</p>
    <p>Reduce D at a fl o w</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>C</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Model</p>
    <p>Controller Driver Program</p>
    <p>Data</p>
    <p>Map</p>
    <p>Reduce D at a fl o w</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>Data Exchange C</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Repe&amp;&amp;ve Paaerns</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Repe&amp;&amp;ve Paaerns</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>C</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Repe&amp;&amp;ve Paaerns</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>Ta sk G ra p h</p>
    <p>Data Exchange C</p>
    <p>Task id Data list Dep. list Function Parameter</p>
  </div>
  <div class="page">
    <p>Repe&amp;&amp;ve Paaerns</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>C</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Ta sk G ra p h</p>
  </div>
  <div class="page">
    <p>Repe&amp;&amp;ve Paaerns</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Data Objects Data Objects</p>
    <p>Ta sk G ra p h</p>
    <p>Data Exchange C</p>
    <p>Task id Data list Dep. list Function Parameter</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates</p>
    <p>Tasks are cached as parameterizable blocks on nodes.  Instead of assigning the tasks from scratch, templates are instan&gt;ated by filling in only changing parameters.</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Task id Data list Dep. list Function Parameter</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates</p>
    <p>Tasks are cached as parameterizable blocks on nodes.  Instead of assigning the tasks from scratch, templates are instan&gt;ated by filling in only changing parameters.</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Task id Data list Dep. list Function Parameter</p>
    <p>Load New Task ids</p>
    <p>Parameters T1 P1</p>
    <p>T2 P2</p>
    <p>T3 P3</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Mechanisms Summary</p>
    <p>Instan&gt;a&gt;on: spawn a block of tasks without processing each task individually from scratch. It helps increase the task throughput.</p>
    <p>Edits: modifies the content of each template at the granularity of tasks. It enables fine-grained, dynamic scheduling.</p>
    <p>Patches: In case the state of the worker does not match the precondi&amp;ons of the template. It enables dynamic control flow.</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Instan&amp;a&amp;on</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>C Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Instan&amp;a&amp;on</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Instan&amp;a&amp;on</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Instan&amp;a&amp;on</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
    <p>Instantiate&lt;params&gt; Instantiate&lt;params&gt;</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Instan&amp;a&amp;on</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates</p>
    <p>Caching tasks implies sta&amp;c behavior; how could templates allow dynamic scheduling?</p>
    <p>Reac&amp;ve scheduling changes for load balancing.</p>
    <p>Scheduling changes at the task granularity.</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Edits</p>
    <p>If scheduling changes, even slightly, the templates are obsolete.  For example rescheduling a task from one worker to another.</p>
    <p>Instead of paying the substan&amp;al cost of installing templates for every changes, templates allow edit, to change their structure.</p>
    <p>Edits enable adding or removing tasks from the template and modifying the template content, in-place.</p>
    <p>Controller has the general view of the task graph so it can update the dependencies properly, needed by the edits.</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Edits</p>
    <p>Controller</p>
    <p>Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects</p>
    <p>C Te m p la te</p>
    <p>Worker</p>
    <p>Data Objects</p>
    <p>Te m p la te</p>
    <p>Reschedule one task</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Edits</p>
    <p>Controller</p>
    <p>Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects</p>
    <p>C Te m p la te</p>
    <p>Worker</p>
    <p>Data Objects</p>
    <p>Te m p la te</p>
    <p>Edit&lt;remove &gt; Edit&lt;add &gt;</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Edits</p>
    <p>Controller</p>
    <p>Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Worker</p>
    <p>Data Objects</p>
    <p>Te m p la te</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Edits</p>
    <p>Controller</p>
    <p>Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Worker</p>
    <p>Data Objects</p>
    <p>Te m p la te</p>
    <p>Instantiate&lt;params&gt; Instantiate&lt;params&gt;</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates</p>
    <p>Caching tasks implies sta&amp;c behavior; how could templates allow dynamic control flow?</p>
    <p>Need to support nested loops.</p>
    <p>Need to support data dependent branches.</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Patching</p>
    <p>Execu&amp;on templates operates at the granularity of basic blocks:</p>
    <p>A code block with single entry and no branches except at the end.</p>
    <p>Each template has a set of precondi&gt;ons that need to be sa&amp;sfied.</p>
    <p>For example the set of data objects in memory, accessed by the tasks.</p>
    <p>Worker state might not match the precondi&amp;ons of the template in all circumstances.</p>
    <p>Controller patches the worker state before template instan&amp;a&amp;on, to sa&amp;sfy the precondi&amp;ons.</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Patching</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
    <p>Precondi&amp;ons Precondi&amp;ons</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Patching</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
    <p>Precondi&amp;ons Precondi&amp;ons</p>
    <p>Patch&lt; load &gt;</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Patching</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
    <p>Precondi&amp;ons Precondi&amp;ons</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Patching</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
    <p>Instantiate&lt;params&gt; Instantiate&lt;params&gt;</p>
    <p>Precondi&amp;ons Precondi&amp;ons</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Patching</p>
    <p>Controller</p>
    <p>Worker Worker</p>
    <p>Ta sk G ra p h</p>
    <p>Data Objects Data Objects</p>
    <p>C C T em</p>
    <p>p la te</p>
    <p>Te m p la te</p>
    <p>Precondi&amp;ons Precondi&amp;ons</p>
  </div>
  <div class="page">
    <p>Execu&amp;on Templates Mechanisms Summary</p>
    <p>Instan&gt;a&gt;on: spawn a block of tasks without processing each task individually from scratch. It helps increase the task throughput.</p>
    <p>Edits: modifies the content of each template at the granularity of tasks. It enables fine-grained, dynamic scheduling.</p>
    <p>Patches: In case the state of the worker does not match the precondi&amp;ons of the template. It enables dynamic control flow.</p>
  </div>
  <div class="page">
    <p>Nimbus  Nimbus is designed for low latency, fast computa&amp;ons in the cloud.</p>
    <p>Nimbus embeds execu&amp;on templates for its control plane.</p>
    <p>Nimbus supports tradi&amp;onal data analy&amp;cs as well as Eulerian and hybrid graphical simula&amp;ons; for the first &amp;me in a cloud framework.</p>
    <p>Supervised/unsupervised learning algorithms.</p>
    <p>Graph processing.</p>
    <p>Physical simula&amp;on: water, smoke, etc. (PhysBAM library)</p>
  </div>
  <div class="page">
    <p>nimbus.stanford.edu</p>
    <p>haps://github.com/omidm/nimbus</p>
  </div>
  <div class="page">
    <p>Evalua&amp;on Strong Scalability with Templates</p>
    <p>Logis&amp;c regression over data set of size 100GB.  Spark-opt and Naiad-opt, runs tasks as fast as C++ implementa&amp;on.  Nimbus centralized controller with execu&amp;on templates matches the performance of Naiad with a distributed control plane.</p>
  </div>
  <div class="page">
    <p>Evalua&amp;on Reac&amp;ve, Fine-Grained Scheduling with Templates</p>
    <p>Logis&amp;c regression over data set of size 100GB, on 100 workers.  Naiad-opt curve is simulated (migra&amp;ons every 5 itera&amp;ons).  Execu&amp;on templates allow low cost, reac&amp;ve scheduling changes.</p>
    <p>Single edit overhead is only 41s (in average).</p>
    <p>Rescheduling 5% of the tasks</p>
  </div>
  <div class="page">
    <p>Evalua&amp;on High Task Throughput with Templates</p>
    <p>Spark and Nimbus both have centralized controller.  Nimbus task throughput scales super linearly with more workers.</p>
    <p>O(N2): more tasks and shorter tasks, simultaneously.  For a task graphs with single stage:</p>
    <p>Instan&amp;a&amp;on cost is &lt;2s per task (500,000 tasks per second).</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h S</p>
    <p>u W</p>
    <p>(7 h</p>
    <p>o u</p>
    <p>s a n</p>
    <p>d s S</p>
    <p>e r</p>
    <p>s e c o n</p>
    <p>d )</p>
  </div>
  <div class="page">
    <p>To show the generality of execu&amp;on templates, we considered graphical simula&amp;ons in Nimbus:</p>
    <p>Complex, and memory intensive from PhysBAM library.</p>
    <p>High tasks throughput requirements (400,000 tasks per second).</p>
    <p>Nested loops and data dependent branches.</p>
    <p>Require patching in very subtle cases.</p>
    <p>Tradi&amp;onally in the HPC domain.</p>
    <p>Evalua&amp;on Graphical Simula&amp;ons Distributed in Nimbus</p>
  </div>
  <div class="page">
    <p>Evalua&amp;on Graphical Simula&amp;ons Distributed in Nimbus</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>CHAPTER 1. INTRODUCTION 6</p>
    <p>Control Plane Example Task Throughput Scheduling Cost Design Framework (task per sec) (per task)</p>
    <p>Centralized MapReduce</p>
    <p>1, 000  100sHadoop Spark</p>
    <p>Distributed Naiad  100, 000  100, 000s TensorFlow</p>
    <p>Centralized w/ Nimbus  100, 000  100s</p>
    <p>Execution Templates</p>
    <p>Table 1.1: Current cloud computing frameworks have either a centralized control plane model with fast, dynamic scheduling but limited task throughput, or a distributed control plane model with orders of magnitude higher task throughput but very high scheduling cost. Execution templates (4) introduced by this dissertation enable Nimbus (5) to match the task throughput of a distributed framework, while providing the fast, dynamic scheduling similar to centralized frameworks.</p>
    <p>at a higher rate to keep workers busy. Current frameworks fail to deliver the high</p>
    <p>task throughput required by the applications at scale without sacrificing low latency,</p>
    <p>dynamic scheduling. Table 1.1 summarizes these two design approaches for the control</p>
    <p>plane with example frameworks and their characteristics in terms of task throughput</p>
    <p>and dynamic scheduling cost.</p>
    <p>This dissertation presents a third strategy using an abstraction called execution tem</p>
    <p>plates. Execution templates schedule at the same per-task granularity as centralized</p>
    <p>schedulers do. They do so while imposing the same minimal control overhead as</p>
    <p>distributed execution plans. Execution templates leverage the fact that long-running</p>
    <p>jobs (e.g. machine learning and graph processing) are iterative, running the same</p>
    <p>computation many times [119]. Machine learning algorithms, for example, typically</p>
    <p>iterate until the estimation error drops below a threshold.</p>
    <p>Logically, a framework using execution templates centrally schedules at the task</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>nimbus.stanford.edu</p>
    <p>haps://github.com/omidm/nimbus</p>
  </div>
</Presentation>
