<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Michael Rosenstein michael.rosenstein@securedecisions.com 631.759.3910</p>
    <p>avi.com securedecisions.com</p>
    <p>A Secure Architecture for the Range-Level Command and Control System of a National</p>
    <p>Cyber Range Testbed</p>
    <p>Michael Rosenstein / Frank Corvese</p>
  </div>
  <div class="page">
    <p>What is the National Cyber Range (NCR)?</p>
    <p>DARPA program to develop a secure, self contained</p>
    <p>cyber testing and experimentation range[1]</p>
    <p>Among its goals:</p>
    <p>Support rapid and automated reconfiguration of resources</p>
    <p>Provide broad scalability</p>
    <p>Allow for simultaneous experiments running at different</p>
    <p>security levels</p>
    <p>[1] DARPA. National Cyber Range. DARPA - STO. www.darpa.mil/Our_Work/STO/Programs/National_Cyber_Range_(NCR).aspx</p>
  </div>
  <div class="page">
    <p>Range-Level Command &amp; Control System (RangeC2)</p>
    <p>Three primary functions of RangeC2 in the NCR:</p>
    <p>Management of all range resources (resources are bound sets of physical nodes and their interconnectivity)</p>
    <p>Management of numerous concurrent experiments</p>
    <p>Enforcement of each experiments isolation</p>
    <p>Built by Secure Decisions as part of the Johns Hopkins</p>
    <p>University - Applied Physics Laboratorys (JHU/APL)</p>
    <p>Phase 2 NCR program</p>
    <p>Developed between January 2010 and April 2011</p>
  </div>
  <div class="page">
    <p>Operational services provided by the RangeC2</p>
    <p>Inventory management</p>
    <p>Bringing resources into service or moving them offline</p>
    <p>Experiment administration</p>
    <p>Scheduling and resource requirements import</p>
    <p>Experiment container management [containers are logical groupings of resources that an experiment runs in]</p>
    <p>Creation, inter-resource topology reconfiguration, assignment swapping, incremental resource recovery, and destruction</p>
    <p>Range monitoring</p>
    <p>Resource state (available, assigned, or resetting)</p>
    <p>Container state (building, running, destroying, or failed)</p>
  </div>
  <div class="page">
    <p>Architectural considerations [1/3]</p>
    <p>Design goals</p>
    <p>Container isolation had to be inherent throughout the design</p>
    <p>Application should be highly available and survive hard</p>
    <p>failures without any risk to container isolation or security</p>
    <p>Application should easily support certification &amp; accreditation</p>
    <p>Management of range state [resource interconnectivity, assignment, and power; container and resource state]</p>
    <p>Basis for all decisions made by the RangeC2</p>
    <p>Knowledge of range configuration required at all times, even</p>
    <p>during state transitions or after failures</p>
  </div>
  <div class="page">
    <p>Architectural considerations [2/3]</p>
    <p>Separation into four (4) subcomponents</p>
    <p>RangeC2 Client</p>
    <p>Range Controller</p>
    <p>Transaction System</p>
    <p>Action Processor</p>
    <p>Division of responsibility</p>
    <p>Subcomponents managing operations differ from those</p>
    <p>handling state changes and ensuring container isolation</p>
    <p>No single subcomponent could initiate, plan, and execute a</p>
    <p>state change on its own</p>
    <p>Most subcomponents are self-contained, preventing errors or</p>
    <p>security breaches in one from cascading to others</p>
    <p>Switch Controller</p>
    <p>Level of isolation (and physical security) increases</p>
    <p>with the criticality of the subcomponent</p>
  </div>
  <div class="page">
    <p>Architectural considerations [3/3]</p>
    <p>Overall data flow:</p>
    <p>Tasks Arrive (from the RangeC2 Client or an experiment) [Tasks are logical functions of the Range C2]</p>
    <p>Operationally Processed (Range Controller)</p>
    <p>- and if they required changes to the ranges state</p>
    <p>Verified &amp; Planned (Transaction System)</p>
    <p>Verified &amp; Executed (Action Processor)</p>
    <p>The planning and execution mechanisms follow the</p>
    <p>Action-Transaction processing model designed</p>
    <p>specifically for the needs of this system to:</p>
    <p>Maintain integrity of range state at all times</p>
    <p>Easily support code-level analysis and C&amp;A</p>
  </div>
  <div class="page">
    <p>Questions for you:</p>
    <p>Has anyone here designed a cyber-range capable of</p>
    <p>simultaneous experiments at different security levels?</p>
    <p>How was physical separation achieved, enforced?</p>
    <p>Which would you like to know more about:</p>
    <p>How the range operated and where the RangeC2 fit into</p>
    <p>that operational model?</p>
    <p>Threats the RangeC2 faced?</p>
    <p>How are they mitigated?</p>
    <p>The Action-Transaction processing model?</p>
    <p>How does it maintain range state during hard failures, transition?</p>
    <p>How does it provide ease of code review and support C&amp;A?</p>
    <p>Im done, now its your turn</p>
  </div>
  <div class="page">
    <p>Additional Information</p>
  </div>
  <div class="page">
    <p>RangeC2 Context Communication and physical security</p>
    <p>The RangeC2 was designed to be located behind several layers of</p>
    <p>physical security.</p>
    <p>It communicated with other components over an air-gap or</p>
    <p>private network and entities within a container through cross</p>
    <p>domain guards (CDG)</p>
  </div>
  <div class="page">
    <p>RangeC2 Context Ranges state under normal operations</p>
    <p>Experiments operated within containers (gray areas) that</p>
    <p>contained assigned resources; the RangeC2 used a Layer-1 Switch</p>
    <p>to configure physical connectivity between them (dotted lines)</p>
    <p>PDU = Power Distribution Unit; ExpC2 = ExperimentC2; SanC2 = SanitizationC2; Res. = Resource</p>
  </div>
  <div class="page">
    <p>RangeC2 Architecture Four subcomponents</p>
    <p>The Range Controller made decisions affecting how the range</p>
    <p>behaved at an operational level</p>
    <p>The Switch Controller affected change upon the ranges state; its</p>
    <p>primary concern was container isolation  all else was secondary</p>
  </div>
  <div class="page">
    <p>RangeC2 Architecture Range Controller</p>
    <p>The Range Controller was an event driven system that received</p>
    <p>external stimuli and processed them according to defined rules</p>
    <p>If the stimulus was a request that required a change to the</p>
    <p>ranges state, it was routed to the Switch Controller</p>
  </div>
  <div class="page">
    <p>Transactions were hardcoded templates for performing a task</p>
    <p>When a task was requested, information was combined with a</p>
    <p>template to generate the list of ordered steps, or actions,</p>
    <p>needed to complete the task</p>
    <p>This list of actions included all necessary security and container</p>
    <p>isolation checks as well as those needed to perform the task</p>
    <p>RangeC2 Architecture Switch Controller: Action - Transaction model</p>
  </div>
  <div class="page">
    <p>Actions were the atomic units of work the system could perform;</p>
    <p>each action was completely independent of all others</p>
    <p>To complete a task, all actions in a transaction were processed,</p>
    <p>serially, in order, according to the state diagram below, and with</p>
    <p>potential exclusivity to other transactions</p>
    <p>Advantages: Compartmentalized code - Easy to review</p>
    <p>Inherent progress, logging, and forensics</p>
    <p>RangeC2 Architecture Switch Controller: Action - Transaction model</p>
  </div>
  <div class="page">
    <p>RangeC2 Architecture Switch Controller  Transaction System</p>
    <p>The Transaction System managed the lifecycle of all transactions,</p>
    <p>including receiving requests, building transactions, and</p>
    <p>processing the results</p>
    <p>By design, requests could only be made at the task level; this</p>
    <p>prevented activities from occurring that might usurp security</p>
  </div>
  <div class="page">
    <p>RangeC2 Architecture Switch Controller  Action Processor</p>
    <p>The Action Processors single purpose was to execute the actions</p>
    <p>contained within transactions</p>
    <p>This was the only subcomponent capable of altering the ranges</p>
    <p>state (assignment, layer-1 connectivity, power, etc.)</p>
  </div>
  <div class="page">
    <p>Backup slides - Threats</p>
  </div>
  <div class="page">
    <p>Discussion of Threats</p>
    <p>The RangeC2 did not manage experiments and had very little</p>
    <p>interaction with containers</p>
    <p>The RangeC2 was not generally susceptible to attacks or malicious</p>
    <p>activities carried out by the subjects of experimentation</p>
    <p>The ExperimentC2 was susceptible to these activities, so it was designed</p>
    <p>to be wholly encapsulated within a container</p>
    <p>When containers were destroyed, their ExperimentC2s were as well</p>
    <p>Each new container received a new ExperimentC2</p>
  </div>
  <div class="page">
    <p>Discussion of Threats</p>
    <p>The RangeC2 managed physical resources, including their</p>
    <p>interconnectivity</p>
    <p>Insider threats - range staff attempting to alter system functionality</p>
    <p>Mitigations:</p>
    <p>Highly restrictive physical and digital access to the Switch Controller</p>
    <p>Staff with sufficient access could have caused a data leak!</p>
    <p>Cross-container checks would spot this issue, but staff with access to</p>
    <p>alter these systems could also alter the logs</p>
    <p>Malicious container activity  containers were assumed to be</p>
    <p>compromised &amp; might send malicious commands to the RangeC2</p>
    <p>Mitigations:</p>
    <p>Cross domain guards only allowed very specific requests to proceed</p>
    <p>Range Controller acted as a buffer between the Switch Controller and</p>
    <p>the other range components</p>
    <p>Switch Controller had a limited API and hardcoded security checks</p>
  </div>
  <div class="page">
    <p>Discussion of Threats</p>
    <p>Supply chain  malicious or error-prone vendors causing hardware to fail in</p>
    <p>unpredictable ways and with little or no reporting</p>
    <p>Mitigations:</p>
    <p>Use of only trusted vendors</p>
    <p>Working with vendors to develop system unit testing capabilities</p>
    <p>Extensive testing of new hardware and firmware prior to deployment</p>
    <p>Denial of Service  compromised containers flooding the RangeC2 with</p>
    <p>valid or invalid requests</p>
    <p>Mitigations:</p>
    <p>CDGs, one per container, would filter out nonsensical requests</p>
    <p>Transaction System would fail to build transactions based on valid</p>
    <p>requests with invalid parameters (incl. those that would violate security)</p>
    <p>Containers requesting large numbers of valid requests could starve the system</p>
    <p>Action Processor could prioritize transactions from quiet containers</p>
    <p>Range Controller could refuse task requests beyond a certain point</p>
  </div>
</Presentation>
