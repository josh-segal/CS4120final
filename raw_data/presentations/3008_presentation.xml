<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The SNOW Theorem ! and Latency-Optimal !</p>
    <p>Read-Only Transactions! Haonan Lu, !</p>
    <p>Christopher Hodsdon, Khiem Ngo, ! Shuai Mu, Wyatt Lloyd !</p>
    <p>! University of Southern California, New York University!</p>
  </div>
  <div class="page">
    <p>Huge Web Services Shard Data!</p>
    <p>Massive amount of data!</p>
    <p>! must be distributed across servers!</p>
    <p>Reads dominate the workloads !  need to be as fast as possible!!</p>
  </div>
  <div class="page">
    <p>Simple Reads Are Insufficient!</p>
    <p>Storage Tier!Web! Load! Page!</p>
    <p>ACL=public!</p>
    <p>Photo=A!</p>
    <p>Read !</p>
    <p>Public!</p>
    <p>Clients! Servers!</p>
    <p>Datacenter!</p>
  </div>
  <div class="page">
    <p>Simple Reads Are Insufficient!</p>
    <p>Storage Tier!Web! Load! Page!</p>
    <p>Photo=A!</p>
    <p>Read !</p>
    <p>Public!</p>
    <p>Private! Photo B!</p>
    <p>Set ! Private!</p>
    <p>Done!</p>
    <p>Clients! Servers!</p>
    <p>ACL=private!</p>
    <p>Datacenter!</p>
  </div>
  <div class="page">
    <p>Simple Reads Are Insufficient!</p>
    <p>Storage Tier!Web! Load! Page! Read !</p>
    <p>Public!</p>
    <p>Private! Photo B!</p>
    <p>Set ! Private!</p>
    <p>Photo B!</p>
    <p>Done!</p>
    <p>Done! Done!</p>
    <p>Clients! Servers!</p>
    <p>ACL=private!</p>
    <p>Photo=B!</p>
    <p>Datacenter!</p>
  </div>
  <div class="page">
    <p>Simple Reads Are Insufficient!</p>
    <p>Storage Tier!Web! Load! Page! Read !</p>
    <p>Read!</p>
    <p>Public!</p>
    <p>Photo B!</p>
    <p>Photo B!</p>
    <p>Private! Photo B!</p>
    <p>Done!</p>
    <p>Clients! Servers!</p>
    <p>ACL=private!</p>
    <p>Photo=B!</p>
    <p>Datacenter!</p>
  </div>
  <div class="page">
    <p>Simple Reads Are Insufficient!</p>
    <p>Storage Tier!Web! Load! Page! Read !</p>
    <p>Read!</p>
    <p>Public!</p>
    <p>Photo B!</p>
    <p>Photo B!</p>
    <p>Private! Photo B!</p>
    <p>Done!</p>
    <p>Not Acceptable!!</p>
    <p>Clients! Servers!</p>
    <p>ACL=private!</p>
    <p>Photo=B!</p>
    <p>Datacenter!</p>
  </div>
  <div class="page">
    <p>Read-Only Transactions !  Transactions that do not modify data! !  Consistently read data across servers!</p>
  </div>
  <div class="page">
    <p>The Power of Read-Only Txn!  Consistency restricts what can be read!  Eliminates unacceptable combinations! !</p>
    <p>Compatibility enables write transactions!  Write transactions atomically update data!</p>
    <p>Higher power ! more useful!  Stronger consistency ! higher power!  Compatibility ! higher power!</p>
    <p>! 9!</p>
  </div>
  <div class="page">
    <p>Intuitive Tension!</p>
    <p>High Power! Low Latency!</p>
    <p>Reduces anomalies (the ACL  Photo example)!</p>
    <p>Better user experience!</p>
    <p>Our study proves:! highest power + lowest latency is</p>
    <p>impossible!</p>
    <p>Easier to reason about!  Higher revenue!</p>
  </div>
  <div class="page">
    <p>Intuitive Tension!</p>
    <p>High Power! Low Latency!</p>
    <p>Reduces anomalies (the ACL  Photo example)!</p>
    <p>Better user experience!</p>
    <p>Our study proves:! highest power + lowest latency is</p>
    <p>impossible!</p>
    <p>Easier to reason about!  Higher revenue!</p>
  </div>
  <div class="page">
    <p>Intuitive Tension!</p>
    <p>High Power! Low Latency!</p>
    <p>Reduces anomalies (the ACL  Photo example)!</p>
    <p>Better user experience!</p>
    <p>Our study proves:! highest power + lowest latency is</p>
    <p>impossible!</p>
    <p>Easier to reason about!  Higher revenue!</p>
    <p>Fundamental Tradeoff!</p>
  </div>
  <div class="page">
    <p>The SNOW Properties !</p>
    <p>[S]trict serializability! ! [N]on-blocking operations!</p>
    <p>[O]ne response per read! ! [W]rite transactions that conflict! !</p>
  </div>
  <div class="page">
    <p>The SNOW Properties !</p>
    <p>[S]trict serializability! ! [W]rite transactions that conflict!</p>
    <p>[O]ne response per read! ! [N]on-blocking operations! !</p>
    <p>Highest ! Power!</p>
    <p>Lowest! Latency!</p>
  </div>
  <div class="page">
    <p>[S]trict Serializability!  Strongest model: real-time + total order! !</p>
    <p>CR! !</p>
    <p>SACL! !</p>
    <p>SPhoto! !</p>
    <p>CW! !</p>
  </div>
  <div class="page">
    <p>[S]trict Serializability!  Strongest model: real-time + total order! !</p>
    <p>CR! !</p>
    <p>SACL! !</p>
    <p>SPhoto! !</p>
    <p>CW! !</p>
    <p>ACL := Private! Upload Photo B!</p>
    <p>W starts!</p>
    <p>W finishes!</p>
    <p>Private</p>
    <p>Photo B</p>
  </div>
  <div class="page">
    <p>[S]trict Serializability!  Strongest model: real-time + total order! !</p>
    <p>CR! !</p>
    <p>SACL! !</p>
    <p>SPhoto! !</p>
    <p>CW! !</p>
    <p>ACL := Private! Upload Photo B!</p>
    <p>W starts!</p>
    <p>W finishes!</p>
    <p>Private</p>
    <p>Photo B</p>
    <p>R starts!</p>
    <p>R finishes!</p>
  </div>
  <div class="page">
    <p>[S]trict Serializability!  Strongest model: real-time + total order! !</p>
    <p>CR! !</p>
    <p>SACL! !</p>
    <p>SPhoto! !</p>
    <p>CW! !</p>
    <p>ACL := Private! Upload Photo B!</p>
    <p>W starts!</p>
    <p>W finishes!</p>
    <p>Private</p>
    <p>Photo B</p>
    <p>R starts!</p>
    <p>R finishes!</p>
    <p>Photo B is private!!</p>
  </div>
  <div class="page">
    <p>[S]trict Serializability!  Strongest model: real-time + total order! ! !</p>
    <p>CR! !</p>
    <p>SACL! !</p>
    <p>SPhoto! !</p>
    <p>CW! !</p>
    <p>ACL := Private! Upload Photo B!</p>
    <p>W starts!</p>
    <p>W finishes!</p>
    <p>Private</p>
    <p>Photo B R starts!</p>
    <p>R finishes!</p>
  </div>
  <div class="page">
    <p>[S]trict Serializability!  Strongest model: real-time + total order! ! !</p>
    <p>CR! !</p>
    <p>SACL! !</p>
    <p>SPhoto! !</p>
    <p>CW! !</p>
    <p>ACL := Private! Upload Photo B!</p>
    <p>W starts!</p>
    <p>W finishes!</p>
    <p>Private</p>
    <p>Photo B R starts!</p>
    <p>R finishes!</p>
    <p>Public + Photo A ! Photo B is private!!</p>
    <p>! Public + Photo B !</p>
    <p>Photo A is private!! !</p>
  </div>
  <div class="page">
    <p>[N]on-blocking Operations!  Do not wait on external events!  Locks, timeouts, messages, etc.!</p>
    <p>Lower latency!  Save the time spent blocking!</p>
  </div>
  <div class="page">
    <p>[O]ne Response!  One round-trip!  No message redirection!</p>
    <p>Centralized components: coordinator, etc.!  No retries!  Save the time for extra round-trips!</p>
    <p>One value per response!  Less time for transmitting, marshaling, etc.!</p>
  </div>
  <div class="page">
    <p>[W]rite Transactions That Conflict!  Compatible with write transactions !  Richer system model!  Easier to program!</p>
  </div>
  <div class="page">
    <p>The SNOW Theorem: ! !</p>
    <p>Impossible for read-only transaction ! algorithms to have all SNOW properties !</p>
  </div>
  <div class="page">
    <p>Why SNOW Is Impossible!</p>
    <p>CW!SA! SB!CR!</p>
  </div>
  <div class="page">
    <p>Why SNOW Is Impossible!</p>
    <p>CW!SA! SB!CR!</p>
    <p>W! visible!</p>
    <p>RA = new! RB = old! W finishes!</p>
    <p>W! invisible!</p>
    <p>W starts ! A := new! B := new! !</p>
    <p>R!</p>
    <p>T!</p>
    <p>Assume ! SNOW! !</p>
  </div>
  <div class="page">
    <p>Why SNOW Is Impossible!</p>
    <p>CW!SA! SB!CR!</p>
    <p>W! visible!</p>
    <p>RA = new! RB = old! W finishes!</p>
    <p>W! invisible!</p>
    <p>W starts ! A := new! B := new! !</p>
    <p>R!</p>
    <p>T!</p>
    <p>Assume ! SNOW! !</p>
    <p>Violates! property S</p>
  </div>
  <div class="page">
    <p>A Deeper Look at SNOW!  Complete proof in the paper! !  SNOW is tight!  Any combination of 3 properties is possible!</p>
    <p>!  Optimality!  SNOW-optimal: have any 3 properties!  Latency-optimal: have property N and O! !</p>
    <p>Spectrums of property S and O!  Show what is possible to achieve! !</p>
    <p>! !</p>
  </div>
  <div class="page">
    <p>Study Existing Systems with SNOW! SNOW-optimal and latency-optimal!</p>
    <p>System! S! N! O! W! Spanner-Snap!</p>
    <p>[OSDI12]! ! ! ! !</p>
    <p>Yesquel! [SOSP15]!</p>
    <p>! ! ! !</p>
    <p>MySQL Cluster! ! ! ! !</p>
    <p>Spanner-Snap! [OSDI 12]!</p>
    <p>Yesquel! [SOSP 15]!</p>
    <p>MySQL Cluster!</p>
    <p>!!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Study Existing Systems with SNOW! SNOW-optimal!</p>
    <p>System! S! N! O! W! Eiger [NSDI 13]! ! !  3! ! DrTM [SOSP 15]! ! !  1! ! RIFL [SOSP 15]! ! !  2! !</p>
    <p>Sinfonia [SOSP 07]! ! !  2! ! Spanner-RO</p>
    <p>[OSDI 12]! ! ! ! !! ! !!</p>
  </div>
  <div class="page">
    <p>Study Existing Systems with SNOW! Candidates for Improvement!</p>
    <p>System! S! N! O! W! COPS! ! !  2! !</p>
    <p>Rococo! ! ! &gt; 1! ! !</p>
    <p>Many more!</p>
  </div>
  <div class="page">
    <p>Improve Existing Systems! with the SNOW Theorem!</p>
    <p>COPS [SOSP 11]!  Geo-replicated!  Causally consistent!  Read-only txn! !</p>
    <p>Rococo [OSDI 14]!  Supports general transactions!  Strictly serializable!  Read-only txn!</p>
    <p>! !</p>
    <p>: S N O W!</p>
    <p>: S N O W!</p>
  </div>
  <div class="page">
    <p>New Algorithm Designs!  COPS-SNOW!  Latency-optimal (N + O)! !</p>
    <p>Rococo-SNOW!  SNOW-optimal (S + O + W) !</p>
    <p>! !</p>
    <p>Design insight for optimizing reads: ! shift the overhead to writes!</p>
  </div>
  <div class="page">
    <p>Rococos Read-Only Txn (S + W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! !</p>
  </div>
  <div class="page">
    <p>Rococos Read-Only Txn (S + W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>Gather ! conflict info!</p>
    <p>Blocks!</p>
    <p>R: 1st round!</p>
    <p>R: 2nd round!</p>
    <p>EQUAL ?! A=old!</p>
    <p>B=new!</p>
    <p>R: Nth round!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>R!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>A=old!</p>
    <p>R!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>A=old!</p>
    <p>TS!R!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>A=old!</p>
    <p>TS!</p>
    <p>TS!</p>
    <p>R!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>Forward TS!A=old!</p>
    <p>TS!R!</p>
    <p>TS!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>Forward TS!A=old!</p>
    <p>TS!</p>
    <p>TS!</p>
    <p>R!</p>
    <p>TS!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>Forward TS!A=old!</p>
    <p>TS!</p>
    <p>TS!</p>
    <p>R!</p>
    <p>TS!</p>
    <p>Blocks!</p>
    <p>B=old!</p>
  </div>
  <div class="page">
    <p>Rococo-SNOW (S+O+W)!</p>
    <p>CR! !</p>
    <p>SA! !</p>
    <p>SB! !</p>
    <p>CW! ! W starts!</p>
    <p>A := new! B := new!</p>
    <p>W commits!</p>
    <p>W finishes!</p>
    <p>Forward TS!</p>
    <p>Blocks!</p>
    <p>A=old!</p>
    <p>B=old!</p>
    <p>TS!</p>
    <p>TS!</p>
    <p>TS!</p>
    <p>R!</p>
    <p>A=old! B=old!</p>
    <p>Strictly Serializable!</p>
  </div>
  <div class="page">
    <p>Evaluation of Rococo-SNOW!  To understand!  Latency of read-only transactions!  Throughput of other types of transactions! !</p>
    <p>Experiment configuration!  Identical to Rococos!  TPC-C workloads! !</p>
    <p>https://github.com/USC-NSL/Rococo-SNOW! ! ! !</p>
  </div>
  <div class="page">
    <p>Significantly Lower Latency! for Read-Only Txn!</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s) !</p>
    <p>Concurrent requests/server!</p>
    <p>OCC!</p>
    <p>Rococo!</p>
  </div>
  <div class="page">
    <p>Significantly Lower Latency! for Read-Only Txn!</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s) !</p>
    <p>Concurrent requests/server!</p>
    <p>Retries!</p>
    <p>Lock Wait!</p>
    <p>Always 1 round!</p>
    <p>OCC!</p>
    <p>Rococo!</p>
  </div>
  <div class="page">
    <p>Higher Throughput! under High Contention!</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (n</p>
    <p>ew -o</p>
    <p>rd er</p>
    <p>/s )!</p>
    <p>Concurrent requests/server!</p>
    <p>OCC!</p>
    <p>Rococo!</p>
    <p>Rococo! -SNOW!</p>
  </div>
  <div class="page">
    <p>Higher Throughput! under High Contention!</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (n</p>
    <p>ew -o</p>
    <p>rd er</p>
    <p>/s )!</p>
    <p>Concurrent requests/server!</p>
    <p>-14% throughput! (Low Contention)!</p>
    <p>OCC!</p>
    <p>Rococo!</p>
    <p>Rococo! -SNOW!</p>
  </div>
  <div class="page">
    <p>Conclusion!</p>
    <p>The SNOW Theorem for read-only txns!  Impossible to have all of the SNOW properties!</p>
    <p>SNOW helps understand existing systems!  Many are not yet optimal! !</p>
    <p>Rococo-SNOW!  SNOW Theorem guided SNOW-optimal design!  Significantly higher throughput and lower</p>
    <p>latency under high contention ! !</p>
    <p>!</p>
  </div>
</Presentation>
