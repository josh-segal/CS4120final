<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Takeshi Yoshimura, Hiroshi Yamada*, Kenji Kono* Keio University *JST/CREST</p>
    <p>October 7 2012</p>
    <p>Is Linux Kernel Oops Useful Or Not?</p>
  </div>
  <div class="page">
    <p>OSes need to be highly available</p>
    <p>Necessary for all apps to continue running</p>
    <p>A kernel crash can lead to the outage of the entire apps</p>
    <p>Kernel crashes are difficult to be zero</p>
    <p>Bugs inside Linux still exist [Palix et al. ASPLOS 11]</p>
    <p>Bugs are not always fixed soon</p>
    <p>OS Kernel Crash</p>
    <p>Application</p>
    <p>OS Kernel</p>
    <p>Application Application</p>
    <p>CRASH</p>
  </div>
  <div class="page">
    <p>A Linux behavior to handle detected bugs</p>
    <p>e.g., in-kernel NULL deref</p>
    <p>Linux kills a faulty contexts proc in kernel oops</p>
    <p>Linux attempts to avoid kernel crashes, called panic</p>
    <p>Linux continues to run on a compromised reliability</p>
    <p>What Is Kernel Oops?</p>
    <p>Proc C</p>
    <p>OS Kernel</p>
    <p>Proc A context Proc B context Proc C context</p>
    <p>Shared kernel objects</p>
    <p>Proc B Proc A</p>
    <p>Oops</p>
    <p>ERROR</p>
    <p>NO ERROR</p>
  </div>
  <div class="page">
    <p>Linux can remain reliable after kernel oops if errors are confined in a kernel context</p>
    <p>Shared kernel objects remain correct</p>
    <p>Non-faulty procs can continue running correctly</p>
    <p>Without rebooting or any complex mechanisms</p>
    <p>Why Can Kernel Oops Be Useful?</p>
    <p>Proc C</p>
    <p>OS Kernel</p>
    <p>Proc A context Proc B context Proc C context</p>
    <p>Shared kernel objects</p>
    <p>Proc B Proc A</p>
    <p>Oops</p>
    <p>ERROR</p>
    <p>NO ERROR</p>
  </div>
  <div class="page">
    <p>Error Propagation Scope  Process-local error</p>
    <p>Propagates only within the kernel context of a proc</p>
    <p>e.g., kernel stack, function-local data</p>
    <p>Errors can be removed by killing a faulty proc</p>
    <p>Kernel-global error</p>
    <p>Propagates to data shared among kernel contexts</p>
    <p>e.g., kernel states, global data, heap data</p>
    <p>OS Kernel</p>
    <p>Shared Kernel objs</p>
    <p>Kernel-global error propagation</p>
    <p>OS Kernel</p>
    <p>Proc context Proc context</p>
    <p>Proc context Proc context</p>
    <p>Shared Kernel objs</p>
    <p>Process-local error propagation</p>
    <p>ERROR</p>
    <p>NO ERROR</p>
    <p>Proc context Proc context</p>
    <p>Proc context Proc context propagate</p>
  </div>
  <div class="page">
    <p>G-1: Analyze Linux behavior to faults  How freqently does Linux invoke oops/panic?</p>
    <p>G-2: Analyze error propagation scope in oops  Are kernel states corrupted after fault activation?</p>
    <p>G-3: Estimate the Linux reliability after kernel oops  How freqently can Linux avoid panic correctly?</p>
    <p>Explore the possibility of using kernel oops as an error recovery method</p>
    <p>Goal in This Work</p>
  </div>
  <div class="page">
    <p>Linux 2.6.38 kernel on VMware Workstation 8  1 CPU, 1GB memory, 20GB Disk</p>
    <p>A fault injector used by existing work  [Ng et al. 98],[Swift et al. 03], [Depoutovitch et al. 10]</p>
    <p>Obtained from Nooks Research web site  http://nooks.cs.washington.edu/</p>
    <p>KDB, a kernel debugger  To trace error propagation</p>
    <p>Six benchmarks as workloads  UnixBench on {ext4, fat, USB}, Netperf, Aplay and</p>
    <p>restarting all the daemon</p>
    <p>Experimental Equipment</p>
  </div>
  <div class="page">
    <p>The Fault Injector  Emulates 15 fault types</p>
    <p>Mutates random instr in the running kernel text</p>
    <p>Extended to imitate some reported bugs in [Palix et al. ASPLOS 11]</p>
    <p>e.g., deleting NULL check</p>
    <p>Fault type before after</p>
    <p>init int x = 1; int x;</p>
    <p>irq arch_local_irq_restore() deleted.</p>
    <p>off by one while (x &lt; 10) while (x &lt;= 10)</p>
    <p>bcopy memcpy(ptr, ptr2, 256); memcpy(ptr, ptr2, 512);</p>
    <p>size ptr = kmalloc(256, GFP_KERNEL); ptr = kmalloc(128, GFP_KERNEL);</p>
    <p>free kfree(ptr); deleted.</p>
    <p>null if (ptr == NULL) return; deleted.</p>
    <p>Examples of the Injected Fault</p>
  </div>
  <div class="page">
    <p>Inject a fault</p>
    <p>Set a breakpoint to the faulty instr</p>
    <p>Run every workload in 6 benchmarks</p>
    <p>See if the fault is activated</p>
    <p>If the kernel hits the breakpoint</p>
    <p>See what happens until the workload fails</p>
    <p>Or until the workload is finished</p>
    <p>G-1: Analyzing Linux behavior</p>
  </div>
  <div class="page">
    <p>887 faults are activated (6738 are injected)  75%: not manifested</p>
    <p>15%: oops, panic (propagation scope is investigated)</p>
    <p>10%: fail silence violation, hang, terminated by VMM</p>
    <p>G-1 Result: Failure By Fault Type</p>
    <p>panic oops FSV hang TERM not manifested</p>
  </div>
  <div class="page">
    <p>Inject a fault causing kernel oops/panic</p>
    <p>Set a breakpoint to the faulty instr</p>
    <p>Run a workload</p>
    <p>Wait until the kernel hits the breakpoint</p>
    <p>Trace instrs until the kernel oops</p>
    <p>Currently, examine if stack or heap is corrupted</p>
    <p>Analysis similar to a taint-analysis</p>
    <p>G-2: Analyzing Error Propagation</p>
  </div>
  <div class="page">
    <p>G-2 Result: Scope Analysis  124 kernel oops &amp; 10 panic are investigated</p>
    <p>73%: process-local error</p>
    <p>27%: kernel-global error</p>
    <p>Overrun, corrupt list_head or callback ptr, etc.</p>
    <p>proc-local kern-global</p>
  </div>
  <div class="page">
    <p>Inject a fault</p>
    <p>Run a workload</p>
    <p>Confirm kernel oops and the kernel kills a proc</p>
    <p>Remove the injected fault by using KDB</p>
    <p>To imitate transient faults by the existing injector</p>
    <p>Run a workload in 6 benchmarks for each oops</p>
    <p>See what happens until the workload fails</p>
    <p>Or until the workload is finished</p>
    <p>G-3: Estimating Reliability</p>
  </div>
  <div class="page">
    <p>589 workloads are investigated</p>
    <p>58.7% of the workloads keep running</p>
    <p>Workloads use a subsystem unrelated to the error</p>
    <p>40.8% of the workloads stop or do not start</p>
    <p>Deadlock, oops/panic, and killing a important proc</p>
    <p>0.5% of the workloads run incorrectly</p>
    <p>G-3 Result: Failure After Oops By Scope</p>
    <p>process-local</p>
    <p>kernel-global</p>
    <p>total</p>
    <p>not manifested deadlock no proc oops panic erroenous</p>
  </div>
  <div class="page">
    <p>99.5% of the workloads run correctly or fail-stop after kernel oops  Deadlock occurs contexts fail-stop</p>
    <p>The mutual execution is done to write shared data</p>
    <p>A context killed in a critical section holds the lock</p>
    <p>Linux shows fail-stopness even when errors are kernel-global</p>
    <p>Is Linux Kernel Oops Useful?</p>
    <p>Proc C</p>
    <p>OS Kernel</p>
    <p>Proc A context Proc B context Proc C context</p>
    <p>Shared kernel objects</p>
    <p>Proc B Proc A</p>
    <p>Oops</p>
    <p>ERROR</p>
    <p>NO ERROR</p>
    <p>DEAD LOCK</p>
  </div>
  <div class="page">
    <p>Related work  A study of Linux behavior under errors [Gu et al. DSN 03]</p>
    <p>Conduct fault injection experiments</p>
    <p>Show error propagation among subsystems</p>
    <p>Linux faults study [Palix et al. ASPLOS 11]</p>
    <p>Use a static analyzer to Linux kernels</p>
    <p>Show the life-time and the distribution of bugs in Linux</p>
    <p>Reboot-based recovery with apps state reserved [Depoutovitch et al. EuroSys 10, HotDep 08]</p>
    <p>Switch to the slave kernel when the master kernel crashes</p>
    <p>Take downtime &amp; need to re-design apps</p>
  </div>
  <div class="page">
    <p>Conclusion  OSes need to be highly available</p>
    <p>Linux kills only a faulty proc instead of crashes</p>
    <p>This kernel behavior is called kernel oops</p>
    <p>Any complex mechanisms are not required</p>
    <p>Kernel oops can be useful as an error recovery</p>
    <p>99.5% of workloads run correctly or fail-stop after killing a faulty process</p>
  </div>
</Presentation>
