<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SecPM: a Secure and Persistent Memory System for Non-volatile Memory</p>
    <p>Pengfei Zuo, Yu Hua Huazhong University of Science and Technology, China</p>
  </div>
  <div class="page">
    <p>Persistence Issue</p>
    <p>The non-volatility of NVM enables data to be persistently stored into NVM Data may be incorrectly persisted due to crash inconsistency  Modern processors and caches usually reorder</p>
    <p>memory writes  Volatile caches cause partial update</p>
    <p>Caches (volatile) NVM (non-volatile) Bus (64bits)</p>
  </div>
  <div class="page">
    <p>Consistency Guarantee for Persistence</p>
    <p>Durable transaction: a commonly used solution  NV-Heaps (ASPLOS11), Mnemosyne (ASPLOS11), DCT</p>
    <p>(ASPLOS16), DudeTM (ASPLOS17), NVML (Intel)  Enable a group of memory updates to be performed in an</p>
    <p>atomic manner Enforce write ordering  Cache line flush and memory</p>
    <p>barrier instructions Avoid partial update  Logging</p>
    <p>TX_BEGIN do some computation; // Prepare stage: backing up the data in log write undo log; flush log; memory_barrier(); // Mutate stage: updating the data in place write data; flush data; memory_barrier(); // Commit stage: invalidating the log log-&gt;valid = false; flush log-&gt;valid; memory_barrier(); TX_END</p>
  </div>
  <div class="page">
    <p>Security Issue</p>
    <p>Traditional DRAM: volatile  If a DRAM DIMM is removed from</p>
    <p>a computer  Data are quickly lost</p>
    <p>NVM: non-volatile  If an NVM DIMM is removed</p>
    <p>An attacker can directly stream out the data from the DIMM</p>
    <p>Unsecure</p>
  </div>
  <div class="page">
    <p>Memory Encryption for Security</p>
    <p>Counter mode encryption  Hide the decryption latency  Generate One Time Pad (OTP) using a per-line</p>
    <p>counter  Counters are buffered in an on-chip counter cache</p>
    <p>Decryption</p>
    <p>Time</p>
    <p>(a) Traditional encryption</p>
    <p>Memory Access</p>
    <p>Memory Access</p>
    <p>One Time Pad</p>
    <p>(b) Counter mode encryption</p>
    <p>Reduced latency AES-ctr</p>
    <p>LineAddr Counter</p>
    <p>Key + Plaintext Plaintext</p>
    <p>+ Ciphertext Ciphertext</p>
    <p>Encryption Decryption</p>
    <p>OTP</p>
  </div>
  <div class="page">
    <p>The Gap between Persistence and Security</p>
    <p>Ensuring both security and persistence  Simply combining existing persistence schemes with memory</p>
    <p>encryption is inefficient  Each write in the secure NVM has to persist two data</p>
    <p>Including the data itself and the counter</p>
    <p>Crash inconsistency  Cache line flush instruction cannot operate the counter cache  Memory barrier instruction fails to ensure the ordering of</p>
    <p>counter writes Performance degradation  Double write requests</p>
  </div>
  <div class="page">
    <p>Durable Transaction in Secure NVM Stage Log content Log counter Data content Data counter Recoverable?</p>
    <p>Prepare Wrong Wrong Correct Correct Yes Mutate Correct Unknown Wrong Wrong No Commit Correct Unknown Correct Unknown No</p>
    <p>TX_BEGIN do some computation; // Prepare stage: backing up the data in log write undo log; flush log; memory_barrier(); // Mutate stage: updating the data in place write data; flush data; memory_barrier(); // Commit stage: invalidating the log log-&gt;valid = false; flush log-&gt;valid; memory_barrier(); TX_END</p>
    <p>Selective counter-atomicity (HPCA18): modifications in software &amp; hardware layers</p>
    <p>Programming language  Add CounterAtomic variable and</p>
    <p>counter_cache_writeback() function  Compiler</p>
    <p>Support the new primitives  Memory controller</p>
    <p>Add a counter write queue</p>
  </div>
  <div class="page">
    <p>SecPM: a Secure and Persistent Memory System</p>
    <p>Perform only slight modifications on the memory controller, being transparent for programmers  Programs running on an un-encrypted NVM can be directly</p>
    <p>executed on a secure NVM with SecPM</p>
    <p>Consistency guarantee  A counter cache write-through</p>
    <p>(CWT) scheme</p>
    <p>Performance improvement  A locality-aware counter write</p>
    <p>reduction (CWR) scheme Asynchronous DRAM refresh (ADR): cache lines reaching the write queue can be considered durable.</p>
    <p>La st</p>
    <p>L ev</p>
    <p>el C</p>
    <p>ac he</p>
    <p>Memory Controller</p>
    <p>AES-ctr Counter Cache</p>
    <p>The Write Queue</p>
    <p>OTPPlaintext</p>
    <p>Ciphertext Counter</p>
    <p>Counter</p>
    <p>Co un</p>
    <p>te rs</p>
    <p>En cr</p>
    <p>yp te</p>
    <p>d N</p>
    <p>V M</p>
  </div>
  <div class="page">
    <p>Counter Cache Write-through (CWT) Scheme</p>
    <p>CWT ensures the crash consistency of both data and counter  Append the counter of the data in the write queue during</p>
    <p>encrypting the data  Ensure the counter is durable before the data flush complet</p>
    <p>Memory Ctrl</p>
    <p>(Write Queue)</p>
    <p>CPU Flu(A)</p>
    <p>Read(Ac) Ac++ Enc(A)</p>
    <p>App(Ac) App(A)</p>
    <p>Ack(A)</p>
    <p>Ret(A)</p>
  </div>
  <div class="page">
    <p>Durable Transaction in SecPM Stage Log content Log counter Data content Data counter Recoverable?</p>
    <p>Prepare Wrong Wrong Correct Correct Yes Mutate Correct Correct Wrong Wrong Yes Commit Correct Correct Correct Correct Yes</p>
    <p>TX_BEGIN do some computation; // Prepare stage: backing up the data in log write undo log; flush log; memory_barrier(); // Mutate stage: updating the data in place write data; flush data; memory_barrier(); // Commit stage: invalidating the log log-&gt;valid = false; flush log-&gt;valid; memory_barrier(); TX_END</p>
    <p>At least one of log and data is correct in whichever stage a system failure occurs</p>
    <p>The system can be recoverable in a consistent state in SecPM</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>leveraging the spatial locality of counter storage, log and data writes  The spatial locality of counter storage</p>
    <p>The counters of all memory lines in a page are stored in one memory line</p>
    <p>Each memory line is encrypted by the major counter concatenated with a minor counter</p>
    <p>m64m3M</p>
    <p>m1 m2</p>
    <p>Major counter (64 bit) 1</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>leveraging the spatial locality of counter storage, log and data writes  The spatial locality of counter storage</p>
    <p>The counters of all memory lines in a page are stored in one memory line</p>
    <p>Each memory line is encrypted by the major counter concatenated with a minor counter</p>
    <p>The spatial locality of log and data writes  A log is stored in a contiguous region  Programs usually allocate a contiguous memory region for a</p>
    <p>transaction</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>An illustration of the write queue when writing a log  The counters Ac, Bc, Cc, and Dc are written into the same</p>
    <p>memory line  The latter cache lines contain the updated contents of the</p>
    <p>former ones (Ac  Bc  Cc  Dc)  They are evicted from the write-through counter cache</p>
    <p>AcA</p>
    <p>The write queue (Each cell is a cache line to be written into NVM)</p>
    <p>BcBCcCDcD</p>
    <p>The log contents The counters of log contents m64m3M m1' m2 m4</p>
    <p>m64m3M m1' m2' m4</p>
    <p>m64m3'M m1' m2' m4</p>
    <p>m64m3'M m1' m2' m4'</p>
    <p>Ac:</p>
    <p>Bc:</p>
    <p>Cc:</p>
    <p>Dc:</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data</p>
    <p>AcA</p>
    <p>The Write Queue</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>AcA</p>
    <p>The Write Queue</p>
    <p>Bc</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>A</p>
    <p>The Write Queue</p>
    <p>BcB</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>A</p>
    <p>The Write Queue</p>
    <p>BcBCc</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>A</p>
    <p>The Write Queue</p>
    <p>BCcC</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>A</p>
    <p>The Write Queue</p>
    <p>BCcCDc</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data  Using a flag to distinguish whether a cache line is from CPU</p>
    <p>caches or the counter cache A</p>
    <p>The Write Queue</p>
    <p>BCDcD 11101</p>
    <p>(1: from CPU caches; 0: from the counter cache)</p>
  </div>
  <div class="page">
    <p>Counter Write Reduction (CWR) Scheme</p>
    <p>When a new cache line arrives, remove the existing cache line with the same physical address in the write queue  Without causing any loss of data  Using a flag to distinguish whether a cache line is from CPU</p>
    <p>caches or the counter cache A BCDcD</p>
    <p>A BCDcD AcBcCc</p>
    <p>With CWR</p>
    <p>Without CWR</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Model NVM using gem5 and NVMain</p>
    <p>CPU and Caches X86-64 CPU, at 2 GHz</p>
    <p>Memory Using PCM Capacity: 16GB</p>
    <p>Read/write latency: 150/450ns Encryption/decryption latency: 40ns</p>
    <p>Counter cache: 1MB, 10ns latency</p>
    <p>Storage benchmarks  A hash table based key-value store  A B-tree based key-value store</p>
  </div>
  <div class="page">
    <p>The Number of NVM Write Requests Hash table based KV store B-tree based KV store</p>
    <p>Compared with the SecPM w/o CWR, SecPM significantly reduces NVM writes Compared with Insec-PM, SecPM only causes 13%, 5%, and 2% more writes when the request size is 256B, 1KB, and 4KB, respectively</p>
  </div>
  <div class="page">
    <p>Transaction Throughput</p>
    <p>Compared with the SecPM w/o CWR, SecPM significantly increases the throughput by 1.4  2.1 times Compared with InsecPM, SecPM incurs a little throughput reduction, due to the more NVM writes and the latency overhead of data encryption</p>
    <p>Hash table based KV store B-tree based KV store</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Both security and persistence of NVM are important Simply combining existing persistence schemes with memory encryption is inefficient  Crash inconsistency  Significant performance degradation This paper proposes SecPM to bridge the gap between security and persistence  Guarantee consistency via a counter cache write</p>
    <p>through (CWT) scheme  Improve performance via a locality-aware counter write</p>
    <p>reduction (CWR) scheme 2</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
  </div>
</Presentation>
