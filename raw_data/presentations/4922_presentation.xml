<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Heng Tan Heng Tan Ronald Demara Ronald Demara</p>
    <p>Heng Tan Heng Tan Ronald Demara Ronald Demara</p>
    <p>A Device-Controlled Dynamic Configuration A Device-Controlled Dynamic Configuration Framework Framework</p>
    <p>Supporting Heterogeneous Resource Supporting Heterogeneous Resource ManagementManagement</p>
  </div>
  <div class="page">
    <p>Previous Work - Tool Level</p>
    <p>Approach Device</p>
    <p>Supported On-chip System</p>
    <p>Bit Stream Reuse</p>
    <p>Potential Limitations</p>
    <p>Moraes, Mesquita,</p>
    <p>Palma, Moller</p>
    <p>Virtex XCV300 devices</p>
    <p>No N Lack of area Relocation</p>
    <p>Raghavan, Sutton</p>
    <p>Xilinx Virtex</p>
    <p>devices No N</p>
    <p>Cumbersom e CAD flow</p>
    <p>Blodget, McMillan</p>
    <p>Virtex II devices</p>
    <p>Partial Yes Direct bit</p>
    <p>stream reuse required</p>
  </div>
  <div class="page">
    <p>Proposed Work: Multilayer Runtime Reconfiguration Architecture</p>
    <p>(MRRA)</p>
    <p>Logic Applications</p>
    <p>Translation Engine</p>
    <p>RAM</p>
    <p>M ic</p>
    <p>ro p</p>
    <p>ro ce</p>
    <p>ss o</p>
    <p>r System Bus</p>
    <p>Autonomous System</p>
    <p>Reconfigurable Unit</p>
    <p>PCI</p>
    <p>ICAP</p>
    <p>PC</p>
    <p>PowerPC</p>
    <p>Bold: for Loosely-Coupled System Italic: for SOC</p>
    <p>Develop MRRA fast reconfiguration paradigm for the CRR approach  Validate with real hardware platform along with detailed performance analysis  Serve as the first general-purpose framework for a wide variety of applications</p>
    <p>that require reconfiguration process during operation  Extend existing theories on reconfiguration</p>
  </div>
  <div class="page">
    <p>Loosely Coupled Solution</p>
    <p>Avnet FPGA Development Board</p>
    <p>PCI I nt er f ace</p>
    <p>Virtex-II Pro FPGA</p>
    <p>Off Chip RAM</p>
    <p>Control hosted on</p>
    <p>PC</p>
    <p>F P</p>
    <p>G A</p>
    <p>O u t</p>
    <p>p u</p>
    <p>t</p>
    <p>B i t f i l e</p>
    <p>I n p u t D a t a</p>
    <p>The entire system operates on a The entire system operates on a 32-bit basis32-bit basis</p>
    <p>The The Virtex-II ProVirtex-II Pro is mounted on a is mounted on a development board which can then development board which can then</p>
    <p>be interfaced with a WorkStation be interfaced with a WorkStation running running XilinxXilinx EDK and ISE. EDK and ISE.</p>
  </div>
  <div class="page">
    <p>LCS Implementation</p>
    <p>Resource name</p>
    <p>Number of</p>
    <p>Available</p>
    <p>Number of Used</p>
    <p>Utilization</p>
    <p>IOBs 396 85 21%</p>
    <p>Slices 4928 1805 36%</p>
    <p>BRAM 24 44 54%</p>
    <p>TBUFs 2464 352 14%</p>
    <p>PPC405 1 1 100%</p>
    <p>BUFGMUXs 4 1 25%</p>
  </div>
  <div class="page">
    <p>APIs on Host PC</p>
    <p>API name Input Parameter Operation Data Width</p>
    <p>Initial N/A Recognizes and Initializes the</p>
    <p>FPGA board N/A</p>
    <p>WriteBitFile char Filename[] Reads configuration file from the</p>
    <p>board and writes to Host PC File length</p>
    <p>ReadBitFile char Filename[] Reads the configuration file from</p>
    <p>the Host PC and writes to the FPGA board</p>
    <p>File length</p>
    <p>ByteRead unsigned long StartAddr, unsigned long EndAddr,</p>
    <p>int AccessBar</p>
    <p>Reads the on board memory 8 bits</p>
    <p>WordRead unsigned long StartAddr, unsigned long EndAddr,</p>
    <p>int AccessBar</p>
    <p>Reads the on board memory 16 bits</p>
    <p>DWordRead</p>
    <p>unsigned long StartAddr, unsigned long EndAddr,</p>
    <p>int AccessBar, unsigned long AccessData</p>
    <p>Reads the on-board memory 32 bits</p>
    <p>ByteWrite</p>
    <p>unsigned long StartAddr, unsigned long EndAddr,</p>
    <p>int AccessBar, unsigned long AccessData</p>
    <p>Writes to the on-board memory 8 bits</p>
    <p>WordWrite</p>
    <p>unsigned long StartAddr, unsigned long EndAddr,</p>
    <p>int AccessBar, unsigned long AccessData</p>
    <p>Writes to the on-board memory 16 bits</p>
    <p>DWordWrite</p>
    <p>unsigned long StartAddr, unsigned long EndAddr,</p>
    <p>int AccessBar, unsigned long AccessData</p>
    <p>Writes to the on-board memory 32 bits</p>
  </div>
  <div class="page">
    <p>APIs on Chip CPU Core</p>
    <p>API name Input Parameter Operation Data Width</p>
    <p>Intc_setup N/A Initializes and enables the interrupt controller</p>
    <p>N /A</p>
    <p>DeviceDriverHandler</p>
    <p>*CallbackRef</p>
    <p>The corresponding routine for the SRAM</p>
    <p>ownership request interruption from host</p>
    <p>PC</p>
    <p>N/A</p>
    <p>mem_dump unsigned start_addr, unsigned end_addr</p>
    <p>Reads the on board and on-chip</p>
    <p>memory&amp;register 32 bits</p>
    <p>mem_write unsigned wr_addr, unsigned wr_value</p>
    <p>Writes the on board and on-chip</p>
    <p>memory&amp;register 32 bits</p>
    <p>flash_test unsigned start_addr, unsigned end_addr</p>
    <p>Thorough validation test on the flash</p>
    <p>mem_test unsigned start_addr, unsigned end_addr</p>
    <p>Thorough validation test on the flash</p>
    <p>memory 32 bits</p>
  </div>
  <div class="page">
    <p>Future Theoretical Work</p>
    <p>Communication overhead, throughput and overall speed-up</p>
    <p>analysis</p>
    <p>Translation Complexity Analysis  The quantity of information that needs to be translated to generate the</p>
    <p>reconfiguration bitstream</p>
    <p>Simplification from file level to bit level is expected</p>
    <p>Storage Complexity Analysis  The memory space that is required for the run-time algorithms</p>
  </div>
  <div class="page">
    <p>Resources Utilization</p>
    <p>Resource name Number of Available</p>
    <p>Number of Used utilization</p>
    <p>IOBs 396 77 19%</p>
    <p>Slices 4928 1352 27%</p>
    <p>BRAM 44 8 18%</p>
    <p>TBUFs 2464 352 14%</p>
    <p>PPC405 1 1 100%</p>
    <p>BUFGMUXs 4 1 25%</p>
  </div>
  <div class="page">
    <p>Overall Design</p>
  </div>
  <div class="page">
    <p>PR Module</p>
  </div>
  <div class="page">
    <p>Operational Characteristics</p>
    <p>TaskTask: A function synthesized to a digital circuit in the form of module that can be programmed and downloaded into the reconfigurable device. A task has a size and a shape.</p>
    <p>TaskTask ModularityModularity: The smallest granularity that this architecture deals with is at task level. The size and shape generate the area requirement of the task in CLBs.</p>
    <p>General-purpose application scenarioGeneral-purpose application scenario: The architecture may carry out an arbitrary number of tasks. There are no predefined constraints on the tasks. The functions of the tasks are also unknown a-priori.</p>
    <p>Runtime scenarioRuntime scenario: The architecture does not know in advance when and what tasks will arrive and what their properties will be. When a task is generated, the system processes it online at runtime.</p>
  </div>
  <div class="page">
    <p>Issues to Address</p>
    <p>PartitioningPartitioning: Selecting computational resources to initialize as component</p>
    <p>PlacementPlacement: Determining the target location of the component on the reconfigurable fabric of the device</p>
    <p>RoutingRouting: Interfacing the component to its surrounding resources</p>
    <p>GenerationGeneration: Generating the bitstream of the component at the target location, and</p>
    <p>ConfigurationConfiguration: Writing the generated bitstream to the appropriate portions of the underlying reconfigurable infrastructure of the reconfigurable fabric</p>
  </div>
  <div class="page">
    <p>Routing: Reconfiguration Module Template</p>
    <p>OPB</p>
    <p>Addr decoder</p>
    <p>Slave attach</p>
    <p>MIR/ Reset</p>
    <p>User Logic</p>
    <p>IPIF Reconfigurable</p>
    <p>Module Bus Macro</p>
    <p>Reconfigurable or</p>
    <p>Fixed Module</p>
    <p>Reconfiguration module Template Intermodule Signal</p>
  </div>
  <div class="page">
    <p>Generation: Partial Reconfiguration Flow</p>
    <p>(Top-Level Design) Design Entry</p>
    <p>HDL Entry/Synthesis</p>
    <p>Initial Budgeting (Top-level Design)</p>
    <p>Design Entry HDL Entry/Synthesis</p>
    <p>(Module)</p>
    <p>Active Module Implementation</p>
    <p>(Module)</p>
    <p>Mapping Placement</p>
    <p>Routing</p>
    <p>Final Assembly (Top-Level Design</p>
    <p>and Modules)</p>
    <p>Mapping Placement</p>
    <p>Routing</p>
    <p>Download to device</p>
  </div>
</Presentation>
