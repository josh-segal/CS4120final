<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Stefan Nrnberger, Michael Backes 1</p>
  </div>
  <div class="page">
    <p>STEFAN</p>
    <p>PhD</p>
  </div>
  <div class="page">
    <p>GERMANY</p>
  </div>
  <div class="page">
    <p>EARLY 2011</p>
  </div>
  <div class="page">
    <p>EARLY 2011</p>
    <p>You are an IT Security Competence</p>
    <p>Centre!</p>
  </div>
  <div class="page">
    <p>EARLY 2011</p>
    <p>Center for IT Security Privacy and Accountability</p>
    <p>Cyber Intelligence Sharing and Protection Act</p>
  </div>
  <div class="page">
    <p>MAKING FINE-GRAINED MEMORY RANDOMISATION</p>
    <p>PRACTICAL BY ALLOWING</p>
    <p>CODE SHARING</p>
  </div>
  <div class="page">
    <p>OXYMORON</p>
  </div>
  <div class="page">
    <p>Code Reuse Attacks</p>
    <p>OXYMORON</p>
    <p>Fine-Grained Randomization</p>
    <p>Modern OS</p>
    <p>Shared Libraries</p>
    <p>Oxymoron</p>
    <p>ILR: Where'd My Gadgets Go?</p>
    <p>E unibus pluramSoftware Diversity</p>
    <p>Smashing the Gadgets Binary Stirring</p>
  </div>
  <div class="page">
    <p>CODE-REUSE ATTACKS</p>
    <p>Program</p>
    <p>Adversary</p>
    <p>I am a lovely and benign program that just runs on your computer without the intent of doing anything harmful. Not even my words are malicious.</p>
    <p>The same program</p>
    <p>Im the most lovely and benign program you can imagine. I embody functionality like document analysis of different types. Im not harmful in any way. CF</p>
    <p>Im the most lovely and benign program you can imagine. I embody functionality like document analysis of different types. Im not harmful in any way.</p>
    <p>Im the</p>
    <p>embody ment</p>
    <p>harm of</p>
  </div>
  <div class="page">
    <p>ASLR</p>
    <p>Program</p>
    <p>Adversary</p>
    <p>Im the most lovely and benign program you can imagine. I embody functionality like document analysis of different types. Im not harmful in any way.</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>FINE-GRAINED RANDOMIZATION</p>
    <p>Program</p>
    <p>I</p>
    <p>am</p>
    <p>the most</p>
    <p>lovely</p>
    <p>program</p>
    <p>Adversary</p>
    <p>? ?</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>CROSS-PROCESS RANDOMIZATION</p>
    <p>Process 1</p>
    <p>I</p>
    <p>am</p>
    <p>the most</p>
    <p>lovely</p>
    <p>program</p>
    <p>Process 2</p>
    <p>I</p>
    <p>am the</p>
    <p>most</p>
    <p>lovely</p>
    <p>program</p>
  </div>
  <div class="page">
    <p>SO WEVE SOLVED THE PROBLEM.</p>
    <p>RIGHT?</p>
  </div>
  <div class="page">
    <p>NOT QUITE</p>
  </div>
  <div class="page">
    <p>OBSERVATION</p>
  </div>
  <div class="page">
    <p>SHARING CODE AND DATA</p>
    <p>Browser (Process 1)</p>
    <p>C Library</p>
    <p>Threading Lib</p>
    <p>PDF Viewer (Process 2)</p>
    <p>C Library</p>
    <p>Threading Lib</p>
  </div>
  <div class="page">
    <p>SHARING CODE AND DATA</p>
    <p>Browser (Process 1)</p>
    <p>PDF Viewer (Process 2)</p>
    <p>C Library</p>
    <p>Threading Lib</p>
  </div>
  <div class="page">
    <p>IMPACT</p>
  </div>
  <div class="page">
    <p>ON THE QUEST TO A SOLUTION</p>
  </div>
  <div class="page">
    <p>ONE POSSIBLE SOLUTION</p>
    <p>Split Code in pieces</p>
  </div>
  <div class="page">
    <p>ONE POSSIBLE SOLUTION</p>
    <p>Share pieces individually Enough entropy</p>
    <p>Call 3</p>
    <p>Problem: They still need to be connected!</p>
  </div>
  <div class="page">
    <p>VALUES ENCODED IN CODE</p>
    <p>Call 3 Indirection !</p>
    <p>@foo: 0x82ab7</p>
    <p>Call @foo</p>
  </div>
  <div class="page">
    <p>OXYMORON  Enables individual pieces to be shared</p>
    <p>Each process can be randomised separately</p>
    <p>Hides all addresses from the attacker</p>
    <p>Its a modified x86 calling convention</p>
    <p>(POSITION AND LAYOUT AGNOSTIC CODE) PALACE</p>
  </div>
  <div class="page">
    <p>PALACE</p>
    <p>This is how x86 is structured</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>SEGMENTATION</p>
    <p>To move programs in memory before MMUs existed Dedicated registers to add offsets to code/data/stack</p>
    <p>call 0xD722B</p>
    <p>GDT</p>
    <p>+ 0x1000Code:</p>
    <p>+ 0x2000Data:</p>
    <p>call 0xD822B</p>
  </div>
  <div class="page">
    <p>X86 INDIRECT CALLS</p>
    <p>call *0x1234</p>
    <p>push %ebp mov %esp, %ebp</p>
    <p>Address Value 0x1234 0x9876 0x1238  0x123C</p>
    <p>call 0x9</p>
  </div>
  <div class="page">
    <p>RATTLE Randomisation-Agnostic Translation TabLE</p>
    <p>call *0x4</p>
    <p>push %ebp mov %esp, %ebp</p>
    <p>Address Value 0x1234 0x9876 0x1238  0x123C</p>
    <p>RATTLE</p>
    <p>GDT</p>
    <p>+ 0x1230Code: call *0x1234</p>
    <p>call 0x9876</p>
  </div>
  <div class="page">
    <p>RATTLE Randomisation-Agnostic Translation TabLE</p>
    <p>call %fs:*0x4</p>
    <p>push %ebp mov %esp, %ebp</p>
    <p>Address Value 0x1234 0x9876 0x1238  0x123C</p>
    <p>RATTLE</p>
    <p>GDT</p>
    <p>+ 0x1000fs:</p>
  </div>
  <div class="page">
    <p>ADVANTAGES</p>
    <p>%fs does not reveal an address</p>
    <p>Encodings of call and mov are all identical across randomisations</p>
    <p>Code stored in a memory page can be shared among different processes</p>
    <p>Different processes have different permutation of memory pages</p>
    <p>Pure user-mode implementation (works on every Linux kernel)</p>
  </div>
  <div class="page">
    <p>OXYMORON</p>
    <p>Executable</p>
    <p>Piece 1</p>
    <p>mov $4, %eax add $6, %eax</p>
    <p>One Memory Page (4kB)Piece 2</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>OXYMORON</p>
    <p>Executable</p>
    <p>Piece 1</p>
    <p>Piece 2</p>
    <p>Library</p>
    <p>Piece L1</p>
    <p>Piece L2</p>
    <p>Process 1 Process 2</p>
    <p>Piece 1</p>
    <p>Piece 2</p>
    <p>Piece L1</p>
    <p>Piece L2</p>
    <p>Piece 1</p>
    <p>Piece 2</p>
    <p>Piece L1</p>
    <p>Piece L2</p>
  </div>
  <div class="page">
    <p>OXYMORON</p>
    <p>mov 0x807f364,%edx&quot; mov %fs:0x8a,%edx&quot; nop&quot; jmp %fs:0x7f</p>
    <p>cmp %ebx,%edx&quot; jb 80480fa&quot; mov %fs:0x991,%eax&quot; test %eax,%eax&quot; je 804812b&quot; sub $0xc,%esp&quot; push %fs:0x44&quot; call *%fs:0x21</p>
    <p>cmp %ebx,%edx&quot; jb 80480fa&quot; mov $0x8066db7,%eax&quot; test %eax,%eax&quot; je 804812b&quot; sub $0xc,%esp&quot; push $0x8073fa8&quot; call 8066db7</p>
  </div>
  <div class="page">
    <p>PERFORMANCE RESULTS</p>
    <p>Runtime Performance Overhead</p>
  </div>
  <div class="page">
    <p>PERFORMANCE RESULTS</p>
    <p>File Size Overhead</p>
  </div>
  <div class="page">
    <p>?</p>
  </div>
  <div class="page">
    <p>MEMORY CORRUPTION EXPLOITS (DEVELOPMENT)</p>
  </div>
  <div class="page">
    <p>ATTACK TARGETS</p>
    <p>Distribution of exploits by type of attacked application</p>
    <p>Source: Kaspersky Security Bulletin 58265</p>
  </div>
</Presentation>
