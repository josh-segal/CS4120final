<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Scaling Memcache at Facebook</p>
    <p>Presenter: Rajesh Nishtala (rajesh.nishtala@fb.com) Co-authors: Hans Fugal, Steven Grimm, Marc Kwiatkowski, Herman Lee, Harry C. Li, Ryan McElroy, Mike Paleczny, Daniel Peek, Paul Saab, David Stafford, Tony Tung, Venkateshwaran Venkataramani</p>
  </div>
  <div class="page">
    <p>Infrastructure Requirements for Facebook 1. Near real-time communication 2. Aggregate content on-the-fly from</p>
    <p>multiple sources 3. Be able to access and update very popular</p>
    <p>shared content 4. Scale to process millions of user requests</p>
    <p>per second</p>
  </div>
  <div class="page">
    <p>Design Requirements Support a very heavy read load</p>
    <p>Over 1 billion reads / second  Insulate backend services from high read rates</p>
    <p>Geographically Distributed Support a constantly evolving product</p>
    <p>System must be flexible enough to support a variety of use cases  Support rapid deployment of new features</p>
    <p>Persistence handled outside the system  Support mechanisms to refill after updates</p>
  </div>
  <div class="page">
    <p>memcached  Basic building block for a distributed key-value store</p>
    <p>for Facebook  Trillions of items  Billions of requests / second</p>
    <p>Network attached in-memory hash table  Supports LRU based eviction</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Storage Cluster (Master)</p>
    <p>Storage Cluster (Replica)</p>
    <p>Front-End Cluster</p>
    <p>FE Memcache</p>
    <p>Web Server</p>
    <p>Geo Region 1. Single front-end cluster  Read heavy workload  Wide fanout  Handling failures</p>
    <p>Front-End Cluster</p>
    <p>FE Memcache</p>
    <p>Web Server</p>
    <p>Geo Region</p>
    <p>S to</p>
    <p>ra ge</p>
    <p>R ep</p>
    <p>lic at</p>
    <p>io n</p>
  </div>
  <div class="page">
    <p>Just a few databases are enough to support the load Pre-memcache</p>
    <p>Database Database Database</p>
    <p>Web Server Web Server Web Server Web Server</p>
    <p>Data sharded across the databases</p>
  </div>
  <div class="page">
    <p>Interstitial slide</p>
    <p>Why Separate Cache? High fanout and multiple rounds of data fetching</p>
    <p>Data dependency DAG for a small request</p>
  </div>
  <div class="page">
    <p>Interstitial slide 0 No memcache servers</p>
    <p>Scaling memcache in 4 easy steps 10s of servers &amp; millions of operations per second</p>
  </div>
  <div class="page">
    <p>Need more read capacity</p>
    <p>Two orders of magnitude more reads than writes</p>
    <p>Database</p>
    <p>Database Database</p>
    <p>Memcache</p>
    <p>Solution: Deploy a few memcache hosts to handle the read capacity</p>
    <p>How do we store data?  Demand-filled look-aside cache  Common case is data is</p>
    <p>available in the cache</p>
    <p>Web Server</p>
  </div>
  <div class="page">
    <p>Handling updates</p>
    <p>Memcache needs to be invalidated after DB write  Prefer deletes to sets</p>
    <p>Idempotent  Demand filled</p>
    <p>Up to web application to specify which keys to invalidate after database update</p>
    <p>Database</p>
    <p>Memcache</p>
    <p>Web Server</p>
  </div>
  <div class="page">
    <p>Problems with look-aside caching</p>
    <p>Extend memcache protocol with leases</p>
    <p>Return and attach a lease-id with every miss</p>
    <p>Lease-id is invalidated inside server on a delete</p>
    <p>Disallow set if the lease-id is invalid at the server</p>
    <p>Stale Sets</p>
    <p>Database Memcache</p>
    <p>Web Server Web Server</p>
    <p>MC &amp; DB Inconsistent</p>
    <p>A B</p>
    <p>A B A B</p>
  </div>
  <div class="page">
    <p>Problems with look-aside caching</p>
    <p>Memcache server arbitrates access to database  Small extension to leases</p>
    <p>Clients given a choice of using a slightly stale value or waiting</p>
    <p>Thundering Herds</p>
    <p>Database Memcache</p>
    <p>Web Server</p>
    <p>Web Server</p>
    <p>B A</p>
    <p>Web Server</p>
  </div>
  <div class="page">
    <p>Interstitial slide 0 No memcache servers</p>
    <p>Scaling memcache in 4 easy steps 100s of servers &amp; 10s of millions of operations per second</p>
  </div>
  <div class="page">
    <p>Need even more read capacity</p>
    <p>Items are distributed across memcache servers by using consistent hashing on the key  Individual items are rarely accessed very frequently so over replication</p>
    <p>doesnt make sense</p>
    <p>Web Server Web Server Web Server Web Server</p>
    <p>Memcache Memcache Memcache Memcache</p>
    <p>All web servers talk to all memcache servers  Accessing 100s of memcache servers to process a user request is</p>
    <p>common</p>
  </div>
  <div class="page">
    <p>Incast congestion</p>
    <p>Many simultaneous responses overwhelm shared networking resources</p>
    <p>Memcache Memcache Memcache Memcache</p>
    <p>Solution: Limit the number of outstanding requests with a sliding window  Larger windows cause result in more congestion  Smaller windows result in more round trips to the network</p>
    <p>Get key1 Get key2 Get key3 Get keyN 10kB val 10kB val 5kB val 7kB val</p>
    <p>Web Server DROPS</p>
  </div>
  <div class="page">
    <p>Interstitial slide 0 No memcache servers</p>
    <p>Scaling memcache in 4 easy steps 1000s of servers &amp; 100s of millions of operations per second</p>
  </div>
  <div class="page">
    <p>Storage Cluster (Master)</p>
    <p>Multiple clusters</p>
    <p>All-to-all limits horizontal scaling</p>
    <p>Front-End Cluster</p>
    <p>FE Memcache</p>
    <p>Web Server</p>
    <p>Front-End Cluster</p>
    <p>FE Memcache</p>
    <p>Web Server  Multiple memcache</p>
    <p>clusters front one DB installation  Have to keep the caches</p>
    <p>consistent</p>
    <p>Have to manage over-replication of data</p>
  </div>
  <div class="page">
    <p>Databases invalidate caches</p>
    <p>Cached data must be invalidated after database updates  Solution: Tail the mysql commit log and issue deletes based</p>
    <p>on transactions that have been committed  Allows caches to be resynchronized in the event of a problem</p>
    <p>Front-End Cluster #1</p>
    <p>Web Server</p>
    <p>MC MC MC MC</p>
    <p>Storage Server Commit Log</p>
    <p>MySQL</p>
    <p>Front-End Cluster #2</p>
    <p>Web Server</p>
    <p>MC MC MC</p>
    <p>Front-End Cluster #3</p>
    <p>Web Server</p>
    <p>MC MC MC MC</p>
    <p>McSqueal</p>
  </div>
  <div class="page">
    <p>Too many packets Invalidation pipeline</p>
    <p>Aggregating deletes reduces packet rate by 18x</p>
    <p>Makes configuration management easier</p>
    <p>Each stage buffers deletes in case downstream component is down</p>
    <p>MC MC MC</p>
    <p>McSqueal</p>
    <p>DB</p>
    <p>McSqueal</p>
    <p>DB</p>
    <p>McSqueal</p>
    <p>DB</p>
    <p>MC MC MC MC</p>
    <p>Memcache Routers</p>
    <p>Memcache Routers</p>
    <p>MC MC MC MC</p>
    <p>Memcache Routers</p>
    <p>Memcache Routers</p>
  </div>
  <div class="page">
    <p>Scaling memcache in 4 easy steps 1000s of servers &amp; &gt; 1 billion operations per second</p>
  </div>
  <div class="page">
    <p>Geographically distributed clusters</p>
    <p>Replica Master</p>
    <p>Replica</p>
  </div>
  <div class="page">
    <p>Writes in non-master</p>
    <p>Race between DB replication and subsequent DB read</p>
    <p>Database update directly in master</p>
    <p>Replica DB</p>
    <p>Memcache</p>
    <p>Web Server</p>
    <p>Web Server</p>
    <p>Master DB</p>
    <p>Race!</p>
  </div>
  <div class="page">
    <p>Remote markers Set a special flag that indicates whether a race is likely</p>
    <p>Replica DB</p>
    <p>Memcache</p>
    <p>Web Server</p>
    <p>Master DB</p>
    <p>Read miss path: If marker set read from master DB else read from replica DB</p>
  </div>
  <div class="page">
    <p>Storage Cluster (Master)</p>
    <p>Storage Cluster (Replica)</p>
    <p>Front-End Cluster</p>
    <p>FE Memcache</p>
    <p>Web Server</p>
    <p>Geo Region</p>
    <p>Putting it all together</p>
    <p>Front-End Cluster</p>
    <p>FE Memcache</p>
    <p>Web Server</p>
    <p>Geo Region</p>
    <p>S to</p>
    <p>ra ge</p>
    <p>R ep</p>
    <p>lic at</p>
    <p>io n</p>
  </div>
  <div class="page">
    <p>Lessons Learned  Push complexity into the client whenever possible  Operational efficiency is as important as performance  Separating cache and persistent store allows them to be scaled independently</p>
  </div>
  <div class="page">
    <p>Thanks! Questions?</p>
    <p>http://www.facebook.com/careers</p>
  </div>
  <div class="page"/>
</Presentation>
