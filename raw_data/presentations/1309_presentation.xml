<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Kawa</p>
    <p>Compiling Dynamic Languages to the Java VM</p>
    <p>Per Bothner</p>
    <p>bothnercygnuscom</p>
    <p>Cygnus Solutions</p>
    <p>UsenixFreenix</p>
    <p>Draft version</p>
    <p>Other languages on JVM</p>
    <p>Java can be thought of as two dierent things</p>
    <p>Java as a programming language</p>
    <p>objectoriented syntax similar to CC</p>
    <p>Java as a machineenvironment</p>
    <p>libraries  portable bytecodes run virtual machine</p>
    <p>Need for other languages to coexist in the Java environment</p>
    <p>Highlevel scripting languages especially useful</p>
    <p>Can use extensive Java libraries and portable bytecodes</p>
    <p>Bene t from Java optimization eorts</p>
    <p>Many examples NetRexx Tcl Ada</p>
    <p>Implementation Strategies</p>
    <p>Interpreter written in Java</p>
    <p>Good responsiveness</p>
    <p>Slow execution time</p>
    <p>Translate to Java source</p>
    <p>Poor responsiveness</p>
    <p>Fast execution time</p>
    <p>Translate to Java bytecode</p>
    <p>Good responsiveness</p>
    <p>Fast execution time</p>
    <p>Kawa does the last</p>
    <p>Translating Scheme directly to bytecodes is much faster</p>
    <p>Required for interactive response in readevalprint loop</p>
    <p>Bytecodes are more general bytecodes have goto which is not</p>
    <p>in Java language</p>
    <p>Eval  Immediate execution</p>
    <p>Scripting languages have eval</p>
    <p>Take a command typed interactively or constructed on the y and</p>
    <p>immediately execute it</p>
    <p>A batch translator does not support eval well</p>
    <p>Kawa compiles directly to inmemory bytecodes so is highly</p>
    <p>responsive</p>
    <p>Uses a simple interpreter for simple expressions for even</p>
    <p>faster response</p>
  </div>
  <div class="page">
    <p>Compilation Frontend</p>
    <p>Scheme source</p>
    <p>read</p>
    <p>list form</p>
    <p>analysis  R</p>
    <p>ECMAScript</p>
    <p>lexer</p>
    <p>token stream</p>
    <p>parser</p>
    <p>Expression</p>
    <p>Compilation Backend</p>
    <p>Expression</p>
    <p>R</p>
    <p>optimization</p>
    <p>code generation  ClassType</p>
    <p>R</p>
    <p>writeToArray</p>
    <p>internal array</p>
    <p>writeToFile</p>
    <p>class le</p>
    <p>R</p>
    <p>R</p>
    <p>zip archive</p>
    <p>ClassLoader</p>
    <p>Running code</p>
    <p>Loading a Scheme source le</p>
    <p>Read expressions until EOF  normally yields a sequence of</p>
    <p>PairWithPosition lists</p>
    <p>Wrap expressions in a dummy noargument lambda</p>
    <p>The analysis phase does macro expansion resolves lexical bindings</p>
    <p>Could do optimizations</p>
    <p>Result is a LambdaExp expression object</p>
    <p>Compile to internal byte arrays containing bytecodes and class</p>
    <p>de nitions</p>
    <p>Uses the same format as Java class les</p>
    <p>Use a ClassLoader to convert byte arrays to loaded classes</p>
    <p>Apply the result which evaluates toplevel expressions</p>
    <p>Expressions</p>
    <p>Abstract Expression class represents languageindependent</p>
    <p>partially processed expressions</p>
    <p>IfExp  conditional expression</p>
    <p>ApplyExp  application call</p>
    <p>LambdaExp  anonymous procedures</p>
    <p>LetExp  block with lexical bindings</p>
    <p>QuoteExp  literal constant</p>
    <p>ReferenceExp  variable reference</p>
    <p>ErrorExp  syntax error seen</p>
    <p>compile method compiles the expression into bytecode</p>
    <p>instructions</p>
    <p>eval is only used to evaluate simple expressions interactively</p>
  </div>
  <div class="page">
    <p>Code Generation</p>
    <p>public abstract class Expression</p>
    <p>public abstract void</p>
    <p>compileCompilation state Target target</p>
    <p>A Compilation manages the state for a compilation unit</p>
    <p>and manages one or more gnubytecodeClassType objects</p>
    <p>one for each generated class le</p>
    <p>To compile an Expression invoke its compile method</p>
    <p>This generates bytecodes to evaluate the Expression</p>
    <p>Calls compile recursively for subexpressions</p>
    <p>A Target speci es where to leave the result</p>
    <p>The bytecode Package</p>
    <p>The gnubytecode package is an ecient intermediatelevel library</p>
    <p>for working with Java class les</p>
    <p>Code generation reading writing printing disassembling</p>
    <p>ClassType  Information about a class as a whole</p>
    <p>CpoolEntry abstract  A slot in the constant pool</p>
    <p>Variable  Local variable</p>
    <p>Field</p>
    <p>Attribute abstract  Used for miscellaneous info</p>
    <p>Method  Handles methods and bytecode instructions</p>
    <p>CodeAttr  A Methods bytecode instructions</p>
    <p>CodeAttr has many mediumlevel methods for generating bytecode</p>
    <p>instructions For example</p>
    <p>codeattremitPushInti</p>
    <p>Generates code to push int literal i on JVM stack</p>
    <p>Calling Java methods</p>
    <p>Kawa makes it convenient to call Java methods form Scheme</p>
    <p>define charupcase char</p>
    <p>primitivestaticmethod javalangCharacter toUpperCase</p>
    <p>char char</p>
    <p>char</p>
    <p>Converts Scheme character value to Java primitive char calls</p>
    <p>toUpperCase method in javalangCharacter and converts</p>
    <p>result back</p>
    <p>Compiler can inline call to known primitive method</p>
    <p>Otherwise Java reection feature is used</p>
    <p>Similar access to array elements and object elds</p>
    <p>Scheme vs Java</p>
    <p>Scheme and Java are very dierent kinds of languages</p>
    <p>Scheme is dynamically typed while Java is statically typed</p>
    <p>Java is an objectoriented language</p>
    <p>Scheme is a nonpure functional language Procedures are</p>
    <p>rstclass objects lexical scoping requires closures</p>
    <p>Scheme de nes arithmetic on a tree of number types Java</p>
    <p>normally uses raw machinelevel numbers</p>
    <p>How should we map Scheme constructs into Java constructs</p>
  </div>
  <div class="page">
    <p>Dynamic Types</p>
    <p>Java like Smalltalk and unlike C has a rooted inheritance</p>
    <p>graph All classes are derived from the class Object which is an</p>
    <p>alias for javalangObject</p>
    <p>Scheme and ECMAScript have variable declarations but</p>
    <p>without type speci cations</p>
    <p>hence all Scheme values belong to some subclass of Object</p>
    <p>Some latitude when to use standard builtin Java classes for</p>
    <p>Scheme values or write our own</p>
    <p>Objects and Values</p>
    <p>Scheme booleans are represented using Java Booleans</p>
    <p>Symbols are represented using interned Java Strings</p>
    <p>Scheme lists vectors and strings use new classes in a</p>
    <p>Sequence colections hierarchy</p>
    <p>Sequences</p>
    <p>abstract class Sequence</p>
    <p>class Vector extends Sequence</p>
    <p>Used for Scheme vectors</p>
    <p>class List extends Sequence</p>
    <p>ListEmpty new List   Empty list</p>
    <p>class Pair extends List</p>
    <p>Has car and cdr elds</p>
    <p>class PairWithPosition extends Pair</p>
    <p>A Pair with linenumber information</p>
    <p>Numbers</p>
    <p>gnumath package implements Scheme numbers and more</p>
    <p>Forms a coherent class hierarchy</p>
    <p>Provides in niteprecision rationals</p>
    <p>Complex numbers provided</p>
    <p>Has quantities with units and dimensions</p>
  </div>
  <div class="page">
    <p>Procedures</p>
    <p>public abstract class Procedure</p>
    <p>public abstract Object applyNObject args</p>
    <p>A primitive procedure is written in Java as a subclass of</p>
    <p>Procedure Eg  de nes applyN to add arguments</p>
    <p>A Scheme function is compiled into a subclass of Procedure</p>
    <p>with the Scheme body compiled into body of applyN</p>
    <p>Allocating instance of a Procedure subclass creates Scheme</p>
    <p>procedure value</p>
    <p>Nested procedure has a eld for the static context inherited</p>
    <p>lexical environment</p>
    <p>A closure is an instance of such a class</p>
    <p>Tailcalls</p>
    <p>Scheme language requires tailcallelimination which is a</p>
    <p>generalization of tailrecursionelimination</p>
    <p>CALL F followed by RETURN should be same as GOTO F</p>
    <p>Ie current frame must be popped before CALL to avoid stack</p>
    <p>growth Allows iteration and state machines to be expressed using</p>
    <p>recursion</p>
    <p>Best handled with suitable calling convention which is not portable</p>
    <p>in Java</p>
    <p>Kawa implements tailrecursionelimination only If compiler sees a</p>
    <p>call to the current function it replaces it by a goto</p>
    <p>General tailcallelimination will be implemented using a new</p>
    <p>heapbased calling convention can coexist with the current faster</p>
    <p>calling convention</p>
    <p>Continuations</p>
    <p>Continuations provide a way to capture the current stack</p>
    <p>environment</p>
    <p>They can be used to implement new control structures coroutines</p>
    <p>backtracking exception handling and more</p>
    <p>Can be implemented by copying the stack  but this requires</p>
    <p>assemblylevel code</p>
    <p>Kawa implements limited continuations sucient to implement</p>
    <p>catchthrow and exception handling It uses the Java exception</p>
    <p>handling mechanism</p>
    <p>Full support will be added based on the new tailcall convention</p>
    <p>Other languages</p>
    <p>Most of the Kawa is independent of Scheme</p>
    <p>The same techniques and most of the code could be reused to</p>
    <p>implement other languages especially dynamically typed ones such</p>
    <p>as Tcl Rexx Smalltalk APL</p>
    <p>New languages may require new data types  just write the</p>
    <p>appropriate Java classes</p>
    <p>Most languages require their own parser This would translate text</p>
    <p>into Expressions</p>
    <p>Each language has a dierent standard environment containing</p>
    <p>prede ned values types and functions</p>
  </div>
  <div class="page">
    <p>ECMAScript</p>
    <p>ECMA standard no  for the core of JavaScript</p>
    <p>Very dynamic objectbased language with prototype</p>
    <p>inheritance but no classes</p>
    <p>Lexer and parser written Most prede ned functions and</p>
    <p>objects missing</p>
    <p>Generates Expression and compiles to Java bytecodes</p>
    <p>DSSSL and SGML</p>
    <p>Industry migrating to SGML for document storage and</p>
    <p>manipulation</p>
    <p>HTML is an instance of SGML XML is simpli ed SGML</p>
    <p>DSSSL is the ISO standard language for specifying style and</p>
    <p>processing of SGML</p>
    <p>DSSSL is basically standard Scheme with no sideeects plus</p>
    <p>some extensions plus lots of standard classes for manipulating</p>
    <p>text ow etc</p>
    <p>The original preCygnus Kawa was written to process</p>
    <p>DSSSL Kawa implements some of the DSSSL extensions DSSSL</p>
    <p>seems be the cause of renewed interest in Scheme and Kawa</p>
    <p>Status and Future work</p>
    <p>Kawa is used for a number of commercial and academic projects</p>
    <p>and has a member mailing list</p>
    <p>Kawa is still being actively developed and enhanced</p>
    <p>Plans include</p>
    <p>Implement missing features of standard Scheme RRS</p>
    <p>Finish ECMAScript implementation</p>
    <p>Implement Emacs Lisp core</p>
    <p>Play with an array language</p>
    <p>Design a graphics interface</p>
    <p>Add a module system</p>
    <p>Support optional type declarations and local type inference</p>
    <p>Support using raw Java data types in Scheme</p>
    <p>Fine print</p>
    <p>Not a Cygnus product</p>
    <p>No connection with TekTools Java IDE of the same name</p>
    <p>Home page httpwwwcygnuscombothnerkawahtml</p>
  </div>
</Presentation>
