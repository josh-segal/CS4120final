<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Cost of Privatization</p>
    <p>Hagit Attiya Eshcar Hillel Technion &amp; EPFL Technion</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)2</p>
    <p>A silver bullet for concurrent programming?</p>
    <p>A transaction is a sequence of operations, on a set of high level items  Appears to execute atomically  Ends by committing</p>
    <p>or by aborting</p>
    <p>Read)( Write)( Commit /</p>
    <p>Abort</p>
    <p>Transactional Memory</p>
    <p>STM</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)3</p>
    <p>STM</p>
    <p>Software TM Implementation (STM)</p>
    <p>Translates high-level operations into primitives on base objects  e.g., read, write, CAS</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)4</p>
    <p>STM</p>
    <p>Non-Transactional Accesses</p>
    <p>Direct operations on data items  Due to legacy code, irrevocable operations, or library functions</p>
    <p>May harm memory consistency &amp; interfere with correct operation of the STM</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)5</p>
    <p>STM</p>
    <p>Strong Atomicity</p>
    <p>Isolation and consistent ordering of transactions and non-transactional accesses</p>
    <p>E.g., a non-transactional read observes the value written by an earlier committed transaction</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)6</p>
    <p>STM</p>
    <p>Obvious Solution</p>
    <p>Single-operation transaction  High overhead  Even with compiler optimizations</p>
    <p>Want uninstrumented access: single base object m for each item t</p>
    <p>Read t  read m Write t  write m</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)7</p>
    <p>STM</p>
    <p>Privatization</p>
    <p>Cannot just assume a region is private [Guerraoui, Henzinger, Kapalka, Singh 10]</p>
    <p>Need a privatizing transaction: isolate a data region, and access it nontransactionally</p>
    <p>Deferred updates: write / CAS applied to m (by another transaction) after t is privatized</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)8</p>
    <p>Privatization-Safe STM</p>
    <p>A non-transactional read obtains values written by preceding committed transactions</p>
    <p>After privatization, a base object associated with a privatized item is not written by another thread</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)9</p>
    <p>Linked-List Workload</p>
    <p>A linked list &amp; blue items are privatized  Other transactions write to blue items Cannot just write an item w/o checking first Transactions that write to data that</p>
    <p>might be private must have nonempty read sets</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)10</p>
    <p>Single Global Lock</p>
    <p>Efficient privatization  JudoSTM [Olszewski, Cutler, Steffan, 07]  NOrec [Dalessandro, Spear, Scott, 10]</p>
    <p>Inherently sequential: only one transaction makes progress</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)11</p>
    <p>Nonconflicting transactions must commit (even when running concurrently) RingSTM: uses global ring, not progressive</p>
    <p>[Spear, Michael, von Praun, 08]  Private transactions: uses quiescing barrier, not</p>
    <p>progressive [Dice, Matveev, Shavit 10]</p>
    <p>SkySTM: Traces W-R conflicts, progressive [Lev, Luchangco, Marathe, Moir, Nussbaum, 09]</p>
    <p>STM Properties: Progressiveness</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)12</p>
    <p>No Early Updates</p>
    <p>Eager STM: Items in the write set are updated before the transaction is guaranteed to commit</p>
    <p>Lemma: Assuming progressiveness, eager STMs are not privatization-safe</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)13</p>
    <p>STM Properties: Obliviousness</p>
    <p>No tracking of the data sets of non conflicting transactions (do not distinguish between them)</p>
    <p>Many STMs are oblivious  NOrec, RingSTM, private transactions  TLRW (slotted readers) [Dice, Shavit, 10]  Exceptions are TLRW (unslotted readers), SkySTM</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)14</p>
    <p>Cost of Privatization I: Invisible Reads</p>
    <p>Read operations do not write (also at commit-time)  Reduces contention on the memory  Look like empty read sets  to the rest of the world!  JudoSTM, NOrec, RingSTM</p>
    <p>Theorem: In a progressive, oblivious STM, a transaction privatizing k items in the linked-list workload must have data set of size (k)</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)15</p>
    <p>Lower Bound with Invisible Reads: Proof</p>
    <p>p 1 executing T 1 p0 executing T0 still commits invisibility</p>
    <p>p0 executes T0 privatizing the k blue items  Pick some item u that is not accessed by T0</p>
    <p>p1 executes T1 writing to u  Nonempty read set</p>
    <p>u</p>
    <p>ready to commit but not eager</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)16</p>
    <p>ti</p>
    <p>Lower Bound with Invisible Reads: Proof</p>
    <p>p 1 executing T 1 p0 executing T0</p>
    <p>If T0 does not access item ti p1 now executes T1 writing ti</p>
    <p>Nonempty read set, e.g., the linked list</p>
    <p>T1 commits after T0 commits</p>
    <p>u</p>
    <p>p 1 executing T 1</p>
    <p>commits progressive</p>
    <p>oblivious</p>
    <p>invisible reads</p>
    <p>p0 executing T0</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)17</p>
    <p>ti</p>
    <p>Lower Bound with Invisible Reads: Proof</p>
    <p>u</p>
    <p>p 1 executing T 1 p0 executing T0</p>
    <p>not eager</p>
    <p>Base object mi is associated with ti p1 must write to mi in the suffix of T1</p>
    <p>Contradicts privatization safety</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)18</p>
    <p>Cost of Privatization II: Visible Reads</p>
    <p>Read operations write at some point, e.g. TLRW, SkySTM (read locks), private transactions  Semi-visible: the readers identity is unknown (oblivious)</p>
    <p>Theorem: In an -progressive, oblivious STM, a transaction privatizing k items in the linked-list workload must access min{,k} base objects</p>
    <p>Tradeoff: memory accesses  parallelism  TLRW, RingSTM realize extreme cases</p>
    <p>Can be adapted to get intermediate tradeoffs</p>
    <p>many transactions make progress</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)19</p>
    <p>T1  Tk write to linked-list items without T0 observing them (despite being visible)</p>
    <p>Confusing transactions T1  Tk access a clone of the linked-list</p>
    <p>Lower Bound for Visible Reads: Hiding</p>
    <p>p 1 executing T 1 p0 executing T0p 2 executing T 2</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)20</p>
    <p>Inductively, swap a confusing transaction with an updating transaction  Incurs an access to an additional base object (to observe the updating transaction)</p>
    <p>Be careful, not to lose previous accesses</p>
    <p>Lower Bound for Visible Reads: Proof</p>
    <p>p 1 executing T 1 p 2 executing T 2 p0 executing T0</p>
    <p>p 1 executing T 1 p 2 executing T 2p 1 executing T 1</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)21</p>
    <p>Summary</p>
    <p>Inherent cost for privatization, linear in the number of privatized items  Invisible reads: high-level accesses  Visible reads: low-level accesses</p>
    <p>Efficient privatization requires tracking data sets of other transactions or limiting parallelism  Both have significant impact on performance</p>
    <p>Same results for disjoint-access parallel STM Same results for static &amp; dynamic separation</p>
    <p>[Abadi, Birrell, Harris, Isard 08] [Abadi, Birrell, Harris, Hsiesh 09]</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)22</p>
    <p>Alternative Costs</p>
    <p>SkySTM is progressive, and provides efficient privatization</p>
    <p>Not oblivious: Tracks data sets in detail  All transactions have cost proportional to</p>
    <p>the size of their data set</p>
    <p>Is this inherent?</p>
  </div>
  <div class="page">
    <p>The cost of privatization (June 2010)23</p>
    <p>Thank you</p>
  </div>
</Presentation>
