<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Unsynchronized Techniques for Approximate Parallel Compu;ng</p>
    <p>Mar;n Rinard MIT EECS, MIT CSAIL</p>
    <p>MassachuseDs Ins;tute of Technology Cambridge, MA 02139</p>
  </div>
  <div class="page">
    <p>Barnes Hut N-Body Simula;on</p>
    <p>N Interac;ng Bodies (Stars, Molecules)</p>
    <p>At each step  Compute force</p>
    <p>Ac;ng on each body  From all other bodies</p>
  </div>
  <div class="page">
    <p>Barnes Hut N-Body Simula;on</p>
    <p>N Interac;ng Bodies (Stars, Molecules)</p>
    <p>At each step  Compute force</p>
    <p>Ac;ng on each body  From all other bodies</p>
    <p>Use forces to move bodies  Repeat</p>
  </div>
  <div class="page">
    <p>Space Subdivision Tree</p>
    <p>Internal node contains center of mass for subtree</p>
    <p>Internal Node</p>
    <p>Center of mass approxima;on for distant bodies  Changes N2 algorithm into N log N algorithm</p>
  </div>
  <div class="page">
    <p>Barnes-Hut Algorithm</p>
  </div>
  <div class="page">
    <p>Tree Construc;on Algorithm</p>
  </div>
  <div class="page">
    <p>Tree Construc;on</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Algorithm, Version 1  No Synchroniza;on, Just Insert Bodies in Parallel</p>
    <p>Data Races Corruption Crash!</p>
  </div>
  <div class="page">
    <p>Standard Solu;on</p>
    <p>Add synchroniza;on  Complicate program  Add synchroniza;on overhead  Add space overhead  Maybe conten;on, even deadlock too</p>
    <p>We arent going to do this</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Algorithm, Version 2  No Synchroniza;on, No Crash!</p>
    <p>Potential Outcome: Drop</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Algorithm, Version 2  No Synchroniza;on, No Crash!</p>
    <p>Dropped:</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Algorithm, Version 2  No Synchroniza;on, No Crash!</p>
    <p>Dropped:</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Algorithm, Version 2  No Synchroniza;on, No Crash!</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Algorithm, Version 2  No Synchroniza;on, No Crash!</p>
  </div>
  <div class="page">
    <p>Effect of Unsynchronized Construc;on</p>
    <p>Always produces a tree that force computa;on calcula;on can use</p>
    <p>But tree may not contain all bodies  Forces computed as if dropped bodies dont exist  Get an approximate force computa;on  But force computa;on is already approximate because of center of mass approxima;on</p>
    <p>Preserves integrity  May affect accuracy</p>
  </div>
  <div class="page">
    <p>Parallel Tree Construc;on Op;ons  Unsynchronized</p>
    <p>Data races  Always produces a usable tree, but may drop bodies</p>
    <p>Preserves integrity of computa;on  May affect accuracy</p>
    <p>Tree Locking (standard approach)  No data races, no dropped bodies  Lots of synchroniza;on, lots of conten;on at top of tree</p>
    <p>Update Locking (synchronize updates but not reads)  Data races, no dropped bodies  Some synchroniza;on, liDle conten;on  Complex, scary algorithm</p>
  </div>
  <div class="page">
    <p>Accuracy Evalua;on</p>
    <p>Need a comparison point  Full N2 computa;on too expensive  Compare with hyperaccurate version</p>
    <p>Uses a center of mass approxima;on  But goes deeper into the tree before using the center of mass approxima;on</p>
    <p>So more accurate</p>
  </div>
  <div class="page">
    <p>Accuracy Metric</p>
    <p>Start with two corresponding configura;ons  Reference (hyperaccurate)  Comparison (tree locking, update locking, unsynchronized)</p>
    <p>Compute sum of distances between corresponding bodies  Divide sum by distance between corners of bounding box</p>
  </div>
  <div class="page">
    <p>Accuracy Result</p>
    <p>Accuracy metric between  Hyperaccurate version and  All other versions  All other numbers of processors</p>
    <p>Is 1.02% (to three significant digits)</p>
  </div>
  <div class="page">
    <p>Visually</p>
    <p>Hyperaccurate Update Locking</p>
    <p>Unsynchronized</p>
    <p>Tree Locking</p>
  </div>
  <div class="page">
    <p>Accuracy Result in Context</p>
    <p>Difference between hyperaccurate and synchronized version is two orders of magnitude larger than difference between synchronized and unsynchronized versions</p>
    <p>Changing center of mass approxima;on has an accuracy effect two orders of magnitude more than removing synchroniza;on</p>
  </div>
  <div class="page">
    <p>Performance Evalua;on</p>
    <p>Implemented different versions  Tree locking  Update locking  Unsynchronized  Evaluated performance of different versions</p>
    <p>Measured speedup over sequen;al tree construc;on algorithm</p>
  </div>
  <div class="page">
    <p>Unsynchronized Final Check Update Locking Tree Locking</p>
    <p>Number of Processors</p>
    <p>S pe</p>
    <p>ed up</p>
    <p>o ve</p>
    <p>r S</p>
    <p>eq ue</p>
    <p>nt ia</p>
    <p>l Performance of Parallel Tree Construc;on Algorithms</p>
  </div>
  <div class="page">
    <p>Key Technical Concepts and Results</p>
    <p>Safe approximate unsynchronized data structures  Look just like standard sequen;al data structures  Give programmer sense of security and comfort  Building blocks in paper</p>
    <p>Accuracy evalua;on methodology  To evaluate effect of unsynchronized data structures  Adjust accepted accuracy knobs  Compare with effect of removing synchroniza;on</p>
    <p>Evidence shows programs are oversynchronized</p>
  </div>
  <div class="page">
    <p>Bigger Picture  Field has tradi;onally aspired to perfec;on  But perfec;on is increasingly unavailable</p>
    <p>Huge systems, huge data sets  Something always broken</p>
    <p>Soeware is inherently resilient and malleable  Enables more mature and produc;ve approaches  Goal is acceptability, not perfec;on</p>
    <p>Integrity (program does not crash)  Accuracy (accurate enough, oeen enough)  End-to-end perspec;ve</p>
    <p>Opens up new, counterintui;ve possibili;es</p>
  </div>
</Presentation>
