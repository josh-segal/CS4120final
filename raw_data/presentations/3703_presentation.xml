<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rethinking Database Algorithms for Phase Change Memory</p>
    <p>Shimin Chen* Phillip B. Gibbons* Suman Nath+</p>
    <p>*Intel Labs Pittsburgh +Microsoft Research</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>PCM is an emerging non-volatile memory technology  Samsung is producing a PCM chip for mobile handsets  Expected to become a common component in</p>
    <p>memory/storage hierarchy</p>
    <p>Recent computer architecture and systems studies argue:  PCM will replace DRAM to be main memory</p>
    <p>PCM-DB project: exploiting PCM for database systems  This paper: algorithm design on PCM-based main memory</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Phase Change Memory  PCM-Friendly Algorithm Design  B+-Tree Index  Hash Joins  Related Work  Conclusion</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 3</p>
  </div>
  <div class="page">
    <p>Phase Change Memory (PCM)</p>
    <p>Byte-addressable non-volatile memory  Two states of phase change material:</p>
    <p>Amorphous: high resistance, representing 0  Crystalline: low resistance, representing 1</p>
    <p>Operations:</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 4</p>
    <p>Cu rr</p>
    <p>en t</p>
    <p>(T em</p>
    <p>pe ra</p>
    <p>tu re</p>
    <p>)</p>
    <p>Time</p>
    <p>e.g., ~350C SET to Crystalline</p>
    <p>e.g., ~610C RESET to Amorphous</p>
    <p>READ</p>
  </div>
  <div class="page">
    <p>Comparison of Technologies DRAM PCM NAND Flash Page size Page read latency Page write latency Write bandwidth</p>
    <p>Erase latency</p>
    <p>GB/s  per die</p>
    <p>N/A</p>
    <p>N/A</p>
    <p>per die 2 ms</p>
    <p>Endurance  106  108 104  105 Read energy Write energy Idle power</p>
    <p>Density 1 2  4 4</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 5</p>
    <p>Compared to NAND Flash, PCM is byte-addressable, has orders of magnitude lower latency and higher endurance.</p>
    <p>Sources: [Doller09] [Lee et al. 09] [Qureshi et al.09]</p>
  </div>
  <div class="page">
    <p>Comparison of Technologies DRAM PCM NAND Flash Page size Page read latency Page write latency Write bandwidth</p>
    <p>Erase latency</p>
    <p>GB/s  per die</p>
    <p>N/A</p>
    <p>N/A</p>
    <p>per die 2 ms</p>
    <p>Endurance  106  108 104  105 Read energy Write energy Idle power</p>
    <p>Density 1 2  4 4</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 6</p>
    <p>Compared to DRAM, PCM has better density and scalability; PCM has similar read latency but longer write latency</p>
    <p>Sources: [Doller09] [Lee et al. 09] [Qureshi et al.09]</p>
  </div>
  <div class="page">
    <p>Relative Latencies:</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 7</p>
    <p>N A</p>
    <p>N D</p>
    <p>F la</p>
    <p>sh</p>
    <p>PC M</p>
    <p>D RA</p>
    <p>M</p>
    <p>H ar</p>
    <p>d D</p>
    <p>is k</p>
    <p>N A</p>
    <p>N D</p>
    <p>F la</p>
    <p>sh</p>
    <p>PC M</p>
    <p>D RA</p>
    <p>M</p>
    <p>H ar</p>
    <p>d D</p>
    <p>is k</p>
    <p>Read</p>
    <p>Write</p>
  </div>
  <div class="page">
    <p>PCM-Based Main Memory Organizations</p>
    <p>PCM is a promising candidate for main memory  Recent computer architecture and systems studies</p>
    <p>Three alternative proposals:</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 8</p>
    <p>For algorithm analysis, we focus on PCM main memory, and view optional DRAM as another (transparent/explicit) cache</p>
    <p>[Condit et al09] [Lee et al. 09] [Qureshi et al.09]</p>
  </div>
  <div class="page">
    <p>Challenge: PCM Writes</p>
    <p>Limited endurance  Wear out quickly for hot spots</p>
    <p>High energy consumption  6-10X more energy than a read</p>
    <p>High latency &amp; low bandwidth  SET/RESET time &gt; READ time  PCM chip has limited instantaneous electric current level,</p>
    <p>requires multiple rounds of writes</p>
    <p>Write operation and hardware optimization Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 9</p>
    <p>PCM Page size Page read latency Page write latency Write bandwidth</p>
    <p>Erase latency</p>
    <p>N/A Endurance 106  108 Read energy Write energy Idle power</p>
  </div>
  <div class="page">
    <p>PCM Write Operation</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 10</p>
    <p>PCM 0 1 0 1 1 0 0 1 0 1 1 0 0 0 0 10 0 0 0 1</p>
    <p>[Cho&amp;Lee09] [Lee et al. 09] [Yang et al07] [Zhou et al09]</p>
    <p>Cache line Rounds</p>
    <p>highlighted w/ different colors</p>
    <p>Baseline: several rounds of writes for a cache line  Which bits in which rounds are hard wired</p>
    <p>Optimization: data comparison write  Goal: write only modified bits rather than entire cache line  Approach: read-compare-write</p>
    <p>Skipping rounds with no modified bits</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Phase Change Memory  PCM-Friendly Algorithm Design  B+-Tree Index  Hash Joins  Related Work  Conclusion</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 11</p>
  </div>
  <div class="page">
    <p>Algorithm Design Goals</p>
    <p>Algorithm design in main memory  Prior design goals:</p>
    <p>Low computation complexity  Good CPU cache performance  Power efficiency (more recently)</p>
    <p>New goal: minimizing PCM writes  Improve endurance, save energy, reduce latency  Unlike flash, PCM word granularity</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 12</p>
  </div>
  <div class="page">
    <p>PCM Metrics</p>
    <p>Algorithm parameters:  : cache misses (i.e. cache line fetches)  : cache line write backs  : words modified</p>
    <p>We propose three analytical metrics  Total Wear (for Endurance)  Energy  Total PCM Access Latency</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 13</p>
    <p>lN</p>
    <p>lwN</p>
    <p>wN PCM</p>
    <p>lN lwN</p>
    <p>wN</p>
  </div>
  <div class="page">
    <p>B+-Tree Index</p>
    <p>Cache-friendly B+-Tree:  Node size: one or a few cache lines large</p>
    <p>Problem: insertion/deletion in sorted nodes  Incurs many writes!</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 14</p>
    <p>keysnum</p>
    <p>pointers</p>
    <p>[Rao&amp;Ross00] [Chen et al01] [Hankins et al. 03]</p>
    <p>Insert/delete</p>
  </div>
  <div class="page">
    <p>Our Proposal: Unsorted Nodes</p>
    <p>Unsorted node</p>
    <p>Unsorted node with bitmap</p>
    <p>Unsorted leaf nodes, but sorted non-leaf nodes Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 15</p>
    <p>keysnum</p>
    <p>pointers</p>
    <p>keysbitmap</p>
    <p>pointers</p>
  </div>
  <div class="page">
    <p>Simulation Platform</p>
    <p>Cycle-accurate out-of-order X86-64 simulator: PTLSim  Extended the simulator with PCM support</p>
    <p>Parameters based on computer architecture papers  Sensitivity analysis for the parameters</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 16</p>
    <p>PT LS</p>
    <p>im</p>
    <p>PCMPCMPCMPCM</p>
    <p>Data Comparison Writes</p>
    <p>Details of Write Backs in Memory Controller</p>
  </div>
  <div class="page">
    <p>B+-Tree Index</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 17</p>
    <p>insert delete search 0E+0</p>
    <p>c y c le</p>
    <p>s</p>
    <p>insert delete search 0E+0</p>
    <p>n u m</p>
    <p>b it</p>
    <p>s m</p>
    <p>o d if</p>
    <p>e d</p>
    <p>insert delete search 0</p>
    <p>e n</p>
    <p>e rg</p>
    <p>y (</p>
    <p>m J)</p>
    <p>Node size 8 cache lines; 50 million entries, 75% full; Three workloads:  Inserting 500K random keys  deleting 500K random keys  searching 500K random keys</p>
    <p>Unsorted leaf schemes achieve the best performance  For insert intensive: unsorted-leaf  For insert &amp; delete intensive: unsorted-leaf with bitmap</p>
    <p>Total wear Energy Execution time</p>
  </div>
  <div class="page">
    <p>Simple Hash Join</p>
    <p>Build hash table on smaller (build) relation  Probe hash table using larger (probe) relation</p>
    <p>Problem: too many cache misses  Build + hash table &gt;&gt; CPU cache  Record size is small</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 18</p>
    <p>Build Relation</p>
    <p>Probe Relation</p>
    <p>Hash Table</p>
  </div>
  <div class="page">
    <p>Cache Partitioning</p>
    <p>Partition both tables into cache-sized partitions  Join each pair of partitions</p>
    <p>Problem: too many writes in partition phase!</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 19</p>
    <p>[Shatdal et al.94] [Boncz et al.99] [Chen et al. 04]</p>
  </div>
  <div class="page">
    <p>Our Proposal: Virtual Partitioning</p>
    <p>Virtual partitioning:</p>
    <p>Join a pair of virtual partitions:</p>
    <p>Preserve good CPU cache performance while reducing writes</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 20</p>
    <p>Co m</p>
    <p>pr es</p>
    <p>se d</p>
    <p>Re co</p>
    <p>rd ID</p>
    <p>L is</p>
    <p>ts</p>
    <p>Build Relation</p>
    <p>Probe Relation</p>
    <p>Hash Table</p>
  </div>
  <div class="page">
    <p>Hash Joins</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 21</p>
    <p>record size</p>
    <p>c y c le</p>
    <p>s</p>
    <p>record sizen u</p>
    <p>m b</p>
    <p>it s m</p>
    <p>o d if</p>
    <p>e d</p>
    <p>( lo</p>
    <p>g s</p>
    <p>c a le</p>
    <p>)</p>
    <p>record size</p>
    <p>e n</p>
    <p>e rg</p>
    <p>y (</p>
    <p>m J)</p>
    <p>Virtual partitioning achieves the best performance</p>
    <p>Interestingly, cache partitioning is the worst in many cases</p>
    <p>Total wear Energy Execution time</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>PCM Architecture  Hardware design issues: endurance, write latency, error</p>
    <p>correction, etc.  Our focus: PCM friendly algorithm design</p>
    <p>Byte-Addressable NVM-Based File Systems</p>
    <p>Battery-Backed DRAM  Main Memory Database Systems</p>
    <p>&amp; Cache Friendly Algorithms</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 22</p>
    <p>Not considering read/write</p>
    <p>asymmetry of PCM</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>PCM is a promising non-volatile memory technology  Expected to replace DRAM to be future main memory</p>
    <p>Algorithm design on PCM-based main memory  New goal: minimize PCM writes  Three analytical metrics  PCM-friendly B+-tree and hash joins</p>
    <p>Experimental results show significant improvements</p>
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 23</p>
  </div>
  <div class="page">
    <p>Rethinking Database Algorithms for Phase Change Memory Shimin Chen, Phillip B. Gibbons, Suman Nath 24</p>
    <p>Thank you!</p>
    <p>shimin.chen@intel.com</p>
  </div>
</Presentation>
