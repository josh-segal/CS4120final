<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Serverless Computation with OpenLambda</p>
    <p>Scott Hendrickson, Stephen Sturdevant, Tyler Harter, Venkateshwaran Venkataramani, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
    <p>Unaffiliated</p>
  </div>
  <div class="page">
    <p>Web development in the cloud</p>
    <p>CDN: static content (e.g., JavaScript)</p>
    <p>Compute: dynamic logic (e.g., Python)</p>
    <p>Storage: application data</p>
    <p>RPCs Queries</p>
  </div>
  <div class="page">
    <p>Web development in the cloud</p>
    <p>CDN: static content (e.g., JavaScript)</p>
    <p>Compute: dynamic logic (e.g., Python)</p>
    <p>Storage: application data</p>
    <p>RPCs Queries</p>
    <p>(VMs)</p>
  </div>
  <div class="page">
    <p>Web development in the cloud</p>
    <p>CDN: static content (e.g., JavaScript)</p>
    <p>Compute: dynamic logic (e.g., Python)</p>
    <p>Storage: application data</p>
    <p>compute is evolving</p>
    <p>RPCs Queries</p>
    <p>(VMs)</p>
  </div>
  <div class="page">
    <p>Web development in the cloud</p>
    <p>CDN: static content (e.g., JavaScript)</p>
    <p>Compute: dynamic logic (e.g., Python)</p>
    <p>Storage: application data</p>
    <p>compute is evolving</p>
    <p>RPCs Queries</p>
    <p>(Containers)</p>
  </div>
  <div class="page">
    <p>Web development in the cloud</p>
    <p>CDN: static content (e.g., JavaScript)</p>
    <p>Compute: dynamic logic (e.g., Python)</p>
    <p>Storage: application data</p>
    <p>RPCs Queries</p>
    <p>compute is evolving</p>
    <p>(Lambdas)</p>
  </div>
  <div class="page">
    <p>Web development in the cloud</p>
    <p>CDN: static content (e.g., JavaScript)</p>
    <p>Compute: dynamic logic (e.g., Python)</p>
    <p>Storage: application data</p>
    <p>prior to the Lambda model, cloud compute was neither elastic nor pay-as-you-go</p>
    <p>RPCs Queries</p>
    <p>(Lambdas)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Evolution of compute</p>
    <p>Non-conventional virtualization</p>
    <p>Lambda model</p>
    <p>Why OpenLambda?</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>How to virtualize compute?</p>
  </div>
  <div class="page">
    <p>Classic web stack</p>
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
  </div>
  <div class="page">
    <p>Classic web stack</p>
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>weak virtualization</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>virtual H/W</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>virtual H/W OS</p>
    <p>Server</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>virtual H/W OS</p>
    <p>Server</p>
    <p>Application</p>
    <p>advantages:  very flexible  use any OS</p>
    <p>problems:  interposition  is RAM used? (ballooning)  redundancy (e.g., FS journal)</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>virtual OS Server</p>
    <p>Application</p>
    <p>advantages:  centralized view  init H/W once</p>
  </div>
  <div class="page">
    <p>Are containers good enough?</p>
  </div>
  <div class="page">
    <p>Container case studies</p>
    <p>Literature: Google Borg  Internal container platform [1]  25 second median startup  80% of time spent on package installation  matters for flash crowds, load balance, interactive development, etc</p>
    <p>[1] Large-scale cluster management at Google with Borg. http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf</p>
  </div>
  <div class="page">
    <p>Container case studies</p>
    <p>Literature: Google Borg  Internal container platform [1]  25 second median startup  80% of time spent on package installation  matters for flash crowds, load balance, interactive development, etc</p>
    <p>Experimental: Amazon Elastic Beanstalk  Autoscaling cloud service  Build applications as containerized servers, service RPCs  Rules dictate when to start/stop (various factors)</p>
    <p>[1] Large-scale cluster management at Google with Borg. http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf</p>
  </div>
  <div class="page">
    <p>Interesting autoscaling rule</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>Simulate a small short burst  Maintain 100 concurrent requests  Use 200 ms of compute per request  Run for 1 minute</p>
  </div>
  <div class="page">
    <p>Container Case Study: Elastic Beanstalk</p>
  </div>
  <div class="page">
    <p>Container Case Study: Elastic Beanstalk</p>
  </div>
  <div class="page">
    <p>Container Case Study: Elastic Beanstalk</p>
    <p>Conclusion: Elastic Beanstalk does not scale quickly enough to handle load bursts.</p>
  </div>
  <div class="page">
    <p>Container Case Study: Elastic Beanstalk</p>
    <p>Conclusion: Elastic Beanstalk does not scale quickly enough to handle load bursts.</p>
    <p>Elastic BS</p>
  </div>
  <div class="page">
    <p>Why should it take minutes (or even seconds) to execute scripts that are &lt;1000s of LOC?</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>virtual OS Server</p>
    <p>Application</p>
    <p>advantages:  centralized view  init H/W once</p>
    <p>problems:  large deployment bundle  server spinup</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server</p>
    <p>Application RPCs</p>
    <p>virtual OS Server</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server and Runtime</p>
    <p>Application RPCs virtual servers</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server and Runtime</p>
    <p>Application RPCs virtual servers</p>
    <p>Application</p>
    <p>serverless computing</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server and Runtime</p>
    <p>RPCs virtual servers</p>
    <p>decompose application</p>
    <p>FnA FnZ Fn0 Fn9</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>OS</p>
    <p>Server and Runtime</p>
    <p>RPCs virtual servers</p>
    <p>advantages:  very fast startup  agile deployment  share memory</p>
    <p>problems:  not flexible</p>
    <p>FnA FnZ Fn0 Fn9</p>
    <p>already running</p>
    <p>already in mem</p>
    <p>small deployment</p>
    <p>bundle</p>
  </div>
  <div class="page">
    <p>Lambda elasticity</p>
    <p>Repeat ElasticBS experiment  Maintain 100 concurrent requests  Spin 200 ms per request  Run for 1 minute</p>
  </div>
  <div class="page">
    <p>Lambda elasticity</p>
  </div>
  <div class="page">
    <p>Lambda elasticity</p>
    <p>Conclusion: Lambdas are highly elastic</p>
  </div>
  <div class="page">
    <p>Lambda elasticity</p>
    <p>Conclusion: Lambdas are highly elastic (though a little slow)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Evolution of compute</p>
    <p>Non-conventional virtualization</p>
    <p>Lambda model</p>
    <p>Why OpenLambda?</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Lambda model</p>
    <p>Run user handlers in response to events  web requests (RPC handlers)  database updates (triggers)  scheduled events (cron jobs)</p>
    <p>Pay per function invocation  actually pay-as-you-go  no charge for idle time between calls  e.g., charge actual_time * memory_cap</p>
  </div>
  <div class="page">
    <p>Share everything</p>
    <p>Share server pool between customers  Any worker can execute any handler  No spinup time  Less switching</p>
    <p>Encourage specific runtime (C#, Node.JS, Python)  Minimize network copying  Code will be in resident in memory</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>developer upload code</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>small</p>
    <p>large</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>user RPC</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>user RPC</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>user RPC</p>
    <p>H2</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>user RPC</p>
    <p>H2 sandbox</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Multi-node architecture</p>
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>user RPC</p>
    <p>H2 sandbox</p>
    <p>H1 H2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Evolution of compute</p>
    <p>Non-conventional virtualization</p>
    <p>Lambda model</p>
    <p>Why OpenLambda?</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Need for open source serverless</p>
    <p>Many research areas  Applications, tools, distributed systems, execution engines  Evaluate ideas by building, not just simulating</p>
  </div>
  <div class="page">
    <p>Need for open source serverless</p>
    <p>Many research areas  Applications, tools, distributed systems, execution engines  Evaluate ideas by building, not just simulating</p>
    <p>AWS Lambda Google Cloud Functions</p>
    <p>First implementations are proprietary</p>
  </div>
  <div class="page">
    <p>Need for open source serverless</p>
    <p>Many research areas  Applications, tools, distributed systems, execution engines  Evaluate ideas by building, not just simulating</p>
    <p>AWS Lambda Google Cloud Functions</p>
    <p>First implementations are proprietary</p>
    <p>OpenLambda: explore further-reaching techniques  Goal: enable academic research on Lambdas  Storage awareness, kernel support, RPC inspection</p>
  </div>
  <div class="page">
    <p>Need for open source serverless</p>
    <p>Many research areas  Applications, tools, distributed systems, execution engines  Evaluate ideas by building, not just simulating</p>
    <p>Other recent open-source implementations</p>
    <p>AWS Lambda Google Cloud Functions</p>
    <p>Azure Functions</p>
    <p>First implementations are proprietary</p>
    <p>IBM OpenWhisk</p>
    <p>OpenLambda: explore further-reaching techniques  Goal: enable academic research on Lambdas  Storage awareness, kernel support, RPC inspection</p>
  </div>
  <div class="page">
    <p>OpenLambda research topics</p>
    <p>Workloads  Workload studies  Benchmarks  Versioning+dependencies  Code characteristics  Package management</p>
    <p>Distributed systems  Databases  Load balancing  Scatter gather patterns  Sessions and streams</p>
    <p>Tools  Debugging  Monetary cost optimization  Porting legacy applications</p>
    <p>Execution engines  Sandboxing  Containers  Just-in-time interpreters</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Understanding Lambda workloads Collaborate with industry, measurement studies</p>
    <p>e.g., Azure Functions</p>
    <p>Build LambdaBench  Everybody joining builds an application  Ticketing, calendar, autocomplete, OCR, flash card, stock alert,</p>
    <p>blog, and scientific compute applications</p>
    <p>Trace RPC calls (e.g., AJAX) of existing apps</p>
    <p>Gmail:</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Developer tools Portability</p>
    <p>E.g., can Django apps run on Lambdas?</p>
    <p>Debugging  Understand Lambda flows, may be a complex graph</p>
    <p>Optimizing expense  Hard with containers: how to share 1-hour server time across requests?  With Lambdas: know cost of every RPC and query  Show where money is going</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Building locality-aware Lambdas</p>
    <p>Use deep inspection of RPCs for routing  Working with gRPC group  GSOC project (Stephen Sturdevant)</p>
  </div>
  <div class="page">
    <p>Building locality-aware Lambdas</p>
    <p>Use deep inspection of RPCs for routing  Working with gRPC group  GSOC project (Stephen Sturdevant)</p>
    <p>Locality factors  code locality  data locality  session locality</p>
  </div>
  <div class="page">
    <p>Building locality-aware Lambdas</p>
    <p>Use deep inspection of RPCs for routing  Working with gRPC group  GSOC project (Stephen Sturdevant)</p>
    <p>Locality factors  code locality  data locality  session locality</p>
    <p>Load Balancer</p>
    <p>Lambda workers</p>
    <p>call B ?</p>
  </div>
  <div class="page">
    <p>Building locality-aware Lambdas</p>
    <p>Use deep inspection of RPCs for routing  Working with gRPC group  GSOC project (Stephen Sturdevant)</p>
    <p>Locality factors  code locality  data locality  session locality</p>
    <p>Load Balancer</p>
    <p>Lambda workers</p>
    <p>m em</p>
    <p>di sk</p>
    <p>m em</p>
    <p>di sk</p>
    <p>numpy</p>
    <p>numpy</p>
    <p>A numpy</p>
    <p>call B (uses numpy)</p>
  </div>
  <div class="page">
    <p>Building locality-aware Lambdas</p>
    <p>Use deep inspection of RPCs for routing  Working with gRPC group  GSOC project (Stephen Sturdevant)</p>
    <p>Locality factors  code locality  data locality  session locality</p>
    <p>Load Balancer</p>
    <p>Lambda workers</p>
    <p>DB shard: A-M (keys)</p>
    <p>DB shard: N-Z (keys)</p>
    <p>call predict XB B</p>
    <p>local query</p>
  </div>
  <div class="page">
    <p>Building locality-aware Lambdas</p>
    <p>Use deep inspection of RPCs for routing  Working with gRPC group  GSOC project (Stephen Sturdevant)</p>
    <p>Locality factors  code locality  data locality  session locality</p>
    <p>Load Balancer</p>
    <p>Lambda workers</p>
    <p>browser session service</p>
    <p>session service</p>
    <p>web socket</p>
    <p>Lambda Engine</p>
    <p>Lambda Engine</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Load Balancer</p>
    <p>Server</p>
    <p>Python</p>
    <p>workers</p>
    <p>Load Balancer</p>
    <p>load balancers</p>
    <p>handler store</p>
    <p>H2 sandbox</p>
    <p>H1 H2developer upload code</p>
    <p>user RPC</p>
    <p>workloads</p>
    <p>tools</p>
    <p>distributed systems</p>
    <p>execution engine</p>
    <p>OpenLambda research topics</p>
  </div>
  <div class="page">
    <p>Minimizing latency</p>
  </div>
  <div class="page">
    <p>Minimizing latency</p>
    <p>reduce</p>
    <p>How can we reduce base latency?</p>
  </div>
  <div class="page">
    <p>Execution engine</p>
    <p>Sandboxing  Process VMs (e.g., JVM): how to mostly initialize?  Containers: how to speed up restart and optimize pausing?</p>
  </div>
  <div class="page">
    <p>Execution engine</p>
    <p>Language runtimes  Challenge: code warms up over time  How to share dynamic optimizations?</p>
    <p>code code</p>
    <p>worker A worker B</p>
    <p>interpreted compiled</p>
    <p>cold</p>
    <p>cold</p>
    <p>cold</p>
    <p>Sandboxing  Process VMs (e.g., JVM): how to mostly initialize?  Containers: how to speed up restart and optimize pausing?</p>
    <p>tracing enables inline optimization</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Evolution of compute</p>
    <p>Non-conventional virtualization</p>
    <p>Lambda model</p>
    <p>Why OpenLambda?</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion Lambdas finally deliver on promises of the cloud</p>
    <p>finally pay-as-you-go  finally elastic  will fundamentally change how people build scalable applications</p>
    <p>New challenges in every area of systems  scheduling, isolation, languages, debugging, tools, storage,</p>
    <p>Getting involved  contribute at https://github.com/open-lambda  site: https://open-lambda.org/</p>
  </div>
</Presentation>
