<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Broom: sweeping out Garbage Collection from Big Data systems</p>
    <p>Ionel Gog Jana Giceva</p>
    <p>Malte Schwarzkopf Kapil Vaswani</p>
    <p>Dimitrios Vytiniotis Ganesan Ramalingam</p>
    <p>Manuel Costa Derek G. Murray</p>
    <p>Steven Hand Michael Isard</p>
  </div>
  <div class="page">
    <p>Meet Kermit from Sesame, Inc.</p>
    <p>Kermit runs:</p>
    <p>batch computations</p>
    <p>graph computations</p>
    <p>incremental computations</p>
    <p>He uses stateful dataflow systems (e.g., Naiad, Dryad, Spark)</p>
  </div>
  <div class="page">
    <p>Incremental strongly connected components</p>
    <p>GC pausesSync barrier 4</p>
    <p>m ac</p>
    <p>hi ne</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Run as a collection of actors</p>
    <p>Communicate via message passing</p>
    <p>Well-defined communication points</p>
    <p>Properties of dataflow systems</p>
  </div>
  <div class="page">
    <p>public class AggregateActor</p>
    <p>Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) // Update state... var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], msg)</p>
    <p>void OnNotify(Time time) Send(outgoingMsg); // Clear state for time... state.Remove(time);</p>
  </div>
  <div class="page">
    <p>public class AggregateActor</p>
    <p>Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) // Update state... var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], msg)</p>
    <p>void OnNotify(Time time) Send(outgoingMsg); // Clear state for time... state.Remove(time);</p>
  </div>
  <div class="page">
    <p>public class AggregateActor</p>
    <p>Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) // Update state... var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], msg)</p>
    <p>void OnNotify(Time time) Send(outgoingMsg); // Clear state for time... state.Remove(time);</p>
  </div>
  <div class="page">
    <p>Oscar the grouch: In-house</p>
    <p>Garbage Collection expert</p>
  </div>
  <div class="page">
    <p>Throughput vs. pause time</p>
    <p>Throughput</p>
    <p>P au</p>
    <p>se ti</p>
    <p>m e</p>
    <p>Stop-the-world</p>
    <p>Concurrent</p>
    <p>Ref counting</p>
    <p>Real-time Ideal</p>
  </div>
  <div class="page">
    <p>Common language runtime GC</p>
    <p>Generation 0</p>
    <p>Generation 1</p>
    <p>Generation 2</p>
    <p>Large objects</p>
    <p>Weak generational hypothesis: most objects die young</p>
  </div>
  <div class="page">
    <p>Common language runtime GC</p>
    <p>Generation 0</p>
    <p>Generation 1</p>
    <p>Generation 2</p>
    <p>Large objects</p>
    <p>Weak generational hypothesis: most objects die young</p>
  </div>
  <div class="page">
    <p>Common language runtime GC</p>
    <p>Generation 0</p>
    <p>Generation 1</p>
    <p>Generation 2</p>
    <p>Large objects</p>
    <p>Weak generational hypothesis: most objects die young</p>
  </div>
  <div class="page">
    <p>Common language runtime GC</p>
    <p>Generation 0</p>
    <p>Generation 1</p>
    <p>Generation 2</p>
    <p>Large objects</p>
    <p>Weak generational hypothesis: most objects die young</p>
    <p>Collect</p>
  </div>
  <div class="page">
    <p>Common language runtime GC</p>
    <p>Generation 0</p>
    <p>Generation 1</p>
    <p>Generation 2</p>
    <p>Large objects</p>
    <p>Weak generational hypothesis: most objects die young</p>
    <p>Collect</p>
    <p>Does not hold in stateful dataflows! (e.g. Naiad, Dryad, Spark)</p>
  </div>
  <div class="page">
    <p>Why only co-locate objects based on</p>
    <p>their age?</p>
  </div>
  <div class="page">
    <p>Flexible object co-location</p>
    <p>lifetime</p>
    <p>ownership</p>
    <p>type</p>
  </div>
  <div class="page">
    <p>Throughput vs. pause time</p>
    <p>Throughput</p>
    <p>P au</p>
    <p>se ti</p>
    <p>m e</p>
    <p>Stop-the-world</p>
    <p>Concurrent</p>
    <p>Ref counting</p>
    <p>Real-time</p>
    <p>???</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Region-based memory management</p>
    <p>lifetime</p>
    <p>ownership</p>
    <p>type</p>
    <p>region 1</p>
    <p>region 2</p>
    <p>region 3</p>
  </div>
  <div class="page">
    <p>The goods and bads</p>
    <p>Decrease time spent GCing</p>
    <p>Reduce runtime</p>
    <p>Difficult to write programs using regions</p>
    <p>Easy to leak memory</p>
    <p>Trades memory usage for throughput</p>
  </div>
  <div class="page">
    <p>Whats different?</p>
    <p>Stateful dataflows run as a collection of actors</p>
    <p>Communication done via message-passing</p>
    <p>Many objects have identical lifetime</p>
    <p>Users are not exposed to the underlying implementation</p>
    <p>We target data processing frameworks</p>
  </div>
  <div class="page">
    <p>Memory usage pattern</p>
    <p>Mutable stateImmutable</p>
    <p>Transferable</p>
    <p>Scratchpad</p>
  </div>
  <div class="page">
    <p>Overview of Broom</p>
    <p>Three types of regions:</p>
    <p>Actor-scoped</p>
    <p>Transferable</p>
    <p>Temporary</p>
    <p>Implemented in Bartok, a research compiler from MSR</p>
  </div>
  <div class="page">
    <p>Aggregate actor public class AggregateActor Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) if (state[time] == null) state[time] = new Dictionary&lt;K,V&gt;();</p>
    <p>var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], entry)</p>
    <p>void OnNotify(Time time) // Clear state for time... Send(outgoingMsg); 24</p>
  </div>
  <div class="page">
    <p>Actor-scoped regions public class AggregateActor Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) if (state[time] == null) state[time] = new Dictionary&lt;K,V&gt;();</p>
    <p>var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], entry)</p>
    <p>void OnNotify(Time time) // Clear state for time... Send(outgoingMsg);</p>
    <p>Lifetime is identical to the actors lifetime</p>
    <p>Used to store actors fields</p>
    <p>Can be garbage collected 25</p>
  </div>
  <div class="page">
    <p>Transferable regions public class AggregateActor Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) if (state[time] == null) state[time] = new Dictionary&lt;K,V&gt;();</p>
    <p>var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], entry)</p>
    <p>void OnNotify(Time time) // Clear state for time... Send(outgoingMsg);</p>
    <p>Lifetime can span over the lifetime of multiple actors</p>
    <p>A region can be accessed by only one actor at a time</p>
    <p>Used to pass data among actors</p>
  </div>
  <div class="page">
    <p>Temporary regions public class AggregateActor Dictionary&lt;Time, Dictionary&lt;K, V&gt;&gt; state;</p>
    <p>void OnReceive(Message msg, Time time) if (state[time] == null) state[time] = new Dictionary&lt;K,V&gt;();</p>
    <p>var key = keySelector(msg); state[time][key] = Aggregate(state[time][key], entry)</p>
    <p>void OnNotify(Time time) // Clear state for time... Send(outgoingMsg);</p>
    <p>They are not garbage collected</p>
    <p>Used to store temporary data</p>
    <p>Lifetime does not span over multiple methods</p>
  </div>
  <div class="page">
    <p>How well does it work?</p>
  </div>
  <div class="page">
    <p>Naiad emulator</p>
    <p>Actor over 40 Naiad time epochs</p>
    <p>500k-600k documents per epoch</p>
    <p>10-20 new author entries per epoch</p>
  </div>
  <div class="page">
    <p>How well does it work?</p>
    <p>Lo w</p>
    <p>er is</p>
    <p>b et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>How well does it work?</p>
    <p>Select</p>
    <p>Select: stateless actor</p>
    <p>Lo w</p>
    <p>er is</p>
    <p>b et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>How well does it work?</p>
    <p>Select Aggregate</p>
    <p>Aggregate: stores partial aggregation results</p>
    <p>Lo w</p>
    <p>er is</p>
    <p>b et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>How well does it work?</p>
    <p>Select Aggregate Join</p>
    <p>Join: highly stateful actor</p>
    <p>Lo w</p>
    <p>er is</p>
    <p>b et</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>Regions work well for stateful dataflow systems</p>
    <p>Preliminary results show 11-36% runtime reduction</p>
    <p>Future work: Type safety and automatic region usage inference</p>
    <p>Summary and future work</p>
    <p>@ICGog 34</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Allowed points-to relationship</p>
  </div>
  <div class="page">
    <p>Naiad primer</p>
    <p>Actor 1</p>
    <p>Actor 3</p>
    <p>Actor 2 (message, time)</p>
  </div>
  <div class="page">
    <p>Naiad primer</p>
    <p>Actor 1</p>
    <p>Actor 3</p>
    <p>Actor 2 OnRecv(message, time)</p>
  </div>
  <div class="page">
    <p>Naiad primer</p>
    <p>Actor 1</p>
    <p>Actor 3</p>
    <p>Actor 2</p>
  </div>
  <div class="page">
    <p>Naiad primer</p>
    <p>Actor 1</p>
    <p>Actor 3</p>
    <p>Actor 2</p>
    <p>OnRecv(message, time)</p>
    <p>OnRecv(message, time)</p>
    <p>OnNotify(time)</p>
  </div>
  <div class="page">
    <p>Minor vs. major collections</p>
  </div>
  <div class="page">
    <p>Percentage of time spent GCing</p>
  </div>
</Presentation>
