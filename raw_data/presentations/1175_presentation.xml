<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Accelerating Rule-matching Systems with Learned Ranker</p>
    <p>Z H A O L U C I S L I U N I V E R S I T Y O F S C I E N C E A N D T E C H N O L O G Y C H I N A C H I E H - J A N M I K E L I A N G M I C R O S O F T R E S E A R C H W E I B A I M I C R O S O F T R E S E A R C H Q I M I N G Z H E N G S H A N G H A I J I A O T O N G U N I V E R S I T Y Y O N G Q I A N G X I O N G M I C R O S O F T R E S E A R C H G U A N G Z H O N G S U N U N I V E R S I T Y O F S C I E N C E A N D T E C H N O L O G Y C H I N A</p>
  </div>
  <div class="page">
    <p>Rule Engine Matching Process</p>
    <p>Rule 1</p>
    <p>Rule 2</p>
    <p>Rule Match</p>
    <p>Rule N</p>
    <p>Rule 1</p>
    <p>Rule 2</p>
    <p>Rule Match</p>
    <p>Rule N</p>
    <p>Rule Match</p>
    <p>Rule A</p>
    <p>Rule 1</p>
    <p>Rule X</p>
    <p>Filter* Ranker</p>
    <p>Speed up the engine by removing certain un-matched rule(s)</p>
    <p>* Roesch, Martin. &quot;Snort: Lightweight intrusion detection for networks.&quot;</p>
    <p>Input Prioritize matching rule as a top</p>
    <p>candidate to achieve early termination</p>
    <p>E.g. a String, HTTP Request</p>
    <p>Matched Rule ID</p>
  </div>
  <div class="page">
    <p>Challenges of Ranker Design  Ranker should estimate input features, instead of assuming data stream distribution.  LRU or LFU based ranker orders ruleset for current input from historical data stream.</p>
    <p>LRU or LFU is good at long-tailed data stream but bad in uniform distribution.</p>
    <p>Long-tailed Distribution</p>
    <p>Uniform Distribution</p>
  </div>
  <div class="page">
    <p>Challenges of Ranker Design Learned ranker should consider the trade-off between inference cost and accuracy.</p>
    <p>Learned ranker should consider training data quality. Artificial datasets might not provide sufficient insights to learn decision boundaries.</p>
    <p>Logged real-world system workloads might not cover all cases.</p>
    <p>E n</p>
    <p>d -t</p>
    <p>o -e</p>
    <p>n d</p>
    <p>l a</p>
    <p>te n</p>
    <p>cy</p>
    <p>Model complexities</p>
    <p>CRS SNORT Optimal CRS Model</p>
    <p>Optimal SNORT Model</p>
  </div>
  <div class="page">
    <p>Performance Gains from Learned Ranker  Average reduction in the number of rules that the rule engine needs to process.</p>
    <p>Average reduction in latency for matching one input on different rule engines for CRS.</p>
    <p>Rule set No rule ranker Rule ranker Reduction</p>
    <p>CRS 22.38 1.68 92.49%</p>
    <p>SNORT 91.56 1.34 98.54%</p>
    <p>Rule engine(regex) No rule ranker Rule ranker Reduction</p>
    <p>PCRE 1878.79 sec 404.36 sec 78.47%</p>
    <p>PCRE with JIT 773.82 sec 185.65 sec 78.81%</p>
    <p>RE2 206.01 sec 55.15 sec 73.22%</p>
  </div>
  <div class="page">
    <p>Thanks for watching!</p>
    <p>USENIX 2019, July 12th 11: 50 am-1:10 pm</p>
    <p>Track II : Machine Learning Applications &amp; System Aspects</p>
  </div>
</Presentation>
