<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Harmonizing Performance and Isolation in Microkernels with Efficient Intra-kernel Isolation and Communication</p>
    <p>Jinyu Gu, Xinyue Wu, Wentai Li, Nian Liu, Zeyu Mi,</p>
    <p>Yubin Xia, Haibo Chen</p>
  </div>
  <div class="page">
    <p>Monolithic Kernel and Microkernel</p>
  </div>
  <div class="page">
    <p>Monolithic Kernel and Microkernel</p>
    <p>Microkernels philosophy: Moving most OS components into isolated user processes</p>
  </div>
  <div class="page">
    <p>Benefits and Usages of Microkernel</p>
    <p>Achieves good extensibility, security, and fault isolation</p>
    <p>Succeeds in safety-critical scenarios (Airplane, Car)</p>
    <p>For more general-purpose applications (Google Zircon)</p>
  </div>
  <div class="page">
    <p>Expensive Communication Cost</p>
    <p>Tradeoff: Performance and Isolation  Inter-process communication (IPC) overhead</p>
    <p>App FileSystem Disk</p>
    <p>Driver</p>
    <p>Microkernel</p>
    <p>IPC</p>
  </div>
  <div class="page">
    <p>IPC Overhead is Considerable</p>
    <p>SQLite xv6FS Ramdisk</p>
    <p>Microkernel 20%</p>
    <p>Zircon seL4 w/ kpti</p>
    <p>seL4 w/o kpti</p>
    <p>IPC Cost Real Work in Servers</p>
    <p>Evaluated on Dell PowerEdge R640 server with Intel Xeon Gold 6138 CPU</p>
    <p>Direct cost: privilege switch, process switch,</p>
    <p>Indirect cost: CPU internal structures pollution</p>
  </div>
  <div class="page">
    <p>Goal: Both Ends</p>
    <p>Harmonize the tension between Performance and Isolation in microkernels</p>
    <p>Reducing the IPC overhead</p>
    <p>Maintaining the isolation guarantee</p>
  </div>
  <div class="page">
    <p>New Hardware Brings Opportunities</p>
    <p>PKU: Protection Key for Userspace (aka. MPK)  Assign each page one PKEY (i.e., memory domain ID)</p>
    <p>A new register PKRU stores read/write permission</p>
    <p>[0:15]</p>
  </div>
  <div class="page">
    <p>Efficient Intra-Process Isolation</p>
    <p>ERIM [Security19] &amp; Hodor [ATC19]</p>
    <p>Based on Intel PKU</p>
    <p>Build isolate domains in the same process efficiently</p>
    <p>Domain switch only takes 28 cycles (modify PKRU)</p>
    <p>App Part</p>
    <p>Library-1</p>
    <p>Library-2</p>
  </div>
  <div class="page">
    <p>Intra-Process Isolation + Microkernel</p>
    <p>Hardware</p>
    <p>Microkernel</p>
    <p>Process IPC Sched</p>
    <p>App App FS MM Net Drv</p>
    <p>System Servers</p>
    <p>Intel PKU</p>
  </div>
  <div class="page">
    <p>Design Choice #1</p>
    <p>Microkernel</p>
    <p>App</p>
    <p>Server-1</p>
    <p>Server-2</p>
    <p>Server-3</p>
    <p>Isolate different system servers in a single process.</p>
    <p>Isolated domains</p>
    <p>Just as traditional IPCs</p>
  </div>
  <div class="page">
    <p>Design Choice #2</p>
    <p>Microkernel</p>
    <p>Lets get more aggressive!</p>
    <p>Server-1</p>
    <p>Server-2</p>
    <p>Server-3</p>
    <p>App-1</p>
    <p>Server-1</p>
    <p>Server-2</p>
    <p>Server-3</p>
    <p>App-2</p>
    <p>Drawbacks 1. Update Server mapping is costly</p>
  </div>
  <div class="page">
    <p>An Observation on Intel PKU</p>
    <p>A misleading name  Protection Key for Userspace</p>
    <p>It still takes effect when in kernel (ring-0)  The Userspace means user-accessible memory  U/K bit in PTE</p>
  </div>
  <div class="page">
    <p>UnderBridge: Sinking System Servers</p>
    <p>Hardware</p>
    <p>Microkernel</p>
    <p>App App FS MM Net Drv</p>
    <p>System Servers</p>
    <p>Intel PKU</p>
    <p>Intra-kernel isolation</p>
  </div>
  <div class="page">
    <p>Design Choice #3: UnderBridge</p>
    <p>U ser</p>
    <p>K ernel</p>
    <p>Dom-0 Microkernel</p>
    <p>App</p>
    <p>Dom-3 Server-3</p>
    <p>Dom-1 Server-1</p>
    <p>Dom-2 Server-2</p>
    <p>App App</p>
    <p>Build execution domains in the kernel page table</p>
  </div>
  <div class="page">
    <p>Execution Domain  Execution domain 0 is for the microkernel</p>
    <p>Use memory domain 0  Can access all the memory</p>
    <p>Others own a private memory domain  A private MPK memory domain ID</p>
    <p>Shared memory  Allocate a free</p>
    <p>MPK memory domain ID</p>
    <p>Dom-0 Microkernel</p>
    <p>Dom-1 Server-1</p>
    <p>Dom-2 Server-2</p>
  </div>
  <div class="page">
    <p>IPC Gate</p>
    <p>Connect two servers  Generated by the microkernel  Resides in memory domain 0 (execute-only for servers)</p>
    <p>Transfer control flow during IPC invocations  context switch and domain switch</p>
    <p>Connect the microkernel and servers  System calls</p>
    <p>Dom-1 Server-1</p>
    <p>Dom-2 Server-2</p>
    <p>Dom-2 Server-2</p>
    <p>Dom-0 Microkernel</p>
  </div>
  <div class="page">
    <p>Server Migration</p>
    <p>The number of execution domain is limited  Hardware only provides 16 memory domains  Time-multiplexing is expensive</p>
    <p>Move servers between user and kernel space  Disjoint virtual memory regions</p>
    <p>Runtime migration</p>
  </div>
  <div class="page">
    <p>Privilege Deprivation  In-kernel servers have supervisor privilege</p>
    <p>Can affect the whole system if compromised  CFI (with binary scanning) incurs runtime overhead  Binary rewriting only is infeasible</p>
    <p>Prevent servers to execute privilege instructions  Add a tiny secure monitor in hypervisor mode  For instructions rarely execute: VMExits  For instructions that frequently required: Rewriting</p>
  </div>
  <div class="page">
    <p>Other Designs and Implementations</p>
    <p>IPC capability authentication</p>
    <p>Seamless server migration</p>
    <p>Privilege deprivation details</p>
  </div>
  <div class="page">
    <p>Cross-server IPC Round-Trip Latency</p>
    <p>C yc</p>
    <p>le s</p>
    <p>Monolithic</p>
    <p>ChCore (UnderBridge)</p>
    <p>SkyBridge</p>
    <p>seL4 seL4-KPTI</p>
    <p>Fiasco.OC</p>
    <p>Fiasco.OC -KPTI</p>
    <p>Zircon</p>
    <p>C yc</p>
    <p>le s</p>
    <p>Evaluated on Dell PowerEdge R640 server with Intel Xeon Gold 6138 CPU</p>
  </div>
  <div class="page">
    <p>SQLite Throughput under YCSB-A</p>
    <p>Zircon Fiasco.OC seL4</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut</p>
    <p>Native w/ KPTI Native w/o KPTI</p>
    <p>SkyBridge</p>
    <p>UnderBridge Monolithic</p>
    <p>Monolithic w/o KPTI</p>
    <p>Evaluated on Dell PowerEdge R640 server with Intel Xeon Gold 6138 CPU</p>
  </div>
  <div class="page">
    <p>Conclusion &amp; Thanks!</p>
    <p>UnderBridge  A redesign of the runtime structure of microkernel</p>
    <p>OSes for faster OS services</p>
    <p>The efficient intra-kernel isolation mechanism may also be used to harden the isolation of monolithic kernels</p>
    <p>Q&amp;A: gujinyu@sjtu.edu.cn</p>
  </div>
</Presentation>
