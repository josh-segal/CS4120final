<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>software defining system devices</p>
    <p>with the BANANA double split driver model</p>
    <p>Hakim WEATHERSPOON Cornell University</p>
    <p>Dan WILLIAMS, Hani JAMJOOM IBM Watson Research Center</p>
  </div>
  <div class="page">
    <p>Decoupling gives Flexibility</p>
    <p>Clouds flexibility comes from decoupling device functionality from physical devices  aka virtualization</p>
    <p>Can place VM anywhere  Consolidation  Instantiation  Migration  Placement optimizations</p>
  </div>
  <div class="page">
    <p>Are all Devices Decoupled?</p>
    <p>Today: split driver model  Guests dont need device-specific driver  System portion interfaces with physical device</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS) Dom U (VM)</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Physical Machine</p>
    <p>Back-end Driver</p>
    <p>Hardware Driver</p>
    <p>System portion</p>
  </div>
  <div class="page">
    <p>Are all Devices Decoupled?</p>
    <p>Today: split driver model  Guests dont need device-specific driver  System portion interfaces with physical device</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS) Dom U (VM)</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Physical Machine</p>
    <p>Back-end Driver</p>
    <p>Hardware Driver</p>
    <p>System portion</p>
    <p>Dependencies on hardware  Presence of</p>
    <p>device (e.g., GPU, FPGA)</p>
    <p>Device-related configuration (e.g., VLAN)</p>
  </div>
  <div class="page">
    <p>Devices Limit Flexibility</p>
    <p>Split driver model: dependencies break if VM moves</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS) Dom U (VM)</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Physical Machine</p>
    <p>Back-end Driver</p>
    <p>Hardware Driver</p>
    <p>System portion</p>
    <p>No easy place to plug into hardware driver  System portion</p>
    <p>connected in ad-hoc way</p>
  </div>
  <div class="page">
    <p>Banana Double-Split</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS) Dom U (VM)</p>
    <p>Wire</p>
    <p>Corm</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Spike</p>
    <p>Endpoint</p>
    <p>Physical Machine</p>
    <p>Clean separation between hardware driver (Corm) and backend driver (Spike)</p>
    <p>Standard interface between Corm and Spike (endpoint)</p>
    <p>Connected with wires</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS) Dom U (VM)</p>
    <p>Wire</p>
    <p>Corm</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Spike</p>
    <p>Endpoint</p>
    <p>Physical Machine</p>
    <p>Banana Double-Split Driver Model  Implementation  Experiments  Related Work  Summary</p>
  </div>
  <div class="page">
    <p>(Anatomy of a Banana Plant)</p>
    <p>Corm</p>
    <p>Flower Spike</p>
  </div>
  <div class="page">
    <p>Corms</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS)</p>
    <p>Corm</p>
    <p>Dom U (VM)</p>
    <p>Wire</p>
    <p>Corm</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Spike</p>
    <p>Endpoint</p>
    <p>Physical Machine</p>
    <p>One Corm per physical device</p>
    <p>Expose one or more endpoints  Virtual NIC-like</p>
    <p>interfaces</p>
    <p>Connect to one or more Spikes</p>
  </div>
  <div class="page">
    <p>Spikes</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS)</p>
    <p>Corm</p>
    <p>Dom U (VM)</p>
    <p>Wire</p>
    <p>Corm</p>
    <p>Ring Buffer</p>
    <p>Front-end Driver</p>
    <p>Spike</p>
    <p>Endpoint</p>
    <p>Physical Machine</p>
    <p>One Spike per front-end driver</p>
    <p>Expose an endpoint</p>
    <p>Attach to a Corm</p>
    <p>No need to share machine!</p>
  </div>
  <div class="page">
    <p>Wires</p>
    <p>Connections between endpoints  E.g., tunnel, VPN, local bridge</p>
    <p>Each hypervisor contains endpoint controller</p>
    <p>Advertises endpoints (e.g., for Corms)  Looks up endpoints (e.g., for Spikes)  Sets wire type  Integrates with VM migration</p>
    <p>Simple interface  connect/disconnect</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Hypervisor</p>
    <p>Dom 0 (Host OS) Dom U (VM)</p>
    <p>Physical Machine</p>
    <p>Ring Buffer</p>
    <p>Front-end eth0</p>
    <p>Spike</p>
    <p>Endpoint Bridge</p>
    <p>vSwitch</p>
    <p>Corm</p>
    <p>Endpoint</p>
    <p>Endpoint</p>
    <p>Outgoing Interface</p>
    <p>eth0</p>
    <p>Back vif1.0</p>
    <p>to remote host via eth0</p>
    <p>Endpoint</p>
    <p>Xen network devices</p>
    <p>Endpoint exposes netdev</p>
    <p>Grafted to existing devices via endpoint bridge</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Types of wires  Native (bridge)  Encapsulating (in kernel module)  Tunneling (Open-VPN based)</p>
    <p>/proc interface for configuring wires</p>
    <p>Integrated with live migration</p>
  </div>
  <div class="page">
    <p>Initial Experimentation</p>
    <p>Ultimate test of location independence  Cross-cloud live migration  Keep using the same Corm</p>
    <p>Banana Wire Performance</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>Amazon EC2 and local resources  EC2 (4XL): 33 ECUs, 23 GB memory, 10 Gbps Ethernet  Local: 12 cores @ 2.93 GHz, 24 GB memory, 1Gbps Ethernet</p>
    <p>Xen-blanket for nested virtualization  Dom 0: 8 vCPUs, 4 GB memory  PV guests: 4 vCPUs, 8 GB memory</p>
    <p>Local NFS server for VM disk images  netperf to measure throughput and latency</p>
    <p>1400 byte packets 15</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>Time (s)</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
    <p>Cross-cloud Live Migration  Continuous netperf traffic between VMs</p>
    <p>It works!</p>
    <p>ro ug</p>
    <p>hp ut</p>
    <p>(M bp</p>
    <p>s)</p>
    <p>Time (s)</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
  </div>
  <div class="page">
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>Time (s)</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
    <p>Corm Switching  Dependency</p>
    <p>eliminated after second VM migrated</p>
    <p>Switching Corms can recover performance</p>
    <p>ro ug</p>
    <p>hp ut</p>
    <p>(M bp</p>
    <p>s)</p>
    <p>Time (s)</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>st ar</p>
    <p>ts</p>
    <p>V M</p>
    <p>ig ra</p>
    <p>tio n</p>
    <p>en ds</p>
  </div>
  <div class="page">
    <p>Migration Numbers</p>
    <p>Downtime Duration Banana 1.3 [0.5] 20.13 [0.1] None (nested) 1.0 [0.5] 20.04 [0.1] None (not nested) 0.7 [0.4] 19.86 [0.2]</p>
    <p>Downtime Duration Local to Local 1.3 [0.5] 20.13 [0.1] EC2 to EC2 1.9 [0.3] 10.69 [0.6] Local to EC2 2.8 [1.2] 162.25 [150.0]</p>
    <p>Mean [w/std. dev] local to local live VM migration (s)</p>
    <p>Mean [w/std. dev] local to local live VM migration (s)</p>
    <p>Experimental setup has overhead  Nesting increases</p>
    <p>downtime by 43%</p>
    <p>Flexibility to do such extreme migration has a cost  Migrating Banana</p>
    <p>endpoints introduces a further 30% overhead</p>
    <p>Cross-cloud live migration had 2.8s downtime</p>
  </div>
  <div class="page">
    <p>Encapsulating Wires</p>
    <p>baseline tinc OpenVPN vtun Banana wire</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>bp s)</p>
    <p>non-nested nested</p>
    <p>UDP throughput experiment</p>
    <p>Using kernel module is especially important in nested environment  Factor of 1.55 improvement becomes factor of 3.28</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Other cut points  Block tap drivers (block devices)</p>
    <p>Continuous access  Netchannel</p>
    <p>Specialized solutions  Nomad, USB/IP</p>
    <p>Virtual networking  VL2, NetLord, VIOLIN, others</p>
  </div>
  <div class="page">
    <p>Summary  Banana Double-Split driver model decouples</p>
    <p>virtual devices from physical  Provides location independence  Mappings are software-defined</p>
    <p>So far, implemented network device  Demonstrated cross-cloud live migration</p>
    <p>Future directions  Controller to manage mappings/re-wirings?  Corm switching?  Other devices? 21</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Corm</p>
    <p>Flower Spike</p>
  </div>
</Presentation>
