<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Cache Placement in Sensor Networks Under Update Cost Constraint</p>
    <p>Bin Tang, Samir Das, and Himanshu Gupta</p>
    <p>Department of Computer Science Stony Brook University Stony Brook, NY 11790</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem Statement  Motivation  Algorithm Design  Performance Evaluation  Conclusion and Future Work</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Sensor Network Model  A data item stored at a server node.  Updated at a certain frequency.  Other nodes access the data item at a certain</p>
    <p>frequency.</p>
    <p>Problem Statement</p>
    <p>Select nodes to cache the data item to:  Goal: Minimize total access cost  Constraint: Total update cost.</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Why cache? To save access/communication cost, and thus, energy.</p>
    <p>Why update cost constraint? Nodes close to the server bear most of the update cost.</p>
  </div>
  <div class="page">
    <p>Problem Formulation  Given:</p>
    <p>Network graph G(V,E)  A data item stored at a server node  Update frequency  Access frequency for each other node  Update cost constraint</p>
    <p>Goal:  Select cache nodes to minimize the total access</p>
    <p>cost  Total update cost is less than</p>
  </div>
  <div class="page">
    <p>Total Access/Update Cost  Total Access Cost =</p>
    <p>i  V (access freq of i x distance to nearest cache)</p>
    <p>Total Update cost = Cost of Steiner tree over server and all caches</p>
  </div>
  <div class="page">
    <p>Algorithm Design Outline  Tree Networks</p>
    <p>Optimal dynamic programming algorithm.</p>
    <p>General Networks  Multiple-unicast update model -- Approximation</p>
    <p>algorithm.</p>
    <p>Steiner-tree update model -- Heuristic, Distributed.</p>
  </div>
  <div class="page">
    <p>Tree Networks</p>
  </div>
  <div class="page">
    <p>Subtree notation</p>
    <p>Server: r</p>
    <p>Consider a subtree Tv</p>
    <p>Let path (v,x) on its leftmost branch be all caches</p>
    <p>Let C_v be the optimal access cost in Tv using additional update cost</p>
    <p>Next: Recursive equation for C_v</p>
    <p>r</p>
    <p>Tr v</p>
    <p>Tv x</p>
  </div>
  <div class="page">
    <p>Dynamic Programming Algorithm for Tv under update cost constraint</p>
    <p>Let u = leftmost deepest node in the optimal set of caches in Tv</p>
    <p>Path(v,u) can be all caches (update cost doesnt increase)</p>
    <p>For a fixed u,  C_v =</p>
    <p>Constant + optimal access cost in Rv,u for constraint (  _u)</p>
    <p>Here, _u is the cost to update u (using path(v,x)).</p>
  </div>
  <div class="page">
    <p>DP recursive equation for Tv</p>
    <p>C_v = minu  Tv (access cost in Lv,u using path(v,x) + access cost in Tu using u</p>
    <p>+ optimal cost in Rv,u with constraint</p>
    <p>_u)</p>
    <p>Here, _u is the cost in updating u (using path(v,x)).</p>
    <p>Note that Rv,u has a path (v, parent(u)) of caches on its leftmost branch.</p>
  </div>
  <div class="page">
    <p>Time complexity  Time complexity: O(n4+n3 )</p>
    <p>Analysis  O(n4): Precomputation of subtree access costs</p>
    <p>Lv,u with cache path (v,x): O(n4), for all v,u,x  Tu: O(n2), for all u</p>
    <p>Recursive equation takes O(n3 )  n2 entries: all values of (v,x,)  Each entry takes O(n)</p>
  </div>
  <div class="page">
    <p>General Graph Network</p>
    <p>Two Update Cost Models</p>
    <p>Multiple-Unicast</p>
    <p>Optimal Steiner Tree</p>
  </div>
  <div class="page">
    <p>Multiple-Unicast Update Model  Update cost: Sum of shortest path lengths</p>
    <p>from server to each cache nodes</p>
    <p>Benefit of node A: Decrease in total access cost due to selection of A as a cache</p>
    <p>Benefit per unit update cost.</p>
  </div>
  <div class="page">
    <p>Greedy Algorithm</p>
    <p>Iteratively: Select the node with the highest benefit per unit update cost, until the update cost is exhausted</p>
    <p>Theorem: Greedy solutions benefit is at least 63% of the optimal benefit.</p>
  </div>
  <div class="page">
    <p>Steiner-Tree Update Cost Model</p>
    <p>Steiner-tree update cost: Cost of 2approximation Steiner tree over cache nodes</p>
    <p>Incremental Steiner update cost of node A: Increase in Steiner-tree update cost due to A becoming a cache</p>
    <p>Greedy-Steiner Algorithm:</p>
    <p>Iteratively, select the node with the highest benefit per unit above-defined update cost.</p>
  </div>
  <div class="page">
    <p>Distributed Greedy-Steiner Algorithm</p>
    <p>Each non-cache node estimates its benefit per unit update cost</p>
    <p>If the estimate is maximum among all its non-cache neighbors, then it decides to cache</p>
    <p>Algorithm:  In each rounds, each node decides to cache based</p>
    <p>on above.  The server gathers new cache node information,</p>
    <p>and computes the total update cost  The remaining update cost is broadcast to the</p>
    <p>network, and the new round begins.</p>
  </div>
  <div class="page">
    <p>Performance Evaluation  (i) network-related -- number of nodes and</p>
    <p>transmission radius,</p>
    <p>(ii) application-related -- number of clients.</p>
    <p>Random network of 2,000 to 5,000 nodes in a 30 x 30 region.</p>
  </div>
  <div class="page">
    <p>Compared Caching Schemes  Centralized Greedy</p>
    <p>Centralized Greedy-Steiner</p>
    <p>Distributed Greedy-Steiner</p>
    <p>Dynamic Programming on Shortest Path Tree of Clients</p>
    <p>Dynamic Programming on Steiner Tree over Clients and Server</p>
  </div>
  <div class="page">
    <p>Varying Network Size  Transmission radius =2, percentage of clients = 50%, update cost = 25% of the Steiner tree cost</p>
  </div>
  <div class="page">
    <p>Varying Transmission Radius - Network size = 4000, percentage of clients = 50%, update cost = 25% of the Steiner tree cost</p>
  </div>
  <div class="page">
    <p>Varying number of clients  Transmission Radiu =2, update cost = 50% of the Steiner tree cost, network size = 3000</p>
  </div>
  <div class="page">
    <p>Conclusion and Future Work  Data caching problem under update cost</p>
    <p>constraint.</p>
    <p>Optimal algorithm for tree; an approximation algorithm for general graph.</p>
    <p>Efficient distributed implementations.</p>
    <p>More general cache placement problem: (a) under memory constraint; (b) multiple data items.</p>
  </div>
</Presentation>
