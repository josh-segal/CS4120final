<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SCL: Simple Coordination Layer Aurojit Panda, Wenting Zheng, Xiaohe Hu, Arvind Krishnamurthy, Scott Shenker</p>
    <p>UC Berkeley, Tsinghua University, University of Washington, ICSI</p>
  </div>
  <div class="page">
    <p>Software Defined Networks</p>
    <p>Forwarding implemented by switches.</p>
    <p>Switch Switch</p>
    <p>Switch Switch</p>
  </div>
  <div class="page">
    <p>Software Defined Networks</p>
    <p>Forwarding implemented by switches.</p>
    <p>Rules computed by controllers.</p>
    <p>Switch Switch</p>
    <p>Switch Switch</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Software Defined Networks</p>
    <p>Forwarding implemented by switches.</p>
    <p>Rules computed by controllers.</p>
    <p>Rules depend on policy and network state.</p>
    <p>Switch Switch</p>
    <p>Switch Switch</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Software Defined Networks</p>
    <p>Forwarding implemented by switches.</p>
    <p>Rules computed by controllers.</p>
    <p>Rules depend on policy and network state.</p>
    <p>Policy: What paths are acceptable?</p>
    <p>Switch Switch</p>
    <p>Switch Switch</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Software Defined Networks</p>
    <p>Forwarding implemented by switches.</p>
    <p>Rules computed by controllers.</p>
    <p>Rules depend on policy and network state.</p>
    <p>Policy: What paths are acceptable?</p>
    <p>Network State: Current state of links and switches Switch Switch</p>
    <p>Switch Switch</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>How to build controllers?</p>
  </div>
  <div class="page">
    <p>Single Image Controllers</p>
    <p>Controller runs on a single server.</p>
    <p>Switch Switch</p>
    <p>Switch Switch</p>
    <p>Single Image Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers</p>
    <p>Controller runs on a single server.</p>
    <p>Examples: Nox, Pox, Ryu, etc.</p>
    <p>Switch Switch</p>
    <p>Switch Switch</p>
    <p>Single Image Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers: Assumptions</p>
    <p>The controller observes a sequence of events.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e1 e0Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers: Assumptions</p>
    <p>The controller observes a sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e1 e0Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers: Assumptions</p>
    <p>The controller observes a sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Applications react to sequence of events.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e1 e0Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers: Assumptions</p>
    <p>The controller observes a sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Applications react to sequence of events.</p>
    <p>Events and updates sent over TCP channels.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e1 e0Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers: Assumptions</p>
    <p>The controller observes a sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Applications react to sequence of events.</p>
    <p>Events and updates sent over TCP channels.</p>
    <p>Events from different switches can be reordered.Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller</p>
  </div>
  <div class="page">
    <p>Single Image Controllers: Assumptions</p>
    <p>The controller observes a sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Applications react to sequence of events.</p>
    <p>Events and updates sent over TCP channels.</p>
    <p>Events from different switches can be reordered.</p>
    <p>Updates to different switches can be reordered.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>u1</p>
    <p>u0</p>
    <p>e1 e0u0 u1Controller</p>
  </div>
  <div class="page">
    <p>Events can be reordered.</p>
    <p>Updates can be reordered.</p>
    <p>Events and updates sent over reliable channels - TCP.</p>
    <p>Controllers observe a consistent sequence of events.</p>
    <p>Applications react to sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>u1</p>
    <p>u0</p>
    <p>e1 e0u0 u1e1 e0Controller How to handle controller failures, scale controllers, etc.?</p>
  </div>
  <div class="page">
    <p>Events can be reordered.</p>
    <p>Updates can be reordered.</p>
    <p>Events and updates sent over reliable channels - TCP.</p>
    <p>Controllers observe a consistent sequence of events.</p>
    <p>Applications react to sequence of events.</p>
    <p>Network state computed using event sequence.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>u1</p>
    <p>u0</p>
    <p>e1 e0u0 u1e1 e0Controller How to handle controller failures, scale controllers, etc.?</p>
    <p>Move to distributed controllers.</p>
  </div>
  <div class="page">
    <p>How to build distributed controllers?</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>Controller I</p>
    <p>Controller II</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Rules must converge despite this reordering.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Rules must converge despite this reordering.</p>
    <p>Two ways to handle this</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Rules must converge despite this reordering.</p>
    <p>Two ways to handle this</p>
    <p>Algorithms are correct despite reordering.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Rules must converge despite this reordering.</p>
    <p>Two ways to handle this</p>
    <p>Algorithms are correct despite reordering.</p>
    <p>Mechanisms so controllers agree on ordering. Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Rules must converge despite this reordering.</p>
    <p>Two ways to handle this</p>
    <p>Algorithms are correct despite reordering.</p>
    <p>Mechanisms so controllers agree on ordering.</p>
    <p>Rely on ordering mechanisms for generality. Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Why is this Harder?  Event ordering can differ across controllers.</p>
    <p>Rules must converge despite this reordering.</p>
    <p>Two ways to handle this</p>
    <p>Algorithms are correct despite reordering.</p>
    <p>Mechanisms so controllers agree on ordering.</p>
    <p>Rely on ordering mechanisms for generality.</p>
    <p>How to implement event ordering?</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Controller I</p>
    <p>Controller II e0 e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Applications always see events in agreed order.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Applications always see events in agreed order.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
    <p>e0 e1</p>
    <p>e0 e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Applications always see events in agreed order.</p>
    <p>Can use same algorithms as single image controller.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
    <p>e0 e1</p>
    <p>e0 e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Applications always see events in agreed order.</p>
    <p>Can use same algorithms as single image controller.</p>
    <p>Controllers are Replicated State Machines.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
    <p>e0 e1</p>
    <p>e0 e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Applications always see events in agreed order.</p>
    <p>Can use same algorithms as single image controller.</p>
    <p>Controllers are Replicated State Machines.</p>
    <p>Adopted by Onix, ONOS, etc.Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
    <p>e0 e1</p>
    <p>e0 e1</p>
  </div>
  <div class="page">
    <p>Canonical Solution: Consensus  Consensus: Protocol to get agreement on a value.</p>
    <p>Rely on consensus to agree on event order.</p>
    <p>Applications always see events in agreed order.</p>
    <p>Can use same algorithms as single image controller.</p>
    <p>Controllers are Replicated State Machines.</p>
    <p>Adopted by Onix, ONOS, etc.</p>
    <p>How to implement consensus?</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Consensus</p>
    <p>e0</p>
    <p>e0e1</p>
    <p>e1 e0, e1</p>
    <p>e0, e1</p>
    <p>e0 e1</p>
    <p>e0 e1</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Controller III Application</p>
    <p>Framework</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Framework</p>
    <p>Controller III Application</p>
    <p>Framework  Mechanism appoints a leader.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>Controller III Application</p>
    <p>Framework  Mechanism appoints a leader.</p>
    <p>Leader receives all network events - decides on order.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework  Mechanism appoints a leader.</p>
    <p>Leader receives all network events - decides on order.</p>
    <p>Leader replicates ordered events at other controllers.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework  Mechanism appoints a leader.</p>
    <p>Leader receives all network events - decides on order.</p>
    <p>Leader replicates ordered events at other controllers.</p>
    <p>Must wait for a quorum of controllers to confirm replication.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework  Mechanism appoints a leader.</p>
    <p>Leader receives all network events - decides on order.</p>
    <p>Leader replicates ordered events at other controllers.</p>
    <p>Must wait for a quorum of controllers to confirm replication.</p>
    <p>Once quorum has confirmed delivers events to application.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework</p>
    <p>If leader fails protocol appoints new leader.</p>
    <p>x x</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework</p>
    <p>If leader fails protocol appoints new leader.</p>
    <p>Protocol must ensure leader is one with newest data. x x</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework</p>
    <p>If leader fails protocol appoints new leader.</p>
    <p>Protocol must ensure leader is one with newest data.</p>
    <p>Quorum replication ensures order cannot be forgotten. x x</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism</p>
    <p>Several algorithms in use - ZAB, Raft, Paxos variants (e.g., MultiPaxos)</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Controller I</p>
    <p>Controller II Application</p>
    <p>Framework</p>
    <p>Application</p>
    <p>Frameworke0e1</p>
    <p>e0e1</p>
    <p>e0e1</p>
    <p>Controller III Application</p>
    <p>Framework</p>
    <p>If leader fails protocol appoints new leader.</p>
    <p>Protocol must ensure leader is one with newest data.</p>
    <p>Quorum replication ensures order cannot be forgotten.</p>
    <p>Controller can reconstruct state by replaying events.</p>
    <p>e0e1</p>
    <p>x x</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism: Limitations</p>
    <p>Fault Tolerance: at least one partition fails during network partitions.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism: Limitations</p>
    <p>Fault Tolerance: at least one partition fails during network partitions.</p>
    <p>Scalability: Worse performance worsens with more controllers.</p>
  </div>
  <div class="page">
    <p>Canonical Consensus Mechanism: Limitations</p>
    <p>Fault Tolerance: at least one partition fails during network partitions.</p>
    <p>Scalability: Worse performance worsens with more controllers.</p>
    <p>Control Plane Requirements: Performance is sensitive to losses, latency, etc.</p>
  </div>
  <div class="page">
    <p>Is consensus required?</p>
  </div>
  <div class="page">
    <p>Consensus Assumption</p>
    <p>Network state (topology and forwarding table) resides in controllers.</p>
  </div>
  <div class="page">
    <p>Consensus Assumption</p>
    <p>Network state (topology and forwarding table) resides in controllers.</p>
    <p>RSMs ensure network state is not lost when controllers fail.</p>
  </div>
  <div class="page">
    <p>Consensus Assumption</p>
    <p>Network state (topology and forwarding table) resides in controllers.</p>
    <p>RSMs ensure network state is not lost when controllers fail.</p>
    <p>Similar to distributed key value stores.</p>
  </div>
  <div class="page">
    <p>Consensus Assumption is Wrong</p>
    <p>But we can query the network to discover current network state.</p>
  </div>
  <div class="page">
    <p>Consensus Assumption is Wrong</p>
    <p>But we can query the network to discover current network state.</p>
    <p>Safe to lose network state!</p>
  </div>
  <div class="page">
    <p>Distributed Controllers: An Alternative</p>
    <p>Assume all controllers agree on policy.</p>
    <p>Network</p>
    <p>Controller Policy</p>
    <p>Controller Policy</p>
  </div>
  <div class="page">
    <p>Distributed Controllers: An Alternative</p>
    <p>Assume all controllers agree on policy.</p>
    <p>Each controller</p>
    <p>Network</p>
    <p>Controller Policy</p>
    <p>Controller Policy</p>
  </div>
  <div class="page">
    <p>Distributed Controllers: An Alternative</p>
    <p>Assume all controllers agree on policy.</p>
    <p>Each controller</p>
    <p>Network</p>
    <p>Controller Policy</p>
    <p>Controller Policy</p>
  </div>
  <div class="page">
    <p>Distributed Controllers: An Alternative</p>
    <p>Assume all controllers agree on policy.</p>
    <p>Each controller</p>
    <p>Network</p>
    <p>Controller Policy</p>
    <p>Controller Policy</p>
  </div>
  <div class="page">
    <p>Distributed Controllers: An Alternative</p>
    <p>Assume all controllers agree on policy.</p>
    <p>Each controller</p>
    <p>Controller Policy</p>
    <p>Controller Policy</p>
  </div>
  <div class="page">
    <p>Distributed Controllers: An Alternative</p>
    <p>Assume all controllers agree on policy.</p>
    <p>Each controller</p>
    <p>Converges assuming quiescence.</p>
    <p>Network</p>
    <p>Controller Policy</p>
    <p>Controller Policy</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
    <p>Programming model: how to support existing event based algorithms?</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
    <p>Programming model: how to support existing event based algorithms?</p>
    <p>Efficiency: how to minimize control traffic?</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
    <p>Programming model: how to support existing event based algorithms?</p>
    <p>Efficiency: how to minimize control traffic?</p>
    <p>Safety: how to ensure some critical policies are never violated?</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
    <p>Programming model: how to support existing event based algorithms?</p>
    <p>Efficiency: how to minimize control traffic?</p>
    <p>Safety: how to ensure some critical policies are never violated?</p>
    <p>Safety: how to safely update network policies?</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
    <p>Programming model: how to support existing event based algorithms?</p>
    <p>Efficiency: how to minimize control traffic?</p>
    <p>Safety: how to ensure some critical policies are never violated?</p>
    <p>Safety: how to safely update network policies?</p>
    <p>Policies: what classes of policies can be implemented using this mechanism?</p>
  </div>
  <div class="page">
    <p>Challenges  Programming model: how to write control applications?</p>
    <p>Programming model: how to support existing event based algorithms?</p>
    <p>Efficiency: how to minimize control traffic?</p>
    <p>Safety: how to ensure some critical policies are never violated?</p>
    <p>Safety: how to safely update network policies?</p>
    <p>Policies: what classes of policies can be implemented using this mechanism?</p>
  </div>
  <div class="page">
    <p>SCL: Programming Model and Architecture</p>
    <p>Switch Agent</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
  </div>
  <div class="page">
    <p>SCL: Programming Model and Architecture</p>
    <p>Builds on standard single-image controller (Pox).</p>
    <p>Switch Agent</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
  </div>
  <div class="page">
    <p>SCL: Programming Model and Architecture</p>
    <p>Builds on standard single-image controller (Pox).</p>
    <p>Switch Agents implement querying and channels.</p>
    <p>Switch Agent</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
    <p>Proxy Proxy Proxy</p>
    <p>Agent Agent Agent Agent</p>
  </div>
  <div class="page">
    <p>SCL: Programming Model and Architecture</p>
    <p>Builds on standard single-image controller (Pox).</p>
    <p>Switch Agents implement querying and channels.</p>
    <p>Controller Proxies ensure convergence. Switch Agent</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Single-Image Controller</p>
    <p>Proxy</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
    <p>Switch Agent</p>
    <p>Proxy Proxy Proxy</p>
    <p>Agent Agent Agent Agent</p>
  </div>
  <div class="page">
    <p>SCL Controller Requirements</p>
    <p>Deterministic: Controllers compute the same rule for given network state.</p>
  </div>
  <div class="page">
    <p>SCL Controller Requirements</p>
    <p>Deterministic: Controllers compute the same rule for given network state.</p>
    <p>Idempotent: The process of computing and updating rules is idempotent.</p>
  </div>
  <div class="page">
    <p>SCL Controller Requirements</p>
    <p>Deterministic: Controllers compute the same rule for given network state.</p>
    <p>Idempotent: The process of computing and updating rules is idempotent.</p>
    <p>Proactive Applications: Compute rules based on network state not packet-ins.</p>
  </div>
  <div class="page">
    <p>SCL Controller Requirements</p>
    <p>Deterministic: Controllers compute the same rule for given network state.</p>
    <p>Idempotent: The process of computing and updating rules is idempotent.</p>
    <p>Proactive Applications: Compute rules based on network state not packet-ins.</p>
    <p>Triggered Updates: Can trigger rule recomputation based on event log.</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers</p>
    <p>AgentAgent Agent</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table A Table B Table C Table</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>AgentAgent Agent</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table A Table B Table C Table</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>All switch events are sent to all proxies.</p>
    <p>AgentAgent Agent e0</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>All switch events are sent to all proxies.</p>
    <p>Proxy triggers controller computation.</p>
    <p>AgentAgent Agent e0</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>e0 e0</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>All switch events are sent to all proxies.</p>
    <p>Proxy triggers controller computation.</p>
    <p>Computation based on current log.</p>
    <p>AgentAgent Agent e0</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>e0 e0u0</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>All switch events are sent to all proxies.</p>
    <p>Proxy triggers controller computation.</p>
    <p>Computation based on current log.</p>
    <p>Controller sends updates to proxy.AgentAgent Agent e0</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>e0 e0</p>
    <p>u0</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>All switch events are sent to all proxies.</p>
    <p>Proxy triggers controller computation.</p>
    <p>Computation based on current log.</p>
    <p>Controller sends updates to proxy.</p>
    <p>Proxy maintains state about installed rules.</p>
    <p>AgentAgent Agent e0</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>e0 e0</p>
    <p>u0</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers  Proxies maintain a log of all prior network events.</p>
    <p>All switch events are sent to all proxies.</p>
    <p>Proxy triggers controller computation.</p>
    <p>Computation based on current log.</p>
    <p>Controller sends updates to proxy.</p>
    <p>Proxy maintains state about installed rules.</p>
    <p>Deduplicates updates before applying them.</p>
    <p>AgentAgent Agent e0</p>
    <p>Controller</p>
    <p>Proxy</p>
    <p>Switch A Switch B Switch C</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>A Table B Table C Table</p>
    <p>e0</p>
    <p>e0 e0</p>
    <p>u0</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers: Challenges</p>
    <p>Agreement: Proxies must eventually agree on order.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1 e0Proxy I</p>
    <p>Proxy II e0 e1</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers: Challenges</p>
    <p>Agreement: Proxies must eventually agree on order.</p>
    <p>Agreement: Must eventually agree on the set of events.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>e1Proxy I</p>
    <p>Proxy II e0 e1</p>
  </div>
  <div class="page">
    <p>SCL Proxies and Controllers: Challenges</p>
    <p>Agreement: Proxies must eventually agree on order.</p>
    <p>Agreement: Must eventually agree on the set of events.</p>
    <p>Awareness: Controllers and network state agrees eventually.</p>
    <p>Time</p>
    <p>Switch A</p>
    <p>Switch B</p>
    <p>e0</p>
    <p>e1</p>
    <p>Proxy I</p>
    <p>Proxy II e0</p>
    <p>e0</p>
  </div>
  <div class="page">
    <p>Addressing SCL Challenges</p>
    <p>Address these with two mechanisms. Controller</p>
    <p>Proxy Controller</p>
    <p>Proxy</p>
    <p>Agent Agent</p>
  </div>
  <div class="page">
    <p>Addressing SCL Challenges</p>
    <p>Address these with two mechanisms.</p>
    <p>Gossip between controllers Controller</p>
    <p>Proxy Controller</p>
    <p>Proxy Gossip</p>
    <p>Logged events Ordering</p>
    <p>Agent Agent</p>
  </div>
  <div class="page">
    <p>Addressing SCL Challenges</p>
    <p>Address these with two mechanisms.</p>
    <p>Gossip between controllers</p>
    <p>Eventual agreement on observed events.</p>
    <p>Controller Proxy</p>
    <p>Controller Proxy</p>
    <p>Gossip</p>
    <p>Logged events Ordering</p>
    <p>Agent Agent</p>
  </div>
  <div class="page">
    <p>Addressing SCL Challenges</p>
    <p>Address these with two mechanisms.</p>
    <p>Gossip between controllers</p>
    <p>Eventual agreement on observed events.</p>
    <p>Also assures agreement on ordering.</p>
    <p>Controller Proxy</p>
    <p>Controller Proxy</p>
    <p>Gossip</p>
    <p>Logged events Ordering</p>
    <p>Agent Agent</p>
  </div>
  <div class="page">
    <p>Addressing SCL Challenges</p>
    <p>Address these with two mechanisms.</p>
    <p>Gossip between controllers</p>
    <p>Eventual agreement on observed events.</p>
    <p>Also assures agreement on ordering.</p>
    <p>Periodically query network for state.</p>
    <p>Controller Proxy</p>
    <p>Controller Proxy</p>
    <p>Gossip</p>
    <p>Agent Agent</p>
    <p>Periodic Refresh</p>
    <p>Link State Routing Table</p>
  </div>
  <div class="page">
    <p>Addressing SCL Challenges</p>
    <p>Address these with two mechanisms.</p>
    <p>Gossip between controllers</p>
    <p>Eventual agreement on observed events.</p>
    <p>Also assures agreement on ordering.</p>
    <p>Periodically query network for state.</p>
    <p>Awareness of network state.</p>
    <p>Controller Proxy</p>
    <p>Controller Proxy</p>
    <p>Gossip</p>
    <p>Agent Agent</p>
    <p>Periodic Refresh</p>
    <p>Link State Routing Table</p>
  </div>
  <div class="page">
    <p>Why abandon consensus?</p>
  </div>
  <div class="page">
    <p>Conceptually Unnecessary</p>
    <p>RSM assumption: Truth about network lies in the controller.</p>
  </div>
  <div class="page">
    <p>Conceptually Unnecessary</p>
    <p>RSM assumption: Truth about network lies in the controller.</p>
    <p>Reality: Truth about the network lies within the network (dataplane).</p>
  </div>
  <div class="page">
    <p>Conceptually Unnecessary</p>
    <p>RSM assumption: Truth about network lies in the controller.</p>
    <p>Reality: Truth about the network lies within the network (dataplane).</p>
    <p>Packets are processed by dataplane not by controllers.</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness</p>
    <p>At least 1 RTT between controllersConsensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness</p>
    <p>At least 1 RTT between controllers</p>
    <p>Respond immediately</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness Scalability</p>
    <p>At least 1 RTT between controllers</p>
    <p>Respond immediately</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness Scalability</p>
    <p>At least 1 RTT between controllers</p>
    <p>Latency increases with participants</p>
    <p>Respond immediately</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness Scalability</p>
    <p>At least 1 RTT between controllers</p>
    <p>Latency increases with participants</p>
    <p>Respond immediately Does not increase with # of participants</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness Scalability Fault Tolerance</p>
    <p>At least 1 RTT between controllers</p>
    <p>Latency increases with participants</p>
    <p>Respond immediately Does not increase with # of participants</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness Scalability Fault Tolerance</p>
    <p>At least 1 RTT between controllers</p>
    <p>Latency increases with participants</p>
    <p>Quorum must be available for progress</p>
    <p>Respond immediately Does not increase with # of participants</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>Improves Performance and Resilience</p>
    <p>Responsiveness Scalability Fault Tolerance</p>
    <p>At least 1 RTT between controllers</p>
    <p>Latency increases with participants</p>
    <p>Quorum must be available for progress</p>
    <p>Respond immediately Does not increase with # of participants</p>
    <p>Functional as long as a controller is available</p>
    <p>Consensus</p>
    <p>SCL</p>
  </div>
  <div class="page">
    <p>What about Route Convergence?</p>
    <p>Convergence time in AS1221</p>
    <p>CD F</p>
    <p>Convergence Time (S)</p>
    <p>SCL Consensus</p>
  </div>
  <div class="page">
    <p>What about Route Convergence?</p>
    <p>Convergence time in AS1221</p>
    <p>CD F</p>
    <p>Convergence Time (S)</p>
    <p>SCL Consensus</p>
    <p>Convergence time for fat tree</p>
    <p>C D</p>
    <p>F</p>
    <p>Convergence Time (ms)</p>
    <p>SCL Consensus</p>
  </div>
  <div class="page">
    <p>When Does Everyone Agree?</p>
    <p>CD F</p>
    <p>Convergence Time (S)</p>
    <p>SCL Consensus</p>
    <p>Convergence time in AS1221</p>
  </div>
  <div class="page">
    <p>When Does Everyone Agree?</p>
    <p>CD F</p>
    <p>Convergence Time (S)</p>
    <p>SCL Consensus</p>
    <p>Convergence time in AS1221</p>
    <p>CD F</p>
    <p>Convergence Time (ms)</p>
    <p>SCL Consensus</p>
    <p>Convergence time in Fat Tree</p>
  </div>
  <div class="page">
    <p>In the Paper</p>
    <p>Proof that gossip and periodic update are sufficient to guarantee convergence.</p>
    <p>Broadcast based in-band control channels.</p>
    <p>Mechanisms for policy update.</p>
    <p>Interaction with other types of policies.</p>
    <p>Other performance results.</p>
  </div>
  <div class="page">
    <p>Related Work Control Plane Consistency Data Plane Consistency (Orthogonal)</p>
  </div>
  <div class="page">
    <p>Related Work Control Plane Consistency Data Plane Consistency (Orthogonal)</p>
    <p>Serializability</p>
    <p>Consensus: ONIX (OSDI10), ONOS</p>
  </div>
  <div class="page">
    <p>Related Work Control Plane Consistency Data Plane Consistency (Orthogonal)</p>
    <p>Atomic registers: Schiff et al (CCR16)</p>
    <p>Serializability</p>
    <p>Consensus: ONIX (OSDI10), ONOS</p>
  </div>
  <div class="page">
    <p>Related Work Control Plane Consistency Data Plane Consistency (Orthogonal)</p>
    <p>Atomic registers: Schiff et al (CCR16)</p>
    <p>Serializability</p>
    <p>Consensus: ONIX (OSDI10), ONOS</p>
    <p>Exactly-Once: Ravana (SOSR15) Stronger Semantics</p>
  </div>
  <div class="page">
    <p>Related Work Control Plane Consistency Data Plane Consistency (Orthogonal)</p>
    <p>Atomic registers: Schiff et al (CCR16)</p>
    <p>Serializability</p>
    <p>Consensus: ONIX (OSDI10), ONOS</p>
    <p>Exactly-Once: Ravana (SOSR15) Stronger Semantics</p>
    <p>Labels: Reitblatt et al. (SIGCOMM 12)</p>
    <p>Ordered Updates: Mahajan et al. (HotNets 13) McClurg et al. (PLDI 15)</p>
    <p>Synchronized Clocks: Mirzahi et al. (SOSR 15)</p>
  </div>
  <div class="page">
    <p>Conclusion  Conventional wisdom: Distributed SDN controllers need consensus.</p>
  </div>
  <div class="page">
    <p>Conclusion  Conventional wisdom: Distributed SDN controllers need consensus.</p>
    <p>This talk: no consensus required.</p>
  </div>
  <div class="page">
    <p>Conclusion  Conventional wisdom: Distributed SDN controllers need consensus.</p>
    <p>This talk: no consensus required.</p>
    <p>Can use existing single image controllers with SCL.</p>
  </div>
  <div class="page">
    <p>Conclusion  Conventional wisdom: Distributed SDN controllers need consensus.</p>
    <p>This talk: no consensus required.</p>
    <p>Can use existing single image controllers with SCL.</p>
    <p>Implication</p>
  </div>
  <div class="page">
    <p>Conclusion  Conventional wisdom: Distributed SDN controllers need consensus.</p>
    <p>This talk: no consensus required.</p>
    <p>Can use existing single image controllers with SCL.</p>
    <p>Implication</p>
    <p>Simplifies controllers.</p>
  </div>
  <div class="page">
    <p>Conclusion  Conventional wisdom: Distributed SDN controllers need consensus.</p>
    <p>This talk: no consensus required.</p>
    <p>Can use existing single image controllers with SCL.</p>
    <p>Implication</p>
    <p>Simplifies controllers.</p>
    <p>Improves convergence time, responsiveness, robustness.</p>
  </div>
</Presentation>
