<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Multi-version and Single</p>
    <p>display Strategy in Undo Scheme</p>
    <p>Jiangming Yang Department of Computing and Information</p>
    <p>Technology Fudan University</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>INTRODUCTION  Whats Group Editors?</p>
    <p>Group editors are one of the most commonly used groupware applications . It allows multiple users to participate in the editing and modification of shared data objects, such as word, graphics, and media documents, using a computer network.</p>
    <p>C. A. Ellis and S. J. Gibbs. Concurrency control in groupware systems. In Proceedings of the ACM SIGMOD 1989, pages 399407, Portland Oregon, May 1989.</p>
  </div>
  <div class="page">
    <p>INTRODUCTION  Whats Group Editors?</p>
    <p>Techniques for building group editors have been widely applied and practiced. Group editors have also been acknowledged as powerful research vehicles in exploring solution to consistency problems.</p>
  </div>
  <div class="page">
    <p>INTRODUCTION  Whats undo operation?</p>
    <p>Undo is a common operation , which can help user to quickly recover from the incorrect execution in document editor system and make the work more safe and efficient.</p>
    <p>Why we need undo operation in group editors?  The effect of incorrect execution will be</p>
    <p>more extensive for it is done in distributed group editors, so the user will have more dependence on Undo</p>
    <p>G.D. Abowd and A.J. Dix. Giving undo attention. Interacting with Computers, 4(3):317-342, 1992.</p>
  </div>
  <div class="page">
    <p>MOTIVATION &amp; CHALLENGE</p>
    <p>Intention Maintenance</p>
    <p>The introduction of undo operation makes it more necessary to do the intention maintenance in group editors.</p>
    <p>Other undo puzzles</p>
    <p>Executing undo operation together with insert and delete will leads to some new puzzles.</p>
  </div>
  <div class="page">
    <p>INTENTION MAINTENANCE</p>
    <p>Intention maintenance is becoming more urgent and harder to avoid and it especially concentrates on the concurrency intention-violation.</p>
    <p>Illustrated as figure, user U1 wants to delete a while user U2 want to reserve it. We cant execute all the operations for they are violated.</p>
    <p>We have to analyze the violated operations, separate them into two or more operation lists without internal violation and select a suitable one to execute.</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>ADDRESS SPACE TRANSFORMATIO N  The operation's intention</p>
    <p>is achieved by transforming the address space, rather than the operation itself.</p>
    <p>We shall re-trace the document's address space to the state at the time of operations generation. In this way, the operation can be executed directly in this address space.</p>
  </div>
  <div class="page">
    <p>A Mark &amp; Retrace FRAMEWORK</p>
    <p>Any document is a liner structure composed by characters. Without loss of generality, assume each character is indivisible and each operation only aims at one character.</p>
    <p>We save the operation together with its timestamping to the characters liner node.</p>
    <p>we have also added the visible/invisible mark information on every liner structure of document, which shows whether the current node is visible or invisible.</p>
  </div>
  <div class="page">
    <p>RETRACING PROCEDURE</p>
    <p>Scan all character nodes  Set Counter=0  If a operation is effective</p>
    <p>Counter++, when operation wants the node to be ineffective.</p>
    <p>Counter--, when operation wants the node to be effective.</p>
    <p>If the insert operation is effective and counter=0, set node effective, otherwise set node ineffective.</p>
  </div>
  <div class="page">
    <p>RETRACING PROCEDURE</p>
    <p>Delete and Undo operation toward Insert mean want the node to be ineffective</p>
    <p>Undo operation toward Delete means want the node to be effective.</p>
  </div>
  <div class="page">
    <p>CONTROL ALGORITHM The definition of operation position is obtained by counting the number of effective character nodes on the left side of linear structure at the time of its generation. When the order of any two character nodes is certain, Retracing(DocS, SVO) ensures that the address space (effective character nodes) of the current document's liner structure is the same as the one at the time of the operation's generation.</p>
  </div>
  <div class="page">
    <p>RANGE-SCAN  Given two character nodes CNa and</p>
    <p>CNb. The attached operations are generated at site a and site b, and are timestamped by SVa and SVb. Consider :</p>
    <p>We have TOrder(CNa) &lt; TOrder(CNb), iff:  sum(SVa) &lt; sum(SVb)  a &lt; b when sum(SVa) = sum(SVb)</p>
  </div>
  <div class="page">
    <p>RANGE-SCAN  Scan all ineffective character nodes in the</p>
    <p>insert range and save the insert position in variable P.  When P is empty, a operation is</p>
    <p>causality before the new operation, return this position.</p>
    <p>When P is empty, a operation is concurrent with the new operation and the TOrder is bigger, save it in P.</p>
    <p>When a operation is causality before P and the TOrder is bigger then the new operation, empty the P.</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>CAUSALITY PRESERVATION  To achieve causality preservation, we only need</p>
    <p>to ensure that every remote operation is causally-ready before its execution, which we call execution condition.</p>
    <p>It should be noted that even if causality is preserved, the execution order of the operations would still be different because of their different orders of arrival at different sites.</p>
  </div>
  <div class="page">
    <p>CONVERGENCE  The Proof</p>
    <p>2 operations  Same Scan-Ranges  Different Scan-Ranges</p>
    <p>n operations</p>
    <p>N. Gu, J. Yang, and Q. Zhang. Consistency maintenance based on the mark &amp; retrace technique in groupware systems. ACM GROUP 2005 Conference, Sanibel Island, USA, Nov 2005.</p>
  </div>
  <div class="page">
    <p>INTENTION PRESERVATION  Since a Insert operation can find the correct</p>
    <p>scan-range and a Delete operation can find its corresponding character node at any sites and they do not interfere with other operations, those satisfy operations definition.</p>
    <p>However, there are still some arguments about the proof of achieving intention preservation, we plan to present more about intentions formal definition and the complete proof in the next future.</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>INTENTION VIOLATION PUZZLE When there are several Delete operations in</p>
    <p>the algorithm, the character node is effective only when all the Delete operations are undone, otherwise it will keep ineffective.</p>
    <p>When there exists intention violation, the algorithm maintains the intention of users who want character node to be ineffective</p>
  </div>
  <div class="page">
    <p>INTENTION VIOLATION PUZZLE Separate Process</p>
    <p>Scan operations list toward two violation operations.</p>
    <p>Two operations set R1 and R2. operations causality before O1 saved in R1; operations causality befor O2 saved in R2; operations concurrent with O1 and O2 saved in both R1 and R2.</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>RELATED WORKS  The initial concept of Mark &amp; Retrace</p>
    <p>was proposed early in    but was not able to solve the dOPT puzzle.</p>
    <p>X. Wu and N. GU. A concurrency control method based on document marking. Journal of Computer Research and Development, 39(12):16621667, 2002.</p>
    <p>H. He, Q. Wu, and L. Luo. Document marking scheme for preserving intention of operation in cooperative editing system. Journal of Software, 10(2):160164, Feb 1999.</p>
  </div>
  <div class="page">
    <p>RELATED WORKS  dOPT, adOPTed and GOTO cannot fully satisfy</p>
    <p>TP2.  NICE and SOCT3/4 is not able to resolve the</p>
    <p>false-tie (ERV) puzzle.  GOT fail in the case of complicated false-tie</p>
    <p>(ERV) scenarios.  Imine et al. tried to support TP2 by expanding IT</p>
    <p>function but fails in solving dOPT puzzle.  A solution of false-tie (ERV) has been realized in</p>
    <p>Co-Word system, it is still not published.  Li et al. also reported a solution and gave the</p>
    <p>proof.</p>
  </div>
  <div class="page">
    <p>RELATED WORKS  Only REDUCE can maintain</p>
    <p>convergence in the intention violation and obtain the effect of Multi-version and Single-display strategy, but it lacks related examining method and enough hints to users.</p>
  </div>
  <div class="page">
    <p>CONTENT OUTLINE  Introduction &amp; Motivation  A generic Mark &amp; Retrace</p>
    <p>algorithm  Achieve CCI model  Intention violation puzzle  Related works  Conclusions</p>
  </div>
  <div class="page">
    <p>CONCLUTIONS  In this paper we propose a strategy which can</p>
    <p>maintain CCI model in fully replicated architecture, which is different from OT. It does not ensure the operations execution correctness by modifying the operation but by Retracing process.</p>
    <p>Mark &amp; Retrace can not only achieve CCI model, but can support any undo in replicated architecture as well.</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
</Presentation>
