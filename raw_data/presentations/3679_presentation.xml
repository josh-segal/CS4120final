<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Medusa: Microarchitectural Data Leakage via Automated Attack Synthesis</p>
    <p>Daniel Moghimi</p>
    <p>Moritz Lipp</p>
    <p>Berk Sunar</p>
    <p>Michael Schwarz</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>P A S S W O R D</p>
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>CPU Registers</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers P</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers P</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
    <p>FaultFault</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
    <p>F+R</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
    <p>F+R</p>
  </div>
  <div class="page">
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
    <p>F+R</p>
  </div>
  <div class="page">
    <p>P A S S W O R D</p>
    <p>Virtual Address Space</p>
    <p>U se</p>
    <p>r S p a c e</p>
    <p>K e rn</p>
    <p>e l S</p>
    <p>p a c e</p>
    <p>Oracle</p>
    <p>CPU Registers</p>
    <p>P = 0x50</p>
  </div>
  <div class="page">
    <p>Microarchitecture Data Sampling (MDS)</p>
    <p>Meltdown is fixed but you can still leak on the fix hardware.</p>
    <p>Which part of the CPU leak the data?!</p>
    <p>Why does it leak?</p>
    <p>whatever</p>
  </div>
  <div class="page">
    <p>CPU Memory Subsystem  Leaky Buffers</p>
    <p>VFNPFN</p>
    <p>VFNPFN</p>
    <p>VFNPFN</p>
    <p>.</p>
    <p>Offset</p>
    <p>Offset</p>
    <p>Offset</p>
    <p>DATA</p>
    <p>DATA</p>
    <p>DATA</p>
    <p>Load Buffer</p>
    <p>VFNPFN [8:0]</p>
    <p>VFNPFN [8:0]</p>
    <p>VFNPFN [8:0]</p>
    <p>.</p>
    <p>Offset</p>
    <p>Offset</p>
    <p>Offset</p>
    <p>DATA</p>
    <p>DATA</p>
    <p>DATA</p>
    <p>Store Buffer</p>
    <p>L1</p>
    <p>F il l B u ff</p>
    <p>e r</p>
    <p>D T</p>
    <p>L B</p>
    <p>DRAM</p>
    <p>L3</p>
    <p>L2</p>
    <p>Memory Subsystem</p>
    <p>MFBDS</p>
    <p>MSBDS</p>
    <p>MLPDS</p>
    <p>L1TF</p>
  </div>
  <div class="page">
    <p>Memory</p>
    <p>Access Canonical</p>
    <p>#GP</p>
    <p>OffsetVFN</p>
    <p>Virtual Address</p>
  </div>
  <div class="page">
    <p>Memory</p>
    <p>Access Canonical</p>
    <p>#GP</p>
    <p>TLB Y</p>
    <p>PMH</p>
    <p>Perm. Y</p>
    <p>P RW US A  Physical Page Number</p>
    <p>PTE</p>
    <p>OffsetVFN</p>
    <p>Virtual Address</p>
  </div>
  <div class="page">
    <p>Memory</p>
    <p>Access Canonical</p>
    <p>#GP</p>
    <p>TLB Y</p>
    <p>PMH</p>
    <p>Perm. Y</p>
    <p>Present Y</p>
    <p>#PF</p>
    <p>P RW US A  Physical Page Number</p>
    <p>PTE</p>
    <p>OffsetVFN</p>
    <p>Virtual Address</p>
  </div>
  <div class="page">
    <p>Memory</p>
    <p>Access Canonical</p>
    <p>#GP</p>
    <p>TLB Y</p>
    <p>PMH</p>
    <p>Perm. Y</p>
    <p>Present Y</p>
    <p>#PF</p>
    <p>Accessed Y</p>
    <p>Set A</p>
    <p>Bit</p>
    <p>P RW US A  Physical Page Number</p>
    <p>PTE</p>
    <p>OffsetVFN</p>
    <p>Virtual Address</p>
  </div>
  <div class="page">
    <p>Memory</p>
    <p>Access Canonical</p>
    <p>#GP</p>
    <p>TLB Y</p>
    <p>PMH</p>
    <p>Perm. Y</p>
    <p>Present Y</p>
    <p>#PF</p>
    <p>Accessed Y</p>
    <p>Set A</p>
    <p>Bit</p>
    <p>Aligned</p>
    <p>Vector</p>
    <p>Y</p>
    <p>P RW US A  Physical Page Number</p>
    <p>PTE</p>
    <p>OffsetVFN</p>
    <p>Virtual Address</p>
    <p>#GP</p>
  </div>
  <div class="page">
    <p>Memory</p>
    <p>Access Canonical</p>
    <p>#GP</p>
    <p>TLB Y</p>
    <p>PMH</p>
    <p>Perm. Y</p>
    <p>Present Y</p>
    <p>#PF</p>
    <p>Accessed Y</p>
    <p>Set A</p>
    <p>Bit</p>
    <p>Aligned</p>
    <p>Vector</p>
    <p>Y</p>
    <p>P RW US A  Physical Page Number</p>
    <p>PTE</p>
    <p>OffsetVFN</p>
    <p>Virtual Address</p>
    <p>#GP</p>
    <p>Cache</p>
    <p>Aligned</p>
    <p>Split</p>
    <p>Cache</p>
    <p>Y Cached</p>
    <p>Y</p>
    <p>Cache Miss</p>
    <p>Handler</p>
    <p>False</p>
    <p>Store Dep.</p>
    <p>Y</p>
    <p>Hazard</p>
    <p>Recovery</p>
    <p>TSX</p>
    <p>Failure</p>
    <p>Y</p>
    <p>#RTM</p>
  </div>
  <div class="page">
    <p>Challenges with MDS Testing?</p>
    <p>Reproducing attacks is not reliable. It may depend on:  massaging the pipeline with other instructions</p>
    <p>CPU configuration (generation, frequency, microcode patch and etc)</p>
  </div>
  <div class="page">
    <p>Challenges with MDS Testing?</p>
    <p>Reproducing attacks is not reliable. It may depend on:  massaging the pipeline with other instructions</p>
    <p>CPU configuration (generation, frequency, microcode patch and etc)</p>
    <p>No public tool to find new variants or to verify hardware patches:  Too many things to test (Addressing mode, cache state, assists, and faults)</p>
    <p>Previous POCs may not work after MC update, but what does it mean?</p>
  </div>
  <div class="page">
    <p>Challenges with MDS Testing?</p>
    <p>Reproducing attacks is not reliable. It may depend on:  massaging the pipeline with other instructions</p>
    <p>CPU configuration (generation, frequency, microcode patch and etc)</p>
    <p>No public tool to find new variants or to verify hardware patches:  Too many things to test (Addressing mode, cache state, assists, and faults)</p>
    <p>Previous POCs may not work after MC update, but what does it mean?</p>
    <p>Impossible to quantify the impact of leakage:  We should care about leakage rate and what data is leaked.</p>
    <p>My POC is faster than your POC!!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Transynther (Fuzzing-based Random MDS Testing)</p>
    <p>Step 1:</p>
    <p>Step 2:</p>
    <p>Step 3: 256 different CPU Cache Line</p>
    <p>P = 0x50</p>
  </div>
  <div class="page">
    <p>Transynther (Fuzzing-based Random MDS Testing)</p>
    <p>Canonical TLB</p>
    <p>Perm.</p>
    <p>Present</p>
    <p>Accessed</p>
    <p>Aligned</p>
    <p>Vector</p>
    <p>Cache</p>
    <p>AlignedCached</p>
    <p>False Store</p>
    <p>Dep.</p>
    <p>TSX Failure</p>
    <p>Step 1:</p>
    <p>Step 2:</p>
    <p>Step 3: 256 different CPU Cache Line</p>
    <p>P = 0x50</p>
  </div>
  <div class="page">
    <p>Transynther (Fuzzing-based Random MDS Testing)</p>
    <p>Canonical TLB</p>
    <p>Perm.</p>
    <p>Present</p>
    <p>Accessed</p>
    <p>Aligned</p>
    <p>Vector</p>
    <p>Cache</p>
    <p>AlignedCached</p>
    <p>False Store</p>
    <p>Dep.</p>
    <p>TSX Failure</p>
    <p>Step 1:</p>
    <p>Step 2:</p>
    <p>Step 3: 256 different CPU Cache Line</p>
    <p>P = 0x50</p>
    <p>Step 0:</p>
    <p>Buffer</p>
    <p>Grooming</p>
    <p>Stores Same</p>
    <p>Thread:</p>
    <p>Stores Hyper</p>
    <p>Thread:</p>
    <p>Loads Same</p>
    <p>Thread:</p>
    <p>Loads Hyper thread</p>
    <p>Thread:</p>
  </div>
  <div class="page">
    <p>Transynther (Fuzzing-based Random MDS Testing)</p>
    <p>Canonical TLB</p>
    <p>Perm.</p>
    <p>Present</p>
    <p>Accessed</p>
    <p>Aligned</p>
    <p>Vector</p>
    <p>Cache</p>
    <p>AlignedCached</p>
    <p>False Store</p>
    <p>Dep.</p>
    <p>TSX Failure</p>
    <p>Step 1:</p>
    <p>Step 2:</p>
    <p>Step 3: 256 different CPU Cache Line</p>
    <p>P = 0x50</p>
    <p>Stores Same</p>
    <p>Thread:</p>
    <p>Stores Hyper</p>
    <p>Thread:</p>
    <p>Loads Same</p>
    <p>Thread:</p>
    <p>Loads Hyper thread</p>
    <p>Thread:</p>
    <p>Step 0:</p>
    <p>Buffer</p>
    <p>Grooming</p>
  </div>
  <div class="page">
    <p>Transynther (Fuzzing-based MDS Testing)</p>
  </div>
  <div class="page">
    <p>Transynther (Fuzzing-based MDS Testing)</p>
  </div>
  <div class="page">
    <p>Transynther (Fuzzing-based MDS Testing)</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>MDS Attacks - Insights</p>
    <p>Almost any exception/assist can leak from any buffer</p>
    <p>The CPU must flush the pipeline before executing an assist.</p>
    <p>Upon an Exception/Fault/Assist on a Load, Intel CPUs:  Execute the load until the last stage.</p>
    <p>Flush the pipeline at the retirement stage (Cheap Recovery Logic).</p>
    <p>Continue the load with some data to reach the retirement stage.</p>
    <p>Which data? (Fill buffer, Store Buffer, Load Buffer)</p>
    <p>Which one will be leaked first? (First come first serve)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Medusa Attack</p>
    <p>Medusa only leaks the Write Combining Data</p>
    <p>Implicit WC, i.e., rep mov, rep sto, can be leaked.  Memory Copy Routines</p>
    <p>File IO</p>
    <p>Served by a Write Combining Buffer (or just the the Fill Buffer).</p>
    <p>Advantages:  Prefiltered data</p>
    <p>Less Noise</p>
    <p>More targeted</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V1 Cache Indexing</p>
    <p>Cache Line Index</p>
    <p>An invalid (Non-canon) address:</p>
    <p>Load</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V1 Cache Indexing</p>
    <p>Cache Line Index</p>
    <p>An invalid (Non-canon) address:</p>
    <p>Load</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V1 Cache Indexing</p>
    <p>Cache Line Index</p>
    <p>An invalid (Non-canon) address:</p>
    <p>Load</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V1 Cache Indexing</p>
    <p>Cache Line Index</p>
    <p>Common Data Bus?!</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V2 Unaligned S2L Forwarding</p>
    <p>Cache Line Index</p>
    <p>Faulty Load</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V2 Unaligned S2L Forwarding</p>
    <p>Cache Line Index</p>
    <p>Faulty Load YMMx</p>
    <p>REPMOV on the Hyper thread:</p>
    <p>ABCDEFGH IJKLMNOP QRSTUVWX YZ</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V2 Unaligned S2L Forwarding</p>
    <p>Cache Line Index</p>
    <p>Faulty Load YMMx</p>
    <p>Cache Line Index</p>
    <p>Store</p>
    <p>REPMOV on the Hyper thread:</p>
    <p>ABCDEFGH IJKLMNOP QRSTUVWX YZ</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V2 Unaligned S2L Forwarding</p>
    <p>Cache Line Index</p>
    <p>Faulty Load YMMx</p>
    <p>Cache Line Index</p>
    <p>Store</p>
    <p>REPMOV on the Hyper thread:</p>
    <p>ABCDEFGH IJKLMNOP QRSTUVWX YZ</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V2 Unaligned S2L Forwarding</p>
    <p>Cache Line Index</p>
    <p>Faulty Load YMMx</p>
    <p>Cache Line Index</p>
    <p>Store</p>
    <p>REPMOV on the Hyper thread:</p>
    <p>ABCDEFGH IJKLMNOP QRSTUVWX YZ</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V3 Shadow REP MOV</p>
    <p>A REP MOV that fault on the load leaks:  the data from the legitimate store address</p>
    <p>but also the data from the REP MOV running on the hyper thread</p>
    <p>AAAAAAAAAAAAAAAA</p>
    <p>AAAAAAAAAAAAAAAA</p>
    <p>HT 1: REP MOV</p>
    <p>Valid Store, Faulty Load</p>
    <p>ABCDEFGHIJKLMNOP</p>
    <p>AAAAAAAAAAAAAAAA</p>
    <p>HT 1: REP MOV</p>
    <p>Valid Store, Faulty Load</p>
  </div>
  <div class="page">
    <p>Medusa Attack  V3 Shadow REP MOV</p>
    <p>A REP MOV that fault on the load leaks:  the data from the legitimate store address</p>
    <p>but also the data from the REP MOV running on the hyper thread</p>
    <p>AAAAAAAAAAAAAAAA</p>
    <p>AAAAAAAAAAAAAAAA</p>
    <p>HT 1: REP MOV</p>
    <p>Valid Store, Faulty Load</p>
    <p>ABCDEFGHIJKLMNOP</p>
    <p>AAAAAAAAAAAAAAAA</p>
    <p>HT 1: REP MOV</p>
    <p>Valid Store, Faulty Load</p>
    <p>AAAAAAAAAAAIIAAAIAIAAAIAIAIIIAAAAAA</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>OpenSSL RSA Key Recovery</p>
    <p>OpenSSL Base64 Decoder uses inline Memcpy(-oS)</p>
    <p>Triggered during the RSA Key Decoding from the PEM format:</p>
    <p>-----BEGIN RSA PRIVATE KEY----</p>
    <p>MIICXQIBAAKBgQDmTvQjjtGtnIqMwmmaLW+YjbYTsNR8PGKXr78iYwrMV5Ye4VGy</p>
    <p>BwS6qLD4s/EzCzGIDwkWCVx+gVHvh2wGW15Ddof0gVAtAMkR6gRABy4TkK+6YFSK</p>
    <p>AyjmHvKCfFHvc9loeFGDyjmwFFkfdwzppXnH1Wwt0OlnyCU1GbQ1w7AHuwIDAQAB</p>
    <p>AoGBAMyDri7pQ29NBIfMmGQuFtw8c0R3EamlIdQbX7qUguFEoe2YHqjdrKho5oZj</p>
    <p>nDu8o+Zzm5jzBSzdf7oZ4qaeekv0fO+ZSz6CKYLbuzG2IXUB8nHJ7NuH3lacfivD</p>
    <p>V4Cfg0yFnTK+MDG/xTVqywrCTsslkTCYC/XZOXU5Xt5z32FZAkEA/nLWQhMC4YPM</p>
    <p>ntSJw0UAhQJBAOe2b9cfiOTFKXxyU4j315VkulFfTyL6GwXi/7mvpcDCixDLNRyk</p>
    <p>uRigmdKjtIUrAX0pwjgXa6niqJ691jExez8CQQCcMZZAvTbZhHSn9LwHxqS0SIY1</p>
    <p>K+ZxX5ogirFDPS5NQzyE7adSsntSioh6/LQKBX6BAR9FwtxBPACtwz5F9geZAkA8</p>
    <p>a3z0SlvG04aC1cjkgUPsx6wxxbl79F2RhmSKRbvh7JiYk3RQ+L7vJgmWPGu5AcLM</p>
    <p>oVPsjmbbkKfJZNTyVOW/AkABepEi++ZQQW0FXJWZ3nM+2CNcXYCtTgi4bGkvnZPp</p>
    <p>/1pAy9rjeVJYhb8acTRnt+dU+uZ74CTtfuzUTZLOIuVe</p>
    <p>-----END RSA PRIVATE KEY----</p>
  </div>
  <div class="page">
    <p>OpenSSL RSA Key Recovery</p>
    <p>OpenSSL Base64 Decoder uses inline Memcpy(-oS)</p>
    <p>Triggered during the RSA Key Decoding from the PEM format:</p>
    <p>-----BEGIN RSA PRIVATE KEY----</p>
    <p>MIICXQIBAAKBgQDmTvQjjtGtnIqMwmmaLW+YjbYTsNR8PGKXr78iYwrMV5Ye4VGy</p>
    <p>BwS6qLD4s/EzCzGIDwkWCVx+gVHvh2wGW15Ddof0gVAtAMkR6gRABy4TkK+6YFSK</p>
    <p>AyjmHvKCfFHvc9loeFGDyjmwFFkfdwzppXnH1Wwt0OlnyCU1GbQ1w7AHuwIDAQAB</p>
    <p>AoGBAMyDri7pQ29NBIfMmGQuFtw8c0R3EamlIdQbX7qUguFEoe2YHqjdrKho5oZj</p>
    <p>nDu8o+Zzm5jzBSzdf7oZ4qaeekv0fO+ZSz6CKYLbuzG2IXUB8nHJ7NuH3lacfivD</p>
    <p>V4Cfg0yFnTK+MDG/xTVqywrCTsslkTCYC/XZOXU5Xt5z32FZAkEA/nLWQhMC4YPM</p>
    <p>ntSJw0UAhQJBAOe2b9cfiOTFKXxyU4j315VkulFfTyL6GwXi/7mvpcDCixDLNRyk</p>
    <p>uRigmdKjtIUrAX0pwjgXa6niqJ691jExez8CQQCcMZZAvTbZhHSn9LwHxqS0SIY1</p>
    <p>K+ZxX5ogirFDPS5NQzyE7adSsntSioh6/LQKBX6BAR9FwtxBPACtwz5F9geZAkA8</p>
    <p>a3z0SlvG04aC1cjkgUPsx6wxxbl79F2RhmSKRbvh7JiYk3RQ+L7vJgmWPGu5AcLM</p>
    <p>oVPsjmbbkKfJZNTyVOW/AkABepEi++ZQQW0FXJWZ3nM+2CNcXYCtTgi4bGkvnZPp</p>
    <p>/1pAy9rjeVJYhb8acTRnt+dU+uZ74CTtfuzUTZLOIuVe</p>
    <p>-----END RSA PRIVATE KEY----</p>
  </div>
  <div class="page">
    <p>OpenSSL RSA Key Recovery</p>
    <p>OpenSSL Base64 Decoder uses inline Memcpy(-oS)</p>
    <p>Triggered during the RSA Key Decoding from the PEM format:</p>
    <p>P</p>
    <p>Q</p>
    <p>d mod (p-1)</p>
    <p>d mod (q-1)</p>
    <p>Q^(-1) mod p</p>
    <p>N (Modulus)</p>
    <p>d (Private Key)</p>
  </div>
  <div class="page">
    <p>OpenSSL RSA Key Recovery - Coppersmith</p>
    <p>Knowledge of at least 1 3 of P+Q</p>
    <p>Create a  dimensional hidden number problem where  is relative to the number of recovered chunks</p>
    <p>Feed it to the lattice-based algorithm to find the short vector</p>
    <p>P</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>OpenSSL RSA Key Recovery  Coppersmith Attack</p>
    <p>Knowledge of at least 1 3 of P+Q.</p>
    <p>Creating a  dimensional hidden number problem where  is relative to the number of recovered chunks.</p>
    <p>Feeding it to the lattice-based algorithm to find the short vector.</p>
    <p>P</p>
    <p>Q</p>
    <p>Coppersmith P</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure</p>
    <p>Medusa  June 24, 2019: Reported initial findings to Intel</p>
    <p>Intel confirmed that WC is part of the fill buffer, but embargoed due to TAA</p>
    <p>Nov 12, 2019: $$$ Awarded</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Automated Testing for CPU Attacks  helps us to understand the root cause of these issues better.</p>
    <p>can be used to verify hardware mitigations.</p>
    <p>can help us to improve the leakage rate and understand the impact of attacks better.</p>
    <p>The impact of attacks depend also on the exploitation technique.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Automated Testing for CPU Attacks  helps us to understand the root cause of these issues better.</p>
    <p>can be used to verify hardware mitigations.</p>
    <p>can help us to improve the leakage rate and understand the impact of attacks better.</p>
    <p>The impact of attacks depend also on the exploitation technique.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Automated Testing for CPU Attacks  helps us to understand the root cause of these issues better.</p>
    <p>can be used to verify hardware mitigations.</p>
    <p>can help us to improve the leakage rate and understand the impact of attacks better.</p>
    <p>The impact of attacks depend also on the exploitation technique.</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure (Ice Lake)</p>
    <p>MSBDS (Fallout) on Ice Lake  November 2019: Intel sent us an Ice Lake Machine (Hardware mitigations)</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure (Ice Lake)</p>
    <p>MSBDS (Fallout) on Ice Lake  November 2019: Intel sent us an Ice Lake Machine</p>
    <p>March 2019: Tested Transyther on the Ice Lake CPU</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure (Ice Lake)</p>
    <p>MSBDS (Fallout) on Ice Lake  November 2019: Intel sent us an Ice Lake Machine</p>
    <p>March 2019: Tested Transyther on the Ice Lake CPU</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure (Ice Lake)</p>
    <p>MSBDS (Fallout) on Ice Lake  November 2019: Intel sent us an Ice Lake Machine</p>
    <p>March 2019: Tested Transyther on the Ice Lake CPU</p>
    <p>Mar 27, 2020: Reported MSBDS Leakage on Ice Lake</p>
    <p>May 5, 2020: Intel Completed triage  MDS mitigations are not deployed properly</p>
    <p>Chicken bits were not enabled for all mitigations.</p>
    <p>OEMs shipped with old/wrong microcode.</p>
    <p>Embargoed till July</p>
    <p>July 13, 2020: MDS advisory and list of affected CPUs were updated.  $$$ Awarded</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Questions?!</p>
    <p>https://github.com/</p>
    <p>VernamLab/Medusa</p>
    <p>https://github.com/</p>
    <p>danielmgmi/IceBreak</p>
  </div>
</Presentation>
