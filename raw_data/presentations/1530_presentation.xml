<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>OrderMergeDedup: Efficient, Failure-Consistent Deduplication on Flash</p>
    <p>Zhuan Chen and Kai Shen University of Rochester</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>} I/O deduplication } Eliminate I/O writes with redundant content } Reduce the storage space usage } Write reduction: reduce the Flash wear, improve performance } Broad usage in data centers, personal computers, data-driven sensing</p>
  </div>
  <div class="page">
    <p>Mo,va,on</p>
    <p>} I/O deduplication is not free: metadata maintenance } (1) Logical-physical block mapping (2) Physical block fingerprints (3) Physical block reference counts } Need to maintain failure-consistency for data and metadata</p>
    <p>L1</p>
    <p>L2</p>
    <p>P</p>
    <p>Logical Blocks Physical Blocks (on Flash)</p>
    <p>Write: ABC</p>
    <p>Write: ABC</p>
    <p>Write: ABC (ref. ctr. = 2) L2P mapping</p>
  </div>
  <div class="page">
    <p>Challenge</p>
    <p>} Existing approaches for failure-consistency } Rely on non-volatile RAM or supercapacitors/batteries [Srinivasan etal. 2012;</p>
    <p>Chen et al. 2011; Gupta et al. 2011] } Checking/repair tools [Quinlan et al. 2002] } Redo logging [Meister et al. 2010] (additional I/O for logging writes) } Shadowing [Tarasov et al. 2014] (additional I/O for index block writes)</p>
    <p>} Challenge: metadata &amp; failure-consistency-induced I/O cost shouldnt significantly diminish the deduplication I/O saving</p>
    <p>} We look into soft updates-style I/O ordering</p>
  </div>
  <div class="page">
    <p>I/O Ordering for Failure-Consistency</p>
    <p>} Define an order for data/metadata writes } Ordered writes are committed one by one } A failure still keeps a deduplication system consistent } A failure can only leave garbage (which can be reclaimed asynchronously)</p>
    <p>Example: new write (duplicated content)</p>
    <p>Incr. P1 ref. L2P mapping  (Higher-than-actual ref.  leave garbage)</p>
  </div>
  <div class="page">
    <p>I/O Ordering for Failure-Consistency</p>
    <p>} I/O efficiency } No consistency-induced additional I/O } We can merge metadata writes residing on the same metadata block as long as they are not subject to any ordering constraint</p>
    <p>Example: new write (duplicated content)</p>
    <p>Incr. P1 ref. L2P mapping</p>
    <p>Incr. P2 ref. L2P mapping</p>
    <p>Metadata block 1 Metadata block 2</p>
  </div>
  <div class="page">
    <p>I/O Ordering for Failure-Consistency</p>
    <p>} Cyclic dependencies } Prevent metadata I/O merging &amp; complicate the implementation } Make soft updates costly for file systems [Seltzer et al. 2000]</p>
    <p>Example: (1) overwrite (duplicated content)</p>
    <p>Incr. P1 ref. L2P mapping</p>
    <p>Metadata block 1 Metadata block 2</p>
    <p>(1)</p>
    <p>Decr. P2 ref.</p>
    <p>Incr. P3 ref. L2P mapping (2)</p>
    <p>Metadata block 2 Metadata block 1</p>
    <p>(2) new write (duplicated content)</p>
  </div>
  <div class="page">
    <p>I/O Ordering for Failure-Consistency</p>
    <p>} Resolve cyclic dependencies } We carefully design all deduplication I/O paths } Delay non-critical metadata I/O (the completion signal doesnt depend on)</p>
    <p>Completion to client</p>
    <p>Example: (1) overwrite (duplicated content)</p>
    <p>Incr. P1 ref. L2P mapping</p>
    <p>Metadata block 1 Metadata block 2</p>
    <p>(1)</p>
    <p>Decr. P2 ref.</p>
    <p>Incr. P3 ref. L2P mapping (2)</p>
    <p>(2) new write (duplicated content)</p>
    <p>Delay</p>
  </div>
  <div class="page">
    <p>I/O Ordering for Failure-Consistency</p>
    <p>inc. Ps ref.ctr. map L to P</p>
    <p>completion to client</p>
    <p>set Ps ref.ctr. to 2</p>
    <p>map L to P completion to clientwrite to new physical block P</p>
    <p>inc. Pdups ref. ctr. map L to Pdup</p>
    <p>dec. Polds ref. ctr.</p>
    <p>completion to client</p>
    <p>write to physical block Pnew</p>
    <p>set Pnews ref. ctr. to 2</p>
    <p>map L to Pnew dec. Polds ref. ctr.</p>
    <p>completion to client</p>
    <p>add Ps fingerprint</p>
    <p>add Pnews fingerprint</p>
  </div>
  <div class="page">
    <p>Metadata I/O Merging for Efficiency</p>
    <p>} Anticipatory I/O delay and merging } Delay a metadata write in anticipation for near-future merging opportunities } Limited delay duration (e.g., 1 millisecond), slight performance impact</p>
    <p>} We name our approach OrderMergeDedup</p>
  </div>
  <div class="page">
    <p>Evalua,on Setup</p>
    <p>} Prototype of OrderMergeDedup } A custom device mapper target of Linux 3.14.29</p>
    <p>} Mobile system workloads (Atom-based tablet) } Ubuntu package update &amp; installation } BBench web browsing } Vehicle counting for intelligent traffic sensing</p>
    <p>} Server system workloads (Xeon-based server machine) } Hadoop } YCSB/MongoDB</p>
  </div>
  <div class="page">
    <p>Evalua,on</p>
    <p>} We save 18-63% I/O writes (on workloads with 23-73% write duplication)</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>I/ O</p>
    <p>v ol</p>
    <p>um e</p>
    <p>Package index update</p>
    <p>Package install</p>
    <p>BBench web browsing</p>
    <p>Vehicle counting</p>
    <p>Hadoop YCSB/MongoDB</p>
    <p>Deduplicated physical block writes</p>
    <p>Original Dmdedup Failureconsistent write ordering + Anticipatory I/O delay/merging</p>
  </div>
  <div class="page">
    <p>Evalua,on (Strong Persistence Model)</p>
    <p>} We save 15-51% I/O writes (on workloads with 23-73% write duplication) } Anticipatory I/O delay/merging is particularly effective</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>I/ O</p>
    <p>v ol</p>
    <p>um e</p>
    <p>Package index update</p>
    <p>Package install</p>
    <p>BBench web browsing</p>
    <p>Vehicle counting</p>
    <p>Hadoop YCSB/MongoDB</p>
    <p>Deduplicated physical block writes</p>
    <p>Original Dmdedup Failureconsistent write ordering + Anticipatory I/O delay/merging</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>} OrderMergeDedup } Efficient, failure-consistent I/O deduplication on Flash } A soft updates-style data/metadata write ordering for failure-consistency (in particular, we resolve all possible cyclic dependencies with carefully designed I/O ordering and by delaying non-critical metadata writes) } Anticipatory I/O delay and merging to further reduce metadata I/O writes } We save 18-63% I/O writes (on workloads with 23-73% write duplication) } Anticipatory I/O delay/merging is particularly effective under the strong</p>
    <p>persistence model</p>
  </div>
</Presentation>
