<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Effective Straggler Mitigation:</p>
    <p>Attack of the Clones</p>
    <p>Ganesh Ananthanarayanan, Ali Ghodsi,</p>
    <p>Scott Shenker, Ion Stoica</p>
  </div>
  <div class="page">
    <p>Interactive Data Analytics</p>
    <p>Common in todays clusters, expected to grow</p>
    <p>Exploratory and experimental jobs</p>
    <p>Data analyst querying small sample (interactive)</p>
    <p>Low latency is crucial for interactive jobs</p>
    <p>Interactive jobs are small</p>
    <p>Facebook: 88% of jobs operate on 20GB of data and</p>
    <p>contain fewer than 50 tasks</p>
  </div>
  <div class="page">
    <p>Stragglers in Small Jobs</p>
    <p>Small interactive jobs are sensitive to stragglers</p>
    <p>Tasks that are much slower than the rest in the job</p>
    <p>Straggler Mitigation:</p>
    <p>Blacklisting: Eliminate machines with faulty hardware</p>
    <p>(e.g., erroneous disks)</p>
    <p>Speculation: LATE [OSDI08], Mantri [OSDI10]</p>
    <p>Address the non-deterministic stragglers</p>
  </div>
  <div class="page">
    <p>Despite the mitigation techniques</p>
    <p>in production clusters</p>
    <p>LATE: The slowest task runs 8 times slower* than the median task in a job</p>
    <p>Mantri: The slowest task runs 6 times slower* than the median task in a job</p>
    <p>(but they work well for large jobs)</p>
    <p>*we compare progress-rate of tasks, i.e., input-size/duration</p>
  </div>
  <div class="page">
    <p>State-of-the-art Straggler Mitigation</p>
    <p>Speculative Execution:</p>
    <p>straggler tasks</p>
  </div>
  <div class="page">
    <p>Why doesnt this work for small jobs?</p>
    <p>Statistically hard to predict stragglers accurately</p>
    <p>Observing constitutes large fraction of jobs duration</p>
    <p>Observe &amp; Speculate is ill-suited to address</p>
    <p>stragglers in small jobs</p>
  </div>
  <div class="page">
    <p>Cloning Jobs</p>
    <p>Proactively launch clones of a job, just as they</p>
    <p>are submitted</p>
    <p>Pick the result from the earliest clone</p>
    <p>Probabilistically mitigates stragglers</p>
    <p>Eschews observe &amp; speculate, causal analysis</p>
    <p>Is this feasible in practice?</p>
  </div>
  <div class="page">
    <p>Heavy-tailed Distribution</p>
    <p>Can clone small jobs with few extra resources</p>
    <p>Production clusters for data analytics</p>
  </div>
  <div class="page">
    <p>Cloning for Stragglers in Small Jobs</p>
    <p>Interactive jobs are important and small</p>
    <p>Hardest for straggler mitigation techniques</p>
    <p>Traditional reactive approach is insufficient</p>
    <p>Heavy-tailed distribution  cloning is feasible</p>
  </div>
  <div class="page">
    <p>Challenge: Avoid I/O contention</p>
    <p>Every clone should get its own copy of data</p>
    <p>Input data of jobs</p>
    <p>Replicated three times (typically) by file system</p>
    <p>Intermediate data of jobs</p>
    <p>Not replicated at all, to avoid overheads</p>
  </div>
  <div class="page">
    <p>Job</p>
    <p>Strawman: Job-level Cloning</p>
    <p>Earliest</p>
    <p>Easy to implement</p>
    <p>Directly extends to any framework</p>
    <p>T1T1</p>
    <p>T2T2</p>
    <p>T2T2</p>
    <p>T1T1 { T1 T2 }</p>
  </div>
  <div class="page">
    <p>Number of clones</p>
    <p>Storage crunch,</p>
    <p>cant replicate more</p>
    <p>3 clones</p>
    <p>Contention for</p>
    <p>input data</p>
  </div>
  <div class="page">
    <p>Task-level Cloning</p>
    <p>Job</p>
    <p>T1T1</p>
    <p>T1T1</p>
    <p>T2T2</p>
    <p>T2T2</p>
    <p>Earliest</p>
    <p>{ T1 T2 } Earliest</p>
  </div>
  <div class="page">
    <p>Strawman Task-level Cloning</p>
  </div>
  <div class="page">
    <p>Intermediate data reads?</p>
    <p>U1U1</p>
    <p>U2U2</p>
    <p>D1D1</p>
    <p>D1D1</p>
    <p>U1U1</p>
    <p>U2U2 One copy of the</p>
    <p>intermediate output</p>
    <p>Jobs consist of DAG of tasks</p>
    <p>Downstream tasks read outputs of upstream tasks</p>
    <p>Completed</p>
    <p>In-progress</p>
  </div>
  <div class="page">
    <p>Assign Earliest Copy</p>
    <p>U1U1</p>
    <p>U2U2</p>
    <p>D1D1</p>
    <p>D1D1</p>
    <p>U1U1</p>
    <p>U2U2</p>
    <p>Contention Cloning (CC)</p>
    <p>Intermediate data transfer</p>
    <p>takes longer Completed</p>
    <p>In-progress</p>
  </div>
  <div class="page">
    <p>D1D1D1D1</p>
    <p>D1D1</p>
    <p>U1U1</p>
    <p>U1U1</p>
    <p>U2U2</p>
    <p>U2U2</p>
    <p>D1D1</p>
    <p>U1U1</p>
    <p>U2U2</p>
    <p>Jobs are more vulnerable</p>
    <p>to stragglers</p>
    <p>Assign Exclusive Copy</p>
    <p>Contention-Avoidance</p>
    <p>Cloning (CAC)</p>
    <p>Completed</p>
    <p>In-progress</p>
  </div>
  <div class="page">
    <p>CAC vs. CC</p>
    <p>CAC avoids contentions but increases</p>
    <p>vulnerability to stragglers</p>
    <p>Straggler probability in a job increases by &gt;10%</p>
    <p>CC mitigates stragglers in jobs but creates</p>
    <p>contentions</p>
    <p>Intermediate data transfer takes ~50% longer</p>
    <p>How to minimize contention without</p>
    <p>straggling downstream tasks?</p>
  </div>
  <div class="page">
    <p>Delay Assignment</p>
    <p>Distinguish intrinsic variations in task</p>
    <p>completions from stragglers</p>
    <p>Small delay to get exclusive copy before</p>
    <p>contending for the available copy</p>
    <p>Probabilistic model of task durations and read b/w</p>
    <p>(Similar to delay scheduling [EuroSys10])</p>
    <p>Delay updated automatically and periodically</p>
  </div>
  <div class="page">
    <p>Dolly: Cloning Jobs</p>
    <p>Task-level cloning of jobs</p>
    <p>Delay Assignment to manage intermediate data</p>
    <p>Works within a resource budget</p>
    <p>Clone only if resources are available</p>
  </div>
  <div class="page">
    <p>How effective is Dolly?</p>
    <p>Baselines: LATE or Mantri, + blacklisting</p>
    <p>Cloning budget: 5%</p>
    <p>Workload from Facebook and Bing traces</p>
    <p>1000s of nodes, Hadoop and Dryad jobs</p>
    <p>Implemented in Hadoop, 150 node deployment</p>
  </div>
  <div class="page">
    <p>Average job completion time</p>
    <p>Jobs are 44% and 42% faster w.r.t. LATE and Mantri</p>
    <p>Effective Mitigation: Slowest task is 1.06x slower</p>
    <p>(down from 8x)</p>
  </div>
  <div class="page">
    <p>Delay Assignment is crucial</p>
    <p>(Exclusive Copy)(Exclusive Copy)(Exclusive Copy)(Exclusive Copy)</p>
    <p>(Earliest Copy)(Earliest Copy)(Earliest Copy)(Earliest Copy)</p>
  </div>
  <div class="page">
    <p>Impact on #phases in job?</p>
    <p>Job DAGs can have many (&gt; 2) phases</p>
    <p>Growing gap w.r.t. CAC and CC</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Traditional straggler mitigation techniques ill</p>
    <p>suited for small interactive jobs</p>
    <p>Dolly: Proactive Cloning of jobs</p>
    <p>Heavy-tail  Small cloning budget (5%) suffices</p>
    <p>Effective Mitigation: eliminates nearly all stragglers</p>
    <p>Power-law + Latency-sensitivity  Cloning</p>
  </div>
</Presentation>
