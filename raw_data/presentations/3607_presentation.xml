<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MUZZ: Thread-aware Grey-box Fuzzing for Effective Bug Hunting in Multithreaded Programs</p>
    <p>Hongxu Chen, Shengjian Guo, Yinxing Xue, Yuelei Sui Cen Zhang, Yuekang Li, Haijun Wang, Yang Liu</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Bugs/vulnerabilities in multithreaded programs are subtle to be detected</p>
    <p>Many programs rely on specific test inputs to trigger multithreading-relevant bugs</p>
    <p>Existing fuzzing techniques cannot effectively generate multithreading-relevant tests</p>
  </div>
  <div class="page">
    <p>Motivation (1)  The problem</p>
    <p>o Coverage depends on test inputs e.g., the program may or may not execute</p>
    <p>according to the condition of , purely dependent on inputs</p>
    <p>o Coverage depends on thread-scheduling e.g.,  :g_var+=1  : g_var*=2 o T1:  T2:  T2:  T1:</p>
    <p>g_var=4 o T1:  T2:  T1:  T2:</p>
    <p>g_var=4 o T1:  T1:  T2:  T2:</p>
    <p>g_var=2</p>
  </div>
  <div class="page">
    <p>Motivation (2)  Existing Solutions</p>
    <p>o Lacking Feedback to Track Threadinterleavings and Thread-context e.g.,</p>
    <p>o Lacking Schedule-intervention Across Executions o e.g., SAME interleaving during</p>
    <p>fuzzing?</p>
  </div>
  <div class="page">
    <p>MUZZ Overview</p>
    <p>: Static Analysis Guided Instrumentation : Adaptive Dynamic Fuzzing : Vulnerability Detection Analysis : ThreadSanitizer Aided Concurrency-bug Revealing</p>
  </div>
  <div class="page">
    <p>Approach (1)  Static Analysis</p>
    <p>Identify Suspicious Interleaving Scope (Lm) o The statements should be executed</p>
    <p>after one of TFork, while TJoin is not encountered yet</p>
    <p>o The statements can only be executed before the invocation of TLock and after the invocation of TUnLock</p>
    <p>o The statements should read or write at least one of the shared variables by different threads</p>
  </div>
  <div class="page">
    <p>Approach (2)  Coverage-oriented Instrumentation</p>
    <p>Instrument more in Lm, but with certain probabilities</p>
    <p>Pe  = min      + 2</p>
    <p>P  = min Pe  ,Ps0</p>
    <p>P , = min Pe  2</p>
    <p>,P0</p>
  </div>
  <div class="page">
    <p>Approach (3)  Two Other Instrumentations</p>
    <p>Threading-context Instrumentation  Track thread IDs and TLock,</p>
    <p>TUnLock, TJoin  Distinguish different transitions</p>
    <p>between threads</p>
    <p>Schedule-intervention Instrumentation</p>
    <p>Using pthread_setschedparam to adjust thread priority and apply uniformly distributed random</p>
    <p>Increase thread scheduling diversities</p>
  </div>
  <div class="page">
    <p>Approach (4)  Seed Selection</p>
    <p>Prioritize to select those seeds that: o Cover new regular traces o Cover new thread-interleavings</p>
  </div>
  <div class="page">
    <p>Approach (5)  Repeated Execution</p>
  </div>
  <div class="page">
    <p>Statistics of Target Programs</p>
    <p>: Preprocessing time : Number of basicblocks : Number of instructions : Number of MUZZ-instrumented instructions</p>
  </div>
  <div class="page">
    <p>Evaluation (1)  Seed Generation</p>
    <p>MUZZ has advantages in increasing the number and percentages of multithreading-relevant seeds for multithreaded programs</p>
  </div>
  <div class="page">
    <p>Evaluation (2)  Vulnerability Detection</p>
    <p>MUZZ demonstrates superiority in exercising more multithreadingrelevant crashing states and detecting concurrency-vulnerabilities</p>
  </div>
  <div class="page">
    <p>Evaluation (3)  Concurrency-bug Revealing</p>
    <p>MUZZ outperforms competitors in revealing concurrency-bugs with fuzzer-generated seeds</p>
  </div>
  <div class="page">
    <p>Q&amp;A Hongxu Chen hongxu.chen@ntu.edu.sg</p>
  </div>
</Presentation>
