<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Big Data Analytics over Encrypted Datasets with Seabed</p>
    <p>Antonis Papadimitriou, Ranjita Bhagwan, Nishanth Chandran, Ramachandran Ramjee , Andreas Haeberlen, Harmeet Singh,</p>
    <p>Abhishek Modi , Saikrishna Badrinarayanan</p>
    <p>University of Pennsylvania, Microsoft Research India, UCLA</p>
    <p>SEABED</p>
  </div>
  <div class="page">
    <p>Motivation: Big data analytics on sensitive data</p>
    <p>Goal: Outsource big data analytics  Store database at a cloud provider  Perform analytical queries remotely</p>
    <p>Problem: Rogue cloud admins or hackers could have access to data  Sensitive information can be exposed</p>
    <p>customer gender country payment</p>
    <p>Alice female CAN 12</p>
    <p>Bob male USA 4</p>
    <p>Charlie female USA 1</p>
    <p>Deborah female USA 15</p>
    <p>Cloud Provider</p>
    <p>What is the total revenue in the USA?</p>
    <p>Retail business</p>
    <p>Analyst</p>
    <p>Ah, now I know everyones purchases!</p>
  </div>
  <div class="page">
    <p>Prior work: Encrypted databases</p>
    <p>What can we do?  Use encryption!  Examples: CryptDB/Monomi [SOSP11, VLDB13], MS SQL Server [SQL16]  These support SQL queries on encrypted data</p>
    <p>advertiser isFraud country revenue</p>
    <p>Alpha Co. legit CAN 12</p>
    <p>Beta Inc. suspicious USA 4</p>
    <p>Psi Intl legit USA 1</p>
    <p>Omega Ltd legit USA 15</p>
    <p>customer gender country payment</p>
    <p>%Th6j h4$89 548yvg 439856</p>
    <p>Fjg893 sfbg43 a3vbt9a 582650</p>
    <p>%gTHR h4$89 a3vbt9a 143759</p>
    <p>Analyst</p>
    <p>Retail business</p>
    <p>Cloud Provider</p>
  </div>
  <div class="page">
    <p>Encrypted databases  Challenges</p>
    <p>Challenge 1: Performance  Aggregations on encrypted data are slower  Ciphertext addition is &gt; 3000x slower than plaintext  Adding 100 million values takes 6 minutes instead of 100ms</p>
    <p>Not good for big data!</p>
    <p>Retail business</p>
    <p>AnalystCloud Providercustomer gender country payment %Th6j h4$89 548yvg 439856</p>
    <p>Fjg893 sfbg43 a3vbt9a 582650</p>
    <p>%gTHR h4$89 a3vbt9a 143759</p>
    <p>Encrypted Plaintext</p>
    <p>Cost of addition (single core)</p>
    <p>More coffee breaks!</p>
  </div>
  <div class="page">
    <p>customer gender country payment</p>
    <p>%Th6j h4$89 548yvg 439856</p>
    <p>Fjg893 sfbg43 a3vbt9a 582650</p>
    <p>%gTHR h4$89 a3vbt9a 143759</p>
    <p>Encrypted databases  Challenges</p>
    <p>Challenge 2: Security  Encrypted databases use cryptographic schemes with weaker guarantees  Example: deterministic encryption (DET) reveals equality  Recent attack [CCS15] recovered &gt; 60% from certain DET columns</p>
    <p>Retail business</p>
    <p>AnalystCloud Provider</p>
  </div>
  <div class="page">
    <p>ASHE</p>
    <p>payment</p>
    <p>Our approach</p>
    <p>Goal 1: Improve performance  ASHE  New cryptographic scheme that allows fast aggregation on encrypted data</p>
    <p>Goal 2: Improve security  SPLASHE: DB transformation that enables more queries without using weaker crypto</p>
    <p>gender</p>
    <p>h4$89h</p>
    <p>sfbg43q</p>
    <p>h4$89h</p>
    <p>h4$89h</p>
    <p>customer</p>
    <p>%Th6j&amp;</p>
    <p>Fjg893n</p>
    <p>%gTHR3</p>
    <p>revenue</p>
    <p>customer</p>
    <p>%Th6j&amp;</p>
    <p>Fjg893n</p>
    <p>%gTHR3</p>
    <p>gender male</p>
    <p>h4$89h</p>
    <p>rb%Gj4</p>
    <p>kb3i&amp;Q</p>
    <p>Epvi#$R</p>
    <p>gender female</p>
    <p>gfv941E</p>
    <p>sfbg43q</p>
    <p>H7&amp;fgh1</p>
    <p>D23gr$w</p>
    <p>payment male</p>
    <p>payment female</p>
    <p>SPLASHE</p>
  </div>
  <div class="page">
    <p>Seabed: Big data analytics for encrypted datasets</p>
    <p>We built Seabed on top of Spark  Seabed leverages ASHE and SPLASHE</p>
    <p>Seabed runs SQL queries on encrypted data  Examples: Group-by queries and aggregations (sum, average, variance)</p>
    <p>Seabed is fast enough for big data  Up to 100x faster than previous systems</p>
    <p>SEABED</p>
    <p>SPLASHE</p>
    <p>ASHE</p>
    <p>Analyst</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation &amp; prior work  Approach  Improving performance</p>
    <p>ASHE  Improving security</p>
    <p>SPLASHE  System design  Evaluation</p>
  </div>
  <div class="page">
    <p>Homomorphic addition</p>
    <p>payment</p>
    <p>Why is aggregation slow in encrypted databases?</p>
    <p>We need to sum up encrypted data  This is impossible with schemes like AES</p>
    <p>We need an additively homomorphic cryptosystem  Example: Paillier encryption [EUROCRYPT99]   &amp;   ' = (&amp; + ')</p>
    <p>Plaintext DB payment</p>
    <p>Encrypted DB</p>
    <p>Integer addition +</p>
    <p>Sum = 32 Sum = Enc(32)</p>
  </div>
  <div class="page">
    <p>payment</p>
    <p>Why is aggregation slow in encrypted databases?</p>
    <p>Most homomorphic cryptosystems are expensive!  Example: Paillier ciphertexts need to be 2048-bit  Homomorphic addition:  &amp;   ' =  &amp;  (')  &gt; 3000x slower than plain addition</p>
    <p>Plaintext DB Encrypted DB payment</p>
    <p>Integer addition +</p>
    <p>Sum = 32 Sum = Enc(32)</p>
    <p>Homomorphic addition</p>
  </div>
  <div class="page">
    <p>Can we have faster homomorphic cryptosystems?</p>
    <p>But why does Paillier have so large ciphertexts?  Because it is an asymmetric scheme based on large integers  Encrypt with public key  decrypt with private key</p>
    <p>Do we need asymmetric crypto in outsourced databases?  Analysts and data collector usually work for the same organization  We could use fast symmetric crypto!</p>
    <p>Public key</p>
    <p>Private key</p>
    <p>Symmetric key</p>
    <p>Analyst</p>
    <p>Retail business</p>
  </div>
  <div class="page">
    <p>payment</p>
    <p>ASHE  Additive Symmetric Homomorphic Encryption</p>
    <p>Encrypt by masking values with random numbers  ASHE is semantically secure (IND-CPA)</p>
    <p>No need to remember random numbers  Use pseudorandom function F(ID)</p>
    <p>ASHE ciphertexts are 32/64-bit integers  Homomorphic addition only takes a few nanoseconds!</p>
    <p>Plaintext DB Encrypted DB payment</p>
    <p>payment</p>
    <p>Encrypted DB</p>
    <p>Sum = 32 + 1525</p>
    <p>ID</p>
    <p>- 1525 Sum = 32 + 1525 ID list: {1, 2, 3, 4}</p>
  </div>
  <div class="page">
    <p>ASHE  Optimizations</p>
    <p>Challenge: Aggregation and decryption cost depends on ID list length  Optimizations:</p>
    <p>Optimize encryption so that the randomness cancels out for consecutive IDs  Fast evaluation of pseudorandom function via AES-NI  Compression techniques to make ID list as small as possible</p>
    <p>Outcome: ASHE enables fast aggregation even when the DB is very large 13</p>
    <p>Encrypted DB</p>
    <p>payment</p>
    <p>ID</p>
    <p>payment</p>
    <p>Sum = 32 + ()</p>
    <p>ID list: {1, 2, 3, 4}</p>
    <p>Aggregation Decryption</p>
    <p>Compute F 1 ,F 2 ,F 3 ,F(4)</p>
    <p>Decrypt: Sum - ()</p>
    <p>AES-NI</p>
    <p>F F</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation &amp; prior work  Approach  Improving performance</p>
    <p>ASHE  Improving security</p>
    <p>SPLASHE  System design  Evaluation</p>
  </div>
  <div class="page">
    <p>Why are encrypted databases vulnerable?</p>
    <p>Some columns use deterministic encryption (DET)  This leaks the distribution of values  An adversary with auxiliary information can do a frequency attack [CCS15]</p>
    <p>In the example, the gender is revealed</p>
    <p>customer gender</p>
    <p>Alice female</p>
    <p>Bob male</p>
    <p>Charlie female</p>
    <p>Deborah female</p>
    <p>customer gender</p>
    <p>%Th6j&amp; h4$89</p>
    <p>Fjg893n sfbg43</p>
    <p>%gTHR3 h4$89</p>
    <p>h4$89h sfbg43q</p>
    <p>female male</p>
    <p>+</p>
    <p>h4$89h = female</p>
    <p>sfbg43q = male</p>
    <p>Auxiliary information</p>
  </div>
  <div class="page">
    <p>How can we avoid deterministic encryption?</p>
    <p>Support single-table aggregation queries without DET  SPLASHE: Transform DB schema to avoid DET</p>
    <p>Answer single-table aggregation queries using additions only</p>
    <p>Some storage overhead  Reduced by Enhanced SPLASHE (see paper)</p>
    <p>customer gender payment</p>
    <p>Alice female 12</p>
    <p>Bob male 4</p>
    <p>Charlie female 1</p>
    <p>Deborah female 15</p>
    <p>SELECT sum (revenue) FROM purchases WHERE gender = female</p>
    <p>customer gender female</p>
    <p>gender male</p>
    <p>payment female</p>
    <p>payment male</p>
    <p>Alice 1 0 12 0</p>
    <p>Bob 0 1 0 4</p>
    <p>Charlie 1 0 1 0</p>
    <p>Deborah 1 0 15 0</p>
    <p>Sum = 28</p>
    <p>customer gender female</p>
    <p>gender male</p>
    <p>payment female</p>
    <p>payment male</p>
    <p>%Th6j&amp; 476529 459220 439856 314437</p>
    <p>Fjg893n 956204 953265 582650 207465</p>
    <p>%gTHR3 529482 234599 143759 958922</p>
  </div>
  <div class="page">
    <p>Seabed  System design</p>
    <p>We implemented Seabed on top of unmodified Spark  ASHE and SPLASHE implemented in Scala</p>
    <p>Seabeds high-level design is similar to CryptDBs  Accepts SQL queries; transparently answers them on encrypted data  Client proxy handles encryption/decryption</p>
    <p>AnalystProxySEABED</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation &amp; prior work  Approach  Improving performance</p>
    <p>ASHE  Improving security</p>
    <p>SPLASHE  System design  Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation: Questions</p>
    <p>End-to-end latency of aggregation?  Storage overhead of SPLASHE?  End-to-end latency in Bing Ads analytics?  How scalable is aggregation?  How effective are Seabeds optimizations?  Latency of group-by queries?  Latency of batch queries (Big Data Benchmark)?</p>
    <p>End-to-end latency of aggregation?  Storage overhead of SPLASHE?  End-to-end latency in Bing Ads analytics?  How scalable is aggregation?  How effective are Seabeds optimizations?  Latency of group-by queries?  Latency of batch queries (Big Data Benchmark)?</p>
    <p>Experimental setup:  Spark with 100 cores  On MS Azure  Memory-resident data</p>
  </div>
  <div class="page">
    <p>How efficient is ASHE aggregation?</p>
    <p>Synthetic data: up to 1.75 billion rows - Query: single column aggregation  Results</p>
    <p>Paillier: up to 16.6 minutes  No encryption: &lt;1 second  How does Seabed do?</p>
    <p>Seabed is 100x faster than Paillier, even in the worst case!</p>
    <p>Dataset size (millions of rows)</p>
    <p>En d- to -e nd</p>
    <p>ti m e (s )</p>
    <p>Paillier No Enc.</p>
    <p>d- to -e nd</p>
    <p>ti m e (s )</p>
    <p>No Enc. Seabed (Worst) Seabed (Best)</p>
  </div>
  <div class="page">
    <p>DET columns replaced with SPLASHE 1 Col 5 Cols 10 Cols</p>
    <p>Si ze in cr ea se</p>
    <p>re la tiv</p>
    <p>e to p la in te xt</p>
    <p>How much storage does SPLASHE need?</p>
    <p>Dataset  760M rows, real ad-analytics application from Microsoft</p>
    <p>We replaced 10 DET columns with SPLASHE, one by one  Measured: Relative size increase vs. plaintext dataset  Results</p>
    <p>SPLASHE has substantial storage cost  Enhanced SPLASHE reduces this cost by up to 10x</p>
    <p>With 10x more storage, we avoid DET entirely!  Reduces risk of information leaks 21</p>
    <p>SPLASHE</p>
    <p>Enhanced SPLASHE</p>
  </div>
  <div class="page">
    <p>Queries 1 to 15 Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 Q10 Q11 Q12 Q13 Q14 Q15</p>
    <p>En d- to -e nd</p>
    <p>la te nc y (s ) 400</p>
    <p>How efficient is Seabed for real-world applications?</p>
    <p>Same ad-analytics application from Microsoft  Measured: End-to-end latency of 15 queries</p>
    <p>Results  No encryption is about 10x faster than Paillier across all queries  Seabed is almost as fast as no encryption (within 15-44%)</p>
    <p>It is possible to do analytics on encrypted big data!</p>
    <p>Paillier</p>
    <p>Seabed</p>
    <p>No Enc.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Big-data analytics on encrypted data is difficult  Key challenges: Performance, security</p>
    <p>We introduce additive symmetric homomorphic encryption (ASHE)  Result: much better performance when analyst and data owner trust each other</p>
    <p>We present a schema transformation called SPLASHE  Result: Often avoids the need for weaker encryption  better security</p>
    <p>Seabed: an extension of Spark that uses ASHE and SPLASHE  Up to 100x faster than previous systems</p>
    <p>Seabed is fast enough for real-world big data applications</p>
    <p>Any Questions?</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>[EYROCRYPT99] P.Paillier. Public-key cryptosystems based on composite degree residuosity classes. In Proc. EURO- CRYPT, 1999.</p>
    <p>[SOSP11] Popa, Raluca Ada, et al. &quot;CryptDB: protecting confidentiality with encrypted query processing.&quot; Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles. ACM, 2011.</p>
    <p>[VLDB13] Tu, S., Kaashoek, M. F., Madden, S., &amp; Zeldovich, N. (2013, March). Processing analytical queries over encrypted data. In Proceedings of the VLDB Endowment (Vol. 6, No. 5, pp. 289-300). VLDB Endowment.</p>
    <p>[SQL16] https://www.microsoft.com/en-us/cloud-platform/sql-server</p>
    <p>[CCS15] Naveed, Muhammad, Seny Kamara, and Charles V. Wright. &quot;Inference attacks on property-preserving encrypted databases.&quot; Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015.</p>
  </div>
</Presentation>
