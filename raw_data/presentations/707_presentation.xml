<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Nested QoS: Providing Flexible Performance in Shared IO Environment</p>
    <p>Hui Wang Peter Varman</p>
    <p>Rice University Houston, TX</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>l Introduction</p>
    <p>l System model</p>
    <p>l Analysis</p>
    <p>l Evaluation l Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Resource consolidation in data centers</p>
    <p>l Centralized storage</p>
    <p>l Economies of scale l Easier management l High reliability l VM-based server</p>
    <p>consolidation</p>
    <p>Storage Server</p>
    <p>Virtualized Host</p>
    <p>VMs VM</p>
    <p>Scheduling</p>
  </div>
  <div class="page">
    <p>Issues in resource sharing</p>
    <p>l Challenges</p>
    <p>l Performance guarantees  QoS models</p>
    <p>l Resource management l Capacity provisioning l Difficulties:</p>
    <p>sharing of multiple clients  bursty nature of storage workloads</p>
  </div>
  <div class="page">
    <p>System model for shared I/O</p>
    <p>Storage array</p>
    <p>Scheduler</p>
    <p>Client queues Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client n</p>
    <p>Sharing: The server has to properly allocated resource to concurrent clients to guarantee their performance. 5</p>
  </div>
  <div class="page">
    <p>Providing QoS for Bursty Workloads</p>
    <p>l Requests have response time QoS</p>
    <p>l Storage workloads are bursty</p>
    <p>Large capacity needed to meet response time during bursts</p>
    <p>Low average server utilization</p>
    <p>l Providing QoS for bursty</p>
    <p>workloads which have response time QoS requirement Eg. Open Mail trace, with 100ms window size</p>
    <p>Average rate:~700 IOPS  Peak rate: 4500 IOPS</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>l Proportional Resource Sharing l Algorithms:</p>
    <p>l Fair Queuing, WFQ, WF2Q, Start Time Fair Queuing , Self-Clocking</p>
    <p>l Allocate active clients bandwidth (IOPS) in proportion to their weight wi</p>
    <p>l Limitations: l Response time is not independently controlled</p>
    <p>Low throughput transactions requiring short response time  High throughput file transfer insensitive to response time</p>
    <p>l No provisioning for bursts</p>
  </div>
  <div class="page">
    <p>Related work (contd)</p>
    <p>l Providing response time guarantees l Algorithms:</p>
    <p>l SCED, pClock</p>
    <p>l Client traffic must be within a specified traffic envelope then client requests are guaranteed a maximum response time of i</p>
    <p>l Limitations: l No isolation of non-compliant part of workload</p>
    <p>Loss of QoS guarantee over extended (unbounded) portions</p>
    <p>l Only a single response time guarantee is supported  Lack of flexibility &amp; high capacity requirement</p>
  </div>
  <div class="page">
    <p>Performance QoS</p>
    <p>l QoS often specified as a percentage of workload meeting the response time bound</p>
    <p>l Absolute percentage guarantees are hard to support</p>
    <p>l Can provide response time guarantees if entire workload is bounded by a traffic envelope l Requires high capacity</p>
    <p>l Guarantee any fixed percentage (say 90%) of the workload</p>
    <p>l Unrestricted traffic above the traffic envelope can decrease the guaranteed percentage arbitrarily</p>
  </div>
  <div class="page">
    <p>Nested QoS</p>
    <p>l We propose:</p>
    <p>l Multiple traffic envelops (classes) to describe one bursty workload</p>
    <p>l Performance guarantees based on portion of traffic that satisfies traffic envelope (not percentage)</p>
    <p>l Different performance guarantees for different classes</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>l Introduction</p>
    <p>l System Model</p>
    <p>l Analysis</p>
    <p>l Evaluation</p>
    <p>l Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Traffic envelopes</p>
    <p>z Class 1</p>
    <p>(!1, &quot;1, #1)</p>
    <p>Class 2 (!2, &quot;2, #2) Class 3</p>
    <p>(!3, &quot;3, #3)</p>
    <p>l Abstract model</p>
    <p>l Each class i has l Traffic envelope (Token bucket)</p>
    <p>(i, i) l Response time i</p>
    <p>l Eg: 3-class Nested QoS model l (30, 120 IOPS, 500ms) l (20, 110 IOPS, 50ms) l (10, 100 IOPS, 5ms)</p>
  </div>
  <div class="page">
    <p>Token Bucket Regulation</p>
    <p>l Traffic Envelope Arrival Curve Limit l (, ) Token Bucket Model</p>
    <p>Tokens arrive at rate</p>
    <p>Bucket of capacity is  tokens;  Arriving request takes a token from the bucket and enters</p>
    <p>system</p>
    <p>Tokens replenished at a constant rate of  tokens/sec  Maximum number of tokens in bucket is capped at</p>
    <p>A request that arrives when there are no tokens is a violation of traffic envelope (constraints)</p>
    <p>l Service Level Agreement (SLA):  Client traffic limited by the Traffic Envelope  Response time is guaranteed on requests</p>
  </div>
  <div class="page">
    <p>Bounding the arrival curve with traffic envelope (token bucket)</p>
    <p>!&quot;#$</p>
    <p>% &amp;# &amp;' () &quot;* $ + ,, &quot;* ('</p>
    <p>-&quot;.'()&quot;./</p>
    <p>(0 1</p>
    <p>+,,&quot;*(' %&amp;,*$</p>
    <p>Token-bucket regulator: : token-generation rate : maximum tokens / instantaneous burst size Maximum # requests arriving in any time interval t:   + *t</p>
    <p>If the arrival curve lies below the Upper Bound then all requests will meet their deadlines</p>
  </div>
  <div class="page">
    <p>Architecture in VM environment</p>
    <p>Storage Server</p>
    <p>VM nVM 1</p>
    <p>Request Scheduler</p>
    <p>Request Classifier</p>
    <p>Q1</p>
    <p>Q1 Q3Q2</p>
    <p>VM 2</p>
    <p>. . . . . .</p>
    <p>. . . . . .</p>
    <p>S ch</p>
    <p>ed ul</p>
    <p>er in</p>
    <p>H yp</p>
    <p>er vi</p>
    <p>so r</p>
    <p>Q1</p>
    <p>Q1 Q3Q2</p>
    <p>Q1</p>
    <p>Q1 Q3Q2</p>
    <p>Request Classifier</p>
    <p>Request Classifier</p>
    <p>Request Classification  Multiple token buckets</p>
    <p>Request Scheduling  Two levels: EDF within</p>
    <p>VM queues and FQ across VMs</p>
    <p>Alternative: 1-level EDF  Pros: Capacity &amp;</p>
    <p>Simplicity  Cons: Low robustness to</p>
    <p>capacity variation</p>
  </div>
  <div class="page">
    <p>Request Classification</p>
    <p>Requests Arrival</p>
    <p>Classifier (!1, &quot;1)</p>
    <p>Classifier (!2, &quot;2)</p>
    <p>Classifier (!3, &quot;3)</p>
    <p>Q1, #1</p>
    <p>Q3, #3</p>
    <p>Q2, #2</p>
    <p>Queues</p>
    <p>Token Buckets</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>l Introduction</p>
    <p>l System Model</p>
    <p>l Analysis</p>
    <p>l Evaluation</p>
    <p>l Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>Proof see paper.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>l Introduction</p>
    <p>l System Model</p>
    <p>l Analysis</p>
    <p>l Evaluation l Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>l Determine the parameters empirically</p>
    <p>l Number of classes &amp; traffic envelope l Tradeoff between capacity required (cost) and performance.</p>
    <p>l Workloads</p>
    <p>l Block-level workloads from trace repository</p>
  </div>
  <div class="page">
    <p>Nested QoS for a single workload</p>
    <p>!&quot;</p>
    <p>#!!!&quot;</p>
    <p>$!!!&quot;</p>
    <p>%!!!&quot;</p>
    <p>&amp;!!!&quot;</p>
    <p>'!!!!&quot;</p>
    <p>'#!!!&quot;</p>
    <p>'$!!!&quot;</p>
    <p>'%!!!&quot;</p>
    <p>'&amp;!!!&quot;</p>
    <p>! &quot;# $&quot; %&amp; '( )*</p>
    <p>! &quot;# $&quot; %&amp; '( +*</p>
    <p>,-. /&amp; %. 0*</p>
    <p>'9: *;&lt; 1 3$ =*</p>
    <p>()*+),-./0&quot;</p>
    <p>Workloads  WebSearch1: (3, 650IOPS, 5ms)  WebSearch2: (3, 650IOPS, 5ms)  FinTrans: (4, 400 IOPS, 5ms)  OLTP: (3, 650IOPS, 5ms)  Exchange: (33, 6600IOPS, 5ms)</p>
    <p>Goal  90% requests in class 1 (5ms)  95% requests in class 2</p>
    <p>(50ms)  100% requests in class 3</p>
    <p>(500ms)</p>
    <p>Singe level QoS  100% requests in 5 ms</p>
    <p>Capacity Requirement</p>
  </div>
  <div class="page">
    <p>Nested Nested QoS for a single workload</p>
    <p>!!&quot;##$%</p>
    <p>&amp;#&quot;##$%</p>
    <p>&amp;'&quot;##$%</p>
    <p>&amp;(&quot;##$%</p>
    <p>&amp;)&quot;##$%</p>
    <p>&amp;!&quot;##$%</p>
    <p>*##&quot;##$%</p>
    <p>*#'&quot;##$%</p>
    <p>! &quot;# $&quot; %&amp; '( )*</p>
    <p>! &quot;# $&quot; %&amp; '( )*</p>
    <p>+,.&amp; %/*</p>
    <p>&amp;' &quot;</p>
    <p>&amp;% -9 &quot;&quot; ;*</p>
    <p>+%,%*%</p>
    <p>+%,%'%</p>
    <p>+%,%-%</p>
    <p>Performance for Nested QoS</p>
    <p>Goal  90% requests in class 1 (5ms)  95% requests in class 2</p>
    <p>(50ms)  100% requests in class 3</p>
    <p>(500ms)</p>
    <p>Singe level QoS  100% requests in 5 ms</p>
  </div>
  <div class="page">
    <p>Nested QoS for Concurrent Workloads</p>
    <p>!&quot;</p>
    <p>!#$&quot;</p>
    <p>!#%&quot;</p>
    <p>!#&amp;&quot;</p>
    <p>!#'&quot;</p>
    <p>!#(&quot;</p>
    <p>!#)&quot;</p>
    <p>!#*&quot;</p>
    <p>!#+&quot;</p>
    <p>!#,&quot;</p>
    <p>$&quot;</p>
    <p>-( !. /&quot;</p>
    <p>(! 0$ !! ./ &quot;</p>
    <p>$! !0 %! !. /&quot;</p>
    <p>%! !0 (! !. /&quot;</p>
    <p>!&quot; #$ % &amp;'</p>
    <p>(</p>
    <p>)*+,&amp;'+*(-./*(</p>
    <p>&lt;=&gt;:?@&quot;</p>
    <p>AB%9&quot;</p>
    <p>!&quot;</p>
    <p>!#$&quot;</p>
    <p>!#%&quot;</p>
    <p>!#&amp;&quot;</p>
    <p>!#'&quot;</p>
    <p>!#(&quot;</p>
    <p>!#)&quot;</p>
    <p>!#*&quot;</p>
    <p>!#+&quot;</p>
    <p>!#,&quot;</p>
    <p>$&quot;</p>
    <p>-( !. /&quot;</p>
    <p>(! 0$ !! ./ &quot;</p>
    <p>$! !0 %! !. /&quot;</p>
    <p>%! !0 (! !. /&quot;</p>
    <p>!&quot; #$ % &amp;'</p>
    <p>(</p>
    <p>)*+,&amp;'+*(-./*(</p>
    <p>&lt;=&gt;:?@&quot;</p>
    <p>AB%9&quot;</p>
    <p>Two workloads  W1: Web Search; ~350 IOPS  W2: Financial Transaction; ~170 IOPS  Total capacity 528 IOPS</p>
    <p>Response times:  50ms for class 1; 500ms for class 2 and 5000ms for class 3</p>
    <p>FinTrans performance WebSearch performance</p>
  </div>
  <div class="page">
    <p>Nested QoS for Concurrent Workloads</p>
    <p>!&quot;</p>
    <p>!#$&quot;</p>
    <p>!#%&quot;</p>
    <p>!#&amp;&quot;</p>
    <p>!#'&quot;</p>
    <p>!#(&quot;</p>
    <p>!#)&quot;</p>
    <p>!#*&quot;</p>
    <p>!#+&quot;</p>
    <p>!#,&quot;</p>
    <p>$&quot;</p>
    <p>-( !. /&quot;</p>
    <p>(! 0$ !! ./ &quot;</p>
    <p>$! !0 %! !. /&quot;</p>
    <p>%! !0 (! !. /&quot;</p>
    <p>!&quot; #$ %&amp; $' () *%</p>
    <p>+) ($ ,. ($</p>
    <p>'()*%+)($,-.($</p>
    <p>&lt;=&gt;:?@&quot;</p>
    <p>AB%9&quot;</p>
    <p>!&quot;</p>
    <p>!#$&quot;</p>
    <p>!#%&quot;</p>
    <p>!#&amp;&quot;</p>
    <p>!#'&quot;</p>
    <p>!#(&quot;</p>
    <p>!#)&quot;</p>
    <p>!#*&quot;</p>
    <p>!#+&quot;</p>
    <p>!#,&quot;</p>
    <p>$&quot;</p>
    <p>-( !. /&quot;</p>
    <p>(! 0$ !! ./ &quot;</p>
    <p>$! !0 %! !. /&quot;</p>
    <p>%! !0 (! !. /&quot;</p>
    <p>!&quot; #$ $% &amp;$'</p>
    <p>() *%</p>
    <p>+) ($ ,. ($</p>
    <p>'()*%+)($,-.($</p>
    <p>&lt;=&gt;:?@&quot;</p>
    <p>AB%9&quot;</p>
    <p>Two workloads  W1: Web Search; ~350 IOPS  W2: Financial Transaction; ~170 IOPS  Total capacity 528 IOPS</p>
    <p>Response times:  50ms for class 1; 500ms for class 2 and 5000ms for class 3</p>
    <p>FinTrans: CDF of Response time WebSearch: CDF of Response time 24</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>l Introduction</p>
    <p>l System Model l Analysis</p>
    <p>l Evaluation</p>
    <p>l Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Conclusions and future work</p>
    <p>l Conclusions l Large reduction in server capacity without significant performance loss l Analytical estimation of the server capacity l Providing flexible SLOs to clients with different performance/cost tradeoffs l Providing a conceptual structure of SLOs in workload decomposition</p>
    <p>l Future work l Workload characteristics for nested model parameters</p>
  </div>
</Presentation>
