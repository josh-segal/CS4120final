<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dytan: A Generic Dynamic Taint Analysis</p>
    <p>Framework James Clause, Wanchun (Paul) Li,</p>
    <p>and Alessandro Orso College of Computing</p>
    <p>Georgia Institute of Technology</p>
    <p>Partially supported by: NSF awards CCF-0541080 and CCR-0205422 to Georgia Tech,</p>
    <p>DHS and US Air Force Contract No. FA8750-05-2-0214</p>
  </div>
  <div class="page">
    <p>C</p>
    <p>A</p>
    <p>B Z</p>
    <p>C</p>
    <p>A</p>
    <p>B</p>
    <p>Z</p>
    <p>C</p>
    <p>A</p>
    <p>B</p>
    <p>Z</p>
    <p>Dynamic taint analysis (aka dynamic information-flow analysis)</p>
  </div>
  <div class="page">
    <p>Dynamic tainting applications</p>
    <p>Information policy enforcement</p>
    <p>Attack detection / prevention</p>
    <p>Testing</p>
    <p>Data lifetime / scope</p>
  </div>
  <div class="page">
    <p>Dynamic tainting applications</p>
    <p>Information policy enforcement</p>
    <p>Attack detection / prevention</p>
    <p>Testing</p>
    <p>Data lifetime / scope</p>
    <p>Attack detection / prevention Detect / prevent attacks such as SQL injection, buffer overruns,</p>
    <p>stack smashing, cross site scripting e.g., Suh et al. 04, Newsome and Song 05,</p>
    <p>Halfond et al. 06, Kong et al. 06, Qin et al. 06</p>
  </div>
  <div class="page">
    <p>Dynamic tainting applications</p>
    <p>Information policy enforcement</p>
    <p>Attack detection / prevention</p>
    <p>Testing</p>
    <p>Data lifetime / scope</p>
    <p>Information policy enforcement ensure classified information does not leak outside the system</p>
    <p>e.g.,Vachharajani et al. 04, McCamant and Ernst 06</p>
  </div>
  <div class="page">
    <p>Dynamic tainting applications</p>
    <p>Information policy enforcement</p>
    <p>Attack detection / prevention</p>
    <p>Testing</p>
    <p>Data lifetime / scope</p>
    <p>Testing Coverage metrics, test data generation heuristic, ...</p>
    <p>e.g., Masri et al 05, Leek et al. 07</p>
  </div>
  <div class="page">
    <p>Dynamic tainting applications</p>
    <p>Information policy enforcement</p>
    <p>Attack detection / prevention</p>
    <p>Testing</p>
    <p>Data lifetime / scopeData lifetime / scope track how long sensitive data, such as passwords or account</p>
    <p>numbers, remain in the application e.g., Chow et al. 04</p>
  </div>
  <div class="page">
    <p>Motivation Ad-hoc taint analysis</p>
    <p>implementation Results</p>
    <p>Ad-hoc taint analysis implementation</p>
    <p>Ad-hoc taint analysis implementation</p>
    <p>Results</p>
    <p>Results</p>
    <p>Ad-hoc taint analysis implementation</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Flexible  Easy to use  Accurate</p>
    <p>Configuration</p>
    <p>Dytan Generic Framework</p>
    <p>Custom Dynamic Taint Analysis</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>! Motivation &amp; overview</p>
    <p>Framework (Dytan)  flexibility  ease of use  accuracy</p>
    <p>Empirical evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Framework: flexibility</p>
    <p>Taint</p>
    <p>sources</p>
    <p>Propagation</p>
    <p>policy</p>
    <p>Taint</p>
    <p>sinksConfiguration</p>
  </div>
  <div class="page">
    <p>Framework: flexibility</p>
    <p>Taint</p>
    <p>sources</p>
    <p>Propagation</p>
    <p>policy</p>
    <p>Taint</p>
    <p>sinks</p>
  </div>
  <div class="page">
    <p>Framework: flexibility</p>
    <p>Taint</p>
    <p>sources</p>
    <p>Taint</p>
    <p>sources</p>
    <p>Propagation</p>
    <p>policy</p>
    <p>Taint</p>
    <p>sinks</p>
    <p>Which data to tag, and how to tag it</p>
  </div>
  <div class="page">
    <p>Framework: flexibility</p>
    <p>Propagation</p>
    <p>policy</p>
    <p>Taint</p>
    <p>sources</p>
    <p>Propagation</p>
    <p>policy</p>
    <p>Taint</p>
    <p>sinks</p>
    <p>How tags should be propagated at runtime</p>
  </div>
  <div class="page">
    <p>Framework: flexibility</p>
    <p>Taint</p>
    <p>sinks</p>
    <p>Taint</p>
    <p>sources</p>
    <p>Propagation</p>
    <p>policy</p>
    <p>Taint</p>
    <p>sinks</p>
    <p>Where and how tags should be checked</p>
  </div>
  <div class="page">
    <p>Taint sources</p>
    <p>What to tag How to tag Identify what program data should be assigned tags</p>
    <p>Variables (local or global)  Function parameters  Function return values  Data from an input stream</p>
    <p>network, filesystem, keyboard, ...</p>
    <p>Specific input stream 141.195.121.134:80, a.txt,...</p>
    <p>Describe how tags should be assigned for identified data</p>
    <p>Single tag  One tag per source  Multiple tags per source  ...</p>
  </div>
  <div class="page">
    <p>a.txta.txt</p>
    <p>Taint sources What to tag: a.txt</p>
    <p>How to tag: single tag</p>
    <p>a.txt</p>
  </div>
  <div class="page">
    <p>a.txta.txt</p>
    <p>Taint sources What to tag: a.txt</p>
    <p>a.txt</p>
    <p>How to tag: multiple tags</p>
  </div>
  <div class="page">
    <p>Affecting data Mapping function Data that affects the outcome of a statement through</p>
    <p>Data dependencies  Control dependencies</p>
    <p>A policy can consider both or only data dependencies</p>
    <p>Define how tags associated with affecting data should be combined</p>
    <p>Union  Max  ...</p>
    <p>Propagation policy</p>
    <p>B</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>if(X) {</p>
    <p>C = A + B;</p>
    <p>}</p>
    <p>Propagation policy</p>
    <p>Affecting data:</p>
    <p>control dependence</p>
    <p>Mapping function:</p>
    <p>data dependence</p>
    <p>union</p>
    <p>max</p>
  </div>
  <div class="page">
    <p>if(X) {</p>
    <p>C = A + B;</p>
    <p>}</p>
    <p>Propagation policy</p>
    <p>Affecting data:</p>
    <p>control dependence</p>
    <p>Mapping function:</p>
    <p>data dependence!</p>
    <p>union</p>
    <p>max !</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>if(X) {</p>
    <p>C = A + B;</p>
    <p>}</p>
    <p>Propagation policy</p>
    <p>Affecting data:</p>
    <p>control dependence</p>
    <p>Mapping function:</p>
    <p>data dependence!</p>
    <p>union</p>
    <p>max</p>
    <p>!</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Where to check What to check Location in the program to perform a check</p>
    <p>Function entry / exit  Statement type  Specific program point</p>
    <p>The data whose tags should be checked</p>
    <p>Variables  Function parameters  Function return value</p>
    <p>Taint Sinks</p>
    <p>How to check Set of conditions to check and a set of actions to perform if the conditions are not met.</p>
    <p>validate presence of tags (exit or log)  ensure absence of tags (exit or log)  ...</p>
  </div>
  <div class="page">
    <p>Taint Sinks</p>
    <p>cmd = read(file);</p>
    <p>args = read(socket);</p>
    <p>cmd = trim(cmd + args);</p>
    <p>...</p>
    <p>tok[] = parse(cmd);</p>
    <p>exec(tok[0], tok[1]);</p>
  </div>
  <div class="page">
    <p>validate presence of:</p>
    <p>validate absence of:</p>
    <p>Taint Sinks</p>
    <p>function: exec, param: 0</p>
    <p>Where / what to check:</p>
    <p>How to check:</p>
    <p>Result:</p>
    <p>cmd = read(file);</p>
    <p>args = read(socket);</p>
    <p>cmd = trim(cmd + args);</p>
    <p>...</p>
    <p>tok[] = parse(cmd);</p>
    <p>exec(tok[0], tok[1]);</p>
  </div>
  <div class="page">
    <p>validate presence of:</p>
    <p>validate absence of:</p>
    <p>Taint Sinks</p>
    <p>function: exec, param: 0</p>
    <p>Where / what to check:</p>
    <p>How to check:</p>
    <p>Result:</p>
    <p>cmd = read(file);</p>
    <p>args = read(socket);</p>
    <p>cmd = trim(cmd + args);</p>
    <p>...</p>
    <p>tok[] = parse(cmd);</p>
    <p>exec(tok[0], tok[1]);</p>
    <p>&quot;</p>
  </div>
  <div class="page">
    <p>Framework: ease of use</p>
    <p>Basic  Select sources, propagation policies, and</p>
    <p>sinks from a set of predefined options</p>
    <p>XML based configuration  Advanced  Suitable for more esoteric applications  Extend OO implementation</p>
    <p>Provide two ways to configure the framework</p>
  </div>
  <div class="page">
    <p>Framework: accuracy</p>
    <p>Dytan operates at the binary level  consider the actual program semantics  transparently handle libraries</p>
    <p>Dytan accounts for both data- and controlflow dependencies</p>
  </div>
  <div class="page">
    <p>Address Generators add %eax, %ebx // A = A + B consumed: %eax, [%ebx] , %ebx</p>
    <p>Two common examples:</p>
    <p>Implicit operands add %eax, %ebx // A = A + B produced: %eax , %eflags</p>
    <p>Framework: accuracy The most common source of inaccuracy is</p>
    <p>incorrectly identifying the information produced and consumed by a statement</p>
    <p>[ ] *</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>! Motivation &amp; overview</p>
    <p>! Framework</p>
    <p>! flexibility</p>
    <p>! ease of use ! accuracy</p>
    <p>Empirical evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Empirical evaluation</p>
    <p>RQ1: Can Dytan be used to (easily) implement existing dynamic taint analyses?</p>
    <p>RQ2: How do inaccurate propagation policies affect the analysis results?</p>
    <p>In addition: discussion on performance</p>
  </div>
  <div class="page">
    <p>RQ1: flexibility</p>
    <p>Selected two techniques:  Overwrite attack detection [Qin et al. 04]  SQL injection detection [Halfond et al. 06]</p>
    <p>Used Dytan to re-implement both techniques  Measure implementation time  Validate against the original implementation</p>
    <p>Goal: show that Dytan can be used to (easily) implement existing dynamic taint analyses</p>
  </div>
  <div class="page">
    <p>RQ1: results</p>
    <p>Implementation time:  Overwrite attack detection: &lt; 1 hour  SQL injection detection: &lt; 1 day</p>
    <p>Comparison with original implementations:  Successfully stopped same attacks as the</p>
    <p>original implementations</p>
  </div>
  <div class="page">
    <p>RQ2: accuracy impact</p>
    <p>Selected two subjects:  Gzip (75kb w/o libraries)  Firefox (850kb w/o libraries)</p>
    <p>Use Dytan to taint program inputs and measure the amount of heap data tainted at program exit</p>
    <p>Compare Dytan against inaccurate policies  no implicit operands (no IM)  no address generators (no AG)  no implicit operands, no address generators</p>
    <p>(no IM, no AG)</p>
    <p>Goal: measure the effect of inaccurate propagation policies on analysis results</p>
  </div>
  <div class="page">
    <p>RQ2: results</p>
    <p>Firefox (1 page) Firefox (3 pages) Gzip</p>
    <p>Dytan No IM No AG No IM, no IG</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>In line with existing implementations  Designed for experimentation  Favors flexibility over performance</p>
    <p>Implementation can be further optimized</p>
    <p>Measured for gzip: !30x for data flow</p>
    <p>!50x for data and control flow</p>
    <p>High overhead, but...</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Existing dynamic tainting approaches [Suh et al. 04, Newsome and Song 05, Halfond et al. 06, Kong et al. 06, ...]</p>
    <p>Ad-hoc</p>
    <p>Other dynamic taint analysis frameworks [Xu et al. 06 and Lam and Chiueh 06]</p>
    <p>Focused on security applications  Single taint mark  No control-flow propagation</p>
    <p>Operate at the source code level</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Dytan  a general framework for dynamic tainting  allows for instantiating and experimenting with</p>
    <p>different dynamic taint analysis approaches</p>
    <p>Initial evaluation  flexible  easy to use  accurate</p>
  </div>
  <div class="page">
    <p>Future directions</p>
    <p>Tool release (documentation, code cleanup) http://www.cc.gatech.edu/~clause/dytan/</p>
    <p>(pre-release on request)</p>
    <p>Optimization (general and specific)  Applications  Memory protection  Debugging</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>http://www.cc.gatech.edu/~clause/dytan/</p>
  </div>
</Presentation>
