<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ROSS: A Design of Read-Oriented STT-MRAM Storage for Energy-Efficient Non-Uniform Cache Architecture</p>
    <p>Jie Zhang, Miryeong Kwon, Changyoung Park, Myoungsoo Jung, Songkuk Kim</p>
    <p>Computer Architecture and Memory System Lab,</p>
    <p>Yonsei University</p>
  </div>
  <div class="page">
    <p>Summary Motivation: There is a huge demand to increase the last-level cache size. However, SRAM suffers from the high leakage power and low density. STT-MRAM can be a good candidate to replace SRAM, due to its small cell size and low leakage power.</p>
    <p>Challenge: Conventional STT-MRAM cannot directly substitute SRAM, because of</p>
    <p>- High write latency - High write energy</p>
    <p>Solution: We observe read-oriented data pattern in real applications; We propose ROSS, a read-oriented STT-MRAM storage that can</p>
    <p>- dynamically detect the read-oriented data pattern - reduce the write frequency in STT-MRAM - accommodate as many read misses as possible in LLC</p>
  </div>
  <div class="page">
    <p>Motivation Data set size increases explosively.</p>
    <p>Videos Graphs Scientific Computing</p>
    <p>Webs</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Huge demand to increase on-chip last-level cache size in future</p>
  </div>
  <div class="page">
    <p>Challenges Traditional SRAM</p>
    <p>Read Latency 397ps Write Latency 397ps Read Energy 35pJ Write Energy 35pJ</p>
    <p>Fast speed</p>
    <p>Reasonable energy</p>
    <p>Cell Area (F^2) 50~120 Low density</p>
    <p>Leakage 75.7mW High Leakage</p>
  </div>
  <div class="page">
    <p>Challenges Traditional SRAM</p>
    <p>Read Latency 397ps Write Latency 397ps Read Energy 35pJ Write Energy 35pJ</p>
    <p>Cell Area (F^2) 50~120</p>
    <p>Leakage 75.7mW</p>
    <p>STT-MRAM</p>
    <p>High density</p>
    <p>High density</p>
    <p>High Write Latency/Energy</p>
  </div>
  <div class="page">
    <p>Prior work</p>
    <p>Write Request Rerouting: accommodate write requests with idle blocks  Parallelize write requests to hide long write latency;  Cannot reduce the write energy;</p>
    <p>Read Preemption: suspend write operation and give priority to read operation  Mitigate the impact of long write latency to read access;  Cannot reduce the write latency</p>
    <p>Deadwrite bypass: predict and bypass the deadwrite (single write no read).  Effectively avoid unnecessary write access on STT-MRAM;  Bypassing deadwrite is not sufficient to avoid massive write on STT-MRAM</p>
  </div>
  <div class="page">
    <p>ROSS-key observation</p>
    <p>Last Level Cache eviction trend</p>
    <p>Read-miss distribution</p>
    <p>How the application behavior can impact LLC data access?</p>
    <p>Large working sets result in frequent cache eviction</p>
    <p>What if we can detect the singular write blocks and put in STT-MRAM?</p>
  </div>
  <div class="page">
    <p>ROSS</p>
    <p>Target: build a hybrid last-level cache to i. avoid many cache read misses with larger STT-MRAM; ii. accommodate write updates in SRAM; iii. intelligent data migration algorithm;</p>
  </div>
  <div class="page">
    <p>Hybrid-NUCA Conventional cache hierarchy</p>
    <p>Uniform latency</p>
    <p>Different wire latency latency</p>
    <p>Non-uniform cache architecture</p>
    <p>Severe wire delay</p>
  </div>
  <div class="page">
    <p>Hybrid-NUCA</p>
    <p>LLC Controller</p>
    <p>S R</p>
    <p>A M</p>
    <p>b a</p>
    <p>n k</p>
    <p>s</p>
    <p>a y</p>
    <p>a y</p>
    <p>SRAM-SRAM migrat.</p>
    <p>SRAM-&gt;STT-MRAM migration</p>
    <p>S T</p>
    <p>T -M</p>
    <p>R A</p>
    <p>M b</p>
    <p>a n</p>
    <p>ks</p>
    <p>Cache Bank Set</p>
    <p>Migration policy</p>
    <p>Address map policy</p>
    <p>Less flexibility, but simplified design</p>
  </div>
  <div class="page">
    <p>Hybrid-NUCA Migration</p>
    <p>policy Address</p>
    <p>map policy Data search</p>
    <p>policy</p>
    <p>IndexTag Bank set</p>
    <p>D e</p>
    <p>co d</p>
    <p>e rTag</p>
    <p>Array Data Array</p>
    <p>S/A S/A</p>
    <p>Comparator Match?</p>
    <p>a y</p>
    <p>a y</p>
    <p>Request routes to specific cache bank set</p>
    <p>Tag broadcast to each bank for searching</p>
  </div>
  <div class="page">
    <p>Data Flow</p>
    <p>STT-MRAM</p>
    <p>MEM</p>
    <p>SRAM</p>
    <p>L1 Cache</p>
    <p>Block Fill1</p>
    <p>Write-Back Miss2</p>
    <p>ER: Migrate multiple cache lines</p>
    <p>HB: Migrate one cache line</p>
    <p>Evict Block</p>
    <p>L2 C</p>
    <p>a ch</p>
    <p>e 5 Write Hit Write Hit5</p>
    <p>Read Hit3</p>
  </div>
  <div class="page">
    <p>Singular write detection</p>
    <p>LLC Controller</p>
    <p>1-bit status reg.</p>
    <p>C C C C C</p>
    <p>Initialize</p>
    <p>Poll</p>
    <p>Write hit 0 0 1 0 0</p>
    <p>Evict</p>
  </div>
  <div class="page">
    <p>Experiment Setup Evaluation model:</p>
    <p>ND-NUCA: traditional SRAM NUCA model; DB-NUCA: STT-MRAM NUCA model aware of deadblock; HB-ROSS: Hybrid Read-Oriented STT-MRAM Storage; ER-ROSS: Early Retirement aware Raed-Oriented STT-MRAM Storage;</p>
    <p>Gem5 simulation parameters and workloads:</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>DB-NUCA: suffer from long write latency</p>
    <p>HB-ROSS: larger capacity and less STT-MRAM write</p>
    <p>ER-ROSS: benefits from early retirement</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>DB-NUCA: suffer from evicting singular write blocks</p>
    <p>ROSS: STT-MRAM accommodates read-intensive data</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>ND-NUCA: consume more leakage energy</p>
    <p>ROSS: reduce the write energy overhead in STT-MRAM</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
