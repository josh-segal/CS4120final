<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TERN: Stable Deterministic Multithreading</p>
    <p>through Schedule Memoization</p>
    <p>Heming Cui Jingyue Wu</p>
    <p>Chia-che Tsai Junfeng Yang</p>
    <p>Computer Science Columbia University New York, NY, USA</p>
  </div>
  <div class="page">
    <p>Nondeterministic Execution</p>
    <p>Same input  many schedules  Problem: different runs may show different</p>
    <p>behaviors, even on the same inputs</p>
    <p>nondeterministic</p>
    <p>bug</p>
  </div>
  <div class="page">
    <p>Deterministic Multhreading (DMT)  Same input  same schedule</p>
    <p>[DMP ASPLOS '09], [KENDO ASPLOS '09], [COREDET ASPLOS '10], [dOS OSDI '10]</p>
    <p>Problem: minor input change  very different schedule</p>
    <p>existing DMT systems</p>
    <p>bug</p>
    <p>nondeterministic</p>
    <p>bug</p>
  </div>
  <div class="page">
    <p>Schedule Memoization  Many inputs  one schedule</p>
    <p>Memoize schedules and reuse them on future inputs  Stability: repeat familiar schedules</p>
    <p>Big benefit: avoid possible bugs in unknown schedules</p>
    <p>schedule memoization</p>
    <p>bug</p>
    <p>nondeterministic</p>
    <p>bug</p>
    <p>existing DMT systems</p>
    <p>bug</p>
  </div>
  <div class="page">
    <p>TERN: the First Stable DMT System</p>
    <p>Run on Linux as user-space schedulers</p>
    <p>To memoize a new schedule  Memoize total order of synch operations as schedule</p>
    <p>Race-free ones for determinism [RecPlay TOCS]  Track input constraints required to reuse schedule</p>
    <p>symbolic execution [KLEE OSDI '08]</p>
    <p>To reuse a schedule  Check input against memoized input constraints  If satisfies, enforce same synchronization order</p>
  </div>
  <div class="page">
    <p>Summary of Results</p>
    <p>Evaluated on diverse set of 14 programs  Apache, MySQL, PBZip2, 11 scientific programs  Real and synthetic workloads</p>
    <p>Easy to use: &lt; 10 lines for 13 out of 14</p>
    <p>Stable: e.g., 100 schedules to process over 90% of real HTTP trace with 122K requests</p>
    <p>Reasonable overhead: &lt; 10% for 9 out of 14</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>TERN overview  An Example  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Overview of TERN</p>
    <p>TERN components are shaded</p>
    <p>Input I</p>
    <p>Program</p>
    <p>Replayer</p>
    <p>OS</p>
    <p>Program</p>
    <p>Memoizer</p>
    <p>OS</p>
    <p>LLVM Compiler</p>
    <p>Instrumentor</p>
    <p>RuntimeCompile Time</p>
    <p>&lt;C, S&gt;</p>
    <p>&lt;Ci, Si&gt;</p>
    <p>&lt;C1, S1&gt;</p>
    <p>&lt;Cn, Sn&gt;</p>
    <p>Hit</p>
    <p>I, Si</p>
    <p>Miss I</p>
    <p>Schedule Cache</p>
    <p>Match?</p>
    <p>Program Source</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>TERN overview  An Example  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Simplified PBZip2 Code</p>
    <p>main(int argc, char *argv[]) { int i; int nthread = argv[1]; int nblock = argv[2];</p>
    <p>for(i=0; i&lt;nthread; ++i) pthread_create(worker);</p>
    <p>for(i=0; i&lt;nblock; ++i) { block = bread(i,argv[3]); add(worklist, block);</p>
    <p>} } worker() { for(;;) { block = get(worklist); compress(block);</p>
    <p>} }</p>
    <p>// create worker threads</p>
    <p>// read i'th file block // add block to work list</p>
    <p>// worker thread code</p>
    <p>// get a block from work list</p>
    <p>// read input</p>
    <p>// compress block</p>
  </div>
  <div class="page">
    <p>Annotating Source</p>
    <p>main(int argc, char *argv[]) { int i; int nthread = argv[1]; int nblock = argv[2];</p>
    <p>for(i=0; i&lt;nthread; ++i) pthread_create(worker);</p>
    <p>for(i=0; i&lt;nblock; ++i) { block = bread(i,argv[3]); add(worklist, block);</p>
    <p>} } worker() { for(;;) { block = get(worklist); compress(block);</p>
    <p>} }</p>
    <p>// marking inputs affecting schedulesymbolic(&amp;nthread);</p>
    <p>symbolic(&amp;nblock); // marking inputs affecting schedule</p>
    <p>// TERN intercepts</p>
    <p>// TERN intercepts</p>
    <p>// TERN intercepts</p>
    <p>// TERN tolerates inaccuracy in annotations.</p>
  </div>
  <div class="page">
    <p>Memoizing Schedules</p>
    <p>main(int argc, char *argv[]) { int i; int nthread = argv[1]; int nblock = argv[2];</p>
    <p>for(i=0; i&lt;nthread; ++i) pthread_create(worker);</p>
    <p>for(i=0; i&lt;nblock; ++i) { block = bread(i,argv[3]); add(worklist, block);</p>
    <p>} } worker() { for(;;) { block = get(worklist); compress(block);</p>
    <p>} }</p>
    <p>symbolic(&amp;nthread);</p>
    <p>symbolic(&amp;nblock);</p>
    <p>cmd$ pbzip2 2 2 foo.txt</p>
    <p>T2 T3</p>
    <p>T1</p>
    <p>T1 T1 T1</p>
    <p>T1 T1</p>
    <p>T1 T1</p>
    <p>T2 T3</p>
    <p>T1 T2 T3 pcreate</p>
    <p>add pcreate</p>
    <p>get</p>
    <p>get add</p>
    <p>Synchronization order</p>
    <p>Constraints 0 &lt; nthread ? true 1 &lt; nthread ? true 2 &lt; nthread ? false</p>
    <p>// 2 // 2</p>
  </div>
  <div class="page">
    <p>Simplifying Constraints</p>
    <p>main(int argc, char *argv[]) { int i; int nthread = argv[1]; int nblock = argv[2];</p>
    <p>for(i=0; i&lt;nthread; ++i) pthread_create(worker);</p>
    <p>for(i=0; i&lt;nblock; ++i) { block = bread(i,argv[3]); add(worklist, block);</p>
    <p>} } worker() { for(;;) { block = get(worklist); compress(block);</p>
    <p>} }</p>
    <p>symbolic(&amp;nthread);</p>
    <p>symbolic(&amp;nblock);</p>
    <p>cmd$ pbzip2 2 2 foo.txt</p>
    <p>T1 T2 T3 pcreate</p>
    <p>add pcreate</p>
    <p>get</p>
    <p>get add</p>
    <p>Synchronization order</p>
    <p>Constraints 2 == nthread 2 == nblock</p>
    <p>Constraint simplification techniques in paper</p>
  </div>
  <div class="page">
    <p>Reusing Schedules</p>
    <p>main(int argc, char *argv[]) { int i; int nthread = argv[1]; int nblock = argv[2];</p>
    <p>for(i=0; i&lt;nthread; ++i) pthread_create(worker);</p>
    <p>for(i=0; i&lt;nblock; ++i) { block = bread(i,argv[3]); add(worklist, block);</p>
    <p>} } worker() { for(;;) { block = get(worklist); compress(block);</p>
    <p>} }</p>
    <p>symbolic(&amp;nthread);</p>
    <p>symbolic(&amp;nblock);</p>
    <p>cmd$ pbzip2 2 2 bar.txt</p>
    <p>T1 T2 T3 pcreate</p>
    <p>add pcreate</p>
    <p>get</p>
    <p>get add</p>
    <p>Synchronization order</p>
    <p>Constraints 2 == nthread 2 == nblock</p>
    <p>// 2 // 2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>TERN Overview  An Example  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Stability Experiment Setup</p>
    <p>Program  Workload  Apache-CS: 4-day Columbia CS web trace, 122K  MySql-SysBench-simple: 200K random select queries  MySql-SysBench-tx: 200K random select, update, insert,</p>
    <p>and delete queries  PBZip2-usr: random 10,000 files from /usr</p>
    <p>Machine: typical 2.66GHz quad-core Intel</p>
    <p>Methodology  Memoize schedules on random 1% to 3% of workload  Measure reuse rates on entire workload (Many  1)</p>
    <p>Reuse rate: % of inputs processed with memoized schedules</p>
  </div>
  <div class="page">
    <p>How Often Can TERN Reuse Schedules?</p>
    <p>Over 90% reuse rate for three  Relatively lower reuse rate for MySql</p>
    <p>SysBench-tx due to random query types and parameters</p>
    <p>Program-Workload Reuse Rate (%) # Schedules</p>
    <p>Apache-CS 90.3 100</p>
    <p>MySQL-SysBench-Simple 94.0 50</p>
    <p>MySQL-SysBench-tx 44.2 109</p>
    <p>PBZip2-usr 96.2 90</p>
  </div>
  <div class="page">
    <p>Bug Stability Experiment Setup</p>
    <p>Bug stability: when input varies slightly, do bugs occur in one run but disappear in another?</p>
    <p>Compared against COREDET [ASPLOS10]  Open-source, software-only  Typical DMT algorithms (one used in dOS)</p>
    <p>Buggy programs: fft, lu, and barnes (SPLASH2)  Global variables are printed before assigned correct value</p>
    <p>Methodology: vary thread count and computation amount, then record bug occurrence over 100 runs for COREDET and TERN</p>
  </div>
  <div class="page">
    <p>Is Buggy Behavior Stable? (fft)</p>
    <p>COREDET: 9 schedules, one for each cell. TERN: only 3 schedules, one for each thread count. Fewer schedules  lower chance to hit bug  more stable</p>
    <p>COREDET TERN</p>
    <p>Matrix size</p>
    <p># o</p>
    <p>f th</p>
    <p>re ad</p>
    <p>s</p>
    <p>Similar results for 2 to 64 threads, 2 to 20 matrix size, and the other two buggy programs lu and barnes</p>
    <p>: no bug</p>
    <p>: bug occurred</p>
  </div>
  <div class="page">
    <p>Does TERN Incur High Overhead in reuse runs?</p>
  </div>
  <div class="page">
    <p>Conclusion and Future Work</p>
    <p>Schedule memoization: reuse schedules across different inputs (Many  1)</p>
    <p>TERN: easy to use, stable, deterministic, and fast</p>
    <p>Future work  Fast &amp; Deterministic Replay/Replication</p>
  </div>
</Presentation>
