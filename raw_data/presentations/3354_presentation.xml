<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Syntia: Synthesizing the Semantics of Obfuscated Code</p>
    <p>Tim Blazytko Moritz Contag Cornelius Aschermann Thorsten Holz</p>
    <p>Ruhr-Universitt Bochum</p>
    <p>August 17, 2017</p>
  </div>
  <div class="page">
    <p>Code obfuscation</p>
    <p>~I = (i1, . . . , in) ~O = (o1, . . . , om)</p>
    <p>? ~I = (i1, . . . , in) ~O = (o1, . . . , om)</p>
    <p>semantics-preserving transformation</p>
    <p>DRM systems, software protection systems, malware</p>
    <p>Tim Blazytko (RUB) 2 / 25</p>
  </div>
  <div class="page">
    <p>Mixed Boolean-Arithmetic</p>
    <p>x + y + z (((x  y ) + ((x  y ) &lt;&lt; 1))  z ) + (((x  y ) + ((x  y ) &lt;&lt; 1))  z )</p>
    <p>hard to simplify symbolically (NP-complete)</p>
    <p>Tim Blazytko (RUB) 3 / 25</p>
  </div>
  <div class="page">
    <p>Virtual Machine-based obfuscation</p>
    <p>VM Entry switch from native</p>
    <p>to VM context</p>
    <p>Native Code</p>
    <p>Bytecode</p>
    <p>Fetch</p>
    <p>handler_add8 handler_mul16 handler_not8</p>
    <p>handler_sub32</p>
    <p>Handler Table</p>
    <p>Decode</p>
    <p>Execute</p>
    <p>obfuscated code is interpreted by virtual CPU Tim Blazytko (RUB) 4 / 25</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Yadegari et al. use taint analysis and symbolic execution for deobfuscation (S&amp;P 2015)</p>
    <p>Banescu et al. introduce code obfuscation against symbolic execution attacks (ACSAC 2016)</p>
    <p>Contributions orthogonal approach to traditional techniques learn the codes semantic based on its I/O behavior generic approach for trace simplification via program synthesis</p>
    <p>Tim Blazytko (RUB) 5 / 25</p>
  </div>
  <div class="page">
    <p>Syntactic versus semantic complexity RAX = { ( ( ( ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0xA3665E57 ) * 0xB03CEE0B ) ) + ( - ( ( ( ( ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0xA3665E57 ) * 0xB03CEE0B ) ) + ( { ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x6DB7E0E ) 0 32, ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x6DB7E0E ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } * { ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [0:32] 0 32, ( ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } ) [0:32] + ( { ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0x5C99A1A9 ) 0 32, ( ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0x5C99A1A9 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } * { ( { ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [0:32] 0 32, ( ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } ) [0:32] ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + ( - ( ( ( ( ( ( - ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xB03CEE0B ) ) + ( - ( ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0xA3665E57 ) * 0xB03CEE0B ) ) + ( { ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x6DB7E0E ) 0 32, ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x6DB7E0E ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } * { ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [0:32] 0 32, ( ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } ) [0:32] + ( { ( ( ( ( ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0x5C99A1A9 ) 0 32, ( ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0x5C99A1A9 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } * { ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [0:32] 0 32, ( ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } ) [0:32] ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + ( { ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x6DB7E0E ) 0 32, ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + ( - ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) ) + 0x6DB7E0E ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } * { ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [0:32] 0 32, ( ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } ) [0:32] + ( { ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0x5C99A1A9 ) 0 32, ( ( ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) + 0x4FC311F5 ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) ) + 0x4FC311F5 ) ) * 0x55BE239B ) + ( - ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) ) + 0x5C99A1A9 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } * { ( { ( ( ( @32 [ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [0:32] 0 32, ( ( { ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + ( ( ( ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF0 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0x581F756D ) + 0xB03CEE0A ) | ( ( - ( ( ( @32[ ( RBP_init + 0xFFFFFFFFFFFFFFF8 ) ] * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) ) + 0xB03CEE0A ) ) * 0x55BE239B ) + 0x5C99A1A9 ) * 0xA7E08A93 ) 0 32, 0x0 32 64 } + 0x1 ) [31:32]? ( 0xFFFFFFFF,0x0 ) ) 32 64 } ) [0:32] + 0x5483B8CA ) * 0xA7E08A93 ) + 0x4FC311F5 ) 0 32, 0x0 32 64 }</p>
    <p>RAX = ((M3 * M2) ^ M4)RAX = ((M3 * M2) ^ M4)</p>
    <p>Tim Blazytko (RUB) 6 / 25</p>
  </div>
  <div class="page">
    <p>Symbolic execution and program synthesis</p>
    <p>semantic</p>
    <p>simple complex</p>
    <p>syntax symbolic synthesis symbolic synthesis</p>
    <p>simple ! ! ! 7</p>
    <p>complex 7 ! 7 7</p>
    <p>Tim Blazytko (RUB) 7 / 25</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Simplification of instruction traces 1. dissecting trace intro trace windows 2. random sampling of each trace window 3. synthesis of trace windows</p>
    <p>Tim Blazytko (RUB) 8 / 25</p>
  </div>
  <div class="page">
    <p>Trace dissection Split at indirect control-flow transfers</p>
    <p>mov rax, 0x8 add rax, rbx jmp rdx inc rax ret mov rdx, 0x1 ret</p>
    <p>mov rax, 0x8 add rax, rbx jmp rdx</p>
    <p>Trace window 1</p>
    <p>inc rax ret</p>
    <p>Trace window 2</p>
    <p>mov rdx, 0x1 ret</p>
    <p>Trace window 3</p>
    <p>Tim Blazytko (RUB) 9 / 25</p>
  </div>
  <div class="page">
    <p>Random sampling 1 mov rax, [rbp + 0x8] 2 add rax, rcx 3 mov [rbp + 0x8], rax 4 add [rbp + 0x8], rdx</p>
    <p>inputs: ~I = (M1, rcx, rdx) outputs: O1, O2</p>
    <p>M1 rcx rdx O1 O2</p>
    <p>Tim Blazytko (RUB) 10 / 25</p>
  </div>
  <div class="page">
    <p>Synthesis of trace windows</p>
    <p>M1 rcx rdx O1 O2</p>
    <p>We synthesize each output separately:</p>
    <p>O1 = M1 + rcx</p>
    <p>O2 = (M1 + rcx) + rdx</p>
    <p>Tim Blazytko (RUB) 11 / 25</p>
  </div>
  <div class="page">
    <p>Program synthesis</p>
    <p>probabilistic optimization problem</p>
    <p>guided search towards more promising program candidates</p>
    <p>based on Monte Carlo Tree Search (MCTS)</p>
    <p>General idea Input: I/O samples from program P</p>
    <p>generate candidate program P (based on prior knowledge) compare the I/O behavior of P to P backpropagation</p>
    <p>Tim Blazytko (RUB) 12 / 25</p>
  </div>
  <div class="page">
    <p>Running example We want to synthesize</p>
    <p>f (a, b) := a + b mod 23</p>
    <p>The set of I/O samples is</p>
    <p>a b O</p>
    <p>Tim Blazytko (RUB) 13 / 25</p>
  </div>
  <div class="page">
    <p>Context-free grammar</p>
    <p>U  U + U | U  U | a | b</p>
    <p>non-terminal symbols: U</p>
    <p>a terminal symbol for each input: {a, b}</p>
    <p>sentences of the grammar are candidate programs: a + b</p>
    <p>intermediate programs contain non-terminal symbols: U + U</p>
    <p>U  U + U  U + b  a + b</p>
    <p>Tim Blazytko (RUB) 14 / 25</p>
  </div>
  <div class="page">
    <p>Which intermediate program is more promising?</p>
    <p>U  U  ((a + a)  (b  a))  g (a, b) := ((a + a)  (b  a)) mod 23</p>
    <p>a b O</p>
    <p>U + U  (a + (b + b))  h(a, b) := (a + (b + b)) mod 23</p>
    <p>a b O+</p>
    <p>We come back to this in a few minutes. Tim Blazytko (RUB) 15 / 25</p>
  </div>
  <div class="page">
    <p>Measuring output similarity How close is the I/O behavior to the original program?</p>
    <p>output similarity is represented by a score</p>
    <p>score 1.0: equivalent output behavior for all samples</p>
    <p>arithmetic mean of different similarity metrics defines the score</p>
    <p>We compare</p>
    <p>how close two values are numerically (arithmetic distance)</p>
    <p>in how many bits two values differ (Hamming distance)</p>
    <p>if two values are in the same range (leading/trailing zeros/ones)</p>
    <p>Tim Blazytko (RUB) 16 / 25</p>
  </div>
  <div class="page">
    <p>Example: Hamming distance and leading zeros</p>
    <p>similarity(O, O) := hamming(O, O) + lz(O, O)</p>
    <p>U  U: g (a, b) O O hamming lz similarity</p>
    <p>average similarity: 0.28</p>
    <p>U + U: h(a, b) O O+ hamming lz similarity</p>
    <p>average similarity: 0.73  from U + U derived program candidate is more promising  next generated program candidate more-likely based on U + U than U  U</p>
    <p>Tim Blazytko (RUB) 17 / 25</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>simplification of Mixed Boolean-Arithmetic</p>
    <p>Tigress Obfuscator</p>
    <p>synthesis of arithmetic VM instruction handlers</p>
    <p>commercial versions of VMProtect and Themida</p>
    <p>ROP gadget analysis</p>
    <p>Verification All synthesis results have been verified by manual reverse engineering.</p>
    <p>Tim Blazytko (RUB) 18 / 25</p>
  </div>
  <div class="page">
    <p>Mixed Boolean-Arithmetic int p10 (int v0, int v1, int v2, int v3, int v4) {</p>
    <p>int r = ((~ v0) - v4);</p>
    <p>return r; }</p>
    <p>generated 500 random expressions</p>
    <p>two stages of arithmetic encoding</p>
    <p>synthesized 448 expressions (90%) in the first run</p>
    <p>Tim Blazytko (RUB) 19 / 25</p>
  </div>
  <div class="page">
    <p>Probabilistic synthesis behavior</p>
    <p># synthesis runs</p>
    <p># sy nt he siz</p>
    <p>ed ex pr es sio</p>
    <p>ns</p>
    <p>Tim Blazytko (RUB) 20 / 25</p>
  </div>
  <div class="page">
    <p>Arithmetic VM instruction handler</p>
    <p>mov r15, 0x200 xor r15, 0x800 mov rbx, rbp add rbx, 0xc0 mov rbx, qword ptr [rbx] mov r13, 1 mov rcx, 0 mov r15, rbp add r15, 0xc0 or rcx, 0x88 add rbx, 0xb mov r15, qword ptr [r15] or r12, 0xffffffff80000000 sub rcx, 0x78 movzx r10, word ptr [rbx] xor r12, r13 add r12, 0xffff add r15, 0 mov r8, rbp sub rcx, 0x10 or r12, r12 or rcx, 0x800 movzx r11, word ptr [r15] xor rcx, 0x800 mov r12, r15 add r8, 0 xor r12, 0xf0 mov rbx, 0x58 add r11, rbp xor rbx, 0x800 and r12, 0x20 add rbx, 0x800 mov r11, qword ptr [r11] add rbx, 1 and r12, r9 mov rdx, 1 xor r10d, dword ptr [r8] sub r9, r11 pushfq xor rbx, 0xf0 xor rbx, 0x800 and rdx, r8 mov r12, rbp xor rdx, 0x20 sub rbx, 4 add r11, 0x2549b044 or rbx, 0x78 and rdx, r10 mov rax, 0 add r12, 0x42</p>
    <p>mov r15, rdx xor r10d, dword ptr [r12] sub r15, 0x800 or rdx, 0x400 mov rsi, 0x200 mov r14, rbp sub rsi, rsi mov rdi, rbp mov r8, 0x400 sub rsi, r9 sub r8, rsi add r14, 0 add rsi, rax and r8, 0x88 xor rsi, r14 mov rsi, rbp add rdi, 0xc0 sub r8, rdi add r8, 0x78 add rsi, 4 mov rcx, 0x200 mov rdi, qword ptr [rdi] add dword ptr [rsi], 0x2549b044 xor rcx, 0xf0 add rcx, r10 add rdi, 6 mov r8, 0x400 mov ax, word ptr [rdi] mov r8, 1 mov rsi, rbp and rcx, 8 sub rcx, 1 mov rcx, rdi add rsi, 0x29 or rcx, 8 mov r8, rsi add rcx, 4 mov r13b, byte ptr [rsi] cmp r13b, 0xd2 jbe 0x4f2c1e and r8, r13 or rcx, r13 or rcx, 4 mov rbx, rbp or rcx, 4 sub rcx, 0x400 add rax, rbp or rcx, 0x80 add rcx, 0x80 add rbx, 0x5a</p>
    <p>add r8, 1 or r8, 0x78 add word ptr [rbx], r10w mov r15, rax sub r15, rax pop r9 mov rcx, rbp add rcx, 0xc0 mov rcx, qword ptr [rcx] add rcx, 8 movzx r10, word ptr [rcx] mov r9, rbp add r9, 0 xor r10d, dword ptr [r9] and rdi, 0xffffffff80000000 sub r13, 0xf0 mov rsi, 0 sub r13, 0x20 mov rbx, rbp or r13, 0x88 and rcx, 8 mov r8, 0x58 add rbx, 0xc0 mov rbx, qword ptr [rbx] sub rcx, 0x20 add rdi, 0x80 sub r13, 0x10 add rbx, 8 mov si, word ptr [rbx] or r9, 0xffff sub r9, 1 mov r9, rbp mov r12, 0x58 add r9, 0 sub r13, 0x80 mov r15, r13 or rcx, r12 xor esi, dword ptr [r9] mov r10, rbp add r10, 0xcc sub r15, 0x20 xor esi, dword ptr [r10] xor r13, 0x90 add rdi, 0x10 mov r14, rsi mov rdx, rbp add rdx, 0 add dword ptr [rdx], esi xor r12, 1 mov r13, r15</p>
    <p>or r14, r14 mov rax, rbp and rcx, r13 add rax, 4 sub r8, -0x80000000 add r13, 0xffff and rcx, 0x20 mov r10, rbp add r13, r15 add r14, r8 add r10, 0x89 xor word ptr [r10], si xor rdx, r11 mov rsi, rbp sub rdx, rbx and rax, 0x40 or rbx, 0xf0 add rsi, 0x5a mov r8, rcx movzx rsi, word ptr [rsi] mov rax, 0x200 mov r14, rbp and rax, rdx and rcx, 0x20 add r14, 0x89 or rax, 0x40 xor si, 0x7a28 add rdx, 0x78 add rdx, 0x20 movzx r14, word ptr [r14] mov rcx, 0x58 add rsi, rbp xor rax, rdx add r8, 0x80 mov r15, rsi add r14, rbp add r8, r15 mov rbx, 0 and rdx, 0x10 mov r14, qword ptr [r14] add qword ptr [rsi], r14 pushfq xor r11, r14 add r15, r14 mov r13, 0x12 mov r8, 0 and r14, 0x88 and r13, 0x40 add r13, 1 mov rdx, rbp</p>
    <p>mov r14, 0x200 add rdx, 0xc0 add r11, r14 or r15, 0x88 mov rdx, qword ptr [rdx] add rdx, 0xa add r11, 0x78 mov r8b, byte ptr [rdx] cmp r8b, 0 je 0x4f2ede mov rdx, rbp or r11, 0x40 and r15, 1 xor r11, 0x10 add rdx, 0xc0 or r14, 4 mov r15, 0x12 mov rdx, qword ptr [rdx] sub r11, r8 add rdx, 4 or r11, 0x80 mov r8w, word ptr [rdx] mov r14, r8 add r8, rbp xor r13, 4 pop r10 mov qword ptr [r8], r10 jmp 0x4f2eee xor rsi, 0x88 xor rbx, 0xffffffff80000000 add rsi, 0x78 mov r10b, 0x68 mov r9, 0x12 or rbx, r10 and r15, 0x78 mov r14, rbp or r9, 8 add r14, 0x29 xor rbx, rdi and r15, 0x3f or byte ptr [r14], r10b mov rax, 0x58 mov r8, rbp sub rsi, 0x78 add r8, 0x127 mov rdi, rbx xor rbx, 0x3f mov r8, qword ptr [r8] xor rsi, 1 mov rax, rbp</p>
    <p>add r15, 0x3f or r15, 0xffffffff80000000 and rsi, r9 add rax, 0xc0 add rdi, r14 or rsi, 1 mov rax, qword ptr [rax] and rdi, 0x7fffffff add rax, 2 sub rsi, 4 or rbx, rsi movzx rax, word ptr [rax] mov r9, rbp mov r13, 0x200 mov r10, 0x58 add r9, 0 or r10, 0x20 add eax, dword ptr [r9] xor r10, 0x40 add eax, 0x3f505c07 add r15, 0x88 mov r12, rbp or rdi, 0x90 add r12, 0 or rbx, 0x80 add rdi, 0xf0 mov r13, 0x400 add dword ptr [r12], eax and rsi, r8 or r10, 8 and rbx, 0x20 and rax, 0xffff mov r11, 0 add r13, r8 or rbx, 1 shl rax, 3 add r8, rax or rbx, r15 sub r15, 0x10 or r11, r13 mov rbx, qword ptr [r8] mov rdx, rbp sub r13, 0x80 add rdx, 0xc0 add qword ptr [rdx], 0xd jmp rbx</p>
    <p>u64 res = M13 + M14u64 res = M13 + M14</p>
    <p>Tim Blazytko (RUB) 21 / 25</p>
  </div>
  <div class="page">
    <p>Arithmetic VM instruction handler</p>
    <p>VMProtect Themida</p>
    <p>#unique trace windows 449 106 #instructions per window 49 258 #inputs per window 2 15 #outputs per window 2 10 #synthesis tasks 1,123 1,092</p>
    <p>I/O sampling time (s) 118 60 synthesis time per task (s) 3.7 9.1</p>
    <p>VMProtect: 194 out of 196 handlers (98%)</p>
    <p>Themida: 34 out of 36 handlers (no I/O samples for 2 handlers)</p>
    <p>Tim Blazytko (RUB) 22 / 25</p>
  </div>
  <div class="page">
    <p>ROP gadget analysis</p>
    <p>inc eax pop ebp ret</p>
    <p>Synthesis results:</p>
    <p>O1 = eax + 1 O2 = esp + 4</p>
    <p>Tim Blazytko (RUB) 23 / 25</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>trace window boundaries</p>
    <p>semantic complexity</p>
    <p>non-deterministic functions</p>
    <p>point functions (e.g., hash comparisons)</p>
    <p>confusion and diffusion (cryptography)</p>
    <p>Tim Blazytko (RUB) 24 / 25</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>traditional deobfuscation techniques are limited by codes complexity</p>
    <p>program synthesis is limited by the codes semantic complexity</p>
    <p>succeeds where traditional approaches fail</p>
    <p>introduced a generic approach for trace simplification</p>
    <p>demonstrated that program synthesis is applicable to real-world obfuscated code</p>
    <p>Tim Blazytko (RUB) 25 / 25</p>
  </div>
  <div class="page">
    <p>References I</p>
    <p>Cameron B Browne et al. A Survey of Monte Carlo Tree Search Methods. In: IEEE Transactions on Computational Intelligence and AI in Games (2012).</p>
    <p>Tim Blazytko (RUB) 26 / 25</p>
  </div>
  <div class="page">
    <p>Monte Carlo tree search (MCTS) Introduction</p>
    <p>general game playing, Computer Go</p>
    <p>reinforcement learning</p>
    <p>does not require much domain knowledge</p>
    <p>efficient tree search for exponential decision trees</p>
    <p>based on random walks and Monte Carlo simulations</p>
    <p>synthesis as stochastic optimization problem</p>
    <p>Tim Blazytko (RUB) 27 / 25</p>
  </div>
  <div class="page">
    <p>Monte Carlo tree search (MCTS) Algorithm</p>
    <p>select best child node (exploration vs. exploitation trade-off)</p>
    <p>derive new game states</p>
    <p>random playouts a score represents the nodes quality</p>
    <p>update the paths quality</p>
    <p>Tim Blazytko (RUB) 28 / 25</p>
  </div>
  <div class="page">
    <p>Monte Carlo tree search (MCTS) Visualization</p>
    <p>Tree Policy</p>
    <p>Default Policy</p>
    <p>Selection Expansion Simulation Backpropagation</p>
    <p>Figure: MCTS algorithm [1]</p>
    <p>Tim Blazytko (RUB) 29 / 25</p>
  </div>
  <div class="page">
    <p>Selection Upper confidence bound for trees (UCT)</p>
    <p>X j + C</p>
    <p>ln n nj</p>
    <p>average child reward: X j</p>
    <p>number of simulations (parent node): n</p>
    <p>number of simulations (child node): nj</p>
    <p>exploration-exploitation constant: C</p>
    <p>Tim Blazytko (RUB) 30 / 25</p>
  </div>
  <div class="page">
    <p>Selection Simulated Annealing UCT (SA-UCT)</p>
    <p>X j + T</p>
    <p>ln n nj</p>
    <p>dynamic parameter: T = C NiN</p>
    <p>exploration-exploitation constant: C</p>
    <p>maximal MCTS rounds: N</p>
    <p>current MCTS round: i</p>
    <p>Focus shifts to exploitation over time.</p>
    <p>Tim Blazytko (RUB) 31 / 25</p>
  </div>
  <div class="page">
    <p>Synthesis tree</p>
    <p>U</p>
    <p>U U * U U +</p>
    <p>U b + U U U + + U a +</p>
    <p>U U * a + b a +</p>
    <p>U U U * +</p>
    <p>a b</p>
    <p>Tim Blazytko (RUB) 32 / 25</p>
  </div>
  <div class="page">
    <p>Grammar components</p>
    <p>addition, multiplication</p>
    <p>unary/binary minus</p>
    <p>signed/unsigned division</p>
    <p>signed/unsigned remainder</p>
    <p>logical and arithmetic shifts</p>
    <p>unary/binary bitwise operations</p>
    <p>zero/sign extend</p>
    <p>extract</p>
    <p>concat</p>
    <p>Tim Blazytko (RUB) 33 / 25</p>
  </div>
  <div class="page">
    <p>Expression derivation</p>
    <p>U U U  +  (U + (U  U))</p>
    <p>+</p>
    <p>U*</p>
    <p>UU</p>
    <p>apply random production rule to top-most-right-most U</p>
    <p>Tim Blazytko (RUB) 34 / 25</p>
  </div>
  <div class="page">
    <p>Random playout</p>
    <p>Algorithm Input: Set of I/O samples S 1. randomly derive terminal expression T from current node 2. reward := 0 3. for all ~I, O  S</p>
    <p>Tim Blazytko (RUB) 35 / 25</p>
  </div>
  <div class="page">
    <p>Backpropagation</p>
    <p>Algorithm Input: current node n 1. WHILE n 6= root</p>
    <p>Tim Blazytko (RUB) 36 / 25</p>
  </div>
</Presentation>
