<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Quality-Aware Segment Transmission</p>
    <p>Scheduling in Peer-to-Peer Streaming</p>
    <p>Systems</p>
    <p>Cheng-Hsin Hsu Senior Research Scientist</p>
    <p>Deutsche Telekom R&amp;D Lab USA Los Altos, CA</p>
    <p>Joint Work with Mohamed Hefeeda</p>
    <p>February 23, 2010</p>
  </div>
  <div class="page">
    <p>P2P streaming is getting increasingly popular with real deployments</p>
    <p>Can be roughly categorized into  Tree-based systems, where multicast trees</p>
    <p>are used for content distribution  Mesh-based systems, where each peer</p>
    <p>connects to a few neighbours without knowing the global topology</p>
    <p>We consider mesh-based P2P streaming systems in this work</p>
    <p>P2P Multimedia StreamingP2P Multimedia Streaming</p>
  </div>
  <div class="page">
    <p>Multimedia content is divided into segments  Senders hold different segments  A receiver runs a scheduling algorithm to</p>
    <p>compute a transmission schedule</p>
    <p>Segment Scheduling ProblemSegment Scheduling Problem</p>
    <p>Receiver</p>
    <p>Sender 1</p>
    <p>Sender 2</p>
    <p>Sender 3</p>
  </div>
  <div class="page">
    <p>Segment Scheduling Algorithm</p>
    <p>Segment scheduling algorithm is important in both live and on-demand P2P streaming  Only ontime delivered segments can be rendered</p>
    <p>to users for better video quality  Recent studies, such as [Hei et al. ToM 08], show that users</p>
    <p>suffer from long startup delays and playout lags, and suggest that better segment scheduling algorithms are required</p>
    <p>But, scheduling segments to maximize video quality is a hard problem</p>
  </div>
  <div class="page">
    <p>Scheduling Algorithms in Current Systems</p>
    <p>Heuristic Algorithms: random [Pai et al. 05], rarest-first [Zhang et al. 05], and weighted round-robin [Agarwal and Rajaie 05]  They do not perform well in VoD services, nor do</p>
    <p>they provide performance guarantee</p>
    <p>Solving Simplified Scheduling Problem [Chakareski and Frossard 09] [Zhang et al. 09]</p>
    <p>For example, by defining ad-hoc utility function  May be optimally solved, but for a utility different</p>
    <p>from video quality</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>We study the segment scheduling problem in live and one-demand P2P streaming systems</p>
    <p>We prove the segment scheduling problem is NPComplete</p>
    <p>We present an integer linear programming (ILP) formulation to maximize video quality, and we solve it using an ILP solver</p>
    <p>We propose and analyze an efficient approx. algorithm</p>
    <p>We evaluate our proposed algorithm in a P2P simulator</p>
  </div>
  <div class="page">
    <p>Modeling a P2P Streaming Session</p>
    <p>We consider a streaming session with M senders and one receiver</p>
    <p>The videos are encoded at F frame per second  Every G frames is aggregated into a segment n with</p>
    <p>size sn, and the video consists of N segments  Segment n has a decoding deadline dn = (n-1)G/F  The receiver maintains the segment availability info,</p>
    <p>we let</p>
  </div>
  <div class="page">
    <p>Modeling a P2P Streaming Session (cont.)</p>
    <p>The upload bandwidth bm for sender m is periodically measured by a lightweight utility</p>
    <p>We let wn be the weight/value of segment n, which can be in any quality metric, such as PSNR</p>
    <p>We periodically solve the segment scheduling problem every sec, which is a system parameter</p>
  </div>
  <div class="page">
    <p>Modeling a P2P Streaming Session (cont.)</p>
    <p>Goal of our algorithm: construct an optimal schedule for each scheduling window of sec, which indicates that sender ni sends segment mi at time ti  A segment is ontime if  The sum of weights of all ontime segments is</p>
    <p>maximized</p>
  </div>
  <div class="page">
    <p>Formulation</p>
    <p>We divide the time axis into T time slots and define</p>
    <p>We write the formulation</p>
    <p>(1a) Maximize sum of weights of ontime segments (1b) Schedule a segment to a sender holding it</p>
    <p>(1c) Schedule up to a segment for each time slot</p>
    <p>(1d) Schedule each segment to at most one sender</p>
  </div>
  <div class="page">
    <p>An Optimal Solution</p>
    <p>We solve this formulation using ILP solvers, such as CPLEX</p>
    <p>But, solving ILP problems may take a long time  Hence, we develop an approx. algorithm in the</p>
    <p>following</p>
  </div>
  <div class="page">
    <p>Our Approx. Algorithm -- Approach</p>
    <p>Relax the ILP formulation into an LP (linear programming) formulation</p>
    <p>Solve the LP problem using simplex or interior point methods for fractional schedule</p>
    <p>Round the fractional solution for integral solution with performance bound</p>
  </div>
  <div class="page">
    <p>Our Approx. Algorithm -- Rounding</p>
    <p>For each sender m = 1, 2, , M, construct multiple integral schedules from the fractional schedule</p>
    <p>Then select the best schedule out of all integral schedules</p>
    <p>We schedule the segments in the best schedule to sender m, and remove these segments from the problem</p>
    <p>Next m</p>
  </div>
  <div class="page">
    <p>Analysis of Our Algorithm</p>
    <p>[Lemma 1] Our algorithm achieves approx. factor of 2 when there is only one sender</p>
    <p>Proof Idea: the way we create integral schedules guarantees that at least one of them achieves approx. factor of 2</p>
    <p>[Theorem 2] Our algorithm achieves approx. factor of 3 when there are multiple senders</p>
    <p>Proof Idea: proved from the fact that we sequentially assign segments to senders</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>We implement a P2P simulator  We implement four scheduling algorithms in it</p>
    <p>OPT: ILP solver  WSS: our approx. algorithm  RF: rarest first  MC: mincost flow based</p>
    <p>We encode 10 videos into H.264 streams  We simulate a P2P system with 2000 peers for 24</p>
    <p>hours</p>
  </div>
  <div class="page">
    <p>Evaluation (cont.)</p>
    <p>Each peer connects to 10 senders  Peers have realistic upload bandwidth [Liu et al. 08]  Joining and leaving times are randomly chosen</p>
    <p>Considered two performance metrics  Average video quality in PSNR  Continuity index, which is the fraction of video</p>
    <p>frames arrive ontime</p>
  </div>
  <div class="page">
    <p>Comparison against Current Solutions</p>
    <p>Better quality in PSNR: &gt; 3 dB improvement  Higher continuity index: &gt; 10% difference</p>
    <p>&gt; 3 dB &gt; 10%</p>
  </div>
  <div class="page">
    <p>Comparison against Optimal Solution</p>
    <p>Close to optimum performance under realistic system parameters</p>
    <p>&lt; 0.3 dB &lt; 3%</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>We considered the segment scheduling problem in P2P streaming systems</p>
    <p>We presented an ILP formulation of this problem, and solved it using ILP solvers</p>
    <p>We proposed an approx. algorithm, and proved that it has an approx. factor of 3</p>
    <p>We evaluated our approx. algorithm in a P2P simulator  It outperforms algorithms used in current systems  It is almost-optimal with typical system parameters</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
