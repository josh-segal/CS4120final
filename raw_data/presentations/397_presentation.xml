<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exposing iClass Key Diversification</p>
    <p>Flavio D. Garcia</p>
    <p>Gerhard de Koning Gans</p>
    <p>Roel Verdult</p>
    <p>Usenix WOOT 2011</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Introduction  RFID  iClass and Picopass  Key Diversification</p>
    <p>iClass Key Diversification  DES and Fortify  Reader Control and Key Updates</p>
    <p>Finding hash0 and hash0-1</p>
    <p>Key Recovery Attack  Conclusion</p>
  </div>
  <div class="page">
    <p>Radio Frequency Identification (RFID)</p>
  </div>
  <div class="page">
    <p>Radio Frequency Identification (RFID)</p>
  </div>
  <div class="page">
    <p>iClass and PicoPass</p>
  </div>
  <div class="page">
    <p>iClass (HID Global)</p>
    <p>ISO 15693 compatible smartcard</p>
    <p>Introduced in 2002 as replacement of HID prox  Over 300 million cards sold (according to HID)</p>
  </div>
  <div class="page">
    <p>iClass (HID Global)</p>
    <p>Widely used in access control (examples from HID)  The Bank of America Merrill Lynch  Int. Airport of Mexico City  Navy base of Pearl Harbor</p>
    <p>Used as secure authentication  NaviGO (Dell Latitude and Precision)  e-Payment</p>
    <p>Billing systems</p>
  </div>
  <div class="page">
    <p>iClass</p>
    <p>One master key for every system  Built-in Key Diversification</p>
  </div>
  <div class="page">
    <p>Security by Obscurity?</p>
    <p>We know the examples of  Mifare Classic  KeeLoq  Hitag2</p>
    <p>How is the key diversification implemented?  Important question since it is built-in!</p>
  </div>
  <div class="page">
    <p>Our Contribution</p>
    <p>Reverse engineering of built-in key diversification  Encryption of ID  'Hashing' by hash0</p>
    <p>By-pass encryption mode of Omnikey Secure Mode  New library to communicate in Secure Mode</p>
    <p>Custom firmware for Proxmark3 (RFID Tool)  To eavesdrop ISO 15693 communication</p>
    <p>Released all of above (proxmark.org)  We show that hash0 can be inverted and give an</p>
    <p>attack to find the master key!</p>
  </div>
  <div class="page">
    <p>Key Diversification</p>
    <p>Request ID</p>
    <p>card key = diversify(MK,45)</p>
  </div>
  <div class="page">
    <p>iClass Key Diversification/Fortification</p>
    <p>[Source: PicoPass Datasheets]</p>
  </div>
  <div class="page">
    <p>iClass Key Diversification/Fortification</p>
    <p>[Source: PicoPass Datasheets]</p>
    <p>hash0, h0</p>
  </div>
  <div class="page">
    <p>Omnikey (HID Global)</p>
    <p>ISO 24727 requires encryption of USB connection</p>
  </div>
  <div class="page">
    <p>Omnikey Secure Mode</p>
    <p>iCLASSCardLib.dll</p>
  </div>
  <div class="page">
    <p>iClass Memory Layout</p>
    <p>Key Slot Value</p>
    <p>..</p>
    <p>..</p>
  </div>
  <div class="page">
    <p>Authentication Protocol</p>
    <p>Card Identity Card Challenge</p>
    <p>Reader Random Reader 'MAC'</p>
    <p>Card 'MAC'</p>
  </div>
  <div class="page">
    <p>Authentication Protocol</p>
    <p>Card Identity Card Challenge</p>
    <p>Reader Random Reader 'MAC'</p>
    <p>Card 'MAC'</p>
    <p>Used to derive card specific key</p>
  </div>
  <div class="page">
    <p>Eavesdropping</p>
    <p>Proxmark 3 Supports several HF/LF protocols (ISO 14443a/b) Added eavesdropping for iClass communication</p>
  </div>
  <div class="page">
    <p>Implementation side effect: ISO Tunneling</p>
    <p>ISO 14443</p>
    <p>ISO 15693</p>
  </div>
  <div class="page">
    <p>Implementation side effect: ISO Tunneling</p>
    <p>ISO 14443</p>
    <p>ISO 15693</p>
    <p>Emulate iClass using existing software from libnfc</p>
  </div>
  <div class="page">
    <p>Card Key Update</p>
  </div>
  <div class="page">
    <p>Card Key Update</p>
    <p>fcb4323e6a865626 7698db5d01780a8f  8a2ce9636bfe5ca9</p>
    <p>XOR Difference of Card Keys is send over the air</p>
  </div>
  <div class="page">
    <p>Determine Input of hash0</p>
    <p>DESenc(id,MK) ?</p>
    <p>DESdec(c,k) = p DESdec(c,k') = p'</p>
    <p>Pick any 64-bit string c and compute with two different keys (k and k'):</p>
    <p>hash0</p>
  </div>
  <div class="page">
    <p>Determine Input of hash0</p>
    <p>DESenc(p,k)</p>
    <p>DESenc(p,k)</p>
    <p>c Same XOR difference!hash0</p>
  </div>
  <div class="page">
    <p>Determine Input of hash0</p>
    <p>DESenc(p,k)</p>
    <p>DESenc(p,k)</p>
    <p>c</p>
    <p>Card key = hash0(DESenc(id,kc))</p>
    <p>Same XOR difference!</p>
    <p>hash0</p>
  </div>
  <div class="page">
    <p>Recovering hash0</p>
    <p>XOR Difference</p>
    <p>Learn Input/Output Relations  Step-by-step Recovery of Partial Input/Outputs</p>
    <p>Reconstruct hash0</p>
  </div>
  <div class="page">
    <p>Input/Output Relations</p>
    <p>h0(0000000000000001) = 0606000000000000 h0(0000000000000002) = 0400040000000000 h0(0000000100000000) = 0000000000080000 h0(0000000200000000) = 0000000000100000 h0(8000000000000000) = 0306050c07060d00 h0(4000000000000000) = 0306050c04050d00</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>or-mask and-mask</p>
  </div>
  <div class="page">
    <p>or-mask and-mask</p>
    <p>N E</p>
    <p>G A</p>
    <p>T IO</p>
    <p>N P</p>
    <p>E R</p>
    <p>M U</p>
    <p>T A</p>
    <p>T IO</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Structure of hash0</p>
    <p>permute negate</p>
  </div>
  <div class="page">
    <p>Structure of hash0</p>
    <p>mod 70 61 62 63 6360 626164</p>
    <p>permute negate</p>
  </div>
  <div class="page">
    <p>hash0</p>
    <p>We fully recovered hash0</p>
    <p>It is clearly not  Collision resistant  One-way</p>
    <p>We were able to invert hash0  On average we have 4 candidate pre-images</p>
    <p>Recovering the master key comes down to a brute force on single DES (Few days on RIVYERA)</p>
  </div>
  <div class="page">
    <p>Key Recovery Attack (Phase 1)</p>
    <p>emulated id Key Update: kmaster knew</p>
    <p>The attacker knows knew</p>
    <p>and therefore learns hash0(DESenc(id,kmaster))</p>
  </div>
  <div class="page">
    <p>Key Recovery Attack (Phase 2)</p>
    <p>For every DES key k check if DESenc(id,k) equals one of the pre-images from phase 1.</p>
    <p>When the check above succeeds the corresponding key k needs to be verified against another emulated id.</p>
    <p>A single DES key can be broken within days. We checked the recovered candidates against the master key that we obtained from the reader firmware.</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Verification of Results</p>
    <p>We recovered the master key from firmware as done by Meriac and Plotz in [HID iClass Demystified, 27th CCC, Dec 2010]</p>
    <p>This verified that we found the correct key</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Single DES for diversification (broken since 1997)</p>
    <p>The hash0 function is not:  pre-image resistant</p>
    <p>collision resistant</p>
    <p>hash0 can be inverted (on average 4 pre-images)</p>
    <p>...recover the master key from key update message!</p>
    <p>One master key for every iClass system</p>
    <p>iClass Authentication Algorithm</p>
    <p>Next step...</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
