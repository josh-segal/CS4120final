<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TRESOR Runs Encryption Securely Outside RAM</p>
    <p>Tilo Mller Felix C. Freiling Andreas Dewald Department of Computer Science</p>
    <p>University of Erlangen</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 2</p>
    <p>Who we are</p>
    <p>Nuremberg Franconia, Germany</p>
    <p>Chair for IT-Security Infrastructures University of Erlangen-Nuremberg www1.cs.fau.de</p>
  </div>
  <div class="page">
    <p>PART I</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 4</p>
    <p>Cold Boot Attacks Firewire Attacks Other DMA Attacks</p>
    <p>- PCI - PC-Card - Thunderbolt?</p>
    <p>RAM is insecure  Disk encryption which stores the key in RAM is insecure Affected: BitLocker, FileVault, dm-crypt, TrueCrypt and more</p>
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 5</p>
    <p>TRESOR Runs Encryption Securely Outside RAM:</p>
    <p>- AES implementation solely on the microprocessor - Secret keys and states never enter RAM - Instead, only processor registers are used as storage</p>
    <p>TRESOR's Security Policy</p>
  </div>
  <div class="page">
    <p>PART II</p>
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 7</p>
    <p>fulfilled by the set of debug registers</p>
    <p>Key management: key storage</p>
    <p>The key registers must be:</p>
    <p>- big enough to store AES-128/192/256 keys (size) - a privileged ring-0 resource (security) - seldom used by applications and compensable in</p>
    <p>software (compatibility)</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 8</p>
    <p>supports AES-128/192/256 on 64-bit machines supports AES-128 on 32-bit machines</p>
    <p>Key management: debug regs</p>
    <p>TRESOR (mis)uses debug registers as persistent key storage</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 9</p>
    <p>Key management: key derivation</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 10</p>
    <p>AES Algorithm: guideline</p>
    <p>Security Policy: No valuable information about the AES key or state should be visible in RAM at any time</p>
    <p>Challenge: Implement AES without using RAM at all</p>
    <p>no runtime variables in data segment (stack, heap, )  use SSE registers and GPRs to store intermediate states  written in assembly language (x86)</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 11</p>
    <p>- short and efficient AES code  does perfectly meet our needs</p>
    <p>/* Encrypt */ .macro encrypt_block rounds</p>
    <p>movdqu 0(%rsi),rstate read_key rk0 rk1 \rounds pxor rk0,rstate generate_rks_\rounds aesenc rk1,rstate aesenc rk2,rstate aesenc rk3,rstate aesenc rk4,rstate aesenc rk5,rstate aesenc rk6,rstate aesenc rk7,rstate aesenc rk8,rstate aesenc rk9,rstate .if (\rounds &gt; 10) aesenc rk10,rstate aesenc rk11,rstate .endif .if (\rounds &gt; 12) aesenc rk12,rstate aesenc rk13,rstate .endif aesenclast rk\rounds,rstate epilog</p>
    <p>.endm</p>
    <p>AES Algorithm: assembly implementation</p>
    <p>/* Decrypt */ .macro decrypt_block rounds</p>
    <p>movdqu 0(%rsi),rstate read_key rk0 rk1 \rounds generate_rks_\rounds pxor rk\rounds,rstate .if (\rounds &gt; 12) read_key rk0,rk1,10 aesdec_ rk13,rstate aesdec_ rk12,rstate .endif .if (\rounds &gt; 10) aesdec_ rk11,rstate aesdec_ rk10,rstate .endif aesdec_ rk9,rstate aesdec_ rk8,rstate aesdec_ rk7,rstate aesdec_ rk6,rstate aesdec_ rk5,rstate aesdec_ rk4,rstate aesdec_ rk3,rstate aesdec_ rk2,rstate aesdec_ rk1,rstate aesdeclast rk0,rstate epilog</p>
    <p>.endm</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 12</p>
    <p>/* generate next round key */ .macro key_schedule r0 r1 r2 rcon pxor rhelp,rhelp movdqu \r0,\r2 shufps $0x1f,\r2,rhelp pxor rhelp,\r2 shufps $0x8c,\r2,rhelp pxor rhelp,\r2 aeskeygenassist $\rcon,\r1,rhelp .if (\rcon == 0) shufps $0xaa,rhelp,rhelp .else shufps $0xff,rhelp,rhelp .endif pxor rhelp,\r2 .endm</p>
    <p>Conventional AES: round keys are calculated once and then stored in RAM (for performance reasons)</p>
    <p>TRESOR: on-the-fly round key generation (since the entire key schedule is too big to be stored inside CPU)</p>
    <p>AES Algorithm: key schedule</p>
    <p>/* generate round keys rk1 to rk10 */ .macro generate_rks_10 key_schedule rk0 rk0 rk1 0x1 key_schedule rk1 rk1 rk2 0x2 key_schedule rk2 rk2 rk3 0x4 key_schedule rk3 rk3 rk4 0x8 key_schedule rk4 rk4 rk5 0x10 key_schedule rk5 rk5 rk6 0x20 key_schedule rk6 rk6 rk7 0x40 key_schedule rk7 rk7 rk8 0x80 key_schedule rk8 rk8 rk9 0x1b key_schedule rk9 rk9 rk10 0x36 .endm</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 13</p>
    <p>We have to patch the operating system kernel for two reasons:</p>
    <p>Hence, TRESOR is implemented in kernel space (currently Linux 2.6.36)</p>
    <p>Kernel Patch</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 14</p>
    <p>Risks: 1. Malicious user access to debug registers  compromised key 2. Writing to debug registers accidentally (e.g., starting gdb)  polluting key storage  data corruption</p>
    <p>Kernel Patch: key protection</p>
    <p>Solution: deny access to debug registers from userland</p>
    <p>int ptrace_set_debugreg (tsk_struct *t,int n,long v) { thread_struct *thread = &amp;(t-&gt;thread); int rc = 0; if (n == 4 || n == 5) return -EIO; + #ifdef CONFIG_CRYPTO_TRESOR + else if (n == 6 || n == 7) + return -EPERM; + else + return -EBUSY; + #endif if (n == 6) { thread-&gt;debugreg6 = v; goto ret_path; } if (n &lt; HBP_NUM) { rc=ptrace_set_breakpoint_addr(t,n,v); if (rc) return rc; } [...] ret_path: return rc; }</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 15</p>
    <p>OS regularly performs CPU context switches  when TRESOR is active this context comprises sensitive data (general purpose and SSE registers)</p>
    <p>run TRESOR atomically (per 128-bit input block)</p>
    <p>Kernel Patch: atomicity</p>
    <p>/* Encrypt one TRESOR block */ void tresor_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src) {</p>
    <p>struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm); unsigned long irq_flags;</p>
    <p>// enter atomicity preempt_disable(); local_irq_save(*irq_flags);</p>
    <p>// encrypt block switch(ctx-&gt;key_length) {</p>
    <p>case AES_KEYSIZE_128: tresor_encblk_128(dst,src); break; case AES_KEYSIZE_192: tresor_encblk_192(dst,src); break; case AES_KEYSIZE_256: tresor_encblk_256(dst,src); break;</p>
    <p>}</p>
    <p>// leave atomicity local_irq_restore(*irq_flags); preempt_enable();</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>PART III</p>
    <p>Security Evaluation</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 17</p>
    <p>Security Analysis: memory attacks TRESOR: nothing but the output block is written actively to RAM</p>
    <p>But: sensitive data may be copied into RAM passively by OS side effects (e.g., interrupt handling, scheduling, swapping, ACPI suspend, etc.)</p>
    <p>observe RAM of a TRESOR system at runtime</p>
    <p>Test-Setup: - KVM/Qemu - guest1: unpatched Linux, no encryption - guest2: unpatched Linux, generic AES encryption - guest3: patched Linux, TRESOR encryption - examine guests main memories from the host</p>
    <p>physical memory TRESOR</p>
    <p>Generic AES</p>
    <p>no enc</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 18</p>
    <p>Security Analysis: memory attacks</p>
    <p>Test 1: Browse guest's main memory with AESKeyFind.</p>
    <p>Result: - guest 1 (no enc): no key recovered - guest 2 (generic AES): key recovered - guest 3 (TRESOR): no key recovered</p>
    <p>But: AESKeyFind is heavily based on the AES key schedule. Since TRESOR does not store a key schedule, this may be the only reason why the key cannot be recovered.</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 19</p>
    <p>Security Analysis: memory attacks</p>
    <p>Test 2: Unlike real attackers we are aware of the secret key.  we don't need the key schedule but can search for the key bit pattern directly.</p>
    <p>Result: - guest 1 (no enc): -/- guest 2 (generic AES): match found - guest 3 (TRESOR): no match found</p>
    <p>But: The key could be stored discontiniously, in another endianess, etc.</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 20</p>
    <p>Security Analysis: memory attacks</p>
    <p>Test 3: Search for the longest match of the key pattern, its reverse and any part of those, in little and in big endian.</p>
    <p>Result: - guest 1 (no enc): -/- guest 2 (generic AES): 32-byte longest match - guest 3 (TRESOR): 3-byte longest match</p>
    <p>But: The key could enter RAM only seldom, in special situations.</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 21</p>
    <p>Security Analysis: memory attacks</p>
    <p>Test 4: Search for the longest match of the key pattern during ACPI suspend and during swapping.</p>
    <p>Result (suspend-to-RAM): - guest 2 (generic AES): 32-byte longest match - guest 3 (TRESOR): 3-byte longest match</p>
    <p>Result (swapping): - guest 2 (generic AES): 3-byte longest match on disk - guest 3 (TRESOR): 3-byte longest match on disk</p>
    <p>But: These are only the most important special states of the Linux kernel. Unfortunately, it is practically impossible to put the Linux kernel into all it's different states and analyze it's memory at the right moment.</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 22</p>
    <p>Security Analysis: memory attacks</p>
    <p>Test Summary:</p>
    <p>AES variant: Generic AES</p>
    <p>TRESOR None</p>
    <p>Kernel state: normal normal swapping suspend normal</p>
    <p>AESKeyFind yes no no no no</p>
    <p>Exact key match yes no no no -/</p>
    <p>Longest match 32 bytes 3 bytes 3 bytes 3 bytes -/</p>
    <p>we never found sensitive information in RAM or on disk</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 23</p>
    <p>Security Analysis: processor attacks</p>
    <p>- Virtual Machines (tested on Qemu, Boch, Vmware and VirtualBox) vulnerable</p>
    <p>- Real Hardware (tested on seven different CPUs and BIOS versions) not vulnerable</p>
    <p>Cold Boot Register Attack</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 24</p>
    <p>Security Analysis: processor attacks</p>
    <p>Compromise system space</p>
    <p>Always possible with superuser rights if - LKMs are supported - or /dev/kmem can be written</p>
  </div>
  <div class="page">
    <p>PART IV</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 26</p>
    <p>Currently TRESOR supports</p>
    <p>- AES-128 on 32-bit machines</p>
    <p>- AES-128/192/256 for 64-bit/AES-NI machines</p>
    <p>- multi core/processor environments</p>
    <p>- hibernation / suspend-to-RAM</p>
    <p>- kernel level encryption: dm-crypt</p>
    <p>- Linux kernel 2.6.36</p>
    <p>Current Features</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 27</p>
    <p>Future Work Upcoming releases of TRESOR will support</p>
    <p>- multiple keys and session keys (holding a master-key-encrypted keyring in RAM)</p>
    <p>- userland encryption (via syscalls or, better, via sysfs)</p>
    <p>- optionally MSRs instead of debug registers (to restore ability of hw breakpoints on a chosen set of CPUs)</p>
    <p>- sealing the symmetric key by TPM (like BitLocker)</p>
    <p>- runtime management (enable/disable TRESOR, set new key at runtime, etc.; a bit more insecure but required by server systems with remote-access only)</p>
    <p>- Linux kernel 3.0 (and more long-term stable releases from there on)</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 28</p>
    <p>btw: TRESOR is not just another recursive backronym, it's German for safe / vault ;)</p>
    <p>TRESOR's name</p>
  </div>
  <div class="page">
    <p>August 11, 2011  20th USENIX SECURITY  TRESOR  Tilo Mller 29</p>
    <p>Thank you for your attention.</p>
    <p>Questions?</p>
    <p>E.g., Do you publish the source code? Of course, it's available under GPLv2 here:</p>
    <p>www1.cs.fau.de/tresor</p>
    <p>Thank you!</p>
  </div>
</Presentation>
