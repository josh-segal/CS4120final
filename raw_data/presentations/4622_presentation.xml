<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 1</p>
    <p>A Scalable, Non-blocking Approach to</p>
    <p>Transactional Memory</p>
    <p>Hassan Chafi</p>
    <p>Austen McDonald</p>
    <p>Jared Casper Chi Cao Minh</p>
    <p>Brian D. Carlstrom</p>
    <p>Woongki Baek</p>
    <p>Christos Kozyrakis Kunle Olukotun</p>
    <p>Computer System Laboratory</p>
    <p>Stanford University</p>
    <p>http://tcc.stanford.edu</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 2</p>
    <p>Transactional Memory</p>
    <p>Problem: Parallel Programming is hard and expensive.</p>
    <p>Correctness vs. performance</p>
    <p>Solution: Transactional Memory</p>
    <p>Programmer-defined isolated, atomic regions</p>
    <p>Easy to program, comparable performance to fine-grained locking</p>
    <p>Done in software (STM), hardware (HTM), or both (Hybrid)</p>
    <p>Conflict Detection</p>
    <p>Optimistic: Detect conflicts at transaction boundaries</p>
    <p>Pessimistic: Detect conflicts during execution</p>
    <p>Version management</p>
    <p>Lazy: Speculative writes kept in cache until end of transaction</p>
    <p>Eager: Speculatively write in place, roll back on abort</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 3</p>
    <p>So whats the problem? (Havent we figured this out already?)</p>
    <p>Cores are the new GHz</p>
    <p>Trend is 2x cores / 2 years: 2 in 05, 4 in 07, &gt; 16 not far away</p>
    <p>Sun: N2 has 8 cores with 8 threads = 64 threads</p>
    <p>It takes a lot to adopt a new programming model</p>
    <p>Must last tens of years without much tweaking</p>
    <p>Transactional Memory must (eventually) scale to 100s of processors</p>
    <p>TM studies so far use a small number of cores!</p>
    <p>Assume broadcast snooping protocol</p>
    <p>If it does not scale, it does not matter</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 4</p>
    <p>Lazy optimistic vs. Eager pessimistic</p>
    <p>High contention</p>
    <p>Eager pessimistic</p>
    <p>Serializes due to blocking</p>
    <p>Slower aborts (result of undo log)</p>
    <p>Low contention</p>
    <p>Eager pessimistic</p>
    <p>Fast commits</p>
    <p>Lazy optimistic</p>
    <p>Optimistic parallelism</p>
    <p>Fast aborts</p>
    <p>Lazy optimistic</p>
    <p>Slower commits good</p>
    <p>enough??</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 5</p>
    <p>Serial commit  Parallel commit</p>
    <p>At 256 proc, if 5% of the work is serial, maximum speedup is 18.6x</p>
    <p>Two-phase commit using directories</p>
    <p>Write-through  write-back</p>
    <p>Bandwidth requirements must scale nicely</p>
    <p>Again, using directories</p>
    <p>Rest of talk:</p>
    <p>Augmenting TCC with directories</p>
    <p>Does it work?</p>
    <p>What are we going to do about it?</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 6</p>
    <p>Protocol Overview</p>
    <p>During the transaction</p>
    <p>Track read and write sets in the cache</p>
    <p>Track sharers of a line in the directory</p>
    <p>Two-phase commit</p>
    <p>Validation: Mark all lines in write-set in directories</p>
    <p>Locks line from being written by another transaction</p>
    <p>Commit: Invalidate all sharers of marked lines</p>
    <p>Dirty lines become owned in directory</p>
    <p>Require global ordering of transactions</p>
    <p>Use a Global Transaction ID (TID) Vendor</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 7</p>
    <p>Directory Structure</p>
    <p>..</p>
    <p>OwnedMarked PNP1P0</p>
    <p>Address Sharers List</p>
    <p>Directory</p>
    <p>Now Serving TID (NSTID)</p>
    <p>Skip Vector</p>
    <p>Directory tracks sharers of each line at home node</p>
    <p>Marked bit is used in the protocol</p>
    <p>Now serving TID: transaction currently being serviced by directory  Used to ensure a global ordering of transactions</p>
    <p>Skip vector used to help manage NSTID (see paper)</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 8</p>
    <p>Cache Structure</p>
    <p>DataTagSMSRValidDirty</p>
    <p>Cache</p>
    <p>Sharing Vector</p>
    <p>Writing Vector</p>
    <p>Each cache line tracks if it was speculatively read (SR) or modified (SM)  Meaning that line was read or written in the current transaction</p>
    <p>Sharing and Writing vectors remember directories read from or written to  Simple bit vector</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 9</p>
    <p>Commit procedure</p>
    <p>Validation</p>
    <p>Request TID</p>
    <p>Inform all directories not in writing vector we will not be writing to them (Skip)</p>
    <p>Request NSTID of all directories in writing vector</p>
    <p>Wait until all NSTIDs  our TID</p>
    <p>Mark all lines that we have modified</p>
    <p>Can happen in parallel to getting NSTIDs</p>
    <p>Request NSTID of all directories in sharing vector</p>
    <p>Wait until all NSTIDs  our TID</p>
    <p>Commit</p>
    <p>Inform all directories in writing vector of commit</p>
    <p>Directory invalidates all other copies of written line, and marks line owned</p>
    <p>Invalidation may violate other transaction</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 10</p>
    <p>Parallel Commit Example</p>
    <p>NSTID: 1 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 1 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:?</p>
    <p>P2</p>
    <p>Tid:?</p>
    <p>P1</p>
    <p>Load X</p>
    <p>Data X</p>
    <p>Data Y</p>
    <p>Load Y</p>
    <p>LD Y ST Y</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 11</p>
    <p>P2P1</p>
    <p>Parallel Commit Example</p>
    <p>NSTID: 1 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 1 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>LD Y ST Y</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
    <p>TID Req.</p>
    <p>TID =1</p>
    <p>TID Req.</p>
    <p>TID = 2</p>
    <p>Tid:2Tid:1Tid:? Tid:?</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 12</p>
    <p>NSTID:1</p>
    <p>Parallel Commit Example</p>
    <p>Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:2</p>
    <p>P2</p>
    <p>Tid:1</p>
    <p>P1</p>
    <p>NSTID Probe</p>
    <p>NSTID Probe</p>
    <p>LD Y ST Y</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
    <p>NSTID:2NSTID:1 Skip 1</p>
    <p>Skip2</p>
    <p>NSTID:1 NSTID: 2</p>
    <p>NSTID:3</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 13</p>
    <p>Parallel Commit Example</p>
    <p>NSTID: 2 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 1 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:2</p>
    <p>P2</p>
    <p>Tid:1</p>
    <p>P1</p>
    <p>Mark X</p>
    <p>Mark Y</p>
    <p>LD Y ST Y</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 14</p>
    <p>Parallel Commit Example</p>
    <p>NSTID: 2 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 1 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:2</p>
    <p>P2</p>
    <p>Tid:1</p>
    <p>P1</p>
    <p>Commit</p>
    <p>Commit</p>
    <p>LD Y ST Y</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 15</p>
    <p>Conflict Resolution Example</p>
    <p>NSTID: 1 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 1 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:?</p>
    <p>P2</p>
    <p>Tid:?</p>
    <p>P1</p>
    <p>Load X</p>
    <p>Data X</p>
    <p>Data Y</p>
    <p>Load Y</p>
    <p>LD Y LD X ST X</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 16</p>
    <p>Conflict Resolution Example</p>
    <p>NSTID: 1 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 1 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:?</p>
    <p>P2</p>
    <p>Tid:? Data X</p>
    <p>Load X</p>
    <p>TID Req.</p>
    <p>TID =1</p>
    <p>P1</p>
    <p>LD Y LD X ST X</p>
    <p>Commit</p>
    <p>LD X ST X</p>
    <p>Commit</p>
    <p>Tid:1</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 17</p>
    <p>Conflict Resolution Example</p>
    <p>NSTID: 1 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:xTid:1</p>
    <p>P1</p>
    <p>NSTID ProbeNSTID Probe</p>
    <p>TID Req.</p>
    <p>TID = 2</p>
    <p>Skip 1</p>
    <p>P2</p>
    <p>Tid:2</p>
    <p>NSTID: 1NSTID: 2</p>
    <p>LD X ST X</p>
    <p>Commit</p>
    <p>LD Y LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 18</p>
    <p>Conflict Resolution Example</p>
    <p>NSTID: 1 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:2</p>
    <p>P2</p>
    <p>Tid:1</p>
    <p>P1</p>
    <p>NSTID: 1</p>
    <p>Mark: X</p>
    <p>NSTID Probe</p>
    <p>NSTID: 3</p>
    <p>Skip 2</p>
    <p>NSTID: 1</p>
    <p>NSTID: 2NSTID: 3</p>
    <p>LD X ST X</p>
    <p>Commit</p>
    <p>LD Y LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 19</p>
    <p>Conflict Resolution Example</p>
    <p>Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 3 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:2</p>
    <p>P2</p>
    <p>Tid:1</p>
    <p>P1</p>
    <p>Commit Invalidate X</p>
    <p>Violation!</p>
    <p>LD X ST X</p>
    <p>Commit</p>
    <p>LD Y LD X ST X</p>
    <p>Commit</p>
    <p>NSTID: 1NSTID: 2</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 20</p>
    <p>Conflict Resolution Example (Write-back)</p>
    <p>NSTID: 2 Directory 0</p>
    <p>P1 P2 M O</p>
    <p>X</p>
    <p>NSTID: 3 Directory 1</p>
    <p>P1 P2 M O</p>
    <p>Y</p>
    <p>TID</p>
    <p>Vendor</p>
    <p>Tid:2</p>
    <p>P2</p>
    <p>Tid:1</p>
    <p>P1</p>
    <p>Request: X</p>
    <p>WB: X Data X</p>
    <p>Load X</p>
    <p>LD X ST X</p>
    <p>Commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 21</p>
    <p>Evaluation environment</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 22</p>
    <p>It Scales!</p>
    <p>N o rm</p>
    <p>a li z e d E x e c u ti o n T im</p>
    <p>e ( % )</p>
    <p>Useful Cache Miss Idle Commit Violations</p>
    <p>barnes radix SVM Classify equake</p>
    <p>Commit time (red) is small and decreasing, or non-existent</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 23</p>
    <p>Results for small transactions</p>
    <p>volrend water</p>
    <p>nsquared</p>
    <p>N o rm</p>
    <p>a li z e d E x e c u ti o n T im</p>
    <p>e ( % )</p>
    <p>UsefulCache MissIdle CommitViolations  Small transactions with a</p>
    <p>lot of communication</p>
    <p>magnifies commit latency</p>
    <p>Commit overhead does not</p>
    <p>grow with processor</p>
    <p>count, even in the worst</p>
    <p>case</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 24</p>
    <p>Latency Tolerance</p>
    <p>Cycles-per-hop</p>
    <p>Useful Cache Miss Idle Commit Violations</p>
    <p>swim radix water-spatial</p>
    <p>32 Processor system</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 25</p>
    <p>Remote traffic bandwidth</p>
    <p>Comparable to published SPLASH-2</p>
    <p>Total bandwidth needed (at 2 GHz) between 2.5 MBps and 160 MBps</p>
    <p>barnes Cluster GA</p>
    <p>equake radix swim volrend water</p>
    <p>B y te s p e r in s tr u c ti o n</p>
    <p>Shared Write-back Miss Overhead</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 26</p>
    <p>Take home</p>
    <p>Transactional Memory systems must scale for TM to be useful</p>
    <p>Lazy optimistic TM systems have inherent benefits</p>
    <p>Non-blocking</p>
    <p>Fast abort</p>
    <p>Lazy optimistic TM system scale</p>
    <p>Fast parallel commit</p>
    <p>Bandwidth efficiency through write-back commit</p>
  </div>
  <div class="page">
    <p>A Scalable, Non-blocking Approach to Transactional Memory HPCA 2007 27</p>
    <p>Questions?</p>
    <p>Whew!</p>
    <p>Jared Casper jaredc@stanford.edu</p>
    <p>Computer Systems Lab</p>
    <p>Stanford University</p>
    <p>http://tcc.stanford.edu</p>
  </div>
</Presentation>
