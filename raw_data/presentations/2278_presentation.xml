<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Sangjin Yoo and Dongkun Shin Sungkyunkwan University, Korea</p>
    <p>newlandlord@skku.edu, dongkun@skku.edu</p>
    <p>Reinforcement Learning-Based SLC Cache Technique for Enhancing SSD Write Performance</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>A mainstream storage medium of solid-state drives (SSDs)</p>
    <p>Higher density and lower cost</p>
    <p>Slower performance and lower endurance  especially, significantly worse write performance</p>
    <p>Qual-level-cell (QLC) flash memory</p>
    <p>[Comparison of SLC, TLC and QLC flash memory][1]</p>
    <p>[1] Analysis on Heterogeneous SSD Configuration with Quadruple-Level Cell NAND Flash Memory, 2019</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>A partitioned SLC region  a cache space of the remaining QLC region</p>
    <p>hide the slow performance of QLC flash memory</p>
    <p>Hybrid SSD Architecture</p>
    <p>Typical SSD Architecture</p>
    <p>QLC blockSLC block</p>
    <p>Hybrid SSD Architecture</p>
    <p>SLC region QLC region</p>
    <p>QLC region</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>migration overhead</p>
    <p>Important factors in the hybrid SSD</p>
    <p>*Capacity (SLC block) = Capacity (QLC block) / 4</p>
    <p>SLC block</p>
    <p>QLC block</p>
    <p>SLC region QLC region</p>
    <p>Data migration</p>
    <p>SLC-to-QLC migrationCapacity loss</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>- small data tend to be frequently updated[2]</p>
    <p>write request size can be used to distinguish between hot data and cold data</p>
    <p>Important factors in the hybrid SSD</p>
    <p>Hot/Cold separator</p>
    <p>Data length &gt; Data length</p>
    <p>[2] LAST: locally-aware sector translation for NAND flash memory-based storage system, 2008</p>
    <p>SLC region QLC region</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Two types of hybrid SSDs  Static scheme</p>
    <p>fixed SLC cache size and fixed hot/cold separation threshold</p>
    <p>Dynamic scheme  adjust the SLC region parameters depending on the system states</p>
    <p>(e.g., amount of stored data, I/O access pattern, etc.)</p>
    <p>Recent QLC SSDs adopt the dynamic scheme-based hybrid SSD architecture  The proper SLC cache sizes at different space utilizations are</p>
    <p>investigated at offline with representative workloads</p>
    <p>Not exact under unexamined or variable workloads</p>
    <p>SLC cache management schemes</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Optimal policy is different depending on space utilization and workload</p>
    <p>Problem of the current dynamic hybrid SSDs</p>
    <p>[A table of the SLC cache size]</p>
    <p>Need a more intelligent algorithm  to adjust the SLC cache parameters considering the changing system states</p>
    <p>Hot/cold separation threshold : setting1(64KB), setting2(16KB)</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Q-learning  to learn the optimal SLC cache parameters according to the</p>
    <p>system states</p>
    <p>calculates Q-values that tell which action is right in a given state</p>
    <p>size of (Q-table) = # of states x # of actions</p>
    <p>-greedy algorithm</p>
    <p>Set  to 0.07 in our experiments</p>
    <p>Reinforcement Learning for dynamic SLC cache</p>
    <p>, =  , + ( +  max</p>
    <p>,  (,))</p>
    <p>-   ,  ,   ,   ,     ,   , ( )</p>
    <p>=   =  , ,1</p>
    <p>,</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Environment  Defines the state  based on the workload characteristics and the</p>
    <p>internal status of the SSD, and estimates the reward   SLC cache manager</p>
    <p>Select an action  including changes of the SLC cache size and hot/cold separation threshold</p>
    <p>[SLC cache management with RL]</p>
    <p>Reinforcement Learning for dynamic SLC cache</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Observe to know the change of environment  includes both the host and the SSD subsystem</p>
    <p>Q-table size = 5,184 bytes (=1,296 state x 4 bytes)</p>
    <p>State</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Reward</p>
    <p>Need to consider all write costs to calculate the reward of the previous action</p>
    <p>SLC/QLC write latency of SLC/QLC mode</p>
    <p>Delayed time by migration and QLC garbage collection</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>QLC-based Hybrid SSD Simulator  32GB density (1channel, 1bank)</p>
    <p>Total 2,138 blocks + over-provision 3%</p>
    <p>256 pages/SLC block, 1024 page/QLC block</p>
    <p>Page size : 16KB</p>
    <p>DRAM memory : 144KB</p>
    <p>FTL  4KB Page-level L2P mapping</p>
    <p>Fully cached address mapping table</p>
    <p>GC or migration trigger condition  # of free block of each region  5</p>
    <p>Experiments</p>
    <p>Trace Set</p>
    <p>Command Decoder</p>
    <p>Write latency log</p>
    <p>Host</p>
    <p>SSD (FTL)</p>
    <p>L2P Map IO Scheduler</p>
    <p>SLC cache manager</p>
    <p>Block manager</p>
    <p>QLC flash memory</p>
    <p>Command Decoder</p>
    <p>QLC blocks</p>
    <p>Operation time calculator</p>
    <p>DRAM Memory</p>
    <p>Flash memory Interface</p>
    <p>SLC blocks Changeable</p>
    <p>[Our trace-driven simulator]</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Compared with two previous dynamic SLC techniques  Utilization-aware self tuning (UST)[3]</p>
    <p>Dynamic write accelerator (DWA)[4]</p>
    <p>Baseline: use only QLC blocks without SLC cache</p>
    <p>Workload characteristics</p>
    <p>Experiments</p>
    <p>[3] Utilization-aware self-tuning design for TLC flash storage devices, 2016 [4] Optimized client computing with dynamic write acceleration, 2014</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>RL outperforms all other techniques under most workloads</p>
    <p>PC trace includes a larger number of hot data</p>
    <p>In YCSB-A trace, most of the write requests are large and most of data are cold</p>
    <p>Write Throughput</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>The RL-based method adjusts more dynamically the SLC cache parameters  (PC trace) allocates a smaller number of SLC blocks than UST, but</p>
    <p>maintains a large value of</p>
    <p>Change of SLC cache parameters</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>65.2% reduction at migration and garbage collection cost vs. UST</p>
    <p>Large QLC write overhead in DWA  removed in the RL scheme</p>
    <p>I/O Latency Breakdown</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Pre-trained agent improves the write performance by up to 12.8% over untrained agent</p>
    <p>can be applied quickly to a new system with a pre-trained agent</p>
    <p>Effect of Agent Pre-training</p>
  </div>
  <div class="page">
    <p>Hotstorage20</p>
    <p>Proposed an RL-based SLC cache technique  dynamically determines the optimal SLC cache parameters</p>
    <p>based on the system states</p>
    <p>enhance write throughput and write amplification factor by 77.6% and 20.3% on average, respectively</p>
    <p>without any prior knowledge about host workload or storage characteristics</p>
    <p>Future work  examine the effect of the proposed scheme at a real SSD</p>
    <p>apply the technique at multi-stream SSDs</p>
    <p>Conclusion</p>
  </div>
</Presentation>
