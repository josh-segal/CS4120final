<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>He Xiao and Zhenhua Li, Tsinghua University; Ennan Zhai, Yale University; Tianyin Xu, UIUC; Yang Li and Yunhao Liu, Tsinghua University;</p>
    <p>Quanlu Zhang, Microsoft Research Asia; Yao Liu, SUNY Binghamton</p>
    <p>Towards Web-based Delta Synchronization for Cloud Storage Services</p>
    <p>xiaoh16@gmail.com Fast18 Feb 14, 2018</p>
  </div>
  <div class="page">
    <p>Network Traffic is Overwhelming in Cloud Storage</p>
    <p>File Synchronization(Sync)</p>
    <p>Cloud Traffic has 30% CAGR (Compound Average Growth Rate)</p>
    <p>Cloud SeverClient</p>
    <p>Network Traffic</p>
  </div>
  <div class="page">
    <p>Delta Sync Improves Network Efficiency</p>
    <p>Delta Sync is crucial for reducing cloud storage network traffic.</p>
    <p>Delta Sync</p>
    <p>Delta Data</p>
    <p>New File Old File</p>
    <p>Delta sync support in nine state-of-the-art cloud storage services 10 MB</p>
    <p>Full Sync New File Old File</p>
    <p>Full File</p>
  </div>
  <div class="page">
    <p>No Web-based Delta Sync</p>
    <p>Why web-based delta sync is not supported by todays commercial cloud storage services ?</p>
    <p>Web is the most pervasive and OS-independent cloud storage access method</p>
    <p>Web-based delta sync is essential for cloud storage web clients and web apps</p>
  </div>
  <div class="page">
    <p>WebRsync: First Workable Web Delta Sync</p>
    <p>Implement rsync on web framework with pure web tech: JavaScript + HTML5 + WebSocket</p>
    <p>Points out the Challenges of supporting delta sync on web.</p>
    <p>JavaScript Implementation of Rsync</p>
    <p>Web Server</p>
    <p>Local File System</p>
    <p>JavaScript HTML5 FileAPI</p>
    <p>WebSocket</p>
    <p>Storage Backend Aliyun OSS / OpenStack Swift</p>
    <p>High-Speed Internal Network</p>
    <p>Web Browser</p>
    <p>C Implementation of Rsync</p>
  </div>
  <div class="page">
    <p>WebRsync benchmarking: poor client performance</p>
    <p>Sync time of WebRsync vs Linux rsync</p>
    <p>~40%</p>
    <p>Rsync</p>
    <p>WebRsync 1425 times slower</p>
  </div>
  <div class="page">
    <p>StagMeter Tool</p>
    <p>Timing tasks: Printing timestamps every 100ms:</p>
    <p>x x x x x x x x x x x x x x x x x x x x x</p>
    <p>x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x</p>
    <p>Stagnation Interval</p>
    <p>Stagnation: single-thread is occupied by some backend tasks</p>
    <p>Users operation cannot get response timely.</p>
  </div>
  <div class="page">
    <p>High CPU Utilization when computing</p>
    <p>Timestamp Printing is suspended Web is under stagnation state</p>
    <p>Measuring Stagnation with StagMeter</p>
    <p>Sync Process (Second)</p>
  </div>
  <div class="page">
    <p>Client Cloud</p>
    <p>Why poor client : slow searching and comparing</p>
    <p>Bottleneck</p>
  </div>
  <div class="page">
    <p>WebR2sync: Reverse Computation Process</p>
    <p>Segmentation &amp; fingerprinting</p>
    <p>Searching &amp; Comparing</p>
    <p>Changed Bits</p>
    <p>Construct New Files</p>
    <p>Chec ksum</p>
    <p>list</p>
    <p>Matched Tokens</p>
    <p>Meta data</p>
    <p>Client ServerNew file Old file</p>
  </div>
  <div class="page">
    <p>WebR2sync: Reverse Computation Process</p>
    <p>Segmentation &amp; fingerprinting</p>
    <p>Searching &amp; Comparing</p>
    <p>Changed Bits</p>
    <p>Construct New Files</p>
    <p>Matched Tokens</p>
    <p>Meta data</p>
    <p>Client ServerNew file Old file</p>
    <p>Checksum list</p>
    <p>Match ed Tok</p>
    <p>ens</p>
  </div>
  <div class="page">
    <p>Performance of WebR2sync</p>
    <p>Edit Size (Byte)</p>
    <p>Sy nc</p>
    <p>T im</p>
    <p>e (S</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Sever side is 2-3 time slower</p>
  </div>
  <div class="page">
    <p>Server-side Overhead Profiling</p>
    <p>Checksum searching and block comparison occupy 80% of the computing time</p>
    <p>MD5 Computing Checksum Search</p>
    <p>Use faster hash functions to replace MD5  Reduce checksum searching overhead</p>
  </div>
  <div class="page">
    <p>Replacing MD5 with SipHash in Chunk Comparison</p>
    <p>SipHash remain low Collision Probability at much faster speed</p>
    <p>A comparison of pseudorandom hash functions</p>
  </div>
  <div class="page">
    <p>Reduce Checksum Searching by Exploiting Locality of File Edits.</p>
    <p>MD5-4</p>
    <p>Hash Table</p>
    <p>Adler32-1 Adler32-2 Adler32-3 Adler32-4</p>
    <p>MD5-1 MD5-2 MD5-3</p>
    <p>Block1 Block2 Block3 Block4</p>
    <p>Checksum</p>
    <p>search</p>
    <p>Compare</p>
    <p>Searching Over 95% modified files have less than 10 edits.</p>
  </div>
  <div class="page">
    <p>Reduce Checksum Searching by Exploiting Locality of File Edits.</p>
    <p>MD5-4</p>
    <p>Hash Table Adler32-1 Adler32-2 Adler32-3 Adler32-4</p>
    <p>MD5-1 MD5-2 MD5-3</p>
    <p>Block1 Block2 Block3 Block4</p>
    <p>Checksum search</p>
    <p>Compare</p>
    <p>Searching Over 95% modified files have less than 10 edits.</p>
  </div>
  <div class="page">
    <p>A Series of attempts of other techs: Native Extension, Parallelism</p>
    <p>Native Extension: leverage the native client for web browsers. -&gt; as quick as native rsync , supported platforms limited (e.g. Mobile web)</p>
    <p>WebRsync-Parallel: using HTML5 web workers to avoid stagnations. -&gt; avoid stagnation but not on sync time</p>
    <p>The drawback of WebRsync cannot be fundamentally addressed through above optimizations</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>Basic experiment setup visualized in a map of China</p>
  </div>
  <div class="page">
    <p>Sync Time</p>
    <p>WebR2sync+ is 2-3 times faster than WebR2sync and 15-20 times faster than WebRsync</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>This throughput is as 4 times as that of WebR2sync/rsync and as 9 times as that of NoWebRsync.</p>
    <p>Regular Workload Intensive Workload</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Implement a workable web-based delta sync named WebRsync using JavaScript and Html5, then quantifying the stagnation on browser by StagMeter.</p>
    <p>WebR2sync: Reverse the rsync process by moving computation-intensive operations from client with JavaScript to server side with efficient native C code.</p>
    <p>WebR2sync+: By exploiting the edit locality and trading off hash algorithms, we make the computation overhead affordable at the server side.</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>A seamless way to integrate the server-side design of WebR2sync+ with the back-end of commercial cloud storage vendors (like Dropbox and iCloud Drive).</p>
    <p>Explore the benefits of using more fine-grained and complex delta sync protocols, such as CDC and its variants.</p>
    <p>We envision to expand the usage of WebR2sync+ for a broader range of web service scenarios.</p>
  </div>
  <div class="page">
    <p>Q&amp;A Thanks!</p>
  </div>
</Presentation>
