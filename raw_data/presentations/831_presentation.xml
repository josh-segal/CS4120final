<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>: Rate Limiting</p>
    <p>Video Streaming</p>
    <p>Monia Ghobadi &lt;monia@cs.toronto.edu&gt;</p>
    <p>Yuchung Cheng, Ankur Jain, Matt Mathis &lt;ycheng, jankur, mattmathis@google.com&gt;</p>
    <p>Trickle</p>
  </div>
  <div class="page">
    <p>Video Streaming</p>
    <p>Ustreamer</p>
    <p>TCP</p>
    <p>Just-in-time video delivery</p>
    <p>Application pacing</p>
  </div>
  <div class="page">
    <p>Throttling phase</p>
    <p>Video Streaming</p>
    <p>Token bucket 64kB</p>
    <p>equence offset (KB)</p>
    <p>Startup phase</p>
    <p>Time (sec)</p>
    <p>Sequence offset (bytes)</p>
    <p>Target streaming rate</p>
    <p>= 125% video encoding rate</p>
  </div>
  <div class="page">
    <p>The Problem: Burstiness is Bad for TCP</p>
    <p>Not specific to YouTube videos.</p>
    <p>Netflix sends bursts as large as 2MB.</p>
    <p>Main contribution: A simple and generic technique to implement just-in-time video delivery by smoothly rate-limiting TCP transfers.</p>
  </div>
  <div class="page">
    <p>To Rate Limit TCP</p>
    <p>Dynamic upper bound on TCPs congestion window.</p>
    <p>Trickle</p>
    <p>R = 50 pkts/sec (600Kbps) RTT = 200 ms</p>
    <p>max_cwnd = 50 (pkts/sec) x 0.2 (sec) = 10 pkts</p>
    <p>Periodically computed based on RTT and target rate (R).</p>
    <p>Only server side changes for easy deployment.</p>
    <p>Not a special mechanism tailored only for YouTube.</p>
  </div>
  <div class="page">
    <p>Demo*</p>
    <p>UstreamerTrickle</p>
    <p>Smooth Bursty</p>
    <p>* http://www.cs.utoronto.ca/~monia/tcptrickle.html</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Two data centers: India and Europe. 15 days in Fall 2011, total of 23 million videos.</p>
  </div>
  <div class="page">
    <p>Users</p>
    <p>Western Europe/India data center</p>
    <p>(1) Baseline1</p>
    <p>(2) Baseline2 (3) Trickle (4) shrunk-block</p>
    <p>Experiments Methodology</p>
    <p>(2) Baseline2</p>
    <p>Same number of flows, flow sizes, flow completion times.</p>
    <p>Video ID IP/Port Bytes sent Retransmission rate RTT Transmission time Goodput Target rate</p>
  </div>
  <div class="page">
    <p>Experiments: Packet Losses</p>
    <p>Trickle reduces the average retransmission rate by 43%.</p>
    <p>C D</p>
    <p>F</p>
    <p>Retransmission rate (%)</p>
    <p>baseline1 baseline2</p>
    <p>Trickle shrunk-block</p>
  </div>
  <div class="page">
    <p>Trickle reduces the average RTT by 28%.</p>
    <p>Experiments: Queueing Delay</p>
    <p>C D</p>
    <p>F</p>
    <p>Smoothed RTT (ms)</p>
    <p>baseline1 baseline2</p>
    <p>Trickle shrunk-block</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Trickle rate limits TCP by dynamically setting the maximum congestion window size.</p>
    <p>Minimal sender-side changes, fast deployment.</p>
    <p>Generally applicable to rate limit other kinds of streaming.</p>
  </div>
</Presentation>
