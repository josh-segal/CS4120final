<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Truly Non-blocking Writes</p>
    <p>Luis Useche2 Ricardo Koller2 Raju Rangaswami2</p>
    <p>Akshat Verma1</p>
    <p>HotStorage Workshop, 2011</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write()</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write() 2. Miss</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write() 2. Miss</p>
    <p>ue</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>ue4. Complete</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>ue4. Complete</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>ue4. Complete</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>ue4. Complete</p>
    <p>For writes: why wait for data that the application doesnt need?</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Memory access granularity is smaller than disks  Writes to an out-of-core page require a full page fetch.</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>ue4. Complete</p>
    <p>For writes: why wait for data that the application doesnt need?</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write()</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write() 2. Miss</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write() 2. Miss</p>
    <p>Patch</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write() 2. Miss</p>
    <p>Patch</p>
    <p>ue</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>??? 1. Write() 2. Miss</p>
    <p>Patch</p>
    <p>ue</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>Patch</p>
    <p>ue</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>Patch</p>
    <p>ue</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Basic Approach</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>Patch</p>
    <p>ue</p>
    <p>Benefits</p>
  </div>
  <div class="page">
    <p>Motivation  Higher Fault Rates</p>
    <p>Memory over-committed in virtualized environments</p>
  </div>
  <div class="page">
    <p>Motivation  Higher Fault Rates</p>
    <p>Memory over-committed in virtualized environments</p>
    <p>More process running with multi-core and virtualized environments</p>
  </div>
  <div class="page">
    <p>Motivation  Higher Fault Rates</p>
    <p>Memory over-committed in virtualized environments</p>
    <p>More process running with multi-core and virtualized environments</p>
    <p>Memory hierarchy moving towards a more active and faster backing store</p>
  </div>
  <div class="page">
    <p>Motivation  % Non-blocking faults</p>
    <p>We calculate the % of faults that can benefit in all our workloads</p>
  </div>
  <div class="page">
    <p>Motivation  % Non-blocking faults</p>
    <p>We calculate the % of faults that can benefit in all our workloads:</p>
    <p>Image Processing Rendering of SVG images Developer Unit and performance testing</p>
    <p>Server Application, database, and mail server</p>
  </div>
  <div class="page">
    <p>Motivation  % Non-blocking faults</p>
    <p>We calculate the % of faults that can benefit in all our workloads:</p>
    <p>Image Processing Rendering of SVG images Developer Unit and performance testing</p>
    <p>Server Application, database, and mail server</p>
    <p>Simulator with full-system memory traces.</p>
    <p>RAM set to 50% of app footprint</p>
  </div>
  <div class="page">
    <p>Motivation  % Non-blocking faults</p>
    <p>We calculate the % of faults that can benefit in all our workloads:</p>
    <p>Image Processing Rendering of SVG images Developer Unit and performance testing</p>
    <p>Server Application, database, and mail server</p>
    <p>Simulator with full-system memory traces.</p>
    <p>RAM set to 50% of app footprint</p>
    <p>Up to 80% of page faults benefit</p>
    <p>% N</p>
    <p>o n -B</p>
    <p>lo ck</p>
    <p>F a u lts</p>
    <p>Workload</p>
    <p>Im a g e P</p>
    <p>ro c</p>
    <p>D ev</p>
    <p>el op</p>
    <p>er</p>
    <p>Se rv</p>
    <p>er</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Alternatives to non-blocking writes:</p>
    <p>Perfect DRAM Provision</p>
    <p>Unpredictable or unbounded.</p>
    <p>Prefetching</p>
    <p>Can incur false positives and false negatives.</p>
    <p>Asynchronous System Calls</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
    <p>write(buf, nbytes, dest addr)</p>
    <p>fault(dest addr)</p>
    <p>OS c all</p>
    <p>Store Inst</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
    <p>write(buf, nbytes, dest addr)</p>
    <p>fault(dest addr)</p>
    <p>OS c all</p>
    <p>Store Inst</p>
    <p>patch{new buf, nbytes, dest addr}</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
    <p>write(buf, nbytes, dest addr)</p>
    <p>fault(dest addr)</p>
    <p>OS c all</p>
    <p>Store Inst</p>
    <p>patch{new buf, nbytes, dest addr}</p>
    <p>Information Per Non-blocking Write</p>
    <p>Information</p>
    <p>Write Offset</p>
    <p>Data Written</p>
    <p>Size of Data</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
    <p>write(buf, nbytes, dest addr)</p>
    <p>fault(dest addr)</p>
    <p>OS c all</p>
    <p>Store Inst</p>
    <p>patch{new buf, nbytes, dest addr}</p>
    <p>Information Per Non-blocking Write</p>
    <p>Information Supervised write()</p>
    <p>Write Offset</p>
    <p>Data Written</p>
    <p>Size of Data</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
    <p>write(buf, nbytes, dest addr)</p>
    <p>fault(dest addr)</p>
    <p>OS c all</p>
    <p>Store Inst</p>
    <p>patch{new buf, nbytes, dest addr}</p>
    <p>Information Per Non-blocking Write</p>
    <p>Information Supervised Unsupervised write() Fault</p>
    <p>Write Offset</p>
    <p>Data Written</p>
    <p>Size of Data</p>
  </div>
  <div class="page">
    <p>Solution Challenges</p>
    <p>Process</p>
    <p>write(buf, nbytes, dest addr)</p>
    <p>fault(dest addr)</p>
    <p>OS c all</p>
    <p>Store Inst</p>
    <p>patch{new buf, nbytes, dest addr}</p>
    <p>Information Per Non-blocking Write</p>
    <p>Information Supervised Unsupervised write() Fault</p>
    <p>Write Offset</p>
    <p>Data Written</p>
    <p>Size of Data</p>
  </div>
  <div class="page">
    <p>Handling Unsupervised Writes</p>
    <p>Approach Description Fast All Arch? Low Mem?</p>
    <p>Full Feature Hardware</p>
    <p>fault()</p>
  </div>
  <div class="page">
    <p>Handling Unsupervised Writes</p>
    <p>Approach Description Fast All Arch? Low Mem?</p>
    <p>Full Feature Hardware</p>
    <p>fault()</p>
    <p>Opcode Disassembly sw $t1, 0xff</p>
    <p>data</p>
    <p>offset</p>
  </div>
  <div class="page">
    <p>Handling Unsupervised Writes</p>
    <p>Approach Description Fast All Arch? Low Mem?</p>
    <p>Full Feature Hardware</p>
    <p>fault()</p>
    <p>Opcode Disassembly sw $t1, 0xff</p>
    <p>data</p>
    <p>offset</p>
    <p>Page Diff-Merge</p>
    <p>Disk Page or 0-buffer</p>
    <p>and 1-buffer Updated Page</p>
  </div>
  <div class="page">
    <p>Quantifying Benefits</p>
    <p>Virtual Memory Simulator</p>
    <p>Input RAM size &amp; Full System Memory Traces</p>
    <p>Output Performance statistics</p>
    <p>Memory size set to 50% of workloads footprint</p>
    <p>Creating patches is not required</p>
  </div>
  <div class="page">
    <p>Quantifying Benefits  Metric</p>
    <p>How to measure the additional parallelism?  Outstanding Write Faults (OWF): # of parallel write faults</p>
    <p>at any time X OWF  OIO X OWF  1 for single threaded applications X OWF  0 when using non-blocking writes</p>
    <p>We need the variations over time as well</p>
    <p>E[OWF]: time-weighted average OWF</p>
    <p>E [O</p>
    <p>W F</p>
    <p>]</p>
    <p>Workload</p>
    <p>Im a g e P</p>
    <p>ro c</p>
    <p>De ve</p>
    <p>lo pe</p>
    <p>r</p>
    <p>Se rv</p>
    <p>er</p>
  </div>
  <div class="page">
    <p>Quantifying Benefits  Time Reduction</p>
    <p>These results are not in the paper</p>
    <p>Execution time = Trace time + Synchronous read time</p>
    <p>Write time of dirty page on evictions ignored</p>
    <p>Rough estimate: error proportional to the number of dirty pages evicted</p>
    <p>% E</p>
    <p>xe c.</p>
    <p>T im</p>
    <p>e D</p>
    <p>e cr</p>
    <p>e a se</p>
    <p>Workload</p>
    <p>Im a g e P</p>
    <p>ro c</p>
    <p>De ve</p>
    <p>lo pe</p>
    <p>r</p>
    <p>Se rv</p>
    <p>er</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Work</p>
    <p>We presented non-blocking writes: a technique to eliminate read-before-writes</p>
    <p>X Reduced execution time X Increased device usage</p>
    <p>We estimate a reduction times of 0.1-54%</p>
    <p>In the future, we are planning to implement non-blocking writes to better study its implications</p>
    <p>X What workloads benefit from Non-blocking writes?</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Virtual Memory Simulator</p>
    <p>Input: RAM size &amp; Mem Traces</p>
    <p>Output: Per Entry: Timestamp and event (hit, miss, evict); Global: Performance stats.</p>
    <p>Writes to out-of-core pages considered non-blocking</p>
    <p>Non-blocking status revoked when:</p>
  </div>
  <div class="page">
    <p>Quantifying Benefits  Full System Memory Traces</p>
    <p>Modified x86 software-MMU QEMU to log all memory accesses:</p>
    <p>Instruction count, CR3, virtual/physical address, access-mode, page privileges.</p>
    <p>Workloads</p>
    <p>Type # Footprint Avg/Std (MB)</p>
    <p>Server 10 294/158</p>
    <p>Developer 4 269/183</p>
    <p>Image 1 149/0</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process 101 1. Write</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process 101 1. Write 111</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process 101 1. Write 111</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process 101 1. Write 111</p>
    <p>Backing Store 101 110 011</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process 101 1. Write 111</p>
    <p>Backing Store 101 110 011</p>
  </div>
  <div class="page">
    <p>Solution Approaches  Page Diff-Merge</p>
    <p>Process 101 1. Write 111</p>
    <p>Backing Store 101 110 011</p>
    <p>Or</p>
  </div>
</Presentation>
