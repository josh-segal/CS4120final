<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Centralized Failure Handler for</p>
    <p>File Systems</p>
    <p>Vijayan Prabhakaran</p>
    <p>Andrea C. Arpaci-Dusseau</p>
    <p>Remzi H. Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>Failure handling diffusion</p>
    <p>Failure handling in file systems is broken  Assumes that disks fail in a fail-stop manner  Portions of a disk can fail: latent sector errors, block</p>
    <p>corruption</p>
    <p>File system I/O calls are distributed  System calls (open, stat, etc), flush daemons, journal</p>
    <p>Along with I/O, failure handling is also diffused  Detection and recovery for each I/O code</p>
  </div>
  <div class="page">
    <p>Problems due to diffusion</p>
    <p>Illogically inconsistent policies  Different techniques even under similar fault scenarios</p>
    <p>Tangled policies and mechanisms  Harder to separate failure policies from detection and recovery</p>
    <p>mechanisms  Policy decision: To protect using parity or replica?  Mechanisms: How to implement parity protection?</p>
    <p>Diffusion of bugs  Several bugs in failure handling code  Since bugs are repeated, hard to fix them all</p>
  </div>
  <div class="page">
    <p>Centralized Failure Handler</p>
    <p>Centralized failure handler  Detects and recovers with well defined failure policies</p>
    <p>Component of file system like cache manager or journaling layer</p>
    <p>Controls all I/O initiation and completion</p>
    <p>Detects I/O failures and invokes specified recovery policy</p>
  </div>
  <div class="page">
    <p>Benefits of Centralized Failure Handler</p>
    <p>Eliminate inconsistent policies</p>
    <p>Easy to add new functions  No need to write a failure handler for each function</p>
    <p>Can separate failure polices from mechanisms</p>
    <p>Fine grained failure policy: diff block types &amp; I/O contexts  Applications can specify their own failure policies  E.g., replicate an important directory but no need for temp file.</p>
  </div>
  <div class="page">
    <p>Issues in Centralized Failure Handler</p>
    <p>Information  I/O for different block types and contexts  Failure handler needs semantic information about I/O  Maps: block types and I/O contexts to failure policies</p>
    <p>Architecture  Interacts with core file system, journal, cache  Two sub components: file system specific and generic</p>
    <p>Machinery  All I/O calls go through Centralized Failure Handler  I/O calls: time critical, completion specified in interrupt context  Contains machinery to separate completion path from failure handling</p>
  </div>
</Presentation>
