<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>sRoute: Treating the Storage Stack Like a Network</p>
    <p>Ioan Stefanovici, Bianca Schroeder Greg OShea</p>
    <p>Eno Thereska</p>
    <p>&amp; You may re-use these slides freely, but please cite them appropriately: sRoute: Treating the Storage Stack Like a Network. Ioan Stefanovici, Bianca Schroeder, Greg O'Shea, Eno Thereska. In FAST16, Santa Clara, CA, USA. Feb 22-25,2016.</p>
  </div>
  <div class="page">
    <p>The Data Center IO Stack Today</p>
    <p>Data/Cache</p>
    <p>Container</p>
    <p>Page Cache OS</p>
    <p>Network FS Encryption Scheduler</p>
    <p>Application Data/Cache</p>
    <p>VM</p>
    <p>Hypervisor Network File System</p>
    <p>Application Data/Cache</p>
    <p>VM</p>
    <p>Storage Server Cache</p>
    <p>Guest OS</p>
    <p>File System Scheduler</p>
    <p>Page Cache</p>
    <p>Guest OS</p>
    <p>File System Scheduler</p>
    <p>Driver</p>
    <p>Application</p>
    <p>Page Cache OS</p>
    <p>Network FS Scheduler</p>
    <p>Virus Scanner</p>
    <p>Data/Cache</p>
    <p>Container KV StorePage Cache</p>
    <p>Deduplication File System Scheduler</p>
    <p>Storage Server Cache</p>
    <p>Deduplication File System Scheduler</p>
    <p>IO stack is statically configured</p>
    <p>For example:  Adaptive replication protocol?  Dynamic processing of selected IOs?</p>
    <p>Dynamic IO path changes</p>
    <p>What if we could programmatically control the path of IOs at runtime?</p>
  </div>
  <div class="page">
    <p>sRoute: Treating the Storage Stack Like a Network</p>
    <p>Programmability + control  Software-Defined Networking (SDN)  Software-Defined Storage</p>
    <p>Observation:  IO path changes at the core of much storage functionality</p>
    <p>Hypothesis:  Storage functionality via a programmable routing primitive</p>
    <p>IO Routing: ability to dynamically control path and destination of Reads/Writes at runtime</p>
    <p>Storage Switch (sSwitch)</p>
  </div>
  <div class="page">
    <p>E.g. Tail Latency Control</p>
    <p>Storage Server</p>
    <p>S1</p>
    <p>VM1</p>
    <p>!!!</p>
    <p>Storage Server</p>
    <p>S2</p>
    <p>VM2 VMn</p>
    <p>Storage traffic is stateful (in contrast to networks)  Maintain file system semantics  Consistent system-wide configuration updates  Data + metadata consistency</p>
    <p>IO Routing Challenges:</p>
  </div>
  <div class="page">
    <p>IO Routing Types</p>
    <p>Implement/enhance storage functionality by using a common programmable routing primitive</p>
    <p>Endpoint:</p>
    <p>Waypoint:</p>
    <p>Scatter:</p>
    <p>p X p Y</p>
    <p>p X</p>
    <p>r W X</p>
    <p>p r</p>
    <p>p X</p>
    <p>r YZ</p>
    <p>Xp r</p>
    <p>Tail latency control  Copy-on-write  File versioning</p>
    <p>Specialized processing  Caching guarantees  Deadline policies</p>
    <p>Maximize throughput  Minimize latency  Logging/debugging</p>
  </div>
  <div class="page">
    <p>sRoute Design</p>
    <p>IO</p>
    <p>Endpoint</p>
    <p>Stage 1</p>
    <p>Stage 2</p>
    <p>Stage n</p>
    <p>...</p>
    <p>Today:</p>
  </div>
  <div class="page">
    <p>Stage Stage Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>StageStage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Data plane</p>
    <p>sRoute Design</p>
    <p>sRoute:</p>
    <p>Specialized stages  Can perform operations on IOs</p>
  </div>
  <div class="page">
    <p>Stage Stage Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>StageStage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Data plane</p>
    <p>Stage Stage Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>IO</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>...</p>
    <p>sSwitch</p>
    <p>Data plane</p>
    <p>sRoute Design</p>
    <p>sRoute:</p>
    <p>Specialized stages  Can perform operations on IOs</p>
    <p>sSwitches  Programmable  Forward IOs according to routing rules</p>
  </div>
  <div class="page">
    <p>Stage Stage Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>StageStage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Data plane</p>
    <p>Stage Stage Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>IO</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>...</p>
    <p>sSwitch</p>
    <p>Data plane</p>
    <p>sRoute Design</p>
    <p>Stage Stage Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>IO</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>...</p>
    <p>Controller App</p>
    <p>App</p>
    <p>sSwitch</p>
    <p>Data plane Ctrl plane</p>
    <p>sRoute:</p>
    <p>Specialized stages  Can perform operations on IOs</p>
    <p>sSwitches  Programmable  Forward IOs according to routing rules</p>
    <p>Controller  Global visibility  Configure sSwitches &amp; specialized stages  Installs forwarding rules</p>
    <p>End-to-end flow based classification  Extends IOFlow [SOSP13]</p>
  </div>
  <div class="page">
    <p>File:</p>
    <p>Stage C:</p>
    <p>Controller:</p>
    <p>sSwitch Forwarding</p>
    <p>Routing Rule Matching &lt;IO Header&gt;  return{Destinations}  Implementation Details  Kernel-level</p>
    <p>File granularity IO classification  Forwarding within same server</p>
    <p>User-level  Sub-file-range classification + forwarding</p>
    <p>Routing Address  File: Remote host + file name  Stage: &lt;device name, driver name, altitude&gt;  Controller</p>
    <p>&lt;VM1, , //S 1/X &gt; (return &lt; IO, //S2/Y &gt;)</p>
    <p>&lt;VM1, , //S 1/X &gt; (return &lt; IO, //S2/C &gt;)</p>
    <p>&lt;VM1,W, &gt; (return &lt; IOHeader, Controller &gt;)  10</p>
    <p>VM1</p>
    <p>S1X</p>
    <p>S2Y</p>
    <p>VM1</p>
    <p>S1X</p>
    <p>C</p>
    <p>VM1</p>
    <p>S1X Controller</p>
  </div>
  <div class="page">
    <p>Control Delegates</p>
    <p>Insert(&lt;VM1, W, //S1/X&gt;, (F(); return &lt;IO, //S2/X&gt;))</p>
    <p>Insert(&lt;VM1, R, //S1/X&gt;, (return &lt;IO, //S1/X&gt;))</p>
    <p>sSwitch at VM1:</p>
    <p>Control delegate F():</p>
    <p>Delete(&lt;VM1, R, //S1/X&gt;)</p>
    <p>Insert(&lt;VM1, R, //S1/X, 0, 512KB&gt;, (return &lt;IO, //S2/X&gt;))</p>
    <p>Insert(&lt;VM1, R, //S1/X&gt;, (return &lt;IO, //S1/X&gt;))</p>
    <p>IO Routing Rule IOHeader &gt; F() ; return{Destinations}</p>
    <p>Storage Server</p>
    <p>S1</p>
    <p>VM1</p>
    <p>!!!</p>
    <p>Storage Server</p>
    <p>S2</p>
    <p>X</p>
    <p>R W R: 0-512KB</p>
  </div>
  <div class="page">
    <p>Consistent Rule Updates</p>
    <p>Per-IO consistency</p>
    <p>Per-flow consistency</p>
  </div>
  <div class="page">
    <p>Per-IO Consistency</p>
    <p>IOs flow through old or new rules, but not both</p>
    <p>VM Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Quiesce Drain</p>
    <p>sSwitch programmable API</p>
    <p>Insert(IOHeader, Delegate) Delete(IOHeader) Quiesce(IOHeader, Boolean) Drain(IOHeader)</p>
  </div>
  <div class="page">
    <p>Per-Flow Consistency</p>
    <p>Maintaining Read-after-Write data consistency (Reads return the data from the latest Write)</p>
    <p>Single source: per-IO consistency</p>
    <p>VM Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Quiesce Drain</p>
  </div>
  <div class="page">
    <p>Per-Flow Consistency</p>
    <p>Read-after-Write consistency (Reads return the data from the latest Write)</p>
    <p>Multiple sources: phases</p>
    <p>VM1</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Stage</p>
    <p>Quiesce Drain</p>
    <p>VMn</p>
    <p>Quiesce</p>
    <p>Drain</p>
  </div>
  <div class="page">
    <p>Per-Flow Consistency</p>
    <p>VM2</p>
    <p>S1 S2</p>
    <p>VM1VM2</p>
    <p>S1 S2</p>
    <p>VM1</p>
    <p>Read-after-Write consistency (Reads return the data from the latest Write)</p>
    <p>Multiple sources + control delegates</p>
  </div>
  <div class="page">
    <p>Control Application Case Studies</p>
    <p>Replica Set Control  Read/Write replica set control  63% throughput increase</p>
    <p>File Cache Control  Cache disaggregation, isolation, and customization  57% overall system throughput increase</p>
    <p>Tail Latency Control  Fine-grained IO load balancing  2 orders of magnitude latency improvements</p>
    <p>Please see paper for more details! 17</p>
    <p>p X p Y</p>
    <p>p X</p>
    <p>r W X</p>
    <p>p r</p>
    <p>p X</p>
    <p>r YZ</p>
    <p>Xp r</p>
  </div>
  <div class="page">
    <p>Tail Latency</p>
    <p>Exchange servers</p>
    <p>Temporarily forward IOs from loaded volumes onto less loaded volumes  Maintain strong consistency</p>
    <p>Storage Server</p>
    <p>Smax</p>
    <p>VM1</p>
    <p>!!!</p>
    <p>Storage Server</p>
    <p>Smin</p>
    <p>VM2 VMn</p>
  </div>
  <div class="page">
    <p>Tail Latency Control Application</p>
    <p>Each storage server:  Avghour: exponential moving average  last hour  Avgmin: sliding window average  last minute</p>
    <p>Temporarily forward IO if:</p>
    <p>Avgmin &gt;  Avghour</p>
    <p>VMmax</p>
    <p>Smax Smin</p>
    <p>Insert(&lt;*, w, //Smax/VHDmax&gt;, (F(); return &lt;IO, //Smin/T&gt;))</p>
    <p>Insert(&lt;*, r, //Smax/VHDmax&gt;, (return &lt;IO, //Smax/VHDmax&gt;))</p>
    <p>sSwitch:</p>
  </div>
  <div class="page">
    <p>Tail Latency Control Results</p>
    <p>Orders of magnitude latency reductions 20</p>
    <p>Max Volume Latency</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>What if we could programmatically control the path of IOs at runtime?  Hypothesis: storage functionality via a programmable routing primitive  Challenges:  IO statefulness  Data/metadata consistency  Consistent rule updates</p>
    <p>Case studies  Replica set control  File cache control  Tail latency control</p>
    <p>Please read our paper for more details! 21</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>? Questions?</p>
  </div>
</Presentation>
