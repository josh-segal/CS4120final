<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TOWARDS PRACTICAL TOOLS FOR SIDE CHANNEL AWARE SOFTWARE ENGINEERING: GREY BOX MODELLING FOR</p>
    <p>INSTRUCTION LEAKAGES</p>
    <p>David McCann, Elisabeth Oswald, Carolyn Whitnall*</p>
    <p>Department of Computer Science, University of Bristol</p>
    <p>carolyn.whitnall@bris.ac.uk</p>
    <p>August 2017</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 1 / 20</p>
  </div>
  <div class="page">
    <p>INTRODUCTION</p>
    <p>Top line: Simulating instruction-level power consumption to detect side-channel leakage in the development stage.</p>
    <p>Outline: I Motivation: what are we hoping to achieve? I Previous work: what has been achieved already? I Model building strategy. I ELMO: a leakage emulator for the M0. I Performance and applications. C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 2 / 20</p>
  </div>
  <div class="page">
    <p>MOTIVATION</p>
    <p>Equip software designers to detect and address side-channel vulnerabilities during development.</p>
    <p>I Avoids nasty surprises later down the line.</p>
    <p>I Problems are cheaper to fix early on.</p>
    <p>I Reduces the reliance on (external) expertise.</p>
    <p>SMART CARDS INTERNET OF THINGS</p>
    <p>A relatively mature industry. A new, rapidly growing industry.</p>
    <p>Large, established companies. Lots of small start-ups.</p>
    <p>Security already a priority. Security not well-incentivised.</p>
    <p>Access to expertise (external/inhouse).</p>
    <p>Limited resources for expertise.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 3 / 20</p>
  </div>
  <div class="page">
    <p>PREVIOUS WORK</p>
    <p>Detailed circuit-level knowledge  transistor/cell-level netlists.</p>
    <p>Transition counts as a proportional approximation of the power consumption.</p>
    <p>More precise mappings possible if capacitive loads are known.</p>
    <p>Always a simplification to some degree, e.g. netlists dont describe crosstalk.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 4 / 20</p>
  </div>
  <div class="page">
    <p>PREVIOUS WORK</p>
    <p>Detailed circuit-level knowledge  transistor/cell-level netlists.</p>
    <p>Transition counts as a proportional approximation of the power consumption.</p>
    <p>More precise mappings possible if capacitive loads are known.</p>
    <p>Always a simplification to some degree, e.g. netlists dont describe crosstalk.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 4 / 20</p>
  </div>
  <div class="page">
    <p>PREVIOUS WORK</p>
    <p>.</p>
    <p>Only requires general knowledge of the algorithm, rather than implementation specifics.</p>
    <p>Emphasis is on known security-sensitive values and operations.</p>
    <p>Models are fitted empirically to trace measurements as inputs vary.</p>
    <p>Fitted distributions used (e.g.) as templates for classification.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 4 / 20</p>
  </div>
  <div class="page">
    <p>PREVIOUS WORK</p>
    <p>.</p>
    <p>Instruction level simulation.</p>
    <p>Exploits assembly code but doesnt require circuit-level info.</p>
    <p>Power consumption typically modelled via simplified assumptions such as Hamming weight/distance.</p>
    <p>Power cost analysis indicates greater complexity in practice (e.g. sequence effects) [TMWL96].</p>
    <p>[TMWL96] V. Tiwari, S. Malik, A. Wolfe, and M. T.C. Lee. Instruction level power analysis and optimization of software. VLSI</p>
    <p>Signal Processing, 13(23):223238, 1996.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 4 / 20</p>
  </div>
  <div class="page">
    <p>PREVIOUS WORK</p>
    <p>.</p>
    <p>Instruction level simulation.</p>
    <p>Exploits assembly code but doesnt require circuit-level info.</p>
    <p>Power consumption typically modelled via simplified assumptions such as Hamming weight/distance.</p>
    <p>Power cost analysis indicates greater complexity in practice (e.g. sequence effects) [TMWL96].</p>
    <p>Our contribution: appropriately complex models for instruction-level (i.e. grey box) leakages; ELMO  a tool which uses these models to map code sequences to predicted traces.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 4 / 20</p>
  </div>
  <div class="page">
    <p>LINEAR REGRESSION</p>
    <p>Ordinary Least Squares estimation: Find  and  so as to minimise the sum of the squares of the residuals (that is,</p>
    <p>N i=1 T  ( + xi))</p>
    <p>Some assumptions: Noise is independent and constant. The explanatory variables are not collinear. (For some statistical inferences) noise is normally distributed.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 5 / 20</p>
  </div>
  <div class="page">
    <p>MEASURING MODEL QUALITY</p>
    <p>How do we know when weve arrived at something suitable for purpose?</p>
    <p>Model quality = closeness to the underlying reality it approximates.</p>
    <p>Underlying reality = unknown = Model quality = unknown.</p>
    <p>R2 = variation explained by the model</p>
    <p>total variation</p>
    <p>High R2 can imply overfit, especially when # explanatory variables is large relative to # measurements.</p>
    <p>R2 always increases with additional explanatory variables, even if the contribution is not significant.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 6 / 20</p>
  </div>
  <div class="page">
    <p>MEASURING MODEL QUALITY: THE F-TEST</p>
    <p>F-test (informally): a set of variables is jointly significant if</p>
    <p>reduction in unexplained variation remaining unexplained variation</p>
    <p>&gt; critical value of F-distribution</p>
    <p>Can also test for overall significance of model.</p>
    <p>Low R2 = variation is dominated by unknown / unmeasureable / un-included factors. Low R2 + overall significance = model might still be useful. Model not significant = traces may not leak information of interest. Model not significant 6= device does not leak information! Review acquisition set-up. . .</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 7 / 20</p>
  </div>
  <div class="page">
    <p>ARM CORTEX-M PROCESSOR FAMILY</p>
    <p>Register bank</p>
    <p>ALU</p>
    <p>Data</p>
    <p>out</p>
    <p>Data</p>
    <p>in</p>
    <p>In stru</p>
    <p>c tio</p>
    <p>n d</p>
    <p>e c o</p>
    <p>d e a</p>
    <p>n d</p>
    <p>c o</p>
    <p>n tro</p>
    <p>l</p>
    <p>A b</p>
    <p>u s</p>
    <p>B b</p>
    <p>u s</p>
    <p>A L</p>
    <p>U b</p>
    <p>u s</p>
    <p>Mult</p>
    <p>Shift</p>
    <p>FIG: Simplified ARM CPU architecture. (Redrawn from S. Furber, ARM System-on-Chip Architecture, Addison Wesley, 2000).</p>
    <p>Launched in 2004 for use within small microcontrollers.</p>
    <p>Six variants: M0, M0+, M1, M3, M4, M7 (lowest to highest in cost / size / power).</p>
    <p>Exact CPU architecture not publicly available but known approximately:</p>
    <p>Arithmetic logic unit (ALU). Hardware multiplier. Barrel shifter. Two buses to the ALU from the register banks. Third bus from ALU output back to the register banks.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 8 / 20</p>
  </div>
  <div class="page">
    <p>ARM CORTEX-M PROCESSOR FAMILY</p>
    <p>Register bank</p>
    <p>ALU</p>
    <p>Data</p>
    <p>out</p>
    <p>Data</p>
    <p>in</p>
    <p>In stru</p>
    <p>c tio</p>
    <p>n d</p>
    <p>e c o</p>
    <p>d e a</p>
    <p>n d</p>
    <p>c o</p>
    <p>n tro</p>
    <p>l</p>
    <p>A b</p>
    <p>u s</p>
    <p>B b</p>
    <p>u s</p>
    <p>A L</p>
    <p>U b</p>
    <p>u s</p>
    <p>Mult</p>
    <p>Shift</p>
    <p>FIG: Simplified ARM CPU architecture. (Redrawn from S. Furber, ARM System-on-Chip Architecture, Addison Wesley, 2000).</p>
    <p>Launched in 2004 for use within small microcontrollers.</p>
    <p>Six variants: M0, M0+, M1, M3, M4, M7 (lowest to highest in cost / size / power).</p>
    <p>Exact CPU architecture not publicly available but known approximately:</p>
    <p>Arithmetic logic unit (ALU). Hardware multiplier. Barrel shifter. Two buses to the ALU from the register banks. Third bus from ALU output back to the register banks.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 8 / 20</p>
  </div>
  <div class="page">
    <p>ARM CORTEX-M PROCESSOR FAMILY</p>
    <p>Register bank</p>
    <p>ALU</p>
    <p>Data</p>
    <p>out</p>
    <p>Data</p>
    <p>in</p>
    <p>In stru</p>
    <p>c tio</p>
    <p>n d</p>
    <p>e c o</p>
    <p>d e a</p>
    <p>n d</p>
    <p>c o</p>
    <p>n tro</p>
    <p>l</p>
    <p>A b</p>
    <p>u s</p>
    <p>B b</p>
    <p>u s</p>
    <p>A L</p>
    <p>U b</p>
    <p>u s</p>
    <p>Mult</p>
    <p>Shift</p>
    <p>Mult</p>
    <p>FIG: Simplified ARM CPU architecture. (Redrawn from S. Furber, ARM System-on-Chip Architecture, Addison Wesley, 2000).</p>
    <p>Launched in 2004 for use within small microcontrollers.</p>
    <p>Six variants: M0, M0+, M1, M3, M4, M7 (lowest to highest in cost / size / power).</p>
    <p>Exact CPU architecture not publicly available but known approximately:</p>
    <p>Arithmetic logic unit (ALU). Hardware multiplier. Barrel shifter. Two buses to the ALU from the register banks. Third bus from ALU output back to the register banks.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 8 / 20</p>
  </div>
  <div class="page">
    <p>ARM CORTEX-M PROCESSOR FAMILY</p>
    <p>Register bank</p>
    <p>ALU</p>
    <p>Data</p>
    <p>out</p>
    <p>Data</p>
    <p>in</p>
    <p>In stru</p>
    <p>c tio</p>
    <p>n d</p>
    <p>e c o</p>
    <p>d e a</p>
    <p>n d</p>
    <p>c o</p>
    <p>n tro</p>
    <p>l</p>
    <p>A b</p>
    <p>u s</p>
    <p>B b</p>
    <p>u s</p>
    <p>A L</p>
    <p>U b</p>
    <p>u s</p>
    <p>Mult</p>
    <p>Shift</p>
    <p>FIG: Simplified ARM CPU architecture. (Redrawn from S. Furber, ARM System-on-Chip Architecture, Addison Wesley, 2000).</p>
    <p>Launched in 2004 for use within small microcontrollers.</p>
    <p>Six variants: M0, M0+, M1, M3, M4, M7 (lowest to highest in cost / size / power).</p>
    <p>Exact CPU architecture not publicly available but known approximately:</p>
    <p>Arithmetic logic unit (ALU). Hardware multiplier. Barrel shifter. Two buses to the ALU from the register banks. Third bus from ALU output back to the register banks.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 8 / 20</p>
  </div>
  <div class="page">
    <p>ARM CORTEX-M PROCESSOR FAMILY</p>
    <p>Register bank</p>
    <p>ALU</p>
    <p>Data</p>
    <p>out</p>
    <p>Data</p>
    <p>in</p>
    <p>In stru</p>
    <p>c tio</p>
    <p>n d</p>
    <p>e c o</p>
    <p>d e a</p>
    <p>n d</p>
    <p>c o</p>
    <p>n tro</p>
    <p>l</p>
    <p>A b</p>
    <p>u s</p>
    <p>B b</p>
    <p>u s</p>
    <p>A L</p>
    <p>U b</p>
    <p>u s</p>
    <p>Mult</p>
    <p>Shift</p>
    <p>FIG: Simplified ARM CPU architecture. (Redrawn from S. Furber, ARM System-on-Chip Architecture, Addison Wesley, 2000).</p>
    <p>Launched in 2004 for use within small microcontrollers.</p>
    <p>Six variants: M0, M0+, M1, M3, M4, M7 (lowest to highest in cost / size / power).</p>
    <p>Exact CPU architecture not publicly available but known approximately:</p>
    <p>Arithmetic logic unit (ALU). Hardware multiplier. Barrel shifter. Two buses to the ALU from the register banks. Third bus from ALU output back to the register banks.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 8 / 20</p>
  </div>
  <div class="page">
    <p>ARM CORTEX-M PROCESSOR FAMILY</p>
    <p>Register bank</p>
    <p>ALU</p>
    <p>Data</p>
    <p>out</p>
    <p>Data</p>
    <p>in</p>
    <p>In stru</p>
    <p>c tio</p>
    <p>n d</p>
    <p>e c o</p>
    <p>d e a</p>
    <p>n d</p>
    <p>c o</p>
    <p>n tro</p>
    <p>l</p>
    <p>A b</p>
    <p>u s</p>
    <p>B b</p>
    <p>u s</p>
    <p>A L</p>
    <p>U b</p>
    <p>u s</p>
    <p>Mult</p>
    <p>Shift</p>
    <p>FIG: Simplified ARM CPU architecture. (Redrawn from S. Furber, ARM System-on-Chip Architecture, Addison Wesley, 2000).</p>
    <p>Launched in 2004 for use within small microcontrollers.</p>
    <p>Six variants: M0, M0+, M1, M3, M4, M7 (lowest to highest in cost / size / power).</p>
    <p>Exact CPU architecture not publicly available but known approximately:</p>
    <p>Arithmetic logic unit (ALU). Hardware multiplier. Barrel shifter. Two buses to the ALU from the register banks. Third bus from ALU output back to the register banks.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 8 / 20</p>
  </div>
  <div class="page">
    <p>INSTRUCTIONS</p>
    <p>THUMB INSTRUCTION SET A subset of the most commonly used ARM instructions, each 16 bits long. We select 21 of these according to typical implementations of symmetric crypto:</p>
    <p>ALU: eors, ands, adds, adds #imm, subs, subs #imm, orrs, cmp,</p>
    <p>cmp #imm, movs, movs #imm.</p>
    <p>SHIFTS: lsls, lsrs, rors.</p>
    <p>STORES: str, strb, strh.</p>
    <p>LOADS: ldr, ldrb, ldrh.</p>
    <p>MULTIPLY: muls.</p>
    <p>THUMBULATOR An open source C program that emulates the data flow of arbitrary Thumb instruction sequences.</p>
    <p>https://github.com/dwelch67/thumbulator.git/ C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 9 / 20</p>
  </div>
  <div class="page">
    <p>MEASUREMENT SET-UP</p>
    <p>ARM Cortex-M0 implemented on an STM32F0 (30R8T6) Discovery Board:</p>
    <p>ST-Link to flash programs to the processor.</p>
    <p>On-chip debugging capabilities.</p>
    <p>On-board 8MHz RC oscillator clock signals.</p>
    <p>Modifications (to minimise board and set-up effects): Extract power pins.</p>
    <p>Pass power supply through a 360W resistor over which a differential probe is connected.</p>
    <p>Oscilloscope: Lecroy Waverunner 700 Zi. Sampling rate of 500 MS/S chosen empirically according to quality of DPA outcomes.</p>
    <p>Clock speed set to 8MHz.</p>
    <p>Five measurements acquired and averaged per input, to reduce noise.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 10 / 20</p>
  </div>
  <div class="page">
    <p>IDENTIFYING BASIC LEAKAGE CHARACTERISTICS</p>
    <p>Aim: Examine and compare basic data-dependent power consumption characteristics of the 21 instructions.</p>
    <p>Data collection: 215,000 traces of the form mov-instr-mov, with random inputs. Point selection: Maximum peak of the clock cycle in which instr was performed.</p>
    <p>Model:</p>
    <p>Findings: All models overall significant. Form of the leakage varies: Loads only depend (jointly) on operand bits, not bit-flips. Stores only depend on 2nd operand bits and bit-flips. Multiplication doesnt depend on 2nd operand bit-flips. Instructions on immediates essentially have no 2nd operand.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 11 / 20</p>
  </div>
  <div class="page">
    <p>CLUSTER ANALYSIS</p>
    <p>Aim: Remove redundant complexity = increase scope for explanatory complexity. Experiment: Hierarchical clustering analysis of the data-dependent coefficients for each modelled instruction.</p>
    <p>Findings: Best quality clustering according to the average silhouette index confirms intuition.</p>
    <p>Action taken: Reduce each of the 5 distinct groups to a single representative instruction  eors, lsls, str, ldr, mul.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 12 / 20</p>
  </div>
  <div class="page">
    <p>CLUSTER ANALYSIS</p>
    <p>Aim: Remove redundant complexity = increase scope for explanatory complexity. Experiment: Hierarchical clustering analysis of the data-dependent coefficients for each modelled instruction.</p>
    <p>Findings: Best quality clustering according to the average silhouette index confirms intuition.</p>
    <p>Action taken: Reduce each of the 5 distinct groups to a single representative instruction  eors, lsls, str, ldr, mul.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 12 / 20</p>
  </div>
  <div class="page">
    <p>DATA DEPENDENCY OF REPRESENTATIVE INSTRUCTIONS</p>
    <p>D at</p>
    <p>ade</p>
    <p>pe nd</p>
    <p>en tc</p>
    <p>oe ffi</p>
    <p>ci en</p>
    <p>ts fo</p>
    <p>r re</p>
    <p>pr es</p>
    <p>en ta</p>
    <p>ti ve</p>
    <p>in st</p>
    <p>ru ct</p>
    <p>io ns</p>
    <p>.. .</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 13 / 20</p>
  </div>
  <div class="page">
    <p>DATA DEPENDENCY OF REPRESENTATIVE INSTRUCTIONS</p>
    <p>D at</p>
    <p>ade</p>
    <p>pe nd</p>
    <p>en tc</p>
    <p>oe ffi</p>
    <p>ci en</p>
    <p>ts fo</p>
    <p>r re</p>
    <p>pr es</p>
    <p>en ta</p>
    <p>ti ve</p>
    <p>in st</p>
    <p>ru ct</p>
    <p>io ns</p>
    <p>.. .</p>
    <p>.. .v</p>
    <p>er su</p>
    <p>s av</p>
    <p>er ag</p>
    <p>e co</p>
    <p>ef fic</p>
    <p>ie nt</p>
    <p>s w</p>
    <p>it hi</p>
    <p>n in</p>
    <p>st ru</p>
    <p>ct io</p>
    <p>n gr</p>
    <p>ou ps</p>
    <p>. C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 13 / 20</p>
  </div>
  <div class="page">
    <p>TAKING SEQUENCE EFFECTS INTO ACCOUNT</p>
    <p>Aim: Control for the effect of previous and subsequent instructions on power consumption.</p>
    <p>Data collection: 1251,000 traces for each triplet (interleaved within one acquisition) with random inputs.</p>
    <p>Point selection: Maximum peak of the clock cycle most strongly associated with the inputs to the target instruction.</p>
    <p>Model: Same as before, plus: Previous and subsequent instructions (8 dummies, 2 baseline categories).</p>
    <p>Previous instruction  Hamming weight of each operand, and the same for subsequent instruction (16 continuous interactions).</p>
    <p>Previous instruction  Hamming distance of each operand, and the same for subsequent instruction (16 continuous interactions).</p>
    <p>Findings: Significant differential data effects in almost all cases (except operand 1 and transition 2 terms for str).</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 14 / 20</p>
  </div>
  <div class="page">
    <p>ALLOWING FOR NONLINEARITY IN DATA DEPENDENCY</p>
    <p>Limitation of the model so far: Restricts the relationship between the leakage and the data bits/bit-flips to be linear.</p>
    <p>Bits carried on adjacent wires (e.g.) might produce an interaction effect. Solution: Test for inclusion of adjacent and non-adjacent interactions. Findings:</p>
    <p>Significant bit interactions for lsls and muls only  (i.e. instructions which involve explicit joint manipulation of bits). No significant (adjacent) bit-flip interactions found.</p>
    <p>MODEL TERM eor lsl str ldr mul</p>
    <p>Data (2  32 bits, 2  32 bit-flips) 3 3 3 3 3 Instructions (2  4 dummies) 3 3 3 3 3 DataInstructions (2  4  2  2 interactions) 3 3 3 3 3 DataData (2</p>
    <p>(32 2</p>
    <p>) interactions) 7 3 7 7 3</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 15 / 20</p>
  </div>
  <div class="page">
    <p>INTEGRATION INTO LEAKAGE EMULATOR</p>
    <p>Have: Five model equations for predicting the power consumption for each of our representative Thumb instructions.</p>
    <p>Want: Facility to predict power consumption for arbitrary code sequences.</p>
    <p>THUMBULATOR</p>
    <p>Takes binary assumbly code as input.</p>
    <p>Decodes and executes sequentially.</p>
    <p>Traces instruction and memory flow for purposes of debugging.</p>
    <p>ELMO</p>
    <p>Adapt Thumbulator to also store the values of the operands in a linked list data structure.</p>
    <p>Map data flow information to power consumption predictions using the model equations.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 16 / 20</p>
  </div>
  <div class="page">
    <p>MODEL CORRELATION WITH REAL LEAKAGES</p>
    <p>I How well do the model predictions correlate with measured traces?</p>
    <p>FIG: Correlation traces for ELMO-predicted intermediate values (top) and Hamming weight model predictions (bottom) in 500 real M0 traces.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 17 / 20</p>
  </div>
  <div class="page">
    <p>MODEL CORRELATION WITH REAL LEAKAGES</p>
    <p>I How well do the model predictions correlate with measured traces?</p>
    <p>FIG: Correlation traces for ELMO-predicted intermediate values (top) and Hamming weight model predictions (bottom) in 500 real M0 traces.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 17 / 20</p>
  </div>
  <div class="page">
    <p>USING ELMO FOR LEAKAGE DETECTION</p>
    <p>Fixed-versus-random leakage detection: Proposed (among other tests) by Goodwill et al. at the 2008 NIST attack testing workshop. Two sets of traces are collected from the target device, one with some fixed data input, one with random inputs. Welchs 2-sample t-test used to decide whether (at each time point) the traces are significantly different.</p>
    <p>Example: Thumb assembly implementation of masked ShiftRows. . . Cycle No. Address Machine Code Assembly Code 1-2 0x08000206 0x684C ldr r4, [r1, #0x4] 3 0x08000208 0x41EC ror r4, r5 4-5 0x0800020A 0x604C str r4, [r1, #0x4] 6-7 0x0800020C 0x688C ldr r4, [r1, #0x8] 8 0x0800020E 0x41F4 ror r4, r6 9-10 0x08000210 0x608C str r4, [r1, #0x8] 11-12 0x08000212 0x68CC ldr r4, [r1, #0xC] 13 0x08000214 0x41FC ror r4, r7 14-15 0x08000216 0x60CC str r4, [r1, #0xC]</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 18 / 20</p>
  </div>
  <div class="page">
    <p>USING ELMO FOR LEAKAGE DETECTION</p>
    <p>Fixed-versus-random leakage detection: Proposed (among other tests) by Goodwill et al. at the 2008 NIST attack testing workshop. Two sets of traces are collected from the target device, one with some fixed data input, one with random inputs. Welchs 2-sample t-test used to decide whether (at each time point) the traces are significantly different.</p>
    <p>Example: Thumb assembly implementation of masked ShiftRows. . . Cycle No. Address Machine Code Assembly Code 1-2 0x08000206 0x684C ldr r4, [r1, #0x4] 3 0x08000208 0x41EC ror r4, r5 4-5 0x0800020A 0x604C str r4, [r1, #0x4] 6-7 0x0800020C 0x688C ldr r4, [r1, #0x8] 8 0x0800020E 0x41F4 ror r4, r6 9-10 0x08000210 0x608C str r4, [r1, #0x8] 11-12 0x08000212 0x68CC ldr r4, [r1, #0xC] 13 0x08000214 0x41FC ror r4, r7 14-15 0x08000216 0x60CC str r4, [r1, #0xC]</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 18 / 20</p>
  </div>
  <div class="page">
    <p>USING ELMO FOR LEAKAGE DETECTION (CTD)</p>
    <p>-20</p>
    <p>-10</p>
    <p>S IM</p>
    <p>U L</p>
    <p>A T</p>
    <p>E D</p>
    <p>tst</p>
    <p>at is</p>
    <p>ti c</p>
    <p>-20</p>
    <p>-10</p>
    <p>M E</p>
    <p>A S</p>
    <p>U R</p>
    <p>E D</p>
    <p>tst</p>
    <p>at is</p>
    <p>ti c</p>
    <p>FIG: Fixed vs random t-tests against the simulated power consumption of masked ShiftRows. (Dotted lines indicate the 4.5 threshold for t-test significance).</p>
    <p>I Leakage found in the ELMO traces where expected.</p>
    <p>I Same test against real measurements closely matches.</p>
    <p>I Tying leakage to instructions (not clock cycles) degrades visual similarity but aids diagnosis.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 19 / 20</p>
  </div>
  <div class="page">
    <p>SUMMARY AND FURTHER WORK</p>
    <p>Achievement: We have presented a tool which. . .</p>
    <p>Is able to capture vulnerabilities in arbitrary code sequences. Replicates leakages that go undiscovered in simulations relying on standard assumptions such as the Hamming weight. Can be used in place of real measurements to pre-empt problems in the software development stage.</p>
    <p>Methodology generalises for use with different devices and side-channels.</p>
    <p>Possible applications: Automated insertion and testing of countermeasures.</p>
    <p>Optimisation of protected code with respect to energy efficiency.</p>
    <p>Available at https://github.com/bristol-sca/ELMO.</p>
    <p>C. WHITNALL (UNIVERSITY OF BRISTOL) SCA-AWARE SOFTWARE ENGINEERING USENIX 2017 20 / 20</p>
  </div>
</Presentation>
