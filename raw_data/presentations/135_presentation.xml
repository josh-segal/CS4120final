<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On the optimal compression of sets in PSPACE</p>
    <p>Marius Zimand</p>
    <p>Towson University</p>
    <p>FCT 2011, Oslo</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 1 / 16</p>
  </div>
  <div class="page">
    <p>This talk in one slide</p>
    <p>A - a set of n bit strings</p>
    <p>For each x  A we want a short fingerprint compress(x) that efficiently distingushes x from all other strings in A, i.e.,</p>
    <p>P(x,compress(x)) = YES, P(y,compress(x)) = NO, for all y  A{x} P poly. time algorithm.</p>
    <p>|compress(x)|  log |A=n| for some x  A (because each element needs a different fingerprint).</p>
    <p>MAIN RESULT: if A in PSPACE and a reasonable hardness assumption holds, there is an alg P with</p>
    <p>|compress(x)|  log |A=n| + O(log n)</p>
    <p>for all x  A.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 2 / 16</p>
  </div>
  <div class="page">
    <p>This talk in one slide</p>
    <p>A - a set of n bit strings</p>
    <p>For each x  A we want a short fingerprint compress(x) that efficiently distingushes x from all other strings in A, i.e.,</p>
    <p>P(x,compress(x)) = YES, P(y,compress(x)) = NO, for all y  A{x} P poly. time algorithm.</p>
    <p>|compress(x)|  log |A=n| for some x  A (because each element needs a different fingerprint).</p>
    <p>MAIN RESULT: if A in PSPACE and a reasonable hardness assumption holds, there is an alg P with</p>
    <p>|compress(x)|  log |A=n| + O(log n)</p>
    <p>for all x  A.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 2 / 16</p>
  </div>
  <div class="page">
    <p>This talk in one slide</p>
    <p>A - a set of n bit strings</p>
    <p>For each x  A we want a short fingerprint compress(x) that efficiently distingushes x from all other strings in A, i.e.,</p>
    <p>P(x,compress(x)) = YES, P(y,compress(x)) = NO, for all y  A{x} P poly. time algorithm.</p>
    <p>|compress(x)|  log |A=n| for some x  A (because each element needs a different fingerprint).</p>
    <p>MAIN RESULT: if A in PSPACE and a reasonable hardness assumption holds, there is an alg P with</p>
    <p>|compress(x)|  log |A=n| + O(log n)</p>
    <p>for all x  A.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 2 / 16</p>
  </div>
  <div class="page">
    <p>Stating the problem using Kolmogorov complexity</p>
    <p>If A is computably enumerable, then for every x  A</p>
    <p>C (x)  log |A=n| + O(log n)</p>
    <p>description of x: index of x in an enumeration of A=n.</p>
    <p>But enumeration is slow.</p>
    <p>We need a version of time-bounded Kolmogorov complexity</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 3 / 16</p>
  </div>
  <div class="page">
    <p>Distinguishing complexity [Sipser 83]</p>
    <p>Informal Definition</p>
    <p>CDt(x) = length of the shortest program that accepts x and only x and runs in t(|x|) time.</p>
    <p>Formal Definition</p>
    <p>CDt(x) = |p|, p is the shortest program such that</p>
    <p>U(p,x) = YES, U(p,y) = NO, for all y 6= x U(p,x) halts in t(|p| + |x|) steps</p>
    <p>(U is a universal Turing machine)</p>
    <p>CDt,A(x) - U uses oracle A.</p>
    <p>CNDt,A(x) - U is nondeterministic</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 4 / 16</p>
  </div>
  <div class="page">
    <p>Distinguishing complexity [Sipser 83]</p>
    <p>Informal Definition</p>
    <p>CDt(x) = length of the shortest program that accepts x and only x and runs in t(|x|) time.</p>
    <p>Formal Definition</p>
    <p>CDt(x) = |p|, p is the shortest program such that</p>
    <p>U(p,x) = YES, U(p,y) = NO, for all y 6= x U(p,x) halts in t(|p| + |x|) steps</p>
    <p>(U is a universal Turing machine)</p>
    <p>CDt,A(x) - U uses oracle A.</p>
    <p>CNDt,A(x) - U is nondeterministic</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 4 / 16</p>
  </div>
  <div class="page">
    <p>Distinguishing complexity [Sipser 83]</p>
    <p>Informal Definition</p>
    <p>CDt(x) = length of the shortest program that accepts x and only x and runs in t(|x|) time.</p>
    <p>Formal Definition</p>
    <p>CDt(x) = |p|, p is the shortest program such that</p>
    <p>U(p,x) = YES, U(p,y) = NO, for all y 6= x U(p,x) halts in t(|p| + |x|) steps</p>
    <p>(U is a universal Turing machine)</p>
    <p>CDt,A(x) - U uses oracle A.</p>
    <p>CNDt,A(x) - U is nondeterministic</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 4 / 16</p>
  </div>
  <div class="page">
    <p>What is known:</p>
    <p>[Buhrman, Fortnow, Laplante, 2001]: For any set A, for every x  A</p>
    <p>CDpoly,A(x)  2 log |A=n| + O(log n)</p>
    <p>[Buhrman, Laplante, Miltersen, 2000]: For some sets A, 2 is necessary.</p>
    <p>[Sipser, 1983] A,  advice w of length poly(n), x  A</p>
    <p>CDpoly,A(x | w)  log |A=n| + O(log n)</p>
    <p>[Buhrman, Lee, van Melkebeek, 2005] A, x  A</p>
    <p>CNDpoly,A(x)  log |A=n| + O((</p>
    <p>log |A=n| + log n) log n)</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 5 / 16</p>
  </div>
  <div class="page">
    <p>What is known:</p>
    <p>[Buhrman, Fortnow, Laplante, 2001]: For any set A, for every x  A</p>
    <p>CDpoly,A(x)  2 log |A=n| + O(log n)</p>
    <p>[Buhrman, Laplante, Miltersen, 2000]: For some sets A, 2 is necessary.</p>
    <p>[Sipser, 1983] A,  advice w of length poly(n), x  A</p>
    <p>CDpoly,A(x | w)  log |A=n| + O(log n)</p>
    <p>[Buhrman, Lee, van Melkebeek, 2005] A, x  A</p>
    <p>CNDpoly,A(x)  log |A=n| + O((</p>
    <p>log |A=n| + log n) log n)</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 5 / 16</p>
  </div>
  <div class="page">
    <p>What is known:</p>
    <p>[Buhrman, Fortnow, Laplante, 2001]: For any set A, for every x  A</p>
    <p>CDpoly,A(x)  2 log |A=n| + O(log n)</p>
    <p>[Buhrman, Laplante, Miltersen, 2000]: For some sets A, 2 is necessary.</p>
    <p>[Sipser, 1983] A,  advice w of length poly(n), x  A</p>
    <p>CDpoly,A(x | w)  log |A=n| + O(log n)</p>
    <p>[Buhrman, Lee, van Melkebeek, 2005] A, x  A</p>
    <p>CNDpoly,A(x)  log |A=n| + O((</p>
    <p>log |A=n| + log n) log n)</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 5 / 16</p>
  </div>
  <div class="page">
    <p>What is known:</p>
    <p>[Buhrman, Fortnow, Laplante, 2001]: For any set A, for every x  A</p>
    <p>CDpoly,A(x)  2 log |A=n| + O(log n)</p>
    <p>[Buhrman, Laplante, Miltersen, 2000]: For some sets A, 2 is necessary.</p>
    <p>[Sipser, 1983] A,  advice w of length poly(n), x  A</p>
    <p>CDpoly,A(x | w)  log |A=n| + O(log n)</p>
    <p>[Buhrman, Lee, van Melkebeek, 2005] A, x  A</p>
    <p>CNDpoly,A(x)  log |A=n| + O((</p>
    <p>log |A=n| + log n) log n)</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 5 / 16</p>
  </div>
  <div class="page">
    <p>Our result</p>
    <p>Theorem</p>
    <p>Assume DTIME [2O(n)] is not included in DSPACE [2o(n)].a</p>
    <p>For any set A in PSPACE, for every x  A</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n) aFor every , L in DTIME [2O(n)] such that any algorithm running in space 2n is</p>
    <p>wrong about L almost everywhere</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 6 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch(1)</p>
    <p>Setting: A in PSPACE, x is an n-bit string in A</p>
    <p>Let k = log |A=n|.</p>
    <p>If we would have poly-time E : {0, 1}n {0, 1}k that is 1-to-1 on A=n, then z = E (x) would distinguish x from the other strings in A.</p>
    <p>I dont know how to get such an E that avoids collisions for elements in A.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 7 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (2)</p>
    <p>We can afford a slack of O(log n) bits, so let us relax requirements for E .</p>
    <p>Try E : {0, 1}n {0, 1}log n {0, 1}k such that</p>
    <p>With some advice  of length O(log n), E is poly-time computable. Every string z {0,1}k has O(n) preimages in A{0,1}log n.</p>
    <p>Then z = E (x, 0log n) distingushes x from strings that do not map into z.</p>
    <p>Using [BFL2001], with additional 2 log n + O(1) bits, we can distinguish x from the at most O(n) strings that map into z.</p>
    <p>So, CDpoly,A(x)  |z| + || + 2 log n + 1 = k + O(log n) = log |A=n| + O(log n).</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 8 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (3)</p>
    <p>Our goal: E : {0, 1}n {0, 1}log n {0, 1}k such that With some advice  of length O(log n), E is poly-time computable.</p>
    <p>Every string z {0, 1}k has O(n) preimages in A{0, 1}log n.</p>
    <p>If we take a random E : {0, 1}n {0, 1}log n {0, 1}k , with high probability, every z {0, 1}k has at most 7n preimages.</p>
    <p>Problem: The table of E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 9 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (4)</p>
    <p>Problem: The table of random E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Solution: Derandomize in 2 steps.</p>
    <p>Step 1: Use a prg G1 that produces a good E for most seeds s of length poly(n).</p>
    <p>Step 2: Use a prg G2 that produces a good level-1 seed s from a level-2 seed  of length O(log n).</p>
    <p>good E</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 10 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (4)</p>
    <p>Problem: The table of random E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Solution: Derandomize in 2 steps.</p>
    <p>Step 1: Use a prg G1 that produces a good E for most seeds s of length poly(n).</p>
    <p>Step 2: Use a prg G2 that produces a good level-1 seed s from a level-2 seed  of length O(log n).</p>
    <p>good E</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 10 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (4)</p>
    <p>Problem: The table of random E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Solution: Derandomize in 2 steps.</p>
    <p>Step 1: Use a prg G1 that produces a good E for most seeds s of length poly(n).</p>
    <p>Step 2: Use a prg G2 that produces a good level-1 seed s from a level-2 seed  of length O(log n).</p>
    <p>good E</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 10 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (4)</p>
    <p>Problem: The table of random E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Solution: Derandomize in 2 steps.</p>
    <p>Step 1: Use a prg G1 that produces a good E for most seeds s of length poly(n).</p>
    <p>Step 2: Use a prg G2 that produces a good level-1 seed s from a level-2 seed  of length O(log n).</p>
    <p>good E</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 10 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (4)</p>
    <p>Problem: The table of random E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Solution: Derandomize in 2 steps.</p>
    <p>Step 1: Use a prg G1 that produces a good E for most seeds s of length poly(n).</p>
    <p>Step 2: Use a prg G2 that produces a good level-1 seed s from a level-2 seed  of length O(log n).</p>
    <p>good E</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 10 / 16</p>
  </div>
  <div class="page">
    <p>Proof sketch (4)</p>
    <p>Problem: The table of random E has size poly(2n), and we want advice of size only O(log n) to compute E in poly time.</p>
    <p>Solution: Derandomize in 2 steps.</p>
    <p>Step 1: Use a prg G1 that produces a good E for most seeds s of length poly(n).</p>
    <p>Step 2: Use a prg G2 that produces a good level-1 seed s from a level-2 seed  of length O(log n).</p>
    <p>good E</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 10 / 16</p>
  </div>
  <div class="page">
    <p>STEP 1: Getting a prg that hits abundantly the set of good tables E</p>
    <p>DEFINITION: A table E : {0, 1}n {0, 1}log n {0, 1}k is c-balanced if no string z {0, 1}k has more than c preimages in A=n {0, 1}log n. 90% of tables are 7n-balanced.</p>
    <p>[Ajtai1993] - Approximate counting can be done by poly size circuits of constant depth.</p>
    <p>We obtain a poly(2n)-size constant-depth circuit C that accepts all E that are 7n-balanced and rejects all E that are not 8n-balanced.</p>
    <p>Using the Nisan-Wigderson prg that fools constant-depth circuits, we obtain the prg G1 such that 80% of the seeds s hit the set of E s accepted by C .</p>
    <p>So for 80% of s, G1(s) is a table that is 8n-balanced.</p>
    <p>Good seed: an s such that G1(s) is 8n-balanced. 80% of s are good.</p>
    <p>E accepted by C</p>
    <p>(so, 8n-balanced)</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 11 / 16</p>
  </div>
  <div class="page">
    <p>STEP 1: Getting a prg that hits abundantly the set of good tables E</p>
    <p>DEFINITION: A table E : {0, 1}n {0, 1}log n {0, 1}k is c-balanced if no string z {0, 1}k has more than c preimages in A=n {0, 1}log n. 90% of tables are 7n-balanced.</p>
    <p>[Ajtai1993] - Approximate counting can be done by poly size circuits of constant depth.</p>
    <p>We obtain a poly(2n)-size constant-depth circuit C that accepts all E that are 7n-balanced and rejects all E that are not 8n-balanced.</p>
    <p>Using the Nisan-Wigderson prg that fools constant-depth circuits, we obtain the prg G1 such that 80% of the seeds s hit the set of E s accepted by C .</p>
    <p>So for 80% of s, G1(s) is a table that is 8n-balanced.</p>
    <p>Good seed: an s such that G1(s) is 8n-balanced. 80% of s are good.</p>
    <p>E accepted by C</p>
    <p>(so, 8n-balanced)</p>
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 11 / 16</p>
  </div>
  <div class="page">
    <p>STEP 2: Getting a prg that hits the set of good seeds</p>
    <p>So if s is good, G1(s) is a 8n-balanced E described by s.</p>
    <p>|E| = poly(2n), and s = poly(n). But we need a a description of size O(log n).</p>
    <p>Solution: Hit the set of good seeds with Impagliazzo-Wigderson prg.</p>
    <p>The set of good seeds is in PSPACE; using our assumption there is such a prg (Klivans, van Melkebeek2002).</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 12 / 16</p>
  </div>
  <div class="page">
    <p>STEP 2: Getting a prg that hits the set of good seeds</p>
    <p>So if s is good, G1(s) is a 8n-balanced E described by s.</p>
    <p>|E| = poly(2n), and s = poly(n). But we need a a description of size O(log n).</p>
    <p>Solution: Hit the set of good seeds with Impagliazzo-Wigderson prg.</p>
    <p>The set of good seeds is in PSPACE; using our assumption there is such a prg (Klivans, van Melkebeek2002).</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 12 / 16</p>
  </div>
  <div class="page">
    <p>|E| = poly(2n )</p>
    <p>good s</p>
    <p>|s| = poly(n)</p>
    <p>G1</p>
    <p>|| = O(log n)</p>
    <p>G2</p>
    <p>So, for some  of length O(log n), G2() is good.</p>
    <p>Then E = G1(G2()) is 8n-balanced.</p>
    <p>Each entry in the table E can be computed in poly(n) time.</p>
    <p>z = E (x, 0log n) distingushes x from strings that do not map into z.</p>
    <p>Using [BFL2001], with additional 2 log n + O(1) bits, we can distinguish x from the at most 8n strings that map into z.</p>
    <p>So,</p>
    <p>CDpoly,A(x)  |z| + || + 2 log n + 1 = k + O(log n) = log |A=n| + O(log n).</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 13 / 16</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>For any A in PSPACE, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n),</p>
    <p>assuming DTIME[2O(n)] is not in DSPACE[2o(n)]</p>
    <p>For any A in P, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n), x  A=n,</p>
    <p>assuming DTIME[2O(n)] is not in CIRCUIT-SIZE p 3 [2n]</p>
    <p>For any A in NP, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n),</p>
    <p>and CNDpoly(x)  log |A=n| + O(log n),</p>
    <p>assuming DTIME[2O(n)] is not in CIRCUIT-SIZE p 3 [2n]</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 14 / 16</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>For any A in PSPACE, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n),</p>
    <p>assuming DTIME[2O(n)] is not in DSPACE[2o(n)]</p>
    <p>For any A in P, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n), x  A=n,</p>
    <p>assuming DTIME[2O(n)] is not in CIRCUIT-SIZE p 3 [2n]</p>
    <p>For any A in NP, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n),</p>
    <p>and CNDpoly(x)  log |A=n| + O(log n),</p>
    <p>assuming DTIME[2O(n)] is not in CIRCUIT-SIZE p 3 [2n]</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 14 / 16</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>For any A in PSPACE, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n),</p>
    <p>assuming DTIME[2O(n)] is not in DSPACE[2o(n)]</p>
    <p>For any A in P, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n), x  A=n,</p>
    <p>assuming DTIME[2O(n)] is not in CIRCUIT-SIZE p 3 [2n]</p>
    <p>For any A in NP, x  A=n,</p>
    <p>CDpoly,A(x)  log |A=n| + O(log n),</p>
    <p>and CNDpoly(x)  log |A=n| + O(log n),</p>
    <p>assuming DTIME[2O(n)] is not in CIRCUIT-SIZE p 3 [2n]</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 14 / 16</p>
  </div>
  <div class="page">
    <p>How to show P 6= NP</p>
    <p>Find a set A such that</p>
    <p>(1) CDpoly,A(x)  2 log |A=n|, for some x  A (like [Buhrman,Laplante, Miltersen] )</p>
    <p>(2) CDpoly, p k A(x)  (2 ) log |A=n|, for all x  A</p>
    <p>Then,  p k 6= P.</p>
    <p>It is reasonable to try A in the Polynomial Hierarchy.</p>
    <p>But PH  PSPACE, so (1) will not succeed.</p>
    <p>So look for A outside PSPACE.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 15 / 16</p>
  </div>
  <div class="page">
    <p>How to show P 6= NP</p>
    <p>Find a set A such that</p>
    <p>(1) CDpoly,A(x)  2 log |A=n|, for some x  A (like [Buhrman,Laplante, Miltersen] )</p>
    <p>(2) CDpoly, p k A(x)  (2 ) log |A=n|, for all x  A</p>
    <p>Then,  p k 6= P.</p>
    <p>It is reasonable to try A in the Polynomial Hierarchy.</p>
    <p>But PH  PSPACE, so (1) will not succeed.</p>
    <p>So look for A outside PSPACE.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 15 / 16</p>
  </div>
  <div class="page">
    <p>How to show P 6= NP</p>
    <p>Find a set A such that</p>
    <p>(1) CDpoly,A(x)  2 log |A=n|, for some x  A (like [Buhrman,Laplante, Miltersen] )</p>
    <p>(2) CDpoly, p k A(x)  (2 ) log |A=n|, for all x  A</p>
    <p>Then,  p k 6= P.</p>
    <p>It is reasonable to try A in the Polynomial Hierarchy.</p>
    <p>But PH  PSPACE, so (1) will not succeed.</p>
    <p>So look for A outside PSPACE.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 15 / 16</p>
  </div>
  <div class="page">
    <p>Thank you.</p>
    <p>Marius Zimand (Towson U.) Compression PSPACE sets 2011 16 / 16</p>
  </div>
</Presentation>
