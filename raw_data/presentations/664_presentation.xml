<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exception-Less System Calls for Event-Driven Servers</p>
    <p>Livio Soares and Michael Stumm</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Talk overview  At OSDI'10: exception-less system calls</p>
    <p>Technique targeted at highly threaded servers  Doubled performance of Apache</p>
    <p>Event-driven servers are popular  Faster than threaded servers</p>
    <p>We show that exception-less system calls make event-driven server faster</p>
    <p>memcached speeds up by 25-35%memcached speeds up by 25-35%  nginx speeds up by 70-120%nginx speeds up by 70-120%</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Event-driven server architectures  Supports I/O concurrency with a single</p>
    <p>execution context  Alternative to thread based architectures</p>
    <p>At a high-level:  Divide program flow into non-blocking stages  After each stage register interest in event(s)  Notification of event is asynchronous, driving next</p>
    <p>stage in the program flow  To avoid idle time, applications multiplex execution</p>
    <p>of multiple independent stages</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Example: simple network server</p>
    <p>void server() { ... ... fd = accept(); ... ... read(fd); ... ... write(fd); ... ... close(fd); ... ...</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4</p>
    <p>S5</p>
    <p>S1</p>
    <p>Example: simple network server</p>
    <p>void server() { ... ... fd = accept(); ... ... read(fd); ... ... write(fd); ... ... close(fd); ... ...</p>
    <p>}</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
    <p>S4</p>
    <p>S5</p>
    <p>UNIX options:</p>
    <p>Non-blocking I/O poll() select() epoll()</p>
    <p>Async I/O</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Performance: events vs. threads</p>
    <p>nginx (events) Apache (threads)</p>
    <p>Concurrency</p>
    <p>R e</p>
    <p>q u</p>
    <p>e s</p>
    <p>ts /s</p>
    <p>e c</p>
    <p>.</p>
    <p>nginx delivers 1.7x the throughput of Apache; gracefully copes with high loads</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Issues with UNIX event primitives  Do not cover all system calls</p>
    <p>Mostly work with file-descriptors (files and sockets)  Overhead</p>
    <p>Tracking progress of I/O involves both application and kernel code</p>
    <p>Application and kernel communicate frequently</p>
    <p>Previous work shows that fine-grain mode switching can half processor efficiency</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>FlexSC component overview</p>
    <p>FlexSC and FlexSC-Threads presented at OSDI 2010</p>
    <p>This work: libflexsc for event-driven servers 1) memcached throughput increase of up to 35% 2) nginx throughput increase of up to 120%</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Benefits for event-driven applications</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Summary of exception-less syscalls</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Exception-less interface: syscall page</p>
    <p>write(fd, buf, 4096);</p>
    <p>entry = free_syscall_entry();</p>
    <p>/* write syscall *//* write syscall */ entry-&gt;syscall = 1; entry-&gt;num_args = 3; entry-&gt;args[0] = fd; entry-&gt;args[1] = buf; entry-&gt;args[2] = 4096; entry-&gt;status = SUBMITSUBMIT;</p>
    <p>whilewhile (entry-&gt;status != DONEDONE) do_something_else();</p>
    <p>returnreturn entry-&gt;return_code;</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Exception-less interface: syscall page</p>
    <p>write(fd, buf, 4096);</p>
    <p>entry = free_syscall_entry();</p>
    <p>/* write syscall *//* write syscall */ entry-&gt;syscall = 1; entry-&gt;num_args = 3; entry-&gt;args[0] = fd; entry-&gt;args[1] = buf; entry-&gt;args[2] = 4096; entry-&gt;status = SUBMITSUBMIT;</p>
    <p>whilewhile (entry-&gt;status != DONEDONE) do_something_else();</p>
    <p>returnreturn entry-&gt;return_code;</p>
    <p>SUBMITSUBMIT</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Exception-less interface: syscall page</p>
    <p>write(fd, buf, 4096);</p>
    <p>entry = free_syscall_entry();</p>
    <p>/* write syscall *//* write syscall */ entry-&gt;syscall = 1; entry-&gt;num_args = 3; entry-&gt;args[0] = fd; entry-&gt;args[1] = buf; entry-&gt;args[2] = 4096; entry-&gt;status = SUBMITSUBMIT;</p>
    <p>whilewhile (entry-&gt;status != DONEDONE) do_something_else();</p>
    <p>returnreturn entry-&gt;return_code;</p>
    <p>DONEDONE</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Syscall threads  Kernel-only threads</p>
    <p>Part of application process  Execute requests from syscall page  Schedulable on a per-core basis</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Dynamic multicore specialization</p>
    <p>Core 0</p>
    <p>Core 2</p>
    <p>Core 1</p>
    <p>Core 3</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>libflexsc: async syscall library  Async syscall and notification library</p>
    <p>Similar to libevent  But operates on syscalls instead of file-descriptors</p>
    <p>Three main components:</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Main API: async system call 1 struct flexsc_cb { 2 void (*callback)(struct flexsc_cb *); /* event handler */ 3 void *arg; /* auxiliary var */ 4 int64_t ret; /* syscall return */ 5 } 6 7 int flexsc_##SYSCALL(struct flexsc_cb *, ... /*syscall args*/); 8 /* Example: asynchronous accept */ 9 struct flexsc_cb cb; 10 cb.callback = handle_accept; 11 flexsc_accept(&amp;cb, master_sock, NULL, 0); 12 13 void handle_accept(struct flexsc_cb *cb) { 14 int fd = cb&gt;ret; 15 if (fd != 1) { 16 struct flexsc_cb read_cb; 17 read_cb.callback = handle_read; 18 flexsc_read(&amp;read_cb, fd, read_buf, read_count); 19 } 20 }</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>memcached port to libflexsc  memcached: in-memory key/value store</p>
    <p>Simple code-base: 8K LOC  Uses libevent</p>
    <p>Modified 293 LOC  Transformed libevent calls to libflexsc  Mostly in one file: memcached.c  Most memcached syscalls are socket based</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>nginx port to libflexsc  Most popular event-driven webserver</p>
    <p>Code base: 82K LOC  Natively uses both non-blocking (epoll) I/O and</p>
    <p>asynchronous I/O</p>
    <p>Modified 255 LOC  Socket based code already asynchronous  Not all file-system calls were asynchronous</p>
    <p>e.g., open, fstat, getdents</p>
    <p>Special handling of stack allocated syscall args</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Evaluation  Linux 2.6.33  Nehalem (Core i7) server, 2.3GHz</p>
    <p>4 cores  Client connected through 1Gbps network  Workloads</p>
    <p>memslap on memcached (30% user, 70% kernel)  httperf on nginx (25% user, 75% kernel)</p>
    <p>Default Linux (epoll) vs. libflexsc (flexsc)</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>memcached on 4 cores</p>
    <p>flexsc epoll</p>
    <p>Request Concurrency</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (r</p>
    <p>e q</p>
    <p>u e</p>
    <p>s ts</p>
    <p>/s e</p>
    <p>c .)</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>memcached processor metrics</p>
    <p>CPI L2</p>
    <p>d-cache i-cache</p>
    <p>CPI L2</p>
    <p>d-cache i-cache</p>
    <p>R e</p>
    <p>la ti</p>
    <p>v e</p>
    <p>P e</p>
    <p>rf o</p>
    <p>rm a</p>
    <p>n c</p>
    <p>e (f</p>
    <p>le x</p>
    <p>s c</p>
    <p>/e p</p>
    <p>o ll</p>
    <p>)</p>
    <p>User Kernel</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>httperf on nginx (1 core)</p>
    <p>flexsc epoll</p>
    <p>Requests/s</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>b p</p>
    <p>s )</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>nginx processor metrics</p>
    <p>CPI L2</p>
    <p>d-cache i-cache</p>
    <p>Branch CPI</p>
    <p>L2 d-cache</p>
    <p>i-cache Branch</p>
    <p>R e</p>
    <p>la ti</p>
    <p>v e</p>
    <p>P e</p>
    <p>rf o</p>
    <p>rm a</p>
    <p>n c</p>
    <p>e (f</p>
    <p>le xs</p>
    <p>c /e</p>
    <p>p o</p>
    <p>ll )</p>
    <p>User Kernel</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Concluding remarks  Current event-based primitives add overhead</p>
    <p>I/O operations require frequent communication between OS and application</p>
    <p>libflexsc: exception-less syscall library</p>
    <p>Performance improvements of 30 - 120%</p>
  </div>
  <div class="page">
    <p>Exception-Less System Calls for Event-Driven Servers</p>
    <p>Livio Soares and Michael Stumm</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Difference in improvements</p>
    <p>Server memcached nginx Frequency of syscalls</p>
    <p>(in instructions) 3,750 1,460</p>
    <p>Why does nginx improve more than memcached?</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Limitations  Scalability (number of outstanding syscalls)</p>
    <p>Interface: operations perform linear scan  Implementation: overheads of syscall threads</p>
    <p>non-negligible  Solutions</p>
    <p>Throttle syscalls at application or OS  Switch interface to scalable message passing  Provide exception-less versions of async I/O  Make kernel fully non-blocking</p>
  </div>
  <div class="page">
    <p>Livio Soares | Exception-Less System Calls for Event-Driven Servers</p>
    <p>Latency (ApacheBench)</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y</p>
    <p>( m</p>
    <p>s )</p>
  </div>
</Presentation>
