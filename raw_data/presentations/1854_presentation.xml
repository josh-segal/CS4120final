<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Hybrid Programming in Big Data</p>
    <p>Peng Wang1, Hong Jiang2, Xu Liu3, Jizhong Han1</p>
    <p>Institute of Information Engineering, Chinese Academy of Sciences1</p>
    <p>University of Nebraska-Lincoln2</p>
    <p>College of William and Mary3</p>
    <p>Presented at HotCloud 15</p>
    <p>July 2015</p>
  </div>
  <div class="page">
    <p>Diverse Programming models</p>
  </div>
  <div class="page">
    <p>Real-world Apps Require Multiple Phases</p>
    <p>Typical machine learning workflow</p>
    <p>Preprocessing Feature</p>
    <p>Extraction</p>
    <p>Model Training</p>
    <p>Model Evaluation</p>
    <p>Cleaning &amp; normalization</p>
    <p>Cleaning &amp; normalization</p>
    <p>Classification, regression, or ranking</p>
    <p>Optimizati on</p>
  </div>
  <div class="page">
    <p>Current Solutions</p>
    <p>Monolithic systems</p>
    <p>e.g., Hadoop</p>
    <p>HDFS</p>
    <p>MapReduce</p>
    <p>Hive Pig</p>
    <p>HDFS</p>
    <p>YARN</p>
    <p>MR Giraph Storm</p>
    <p>Same-Cluster-Sharing systems</p>
    <p>e.g., YARN, Mesos</p>
    <p>HDFS HDFS HDFS</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Model</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Related Work</p>
    <p>Conclusions &amp; Future Work</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Unified Data Space (UDS)</p>
    <p>Dryad Spark Pregel PowerGraph</p>
    <p>Transformer</p>
    <p>Dryad-based ** computation (e.g., Sort)</p>
    <p>Pregel-based ** computation (e.g., PageRank)</p>
  </div>
  <div class="page">
    <p>Hybrid Program Example</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>D</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>PageRank</p>
    <p>Sort</p>
    <p>// PowerGraph-based pagerank computation</p>
    <p>func pagerank(input, output, ...) { // PowerGraph interfaces ... prJob = NewGraphCompute(&quot;pagerank&quot;) prJob.Execute(input, output,...) } // Dryad-based sort computation</p>
    <p>func sort(input, output , ...) { // Dryad interfaces ... sortJob = NewDataflow(&quot;sort&quot;) sortJob.Execute(input, output, ) } // hybridization</p>
    <p>func main() { input = &quot;hdfs://dataset/input&quot; share = &quot;cache://dataset/share&quot; output = &quot;hdfs://dataset/output&quot; engine = NewEngine() engine.Start() pagerank(input, share, ...) sort(share, output, ...) engine.Stop() }</p>
  </div>
  <div class="page">
    <p>UDS: Unified Data Space</p>
    <p>Four-spheres: HDFS (input &amp; output), file (temporary data), cache (memory-based sharing), pipe (network communication)</p>
    <p>File-system like abstraction</p>
    <p>Access an object by URL (e.g., file://host:port/path/to/object)</p>
    <p>HDFS File Cache Pipe</p>
    <p>Unified Data Space</p>
    <p>Object</p>
  </div>
  <div class="page">
    <p>UDS: Unified Data Space (cont.)</p>
    <p>Operations: Read (URI) &amp; Write(URI)</p>
    <p>Microtask behavior: Read  Process  Write</p>
    <p>Statelessness &amp; Location independence</p>
    <p>Microtask communicate with each other via Sharing Unified Data Space</p>
    <p>HDFS File Cache Pipe</p>
    <p>Read Write</p>
    <p>Microtask</p>
    <p>Unified Data Space</p>
    <p>Object</p>
  </div>
  <div class="page">
    <p>Case Study: MapReduce</p>
    <p>m0</p>
    <p>m1</p>
    <p>r0</p>
    <p>r1</p>
    <p>A0</p>
    <p>B0</p>
    <p>A1</p>
    <p>B1</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>MapReduce dataflow</p>
    <p>A</p>
    <p>Read</p>
    <p>Write</p>
  </div>
  <div class="page">
    <p>Case Study: MapReduce</p>
    <p>A B</p>
    <p>HDFS</p>
    <p>input</p>
    <p>/</p>
    <p>output</p>
    <p>Cache</p>
    <p>share</p>
    <p>/</p>
    <p>HDFS</p>
    <p>input</p>
    <p>/</p>
    <p>output</p>
    <p>Cache</p>
    <p>share</p>
    <p>/</p>
    <p>A0 A1 B0 B1 A B</p>
    <p>HDFS</p>
    <p>input</p>
    <p>/</p>
    <p>output</p>
    <p>Cache</p>
    <p>share</p>
    <p>/</p>
    <p>A0 A1 B0 B1 A B C D</p>
    <p>m0</p>
    <p>m1</p>
    <p>r0</p>
    <p>r1</p>
    <p>MapRedue Tasks interact via UDS data object</p>
    <p>microtask</p>
    <p>Read</p>
    <p>Write</p>
  </div>
  <div class="page">
    <p>Hybrid Program Execution</p>
    <p>master Slave-1 Slave-2 Slave-3</p>
    <p>HDFS(Out-of-band)</p>
    <p>In-band sharing</p>
    <p>func main() { input = &quot;hdfs://dataset/input&quot; share = &quot;cache://dataset/share&quot; output = &quot;hdfs://dataset/output&quot; engine = NewEngine() engine.Start() pagerank(input, share, ...) sort(share, output, ...) engine.Stop() }</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Model</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Related Work</p>
    <p>Conclusions &amp; Future Work</p>
  </div>
  <div class="page">
    <p>UDS Implementation</p>
    <p>Developed by Go language</p>
    <p>UDS implementation  HDFS sphere is written by wrapping the libhdfs C library using the cgo</p>
    <p>tool in Go</p>
    <p>Other spheres are implemented by native go code</p>
    <p>Implement prototypes of existing programming models  Dryad, Spark, Pregel, and PowerGraph</p>
    <p>Each prototype requires less than 2K LOC</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>worker-1 worker-2</p>
    <p>disk</p>
    <p>NewWriter(cache://worker-1:port/data)</p>
    <p>NewWriter(file://worker-1:port/data)</p>
    <p>NewReader(cache://worker-1:port/data)</p>
    <p>NewReader(file://worker-1:port/data)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Model</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Related Work</p>
    <p>Conclusions &amp; Future Work</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Amazon EC2  50 m3.xlarge nodes</p>
    <p>Comparison with Hadoop 1.2.1 &amp; Spark (GraphX) 1.2</p>
    <p>Case study 1: Machine learning application  Principal Component Analysis (PCA) + Logistical Regression (LR)</p>
    <p>Generated dataset (45GB)</p>
    <p>Case study 2: Graph Analysis  PageRank + TopK</p>
    <p>Real-world graph dataset (twitter &amp; uk-2007)</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Inband outperforms out-of-band by 25% to 47%</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Transformer shows competing performance with GraphX</p>
    <p>Inband provides limited improvement over the out-of-band  Intermediate dataset is small</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Programming models (e.g., Spark+GraphX)  Spark/GraphX supports pre-defined graph parallel and data parallel</p>
    <p>operations on a common data structure (i.e., RDD)</p>
    <p>Transformer supports user-defined computations on the same physical dataset (i.e., file-like objects)</p>
    <p>Data sharing (e.g., Tachyon)  Tachyon is fast memory-based distributed file system</p>
    <p>Tachyon is efficient for inter-job data sharing</p>
    <p>In-band mechanism is designed for intra-job data sharing</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Work</p>
    <p>Conclusions  Propose a common runtime unifies diverse programming models</p>
    <p>Develop a hybrid programming system with promising performance</p>
    <p>In-band sharing mechanism improves performance without sacrificing productivity</p>
    <p>Future Work</p>
    <p>Integrate more existing programming models</p>
    <p>Extend Transformer with transparent fault tolerance for hybrid programming</p>
    <p>Improve the performance and scalability of hybrid programming</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
  </div>
</Presentation>
