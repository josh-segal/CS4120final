<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Andrei Homescu Michael Stewart</p>
    <p>Stefan Brunthaler Per Larsen</p>
    <p>Michael Franz University of California Irvine</p>
  </div>
  <div class="page">
    <p>Return-oriented Programming</p>
    <p>... OPEN RETURN</p>
    <p>Gadget 1 Simplified ROP jailbreak attack</p>
    <p>S ta</p>
    <p>ck g</p>
    <p>ro w</p>
    <p>th</p>
    <p>... CONNECTION RETURN</p>
    <p>Gadget 2</p>
    <p>... TO THE RETURN</p>
    <p>Gadget 3</p>
    <p>... WHITEHOUSE RETURN</p>
    <p>Gadget 4</p>
    <p>... ADD EAX, EBX</p>
    <p>POP EBP RETURN</p>
    <p>Gadget 3</p>
  </div>
  <div class="page">
    <p>Return-oriented Programming  Original version: hand-picked set of gadgets from libc; downside: specific to library (Debian 5 libc)</p>
    <p>Later work uses automated scanners:  Scan for 1-instruction gadgets  Match using expression trees  Use postconditions  Formulate gadget outputs as boolean functions</p>
    <p>SMT solver</p>
  </div>
  <div class="page">
    <p>Complicated Gadgets  More than one instruction per gadget</p>
    <p>Complex instruction operands (memory offsets, immediates)</p>
    <p>Interference between instructions</p>
  </div>
  <div class="page">
    <p>Gadget Examples ADD EAX, [EBX+0x35CFE022] 03 83 22 E0 CF 35</p>
    <p>LEA EAX, [EBX+2*EAX+0x20] 8D 44 43 20</p>
    <p>INC [0x98560F0E] FF 05 0E 0F 56 98</p>
    <p>ADD EAX, EBX INC EAX</p>
    <p>ADD EAX, 0x20 POP EBP</p>
  </div>
  <div class="page">
    <p>Goals for Our Gadget Set  Ubiquity</p>
    <p>In as many binaries as possible</p>
    <p>Computational Power  Turing-complete</p>
    <p>Simplicity 6</p>
  </div>
  <div class="page">
    <p>Key Insight for Ubiquity</p>
    <p>Smaller gadgets occur</p>
    <p>more frequently</p>
  </div>
  <div class="page">
    <p>Microgadget Set  Focus on very small gadgets (2-3 bytes)  Grouped into classes, by operation  1 instruction + RET in each gadget</p>
    <p>Expectation: find this set very frequently in large binaries (ubiquity)</p>
  </div>
  <div class="page">
    <p>Smallest Gadget</p>
    <p>RET</p>
    <p>C3 9</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>AFack example</p>
    <p>load addr of mmap into reg</p>
    <p>Gadget 1</p>
    <p>arg 1</p>
    <p>S ta</p>
    <p>ck g</p>
    <p>ro w</p>
    <p>th</p>
    <p>load return ESP into EBP</p>
    <p>Gadget 2</p>
    <p>PUSH reg RET</p>
    <p>Gadget 3</p>
    <p>LEAVE RET</p>
    <p>Gadget 4</p>
    <p>arg 2</p>
    <p>arg 3</p>
    <p>arg 4</p>
    <p>arg 5</p>
    <p>arg 6 load word of payload</p>
    <p>Gadget 5</p>
    <p>STOSD RET</p>
    <p>Gadget 6</p>
    <p>...</p>
    <p>PUSH EAX RET</p>
    <p>Gadget N</p>
    <p>No ASLR!</p>
  </div>
  <div class="page">
    <p>For ASLR-proof mmap call: just add given value to ESP</p>
  </div>
  <div class="page">
    <p>ROP$program$ code</p>
    <p>True(addressFalse(addressmore$code False(case(</p>
    <p>code</p>
    <p>CF 10</p>
    <p>more$code True(case( code</p>
    <p>Condi3onal$ branch</p>
    <p>pointer$to$address$table</p>
    <p>CondiIonal Branches  Needed for Turing-completeness; tricky  Supported operation: branch if A &lt; B  Addition/subtraction =&gt; CF =&gt; branch  Branch target is loaded from a table</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Turing-completeness  Model implements subneg variant of OISC (one- instruction set computer)</p>
    <p>Only needed 3 operations:  Subtraction  Less-than comparison  Conditional branching</p>
    <p>subneg and subleq are known to be Turing-complete  Bonus operations:</p>
    <p>Addition  Boolean operations  Extra memory load/stores</p>
  </div>
  <div class="page">
    <p>EvaluaIon Distribution</p>
    <p>Total binaries</p>
    <p>All no XCHG c-mode</p>
    <p>XCHG c-mode</p>
    <p>no XCHG i-mode</p>
    <p>XCHG i-mode</p>
    <p>mmap no ASLR</p>
    <p>mmap ASLR</p>
    <p>Kubuntu 7.10</p>
    <p>Ubuntu 9.04</p>
    <p>Ubuntu 10.04</p>
    <p>Kubuntu 11.10</p>
  </div>
  <div class="page">
    <p>AFack Example</p>
    <p>load addr of mmap into reg</p>
    <p>Gadget 1</p>
    <p>arg 1</p>
    <p>S ta</p>
    <p>ck g</p>
    <p>ro w</p>
    <p>th</p>
    <p>copy ESP to EBP</p>
    <p>Gadget 2</p>
    <p>PUSH reg RET</p>
    <p>Gadget 4</p>
    <p>LEAVE RET</p>
    <p>Gadget 5</p>
    <p>arg 2</p>
    <p>arg 3</p>
    <p>arg 4</p>
    <p>arg 5</p>
    <p>arg 6 load word of payload</p>
    <p>Gadget 6</p>
    <p>STOSD RET</p>
    <p>Gadget 7</p>
    <p>...</p>
    <p>PUSH EAX RET</p>
    <p>Gadget N</p>
    <p>add offset to EBP</p>
    <p>Gadget 3</p>
  </div>
  <div class="page">
    <p>Conclusion - Goals  Ubiquity</p>
    <p>In as many binaries as possible</p>
    <p>Simplicity</p>
    <p>Computational Power  Turing-complete</p>
  </div>
  <div class="page">
    <p>Future Work  Make classes larger  Port to 64 bits: not trivial!  Extend model to other return/jump instructions</p>
    <p>Measure probability of binary from given distribution to contain microgadgets  Build distribution of n-grams in binaries</p>
  </div>
  <div class="page"/>
</Presentation>
