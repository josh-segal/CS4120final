<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Revisiting Concurrency in High-Performance NoSQL Databases</p>
    <p>Yuvraj Patel1, Mohit Verma2, Andrea C. Arpaci-Dusseau1, Remzi H. Arpaci-Dusseau1</p>
    <p>University of Wisconsin-Madison1, NVIDIA2</p>
  </div>
  <div class="page">
    <p>Technological changes</p>
    <p>Faster storage devices</p>
    <p>More processing power available per node</p>
    <p>DRAM NVM SSD HDD</p>
    <p>Read Latency 100-200 ns 500ns-2us 20-50 us 5-10ms</p>
    <p>Write Bandwidth 20-50 GB/sec 5-10 GB/s per die 200-500 MB/s 50-100 MB/sec</p>
    <p>Year 2006 2010 2014 2019</p>
    <p># of cores 2 8 32-64 128</p>
  </div>
  <div class="page">
    <p>Concurrency control</p>
    <p>Concurrency control  Act of coordinating concurrent accesses</p>
    <p>Key to scaling  Decades worth of effort</p>
    <p>Optimistic concurrency control  Adaptive concurrency control  Many other ways..</p>
    <p>Shared Data</p>
    <p>Threads</p>
    <p>Uncoordinated access</p>
    <p>Threads</p>
    <p>Coordinated access</p>
    <p>Concurrency control</p>
    <p>Correctness??? Shared</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>Key Question</p>
    <p>Concurrency control designed based on older technology  Very few cores  Hard disk</p>
    <p>Is concurrency control a bottleneck?  Can current techniques work well with newer technological changes?  Is it time to revisit concurrency control?</p>
  </div>
  <div class="page">
    <p>Answer  Quantitative study</p>
    <p>We study performance scaling of 5 popular systems  MongoDB, Cassandra, CouchDB, ArangoDB, Oracle NoSQL DB</p>
    <p>Measure actual and zero-contention concurrency control(ZCCC) scaling performance on single node Observation</p>
    <p>No system scales well  Presence of faster storage device does not help  Difference between ZCCC and Actual is more than 3X</p>
  </div>
  <div class="page">
    <p>Answer  Qualitative study</p>
    <p>Qualitative study of techniques used by these systems  Categorize to understand weaknesses</p>
    <p>Thread Architecture, Batching, Granularity, Partitioning, Scheduling, Low-level efficiency</p>
    <p>Observations  Batching, Thread Architecture  Used by all  Partitioning, Scheduling not used efficiently for scaling  Scope for improvement to optimize common cases</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
    <p>We present Xyza  an extension of MongoDB  Concentrate on Partitioning, Scheduling &amp; Low-level efficiency  Per client and key-space partitioning  Two novel scheduling techniques</p>
    <p>Contention-aware scheduling &amp; Semantic-aware scheduling  Optimize common cases using atomics</p>
    <p>Performance  2X to 3X faster than MongoDB  Xyza single instance performance 0.8X-0.9X that of ZCCC performance</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Concurrency Analysis  Xyza Design  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Saturation</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (o</p>
    <p>ps /s</p>
    <p>ec )</p>
    <p>Workload Capacity</p>
    <p>Performance increases linearly as the workload increases Saturates once the cpu/disk/network/memory exhausts</p>
    <p>Zero-contention concurrency control(ZCCC)</p>
  </div>
  <div class="page">
    <p>Concurrent application</p>
    <p>Todays concurrent application architecture</p>
    <p>Clients connect to server  Application  multithreaded  Multi/Many processing cores  One or more disks  Memory</p>
    <p>Multi-threaded application</p>
    <p>C1 C2 C3 C4</p>
    <p>Clients</p>
    <p>Multi-core processing</p>
    <p>Disks</p>
  </div>
  <div class="page">
    <p>Identify zero-contention concurrency control</p>
    <p>For ZCCC,  Hypothesis - Less contention of</p>
    <p>resources by perfectly partitioning</p>
    <p>How to reduce contention of resources?</p>
    <p>Instantiate multiple instances of the same application</p>
    <p>CPU/disk/memory/network still stressed</p>
    <p>C1 C2 C3 C4</p>
    <p>Clients</p>
    <p>Multi-core processing</p>
    <p>Disks</p>
    <p>Multi-threaded application</p>
  </div>
  <div class="page">
    <p>Actual vs ZCCC</p>
    <p>Why writes?  Modify global structures frequently  Hard to scale</p>
    <p>Why weakest consistency option?  Designed to achieve high performance</p>
    <p>Workload  50M key-value pair inserts, value - 100 bytes</p>
    <p>Setup  2 socket 8-core hyperthreaded, 1 480 GB SSD, 128 GB RAM, 10Gbps N/w</p>
  </div>
  <div class="page">
    <p>Results - MongoDB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>ZCCC</p>
    <p>Disk b/w ranges 26-350 MB/s CPU utilization ranges 6-90 %</p>
    <p>Near zero contention helps in scaling performance</p>
  </div>
  <div class="page">
    <p>Results - MongoDB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance ZCCC CPU utilization increases even</p>
    <p>though throughput is saturated pointing to resource contention</p>
    <p>Disk b/w ranges 25-130 MB/s CPU utilization ranges 6-85 %</p>
    <p>Near zero contention helps in scaling performance</p>
    <p>Disk b/w ranges 26-350 MB/s CPU utilization ranges 6-90 %</p>
  </div>
  <div class="page">
    <p>Results  Cassandra</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance ZCCC (2 instances)</p>
  </div>
  <div class="page">
    <p>Results  Oracle NoSQL DB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance</p>
    <p>ZCCC (10 instances)</p>
  </div>
  <div class="page">
    <p>Results  CouchDB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance ZCCC</p>
  </div>
  <div class="page">
    <p>Results  ArangoDB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance ZCCC</p>
  </div>
  <div class="page">
    <p>Categorization</p>
    <p>Study 5 systems qualitatively  Analyze code, design and architecture documents  Categorize the techniques - Understand the weaknesses</p>
    <p>efficiency (Read the paper)</p>
    <p>Observation  Partitioning and Scheduling not used efficiently  Scope to improve common cases performance</p>
  </div>
  <div class="page">
    <p>Analysis - Summary</p>
    <p>Quantitative study shows  Resource competition kills actual performance  ZCCC performance scales as hypothesized  Storage and Network not a bottleneck</p>
    <p>Qualitative study shows  Partitioning &amp; Scheduling not used efficiently  There is a need to optimize for common cases</p>
    <p>Systems designed for slow-storage media than faster devices</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Concurrency Analysis  Xyza Design  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Xyza Design</p>
    <p>Xyza  extension of MongoDB Why MongoDB</p>
    <p>Certain design ideas useful for Xyza  Scope for improvements  Popular and heavily used</p>
    <p>Xyza design concentrated on partitioning, scheduling and low-level efficiency</p>
  </div>
  <div class="page">
    <p>MongoDB architecture</p>
    <p>V</p>
    <p>J</p>
    <p>Key-Space</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>MongoDBs concurrency architecture diagram Global Shared Data</p>
  </div>
  <div class="page">
    <p>MongoDB architecture problems</p>
    <p>V</p>
    <p>J</p>
    <p>Key-Space</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>MongoDBs concurrency architecture diagram Global Shared Data</p>
  </div>
  <div class="page">
    <p>Xyza - Partitioning</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>Key-Space</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Xyzas concurrency architecture diagram Per client data Take advantage</p>
    <p>of per client thread</p>
    <p>Exclusive access</p>
  </div>
  <div class="page">
    <p>Xyza - Partitioning</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>K1 K2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Xyzas concurrency architecture diagram Per client data Take advantage</p>
    <p>of per client thread</p>
    <p>Exclusive access</p>
    <p>Key-space partitioning facilitates execution of non-overlapping operations</p>
  </div>
  <div class="page">
    <p>Xyza - Partitioning</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>K1 K2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Xyzas concurrency architecture diagram Per client data Take advantage</p>
    <p>of per client thread Exclusive</p>
    <p>access</p>
    <p>Key-space partitioning facilitates execution of non-overlapping operations</p>
    <p>Thread Pinning</p>
  </div>
  <div class="page">
    <p>Xyza  Contention-aware scheduling</p>
    <p>Xyzas concurrency architecture diagram</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>KS1 KS2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Pinned Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Partitioned Data S c h e d u l i n g</p>
    <p>Locks/partition as resource</p>
    <p>Exclusive access per key-space partition</p>
    <p>Execute operations that will not contend for same resources</p>
    <p>Overlapping operations wait</p>
    <p>Scheduling - form of primitive synchronization</p>
  </div>
  <div class="page">
    <p>Xyza scheduling example  No conflict</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>KS1 KS2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Pinned Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Partitioned Data S c h e d u l i n g</p>
    <p>Key:1 Value:1</p>
    <p>Different partition access</p>
  </div>
  <div class="page">
    <p>Xyza scheduling example  No conflict</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>KS1 KS2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Pinned Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Partitioned Data S c h e d u l i n g</p>
    <p>Key:1 Value:1</p>
    <p>Key:10 Value:2</p>
    <p>Different partition access</p>
  </div>
  <div class="page">
    <p>Xyza scheduling example - Conflict</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>KS1 KS2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Pinned Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Partitioned Data S c h e d u l i n g</p>
    <p>Key:1 Value:1</p>
    <p>Same partition access</p>
  </div>
  <div class="page">
    <p>Xyza scheduling example - Conflict</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>KS1 KS2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Pinned Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Partitioned Data S c h e d u l i n g</p>
    <p>Key:1 Value:1</p>
    <p>Key:2 Value:2</p>
    <p>Second operation waits for the first one to complete</p>
    <p>Same partition access</p>
  </div>
  <div class="page">
    <p>Xyza - Semantic-aware scheduling</p>
    <p>V1 V2</p>
    <p>J1 J2</p>
    <p>KS1 KS2</p>
    <p>Cache</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Pinned Per Client thread Vector</p>
    <p>Journal</p>
    <p>B-tree (per collection)</p>
    <p>Disk</p>
    <p>Clients Checkpointing, Logging thread</p>
    <p>Partitioned Data S c h e d u l i n g</p>
    <p>Key:1 Value:1</p>
    <p>Key:2 Value:2</p>
    <p>Second operation waits for the first one to complete</p>
    <p>Same partition access</p>
    <p>What can be done when the operation waits for its turn?</p>
    <p>Semantic-aware scheduling is the answer (Read the paper)</p>
  </div>
  <div class="page">
    <p>Xyza  Low-level efficiency</p>
    <p>MongoDB  Use atomics internally  Lock manager for multiple-granularity</p>
    <p>locking</p>
    <p>Xyza  Lock manager replaced</p>
    <p>Simple wait-signal mechanism  Optimize common case</p>
    <p>Mutex locks heavy compared to atomics  Bypass mutex - Instead use atomics</p>
    <p>Databases</p>
    <p>Collections</p>
    <p>Documents</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Concurrency Analysis  Xyza Design  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance ZCCC MongoDB Xyza</p>
    <p>Disk b/w ranges 25-280 MB/s CPU utilization ranges 6-78%</p>
    <p>*Same workload &amp; setup as earlier</p>
    <p>Partitioning and efficient scheduling helps reduce contention</p>
  </div>
  <div class="page">
    <p>Evaluation  contention reduction</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>ZCCC MongoDB</p>
  </div>
  <div class="page">
    <p>Evaluation  contention reduction</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>ZCCC MongoDB Single Instance MongoDB</p>
  </div>
  <div class="page">
    <p>Evaluation  contention reduction</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance Mongo_PCDB ZCCC MongoDB Single Instance MongoDB</p>
    <p>*PCDB  Per Client Database</p>
    <p>Lock manager stressed even when contention reduced</p>
  </div>
  <div class="page">
    <p>Evaluation  contention reduction</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>No. of Clients</p>
    <p>Single Instance Mongo_PCDB ZCCC MongoDB Xyza_PCDB</p>
    <p>*PCDB  Per Client Database</p>
    <p>Less resource contention  key to scaling</p>
    <p>Optimizing common case helps scaling</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Concurrency Analysis  Xyza Design  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Todays NoSQL DBs do not scale well despite the presence of faster storage medium and high processing capacity We present Xyza that scales well and comes close to ZCCC performance Time to revisit concurrency and consider aggressive concurrency mechanisms The proposed techniques can be applied in many other systems</p>
    <p>.WXYZAB. 7/10/2018 42</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
</Presentation>
