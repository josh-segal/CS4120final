<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>B L I S S</p>
    <p>Simultaneously Improving</p>
    <p>Code Size, Performance, &amp; Energy</p>
    <p>in Embedded Processors</p>
    <p>Ahmad Zmily and Christos Kozyrakis</p>
    <p>Electrical Engineering Department</p>
    <p>Stanford University</p>
    <p>{zmily,kozyraki}@stanford.edu</p>
  </div>
  <div class="page">
    <p>Efficiency Metrics for Embedded CPUsEfficiency Metrics for Embedded CPUs</p>
    <p>High performance</p>
    <p>To meet soft or hard real-time constraints  Increasing demands from emerging applications</p>
    <p>Low energy consumption</p>
    <p>Determines battery life-time  Critical for portable and deeply-embedded systems</p>
    <p>Low code size</p>
    <p>Determines cost of program storage devices  Flash, ROM, instruction RAM/caches</p>
    <p>A major cost component for the overall system</p>
    <p>M o ti v a ti o n</p>
  </div>
  <div class="page">
    <p>Code Size TradeCode Size Trade--offsoffs</p>
    <p>16-bit instructions</p>
    <p>Better code size, worse performance &amp; energy than 32-bit code</p>
    <p>Selective use of 16-bit instructions</p>
    <p>Better code size, same performance &amp; energy as 32-bit code</p>
    <p>This talk: can we improve all three simultaneously?</p>
    <p>M o ti v a ti o n</p>
    <p>Code Size Execution Time Total Energy</p>
  </div>
  <div class="page">
    <p>BLISS Instruction Set BLISS Instruction Set B L IS S O v e rv ie w</p>
    <p>BLISS = Block-aware Instruction Set</p>
    <p>Explicit basic block descriptors (BBDs)</p>
    <p>Stored separately from instructions in the text segment  Describe control flow and identify associated instructions</p>
    <p>Execution model</p>
    <p>PC always points to a BBD, not to instructions  Atomic execution of basic blocks</p>
    <p>Instructions Instructions</p>
    <p>Block Descriptors</p>
    <p>Conventional ISA BLISS ISA</p>
    <p>Text Segment</p>
  </div>
  <div class="page">
    <p>Type: type of terminating control-flow instruction  Fall-through, jump, jump register, branch, call, return</p>
    <p>Offset: displacement for PC-relative branches and jumps  Offset to target basic block descriptor</p>
    <p>Length: number of instruction in the basic block  0 to 15 instructions</p>
    <p>Instruction pointer: address of the first instruction in the block  Remaining bits from TLB</p>
    <p>Size: indicate the encoding size of instructions in the block</p>
    <p>16-bit encoding or 32-bit encoding</p>
    <p>B L IS S O v e rv ie w</p>
  </div>
  <div class="page">
    <p>BLISS Decoupled FrontBLISS Decoupled Front--EndEnd B L IS S O v e rv ie w</p>
    <p>BTB replaced by cache for block descriptors</p>
    <p>Decoupled descriptors fetch from instruction fetch</p>
  </div>
  <div class="page">
    <p>BLISS Performance &amp; EnergyBLISS Performance &amp; Energy</p>
    <p>Higher performance</p>
    <p>Better branch prediction using software-defined info  L2 stores descriptors, better use of direction predictors, tolerate</p>
    <p>I-cache latency,</p>
    <p>I-cache prefetching using info in block descriptors</p>
    <p>Lower energy consumption</p>
    <p>Energy saved by reducing mispredicted instructions  Judicious access to I-cache using software-define info</p>
    <p>Merge accesses to sequential blocks, serial tag/data access,</p>
    <p>read needed words only,</p>
    <p>See [ISLPED05][EUROPAR05] for details</p>
    <p>B L IS S O v e rv ie w</p>
  </div>
  <div class="page">
    <p>BLISS Code Size BLISS Code Size</p>
    <p>Nave code generation</p>
    <p>10-20% code size increase compared to 32-bit RISC!  A block descriptor per 5 to 10 instructions</p>
    <p>Basic code size optimizations</p>
    <p>All jump instruction are removed  BBD defines both control-flow type and the offset</p>
    <p>Many conditional branches can be removed  Simple condition test encoded in the producing opcode</p>
    <p>Branch target is provided by the block descriptor</p>
    <p>B L IS S C o d e S iz e</p>
  </div>
  <div class="page">
    <p>Block Block SubsettingSubsetting OptimizationOptimization</p>
    <p>Idea: duplicate descriptors but never instructions</p>
    <p>Eliminate all instruction in a block if exact sequence found elsewhere in the binary</p>
    <p>Adjust instruction pointer in block descriptor</p>
    <p>B L IS S C o d e S iz e</p>
  </div>
  <div class="page">
    <p>Efficient 16Efficient 16--bit/32bit/32--bit Code Interleavingbit Code Interleaving</p>
    <p>MIPS16: interleaving at function-level</p>
    <p>JALX instruction is used to switch between functions  But functions include both perf. critical &amp; non-critical code</p>
    <p>Thumb-2, rISA: instruction-level interleaving</p>
    <p>A couple of instructions per switch  Can switch encoding at arbitrary points</p>
    <p>BLISS: basic block interleaving</p>
    <p>A block is either fully perf. critical or fully non-critical  Descriptor indicates the encoding size for each block  No other overhead/instructions for switch</p>
    <p>B L IS S C o d e S iz e</p>
  </div>
  <div class="page">
    <p>Evaluation SummaryEvaluation Summary</p>
    <p>adpcm epic g721 gsm jpeg mesa mpeg pegwit pgp rasta Average</p>
    <p>C o m p re s s io n R a ti o</p>
    <p>Basic-Optimizations Block-Subset 32-16 Blocks Block-Subset + 32-16 Blocks</p>
    <p>E v a lu a ti o n</p>
    <p>Up to 60% average compression ratio</p>
    <p>For mediabench applications</p>
    <p>Performance &amp; energy for Xscale PXA270</p>
    <p>+10% performance, -20% total energy, see paper for details  Similar results for high-end embedded CPUs</p>
    <p>IBM PowerPC 750GX</p>
  </div>
  <div class="page">
    <p>Code Size StatisticsCode Size Statistics E v a lu a ti o n</p>
    <p>Number of</p>
    <p>extra</p>
    <p>inst</p>
    <p>Added</p>
    <p>% inst</p>
    <p>Converted</p>
    <p>to 16-bit</p>
    <p>Inst.</p>
    <p>eliminated # BB</p>
    <p>J/B inst.</p>
    <p>Removed</p>
    <p>Code Size</p>
    <p>(kb)</p>
    <p>Selective</p>
    <p>Block</p>
    <p>Subset</p>
    <p>BLISS basic</p>
    <p>Optimization MIPS32</p>
    <p>Benchmark</p>
  </div>
  <div class="page">
    <p>BLISS Vs. Selective 16BLISS Vs. Selective 16--bit codebit code</p>
    <p>Code Size Execution Time Total Energy</p>
    <p>E ff ic ie n c y</p>
    <p>Selective 16-bit code BLISS code</p>
    <p>E v a lu a ti o n</p>
    <p>BLISS achieves similar code size reduction with  10% performance improvement  21% total energy improvement</p>
  </div>
  <div class="page">
    <p>ConclusionsConclusions C o n c lu s io n s</p>
    <p>BLISS: a block-aware instruction set</p>
    <p>Defines basic block descriptors separate from instructions  Expressive ISA to communicate software info and hints</p>
    <p>Enabled code optimizations</p>
    <p>Eliminate redundant jump and branch instructions  Remove blocks which appear elsewhere in the code  Interleaving 16-bit &amp; 32-bit code at basic-block level without overhead</p>
    <p>Improved code size and energy consumption and performance:</p>
    <p>40% code size reduction  10% performance improvement  21% reduction in total energy consumption</p>
  </div>
</Presentation>
