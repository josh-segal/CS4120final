<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Shiqin Yan, Huaicheng Li, Mingzhe Hao, Michael Hao Tong, Swaminathan Sundararaman*,</p>
    <p>Andrew Chien, and Haryadi S. Gunawi</p>
    <p>ceres.cs.uchicago.edu</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>if your read is stuck behind an erase you may have wait 10s of milliseconds. Thats a 100x increase in latency variance</p>
    <p>The Tail at Scale [CACM13] http://www.zdnet.com/article/why-ssds-dont-perform/</p>
    <p>https://storagemojo.com/2015/06/03/why-its-hard-to-meet-slas-with-ssds/</p>
  </div>
  <div class="page">
    <p>Reads + Writes</p>
    <p>Clean/Empty SSD</p>
    <p>Time</p>
    <p>R ea</p>
    <p>d La</p>
    <p>te nc</p>
    <p>y</p>
    <p>Convert to CDF</p>
    <p>Read Latency</p>
    <p>Pe rc</p>
    <p>en ti le</p>
    <p>NoGC</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>Reads + Writes</p>
    <p>SSD 80%</p>
    <p>Read Latency</p>
    <p>NoGC</p>
    <p>with GC</p>
    <p>Pe rc</p>
    <p>en ti le</p>
    <p>Time</p>
    <p>R ea</p>
    <p>d La</p>
    <p>te nc</p>
    <p>y</p>
    <p>TTFlash @ FAST17</p>
    <p>Long tail !</p>
    <p>Objective: cut tail</p>
  </div>
  <div class="page">
    <p>Read A</p>
    <p>BA</p>
    <p>B</p>
    <p>delayed!</p>
    <p>A GC moves tens of valid pages!</p>
    <p>which makes channel/chips busy for tens of ms !</p>
    <p>fast C ha</p>
    <p>nn el</p>
    <p>Chip</p>
  </div>
  <div class="page">
    <p>RAID:</p>
    <p>Full Stripe Read</p>
    <p>Tail-tolerant techniques in distributed/storage systems: Leverage redundancy to cut tail!</p>
    <p>C = XOR (A, B, P)</p>
    <p>fast tail!</p>
    <p>A CB</p>
    <p>Slow / busy</p>
    <p>A PB C</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>SSD:</p>
    <p>Error rate increases  RAIN (Redundant Array of Independent NAND) Similarly, we leverage RAIN to cut tails!</p>
    <p>Full Stripe Read</p>
    <p>C = XOR (B, C, P)</p>
    <p>A CB</p>
    <p>slow!fast</p>
    <p>A B C P</p>
    <p>GC</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>I. Plane-Blocking GC</p>
    <p>II. GC-Tolerant Read</p>
    <p>III. Rotating GC</p>
    <p>IV. GC-Tolerant Flush</p>
    <p>RAIN (Parity-based Redundancy)</p>
    <p>Current SSD technology:</p>
    <p>New techniques:</p>
  </div>
  <div class="page">
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>Latency</p>
    <p>NoGC</p>
    <p>+Plane -Block</p>
    <p>ing +GC-Tolerant Read</p>
    <p>+Rotating GC</p>
  </div>
  <div class="page">
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>Latency</p>
    <p>Tiny tail</p>
    <p>!</p>
    <p>TTFlash @ FAST17</p>
    <p>Between 99 - 99.99th percentiles:</p>
    <p>ttFlash 1-3x slower than NoGC Base 5-138x slower than NoGC</p>
    <p>Overall results achieved:</p>
  </div>
  <div class="page">
    <p>q Introduction q Background q Tiny-Tail Flash Design q Evaluation, limitations, conclusion</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>Chip Die [0]</p>
    <p>Plane[0]</p>
    <p>Die [1]</p>
    <p>Chip</p>
    <p>Plane[N]</p>
    <p>C0 C1 CN</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>C0</p>
    <p>C1</p>
    <p>CN</p>
    <p>Plane</p>
    <p>Valid Page</p>
    <p>Block[0]</p>
    <p>Block[N]</p>
    <p>Chip Plane</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>for (1  # of valid pages): 1. read to controller (check with ECC) 2. write to another block</p>
    <p>Empty blockOld block</p>
    <p>SSD Controller</p>
    <p>blocked!</p>
    <p>GCed pages block the</p>
    <p>channel</p>
  </div>
  <div class="page">
    <p>Empty blockOld block</p>
    <p>SSD Controller</p>
    <p>Erase! Erase operation block the plane</p>
  </div>
  <div class="page">
    <p>A B</p>
    <p>C</p>
    <p>blocked!</p>
    <p>GCing plane</p>
    <p>Channel blocking GC</p>
    <p>Base approach</p>
  </div>
  <div class="page">
    <p>NoGC</p>
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>q Introduction q Background q Tiny-Tail Flash Design</p>
    <p>Plane-Blocking GC  GC-Tolerant Read  Rotating GC  GC-Tolerant Flush</p>
    <p>q Evaluation, limitations, conclusion</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>AA B</p>
    <p>C B</p>
    <p>C</p>
    <p>blocked!</p>
    <p>Base: Channel Blocking</p>
    <p>Plane Blocking</p>
    <p>GCing plane GCing plane</p>
    <p>Leverage intra-plane copyback</p>
    <p>support</p>
    <p>Unblock the channel</p>
  </div>
  <div class="page">
    <p>Empty blockOld block</p>
    <p>SSD Controller</p>
    <p>Read Page</p>
    <p>A B</p>
    <p>C</p>
    <p>Base GC Logic:</p>
    <p>for (every valid page) 1. flash read+write (over channel) 2. wait</p>
    <p>Plane Blocking GC Logic: for (every valid page) flash read+write (inside plane)</p>
    <p>serve other user I/Os</p>
    <p>Overlap intra-plane copyback with channel usage for other non-GCing planes</p>
    <p>Plane Blocking</p>
    <p>Intra-plane copyback</p>
  </div>
  <div class="page">
    <p>NoGC</p>
    <p>+Plane -Block</p>
    <p>ing</p>
    <p>by GC</p>
    <p>Only</p>
  </div>
  <div class="page">
    <p>q Issue 1: No ECC check for garbage-collected pages  (will discuss later)</p>
    <p>q Issue 2:</p>
    <p>Y</p>
    <p>XRead</p>
    <p>delayed!</p>
    <p>TTFlash @ FAST17</p>
    <p>Read</p>
    <p>Read Z</p>
    <p>X</p>
    <p>Y</p>
    <p>Z GC-ing plane still blocks</p>
  </div>
  <div class="page">
    <p>q Introduction q Background q Tiny-Tail Flash Design</p>
    <p>Plane-Blocking GC  RAIN + GC-Tolerant Read  Rotating GC  GC-Tolerant Flush</p>
    <p>q Evaluation, limitations, conclusion</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>PG1</p>
    <p>PG2</p>
    <p>C3 LPN (Logical Page #)</p>
    <p>Static mapping: LPN0  C[0]PG[0] LPN1  C[1]PG[0]</p>
    <p>Add parity:</p>
    <p>LPN 0, 1, 2  P0,1,2 Rotating parity as RAID 5</p>
    <p>PG0</p>
    <p>C0 C1 C2</p>
    <p>P6,7,8 7 86</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>Full Stripe Read</p>
    <p>tail</p>
    <p>GC</p>
    <p>fast</p>
    <p>Wait for GC 2 to 10s of ms</p>
    <p>vs.</p>
    <p>RAIN enables GC-Tolerant Read</p>
  </div>
  <div class="page">
    <p>Must generate extra N-1 reads!</p>
    <p>Add contention to other N -1 channels and planes</p>
    <p>Convert to full stripe if: Textra-reads &lt; TGC</p>
    <p>GC-Tolerant Read Issue: partial stripe read</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>Latency</p>
    <p>NoGC</p>
    <p>+Plane -Block</p>
    <p>ing</p>
    <p>+GC-Tolerant Read</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>One parity  cut one tail Cant cut two tails!</p>
    <p>Full-stripe read 0 21</p>
    <p>GCGC GC</p>
    <p>Issue: more than 1 GCs in a plane group?</p>
    <p>TTFlash @ FAST17</p>
    <p>PG0</p>
  </div>
  <div class="page">
    <p>q Introduction q Background q Tiny-Tail Flash Design</p>
    <p>Plane-Blocking GC  GC-Tolerant Read  Rotating GC  GC-Tolerant Flush</p>
    <p>q Evaluation, limitations, conclusion</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>Postpone!</p>
    <p>PG0</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>Rotating!</p>
    <p>PG0</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>Concurrent GCs in different PGs are permitted.</p>
    <p>PG0</p>
    <p>TTFlash @ FAST17</p>
    <p>PG1</p>
    <p>PG2</p>
  </div>
  <div class="page">
    <p>+Rotating GC</p>
    <p>TTFlash @ FAST17</p>
    <p>Why still tiny tails?</p>
    <p>Small/partial-stripe read  Sometimes may be better to wait for GC than adding extra reads/ contentions!</p>
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>Latency</p>
    <p>Tiny tail</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>q Tiny-Tail Flash Design  Plane-Blocking GC  GC-Tolerant Read  Rotating GC  GC-Tolerant Flush (in paper)</p>
    <p>q Evaluation q Limitations q conclusion</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>q SSDsim (~2500 LOC)  Device simulator</p>
    <p>q VSSIM (~900 LOC)  QEMU/KVM-based  Run Linux and applications</p>
    <p>q OpenSSD  Many limitations of the simple programming model</p>
    <p>q Future: ttFlash on OpenChannel SSD</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>q Simulator: SSDsim (verified against hardware)</p>
    <p>q Workload: 6 real-world traces from Microsoft Windows</p>
    <p>q Settings and SSD parameters:  SSD size: 256GB, plane group width = 8 planes (1 parity, 7 data)</p>
    <p>TTFlash @ FAST17</p>
  </div>
  <div class="page">
    <p>NoGC</p>
    <p>+Plane -Block</p>
    <p>ing +GC-Tolerant Read</p>
    <p>+Rotating GC</p>
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>Developer Tools Release Server Trace</p>
    <p>Result:</p>
  </div>
  <div class="page">
    <p>Live Maps Server (LMBE)</p>
    <p>Exchange Server (Exch)</p>
    <p>MSN File Server (MSNFS)</p>
    <p>TPC-C</p>
    <p>Display Ads Server (DAPPS)</p>
    <p>Dev. Tools Release (DTRS) Evaluated on 6 windows workload traces with various characteristics</p>
    <p>TTFlash @ FAST17</p>
    <p>Reduced blocked I/Os (total) from 2  7% to 0.003  0.05% 99  99.99%: 1.0  2.6x slower for ttFlash and 5.6  138.2x for Base</p>
  </div>
  <div class="page">
    <p>File Server</p>
    <p>Network FS</p>
    <p>OLTP Varmail Video Server</p>
    <p>Web Proxy</p>
    <p>A vg</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s)</p>
    <p>Base +PB +GTR +RGC</p>
    <p>TTFlash @ FAST17</p>
    <p>q Filebench on VSSIM+ttFlash  ttFlash achieves better average</p>
    <p>latency than base case</p>
    <p>q Vs. Preemptive GC  ttFlash is more stable than</p>
    <p>semi-preemptive GC - (If no idle time, preemptive GC</p>
    <p>will create GC backlogs, creating latency spikes)</p>
    <p>ttFlash Preempt</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s )</p>
    <p>ttflash stable</p>
  </div>
  <div class="page">
    <p>q ttFlash depends on RAIN  1 parity for N parallel pages/channels  We set N = 8, so we lose one channel out of 8 channels.  Average latencies are 1.09  1.33x slower than NoGC, No-RAIN case</p>
    <p>q RAID  more writes (P/E cycles)  ttFlash increases P/E cycles by 15  18% for most of workloads  Incur &gt; 53% P/E cycles for TPCC, MSN (random write)</p>
    <p>q ECC is not checked during GC  Suggest background scrubbing (read is fast &amp; not as urgent as GC)  Important note: in ttFlash, foreground/user reads are still ECC checked</p>
  </div>
  <div class="page">
    <p>Latency CDF w/ Write Bursts</p>
    <p>Latency (ms)</p>
    <p>Under write burst and at high watermark, ttFlash must dynamitcally disable Rotating GC to ensure there is always enough number of free pages.</p>
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>) ttF lash 64MB/s</p>
    <p>ttFlash 55MB/s</p>
  </div>
  <div class="page">
    <p>GC-induced long tail</p>
    <p>I. Plane-Blocking GC</p>
    <p>II. GC-Tolerant Read</p>
    <p>III. Rotating GC</p>
    <p>IV. GC-Tolerant Flush</p>
    <p>Powerful Controller RAIN (parity-based redundancy) Capacitor-backed RAM</p>
    <p>technology:</p>
    <p>New techniques: ttFlash</p>
    <p>C D</p>
    <p>F (P</p>
    <p>er ce</p>
    <p>nt ile</p>
    <p>)</p>
    <p>Latency Between 99 - 99.99th percentiles: ttFlash 1-3x slower than NoGC Base 5-138x slower than NoGC</p>
    <p>Overall results achieved:</p>
  </div>
  <div class="page">
    <p>http://ucare.cs.uchicago.edu https://ceres.uchicago.edu</p>
    <p>TTFlash @ FAST17</p>
  </div>
</Presentation>
