<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Frame Rules from Answer Types for Code Pointers</p>
    <p>Hayo Thielecke</p>
    <p>University of Birmingham, UK</p>
  </div>
  <div class="page">
    <p>Frame rules from answer types for code pointers</p>
    <p>Background: typed low-level languages, e.g. assembly separation logic connectives ,  (magic wand)</p>
    <p>Aim: frame law in the presence of code pointers reasoning using the type (or spec), without having to know the code itself</p>
    <p>Idea: use answer type polymorphism in Continuation Passing Style (CPS) [POPL03,ESOP04] Here: instantiate answer to A</p>
    <p>Complication: unsoundness for A   as answer type Solution: restrict answer types to -closed types</p>
    <p>adapted from Pitts, Krivine et. al.</p>
  </div>
  <div class="page">
    <p>Answer types background</p>
    <p>Basic questions about continuations: what is the answer type?</p>
    <p>Universal type? Sierpinski? Free type variable? Nothing, just negation? Pietism and  a  self-adjointness. Using a single answer type loses precision.</p>
    <p>Quantified answer types in CPS gives us a type-theoretic control flow analysis.</p>
    <p>Where the quantifiers are depends on where the term can jump.</p>
    <p>See From Control Effects to Typed Continuation Passing [POPL03]</p>
  </div>
  <div class="page">
    <p>Control effects</p>
    <p>Jouvelot and Gifford, 1988: goto  and comefrom  effects. Simplification: we use just  for both of them. Idea: Peirces law ((  )  )   refined with regions.</p>
    <p>c call/cc : .((   ) e )</p>
    <p>e   !</p>
    <p>Further simplification: at most singleton effects;  or .</p>
  </div>
  <div class="page">
    <p>Effect systems</p>
    <p>c M : A e1 B ! e2  c N : A ! e3</p>
    <p>c MN : B ! e1  e2  e3 , x : A c M : B ! e</p>
    <p>c x.M : A e B !</p>
    <p>c V : A !   c V : .A !</p>
    <p>/ Tyvar()</p>
    <p>(Masking)  c M : A !</p>
    <p>c newreg M : A !   / (Reg(A)  Reg())</p>
  </div>
  <div class="page">
    <p>CPS transform on types and effects</p>
    <p>For each region , we assume a fresh type variable .</p>
    <p>A  B = .(B  )  (A  ) where  is fresh</p>
    <p>A   B = (B  )  (A  ) .A = .A .A = .A</p>
    <p>=</p>
    <p>If a region  is not free in A, then  is not free in A.</p>
  </div>
  <div class="page">
    <p>From regions to answer type polymorphism</p>
    <p>If  c M : A !  then</p>
    <p>` M : (A  )</p>
    <p>If  c M : A !  then</p>
    <p>` M : .(A  )   where  is fresh</p>
  </div>
  <div class="page">
    <p>Example: no control effects</p>
    <p>c z.x.x : B  (A  A) !</p>
    <p>is transformed</p>
    <p>z.x.x</p>
    <p>= k1.k1(k2z.k2(k3x.k3x))</p>
    <p>B  (A  A)</p>
    <p>= 2.((3.(A  3)  (A  3))  2)  (B  2)</p>
    <p>Each  has its own answer type.</p>
  </div>
  <div class="page">
    <p>Upward continuation example</p>
    <p>z. call/cc(k.x.k(y .x))</p>
    <p>= k1.k1(k2z.k2(k3x.k2(k4y .k4x)))</p>
    <p>.B   (A</p>
    <p>A)</p>
    <p>= .(((A  )  (A  ))  )  (B  )</p>
    <p>Control effects enforce answer type sharing.</p>
  </div>
  <div class="page">
    <p>Answer types in call-by-name</p>
    <p>Plotkin (1975) published two Continuation Passing Style (CPS) transforms: call-by-value and call-by-name.</p>
    <p>The call-by-value one has been studied extensively, and is the basis of CPS compilers.</p>
    <p>Streicher (in the mid-1990) invented a new call-by-name transform. Hofmann and Streicher; completenes result for -calculus.</p>
  </div>
  <div class="page">
    <p>Theorem</p>
    <p>The Plotkin (with answer type polymorphism) and Streicher CPS transforms are isomorphic (assuming parametricity)</p>
    <p>Proof: Start from the isomorphism for the encoding of pairs, lift it up to function types, using Meyer and Wands technique, to construct an isomorphism A = A, show that the CPS transforms commute with the isomorphism. Meyer and Wand used back-and-forth translations to construct a retraction between direct and continuation semantics. We use similar translations to contruct an isomorphism between two CPS transforms.</p>
  </div>
  <div class="page">
    <p>Visualizing the isomorphism</p>
    <p>Plotkin transform arises from the Streicher one by coding of pairs.</p>
    <p>(MN)</p>
    <p>= k.M(N, k) (P, Q)</p>
    <p>MN = k.M (m.mNk) p.pPQ</p>
    <p>(x.M)</p>
    <p>= (x, q). Mq j P</p>
    <p>x.M = k.k(xq.Mq) P (x1x2.xj )</p>
  </div>
  <div class="page">
    <p>Frame Rules from Answer Types for Code Pointers</p>
    <p>Hayo Thielecke</p>
    <p>University of Birmingham, UK</p>
  </div>
  <div class="page">
    <p>Separation logic and the frame rule</p>
    <p>Separating conjunction P  Q Split the heap into disjoint parts, satisfying P and Q. [Reynolds, OHearn et. al.]</p>
    <p>Frame rule in separation Hoare logic</p>
    <p>The conjunction  allows local reasoning:</p>
    <p>{P} c {Q} {P  R} c {Q  R}</p>
    <p>But what about code pointers?</p>
    <p>p 7 some code ` jmp [p] : ???</p>
  </div>
  <div class="page">
    <p>Answer type polymorphism</p>
    <p>Frame via answer type</p>
    <p>In CPS, a type A becomes: .(A  )</p>
    <p>instantiate answer type: .(A  R  )  R</p>
    <p>then uncurry: .(((A R )  ) R )</p>
    <p>Consistently adds R to all continuations.</p>
    <p>Problem: With Hoare typing, assignment changes the types That makes the above unsound; like a frame rule with  instead of .</p>
    <p>Solution: Only instantiate answer types to types that are well-behaved: -closed.</p>
  </div>
  <div class="page">
    <p>Setting: a typed assembly language fragment</p>
    <p>Syntax</p>
    <p>c ::= jmp f</p>
    <p>| jmp [p] | movc f p; c | movh p q; c</p>
    <p>Operational semantics</p>
    <p>Machine state:  current code block c, heap h, code segment s</p>
    <p>jmp f | h | s s(f ) | h | s where f / {exit, error} jmp [p] | h | s s(h(p)) | h | s</p>
    <p>movc f p; c | h | s c | h[p 7 f ] | s movh p q; c | h | s c | h[q 7 h(p)] | s</p>
  </div>
  <div class="page">
    <p>Typing</p>
    <p>Three kinds of types</p>
    <p>A ::= p 7 B | A  A | A  A | emp | true (heap types) B ::= A  B | A  B | .B |  (behaviour types) C ::=  | A  C | .C (closed types)</p>
    <p>p 7 B: pointer p points to code with type B A  B: code that expects fresh heap satisfying A and then</p>
    <p>behaves according to B</p>
    <p>Judgements for code blocks</p>
    <p>| A ` c : B means that if code segment has type  and the current heap satisfies A</p>
    <p>then code c behaves as specified by B.</p>
  </div>
  <div class="page">
    <p>Some typing rules</p>
    <p>Storing code pointers in the heap</p>
    <p>, f . B,  | p 7 B ` c : C (MovCode)</p>
    <p>, f . B,  | p 7 B ` movc f p; c : C</p>
    <p>Indirect jump via a code pointer (IndJmp)</p>
    <p>| p 7 .((p 7 )  C ) ` jmp [p] : C</p>
    <p>(where  not free in C )</p>
    <p>Arrow introduction and elimination are silent</p>
    <p>| A  A ` c : B  | A ` c : A  B</p>
    <p>| A  A ` c : B  | A ` c : A  B</p>
  </div>
  <div class="page">
    <p>Avoiding unsoundness: Restrict answer types to -closed Orthogonality</p>
    <p>Inspired by Pitts, Krivine, Mellies, Vouillon. There: term  evaluation context; here: machine state  more state</p>
    <p>Definition</p>
    <p>We write c | h | s  h, s if h # h and s ] s implies c | h  h | s  s terminates or loops (but does not cause an error).</p>
    <p>Orthogonal and -closure Define S = {y | x  y for all x  S}. () is a closure operator. S is closed iff S  S.</p>
    <p>-closed means well-behaved Intuitively, closed types are characterized by interaction with disjoint state.</p>
  </div>
  <div class="page">
    <p>Soundness</p>
    <p>We have some algebraic laws for () and , e.g.</p>
    <p>(A1  A2) = A1  A2</p>
    <p>Lemma</p>
    <p>-closed types are closed under A  (); that is, if C is closed, then so is A  C.</p>
    <p>Theorem</p>
    <p>The type system is sound for a realizability semantics.</p>
    <p>Hence there are enough closed types for framing...</p>
  </div>
  <div class="page">
    <p>Frame laws via instantiation of answer types</p>
    <p>Functions in CPS</p>
    <p>In continuation-passing style, functions are an idiom</p>
    <p>A1 r A2</p>
    <p>for a jump expecting a return address in r .</p>
    <p>Derived frame rule for functions jmp f : A1 r A2</p>
    <p>by def. (r ) jmp f : .(r 7 (r .(r 7 r )  A2  ))  A1</p>
    <p>(E) jmp f : (r 7 (r .(r 7 r )  A2  A  ))  A1  A</p>
    <p>() jmp f : (r 7 (r .(r 7 r )  (A2  A)  ))  (A1  A)</p>
    <p>jmp f : .(r 7 (r .(r 7 r )  (A1  A)  ))  (A2  A)</p>
    <p>jmp f : (A1  A) r (A2  A)</p>
  </div>
  <div class="page">
    <p>Recursion via jumping</p>
    <p>Knots in the store</p>
    <p>Code pointers allow one to create recursion dynamically. E.g. code at f is indirect jump to p; we update p to point to f .  need recursive types.</p>
    <p>Recursive heaps</p>
    <p>.A  A[(.A)/]</p>
    <p>A possible rule for general jumping (Jmp)</p>
    <p>| .p 7 (  C ) ` jmp [p] : C</p>
    <p>Semantically challenging (recursion and polymorphism), but fits into the overall picture.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Summary</p>
    <p>Answer types Should not type A-accepting continuations as A  0; A   gives more information, together with .</p>
    <p>Hoare typing Need to be more careful, but A   well behaved. Frame rules arise as idioms in continuation passing.</p>
    <p>Further work</p>
    <p>Extend to a richer assembly language</p>
    <p>Hypothetical and higher-order frame rules</p>
    <p>Recursion through the store (sketched in the paper)</p>
  </div>
</Presentation>
