<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ji-Yong Shin</p>
    <p>Cornell University</p>
    <p>In collaboration with Mahesh Balakrishnan (MSR SVC),</p>
    <p>Tudor Marian (Google), and Hakim Weatherspoon (Cornell)</p>
    <p>Gecko: Contention-Oblivious Disk Arrays for Cloud Storage</p>
    <p>FAST 2013</p>
  </div>
  <div class="page">
    <p>What happens to storage?</p>
    <p>Cloud and Virtualization</p>
    <p>VMM</p>
    <p>Guest VM</p>
    <p>Guest VM</p>
    <p>Guest VM</p>
    <p>Guest VM</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>SEQUENTIAL</p>
    <p>RANDOM</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p># of Seq Writers</p>
    <p>Seq - VM+EXT4</p>
    <p>Rand - VM+EXT4</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p># of Seq Writers</p>
    <p>Seq - VM+EXT4</p>
    <p>Rand - VM+EXT4</p>
    <p>I/O CONTENTION causes throughput collapse</p>
  </div>
  <div class="page">
    <p>Existing Solutions for I/O Contention?</p>
    <p>I/O scheduling: reordering I/Os</p>
    <p>Entails increased latency for certain workloads</p>
    <p>May still require seeking</p>
    <p>Workload placement: positioning workloads to minimize contention</p>
    <p>Requires prior knowledge or dynamic prediction</p>
    <p>Predictions may be inaccurate</p>
    <p>Limits freedom of placing VMs in the cloud</p>
  </div>
  <div class="page">
    <p>Log all writes to tail</p>
    <p>Log-structured File System to the Rescue? [Rosenblum et al. 91]</p>
    <p>Addr 0 1 2   N</p>
    <p>W ri</p>
    <p>te</p>
    <p>W ri</p>
    <p>te</p>
    <p>W ri</p>
    <p>te</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>Shared Disk</p>
  </div>
  <div class="page">
    <p>Garbage collection is the Achilles Heel of LFS [Seltzer et al. 93, 95; Matthews et al. 97]</p>
    <p>Shared Disk</p>
    <p>Challenges of Log-Structured File System</p>
    <p>N</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>G C</p>
    <p>Garbage Collection (GC) from Log Head</p>
    <p>R e</p>
    <p>a d</p>
    <p>GC and read still cause disk seek</p>
    <p>Lo g</p>
    <p>H</p>
    <p>e a</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Challenges of Log-Structured File System</p>
    <p>Garbage collection is the Achilles Heel of LFS</p>
    <p>2-disk RAID-0 setting of LFS</p>
    <p>GC under write-only synthetic workload RAID 0 + LFS</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>GC</p>
    <p>Aggregate</p>
    <p>App</p>
    <p>Max Sequential Throughput</p>
    <p>Throughput falls by 10X during GC</p>
  </div>
  <div class="page">
    <p>Problem:</p>
    <p>Increased virtualization leads to</p>
    <p>increased disk seeks and kills performance</p>
    <p>RAID and LFS do not solve the problem</p>
  </div>
  <div class="page">
    <p>Rest of the Talk</p>
    <p>Motivation</p>
    <p>Gecko: contention-oblivious disk storage</p>
    <p>Sources of I/O contention</p>
    <p>New technique: Chained logging</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>What Causes Disk Seeks?</p>
    <p>Write-write</p>
    <p>Read-read</p>
    <p>Write-read</p>
    <p>VM 1 VM2</p>
    <p>W ri</p>
    <p>te</p>
    <p>W ri</p>
    <p>te</p>
    <p>R e</p>
    <p>a d</p>
    <p>R e</p>
    <p>a d</p>
    <p>W ri</p>
    <p>te</p>
    <p>R e</p>
    <p>a d</p>
  </div>
  <div class="page">
    <p>What Causes Disk Seeks?</p>
    <p>Write-write</p>
    <p>Read-read</p>
    <p>Write-read</p>
    <p>Logging</p>
    <p>Write-GC read</p>
    <p>Read-GC read</p>
    <p>VM 1 VM2</p>
    <p>W ri</p>
    <p>te</p>
    <p>R e</p>
    <p>a d</p>
    <p>G C</p>
  </div>
  <div class="page">
    <p>Principle: A single sequentially accessed disk is better</p>
    <p>than multiple randomly seeking disks</p>
  </div>
  <div class="page">
    <p>Geckos Chained Logging Design</p>
    <p>Separating the log tail from the body</p>
    <p>GC reads do not interrupt the sequential write</p>
    <p>1 uncontended drive &gt;&gt;faster&gt;&gt; N contended drives</p>
    <p>Disk 2 Disk 1 Disk 0</p>
    <p>Physical Addr Space</p>
    <p>Disk 2</p>
    <p>Eliminates write-write and reduces write-read contention</p>
    <p>Log Tail</p>
  </div>
  <div class="page">
    <p>Geckos Chained Logging Design</p>
    <p>Separating the log tail from the body</p>
    <p>GC reads do not interrupt the sequential write</p>
    <p>1 uncontended drive &gt;&gt;faster&gt;&gt; N contended drives</p>
    <p>Disk 2 Disk 1 Disk 0</p>
    <p>Log Tail</p>
    <p>Physical Addr Space</p>
    <p>G C</p>
    <p>Garbage collection</p>
    <p>from Log Head to Tail</p>
    <p>Disk 2</p>
    <p>Eliminates write-write and reduces write-read contention</p>
    <p>Eliminates write-GC read</p>
    <p>contention</p>
  </div>
  <div class="page">
    <p>Geckos Chained Logging Design</p>
    <p>Smarter Compact-In-Body Garbage Collection</p>
    <p>Disk 1 Disk 0</p>
    <p>Physical Addr Space</p>
    <p>G C</p>
    <p>Garbage collection from Head to Body</p>
    <p>Log Tail</p>
    <p>Disk 2</p>
    <p>Garbage collection</p>
    <p>from Log Head to Tail</p>
  </div>
  <div class="page">
    <p>Gecko Caching</p>
    <p>What happens to reads going to tail drives?</p>
    <p>LRU Cache</p>
    <p>Reduces write-read contention</p>
    <p>Disk 1 Disk 0 Disk 2</p>
    <p>W ri</p>
    <p>te</p>
    <p>Tail Cache</p>
    <p>R e</p>
    <p>a d</p>
    <p>R e</p>
    <p>a d</p>
    <p>R e</p>
    <p>a d</p>
    <p>Body Cache (Flash )</p>
    <p>Reduces read-read contention</p>
    <p>RAM Hot data</p>
    <p>MLC SSD Warm data</p>
  </div>
  <div class="page">
    <p>Gecko Properties Summary No write-write contention,</p>
    <p>No GC-write contention, and Reduced read-write contention</p>
    <p>Disk 1 Disk 0 Disk 2</p>
    <p>W ri</p>
    <p>te</p>
    <p>Tail Cache</p>
    <p>R e</p>
    <p>a d</p>
    <p>R e</p>
    <p>a d</p>
    <p>Body Cache (Flash )</p>
    <p>Disk 1 Disk 0 Disk 2</p>
    <p>Fault tolerance + Read performance</p>
    <p>Mirroring/ Striping</p>
    <p>Disk 1 Disk 0</p>
    <p>Power saving w/o consistency</p>
    <p>concerns</p>
    <p>Reduced read-write and read-read</p>
    <p>contention</p>
  </div>
  <div class="page">
    <p>Gecko Implementation Primary map: less than 8 GB RAM</p>
    <p>for a 8 TB storage</p>
    <p>Inverse map: 8 GB flash for a 8 TB storage (written every 1024 writes)</p>
    <p>empty filled</p>
    <p>Data (in disk)</p>
    <p>Physical-to-logical map (in flash) h</p>
    <p>e a</p>
    <p>d</p>
    <p>h e</p>
    <p>a d</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>ta il</p>
    <p>ta il</p>
    <p>Disk 0 Disk 1 Disk 2</p>
    <p>W W</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>In-kernel version</p>
    <p>Implemented as block device for portability</p>
    <p>Similar to software RAID</p>
    <p>Hardware</p>
    <p>WD 600GB HDD</p>
    <p>Used 512GB of 600GB</p>
    <p>2.5 10K RPM SATA-600</p>
    <p>Intel MLC (multi level cell) SSD</p>
    <p>240GB SATA-600</p>
    <p>User-level emulator</p>
    <p>For fast prototyping</p>
    <p>Runs block traces</p>
    <p>Tail cache support</p>
  </div>
  <div class="page">
    <p>How Well Does Gecko Handle GC?</p>
    <p>Gecko</p>
    <p>Log + RAID0</p>
    <p>Geckos aggregate throughput always remains high 3X higher aggregate &amp; 4X higher application throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>GC</p>
    <p>Aggregate</p>
    <p>App</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>GC</p>
    <p>Aggregate</p>
    <p>App</p>
    <p>Max Sequential Throughput of 1 disk Max Sequential</p>
    <p>Throughput of 2 disks</p>
  </div>
  <div class="page">
    <p>How Well Does Gecko Handle GC?</p>
    <p>Gecko</p>
    <p>Log + RAID0</p>
    <p>Geckos aggregate throughput always remains high 3X higher aggregate &amp; 4X higher application throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>GC</p>
    <p>Aggregate</p>
    <p>App</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>GC</p>
    <p>Aggregate</p>
    <p>App</p>
    <p>Aggregate throughput = Max throughput</p>
    <p>Throughput collapses</p>
  </div>
  <div class="page">
    <p>How Well Does Gecko Handle GC?</p>
    <p>App throughput can be preserved using smarter GC</p>
    <p>Gecko</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>GC</p>
    <p>Aggregate</p>
    <p>App</p>
    <p>No GC Moveto-Tail</p>
    <p>GC</p>
    <p>Compactin-Body</p>
    <p>GC</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>MS Enterprise and MSR Cambridge Traces</p>
    <p>Trace Name Estimated Addr Space</p>
    <p>Total Data Accessed (GB)</p>
    <p>Total Data Read (GB)</p>
    <p>Total Data Written (GB) TotalIOReq NumReadReq NumWriteReq</p>
    <p>prxy 136 2,076 1,297 779 181,157,932 110,797,984 70,359,948</p>
    <p>src1 820 3,107 2,224 884 85,069,608 65,172,645 19,896,963</p>
    <p>proj 4,102 2,279 1,937 342 65,841,031 55,809,869 10,031,162</p>
    <p>Exchange 4,822 760 300 460 61,179,165 26,324,163 34,855,002</p>
    <p>usr 2,461 2,625 2,530 96 58,091,915 50,906,183 7,185,732</p>
    <p>LiveMapsBE 6,737 2,344 1,786 558 44,766,484 35,310,420 9,456,064</p>
    <p>MSNFS 1,424 303 201 102 29,345,085 19,729,611 9,615,474</p>
    <p>DevDivRelease 4,620 428 252 176 18,195,701 12,326,432 5,869,269</p>
    <p>prn 770 271 194 77 16,819,297 9,066,281 7,753,016</p>
    <p>[Narayanan et al. 08, 09]</p>
  </div>
  <div class="page">
    <p>What is the Performance of Gecko under Real Workloads?</p>
    <p>Gecko</p>
    <p>Mirrored chain of length 3</p>
    <p>Tail cache (2GB RAM + 32GB SSD)</p>
    <p>Body Cache (32GB SSD)</p>
    <p>Log + RAID10</p>
    <p>Mirrored, Log + 3 disk RAID-0</p>
    <p>LRU cache (2GB RAM + 64GB SSD)</p>
    <p>Gecko showed less read-write contention and higher cache hit rate Geckos throughput is 2X-3X higher</p>
    <p>Gecko Log + RAID10</p>
    <p>Mix of 8 workloads: prn, MSNFS, DevDivRelease, proj, Exchange, LiveMapsBE, prxy, and src1</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Read Write</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Read Write</p>
  </div>
  <div class="page">
    <p>What is the Effect of Varying Gecko Chain Length?</p>
    <p>Same 8 workloads with 200GB data prefilled</p>
    <p>Single uncontended disk</p>
    <p>Separating reads and writes</p>
    <p>better performance</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>) Read Write</p>
    <p>RAID 0</p>
    <p>errorbar = stdev</p>
  </div>
  <div class="page">
    <p>How Effective Is the Tail Cache?  Read hit rate of tail cache (2GB RAM+32GB SSD) on 512GB disk</p>
    <p>21 combinations of 4 to 8 MSR Cambridge and MS Enterprise traces</p>
    <p>Tail cache can effectively resolve read-write contention</p>
    <p>At least 86% of read hit rate  RAM handles most of hot data</p>
    <p>Amount of data changes hit rate  Still average 80+ % hit rate</p>
    <p>H it</p>
    <p>R a</p>
    <p>te (</p>
    <p>% )</p>
    <p>Application Mix SSD</p>
    <p>RAM</p>
    <p>it R</p>
    <p>a te</p>
    <p>( %</p>
    <p>) Amount of Data in Disk (GB)</p>
  </div>
  <div class="page">
    <p>How Durable is Flash Based Tail Cache?</p>
    <p>Static analysis of lifetime based on cache hit rate</p>
    <p>Use of 2GB RAM extends SSD lifetime</p>
    <p>S S</p>
    <p>D L</p>
    <p>if e</p>
    <p>ti m</p>
    <p>e (</p>
    <p>D a</p>
    <p>y s)</p>
    <p>Application Mix</p>
    <p>Lifetime at 40MB/s</p>
  </div>
  <div class="page">
    <p>Conclusion  Gecko enables fast storage in the cloud</p>
    <p>Scales with increasing virtualization and number of cores</p>
    <p>Oblivious to I/O contention</p>
    <p>Geckos technical contribution</p>
    <p>Separates log tail from its body</p>
    <p>Separates reads and writes</p>
    <p>Tail cache absorbs reads going to tail</p>
    <p>A single sequentially accessed disk is better than multiple randomly seeking disks 28</p>
  </div>
  <div class="page">
    <p>Question?</p>
  </div>
</Presentation>
