<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Route Control Platform Making an AS look and act like a router</p>
    <p>Aman Shaikh</p>
    <p>AT&amp;T Labs - Research</p>
    <p>IEEE CCW 2004</p>
    <p>Matt Caesar (UC Berkeley) Don Caldwell (AT&amp;T Labs  Research)</p>
    <p>Nick Feamster (MIT) Jennifer Rexford (AT&amp;T Labs  Research)</p>
    <p>Kobus van der Merwe (AT&amp;T Labs  Research)</p>
  </div>
  <div class="page">
    <p>You have heard the news  BGP is broken</p>
    <p>It converges slowly  At times it does not converge at all  It causes routing loops and deflections inside an AS  Its misconfigured frequently  Traffic engineering is hard with BGP</p>
    <p>Fixing BGP is hard  Incremental fixes</p>
    <p>Makes BGP even more complicated</p>
    <p>New architectures and inter-domain protocols  Deployment is almost impossible</p>
  </div>
  <div class="page">
    <p>What are the fundamental problems?  AS is a logical entity for inter-domain routing</p>
    <p>(i.e. BGP) and yet BGP state and logic are decomposed across routers inside an AS  No router has complete BGP state</p>
    <p>Each router makes routing decision based on partial and incomplete view</p>
    <p>BGP interacts in odd ways with other protocols  Most notably with the IGP (Interior Gateway</p>
    <p>Protocol) running inside an AS</p>
  </div>
  <div class="page">
    <p>Fixing the fundamental problems: Route Control Platform</p>
    <p>Represents an AS as a single logical entity  Complete view of ASs routes  Computes routes for all routers inside an AS</p>
    <p>Routers no longer have to compute routes</p>
    <p>Exchanges routing information with RCPs in other ASes</p>
    <p>AS 3AS 2AS 1</p>
    <p>iBGP</p>
    <p>Physical peering</p>
    <p>Inter-AS Protocol RCP RCP RCP</p>
  </div>
  <div class="page">
    <p>The rest of this talk: the case for RCP  Principles for inter-domain routing</p>
    <p>Treat the AS as a whole and compute routes using AS-wide state  Example: high-level policy expression</p>
    <p>Control routing protocol interactions  Example: interaction between BGP and IGP</p>
    <p>Potential dealbreakers  Backwards compatibility and incentives</p>
    <p>Scalability and reliability</p>
    <p>Related work (orhavent we seen this before?)  Route reflection and route servers</p>
    <p>Overlay networks</p>
  </div>
  <div class="page">
    <p>Decomposed configuration state</p>
    <p>Sprint UUNet</p>
    <p>A C 10.0.0.1 192.168.0.1</p>
    <p>Simple policy: Dont advertise routes learned from UUNet to Sprint Configuration is decomposed, so routes must carry state</p>
    <p>neighbor 192.168.0.1 route-map IMPORT-C in route-map IMPORT-C permit 10 set community 0:1000</p>
    <p>ip community-list 1 permit 0:1000 neighbor 10.0.0.1 route-map EXPORT-A out route-map EXPORT-A deny 10 match community 1</p>
    <p>Assign routes From UUNet tag at router C</p>
    <p>Dont send route with From UUNet tag to Sprint at router A</p>
  </div>
  <div class="page">
    <p>RCP: Centralize configuration</p>
    <p>RCP implements policies for entire AS  Knows about sessions to all other ASes  Implements policies in terms of relationship with ASes</p>
    <p>Benefits  Simpler configuration  Do not have to tag routes with state</p>
    <p>Sprint UUNet</p>
    <p>A C 10.0.0.1 192.168.0.1</p>
    <p>RCP</p>
  </div>
  <div class="page">
    <p>BGP interacts with underlying protocols</p>
    <p>RR1 RR2</p>
    <p>C1 C2</p>
    <p>d</p>
    <p>C1 learns BGP route to destination from RR1 C2 learns BGP route to destination from RR2</p>
    <p>C1 sends packets to RR1 via its IGP shortest path which traverses C2</p>
    <p>C2 sends packets to RR2 via its IGP shortest path which traverses C1</p>
    <p>Persistent forwarding loop</p>
  </div>
  <div class="page">
    <p>RCP: Compute routes with complete info</p>
    <p>RCP learns all externally learned routes  Computes consistent router-level paths  Benefits:</p>
    <p>Intrinsic loop freedom and convergence  RCP does not have to stick to BGP decision process</p>
    <p>Can pin paths for traffic engineering and other purposes</p>
    <p>RR1 RR2</p>
    <p>C1 C2 3 3</p>
    <p>d</p>
    <p>RR2RR2 RCP</p>
  </div>
  <div class="page">
    <p>Getting from here to there: three easy steps</p>
    <p>Two key issues  Backward compatibility</p>
    <p>Deployment incentives</p>
    <p>AS 3AS 2AS 1</p>
    <p>iBGP</p>
    <p>Physical peering</p>
    <p>Inter-AS Protocol RCP RCP RCP</p>
    <p>iBGP</p>
    <p>eBGP</p>
  </div>
  <div class="page">
    <p>Phase 1: Control over Protocol Interactions</p>
    <p>iBGP</p>
    <p>eBGP</p>
    <p>Before: conventional iBGP</p>
    <p>iBGP</p>
    <p>eBGP</p>
    <p>After: RCP gets best iBGP routes (and IGP topology)</p>
    <p>Only one AS has to change its architecture!</p>
    <p>RCP</p>
  </div>
  <div class="page">
    <p>Phase 1 Application: Controlling Path Changes</p>
    <p>BGP routes take nearest exist (shortest IGP path) Failures or maintenance can change IGP (path) weights</p>
    <p>Exit point can also change Traffic shifts, convergence delay, congestion</p>
    <p>A B</p>
    <p>C D</p>
  </div>
  <div class="page">
    <p>Phase 1 Application: Controlling Path Changes</p>
    <p>BGP routes take nearest exist (shortest IGP path) Failures or maintenance can change IGP (path) weights</p>
    <p>RCP can pin exit points as IGP weights change</p>
    <p>RCP A</p>
    <p>B</p>
    <p>C D</p>
  </div>
  <div class="page">
    <p>Phase 2: AS-wide Selection and Policy</p>
    <p>iBGP</p>
    <p>eBGP</p>
    <p>Before: RCP gets best iBGP routes (and IGP topology)</p>
    <p>After: RCP gets all eBGP routes from neighbors</p>
    <p>iBGP</p>
    <p>eBGP</p>
    <p>RCP</p>
    <p>RCP</p>
  </div>
  <div class="page">
    <p>Phase 2 Application: Efficient Aggregation</p>
    <p>eBGP</p>
    <p>Aggregation curbs routing table growth</p>
    <p>Routers cant know which routers need more specific routes</p>
  </div>
  <div class="page">
    <p>Phase 2 Application: Efficient Aggregation</p>
    <p>Aggregation curbs routing table growth</p>
    <p>RCP</p>
    <p>RCP can determine which routers need more specific routes and which routers can do away with less specific routes</p>
  </div>
  <div class="page">
    <p>Phase 3: All ASes have RCPs Before: RCP gets all eBGP routes from neighbors</p>
    <p>iBGP</p>
    <p>eBGP</p>
    <p>After: ASes exchange routes via RCP</p>
    <p>RCP</p>
    <p>AS 3AS 2AS 1</p>
    <p>iBGP</p>
    <p>Physical peering</p>
    <p>Inter-AS Protocol RCP RCP RCP</p>
  </div>
  <div class="page">
    <p>Phase 3 Application: More Flexible Routing</p>
    <p>Better network management  Diagnostics and trouble-shooting  Routing co-located with other information (e.g.</p>
    <p>traffic)  Ability to reason about an AS as a single entity</p>
    <p>Protocol Improvements  Attaching prices to routes  Inter-AS negotiation of exit points  Overlay routing informed by IP-layer information</p>
    <p>Your application here</p>
  </div>
  <div class="page">
    <p>Scalability and Robustness  Can RCP scale?</p>
    <p>We have a prototype implementation  Single-box RCP can handle AS-wide BGP load  OSPF changes can be troublesome</p>
    <p>Centralized != unable to scale</p>
    <p>Is RCP a single point of failure?  RCP can be implemented using distributed system</p>
    <p>insights  Consistency (mostly) a non-isssue</p>
    <p>Guarantee from OSPF/IS-IS operation:  Either an RCP replica has a complete view of network</p>
    <p>(partition) or no view; but never a partial view</p>
  </div>
  <div class="page">
    <p>Is RCP basically a Route Reflector?  Yes, but its a better route reflector</p>
    <p>Customized routing decisions for clients  Route reflectors do not compute routes from clients</p>
    <p>perspective</p>
    <p>Route reflectors do not emulate a full mesh</p>
    <p>Routing decisions based on complete visibility  Guaranteed correct routes</p>
    <p>Replication is dictated by system issues</p>
  </div>
  <div class="page">
    <p>RCP also looks a lot like  A route server</p>
    <p>Route arbiter: looked at applying policy at exchange points</p>
    <p>AS agents  RCP can act as an AS agent; can answer queries for the AS</p>
    <p>An overlay network  Most previous work is in data overlays  RCP is a control overlay</p>
    <p>Hierarchical routing is about control overlays</p>
    <p>RCP could give more information and control to data overlays  RCP has AS-wide information and direct control over paths</p>
    <p>taken through the AS</p>
  </div>
  <div class="page">
    <p>Conclusions  RCP embodies two principles for inter-domain</p>
    <p>routing  Treat an AS as a single logical entity</p>
    <p>Compute consistent routes using complete AS-wide view</p>
    <p>Control routing protocol interactions</p>
    <p>Benefits  Simpler, more expressive configuration</p>
    <p>Intrinsic robustness: no loops, faster convergence</p>
    <p>Enable new applications and innovations  Opportunity for new traffic engineering applications</p>
  </div>
  <div class="page">
    <p>More information FDNA 04 paper The Case for Separating Routing from Routers Nick Feamster, Hari Balakrishnan, Jennifer Rexford, Aman Shaikh,</p>
    <p>Kobus van der Merwe</p>
    <p>http://www.research.att.com/~ashaikh/publications.html</p>
  </div>
</Presentation>
