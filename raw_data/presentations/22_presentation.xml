<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PROP: A Scalable and Reliable P2P PROP: A Scalable and Reliable P2P Assisted Proxy Streaming SystemAssisted Proxy Streaming System</p>
    <p>Computer Science Department</p>
    <p>College of William and Mary</p>
    <p>Lei Guo, Songqing Chen, and Xiaodong Zhang</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>System architecture</p>
    <p>Resource management</p>
    <p>Performance evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Media Streaming in Internet</p>
    <p>Rapidly growing applications  Scientific data retrieval and processing  Commercial applications  Education and professional training  Entertainments</p>
    <p>Challenges  Large size of media objects  Real time requirement of media content delivering</p>
  </div>
  <div class="page">
    <p>Existing Systems</p>
    <p>Content Delivery Network (CDN)  Performance effective but very expensive  Need dedicated hardware and administration</p>
    <p>Proxy-based media caching  Cost effective but not scalable  Limited storage and bandwidth</p>
    <p>Client-based P2P collaboration  Scalable, cost effective but does not guarantee QoS  Non-dedicated service  Peers come and go frequently</p>
  </div>
  <div class="page">
    <p>PROP: Design Rationale</p>
    <p>Integrate proxy caching and P2P collaboration techniques</p>
    <p>Coordinate the proxy and its P2P clients The functions of proxy and clients are complementary  Media proxy works as a backup server</p>
    <p>To provide a reliable and dedicated service</p>
    <p>Clients self-organize into a P2P system  To provide a scalable and cost-effective service</p>
    <p>Build a scalable and reliable proxy system for on demand media streaming from media providers</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>System architecture</p>
    <p>Resource management</p>
    <p>Performance evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Infrastructure Overview</p>
    <p>Internet</p>
    <p>Media Server</p>
    <p>Firew allFirewall Media Proxy</p>
    <p>P2P Overlay Content Addressable</p>
    <p>Network</p>
    <p>Intranet DHT</p>
    <p>DHT DHT</p>
    <p>DHT DHT</p>
    <p>DHT</p>
    <p>DHT</p>
  </div>
  <div class="page">
    <p>System Components</p>
    <p>Media proxy  Interface between the system and media servers</p>
    <p>Bootstrap site of the system</p>
    <p>P2P overlay of users, in which each peer is  A client</p>
    <p>A streaming server</p>
    <p>An index server and router</p>
  </div>
  <div class="page">
    <p>Media Proxy</p>
    <p>Bootstrap</p>
    <p>Fetch media data from media server</p>
    <p>Cache media objects by segment</p>
    <p>Serve media data for clients</p>
    <p>New client join</p>
    <p>Media server</p>
    <p>Media proxyMedia proxy</p>
    <p>Client A</p>
    <p>Client B</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Request and receive data</p>
    <p>Playback</p>
    <p>Cache data locally</p>
    <p>Peer as a Client</p>
  </div>
  <div class="page">
    <p>Peer as a Streaming Server</p>
    <p>Local Cache</p>
    <p>Client B</p>
    <p>Client A</p>
    <p>Receive requests</p>
    <p>Stream media data</p>
    <p>Peer (Streaming Server)</p>
  </div>
  <div class="page">
    <p>DHT</p>
    <p>Routing table</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment Index</p>
    <p>peer peer</p>
    <p>proxy</p>
    <p>Segment ID value</p>
    <p>Peer as an Index Server/Router</p>
    <p>??</p>
    <p>Is Segment ID in my key space?</p>
    <p>Yes</p>
    <p>No</p>
    <p>key</p>
    <p>??</p>
    <p>peer</p>
    <p>peer</p>
    <p>Peer (index server/router)</p>
  </div>
  <div class="page">
    <p>Basic Operations</p>
    <p>Publishing and unpublishing media segments  publish (seg_id, location)  unpublish (seg_id, location)</p>
    <p>Requesting and serving media segments  request (seg_id, URL)</p>
    <p>Updating segment popularity and utility values  update (seg_id, value)  notify (peerset, seg_id, value)</p>
  </div>
  <div class="page">
    <p>Peer Serves Streaming</p>
    <p>Internet</p>
    <p>Media Server</p>
    <p>Firew allFirewall Media Proxy</p>
    <p>P2P Overlay DHT</p>
    <p>DHT DHT</p>
    <p>DHT DHT DHT</p>
    <p>DHT</p>
    <p>?? Overlay routing</p>
    <p>Point to point</p>
    <p>ready? OK !</p>
  </div>
  <div class="page">
    <p>Peer Serves Streaming</p>
    <p>Internet</p>
    <p>Media Server</p>
    <p>Firew allFirewall Media Proxy</p>
    <p>P2P Overlay DHT</p>
    <p>DHT DHT</p>
    <p>DHT DHT DHT</p>
    <p>DHT</p>
    <p>Overlay routing</p>
    <p>Point to point</p>
    <p>publish</p>
    <p>Seg ID  IP: port</p>
  </div>
  <div class="page">
    <p>Proxy Fetches Data</p>
    <p>Internet</p>
    <p>Media Server</p>
    <p>Firew allFirewall Media Proxy</p>
    <p>P2P Overlay DHT</p>
    <p>DHT DHT</p>
    <p>DHT DHT DHT</p>
    <p>DHT</p>
    <p>Overlay routing</p>
    <p>Point to point</p>
    <p>NULNUL LL</p>
    <p>ask proxy to fetchpublish</p>
    <p>??</p>
  </div>
  <div class="page">
    <p>Routing Overhead</p>
    <p>request and update operation:  1 request/update + 1 ACK</p>
    <p>notify operation:  Sending msg to all peers caching the segment (peerset)</p>
    <p>Reduce routing overhead  Postpone notify operations if popularity/utility value changes little  Keep peerset in a moderate size  Routing traffic &lt; 1% streaming traffic for 100K segment size</p>
    <p>Further reduce routing overhead  Increase segment size  Use variable-sized segmentation: exponential segmentation,</p>
    <p>adaptive/lazy segmentation</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>System architecture</p>
    <p>Resource management</p>
    <p>Performance evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Data Management</p>
    <p>Each client maintains its cache separately?  Not efficient: popular media data have too many replicas  Not effective:</p>
    <p>a single streaming session can flush all cached data  1 hour streaming video may consume more than 100MB cache  Similar to the case in file scan operations</p>
    <p>many media are accessed only once  People are not interested in viewing the same movie repeatedly</p>
    <p>Exploit locality of all clients collectively?  Global cache: each peer maintains cached data based on the</p>
    <p>access of all clients, instead of itself  Keep both popular and unpopular media data  Consider both the popularity and replica number of media objects</p>
  </div>
  <div class="page">
    <p>Popularity of Media Segments</p>
    <p>segment meta data  T0: first access time  Tr: most recent access time  Ssum: total accessed bytes  S0: segment size  n: # of requests  r: # of copies</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment index</p>
  </div>
  <div class="page">
    <p>Popularity of Media Segments</p>
    <p>segment meta data  T0: first access time  Tr: most recent access time  Ssum: total accessed bytes  S0: segment size  n: # of requests  r: # of copies</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment index</p>
    <p>popularity ),1min(*)( 0</p>
    <p>n TT</p>
    <p>r</p>
    <p>S S</p>
    <p>TtTT tp</p>
    <p>rsum</p>
  </div>
  <div class="page">
    <p>average access rate in the past</p>
    <p>Popularity of Media Segments</p>
    <p>segment meta data  T0: first access time  Tr: most recent access time  Ssum: total accessed bytes  S0: segment size  n: # of requests  r: # of copies</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment index</p>
    <p>popularity ),1min(*)( 0</p>
    <p>n TT</p>
    <p>r</p>
    <p>S S</p>
    <p>TtTT tp</p>
    <p>rsum</p>
  </div>
  <div class="page">
    <p>average access rate in the past probability of future access</p>
    <p>Popularity of Media Segments</p>
    <p>segment meta data  T0: first access time  Tr: most recent access time  Ssum: total accessed bytes  S0: segment size  n: # of requests  r: # of copies</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment index</p>
    <p>popularity ),1min(*)( 0</p>
    <p>n TT</p>
    <p>r</p>
    <p>S S</p>
    <p>TtTT tp</p>
    <p>rsum</p>
  </div>
  <div class="page">
    <p>average access rate in the past probability of future access</p>
    <p>Popularity of Media Segments</p>
    <p>segment meta data  T0: first access time  Tr: most recent access time  Ssum: total accessed bytes  S0: segment size  n: # of requests  r: # of copies</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment index</p>
    <p>popularity</p>
    <p>n TT</p>
    <p>r rTt 0</p>
    <p>average access interval in the past</p>
    <p>),1min(*)( 0</p>
    <p>n TT</p>
    <p>r</p>
    <p>S S</p>
    <p>TtTT tp</p>
    <p>rsum</p>
    <p>future access prob. is small</p>
  </div>
  <div class="page">
    <p>average access rate in the past probability of future access</p>
    <p>Popularity of Media Segments</p>
    <p>segment meta data  T0: first access time  Tr: most recent access time  Ssum: total accessed bytes  S0: segment size  n: # of requests  r: # of copies</p>
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment index</p>
    <p>popularity the popularity of media objects the popularity of media objects fades with time goingfades with time going</p>
    <p>n TT</p>
    <p>r rTt 0</p>
    <p>average access interval in the past</p>
    <p>),1min(*)( 0</p>
    <p>n TT</p>
    <p>r</p>
    <p>S S</p>
    <p>TtTT tp</p>
    <p>rsum</p>
    <p>future access prob. is small</p>
  </div>
  <div class="page">
    <p>Utility of Cached Media Segments</p>
    <p>Media data are cached with the progress of media accessing</p>
    <p>Each media segment may have multiple copies cached in the system</p>
    <p>The popularity of media objects/segments  follows heavy tail distribution</p>
    <p>varies with time going</p>
    <p>Segments with small popularity and large number of replicas</p>
    <p>Segments with large popularity and large number of replicas</p>
    <p>Define the segment utility function</p>
    <p>Segment with smallest utility should be evicted</p>
    <p>r</p>
    <p>pp</p>
    <p>r</p>
    <p>pp</p>
    <p>r</p>
    <p>pppp tu</p>
  </div>
  <div class="page">
    <p>Distribution of Segment Replicas  Resilient to peer failure</p>
    <p>Segments of an object should be distributed across multiple peers instead of a single peer</p>
    <p>Balancing load of media serving  Popular segments should have more copies in the system</p>
    <p>proxy 0 1 2 3 4 5</p>
    <p>media object</p>
    <p>Use replacement operations to achieve such a distributionUse replacement operations to achieve such a distribution</p>
    <p>popular unpopular</p>
  </div>
  <div class="page">
    <p>Cache Replacement</p>
    <p>Proxy cache replacement  popularity-based</p>
    <p>segments with the smallest popularity are replaced</p>
    <p>better than LRU</p>
    <p>Peer cache replacement  utility-based</p>
    <p>segments with the smallest utility value are replaced</p>
    <p>proxy</p>
    <p>object 1</p>
    <p>object 2</p>
  </div>
  <div class="page">
    <p>pointers to serving peers</p>
    <p>meta data</p>
    <p>Segment Index</p>
    <p>peer peer</p>
    <p>proxy</p>
    <p>Streaming Task Dispatch</p>
    <p>The index maintains a list of serving peers, including the proxy</p>
    <p>The proxy works as a backup server, takes over media streaming when necessary</p>
    <p>Peer with the largest available serving capacity is selected as the serving peer</p>
  </div>
  <div class="page">
    <p>Fault Tolerance</p>
    <p>Peer failure  Data loss: remove dead links  Index loss: DHT recovery mechanism</p>
    <p>Multiple realities</p>
    <p>Proxy failure  DHT still works (no single point of failure)</p>
    <p>Clients fetch data from media server directly</p>
    <p>Graceful degradation</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>System architecture</p>
    <p>Resource management</p>
    <p>Performance evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Metrics  Streaming jitter byte ratio</p>
    <p>percentage of requested media data that are not served to the client in time by the proxy and peers</p>
    <p>Delayed startup ratio  percentage of requests suffering startup delays</p>
    <p>Byte hit ratio  percentage of requested media data served by the proxy and</p>
    <p>peers</p>
    <p>Simulations  PROP system  Proxy caching system  Client-based P2P system</p>
  </div>
  <div class="page">
    <p>Workload Summary</p>
    <p>HP Corporate Media Solutions: REAL  Synthetic workload: WEB and PART</p>
    <p>Media object popularity follows Zipf distribution</p>
    <p>Request arrival follows Possion distribution</p>
    <p># of req # of obj # of peers size(GB) length (min)</p>
    <p>duration</p>
    <p>REAL 11559 400 1663 24 6-131 10 days</p>
    <p>WEB 15188 400 376 51 2-120 1 day</p>
    <p>PART 15188 400 376 51 2-120 1 day</p>
    <p>ifffp i N</p>
    <p>i iii /1,</p>
    <p>...2,1,0,!/*),(   xxexp x</p>
  </div>
  <div class="page">
    <p>Simulation Results</p>
    <p>Overall Performance</p>
    <p>Proxy load changes</p>
    <p>Replacement policies</p>
  </div>
  <div class="page">
    <p>Streaming Jitter Byte Ratio</p>
  </div>
  <div class="page">
    <p>Delayed Startup Ratio</p>
  </div>
  <div class="page">
    <p>Byte Hit Ratio</p>
  </div>
  <div class="page">
    <p>Simulation Results</p>
    <p>Overall Performance</p>
    <p>Proxy load changes</p>
    <p>Replacement policies</p>
  </div>
  <div class="page">
    <p>Proxy Load</p>
    <p>Proxy load: the total amount of bytes it serves peers and total amount of bytes it fetches from the media server, normalized by the maximal possible load on the proxy.</p>
  </div>
  <div class="page">
    <p>Simulation Results</p>
    <p>Overall Performance</p>
    <p>Proxy load changes</p>
    <p>Replacement policies</p>
  </div>
  <div class="page">
    <p>Streaming Jitter Byte Ratio</p>
  </div>
  <div class="page">
    <p>Delayed Startup Ratio</p>
  </div>
  <div class="page">
    <p>Byte Hit Ratio</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>System architecture</p>
    <p>Resource management</p>
    <p>Performance evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Propose a scalable and reliable P2P media streaming system</p>
    <p>Address the limits of  Unscalability of proxy caching systems  Unreliable QoS of pure P2P systems</p>
    <p>Propose global replacement policies for  Proxy to maximize its cache utilization  Peers to optimize data distribution across the system</p>
  </div>
  <div class="page">
    <p>Thank you!Thank you!</p>
  </div>
</Presentation>
