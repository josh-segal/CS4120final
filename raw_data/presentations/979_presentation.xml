<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Callinicos: Robust Transactional Storage for Distributed Data Structures</p>
    <p>Ricardo Padilha, Enrique Fynn, Robert Soul and Fernando Pedone University of Lugano (USI) Switzerland</p>
  </div>
  <div class="page">
    <p>The storage tradeoff</p>
    <p>Performance Consistency</p>
    <p>Eventual consistency Causal consistency</p>
    <p>Linearizability SerializabilityScalable, low latency</p>
    <p>Not scalable, high latency</p>
    <p>mini-transactions [TOCS 2009]</p>
  </div>
  <div class="page">
    <p>Mini-transactions are elegant</p>
    <p>Simple transaction language  Three operations: cmp, read, write  Any number in transaction</p>
    <p>Simple execution model  If all compares successful, execute reads and writes</p>
    <p>Optimized implementation  Divide transaction in sub-transactions, one per partition  Two-phase commit among sub-transactions</p>
  </div>
  <div class="page">
    <p>Mini-TX Problem 1: Too Restrictive</p>
    <p>Example: swapping two entries</p>
    <p>Transaction to swap entries A and B:</p>
    <p>swap_tx (A, B) { x = read(A); y = read(B); write(A, y); write(B, x);</p>
    <p>}</p>
    <p>Swap with minitransactions:</p>
    <p>swap_tx1(A, B) { x = read(A); y = read(B);</p>
    <p>} // return x, y</p>
    <p>swap_tx2(A, B, x, y) { cmp(A, x); cmp(B, y); write(A, y); write(B, x)</p>
    <p>}</p>
    <p>Problem 1: No notion of variables</p>
    <p>Problem 2: What if A and B are in different partitions?</p>
    <p>if abort then retry</p>
  </div>
  <div class="page">
    <p>Mini-TX Problem 2: High abort rate</p>
    <p>Optimistic concurrency control  Due to short locks during transaction execution  Due to restrictive data flow</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>es sa</p>
    <p>ge s</p>
    <p>pe r s</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Mini-transactions</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m se</p>
    <p>c)</p>
    <p>Number of clients</p>
    <p>Throughput</p>
    <p>Latency</p>
  </div>
  <div class="page">
    <p>Mini-TX Problem 3: Failure Model</p>
    <p>Crash failures Byzantine failures Mini-TX</p>
  </div>
  <div class="page">
    <p>Callinicos: armored transactions</p>
    <p>Address three problems of mini-transactions  Unrestricted operations and data flow across partitions  Contention management that avoids aborts  Byzantine fault tolerance</p>
    <p>Without giving up  Strong consistency (strict serializability)  Scalable performance</p>
    <p>Performance</p>
    <p>Scalable</p>
    <p>Consistency</p>
    <p>Strict-SR armoredtransactions</p>
  </div>
  <div class="page">
    <p>System design</p>
  </div>
  <div class="page">
    <p>Solving Mini-TX Problem 1: Richer language for unrestricted operations</p>
    <p>Example: Swapping two entries in Callinicos</p>
    <p>Transaction to swap entries:</p>
    <p>swap_tx (A, B) { x = read(A); y = read(B); write(A, y); write(B, x);</p>
    <p>}</p>
    <p>Partition 1 Partition 2</p>
    <p>Round 1 x = read(A) export(x) y = read(B) export(y)</p>
    <p>Round 2 import(y) write(A,y) import(x) write(B,x)</p>
    <p>Transaction matrix for swap:</p>
    <p>A is in Partition 1 B is in Partition 2</p>
  </div>
  <div class="page">
    <p>Solving Mini-TX Problem 1: Multi-round transactions for complex data flow</p>
    <p>Swap execution with data exchange</p>
    <p>Client</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>outcome</p>
    <p>Replica 1 Replica 2</p>
    <p>Replica 3 Replica 4 PBFT</p>
    <p>Round 1 Round 2</p>
    <p>A</p>
    <p>B data</p>
    <p>transfer execution vote and</p>
    <p>data</p>
    <p>x</p>
    <p>y</p>
    <p>write(A,y)</p>
    <p>write(B,x)</p>
    <p>executiontransaction matrix</p>
    <p>vote and data</p>
    <p>x</p>
    <p>y</p>
    <p>lock(A,B) x=read(A)</p>
    <p>lock(A,B) y=read(B)</p>
    <p>PBFT</p>
    <p>PBFT</p>
  </div>
  <div class="page">
    <p>Solving Mini-TX Problem 1: Multi-round transactions for complex data flow</p>
    <p>Round 1  Client multicasts transaction matrix to each partition (PBFT)  Replicas acquire locks, execute, return signed vote and data  Client collects signed votes and data</p>
    <p>Round i &gt; 1  Client sends signed data collected in round i-1 to partitions  Replicas receive data, execute, return signed vote and data  Client collects signed vote and data</p>
  </div>
  <div class="page">
    <p>Solving Mini-TX Problem 2: Order transactions instead of aborting them</p>
    <p>Two concurrent swap transactions</p>
    <p>Client 1</p>
    <p>Partition 1</p>
    <p>Partition 2</p>
    <p>lock(A,B) execute</p>
    <p>Client 2</p>
    <p>Round 1</p>
    <p>conflict,T2</p>
    <p>data,T1</p>
    <p>Ordering round</p>
    <p>T1,T2 T=max(T1,T2) reorder locks re-execute</p>
    <p>T=max(T1,T2) reorder locks re-execute</p>
    <p>lock(A,B) execute</p>
  </div>
  <div class="page">
    <p>Solving Mini-TX Problem 2: Order transactions instead of aborting them</p>
    <p>Round 1(extension)  Server assigns timestamp to transaction; locks are ordered  Server returns timestamp; upon conflict, notifies client  Client collects signed timestamps, votes and data</p>
    <p>Ordering round  Client sends signed timestamps and data to partitions  Replicas compute final timestamp, possibly [re-acquire locks</p>
    <p>and re-execute], and return signed vote and data  Client collects signed vote and data</p>
  </div>
  <div class="page">
    <p>Solving Mini-TX Problem 3: Coping with Byzantine clients and servers</p>
    <p>Byzantine servers [PBFT, TOCS 2002]  Within a partition: state machine replication  Each partition needs 3f+1 replicas, f : byzantine servers</p>
    <p>Byzantine clients [Augustus, Eurosys 2013]  Safety is not violated (strict serializability)  Liveness guarantees under attack</p>
    <p>Unfinished transactions (fixed by correct clients), among others</p>
    <p>Does not provide absolute liveness guarantees (possible?)</p>
  </div>
  <div class="page">
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Implementation and evaluation</p>
    <p>Prototype implemented in Java 7  PBFT and transaction processing engine  Benchmarks</p>
    <p>Kassia: distributed message queue  Natural point of contention (queue tail)</p>
    <p>Buzzer: distributed graph store  Configurable contention, dependent on graph structure</p>
  </div>
  <div class="page">
    <p>Kassia: distributed message queue</p>
    <p>Producers  Add messages to the queue  Contend with producers and consumers</p>
    <p>Consumers  Scan the queue, without removing elements  Contend with producers</p>
  </div>
  <div class="page">
    <p>Kassia: distributed message queue</p>
    <p>Producer transaction:</p>
    <p>producer(new_msg) { x = read(tail_index); x = x + 1; write(x, new_msg); write(tail_index, x);</p>
    <p>}</p>
    <p>Consumer transaction:</p>
    <p>consumer( ) { x = read(head_index); y = read(tail_index); z = range_query(x,y); return z;</p>
    <p>}</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>P4</p>
    <p>A1,m1</p>
    <p>head_index tail_index</p>
    <p>A2,m2</p>
    <p>A3,m3</p>
    <p>A4,m4</p>
    <p>A5,m5</p>
    <p>A6,m6</p>
  </div>
  <div class="page">
    <p>Performance highlight 1: Callinicos scales with partitions</p>
    <p>One queue per partition, six producers per partition</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (t</p>
    <p>ps )</p>
    <p>Number of partitions</p>
  </div>
  <div class="page">
    <p>Performance highlight 2: No performance loss with contention</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>es sa</p>
    <p>ge s</p>
    <p>pe r s</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Callinicos Mini-transactions</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m se</p>
    <p>c)</p>
    <p>Number of clients</p>
    <p>Producers only: high contention</p>
    <p>Number of producers</p>
  </div>
  <div class="page">
    <p>Performance highlight 3: Good performance without contention</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (m</p>
    <p>es sa</p>
    <p>ge s</p>
    <p>pe r s</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Callinicos Mini-transactions</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m se</p>
    <p>c)</p>
    <p>Number of clients</p>
    <p>Consumers only: no contention</p>
    <p>Number of consumers</p>
  </div>
  <div class="page">
    <p>Final remarks</p>
    <p>Callinicos extends mini-transactions  Unrestricted operations and data flow across partitions  Contention management  Byzantine fault tolerance</p>
    <p>Without giving up  Strong consistency (strict serializability)  Scalable performance</p>
  </div>
  <div class="page">
    <p>https://github.com/usi-systems/callinicos</p>
    <p>THANK YOU!</p>
  </div>
</Presentation>
