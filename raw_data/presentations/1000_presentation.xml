<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hyperbolic Caching: Flexible Caching for Web Applications</p>
    <p>Aaron Blankstein</p>
    <p>Princeton University</p>
    <p>(now @ Blockstack Inc.)</p>
    <p>Siddhartha Sen</p>
    <p>Microsoft Research NY</p>
    <p>Michael J. Freedman</p>
    <p>Princeton University</p>
  </div>
  <div class="page">
    <p>Modern Web Applications</p>
    <p>Ubiquitous, important, diverse</p>
  </div>
  <div class="page">
    <p>Users Expect Performance</p>
    <p>Diversity of app ecosystem makes this hard</p>
    <p>Improving web app performance is not trivial</p>
    <p>Application caches are aggressively deployed for this</p>
    <p>But can hit rates be improved?</p>
  </div>
  <div class="page">
    <p>Application Caching on the Web</p>
    <p>Web Tier Storage Tier</p>
    <p>A-L</p>
    <p>M-Z</p>
    <p>Cache Tier</p>
    <p>Web-like Request Patterns</p>
    <p>Varying item costs  Item Expirations  Etc.</p>
  </div>
  <div class="page">
    <p>Cache Performance is About Eviction</p>
    <p>For long-tailed workloads, you CANNOT cache everything</p>
    <p>Hit rate (and miss rate) will depend on what you kick out</p>
    <p>Ideally  kick out things that are least likely to be requested</p>
  </div>
  <div class="page">
    <p>Tailoring Cache Eviction</p>
    <p>Web apps are different than disk or CPU caches:</p>
    <p>Size and cost are important!</p>
    <p>Request patterns are different</p>
    <p>Two goals of a tailored eviction strategy:</p>
    <p>Tailor to web-specific request distributions</p>
    <p>Tailor to the varying needs of different app settings</p>
  </div>
  <div class="page">
    <p>Traditional Caching Strategies Have Issues</p>
    <p>LRU and other recency based approaches:  Perform generally very well, but on stable, memoryless distributions,</p>
    <p>outperformed by frequency strategies</p>
    <p>LFU:  Problems with traditional implementation (evict item with fewest hits)</p>
    <p>Punishes new items</p>
    <p>Old items may survive even after dropping in importance</p>
  </div>
  <div class="page">
    <p>Many Variants to Improve These Strategies</p>
    <p>GreedyDual incorporates cost with recency</p>
    <p>k-LRU uses multiple LRU queues (ARC is a self-balancing approach)</p>
    <p>Some even model this as an optimization problem</p>
  </div>
  <div class="page">
    <p>Many Variants to Improve These Strategies</p>
    <p>GreedyDual incorporates cost with recency</p>
    <p>k-LRU uses multiple LRU queues (ARC is a self-balancing approach)</p>
    <p>Some even model this as an optimization problem</p>
    <p>Problem: All limited by use of an eviction data structure!</p>
  </div>
  <div class="page">
    <p>Key Insight:</p>
    <p>Decouple item priorities from eviction data structures</p>
  </div>
  <div class="page">
    <p>But How to Evict? Use Random Sampling</p>
    <p>We can use random sampling for eviction</p>
    <p>Now, item priorities do not necessarily need to be tied to a particular data structure</p>
    <p>This opens up the design space for prioritization</p>
  </div>
  <div class="page">
    <p>Why Now?</p>
    <p>Systems such as Redis already use random sampling  Use for efficiency and simplicity of implementation</p>
    <p>Approximates LRU</p>
    <p>Theoretical justification already exists (Psounis and Prabhakar)</p>
    <p>However, no one has proposed a strategy that leverages this flexibility</p>
  </div>
  <div class="page">
    <p>Hyperbolic Caching</p>
    <p>Flexible caching scheme</p>
    <p>Define priority function and do lazy evaluation with sampling to evict</p>
    <p>Focus on defining how important an object is, not data structures!</p>
  </div>
  <div class="page">
    <p>Hyperbolic Caching</p>
    <p>We define priority function</p>
    <p>=</p>
    <p>We allow for many different variations on this priority scheme</p>
  </div>
  <div class="page">
    <p>Hyperbolic Caching</p>
    <p>We define priority function</p>
    <p>=</p>
    <p>We allow for many different variations on this priority scheme</p>
    <p>Frequency captures independent draws</p>
    <p>property of workloads</p>
    <p>Addresses problems of LFU by measuring relative popularity</p>
  </div>
  <div class="page">
    <p>Implementing Hyperbolic Caching</p>
    <p>Traditional eviction uses data structures for ordering</p>
    <p>Hyperbolic caching creates item re-orderings</p>
    <p>Example:</p>
    <p>Item requests: A A B C C</p>
    <p>A and B reordered when unrelated item is requested!</p>
    <p>We can only do this because of random sampling!</p>
  </div>
  <div class="page">
    <p>Performance on Static Workload</p>
    <p>Items sampled from a static zipfian popularity distribution</p>
    <p>-30%</p>
    <p>-25%</p>
    <p>-20%</p>
    <p>-15%</p>
    <p>-10%</p>
    <p>-5%</p>
    <p>% C</p>
    <p>h a</p>
    <p>n g</p>
    <p>e i</p>
    <p>n M</p>
    <p>is s</p>
    <p>R a</p>
    <p>te</p>
    <p>Cache Size (in objects)</p>
    <p>Miss Rate Performance compared to LRU</p>
    <p>HC LFU</p>
  </div>
  <div class="page">
    <p>Performance on Memcachier Traces</p>
    <p>Cache sizes chosen by app developers</p>
    <p>-25%</p>
    <p>-20%</p>
    <p>-15%</p>
    <p>-10%</p>
    <p>-5%</p>
    <p>% M</p>
    <p>is s</p>
    <p>R a</p>
    <p>te D</p>
    <p>e lt</p>
    <p>a</p>
    <p>Memcachier Application #</p>
    <p>HC Miss Rate Compared to LRU Miss Rate</p>
  </div>
  <div class="page">
    <p>Tailoring Caching for App Needs</p>
  </div>
  <div class="page">
    <p>Tailoring Hyperbolic Caching</p>
    <p>Item costs</p>
    <p>Items may impose different CPU or DB load on misses</p>
    <p>Item sizes affect per-item hit rate</p>
    <p>Expiration times</p>
    <p>Apps can give expirations to prevent staleness</p>
    <p>Item classes</p>
    <p>Items may have related costs, and should have grouped costs</p>
    <p>=   ()</p>
    <p>= (1  (  ))  ()</p>
    <p>= ()  ()</p>
  </div>
  <div class="page">
    <p>Cost-Aware Caching: State of the Art</p>
    <p>GreedyDual is well-known approach for incorporating cost</p>
    <p>However, implementation is not trivial  LRU-&gt;GD requires changing the caches data structures</p>
    <p>HC -&gt; HC+Cost just adds metadata and redefines priority function</p>
    <p>Furthermore, GD suffers on web workloads, because it is a recency based approach</p>
  </div>
  <div class="page">
    <p>Cost-Aware Perf. on Memcachier Traces</p>
    <p>-60%</p>
    <p>-40%</p>
    <p>-20%</p>
    <p>% M</p>
    <p>is s</p>
    <p>R a</p>
    <p>te D</p>
    <p>e lt</p>
    <p>a</p>
    <p>Memcachier Application #</p>
    <p>Miss Rates Compared to LRU Miss Rate</p>
    <p>HC HC Size GD Size</p>
  </div>
  <div class="page">
    <p>Cost Classes</p>
    <p>Measure moving average of item costs over the class</p>
    <p>Cost of class can be updated while item A in cache</p>
    <p>Updating whole class very easy in our scheme</p>
    <p>Example use cases:  Class of items shares the same backend and related load</p>
    <p>= ()  ()</p>
  </div>
  <div class="page">
    <p>Dealing with Backend Load</p>
    <p>Items are requested from two different backends</p>
    <p>At time t=120, one server is stressed</p>
    <p>th p</p>
    <p>cn ti</p>
    <p>le La</p>
    <p>te n</p>
    <p>cy (</p>
    <p>m s)</p>
    <p>Time (s)</p>
    <p>Per-Item</p>
    <p>Per-Class</p>
  </div>
  <div class="page">
    <p>Hyperbolic Caching Related Work</p>
    <p>Recent Application Cache Eviction Work  RIPQ  implementing size-awareness on flash</p>
    <p>GDWheel  fast implementation of GD</p>
    <p>CliffScaler  improving the LRU approx. of Memcached</p>
    <p>Web Proxy Caching  Many different projects demonstrating performance benefits of GD</p>
    <p>Hyperbolic Cachings prioritization outperforms these on our workloads</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Focusing on prioritizing items, hyperbolic caching improves caching performance on web-like workloads</p>
    <p>The scheme allows for a multitude of easily constructed variants</p>
    <p>We demonstrate performance as good as competitive baselines, and in many cases much better</p>
    <p>Fork us! Our Redis prototype and simulation code are at: github.com/kantai/hyperbolic-caching</p>
  </div>
</Presentation>
