<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scaling Verifiable Computation Using Efficient Set Accumulators</p>
    <p>USENIX Security, 2020</p>
    <p>Alex Ozdemir*, Riad Wahby*, Barry Whitehat^, Dan Boneh*</p>
    <p>*Stanford ^Unaffiliated</p>
  </div>
  <div class="page">
    <p>Verifiable Storage</p>
    <p>Represent a large storage (e.g. array) with a small digest</p>
    <p>Verifiably read and update the digest</p>
    <p>(,,,)</p>
    <p>(,,, ,)</p>
    <p>Prover(,) Verifier()</p>
    <p>,,</p>
    <p>, ,,</p>
    <p>[]</p>
    <p>()</p>
    <p>Goal: Efficient Verification!</p>
    <p>Application: Verifiable Outsourcing (e.g. smart contracts)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Merkle Trees (existing approach)</p>
    <p>RSA Accumulators (proposed approach)</p>
    <p>Our Work:  Implementing RSA Accumulators</p>
    <p>Demonstrating that they are cheaper in some situations</p>
  </div>
  <div class="page">
    <p>Computational Model</p>
    <p>Inherited from verifiable outsourcing</p>
    <p>The arithmetic constraint computational model (constraints)  Data encoded in a large finite field (integers mod ,   2256)</p>
    <p>Constraints are expressed as equations of sums &amp; products in the field  One multiplication per constraint!</p>
    <p>Goal: minimize the number of constraints</p>
    <p>The prover can provide advice  E.g. the inverse of a field element.</p>
    <p>Computable using Fermats little theorem (many constraints)</p>
    <p>Checkable using 1 constraint.</p>
  </div>
  <div class="page">
    <p>Merkle Trees</p>
    <p>Based on a hash function :      Collision-Resistant</p>
    <p>Reduce the array to a single value with a hash-tree</p>
    <p>Proofs based on paths in the tree</p>
    <p>x0 x1 x2 x3 x4 x5 x6 x7</p>
    <p>H</p>
    <p>H H H H</p>
    <p>H</p>
    <p>H</p>
    <p>0 1</p>
    <p>2</p>
    <p>3 4</p>
    <p>5</p>
    <p>Verification cost:  hashes for  updates and a storage of capacity .</p>
  </div>
  <div class="page">
    <p>RSA Accumulators</p>
    <p>Based on RSA groups  The integers modulo : the produce of two unknown primes.</p>
    <p>Hard to compute roots.   is easy,   is hard.</p>
    <p>The digest of an RSA Accumulator is</p>
    <p>=</p>
    <p>Fixed generator</p>
    <p>A (special) hash function</p>
    <p>The stored elements</p>
  </div>
  <div class="page">
    <p>RSA Accumulator Proofs</p>
    <p>Insertion proof:  Verifier checks an expontiaion</p>
    <p>Removal proof:  Insertion in reverse</p>
    <p>Membership proof:  A removal proof, but the new digest is forgotten</p>
    <p>Sound because computing roots is hard!</p>
    <p>Batches require a single exponentiation [BBF 18]/[Wes 18]  Requires a hash function to prime numbers (for non-interactivity)</p>
    <p>=</p>
    <p>Verification cost:   +   for  updates and a storage of capacity .</p>
  </div>
  <div class="page">
    <p>Traditional Hash-to-Prime</p>
    <p>Rejection sampling of primes</p>
    <p>Miller Rabin primality test  Probabilistic!</p>
    <p>2 soundness uses (),   bit exponentiations</p>
    <p>Many constraints</p>
    <p>procedure HashToPrime(x):</p>
    <p>g  ( = )</p>
    <p>while .output() is composite:</p>
    <p>.advance()</p>
    <p>Return .output()</p>
  </div>
  <div class="page">
    <p>Pocklington Prime Generation</p>
    <p>Pocklingtons criterion:  If</p>
    <p>is prime</p>
    <p>&lt;   .  +1 1 gcd</p>
    <p>1, + 1 = 1</p>
    <p>Then  + 1 is prime</p>
    <p>Basis for a recursive primality certificate  Idea: Rejection sampling of prime</p>
    <p>certificates</p>
    <p>0</p>
    <p>1</p>
    <p>2</p>
    <p>3</p>
    <p>Ps Criterion with 1</p>
    <p>Ps Criterion with 2</p>
    <p>Ps Criterion with 3</p>
    <p>Base prime test</p>
    <p>PRG-based rejection sampling</p>
    <p>Many fewer constraints than Miller-Rabin, and provably prime</p>
  </div>
  <div class="page">
    <p>Other Techniques and Tricks</p>
    <p>Multiprecision arithmetic in constraints  Based on xjSnark [KPS 18]</p>
    <p>A new hash function, conjectured to be division-intractable</p>
    <p>Precise semantics for batching dependent accesses.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementation in Bellman, using Groth16.</p>
    <p>Consider storage of varying size</p>
    <p>Perform varying numbers of swaps (remove x, add y)</p>
    <p>Measure constraints</p>
    <p>Crossover occurs at a few thousand operations</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Techniques</p>
    <p>Multiprecision arithmetic</p>
    <p>Division-intractable hashing</p>
    <p>Hashing to prime numbers</p>
    <p>Semantics of dependent accesses</p>
    <p>ConclusionsResearch Question</p>
    <p>Do RSA accumulators use fewer constraints than Merkle Trees?</p>
    <p>Implementation: github.com/alex-ozdemir/bellman-bignat</p>
  </div>
</Presentation>
