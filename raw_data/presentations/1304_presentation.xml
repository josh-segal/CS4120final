<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>High Availability, Scalable Storage, Dynamic Peer</p>
    <p>Networks: Pick Two Charles Blake</p>
    <p>Rodrigo Rodrigues</p>
    <p>cb@mit.edu, rodrigo@lcs.mit.edu.</p>
    <p>LCS at MIT</p>
  </div>
  <div class="page">
    <p>The P2P Dream</p>
    <p>Faster</p>
    <p>Slow</p>
    <p>Slower</p>
    <p>Fastest</p>
    <p>Fast</p>
    <p>Slowest</p>
    <p>Flaky Stable</p>
    <p>Idle, Cheap Disk 10..100s of GB/node ofFlaky</p>
  </div>
  <div class="page">
    <p>The P2P Dream</p>
    <p>Faster</p>
    <p>FaultTolerant DHT Pixie Dust</p>
    <p>Slow</p>
    <p>Slower</p>
    <p>Fastest</p>
    <p>Fast</p>
    <p>Slowest</p>
    <p>Flaky Stable</p>
    <p>Idle, Cheap Disk 10..100s of GB/node ofFlaky</p>
  </div>
  <div class="page">
    <p>The P2P Dream</p>
    <p>Faster</p>
    <p>FaultTolerant DHT Pixie Dust</p>
    <p>Slow</p>
    <p>Slower</p>
    <p>Fastest</p>
    <p>Fast</p>
    <p>Slowest</p>
    <p>Flaky Stable</p>
    <p>w/all the *ilities: Distributed Data Store</p>
    <p>Maintainability, Flexibility, ...</p>
    <p>High Reliability, Good Scalability, High Availability,</p>
    <p>Idle, Cheap Disk 10..100s of GB/node ofFlaky</p>
  </div>
  <div class="page">
    <p>The P2P Dream</p>
    <p>Faster</p>
    <p>FaultTolerant DHT Pixie Dust</p>
    <p>Slow</p>
    <p>Slower</p>
    <p>Fastest</p>
    <p>Fast</p>
    <p>Slowest</p>
    <p>Flaky Stable</p>
    <p>w/all the *ilities: Distributed Data Store</p>
    <p>Maintainability, Flexibility, ...</p>
    <p>High Reliability, Good Scalability, High Availability,</p>
    <p>Idle, Cheap Disk 10..100s of GB/node ofFlaky</p>
    <p>How realistic is this dream?</p>
  </div>
  <div class="page">
    <p>Talk Overview</p>
    <p>Basic Scenario</p>
    <p>Simplified Model  The Bad News</p>
    <p>Elaborate on Simplifications</p>
    <p>Address Partial Availability</p>
    <p>Hardware Trends</p>
    <p>Gnutella Statistics</p>
    <p>Questions about Basic P2P Premises</p>
  </div>
  <div class="page">
    <p>Basic Scenario</p>
    <p>N nodes (N probably  10,000) ...using similar bandwidth &amp; disk ...cooperatively serving D bytes of data ...placed randomly about the Internet</p>
    <p>Members can leave! (true data loss)</p>
    <p>P (Leave)/T ime = Leaves/T ime/N</p>
    <p>= 1/Lif etime</p>
    <p>Storage promise  Redundancy promise  data must move as members leave!  lower bound on bandwidth usage</p>
  </div>
  <div class="page">
    <p>Basic Scenario</p>
    <p>N nodes (N probably  10,000) ...using similar bandwidth &amp; disk ...cooperatively serving D bytes of data ...placed randomly about the Internet</p>
    <p>Members can leave! (true data loss)</p>
    <p>P (Leave)/T ime = Leaves/T ime/N</p>
    <p>= 1/Lif etime</p>
    <p>Storage promise  Redundancy promise  data must move as members leave!  lower bound on bandwidth usage</p>
  </div>
  <div class="page">
    <p>Basic Scenario</p>
    <p>N nodes (N probably  10,000) ...using similar bandwidth &amp; disk ...cooperatively serving D bytes of data ...placed randomly about the Internet</p>
    <p>Members can leave! (true data loss)</p>
    <p>P (Leave)/T ime = Leaves/T ime/N</p>
    <p>= 1/Lif etime</p>
    <p>Storage promise  Redundancy promise  data must move as members leave!  lower bound on bandwidth usage</p>
  </div>
  <div class="page">
    <p>BW for Redundancy Maintenance Assume average system size, N , stable</p>
    <p>Join = Leave forever rate = 1/Lifetime</p>
    <p>Leaves induce redundancy replacement replacement size  replacement rate</p>
    <p>Joins cost the same</p>
  </div>
  <div class="page">
    <p>BW for Redundancy Maintenance Assume average system size, N , stable</p>
    <p>Join = Leave forever rate = 1/Lifetime</p>
    <p>Leaves induce redundancy replacement replacement size  replacement rate</p>
    <p>Joins cost the same</p>
  </div>
  <div class="page">
    <p>BW for Redundancy Maintenance Assume average system size, N , stable</p>
    <p>Join = Leave forever rate = 1/Lifetime</p>
    <p>Leaves induce redundancy replacement replacement size  replacement rate</p>
    <p>Joins cost the same</p>
  </div>
  <div class="page">
    <p>BW for Redundancy Maintenance Assume average system size, N , stable</p>
    <p>Join = Leave forever rate = 1/Lifetime</p>
    <p>Leaves induce redundancy replacement replacement size  replacement rate</p>
    <p>Joins cost the same</p>
  </div>
  <div class="page">
    <p>BW for Redundancy Maintenance Assume average system size, N , stable</p>
    <p>Join = Leave forever rate = 1/Lifetime</p>
    <p>Leaves induce redundancy replacement replacement size  replacement rate</p>
    <p>Joins cost the same</p>
    <p>M aintenance BW &gt; 2Space/Lif etime</p>
    <p>Space/node &lt; 1 2  BW/node  Lifetime</p>
    <p>QUALITY WAN STORAGE SCALES WITH WAN BANDWIDTH &amp; MEMBER QUALITY</p>
  </div>
  <div class="page">
    <p>This Scaling is a Problem</p>
    <p>maintenance BW  200 Kbps</p>
    <p>lifetime = Median 2001-Gnutella session = 1 hour</p>
    <p>served space = 90 M B/node</p>
    <p>donatable storage!</p>
  </div>
  <div class="page">
    <p>This cost is Conservative</p>
    <p>We assume served data is totally static</p>
    <p>Serious promise  worst case</p>
    <p>Identical space &amp; bandwidth</p>
    <p>Fixed population</p>
    <p>Load-balance, Popular data more available Additional redundancy  more BW</p>
    <p>Downtime isnt leaving forever</p>
  </div>
  <div class="page">
    <p>This cost is Conservative</p>
    <p>We assume served data is totally static</p>
    <p>Serious promise  worst case</p>
    <p>Identical space &amp; bandwidth</p>
    <p>Fixed population</p>
    <p>Load-balance, Popular data more available Additional redundancy  more BW</p>
    <p>Downtime isnt leaving forever</p>
  </div>
  <div class="page">
    <p>This cost is Conservative</p>
    <p>We assume served data is totally static</p>
    <p>Serious promise  worst case</p>
    <p>Identical space &amp; bandwidth</p>
    <p>Fixed population</p>
    <p>Load-balance, Popular data more available Additional redundancy  more BW</p>
    <p>Downtime isnt leaving forever</p>
  </div>
  <div class="page">
    <p>This cost is Conservative</p>
    <p>We assume served data is totally static</p>
    <p>Serious promise  worst case</p>
    <p>Identical space &amp; bandwidth</p>
    <p>Fixed population</p>
    <p>Load-balance, Popular data more available Additional redundancy  more BW</p>
    <p>Downtime isnt leaving forever</p>
  </div>
  <div class="page">
    <p>This cost is Conservative</p>
    <p>We assume served data is totally static</p>
    <p>Serious promise  worst case</p>
    <p>Identical space &amp; bandwidth</p>
    <p>Fixed population</p>
    <p>Load-balance, Popular data more available Additional redundancy  more BW</p>
    <p>Downtime isnt leaving forever</p>
  </div>
  <div class="page">
    <p>This cost is Conservative</p>
    <p>We assume served data is totally static</p>
    <p>Serious promise  worst case</p>
    <p>Identical space &amp; bandwidth</p>
    <p>Fixed population</p>
    <p>Load-balance, Popular data more available Additional redundancy  more BW</p>
    <p>Downtime isnt leaving forever</p>
  </div>
  <div class="page">
    <p>Partial Availability Let upf rac  P (typical node is up)</p>
    <p>N bigger  More peers, some down</p>
    <p>Lifetime longer  Peers less dynamic Less effective bandwidth: B  upf rac  B</p>
    <p>Redundancy for a promise must be larger 6 nines  P (down)  1/million</p>
    <p>multiple copies: redun  15/upf rac optimal coding: redun  3/upf rac</p>
  </div>
  <div class="page">
    <p>Partial Availability Let upf rac  P (typical node is up)</p>
    <p>N bigger  More peers, some down</p>
    <p>Lifetime longer  Peers less dynamic</p>
    <p>Less effective bandwidth: B  upf rac  B</p>
    <p>Redundancy for a promise must be larger 6 nines  P (down)  1/million</p>
    <p>multiple copies: redun  15/upf rac optimal coding: redun  3/upf rac</p>
  </div>
  <div class="page">
    <p>Partial Availability Let upf rac  P (typical node is up)</p>
    <p>N bigger  More peers, some down</p>
    <p>Lifetime longer  Peers less dynamic Less effective bandwidth: B  upf rac  B</p>
    <p>Redundancy for a promise must be larger 6 nines  P (down)  1/million</p>
    <p>multiple copies: redun  15/upf rac optimal coding: redun  3/upf rac</p>
  </div>
  <div class="page">
    <p>Partial Availability Let upf rac  P (typical node is up)</p>
    <p>N bigger  More peers, some down</p>
    <p>Lifetime longer  Peers less dynamic Less effective bandwidth: B  upf rac  B</p>
    <p>Redundancy for a promise must be larger 6 nines  P (down)  1/million</p>
    <p>multiple copies: redun  15/upf rac optimal coding: redun  3/upf rac</p>
  </div>
  <div class="page">
    <p>Partial Availability Let upf rac  P (typical node is up)</p>
    <p>N bigger  More peers, some down</p>
    <p>Lifetime longer  Peers less dynamic Less effective bandwidth: B  upf rac  B</p>
    <p>Redundancy for a promise must be larger 6 nines  P (down)  1/million</p>
    <p>multiple copies: redun  15/upf rac optimal coding: redun  3/upf rac</p>
    <p>Data &lt; 1 6  upfrac2  Lifetime  BW</p>
  </div>
  <div class="page">
    <p>Availability+Edge BW Limit Storage Put in fantasy numbers for grass-roots P2P</p>
    <p>All 10 Million cable modems in the US  100 Kbps spare upstream BW  50 Kbps for redundancy maintenance  50 Kbps for downloads</p>
  </div>
  <div class="page">
    <p>Availability+Edge BW Limit Storage Put in fantasy numbers for grass-roots P2P</p>
    <p>All 10 Million cable modems in the US  100 Kbps spare upstream BW  50 Kbps for redundancy maintenance  50 Kbps for downloads</p>
    <p>Usable Space/node = 500 M B = 0.5%</p>
    <p>Unique Servable Data = 400 T B = 0.04% 5-19-03 p2p-scl  p.15/25</p>
  </div>
  <div class="page">
    <p>Wait  It Gets Worse</p>
    <p>Idle Storage Grows Much Faster than Idle Bandwidth</p>
    <p>Year Disk Speed Days to</p>
    <p>(Kbps) send a disk</p>
    <p>Utilization will likely get worse</p>
  </div>
  <div class="page">
    <p>Fantasy upfracs or Strawman?</p>
    <p>Spring 2001: 50% (Saroiu, Gummadi, Gribble)</p>
    <p>Spring 2003: 15% (Study we just did)</p>
    <p>Volunteer proliferation  availability decline?</p>
  </div>
  <div class="page">
    <p>Admission Control + Incentives Only admit &quot;reliable nodes&quot;</p>
    <p>Incentivize nodes staying up (high availability alone is not enough)</p>
    <p>Incentivize long lifetimes Things that might make lifetimes longer seem to make availability lower</p>
  </div>
  <div class="page">
    <p>Admission Control + Incentives Only admit &quot;reliable nodes&quot;</p>
    <p>Incentivize nodes staying up (high availability alone is not enough)</p>
    <p>Incentivize long lifetimes Things that might make lifetimes longer seem to make availability lower</p>
  </div>
  <div class="page">
    <p>Admission Control + Incentives Only admit &quot;reliable nodes&quot;</p>
    <p>Incentivize nodes staying up (high availability alone is not enough)</p>
    <p>Incentivize long lifetimes Things that might make lifetimes longer seem to make availability lower</p>
  </div>
  <div class="page">
    <p>Admission Control + Incentives Only admit &quot;reliable nodes&quot;</p>
    <p>Incentivize nodes staying up (high availability alone is not enough)</p>
    <p>Incentivize long lifetimes Things that might make lifetimes longer seem to make availability lower</p>
    <p>Yes, we can allow/elicit only great nodes, but...</p>
    <p>This alters a dynamism/flakiness assumption permeating current evangelical conceptions!</p>
  </div>
  <div class="page">
    <p>What are we lusting after, exactly?</p>
    <p>The 10% reliable Gnutella core could be mimicked by a half-dozen universities.</p>
    <p>Cross WAN Bandwidth is the primary cost of WAN-distributed storage</p>
    <p>BW for millions of cable modems  BW for hundreds of universities</p>
    <p>The unreliable masses only command a small fraction of the worlds SERVICE BW</p>
  </div>
  <div class="page">
    <p>Concluding Questions/Issues</p>
    <p>We dont really know what people will do Experience suggests 1 month generous What resources do millions of flaky users really bring to the table anyway?</p>
    <p>Availably scaling randomly placed data needs stable/available/high BW hosts (Whither small-state lookup optimizations?)</p>
    <p>If low availability parts are unavoidable, do we give up aggregate availability? ...or give up data scale/disk utilization? (why use millions when dozens might do?)</p>
  </div>
  <div class="page">
    <p>Concluding Questions/Issues</p>
    <p>We dont really know what people will do Experience suggests 1 month generous What resources do millions of flaky users really bring to the table anyway?</p>
    <p>Availably scaling randomly placed data needs stable/available/high BW hosts (Whither small-state lookup optimizations?)</p>
    <p>If low availability parts are unavoidable, do we give up aggregate availability? ...or give up data scale/disk utilization? (why use millions when dozens might do?)</p>
  </div>
  <div class="page">
    <p>Concluding Questions/Issues</p>
    <p>We dont really know what people will do Experience suggests 1 month generous What resources do millions of flaky users really bring to the table anyway?</p>
    <p>Availably scaling randomly placed data needs stable/available/high BW hosts (Whither small-state lookup optimizations?)</p>
    <p>If low availability parts are unavoidable, do we give up aggregate availability? ...or give up data scale/disk utilization? (why use millions when dozens might do?)</p>
  </div>
  <div class="page">
    <p>Support Slides</p>
  </div>
  <div class="page">
    <p>Left Graph Y-Scale 10X smaller Dark  available, Light  total members</p>
  </div>
  <div class="page">
    <p>upf rac2  lif etime: Then &amp; Now</p>
    <p>a ^ 2 * T</p>
    <p>grace period</p>
    <p>Spring 2001 Spring 2003</p>
  </div>
  <div class="page">
    <p>Why not use small-state lookup? Isnt designing around bad nodes just good defensive programming?</p>
    <p>Its neither free nor necessary</p>
    <p>Full info about servers  Minimum latency access Maximum bandwidth access user-specified QoS selection security  everyone tracks/knows everyone . .</p>
    <p>In the next talk, Anjali shows how to disseminate events at rates 600 X the true membership dynamics to 100,000 nodes. 5-19-03 p2p-scl  p.25/25</p>
  </div>
</Presentation>
