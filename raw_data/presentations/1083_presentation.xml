<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Zhichao Hua, Dong Du, Yubin Xia, Haibo Chen, Binyu Zang</p>
    <p>Institute of Parallel and Distributed Systems (IPADS) Shanghai Jiao Tong University</p>
    <p>EPTI: Efficient Defense against Meltdown Attack for Unpatched VMs</p>
  </div>
  <div class="page">
    <p>Meltdown Break user/kernel isolation  Allow attacker to read arbitrary kernel data</p>
    <p>Hardware bug in architecture  Hard to be fixed by micro-code patch</p>
    <p>Exist in almost all Intel CPUs produced in past 20 years</p>
  </div>
  <div class="page">
    <p>Meltdown</p>
    <p>key = 0x01</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Mapped with kernel privilege in page table</p>
    <p>Access key</p>
    <p>Permission Error!</p>
  </div>
  <div class="page">
    <p>Meltdown</p>
    <p>key = 0x01</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Mapped with kernel privilege in page table</p>
    <p>Meltdown</p>
    <p>Can access key!</p>
  </div>
  <div class="page">
    <p>Meltdown</p>
    <p>key = 0x01 Kernel</p>
    <p>User</p>
    <p>CPU</p>
    <p>Instruction Effect</p>
    <p>Cache Memory</p>
    <p>Meltdown</p>
  </div>
  <div class="page">
    <p>Meltdown</p>
    <p>key = 0x01 Kernel</p>
    <p>User</p>
    <p>CPU</p>
    <p>Load key, %rax %rax = 1</p>
    <p>Instruction Effect</p>
    <p>Reorder Execution</p>
    <p>Permission Error! 1</p>
    <p>Cache Memory</p>
    <p>buf (Attack buffer)</p>
    <p>Meltdown</p>
    <p>buf[0] buf[1] buf[2]  buf[n]</p>
    <p>Load buf[%rax], %rbx Access buf[1]</p>
    <p>Key = 1</p>
  </div>
  <div class="page">
    <p>Rollback status w/o cache status!</p>
    <p>Meltdown</p>
    <p>key = 0x01 Kernel</p>
    <p>User</p>
    <p>CPU</p>
    <p>Load key, %rax %rax = 1</p>
    <p>Instruction Effect</p>
    <p>Reorder Execution</p>
    <p>Permission Error! 1</p>
    <p>Cache Memory</p>
    <p>buf (Attack buffer)</p>
    <p>Meltdown</p>
    <p>Key = 1</p>
    <p>buf[1]</p>
    <p>buf[0] buf[1] buf[2]  buf[n]</p>
    <p>Load buf[%rax], %rbx Access buf[1]</p>
    <p>Access buf[1]</p>
    <p>Fill buf[1] to cache</p>
  </div>
  <div class="page">
    <p>Rollback status w/o cache status!</p>
    <p>Meltdown</p>
    <p>key = 0x01 Kernel</p>
    <p>User</p>
    <p>CPU</p>
    <p>Load key, %rax %rax = 1</p>
    <p>Instruction Effect</p>
    <p>Reorder Execution</p>
    <p>Permission Error! 1</p>
    <p>Cache Memory</p>
    <p>buf (Attack buffer)</p>
    <p>Meltdown</p>
    <p>Key = 1</p>
    <p>buf[1]</p>
    <p>buf[0] buf[1] buf[2]  buf[n]</p>
    <p>Load buf[%rax], %rbx Access buf[1]</p>
    <p>Access buf[1]</p>
    <p>Fill buf[1] to cache</p>
    <p>Exception</p>
    <p>Attacker finds that buf[1] is in the cache, so that key equals to 1!</p>
  </div>
  <div class="page">
    <p>Existing Solution KPTI (Kernel Page Table Isolation)  Two page tables for user and kernel space</p>
    <p>User page table only maps user space  Kernel page table maps both user and kernel space</p>
    <p>Switch the page table during user/kernel switching  Add latency to syscalls, signal handler,</p>
    <p>Not suitable for the cloud environment</p>
  </div>
  <div class="page">
    <p>KPTI</p>
    <p>KPTI</p>
    <p>Defend against Meltdown Yes</p>
    <p>Patch without manual effort No</p>
    <p>Independent on kernel version No</p>
    <p>Without rebooting No</p>
    <p>Performance overhead Moderate</p>
  </div>
  <div class="page">
    <p>KPTI vs. EPTI (Our Solution)</p>
    <p>KPTI EPTI</p>
    <p>Defend against Meltdown Yes Yes</p>
    <p>Patch without manual effort No Yes</p>
    <p>Independent on kernel version No Yes</p>
    <p>Without rebooting No Yes</p>
    <p>Performance overhead Moderate Low</p>
  </div>
  <div class="page">
    <p>Address Translation in Cloud VMs</p>
    <p>gPT translates GVA to GPA  Controlled by the guest</p>
    <p>EPT translates GPA to HPA  Controlled by the</p>
    <p>hypervisor Guest virtual address</p>
    <p>(GVA)</p>
    <p>kernel</p>
    <p>user</p>
    <p>guest physical address (GPA)</p>
    <p>host physical address (HPA)</p>
    <p>gPT (guest page table)</p>
    <p>EPT (Extended page table)</p>
  </div>
  <div class="page">
    <p>EPT Switching Switching EPT directly in the guest VM  Hardware functionality provided by Intel (with VMFUNC</p>
    <p>instruction)  Select an EPT from a list (configured by the hypervisor)  No trap to the hypervisor during the switching</p>
    <p>Performance characteristics of EPT switching  No TLB flush during switching  Low latency</p>
    <p>About 160 cycles</p>
  </div>
  <div class="page">
    <p>EPT Switching Switching EPT directly in the guest  Hardware functionality provided by Intel (with VMFUNC</p>
    <p>instruction)  Select a EPT from a list (configured by the hypervisor)  No trap to the hypervisor during switch</p>
    <p>Performance characteristics of EPT switching  No TLB flush during switching  Low latency</p>
    <p>About 160 cycles</p>
    <p>Use two EPTs to isolate the user and kernel space: EPT-k for the kernel and EPT-u for the user</p>
  </div>
  <div class="page">
    <p>Challenges How to construct the EPT-k and EPT-u to isolate user and kernel space?  Hypervisor knows limited semantics of the guest</p>
    <p>How to achieve high performance?  Getting guest semantics needs a lot of traps</p>
    <p>How to provide seamless protection?  Enable the protection without rebooting the guest</p>
  </div>
  <div class="page">
    <p>EPT-based kernel space isolation  Two EPTs (EPT-k and EPT-u) to for guest kernel and user</p>
    <p>mapping  Three optimizations to reduce the traps and improve the</p>
    <p>performance</p>
    <p>Seamless protection  Dynamically trampoline injection</p>
    <p>Trampoline using VMFUNC to switch the EPT in the guest</p>
    <p>Using live migration to enable the protection to the guest 9</p>
    <p>EPTI</p>
  </div>
  <div class="page">
    <p>EPT-based Kernel Space Isolation</p>
    <p>First try: directly remove kernel mapping in EPT-u</p>
  </div>
  <div class="page">
    <p>Nave method  Remove GPA-to-HPA</p>
    <p>mapping for kernel in EPT-u</p>
    <p>Cannot distinguish kernel-used and userused GPA</p>
    <p>EPT-based Kernel Space Isolation</p>
    <p>Guest virtual address (GVA)</p>
    <p>kernel</p>
    <p>user</p>
    <p>guest physical address (GPA)</p>
    <p>host physical address (HPA)</p>
    <p>gPT (guest page table)</p>
    <p>EPT Extended page table</p>
  </div>
  <div class="page">
    <p>Nave method  Remove GPA-to-HPA</p>
    <p>mapping for kernel in EPT-u</p>
    <p>Cannot distinguish kernel-used and userused GPA</p>
    <p>Guest virtual address (GVA)</p>
    <p>kernel</p>
    <p>user</p>
    <p>guest physical address (GPA)</p>
    <p>host physical address (HPA)</p>
    <p>gPT (guest page table)</p>
    <p>EPT Extended page table</p>
    <p>Direct map</p>
    <p>Direct map region in kernel maps all GPAs</p>
    <p>EPT-based Kernel Space Isolation</p>
    <p>Remove all GPAs, not work</p>
  </div>
  <div class="page">
    <p>EPT-based Kernel Space Isolation</p>
    <p>Second try: zero the guest page table for kernel space in EPT-u</p>
  </div>
  <div class="page">
    <p>EPTI method  Zero GVA-to-GPA</p>
    <p>mapping for kernel</p>
    <p>EPT-based Kernel Space Isolation</p>
    <p>Guest virtual address (GVA)</p>
    <p>kernel</p>
    <p>user</p>
    <p>guest physical address (GPA)</p>
    <p>host physical address (HPA)</p>
    <p>gPT (guest page table)</p>
    <p>EPT Extended page table</p>
    <p>gPT page</p>
  </div>
  <div class="page">
    <p>EPTI method  Zero GVA-to-GPA</p>
    <p>mapping for kernel</p>
    <p>Remap gPT page which controls kernel mapping to a zeroed page in EPT-u</p>
    <p>EPT-based Kernel Space Isolation</p>
    <p>Guest virtual address (GVA)</p>
    <p>kernel</p>
    <p>user</p>
    <p>guest physical address (GPA)</p>
    <p>host physical address (HPA)</p>
    <p>gPT (guest page table)</p>
    <p>EPT Extended page table</p>
    <p>mapping</p>
    <p>gPT page</p>
    <p>In EPT-k</p>
    <p>In EPT-u</p>
  </div>
  <div class="page">
    <p>Remap guest level-3 page table page (gL3)  All processes share the</p>
    <p>same level-3 page table page for kernel mapping (kernel gL3)</p>
    <p>EPT-based Kernel Space Isolation</p>
    <p>kernel</p>
    <p>user</p>
    <p>kernel</p>
    <p>user</p>
    <p>...</p>
    <p>Level-4 Level-3 Level-2 Level-1</p>
  </div>
  <div class="page">
    <p>EPT-based Kernel Space Isolation</p>
    <p>Remap guest level-3 page table page (gL3)  All processes share the</p>
    <p>same level-3 page table page for kernel mapping (kernel gL3)</p>
    <p>Remap kernel gL3 to a zeroed host physical page in EPT-u</p>
    <p>kernel</p>
    <p>user</p>
    <p>kernel</p>
    <p>user</p>
    <p>...</p>
    <p>Level-4 Level-3 Level-2 Level-1</p>
    <p>Host physical page</p>
    <p>In EPT-uIn EPT-k</p>
  </div>
  <div class="page">
    <p>EPT-based Kernel Space Isolation</p>
    <p>Remap guest level-3 page table (gL3)  All processes share the</p>
    <p>same level-3 page table for kernel mapping (kernel gL3)</p>
    <p>Remap kernel gL3 to a zeroed host physical page in EPT-u</p>
    <p>kernel</p>
    <p>user</p>
    <p>kernel</p>
    <p>user</p>
    <p>...</p>
    <p>Level-4 Level-3 Level-2 Level-1</p>
    <p>Host physical page</p>
    <p>In EPT-uIn EPT-k</p>
    <p>Need to trace all enabled kernel level-3 page table pages (kernel gL3)</p>
  </div>
  <div class="page">
    <p>Tracing Kernel gL3 Use trap to get kernel gL3 in hypervisor  Trap guest load-CR3 operation</p>
    <p>To get all guest level-4 page table pages</p>
    <p>Trap write operation of guest level-4 page table page  To get all enabled kernel guest level-3 page table pages (kernel gL3)</p>
    <p>Too many traps will hurt the performance</p>
  </div>
  <div class="page">
    <p>Tracing Kernel gL3 Three optimizations to reducing traps  Write protection method for access/dirty bit updating  Selectively trap load-CR3 operation  Trap modification on gL3 only</p>
  </div>
  <div class="page">
    <p>Access/Dirty Bits Updating CPU updates access/dirty bit  Each page table entry has access/dirty bits (A/D bits)  Update when the entry is used to perform address translation</p>
    <p>Need to trap kernel modifications on guest level-4 page table pages (gL4)  Map gL4 as write protected in EPT  All guest memory accesses update A/D bits in gL4 and cause</p>
    <p>a trap</p>
  </div>
  <div class="page">
    <p>CPU and guest have different access paths  CPU modifies guest page table (gPT) with GPA</p>
    <p>Map GPA of target gPT page as R.W. in EPT</p>
    <p>Guest kernel modifies gPT with GVA</p>
    <p>EPTI Write-protection Method (Opt-1)</p>
    <p>GVA GPA HPA gPT EPT</p>
    <p>gPT page</p>
    <p>CPU access</p>
    <p>Guest kernel access</p>
  </div>
  <div class="page">
    <p>CPU and guest have different access paths  CPU modifies guest page table (gPT) with GPA</p>
    <p>Map GPA of target gPT page as R.W. in EPT</p>
    <p>Guest kernel modifies gPT with GVA  Map GVA of target gPT page to a new GPA and map it as R.O. in EPT</p>
    <p>EPTI Write-protection Method (Opt-1)</p>
    <p>GVA GPA HPA gPT EPT</p>
    <p>gPT page</p>
    <p>CPU access</p>
    <p>Guest kernel access</p>
    <p>R.W.</p>
    <p>R.O.</p>
  </div>
  <div class="page">
    <p>CR3 contains the guest page table pointer  Change during the process switching</p>
    <p>EPTI needs to trace the new enabled guest page table  Trap load-CR3 operation  Loading an old page table also causes a trap</p>
    <p>Load-CR3 Operation in Guest VM</p>
  </div>
  <div class="page">
    <p>Hardware feature target_cr3_value  loading CR3 value same as the target_cr3_value will not</p>
    <p>cause trap  Host can configure four target_cr3_values</p>
    <p>Disable trap on loading frequently-used CR3 value  Write the most frequently-used CR3 value into the</p>
    <p>target_cr3_value field</p>
    <p>Selectively Trap Load-CR3 (Opt-2)</p>
  </div>
  <div class="page">
    <p>Guest level-4 page table (gL4) contains both user and kernel mapping  Adding either kernel gL3 or user gL3 needs to modify the gL4</p>
    <p>EPTI needs to trap adding kernel gL3  Trap modification on gL4  Adding user gL3 also writes gL4 and causes a trap</p>
    <p>Modification on gL4</p>
  </div>
  <div class="page">
    <p>Kernel address space consists of different regions  E.g., direct_map region, text region, vmalloc region,   All the regions either have fixed length or increase</p>
    <p>continuously</p>
    <p>A new kernel gL3 is added until the last entry of one existing kernel gL3 is used</p>
    <p>Trap Modification on gL3 Only (Opt-3)</p>
  </div>
  <div class="page">
    <p>Trap gL3 only until detecting a new gL3 will be added  Step-1: trap modification on gL3  Step-2: when the last entry of gL3 is used, start to trap</p>
    <p>modification on gL4  Go to step-1 when detect the new gL3</p>
    <p>Trap Modification on gL3 Only (Opt-3)</p>
    <p>kernel</p>
    <p>user</p>
    <p>Level-4 Level-3</p>
    <p>Read-only</p>
    <p>Writable</p>
  </div>
  <div class="page">
    <p>Trap Modification on gL3 Only (Opt-3)</p>
    <p>kernel</p>
    <p>user</p>
    <p>Level-4 Level-3</p>
    <p>Read-only</p>
    <p>Writable</p>
    <p>Trap gL3 only until detecting a new gL3 will be added  Step-1: trap modification on gL3  Step-2: when the last entry of gL3 is used, start to trap</p>
    <p>modification on gL4  Go to step-1 when detect the new gL3</p>
  </div>
  <div class="page">
    <p>Malicious EPT Switching Intel allows the EPT switching to be performed in guest user mode  Attacker can switch to EPT-k, which contains the kernel</p>
    <p>mapping, and perform Meltdown attack</p>
    <p>Make EPT-k to be useless in user mode  All GPAs are mapped as non-executable in EPT-k except the</p>
    <p>kernel code or kernel modules  Switching to EPT-k in user mode causes trap</p>
  </div>
  <div class="page">
    <p>EPT-based kernel space isolation  Two EPTs (EPT-k and EPT-u) to for guest kernel and user</p>
    <p>mapping  Three optimizations to reduce the traps and improve the</p>
    <p>performance</p>
    <p>Seamless protection</p>
    <p>EPTI</p>
  </div>
  <div class="page">
    <p>Seamless Protection Dynamically trampoline injecting  Trampoline switches the EPT-k and EPT-u</p>
    <p>Seamless protection method  No need to reboot the guest by leveraging live migration</p>
    <p>More details in the paper</p>
  </div>
  <div class="page">
    <p>Performance Evaluation Hardware platform  Intel Core i7-7700 (4 cores * 2 thread)  16GB memory</p>
    <p>Software environments  Linux 4.9.75 + KVM for host  Linux 4.9.75 for guest</p>
    <p>Other Linux versions are also tested (more results in the paper)</p>
    <p>Guest configurations  4 vCPUs (each is pinned on one physical thread)  8GB memory</p>
  </div>
  <div class="page">
    <p>LMBench</p>
    <p>Operation(s) Linux KPTI KPTI (normalized)</p>
    <p>EPTI EPTI (normalized)</p>
    <p>Null syscall 0.04 0.16 4x 0.12 3x Null I/O 0.07 0.2 2.86x 0.16 2.28x Open/Close 0.70 0.93 1.33x 0.83 1.19x Signal Handle 0.68 0.81 1.19x 0.76 1.12x Fork syscall 72.9 79 1.08x 75 1.03x Exec syscall 212 243 1.15x 221 1.04x Ctsw 16P/64K 6.07 7.37 1.21x 6.39 1.05x</p>
    <p>EPTI has lower overhead of syscall latency, which is the main overhead of KPTI</p>
  </div>
  <div class="page">
    <p>Redis Test sets: get and set operations of redis-benchmark</p>
    <p>KPTI has 12% overhead on average</p>
    <p>EPTI has 7% overhead on average</p>
  </div>
  <div class="page">
    <p>Conclusion EPTI provides a new Meltdown defense method in cloud  Use two EPTs (EPT-k and EPT-u) to isolate user/kernel space</p>
    <p>High usability  Protect unpatched guest  No dependence on kernel version  No need to reboot the guest</p>
    <p>Low performance overhead</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>Institute of Parallel And Distributed Systems (IPADS) Shanghai Jiao Tong University</p>
    <p>http://ipads.se.sjtu.edu.cn</p>
  </div>
</Presentation>
