<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>USENIX Association</p>
    <p>Proceedings of the 10th USENIX Security</p>
    <p>Symposium</p>
    <p>Washington, D.C., USA August 1317, 2001</p>
    <p>THE ADVANCED COMPUTING SYSTEMS ASSOCIATION</p>
    <p>2001 by The USENIX Association All Rights Reserved For more information about the USENIX Association:</p>
    <p>Phone: 1 510 528 8649 FAX: 1 510 548 5738 Email: office@usenix.org WWW: http://www.usenix.org Rights to individual papers remain with the author or the author's employer.</p>
    <p>Permission is granted for noncommercial reproduction of the work for educational or research purposes. This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>PDM: Password-Derived Moduli</p>
    <p>A new password-based strong authentication protocol</p>
    <p>Radia Perlman, SunLabs</p>
    <p>Charlie Kaufman, Iris Associates</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Overview</p>
    <p>Why Strong Password Protocols</p>
    <p>Previous Strong Password Protocols</p>
    <p>Credentials Download</p>
    <p>PDM</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Why, in 2001, do we care about passwords?</p>
    <p>Humans are incapable of storing high-quality cryptographic keys, and they have unacceptable speed and accuracy when performing cryptographic operations. They are also large, expensive to maintain, difficult to manage, and they pollute the environment. It is astonishing that these devices continue to be manufactured and deployed. But they are sufficiently pervasive that we must design our protocols around their limitations.</p>
    <p>From Network Security: Private Communication in a Public World, Kaufman, Perlman, and Speciner</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>The Vision</p>
    <p>User carries nothing</p>
    <p>Walks up to WS</p>
    <p>WS has correct login software</p>
    <p>WS has no user-specific configuration info</p>
    <p>User types (name,password)</p>
    <p>WS downloads user info</p>
    <p>- private key (encrypted with pwd)</p>
    <p>- trust anchors (signed with private key)</p>
    <p>- browser cookies (encrypted with public key)</p>
    <p>The network is the computer!</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Downloading a Private Key from a Public Place</p>
    <p>Private key encrypted with users password.</p>
    <p>Dictionary attack =&gt; cant be world-readable</p>
    <p>ACL wont help (cant prove Im me until I get the private key)</p>
    <p>SSL</p>
    <p>- Requires trust anchors to be correct.</p>
    <p>- Requires server to have a certificate from a trust anchor</p>
    <p>Using f(pwd) as secret key: dictionary attack, since response is a function of (password, challenge)</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>EKE: First Such Protocol</p>
    <p>Alice Bob W=h(pwd), g, p</p>
    <p>{gA mod p}W pick A</p>
    <p>pick B decrypt {gA mod p}W calculate K=gAB mod p choose challenge C1</p>
    <p>{gB mod p}W, {C1}K</p>
    <p>{C1,C2}K</p>
    <p>{C2}K</p>
    <p>choose challenge C2</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Credentials Download</p>
    <p>EKE was designed for mutual authentication</p>
    <p>For credentials download, can be simplified</p>
    <p>- 2 messages</p>
    <p>- stateless Bob</p>
    <p>- have Bob reuse B, to save an exponentiation, and store B and gB mod p</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Two Messages, EKE-based</p>
    <p>Bob stores, for Alice:</p>
    <p>- Alice</p>
    <p>- W=h(pwd)</p>
    <p>- Y=private key encrypted with password</p>
    <p>- optionally store B and gB mod p</p>
    <p>Alice Bob</p>
    <p>Alice, {gA mod p}W</p>
    <p>gB mod p, {Y}K</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>PDM: Password-Derived Moduli</p>
    <p>Instead of encrypting Diffie-Hellman exchange, use p=f(password)</p>
    <p>Better if p is a Sophie-Germain prime: (p-1)/ 2 is also prime</p>
    <p>To generate Alices p:</p>
    <p>- start with filling out chunks of a number of the right size with h(Alice, password, constant) in predefined places</p>
    <p>- start searching from there</p>
    <p>- sieve to avoid candidates with small prime factors</p>
    <p>- do primality check</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Use 2 as the base</p>
    <p>better if base is a generator</p>
    <p>always use 2, so base isnt dependent on password, and so that you can easily detect if the other side is cheating with an exponent so small 2A mod p doesnt have to be reduced mod p</p>
    <p>choose p = 11 mod 24</p>
    <p>- 3 mod 8, because then 2 is a generator if p is Sophie-Germain</p>
    <p>- 2 mod 3 so that both p and (p-1)/2 wont be a multiple of 3</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>PDM for Credentials Download</p>
    <p>Alice Bob</p>
    <p>Alice, 2A mod p</p>
    <p>Alice: p, Y</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Features of PDM</p>
    <p>Unpatented</p>
    <p>Unlikely to infringe on patents of EKE, SPEKE, augmented EKE, or SRP</p>
    <p>Slow (but fast enough) at client</p>
    <p>Potentially much faster at server</p>
    <p>- for traditional D-H, 512-bits within realm of breakability</p>
    <p>- but PDM requires breaking D-H per password guess</p>
    <p>- so 512-bit primes probably secure enough</p>
    <p>- smaller prime saves computation at server (half size modulus saves a factor of 6 in computation at server)</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Client vs Server Computation</p>
    <p>Client does expensive PDM computation once per session (even if doing mutual authentication with multiple servers)</p>
    <p>Server has to manage a potential large and unpredictable number of clients</p>
    <p>Therefore, server stateless and minimal computation seems like a good idea</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Making PDM Secure</p>
    <p>Avoid Leaking Information</p>
    <p>- Example: naive EKE, if p just a little more than a power of 2, trial decryption of {gA</p>
    <p>mod p} can eliminate about half the passwords. (if decrypted result &gt; p)</p>
    <p>- PDM: choose p from small range (top 65 bits = 111...1110</p>
    <p>o Otherwise, if 2A &gt; p derived from guessed password, can eliminate that pwd</p>
    <p>o Refuse 2X of form 10000...00000 (not committed to a p since it didnt wrap around)</p>
    <p>o avoid timing attacks (compute p before contacting server)</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Avoid Password-Equivalent</p>
    <p>Augmented EKE invented to avoid storing a password-equivalent at the server</p>
    <p>If someone steals the server database, they cant directly impersonate the user (unless they do a successful dictionary attack)</p>
    <p>EKE, SPEKE, and SRP solve this by having the server store gf(pwd) Client needs to know pwd to do its part. PDM approach (X=f(pwd)):</p>
    <p>Alice Bob calc p and X from pwd choose random A</p>
    <p>stores p, 2X mod p choose random B</p>
    <p>Alice, 2A mod p</p>
    <p>h(2AB mod p, 2XB mod p)</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>More Efficient Augmented Protocol</p>
    <p>Do it using RSA instead of extra DiffieHellman. Y={priv}pwd</p>
    <p>An RSA verify is cheaper than a DiffieHellman exponentiation</p>
    <p>Alice Bob calc p from pwd choose random A</p>
    <p>stores p, Y, pub</p>
    <p>choose random B</p>
    <p>Alice, 2A mod p</p>
    <p>[h(2AB mod p)]Alice</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Even More Efficient</p>
    <p>Allow Bob to reuse B</p>
    <p>Need a nonce so replay isnt a problem</p>
    <p>Y={priv}pwd</p>
    <p>Even with the same size modulus, this is more efficient for Bob than any previous scheme</p>
    <p>Alice Bob calc p from pwd choose random A</p>
    <p>stores p, Y, pub,</p>
    <p>choose nonce N</p>
    <p>Alice, 2A mod p</p>
    <p>{N}pub, 2B mod p, {Y}(2AB mod p)</p>
    <p>h(N, 2AB mod p)</p>
    <p>B, 2B mod p</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Client Performance</p>
    <p>Calculating prime is expensive</p>
    <p>Can cut down time to 1/64 with hint</p>
    <p>- First time user chooses pwd, calculate p.</p>
    <p>- Take 6 bits out of p, encode as single char</p>
    <p>- If user furnishes hint, toss out any ps that dont have those 6 bits=hint</p>
    <p>- If user forgets hint, takes longer but OK</p>
    <p>Timings on 400 Mhz PC, C code, mean time</p>
    <p>prime size without hint with hint</p>
  </div>
  <div class="page">
    <p>Radia Perlman</p>
    <p>Summary</p>
    <p>PDM: Password Derived Moduli. A new approach to strong password protocols</p>
    <p>Can be used for 2-message credentials download, or mutual authentication</p>
    <p>RSA-approach to password-equivalent problem new and faster than existing schemes for server</p>
    <p>Client side performance good enough (not intended for wimpy PDAs)</p>
    <p>Can be much faster for server if use smaller moduli</p>
  </div>
</Presentation>
