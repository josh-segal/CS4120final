<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SSDAlloc: Hybrid SSD/RAM Memory Management Made Easy</p>
    <p>Anirudh Badam Vivek S. Pai</p>
    <p>Princeton University</p>
  </div>
  <div class="page">
    <p>Memory in Networked Systems</p>
  </div>
  <div class="page">
    <p>Memory in Networked Systems</p>
    <p>As a cache to reduce pressure on the disk  Memcache like tools  Act as front-end caches for Web data back-end</p>
  </div>
  <div class="page">
    <p>Memory in Networked Systems</p>
    <p>As a cache to reduce pressure on the disk  Memcache like tools  Act as front-end caches for Web data back-end</p>
    <p>As an index to reduce pressure on the disk  Indexes for proxy caches, WAN accelerators and</p>
    <p>inline data-deduplicators</p>
    <p>Help avoid false positives and use the disk effectively</p>
  </div>
  <div class="page">
    <p>Problem: Memory Density</p>
  </div>
  <div class="page">
    <p>Problem: Memory Density</p>
    <p>$ /</p>
    <p>G B</p>
    <p>( To</p>
    <p>ta l C</p>
    <p>o st</p>
    <p>)</p>
    <p>Total DRAM 3</p>
  </div>
  <div class="page">
    <p>Problem: Memory Density</p>
    <p>$ /</p>
    <p>G B</p>
    <p>( To</p>
    <p>ta l C</p>
    <p>o st</p>
    <p>)</p>
    <p>Total DRAM 3</p>
  </div>
  <div class="page">
    <p>Problem: Memory Density</p>
    <p>$ /</p>
    <p>G B</p>
    <p>( To</p>
    <p>ta l C</p>
    <p>o st</p>
    <p>)</p>
    <p>Breaking Point</p>
  </div>
  <div class="page">
    <p>Problem: Memory Density</p>
    <p>$ /</p>
    <p>G B</p>
    <p>( To</p>
    <p>ta l C</p>
    <p>o st</p>
    <p>)</p>
    <p>Breaking Point</p>
    <p>? ?</p>
  </div>
  <div class="page">
    <p>Problem: Disk Speed Limits</p>
  </div>
  <div class="page">
    <p>Magnetic disk speed is not scaling well  Capacity is increasing but seek latency is not</p>
    <p>decreasing</p>
    <p>About 200 seeks/disk/sec</p>
    <p>Problem: Disk Speed Limits</p>
  </div>
  <div class="page">
    <p>Magnetic disk speed is not scaling well  Capacity is increasing but seek latency is not</p>
    <p>decreasing</p>
    <p>About 200 seeks/disk/sec  High speed disk arrays: many smaller capacity drives</p>
    <p>Total cost about 10X more compared to similar capacity 7200 rpm drives</p>
    <p>Use more rack space per byte</p>
    <p>Problem: Disk Speed Limits</p>
  </div>
  <div class="page">
    <p>Proposal: Use Flash as Memory</p>
  </div>
  <div class="page">
    <p>Proposal: Use Flash as Memory</p>
    <p>Address DRAM density limitation  Overcome per system DRAM limits via flash memory  Provide a choice -- more servers or a single server + flash</p>
    <p>memory</p>
  </div>
  <div class="page">
    <p>Proposal: Use Flash as Memory</p>
    <p>Address DRAM density limitation  Overcome per system DRAM limits via flash memory  Provide a choice -- more servers or a single server + flash</p>
    <p>memory</p>
    <p>Reduce total cost of ownership  Long-tailed workloads are important  DRAM too expensive and disk too slow  CPU under-utilized due to DRAM limit</p>
  </div>
  <div class="page">
    <p>Proposal: Use Flash as Memory</p>
    <p>Address DRAM density limitation  Overcome per system DRAM limits via flash memory  Provide a choice -- more servers or a single server + flash</p>
    <p>memory</p>
    <p>Reduce total cost of ownership  Long-tailed workloads are important  DRAM too expensive and disk too slow  CPU under-utilized due to DRAM limit</p>
    <p>How to ease application development with flash memory?</p>
  </div>
  <div class="page">
    <p>Flash Memory Primer</p>
  </div>
  <div class="page">
    <p>Flash Memory Primer</p>
    <p>Fast random reads (upto 1M IOPS per drive)</p>
  </div>
  <div class="page">
    <p>Flash Memory Primer</p>
    <p>Fast random reads (upto 1M IOPS per drive)  Writes happen after an erase</p>
    <p>Limited lifetime and endurance</p>
  </div>
  <div class="page">
    <p>Flash Memory Primer</p>
    <p>Fast random reads (upto 1M IOPS per drive)  Writes happen after an erase</p>
    <p>Limited lifetime and endurance  No seek latency (only read/write latency)</p>
  </div>
  <div class="page">
    <p>Flash Memory Primer</p>
    <p>Fast random reads (upto 1M IOPS per drive)  Writes happen after an erase</p>
    <p>Limited lifetime and endurance  No seek latency (only read/write latency)  Large capacity (single 2.5 disk ~ 512GB)</p>
    <p>PCIe 10.2 TB - Fusion-io io-octal drive</p>
  </div>
  <div class="page">
    <p>Question of Hierarchy</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>SSDs</p>
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
  </div>
  <div class="page">
    <p>SSDs</p>
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
    <p>Flash has low latency</p>
  </div>
  <div class="page">
    <p>SSDs</p>
    <p>Disk</p>
    <p>Block Addressable</p>
    <p>Directly Addressed</p>
    <p>High Latency</p>
    <p>Non-volatile</p>
    <p>Question of Hierarchy</p>
    <p>Memory</p>
    <p>Byte Addressable</p>
    <p>Virtually Addressed</p>
    <p>Low Latency</p>
    <p>Volatile</p>
    <p>Flash has low latency</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
  </div>
  <div class="page">
    <p>Use it as memory via swap or mmap  Application need not be modified  Pages transparently swapped in and out based</p>
    <p>on usage in DRAM</p>
    <p>Transparent Tiering Today</p>
  </div>
  <div class="page">
    <p>Use it as memory via swap or mmap  Application need not be modified  Pages transparently swapped in and out based</p>
    <p>on usage in DRAM</p>
    <p>Native pager delivers only 10% of the SSDs performance</p>
    <p>Flash aware pager delivers only 30% of the SSDs performance</p>
    <p>OS pager optimized for seek limited disks and was designed as a dead page storage</p>
    <p>Transparent Tiering Today</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write free()</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write free()</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write free()</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write free()</p>
  </div>
  <div class="page">
    <p>Transparent Tiering Today</p>
    <p>RAM</p>
    <p>SSD</p>
    <p>read</p>
    <p>write free()</p>
    <p>Indirection Table</p>
    <p>(log structured page store)</p>
    <p>In the OS or in the FTL</p>
  </div>
  <div class="page">
    <p>Non-Transparent Tiering</p>
  </div>
  <div class="page">
    <p>Non-Transparent Tiering</p>
    <p>Redesign application to be flash aware  Custom object store with custom pointers  Reads, writes and garbage collection at an</p>
    <p>application object granularity</p>
    <p>Avoid in-place writes (objects could be small)  Obtain the best performance and lifetime from</p>
    <p>flash memory device</p>
  </div>
  <div class="page">
    <p>Non-Transparent Tiering</p>
    <p>Redesign application to be flash aware  Custom object store with custom pointers  Reads, writes and garbage collection at an</p>
    <p>application object granularity</p>
    <p>Avoid in-place writes (objects could be small)  Obtain the best performance and lifetime from</p>
    <p>flash memory device</p>
    <p>Intrusive modifications needed  Expertise with flash memory needed</p>
  </div>
  <div class="page">
    <p>Non-Transparent Tiering MyObject* obj = malloc( sizeof( MyObject ) );</p>
    <p>obj-&gt;x = 0; obj-&gt;y = 1; obj-&gt;z = 2; free( obj );</p>
    <p>malloc +</p>
    <p>SSD-swap</p>
    <p>MyObjectID oid = createObject( sizeof( MyObject ) ); MyObject* obj = malloc( sizeof( MyObject ) );</p>
    <p>readObject( oid, obj ); obj-&gt;x = 0; obj-&gt;y = 1; obj-&gt;z = 2; writeObject( oid, obj ); free( obj );</p>
    <p>Application Rewrite</p>
  </div>
  <div class="page">
    <p>Our Goal</p>
  </div>
  <div class="page">
    <p>Run mostly unmodified applications  Work via memory allocators in C-style programs</p>
    <p>Our Goal</p>
  </div>
  <div class="page">
    <p>Run mostly unmodified applications  Work via memory allocators in C-style programs</p>
    <p>Use the DRAM effectively  Use it as an object cache (not as a page cache)</p>
    <p>Our Goal</p>
  </div>
  <div class="page">
    <p>Run mostly unmodified applications  Work via memory allocators in C-style programs</p>
    <p>Use the DRAM effectively  Use it as an object cache (not as a page cache)</p>
    <p>Use the SSD wisely  As a log-structured object store</p>
    <p>Our Goal</p>
  </div>
  <div class="page">
    <p>Run mostly unmodified applications  Work via memory allocators in C-style programs</p>
    <p>Use the DRAM effectively  Use it as an object cache (not as a page cache)</p>
    <p>Use the SSD wisely  As a log-structured object store</p>
    <p>Reorganize virtual memory allocation to discern object information</p>
    <p>Our Goal</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>(Object per page - OPP)</p>
    <p>Physical Memory</p>
    <p>SSD</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>(Object per page - OPP)</p>
    <p>Physical Memory</p>
    <p>SSD</p>
    <p>Memory Manager: Creates 64 objects of 1KB size</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>(Object per page - OPP)</p>
    <p>Physical Memory</p>
    <p>SSD</p>
    <p>Memory Manager: Creates 64 objects of 1KB size</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>(Object per page - OPP)</p>
    <p>Physical Memory</p>
    <p>SSD</p>
    <p>Memory Manager: Creates 64 objects of 1KB size</p>
    <p>Page Buffer</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>(Object per page - OPP)</p>
    <p>Physical Memory</p>
    <p>SSD</p>
    <p>Memory Manager: Creates 64 objects of 1KB size</p>
    <p>Page Buffer</p>
    <p>RAM Object Cache</p>
    <p>... 2 3 4 5</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>(Object per page - OPP)</p>
    <p>Physical Memory</p>
    <p>SSD</p>
    <p>Memory Manager: Creates 64 objects of 1KB size</p>
    <p>Page Buffer</p>
    <p>Log structured object store</p>
    <p>RAM Object Cache</p>
    <p>... 2 3 4 5</p>
  </div>
  <div class="page">
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>Object Per Page (OPP) Memory Page (MP)</p>
    <p>Data Entity Application Defined</p>
    <p>Objects 4KB objects (like pages)</p>
    <p>Memory Manager Pool Allocator Coalescing Allocator</p>
    <p>Virtual Memory No. of objects * page_size No. of pages *</p>
    <p>page_size</p>
    <p>Physical Memory Separate Page Buffer &amp;</p>
    <p>RAM Object Cache No such</p>
    <p>separation</p>
    <p>SSD Usage Log-structured Object</p>
    <p>Store Log-structured Page</p>
    <p>Store</p>
    <p>Code Changes Minimal changes restricted</p>
    <p>to memory allocation No changes needed</p>
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>Object Per Page (OPP) Memory Page (MP)</p>
    <p>Data Entity Application Defined</p>
    <p>Objects 4KB objects (like pages)</p>
    <p>Memory Manager Pool Allocator Coalescing Allocator</p>
    <p>Virtual Memory No. of objects * page_size No. of pages *</p>
    <p>page_size</p>
    <p>Physical Memory Separate Page Buffer &amp;</p>
    <p>RAM Object Cache No such</p>
    <p>separation</p>
    <p>SSD Usage Log-structured Object</p>
    <p>Store Log-structured Page</p>
    <p>Store</p>
    <p>Code Changes Minimal changes restricted</p>
    <p>to memory allocation No changes needed</p>
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>Object Per Page (OPP) Memory Page (MP)</p>
    <p>Data Entity Application Defined</p>
    <p>Objects 4KB objects (like pages)</p>
    <p>Memory Manager Pool Allocator Coalescing Allocator</p>
    <p>Virtual Memory No. of objects * page_size No. of pages *</p>
    <p>page_size</p>
    <p>Physical Memory Separate Page Buffer &amp;</p>
    <p>RAM Object Cache No such</p>
    <p>separation</p>
    <p>SSD Usage Log-structured Object</p>
    <p>Store Log-structured Page</p>
    <p>Store</p>
    <p>Code Changes Minimal changes restricted</p>
    <p>to memory allocation No changes needed</p>
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>Object Per Page (OPP) Memory Page (MP)</p>
    <p>Data Entity Application Defined</p>
    <p>Objects 4KB objects (like pages)</p>
    <p>Memory Manager Pool Allocator Coalescing Allocator</p>
    <p>Virtual Memory No. of objects * page_size No. of pages *</p>
    <p>page_size</p>
    <p>Physical Memory Separate Page Buffer &amp;</p>
    <p>RAM Object Cache No such</p>
    <p>separation</p>
    <p>SSD Usage Log-structured Object</p>
    <p>Store Log-structured Page</p>
    <p>Store</p>
    <p>Code Changes Minimal changes restricted</p>
    <p>to memory allocation No changes needed</p>
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>Object Per Page (OPP) Memory Page (MP)</p>
    <p>Data Entity Application Defined</p>
    <p>Objects 4KB objects (like pages)</p>
    <p>Memory Manager Pool Allocator Coalescing Allocator</p>
    <p>Virtual Memory No. of objects * page_size No. of pages *</p>
    <p>page_size</p>
    <p>Physical Memory Separate Page Buffer &amp;</p>
    <p>RAM Object Cache No such</p>
    <p>separation</p>
    <p>SSD Usage Log-structured Object</p>
    <p>Store Log-structured Page</p>
    <p>Store</p>
    <p>Code Changes Minimal changes restricted</p>
    <p>to memory allocation No changes needed</p>
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>Object Per Page (OPP) Memory Page (MP)</p>
    <p>Data Entity Application Defined</p>
    <p>Objects 4KB objects (like pages)</p>
    <p>Memory Manager Pool Allocator Coalescing Allocator</p>
    <p>Virtual Memory No. of objects * page_size No. of pages *</p>
    <p>page_size</p>
    <p>Physical Memory Separate Page Buffer &amp;</p>
    <p>RAM Object Cache No such</p>
    <p>separation</p>
    <p>SSD Usage Log-structured Object</p>
    <p>Store Log-structured Page</p>
    <p>Store</p>
    <p>Code Changes Minimal changes restricted</p>
    <p>to memory allocation No changes needed</p>
    <p>SSDAlloc Options</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
  </div>
  <div class="page">
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
  </div>
  <div class="page">
    <p>A small set of pages in core</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
  </div>
  <div class="page">
    <p>A small set of pages in core  Pages materialized on demand</p>
    <p>from RAM object cache/SSD</p>
    <p>Restricted in size to minimize RAM wastage (from OPP)</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
    <p>Demand Fetching</p>
  </div>
  <div class="page">
    <p>A small set of pages in core  Pages materialized on demand</p>
    <p>from RAM object cache/SSD</p>
    <p>Restricted in size to minimize RAM wastage (from OPP)</p>
    <p>Implemented using mprotect</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
    <p>Demand Fetching</p>
  </div>
  <div class="page">
    <p>A small set of pages in core  Pages materialized on demand</p>
    <p>from RAM object cache/SSD</p>
    <p>Restricted in size to minimize RAM wastage (from OPP)</p>
    <p>Implemented using mprotect</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
    <p>Demand Fetching</p>
  </div>
  <div class="page">
    <p>A small set of pages in core  Pages materialized on demand</p>
    <p>from RAM object cache/SSD</p>
    <p>Restricted in size to minimize RAM wastage (from OPP)</p>
    <p>Implemented using mprotect</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
    <p>Demand Fetching</p>
  </div>
  <div class="page">
    <p>A small set of pages in core  Pages materialized on demand</p>
    <p>from RAM object cache/SSD</p>
    <p>Restricted in size to minimize RAM wastage (from OPP)</p>
    <p>Implemented using mprotect  Page materialized in seg-fault</p>
    <p>handler</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
    <p>X</p>
    <p>Demand Fetching</p>
  </div>
  <div class="page">
    <p>A small set of pages in core  Pages materialized on demand</p>
    <p>from RAM object cache/SSD</p>
    <p>Restricted in size to minimize RAM wastage (from OPP)</p>
    <p>Implemented using mprotect  Page materialized in seg-fault</p>
    <p>handler</p>
    <p>RAM Object Cache continuously flushes dirty objects to the SSD in LRU order</p>
    <p>SSDAlloc Overview</p>
    <p>Application</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Page Buffer</p>
    <p>Dirty Objects</p>
    <p>X</p>
    <p>Demand Fetching</p>
  </div>
  <div class="page">
    <p>SSD Maintenance</p>
  </div>
  <div class="page">
    <p>SSD Maintenance</p>
    <p>Virtual Memory</p>
    <p>SSD</p>
    <p>RAM Object Cache</p>
    <p>Dirty Objects</p>
    <p>Object Tables</p>
  </div>
  <div class="page">
    <p>SSD Maintenance</p>
  </div>
  <div class="page">
    <p>Copy-and-compact garbage-collector/log-writer  Seek optimizations not needed</p>
    <p>SSD Maintenance</p>
  </div>
  <div class="page">
    <p>Copy-and-compact garbage-collector/log-writer  Seek optimizations not needed</p>
    <p>Read at the head and write live and dirty objects  Use Object Tables to determine liveness</p>
    <p>SSD Maintenance</p>
  </div>
  <div class="page">
    <p>Copy-and-compact garbage-collector/log-writer  Seek optimizations not needed</p>
    <p>Read at the head and write live and dirty objects  Use Object Tables to determine liveness</p>
    <p>Garbage is disposed  Objects written elsewhere are garbage  OPP object which is free is garbage</p>
    <p>SSD Maintenance</p>
  </div>
  <div class="page">
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>11,000 lines of C++ code (runtime library)  Implemented using mprotect, mmap, and madvise  SSDAlloc-OPP pool and array allocator  SSDAlloc-MP coalescing allocator (array allocations)  SSDFree frees the allocated data  Can coexist with malloc pointers</p>
  </div>
  <div class="page">
    <p>SSD Usage Techniques</p>
  </div>
  <div class="page">
    <p>SSD Usage Techniques</p>
    <p>Technique Write</p>
    <p>Logging Access &lt;</p>
    <p>GC Avoid DRAM</p>
    <p>Pollution High</p>
    <p>Performance Programming</p>
    <p>Ease</p>
    <p>SSD Swap</p>
    <p>SSD Swap (Write Logged)</p>
    <p>Application Rewrite</p>
    <p>SSDAlloc</p>
  </div>
  <div class="page">
    <p>SSD Usage Techniques</p>
    <p>Technique Write</p>
    <p>Logging Access &lt;</p>
    <p>GC Avoid DRAM</p>
    <p>Pollution High</p>
    <p>Performance Programming</p>
    <p>Ease</p>
    <p>SSD Swap</p>
    <p>SSD Swap (Write Logged)</p>
    <p>Application Rewrite</p>
    <p>SSDAlloc</p>
  </div>
  <div class="page">
    <p>SSDAlloc Runtime Overhead</p>
  </div>
  <div class="page">
    <p>SSDAlloc Runtime Overhead</p>
    <p>Overhead Source Max Latency</p>
    <p>TLB Miss (DRAM Read) 0.014 Sec Object Table Lookup 0.046 Sec Page Materialization 0.138 Sec Page Dematerialization 0.172 Sec Signal Handling 0.666 Sec Combined Overhead 0.833 Sec</p>
    <p>Overhead for SSDAlloc runtime intervention</p>
  </div>
  <div class="page">
    <p>SSDAlloc Runtime Overhead</p>
    <p>Overhead Source Max Latency</p>
    <p>TLB Miss (DRAM Read) 0.014 Sec Object Table Lookup 0.046 Sec Page Materialization 0.138 Sec Page Dematerialization 0.172 Sec Signal Handling 0.666 Sec Combined Overhead 0.833 Sec</p>
    <p>Overhead for SSDAlloc runtime intervention</p>
    <p>NAND Flash latency ~ 30-50 Sec</p>
  </div>
  <div class="page">
    <p>SSDAlloc Runtime Overhead</p>
    <p>Overhead Source Max Latency</p>
    <p>TLB Miss (DRAM Read) 0.014 Sec Object Table Lookup 0.046 Sec Page Materialization 0.138 Sec Page Dematerialization 0.172 Sec Signal Handling 0.666 Sec Combined Overhead 0.833 Sec</p>
    <p>Overhead for SSDAlloc runtime intervention</p>
    <p>NAND Flash latency ~ 30-50 Sec  Can reach 1 Million IOPS</p>
  </div>
  <div class="page">
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Comparing three allocation methods  malloc replaced with SSDAlloc-OPP  malloc replaced with SSDAlloc-MP  Swap</p>
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Comparing three allocation methods  malloc replaced with SSDAlloc-OPP  malloc replaced with SSDAlloc-MP  Swap</p>
    <p>2.4Ghz Quadcore CPU with 16GB RAM  RiData, Kingston, Intel X25-E, Intel X25-V and</p>
    <p>Intel X25-M</p>
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Application Original</p>
    <p>LOC Modified</p>
    <p>LOC</p>
    <p>SSDAlloc-OPPs gain vsSSDAlloc-OPPs gain vs Application</p>
    <p>Original LOC</p>
    <p>Modified LOC Swap SSDAlloc-MP</p>
    <p>Memcached 11,193 21 5.5 - 17.4x 1.4 - 3.5x</p>
    <p>B+Tree Index</p>
    <p>Packet Cache</p>
    <p>HashCache 20,096 36 5.3 - 17.1x 1.3 - 3.3x</p>
    <p>Results Overview</p>
  </div>
  <div class="page">
    <p>Application Original</p>
    <p>LOC Modified</p>
    <p>LOC</p>
    <p>SSDAlloc-OPPs gain vsSSDAlloc-OPPs gain vs Application</p>
    <p>Original LOC</p>
    <p>Modified LOC Swap SSDAlloc-MP</p>
    <p>Memcached 11,193 21 5.5 - 17.4x 1.4 - 3.5x</p>
    <p>B+Tree Index</p>
    <p>Packet Cache</p>
    <p>HashCache 20,096 36 5.3 - 17.1x 1.3 - 3.3x</p>
    <p>SSDAlloc applications write up to 32 times less data to the SSD than when compared to the traditional VM style applications</p>
    <p>Results Overview</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>32GB array of 128 byte objects (32GB SSD, 2GB RAM)</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>32GB array of 128 byte objects (32GB SSD, 2GB RAM)</p>
    <p>SSDAlloc-OPP over Swap SSDAlloc-OPP over SSDAlloc-MP</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>G ai</p>
    <p>n Fa</p>
    <p>ct o r</p>
    <p>All Reads 25% Reads 50% Reads 75% Reads All Writes</p>
  </div>
  <div class="page">
    <p>Memcached Benchmarks</p>
  </div>
  <div class="page">
    <p>Memcached Benchmarks  30GB SSD, 4GB RAM, 4 memcache clients  Memcache server slab allocator modified to use SSDAlloc</p>
  </div>
  <div class="page">
    <p>Memcached Benchmarks  30GB SSD, 4GB RAM, 4 memcache clients  Memcache server slab allocator modified to use SSDAlloc</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( re</p>
    <p>q/ se</p>
    <p>c)</p>
    <p>SSDAlloc-OPP SSDAlloc-MP Swap</p>
    <p>Average Object Size</p>
  </div>
  <div class="page">
    <p>Memcached Benchmarks</p>
  </div>
  <div class="page">
    <p>Memcached Benchmarks</p>
    <p>Performance for 50% reads and 50% writes</p>
  </div>
  <div class="page">
    <p>Memcached Benchmarks</p>
    <p>Performance for 50% reads and 50% writes</p>
    <p>SSD-swap SSDAlloc-MP SSDAlloc-OPP</p>
    <p>T ht</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( re</p>
    <p>q/ se</p>
    <p>c)</p>
    <p>RiData Kingston Intel X25-E Intel X25-V Intel X25-M</p>
  </div>
  <div class="page">
    <p>Summary</p>
  </div>
  <div class="page">
    <p>SSDAlloc migrates SSD naturally into VM system  RAM as a compact object cache  Virtual memory addresses are used  Only memory allocation code changes (9 to 36 LOC)  Other approaches need intrusive modifications</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>SSDAlloc migrates SSD naturally into VM system  RAM as a compact object cache  Virtual memory addresses are used  Only memory allocation code changes (9 to 36 LOC)  Other approaches need intrusive modifications</p>
    <p>SSD as log-structured object store  Can obtain 90% raw SSD random read performance  Other transparent approaches deliver only 10--30%  Reduce write traffic by up to 32 times</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Thanks Anirudh Badam</p>
    <p>abadam@cs.princeton.edu http://tinyurl.com/ssdalloc</p>
  </div>
</Presentation>
