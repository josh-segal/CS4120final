<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Minimal Rewiring: Efficient Live</p>
    <p>Expansion for Clos Data Center Networks</p>
    <p>Shizhen Zhao12, Rui Wang1, Junlan Zhou1, Joon Ong1,Jeffrey C. Mogul1, Amin Vahdat1</p>
  </div>
  <div class="page">
    <p>Clos Topology for Commercial Data Centers</p>
    <p>Built with Commodity Switches</p>
    <p>High Path Diversity &amp; Non-Blocking</p>
    <p>Simple Routing</p>
    <p>Widely Deployed in Commercial Data Centers!</p>
  </div>
  <div class="page">
    <p>Importance of Fine-grained Expansion</p>
    <p>What is Fine-grained Expansion?  Expand data center at server block granularity.</p>
    <p>Why Fine-grained Expansion is important?  Bandwidth requirement doubles every 15-18 months</p>
    <p>Why not coarse-grained expansion?</p>
    <p>Deploying large amount of capacity at once incurs significant</p>
    <p>opportunity cost, e.g., large idle capacity, technical refresh</p>
    <p>Unfortunately, Fine-grained Expansion is Very</p>
    <p>Difficult for Clos</p>
  </div>
  <div class="page">
    <p>Challenges of Fine-Grained Expansion for Clos</p>
    <p>Moving fibers around is labor intensive and error prone  Spine blocks and server blocks may not be co-located</p>
    <p>Required fiber length may change in order to rewire</p>
    <p>Classical Clos was not designed for fine-grained expansion  E.g., FatTree [1] (limited sizes of 3456, 8192, 27648, 65536 corresponding</p>
    <p>to the commonly available port counts of 24, 32, 48, 64)</p>
    <p>E.g., Rotation Striping for Clos [2] (need to rewire almostly all the links)</p>
    <p>Need live expansion  Cannot take the entire DCN offline to do an expansion</p>
    <p>Data centers must be highly available. No packet loss is allowed</p>
  </div>
  <div class="page">
    <p>Our contribution</p>
    <p>Architecture Aspect:</p>
    <p>A layer of patch panels to better handle fiber movements</p>
    <p>A multi-stage pipeline for hitless live expansion</p>
    <p>Topology Design Algorithm Aspect:</p>
    <p>Minimal Rewiring solver for fine-grained expansion of Clos</p>
    <p>Reduces average number of expansion stages by 3.1X</p>
  </div>
  <div class="page">
    <p>Physical Architecture</p>
  </div>
  <div class="page">
    <p>Physical Architecture</p>
  </div>
  <div class="page">
    <p>Physical Architecture</p>
  </div>
  <div class="page">
    <p>Patch-Panel based Expansion</p>
    <p>and new spine blocks to the</p>
    <p>patch panel layer</p>
    <p>(To be discussed later)</p>
    <p>to ensure sufficient capacity</p>
  </div>
  <div class="page">
    <p>Each Stage Requires Careful Sequencing</p>
  </div>
  <div class="page">
    <p>Each Stage Requires Careful Sequencing</p>
    <p>X X</p>
  </div>
  <div class="page">
    <p>Each Stage Requires Careful Sequencing</p>
    <p>X X</p>
  </div>
  <div class="page">
    <p>Each Stage Requires Careful Sequencing</p>
  </div>
  <div class="page">
    <p>Current Expansion Takes Too Much Time!</p>
    <p>Each Stage takes considerable amount of time  Manual rewiring could take a few hours</p>
    <p>Need multiple stages to guarantee sufficient residual</p>
    <p>capacity  The higher the traffic, the larger the number of stages</p>
    <p>Previous topology solver rewires almost all the links  If max link utilization is 90%, then at least 10 stages are required</p>
    <p>Our solution:</p>
    <p>Minimizes number of rewires during expansion. 14</p>
  </div>
  <div class="page">
    <p>How to Minimize Rewires During Expansion?</p>
    <p>Naive Solution:  Break a few links and let new blocks in.</p>
    <p>Problem: Highly imbalanced new topology, leading to poor performance</p>
    <p>Optimization-based Approaches: e.g., LEGUP [3]</p>
    <p>REWIRE [4]  Did not consider patch panels</p>
    <p>High computational complexity!</p>
    <p>Branch and Bound / Simulated Annealing have poor convergence!</p>
    <p>[3] A. R. Curtis, et. al., LEGUP: Using Heterogeneity to Reduce the Cost of Data Center Network</p>
    <p>Upgrades, in ACM CoNEXT 2010.</p>
    <p>[4] A. R. Curtis, et. al., REWIRE: An optimization-based framework for unstructured data center network</p>
    <p>design, in Infocom 2012.</p>
  </div>
  <div class="page">
    <p>Minimal Rewiring: an ILP-based Solver</p>
    <p>Output: DCN Topology  m: server block, n: spine block, k: patch panel</p>
    <p>Objective: Minimize # of links drained</p>
    <p>Constraints:  In each patch panel, the total number of logical links from a server block</p>
    <p>cannot exceed the total number physical links from this server block.</p>
    <p>Same for Spine blocks:</p>
    <p>(Topology Balance Constraints) Links from a server block should be</p>
    <p>evenly distributed among spine blocks: 16</p>
    <p>where Is the existing DCN topology.</p>
  </div>
  <div class="page">
    <p>Complexity Challenge of Minimal Rewiring</p>
    <p>Scale of Minimal Rewiring in Our Data Centers:  # of server blocks O(100) X # of spine blocks O(100) X # of patch</p>
    <p>panels O(100)</p>
    <p>Consequence:  ~70% of 4500 benchmark cases cannot be solved!</p>
  </div>
  <div class="page">
    <p>Block Aggregation to Reduce Complexity</p>
    <p>Motivation  Homogeneous components exists.</p>
    <p>Problem Size Reduction  # of server block groups (1~10) X</p>
    <p># of spine block groups (1~10) X</p>
    <p># of patch panel groups (1~10)</p>
    <p>Guaranteed Decomposable  ILP Approach</p>
    <p>Min-Cost-Flow Approach</p>
    <p>(polynomial but less optimal)</p>
    <p>Block</p>
    <p>Aggregation</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>2250 Base Configurations:  256 Patch Panels</p>
    <p>A mix of server blocks with 256/512/1024 uplinks</p>
    <p>A mix of spine blocks with 128/512 downlinks</p>
    <p>Up to 80 server blocks</p>
    <p>4500 Expansion Cases:  Add one server block with 256 uplinks</p>
    <p>Upgrade two server blocks from 256 uplinks to 512 uplinks</p>
    <p>Real data centers have</p>
    <p>mixed block sizes!</p>
  </div>
  <div class="page">
    <p>Metrics</p>
    <p>Success Rate, within A Deadline:  Directly determines if our algorithm is usable or not in production.</p>
    <p>Rewiring Ratio:  The performance of minimal rewiring solver</p>
    <p>An indirect measure on the speedup of data center expansion.</p>
    <p>Number of Expansion Stages:  A direct measure on the speedup of data center expansion.</p>
  </div>
  <div class="page">
    <p>Success Rate within Certain Deadline</p>
    <p>The</p>
    <p>higher</p>
    <p>the</p>
    <p>better</p>
    <p>Strategy 1: No Aggregation</p>
    <p>Strategy 2: Aggregate server blocks/spine blocks/patch panels. Decompose</p>
    <p>server blocks/spine blocks using ILP, and patch panels using min-cost-flow</p>
    <p>Strategy 3: Aggregate server blocks/spine blocks/patch panels. Decompose</p>
    <p>server blocks/spine blocks/patch panels using min-cost-flow</p>
  </div>
  <div class="page">
    <p>Rewiring Ratio</p>
    <p>The</p>
    <p>lower</p>
    <p>the</p>
    <p>better</p>
    <p>Strategy 1: No Aggregation</p>
    <p>Strategy 2: Aggregate server blocks/spine blocks/patch panels. Decompose</p>
    <p>server blocks/spine blocks using ILP, and patch panels using min-cost-flow</p>
    <p>Strategy 3: Aggregate server blocks/spine blocks/patch panels. Decompose</p>
    <p>server blocks/spine blocks/patch panels using min-cost-flow</p>
  </div>
  <div class="page">
    <p>Take Away Message</p>
    <p>Block aggregation can significantly reduce</p>
    <p>algorithmic complexity!</p>
    <p>Block aggregation may incur suboptimality</p>
    <p>in terms of rewiring</p>
    <p>Decomposing using ILP is also expensive.</p>
    <p>Min-cost-flow decomposition algorithm</p>
    <p>incurs additional optimality loss</p>
    <p>There is a</p>
    <p>tradeoff!</p>
  </div>
  <div class="page">
    <p>Parallel Solver</p>
  </div>
  <div class="page">
    <p>Savings of Expansion Stages</p>
    <p>Prior to Minimal Rewiring  Assuming expansion takes 4 stages, ~70% bisection bandwidth can be maintained</p>
    <p>With Minimal Rewiring  On average 1.29 stages are required to ensure 70% bisection bandwidth</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We demonstrated the importance of using Patch Panels in data</p>
    <p>centers, which has been generally overlooked in the literature</p>
    <p>We proposed, implemented and tested Minimal Rewiring:</p>
    <p>Deals with patch panel constraints</p>
    <p>Scales to large scale data centers with algorithmic optimization</p>
    <p>We reduced the average number of stages required for</p>
    <p>expansion from 4 to 1.29, which reduces expansion time and</p>
    <p>labor cost by 3.1X on average. Note that data center is more</p>
    <p>vulnerable to congestion during expansion.</p>
  </div>
</Presentation>
