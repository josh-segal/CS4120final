<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Chia-Che Tsai*, Jeongseok Son, Bhushan Jain, John McAvey, Raluca Ada Popa, Donald E. Porter</p>
    <p>Civet: An Efficient Java Partitioning Framework</p>
    <p>for Hardware Enclaves</p>
    <p>*TAMU, UC Berkeley, UNC Chapel Hill, Hendrix College</p>
  </div>
  <div class="page">
    <p>Hardware Enclaves as Root of Trust</p>
    <p>An abstraction for bootstrapping users trust</p>
    <p>on untrusted platforms.</p>
    <p>User</p>
    <p>Proof of a trustworthy CPU</p>
    <p>Isolated from untrusted OS &amp; IO</p>
    <p>Memory encrypted in DRAM</p>
    <p>Program</p>
    <p>&amp; Data Untrusted Cloud</p>
    <p>Infrastructure</p>
    <p>Enclave</p>
    <p>Existing solutions:</p>
    <p>Intel SGX</p>
    <p>AMD SEV</p>
    <p>ARM TrustZone</p>
    <p>RISC-V Sanctum</p>
    <p>&amp; Keystone</p>
  </div>
  <div class="page">
    <p>Cloud Platforms + Enclaves= Large Trusted Computing Base</p>
    <p>Cloud applications are often</p>
    <p>(1) complex</p>
    <p>(2) multi-principal</p>
    <p>(3) written in managed languages like Java.</p>
    <p>Ex: Hadoop</p>
    <p>mapper</p>
    <p>reducer</p>
    <p>Scheduler</p>
    <p>HDFS</p>
    <p>Workers</p>
    <p>Other mappers/reducers</p>
    <p>+ 2.3 MLoC (JARs)</p>
    <p>+ 0.9 MLoC (JVM)</p>
  </div>
  <div class="page">
    <p>Existing Approaches for Enclave Development</p>
    <p>Entire Application</p>
    <p>(Haven14, SCONE16,</p>
    <p>Graphene-SGX17,SGK-LKL20)</p>
    <p>Enclave</p>
    <p>System API</p>
    <p>Untrusted OS</p>
    <p>No code modification</p>
    <p>but large TCB</p>
    <p>API Engine Only</p>
    <p>(VC315,</p>
    <p>SecureKeeper16)</p>
    <p>Partitioned /</p>
    <p>Partial Re-development</p>
    <p>(Glamdring17, GOTEE19)</p>
    <p>Small TCB</p>
    <p>but little flexibility</p>
    <p>Enclave</p>
    <p>KVStore</p>
    <p>Untrusted App</p>
    <p>Get/Put</p>
    <p>Small TCB</p>
    <p>but lack support for partition</p>
    <p>with object-oriented interfaces</p>
    <p>Untrusted App</p>
    <p>App</p>
    <p>func()</p>
    <p>Enclave</p>
    <p>func()</p>
    <p>Partition</p>
  </div>
  <div class="page">
    <p>Civet: Partitioning Java-based Applications for Enclaves</p>
    <p>Guided partitioning for experimentation of partition boundary</p>
    <p>White-listing class loading &amp; polymorphism</p>
    <p>Tailored Java runtime for enclave performance patterns (e.g., GC)</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Enclave</p>
    <p>mapper X</p>
    <p>Encrypted</p>
    <p>Data</p>
    <p>X.map()</p>
    <p>Untrusted Components</p>
    <p>Operating System</p>
    <p>IO Devices, DRAM</p>
    <p>System API</p>
    <p>Threat 2: Attacker abusing exposed</p>
    <p>enclave interfaces (i.e., Iago Attack [ASPLOS13])</p>
    <p>Threat 1: Enclave loading</p>
    <p>unexpected classes/methods</p>
  </div>
  <div class="page">
    <p>Partitioning Tool + Java Runtime for Enclaves</p>
    <p>Trusted JAR</p>
    <p>Untrusted JAR</p>
    <p>mapper X</p>
    <p>Entry: X.map()</p>
    <p>Configuration</p>
    <p>Civet</p>
    <p>Partitioning</p>
    <p>Tool User Input</p>
    <p>(Design phase)</p>
  </div>
  <div class="page">
    <p>Partitioning Tool + Java Runtime for Enclaves</p>
    <p>Trusted JAR</p>
    <p>Untrusted JAR</p>
    <p>Mapper X</p>
    <p>Entry: X.map()</p>
    <p>Configuration</p>
    <p>Civet</p>
    <p>Partitioning</p>
    <p>Tool User Input</p>
    <p>(Execution phase)</p>
    <p>Enclave</p>
    <p>X.map()</p>
    <p>Proxy for X</p>
    <p>Signature Verified by CPU</p>
    <p>Trimmed, shielded</p>
    <p>OpenJDK JVM</p>
  </div>
  <div class="page">
    <p>Determining Boundary for TCB</p>
    <p>Determine effective TCB based on</p>
    <p>partitioning decisions</p>
    <p>Prevent loading unnecessary code</p>
    <p>Code Reachability</p>
    <p>Analysis (Based on bytecode-level,</p>
    <p>call graph + points-to analysis)</p>
    <p>See paper!</p>
    <p>Trusted JAR</p>
    <p>mapper X</p>
    <p>Entry: X.map()</p>
    <p>Configuration</p>
    <p>Civet</p>
    <p>Partitioning</p>
    <p>Tool User Input</p>
  </div>
  <div class="page">
    <p>Polymorphic Attacks on Enclave Entries</p>
    <p>Entry: X.map()</p>
    <p>Trusted World Untrusted World</p>
    <p>Polymorphic objects</p>
    <p>malicious</p>
    <p>Benign</p>
    <p>Behaviors controlled by attackers</p>
    <p>Deep Input Type Checks See paper!</p>
  </div>
  <div class="page">
    <p>Garbage Collection in Enclaves (1/2)</p>
    <p>Old Gen.</p>
    <p>(Rarely GCed)</p>
    <p>Young Gen.</p>
    <p>(Frequently GCed)</p>
    <p>Mark-and-Sweep</p>
    <p>Dead</p>
    <p>obj</p>
    <p>Dead</p>
    <p>obj</p>
    <p>caching overhead</p>
    <p>paging overhead</p>
    <p>Insight: Memory overhead in enclaves heavily impacted</p>
    <p>by cache misses &amp; page faults.</p>
  </div>
  <div class="page">
    <p>Garbage Collection in Enclaves (2/2)</p>
    <p>Insight: Memory overhead in enclaves heavily impacted</p>
    <p>by cache misses &amp; page faults.</p>
    <p>Old Gen.Young Gen.</p>
    <p>Mid Gen.</p>
    <p>Dead</p>
    <p>obj</p>
    <p>Dead</p>
    <p>obj</p>
    <p>Fit into cache  8MB</p>
    <p>(minimize misses)</p>
    <p>Fit into encrypted DRAM  92MB</p>
    <p>(minimize page faults)</p>
    <p>Live object ratio</p>
    <p>Avg GC Time</p>
  </div>
  <div class="page">
    <p>Partitioning Effectiveness + Performance</p>
    <p>T o</p>
    <p>ta l P</p>
    <p>ro c e</p>
    <p>s s in</p>
    <p>g T</p>
    <p>im e</p>
    <p>( S</p>
    <p>e c o</p>
    <p>n d</p>
    <p>s )</p>
    <p># of Data Split in 1GB Data</p>
    <p>(i.e., Maximum # of concurrent mappers)</p>
    <p>Hadoop latency for regular expression</p>
    <p>matching in 1GB encrypted data</p>
    <p>Native Civet (w/ Type Check)</p>
    <p>Civets enclave protection +</p>
    <p>type checking adds 16-22% overhead</p>
    <p>Hadoop Regular Expression</p>
    <p>Matching:</p>
    <p>Before partitioning:</p>
    <p>After partitioning:</p>
    <p>(-96%)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Java workloads dont fit into enclave programming paradigms</p>
    <p>Dynamic and polymorphic behaviors</p>
    <p>Monolithic runtimes and expensive resource management</p>
    <p>Civet: partitioning, refining and hardening with reachability analysis,</p>
    <p>deep type checking, and enclave-specific runtime design.</p>
    <p>Questions or feedback: Chia-Che Tsai &lt;chiache@tamu.edu&gt;</p>
  </div>
</Presentation>
