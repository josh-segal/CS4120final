<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Parallelizing Parallelizing</p>
    <p>SPECjbb2000 with SPECjbb2000 with</p>
    <p>Transactional MemoryTransactional Memory</p>
    <p>JaeWoong ChungJaeWoong Chung, , Chi Cao Chi Cao MinhMinh, Brian D. Carlstrom,, Brian D. Carlstrom,</p>
    <p>Christos KozyrakisChristos Kozyrakis</p>
    <p>Computer Systems LabComputer Systems Lab</p>
    <p>Stanford UniversityStanford University</p>
    <p>http://tcc.stanford.eduhttp://tcc.stanford.edu</p>
    <p>Picture comes here</p>
  </div>
  <div class="page">
    <p>The question we all shareThe question we all share</p>
    <p>TM providesTM provides</p>
    <p>Speculative parallelism for sequential applicationsSpeculative parallelism for sequential applications</p>
    <p>CoarseCoarse--grain synchronization for parallel applicationsgrain synchronization for parallel applications</p>
    <p>How can TM help parallelize complex applications?How can TM help parallelize complex applications?</p>
    <p>Beyond basic dataBeyond basic data--structuresstructures</p>
    <p>Can we get 90% of performance at 10% of the effort?Can we get 90% of performance at 10% of the effort?</p>
    <p>We parallelized SPECjbb2000 with transactionsWe parallelized SPECjbb2000 with transactions</p>
    <p>Irregular code from the enterprise domainIrregular code from the enterprise domain</p>
  </div>
  <div class="page">
    <p>ContentsContents</p>
    <p>SPECjbb2000 overviewSPECjbb2000 overview</p>
    <p>MethodologyMethodology</p>
    <p>Transactional programming withTransactional programming with</p>
    <p>Flat transactionFlat transaction</p>
    <p>Closed nestingClosed nesting</p>
    <p>Open nestingOpen nesting</p>
    <p>Other interesting ideasOther interesting ideas</p>
    <p>ConclusionConclusion</p>
  </div>
  <div class="page">
    <p>Warehouse</p>
    <p>stockTable</p>
    <p>(B-Tree)</p>
    <p>itemTable</p>
    <p>(B-Tree)</p>
    <p>SPECjbb2000 overview (1)SPECjbb2000 overview (1)</p>
    <p>Shared dataShared data</p>
    <p>BB--tree structure in database tiertree structure in database tier</p>
    <p>Shared variables in transaction server tierShared variables in transaction server tier</p>
    <p>orderTable</p>
    <p>(B-Tree) District</p>
    <p>Warehouse</p>
    <p>newID</p>
    <p>(Integer)Transaction</p>
    <p>Manager</p>
    <p>Driver Threads</p>
    <p>Driver Threads</p>
    <p>Client Tier Transaction Server Tier Database Tier</p>
    <p>3 tier enterprise system3 tier enterprise system</p>
    <p>stockTable</p>
    <p>(B-Tree)</p>
    <p>itemTable</p>
    <p>(B-Tree)</p>
    <p>Shared warehouseShared warehouse</p>
  </div>
  <div class="page">
    <p>SPECjbb2000 overview (2)SPECjbb2000 overview (2)</p>
    <p>TransactionManager::goTransactionManager::go()()</p>
    <p>5 types of e5 types of e--commerce transactionscommerce transactions</p>
    <p>We worked on this loop.We worked on this loop.</p>
    <p>while (while (workToDoworkToDo) {) {</p>
    <p>switch( eswitch( e--commerce commerce txtx type ) {type ) {</p>
    <p>case case new_ordernew_order: :</p>
    <p>case payment:case payment:</p>
    <p>case case order_statusorder_status::</p>
    <p>case delivery :case delivery :</p>
    <p>case case stock_levelstock_level::</p>
    <p>} }} }</p>
  </div>
  <div class="page">
    <p>MethodologyMethodology</p>
    <p>ExecutionExecution--driven simulatordriven simulator</p>
    <p>TransactionalTransactional Coherence and ConsistencyCoherence and Consistency</p>
    <p>8 PowerPC core8 PowerPC core</p>
    <p>32K L1 and 256K L2 cache32K L1 and 256K L2 cache</p>
    <p>16 bytes bus16 bytes bus</p>
    <p>Java environmentJava environment</p>
    <p>JikesRVMJikesRVM (JVM)(JVM)</p>
    <p>GNU GNU classpathclasspath (Java runtime library)(Java runtime library)</p>
    <p>synchronizedsynchronized blocks are removed.blocks are removed.  For SPECjbb2000, tooFor SPECjbb2000, too</p>
  </div>
  <div class="page">
    <p>Flat transactionFlat transaction</p>
    <p>3.09x speedup over coarse3.09x speedup over coarse--grain lockinggrain locking</p>
    <p>62.7 % cycles lost due to violation62.7 % cycles lost due to violation</p>
    <p>case case new_ordernew_order::</p>
    <p>atomic { // generate new order }; break;atomic { // generate new order }; break;</p>
    <p>case payment:case payment:</p>
    <p>atomic { // make payment }; break;atomic { // make payment }; break;</p>
    <p>case case order_statusorder_status::</p>
    <p>atomic { // check order status }; break;atomic { // check order status }; break;</p>
    <p>case delivery :case delivery :</p>
    <p>atomic { // make delivery }; break;atomic { // make delivery }; break;</p>
    <p>case case stock_levelstock_level::</p>
    <p>atomic { // check stock }; break;atomic { // check stock }; break;</p>
    <p>Speculative parallelismSpeculative parallelism  No analysis on potential racesNo analysis on potential races</p>
    <p>1 transaction for 1 e1 transaction for 1 e--commerce transactioncommerce transaction  Equivalent to having 1 global lockEquivalent to having 1 global lock</p>
  </div>
  <div class="page">
    <p>Analysis of violationsAnalysis of violations</p>
    <p>Profiler provides us a violation reportProfiler provides us a violation report</p>
    <p>Violation sourcesViolation sources</p>
    <p>JikesRVMJikesRVM, GNU , GNU classpathclasspath  Minor impactMinor impact</p>
    <p>SPECjbb2000SPECjbb2000  New_orderNew_order type takes almost 50% of all transactions.type takes almost 50% of all transactions.</p>
    <p>Case Case new_ordernew_order::</p>
    <p>// 1. initialize a new order e// 1. initialize a new order e--commerce TXcommerce TX</p>
    <p>// 2. assign a new order ID (// 2. assign a new order ID (newIDnewID++)++)</p>
    <p>// 3. retrieve items/stocks from warehouse (// 3. retrieve items/stocks from warehouse (itemTableitemTable, , stockTablestockTable))</p>
    <p>// 4. calculate the cost and update warehouse// 4. calculate the cost and update warehouse</p>
    <p>// 5. record the order for delivery (// 5. record the order for delivery (orderTableorderTable) )</p>
    <p>// 6. display the processing result// 6. display the processing result</p>
    <p>Shared Variable B-Tree</p>
    <p>B-Tree</p>
  </div>
  <div class="page">
    <p>Closed nesting (1)Closed nesting (1)</p>
    <p>Child TX is merged to parent TX at commit.Child TX is merged to parent TX at commit.</p>
    <p>Reduction of violation penaltyReduction of violation penalty</p>
    <p>Parent RWParent RW--set &lt;= Parent RWset &lt;= Parent RW--set U Child RWset U Child RW--setset</p>
    <p>Closed nesting doesnClosed nesting doesnt break the atomicity of original TX.t break the atomicity of original TX.</p>
    <p>// A is initially 0;</p>
    <p>atomic {</p>
    <p>....</p>
    <p>A = ;</p>
    <p>Core 1Core 0</p>
    <p>= A; // 0</p>
    <p>atomic {</p>
    <p>A++; // 1</p>
    <p>.</p>
    <p>}</p>
    <p>}</p>
    <p>= A; // 1</p>
  </div>
  <div class="page">
    <p>Closed nesting (2)Closed nesting (2)</p>
    <p>2 closed nested transactions2 closed nested transactions</p>
    <p>Case Case new_ordernew_order::</p>
    <p>// 1. initialize a new order TX// 1. initialize a new order TX</p>
    <p>// 2. assign a new order ID (// 2. assign a new order ID (newIDnewID++)++)</p>
    <p>// 3. retrieve items/stocks from warehouse (// 3. retrieve items/stocks from warehouse (itemTableitemTable, ,</p>
    <p>stockTablestockTable))</p>
    <p>// 4. calculate the cost and update warehouse// 4. calculate the cost and update warehouse</p>
    <p>// 5. record the order for delivery (// 5. record the order for delivery (orderTableorderTable) )</p>
    <p>// 6. display the result// 6. display the result</p>
    <p>47.9 % reduction in violation cycles47.9 % reduction in violation cycles</p>
    <p>5.36x speedup5.36x speedup</p>
  </div>
  <div class="page">
    <p>Open nesting (1)Open nesting (1)</p>
    <p>Core 1Core 0</p>
    <p>A = ;</p>
    <p>Child TX communicates to all the other Child TX communicates to all the other TXesTXes</p>
    <p>Child WChild W--set is broadcasted through system.set is broadcasted through system.</p>
    <p>Communication in the middle of a transactionCommunication in the middle of a transaction</p>
    <p>Child RChild R--set is cleaned out.set is cleaned out.</p>
    <p>Elimination of violationsElimination of violations</p>
    <p>A = ;</p>
    <p>// A is initially 0;</p>
    <p>atomic {</p>
    <p>....</p>
    <p>open_atomic {</p>
    <p>A++; // 1</p>
    <p>. }</p>
    <p>}</p>
    <p>= A; // 1 No conflict !</p>
  </div>
  <div class="page">
    <p>Open nesting (2)Open nesting (2)</p>
    <p>1 open nested transaction1 open nested transaction</p>
    <p>Case Case new_ordernew_order::</p>
    <p>// 1. initialize a new order// 1. initialize a new order</p>
    <p>// 2. assign a new order ID (// 2. assign a new order ID (newIDnewID++)++)</p>
    <p>// 3. retrieve items/stocks from warehouse (// 3. retrieve items/stocks from warehouse (itemTableitemTable, , stockTablestockTable))</p>
    <p>// 4. calculate the cost and update warehouse// 4. calculate the cost and update warehouse</p>
    <p>// 5. record the order for delivery (// 5. record the order for delivery (orderTableorderTable) )</p>
    <p>// 6. display the result// 6. display the result</p>
    <p>12 % reduction in the number of violation12 % reduction in the number of violation</p>
    <p>4.96x speedup4.96x speedup</p>
    <p>Compensation code for rollbackCompensation code for rollback  Here rollback results in only a gap in Here rollback results in only a gap in newIDnewID..</p>
    <p>newID++</p>
  </div>
  <div class="page">
    <p>Other interesting ideasOther interesting ideas</p>
    <p>Mixture of open/close nestingMixture of open/close nesting</p>
    <p>Advantages from both nested transactionsAdvantages from both nested transactions</p>
    <p>Smaller flat transactionsSmaller flat transactions</p>
    <p>newIDnewID is is incremetedincremeted in a separate flat transaction.in a separate flat transaction.</p>
    <p>In general, programmers should guarantee the In general, programmers should guarantee the correctness.correctness.</p>
    <p>ComposabilityComposability is a challenge.is a challenge.</p>
    <p>Early releaseEarly release</p>
    <p>For BFor B--tree structuretree structure</p>
    <p>See talk on See talk on Early Release: Friend or Foe?Early Release: Friend or Foe?</p>
  </div>
  <div class="page">
    <p>ConclusionConclusion  We parallelized SPECjbb2000 with transactions.We parallelized SPECjbb2000 with transactions.</p>
    <p>Flat transaction for speculative parallelismFlat transaction for speculative parallelism  A reasonable speedup is obtained.A reasonable speedup is obtained.</p>
    <p>Closed nestingClosed nesting  The violation penalty is reduced.The violation penalty is reduced.</p>
    <p>Open nestingOpen nesting</p>
    <p>Violations are eliminated.Violations are eliminated.</p>
    <p>Good speedup with small changes in source codeGood speedup with small changes in source code  A couple of nested transactionsA couple of nested transactions</p>
    <p>We are heading for a transactional benchmark We are heading for a transactional benchmark suite.suite.  Realistic transactional applicationsRealistic transactional applications</p>
  </div>
  <div class="page">
    <p>Questions?Questions?Questions?Questions?Questions?Questions?Questions?Questions?</p>
    <p>Whew~!</p>
    <p>Jae Woong ChungJae Woong Chung jwchung@stanford.edujwchung@stanford.edu</p>
    <p>Computer Systems Lab.Computer Systems Lab.</p>
    <p>Stanford UniversityStanford University</p>
    <p>http://tcc.stanford.eduhttp://tcc.stanford.edu</p>
  </div>
</Presentation>
