<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Apps with Hardware Enabling Run-time Architectural Customization in Smart Phones</p>
    <p>Michael Coughlin, Ali Ismail, Eric Keller University of Colorado Boulder</p>
  </div>
  <div class="page">
    <p>Mobile Devices</p>
    <p>Devices are designed around certain restrictions</p>
    <p>This leads vendors to make tradeoffs</p>
    <p>What if users and developers could choose?</p>
  </div>
  <div class="page">
    <p>Vision: Smart Phone with an FPGA</p>
    <p>HW SW</p>
    <p>Android</p>
    <p>FPGA ARM</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>Software-defined Radio</p>
  </div>
  <div class="page">
    <p>High-performance Computing</p>
    <p>Cryptography</p>
    <p>http://www.nallatech.com/40gbit-aes-encryption-using-opencl-and-fpgas/</p>
    <p>Analytics</p>
    <p>http://www.datanami.com/2015/03/10/fpga-system-smokes-spark-on-streaming-analytics/</p>
  </div>
  <div class="page">
    <p>Architectural Enhancements</p>
    <p>Somniloquy (NSDI 09) (SEC 04)</p>
  </div>
  <div class="page">
    <p>Why is now the right time?</p>
    <p>SoCs with Programmable Logic coupled with ARM Cortex A9 (same as iPhone 4 and many other smartphones)</p>
    <p>High-level Synthesis Write C / C++ / SystemC / OpenCL code</p>
  </div>
  <div class="page">
    <p>Fundamental Problem:</p>
    <p>Sharing the FPGA between applications</p>
  </div>
  <div class="page">
    <p>What we can already do</p>
    <p>Processor</p>
    <p>App loads: software runs on processor, FPGA configured with hardware</p>
    <p>FPGA</p>
    <p>AppX</p>
    <p>AppX Hardware</p>
    <p>AppX Software</p>
  </div>
  <div class="page">
    <p>What we can already do</p>
    <p>This is currently possible  run-time reconfiguration</p>
    <p>Processor FPGA AppX</p>
    <p>Hardware</p>
    <p>AppX Software</p>
    <p>App loads: software runs on processor, FPGA configured with hardware</p>
    <p>Sort of</p>
  </div>
  <div class="page">
    <p>What we cant do</p>
    <p>What if we have two apps?</p>
    <p>Processor FPGA AppX</p>
    <p>Hardware</p>
    <p>AppX Software</p>
    <p>AppY</p>
    <p>AppY Hardware</p>
    <p>AppY Software</p>
  </div>
  <div class="page">
    <p>What we cant do</p>
    <p>What if its a single chip (and some I/O goes through the FPGA)</p>
    <p>I/O</p>
    <p>Processor FPGA AppX</p>
    <p>Hardware</p>
    <p>AppX Software</p>
    <p>I/O</p>
    <p>AppY</p>
    <p>AppY Hardware</p>
    <p>AppY Software</p>
  </div>
  <div class="page">
    <p>Over a decade of research has proposed two main solutions:  Run-time place-and-route  Slot-based reconfiguration</p>
    <p>Why hasnt this been solved before?</p>
  </div>
  <div class="page">
    <p>There is free space in the FPGA  Place a new module there</p>
    <p>Approach 1: Run-time Place/Route</p>
  </div>
  <div class="page">
    <p>Routing can fail  Routing is also very time consuming</p>
    <p>Therefore, is not practical</p>
    <p>Approach 1: Run-time Place/Route</p>
  </div>
  <div class="page">
    <p>Identical empty regions are reserved in FPGA</p>
    <p>Constrain tools to:  Not use wires/logic inside of slots  Use exact same wires for interface</p>
    <p>Approach 2: Slot-Based Reconfiguration</p>
    <p>Slot 1</p>
    <p>Slot 2</p>
    <p>Slot 3</p>
  </div>
  <div class="page">
    <p>Hardware is loaded into slots  Problem: if other logic exists, wire routing becomes very constrained</p>
    <p>Therefore, is also not practical</p>
    <p>Approach 2: Slot-Based Reconfiguration</p>
    <p>Slot 1</p>
    <p>Slot 2</p>
    <p>Slot 3</p>
  </div>
  <div class="page">
    <p>Run-time Place and Route  Is very computationally expensive  Can possibly fail</p>
    <p>Slot-base Reconfiguration  Constrained routing is very restrictive and not applicable generally</p>
    <p>Therefore, previous research is not practical</p>
    <p>Previous Research</p>
  </div>
  <div class="page">
    <p>Allows for sharing of the FPGA between general apps</p>
    <p>Uses existing vendor technologies</p>
    <p>Adopts the idea of slots from previous research</p>
    <p>Cloud RTR makes existing vendor technology work for general apps</p>
    <p>Introducing Cloud RTR</p>
  </div>
  <div class="page">
    <p>The App Deployment Model</p>
  </div>
  <div class="page">
    <p>Cloud RTR</p>
    <p>Manufacturers</p>
    <p>Developer</p>
    <p>Cloud RTR</p>
    <p>Android</p>
    <p>FPGA ARM</p>
    <p>Consumer</p>
    <p>Static Design</p>
    <p>Static Design</p>
    <p>Static Design</p>
  </div>
  <div class="page">
    <p>Creates a static design  All logic that does not change</p>
    <p>Design includes areas reserved for slots</p>
    <p>Sends this to the cloud compiler</p>
    <p>Manufacturer</p>
    <p>Static Design</p>
    <p>GPU AXI</p>
  </div>
  <div class="page">
    <p>Create an app using existing tools</p>
    <p>Create a hardware definition in C</p>
    <p>Developer</p>
    <p>bool example(ap_uint&lt;32&gt; *in ap_uint&lt;32&gt; *out, bool *enabled,</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Compiles hardware for each app  For each device variant  For each slot in each variant</p>
    <p>App Store (Cloud Compiler)</p>
    <p>X</p>
    <p>App</p>
    <p>[device1: [slot1: a.bit, slot2: b.bit, slot3: c.bit]]</p>
    <p>[device 2: [slot1: d.bit, slot2: e.bit]]</p>
    <p>Cloud Compiler</p>
    <p>Static Design</p>
    <p>Static Design</p>
    <p>Static Design</p>
  </div>
  <div class="page">
    <p>A system service manages slots</p>
    <p>Downloaded apps include slot hardware</p>
    <p>The system service loads app hardware for apps</p>
    <p>User (Operating System)</p>
    <p>.apk: [device 1: [slot1: a.bit, slot2: b.bit, slot3: c.bit]]</p>
    <p>FPGA GPU AXI</p>
  </div>
  <div class="page">
    <p>The slot manager enforces access to hardware</p>
    <p>However, FPGAs can theoretically directly access sensitive resources (while bypassing the OS)</p>
    <p>A secure loading system ensures that apps cannot access sensitive resources</p>
    <p>Security Considerations</p>
  </div>
  <div class="page">
    <p>Secure loading system</p>
    <p>Processor</p>
    <p>FPGA</p>
    <p>How does the secure loader work?</p>
    <p>Slot 1 Slot 2</p>
    <p>Memory Controller</p>
    <p>Operating System Signature Verification</p>
    <p>Reconfiguration Module</p>
    <p>ICAP</p>
  </div>
  <div class="page">
    <p>Secure loading system</p>
    <p>Processor</p>
    <p>FPGA</p>
    <p>Slot 2</p>
    <p>Memory Controller</p>
    <p>Operating System Signature Verification</p>
    <p>Reconfiguration Module</p>
    <p>ICAP</p>
    <p>Signed module</p>
    <p>Slot 1</p>
    <p>The OS wants to reconfigure Slot 1</p>
  </div>
  <div class="page">
    <p>Secure loading system</p>
    <p>Processor</p>
    <p>FPGA</p>
    <p>Slot 1 Slot 2</p>
    <p>Memory Controller</p>
    <p>Operating System Signature Verification</p>
    <p>Reconfiguration Module</p>
    <p>ICAP</p>
    <p>Signed module</p>
    <p>The signature of the module is verified</p>
  </div>
  <div class="page">
    <p>Secure loading system</p>
    <p>Processor</p>
    <p>FPGA</p>
    <p>Slot 1 Slot 2</p>
    <p>Memory Controller</p>
    <p>Operating System Signature Verification</p>
    <p>Reconfiguration Module</p>
    <p>ICAP</p>
    <p>Signed module</p>
    <p>The module is written to the ICAP</p>
  </div>
  <div class="page">
    <p>Secure loading system</p>
    <p>Processor</p>
    <p>FPGA</p>
    <p>Slot 1 Slot 2</p>
    <p>Memory Controller</p>
    <p>Operating System Signature Verification</p>
    <p>Reconfiguration Module</p>
    <p>ICAP Signed module</p>
    <p>The ICAP performs the reconfiguration</p>
  </div>
  <div class="page">
    <p>Is there value in apps with hardware?</p>
    <p>Is the cloud-based compilation of Cloud RTR practical?</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Micro benchmark 1: QAM demodulator</p>
  </div>
  <div class="page">
    <p>Micro benchmark 2: AES</p>
    <p>FPGA is 3x vs.</p>
    <p>OpenSSL</p>
  </div>
  <div class="page">
    <p>We also implemented a hardware memory scanner</p>
    <p>It can scan the entire address space transparently to the OS  2.7% memory read performance hit  5.5% memory write performance hit</p>
    <p>We tested this using the LMbench testbench</p>
    <p>Micro benchmark 3: Memory Scanner</p>
  </div>
  <div class="page">
    <p>Brute-force compilation</p>
    <p>Google Play Store Figures</p>
    <p># of Apps as of Dec 14 1.43 Million</p>
    <p>Average Monthly App Growth 6.10%</p>
    <p># of Apps for January 16 117,521</p>
    <p>provided by AppFigures.</p>
  </div>
  <div class="page">
    <p>Brute-force compilation</p>
    <p>Max # of Apps Compiled per day</p>
    <p># of Slots</p>
    <p>Apps</p>
    <p># of Device Variants</p>
    <p># of Machines Required to Compile Apps</p>
    <p>Reasonable for most scenarios</p>
  </div>
  <div class="page">
    <p>Brute-force compilation</p>
    <p># of Device Variants</p>
    <p># of Machines Required to Compile Apps</p>
    <p>Max # of Apps Compiled per day</p>
    <p># of Slots</p>
    <p>Apps</p>
    <p>Still reasonable for most scenarios</p>
  </div>
  <div class="page">
    <p>Compilation can be offloaded to manufacturers</p>
    <p>Manufacturers will likely reuse designs (Qualcomm, ARM chips are often reused)</p>
    <p>Developers will likely use libraries</p>
    <p>Reducing the numbers even more</p>
  </div>
  <div class="page">
    <p>Tor on Android</p>
    <p>AES is on the critical path</p>
    <p>Examine AES as an integration study</p>
    <p>Implementation Case Study: Orbot</p>
  </div>
  <div class="page">
    <p>What we found:  Memory operations are the bottleneck  Data must be placed correctly in memory  Userspace I/O has high overhead  Many system calls are incompatible with UIO</p>
    <p>It is easier to build an application from ground-up</p>
    <p>Implementation Case Study: Orbot</p>
  </div>
  <div class="page">
    <p>We have presented our vision of apps with hardware</p>
    <p>Cloud RTR implements our vision by leveraging the mobile app deployment model</p>
    <p>We have demonstrated the value and practicality of our vision</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Email: michael.coughlin@colorado.edu  Source code: https://github.com/nsr-colorado/cloud-rtr</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Vendor Supported Partial Reconfiguration</p>
    <p>Target FPGA</p>
    <p>Static Design</p>
    <p>Dynamic Module (s)</p>
    <p>Vendor tools</p>
    <p>base.bit  partial_1.bit  partial_2.bit</p>
    <p>(Partial bitstreams work in 1 location, and are just for base.bit)</p>
    <p>Goal: Space saving for customer</p>
  </div>
  <div class="page">
    <p>Crypto  Asymmetric (RSA, ECDSA, etc)  Symmetric (3DES, Twofish, Blowfish)</p>
    <p>Soft processors  Encoding  Network encoding (Reed-Solmon, etc)  Media encoding (JPEG, MPEG, etc)</p>
    <p>DSP  FFTs, Filters, etc</p>
    <p>Examples of Libraries</p>
  </div>
  <div class="page">
    <p>bool example(ap_uint&lt;32&gt; *in ap_uint&lt;32&gt; *out, bool *enabled,</p>
    <p>)</p>
    <p>Example hardware definition</p>
  </div>
  <div class="page">
    <p>typedefap_uint&lt;32&gt; uint32_t_hw; typedefhls::stream&lt;uint32_t_hw&gt; mem_stream32;</p>
    <p>bool aes(volatile unsigned int m_mm2s_ctl [500], volatile unsigned int m_s2mm_ctl[500], volatile unsigned sourceAddress, ap_uint&lt;128&gt; *key_in, ap_uint&lt;128&gt; *iv, volatile unsigned destinationAddress, unsigned int numBytes, int mode, mem_stream32&amp; s_in, mem_stream32&amp; s_out</p>
    <p>)</p>
    <p>More complicated hardware definition</p>
  </div>
  <div class="page">
    <p>The problem</p>
    <p>Lets examine the problem</p>
    <p>Processor FPGA</p>
    <p>AppX hardware</p>
    <p>AppX software</p>
    <p>I/O</p>
    <p>I/O</p>
  </div>
  <div class="page">
    <p>The problem</p>
    <p>Processor FPGA</p>
    <p>AppX hardware</p>
    <p>AppX software</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>First, there are various interconnects needed</p>
  </div>
  <div class="page">
    <p>The problem</p>
    <p>Processor FPGA</p>
    <p>AppX hardware</p>
    <p>AppX software</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Control signals and logic must also be placed</p>
  </div>
  <div class="page">
    <p>The problem</p>
    <p>Processor FPGA</p>
    <p>AppX hardware</p>
    <p>AppX software</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>The app may have complex inputs, or need to interact with other logic</p>
  </div>
  <div class="page">
    <p>A trusted system is booted with Secure Boot</p>
    <p>Included is a static module that reconfigures slots</p>
    <p>This module only allows signed modules into slots that access sensitive resources</p>
    <p>Secure loading system</p>
  </div>
  <div class="page">
    <p>Builds off of prior research</p>
    <p>but in a way that is compatible with vendor tools</p>
    <p>To do this, we leverage the deployment model for mobile apps</p>
    <p>Our solution</p>
  </div>
</Presentation>
