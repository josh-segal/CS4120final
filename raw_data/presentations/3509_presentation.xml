<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Foreshadow: Extracting the Keys to the Intel SGX Kingdom</p>
    <p>with Transient Out-of-Order Execution</p>
    <p>Jo Van Bulck 1 Marina Minkin 2 Ofir Weisse 3 Daniel Genkin 3 Baris Kasikci 3</p>
    <p>Frank Piessens 1 Mark Silberstein 2 Thomas F. Wenisch 3 Yuval Yarom 4 Raoul Strackx 1</p>
    <p>USENIX Security, August 2018</p>
  </div>
  <div class="page">
    <p>Road map</p>
  </div>
  <div class="page">
    <p>Evolution of side-channel attack occurrences in Google Scholar</p>
    <p>DO WE JUST SUCK AT... COMPUTERS?</p>
    <p>YUP. ESPECIALLY SHARED ONES.</p>
    <p>Based on github.com/Pold87/academic-keyword-occurrence and xkcd.com/1938/ 1 / 17</p>
  </div>
  <div class="page">
    <p>Security in a post-Meltdown world</p>
    <p>Classic attacker-defender race</p>
    <p>Exploit and patch application-level vulnerabilities (memory safety, side-channels)</p>
    <p>App</p>
    <p>OS</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>Security in a post-Meltdown world</p>
    <p>Game changer Meltdown</p>
    <p>Free universal read primitive  kernel page-table isolation</p>
    <p>App</p>
    <p>OS</p>
    <p>CPU</p>
    <p>!?</p>
  </div>
  <div class="page">
    <p>Rumors: Meltdown immunity for SGX enclaves?</p>
    <p>[enclaves] remain protected and completely secure</p>
    <p>International Business Times, February 2018</p>
    <p>[enclave memory accesses] redirected to an abort page, which has no value</p>
    <p>Anjuna Security, Inc., March 2018</p>
  </div>
  <div class="page">
    <p>Rumors: Meltdown immunity for SGX enclaves?</p>
    <p>https://wired.com and https://arstechnica.com</p>
  </div>
  <div class="page">
    <p>Intel SGX promise: Hardware-level isolation and attestation</p>
    <p>Mem HDD</p>
    <p>OS kernel</p>
    <p>Trusted Untrusted</p>
    <p>CPU</p>
    <p>AppApp</p>
    <p>TPM</p>
    <p>Hypervisor</p>
    <p>Enclave app</p>
  </div>
  <div class="page">
    <p>Intel SGX promise: Hardware-level isolation and attestation</p>
    <p>Mem HDD</p>
    <p>OS kernel</p>
    <p>Trusted Untrusted</p>
    <p>CPU</p>
    <p>AppApp</p>
    <p>TPM</p>
    <p>Hypervisor</p>
    <p>Enclave app</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Road map</p>
  </div>
  <div class="page">
    <p>Building Foreshadow</p>
  </div>
  <div class="page">
    <p>Building Foreshadow</p>
    <p>L1 terminal fault challenges</p>
  </div>
  <div class="page">
    <p>Meltdown recap: Transiently encoding unauthorized memory</p>
    <p>Unauthorized access</p>
  </div>
  <div class="page">
    <p>Meltdown recap: Transiently encoding unauthorized memory</p>
    <p>Unauthorized access Transient out-of-order window</p>
    <p>oracle array</p>
    <p>s e c re</p>
    <p>t id</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Meltdown recap: Transiently encoding unauthorized memory</p>
    <p>Unauthorized access Transient out-of-order window Exception</p>
    <p>(discard architectural state)</p>
  </div>
  <div class="page">
    <p>Meltdown recap: Transiently encoding unauthorized memory</p>
    <p>Unauthorized access Transient out-of-order window</p>
    <p>oracle array</p>
    <p>cache hit</p>
    <p>Exception handler</p>
  </div>
  <div class="page">
    <p>Challenge #1: Intel SGX abort page semantics</p>
  </div>
  <div class="page">
    <p>Challenge #1: Intel SGX abort page semantics</p>
    <p>Untrusted world view</p>
    <p>Enclaved memory reads 0xFF</p>
    <p>Meltdown bounces back ( mirror)</p>
    <p>Intra-enclave view</p>
    <p>Access enclaved + unprotected memory</p>
    <p>SGXpectre in-enclave code abuse</p>
  </div>
  <div class="page">
    <p>Challenge #1: Intel SGX abort page semantics</p>
    <p>Untrusted world view</p>
    <p>Enclaved memory reads 0xFF</p>
    <p>Meltdown bounces back ( mirror)</p>
    <p>Intra-enclave view</p>
    <p>Access enclaved + unprotected memory</p>
    <p>SGXpectre in-enclave code abuse 7 / 17</p>
  </div>
  <div class="page">
    <p>Challenge #1: Intel SGX abort page semantics</p>
    <p>Untrusted world view</p>
    <p>Enclaved memory reads 0xFF</p>
    <p>Meltdown bounces back ( mirror)</p>
    <p>Intra-enclave view</p>
    <p>Access enclaved + unprotected memory</p>
    <p>SGXpectre in-enclave code abuse 7 / 17</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Evade the abort page</p>
    <p>Note: SGX MMU sanitizes untrusted address translation</p>
    <p>SGX?</p>
    <p>Abort page semantics: An attempt to read from a non-existent or disallowed resource returns all ones for data (abort page). An attempt to write to a non-existent or disallowed physical resource is dropped. This behavior is unrelated to exception type abort (the others being Fault and Trap).</p>
    <p>https://software.intel.com/en-us/sgx-sdk-dev-reference-enclave-development-basics 8 / 17</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Evade the abort page</p>
    <p>Note: SGX MMU sanitizes untrusted address translation</p>
    <p>Van Bulck et al. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution, USENIX Security 2017 8 / 17</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Evade the abort page</p>
    <p>Straw man: (Speculative) accesses in non-enclave mode are dropped</p>
    <p>Van Bulck et al. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution, USENIX Security 2017 8 / 17</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Evade the abort page</p>
    <p>Stone man: Bypass abort page via untrusted page table</p>
    <p>Van Bulck et al. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution, USENIX Security 2017 8 / 17</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Evade the abort page</p>
    <p>Stone man: Bypass abort page via untrusted page table</p>
    <p>Unprivileged system call</p>
    <p>mprotect( secret_ptr &amp; 0xFFF, 0x1000, PROT_NONE );</p>
    <p>Van Bulck et al. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution, USENIX Security 2017 8 / 17</p>
  </div>
  <div class="page">
    <p>Challenge #2: Strict caching requirements</p>
  </div>
  <div class="page">
    <p>Challenge #2: Strict caching requirements</p>
    <p>L1 terminal fault</p>
    <p>Only enclave loads served from L1 reach transient out-of-order execution</p>
    <p>https://twitter.com/lavados/status/951066835310534656</p>
    <p>Foreshadow present bit  Meltdown supervisor bit</p>
  </div>
  <div class="page">
    <p>Challenge #2: Strict caching requirements</p>
    <p>L1 terminal fault</p>
    <p>Only enclave loads served from L1 reach transient out-of-order execution</p>
    <p>Foreshadow present bit  Meltdown supervisor bit</p>
  </div>
  <div class="page">
    <p>Challenge #2: Strict caching requirements</p>
    <p>Intel micro-architecture</p>
    <p>Address translation abort in parallel with L1 lookup (tag comparison)</p>
    <p>SGX? EPT</p>
    <p>walk? PT</p>
    <p>walk?</p>
    <p>L1D</p>
    <p>vadrs guest padrs</p>
    <p>host padrs</p>
    <p>Tag? Pass to out-of-order</p>
    <p>CPU micro-architecture</p>
    <p>EPCM fail</p>
    <p>Weisse et al. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution</p>
    <p>Foreshadow present bit  Meltdown supervisor bit</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Loading enclave secrets in L1</p>
    <p>SGX-Step</p>
    <p>Interrupt victim enclave at page or instruction-level granularity</p>
    <p>Memory operands + CPU registers (SSA)</p>
    <p>Intel HyperThreading: co-resident logical CPUs share L1</p>
    <p>Real time memory accesses</p>
    <p>Forcibly reload 4 KiB enclave page: ewb + eldu</p>
    <p>Reliably dump entire enclave address space</p>
    <p>Van Bulck et al. SGX-Step: A practical attack framework for precise enclave execution control, SysTEX 2017 10 / 17</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Loading enclave secrets in L1</p>
    <p>SGX-Step</p>
    <p>Interrupt victim enclave at page or instruction-level granularity</p>
    <p>Memory operands + CPU registers (SSA)</p>
    <p>Intel HyperThreading: co-resident logical CPUs share L1</p>
    <p>Real time memory accesses</p>
    <p>Forcibly reload 4 KiB enclave page: ewb + eldu</p>
    <p>Reliably dump entire enclave address space Van Bulck et al. SGX-Step: A practical attack framework for precise enclave execution control, SysTEX 2017</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Loading enclave secrets in L1</p>
    <p>SGX-Step</p>
    <p>Interrupt victim enclave at page or instruction-level granularity</p>
    <p>Memory operands + CPU registers (SSA)</p>
    <p>Intel HyperThreading: co-resident logical CPUs share L1</p>
    <p>Real time memory accesses</p>
    <p>Forcibly reload 4 KiB enclave page: ewb + eldu</p>
    <p>Reliably dump entire enclave address space</p>
    <p>Van Bulck et al. SGX-Step: A practical attack framework for precise enclave execution control, SysTEX 2017</p>
  </div>
  <div class="page">
    <p>Building Foreshadow: Loading enclave secrets in L1</p>
    <p>Many more optimization techniques + microbenchmarks  see paper!</p>
  </div>
  <div class="page">
    <p>Road map</p>
  </div>
  <div class="page">
    <p>Demo time!</p>
    <p>Based on xkcd.com/285/ 11 / 17</p>
  </div>
  <div class="page">
    <p>Road map</p>
  </div>
  <div class="page">
    <p>Establishing trust: Remote attestation and secret provisioning</p>
    <p>Binding secrets to enclave identity</p>
    <p>Goal: Secure end-to-end communication channel + local storage</p>
    <p>App enclave</p>
  </div>
  <div class="page">
    <p>Establishing trust: Remote attestation and secret provisioning</p>
    <p>CPU-level key derivation</p>
    <p>Intel == trusted 3th party (shared CPU master secret)</p>
    <p>App enclave</p>
    <p>EGETKEY</p>
    <p>EREPORT</p>
    <p>Quoting enclave</p>
    <p>Genuine attestation flow</p>
  </div>
  <div class="page">
    <p>Eroding trust: Remote attestation and secret provisioning</p>
    <p>Foreshadow adversary</p>
    <p>Extract long-term platform attestation key  forge Intel signatures</p>
    <p>App enclave</p>
    <p>Quoting enclave</p>
    <p>Bogus attestation flow</p>
    <p>EGETKEY</p>
  </div>
  <div class="page">
    <p>Eroding trust: Remote attestation and secret provisioning</p>
    <p>Foreshadow domino effects</p>
    <p>Active man-in-the-middle: read + modify all local and remote secrets (!)</p>
    <p>App enclave</p>
  </div>
  <div class="page">
    <p>Road map</p>
  </div>
  <div class="page">
    <p>Foreshadow-NG: Breaking the virtual memory abstraction</p>
    <p>L1 terminal fault [Int18]</p>
    <p>Unmap page  read arbitrary cached physical memory</p>
    <p>https://software.intel.com/security-software-guidance/software-guidance/l1-terminal-fault</p>
    <p>Weisse et al. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution 14 / 17</p>
  </div>
  <div class="page">
    <p>Foreshadow-NG: Breaking the virtual memory abstraction</p>
    <p>SGX? EPT</p>
    <p>walk? PT</p>
    <p>walk?</p>
    <p>L1D</p>
    <p>vadrs guest padrs</p>
    <p>host padrs</p>
    <p>Tag? Pass to out-of-order</p>
    <p>CPU micro-architecture</p>
    <p>EPCM fail</p>
    <p>Weisse et al. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution</p>
  </div>
  <div class="page">
    <p>Road map</p>
  </div>
  <div class="page">
    <p>Mitigating Foreshadow</p>
  </div>
  <div class="page">
    <p>Mitigating Foreshadow</p>
    <p>Future CPUs</p>
    <p>(silicon-based changes)</p>
    <p>https://newsroom.intel.com/editorials/advancing-security-silicon-level/</p>
  </div>
  <div class="page">
    <p>Mitigating Foreshadow</p>
    <p>OS kernel updates</p>
    <p>(sanitize page frame bits)</p>
    <p>Intel SGX: untrusted OS  no software-only mitigations</p>
  </div>
  <div class="page">
    <p>Mitigating Foreshadow</p>
    <p>Intel microcode updates</p>
    <p>Flush L1 cache on enclave/VMM exit + disable HyperThreading</p>
    <p>https://software.intel.com/security-software-guidance/software-guidance/l1-terminal-fault</p>
  </div>
  <div class="page">
    <p>Conclusions and lessons learned</p>
    <p>Take-away message</p>
    <p>Foreshadow == L1 cache read primitive  collapse CPU protection</p>
    <p>Intel -code patches for TCB recovery (+ disable HyperThreading!)</p>
    <p>Importance of fundamental side-channel research (e.g., page table attack surface)</p>
    <p>TEE design: avoid single point of failure (domino effects)</p>
  </div>
  <div class="page">
    <p>Conclusions and lessons learned</p>
    <p>Take-away message</p>
    <p>Foreshadow == L1 cache read primitive  collapse CPU protection</p>
    <p>Intel -code patches for TCB recovery (+ disable HyperThreading!)</p>
    <p>Importance of fundamental side-channel research (e.g., page table attack surface)</p>
    <p>TEE design: avoid single point of failure (domino effects)</p>
  </div>
  <div class="page">
    <p>Conclusions and lessons learned</p>
    <p>Take-away message</p>
    <p>Foreshadow == L1 cache read primitive  collapse CPU protection</p>
    <p>Intel -code patches for TCB recovery (+ disable HyperThreading!)</p>
    <p>Importance of fundamental side-channel research (e.g., page table attack surface)</p>
    <p>TEE design: avoid single point of failure (domino effects)</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>https://foreshadowattack.eu</p>
  </div>
  <div class="page">
    <p>References I</p>
    <p>G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai.</p>
    <p>Sgxpectre attacks: Leaking enclave secrets via speculative execution. arXiv preprint arXiv:1802.09085, 2018.</p>
    <p>Intel Corporation.</p>
    <p>Intel analysis of L1 terminal fault, August 2018. https://software.intel.com/security-software-guidance/insights/deep-dive-intel-analysis-l1-terminal-fault.</p>
    <p>M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg.</p>
    <p>Meltdown: Reading kernel memory from user space. In 27th USENIX Security Symposium (USENIX Security 18), 2018.</p>
    <p>J. Van Bulck, F. Piessens, and R. Strackx.</p>
    <p>SGX-Step: A practical attack framework for precise enclave execution control. In Proceedings of the 2nd Workshop on System Software for Trusted Execution, SysTEX17, pp. 4:14:6. ACM, 2017.</p>
    <p>J. Van Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx.</p>
    <p>Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution. In Proceedings of the 26th USENIX Security Symposium. USENIX Association, August 2017.</p>
    <p>O. Weisse, J. Van Bulck, M. Minkin, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, R. Strackx, T. F. Wenisch, and Y. Yarom.</p>
    <p>Foreshadow-NG: Breaking the virtual memory abstraction with transient out-of-order execution. Technical Report, 2018.</p>
    <p>Y. Xu, W. Cui, and M. Peinado.</p>
    <p>Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In 36th IEEE Symposium on Security and Privacy. IEEE, May 2015.</p>
  </div>
  <div class="page">
    <p>Appendix: Remote attestation</p>
    <p>Intel Provisioning Service</p>
    <p>Intel Quoting Service</p>
    <p>Provisioning Enclave</p>
    <p>Quoting Enclave</p>
    <p>Application Enclave</p>
    <p>Remote Verifier</p>
    <p>A</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Appendix: Key derivation</p>
    <p>do_egetkey(&amp;tmp); memcpy(&amp;key, &amp;tmp);</p>
    <p>memset(&amp;tmp, 0x0); free(&amp;tmp);</p>
    <p>do_egetkey (0x02658)</p>
    <p>... enclu[EGETKEY] ... ret</p>
    <p>sgx_get_key (0x11760)</p>
    <p>selib (trusted runtime)</p>
    <p>tmp (0xc6400)</p>
    <p>key (0xe87b0)</p>
    <p>le_get_launch_token</p>
    <p>sgx_get_key(&amp;key, keyid);</p>
    <p>sgx_cmac128(&amp;key, token); memset(&amp;key, 0x0);6 7</p>
    <p>return;</p>
  </div>
</Presentation>
