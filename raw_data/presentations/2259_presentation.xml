<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Supporting iWARP Compatibility and Features</p>
    <p>for Regular Network Adapters</p>
    <p>P. Balaji H. W. Jin K. Vaidyanathan D. K. Panda</p>
    <p>Network Based Computing Laboratory (NBCL)</p>
    <p>Ohio State University</p>
  </div>
  <div class="page">
    <p>Ethernet Overview</p>
    <p>Ethernet is the most widely used network infrastructure today</p>
    <p>Traditionally Ethernet has been notorious for performance issues</p>
    <p>Near an order-of-magnitude performance gap compared to other networks</p>
    <p>Cost conscious architecture</p>
    <p>Most Ethernet adapters were regular (layer 2) adapters</p>
    <p>Relied on host-based TCP/IP for network and transport layer support</p>
    <p>Compatibility with existing infrastructure (switch buffering, MTU)</p>
    <p>Used by 42.4% of the Top500 supercomputers</p>
    <p>Key: Reasonable performance at low cost</p>
    <p>TCP/IP over Gigabit Ethernet (GigE) can nearly saturate the link for current systems</p>
    <p>Several local stores give out GigE cards free of cost !</p>
    <p>10-Gigabit Ethernet (10GigE) recently introduced</p>
    <p>10-fold (theoretical) increase in performance while retaining existing features</p>
  </div>
  <div class="page">
    <p>Ethernet: Technology Trends  Broken into three levels of technologies</p>
    <p>Regular Ethernet adapters</p>
    <p>Layer-2 adapters</p>
    <p>Rely on host-based TCP/IP to provide network/transport functionality</p>
    <p>Could achieve a high performance with optimizations</p>
    <p>TCP Offload Engines (TOEs)</p>
    <p>Layer-4 adapters</p>
    <p>Have the entire TCP/IP stack offloaded on to hardware</p>
    <p>Sockets layer retained in the host space</p>
    <p>iWARP-aware adapters</p>
    <p>Layer-4 adapters</p>
    <p>Entire TCP/IP stack offloaded on to hardware</p>
    <p>Support more features than TCP Offload Engines</p>
    <p>No sockets ! Richer iWARP interface !</p>
    <p>E.g., Out-of-order placement of data, RDMA semantics</p>
    <p>[feng03:hoti, feng03:sc, balaji04:rait]</p>
    <p>[balaji05:hoti, balaji05:cluster]</p>
    <p>[jin05:hpidc, wyckoff05:rait]</p>
  </div>
  <div class="page">
    <p>Current Usage of Ethernet</p>
    <p>System Area Network or Cluster Environment</p>
    <p>Wide Area</p>
    <p>Networ k</p>
    <p>Distributed Cluster Environment</p>
    <p>Regular Ethernet</p>
    <p>TOE</p>
    <p>iWARP</p>
    <p>Regular Ethernet Cluster</p>
    <p>TOE Cluster</p>
    <p>iWARP Cluster</p>
  </div>
  <div class="page">
    <p>Problem Statement  Regular Ethernet adapters and TOEs are completely compatible</p>
    <p>Network level compatibility (Ethernet + IP + TCP + application payload)</p>
    <p>Interface level compatibility (both expose the sockets interface)</p>
    <p>With the advent of iWARP, this compatibility is disturbed</p>
    <p>Both ends of a connection need to be iWARP compliant</p>
    <p>Intermediate nodes do not need to understand iWARP</p>
    <p>The interface exposed is no longer sockets</p>
    <p>iWARP exposes a much richer and newer API</p>
    <p>Zero-copy, asynchronous and one-sided communication primitives</p>
    <p>Not very good for existing applications</p>
    <p>Two primary requirements for a wide-spread acceptance of iWARP</p>
    <p>Software Compatibility for Regular Ethernet with iWARP capable adapters</p>
    <p>A common interface which is similar to sockets and has the features of iWARP</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Introduction and Motivation</p>
    <p>TCP Offload Engines and iWARP</p>
    <p>Overview of the Proposed Software Stack</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Sockets Interface</p>
    <p>Application or Library</p>
    <p>What is a TCP Offload Engine (TOE)?</p>
    <p>Hardware</p>
    <p>User</p>
    <p>Kernel</p>
    <p>TCP</p>
    <p>IP</p>
    <p>Device Driver</p>
    <p>Network Adapter (e.g., 10GigE)</p>
    <p>Sockets Interface</p>
    <p>Application or Library</p>
    <p>Hardware</p>
    <p>User</p>
    <p>Kernel</p>
    <p>TCP</p>
    <p>IP</p>
    <p>Device Driver</p>
    <p>Network Adapter (e.g., 10GigE)</p>
    <p>Offloaded TCP</p>
    <p>Offloaded IP</p>
    <p>Traditional TCP/IP stack TOE stack</p>
    <p>Data Path</p>
  </div>
  <div class="page">
    <p>MPA</p>
    <p>iWARP Protocol Suite</p>
    <p>RDMAP ULP</p>
    <p>RDMAPRDDP ULP</p>
    <p>RDDP</p>
    <p>TCP</p>
    <p>SCTP</p>
    <p>IP</p>
    <p>Courtesy iWARP Specification</p>
    <p>In-order Delivery and Out-oforder Placement</p>
    <p>Middle Box Fragmentation</p>
    <p>Feature Rich Interface</p>
    <p>More details provided in the paper or in the iWARP Specification</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Introduction and Motivation</p>
    <p>TCP Offload Engines and iWARP</p>
    <p>Overview of the Proposed Software Stack</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Proposed Software Stack</p>
    <p>The Proposed Software stack is broken into two layers</p>
    <p>Software iWARP implementation</p>
    <p>Provides wire compatibility with iWARP-compliant adapters</p>
    <p>Exposes the iWARP feature set to the upper layers</p>
    <p>Two implementations provided: User-level iWARP and Kernel-level iWARP</p>
    <p>Extended Sockets Interface</p>
    <p>Extends the sockets interface to encompass the iWARP features</p>
    <p>Maps a single file descriptor to both the iWARP as well as the normal TCP connection</p>
    <p>Standard sockets applications can run WITHOUT any modifications</p>
    <p>Minor modifications to applications required to utilize the richer feature set</p>
  </div>
  <div class="page">
    <p>Software iWARP and Extended Sockets Interface</p>
    <p>Application</p>
    <p>Extended Sockets Interface</p>
    <p>User-level iWARP</p>
    <p>IP</p>
    <p>Sockets</p>
    <p>TCP</p>
    <p>Device Driver</p>
    <p>Network Adapter</p>
    <p>Application</p>
    <p>Extended Sockets Interface</p>
    <p>Kernel-level iWARP</p>
    <p>TCP (Modified with MPA)</p>
    <p>IP</p>
    <p>Device Driver</p>
    <p>Network Adapter</p>
    <p>Sockets</p>
    <p>Application</p>
    <p>Extended Sockets Interface</p>
    <p>High Performance Sockets</p>
    <p>Sockets</p>
    <p>Network Adapter</p>
    <p>TCP</p>
    <p>IP</p>
    <p>Device Driver</p>
    <p>Offloaded TCP</p>
    <p>Offloaded IP</p>
    <p>Software iWARP</p>
    <p>Application</p>
    <p>Extended Sockets Interface</p>
    <p>High Performance Sockets</p>
    <p>Sockets</p>
    <p>Network Adapter</p>
    <p>TCP</p>
    <p>IP</p>
    <p>Device Driver</p>
    <p>Offloaded TCP</p>
    <p>Offloaded IP</p>
    <p>Offloaded iWARP</p>
    <p>Regular Ethernet Adapters TCP Offload Engines iWARP compliant Adapters</p>
  </div>
  <div class="page">
    <p>Designing the Software Stack</p>
    <p>User-level iWARP implementation</p>
    <p>Non-blocking Communication Operations</p>
    <p>Asynchronous Communication Progress</p>
    <p>Kernel-level iWARP implementation</p>
    <p>Zero-copy data transmission and single-copy data reception</p>
    <p>Handling Out-of-order segments</p>
    <p>Extended Sockets Interface</p>
    <p>Generic Design to work over any iWARP implementation</p>
  </div>
  <div class="page">
    <p>Non-Blocking and Asynchronous Communication</p>
    <p>Post_send()</p>
    <p>setsockopt()</p>
    <p>write()</p>
    <p>Post_recv()</p>
    <p>setsockopt()</p>
    <p>Recv_Done()</p>
    <p>User-level iWARP is a multi-threaded implementation</p>
    <p>Main Thread</p>
    <p>Async Thread</p>
    <p>Main Thread</p>
    <p>Async Thread</p>
  </div>
  <div class="page">
    <p>Zero-copy Transmission in Kernel-level iWARP</p>
    <p>Memory map user buffers to kernel buffers</p>
    <p>Mapping needs to be in place till the reliability ACK is received</p>
    <p>Buffers are mapped during memory registration</p>
    <p>Avoids mapping overhead during data transmission</p>
    <p>User Virtual Address Space</p>
    <p>Physical Address Space</p>
    <p>Kernel Virtual Address Space</p>
    <p>Memory Registration Data Transmission</p>
  </div>
  <div class="page">
    <p>Handling Out-of-order Segments</p>
    <p>Out-of-Order Packet arrives</p>
    <p>INTR on arrival NIC</p>
    <p>socket buffers</p>
    <p>Wait for Intermediate packets</p>
    <p>checksum</p>
    <p>DMA</p>
    <p>Data is retained in the Socket buffer even after it is placed !</p>
    <p>This ensures that TCP/IP handles reliability and not the iWARP stack</p>
    <p>Iwarp_wait( )</p>
    <p>Data Placed</p>
    <p>Application NOT notified</p>
    <p>copy</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Introduction and Motivation</p>
    <p>TCP Offload Engines and iWARP</p>
    <p>Overview of the Proposed Software Stack</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Experimental Test-bed</p>
    <p>Cluster of Four Node P-III 700MHz Quad-nodes</p>
    <p>1GB 266MHz SDRAM</p>
    <p>Alteon Gigabit Ethernet Network Adapters</p>
    <p>Packet Engine 4-port Gigabit Ethernet switch</p>
    <p>Linux 2.4.18-smp</p>
  </div>
  <div class="page">
    <p>Ping-Pong Latency Test</p>
  </div>
  <div class="page">
    <p>Uni-directional Stream Bandwidth Test</p>
  </div>
  <div class="page">
    <p>Software Distribution  Public Distribution of User-level and Kernel-level Implementations</p>
    <p>User-level Library</p>
    <p>Kernel module for 2.4 kernels</p>
    <p>Kernel patch for 2.4.18 kernel</p>
    <p>Extended Sockets Interface for software iWARP</p>
    <p>Contact Information</p>
    <p>{panda, balaji}@cse.ohio-state.edu</p>
    <p>http://nowlab.cse.ohio-state.edu</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Introduction and Motivation</p>
    <p>TCP Offload Engines and iWARP</p>
    <p>Overview of the Proposed Software Stack</p>
    <p>Performance Evaluation</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Concluding Remarks</p>
    <p>Ethernet has been broken down into three technology levels</p>
    <p>Regular Ethernet, TCP Offload Engines and iWARP-compliant adapters</p>
    <p>Compatibility between these technologies is important</p>
    <p>Regular Ethernet and TOE are completely compatible</p>
    <p>Both the wire protocol and the ULP interface are the same</p>
    <p>iWARP does not share such compatibility</p>
    <p>Two primary requirements for a wide-spread acceptance of iWARP</p>
    <p>Software Compatibility for Regular Ethernet with iWARP capable adapters</p>
    <p>A common interface which is similar to sockets and has the features of iWARP</p>
    <p>We provided a software stack which meets these requirements</p>
  </div>
  <div class="page">
    <p>Continuing and Future Work</p>
    <p>The current Software iWARP is only built for Regular Ethernet</p>
    <p>TCP Offload Engines provide more features than Regular Ethernet</p>
    <p>Needs to be extended to all kinds of Ethernet networks</p>
    <p>E.g., TCP Offload Engines, iWARP-compliant adapters, Myrinet 10G adapters</p>
    <p>Interoperability with Ammasso RNICs</p>
    <p>Modularized approach to enable/disable components in the iWARP stack</p>
    <p>Simulated Framework for studying NIC architectures</p>
    <p>NUMA Architectures on the NIC for iWARP Offload</p>
    <p>Flow Control/Buffer Management Features for Extended Sockets</p>
  </div>
  <div class="page">
    <p>Acknowledgments</p>
  </div>
  <div class="page">
    <p>Web Pointers</p>
    <p>Network Based Computing</p>
    <p>Laboratory Website: http://www.cse.ohio-state.edu/~balaji</p>
    <p>Group Homepage: http://nowlab.cse.ohio-state.edu</p>
    <p>Email: balaji@cse.ohio-state.edu</p>
    <p>NBCL</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>DDP Architecture</p>
    <p>Extended sockets API</p>
    <p>Connection management handled by the standard sockets API</p>
    <p>Data transfer carried out using two communication models</p>
    <p>Untagged Communication Model</p>
    <p>Tagged Communication Model</p>
    <p>Out-of-Order Placement; In-order Delivery</p>
    <p>Segmentation and Re-assembly of messages</p>
  </div>
  <div class="page">
    <p>DDP Untagged Communication Model</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>S Q</p>
    <p>R Q</p>
  </div>
  <div class="page">
    <p>DDP Untagged Model Specifications</p>
    <p>Simple send-receive based communication model</p>
    <p>Receiver has to inform DDP about a buffer before hand</p>
    <p>When data arrives, it is placed in the buffer directly</p>
    <p>Zero-Copy data transfer</p>
    <p>No flow control guaranteed by DDP; application takes care of this</p>
    <p>Explicit message delivery required on the receiver side</p>
  </div>
  <div class="page">
    <p>DDP Tagged Communication Model</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>S Q</p>
    <p>R Q</p>
  </div>
  <div class="page">
    <p>DDP Tagged Model Specifications</p>
    <p>One-sided communication model</p>
    <p>Receiver has to inform the sender about a buffer before hand</p>
    <p>Sender can directly read or write to the receiver buffer</p>
    <p>Zero-Copy data transfer</p>
    <p>No flow control required since the receiver is not involved at all</p>
    <p>No message delivery on the receiver side; only data placement</p>
  </div>
  <div class="page">
    <p>Out-of-Order Data Placement</p>
    <p>DDP allows out-of-order data placement</p>
    <p>Two segments in a message can be transmitted out of order</p>
    <p>Two segments in a message can be placed out of order</p>
    <p>A message cannot be delivered till all segments in it are placed</p>
    <p>A message cannot be delivered till all previous messages are delivered</p>
    <p>Reduced buffer requirements</p>
    <p>Most beneficial for slightly congested networks</p>
    <p>TCP Fast retransmit avoids performance degradation</p>
    <p>Out-of-order placement avoids extra copies and buffering</p>
  </div>
  <div class="page">
    <p>Segmentation and Reassembly</p>
    <p>DDP does not deal with IP fragmentation</p>
    <p>IP layer does IP reassembly and hands over to DDP</p>
    <p>Segmentation is tricky in DDP</p>
    <p>Message boundaries need to be retained unlike TCP streaming</p>
    <p>Sender performs segmentation while maintaining boundaries</p>
    <p>Receiver can perform reassembly as long as boundaries are maintained</p>
    <p>What about TCP segmentation/reassembly on intermediate nodes?</p>
    <p>Layer-4 switches such as Load-Balancers</p>
    <p>TCP aware; can assume TCP streaming semantics</p>
  </div>
  <div class="page">
    <p>Layer-4 Switches</p>
    <p>Load Balancer WAN</p>
    <p>Google</p>
    <p>Servers</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>TCP Splicing</p>
    <p>Load Balancing Application</p>
    <p>TCP/IP Stack with TCP Splicing</p>
    <p>Network Interface Card</p>
    <p>The TCP stack can assume streaming</p>
    <p>No one-to-one correspondence between the received segments and</p>
    <p>transmitted segments</p>
  </div>
  <div class="page">
    <p>Marker PDU Aligned Protocol</p>
    <p>DDP segments created by sender need not be retained</p>
    <p>TCP Splicing</p>
    <p>DDP header needs to be recognized</p>
    <p>If message boundaries are not retained, this is not possible !</p>
    <p>Need a solution independent of message segmentation</p>
    <p>MPA Protocol</p>
    <p>Places strips of data at regular intervals</p>
    <p>Interval denoted by the TCP sequence number</p>
    <p>Each strip points to the DDP header</p>
  </div>
  <div class="page">
    <p>MPA Protocol</p>
    <p>DDP Heade</p>
    <p>r</p>
    <p>ULP Payload (if any)</p>
    <p>DDP Heade</p>
    <p>r</p>
    <p>ULP Payload (if any)</p>
    <p>CRCPadSegment Length</p>
  </div>
</Presentation>
