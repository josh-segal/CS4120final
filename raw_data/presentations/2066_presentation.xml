<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>From Lone Dwarfs To Giant Superclusters: Rethinking OS Abstractions for the Cloud</p>
    <p>Nikos Vasilakis, Ben Karel, Jonathan M. Smith The University of Pennsylvania | HotOS 2015</p>
    <p>mass ively</p>
    <p>distri buted</p>
    <p>comm odity</p>
  </div>
  <div class="page">
    <p>given a text file and an integer k, print the k most common words in the file (and the number of their occurrences) in decreasing frequency.</p>
    <p>[Knuth]: a literate program</p>
    <p>[Bentley]: programming pearls</p>
    <p>background credit: from the film The Party, 1968</p>
  </div>
  <div class="page">
    <p>[ McIlroy ]:</p>
    <p>extensive critique includes a shell one-liner made of basic unix filters + pipes</p>
    <p>#!/usr/bin/env bash tr -cs A-Za-z '\n' | tr A-Z a-z | sort | uniq -c | sort -rn | sed ${1}q</p>
    <p>background credit: Bell Labs</p>
  </div>
  <div class="page">
    <p>How would we solve it today?</p>
    <p>background credit: Larry Salk, Summer Cocktail Party with English Butler, 1961</p>
  </div>
  <div class="page">
    <p>Hadoop using</p>
    <p>a 10-node Amazon cluster</p>
    <p>import java.io.IOException;</p>
    <p>import java.util.StringTokenizer;</p>
    <p>import org.apache.hadoop.conf.Configuration;</p>
    <p>import org.apache.hadoop.fs.Path;</p>
    <p>import org.apache.hadoop.io.IntWritable;</p>
    <p>import org.apache.hadoop.io.Text;</p>
    <p>import org.apache.hadoop.mapreduce.Job;</p>
    <p>import org.apache.hadoop.mapreduce.Mapper;</p>
    <p>import org.apache.hadoop.mapreduce.Reducer;</p>
    <p>import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</p>
    <p>import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</p>
    <p>public class WordCount {</p>
    <p>public static class TokenizerMapper</p>
    <p>extends Mapper&lt;Object, Text, Text, IntWritable&gt;{</p>
    <p>private final static IntWritable one = new IntWritable(1);</p>
    <p>private Text word = new Text();</p>
    <p>public void map(Object key, Text value, Context context</p>
    <p>) throws IOException, InterruptedException {</p>
    <p>StringTokenizer itr = new StringTokenizer(value.toString());</p>
    <p>while (itr.hasMoreTokens()) {</p>
    <p>word.set(itr.nextToken());</p>
    <p>context.write(word, one);</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>public static class IntSumReducer</p>
    <p>extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; {</p>
    <p>private IntWritable result = new IntWritable();</p>
    <p>public void reduce(Text key, Iterable&lt;IntWritable&gt; values,</p>
    <p>Context context</p>
    <p>) throws IOException, InterruptedException {</p>
    <p>int sum = 0;</p>
    <p>for (IntWritable val : values) {</p>
    <p>sum += val.get();</p>
    <p>}</p>
    <p>result.set(sum);</p>
    <p>context.write(key, result);</p>
    <p>}</p>
    <p>}</p>
    <p>public static void main(String[] args) throws Exception {</p>
    <p>Configuration conf = new Configuration();</p>
    <p>Job job = Job.getInstance(conf, &quot;word count&quot;);</p>
    <p>job.setJarByClass(WordCount.class);</p>
    <p>job.setMapperClass(TokenizerMapper.class);</p>
    <p>job.setCombinerClass(IntSumReducer.class);</p>
    <p>job.setReducerClass(IntSumReducer.class);</p>
    <p>job.setOutputKeyClass(Text.class);</p>
    <p>job.setOutputValueClass(IntWritable.class);</p>
    <p>FileInputFormat.addInputPath(job, new Path(args[0]));</p>
    <p>FileOutputFormat.setOutputPath(job, new Path(args[1]));</p>
    <p>System.exit(job.waitForCompletion(true) ? 0 : 1);</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>nowhere near 30 seconds!</p>
    <p>+ data download and setup (hdfs etc.) + complex setup &amp; sysadmin (requires expertise!) + non composable (not even interactive!) + non portable (cannot send a `script` to a friend) + non flexible (iterative MR, Long patch-redeploy cycle) + fetch, pre-process, post-process background credit: Petr Horek, The Elephant</p>
  </div>
  <div class="page">
    <p>cloud software stack</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>Drivers</p>
    <p>OS Kernel</p>
    <p>I/O | Userspace</p>
    <p>DB | runtime</p>
    <p>Distributed Framework</p>
    <p>Data Warehouse</p>
    <p>Application!</p>
    <p>node 1  node n</p>
    <p>node-local SW</p>
    <p>distributed SW</p>
    <p>app</p>
    <p>background credit: http://www.marottaonmoney.com/mailbag-how-do-you-measure-how-far-out-of-balance-aportfolio-is/</p>
  </div>
  <div class="page">
    <p>transformation is long overdue</p>
    <p>we have a set of ideas towards this direction</p>
    <p>(proposed) distributed</p>
    <p>stack</p>
    <p>Hardware</p>
    <p>OS</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>New Model</p>
    <p>The Internet</p>
    <p>Moores Plateau</p>
    <p>Massive Data</p>
    <p>Network Speeds</p>
    <p>HW Commoditization</p>
    <p>User Types</p>
    <p>Andromeda</p>
  </div>
  <div class="page">
    <p>business biology environmental studies communication military religion chemistry education history engineering linguistics mathematics space evolution physics anthropology archaeology economics medicine sociology psychology earth sciences</p>
    <p>CS experts</p>
    <p>One size does not fit all!.</p>
  </div>
  <div class="page">
    <p>data deluge data processing at extraordinary scale revolution of distributed processing frameworks</p>
  </div>
  <div class="page">
    <p>ubiquity of distributed processing on commodity hardware</p>
    <p>- heterogeneous, fault-prone + cheaper, tolerant en-masse</p>
  </div>
  <div class="page">
    <p>[meanwhile..]</p>
    <p>The Personal Cloud</p>
  </div>
  <div class="page">
    <p>background credit: http://i.imgur.com/CyKu2yr.jpg</p>
  </div>
  <div class="page">
    <p>andromeda</p>
    <p>user</p>
    <p>Andromeda Themes</p>
    <p>Fully-transparent and homogenous distribution Coupling of {linguistic features, systemic mechanisms} Focus on fully-interactive use</p>
  </div>
  <div class="page">
    <p>mantle</p>
    <p>local nano-kernel + global, distributed stratum</p>
    <p>nano-jit</p>
    <p>Fully-Transparent Object Distribution</p>
  </div>
  <div class="page">
    <p>mantle</p>
    <p>local nano-kernel + global, distributed stratum</p>
    <p>transparent task migration</p>
    <p>nano-jit</p>
    <p>Fully-Transparent Distribution</p>
    <p>migration</p>
  </div>
  <div class="page">
    <p>mantle</p>
    <p>local nano-kernel + global, distributed stratum</p>
    <p>transparent task migration</p>
    <p>communication channels</p>
    <p>nano-jit</p>
    <p>Fully-Transparent Distribution</p>
    <p>channels</p>
    <p>migration</p>
  </div>
  <div class="page">
    <p>mantle</p>
    <p>local nano-kernel + global, distributed stratum</p>
    <p>transparent task migration</p>
    <p>communication channels</p>
    <p>distributed key-value store</p>
    <p>nano-jit</p>
    <p>Fully-Transparent Distribution</p>
    <p>channels</p>
    <p>migration</p>
    <p>DKV store</p>
  </div>
  <div class="page">
    <p>Language  System</p>
    <p>A language and RT for writing distributed apps r,s = sys.async(http.crawl, [seed, 20, postprocess]) sys.status(r,s)</p>
    <p>Objects (in distributed FS, interchange, serialization) import &quot;http&quot; == fs.get(&quot;http&quot;) //+some checksumming and versioning</p>
    <p>Functions (overriding, modularity, composition) http.expose(&quot;/proc&quot;, curried(some, state)) //+ some RESTful conventions</p>
  </div>
  <div class="page">
    <p>Focus on fully interactive use Unrestricted abstraction access from REPL</p>
    <p>Everything compiled on-the-fly</p>
    <p>Live object introspection, module loading and function overloading</p>
    <p>Optional Syntactic Annotations</p>
  </div>
  <div class="page">
    <p>Systems that feel different newly</p>
    <p>provisioned</p>
    <p>failures</p>
    <p>Blissful ignorance! (still: tools for power users to get status -- see paper)</p>
    <p>Dynamic Provisioning, Heterogeneity Changing Topologies, Failures</p>
    <p>m31&gt; local sd : String = http://ndr.md m31&gt; local fn = jam.unzip</p>
    <p>. split . map(fs.incr)</p>
    <p>m31&gt; s,r = sys.async(url.get, { seed: sd , filter: mime.app.zip , postprocess: fn }) m31&gt;</p>
  </div>
  <div class="page">
    <p>significant body of work</p>
  </div>
  <div class="page">
    <p>similar observations from other academics and non-academics</p>
    <p>..: Googles Borg 2011: Mesos/Spark 2012: Osprey 2013: Unikernels, Docker, Urbit 2014: DIOS, Holistic Runtime, Mesosphere, Kubernetes 2015: Meteors Galaxy, VMWares CargOS</p>
  </div>
  <div class="page">
    <p>More details in the paper (e.g., scheduling, naming, sandboxing)</p>
    <p>UNIX Andromeda Influence from Existing A Lot (Multics, coroutines, B, ..) A Lot (DHTs, Migration, MP, ..)</p>
    <p>HW Focus Cheaper/lower-capability Cheaper/lower-capability</p>
    <p>Abstraction Axes FS, Shell, Process, IPC, file .. DFS, REPL, Tasks, MP, obj ..</p>
    <p>Implementation Language Higher-than-usual Higher-than-usual</p>
    <p>Workloads Single-node Massively-distributed</p>
    <p>Interactive vs. Apps Different (C vs. Shell) Same Language</p>
    <p>Isolation Hardware Software</p>
    <p>Kernel Monolithic Nano-JIT</p>
    <p>Environment Multi-user Single-user</p>
  </div>
</Presentation>
