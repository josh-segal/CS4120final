<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Identifying Information Disclosure in Web Applications with</p>
    <p>Retroactive Auditing</p>
    <p>Haogang Chen, Taesoo Kim, Xi Wang Nickolai Zeldovich, and M. Frans Kaashoek</p>
    <p>MIT CSAIL</p>
  </div>
  <div class="page">
    <p>Data breach: an enduring problem</p>
  </div>
  <div class="page">
    <p>Data breach: an enduring problem</p>
  </div>
  <div class="page">
    <p>What to do about it?</p>
  </div>
  <div class="page">
    <p>What to do about it?</p>
    <p>Before data breach: prevention techniques</p>
    <p>privilege separation</p>
    <p>encryption</p>
    <p>information flow control</p>
  </div>
  <div class="page">
    <p>What to do about it?</p>
    <p>Before data breach: prevention techniques</p>
    <p>privilege separation</p>
    <p>encryption</p>
    <p>information flow control</p>
    <p>After a potential data breach: damage control</p>
  </div>
  <div class="page">
    <p>Observation: Damage control is costly</p>
    <p>Notify the victims</p>
    <p>Data Breach Notification Laws (40/50 states)</p>
  </div>
  <div class="page">
    <p>Observation: Damage control is costly</p>
    <p>Notify the victims</p>
    <p>Data Breach Notification Laws (40/50 states)  However, your contact information  name, address, phone number and email address  was compromised.</p>
  </div>
  <div class="page">
    <p>Observation: Damage control is costly</p>
    <p>Notify the victims</p>
    <p>Data Breach Notification Laws (40/50 states)</p>
    <p>Pay for credit monitoring &amp; fraud protection</p>
  </div>
  <div class="page">
    <p>Observation: Damage control is costly</p>
    <p>Notify the victims</p>
    <p>Data Breach Notification Laws (40/50 states)</p>
    <p>Pay for credit monitoring &amp; fraud protection</p>
    <p>e.g., University of Maryland pledges to offer its 309,079 victims for 5-year of credit monitoring</p>
  </div>
  <div class="page">
    <p>Opportunity: Some data might not be leaked</p>
  </div>
  <div class="page">
    <p>Opportunity: Some data might not be leaked</p>
    <p>The vulnerability might not have been exploited yet</p>
  </div>
  <div class="page">
    <p>Opportunity: Some data might not be leaked</p>
    <p>The vulnerability might not have been exploited yet</p>
    <p>Attackers might not steal all data that they can</p>
  </div>
  <div class="page">
    <p>Opportunity: Some data might not be leaked</p>
    <p>The vulnerability might not have been exploited yet</p>
    <p>Attackers might not steal all data that they can</p>
    <p>Goal: precisely identify breached data items</p>
  </div>
  <div class="page">
    <p>Opportunity: Some data might not be leaked</p>
    <p>The vulnerability might not have been exploited yet</p>
    <p>Attackers might not steal all data that they can</p>
    <p>Goal: precisely identify breached data items</p>
    <p>Target damage control at real victims only</p>
  </div>
  <div class="page">
    <p>State of the art  Log all accesses to sensitive data</p>
    <p>Inspect logs after an intrusion</p>
  </div>
  <div class="page">
    <p>State of the art  Log all accesses to sensitive data</p>
    <p>Inspect logs after an intrusion</p>
    <p>Problems</p>
    <p>Need to know what is sensitive data beforehand</p>
  </div>
  <div class="page">
    <p>State of the art  Log all accesses to sensitive data</p>
    <p>Inspect logs after an intrusion</p>
    <p>Problems</p>
    <p>Need to know what is sensitive data beforehand</p>
    <p>Hard to tell legal v.s. illegal accesses</p>
  </div>
  <div class="page">
    <p>State of the art  Log all accesses to sensitive data</p>
    <p>Inspect logs after an intrusion</p>
    <p>Problems</p>
    <p>Need to know what is sensitive data beforehand</p>
    <p>Hard to tell legal v.s. illegal accesses</p>
    <p>Takes a long time: e.g., University of Maryland: one month to inspect 309,079 breached records</p>
  </div>
  <div class="page">
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
  </div>
  <div class="page">
    <p>Web Application</p>
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
  </div>
  <div class="page">
    <p>Web Application</p>
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
    <p>Alice</p>
    <p>Pumpkin</p>
  </div>
  <div class="page">
    <p>Web Application</p>
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
    <p>patch</p>
    <p>fix ACL</p>
    <p>or</p>
  </div>
  <div class="page">
    <p>Web Application</p>
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
    <p>replay</p>
    <p>patch</p>
    <p>fix ACL</p>
    <p>or</p>
    <p>Pumpkin</p>
  </div>
  <div class="page">
    <p>breach report</p>
    <p>Web Application</p>
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
    <p>replay</p>
    <p>patch</p>
    <p>fix ACL</p>
    <p>or</p>
  </div>
  <div class="page">
    <p>breach report</p>
    <p>Web Application</p>
    <p>Solution: Rail</p>
    <p>Goal: precisely identify previously breached data after a vulnerability is fixed</p>
    <p>replay</p>
    <p>session info (IP, user, time)</p>
    <p>data item fields</p>
    <p>patch</p>
    <p>fix ACL</p>
    <p>or</p>
  </div>
  <div class="page">
    <p>Challenge  State during replay can diverge from the original execution</p>
  </div>
  <div class="page">
    <p>Challenge  State during replay can diverge from the original execution</p>
    <p>Prior systems use record and replay for integrity</p>
  </div>
  <div class="page">
    <p>Challenge  State during replay can diverge from the original execution</p>
    <p>Prior systems use record and replay for integrity Retro [OSDI 10]</p>
    <p>Warp [SOSP 11]</p>
    <p>Record</p>
    <p>Replay</p>
  </div>
  <div class="page">
    <p>Challenge  State during replay can diverge from the original execution</p>
    <p>Prior systems use record and replay for integrity Rad [APSys 11]</p>
    <p>Poirot [OSDI 12] Retro [OSDI 10] Warp [SOSP 11]</p>
    <p>Record</p>
    <p>Replay</p>
  </div>
  <div class="page">
    <p>Challenge  State during replay can diverge from the original execution</p>
    <p>Prior systems use record and replay for integrity</p>
    <p>Rail focuses on confidentiality</p>
    <p>Rad [APSys 11] Poirot [OSDI 12]</p>
    <p>Retro [OSDI 10] Warp [SOSP 11]</p>
    <p>Record</p>
    <p>Replay</p>
  </div>
  <div class="page">
    <p>Challenge  State during replay can diverge from the original execution</p>
    <p>Prior systems use record and replay for integrity</p>
    <p>Rail focuses on confidentiality</p>
    <p>For precision, Rail must match up state and minimize state divergence between the two executions</p>
    <p>Rad [APSys 11] Poirot [OSDI 12] Rail</p>
    <p>Retro [OSDI 10] Warp [SOSP 11]</p>
    <p>Record</p>
    <p>Replay</p>
  </div>
  <div class="page">
    <p>Contribution</p>
    <p>Record and replay scheme for identifying data disclosures</p>
    <p>APIs for application developers</p>
    <p>Context matching to improve precision</p>
    <p>Prototype based on Meteor web framework</p>
    <p>Result: few changes to applications, precise, fast</p>
  </div>
  <div class="page">
    <p>Focus and assumptions  Focus: web applications&quot;</p>
    <p>Our prototype is based on, but not limited to, Meteor</p>
  </div>
  <div class="page">
    <p>Focus and assumptions  Focus: web applications&quot;</p>
    <p>Our prototype is based on, but not limited to, Meteor</p>
    <p>Assumptions&quot;</p>
    <p>Trusts the software stack below the web application</p>
    <p>TCB: web framework, runtime, DBMS, OS, etc.</p>
    <p>Requests do not change during replay, except for fixes</p>
    <p>Requests are serializable, etc.</p>
  </div>
  <div class="page">
    <p>Basic approach  Record and replay the web application  Compare the outputs of two executions</p>
  </div>
  <div class="page">
    <p>Basic approach  Record and replay the web application  Compare the outputs of two executions</p>
    <p>web app + Rail API</p>
  </div>
  <div class="page">
    <p>Basic approach  Record and replay the web application  Compare the outputs of two executions</p>
    <p>web app + Rail APIrequest output</p>
    <p>log record</p>
  </div>
  <div class="page">
    <p>Basic approach  Record and replay the web application  Compare the outputs of two executions</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>log record</p>
  </div>
  <div class="page">
    <p>Basic approach  Record and replay the web application  Compare the outputs of two executions</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>log record</p>
    <p>replay</p>
  </div>
  <div class="page">
    <p>Basic approach  Record and replay the web application  Compare the outputs of two executions</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>diff log record</p>
    <p>replay</p>
  </div>
  <div class="page">
    <p>Technical challenges</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>diff log record</p>
    <p>replay</p>
  </div>
  <div class="page">
    <p>Technical challenges</p>
    <p>Compare &amp; identify data items at object level</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>diff log record</p>
    <p>replay</p>
  </div>
  <div class="page">
    <p>Technical challenges</p>
    <p>Compare &amp; identify data items at object level</p>
    <p>Make replay deterministic</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>diff log record</p>
    <p>replay</p>
    <p>Non-deterministic inputs (date, random)</p>
  </div>
  <div class="page">
    <p>Technical challenges</p>
    <p>Compare &amp; identify data items at object level</p>
    <p>Make replay deterministic</p>
    <p>Selective replay for performance</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>diff log record</p>
    <p>replay</p>
    <p>Non-deterministic inputs (date, random)</p>
  </div>
  <div class="page">
    <p>Technical challenges</p>
    <p>Compare &amp; identify data items at object level</p>
    <p>Make replay deterministic</p>
    <p>Selective replay for performance</p>
    <p>Minimize code changes in the application</p>
    <p>web app + Rail APIrequest</p>
    <p>web app + patch</p>
    <p>output</p>
    <p>output</p>
    <p>diff log record</p>
    <p>replay</p>
    <p>Non-deterministic inputs (date, random)</p>
  </div>
  <div class="page">
    <p>Design: action history graph (AHG)  AHG [OSDI 10] tracks dependencies among actions and</p>
    <p>objects</p>
  </div>
  <div class="page">
    <p>Design: action history graph (AHG)  AHG [OSDI 10] tracks dependencies among actions and</p>
    <p>objects</p>
    <p>Actions</p>
    <p>Triggered by external events</p>
    <p>request / timer</p>
  </div>
  <div class="page">
    <p>Design: action history graph (AHG)  AHG [OSDI 10] tracks dependencies among actions and</p>
    <p>objects</p>
    <p>Actions</p>
    <p>Triggered by external events</p>
    <p>All application code is executed in the context of an action</p>
    <p>action</p>
    <p>request / timer</p>
  </div>
  <div class="page">
    <p>Design: action history graph (AHG)  AHG [OSDI 10] tracks dependencies among actions and</p>
    <p>objects</p>
    <p>Actions</p>
    <p>Triggered by external events</p>
    <p>All application code is executed in the context of an action</p>
    <p>Rail connects actions and objects as the code runs</p>
    <p>action</p>
    <p>db/users</p>
    <p>args</p>
    <p>code</p>
    <p>db/log</p>
    <p>request / timer</p>
    <p>view/&lt;sid&gt;</p>
    <p>write read trigger</p>
  </div>
  <div class="page">
    <p>Design: action history graph (AHG)  AHG [OSDI 10] tracks dependencies among actions and</p>
    <p>objects</p>
    <p>Actions</p>
    <p>Triggered by external events</p>
    <p>All application code is executed in the context of an action</p>
    <p>Rail connects actions and objects as the code runs</p>
    <p>Rail stores AHG in a persistent log</p>
    <p>action</p>
    <p>db/users</p>
    <p>args</p>
    <p>code</p>
    <p>db/log</p>
    <p>request / timer</p>
    <p>view/&lt;sid&gt;</p>
    <p>write read trigger</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed code</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed action&quot;</p>
    <p>#4</p>
    <p>action&quot; #1</p>
    <p>code</p>
    <p>action&quot; #3</p>
    <p>Time</p>
    <p>action&quot; #2</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed action&quot;</p>
    <p>#4</p>
    <p>db/users</p>
    <p>db/loglogin/sid</p>
    <p>action&quot; #1</p>
    <p>code</p>
    <p>action&quot; #3</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed action&quot;</p>
    <p>#4</p>
    <p>db/users</p>
    <p>db/loglogin/sid</p>
    <p>action&quot; #1</p>
    <p>code</p>
    <p>action&quot; #3</p>
    <p>login/sid</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed action&quot;</p>
    <p>#4</p>
    <p>db/users</p>
    <p>db/loglogin/sid</p>
    <p>action&quot; #1</p>
    <p>action #8</p>
    <p>code</p>
    <p>action&quot; #3</p>
    <p>action&quot; #12</p>
    <p>login/sid</p>
  </div>
  <div class="page">
    <p>Selective replay using AHG</p>
    <p>Rail replays each action sequentially in the time order</p>
    <p>Replays an action if any of its inputs or outputs are changed</p>
    <p>Replay is guaranteed to terminate</p>
    <p>Never runs actions earlier than current replaying action</p>
    <p>action&quot; #4</p>
    <p>db/users</p>
    <p>db/loglogin/sid</p>
    <p>action&quot; #1</p>
    <p>action #8</p>
    <p>code</p>
    <p>action&quot; #3</p>
    <p>action&quot; #12</p>
    <p>login/sid</p>
  </div>
  <div class="page">
    <p>Selective replay using Object API</p>
    <p>Rail must intercept all accesses to global objects</p>
    <p>e.g., inputs, outputs, database items, session states,</p>
  </div>
  <div class="page">
    <p>Selective replay using Object API</p>
    <p>Rail must intercept all accesses to global objects</p>
    <p>e.g., inputs, outputs, database items, session states,</p>
    <p>Reasons</p>
    <p>to track dependency between actions</p>
    <p>to make continuous checkpoints of object states</p>
  </div>
  <div class="page">
    <p>Selective replay using Object API</p>
    <p>Developer must wrap all global objects in the app using Rails object API</p>
  </div>
  <div class="page">
    <p>Selective replay using Object API</p>
    <p>Developer must wrap all global objects in the app using Rails object API</p>
  </div>
  <div class="page">
    <p>Selective replay using Object API</p>
    <p>Developer must wrap all global objects in the app using Rails object API</p>
    <p>Global objects are quite standard in all web apps.</p>
  </div>
  <div class="page">
    <p>Selective replay using Object API</p>
    <p>Developer must wrap all global objects in the app using Rails object API</p>
    <p>Global objects are quite standard in all web apps.</p>
    <p>Most wrappers can be done once in the framework</p>
  </div>
  <div class="page">
    <p>// Server side code var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); if (!uid || !hw || hw.dueDate &lt; (new Date)) throw new Error(Submission failed); Answers.insert( {_id: Math.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>Example: homework submission</p>
  </div>
  <div class="page">
    <p>// Server side code var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); if (!uid || !hw || hw.dueDate &lt; (new Date)) throw new Error(Submission failed); Answers.insert( {_id: Math.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>Example: homework submission</p>
  </div>
  <div class="page">
    <p>// Server side code var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); if (!uid || !hw || hw.dueDate &lt; (new Date)) throw new Error(Submission failed); Answers.insert( {_id: Math.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>Example: homework submission</p>
    <p>// Server side code using Rail API var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); var ctx = Rail.inputContext(hw_id, uid); if (!uid || !hw || hw.dueDate &lt; ctx.date()) throw new Error(Submission failed); Answers.insert( {_id: ctx.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
  </div>
  <div class="page">
    <p>// Server side code var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); if (!uid || !hw || hw.dueDate &lt; (new Date)) throw new Error(Submission failed); Answers.insert( {_id: Math.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>Example: homework submission</p>
    <p>// Server side code using Rail API var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); var ctx = Rail.inputContext(hw_id, uid); if (!uid || !hw || hw.dueDate &lt; ctx.date()) throw new Error(Submission failed); Answers.insert( {_id: ctx.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
  </div>
  <div class="page">
    <p>// Server side code var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); if (!uid || !hw || hw.dueDate &lt; (new Date)) throw new Error(Submission failed); Answers.insert( {_id: Math.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>Example: homework submission</p>
    <p>// Server side code using Rail API var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); var ctx = Rail.inputContext(hw_id, uid); if (!uid || !hw || hw.dueDate &lt; ctx.date()) throw new Error(Submission failed); Answers.insert( {_id: ctx.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>call&quot; action</p>
    <p>input context</p>
  </div>
  <div class="page">
    <p>// Server side code var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); if (!uid || !hw || hw.dueDate &lt; (new Date)) throw new Error(Submission failed); Answers.insert( {_id: Math.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>Example: homework submission</p>
    <p>// Server side code using Rail API var Homeworks = App.getDBCollection(hws); var Answers = App.getDBCollection(answers); ! App.method(submit, function (hw_id, answer) { var uid = App.getSessionUserId(); var hw = Homework.findOne( {_id: hw_id} ); var ctx = Rail.inputContext(hw_id, uid); if (!uid || !hw || hw.dueDate &lt; ctx.date()) throw new Error(Submission failed); Answers.insert( {_id: ctx.random(), hw: hw_id, user: uid, answer: answer} ); });</p>
    <p>call&quot; action</p>
    <p>database (answers)</p>
    <p>handler table</p>
    <p>code</p>
    <p>action argument</p>
    <p>input context</p>
    <p>session state</p>
    <p>database (hws)</p>
  </div>
  <div class="page">
    <p>view</p>
    <p>Uniform Object API</p>
    <p>Rail provides a uniform API for different types of objects</p>
    <p>Rail takes care of dependency tracking and checkpointing</p>
    <p>RailObject</p>
    <p>+ getValue() // accessor + add(,) // mutators +</p>
    <p>- rollback(ts) - equiv(ts) -</p>
    <p>code</p>
    <p>argument</p>
    <p>login</p>
    <p>database</p>
    <p>context</p>
    <p>inputs global states</p>
  </div>
  <div class="page">
    <p>outputsview</p>
    <p>Uniform Object API</p>
    <p>Rail provides a uniform API for different types of objects</p>
    <p>Rail takes care of dependency tracking and checkpointing</p>
    <p>RailObject</p>
    <p>+ getValue() // accessor + add(,) // mutators +</p>
    <p>- rollback(ts) - equiv(ts) -</p>
    <p>code</p>
    <p>argument</p>
    <p>view</p>
    <p>login</p>
    <p>database</p>
    <p>context</p>
    <p>inputs global states</p>
  </div>
  <div class="page">
    <p>Tracking data items in output</p>
  </div>
  <div class="page">
    <p>Tracking data items in output  Rail maintains a view object for every session&quot;</p>
    <p>tracks all data items sent to the client</p>
  </div>
  <div class="page">
    <p>Tracking data items in output  Rail maintains a view object for every session&quot;</p>
    <p>tracks all data items sent to the client</p>
    <p>To do output book-keeping, one adds objects to the view</p>
    <p>e.g., view.add(db/users/admin, {name, email});</p>
    <p>change the template rendering system</p>
  </div>
  <div class="page">
    <p>Tracking data items in output  Rail maintains a view object for every session&quot;</p>
    <p>tracks all data items sent to the client</p>
    <p>To do output book-keeping, one adds objects to the view</p>
    <p>e.g., view.add(db/users/admin, {name, email});</p>
    <p>change the template rendering system</p>
    <p>During replay, Rail reruns actions and re-compute the view objects for every session</p>
    <p>if old_view  new_view    Breach!</p>
  </div>
  <div class="page">
    <p>Replay with non-deterministic inputs</p>
    <p>Goal: minimize state divergence</p>
  </div>
  <div class="page">
    <p>Replay with non-deterministic inputs</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; ! for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Replay with non-deterministic inputs</p>
    <p>How to handle randomness during replay?</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; ! for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
    <p>App.method(populate_admins, function () { - var admins = [Alice, Mallory, Bob]; + var admins = [Alice, Bob]; for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Replay with non-deterministic inputs</p>
    <p>How to handle randomness during replay?</p>
    <p>Strawman 1: return a new random number</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; ! for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
    <p>App.method(populate_admins, function () { - var admins = [Alice, Mallory, Bob]; + var admins = [Alice, Bob]; for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Replay with non-deterministic inputs</p>
    <p>How to handle randomness during replay?</p>
    <p>Strawman 1: return a new random number</p>
    <p>Strawman 2: log and return random numbers in order</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; ! for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
    <p>App.method(populate_admins, function () { - var admins = [Alice, Mallory, Bob]; + var admins = [Alice, Bob]; for (var i = 0; i &lt; admins.length; ++i) { var pwd = Math.random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Stabilize non-deterministic inputs with context identifiers</p>
    <p>To avoid false report, Rail must reconcile state divergence of two executions w.r.t. non-deterministic inputs</p>
  </div>
  <div class="page">
    <p>Stabilize non-deterministic inputs with context identifiers</p>
    <p>To avoid false report, Rail must reconcile state divergence of two executions w.r.t. non-deterministic inputs</p>
    <p>Solution: use input context object to access nondeterministic input</p>
  </div>
  <div class="page">
    <p>Stabilize non-deterministic inputs with context identifiers</p>
    <p>To avoid false report, Rail must reconcile state divergence of two executions w.r.t. non-deterministic inputs</p>
    <p>Solution: use input context object to access nondeterministic input</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; for (var i = 0; i &lt; admins.length; ++i) { - var pwd = Math.random(); + var pwd = Rail.inputContext( + populate, admins[i]).random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Stabilize non-deterministic inputs with context identifiers</p>
    <p>To avoid false report, Rail must reconcile state divergence of two executions w.r.t. non-deterministic inputs</p>
    <p>Solution: use input context object to access nondeterministic input</p>
    <p>developer supplies a stable context ID</p>
    <p>during replay: same context ID  return same value</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; for (var i = 0; i &lt; admins.length; ++i) { - var pwd = Math.random(); + var pwd = Rail.inputContext( + populate, admins[i]).random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Stabilize non-deterministic inputs with context identifiers</p>
    <p>To avoid false report, Rail must reconcile state divergence of two executions w.r.t. non-deterministic inputs</p>
    <p>Solution: use input context object to access nondeterministic input</p>
    <p>developer supplies a stable context ID</p>
    <p>during replay: same context ID  return same value</p>
    <p>App.method(populate_admins, function () { var admins = [Alice, Mallory, Bob]; for (var i = 0; i &lt; admins.length; ++i) { - var pwd = Math.random(); + var pwd = Rail.inputContext( + populate, admins[i]).random(); Users.insert({name: admins[i], passwd: pwd}); } });</p>
  </div>
  <div class="page">
    <p>Other issues</p>
    <p>How to port other web frameworks to support Rail?</p>
    <p>e.g., Django, Ruby, etc.</p>
    <p>How to choose context identifiers?</p>
    <p>What if developers misuse Rail API?</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Benchmarks</p>
    <p>Application</p>
    <p>Submit</p>
    <p>EndoApp</p>
    <p>Telescope</p>
    <p>Description</p>
    <p>homework grading</p>
    <p>medical survey</p>
    <p>social news (open source)</p>
  </div>
  <div class="page">
    <p>Benchmarks</p>
    <p>Application</p>
    <p>Submit</p>
    <p>EndoApp</p>
    <p>Telescope</p>
    <p>Description</p>
    <p>homework grading</p>
    <p>medical survey</p>
    <p>social news (open source)</p>
    <p>Attack workload</p>
    <p>ACL error: administrator erroneously granting staff privilege to a student</p>
    <p>Stolen password: attacker creating a malicious root account using a surgeons weak password</p>
    <p>Code bugs: permission checks based on client-supplied user ID  a real bug in commit history</p>
  </div>
  <div class="page">
    <p>Porting applications to Rail is easy</p>
    <p>Most of the changes are related to non-deterministic inputs</p>
    <p>LOC in JavaScript (only server-side code is changed)</p>
    <p>Application Changed Server Client</p>
    <p>Submit 24 769 891</p>
    <p>EndoApp 2 599 900</p>
    <p>Telescope 20 1,169 1,781</p>
  </div>
  <div class="page">
    <p>Porting applications to Rail is easy</p>
    <p>Most of the changes are related to non-deterministic inputs</p>
    <p>Framework wrappers (422 lines in Meteor) offload most burdens from the application developer</p>
    <p>LOC in JavaScript (only server-side code is changed)</p>
    <p>Application Changed Server Client</p>
    <p>Submit 24 769 891</p>
    <p>EndoApp 2 599 900</p>
    <p>Telescope 20 1,169 1,781</p>
  </div>
  <div class="page">
    <p>Rail is more precise than access log based approaches # of data items (run with benign workloads in the background)</p>
    <p>Workload Accessed Reported Missed False</p>
    <p>ACL error&quot; (Submit) 1,121 193 0 0</p>
    <p>Stolen password (EndoApp) 3,521 197 0 1</p>
    <p>Code bugs&quot; (Telescope) 23 10 0 0</p>
  </div>
  <div class="page">
    <p>Rail is more precise than access log based approaches # of data items (run with benign workloads in the background)</p>
    <p>Workload Accessed Reported Missed False</p>
    <p>ACL error&quot; (Submit) 1,121 193 0 0</p>
    <p>Stolen password (EndoApp) 3,521 197 0 1</p>
    <p>Code bugs&quot; (Telescope) 23 10 0 0</p>
    <p>The malicious account created by the attacker (not a breach, but related to the attack)</p>
  </div>
  <div class="page">
    <p>Rail replays only relevant requests</p>
    <p>ACL error (Submit)</p>
    <p>Stolen password (EndoApp)</p>
    <p>Code bugs (Telescope)</p>
    <p>Replayed request (%) 0% 25% 50% 75% 100%</p>
    <p>Replayed Total</p>
  </div>
  <div class="page">
    <p>Rail replays only relevant requests</p>
    <p>ACL error (Submit)</p>
    <p>Stolen password (EndoApp)</p>
    <p>Code bugs (Telescope)</p>
    <p>Replayed request (%) 0% 25% 50% 75% 100%</p>
    <p>Replayed Total</p>
    <p>Rail replays only a small fraction of original requests that are related to the attack</p>
  </div>
  <div class="page">
    <p>Rail replays only relevant requests</p>
    <p>ACL error (Submit)</p>
    <p>Stolen password (EndoApp)</p>
    <p>Code bugs (Telescope)</p>
    <p>Replayed request (%) 0% 25% 50% 75% 100%</p>
    <p>Replayed Total</p>
    <p>Rail replays only a small fraction of original requests that are related to the attack</p>
    <p>Changed code is on the critical path of all login requests</p>
  </div>
  <div class="page">
    <p>Rail replays only relevant requests</p>
    <p>ACL error (Submit)</p>
    <p>Stolen password (EndoApp)</p>
    <p>Code bugs (Telescope)</p>
    <p>Replayed request (%) 0% 25% 50% 75% 100%</p>
    <p>Replayed Total</p>
    <p>Time (seconds) 0 200 400 600 800</p>
    <p>Replay Recording</p>
    <p>Rail replays only a small fraction of original requests that are related to the attack</p>
    <p>Replay time is proportional to the number of replayed requests</p>
  </div>
  <div class="page">
    <p>Rails recording overhead is moderate</p>
    <p>Performance&quot;</p>
    <p>5% for an underloaded server (&lt; 90% CPU utilization)</p>
    <p>22% for an overloaded server</p>
    <p>Throughput Overhead for Submit</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq /s</p>
    <p>ec )</p>
    <p>Number of clients</p>
    <p>Rail Stock</p>
  </div>
  <div class="page">
    <p>Rails recording overhead is moderate</p>
    <p>Performance&quot;</p>
    <p>5% for an underloaded server (&lt; 90% CPU utilization)</p>
    <p>22% for an overloaded server</p>
    <p>Storage&quot;</p>
    <p>~ 0.5KB / request</p>
    <p>or 500GB / year for a full-loaded server</p>
    <p>Throughput Overhead for Submit</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq /s</p>
    <p>ec )</p>
    <p>Number of clients</p>
    <p>Rail Stock</p>
  </div>
  <div class="page">
    <p>Related Work  Record and replay</p>
    <p>Recovery: Retro [OSDI 10]; Warp [SOSP 11]</p>
    <p>Auditing: Rad [APSys 11]; Poirot [OSDI 12]</p>
    <p>Detecting data breaches</p>
    <p>Access log: Keypad [EuroSys 11]; Pasture [OSDI 12]</p>
    <p>Information flow: TightLip [NSDI 07]; TaintDroid [OSDI 10]</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Rail can precisely identify breached data items after a disclosure in web applications</p>
    <p>Provides developers with APIs that help to identify data items, track dependencies, and match up states</p>
    <p>Requires few changes to applications</p>
    <p>Precise, efficient, and practical</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
