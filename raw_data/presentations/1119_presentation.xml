<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CNTR Lightweight OS Containers</p>
    <p>Jrg Thalheim, Pramod Bhatotia Baris KasikciPedro Fonseca</p>
    <p>USENIX ATC 2018</p>
  </div>
  <div class="page">
    <p>Container-based virtualization</p>
    <p>Lightweight isolation</p>
    <p>Namespaces</p>
    <p>Process-level virtualization</p>
    <p>Cgroups</p>
    <p>Extensively used in production</p>
  </div>
  <div class="page">
    <p>Why lightweight containers are important?</p>
    <p>Fast deployment</p>
    <p>Low resource usage</p>
    <p>Low build times</p>
  </div>
  <div class="page">
    <p>Containers are NOT lightweight anymore!</p>
    <p>Only 33% data was accessed by the applications!</p>
    <p>Lower is</p>
    <p>better</p>
    <p>Limitations: Inefficient development and deployment of containers 4</p>
    <p>Case study: Top 50 Docker Hub container images</p>
  </div>
  <div class="page">
    <p>Why containers are becoming heavyweight?</p>
    <p>Build description: e.g. Dockerfile</p>
    <p>Application (MySQL)</p>
    <p>Additional tools (Coreutils, ...)</p>
    <p>Container images are large due to additional tools!</p>
    <p>Host</p>
    <p>Container</p>
    <p>Container image</p>
  </div>
  <div class="page">
    <p>Additional tools</p>
    <p>Why are they important?  Debugging, inspection, monitoring, management, etc.</p>
    <p>Additional tools are NOT used in the common use case</p>
    <p>What are these additional tools?  Debuggers, editors, coreutils, shell, etc.</p>
  </div>
  <div class="page">
    <p>Cntr: Split container images</p>
    <p>Slim image Fat image</p>
    <p>Slim container Runs the application</p>
    <p>Fat container Serves tools to the user</p>
    <p>Original image</p>
    <p>CNTR Provides access</p>
    <p>Common use case Deployed on demand</p>
  </div>
  <div class="page">
    <p>Design</p>
  </div>
  <div class="page">
    <p>Design goals</p>
    <p>Generality  Support a wide range of workflows (debugging, inspection, etc.)</p>
    <p>Efficiency  No performance overhead on the application</p>
    <p>Transparency  No modifications to the OS, container engine, and application</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Nested namespace</p>
    <p>App (MySQL)</p>
    <p>CntrFS server</p>
    <p>Slim container Fat container User</p>
    <p>Access tools via FUSE</p>
    <p>Access the application</p>
    <p>Tools (Gdb, coreutils...)</p>
    <p>Access tools</p>
  </div>
  <div class="page">
    <p>Nested namespace</p>
    <p>Implemented on top of existing OS features  Namespaces  FUSE</p>
    <p>/</p>
    <p>var usr</p>
    <p>lib</p>
    <p>cntrusr</p>
    <p>bin</p>
    <p>mysql</p>
    <p>bin</p>
    <p>gdb</p>
    <p>Slim image</p>
    <p>Fat image</p>
    <p>Nested namespace filesystem view</p>
  </div>
  <div class="page">
    <p>Fat container</p>
    <p>Nested namespace</p>
    <p>POSIX filesystem</p>
    <p>API</p>
    <p>System call Kernel space</p>
    <p>Process</p>
    <p>User space</p>
    <p>CntrFS</p>
    <p>CntrFS server</p>
    <p>Request</p>
    <p>VFS FUSE</p>
    <p>Process and CntrFS server can run in different namespaces (container) 12</p>
  </div>
  <div class="page">
    <p>Easy to use</p>
    <p>Implementation  Lightweight deployment</p>
    <p>Single 1.2 MB static binary</p>
    <p>root@fat-container $ cntr attach slim-container root@slim-container $</p>
    <p>Supports all popular containers  Docker, LXC, LXD, Systemd-nspawn, rkt, etc.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation  Questions:</p>
    <p>Experimental testbed:  M4.xlarge VM on EC2  100 GB device of type GP2 (SSD-backed network storage)  Base filesystem: Ext4</p>
  </div>
  <div class="page">
    <p>Unsupported tests are minor Linux-specific implementation details  3 of 4 unsupported tests also dont work on overlayfs (default on Docker)</p>
    <p>#1: Completeness</p>
    <p>Benchmark: Xfstests regression test suite</p>
    <p>Cntr can already be used in production</p>
    <p>Tests Supported tests</p>
  </div>
  <div class="page">
    <p>#2 (a): Overheads for the slim container</p>
    <p>of accessing the slim container</p>
  </div>
  <div class="page">
    <p>#2 (b): Overheads for the fat container</p>
    <p>Cntr incurs reasonable overhead for management tasks</p>
    <p>Lower is</p>
    <p>better</p>
    <p>Phoronix test suite</p>
  </div>
  <div class="page">
    <p>#3: Effectiveness</p>
    <p>Average reduction is 66% of the container size</p>
    <p>Containers with static Go binaries</p>
    <p>Majority of containers contains unnecessary data</p>
    <p>Top 50 containers on Docker Hub</p>
  </div>
  <div class="page">
    <p>Demo!</p>
  </div>
  <div class="page">
    <p>Demo setup</p>
    <p>Host: NixOS</p>
    <p>Slim container: Busybox</p>
    <p>Access Via CNTR</p>
    <p>$ sudo docker run --name mycontainer busybox$ sudo cntr attach mycontainer</p>
  </div>
  <div class="page">
    <p>Summary  Containers are NOT lightweight in practice</p>
    <p>Limitation: Inefficient development and deployment of containers</p>
    <p>CNTR: Lightweight OS Containers  Splits the container image into fat and slim parts  Leverages FUSE to expose additional tools in a nested namespace</p>
    <p>Generic + Transparent + Efficient</p>
    <p>Try it out! https://github.com/Mic92/cntr</p>
  </div>
</Presentation>
