<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security Ben Stock, Martin Johns, Marius Steffens, and Michael Backes USENIX Security 2017</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Motivation...</p>
    <p>Web's client side becomes more powerful every day  grew from static HTML rendering to fully-fledged applications  many &quot;enabling&quot; APIs such as postMessages</p>
    <p>Development also carries security issues  specific to the Web, e.g., XSS  general issues: e.g., trusting data from untrusted sources</p>
    <p>Web grew without a security blueprint into the &quot;Tangled Web&quot;</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>... and Research Questions</p>
    <p>Goal: evaluate how web and security evolved</p>
    <p>What were most prevalent technologies over time?</p>
    <p>Which security issues surfaced over time?</p>
    <p>What measures were introduced to countermand these issues? How were they adopted?</p>
    <p>What are the implications of the past for the future of Web security?</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>How to go back in time?</p>
    <p>Client-side code stored in The Internet Archive  Stores client-side code of crawled sites since 1996  Archives HTTP Headers (prefixed with X-Archive-Orig-)</p>
    <p>Analyze most important sites of the time  500 most frequented domains for each year</p>
    <p>Internet Jones and the Raiders of the Lost Trackers (Lerner et al., USENIX 2016)  blocked access to resources outside +/- three months from original timestamp</p>
    <p>Main page + first level of same-domain links  659,710 unique URLs, 1,376,429 frames, 5,440,958 scripts, 21,169,634 HTTP headers</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself 5</p>
    <p>Evolution of ClientSide Technology</p>
    <p>Discovered Security Issues</p>
    <p>Indicators of Security Awareness/Measures</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Java</p>
    <p>Silverlight</p>
    <p>Technologies used by the top 500 sites</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>JavaScript complexity on the rise</p>
    <p>Average cyclomatic complexity per external script</p>
    <p>Average statements per external script</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Multiple parties contribute JavaScript code</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself 9</p>
    <p>Evolution of ClientSide Technology</p>
    <p>Discovered Security Issues</p>
    <p>Indicators of Security Awareness/Measures</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Client-Side Cross-Site Scripting still going strong</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>postMessages allow origin and destination verification  Protects integrity and confidentiality</p>
    <p>Insecure postMessage handling</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Known vulnerable jQuery versions</p>
    <p>$ params interpreted as HTML</p>
    <p>CVE-2011-4969</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Flash Cross-Domain Policies</p>
    <p>* wildcard and session</p>
    <p>login state</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself 14</p>
    <p>Evolution of ClientSide Technology</p>
    <p>Discovered Security Issues</p>
    <p>Indicators of Security Awareness/Measures</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>HTTP only cookies</p>
    <p>Introduced in 2001 for IE  meant as XSS mitigation  cookies not accessible from JavaScript</p>
    <p>First used in 2006, steady increase since 2009  almost 50% adoption in 2016  lower bound as crawler does not log in</p>
    <p>X-Frame-Options</p>
    <p>HSTS</p>
    <p>CSP</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Clickjacking Protection through X-Frame-Options</p>
    <p>Introduced in 2009 for IE/Firefox  ability to disallow (third-party) framing</p>
    <p>First used in 2010, steady increase since then  over 50% adoption by now</p>
    <p>Deprecated by CSP since 2015  still slight increase in 2016</p>
    <p>X-Frame-Options</p>
    <p>HSTS</p>
    <p>CSP</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>HTTP Strict Transport Security</p>
    <p>Introduced in 2010 for Chrome/Firefox  auto-upgrades HTTP to HTTPS</p>
    <p>First used in 2012, steady increase  almost 30% adoption in 2016</p>
    <p>X-Frame-Options</p>
    <p>HSTS</p>
    <p>CSP</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Content Security Policy</p>
    <p>Introduced in 2010 for Firefox  explicit whitelisting of resources, e.g.,</p>
    <p>scripts, images, ..</p>
    <p>First used in 2013, very slow increase  less than 10% after three years</p>
    <p>X-Frame-Options</p>
    <p>HSTS</p>
    <p>CSP</p>
  </div>
  <div class="page">
    <p>Insights of our Analysis</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Client-Side Technology</p>
    <p>Webs complexity is still on the rise  steady increase in code size and cyclomatic complexity</p>
    <p>Increased involvement of third-parties  12 distinct origins in 2016  including several vulnerable versions of libraries</p>
    <p>Towards a multi-origin Web  e.g., increase in postMessages for cross-domain communication  applications no longer bound to a single origin</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Client-Side Security</p>
    <p>Client-Side XSS remains constant issue  up to 15% vulnerable in 2009, still around 8% in 2016</p>
    <p>Utility trumps Security  Even safe defaults are circumvented, e.g, crossdomain.xml</p>
    <p>Complexity of Deploying Security Measures  Easy to deploy measures are rolled out rapidly, e.g., X-Frame-Options  In contrast, CSP is very slow to market</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Confirming Intuitions</p>
    <p>Applications become more and more complex</p>
    <p>Simple security mechanisms are quickly adopted</p>
    <p>More involved mechanisms (e.g., CSP) lack behind in adoption</p>
    <p>Administrators aware of general security concepts have less vulnerabilities.</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Correlating Client-Side XSS and Awareness Indicators</p>
    <p>HTTPonly Cookies  Fraction of sites with HTTPonly and XSS</p>
    <p>higher than no measure and XSS</p>
    <p>X-Frame-Options (2010) &amp; HSTS (2013)  Early adopters rarely have an XSS, fraction</p>
    <p>increases, almost at baseline in 2016</p>
    <p>CSP  CSP sites dont even have any Client-Side</p>
    <p>Cross-Site Scripting  Might be early adopter phenomenon</p>
    <p>HTTP-only Cookies</p>
    <p>Content Sniffing</p>
    <p>X-Frame-Options</p>
    <p>HSTS</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Threats to Validity</p>
    <p>Limited view into applications (missing login)  not all cookies stored  protected resources might have other headers (e.g., X-Frame-Options)</p>
    <p>Blocked &quot;Bubble escapes&quot;  blocked access to newer resources  JavaScript was collected dynamically</p>
    <p>However, historical results align with previous papers  cross-domain policies, JS inclusions, Client-Side XSS, outdated libraries</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Lessons learnt from our 20-year study</p>
    <p>Ease of Use for Security Measures  simple security measures are quickly adopted</p>
    <p>Make Security Mandatory  e.g., postMessage origin must be accessed before data can be accessed  soft integration of stricter policies: warn first, block later</p>
    <p>Improve tools for and awareness of developers  tools help to rewrite secure code  updatability on libraries</p>
    <p>function loadAdvertisementInsecure() { document.write(&quot;&lt;script src='http://ad.com/?referrer=&quot; + location.href + &quot;'&gt;&lt;/script&gt;&quot;); }</p>
    <p>function loadAdvertisementSecure() { var script = document.createElement(&quot;script&quot;); script.src = 'http://ad.com/?referrer=' + location.href; document.body.appendChild(script); }</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Conclusion</p>
    <p>We studied evolution of the Client side over 20 years  technologies used  discovered vulnerabilities  deployed mitigation techniques</p>
    <p>Several intuitions could be confirmed  However, HTTPonly cookie sites more likely to have an XSS</p>
    <p>Client-Side Web Security remains hard problem  Protection barely keeps up with increased attack surface/flaws  Lessons learnt from the last 20 years should be incorporated</p>
    <p>in upcoming APIs/technologies</p>
  </div>
  <div class="page">
    <p>Ben Stock - USENIX 2017 - How the Web Tangled Itself</p>
    <p>Conclusion</p>
    <p>We studied evolution of the Client side over 20 years  technologies used  discovered vulnerabilities  deployed mitigation techniques</p>
    <p>Several intuitions could be confirmed  However, HTTPonly cookie sites more likely to have an XSS</p>
    <p>Client-Side Web Security remains hard problem  Protection barely keeps up with increased attack surface/flaws  Lessons learnt from the last 20 years should be incorporated</p>
    <p>in upcoming APIs/technologies</p>
    <p>Thanks! Questions?</p>
  </div>
</Presentation>
