<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Beauty and the Beast Vulnerabilities in Red Hats Packages</p>
    <p>Stephan Neuhaus &lt;Stephan.Neuhaus@disi.unitn.it&gt; Thomas Zimmermann &lt;tzimmer@microsoft.com&gt;</p>
  </div>
  <div class="page">
    <p>Vulnerabilities are important because fixing them costs a lot of money (2005 FBI study: 67 Bn $). There are 3241 packages (or were, by August 2008) offered by Red Hat. (There are certainly more being offered for Red Hat!)</p>
  </div>
  <div class="page">
    <p>Vulnerabilities are important because fixing them costs a lot of money (2005 FBI study: 67 Bn $). There are 3241 packages (or were, by August 2008) offered by Red Hat. (There are certainly more being offered for Red Hat!)</p>
  </div>
  <div class="page">
    <p>Vulnerabilities are important because fixing them costs a lot of money (2005 FBI study: 67 Bn $). There are 3241 packages (or were, by August 2008) offered by Red Hat. (There are certainly more being offered for Red Hat!)</p>
  </div>
  <div class="page">
    <p>Explain colours: white = no vulnerabilities, blue -&gt; red: progressively more</p>
  </div>
  <div class="page">
    <p>Explain colours: white = no vulnerabilities, blue -&gt; red: progressively more</p>
  </div>
  <div class="page">
    <p>Explain colours: white = no vulnerabilities, blue -&gt; red: progressively more</p>
  </div>
  <div class="page">
    <p>Explain colours: white = no vulnerabilities, blue -&gt; red: progressively more</p>
  </div>
  <div class="page">
    <p>Explain colours: white = no vulnerabilities, blue -&gt; red: progressively more</p>
  </div>
  <div class="page">
    <p>Explain colours: white = no vulnerabilities, blue -&gt; red: progressively more</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Distribution of RHSAs</p>
    <p>Number of RHSAs</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>P a c k a g e s</p>
    <p>kernel, kernel-doc</p>
    <p>php-related</p>
    <p>top not shown 2/3 of packages</p>
    <p>Note logarithmic y-axis. 3241 packages in total, about 2/3 with no known vulnerabilities.</p>
  </div>
  <div class="page">
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Can we predict whether a package contains unknown vulnerabilities?</p>
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Can we predict whether a package contains unknown vulnerabilities?</p>
    <p>Dependencies</p>
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Can we predict whether a package contains unknown vulnerabilities?</p>
    <p>Dependencies</p>
    <p>Beauties and Beasts</p>
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Can we predict whether a package contains unknown vulnerabilities?</p>
    <p>Dependencies</p>
    <p>Machine Learning</p>
    <p>Beauties and Beasts</p>
    <p>Properties of packages, not properties of the software in the package</p>
  </div>
  <div class="page">
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>amanda-server</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>amanda-server</p>
    <p>glibc</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>amanda-server</p>
    <p>readline</p>
    <p>amanda glibc xinetd</p>
    <p>gnuplot</p>
    <p>grep</p>
    <p>libtermcapcoreutils</p>
    <p>perl</p>
    <p>Dependencies</p>
  </div>
  <div class="page">
    <p>Dependencies and Vulnerabilities</p>
    <p>Dependency A  B exists because A wants to use the services offered by B</p>
    <p>Vulnerability exists in A if  A is in an insecure domain (domains are</p>
    <p>characterised by dependencies)</p>
    <p>B is insecure and fix in B spills over to A; or  B is difficult to use securely</p>
    <p>Packages in same domain will tend to have same dependencies. Domain examples are: compilers, games, office applications,</p>
  </div>
  <div class="page">
    <p>Red Hat Dependencies</p>
  </div>
  <div class="page">
    <p>Distribution of Package Dependencies</p>
    <p>Number of Packages</p>
    <p>N um</p>
    <p>be r o</p>
    <p>f D ep</p>
    <p>en de</p>
    <p>nc ie</p>
    <p>s</p>
    <p>kdebase</p>
    <p>development packages containing headers</p>
    <p>Distribution is apparently logarithmic with a long tail. This is not transitive closure. kdebase has 14 RHSAs (but 96 dependencies), kernel has 129 (but 0 dependencies), so number of dependencies is not a good predictor of number of RHSAs</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Can we predict whether a package contains unknown vulnerabilities?</p>
    <p>Dependencies</p>
    <p>Machine Learning</p>
    <p>Beauties and Beasts</p>
  </div>
  <div class="page">
    <p>Where does the addition of dependencies significantly increase/</p>
    <p>decrease the risk?</p>
  </div>
  <div class="page">
    <p>Where does the addition of dependencies significantly increase/</p>
    <p>decrease the risk?</p>
  </div>
  <div class="page">
    <p>Where does the addition of dependencies significantly increase/</p>
    <p>decrease the risk?</p>
  </div>
  <div class="page">
    <p>Where does the addition of dependencies significantly increase/</p>
    <p>decrease the risk?</p>
  </div>
  <div class="page">
    <p>Step 1: Data Structure</p>
    <p>Start with no knowledge about dependencies (top node contains all packages). Add knowledge of glibc (node contains all packages depending on glibc), then qt (node contains all packages depending on qt and glibc), then xorg-x11-libs (node contains all packages depending on xorg-x11-libs and qt and glibc). Since we know the packages contained in each node, we can compute the probability of a package in this node being vulnerable.</p>
  </div>
  <div class="page">
    <p>Step 1: Data Structure</p>
    <p>Start with no knowledge about dependencies (top node contains all packages). Add knowledge of glibc (node contains all packages depending on glibc), then qt (node contains all packages depending on qt and glibc), then xorg-x11-libs (node contains all packages depending on xorg-x11-libs and qt and glibc). Since we know the packages contained in each node, we can compute the probability of a package in this node being vulnerable.</p>
  </div>
  <div class="page">
    <p>Block 1: All packages depending on glibc</p>
    <p>glibc</p>
    <p>Step 1: Data Structure</p>
    <p>Start with no knowledge about dependencies (top node contains all packages). Add knowledge of glibc (node contains all packages depending on glibc), then qt (node contains all packages depending on qt and glibc), then xorg-x11-libs (node contains all packages depending on xorg-x11-libs and qt and glibc). Since we know the packages contained in each node, we can compute the probability of a package in this node being vulnerable.</p>
  </div>
  <div class="page">
    <p>Block 1: All packages depending on glibc</p>
    <p>kdelibs</p>
    <p>glibc</p>
    <p>Step 1: Data Structure</p>
    <p>Start with no knowledge about dependencies (top node contains all packages). Add knowledge of glibc (node contains all packages depending on glibc), then qt (node contains all packages depending on qt and glibc), then xorg-x11-libs (node contains all packages depending on xorg-x11-libs and qt and glibc). Since we know the packages contained in each node, we can compute the probability of a package in this node being vulnerable.</p>
  </div>
  <div class="page">
    <p>Block 1: All packages depending on glibc Block 2: All packages depending on glibc, qt Block 3: All packages depending on glibc, qt, xorg-x11-libs</p>
    <p>kdelibs</p>
    <p>qt</p>
    <p>xorg-x11-libs</p>
    <p>glibc</p>
    <p>Step 1: Data Structure</p>
    <p>Start with no knowledge about dependencies (top node contains all packages). Add knowledge of glibc (node contains all packages depending on glibc), then qt (node contains all packages depending on qt and glibc), then xorg-x11-libs (node contains all packages depending on xorg-x11-libs and qt and glibc). Since we know the packages contained in each node, we can compute the probability of a package in this node being vulnerable.</p>
  </div>
  <div class="page">
    <p>Block 1: All packages depending on glibc Block 2: All packages depending on glibc, qt Block 3: All packages depending on glibc, qt, xorg-x11-libs</p>
    <p>kdelibs</p>
    <p>qt</p>
    <p>xorg-x11-libs</p>
    <p>glibc</p>
    <p>Step 1: Data Structure</p>
    <p>Start with no knowledge about dependencies (top node contains all packages). Add knowledge of glibc (node contains all packages depending on glibc), then qt (node contains all packages depending on qt and glibc), then xorg-x11-libs (node contains all packages depending on xorg-x11-libs and qt and glibc). Since we know the packages contained in each node, we can compute the probability of a package in this node being vulnerable.</p>
  </div>
  <div class="page">
    <p>32.9% vulnerable</p>
    <p>(1065 out of 3241)</p>
    <p>glibc 33.5% vulnerable (692 out of 2066)</p>
    <p>kdelibs 85.6% vulnerable (143 out of 167)</p>
    <p>glibc, qt 77.4% vulnerable (120 out of 155)</p>
    <p>glibc, qt, xorg-x11-libs 79.4% vulnerable</p>
    <p>(27 out of 34)</p>
    <p>Step 2: Compute Risk Change</p>
    <p>Question: Is the rise of 43.9% when going from {glibc} to {glibc, qt} just some random fluctuation? We test this using statistical tests (Chi^2 or Fischer exact) and discard the random fluctuation hypothesis when the probability of such a increase happening by chance is 1% or less. So we expect that we wrongly attribute an increase to an actual effect 1% of the time.</p>
  </div>
  <div class="page">
    <p>32.9% vulnerable</p>
    <p>(1065 out of 3241)</p>
    <p>glibc 33.5% vulnerable (692 out of 2066)</p>
    <p>kdelibs 85.6% vulnerable (143 out of 167)</p>
    <p>glibc, qt 77.4% vulnerable (120 out of 155)</p>
    <p>glibc, qt, xorg-x11-libs 79.4% vulnerable</p>
    <p>(27 out of 34)</p>
    <p>Step 2: Compute Risk Change</p>
    <p>Question: Is the rise of 43.9% when going from {glibc} to {glibc, qt} just some random fluctuation? We test this using statistical tests (Chi^2 or Fischer exact) and discard the random fluctuation hypothesis when the probability of such a increase happening by chance is 1% or less. So we expect that we wrongly attribute an increase to an actual effect 1% of the time.</p>
  </div>
  <div class="page">
    <p>32.9% vulnerable</p>
    <p>(1065 out of 3241)</p>
    <p>glibc 33.5% vulnerable (692 out of 2066)</p>
    <p>kdelibs 85.6% vulnerable (143 out of 167)</p>
    <p>glibc, qt 77.4% vulnerable (120 out of 155)</p>
    <p>glibc, qt, xorg-x11-libs 79.4% vulnerable</p>
    <p>(27 out of 34)</p>
    <p>Risk change by adding qt only when already dependent on glibc! (glibc is the context)</p>
    <p>Step 2: Compute Risk Change</p>
    <p>Question: Is the rise of 43.9% when going from {glibc} to {glibc, qt} just some random fluctuation? We test this using statistical tests (Chi^2 or Fischer exact) and discard the random fluctuation hypothesis when the probability of such a increase happening by chance is 1% or less. So we expect that we wrongly attribute an increase to an actual effect 1% of the time.</p>
  </div>
  <div class="page">
    <p>Risk changes with significance p &lt; 0.01  No significant and more general context</p>
    <p>exists for this dependency</p>
    <p>Risk goes up: beast  Risk goes down: beauty</p>
    <p>Step 3: Include Only Significant Changes</p>
  </div>
  <div class="page">
    <p>Context Dependency Risk before Risk after Change</p>
    <p>openoffice.org-core 0.329 1.000 0.671</p>
    <p>kdelibs 0.329 0.856 0.527</p>
    <p>cups-libs 0.329 0.774 0.445</p>
    <p>libmng 0.329 0.769 0.440</p>
    <p>glibc qt 0.335 0.774 0.439</p>
    <p>glibc krb5-libs 0.335 0.769 0.434</p>
    <p>Selected Beasts The complete list can be found in the paper</p>
    <p>Explain packages, dont just list names</p>
  </div>
  <div class="page">
    <p>Context Dependency Risk before Risk after Change</p>
    <p>glibc xorg-x11-server-Xorg 0.335 0.015 -0.320 compat</p>
    <p>glibc, glibc, zlib</p>
    <p>audiofile 0.613 0.359 -0.254</p>
    <p>glibc, glibcdebug, zlib audiofile 0.590 0.351 -0.239</p>
    <p>gnome-keyring 0.329 0.101 -0.228</p>
    <p>glibc, zlib gnome-libs 0.456 0.281 -0.175</p>
    <p>python 0.329 0.132 -0.197</p>
    <p>Selected Beauties The complete list can be found in the paper</p>
    <p>Explain possible consequences: new applications: choose less risky dependencies</p>
  </div>
  <div class="page">
    <p>Are there properties that correlate with vulnerabilities?</p>
    <p>Are there properties that increase or decrease the risk?</p>
    <p>Can we predict whether a package contains unknown vulnerabilities?</p>
    <p>Dependencies</p>
    <p>Machine Learning</p>
    <p>Beauties and Beasts</p>
  </div>
  <div class="page">
    <p>Is it possible to predict</p>
    <p>from the dependencies which packages are vulnerable (classification)?</p>
    <p>which packages will have the most vulnerabilities (ranking)?</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>X Y</p>
    <p>D ep</p>
    <p>en de</p>
    <p>nc ie</p>
    <p>s</p>
    <p>V ul</p>
    <p>ne ra</p>
    <p>bi lit</p>
    <p>ie s</p>
    <p>Repeat 50x This self-testing is a standard evaluation technique for machine learning methods</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>X Y</p>
    <p>D ep</p>
    <p>en de</p>
    <p>nc ie</p>
    <p>s</p>
    <p>V ul</p>
    <p>ne ra</p>
    <p>bi lit</p>
    <p>ie s</p>
    <p>Repeat 50x This self-testing is a standard evaluation technique for machine learning methods</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>f</p>
    <p>X Y Train</p>
    <p>Model</p>
    <p>D ep</p>
    <p>en de</p>
    <p>nc ie</p>
    <p>s</p>
    <p>V ul</p>
    <p>ne ra</p>
    <p>bi lit</p>
    <p>ie s</p>
    <p>Repeat 50x This self-testing is a standard evaluation technique for machine learning methods</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>f</p>
    <p>X Y Train</p>
    <p>Test</p>
    <p>Y</p>
    <p>Model</p>
    <p>D ep</p>
    <p>en de</p>
    <p>nc ie</p>
    <p>s</p>
    <p>V ul</p>
    <p>ne ra</p>
    <p>bi lit</p>
    <p>ie s</p>
    <p>Repeat 50x This self-testing is a standard evaluation technique for machine learning methods</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>f</p>
    <p>X Y Train</p>
    <p>Test</p>
    <p>Y</p>
    <p>Model</p>
    <p>D ep</p>
    <p>en de</p>
    <p>nc ie</p>
    <p>s</p>
    <p>V ul</p>
    <p>ne ra</p>
    <p>bi lit</p>
    <p>ie s</p>
    <p>Repeat 50x This self-testing is a standard evaluation technique for machine learning methods</p>
  </div>
  <div class="page">
    <p>Indicators</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators C</p>
    <p>la ss</p>
    <p>ifi ca</p>
    <p>ti o n</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negativesC la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negativesC la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negativesC la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>R an</p>
    <p>ki ng</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negatives</p>
    <p>C la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>R an</p>
    <p>ki ng</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negatives</p>
    <p>C la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>R an</p>
    <p>ki ng</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negatives</p>
    <p>C la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>R an</p>
    <p>ki ng</p>
    <p>-1 0 1</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Indicators precision =</p>
    <p>true positives</p>
    <p>true positives + false positives</p>
    <p>recall = true positives</p>
    <p>true positives + false negatives</p>
    <p>C la</p>
    <p>ss ifi</p>
    <p>ca ti o n</p>
    <p>R an</p>
    <p>ki ng</p>
    <p>-1 0 1</p>
    <p>Dont mention -1. We want values near 1.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Decision Trees worse than SVMs</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Decision Trees worse than SVMs</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Decision Trees worse than SVMs</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Precision versus Recall</p>
    <p>Recall</p>
    <p>Pr ec</p>
    <p>is io</p>
    <p>n  SVM</p>
    <p>Decision Tree</p>
    <p>Predictions are correct 83% of the time</p>
    <p>Results of 50 random splits: train with 2/3 of the packages, predict with the rest, record precision and recall.</p>
  </div>
  <div class="page">
    <p>Cumulative Rank Correlation</p>
    <p>Rank Correlation Coefficient</p>
    <p>Fr ac</p>
    <p>tio n</p>
    <p>of S</p>
    <p>pl its</p>
    <p>Even though self-evaluation is a standard technique, what we realy want to know is if the method is able to predict the future... (next slide)</p>
  </div>
  <div class="page">
    <p>January 1, 2008 August 31, 2008</p>
    <p>predict evaluate</p>
    <p>Top 25 out of 2181 73 new vulnerable</p>
    <p>Package Name</p>
    <p>mod_php</p>
    <p>php-dbg</p>
    <p>php-dbg-server</p>
    <p>perl-DBD-Pg</p>
    <p>kudzu</p>
    <p>irda-utils</p>
    <p>hpoj</p>
    <p>libbdevid-python</p>
    <p>mrtg</p>
    <p>evolution28-evolution-data-server</p>
    <p>lilo</p>
    <p>ckermit</p>
    <p>dovecot</p>
    <p>kde2-compat</p>
    <p>gq</p>
    <p>vorbis-tools</p>
    <p>k3b</p>
    <p>taskjuggler</p>
    <p>ddd</p>
    <p>tora</p>
    <p>libpurple</p>
    <p>libwvstreams</p>
    <p>pidgin</p>
    <p>linuxwacom</p>
    <p>policycoreutils-newrole</p>
  </div>
  <div class="page">
    <p>January 1, 2008 August 31, 2008</p>
    <p>predict evaluate</p>
    <p>Top 25 out of 2181 73 new vulnerable</p>
    <p>Package Name</p>
    <p>mod_php</p>
    <p>php-dbg</p>
    <p>php-dbg-server</p>
    <p>perl-DBD-Pg</p>
    <p>kudzu</p>
    <p>irda-utils</p>
    <p>hpoj</p>
    <p>libbdevid-python</p>
    <p>mrtg</p>
    <p>evolution28-evolution-data-server</p>
    <p>lilo</p>
    <p>ckermit</p>
    <p>dovecot</p>
    <p>kde2-compat</p>
    <p>gq</p>
    <p>vorbis-tools</p>
    <p>k3b</p>
    <p>taskjuggler</p>
    <p>ddd</p>
    <p>tora</p>
    <p>libpurple</p>
    <p>libwvstreams</p>
    <p>pidgin</p>
    <p>linuxwacom</p>
    <p>policycoreutils-newrole</p>
  </div>
  <div class="page">
    <p>January 1, 2008 August 31, 2008</p>
    <p>predict evaluate</p>
    <p>Top 25 out of 2181 73 new vulnerable</p>
    <p>Patch published 2009-05-12</p>
    <p>Package Name</p>
    <p>mod_php</p>
    <p>php-dbg</p>
    <p>php-dbg-server</p>
    <p>perl-DBD-Pg</p>
    <p>kudzu</p>
    <p>irda-utils</p>
    <p>hpoj</p>
    <p>libbdevid-python</p>
    <p>mrtg</p>
    <p>evolution28-evolution-data-server</p>
    <p>lilo</p>
    <p>ckermit</p>
    <p>dovecot</p>
    <p>kde2-compat</p>
    <p>gq</p>
    <p>vorbis-tools</p>
    <p>k3b</p>
    <p>taskjuggler</p>
    <p>ddd</p>
    <p>tora</p>
    <p>libpurple</p>
    <p>libwvstreams</p>
    <p>pidgin</p>
    <p>linuxwacom</p>
    <p>policycoreutils-newrole</p>
  </div>
  <div class="page">
    <p>Consequences</p>
    <p>When building new applications, choose less risky dependencies</p>
    <p>use GNU-SASL instead of cyrus-sasl, Gnome instead of KDE</p>
    <p>When maintaining existing applications, prioritise resources</p>
    <p>look at krb5-libs, not at gkermit</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Vulnerabilities correlate with dependencies  Identification of risky dependencies  Prediction with high precision, recall, correlation</p>
    <p>http://research.microsoft.com/projects/esm/ http://www.artdecode.de/</p>
    <p>* Have we worked with Red Hat: yes, have received positive feedback * Usage Data: nonexistent * Explain Correlation: See previous slide: domains * This is not causation: true, but we have high predictive value, so who cares? * Base Set: future work</p>
  </div>
</Presentation>
