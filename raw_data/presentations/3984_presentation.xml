<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MODELING AND REASONING</p>
    <p>ABOUT DOM EVENTS</p>
    <p>Benjamin Lerner, Matthew Carroll, Dan Kimmel,</p>
    <p>Hannah Quay-de la Vallee, Shriram Krishnamurthi</p>
    <p>Brown University</p>
    <p>WebApps 2012</p>
  </div>
  <div class="page">
    <p>Those pesky ads</p>
    <p>Click here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
  </div>
  <div class="page">
    <p>Those pesky ads</p>
    <p>Click here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
  </div>
  <div class="page">
    <p>Those pesky ads</p>
    <p>Click here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
    <p>Click here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
  </div>
  <div class="page">
    <p>Whats really going on here?</p>
  </div>
  <div class="page">
    <p>Event dispatch, informally</p>
    <p>div #page</p>
    <p>div #conv</p>
    <p>div #msg1</p>
    <p>div #msg2</p>
    <p>div #reply function(evt) {}</p>
    <p>div #AD</p>
    <p>Click</p>
    <p>here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
    <p>H E L L O</p>
  </div>
  <div class="page">
    <p>Event dispatch, informally</p>
    <p>div #page</p>
    <p>div #conv</p>
    <p>div #msg1</p>
    <p>div #msg2</p>
    <p>div #reply</p>
    <p>Handle x, !</p>
    <p>keypresses</p>
    <p>div #AD</p>
    <p>Click</p>
    <p>here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Event dispatch, informally</p>
    <p>div #page</p>
    <p>div #conv</p>
    <p>div #msg1</p>
    <p>div #msg2</p>
    <p>div #reply</p>
    <p>Handle x, !</p>
    <p>keypresses</p>
    <p>div #AD Cancel all but</p>
    <p>x, !</p>
    <p>Click</p>
    <p>here</p>
    <p>and type</p>
    <p>expo!</p>
    <p>to win!!</p>
    <p>e x p o !</p>
  </div>
  <div class="page">
    <p>To understand the execution of any</p>
    <p>web page, we have to understand the</p>
    <p>model for event dispatch.</p>
  </div>
  <div class="page">
    <p>Event dispatch, informal summary</p>
    <p>div #page</p>
    <p>div #conv</p>
    <p>div #msg2</p>
    <p>div #msg1</p>
    <p>div #reply</p>
    <p>div #AD</p>
    <p>e x p o !</p>
    <p>function(evt) {}</p>
    <p>Events</p>
    <p>Dispatch path</p>
    <p>x</p>
    <p>Bubbling</p>
    <p>Event listener</p>
    <p>Cancel all but</p>
    <p>x, !</p>
    <p>Event</p>
    <p>cancelation</p>
    <p>Event target</p>
  </div>
  <div class="page">
    <p>Event dispatch  the subtleties</p>
    <p>Interactions between mutations and order of operations</p>
    <p>Multiple listeners per event per element</p>
    <p>Tree mutation</p>
    <p>Adding/removing listeners during dispatch</p>
    <p>Legacy handlers</p>
    <p>Default actions</p>
  </div>
  <div class="page">
    <p>Core dispatch algorithm</p>
    <p>Pre-dispatch</p>
    <p>Build dispatch path</p>
    <p>Dispatch-collect Start</p>
    <p>Dispatch-next</p>
    <p>Collect list</p>
    <p>of listeners Next node?</p>
    <p>JS</p>
    <p>Done</p>
    <p>Dispatch</p>
    <p>Run</p>
    <p>Dispatch-default</p>
    <p>Finish</p>
  </div>
  <div class="page">
    <p>Surely this is all specified?</p>
    <p>Yes, but</p>
    <p>Specification is 113 pages long</p>
    <p>(Mostly definitions of specific event types)</p>
    <p>Core dispatch algorithm is 16 pages,</p>
    <p>With side references to other specifications!</p>
    <p>Specification is not self-consistent</p>
  </div>
  <div class="page">
    <p>Example: addEventListener addEventListener</p>
    <p>Registers an event listener, depending on the useCapture parameter, on the capture phase of the DOM event flow or its target and bubbling phases.</p>
    <p>Parameters</p>
    <p>type : DOMString</p>
    <p>Specifies the Event.type associated with the event for which the user is registering.</p>
    <p>listener : EventListener</p>
    <p>The listener parameter must be an object that implements the EventListener interface or a function. If listener is a function then it must be used as the callback for the event; otherwise, if listener implements EventListener, then its handleEvent method must be used as the callback.</p>
    <p>useCapture : boolean</p>
    <p>If true, useCapture indicates that the user wishes to add the event listener for the capture and target phases only, i.e., this event listener will not be triggered during the bubbling phase. If false, the event listener must only be triggered during the target and bubbling phases.</p>
    <p>This parameter must be optional. If not provided, the EventTarget.addEventListener method must behave as if useCapture were specified to be false.</p>
  </div>
  <div class="page">
    <p>Modeling the event dispatch</p>
    <p>We built a model in Redex of the event dispatch algorithm</p>
    <p>1000 lines of commented code</p>
    <p>Analyzable</p>
    <p>Testable</p>
    <p>Executable</p>
    <p>Composable</p>
  </div>
  <div class="page">
    <p>Redex: what and why</p>
    <p>Redex is a framework designed for language engineers</p>
    <p>Makes it easy to:</p>
    <p>Specify operational semantics</p>
    <p>Simulate running of programs</p>
    <p>Examine syntax and state of programs as they run</p>
    <p>Particularly convenient when trying to match web specs:</p>
    <p>Mostly written in an idiomatic, step-by-step manner</p>
  </div>
  <div class="page">
    <p>addEventListener, revisited</p>
    <p>(define-metafunction DOM</p>
    <p>[(addListener LS string_type bool_useCapture loc_listener)</p>
    <p>(addListenerHelper</p>
    <p>(addListenerHelper</p>
    <p>LS string_type target bool_useCapture loc_listener)</p>
    <p>string_type</p>
    <p>,(if (term bool_useCapture) (term capture) (term bubble))</p>
    <p>bool_useCapture</p>
    <p>loc_listener))))])</p>
  </div>
  <div class="page">
    <p>Using the model: formal analysis</p>
    <p>Common knowledge about event dispatch:</p>
    <p>Modifying the tree shouldnt impact the current dispatch.</p>
    <p>Every node gets visited twice (capture and bubble) except the</p>
    <p>target.</p>
    <p>Event dispatch is deterministic.</p>
    <p>Event dispatch terminates.</p>
    <p>All of these are theorems that hold of our model</p>
    <p>Good for user understanding.</p>
    <p>Good for analyses that rely upon them.</p>
  </div>
  <div class="page">
    <p>Example: dispatch path is fixed</p>
    <p>Dispatch-collect Start</p>
    <p>Dispatch-next</p>
    <p>Collect list</p>
    <p>of handlers Next node?</p>
    <p>JS</p>
    <p>Done</p>
    <p>Dispatch</p>
    <p>Run</p>
    <p>Dispatch-default</p>
    <p>Finish</p>
    <p>Pre-dispatch</p>
    <p>Build dispatch path Only state to modify</p>
    <p>dispatch path  QED.</p>
  </div>
  <div class="page">
    <p>Thats nice, so? Model relevance</p>
    <p>What assurance do we have that the model reflects reality?</p>
    <p>Annotate the correspondence explicitly</p>
    <p>Spec text annotations model rules</p>
    <p>An informed reader could read both together and confirm</p>
    <p>they match.</p>
    <p>(Compare the spec for addEventListener with our model)</p>
  </div>
  <div class="page">
    <p>Using the model: automatic testing</p>
    <p>Can automatically construct test cases</p>
    <p>All small trees, random larger ones</p>
    <p>All pairs of 1-line listeners; random longer ones</p>
    <p>Export</p>
    <p>Compare</p>
    <p>Simulate Execute</p>
  </div>
  <div class="page">
    <p>Using the model: debug execution</p>
    <p>Two real-world Thunderbird extensions:</p>
    <p>Nostalgy</p>
  </div>
  <div class="page">
    <p>Using the model: debug execution</p>
    <p>Two real-world Thunderbird extensions:</p>
    <p>Thunderbird Conversations</p>
  </div>
  <div class="page">
    <p>Using the model: debug execution</p>
    <p>Nostalgy: hot-keys for saving messages</p>
    <p>Type S, then a folder name  save message to folder</p>
    <p>Conversations: Gmail-like quick-reply box</p>
    <p>What should happen when you quick-reply with a word</p>
    <p>containing s?</p>
    <p>More importantly, when the wrong thing happens, why?</p>
    <p>And how should we fix it?</p>
  </div>
  <div class="page">
    <p>Future Uses</p>
    <p>A full account of dynamic web behavior:</p>
    <p>Events (this work)</p>
    <p>JavaScript</p>
    <p>DOM</p>
    <p>Network</p>
    <p>Storage</p>
    <p>Testing and verification of larger web applications</p>
  </div>
  <div class="page">
    <p>Recap: Contributions</p>
    <p>A tractable, formal model of web event dispatch</p>
    <p>Analyzable</p>
    <p>Amenable to traditional PL techniques</p>
    <p>Testable</p>
    <p>Has found actual bugs in current browsers</p>
    <p>Executable</p>
    <p>Can help explain odd app behaviors or debug broken extensions</p>
    <p>Composable</p>
    <p>Can be combined with other models for increased precision</p>
  </div>
</Presentation>
