<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>USENIX ATC18</p>
    <p>Accelerating PageRank using Partition-Centric Processing</p>
    <p>Kartik Lakhotia, Rajgopal Kannan, Viktor Prasanna</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Partition-centric Processing Methodology</p>
    <p>Analytical Evaluation  Experimental Results</p>
    <p>Generalization  Conclusion</p>
  </div>
  <div class="page">
    <p>Graph Analytics</p>
    <p>Graphs  ubiquitously preferred data representation</p>
    <p>Era of Big Data, Era of large Graphs</p>
    <p>Billions of nodes and edges</p>
    <p>Need high performance processing</p>
    <p>Internet Road Network Social network</p>
  </div>
  <div class="page">
    <p>PageRank</p>
    <p>Fundamental Node Ranking algorithm</p>
    <p>Iteratively compute weighted sum of neighbors ,</p>
    <p>Important benchmark for the performance of</p>
    <p>Graph Analytics</p>
    <p>Sparse Matrix Vector multiplication</p>
    <p>core kernel of many scientific and engg. applications</p>
  </div>
  <div class="page">
    <p>Challenges: Pull Direction PageRank (PDPR)</p>
    <p>cache line utilization,  DRAM traffic</p>
    <p>sustained memory bandwidth</p>
    <p>Cache misses, CPU stalls</p>
    <p>Read    fine-grained random memory accesses</p>
  </div>
  <div class="page">
    <p>Challenges: Vertex-Centric GAS (BVGAS)</p>
    <p>State-of-the-art method1,2      , write  =   ,      ()</p>
    <p>(semi-sorted on )</p>
    <p>Read  and accumulate ,- into ,</p>
    <p>cache line utilization; prevent CPU stalls</p>
    <p>Drawbacks:</p>
    <p>Traverse entire graph twice</p>
    <p>inherently sub-optimal</p>
    <p>oblivious to vertex ordering induced locality</p>
    <p>coarse-grained random accesses  poor DRAM BW</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Novel Partition-centric Processing Methodology</p>
    <p>enables efficient Processor-DRAM communication</p>
    <p>Optimizations to address communication challenges</p>
    <p>Partition-centric update propagation   DRAM traffic</p>
    <p>Partition-Node Graph Data Layout  sequential DRAM accesses</p>
    <p>Branch avoidance mechanism  remove data-dependent branches</p>
    <p>Achieves</p>
    <p>upto .  GTEPS sustained throughput using 16 cores</p>
    <p>upto % of peak DRAM bandwidth</p>
    <p>Applicable to weighted graphs and generic SpMV computation</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Partition-centric Processing Methodology  Analytical Evaluation</p>
    <p>Experimental Results</p>
    <p>Generalization  Conclusion</p>
  </div>
  <div class="page">
    <p>Graph Partitioning</p>
    <p>disjoint  sets of vertices</p>
    <p>Partition-centric abstraction of   set of links between nodes and partitions</p>
    <p>unlocks comm. efficiency not achievable with VC/EC paradigms</p>
    <p>Index based partitioning</p>
    <p>simple, low pre-processing overhead</p>
  </div>
  <div class="page">
    <p>Partition-Centric Processing Methodology (PCPM)</p>
    <p>Partition-Centric Processing with GAS model</p>
    <p>messages to neighbouring partitions   incoming messages to compute new</p>
    <p>PageRank values</p>
    <p>Write messages in statically allocated disjoint memory spaces ()  no locks/atomics,  scalability</p>
    <p>.  written only in first iteration,  comm.</p>
    <p>Each thread processes 1 partition at a time  Vertex data</p>
    <p>low latency random access</p>
  </div>
  <div class="page">
    <p>Optimization 1: Partition-Centric Update Propagation</p>
    <p>update from a node to all neighbours in a partition  Natural outcome of PC abstraction</p>
    <p>Drastically reduce communication volume</p>
    <p>MSB of destination IDs for demarcation  read new update if MSB = 1</p>
    <p>Issues to address</p>
    <p>traverses  edges *(7,1), (7,2)+</p>
    <p>switch bins for each update insertion</p>
    <p>Data-dependent unpredictable branches due to</p>
    <p>MSB check</p>
  </div>
  <div class="page">
    <p>Optimization 2: Data Layout</p>
    <p>Bipartite Partition-Node Graph (PNG)  at most 1 edge between node and partition</p>
    <p>eliminate  edge traversal</p>
    <p>Group the edges by destination partition</p>
    <p>All updates to one bin at a time</p>
    <p>Random access to vertices</p>
    <p>Create PNG on a per-partition basis</p>
    <p>Vertices cached, DRAM accesses</p>
  </div>
  <div class="page">
    <p>Optimization 3: Branch Avoidance</p>
    <p>uses pointers to read bins</p>
    <p>_ for _</p>
    <p>_ for _</p>
    <p>When to increment pointers?</p>
    <p>_ every iteration</p>
    <p>_ if MSB = 1</p>
    <p>Directly add MSB to _</p>
    <p>no branch based cond. check on MSB</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Partition-centric Processing Methodology  Analytical Evaluation</p>
    <p>Experimental Results</p>
    <p>Generalization  Conclusion</p>
  </div>
  <div class="page">
    <p>Parameters</p>
    <p>Original Graph  ,    =</p>
    <p>=</p>
    <p>PNG Layout   , ,     edges between nodes and</p>
    <p>partitions</p>
    <p>=  = # partitions</p>
    <p>=</p>
    <p>1</p>
    <p>Software</p>
    <p>= sizeof (updates) = 4/8</p>
    <p>= sizeof (index) = 4</p>
    <p>Cache</p>
    <p>= PDPR cache miss ratio</p>
    <p>= sizeof (cache line) = 64</p>
    <p>*  and  are a function of graph locality. As locality increases,   and</p>
  </div>
  <div class="page">
    <p>DRAM Communication Model</p>
    <p>Method Communication Volume</p>
    <p>+</p>
    <p>2  +</p>
    <p>1 + 1</p>
    <p>+</p>
    <p>oblivious to locality  good if locality is low and  is high</p>
    <p>good if locality is low and  is high</p>
    <p>linear in 1</p>
    <p>good for high locality</p>
    <p>graphs as well</p>
  </div>
  <div class="page">
    <p>Random Access Model</p>
    <p>Method # Random DRAM accesses</p>
    <p>2</p>
    <p>&lt;</p>
    <p>*Assuming full cache line utilization for BVGAS</p>
    <p>Example   graph   = 33.5,  = 1.05,  = 512,  = 64    0.26    67</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Partition-centric Processing Methodology  Analytical Evaluation</p>
    <p>Experimental Results</p>
    <p>Generalization  Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Large real-life and synthetic graphs</p>
    <p>Intel Xeon E5-2650 v2 processor @ 2.3 GHz  Dual-socket  8 cores per socket</p>
    <p>32 KB L1 cache, 256 KB L2 cache</p>
    <p>DRAM  59.6 GB/s Read bandwidth, 32.9 GB/s Write bandwidth</p>
    <p>Datasest Description # Nodes (M) # Edges (M)</p>
    <p>gplus Google+ social network 28.9 463</p>
    <p>pld Pay-level-domain (web crawl) 42.9 623</p>
    <p>web Webbase-2001 (high locality) 118.1 992.8</p>
    <p>Kron Synthetic (high density) 33.5 1048</p>
    <p>twitter Follower network 61.6 1468.4</p>
    <p>sd1 Subdomain graph (web crawl) 95 1937.5</p>
  </div>
  <div class="page">
    <p>Comparison with Baselines: Execution Time</p>
    <p>Upto .   speedup over PDPR</p>
    <p>Upto .   speedup over BVGAS</p>
    <p>Average   speedup in the  phase</p>
    <p>Table: Execution Time of 1 PageRank Iteration</p>
    <p>Radically faster than BVGAS for high locality  graph</p>
  </div>
  <div class="page">
    <p>Comparison with Baselines: DRAM Performance</p>
    <p>Average .   reduction in comm. volume over BVGAS</p>
    <p>Average .   reduction in comm. volume over PDPR</p>
    <p>For 1, PCPM sustained BW  % of peak BW</p>
    <p>Average .   higher bandwidth than BVGAS</p>
  </div>
  <div class="page">
    <p>Comparison with Baselines: Effect of Locality</p>
    <p>graph with original node labeling</p>
    <p>graph with GOrder1 node labeling  Increased spatial locality among node neighbors</p>
    <p>Table: PDPR and PCPM benefit from optimized node labeling</p>
  </div>
  <div class="page">
    <p>PCPM: Effect of Optimizations</p>
    <p>Opt 1  Partition-centric Update Propagation</p>
    <p>Opt 2  PNG Data Layout</p>
    <p>Opt 3  Branch Avoidance in</p>
  </div>
  <div class="page">
    <p>PCPM: Effect of Partition Size</p>
    <p>partition size   ,  DRAM traffic</p>
    <p>partition size beyond cache capacity  cache misses, sudden  in DRAM traffic</p>
    <p>256  size  1  DRAM traffic , execution time   Vertex accesses served by slower L3 cache</p>
  </div>
  <div class="page">
    <p>Pre-processing Time</p>
    <p>Pre-processing  compute bin sizes, PNG construction</p>
    <p>Optimizations</p>
    <p>Pre-process all partitions in parallel</p>
    <p>Exploit overlap in bin size computation and PNG construction</p>
    <p>Result  very small overhead</p>
    <p>Easily amortized over few PageRank iterations</p>
    <p>Table: Pre-processing time of different methodologies</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Partition-centric Processing Methodology  Analytical Evaluation</p>
    <p>Experimental Results</p>
    <p>Generalization  Conclusion</p>
  </div>
  <div class="page">
    <p>Generalization</p>
    <p>PageRank is an example</p>
    <p>PCPM for processing weighted graphs  possible programming model for graph analytics</p>
    <p>Extendible to generic SpMV (non-square matrices) computation  partition rows and columns separately</p>
    <p>parallelize  over column partitions</p>
    <p>parallelize  over row partitions</p>
    <p>PR[6]</p>
    <p>PR[7]</p>
    <p>Bin 0</p>
    <p>Updates Dest. ID Edge Wt.</p>
    <p>w62</p>
    <p>w70</p>
    <p>w71</p>
    <p>w72</p>
  </div>
  <div class="page">
    <p>Generalization</p>
    <p>PCPM optimizations are generic software techniques</p>
    <p>not specific to the multicore platform used</p>
    <p>Can be ported to FPGAs and GPUs as well</p>
    <p>FPGAs  store vertex data in BRAM</p>
    <p>GPUs  store vertex data in shared memory</p>
    <p>user-controlled on-chip memories even more suitable</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Partition-centric Processing Methodology  Analytical Evaluation</p>
    <p>Experimental Results</p>
    <p>Generalization  Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Proposed novel Partition-centric method for PageRank</p>
    <p>Developed optimizations to</p>
    <p>Reduce volume of DRAM traffic</p>
    <p>Enhance sustained DRAM bandwidth</p>
    <p>Comparison with state-of-the-art on multicore</p>
    <p>Average .   increase in throughput</p>
    <p>Average .   reduction in DRAM communication</p>
    <p>Average .   higher sustained memory bandwidth</p>
    <p>Can be extended to</p>
    <p>Weighted graphs and generic SpMV</p>
    <p>Other platforms such as GPUs and FPGAs etc.</p>
  </div>
  <div class="page">
    <p>Comments &amp; Questions</p>
    <p>projectsharp.usc.edu</p>
    <p>https://github.com/kartiklakhotia/pcpm</p>
  </div>
</Presentation>
