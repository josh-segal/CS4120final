<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Cheap and Available State Machine Replication</p>
    <p>Rong Shi, Yang Wang The Ohio State University</p>
  </div>
  <div class="page">
    <p>Protect data from failures</p>
    <p>Data is important Durability: data is never lost Availability: data can be accessed at any time</p>
    <p>Failures Power loss, DRAM bit errors, disk corruption, software bugs,</p>
  </div>
  <div class="page">
    <p>Protect data from failures</p>
    <p>Data is important Durability: data is never lost Availability: data can be accessed at any time</p>
    <p>Failures Power loss, DRAM bit errors, disk corruption, software bugs,</p>
    <p>How to ensure data durability and availability despite failures?</p>
  </div>
  <div class="page">
    <p>Protect data from failures</p>
    <p>Data is important Durability: data is never lost Availability: data can be accessed at any time</p>
    <p>Failures Power loss, DRAM bit errors, disk corruption, software bugs,</p>
    <p>How to ensure data durability and availability despite failures?</p>
    <p>Replication</p>
  </div>
  <div class="page">
    <p>Basic idea of replication</p>
  </div>
  <div class="page">
    <p>Basic idea of replication</p>
  </div>
  <div class="page">
    <p>Basic idea of replication Redundancy =&gt; fault tolerance</p>
  </div>
  <div class="page">
    <p>Basic idea of replication Redundancy =&gt; fault tolerance</p>
    <p>Data replication =&gt; availability and durability</p>
  </div>
  <div class="page">
    <p>Primary-backup: f+1 replicas =&gt; f crash failures Data: GFS [Ghemawat SOSP03], HDFS [Shvachko MSST10],</p>
    <p>Paxos: 2f+1 replicas =&gt; f crash failures and timing errors (e.g. long message delay) Lock service: Boxwood [MacCormick OSDI04], Chubby [Burrows OSDI06],  Data: SMART [Lorch Eurosys06],  Metadata: MS Azure [Calder SOSP11],  Data + metadata: Megastore [Baker CIDR11], Spanner [Corbett OSDI12],</p>
    <p>BFT: 3f+1 replicas =&gt; f arbitrary failures Data + metadata: FARSITE [Adya OSDI02], UpRight [Clement SOSP09],</p>
    <p>Stronger replication requires more replicas</p>
  </div>
  <div class="page">
    <p>Stronger replication requires more replicas</p>
    <p>Are we willing to pay a higher cost for stronger guarantees?</p>
    <p>Stronger guarantees</p>
    <p>Lower replication cost</p>
  </div>
  <div class="page">
    <p>Existing work made other tradeoffs  On-demand instantiation for asynchronous replication protocols</p>
    <p>Cheap Paxos [Lamport DSN04], ZZ [Wood Eurosys11],</p>
    <p>Backup replica</p>
    <p>Client</p>
    <p>Active replica</p>
  </div>
  <div class="page">
    <p>Activate minimum subset of replicas</p>
    <p>Existing work made other tradeoffs  On-demand instantiation for asynchronous replication protocols</p>
    <p>Cheap Paxos [Lamport DSN04], ZZ [Wood Eurosys11],</p>
    <p>Backup replica</p>
    <p>Client</p>
    <p>Active replica</p>
  </div>
  <div class="page">
    <p>Activate minimum subset of replicas</p>
    <p>Existing work made other tradeoffs  On-demand instantiation for asynchronous replication protocols</p>
    <p>Cheap Paxos [Lamport DSN04], ZZ [Wood Eurosys11],</p>
    <p>Backup replica</p>
    <p>Client</p>
    <p>Active replica</p>
  </div>
  <div class="page">
    <p>Activate minimum subset of replicas</p>
    <p>Activate a backup replica</p>
    <p>Existing work made other tradeoffs  On-demand instantiation for asynchronous replication protocols</p>
    <p>Cheap Paxos [Lamport DSN04], ZZ [Wood Eurosys11],</p>
    <p>Backup replica</p>
    <p>Client</p>
    <p>Active replica</p>
  </div>
  <div class="page">
    <p>Activate minimum subset of replicas</p>
    <p>Activate a backup replica</p>
    <p>The system is unavailable when activating a backup replica (transfer data)</p>
    <p>Existing work made other tradeoffs  On-demand instantiation for asynchronous replication protocols</p>
    <p>Cheap Paxos [Lamport DSN04], ZZ [Wood Eurosys11],</p>
    <p>Backup replica</p>
    <p>Client</p>
    <p>Active replica</p>
  </div>
  <div class="page">
    <p>Activate minimum subset of replicas</p>
    <p>Activate a backup replica</p>
    <p>The system is unavailable when activating a backup replica (transfer data)</p>
    <p>Existing work made other tradeoffs  On-demand instantiation for asynchronous replication protocols</p>
    <p>Cheap Paxos [Lamport DSN04], ZZ [Wood Eurosys11],</p>
    <p>Backup replica</p>
    <p>Client</p>
    <p>Active replica</p>
  </div>
  <div class="page">
    <p>Separating agreement from execution ([Yin SOSP03]) Separating a replica into an agreement node and an execution node In BFT, # execution nodes can be smaller than # agreement nodes Not effective for applications that are heavy in agreement or using Paxos</p>
    <p>Existing work made other tradeoffs</p>
  </div>
  <div class="page">
    <p>Separating agreement from execution ([Yin SOSP03]) Separating a replica into an agreement node and an execution node In BFT, # execution nodes can be smaller than # agreement nodes Not effective for applications that are heavy in agreement or using Paxos</p>
    <p>Separating metadata from data (Gnothi [Wang ATC12]) Full replication of metadata and partial replication of data Only effective for block storage</p>
    <p>...</p>
    <p>Existing work made other tradeoffs</p>
  </div>
  <div class="page">
    <p>Is it possible to reduce replication cost without hurting availability and correctness?</p>
    <p>Stronger guarantees Strong guarantees Lower replication cost</p>
  </div>
  <div class="page">
    <p>Is it possible to reduce replication cost without hurting availability and correctness?</p>
    <p>Stronger guarantees</p>
    <p>Yes for many popular protocols (e.g. Paxos, UpRight)</p>
    <p>Strong guarantees Lower replication cost</p>
  </div>
  <div class="page">
    <p>Highlights</p>
    <p>u: number of omission failures r: number of commission failures</p>
    <p>Protocol Original Our approach</p>
    <p>Paxos 2f + 1 f + 1</p>
    <p>UpRight Execution u + max(u, r) + 1 u + r + 1</p>
  </div>
  <div class="page">
    <p>Background: State Machine Replication (SMR)</p>
    <p>Server program</p>
    <p>Deterministic state machine</p>
    <p>Server program Server</p>
    <p>Application</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
  </div>
  <div class="page">
    <p>Background: State Machine Replication (SMR)</p>
    <p>Server program</p>
    <p>Deterministic state machine</p>
    <p>Server program Server</p>
    <p>Application</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>Server program</p>
    <p>Server Application</p>
  </div>
  <div class="page">
    <p>Background: State Machine Replication (SMR)</p>
    <p>Server program</p>
    <p>Deterministic state machine</p>
    <p>Server program Server</p>
    <p>Application</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>Server program</p>
    <p>Server Application</p>
    <p>Agreement Protocol</p>
  </div>
  <div class="page">
    <p>Background: State Machine Replication (SMR)</p>
    <p>Server program</p>
    <p>Deterministic state machine</p>
    <p>Server program Server</p>
    <p>Application</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>Server program</p>
    <p>Server Application</p>
    <p>Agreement Protocol</p>
  </div>
  <div class="page">
    <p>Background: State Machine Replication (SMR)</p>
    <p>Server program</p>
    <p>Deterministic state machine</p>
    <p>Server program Server</p>
    <p>Application</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>input</p>
    <p>Server program</p>
    <p>Server Application</p>
    <p>Agreement Protocol</p>
    <p>agreement execution</p>
    <p>agreement execution</p>
  </div>
  <div class="page">
    <p>Reduce cost with on-demand instantiation Activate minimum set of replicas and wakeup backup ones when active ones fail Problem: system is unavailable when rebuilding backup replica</p>
    <p>Our solution: on-demand instantiation + lazy recovery</p>
  </div>
  <div class="page">
    <p>Reduce cost with on-demand instantiation Activate minimum set of replicas and wakeup backup ones when active ones fail Problem: system is unavailable when rebuilding backup replica</p>
    <p>Address availability problem by lazy recovery Rebuild a backup replica in the background</p>
    <p>Our solution: on-demand instantiation + lazy recovery</p>
  </div>
  <div class="page">
    <p>Reduce cost with on-demand instantiation Activate minimum set of replicas and wakeup backup ones when active ones fail Problem: system is unavailable when rebuilding backup replica</p>
    <p>Address availability problem by lazy recovery Rebuild a backup replica in the background</p>
    <p>Challenge How to ensure the system is able to function correctly even when some nodes have only partial state?</p>
    <p>Our solution: on-demand instantiation + lazy recovery</p>
  </div>
  <div class="page">
    <p>Key observation: when agreement and execution are separated, they each presents a unique property that enables lazy recovery</p>
  </div>
  <div class="page">
    <p>Agreement: decide the next request to execute</p>
    <p>Observation: agreement protocol is memoryless A node does not need to know prior requests when agreeing on the next one</p>
    <p>Instant activation for agreement nodes</p>
    <p>Backup agreement node</p>
    <p>Client</p>
    <p>Active agreement node</p>
  </div>
  <div class="page">
    <p>Agreement: decide the next request to execute</p>
    <p>Observation: agreement protocol is memoryless A node does not need to know prior requests when agreeing on the next one</p>
    <p>Activate minimum number of agreement nodes that can reach agreement &quot;#$%&amp;'</p>
    <p>( = )*+,&quot;(</p>
    <p>Instant activation for agreement nodes</p>
    <p>Backup agreement node</p>
    <p>Client</p>
    <p>Active agreement node</p>
  </div>
  <div class="page">
    <p>Agreement: decide the next request to execute</p>
    <p>Observation: agreement protocol is memoryless A node does not need to know prior requests when agreeing on the next one</p>
    <p>Activate minimum number of agreement nodes that can reach agreement &quot;#$%&amp;'</p>
    <p>( = )*+,&quot;(</p>
    <p>Instant activation for agreement nodes</p>
    <p>Backup agreement node</p>
    <p>Client</p>
    <p>Active agreement node</p>
  </div>
  <div class="page">
    <p>Agreement: decide the next request to execute</p>
    <p>Observation: agreement protocol is memoryless A node does not need to know prior requests when agreeing on the next one</p>
    <p>Activate minimum number of agreement nodes that can reach agreement &quot;#$%&amp;'</p>
    <p>( = )*+,&quot;(</p>
    <p>Instant activation for agreement nodes</p>
    <p>Backup agreement node</p>
    <p>Client</p>
    <p>Active agreement node Ask a blank backup node to join agreement Immediately</p>
  </div>
  <div class="page">
    <p>Agreement: decide the next request to execute</p>
    <p>Observation: agreement protocol is memoryless A node does not need to know prior requests when agreeing on the next one</p>
    <p>Activate minimum number of agreement nodes that can reach agreement &quot;#$%&amp;'</p>
    <p>( = )*+,&quot;(</p>
    <p>Instant activation for agreement nodes</p>
    <p>Backup agreement node</p>
    <p>Client</p>
    <p>Active agreement node Ask a blank backup node to join agreement Immediately</p>
    <p>Recover the backup node later in the background</p>
  </div>
  <div class="page">
    <p>Execution: execute requests and other applications tasks Critical task (e.g. executing a request, sending replies to clients) Flexible task (e.g. taking a snapshot for garbage collection)</p>
    <p>Observation: Number of replicas required to execute critical tasks (#+%$%#&quot;</p>
    <p>. ) is sometimes fewer than that required to execute flexible tasks (0-'1%2-'</p>
    <p>. )</p>
    <p>Separating critical and flexible tasks for execution</p>
  </div>
  <div class="page">
    <p>Our strategy Activate &quot;#$%&amp;'</p>
    <p>. = max (#+%$%#&quot;. + , 0-'1%2-'</p>
    <p>. ) nodes</p>
    <p>Separating critical and flexible tasks for execution</p>
  </div>
  <div class="page">
    <p>Our strategy Activate &quot;#$%&amp;'</p>
    <p>. = max (#+%$%#&quot;. + , 0-'1%2-'</p>
    <p>. ) nodes</p>
    <p>Separating critical and flexible tasks for execution</p>
    <p>Can always perform critical tasks</p>
  </div>
  <div class="page">
    <p>Our strategy Activate &quot;#$%&amp;'</p>
    <p>. = max (#+%$%#&quot;. + , 0-'1%2-'</p>
    <p>. ) nodes</p>
    <p>Separating critical and flexible tasks for execution</p>
    <p>Can perform flexible tasks when there are no failures</p>
  </div>
  <div class="page">
    <p>Our strategy Activate &quot;#$%&amp;'</p>
    <p>. = max (#+%$%#&quot;. + , 0-'1%2-'</p>
    <p>. ) nodes</p>
    <p>Separating critical and flexible tasks for execution</p>
    <p>= 1,#+%$%#&quot;. = 1,0-'1%2-'</p>
    <p>. = 2 =&gt; &quot;#$%&amp;' . = 2</p>
    <p>Backup execution node</p>
    <p>Client</p>
    <p>Active execution node</p>
  </div>
  <div class="page">
    <p>Our strategy Activate &quot;#$%&amp;'</p>
    <p>. = max (#+%$%#&quot;. + , 0-'1%2-'</p>
    <p>. ) nodes</p>
    <p>Separating critical and flexible tasks for execution</p>
    <p>= 1,#+%$%#&quot;. = 1,0-'1%2-'</p>
    <p>. = 2 =&gt; &quot;#$%&amp;' . = 2</p>
    <p>Backup execution node</p>
    <p>Client</p>
    <p>Active execution node Can perform critical tasks, but not flexible tasks</p>
  </div>
  <div class="page">
    <p>Our strategy Activate &quot;#$%&amp;'</p>
    <p>. = max (#+%$%#&quot;. + , 0-'1%2-'</p>
    <p>. ) nodes</p>
    <p>Separating critical and flexible tasks for execution</p>
    <p>= 1,#+%$%#&quot;. = 1,0-'1%2-'</p>
    <p>. = 2 =&gt; &quot;#$%&amp;' . = 2</p>
    <p>Backup execution node</p>
    <p>Client</p>
    <p>Active execution node Can perform critical tasks, but not flexible tasks</p>
    <p>Delay flexible tasks after recovery completes</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Activate a subset of agreement and execution nodes</p>
    <p>When an agreement node fails, ask a blank one to join agreement immediately</p>
    <p>When an execution node fails, keep processing requests with remaining execution nodes</p>
    <p>Recover nodes later in the background</p>
  </div>
  <div class="page">
    <p>Paxos )*+,&quot;( =  + 1  &quot;#$%&amp;'</p>
    <p>( =  + 1 #+%$%#&quot;. = 1, 0-'1%2-'</p>
    <p>. =  + 1  &quot;#$%&amp;' . =  + 1</p>
    <p>Protocol Original Our approach Paxos 2f+1 / 2f+1 f+1 / f+1</p>
    <p>UpRight Execution u + max(u, r) + 1 u + r + 1 Zyzzyva 3f+1 / 2f+1 3f+1 / 2f+1</p>
    <p>Case studies</p>
  </div>
  <div class="page">
    <p>Paxos )*+,&quot;( =  + 1  &quot;#$%&amp;'</p>
    <p>( =  + 1 #+%$%#&quot;. = 1, 0-'1%2-'</p>
    <p>. =  + 1  &quot;#$%&amp;' . =  + 1</p>
    <p>Protocol Original Our approach Paxos 2f+1 / 2f+1 f+1 / f+1</p>
    <p>UpRight Execution u + max(u, r) + 1 u + r + 1 Zyzzyva 3f+1 / 2f+1 3f+1 / 2f+1</p>
    <p>Case studies</p>
  </div>
  <div class="page">
    <p>UpRight Execution #+%$%#&quot;. =  + 1, 0-'1%2-'</p>
    <p>. = max (,) + 1  &quot;#$%&amp;' . =  +  + 1</p>
    <p>Protocol Original Our approach Paxos 2f+1 / 2f+1 f+1 / f+1</p>
    <p>UpRight Execution u + max(u, r) + 1 u + r + 1 Zyzzyva 3f+1 / 2f+1 3f+1 / 2f+1</p>
    <p>Case studies</p>
  </div>
  <div class="page">
    <p>Zyzzyva [Kotla SOSP07] )*+,&quot;( = 3 + 1 (Speculation)  &quot;#$%&amp;'</p>
    <p>( = 3 + 1 #+%$%#&quot;. =  + 1, 0-'1%2-'</p>
    <p>. =  + 1  &quot;#$%&amp;' . = 2 + 1</p>
    <p>Our approach is not always effective</p>
    <p>Protocol Original Our approach Paxos 2f+1 / 2f+1 f+1 / f+1</p>
    <p>UpRight Execution u + max(u, r) + 1 u + r + 1 Zyzzyva 3f+1 / 2f+1 3f+1 / 2f+1</p>
    <p>Case studies</p>
  </div>
  <div class="page">
    <p>Zyzzyva [Kotla SOSP07] )*+,&quot;( = 3 + 1 (Speculation)  &quot;#$%&amp;'</p>
    <p>( = 3 + 1 #+%$%#&quot;. =  + 1, 0-'1%2-'</p>
    <p>. =  + 1  &quot;#$%&amp;' . = 2 + 1</p>
    <p>Our approach is not always effective</p>
    <p>Protocol Original Our approach Paxos 2f+1 / 2f+1 f+1 / f+1</p>
    <p>UpRight Execution u + max(u, r) + 1 u + r + 1 Zyzzyva 3f+1 / 2f+1 3f+1 / 2f+1</p>
    <p>Case studies</p>
  </div>
  <div class="page">
    <p>Adaptive recovery  Challenge: how to finish recovery in a timely manner?  Why necessary?</p>
    <p>Delayed recovery results in higherprobabilityof data loss</p>
    <p>Long delayed flexible tasks (e.g. garbage collection)will block the system</p>
    <p>Our solution An adaptive approach to meet the deadlinespecified by the administrator</p>
  </div>
  <div class="page">
    <p>Evaluation  Build ThriftyPaxos from scratch in Java</p>
    <p>Questions  What is the performance of ThriftyPaxos when there are no failures?</p>
    <p>Compare to standard Paxos</p>
    <p>What is the availability of ThriftyPaxos when failures occur? Compare to standard Paxos and Cheap Paxos</p>
    <p>Can adaptive recovery meet the deadline with different configurations? Use various deadlines and state sizes</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Machines Dell R220 with 8 cores, 16GB RAM and two hard drivers</p>
    <p>Evaluate replicated H2 and RemoteHashMap H2: database system, ran TPC-C over H2 RemoteHashMap: benchmark application built by us</p>
    <p>Methodology To evaluate availability, kill agreement and execution nodes to emulate failures</p>
  </div>
  <div class="page">
    <p>ThriftyPaxos achieves higher throughput</p>
    <p>ThriftyPaxos achieves 73%~88% more write throughput</p>
    <p>f=1,v=512b f=1,v=4k f=1,v=16k f=2,v=512b f=2,v=4k f=2,v=16k</p>
    <p>Th ro ug hp</p>
    <p>ut (R eq</p>
    <p>ue st s/ s) ThriftyPaxos Standard Paxos Zookeeper</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery</p>
    <p>f=1, v=512b, snapshot=5G</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery Kill a non-leader replica Kill the leader</p>
    <p>f=1, v=512b, snapshot=5G</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery Kill a non-leader replica Kill the leader</p>
    <p>f=1, v=512b, snapshot=5G</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery Kill a non-leader replica Kill the leader</p>
    <p>f=1, v=512b, snapshot=5G</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery Kill a non-leader replica Kill the leader</p>
    <p>f=1, v=512b, snapshot=5G</p>
    <p>Recover backup replicas</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery Kill a non-leader replica Kill the leader</p>
    <p>f=1, v=512b, snapshot=5G</p>
  </div>
  <div class="page">
    <p>Maintaining availability during failure recovery Kill a non-leader replica Kill the leader</p>
    <p>f=1, v=512b, snapshot=5G</p>
    <p>Loading snapshot + replaying logs</p>
  </div>
  <div class="page">
    <p>Related work  On-demand instantiation</p>
    <p>Cheap Paxos[Lamport DSN04], ZZ [Wood Eurosys11]  Accurate failure detection</p>
    <p>Falcon[Leners SOSP11],   Higher read throughput</p>
    <p>ZooKeeper[Hunt ATC10], Gaios[Bolosky NSDI11],   Lower latency</p>
    <p>Fast Paxos[Lamport DC06], Speculative Paxos[Ports NSDI15], Zyzzyva [Kotla SOSP07],</p>
    <p>Multi-leader load balance Mencius [Mao OSDI08], EPaxos [Moraru SOSP13],</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Strong replication does not have to be expensive</p>
    <p>No need to invent new protocols  Examine conditions for correctness and availability in existing protocols  Combine on-demand instantiation and lazy recovery</p>
    <p>https://github.com/vdr007/ThriftyPaxos</p>
  </div>
</Presentation>
