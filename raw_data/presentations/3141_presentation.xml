<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sancus: Low-cost trustworthy extensible networked devices with a zero-software Trusted Computing Base</p>
    <p>Job Noorman Pieter Agten Wilfried Daniels Raoul Strackx Anthony Van Herrewege Christophe Huygens Bart Preneel</p>
    <p>Ingrid Verbauwhede Frank Piessens</p>
  </div>
  <div class="page">
    <p>Carna Botnet client distribution March to December 2012. 420K Clients</p>
    <p>Noorman et al. Sancus 16 Aug 2013 2 / 29</p>
  </div>
  <div class="page">
    <p>Carna Botnet Port scanning /0 using insecure embedded devices (Anonymous researcher)</p>
    <p>Carna Botnet client distribution March to December 2012. 420K Clients Noorman et al. Sancus 16 Aug 2013 2 / 29</p>
  </div>
  <div class="page">
    <p>Although very relevant, low-end devices lack effective security features</p>
    <p>More threats on embedded devices Due to network connectivity and third-party extensibility</p>
    <p>No effective solutions exist Its a mess (Viega and Thompson)</p>
    <p>Researchers are exploring this area E.g., SMART (El Defrawy et al.)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 3 / 29</p>
  </div>
  <div class="page">
    <p>Goal: design and implement a low-cost, extensible security architecture</p>
    <p>Strong isolation of software modules Given third-party extensibility</p>
    <p>Secure communication and attestation Both locally and remotely</p>
    <p>Counteracting attackers with full control over infrastructural software Zero-software Trusted Computing Base</p>
    <p>Noorman et al. Sancus 16 Aug 2013 4 / 29</p>
  </div>
  <div class="page">
    <p>Target: a generic system model</p>
    <p>Infrastructure provider IP owns and administers nodes Ni</p>
    <p>Software providers SPj wants to use the insfrastructure</p>
    <p>Software modules SMj,k is deployed by SPj on Ni</p>
    <p>N1</p>
    <p>N2</p>
    <p>IP</p>
    <p>SP1</p>
    <p>SP2</p>
    <p>...</p>
    <p>SM1,1 SM2,1</p>
    <p>SM2,2 SMj,k</p>
    <p>...</p>
    <p>Noorman et al. Sancus 16 Aug 2013 5 / 29</p>
  </div>
  <div class="page">
    <p>Example node configuration</p>
    <p>Node</p>
    <p>SMS</p>
    <p>SM1</p>
    <p>SMn</p>
    <p>S</p>
    <p>SP1</p>
    <p>SPn</p>
    <p>IP... ...</p>
    <p>Noorman et al. Sancus 16 Aug 2013 6 / 29</p>
  </div>
  <div class="page">
    <p>Preview</p>
    <p>Noorman et al. Sancus 16 Aug 2013 7 / 29</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Noorman et al. Sancus 16 Aug 2013 8 / 29</p>
  </div>
  <div class="page">
    <p>Modules are bipartite with a public text section and a protected data section</p>
    <p>Public text section Containing code and constants</p>
    <p>Protected data section Containing secret runtime data</p>
    <p>Noorman et al. Sancus 16 Aug 2013 9 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 10 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Public and protected sections</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 10 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module layout</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 10 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module identity</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 10 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module entry point</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 10 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module keys</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 10 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP)</p>
    <p>Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx</p>
    <p>Text</p>
    <p>r-x r-x rw- rwx</p>
    <p>Other</p>
    <p>r-x r-- --- rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP)</p>
    <p>Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx</p>
    <p>Text</p>
    <p>r-x r-x rw- rwx</p>
    <p>Other</p>
    <p>r-x r-- --- rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP)</p>
    <p>Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx</p>
    <p>Text</p>
    <p>r-x r-x rw- rwx</p>
    <p>Other</p>
    <p>r-x r-- --- rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP)</p>
    <p>Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx</p>
    <p>Text</p>
    <p>r-x r-x rw- rwx</p>
    <p>Other</p>
    <p>r-x r-- --- rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP)</p>
    <p>Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx</p>
    <p>Text</p>
    <p>r-x r-x</p>
    <p>rw</p>
    <p>rwx</p>
    <p>Other</p>
    <p>r-x r-</p>
    <p>--</p>
    <p>rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP)</p>
    <p>Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx</p>
    <p>Text</p>
    <p>r-x</p>
    <p>r-x rw</p>
    <p>rwx</p>
    <p>Other</p>
    <p>r-x</p>
    <p>r-- --</p>
    <p>rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module entry point</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP) Enter module through single entry point</p>
    <p>From/to</p>
    <p>Entry</p>
    <p>Text Protected Unprotected</p>
    <p>Entry</p>
    <p>r-x</p>
    <p>r-x rw</p>
    <p>rwx</p>
    <p>Text</p>
    <p>r-x</p>
    <p>r-x rw</p>
    <p>rwx</p>
    <p>Other</p>
    <p>r-x</p>
    <p>r-- --</p>
    <p>rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP) Enter module through single entry point</p>
    <p>From/to Entry Text Protected Unprotected</p>
    <p>Entry r-x r-x rw</p>
    <p>rwx</p>
    <p>Text r-x r-x rw</p>
    <p>rwx</p>
    <p>Other r-x r-- --</p>
    <p>rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Modules are isolated using program-counter based memory access control</p>
    <p>Variable access rights Depending on the current program counter</p>
    <p>Isolation of data Only accessible from text section</p>
    <p>Protection against code misuse (e.g., ROP) Enter module through single entry point</p>
    <p>From/to Entry Text Protected Unprotected</p>
    <p>Entry r-x r-x rw- rwx Text r-x r-x rw- rwx Other r-x r-- --- rwx</p>
    <p>Noorman et al. Sancus 16 Aug 2013 11 / 29</p>
  </div>
  <div class="page">
    <p>Isolation can be enabled/disabled using new instructions</p>
    <p>protect layout, SP Enables isolation at layout</p>
    <p>and calculates KN,SP,SM</p>
    <p>unprotect Disables isolation of current SM</p>
    <p>Noorman et al. Sancus 16 Aug 2013 12 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module layout</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 12 / 29</p>
  </div>
  <div class="page">
    <p>Isolation can be enabled/disabled using new instructions</p>
    <p>protect layout, SP Enables isolation at layout</p>
    <p>and calculates KN,SP,SM</p>
    <p>unprotect Disables isolation of current SM</p>
    <p>Noorman et al. Sancus 16 Aug 2013 12 / 29</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Noorman et al. Sancus 16 Aug 2013 13 / 29</p>
  </div>
  <div class="page">
    <p>Providing a flexible, inexpensive way for secure communication</p>
    <p>Establish a shared secret Between SP and its module SM</p>
    <p>Use symmetric crypto Public-key is too expensive for low-cost nodes</p>
    <p>Ability to deploy modules without IP intervening After initial registration, that is</p>
    <p>Noorman et al. Sancus 16 Aug 2013 14 / 29</p>
  </div>
  <div class="page">
    <p>Key derivation scheme allowing both Sancus and SPs to get the same key</p>
    <p>IP</p>
    <p>N1 N2</p>
    <p>SP1 SP2</p>
    <p>SM1 SM2 SM3</p>
    <p>SP3</p>
    <p>N3</p>
    <p>Infrastructure provider is trusted party Able to derive all keys</p>
    <p>Every node N stores a key KN Generated at random</p>
    <p>Derived key based on SP ID KSP = kdf(KN, SP)</p>
    <p>Derived key based on SM identity KSM = kdf(KSP, SM)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Key derivation scheme allowing both Sancus and SPs to get the same key</p>
    <p>IP</p>
    <p>N1 N2</p>
    <p>SP1 SP2</p>
    <p>SM1 SM2 SM3</p>
    <p>SP3</p>
    <p>N3</p>
    <p>Infrastructure provider is trusted party Able to derive all keys</p>
    <p>Every node N stores a key KN Generated at random</p>
    <p>Derived key based on SP ID KSP = kdf(KN, SP)</p>
    <p>Derived key based on SM identity KSM = kdf(KSP, SM)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Key derivation scheme allowing both Sancus and SPs to get the same key</p>
    <p>IP</p>
    <p>N1 N2</p>
    <p>SP1 SP2</p>
    <p>SM1 SM2 SM3</p>
    <p>SP3</p>
    <p>N3</p>
    <p>Infrastructure provider is trusted party Able to derive all keys</p>
    <p>Every node N stores a key KN Generated at random</p>
    <p>Derived key based on SP ID KSP = kdf(KN, SP)</p>
    <p>Derived key based on SM identity KSM = kdf(KSP, SM)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Key derivation scheme allowing both Sancus and SPs to get the same key</p>
    <p>IP</p>
    <p>N1 N2</p>
    <p>SP1 SP2</p>
    <p>SM1 SM2 SM3</p>
    <p>SP3</p>
    <p>N3</p>
    <p>Infrastructure provider is trusted party Able to derive all keys</p>
    <p>Every node N stores a key KN Generated at random</p>
    <p>Derived key based on SP ID KSP = kdf(KN, SP)</p>
    <p>Derived key based on SM identity KSM = kdf(KSP, SM)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module identity</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Node with one software module loaded Module keys</p>
    <p>Unprotected</p>
    <p>E n</p>
    <p>tr y</p>
    <p>p o</p>
    <p>in t</p>
    <p>Code &amp; constants Unprotected</p>
    <p>SM1 text section</p>
    <p>Protected data</p>
    <p>SM1 protected data section</p>
    <p>Unprotected</p>
    <p>M em</p>
    <p>o ry</p>
    <p>KN,SP,SM1 SM1 metadata</p>
    <p>Layout Keys</p>
    <p>Protected storage area</p>
    <p>KN</p>
    <p>Node</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Isolation can be enabled/disabled using new instructions</p>
    <p>protect layout, SP Enables isolation at layout and calculates KN,SP,SM</p>
    <p>unprotect Disables isolation of current SM</p>
    <p>Noorman et al. Sancus 16 Aug 2013 15 / 29</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Noorman et al. Sancus 16 Aug 2013 16 / 29</p>
  </div>
  <div class="page">
    <p>Ability to use KN,SP,SM proves the integrity and isolation of SM deployed by SP on N</p>
    <p>Only N and SP can calculate KN,SP,SM N knows KN and SP knows KSP</p>
    <p>KN,SP,SM is calculated after enabling isolation No isolation, no key; no integrity, wrong key</p>
    <p>Only SM on N is allowed to use KN,SP,SM Enforced through special instructions</p>
    <p>Noorman et al. Sancus 16 Aug 2013 17 / 29</p>
  </div>
  <div class="page">
    <p>Secure communication is provided by calculating MACs using the module key</p>
    <p>N</p>
    <p>SP SM</p>
    <p>No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Secure communication is provided by calculating MACs using the module key</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Secure communication is provided by calculating MACs using the module key</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate O</p>
    <p>O, mac(KN,SP,SM, No |I|O)</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Secure communication is provided by calculating MACs using the module key</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>MAC is calculated by a mac-seal instruction Using the key of the calling SM</p>
    <p>MAC can be recalculated by SP. . . He knows the correct KN,SP,SM</p>
    <p>. . . providing trust in the authenticity of messages Only SM can create the correct MAC</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Secure communication is provided by calculating MACs using the module key</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>MAC is calculated by a mac-seal instruction Using the key of the calling SM</p>
    <p>MAC can be recalculated by SP. . . He knows the correct KN,SP,SM</p>
    <p>. . . providing trust in the authenticity of messages Only SM can create the correct MAC</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Ability to use KN,SP,SM proves the integrity and isolation of SM deployed by SP on N</p>
    <p>Only N and SP can calculate KN,SP,SM N knows KN and SP knows KSP</p>
    <p>KN,SP,SM is calculated after enabling isolation No isolation, no key; no integrity, wrong key</p>
    <p>Only SM on N is allowed to use KN,SP,SM Enforced through special instructions</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Secure communication is provided by calculating MACs using the module key</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>MAC is calculated by a mac-seal instruction Using the key of the calling SM</p>
    <p>MAC can be recalculated by SP. . . He knows the correct KN,SP,SM</p>
    <p>. . . providing trust in the authenticity of messages Only SM can create the correct MAC</p>
    <p>Noorman et al. Sancus 16 Aug 2013 18 / 29</p>
  </div>
  <div class="page">
    <p>Remote attestation is provided through secure communication</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>Attest integrity, isolation and liveliness Of SM by SP</p>
    <p>Integrity and isolation attested by MAC, liveliness by nonce Thus included in secure communication</p>
    <p>remote attestation  secure communication So can be achieved more easily</p>
    <p>Noorman et al. Sancus 16 Aug 2013 19 / 29</p>
  </div>
  <div class="page">
    <p>Remote attestation is provided through secure communication</p>
    <p>N</p>
    <p>SP SM No, I</p>
    <p>Calculate OO, mac(KN,SP,SM, No |I|O)</p>
    <p>Attest integrity, isolation and liveliness Of SM by SP</p>
    <p>Integrity and isolation attested by MAC, liveliness by nonce Thus included in secure communication</p>
    <p>remote attestation  secure communication So can be achieved more easily</p>
    <p>Noorman et al. Sancus 16 Aug 2013 19 / 29</p>
  </div>
  <div class="page">
    <p>Remote attestation is provided through secure communication</p>
    <p>N</p>
    <p>SP SM No,AI</p>
    <p>((( (((hhhhhhCalculate O@@O, mac(KN,SP,SM, No</p>
    <p>HHH|I|O)</p>
    <p>Attest integrity, isolation and liveliness Of SM by SP</p>
    <p>Integrity and isolation attested by MAC, liveliness by nonce Thus included in secure communication</p>
    <p>remote attestation  secure communication So can be achieved more easily</p>
    <p>Noorman et al. Sancus 16 Aug 2013 19 / 29</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Noorman et al. Sancus 16 Aug 2013 20 / 29</p>
  </div>
  <div class="page">
    <p>Enabling efficient and secure local inter-module function calls</p>
    <p>Verify the SM that is to be called Is it the correct, isolated SM?</p>
    <p>Inherently different from secure communication May belong to different SPs; no shared secret</p>
    <p>We can rely on protected local state Gives rise to interesting optimizations</p>
    <p>Noorman et al. Sancus 16 Aug 2013 21 / 29</p>
  </div>
  <div class="page">
    <p>Modules are verified by calculating a MAC over their identity</p>
    <p>Module A wants to call module B</p>
    <p>A is deployed with a MAC of Bs identity using As key In an unprotected section since it is unforgeable</p>
    <p>A calculates the MAC of Bs actual identity If they match B can safely be called</p>
    <p>Done through new instruction: mac-verify Need ensurance on Bs isolation</p>
    <p>Noorman et al. Sancus 16 Aug 2013 22 / 29</p>
  </div>
  <div class="page">
    <p>Modules are verified by calculating a MAC over their identity</p>
    <p>Module A wants to call module B</p>
    <p>A is deployed with a MAC of Bs identity using As key In an unprotected section since it is unforgeable</p>
    <p>A calculates the MAC of Bs actual identity If they match B can safely be called</p>
    <p>Done through new instruction: mac-verify Need ensurance on Bs isolation</p>
    <p>Noorman et al. Sancus 16 Aug 2013 22 / 29</p>
  </div>
  <div class="page">
    <p>Modules are verified by calculating a MAC over their identity</p>
    <p>Module A wants to call module B</p>
    <p>A is deployed with a MAC of Bs identity using As key In an unprotected section since it is unforgeable</p>
    <p>A calculates the MAC of Bs actual identity If they match B can safely be called</p>
    <p>Done through new instruction: mac-verify Need ensurance on Bs isolation</p>
    <p>Noorman et al. Sancus 16 Aug 2013 22 / 29</p>
  </div>
  <div class="page">
    <p>The expensive MAC calculation is needed only once</p>
    <p>We only need to know if the same module is still there After initial verification, that is</p>
    <p>Sancus assigns unique IDs to modules Never reused within a boot-cycle</p>
    <p>mac-verify returns the ID of the verified module Can be stored in the protected section</p>
    <p>Later calls can use a new instruction: get-id Check if the same module is still loaded</p>
    <p>Noorman et al. Sancus 16 Aug 2013 23 / 29</p>
  </div>
  <div class="page">
    <p>The expensive MAC calculation is needed only once</p>
    <p>We only need to know if the same module is still there After initial verification, that is</p>
    <p>Sancus assigns unique IDs to modules Never reused within a boot-cycle</p>
    <p>mac-verify returns the ID of the verified module Can be stored in the protected section</p>
    <p>Later calls can use a new instruction: get-id Check if the same module is still loaded</p>
    <p>Noorman et al. Sancus 16 Aug 2013 23 / 29</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Noorman et al. Sancus 16 Aug 2013 24 / 29</p>
  </div>
  <div class="page">
    <p>Complete implementation of Sancus based on the MSP430 architecture</p>
    <p>Based on the openMSP430 project Very mature open-source MSP430 implementation</p>
    <p>Built on existing primitives: I MAC: HMAC I KDF: HKDF I Hashing: spongent-128/128/8 (Bogdanov et al.)</p>
    <p>Usable in RTL simulator and FPGA For easy testability of Sancus</p>
    <p>Noorman et al. Sancus 16 Aug 2013 25 / 29</p>
  </div>
  <div class="page">
    <p>Automatically handling the intricacies of compiling Sancus modules</p>
    <p>Placing the runtime stack in the protected section Prevent access by untrusted code</p>
    <p>Clearing registers on module exit Prevent data leakage</p>
    <p>Supporting more than one entry point Dispatching through a single entry point</p>
    <p>Noorman et al. Sancus 16 Aug 2013 26 / 29</p>
  </div>
  <div class="page">
    <p>Automatically handling the intricacies of compiling Sancus modules</p>
    <p>#include &lt;sancus/sm_support.h&gt; #define ID &quot;foo&quot;</p>
    <p>int SM_DATA(ID) protected_data; void SM_FUNC(ID) internal_function() {/*...*/} void SM_ENTRY(ID) entry_point() {/*...*/}</p>
    <p>Noorman et al. Sancus 16 Aug 2013 26 / 29</p>
  </div>
  <div class="page">
    <p>No runtime overhead on normal code; moderate overhead given enough computation</p>
    <p>No impact on maximum frequency Critical path not affected</p>
    <p>Main overhead from calculating MACs For verification and output</p>
    <p>Smaller overhead from entry and exit code Stack switching, register clearing,. . .</p>
    <p>Noorman et al. Sancus 16 Aug 2013 27 / 29</p>
  </div>
  <div class="page">
    <p>Example node configuration</p>
    <p>Node</p>
    <p>SMS</p>
    <p>SM1</p>
    <p>SMn</p>
    <p>S</p>
    <p>SP1</p>
    <p>SPn</p>
    <p>IP... ...</p>
    <p>Noorman et al. Sancus 16 Aug 2013 27 / 29</p>
  </div>
  <div class="page">
    <p>No runtime overhead on normal code; moderate overhead given enough computation</p>
    <p>104 100</p>
    <p>Cycles</p>
    <p>O v er</p>
    <p>h ea</p>
    <p>d</p>
    <p>Noorman et al. Sancus 16 Aug 2013 27 / 29</p>
  </div>
  <div class="page">
    <p>Area overhead</p>
    <p>Fixed overhead: 586 registers / 1, 138 LUTs Mainly MAC and KDF</p>
    <p>Per module: 213 registers / 307 LUTs Mainly key storage</p>
    <p>Noorman et al. Sancus 16 Aug 2013 28 / 29</p>
  </div>
  <div class="page">
    <p>Review</p>
    <p>Noorman et al. Sancus 16 Aug 2013 29 / 29</p>
  </div>
  <div class="page">
    <p>Sancus: Low-cost trustworthy extensible networked devices with a zero-software Trusted Computing Base</p>
    <p>Job Noorman Pieter Agten Wilfried Daniels Raoul Strackx Anthony Van Herrewege Christophe Huygens Bart Preneel</p>
    <p>Ingrid Verbauwhede Frank Piessens</p>
    <p>https://distrinet.cs.kuleuven.be/software/sancus/</p>
  </div>
</Presentation>
