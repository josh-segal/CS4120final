<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reaping the performance of fast NVM storage with uDepot</p>
    <p>Kornilios Kourtis, Nikolas Ioannou, and Ioannis Koltsidas</p>
    <p>IBM Research, Zurich</p>
    <p>IBM Research 1</p>
  </div>
  <div class="page">
    <p>Key-Value (KV) stores</p>
    <p>I Many applications require low-latency high-throughput KV storage</p>
    <p>I Flash-based SSDs not performant enough I Most are using DRAM KV-stores (Memcache, Redis)</p>
    <p>I DRAM performance underutilized on commodity networks (e.g., 10GbE) I High-performance DRAM KV stores use: RDMA (RamCloud, FaRM), Direct NIC access</p>
    <p>(MICA), programmable NICs (KV-Direct).</p>
    <p>I DRAM is not getting cheaper</p>
    <p>IBM Research 2</p>
  </div>
  <div class="page">
    <p>Key-Value (KV) stores</p>
    <p>I Many applications require low-latency high-throughput KV storage</p>
    <p>I Flash-based SSDs not performant enough I Most are using DRAM KV-stores (Memcache, Redis)</p>
    <p>I DRAM performance underutilized on commodity networks (e.g., 10GbE) I High-performance DRAM KV stores use: RDMA (RamCloud, FaRM), Direct NIC access</p>
    <p>(MICA), programmable NICs (KV-Direct).</p>
    <p>I DRAM is not getting cheaper</p>
    <p>IBM Research 2</p>
  </div>
  <div class="page">
    <p>Key-Value (KV) stores</p>
    <p>I Many applications require low-latency high-throughput KV storage</p>
    <p>I Flash-based SSDs not performant enough I Most are using DRAM KV-stores (Memcache, Redis)</p>
    <p>I DRAM performance underutilized on commodity networks (e.g., 10GbE) I High-performance DRAM KV stores use: RDMA (RamCloud, FaRM), Direct NIC access</p>
    <p>(MICA), programmable NICs (KV-Direct).</p>
    <p>I DRAM is not getting cheaper</p>
    <p>IBM Research 2</p>
  </div>
  <div class="page">
    <p>Fast NVM Devices (FNDs)</p>
    <p>I new class of SSDs I Intel Optane (3DXP) I Samsung Z-SSD (Z-NAND)</p>
    <p>I An order of magnitude better performance than Flash SSDs I Significantly cheaper than DRAM</p>
    <p>I $1.25 vs $10 per GiB (Intel Optane) I smaller TCO (number of machines, energy, etc.)</p>
    <p>IBM Research 3</p>
  </div>
  <div class="page">
    <p>Throughput (kops)</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>I queue depth (reqs in flight): 1, 2, 4, 8, 16, . . .</p>
    <p>I 10GbE: req:1b, res:4KiB (Intel X710, netperf)</p>
    <p>I SSD: SPDK perf: 4KiB RDs (Flash NVMe)</p>
    <p>I Optane: SPDK perf: 4KiB RDs ( 0.6Mops/sec,  10us)</p>
    <p>Storage no longer the bottleneck!</p>
    <p>IBM Research 4</p>
  </div>
  <div class="page">
    <p>Throughput (kops)</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>I queue depth (reqs in flight): 1, 2, 4, 8, 16, . . .</p>
    <p>I 10GbE: req:1b, res:4KiB (Intel X710, netperf)</p>
    <p>I SSD: SPDK perf: 4KiB RDs (Flash NVMe)</p>
    <p>I Optane: SPDK perf: 4KiB RDs ( 0.6Mops/sec,  10us)</p>
    <p>Storage no longer the bottleneck!</p>
    <p>IBM Research 4</p>
  </div>
  <div class="page">
    <p>SSD (spdk)</p>
    <p>Throughput (kops)</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>I queue depth (reqs in flight): 1, 2, 4, 8, 16, . . .</p>
    <p>I 10GbE: req:1b, res:4KiB (Intel X710, netperf)</p>
    <p>I SSD: SPDK perf: 4KiB RDs (Flash NVMe)</p>
    <p>I Optane: SPDK perf: 4KiB RDs ( 0.6Mops/sec,  10us)</p>
    <p>Storage no longer the bottleneck!</p>
    <p>IBM Research 4</p>
  </div>
  <div class="page">
    <p>SSD (spdk)</p>
    <p>Optane (spdk)</p>
    <p>Throughput (kops)</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>I queue depth (reqs in flight): 1, 2, 4, 8, 16, . . .</p>
    <p>I 10GbE: req:1b, res:4KiB (Intel X710, netperf)</p>
    <p>I SSD: SPDK perf: 4KiB RDs (Flash NVMe)</p>
    <p>I Optane: SPDK perf: 4KiB RDs ( 0.6Mops/sec,  10us)</p>
    <p>Storage no longer the bottleneck!</p>
    <p>IBM Research 4</p>
  </div>
  <div class="page">
    <p>KV store for DRAM FNDs</p>
    <p>I reduced cost</p>
    <p>I equivalent performance to DRAM KV store (at least, under commodity networks)</p>
    <p>Existing KV stores cannot deliver FNDs performance</p>
    <p>I Built for slower devices (e.g., use synchronous IO)</p>
    <p>I Data structures with inherent IO amplification (LSM- or B-trees)</p>
    <p>I Cache data in DRAM, limiting scalability</p>
    <p>I Rich feature set (e.g., transactions, snapshots) 0 2 4 6 8</p>
    <p>Throughput (Mops/sec)</p>
    <p>spdk</p>
    <p>Linux aio</p>
    <p>RocksDB (LSM-tree)</p>
    <p>Wiredtiger (B-tree)</p>
    <p>Achieved read throughput on a 20-core 24-device system</p>
    <p>IBM Research 5</p>
  </div>
  <div class="page">
    <p>KV store for DRAM FNDs</p>
    <p>I reduced cost</p>
    <p>I equivalent performance to DRAM KV store (at least, under commodity networks)</p>
    <p>Existing KV stores cannot deliver FNDs performance</p>
    <p>I Built for slower devices (e.g., use synchronous IO)</p>
    <p>I Data structures with inherent IO amplification (LSM- or B-trees)</p>
    <p>I Cache data in DRAM, limiting scalability</p>
    <p>I Rich feature set (e.g., transactions, snapshots)</p>
    <p>spdk</p>
    <p>Linux aio</p>
    <p>RocksDB (LSM-tree)</p>
    <p>Wiredtiger (B-tree)</p>
    <p>Achieved read throughput on a 20-core 24-device system</p>
    <p>IBM Research 5</p>
  </div>
  <div class="page">
    <p>KV store for DRAM FNDs</p>
    <p>I reduced cost</p>
    <p>I equivalent performance to DRAM KV store (at least, under commodity networks)</p>
    <p>Existing KV stores cannot deliver FNDs performance</p>
    <p>I Built for slower devices (e.g., use synchronous IO)</p>
    <p>I Data structures with inherent IO amplification (LSM- or B-trees)</p>
    <p>I Cache data in DRAM, limiting scalability</p>
    <p>I Rich feature set (e.g., transactions, snapshots) 0 2 4 6 8</p>
    <p>Throughput (Mops/sec)</p>
    <p>spdk</p>
    <p>Linux aio</p>
    <p>RocksDB (LSM-tree)</p>
    <p>Wiredtiger (B-tree)</p>
    <p>Achieved read throughput on a 20-core 24-device system</p>
    <p>IBM Research 5</p>
  </div>
  <div class="page">
    <p>uDepot: a KV store for FNDs</p>
    <p>Deliver the performance of FNDs to the application</p>
    <p>I minimize IO amplification</p>
    <p>I scalability (cores, devices, capacity) I bottom-up approach</p>
    <p>I basic interface: GET, PUT, DEL on variable-sized keys and values.</p>
    <p>IBM Research 6</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app.</p>
    <p>uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>Efficient IO access</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot server</p>
    <p>uDepot clients</p>
    <p>memcache server</p>
    <p>memcache clients</p>
    <p>Embedded uDepot</p>
    <p>IBM Research 7</p>
  </div>
  <div class="page">
    <p>IO Facilities</p>
    <p>Performance</p>
    <p>Synchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I one thread per request I syncronous (blocking)</p>
    <p>syscalls (e.g., pread)</p>
    <p>I uDepot Linux backend</p>
    <p>Asynchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I issue IO requests I receive IO completions I e.g., Linux AIO</p>
    <p>I uDepot aio backend</p>
    <p>User-space IO</p>
    <p>Device</p>
    <p>I Directly access the device I Polling instead of interrupts I e.g., SPDK</p>
    <p>I uDepot spdk backend</p>
    <p>TRT: a run-time system for async IO</p>
    <p>IBM Research 8</p>
  </div>
  <div class="page">
    <p>IO Facilities</p>
    <p>Performance</p>
    <p>Synchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I one thread per request I syncronous (blocking)</p>
    <p>syscalls (e.g., pread)</p>
    <p>I uDepot Linux backend</p>
    <p>Asynchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I issue IO requests I receive IO completions I e.g., Linux AIO</p>
    <p>I uDepot aio backend</p>
    <p>User-space IO</p>
    <p>Device</p>
    <p>I Directly access the device I Polling instead of interrupts I e.g., SPDK</p>
    <p>I uDepot spdk backend</p>
    <p>TRT: a run-time system for async IO</p>
    <p>IBM Research 8</p>
  </div>
  <div class="page">
    <p>IO Facilities</p>
    <p>Performance</p>
    <p>Synchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I one thread per request I syncronous (blocking)</p>
    <p>syscalls (e.g., pread)</p>
    <p>I uDepot Linux backend</p>
    <p>Asynchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I issue IO requests I receive IO completions I e.g., Linux AIO</p>
    <p>I uDepot aio backend</p>
    <p>User-space IO</p>
    <p>Device</p>
    <p>I Directly access the device I Polling instead of interrupts I e.g., SPDK</p>
    <p>I uDepot spdk backend</p>
    <p>TRT: a run-time system for async IO</p>
    <p>IBM Research 8</p>
  </div>
  <div class="page">
    <p>IO Facilities</p>
    <p>Performance</p>
    <p>Synchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I one thread per request I syncronous (blocking)</p>
    <p>syscalls (e.g., pread)</p>
    <p>I uDepot Linux backend</p>
    <p>Asynchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I issue IO requests I receive IO completions I e.g., Linux AIO</p>
    <p>I uDepot aio backend</p>
    <p>User-space IO</p>
    <p>Device</p>
    <p>I Directly access the device I Polling instead of interrupts I e.g., SPDK</p>
    <p>I uDepot spdk backend</p>
    <p>TRT: a run-time system for async IO</p>
    <p>IBM Research 8</p>
  </div>
  <div class="page">
    <p>IO Facilities</p>
    <p>Performance</p>
    <p>Synchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I one thread per request I syncronous (blocking)</p>
    <p>syscalls (e.g., pread) I uDepot Linux backend</p>
    <p>Asynchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I issue IO requests I receive IO completions I e.g., Linux AIO I uDepot aio backend</p>
    <p>User-space IO</p>
    <p>Device</p>
    <p>I Directly access the device I Polling instead of interrupts I e.g., SPDK I uDepot spdk backend</p>
    <p>TRT: a run-time system for async IO</p>
    <p>IBM Research 8</p>
  </div>
  <div class="page">
    <p>IO Facilities</p>
    <p>Performance</p>
    <p>Synchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I one thread per request I syncronous (blocking)</p>
    <p>syscalls (e.g., pread) I uDepot Linux backend</p>
    <p>Asynchronous IO</p>
    <p>OS</p>
    <p>Device</p>
    <p>I issue IO requests I receive IO completions I e.g., Linux AIO I uDepot aio backend</p>
    <p>User-space IO</p>
    <p>Device</p>
    <p>I Directly access the device I Polling instead of interrupts I e.g., SPDK I uDepot spdk backend</p>
    <p>TRT: a run-time system for async IO</p>
    <p>IBM Research 8</p>
  </div>
  <div class="page">
    <p>TRT: A task run-time system for asynchronous IO</p>
    <p>Goals</p>
    <p>I progammer-friendly (e.g., avoid stack ripping)</p>
    <p>I Handle multiple IO endpoints (e.g., SPDK and epoll)</p>
    <p>TRT highlights</p>
    <p>I avoid cross-core communication</p>
    <p>I user-space tasks (aka green threads, aka co-routines)</p>
    <p>I poller task for multiple IO backends</p>
    <p>. . .</p>
    <p>core 1</p>
    <p>core 0</p>
    <p>NIC NVMe</p>
    <p>net</p>
    <p>Pn</p>
    <p>io</p>
    <p>Ps</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>core 0</p>
    <p>Tasks (T ) issue IO requests Pollers (P) poll for completions Pollers notify tasks</p>
    <p>IBM Research 9</p>
  </div>
  <div class="page">
    <p>TRT: A task run-time system for asynchronous IO</p>
    <p>Goals</p>
    <p>I progammer-friendly (e.g., avoid stack ripping)</p>
    <p>I Handle multiple IO endpoints (e.g., SPDK and epoll)</p>
    <p>TRT highlights</p>
    <p>I avoid cross-core communication</p>
    <p>I user-space tasks (aka green threads, aka co-routines)</p>
    <p>I poller task for multiple IO backends</p>
    <p>. . .</p>
    <p>core 1</p>
    <p>core 0</p>
    <p>NIC NVMe</p>
    <p>net</p>
    <p>Pn</p>
    <p>io</p>
    <p>Ps</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>core 0</p>
    <p>Tasks (T ) issue IO requests Pollers (P) poll for completions Pollers notify tasks</p>
    <p>IBM Research 9</p>
  </div>
  <div class="page">
    <p>TRT: A task run-time system for asynchronous IO</p>
    <p>Goals</p>
    <p>I progammer-friendly (e.g., avoid stack ripping)</p>
    <p>I Handle multiple IO endpoints (e.g., SPDK and epoll)</p>
    <p>TRT highlights</p>
    <p>I avoid cross-core communication</p>
    <p>I user-space tasks (aka green threads, aka co-routines)</p>
    <p>I poller task for multiple IO backends</p>
    <p>. . .</p>
    <p>core 1</p>
    <p>core 0</p>
    <p>NIC NVMe</p>
    <p>net</p>
    <p>Pn</p>
    <p>io</p>
    <p>Ps</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>core 0</p>
    <p>Tasks (T ) issue IO requests</p>
    <p>Pollers (P) poll for completions Pollers notify tasks</p>
    <p>IBM Research 9</p>
  </div>
  <div class="page">
    <p>TRT: A task run-time system for asynchronous IO</p>
    <p>Goals</p>
    <p>I progammer-friendly (e.g., avoid stack ripping)</p>
    <p>I Handle multiple IO endpoints (e.g., SPDK and epoll)</p>
    <p>TRT highlights</p>
    <p>I avoid cross-core communication</p>
    <p>I user-space tasks (aka green threads, aka co-routines)</p>
    <p>I poller task for multiple IO backends</p>
    <p>. . .</p>
    <p>core 1</p>
    <p>core 0</p>
    <p>NIC NVMe</p>
    <p>net</p>
    <p>Pn</p>
    <p>io</p>
    <p>Ps</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>core 0</p>
    <p>Tasks (T ) issue IO requests Pollers (P) poll for completions</p>
    <p>Pollers notify tasks</p>
    <p>IBM Research 9</p>
  </div>
  <div class="page">
    <p>TRT: A task run-time system for asynchronous IO</p>
    <p>Goals</p>
    <p>I progammer-friendly (e.g., avoid stack ripping)</p>
    <p>I Handle multiple IO endpoints (e.g., SPDK and epoll)</p>
    <p>TRT highlights</p>
    <p>I avoid cross-core communication</p>
    <p>I user-space tasks (aka green threads, aka co-routines)</p>
    <p>I poller task for multiple IO backends</p>
    <p>. . .</p>
    <p>core 1</p>
    <p>core 0</p>
    <p>NIC NVMe</p>
    <p>net</p>
    <p>Pn</p>
    <p>io</p>
    <p>Ps</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>core 0</p>
    <p>Tasks (T ) issue IO requests Pollers (P) poll for completions Pollers notify tasks</p>
    <p>IBM Research 9</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>TRT (Linux AIO, SPDK, Epoll)</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot servermemcache server</p>
    <p>IBM Research 10</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Index kept in DRAM Index</p>
    <p>TRT (Linux AIO, SPDK, Epoll)</p>
    <p>IO</p>
    <p>Log-structured allocation</p>
    <p>LSA</p>
    <p>user app. uDepot servermemcache server</p>
    <p>IBM Research 10</p>
  </div>
  <div class="page">
    <p>uDepot index</p>
    <p>I Two-level hopscotch hash table I directory + tables</p>
    <p>I 8 byte hash entry (cf. 6-byte for FAWN, FlashStore) I maintain KV size in the entry I larger storage addresses</p>
    <p>I high-performance, scalable</p>
    <p>I efficient resizing</p>
    <p>table</p>
    <p>directory</p>
    <p>x</p>
    <p>key fingerprint</p>
    <p>IBM Research 11</p>
  </div>
  <div class="page">
    <p>Growing the uDepot index</p>
    <p>Operations:</p>
    <p>I double the size of the directory</p>
    <p>I migrate entries to new tables</p>
    <p>... 0</p>
    <p>..1 . d</p>
    <p>..</p>
    <p>ht0</p>
    <p>.. i</p>
    <p>.</p>
    <p>ex</p>
    <p>.</p>
    <p>ey</p>
    <p>..</p>
    <p>ht00</p>
    <p>.. i</p>
    <p>... i</p>
    <p>.</p>
    <p>ht10</p>
    <p>.. 00</p>
    <p>.. 01.. 10</p>
    <p>..</p>
    <p>.</p>
    <p>d</p>
    <p>.</p>
    <p>ex</p>
    <p>.</p>
    <p>ey</p>
    <p>Minimal disruption</p>
    <p>I unobstructed reads</p>
    <p>I no IO required: information in the hash entry to reconstruct the fingerprint</p>
    <p>I incremental: each operation migrates a bounded number of entries</p>
    <p>IBM Research 12</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Two-level resizable hash table Index</p>
    <p>TRT (Linux AIO, SPDK, Epoll)</p>
    <p>IO LSA</p>
    <p>Log-structured allocation</p>
    <p>user app. uDepot servermemcache server</p>
    <p>IBM Research 13</p>
  </div>
  <div class="page">
    <p>uDepot architecture</p>
    <p>Two-level resizable hash table Index</p>
    <p>TRT (Linux AIO, SPDK, Epoll)</p>
    <p>IO LSA</p>
    <p>SALSA (LSA, GC)</p>
    <p>user app. uDepot servermemcache server</p>
    <p>IBM Research 13</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment</p>
    <p>I vs libcuckoo (better performance, see paper)</p>
    <p>I Here: How is tail latency affected by the grow operation?</p>
    <p>I ubench: perform 50M (no grow) and 1B (4 grows) inserts and lookups</p>
    <p>IBM Research 14</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment</p>
    <p>I vs libcuckoo (better performance, see paper)</p>
    <p>I Here: How is tail latency affected by the grow operation?</p>
    <p>I ubench: perform 50M (no grow) and 1B (4 grows) inserts and lookups</p>
    <p>IBM Research 14</p>
  </div>
  <div class="page">
    <p>uDepot index latency</p>
    <p>percentile lookup/50M lookup/1B insert/50M insert/1B</p>
    <p>IBM Research 15</p>
  </div>
  <div class="page">
    <p>uDepot index latency</p>
    <p>percentile lookup/50M lookup/1B insert/50M insert/1B</p>
    <p>IBM Research 15</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment I uDepot ubench: perform 10M uDepot PUTs and GETs</p>
    <p>I multiple backends (how different backends behave)</p>
    <p>I vs. dev ubench: fio and SPDK perf I same workload: 4KiB</p>
    <p>IBM Research 16</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment I uDepot ubench: perform 10M uDepot PUTs and GETs</p>
    <p>I multiple backends (how different backends behave)</p>
    <p>I vs. dev ubench: fio and SPDK perf I same workload: 4KiB</p>
    <p>IBM Research 16</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>spdk raw</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>spdk raw</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>spdk raw</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>spdk raw</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>aio raw</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Efficiency (1 core / 1 Optane)</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>spdk raw</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (u s )</p>
    <p>GET: median latency for qd=1</p>
    <p>udepo t-sync</p>
    <p>IO udepo</p>
    <p>t-aio udepo</p>
    <p>t-spdk 0</p>
    <p>aio raw</p>
    <p>spdk raw</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (k</p>
    <p>o p</p>
    <p>s)</p>
    <p>GET: throughput for qd=128</p>
    <p>IBM Research 17</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Scalability (20 cores, 24 Flash NVMes)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>GETs</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>PUTs</p>
    <p>IBM Research 18</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Scalability (20 cores, 24 Flash NVMes)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>GETs</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>PUTs</p>
    <p>IBM Research 18</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Scalability (20 cores, 24 Flash NVMes)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>GETs</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>PUTs</p>
    <p>GET: udepot-syncIO: 1.6Mops</p>
    <p>IBM Research 18</p>
  </div>
  <div class="page">
    <p>Embedded uDepot: Scalability (20 cores, 24 Flash NVMes)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>GETs</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>udepot-syncIO udepot-aio udepot-spdk spdk raw aio raw</p>
    <p>PUTs</p>
    <p>GET: udepot-syncIO: 1.6Mops</p>
    <p>GET: SPDK: 6.2 Mops (uDepot) vs 6.9 Mops (ubench)</p>
    <p>IBM Research 18</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment</p>
    <p>I memaslap benchmark</p>
    <p>I default workload: 1KiB objects, 10%/90% PUT/GET</p>
    <p>I 2 Optane SSDs, 20 cores, 10GbE</p>
    <p>I vs Memcached (expected performance), Memc3 (optimized memcached), Fatcache (tranditional SSD impl.)</p>
    <p>IBM Research 19</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment</p>
    <p>I memaslap benchmark</p>
    <p>I default workload: 1KiB objects, 10%/90% PUT/GET</p>
    <p>I 2 Optane SSDs, 20 cores, 10GbE</p>
    <p>I vs Memcached (expected performance), Memc3 (optimized memcached), Fatcache (tranditional SSD impl.)</p>
    <p>IBM Research 19</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experiment</p>
    <p>I memaslap benchmark</p>
    <p>I default workload: 1KiB objects, 10%/90% PUT/GET</p>
    <p>I 2 Optane SSDs, 20 cores, 10GbE</p>
    <p>I vs Memcached (expected performance), Memc3 (optimized memcached), Fatcache (tranditional SSD impl.)</p>
    <p>IBM Research 19</p>
  </div>
  <div class="page">
    <p>uDepot memcache</p>
    <p>ve ra</p>
    <p>ll T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>fatcache memc3 memcached uDepot-trt-aio uDepot-trt-spdk</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>fatcache memc3 memcached uDepot-trt-aio uDepot-trt-spdk</p>
    <p>IBM Research 20</p>
  </div>
  <div class="page">
    <p>uDepot memcache</p>
    <p>ve ra</p>
    <p>ll T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>fatcache memc3 memcached uDepot-trt-aio uDepot-trt-spdk</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>fatcache memc3 memcached uDepot-trt-aio uDepot-trt-spdk</p>
    <p>Latency (us) for qd=1 memc3: 49</p>
    <p>memcached: 51 udepot-trt-aio: 67</p>
    <p>udepot-trt-spdk: 51</p>
    <p>IBM Research 20</p>
  </div>
  <div class="page">
    <p>uDepot memcache</p>
    <p>ve ra</p>
    <p>ll T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( K</p>
    <p>op s/</p>
    <p>se c)</p>
    <p>fatcache memc3 memcached uDepot-trt-aio uDepot-trt-spdk</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(u s)</p>
    <p>fatcache memc3 memcached uDepot-trt-aio uDepot-trt-spdk</p>
    <p>Latency (us) for qd=1 memc3: 49</p>
    <p>memcached: 51 udepot-trt-aio: 67</p>
    <p>udepot-trt-spdk: 51</p>
    <p>Latency (us) for qd=128 memc3: 110</p>
    <p>memcached: 126 udepot-trt-aio: 139</p>
    <p>udepot-trt-spdk: 128</p>
    <p>Throughput (kiops) for qd=128 memc3: 1145</p>
    <p>memcached: 1000 udepot-trt-aio: 911</p>
    <p>udepot-trt-spdk: 985</p>
    <p>IBM Research 20</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>I Fast NVMe devices offer an attractive cost-performance tradeoff between DRAM and Flash SSDs I They shift the bottleneck from the storage to the network</p>
    <p>I uDepot: a KV store that delivers their performance I low latency, high throughput I uDepot memcache has comparable performance with DRAM memcache</p>
    <p>I Experimental Cloud service based on uDepot memcache implementation I try it out (for free):</p>
    <p>https://cloud.ibm.com/catalog/services/data-store-for-memcache</p>
    <p>IBM Research 21</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>I Fast NVMe devices offer an attractive cost-performance tradeoff between DRAM and Flash SSDs I They shift the bottleneck from the storage to the network</p>
    <p>I uDepot: a KV store that delivers their performance I low latency, high throughput I uDepot memcache has comparable performance with DRAM memcache</p>
    <p>I Experimental Cloud service based on uDepot memcache implementation I try it out (for free):</p>
    <p>https://cloud.ibm.com/catalog/services/data-store-for-memcache</p>
    <p>IBM Research 21</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>I Fast NVMe devices offer an attractive cost-performance tradeoff between DRAM and Flash SSDs I They shift the bottleneck from the storage to the network</p>
    <p>I uDepot: a KV store that delivers their performance I low latency, high throughput I uDepot memcache has comparable performance with DRAM memcache</p>
    <p>I Experimental Cloud service based on uDepot memcache implementation I try it out (for free):</p>
    <p>https://cloud.ibm.com/catalog/services/data-store-for-memcache</p>
    <p>IBM Research 21</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>IBM Research 22</p>
  </div>
</Presentation>
