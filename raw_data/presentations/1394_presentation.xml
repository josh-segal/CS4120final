<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Malicious Browser Extensions at Scale</p>
    <p>Bridging the Observability Gap between Web Site and Browser</p>
    <p>Louis F. DeKoven1, Stefan Savage1, Geoffery M. Voelker1, Nektarios Leontiadis2</p>
  </div>
  <div class="page">
    <p>Attacks on Social Media  Social media is targeted by malware</p>
    <p>Reach a large number of users quickly  Users inherently trust content within a social network</p>
  </div>
  <div class="page">
    <p>Attacks on Social Media  Social media is targeted by malware</p>
    <p>Reach a large number of users quickly  Users inherently trust content within a social network</p>
    <p>Malware infects users browser then  Infect other social media users  Steal the users passwords</p>
  </div>
  <div class="page">
    <p>Attacks on Social Media  Social media is targeted by malware</p>
    <p>Reach a large number of users quickly  Users inherently trust content within a social network</p>
    <p>Malware infects users browser then  Infect other social media users  Steal the users passwords</p>
    <p>Leverage the vantage point of a social network to  Detect devices infected with malware  Clean up malware from infected devices</p>
  </div>
  <div class="page">
    <p>Objectives  Detect and label malicious browser extensions quickly</p>
    <p>Google Chrome  Mozilla Firefox</p>
    <p>Automatically cleanup infected devices</p>
    <p>Detect new malicious browser extensions automatically</p>
  </div>
  <div class="page">
    <p>Objectives  Detect and label malicious browser extensions quickly</p>
    <p>Google Chrome  Mozilla Firefox</p>
    <p>Automatically cleanup infected devices</p>
    <p>Detect new malicious browser extensions automatically</p>
    <p>Malicious Browser Extensions (MBE): extensions that take actions on behalf of a user without their consent, or replace Facebooks key functionality or content.</p>
  </div>
  <div class="page">
    <p>Browser Extensions</p>
    <p>Motivation Background Methodology Results Evaluating Alternatives Conclusion</p>
  </div>
  <div class="page">
    <p>Browser Extensions 101  Enhance user experience beyond a Web page</p>
    <p>Can change visual appearance of Web pages</p>
    <p>Can change how the browser interacts with Web pages</p>
  </div>
  <div class="page">
    <p>Browser Extensions 101  Enhance user experience beyond a Web page</p>
    <p>Can change visual appearance of Web pages</p>
    <p>Can change how the browser interacts with Web pages</p>
  </div>
  <div class="page">
    <p>Browser Extensions 101  Enhance user experience beyond a Web page</p>
    <p>Can change visual appearance of Web pages</p>
    <p>Can change how the browser interacts with Web pages</p>
    <p>How?  Have elevated set of privileges any Web site content</p>
  </div>
  <div class="page">
    <p>Browser Extensions 101  Enhance user experience beyond a Web page</p>
    <p>Can change visual appearance of Web pages</p>
    <p>Can change how the browser interacts with Web pages</p>
    <p>How?  Have elevated set of privileges</p>
    <p>Modify HTTP headers  Change Content Security Policy  Rewrite any Web site content</p>
  </div>
  <div class="page">
    <p>Browser Extensions 101  Example MBE targeting Facebook</p>
    <p>Steals users Facebook access token  Generates likes  Subscribes to YouTube channels  And more</p>
  </div>
  <div class="page">
    <p>Defending Against MBE  Harden the browser [1,2,3]</p>
    <p>Detecting extensions vulnerable to Web page JavaScript[4]</p>
    <p>Vetting code within extension marketplaces [5]</p>
    <p>Dynamic analysis and sandboxing [6,7]</p>
    <p>[1] V. Djeric and A. Goel. Securing Script-Based Extensibility in Web Browsers. In Proc. of USENIX Security, 2010. [2] A. Guha, M. Fredrikson, B. Livshits, and N. Swamy. Verified Security for Browser Extensions. In Proc. of IEEE S&amp;P, 2011. [3] L. Liu, X. Zhang, G. Yan, and S. Chen. Chrome Extensions: Threat Analysis and Countermeasures. In Proc. of NDSS, 2012. [4] M. T. Louw, J. S. Lim, and V. N. Venkatakrishnan. Enhancing web browser security against malware extensions. Journal in Computer Virology, 2008. [5] H. Shahriar, K. Weldemariam, T. Lutellier, and M. Zulkernine. A Model-Based Detection of Vulnerable and Malicious Browser Extensions. In Proc. of SERE, 2013. [5] S. Bandhakavi, S. T. King, M. Parthasarathy, and M. Winslett. Vetting Browser Extensions for Security Vulnerabilities with VEX. In Proc. of USENIX Security, 2010. [6] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vigna, and V. Paxson. Hulk: Eliciting Malicious Behavior in Browser Extensions. In Proc. of USENIX Security, 2014. [7] N. Jagpal, E. Dingle, J. Gravel, P. Mavrommatis, N. Provos, M. A. Rajab, and K. Thomas. Trends and Lessons from Three Years Fighting Malicious Extensions. In Proc. of USENIX Security, 2015.</p>
  </div>
  <div class="page">
    <p>Its Hard to Detect MBE  Anti-malware products</p>
    <p>May run static analysis on extension JavaScript  Struggle with dynamic resources</p>
    <p>Extension marketplaces/Browser vendors  May track how extensions use the browser  Struggle with temporal badness</p>
    <p>Researchers  May run sandboxed analysis  Struggle with scale and temporal badness</p>
  </div>
  <div class="page">
    <p>A Different Perspective</p>
    <p>Social media networks directly experience abusive extensions</p>
    <p>Leverage the vantage point of a social media network</p>
  </div>
  <div class="page">
    <p>Detecting MBE</p>
    <p>Motivation Background Methodology Results Evaluating Alternatives Conclusion</p>
  </div>
  <div class="page">
    <p>Challenges in Detecting MBE  How do we know what extensions are bad?</p>
    <p>Facebook has to build signatures to detect MBE</p>
  </div>
  <div class="page">
    <p>Challenges in Detecting MBE  How do we know what extensions are bad?</p>
    <p>Facebook has to build signatures to detect MBE</p>
    <p>Facebook does not know what extensions are installed  Can detect user accounts acting in abusive ways</p>
  </div>
  <div class="page">
    <p>Challenges in Detecting MBE  How do we know what extensions are bad?</p>
    <p>Facebook has to build signatures to detect MBE</p>
    <p>Facebook does not know what extensions are installed  Can detect user accounts acting in abusive ways</p>
    <p>Facebook can not collect extensions from facebook.com due to browser security  Can build a binary to collect installed extensions</p>
  </div>
  <div class="page">
    <p>Challenges in Detecting MBE  How do we know what extensions are bad?</p>
    <p>Facebook has to build signatures to detect MBE</p>
    <p>Facebook does not know what extensions are installed  Can detect user accounts acting in abusive ways</p>
    <p>Facebook can not collect extensions from facebook.com due to browser security  Can build a binary to collect installed extensions</p>
    <p>Insight: We can link extension content to abusive content</p>
  </div>
  <div class="page">
    <p>System Methodology Using signals from malware within Facebook enables the detection and remove MBE at a large scale</p>
    <p>We do this by:</p>
    <p>Identifying compromised Facebook accounts</p>
    <p>With user consent, we fetch the installed extensions from devices exhibiting malicious behavior</p>
    <p>Determine if the extension is malicious or benign by comparing it to abusive content (while fetching extensions)</p>
    <p>If the extension is malicious remove it from the users device</p>
  </div>
  <div class="page">
    <p>System Design  Detecting</p>
    <p>compromised user accounts</p>
  </div>
  <div class="page">
    <p>Detecting Compromised User Accounts  Spiking content  Monitor time series of user activity</p>
  </div>
  <div class="page">
    <p>Detecting Compromised User Accounts  Spiking content  Monitor time series of user activity</p>
    <p>Document Object Model (DOM) based detection  Periodically scan Facebooks DOM for third-party elements</p>
  </div>
  <div class="page">
    <p>Detecting Compromised User Accounts  Spiking content  Monitor time series of user activity</p>
    <p>Document Object Model (DOM) based detection  Periodically scan Facebooks DOM for third-party elements</p>
    <p>Negative feedback  Feedback on posted content</p>
  </div>
  <div class="page">
    <p>System Design  Detecting</p>
    <p>compromised user accounts  Anti-malware</p>
    <p>scanner</p>
  </div>
  <div class="page">
    <p>Anti-Malware Scanner  Facebooks custom scanner is executed on the compromised</p>
    <p>device following user consent</p>
  </div>
  <div class="page">
    <p>Anti-Malware Scanner  Facebooks custom scanner is executed on the compromised</p>
    <p>device following user consent</p>
    <p>Uploads digital fingerprint of extensions to Facebook  MD5 hash</p>
    <p>New extensions are uploaded to Facebook</p>
    <p>When MBE are detected they are removed</p>
    <p>Third-party anti-virus scanner executed</p>
  </div>
  <div class="page">
    <p>System Design  Detecting</p>
    <p>compromised user accounts  Anti-malware</p>
    <p>scanner  Static analysis</p>
    <p>pipeline</p>
  </div>
  <div class="page">
    <p>Static Analysis Pipeline  Unpacking</p>
    <p>Recursively unpack the extension and files</p>
    <p>Indicator extraction  Deobfuscate, decode, and repair broken URLs  Regular expressions extract indicators e.g. URLs, API keys</p>
    <p>Treating each file as text</p>
    <p>Insight: Extensions collected by Facebooks malware scanner exhibited malicious behavior at the time of collection</p>
  </div>
  <div class="page">
    <p>System Design  Detecting</p>
    <p>compromised user accounts  Anti-malware</p>
    <p>scanner  Static analysis</p>
    <p>pipeline  Extension labeling</p>
  </div>
  <div class="page">
    <p>Indicator Labeling  MALICIOUS</p>
    <p>Malicious with high-confidence</p>
    <p>UNKNOWN  Default label for all samples</p>
    <p>NON_MALICIOUS  Benign samples, or samples from trusted sources</p>
    <p>Labels produced by system that detects compromised accounts</p>
  </div>
  <div class="page">
    <p>Propagating Indicator Labels  Apply vetted threat labels to indicators from static analysis</p>
    <p>How do we label extensions?  JavaScript contains a MALICIOUS URL  MALICIOUS label propagates to the file  MALICIOUS label propagates the extension</p>
    <p>Erroneously marked indicators  Propagate automatically  Rules in place to prevent single indicators from mass-labeling  Manual labels overrides automated labeling</p>
  </div>
  <div class="page">
    <p>System Results</p>
    <p>Motivation Background Methodology Results Evaluating Alternatives Conclusion</p>
  </div>
  <div class="page">
    <p>Malicious Indicators</p>
    <p>Extension Contents Extracted Indicators Scan Sessions JS HTML Total # Malicious (#%) # %</p>
    <p>Chrome Ext. 67 380 720 66 134 1 559 (2.4%) 718 497 96.9 Firefox Ext. 17 979 16 19 004 609 (3.2%) 257 164 34.7 Total Unique 84 905 733 73 281 1 516 (2.1%) 741 276 100.0</p>
  </div>
  <div class="page">
    <p>Malicious Extensions</p>
    <p>A high proportion (5.2%) of malicious extensions is expected as our system targets devices exhibiting malicious behavior</p>
    <p>422 of 1,697 Chrome MBE were once online Googles Web Store  Suggests a high number of MBEs to be side loaded</p>
    <p>All Extensions Malicious Extensions # % # % of total</p>
    <p>Chrome Ext. 23 376 67.6 1 697 7.3 Firefox Ext. 11 183 32.4 88 0.8 Total Unique 34 559 100.0 1 785 5.2</p>
  </div>
  <div class="page">
    <p>MBE Detection Rates  Average 39.5 Chrome MBE/day</p>
    <p>Average 2 Firefox MBE/day</p>
    <p>92% of new MBE are labeled by a median time of 21 seconds</p>
    <p>8% of new MBE are labeled more than one day after collection  Detected on 9% of user devices cleaned during the experiment</p>
    <p>This result is expected from an indicator-based labeling system as labels can change over time</p>
  </div>
  <div class="page">
    <p>Known False Positives  124 extensions are incorrectly labeled MALICIOUS</p>
    <p>0.8% of all scan sessions removed one or more of these extensions</p>
    <p>Median detection time: 18 days</p>
    <p>This result is expected from an indicator-based labeling system as labels can change over time</p>
    <p>We find the low number of incorrectly labeled MBEs to be an acceptable tradeoff</p>
  </div>
  <div class="page">
    <p>Comparing Systems</p>
    <p>Motivation Background Methodology Results Evaluating Alternatives Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluating Alternatives  Was it necessary to create a new system that detects MBE?</p>
    <p>Focus on Chrome extensions  Majority of extensions are for Chrome browser  Each Chrome extensions Web store presence is checked  2,200/23,376 Chrome extensions once on the Chrome Web store</p>
    <p>Facebook labels 422 (19.2%) MALICIOUS</p>
    <p>Facebook labels 1,778 (80.8%) UNKNOWN</p>
  </div>
  <div class="page">
    <p>VirusTotal  Provided with 9,172 unique CRX from authors of Hulk[1]</p>
    <p>VT was aware of only 73 extensions  Moreover 5 are labeled MALICIOUS by at least 1 anti-virus engine</p>
    <p>Facebook cannot use general malware databases to detect MBEs</p>
  </div>
  <div class="page">
    <p>VirusTotal  Provided with 9,172 unique CRX from authors of Hulk[1]</p>
    <p>VT was aware of only 73 extensions  Moreover 5 are labeled MALICIOUS by at least 1 anti-virus engine</p>
    <p>Facebook cannot use general malware databases to detect MBEs</p>
    <p>Of the 422 MBE identified by Facebook  96 (22.7%) are labeled MALICIOUS by one or more anti-virus</p>
    <p>engine</p>
    <p>Facebook cannot rely on anti-malware engines to identify MBEs</p>
  </div>
  <div class="page">
    <p>Google Chrome Web Store  By the six-week period Google removed 367 of the 2,200</p>
    <p>70 MALICIOUS  297 UNKNOWN</p>
    <p>Facebook cannot rely on Google to remove all MBE targeting FB</p>
    <p>Does Facebook identify MBEs faster?</p>
    <p>These 70 MBE have over 1 million installs according the the Web Store</p>
    <p>Facebook identifies the 70 MBE with a median time of 2.8 days (67.3 hours) before they are removed from the Web store</p>
    <p>Our system successfully reduces the median monetization time of MBE</p>
  </div>
  <div class="page">
    <p>Take Away MBE are challenging to address from any single vantage point</p>
    <p>Browser vendors  Can restrict extension distribution  Have limited insight into abusive extensions in the wild</p>
    <p>Abused sites  Directly experience malicious behavior  But are not in a position to identify which extensions are</p>
    <p>implicated</p>
  </div>
  <div class="page">
    <p>Conclusion  This system is currently running to protect users of Facebook</p>
    <p>As a result Facebook is able to very quickly detect and remove new MBE at scale</p>
  </div>
</Presentation>
