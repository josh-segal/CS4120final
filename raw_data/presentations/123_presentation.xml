<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Structuring Unstructured Peer-to-Peer Networks</p>
    <p>Stefan Schmid</p>
    <p>Roger Wattenhofer</p>
    <p>Distributed Computing</p>
    <p>Group</p>
    <p>HiPC 2007</p>
    <p>Goa, India</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 2</p>
    <p>Networks</p>
    <p>DISTRIBUTED COMPUTINGInternet Graph Web Graph Neuron Networks</p>
    <p>Social GraphsPublic Transportation Networks</p>
    <p>Different properties:  Natural vs. Man-made  Robustness  Diameter  Routability  ...</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 3</p>
    <p>An Interesting Network: Peer-to-Peer Network</p>
    <p>Popular Examples: - File sharing: BitTorrent, eMule, Kazaa, ... - Streaming: Zattoo, Joost, ... - Internet telefony: Skype, ... - etc.</p>
    <p>Important: p2p accounts for</p>
    <p>much Internet traffic today!</p>
    <p>(source: cachelogic.com)</p>
    <p>Network of peers, e.g., to share files</p>
    <p>Desirable properties: - Scalability - Low degree, low network diameter - Fast routing - etc.</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 4</p>
    <p>Some Own Applications</p>
    <p>Wuala online storage system</p>
    <p>- Student project, start-up, http://wua.la</p>
    <p>Pulsar streaming</p>
    <p>- tilllate.com, DJ events, ...; pstreams.com</p>
    <p>- cheap infrastructure at content provider</p>
    <p>BitThief BitTorrent downloads</p>
    <p>Distributed Computations</p>
    <p>- BOINC client for ECC discrete logarithm challence</p>
    <p>Su cc</p>
    <p>es sf</p>
    <p>ul p</p>
    <p>ar ad</p>
    <p>ig m</p>
    <p>&amp; te</p>
    <p>ch no</p>
    <p>lo gy</p>
    <p>,</p>
    <p>bu t s</p>
    <p>til l i</p>
    <p>m po</p>
    <p>rt an</p>
    <p>t r es</p>
    <p>ea rc</p>
    <p>h ch</p>
    <p>al le</p>
    <p>ng es</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 5</p>
    <p>Structured vs. Unstructured Topologies</p>
    <p>Old p2p systems such as Napster were based on server</p>
    <p>- Server stores index: search for contents is simple</p>
    <p>- Problem: single point of failure</p>
    <p>- Legacy issues...</p>
    <p>Unstructured systems, e.g., Gnutella, allow arbitrary topologies</p>
    <p>and arbitrary data placement</p>
    <p>- Peers just connect to an arbitrary set of other peers</p>
    <p>- No single point of failure</p>
    <p>- But often inefficient: routing based on flooding or random walk</p>
    <p>Structured systems, e.g., eMules Kad network, give guarantees</p>
    <p>- Proactive maintenance of topology</p>
    <p>- Provable network diameter and peer degree</p>
    <p>- Routing possible, look up, e.g., in log(n) hops</p>
    <p>(maybe also low stretch)</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 6</p>
    <p>What is better?</p>
    <p>Unstructured systems have less maintenance overhead</p>
    <p>- Peers can join and leave wherever they want</p>
    <p>Unstructured systems allow for a richer set of queries</p>
    <p>- e.g., range queries, Boolean queries</p>
    <p>Most importantly: despite the interesting properties (and large body of research) of structured networks, todays predominant networks are still</p>
    <p>unstructured (e.g., Gnutella, BitTorrent, etc.)</p>
    <p>Really?</p>
    <p>Really? Flooding always</p>
    <p>possible!</p>
    <p>But unstructured systems often have scalability problems - When Napster was unplugged, Gnutella went down.</p>
    <p>Discussion needs to be continued...!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 7</p>
    <p>Routing in Arbitrary Topologies?</p>
    <p>How to find a file in an arbitrary network?</p>
    <p>Option 1: Flooding (up to a certain hop radius r) - Robust, but does not scale.</p>
    <p>- Does not find the needles, but does a good job finding popular files.</p>
    <p>Option 2: Random Walks - Less messages, but no lookup performance guarantee. - Potentially large delay (solution: many parallel walkers)</p>
    <p>- Walkers can be lost... - Analysis difficult. - Again: Good to find popular contents, bad to find needles.</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 8</p>
    <p>Flooding</p>
    <p>This talk considers search operations by flooding.</p>
    <p>Efficiency of flooding?</p>
    <p>Very efficient on trees! Many redundant transimissions...</p>
    <p>Flooding efficiency depends on network topology!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 9</p>
    <p>Clustella</p>
    <p>We propose Clustella</p>
    <p>- a new P2P client for unstructured peer-to-peer systems</p>
    <p>- based on flooding, but with smart neighbor selection</p>
    <p>- allows for more efficient flooding!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 10</p>
    <p>Vision</p>
    <p>Clustella Vision: unstructured p2p network</p>
    <p>Normal client</p>
    <p>Clustella client</p>
    <p>By connecting to peers in far-away parts of the network, small cycles in the topology are avoided, and flooding is more efficient. Not only Clustella clients do benefit, but also all other clients in the network.</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 11</p>
    <p>Flood Coverage</p>
    <p>Main open question: How to connect to remote peers?</p>
    <p>Given a set of potential neighbors, it would be useful to know the hop distance to each of those!</p>
    <p>Then, we could connect to the one furthest away...</p>
    <p>Goal: Maximize flood coverage, i.e., maximize minimum number of nodes reached by a r-hop flooding  locally and despite dynamics</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 12</p>
    <p>Hop-Estimation With Clustering</p>
    <p>Main idea: Use clustering!</p>
    <p>- Divide network into different clusters.</p>
    <p>- Peers in different clusters belong to different network regions and can safely be connected without creating small cycles.</p>
    <p>How to achieve such a clustering? Introduction of beacons!</p>
    <p>- Two parameters: radius Rd and radius Rb (Rd &lt; Rb)</p>
    <p>- If a peer has no beacon in Rd neighborhood, it becomes a beacon itself.</p>
    <p>- A peer knows all beacons in its Rb neighborhood.</p>
    <p>- Rb roughly equals the flooding radius R</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 13</p>
    <p>Clustella Mechanism (1)</p>
    <p>One beacon in radius Rd  Beacon known in radius Rb  Flooding radius R</p>
    <p>Beacons append their ID to all packets (piggy-back)</p>
    <p>If packet expires before, other peers (here: ) forward beacon information</p>
    <p>Entire Rb neighborhood will know beacon</p>
    <p>Peers try to connect to peers which have no beacons in common!</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 14</p>
    <p>Clustella Mechanism (2)</p>
    <p>Edges are undirected</p>
    <p>All peers have degree d or d+1</p>
    <p>If connection is accepted if own degree is d or smaller; otherwise, a neighbor may have an open slot, or a connection is broken down</p>
    <p>Invariant quickly reestablished!</p>
    <p>Neighbors of existing neighbor are also good candidates, as they are located in the same network region.</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 15</p>
    <p>Two Challenges</p>
    <p>Evaluation of current neighbors - Existing neighbors are always in the same network region - Evaluating their quality and comparing them to alternative neighbors is difficult - Include routes in packets! Exclude beacons known from a neighbor only</p>
    <p>Dynamics - Clustella must be robust to churn, i.e., frequent joins and leaves</p>
    <p>- E.g., node crash: Clustella peer p stores some neighbors for each of its neighbors q; these neighbors are good candidates as they are in the same network region as q</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 16</p>
    <p>Evaluation</p>
    <p>Simulation of three different neighbor selection strategies - Gnutella-like (unfair?): Peers join at some well-known entry point and ask for their neighbors neighbors until they reach full degree - Random walk (more interesting?): Peers find new peers by a random walk of length L - Clustella: Peers find new neighbors by exploring the network using a walk of length L and by taking beacon information into account</p>
    <p>Results - Gnutella-like topologies result in very inefficient flooding operations - Clustella yields higher flood coverage than random walk</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 17</p>
    <p>Future Work</p>
    <p>Hierarchical clustering (beacons with different radii) - Already a small hierarchy can yield better flood coverage</p>
    <p>- However, maintenance of hierarchy can be expensive under churn!</p>
    <p>- Moreover, fairness must be guaranteed: High-level beacon peers should not</p>
    <p>have more work to do!</p>
    <p>Smaller messages - Reducing the message sizes for large radii is important! - Idea: Use of Bloom filters instead of sending beacon IDs directly</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 18</p>
    <p>Conclusion</p>
    <p>We believe that structuring topologies can be benefitial to peer-to-peer systems!</p>
    <p>Clustering with beacons is simple and probably also useful in other applications, e.g., in music graph</p>
    <p>Implementation must ensure fairness and use small message sizes.</p>
    <p>A good choice of parameters important for both efficiency and stability.</p>
    <p>Incorporation into Gnutella??</p>
  </div>
  <div class="page">
    <p>Stefan Schmid @ HiPC 2007 19</p>
    <p>Thank you.</p>
    <p>Thank you for your interest.</p>
  </div>
</Presentation>
