<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Framework for Thermal and Performance Management</p>
    <p>Davide B. Bartolini, Filippo Sironi, Martina Maggio, Riccardo Cattaneo, Donatella Sciuto, Marco D. Santambrogio</p>
    <p>Politecnico di Milano, Lund University</p>
    <p>{bartolini, sironi, cattaneo, sciuto, santambrogio}@elet.polimi.it, martina.maggio@control.lth.se</p>
  </div>
  <div class="page">
    <p>Context  In server farms, power costs account for up to 80% of TCO [1]</p>
    <p>33% of TCO just to operate the cooling infrastructure  Processors are one of the most power-hungry and hot</p>
    <p>components for plenty of server workloads  Chip Multiprocessors (CMPs) are pervasive  Also CMPs are crashing into the power wall (e.g., dark silicon [2]),</p>
    <p>power density is increasing and we need to exhaust the heat  Keeping processors cool is crucial [3] (high working</p>
    <p>temperatures lead to reduced MTTF and higher leakage power)</p>
    <p>Traditional Dynamic Thermal Management (DTM) techniques used for emergency situations, not for normal runtime</p>
    <p>[2] H. Esmaeilzadeh, et al. Dark Silicon and the End of Multicore Scaling. In Proc. ISCA 2011. [3] J. Srinivasan, et al. The Case for Lifetime Reliability-Aware Microprocessors. In Proc. ISCA 2004.</p>
    <p>[1] U. Hoelzle et al. The Datacenter as a Computer [].Morgan and Claypool Publishers, 2009.</p>
  </div>
  <div class="page">
    <p>Rationale</p>
    <p>Common approach in commodity processor scheduling: run to idle  energy efficient, but leads to peaks in power draw and</p>
    <p>temperature [4]</p>
    <p>[4] M. Garrett. Powering Down. ACM Queue, 5(7), 2007.</p>
    <p>Reducing performance can keep temperature under control</p>
  </div>
  <div class="page">
    <p>State of the Art</p>
    <p>Commonly used techniques for DTM:  Dynamic Frequency and Voltage Scaling (DVFS) [5]  Idle-cycle injection [6]</p>
    <p>The Dimetrodon framework [6] exploited the idea of Preventive Thermal Management (PTM) for long-term thermal management through idle-cycle injection  Reduce average power draw by injecting idle-cycles with a</p>
    <p>certain probability, resulting in cooler (but longer) execution</p>
    <p>[5] N. Gupta and R. Mahapatra. Temperature Aware Energy Management for Real-Time Scheduling. In 12th ISQED, 2011. [6] P. Bailis et al. Dimetrodon: Processor-level Preventive Thermal Management via Idle Cycle Injection. In Proc. DAC 2011.</p>
    <p>Open-loop control (no temperature set point)</p>
    <p>Performance traded for cooler</p>
    <p>execution (but can we afford it?) [6]</p>
  </div>
  <div class="page">
    <p>Methodology  Key Ideas</p>
    <p>Use closed-loop control to drive idle-cycle injection, triggering low power mode (C-states) and reduce temperature  Users specify a temperature set-point  A controller decides how much idle time is needed</p>
    <p>Also account for performance and Service-Level Agreements (SLAs)  Selectively charge SLA-bound tasks for the idle time, so as to</p>
    <p>avoid breaking contracts  Drive tasks priorities to meet QoS requirements</p>
    <p>Coordinate thermal and performance control</p>
  </div>
  <div class="page">
    <p>Methodology  Overview</p>
    <p>[7] F. Sironi et al. Metronome: operating system level performance management via self-adaptive computing. In Proc. DAC 2012.</p>
    <p>Observe-Decide-Act (ODA) control loops [7] for closed-loop control</p>
  </div>
  <div class="page">
    <p>Thermal Model and Controller</p>
    <p>We assume the following thermal model, per core i</p>
    <p>Ti(k+1) = Ti(k) + i(k)idle i(k)</p>
    <p>i is an unknown parameter; we estimate it with an Exponential Weighted Average (EWA) adaptive filter:</p>
    <p>i(k)= i (k)  =0 =</p>
    <p>T T k j</p>
    <p>i (k )</p>
    <p>ej=0</p>
    <p>We use a standard control-theoretical deadbeat controller:</p>
    <p>idlei(k) = (1/i(k))  (T  T k  j )</p>
  </div>
  <div class="page">
    <p>Performance Model and Controller</p>
    <p>We assume the following performance model, per application i</p>
    <p>ri(k+1) = ri(k) + i(k)prio i(k)</p>
    <p>i is an unknown parameter; we estimate it with an Exponential Weighted Average (EWA) adaptive filter:</p>
    <p>i(k) = i (k)  =0 =</p>
    <p>r r k j</p>
    <p>i (k )</p>
    <p>ej=0</p>
    <p>We use a standard control-theoretical deadbeat controller:</p>
    <p>prio i(k) = (1/i(k))  (r  r k  j )</p>
  </div>
  <div class="page">
    <p>Performance  Temperature Trade Off</p>
    <p>We devised a simple heuristics to couple thermal and performance control  Respecting SLAs has the priority: tasks of applications not</p>
    <p>meeting their QoS always have precedence over the idle task</p>
    <p>Idle time is charged to tasks of non SLA-bound applications or to those currently meeting their QoS</p>
  </div>
  <div class="page">
    <p>Implementation Details</p>
    <p>We realized a port of the Heart Rate Monitor (HRM) [7] to FreeBSD 7.2 to get throughput measurements  Throughput is measured on 1 second Moving Averages (MAs) Processor temperature is measured on a per-core base by reading the appropriate Model Specific Register (MSR) with a high-priority kernel thread The thermal and performance controllers run with a period of 100ms, and the 4.4BSD scheduler was modified to set priorities and schedule the idle task as computed by the controllers</p>
    <p>[7] F. Sironi et al. Metronome: operating system level performance management via self-adaptive computing. In Proc. DAC 2012.</p>
  </div>
  <div class="page">
    <p>Thermal-Aware Policy Evaluation</p>
    <p>Intel Core i7-990X six-core processor, FreeBSD 7.2, applications from the PARSEC 2.1 benchmark suite [8] We evaluated the thermal-aware policy alone and compared it with Dimetrodon (no performance control in this experiment)  Dimetrodon was run and resulting temperature was recorded  DPTM temperature goal set to Dimetrodon outcome</p>
    <p>[8] C. Bienia. Benchmarking Modern Multiprocessors. PhD thesis, Princeton University, 2011..</p>
  </div>
  <div class="page">
    <p>Thermal-Aware Policy Sample Run</p>
    <p>Blackscholes benchmark application, six-threaded</p>
  </div>
  <div class="page">
    <p>DPTM Framework Evaluation - Setup</p>
    <p>Intel Core i7-870 quad-core processor @2.93 GHz, FreeBSD 7.2, applications from the PARSEC 2.1 benchmark suite [7] This time, both the thermal and performance control are active, coordinated by the chosen heuristics Four multithreaded applications in execution at the same time  One application is bound to an SLA on performance  The thermal-aware policy is active towards a temperature set</p>
    <p>point</p>
    <p>[7] C. Bienia. Benchmarking Modern Multiprocessors. PhD thesis, Princeton University, 2011..</p>
  </div>
  <div class="page">
    <p>Results  DPTM Framework</p>
    <p>Four instances of the Swaptions benchmark, each four-threaded</p>
  </div>
  <div class="page">
    <p>Discussion and Future Work</p>
    <p>The DPTM framework couples thermal and performance management, allowing to reduce temperature while respecting SLAs The closed-loop thermal control policy overcomes limitations of Dimetrodon, allowing a goal-oriented approach We show the soundness of the methodology; refinements are possible:  Improve the thermal model to account for thermal interactions</p>
    <p>among cores  Improve the idle-cycle injection mechanism to act evenly on</p>
    <p>multithreaded applications  Improve the performance model  Try different coupling strategies (e.g., for managing situations of</p>
    <p>resources scarceness)</p>
  </div>
  <div class="page">
    <p>A Framework for Thermal and Performance Management</p>
    <p>{bartolini, sironi, cattaneo, sciuto, santambrogio}@elet.polimi.it, martina.maggio@control.lth.se</p>
    <p>Thats All, Folks</p>
    <p>Davide B. Bartolini, Filippo Sironi, Martina Maggio, Riccardo Cattaneo, Donatella Sciuto, Marco D. Santambrogio</p>
    <p>Politecnico di Milano, Lund University</p>
  </div>
</Presentation>
