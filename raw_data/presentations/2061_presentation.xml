<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PRACTICAL ALWAYS-ON TAINT</p>
    <p>TRACKING FOR MOBILE DEVICES</p>
    <p>Justin Paupore*</p>
    <p>Earlence Fernandes*</p>
    <p>Atul Prakash*</p>
    <p>Sankardas Roy</p>
    <p>Xinming Ou</p>
    <p>*University of Michigan</p>
    <p>Kansas State University</p>
    <p>HotOS XV, Kartause Ittingen, Switzerland | May 20, 2015</p>
  </div>
  <div class="page">
    <p>Mobile Malware: A Growing Problem 2</p>
  </div>
  <div class="page">
    <p>Mobile Malware: A Growing Problem</p>
    <p>Most users get apps</p>
    <p>through centralized</p>
    <p>app stores</p>
    <p>App store vendors</p>
    <p>want to detect and</p>
    <p>remove malware</p>
  </div>
  <div class="page">
    <p>Example: Bouncer</p>
    <p>Google Play malware detection engine</p>
    <p>Apps are scanned on submission</p>
    <p>Static analysis</p>
    <p>Dynamic sandboxing</p>
    <p>Problem: can be detected and evaded [Oberheide</p>
    <p>and Miller, SummerCon 12]</p>
  </div>
  <div class="page">
    <p>Better solution: on-device analysis</p>
    <p>Observe in the wild behavior</p>
    <p>Google already does this, to some degree</p>
    <p>How? Theyre not telling</p>
    <p>All we know: Not a framework modification</p>
  </div>
  <div class="page">
    <p>What if we want more?</p>
    <p>Inspecting permissions used isnt enough</p>
    <p>Nor is pure static analysis [Wang et al, SEC13]</p>
    <p>Better idea: monitor how data is used at runtime</p>
    <p>Solution: Taint tracking!</p>
    <p>As made famous on Android by TaintDroid [Enck et al, OSDI10]</p>
  </div>
  <div class="page">
    <p>The Problem with TaintDroid</p>
    <p>Adds ~15% overhead to all Java code on device</p>
    <p>even trusted system processes</p>
    <p>even the 99% of code that never touches sensitive</p>
    <p>data [Wei and Lie, SPSM14]</p>
    <p>Problem: latency-sensitive code (UI drawing, audio,</p>
    <p>games, )</p>
  </div>
  <div class="page">
    <p>The Proposal</p>
    <p>Take advantage of mobile phone ecosystem</p>
    <p>Push heavy static analysis to app store owner</p>
    <p>Instrument app code during install</p>
    <p>Use and abuse ASIC peripherals to accelerate tracking</p>
  </div>
  <div class="page">
    <p>Static analysis</p>
    <p>Runs in the cloud when an app is submitted</p>
    <p>Identifies:</p>
    <p>Known-safe sections of app code</p>
    <p>Minimal set of instructions to track for taint propagation</p>
    <p>Signed by store owner, delivered with app</p>
  </div>
  <div class="page">
    <p>Runtime requirements</p>
    <p>Need to know when identified instructions run, and</p>
    <p>propagate taint</p>
    <p>Traditionally done in-line</p>
    <p>Doesnt have to be! [ShadowReplica, Jee et al,</p>
    <p>CCS13]</p>
  </div>
  <div class="page">
    <p>Runtime requirements</p>
    <p>For out-of-line propagation:</p>
    <p>Enqueue events inline</p>
    <p>Dequeue later/in parallel, and reconstruct flow</p>
    <p>Speed of FIFO enqueue critical</p>
    <p>With two things, enqueue becomes nearly free:</p>
    <p>Ahead-of-time compilation</p>
    <p>Embedded Trace Macrocell (ETM)</p>
  </div>
  <div class="page">
    <p>Ahead-of-time compilation</p>
    <p>Compile machine-code version of bytecode on</p>
    <p>device</p>
    <p>Android example: Android Runtime (ART)</p>
    <p>First included in 4.4, default in 5.0+</p>
    <p>Allows each bytecode instance to have independent</p>
    <p>machine code</p>
  </div>
  <div class="page">
    <p>Embedded Trace Macrocell (ETM)</p>
    <p>ARM hardware peripheral  part of CPU core</p>
    <p>Designed for full-speed program tracing, read out</p>
    <p>by JTAG</p>
    <p>Can also be read out by CPU</p>
    <p>Included in nearly every ARM CPU in the past 10+</p>
    <p>years (original spec released 1999)</p>
  </div>
  <div class="page">
    <p>Embedded Trace Macrocell (ETM)</p>
    <p>One ETM per core</p>
    <p>Executed instructions logged to trace bus</p>
    <p>PC, address, data</p>
    <p>Filterable</p>
    <p>Trace buffer (ETB) captures events</p>
    <p>Buffer memory-mapped</p>
  </div>
  <div class="page">
    <p>Using ETM as a FIFO</p>
    <p>During AOT compilation, emit marker instructions</p>
    <p>Store to a designated magic address</p>
    <p>NOP from apps perspective</p>
    <p>Value stored can encode payload</p>
    <p>At runtime:</p>
    <p>Configure ETM filters to recognize magic address</p>
    <p>Run app normally</p>
    <p>ETM generates events when marker instructions executed</p>
    <p>Read events from another core and reconstruct program flow</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>x = null; if (evil) { x = secret;</p>
    <p>} leak(x);</p>
  </div>
  <div class="page">
    <p>No leak</p>
    <p>Example</p>
    <p>ETM</p>
    <p>ETB</p>
    <p>(0x20, null)</p>
    <p>CPU0 CPU1</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>ETM</p>
    <p>ETB</p>
    <p>(0x14, private) (0x20, private)</p>
    <p>CPU0 CPU1</p>
    <p>Leak</p>
    <p>detected!</p>
  </div>
  <div class="page">
    <p>Design Benefits</p>
    <p>Minimal overhead [~O(1 store)] for instructions that</p>
    <p>need tracking</p>
    <p>Zero overhead for instructions that dont</p>
    <p>Easily enabled/disabled on the fly</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Taint tracking on ARM smartphones can be</p>
    <p>performed with low latency cost</p>
    <p>Allows in-the-field usage information to be collected</p>
    <p>and fed back to app store owners, without unduly</p>
    <p>burdening the user</p>
  </div>
  <div class="page">
    <p>Justin Paupore &lt;jpaupore@umich.edu&gt;</p>
    <p>THANK YOU!</p>
    <p>QUESTIONS?</p>
    <p>Practical Always-on Taint Tracking for Mobile Devices | May 20, 2015</p>
  </div>
</Presentation>
