<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rethink the Sync!Rethink the Sync!</p>
    <p>Edmund B. Nightingale</p>
    <p>Kaushik Veeraraghavan</p>
    <p>Peter M. Chen</p>
    <p>Jason Flinn</p>
    <p>University of Michigan</p>
  </div>
  <div class="page">
    <p>Sync or Sync or AsyncAsync??</p>
    <p>Desktop file systems typically use asynchronous I/O</p>
    <p>Advantages of synchronous file I/O:  Cleaner abstraction  Any output seen by user is durable  Application programming is easier</p>
    <p>Disadvantage of synchronous file I/O: Slow!</p>
    <p>Need new model: visible synchrony</p>
  </div>
  <div class="page">
    <p>Visible SynchronyVisible Synchrony</p>
    <p>Synchronous file operation guarantees:  Ordering: if A happens before B, effects of B not visible</p>
    <p>unless the effects of A also visible.</p>
    <p>Durability: any operation that is observed to complete is already committed to disk.</p>
    <p>Current OSes provide guarantees to applications.  Do not return from system call until data committed.</p>
    <p>Idea: provide guarantees to external observers instead!</p>
  </div>
  <div class="page">
    <p>Ordering and DurabilityOrdering and Durability</p>
    <p>Ordering: commit operations in temporal order  Use ext3 in data journaling mode.</p>
    <p>Durability:  File system operations return immediately but taint process.</p>
    <p>OS buffers (uncommitted) output from tainted processes.</p>
    <p>When data commits, OS removes taint, releases output.</p>
    <p>OS tracks taint spread through IPC, shared memory, etc.</p>
  </div>
  <div class="page">
    <p>Synchronous I/OSynchronous I/O Application OS</p>
    <p>Output: wrote B</p>
    <p>Write A</p>
    <p>Write B</p>
    <p>Commit A</p>
    <p>Commit B</p>
    <p>Slow! Many synchronous disk writes</p>
  </div>
  <div class="page">
    <p>Visibly Synchronous I/OVisibly Synchronous I/O Application OS</p>
    <p>Output: Wrote B</p>
    <p>Write B Commit A</p>
    <p>Commit B</p>
    <p>Write A</p>
    <p>Much faster (with a few more tricks)</p>
    <p>Buffer until committed</p>
  </div>
  <div class="page">
    <p>Results: Linux 2.4 kernelResults: Linux 2.4 kernel</p>
    <p>(8%)204x16x--- (overhead) 8.8 s. 1661 s. 132 s.8.1 s.PostMark (4%)12x(59%) ---(overhead) 1:5021:272:201:46Apache Build YesYesNot power lossNoafter fsync? YesYesNot power lossNoDurable?</p>
    <p>Synchrony(barriers)(default) VisibleSyncSyncAsync</p>
    <p>Visible synchrony: durability with low overhead! Users see behavior equivalent to synchronous I/O No application modification required.</p>
  </div>
  <div class="page">
    <p>Latency vs. ThroughputLatency vs. Throughput Application OS</p>
    <p>Output: Wrote B</p>
    <p>Write B</p>
    <p>Write A</p>
    <p>Dont commit yet! User not waiting For output</p>
    <p>Commit A+B</p>
    <p>Group commit when output buffered</p>
    <p>Idea: Optimize for latency or throughput based upon visibility.</p>
    <p>Buffer until committed</p>
  </div>
</Presentation>
