<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FiE on Firmware Finding Vulnerabilities in Embedded Systems</p>
    <p>using Symbolic Execution</p>
    <p>Drew Davidson Ben Moench Somesh Jha</p>
    <p>Thomas Ristenpart</p>
  </div>
  <div class="page">
    <p>Symbolic execution tailored to embedded firmware  Detects common firmware</p>
    <p>vulnerabilities  Deals with domain-specific</p>
    <p>challenges  Able to verify small programs</p>
    <p>Tested on 99 programs  Found 22 bugs  Verified memory safety for 52</p>
    <p>programs</p>
    <p>FiE in a Nutshell</p>
  </div>
  <div class="page">
    <p>[Frisby et al., 2012]</p>
    <p>Example Attack: WOOT 2012</p>
    <p>Encrypted card data</p>
  </div>
  <div class="page">
    <p>[Frisby et al., 2012]</p>
    <p>Command</p>
    <p>Secret Key</p>
    <p>Example Attack: WOOT 2012</p>
    <p>Buffer Overflow!</p>
  </div>
  <div class="page">
    <p>Embedded Systems: Lots of Attacks</p>
  </div>
  <div class="page">
    <p>Embedded Systems: Lots of Attacks</p>
    <p>Source code analysis is helpful on desktop</p>
    <p>Could be transitioned to</p>
    <p>firmware</p>
  </div>
  <div class="page">
    <p>Represents program input as sets of constraints</p>
    <p>Explores multiple feasible paths for bugs</p>
    <p>Provide detailed trace to vulnerability</p>
    <p>KLEE  Popular, mature tool  Average &gt; 90% line</p>
    <p>coverage  Finds memory safety</p>
    <p>violations</p>
    <p>Symbolic Execution</p>
    <p>X  0</p>
    <p>X &gt; 0 X &lt; 0</p>
    <p>X  0</p>
    <p>X &lt; 0</p>
  </div>
  <div class="page">
    <p>Represents program input as sets of constraints</p>
    <p>Explores multiple feasible paths for bugs</p>
    <p>Provide detailed trace to vulnerability</p>
    <p>KLEE  Popular, mature tool  Average &gt; 90% line</p>
    <p>coverage  Finds memory safety</p>
    <p>violations</p>
    <p>Symbolic Execution</p>
    <p>KLEE</p>
    <p>LLVM bitcode</p>
    <p>C source code</p>
    <p>Clang</p>
    <p>Error trace</p>
  </div>
  <div class="page">
    <p>Why MSP430?  Popular, widely deployed  Security applications  Has clang support</p>
    <p>KLEE ported to 16-bit  Evaluated 99 programs</p>
    <p>12 TI Community  78 Github  8 USB protocol stack  1 Synthetic (cardreader)</p>
    <p>Average instruction coverage for MSP430 &lt; 6%  Most programs &lt; 1%</p>
    <p>KLEE: Performance on MSP430</p>
    <p>LLVM bitcode</p>
    <p>Error trace</p>
    <p>Clang (MSP430)</p>
    <p>Firmware source code (C)</p>
  </div>
  <div class="page">
    <p>Challenges of MSP430 Code</p>
    <p>while (true){</p>
    <p>if ( P1IN)</p>
    <p>len = P1IN;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (! P1IN)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>P1DIR = 0x0;</p>
    <p>- Peripheral access with I/O Ports</p>
  </div>
  <div class="page">
    <p>&gt; 400 variants of MSP430</p>
    <p>Challenges of MSP430 Code</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Challenge #1 Architecture</p>
    <p>Diversity</p>
    <p>- Peripheral access with I/O Ports - Environment interaction via</p>
    <p>implicit memory mapping</p>
  </div>
  <div class="page">
    <p>Challenges of MSP430 Code</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Challenge #2 Peripheral semantics</p>
    <p>Challenge #1 Architecture</p>
    <p>Diversity</p>
    <p>value?</p>
  </div>
  <div class="page">
    <p>Challenges of MSP430 Code</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Challenge #3 Interrupt</p>
    <p>driven programs</p>
    <p>Challenge #2 Peripheral semantics</p>
    <p>Challenge #1 Architecture</p>
    <p>Diversity</p>
  </div>
  <div class="page">
    <p>FiE on Firmware</p>
    <p>LLVM Bitcode</p>
    <p>Error Trace</p>
    <p>Optimized Symbolic</p>
    <p>Execution Engine</p>
    <p>Clang (MSP430)</p>
    <p>Firmware Source Code</p>
    <p>Chip Layout Spec</p>
    <p>Memory Spec</p>
    <p>Interrupt Spec</p>
    <p>Handles over 400 variants of the MSP430</p>
    <p>Bugfinding</p>
    <p>Memory safety (21)</p>
    <p>Peripheral misuse (1)</p>
    <p>Verification (53/99)</p>
    <p>Customizable</p>
  </div>
  <div class="page">
    <p>FiE on Firmware</p>
    <p>LLVM Bitcode</p>
    <p>Error Trace</p>
    <p>Optimized Symbolic</p>
    <p>Execution Engine</p>
    <p>Clang (MSP430)</p>
    <p>Firmware Source Code</p>
    <p>Chip Layout Spec</p>
    <p>Memory Spec</p>
    <p>Interrupt Spec</p>
    <p>Challenge #3 Interrupt</p>
    <p>driven programs</p>
    <p>Challenge #1 Architecture</p>
    <p>Diversity Challenge #2</p>
    <p>Peripheral semantics</p>
    <p>verification</p>
  </div>
  <div class="page">
    <p>FiE on Architecture Diversity</p>
    <p>Memory size</p>
    <p>Memory region types</p>
    <p>Available interrupts</p>
    <p>Variations in layout and capabilities of the microcontroller</p>
  </div>
  <div class="page">
    <p>FiE on Architecture Diversity</p>
    <p>Memory size</p>
    <p>Memory region types</p>
    <p>Available interrupts</p>
    <p>Chip layout spec</p>
    <p>layout 0x10000</p>
    <p>range 0x1080 0x10bf flash</p>
    <p>range 0x10c0 0x10ff flash</p>
    <p>addr P1IN 0x20 1</p>
    <p>interrupt PORT2_ISR check_PORT2</p>
    <p>Domain-specific specification language Flat text file for manual manipulation Script support for msp430-gcc export</p>
    <p>Variations in layout and capabilities of the microcontroller</p>
  </div>
  <div class="page">
    <p>FiE on Memory</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Chip Layout Spec</p>
    <p>addr P1IN 0x20 1</p>
    <p>Memory Library</p>
    <p>P1IN_READ:</p>
    <p>???</p>
  </div>
  <div class="page">
    <p>FiE on Memory</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Chip Layout Spec</p>
    <p>addr P1IN 0x20 1</p>
    <p>Memory Library</p>
    <p>1</p>
    <p>3</p>
    <p>P1IN_READ: fresh_symbolic()</p>
    <p>Assume adversary controls peripherals Allow users to supply custom libraries</p>
    <p>2</p>
  </div>
  <div class="page">
    <p>FiE on Interrupts</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Interrupt Library</p>
    <p>Check_PORT2:</p>
    <p>Interrupts On?</p>
    <p>Port 2 Priority?</p>
    <p>Chip Layout Spec</p>
    <p>interrupt PORT2_ISR check_PORT2</p>
    <p>Adversary controls interrupts Split state at every valid point</p>
  </div>
  <div class="page">
    <p>Challenges and Opportunities</p>
    <p>LLVM Bitcode</p>
    <p>Error Trace</p>
    <p>Optimized Symbolic</p>
    <p>Execution Engine</p>
    <p>Clang (MSP430)</p>
    <p>Firmware Source Code</p>
    <p>Chip Layout Spec</p>
    <p>Memory Spec</p>
    <p>Interrupt Spec</p>
    <p>Challenge #3 Interrupt</p>
    <p>driven programs</p>
    <p>Challenge #1 Architecture</p>
    <p>Diversity Challenge #2</p>
    <p>Peripheral semantics</p>
    <p>verification</p>
  </div>
  <div class="page">
    <p>Challenges and Opportunities</p>
    <p>LLVM Bitcode</p>
    <p>Error Trace</p>
    <p>Optimized Symbolic</p>
    <p>Execution Engine</p>
    <p>Clang (MSP430)</p>
    <p>Firmware Source Code</p>
    <p>Chip Layout Spec</p>
    <p>Memory Spec</p>
    <p>Interrupt Spec</p>
    <p>Verification</p>
    <p>Outside scope of traditional symbolic execution  State space intractable</p>
    <p>Key Insight</p>
    <p>Firmware state space much smaller</p>
    <p>verification</p>
  </div>
  <div class="page">
    <p>FiE on Verification</p>
    <p>while (true){</p>
    <p>if (*0x20)</p>
    <p>len = *0x20;</p>
    <p>_BIS_SR(GIE);</p>
    <p>if (!*0x20)</p>
    <p>strncpy(dst,src,len);</p>
    <p>}</p>
    <p>PORT_2_ISR</p>
    <p>*0x22 = 0x0;</p>
    <p>Infinite program paths Analysis stuck executing already-seen states Prevents verification</p>
  </div>
  <div class="page">
    <p>FiE on Verification</p>
    <p>Log all execution states</p>
    <p>Pruning  Detect redundant states and</p>
    <p>terminate them</p>
    <p>Redundant states; redundant successors</p>
    <p>Smudging  replace frequently-changing</p>
    <p>concrete memory with symbolic</p>
    <p>Complete  May have FPs</p>
  </div>
  <div class="page">
    <p>FiE on Verification</p>
    <p>Log all execution states</p>
    <p>Pruning  Detect redundant states and</p>
    <p>terminate them</p>
    <p>Redundant states; redundant successors</p>
    <p>Smudging  replace frequently-changing</p>
    <p>concrete memory with symbolic</p>
    <p>Complete  May have FPs</p>
    <p>More details in the paper</p>
  </div>
  <div class="page">
    <p>FiE on Firmware</p>
    <p>Optimized Symbolic</p>
    <p>Execution Engine</p>
    <p>Chip Layout Spec</p>
    <p>Memory Spec</p>
    <p>Interrupt Spec</p>
    <p>Challenge #3 Interrupt</p>
    <p>driven programs</p>
    <p>Challenge #1 Architecture</p>
    <p>Diversity</p>
    <p>verification</p>
    <p>Challenge #2 Peripheral semantics</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Amazon EC2  Automated tests</p>
    <p>(scripts available)</p>
    <p>50 minute runs</p>
    <p>Test Versions:  16-bit KLEE</p>
    <p>baseline</p>
    <p>FiE  Symbolic + plugin</p>
    <p>FiE + pruning</p>
    <p>FiE + pruning + smudging</p>
    <p>Corpus: 12 TI Community 1 Synthetic (cardreader) 8 USB protocol stack 78 Github</p>
  </div>
  <div class="page">
    <p>22 bugs across the corpus (smudge)</p>
    <p>Verified manually</p>
    <p>21 found in the MSP430 USB protocol stack</p>
    <p>1 misuse of flash memory</p>
    <p>Emailed developers</p>
    <p>Bugfinding Results</p>
  </div>
  <div class="page">
    <p>Coverage Results</p>
    <p>Mode Average % Coverage</p>
    <p>False Positives</p>
    <p>Verified</p>
    <p>Baseline 5.9 92 0</p>
    <p>Symbolic 71.1 0 7</p>
    <p>Prune 74.4 0 35</p>
    <p>Smudge 79.4 1 53</p>
  </div>
  <div class="page">
    <p>High-Challenge Programs</p>
    <p>FiE does well for small (but still useful!) programs</p>
    <p>For large programs, verification out of reach</p>
    <p>Reduce interrupts fired</p>
    <p>Conservative: interrupts at each instruction</p>
    <p>Relaxed: interrupts at each basic block</p>
    <p>In st</p>
    <p>ru ct</p>
    <p>io n</p>
    <p>C o</p>
    <p>ve ra</p>
    <p>g e</p>
    <p>( %</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>FiE breaks new ground</p>
    <p>Not the final word by far</p>
    <p>One point in analysis design space</p>
    <p>Dynamic testing</p>
    <p>Concolic execution</p>
    <p>Static analysis</p>
    <p>Language Design</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>Summary Initiated work for MSP430 automated bugfinding Modular, conservative symbolic execution Supported verification and bugfinding Download FiE www.cs.wisc.edu/~davidson/fie</p>
    <p>Thanks!</p>
  </div>
  <div class="page">
    <p>While Pruning:</p>
    <p>Check unique values for each memory object</p>
    <p>If above threshold, replace with wildcard (*)</p>
    <p>Makes pruning easier</p>
    <p>Redundant states sooner</p>
    <p>Complete</p>
    <p>May cause false positives</p>
    <p>Q: Smudging example</p>
    <p>Lloop:i = 0</p>
    <p>Lloop:i = 1</p>
    <p>Lloop:i = 2</p>
    <p>Lloop:i = *</p>
    <p>Lend:i = * Lloop:i = *</p>
  </div>
  <div class="page">
    <p>Q: Corpus Code Size</p>
    <p>&lt; 201 LOC</p>
    <p>&gt; 200 LOC</p>
  </div>
  <div class="page">
    <p>Q: Why didnt you find more bugs?</p>
    <p>Its easy to get hobbyist code</p>
    <p>The production code that we do have indicates a problem</p>
    <p>The tractability of hobbyist code indicates an opportunity for deeper analysis</p>
  </div>
  <div class="page">
    <p>Commercial analysis tool</p>
    <p>Static Analysis</p>
    <p>Has an MSP430 target</p>
    <p>License forbids published comparison</p>
    <p>Q: What about Coverity?</p>
  </div>
  <div class="page">
    <p>KLEE is a great tool</p>
    <p>The performance is great</p>
    <p>The code is great</p>
    <p>We use it in a way that it wasnt intended for</p>
    <p>Q: What Does this Mean for KLEE?</p>
  </div>
</Presentation>
