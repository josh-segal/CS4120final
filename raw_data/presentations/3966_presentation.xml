<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Why Events Are A Bad Idea (for high-concurrency servers)</p>
    <p>Rob von Behren, Jeremy Condit and Eric Brewer University of California at Berkeley</p>
    <p>{jrvb,jcondit,brewer}@cs.berkeley.edu http://capriccio.cs.berkeley.edu</p>
    <p>The Stage ! Highly concurrent applications</p>
    <p>! Internet servers (Flash, Ninja, SEDA) ! Transaction processing databases</p>
    <p>! Workload ! Operate near the knee ! Avoid thrashing!</p>
    <p>! What makes concurrency hard? ! Race conditions ! Scalability (no O(n) operations) ! Scheduling &amp; resource sensitivity ! Inevitable overload ! Code complexity</p>
    <p>Ideal</p>
    <p>Peak: some resource at max</p>
    <p>Overload: some resource thrashing</p>
    <p>Load (concurrent tasks)</p>
    <p>Pe rf</p>
    <p>or m</p>
    <p>an ce</p>
  </div>
  <div class="page">
    <p>The Debate ! Performance vs. Programmability</p>
    <p>! Current threads pick one ! Events somewhat better</p>
    <p>! Questions ! Threads vs. Events? ! How do we performance and</p>
    <p>programmability?</p>
    <p>Performance</p>
    <p>E as</p>
    <p>e of</p>
    <p>P ro</p>
    <p>g ra</p>
    <p>m m</p>
    <p>in g</p>
    <p>Current Threads</p>
    <p>Current Threads</p>
    <p>Current Events</p>
    <p>Ideal</p>
    <p>Our Position ! Thread-event duality still holds ! But threads are better anyway</p>
    <p>! More natural to program ! Better fit with tools and hardware</p>
    <p>! Compiler-runtime integration is key</p>
  </div>
  <div class="page">
    <p>The Duality Argument ! General assumption: follow good practices ! Observations</p>
    <p>! Major concepts are analogous ! Program structure is similar ! Performance should be similar</p>
    <p>! Given good implementations!</p>
    <p>! Event handler &amp; queue ! Events accepted ! Send message / await reply ! Wait for new messages</p>
    <p>! Monitors ! Exported functions ! Call/return and fork/join ! Wait on condition variable</p>
    <p>EventsThreads</p>
    <p>Accept Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
    <p>The Duality Argument ! General assumption: follow good practices ! Observations</p>
    <p>! Major concepts are analogous ! Program structure is similar ! Performance should be similar</p>
    <p>! Given good implementations!</p>
    <p>! Event handler &amp; queue ! Events accepted ! Send message / await reply ! Wait for new messages</p>
    <p>! Monitors ! Exported functions ! Call/return and fork/join ! Wait on condition variable</p>
    <p>EventsThreads</p>
    <p>Accept Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
  </div>
  <div class="page">
    <p>The Duality Argument ! General assumption: follow good practices ! Observations</p>
    <p>! Major concepts are analogous ! Program structure is similar ! Performance should be similar</p>
    <p>! Given good implementations!</p>
    <p>! Event handler &amp; queue ! Events accepted ! Send message / await reply ! Wait for new messages</p>
    <p>! Monitors ! Exported functions ! Call/return and fork/join ! Wait on condition variable</p>
    <p>EventsThreads</p>
    <p>Accept Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
    <p>But Events Are Better! ! Recent arguments for events</p>
    <p>! Lower runtime overhead ! Better live state management ! Inexpensive synchronization ! More flexible control flow ! Better scheduling and locality</p>
    <p>! All true but ! No inherent problem with threads! ! Thread implementations can be improved</p>
  </div>
  <div class="page">
    <p>Runtime Overhead ! Criticism: Threads dont perform</p>
    <p>well for high concurrency ! Response</p>
    <p>! Avoid O(n) operations ! Minimize context switch overhead</p>
    <p>! Simple scalability test ! Slightly modified GNU Pth ! Thread-per-task vs.</p>
    <p>single thread ! Same performance!</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>s / S</p>
    <p>ec on</p>
    <p>d</p>
    <p>Concurrent Tasks</p>
    <p>Event-Based Server</p>
    <p>Threaded Server</p>
    <p>Live State Management ! Criticism: Stacks are bad for live state ! Response</p>
    <p>! Fix with compiler help ! Stack overflow vs. wasted space</p>
    <p>! Dynamically link stack frames</p>
    <p>! Retain dead state ! Static lifetime analysis ! Plan arrangement of stack ! Put some data on heap ! Pop stack before tail calls</p>
    <p>! Encourage inefficiency ! Warn about inefficiency</p>
    <p>Live</p>
    <p>Live</p>
    <p>Dead</p>
    <p>Unused</p>
    <p>Thread State (stack)</p>
    <p>Event State (heap)</p>
  </div>
  <div class="page">
    <p>Synchronization ! Criticism: Thread synchronization is heavyweight ! Response</p>
    <p>! Cooperative multitasking works for threads, too! ! Also presents same problems</p>
    <p>! Starvation &amp; fairness ! Multiprocessors ! Unexpected blocking (page faults, etc.)</p>
    <p>! Compiler support helps</p>
    <p>Control Flow ! Criticism: Threads have restricted</p>
    <p>control flow ! Response</p>
    <p>! Programmers use simple patterns ! Call / return ! Parallel calls ! Pipelines</p>
    <p>! Complicated patterns are unnatural ! Hard to understand ! Likely to cause bugs</p>
  </div>
  <div class="page">
    <p>Scheduling</p>
    <p>Task</p>
    <p>Pr og</p>
    <p>ra m</p>
    <p>L oc</p>
    <p>at io</p>
    <p>n</p>
    <p>! Criticism: Thread schedulers are too generic ! Cant use application-specific information</p>
    <p>! Response ! 2D scheduling: task &amp; program location</p>
    <p>! Threads schedule based on task only ! Events schedule by location (e.g. SEDA)</p>
    <p>! Allows batching ! Allows prediction for SRCT</p>
    <p>! Threads can use 2D, too! ! Runtime system tracks current location ! Call graph allows prediction</p>
    <p>Scheduling</p>
    <p>Task</p>
    <p>Pr og</p>
    <p>ra m</p>
    <p>L oc</p>
    <p>at io</p>
    <p>n</p>
    <p>Threads</p>
    <p>! Criticism: Thread schedulers are too generic ! Cant use application-specific information</p>
    <p>! Response ! 2D scheduling: task &amp; program location</p>
    <p>! Threads schedule based on task only ! Events schedule by location (e.g. SEDA)</p>
    <p>! Allows batching ! Allows prediction for SRCT</p>
    <p>! Threads can use 2D, too! ! Runtime system tracks current location ! Call graph allows prediction</p>
  </div>
  <div class="page">
    <p>Scheduling ! Criticism: Thread schedulers are too generic</p>
    <p>! Cant use application-specific information</p>
    <p>! Response ! 2D scheduling: task &amp; program location</p>
    <p>! Threads schedule based on task only ! Events schedule by location (e.g. SEDA)</p>
    <p>! Allows batching ! Allows prediction for SRCT</p>
    <p>! Threads can use 2D, too! ! Runtime system tracks current location ! Call graph allows prediction</p>
    <p>Task</p>
    <p>Pr og</p>
    <p>ra m</p>
    <p>L oc</p>
    <p>at io</p>
    <p>n</p>
    <p>Threads</p>
    <p>Events</p>
    <p>The Proofs in the Pudding ! User-level threads package</p>
    <p>! Subset of pthreads ! Intercept blocking system calls ! No O(n) operations ! Support &gt; 100K threads ! 5000 lines of C code</p>
    <p>! Simple web server: Knot ! 700 lines of C code</p>
    <p>! Similar performance ! Linear increase, then steady ! Drop-off due to poll() overhead</p>
    <p>KnotC (Favor Connections) KnotA (Favor Accept)</p>
    <p>Haboob</p>
    <p>Concurrent Clients</p>
    <p>M bi</p>
    <p>ts /</p>
    <p>se co</p>
    <p>nd</p>
  </div>
  <div class="page">
    <p>Our Big But ! More natural programming model</p>
    <p>! Control flow is more apparent ! Exception handling is easier ! State management is automatic</p>
    <p>! Better fit with current tools &amp; hardware ! Better existing infrastructure ! Allows better performance?</p>
    <p>Control Flow ! Events obscure control flow</p>
    <p>! For programmers and tools</p>
    <p>AcceptHandler(event e) { struct session *s = new_session(e); RequestHandler.enqueue(s);</p>
    <p>} RequestHandler(struct session *s) {</p>
    <p>; CacheHandler.enqueue(s); } CacheHandler(struct session *s) {</p>
    <p>pin(s); if( !in_cache(s) ) ReadFileHandler.enqueue(s); else ResponseHandler.enqueue(s);</p>
    <p>} . . . ExitHandlerr(struct session *s) {</p>
    <p>; unpin(&amp;s); free_session(s); }</p>
    <p>thread_main(int sock) { struct session s; accept_conn(sock, &amp;s); read_request(&amp;s); pin_cache(&amp;s); write_response(&amp;s); unpin(&amp;s);</p>
    <p>}</p>
    <p>pin_cache(struct session *s) { pin(&amp;s); if( !in_cache(&amp;s) )</p>
    <p>read_file(&amp;s); }</p>
    <p>EventsThreads Accept Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
  </div>
  <div class="page">
    <p>Control Flow</p>
    <p>Accept Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
    <p>CacheHandler(struct session *s) { pin(s); if( !in_cache(s) ) ReadFileHandler.enqueue(s); else ResponseHandler.enqueue(s);</p>
    <p>} RequestHandler(struct session *s) {</p>
    <p>; CacheHandler.enqueue(s); } . . . ExitHandlerr(struct session *s) {</p>
    <p>; unpin(&amp;s); free_session(s); } AcceptHandler(event e) {</p>
    <p>struct session *s = new_session(e); RequestHandler.enqueue(s); }</p>
    <p>thread_main(int sock) { struct session s; accept_conn(sock, &amp;s); read_request(&amp;s); pin_cache(&amp;s); write_response(&amp;s); unpin(&amp;s);</p>
    <p>}</p>
    <p>pin_cache(struct session *s) { pin(&amp;s); if( !in_cache(&amp;s) )</p>
    <p>read_file(&amp;s); }</p>
    <p>EventsThreads</p>
    <p>! Events obscure control flow ! For programmers and tools</p>
    <p>Exceptions ! Exceptions complicate control flow</p>
    <p>! Harder to understand program flow ! Cause bugs in cleanup code Accept</p>
    <p>Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
    <p>CacheHandler(struct session *s) { pin(s); if( !in_cache(s) ) ReadFileHandler.enqueue(s); else ResponseHandler.enqueue(s);</p>
    <p>} RequestHandler(struct session *s) {</p>
    <p>; if( error ) return; CacheHandler.enqueue(s); } . . . ExitHandlerr(struct session *s) {</p>
    <p>; unpin(&amp;s); free_session(s); } AcceptHandler(event e) {</p>
    <p>struct session *s = new_session(e); RequestHandler.enqueue(s); }</p>
    <p>thread_main(int sock) { struct session s; accept_conn(sock, &amp;s); if( !read_request(&amp;s) )</p>
    <p>return; pin_cache(&amp;s); write_response(&amp;s); unpin(&amp;s);</p>
    <p>}</p>
    <p>pin_cache(struct session *s) { pin(&amp;s); if( !in_cache(&amp;s) )</p>
    <p>read_file(&amp;s); }</p>
    <p>EventsThreads</p>
  </div>
  <div class="page">
    <p>State Management</p>
    <p>CacheHandler(struct session *s) { pin(s); if( !in_cache(s) ) ReadFileHandler.enqueue(s); else ResponseHandler.enqueue(s);</p>
    <p>} RequestHandler(struct session *s) {</p>
    <p>; if( error ) return; CacheHandler.enqueue(s); } . . . ExitHandlerr(struct session *s) {</p>
    <p>; unpin(&amp;s); free_session(s); } AcceptHandler(event e) {</p>
    <p>struct session *s = new_session(e); RequestHandler.enqueue(s); }</p>
    <p>thread_main(int sock) { struct session s; accept_conn(sock, &amp;s); if( !read_request(&amp;s) )</p>
    <p>return; pin_cache(&amp;s); write_response(&amp;s); unpin(&amp;s);</p>
    <p>}</p>
    <p>pin_cache(struct session *s) { pin(&amp;s); if( !in_cache(&amp;s) )</p>
    <p>read_file(&amp;s); }</p>
    <p>EventsThreads Accept Conn.</p>
    <p>Write Response</p>
    <p>Read File</p>
    <p>Read Request</p>
    <p>Pin Cache</p>
    <p>Web Server</p>
    <p>Exit</p>
    <p>! Events require manual state management ! Hard to know when to free</p>
    <p>! Use GC or risk bugs</p>
    <p>Existing Infrastructure ! Lots of infrastructure for threads</p>
    <p>! Debuggers ! Languages &amp; compilers</p>
    <p>! Consequences ! More amenable to analysis ! Less effort to get working systems</p>
  </div>
  <div class="page">
    <p>Better Performance? ! Function pointers &amp; dynamic dispatch</p>
    <p>! Limit compiler optimizations ! Hurt branch prediction &amp; I-cache locality</p>
    <p>! More context switches with events? ! Example: Haboob does 6x more than Knot ! Natural result of queues</p>
    <p>! More investigation needed!</p>
    <p>The Future: Compiler-Runtime Integration</p>
    <p>! Insight ! Automate things event programmers do by hand ! Additional analysis for other things</p>
    <p>! Specific targets ! Dynamic stack growth* ! Live state management ! Synchronization ! Scheduling*</p>
    <p>! Improve performance and decrease complexity</p>
    <p>* Working prototype in threads package</p>
  </div>
  <div class="page">
    <p>Conclusion ! Threads  Events</p>
    <p>! Performance ! Expressiveness</p>
    <p>! Threads &gt; Events ! Complexity / Manageability</p>
    <p>! Performance and Ease of use? ! Compiler-runtime integration is key</p>
    <p>Performance</p>
    <p>E as</p>
    <p>e of</p>
    <p>P ro</p>
    <p>g ra</p>
    <p>m m</p>
    <p>in g</p>
    <p>Current Threads</p>
    <p>Current Threads</p>
    <p>Current Events</p>
    <p>New Threads?</p>
  </div>
</Presentation>
