<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Chanmin Yoon*, Dongwon Kim, Wonwoo Jung, Chulkoo Kang, Hojung Cha</p>
    <p>Dept. of Computer Science</p>
    <p>Yonsei University, Korea</p>
    <p>USENIX ATC 12 2012.06.15</p>
    <p>AppScope: Application Energy Metering Framework for Android Smartphones using Kernel Activity Monitoring</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Mobile Embedded System Lab., Yonsei University 2</p>
    <p>Q) I find it is 100mW when I just run my</p>
    <p>app, and it is 20mW when I do nothing. I</p>
    <p>think 80mW is consumed by my app. But it is</p>
    <p>when I just run app B, so my app also consume 40mW? Which one</p>
    <p>is correct?</p>
    <p>.., So I want to know how to estimate power consumption</p>
    <p>correctly?</p>
    <p>A) only use the radios when necessary.</p>
    <p>People want to know power consumption of their apps</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Mobile Embedded System Lab., Yonsei University 3</p>
    <p>Application/Component Power Metering</p>
    <p>App. Developer</p>
    <p>System Software Developer</p>
    <p>End User</p>
    <p>Why application/component energy information is valuable?</p>
  </div>
  <div class="page">
    <p>Hardware Component Usage</p>
    <p>Challenge</p>
    <p>Mobile Embedded System Lab., Yonsei University 4</p>
    <p>How can we estimate</p>
    <p>Application Energy?</p>
    <p>=</p>
    <p>#</p>
    <p>=0</p>
    <p>Power coefficient</p>
    <p>value</p>
    <p>Utilization</p>
    <p>Activated duration</p>
    <p>Power Models</p>
    <p>Linear regression models a. MANTIS b. Lasso regression c. Others</p>
    <p>Non-linear regression models a. Exponential b. SVM c. Others</p>
    <p>Finite-state machine models  System call-based</p>
    <p>Utilization-based Model</p>
  </div>
  <div class="page">
    <p>Conventional methods to get Hardware component usage</p>
    <p>Challenge</p>
    <p>Mobile Embedded System Lab., Yonsei University 5</p>
    <p>How can we estimate</p>
    <p>Application Energy?</p>
    <p>Reading hardware performance counter a. Very accurate b. Dependency on processor architecture</p>
    <p>Reading /proc , /sys file system a. Update rate problem</p>
    <p>e.g., CPU utilizations/frequencies b. GPS, display, cellular ?</p>
    <p>Using BatteryStat class a. Update rate problem b. Information granularity problem c. Its a Java class</p>
    <p>Limitations Accuracy</p>
    <p>Granularity Real-time</p>
  </div>
  <div class="page">
    <p>Objectives</p>
    <p>Online and autonomous estimation in real-time</p>
    <p>No external measurement device</p>
    <p>Fine-grained energy consumption information</p>
    <p>Process &amp; hardware component-level granularity</p>
    <p>System portability</p>
    <p>No modification in system software</p>
    <p>Mobile Embedded System Lab., Yonsei University 6</p>
  </div>
  <div class="page">
    <p>The AppScope Framework</p>
    <p>Mobile Embedded System Lab., Yonsei University 7</p>
    <p>Estimation</p>
    <p>Result</p>
    <p>Event DetectorApplication KernelAndroid</p>
    <p>process 1</p>
    <p>process 2</p>
    <p>process n</p>
    <p>.. .</p>
    <p>binder</p>
    <p>c/c++</p>
    <p>libraries H/W</p>
    <p>drivers</p>
    <p>binder</p>
    <p>driver</p>
    <p>Android API call</p>
    <p>Binder IPC data</p>
    <p>Request to use H/W</p>
    <p>by system call</p>
    <p>Kernel Activity Monitoring</p>
    <p>binder_ioctl(), ioctl(), socket(), read(), write(), ...</p>
    <p>Hardware Component Usage</p>
    <p>Analyzer</p>
    <p>Energy</p>
    <p>Consumption</p>
    <p>CPU Display Wi-Fi Cellular GPS</p>
    <p>Component Power Models</p>
    <p>Fuel-gauge</p>
    <p>IC External</p>
    <p>Devices</p>
    <p>AppScope employs the DevScopes power model</p>
    <p>,</p>
  </div>
  <div class="page">
    <p>DevScope (CODES+ISSS 2012)</p>
    <p>Mobile Embedded System Lab., Yonsei University 8</p>
    <p>F u</p>
    <p>e l-g</p>
    <p>a u</p>
    <p>g e</p>
    <p>IC</p>
    <p>DevScope</p>
    <p>Component Controller</p>
    <p>Timing Controller</p>
    <p>Fuel-gauge IC Event</p>
    <p>Monitor</p>
    <p>Power Model</p>
    <p>Generator</p>
    <p>H/W Components</p>
    <p>CPU Display Wi-Fi Cellular GPS</p>
    <p>Battery</p>
    <p>Component Power Model</p>
    <p>Online modeling  Android application  Assume built-in fuel-gauge IC</p>
    <p>Non-intrusive power modeling</p>
    <p>Probe OS, H/W component  Monitor fuel-gauge IC  Component-specific  Training set generation</p>
    <p>- Workload - Control scenario</p>
  </div>
  <div class="page">
    <p>Kernel Activity Monitoring</p>
    <p>Mobile Embedded System Lab., Yonsei University 9</p>
    <p>t</p>
    <p>How to detect hardware component operation?  Event-driven approach</p>
    <p>Event of component operation</p>
    <p>Duration/Utilization of operation</p>
  </div>
  <div class="page">
    <p>AppScope Implementation with Kprobes</p>
    <p>Mobile Embedded System Lab., Yonsei University 10</p>
    <p>Kernel path</p>
    <p>Hooking Point Probe Handler 0x81808c144 INT03 Break</p>
    <p>End</p>
    <p>Instrumentation routine</p>
    <p>Return to original path</p>
    <p>Event detector</p>
    <p>binder_ioctl()  binder_transaction()  cpufreq_cpu_put()  sched_switch()  dev_queue_xmit()  netif_rx()</p>
    <p>Hardware Component Usage Analyzer</p>
    <p>CPU frequency/utilization  WiFi transmission packet</p>
    <p>rate  LCD display duration  GPS activated duration  3G network connection</p>
    <p>type</p>
    <p>System calls  Kernel functions  Binder calls</p>
    <p>Parameters  IPC data</p>
  </div>
  <div class="page">
    <p>Hardware Component Usage Analyzer</p>
    <p>Mobile Embedded System Lab., Yonsei University 11</p>
    <p>Linux Kernel</p>
    <p>CPU Wi-Fi Cellular Display GPS</p>
    <p>Governor Interface Network Interface Binder Driver</p>
    <p>H/W Component Usage Analyzer</p>
    <p>Event</p>
    <p>Transfered</p>
    <p>Packet</p>
    <p>Rates</p>
    <p>Utilization/</p>
    <p>Frequency</p>
    <p>Power</p>
    <p>States</p>
    <p>Transition</p>
    <p>Foreground</p>
    <p>Duration</p>
    <p>Activation</p>
    <p>Duration</p>
    <p>Analyze binder IPC data Analyze kernel functions</p>
  </div>
  <div class="page">
    <p>Why analyzing the Binder IPC?</p>
    <p>Mobile Embedded System Lab., Yonsei University 12</p>
    <p>User space  3G Radio connection type  Not available in kernel</p>
    <p>Binder driver  Binder driver works in kernel  Can probe IPC data</p>
    <p>Hooking by Kprobes</p>
    <p>Analyze RPC data to obtain radio</p>
    <p>connection type</p>
  </div>
  <div class="page">
    <p>Inspecting Binder IPC data</p>
    <p>Mobile Embedded System Lab., Yonsei University 13</p>
    <p>Binder IPC Data</p>
    <p>handle</p>
    <p>RPC Data</p>
    <p>RPC Code</p>
    <p>Protocol</p>
    <p>Service Server</p>
    <p>Service</p>
    <p>foo( )</p>
    <p>{</p>
    <p>}</p>
    <p>Binder IPC Command</p>
    <p>Binder Driver (/dev/binder)</p>
    <p>Hardware</p>
    <p>Operation</p>
  </div>
  <div class="page">
    <p>Hardware Component Usage Analysis (1)</p>
    <p>Mobile Embedded System Lab., Yonsei University 14</p>
    <p>P a</p>
    <p>c k e</p>
    <p>t</p>
    <p>tr a</p>
    <p>n s m</p>
    <p>it ti n</p>
    <p>g</p>
    <p>dev_queue_xmit()/netif_rx()</p>
    <p>Time(s)</p>
    <p>Time (tick)</p>
    <p>Event Detector Kernel function calls</p>
    <p>cpufreq_cpu_put()</p>
    <p>sched_switch()</p>
    <p>F re</p>
    <p>q u</p>
    <p>e n</p>
    <p>c y</p>
    <p>c h</p>
    <p>a n</p>
    <p>g in</p>
    <p>g</p>
    <p>P ro</p>
    <p>c e</p>
    <p>s s</p>
    <p>s w</p>
    <p>it c h</p>
    <p>in g</p>
    <p>Time (tick)Timing</p>
    <p>synchronization</p>
    <p>Utilization (%)</p>
    <p>AppScope</p>
    <p>Kernel</p>
    <p>Process 1</p>
    <p>Process 2</p>
    <p>Process 3</p>
    <p>H/W Component Usage Analyzer</p>
    <p>WiFi  DAI layer</p>
    <p>CPU  DFVS governor</p>
  </div>
  <div class="page">
    <p>Hardware Component Usage Analysis (2)</p>
    <p>Mobile Embedded System Lab., Yonsei University 15</p>
    <p>N e</p>
    <p>tw o</p>
    <p>rk</p>
    <p>c o</p>
    <p>n n</p>
    <p>e c ti o</p>
    <p>n t y p</p>
    <p>e</p>
    <p>Event Detector Binder RPC</p>
    <p>precedure</p>
    <p>G P</p>
    <p>S o</p>
    <p>n /o</p>
    <p>ff e</p>
    <p>v e</p>
    <p>n t</p>
    <p>L o</p>
    <p>c a</p>
    <p>ti o</p>
    <p>n r</p>
    <p>e q</p>
    <p>u e</p>
    <p>s t</p>
    <p>AppScope</p>
    <p>Process 1</p>
    <p>Process 2</p>
    <p>Process 3</p>
    <p>Android Kernel</p>
    <p>F o</p>
    <p>re g</p>
    <p>ro u</p>
    <p>n d</p>
    <p>A c ti v it y c</p>
    <p>h a</p>
    <p>n g</p>
    <p>in g</p>
    <p>Time (s)</p>
    <p>IDLE</p>
    <p>RIL: RRC state transition</p>
    <p>FACHDCHFACH</p>
    <p>Time (s)</p>
    <p>ActivityManager:</p>
    <p>Foreground activity changing</p>
    <p>LocationManager: loc_api()</p>
    <p>Time (s)</p>
    <p>GPS_ONGPS_OFF GPS_OFF</p>
    <p>Time (s)</p>
    <p>Number of location requests</p>
    <p>H/W Component Usage Analyzer</p>
    <p>GPS usage</p>
    <p>Display</p>
    <p>usage</p>
    <p>RRC state transition</p>
    <p>Display  Activity Manager IPC data</p>
    <p>GPS  loc_api()  LocationManager IPC data</p>
  </div>
  <div class="page">
    <p>Evaluation (1)</p>
    <p>Component Usage Monitoring</p>
    <p>Energy Metering Validation</p>
    <p>Overhead Analysis</p>
    <p>Real Application Energy Metering</p>
    <p>Hardware event detection</p>
    <p>Hardware usage statistics</p>
    <p>Granularity of information</p>
    <p>Accuracy of power metering</p>
    <p>CPU overhead  Power overhead</p>
    <p>Case Study  Error analysis</p>
    <p>6 test apps  Pre-defined</p>
    <p>workload  Workload</p>
    <p>scheduling</p>
    <p>DevScope power model</p>
    <p>Per UID  Per Component  Vs. Monsoon</p>
    <p>Loaded case  Unloaded case</p>
    <p>Angry Birds  Skype (WiFi)  Browser (WiFi)  Browser (3G)  Google Maps</p>
    <p>Mobile Embedded System Lab., Yonsei University 16</p>
  </div>
  <div class="page">
    <p>Evaluation (2)</p>
    <p>Development environments</p>
    <p>Linux kernel 2.6.35.7</p>
    <p>SystemTap 1.3 (also uses Kprobes)</p>
    <p>Android platform 2.3</p>
    <p>Device</p>
    <p>HTC Google Nexus One  Qualcomm QSD 8250 Snapdragon 1GHz</p>
    <p>3.7-inch Super LCD display</p>
    <p>MAXIM DS2784 Fuel-gauge-IC</p>
    <p>External measurement device  The Monsoon Power Monitor</p>
    <p>Mobile Embedded System Lab., Yonsei University 17</p>
  </div>
  <div class="page">
    <p>1 Master and 5 Slave applications</p>
    <p>Test Scenario</p>
    <p>Mobile Embedded System Lab., Yonsei University 18</p>
    <p>Master</p>
    <p>Slave 1</p>
    <p>Slave 2</p>
    <p>Slave 3 Slave 5</p>
    <p>Slave 4</p>
    <p>GPS LCD WiFi CPU 3G</p>
    <p>t 0 20 40 60 80 100 120 140 160 180 200 220</p>
  </div>
  <div class="page">
    <p>Component Usage Monitoring (1)</p>
    <p>Mobile Embedded System Lab., Yonsei University 19</p>
    <p>GPS LCD WiFi CPU 3G</p>
    <p>t 0 20 40 60 80 100 120 140 160 180 200 220</p>
    <p>Medium frequency (766/576 Mhz) due to OnDemand policy</p>
  </div>
  <div class="page">
    <p>Component Usage Monitoring (2)</p>
    <p>Mobile Embedded System Lab., Yonsei University 20</p>
    <p>GPS LCD WiFi CPU 3G</p>
    <p>t 0 20 40 60 80 100 120 140 160 180 200 220</p>
    <p>Packet rate is 100 pps for 20 secs</p>
    <p>System uses GPS for 2 ~ 4.5 sec</p>
  </div>
  <div class="page">
    <p>Component Usage Monitoring (3)</p>
    <p>Mobile Embedded System Lab., Yonsei University 21</p>
    <p>GPS LCD WiFi CPU 3G</p>
    <p>t 0 20 40 60 80 100 120 140 160 180 200 220</p>
    <p>System transmits some data Turned on</p>
    <p>Activity change occurs in ActivityManager</p>
  </div>
  <div class="page">
    <p>Power Model for Google Nexus One (N1)</p>
    <p>Mobile Embedded System Lab., Yonsei University 22</p>
    <p>Component-specific</p>
    <p>DevScope Power Models</p>
  </div>
  <div class="page">
    <p>Energy Metering Validation (1)</p>
    <p>Mobile Embedded System Lab., Yonsei University 23</p>
    <p>system processes</p>
    <p>System automatically activated the 3G interface after WiFi off. But, AppScope cannot detect this.</p>
    <p>Limitation of CPU power model in AppScope(cache memory, I/O operation, , ?)</p>
    <p>Monsoon</p>
  </div>
  <div class="page">
    <p>Overhead Analysis</p>
    <p>Mobile Embedded System Lab., Yonsei University 24</p>
    <p>8.4J energy overhead for 240 seconds  About 2.1% CPU overhead on average</p>
  </div>
  <div class="page">
    <p>Real Application Energy Metering (1)</p>
    <p>Mobile Embedded System Lab., Yonsei University 25</p>
    <p>Skype + WiFi Google Maps</p>
    <p>Browser + WiFi Browser + 3G</p>
    <p>Error is caused by timer bug in SystemTap</p>
  </div>
  <div class="page">
    <p>Real Application Energy Metering (2)</p>
    <p>Mobile Embedded System Lab., Yonsei University 26</p>
    <p>Angry Birds</p>
    <p>StabilityTest for GPU</p>
    <p>GPU error</p>
    <p>GPU mismodeling</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Processor power modeling</p>
    <p>No consideration on GPU</p>
    <p>Do not cope with multi-core processor architecture</p>
    <p>No consideration on memory component  CPU-bound job vs. Memory-bound job</p>
    <p>Tail-state energy estimation</p>
    <p>Limitation of linear power model (c.f. FSM power model)</p>
    <p>Hardware components</p>
    <p>OLED display</p>
    <p>Sensors: INS, MIC, Camera,</p>
    <p>Mobile Embedded System Lab., Yonsei University 27</p>
  </div>
  <div class="page">
    <p>Related Tools</p>
    <p>Mobile Embedded System Lab., Yonsei University 28</p>
    <p>Tool Description</p>
    <p>Android Built-in Battery Info</p>
    <p>This does not provide fine-grained power profile</p>
    <p>PowerTop  This is not available for smartphones</p>
    <p>Trepn Profiler [Qualcomm]</p>
    <p>Hardware sensor-based power profiler  This is only available on Snapdragon MDP</p>
    <p>Energy Profiler [Nokia]</p>
    <p>Device power consumption  External APIs for testing a application  Developers solution</p>
    <p>PowerTutor  State of the ART</p>
  </div>
  <div class="page">
    <p>AppScope Vs. PowerTutor</p>
    <p>Mobile Embedded System Lab., Yonsei University 29</p>
    <p>PowerTutor AppScope</p>
    <p>An Android application Linux kernel module</p>
    <p>(+ External power profilers)</p>
    <p>Polling using Android BatteryStat Event-driven using Linux Kprobes</p>
    <p>Application(UID) level Process level</p>
    <p>Reading /proc and /sys, Using Android API,</p>
    <p>Using modified Android framework Monitoring kernel function call</p>
    <p>CPU, LCD/OLED, WIFI , 3G data, GPS, AUDIO</p>
    <p>CPU, LCD, WIFI, 3G data + voice call, GPS</p>
  </div>
  <div class="page">
    <p>The AppScope Project</p>
    <p>Mobile Embedded System Lab., Yonsei University 30</p>
    <p>Power Model DB (DevScope/Vendor)</p>
    <p>AppScopeViewer</p>
    <p>App Developer</p>
    <p>System Software Developer</p>
    <p>Energy Bug Report / Energy Consumption Statistics</p>
    <p>End User</p>
    <p>A p p S c o p e V ie</p>
    <p>w e r I/F</p>
    <p>AppScope</p>
    <p>CPU Display Wi-Fi Cell GPS</p>
    <p>Simple On/Off States</p>
    <p>Component X</p>
    <p>Applications</p>
    <p>AppScope Library</p>
    <p>Single Core LCD OLED USPA LTE Multi Core</p>
  </div>
  <div class="page">
    <p>AppScope Suite</p>
    <p>AppScopeViewer: Real-time Android power profiler</p>
    <p>An Java application providing devices power profile graphically</p>
    <p>Interacts with AppScope in target device</p>
    <p>Easy to use without any external measurement device</p>
    <p>Visit our project homepage</p>
    <p>http://mobed.yonsei.ac.kr/~appscope</p>
    <p>Our release includes binaries of AppScope, kernel image, and AppScopeViewer.</p>
    <p>Currently, AppScope supports Google Nexus One  CPU, 3G, WiFi, LCD, GPS.</p>
    <p>Mobile Embedded System Lab., Yonsei University 31</p>
  </div>
  <div class="page">
    <p>Demo</p>
    <p>Mobile Embedded System Lab., Yonsei University 32</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Contributions</p>
    <p>Provide energy consumption of Android application, being customized to the underlying system software and hardware components in device</p>
    <p>Accurately estimates in real-time (with AppScopeViewer)</p>
    <p>Implemented using module programming to improve portability</p>
    <p>Future work (in progress)</p>
    <p>Supporting diverse hardware components:  OLED display, various sensors,</p>
    <p>Supporting multi-core processor architecture</p>
    <p>GPU power modeling</p>
    <p>Mobile Embedded System Lab., Yonsei University 33</p>
  </div>
  <div class="page">
    <p>Mobile Embedded System Lab., Yonsei University 34</p>
    <p>Thank You</p>
    <p>http://mobed.yonsei.ac.kr/~appscope</p>
  </div>
</Presentation>
