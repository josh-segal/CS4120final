<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Omid, Reloaded Scalable and Highly-Available Transaction Processing</p>
    <p>Ohad Shacham Francisco Perez Sorrosal</p>
    <p>Edward Bortnikov Eshcar Hillel</p>
    <p>Idit Keidar Ivan Kelly Sameer ParanjpyeMatthieu Morel</p>
  </div>
  <div class="page">
    <p>Dynamic indexing at Yahoo!</p>
    <p>Real-Time Search Index</p>
    <p>Indexing Pipeline</p>
    <p>Content Processing Serving</p>
    <p>Q ue</p>
    <p>rie s</p>
    <p>Crawl feed</p>
    <p>Document store</p>
  </div>
  <div class="page">
    <p>Web indexing pipeline</p>
    <p>Crawl Docproc Link</p>
    <p>Analysis Queue</p>
    <p>Crawl schedule</p>
    <p>Content</p>
    <p>Queue Links</p>
    <p>STORM</p>
    <p>HBase</p>
  </div>
  <div class="page">
    <p>Transactional API over HBase Snapshot Isolation Consistency Scalable, Highly Available Database-neutral</p>
    <p>Apache incubator project</p>
    <p>Omid  transactions for key-value store</p>
  </div>
  <div class="page">
    <p>Transactions and snapshot isolation</p>
    <p>Aborts only on write-write conflicts</p>
    <p>Read point Write point</p>
    <p>begin commitread(x) write(y) write(x) read(y)</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Transaction ManagerClient</p>
    <p>Begin/Commit</p>
    <p>Data store Data store Data store Commit table</p>
    <p>Results/Timestamp</p>
    <p>Atomic commit Get commit info</p>
    <p>Read/Write</p>
    <p>Conflict Detection</p>
  </div>
  <div class="page">
    <p>Transaction ManagerClient</p>
    <p>Begin</p>
    <p>Data store Data store Data store Commit table</p>
    <p>t1</p>
    <p>Write (k1, v1, t1) Write (k2, v2, t1)</p>
    <p>Read (k, last committed t &lt; t1)</p>
    <p>(k1, v1, t1) (k2, v2, t1)</p>
    <p>Running example tr = t1</p>
  </div>
  <div class="page">
    <p>Transaction ManagerClient</p>
    <p>Commit: t1, {k1, k2}</p>
    <p>Data store Data store Data store Commit table</p>
    <p>t2</p>
    <p>(k1, v1, t1) (k2, v2, t1)</p>
    <p>Write (t1, t2)</p>
    <p>(t1, t2)</p>
    <p>Running example tr = t1 tc = t2</p>
  </div>
  <div class="page">
    <p>Transaction ManagerClient</p>
    <p>Data store Data store Data store Commit table</p>
    <p>Read (k1, t3)</p>
    <p>(k1, v1, t1) (k2, v2, t1) (t1, t2)</p>
    <p>Read (t1)</p>
    <p>Running example</p>
    <p>tr = t3</p>
  </div>
  <div class="page">
    <p>Transaction ManagerClient</p>
    <p>Data store Data store Data store Commit table</p>
    <p>t2</p>
    <p>(t1, t2)(k1, v1, t1, t2) (k2, v2, t1, t2)</p>
    <p>Remove (t1)</p>
    <p>Post commit tr = t1 tc = t2</p>
    <p>Update commit</p>
    <p>cells</p>
  </div>
  <div class="page">
    <p>Data store (k1, v1, t1, t2)</p>
    <p>Transaction Manager</p>
    <p>Data store Data store Commit table</p>
    <p>Read (k1, t3)</p>
    <p>(k2, v2, t1, t2)</p>
    <p>Commit cells</p>
    <p>Client</p>
    <p>tr = t3</p>
  </div>
  <div class="page">
    <p>High availability</p>
    <p>Transaction ManagerClient</p>
    <p>Begin/Commit/Abort</p>
    <p>Data store Data store Data store Commit table</p>
    <p>Results/Timestamp</p>
    <p>Atomic commit Get commit info</p>
    <p>Read/Write</p>
    <p>Single point of failure</p>
  </div>
  <div class="page">
    <p>Transaction Manager</p>
    <p>Transaction ManagerClient</p>
    <p>Data store Data store Data store Commit table</p>
    <p>Recovery state</p>
    <p>Architecture with HA</p>
  </div>
  <div class="page">
    <p>Transaction Manager</p>
    <p>Split brain</p>
    <p>Transaction ManagerClient</p>
    <p>Data store Data store Data store Commit table</p>
    <p>Recovery state</p>
    <p>Avoid Split Brain</p>
  </div>
  <div class="page">
    <p>Transaction Manager</p>
    <p>Our HA solution</p>
    <p>Transaction ManagerClient</p>
    <p>Data store Data store Data store Commit table</p>
    <p>Recovery state</p>
    <p>ABORT</p>
    <p>Infrequent access</p>
  </div>
  <div class="page">
    <p>No runtime overhead in mainstream execution  Minor overhead after failover</p>
    <p>Leases for leader election  Local lease status check before/after writing to Commit Table</p>
    <p>High availability</p>
  </div>
  <div class="page">
    <p>Omid1 Omid1 Non Durable</p>
    <p>Omid Omid Non Durable</p>
    <p>Tp s</p>
    <p>* 10</p>
  </div>
  <div class="page">
    <p>document inversion duplicate detection out-link processing in-link processing stream to runtime</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>Commit + CT update Begin Compute Read Update</p>
  </div>
  <div class="page">
    <p>Ti m</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Txn / Sec [Batch size]</p>
    <p>Queueing (avg) HBASE write (avg) Network and CD (avg)</p>
    <p>[10000][10000][240][240][50][25][1] [10000]</p>
  </div>
  <div class="page">
    <p>OLTP on-top-of HBase</p>
    <p>Integrating Omid as Phoenix transaction processing engine</p>
    <p>Augment semantics to support secondary index creation</p>
    <p>Augment Omid for concurrent transaction execution</p>
    <p>Integration with Apache Phoenix</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Transactions  important use case in stream processing</p>
    <p>Snapshot Isolation  scalable consistency model</p>
    <p>Omid  an apache incubator TP system for HBase Battle-tested, Web-scale, HA</p>
  </div>
</Presentation>
