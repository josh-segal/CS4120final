<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PROTOCOL STATE FUZZING OF TLS IMPLEMENTATIONS</p>
    <p>Joeri de Ruiter University of Birmingham</p>
  </div>
  <div class="page">
    <p>Short introduction to TLS</p>
    <p>Client</p>
    <p>ClientHello</p>
    <p>ClientKeyExchange</p>
    <p>ChangeCipherSpec</p>
    <p>Finished</p>
    <p>ApplicationData</p>
    <p>Server</p>
    <p>ServerHello</p>
    <p>Certificate</p>
    <p>ServerHelloDone</p>
    <p>ChangeCipherSpec</p>
    <p>Finished</p>
    <p>ApplicationData</p>
  </div>
  <div class="page">
    <p>Every application that implements a protocol has to implement the corresponding state machine</p>
    <p>Mealy machines  Set of states  Input alphabet  Output alphabet</p>
    <p>Specify in all states for each input  Returned output  Next state</p>
    <p>It is unambiguous</p>
    <p>State machines</p>
  </div>
  <div class="page">
    <p>Extract state machines from implementations by communicating with them</p>
    <p>Fuzzing of message order  Discover bugs  Provides interesting insights in the code  Will not find carefully hidden backdoors</p>
    <p>State machine inference</p>
  </div>
  <div class="page">
    <p>State machine inference</p>
  </div>
  <div class="page">
    <p>State machine inference  ClientHello  ServerHello</p>
  </div>
  <div class="page">
    <p>State machine inference  ClientHello  ServerHello</p>
    <p>ClientHello ServerHello</p>
  </div>
  <div class="page">
    <p>State machine inference  ClientHello  ServerHello</p>
    <p>Other messages  Fatal alert / Connection close</p>
    <p>ClientHello ServerHello</p>
  </div>
  <div class="page">
    <p>State machine inference  ClientHello  ServerHello</p>
    <p>Other messages  Fatal alert / Connection close</p>
    <p>ClientHello ServerHello</p>
    <p>Other messages Fatal alert / Connection close</p>
  </div>
  <div class="page">
    <p>State machine inference  ClientHello  ServerHello</p>
    <p>Other messages  Fatal alert / Connection close</p>
    <p>ClientHello, ClientHello  Fatal alert / Connection close</p>
    <p>ClientHello ServerHello</p>
    <p>Other messages Fatal alert / Connection close</p>
  </div>
  <div class="page">
    <p>State machine inference</p>
    <p>ClientHello ServerHello</p>
    <p>ClientHello  ServerHello</p>
    <p>Other messages  Fatal alert / Connection close</p>
    <p>ClientHello, ClientHello  Fatal alert / Connection close</p>
    <p>Other messages Fatal alert / Connection close</p>
    <p>ClientHello Fatal alert / Connection close</p>
  </div>
  <div class="page">
    <p>Deterministic Mealy machine  Learner</p>
    <p>Adapted L* algorithm by Niese</p>
    <p>Teacher  Equivalence queries approximated</p>
    <p>Random traces  Chow's W-method</p>
    <p>Learner Teacher</p>
    <p>Reset</p>
    <p>Output query</p>
    <p>Output</p>
    <p>Equivalence query</p>
    <p>Yes / Counterexample</p>
    <p>Automated learning</p>
  </div>
  <div class="page">
    <p>Automated learning  LearnLib by TU Dortmund</p>
    <p>Implementation of adapted L* and equivalence algorithms</p>
    <p>Equivalence checking using modified W-method  Given an upper bound it is guaranteed to find the correct state machine  Depth specified to search for counter-examples  After a socket is closed no data will be received</p>
    <p>Custom test harness for TLS  Manual analysis if we see unexpected behavior</p>
  </div>
  <div class="page">
    <p>Test harness  (Almost) stateless TLS implementation  Minimal state in test harness to handle encryption  Support to test clients and servers  All regular TLS messages and Heartbeat extensions</p>
    <p>RSA and DH key exchange  Client authentication  Some special symbols that correspond to exceptions in the test harness</p>
  </div>
  <div class="page">
    <p>Analysis of TLS servers  9 TLS implementations</p>
    <p>OpenSSL  GnuTLS  Java Secure Socket Extension  mbed TLS (previously PolarSSL)  NSS  RSA BSAFE for C  RSA BSAFE for Java  miTLS  nqsb-TLS</p>
    <p>Every learned model different</p>
  </div>
  <div class="page">
    <p>Learned models</p>
  </div>
  <div class="page">
    <p>Learned models</p>
  </div>
  <div class="page">
    <p>Results  Used demo applications when provided  6 to 16 states  6 minutes to over 8 hours</p>
    <p>Under 1 hour if connections are properly closed</p>
    <p>Dependent on implementation specific time-outs (100ms to 1,5s)  Several new flaws in different implementations</p>
  </div>
  <div class="page">
    <p>Java Secure Socket Extension  Possible to skip ChangeCipherSpec message  Server will accept plaintext data  Problem also present in client  Also found by the Prosecco group at INRIA  Fixed in January 2015</p>
  </div>
  <div class="page">
    <p>GnuTLS  Shadow path after sending HeartbeatRequest during</p>
    <p>handshake  Buffer handshake messages for hash in Finished reset  Same problem present in the client</p>
  </div>
  <div class="page">
    <p>OpenSSL  Sending a ChangeCipherSpec after</p>
    <p>successful handshake gets server in invalid state</p>
    <p>Client key set to server key  Same keys used for both directions  Fixed in 1.0.1k  Same issue present in LibreSSL</p>
  </div>
  <div class="page">
    <p>OpenSSL  Able to detect EarlyCCS bug by Kikuchi  By modifying the test harness we can successfully exploit</p>
    <p>this flaw</p>
  </div>
  <div class="page">
    <p>nqsb-TLS  Plaintext alerts returned after ChangeCipherSpec  No security flaw  Quickly fixed  Shows it is a useful technique during development  Different interpretation of the specification</p>
  </div>
  <div class="page">
    <p>nqsb-TLS  Plaintext alerts returned after ChangeCipherSpec  No security flaw  Quickly fixed  Shows it is a useful technique during development  Different interpretation of the specification</p>
  </div>
  <div class="page">
    <p>Conclusions  Protocol state fuzzing is a useful technique to find</p>
    <p>security flaws and other bugs related to the implementation of state machines</p>
    <p>Everybody interprets specifications differently and makes different design decisions</p>
    <p>It would be good to include state machines in specifications</p>
  </div>
  <div class="page">
    <p>Conclusions  Protocol state fuzzing is a useful technique to find</p>
    <p>security flaws and other bugs related to the implementation of state machines</p>
    <p>Everybody interprets specifications differently and makes different design decisions</p>
    <p>It would be good to include state machines in specifications</p>
    <p>Thank you for your attention!</p>
  </div>
</Presentation>
