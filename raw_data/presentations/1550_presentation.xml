<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NOVA: A Log-structured File System for Hybrid Volatile/Non-volatile Main Memories</p>
    <p>Andiry Xu, Steven Swanson</p>
    <p>Non-volatile Systems Laboratory Department of Computer Science and Engineering University of California, San Diego</p>
  </div>
  <div class="page">
    <p>NOVA overview</p>
    <p>NOVA extends LFS to leverage non-volatile memories</p>
    <p>NOVA proposes per-inode logging</p>
    <p>High performance + Strong atomicity</p>
    <p>3.1x to 13.5x to file systems that have equally strong consistency guarantees in write-intensive workloads</p>
    <p>POSIX compliant</p>
    <p>https://github.com/NVSL/NOVA</p>
  </div>
  <div class="page">
    <p>Hybrid DRAM/NVMM system</p>
    <p>Non-volatile main memory (NVMM)</p>
    <p>PCM, STT-RAM, ReRAM, 3D XPoint technology</p>
    <p>File system for NVMM Host</p>
    <p>CPU</p>
    <p>DRAM NVMM</p>
    <p>NVMM FS</p>
  </div>
  <div class="page">
    <p>Disk-based file systems are inadequate for NVMM</p>
    <p>Ext4, xfs, Btrfs, F2FS, NILFS2</p>
    <p>Built for hard disks and SSDs</p>
    <p>Software overhead is high</p>
    <p>CPU may reorder writes to NVMM</p>
    <p>NVMM has different atomicity guarantees</p>
    <p>Cannot exploit NVMM performance</p>
    <p>Performance optimization compromises consistency on system failure [1]</p>
    <p>[1] Pillai et al, All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications, OSDI '14.</p>
    <p>Atomicity Ext4 wb</p>
    <p>Ext4 order</p>
    <p>Ext4 dataj</p>
    <p>Btrfs xfs</p>
    <p>N-Block write/append</p>
    <p>N-Block prefix/append</p>
  </div>
  <div class="page">
    <p>NVMM file systems are not strongly consistent</p>
    <p>BPFS, PMFS, Ext4-DAX, SCMFS, Aerie</p>
    <p>None of them provide strong metadata and data consistency</p>
    <p>File system Metadata atomicity</p>
    <p>Data atomicity</p>
    <p>Mmap Atomicity [1]</p>
    <p>BPFS Yes Yes [2] No</p>
    <p>PMFS Yes No No</p>
    <p>Ext4-DAX Yes No No</p>
    <p>SCMFS No No No</p>
    <p>Aerie Yes No No</p>
    <p>[1] Each msync() commits updates atomically. [2] In BPFS, write times are not updated atomically with respect to the write itself.</p>
    <p>File system Metadata atomicity</p>
    <p>Data atomicity</p>
    <p>Mmap Atomicity [1]</p>
    <p>BPFS Yes Yes [2] No</p>
    <p>PMFS Yes No No</p>
    <p>Ext4-DAX Yes No No</p>
    <p>SCMFS No No No</p>
    <p>Aerie Yes No No</p>
    <p>NOVA Yes Yes Yes</p>
  </div>
  <div class="page">
    <p>Why LFS?</p>
    <p>Log-structuring provides cheaper atomicity than journaling and shadow paging</p>
    <p>NVMM supports fast, highly concurrent random accesses</p>
    <p>Using multiple logs does not negatively impact performance</p>
    <p>Log does not need to be contiguous</p>
    <p>Rethink and redesign log-structuring entirely</p>
  </div>
  <div class="page">
    <p>NOVA design goals</p>
    <p>Atomicity  Combine log-structuring, journaling and copy-on</p>
    <p>write</p>
    <p>High performance  Split data structure between DRAM and NVMM  Highly scalable</p>
    <p>Efficient garbage collection  Fine-grained log cleaning with log as a linked list  Log only contains metadata</p>
    <p>Fast recovery  Lazy rebuild  Parallel scan</p>
    <p>Head TailInode</p>
    <p>Inode log</p>
    <p>Committed entry</p>
    <p>Uncommitted entry</p>
    <p>Per-inode logging</p>
  </div>
  <div class="page">
    <p>Log-structuring for single log update  Write, msync, chmod, etc  Strictly commit log entry to NVMM</p>
    <p>before updating log tail</p>
    <p>Lightweight journaling for update across logs  Unlink, rename, etc  Journal log tails instead of metadata</p>
    <p>or data</p>
    <p>Copy-on-write for file data  Log only contains metadata  Log is short</p>
    <p>File log</p>
    <p>Directory log</p>
    <p>Tail Tail</p>
    <p>TailTail</p>
    <p>Tail</p>
    <p>Atomicity</p>
    <p>Dir tail</p>
    <p>File tail Journal</p>
  </div>
  <div class="page">
    <p>Log-structuring for single log update  Write, msync, chmod, etc  Strictly commit log entry to NVMM</p>
    <p>before updating log tail</p>
    <p>Lightweight journaling for update across logs  Unlink, rename, etc  Journal log tails instead of metadata</p>
    <p>or data</p>
    <p>Copy-on-write for file data  Log only contains metadata  Log is short</p>
    <p>File log</p>
    <p>Directory log</p>
    <p>Tail</p>
    <p>Tail</p>
    <p>Atomicity</p>
    <p>Data 1 Data 2</p>
    <p>Tail</p>
    <p>Data 0 Data 1</p>
  </div>
  <div class="page">
    <p>Per-inode logging allows for high concurrency</p>
    <p>Split data structure between DRAM and NVMM</p>
    <p>Persistent log is simple and efficient</p>
    <p>Volatile tree structure has no consistency overhead</p>
    <p>File log</p>
    <p>Directory log</p>
    <p>Tail</p>
    <p>Performance</p>
    <p>Data 1 Data 2</p>
    <p>Tail</p>
    <p>Data 0</p>
  </div>
  <div class="page">
    <p>Per-inode logging allows for high concurrency</p>
    <p>Split data structure between DRAM and NVMM</p>
    <p>Persistent log is simple and efficient</p>
    <p>Volatile tree structure has no consistency overhead</p>
    <p>File log</p>
    <p>Performance</p>
    <p>Data 1 Data 2</p>
    <p>Tail</p>
    <p>Data 0</p>
    <p>DRAM</p>
    <p>NVMM</p>
    <p>Radix tree</p>
  </div>
  <div class="page">
    <p>NOVA layout</p>
    <p>DRAM</p>
    <p>NVMM Journal</p>
    <p>Inode table</p>
    <p>Free list</p>
    <p>CPU 0</p>
    <p>Journal</p>
    <p>Inode table</p>
    <p>Free list</p>
    <p>CPU 1</p>
    <p>Head TailInode</p>
    <p>Inode log</p>
    <p>Super block</p>
    <p>Recovery inode</p>
    <p>Put allocator in DRAM</p>
    <p>High scalability</p>
    <p>Per-CPU NVMM free list, journal and inode table</p>
    <p>Concurrent transactions and allocation/deallocation</p>
  </div>
  <div class="page">
    <p>Fast garbage collection</p>
    <p>Log is a linked list</p>
    <p>Log only contains metadata</p>
    <p>Fast GC deletes dead log pages from the linked list</p>
    <p>No copying</p>
    <p>Head</p>
    <p>Tail</p>
    <p>Vaild log entry Invalid log entry</p>
  </div>
  <div class="page">
    <p>Thorough garbage collection</p>
    <p>Starts if valid log entries &lt; 50% log length</p>
    <p>Format a new log and atomically replace the old one</p>
    <p>Only copy metadata</p>
    <p>Head</p>
    <p>Tail</p>
    <p>Vaild log entry Invalid log entry</p>
  </div>
  <div class="page">
    <p>Recovery</p>
    <p>Rebuild DRAM structure  Allocator  Lazy rebuild: postpones inode radix tree rebuild</p>
    <p>Accelerates recovery  Reduces DRAM consumption</p>
    <p>Normal shutdown recovery:  Store allocator in recovery inode  No log scanning</p>
    <p>Failure recovery:  Log is short  Parallel scan  Failure recovery bandwidth: &gt; 400 GB/s</p>
    <p>DRAM</p>
    <p>NVMM Journal</p>
    <p>Inode table</p>
    <p>Free list</p>
    <p>CPU 0</p>
    <p>Journal</p>
    <p>Inode table</p>
    <p>Free list</p>
    <p>CPU 1</p>
    <p>Super block</p>
    <p>Recovery inode</p>
    <p>Recovery inode Recovery</p>
    <p>thread Recovery</p>
    <p>thread</p>
  </div>
  <div class="page">
    <p>Evaluation: Latency</p>
    <p>Intel PM Emulation Platform  Emulates different NVM</p>
    <p>characteristics</p>
    <p>Emulates clwb/PCOMMIT latency</p>
    <p>NOVA provides low latency atomicity</p>
    <p>Create Append (4KB) Delete</p>
    <p>La te</p>
    <p>n cy</p>
    <p>( m</p>
    <p>ic ro</p>
    <p>se co</p>
    <p>n d</p>
    <p>)</p>
    <p>Operation latency</p>
    <p>Ext4-datajournal Ext4-DAX NOVA</p>
  </div>
  <div class="page">
    <p>Filebench throughput</p>
    <p>NOVA achieves high performance with strong data consistency</p>
    <p>Fileserver Varmail Webproxy Webserver</p>
    <p>O p</p>
    <p>s p</p>
    <p>e r</p>
    <p>se co</p>
    <p>n d</p>
    <p>( x1</p>
    <p>Filebench throughput</p>
    <p>Ext4-datajournal Ext4-DAX NOVA</p>
  </div>
  <div class="page">
    <p>Garbage collection efficiency</p>
    <p>NOVAs performance stays stable with increasing running time</p>
    <p>Fast GC reclaims the majority of stale pages in the long-term running</p>
    <p>O p</p>
    <p>s p</p>
    <p>e r</p>
    <p>se co</p>
    <p>n d</p>
    <p>( x1</p>
    <p>Running time (second)</p>
    <p>Fileserver (95% NVMM utilization)</p>
    <p>NILFS2 F2FS NOVA</p>
    <p>FailFail</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Existing file systems do not meet the requirements of applications on NVMM file systems</p>
    <p>NOVAs multi-log design achieves high concurrency, efficient garbage collection and fast recovery</p>
    <p>NOVA outperforms existing file systems while providing stronger consistency and atomicity guarantees</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>https://github.com/NVSL/NOVA</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
  </div>
  <div class="page">
    <p>Atomicity and enforce write ordering</p>
    <p>// Strictly commit log entry to NVMM before updating tail</p>
    <p>new_tail = append_to_log(inode-&gt;tail, entry);</p>
    <p>clwb(inode-&gt;tail, entry-&gt;length); // writes back the cachelines</p>
    <p>sfence();</p>
    <p>PCOMMIT(); // Commits to NVMM</p>
    <p>sfence();</p>
    <p>inode-&gt;tail = new_tail; Inode log</p>
    <p>Tail Tail</p>
  </div>
  <div class="page">
    <p>Directory operations</p>
    <p>mv Alice/book Bob/</p>
    <p>(name, inode number)</p>
    <p>book log</p>
    <p>book, 10Alice log</p>
    <p>book, 10Bob log</p>
    <p>book, 0</p>
    <p>inode update</p>
    <p>Tail</p>
    <p>Tail</p>
    <p>Tail</p>
    <p>Alice tail</p>
    <p>Bob tail</p>
    <p>book tail</p>
    <p>Journal</p>
    <p>Tail</p>
    <p>Tail</p>
    <p>Tail</p>
  </div>
  <div class="page">
    <p>Atomic file operations</p>
    <p>Copy-on-write for file data</p>
    <p>&lt;pgoff, num pages&gt;</p>
    <p>Write(8192, 8192)</p>
    <p>&lt;0, 1&gt; &lt;1, 2&gt;</p>
    <p>Data 0 Data 1 Data 2</p>
    <p>&lt;2, 2&gt;</p>
    <p>Data 2 Data 3</p>
    <p>Tail Tail</p>
    <p>File radix treeroot</p>
    <p>Head</p>
    <p>File log</p>
    <p>DRAM</p>
    <p>NVMM</p>
  </div>
  <div class="page">
    <p>Atomic mmap</p>
    <p>Allocate replica pages and mmap to user space</p>
    <p>msync() commits updates atomically</p>
    <p>Data 0 Data 1</p>
    <p>Tail TailHead</p>
    <p>File log</p>
    <p>User space</p>
    <p>Kernel</p>
    <p>Replica 1</p>
    <p>mmap(fd, 4096, 4096);</p>
    <p>Replica 1</p>
    <p>Replica 1Replica 1</p>
    <p>msync(addr, 4096);</p>
    <p>Data 1 Replica 1</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Intel PM Emulation Platform</p>
    <p>32GB of DRAM, 64GB of NVMM</p>
    <p>Compare to Btrfs, NILFS2, F2FS, Ext4, Ext4-data, Ext4-DAX, PMFS</p>
    <p>Linux kernel 4.0 x86-64</p>
    <p>NVMM Read</p>
    <p>latency Write</p>
    <p>bandwidth clwb</p>
    <p>latency PCOMMIT</p>
    <p>latency</p>
    <p>STT-RAM 100 ns Full DRAM 40 ns 200 ns</p>
    <p>PCM 300 ns 1/8 DRAM 40 ns 500 ns</p>
  </div>
  <div class="page">
    <p>Garbage collection efficiency</p>
    <p>P E</p>
    <p>R C</p>
    <p>E N</p>
    <p>TA G</p>
    <p>E</p>
    <p>RUNNING TIME</p>
    <p>GC pages percentage</p>
    <p>Fast GC Thorough GC</p>
    <p>Fast GC reclaims 94% pages in one-hour test</p>
  </div>
</Presentation>
