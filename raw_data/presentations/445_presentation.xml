<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Yan Huang</p>
    <p>David Evans</p>
    <p>Jonathan Katz</p>
    <p>Lior Malka</p>
    <p>Faster Secure Two-Party Computation Using Garbled Circuits</p>
    <p>www.MightBeEvil.com</p>
  </div>
  <div class="page">
    <p>Secure Two-Party Computation</p>
    <p>AliceBob</p>
    <p>Bobs Genome: ACTG Markers (~1000): *0,1, , 0+</p>
    <p>Alices Genome: ACTG Markers (~1000): *0, 0, , 1+</p>
    <p>Can Alice and Bob compute a function of their private data, without exposing anything about their data besides the result?</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Describe a system for secure 2-party computation using garbled circuits that is much more scalable and significantly faster than best prior work</p>
    <p>Applications:</p>
    <p>Face recognition: Hamming distance</p>
    <p>Genomics: Edit distance, Smith-Waterman</p>
    <p>Private encryption: Oblivious AES evaluation</p>
  </div>
  <div class="page">
    <p>Fairplay [PSSW09] TASTY Here</p>
    <p>B il</p>
    <p>li o</p>
    <p>n s</p>
    <p>max gates</p>
    <p>Our Results</p>
    <p>Fairplay [PSSW09] TASTY Here</p>
    <p>x 1</p>
    <p>non-free gates/s</p>
    <p>PerformanceScalability</p>
  </div>
  <div class="page">
    <p>Secure Function Evaluation</p>
    <p>Alice (circuit generator) Bob (circuit evaluator)</p>
    <p>Garbled Circuit Protocol</p>
    <p>Andrew Yao, 1986</p>
    <p>s a }1,0{Holds</p>
    <p>t b }1,0{Holds</p>
  </div>
  <div class="page">
    <p>Yaos Garbled Circuits Inputs Output</p>
    <p>a b x</p>
    <p>AND</p>
    <p>a b</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Computing with Meaningless Values?</p>
    <p>Inputs Output</p>
    <p>a b x</p>
    <p>a0 b0 x0 a0 b1 x0 a1 b0 x0 a1 b1 x1</p>
    <p>AND</p>
    <p>a0 or a1 b0 or b1</p>
    <p>x0 or x1</p>
    <p>ai, bi, xi are random values, chosen by the circuit generator but meaningless to the circuit evaluator.</p>
  </div>
  <div class="page">
    <p>Computing with Garbled Tables Inputs Output</p>
    <p>a b x</p>
    <p>a0 b0 Enca0,b0(x0)</p>
    <p>a0 b1 Enca0,b1(x0)</p>
    <p>a1 b0 Enca1,b0(x0)</p>
    <p>a1 b1 Enca1,b1(x1)</p>
    <p>AND</p>
    <p>a0 or a1 b0 or b1</p>
    <p>x0 or x1</p>
    <p>ai, bi, xi are random values, chosen by the circuit generator but meaningless to the circuit evaluator.</p>
    <p>B o</p>
    <p>b ca</p>
    <p>n o</p>
    <p>n ly</p>
    <p>d e</p>
    <p>cry p</p>
    <p>t o</p>
    <p>n e</p>
    <p>o f th</p>
    <p>e se</p>
    <p>!</p>
    <p>Garbled And Gate</p>
    <p>Enca0, b1(x0)</p>
    <p>Enca1,b1(x1)</p>
    <p>Enca1,b0(x0)</p>
    <p>Enca0,b0(x0)</p>
  </div>
  <div class="page">
    <p>Chaining Garbled Circuits</p>
    <p>Can do any computation privately this way!</p>
    <p>AND</p>
    <p>a0 b0</p>
    <p>x0</p>
    <p>AND</p>
    <p>a1 b1</p>
    <p>x1</p>
    <p>OR</p>
    <p>x2</p>
    <p>And Gate 1</p>
    <p>Enca10, b11(x10)</p>
    <p>Enca11,b11(x11)</p>
    <p>Enca11,b10(x10)</p>
    <p>Enca10,b10(x10) Or Gate 2</p>
    <p>Encx00, x11(x21)</p>
    <p>Encx01,x11(x21)</p>
    <p>Encx01,x10(x21)</p>
    <p>Encx00,x10(x20)</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Semi-Honest (Honest-but-Curious) Adversary</p>
    <p>Adversary follows the protocol as specified (!), but tries to learn more from the protocol execution transcript</p>
    <p>May be good enough for some scenarios</p>
    <p>We are working on efficient solutions for malicious adversaries</p>
  </div>
  <div class="page">
    <p>Fairplay</p>
    <p>Dahlia Malkhi, Noam Nisan, Benny Pinkas and Yaron Sella [USENIX Security 2004]</p>
    <p>SFDL Program</p>
    <p>SFDL Compiler</p>
    <p>Circuit (SHDL)Alice Bob</p>
    <p>Garbled Tables Generator</p>
    <p>Garbled Tables Evaluator</p>
  </div>
  <div class="page">
    <p>Problems?</p>
    <p>An alternative approach  would have been to apply Yaos generic secure two-party protocol. This would have required expressing the algorithm as a circuit  and then sending and computing that circuit. [We] believe that the performance of our protocols is significantly better than that of applying generic protocols. Margarita Osadchy, Benny Pinkas, Ayman Jarrous, Boaz Moskovich.</p>
    <p>SCiFI  A System for Secure Face Identification. Oakland 2010.</p>
    <p>*Generic SFE+ is very fast  but the circuit size is extremely large. Our prototype circuit compiler can compile circuits for problems of size (200, 200) but uses almost 2 GB of memory to do so. larger circuits would be constrained by available memory for constructing their garbled versions.</p>
    <p>Somesh Jha, Louis Kruger, Vitaly Shmatikov. Towards Practical Privacy for Genomic Computation. Oakland 2008.</p>
  </div>
  <div class="page">
    <p>The Fallacy</p>
    <p>The entire circuit is prepared and stored on both sides</p>
    <p>SFDL Program</p>
    <p>SFDL Compiler</p>
    <p>Circuit (SHDL)Alice Bob</p>
    <p>Garbled Tables Generator</p>
    <p>Garbled Tables Evaluator</p>
  </div>
  <div class="page">
    <p>Encx00, x11(x21)</p>
    <p>Encx01,x11(x21)</p>
    <p>Encx01,x10(x21)</p>
    <p>Encx20, x21(x30)</p>
    <p>Encx21,x21(x30)</p>
    <p>Encx21,x20(x31)</p>
    <p>Encx20, x31(x41)</p>
    <p>Encx21,x31(x41)</p>
    <p>Encx21,x30(x40)</p>
    <p>Encx40, x31(x51)</p>
    <p>Encx41,x31(x50)</p>
    <p>Encx41,x30(x50)</p>
    <p>Encx40, x51(x61)</p>
    <p>Encx41,x51(x60)</p>
    <p>Encx41,x50(x60)</p>
    <p>Encx30, x61(x71)</p>
    <p>Encx31,x61(x70)</p>
    <p>Encx31,x60(x71)</p>
    <p>Faster Garbled Circuits</p>
    <p>Circuit-Level Application</p>
    <p>GC Framework (Evaluator)</p>
    <p>GC Framework (Generator)</p>
    <p>Circuit StructureCircuit Structure</p>
    <p>x41</p>
    <p>x21 x31</p>
    <p>x60</p>
    <p>x51</p>
    <p>x71</p>
    <p>Gates can be evaluated as they are generated: pipelining</p>
  </div>
  <div class="page">
    <p>Benefits of Pipelining</p>
    <p>Allows GC to scale to circuits of arbitrary size</p>
    <p>Improves the time efficiency</p>
    <p>We ran circuits with over a billion gates, at a rate of roughly 10 s per gate.</p>
  </div>
  <div class="page">
    <p>Problems in Existing (SFDL) Compilers</p>
    <p>Resource-demanding SFDL compilation</p>
    <p>Many optimization opportunities are missed</p>
    <p>It takes hours on a 40GB memory server to compile a SFDL program that implements AES.</p>
    <p>Circuit level Minimize bitwidth Reduce the number of</p>
    <p>non-free gates</p>
    <p>Program level Treat public and secret</p>
    <p>values differently</p>
  </div>
  <div class="page">
    <p>Example: Secure Counter</p>
    <p>SFDL requires pre-setting c to a fixed bit width</p>
    <p>For best performance, its bit width should be adjusted dynamically</p>
    <p>Saves n non-free gates (out of original n log n)</p>
    <p>class Counter {</p>
    <p>int c = 0;</p>
    <p>void increment(bool b) {</p>
    <p>if (b) c++;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Circuit Optimization  Edit Distance</p>
    <p>for (int i = 1; i &lt; a.length; ++i)</p>
    <p>for (int j = 1; j &lt; b.length; ++j) {</p>
    <p>T = (a[i] == b[j]) ? 0 : 1;</p>
    <p>D[i][j] = min(D[i-1][j]+1, D[i][j-1]+1,</p>
    <p>D[i-1][j-1] + T);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Circuit Optimization  Edit Distance</p>
    <p>D[i-1][j]</p>
    <p>AddOneBit AddOneBit</p>
    <p>T</p>
    <p>D[i][j-1] D[i-1][j-1]</p>
    <p>D[i][j]</p>
  </div>
  <div class="page">
    <p>Circuit Optimization  Edit Distance</p>
    <p>AddOneBit</p>
    <p>AddOneBit</p>
    <p>T</p>
    <p>D[i-1][j] D[i][j-1] D[i-1][j-1]</p>
    <p>D[i][j]</p>
  </div>
  <div class="page">
    <p>Circuit Optimization  Edit Distance</p>
    <p>AddOneBit</p>
    <p>Mux</p>
    <p>T</p>
    <p>Saves about 28% of gates</p>
    <p>D[i-1][j] D[i][j-1] D[i-1][j-1]</p>
    <p>D[i][j]</p>
  </div>
  <div class="page">
    <p>Circuit Library</p>
    <p>Through custom circuit design and the use of optimal circuit components, we strive to minimize the number of non-free gates</p>
    <p>V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free XOR Gates and Applications. (ICALP), 2008.</p>
    <p>AddOneBit</p>
    <p>Mux</p>
    <p>T</p>
  </div>
  <div class="page">
    <p>Some Results</p>
    <p>Problem Best Previous Result Our Result Speedup</p>
    <p>Hamming Distance (Face Recognition, Genetic Dating)  two 900-bit vectors</p>
    <p>Levenshtein Distance (genome, text comparison)  two 200-character inputs</p>
    <p>Smith-Waterman (genome alignment)  two 60nucleotide sequences</p>
    <p>[Not Implementable] 447s</p>
    <p>AES Encryption 3.3s [Henecka, 2010]</p>
    <p>Scalable: 1 billion gates evaluated at 100,000 gates/second on regular PCs</p>
    <p>Comparisons are aligned to the same security level in the semi-honest model.</p>
  </div>
  <div class="page">
    <p>Timing Results</p>
    <p>Hamming distance (900 bits)</p>
    <p>edit distance (200 256-bit chars)</p>
    <p>S e</p>
    <p>co n</p>
    <p>d s</p>
    <p>Best previous</p>
    <p>Here</p>
    <p>[SCiFI, 2010]</p>
    <p>[Jha+, 2008]</p>
    <p>Hamming Distance (900 bits)</p>
    <p>Edit Distance (200 chars, 8-bits each)</p>
  </div>
  <div class="page">
    <p>Ease of Use</p>
    <p>Our framework assumes no expert knowledge of cryptography</p>
    <p>Need basic ideas of Boolean circuits</p>
    <p>Circuit designs converted directly to Java programs</p>
  </div>
  <div class="page">
    <p>Traditional Java</p>
    <p>Application</p>
    <p>Critical Component</p>
    <p>Critical Component</p>
    <p>Critical Component</p>
    <p>Library Circuit</p>
    <p>Custom Circuit</p>
    <p>Library Circuit</p>
    <p>Rest of the Java Program</p>
    <p>Java code</p>
    <p>javac</p>
    <p>Circuit Generator</p>
    <p>Circuit Evaluator</p>
    <p>Use the Framework</p>
  </div>
  <div class="page">
    <p>Example: AES SBox</p>
    <p>Leveraging an existing ASIC design for AES allows us to reduce the state-ofthe-art AES circuit by</p>
    <p>Wolkerstorfer, et al. An ASIC Implementation of the AES S-boxes. RSA-CT 2002.</p>
  </div>
  <div class="page">
    <p>Time Savings: AES</p>
    <p>[PSSW09] TASTY Here</p>
    <p>S e</p>
    <p>co n</p>
    <p>d s</p>
    <p>[Henecka, et al. CCS 2010]</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Pipelining enables garbled-circuit technique to scale to large problem sizes</p>
    <p>Circuit-level optimizations can dramatically reduce performance overhead</p>
    <p>Privacy-preserving applications can run orders of magnitude faster than previously thought.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Thanks!</p>
    <p>Download framework and Android demo application from MightBeEvil.com</p>
  </div>
</Presentation>
