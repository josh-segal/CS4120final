<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ShadowMove: A Stealthy Lateral Movement Strategy</p>
    <p>Amirreza Niakanlahiji, University of Illinois Springfield Jinpeng Wei, UNC Charlotte</p>
    <p>Md Rabbi Alam, UNC Charlotte Qingyang Wang, Louisiana State University</p>
    <p>Bei-Tseng Chu, UNC Charlotte</p>
  </div>
  <div class="page">
    <p>Lateral Movement Techniques</p>
    <p>Advanced Persistent Threat (APT) attackers use various lateral movement techniques</p>
    <p>Real world example: Equifax breach  Features of lateral movement during</p>
    <p>APT attacks  Find a foothold within target networks  Use the compromised systems as</p>
    <p>stepping stones to reach critical systems</p>
    <p>* Based on ZDNet article (https://zd.net/32AqfoI)</p>
  </div>
  <div class="page">
    <p>Existing Lateral Movement Techniques</p>
    <p>Techniques Limitations</p>
    <p>Exploit vulnerabilities in network services</p>
    <p>Increasingly hard due to advances in defense mechanisms</p>
    <p>Harvest and abuse user credentials (e.g., passwords by Equifax breach)</p>
    <p>Requires new network connections, which can be detected as anomaly</p>
    <p>Inject application- and protocol-specific code into legitimate clients to reuse thier connections</p>
    <p>Complex and can be detected by existing defensive solutions (e.g., Windows Defender ATP)</p>
  </div>
  <div class="page">
    <p>Novelty of ShadowMove Attacks</p>
    <p>No new connection, no extra authentication: the attack process secretly reuses authenticated connections and injects commands through such connections</p>
    <p>.</p>
    <p>No privilege elevation: the attack is against client processes run by normal users</p>
    <p>No process injection (on Windows): the attack process secretly duplicates sockets owned by legitimate client processes without injecting code</p>
    <p>Application agnostic: No prior knowledge about the target process is needed</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Req</p>
    <p>Client sends a request to the remote server</p>
    <p>Resp</p>
    <p>Client receives the response from the server</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Socket</p>
    <p>ShadowMove duplicates the socket created by the client</p>
  </div>
  <div class="page">
    <p>Resp</p>
    <p>Overview</p>
    <p>SocketReq</p>
    <p>ShadowMove sniffs responses by peeking from the duplicated socket</p>
    <p>Resp</p>
  </div>
  <div class="page">
    <p>Socket</p>
    <p>Overview</p>
    <p>ShadowMove suspends the client, before sending requests to the remote server</p>
  </div>
  <div class="page">
    <p>Socket</p>
    <p>Overview</p>
    <p>Suspended</p>
    <p>Req</p>
    <p>ShadowMove sends a set of requests to perform an action Example of an action: Upload, Download, or Execute a file</p>
  </div>
  <div class="page">
    <p>Socket</p>
    <p>Overview</p>
    <p>Resp</p>
    <p>ShadowMove sends a set of requests to perform an action Example of an action: Upload, Download, or Execute a file</p>
  </div>
  <div class="page">
    <p>Architecture</p>
  </div>
  <div class="page">
    <p>Socket Duplicator</p>
    <p>Socket duplication requires cooperation of socket owner</p>
    <p>Owner Process Partner Process</p>
  </div>
  <div class="page">
    <p>Socket Duplicator</p>
    <p>In ShadowMove, no co-operation is required</p>
  </div>
  <div class="page">
    <p>Connection Detector</p>
    <p>Periodically gets a list of TCP connections  E.g. by calling GetTcpTable2 and GetTcp6Table2</p>
    <p>Identifies new connections  Filters out the ones owned by a process that cannot be</p>
    <p>accessed  Calls socket duplicator to duplicate the new ones</p>
    <p>Detects newly created sockets suitable for duplication</p>
  </div>
  <div class="page">
    <p>Peer Handler</p>
    <p>Receives network views from neighboring nodes  Peeks from duplicated sockets  waits for synchronization signal</p>
    <p>Sends synchronization signal periodically to its predecessor/successor nodes</p>
    <p>Helps to construct a global view of the compromised network by synchronizing its current view with neighboring ShadowMove instances</p>
  </div>
  <div class="page">
    <p>Lateral Movement Planner</p>
    <p>Formulates the next lateral movement action plan  Current network view  History of action plans performed by all ShadowMove</p>
    <p>instances</p>
    <p>An action plan describes the action that must be performed on a specific end point</p>
  </div>
  <div class="page">
    <p>Lateral Movement Planner</p>
    <p>remoteOperation( X, Y, Action, Route):connected(X, Z, Service), capability(Service, Action), remoteOperation(Z, Y, Action, R), Route=[X| R].</p>
    <p>commitExecuteOperation(X, Y) :connected(X, Y, Z), capability(Z, execute), origin(I), remoteOperation(I, Y, upload, _R), committed(_K, Y, upload).</p>
  </div>
  <div class="page">
    <p>Lateral Movement Plan Actuator</p>
    <p>Contains a set of Protocol Handlers  Application protocol specific</p>
    <p>FTP, TDS (MS SQL), and WinRM  Performs different operations</p>
    <p>Upload, Download, or Execute</p>
    <p>Creates application-specific queries to carry out lateral movement plans</p>
  </div>
  <div class="page">
    <p>Example Actuator Leveraging FTP</p>
  </div>
  <div class="page">
    <p>ShadowMove Implementation</p>
    <p>We implement prototypes of the ShadowMove design on Windows (2,501 lines in C/C++) and Linux (1,316 lines in C/C++)</p>
    <p>The lateral movement planner is based on SWI-Prolog</p>
    <p>A demo video of our ShadowMove prototype that leverages FTP is available1</p>
    <p>The prototype implementation is available upon request (aniak2@uis.edu)</p>
  </div>
  <div class="page">
    <p>Why is ShadowMove Possible?</p>
    <p>The conflicting requirements between process isolation and resource sharing in commodity OS</p>
    <p>allows the attack process to duplicate (share) sockets belonging to legitimate client processes.</p>
    <p>A lack of built-in message origin integrity validation in many networking protocols</p>
    <p>allows malicious packets in existing connections that cannot be differentiated from legitimate packets.</p>
  </div>
  <div class="page">
    <p>Evaluation  Not detected by off-the-shelf solutions</p>
    <p>Type Name Version Update time FTP/MSSql/WinRM AV McAfee 16.0 03 Feb 2019 N/N/N AV Norton 22.16.2.22 03 Feb 2019 N/N/N AV Webroot 9.0.24.37 03 Feb 2019 N/N/N AV Bitdefender 6.6.7.106 03 Feb 2019 N/N/N AV Windows Defender 4.18.1901.7 03 Feb 2019 N/N/N IDS Snort (Windows and Linux) 2.9.12 07 Feb 2019 N/N/N HIDS OSSEC (Linux) 3.4.0 12 Oct 2019 N/--/-HIDS Osquery (Linux) 4.0.2 24 Oct 2019 N/--/-HIDS Wazuh (Linux) 3.10.2 24 Oct 2019 N/--/-EDR Cisco AMP 6.1.5.10729 14 Jun 2018 N/N/N EDR CrowdStrike Falcon Prevent 4.20.8305.0 11 Feb 2019 N/N/N</p>
  </div>
  <div class="page">
    <p>Limitations of ShadowMove Prototype</p>
    <p>It cannot hijack connections for which user-level encryption is applied to the payload</p>
    <p>It may not be able to get information such as the shellID in WinRM attack from the receiving buffer if the legitimate client consumes the buffer first</p>
    <p>Our design of ShadowMove on Linux relies on code injection</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Questions?</p>
    <p>Amirreza Niakanlahiji, aniak2@uis.edu Jinpeng Wei, jwei8@uncc.edu</p>
    <p>Md Rabbi Alam, malam5@uncc.edu Qingyang Wang, qywang@csc.lsu.edu</p>
    <p>Bei-Tseng Chu, billchu@uncc.edu</p>
  </div>
</Presentation>
