<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Composite-File File System: Decoupling the One-to-one Mapping of</p>
    <p>Files and Metadata for Better Performance</p>
    <p>Shuanglong Zhang, Helen Catanese, Andy An-I Wang Computer Science Department, Florida State University</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Current state  One-to-one mapping of a logical file and its physical metadata and</p>
    <p>data representations</p>
    <p>Observations  Files are accessed in groups</p>
    <p>Tend to be small and share similar metadata</p>
    <p>Composite-File File System (CFFS)  Many logical files can be consolidated into a single composite file</p>
    <p>with its shared metadata and representation  Up 27% performance gain</p>
    <p>Introduction Design PerformanceImplementation Conclusion 2</p>
  </div>
  <div class="page">
    <p>Current State</p>
    <p>Each logical file is mapped to its physical metadata and data representations  Deep-rooted data structures  Natural granularity for many file system mechanisms</p>
    <p>VFS API, prefetching, etc.</p>
    <p>Suppose we relax this constraint  Can we create new optimization opportunities?</p>
    <p>Introduction Design PerformanceImplementation Conclusion 3</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Frequent access to small files  Metadata a major source of overhead for small files (~40%)</p>
    <p>Redundant metadata information  Potential opportunities to consolidate</p>
    <p>Files accessed in groups  Why physically represent them separately?</p>
    <p>Limitation of prefetching  High per-file access overhead (seeking) even with warm cache</p>
    <p>Introduction Design PerformanceImplementation Conclusion 4</p>
  </div>
  <div class="page">
    <p>A Composite File</p>
    <p>data blocks data blocks data blocks</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>i-node with consolidated</p>
    <p>metadata</p>
    <p>Subfile 1</p>
    <p>Introduction Design PerformanceImplementation Conclusion</p>
    <p>Subfile 2 Subfile 3</p>
  </div>
  <div class="page">
    <p>Metadata Design Highlights</p>
    <p>Modified i-node namespace (highlighted)  If number &gt; threshold (e.g, 011)</p>
    <p>Treat zero extended upper bits as i-node numbers  Treat lower bits as subfile numbers</p>
    <p>Directory representation  Names are mapped to modified i-node numbers</p>
    <p>Subfiles metadata stored in extended attributes  Permission: First check the permission of the composite file, then the</p>
    <p>target subfile</p>
    <p>Upper bits Lower bits</p>
    <p>Introduction Design PerformanceImplementation Conclusion</p>
  </div>
  <div class="page">
    <p>Subfile Operations</p>
    <p>Open/close  Open the composite file and seek to the offset of target subfile  Close the entire composite file</p>
    <p>Add a subfile  Append to the end</p>
    <p>Remove a subfile  Mark it as freed</p>
    <p>Introduction Design PerformanceImplementation Conclusion 7</p>
  </div>
  <div class="page">
    <p>Subfile Operations (cont.)</p>
    <p>Read/write operation  Read from the starting offset of the subfile, bounded by subfile size  Write from the starting offset of the subfile, bounded by subfile size</p>
    <p>May move to the end if there is not enough space</p>
    <p>Space compaction  When half of the space of a composite file is marked as freed</p>
    <p>Introduction Design PerformanceImplementation Conclusion 8</p>
  </div>
  <div class="page">
    <p>Ways to Form Composite Files</p>
    <p>Directory-based consolidation  Groups all files in one directory</p>
    <p>Embedded-reference-based consolidation  Groups files based on the extracted references (e.g., URLs)</p>
    <p>Frequency-mining-based consolidation  Based on variants of Apriori Algorithm</p>
    <p>Frequently encountered file request sequences must contain frequently encountered subsequences</p>
    <p>Introduction Design PerformanceImplementation Conclusion 9</p>
  </div>
  <div class="page">
    <p>CFFS Components</p>
    <p>Introduction Design PerformanceImplementation Conclusion 10</p>
  </div>
  <div class="page">
    <p>Empirical Evaluation</p>
    <p>Prototyped CFFS via FUSE+ext4  Use hardlinks to map multiple file names to the composite file i-node  Use extended attributes to store consolidated metadata</p>
    <p>FUSE+CFFS+ext4 vs. FUSE+ext4  Workloads  3-month long web server trace, 11-day long software development</p>
    <p>trace  Zero-think time replays</p>
    <p>Introduction Design PerformanceImplementation Conclusion 11</p>
  </div>
  <div class="page">
    <p>Web Server Latency HDD SSD</p>
    <p>Introduction Design PerformanceImplementation Conclusion 12</p>
  </div>
  <div class="page">
    <p>Software Development Trace Replays</p>
    <p>Introduction Design PerformanceImplementation Conclusion 13</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>CFFS decouples the one-to-one mapping of files and metadata  Increases throughput up to 27%  Reduces latency up to 20%</p>
    <p>The CFFS approach is promising</p>
    <p>Introduction Design PerformanceImplementation Conclusion 14</p>
  </div>
</Presentation>
