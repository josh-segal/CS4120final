<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Solution to the Network Challenges of  Data Recovery in Erasure-coded</p>
    <p>Distributed Storage Systems:  A Study on the Facebook Warehouse Cluster</p>
    <p>K. V. Rashmi, Nihar Shah, D. Gu, H. Kuang, D. Borthakur, K. Ramchandran</p>
  </div>
  <div class="page">
    <p>Outline  Introduc.on: Erasure coding in data centers</p>
    <p>Low storage, high fault-tolerance  High download &amp; disk IO during recovery</p>
    <p>Measurements from Facebook warehouse cluster in produc.on</p>
    <p>Proposed alterna.ve: Piggybacked-RS codes  Same storage overhead &amp; fault tolerance  30% reduc.on in download &amp; disk IO</p>
  </div>
  <div class="page">
    <p>Outline  Introduc.on: Erasure coding in data centers</p>
    <p>Low storage, high fault-tolerance  High download &amp; disk IO during recovery</p>
    <p>Measurements from Facebook warehouse cluster in produc.on</p>
    <p>Proposed alterna.ve: Piggybacked-RS codes  Same storage overhead &amp; fault tolerance  30% reduc.on in download &amp; disk IO</p>
  </div>
  <div class="page">
    <p>Need for Redundant Storage</p>
    <p>Frequent unavailability in data-centers  commodity components fail frequently  soLware glitches, maintenance shutdowns, power</p>
    <p>failures</p>
    <p>Redundancy gives more reliability and availability</p>
  </div>
  <div class="page">
    <p>Popular approach: Replica.on</p>
    <p>Mul.ple copies of data across machines</p>
    <p>E.g., GFS, HDFS store 3 replicas by default</p>
    <p>Typically stored across different racks</p>
    <p>a, b: data blocks</p>
    <p>block 1 a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
  </div>
  <div class="page">
    <p>Petabyte Scale data: Replica.on expensive</p>
    <p>Moderately sized data: storage is cheap</p>
    <p>replica.on viable</p>
    <p>Mul.ple tens of PBs  aggregate storage no longer cheap  replica.on is expensive</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b parity blocks</p>
    <p>data blocks block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Erasure Codes Replication Reed-Solomon (RS) code</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>Redundancy 2x 2x</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b parity blocks</p>
    <p>data blocks block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Erasure Codes Replication Reed-Solomon (RS) code</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>First order comparison:</p>
    <p>tolerates any one failure tolerates any two failures</p>
    <p>Redundancy 2x 2x</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b parity blocks</p>
    <p>data blocks block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Erasure Codes Replication Reed-Solomon (RS) code</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>First order comparison:</p>
    <p>tolerates any one failure tolerates any two failures</p>
    <p>Redundancy 2x 2x</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b parity blocks</p>
    <p>data blocks block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Erasure Codes Replication Reed-Solomon (RS) code</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>First order comparison:</p>
    <p>tolerates any one failure tolerates any two failures</p>
    <p>Redundancy 2x 2x</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b parity blocks</p>
    <p>data blocks block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Erasure Codes Replication Reed-Solomon (RS) code</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>First order comparison:</p>
    <p>tolerates any one failure tolerates any two failures</p>
    <p>Redundancy 2x 2x</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b parity blocks</p>
    <p>data blocks block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Erasure Codes Replication Reed-Solomon (RS) code</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>First order comparison:</p>
    <p>tolerates any one failure tolerates any two failures</p>
    <p>In general: order of magnitude higher MTTDL with much lesser storage</p>
    <p>lower MTTDL, high storage requirement</p>
    <p>Redundancy 2x 2x</p>
  </div>
  <div class="page">
    <p>Erasure Codes</p>
    <p>Using RS codes instead of 3-replica.on on less-frequently accessed data has led to</p>
    <p>savings of mul.ple Petabytes in the Facebook Warehouse cluster</p>
  </div>
  <div class="page">
    <p>Reed-Solomon (RS) Codes</p>
    <p>(#data, #parity) RS code:  tolerates failure of any #parity blocks  these (#data + #parity) blocks cons.tute a stripe</p>
    <p>Facebook warehouse cluster uses a (10, 4) RS code</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b</p>
    <p>#data = 2 (data blocks)</p>
    <p>#parity = 2 (parity blocks)</p>
    <p>Example: (2, 2) RS code</p>
  </div>
  <div class="page">
    <p>Why RS codes ?  Maximum possible fault-tolerance for storage overhead</p>
    <p>storage-capacity op.mal  maximum-distance-separable (MDS) (in coding theory parlance)</p>
    <p>Flexibility in choice of parameters  Supports any #data and #parity</p>
  </div>
  <div class="page">
    <p>Why RS codes ?  Maximum possible fault-tolerance for storage overhead</p>
    <p>storage-capacity op.mal  maximum-distance-separable (MDS) (in coding theory parlance)</p>
    <p>Flexibility in choice of parameters  Supports any #data and #parity</p>
    <p>However result in increased download and disk IO during data recovery</p>
  </div>
  <div class="page">
    <p>Data Recovery: Increased download &amp; disk IO</p>
    <p>Replication</p>
    <p>a</p>
    <p>Download &amp; IO 1x</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>Data Recovery: Increased download &amp; disk IO</p>
    <p>Replication</p>
    <p>a</p>
    <p>Download &amp; IO 1x Download &amp; IO</p>
    <p>b</p>
    <p>a+b</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b</p>
    <p>Reed-Solomon code</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a a</p>
  </div>
  <div class="page">
    <p>Data Recovery: Increased download &amp; disk IO</p>
    <p>Replication</p>
    <p>a</p>
    <p>Download &amp; IO 1x Download &amp; IO</p>
    <p>b</p>
    <p>a+b</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>b</p>
    <p>a+b</p>
    <p>a+2b</p>
    <p>Reed-Solomon code</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a a</p>
    <p>In general Download &amp; IO required = #data x (size of data to be recovered)</p>
  </div>
  <div class="page">
    <p>Burdens the already oversubscribed Top-of-Rack and higher level switches</p>
    <p>Data Recovery: Burden on TOR switches</p>
    <p>TOR TOR TOR TOR</p>
    <p>AS/Router</p>
    <p>a b a + b</p>
    <p>a + 2b</p>
    <p>node 1 node 2 node 3 node 4</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>Outline  Introduc.on: Erasure coding in data centers</p>
    <p>Low storage, high fault-tolerance  High download &amp; disk IO during recovery</p>
    <p>Measurements from Facebook warehouse cluster in produc.on</p>
    <p>Proposed alterna.ve: Piggybacked-RS codes  Same storage overhead &amp; fault tolerance  30% reduc.on in download &amp; disk IO</p>
  </div>
  <div class="page">
    <p>Brief System Descrip.on</p>
    <p>HDFS cluster with mul.ple thousands of nodes  Mul.ple tens of PBs and growing  Data immutable un.l deleted Reducing storage requirements is of high importance</p>
  </div>
  <div class="page">
    <p>Brief System Descrip.on</p>
    <p>HDFS cluster with mul.ple thousands of nodes  Mul.ple tens of PBs and growing  Data immutable un.l deleted</p>
    <p>Uses (10, 4) RS code to reduce storage requirements  on less-frequently accessed data</p>
    <p>Mul.ple PBs of RS coded data</p>
    <p>Reducing storage requirements is of high importance</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 10</p>
    <p>data blocks</p>
    <p>Brief System Descrip.on</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 10</p>
    <p>block 11</p>
    <p>block 14</p>
    <p>data blocks</p>
    <p>parity blocks</p>
    <p>Brief System Descrip.on</p>
  </div>
  <div class="page">
    <p>Machine Unavailability Events</p>
    <p>Median of 50 machine-unavailability events logged per day</p>
    <p>From HDFS Name-Node logs  Logged when no heart-beat for &gt; 15min  Blocks marked unavailable, periodic recovery process</p>
    <p>#m ac</p>
    <p>hi ne</p>
    <p>-u na</p>
    <p>va ila</p>
    <p>bi lit</p>
    <p>y ev</p>
    <p>en ts</p>
    <p>lo gg</p>
    <p>ed &quot;</p>
    <p>Day&quot;</p>
  </div>
  <div class="page">
    <p>Dominant scenario: Single block recovery</p>
    <p># blocks missing in stripe % of stripes with missing blocks</p>
    <p>5 9 x 10-9</p>
    <p>Missing blocks per stripe</p>
  </div>
  <div class="page">
    <p>#Blocks Recovered &amp; Cross-rack Transfers</p>
    <p>Median of 180 TB transferred across racks per day for recovery opera.ons</p>
    <p>Around 5 .mes that under 3-replica.on</p>
  </div>
  <div class="page">
    <p>Outline  Introduc.on: Erasure coding in data centers</p>
    <p>Low storage, high fault-tolerance  High download &amp; disk IO during recovery</p>
    <p>Measurements from Facebook warehouse cluster in produc.on</p>
    <p>Proposed alterna.ve: Piggybacked-RS codes  Same storage overhead &amp; fault tolerance  30% reduc.on in download &amp; disk IO</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>Step 1: Take a (2, 2) Reed-Solomon code</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2</p>
    <p>data blocks</p>
    <p>parity blocks</p>
    <p>Piggybacking: Toy Example</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2</p>
    <p>a1+a2</p>
    <p>a2  b2  b1+b2</p>
    <p>Piggybacking: Toy Example</p>
    <p>(In (2,2) RS code: recovery download &amp; IO = 4 bytes)</p>
  </div>
  <div class="page">
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>Step 2: Add piggybacks to parity nodes</p>
    <p>Piggybacking: Toy Example</p>
    <p>No addi.onal storage!</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance (toy example)</p>
    <p>Same fault tolerance as RS code: can tolerate failure of any 2 nodes</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance (toy example)</p>
    <p>Same fault tolerance as RS code: can tolerate failure of any 2 nodes</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>a1 a2</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance (toy example)</p>
    <p>Same fault tolerance as RS code: can tolerate failure of any 2 nodes</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>a1 a2</p>
    <p>subtract</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance (toy example)</p>
    <p>Same fault tolerance as RS code: can tolerate failure of any 2 nodes</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>a1 a2  b1 b2</p>
  </div>
  <div class="page">
    <p>Download &amp; IO only 3 bytes (instead of 4 bytes as in RS)</p>
    <p>Recovery (toy example)</p>
    <p>block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
  </div>
  <div class="page">
    <p>Download &amp; IO only 3 bytes (instead of 4 bytes as in RS)</p>
    <p>Recovery (toy example)</p>
    <p>b2  b1+b2 block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>b1+2b2+a1</p>
  </div>
  <div class="page">
    <p>Download &amp; IO only 3 bytes (instead of 4 bytes as in RS)</p>
    <p>Recovery (toy example)</p>
    <p>b2  b1+b2 block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>b1+2b2+a1</p>
    <p>subtract</p>
  </div>
  <div class="page">
    <p>Download &amp; IO only 3 bytes (instead of 4 bytes as in RS)</p>
    <p>Recovery (toy example)</p>
    <p>b2  b1+b2 block 1</p>
    <p>block 2</p>
    <p>block 3</p>
    <p>block 4</p>
    <p>a1</p>
    <p>a2</p>
    <p>a1+a2</p>
    <p>a1+2a2</p>
    <p>b1</p>
    <p>b2</p>
    <p>b1+b2</p>
    <p>b1+2b2+a1</p>
    <p>b1+2b2+a1</p>
    <p>subtract</p>
  </div>
  <div class="page">
    <p>General Piggybacking Recipe</p>
    <p>To construct a Piggybacked-RS code:</p>
    <p>Step 1: Take RS code with iden.cal parameters</p>
    <p>Step 2: Add carefully designed func.ons from one byte stripe on to another  retains same fault-tolerance and storage overhead  piggyback func.ons designed to reduce amount of download and IO for recovery</p>
    <p>General theory and algorithms: K.V. Rashmi, Nihar Shah, K. Ramchandran, A Piggybacking Design Framework for Read-and Download-efficient Distributed Storage Codes, in IEEE International Symposium on Information Theory (ISIT) 2013.</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS</p>
    <p>alterna.ve to (10,4) RS currently used in HDFS</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10)</p>
    <p>f3(b1,...,b10)</p>
    <p>f4(b1,...,b10)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Step 1: Take a (10, 4) Reed-Solomon code</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Step 2: Add `Piggybacks</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Tolerates any 4 block failures</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Tolerates any 4 block failures</p>
    <p>recover a1,...,a10 like in RS</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Tolerates any 4 block failures</p>
    <p>recover a1,...,a10 like in RS</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f1(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f1(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f1(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Tolerates any 4 block failures</p>
    <p>recover a1,...,a10 like in RS</p>
    <p>subtract piggybacks (func.ons of a1,...,a10)</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f1(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f1(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f1(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Tolerates any 4 block failures</p>
    <p>recover a1,...,a10 like in RS</p>
    <p>subtract piggybacks (func.ons of a1,...,a10)</p>
    <p>recover b1,...,b10 like in RS</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Efficient data-recovery</p>
    <p>block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>recover b1,...,b10 like in RS</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>recover b1,...,b10 like in RS</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>recover b1,...,b10 like in RS</p>
    <p>subtract f2(b1,...,b10)</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>recover b1,...,b10 like in RS</p>
    <p>subtract f2(b1,...,b10)</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>recover b1,...,b10 like in RS</p>
    <p>subtract f2(b1,...,b10) remove effect of a2 and a3 to get a1</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 1 a1  b1</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f1(a1,a2,a3,0,...,0)</p>
    <p>a10  b10</p>
    <p>. . . . . .</p>
    <p>. . . block 2 a2  b2</p>
    <p>block 3 a3  b3  . . .</p>
    <p>. . .</p>
    <p>recover b1,...,b10 like in RS</p>
    <p>subtract f2(b1,...,b10) remove effect of a2 and a3 to get a1</p>
    <p>Download &amp; IO: 20 in RS 13 in Piggybacked-RS</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Repair of blocks 1,2,3</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Repair of blocks 4,5,6</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Repair of blocks 7,8,9</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>(10,4) Piggybacked-RS code</p>
    <p>block 11</p>
    <p>block 12</p>
    <p>block 13</p>
    <p>block 14</p>
    <p>block 1</p>
    <p>block 10</p>
    <p>f1(a1,...,a10)</p>
    <p>f2(a1,...,a10)</p>
    <p>f3(a1,...,a10)</p>
    <p>f4(a1,...,a10)</p>
    <p>f1(b1,...,b10)</p>
    <p>f2(b1,...,b10) + f4(a1,a2,a3,0,...,0)</p>
    <p>f3(b1,...,b10) + f4(0,...,0,a4,a5,a6,0,...,0)</p>
    <p>f4(b1,...,b10) + f4(0,...,0,a7,a8,a9,0)</p>
    <p>a1</p>
    <p>a10</p>
    <p>b1</p>
    <p>b10</p>
    <p>. . . . . .</p>
    <p>. . .</p>
    <p>Repair of block 10</p>
    <p>Efficient data-recovery</p>
  </div>
  <div class="page">
    <p>Expected Performance  Storage efficiency and reliability</p>
    <p>no addi.onal storage vs RS  same fault-tolerance vs RS</p>
  </div>
  <div class="page">
    <p>Expected Performance  Storage efficiency and reliability</p>
    <p>no addi.onal storage vs RS  same fault-tolerance vs RS</p>
    <p>Reduced recovery download &amp; disk IO  30% less for single block recoveries in stripe  poten.al reduc.on &gt;50TB cross-rack traffic per day</p>
  </div>
  <div class="page">
    <p>Expected Performance  Storage efficiency and reliability</p>
    <p>no addi.onal storage vs RS  same fault-tolerance vs RS</p>
    <p>Reduced recovery download &amp; disk IO  30% less for single block recoveries in stripe  poten.al reduc.on &gt;50TB cross-rack traffic per day</p>
    <p>Recovery .me: expect faster recovery  need to connect to more nodes  system limited by disk and network bandwidth  corroborated by preliminary experiments  hence, expect higher MTTDL</p>
  </div>
  <div class="page">
    <p>Related Work: Measurements  Exis.ng Studies</p>
    <p>Availability studies: Schroeder &amp; Gibson 2007, Jiang et al. 2008, Ford et al. 2010 etc.  Comparisons between replica.on and erasure codes: Rodrigues &amp; Liskov 2005, Weatherspoon &amp; Kubiatowicz 2002 etc.</p>
    <p>Our focus  Increased network traffic due to increased downloads during recovery of erasure-coded data</p>
    <p>Measurements from Facebook warehouse cluster in produc.on</p>
  </div>
  <div class="page">
    <p>Huang et al. (Windows Azure) 2012, Sathiamoorthy et al. (Xorbas) 2013  add addi.onal pari.es: need extra storage</p>
    <p>Hu et al. (NCFS) 2011  Network file system using repair-by-transfer codes (Shah et al.): need extra storage</p>
    <p>Khan et al. (Rotated-RS) 2012  #parity  3 (also, #data  36)</p>
    <p>Xiang et al., Wang et al. (Op.mized RDP &amp; EVENODD) 2010  #parity &lt;=2</p>
    <p>Our solu;on: Piggybacked-RS  no addi.onal storage: storage-capacity op.mal  any #data &amp; #parity  as good as or bezer than Rotated-RS, op.mized RDP &amp; EVENODD</p>
    <p>Related Work: Codes for Efficient Data Recovery</p>
  </div>
  <div class="page">
    <p>Summary and Future Work  Erasure codes require higher download &amp; IO for recovery</p>
    <p>Measurements from Facebook warehouse cluster in produc.on</p>
    <p>Piggybacked-RS: alterna.ve to RS  no addi.onal storage required; same fault-tolerance as RS  30% reduc.on in download &amp; disk IO for recovery</p>
    <p>Future Work  implementa.on in HDFS (in progress at UC Berkeley)  empirical evalua.on</p>
  </div>
</Presentation>
