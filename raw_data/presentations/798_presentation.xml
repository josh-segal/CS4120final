<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Labtainers:</p>
    <p>A Docker-based Framework for Cybersecurity Labs</p>
    <p>USENIX Workshop on Advances in Security Education 15 August 2017</p>
    <p>Cynthia Irvine, Michael Thompson, Michael McCarrin, and Jean Khosalim</p>
    <p>Department of Computer Science Naval Postgraduate School</p>
  </div>
  <div class="page">
    <p>Experiential learning is desirable, but</p>
    <p>Institutional infrastructure may be absent  Labs are difficult to build and difficult to maintain</p>
    <p>- Overworked instructors need well-vetted labs  Student platform diversity introduces problems</p>
    <p>- Different operating systems, libraries, software tools, etc. - Platform setup for lab distracts from learning objectives - Lab results vary widely due to configuration differences</p>
    <p>Experiential labs require exploration - How is this observed?</p>
    <p>Students may share or reuse other work - Need individualized labs, but grading effort becomes large</p>
    <p>ASE, 15 Aug 2017 22</p>
  </div>
  <div class="page">
    <p>Labtainers Objectives</p>
    <p>Consistent and Fair  Students execute labs in identical environments  Instructors see consistent results and assess students on their work</p>
    <p>rather than environmental effects</p>
    <p>Parameterizable  Labs configured so each students work can be unique  Labs are same level of difficulty for all students  Expected results are parameterized to streamline grading</p>
    <p>Support for Automatic Assessment  Collected student work is parsed for specific outputs  Tools may be developed to support assessment of particular aspects</p>
    <p>of exercise</p>
  </div>
  <div class="page">
    <p>Stand-alone Linux Cybersecurity Labs</p>
    <p>Multi-component network topologies - Packaged using Docker containers - Pre-configured execution environments</p>
    <p>Local to students computer - One Linux host, (e.g., VM) runs many containers - No per-lab provisioning required by the student</p>
    <p>Public repository of labs &amp; open framework</p>
    <p>ASE, 15 Aug 2017 44</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Linux can run in a VM on a non-Linux platform  Preconfigured containers ensure consistency across</p>
    <p>heterogeneous platforms ASE, 15 Aug 2017 5</p>
    <p>Hardware</p>
    <p>Linux</p>
    <p>Docker Engine</p>
    <p>Bins/Libs Bins/Libs</p>
    <p>A p p A</p>
    <p>A p p B</p>
    <p>Other Applications</p>
    <p>A p p A</p>
    <p>A p p A</p>
    <p>A p p B</p>
  </div>
  <div class="page">
    <p>Why Containers?</p>
    <p>Similar resource and naming isolation - Dockerfiles simplify provisioning of containers</p>
    <p>Student laptop can run several containers - But may be bogged down by 2 or more VMs - Enables labs with many networked components</p>
    <p>All containers share Linux kernel with host - But can have distinct packages &amp; library versions - Containers limited to Linux</p>
    <p>ASE, 15 Aug 2017 66</p>
  </div>
  <div class="page">
    <p>Parameterization</p>
    <p>Individualizes labs for each student (optional)  Random number seed based on student email  Example: size of buffer to overflow</p>
    <p>- Symbolic replacement of value in source code - Vulnerable program compiled during first run - Affects offset of return address to overwrite</p>
    <p>ASE, 15 Aug 2017 77</p>
  </div>
  <div class="page">
    <p>Automated Assessment</p>
    <p>Student activity and files collected as artifacts - Mostly transparent to students, they see Linux - Bash hooks capture stdin &amp; stdout - Artifacts forwarded to instructor</p>
    <p>Instructor tools assess student performance - Expected results as defined by lab designer - View of students file and ability to run programs</p>
    <p>Lab exercises individualized for students - Discourages sharing answers &amp; solution mining - Automated assessment makes this practical</p>
    <p>ASE, 15 Aug 2017 88</p>
  </div>
  <div class="page">
    <p>Roles in the World of Labtainers</p>
    <p>Student Performs lab exercise. Learns! Delivers results to instructor for assessment.</p>
    <p>Designer SME who works with instructor to create labs based on learning objectives. Fine tunes and updates labs. May support auxiliary assessment tools.</p>
    <p>Instructor Defines learning objectives. Works with (or is) designer. Ensures student readiness to perform labs and conducts assessments.</p>
    <p>ASE, 15 Aug 2017 99</p>
  </div>
  <div class="page">
    <p>Designer-created configuration files provide automation (red) for - Container setup and artifact analysis</p>
    <p>Manual steps (green) : student runs lab, student sends artifacts to instructor, instructor reviews assessment table</p>
    <p>ASE, 15 Aug 2017 1010</p>
    <p>Student Linux System Instructor Linux System</p>
    <p>artifacts</p>
    <p>Student Container</p>
    <p>Docker</p>
    <p>artifacts</p>
    <p>artifacts</p>
    <p>Instructor Container</p>
    <p>Docker</p>
    <p>artifacts</p>
    <p>a</p>
    <p>b</p>
    <p>f</p>
    <p>e</p>
    <p>d</p>
    <p>c</p>
  </div>
  <div class="page">
    <p># goals.config # # Please see labdesigner.md</p>
    <p># Recorded actions or results of student work to be summarized # for instructor</p>
    <p>telnetview = matchany : string_equal : fileview : parameter.FSTRING sshview = matchany : string_equal : sshfileview : parameter.FSTRING tcpdump_plain = is_true : tcpdumprun failed_login = is_true : failed_login 1111</p>
    <p># results.config # # Please see labdesigner.md</p>
    <p># The following are meant to identify artifacts from telnet lab</p>
    <p>fileview = client:telnet.stdout : 4 : STARTSWITH : My string is: sshfileview = client:ssh.stdout : 4 : STARTSWITH : My string is: tcpdumprun = server:tcpdump.stdout : CONTAINS : mydoghas failed_login = server:/var/log/auth.log : CONTAINS : FAILED LOGIN</p>
    <p>ASE, 15 Aug 2017</p>
  </div>
  <div class="page">
    <p># Filename : start.config # Description: # A simple configuration file read by start.py</p>
    <p># Defines the containers used by both students and instructors</p>
    <p>GLOBAL_SETTINGS # GRADE_CONTAINER - container where instructor will perform grading</p>
    <p>GRADE_CONTAINER client # HOST_HOME_XFER - directory to transfer artifact to/from containers HOST_HOME_XFER seed_dir/</p>
    <p># LAB_MASTER_SEED - this is the master seed string specific to this laboratory LAB_MASTER_SEED telnetlab_jean_seed</p>
    <p># SUBNETS NETWORK SOME_NETWORK</p>
    <p>MASK 172.20.0.0/24 GATEWAY 172.20.0.100</p>
    <p># Container name and settings</p>
    <p>CONTAINER client USER ubuntu TERMINALS 2 SOME_NETWORK 172.20.0.2</p>
    <p>CONTAINER server USER ubuntu</p>
    <p>TERMINALS 1 SOME_NETWORK 172.20.0.3 1212</p>
    <p>Note</p>
    <p>For a simple single-container lab, there is a default configuration file.</p>
    <p>ASE, 15 Aug 2017</p>
  </div>
  <div class="page">
    <p>Parameterization</p>
    <p>ASE, 15 Aug 2017 1313</p>
    <p># parameter.config # # Please see labdesigner.pdf</p>
    <p># This string provides per-student parameterization of telnet lab FSTRING : HASH_REPLACE : telnetlab.server.student=filetoview.txt : TELNET_STRING : mytelnetfilestirng</p>
    <p>Labs parameterized using - Per student unique string, e.g. email address - Both student and instructor know string</p>
  </div>
  <div class="page">
    <p>Assessment Support</p>
    <p>ASE, 15 Aug 2017 1414</p>
    <p>telnet SSH tcpdump failed_login Alan Y X X X Alice Y Y X X Barbara Y Y Y Y Bill X Y Y X Chuck X X X X Corrine Y Y Y Y</p>
    <p>Instructor starts the lab and automatically - Containers created - Student artifacts pulled in - Results configuration sets up assessment environment - Loop through all students using</p>
    <p>Parameter configuration  Goals configuration</p>
    <p>- Table of per-student goals produced to support assessment</p>
  </div>
  <div class="page">
    <p>Status and Near-Term Objectives</p>
    <p>A few proof of concept labs from SEED  Current Labs</p>
    <p>- Format string (printf) vulnerabilities - Buffer overflow - Forensics - Cryptographic hashes - Telnet (plaintext password on the network) - VPN (configuring Openvpn to protect traffic) - nmap - gdb introduction - Several more</p>
    <p>ASE, 15 Aug 2017 1515</p>
  </div>
  <div class="page">
    <p>Status and Near-Term Objectives</p>
    <p>Summer 2017 - Internal testing - Three highschool interns - Additional labs, e.g. ICS security</p>
    <p>Early Fall 2017, initial general release</p>
    <p>ASE, 15 Aug 2017 1616</p>
  </div>
  <div class="page">
    <p>Join the Labtainers Team</p>
    <p>The beta version of Labtainers can be found at http://my.nps.edu/web/cisr/labtainers</p>
    <p>Contact Cynthia Irvine irvine@nps.edu</p>
    <p>Mike Thompson mftomps@nps.edu</p>
    <p>Department of Computer Science</p>
    <p>Naval Postgraduate School Monterey, CA 93943 U.S.A</p>
    <p>ASE, 15 Aug 2017 1717</p>
  </div>
</Presentation>
