<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Block-level RAID is dead</p>
    <p>Raja Appuswamy, David C. van Moolenbroek, Andrew S. Tanenbaum</p>
    <p>Vrije Universiteit, Amsterdam</p>
    <p>June 22, 2010</p>
  </div>
  <div class="page">
    <p>Traditional storage stack</p>
    <p>Originally one file system per disk</p>
    <p>Later RAID layer was introduced</p>
    <p>Block-level RAID and Volume managers</p>
    <p>Storage stack has remained the same for decades</p>
    <p>Compatibility-driven integration has fatal flaws Disk</p>
    <p>driver</p>
    <p>SW</p>
    <p>RAID</p>
    <p>File</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>Problem 1: Silent data corruption</p>
    <p>Disks exhibit fail-partial failure modes</p>
    <p>Lost, torn, misdirected writes Such failures result in silent data corruption</p>
    <p>Checksumming algorithms fail to detect corruption</p>
    <p>Most algorithms detect only a subset of all failure modes Parental checksumming detects all classes of failures</p>
    <p>Parental checksumming fails with block-level RAID</p>
    <p>RAID-initiated reads are unverified RAID-initiated reads propagate corruption</p>
  </div>
  <div class="page">
    <p>Problem 2: Heterogeneity issues</p>
    <p>Integration of new devices is an interesting problem</p>
    <p>Building device-specific FS</p>
    <p>Not compatible with block-based RAID</p>
    <p>Building a translation layer</p>
    <p>Widens the Information gap Duplication of functionality</p>
  </div>
  <div class="page">
    <p>Problem 3: Device failure</p>
    <p>Traditional RAID fails ungracefully</p>
    <p>Graceful degradation has two requirements</p>
    <p>Selective metadata replication Fault-isolated file placement</p>
    <p>Semantically unaware traditional RAID cannot fail gracefully</p>
  </div>
  <div class="page">
    <p>Problem 4: Administration nightmare</p>
    <p>Too many Volume management abstractions</p>
    <p>PVs, VGs, LVs, FSes, etc. Simple tasks need several error-prone steps</p>
    <p>Too many tunable parameters</p>
    <p>Chunk size, stripe width, LV size, etc. Improper configuration leads to bad performance</p>
    <p>Coarse-grained policy specification</p>
    <p>Need more flexibility (per file, directory or volume)</p>
  </div>
  <div class="page">
    <p>Problem 5: System failure</p>
    <p>Crashes/power failures result in Write holes</p>
    <p>HW RAID uses NVRAM to sidestep this issue</p>
    <p>Software RAID cannot rely on NVRAM</p>
    <p>Whole-disk resynchronization is impractical Journaling duplicates functionality and affects performance</p>
  </div>
  <div class="page">
    <p>Loris - the new storage stack</p>
    <p>File-based interface between layers</p>
    <p>Each file has a unique file identifier Each file has a set of attributes</p>
    <p>File-oriented requests:</p>
    <p>create truncate delete getattr read setattr write sync</p>
  </div>
  <div class="page">
    <p>Modular split and reliable flip (1)</p>
    <p>Disk</p>
    <p>driver</p>
    <p>SW</p>
    <p>RAID</p>
    <p>File</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>Modular split and reliable flip (2)</p>
    <p>Disk</p>
    <p>driver</p>
    <p>SW</p>
    <p>RAID</p>
    <p>File</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>Loris - the new storage stack</p>
    <p>POSIX call processing</p>
    <p>Directory handling</p>
    <p>Data caching</p>
    <p>Logical policy storage</p>
    <p>RAID-like file multiplexing</p>
    <p>Parental checksums</p>
    <p>Metadata caching</p>
    <p>On-disk layout</p>
  </div>
  <div class="page">
    <p>Solution to problem 1: End-to-end data integrity</p>
    <p>Physical layer converts fail-partial to fail-stop failures</p>
    <p>Physical layer verifies all requests alike</p>
    <p>RAID algorithms provide recovery from fail-stop failures</p>
  </div>
  <div class="page">
    <p>Solution to problem 2: Embracing heterogeneity</p>
    <p>Device-specific physical layers</p>
    <p>Can exploit device access characteristics Eliminate multiple translation steps</p>
    <p>RAID and Volume management across device families</p>
    <p>File abstraction hides device-specific vagaries No need to reimplement RAID algorithms per device family</p>
  </div>
  <div class="page">
    <p>Solution to problem 3: Graceful failure</p>
    <p>Directories replicated on all devices</p>
    <p>Naming layer chooses RAID 1 policy</p>
    <p>Zero-effort fault-isolated placement</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 1</p>
    <p>FILE 3</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 1</p>
    <p>FILE 2</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 2</p>
    <p>FILE 3</p>
  </div>
  <div class="page">
    <p>Solution to problem 3: Graceful failure</p>
    <p>Directories replicated on all devices</p>
    <p>Naming layer chooses RAID 1 policy</p>
    <p>Zero-effort fault-isolated placement</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 1</p>
    <p>FILE 3</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 1</p>
    <p>FILE 2</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 2</p>
    <p>FILE 3</p>
  </div>
  <div class="page">
    <p>Solution to problem 3: Graceful failure</p>
    <p>Directories replicated on all devices</p>
    <p>Naming layer chooses RAID 1 policy</p>
    <p>Zero-effort fault-isolated placement</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 1</p>
    <p>FILE 3</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 1</p>
    <p>FILE 2</p>
    <p>DIRECTORY FILE</p>
    <p>FILE 2</p>
    <p>FILE 3</p>
  </div>
  <div class="page">
    <p>Solution to problem 4: Simplified administration</p>
    <p>File pools similar to storage pools</p>
    <p>New device  new source of files Completely automate error-prone tasks File systems/Volumes share the file pool</p>
    <p>Flexible policy assignment</p>
    <p>Logical layer provides mechanism Any layer can assign policies Policies per file, directory, or volume</p>
  </div>
  <div class="page">
    <p>Solution to problem 5: Crash recovery</p>
    <p>Traditional FS recovery techniques can be used</p>
    <p>Journaling in physical layer (ext3) Transactional COW (ZFS)</p>
    <p>Goal is to protect important user data</p>
    <p>Metadata journaling does not help Full data journaling is very expensive Can we do selective data journaling?</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We examined block-level RAID along several dimensions</p>
    <p>We highlighted several fatal flaws</p>
    <p>We suggested a simple, yet fundamental change to the stack</p>
    <p>We showed how the new stack solves all issues by design</p>
  </div>
</Presentation>
