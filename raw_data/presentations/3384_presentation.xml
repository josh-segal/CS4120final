<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SmartPool: practical decentralized pool mining</p>
    <p>Loi Luu, Yaron Velner, Jason Teutsch, and Prateek Saxena August 18, 2017</p>
  </div>
  <div class="page">
    <p>Mining pools</p>
  </div>
  <div class="page">
    <p>Miners role in cryptocurrencies</p>
    <p>Bitcoins blockchain contains financial transactions.  Ethereums blockchain contains stateful programs called smart</p>
    <p>contracts.</p>
    <p>Anonymous miners maintain the integrity of the blockchain in exchange for protocol-generated block rewards.</p>
    <p>Definition: A cryptocurrency is a decentralized network which maintains a permanent, public ledger. The ledger is called a blockchain.</p>
  </div>
  <div class="page">
    <p>The mining process Miners race to solve a hard, computational problem.</p>
    <p>Block Problem: Let D  0 be some fixed difficulty. Find a nonce such that</p>
    <p>A block satisfying the above property is valid.</p>
    <p>Bitcoin block rewards as of August 2017 are 12.5 BTC (43,000 USD).</p>
  </div>
  <div class="page">
    <p>Pooled mining The probability of a given miner finding the next block is:</p>
    <p>New blocks occur, on average, every 10 minutes on Bitcoin and 15--20 seconds on Ethereum, but:  an ASIC hardware may take years to mine a single block, and  most miners prefer more steady income.</p>
    <p>Therefore miners join hands.</p>
    <p>Mining pools:  share CPU power and rewards among miners,  reduce reward variance, and  add security through increased participation.</p>
  </div>
  <div class="page">
    <p>Measuring pool member contributions</p>
    <p>A valid share solves a Block Problem with relaxed difficulty (d &gt;&gt; D).</p>
    <p>Valid block hash(block, nonce, data)  D</p>
    <p>Valid share hash(block, nonce, data)  d</p>
    <p>Every valid block is a valid share.  d/D fraction of valid shares are valid blocks.  Pool (roughly) pays d/D block reward per share.</p>
  </div>
  <div class="page">
    <p>Mining network overview</p>
    <p>solo miner solo miner solo miner</p>
    <p>pool members</p>
    <p>block</p>
    <p>share</p>
    <p>Pool operator</p>
    <p>Network (Bitcoin, Ethereum)</p>
    <p>Pool</p>
    <p>Pool members must submit shares such that block rewards are payable to pool operator.</p>
  </div>
  <div class="page">
    <p>Centralization in Bitcoin and Ethereum</p>
    <p>Ethereums mining power distribution (https://etherscan.io , 28 Jul 2017)</p>
    <p>Bitcoins mining power distribution (https://blockchain.info , 28 Jul 2017)</p>
  </div>
  <div class="page">
    <p>Censorship Centralized mining pool operators can:  influence which transactions enter the blockchain,</p>
    <p>F2Pool Allegedly Prevented Users From Investing in Status ICO</p>
    <p>control Ethereums gas limit,  inflate gas prices, and  collude with each other (e.g. selfish mining, 51% attack).</p>
  </div>
  <div class="page">
    <p>Other single points of failure</p>
    <p>Network partition vulnerability [Apostolaki, Zohar, Vanbever IEEE S&amp;P 17]  Geopolitical consolidation  Pool members must trust their operator to pay fairly for shares  Protocol upgrades (e.g. failure to activate Segwit)</p>
  </div>
  <div class="page">
    <p>Decentralized pool operators</p>
  </div>
  <div class="page">
    <p>Smart contracts</p>
    <p>smart contracts</p>
    <p>Code Storage</p>
    <p>data</p>
    <p>users tokens</p>
    <p>consensus via blockchain</p>
    <p>Diagram credit: Andrew Miller</p>
  </div>
  <div class="page">
    <p>Ethereum BlockchainMiners Local environment</p>
    <p>Turning a smart contract into a pool operator</p>
    <p>Pool Smart</p>
    <p>Contract Pools</p>
    <p>Gateway</p>
    <p>getWork()</p>
    <p>submitWork()</p>
    <p>Work responded</p>
    <p>submitShares</p>
    <p>Users address</p>
    <p>Reward sent when a block mined</p>
    <p>Miner uses the pools address as the coinbase address in their blocks.</p>
    <p>GPU1</p>
    <p>GPU2</p>
  </div>
  <div class="page">
    <p>SmartPool properties Unique to SmartPool:  Decentralized. No central point of failure.  No censorship. Individual miners choose shares.  Low cost. Miners pay only Ethereum transaction fees.  Trustless, automatic payouts. Smart contracts eliminate social contracts.</p>
    <p>Preserved from traditional mining pools:  Low variance. Miners choose share difficulty.  Fair. All participants receive rewards in proportion to their contributions.  Open. Anyone can join or leave at any time.  Anonymous. Mining addresses are untraceable.  Retrofitting. SmartPool works in Ethereum.  No security deposits. Switch on a computer and start mining!</p>
  </div>
  <div class="page">
    <p>Protocol idea #1: substitution</p>
    <p>Whats wrong with this picture?</p>
    <p>Number of submitted shares is large.  Ethereum network cannot handle high</p>
    <p>transaction volume.  Cost to verify a share on-chain may</p>
    <p>exceed share reward.</p>
  </div>
  <div class="page">
    <p>Protocol idea #2: reduce the number of shares</p>
    <p>P2Pools sharechain takes the following approach:</p>
    <p>This scales poorly: more miners implies greater payout variance.</p>
    <p>Other sharechain complications:  High variance payouts (due to infrequent blocks)  Many orphan shares (due to short block time)  Poor security at small scale  Need to check for redundant shares and incentivize block submission</p>
    <p>Adjust share difficulty so that shares occurs once every 30 seconds.</p>
  </div>
  <div class="page">
    <p>Protocol idea #3: probabilistically sample shares</p>
    <p>Problem: What about duplicate shares?</p>
    <p>Solution: Force miners to sort their shares using augmented Merkle trees!</p>
    <p>Get 6 rewards with 4/6 probability</p>
    <p>Get 0 rewards with 2/6 probability</p>
    <p>Sample one share!</p>
    <p>passed</p>
    <p>error detected</p>
    <p>SmartPool batch submission:</p>
    <p>Adding invalid shares to submission does not change expected rewards.</p>
  </div>
  <div class="page">
    <p>Augmented Merkle trees</p>
  </div>
  <div class="page">
    <p>Merkle trees</p>
    <p>Data at the root forces commitment at the leaves.</p>
    <p>Definition: In a Merkle tree, every child is the hash of its parents.</p>
    <p>[1,hash(1,3), 3] [2, hash(2,4), 4]</p>
    <p>hash(1, hash[hash(1,3), hash(2,4)], 4)</p>
  </div>
  <div class="page">
    <p>Augmented Merkle trees</p>
    <p>Definition: An augmented Merkle tree contains additional min and max values at each non-leaf node where min is the minimum of its parents min (and similarly for max).</p>
    <p>The root witnesses a sorting error.</p>
    <p>[1,hash(1,3), 3] [2, hash(2,4), 4]</p>
    <p>hash(1, hash[hash(1,3), hash(2,4)], 4)</p>
  </div>
  <div class="page">
    <p>Sorted augmented Merkle trees</p>
    <p>Definition: An augmented Merkle tree is sorted if its leaves occur in strictly ascending order from left to right.</p>
    <p>In SmartPool, leaves are shares. Share batches are ordered by timestamp.</p>
    <p>[1,hash(1,3), 2] [3, hash(3,4), 4]</p>
    <p>hash(1, hash[hash(1,2), hash(3,4)], 4)</p>
  </div>
  <div class="page">
    <p>Submitting share batches in SmartPool</p>
    <p>Protocol steps: The Miner and Smart contract interact as follows:</p>
    <p>[1,hash(1,3), 2] [3, hash(3,4), 4]</p>
    <p>hash(1, hash[hash(1,2), hash(3,4)], 4)</p>
    <p>M  S: Root of sorted, augmented Merkle tree (batch submission). S  M: Request for a random leaf (containing a share). M  S: Path to leaf.</p>
  </div>
  <div class="page">
    <p>Security analysis</p>
  </div>
  <div class="page">
    <p>Sorting error example</p>
    <p>Definition: An element x in an array is out of order if  there exists a witness to the left which is greater than or equal to x, or  there exists a witness to the right which is less than or equal to x.</p>
    <p>Example: An array with 4 elements out of order.</p>
  </div>
  <div class="page">
    <p>Impact of sorting on deeper tree levels</p>
    <p>Proposition: For any augmented Merkle tree A, the following are equivalent: (i) A is sorted. (ii) For every node x  A, the max of xs left parent is less than the min of</p>
    <p>xs right parent.</p>
    <p>Definition: A node which satisfies (ii) is called valid. A path from a root to a leaf is valid if all its constituents are valid. A path which is not valid is invalid.</p>
    <p>Proof: (i)  (ii): Induction on tree depth. (ii)  (i): min(x) takes the minimum among all nodes above x.</p>
  </div>
  <div class="page">
    <p>Counting sorting errors</p>
    <p>Theorem: Let A be an augmented Merkle tree. (i) If A is sorted, then all paths in A are valid (see previous slide). (ii) If A is not sorted, then every leaf which is out of order lies on an invalid</p>
    <p>path.</p>
    <p>Corollary: Every augmented Merkle tree has at least as many invalid paths as leaves out of order. In particular, there are at least as many invalid paths as there are duplicate values among the leaves.</p>
    <p>Sampling works :)</p>
  </div>
  <div class="page">
    <p>Attack strategies</p>
    <p>An adversary who deviates from intended claim submission behavior does not obtain greater rewards.</p>
    <p>Block withholding. Sampling two shares per submission suffices to deter rational miners (with &lt; 50% power) from dropping blocks.</p>
    <p>Rearrangements. Permuting leaves does not increase expected profits.</p>
    <p>Bogus nodes. Falsifying nodes in the augmented Merkle tree submission does not provide an advantage.</p>
    <p>Repeating shares across submissions. Later submissions must have later timestamps.</p>
  </div>
  <div class="page">
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>Verifying the unverifiable: Ethash</p>
    <p>Problem: Ethereum has a memory-hard proof-of-work puzzle.  Each Ethash instance queries 64 random elements from a 1GB</p>
    <p>dataset.  Smart contract storage costs  2,500,000 USD per GB (July 2017).  1 GB dataset changes every week.  Infeasible to store dataset on-chain!</p>
    <p>Solution: Store the Merkle root of each (precomputable) 1 GB dataset in SmartPools smart contract!  Miners can verify the roots before joining the pool.  Miner include a Merkle proof of the 64 element set in submissions.</p>
  </div>
  <div class="page">
    <p>Operating in Bitcoin</p>
    <p>Ethereum-based SmartPool protocol supports Bitcoin mining.</p>
    <p>Bitcoin coinbase transactions specify whom to pay block reward.  SmartPool shares indicate coinbase payees.  SmartPool maintains an ever-growing list of recent pairs:</p>
    <p>(accepted batch, payee Bitcoin address)  Accepted SmartPool share must reference payees from recent pairs in</p>
    <p>its coinbase field.  Recent pairs list updates periodically.  SmartPool miners submit blocks directly to Bitcoin, and payees from</p>
    <p>recent pairs receive reward in Bitcoin.</p>
  </div>
  <div class="page">
    <p>SmartPool is LIVE!</p>
    <p>ETH mined: 86 blocks  2200 USD/day (June - July 2017)</p>
    <p>SmartPool operating cost: 0.6% fee (compared to 3% for F2Pool)</p>
    <p>Number of miners: 5 (not yet open to public)</p>
    <p>Hashrate: 30 GHs (200 mining rigs, 6 GPU each)</p>
    <p>Ethereum gas cost per submission: 2.6 million gas (gasLimit  6.7 million, Aug. 2017)</p>
  </div>
  <div class="page">
    <p>Project website: http://smartpool.io</p>
    <p>Interested in building Web 3.0? TrueBit is hiring! jt@truebit.io</p>
  </div>
</Presentation>
