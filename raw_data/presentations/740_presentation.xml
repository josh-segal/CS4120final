<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>THE DATACENTER NEEDS AN OPERATING SYSTEM MATEI ZAHARIA, BENJAMIN HINDMAN, ANDY KONWINSKI, ALI GHODSI, ANTHONY JOSEPH, RANDY KATZ, SCOTT SHENKER, ION STOICA</p>
    <p>UC BERKELEY</p>
  </div>
  <div class="page">
    <p>THE DATACENTER IS THE NEW COMPUTER Running todays most popular consumer apps</p>
    <p>Facebook, Google, iCloud, etc</p>
    <p>Needed for big data in business &amp; science</p>
    <p>Widely accessible through cloud computing</p>
    <p>Our claim: this new computer needs an operating system</p>
  </div>
  <div class="page">
    <p>WHY DATACENTERS NEED AN OS Growing diversity of applications</p>
    <p>Computing frameworks: MapReduce, Dryad, Pregel, Percolator, Dremel</p>
    <p>Storage systems: GFS, BigTable, Dynamo, etc</p>
    <p>Growing diversity of users  200+ Hive users at Facebook</p>
    <p>Same reasons computers needed one!</p>
  </div>
  <div class="page">
    <p>WHAT OPERATING SYSTEMS PROVIDE</p>
    <p>Resource Sharing</p>
    <p>Data Sharing Programming Abstractions</p>
    <p>Debugging &amp; Monitoring</p>
    <p>time-sharing, virtual memory,</p>
    <p>ptrace, DTrace, top,</p>
    <p>files, pipes, IPC,  libraries, languages</p>
  </div>
  <div class="page">
    <p>WHAT OPERATING SYSTEMS PROVIDE</p>
    <p>Resource Sharing</p>
    <p>Data Sharing Programming Abstractions</p>
    <p>Debugging &amp; Monitoring</p>
    <p>time-sharing, virtual memory,</p>
    <p>ptrace, DTrace, top,</p>
    <p>files, pipes, IPC,  libraries, languages</p>
    <p>Most importantly: an ecosystem</p>
    <p>enabling independently developed software to interoperate seamlessly</p>
  </div>
  <div class="page">
    <p>TODAYS DATACENTER OPERATING SYSTEM Platforms like Hadoop well-aware of these issues</p>
    <p>Inter-user resource sharing, but at the level of MapReduce jobs (though this is changing)</p>
    <p>InputFormat API for storage systems (but what happens with the next hot platform after Hadoop?)</p>
    <p>Other examples: Amazon services, Google stack</p>
  </div>
  <div class="page">
    <p>TODAYS DATACENTER OPERATING SYSTEM Platforms like Hadoop well-aware of these issues</p>
    <p>Inter-user resource sharing, but at the level of MapReduce jobs (though this is changing)</p>
    <p>InputFormat API for storage systems (but what happens with the next hot platform after Hadoop?)</p>
    <p>Other examples: Amazon services, Google stack</p>
    <p>The problems motivating a datacenter OS are well recognized, but solutions are narrowly targeted</p>
    <p>Can researchers take a longer-term view?</p>
  </div>
  <div class="page">
    <p>TOMORROWS DATACENTER OS</p>
    <p>Resource Sharing</p>
    <p>Data Sharing Programming Abstractions</p>
    <p>Debugging &amp; Monitoring</p>
    <p>time-sharing, virtual memory,</p>
    <p>ptrace, DTrace, top,</p>
    <p>files, pipes, IPC,  libraries, languages</p>
  </div>
  <div class="page">
    <p>RESOURCE SHARING To solve these interaction problems we would like to have a computer made simultaneously available to many users in a manner somewhat like a telephone exchange. Each user would be able to use a console at his own pace and without concern for the activity of others using the system.</p>
    <p>Fernando J. Corbat, 1962</p>
  </div>
  <div class="page">
    <p>RESOURCE SHARING Today, cluster apps are built to run independently and assume they own a fixed set of nodes</p>
    <p>Result: inefficient static partitioning</p>
    <p>Whats the right interface for dynamic sharing?</p>
    <p>App 2</p>
    <p>App 3</p>
  </div>
  <div class="page">
    <p>MEMORY MANAGEMENT Memory is an increasingly important resource</p>
    <p>In-memory iterative processing (Pregel, Spark, etc)  DFS cache for MapReduce cluster could serve</p>
    <p>What are the right memory management algorithms for a parallel analytics cluster?</p>
  </div>
  <div class="page">
    <p>PROGRAMMING AND DEBUGGING Although there are new programming models for applications, system programming remains hard</p>
    <p>Can we identify useful common abstractions? (Chubby, Sinfonia, Mesos are some examples)</p>
    <p>How much can languages (e.g. Go, Erlang) help?</p>
    <p>Debugging is very hard  Magpie, X-Trace, Dapper are some steps here</p>
    <p>Can a clean-slate design of the stack help?</p>
  </div>
  <div class="page">
    <p>HOW RESEARCHERS CAN HELP Focus on paradigms, not only performance</p>
    <p>Industry is spending a lot of time on performance</p>
    <p>Explore clean-slate approaches  Much datacenter software is written from scratch  People using Erlang, Scala, functional models (MR)</p>
    <p>Bring cluster computing to non-experts  Most impactful (datacenter as the new workstation)  Hard to make a Google-scale stack usable without</p>
    <p>a Google-scale ops team</p>
  </div>
  <div class="page">
    <p>CONCLUSION Datacenters are becoming a major platform</p>
    <p>To support a thriving software ecosystem like computers do, they need the equivalent of an OS</p>
    <p>Researchers can take a long-term systems view to problems arising today to enable this</p>
  </div>
</Presentation>
