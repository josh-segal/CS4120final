<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>When Oblivious is Not: Attacks against OPAM</p>
    <p>WOOT20@USENIX-SECURITY</p>
    <p>Nirjhar Roy (Indian Institute of Technology - Kanpur) Nikhil Bansal (Indian Institute of Technology - Kanpur) Gourav Takhar (Indian Institute of Technology - Kanpur) Nikhil Mittal (Fortanix Inc) Pramod Subramanyan (Indian Institute of Technology - Kanpur)</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Attacks on InvisiPage/OPAM</p>
    <p>Covert Channels using Reuse Distances and its evaluation</p>
    <p>Conclusion</p>
    <p>Presentation Roadmap</p>
  </div>
  <div class="page">
    <p>Enclaves Demystified</p>
    <p>Enclaves: hardware-supported environment for isolated execution with strong application-level security guarantees despite the presence of malicious/compromised privileged software</p>
  </div>
  <div class="page">
    <p>Introducing ORAMs</p>
    <p>Interface between a client and and an untrusted server</p>
    <p>Shuffles the data from time to time</p>
    <p>Hides access patterns and access frequencies</p>
    <p>Examples: Square root ORAM, Tree-based ORAMs including Path ORAM, Ring ORAM, etc.</p>
    <p>[i]</p>
    <p>D[[i]]</p>
    <p>R ead D</p>
    <p>[i]</p>
    <p>Client</p>
    <p>O R</p>
    <p>A M</p>
    <p>Interface</p>
    <p>iAccess Oblivious Client</p>
    <p>Untrusted Server</p>
  </div>
  <div class="page">
    <p>ORAM Meets Demand Paging and Enclaves Threat Model</p>
    <p>The Host OS/apps are considered malicious trying to find out access pattern/access frequency/memory content of the pages being read or written</p>
    <p>The OS observes only a random set of pages ( encrypted) getting read/written after in step 3.</p>
    <p>The attacker can choose to tamper the pages but that will detected after step 6 in Runtime</p>
    <p>Attackers having physical access to the memory will also see cipher text 5</p>
    <p>Enclave app</p>
    <p>Runtime</p>
    <p>ORAM Interface</p>
    <p>OS</p>
    <p>Trusted world inside the enclave (ORAM Client)</p>
    <p>Untrusted world outside of enclave (ORAM Server)</p>
    <p>Untrusted Memory</p>
  </div>
  <div class="page">
    <p>Our Contributions  Discovering vulnerability in InvisiPage  Implementation of a demand paging system inside Keystone  Exploiting it to design new attacks:</p>
    <p>The reuse distance attacks  The level tracking attack</p>
    <p>Designing a covert channel using Reuse Distances</p>
  </div>
  <div class="page">
    <p>Attacks on InvisiPage</p>
    <p>Shaizeen Aga and Satish Narayanasamy. 2019. InvisiPage: oblivious demand paging for secure enclaves. In Proceedings of the 46th International Symposium on Computer Architecture (ISCA 19).</p>
  </div>
  <div class="page">
    <p>Introduction to Invisipage/OPAM</p>
    <p>Leaf = 0 Leaf = 1 Leaf = 2 Leaf = 3</p>
    <p>Position map Updated Position map</p>
    <p>ORAM Path Read</p>
    <p>Metadata Tree Data Tree 100</p>
    <p>Leaf = 0 Leaf = 1 Leaf = 2 Leaf = 3</p>
    <p>A ll</p>
    <p>de c+</p>
    <p>a ut</p>
    <p>h an</p>
    <p>d ch</p>
    <p>ec ke</p>
    <p>d</p>
    <p>Dec + auth</p>
    <p>Access (88, Fetch)</p>
  </div>
  <div class="page">
    <p>Introduction to Invisipage/OPAM</p>
    <p>D</p>
    <p>Leaf = 0 Leaf = 1 Leaf = 2 Leaf = 3</p>
    <p>Updated Position map</p>
    <p>ORAM Path Write/Shuffle</p>
    <p>Metadata Tree Data Tree D</p>
    <p>Leaf = 0 Leaf = 1 Leaf = 2 Leaf = 3</p>
    <p>A ll</p>
    <p>ec n</p>
    <p>+ au</p>
    <p>th a</p>
    <p>nd s</p>
    <p>en t</p>
    <p>Access (88, Fetch)</p>
  </div>
  <div class="page">
    <p>Vulnerability in OPAM (Invisipage)  On every page fault or ORAM access exactly one page gets transferred.</p>
    <p>The adversary is able to observe which page got exchanged</p>
    <p>Transferred page is the page of interest and is definitely NOT a dummy page.</p>
    <p>Adversary can calculate number of intervening ORAM accesses</p>
    <p>This in fact leaks information and makes OPAM access not oblivious. 10</p>
  </div>
  <div class="page">
    <p>Reuse Distance:- # of faults between the time a page gets evicted and when the page is brought back to the enclave (i.e, reused).</p>
    <p>This sequence of reuse distances will be different for different types of memory accesses/applications.</p>
    <p>We use this fact to distinguish and predict/identify the secret applications running inside the enclave.</p>
    <p>Introducing Reuse Distance Attack</p>
  </div>
  <div class="page">
    <p>Example of Reuse Distance Attack</p>
    <p>Enclave has 2 physical pages available and LRU is used.</p>
    <p>In Figure (a) every page is reused after 2 page faults and</p>
    <p>In Figure (b), the reuse distance of the root is 2 because the root node is accessed in every iteration and for non-root pages are multiples of 2 because non-root pages may or may not be accessed in successive iterations.</p>
    <p>Iteration 1 Iteration 2</p>
    <p>Figure (b) Repeated Binary Tree TraversalFigure (a) Linear scan over an array</p>
  </div>
  <div class="page">
    <p>Attack Methodology Training</p>
    <p>Collect trace of reuse distances for many apps on many inputs</p>
    <p>Train CNN sequence classifier on these  Classes are the different applications</p>
    <p>Testing</p>
    <p>Run app on a new input never seen before  Measure classification accuracy</p>
    <p>Enclave app</p>
    <p>Runtime</p>
    <p>Invisipage Interface</p>
    <p>OS</p>
    <p>Trusted world inside the enclave (Invisipage Client)</p>
    <p>Untrusted world outside of enclave (Invisipage Client)</p>
    <p>(ocalls) Access (88,Fetch)</p>
    <p>Record (88, Read) ocall</p>
    <p>.</p>
    <p>.</p>
    <p>. Records other faults</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Execute with many (~100-200) inputs and collecte reuse distances traces  Data divided into training and test in 3:1 ratio and evaluation repeated 10 times  Reuse distance trace is used as the input feature  Random splits of the data into training and test datasets</p>
    <p>Secret Application Classification Accuracy (OPAM)</p>
  </div>
  <div class="page">
    <p>Covert Channels Using Reuse Distances</p>
  </div>
  <div class="page">
    <p>Basic Idea  Reuse distance leakage of provides</p>
    <p>a covert channel to leak secret information (e.g. an input genome data).</p>
    <p>Engineering the access patterns to cause a particular sequence of page faults and associated reuse distances</p>
    <p>Interpret the reuse distances to leak the bits 16</p>
    <p>Enclave App (colluding)</p>
    <p>Host OS (colluding)</p>
    <p>Untrusted Memory</p>
    <p>Message Passing</p>
    <p>Page exchanges (paging)</p>
    <p>Trace faults to receive bits</p>
    <p>Reuse distance Covert Channel Model</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Standard enclave threat model corresponding to a software attacker</p>
    <p>Enclave RT and the hardware platform are trusted and we do not use microarchitectural side-channels and/or HW access to DRAM</p>
    <p>Enclave app colludes with host OS to leak sensitive input data</p>
    <p>Host OS is aware of the encoding used by the enclave application</p>
  </div>
  <div class="page">
    <p>Example of an Encoding With Reuse Distance</p>
    <p>Application wants to transmit a message 1001, n = 4 and k = 2</p>
    <p>Page replacement policy is FIFO and enclave has P = 4 pages</p>
    <p>To transmit a bit 1, reuse distance in range [8, 16) (Pages 1-8)</p>
    <p>To transmit a bit 0, reuse distance in the range [0, 8)(Pages 9-16)</p>
    <p>Generate reuse distance sequence (12, 5, 5, 14) corresponding to message 1001</p>
    <p>A 1</p>
    <p>A 2</p>
    <p>A 3</p>
    <p>A 4</p>
    <p>A 5</p>
    <p>A 6</p>
    <p>A 7</p>
    <p>A 8</p>
    <p>A 9</p>
    <p>A 10</p>
    <p>A 11</p>
    <p>A 12</p>
    <p>A 13</p>
    <p>A 14</p>
    <p>A 15</p>
    <p>A 16</p>
    <p>A 1</p>
    <p>A 9</p>
    <p>A 10</p>
    <p>A 2</p>
    <p>E 1</p>
    <p>E 2</p>
    <p>E 3</p>
    <p>E 4</p>
    <p>E 5</p>
    <p>E 6</p>
    <p>E 7</p>
    <p>E 8</p>
    <p>E 9</p>
    <p>E 10</p>
    <p>E 11</p>
    <p>E 12</p>
    <p>E 13</p>
    <p>E 14</p>
    <p>E 15</p>
    <p>E 16</p>
    <p>RU = 12 RU = 14</p>
    <p>RU = 5</p>
    <p>RU = 5</p>
  </div>
  <div class="page">
    <p>Bit Leakage Bandwidth Analysis</p>
    <p>We see a peak bandwidth with arity 4</p>
    <p>As we increase k, more data is transmitted with each page fault, but the number of page-faults required to setup the algorithm also increases and the overheads associated with increased number of initial page faults dominate and we see a steady decline in transmission bandwidth.</p>
  </div>
  <div class="page">
    <p>Conclusions  Introduction of a new side channel attack, The Reuse Distance attack, which</p>
    <p>is able to infer confidential information about an enclaves execution</p>
    <p>Introduction of a new covert channel using reuse distances</p>
    <p>Found and systematically exploited a vulnerability in state-of-the-art approach</p>
    <p>to secure demand paging enclave (Invisipage/OPAM)</p>
  </div>
  <div class="page">
    <p>In Memory of Dr. Pramod Subramanyan</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
</Presentation>
