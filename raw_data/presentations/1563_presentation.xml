<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Copyright 2017 Dell Inc.1</p>
    <p>The Logic of Physical Garbage Collection in Deduplicating Storage</p>
    <p>Fred Douglis</p>
    <p>Abhinav Duggal Philip Shilane</p>
    <p>Tony Wong</p>
    <p>Dell EMC</p>
    <p>Shiqin Yan</p>
    <p>University of Chicago</p>
    <p>Fabiano Botelho</p>
    <p>Rubrik</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.2</p>
    <p>Deduplication in Data Domain Filesystem (DDFS)</p>
    <p>R S T W</p>
    <p>File 1</p>
    <p>W X Y Z</p>
    <p>R S T W Rfp Sfp Tfp Wfp</p>
    <p>R S</p>
    <p>T W</p>
    <p>C1</p>
    <p>C2</p>
    <p>fp CID</p>
    <p>R C1</p>
    <p>S C1</p>
    <p>T C2</p>
    <p>W C2</p>
    <p>Fingerprint Index</p>
    <p>X YC3</p>
    <p>ZC4</p>
    <p>Containers holding chunks</p>
    <p>File 2</p>
    <p>W X Y</p>
    <p>X C3</p>
    <p>Y C3</p>
    <p>Z C4</p>
    <p>Variable sized chunks Variable sized chunks</p>
    <p>Generate fingerprints</p>
    <p>Wfp Xfp Yfp</p>
    <p>Generate fingerprints</p>
    <p>Z Zfp</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.3</p>
    <p>File Representation in DDFS</p>
    <p>L6</p>
    <p>L5</p>
    <p>L5</p>
    <p>L1: Rfp Sfp Tfp Ufp Vfp Wfp Xfp Yfp</p>
    <p>L4</p>
    <p>L3</p>
    <p>L2</p>
    <p>R</p>
    <p>Files represented as a Merkle tree of fingerprints</p>
    <p>L0: Chunks stored on disk in containers</p>
    <p>S</p>
    <p>Y</p>
    <p>L6</p>
    <p>L1 : Rfp Sfp Zfp</p>
    <p>L2</p>
    <p>COPY</p>
    <p>fastcopy creates new root into same</p>
    <p>tree</p>
    <p>Lp chunks (metadata)</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.4</p>
    <p>Deduplication Workloads on Data Domain</p>
    <p>Traditional backups  Weekly full and daily incremental backups</p>
    <p>Full backups tend to be very large  100GBs to TBs  Much content in full backups repeats previous full</p>
    <p>Typically, 10-20x total compression (TC)  20x TC = 10x dedup and 2x compression</p>
    <p>New workloads  Synthetic full backups</p>
    <p>Send changes and a recipe to create a single full backup from some previous backup</p>
    <p>Daily fulls  High TC (100x-400x or higher)</p>
    <p>High file count  100M to 1 billion small files</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.5</p>
    <p>Garbage Collection in a Deduplication Filesystem</p>
    <p>File 1</p>
    <p>R S</p>
    <p>T W</p>
    <p>C1</p>
    <p>C2</p>
    <p>X YC3</p>
    <p>ZC4</p>
    <p>Containers holding chunks</p>
    <p>File 2</p>
    <p>Shared chunk</p>
    <p>Duplicate chunk</p>
    <p>fp CID</p>
    <p>R C1</p>
    <p>S C1</p>
    <p>T C2</p>
    <p>W C2</p>
    <p>Fingerprint Index</p>
    <p>X C3</p>
    <p>Y C3</p>
    <p>Z C4</p>
    <p>File 3</p>
    <p>Q C5</p>
    <p>Y C5Q YC5</p>
    <p>Duplicates are sometimes written to improve throughput</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.6</p>
    <p>Evolution of GC in DDFS</p>
    <p>Logical GC (LGC)  Depth-first traversal of per-file Merkle tree on disk to mark live</p>
    <p>chunks in memory  In-memory data structures may not allow system to track all chunks,</p>
    <p>so an extra mark phase (pre-phases) is used when necessary</p>
    <p>Physical GC (PGC)  Breadth-first traversal of the physical layout of Merkle trees to mark</p>
    <p>live chunks in memory  Similar to LGC, pre-phases may be needed</p>
    <p>Phase-optimized Physical GC (PGC+)  Improvement over PGC by removing pre-phases, plus other</p>
    <p>optimizations</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.7</p>
    <p>Logical GC Phases</p>
    <p>Merge  Merge in-memory Index on disk</p>
    <p>Enumeration  Depth-first walk and mark live chunks in an in-memory</p>
    <p>Bloom filter called live vector</p>
    <p>Filter  Create live instance vector (also a Bloom filter) from</p>
    <p>live vector to remove the duplicates</p>
    <p>Select  Select best containers to compact</p>
    <p>Copy  Copy live chunks from selected containers into new</p>
    <p>containers and delete old containers</p>
    <p>Mark phase</p>
    <p>Sweep phase</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.8</p>
    <p>Enumeration Phase (Logical GC)</p>
    <p>L6</p>
    <p>L2</p>
    <p>L1 L1</p>
    <p>L6</p>
    <p>L2</p>
    <p>F1 F1</p>
    <p>L1</p>
    <p>L0 L0</p>
    <p>Only Lp chunks are traversed</p>
    <p>shared</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.9</p>
    <p>Logical GC Physical GC  Logical enumeration performance is sensitive to the</p>
    <p>following parameters  Total compression factor  Number of small files  Spatial locality of Lp</p>
    <p>Physical GC addresses these performance issues</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.10</p>
    <p>Physical GC (PGC)  Uses breadth-first walk instead of per-file depth-first walk</p>
    <p>during enumeration</p>
    <p>Uses Perfect Hash Vector(PHV) to store LPs for assisting the breadth-first walk  Uses less memory  Needed for doing checksums to prevent corruption</p>
    <p>New analysis phase to build Perfect Hash Functions for LPs  Remaining phases are same as logical GC</p>
    <p>Live vector Live instance vector</p>
    <p>Bloom filters</p>
    <p>Live vector Live instance vector Walk</p>
    <p>Vector</p>
    <p>Bloom filtersPHV</p>
    <p>LGC PGC</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.11</p>
    <p>Collision Free - Perfect Hashing Vector (PHvec)</p>
    <p>s1 s2  sn 0 1 n - 1</p>
    <p>PHF (m  n)</p>
    <p>Fingerprint set S</p>
    <p>Bit vector</p>
    <p>Collision-free hash function which maps a fingerprint to a unique position in a bit vector</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.12</p>
    <p>Analysis Phase</p>
    <p>FP CID type</p>
    <p>fp1 10 L0 fp2 5 LP fp3 30 LP</p>
    <p>.. ..</p>
    <p>.. ..</p>
    <p>fpn 40</p>
    <p>On-disk container index</p>
    <p>In-memory Perfect Hash functions of Lp</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>#fps</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.13</p>
    <p>Benefits &amp; Costs of Physical Enumeration</p>
    <p>Pro: Sequential scan of containers on disk  All L6, then all L5, down to L1s  Relatively few containers store high-level metadata  No need to keep revisiting same Lp containers due to fastcopy</p>
    <p>(high deduplication)</p>
    <p>Con: extra analysis cost doesnt help traditional workloads</p>
    <p>and due to pre-phases we may have to run analysis twice!</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.14</p>
    <p>LGC and PGC phases (including pre-phases)  Physical GC</p>
    <p>Logical GC 1. Pre-merge 2. Pre-enumeration 3. Pre-filter 4. Pre-select 5. Candidate 6. Enumeration 7. Merge 8. Filter 9. Copy 10. Summary</p>
    <p>Prephases/sampli ng phases</p>
    <p>Pre-phases / sampling phases</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.15</p>
    <p>Physical GC  Phase-optimized Physical GC</p>
    <p>Limitations of Physical GC  Adds 2 extra phases (pre-analysis and analysis)  Slightly degrades GC performance for customers with</p>
    <p>traditional backup workloads</p>
    <p>Motivation for Phase-optimized Physical GC (PGC+)  Avoid pre-phases by representing all chunks in memory  Can we use Perfect hash as a live vector?</p>
    <p>Need only 2.7 bits per fingerprint instead of a 6 bits in Bloom filter  Can we maintain duplicate recipe without using a Bloom</p>
    <p>filter?  Get 50% memory back</p>
    <p>Live vectorLive vector Live instance vectorWalk Vector</p>
    <p>Bloom filtersPHV</p>
    <p>PGC Walk</p>
    <p>Vector</p>
    <p>PHV PHV</p>
    <p>PGC+</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.16</p>
    <p>Phase-optimized Physical GC (PGC+) Phases 1. Merge</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.17</p>
    <p>PGC+ Analysis and Enumeration  Replace Bloom filter with Perfect Hash vector for tracking</p>
    <p>live and dead chunks</p>
    <p>In analysis phase build two Perfect hash vectors  Lp vector called the walk vector (similar to PGC)  All fingerprints(Lp + L0) based Perfect Hash vector called live vector</p>
    <p>Perfect hashing optimizations  NUMA-aware Perfect Hashing  Cache prefetching of Perfect hash functions and values in the Perfect</p>
    <p>Hash Vector</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.18</p>
    <p>PGC+ Copy phase</p>
    <p>fp1, fp2 fp1, fp3 111</p>
    <p>fp1 fp2 fp3 C1 C2</p>
    <p>fp1, fp2 fp1, fp3 010 fp1 fp2 fp3</p>
    <p>C1 C2</p>
    <p>fp1, fp2 fp1, fp3 000 fp1 fp2 fp3</p>
    <p>C1 C2</p>
    <p>Initial state</p>
    <p>Process C2</p>
    <p>Process C1</p>
    <p>Dynamically remove duplicates during</p>
    <p>Copy phase</p>
    <p>Live vector</p>
    <p>Live vector</p>
    <p>Live vector</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.19</p>
    <p>Evaluation  Deployed systems</p>
    <p>Comparison of GC runs for systems upgraded from LGC to PGC</p>
    <p>Controlled experiments on 4 systems  Comparison of LGC vs PGC vs PGC+</p>
    <p>One phase versus two phase GC  DD860 used as default for all experiments  Workload used was Synthetic dataset similar to some past</p>
    <p>deduplication work (e.g., Botelho, et al., FAST 2012) Systems DD2500 DD860 DD890 DD990</p>
    <p>CPU(cores*GHz) 8*2.2 GHz 16*2.53 GHz 24*2.8 GHz 40*2.4 GHz</p>
    <p>Mem(GB) 64 GB 70 GB 94 GB 256 GB</p>
    <p>Physical Capacity (TB)</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.20</p>
    <p>Deployed System Results- LGC vs PGC</p>
    <p>For high TC workloads, PGC improved from LGC up to 20x</p>
    <p>For high file count workload, PGC improved over LGC by 7x</p>
    <p>75% of systems upgraded from LGC to PGC suffered from some degradation but usually not much  Hard to compare LGC v/s PGC systems because of some other</p>
    <p>performance changes introduced with PGC</p>
    <p>Lab experiments to compare all GC variants with same performance parameters</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.21</p>
    <p>GC on Different Platforms (36.6x TC)</p>
    <p>For this dedup, LGC2 is slightly better than PGC2 but PGC+ is better than LGC2/PGC2</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.22</p>
    <p>High Total compression Workload</p>
    <p>C P</p>
    <p>G C</p>
    <p>P G</p>
    <p>C +</p>
    <p>LG C</p>
    <p>P G</p>
    <p>C P</p>
    <p>G C</p>
    <p>+</p>
    <p>LG C</p>
    <p>P G</p>
    <p>C P</p>
    <p>G C</p>
    <p>+</p>
    <p>LG C</p>
    <p>P G</p>
    <p>C P</p>
    <p>G C</p>
    <p>+</p>
    <p>LG C</p>
    <p>P G</p>
    <p>C P</p>
    <p>G C</p>
    <p>+</p>
    <p>LG C</p>
    <p>P G</p>
    <p>C P</p>
    <p>G C</p>
    <p>+</p>
    <p>LG C</p>
    <p>P G</p>
    <p>C P</p>
    <p>G C</p>
    <p>+</p>
    <p>D ur</p>
    <p>at io</p>
    <p>n (h</p>
    <p>ou rs</p>
    <p>)</p>
    <p>LGC2 LGC1 PGC2 PGC1 PGC+</p>
    <p>LGC duration scales with TC</p>
    <p>PGC/PGC+ remain flat</p>
    <p>Total compression factor (TC)</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.23</p>
    <p>High file Count Workload</p>
    <p>LGC PGC PGC+</p>
    <p>D ur</p>
    <p>at io</p>
    <p>n (h</p>
    <p>ou rs</p>
    <p>)</p>
    <p>LGC2 LGC1 PGC2 PGC1 PGC+</p>
    <p>High file count(900M)</p>
    <p>LGC1/LGC2 is orders of magnitude slower than PGC</p>
  </div>
  <div class="page">
    <p>Copyright 2017 Dell Inc.24</p>
    <p>Conclusions  Shift in workloads required moving from depth-first based</p>
    <p>mark phase to breadth-first based mark phase  PGC works better than LGC for very high TC datasets and</p>
    <p>large number of small files  Due to extra phases and performance constraints</p>
    <p>introduced in PGC, PGC is not uniformly faster than LGC  PGC+ uses various optimizations to improve over PGC,</p>
    <p>primarily by avoiding multiple mark phases  PGC+ is significantly faster than LGC when 2 mark phases</p>
    <p>are required and orders of magnitude faster for problematic workloads</p>
  </div>
  <div class="page"/>
</Presentation>
