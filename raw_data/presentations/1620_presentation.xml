<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SLM-DB: Single Level Merge Key-Value Store with Persistent Memory</p>
    <p>Olzhas Kaiyrakhmet, Songyi Lee, Beomseok Nam, Sam H. Noh, Young-ri Choi</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background</p>
    <p>Contributions</p>
    <p>Architecture</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
    <p>FAST 2019 2</p>
  </div>
  <div class="page">
    <p>Key-Value Databases</p>
    <p>FAST 2019 3</p>
    <p>100</p>
    <p>html_doc</p>
    <p>linux_logo</p>
    <p>Key Value</p>
    <p>{[Green, Word, Gates]}</p>
    <p>&lt;html&gt;&lt;head&gt;.. &lt;/body&gt;&lt;/html&gt;</p>
  </div>
  <div class="page">
    <p>Log-Structured Merge (LSM) Tree</p>
    <p>Optimized for heavy write application usage</p>
    <p>Designed for slow hard drives</p>
    <p>FAST 2019 4</p>
    <p>CK C1 C0</p>
    <p>mergemergemerge</p>
    <p>Disk Memory</p>
    <p>In-memory buffer</p>
    <p>Components are sorted</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge Get(key)</p>
    <p>Search(key)</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge Get(key)</p>
    <p>Search(key)</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge Get(key)</p>
    <p>Search(key)</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge Get(key)</p>
    <p>Search(key)</p>
    <p>Large overhead to locate needed data</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge Get(key)</p>
    <p>Search(key)</p>
    <p>Large overhead to locate needed data</p>
  </div>
  <div class="page">
    <p>LSM-tree: disadvantages</p>
    <p>FAST 2019 5</p>
    <p>CK C1 C0</p>
    <p>Disk Memory</p>
    <p>mergemergemerge Get(key)</p>
    <p>Search(key)</p>
    <p>Large overhead to locate needed data</p>
    <p>High disk write amplification</p>
  </div>
  <div class="page">
    <p>State-of-the-art LSM-tree: LevelDB</p>
    <p>FAST 2019 6</p>
    <p>Level 0</p>
    <p>Level 1 MemTable</p>
    <p>Immutable MemTable</p>
    <p>Application</p>
    <p>Level 2</p>
    <p>Sorted String Tables (SST)</p>
    <p>Compaction</p>
    <p>Merge from Level N to Level N+1</p>
    <p>Flush</p>
    <p>WAL</p>
    <p>Write-AheadLog (no fsync)MANIFEST</p>
    <p>Store file organization and</p>
    <p>metadata In-memory skiplist to</p>
    <p>buffer updates</p>
    <p>Disk Memory</p>
    <p>Each level is 10x larger than</p>
    <p>previous</p>
    <p>Mark Immutable when becoming</p>
    <p>full</p>
    <p>Sequential write to the disk</p>
  </div>
  <div class="page">
    <p>LSM-tree optimizations</p>
    <p>Improve parallelism:  RocksDB (Facebook)</p>
    <p>HyperLevelDB</p>
    <p>Reduce write amplification:  PebblesDB (SOSP 17)</p>
    <p>Optimize for hardware(SSD):  VT-tree (FAST 13)</p>
    <p>WiscKey (FAST 16)</p>
    <p>FAST 2019 7</p>
  </div>
  <div class="page">
    <p>New era</p>
    <p>FAST 2019 8</p>
    <p>speedfast slow</p>
    <p>Byte addressable Persistent storage Persistent</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Simple approach</p>
    <p>FAST 2019 9</p>
    <p>Disk Memory</p>
    <p>CK C1 C0</p>
    <p>mergemergemerge</p>
  </div>
  <div class="page">
    <p>Simple approach</p>
    <p>FAST 2019 9</p>
    <p>Disk Memory Persistent</p>
    <p>Memory</p>
    <p>CK C1 C0</p>
    <p>mergemergemerge</p>
  </div>
  <div class="page">
    <p>Simple approach</p>
    <p>FAST 2019 9</p>
    <p>Disk Memory Persistent</p>
    <p>Memory</p>
    <p>CK C1 C0</p>
    <p>mergemergemerge</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>FAST 2019 10</p>
    <p>C1</p>
    <p>Disk Memory</p>
    <p>merge</p>
    <p>C0</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>FAST 2019 10</p>
    <p>C1</p>
    <p>Disk Memory</p>
    <p>merge</p>
    <p>C0</p>
    <p>Persistent Memory</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>FAST 2019 10</p>
    <p>C1</p>
    <p>Disk Memory</p>
    <p>merge</p>
    <p>C0 merge</p>
    <p>Persistent Memory</p>
    <p>Single disk component C1 that does self-merging</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>FAST 2019 10</p>
    <p>Index</p>
    <p>C1</p>
    <p>Disk Memory</p>
    <p>merge</p>
    <p>C0 merge</p>
    <p>Persistent Memory</p>
    <p>Single disk component C1 that does self-merging B+-tree to manage data</p>
    <p>stored in the disk</p>
  </div>
  <div class="page">
    <p>Single-Level Merge DB (SLM-DB)</p>
    <p>FAST 2019 11</p>
    <p>MemTable</p>
    <p>Immutable MemTable</p>
    <p>Disk Persistent Memory</p>
    <p>Data</p>
    <p>Flush</p>
    <p>Compaction</p>
    <p>Level 0</p>
    <p>Global B+-Tree</p>
    <p>Application</p>
    <p>MANIFEST No WAL</p>
    <p>Similar as in LevelDB</p>
    <p>Index perkey that</p>
    <p>stored in the diskSelect candidate</p>
    <p>files to merge them together</p>
    <p>Single level of SST files</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>FAST 2019 12</p>
    <p>Persistent MemTable No Write-Ahead Logging (WAL)</p>
    <p>Stronger consistency compared to LevelDB</p>
    <p>Persistent B+-tree Index Per-key index for fast search</p>
    <p>No multi-leveled merge structure</p>
    <p>Selective Compaction Live-key ratio of a Sorted-String Table</p>
    <p>Leaf node scan in the B+-tree Degree of sequentiality per range query</p>
  </div>
  <div class="page">
    <p>Persistent MemTable</p>
    <p>FAST 2019 13</p>
    <p>Consistency</p>
    <p>guaranteed</p>
    <p>No consistency</p>
    <p>guaranteed</p>
    <p>Recoverable after failure</p>
  </div>
  <div class="page">
    <p>Insert into Persistent MemTable</p>
    <p>FAST 2019 14</p>
    <p>(1) create node</p>
    <p>(2) Assign next</p>
    <p>pointer and clflush() (3) Atomically change</p>
    <p>next pointer</p>
    <p>Consistency</p>
    <p>guaranteed</p>
    <p>No consistency</p>
    <p>guaranteed</p>
  </div>
  <div class="page">
    <p>Single-Level Merge DB</p>
    <p>FAST 2019 15</p>
    <p>MemTable</p>
    <p>Immutable MemTable</p>
    <p>Disk Persistent Memory</p>
    <p>Data</p>
    <p>Compaction</p>
    <p>Level 0</p>
    <p>Global B+-Tree</p>
    <p>Application</p>
    <p>MANIFEST Flush</p>
  </div>
  <div class="page">
    <p>Flush</p>
    <p>FAST 2019 16</p>
    <p>File Creation</p>
    <p>Index Insertion</p>
    <p>Save to MANIFEST</p>
    <p>Key-Index insertion into B+-tree happens during Immutable Memtable Flush to disk</p>
    <p>FAST-FAIR B+-tree (Hwang et al., FAST 18)</p>
    <p>Flush File creation</p>
    <p>thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Single-Level Merge DB</p>
    <p>FAST 2019 17</p>
    <p>MemTable</p>
    <p>Immutable MemTable</p>
    <p>Disk Persistent Memory</p>
    <p>DataLevel 0</p>
    <p>Global B+-Tree</p>
    <p>Application</p>
    <p>MANIFEST Flush</p>
    <p>Compaction</p>
  </div>
  <div class="page">
    <p>Why we need Compaction?</p>
    <p>FAST 2019 18</p>
    <p>File#0 File#1 File#21 10 17 11 13 19 6 14 35</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
  </div>
  <div class="page">
    <p>Why we need Compaction?</p>
    <p>FAST 2019 18</p>
    <p>File#0 File#1 File#21 10 17 11 13 19 6 14 35 File#3 1 11 14</p>
    <p>New file</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
  </div>
  <div class="page">
    <p>Why we need Compaction?</p>
    <p>FAST 2019 18</p>
    <p>File#0 File#1 File#21 10 17 11 13 19 6 14 35 File#3 1 11 14</p>
    <p>New file</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>KV-pairs became obsolete</p>
  </div>
  <div class="page">
    <p>Why we need Compaction?</p>
    <p>FAST 2019 18</p>
    <p>File#0 File#1 File#21 10 17 11 13 19 6 14 35 File#3 1 11 14</p>
    <p>New file</p>
    <p>File#4 12 17 35</p>
    <p>New file</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>KV-pairs became obsolete</p>
  </div>
  <div class="page">
    <p>Why we need Compaction?</p>
    <p>FAST 2019 18</p>
    <p>File#0 File#1 File#21 10 17 11 13 19 6 14 35 File#3 1 11 14</p>
    <p>New file</p>
    <p>File#4 12 17 35</p>
    <p>New file</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>KV-pairs became obsolete</p>
  </div>
  <div class="page">
    <p>Why we need Compaction?</p>
    <p>FAST 2019 18</p>
    <p>File#0 File#1 File#21 10 17 11 13 19 6 14 35 File#3 1 11 14</p>
    <p>New file</p>
    <p>File#4 12 17 35</p>
    <p>New file</p>
    <p>Need garbage collection (GC)</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>KV-pairs became obsolete</p>
  </div>
  <div class="page">
    <p>Why else?</p>
    <p>FAST 2019 19</p>
    <p>File#0 File#1 File#2 File#3 File#41 10 17 11 13 19 6 14 35 14 21 32 2 8 17</p>
    <p>RangeQuery(5, 12)</p>
  </div>
  <div class="page">
    <p>Why else?</p>
    <p>FAST 2019 19</p>
    <p>File#0 File#1 File#2 File#3 File#41 10 17 11 13 19 6 14 35 14 21 32 2 8 17</p>
    <p>RangeQuery(5, 12)</p>
  </div>
  <div class="page">
    <p>Why else?</p>
    <p>FAST 2019 19</p>
    <p>File#0 File#1 File#2 File#3 File#41 10 17 11 13 19 6 14 35 14 21 32 2 8 17</p>
    <p>RangeQuery(5, 12)</p>
  </div>
  <div class="page">
    <p>Why else?</p>
    <p>FAST 2019 19</p>
    <p>File#0 File#1 File#2 File#3 File#41 10 17 11 13 19 6 14 35 14 21 32 2 8 17</p>
    <p>RangeQuery(5, 12)</p>
  </div>
  <div class="page">
    <p>Why else?</p>
    <p>FAST 2019 19</p>
    <p>File#0 File#1 File#2 File#3 File#41 10 17 11 13 19 6 14 35 14 21 32 2 8 17</p>
    <p>RangeQuery(5, 12)</p>
  </div>
  <div class="page">
    <p>Why else?</p>
    <p>FAST 2019 19</p>
    <p>File#0 File#1 File#2 File#3 File#41 10 17 11 13 19 6 14 35 14 21 32 2 8 17</p>
    <p>RangeQuery(5, 12) Need to improve sequentiality</p>
  </div>
  <div class="page">
    <p>Selective compaction</p>
    <p>Selectively pick SSTable files</p>
    <p>Make those files as compaction candidates</p>
    <p>Merge together most overlapping compaction candidates</p>
    <p>Selection schemes for compaction candidates: oLive-key ratio selection of an SSTable (for GC)</p>
    <p>oLeaf node scans in the B+-tree (for sequentiality) [see paper]</p>
    <p>oDegree of sequentiality per range query (for sequentiality) [see paper]</p>
    <p>FAST 2019 20</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 66.6% Ratio 66.6%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 66.6% Ratio 66.6%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 66.6%Ratio 33.3%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 33.3% Ratio 33.3%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 0.0% Ratio 33.3%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 0.0% Ratio 33.3% Ratio 100.0%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 0.0% Ratio 33.3% Ratio 100.0%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 0.0% Ratio 33.3% Ratio 100.0%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction Candidates</p>
    <p>Live-key ratio selection</p>
    <p>FAST 2019 21</p>
    <p>File 1</p>
    <p>PM B+-tree</p>
    <p>File 3 2 6 7</p>
    <p>File 4 1 2 4</p>
    <p>To collect garbage  If live (valid) to total key ratio is below threshold, then add to candidates</p>
    <p>Ratio 66.6% Ratio 0.0% Ratio 33.3% Ratio 100.0%</p>
    <p>- Valid KV pair</p>
    <p>- Obsolete KV pair</p>
    <p>Ratio threshold - 50% PM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>Pick</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>Pick</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>Pick</p>
    <p>Merge</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>File #7 CreationPick</p>
    <p>Merge</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>File #7 Creation</p>
    <p>Index File#7</p>
    <p>Pick</p>
    <p>Merge</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>File #7 Creation</p>
    <p>Index File#7</p>
    <p>Pick</p>
    <p>Merge</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>File #7 Creation</p>
    <p>Index File#7</p>
    <p>File#8 Creation Pick</p>
    <p>Merge</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>File #7 Creation</p>
    <p>Index File#7</p>
    <p>File#8 Creation</p>
    <p>Index File#8</p>
    <p>Pick</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Compaction</p>
    <p>FAST 2019 22</p>
    <p>File #7 Creation</p>
    <p>Index File#7</p>
    <p>Save to MANIFEST</p>
    <p>File#8 Creation</p>
    <p>Index File#8</p>
    <p>Pick</p>
    <p>File#1 File#2 File#3 File#4File#0 File#5 File#6</p>
    <p>Compaction candidate files Files</p>
    <p>Compaction triggered when there are too many compaction candidate files</p>
    <p>File creation thread</p>
    <p>B+-tree insertion thread</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>General operations</p>
    <p>Put</p>
    <p>Put if exists/Put if not exists</p>
    <p>Get</p>
    <p>Scan</p>
    <p>FAST 2019 23</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Put(key, value)</p>
    <p>FAST 2019 24</p>
    <p>Disk PM</p>
    <p>K V</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Put(key, value)</p>
    <p>FAST 2019 24</p>
    <p>Disk PM</p>
    <p>K V</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Put(key, value)</p>
    <p>FAST 2019 24</p>
    <p>Disk PM</p>
    <p>K V</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Put(key, value)</p>
    <p>FAST 2019 24</p>
    <p>Disk PM</p>
    <p>K V K</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Make sure if statement is</p>
    <p>fulfilled before Put()</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Query</p>
    <p>Make sure if statement is</p>
    <p>fulfilled before Put()</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Query</p>
    <p>Make sure if statement is</p>
    <p>fulfilled before Put()</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Query</p>
    <p>Make sure if statement is</p>
    <p>fulfilled before Put()</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Query</p>
    <p>Make sure if statement is</p>
    <p>fulfilled before Put()</p>
    <p>Statement is true</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Put(key, value) if exists/if not exists</p>
    <p>FAST 2019 25</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Query</p>
    <p>Make sure if statement is</p>
    <p>fulfilled before Put()</p>
    <p>Statement is true</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K</p>
    <p>Query</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K</p>
    <p>Query</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K</p>
    <p>Query</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K</p>
    <p>Query</p>
    <p>Key exists</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K</p>
    <p>V Query</p>
    <p>Key exists</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable</p>
    <p>Get(key)</p>
    <p>FAST 2019 26</p>
    <p>Disk PM</p>
    <p>Client K V</p>
    <p>Query</p>
    <p>Key exists</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Scan(keyi, keyj)</p>
    <p>FAST 2019 27</p>
    <p>Disk PM</p>
    <p>Ki Kj</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Scan(keyi, keyj)</p>
    <p>FAST 2019 27</p>
    <p>Disk PM</p>
    <p>Ki Kj</p>
    <p>Create iterator</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Scan(keyi, keyj)</p>
    <p>FAST 2019 27</p>
    <p>Disk PM</p>
    <p>Ki KjKi+3Ki</p>
    <p>Ki+1Ki</p>
    <p>Ki+1Ki Ki+2</p>
    <p>Create iterator</p>
  </div>
  <div class="page">
    <p>B+-tree Index</p>
    <p>Files</p>
    <p>Immutable MemTable</p>
    <p>MemTable Client</p>
    <p>Scan(keyi, keyj)</p>
    <p>FAST 2019 27</p>
    <p>Disk PM</p>
    <p>Ki KjKi+3Ki</p>
    <p>Ki+1Ki</p>
    <p>Ki+1Ki Ki+2</p>
    <p>Create iterator</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>FAST 2019 28</p>
    <p>Intel Xeon E5-2640 v3</p>
    <p>DRAM: 4GB Emulated PM: 7GB</p>
    <p>Intel SSD DC S3520</p>
    <p>Ubuntu 18.04 Kernel 4.15</p>
    <p>DB: 8GB/20GB Memtable: 64MB</p>
    <p>PM write latency 500ns (5x of DRAM write latency)  PM read latency &amp; bandwidth same same as DRAMs  Intels PMDK used to control PM pool</p>
  </div>
  <div class="page">
    <p>db_bench microbenchmark</p>
    <p>FAST 2019 29</p>
    <p>Random write Random read Range query</p>
    <p>Overhead amortized from large value size</p>
    <p>Low sequentiality</p>
    <p>Steady performance increase</p>
    <p>Low file locating overhead</p>
    <p>Range size = 100</p>
  </div>
  <div class="page">
    <p>db_bench microbenchmark</p>
    <p>FAST 2019 29</p>
    <p>Random write Random read Range query</p>
    <p>Overhead amortized from large value size</p>
    <p>Low sequentiality</p>
    <p>Steady performance increase</p>
    <p>Low file locating overhead</p>
    <p>~2.56x less disk write amplification  Max 700MB used in PM Range size = 100</p>
  </div>
  <div class="page">
    <p>PM sensitivity</p>
    <p>FAST 2019 30</p>
    <p>PM write latency sensitivity Random write benchmark</p>
    <p>PM bandwidth sensitivity</p>
    <p>Emulated by inserting cpu pause after clfush()</p>
    <p>Emulated using Thermal Throttling</p>
    <p>db_bench</p>
  </div>
  <div class="page">
    <p>YCSB</p>
    <p>FAST 2019 31</p>
  </div>
  <div class="page">
    <p>YCSB</p>
    <p>FAST 2019 31</p>
    <p>Better write performance</p>
  </div>
  <div class="page">
    <p>YCSB</p>
    <p>FAST 2019 31</p>
    <p>Very fast on update operations</p>
    <p>Better write performance</p>
  </div>
  <div class="page">
    <p>YCSB</p>
    <p>FAST 2019 31</p>
    <p>Very fast on update operations</p>
    <p>Only 1KB case is slower</p>
    <p>Better write performance</p>
  </div>
  <div class="page">
    <p>YCSB</p>
    <p>FAST 2019 31</p>
    <p>Very fast on update operations</p>
    <p>Only 1KB case is slower</p>
    <p>On average, beats every workload  Up to 7.7x less disk write amplification</p>
    <p>Better write performance</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Novel design of Key-Value stores with Persistent Memory</p>
    <p>High write/read performance compared to LevelDB</p>
    <p>Comparable scan performance</p>
    <p>Low write amplification</p>
    <p>Near-optimal read amplification</p>
    <p>FAST 2019 32</p>
  </div>
  <div class="page">
    <p>Thanks! Questions?</p>
    <p>FAST 2019 33</p>
  </div>
  <div class="page">
    <p>SLM-DB: Single Level Merge Key-Value Store with Persistent Memory</p>
    <p>Olzhas Kaiyrakhmet, Songyi Lee, Beomseok Nam, Sam H. Noh, Young-ri Choi</p>
  </div>
  <div class="page">
    <p>db_bench microbenchmark (20GB)</p>
    <p>FAST 2019 35</p>
    <p>Random write Random read Range query</p>
  </div>
  <div class="page">
    <p>Effect of persistent MemTable</p>
    <p>FAST 2019 36</p>
    <p>Random write performance Total disk write</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>B+-tree</p>
    <p>B+-tree leaf node scan</p>
    <p>FAST 2019 37</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values with scans in round-robin fashion  If the number of unique file accesses is above threshold, then add to candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>Degree of sequentiality per range query</p>
    <p>FAST 2019 38</p>
    <p>B+-tree</p>
    <p>RangeQuery(7, 14)</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values during range query operation  If subrange max unique file accesses is above threshold, then add to</p>
    <p>candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>Degree of sequentiality per range query</p>
    <p>FAST 2019 38</p>
    <p>B+-tree</p>
    <p>RangeQuery(7, 14)</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values during range query operation  If subrange max unique file accesses is above threshold, then add to</p>
    <p>candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>Degree of sequentiality per range query</p>
    <p>FAST 2019 38</p>
    <p>B+-tree</p>
    <p>RangeQuery(7, 14)</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values during range query operation  If subrange max unique file accesses is above threshold, then add to</p>
    <p>candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>Degree of sequentiality per range query</p>
    <p>FAST 2019 38</p>
    <p>B+-tree</p>
    <p>RangeQuery(7, 14)</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values during range query operation  If subrange max unique file accesses is above threshold, then add to</p>
    <p>candidates</p>
    <p>Threshold = 2</p>
  </div>
  <div class="page">
    <p>Degree of sequentiality per range query</p>
    <p>FAST 2019 38</p>
    <p>B+-tree</p>
    <p>RangeQuery(7, 14)</p>
    <p>Files</p>
    <p>Compaction Candidates</p>
    <p>To increase sequentiality of key-values during range query operation  If subrange max unique file accesses is above threshold, then add to</p>
    <p>candidates</p>
    <p>Threshold = 2</p>
  </div>
</Presentation>
