<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Usenix Security18</p>
    <p>Hang Zhang, Zhiyun Qian University of California, Riverside</p>
    <p>Precise and Accurate Patch Presence Test for Binaries</p>
  </div>
  <div class="page">
    <p>Whats the problem?1</p>
  </div>
  <div class="page">
    <p>Whats the problem?1</p>
    <p>Short Answer: Given an Android image (or other binary), how do we decide whether a CVE has been patched?</p>
  </div>
  <div class="page">
    <p>A real-world example 3</p>
  </div>
  <div class="page">
    <p>A real-world example 3</p>
  </div>
  <div class="page">
    <p>A real-world example 3</p>
  </div>
  <div class="page">
    <p>A real-world example 3</p>
    <p>Open Source</p>
  </div>
  <div class="page">
    <p>A real-world example 3</p>
    <p>Open Source ???</p>
  </div>
  <div class="page">
    <p>A real-world example 3</p>
    <p>Open Source ???</p>
    <p>Few source snapshots w/o commit history.</p>
  </div>
  <div class="page">
    <p>A real-world example</p>
    <p>Are the mainstream linux/AOSP patches propagated?</p>
    <p>Open Source ???</p>
    <p>Few source snapshots w/o commit history.</p>
  </div>
  <div class="page">
    <p>Open vs. Closed</p>
    <p>Open-source is the trend.</p>
    <p>Code reuse in closed-source software.</p>
  </div>
  <div class="page">
    <p>Open vs. Closed</p>
    <p>Open-source is the trend.</p>
    <p>Code reuse in closed-source software.</p>
    <p>Is the open-source security patch applied in the binary?</p>
  </div>
  <div class="page">
    <p>Why challenging?2</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
    <p>+ a = 0;</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
    <p>+ a = 0;</p>
    <p>Patched function as a changing haystack.</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
    <p>+ a = 0;</p>
    <p>Patched function as a changing haystack.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
    <p>+ a = 0;</p>
    <p>Patched function as a changing haystack.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
    <p>+ a = 0;</p>
    <p>Patched function as a changing haystack.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>#1: Needle in the (changing) haystack 6</p>
    <p>Security patch as a needle: small, subtle.</p>
    <p>- if (a &gt; 0) + if (a &gt;= 0)</p>
    <p>+ a = 0;</p>
    <p>Patched function as a changing haystack.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>#2: Haystack is a binary 7</p>
    <p>Find the needle in a binary.</p>
  </div>
  <div class="page">
    <p>Related work 8</p>
  </div>
  <div class="page">
    <p>Related work 8</p>
    <p>Category 1: Source-source matching.</p>
  </div>
  <div class="page">
    <p>Related work 8</p>
    <p>Category 1: Source-source matching.</p>
    <p>Cannot deal with binary haystack.</p>
  </div>
  <div class="page">
    <p>Related work 8</p>
    <p>Category 1: Source-source matching.</p>
    <p>Category 2: Binary-binary matching.</p>
    <p>Cannot deal with binary haystack.</p>
  </div>
  <div class="page">
    <p>Related work 8</p>
    <p>Category 1: Source-source matching.</p>
    <p>Category 2: Binary-binary matching.</p>
    <p>Cannot deal with binary haystack.</p>
    <p>Lack of knowledge about the needle (i.e. the patch).</p>
  </div>
  <div class="page">
    <p>How does a human expert work?</p>
    <p>How does FIBER work?3</p>
  </div>
  <div class="page">
    <p>+ ... + ... +</p>
    <p>+</p>
    <p>Patch change site analysis. (Source level)</p>
    <p>Binary signature translation.</p>
    <p>Match in binary.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis: What will human do? 11</p>
    <p>Given an open-source security patch, you need to locate it in a binary.  What will you do at first?</p>
  </div>
  <div class="page">
    <p>Change Site Analysis: What will human do? 11</p>
    <p>Given an open-source security patch, you need to locate it in a binary.  What will you do at first?</p>
    <p>Pick those most obvious, unique and representative change sites.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 12</p>
    <p>Unique  Exists only in the patched version.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 12</p>
    <p>Unique  Exists only in the patched version.</p>
    <p>Solution: token-based string search to test uniqueness, add contexts if not unique.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 13</p>
    <p>Stable  Not affected by other irrelevant changes.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 13</p>
    <p>Stable  Not affected by other irrelevant changes.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 13</p>
    <p>Stable  Not affected by other irrelevant changes.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 13</p>
    <p>Stable  Not affected by other irrelevant changes.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 13</p>
    <p>Stable  Not affected by other irrelevant changes.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 13</p>
    <p>Stable  Not affected by other irrelevant changes.</p>
    <p>Solution: keep the change site as small as possible (always start from a single line), add contexts only when necessary.</p>
    <p>Func(): ...... AAAAAA + the line AAAAAA ......</p>
    <p>Func(): ...... BBBBBB + the line BBBBBB ......</p>
    <p>Func(): ...... CCCCCC + the line CCCCCC ......</p>
    <p>Func(): ...... DDDDDD + the line DDDDDD ......</p>
    <p>backport evolve evolve</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
    <p>Perfect: easily located by call instruction and function name (Android images have symbol table).</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
    <p>+ if(cond)</p>
    <p>Perfect: easily located by call instruction and function name (Android images have symbol table).</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
    <p>+ if(cond)</p>
    <p>Perfect: easily located by call instruction and function name (Android images have symbol table).</p>
    <p>Good: both syntax structure and semantic change.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
    <p>+ if(cond)</p>
    <p>+ a = b * c</p>
    <p>Perfect: easily located by call instruction and function name (Android images have symbol table).</p>
    <p>Good: both syntax structure and semantic change.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
    <p>+ if(cond)</p>
    <p>+ a = b * c</p>
    <p>Perfect: easily located by call instruction and function name (Android images have symbol table).</p>
    <p>Good: both syntax structure and semantic change.</p>
    <p>Meh: only semantic change without syntax change.</p>
  </div>
  <div class="page">
    <p>Change Site Analysis 14</p>
    <p>Easy-to-recognize  Imagine what a human prefers.</p>
    <p>+ func_noinline()</p>
    <p>+ if(cond)</p>
    <p>+ a = b * c</p>
    <p>Perfect: easily located by call instruction and function name (Android images have symbol table).</p>
    <p>Good: both syntax structure and semantic change.</p>
    <p>Meh: only semantic change without syntax change.</p>
    <p>Solution: we rank the change sites based on statement types involved, according to our domain knowledge.</p>
  </div>
  <div class="page">
    <p>+ ... + ... +</p>
    <p>+</p>
    <p>Patch change site analysis. (Source level)</p>
    <p>Binary signature translation.</p>
    <p>Match in binary.</p>
  </div>
  <div class="page">
    <p>What if we do it manually? 16</p>
    <p>How to connect the source change with binary code?</p>
  </div>
  <div class="page">
    <p>What if we do it manually? 16</p>
    <p>if (a &gt; 1) do A; else do B;</p>
    <p>How to connect the source change with binary code?</p>
  </div>
  <div class="page">
    <p>What if we do it manually? 16</p>
    <p>Syntax</p>
    <p>if (a &gt; 1) do A; else do B;</p>
    <p>cond jmp</p>
    <p>How to connect the source change with binary code?</p>
  </div>
  <div class="page">
    <p>What if we do it manually? 16</p>
    <p>Syntax Semantics</p>
    <p>if (a &gt; 1) do A; else do B;</p>
    <p>cond jmp</p>
    <p>a &gt; 1?</p>
    <p>A B</p>
    <p>How to connect the source change with binary code?</p>
  </div>
  <div class="page">
    <p>What if we do it manually? 16</p>
    <p>Correlate both its syntax and semantics to the binary code.</p>
    <p>Syntax Semantics</p>
    <p>if (a &gt; 1) do A; else do B;</p>
    <p>cond jmp</p>
    <p>a &gt; 1?</p>
    <p>A B</p>
    <p>How to connect the source change with binary code?</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 17</p>
    <p>Identify and organize correlated instructions in the reference binary.</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 17</p>
    <p>Identify and organize correlated instructions in the reference binary.</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 17</p>
    <p>Identify and organize correlated instructions in the reference binary.</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>DWARF Debug Information</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 17</p>
    <p>Identify and organize correlated instructions in the reference binary.</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>DWARF Debug Information</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>X0 = X3 + X4</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>X0 = X3 + X4</p>
    <p>(X3 + X4) &gt; X2</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>X0 = X3 + X4</p>
    <p>(X3 + X4) &gt; X2</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>X0 = X3 + X4</p>
    <p>(X3 + X4) &gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>X0 = X3 + X4</p>
    <p>(X3 + X4) &gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>Root instructions: whose outputs will no longer be consumed by other instructions.</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 18</p>
    <p>Find the root instructions.</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>X0 = X3 + X4</p>
    <p>(X3 + X4) &gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>Root instructions: whose outputs will no longer be consumed by other instructions.</p>
    <p>Solution: we perform a basic-block level data-flow analysis to identify root instructions.</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 19</p>
    <p>Extract semantic formulas for root instructions.</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 19</p>
    <p>Extract semantic formulas for root instructions.</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>X0 &gt; X2</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 19</p>
    <p>Extract semantic formulas for root instructions.</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>X0 &gt; X2</p>
    <p>(X3 + X4) &gt; X2</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 19</p>
    <p>Extract semantic formulas for root instructions.</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>X0 &gt; X2</p>
    <p>(X3 + X4) &gt; X2</p>
    <p>(X0 + X1) &gt; X2</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 19</p>
    <p>Extract semantic formulas for root instructions.</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>X0 &gt; X2</p>
    <p>(X3 + X4) &gt; X2</p>
    <p>(X0 + X1) &gt; X2</p>
    <p>(a + b) &gt; cfoo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Binary Signature Translation 19</p>
    <p>Extract semantic formulas for root instructions.</p>
    <p>foo: ... MOV X3,X0 MOV X4,X1 ...</p>
    <p>AArch64 calling convention: a -&gt; X0 b -&gt; X1 c -&gt; X2</p>
    <p>ADD X0,X3,X4 CMP X0,X2 BGT label1</p>
    <p>label1: BL bar</p>
    <p>...</p>
    <p>X0 &gt; X2</p>
    <p>(X3 + X4) &gt; X2</p>
    <p>(X0 + X1) &gt; X2</p>
    <p>(a + b) &gt; c</p>
    <p>Solution: we use function-level, intra-procedure and underconstrained symbolic execution to obtain formulas.</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>+ ... + ... +</p>
    <p>+</p>
    <p>Patch change site analysis. (Source level)</p>
    <p>Binary signature translation.</p>
    <p>Match in binary.</p>
  </div>
  <div class="page">
    <p>Matching 21</p>
    <p>Quick Pass.</p>
  </div>
  <div class="page">
    <p>Matching 21</p>
    <p>Quick Pass.</p>
    <p>Cond. jmp</p>
    <p>Call bar</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 21</p>
    <p>Quick Pass.</p>
    <p>Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 21</p>
    <p>Quick Pass.</p>
    <p>Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 21</p>
    <p>Quick Pass.</p>
    <p>Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 21</p>
    <p>Quick Pass.</p>
    <p>Solution: look at easy-to-match attributes, e.g. topology, root instruction type, etc.</p>
    <p>Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 22</p>
    <p>Slow Pass.</p>
    <p>Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 22</p>
    <p>Slow Pass.</p>
    <p>(a + b) &gt; c</p>
    <p>(a + b) &gt; c</p>
    <p>a != b Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 22</p>
    <p>Slow Pass.</p>
    <p>(a + b) &gt; c</p>
    <p>(a + b) &gt; c</p>
    <p>a != b Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Matching 22</p>
    <p>Slow Pass.</p>
    <p>(a + b) &gt; c</p>
    <p>(a + b) &gt; c</p>
    <p>a != b Cond. jmp</p>
    <p>Call bar</p>
    <p>Call bar Cond. jmp</p>
    <p>Store</p>
    <p>Call bar</p>
    <p>Cond. jmp</p>
    <p>Call sth</p>
    <p>Solution: basically we strictly compare two formulas simplified by Z3 solver , with necessary relaxations. (e.g. commutative operators)</p>
    <p>foo(a,b,c){ ... if (a+b &gt; c) bar(a+b); ...</p>
  </div>
  <div class="page">
    <p>Special (and Interesting) Cases</p>
  </div>
  <div class="page">
    <p>Func(): ...... ...... + uniq_func_noinline() ...... ......</p>
  </div>
  <div class="page">
    <p>Func(): ...... ...... + uniq_func_noinline() ...... ......</p>
    <p>Simply test the function call presence, no semantic formulas needed.</p>
  </div>
  <div class="page">
    <p>Func(): ...... ...... - f(a,b) + f(a,c) ...... ......</p>
  </div>
  <div class="page">
    <p>Func(): ...... ...... - f(a,b) + f(a,c) ...... ......</p>
    <p>That line matters? No, that parameter matters!</p>
  </div>
  <div class="page">
    <p>In evaluation: 107 security patches crawled from Android Bulletin (Jun 2016  May 2017) 8 Android kernel images from 3 mainstream vendors.</p>
    <p>How well does FIBER work?4</p>
  </div>
  <div class="page">
    <p>Accuracy 25</p>
  </div>
  <div class="page">
    <p>Accuracy 25</p>
    <p>Accuracy: excellent, on average 94% accuracy w/o FP.</p>
  </div>
  <div class="page">
    <p>Accuracy 25</p>
    <p>Accuracy: excellent, on average 94% accuracy w/o FP.</p>
    <p>FP: we wrongly believe the patch is present. Dangerous! FN: we wrongly believe the patch is not there. Extra time to confirm.</p>
  </div>
  <div class="page">
    <p>Why FN? 26</p>
    <p>Function inline.  Function prototype change.  Code customization.  Patch adaptation.  Other engineering issues.</p>
    <p>Refer to section 6.2 in the paper for more details.</p>
  </div>
  <div class="page">
    <p>Why FN? 26</p>
    <p>Function inline: Added new callee function in the change site is inlined in different ways across reference and target binaries.</p>
  </div>
  <div class="page">
    <p>Why FN? 26</p>
    <p>Patch adaptation: The change site itself has been customized during patch porting.</p>
  </div>
  <div class="page">
    <p>Performance 27</p>
  </div>
  <div class="page">
    <p>Performance 27</p>
    <p>Performance: acceptable, some cases may take long time to match, overall still much more efficient than manual work. Parallelization is also easily possible.</p>
  </div>
  <div class="page">
    <p>Un-ported patches 28</p>
  </div>
  <div class="page">
    <p>Un-ported patches 28</p>
    <p>Lag (month) Cnt. 1 2 2 5 6 2</p>
  </div>
  <div class="page">
    <p>Un-ported patches 28</p>
    <p>Some critical patches were not propagated even after 6 months (confirmed)!</p>
    <p>Lag (month) Cnt. 1 2 2 5 6 2</p>
  </div>
  <div class="page">
    <p>CVE-2016-7910 29</p>
    <p>diff --git a/block/genhd.c b/block/genhd.c index 3c9dede..0ad8796 100644 --- a/block/genhd.c +++ b/block/genhd.c @@ -856,6 +856,7 @@ static void disk_seqf_stop( , void *v)</p>
    <p>if (iter) { class_dev_iter_exit(iter); kfree(iter);</p>
    <p>+ seqf-&gt;private = NULL; }</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>CVE-2016-7910 29</p>
    <p>diff --git a/block/genhd.c b/block/genhd.c index 3c9dede..0ad8796 100644 --- a/block/genhd.c +++ b/block/genhd.c @@ -856,6 +856,7 @@ static void disk_seqf_stop( , void *v)</p>
    <p>if (iter) { class_dev_iter_exit(iter); kfree(iter);</p>
    <p>+ seqf-&gt;private = NULL; }</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>How much code do you write?4</p>
  </div>
  <div class="page">
    <p>We use Angr as our symbolic execution engine. (w/ modifications)</p>
    <p>How much code do you write?4</p>
  </div>
  <div class="page">
    <p>We use Angr as our symbolic execution engine. (w/ modifications)</p>
    <p>How much code do you write?4</p>
    <p>#code of Fiber: 5,097 LOC Python.</p>
  </div>
  <div class="page">
    <p>We use Angr as our symbolic execution engine. (w/ modifications)</p>
    <p>How much code do you write?4</p>
    <p>#code of Fiber: 5,097 LOC Python.</p>
    <p>Still under improvement.</p>
  </div>
  <div class="page">
    <p>We use Angr as our symbolic execution engine. (w/ modifications)</p>
    <p>How much code do you write?4</p>
    <p>#code of Fiber: 5,097 LOC Python.</p>
    <p>Still under improvement.</p>
    <p>Now fully open-sourced on Github! https://fiberx.github.io</p>
  </div>
  <div class="page">
    <p>Thanks! Q &amp; A</p>
    <p>https://fiberx.github.io</p>
  </div>
</Presentation>
