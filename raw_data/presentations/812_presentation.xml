<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Abstractions for Usable Information Flow Control</p>
    <p>in Aeolus Winnie Cheng Dan R. K. Ports David Schultz Victoria Popic Aaron Blankstein James Cowling Dorothy Curtis Liuba Shrira Barbara Liskov</p>
    <p>MIT CSAIL</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Con!dential information (e.g., !nancial data, medical records) is increasingly stored online</p>
    <p>Keeping this information secure is a high priority</p>
    <p>However, building secure software remains as difficult as ever.</p>
  </div>
  <div class="page">
    <p>Financial Management Service Example</p>
    <p>Inspired by Mint.com  users provide service with online banking credentials</p>
    <p>(username and password)</p>
    <p>system periodically downloads &amp; aggregates transaction info from banks</p>
    <p>presents report to user</p>
  </div>
  <div class="page">
    <p>Financial Management Service Example</p>
    <p>Security requirements  dont expose one users !nancial data to another  bank passwords should only be used to log in to bank;</p>
    <p>should not even display them to user</p>
  </div>
  <div class="page">
    <p>Financial Management Service Example</p>
    <p>Security requirements  dont expose one users !nancial data to another  bank passwords should only be used to log in to bank;</p>
    <p>should not even display them to user</p>
  </div>
  <div class="page">
    <p>Financial Management Service Example</p>
    <p>Security requirements  dont expose one users !nancial data to another  bank passwords should only be used to log in to bank;</p>
    <p>should not even display them to user</p>
    <p>Much code needs to be trusted to ensure these  all application code that handles !nancial data  third-party libraries (e.g., to parse data or draw graphs)</p>
  </div>
  <div class="page">
    <p>Aeolus Platform for building new secure applications (available as a set of Java libraries)</p>
    <p>Uses decentralized information !ow control to avoid information leaks</p>
  </div>
  <div class="page">
    <p>Information Flow Control Specify restrictions on when information can be released (instead of access control)</p>
    <p>allows untrusted code to access sensitive information but not to release it</p>
    <p>only trusted code allowed to remove restrictions on information &quot;ow (declassify)</p>
    <p>Historically: military IFC systems (con!dential, secret, etc.)</p>
    <p>Decentralized IFC (DIFC) extends model to many users</p>
  </div>
  <div class="page">
    <p>Previous DIFC Work Language-based approaches (e.g., Jif )</p>
    <p>static analysis: IFC enforced through type system, at !ne granularity (individual variables)</p>
    <p>DIFC operating systems (e.g., Asbestos, HiStar, Flume)</p>
    <p>dynamic: track information &quot;ow at the level of processes and !les Aeolus: information &quot;ow control in language runtime</p>
    <p>similar to OS approach, but provides higher-level abstractions  implemented as library, so doesnt require new OS or language</p>
    <p>(tradeoff is larger TCB size than DIFC OSes)</p>
  </div>
  <div class="page">
    <p>Aeolus Model</p>
    <p>inside system tracks</p>
    <p>information !ow dynamically</p>
    <p>outside requires</p>
    <p>declassi&quot;cation to release info</p>
    <p>Internet</p>
    <p>Aeolus</p>
    <p>App App</p>
    <p>Aeolus</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>Aeolus Contributions New security model</p>
    <p>designed to be understandable &amp; easy to use  represents authority relationships in explicit graph</p>
    <p>Programming model</p>
    <p>abstractions for supporting principle of least privilege  threads with secure shared state  distributed computation support</p>
  </div>
  <div class="page">
    <p>Security Model Concepts</p>
    <p>Principals: represent users or roles</p>
    <p>Tags: categories of data with security requirements e.g., ALICE-FINANCIAL-DATA, ALICE-PASSWORD,</p>
    <p>Secrecy label: set of tags  objects (!les) have immutable labels representing</p>
    <p>contamination of their contents</p>
    <p>threads have mutable labels representing contamination of data accessed</p>
  </div>
  <div class="page">
    <p>Information Flow Rule</p>
  </div>
  <div class="page">
    <p>Information Flow Rule</p>
    <p>Information can only !ow to a destination more contaminated than the source</p>
  </div>
  <div class="page">
    <p>Information Flow Rule</p>
    <p>Information can only !ow to a destination more contaminated than the source</p>
    <p>Thread T can read object O only if O.label  T.label  Thread T can write object O only if T.label  O.label</p>
  </div>
  <div class="page">
    <p>Information Flow Rule</p>
    <p>Information can only !ow to a destination more contaminated than the source</p>
    <p>Thread T can read object O only if O.label  T.label  Thread T can write object O only if T.label  O.label</p>
    <p>Thread T can communicate with outside only if T.label is null</p>
  </div>
  <div class="page">
    <p>Label Manipulations Thread labels can be changed with two operations</p>
  </div>
  <div class="page">
    <p>Authority Each thread runs with an associated principal that determines what it can declassify</p>
    <p>Any thread can create a new tag  threads principal has authority to declassify that tag</p>
    <p>Principals can delegate authority to other principals  acts-for relationships delegate all authority  grants delegate authority for a particular tag  either type can be revoked</p>
  </div>
  <div class="page">
    <p>Authority Structure</p>
    <p>principal tag</p>
    <p>acts-for grant</p>
    <p>compound tag subtag</p>
    <p>PAT PAT-DR</p>
    <p>DR-BOB</p>
    <p>PAT-DATA tPAT</p>
    <p>tPAT</p>
  </div>
  <div class="page">
    <p>Authority Structure</p>
    <p>principal tag</p>
    <p>acts-for grant</p>
    <p>compound tag subtag</p>
    <p>PAT PAT-DR</p>
    <p>DR-BOB</p>
    <p>PAT-DATA tPAT</p>
    <p>tPAT</p>
    <p>DR-TOM</p>
  </div>
  <div class="page">
    <p>Authority Structure</p>
    <p>principal tag</p>
    <p>acts-for grant</p>
    <p>compound tag subtag</p>
    <p>PAT PAT-DR</p>
    <p>DR-BOB</p>
    <p>PAT-DATA tPAT</p>
    <p>tPAT</p>
    <p>DR-TOM</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Authority Structure</p>
    <p>principal tag</p>
    <p>acts-for grant</p>
    <p>compound tag subtag</p>
    <p>PAT PAT-DR</p>
    <p>DR-BOB</p>
    <p>PAT-DATA tPAT</p>
    <p>tPAT</p>
    <p>DR-TOM CLINIC-ADMIN</p>
    <p>ALL-PATIENT-DATA</p>
    <p>other patients</p>
    <p>STATS</p>
    <p>tALL</p>
    <p>tALL</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Authority</p>
    <p>Aeolus uses explicit authority graph to manage authority</p>
    <p>models common authority relationships  readily supports modi!cation and revocation  compare to capabilities as used in DIFC OSes</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Abstractions for supporting:</p>
    <p>Principle of least privilege  Secure sharing between threads  Distributed computation</p>
  </div>
  <div class="page">
    <p>Principle of Least Privilege Needs to be easy to drop and regain authority</p>
    <p>Two mechanisms:</p>
    <p>Reduced authority calls: run function with different principal (lower authority) e.g., drop all authority when invoking untrusted library</p>
    <p>Authority closures: Java object bound to principal during construction; object methods run with authority of that principal e.g., grant authority to code that fetches bank transactions</p>
  </div>
  <div class="page">
    <p>Threads and Isolation Each thread has security state: associated principal and secrecy label</p>
    <p>Threads must be isolated to ensure information &quot;ow obeys label restrictions  cant allow threads to share memory directly</p>
    <p>Threads can only share data through safe Aeolus mechanisms  shared objects  RPCs  !le system</p>
  </div>
  <div class="page">
    <p>Threads and Isolation Each thread has security state: associated principal and secrecy label</p>
    <p>Threads must be isolated to ensure information &quot;ow obeys label restrictions  cant allow threads to share memory directly</p>
    <p>Threads can only share data through safe Aeolus mechanisms  shared objects  RPCs  !le system } support distributed applications(see paper)  shared objects</p>
  </div>
  <div class="page">
    <p>Shared Objects</p>
    <p>Can be referenced from multiple threads</p>
    <p>Each shared object has a secrecy label (like !les); Aeolus platform checks labels on access</p>
    <p>Simple built-in example: boxes shared objects with a get/put interface</p>
    <p>Developers can de!ne new shared object types; Aeolus adds appropriate label checks</p>
  </div>
  <div class="page">
    <p>Boxes</p>
    <p>Labeled object with get/put interface Box.get() { if (this.label  thread.label) throw InfoFlowException return copy(this.contents) }</p>
    <p>Allows thread to hold reference to sensitive data without being contaminated by its contents until read</p>
  </div>
  <div class="page">
    <p>User-De!ned Shared Objects Extending AeolusShared base class causes Aeolus platform to add runtime label check to all methods class SharedHashTable&lt;T&gt; extends AeolusShared {</p>
    <p>public SharedHashTable(Label label) { super(label);</p>
    <p>}</p>
    <p>public T get(String key) { if (thread.label != object.label) throw InfoFlowException;</p>
    <p>return copy(data[key]);</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>User-De!ned Shared Objects Extending AeolusShared base class causes Aeolus platform to add runtime label check to all methods class SharedHashTable&lt;T&gt; extends AeolusShared {</p>
    <p>public SharedHashTable(Label label) { super(label);</p>
    <p>}</p>
    <p>public T get(String key) { if (thread.label != object.label) throw InfoFlowException;</p>
    <p>return copy(data[key]);</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>User-De!ned Shared Objects Extending AeolusShared base class causes Aeolus platform to add runtime label check to all methods class SharedHashTable&lt;T&gt; extends AeolusShared {</p>
    <p>public SharedHashTable(Label label) { super(label);</p>
    <p>}</p>
    <p>public T get(String key) { if (thread.label != object.label) throw InfoFlowException;</p>
    <p>return copy(data[key]);</p>
    <p>} }</p>
    <p>Aeolus platform cant tell if method is read-only, so assumes it both reads and writes</p>
  </div>
  <div class="page">
    <p>User-De!ned Shared Objects Extending AeolusShared base class causes Aeolus platform to add runtime label check to all methods class SharedHashTable&lt;T&gt; extends AeolusShared {</p>
    <p>public SharedHashTable(Label label) { super(label);</p>
    <p>}</p>
    <p>public T get(String key) { if (thread.label != object.label) throw InfoFlowException;</p>
    <p>return copy(data[key]);</p>
    <p>} }</p>
    <p>Aeolus platform cant tell if method is read-only, so assumes it both reads and writes</p>
  </div>
  <div class="page">
    <p>Implementing Isolation Rely on memory safety of JVM  copy all arguments passed to a newly-forked thread  also, all arguments and result of shared object calls  needs to be a deep copy, except references to shared objects OK</p>
    <p>Disallow unsafe features via Java SecurityManager &amp; bytecode veri!cation  native code (except in approved libraries)  re&quot;ection  static variables</p>
  </div>
  <div class="page">
    <p>Implementing Copying Need to copy arguments to forks and shared object calls</p>
    <p>cant use Javas Object.clone() (user-provided clone functions might be unsafe)</p>
    <p>serialize to string then deserialize too slow: 6.3 s to copy empty obj (much validation, re&quot;ection)</p>
    <p>built new cloning library  lower-level, optimized: 93 ns per object copied  skips copying objects that are safely sharable:</p>
    <p>only contain immutable state or references to shared objs</p>
  </div>
  <div class="page">
    <p>Performance (Micro)</p>
    <p>Reduced authority call 51 ns</p>
    <p>(if dropping all authority) 7.7 ns</p>
    <p>Closure call 83 ns</p>
    <p>Shared object call 8.9 ns + 93 ns per object copied</p>
    <p>Java method call 4 ns</p>
  </div>
  <div class="page">
    <p>Performance (Macro)</p>
    <p>Benchmark based on !nancial management service</p>
    <p>uses reduced authority calls, authority closures, shared state, label manipulations</p>
    <p>Overhead of security operations low in applications that do real work</p>
  </div>
  <div class="page">
    <p>Conclusion Aeolus: platform for building secure applications with decentralized information &quot;ow control</p>
    <p>simpli!ed DIFC model with explicit authority graph  abstractions for supporting principle of least privilege:</p>
    <p>reduced authority calls &amp; authority closures</p>
    <p>isolated threads with secure shared state</p>
    <p>More information and preliminary release available at http://pmg.csail.mit.edu/aeolus/</p>
  </div>
</Presentation>
