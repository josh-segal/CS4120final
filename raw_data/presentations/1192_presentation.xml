<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Immunizing Encryption Schemes from</p>
    <p>Decryption Errors</p>
    <p>Cynthia Dwork Moni Naor Omer Reingold</p>
    <p>Weizmann Institute of Science</p>
    <p>Microsoft Research</p>
  </div>
  <div class="page">
    <p>Public-Key Encryption Scheme</p>
    <p>A triple (G,E,D) such that:</p>
    <p>G generates: public key KP &amp; secret key KS</p>
    <p>Encrypting message m (w/ public key KP &amp; random coins r):</p>
    <p>c = E(KP, m, r)</p>
    <p>Decrypting ciphertext c=E(KP, m, r) (w/ secret key KS):</p>
    <p>D(KS, E(KP, m, r)) = m</p>
    <p>Should this hold: Always? (perfect correctness) With high probability?</p>
    <p>Correctness</p>
  </div>
  <div class="page">
    <p>What About Decryption Errors?</p>
    <p>Goldwasser and Micali 84: required perfect correctness</p>
    <p>Two examples with imperfect correctness:  Ajtai-Dwork 97 (errors can be avoided [GGH97])  NTRU</p>
    <p>Is low probability of error merely an aesthetic nuisance?</p>
    <p>Proos 03: Chosen ciphertext attack on a version of NTRU that was supposed to be immune to such attacks  Used the small probability of error of NTRU</p>
    <p>In general: perfect security is vital for (current methods of) protecting against CCA CCA=Chosen Ciphertext Attacks</p>
  </div>
  <div class="page">
    <p>Non-Malleability and Immunity to CCA</p>
    <p>Add redundancy and prove consistency [NY90,DDN91]  Knowing any of multiple private keys is sufficient for</p>
    <p>decryption</p>
    <p>Indistinguishable to attacker which key you know  Problem: what if there are errors:</p>
    <p>you prove consistency with what?  proof may fail or be meaningless  reveal which key you know</p>
    <p>In an adversarial setting: the low probability event may be amplified by the attacker</p>
    <p>E1(M) E2(M) Proof of consistency</p>
  </div>
  <div class="page">
    <p>This Work  When decryption errors are very infrequent:</p>
    <p>extremely efficient way to get perfect correctness.</p>
    <p>Amplification methods for handling frequent errors, even when encryption scheme is only weakly one-way.</p>
    <p>Conclude: error-prone encryption schemes can be turned non-malleable, CCA2-secure.  If proofs of consistency are available</p>
    <p>Efficient `direct solution using the randomoracle methodology.</p>
  </div>
  <div class="page">
    <p>Notion of Correctness  Perfectly correct:</p>
    <p>private/public key pair KS, KP ;  possible m and r</p>
    <p>D(KS, E(KP, m, r)) = m</p>
    <p>-correct: Pr[D(KS, E(KP, m, r)) = m]</p>
    <p>prob. over KS, KP, m and r</p>
    <p>Almost all keys perfectly correct:  w/ probability  1-negligible over KS, KP ;  m and r</p>
    <p>D(KS, E(KP, m, r)) = m</p>
    <p>sufficient to plug into standard constructions!</p>
  </div>
  <div class="page">
    <p>Infrequent Errors</p>
    <p>Let (G,E,D) be an 1-2-4n correct scheme  Assume, (n) random bits to encrypt an n bit</p>
    <p>message.</p>
    <p>Let g: {0,1}n {0,1}(n) be a pseudorandom generator</p>
    <p>Define (G,E,D):  G outputs a pair KS, KP as well as  2R</p>
    <p>{0,1}(n)  Public key (Kp ,)</p>
    <p>To encrypt m choose t 2R {0,1}n and evaluate E(KP, m,   g(t))</p>
    <p>Decryption D is the same as in D</p>
  </div>
  <div class="page">
    <p>Security and Correctness of New Scheme</p>
    <p>Claim: Type of security (semantic or nonmalleable) under type of attack (CPA, CCA) is preserved.</p>
    <p>Proof: For any fixed  the random string used g(t) is indistinguishable from random</p>
    <p>Theorem: If (G,E,D) is an   1-2-4n - correct scheme then (G,E,D) is almost-all-keys perfectly correct</p>
    <p>Proof:  With overwhelming prob. over  the set</p>
    <p>{g(t)} avoids all the bad random strings   Similar technique in:</p>
    <p>Lautmanns BPP in PH  Bit commitment from p.r. (Naor)  Zaps and Apps (Dwork-Naor)</p>
  </div>
  <div class="page">
    <p>Error Disappearance  With probability at least 1-2-n over the choice</p>
    <p>of KS,KP: Probm,r [D(KS, E(KP, m, r))  m]  2-3n</p>
    <p>For such good KS, KP, since  2R {0,1}(n) Probm,t, [D(KS, E(KP, m,   g(t))  m]  2-3n</p>
    <p>Small enough to use union bound over all t,m2 {0,1}n Get: With probability at least 1-2-(n-1) over the choice of KS,KP and  have that  t,m 2 {0,1}n</p>
    <p>D(KS, E(KP, m,   g(t))) = m  This effectively pushes all the errors into</p>
    <p>which is part of the public key</p>
  </div>
  <div class="page">
    <p>Immunizing Weak Encryption Schemes</p>
    <p>What about smaller ?  Easy: simple repetition reduces error (semantic</p>
    <p>security and non-malleability are preserved).  What if the adversary has a non-negligible</p>
    <p>probably of decrypting (i.e. the scheme is only weakly one-way)?  Cannot reduce error by simple repetition!</p>
    <p>Question: How do we go from an -correct oneway cryptosystem (&gt;) to an almost-all-keys perfectly correct one?</p>
    <p>Alice Bob</p>
    <p>Eve</p>
  </div>
  <div class="page">
    <p>Natural Approach  Use error correcting codes that can be decoded</p>
    <p>from an -fraction of correct symbols, but not from a -fraction.</p>
    <p>This approach works in the information theoretic setting, much more subtle in the computational setting!  Reason: Eve may get more than just -fraction of</p>
    <p>symbols, but rather some information about each symbol  Example: Eve gets a list decoding</p>
    <p>Alice Bob</p>
    <p>Eve</p>
  </div>
  <div class="page">
    <p>Other Information-Theoretic Tools</p>
    <p>Polarization in the statistical setting Sahai-Vadhan 97: given a pair of distributions</p>
    <p>X0, X1 create two new ones Y0, Y1 such that if  Dist(X0,X1)  threshold   Dist(Y0,Y1) exp. small  Dist(X0,X1)  threshold   Dist(Y0,Y1) exp. close</p>
    <p>to 1 Relation to error reduction: assume -correct</p>
    <p>-oneway one-bit encryption scheme  X0 encryption of 0 and X1 and encryption of 1  Bob can distinguish X0 from X1 with advantage    Eve cannot distinguish X0 from X1 with advantage    Strengthened encryption scheme defines Y0, Y1 with</p>
    <p>polarized distances</p>
  </div>
  <div class="page">
    <p>New Results  Provide a collection of basic transformations, for</p>
    <p>amplification.  Related to [SV97].</p>
    <p>Life is somewhat harder in the computational setting</p>
    <p>Starting with an -correct -oneway cryptosystem  an almost-all-keys perfectly correct one  (previous results) CCA and non-malleability</p>
    <p>Relation between  and  (for which the transformation works):  Constant decryption errors: for any  &lt; 1 there is an</p>
    <p>&lt;&lt;1  Very frequent decryption errors: for any  &gt; 1/poly</p>
    <p>and  &lt; 4/const  Open: show the same for every - &gt; 1/poly</p>
    <p>Likely to imply similar improvement for the statistical case.</p>
  </div>
  <div class="page">
    <p>Basic Transformations Parallel Repetition  repeat everything k times:</p>
    <p>Choose k independent public/private key pairs  the encryption Ek of a k-tuple m=(m1, m2,mk) is</p>
    <p>Ek(m)=E(m1), E(m2),, E(mk)</p>
    <p>Bad news: probability of legitimate encryption for a random m is k</p>
    <p>Good news: probability of adversarial encryption:  Would like it to be k  Can view it as a three round game  [BIN 97] deals with such games</p>
    <p>gets us close to that  k/c</p>
    <p>The adversary is hurt more if</p>
    <p>V: choose (kp, ks,m)</p>
    <p>Send (kp Ep(m))</p>
    <p>P: sends m</p>
    <p>V: Send (m,ks )</p>
    <p>P wins if m=m</p>
  </div>
  <div class="page">
    <p>Basic Transformations (cont.)</p>
    <p>Hard-Core Bit  The encryption of a bit b is (E(m),r,r.mb)</p>
    <p>where m is a random message  Usage: turning one-wayness into</p>
    <p>indistinguishability Goldreich-Levin: an advantage in</p>
    <p>guessing the inner product bit is translated into a list of at most  candidates for m given E(m) Can use to invert E(m) with probability at least</p>
    <p>If (=upper bound on inverting E) is negligible we get semantic security</p>
  </div>
  <div class="page">
    <p>Basic Transformations (cont.)</p>
    <p>Direct Product  Choose k independent public/private key</p>
    <p>pairs  The encryption Ek of m is k independent</p>
    <p>encryptions E(m), E(m),, E(m)  Decryption is by plurality  Reverse effect to parallel repetition: both</p>
    <p>legitimate recipient and the adversary can do better.  The legitimate recipient gains more if</p>
  </div>
  <div class="page">
    <p>Combining the Basic Transformations</p>
    <p>Best way of combining, depends on values of  and . Example, well separated constants:</p>
    <p>Transformation Correctness One Wayness</p>
    <p>Starting Point</p>
    <p>O(log n) parallelrepetition</p>
    <p>Inner Product 1/2 + 1/(2n) 1/2 + O(1/n4)</p>
    <p>O(n3) direct product 1- 2-5n 1/2 + O(1/n)</p>
    <p>n parallel-repetition 1- n . 2-5n neg</p>
    <p>Inner Product 1- (n/2) . 2-5n IND-CPA</p>
  </div>
  <div class="page">
    <p>Using the Random Oracles Methodology</p>
    <p>Let (G,E,D) be an -correct scheme that is one-way</p>
    <p>For random message m and random encryption: probability adversary retrieves m is negligible</p>
    <p>If  is negligible, can transform (G,E,D) directly and very efficiently to a full fledged NM-CCA-post scheme.</p>
  </div>
  <div class="page">
    <p>The construction  E is an -correct -oneway for negligible ,   H1, H2, H3, H4 be idealized random functions  FS a shared-key encryption Encryption of message m:  Choose t 2R {0,1}n/2  Compute z=H1(t) , w=H2(z)  t and r= H3(z  w).</p>
    <p>The encrypted message is (c1,c2):  c1= Epk(z  w,r)  c1= FS(m) where s=H4(t)</p>
    <p>Decryption of (c1,c2)  Apply D to c1 and obtain candidates for z and w.  Set t=H2(z)  w and r = H3(z  w).  Check that H1(t) = z and that for $r = H3(z  w) we have that</p>
    <p>c1=E(z  w,r).  Check, using s=H4(t), that c2 is a valid ciphertext under Fs.  If any of the tests fails, output invalid.  Otherwise, output Fs (c2) - the decryption of c2 using s.</p>
  </div>
  <div class="page">
    <p>Why is it secure?  Once t 2 {0,1}n/2 has been chosen: unique</p>
    <p>ciphertext corresponding to it  Once t 2 {0,1}n/2 is known, easy to decrypt</p>
    <p>ciphertext, even without access to sk.  Security against chosen ciphertext attacks  follow</p>
    <p>the adversary calls to H1 . Immunity against decryption errors  Decryption errors have NOT disappeared, but hard</p>
    <p>to find them.  Partition all strings c into those the range of E and</p>
    <p>those not  Depending on the existence of m and r such that c=</p>
    <p>Epk(m,r).  Consider a candidate ciphertext (c1,c2) given to D':  If c1 is not in the range of E, then it is going to be</p>
    <p>rejected by D'  Security rests on the hardness of finding among</p>
    <p>the bad pairs z  w,r one where  r= H3(z  w).  H1(H2(z)  w) = z.</p>
    <p>This is difficult for any fixed sparse set of bad pairs and a random set of functions H1, H2, H3</p>
    <p>Encryption of message m:  Choose t 2R {0,1}n/2 and</p>
    <p>compute</p>
    <p>z=H1(t) ,</p>
    <p>w=H2(z)  t ,</p>
    <p>r= H3(z  w).</p>
    <p>The encrypted message is (c1,c2):  c1= Epk(z  w,r)</p>
    <p>c1= FS(m) where s=H4(t)</p>
  </div>
  <div class="page">
    <p>Concluding Remarks</p>
    <p>When decryption errors are very rare, they can be avoided almost for free.</p>
    <p>Can immune even very weak schemes against decryption errors</p>
    <p>Life is (as usual) relatively easy with random oracles</p>
    <p>Open problem: handle arbitrary - &gt; 1/poly  Seems hard even in the (cleaner) statistical</p>
    <p>setting</p>
  </div>
</Presentation>
