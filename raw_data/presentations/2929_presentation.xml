<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>All about Eve: Execute-Verify Replication</p>
    <p>for Multi-Core Servers</p>
    <p>Manos Kapritsos, Yang Wang, Vivien Quema, Allen Clement, Lorenzo Alvisi, Mike Dahlin</p>
  </div>
  <div class="page">
    <p>Dependability Multi-core</p>
    <p>Databases Key-value stores</p>
    <p>Coordination &amp; locking</p>
    <p>File servers</p>
  </div>
  <div class="page">
    <p>Dependability Multi-core</p>
  </div>
  <div class="page">
    <p>How do we build dependable multithreaded services?</p>
    <p>Answer : State Machine Replication</p>
  </div>
  <div class="page">
    <p>inputinputinput</p>
    <p>STATE MACHINE REPLICATION (SMR)</p>
    <p>ServerServerServerServer</p>
    <p>Guarantee: all correct replicas will produce the same output</p>
    <p>Ingredients: a service 1.Implement service as a deterministic state machine 2. Replicate 3. Provide all replicas with the same input</p>
  </div>
  <div class="page">
    <p>SMR IMPLEMENTATION</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Agree</p>
  </div>
  <div class="page">
    <p>ServerServer</p>
    <p>How do we build dependable multithreaded services?</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Maybe use deterministic multithreading?</p>
    <p>Nope. Wont support modern replication protocols</p>
  </div>
  <div class="page">
    <p>Server</p>
    <p>How do we build dependable multithreaded services?</p>
    <p>Server</p>
    <p>Server</p>
    <p>Dependability</p>
    <p>Performance</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Eve State machine replication with multithreaded execution</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Outline</p>
    <p>Mechanisms</p>
    <p>Architecture</p>
    <p>Insight</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Agree-Execute enforces sequential execution</p>
    <p>SMR requires replica convergence</p>
    <p>ExecuteAgree</p>
  </div>
  <div class="page">
    <p>AgreeVerify</p>
    <p>EXECUTE-VERIFY</p>
    <p>First execute... (multithreaded and without</p>
    <p>agreeing on the order)</p>
    <p>...then verify (that replicas agree on the outcome)</p>
    <p>Execute</p>
  </div>
  <div class="page">
    <p>Verify</p>
    <p>token</p>
    <p>token</p>
    <p>token</p>
    <p>YES</p>
    <p>YES</p>
    <p>YES</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>ON CONVERGENCE</p>
    <p>Commit</p>
    <p>Commit</p>
    <p>Commit</p>
    <p>match?</p>
  </div>
  <div class="page">
    <p>NO</p>
    <p>NO</p>
    <p>NO</p>
    <p>Verify</p>
    <p>ON DIVERGENCE</p>
    <p>token</p>
    <p>token</p>
    <p>token</p>
    <p>Repair : rollback and re-execute sequentially</p>
    <p>Repair</p>
    <p>Repair</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Repair</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Outline</p>
    <p>Mechanisms</p>
    <p>Architecture</p>
    <p>Insight</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>if (converged) commit</p>
    <p>else repair divergence</p>
    <p>Frequent</p>
    <p>Uncommon</p>
    <p>Eves logic at a glance</p>
  </div>
  <div class="page">
    <p>MAKING DIVERGENCE UNCOMMON</p>
    <p>if (converged) commit</p>
    <p>else repair divergence</p>
    <p>token</p>
    <p>token</p>
    <p>token</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Idea: identify commutative requests</p>
    <p>Mixer: group together commutative requests  Execute requests within a group in parallel</p>
    <p>Mixer is a hint, not an oracle</p>
  </div>
  <div class="page">
    <p>Transaction Read tables Write tables</p>
    <p>getBestSellers item, author, order_line</p>
    <p>doCart item shopping_cart_line,</p>
    <p>shopping_cart</p>
    <p>doBuyConfirm customer, address order_line, item, cc_xacts,</p>
    <p>shopping_cart_line</p>
    <p>EXAMPLE: TPC-W MIXER</p>
  </div>
  <div class="page">
    <p>EFFICIENT DIVERGENCE DETECTION</p>
    <p>Need to compare application states &amp; responses frequently</p>
    <p>Application state</p>
    <p>Merkle tree}tokentoken if (converged)</p>
    <p>commit else</p>
    <p>repair divergence</p>
  </div>
  <div class="page">
    <p>GROWING DETERMINISTIC MERKLE TREES</p>
    <p>Ensure that all replicas add objects in the same order</p>
    <p>Idea: postpone adding objects until token generation</p>
    <p>Requests are ordered: requestID Single thread per request: objectSeqNumber (requestID,objectSeqNumber): unique and sortable</p>
    <p>Optimization: leverage deterministic order of references</p>
  </div>
  <div class="page">
    <p>Copy-on-write</p>
    <p>EFFICIENT DIVERGENCE REPAIR</p>
    <p>Need to rollback application states after every divergence</p>
    <p>Application state</p>
    <p>Rollback</p>
    <p>if (converged) commit</p>
    <p>else repair divergence</p>
  </div>
  <div class="page">
    <p>Copy-on-Write</p>
    <p>Merkle tree</p>
    <p>Mixer</p>
    <p>if (converged) commit</p>
    <p>else repair divergence</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Outline</p>
    <p>Mechanisms</p>
    <p>Architecture</p>
    <p>Insight</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Replication of multithreaded services</p>
    <p>Bonus: mask concurrency bugs</p>
    <p>Dependability Performance</p>
    <p>Independent execution Non-deterministic order of requests</p>
  </div>
  <div class="page">
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>MASKING CONCURRENCY BUGS</p>
    <p>token</p>
    <p>token</p>
    <p>token</p>
    <p>Verify</p>
  </div>
  <div class="page">
    <p>EXECUTE-VERIFY: AN ARCHITECTURAL CHANGE</p>
    <p>Synchronous Asynchronous</p>
    <p>Crash failures</p>
    <p>Arbitrary failures</p>
  </div>
  <div class="page">
    <p>CONFIGURATIONS</p>
    <p>Asynchronous BFT Synchronous primary-backup</p>
    <p>Execution Verification</p>
    <p>Tolerates 1 arbitrary fault Tolerates 1 omission fault</p>
    <p>Primary</p>
    <p>Backup</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
    <p>What is the performance benefit of Eve compared to traditional SMR systems?</p>
    <p>How does the quality of the mixer affect Eves performance?</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL SETUP</p>
    <p>Emulab testbed deployment</p>
    <p>Execution replicas: 16 cores</p>
    <p>H2 Database Engine (TPC-W benchmark)</p>
    <p>Key-value store (Microbenchmarks)</p>
    <p>Applications</p>
  </div>
  <div class="page">
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq ue</p>
    <p>st s/</p>
    <p>se c)</p>
    <p># execution threads</p>
    <p>Application: H2 Database Engine Workload: TPC-W (browsing)</p>
    <p>Unreplicated</p>
    <p>Eve(BFT)</p>
    <p>Eve(primary-backup)</p>
    <p>Traditional SMR</p>
  </div>
  <div class="page">
    <p>IMPACT OF THE MIXER</p>
    <p>False conflicts: misclassify non-conflicting requests as conflicting  Reduces parallelism</p>
    <p>Application: Key-value store</p>
    <p>Mixer Quality</p>
    <p>Undetected conflicts: misclassify conflicting requests as non-conflicting  Can introduce divergence</p>
    <p>Number of key-value pairs  Determines available parallelism</p>
  </div>
  <div class="page">
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq ue</p>
    <p>st s/</p>
    <p>se c)</p>
    <p>False conflicts (%)</p>
    <p>FALSE CONFLICTS REDUCE THE AVAILABLE PARALLELISM</p>
  </div>
  <div class="page">
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq ue</p>
    <p>st s/</p>
    <p>se c)</p>
    <p>Undetected conflicts (%) (log)</p>
    <p>UNDETECTED CONFLICTS CAUSE DIVERGENCE AND ROLLBACKS</p>
    <p>Traditional SMR (sequential)</p>
  </div>
  <div class="page">
    <p>TPC-W EXPERIMENTS: NO ROLLBACKS OBSERVED</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq ue</p>
    <p>st s/</p>
    <p>se c)</p>
    <p># execution threads</p>
    <p>Unreplicated</p>
    <p>Eve(BFT)</p>
    <p>Eve(primary-backup)</p>
    <p>Traditional SMR</p>
  </div>
  <div class="page">
    <p>CONCLUSION Replication and multithreading are</p>
    <p>not mutually exclusive</p>
    <p>Redesign replication: from agree-execute</p>
    <p>Execute AgreeVerify</p>
    <p>to execute-verify</p>
  </div>
</Presentation>
