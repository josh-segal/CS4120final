<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Thread and Memory Placement on NUMA Systems: Asymmetry Ma7ers</p>
    <p>Bap:ste Lepers, Alexandra Fedorova Vivien Quma Simon Fraser University Grenoble University</p>
  </div>
  <div class="page">
    <p>Machines are NUMA</p>
    <p>Node 1</p>
    <p>Node 2 Node 3</p>
    <p>Memory Memory</p>
    <p>Memory Memory</p>
    <p>CPU0 CPU1</p>
    <p>CPU2 CPU3</p>
  </div>
  <div class="page">
    <p>Machines are NUMA</p>
    <p>Node 1</p>
    <p>Node 2 Node 3</p>
    <p>Memory Memory</p>
    <p>Memory Memory</p>
    <p>CPU0 CPU1</p>
    <p>CPU2 CPU3</p>
    <p>Interconnect link</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Interconnects.</p>
  </div>
  <div class="page">
    <p>Lets execute an applica:on</p>
    <p>Node 1</p>
    <p>Node 2 Node 3</p>
    <p>Memory Memory</p>
    <p>Memory Memory</p>
    <p>Node 0 Execu:on :me:</p>
  </div>
  <div class="page">
    <p>Lets execute the same applica:on again</p>
    <p>Node 1</p>
    <p>Node 2 Node 3</p>
    <p>Memory Memory</p>
    <p>Memory Memory</p>
    <p>Node 0 Execu:on :me:</p>
  </div>
  <div class="page">
    <p>Why?!</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Interconnects have different bandwidths</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>Some interconnects are fast, some are slow!</p>
  </div>
  <div class="page">
    <p>Modern machines are even more complex</p>
  </div>
  <div class="page">
    <p>Par:al interconnect</p>
    <p>Node 0</p>
    <p>Node 7</p>
    <p>No direct link between node 0 and 7, 0 will do 2-hops to access 7</p>
    <p>Node 6</p>
  </div>
  <div class="page">
    <p>Fast (6GB/s) and slow (3GB/s)</p>
  </div>
  <div class="page">
    <p>Fast in only one direc:on (read 4GB/s, write 3GB/s)</p>
    <p>Node 0</p>
    <p>Node 2</p>
  </div>
  <div class="page">
    <p>Unidirec:onal links</p>
    <p>Node 3 Node 7</p>
  </div>
  <div class="page">
    <p>Streamcluster running on 2 nodes</p>
  </div>
  <div class="page">
    <p>Streamcluster running on 2 nodes</p>
    <p>Master thread node</p>
    <p>Perf. (s)</p>
    <p>- 168</p>
    <p>- 228</p>
    <p>Master thread node</p>
    <p>Perf. (s)</p>
    <p>Some 2-hops configura:ons are faster than some 1-hop configura:ons</p>
  </div>
  <div class="page">
    <p>Bandwidth is more important than latency</p>
  </div>
  <div class="page">
    <p>Current op:miza:ons</p>
    <p>Avoid 2-hops (Linux, )</p>
    <p>Place I/O threads close to I/O nodes</p>
  </div>
  <div class="page">
    <p>Our solu:on: AsymSched</p>
    <p>Asymmetry aware scheduling Tries to maximize bandwidth between communica:ng threads</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Thread migra:on  Place threads on well interconnected nodes</p>
    <p>Memory placement  Dynamic memory migra:on for small working sets  Fast bulk memory migra:on otherwise</p>
    <p>Con:nuous profiling in background  Takes decisions every second</p>
  </div>
  <div class="page">
    <p>Step one: cluster threads</p>
    <p>T1</p>
    <p>T2</p>
    <p>M em</p>
    <p>or y</p>
  </div>
  <div class="page">
    <p>Limita:ons</p>
    <p>Hardware counters work at the scale of a node  E.g.: Node 0 did an access to node 7</p>
    <p>So we cluster per node.</p>
    <p>We only cluster threads that have the same pid.</p>
  </div>
  <div class="page">
    <p>Step two: migrate threads</p>
    <p>T2</p>
    <p>M em</p>
    <p>or y</p>
    <p>T1</p>
    <p>Migra:on is done on a node basis  We move all threads running on a node to another node.</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Find the best placement  I.e., the placement that maximizes bandwidth</p>
    <p>between threads.</p>
    <p>The number of placements is huge  Up to factorial(#nodes)  We skip obviously bad configura:ons</p>
    <p>Skip placements that use the slowest links  We only do computa:ons on non-equivalent</p>
    <p>configura:ons.  Hash func:on placement -&gt; generic placement.</p>
  </div>
  <div class="page">
    <p>Step three: migrate memory</p>
    <p>T2</p>
    <p>M em</p>
    <p>or y</p>
    <p>T1</p>
    <p>T1 and T2 might con:nue accessing memory located on the previous node of T1</p>
    <p>M em</p>
    <p>or y</p>
  </div>
  <div class="page">
    <p>Implementa:on</p>
    <p>We use IBS to detect accessed pages</p>
    <p>It is not precise, and might not be sufficient  Do full memory migra:on in that case</p>
    <p>Problem: Linux system call takes 5.1s to migrate 1GB!  Our workloads use up to 30GB of RAM.</p>
  </div>
  <div class="page">
    <p>Fast memory migra:on</p>
    <p>Implementa:on:  Freeze the applica:on (SIGSTOP)  Compute a list of all pages to migrate  Modify PTEs directly</p>
    <p>No lock  Only limited by interconnect bandwidth  Migrate memory from mul:ple nodes in parallel</p>
    <p>Migrates 1GB from 1 node in 0.3s (17x faster than Linux)  Migrates 2GB from 2 nodes in 0.3s (34x)</p>
  </div>
  <div class="page">
    <p>Evalua:on (1/4)</p>
    <p>-40%</p>
    <p>-30%</p>
    <p>-20%</p>
    <p>-10%</p>
    <p>sp ec JB B</p>
    <p>Pe rf or m an</p>
    <p>ce im</p>
    <p>pr ov em</p>
    <p>en t / av er ag e</p>
    <p>pl ac em</p>
    <p>en t (%</p>
    <p>)</p>
    <p>Worst thread placement</p>
    <p>Best thread placement</p>
    <p>Dynamic memory migra:on only</p>
    <p>Asymsched</p>
  </div>
  <div class="page">
    <p>Evalua:on (2/4)</p>
    <p>-100%</p>
    <p>-50%</p>
    <p>streamcluster pca facerec</p>
    <p>Pe rf or m an</p>
    <p>ce im</p>
    <p>pr ov em</p>
    <p>en t /</p>
    <p>av er ag e pl ac em</p>
    <p>en t (%</p>
    <p>) Worst thread placement</p>
    <p>Best thread placement</p>
    <p>Dynamic memory migra:on only</p>
    <p>Asymsched</p>
  </div>
  <div class="page">
    <p>Evalua:on (3/4)</p>
    <p>-15%</p>
    <p>-10%</p>
    <p>-5%</p>
    <p>cg .C .x</p>
    <p>ep .C .x</p>
    <p>q .C .x</p>
    <p>is .D .x</p>
    <p>lu .B .x</p>
    <p>m g. C. x</p>
    <p>sp .A .x</p>
    <p>ua .B .x</p>
    <p>sw ap :o</p>
    <p>ns</p>
    <p>km ea ns</p>
    <p>m at ri xm</p>
    <p>ul :p</p>
    <p>ly</p>
    <p>w c</p>
    <p>w r</p>
    <p>w rm</p>
    <p>em</p>
    <p>Pe rf or m an</p>
    <p>ce im</p>
    <p>pr ov em</p>
    <p>en t / av er ag e</p>
    <p>pl ac em</p>
    <p>en t (%</p>
    <p>)</p>
    <p>Worst thread placement Best thread placement</p>
    <p>Dynamic memory migra:on only Asymsched</p>
  </div>
  <div class="page">
    <p>Evalua:on - Mul:app (4/4)</p>
    <p>-100% -50% 0% 50%</p>
    <p>sp ec jb b- 3</p>
    <p>gr ap h5</p>
    <p>m at ri xm</p>
    <p>ul :p</p>
    <p>ly -2</p>
    <p>st re am</p>
    <p>cl us te r- 3</p>
    <p>gr ap h5</p>
    <p>sp ec jb b- 2</p>
    <p>st re am</p>
    <p>cl us te r- 3</p>
    <p>st re am</p>
    <p>cl us te r- 3</p>
    <p>st re am</p>
    <p>cl us te r- 2</p>
    <p>sp ec jb b- 5</p>
    <p>m at ri xm</p>
    <p>ul :p</p>
    <p>ly -3</p>
    <p>sp ec jb b- 5</p>
    <p>st re am</p>
    <p>cl us te r- 3</p>
    <p>Pe rf or m an</p>
    <p>ce im</p>
    <p>pr ov em</p>
    <p>en t / av er ag e</p>
    <p>pl ac em</p>
    <p>en t (%</p>
    <p>)</p>
    <p>Worst thread placement Best thread placement</p>
    <p>Dynamic memory migra:on only Asymsched</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Systems should maximize bandwidth between threads</p>
    <p>Asymsched  Up to 200% faster than average placement  Up to 91% faster than dynamic memory migra:on</p>
    <p>alone</p>
  </div>
  <div class="page">
    <p>Ques:ons?</p>
  </div>
</Presentation>
