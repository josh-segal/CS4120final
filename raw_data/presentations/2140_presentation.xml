<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>harmnium</p>
    <p>Helgi Kr. Sigurbjarnarson RU</p>
    <p>Ptur O. Ragnarsson RU</p>
    <p>Ymir Vigfusson RU</p>
    <p>Mahesh Balakrishnan MSR</p>
  </div>
  <div class="page">
    <p>VM VM VM</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
    <p>RAM CPU Storage</p>
    <p>Host cannot reclaim space from virtual</p>
    <p>disk</p>
    <p>Virtual disk cannot expand</p>
    <p>beyond its fixed capacity</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>http://xkcd.com/1360/</p>
  </div>
  <div class="page">
    <p>Significant ephemeral data</p>
    <p>System 1</p>
    <p>System 2</p>
    <p>System 3</p>
    <p>Space occupied by file types (3 developer laptops)</p>
    <p>Swap Cache Media ASCII</p>
    <p>Document System Other Free space</p>
    <p>Could be recomputed</p>
    <p>Could be compressed</p>
  </div>
  <div class="page">
    <p>Significant ephemeral data</p>
    <p>System 1</p>
    <p>System 2</p>
    <p>System 3</p>
    <p>Space occupied by file types (3 developer laptops)</p>
    <p>Swap Cache Media ASCII</p>
    <p>Document System Other Free space</p>
    <p>Could be recomputed</p>
    <p>Could be compressed</p>
    <p>Can we exploit ephemeral data to</p>
    <p>enable elastic storage?</p>
  </div>
  <div class="page">
    <p>What if files could contract and expand?</p>
  </div>
  <div class="page">
    <p>expand() obtains the raw bytes of the file</p>
    <p>Run computations (e.g. compression)</p>
    <p>Fetch data across a network</p>
    <p>Operate over other files on the FS</p>
    <p>contract() deletes raw bytes, retains motif code</p>
    <p>A motif is code to generate the data in a file</p>
    <p>Motifs can be recursive</p>
    <p>Motifs can have circular</p>
    <p>dependencies</p>
    <p>Files can have multiple motifs</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>VM VM</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>Virtual disk</p>
    <p>harmium FS Large</p>
    <p>address space</p>
    <p>Limit on total size</p>
  </div>
  <div class="page">
    <p>VM VM</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>Virtual disk Conductor</p>
    <p>harmium FS 20GB</p>
  </div>
  <div class="page">
    <p>VM VM</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>Virtual disk Conductor</p>
    <p>harmium FS Large</p>
    <p>address space</p>
    <p>Limit on total size</p>
    <p>Which files should be contracted or expanded?</p>
    <p>What interface can the conductor use?</p>
  </div>
  <div class="page">
    <p>Feed info into optimization mechanism  Choose files with minimum total expansion</p>
    <p>latency s.t. contraction saves sufficient space.</p>
    <p>Most competitive algorithm: Greedily choose files on LRU list to maximize ratio of space savings to expansion latency</p>
    <p>harmnium FS  GB limit</p>
    <p>When will the file be accessed next?</p>
    <p>How much time will it take to expand?</p>
  </div>
  <div class="page">
    <p>VM VM</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>harmnium FS 20GB</p>
    <p>TRIM</p>
    <p>Virtual disk Conductor</p>
  </div>
  <div class="page">
    <p>User-space FUSE prototype  Conductor: Python, via UNIX sockets</p>
    <p>Workload  Set of 54,000 patch files applied in</p>
    <p>chronological order to the Linux kernel</p>
    <p>Motif  Network storage via scp</p>
    <p>Measure latency to access first byte</p>
  </div>
  <div class="page">
    <p>No size constraints</p>
    <p>Use 450MB</p>
    <p>Size constraint lifted Use 650MB</p>
  </div>
  <div class="page">
    <p>Elastic performance/capacity trade-off for storage in VMs</p>
    <p>Problem Applications store</p>
    <p>ephemeral data on secondary storage But storage stacks provide durability</p>
    <p>for every file</p>
    <p>harmnium Associate motifs with</p>
    <p>every file, allowing reconstruction</p>
    <p>Contract/expand files to minimize</p>
    <p>access latency</p>
    <p>Results Best algorithm: LRU greedily maximizing</p>
    <p>space/latency</p>
    <p>Fully functional FUSE prototype</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>0-1 Knapsack (NP-complete)  S = space needed to save</p>
    <p>= expected expansion latency for file i</p>
    <p>= expected storage savings for file I</p>
    <p>Reduction: Choose the files not to include  APX-knapsack takes O(nW) time, prohibitive</p>
  </div>
  <div class="page">
    <p>Trade-off between storage footprint and performance  Usually in distributed settings</p>
    <p>Sierra (EuroSys 2011), Rabbit (SOCC 2011), Springfs (FAST 2014),</p>
    <p>These systems maintain 1 to N copies of</p>
    <p>each file</p>
    <p>harmium, however, maintains 0 to 1 copies of each file</p>
  </div>
  <div class="page">
    <p>A compression file system?  A glorified cache?  A de-duplication system?  Harmium can support arbitrary motifs:  Compression of rarely accessed files</p>
    <p>Remote network storage [scp/rsync/nfs/]</p>
    <p>Pull from repositories [git/svn/]</p>
    <p>Re-wget data in Downloads folder</p>
    <p>Resume torrent download [remove partial files]</p>
    <p>System packages [retrieve from apt/debian/...]</p>
    <p>Regeneration of data sets [ala Nectar]</p>
  </div>
  <div class="page">
    <p>Motifs are really arbitrary code  Can cause system to hang, crash, corrupt data or</p>
    <p>consume resources wastefully  Our current implementation is vulnerable  Motifs execute within the same process as the FS</p>
    <p>Isolation by virtualization too coarse-grained</p>
    <p>Sandboxing great for security, may be slow</p>
    <p>Ongoing work: require authorization  Users specifically approve running of motifs</p>
    <p>generated by those of lesser privilege or fewer capabilities</p>
  </div>
  <div class="page">
    <p>But isnt computation more expensive than storage?</p>
    <p>Underlying principle of our work:</p>
    <p>Computation, Network and Storage</p>
    <p>are fungible  Harmonium allows use of Computation or</p>
    <p>Network when Storage is scarce  Other parts of the trade-off interesting as</p>
    <p>well!</p>
  </div>
</Presentation>
