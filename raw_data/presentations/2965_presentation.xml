<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Arrakis: The Operating System</p>
    <p>is the Control Plane</p>
    <p>Simon Peter, Jialin Li, Irene Zhang, Dan Ports, Doug Woos,</p>
    <p>Arvind Krishnamurthy, Tom Anderson</p>
    <p>University of Washington</p>
    <p>Timothy Roscoe ETH Zurich</p>
  </div>
  <div class="page">
    <p>Building an OS for the Data Center</p>
    <p>Server I/O performance matters  Key-value stores, web &amp; file servers, lock managers,</p>
    <p>Can we deliver performance close to hardware?</p>
    <p>Example system: Dell PowerEdge R520</p>
    <p>Intel X520 10G NIC</p>
    <p>Intel RS3 RAID 1GB flash-backed cache</p>
    <p>Sandy Bridge CPU 6 cores, 2.2 GHz</p>
    <p>+ + = $1,200</p>
  </div>
  <div class="page">
    <p>Building an OS for the Data Center</p>
    <p>Server I/O performance matters  Key-value stores, web &amp; file servers, lock managers,</p>
    <p>Can we deliver performance close to hardware?</p>
    <p>Example system: Dell PowerEdge R520</p>
    <p>Intel X520 10G NIC</p>
    <p>Intel RS3 RAID 1GB flash-backed cache</p>
    <p>Sandy Bridge CPU 6 cores, 2.2 GHz</p>
    <p>+ + = $1,200</p>
    <p>Todays I/O devices are fast</p>
  </div>
  <div class="page">
    <p>Cant we just use Linux?</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Linux I/O Performance</p>
    <p>Redis HW 13%</p>
    <p>HW 18%</p>
    <p>Kernel 84%</p>
    <p>Kernel 62%</p>
    <p>App 3%</p>
    <p>App 20%</p>
    <p>S E T</p>
    <p>G E T</p>
    <p>% O F 1 K B R EQ U E S T T I M E S P E N T</p>
    <p>API Multiplexing</p>
    <p>Naming Resource limits</p>
    <p>Access control I/O Scheduling</p>
    <p>I/O Processing Copying</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>RAID Storage 25 us / 1KB write</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Linux I/O Performance</p>
    <p>Redis HW 13%</p>
    <p>HW 18%</p>
    <p>Kernel 84%</p>
    <p>Kernel 62%</p>
    <p>App 3%</p>
    <p>App 20%</p>
    <p>S E T</p>
    <p>G E T</p>
    <p>% O F 1 K B R EQ U E S T T I M E S P E N T</p>
    <p>API Multiplexing</p>
    <p>Naming Resource limits</p>
    <p>Access control I/O Scheduling</p>
    <p>I/O Processing Copying</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>RAID Storage 25 us / 1KB write</p>
    <p>Kernel mediation is too heavyweight</p>
  </div>
  <div class="page">
    <p>Skip kernel &amp; deliver I/O directly to applications  Reduce OS overhead</p>
    <p>Keep classical server OS features  Process protection</p>
    <p>Resource limits</p>
    <p>I/O protocol flexibility</p>
    <p>Global naming</p>
    <p>The hardware can help us</p>
    <p>Arrakis Goals</p>
  </div>
  <div class="page">
    <p>Standard on NIC, emerging on RAID</p>
    <p>Multiplexing  SR-IOV: Virtual PCI devices</p>
    <p>w/ own registers, queues, INTs</p>
    <p>Protection  IOMMU:</p>
    <p>Devices use app virtual memory</p>
    <p>Packet filters, logical disks: Only allow eligible I/O</p>
    <p>I/O Scheduling  NIC rate limiter, packet schedulers</p>
    <p>Hardware I/O Virtualization</p>
    <p>SR-IOV NIC</p>
    <p>Packet filters</p>
    <p>Network</p>
    <p>Rate limiters</p>
    <p>User-level VNIC 1</p>
    <p>User-level VNIC 2</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>How to skip the kernel?</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing Copying</p>
    <p>Protection</p>
    <p>Data Path</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>How to skip the kernel?</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing Copying</p>
    <p>Protection</p>
    <p>Data Path</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>How to skip the kernel?</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Copying</p>
    <p>Protection</p>
    <p>Data Path</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>How to skip the kernel?</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>Arrakis I/O Architecture</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>Control Plane Data Plane</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>Arrakis I/O Architecture</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>Control Plane Data Plane</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>Arrakis I/O Architecture</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>Control Plane Data Plane</p>
  </div>
  <div class="page">
    <p>Arrakis Control Plane</p>
    <p>Access control  Do once when configuring data plane</p>
    <p>Enforced via NIC filters, logical disks</p>
    <p>Resource limits  Program hardware I/O schedulers</p>
    <p>Global naming  Virtual file system still in kernel</p>
    <p>Storage implementation in applications</p>
  </div>
  <div class="page">
    <p>Virtual Storage Area</p>
    <p>/tmp/lockfile</p>
    <p>/var/lib/key_value.db</p>
    <p>/etc/config.rc</p>
    <p>Kernel VFS</p>
    <p>Redis Fast</p>
    <p>HW ops</p>
    <p>Global Naming</p>
    <p>Logical disk</p>
  </div>
  <div class="page">
    <p>Virtual Storage Area</p>
    <p>/tmp/lockfile</p>
    <p>/var/lib/key_value.db</p>
    <p>/etc/config.rc</p>
    <p>Kernel VFS</p>
    <p>emacs</p>
    <p>Redis Fast</p>
    <p>HW ops</p>
    <p>Global Naming</p>
    <p>Logical disk</p>
  </div>
  <div class="page">
    <p>Virtual Storage Area</p>
    <p>/tmp/lockfile</p>
    <p>/var/lib/key_value.db</p>
    <p>/etc/config.rc</p>
    <p>Kernel VFS</p>
    <p>emacs</p>
    <p>open(/etc/config.rc)</p>
    <p>Redis Fast</p>
    <p>HW ops</p>
    <p>Global Naming</p>
    <p>Logical disk</p>
  </div>
  <div class="page">
    <p>Virtual Storage Area</p>
    <p>/tmp/lockfile</p>
    <p>/var/lib/key_value.db</p>
    <p>/etc/config.rc</p>
    <p>Kernel VFS</p>
    <p>emacs</p>
    <p>Redis Fast</p>
    <p>HW ops</p>
    <p>Global Naming</p>
    <p>Logical disk</p>
    <p>Indirect IPC interface</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>Arrakis I/O Architecture</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>Control Plane Data Plane</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>Arrakis I/O Architecture</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>Control Plane Data Plane</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Naming</p>
    <p>Resource limits</p>
    <p>Access control</p>
    <p>Redis</p>
    <p>Arrakis I/O Architecture</p>
    <p>Redis</p>
    <p>I/O Devices</p>
    <p>API</p>
    <p>Multiplexing</p>
    <p>I/O Scheduling</p>
    <p>I/O Processing</p>
    <p>Protection</p>
    <p>Data Path</p>
    <p>Control Plane Data Plane</p>
    <p>Redis API</p>
    <p>I/O Processing</p>
  </div>
  <div class="page">
    <p>Storage Data Plane: Persistent Data Structures  Examples: log, queue</p>
    <p>Operations immediately persistent on disk</p>
    <p>Benefits:</p>
    <p>In-memory = on-disk layout  Eliminates marshaling</p>
    <p>Metadata in data structure  Early allocation  Spatial locality</p>
    <p>Data structure specific caching/prefetching</p>
    <p>Modified Redis to use persistent log: 109 LOC changed</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Redis Latency</p>
    <p>Reduced (in-memory) GET latency by 65%</p>
    <p>Reduced (persistent) SET latency by 81%</p>
    <p>HW 33%</p>
    <p>HW 18%</p>
    <p>libIO 35%</p>
    <p>Kernel 62%</p>
    <p>App 32%</p>
    <p>App 20%</p>
    <p>Arrakis</p>
    <p>Linux</p>
    <p>HW 77%</p>
    <p>HW 13%</p>
    <p>libIO 7%</p>
    <p>Kernel 84%</p>
    <p>App 15%</p>
    <p>App 3%</p>
    <p>Arrakis</p>
    <p>Linux (ext4)</p>
  </div>
  <div class="page">
    <p>Redis Throughput</p>
    <p>Improved GET throughput by 1.75x  Linux: 143k transactions/s</p>
    <p>Arrakis: 250k transactions/s</p>
    <p>Improved SET throughput by 9x  Linux: 7k transactions/s</p>
    <p>Arrakis: 63k transactions/s</p>
  </div>
  <div class="page">
    <p>memcached Scalability</p>
    <p>Throughput (k transactions/s)</p>
    <p>Number of CPU cores</p>
    <p>Linux Arrakis</p>
  </div>
  <div class="page">
    <p>Single-core Performance</p>
    <p>Throughput (k packets/s)</p>
    <p>Linux Arrakis/POSIX Arrakis/Zero-copy Driver</p>
    <p>UDP echo benchmark</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>OS is becoming an I/O bottleneck  Globally shared I/O stacks are slow on data path</p>
    <p>Arrakis: Split OS into control/data plane  Direct application I/O on data path</p>
    <p>Specialized I/O libaries</p>
    <p>Application-level I/O stacks deliver great performance  Redis: up to 9x throughput, 81% speedup</p>
    <p>Memcached scales linearly to 3x throughput</p>
    <p>Source code: http://arrakis.cs.washington.edu</p>
  </div>
</Presentation>
