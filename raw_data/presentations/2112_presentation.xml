<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LoadIQ: Learning to Identify Workload Phases from a Live Storage Trace</p>
    <p>Pankaj Pipada, Achintya Kundu, K. Gopinath, Chiranjib Bhattacharyya</p>
    <p>Sai Susarla, P. C. Nagesh</p>
    <p>Indian Institute of Science Bangalore</p>
    <p>NetApp</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 1 / 24</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 2 / 24</p>
  </div>
  <div class="page">
    <p>Why Context?</p>
    <p>Application: I E-commerce: browsing vs. shopping phase [Zhang, Riska, and Riedel 2008]</p>
    <p>I Customize storage SLOs to the workload characteristics at hand. I DB: OLTP vs. backup/maintenance phase</p>
    <p>I Tune storage-level read-ahead.</p>
    <p>Host: I Cache type (DRAM or Flash)? Size?</p>
    <p>I Use to avoid wasted caching on shared storage. I SNFS, HDFS, Lustre and GPFS</p>
    <p>I Use file system layout knowledge to optimize storage.</p>
    <p>I Differentiated storage services [Mesnier and Akers 2011 SOSP].</p>
    <p>Detecting such phase transitions within an application has been problematic [Gu and Verbrugge 2006].</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 3 / 24</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Large number of studies to get aggregate information about file systems through trace analysis [Baker et al. 1991; Leung et al. 2008; Roselli, Lorch, and Anderson 2000].</p>
    <p>I As we need to detect specific patterns within an application, aggregate information about file systems is not useful.</p>
    <p>Strong correlation between high-level application context and the IO patterns generated [Riska and Riedel 2006; Zhang, Riska, and Riedel 2008].</p>
    <p>I Need such correlation for application phase detection.</p>
    <p>Inferring the sequentiality of workloads and access patterns using block traces [Madhyastha and Reed 1997].</p>
    <p>I Dynamically drives prefetching and caching decisions.</p>
    <p>The work closest in spirit to this work: Identifying workloads from NFS traces [Yadwadkar et al. 2010].</p>
    <p>I Uses opcode sequence for classification. I Limited applicability in VM environments where most requests are reads and</p>
    <p>writes only.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 4 / 24</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Large number of studies to get aggregate information about file systems through trace analysis [Baker et al. 1991; Leung et al. 2008; Roselli, Lorch, and Anderson 2000].</p>
    <p>I As we need to detect specific patterns within an application, aggregate information about file systems is not useful.</p>
    <p>Strong correlation between high-level application context and the IO patterns generated [Riska and Riedel 2006; Zhang, Riska, and Riedel 2008].</p>
    <p>I Need such correlation for application phase detection.</p>
    <p>Inferring the sequentiality of workloads and access patterns using block traces [Madhyastha and Reed 1997].</p>
    <p>I Dynamically drives prefetching and caching decisions.</p>
    <p>The work closest in spirit to this work: Identifying workloads from NFS traces [Yadwadkar et al. 2010].</p>
    <p>I Uses opcode sequence for classification. I Limited applicability in VM environments where most requests are reads and</p>
    <p>writes only.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 4 / 24</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Large number of studies to get aggregate information about file systems through trace analysis [Baker et al. 1991; Leung et al. 2008; Roselli, Lorch, and Anderson 2000].</p>
    <p>I As we need to detect specific patterns within an application, aggregate information about file systems is not useful.</p>
    <p>Strong correlation between high-level application context and the IO patterns generated [Riska and Riedel 2006; Zhang, Riska, and Riedel 2008].</p>
    <p>I Need such correlation for application phase detection.</p>
    <p>Inferring the sequentiality of workloads and access patterns using block traces [Madhyastha and Reed 1997].</p>
    <p>I Dynamically drives prefetching and caching decisions.</p>
    <p>The work closest in spirit to this work: Identifying workloads from NFS traces [Yadwadkar et al. 2010].</p>
    <p>I Uses opcode sequence for classification. I Limited applicability in VM environments where most requests are reads and</p>
    <p>writes only.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 4 / 24</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Large number of studies to get aggregate information about file systems through trace analysis [Baker et al. 1991; Leung et al. 2008; Roselli, Lorch, and Anderson 2000].</p>
    <p>I As we need to detect specific patterns within an application, aggregate information about file systems is not useful.</p>
    <p>Strong correlation between high-level application context and the IO patterns generated [Riska and Riedel 2006; Zhang, Riska, and Riedel 2008].</p>
    <p>I Need such correlation for application phase detection.</p>
    <p>Inferring the sequentiality of workloads and access patterns using block traces [Madhyastha and Reed 1997].</p>
    <p>I Dynamically drives prefetching and caching decisions.</p>
    <p>The work closest in spirit to this work: Identifying workloads from NFS traces [Yadwadkar et al. 2010].</p>
    <p>I Uses opcode sequence for classification. I Limited applicability in VM environments where most requests are reads and</p>
    <p>writes only.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 4 / 24</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>Identify any set of specific patterns based on past training. I Not just sequential or any particular access pattern</p>
    <p>A generic technique that can work for a variety of applications and is robust against variations in environment and configuration.</p>
    <p>I No dependence on specific heuristics for a specific application</p>
    <p>Applicable in VM environments.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 5 / 24</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>Identify any set of specific patterns based on past training. I Not just sequential or any particular access pattern</p>
    <p>A generic technique that can work for a variety of applications and is robust against variations in environment and configuration.</p>
    <p>I No dependence on specific heuristics for a specific application</p>
    <p>Applicable in VM environments.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 5 / 24</p>
  </div>
  <div class="page">
    <p>Our approach</p>
    <p>Identify any set of specific patterns based on past training. I Not just sequential or any particular access pattern</p>
    <p>A generic technique that can work for a variety of applications and is robust against variations in environment and configuration.</p>
    <p>I No dependence on specific heuristics for a specific application</p>
    <p>Applicable in VM environments.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 5 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Problem definition</p>
    <p>Build a tool to track workload phase shifts in real-time (every minute) from a live trace feed and perform trace annotation.</p>
    <p>Desired properties:</p>
    <p>I Non-intrusive</p>
    <p>I Dependable: Accurately discriminate among known classes of workload phases.</p>
    <p>I Extensible: Support augmenting new phase types.</p>
    <p>I Automated: Identify phases in near real-time to support online adaptation, where manual intervention is impractical.</p>
    <p>I Robust against inevitable flux in real-world workload patterns due to variations in intensity, time spread and client-side or network environment.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 6 / 24</p>
  </div>
  <div class="page">
    <p>Components of a trace</p>
    <p>NFS Trace:</p>
    <p>SAN Trace:</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 7 / 24</p>
  </div>
  <div class="page">
    <p>Similarity based classification</p>
    <p>Set of objects: X</p>
    <p>Similarity function: s : X X  R</p>
    <p>Training Data: { x1, x2, x3, x4, x5, x6, x7 }</p>
    <p>Test Input: x</p>
    <p>Given: s (x,x1), . . . , s (x,x4), s (x,x5), . . . , s (x,x7)</p>
    <p>Q1: How to define s (., .) for storage traces ? Q2: How to predict the class of x ?</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 8 / 24</p>
  </div>
  <div class="page">
    <p>Similarity using offset shift histograms</p>
    <p>Extract offset fields from the NFS traces READ and WRITE requests.</p>
    <p>Compute a histogram out of the absolute difference between each successive offset fields (i.e, offset shift).</p>
    <p>Quantize the offset shifts into their nearest bin sizes in powers of 2, i.e., sizes of 21, 22, 23, . . . bytes.</p>
    <p>Normalize the histograms to eliminate unwanted effects due to different trace lengths.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 9 / 24</p>
  </div>
  <div class="page">
    <p>Similarity using offset shift histograms</p>
    <p>Given two histograms H1 and H2, a similarity score is computed as follows:</p>
    <p>S (H1, H2) = c  L</p>
    <p>i=1</p>
    <p>[H1(i )  H2(i )]2</p>
    <p>H1(i ) + H2(i )</p>
    <p>where L is the number of bins and c is a constant representing the average similarity across all training traces.</p>
    <p>Given a similarity score between any two traces, a similarity matrix is constructed across all the representative traces.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 10 / 24</p>
  </div>
  <div class="page">
    <p>Support Vector Machine (SVM)</p>
    <p>Training Data: {(x1, c1), (x2, c2), . . . (xn, cn)}</p>
    <p>Test Data: x</p>
    <p>- -SVM Training Algorithm</p>
    <p>Kernel Matrix</p>
    <p>K  Rnn</p>
    <p>Class labels c1, . . . ,cn</p>
    <p>1, . . . ,n</p>
    <p>Bias b</p>
    <p>Support Vector Coefficients</p>
    <p>Decision function: f (x) = n</p>
    <p>i=1 i ci k (x,xi ) + b , i  0, b  R</p>
    <p>SVM Classifier: sign ( f (x) )</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 11 / 24</p>
  </div>
  <div class="page">
    <p>Linear classification using SVM</p>
    <p>...</p>
    <p>... ..</p>
    <p>. .</p>
    <p>..</p>
    <p>. ..</p>
    <p>. ..</p>
    <p>. .</p>
    <p>.</p>
    <p>.. . .. ..</p>
    <p>. . .</p>
    <p>...</p>
    <p>. .</p>
    <p>.</p>
    <p>.. ..</p>
    <p>.</p>
    <p>. .</p>
    <p>..</p>
    <p>Margin. .</p>
    <p>. ..</p>
    <p>Decision boundary</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 12 / 24</p>
  </div>
  <div class="page">
    <p>Nonlinear classification using SVM</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. .</p>
    <p>. .</p>
    <p>. .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>...</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 13 / 24</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Similarity matrix: Symmetric but not guaranteed to be positive semidefinite.</p>
    <p>S =</p>
    <p>s (x1,x1) s (x1,x2) . . . s (x1,xn) s (x2,x1) s (x2,x2) . . . s (x2,xn)</p>
    <p>... ...</p>
    <p>. . . . . . s (xn,x1) s (xn,x2) . . . s (xn,xn)</p>
    <p>Rnn</p>
    <p>Kernel matrix: A PSD matrix achieved by setting the negative eigen-values of the similarity matrix to zero [Chen, Gupta, and Recht 2009].</p>
    <p>K =</p>
    <p>k (x1,x1) k (x1,x2) . . . k (x1,xn) k (x2,x1) k (x2,x2) . . . k (x2,xn)</p>
    <p>... ...</p>
    <p>. . . . . . k (xn,x1) k (xn,x2) . . . k (xn,xn)</p>
    <p>Rnn</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 14 / 24</p>
  </div>
  <div class="page">
    <p>Workflow</p>
    <p>new trace</p>
    <p>offset histogram generator</p>
    <p>similarity computation engines</p>
    <p>training sets Classifier 1</p>
    <p>Classifier 2</p>
    <p>Classifier k -1</p>
    <p>Classifier-k</p>
    <p>Majority Voting</p>
    <p>Figure: Block diagram for classifying m phases. Number of classifiers k = 1 2 m(m  1).</p>
    <p>A trace belongs to a class if and only if number of votes in its favor is exactly m  1; otherwise it belongs to class Unknown.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 15 / 24</p>
  </div>
  <div class="page">
    <p>Online self correction</p>
    <p>In an online deployment, over time, the trace snippets that the SVM based multi-class classifier flags as Unknown are collected.</p>
    <p>These are labeled with a special Unknown class label and the system is re-trained by augmenting it with this class.</p>
    <p>Past snippets are re-classified to see if any of them join this class.</p>
    <p>This works well in practice.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 16 / 24</p>
  </div>
  <div class="page">
    <p>Distinguishing phases in a database workload</p>
    <p>Workload used: TPC-DS I phases considered: Load, Query, Indexing, Maintenance.</p>
    <p>PostgreSQL database runs inside a VM with 4GB RAM available and the image residing on a NFS server.</p>
    <p>The VMs host machine is an 8-core Xeon-5520 with 8GB RAM.  For training LoadIQ, traces are collected while the database goes through</p>
    <p>various phases and each trace is labeled with its phase name.</p>
    <p>The collected traces are divided into 60-second snippets and read-write histograms are generated for each.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 17 / 24</p>
  </div>
  <div class="page">
    <p>Results: Fully trained system</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 18 / 24</p>
  </div>
  <div class="page">
    <p>Results: Iterative training over Unknown traces</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 19 / 24</p>
  </div>
  <div class="page">
    <p>Phases in a production OLAP workload</p>
    <p>Aim: Use LoadIQ to automate detecting the recurrence of special/anomalous workload behaviors in a production environment.</p>
    <p>Workload: A production enterprise data warehousing application in a 10-node cluster configured to use a SAN backend.</p>
    <p>50 LUNs each of size 20GB.  Traces: Post-host-cache SCSI request trace on all LUNs</p>
    <p>I 188K reads and 250K writes per LUN spread over 56 minutes.</p>
    <p>Phases considered: Hash table accesses and sequential IO bursts.</p>
    <p>Trace collection time: 60secs  Analysis time: 4secs  Retraining for Unknown class: 4secs</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 20 / 24</p>
  </div>
  <div class="page">
    <p>Spotting special workload behavior: OLAP</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 21 / 24</p>
  </div>
  <div class="page">
    <p>Interleaved sequential IO: OLAP</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 22 / 24</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A ML-based tool for identifying various phases in an application, from its live storage trace.</p>
    <p>I Accuracy &gt; 93% in many cases. I Can flag certain traces as Unknown. Retraining can be used to improve</p>
    <p>accuracy.</p>
    <p>Open questions: I How to separate concurrent IO patterns in a combined trace? I A quantifiable confidence measure of the classification output is needed. Can</p>
    <p>this be provided? I How to exploit phase knowledge in system design?</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 23 / 24</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A ML-based tool for identifying various phases in an application, from its live storage trace.</p>
    <p>I Accuracy &gt; 93% in many cases. I Can flag certain traces as Unknown. Retraining can be used to improve</p>
    <p>accuracy.</p>
    <p>Open questions: I How to separate concurrent IO patterns in a combined trace? I A quantifiable confidence measure of the classification output is needed. Can</p>
    <p>this be provided? I How to exploit phase knowledge in system design?</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 23 / 24</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>Baker, M. et al. (1991). Measurements of a Distributed File System. In: Proceedings of the 13th Symposium on Operating Systems Principles.</p>
    <p>Chen, Y., M. R. Gupta, and B. Recht (2009). Learning Kernels from Indefinite Similarities. In: International Conference on Machine Learning.</p>
    <p>Gu, D. and C. Verbrugge (2006). A survey of phase analysis: Techniques, evaluation and applications. Tech. rep. Citeseer.</p>
    <p>Leung, A. et al. (2008). Measurement and Analysis of Large-Scale File System Workloads. In: Proceedings of the USENIX 2008 Annual Technical Conference.</p>
    <p>Madhyastha, T. and D. Reed (1997). Input/Output Access Pattern Classification Using Hidden Markov Models. In: Workshop on Input/Output in Parallel and Distributed Systems.</p>
    <p>Mesnier, Michael P. and Jason B. Akers (2011). Differentiated storage services. In: SIGOPS Oper. Syst. Rev. 45.1 (Feb. 2011), pp. 4553. issn: 0163-5980. doi: 10.1145/1945023.1945030. url: http://doi.acm.org/10.1145/1945023.1945030.</p>
    <p>Riska, A. and E. Riedel (2006). Disk Drive Level Workload Characterization. In: Proceedings of the USENIX 2006 Annual Technical Conference.</p>
    <p>Roselli, D., J. Lorch, and T. E. Anderson (2000). A comparison of file system workloads. In: Proceedings of the USENIX 2000 Annual Technical Conference. San Diego, California.</p>
    <p>Yadwadkar, N. et al. (2010). Discovery of Application Workloads from Network File Traces. In: Proceedings of the Eighth USENIX Conference on File and Storage Technologies (FAST 2010).</p>
    <p>Zhang, Xi, Alma Riska, and Erik Riedel (2008). Characterization of the E-commerce Storage Subsystem Workload. In: QEST, pp. 297306.</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 24 / 24</p>
  </div>
  <div class="page">
    <p>Grateful acknowledgments</p>
    <p>IISc GARP funds  USENIX student grant program  NetApp research grant</p>
    <p>Pankaj Pipada et al. LoadIQ: Learning to Identify Workload Phases 13th June 2012 24 / 24</p>
  </div>
  <div class="page">
    <p>Thank You !!!</p>
  </div>
</Presentation>
