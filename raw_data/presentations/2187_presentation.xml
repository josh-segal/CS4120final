<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Understanding the Fault Resilience of File System Checkers</p>
    <p>Om Rameshwar Gatla, Mai Zheng</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Motivation</p>
    <p>Multiple power outages  Recovery procedure was interrupted  Resulted in severe data loss</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Motivation  Need to understand the behavior of local checkers</p>
    <p>under faults first</p>
    <p>Research Question:</p>
    <p>Does running the checker after an interrupted-check successfully return the file system to a consistent state? If not, what goes wrong?</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Related Work  Existing work for improving checkers</p>
    <p>E.g.: ffsck[@FAST13], SWIFT[@EUROSYS12], SQCK[@OSDI08]</p>
    <p>One common assumption</p>
    <p>checkers can finish without interruption</p>
    <p>We study behavior of checkers with interruptions</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Challenges</p>
    <p>Challenge #1:</p>
    <p>How to generate images that contain corruptions and require complex recovery?</p>
    <p>Challenge #2:</p>
    <p>How to interrupt recovery systematically?</p>
    <p>Difficult to simulate system crash and power outages</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>Generate test images that contain corruption:</p>
    <p>Method #1: Test images provided by developers</p>
    <p>Method #2: Manipulate metadata using file system debugger (e.g., debugfs, xfs_db)</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology  Develop Fault Injection Module to generate faults in</p>
    <p>a systematic and controllable way</p>
    <p>Adopt clean power fault model[@OSDI14]</p>
    <p>Clean termination of I/O stream</p>
    <p>No reordering</p>
    <p>Lower bound of failure impact</p>
    <p>Customize an iSCSI driver to record &amp; replay I/O commands</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>Replay</p>
    <p>Record</p>
    <p>Workload fault injection module</p>
    <p>test image</p>
    <p>Procedure to emulate clean power fault model</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>Replay 1</p>
    <p>I/O Block Trace</p>
    <p>Record</p>
    <p>Workload</p>
    <p>I/O blocks (block size is</p>
    <p>determined by fault injection</p>
    <p>granularity)</p>
    <p>fault injection module</p>
    <p>test image</p>
    <p>I/O Commands</p>
    <p>Procedure to emulate clean power fault model</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>Replay 1</p>
    <p>I/O Block Trace</p>
    <p>Record I/O blocks</p>
    <p>(block size is determined by fault injection</p>
    <p>granularity)</p>
    <p>fault injection module</p>
    <p>Procedure to emulate clean power fault model</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>Replay 1</p>
    <p>I/O Block Trace</p>
    <p>Record I/O blocks</p>
    <p>(block size is determined by fault injection</p>
    <p>granularity)</p>
    <p>fault injection module</p>
    <p>Procedure to emulate clean power fault model</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O</p>
    <p>commands</p>
    <p>partial commands</p>
    <p>fault injection module</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test</p>
    <p>image</p>
    <p>Workflow:</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O</p>
    <p>commands</p>
    <p>partial commands</p>
    <p>fault injection module</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test</p>
    <p>image</p>
    <p>Workflow:</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O</p>
    <p>commands</p>
    <p>partial commands</p>
    <p>fault injection module</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test</p>
    <p>image</p>
    <p>Workflow:</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Experimental Results</p>
    <p>Two case studies  e2fsck: checker for Ext 2/3/4 File Systems</p>
    <p>xfs_repair: checker for XFS File System</p>
    <p>Observed 4 types of corruptions:</p>
    <p>Un-mountable File Content Corruption</p>
    <p>Misplacement of Files</p>
    <p>Others</p>
    <p>Cannot be fixed by another run of fsck</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Used 175 test images from e2fsprogs</p>
    <p>Block size of all images is 1KB</p>
    <p>Fault injected at two granularities: 512B and 4KB</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology</p>
    <p>(2) fsck</p>
    <p>(4) record(6) replay</p>
    <p>(8) fsck</p>
    <p>(10) compare</p>
    <p>I/O</p>
    <p>commands</p>
    <p>partial commands</p>
    <p>fault injection module</p>
    <p>(3) reference image</p>
    <p>(7) interrupted image(s) (9) repaired image(s)</p>
    <p>(5) copy</p>
    <p>(1) copy</p>
    <p>test</p>
    <p>image</p>
    <p>RECAP</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Fault Injection Granularities</p>
    <p>Total number of Test Images</p>
    <p>Total number of repaired images</p>
    <p>under two fault injection granularities</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Fault Injection Granularities</p>
    <p>Total number of Test Images</p>
    <p>Total number of repaired images</p>
    <p>under two fault injection granularities</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Fault Injection Granularities</p>
    <p>Total number of Test Images</p>
    <p>Total number of repaired images</p>
    <p>under two fault injection granularities</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Fault Injection Granularities</p>
    <p>Total number of Test Images</p>
    <p>Total number of repaired images</p>
    <p>under two fault injection granularities</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Fault Injection Granularities</p>
    <p>Total number of Test Images</p>
    <p>Total number of repaired images</p>
    <p>under two fault injection granularities</p>
    <p>Fault Injection Granularities</p>
    <p>Number of images reporting corruption</p>
    <p>Test Images Repaired Images</p>
    <p>Table 2: Number of test images and repaired images reporting corruption under two fault injection granularities</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study: e2fsck</p>
    <p>Fault Injection Granularities</p>
    <p>Total number of Test Images</p>
    <p>Total number of repaired images</p>
    <p>under two fault injection granularities</p>
    <p>Fault Injection Granularities</p>
    <p>Number of images reporting corruption</p>
    <p>Test Images Repaired Images</p>
    <p>Table 2: Number of test images and repaired images reporting corruption under two fault injection granularities</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study : e2fsck</p>
    <p>Corruption Types 512 B 4 KB</p>
    <p>Un-mountable 41 3</p>
    <p>File Content Corruption 107 10</p>
    <p>Misplacement of files 82 23</p>
    <p>Others 10 1</p>
    <p>Total 240 37</p>
    <p>Table 3: Classification of corruptions observed on repaired images</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Case Study : e2fsck</p>
    <p>Corruption Types 512 B 4 KB</p>
    <p>Un-mountable 41 3</p>
    <p>File Content Corruption 107 10</p>
    <p>Misplacement of files 82 23</p>
    <p>Others 10 1</p>
    <p>Total 240 37</p>
    <p>Table 3: Classification of corruptions observed on repaired images</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Is it solely caused by asynchronous writes?</p>
    <p>Existing implementation uses asynchronous updates</p>
    <p>most updates are buffered in memory</p>
    <p>flush them only at the end of last pass</p>
    <p>Does not guarantee ordering and atomicity</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Is it solely caused by asynchronous writes?</p>
    <p>We change the code to enforce synchronous writes</p>
    <p>Method 1: Add O_SYNC flag</p>
    <p>Method 2: Invoke ext2fs_flush() to flush changes after each pass (5 passes in total)</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Enforcing Synchronous Writes</p>
    <p>Synchronization Methods</p>
    <p>Number of images reporting corruption</p>
    <p>Test Images Repaired Images</p>
    <p>Sync each write 45 223</p>
    <p>Sync after each pass 45 243</p>
    <p>Table 5: Number of test images and repaired images reporting corruption after enforcing synchronous updates.</p>
    <p>Fault Injection Granularities</p>
    <p>Number of images reporting corruption</p>
    <p>Test Images Repaired Images</p>
    <p>Table 4: Number of test images and repaired images reporting corruption under two fault injection granularities</p>
    <p>Surprisingly, the results are worse:</p>
    <p>BEFORE</p>
    <p>AFTER</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>There is strong dependency among updates/passes</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Can Undo Log Handle Interruptions?</p>
    <p>Undo log feature in e2fsprogs utilities</p>
    <p>E.g.: e2fsck, debugfs, mke2fs, etc.</p>
    <p>Records data block that is being updated into a log</p>
    <p>To undo the changes made (if necessary)</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Can Undo Log Handle Interruptions?</p>
    <p>Modify the existing fault-injection framework to test e2fsck with undo log enabled:</p>
    <p>Add another block device for undo log</p>
    <p>Add record &amp; replay for undo log</p>
    <p>Surprisingly the results are similar:</p>
    <p>No ordering of writes b/w undo log and block device</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Methodology to study the behavior of file system checker under emulated faults</p>
    <p>Does running the checker after an interrupted-check successfully return the file system to a consistent</p>
    <p>state? NO</p>
    <p>If not, what goes wrong?</p>
    <p>Strong dependencies among updates/passes, resulting in severe corruption under faults</p>
    <p>Conclusion</p>
    <p>Make Recovery Procedures Resilient to Faults</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>Build a resilient file system checker</p>
    <p>Port this methodology to other procedures</p>
    <p>E.g., system updates, etc.</p>
    <p>Future work</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>THANK YOU</p>
  </div>
  <div class="page">
    <p>All About Discovery!</p>
    <p>nmsu.edu</p>
    <p>THANK YOU</p>
    <p>QUESTIONS?</p>
  </div>
</Presentation>
