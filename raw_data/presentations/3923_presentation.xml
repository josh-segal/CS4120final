<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Secure User-space Provenance Capture</p>
    <p>Nikilesh Balakrishnan, Thomas Bytheway, Lucian Carata, Ripduman Sohan, and Andy Hopper</p>
    <p>University of Cambridge</p>
  </div>
  <div class="page">
    <p>OPUS Observed Provenance in User Space</p>
    <p>Data Scientists</p>
    <p>Low Intrusion</p>
  </div>
  <div class="page">
    <p>User Space Provenance</p>
    <p>Low Privilege Requirement</p>
    <p>Easier Install Path</p>
    <p>Semantically Closer</p>
  </div>
  <div class="page">
    <p>User Space Provenance Techniques</p>
    <p>LD_PRELOAD</p>
    <p>Binary Rewriting</p>
    <p>ptrace</p>
    <p>FUSE</p>
  </div>
  <div class="page">
    <p>How can we rely on user-space provenance?</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
    <p>Malicious User</p>
    <p>Malicious Application</p>
    <p>Trusted Kernel/Hardware</p>
  </div>
  <div class="page">
    <p>Circumvention</p>
    <p>Direct Library Call</p>
    <p>Direct Syscall</p>
    <p>Denial of Service</p>
    <p>Falsification</p>
    <p>Man in the Middle</p>
    <p>Time of Check Time of Use</p>
  </div>
  <div class="page">
    <p>Circumvention</p>
    <p>Direct Library Call</p>
    <p>Direct Syscall</p>
    <p>Denial of Service</p>
    <p>Falsification</p>
    <p>Man in the Middle</p>
    <p>Time of Check Time of Use</p>
  </div>
  <div class="page">
    <p>Provenance Library</p>
    <p>def open(file): log(open, file) return real_open(file)</p>
    <p>Direct Call</p>
    <p>Application</p>
    <p>open(foo.txt)</p>
    <p>C Library</p>
    <p>def open(file): /* */ syscall /* */</p>
  </div>
  <div class="page">
    <p>Provenance Library</p>
    <p>def open(file): log(open, file) return real_open(file)</p>
    <p>Direct Call</p>
    <p>Application</p>
    <p>open(foo.txt)</p>
    <p>func_ptr real_open = 0x45211f *real_open(foo.txt)</p>
    <p>C Library</p>
    <p>def open(file): /* */ syscall /* */</p>
  </div>
  <div class="page">
    <p>Provenance Library</p>
    <p>def open(file): log(open, file) return real_open(file)</p>
    <p>Man In The Middle</p>
    <p>Application</p>
    <p>open(foo.txt)</p>
    <p>C Library</p>
    <p>def open(file): /* */ syscall /* */</p>
  </div>
  <div class="page">
    <p>Provenance Library</p>
    <p>def open(file): log(open, file) return real_open(file)</p>
    <p>Man In The Middle</p>
    <p>Application</p>
    <p>open(results.txt)</p>
    <p>C Library</p>
    <p>def open(file): /* */ syscall /* */</p>
    <p>Malicious User Library</p>
    <p>def open(file): return real_open(fake_results. txt)</p>
  </div>
  <div class="page">
    <p>User Application Resources</p>
    <p>Denial of Service</p>
    <p>Provenance System Resources</p>
    <p>File Descriptors</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Intel Secure Guard Extensions (SGX)</p>
    <p>Existing Sandboxing Techniques</p>
    <p>Dynamic Binary Rewriting</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>System-level provenance is not always preferable to user</p>
    <p>space provenance</p>
    <p>User-space provenance suffers from some threats</p>
    <p>It can still be made secure</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Any Questions?</p>
    <p>For more Info: http://www.cl.cam.ac.uk/research/dtg/fresco/</p>
  </div>
</Presentation>
