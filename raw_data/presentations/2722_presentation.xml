<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Verifying Reachability for Stateful Networks</p>
    <p>Aurojit Panda, Ori Lahav, Katerina Argyraki, Mooly Sagiv, Scott Shenker UC Berkeley, MPI-SWS, TAU, ICSI</p>
  </div>
  <div class="page">
    <p>Stateless vs Stateful Networks Stateless</p>
    <p>Packets forwarded based on static rules.</p>
    <p>Rules change slowly in response to:</p>
    <p>Changes in topology.</p>
    <p>Changes in policy.</p>
  </div>
  <div class="page">
    <p>Stateless vs Stateful Networks Stateless Stateful</p>
    <p>Packets forwarded based on static rules.</p>
    <p>Rules change slowly in response to:</p>
    <p>Changes in topology.</p>
    <p>Changes in policy.</p>
    <p>Forwarding depends on rules and state.</p>
  </div>
  <div class="page">
    <p>Stateless vs Stateful Networks Stateless Stateful</p>
    <p>Packets forwarded based on static rules.</p>
    <p>Rules change slowly in response to:</p>
    <p>Changes in topology.</p>
    <p>Changes in policy.</p>
    <p>Forwarding depends on rules and state.</p>
    <p>Rules change slowly (same as before).</p>
  </div>
  <div class="page">
    <p>Stateless vs Stateful Networks Stateless Stateful</p>
    <p>Packets forwarded based on static rules.</p>
    <p>Rules change slowly in response to:</p>
    <p>Changes in topology.</p>
    <p>Changes in policy.</p>
    <p>Forwarding depends on rules and state.</p>
    <p>Rules change slowly (same as before).</p>
    <p>State changes at packet scales:</p>
  </div>
  <div class="page">
    <p>Stateless vs Stateful Networks Stateless Stateful</p>
    <p>Packets forwarded based on static rules.</p>
    <p>Rules change slowly in response to:</p>
    <p>Changes in topology.</p>
    <p>Changes in policy.</p>
    <p>Forwarding depends on rules and state.</p>
    <p>Rules change slowly (same as before).</p>
    <p>State changes at packet scales:</p>
    <p>Every time a connection is established.</p>
  </div>
  <div class="page">
    <p>Stateless vs Stateful Networks Stateless Stateful</p>
    <p>Packets forwarded based on static rules.</p>
    <p>Rules change slowly in response to:</p>
    <p>Changes in topology.</p>
    <p>Changes in policy.</p>
    <p>Forwarding depends on rules and state.</p>
    <p>Rules change slowly (same as before).</p>
    <p>State changes at packet scales:</p>
    <p>Every time a connection is established.</p>
    <p>Every time packet is forwarded.</p>
  </div>
  <div class="page">
    <p>Why consider stateful networks?</p>
  </div>
  <div class="page">
    <p>Networks are Increasingly Stateful</p>
    <p>Middleboxes: 1/3rd of all network devices in enterprises (SIGCOMM12)</p>
  </div>
  <div class="page">
    <p>Networks are Increasingly Stateful</p>
    <p>Middleboxes: 1/3rd of all network devices in enterprises (SIGCOMM12)</p>
    <p>Network function virtualization: Simplifies NF deployment.</p>
  </div>
  <div class="page">
    <p>Networks are Increasingly Stateful</p>
    <p>Middleboxes: 1/3rd of all network devices in enterprises (SIGCOMM12)</p>
    <p>Network function virtualization: Simplifies NF deployment.</p>
    <p>Programmable switches (P4) also support state.</p>
  </div>
  <div class="page">
    <p>Networks are Increasingly Stateful</p>
    <p>Middleboxes: 1/3rd of all network devices in enterprises (SIGCOMM12)</p>
    <p>Network function virtualization: Simplifies NF deployment.</p>
    <p>Programmable switches (P4) also support state.</p>
    <p>Not supported by most existing verification tools.</p>
  </div>
  <div class="page">
    <p>State impacts invariants</p>
  </div>
  <div class="page">
    <p>Invariants We Consider</p>
    <p>This work focuses on reachability and isolation invariants.</p>
  </div>
  <div class="page">
    <p>Invariants We Consider</p>
    <p>This work focuses on reachability and isolation invariants.</p>
    <p>Can packets from host A reach host B?</p>
  </div>
  <div class="page">
    <p>Invariants We Consider</p>
    <p>This work focuses on reachability and isolation invariants.</p>
    <p>Can packets from host A reach host B?</p>
    <p>But the addition of state raises some important issues:</p>
  </div>
  <div class="page">
    <p>Invariants We Consider</p>
    <p>This work focuses on reachability and isolation invariants.</p>
    <p>Can packets from host A reach host B?</p>
    <p>But the addition of state raises some important issues:</p>
    <p>Invariants can include temporal aspects.</p>
  </div>
  <div class="page">
    <p>Invariants We Consider</p>
    <p>This work focuses on reachability and isolation invariants.</p>
    <p>Can packets from host A reach host B?</p>
    <p>But the addition of state raises some important issues:</p>
    <p>Invariants can include temporal aspects.</p>
    <p>Might need to consider more than just packets.</p>
  </div>
  <div class="page">
    <p>Temporal Invariants</p>
    <p>Server 0</p>
    <p>Server 1</p>
    <p>User 0</p>
    <p>User 1 User 1 receives no packets from server 0</p>
    <p>Standard Reachability</p>
    <p>deny server* user*</p>
    <p>Stateful Firewall</p>
  </div>
  <div class="page">
    <p>Temporal Invariants</p>
    <p>Server 0</p>
    <p>Server 1</p>
    <p>User 0</p>
    <p>User 1 User 1 receives no packets from server 0</p>
    <p>Standard Reachability Temporal Property</p>
    <p>deny server* user*</p>
    <p>without initiating a connection</p>
    <p>Stateful Firewall</p>
  </div>
  <div class="page">
    <p>Consider Data Instead of Packets</p>
    <p>Server 0</p>
    <p>Server 1 Firewall Cache</p>
    <p>User 0</p>
    <p>User 1</p>
    <p>deny user1 server0</p>
    <p>User 1 receives no packet from Server 0</p>
  </div>
  <div class="page">
    <p>Consider Data Instead of Packets</p>
    <p>Server 0</p>
    <p>Server 1 Firewall</p>
    <p>Secret</p>
    <p>Cache</p>
    <p>User 0</p>
    <p>User 1</p>
    <p>deny user1 server0</p>
    <p>User 1 receives no packet from Server 0</p>
  </div>
  <div class="page">
    <p>Consider Data Instead of Packets</p>
    <p>Server 0</p>
    <p>Server 1 Firewall</p>
    <p>Secret</p>
    <p>Secret</p>
    <p>Cache</p>
    <p>User 0</p>
    <p>User 1</p>
    <p>deny user1 server0</p>
    <p>User 1 receives no packet from Server 0</p>
  </div>
  <div class="page">
    <p>Consider Data Instead of Packets</p>
    <p>Server 0</p>
    <p>Server 1 Firewall</p>
    <p>Secret</p>
    <p>Secret</p>
    <p>Cache</p>
    <p>User 0</p>
    <p>User 1</p>
    <p>deny user1 server0</p>
    <p>Secret</p>
    <p>User 1 receives no packet from Server 0</p>
  </div>
  <div class="page">
    <p>Consider Data Instead of Packets</p>
    <p>Server 0</p>
    <p>Server 1 Firewall</p>
    <p>Secret</p>
    <p>Secret</p>
    <p>Cache</p>
    <p>User 0</p>
    <p>User 1</p>
    <p>deny user1 server0</p>
    <p>User 1 receives no data from Server 0</p>
    <p>Secret</p>
    <p>User 1 receives no packet from Server 0</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Why stateful networks, and how does state affect invariants?</p>
    <p>Existing work on network verification.</p>
    <p>VMN: Our system for verifying networks with state.</p>
    <p>Scaling verification.</p>
  </div>
  <div class="page">
    <p>Network Verification Today</p>
    <p>Switches and Controllers: Static forwarding rules in switches.</p>
    <p>HSA, Veriflow, NetKAT, Vericon, FlowLog, etc.</p>
  </div>
  <div class="page">
    <p>Network Verification Today</p>
    <p>Switches and Controllers: Static forwarding rules in switches.</p>
    <p>HSA, Veriflow, NetKAT, Vericon, FlowLog, etc.</p>
    <p>Testing for networks with mutable datapaths</p>
    <p>Buzz: Generate packets that are likely to trigger interesting behavior.</p>
  </div>
  <div class="page">
    <p>Network Verification Today</p>
    <p>Switches and Controllers: Static forwarding rules in switches.</p>
    <p>HSA, Veriflow, NetKAT, Vericon, FlowLog, etc.</p>
    <p>Testing for networks with mutable datapaths</p>
    <p>Buzz: Generate packets that are likely to trigger interesting behavior.</p>
    <p>Verification for networks with mutable datapaths</p>
    <p>SymNet: Uses symbolic execution, limited state and behaviors.</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Why stateful networks, and how does state affect invariants?</p>
    <p>Existing work on network verification.</p>
    <p>VMN: Our system for verifying networks with state.</p>
    <p>Scaling verification.</p>
  </div>
  <div class="page">
    <p>VMN: System for scalable verification of stateful networks.</p>
  </div>
  <div class="page">
    <p>VMN Flow Model each middlebox in the network</p>
    <p>Build network forwarding model</p>
    <p>Invariant Holds Example of violation</p>
    <p>Logical Invariants</p>
    <p>SMT Solver (Z3 from MSR)</p>
  </div>
  <div class="page">
    <p>VMN Flow Model each middlebox in the network</p>
    <p>Build network forwarding model</p>
    <p>Invariant Holds Example of violation</p>
    <p>Logical Invariants</p>
    <p>SMT Solver (Z3 from MSR)</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes  One approach: Extract model from code</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes  One approach: Extract model from code</p>
    <p>Problem: At the wrong level of abstraction.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes  One approach: Extract model from code</p>
    <p>Problem: At the wrong level of abstraction.</p>
    <p>Code written to match bit patterns in packet, etc.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes  One approach: Extract model from code</p>
    <p>Problem: At the wrong level of abstraction.</p>
    <p>Code written to match bit patterns in packet, etc.</p>
    <p>Configuration is in terms of higher level abstractions</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes  One approach: Extract model from code</p>
    <p>Problem: At the wrong level of abstraction.</p>
    <p>Code written to match bit patterns in packet, etc.</p>
    <p>Configuration is in terms of higher level abstractions</p>
    <p>Example source and destination addresses, payload is infected, etc.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes  One approach: Extract model from code</p>
    <p>Problem: At the wrong level of abstraction.</p>
    <p>Code written to match bit patterns in packet, etc.</p>
    <p>Configuration is in terms of higher level abstractions</p>
    <p>Example source and destination addresses, payload is infected, etc.</p>
    <p>Verify invariants which are also expressed in these terms.</p>
  </div>
  <div class="page">
    <p>Challenges When Modeling Middleboxes</p>
    <p>Example configuration:</p>
  </div>
  <div class="page">
    <p>Challenges When Modeling Middleboxes</p>
    <p>Example configuration:</p>
    <p>Drop all packets from connections transmitting infected files.</p>
  </div>
  <div class="page">
    <p>Challenges When Modeling Middleboxes</p>
    <p>Example configuration:</p>
    <p>Drop all packets from connections transmitting infected files.</p>
    <p>How to define infected files: large, growing set of bit patterns.</p>
  </div>
  <div class="page">
    <p>Challenges When Modeling Middleboxes</p>
    <p>Example configuration:</p>
    <p>Drop all packets from connections transmitting infected files.</p>
    <p>How to define infected files: large, growing set of bit patterns.</p>
    <p>Complexity of matching code prevents verification in even small networks.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet Determines what application sent a packet, etc. Complex, proprietary processing.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Update Classification State</p>
    <p>Determines what application sent a packet, etc. Complex, proprietary processing.</p>
    <p>Update state required for classification.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Update Classification State</p>
    <p>Determines what application sent a packet, etc. Complex, proprietary processing.</p>
    <p>Update state required for classification.</p>
    <p>Update Forwarding State Update forwarding State.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Update Classification State</p>
    <p>Forward Packet</p>
    <p>Determines what application sent a packet, etc. Complex, proprietary processing.</p>
    <p>Update state required for classification.</p>
    <p>Always simple: forward or drop packets.</p>
    <p>Update Forwarding State Update forwarding State.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Update Classification State</p>
    <p>Forward Packet</p>
    <p>Determines what application sent a packet, etc. Complex, proprietary processing.</p>
    <p>Update state required for classification.</p>
    <p>Always simple: forward or drop packets.</p>
    <p>Oracle: Specify data dependencies and outputs</p>
    <p>Update Forwarding State Update forwarding State.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Update Classification State</p>
    <p>Forward Packet</p>
    <p>Determines what application sent a packet, etc. Complex, proprietary processing.</p>
    <p>Update state required for classification.</p>
    <p>Always simple: forward or drop packets.</p>
    <p>Oracle: Specify data dependencies and outputs</p>
    <p>Forwarding Model: Specify Completely</p>
    <p>Update Forwarding State Update forwarding State.</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Forward Packet</p>
    <p>Update Forwarding State</p>
    <p>Update Classification State</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Forward Packet</p>
    <p>Update Forwarding State</p>
    <p>Outputs Is packet infected.</p>
    <p>Dependencies See all packets in connection (flow).</p>
    <p>Update Classification State</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Forward Packet</p>
    <p>Update Forwarding State</p>
    <p>Outputs Is packet infected.</p>
    <p>Dependencies See all packets in connection (flow).</p>
    <p>if (infected) { infected_connections.add(packet.flow) }</p>
    <p>Update Classification State</p>
  </div>
  <div class="page">
    <p>Modeling Middleboxes</p>
    <p>Classify Packet</p>
    <p>Forward Packet</p>
    <p>Update Forwarding State</p>
    <p>Outputs Is packet infected.</p>
    <p>Dependencies See all packets in connection (flow).</p>
    <p>if (packet.flow not in infected_connections) { forward (packet); }</p>
    <p>if (infected) { infected_connections.add(packet.flow) }</p>
    <p>Update Classification State</p>
  </div>
  <div class="page">
    <p>Sample Model class Firewall (acls: Set[(Address, Address)]) { abstract malicious(p: Packet): bool val tainted: Set[Address] def model (p: Packet) = { tainted.contains(p.src) =&gt; forward(Empty) acls.contains((p.src, p.dst)) =&gt; forward(Empty) malicious(p) =&gt; tainted.add(p.src); forward(Empty) _ =&gt; forward(Seq(p)) } }</p>
  </div>
  <div class="page">
    <p>Sample Model class Firewall (acls: Set[(Address, Address)]) { abstract malicious(p: Packet): bool val tainted: Set[Address] def model (p: Packet) = { tainted.contains(p.src) =&gt; forward(Empty) acls.contains((p.src, p.dst)) =&gt; forward(Empty) malicious(p) =&gt; tainted.add(p.src); forward(Empty) _ =&gt; forward(Seq(p)) } }</p>
    <p>Oracle</p>
  </div>
  <div class="page">
    <p>Sample Model class Firewall (acls: Set[(Address, Address)]) { abstract malicious(p: Packet): bool val tainted: Set[Address] def model (p: Packet) = { tainted.contains(p.src) =&gt; forward(Empty) acls.contains((p.src, p.dst)) =&gt; forward(Empty) malicious(p) =&gt; tainted.add(p.src); forward(Empty) _ =&gt; forward(Seq(p)) } }</p>
    <p>Oracle State</p>
  </div>
  <div class="page">
    <p>Sample Model class Firewall (acls: Set[(Address, Address)]) { abstract malicious(p: Packet): bool val tainted: Set[Address] def model (p: Packet) = { tainted.contains(p.src) =&gt; forward(Empty) acls.contains((p.src, p.dst)) =&gt; forward(Empty) malicious(p) =&gt; tainted.add(p.src); forward(Empty) _ =&gt; forward(Seq(p)) } }</p>
    <p>Oracle State</p>
    <p>Forwarding Model</p>
  </div>
  <div class="page">
    <p>Network Forwarding Model</p>
    <p>Builds on network transfer functions.</p>
  </div>
  <div class="page">
    <p>Network Forwarding Model</p>
    <p>Builds on network transfer functions.</p>
    <p>Existing work from HSA, Veriflow, etc.</p>
  </div>
  <div class="page">
    <p>Network Forwarding Model</p>
    <p>Builds on network transfer functions.</p>
    <p>Existing work from HSA, Veriflow, etc.</p>
    <p>Abstracts all switches and routers into one big switch.</p>
  </div>
  <div class="page">
    <p>Network Forwarding Model</p>
    <p>Builds on network transfer functions.</p>
    <p>Existing work from HSA, Veriflow, etc.</p>
    <p>Abstracts all switches and routers into one big switch.</p>
    <p>Details in the paper.</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Why consider stateful networks?</p>
    <p>The current state of stateful network verification?</p>
    <p>VMN: Our system for verifying networks with state.</p>
    <p>Scaling verification.</p>
  </div>
  <div class="page">
    <p>Networks are Large  Networks are huge in practice</p>
  </div>
  <div class="page">
    <p>Networks are Large  Networks are huge in practice</p>
    <p>For example Google had 900K machines (approximately) in 2011</p>
  </div>
  <div class="page">
    <p>Networks are Large  Networks are huge in practice</p>
    <p>For example Google had 900K machines (approximately) in 2011</p>
    <p>ISPs connect large numbers of machines.</p>
  </div>
  <div class="page">
    <p>Networks are Large  Networks are huge in practice</p>
    <p>For example Google had 900K machines (approximately) in 2011</p>
    <p>ISPs connect large numbers of machines.</p>
    <p>Lots of middleboxes in these networks</p>
  </div>
  <div class="page">
    <p>Networks are Large  Networks are huge in practice</p>
    <p>For example Google had 900K machines (approximately) in 2011</p>
    <p>ISPs connect large numbers of machines.</p>
    <p>Lots of middleboxes in these networks</p>
    <p>In datacenter each machine might be one or more middlebox.</p>
  </div>
  <div class="page">
    <p>Networks are Large  Networks are huge in practice</p>
    <p>For example Google had 900K machines (approximately) in 2011</p>
    <p>ISPs connect large numbers of machines.</p>
    <p>Lots of middleboxes in these networks</p>
    <p>In datacenter each machine might be one or more middlebox.</p>
    <p>How do we address this?</p>
  </div>
  <div class="page">
    <p>Scaling Techniques Thus Far</p>
    <p>Abstract middlebox models</p>
  </div>
  <div class="page">
    <p>Scaling Techniques Thus Far</p>
    <p>Abstract middlebox models</p>
    <p>Simplify what needs to be considered per-middlebox.</p>
  </div>
  <div class="page">
    <p>Scaling Techniques Thus Far</p>
    <p>Abstract middlebox models</p>
    <p>Simplify what needs to be considered per-middlebox.</p>
    <p>Abstract network</p>
  </div>
  <div class="page">
    <p>Scaling Techniques Thus Far</p>
    <p>Abstract middlebox models</p>
    <p>Simplify what needs to be considered per-middlebox.</p>
    <p>Abstract network</p>
    <p>Simplify network forwarding.</p>
  </div>
  <div class="page">
    <p>Those Techniques are not Enough</p>
    <p>TACAS 2016: Network verification with state is EXPSPACE-complete.</p>
  </div>
  <div class="page">
    <p>Those Techniques are not Enough</p>
    <p>TACAS 2016: Network verification with state is EXPSPACE-complete.</p>
    <p>Practically for us SMT solvers timeout with large instances.</p>
  </div>
  <div class="page">
    <p>Those Techniques are not Enough</p>
    <p>TACAS 2016: Network verification with state is EXPSPACE-complete.</p>
    <p>Practically for us SMT solvers timeout with large instances.</p>
    <p>Other methods also do not handle such large instances</p>
    <p>Symbolic execution is exponential in number of branches, not better.</p>
  </div>
  <div class="page">
    <p>Those Techniques are not Enough</p>
    <p>TACAS 2016: Network verification with state is EXPSPACE-complete.</p>
    <p>Practically for us SMT solvers timeout with large instances.</p>
    <p>Other methods also do not handle such large instances</p>
    <p>Symbolic execution is exponential in number of branches, not better.</p>
    <p>Our techniques work for small instances, what to do about large instances?</p>
  </div>
  <div class="page">
    <p>Scaling Verification</p>
    <p>Two techniques: Slicing and symmetry.</p>
  </div>
  <div class="page">
    <p>Scaling Verification</p>
    <p>Two techniques: Slicing and symmetry.</p>
    <p>Slicing: Run verification on a subnetwork of size independent of network.</p>
  </div>
  <div class="page">
    <p>Scaling Verification</p>
    <p>Two techniques: Slicing and symmetry.</p>
    <p>Slicing: Run verification on a subnetwork of size independent of network.</p>
    <p>Symmetry: Reduce number of invariants to verify by leveraging symmetry in policy.</p>
  </div>
  <div class="page">
    <p>Network Slices</p>
    <p>Slices: Subnetworks for which a bisimulation with the original network exists.  Ensures equivalent step in subnetwork for each step in the original network</p>
    <p>Slices are selected depending on the invariant being checked.</p>
  </div>
  <div class="page">
    <p>Network Slices ACME Hosting</p>
    <p>Willie E Coyote</p>
    <p>Road Runner Firewall</p>
    <p>Cache</p>
    <p>Sylvester Tweety</p>
    <p>Firewall predator 6$ prey server</p>
    <p>prey 6$ predator server</p>
  </div>
  <div class="page">
    <p>Network Slices ACME Hosting</p>
    <p>Willie E Coyote</p>
    <p>Road Runner Firewall</p>
    <p>Cache</p>
    <p>Sylvester Tweety</p>
    <p>Firewall predator 6$ prey server</p>
    <p>prey 6$ predator server</p>
    <p>Invariant: RR cannot access data from Coyotes server</p>
  </div>
  <div class="page">
    <p>Network Slices ACME Hosting</p>
    <p>Willie E Coyote</p>
    <p>Road Runner Firewall</p>
    <p>Cache</p>
    <p>Sylvester Tweety</p>
    <p>Firewall predator 6$ prey server</p>
    <p>prey 6$ predator server</p>
    <p>Invariant: RR cannot access data from Coyotes server</p>
    <p>Willie E Coyote</p>
  </div>
  <div class="page">
    <p>Network Slices ACME Hosting</p>
    <p>Willie E Coyote</p>
    <p>Road Runner Firewall</p>
    <p>Cache</p>
    <p>Sylvester Tweety</p>
    <p>Firewall predator 6$ prey server</p>
    <p>prey 6$ predator server</p>
    <p>Invariant: RR cannot access data from Coyotes server</p>
    <p>Willie E CoyoteFirewall</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Network Slices ACME Hosting</p>
    <p>Willie E Coyote</p>
    <p>Road Runner Firewall</p>
    <p>Cache</p>
    <p>Sylvester Tweety</p>
    <p>Firewall predator 6$ prey server</p>
    <p>prey 6$ predator server</p>
    <p>Invariant: RR cannot access data from Coyotes server</p>
    <p>Willie E CoyoteFirewall</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Network Slices ACME Hosting</p>
    <p>Willie E Coyote</p>
    <p>Road Runner Firewall</p>
    <p>Cache</p>
    <p>Sylvester Tweety</p>
    <p>Firewall predator 6$ prey server</p>
    <p>prey 6$ predator server</p>
    <p>Invariant: RR cannot access data from Coyotes server</p>
    <p>Willie E CoyoteFirewall</p>
    <p>Cache</p>
    <p>Establishes a bisimulation between slice and network. Allows us to prove invariants in the slice.</p>
  </div>
  <div class="page">
    <p>Cannot always find such a slice.</p>
  </div>
  <div class="page">
    <p>Finding Slices</p>
    <p>Flow parallel middleboxes - partition network by flows.</p>
    <p>Origin agnostic middleboxes - partition network by policy equivalence class.</p>
    <p>Details in paper.</p>
  </div>
  <div class="page">
    <p>Evaluation Setup: Datacenter  Consider AWS like multi-tenant datacenter.</p>
  </div>
  <div class="page">
    <p>Evaluation Setup: Datacenter  Consider AWS like multi-tenant datacenter.</p>
    <p>Each tenant has policies for private and public hosts.</p>
  </div>
  <div class="page">
    <p>Evaluation Setup: Datacenter  Consider AWS like multi-tenant datacenter.</p>
    <p>Each tenant has policies for private and public hosts.</p>
    <p>Three verification tasks</p>
  </div>
  <div class="page">
    <p>Evaluation Setup: Datacenter  Consider AWS like multi-tenant datacenter.</p>
    <p>Each tenant has policies for private and public hosts.</p>
    <p>Three verification tasks</p>
    <p>Private hosts for one tenant cannot reach another</p>
  </div>
  <div class="page">
    <p>Evaluation Setup: Datacenter  Consider AWS like multi-tenant datacenter.</p>
    <p>Each tenant has policies for private and public hosts.</p>
    <p>Three verification tasks</p>
    <p>Private hosts for one tenant cannot reach another</p>
    <p>Public host for one tenant cannot reach private hosts for another</p>
  </div>
  <div class="page">
    <p>Evaluation Setup: Datacenter  Consider AWS like multi-tenant datacenter.</p>
    <p>Each tenant has policies for private and public hosts.</p>
    <p>Three verification tasks</p>
    <p>Private hosts for one tenant cannot reach another</p>
    <p>Public host for one tenant cannot reach private hosts for another</p>
    <p>Public hosts are universally reachable.</p>
  </div>
  <div class="page">
    <p>Verification Time (Datacenter)</p>
    <p>Slice 5 10 15 20</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>)</p>
    <p># of Tenants</p>
    <p>Priv-Priv Pub-Priv Priv-Pub</p>
  </div>
  <div class="page">
    <p>Verification Time (Datacenter)</p>
    <p>Slice 5 10 15 20</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>)</p>
    <p># of Tenants</p>
    <p>Priv-Priv Pub-Priv Priv-Pub</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
    <p>Use verification to prevent some bugs from a Microsoft DC (IMC 2013)</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
    <p>Use verification to prevent some bugs from a Microsoft DC (IMC 2013)</p>
    <p>Bugs include</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
    <p>Use verification to prevent some bugs from a Microsoft DC (IMC 2013)</p>
    <p>Bugs include</p>
    <p>Misconfigured firewalls</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
    <p>Use verification to prevent some bugs from a Microsoft DC (IMC 2013)</p>
    <p>Bugs include</p>
    <p>Misconfigured firewalls</p>
    <p>Misconfigured redundant firewalls</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
    <p>Use verification to prevent some bugs from a Microsoft DC (IMC 2013)</p>
    <p>Bugs include</p>
    <p>Misconfigured firewalls</p>
    <p>Misconfigured redundant firewalls</p>
    <p>Misconfigured redundant routing</p>
  </div>
  <div class="page">
    <p>Role of Symmetry  Consider a private datacenter</p>
    <p>Use verification to prevent some bugs from a Microsoft DC (IMC 2013)</p>
    <p>Bugs include</p>
    <p>Misconfigured firewalls</p>
    <p>Misconfigured redundant firewalls</p>
    <p>Misconfigured redundant routing</p>
    <p>Measure time to verify as a function of number of symmetric policy groups</p>
  </div>
  <div class="page">
    <p>Verification Time (With Symmetry)</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>)</p>
    <p># of Policy Equivalence Classes</p>
    <p>Rules Redundancy Traversal</p>
  </div>
  <div class="page">
    <p>Conclusion  Verifying stateful networks is increasingly important.</p>
    <p>The primary challenge is scaling to realistic network.</p>
    <p>Two methods to scale</p>
    <p>Models where oracles are separated from forwarding behavior.</p>
    <p>Split the network into smaller verifiable portions is necessary.</p>
  </div>
</Presentation>
