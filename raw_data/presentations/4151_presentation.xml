<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Thread Performance Comparison: Windows NT and Solaris on A Symmetric Multiprocessor</p>
    <p>Fabian Zabatta and Kevin Ying Brooklyn College and CUNY Graduate School</p>
    <p>{fabian,kevin}@sci.brooklyn.cuny.edu</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>NT and Solaris Implementation</p>
    <p>Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Decreasing Cost of Parallel Hardware</p>
    <p>$138,000</p>
    <p>$15,000 $13,000</p>
    <p>Year</p>
    <p>Cost</p>
    <p>PC Based SMP with 4 PPros 200MHz, with 512 MB RAM</p>
    <p>PC Based SMP with 4 Pentium II Xeon 400 MHz, with 512 MB RAM</p>
    <p>A basic IBM SP2 with 2 66-70 MHz processors, with 128 MB RAM</p>
  </div>
  <div class="page">
    <p>Kernel-Level Objects of Execution</p>
    <p>Classic Process</p>
    <p>One unit of control</p>
    <p>Modern Process</p>
    <p>Divided into sub-objects</p>
    <p>Each sub-object has its own context</p>
    <p>Each sub-object functions independently</p>
    <p>Each sub-object shares the same address space and resources with sub-objects of the same process</p>
  </div>
  <div class="page">
    <p>Advantages of Design</p>
    <p>Overlap Processing</p>
    <p>Parallel Execution</p>
    <p>Scalability</p>
    <p>Communication</p>
    <p>Inexpensive</p>
    <p>Well Structured Programming Paradigm.</p>
  </div>
  <div class="page">
    <p>User-Level Object of Execution</p>
    <p>Kernel-level Object of Execution</p>
    <p>The Operating System Kernel</p>
    <p>Processor Structure</p>
    <p>Generic Thread Architecture</p>
  </div>
  <div class="page">
    <p>Fi bers</p>
    <p>Threads</p>
    <p>Proce ss Structure</p>
    <p>Global Data</p>
    <p>The Windows NT Ke rnel</p>
    <p>Application Code</p>
    <p>NTs Thread Architecture</p>
  </div>
  <div class="page">
    <p>Solariss Thread Architecture</p>
    <p>Thread Library Threads</p>
    <p>LWPs</p>
    <p>Process Structure</p>
    <p>Application code, global data, ect.</p>
    <p>The Solaris Kernel</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Implementation Comparison</p>
    <p>Windows NT Solaris</p>
    <p>Kernel-level Thread LWP</p>
    <p>User-level Fiber Thread</p>
    <p>Hybrid model User Must Implement Thread Library</p>
    <p>Preemptive Priority</p>
    <p>Non Time Sliced</p>
    <p>Preemptive Priority Preemptive Priority</p>
    <p>Time Sliced Time Sliced</p>
    <p>One-One Variation of many-many</p>
    <p>(Fiber: many-many) (Coexist of one-one)</p>
    <p>Win32 UNIX International</p>
    <p>Kernel</p>
    <p>User Fibers (user controlled)</p>
    <p>Implementation Model</p>
    <p>Scheduling Model</p>
    <p>Programming Interface</p>
    <p>Multiplexing Model</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Test each systems chosen thread API to discover the performance impact of each design on various applications.</p>
    <p>NT: Thread</p>
    <p>Solaris: Bound, Unbound and CL=4</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Measure and Compare:</p>
  </div>
  <div class="page">
    <p>Parameters</p>
    <p>Hardware</p>
    <p>SMP Machine (Sag Electronics) with 4-200 MHz Pentium Pros (256K Cache Each)</p>
    <p>512 MB RAM &amp; 4 GB SCSI Hard Drive</p>
    <p>Software</p>
    <p>NT Server 4.0 (Service Pack 3) &amp; Solaris 2.6</p>
    <p>GNU gcc Version 2.8.1 Compiler</p>
  </div>
  <div class="page">
    <p>Description NT Solaris # of Threads Created 9817 2294 Memory Usage 68MB 19MB Execution Time (sec.) 24.12 2.68</p>
  </div>
  <div class="page">
    <p>Number of Threads Created</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(s ec</p>
    <p>.)</p>
    <p>NT</p>
    <p>Solaris Bound</p>
    <p>Solaris CL=4</p>
    <p>Solaris Unbound</p>
    <p>Solaris Bound</p>
    <p>NT</p>
    <p>Solaris Unbound</p>
    <p>Solaris CL=4</p>
  </div>
  <div class="page">
    <p>Number of Threads</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(s ec</p>
    <p>.)</p>
    <p>NT Solaris Bound</p>
    <p>NT</p>
    <p>Solaris Bound</p>
  </div>
  <div class="page">
    <p>There is very few differences between NT threads and Solaris bound threads.</p>
    <p>Solaris thread library did not increase nor decrease the size of LWP pool for CL=4 and unbounded threads.</p>
    <p>CL=4 has equivalent performance to that of the bound threads.</p>
    <p>- This implies that additional LWPs did not increase the performance.</p>
    <p>- The time it takes Solariss thread library to schedule threads on LWPs is not a factor in performance.</p>
  </div>
  <div class="page">
    <p>Number of Threads</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(S ec</p>
    <p>.)</p>
    <p>NT CS Solaris Bound Solaris CL=4 Solaris Unbound</p>
    <p>Solaris Unbound</p>
    <p>NT CS</p>
    <p>Solaris Bound</p>
    <p>Solaris CL=4</p>
  </div>
  <div class="page">
    <p>Number of Threads</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(s ec</p>
    <p>.)</p>
    <p>NT Mutex Solaris Bound Solaris CL=4 Solaris Unbound</p>
    <p>NT</p>
    <p>Solaris CL=4</p>
    <p>Solaris Bound Solaris Unbound</p>
  </div>
  <div class="page">
    <p>We explored the classic symmetric traveling salesman problem (TSP). The problem was modeled with threads that required limited synchronization to perform a parallel depth-first branch and bound search.</p>
    <p>NT version of the TSP slightly outperformed the Solaris version. Both systems were able to achieve an almost linear speed up (3.9+).</p>
  </div>
  <div class="page">
    <p>This experiment tested the performance of threads that have bursty processor requirements. This is analogous to applications that involve any type of I/O, e.g. Networking or client/server applications.</p>
    <p>CL=4 showed a slightly better performance in comparison to NTs threads or Solaris bound and unbound threads. This can be directly attributed to Solariss two-tier thread architecture.</p>
  </div>
  <div class="page">
    <p>Comparison Conclusions</p>
    <p>Both utilized multiprocessors and scaled well.</p>
    <p>Solariss design was more flexible at the cost of complexity.</p>
    <p>NTs critical section outperformed Solariss mutex.</p>
    <p>Solariss mutex outperformed NTs mutex.</p>
    <p>Solariss design excelled on tasks with bursty processor requirements.</p>
  </div>
  <div class="page">
    <p>Thread librarys automatic control of concurrency level is limited.</p>
    <p>Set the concurrency level to the number of processors and create unbounded threads when needed.</p>
    <p>Independent Performance Conclusions: Solaris</p>
  </div>
  <div class="page">
    <p>Independent Performance Conclusions: NT</p>
    <p>The number of threads should be roughly equal to the number of CPUs.</p>
    <p>When extensive intra-process synchronization is required use a critical section.</p>
  </div>
  <div class="page">
    <p>Closing Notes</p>
    <p>Threads are important and powerful programming tools.</p>
    <p>Differences exist on how they should be implemented.</p>
    <p>Differences in implementations are tradeoffs.</p>
    <p>Pthreads (POSIX): Standard thread API.</p>
  </div>
</Presentation>
