<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Supporting Docker in Emulab-Based Network Testbeds</p>
    <p>David Johnson, Elijah Grubb, Eric Eide University of Utah</p>
  </div>
  <div class="page">
    <p>2</p>
  </div>
  <div class="page">
    <p>2</p>
  </div>
  <div class="page">
    <p>2</p>
  </div>
  <div class="page">
    <p>2</p>
  </div>
  <div class="page">
    <p>over the course of a study</p>
    <p>prototype on laptop</p>
    <p>network testbed</p>
    <p>commercial cloud</p>
    <p>need to move experimental artifacts around</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>over the course of a study</p>
    <p>prototype on laptop</p>
    <p>network testbed</p>
    <p>commercial cloud</p>
    <p>need to move experimental artifacts around</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>over the course of a study</p>
    <p>prototype on laptop</p>
    <p>network testbed</p>
    <p>commercial cloud</p>
    <p>need to move experimental artifacts around</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>over the course of a study</p>
    <p>prototype on laptop</p>
    <p>network testbed</p>
    <p>commercial cloud</p>
    <p>need to move experimental artifacts around</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>over the course of a study</p>
    <p>prototype on laptop</p>
    <p>network testbed</p>
    <p>commercial cloud</p>
    <p>need to move experimental artifacts around</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>over the course of a study</p>
    <p>prototype on laptop</p>
    <p>network testbed</p>
    <p>commercial cloud</p>
    <p>need to move experimental artifacts around</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>extended Emulab so users can create experiments in which some or all nodes are Docker containers</p>
    <p>challenges  preserving users testbed experience  meshing with Emulabs infrastructure</p>
    <p>results  just works: 52/60 top Docker Hub images automatically adapted  supports large (5K-node) experiments</p>
    <p>4</p>
  </div>
  <div class="page">
    <p>Docker</p>
    <p>5</p>
  </div>
  <div class="page">
    <p>Docker</p>
    <p>based on containers</p>
    <p>filesystems populated via images</p>
    <p>5</p>
    <p>Physical Host Host OS Docker</p>
    <p>Container</p>
    <p>Filesystem</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>Docker</p>
    <p>based on containers</p>
    <p>filesystems populated via images</p>
    <p>images created via Dockerfiles</p>
    <p>5</p>
    <p>Physical Host Host OS Docker</p>
    <p>Container</p>
    <p>Filesystem</p>
    <p>App</p>
    <p>ImageDockerfile</p>
  </div>
  <div class="page">
    <p>Emulab</p>
    <p>testbed management software</p>
    <p>allocates physical and virtual resources to users</p>
    <p>configures resources</p>
    <p>isolates users from each other</p>
    <p>6</p>
  </div>
  <div class="page">
    <p>Emulab</p>
    <p>7</p>
  </div>
  <div class="page">
    <p>Emulab</p>
    <p>organized around profiles</p>
    <p>profiles are instantiated to make experiments</p>
    <p>7</p>
    <p>Profile</p>
  </div>
  <div class="page">
    <p>Emulab</p>
    <p>organized around profiles</p>
    <p>profiles are instantiated to make experiments</p>
    <p>nodes disks populated via disk images</p>
    <p>7</p>
    <p>Profile</p>
  </div>
  <div class="page">
    <p>Emulab</p>
    <p>organized around profiles</p>
    <p>profiles are instantiated to make experiments</p>
    <p>nodes disks populated via disk images</p>
    <p>in-experiment services</p>
    <p>7</p>
    <p>Profile Disk images</p>
  </div>
  <div class="page">
    <p>Goal: Emulab + Docker should just work</p>
    <p>8</p>
  </div>
  <div class="page">
    <p>Goal: Emulab + Docker should just work</p>
    <p>containers in Emulab are just another kind of virtual node</p>
    <p>8</p>
    <p>Docker images</p>
  </div>
  <div class="page">
    <p>Goal: Emulab + Docker should just work</p>
    <p>containers in Emulab are just another kind of virtual node  Emulab user can choose any Docker image</p>
    <p>preserve Emulabs experimenter services  e.g., SSH, local/remote storage access,</p>
    <p>8</p>
    <p>Docker images</p>
  </div>
  <div class="page">
    <p>Goal: Emulab + Docker should just work</p>
    <p>containers in Emulab are just another kind of virtual node  Emulab user can choose any Docker image</p>
    <p>preserve Emulabs experimenter services  e.g., SSH, local/remote storage access,</p>
    <p>preserve Emulabs network services  e.g., control network, traffic shaping,</p>
    <p>8</p>
    <p>Docker images</p>
  </div>
  <div class="page">
    <p>Goal: Emulab + Docker should just work</p>
    <p>containers in Emulab are just another kind of virtual node  Emulab user can choose any Docker image</p>
    <p>preserve Emulabs experimenter services  e.g., SSH, local/remote storage access,</p>
    <p>preserve Emulabs network services  e.g., control network, traffic shaping,</p>
    <p>preserve Docker user experience  e.g., docker commit</p>
    <p>8</p>
    <p>Docker images</p>
  </div>
  <div class="page">
    <p>9</p>
    <p>httpd:latest</p>
  </div>
  <div class="page">
    <p>Preserving Emulabs experimenter services</p>
    <p>shell access to nodes</p>
    <p>remote and local storage</p>
    <p>network configuration  addressing, routing, shaping</p>
    <p>startup programs</p>
    <p>10</p>
  </div>
  <div class="page">
    <p>Preserving Emulabs experimenter services</p>
    <p>shell access to nodes</p>
    <p>remote and local storage</p>
    <p>network configuration  addressing, routing, shaping</p>
    <p>startup programs</p>
    <p>typical Docker images are minimal appliances</p>
    <p>run the application only  not prepared to host other services</p>
    <p>10</p>
    <p>httpd:latest</p>
  </div>
  <div class="page">
    <p>augmentation</p>
    <p>generate a new Dockerfile, starting from the users chosen image,</p>
    <p>and adding testbed software</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>12</p>
    <p>httpd:latest</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>Container</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>Container build tools</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>Container build tools</p>
    <p>runit</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>Container build tools</p>
    <p>runit</p>
    <p>runit</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>runit</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>runit</p>
    <p>FROM httpd:latest</p>
    <p>COPY runit RUN runit-setup</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit  add Dockerfile instructions to install runit</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>runit</p>
    <p>FROM httpd:latest</p>
    <p>COPY runit RUN runit-setup</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit  add Dockerfile instructions to install runit  configure runit to run the original ENTRYPOINT</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>runit</p>
    <p>FROM httpd:latest</p>
    <p>COPY runit RUN runit-setup</p>
  </div>
  <div class="page">
    <p>Augment the startup</p>
    <p>make temporary container  add build toolchain  compile and package runit  add Dockerfile instructions to install runit  configure runit to run the original ENTRYPOINT  when augmented image is used, set ENTRYPOINT to runit</p>
    <p>12</p>
    <p>httpd:latest</p>
    <p>runit</p>
    <p>FROM httpd:latest</p>
    <p>COPY runit RUN runit-setup</p>
  </div>
  <div class="page">
    <p>Add the Emulab client-side software</p>
    <p>make temporary container  compile and package Emulab client-side software  add Dockerfile instructions to install the software</p>
    <p>user-selectable levels of augmentation</p>
    <p>13</p>
    <p>FROM httpd:latest</p>
    <p>COPY  RUN runit-setup &amp;&amp; emulab-setup</p>
  </div>
  <div class="page">
    <p>Local registry</p>
    <p>14</p>
    <p>Docker registry</p>
  </div>
  <div class="page">
    <p>Local registry</p>
    <p>cache augmented images in a testbed-local Docker registry</p>
    <p>speeds subsequent experiment creation</p>
    <p>integrated with Emulabs user authentication &amp; authorization model</p>
    <p>14</p>
    <p>Docker registry</p>
    <p>httpd:latest perl:5.28</p>
    <p>redis:4.0 node:8.11.3</p>
    <p>mysql:5.7 erlang:21.0</p>
  </div>
  <div class="page">
    <p>Preserving Emulabs network services</p>
    <p>separate control network</p>
    <p>experiment traffic shaping</p>
    <p>control-network firewalls</p>
    <p>DNS</p>
    <p>15</p>
  </div>
  <div class="page">
    <p>Preserving Emulabs network services</p>
    <p>separate control network</p>
    <p>experiment traffic shaping</p>
    <p>control-network firewalls</p>
    <p>DNS</p>
    <p>Dockers Container Network Model (CNM) is mismatched to demands of a network testbed</p>
    <p>too abstract</p>
    <p>tries to control too much</p>
    <p>missing features</p>
    <p>15</p>
  </div>
  <div class="page">
    <p>leverage the physical host</p>
    <p>manage network services on the physical-host side of</p>
    <p>containers virtual network interfaces</p>
  </div>
  <div class="page">
    <p>Control network</p>
    <p>17</p>
    <p>Physical Host</p>
    <p>physical control network</p>
  </div>
  <div class="page">
    <p>Control network</p>
    <p>at physical-host boot  create dockercnet virtual network</p>
    <p>bridge to the physical control network</p>
    <p>17</p>
    <p>Physical Host</p>
    <p>dockercnet</p>
    <p>physical control network</p>
  </div>
  <div class="page">
    <p>Control network</p>
    <p>at physical-host boot  create dockercnet virtual network</p>
    <p>bridge to the physical control network</p>
    <p>at container startup  connect to dockercnet  set up NAT to expose SSH over the physical hosts public IP address</p>
    <p>17</p>
    <p>Physical Host</p>
    <p>Container Container Container</p>
    <p>dockercnet</p>
    <p>physical control network</p>
  </div>
  <div class="page">
    <p>Traffic shaping and firewalls</p>
    <p>18</p>
    <p>Physical Host</p>
    <p>dockercnet</p>
    <p>control network</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Traffic shaping and firewalls</p>
    <p>Emulab subscribes to life-cycle events of each container</p>
    <p>at container startup  install tc rules for expt.-network traffic shaping</p>
    <p>install iptables rules for controlnetwork firewalling</p>
    <p>18</p>
    <p>Physical Host</p>
    <p>dockercnet</p>
    <p>control network</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Traffic shaping and firewalls</p>
    <p>Emulab subscribes to life-cycle events of each container</p>
    <p>at container startup  install tc rules for expt.-network traffic shaping</p>
    <p>install iptables rules for controlnetwork firewalling</p>
    <p>at container shutdown  remove the rules</p>
    <p>18</p>
    <p>Physical Host</p>
    <p>Container Container Container</p>
    <p>dockercnet</p>
    <p>control network</p>
    <p>experiment networks</p>
    <p>firewall</p>
    <p>shaping</p>
  </div>
  <div class="page">
    <p>Dedicated and shared modes</p>
    <p>19</p>
    <p>Physical Host</p>
    <p>Container Container Container</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Dedicated and shared modes</p>
    <p>dedicatedcontainers run on physical machine reserved to one experiment</p>
    <p>19</p>
    <p>Physical Host</p>
    <p>Experiment</p>
    <p>Container Container Container</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Dedicated and shared modes</p>
    <p>dedicatedcontainers run on physical machine reserved to one experiment  sharedphysical machine may host containers from several experiments</p>
    <p>19</p>
    <p>Physical Host</p>
    <p>Expt. 1 Expt. 2</p>
    <p>Container Container Container</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Dedicated and shared modes</p>
    <p>dedicatedcontainers run on physical machine reserved to one experiment  sharedphysical machine may host containers from several experiments</p>
    <p>19</p>
    <p>Physical Host</p>
    <p>Expt. 1 Expt. 2</p>
    <p>Container Container Container</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Dedicated and shared modes</p>
    <p>dedicatedcontainers run on physical machine reserved to one experiment  sharedphysical machine may host containers from several experiments</p>
    <p>we modified Docker to support multiple, isolated layer 2 nets on a single physical host</p>
    <p>19</p>
    <p>Physical Host</p>
    <p>Expt. 1 Expt. 2</p>
    <p>Container Container Container</p>
    <p>experiment networks</p>
  </div>
  <div class="page">
    <p>Implemented &amp; deployed</p>
    <p>supported OSes  Alpine Linux 3.6, 3.7, 3.8  CentOS 7  Debian 8, 9, sid  Ubuntu 14.04, 16.04, 18.04</p>
    <p>registries at</p>
    <p>20</p>
  </div>
  <div class="page">
    <p>evaluation  60 most popular images from Docker Hub</p>
    <p>four research Docker images  time to augment Docker images  time to create large experiments</p>
  </div>
  <div class="page">
    <p>22</p>
    <p>Category Docker Images</p>
    <p>Linux distro alpine, centos, debian, ubuntu, amazonlinux, busybox, fedora</p>
    <p>Debian buildpack-deps, cassandra, chronograf, drupal, elasticsearch, ghost, golang, gradle, groovy, haproxy, httpd, influxdb, java, jenkins, jruby, kibana, logstash, mariadb, maven, memcached, mongo, mysql, nextcloud, nginx, node, openjdk, owncloud, percona, perl, php, postgres, python, rabbitmq, redis, rethinkdb, rocket.chat, ruby, sentry, solr, sonarqube, tomcat, wordpress, telegraf</p>
    <p>Alpine consul, docker, kong, neo4j, vault, registry</p>
    <p>Scratch hello-world, nats, swarm, traefik</p>
  </div>
  <div class="page">
    <p>22</p>
    <p>Category Docker Images</p>
    <p>Linux distro alpine, centos, debian, ubuntu, amazonlinux, busybox, fedora</p>
    <p>Debian buildpack-deps, cassandra, chronograf, drupal, elasticsearch, ghost, golang, gradle, groovy, haproxy, httpd, influxdb, java, jenkins, jruby, kibana, logstash, mariadb, maven, memcached, mongo, mysql, nextcloud, nginx, node, openjdk, owncloud, percona, perl, php, postgres, python, rabbitmq, redis, rethinkdb, rocket.chat, ruby, sentry, solr, sonarqube, tomcat, wordpress, telegraf</p>
    <p>Alpine consul, docker, kong, neo4j, vault, registry</p>
    <p>Scratch hello-world, nats, swarm, traefik</p>
    <p>fully supported partially supported not supported</p>
  </div>
  <div class="page">
    <p>23</p>
    <p>Category Docker Images</p>
    <p>Linux distro alpine, centos, debian, ubuntu, amazonlinux, busybox, fedora</p>
    <p>Debian buildpack-deps, cassandra, chronograf, drupal, elasticsearch, ghost, golang, gradle, groovy, haproxy, httpd, influxdb, java, jenkins, jruby, kibana, logstash, mariadb, maven, memcached, mongo, mysql, nextcloud, nginx, node, openjdk, owncloud, percona, perl, php, postgres, python, rabbitmq, redis, rethinkdb, rocket.chat, ruby, sentry, solr, sonarqube, tomcat, wordpress, telegraf</p>
    <p>Alpine consul, docker, kong, neo4j, vault, registry</p>
    <p>Scratch hello-world, nats, swarm, traefik</p>
    <p>fully supported partially supported not supported</p>
  </div>
  <div class="page">
    <p>23</p>
    <p>Category Docker Images</p>
    <p>Linux distro alpine, centos, debian, ubuntu, amazonlinux, busybox, fedora</p>
    <p>Debian buildpack-deps, cassandra, chronograf, drupal, elasticsearch, ghost, golang, gradle, groovy, haproxy, httpd, influxdb, java, jenkins, jruby, kibana, logstash, mariadb, maven, memcached, mongo, mysql, nextcloud, nginx, node, openjdk, owncloud, percona, perl, php, postgres, python, rabbitmq, redis, rethinkdb, rocket.chat, ruby, sentry, solr, sonarqube, tomcat, wordpress, telegraf</p>
    <p>Alpine consul, docker, kong, neo4j, vault, registry</p>
    <p>Scratch hello-world, nats, swarm, traefik</p>
    <p>fully supported partially supported not supported</p>
    <p>Emulab automatically adapted 52/60 images into the testbed environment and instantiated containers from them.</p>
  </div>
  <div class="page">
    <p>Scalability</p>
    <p>create large experiments with Docker containers</p>
    <p>in each trial  200 containers per physical host  each container runs augmented ubuntu:14.04 image from testbeds local registry</p>
    <p>all containers attached to a LAN</p>
    <p>physical hosts: CloudLab xl170 nodes running Ubuntu 16.04</p>
    <p>24</p>
  </div>
  <div class="page">
    <p>Scalability</p>
    <p>create large experiments with Docker containers</p>
    <p>in each trial  200 containers per physical host  each container runs augmented ubuntu:14.04 image from testbeds local registry</p>
    <p>all containers attached to a LAN</p>
    <p>physical hosts: CloudLab xl170 nodes running Ubuntu 16.04</p>
    <p>125 physical hosts  yielding 2005,000 containers</p>
    <p>24</p>
  </div>
  <div class="page">
    <p>Scalability</p>
    <p>create large experiments with Docker containers</p>
    <p>in each trial  200 containers per physical host  each container runs augmented ubuntu:14.04 image from testbeds local registry</p>
    <p>all containers attached to a LAN</p>
    <p>physical hosts: CloudLab xl170 nodes running Ubuntu 16.04</p>
    <p>125 physical hosts  yielding 2005,000 containers</p>
    <p>measure  elapsed time to first container  avg. creation time for each container after the first</p>
    <p>elapsed time to create all containers on each physical host</p>
    <p>elapsed time to create full expt.</p>
    <p>24</p>
  </div>
  <div class="page">
    <p>Scalability</p>
    <p>create large experiments with Docker containers</p>
    <p>in each trial  200 containers per physical host  each container runs augmented ubuntu:14.04 image from testbeds local registry</p>
    <p>all containers attached to a LAN</p>
    <p>physical hosts: CloudLab xl170 nodes running Ubuntu 16.04</p>
    <p>125 physical hosts  yielding 2005,000 containers</p>
    <p>measure  elapsed time to first container  avg. creation time for each container after the first</p>
    <p>elapsed time to create all containers on each physical host</p>
    <p>elapsed time to create full expt.</p>
    <p>repeat each trial 3, report avgs.</p>
    <p>24</p>
  </div>
  <div class="page">
    <p>25</p>
  </div>
  <div class="page">
    <p>25</p>
  </div>
  <div class="page">
    <p>25</p>
  </div>
  <div class="page">
    <p>25</p>
    <p>Conclusion: acceptable performance, but more server-side optimization will be needed for large experiments.</p>
  </div>
  <div class="page">
    <p>25</p>
    <p>parallelized</p>
  </div>
  <div class="page">
    <p>25</p>
    <p>one-time setup</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Emulab + Docker just works  experimenter servicesautomatic augmentation  network servicesphysical host control &amp; minor Docker mods</p>
    <p>supports existing Docker images  promotes artifact portability  promotes research repeatability</p>
    <p>available in Emulab-based testbeds now!</p>
    <p>26</p>
    <p>Eric Eide www.cs.utah.edu/~eeide/ email: eeide@cs.utah.edu Twitter: @eeide</p>
  </div>
</Presentation>
