<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Enforcing Context-Aware BYOD</p>
    <p>Policies with In-Network Security</p>
    <p>ADAM MORRISON*, LEI XUE, ANG CHEN*, XIAPU LUO</p>
    <p>*RICE UNIVERSITY, THE HONG KONG POLYTECHNIC UNIVERSITY</p>
  </div>
  <div class="page">
    <p>Background: BYOD</p>
    <p>BYOD: Bring Your Own Device</p>
    <p>Allow personal devices to access enterprise network</p>
    <p>Reduces cost</p>
    <p>Increases employee satisfaction</p>
    <p>BYOD is everywhere, and its only growing*</p>
    <p>As of 2016:</p>
    <p>59% of companies used BYOD</p>
    <p>13% more planned to within a year</p>
    <p>*Tech Pro Research:</p>
    <p>http://www.techproresearch.com/article/byod-iot-and-wearables-thriving-in-the-enterprise/</p>
  </div>
  <div class="page">
    <p>Motivation: BYOD has Security Issues</p>
    <p>Used to access both external and internal resources</p>
    <p>Not subject to the same robust security measures found on company-only devices</p>
    <p>Chinese-wall style perimeter policies are becoming outdated</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>We Need Context-Aware Policies!</p>
    <p>Context-aware policy: Looks at the environment, not</p>
    <p>just the individual request</p>
    <p>Examples:</p>
    <p>Only allow access if an administrator is online</p>
    <p>Only allow access if the device is inside the office</p>
    <p>Conduct deep packet inspection if the camera is on</p>
  </div>
  <div class="page">
    <p>Properties of Context-Aware Policies</p>
    <p>Access to network-wide context</p>
    <p>Only allow access if an administrator is online</p>
    <p>Access to device-specific context</p>
    <p>Only allow access if the device is inside the office</p>
    <p>Dynamically changing context</p>
    <p>Conduct deep packet inspection if the camera is on</p>
  </div>
  <div class="page">
    <p>Existing Solutions 6</p>
    <p>App</p>
    <p>Server-Side</p>
    <p>Client-Side</p>
    <p>Both have pros and cons!</p>
  </div>
  <div class="page">
    <p>Server Side Solutions</p>
    <p>Unsupported policy: Conduct deep packet inspection if camera is on</p>
    <p>Example: BeyondCorp  No-Perimeter network</p>
    <p>security model</p>
    <p>Unprivileged network</p>
    <p>Cons:  Missing device-specific</p>
    <p>context</p>
    <p>Dont always control server</p>
    <p>Missing network-wide</p>
    <p>context</p>
    <p>App</p>
    <p>Pros:  Easy to update and</p>
    <p>manage</p>
    <p>Minimal client trust</p>
  </div>
  <div class="page">
    <p>Client Side Solutions 8</p>
    <p>App</p>
    <p>Context</p>
    <p>Enforcer</p>
    <p>Cons:  Requires lots of trust in client</p>
    <p>High overhead on mobile</p>
    <p>device</p>
    <p>Missing network-wide</p>
    <p>context</p>
    <p>Pros:  Has easy access to</p>
    <p>device context</p>
    <p>Tighter control over</p>
    <p>device</p>
    <p>Unsupported policy: Allow access only if Admin is online</p>
    <p>Example: PBS (NDSS 2016)  Client-side enforcement</p>
    <p>of policies defined by</p>
    <p>the network</p>
  </div>
  <div class="page">
    <p>Best of Both Worlds?</p>
    <p>Common limitation: No access to network-wide context</p>
    <p>Solution: Enforce policies in the network!</p>
    <p>Solves many issues with client/server solutions</p>
    <p>Full control over network</p>
    <p>Minimal trust in clients</p>
    <p>Easy access to network context</p>
    <p>Can get access to device context with client-side module*</p>
  </div>
  <div class="page">
    <p>Challenge: Traditional Networks</p>
    <p>are not Programmable Existing in-network solutions:</p>
    <p>Fixed-function switches cant recognize application-level contexts</p>
    <p>Access control lists, blacklisting, ..</p>
    <p>Hardware middleboxes arent customizable</p>
    <p>Deep packet inspection, traffic scrubbing, ..</p>
    <p>Neither is flexible enough to meet our needs!</p>
  </div>
  <div class="page">
    <p>Opportunity: The Network is</p>
    <p>Becoming Programmable!  Programmable dataplanes:</p>
    <p>Define your own headers</p>
    <p>Perform richer header operations</p>
    <p>Ex: Barefoot Tofino, Cavium Xpliant</p>
    <p>Domain-specific languages for programmable switches (e.g. P4):</p>
    <p>Define custom headers</p>
    <p>Create and apply custom match/action tables</p>
    <p>Support for read/write registers</p>
  </div>
  <div class="page">
    <p>POISE: Programmable In-Network Security</p>
    <p>Policy enforcement moved inside the network</p>
    <p>- Leverages programmable dataplanes</p>
    <p>Client devices only responsible for collecting context information (using client-side module)</p>
    <p>Best of both worlds:</p>
    <p>- Access to fine-grained device-specific context</p>
    <p>- Access to dynamic network state</p>
    <p>- Minimal trust in the client</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Existing Solutions</p>
    <p>POISE: Programmable In-Network Security</p>
    <p>- POISE Architecture - System Design - Policy Language - Compiler - Context Collector Module</p>
    <p>- Initial Results</p>
    <p>- Future Work</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>BYOD devices can be compromised by malicious apps,</p>
    <p>but:</p>
    <p>Enterprise network is trustworthy</p>
    <p>OS kernel on BYOD device and context-collecting module</p>
    <p>are intact</p>
  </div>
  <div class="page">
    <p>System Design 15</p>
    <p>Switch (P4) Program</p>
    <p>POISE Policy</p>
    <p>Context</p>
    <p>Collector</p>
    <p>Config File</p>
    <p>App</p>
    <p>info</p>
    <p>Sys</p>
    <p>info</p>
    <p>Sensor</p>
    <p>info</p>
    <p>Compiler Policy</p>
    <p>Language</p>
    <p>Compiler</p>
    <p>Runtime</p>
  </div>
  <div class="page">
    <p>POISE Policy Language</p>
    <p>Based on Pyretic NetCore  Match-action based control flow</p>
    <p>Key additions  Added support for device contexts</p>
    <p>Examples:  Allow access only if admin is online</p>
    <p>Distance-based access control</p>
    <p>if ((lat-x)*(lat-x)+(lon-y)*(lon-y) &lt; D) then fwd(server) else drop</p>
    <p>def adminlst = [Bob, Alice] c = count(match(usr in adminlst)) match(c&gt;0) &gt;&gt; fwd(server)</p>
  </div>
  <div class="page">
    <p>Compiler</p>
    <p>Input: POISE policy program Output: Switch programs, Context collector configuration files</p>
    <p>Monitor  Switch read/write register</p>
    <p>Constant list  Switch match/action table</p>
    <p>Context variable  Customized header</p>
    <p>Config file entry</p>
  </div>
  <div class="page">
    <p>Context Collector Module 18</p>
    <p>Two strategies:  Add headers to all</p>
    <p>outgoing packets</p>
    <p>Send separate context</p>
    <p>packets  Periodically</p>
    <p>When an app opens a</p>
    <p>new socket</p>
    <p>When an dormant</p>
    <p>socket resumes activity</p>
    <p>User Sub-Module</p>
    <p>Information Collector</p>
    <p>Kernel Sub-Module</p>
    <p>Packet Monitor</p>
    <p>Context TaggerC o</p>
    <p>m m</p>
    <p>u n</p>
    <p>ic a ti</p>
    <p>o n</p>
    <p>C h</p>
    <p>a n</p>
    <p>n e l</p>
    <p>App</p>
    <p>info</p>
    <p>Sys</p>
    <p>info</p>
    <p>Sensor</p>
    <p>info</p>
    <p>Network</p>
    <p>User Layer</p>
    <p>Kernel Layer</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Existing Solutions</p>
    <p>POISE: Programmable In-Network Security</p>
    <p>POISE Architecture System Design Policy Langauge Compiler Context Collector Module</p>
    <p>- Initial Results</p>
    <p>- Future Work</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Compiler not implemented yet</p>
    <p>P4 Programs written by hand</p>
    <p>Context Collector hardcoded</p>
    <p>Mobile traces collected on Nexus 5 running client module</p>
    <p>Traces injected into Mininet topology with one switch and 6 end hosts</p>
  </div>
  <div class="page">
    <p>Evaluation Questions 21</p>
    <p>How much CPU overhead does POISE place on the client device?</p>
    <p>How much traffic overhead does POISE add?</p>
    <p>How effective is POISE at expressing sophisticated policies?</p>
  </div>
  <div class="page">
    <p>&lt; 1% CPU overhead on client</p>
    <p>Additional traffic &lt; 11.2 kbps</p>
    <p>*Overhead measured when sending packets periodically, as opposed to tagging all outgoing packets</p>
  </div>
  <div class="page">
    <p>Results: Expressiveness + Effectiveness 23</p>
    <p>Policy Detected?</p>
    <p>Block services during working hours</p>
    <p>Direct traffic from guests through a middlebox</p>
    <p>Allow access only if user is close to a location</p>
    <p>Allow access only if admin is online</p>
    <p>Block requests without user interaction</p>
    <p>Scrub traffic if UIs are overlapping</p>
    <p>Conduct DPI if the camera or recorder is on</p>
    <p>We can support both existing and new policies!</p>
  </div>
  <div class="page">
    <p>Ongoing Work</p>
    <p>Build a full prototype, including a functional compiler</p>
    <p>Enhance threat model</p>
    <p>Move information collector to kernel</p>
    <p>Look for ways to address malicious/compromised kernels</p>
    <p>Perform larger-scale experiments on real-world BYOD traces</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Motivation: BYOD presents new security threats</p>
    <p>Existing approaches have pros and cons:  Client-side solutions  Server-side solutions</p>
    <p>Our approach: POISE (programmable in-network security)  Decouple context collection from policy enforcement  Leverage programmable data planes  Best of both worlds: context-aware and network-aware</p>
    <p>Preliminary results:  &lt; 1% overhead  Can support a wide variety of context-aware policies</p>
  </div>
  <div class="page">
    <p>Questions and Issues</p>
    <p>Circumvention</p>
    <p>What happens if a malicious app gets root access?</p>
    <p>Usability</p>
    <p>How easy is POISE for network administrators to use?</p>
    <p>Testing</p>
    <p>What kinds of testing/metrics would be important?</p>
    <p>Thank you!</p>
  </div>
</Presentation>
