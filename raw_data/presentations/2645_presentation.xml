<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DFC: Accelerating String Pattern Matching for</p>
    <p>Network Applications</p>
  </div>
  <div class="page">
    <p>NFV : Commodity hardware appliances  Software layer - Virtualizes entire class of network functions</p>
    <p>- E.g., IDS, Firewall, NAT, Load balancer,</p>
    <p>Trend : Popularity of Network Function Virtualization (NFV)</p>
  </div>
  <div class="page">
    <p>Looking for known patterns in packet payloads  String pattern matching (Fixed-length string) and Regex matching (PCRE)</p>
    <p>5K ~ 26K rules in public rule-sets for network applications</p>
    <p>Rule Examples  Rule 1</p>
    <p>Rule 2</p>
    <p>Rule 3</p>
    <p>Content: Object PCRE: /(ActiveX|Create)Object/i</p>
    <p>Content: Persits.XUpload PCRE: \s*\([\x22\x27]Persits.XUpload/i</p>
    <p>Content: FieldListCtrl PCRE: ACCWIZ\x2eFieldListCtrl\x2e1\x2e8/i</p>
    <p>String pattern matching Regular expression matching</p>
    <p>Pattern Matching for Deep Packet Inspection</p>
  </div>
  <div class="page">
    <p>Looking for known patterns in packet payloads  String pattern matching (Fixed-length string) and Regex matching (PCRE)</p>
    <p>5K ~ 26K rules in public rule-sets for network applications</p>
    <p>Network applications using pattern matching</p>
    <p>Pattern Matching for Deep Packet Inspection</p>
    <p>Intrusion Detection</p>
    <p>Attack patterns</p>
    <p>Fixed-length string 1 Fixed-length string 2</p>
    <p>Regex 1</p>
    <p>Regex 2</p>
    <p>String pattern matching (Multi patterns)</p>
    <p>Regex matching (Single regex)</p>
  </div>
  <div class="page">
    <p>Looking for known patterns in packet payloads  String pattern matching (Fixed-length string) and Regex matching (PCRE)</p>
    <p>5K ~ 26K rules in public rule-sets for network applications</p>
    <p>Network applications using pattern matching</p>
    <p>Pattern Matching for Deep Packet Inspection</p>
    <p>Parental Filtering Exfiltration Detection</p>
    <p>Web Application FirewallIntrusion Detection</p>
    <p>Attack patterns</p>
    <p>Banned words Watermark</p>
    <p>Attack patterns</p>
  </div>
  <div class="page">
    <p>* (1) S. Antonatos et al. Generating Realistic Workloads for Network Intrusion Detection Systems. ACM SIGSOFT SEN, 2004. (2) M. A. Jamshed et al. Kargus: A Highly-scalable Software-based Intrusion Detection System. ACM CCS, 2012. (3) Chris Ueland. Scaling CloudFlares massive WAF. http://www.scalescale.com/scaling-cloudflaresmassive-waf/</p>
    <p>However, String Pattern Matching is Performance Bottleneck</p>
    <p>Network Applications</p>
    <p>Packet I/O</p>
    <p>Networking Stack</p>
    <p>Application Logic (e.g., String pattern matching,</p>
    <p>Regular expression matching, )</p>
    <p>Intel DPDK, PF_RING PacketShader [SIGCOMM 11] netmap [USENIX ATC 12]</p>
    <p>IX [OSDI 14], OpenFastPath mTCP [NSDI 14], 6WINDGate</p>
    <p>string pattern matching *</p>
  </div>
  <div class="page">
    <p>* (1) S. Antonatos et al. Generating Realistic Workloads for Network Intrusion Detection Systems. ACM SIGSOFT SEN, 2004. (2) M. A. Jamshed et al. Kargus: A Highly-scalable Software-based Intrusion Detection System. ACM CCS, 2012. (3) Chris Ueland. Scaling CloudFlares massive WAF. http://www.scalescale.com/scaling-cloudflaresmassive-waf/</p>
    <p>However, String Pattern Matching is Performance Bottleneck</p>
    <p>Network Applications</p>
    <p>Packet I/O</p>
    <p>Networking Stack</p>
    <p>Application Logic (e.g., String pattern matching,</p>
    <p>Regular expression matching, )</p>
    <p>Intel DPDK, PF_RING PacketShader [SIGCOMM 11] netmap [USENIX ATC 12]</p>
    <p>IX [OSDI 14], OpenFastPath mTCP [NSDI 14], 6WINDGate</p>
    <p>string pattern matching *</p>
    <p>Can we improve software-based string matching?</p>
    <p>How does it affect application performance?</p>
  </div>
  <div class="page">
    <p>DFC: High-Speed String Matching</p>
    <p>K</p>
    <p>K</p>
    <p>K</p>
    <p>K</p>
    <p>K</p>
    <p>K</p>
    <p>Intrusion Detection Web Application Firewall Traffic Classification</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (#</p>
    <p>o f</p>
    <p>re q</p>
    <p>./ se</p>
    <p>c)</p>
    <p>Existing-approach-based</p>
    <p>DFC-based</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (G</p>
    <p>b p</p>
    <p>s)</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (G</p>
    <p>b p</p>
    <p>s)</p>
  </div>
  <div class="page">
    <p>Support exact matching  As opposed to false positives</p>
    <p>Handle short and variable size patterns efficiently</p>
    <p>52% of patterns are short (&lt; 9 byte).</p>
    <p>Provide efficient online lookup against a stream of data (e.g., network traffic)</p>
    <p>Three Requirements of String Matching</p>
    <p>&lt; Pattern length distribution &gt; * Commercial pattern sets of IDS &amp; Web Firewall</p>
    <p>(ET-Pro, Snort VRT, OWASP ModSecurity CRS)</p>
  </div>
  <div class="page">
    <p>Aho-Corasick (AC)  Widely used by Suricata, Snort, CloudFlare,</p>
    <p>Constructs a finite state machine from patterns</p>
    <p>Locates all occurrences of any patterns using the state machine</p>
    <p>Limitations of Existing Approaches</p>
    <p>FINISHED</p>
    <p>H I S</p>
    <p>S H E</p>
    <p>E R S  Input text :</p>
    <p>Result: SHE HE</p>
    <p>Patterns:</p>
    <p>* Example</p>
    <p>HIS HERS HE SHE</p>
  </div>
  <div class="page">
    <p>Aho-Corasick (AC)  Widely used by Suricata, Snort, CloudFlare,</p>
    <p>Constructs a finite state machine from patterns</p>
    <p>Locates all occurrences of any patterns using the state machine</p>
    <p>Limitations of AC  State machine is very large.</p>
    <p>Working set  CPU cache size</p>
    <p>Instruction throughput is slow.</p>
    <p>Limitations of Existing Approaches</p>
  </div>
  <div class="page">
    <p>Heuristic-based approach ( Boyer-Moore, Wu-Manber,  )  Advances window by multiple characters using bad character and good suffix</p>
    <p>Not effective with short and variable size patterns</p>
    <p>Hard to leverage instruction-level pipelining</p>
    <p>Hashing-based approach ( Feed-forward Bloom filters (FFBF),  )  Compares hash of text block with hash of pattern</p>
    <p>Requires expensive hash computations (2.5X more instructions than DFC)</p>
    <p>Not effective with short and variable size patterns</p>
    <p>Induces false positives</p>
    <p>Limitations of Existing Approaches (Cont.) 12</p>
  </div>
  <div class="page">
    <p>Overcomes the limitations of existing approaches  Consumes small memory</p>
    <p>Works efficiently with short and variable size patterns</p>
    <p>Delivers high instruction-level parallelism</p>
    <p>Works efficiently even in worst case  Worst case where all packets contain attack patterns</p>
    <p>DFC: Design Goal 13</p>
  </div>
  <div class="page">
    <p>DFC: Overview</p>
    <p>Exploits a simple and efficient primitive  Used as a key building block of DFC</p>
    <p>Requires small number of operations and memory lookups</p>
    <p>Filters out innocent windows of input text</p>
    <p>Progressively eliminates false positives  Handles each pattern in a different way in terms of pattern length</p>
    <p>Verifies exact matching  Exploits hash tables</p>
  </div>
  <div class="page">
    <p>DFC: Component Overview</p>
    <p>Initial Filtering  Uses an efficient primitive Direct filter</p>
    <p>Eliminates innocent windows of input text comparing few bytes (2~3 byte)</p>
    <p>Progressive Filtering  Eliminates innocent windows further</p>
    <p>Determines lengths of patterns that window might match</p>
    <p>Applies additional filtering proportional to the lengths</p>
    <p>Verification  Verifies whether exact match is generated</p>
  </div>
  <div class="page">
    <p>Uses a single Direct filter  A bitmap indexed by several bytes of input text</p>
    <p>Example (Using 2B sliding window)</p>
    <p>DFC: Initial Filtering</p>
    <p>Example pattern:</p>
    <p>attack 01100100 01100101</p>
    <p>GET /destroy/attack/try-20Packet Payload:</p>
    <p>Direct filter</p>
    <p>dddc de atas au</p>
    <p>athlete</p>
  </div>
  <div class="page">
    <p>Uses a single Direct filter  A bitmap indexed by several bytes of input text</p>
    <p>Example (Using 2B sliding window)</p>
    <p>DFC: Initial Filtering</p>
    <p>Example pattern:</p>
    <p>attack 01100100 01100101</p>
    <p>GET /destroy/attack/try-20Packet Payload:</p>
    <p>Direct filter</p>
    <p>dddc de atas au</p>
    <p>beginning with de</p>
    <p>author</p>
    <p>athlete</p>
  </div>
  <div class="page">
    <p>Uses a single Direct filter  A bitmap indexed by several bytes of input text</p>
    <p>Example (Using 2B sliding window)</p>
    <p>DFC: Initial Filtering</p>
    <p>Example pattern:</p>
    <p>attack</p>
    <p>Further inspection</p>
    <p>GET /destroy/attack/try-20Packet Payload:</p>
    <p>Direct filter  10 0 0 0 0 00 author</p>
    <p>athlete</p>
  </div>
  <div class="page">
    <p>Uses a single Direct filter  A bitmap indexed by several bytes of input text</p>
    <p>Example (Using 2B sliding window)</p>
    <p>DFC: Initial Filtering</p>
    <p>Example pattern:</p>
    <p>attack GET /destroy/attack/try-20Packet Payload:</p>
    <p>Direct filter  10 0 0 0 0 00</p>
    <p>author</p>
    <p>athlete</p>
    <p>= 65536 = 8KB</p>
  </div>
  <div class="page">
    <p>Further eliminates innocent windows  Uses multiple layers of Direct filters</p>
    <p>Determines approximate lengths of potentially matching patterns</p>
    <p>DFC: Progressive Filtering</p>
    <p>GET /destroy/attack/try-20Packet Payload:</p>
    <p>attack</p>
    <p>athlete</p>
    <p>attacker</p>
    <p>attachment</p>
    <p>hi</p>
    <p>m</p>
    <p>Direct Filter</p>
    <p>attacker</p>
    <p>Additional filtering</p>
  </div>
  <div class="page">
    <p>Exact matching : (100  94%) * (100  up to 84%) = only 4%!  By comparing text with actual patterns in the pattern class</p>
    <p>Where only small fraction of windows reach</p>
    <p>Hash ( 1B )</p>
    <p>Hash ( 2B )</p>
    <p>Hash ( 4B )</p>
    <p>Hash ( 8B )</p>
    <p>DFC: Verification</p>
    <p>atta</p>
    <p>athl</p>
    <p>ck Pattern ID</p>
    <p>traf</p>
    <p>ete</p>
    <p>fic</p>
    <p>Pattern ID</p>
    <p>Pattern ID</p>
    <p>GET /destroy/attack/try-20Packet Payload:</p>
    <p>Hash ( atta )</p>
    <p>ComparisonComparison</p>
    <p>Reporting!</p>
  </div>
  <div class="page">
    <p>DFC: Two-Stage Hierarchical Design</p>
    <p>Initial Filtering</p>
    <p>Progressive Filtering</p>
    <p>Verification</p>
    <p>Progressive Filtering</p>
    <p>Verification * Found from</p>
    <p>ET-Pro</p>
    <p>Pattern Set</p>
    <p>.asp</p>
    <p>.asp?</p>
    <p>.asp?a=</p>
    <p>.asp?p=</p>
    <p>.asp?u=</p>
    <p>.aspx</p>
    <p>.aspx?</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Two questions 1) Can we improve software-based string matching?</p>
    <p>Machine Specification &amp; Workload  Intel Xeon E5-2690 (16 cores, 20MB for L3 cache)</p>
    <p>128 GB of RAM</p>
    <p>Intel Compilers (icc)</p>
    <p>Using real traffic trace from ISP in south Korea</p>
  </div>
  <div class="page">
    <p>Standalone Benchmark (1/2)  Average Case</p>
    <p>Improvement over AC</p>
    <p>Throughput (Gbps)</p>
    <p>Number of patterns (From ET-Pro, May 2015)</p>
    <p>Heuristic-based (MWM) Aho-Corasick (AC) DFC Improvement</p>
    <p>* MWM: Modified Wu-Manber</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Standalone Benchmark (2/2)  Worst Case</p>
    <p>Throughput (Gbps)</p>
    <p>Fraction of malicious packets</p>
    <p>AC DFC</p>
    <p>Worst case 1 (Single pattern)</p>
    <p>innocentATTACKinnocent</p>
    <p>Worst case 2 (Concatenated)</p>
    <p>ATTACK1 ATTACK2 ATTACK3</p>
    <p>Throughput (Gbps)</p>
    <p>AC DFC</p>
    <p>* Packet size : 1514B</p>
  </div>
  <div class="page">
    <p>Why does DFC work well?</p>
    <p>Instruction Count IPC</p>
    <p>L1-D cache</p>
    <p>L2 cache</p>
    <p>AC DFC</p>
    <p>Factor increase with DFC over AC</p>
    <p># of cache misses per one byte</p>
    <p>processing</p>
  </div>
  <div class="page">
    <p>Accelerating Network Applications using DFC</p>
    <p>Intrusion Detection (Kargus - CCS `12, 6K)</p>
    <p>Web Application Firewall (ModSecurity, 5K)</p>
    <p>Traffic Classification (from nDPI, 100K)</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d t</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>AC-based DFC-based</p>
    <p>Large # of patterns</p>
  </div>
  <div class="page">
    <p>DFC: High-Speed String Pattern Matching</p>
    <p>String pattern matching is a performance-critical task.</p>
    <p>DFC accelerates string pattern matching by  Using small size of basic building block</p>
    <p>Avoiding data dependency in critical path</p>
    <p>DFC delivers 2.4X speedup compared to Aho-Corasick.  1.4X in the worst case</p>
    <p>DFC improves application performance by up to 130%.</p>
    <p>Detailed information at ina.kaist.ac.kr/~dfc</p>
  </div>
</Presentation>
