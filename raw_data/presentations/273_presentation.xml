<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dont Thrash: How to Cache</p>
    <p>Your Hash in Flash</p>
    <p>M.A. Bender, M. Farach-Colton, R. Johnson, B.C. Kuszmaul, D. Medjedovic, P. Montes,</p>
    <p>P. Shetty, R. P. Spillane, E. Zadok</p>
    <p>Stony Brook U., Rutgers U., MIT, TokuTek</p>
  </div>
  <div class="page">
    <p>Bloom Filter</p>
    <p>A Bloom filter is a bit-array + k hash functions</p>
    <p>Storing a few bits per element lets the BF stay in RAM, even as the elements are too large</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 2</p>
    <p>A B</p>
    <p>Elements stored in the Bloom filter</p>
    <p>Bit-array</p>
    <p>Each element is hashed To K positions in the bit-array. Here k=2</p>
    <p>Cache (e.g., RAM)</p>
    <p>Store</p>
  </div>
  <div class="page">
    <p>Bloom Filter Lookups &amp; False Positives</p>
    <p>False positives unlikely,</p>
    <p>No false negatives (no means no)</p>
    <p>Allowing false positives is what keeps the BF small</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 3</p>
    <p>A B</p>
    <p>p FP x( )  1-e</p>
    <p>kn/m( ) k</p>
    <p>D A Clookup</p>
    <p>B h 1 (D)[ ] = 0</p>
    <p>B h 2 (D)[ ] = 1</p>
    <p>False positive (C was never inserted)</p>
  </div>
  <div class="page">
    <p>Flash</p>
    <p>Bigger &amp; cheaper than RAM, faster than disk  8TB of 512B keys needs 16GB of RAM for a ~1% BF  Flash is a good place to cheaply store large BFs</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 4</p>
    <p>RAM</p>
    <p>A B</p>
    <p>Flash</p>
    <p>Store</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Thrashing</p>
    <p>Setting random bits to 1 causes random writes</p>
    <p>OK in RAM, not in Flash</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 5</p>
    <p>Flash</p>
    <p>B</p>
    <p>C Random writes</p>
  </div>
  <div class="page">
    <p>Summary of Our Results</p>
    <p>Cascade Filter (CF), a BF replacement opt. for fast inserts on Flash</p>
    <p>Our performance  We do 670,000 inserts/sec (40x of other variants)</p>
    <p>We do 530 lookups/sec (1/3x of other variants)</p>
    <p>We use Quotient Filters (QF) instead of Bloom Filters  They have better access locality</p>
    <p>You can efficiently merge two QFs into a larger QF (w/ same FP rate)</p>
    <p>We use merging techniques to compose multiple QFs into a CF</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 6</p>
  </div>
  <div class="page">
    <p>Thrashing is the Problem</p>
    <p>Every insert, you write to K Flash pages</p>
    <p>Expensive to write to a Flash page</p>
    <p>We cant do fast insertions without working around this issue</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 7</p>
    <p>Random Writes</p>
    <p>K</p>
    <p>C</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>Shaving off K</p>
    <p>Now you only write one block for each insert instead of K blocks</p>
    <p>Two-step hash [Canim et. al., 2010]</p>
    <p>This helps a little</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 8</p>
    <p>Now just one random write, not K</p>
    <p>K C</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>Queue Writes</p>
    <p>This helps a lot [Canim et. al. 2010]  Buffering gives bit-flips a chance to piggy-back  How others have cached hashes in Flashes</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 9</p>
    <p>RAM 1 33</p>
    <p>Flash</p>
    <p>B</p>
    <p>B A D</p>
  </div>
  <div class="page">
    <p>We Need Help</p>
    <p>Buffering works when the queue is large</p>
    <p>Small queues insert ~1 element per flash write</p>
    <p>Were interested in large datasets, and fast insertions (i.e., when buffering doesnt work)</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 10</p>
    <p>RAM</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>An Important Problem</p>
    <p>Many companies optimize their DBs for large data-sets and fast inserts  Bai-Du Hypertable</p>
    <p>Facebook Cassandra</p>
    <p>Google BigTable</p>
    <p>TokuTek TokuDB</p>
    <p>Yahoo! HBase</p>
    <p>and more!</p>
    <p>Scaling the trusty Bloom Filter to Flash would be a powerful tool for tackling these problems</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 11</p>
  </div>
  <div class="page">
    <p>Several data structures avoid RWs</p>
    <p>A list of the most common methods</p>
    <p>Buffered Repository Trees</p>
    <p>Cassandra</p>
    <p>Cache Oblivious Look-ahead Arrays</p>
    <p>Log-structured Merge Trees</p>
    <p>and more</p>
    <p>We can try to adapt the general method many of these structures use</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 12</p>
  </div>
  <div class="page">
    <p>The General Method</p>
    <p>Supports deletes  Composed of many sorted lists  We can use this technique to avoid random writes</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 13</p>
    <p>RAM 2</p>
    <p>Store</p>
    <p>Lookup 8</p>
    <p>No</p>
    <p>No</p>
    <p>Found</p>
    <p>Buffers are merged to keep total number of buffers low logN</p>
  </div>
  <div class="page">
    <p>Problem: Elements not Bits</p>
    <p>This method is used with sorted lists of elements, not Bloom filters</p>
    <p>We need a data structure that  Supports insert + lookup</p>
    <p>Is as space efficient as a Bloom filter</p>
    <p>Can be merged on Flash like a sorted list of elements</p>
    <p>Bonus: supports always-working deletes</p>
    <p>Bonus: faster than BFs</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 14</p>
  </div>
  <div class="page">
    <p>Our Proposal: Quotient Filters</p>
    <p>Supports insert + lookup</p>
    <p>Compact like a Bloom filter</p>
    <p>Two QFs can be merged into a larger QF</p>
    <p>Supports always-working deletes</p>
    <p>Faster</p>
    <p>We can use this alternative to replace the sorted lists of elements in a write-opt. method</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 15</p>
  </div>
  <div class="page">
    <p>A Quotient Filter</p>
    <p>fingerprints + quotienting to save space</p>
    <p>fingerprint: p-bit hash (p=5)</p>
    <p>Compact, only stores r+MD bits per element</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 16</p>
    <p>A B</p>
    <p>h(A)=00:101 h(B)=10:110</p>
    <p>address:identity Q[10]=110</p>
  </div>
  <div class="page">
    <p>A Quotient Filter</p>
    <p>False positive: fingerprint collision  , , or ~1.2x a BF for ~0.1% FP-rate  Quotient Filters also remain small by allowing false positives</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 17</p>
    <p>A B</p>
    <p>h(B)=10:110</p>
    <p>A C E</p>
    <p>D h(D)=10:111</p>
    <p>h(C)=01:010</p>
    <p>h(E)=10:110 False positive (E was never inserted)</p>
    <p>Soft collision (push D to the side, use a few MD bits to remember)</p>
    <p>p FP x( )  a 1</p>
    <p>-1 r+ MD( ) 2</p>
    <p>q</p>
    <p>h(A)=00:101</p>
  </div>
  <div class="page">
    <p>But Will it Merge?</p>
    <p>Actually, a compact sorted list of integers</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 18</p>
    <p>A B</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>Merge as Integers, Then Insert</p>
    <p>QFs support Plug-n-Play with wrt.-opt. DSes</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 19</p>
  </div>
  <div class="page">
    <p>Cascade Filter</p>
    <p>Just substitute sorted lists of elements with Quotient Filters instead</p>
    <p>Now we have fast insertions and a compact representation in Flash</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 20</p>
    <p>RAM QF</p>
    <p>Store QF</p>
    <p>QF</p>
    <p>QF</p>
    <p>logN</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Everything was the same (e.g., cache size)</p>
    <p>Inserted 8.4 billion hashes</p>
    <p>Randomly queried them</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 21</p>
  </div>
  <div class="page">
    <p>Insertion Throughput</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 22</p>
    <p>Large Merges</p>
    <p>Thruput much higher: 40x higher than BBF</p>
    <p>Seconds</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>F in</p>
    <p>g e</p>
    <p>rp ri</p>
    <p>n ts</p>
    <p>I n</p>
    <p>se rt</p>
    <p>e d</p>
    <p>Peak append thruput: 8.4MB/S</p>
  </div>
  <div class="page">
    <p>Lookup Throughput</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 23</p>
    <p>CF Traditional BF Elevator BF</p>
    <p>Lo o</p>
    <p>ku p</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Quotient Filters outperform BFs in RAM</p>
    <p>3x faster inserts, same lookups</p>
    <p>Support deletes</p>
    <p>Can be dynamically resized</p>
    <p>Cascade Filters outperform BFs in Flash</p>
    <p>All advantages of Quotient Filters (e.g., deletes)</p>
    <p>40x faster inserts, 1/3x lookups</p>
    <p>CPU bound</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 24</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Tweak the CF to handle buffering as well</p>
    <p>Measure real index workloads</p>
    <p>Can a CF help a write-optimized DB?</p>
    <p>There are a lot of exciting boulevards to explore</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 25</p>
  </div>
  <div class="page">
    <p>And That is How</p>
    <p>you Dont Thrash, when you Cache Your Hash in Flash</p>
    <p>Thank you for listening, Questions?</p>
    <p>Pablo Montes: pmontes@cs.stonybrook.edu</p>
    <p>Rick Spillane: rick@fsl.cs.sunysb.edu</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 26</p>
  </div>
  <div class="page">
    <p>Insertion Throughput</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 27</p>
    <p>CF Traditional BF Elevator BF</p>
    <p>In se</p>
    <p>rt io</p>
    <p>n T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Controls:  ~Equal DS cache size, BF given benefit of doubt</p>
    <p>Equal RAM in all runs/tests</p>
    <p>BF tests run in steady-state for 4+ hours</p>
    <p>CF tests run for 8.4 billion insertions (~16GB CF)</p>
    <p>Flash partition 60% of Intel X25-Mv2, 90GB</p>
    <p>Machine:  Quad-core 2.4GHz Xeon E5530 with 8MB cache</p>
    <p>24GB of RAM (booted with 0.994GB)</p>
    <p>159.4GB Intel X-25M SSD (second generation)</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 28</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Measure CF effectiveness for read-optimized</p>
    <p>Measure real index workloads</p>
    <p>Can a CF help a write-optimized DB?</p>
    <p>Better CPU/GPU optimization</p>
    <p>There are a lot of exciting boulevards to explore</p>
    <p>Don't Thrash: How to Cache Your Hash in Flash 29</p>
  </div>
</Presentation>
