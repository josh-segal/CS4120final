<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DSAC: Effective Static Analysis of</p>
    <p>Sleep-in-Atomic-Context Bugs in Kernel Modules</p>
    <p>Jia-Ju Bai1, Yu-Ping Wang1, Julia Lawall2, Shi-Min Hu1</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Atomic context</p>
    <p>An OS kernel state</p>
    <p>A CPU core is occupied to execute the code without</p>
    <p>interruption</p>
    <p>Protect resources from concurrent access</p>
    <p>Common examples of atomic context</p>
    <p>Code is executed while holding a spinlock</p>
    <p>Code is executed in an interrupt handler</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>SAC (Sleep in Atomic Context) bug</p>
    <p>Sleeping in atomic context is not allowed</p>
    <p>SAC bug can cause a system hang or crash at</p>
    <p>runtime</p>
    <p>A kind of concurrency bugs</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Why can a SAC bug cause a hang or crash?</p>
    <p>Interrupt Handler</p>
    <p>SLEEP</p>
    <p>acquire lock</p>
    <p>release lock</p>
    <p>acquire lock</p>
    <p>release lock</p>
    <p>acquire lock</p>
    <p>release lock</p>
    <p>Thread A Thread B Thread C</p>
    <p>CPU0 is spinning</p>
    <p>CPU1 is spinning</p>
    <p>No CPU is available</p>
    <p>to release the lock</p>
    <p>Lock is not available,</p>
    <p>continue spinning</p>
    <p>State1</p>
    <p>State2</p>
    <p>State3 State4</p>
    <p>State5</p>
    <p>State5</p>
    <p>DEADLOCK!!!</p>
    <p>Instruction N</p>
    <p>State1</p>
    <p>Instruction N+1</p>
    <p>Current Running Thread</p>
    <p>State2</p>
    <p>SLEEP</p>
    <p>State3</p>
    <p>State4 How to wake up?</p>
    <p>KERNEL PANIC!!!</p>
    <p>Hardware</p>
    <p>Interrupt</p>
    <p>Sleeping while holding a spinlock Sleeping in an interrupt handler</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Example fixed SAC bug</p>
    <p>Acquire a spinlock!</p>
    <p>Can sleep!</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Why do SAC bugs still occur in kernel modules?</p>
    <p>Determining whether an operation can sleep requires</p>
    <p>OS-specific knowledge</p>
    <p>SAC bugs are only occasionally triggered at runtime</p>
    <p>Multiple levels of function calls should be considered</p>
    <p>=&gt; Most SAC bugs are manually found by code review</p>
  </div>
  <div class="page">
    <p>Goal</p>
    <p>Detect SAC bugs in kernel modules</p>
    <p>Automation</p>
    <p>Accuracy</p>
    <p>Efficiency</p>
    <p>Bug fixing</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>DSAC</p>
    <p>LLVM-based static analysis tool</p>
    <p>Detect SAC bugs and recommend bug-fixing patches</p>
    <p>Source Files</p>
    <p>+</p>
    <p>+ Global LLVM</p>
    <p>Bytecode</p>
    <p>OS Kernel</p>
    <p>DSAC Code</p>
    <p>Compiler Function Extractor</p>
    <p>Bug Detector</p>
    <p>Patch Generator</p>
    <p>Preliminary Patches</p>
    <p>Preliminary Patches</p>
    <p>Intermediate Results</p>
    <p>Preliminary Patches</p>
    <p>Preliminary Patches</p>
    <p>Bug Reports Preliminary Patches</p>
    <p>Preliminary Patches</p>
    <p>Preliminary Patches</p>
    <p>Preliminary Patches</p>
    <p>Preliminary Patches</p>
    <p>Sleep-able Functions</p>
    <p>Bug Filter</p>
    <p>Kernel Module(s)</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Code coverage, accuracy and time</p>
    <p>Static analysis? Runtime analysis?</p>
    <p>Extract sleep-able functions</p>
    <p>Require OS-specific knowledge?</p>
    <p>Filter out repeated and false bugs</p>
    <p>How to check?</p>
    <p>Bug fixing recommendation</p>
    <p>Needs manual work?</p>
  </div>
  <div class="page">
    <p>Techniques</p>
    <p>Code coverage, accuracy and time</p>
    <p>Hybrid flow (flow-sensitive and -insensitive) analysis</p>
    <p>Extract sleep-able functions</p>
    <p>Heuristics-based extraction method</p>
    <p>Filter out repeated and false bugs</p>
    <p>Path-check filtering method</p>
    <p>Bug fixing recommendation</p>
    <p>Pattern-based method</p>
  </div>
  <div class="page">
    <p>Hybrid flow analysis</p>
    <p>Inter-procedural</p>
    <p>Context-sensitive</p>
    <p>Lock stack</p>
    <p>Interrupt flag</p>
    <p>Executed code path (basic blocks)</p>
    <p>Hybrid of flow-sensitive and -insensitive</p>
    <p>Flow-sensitive: contain spinlock related function calls</p>
    <p>in an interrupt handler</p>
    <p>Flow-insensitive: others</p>
  </div>
  <div class="page">
    <p>Hybrid flow analysis</p>
    <p>Analysis start</p>
    <p>Each call to spinlock acquiring function</p>
    <p>Entry of each interrupt handler function</p>
    <p>Analysis end</p>
    <p>Lock stack is empty and interrupt flag is FALSE</p>
    <p>Unroll loops and recursive calls once</p>
  </div>
  <div class="page">
    <p>Hybrid flow analysis</p>
    <p>Example</p>
    <p>MyFunc:</p>
    <p>FuncA:</p>
    <p>FuncB: Flow-sensitive</p>
    <p>Flow-insensitive</p>
    <p>Flow-sensitive</p>
    <p>(FuncA)</p>
    <p>(FuncB)</p>
  </div>
  <div class="page">
    <p>Hybrid flow analysis</p>
    <p>Example</p>
    <p>FuncB</p>
    <p>FuncA</p>
  </div>
  <div class="page">
    <p>Hybrid flow analysis</p>
    <p>Example</p>
    <p>FuncB</p>
    <p>FuncA</p>
    <p>Two useless paths</p>
    <p>are not analyzed</p>
  </div>
  <div class="page">
    <p>Heuristics-based extraction</p>
    <p>Identify whether a collected function can sleep</p>
    <p>Involves known sleep-able operation</p>
    <p>like msleep() call and GFP_KERNEL flag</p>
    <p>Contains comments suggesting sleep</p>
    <p>like may block and can sleep</p>
    <p>Call an already identified sleep-able function</p>
  </div>
  <div class="page">
    <p>Path-check filtering</p>
    <p>Why may repeated and false bugs occur?</p>
    <p>Some code paths may be repeatedly analyzed</p>
    <p>Neglect variable information and path conditions</p>
    <p>Check collected code path in hybrid flow analysis</p>
  </div>
  <div class="page">
    <p>Path-check filtering</p>
    <p>Filter out repeated bugs</p>
    <p>Entry and terminal basic blocks</p>
    <p>Sleep-able function name</p>
    <p>Filter out false bugs</p>
    <p>Check a function parameter whose name contains the</p>
    <p>keyword indicating it can sleep (can_sleep)</p>
    <p>Check the return value of a function like in_interrupt</p>
    <p>that is used to test atomic context</p>
  </div>
  <div class="page">
    <p>Pattern-based patch generation</p>
    <p>Four common patterns of fixing SAC bugs</p>
    <p>P1: sleep-able function  non-sleep function</p>
    <p>msleep()  mdelay()</p>
    <p>P2: sleep-able flag  non-sleep flag</p>
    <p>GFP_KERNEL  GFP_ATOMIC</p>
    <p>P3: move sleep-able function out of spinlock protection</p>
    <p>P4: replace spinlock with sleep-able lock</p>
    <p>Support</p>
    <p>DSAC supports P1 and P2</p>
    <p>Supporting P3 and P4 is future work</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Linux drivers</p>
    <p>Run on a common PC</p>
    <p>Linux-3.17.2 (released in October 2014)</p>
    <p>Linux-4.11.1 (released in May 2017)</p>
    <p>Make allyesconfig of x86</p>
    <p>Manually check the detected bugs</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Linux drivers</p>
    <p>Description 3.17.2 4.11.1</p>
    <p>Bug detection</p>
    <p>Filtered bugs 479,912 630,354</p>
    <p>Final bugs 215 340</p>
    <p>Real bugs 200 320</p>
    <p>Patch generation - 43</p>
    <p>Time usage 67m53s 84m10s</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Linux drivers</p>
    <p>Linux-3.17.2:</p>
    <p>Find 215 bugs, 200 are real</p>
    <p>=&gt; 50 have been fixed in Linux-4.11.1</p>
    <p>Linux-4.11.1:</p>
    <p>Find 340 bugs, 320 are real</p>
    <p>=&gt; 209 have been confirmed</p>
    <p>Recommend 43 patches to fix 82 bugs</p>
    <p>=&gt; 30 patches have been applied</p>
    <p>False positives: path condition is not checked</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Linux drivers</p>
    <p>SCSI and network drivers have 58% of detected bugs</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Other kernel modules</p>
    <p>Linux network and filesystem modules</p>
    <p>FreeBSD and NetBSD kernels</p>
    <p>Description Linux net &amp; fs FreeBSD-11.0 NetBSD-7.1</p>
    <p>Bug detection</p>
    <p>Filtered bugs 682,081 508 2,414</p>
    <p>Final bugs 42 39 7</p>
    <p>Real bugs 39 35 7</p>
    <p>Patch generation 5 10 3</p>
    <p>Time usage 32m45s 49m12s 43m38s</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Other kernel modules</p>
    <p>Find 88 bugs, and 81 are real</p>
    <p>=&gt; 63 have been confirmed</p>
    <p>Recommend 18 patches to fix 59 bugs</p>
    <p>=&gt; 13 have been applied</p>
  </div>
  <div class="page">
    <p>Comparison</p>
    <p>Coccinelle BlockLock checker [1, 2]</p>
    <p>Find 31 bugs for Linux-2.6.33 drivers that are in x86</p>
    <p>config</p>
    <p>25 are real, and 6 are false</p>
    <p>Do not rely on configuration</p>
    <p>DSAC</p>
    <p>Find 228 bugs for Linux-2.6.33 drivers of x86 config</p>
    <p>208 are real, and 20 are false</p>
    <p>53 bugs are equivalent to 23 bugs found by BlockLock</p>
    <p>Rely on configuration</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Function pointer</p>
    <p>Field-based analysis?</p>
    <p>Repeated analysis</p>
    <p>Summary-based analysis?</p>
    <p>Path condition</p>
    <p>Symbolic-execution-like analysis?</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>DSAC approach: effective and automated</p>
    <p>Hybrid flow analysis</p>
    <p>Heuristics-based extraction method</p>
    <p>Path-check filtering method</p>
    <p>Pattern-based method</p>
    <p>Finds 401 new real bugs in Linux, FreeBSD and</p>
    <p>NetBSD</p>
    <p>Overall false positive rate is about 6%</p>
  </div>
</Presentation>
