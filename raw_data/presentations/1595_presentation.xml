<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PEN: Design and Evaluation of Partial-Erase for 3D NAND-Based High Density SSDs Chun-Yi Liu, Jagadish B. Kotra, *Myoungsoo Jung, Mahmut T. Kandemir</p>
    <p>The Pennsylvania State University, *Yonsei University</p>
  </div>
  <div class="page">
    <p>Outline  Introduction and Background</p>
    <p>Motivation: Impact on Block Size</p>
    <p>Controller Hardware for Partial-Erase</p>
    <p>FTL for Partial-Erase</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>The trend of NAND Flash</p>
    <p>The issues of increasing 2D NAND flash density (smaller cells)  Reliability - various serious disturbances</p>
    <p>Program (write) disturbances, read disturbances, and retention errors.</p>
    <p>Performance  longer program (write) time</p>
    <p>Cells are more sensitive to the program voltage.</p>
    <p>3D NAND can highly mitigate those issues.  Larger stakability cells</p>
    <p>Increasing layers to increase density.</p>
    <p>32 -&gt; 48 -&gt; 64 -&gt; 96 layers</p>
    <p>3D NAND will dominate MLC / TLC</p>
    <p>NAND market. 0 20 40 60 80</p>
  </div>
  <div class="page">
    <p>Overview of 2D/3D NAND-based SSDs</p>
    <p>SSD controller</p>
    <p>SSD</p>
    <p>DRAM</p>
    <p>Flash Package Y</p>
    <p>Flash Package 0.</p>
    <p>.</p>
    <p>.</p>
    <p>. Die 0</p>
    <p>Plane 0 Plane 1</p>
    <p>Channel 0 Channel 1 Channel X</p>
    <p>Host interface: NVMe, PCIe, SATA</p>
    <p>P-0 P-1</p>
    <p>P-Z</p>
    <p>Block W</p>
    <p>P-0 P-1</p>
    <p>P-Z</p>
    <p>Block 0</p>
    <p>Plane Flash Package</p>
    <p>P-0</p>
    <p>P-1</p>
    <p>P-2</p>
    <p>P-3</p>
    <p>Bit 1 Bit 2 Bit n</p>
    <p>P-0</p>
    <p>P-4</p>
    <p>P-8</p>
    <p>P-12</p>
    <p>Bit 0 Bit 1 Bit n</p>
    <p>10 11</p>
  </div>
  <div class="page">
    <p>Plane 0</p>
    <p>Plane</p>
    <p>Abstract</p>
    <p>View</p>
    <p>Block Layer</p>
    <p>View</p>
    <p>SG  select gate</p>
    <p>CG  control gate</p>
    <p>ST  select transistor</p>
    <p>P-0</p>
    <p>P-4</p>
    <p>P-8</p>
    <p>P-12</p>
    <p>Bit 0 Bit 1 Bit n</p>
    <p>Slice 0</p>
    <p>Lower ST</p>
    <p>Page Decoder</p>
    <p>USG 3</p>
    <p>CG 0</p>
    <p>CG 3</p>
    <p>LSG</p>
    <p>Block Physical View</p>
    <p>Upper</p>
    <p>ST</p>
    <p>P-0 P-1 P-2 P-3</p>
    <p>P-14</p>
    <p>Block N</p>
    <p>P-15</p>
    <p>P-0 P-1 P-2 P-3</p>
    <p>P-14</p>
    <p>Block 0</p>
    <p>P-15</p>
    <p>Lower ST</p>
    <p>layer</p>
    <p>Cell layer 3 Cell layer 2 Cell layer 1 Cell layer 0</p>
    <p>Upper ST</p>
    <p>layer</p>
    <p>Block 0</p>
    <p>The Big Block Problem</p>
    <p>Cross-layer signals: They are difficult to shrink.</p>
    <p>All Read/write/erase operations are controlled by the top layer.</p>
    <p>Multiple slices have to share the control circuits due to cross-layer signals. As the number of layers (n) increases, pages per page in 3D NAND increases in O(n2), not only O(n).</p>
    <p>To read/write P-4: CG 1 and USG 0 have to be set to proper value.</p>
    <p>USG 0</p>
    <p>CG 1</p>
  </div>
  <div class="page">
    <p>SSD Management Software: Flash Translation Layers (FTLs)</p>
    <p>NAND flash properties:  Read/Write operation: at a page unit</p>
    <p>Typically, hundred of microsecond (us)</p>
    <p>Erase: at a block unit</p>
    <p>Typically, milliseconds (ms) or tens of ms</p>
    <p>Out-place-update:</p>
    <p>Flash Translation Layers (FTLs):  Address mapping</p>
    <p>Maintain a mapping table</p>
    <p>Garbage Collection (GC)</p>
    <p>Different FTLs have their own GC algorithms.</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block 0</p>
    <p>Page-15</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block 0</p>
    <p>Page-15</p>
    <p>In-place-update</p>
    <p>Out-place-update</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block 0</p>
    <p>Page-15</p>
    <p>Page-0 Page-1</p>
    <p>Page-14</p>
    <p>Block 0</p>
    <p>Page-15</p>
    <p>Mapping table required</p>
    <p>Update Page-0</p>
    <p>Invalidate</p>
  </div>
  <div class="page">
    <p>Flash Translation Layers (FTLs)</p>
    <p>Three categories of FTLs:  Page-level mapping:</p>
    <p>Pro: providing the best performance</p>
    <p>Con: huge mapping table required</p>
    <p>1 TB SSDs requires 1 GB mapping table.</p>
    <p>Block-level mapping:</p>
    <p>Pro: small mapping table</p>
    <p>Con: performance degradation</p>
    <p>A well-known implementation: NFTL</p>
    <p>Hybrid mapping:</p>
    <p>Combining the best of previous two mappings</p>
    <p>We focus on the Superblock FTL.</p>
    <p>Huge Mapping table</p>
    <p>Logical address</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block 0</p>
    <p>Page-15</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block N</p>
    <p>Page-15</p>
    <p>.</p>
    <p>Page-level mapping</p>
    <p>Small Mapping table</p>
    <p>Logical address</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block 0</p>
    <p>Page-15</p>
    <p>Page-0</p>
    <p>Page-1</p>
    <p>Page-14</p>
    <p>Block N</p>
    <p>Page-15</p>
    <p>.</p>
    <p>Block-level mapping 7</p>
  </div>
  <div class="page">
    <p>Introduction of NFTL</p>
    <p>D-block (Data-block)</p>
    <p>Mapping table</p>
    <p>Logical address</p>
    <p>Block Index (block x)</p>
    <p>Calculation Block x</p>
    <p>Write request to a new address</p>
    <p>D-block</p>
    <p>Update request to the same address The data is updated (logged) in U-block.</p>
    <p>U-block (Update-block)</p>
    <p>D-block</p>
    <p>Read request to the same address (We may need to sequentially search U-block.)</p>
    <p>U-block</p>
    <p>GC scenario 1: fully-utilized U-block</p>
    <p>D-block U-block</p>
    <p>Write Request</p>
    <p>Read Request</p>
    <p>GC scenario 2: unpaired D-block (The number of U-blocks is mush smaller than that of D-blocks.)</p>
    <p>D-block</p>
    <p>Write Request</p>
    <p>Allocate a U-block</p>
    <p>Write Request</p>
  </div>
  <div class="page">
    <p>Chip interface</p>
    <p>Free page Valid page Invalid page</p>
    <p>D-block U-block (block pair)</p>
    <p>Free block</p>
    <p>Read page to controller</p>
    <p>Step-1: Read valid page</p>
    <p>D-block U-block Step-2:Write valid page &amp;</p>
    <p>invalidate page</p>
    <p>Write page to free block</p>
    <p>Repeat steps (1) &amp; (2) until no valid pages in</p>
    <p>D/U-blocks D-block U-block</p>
    <p>Step-3: Erase D/U-block</p>
    <p>New D-block Step-4: Update</p>
    <p>mapping table(FTL)</p>
    <p>WRWWWW</p>
    <p>I/O Request Queue StalledStalled</p>
    <p>Chip 0</p>
    <p>SSD ControllerVictim blocks</p>
    <p>Free blockFree block</p>
    <p>Introduction of NFTL (contd)  NFTL GC (Merge) overview</p>
    <p>The number of copied valid pages increase, as the number of pages per block increase.</p>
  </div>
  <div class="page">
    <p>Introduction of Superblock FTL  Superblock FTL GC overview</p>
    <p>Intra-superblock GC (similar to fully-utilized U-block in NFTL)</p>
    <p>Inter-superblock GC (similar to unpaired D-block in NFTL)</p>
    <p>A superblock</p>
    <p>A superblock</p>
    <p>Allocate a</p>
    <p>block</p>
  </div>
  <div class="page">
    <p>Outline  Introduction and Background</p>
    <p>Motivation: Impact on Block Size</p>
    <p>Controller Hardware for Partial-Erase</p>
    <p>FTL for Partial-Erase</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Impacts on block size  We use four iso-capacity SSD configurations to show the impacts.</p>
    <p>To prevent that the capacity affects the GC overheads (GC scenario 2 in NFTL)</p>
    <p>(blocks per plane, pages per block)  (15014, 72), (7552, 144), (3776, 288), (1888, 576)</p>
    <p>As number of pages per block increases, the time spending in reading/writing valid pages during GC increases.</p>
    <p>prn_1 proj_0 proj_1 proj_2 usr_1 usr_2</p>
    <p>W ri</p>
    <p>te L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>( in</p>
    <p>m</p>
    <p>se c)</p>
    <p>Spare Area Read Write GC Spare Area Read GC Read GC Write GC Erase</p>
  </div>
  <div class="page">
    <p>Impacts on block size (contd)</p>
    <p>The write amplifications slightly increase.</p>
    <p>GC triggered frequencies increase due to a few number of blocks.</p>
    <p>W ri</p>
    <p>te A</p>
    <p>m p</p>
    <p>.</p>
    <p>Blk_72 Blk_144 Blk_288 Blk_576</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>G C</p>
    <p>s (i</p>
    <p>n</p>
    <p>m il</p>
    <p>li o</p>
    <p>n )</p>
    <p>Blk_72 Blk_144 Blk_288 Blk_576</p>
  </div>
  <div class="page">
    <p>We propose PEN (Partial-Erase for 3D NAND flash) to address the 3D NAND performance degradation.  The number of copied valid pages can be reduced.</p>
    <p>The PEN system contains two parts:  Hardware part:</p>
    <p>Partial-erase operation</p>
    <p>Indexing the partial-blocks</p>
    <p>Software part:</p>
    <p>FTL for partial-erase</p>
    <p>M-merge</p>
    <p>Program disturbance</p>
    <p>Wear-leveling</p>
    <p>Overview of Partial-Erase Operation</p>
    <p>Free page</p>
    <p>Valid page</p>
    <p>Invalid page</p>
    <p>Block-Erase Partial-Erase</p>
    <p>Baseline Proposed PEN system 14</p>
  </div>
  <div class="page">
    <p>Outline  Introduction and Background</p>
    <p>Motivation: Impact on Block Size</p>
    <p>Controller Hardware for Partial-Erase</p>
    <p>FTL for Partial-Erase</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Controller Hardware for Partial-Erase</p>
    <p>PEN enables the partial-erase by setting proper control signals while erase operation is performed.  E.g. CG0~CG3 in the figure.</p>
    <p>The minimum unit is a layer of page.</p>
    <p>In the bottom figure, the layer (Page-4 ~ Page7) controlled by CG1 is erased.</p>
    <p>The partial-erase introduce additional program disturbances.  E.g. upper layer (Page-0 ~ Page-3) and lower layer</p>
    <p>(Page-8 ~ Page-11).</p>
    <p>P-0 P-4</p>
    <p>P-8</p>
    <p>P-12</p>
    <p>Bit 0 Bit 1 Bit n</p>
    <p>Slice 0 Block 0</p>
    <p>12</p>
    <p>10 11</p>
    <p>Floating</p>
    <p>Floating</p>
    <p>Floating</p>
    <p>Floating</p>
    <p>Partial Erase</p>
    <p>Floating</p>
    <p>P-0 P-4</p>
    <p>P-8</p>
    <p>P-12</p>
    <p>Bit 0 Bit 1 Bit n</p>
    <p>Slice 0</p>
    <p>12</p>
    <p>10 11</p>
    <p>Floating</p>
    <p>Floating</p>
    <p>Block Erase</p>
    <p>Program Disturbance</p>
    <p>Block 0</p>
  </div>
  <div class="page">
    <p>Hardware Overheads &amp; Indexing the Partial Blocks</p>
    <p>Start Address Address Address EndCommand Ignored Block Index</p>
    <p>Block Index Block-Erase (baseline) Partial-Erase PB Index</p>
    <p>P - 0 1 2 3</p>
    <p>P - 4 5 6 7</p>
    <p>P - 8 9</p>
    <p>P - 12 13 14 15</p>
    <p>(426, 5)</p>
    <p>Block Index</p>
    <p>PB Index</p>
    <p>*2</p>
    <p>*2 +1</p>
    <p>Array (plane 0)</p>
    <p>Array (plane 1)</p>
    <p>B lo</p>
    <p>ck D</p>
    <p>e co</p>
    <p>d e</p>
    <p>r</p>
    <p>Page buffers and column decoder Peripheral circuits</p>
    <p>Charge Pump Charge Pump Command logic and</p>
    <p>Analog Circuits</p>
    <p>Top view of 3D NAND Flash Chip</p>
    <p>PD PD</p>
    <p>Page Decoder (PD)</p>
    <p>Control Logic</p>
    <p>High voltage switch</p>
    <p>High voltage switch</p>
    <p>Control logics in page decoders(PD) need to be duplicated. Partial-block index mechanism.</p>
    <p>Partial-erase command format.</p>
  </div>
  <div class="page">
    <p>Outline  Introduction and Background</p>
    <p>Motivation: Impact on Block Size</p>
    <p>Controller Hardware for Partial-Erase</p>
    <p>FTL for Partial-Erase</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Partial Block vs. Smaller Block</p>
    <p>Pretending the block size is 72 pages, instead of 576 pages.</p>
    <p>The drawback of smaller block (72 pages) through the partialerase.  8x of the mapping table</p>
    <p>Reducing the block size will increase the number of blocks.</p>
    <p>Inefficient partial-erase operations</p>
    <p>Not aware of disturbance</p>
  </div>
  <div class="page">
    <p>Different Block Pair Scenarios</p>
    <p>(1)</p>
    <p>(2)</p>
    <p>(3)</p>
    <p>How/Should we use the partial-erase in the following scenarios?</p>
    <p>Partial-erases may not be beneficial.</p>
    <p>Partial-erase may still introduce valid page copy.</p>
    <p>(4)</p>
    <p>Assume that minimum partial-block has 18 pages.</p>
    <p>Deciding partial-block size is important.</p>
    <p>Should select 72 + 36 pages ,not 36 + 36 + 36 pages.</p>
  </div>
  <div class="page">
    <p>M-Merge (Modified-Merge) Algorithm</p>
    <p>Restore operation:  (1) copy out valid pages</p>
    <p>(2) partial-erase operation</p>
    <p>(3) copy back valid pages</p>
    <p>D</p>
    <p>U</p>
    <p>Restore (PB 9)</p>
    <p>(2) partial-erase (3) Copy back valid pages</p>
    <p>D</p>
    <p>U</p>
    <p>D</p>
    <p>U</p>
    <p>Restore (PB 14)</p>
    <p>(2) partial-erase (3) Copy back valid pages (1) Copy out valid pages</p>
    <p>D U D U</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>M-Merge Algorithm (contd)  Recursive relation to decide the restored partial-blocks (pb)</p>
    <p>= min(  ,    2 + [  2 + 1])</p>
    <p>If ( pb = the smallest PB )   =</p>
    <p>Check whether the Cost(M-Merge) &lt; cost(Merge)</p>
    <p>P - 0 1 2 3</p>
    <p>P - 4 5 6 7</p>
    <p>P - 8 9</p>
    <p>P - 12 13 14 15</p>
    <p>Restore(PB 1) = 12 copies + 1 erase + 16 copies Restore(PB 2) = 4 copies + 1 erase + 8 copies Restore (PB 5) = 1 erase + 4 copies Restore (other PBs) = 0</p>
    <p>*2</p>
    <p>*2+1</p>
    <p>Restore(PB 2) &gt; cost[4] + cost[5]</p>
    <p>*2</p>
    <p>*2+1</p>
    <p>Restore(PB 1) &gt; cost[2] + cost[3]</p>
    <p>Cost[PB 1] is the final cost of the M-merge. Merge algorithm will restore PBs 3, 4, 5 to complete merge. Note restore(PB 3) and restore(PB 4) are 0.</p>
    <p>Calculate Restore costs</p>
  </div>
  <div class="page">
    <p>M-Merge for Block-level Mapping (NFTL)</p>
    <p>M-Merge use the recursive relation to decide the restored partial-block.  PBs 5, 6, 8, 9, 14, and 15</p>
    <p>Apply restore to those PBs  PBs 5, 6, 8, and 15 can be skipped.</p>
    <p>Free page</p>
    <p>Valid page Invalid page</p>
    <p>D,U=&gt;Victim blocks M-Merge</p>
    <p>(1) Skipped (5, 6, 8, 15)</p>
    <p>(3) Restore (PB 14)</p>
    <p>(2) Restore (PB 9)</p>
    <p>D D DU</p>
    <p>U</p>
    <p>D</p>
    <p>U</p>
    <p>D</p>
    <p>U</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>M-Merge with Program Disturbance</p>
    <p>To prevent the data corruption, M-Merge restored the previous disturbed pages.</p>
    <p>At time t2 and t4, neighbored partial-blocks are erased.</p>
    <p>To prevent wear-unleveling, a block can only be M-Merged limited times.</p>
    <p>D</p>
    <p>To be disturbed Valid page To be erased (PB 9) To be erased in case of data corruption</p>
    <p>t1 t2 t3 t4 time</p>
    <p>P-0 P-4</p>
    <p>P-8</p>
    <p>P-12</p>
    <p>Bit 0 Bit 1 Bit n</p>
    <p>Slice 0 Block 0</p>
    <p>12</p>
    <p>10 11</p>
    <p>Partial Erase</p>
    <p>Program Disturbance</p>
    <p>Block Erase</p>
    <p>(Merge)</p>
    <p>t5</p>
  </div>
  <div class="page">
    <p>M-Merge for Hybrid Mapping (Superblock FTL)</p>
    <p>Superblock FTL has no D-/U-block concept  Before M-Merge, we assign D-/U-block-sets, based on number of valid</p>
    <p>pages.</p>
    <p>A superblock</p>
    <p>D-block-set</p>
    <p>U-block-set</p>
  </div>
  <div class="page">
    <p>Outline  Introduction and Background</p>
    <p>Motivation: Impact on Block Size</p>
    <p>Controller Hardware for Partial-Erase</p>
    <p>FTL for Partial-Erase</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental Setup  We use 12 write-dominant workload traces.</p>
    <p>Four metrics  Average write latency</p>
    <p>Write amplification</p>
    <p>AEP  the average number of erase operations per page</p>
    <p>VEP  the variance number of erase operations per page</p>
    <p>Typically, AEB (average number of erase operation per block) are used.</p>
    <p>Due to the partial-erase operation, a finer measurement is required.</p>
  </div>
  <div class="page">
    <p>NFTL Results</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d W</p>
    <p>ri te</p>
    <p>La</p>
    <p>te n</p>
    <p>cy</p>
    <p>Baseline PEN</p>
    <p>W ri</p>
    <p>te A</p>
    <p>m p</p>
    <p>. Baseline PEN</p>
    <p>A E</p>
    <p>P</p>
    <p>Baseline PEN</p>
    <p>V E</p>
    <p>P</p>
    <p>Baseline PEN</p>
  </div>
  <div class="page">
    <p>Sensitivity Results</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d W</p>
    <p>ri te</p>
    <p>La</p>
    <p>te n</p>
    <p>cy</p>
    <p>Baseline L=1 2 3 4 5 6</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d W</p>
    <p>ri te</p>
    <p>La te</p>
    <p>n cy</p>
    <p>Baseline PEN without disturbance PEN</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d W</p>
    <p>ri te</p>
    <p>La te</p>
    <p>n cy</p>
    <p>Baseline Unlimited 16 4</p>
    <p>V E</p>
    <p>P</p>
    <p>Baseline Unlimited 16 4</p>
  </div>
  <div class="page">
    <p>Superblock FTL Results</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d W</p>
    <p>ri te</p>
    <p>La</p>
    <p>te n</p>
    <p>cy</p>
    <p>W ri</p>
    <p>te A</p>
    <p>m p</p>
    <p>. 4_5_BSL 4_5_PEN 4_8_BSL 4_8_PEN</p>
    <p>A E</p>
    <p>P</p>
    <p>V E</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Related Works</p>
    <p>Partial-erase proposals  Hardware</p>
    <p>2D NAND partial-erase proposal  not beneficial due to a smaller block</p>
    <p>Partial-block erase (PBE)  reduce the whole capacity</p>
    <p>Subblock management  provide only three partial-blocks</p>
    <p>Software</p>
    <p>Subblock-erase  designed for page-level mapping</p>
    <p>Partial-GC proposals  Those redistribute the GC overheads to idle time, cannot reduce GC overheads.</p>
    <p>Those can be combined with our partial-erase operation.</p>
  </div>
  <div class="page">
    <p>Conclusion  we propose and evaluate a novel partial-erase based PEN architecture in</p>
    <p>emerging 3D NAND flashes, which minimizes the number of valid pages copied during a GC operation.</p>
    <p>To show the effectiveness of our proposed partial-erase operation, we introduce our M-Merge algorithm that employs our partial-erase operation for NFTL and Superblock FTL.</p>
    <p>Our extensive experimental evaluations show that the average write latency under the proposed PEN system is reduced up to 47.9%.</p>
  </div>
  <div class="page">
    <p>Q &amp; A</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
</Presentation>
