<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Tolera'ng Overload A/acks Against Packet Capturing Systems</p>
    <p>Antonis Papadogiannakis FORTH-ICS, Greece Michalis Polychronakis Columbia University, USA Evangelos P. Markatos FORTH-ICS, Greece</p>
    <p>USENIX ATC 2012</p>
  </div>
  <div class="page">
    <p>Network Traffic Monitoring Applica'ons</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 2</p>
    <p>Network-level intrusion detecGon  Network traffic classificaGon  Next-generaGon firewalls</p>
    <p>Based on packet capturing systems  Need to analyze all packets at real-Gme on mulG-Gigabit links</p>
  </div>
  <div class="page">
    <p>What Happens in Case of Overload?</p>
    <p>Short-term traffic or processing bursts  Handled with limited buffering in main memory</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 3</p>
    <p>When memory buffer becomes full, excess packets are randomly dropped</p>
    <p>Important packets may be lost  e.g. missed aUacks</p>
  </div>
  <div class="page">
    <p>Even Worse: Overload A/acks</p>
    <p>Algorithmic complexity aUacks  Exploit the differences between average case and worst case complexity</p>
    <p>Low bandwidth aUacks  Each packet results to orders of magnitude slower processing</p>
    <p>Traffic overload aUack  Higher rates than the system can handle</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 4</p>
  </div>
  <div class="page">
    <p>Exis'ng Solu'ons</p>
    <p>Provisioning  Tune the system for worst case scenarios</p>
    <p>Thresholds  Algorithmic soluGons</p>
    <p>Reduce the difference between average and worst case performance</p>
    <p>SelecGve discarding  Discard the less important packets under overload</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 5</p>
  </div>
  <div class="page">
    <p>Our Approach: Selec,ve Packet Paging</p>
    <p>Two layer memory management  Excess packets are buffered to secondary storage  All packets are analyzed</p>
    <p>DetecGon with randomized Gmeout interval  Detects malicious packets that slowdown the system</p>
    <p>Send these packets to secondary storage</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 6</p>
  </div>
  <div class="page">
    <p>M4</p>
    <p>Packet Paging: Two-layer Memory Management</p>
    <p>Memory Buffer</p>
    <p>Disk Buffer</p>
    <p>D2 D3 D4 D5 D6 D7 D8</p>
    <p>Packet Receive Index (bitmap)</p>
    <p>M: packet stored in memory</p>
    <p>D: packet stored in disk</p>
    <p>M1 M2 M3 M4</p>
    <p>D M M M M</p>
    <p>D1</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>Modern disks  Three orders of magnitude more storage than main memory</p>
    <p>Disk throughput increases, mulGple disks organized in RAID0</p>
    <p>Packet capturing and storing thread has higher priority than packet processing thread</p>
    <p>Disk I/O thread prefetches packets from disk and opGmizes throughput</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 8</p>
    <p>Packet Paging: Two-layer Memory Management</p>
  </div>
  <div class="page">
    <p>Selec,ve Packet Paging</p>
    <p>With packet paging, both benign and malicious packets are buffered to disk  Increased delay for benign packets</p>
    <p>With selec,ve packet paging only malicious packets are buffered to disk  Benign packets do not experience any delay  Malicious packets experience almost the same delay</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 9</p>
  </div>
  <div class="page">
    <p>Malicious Packet Detec'on</p>
    <p>Malicious packets: packets with unusually high processing Gmes</p>
    <p>The problem: detecGng malicious packets that slowdown the system with minimum overhead</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 10</p>
  </div>
  <div class="page">
    <p>USENIX ATC 2012 papadog@ics.forth.gr 11</p>
    <p>read_timestamp();</p>
    <p>process_packet();</p>
    <p>read_timestamp();</p>
    <p>User level, not interrupt driven Problem1: the packet cannot be evicted</p>
    <p>Problem2: measures the total system Gme, not applicaGons CPU Gme</p>
  </div>
  <div class="page">
    <p>USENIX ATC 2012 papadog@ics.forth.gr</p>
    <p>set_timer(interval);</p>
    <p>process_packet();</p>
    <p>Kernel based, interrupt driven, Gmer expiraGon based on applicaGons CPU Gme</p>
    <p>Problem 1: runGme overhead for secng a Gmer per packet</p>
    <p>Problem 2: a constant or predictable interval can be used by aUackers to evade detecGon</p>
  </div>
  <div class="page">
    <p>Randomized Timeout Interval</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr</p>
    <p>set_timer(random interval);</p>
    <p>process_packets();</p>
    <p>The Gmeout interval is chosen randomly from [low, high]</p>
    <p>At Gmer expiraGon: check if the same packet is being processed</p>
  </div>
  <div class="page">
    <p>Detec'on Probability</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 14</p>
    <p>)(2 )(</p>
    <p>(det) 2</p>
    <p>lowhighd lowd</p>
    <p>td da</p>
    <p>P</p>
    <p>+</p>
    <p>=</p>
    <p>a</p>
    <p>is the average processing Gme of benign packets is the average processing Gme of aUack packets is the percentage of aUack packets d t</p>
    <p>Probability of detecGng an aUack afer N Gmeouts: NP(det))1(1  approaches 1 very</p>
    <p>fast Average detecGon Gme: 1(det)/1 += PT Gmeouts 2/)( lowhighT  s</p>
  </div>
  <div class="page">
    <p>Detec'on Time</p>
    <p>low=50 s, high=1000 s</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr</p>
    <p>A/ack detected within 10 ms for 100% a/ack packets and 200 s processing delay A/ack detected within 170 ms</p>
    <p>for 25% a/ack packets and 100 s processing delay</p>
  </div>
  <div class="page">
    <p>Implementa'on</p>
    <p>Within the popular libpcap packet capture library</p>
    <p>ExisGng applicaGons can use selecGve packet paging without code modificaGons</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 16</p>
  </div>
  <div class="page">
    <p>Experimental Evalua'on</p>
    <p>Two experiments  Algorithmic complexity aUack against Snorts regular expression matching using excessive backtracks</p>
    <p>Traffic overload aUack against Snort</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 17</p>
  </div>
  <div class="page">
    <p>Algorithmic Complexity A/ack: Dropped Packets</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 18</p>
    <p>For 104 cra^ed packets per minute pcap loses more than 80% of the packets</p>
    <p>Only the algorithmic a/ack packets are buffered to disk by SPP</p>
    <p>No packet dropped with SPP for up to 106 cra^ed packets per minute</p>
  </div>
  <div class="page">
    <p>Algorithmic Complexity A/ack: Detected A/acks</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 19</p>
    <p>Snort on top of the original pcap misses all a/acks for 105 cra^ed packets/minute</p>
    <p>Snort on top of SPP detects all a/acks for rates up to 106 packets/ minute</p>
  </div>
  <div class="page">
    <p>Traffic Overload A/ack: Dropped Packets</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 20</p>
    <p>For 2 Gbit/s traffic burst the original pcap drops 53% of the packets</p>
    <p>Pcap with SPP drops no packets for traffic bursts up to 2 Gbit/s</p>
    <p>Dropped packets with original pcap are buffered to disk with SPP</p>
  </div>
  <div class="page">
    <p>Traffic Overload A/ack: Detected A/acks</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 21</p>
    <p>For 2 Gbit/s burst rate Snort with original pcap miss 32.5% of the a/acks</p>
    <p>Snort with SPP misses no a/ack for burst rate up to 2 Gbit/sec</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Difficulty to predict and avoid overloads  As monitoring applicaGons become more complex, they may be more vulnerable to algorithmic a/acks</p>
    <p>SelecKve Packet Paging: generic defense against unknown algorithmic aUacks and unpredictable overloads  Two-layer memory management, using secondary storage  DetecGon based on randomized Gmers</p>
    <p>Disk throughput increase as network speeds increase  Disks can be organized in RAID0</p>
    <p>USENIX ATC 2012 papadog@ics.forth.gr 22</p>
  </div>
  <div class="page">
    <p>Tolera'ng Overload A/acks Against Packet Capturing Systems</p>
    <p>Antonis Papadogiannakis papadog@ics.forth.gr Michalis Polychronakis mikepo@cs.columbia.edu Evangelos P. Markatos markatos@ics.forth.gr</p>
  </div>
</Presentation>
