<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Finding a needle in Haystack:</p>
    <p>Facebooks photo storage</p>
    <p>Doug Beaver, Sanjeev Kumar, Harry C. Li, Jason Sobel, Peter Vajgel</p>
  </div>
  <div class="page">
    <p>Photos @ Facebook</p>
    <p>April 2009 Current</p>
    <p>Total</p>
    <p>Upload Rate 220 million photos / week</p>
    <p>Serving Rate 550,000 images / sec 1 million images / sec</p>
  </div>
  <div class="page">
    <p>NFS based Design</p>
    <p>Browser</p>
    <p>Web</p>
    <p>Server</p>
    <p>CDN</p>
    <p>Photo Store</p>
    <p>Server</p>
    <p>Photo Store</p>
    <p>Server</p>
    <p>NAS NAS NAS</p>
    <p>NFS</p>
  </div>
  <div class="page">
    <p>NFS based Design</p>
    <p>Typical website</p>
    <p>Small working set</p>
    <p>Infrequent access of old content</p>
    <p>~99% CDN hit rate</p>
    <p>Facebook</p>
    <p>Large working set</p>
    <p>Frequent access of old content</p>
    <p>80% CDN hit rate</p>
  </div>
  <div class="page">
    <p>NFS based Design</p>
    <p>Metadata bottleneck</p>
    <p>Each image stored as a file</p>
    <p>Large metadata size severely limits the metadata hit ratio</p>
    <p>Image read performance</p>
    <p>~10 iops / image read (large directories  thousands of files)</p>
    <p>~3 iops / image read (smaller directories  hundreds of files)</p>
    <p>~2.5 iops / image read (file handle cache)</p>
  </div>
  <div class="page">
    <p>Haystack based Design</p>
    <p>Browser</p>
    <p>Web</p>
    <p>Server</p>
    <p>CDN</p>
    <p>Haystack</p>
    <p>Directory</p>
    <p>Haystack Store</p>
    <p>Haystack</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Haystack Store</p>
    <p>Filesystem</p>
    <p>Haystack</p>
    <p>Storage</p>
    <p>Haystack Photo Server</p>
    <p>Replaces Storage and Photo Server in NFS based Design</p>
  </div>
  <div class="page">
    <p>Haystack Store</p>
    <p>Storage</p>
    <p>12x 1TB SATA, RAID6</p>
    <p>Filesystem</p>
    <p>Single ~10TB xfs filesystem</p>
    <p>Haystack</p>
    <p>Log structured, append only object store containing needles as</p>
    <p>object abstractions</p>
    <p>100 haystacks per node each 100GB in size</p>
  </div>
  <div class="page">
    <p>Haystack Store  Haystack file Layout</p>
    <p>Superblock</p>
    <p>Needle 1</p>
    <p>Needle 2</p>
    <p>Needle 3</p>
    <p>Header Magic Number</p>
    <p>Cookie</p>
    <p>Key</p>
    <p>Alternate Key</p>
    <p>Flags</p>
    <p>Size</p>
    <p>Data</p>
    <p>Footer Magic Number</p>
    <p>Data Checksum</p>
    <p>Padding</p>
  </div>
  <div class="page">
    <p>Haystack Store  Haystack Index File Layout</p>
    <p>Superblock</p>
    <p>Needle 1 index record</p>
    <p>Needle 2 index record</p>
    <p>Needle 3 index record</p>
    <p>Key</p>
    <p>Alternate Key</p>
    <p>Flags</p>
    <p>Offset</p>
    <p>Size</p>
  </div>
  <div class="page">
    <p>Haystack Store - Photo Server</p>
    <p>Accepts HTTP requests and translates them to corresponding Haystack</p>
    <p>operations</p>
    <p>Builds and maintains an incore index of all images in the Haystack</p>
    <p>32 bytes per photo (8 bytes per image vs. ~600 bytes per inode)</p>
    <p>~5GB index / 10TB of images</p>
  </div>
  <div class="page">
    <p>Read</p>
    <p>Lookup offset / size of the image in the incore index</p>
    <p>Read data (~1 iop)</p>
    <p>Multiwrite (Modify)</p>
    <p>Asynchronously append images one by one to the haystack file</p>
    <p>Flush haystack file</p>
    <p>Asynchronously append index records to the index file</p>
    <p>Flush index file if too many dirty index records</p>
    <p>Update incore index</p>
    <p>Haystack Store Operations</p>
  </div>
  <div class="page">
    <p>Delete</p>
    <p>Lookup offset of the image in the incore index</p>
    <p>Synchronously mark image as DELETED in the needle header</p>
    <p>Update incore index</p>
    <p>Compaction</p>
    <p>Infrequent online operation</p>
    <p>Create a copy of haystack skipping duplicates and deleted photos</p>
    <p>Haystack Store Operations</p>
  </div>
  <div class="page">
    <p>Haystack based Design</p>
    <p>Browser</p>
    <p>Web</p>
    <p>Server</p>
    <p>CDN</p>
    <p>Haystack</p>
    <p>Directory</p>
    <p>Haystack Store</p>
    <p>Haystack</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Logical to physical volume mapping</p>
    <p>3 physical haystacks (on 3 nodes) per one logical volume</p>
    <p>URL generation</p>
    <p>http://&lt;CDN&gt;/&lt;Cache&gt;/&lt;Node&gt;/&lt;Logical volume id, Image id&gt;</p>
    <p>Load Balancing</p>
    <p>Writes across logical volumes</p>
    <p>Reads across physical haystacks</p>
    <p>Caching strategy</p>
    <p>External CDN or Local cache?</p>
    <p>Haystack Directory</p>
  </div>
  <div class="page">
    <p>Haystack based Design - Photo Upload</p>
    <p>Browser</p>
    <p>Web</p>
    <p>Server</p>
    <p>CDN</p>
    <p>Haystack</p>
    <p>Directory</p>
    <p>Haystack Store</p>
    <p>Haystack</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Haystack based Design  Photo Download</p>
    <p>Browser</p>
    <p>Web</p>
    <p>Server</p>
    <p>CDN</p>
    <p>Haystack</p>
    <p>Directory</p>
    <p>Haystack Store</p>
    <p>Haystack</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Haystack  simple and effective storage system</p>
    <p>Optimized for random reads (~1 I/O per object read)</p>
    <p>Cheap commodity storage</p>
    <p>8,500 LOC (C++)</p>
    <p>2 engineers 4 months from inception to initial deployment</p>
    <p>Future work</p>
    <p>Software RAID6</p>
    <p>Limit dependency on external CDN</p>
    <p>Index on flash</p>
  </div>
  <div class="page">
    <p>Q&amp;A</p>
    <p>Thanks!</p>
  </div>
</Presentation>
