<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Montage: A Neural Network Language Model-Guided JavaScript Engine Fuzzer</p>
    <p>Suyoung Lee, HyungSeok Han, Sang Kil Cha, Sooel Son</p>
    <p>KAIST</p>
  </div>
  <div class="page">
    <p>Popularity of Web Browsers</p>
    <p>Source: https://www.statista.com/statistics/543218/worldwide-internet-users-by-browser/</p>
  </div>
  <div class="page">
    <p>Web browser</p>
    <p>JS engine</p>
    <p>JS Engine Vulnerabilities</p>
    <p>https://leeswimming.com</p>
    <p>$ pwd /home/user</p>
    <p>Critical security threat!</p>
    <p>Costs up to $500,000</p>
    <p>Source: https://zerodium.com/program.html</p>
  </div>
  <div class="page">
    <p>JS Engine Fuzzing</p>
    <p>eval('new Array( + v0 + ')');</p>
    <p>let v0 = new Array(0x10000);</p>
    <p>v0 = v0.fill(0x1234).join(', ');</p>
    <p>JS engine</p>
    <p>How can a fuzzer generate JS inputs?</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>- LangFuzz, IFuzzer, and GramFuzz</p>
    <p>- Combining AST subtrees extracted from JS seeds</p>
    <p>- jsfunfuzz</p>
    <p>- Applying JS grammar rules from scratch</p>
  </div>
  <div class="page">
    <p>- LangFuzz, IFuzzer, and GramFuzz</p>
    <p>- Combining AST subtrees extracted from JS seeds</p>
    <p>- jsfunfuzz</p>
    <p>- Applying JS grammar rules from scratch</p>
    <p>Previous Work  Building Blocks</p>
  </div>
  <div class="page">
    <p>Previous Work  Building Blocks</p>
    <p>Current AST All appendable building blocks</p>
    <p>They randomly select building blocks!</p>
  </div>
  <div class="page">
    <p>Patterns of Bug-triggering Code</p>
    <p>Bug-triggering JS code</p>
    <p>eval('new Array( + v0 + ')');</p>
    <p>let v0 = new Array(0x10000);</p>
    <p>v0 = v0.fill(0x1234).join(', ');</p>
    <p>Extracted Patterns</p>
  </div>
  <div class="page">
    <p>Patterns of Bug-triggering Code</p>
    <p>Extracted PatternsCurrent AST Building blocks</p>
    <p>Which building block is more likely to trigger JS engine bugs?</p>
  </div>
  <div class="page">
    <p>Study on JS Engine Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Functional Commonalities</p>
    <p>Study 1. Patches of 50 ChakraCore CVEs</p>
    <p>CVE-2017-0071</p>
    <p>CVE-2017-0141</p>
    <p>CVE-2017-0196</p>
    <p>CVE-2018-0953</p>
    <p>...</p>
    <p>Patches</p>
  </div>
  <div class="page">
    <p>Study 2. AST subtrees from two sets</p>
    <p>Syntactical Commonalities</p>
    <p>At August, 2016</p>
    <p>JS Test 1</p>
    <p>JS Test 2</p>
    <p>JS Test 2038</p>
    <p>...</p>
    <p>After August, 2016</p>
    <p>CVE-2016-3247</p>
    <p>CVE-2016-7203</p>
    <p>CVE-2018-0980</p>
    <p>...</p>
    <p>Extracted subtrees Extracted subtrees</p>
  </div>
  <div class="page">
    <p>Syntactical Commonalities</p>
    <p>Study 2. AST subtrees from two sets</p>
    <p>JS test from ChakraCore repo</p>
    <p>function f0() { use asm; const v0 = Math.fround(1); function f1() {</p>
    <p>var v1 = v0; var v2 = Math.fround(4);</p>
    <p>} return {f1: f1}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Syntactical Commonalities</p>
    <p>Study 2. AST subtrees from two sets</p>
    <p>function f0() { use asm; const v0 = 1.0; function f1() {</p>
    <p>var v1 = v0; var v0 = 0;</p>
    <p>} return f1;</p>
    <p>}</p>
    <p>PoC (CVE-2017-11911)</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>- Modeling of the relationships between AST subtrees</p>
    <p>- Mutating existing JS regression tests JS</p>
  </div>
  <div class="page">
    <p>Montage Overview</p>
    <p>JS</p>
    <p>Preprocessing</p>
    <p>A trained model</p>
    <p>AST mutation</p>
    <p>A sequence of fragments</p>
    <p>Training</p>
    <p>JS</p>
    <p>Seed JS</p>
  </div>
  <div class="page">
    <p>Preprocessing</p>
    <p>const v0 = 10;</p>
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>JavaScript AST</p>
  </div>
  <div class="page">
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST 18</p>
    <p>Preprocessing</p>
    <p>const v0 = 10; Pre-order traversal</p>
  </div>
  <div class="page">
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST 19</p>
    <p>Preprocessing</p>
    <p>const v0 = 10; Pre-order traversal</p>
  </div>
  <div class="page">
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST 20</p>
    <p>Preprocessing</p>
    <p>const v0 = 10; Pre-order traversal</p>
  </div>
  <div class="page">
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST 21</p>
    <p>Preprocessing</p>
    <p>const v0 = 10; Pre-order traversal</p>
  </div>
  <div class="page">
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST 22</p>
    <p>Preprocessing</p>
    <p>const v0 = 10; Pre-order traversal</p>
  </div>
  <div class="page">
    <p>const v0 = 10;</p>
    <p>A Sequence of Fragments</p>
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST</p>
  </div>
  <div class="page">
    <p>Global Compositional Relationship</p>
    <p>const v0 = 10;</p>
    <p>? ?</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST</p>
  </div>
  <div class="page">
    <p>vs. A Sequence of Tokens [1-3]</p>
    <p>const v0 = 10;</p>
    <p>A sequence of tokens</p>
    <p>const v0 = 10 ;</p>
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>JavaScript AST [1] Cummins et al. Compiler fuzzing through deep learning (ISSTA18). [2] Godefroid et al. Learn&amp;Fuzz: Machine learning for input fuzzing (ASE17). [3] Liu et al. DeepFuzz: Automatic generation of syntax valid C programs for fuzz testing (AAAI19).</p>
    <p>% of Valid JS code</p>
  </div>
  <div class="page">
    <p>Selecting Valid Fragments</p>
    <p>const v0 = 10;</p>
    <p>value</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>decl</p>
    <p>id init</p>
    <p>name</p>
    <p>Program</p>
    <p>VarDeclarator</p>
    <p>Identifier</p>
    <p>v0</p>
    <p>Literal</p>
    <p>const</p>
    <p>kind</p>
    <p>A sequence of fragmentsJavaScript AST</p>
    <p>VarDeclaration</p>
    <p>body</p>
    <p>Program VarDeclaration decl</p>
    <p>VarDeclaratorconst</p>
    <p>kind</p>
    <p>VarDeclaration</p>
    <p>VarDeclaration</p>
  </div>
  <div class="page">
    <p>Applicable to Any Language Models</p>
    <p>const v0 = 10;</p>
    <p>A sequence of fragments</p>
    <p>Markov [5]</p>
    <p>LSTM [4]</p>
    <p>Language models</p>
    <p>[4] Hochreiter et al. Long short-term memory. Neural Computation, 9(8), 1997. [5] Andrey A. Markov. An Example of Statistical Investigation of the Text Eugene Onegin</p>
    <p>Concerning the Connection of Samples in Chains, 1913.</p>
  </div>
  <div class="page">
    <p>Training an LSTM model</p>
    <p>LSTM model A sequence of</p>
    <p>preceding fragments Probability distribution of</p>
    <p>a next fragment</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Seed AST Seed JS</p>
    <p>function f0 () {</p>
    <p>var v2 = 10; }</p>
    <p>var v0 = Hello World;</p>
    <p>f0(); v1 = [];</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr</p>
    <p>expr</p>
    <p>callee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>name</p>
    <p>v1</p>
    <p>name</p>
    <p>valueOf</p>
    <p>body</p>
    <p>args</p>
    <p>v1.valueOf();</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Remove a subtree</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr</p>
    <p>expr</p>
    <p>argscallee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>name</p>
    <p>v1</p>
    <p>name</p>
    <p>valueOf</p>
    <p>body</p>
    <p>function f0 () {</p>
    <p>var v2 = 10; }</p>
    <p>var v0 = Hello World;</p>
    <p>f0(); v1 = [];</p>
    <p>v1.valueOf();</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>A sequence of fragments representing the current ASTExprStament</p>
    <p>CallExpr</p>
    <p>expr</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>The probability distribution of the next fragment</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>expr</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>Randomly select one from the Top K fragments</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>expr</p>
    <p>body</p>
    <p>MemberExpr Literal</p>
    <p>argscallee</p>
    <p>Pre-order traversal</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr Literal</p>
    <p>expr</p>
    <p>argscallee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr Literal</p>
    <p>expr</p>
    <p>argscallee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>name</p>
    <p>v1</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr Literal</p>
    <p>expr</p>
    <p>argscallee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>name</p>
    <p>v1</p>
    <p>name</p>
    <p>push</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>Trained LSTM model</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr Literal</p>
    <p>expr</p>
    <p>argscallee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>name</p>
    <p>v1</p>
    <p>name</p>
    <p>push</p>
    <p>value</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>AST Mutation</p>
    <p>ExprStament</p>
    <p>CallExpr</p>
    <p>MemberExpr Literal</p>
    <p>expr</p>
    <p>argscallee</p>
    <p>Identifier Identifier</p>
    <p>object property</p>
    <p>name</p>
    <p>v1</p>
    <p>name</p>
    <p>push</p>
    <p>Mutated AST Mutated JS</p>
    <p>function f0 () { v1.push(0x10); var v2 = 10;</p>
    <p>}</p>
    <p>var v0 = Hello World;</p>
    <p>f0(); v1 = [];</p>
    <p>value</p>
    <p>body</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>January, 2017 Dataset</p>
    <p>February, 2017 ChakraCore 1.4.1</p>
    <p>Dataset Unpatched Bugs</p>
    <p>Ran fuzzers against ChakraCore 1.4.1</p>
    <p>JS code triggering unpatched bugs is not in our training set!</p>
    <p>Collected 33.5K unique JS files - Regression tests from the repo of four major JS engines and Test262</p>
    <p>- PoCs of known CVEs</p>
  </div>
  <div class="page">
    <p>vs. State-of-the-art Fuzzers</p>
    <p>72 hours x 5 trials</p>
    <p>- CodeAlchemist: A state-of-the-art semantics-aware JS fuzzer, NDSS19</p>
    <p>- jsfunfuzz: A JS fuzzer developed by Mozilla</p>
    <p>- IFuzzer: An evolutionary JS fuzzer, ESORICS16</p>
    <p>Metric Build # of Unique Crashes (Known CVEs)</p>
    <p>Montage CodeAlchemist jsfunfuzz IFuzzer</p>
    <p>Median Release 23 (7) 15 (4) 27 (3) 4 (1)</p>
    <p>Debug 49 (12) 26 (6) 27 (4) 6 (1)</p>
    <p>The differences were statistically significant (p-value &lt; 0.05)!</p>
  </div>
  <div class="page">
    <p>A Sequence of Fragments vs. Tokens [1-3]</p>
    <p>72 hours x 5 trials</p>
    <p>Metric Build # of Unique Crashes (Known CVEs)</p>
    <p>Montage Token RNN</p>
    <p>Median Release 23 (7) 1 (0)</p>
    <p>Debug 49 (12) 3 (0)</p>
    <p>- Token RNN: JS code mutation guided by a token-level LSTM model</p>
    <p>[1] Cummins et al. Compiler fuzzing through deep learning (ISSTA18). [2] Godefroid et al. Learn&amp;Fuzz: Machine learning for input fuzzing (ASE17). [3] Liu et al. DeepFuzz: Automatic generation of syntax valid C programs for fuzz testing (AAAI19).</p>
  </div>
  <div class="page">
    <p>Is the LSTM Model Effective?</p>
    <p>72 hours x 5 trials</p>
    <p>Metric Build # of Unique Crashes (Known CVEs)</p>
    <p>Montage Random</p>
    <p>Median Release 23 (7) 12 (3)</p>
    <p>Debug 49 (12) 31 (7)</p>
    <p>- Random: Random fragment assembly without any model</p>
  </div>
  <div class="page">
    <p>Is the LSTM Model Effective?</p>
    <p>The # of appended fragments to compose a new subtree</p>
    <p>Captured long-term dependencies!</p>
  </div>
  <div class="page">
    <p>Finding Real-World Bugs</p>
    <p>Four major JS engines for a total of 1.5 months</p>
    <p>- Found 37 previously unknown bugs</p>
    <p>34 bugs including two CVEs from ChakraCore 1.11.7</p>
    <p>One bug from V8 7.4.0 (beta)</p>
    <p>Two bugs including one CVE from JavaScriptCore 2.23.3</p>
    <p>rewarded with $5,000!</p>
    <p>- 26 of them were patched at the time of writing</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We proposed the first neural network language model-guided JS engine fuzzer and demonstrated its efficacy.</p>
    <p>Montage outperformed state-of-the-art fuzzers in the old version of ChakraCore.</p>
    <p>Montage found 37 previously unreported bugs from the latest JS engines.</p>
    <p>We proposed a novel approach of modeling JS code as a sequence of fragments on which any prevalent language models can be trained without modification.</p>
  </div>
  <div class="page">
    <p>Open Science</p>
    <p>https://github.com/WSP-LAB/Montage</p>
  </div>
  <div class="page">
    <p>For More Details</p>
    <p>- Resolving reference errors</p>
    <p>- Effect of parameters</p>
    <p>- Case studies</p>
    <p>- Effect of language models</p>
  </div>
  <div class="page">
    <p>Question?</p>
    <p>If you have more questions, please email suyoung.lee@kaist.ac.kr.</p>
  </div>
</Presentation>
