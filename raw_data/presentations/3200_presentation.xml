<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimizing Seed Selection for Fuzzing USENIX Security 2014</p>
    <p>Alexandre Rebert Sang Kil Cha</p>
    <p>Thanassis Avgerinos Jonathan Foote</p>
    <p>David Warren Gustavo Grieco David Brumley</p>
  </div>
  <div class="page">
    <p>Optimizing Seed Selection for Fuzzing</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>ParametersProgram</p>
    <p>Fuzzing = Bug Finding</p>
  </div>
  <div class="page">
    <p>Optimizing Seed Selection for Fuzzing</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>SeedProgram</p>
    <p>BFF, FileFuzz, jsfunfuzz, Peach, Sage, ZZUF</p>
    <p>and many more</p>
  </div>
  <div class="page">
    <p>Seed = Well-Structured Input</p>
  </div>
  <div class="page">
    <p>Seed Selection Challenge</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>SeedProgram</p>
    <p>Given:  Program  Fuzzer  Time limit T</p>
  </div>
  <div class="page">
    <p>Seed Selection Challenge</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
    <p>Goal: find as many bugs as possible</p>
    <p>Given:  Program  Fuzzer  Time limit T</p>
    <p>You can run the fuzzer with any seed for any arbitrary time period</p>
    <p>(total time  T)</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>Universe of PDF Files</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>Universe of PDF Files</p>
    <p>Question #1 How to select seeds to use?</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
    <p>Set of PDF Files</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>Universe of PDF Files</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
    <p>Set of PDF Files</p>
    <p>Question #2 How to schedule seeds?</p>
    <p>Can we obtain the maximum # of bugs that can be found</p>
    <p>for a given set of seeds?</p>
    <p>#bugs found = #unique crashes</p>
    <p>identified by stackhash</p>
  </div>
  <div class="page">
    <p>Q1: Seed Selection</p>
    <p>Universe of PDF Files</p>
    <p>Question #1 How to select seeds to use?</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
    <p>Set of PDF Files</p>
  </div>
  <div class="page">
    <p>Find a Set of Seeds Maximizing Code Coverage</p>
    <p>Miller reports an 1% increase in code coverage increases the percentage of bugs found by 0.92%[1]</p>
    <p>Peach uses code coverage to select seeds[2]</p>
    <p>[1] Fuzz by Number, CanSecWest 2008 [2] http://peachfuzzer.com</p>
    <p>Minimal Set-Cover Problem</p>
  </div>
  <div class="page">
    <p>Minimal Set-Cover Problem (MSCP)</p>
    <p>S1</p>
    <p>{2}</p>
    <p>S2</p>
    <p>{1}</p>
    <p>S3</p>
    <p>{3,4}</p>
    <p>S4</p>
    <p>{1,2}</p>
  </div>
  <div class="page">
    <p>Minimal Set-Cover Problem (MSCP)</p>
    <p>S1</p>
    <p>{2}</p>
    <p>S2</p>
    <p>{1}</p>
    <p>S3</p>
    <p>{3,4}</p>
    <p>S4</p>
    <p>{1,2}</p>
  </div>
  <div class="page">
    <p>Minimal Set-Cover Problem (MSCP)</p>
    <p>S1</p>
    <p>{2}</p>
    <p>S2</p>
    <p>{1}</p>
    <p>S3</p>
    <p>{3,4}</p>
    <p>S4</p>
    <p>{1,2}</p>
  </div>
  <div class="page">
    <p>MSCP is NP-Hard, But</p>
    <p>We use a greedy polynomial-time</p>
    <p>approximation algorithm</p>
    <p>Unweighted MinSet: MSCP</p>
    <p>Time MinSet: Weighted MSCP with exec. time</p>
    <p>Size MinSet: Weighted MSCP with seed file size</p>
    <p>More details in the paper</p>
    <p>Peach Set: derived from peach fuzzer</p>
  </div>
  <div class="page">
    <p>Comparing Seed Selection Algorithms</p>
    <p>Randomly selected 100 seeds per file extension</p>
    <p>Universe of PDF Files</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
    <p>Set of PDF Files</p>
    <p>We do this for every applications (10 apps.)</p>
  </div>
  <div class="page">
    <p>#Seeds after Seed Selection (From 100 Seeds)</p>
    <p>minset sminest tminset peach</p>
  </div>
  <div class="page">
    <p>Q2: Optimal Seed Scheduling</p>
    <p>Universe of PDF Files</p>
    <p>Fuzzer</p>
    <p>Bugs</p>
    <p>PDF File</p>
    <p>Set of PDF Files</p>
    <p>Question #2 For a given set of seeds,</p>
    <p>what is the maximum # of bugs that can be found within</p>
    <p>a time limit?</p>
    <p>We introduce a methodology of evaluating seed selection</p>
    <p>algorithms</p>
  </div>
  <div class="page">
    <p>Compute Optimal Scheduling from Collected Ground Truth Data</p>
    <p>Fuzzer</p>
    <p>(B1, S1, T1), (B2, S1, T2),</p>
    <p>bug ID</p>
    <p>seed ID</p>
    <p>time stamp( ), ,</p>
    <p>Per-Seed Ground Truth Collection</p>
    <p>Ground Truth = a sequence of</p>
  </div>
  <div class="page">
    <p>Compute Optimal Scheduling from Collected Ground Truth Data</p>
    <p>For all the seeds in the universe</p>
    <p>Finding an optimal scheduling is NP-hard</p>
    <p>(B1, S1, T1), (B2, S1, T2),</p>
    <p>(B4, S2, T1), (B2, S3, T2),</p>
    <p>(B4, S2, T1), (B2, S3, T2),</p>
    <p>ILP (Integer Linear Programming)</p>
  </div>
  <div class="page">
    <p>ILP Formulation Example</p>
    <p>Fuzzing 1 program with 2 seed files (S1 and S2)  1 minute fuzzing run with each seed  2 bugs found in total (B1 and B2)</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>S1</p>
    <p>S2</p>
  </div>
  <div class="page">
    <p>Steps in ILP Formulation</p>
    <p>Maximize the # of Bugs</p>
  </div>
  <div class="page">
    <p>Introducing Crash Indicator Variable ci,j</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>If we select S1 for 15 sec., then c1,1= 0, c1,2= 0 If we select S2 for 40 sec., then c2,1 = 1, c2,2 = 0</p>
    <p>S1</p>
    <p>S2</p>
    <p>ci,j = j th crash in the ith seed</p>
  </div>
  <div class="page">
    <p>Introducing Time Variable ti,j</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>S1</p>
    <p>S2</p>
    <p>t1,1 t1,2</p>
    <p>t2,1 t2,2</p>
    <p>ti,j = j th time interval of the ith seed</p>
  </div>
  <div class="page">
    <p>Introducing Bug Indicator Variable bx</p>
    <p>If we select S2 for 40 sec., b2 = 1</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>S1</p>
    <p>S2</p>
    <p>t1,1 t1,2</p>
    <p>t2,1 t2,2</p>
  </div>
  <div class="page">
    <p>Constraint 1: Order of Crashes</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>S1</p>
    <p>S2</p>
    <p>Preserve the order of crashes</p>
    <p>t1,1 t1,2</p>
    <p>t2,1 t2,2</p>
  </div>
  <div class="page">
    <p>Constraint 2: Time Limit</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>S1</p>
    <p>S2</p>
    <p>t1,1 t1,2</p>
    <p>t2,1 t2,2</p>
    <p>Do not exceed the time limit</p>
  </div>
  <div class="page">
    <p>Constraint 3: Crash  Bug</p>
    <p>If a crash is found, then the corresponding bug is found</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>S1</p>
    <p>S2</p>
    <p>t1,1 t1,2</p>
    <p>t2,1 t2,2</p>
  </div>
  <div class="page">
    <p>Constraint 4: Bug  Crash</p>
    <p>If a bug is found, then one of the corresponding crashes is found</p>
    <p>(B1, S1, 30) (B1, S1, 60)</p>
    <p>(B2, S2, 15) (B1, S2, 55)</p>
    <p>c1,1 c1,2</p>
    <p>c2,1 c2,2</p>
    <p>S1</p>
    <p>S2</p>
    <p>t1,1 t1,2</p>
    <p>t2,1 t2,2</p>
  </div>
  <div class="page">
    <p>Final ILP Formulation</p>
    <p>maximize # of bugs found</p>
  </div>
  <div class="page">
    <p>#Seeds after Seed Selection (From 100 Seeds)</p>
    <p>minset sminset tminset peach</p>
  </div>
  <div class="page">
    <p>minset sminest tminset peach</p>
    <p># of Maximum Attainable Bugs using 20 Seeds over 10 Apps.</p>
    <p># o</p>
    <p>f M</p>
    <p>a x</p>
    <p>im u</p>
    <p>m A</p>
    <p>tt a</p>
    <p>in a</p>
    <p>b le</p>
    <p>B u</p>
    <p>g s</p>
  </div>
  <div class="page">
    <p>Comparing Seed Selection Algorithms Against Random Set</p>
    <p>Random Set: pick k seeds at random</p>
    <p>Unweighted MinSet: MSCP</p>
    <p>Time MinSet: WMSCP with execution time</p>
    <p>Size MinSet: WMSCP with seed file size</p>
    <p>Peach Set: derived from peach fuzzer</p>
    <p>Simulated random set 1000 times per program</p>
    <p>Compare # of bugs found per k</p>
  </div>
  <div class="page">
    <p>Unweighted MinSet Performs Best</p>
    <p>peach tminset sminset minset random</p>
    <p>Unweighted MinSet is always better than random</p>
    <p>#Seeds</p>
    <p># o</p>
    <p>f M</p>
    <p>a x</p>
    <p>im u</p>
    <p>m A</p>
    <p>tt a</p>
    <p>in a</p>
    <p>b le</p>
    <p>B u</p>
    <p>g s</p>
  </div>
  <div class="page">
    <p>More on the Paper</p>
    <p>Detailed seed selection algorithms</p>
    <p>Detailed ILP formulation</p>
    <p>More evaluation</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We formalized, implemented, and tested a number of seed selection algorithms for fuzzing</p>
    <p>We introduced a methodology for evaluating seed selection algorithms for fuzzing</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Sang Kil Cha</p>
    <p>sangkilc@cmu.edu</p>
    <p>Code &amp; Data will be soon available:</p>
    <p>http://security.ece.cmu.edu/coverset</p>
  </div>
  <div class="page"/>
</Presentation>
