<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Toward provenancebased security for configuration languages</p>
    <p>Paul Anderson James Cheney</p>
    <p>University of Edinburgh</p>
    <p>TaPP, June 14, 2012</p>
  </div>
  <div class="page">
    <p>Configuration management</p>
    <p>Keeping machines updated / upgraded  Keeping network access (firewalls, services)</p>
    <p>correctly configured</p>
    <p>Increasingly, declarative/high-level languages preferred</p>
    <p>better maintainability  LCFG (Edinburgh), Puppet, several other</p>
    <p>tools</p>
  </div>
  <div class="page">
    <p>Declarative configurations</p>
    <p>deploy</p>
    <p>x number of machines</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Declarative configurations</p>
    <p>deploy</p>
    <p>x number of machines</p>
    <p>...</p>
    <p>Problem: Lots of redundancy</p>
  </div>
  <div class="page">
    <p>Smarter way</p>
    <p>deploy</p>
    <p>x number of machines</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Smarter way</p>
    <p>m ac</p>
    <p>hi ne</p>
    <p>-sp ec</p>
    <p>ifi c</p>
    <p>sit e</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>deploycompile</p>
    <p>x number of machines</p>
    <p>...</p>
    <p>gr ou</p>
    <p>psp</p>
    <p>ec ifi c</p>
  </div>
  <div class="page">
    <p>Smarter way</p>
    <p>lines</p>
    <p>m ac</p>
    <p>hi ne</p>
    <p>-sp ec</p>
    <p>ifi c</p>
    <p>sit e</p>
    <p>sp ec</p>
    <p>ifi c</p>
    <p>ge ne</p>
    <p>ric</p>
    <p>deploycompile</p>
    <p>widget.comconfig.com x number of machines</p>
    <p>...</p>
    <p>gr ou</p>
    <p>psp</p>
    <p>ec ifi c</p>
  </div>
  <div class="page">
    <p>Why is configuration management important?  &quot;In his case study on Linux system</p>
    <p>engineering in air traffic control, Stefan Schimanski showed how scalable Puppet really is and how it can guarantee reliable mass deployment of the Linux-based, mission critical applications needed in air-traffic control centers.&quot;</p>
    <p>Linux Weekly News</p>
  </div>
  <div class="page">
    <p>Security  Configuration management can lead to</p>
    <p>vulnerabilities in the overall system</p>
    <p>even if individual components are secure  Configurations often maintained in a</p>
    <p>distributed way</p>
    <p>(across system/control boundaries)  and compiled into (large) configuration files  leading to potential for mistakes or</p>
    <p>exploitation</p>
  </div>
  <div class="page">
    <p>Example class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>Alice</p>
    <p>w id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
  </div>
  <div class="page">
    <p>Example class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>w id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
  </div>
  <div class="page">
    <p>Example class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>w id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Prototype-based data (instance) inheritance</p>
  </div>
  <div class="page">
    <p>Example class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { ... } Carol</p>
    <p>w id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Prototype-based data (instance) inheritance</p>
  </div>
  <div class="page">
    <p>Example class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { ... } Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Prototype-based data (instance) inheritance</p>
  </div>
  <div class="page">
    <p>Example class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { ... } Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Dave</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>w id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Prototype-based data (instance) inheritance</p>
  </div>
  <div class="page">
    <p>class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
  </div>
  <div class="page">
    <p>class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { timeServer = sales.widget.com ... }</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Carol makes a temporary change...</p>
  </div>
  <div class="page">
    <p>class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example class genericServer {</p>
    <p>timeServer = ts@unreliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { timeServer = sales.widget.com ... }</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Meanwhile, Alice changes the default</p>
  </div>
  <div class="page">
    <p>class genericServer {</p>
    <p>timeServer = ts@reliable.com ... 742 more parameters ... }</p>
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example class genericServer {</p>
    <p>timeServer = ts@unreliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { timeServer = sales.widget.com ... }</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@sales.widget.com ... }</p>
    <p>co nfi</p>
    <p>g. co</p>
    <p>m</p>
    <p>Alice's change is masked by Carol's</p>
  </div>
  <div class="page">
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example class genericServer {</p>
    <p>timeServer = ts@unreliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>class salesServer isa widgetServer { timeServer = ts@sales.widget.com ... }</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
  </div>
  <div class="page">
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example class genericServer {</p>
    <p>timeServer = ts@unreliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m co</p>
    <p>nfi g.</p>
    <p>co m</p>
    <p>Later Carol reverts the temporary change</p>
  </div>
  <div class="page">
    <p>class salesServer isa widgetServer { ... }</p>
    <p>Example class genericServer {</p>
    <p>timeServer = ts@unreliable.com ... 742 more parameters ... }</p>
    <p>class widgetServer isa genericServer {</p>
    <p>... }</p>
    <p>Bob</p>
    <p>Alice</p>
    <p>Carol node serverA isa salesServer { ip = 1.2.3.4 ... }</p>
    <p>Davew id</p>
    <p>ge t. co</p>
    <p>m</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@unreliable.com ... }</p>
    <p>co nfi</p>
    <p>g. co</p>
    <p>m</p>
    <p>Suddenly things break, Carol gets the</p>
    <p>blame, but the real &quot;culprit&quot; is Alice</p>
  </div>
  <div class="page">
    <p>Workarounds  Validation? (e.g. whitelists)</p>
    <p>Validating final result will catch error earlier  But would not help identify cause  (and system could get into &quot;stuck&quot; state)</p>
    <p>Access control? [Vanbrabant et al. 2011]  Controlling effects of changes on final product</p>
    <p>can be unpredictable</p>
    <p>Stuckness, inversion of privilege can result</p>
  </div>
  <div class="page">
    <p>Alternative  Track provenance to understand flow of</p>
    <p>information through &quot;compilation&quot;</p>
    <p>Change-history/provenance of source documents is usually available (e.g. SVN blame)</p>
    <p>Use to audit results  or (perhaps) for provenance-aware</p>
    <p>access control</p>
  </div>
  <div class="page">
    <p>Challenges  What is the right provenance model for</p>
    <p>(configuration language) security?</p>
    <p>where-prov/&quot;taint&quot; tracking (ad hoc)  why-prov/dependency tracking (verbose)  override history? finer-grained traces?</p>
    <p>What is right tradeoff between exactness and utility?</p>
    <p>How do we measure / verify security guarantees involving provenance?</p>
  </div>
  <div class="page">
    <p>Challenges  What is the right provenance model for</p>
    <p>(configuration language) security?</p>
    <p>where-prov/&quot;taint&quot; tracking (ad hoc)  why-prov/dependency tracking (verbose)  override history? finer-grained traces?</p>
    <p>What is right tradeoff between exactness and utility?</p>
    <p>How do we measure / verify security guarantees involving provenance?</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@sales.widget.com ... }</p>
  </div>
  <div class="page">
    <p>Challenges  What is the right provenance model for</p>
    <p>(configuration language) security?</p>
    <p>where-prov/&quot;taint&quot; tracking (ad hoc)  why-prov/dependency tracking (verbose)  override history? finer-grained traces?</p>
    <p>What is right tradeoff between exactness and utility?</p>
    <p>How do we measure / verify security guarantees involving provenance?</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@sales.widget.com ... }</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>Challenges  What is the right provenance model for</p>
    <p>(configuration language) security?</p>
    <p>where-prov/&quot;taint&quot; tracking (ad hoc)  why-prov/dependency tracking (verbose)  override history? finer-grained traces?</p>
    <p>What is right tradeoff between exactness and utility?</p>
    <p>How do we measure / verify security guarantees involving provenance?</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@sales.widget.com ... }</p>
    <p>AliceBobCarolDave</p>
  </div>
  <div class="page">
    <p>Challenges  What is the right provenance model for</p>
    <p>(configuration language) security?</p>
    <p>where-prov/&quot;taint&quot; tracking (ad hoc)  why-prov/dependency tracking (verbose)  override history? finer-grained traces?</p>
    <p>What is right tradeoff between exactness and utility?</p>
    <p>How do we measure / verify security guarantees involving provenance?</p>
    <p>node serverA { ip = 1.2.3.4 timeServer = ts@sales.widget.com ... }</p>
    <p>AliceCarol</p>
  </div>
  <div class="page">
    <p>Challenges  What is the right provenance model for</p>
    <p>(configuration language) security?</p>
    <p>where-prov/&quot;taint&quot; tracking (ad hoc)  why-prov/dependency tracking (verbose)  override history? finer-grained traces?</p>
    <p>What is right tradeoff between exactness and utility?</p>
    <p>How do we measure / verify security guarantees involving provenance?</p>
  </div>
  <div class="page">
    <p>Challenges #2  Semantics of Puppet</p>
    <p>largely data-description language  some object-orientation (inherit data, not</p>
    <p>code)</p>
    <p>some functions/procedures, lists, ...  documentation focuses on examples, not</p>
    <p>corner cases</p>
    <p>other CLs have similar issues</p>
  </div>
  <div class="page">
    <p>Current work  Currently investigating (arguably) simpler</p>
    <p>case of LCFG</p>
    <p>Assign provenance to each line using svn blame  Adapt LCFG interpreter to provide finer-grained</p>
    <p>explanation of responsibility for each &quot;part&quot; of final config</p>
    <p>Complicated by heavy use of C preprocessor...</p>
    <p>watch this space</p>
  </div>
  <div class="page">
    <p>Scale  A &quot;mature&quot; configuration includes:</p>
    <p>13,764 lines  7,244 statements  268 unique files</p>
    <p>written by 20-30 different people  162 of which are included multiple times</p>
    <p>for one machine!</p>
  </div>
  <div class="page">
    <p>Related work  Provenance security</p>
    <p>Braun et al. (2007), Hasan et al. (2009) - systems perspective</p>
    <p>Formal models: Cheney (CSF 2011), Acar et al. (POST 2012)</p>
    <p>Configuration languages/security  Change-based security for Puppet (Vanbrabant et al.</p>
    <p>Almost no work on semantics of config languages! (so maybe do that first...)</p>
  </div>
  <div class="page">
    <p>Conclusions  Security is important for configuration</p>
    <p>languages</p>
    <p>Provenance may be useful for auditing and access control</p>
    <p>Future work:  understanding semantics of LCFG, Puppet or other</p>
    <p>languages</p>
    <p>defining provenance models  defining security policies based on provenance</p>
  </div>
</Presentation>
