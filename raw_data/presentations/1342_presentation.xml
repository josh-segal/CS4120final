<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Census: Location-Aware Membership Management</p>
    <p>for Large-Scale Distributed Systems</p>
    <p>James Cowling Dan R. K. Ports Barbara Liskov Raluca Ada Popa Abhijeet Gaikwad*</p>
    <p>MIT CSAIL *cole Centrale Paris</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Large-scale distributed systems becoming more common multiple datacenters, cloud computing, etc.</p>
    <p>Reconfigurable distributed services adapt as nodes join, leave, or fail</p>
    <p>A membership service that tracks changes in system membership can simplify system design</p>
  </div>
  <div class="page">
    <p>Census</p>
    <p>A platform for building large-scale, distributed applications Two main components: Membership service Multicast communication mechanism Designed to work in the wide-area Locality-aware; fault tolerant</p>
  </div>
  <div class="page">
    <p>Membership Service</p>
    <p>Time divided into sequential, fixed-duration epochs</p>
    <p>Each epoch has a membership view: List of nodes (ID, IP address, location, etc.) Consistency property: every node sees the same membership view for a particular epoch</p>
    <p>can simplify protocol design (e.g. partitioning storage)</p>
  </div>
  <div class="page">
    <p>Consistency &amp; Scalability</p>
    <p>Existing systems: tradeoff between consistency and scalability</p>
    <p>Examples: - virtual synchrony (e.g. ISIS, Spread) - distributed hash tables (e.g. Chord, Pastry)</p>
    <p>Census provides consistent membership views and is designed for large-scale, wide-area systems</p>
  </div>
  <div class="page">
    <p>Membership Service: Basic Approach</p>
    <p>Designate one node as leader</p>
  </div>
  <div class="page">
    <p>Membership Service: Basic Approach</p>
    <p>Designate one node as leader</p>
    <p>Nodes report membership changes to leader</p>
  </div>
  <div class="page">
    <p>Membership Service: Basic Approach</p>
    <p>Designate one node as leader</p>
    <p>Nodes report membership changes to leader</p>
    <p>Leader aggregates changes; multicasts item</p>
  </div>
  <div class="page">
    <p>Membership Service: Basic Approach</p>
    <p>Designate one node as leader</p>
    <p>Nodes report membership changes to leader</p>
    <p>Leader aggregates changes; multicasts item</p>
    <p>Members enter next epoch, update membership</p>
  </div>
  <div class="page">
    <p>What are the Challenges?</p>
    <p>Delivering items efficiently and reliably  Multicast mechanism</p>
    <p>Reducing load on the leader</p>
    <p>Multi-region structure Dealing with leader failure</p>
    <p>Fault tolerance</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Basic Approach  Multicast Mechanism  Multi-region Design  Fault Tolerance  Evaluation</p>
  </div>
  <div class="page">
    <p>Multicast Mechanism</p>
    <p>Need multicast to distribute membership updates and application data efficiently</p>
    <p>Goals: high reliability, low latency, fair load balancing</p>
    <p>Many multicast protocols exist...</p>
    <p>Census takes a different approach exploits consistent membership information for a simpler design and lower overhead</p>
  </div>
  <div class="page">
    <p>Multicast Topology</p>
    <p>Multiple interior-disjoint trees (similar to SplitStream) Each node interior in one tree, leaf in others</p>
    <p>Membership data distributed in full on each tree. Application's multicast data erasure-coded Improved reliability and load balancing vs. a single tree</p>
  </div>
  <div class="page">
    <p>Multicast Topology</p>
  </div>
  <div class="page">
    <p>Multicast Topology</p>
  </div>
  <div class="page">
    <p>Multicast Topology</p>
  </div>
  <div class="page">
    <p>Building Multicast Trees</p>
    <p>Exploit consistent membership knowledge: tree structure given by deterministic function of membership</p>
    <p>Allows simple centralized algorithm in distributed context Nodes independently recompute trees on-the-fly, upon receiving membership updates No protocol overhead beyond that of membership service (even during churn!)</p>
  </div>
  <div class="page">
    <p>Tree Building Algorithm</p>
  </div>
  <div class="page">
    <p>Tree Building Algorithm</p>
    <p>d(x,y)  latency(x,y)</p>
    <p>Background: network coordinates (e.g. Vivaldi)</p>
  </div>
  <div class="page">
    <p>Tree Building Algorithm Assign nodes to a tree (color) based on ID</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Split region through center of mass, along widest axis</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Choose closest red node in each subregion, attach to root</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Recursively subdivide each subregion in the same way</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Recursively subdivide each subregion in the same way</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Recursively subdivide each subregion in the same way</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Recursively subdivide each subregion in the same way</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Recursively subdivide each subregion in the same way</p>
  </div>
  <div class="page">
    <p>Building the Red Tree Attach other-colored nodes to the nearest available red node</p>
  </div>
  <div class="page">
    <p>Multicast Improvements</p>
    <p>Reduce bandwidth overhead  avoid sending redundant data</p>
    <p>Reduce multicast latency  choose fragments to send based on expected path length</p>
    <p>Improve reliability during failures  reconstruct missing fragments from other trees</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Basic Approach  Multicast Mechanism  Multi-region Design  Fault Tolerance  Evaluation</p>
  </div>
  <div class="page">
    <p>Multi-Region Structure Divide large deployments into location-based regions</p>
  </div>
  <div class="page">
    <p>Multi-Region Structure One region leader per region, plus global leader</p>
  </div>
  <div class="page">
    <p>Multi-Region Structure Region leaders aggregate membership changes from region</p>
  </div>
  <div class="page">
    <p>Multi-Region Structure Region leaders aggregate membership changes from region</p>
  </div>
  <div class="page">
    <p>Multi-Region Structure Global leader combines region reports to produce item</p>
  </div>
  <div class="page">
    <p>Region Dynamics</p>
    <p>Regions split when they grow too large Global leader signals split in the next item Nodes independently split region across widest axis using consistent membership knowledge</p>
    <p>Regions merge when one grows too small Similar process</p>
    <p>Nodes assigned to nearest region on joining</p>
  </div>
  <div class="page">
    <p>Multi-Region Structure</p>
    <p>Benefits  fewer messages processed by leader  fewer wide-area communications  cheaper multicast tree computation  useful abstraction for applications</p>
  </div>
  <div class="page">
    <p>Partial Knowledge Maintaining global membership knowledge is usually feasible</p>
    <p>Except: very large, dynamic, and/or bandwidth-constrained systems</p>
    <p>Partial knowledge: each node knows only the membership of its own region and summary information of other regions</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Basic Approach  Multicast Mechanism  Multi-region Design  Fault Tolerance  Evaluation</p>
  </div>
  <div class="page">
    <p>Fault Tolerance</p>
    <p>Global leader and region leaders can fail</p>
    <p>Solution: replication Use standard state machine replication techniques</p>
    <p>Replication level based on expected concurrent failures</p>
    <p>Optional: tolerating Byzantine faults</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview  Basic Approach  Multicast Mechanism  Multi-region Design  Fault Tolerance  Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>PlanetLab deployment 614 nodes Theoretical analysis scalability to larger systems</p>
    <p>Simulator evaluate multicast performance</p>
  </div>
  <div class="page">
    <p>PlanetLab Deployment 614 nodes; 30 second epochs; 1 KB/epoch multicast</p>
    <p>a n</p>
    <p>b a</p>
    <p>n d</p>
    <p>w id</p>
    <p>th p</p>
    <p>e r</p>
    <p>n o</p>
    <p>d e</p>
    <p>( K</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (epochs)</p>
    <p>R e</p>
    <p>p o</p>
    <p>rt e</p>
    <p>d m</p>
    <p>e m</p>
    <p>b e</p>
    <p>rs h</p>
    <p>ip (</p>
    <p>n o</p>
    <p>d e</p>
    <p>s )</p>
    <p>Time (epochs)</p>
    <p>Bandwidth usage Multicast data size</p>
  </div>
  <div class="page">
    <p>Bandwidth Overhead Membership management cost analysis Very high churn rate (avg. node lifetime 30 minutes)</p>
    <p>Global Leader Region Leader Regular Node</p>
    <p>B a n d w</p>
    <p>id th</p>
    <p>O v e rh</p>
    <p>e a d (</p>
    <p>K B</p>
    <p>/s )</p>
    <p>Number of Nodes Number of Nodes</p>
    <p>Multiple Regions Partial Knowledge</p>
  </div>
  <div class="page">
    <p>Multicast Reliability Fraction of nodes successfully receiving multicast Simulation results (10,000 nodes)</p>
    <p>Su cc</p>
    <p>es s</p>
    <p>R at</p>
    <p>e</p>
    <p>Fraction of Bad Nodes</p>
  </div>
  <div class="page">
    <p>Multicast Performance Stretch: multicast latency / ideal (unicast) latency 1740-node measurement-derived topology</p>
    <p>C u</p>
    <p>m u</p>
    <p>la ti v e</p>
    <p>F ra</p>
    <p>c ti o</p>
    <p>n o</p>
    <p>f N</p>
    <p>o d</p>
    <p>e s</p>
    <p>Stretch</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Census: a platform for membership management and communication in large distributed systems</p>
    <p>Provides consistent views while scaling to extreme sizes Support future wide-scale distributed applications</p>
    <p>Builds on an efficient multicast mechanism High reliability, low latency, low bandwidth overhead</p>
    <p>Exploit consistent knowledge High performance while avoiding complexity</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Census: a platform for membership management and communication in large distributed systems</p>
    <p>Provides consistent views while scaling to extreme sizes Support future wide-scale distributed applications</p>
    <p>Builds on an efficient multicast mechanism High reliability, low latency, low bandwidth overhead</p>
    <p>Exploit consistent knowledge High performance while avoiding complexity</p>
    <p>Thank you. Questions?</p>
  </div>
</Presentation>
