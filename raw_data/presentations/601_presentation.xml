<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Usenix ATC11</p>
    <p>Raluca Ada Popa, MIT; Jacob R. Lorch, David Molnar, Helen J. Wang, and Li Zhuang, Microsoft Research</p>
  </div>
  <div class="page">
    <p>Mo#va#on</p>
    <p>A main concern is security  Data leakage/corruption due to bugs, hackers,</p>
    <p>employees  Many customers perceive security as main concern</p>
    <p>Cloud storage provides extensive resources, scalability, and reliability</p>
  </div>
  <div class="page">
    <p>Security proper#es  Confidentiality (C): only authorized users can read data  Integrity (I):</p>
    <p>Each get returns the content put by an authorized user  Write-serializability (W):</p>
    <p>Each user committing an update is aware of the latest update to the same block</p>
    <p>Freshness (F):  Each get returns the data from the latest committed put</p>
    <p>Problem: cloud services do not guarantee security in SLAs</p>
    <p>Need proofs of misbehavior</p>
  </div>
  <div class="page">
    <p>CloudProof</p>
    <p>freshness (IWF)  Publicly-verifiable proofs of violation for IWF</p>
    <p>Any external party can be convinced of cloud misbehavior</p>
    <p>Users cannot falsely accuse cloud</p>
    <p>tools</p>
    <p>A secure storage system for the cloud:</p>
  </div>
  <div class="page">
    <p>Model</p>
    <p>fully untrusted</p>
    <p>Data owner</p>
    <p>Data users</p>
    <p>Cloud  assigns permissions to users (R, RW)</p>
    <p>may attempt to bypass permissions</p>
    <p>Application</p>
    <p>get/put blocks</p>
    <p>may try to frame the cloud</p>
  </div>
  <div class="page">
    <p>Strawman</p>
    <p>For each block:  Confidentiality: owner gives a secret key for</p>
    <p>encryption, sk, to allowed readers  Integrity: owner gives public key pair for</p>
    <p>signing, SK, PK to allowed writers</p>
    <p>Block</p>
    <p>Encsk[content]</p>
    <p>SigSK[encr. content]</p>
    <p>Problems:  No detection for write-serial., freshness  No proofs of violation  Access control/key distrib. not scalable</p>
    <p>in this talk</p>
    <p>see paper</p>
    <p>Version no.</p>
  </div>
  <div class="page">
    <p>Detec#on and proofs of viola#on for IWF</p>
    <p>Attestations</p>
    <p>Cloud User</p>
    <p>get( block id)</p>
    <p>block content, cloud-get-attestation</p>
    <p>put(block id, content), client-put-attestation</p>
    <p>cloud-put-attestation</p>
    <p>Proofs verifiable by any outside party  Non-repudiable signature scheme [Micali et. al.,99]  Each party verifies attestation signatures</p>
  </div>
  <div class="page">
    <p>Audi#ng</p>
    <p>Integrity: users check attestations from cloud</p>
    <p>W and F: Owner does probabilistic auditing  Time divided in epochs (e.g., day)</p>
    <p>Only owner and authorized users know in which epochs a block is audited</p>
    <p>B1 B3 B5 B2 B4</p>
  </div>
  <div class="page">
    <p>During the epoch</p>
    <p>B2 B4</p>
    <p>Cloud Users</p>
    <p>get.. , cloud-get-attestation</p>
    <p>put  cloud-put-attestation</p>
    <p>Cloud Users</p>
    <p>put.. , cloud-put-attestation</p>
    <p>put  cloud-put-attestation</p>
    <p>Data owner cloud-get-attestation cloud-put-attestation cloud-put-attestation cloud-put-attestation</p>
  </div>
  <div class="page">
    <p>At the end of epoch</p>
    <p>For the blocks to audit:  Owner requests all cloud-attestations from the</p>
    <p>cloud  Audits attestations from clients and from cloud  Audit guarantees write-serial. and freshness for</p>
    <p>entire epoch</p>
  </div>
  <div class="page">
    <p>A@esta#on Structure</p>
    <p>CLOUD GET</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>Hashed and signed by</p>
    <p>cloud</p>
    <p>USER PUT</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>Hashed and signed by user with SK</p>
    <p>CLOUD PUT</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>NEW VERSION</p>
    <p>NO.</p>
    <p>Hashed and signed by</p>
    <p>cloud</p>
    <p>NEW VERSION</p>
    <p>NO.</p>
    <p>VERSION NO.</p>
  </div>
  <div class="page">
    <p>Integrity</p>
    <p>Detection: signature does not verify</p>
    <p>CLOUD GET</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>BLOCK VERSION</p>
    <p>NO.</p>
    <p>Hashed and signed by</p>
    <p>cloud</p>
    <p>Block</p>
    <p>Encsk[content] version no.</p>
    <p>SigSK[encr. content]</p>
    <p>BLOCK HASH</p>
    <p>Proof of violation: attestation</p>
  </div>
  <div class="page">
    <p>Write-serializability</p>
    <p>Detection: Fork in sequence of put attestations  Proof of violation: the forked sequence of attestations</p>
    <p>version 4, hash: xd242</p>
    <p>version 5, hash: xae97 version 5, hash: x3166</p>
    <p>fork</p>
    <p>CLOUD PUT</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>NEW VERSION</p>
    <p>NO.</p>
    <p>Hashed and signed by</p>
    <p>cloud</p>
    <p>NEW BLOCK HASH</p>
  </div>
  <div class="page">
    <p>Freshness</p>
    <p>chain hash = hash (data in current a@esta#on, previous a@esta#on)</p>
    <p>Detection: attestations do not chain correctly</p>
    <p>CLOUD GET</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>BLOCK VERSION</p>
    <p>NO.</p>
    <p>Hashed and signed by</p>
    <p>cloud</p>
    <p>CLOUD PUT</p>
    <p>ATTEST.</p>
    <p>BLOCK ID</p>
    <p>NEW VERSION</p>
    <p>NO.</p>
    <p>Hashed and signed by</p>
    <p>cloud</p>
    <p>NEW HASH</p>
    <p>BLOCK HASH</p>
    <p>CHAIN HASH</p>
    <p>CHAIN HASH</p>
  </div>
  <div class="page">
    <p>Freshness (contd)</p>
    <p>Detection: attestations do not chain correctly</p>
    <p>Proof of violation: broken chain of attestations</p>
    <p>Cloud Users put: blockid 5, hash x18,</p>
    <p>A1 = (cloud-put-attestation, blockid 5, version 1, hash x18, )</p>
    <p>put: blockid 5, hash x22,  A2 = (cloud-put-attestation, blockid 5, version 2, hash x22, h(A1, data in A2), )</p>
    <p>get: blockid 5</p>
    <p>A3 = (cloud-get-attestation, blockid 5, version 1, hash x18,</p>
    <p>h(A1, data in A3)? h(A2, data in A3)? Detected!</p>
  </div>
  <div class="page">
    <p>Implementa#on</p>
    <p>C#, Windows Azure:  Storage component: blobs and queues  Compute component: web and worker roles</p>
    <p>Four modules: owner, user, cloud, auditor  .NET crypto tools: AES, SHA-1, RSA</p>
  </div>
  <div class="page">
    <p>Evalua#on</p>
    <p>What is the overhead at users/cloud?  Latency/throughput</p>
    <p>What is the workload of the owner?  Access control/auditing</p>
  </div>
  <div class="page">
    <p>User/server overhead  Mostly from sign-verify of attestations</p>
    <p>SIGN VERIFY</p>
    <p>SIGN VERIFY</p>
    <p>Delay added per request: 30 ms at server, 40 ms at user  Can optimize: e.g., batch many attestations in one</p>
    <p>signature using a Merkle hash</p>
    <p>Throughput scales roughly linearly at server</p>
  </div>
  <div class="page">
    <p>Owner work  Two offline tasks:</p>
    <p>Key distrib.: for a widely-used software with &gt; 5000 developers, membership changes take &lt;1.6 sec/month</p>
    <p>Auditing cost is modest and parallelizable</p>
    <p>4 min for 108 attestations</p>
    <p>Detection probability increases exponentially in no. of epochs of violation</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Secure file/storage systems (e.g., SiRiUS, SUNDR, Plutus):  No proofs of violation  No W and F detection due to different model  Access control not as scalable</p>
    <p>Proofs of retrievability/possession (e.g., POR, HAIL)</p>
    <p>Byzantine fault tolerance (e.g., BFT)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>CloudProof is a secure storage system for the cloud:  Detection of WF via auditing  Proofs of violation for IWF via attestations  Scalable access control using broadcast encryption</p>
    <p>Thanks!</p>
  </div>
</Presentation>
