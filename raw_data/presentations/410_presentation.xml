<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Secure Embedded Web Interfaces</p>
    <p>Baptiste Gourdin, Chinmay Soman, Hristo Bojinov, Elie Bursztein</p>
    <p>St an</p>
    <p>fo rd</p>
    <p>U ni</p>
    <p>ve rs</p>
    <p>it y</p>
    <p>Se cu</p>
    <p>ri ty</p>
    <p>L ab</p>
  </div>
  <div class="page">
    <p>Embedded devices insecurity</p>
  </div>
  <div class="page">
    <p>Which devices are insecure ?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>devices?</p>
  </div>
  <div class="page">
    <p>Web management interface</p>
    <p>Managing embedded devices via a web interface:</p>
    <p>Easier for users  Cheaper for vendors</p>
  </div>
  <div class="page">
    <p>Web application spectrum</p>
    <p>Popular Internet web sites</p>
    <p>Custom web applications</p>
    <p>Security research</p>
    <p># users</p>
    <p># of sites</p>
  </div>
  <div class="page">
    <p>Web application spectrum</p>
    <p>Popular Internet web sites</p>
    <p>Custom web applications</p>
    <p>Security research</p>
    <p>devices ? Consumer electronics Network infrastructure</p>
    <p># users</p>
    <p># of sites</p>
  </div>
  <div class="page">
    <p>Embedded device prominence</p>
    <p>Embedded web applications are everywhere</p>
    <p>100M+ WiFi access points</p>
    <p>also in millions of</p>
    <p>switches, printers,</p>
    <p>consumer electronics</p>
    <p>Source: skyhookwireless</p>
    <p>San Francisco WiFi access points</p>
  </div>
  <div class="page">
    <p>Spectrum revisited</p>
    <p>Popular web applications</p>
    <p>Custom web applications</p>
    <p>Security research # of sites</p>
    <p># users</p>
  </div>
  <div class="page">
    <p>Spectrum revisited</p>
    <p>Popular web applications</p>
    <p>Custom web applications</p>
    <p>Security research</p>
    <p>devices</p>
    <p># of sites</p>
    <p># users</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
  </div>
  <div class="page">
    <p>Devices as stepping stones</p>
  </div>
  <div class="page">
    <p>Recipe for a disaster</p>
    <p>Vendors build their own web applications</p>
    <p>Standard web server (sometimes)</p>
    <p>Custom web application stack</p>
    <p>Weak web security</p>
    <p>New features/services added at a fast pace</p>
    <p>Vendors compete on the number of services</p>
    <p>Interactions between services  vulnerabilities</p>
  </div>
  <div class="page">
    <p>Some vendors got it right...</p>
    <p>Kodak 1</p>
  </div>
  <div class="page">
    <p>... almost.</p>
  </div>
  <div class="page">
    <p>... almost.</p>
  </div>
  <div class="page">
    <p>The result</p>
    <p>Vulnerabilities in every device we audited</p>
    <p>We found vulnerabilities in every device we audited</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Embedded devices insecurity</p>
    <p>WebDroid a secure web framework for embedded devices</p>
  </div>
  <div class="page">
    <p>Audit</p>
  </div>
  <div class="page">
    <p>Audit methodology</p>
  </div>
  <div class="page">
    <p>Audit methodology</p>
    <p>Brands</p>
  </div>
  <div class="page">
    <p>Audit methodology</p>
    <p>Device types</p>
    <p>Brands</p>
  </div>
  <div class="page">
    <p>Audit methodology</p>
    <p>Device types</p>
    <p>Vulnerability types</p>
    <p>Brands</p>
  </div>
  <div class="page">
    <p>Overall audit results</p>
  </div>
  <div class="page">
    <p>Overall audit results</p>
    <p>8 categories of devices</p>
  </div>
  <div class="page">
    <p>Overall audit results</p>
    <p>8 categories of devices</p>
    <p>16 different brands</p>
  </div>
  <div class="page">
    <p>Overall audit results</p>
    <p>8 categories of devices</p>
    <p>16 different brands</p>
    <p>30+ devices</p>
  </div>
  <div class="page">
    <p>Overall audit results</p>
    <p>8 categories of devices</p>
    <p>16 different brands</p>
    <p>30+ devices</p>
    <p>50+ vulnerabilities reported to CERT</p>
  </div>
  <div class="page">
    <p>My desk ...</p>
  </div>
  <div class="page">
    <p>Brands</p>
  </div>
  <div class="page">
    <p>Devices audited by brand</p>
    <p>Brand Camera LOM NAS Phone Photo Frame Printer Router Switch</p>
    <p>Allied  Buffalo   Belkin  D-Link    Dell  eStarling  HP  IBM  Intel  Kodak  LaCie  Linksys     Netgear   SMS networks  Panasonic  QNAP  Samsung  SMC  TrendNet   ZyXEL</p>
    <p>Table 1: List of devices by brand.</p>
    <p>XCS. A Cross-Channel Scripting attack [9] comprises two steps, as shown in Figure 2. In the first step the</p>
    <p>attacker uses a non-web communication channel such as</p>
    <p>FTP or SNMP to store malicious JavaScript code on the</p>
    <p>server. In the second step, the malicious content is sent</p>
    <p>to the victim via the Web interface. XCS vulnerabilities are prevalent in embedded devices since they typically</p>
    <p>expose multiple services beyond HTTP. XCS bugs often</p>
    <p>affect the interaction between two specific protocols only</p>
    <p>(such as the combination of HTTP and BitTorrent), which</p>
    <p>can make them harder to detect.</p>
    <p>Reverse XCS. In a Reverse XCS attack the web interface is used to attack another service on the device. We</p>
    <p>primarily use reverse XCS attacks to exfiltrate data that is</p>
    <p>protected by an access control mechanism.</p>
    <p>We did not look for SQL injections [21], as it was un</p>
    <p>likely that the audited devices would contain a SQL server.</p>
    <p>However we still consider SQL injection attack to be a</p>
    <p>potential threat and therefore our framework has security</p>
    <p>mechanisms in place to mitigate them. Finally, while in</p>
    <p>some cases we found weaknesses in the networking stack</p>
    <p>(for example: predictable Initial Sequenced Numbers),</p>
    <p>we do not discuss that topic here.</p>
    <p>The audit of each device was done in three phases. First,</p>
    <p>we performed a general assessment using NMap [31] and Nessus [42]. Next, we tested the web management interface using Firefox and several of its extensions: Firebug [20], Tamper Data [26], and Edit Cookies [51]. We used a custom tool for CSRF analysis. In the third phase we</p>
    <p>tested for XCS using hand written scripts and command</p>
    <p>line tools such as smbclient.</p>
    <p>Table 2 summarizes which classes of vulnerabilities</p>
    <p>were found for each type of device. We use the</p>
    <p>symbol when one device is vulnerable to this class of attacks and when multiples devices in the class are vulnerable. The second column from the left indicates</p>
    <p>the number of devices tested in that category. We sur</p>
    <p>vey the most interesting vulnerabilities in the next section.</p>
    <p>Table 2 shows that the NAS category exhibits the</p>
    <p>most vulnerabilities, which can be expected given the</p>
    <p>complexity of these devices. We were surprised by the</p>
    <p>large number of vulnerabilities in photo frames, which</p>
    <p>are relatively simple devices.</p>
  </div>
  <div class="page">
    <p>Vulnerabilities by device</p>
    <p>Type # Devices XSS CSRF XCS RXCS File Auth LOM 3     NAS 5       Photo frame 3       Router 8      IP camera 3    IP phone 1     Switch 4     Printer 1</p>
    <p>Table 2: Vulnerability classes by device type.</p>
    <p>A possible explanation is that vendors rushed to market in order to grab market share with new features. Indeed, in the Kodak photo frame, half the Web interface is protected against XSS while the other half is completely vulnerable. IP cameras and routers are more mature, and therefore tend to have a better security. Table 2 also shows that even enterprise-grade devices such as switches, printers, and LOM are vulnerable to a variety of attacks, which is a concern as they are usually deployed into sensitive environments such as server rooms.</p>
    <p>Our audit showed that embedded web management interfaces pose a serious security threat and are currently one of the weakest links in home and office networks. In this section we formalize our attacker model and the security objectives that our framework aims at achieving.</p>
    <p>exploits or brute force the authentication. Finally, we also assume that the attacker will be able to manipulate any non-encrypted session to his advantage.</p>
    <p>Enforcing access control. The first goal of our framework is to ensure that only the right principals have access to the right data. Access control enforcement needs to be enforced at multiple levels. First, at the network level, our framework needs to ensure that the web interface is only available in the right physical or network location and to the right clients. At the application level, it means that the framework needs to ensure that every web resource is properly protected and that the attacker can not bruteforce user passwords. Finally, at the user level it also means that the framework offers to the user the ability to declare whether a specific client is allowed to access a given web application.</p>
    <p>Protecting session state. Protecting session state ensures that once a session is established with the framework, only the authenticated user is accessing the session. At the network level, protecting the session state implies preventing man in the middle attacks by enforcing the use of SSL. At the HTTP level, protecting the session means protecting the session cookies from being leaked over HTTP (as in the Sidejacking attack) or being read via JavaScript (XSS).</p>
    <p>Deflecting direct web attacks. Deflecting direct web attacks requires that our framework is not vulnerable to buffer overflow or at least that the privileges gained in case of successful exploitation are limited. At the application level, the framework must be able to mitigate XSS [13], and SQL injection attacks [21].</p>
  </div>
  <div class="page">
    <p>Toward a secure world ?</p>
  </div>
  <div class="page">
    <p>Toward a secure world ?</p>
    <p>WEP</p>
  </div>
  <div class="page">
    <p>Toward a secure world ?</p>
    <p>WEP WPA</p>
  </div>
  <div class="page">
    <p>Toward a secure world ?</p>
    <p>WEP WPA</p>
    <p>Secret key are still stored via a web interface</p>
  </div>
  <div class="page">
    <p>Some routers</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Browser same origin policy (SOP)</p>
    <p>http://evil.com http://192.168.0.1 (router)</p>
  </div>
  <div class="page">
    <p>Browser same origin policy (SOP)</p>
    <p>Post</p>
    <p>http://evil.com http://192.168.0.1 (router)</p>
  </div>
  <div class="page">
    <p>Browser same origin policy (SOP)</p>
    <p>Read</p>
    <p>Post</p>
    <p>http://evil.com http://192.168.0.1 (router)</p>
  </div>
  <div class="page">
    <p>Internet</p>
    <p>Getting the key from a web page</p>
    <p>.js</p>
  </div>
  <div class="page">
    <p>Internet</p>
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
    <p>&lt;img src=e.jpg/&gt;</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
    <p>&lt;script src=http://badguy.com/script.js/&gt;</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
    <p>&lt;script src=http://badguy.com/script.js/&gt;</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Getting the key from a web page</p>
  </div>
  <div class="page">
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Internet</p>
  </div>
  <div class="page">
    <p>WPA Breaker demo</p>
  </div>
  <div class="page">
    <p>Netgear FS750T2</p>
    <p>Intelligent switch  Configured via Web</p>
    <p>Cross Site Request Forgery (CSRF) illustrated</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>CSRF illustrated</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>VoIP phone</p>
    <p>Linksys SPA942  Web interface  SIP support  Call logs</p>
    <p>SIP XCS</p>
  </div>
  <div class="page">
    <p>SIP XCS</p>
  </div>
  <div class="page">
    <p>SIP XCS</p>
  </div>
  <div class="page">
    <p>SIP XCS</p>
  </div>
  <div class="page">
    <p>SIP XCS</p>
    <p>Internet</p>
    <p>&lt;script src=&quot;//evil.com/&quot;&gt;&lt;/script&gt;</p>
  </div>
  <div class="page">
    <p>SOHO NAS</p>
    <p>Buffalo LS-CHL  BitTorrent support!</p>
    <p>NAS device</p>
  </div>
  <div class="page">
    <p>Massive exploitation</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Massive exploitation</p>
    <p>Internet</p>
    <p>Create a bad torrent</p>
    <p>Famous_movie.torrent</p>
  </div>
  <div class="page">
    <p>Massive exploitation</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Massive exploitation</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>Massive exploitation</p>
    <p>Internet</p>
    <p>takeover</p>
  </div>
  <div class="page">
    <p>Massive exploitation</p>
    <p>Internet</p>
    <p>takeover</p>
    <p>takeover</p>
  </div>
  <div class="page">
    <p>Peer-to-peer XCS attack result</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>WebDroid</p>
  </div>
  <div class="page">
    <p>Embedded device usage model</p>
    <p>Mono user (almost)</p>
    <p>Performance are not critical</p>
    <p>Limited resources</p>
    <p>Clean slate</p>
  </div>
  <div class="page">
    <p>Embedded device usage model</p>
    <p>Mono user (almost)</p>
    <p>Performance are not critical</p>
    <p>Limited resources</p>
    <p>Clean slate</p>
    <p>Lot of room to focus on security !</p>
  </div>
  <div class="page">
    <p>WebDroid big plan</p>
    <p>Create a framework integrated on android</p>
    <p>Focus on security not performance</p>
    <p>View the framework as a firewall</p>
    <p>Use android as a starting point (Java framework)</p>
  </div>
  <div class="page">
    <p>Security mechanisms</p>
    <p>Category Access control Session Direct attack Browser attack Defense/Threat Bypass Pass guess MITM Hijack XSS SQLi XCS RXCS CSRF Clickjack HTTP only cookie    Server side input filtering    CSP   S-CSP   CSRF random token   Origin header verification   X-FRAME-OPTION  JS frame-busting code  SSL   HSTS   Secure cookie  Parametrized queries  URL scanning Application-wide auth  Password policy  Anti brute-force  Restrict network/location           DOS protection</p>
    <p>Table 3: Threats and corresponding security mechanisms</p>
    <p>Server-side input filtering. Even though filtering or whitelisting of user input can fail if implemented incorrectly [3, 2, 1], it is still very important to sanitize user data before web pages are rendered with it. Input filtering can prevent scripting exploits as well as SQL injections. When applied to data coming from other embedded services, input filtering can also prevent many XCS attacks.</p>
    <p>CSP (Content Security Policy). Pages rendered by the typical embedded web application have little need to contact external web sites. Correspondingly our server is configured to offer restrictive CSP [14] directives to browsers, limiting the impact of any injected code in the page.</p>
    <p>S-CSP (Server-side Content Security Policy). For browsers that do not support CSP, we introduce Serverside CSP. While rendering a particular site, the server looks at the CSP directives present in the header (or the policy-uri) and modifies the HTML code accordingly. Instead of standard input filtering, the changes are based on the custom policies defined by the administrator: such as valid hosts for the different HTML elements, use of inlinescripts, eval functionality usage and so on. Its novelty lies in the fact that the resulting HTML page as received by the browser automatically becomes CSP compliant. In addition to filtering, S-CSP can also support reporting of CSP violations via report-uri directive which ordinarily is not possible for incompatible browsers.</p>
    <p>X-Frame-Options. Clickjacking is a serious emerging threat which is best handled by preventing web site framing. Since embedded web applications are usually not</p>
    <p>designed with mash-up scenarios in mind, setting the option to DENY is a good default configuration.</p>
    <p>JavaScript frame-busting. Not all browsers support the X-Frame-Options header, and therefore our framework automatically includes frame-busting code in JavaScript. The particular piece of code we use is as simple as possible and has been vetted for vulnerabilities typically found in such implementations [44].</p>
    <p>Random anti-CSRF token. Cross-site request forgery is another web application attack which is easy to prevent, but often not addressed in embedded settings. Our framework automatically injects random challenge tokens in links and forms pointing back at the web application, and checks the tokens on page access [39].</p>
    <p>Origin header verification. Along with checking CSRF tokens, we make sure that for requests that supply any parameters (either POST or GET) and include the Origin [5] or Referer header, the origin/referer values are as expected. We do this as a basic measure to prevent cross-site attacks. When the Referer header is available, we also check for cross-application attacks, making sure that each application is only accessed through its entry pages.</p>
    <p>SSL. Securing network communications often ends up being a low-priority item for application developers, and this is why our web server uses HTTPS exclusively by default, with a persistent self-signed certificate created during device initialization.</p>
  </div>
  <div class="page">
    <p>WebDroid in action</p>
  </div>
  <div class="page">
    <p>Benchmarks m</p>
    <p>ill is</p>
    <p>ec on</p>
    <p>ds</p>
    <p>Concurent connections 0 10 20 30 40 50 60 70 80 90 100 110 120 130</p>
    <p>Without security features With security feature</p>
    <p>Requests per second</p>
  </div>
  <div class="page">
    <p>Benchmarks m</p>
    <p>ill is</p>
    <p>ec on</p>
    <p>ds</p>
    <p>Concurent connections 0 10 20 30 40 50 60 70 80 90 100 110 120 130</p>
    <p>Without security features With security feature</p>
    <p>Requests per second</p>
    <p>m ill</p>
    <p>is ec</p>
    <p>on ds</p>
    <p>20</p>
    <p>Concurent connections 0 10 20 30 40 50 60 70 80 90 100 110 120 130</p>
    <p>Without security features With security feature</p>
    <p>Processing time</p>
  </div>
  <div class="page">
    <p>Thanks you !</p>
  </div>
  <div class="page">
    <p>Download WebDroid http://ly.tl/webdroid</p>
    <p>Follow-us on Twitter @elie, @bapt1ste</p>
    <p>Questions ?</p>
  </div>
</Presentation>
