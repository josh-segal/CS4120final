<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Large-Scale Graph Processing on Emerging Storage Devices</p>
    <p>Nima Elyasi1, Changho Choi2, Anand Sivasubramaniam1</p>
  </div>
  <div class="page">
    <p>Graph Processing is Commonplace</p>
    <p>Search Engines Social Media Recommendations</p>
    <p>and Ads Map and</p>
    <p>Navigation</p>
  </div>
  <div class="page">
    <p>Large-Scale Graph Processing Challenges</p>
    <p>Huge Datasets Irregular Accesses</p>
    <p>High cost of DRAM</p>
    <p>$$$$</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Large-Scale Graph Processing Challenges</p>
    <p>Huge Datasets Irregular Accesses</p>
    <p>External Graph Processing is Desirable</p>
    <p>High cost of DRAM</p>
    <p>$$$$</p>
    <p>NVMe SSD</p>
    <p>$</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Large-Scale Graph Processing Challenges</p>
    <p>Huge Datasets Irregular Accesses</p>
    <p>External Graph Processing is Desirable</p>
    <p>High cost of DRAM</p>
    <p>$$$$</p>
    <p>NVMe SSD</p>
    <p>$</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Large-Scale Graph Processing Challenges</p>
    <p>Huge Datasets Irregular Accesses</p>
    <p>External Graph Processing is Desirable</p>
    <p>High cost of DRAM</p>
    <p>$$$$</p>
    <p>NVMe SSD Fine-Grained and Random</p>
    <p>Accesses</p>
    <p>$</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Fine-Grained Access in External Graph Processing</p>
    <p>SSD Page Size and Vertex Accesses Dont Match!</p>
    <p>SSD Page 0 SSD Page 1</p>
    <p>SSD Page</p>
    <p>Several KiloBytes (4KB ~ 16KB) Several Bytes,</p>
    <p>e.g., 4Bytes</p>
    <p>Vertex Value</p>
    <p>Irregular Accesses</p>
  </div>
  <div class="page">
    <p>Fine-Grained Access in External Graph Processing</p>
    <p>SSD Page Size and Vertex Accesses Dont Match!</p>
    <p>SSD Page 0 SSD Page 1</p>
    <p>SSD Page</p>
    <p>Several KiloBytes (4KB ~ 16KB)</p>
    <p>Vertex updates are detrimental to:</p>
    <p>Performance Device Endurance</p>
    <p>Several Bytes, e.g., 4Bytes</p>
    <p>Vertex Value</p>
    <p>Irregular Accesses</p>
  </div>
  <div class="page">
    <p>Providing Perfect Sequentiality as a Remedy</p>
    <p>If vertex data could be stored on DRAM  Fine-grained accesses was less of an issue</p>
    <p>GraFBoost, ISCA18Instead, prior external graph processing framework maintains vertex data on SSD</p>
  </div>
  <div class="page">
    <p>Providing Perfect Sequentiality as a Remedy</p>
    <p>If vertex data could be stored on DRAM  Fine-grained accesses was less of an issue</p>
    <p>GraFBoost, ISCA18Instead, prior external graph processing framework maintains vertex data on SSD</p>
    <p>Achieves perfect sequentiality by coalescing fine-grained accesses</p>
  </div>
  <div class="page">
    <p>Programming Model</p>
    <p>Vertex-centric Programming Model</p>
    <p>- Iterative programming model</p>
    <p>- Each vertex runs a user-defined program</p>
    <p>- Sending updates to neighbors along outgoing edges</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>Prior External Graph Processing -- GraFBoost</p>
    <p>Vertex Data Index File</p>
    <p>Edge File</p>
    <p>Sang-Woo Jun, et al. Grafboost: Using accelerated flash storage for external graph analytics, ISCA18.</p>
  </div>
  <div class="page">
    <p>Prior External Graph Processing -- GraFBoost</p>
    <p>V0  Vx V0  Vy V0  Vz</p>
    <p>Vertex Data Index File</p>
    <p>Edge File</p>
    <p>Sang-Woo Jun, et al. Grafboost: Using accelerated flash storage for external graph analytics, ISCA18.</p>
  </div>
  <div class="page">
    <p>Prior External Graph Processing -- GraFBoost</p>
    <p>Keys: {Vx , Vy , Vz}, Value: {V0 value}</p>
    <p>&lt;Vx,V0 value&gt;, &lt;Vy,V0 value&gt;, &lt;Vz,V0 value&gt;</p>
    <p>V0  Vx V0  Vy V0  Vz</p>
    <p>Vertex Data Index File</p>
    <p>Edge File</p>
    <p>Sang-Woo Jun, et al. Grafboost: Using accelerated flash storage for external graph analytics, ISCA18.</p>
  </div>
  <div class="page">
    <p>Prior External Graph Processing -- GraFBoost</p>
    <p>Keys: {Vx , Vy , Vz}, Value: {V0 value}</p>
    <p>&lt;Vx,V0 value&gt;, &lt;Vy,V0 value&gt;, &lt;Vz,V0 value&gt;</p>
    <p>V0  Vx V0  Vy V0  Vz</p>
    <p>GraFBoost sorts key-value pairs in memory, logs them in SSD, merges them, and updates vertex list in SSD</p>
    <p>Vertex Data Index File</p>
    <p>Edge File</p>
    <p>Sang-Woo Jun, et al. Grafboost: Using accelerated flash storage for external graph analytics, ISCA18.</p>
  </div>
  <div class="page">
    <p>Computation Overhead of Sort!</p>
    <p>Up to 60% sort overhead (web graph)</p>
    <p>Higher sort overhead for PageRank - Processes all vertices in each iteration and generates more updates</p>
  </div>
  <div class="page">
    <p>Current External Graph Processing:</p>
    <p>Read from SSD Sort in Memory Write to SSD</p>
    <p>Linear Time O(|E|) |E|*log(|E|) Linear Time O(|E|)</p>
    <p>Scalability Issue</p>
  </div>
  <div class="page">
    <p>Current External Graph Processing:</p>
    <p>Read from SSD Sort in Memory Write to SSD</p>
    <p>Linear Time O(|E|) |E|*log(|E|) Linear Time O(|E|)</p>
    <p>Assuming DRAM k times faster than SSD (e.g., k=30):</p>
    <p>Scalability Issue</p>
    <p>When k &lt; log(|E|)  Sorting can become bottleneck</p>
  </div>
  <div class="page">
    <p>Current External Graph Processing:</p>
    <p>Read from SSD Sort in Memory Write to SSD</p>
    <p>Linear Time O(|E|) |E|*log(|E|) Linear Time O(|E|)</p>
    <p>Assuming DRAM k times faster than SSD (e.g., k=30):</p>
    <p>Scalability Issue</p>
    <p>When k &lt; log(|E|)  Sorting can become bottleneck</p>
  </div>
  <div class="page">
    <p>Current External Graph Processing:</p>
    <p>Read from SSD Sort in Memory Write to SSD</p>
    <p>Linear Time O(|E|) |E|*log(|E|) Linear Time O(|E|)</p>
    <p>Assuming DRAM k times faster than SSD (e.g., k=30):</p>
    <p>Scalability Issue</p>
    <p>When k &lt; log(|E|)  Sorting can become bottleneck</p>
    <p>Instead, we propose a vertex partitioning to eliminate the sorting</p>
  </div>
  <div class="page">
    <p>Extensive Prior Efforts on Partitioning Graph Data:</p>
    <p>- Not well suited for fully external graph processing</p>
    <p>Partitioning Graph Data</p>
    <p>Require all vertices be present in main memory</p>
    <p>Do not decouple vertices and edges</p>
    <p>FlashGraph, FAST15 GraphChi, OSDI12, Mosaic, EuroSys17</p>
    <p>PowerGraph, OSDI12 GridGraph, USENIX ATC15</p>
    <p>GraphP, HPCA18</p>
    <p>Need each partition be completely present in</p>
    <p>cache or memory</p>
    <p>Dramatically increasing number of partitions and incurring high cross</p>
    <p>partition communication</p>
  </div>
  <div class="page">
    <p>Reorganizing graph data so that vertices associated with each partition can fit in main memory</p>
    <p>Instead, We Propose a Partitioning for Vertex Data</p>
    <p>Source Vertices</p>
    <p>Destination Vertices</p>
  </div>
  <div class="page">
    <p>Reorganizing graph data so that vertices associated with each partition can fit in main memory</p>
    <p>Instead, We Propose a Partitioning for Vertex Data</p>
    <p>S o u</p>
    <p>r c e V</p>
    <p>e r te</p>
    <p>x D</p>
    <p>a ta</p>
    <p>Vertex ID &amp;</p>
    <p>Value Index</p>
    <p>Vertex A Offset A</p>
    <p>Vertex B Offset B</p>
    <p>Vertex C Offset C</p>
    <p>Partition 0</p>
    <p>S o</p>
    <p>r te</p>
    <p>d B</p>
    <p>a se</p>
    <p>d o</p>
    <p>n V</p>
    <p>e r te</p>
    <p>x ID</p>
    <p>Edge Data</p>
    <p>Vertex A</p>
    <p>Out-edge</p>
    <p>Vertex A</p>
    <p>Out-edge</p>
    <p>Vertex B</p>
    <p>Out-edge</p>
    <p>Vertex C</p>
    <p>Out-edge</p>
    <p>Source Vertices</p>
    <p>Destination Vertices</p>
  </div>
  <div class="page">
    <p>In each iteration:</p>
    <p>Execution Flow</p>
    <p>SSD</p>
    <p>Vertex Data</p>
    <p>Destination</p>
    <p>Vertex for a</p>
    <p>partition</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>In each iteration:</p>
    <p>Execution Flow</p>
    <p>S o u</p>
    <p>r c e V</p>
    <p>e r te</p>
    <p>x D</p>
    <p>a ta</p>
    <p>Vertex ID &amp;</p>
    <p>Value Index</p>
    <p>Vertex A Offset A</p>
    <p>Vertex B Offset B</p>
    <p>Vertex C Offset C</p>
    <p>Partition 0</p>
    <p>SSD</p>
    <p>Vertex Data</p>
    <p>Destination</p>
    <p>Vertex for a</p>
    <p>partition</p>
    <p>A Chunk</p>
    <p>of Source</p>
    <p>Vertex</p>
    <p>(32MB)</p>
    <p>Update Destination</p>
    <p>Vertices</p>
    <p>Reading</p>
    <p>Neighboring</p>
    <p>Information</p>
    <p>Memory Memory</p>
    <p>S tr</p>
    <p>e a m</p>
    <p>in g F</p>
    <p>r o m</p>
    <p>S S</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>In each iteration:</p>
    <p>Execution Flow</p>
    <p>S o u</p>
    <p>r c e V</p>
    <p>e r te</p>
    <p>x D</p>
    <p>a ta</p>
    <p>Vertex ID &amp;</p>
    <p>Value Index</p>
    <p>Vertex A Offset A</p>
    <p>Vertex B Offset B</p>
    <p>Vertex C Offset C</p>
    <p>Partition 0</p>
    <p>SSD</p>
    <p>Vertex Data</p>
    <p>Destination</p>
    <p>Vertex for a</p>
    <p>partition</p>
    <p>A Chunk</p>
    <p>of Source</p>
    <p>Vertex</p>
    <p>(32MB)</p>
    <p>Write all</p>
    <p>updated</p>
    <p>vertex data</p>
    <p>on SSD</p>
    <p>Update Destination</p>
    <p>Vertices</p>
    <p>Reading</p>
    <p>Neighboring</p>
    <p>Information</p>
    <p>Generate Mirror Updates</p>
    <p>for other partitions</p>
    <p>Meta</p>
    <p>data for</p>
    <p>current</p>
    <p>partition</p>
    <p>Memory Memory Memory</p>
    <p>S tr</p>
    <p>e a m</p>
    <p>in g F</p>
    <p>r o m</p>
    <p>S S</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>In each iteration:</p>
    <p>Execution Flow</p>
    <p>S o u</p>
    <p>r c e V</p>
    <p>e r te</p>
    <p>x D</p>
    <p>a ta</p>
    <p>Vertex ID &amp;</p>
    <p>Value Index</p>
    <p>Vertex A Offset A</p>
    <p>Vertex B Offset B</p>
    <p>Vertex C Offset C</p>
    <p>Partition 0</p>
    <p>SSD</p>
    <p>Vertex Data</p>
    <p>Destination</p>
    <p>Vertex for a</p>
    <p>partition</p>
    <p>A Chunk</p>
    <p>of Source</p>
    <p>Vertex</p>
    <p>(32MB)</p>
    <p>Write all</p>
    <p>updated</p>
    <p>vertex data</p>
    <p>on SSD</p>
    <p>Update Destination</p>
    <p>Vertices</p>
    <p>Reading</p>
    <p>Neighboring</p>
    <p>Information</p>
    <p>Generate Mirror Updates</p>
    <p>for other partitions</p>
    <p>Meta</p>
    <p>data for</p>
    <p>current</p>
    <p>partition</p>
    <p>Memory Memory Memory</p>
    <p>S tr</p>
    <p>e a m</p>
    <p>in g F</p>
    <p>r o m</p>
    <p>S S</p>
    <p>D</p>
    <p>How to Update Vertex List in Main Memory?</p>
  </div>
  <div class="page">
    <p>Multiple threads are updating elements of the same vertex list - High synchronization cost</p>
    <p>Updating Vertices in Memory</p>
    <p>Vertex List</p>
  </div>
  <div class="page">
    <p>Multiple threads are updating elements of the same vertex list - High synchronization cost</p>
    <p>Updating Vertices in Memory</p>
    <p>Vertex List</p>
    <p>Buffer,</p>
    <p>e.g., 1MB</p>
  </div>
  <div class="page">
    <p>Required Meta-Data for Mirror Updates</p>
    <p>Updating Vertex Mirrors on Different Partitions</p>
    <p>Vertex Value</p>
    <p>Partition i</p>
    <p>Mirrors for</p>
    <p>Partition 0</p>
    <p>Source Vertex Table</p>
    <p>Vertex 0</p>
    <p>Part ID(s)</p>
    <p>Vertex 1</p>
    <p>Part ID(s)</p>
    <p>Vertex 2</p>
    <p>Part ID(s)</p>
    <p>Partition 0</p>
    <p>Start Index</p>
    <p>End Index</p>
    <p>Partition i</p>
    <p>Start Index</p>
    <p>End Index</p>
    <p>For each</p>
    <p>partition</p>
    <p>Metadata</p>
    <p>For each</p>
    <p>Vertex Start Index</p>
    <p>End Index</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Processor: Intel Xeon -- 48 Cores</p>
    <p>Memory: DRAM  256 GB</p>
    <p>SSD: Two Samsung NVMe SSDs - 3.2 TB capacity in total, and 6.4 GB/s Sequential Read Speed</p>
    <p>Graph Algorithms: - PageRank and Breadth-First-Search (BFS)</p>
    <p>Input Graphs: - Web, Twitter, Synthetic (Kron)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>More than 2X Improvement Compared to GrafSoft</p>
    <p>Providing Higher Benefits for larger graphs (Web, Kron32)</p>
    <p>Incurring around 10% space overhead for partitioning</p>
  </div>
  <div class="page">
    <p>Execution Time Breakdown</p>
    <p>Mirror updates account for 8-12% of execution time</p>
    <p>I/O does not remain the main contributor to the total execution time</p>
    <p>PageRank</p>
  </div>
  <div class="page">
    <p>Concluding Remarks</p>
    <p>Large-scale graph processing suffers from random updates to vertices</p>
    <p>State-of-the-art provides perfect sequentiality by sorting all updates</p>
    <p>- High computation overhead</p>
    <p>A partitioning for vertex data is proposed to eliminate the need for perfect sequentiality</p>
    <p>In Future: Addressing timely evolving graphs</p>
    <p>Thanks to GraFboost authors (Sang-Woo Jun) ! 34</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
