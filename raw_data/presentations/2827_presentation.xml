<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>OS Kernel Support for a Low-Overhead Container Overlay Network</p>
    <p>Danyang Zhuo, Kaiyuan Zhang, Yibo Zhu, Hongqiang Harry Liu Matthew Rockett, Arvind Krishnamurthy, Thomas Anderson</p>
  </div>
  <div class="page">
    <p>Containers are ubiquitous</p>
    <p>Cache</p>
    <p>Web server</p>
    <p>Database</p>
    <p>Big data</p>
    <p>Deep learning</p>
    <p>Microservice</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>OS OS</p>
    <p>App App</p>
    <p>Hardware</p>
    <p>Container</p>
    <p>OS</p>
    <p>App App</p>
  </div>
  <div class="page">
    <p>How do containers communicate?  Host mode  Use the host network interface to communicate</p>
    <p>Macvlan mode (or SR-IOV)  Make containers IP address routable on the host network</p>
    <p>Overlay mode  Container network virtualization</p>
    <p>Two containers cannot bind to the same port.</p>
    <p>Complicates host network routing</p>
    <p>Are the network virtualization overheads fundamental?High overheads</p>
  </div>
  <div class="page">
    <p>In this talk</p>
    <p>Existing approach: Packet-based network virtualization results in high overheads.</p>
    <p>Slim: connection-based network virtualization that is compatible with existing Linux applications.</p>
    <p>Saving up to 56% CPU cycles on popular cloud applications (e.g., Memcached, Nginx, PostgreSQL, Apache Kafka).</p>
  </div>
  <div class="page">
    <p>Container network virtualization</p>
    <p>Container A</p>
    <p>Container B</p>
    <p>Host 10.1.2.3</p>
    <p>Container C</p>
    <p>Container D</p>
    <p>Host 10.1.2.4</p>
    <p>vSwitch vSwitch</p>
    <p>Give a set of containers an illusion of owning a dedicated network.</p>
  </div>
  <div class="page">
    <p>Container network virtualization</p>
    <p>Container A</p>
    <p>Container B</p>
    <p>Host 10.1.2.3</p>
    <p>Container C</p>
    <p>Container D</p>
    <p>Host 10.1.2.4</p>
    <p>vSwitch vSwitch Data1.2.3.7</p>
  </div>
  <div class="page">
    <p>Container network virtualization</p>
    <p>Host 10.1.2.3 Host 10.1.2.4</p>
    <p>vSwitch vSwitch Data1.2.3.710.1.2.4</p>
    <p>Container A</p>
    <p>Container B</p>
    <p>Container C</p>
    <p>Container D</p>
  </div>
  <div class="page">
    <p>Container network virtualization</p>
    <p>Host 10.1.2.3 Host 10.1.2.4</p>
    <p>vSwitch vSwitch Data1.2.3.7</p>
    <p>Packet-based network virtualization</p>
    <p>Container A</p>
    <p>Container B</p>
    <p>Container C</p>
    <p>Container D</p>
  </div>
  <div class="page">
    <p>Why packet-based virtualization?</p>
    <p>Host 10.1.2.3 Host 10.1.2.4</p>
    <p>vSwitch vSwitch</p>
    <p>Container A</p>
    <p>Container B</p>
    <p>Container C</p>
    <p>Container D</p>
  </div>
  <div class="page">
    <p>Performance overheads</p>
    <p>Setup Throughput Latency (RTT)</p>
    <p>Intra, Host 48.4 Gbps 5.9 us</p>
    <p>Intra, Container 37.4 Gbps (23%) 7.9 us (34%)</p>
    <p>Inter, Host 26.8 Gbps 11.3 us</p>
    <p>Inter, Container 14.0 Gbps (48%) 20.9 us (85%)</p>
    <p>Intel Xeon E5-2680 (2.5 GHz), Linux 4.4, Intel XL710 NIC (40G).</p>
  </div>
  <div class="page">
    <p>Performance overheads</p>
    <p>Setup Throughput Latency (RTT)</p>
    <p>Vanilla 14.0 Gbps (48%) 20.9 us (85%)</p>
    <p>Improved 24.5 Gbps (9%) 21.2 us (88%)</p>
    <p>Host 26.8 Gbps 11.3 us</p>
    <p>Packet steering</p>
  </div>
  <div class="page">
    <p>CPU overheads, 10 Gbps</p>
    <p>Vanilla Improved Host</p>
    <p>Vi rtu</p>
    <p>al C</p>
    <p>or es 93%</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization</p>
    <p>Host 10.1.2.3 Host 10.1.2.4</p>
    <p>vSwitch vSwitch</p>
    <p>Container A</p>
    <p>Container B</p>
    <p>Container C</p>
    <p>Container D</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization</p>
    <p>Container A</p>
    <p>Host 10.1.2.3</p>
    <p>vSwitch</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization Container A Host</p>
    <p>Application  Socket  Accept  Connect  Send  Recv  Close  .  .</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>POSIX Socket interface</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization Container A Host</p>
    <p>Application  Start (Target IP)  Send (Buffer)  Recv (Buffer)  End</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Container A</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Packet-based virtualization Host</p>
    <p>File descriptor</p>
    <p>A capability to send/receive packets to/from 1.2.3.7 through vNIC.</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Container A</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Packet-based virtualization Host</p>
    <p>File descriptor</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Network stack (vNIC) Connections:  Con: 1.2.3.4 &lt;-&gt; 1.2.3.7</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization Container A Host</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>ABC A1.2.3.7</p>
    <p>B1.2.3.7 C1.2.3.7</p>
    <p>Network stack (vNIC) Connections:  Con: 1.2.3.4 &lt;-&gt; 1.2.3.7</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization Container A Host</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>A1.2.3.710.1.2.4 B1.2.3.710.1.2.4</p>
    <p>C1.2.3.710.1.2.4 ABC</p>
    <p>Network stack (vNIC) Connections:  Con: 1.2.3.4 &lt;-&gt; 1.2.3.7</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Packet-based virtualization Container A Host</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>ABC</p>
    <p>Network stack (vNIC) Connections:  Con: 1.2.3.4 &lt;-&gt; 1.2.3.7</p>
    <p>Packet generation, Device driver</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>In this talk</p>
    <p>Existing approach: Packet-based network virtualization results in high overheads.</p>
    <p>Slim: connection-based network virtualization that is compatible with existing Linux applications.</p>
    <p>Saving up to 56% CPU cycles on popular cloud applications (e.g., Memcached, Nginx, PostgreSQL, Apache Kafka).</p>
  </div>
  <div class="page">
    <p>Slim: connection-based virtualization Container A Host</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>ABC</p>
    <p>Network stack (vNIC) Connections:  Con: 1.2.3.4 &lt;-&gt; 1.2.3.7</p>
    <p>Packet generation, Device driver</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Slim: connection-based virtualization Container A Host</p>
    <p>vSwitch NIC10.1.2.3 vNIC</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>ABC</p>
    <p>Network stack (vNIC) Connections:  Con: 1.2.3.4 &lt;-&gt; 1.2.3.7</p>
    <p>Packet generation, Device driver</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Slim: connection-based virtualization Container A Host</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>ABC</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Challenge #1: Network virtualization Container A Host</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
    <p>How to give the container an illusion of a dedicated network?</p>
    <p>Whats 1.2.3.7?</p>
  </div>
  <div class="page">
    <p>Challenge #2: Compatibility Container A Host</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
    <p>How to work with unmodified applications?</p>
    <p>Wheres my NIC?</p>
  </div>
  <div class="page">
    <p>Challenge #3: Network Policies Container A Host</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>ABC</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
    <p>How do we enforce network policies?</p>
  </div>
  <div class="page">
    <p>Challenge #4: Security Container A Host</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Tell me my IP address Network stack (NIC)</p>
    <p>Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
    <p>How do we enforce security?</p>
  </div>
  <div class="page">
    <p>Slim: connection-based virtualization Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Slim: connection-based virtualization Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:  Con: 10.1.2.3 &lt;-&gt;10.1.2.4</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter  1.2.3.4 &lt;-&gt; 1.2.3.7 is</p>
    <p>mapped to 10.1.2.3 &lt;-&gt; 10.1.2.4</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Slim: connection-based virtualization Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:  Con: 10.1.2.3 &lt;-&gt;10.1.2.4</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter  1.2.3.4 &lt;-&gt; 1.2.3.7 is</p>
    <p>mapped to 10.1.2.3 &lt;-&gt; 10.1.2.4</p>
    <p>ABC</p>
    <p>A10.1.2.4 B10.1.2.4</p>
    <p>C10.1.2.4</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Slim: compatibility Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:  Con: 10.1.2.3 &lt;-&gt;10.1.2.4</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter  1.2.3.4 &lt;-&gt; 1.2.3.7 is</p>
    <p>mapped to 10.1.2.3 &lt;-&gt; 10.1.2.4</p>
    <p>SlimSocket</p>
    <p>Dynamically linked</p>
    <p>Container D 1.2.3.7</p>
    <p>Host 10.1.2.4</p>
  </div>
  <div class="page">
    <p>Container</p>
    <p>sock = socket()</p>
    <p>bind(sock, 1.2.3.4, 80)</p>
    <p>con = accept(sock,</p>
    <p>addr)</p>
    <p>send(con, buf)</p>
    <p>recv(con, buf)</p>
    <p>SlimRouter</p>
    <p>h_s = socket()</p>
    <p>bind(h_s, 10.1.2.3, 1234)</p>
    <p>h_c = accept(h_s, addr)</p>
    <p>h_c</p>
    <p>SlimRouter</p>
    <p>h_s = socket()</p>
    <p>connect(h_s, 10.1.2.3, 1234)</p>
    <p>Container</p>
    <p>con = socket()</p>
    <p>connect(con, 1.2.3.4, 80)</p>
    <p>recv(con, buf)</p>
    <p>send(con, buf)</p>
    <p>NIC</p>
    <p>IP = 10.1.2.3</p>
    <p>Slim Socket</p>
    <p>Slim Socket</p>
    <p>dup2(h_s, con)</p>
    <p>h_s</p>
    <p>h_s</p>
    <p>listen(sock)</p>
    <p>dup2(h_c, con)</p>
    <p>listen(h_s)</p>
    <p>h_s</p>
    <p>h_s</p>
    <p>h_s</p>
    <p>(a) Web server (b) Web client</p>
    <p>NIC</p>
    <p>IP = 10.1.2.4</p>
    <p>Host connection created.</p>
  </div>
  <div class="page">
    <p>Container</p>
    <p>sock = socket()</p>
    <p>bind(sock, 1.2.3.4, 80)</p>
    <p>con = accept(sock,</p>
    <p>addr)</p>
    <p>send(con, buf)</p>
    <p>recv(con, buf)</p>
    <p>SlimRouter</p>
    <p>h_s = socket()</p>
    <p>bind(h_s, 10.1.2.3, 1234)</p>
    <p>h_c = accept(h_s, addr)</p>
    <p>h_c</p>
    <p>SlimRouter</p>
    <p>h_s = socket()</p>
    <p>connect(h_s, 10.1.2.3, 1234)</p>
    <p>Container</p>
    <p>con = socket()</p>
    <p>connect(con, 1.2.3.4, 80)</p>
    <p>recv(con, buf)</p>
    <p>send(con, buf)</p>
    <p>NIC</p>
    <p>IP = 10.1.2.3</p>
    <p>Slim Socket</p>
    <p>Slim Socket</p>
    <p>dup2(h_s, con)</p>
    <p>h_s</p>
    <p>h_s</p>
    <p>listen(sock)</p>
    <p>dup2(h_c, con)</p>
    <p>listen(h_s)</p>
    <p>h_s</p>
    <p>h_s</p>
    <p>h_s</p>
    <p>(a) Web server (b) Web client</p>
    <p>NIC</p>
    <p>IP = 10.1.2.4</p>
    <p>Host connection</p>
  </div>
  <div class="page">
    <p>Slim: Support network policies Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter</p>
    <p>SlimSocket</p>
    <p>Reject a connection if destination IP = 1.2.3.7</p>
  </div>
  <div class="page">
    <p>Slim: Security enforcement Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:  Con: 10.1.2.3 &lt;-&gt;10.1.2.4</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter  1.2.3.4 &lt;-&gt; 1.2.3.7 is</p>
    <p>mapped to 10.1.2.3 &lt;-&gt; 10.1.2.4</p>
    <p>SlimSocket</p>
    <p>Con.GetMyIP() Con.IncreaseMyPriority()</p>
    <p>A capability to access NIC.</p>
  </div>
  <div class="page">
    <p>Slim: Security enforcement Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:  Con: 10.1.2.3 &lt;-&gt;10.1.2.4</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter  1.2.3.4 &lt;-&gt; 1.2.3.7 is</p>
    <p>mapped to 10.1.2.3 &lt;-&gt; 10.1.2.4</p>
    <p>SlimSocket</p>
    <p>Con.GetMyIP()Your IP is 1.2.3.4</p>
  </div>
  <div class="page">
    <p>Slim: Security enforcement Container A: 1.2.3.4</p>
    <p>NIC 10.1.2.3</p>
    <p>Application  Con = Start (1.2.3.7)  Con.Send(ABC)  Con.End()</p>
    <p>Host</p>
    <p>Network stack (NIC) Connections:  Con: 10.1.2.3 &lt;-&gt;10.1.2.4</p>
    <p>Packet generation, Device driver</p>
    <p>SlimRouter  1.2.3.4 &lt;-&gt; 1.2.3.7 is</p>
    <p>mapped to 10.1.2.3 &lt;-&gt; 10.1.2.4</p>
    <p>SlimSocket</p>
    <p>SlimKernModule</p>
    <p>Con.GetMyIP() Container 1.2.3.4</p>
    <p>is malicious. Request rejected.</p>
  </div>
  <div class="page">
    <p>In this talk</p>
    <p>Existing approach: Packet-based network virtualization results in high overheads.</p>
    <p>Slim: connection-based network virtualization that is compatible with existing Linux applications.</p>
    <p>Saving up to 56% CPU cycles on popular cloud applications (e.g., Memcached, Nginx, PostgreSQL, Apache Kafka).</p>
  </div>
  <div class="page">
    <p>Microbenchmark: performance</p>
    <p>Setup Throughput Latency (RTT)</p>
    <p>Vanilla 14.0 Gbps (48%) 20.9 us (85%)</p>
    <p>Improved 24.5 Gbps (9%) 21.2 us (88%)</p>
    <p>Slim 26.8 Gbps 11.4 us</p>
    <p>Host 26.8 Gbps 11.3 us</p>
  </div>
  <div class="page">
    <p>Microbenchmark: CPU</p>
    <p>Vi rtu</p>
    <p>al C</p>
    <p>or es</p>
    <p>TCP Throughput (Gbps)</p>
    <p>Improved Host Slim</p>
  </div>
  <div class="page">
    <p>Evaluation: applications</p>
    <p>In-memory key-value store  Memcached 1.5.6</p>
    <p>Web server  Nginx 1.10.3</p>
    <p>Database  PostgreSQL 9.5</p>
    <p>Stream-processing framework  Kafka 2.0.0</p>
  </div>
  <div class="page">
    <p>Vanilla Improved Slim Host 0</p>
    <p>T h ro</p>
    <p>u gh</p>
    <p>p u t</p>
    <p>(K )</p>
    <p>Evaluation: Memcached performance</p>
    <p>Vanilla Improved Slim Host 0.0</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s)</p>
  </div>
  <div class="page">
    <p>Improved Slim Host 0</p>
    <p>al C or</p>
    <p>es 363M reqs/s</p>
    <p>Evaluation: Memcached CPU</p>
    <p>CPU reduction: 56%</p>
  </div>
  <div class="page">
    <p>Evaluations: CPU</p>
    <p>Application CPU utilization reduction</p>
    <p>Memcached 56%</p>
    <p>Nginx 24%</p>
    <p>PostgreSQL 22%</p>
    <p>Apache Kafka 10%</p>
  </div>
  <div class="page">
    <p>Limitation</p>
    <p>Connection setup time is longer  270 us -&gt; 556 us</p>
    <p>Limited support for packet-based network policies</p>
    <p>Cannot support unmodified low-level network tools</p>
    <p>Cannot speed up datagram sockets (i.e., UDP)</p>
  </div>
  <div class="page">
    <p>Summary  Packet-based network virtualization results in high overheads in</p>
    <p>terms of throughput, latency, and CPU utilization.</p>
    <p>Slim integrates efficient connection-based network virtualization support natively into the OS network stack.  Saving up to 56% CPU cycles on popular cloud applications.</p>
    <p>Open sourced at https://github.com/danyangz/slim.</p>
  </div>
</Presentation>
