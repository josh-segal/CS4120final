<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Harendra Kumar, Yuvraj Patel, Ram Kesavan, Sumith Makam</p>
    <p>High-Performance Metadata Integrity Protection in the WAFL Copy-on-Write File System</p>
    <p>NetApp, Inc., University of Wisconsin-Madison</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Customer Data Center</p>
    <p>Freeing free block panic Support checklist  Start recovery run (fsck</p>
    <p>like tool)  Seek Engineering help</p>
    <p>root-cause the panic</p>
    <p>Recovery Run?</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Scribble bug or Logic bug?</p>
    <p>H/W fault or S/W bug?</p>
    <p>India USA</p>
    <p>How long the recovery run will take???</p>
    <p>Engineering</p>
    <p>When corruption happened?</p>
    <p>Customer</p>
  </div>
  <div class="page">
    <p>Summary  Bugs keep coming</p>
    <p>Hardware faults  Software bugs</p>
    <p>Important to protect metadata for correctness  Need of the hour</p>
    <p>Simple techniques for strong data integrity  No/negligible performance impact (deployable)  Diagnostic capability</p>
  </div>
  <div class="page">
    <p>Our Solution  Separate solutions for separate problems</p>
    <p>Deployed in production  Incremental checksum for scribble bugs  Digest-based transaction auditing for logic bugs</p>
    <p>In house  Page-level protection for diagnostics</p>
  </div>
  <div class="page">
    <p>Key Results  Techniques protect metadata</p>
    <p>Negligible performance impact  More than 3x reduction in recovery runs  Deployed in &gt; 250K systems worldwide</p>
    <p>Field data (~5 years)  33 systems protected from 8 unique scribble bugs  50 systems protected from 9 unique logic bugs</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Scribble protection  Page-level protection  Digest-based transaction audit  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Scribble protection  Aim: Avoid scribbles corrupting metadata  Rolling Incremental checksum on all metadata</p>
    <p>update</p>
  </div>
  <div class="page">
    <p>Incremental checksum example</p>
    <p>P Q R S T</p>
    <p>Time Indirect block loaded in memory</p>
    <p>P Q R S T</p>
    <p>Indirect block modified</p>
    <p>Incremental checksum = C</p>
    <p>P QR S T</p>
    <p>Incremental checksum = C</p>
    <p>Indirect block modified</p>
    <p>Just before persisting</p>
    <p>Compute Adler 32 bit checksum of the block = C</p>
    <p>Compare full checksum &amp; Incremental checksum</p>
    <p>On successful verification</p>
    <p>RAID/Storage</p>
    <p>Persist</p>
    <p>Incremental checksum computation is dependent on the amount of data modified</p>
    <p>and cache-line friendly</p>
    <p>Metadata updates  Small in Size  Frequent</p>
    <p>Concurrent incremental checksum computation possible without locks</p>
    <p>Adler 32 bit checksum of full block = C Incremental checksum initialized to C</p>
  </div>
  <div class="page">
    <p>Incremental checksum example</p>
    <p>P Q R S T</p>
    <p>Time Indirect block loaded in memory</p>
    <p>P Q R S T</p>
    <p>Adler 32 bit checksum of full block = C Incremental checksum = C</p>
    <p>Indirect block modified</p>
    <p>Incremental checksum = C</p>
    <p>P QR S T</p>
    <p>Incremental checksum = C</p>
    <p>Scribble bug Just before persisting</p>
    <p>Compute Adler 32 bit checksum of the block = C</p>
    <p>Compare full checksum &amp; Incremental checksum</p>
    <p>On verification failure</p>
    <p>Panic the system as there can be potential other metadata that is corrupted.</p>
    <p>Scribble ends up corrupting the indirect block.(Q  Q)</p>
    <p>Without incremental checksum, this scribble bug can lead to Freeing free block panic</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Scribble protection  Page-level protection  Digest-based transaction audit  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Page-level protection  Scribble bugs only caught at the end of CP  Difficult to root cause scribble bugs  Page permissions + Write Protect Enable (WP)</p>
    <p>bit  Keep pages read-only by default  Flip WP bit before and after modification</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Scribble protection  Page-level protection  Digest-based transaction audit  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Digest-based transaction auditing  Logic bugs and their nature  Distributed invariants  Consistency equations  Lightweight digest (transaction checksum)</p>
    <p>Maintain different digests for different invariants</p>
  </div>
  <div class="page">
    <p>Digest-based transaction auditing</p>
    <p>Inode</p>
    <p>A</p>
    <p>XYZB</p>
    <p>(A) (B) (C) (D) (E)</p>
    <p>B</p>
    <p>Client modifies inode A  Adds new block</p>
    <p>In-memory state of inode</p>
    <p>Inode</p>
    <p>A</p>
    <p>XYZB</p>
    <p>B</p>
    <p>PQR</p>
  </div>
  <div class="page">
    <p>Digest-based transaction auditing</p>
    <p>Inode</p>
    <p>A</p>
    <p>XYZB</p>
    <p>B</p>
    <p>PQR</p>
    <p>Inode</p>
    <p>D</p>
    <p>XYZB</p>
    <p>B C</p>
    <p>PQR</p>
    <p>(A) (B) (C) (D) (E)</p>
    <p>During CP</p>
    <p>B A</p>
    <p>During indirect block updates  Maintain blocks allocated</p>
    <p>digest D1 = C + D  Maintain blocks freed</p>
    <p>digest D2 = A</p>
    <p>C</p>
    <p>Freed block</p>
    <p>Allocated block</p>
    <p>During bitmap updates  Maintain blocks allocated</p>
    <p>digest D3 = C + D  Maintain blocks freed</p>
    <p>digest D4 = A End of CP</p>
    <p>Compare digests 1. D1 == D3 2. D2 == D4</p>
  </div>
  <div class="page">
    <p>Digest-based transaction auditing</p>
    <p>Inode</p>
    <p>A</p>
    <p>XYZB</p>
    <p>B</p>
    <p>PQR</p>
    <p>Inode</p>
    <p>D</p>
    <p>XYZB</p>
    <p>B C</p>
    <p>PQR</p>
    <p>(A) (B) (C) (D) (E)</p>
    <p>During CP</p>
    <p>B A</p>
    <p>During indirect block updates  Maintain blocks allocated</p>
    <p>digest D1 = C + D  Maintain blocks freed</p>
    <p>digest D2 = A</p>
    <p>C</p>
    <p>Freed block</p>
    <p>Allocated block</p>
    <p>During bitmap updates  Maintain blocks allocated</p>
    <p>digest D3 = C + D  Maintain blocks freed</p>
    <p>digest D4 = A End of CP</p>
    <p>Compare digests 1. D1 == D3 2. D2 == D4</p>
    <p>Digests are easy to maintain Lightweight - Strong one to one audit avoided</p>
  </div>
  <div class="page">
    <p>During bitmap updates  Maintain blocks allocated</p>
    <p>digest D3 = C  Maintain blocks freed</p>
    <p>digest D4 = A</p>
    <p>D not updated due to race</p>
    <p>Digest-based transaction auditing</p>
    <p>Inode</p>
    <p>A</p>
    <p>XYZB</p>
    <p>B</p>
    <p>PQR</p>
    <p>Inode</p>
    <p>D</p>
    <p>XYZB</p>
    <p>B C</p>
    <p>PQR</p>
    <p>(A) (B) (C) (D) (E)</p>
    <p>During CP</p>
    <p>BA</p>
    <p>During indirect block updates  Maintain blocks allocated</p>
    <p>digest D1 = C + D  Maintain blocks freed</p>
    <p>digest D2 = A</p>
    <p>C</p>
    <p>Freed block</p>
    <p>Allocated block</p>
    <p>End of CP Compare digests</p>
  </div>
  <div class="page">
    <p>During bitmap updates  Maintain blocks allocated</p>
    <p>digest D3 = C  Maintain blocks freed</p>
    <p>digest D4 = A</p>
    <p>D not updated due to race</p>
    <p>Digest-based transaction auditing</p>
    <p>Inode</p>
    <p>A</p>
    <p>XYZB</p>
    <p>B</p>
    <p>PQR</p>
    <p>Inode</p>
    <p>D</p>
    <p>XYZB</p>
    <p>B C</p>
    <p>PQR</p>
    <p>(A) (B) (C) (D) (E)</p>
    <p>During CP</p>
    <p>BA</p>
    <p>During indirect block updates  Maintain blocks allocated</p>
    <p>digest D1 = C + D  Maintain blocks freed</p>
    <p>digest D2 = A</p>
    <p>C</p>
    <p>Freed block</p>
    <p>Allocated block</p>
    <p>End of CP Compare digests</p>
    <p>Without Digest-based transaction auditing, this race can lead to Freeing free block panic</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Scribble protection  Page-level protection  Digest-based transaction audit  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Running on &gt;250K systems for 5+ years  Negligible regression on file server benchmarks</p>
    <p>(eg. SPEC FS)  Heavy metadata updates by DB workloads</p>
    <p>Database/OLTP benchmark (similar to SPC-1) built in-house</p>
  </div>
  <div class="page">
    <p>O bs er ve d La te nc y (m</p>
    <p>s)</p>
    <p>Achieved Throughput (IOPS)</p>
    <p>all off</p>
    <p>all on</p>
    <p>Performance Evaluation</p>
    <p>Incremental checksum + Digest-based transaction auditing performance 20+ audit equations</p>
    <p>Negligible throughput and latency until 120K ops</p>
    <p>25% Increase in latency - thereafter</p>
    <p>High range - 20 core, 128 GB DRAM, 8 GB NVRAM</p>
  </div>
  <div class="page">
    <p>Performance evaluation  Page level protection</p>
    <p>20% performance penalty  Used in-house (debug only kernels)  Only used once in field to catch a recurring</p>
    <p>scribble bug</p>
  </div>
  <div class="page">
    <p>Protection from corruption bugs  5 year data during in-house development</p>
    <p>Unit test data hard to gather  75 scribble bugs found by page-level protection  32 scribble bugs found by incremental checksum  23 logic bugs found by transaction auditing</p>
    <p>More than 3x reduction in no. of recovery runs across ONTAP 8.0 -&gt; 8.3</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Scribble protection  Page-level protection  Digest-based transaction audit  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion  Introduced two techniques to enforce data</p>
    <p>integrity with minimal performance impact  Disprove common belief - Strong data integrity</p>
    <p>requires high performance penalty  End-to-end protection applicable to databases,</p>
    <p>distributed applications  Concentrate more on innovation than worrying</p>
    <p>about data integrity</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions??? J</p>
  </div>
</Presentation>
