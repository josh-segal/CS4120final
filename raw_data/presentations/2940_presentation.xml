<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AppInsight: Mobile App Performance Monitoring in</p>
    <p>the Wild</p>
    <p>Lenin Ravindranath, Jitu Padhye, Sharad Agarwal, Ratul Mahajan, Ian Obermiller, Shahin Shayandeh</p>
    <p>Microsoft Research</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>&gt; One Million Apps&gt; One Million Apps</p>
    <p>&gt; 300,000 Developers&gt; 300,000 Developers</p>
  </div>
  <div class="page">
    <p>Theres an App For That</p>
    <p>Too slow - killing the usefulness when you really need to go.</p>
    <p>But its slow</p>
  </div>
  <div class="page">
    <p>Slower than a snail.</p>
    <p>Slow and unresponsive like mud</p>
    <p>Consistently 3 seconds behind where I touch.</p>
    <p>So slow. Did an intern write this app??</p>
    <p>Very very slow compared to even browsing web.</p>
    <p>Sluggish and freezes my HTC phone.</p>
    <p>Loading GPS data is *** slow</p>
  </div>
  <div class="page">
    <p>Slower than a snail.</p>
    <p>Slow and unresponsive like mud</p>
    <p>Consistently 3 seconds behind where I touch.</p>
    <p>So slow. Did an intern write this app??</p>
    <p>Very very slow compared to even browsing web.</p>
    <p>Sluggish and freezes my HTC phone.</p>
    <p>Loading GPS data is *** slow Performance problems are inevitable in the wildPerformance problems are inevitable in the wild</p>
    <p>Hard to emulate in the lab</p>
    <p>Diverse environmental conditions  Network connectivity, GPS signal quality, etc</p>
    <p>Variety of hardware and OS versions  Wide range of user interactions</p>
  </div>
  <div class="page">
    <p>What is the user-perceived delay? Where is the bottleneck?</p>
    <p>Monitor Performance in the Hands of Users</p>
    <p>Significant barrier for most app developers</p>
    <p>Little platform support  Only option is to instrument your app  Manage your own logging infrastructure</p>
  </div>
  <div class="page">
    <p>AppInsight</p>
    <p>Automatic App Instrumentation  Zero developer effort  Binary Instrumentation</p>
    <p>Readily deployable  No changes to the OS or runtime</p>
    <p>Low overhead</p>
    <p>What is the user-perceived delay? Where is the bottleneck?</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Store</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Store</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
    <p>App Store</p>
  </div>
  <div class="page">
    <p>Instrumentation impacts app performance  They are already slow enough!!!</p>
    <p>Limited Resources  Network, Battery, Memory</p>
    <p>App Instrumentation is Challenging</p>
  </div>
  <div class="page">
    <p>Highly interactive, UI centric  Single UI thread that should not be blocked</p>
    <p>Most tasks are performed asynchronously  Asynchronous APIs for Network, Sensor, IO etc.  Computation performed on background threads</p>
    <p>App Instrumentation is Challenging</p>
    <p>Highly Asynchronous Programming Pattern</p>
    <p>Tracing async code is challenging</p>
  </div>
  <div class="page">
    <p>InternetInternet</p>
    <p>Mitt Romney might vote for Obama as well</p>
    <p>We recommend Mitt Romney for president</p>
    <p>I would definitely trust Mitt Romney with my money.</p>
    <p>If I had a nickel for every time Mitt Romney said something stupid I'd be in his tax bracket</p>
    <p>Mitt Romney</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>Tweets</p>
  </div>
  <div class="page">
    <p>ClickHandler() { tweets = HttpGet(url); rating = ProcessTweets(tweets); display.Text = rating;</p>
    <p>}</p>
    <p>ProcessTweets(tweets) { ... }</p>
    <p>Click Handler Start</p>
    <p>Click Handler End</p>
    <p>LogStart();</p>
    <p>LogEnd();</p>
    <p>Thread</p>
    <p>User Perceived Delay</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>Hypothetical Synchronous Code</p>
  </div>
  <div class="page">
    <p>ClickHandler() { AsyncHttpGet(url, DownloadCallback); }</p>
    <p>DownloadCallback(tweets) { rating = ProcessTweets(tweets); UIDispatch(DisplayRating, rating); }</p>
    <p>DisplayRating(rating) { display.Text = rating; }</p>
    <p>ProcessTweets(tweets) { ... }</p>
    <p>Display Rating</p>
    <p>UI Thread</p>
    <p>Background Thread UI Dispatch</p>
    <p>ClickHandler EndClickHandler</p>
    <p>Start</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>SystemSystem</p>
    <p>Async Get Call</p>
    <p>ProcessTweets</p>
    <p>Download Callback</p>
    <p>User Click</p>
    <p>Asynchronous Code</p>
  </div>
  <div class="page">
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>User Perceived Delay</p>
    <p>SystemSystem</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Display Rating</p>
    <p>UI Dispatch</p>
    <p>Async Get Call</p>
    <p>Download Callback</p>
    <p>ClickHandler Start</p>
    <p>User TransactionUser Transaction</p>
    <p>Transaction time</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Transaction time</p>
    <p>User TransactionUser Transaction</p>
    <p>Get Rating</p>
    <p>Get Rating</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>User TransactionUser Transaction</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
  </div>
  <div class="page">
    <p>Apps are highly asynchronous</p>
    <p>Where is the bottleneck? Focus development efforts</p>
    <p>On average, 19 asynchronous calls per user transaction  On average, 8 parallel threads per user transaction</p>
    <p>Up to 7000 edges</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>Twitter</p>
    <p>Thread WakeupThread Blocked</p>
    <p>Fire</p>
    <p>Fire</p>
    <p>DisplayUser TransactionUser Transaction</p>
    <p>Callback</p>
    <p>Callback</p>
    <p>Tweets</p>
    <p>Posts Twitter</p>
    <p>Facebook Process Posts</p>
    <p>Process Tweets</p>
    <p>Facebook</p>
    <p>Mitt Rating</p>
    <p>Mitt Rating</p>
    <p>User Click</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>User Click</p>
    <p>Twitter</p>
    <p>Thread WakeupThread Blocked</p>
    <p>Fire</p>
    <p>Fire</p>
    <p>Callback</p>
    <p>Callback</p>
    <p>Twitter</p>
    <p>Facebook Process Posts</p>
    <p>Process Tweets</p>
    <p>Facebook</p>
    <p>Critical PathCritical Path Optimizing the critical path reduces the user perceived delay</p>
    <p>User TransactionUser Transaction Display</p>
  </div>
  <div class="page">
    <p>AppInsight</p>
    <p>What is the user-perceived delay? Where is the bottleneck?</p>
    <p>Automatically instruments the app to track user transactions and critical path</p>
    <p>Automatically instruments the app to track user transactions and critical path</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
    <p>App Store</p>
  </div>
  <div class="page">
    <p>Low OverheadLow Overhead User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Should not impact app performance  Limited Resources</p>
    <p>Capturing User Transaction</p>
  </div>
  <div class="page">
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>User Click</p>
    <p>Event Handler</p>
    <p>UI Manipulations Capture</p>
    <p>User TransactionUser Transaction</p>
  </div>
  <div class="page">
    <p>UI Manipulations Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution</p>
    <p>Capture</p>
    <p>Click Handler Start</p>
    <p>Click Handler End</p>
    <p>Update UI Start</p>
    <p>End</p>
    <p>Callback Start</p>
    <p>Callback End</p>
    <p>User TransactionUser TransactionUser TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution</p>
    <p>Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks</p>
    <p>Async Get Call</p>
    <p>UI Dispatch Call</p>
    <p>UI Dispatch Callback</p>
    <p>Capture</p>
    <p>Download Callback</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks</p>
    <p>Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates</p>
    <p>Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Update</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates</p>
    <p>Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates  Thread Synchronization</p>
    <p>Fire</p>
    <p>Fire</p>
    <p>Thread Blocked</p>
    <p>Thread Wakeup</p>
    <p>Capture</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates  Thread Synchronization</p>
    <p>Capture</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates  Thread Synchronization</p>
    <p>Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates  Thread Synchronization</p>
    <p>Capture</p>
    <p>Click Handler Start</p>
    <p>Click Handler End</p>
    <p>Update UI Start</p>
    <p>End</p>
    <p>Callback Start</p>
    <p>Callback End</p>
    <p>User TransactionUser TransactionUser TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>Trace every method  Prohibitive overhead</p>
    <p>Enough to log thread boundaries  Log entry and exit of Upcalls</p>
    <p>Capturing Thread Execution</p>
    <p>Upcalls</p>
    <p>System System</p>
    <p>App</p>
    <p>Click Handler Start</p>
    <p>Click Handler End</p>
    <p>Update UI Start</p>
    <p>End</p>
    <p>Callback Start</p>
    <p>Callback End</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>ClickHandler() { AsyncHttpGet(url, DownloadCallback); }</p>
    <p>DownloadCallback(tweets) { rating = ProcessTweets(tweets); UIDispatch(DisplayRating, rating); }</p>
    <p>DisplayRating(rating) { display.Text = rating; }</p>
    <p>ProcessTweets(tweets) { ... }</p>
    <p>Event Handlers are Upcalls  Function pointers point to potential Upcalls</p>
    <p>Callbacks are passed as function pointers</p>
    <p>&lt;Button Click=ClickHandler /&gt;</p>
    <p>Identify Upcalls</p>
  </div>
  <div class="page">
    <p>Instrument Upcalls  Rewrite app</p>
    <p>Trace Upcalls ClickHandler() { Logger.UpcallStart(1); AsyncHttpGet(url, DownloadCallback); Logger.UpcallEnd(1); }</p>
    <p>DownloadCallback(response) { Logger.UpcallStart(2); rating = ProcessTweets(tweets); UIDispatch(DisplayRating, rating); Logger.UpcallEnd(2); }</p>
    <p>DisplayRating(rating) { Logger.UpcallStart(3); display.Text = rating; Logger.UpcallEnd(3); }</p>
    <p>ProcessTweets(tweets) { ... }</p>
    <p>Low OverheadLow Overhead</p>
    <p>Click Handler Start</p>
    <p>Click Handler End</p>
    <p>Update UI Start</p>
    <p>End</p>
    <p>Callback Start</p>
    <p>Callback End</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates  Thread Synchronization</p>
    <p>Capture</p>
    <p>Async Get Call</p>
    <p>UI Dispatch Call</p>
    <p>UI Dispatch Callback</p>
    <p>Download Callback</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>Async Get Call</p>
    <p>Callback</p>
    <p>Async Calls and Callbacks  Log Callback Start</p>
    <p>We capture start of the thread</p>
    <p>Log Async Call  Any call that accepts a function pointer</p>
    <p>Match Async Call to its Callback</p>
    <p>ClickHandler() { AsyncHttpGet(url, DownloadCallback); Logger.AsyncCall(5); }</p>
    <p>DownloadCallback(tweets) { Logger.UpcallStart(2); .... }</p>
  </div>
  <div class="page">
    <p>Matching Async Call to its Callback  A method could be a callback to many async calls  Replicate the callback for each Async call [Hirzel01]</p>
    <p>Async call called in a loop (e.g. download list of URLs)  Cannot be matched correctly</p>
    <p>Solution: Detour Callbacks</p>
  </div>
  <div class="page">
    <p>System</p>
    <p>App</p>
    <p>AsyncHttpGet</p>
    <p>Async Call</p>
    <p>DownloadCallback</p>
    <p>DownloadCallback(response) { }</p>
    <p>Callbacks</p>
  </div>
  <div class="page">
    <p>Detour Callbacks</p>
    <p>DetourCallback(response) {</p>
    <p>DownloadCallback(response); }</p>
    <p>class DetourObject {</p>
    <p>}</p>
    <p>MatchId = 3</p>
    <p>obj.DetourCallback</p>
    <p>MatchId = 3 MatchId = 3</p>
    <p>AsyncHttpGet(url, GetCallback); AsyncHttpGet(url, obj.DetourCallback);</p>
    <p>obj = new DetourObject(DownloadCallback, MatchId++);</p>
    <p>System</p>
    <p>App</p>
    <p>AsyncHttpGet</p>
    <p>Async Call</p>
    <p>DownloadCallback</p>
    <p>DownloadCallback(response) { }</p>
    <p>while(...) {</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Detour Callbacks</p>
    <p>DetourCallback(response) {</p>
    <p>DownloadCallback(response); }</p>
    <p>class DetourObject {</p>
    <p>}</p>
    <p>MatchId = 4</p>
    <p>obj.DetourCallback</p>
    <p>MatchId = 4 MatchId = 4</p>
    <p>obj = new DetourObject(DownloadCallback, MatchId++);</p>
    <p>System</p>
    <p>App</p>
    <p>AsyncHttpGet</p>
    <p>Async Call DownloadCallback(response) { }</p>
    <p>AsyncHttpGet(url, obj.DetourCallback);</p>
    <p>while(...) {</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Detour Callbacks</p>
    <p>DetourCallback(response) {</p>
    <p>DownloadCallback(response); }</p>
    <p>class DetourObject {</p>
    <p>}</p>
    <p>MatchId = 5</p>
    <p>obj.DetourCallback</p>
    <p>MatchId = 5 MatchId = 5</p>
    <p>obj = new DetourObject(DownloadCallback, MatchId++);</p>
    <p>System</p>
    <p>App</p>
    <p>AsyncHttpGet</p>
    <p>Async Call DownloadCallback(response) { }</p>
    <p>AsyncHttpGet(url, obj.DetourCallback);</p>
    <p>while(...) {</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Detour Callbacks  Event Subscriptions  Delayed Callbacks  Track Object Ids</p>
    <p>Matching Async Call to its Callback</p>
    <p>Low OverheadLow Overhead</p>
    <p>Async Get Call</p>
    <p>UI Dispatch Call</p>
    <p>UI Dispatch Callback</p>
    <p>Download Callback</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>UI Manipulations  Thread Execution  Async Calls and Callbacks  UI Updates  Thread Synchronization</p>
    <p>Capture</p>
    <p>User TransactionUser Transaction</p>
    <p>UI Thread</p>
    <p>Background Thread</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Marketplace</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Marketplace</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>Critical Path  Aggregate Analysis  Exception Path</p>
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Critical Path  Bottleneck path in the user transaction  Optimizing the critical path reduces user perceived delay</p>
    <p>UI Update User Manipulation</p>
    <p>Critical PathCritical Path</p>
    <p>Multiple UI updates  Timers, Sensors</p>
  </div>
  <div class="page">
    <p>Critical Path  Aggregate Analysis  Exception Path</p>
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Aggregate Analysis</p>
    <p>Group similar transactions  Same transaction graph</p>
    <p>Outliers  Points to corner cases</p>
    <p>Highlight common critical paths  Focus development effort</p>
    <p>Root causes of Performance Variability  Highlight what really matters in the wild</p>
  </div>
  <div class="page">
    <p>Critical Path  Aggregate Analysis  Exception Path</p>
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>UI Thread</p>
    <p>Background Thread</p>
    <p>Background Thread</p>
    <p>Exception at parseXML()DownloadCallback()</p>
    <p>Stack trace</p>
    <p>parseXML()   DownloadCallback()</p>
    <p>AsyncHttpGet(url)</p>
    <p>ThreadCallback()</p>
    <p>ClickHandler()</p>
    <p>ThreadStart() User</p>
    <p>Manipulation Exception PathException Path</p>
    <p>Failures in the wild</p>
  </div>
  <div class="page">
    <p>Critical Path  Aggregate Analysis  Exception Path</p>
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Store</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>Developer Feedback Web based Interface</p>
    <p>Long User Transactions  Critical Path  Aggregate Analysis  Outliers  Common Case  Factors affecting</p>
    <p>Crashes - Exception Path</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Store</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
    <p>DeploymentDeployment</p>
  </div>
  <div class="page">
    <p>30 Windows Phone apps  30 Users  Over 4 months of data  6750 app sessions  33,000 minutes in apps  167,000 user transactions</p>
    <p>Deployment</p>
  </div>
  <div class="page">
    <p>User Transactions and Critical Path</p>
    <p>Apps are highly asynchronous</p>
    <p># edges in the critical path &lt;&lt; # edges in the transaction  Top 2 edges responsible for 82% of transaction time  App developer can focus on optimizing these edges</p>
    <p>15% of the user transactions take more than 5 seconds</p>
    <p>Key reason why a system like AppInsight is neededKey reason why a system like AppInsight is needed</p>
    <p>Up to 7000 edges</p>
  </div>
  <div class="page">
    <p>High variability in the wild</p>
    <p>Aggregate Analysis</p>
    <p>29% transaction groups has multiple critical paths  Network, GPS state, Device model, User  all affects performance</p>
    <p>Key reason why performance monitoring in the wild is important</p>
    <p>Key reason why performance monitoring in the wild is important</p>
  </div>
  <div class="page">
    <p>AppInsight Overhead</p>
    <p>Compute NetworkMemory Binary Size Battery</p>
    <p>&lt;1%1.2%2% 4%0.02%</p>
    <p>Negligible OverheadNegligible Overhead</p>
    <p>Impact on app performance is minimal  Our users reported no cases of performance degradation</p>
    <p>Low resource consumption</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Store</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>InstrumenterInstrumenter</p>
    <p>App Instrumented</p>
    <p>App Store</p>
    <p>Downloads</p>
    <p>AnalysisAnalysis</p>
    <p>Developer Feedback Developer Feedback</p>
    <p>Server</p>
    <p>Traces</p>
    <p>Developer</p>
    <p>Improved</p>
  </div>
  <div class="page">
    <p>App: My App</p>
    <p>Problem: UI Hog</p>
    <p>AppInsight:  Aggregate analysis showed high performance variability  Attributed to UI thread</p>
    <p>Abnormal latencies only at the start of the session  System loading DLLs in the critical path</p>
    <p>Developer Case Study</p>
  </div>
  <div class="page">
    <p>App: Popular App</p>
    <p>Problem: Slow Transactions</p>
    <p>AppInsight:  Aggregate analysis showed 3G latencies significantly</p>
    <p>affecting critical paths  Known issue but no quantitative data</p>
    <p>Current caching policy insufficient  Quantitative data</p>
    <p>Developer Case Study</p>
  </div>
  <div class="page">
    <p>Developer Case Study</p>
    <p>App: Professional App</p>
    <p>Problem: Slow Transactions</p>
    <p>AppInsight:  Custom instrumentation in the critical path  Affecting user perceived delay</p>
  </div>
  <div class="page">
    <p>AppInsight</p>
    <p>Extremely low overhead  Zero developer effort  Readily deployable</p>
    <p>Extremely low overhead  Zero developer effort  Readily deployable</p>
    <p>Automatically tracks User Transactions  Identifies Critical Paths and Exception Paths  Aggregate Analysis highlights factors affecting performance</p>
    <p>Helps app developers understand performance bottlenecks in the wild</p>
    <p>Helps app developers understand performance bottlenecks in the wild</p>
  </div>
  <div class="page">
    <p>FAQ</p>
  </div>
  <div class="page">
    <p>AppInsight can miss certain causal relationships  Does not track data dependencies  Two threads communicating through a shared variable</p>
    <p>One thread polling</p>
    <p>Uses heuristics to warn the developer</p>
    <p>Will miss implicit casual relationships  Resource contention</p>
    <p>Does not track that state left behind  Dependencies resulting from such state</p>
    <p>Limitations</p>
  </div>
</Presentation>
