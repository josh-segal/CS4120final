<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mary Jean Harrold</p>
    <p>Taweesup (Term) Apiwattanapong, Ral Santelices, Pavan Kumar Chittimalli, Alessandro Orso</p>
    <p>College of Computing, Georgia Institute of Technology Tata Research Development &amp; Design Centre, TCS Limited</p>
    <p>MaTRIX Maintenance-Oriented Test</p>
    <p>Requirements Identifier and Examiner</p>
    <p>Supported by Tata Consultancy Services (TCS) Limited and by NSF</p>
  </div>
  <div class="page">
    <p>P Version of P</p>
    <p>Program P</p>
    <p>T</p>
    <p>Regression Testing</p>
  </div>
  <div class="page">
    <p>P Version of P</p>
    <p>Program P T</p>
    <p>T-T</p>
    <p>TT</p>
    <p>Regression Testing</p>
    <p>TT</p>
  </div>
  <div class="page">
    <p>P Version of P</p>
    <p>Program P T</p>
    <p>T-T</p>
    <p>TT</p>
    <p>Regression Testing</p>
    <p>How well do T, T,T, or any test suites exercise P with respect to changes?</p>
    <p>TT</p>
    <p>How well do T, T,T, or any test suites exercise P with respect to changes?</p>
    <p>Is there suitable guidance for creating new test cases that target the modified behavior?</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>F T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example</p>
    <p>c: if (x &gt;= 5){</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example change</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example branches</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>du-pairs</p>
    <p>(s1,s2,x) (s1,s3,x) (s1,s4,x) (s3,s4,x) (s4,s5,x) (s4,s6,x) (s4,s7,x)</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example du-pairs</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>ni=6 i=1</p>
    <p>F T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example</p>
    <p>c: if (x &gt;= 5){</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example changei=6 i=1</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example branchesi=6 i=1</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>du-pairs</p>
    <p>(s1,s2,x) (s1,s3,x) (s1,s4,x) (s3,s4,x) (s4,s5,x) (s4,s6,x) (s4,s7,x)</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example du-pairsi=6 i=1 i=6</p>
    <p>X X</p>
    <p>X</p>
    <p>X</p>
    <p>X</p>
    <p>i=1</p>
    <p>X X</p>
    <p>X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example</p>
    <p>i=6 i=1</p>
    <p>Tests satisfy test requirements for criteria but dont reveal fault in s3</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>c: if (x &gt;= 5){ F</p>
    <p>T</p>
    <p>T</p>
    <p>F</p>
    <p>Motivating Example</p>
    <p>i=6 i=1</p>
    <p>Tests satisfy test requirements for criteria but dont reveal fault in s3</p>
    <p>Criteria require  Execution of the</p>
    <p>change and entities affected by change</p>
    <p>Criteria require  Execution of the</p>
    <p>change and entities affected by change</p>
    <p>But dont require  Infection of the state</p>
    <p>after change</p>
    <p>Propagation of state to output where it can be observed</p>
  </div>
  <div class="page">
    <p>s1</p>
    <p>s2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s5</p>
    <p>s6</p>
    <p>s7</p>
    <p>x</p>
    <p>n</p>
    <p>F T</p>
    <p>T</p>
    <p>F</p>
    <p>i=6 i=1Criteria require  Execution of the</p>
    <p>change and entities affected by change</p>
    <p>Criteria require  Execution of the</p>
    <p>change and entities affected by change</p>
    <p>But dont require  Infection of the state</p>
    <p>after change</p>
    <p>Propagation of state to output where it can be observed</p>
    <p>Computation of Testing Requirements</p>
    <p>Our technique adds these requirements to the criteria {</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>if (x &gt;= 5){</p>
    <p>SS(x)PC</p>
    <p>(i0&gt;5) 5/(i0-5)</p>
    <p>true i0</p>
    <p>SS(x)PC</p>
    <p>(i0&gt;5) 5/(i0-5)-1 (i0&lt;=5) i0-1or</p>
    <p>(i0&lt;=5) (i0!=0)</p>
    <p>i0-1</p>
    <p>(i0&gt;5)  ..(i0!=0)</p>
    <p>(i0==0) 0</p>
    <p>or</p>
    <p>(i0&gt;=5) 5/(i0-5)-1 (i0&lt;5) i0-1</p>
    <p>(i0&lt;5)  (i0!=0)</p>
    <p>i0-1</p>
    <p>(i0&gt;=5) ..(i0!=0)</p>
    <p>(i0&gt;=5) 5/(i0-5)</p>
    <p>(i0==0) 0</p>
    <p>true i0</p>
    <p>or</p>
    <p>or</p>
    <p>Computation of Testing Requirements</p>
    <p>PCpath condition SSsymbolic state</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>if (x &gt;= 5){</p>
    <p>SS(x)PC</p>
    <p>(i0&gt;5) 5/(i0-5)</p>
    <p>true i0</p>
    <p>SS(x)PC</p>
    <p>(i0&gt;5) 5/(i0-5)-1 (i0&lt;=5) i0-1or</p>
    <p>(i0&lt;=5) (i0!=0)</p>
    <p>i0-1</p>
    <p>(i0&gt;5)  ..(i0!=0)</p>
    <p>(i0==0) 0</p>
    <p>or</p>
    <p>(i0&gt;=5) 5/(i0-5)-1 (i0&lt;5) i0-1</p>
    <p>(i0&lt;5)  (i0!=0)</p>
    <p>i0-1</p>
    <p>(i0&gt;=5) ..(i0!=0)</p>
    <p>(i0&gt;=5) 5/(i0-5)</p>
    <p>(i0==0) 0</p>
    <p>true i0</p>
    <p>or</p>
    <p>or</p>
    <p>Computation of Testing Requirements</p>
    <p>PCpath condition SSsymbolic state</p>
    <p>Conditions for propagation of infected states:</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>if (x &gt;= 5){</p>
    <p>SS(x)PC</p>
    <p>(i0&gt;5) 5/(i0-5)</p>
    <p>true i0</p>
    <p>SS(x)PC</p>
    <p>(i0&gt;5) 5/(i0-5)-1 (i0&lt;=5) i0-1or</p>
    <p>(i0&lt;=5) (i0!=0)</p>
    <p>i0-1</p>
    <p>(i0&gt;5)  ..(i0!=0)</p>
    <p>(i0==0) 0</p>
    <p>or</p>
    <p>(i0&gt;=5) 5/(i0-5)-1 (i0&lt;5) i0-1</p>
    <p>(i0&lt;5)  (i0!=0)</p>
    <p>i0-1</p>
    <p>(i0&gt;=5) ..(i0!=0)</p>
    <p>(i0&gt;=5) 5/(i0-5)</p>
    <p>(i0==0) 0</p>
    <p>true i0</p>
    <p>or</p>
    <p>or</p>
    <p>Computation of Testing Requirements</p>
    <p>But (as we discussed yesterday)  symbolic execution is expensive</p>
    <p>wont scale to large programs</p>
    <p>cant be applied for entire paths</p>
    <p>etc.</p>
    <p>PCpath condition SSsymbolic state</p>
    <p>But (as we discussed yesterday)  symbolic execution is expensive</p>
    <p>wont scale to large programs</p>
    <p>cant be applied for entire paths</p>
    <p>etc.</p>
    <p>Our technique has two ways to improve efficiency</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC SS(x)PC</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
    <p>computes conditions in terms of variables immediately before change</p>
    <p>avoids symbolic execution from beginning of program to change</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC</p>
    <p>true x0</p>
    <p>-- -SS(x)PC</p>
    <p>true x0</p>
    <p>-- -</p>
    <p>(x0&gt;5) 5/(x0-5) (x0&gt;=5) 5/(x0-5)</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC</p>
    <p>true x0</p>
    <p>-- -SS(x)PC</p>
    <p>true x0</p>
    <p>-- -</p>
    <p>(x0&gt;5) 5/(x0-5) (x0&gt;=5) 5/(x0-5)</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
    <p>computes conditions in terms of variables immediately before change</p>
    <p>avoids symbolic execution from beginning of program to change</p>
    <p>Dont need to solve conditionscan still monitor for their satisfaction</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC</p>
    <p>true x0</p>
    <p>-- -SS(x)PC</p>
    <p>true x0</p>
    <p>-- -</p>
    <p>(x0&gt;5) 5/(x0-5) (x0&gt;=5) 5/(x0-5)</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
    <p>computes conditions on states at intermediate points (i.e., distances)</p>
    <p>bounds depth, avoids symbolic execution to outputs</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC</p>
    <p>true x0</p>
    <p>-- -SS(x)PC</p>
    <p>true x0</p>
    <p>-- -</p>
    <p>(x0&gt;5) 5/(x0-5) (x0&gt;=5) 5/(x0-5)</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){ Distance 0after change</p>
    <p>Distance 1after 1 dependence</p>
    <p>Distance 2after 2 dependences</p>
    <p>Distance 3after 3 dependences Distance 3after 3 dependences</p>
    <p>Distance 3after 3 dependences</p>
    <p>And so on until output</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC</p>
    <p>true x0</p>
    <p>-- -SS(x)PC</p>
    <p>true x0</p>
    <p>-- -</p>
    <p>(x0&gt;5) 5/(x0-5) (x0&gt;=5) 5/(x0-5)</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
    <p>computes conditions on states at intermediate points (i.e., distances)</p>
    <p>bounds depth, avoids symbolic execution to outputs</p>
    <p>Greater distances improve confidence in propagation to output</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>SS(x)PC</p>
    <p>true x0</p>
    <p>-- -SS(x)PC</p>
    <p>true x0</p>
    <p>-- -</p>
    <p>(x0&gt;5) 5/(x0-5) (x0&gt;=5) 5/(x0-5)</p>
    <p>Computation of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
    <p>Distance 1</p>
    <p>PC(s3) and (not PC(s3))</p>
    <p>(x0 &gt;= 5) and (not (x0 &gt; 5))</p>
    <p>(x0 &gt;= 5) and (x0 &lt;= 5)</p>
    <p>(x0 == 5)</p>
  </div>
  <div class="page">
    <p>public class E { void simple (int i) { s1 int x = i; s2 if (x &gt; 5){ s3 x = (5/(x-5)); } s4 x = x - 1;</p>
    <p>s5 if (x == 0){ s6 print(x); } else { s7 print(10/x); } }  }</p>
    <p>Use of Testing Requirements</p>
    <p>if (x &gt;= 5){</p>
  </div>
  <div class="page">
    <p>Goal: To compare the effectiveness of our changed-based</p>
    <p>criteria with statement and all-uses coverage criteria (based on changes)</p>
    <p>Implementation: uses differencing, Java Pathfinder, instrumenter, data-/control-dependence analysis, etc. Subjects: Tcas (4 versions) and Schedule (3 versions) (each version has one fault) Method:</p>
    <p>Randomly generate 50 test suites per criterion.  Record the number of test suites that produce different</p>
    <p>outputs.</p>
    <p>Empirical Study: Setup</p>
  </div>
  <div class="page">
    <p>v1 v2 v3 v4 v1 v2 v3</p>
    <p>Tcas Schedule</p>
    <p>stmt</p>
    <p>all-uses</p>
    <p>change-based d0 d1 d2</p>
    <p>d0 d1 d2</p>
    <p>Percentage of test suites revealing different behaviors over 50 test suites that satisfy each criterion.</p>
    <p>Effectiveness Study: Results</p>
  </div>
  <div class="page">
    <p>Conclusions New technique</p>
    <p>Identifies (creates), examines (monitors) test requirements related to change(s)</p>
    <p>Uses symbolic execution but gains efficiency  partial symbolic execution so avoids performing</p>
    <p>symbolic execution from beginning of program  partial symbolic execution to specified distances</p>
    <p>from change so bounds depth of symbolic execution</p>
    <p>Size of symbolic execution tree related to change instead of size of program</p>
    <p>Empirical evaluation show promise of approach</p>
  </div>
  <div class="page">
    <p>Current and Future Work Current</p>
    <p>Completing infrastructure  Performing experimentsadditional subjects,</p>
    <p>more complex changes, scalability, limitations</p>
    <p>Future  Expand technique to handle multiple</p>
    <p>changes, changes involving multiple statements</p>
    <p>Use conditions for automatic test-case generation</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
