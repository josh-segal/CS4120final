<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2017 Nokia1</p>
    <p>SAND: Towards High-Performance Serverless Computing</p>
    <p>Istemi Ekin Akkus, Ruichuan Chen, Ivica Rimac, Manuel Stein,</p>
    <p>Klaus Satzke, Andre Beck, Paarijaat Aditya, Volker Hilt</p>
  </div>
  <div class="page">
    <p>Nokia 20172</p>
    <p>Serverless Computing -- Function-as-a-Service (FaaS)</p>
    <p>Events Execution Result</p>
    <p>Developer</p>
    <p>Platform Function Code</p>
    <p>define</p>
    <p>events</p>
    <p>upload</p>
    <p>function code</p>
  </div>
  <div class="page">
    <p>2017 Nokia3</p>
    <p>The Promise of Serverless Computing for Developers</p>
    <p>Increased productivityNo server management Continuous scaling</p>
  </div>
  <div class="page">
    <p>2017 Nokia4</p>
    <p>Overheads of Existing Platforms</p>
    <p>Extract Metadata</p>
    <p>Process Metadata</p>
    <p>Recognize Objects</p>
    <p>Resize Image</p>
    <p>Resized image &amp; metadata &amp; found</p>
    <p>objects</p>
    <p>Image</p>
    <p>{ ... name: cats.jpg, resolution: 1280x1024, ISO: 400 ... }</p>
    <p>{ ... new_name: cats_resized.jpg,</p>
    <p>new_resolution: 640x512 ... }</p>
    <p>{ ... objects: [cat, cup] ... }</p>
    <p>{ new_name: cats_resized.jpg,</p>
    <p>new_resolution: 640x512,</p>
    <p>objects: [cat, cup] }</p>
    <p>Running an image processing pipeline on AWS, IBM and OpenWhisk</p>
  </div>
  <div class="page">
    <p>2017 Nokia5</p>
    <p>Overheads of Existing Platforms</p>
    <p>Extract Metadata</p>
    <p>Process Metadata</p>
    <p>Recognize Objects</p>
    <p>Resize Image</p>
    <p>Resized image &amp; metadata &amp; found</p>
    <p>objects</p>
    <p>Image Average of 10 runs with warm starts</p>
    <p>Overhead</p>
    <p>Running an image processing pipeline on AWS, IBM and OpenWhisk</p>
    <p>Overheads in existing solutions can limit the benefits of serverless computing.</p>
  </div>
  <div class="page">
    <p>Nokia 20176</p>
    <p>SAND A high-performance serverless computing platform</p>
    <p>Goals:</p>
    <p>Reduce latency for applications</p>
    <p>Utilize resources efficiently for platform operators</p>
  </div>
  <div class="page">
    <p>2017 Nokia7</p>
    <p>Outline</p>
    <p>Motivation &amp; Goal</p>
    <p>Background</p>
    <p>Overview of existing platforms &amp; common practices</p>
    <p>SAND Key Ideas</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>2017 Nokia8</p>
    <p>Overview of Existing Platforms</p>
    <p>Functions are isolated with containers</p>
    <p>Message Bus</p>
    <p>Host1 HostN</p>
    <p>Functions interact via a distributed message bus</p>
    <p>Containers are deployed where resources are available</p>
    <p>Function code</p>
    <p>Function Container</p>
    <p>Containers handle events and stay deployed until a timeout</p>
    <p>Platform</p>
  </div>
  <div class="page">
    <p>2017 Nokia9</p>
    <p>Implications of Common Practices Function Container</p>
    <p>Function execution &amp; concurrency:</p>
    <p>long invocation latency</p>
    <p>resource inefficiency</p>
    <p>long function interaction latency</p>
    <p>Function interaction:</p>
    <p>- Go through the distributed message bus</p>
  </div>
  <div class="page">
    <p>2017 Nokia10</p>
    <p>Outline</p>
    <p>Motivation &amp; Goal</p>
    <p>Background</p>
    <p>SAND Key Ideas</p>
    <p>Application-level sandboxing</p>
    <p>Hierarchical message queuing</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>2017 Nokia11</p>
    <p>SAND Application-level Sandboxing</p>
    <p>Insight: Different concepts should have different fault isolation</p>
    <p>Host</p>
    <p>Application 1 Application 2</p>
    <p>Stronger isolation between applications</p>
    <p>Weaker isolation between functions of the same application</p>
  </div>
  <div class="page">
    <p>2017 Nokia12</p>
    <p>Application 1</p>
    <p>SAND Application-level Sandboxing Operation</p>
    <p>Forked Instances</p>
    <p>fork()</p>
    <p>Host</p>
    <p>Application 1 Application 21) Put applications in separate containers</p>
    <p>the same container</p>
    <p>Advantages:</p>
  </div>
  <div class="page">
    <p>2017 Nokia13</p>
    <p>SAND Hierarchical Message Queuing</p>
    <p>Insight: Exploit locality of the functions</p>
    <p>Message Bus</p>
    <p>Host1 HostN</p>
    <p>Shortcuts for interacting functions of an application</p>
  </div>
  <div class="page">
    <p>2017 Nokia14</p>
    <p>SAND Hierarchical Message Queuing Operation</p>
    <p>via the local message bus</p>
    <p>Advantages:</p>
    <p>Host</p>
    <p>Global Message Bus</p>
    <p>Local Message Bus</p>
    <p>Application 1</p>
  </div>
  <div class="page">
    <p>2017 Nokia15</p>
    <p>Addressing Overheads in SAND</p>
    <p>Application-level Sandboxing</p>
    <p>Hierarchical Message Queuing</p>
    <p>Fast startup</p>
    <p>Low execution footprint</p>
    <p>Automatic de-allocation</p>
    <p>Shortcuts for interacting functions</p>
  </div>
  <div class="page">
    <p>2017 Nokia16</p>
    <p>Outline</p>
    <p>Motivation &amp; Goal</p>
    <p>Background</p>
    <p>SAND Key Ideas</p>
    <p>Evaluation</p>
    <p>Revisiting the image processing application</p>
    <p>Local message bus and function interaction latencies</p>
    <p>Trade-off between idle memory cost and latency</p>
  </div>
  <div class="page">
    <p>2017 Nokia17</p>
    <p>Image processing pipeline SAND Overhead Comparison</p>
    <p>Extract Metadata</p>
    <p>Process Metadata</p>
    <p>Recognize Objects</p>
    <p>Resize Image</p>
    <p>Resized image &amp; metadata &amp;</p>
    <p>found objects</p>
    <p>Image</p>
    <p>Overhead</p>
    <p>43% reduction in total runtime</p>
  </div>
  <div class="page">
    <p>2017 Nokia18</p>
    <p>Access to local bus is 3-5x faster than global bus</p>
    <p>Message Bus Access &amp; Function Interaction Latencies SAND Microbenchmarks</p>
    <p>8.3x as fast as OpenWhisk</p>
    <p>3.6x as fast as Greengrass</p>
    <p>DT</p>
  </div>
  <div class="page">
    <p>2017 Nokia19</p>
    <p>Exploring container timeout with OpenWhisk Idle Memory Cost vs. Latency</p>
    <p>Idle memory cost: product of assigned but unused memory and the duration of assignment.</p>
    <p>With 1 sec timeout, 18 - 33% of calls have cold starts</p>
    <p>Longer timeouts lead to high idle memory cost</p>
    <p>Setup:</p>
    <p>- 5 synthetic workloads</p>
    <p>- Different burst parameters</p>
    <p>- Call a single function SAND</p>
    <p>SAND</p>
  </div>
  <div class="page">
    <p>2017 Nokia20</p>
    <p>High-performance serverless computing platform SAND</p>
    <p>Fast function invocation</p>
    <p>Increased resource efficiency</p>
    <p>Short function interaction latencies Application 1</p>
    <p>fork()</p>
    <p>Host</p>
    <p>Local Message Bus</p>
    <p>Application 1</p>
    <p>Application-level sandboxing</p>
    <p>Hierarchical message queuing</p>
    <p>Invite-only beta coming soon!</p>
  </div>
  <div class="page"/>
</Presentation>
