<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reliable Client Accounting for P2P-Infrastructure Hybrids</p>
    <p>Paarijaat Aditya, Ming-Chen Zhao, Yin Lin*,</p>
    <p>Andreas Haeberlen , Peter Druschel, Bruce Maggs*, Bill Wishon</p>
    <p>Max Planck Institute for Software Systems (MPI-SWS)  University of Pennsylvania</p>
    <p>*Duke University  Akamai Technologies</p>
    <p>NSDI 2012, San Jose, April 25, 2012</p>
  </div>
  <div class="page">
    <p>Trends in Content Distribution Networks</p>
    <p>Centralized CDN  Clients download from CDN servers, customers pay CDN provider</p>
    <p>New trend: hybrid or peer assisted distribution  Clients download from peers and CDN servers  Scalability of P2P + reliability &amp; manageability of a centralized system  E.g. Akamai NetSession, Velocix P2P Assisted delivery,</p>
    <p>CDN Servers (Infrastructure)</p>
    <p>Clients</p>
    <p>Customers  Content providers</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Hybrid Systems - Challenges</p>
    <p>Untrusted clients + Infrastructure cant observe P2P communication</p>
    <p>What could go wrong? In principle clients may  Mishandle content: modify, inject or censor content</p>
    <p>Affect service quality: delay or abort transfers</p>
    <p>Misreport P2P transfers</p>
  </div>
  <div class="page">
    <p>What Do CDNs Currently Do</p>
    <p>Infrastructure provides signed metadata  Clients can verify content integrity</p>
    <p>Infrastructure as fallback  Maintain service quality in case of failed transfers</p>
  </div>
  <div class="page">
    <p>What Could Still Go Wrong?</p>
    <p>Inherent problem: infrastructure cant observe P2P communication</p>
    <p>Clients could still misreport  CDN may end up reporting downloads that did not happen</p>
    <p>Clients could still affect service quality</p>
    <p>I downloaded 1 TB from A &amp; B!</p>
    <p>?!</p>
    <p>A</p>
    <p>B</p>
    <p>File X was downloaded 1 billion times!</p>
    <p>Carried out on Akamai NetSession!</p>
    <p>CDN Servers (Infrastructure)</p>
    <p>Clients</p>
    <p>Customers  Content providers</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
    <p>I uploaded 0.1 TB to C</p>
    <p>C</p>
    <p>I did not upload anything</p>
    <p>CDNs need a mechanism to reliably account for client activity!</p>
  </div>
  <div class="page">
    <p>Periodic progress reports</p>
    <p>while downloading</p>
    <p>Akamai NetSession</p>
    <p>Peer assisted CDN operated by Akamai  Used for distributing large files  software installers and videos  Client software is bundled with customer specific installer</p>
    <p>Request file</p>
    <p>List of clients &amp;</p>
    <p>signed metadata</p>
    <p>Download from clients &amp; edge</p>
    <p>servers</p>
    <p>Verify with metadata</p>
    <p>Controller</p>
    <p>Edge servers Clients running NetSession software</p>
    <p>Akamai</p>
    <p>Download completion</p>
    <p>Accounting logs for customers</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Expect to hear from C</p>
  </div>
  <div class="page">
    <p>Inflation Attack on NetSession</p>
    <p>Have an unmodified NetSession client report fake downloads</p>
    <p>Performed with Akamais permission  Targeted a dummy customer</p>
    <p>Day in December 2010</p>
    <p>Data downloaded</p>
    <p>(GB/hr)</p>
    <p>Load spike</p>
    <p>Could have been much worse with modified client software!</p>
    <p>(Obtained from actual accounting logs)</p>
    <p>Single client can cause significant accounting inaccuracies!</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Hybrid CDNs: clients can misreport  Need a way to reliably account for client activities</p>
    <p>Reliable Client Accounting (RCA)  Reliably capture client activities  Identify misbehaving/suspicious clients  Handle misbehavior without affecting service quality</p>
    <p>Evaluation</p>
    <p>Related work &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Types of Attacks</p>
    <p>Misbehaving client software  Unilateral  deviations from the correct protocol</p>
    <p>Misreport interactions with honest clients  Serve bad content to disrupt quality of service</p>
    <p>Collusion  multiple clients collude to misreport activities  Difficult in practice because infrastructure assigns peers</p>
    <p>Suspicious user behavior  Repeatedly downloading content to drive up demand</p>
    <p>Can be amplified by a Sybil attack</p>
    <p>Not unique to hybrid systems</p>
    <p>RCA can detect deterministically</p>
    <p>Require statistical checks</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Reliable Client Accounting  Overview</p>
    <p>CDN Servers (Infrastructure)</p>
    <p>Clients maintain a tamper evident log of their network activity</p>
    <p>Logs periodically uploaded to infrastructure and verified</p>
    <p>Quarantine clients if suspicious</p>
    <p>A's log</p>
    <p>A</p>
    <p>B</p>
    <p>B's log</p>
    <p>Verify clients actions</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Reliably Capturing Client Activity</p>
    <p>Tamper evident logging &amp; log consistency checks [PeerReview, SOSP 2007]</p>
    <p>Log entries form a hash chain</p>
    <p>Signed hash (authenticator) is included with every message sent  Client commits to its entire event history</p>
    <p>Log hash chains + authenticators are sufficient to  Verify whether all clients report a consistent sequence of message exchange</p>
    <p>Clients cannot unilaterally report fake downloads</p>
    <p>M</p>
    <p>...</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Reducing Processing Overhead on the CDN</p>
    <p>Signature verification overhead  number of authenticators</p>
    <p>Previous implementations  Records one authenticator for each message  Overhead: O(number of messages sent or received)</p>
    <p>RCA: cumulative authenticators  Records only two authenticators for each remote client  Overhead:</p>
    <p>O(number of communicating client pairs) &lt;&lt; O(number of messages)</p>
  </div>
  <div class="page">
    <p>Verifying Client Activity</p>
    <p>A consistent log might still be implausible  Contact clients not assigned by infrastructure  Serve bad content</p>
    <p>Plausibility checking  Verify whether the log is consistent with a valid execution of software</p>
    <p>NetSession protocol can be modeled as a simple state machine  Manually identified rules a correct client must obey  Verify logs against these rules</p>
    <p>Input</p>
    <p>Output</p>
    <p>if</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
    <p>Client is provably incorrect</p>
  </div>
  <div class="page">
    <p>Types of Attacks</p>
    <p>Misbehaving client software  Unilateral  deviations from the correct protocol</p>
    <p>Misreport interactions with honest clients  Serve bad content to disrupt quality of service</p>
    <p>Collusion  multiple clients collude to misreport activities  Difficult in practice because infrastructure assigns peers</p>
    <p>Suspicious user behavior  Repeatedly downloading content to drive up demand</p>
    <p>Can be amplified by a Sybil attack</p>
    <p>Not unique to hybrid systems</p>
    <p>RCA can detect deterministically</p>
    <p>Require statistical checks</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Statistical Checks</p>
    <p>Look for anomalous client behavior</p>
    <p>Large amount of prior work  Assume the availability of correct information</p>
    <p>RCA provides a sound basis for anomaly detection</p>
    <p>Flag clients who download more than a threshold</p>
    <p>Analyze communication patterns to identify colluding clients</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>Handling Malicious/Suspicious Clients</p>
    <p>Blacklist clients  False positives  blacklist an innocent client?</p>
    <p>Quarantine clients  Not allowed to upload content  Can still download from the infrastructure</p>
    <p>Quarantining an innocent client is safe  Does not affect service quality of client  Slight increase in resource cost to infrastructure</p>
    <p>Enables aggressive anomaly detectors  Tamper evident logging: provides accurate information  Quarantining: safe way to handle false positives</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Hybrid CDNs: clients can misreport  Need a way to reliably account for client activities</p>
    <p>Reliable Client Accounting (RCA)  Reliably capture client activities  Identify misbehaving/suspicious clients  Handling misbehavior without affect service quality</p>
    <p>Evaluation</p>
    <p>Related work &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implemented a clone of NetSession client &amp; Infrastructure software</p>
    <p>Experiments performed in a network emulation environment  Driven by actual client activity traces of Akamai NetSession for Dec</p>
    <p>Experiment:  Reproduce clients download activity over a month</p>
    <p>500 randomly selected clients</p>
    <p>1 edge server and 1 control plane server</p>
  </div>
  <div class="page">
    <p>Evaluation - Questions</p>
    <p>Clients Perspective  Network overhead  CPU overhead  Log storage</p>
    <p>CDNs Perspective  Log processing overhead  Statistical checks  Effectiveness</p>
  </div>
  <div class="page">
    <p>Clients Perspective</p>
    <p>Network overhead (in terms of % of actual content downloaded)</p>
    <p>CPU overhead  Maximum additional client CPU usage = 0.5%</p>
    <p>Log Storage (with daily log uploads)  On average: 100 KB/day</p>
    <p>NetSession RCA</p>
    <p>Paarijaat Aditya, MPI-SWS</p>
  </div>
  <div class="page">
    <p>CDNs Perspective</p>
    <p>Projections for a large deployment:</p>
    <p>100 million clients, downloading 100 PB content/month</p>
    <p>Log Uploads &amp; Log Processing  0.05 PB/month of logs uploads (0.05% of transferred content)  35 machines required to process these logs</p>
    <p>For comparison, NetSession as of Dec 2011  has 25 million clients, downloading 0.85 PB/month  uses about 10 machines for log processing</p>
    <p>Effectiveness  Tried out various attacks. RCA caught them as expected</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Misbehavior in P2P systems  Maze [Q. Lian et al., 2007]</p>
    <p>Empirically study client misbehavior in p2p file sharing systems</p>
    <p>Dandelion [M. Sirivianos et al., 2007], Antfarm [Peterson et al., 2009] Use cryptographic virtual currency to handle selfish peers</p>
    <p>RCA doesnt aim for fairness and considers more general Byzantine behavior</p>
    <p>Anomaly detection  An intrusion detection model [D. Denning, 1987]</p>
    <p>BotGrep [S. Nagaraja et al., 2010] Detect BotNets by studying client interactions</p>
    <p>RCA enables building complex statistical checks</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Fundamental challenge for P2P-Infrastructure hybrids  Infrastructure cannot observe P2P communication</p>
    <p>Demonstrated an inflation attack on the live Akamai NetSession system</p>
    <p>Reliable Client Accounting (RCA)  Reliably capture client activity  Sound basis for anomaly detection  Quarantine: safely handle suspicious clients</p>
    <p>Applied RCA to Akamai NetSession  Comprehensive evaluation using actual client traces  RCA overhead is reasonable</p>
  </div>
</Presentation>
