<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Efficient Tracing of Cold Code via Bias-Free Sampling Baris Kasikci+, Thomas Ball*,</p>
    <p>George Candea+, John Erickson*, Madanlal Musuvathi*</p>
    <p>*MicrosoD Research +</p>
  </div>
  <div class="page">
    <p>Why Should We Sample Cold Code?</p>
    <p>Cold code is not well tested  Bugs lurk in cold code [Marinescu et al., Cris6an et al.]</p>
    <p>Cold vs. hot code is not known a priori  Cold code is rarely executed during program execu6on</p>
    <p>We need to be able to efficiently sample cold code</p>
  </div>
  <div class="page">
    <p>Current Dynamic Sampling Approaches</p>
    <p>StaNc instrumentaNon (e.g., Gcov, bbcover)  Incurs lots of overhead (&gt;2x)  Requires separate builds</p>
    <p>Dynamic instrumentaNon (e.g., Pin-based)  Do not handle mul6threaded programs efficiently</p>
    <p>Temporal sampling (e.g., CBI [Liblit et al.])  Less overhead per-execu6on  Need lots of execu6ons to catch cold code</p>
    <p>Current approaches are inefficient and do not scale</p>
  </div>
  <div class="page">
    <p>How to Efficiently Sample Cold Code?</p>
    <p>Breakpoint</p>
    <p>PC</p>
    <p>Sample instrucNon  Mark as executed  Record the accessed memory address</p>
    <p>Use code breakpoints  One breakpoint per basic block  Present in all modern CPUs  0 cost once removed PC</p>
  </div>
  <div class="page">
    <p>Challenges  Dont change behavior of  Instrumented programs  Services such as debuggers</p>
    <p>Number of breakpoints  In the worst case, a breakpoint for every block  Exis6ng frameworks cannot handle such volume</p>
    <p>MulNthreaded code  JIT and managed code  Cannot be handled like normal code due to op6miza6on</p>
  </div>
  <div class="page">
    <p>Bias-Free Sampling (BfS)</p>
    <p>Design  ImplementaNon  EvaluaNon</p>
    <p>NaNve/managed, kernel/user space, x86/ARM Ran on 679 programs, incurs overheads of 1-6%</p>
  </div>
  <div class="page">
    <p>BfSs Design Goal</p>
    <p>Sample cold instrucNons without over-sampling hot instrucNons  Sample all the other instrucNons independently of their execuNon frequency</p>
    <p>for (i=0; i&lt;1,000,000; ++i) if () statement_1</p>
    <p>else statement_2</p>
    <p>Executes once every one million iteraNons</p>
  </div>
  <div class="page">
    <p>BfS Parameters - DefiniNons</p>
    <p>K: Desired sample count per-instrucNon  Ensures first K execu6ons are sampled  Bounds the overhead  0 cost aSer K breakpoints</p>
    <p>P: Sampling distribuNon  Can be uniform or biased</p>
    <p>R: Sampling rate  Number of samples generated per second  Controls the overhead</p>
  </div>
  <div class="page">
    <p>Applica'on Count (K) Distribu'on (P) Rate (R)</p>
    <p>Coverage 1 First instrucNon in the block</p>
    <p>Full tracing</p>
    <p>First instrucNon in the block</p>
    <p>Memory leak detector 1 to  Only memory operaNons 0 to</p>
    <p>Data race detector 1 to</p>
    <p>Only memory accesses that cannot be proven as data race free</p>
    <p>BfS Parameters - Examples</p>
  </div>
  <div class="page">
    <p>Bias-Free Sampling</p>
    <p>Design  ImplementaNon  EvaluaNon</p>
  </div>
  <div class="page">
    <p>Breakpoints Primer</p>
    <p>Hardware support  int 3 on x86 traps into the OS</p>
    <p>Breakpoint instrucNons are not larger than any instrucNon in the ISA  Allows overwri6ng only a single instruc6on  Atomic add/removal  Helps lower the overhead</p>
  </div>
  <div class="page">
    <p>Debugger Interplay</p>
    <p>BfS Framework</p>
    <p>Program</p>
    <p>Debugger</p>
    <p>BfS framework is invisible to the debugger, allowing transparent breakpoint processing</p>
    <p>BfS breakpoint Regular breakpoint</p>
  </div>
  <div class="page">
    <p>MulN-Shot Breakpoints  Debuggers processing a breakpoint  Restore original instruc6on  Single step  Restore the breakpoint</p>
    <p>BfS framework</p>
    <p>Inst 2</p>
    <p>Inst 1 Sampled instrucNon with breakpoint</p>
    <p>Jmp to Inst 2</p>
    <p>Inst 1</p>
    <p>Resumed instrucNon copy In thread-local buffer</p>
    <p>Set PC to copy</p>
    <p>Jmp to return to the instruc'on a=er the sampled one</p>
  </div>
  <div class="page">
    <p>Managed Code Support</p>
    <p>BfS uses CLR debugging APIs  Bypassing the APIs does not work  CLI (interpreter) performs introspec6on  Cannot modify the binary without the CLRs knowledge</p>
    <p>May need to disable JIT opNmizaNons for some tasks  E.g., to have exact coverage results</p>
  </div>
  <div class="page">
    <p>Bias-Free Sampling</p>
    <p>Design  ImplementaNon  EvaluaNon</p>
  </div>
  <div class="page">
    <p>Use Case 1  Z3 Coverage</p>
    <p>BfSs coverage overhead (1%) is independent of program behavior, it is a funcNon of program size</p>
    <p>bbcover</p>
    <p>BfS</p>
    <p>Coverage Measurement RunNme [sec]</p>
    <p>RunNme with no coverage measurement [sec]</p>
    <p>No overhead</p>
  </div>
  <div class="page">
    <p>Use Case 2  Coverage in TesNng Windows 8 Binaries</p>
    <p>Coverage with BfS and bbcover  665 system binaries: 32 and 64 bit, x86 and ARM  70 to 1,000,000 basic blocks  A total of 4 hours on 17 machines</p>
    <p>bbcover failed for 45 binaries due to Nmeout  For all but 40 tests, BfS reports more coverage  Less coverage cases are due to non-determinism</p>
    <p>Coverage overhead is always less than 6%</p>
  </div>
  <div class="page">
    <p>Use Case 3  Z3 Cold Code Tracing</p>
    <p>Cold-code tracing idenNfies sets of related funcNons Index in event log</p>
    <p>FuncNon id</p>
  </div>
  <div class="page">
    <p>Bias-Free Sampling</p>
    <p>Low overhead technique to idenNfy cold code  Leverages breakpoint support  Ideal for mul6threaded code  No need for a separate build</p>
    <p>ImplementaNon on various platorms  32 and 64 bit, x86 and ARM, kernel and user space, na6ve and managed</p>
    <p>Comprehensive evaluaNon  1-6% overhead for coverage and cold block tracing</p>
  </div>
</Presentation>
