<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Medusa: Concurrent Programming in Surprising Places</p>
    <p>Thomas W. Barr, Scott Rixner Rice University</p>
    <p>USENIX ATC 2014, June 2014</p>
    <p>+v</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Embedded Concurrency</p>
    <p>- Expensive - 1 car, 100m LOC</p>
    <p>[Charette09]</p>
    <p>- Vulnerable - [Checkoway11]</p>
    <p>- Deadly - Therac-25 [Leveson93]</p>
    <p>http://hci.cs.siue.edu/NSF/Files/Semester/Week13-2/PPT-Text/Slide13.html</p>
  </div>
  <div class="page">
    <p>rice computer architecture group3</p>
    <p>+v</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>rice computer architecture group4</p>
    <p>(click!)</p>
    <p>(images from sparkfun.com, Creative Commons, BY-NC-SA)</p>
  </div>
  <div class="page">
    <p>rice computer architecture group5</p>
    <p>(click!)(click!) (click!)(click!) (click!)</p>
  </div>
  <div class="page">
    <p>rice computer architecture group6</p>
    <p>http://www.protostack.com/blog/2010/03/debouncing-a-switch/</p>
  </div>
  <div class="page">
    <p>rice computer architecture group7</p>
    <p>debounce(): loop forever: wait for button press wait some time read button</p>
    <p>do math do math do math do math</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Owl and Medusa</p>
    <p>- Owl Embedded Python - USENIX ATC 2012 - (embeddedpython.org)</p>
    <p>- Python - Easy to get started - I/O is still hard!</p>
    <p>- Medusa - New language - Actor model [Haller06]</p>
    <p>- Message passing</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Why is I/O hard?</p>
    <p>- Polling - Python - Simple - Slow</p>
    <p>- Interrupts - C - Error-prone - Costly</p>
    <p>- Bridging - Medusa - Ease of polling - Speed of interrupts</p>
    <p>+v</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Polling I/O</p>
    <p>loop forever: while (!button_down)</p>
    <p>{</p>
    <p>// spin</p>
    <p>}</p>
    <p>set_timer() while (!timer_expired)</p>
    <p>{</p>
    <p>// spin</p>
    <p>}</p>
    <p>read_button()</p>
    <p>loop forever: do_math() more_math() yet_more_math()</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Polling I/O</p>
    <p>- Most of the time is spent in the spin loop</p>
    <p>- Wasted cycles - Schedule less frequently? - Latency goes up - May miss events</p>
    <p>- &gt;5000 Hz on our systems</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupt I/O</p>
    <p>on button press: set_timer() !</p>
    <p>on timer expiration: read_button()</p>
    <p>loop forever: do_math() more_math() yet_more_math()</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupt I/O</p>
    <p>on button press: set_timer() !</p>
    <p>on timer expiration: read_button()</p>
    <p>- Current solution - Used in vendor</p>
    <p>examples</p>
    <p>- Recommended in documentation</p>
    <p>- 170 lines of C</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupts in interpreters</p>
    <p>add call</p>
    <p>time</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupts in interpreters</p>
    <p>add call co sh</p>
    <p>time</p>
    <p>button press</p>
    <p>loadcallInterrupt handler:</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupts in interpreters</p>
    <p>add call co py</p>
    <p>time</p>
    <p>button press</p>
    <p>loadcallInterrupt handler:</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupts in interpreters</p>
    <p>add call pu sh</p>
    <p>time</p>
    <p>button press</p>
    <p>loadcallInterrupt handler:</p>
    <p>Reentrant interpreter</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupts in interpreters</p>
    <p>add call copy</p>
    <p>time</p>
    <p>button press</p>
    <p>loadcallDelayed interrupt handler:</p>
    <p>load</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Interrupts in interpreters</p>
    <p>add call push</p>
    <p>time</p>
    <p>button press</p>
    <p>loadcallDelayed interrupt handler:</p>
    <p>loadMight miss events</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>!</p>
    <p>- Turn hardware events into software messages</p>
    <p>- Extend actor domain to hardware</p>
    <p>- IRQs on microkernels - Subscription model - Threads specify</p>
    <p>hardware of interest</p>
    <p>N/S Light</p>
    <p>E/W Light</p>
    <p>N/S Sensor</p>
    <p>E/W Sensor</p>
    <p>EMS Sensor</p>
    <p>A ct</p>
    <p>or s</p>
    <p>(T h re</p>
    <p>ad s)</p>
    <p>Timer</p>
    <p>gpio</p>
    <p>hw_timer</p>
    <p>bridge ISR</p>
    <p>bridge ISR</p>
    <p>b ri</p>
    <p>d ge</p>
    <p>su</p>
    <p>b sy</p>
    <p>st e m</p>
    <p>A ct</p>
    <p>or s</p>
    <p>(H W</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>add call</p>
    <p>time</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>add call co sh</p>
    <p>b rid</p>
    <p>ge IS</p>
    <p>R</p>
    <p>time</p>
    <p>button press</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Bridge interrupt handler</p>
    <p>#define ALL_PINS 0xff! ! void GPIOInterruptHandler (unsigned long port) {! uint8_t values ;! / clear all the interrupts for this port / ! GPIOPinIntClear(port, ALL_PINS);! ! / read the value of the port / ! values = GPIOPinRead(port, ALL_PINS);! ! / send it to the subscribers / ! bridge_produce(GPIO_BRIDGE, &amp;values , sizeof(uint8_t));! }</p>
    <p>Bridge Buffer</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Bridge interrupt handler</p>
    <p>#define ALL_PINS 0xff! ! void GPIOInterruptHandler (unsigned long port) {! uint8_t values ;! / clear all the interrupts for this port / ! GPIOPinIntClear(port, ALL_PINS);! ! / read the value of the port / ! values = GPIOPinRead(port, ALL_PINS);! ! / send it to the subscribers / ! bridge_produce(GPIO_BRIDGE, &amp;values , sizeof(uint8_t));! }</p>
    <p>event</p>
    <p>Bridge Buffer</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>add call co py</p>
    <p>b rid</p>
    <p>ge IS</p>
    <p>R</p>
    <p>time</p>
    <p>button press</p>
    <p>event</p>
    <p>Bridge Buffer</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>add call co py deliver data</p>
    <p>b rid</p>
    <p>ge IS</p>
    <p>R</p>
    <p>time</p>
    <p>button press</p>
    <p>event</p>
    <p>Bridge Buffer</p>
    <p>obj: event</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>add call co py deliver data</p>
    <p>b rid</p>
    <p>ge IS</p>
    <p>R</p>
    <p>time</p>
    <p>button press</p>
    <p>Bridge Buffer</p>
    <p>obj: event</p>
    <p>mul</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>- Two-phase bridging - Copy data into bridge immediately</p>
    <p>- ~4 microseconds - No allocation</p>
    <p>- Copy data from bridge later - ~10s of milliseconds - Allocate long-term storage</p>
    <p>- When VM is not running</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Message bridging</p>
    <p>- Debouncing: - Polling: 17 lines of Python - Interrupts: 141 lines of C - Bridges: 33 lines of Medusa - Zero impact on other</p>
    <p>threads</p>
  </div>
  <div class="page">
    <p>rice computer architecture group</p>
    <p>Conclusions</p>
    <p>+v</p>
    <p>CPU</p>
    <p>- All embedded systems are concurrent</p>
    <p>- Current solutions are inadequate</p>
    <p>- Actor model well-suited to I/O</p>
    <p>- Polling-like simplicity - Interrupt-like</p>
    <p>performance</p>
  </div>
</Presentation>
