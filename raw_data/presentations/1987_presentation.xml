<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Shimmy: Shared Memory Channels for High Performance Inter-Container</p>
    <p>Communication Marcelo Abranches*, Sepideh Goodarzy*, Maziyar Nazari*, Shivakant Mishra, Eric</p>
    <p>Keller University of Colorado, Boulder</p>
    <p>*All three authors contributed equally to this paper</p>
  </div>
  <div class="page">
    <p>Crowd Monitoring</p>
    <p>https://sequre.world/tag/computer-science/</p>
  </div>
  <div class="page">
    <p>Crowd Monitoring App in Edge Clouds</p>
    <p>Using Berkeley socket with TCP/IP for</p>
    <p>containers communication</p>
    <p>SLOW!</p>
    <p>Not utilizing the network resources!</p>
  </div>
  <div class="page">
    <p>The Problem If each link has an average of X ms delay:</p>
    <p>Making Resized, Objects detected, faces blurred images is going to have 5 time X ms as average delay</p>
  </div>
  <div class="page">
    <p>What if ? we use shared memory channels for container communications ?</p>
    <p>What about remote communications?</p>
    <p>Do we have a central control over all the containers host ?</p>
    <p>Modifying the Applications</p>
    <p>Faster  Not going</p>
    <p>through network stack delays</p>
    <p>Accessible</p>
  </div>
  <div class="page">
    <p>Whats the solution?  What about remote connections?</p>
    <p>Remote communication is efficiently supported through synchronizing shared memory regions via RDMA</p>
    <p>Do we have a central control over all the containers host ?  modern infrastructures we can assume these applications are run within a</p>
    <p>container orchestration framework, which provides control over:</p>
    <p>communication interface  communication medium</p>
  </div>
  <div class="page">
    <p>So We proposed ...</p>
    <p>Rethink the communication model</p>
    <p>Create shared memory channels between containers</p>
    <p>supporting both a pub/sub model and bi-directional streaming model</p>
    <p>Local communication is made more efficient</p>
    <p>Remote communication is efficiently supported through synchronizing shared memory regions via RDMA</p>
    <p>Not only applicable to the edge clouds but also beneficial in core cloud environments</p>
  </div>
  <div class="page">
    <p>The Architecture</p>
    <p>Container 1 Container 2</p>
    <p>Shm region</p>
  </div>
  <div class="page">
    <p>The Architecture</p>
    <p>Container 1 Container 2</p>
    <p>Shimmy agent Shm region</p>
  </div>
  <div class="page">
    <p>The Architecture</p>
    <p>Container 1</p>
    <p>Container 2</p>
    <p>Shimmy agent</p>
    <p>Shm region</p>
    <p>Container 3</p>
    <p>Shimmy agent</p>
    <p>Shm region</p>
    <p>RDMA Client</p>
    <p>RDMA Server</p>
    <p>RDMA Server</p>
    <p>RDMA Client</p>
  </div>
  <div class="page">
    <p>The Architecture</p>
  </div>
  <div class="page">
    <p>Prototype</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Setup:</p>
    <p>two Cloudlab Servers ( 1x Xeon E5-2450 processor (8 cores, 2.1Ghz), 16GB Memory (4 x 2GB RDIMMs, 1.6Ghz), 1 x Mellanox MX354A Dual port FDR CX3 adapter w/1 x QSA adapter ) running Ubuntu 16.04. For our system we have built docker containers for the broker, publisher, and subscriber.</p>
    <p>We compared against Eclipse Mosquitto and Apache Kafka</p>
    <p>Eclipse Mosquitto is based on pub/sub model which uses TCP/IP underneath</p>
    <p>Apache Kafka is stream-processing software platform which uses TCP/IP</p>
  </div>
  <div class="page">
    <p>Local communication - 16 B messages</p>
  </div>
  <div class="page">
    <p>Remote communication - 16 B messages</p>
  </div>
  <div class="page">
    <p>Local communication - 100 KB Messages</p>
  </div>
  <div class="page">
    <p>Conclusion  A new communication model based on shared memory channels  Optimizes local communication, but supports remote communication</p>
    <p>through RDMA  Developed an Initial prototype which demonstrated</p>
    <p>1.78x lower latency than mosquitto for 100KB messages local  2.85x lower latency than Kafka for 100KB messages local</p>
    <p>27x lower latency than mosquitto for 16B messages local  82x lower latency than kafka for 16B messages local</p>
    <p>21x lower latency than mosquitto for 16B messages remote  66x lower latency than kafka for 16B messages remote</p>
  </div>
  <div class="page">
    <p>Future work  Integration with Kubernetes</p>
    <p>Create a shared memory channel</p>
    <p>Colocation of containers</p>
    <p>Security</p>
    <p>Load Balancing</p>
  </div>
  <div class="page">
    <p>Discussions What kinds of feedback we are looking to receive?</p>
    <p>how can we improve our communication models and infrastructure to provide a complete low latency/high throughput platform for edge/cloud computing.</p>
    <p>What critical functionality in missing in our current proposal?</p>
    <p>What are other platforms that we should compare our platform with?</p>
    <p>Are there other technologies that we could leverage to improve our proposal?</p>
    <p>Are there other communication models or paradigms (other than pub/sub and streaming) that we should provide?</p>
  </div>
  <div class="page">
    <p>Discussions (2) The open issues the paper does not addressed</p>
    <p>Applications would need to be modified to take advantage of Shimmys architecture, but we hope that the performance benefits will make it worth.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
