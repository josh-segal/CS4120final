<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Normbased behaviour modifica2on in BDI agents</p>
    <p>Felipe Meneguzzi felipe.meneguzzi@kcl.ac.uk</p>
    <p>Michael Luck</p>
    <p>michael.luck@kcl.ac.uk 1 Meneguzzi and Luck</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Context  Norms in Agent Languages  Norma2ve Processing  Norma2ve AgentSpeak(L)  Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>CONTEXT</p>
  </div>
  <div class="page">
    <p>Societal Control</p>
    <p>Mul2agent systems:  Mul2ple autonomous agents  Adaptable to changes  Certain degree of unpredictability  Require societal control</p>
    <p>Norms provide a valuable mechanism to impose control on agent socie2es</p>
  </div>
  <div class="page">
    <p>Norma2ve Systems</p>
    <p>Define standards of acceptable behaviour  Rely on representa2on of:  Obliga2ons  Prohibi2ons  Permissions</p>
    <p>Research largely on the macro level  We need to address how individual agents adapt to norms, should they choose to follow them</p>
  </div>
  <div class="page">
    <p>NORMS IN AGENT LANGUAGES</p>
  </div>
  <div class="page">
    <p>Norm Representa2on</p>
    <p>Focuses on the opera2onal aspect of norm compliance by an agent</p>
    <p>Norms are defined in the form: norm(Ac,va,on, Expira,on, NormCondi,on)</p>
    <p>Deno2ng when a norm becomes ac2ve and expires, and what is the object of the norm</p>
  </div>
  <div class="page">
    <p>Norms and Goal Types</p>
    <p>We narrow norm types down to:  Obliga2ons  agent must do/achieve something  Prohibi2ons  agent must not do/achieve something</p>
    <p>Norm Meaning</p>
    <p>obliga2on(p) add a goal to achieve state p, from Ac,va,on to Expira,on.</p>
    <p>obliga2on(a) add a new plan with a Ac,va,on triggering event, and ac2on a in its body.</p>
    <p>prohibi2on(p) prevent adop2on of plans that bring about state p.</p>
    <p>prohibi2on(a) prevent adop2on of plans that execute ac2on a.</p>
  </div>
  <div class="page">
    <p>Norm Percep2on</p>
    <p>Norms perceived as environmental informa2on  If accepted, the following flow occurs</p>
    <p>Environment / Society</p>
    <p>Accept?</p>
    <p>Sanctions</p>
    <p>Verify Consistency</p>
    <p>Change Behaviour</p>
    <p>Norms</p>
    <p>Accept Norm</p>
    <p>Reject Norm</p>
  </div>
  <div class="page">
    <p>Mo2va2ng Example</p>
    <p>Agent (in AgentSpeak) +!cleanRoom(Room) : at(Room) &lt;- +clean(Room).</p>
    <p>+!clean(room1) : true &lt;- +at(room1); !cleanRoom(room1).</p>
    <p>+!clean(classifRoom) : true &lt;- +at(classifRoom); !cleanRoom(classifRoom).</p>
    <p>+cleanClassif : true &lt;- !clean(classifRoom).</p>
    <p>Norms norm(time(4), time(20), obligation(clean(room1)))</p>
    <p>norm(time(6), time(22), prohibition(at(classifRoom))</p>
  </div>
  <div class="page">
    <p>Expected Result</p>
    <p>Events</p>
    <p>time(4)  time(6)</p>
    <p>cleanClassif</p>
    <p>time(20)</p>
    <p>time(22)</p>
    <p>Effects</p>
    <p>Adopt plan to clean room1  Suppress plan to clean</p>
    <p>classifRoom</p>
    <p>No plan should be adopted</p>
    <p>Obliga2on to clean room1 expires</p>
    <p>Plan to clean classifRoom no longer suppressed</p>
  </div>
  <div class="page">
    <p>In a nutshell</p>
    <p>Plan Library</p>
    <p>Plan 1 Plan 2</p>
    <p>Plan 6Obligation</p>
    <p>Prohibition</p>
    <p>Plan 3 Plan 4</p>
    <p>Plan 5</p>
  </div>
  <div class="page">
    <p>NORMATIVE PROCESSING</p>
  </div>
  <div class="page">
    <p>Norm Outcomes</p>
    <p>Generate Plans</p>
    <p>Plan for Start Condition</p>
    <p>Plan for End Condition</p>
    <p>Accepted</p>
    <p>Norm</p>
  </div>
  <div class="page">
    <p>Norm Ac2va2on</p>
    <p>Obliga2ons  Behaviours associated with obliga2ons must be carried out when they become ac2ve</p>
    <p>Ac2va2on condi2on becomes trigger for plans that achieve obliga2ons</p>
    <p>Prohibi2ons  Behaviours associated with prohibi2ons must not be carried out when they become ac2ve</p>
    <p>Ac2va2on condi2ons becomes trigger for plans that filter inten2ons and plan library</p>
  </div>
  <div class="page">
    <p>Norm Expira2on</p>
    <p>When a norm expires, its effects in the plan library must be reversed</p>
    <p>Plans added for obliga2ons can be removed  Plans suppressed for prohibi2ons must be restored</p>
  </div>
  <div class="page">
    <p>Norm Outcomes DeonHc Modality AcHvaHon</p>
    <p>CondiHon ExpiraHon CondiHon</p>
    <p>Outcome</p>
    <p>obliga2on(O) True True Ignore norm</p>
    <p>True False Adopt plan to achieve O (if O is a world state) or adopt plan to execute O (if O is an ac2on)</p>
    <p>False False Add plan to achieve O (if O is a world state) or add plan that includes O (if O is an ac2on) to PL when ac2va2on holds</p>
    <p>False True Ignore norm</p>
    <p>prohibi2on(P) True True Ignore norm</p>
    <p>True False Drop inten2ons to achieve P and suppress plans that achieve P (if P is a world state) or drop inten2ons that include P and suppress plans that include P (if P is an ac2on)</p>
    <p>False False Add plan to suppress plans that achieve P (if P is a world state) or plans that include P (if P is an ac2on) when ac2va2on holds</p>
    <p>False True Ignore norm 17 Meneguzzi and Luck</p>
  </div>
  <div class="page">
    <p>NORMATIVE AGENTSPEAK(L)</p>
  </div>
  <div class="page">
    <p>Metareasoning Operators</p>
    <p>Implementa2on created using Jason  Extended with metalevel ac2ons:</p>
    <p>AcHon Effect</p>
    <p>.plan_steps(P,S) takes a plan P and unifies its plan steps as a list of literals with S</p>
    <p>.plan_conseq(P,C) takes a plan P and unifies its declara2ve consequences with C</p>
    <p>.ac2on(A) succeeds if A refers to an ac2on</p>
    <p>.literal(L) succeeds if L to a literal</p>
    <p>.remove_plan(P) removes P from the plan library</p>
    <p>.suppress_plan(P) suppresses the specified plan (prevents from being executed)</p>
    <p>.unsuppress_plan(P) allows a previously suppressed plan to be executed 19 Meneguzzi and Luck</p>
  </div>
  <div class="page">
    <p>Plan Modifica2on Strategies @prohibitionStart(Prohibition) +!Start : true &lt;- !findPlansWithAction(Prohibition, SPlans); !suppressPlans(SPlans); +suppressedPlans(Prohibition,SPlans).</p>
    <p>@prohibitionEnd(Prohibition) +!End : suppressedPlans(Prohibition,SPlans) &lt;- !unsuppressPlans(SPlans); .remove_plan(prohibitionStart(Prohibition)); .remove_plan(prohibitionEnd(Prohibition)).</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS AND FUTURE WORK</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A prac2cal framework for norma2ve processing at the agent level</p>
    <p>Generic enough for applica2on to most modern agent languages</p>
    <p>Working prototype in AgentSpeak(L)  www.meneguzzi.eu/felipe/soeware.html</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Current framework is very coarse  Suppression cannot refer to specific instances of ac2ons/world states</p>
    <p>Future work will allow specific restric2ons to be added to norms</p>
  </div>
  <div class="page">
    <p>Normbased behaviour modifica2on in BDI agents</p>
    <p>Felipe Meneguzzi Michael Luck</p>
    <p>felipe.meneguzzi@kcl.ac.uk</p>
  </div>
</Presentation>
