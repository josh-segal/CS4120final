<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>David Lazar, Yossi Gilad, Nickolai Zeldovich</p>
    <p>Karaoke Distributed Private Messaging</p>
    <p>Immune to Passive Traffic Analysis</p>
    <p>1</p>
  </div>
  <div class="page">
    <p>Motivation: Report a crime without getting fired</p>
    <p>Journalist</p>
    <p>Youre Fired if you talk to the journalist!</p>
    <p>Govt. Employees</p>
    <p>Govt. Boss (Adversary)</p>
    <p>!2</p>
    <p>Bob</p>
  </div>
  <div class="page">
    <p>Goal: Metadata-Private Text Messaging</p>
    <p>Text Messaging App</p>
    <p>Bob</p>
    <p>!3</p>
  </div>
  <div class="page">
    <p>Watches the network  Runs some of the servers</p>
    <p>Threat Model: Global Adversary</p>
    <p>Bob</p>
    <p>!4</p>
    <p>Can we prevent him from learning who Bob is chatting with?</p>
  </div>
  <div class="page">
    <p>Prior Approaches Vuvuzela [SOSP 15] Stadium [SOSP 17]</p>
    <p>Pung [OSDI 16] Dissent [OSDI 14]</p>
    <p>Privacy</p>
    <p>No Privacy Guarantee Differential Privacy Cryptographic Privacy</p>
    <p>!5</p>
  </div>
  <div class="page">
    <p>Prior Approaches Vuvuzela [SOSP 15] Stadium [SOSP 17]</p>
    <p>Pung [OSDI 16] Dissent [OSDI 14]</p>
    <p>Privacy</p>
    <p>Scalability</p>
    <p>Differential Privacy Cryptographic PrivacyNo Privacy Guarantee</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Scalability is critical for security</p>
    <p>Whistleblower</p>
    <p>Journalist !7</p>
    <p>Bob</p>
  </div>
  <div class="page">
    <p>App must scale to everyone, so it isnt suspicious when Bob joins</p>
    <p>Whistleblower</p>
    <p>Journalist !8</p>
    <p>Bob</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Karaoke: a distributed metadata-private messaging system that scales to more users</p>
    <p>Cryptographic privacy against passive attackers.</p>
    <p>Differential privacy against active attackers.</p>
    <p>8s end-to-end latency with 4M users.</p>
    <p>5x to 11x faster than prior work.</p>
    <p>!9</p>
  </div>
  <div class="page">
    <p>Insight: treat passive and active attackers separately</p>
    <p>!10</p>
    <p>Privacy</p>
    <p>Scalability</p>
    <p>Karaoke</p>
    <p>No Privacy Differential Privacy Cryptographic Privacy</p>
    <p>active attacker</p>
    <p>passive attacker</p>
  </div>
  <div class="page">
    <p>Global Passive Adversary</p>
    <p>Watches the network  Runs some of the servers</p>
    <p>!11</p>
  </div>
  <div class="page">
    <p>Observations by Adversary</p>
    <p>!12</p>
    <p>Inputs Server State +</p>
    <p>Network Links</p>
    <p>Outputs</p>
  </div>
  <div class="page">
    <p>Observations by Adversary</p>
    <p>!13</p>
    <p>Inputs</p>
  </div>
  <div class="page">
    <p>Hiding inputs: constant cover traffic in rounds</p>
    <p>!14</p>
    <p>Round 1 Round 2</p>
  </div>
  <div class="page">
    <p>Hiding outputs</p>
    <p>!15</p>
    <p>Outputs</p>
  </div>
  <div class="page">
    <p>Hiding outputs with dead drops [Vuvuzela]</p>
    <p>!16</p>
    <p>Dead drops</p>
    <p>Dead drop: designated location to exchange messages.</p>
    <p>Named by pseudorandom ID, so reveals nothing about the users.</p>
    <p>When two users access the same dead drop, their messages are exchanged.</p>
    <p>Idle users result in dead drop with one access.</p>
  </div>
  <div class="page">
    <p>Dead drops alone are insufficient</p>
    <p>!17</p>
    <p>Obvious from outputs if Alice and Bob are chatting.</p>
    <p>Chatting Not Chatting</p>
    <p>Alice</p>
    <p>Bob</p>
  </div>
  <div class="page">
    <p>Vuvuzela generates dummy accesses (noise)</p>
    <p>!18</p>
    <p>Chatting Not Chatting</p>
    <p>Differential privacy: no single round reveals much, but many rounds of observation might reveal a pattern.</p>
  </div>
  <div class="page">
    <p>Karaoke dead drops are always doubles</p>
    <p>!19</p>
    <p>Chatting Not Chatting</p>
  </div>
  <div class="page">
    <p>Message doubling provides cryptographic privacy</p>
    <p>!20</p>
    <p>Chatting Not Chatting</p>
    <p>Cryptographic privacy: adversary cant distinguish whether Alice</p>
    <p>and Bob are chatting</p>
  </div>
  <div class="page">
    <p>Observations by Adversary</p>
    <p>!21</p>
    <p>Inputs Server State +</p>
    <p>Network links</p>
    <p>Outputs</p>
  </div>
  <div class="page">
    <p>Mixnet Review</p>
    <p>!22</p>
    <p>Dead drops</p>
    <p>Guarantee: if one server is honest, adversary can not tell which users accessed</p>
    <p>which dead drops</p>
  </div>
  <div class="page">
    <p>Distributed Mixnet: each server processes subset of messages</p>
    <p>!23</p>
  </div>
  <div class="page">
    <p>Users pick random paths through the network</p>
    <p>Hop 1 Hop 2 Hop 3 Hop 4</p>
    <p>!24</p>
  </div>
  <div class="page">
    <p>Servers decrypt and shuffle incoming messages at each hop</p>
    <p>Hop 1 Hop 2 Hop 3 Hop 4</p>
    <p>!25</p>
  </div>
  <div class="page">
    <p>Last hop does the dead drop exchanges</p>
    <p>Hop 1 Hop 2 Hop 3 Hop 4</p>
    <p>!26</p>
    <p>Dead drops</p>
  </div>
  <div class="page">
    <p>Challenge: network links between hops show Alice is talking to Bob!</p>
    <p>Hop 1 Hop 2 Hop 3 Hop 4</p>
    <p>!27</p>
  </div>
  <div class="page">
    <p>Karaokes message doubling gives us some hope!</p>
    <p>Hop 1 Hop 2 Hop 3 Hop 4</p>
    <p>!28</p>
  </div>
  <div class="page">
    <p>Possible cases for the last hop</p>
    <p>!29</p>
    <p>Chatting Not Chatting</p>
    <p>Goal: make these cases indistinguishable so the rest of</p>
    <p>the links dont matter.</p>
  </div>
  <div class="page">
    <p>!30</p>
    <p>Tangled Messages</p>
    <p>= OR</p>
  </div>
  <div class="page">
    <p>Tangling one of Alices and one of Bobs messages achieves our goal</p>
    <p>!31</p>
    <p>Tangled Messages</p>
    <p>= OR</p>
    <p>Last hop</p>
  </div>
  <div class="page">
    <p>An honest server tangles messages</p>
    <p>!32</p>
    <p>Last hop</p>
  </div>
  <div class="page">
    <p>Problem: Alice and Bobs messages might not intersect at an honest server</p>
    <p>!33</p>
    <p>Last hop</p>
  </div>
  <div class="page">
    <p>Problem: Alice and Bobs messages might not intersect at an honest server</p>
    <p>!34</p>
    <p>Assume the paths of Alices and</p>
    <p>Bobs other messages are completely compromised.</p>
  </div>
  <div class="page">
    <p>Karaoke servers generate dummy messages that can be used for tangling</p>
    <p>!35</p>
    <p>noise</p>
  </div>
  <div class="page">
    <p>Bobs message is now tangled with noise</p>
    <p>!36</p>
    <p>noise</p>
  </div>
  <div class="page">
    <p>Similarly, Alices message can tangle with noise</p>
    <p>!37</p>
    <p>noise</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>Is it possible that the noise messages swapped places?</p>
    <p>!38</p>
  </div>
  <div class="page">
    <p>As a result, Alices and Bobs messages could also have switched places</p>
    <p>!39</p>
  </div>
  <div class="page">
    <p>Tangling with high probability</p>
    <p>The shape we just saw is a bit complicated, but it enables Alice and Bob to get tangled with high probability</p>
    <p>Assuming 80% of the servers are honest</p>
    <p>14 hops results in tangling with high probability</p>
    <p>Servers need to add a small amount of noise messages per outgoing link</p>
    <p>!40</p>
  </div>
  <div class="page">
    <p>Karaoke Summary</p>
    <p>!41</p>
    <p>Inputs Server State +</p>
    <p>Network links</p>
    <p>Dead drops</p>
  </div>
  <div class="page">
    <p>Defending against a global active adversary</p>
    <p>Karaoke provides differential privacy against a global active adversary</p>
    <p>Karaoke adds additional noise messages to protect against message drops</p>
    <p>Due to message doubling, active attacks (message drops) are rare and detectable, so Karaoke needs far less noise compared to prior work.</p>
    <p>We use bloom filters to ensure malicious servers dont discard the noise. (See paper)</p>
    <p>!42</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>4000 lines of Go code</p>
    <p>Major CPU cost is onion decryption</p>
    <p>Configured to resist 200 active attacks per user (see paper)</p>
    <p>!43</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Does Karaoke support a large number of users with good end-to-end latency?</p>
    <p>How does Karaokes performance compare to prior work?</p>
    <p>Does it scale? (i.e., does Karaoke support more users by adding more servers?)</p>
    <p>!44</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>50 to 200 Amazon EC2 instances</p>
    <p>c4.8xlarge (36 cores) instances for comparison to Vuvuzela and Stadium</p>
    <p>c5.8xlarge instances for all other experiments</p>
    <p>10 Gbps links</p>
    <p>100 ms of simulated network latency between instances</p>
    <p>!45</p>
  </div>
  <div class="page">
    <p>Karaoke achieves low latency for many users</p>
    <p>!46</p>
    <p>La te</p>
    <p>nc y</p>
    <p>fo r</p>
    <p>us er</p>
    <p>m es</p>
    <p>sa ge</p>
    <p>s</p>
    <p>Number of users</p>
    <p>Karaoke</p>
    <p>Vuvuzela</p>
    <p>Stadium</p>
  </div>
  <div class="page">
    <p>Karaoke is CPU bound</p>
    <p>!47</p>
    <p>La te</p>
    <p>nc y</p>
    <p>fo r</p>
    <p>us er</p>
    <p>m es</p>
    <p>sa ge</p>
    <p>s</p>
    <p>Number of users</p>
    <p>Karaoke (c5)</p>
    <p>Karaoke (c4)</p>
    <p>Vuvuzela</p>
    <p>Stadium</p>
  </div>
  <div class="page">
    <p>Karaoke supports more users by adding servers</p>
    <p>!48</p>
    <p>La te</p>
    <p>nc y</p>
    <p>fo r</p>
    <p>us er</p>
    <p>m es</p>
    <p>sa ge</p>
    <p>s</p>
    <p>Number of servers</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Karaoke: distributed metadata-private messaging system that scales to more people</p>
    <p>Cryptographic privacy against passive attackers</p>
    <p>Technique: message doubling + message tangling</p>
    <p>8 seconds end-to-end latency for 4 million users</p>
    <p>5x-11x faster than Vuvuzela/Stadium</p>
    <p>!49</p>
  </div>
  <div class="page">
    <p>https://vuvuzela.io</p>
    <p>!50</p>
  </div>
</Presentation>
