<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Putting the Software Radio on a LowCalorie Diet</p>
    <p>Prabal Dutta, Ye-Sheng Kuo, Akos Ledeczi, Thomas Schmid, Peter Volgyesi</p>
    <p>HotNets10  Monterey, CA  October 20, 2010</p>
  </div>
  <div class="page">
    <p>Software radios have enabled novel directions in wireless research</p>
  </div>
  <div class="page">
    <p>Mobile and low-power wireless research has not benefitted as much from software radios</p>
    <p>Three SDR scaling challenges  Power (Active and Sleep)</p>
    <p>A: USRP (10 W) vs Mote (60 mW)</p>
    <p>S: USRP (10 W?) vs Mote (20 W)</p>
    <p>Cost  USRP ($850) vs Mote ($65)  WARP cost &gt;&gt; USRP cost</p>
    <p>Size  USRP (36 in2) vs Mote (1 in2)  WARP (64 in2) vs Mote (1 in2)</p>
    <p>MoteUSRP</p>
  </div>
  <div class="page">
    <p>Imagine if we could build a small, inexpensive, and low-power software radio</p>
    <p>Software radios that you could  Hold in the palm of your hand  Embed in the physical world  Deploy at very large scale  Operate from solar power  Hand out for student labs</p>
    <p>Software radios that would enable  Mobile networking research  Application-driven research  Large-scale, in situ evaluations  Energy-adaptive communications  Hands-on learning</p>
  </div>
  <div class="page">
    <p>Addressing the size, power, and cost challenges will enable more natural deployment experiences</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Scaling Challenges</p>
    <p>Technology Enablers</p>
    <p>Architectural Sketch</p>
    <p>Research Challenges</p>
  </div>
  <div class="page">
    <p>Challenge #1: Power</p>
    <p>Low-power systems duty cycle  Attempt to achieve power proportional operation  Architectures support power control  High CPU and radio power draws  Radio turned off or in standby  CPU halted and put to sleep</p>
    <p>SDRs cannot duty cycle  Fail to achieve power proportional operation  Architectures do not support it  Processor does not support sleep  SRAM-based FPGA cannot sleep  Radio power controls not exposed</p>
  </div>
  <div class="page">
    <p>Challenge #1: Power (or, why SRAM FPGAs are not power-proportional)</p>
    <p>High in-rush current  High static power</p>
    <p>Approximately 10x transistors needed  Increases with smaller transistors  Increases with lower Vth</p>
    <p>High configuration current (and time)</p>
    <p>Not amenable to efficient duty cycling</p>
  </div>
  <div class="page">
    <p>Challenge #2: Size (or, why modularity is expensive)</p>
    <p>Conventional SDRs  General-purpose  Highly reconfigurable  Modular platforms  Large size</p>
    <p>Reconfigurable Motes  Application-specific  Modestly reconfigurable  Not modular  Small size  Examples</p>
    <p>Waldo Mote  Bridge Monitor</p>
    <p>Bridge Monitor. Src: P. Volgyesi</p>
    <p>Waldo Mote. Src: S. Lanszisera</p>
  </div>
  <div class="page">
    <p>Challenge #3: Cost (or, why discrete components drive up costs)</p>
    <p>XC4VFX100-10FF1517C FPGA  94,896 logic cells  $2400</p>
    <p>Radio board  MAX2829  Power Amp  Ant Switch  SMA I/F  AD9777  AD9248  AD9200</p>
  </div>
  <div class="page">
    <p>Summary of the scaling challenges</p>
    <p>Power  SRAM FPGAs have high static power and cannot duty</p>
    <p>cycle  SDR architectures do not support power controls</p>
    <p>Size  Modular designs are large and 3-dimensional  Discrete chips for RF and baseband pathways take up</p>
    <p>space</p>
    <p>Cost  Ultra high-performance FPGAs are expensive  Discrete chips for RF and baseband pathways is costly</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Scaling Challenges</p>
    <p>Technology Enablers</p>
    <p>Architectural Sketch</p>
    <p>Research Challenges</p>
  </div>
  <div class="page">
    <p>Emerging mixed-signal FPGAs (e.g. Actel SmartFusion)  Integrates</p>
    <p>FPGA (200K/500K gates)  Hard CPU (ARM Cortex-M3)  Analog Compute Engine (ACE)</p>
    <p>FPGA  Flash-based  Low-power  Logic tiles + SRAM blocks</p>
    <p>CPU  100 MHz+ operation  64K SRAM / 256K Flash  FPGA memory-mapped on AHB</p>
    <p>ACE  600 ksps ADC/DAC  Fast comparators  Simple DSP operations</p>
    <p>http://www.actel.com</p>
  </div>
  <div class="page">
    <p>CPU and FPGA compute fabrics interfaced via AHB</p>
    <p>CPU</p>
    <p>FPGA</p>
    <p>Source: Actel SmartFusion MSS User Guide</p>
  </div>
  <div class="page">
    <p>Flash-based FPGA can be duty cycled</p>
    <p>Low in-rush current  Low static power (W)  No configuration current  No configuration delay  Amenable to duty cycling</p>
    <p>FlashFreeze mode  Clock domains suspended  High-impedance I/O  Memory contents preserved</p>
    <p>Limitations  Slow max speed (10-40 MHz)  Lower gate count (130 nm node)  Long reprogramming time (flash</p>
    <p>erase/write)  Limited number of programming cycles</p>
    <p>(~1000)</p>
  </div>
  <div class="page">
    <p>Highly-integrated RF transceivers</p>
    <p>Small layout size  Approx 150 mm2</p>
    <p>Including externals</p>
    <p>Low-power  Active: ~200-900 mW  Sleep: ~30 W</p>
    <p>High integration  RF transceiver  Integrated PA  Integrated RX/TX SW  Integrated diversity SW</p>
    <p>ADCs/DACs  Integrated in FPGA  (at least slow ones)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Scaling Challenges</p>
    <p>Technology Enablers</p>
    <p>Architectural Sketch</p>
    <p>Research Challenges</p>
  </div>
  <div class="page">
    <p>Architectural sketch of a lean SDR platform</p>
    <p>Mixed-signal FPGA  Flash-based matrix + PLL  ARM Cortex CPU (M1 or M3)  ADC/DAC/Analog Comparator</p>
    <p>2.4 GHz Radio  RF-to-baseband  Osc, Dig Frq Synth  PA, RX/TX Switch</p>
    <p>Timebase  32 kHz TCXO + DCO + VHT</p>
    <p>Power  DC/DC converters  Energy metering</p>
    <p>Optional  40 Msps ADC / 40 MHz DAC</p>
  </div>
  <div class="page">
    <p>Addressing the scaling challenges</p>
    <p>Power  SRAM FPGAs have high static power  Use Flash-based</p>
    <p>FPGAs  SDRs do not support power controls  Support Power Mgmt</p>
    <p>Size  Modular designs are large  De-modularize the design  Discrete chips take up space  Leverage IC integration</p>
    <p>Cost  High-end FPGAs are expensive  Remove, complement with</p>
    <p>CPU  Discrete chips are costly  Leverage integration, PCB Ant,</p>
  </div>
  <div class="page">
    <p>A few other odds and ends</p>
    <p>Power-proportional timer system  Offers virtual high-resolution time  Balances fast-timer resolution (xx:34)  with slow-timer power draw (12:xx)  Provides resolution on demand</p>
    <p>Fast radio startup  Accelerates sleep  active transition  Uses crystal to train ring oscillator  Uses ring oscillator to kickstart crystal  Balances high-Q and fast radio startup</p>
    <p>Regulator-integrated energy meter  Supports application-level power</p>
    <p>profiling  Counts switching cycles of regulator  Transfers fixed energy quanta per cycle</p>
  </div>
  <div class="page">
    <p>Back-of-the-envelope evaluation</p>
    <p>Desc Mfg Part Size Cost Power (mW)</p>
    <p>FPGA Actel A2F200M3F 17x17 mm $40 TBD*</p>
    <p>Radio Maxim MAX2830 7x7 mm $4 186/0.030</p>
    <p>OSC Maxim DS32kHz 11x11 mm $4 0.005/na</p>
    <p>PCB 4PCB 4-layer PCB 38x63 mm $5 na Power TI Various 25x25 mm $5 20%</p>
    <p>overhead</p>
    <p>ADC ADI AD9288 9x9 mm $6 156/6</p>
    <p>DAC Maxim MAX5189 6x10 mm $5 7/1</p>
    <p>Misc Various Various Various $31 n/a</p>
    <p>~4 x 6 cm ~$100 ~350/10</p>
    <p>* Actel IGLOO active power ~ 10s mW and standby power ~10 W. * Actel SmartFusion power to be characterized.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Scaling Challenges</p>
    <p>Technology Enablers</p>
    <p>Architectural Sketch</p>
    <p>Research Challenges</p>
  </div>
  <div class="page">
    <p>Time multiplex algorithms on the CPU or parallelize algorithms on the FPGA fabric?</p>
    <p>FPGA</p>
    <p>Verilog/VHDL RTLs  Parallel  Fast to run  Hard to write  Great power-efficiency  Gate-limited  Use soft CPU core?</p>
    <p>CPU</p>
    <p>Assembly/C/C++  Sequential  Slow to run  Easy to write  Poor power-efficiency  Memory-limited  Use hard CPU core</p>
  </div>
  <div class="page">
    <p>How should we reuse existing SDR libraries?</p>
    <p>Lots of SDR &amp; soft router software</p>
    <p>Better to not reinvent the wheel  How can these libraries be</p>
    <p>wrapped?  Implications on computation</p>
    <p>model?</p>
    <p>http://gnuradio.org/redmine/repositories/browse/gnuradio/gnuradio-core/src/lib</p>
    <p>C li c k</p>
  </div>
  <div class="page">
    <p>Let chaos reign then rein in the chaos</p>
    <p>Many basic architectural questions  How much low-level detail should be exposed to</p>
    <p>applications?  How to balance component library flexibly and reuse?  How should computations be scheduled?</p>
    <p>But many questions dont need immediate answers  Allow exploration of the design space  Allow competing software architectures  Eventually converge on known good design points</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Scaling Challenges</p>
    <p>Technology Enablers</p>
    <p>Architectural Sketch</p>
    <p>Research Challenges</p>
  </div>
  <div class="page">
    <p>This work is about finding a middle ground</p>
    <p>MoteUSRP SDR</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Comments?</p>
    <p>Discussion?</p>
  </div>
</Presentation>
