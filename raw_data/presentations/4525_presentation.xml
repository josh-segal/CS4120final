<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Architecture to Support</p>
    <p>Cognitive-Control of SDR Nodes</p>
    <p>Karen Zita Haigh</p>
    <p>khaigh@bbn.com</p>
  </div>
  <div class="page">
    <p>Roles for AI in Networking</p>
    <p>Cyber Security</p>
    <p>Network Configuration</p>
    <p>(which modules to use)</p>
    <p>Network Control (which</p>
    <p>parameter settings to</p>
    <p>use)</p>
    <p>Policy Management</p>
    <p>Traffic Analysis</p>
    <p>Sensor fusion / situation</p>
    <p>assessment</p>
    <p>Planning</p>
    <p>Coordination</p>
    <p>Optimization</p>
    <p>Constraint reasoning</p>
    <p>Learning (Modelling)</p>
    <p>Complex Domain</p>
    <p>Dynamic Domain</p>
    <p>Unpredictable by Experts</p>
    <p>AI enables real-time, context-aware adaptivity</p>
  </div>
  <div class="page">
    <p>Network Control is ready for AI</p>
    <p>Massive Scale: ~600 observables and ~400 controllables per node.</p>
    <p>Distributed: each node must make its own decisions</p>
    <p>Complex Domain:</p>
    <p>Complex &amp; poorly understood interactions among parameters</p>
    <p>Complex temporal feedback loops (at least 3: MAC/PHY, within node,</p>
    <p>across nodes); High-latency</p>
    <p>Rapid decision cycle: one second is a long time</p>
    <p>Constrained: Low-communication: cannot share all knowledge</p>
    <p>Incomplete Observations:</p>
    <p>Partially-observable: some things can not be observed</p>
    <p>Ambiguous observations: what caused the observed effect?</p>
    <p>Human network engineers cant handle</p>
    <p>this complexity!</p>
  </div>
  <div class="page">
    <p>A Need for Restructuring</p>
    <p>SDR gives opportunity to create</p>
    <p>highly-adaptable systems, BUT  They usually require network experts to</p>
    <p>exploit the capabilities!</p>
    <p>They usually rely on module APIs that</p>
    <p>are carefully designed to expose each</p>
    <p>parameter separately.</p>
    <p>This approach is not maintainable  e.g. as protocols are redesigned or new</p>
    <p>parameters are exposed.</p>
    <p>This approach is not amenable to</p>
    <p>real-time cognitive control  Hard to upgrade</p>
    <p>Conflicts between module &amp; AI</p>
    <p>Module 1</p>
    <p>Module 2</p>
  </div>
  <div class="page">
    <p>A Need for Restructuring</p>
    <p>We need one consistent, generic, interface</p>
    <p>for all modules to expose their parameters</p>
    <p>and dependencies.</p>
    <p>Module 2</p>
    <p>Module 1</p>
  </div>
  <div class="page">
    <p>A Generic Network Architecture</p>
    <p>exposeParameter( parameter_name, parameter_properties )</p>
    <p>setValue( parameter_handle, parameter_value )</p>
    <p>getValue( parameter_handle )</p>
    <p>Broker</p>
    <p>- Assigns</p>
    <p>handles</p>
    <p>- Provides</p>
    <p>directory</p>
    <p>services</p>
    <p>- Sets up event</p>
    <p>monitors</p>
    <p>- Pass through</p>
    <p>get/set</p>
    <p>Cognitive</p>
    <p>Control</p>
    <p>Command</p>
    <p>Line Interface</p>
    <p>Network</p>
    <p>Management</p>
    <p>Network Stack</p>
    <p>N e tw</p>
    <p>o rk</p>
    <p>M o</p>
    <p>d u le</p>
    <p>Network Module</p>
    <p>Registering</p>
    <p>Modules</p>
    <p>Re/Setting</p>
    <p>Modules</p>
    <p>Observing</p>
    <p>Params</p>
    <p>Registering</p>
    <p>Modules &amp;</p>
    <p>Parameters</p>
    <p>Re/Setting</p>
    <p>Modules</p>
    <p>Observing</p>
    <p>Params</p>
    <p>Applications /</p>
    <p>QoS</p>
  </div>
  <div class="page">
    <p>Benefits of a Generic Architecture</p>
    <p>It supports network architecture design &amp;</p>
    <p>maintenance</p>
    <p>Solves the nm problem (upgrades or</p>
    <p>replacements of network modules)</p>
    <p>It doesnt restrict the form of cognition</p>
    <p>Open to just about any form of cognition you</p>
    <p>can imagine</p>
    <p>Supports multiple forms of cognition on each</p>
    <p>node</p>
    <p>Supports different forms across nodes</p>
  </div>
  <div class="page">
    <p>An example:</p>
    <p>Adaptive Dynamic Radio Open-source</p>
    <p>Intelligent Team (ADROIT)</p>
    <p>BBN, UKansas, UCLA, MIT</p>
  </div>
  <div class="page">
    <p>ADROITs mission</p>
    <p>DARPA project</p>
    <p>Create cognitive radio teams with both real-time</p>
    <p>composability of the stack and cognitive control of the</p>
    <p>network.</p>
    <p>Recognize that the situation has changed</p>
    <p>Anticipates changes in networking needs</p>
    <p>Adapts the network, in real-time, for improved</p>
    <p>performance</p>
    <p>Real-time composability of the stack</p>
    <p>Real-time Control of parameters</p>
    <p>On one node or across the network</p>
  </div>
  <div class="page">
    <p>Experimental Testbed</p>
    <p>Maximize %</p>
    <p>of shared map</p>
    <p>of the</p>
    <p>environment</p>
  </div>
  <div class="page">
    <p>Experiment Description</p>
    <p>Maximize % of shared map of the environment</p>
    <p>Goal: Choose Strategy to maximize expected outcome given Conditions.  Each node chooses</p>
    <p>independently, so strategies must be interoperable</p>
    <p>Measure conditions  signal strength from other</p>
    <p>nodes</p>
    <p>location of each node</p>
    <p>Strategies:</p>
    <p>2 binary strategy choices for 4 strategies</p>
    <p>multicast, unicast</p>
    <p>always</p>
    <p>if we are farthest (and data is not ours), refrain from sending</p>
  </div>
  <div class="page">
    <p>Experimental Results Training Run:</p>
    <p>In first run nodes learn about environment</p>
    <p>Train neural nets with (C,S)P tuples  Every 5s, measure and</p>
    <p>record progress conditions, strategy</p>
    <p>Observations are local, so each node has different model!</p>
    <p>Real-time learning run:</p>
    <p>In second run, nodes adapt behavior to perform better.</p>
    <p>Adapt each minute by changing strategy according to current conditions</p>
    <p>Real-time cognitive control of a</p>
    <p>real-world wireless network</p>
  </div>
  <div class="page">
    <p>Observations from Learning</p>
    <p>Selected configurations explainable but not</p>
    <p>predictable Farthest-refraining was usually better</p>
    <p>congestion, not loss dominated</p>
    <p>Unicast/Multicast was far more complex close: unicast wins (high data rates)</p>
    <p>medium: multicast wins (sharing gain)</p>
    <p>far: unicast wins (reliability)</p>
    <p>System performed better with learning</p>
  </div>
  <div class="page">
    <p>Overcoming Cultural Differences to</p>
    <p>Get a Good Design</p>
  </div>
  <div class="page">
    <p>Cultural Issues: But why?</p>
    <p>Benefits and scope of cross-layer design: More than 2 layers!</p>
    <p>More than 2-3 parameters per layer</p>
    <p>Drill-down walkthroughs highlighted benefits to networking folks; explained restrictions to AI folks</p>
    <p>Simulation results for specific scenarios demonstrated the power</p>
    <p>Traditional network</p>
    <p>design includes</p>
    <p>adaptation But this works against</p>
    <p>cognition: it is hard to</p>
    <p>manage global scope</p>
    <p>AI people want to control</p>
    <p>everything</p>
    <p>But network module may</p>
    <p>be better at doing</p>
    <p>something focussed</p>
    <p>Design must include</p>
    <p>constraining how a</p>
    <p>protocol adapts</p>
  </div>
  <div class="page">
    <p>Cultural Issues: But how?</p>
    <p>Reliance on</p>
    <p>centralized Broker:</p>
    <p>Networking folks</p>
    <p>dont like the single</p>
    <p>bottleneck</p>
    <p>Design must have</p>
    <p>fail-safe default</p>
    <p>operation</p>
    <p>Asynchrony and</p>
    <p>Threading:</p>
    <p>AI people tend to</p>
    <p>like blocking calls.</p>
    <p>e.g. to ensure that</p>
    <p>everything is</p>
    <p>consistent</p>
    <p>Networking folks</p>
    <p>outright rejected it.</p>
    <p>Design must include</p>
    <p>reporting and</p>
    <p>alerting</p>
  </div>
  <div class="page">
    <p>Cultural Issues: But itll break!?!</p>
    <p>Relinquishing control</p>
    <p>outside the stack:</p>
    <p>Outside controller</p>
    <p>making decisions scares</p>
    <p>networking folks</p>
    <p>AI folks say give me</p>
    <p>everything &amp; Ill solve</p>
    <p>your problem</p>
    <p>Architecture includes</p>
    <p>failsafe mechanisms to</p>
    <p>limit both sides</p>
    <p>Heterogenous and non</p>
    <p>interoperable nodes</p>
    <p>Networks usually have</p>
    <p>homogeneous</p>
    <p>configurations to</p>
    <p>maintain</p>
    <p>communications</p>
    <p>AI likes heterogeneity</p>
    <p>because of the benefit</p>
    <p>But always assumes safe</p>
    <p>communications!</p>
    <p>Orderwire bootstrap</p>
    <p>channel as backup</p>
  </div>
  <div class="page">
    <p>Cultural Issues: New horizons?</p>
    <p>Capability Boundaries</p>
    <p>Traditional Networking has very clear boundary</p>
    <p>between network and application</p>
    <p>Generic architecture blurs that boundary</p>
    <p>AI folks like the benefit</p>
    <p>Networking folks have concerns about complexity</p>
    <p>Removing this conceptual restriction will result in</p>
    <p>interesting and significant new ideas.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Traditional network architectures do</p>
    <p>not support cognition  Hardware is doing that now (SDR), but</p>
    <p>the software needs to do the same thing</p>
    <p>To leverage the power of cognitive</p>
    <p>networking, both AI folks &amp; Networking</p>
    <p>folks need to recognize and adapt</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Environment Model</p>
    <p>Signal Strength</p>
    <p>12 cart-cart strengths</p>
    <p>sorted to normalize</p>
    <p>want to apply learning to similar situations with different cart</p>
    <p>numbering</p>
    <p>Position</p>
    <p>seemed like a good idea (use more information, let</p>
    <p>neural net sort it out), but....</p>
    <p>in testing, seemed more confounding than helpful</p>
    <p>On-line estimate required</p>
    <p>operation uses environment</p>
  </div>
  <div class="page">
    <p>Configuration and Adaptation</p>
    <p>Configuration</p>
    <p>Manager  Determines what</p>
    <p>modules are currently</p>
    <p>running</p>
    <p>Tracks what modules</p>
    <p>exists</p>
    <p>Manager transitions</p>
    <p>from one configuration</p>
    <p>to another</p>
    <p>Provides basic sanity</p>
    <p>check before enabling</p>
    <p>a new configuration</p>
    <p>Broker  Changes and monitors</p>
    <p>the state of active</p>
    <p>modules</p>
    <p>Serves as a</p>
    <p>clearinghouse of</p>
    <p>information about all</p>
    <p>the modules in current</p>
    <p>configuration</p>
  </div>
  <div class="page">
    <p>ADROIT Big Picture</p>
    <p>Modular</p>
    <p>Networking</p>
    <p>And</p>
    <p>Radio</p>
    <p>Software</p>
    <p>Radio Hardware</p>
    <p>Application Application</p>
    <p>Configuration</p>
    <p>Manager</p>
    <p>Cognitive</p>
    <p>Control</p>
  </div>
  <div class="page">
    <p>Managing Cognition</p>
    <p>ADROIT doesnt choose the form</p>
    <p>Open to just about any form you can imagine</p>
    <p>Multiple forms on each node, system wide</p>
    <p>Operate via standard interface (broker)</p>
    <p>Coordination manager</p>
    <p>Coordinates interactions among radios</p>
    <p>Chooses local radios external behavior taking into</p>
    <p>account needs of other radios in team and in region</p>
    <p>Manages information sharing (keeps cognitive</p>
    <p>information exchanges within reasonable limits)</p>
  </div>
  <div class="page">
    <p>Modelling the Radio</p>
    <p>Need a way to model the radio for cognition</p>
    <p>A chunk of code (module) is not expressive enough</p>
    <p>At minimum, cognition needs to know what the chunk</p>
    <p>of code does</p>
    <p>A basic object model</p>
    <p>Each module is an object</p>
    <p>Two implementations of the same functionality are</p>
    <p>same object type, or inherit characteristics from the</p>
    <p>same object type</p>
    <p>Pieces of hardware, etc, also viewed as objects</p>
  </div>
  <div class="page">
    <p>ADROIT resources</p>
    <p>Troxel et al. Enabling open-source cognitively</p>
    <p>controlled collaboration among software-defined</p>
    <p>radio nodes. Computer Networks, 52(4):898-911,</p>
    <p>March 2008.</p>
    <p>Troxel et al, Cognitive Adaptation for Teams in</p>
    <p>ADROIT, in IEEE Global Communications</p>
    <p>Conference, Nov 2007, Washington, DC. Invited.</p>
    <p>Getting the ADROIT Code (Including the Broker)  https://acert.ir.bbn.com/</p>
    <p>checkout instructions</p>
    <p>GNU Radio changes are in main GNU Radio repository</p>
  </div>
  <div class="page">
    <p>Learning</p>
    <p>Karen Zita Haigh, Srivatsan Varadarajan,</p>
    <p>Choon Yik Tang, Automatic Learning</p>
    <p>based MANET Cross-Layer Parameter</p>
    <p>Configuration, in IEEE Workshop on</p>
    <p>Wireless Ad hoc and Sensor Networks</p>
    <p>(WWASN), Lisbon, Portugal 2006.</p>
  </div>
  <div class="page">
    <p>ADROIT Team</p>
    <p>BBN Technologies:</p>
    <p>Greg Troxel (PI), Isidro Castineyra (PM)</p>
    <p>AI: Karen Haigh, Talib Hussain</p>
    <p>Networking: Steve Boswell, Armando Caro, Alex Colvin, Yarom</p>
    <p>Gabay, Nick Goffee, Vikas Kawadia, David Lapsley, Janet Leblond,</p>
    <p>Carl Livadas, Alberto Medina, Joanne Mikkelson, Craig Partridge,</p>
    <p>Vivek Raghunathan, Ram Ramanathan, Paul Rubel, Cesar</p>
    <p>Santivanez, Dan Sumorok, Bob Vincent, David Wiggins</p>
    <p>Eric Blossom (GNU Radio consultant)</p>
    <p>University of Kansas:</p>
    <p>Gary Minden, Joe Evans</p>
    <p>MIT: Robert Morris, Hari Balakrishnan</p>
    <p>UCLA: Mani Srivastava</p>
  </div>
</Presentation>
