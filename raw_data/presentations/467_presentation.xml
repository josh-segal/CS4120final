<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FAST:</p>
    <p>Quick Application Launch on</p>
    <p>Solid-State Drives</p>
    <p>Yongsoo Joo1, Junhee Ryu2, Sangsoo Park1, and Kang G. Shin1,3</p>
  </div>
  <div class="page">
    <p>Application Launch Delay</p>
    <p>! Elapsed time between two events ! A user clicks the icon</p>
    <p>! The application becomes responsible</p>
    <p>! Important for interactive applications ! Critically affects user satisfaction</p>
  </div>
  <div class="page">
    <p>Application Launch Performance</p>
    <p>! Moores law not applicable ! Faster CPU and larger main memory not helpful</p>
    <p>! HDD seek and rotational latencies do not improve well</p>
    <p>(MIPS) (Gbit/s)</p>
    <p>(a) CPU performance (b) Peak bandwidth of DRAMs</p>
    <p>Average seek time!</p>
    <p>Average rotational latency!</p>
    <p>(Mbit/s) (ms)</p>
    <p>(c) Peak bandwidth of HDDs (d) Disk access latencyCPU performance DRAM throughput HDD throughput HDD access latency</p>
    <p>Exponential improvement Linear improvement</p>
    <p>seek</p>
    <p>rotational</p>
  </div>
  <div class="page">
    <p>Application Launch Performance</p>
    <p>! Application launch breakdown</p>
    <p>!&quot;#$&quot;%&amp;'(</p>
    <p>)'$*%</p>
    <p>+,'-.$/'0</p>
    <p>&gt;'%6.$?$/'0@ -?$*0A#</p>
    <p>D?$?@$2?0E3*2@ $/%*</p>
  </div>
  <div class="page">
    <p>! Many SW-level schemes deployed in OSes ! Application defragment, Superfetch, readahead, BootCache, etc.</p>
    <p>! Sorted prefetch (ex: Windows prefetch) ! Obtain the set of accessed blocks for each application</p>
    <p>! Monitor I/O requests during an application launch</p>
    <p>! Pause the target application upon detection of its launch</p>
    <p>! Prefetch the predetermined set of blocks in their LBA order</p>
    <p>! Reduce the total seek distance of the disk head</p>
    <p>! Resume the launch after the prefetch completes</p>
    <p>SW-Level Optimization</p>
  </div>
  <div class="page">
    <p>! How sorted prefetch works</p>
    <p>SW-Level Optimization</p>
    <p>Improvement (typ: 40%)</p>
    <p>Time</p>
    <p>Time</p>
    <p>H D</p>
    <p>D t</p>
    <p>ra c k</p>
    <p>p o</p>
    <p>s it io</p>
    <p>n H</p>
    <p>D D</p>
    <p>t ra</p>
    <p>c k</p>
    <p>p o</p>
    <p>s it io</p>
    <p>n</p>
    <p>Launch</p>
    <p>start Launch</p>
    <p>completion</p>
    <p>Launch</p>
    <p>detection</p>
    <p>Launch</p>
    <p>resumption</p>
    <p>Launch</p>
    <p>completion</p>
    <p>Prefetcher</p>
    <p>execution</p>
    <p>&lt;Without sorted prefetch&gt;</p>
    <p>&lt;With sorted prefetch&gt;</p>
    <p>CPU</p>
    <p>computation</p>
    <p>(x-axis not in scale)</p>
  </div>
  <div class="page">
    <p>Flash-based SSD</p>
    <p>! The single most effective way to eliminate</p>
    <p>disk head positioning delay ! Acrobat reader: 4.0s -&gt; 0.8s (84% reduction)</p>
    <p>! Matlab: 16.0s -&gt; 5.1s (68% reduction)</p>
    <p>! Characteristics ! Consist of multiple NAND flash chips</p>
    <p>! No mechanical moving part</p>
    <p>! Uniform access latency (a few 100 microseconds)</p>
    <p>! Prices now affordable ! 80 GB MLC SSD: less than 200$ now</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>! Question: Are we satisfied with the app launch on SSD? ! Yes for lightweight applications (e.g., less than 1 sec)</p>
    <p>! No for heavy applications (e.g., more than 5 sec)</p>
    <p>! Far from ultimate user satisfaction</p>
    <p>! Faster application launch is always good (at least, not bad)</p>
    <p>! Needs increase for launch optimization on SSDs ! Applications are getting HEAVIER</p>
    <p>! More blocks to be read</p>
    <p>! SSD random read performance improves slowly</p>
    <p>! Bounded by the single chip performance</p>
  </div>
  <div class="page">
    <p>HDD-Aware Optimizers on SSD</p>
    <p>! Question: Will traditional HDD optimizers work for SSDs? ! Consensus: they will not be effective on SSDs</p>
    <p>! Rationale: they mostly optimize disk head movement</p>
    <p>! No disk head in SSDs</p>
    <p>! Often recommended not to use on SSDs</p>
    <p>! Microsoft Windows 7 ! HDD-aware optimizers disabled upon detection of SSD</p>
    <p>! Windows prefetch, Application defragmentation, Superfetch,</p>
    <p>Readyboost, etc.</p>
  </div>
  <div class="page">
    <p>! No benefit from LBA sorting ! Uniform seek latency of SSD</p>
    <p>! Launch performance still improves ! Increased effective queue depth (0.3-&gt;3.4, app: Eclipse)</p>
    <p>! Observed 7% launch time reduction: better than nothing!</p>
    <p>Sorted Prefetch on SSDs</p>
    <p>(a) Cold start (no prefetcher)</p>
    <p>(b) Baseline prefetcher (c) Baseline prefetcher (zoomed in)</p>
    <p>(d) Two-phase prefetcher (e) Two-phase prefetcher (zoomed in)</p>
    <p>Average QD: 0.3</p>
    <p>Average QD: 3.4</p>
    <p>Average QD: 30.6</p>
    <p>(sec)</p>
    <p>Q u e u e d</p>
    <p>e p th</p>
    <p>(a) Cold start (no prefetcher)</p>
    <p>(b) Baseline prefetcher (c) Baseline prefetcher (zoomed in)</p>
    <p>(d) Two-phase prefetcher (e) Two-phase prefetcher (zoomed in)</p>
    <p>Average QD: 0.3</p>
    <p>Average QD: 3.4</p>
    <p>Average QD: 30.6 (a) Cold start (no prefetcher)</p>
    <p>(b) Baseline prefetcher (c) Baseline prefetcher (zoomed in)</p>
    <p>(d) Two-phase prefetcher (e) Two-phase prefetcher (zoomed in)</p>
    <p>Average QD: 0.3</p>
    <p>Average QD: 3.4</p>
    <p>Average QD: 30.6</p>
    <p>(sec)</p>
    <p>(sec)</p>
    <p>Q u e u e d</p>
    <p>e p th</p>
    <p>Q u e u e d</p>
    <p>e p th</p>
    <p>Queue depth: 0.3</p>
    <p>Queue depth: 3.4</p>
  </div>
  <div class="page">
    <p>FAST: Fast Application STarter</p>
    <p>! Overlap CPU computation with SSD accesses</p>
    <p>s1 s2 s3 s4</p>
    <p>c1 c2 c3 c4</p>
    <p>s1 s2 s3 s4c1 c2 c3 c4</p>
    <p>Application</p>
    <p>Prefetcher</p>
    <p>Application</p>
    <p>Time</p>
    <p>Time</p>
    <p>Time</p>
    <p>(a) Cold start scenario</p>
    <p>(c) Proposed prefetching ( )</p>
    <p>c1 c2 c3 c4Application Time</p>
    <p>(b) Warm start scenario</p>
    <p>tcpu &gt; tssd</p>
    <p>tlaunch</p>
    <p>tlaunch</p>
    <p>tlaunch</p>
  </div>
  <div class="page">
    <p>Application Launch Sequence</p>
    <p>! Deterministic block requests over repeated launches</p>
    <p>! Raw block request traces</p>
    <p>! Application launch sequence</p>
    <p>b1 b2 b3 b4 b5</p>
    <p>b4 b5</p>
    <p>...</p>
    <p>b3 b4 b5</p>
    <p>b1 b2 b3</p>
    <p>b1 b2</p>
    <p>b1 b2 b3 b4 b5</p>
    <p>Unrelated to application launch Block requests irrelevant to the application launch</p>
  </div>
  <div class="page">
    <p>What to Do</p>
    <p>! Application launch sequence profiling ! Using blktrace tool</p>
    <p>! Prefetcher generation ! Replay block requests according to the application launch</p>
    <p>sequence</p>
    <p>! Prefetcher execution ! Simultaneously with the original application</p>
    <p>! By wrapping the system call exec()</p>
    <p>! LD_PRELOAD</p>
  </div>
  <div class="page">
    <p>Prefetcher Generation</p>
    <p>! Example application launch sequence ! AB-&gt;C-&gt;D</p>
    <p>! Block-level I/O: (start LBA, size) ! (5, 2)-&gt;(1, 1)-&gt;(7, 1) &lt;- obtainable from blktrace</p>
    <p>! File-level I/O: (filename, offset, size) ! (b.so, 2, 2)-&gt;(a.conf, 1, 1)-&gt;(c.lib, 0, 1)</p>
    <p>C A B D</p>
    <p>&quot;/dev/sda&quot;</p>
    <p>LBA</p>
    <p>File offset</p>
    <p>&quot;a.conf&quot; &quot;b.so&quot; &quot;c.lib&quot;</p>
    <p>Accessed block</p>
  </div>
  <div class="page">
    <p>Prefetcher Generation</p>
    <p>! Example application launch sequence ! AB-&gt;C-&gt;D</p>
    <p>! Block-level I/O: (start LBA, size) ! (5, 2)-&gt;(1, 1)-&gt;(7, 1) &lt;- obtainable from blktrace</p>
    <p>! File-level I/O: (filename, offset, size) ! (b.so, 2, 2)-&gt;(a.conf, 1, 1)-&gt;(c.lib, 0, 1)</p>
    <p>C A B D</p>
    <p>&quot;/dev/sda&quot;</p>
    <p>LBA</p>
    <p>File offset</p>
    <p>&quot;a.conf&quot; &quot;b.so&quot; &quot;c.lib&quot;</p>
    <p>Accessed block</p>
  </div>
  <div class="page">
    <p>Prefetcher Generation</p>
    <p>! Block-level I/O replay</p>
    <p>int main(void) { ! fd = open(&quot;/dev/sda&quot;,O_RDONLY|O_LARGEFILE); ! posix_fadvise(fd,5*512,2*512,POSIX_FADV_WILLNEED); ! posix_fadvise(fd,1*512,1*512,POSIX_FADV_WILLNEED); ! posix_fadvise(fd,7*512,1*512,POSIX_FADV_WILLNEED); ! return 0; }</p>
    <p>LBA size</p>
    <p>C A B D</p>
    <p>&quot;/dev/sda&quot;</p>
    <p>LBA</p>
    <p>File offset</p>
    <p>&quot;a.conf&quot; &quot;b.so&quot; &quot;c.lib&quot;</p>
    <p>Accessed block</p>
  </div>
  <div class="page">
    <p>Page Cache Structure</p>
    <p>/dev/sda</p>
    <p>A B</p>
    <p>C D</p>
    <p>inode</p>
    <p>cached blocks</p>
    <p>a.conf b.so c.lib</p>
    <p>Page cache</p>
  </div>
  <div class="page">
    <p>Page Cache Structure</p>
    <p>/dev/sda</p>
    <p>A B</p>
    <p>C D</p>
    <p>inode</p>
    <p>cached blocks</p>
    <p>a.conf b.so c.lib</p>
    <p>Page cache</p>
    <p>Miss! Miss! Miss!</p>
  </div>
  <div class="page">
    <p>Page Cache Structure</p>
    <p>/dev/sda</p>
    <p>A B</p>
    <p>C D</p>
    <p>inode</p>
    <p>cached blocks</p>
    <p>a.conf b.so c.lib</p>
    <p>C A B D</p>
    <p>Page cache</p>
    <p>What we need to construct</p>
  </div>
  <div class="page">
    <p>Prefetcher Generation</p>
    <p>! File-level I/O replay</p>
    <p>int main(void) { ! fd1 = open(&quot;b.so&quot;, O_RDONLY); ! posix_fadvise(fd1,2*512,2*512,POSIX_FADV_WILLNEED); ! fd2 = open(&quot;a.conf&quot;,O_RDONLY); ! posix_fadvise(fd2,1*512,1*512,POSIX_FADV_WILLNEED); ! fd3 = open(&quot;c.lib&quot;, O_RDONLY); ! posix_fadvise(fd3,0*512,1*512,POSIX_FADV_WILLNEED); ! return 0; } file offset size</p>
    <p>C A B D</p>
    <p>&quot;/dev/sda&quot;</p>
    <p>LBA</p>
    <p>File offset</p>
    <p>&quot;a.conf&quot; &quot;b.so&quot; &quot;c.lib&quot;</p>
    <p>Accessed block</p>
    <p>file name</p>
  </div>
  <div class="page">
    <p>Block-to-File Level I/O Conversion</p>
    <p>C A B D</p>
    <p>&quot;/dev/sda&quot;</p>
    <p>LBA</p>
    <p>File offset</p>
    <p>&quot;a.conf&quot; &quot;b.so&quot; &quot;c.lib&quot;</p>
    <p>Accessed block</p>
    <p>(5,2) (1,1) (7,1)</p>
    <p>(b.so, 2,2) (a.conf,1,1) (c.lib, 0,1)</p>
    <p>! LBA-to-inode mapping ! Not supported by EXT file system</p>
  </div>
  <div class="page">
    <p>Block-to-File Level I/O Conversion</p>
    <p>! Inode-to-LBA map for a single file ! Easy to build</p>
    <p>! LBA-to-inode map for the entire file system ! Millions of files in a file system</p>
    <p>! Frequently changed</p>
    <p>! Only a few 100s of files used by a single application</p>
    <p>! Our approach: build a partial map for each application ! Determine the set of files used for the launch</p>
    <p>! Monitoring system calls using filename as their argument</p>
  </div>
  <div class="page">
    <p>Application Prefetcher</p>
    <p>! Automatically generated application prefetcher for Gimp</p>
    <p>int main(void) {</p>
    <p>...</p>
    <p>readlink(&quot;/etc/fonts/conf.d/90-ttf-arphic-uming-embolden.conf&quot;, linkbuf, 256);</p>
    <p>int fd423;</p>
    <p>fd423 = open(&quot;/etc/fonts/conf.d/90-ttf-arphic-uming-embolden.conf&quot;, O_RDONLY);</p>
    <p>posix_fadvise(fd423, 0, 4096, POSIX_FADV_WILLNEED);</p>
    <p>posix_fadvise(fd351, 286720, 114688, POSIX_FADV_WILLNEED);</p>
    <p>int fd424;</p>
    <p>fd424 = open(&quot;/usr/share/fontconfig/conf.avail/90-ttf-arphic-uming-embolden.conf&quot;,</p>
    <p>O_RDONLY);</p>
    <p>posix_fadvise(fd424, 0, 4096, POSIX_FADV_WILLNEED);</p>
    <p>int fd425;</p>
    <p>fd425 = open(&quot;/root/.gnupg/trustdb.gpg&quot;, O_RDONLY);</p>
    <p>posix_fadvise(fd425, 0, 4096, POSIX_FADV_WILLNEED);</p>
    <p>dirp = opendir(&quot;/var/cache/&quot;);</p>
    <p>if(dirp)while(readdir(dirp));</p>
    <p>...</p>
    <p>return 0;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>CPU and SSD Usage</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>Eclipse</p>
    <p>Firefox</p>
    <p>(sec)</p>
    <p>(sec)</p>
    <p>tcoldtwarm tFAST tsorted</p>
    <p>tcoldtwarm tFAST tsorted</p>
    <p>Cold</p>
    <p>start</p>
    <p>Warm</p>
    <p>start</p>
    <p>FAST</p>
    <p>Sorted</p>
    <p>prefetch</p>
    <p>Cold</p>
    <p>start</p>
    <p>Warm</p>
    <p>start</p>
    <p>FAST</p>
    <p>Sorted</p>
    <p>prefetch</p>
    <p>Low CPU usage</p>
    <p>(a) (b)</p>
    <p>(c)</p>
    <p>Reduction: 24%</p>
  </div>
  <div class="page">
    <p>CPU and SSD Usage</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>Eclipse</p>
    <p>Firefox</p>
    <p>(sec)</p>
    <p>(sec)</p>
    <p>tcoldtwarm tFAST tsorted</p>
    <p>tcoldtwarm tFAST tsorted</p>
    <p>Cold</p>
    <p>start</p>
    <p>Warm</p>
    <p>start</p>
    <p>FAST</p>
    <p>Sorted</p>
    <p>prefetch</p>
    <p>Cold</p>
    <p>start</p>
    <p>Warm</p>
    <p>start</p>
    <p>FAST</p>
    <p>Sorted</p>
    <p>prefetch</p>
    <p>Low CPU usage</p>
    <p>(a) (b)</p>
    <p>(c)</p>
    <p>Reduction: 24%</p>
    <p>Reduction: 37%</p>
  </div>
  <div class="page">
    <p>CPU and SSD Usage</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>SSD</p>
    <p>CPU</p>
    <p>Eclipse</p>
    <p>Firefox</p>
    <p>(sec)</p>
    <p>(sec)</p>
    <p>tcoldtwarm tFAST tsorted</p>
    <p>tcoldtwarm tFAST tsorted</p>
    <p>Cold</p>
    <p>start</p>
    <p>Warm</p>
    <p>start</p>
    <p>FAST</p>
    <p>Sorted</p>
    <p>prefetch</p>
    <p>Cold</p>
    <p>start</p>
    <p>Warm</p>
    <p>start</p>
    <p>FAST</p>
    <p>Sorted</p>
    <p>prefetch</p>
    <p>Low CPU usage</p>
    <p>(a) (b)</p>
    <p>(c)</p>
    <p>Reduction: 24%</p>
    <p>Reduction: 37%</p>
  </div>
  <div class="page">
    <p>Measured Application Launch Time</p>
    <p>! Launch time reduction ! Warm start: 37% (upper bound)</p>
    <p>! Proposed: 28% (min: 16%, max: 46%)</p>
    <p>! Sorted prefetch: 7% (min: -5%, max: 21%)</p>
    <p>(Normalized to the cold start time.)</p>
    <p>! &quot; &quot; # $ $</p>
    <p>! &quot; %&amp; ' ( )* %# ( + # %</p>
    <p>, # $ -. / # %0 1 )2</p>
    <p>: -; 5</p>
    <p>: / &amp; ; #</p>
    <p>&lt; &amp; = + -/</p>
    <p>&gt; + # ? + # $ -. / # %</p>
    <p>&gt; + # ? # 4&amp; 5</p>
    <p>&gt; &amp; / @ = # %&amp; %</p>
    <p>A ( ' ? -# B</p>
    <p>C ( )4 ( '</p>
    <p>D 5 # / D 99 -&quot; #</p>
    <p>E &amp; B # %5 &amp; -/ )</p>
    <p>H I = / + # %' -% +</p>
    <p>J -$ -&amp;</p>
    <p>K &amp; %+</p>
    <p>L -4 -/ 6 M8 3</p>
    <p>! ? # %( . #</p>
    <p>NONP</p>
    <p>QNONP</p>
    <p>RNONP</p>
    <p>SNONP</p>
    <p>TNNONP</p>
    <p>TQNONP</p>
    <p>UDA,</p>
    <p>K!VC</p>
    <p>EV37</p>
    <p>WDXY,</p>
    <p>tcold tsorted tFAST twarm tssd tbound</p>
  </div>
  <div class="page">
    <p>Measured Application Launch Time</p>
    <p>! Launch time reduction ! Warm start: 37% (upper bound)</p>
    <p>! Proposed: 28% (min: 16%, max: 46%)</p>
    <p>! Sorted prefetch: 7% (min: -5%, max: 21%)</p>
    <p>!&quot;#$%&amp;#</p>
    <p>'(</p>
    <p>)'(</p>
    <p>*'(</p>
    <p>+'(</p>
    <p>,'(</p>
    <p>-''(</p>
    <p>-)'(</p>
    <p>./01</p>
  </div>
  <div class="page">
    <p>Applicability on Smartphones</p>
    <p>! Similarity to PCs with a SSD ! Running various applications</p>
    <p>! Application launch performance does matter</p>
    <p>! NAND Flash-based storage ! The same performance characteristic as SSDs</p>
    <p>! Slightly modified OSes and file systems designed for PCs ! Easy to port</p>
  </div>
  <div class="page">
    <p>Applicability on Smartphones</p>
    <p>! Further benefits ! More frequent launches of applications</p>
    <p>! Limited main memory capacity</p>
    <p>! Cold start scenario occurs more often</p>
    <p>! Slower CPU and flash storage speed</p>
    <p>! Relatively longer application launch time</p>
  </div>
  <div class="page">
    <p>Applicability on Smartphones</p>
    <p>! Measured cold &amp; warm start time on iPhone 4 ! Average cold start time: 6.1 seconds</p>
    <p>! Warm start time: 63% of cold start time</p>
    <p>! &quot; &quot; #</p>
    <p>! &quot; &quot; $</p>
    <p>! &quot; &quot; %</p>
    <p>! &quot; &quot; &amp;</p>
    <p>! &quot; &quot; '</p>
    <p>! &quot; &quot; (</p>
    <p>! &quot; &quot; )</p>
    <p>! &quot; &quot; *</p>
    <p>! &quot; &quot; +</p>
    <p>! &quot; &quot; # ,</p>
    <p>! &quot; &quot; # #</p>
    <p>! &quot; &quot; # $</p>
    <p>! &quot; &quot; # %</p>
    <p>! &quot; &quot; # &amp;</p>
    <p>! . /0 1 .</p>
    <p>,</p>
    <p>'</p>
    <p>#,</p>
    <p>#' 23456780/8</p>
    <p>L a</p>
    <p>u n</p>
    <p>c h</p>
    <p>t im</p>
    <p>e (</p>
    <p>s e</p>
    <p>c )</p>
  </div>
  <div class="page">
    <p>Conclusion &amp; Future Work</p>
    <p>! Introduced an application prefetcher designed for SSDs</p>
    <p>! Our ultimate goal ! Warm start performance in the cold start scenario</p>
    <p>! Further improving FAST by exploiting the SSD parallelism ! See our poster!</p>
    <p>(a) Cold start (no prefetcher)</p>
    <p>(b) Baseline prefetcher (c) Baseline prefetcher (zoomed in)</p>
    <p>(d) Two-phase prefetcher (e) Two-phase prefetcher (zoomed in)</p>
    <p>Average QD: 0.3</p>
    <p>Average QD: 3.4</p>
    <p>Average QD: 30.6</p>
    <p>m1 d1 d2 d3 m4 d4 d5 c1 c2 c3 c4</p>
    <p>m4 d4 d5 m1</p>
    <p>d2 d1 d3</p>
    <p>c1 c2 c3 c4 c5</p>
    <p>c5</p>
    <p>m4 d4 d5 d2</p>
    <p>m1</p>
    <p>d1 d3</p>
    <p>c1 c2 c3 c4 c5</p>
    <p>(a) No prefetcher</p>
    <p>(b) Baseline prefetcher</p>
    <p>(c) Two-phase prefetcher</p>
    <p>Prefetcher</p>
    <p>execution</p>
    <p>Launch completion</p>
    <p>Q D</p>
    <p>CPU SSD</p>
    <p>CPU SSD</p>
    <p>CPU SSD</p>
    <p>Time</p>
    <p>Time</p>
    <p>Time</p>
    <p>Prefetcher</p>
    <p>execution</p>
    <p>First</p>
    <p>phase Second</p>
    <p>phase</p>
    <p>Q D</p>
    <p>Q D</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Applicability on HDDs</p>
    <p>! FAST works as well on HDDs, but ... ! Application launch on HDDs: I/O bound</p>
    <p>! Little room for overlapping CPU time and HDD access time</p>
    <p>! Launch time reduction: 15%</p>
    <p>! Sorted prefetch performs better ! Launch time reduction: 40%</p>
    <p>!&quot;#$ %&amp;'( '&quot;)*+$ ,-).</p>
    <p>/0</p>
    <p>Normalized application launch time on HDD</p>
  </div>
  <div class="page">
    <p>Determinism on Multi-Core</p>
    <p>! We observed determinism even on multi-core CPUs ! Only one core is active during the most time periods</p>
    <p>! SSD is mostly idle when two or more cores are active</p>
    <p>SSD CPU core 1</p>
    <p>CPU core 2</p>
    <p>CPU core 3</p>
    <p>CPU core 4</p>
    <p>CPU core 5</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core 3</p>
    <p>Core 4</p>
    <p>Core 5</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core 3</p>
    <p>Core 4</p>
    <p>Core 5</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core 3</p>
    <p>Core 4</p>
    <p>Core 5</p>
    <p>SSD</p>
  </div>
  <div class="page">
    <p>Why not Capturing File I/O?</p>
    <p>! Why not simply capture all the file-level I/Os and replay them? ! Ex) Capture all read() calls using strace</p>
    <p>! Thats possible, but the problem is... ! The number of read() calls are extremely large</p>
    <p>! Only few of them will cause page fault, generating a block I/O</p>
    <p>! Replaying all the captured read() calls are inefficient</p>
    <p>! In terms of both prefetcher size and function call overhead</p>
    <p>! Not easy to determine which of them will actually cause page faults</p>
    <p>! May be more complicated than our approach (block-level to file-level</p>
    <p>I/O conversion)</p>
  </div>
</Presentation>
