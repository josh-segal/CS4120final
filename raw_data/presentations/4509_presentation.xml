<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>(C) 2002 Milo Martin HPCA, Feb. 2002</p>
    <p>Bandwidth Adaptive Snooping</p>
    <p>Milo M.K. Martin, Daniel J. Sorin</p>
    <p>Mark D. Hill, and David A. Wood</p>
    <p>Wisconsin Multifacet Project</p>
    <p>Computer Sciences Department</p>
    <p>University of WisconsinMadison</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 2</p>
    <p>Two classes of multiprocessors</p>
    <p>Snooping (SMP) multiprocessors  Broadcast-based  use more interconnect bandwidth + Directly locate owner  low latency cache-to-cache transfers</p>
    <p>(36% - 91% of misses are cache-to-cache transfers in our commercial workloads)</p>
    <p>Directory-based multiprocessors + Indirection  bandwidth-efficient &amp; scalable</p>
    <p>Indirection  higher latency cache-to-cache transfers</p>
    <p>Problem: higher performing approach varies with:  Configuration (e.g., number of processors)</p>
    <p>Workload (e.g., cache miss rate)</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 3</p>
    <p>Which approach is best?</p>
    <p>Micro-benchmark</p>
    <p>64 processors</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 4</p>
    <p>Bandwidth Adaptive Snooping Hybrid (BASH)</p>
    <p>Goals  Best performance aspects of both approaches</p>
    <p>High performance for many configurations &amp; workloads  Future workload properties unknown at design time</p>
    <p>Single design  Coherence logic integrated with processors  One part for many systems</p>
    <p>Hybrid protocol  Snooping-like broadcast requests  Directory-like unicast requests</p>
    <p>Bandwidth adaptive  Estimate available bandwidth  Adjust rate of broadcast based on estimate</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 5</p>
    <p>Best of both protocols</p>
    <p>Micro-benchmark</p>
    <p>64 processors</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 6</p>
    <p>Outline</p>
    <p>Overview</p>
    <p>Bandwidth adaptive mechanism</p>
    <p>Hybrid protocol</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 7</p>
    <p>Ordered Interconnect</p>
    <p>$</p>
    <p>P M $</p>
    <p>P M $</p>
    <p>P M $</p>
    <p>P M</p>
    <p>System model</p>
    <p>Ordered interconnect</p>
    <p>Processor/Memory nodes  Directory state</p>
    <p>Adaptive mechanism</p>
    <p>Bandwidth Adaptive Mechanism</p>
    <p>Network Interface</p>
    <p>Caches</p>
    <p>Processor</p>
    <p>Memory</p>
    <p>D ire</p>
    <p>c to</p>
    <p>ry</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 8</p>
    <p>Bandwidth adaptive mechanism</p>
    <p>Choose broadcast or unicast for each miss</p>
    <p>Goal: minimize latency - avoid extreme queuing delay</p>
    <p>Approach: limit average interconnect utilization  Contention dominates miss latency at high utilizations</p>
    <p>Interconnect utilization goal (e.g., 75%)</p>
    <p>Adjust rate of broadcast</p>
    <p>Feedback control system</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 9</p>
    <p>Implementation</p>
    <p>Two counters at each processor  Utilization counter (Above or below utilization threshold?)  Policy counter (Probability of broadcast?)</p>
    <p>At each processor  Each cycle: Monitor local link &amp; adjust utilization counter</p>
    <p>Each sampling interval: Adjust policy counter based on utilization counter</p>
    <p>Each miss: Compare policy counter with a random number</p>
    <p>Why random?  Steady state of mixed broadcasts and unicasts</p>
    <p>Enables us to avoid oscillation</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 10</p>
    <p>Outline</p>
    <p>Overview</p>
    <p>Bandwidth adaptive mechanism</p>
    <p>Hybrid protocol  Snooping-like operation</p>
    <p>Directory-like operation</p>
    <p>Complexity &amp; Scalability</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 11</p>
    <p>Ordered broadcast</p>
    <p>Marker places request in total order</p>
    <p>marker</p>
    <p>request</p>
    <p>Snooping-like operation</p>
    <p>P2</p>
    <p>Owner</p>
    <p>P1</p>
    <p>Shared</p>
    <p>P3</p>
    <p>Invalid</p>
    <p>P0</p>
    <p>Requestor</p>
    <p>M0 Home</p>
    <p>Data</p>
    <p>Low latency cache-to-cache, but requires broadcast</p>
    <p>Owner: P1</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 12</p>
    <p>marker request</p>
    <p>Add indirection Uses order to avoid acks Similar to Alpha GS320</p>
    <p>marker</p>
    <p>re-request</p>
    <p>Directory-like operation</p>
    <p>P2</p>
    <p>Owner</p>
    <p>P1</p>
    <p>Shared</p>
    <p>P3</p>
    <p>Invalid</p>
    <p>P0</p>
    <p>Requestor</p>
    <p>M0 Home</p>
    <p>Data</p>
    <p>Avoids broadcast, but frequently adds indirection</p>
    <p>Owner: P1, Sharers: {P2}</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 13</p>
    <p>Protocol races</p>
    <p>Choose broadcast or unicast for each miss</p>
    <p>Protocol simultaneously allows  Broadcast requests</p>
    <p>Unicast requests</p>
    <p>Forwarded requests</p>
    <p>Writebacks</p>
    <p>Like all protocols, BASH has protocol races</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 14</p>
    <p>Protocol race example</p>
    <p>P2</p>
    <p>Owner</p>
    <p>P1</p>
    <p>Shared</p>
    <p>P3</p>
    <p>Requestor</p>
    <p>P0</p>
    <p>Requestor</p>
    <p>M0 Home</p>
    <p>Owner: P1, Sharers: {P2}</p>
    <p>Broadcast</p>
    <p>Unicast</p>
    <p>re-request</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 15</p>
    <p>Protocol race example</p>
    <p>P2</p>
    <p>Invalid</p>
    <p>P1</p>
    <p>Invalid</p>
    <p>P3</p>
    <p>Modified</p>
    <p>P0</p>
    <p>Requestor</p>
    <p>M0 Home</p>
    <p>Owner: P3, Sharers:</p>
    <p>Unicast</p>
    <p>re-request</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 16</p>
    <p>Protocol race example</p>
    <p>P2</p>
    <p>Invalid</p>
    <p>P1</p>
    <p>Invalid</p>
    <p>P3</p>
    <p>Modified</p>
    <p>P0</p>
    <p>Requestor</p>
    <p>M0 Home</p>
    <p>Owner: P3, Sharers:</p>
    <p>Unicast</p>
    <p>re-request</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 17</p>
    <p>Protocol races</p>
    <p>Race detection: directory audits all requests  Observes all requests  Compares request destination set with current sharers</p>
    <p>Occasionally needs to re-issue a request</p>
    <p>Requests are processed uniformly  Processors - respond with data or invalidate</p>
    <p>Directory - audit request, may forward data or request</p>
    <p>See paper for more information</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 18</p>
    <p>Complexity</p>
    <p>One cost of implementing BASH</p>
    <p>Quantifying complexity is difficult  Protocol controllers are finite state machines</p>
    <p>Similar number of states</p>
    <p>BASH has twice as many events and transitions</p>
    <p>Moderate complexity  Additive, not multiplicative</p>
    <p>Similar to Multicast Snooping  Original proposal [Bilir et al., ISCA 1999]</p>
    <p>Enhanced, specified &amp; verified [Sorin et al., TPDS 2002]</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 19</p>
    <p>Scalability</p>
    <p>Limited by ordered interconnect  BASH eliminates broadcast-only nature of snooping</p>
    <p>Recent systems with an ordered interconnect  Compaq AlphaServer GS320 (32 processor) - directory  Sun UE15000 (106 processors) - snooping  Fujitsu PrimePower 2000 (128 processors) - snooping</p>
    <p>Potential alternative  Timestamp Snooping network [Martin et al., ASPLOS 2000]</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 20</p>
    <p>Outline</p>
    <p>Overview</p>
    <p>Bandwidth adaptive mechanism</p>
    <p>Hybrid protocol</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 21</p>
    <p>Workloads &amp; methods</p>
    <p>Workloads [CAECW 02]  OLTP: IBMs DB2 &amp; TPCC-like (1GB database)  Static web: Apache</p>
    <p>Dynamic web: SlashCode</p>
    <p>Java middleware: SpecJBB</p>
    <p>Scientific workload: Barnes-Hut</p>
    <p>Setup and tuned for 16 processors</p>
    <p>Full system simulation  Virtutechs Simics</p>
    <p>Solaris 8 on SPARC V9</p>
    <p>Blocking processor model</p>
    <p>Memory system simulator  Captures timing, races, and all transient states</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 22</p>
    <p>Three Questions</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 23</p>
    <p>(1) SpecJBB on 16 processors</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 24</p>
    <p>(1) SpecJBB on 16 processors, 4x broadcast cost</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 25</p>
    <p>(1) SpecJBB on 16 processors, 4x broadcast cost</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 26</p>
    <p>(2) Can BASH adapt to multiple workloads? 1600 MB/s links</p>
    <p>Similar Snooping Directory</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 27</p>
    <p>(2) Can BASH adapt to multiple workloads? 1600 MB/s links</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 28</p>
    <p>(3) Can BASH adapt to multiple configurations?</p>
    <p>Micro-benchmark</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 29</p>
    <p>(3) Can BASH adapt to multiple configurations?</p>
    <p>Micro-benchmark</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 30</p>
    <p>Results Summary</p>
    <p>Yes 2) Does BASH adapt to multiple workloads?</p>
    <p>Yes 3) Does BASH adapt to multiple configurations?</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 31</p>
    <p>Conclusions</p>
    <p>Bandwidth Adaptive Snooping Hybrid (BASH)  Hybrid of snooping and directories  Simple bandwidth adaptive mechanism</p>
    <p>Adapts to various workloads &amp; system configurations  Robust performance</p>
    <p>Outperforms base protocols in some cases</p>
    <p>Future directions  Focus bandwidth on likely cache-to-cache transfers</p>
    <p>Explore multicasts  Power-adaptive coherence</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 32</p>
  </div>
  <div class="page">
    <p>BASH  Milo Martin slide 33</p>
    <p>Queuing model motivation</p>
    <p>Knee</p>
    <p>A multiprocessor as a simple queuing model  Exponential service &amp; think time distributions</p>
    <p>interconnect</p>
    <p>processors</p>
    <p>requests responses</p>
  </div>
</Presentation>
