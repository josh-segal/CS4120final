<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Data Integration with Dependent Sources</p>
    <p>Anish Das Sarma, Xin (Luna) Dong, Alon Halevy Yahoo! Research, AT&amp;T Labs-Research, Google Inc.</p>
  </div>
  <div class="page">
    <p>Query Answering in Data Integration</p>
    <p>D1</p>
    <p>D2</p>
    <p>D3 D4</p>
    <p>D5</p>
    <p>Mediated Schema</p>
    <p>Q: France capital</p>
    <p>Q1 Q2</p>
    <p>Q3 Q4</p>
    <p>Q5 A1</p>
    <p>A2 A3 A4 A5</p>
    <p>A = Ui Ai Ais may have conflicts:</p>
    <p>D1,D2,D3: Paris D4,D5: Inria</p>
    <p>Best guess, based on 7 websites</p>
    <p>Best guess, based on 7 websites</p>
    <p>Count number of sources</p>
    <p>Assuming independence in</p>
    <p>counting! Sources can copy from each other</p>
    <p>Consider number of independent sources</p>
    <p>for each answer</p>
  </div>
  <div class="page">
    <p>Web data consists of an ecosystem of dependent sources</p>
    <p>Information extracted from AbeBooks.com  Data from 877 bookstores  465 pairs of sources involved copying  314 copiers, 202 copy from a single source  Some copy all tuples, some copy a fraction</p>
    <p>Motivation [Solomon project, Luna Dong et. al.]</p>
  </div>
  <div class="page">
    <p>Build a system, IDS, for Integrating Dependent Sources</p>
    <p>This paper:  Proposed a system for query answering with</p>
    <p>dependent sources  Address theoretical challenges in building such a</p>
    <p>system  Note: detecting dependencies is part of other</p>
    <p>work [Solomon]</p>
    <p>Goal</p>
  </div>
  <div class="page">
    <p>Source Selection</p>
    <p>Source Ordering</p>
    <p>Query Answering</p>
    <p>Co ve</p>
    <p>ra ge</p>
    <p>Co m</p>
    <p>pu ta</p>
    <p>ti on</p>
    <p>Co nf</p>
    <p>gu ra</p>
    <p>ti on</p>
    <p>Q D</p>
    <p>at a</p>
    <p>So ur</p>
    <p>ce s</p>
    <p>Co st</p>
    <p>Co</p>
    <p>m pu</p>
    <p>ta ti</p>
    <p>on</p>
    <p>Answer 2/5/19 5</p>
  </div>
  <div class="page">
    <p>Source Selection</p>
    <p>Source Ordering</p>
    <p>Query Answering</p>
    <p>Co ve</p>
    <p>ra ge</p>
    <p>Co m</p>
    <p>pu ta</p>
    <p>ti on</p>
    <p>Co nf</p>
    <p>gu ra</p>
    <p>ti on</p>
    <p>Q D</p>
    <p>at a</p>
    <p>So ur</p>
    <p>ce s</p>
    <p>Co st</p>
    <p>Co</p>
    <p>m pu</p>
    <p>ta ti</p>
    <p>on</p>
    <p>Answer</p>
  </div>
  <div class="page">
    <p>Source Selection</p>
    <p>Source Ordering</p>
    <p>Query Answering</p>
    <p>Co ve</p>
    <p>ra ge</p>
    <p>Co m</p>
    <p>pu ta</p>
    <p>ti on</p>
    <p>Co nf</p>
    <p>gu ra</p>
    <p>ti on</p>
    <p>Q D</p>
    <p>at a</p>
    <p>So ur</p>
    <p>ce s</p>
    <p>Co st</p>
    <p>Co</p>
    <p>m pu</p>
    <p>ta ti</p>
    <p>on</p>
    <p>Answer</p>
  </div>
  <div class="page">
    <p>Source Selection</p>
    <p>Source Ordering</p>
    <p>Query Answering</p>
    <p>Co ve</p>
    <p>ra ge</p>
    <p>Co m</p>
    <p>pu ta</p>
    <p>ti on</p>
    <p>Co nf</p>
    <p>gu ra</p>
    <p>ti on</p>
    <p>Q D</p>
    <p>at a</p>
    <p>So ur</p>
    <p>ce s</p>
    <p>Co st</p>
    <p>Co</p>
    <p>m pu</p>
    <p>ta ti</p>
    <p>on</p>
    <p>Answer</p>
  </div>
  <div class="page">
    <p>Source Selection</p>
    <p>Source Ordering</p>
    <p>Query Answering</p>
    <p>Co ve</p>
    <p>ra ge</p>
    <p>Co m</p>
    <p>pu ta</p>
    <p>ti on</p>
    <p>Co nf</p>
    <p>gu ra</p>
    <p>ti on</p>
    <p>Q D</p>
    <p>at a</p>
    <p>So ur</p>
    <p>ce s</p>
    <p>Co st</p>
    <p>Co</p>
    <p>m pu</p>
    <p>ta ti</p>
    <p>on</p>
    <p>Answer</p>
    <p>Answers to source selection and ordering problems depend on cost model Answers to source selection and ordering problems depend on cost model</p>
  </div>
  <div class="page">
    <p>Formal problem defnitions  Dependency model  Cost model for query answering  Coverage and optimization problems</p>
    <p>Algorithms and complexity result summary  Coverage problem (CP)  Cost minimization problem (CMP)  Maximum coverage problem (MCP)  Source ordering problem (SOP)</p>
    <p>Next</p>
  </div>
  <div class="page">
    <p>Formal problem definitions  Dependency model  Cost model for query answering  Coverage and optimization problems</p>
    <p>Algorithms and complexity results summary  Coverage problem (CP)  Cost minimization problem (CMP)  Maximum coverage problem (MCP)  Source ordering problem (SOP)</p>
    <p>Next</p>
  </div>
  <div class="page">
    <p>Dependency Model: Example</p>
    <p>#tuples provided independently</p>
    <p>#tuples provided independently</p>
    <p>Edges depict copying</p>
    <p>Edges depict copying</p>
    <p>(1) Fraction-copying: S6 copies a random 0.8</p>
    <p>fraction of tuples from S2</p>
    <p>(1) Fraction-copying: S6 copies a random 0.8</p>
    <p>fraction of tuples from S2</p>
  </div>
  <div class="page">
    <p>Dependency Model: Example</p>
    <p>(2) Selectioncopying: S2 copies all tuples with A&lt;4</p>
    <p>from S1.</p>
    <p>(2) Selectioncopying: S2 copies all tuples with A&lt;4</p>
    <p>from S1.</p>
    <p>S1</p>
    <p>S2 S3 A&lt;</p>
    <p>S4</p>
    <p>(B &gt;5</p>
    <p>) ^ (A</p>
    <p>&gt;2 )</p>
    <p>true</p>
    <p>(3) Histogram-copying combines selection- and</p>
    <p>fraction-copying</p>
    <p>(3) Histogram-copying combines selection- and</p>
    <p>fraction-copying</p>
  </div>
  <div class="page">
    <p>Query Answering</p>
    <p>This talk: query to fnd all tuples (``select *)  Given set S = {S1,,Sn}, we want Q(S) = UQ(Si)</p>
    <p>Technical point:  Assume each tuple t annotated with the source S</p>
    <p>providing it; i.e., ``tuple is (t,S)  Extension of results for other queries in paper</p>
    <p>Selections, projections, joins</p>
  </div>
  <div class="page">
    <p>Given set S={S1,,Sn} of sources to query, we consider three models for cost of querying T:  Linear cost model: Cost = i |Si|</p>
    <p>Data stored locally, and scanning (I/O) cost dominates</p>
    <p>Number-of-sources cost model: Cost = |T|  When ``charged for every source (e.g., web services)</p>
    <p>Arbitrary source cost model: Cost = i ci  Each source has an arbitrary cost ci</p>
    <p>Cost Model</p>
  </div>
  <div class="page">
    <p>Formal problem defnitions  Dependency model  Cost model for query answering  Coverage and optimization problems</p>
    <p>Algorithms and complexity results summary  Coverage problem (CP)  Cost minimization problem (CMP)  Maximum coverage problem (MCP)  Source ordering problem (SOP)</p>
    <p>Next</p>
  </div>
  <div class="page">
    <p>Coverage Problem</p>
    <p>Coverage Problem: What fraction of total tuples are covered by a subset?</p>
    <p>Total #tuples = 300 S5 gets all tuples from S1, S2 S4 provides 50 new tuples Coverage = 250/300</p>
    <p>Example: What is the coverage of {S4,S5}?</p>
  </div>
  <div class="page">
    <p>Cost Minimization Problem</p>
    <p>Cost Min. Problem: Which sources to query to: (1) get all tuples, (2) minimize total cost?</p>
    <p>Linear Cost Model: {S3,S4,S5} (cost = 100 + 100 + 200 = 400)</p>
    <p>Num-sources Cost Model: {S5,S6} (cost = 2)</p>
  </div>
  <div class="page">
    <p>Maximum Coverage Problem</p>
    <p>Max. Coverage Problem: Given max. cost bound, what sources to query to: (1) get max. tuples, (2) be within cost bound?</p>
    <p>Cost Bound = 1 (num-sources model): Query S6: Get 255 tuples:</p>
    <p>- 80 from S2 - 50 each from S3 and S4 - 75 from S1 (through S3 and S4:</p>
    <p>because of independence of copying)</p>
  </div>
  <div class="page">
    <p>Source Ordering Problem Source Ordering Problem: What order to query sources to: obtain tuples ``as-fast-as-possible. (Intuitively, max-area-under-curve plotting cost versus tuples retrieved)</p>
    <p>Example: Query S6 -&gt; S5 -&gt; other sources</p>
    <p>- S6 gives 255 tuples - S5 gives remaining 45 tuples</p>
    <p>Query S1 -&gt; S2 -&gt; S3 -&gt; S4 -&gt; S5 -&gt; S6 - S1 gives 100 tuples - S2 gives 100 tuples - S3 gives 50 tuples - S4 gives 50 tuples</p>
    <p>Source ordering</p>
    <p>N um</p>
    <p>. t up</p>
    <p>le s</p>
    <p>S6 S5</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3 S4</p>
  </div>
  <div class="page">
    <p>Formal problem defnitions  Dependency model  Cost model for query answering  Coverage and optimization problems</p>
    <p>Algorithms and complexity results summary  Coverage problem (CP)  Cost minimization problem (CMP)  Maximum coverage problem (MCP)  Source ordering problem (SOP)</p>
    <p>Next</p>
  </div>
  <div class="page">
    <p>Paper presents detailed theoretical investigation:  All four problems: coverage, cost-minimization, max</p>
    <p>coverage, source-ordering  All cost models: linear, num-sources, arbitrary  Hardness results, polynomial-time algorithms, tractable</p>
    <p>sub-classes, approximations  Next:</p>
    <p>1-2 slides on each of the problems, highlighting main results</p>
    <p>Focus on fraction-copying model</p>
    <p>Summary of results</p>
  </div>
  <div class="page">
    <p>#P-complete in general  Reduction from the problem of evaluating the</p>
    <p>number of satisfying assignments in a monotone 2-DNF formula</p>
    <p>Coverage Problem</p>
  </div>
  <div class="page">
    <p>Coverage Problem</p>
    <p>PTIME when each copy-fraction is 0 or 1  Algorithm-A:</p>
    <p>Compute exact coverage of the subset of sources  Compute total number of tuples among all sources</p>
  </div>
  <div class="page">
    <p>Coverage Problem</p>
    <p>PTIME with select-copying  Lot of sources copy by applying selection queries  Knowledge of selection predicate makes problem tractable</p>
  </div>
  <div class="page">
    <p>Coverage Problem</p>
    <p>PTIME randomized approximation algorithm</p>
  </div>
  <div class="page">
    <p>Polynomial-time randomized (MC) algorithm  Algorithm runs in: O(NE log(1/d) / e2)  Coverage is within error e with probability  (1-d)</p>
    <p>Randomized algorithm:  Randomly include/omit each edge with probability</p>
    <p>based on copy-fraction of edge  Run Algorithm-A on the resulting graph</p>
    <p>Final coverage: average of multiple iterations</p>
    <p>Coverage: Randomized Algorithm</p>
  </div>
  <div class="page">
    <p>Coverage: Randomized Algorithm Coverage of S6: -Retain edges based on fraction -Compute coverage -Correct answer = 255/300 tuples</p>
    <p>Iteration-1: #covered tuples = 300</p>
    <p>Iteration-2: #covered tuples = 200</p>
    <p>Compute average coverage</p>
  </div>
  <div class="page">
    <p>Formal problem defnitions  Dependency model  Cost model for query answering  Coverage and optimization problems</p>
    <p>Algorithms and complexity results summary  Coverage problem (CP)  Cost minimization problem (CMP)  Maximum coverage problem (MCP)  Source ordering problem (SOP)</p>
    <p>Next</p>
  </div>
  <div class="page">
    <p>CMP, MCP, SOP: Complete Results</p>
    <p>Next:  Sample of results from the table above  Greedy algorithm for picking sources</p>
    <p>a Number-of-sources cost model</p>
    <p>b Linear cost-model and arbitrary source cost model</p>
    <p>c With PTIME coverage algorithm</p>
  </div>
  <div class="page">
    <p>Other Results</p>
    <p>a Number-of-sources cost model</p>
    <p>b Linear cost-model and arbitrary source cost model</p>
    <p>c With PTIME coverage algorithm</p>
    <p>All problems intractable in general</p>
  </div>
  <div class="page">
    <p>Greedy algorithm for cost-minimization, maximum coverage, source ordering:  Pick the source S maximizing I(S)/c(S)  I(S) = total number of new tuples  c(S) = cost of querying S</p>
    <p>Greedy algorithm is optimal when all sources:  Copy from at most one source  Copy all or zero tuples (i.e., fraction=1)</p>
    <p>Greedy Algorithm</p>
  </div>
  <div class="page">
    <p>Greedy Algorithm Results</p>
    <p>a Number-of-sources cost model</p>
    <p>b Linear cost-model and arbitrary source cost model</p>
    <p>c With PTIME coverage algorithm</p>
    <p>Optimal for Single-source copying:  Copy from at most one source  Copy all or zero tuples (i.e., fraction=1)</p>
  </div>
  <div class="page">
    <p>Greedy Algorithm Results</p>
    <p>a Number-of-sources cost model</p>
    <p>b Linear cost-model and arbitrary source cost model</p>
    <p>c With PTIME coverage algorithm</p>
    <p>Approximations in the general-case:  Log-approx (in size of largest source) for cost-minimization  (1-1/e)-approx for maximum-coverage  2-approx for source-ordering</p>
  </div>
  <div class="page">
    <p>Contributions:  Studied query answering with dependent sources  Simple model to capture dependencies  Four important problems: coverage, cost</p>
    <p>minimization, maximum-coverage, source ordering  Algorithms and complexity results for the problems</p>
    <p>Future:  Build a system based on our theoretical foundations  Specifc open problems laid out in the paper</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
