<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Less is More Quantifying the Security Benefits of Debloating Web Applications</p>
    <p>Babak Amin Azad Pierre Laperdrix Nick Nikiforakis</p>
    <p>Stony Brook University</p>
  </div>
  <div class="page">
    <p>What is software debloating?</p>
    <p>Reducing the attack surface by removing pieces of code that are not required by users.</p>
  </div>
  <div class="page">
    <p>Youre vulnerable, but do you have to be?</p>
    <p>Web Cache Poisoning vulnerability on Drupal https://portswigger.net/blog/practical-web-cache-poisoning</p>
    <p>X-Original-URL X-Rewrite-URL</p>
  </div>
  <div class="page">
    <p>Debloating Pipeline</p>
  </div>
  <div class="page">
    <p>Identifying important functionalities of an application</p>
    <p>Tutorials</p>
    <p>Find tutorials for these applications  Automate them using Selenium 1. Login</p>
    <p>Example of tasks covered by tutorials</p>
    <p>Whats not covered by tutorials</p>
  </div>
  <div class="page">
    <p>Expanding the breadth of coverage</p>
    <p>Monkey Testing Spider Vulnerability Scanner</p>
  </div>
  <div class="page">
    <p>Files covered by each testing tool</p>
  </div>
  <div class="page">
    <p>File &amp; Function level debloating</p>
    <p>Remove the contents of unused files/functions  Use place holders</p>
    <p>Log information about execution of removed code  Stop the execution flow to prevent entering an unknown state</p>
  </div>
  <div class="page">
    <p>Results #1: Reduction of LLOC after debloating</p>
    <p>File Debloating - Average 33% reduction</p>
    <p>- WordPress: 9%</p>
    <p>- Magento: 65%</p>
    <p>(400 KLLOC)</p>
    <p>Function Debloating - Average 47% reduction (+14%)</p>
    <p>- WordPress: 31% (+22%)</p>
    <p>- Magento 71% (+6%)</p>
  </div>
  <div class="page">
    <p>Results #2: Reduction of Cyclomatic Complexity</p>
    <p>File Debloating - Average of 32.5%</p>
    <p>reduction</p>
    <p>- WordPress: 6%</p>
    <p>- Magento: 74.3%</p>
    <p>Function Debloating - Average 50.3%</p>
    <p>reduction (+18%)</p>
    <p>- WordPress: 24% (+18%)</p>
    <p>- Magento 80.2% (+6%)</p>
  </div>
  <div class="page">
    <p>Coverage of CVEs based on Usage Profiles</p>
  </div>
  <div class="page">
    <p>Results #3: Reduction of CVEs</p>
    <p>Application Strategy Total Removed CVEs</p>
    <p>phpMyAdmin File Debloating 4/20 20 %</p>
    <p>Function Debloating 12/20 60 %</p>
    <p>MediaWiki File Debloating 8/21 38 %</p>
    <p>Function Debloating 10/21 47.6 %</p>
    <p>WordPress File Debloating 0/20 0 %</p>
    <p>Function Debloating 2/20 10 %</p>
    <p>Magento File Debloating 1/8 12.5 %</p>
    <p>Function Debloating 3/8 37.5 %</p>
  </div>
  <div class="page">
    <p>Crypto and cookie related vulnerabilities usually cant be removed by debloating.</p>
    <p>CSRF vulnerabilities are only removed when the underlying feature is removed.</p>
    <p>Code execution vulnerabilities can either be removed or broken by removing the POI gadgets.</p>
    <p>Types of vulnerabilities removed by debloating</p>
  </div>
  <div class="page">
    <p>Effect of external dependencies on software bloat</p>
    <p>Before debloating After function-level debloating</p>
    <p>Application LLOC inmain App LLOC in</p>
    <p>packages LLOC in main App</p>
    <p>LLOC in packages</p>
    <p>phpMyAdmin 4.7.0 36k 82k 26k (-26.2 %) 10k (-88.3 %)</p>
    <p>MediaWiki 1.28.0 133k 51k 54k (-58.8%) 6k (-87.7 %)</p>
    <p>Magento 2.0.5 396k 213k 182k (-54.2 %) 34k (-84.0 %)</p>
  </div>
  <div class="page">
    <p>Statistics about removed external packages</p>
    <p>Before debloating After function-level debloating</p>
    <p>Application # Packages # packages completely removed</p>
    <p># packages with &lt; 30 % of lines removed</p>
    <p>phpMyAdmin 4.7.0 45 38 (84 %) 4</p>
    <p>MediaWiki 1.28.0 40 24 (60 %) 12</p>
    <p>Magento 2.0.5 71 58 (82 %) 2</p>
    <p>But if a package is never used, does it contribute to the attack surface?</p>
  </div>
  <div class="page">
    <p>PHP Object Injection (POI) attacks</p>
    <p>Unsafe object deserialization vulnerability is the target of this exploit.  Attacker can control value of properties on injected objects.</p>
    <p>(Also known as Property Oriented Programming, POP)  But the attacker cannot control execution of functions.  The chain is made based on magic functions.  The chain usually ends with a write to file system</p>
    <p>or a database transaction.</p>
    <p>Magic functions: __construct() __toString() __destruct() __wakeup() ...</p>
  </div>
  <div class="page">
    <p>Results #4: Reduction of object injection gadgets</p>
    <p>Application Package Removed by Debloating</p>
    <p>File Function</p>
    <p>phpMyAdmin 4.7.0 Doctrine</p>
    <p>Guzzle</p>
    <p>MediaWiki 1.28.0 Monolog</p>
    <p>Magento 2.0.5</p>
    <p>Doctrine</p>
    <p>Monolog</p>
    <p>Zendframework</p>
  </div>
  <div class="page">
    <p>Source code and the artifacts are publicly available  Debloating pipeline to evaluate and debloat custom applications  Debloated web applications  Source code coverage information  CVE to source code mappings &amp; Exploits</p>
    <p>https://debloating.com</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Debloating can reduce web applications attack surface significantly  Up to 71 % reduction in LLOC  Up to 60 % reduction in CVEs  Up to 100 % removal of POI Gadgets</p>
    <p>Web vulnerabilities &amp; their exploitation is different, as a result web debloating is different (Targeting actual vulnerabilities rather than dead code)</p>
    <p>We also need to focus on usability and performance of debloating schemes  Artifacts and debloated applications are available at: https://debloating.com</p>
  </div>
</Presentation>
