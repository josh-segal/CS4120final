<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Composable Reliability for Asynchronous Systems</p>
    <p>Sunghwan Yoo, Charles Killian, Terence Kelly, Hyoun Kyu Cho, Steven Plite</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 2</p>
    <p>Distributed systems: Key-value store</p>
    <p>x=1</p>
    <p>X=1 X=1 X=1 X=1</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 3</p>
    <p>Distributed systems: Key-value store</p>
    <p>X=1 X=1</p>
    <p>#1</p>
    <p>X=1</p>
    <p>#2</p>
    <p>#1 #2</p>
    <p>X=1</p>
    <p>#3</p>
    <p>x=1 x=1</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 4</p>
    <p>Distributed systems: Key-value store</p>
    <p>X=1 X=1</p>
    <p>#1</p>
    <p>X=1</p>
    <p>#2</p>
    <p>#1 #2</p>
    <p>X=1</p>
    <p>#3</p>
    <p>x=1 x=1</p>
    <p>Retransmission</p>
    <p>Restart upon crash-restart</p>
    <p>Rollback-recovery protocol</p>
    <p>- Checkpoint-based</p>
    <p>- Message-logging based</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 5</p>
    <p>Distributed systems: Handling failures</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 6</p>
    <p>Distributed systems: Handling failures</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 7</p>
    <p>Distributed systems: Handling failures</p>
    <p>Guaranteeing global reliability across independently developed components is difficult.</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 8</p>
    <p>Ken: Crash-restart tolerant protocol</p>
    <p>Ken Ken</p>
    <p>Ken Ken</p>
    <p>Ken Ken</p>
    <p>Ken</p>
    <p>Ken</p>
    <p>Ken</p>
    <p>Ken Ken</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 9</p>
    <p>Ken: Crash-restart tolerant protocol</p>
    <p>Ken Ken</p>
    <p>Ken Ken</p>
    <p>Ken Ken</p>
    <p>Ken</p>
    <p>Ken</p>
    <p>Ken</p>
    <p>Ken Ken</p>
    <p>Ken preserves global reliability</p>
    <p>when you compose independent components</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 10</p>
    <p>Ken Highlights</p>
    <p>Ken</p>
    <p>makes crash-restarted node</p>
    <p>look like slow node</p>
    <p>=</p>
    <p>=</p>
    <p>=</p>
    <p>Ken provides</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 11</p>
    <p>Related Work</p>
    <p>Rollback Recovery  Much research through 1990s</p>
    <p>Waterken (1999) : Ken principles in different programming abstractions</p>
    <p>Lowell et al. (2000) : Output validity</p>
    <p>Computing Surveys (2002): summary of mature field</p>
    <p>Software Persistent Memory (ATC 2012)</p>
    <p>Different approach to orthogonal persistence</p>
    <p>Hardening Crash-Tolerant Systems (ATC 2012)  Detects arbitrary state corruption in event-driven code</p>
    <p>Could make Ken-based software more reliable</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 12</p>
    <p>Design of Ken</p>
    <p>Communicating event loop WORLD</p>
    <p>KEN</p>
    <p>KEN</p>
    <p>KEN</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 13</p>
    <p>Design of Ken</p>
    <p>WORLD</p>
    <p>KEN</p>
    <p>KEN Time</p>
    <p>Changes to memory heap</p>
    <p>Sending messages</p>
    <p>Commit</p>
    <p>EXTERNALIZER</p>
    <p>EXTERNALIZER</p>
    <p>handler()</p>
    <p>Store as checkpoint file</p>
    <p>Send out messages</p>
    <p>Event loop begins</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 14</p>
    <p>Design of Ken</p>
    <p>WORLD</p>
    <p>KEN</p>
    <p>OTHER</p>
    <p>KEN Time</p>
    <p>handler()</p>
    <p>handler()</p>
    <p>Msgs are resent</p>
    <p>handler()</p>
    <p>Acked msgs are removed</p>
    <p>EXTERNALIZER</p>
    <p>EXTERNALIZER</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 15</p>
    <p>Design of Ken</p>
    <p>WORLD</p>
    <p>KEN</p>
    <p>OTHER</p>
    <p>KEN Time</p>
    <p>handler()</p>
    <p>handler()</p>
    <p>Msgs are resent</p>
    <p>handler()</p>
    <p>Acked msgs are removed</p>
    <p>EXTERNALIZER</p>
    <p>EXTERNALIZER</p>
    <p>Crashed/recovered nodes look like slow nodes</p>
    <p>Uncoordinated protocol  scalable</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 16</p>
    <p>Ken: Composable Reliability</p>
    <p>Seller</p>
    <p>Buyer</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 17</p>
    <p>Ken: Composable Reliability</p>
    <p>Seller</p>
    <p>Buyer</p>
    <p>Guaranteeing global reliability</p>
    <p>across independent components is difficult task.</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 18</p>
    <p>Ken: Composable Reliability</p>
    <p>Seller</p>
    <p>Buyer</p>
    <p>Ken</p>
    <p>Ken Ken</p>
    <p>Ken When you compose independent components,</p>
    <p>reliability will be transparently guaranteed by Ken</p>
    <p>Ken allows decentralized development</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 19</p>
    <p>Ken Illustrated: Ping-pong Counter #include &quot;ken.h&quot;</p>
    <p>#include &quot;kenapp.h&quot;</p>
    <p>int ken_handler(void *msg, int len, kenid_t src) {</p>
    <p>int *cnt;</p>
    <p>if (NULL == msg) {</p>
    <p>cnt = ken_malloc(sizeof *cnt); *cnt = 0;</p>
    <p>ken_set_app_data(cnt); }</p>
    <p>else {</p>
    <p>cnt = ken_get_app_data(); *cnt = *(int*)msg + 1;</p>
    <p>ken_send(src, cnt, sizeof *cnt); }</p>
    <p>return -1;</p>
    <p>}</p>
    <p>begin transaction</p>
    <p>end transaction</p>
    <p>initialization</p>
    <p>incoming message</p>
    <p>persistent heap</p>
    <p>entry point</p>
    <p>fire &amp; forget</p>
    <p>analogue of main()</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 20</p>
    <p>Ken Illustrated: Ping-pong Counter #include &quot;ken.h&quot;</p>
    <p>#include &quot;kenapp.h&quot;</p>
    <p>int ken_handler(void *msg, int len, kenid_t src) {</p>
    <p>int *cnt;</p>
    <p>if (NULL == msg) {</p>
    <p>cnt = ken_malloc(sizeof *cnt); *cnt = 0;</p>
    <p>ken_set_app_data(cnt); }</p>
    <p>else {</p>
    <p>cnt = ken_get_app_data(); *cnt = *(int*)msg + 1;</p>
    <p>ken_send(src, cnt, sizeof *cnt); }</p>
    <p>return -1;</p>
    <p>}</p>
    <p>begin transaction</p>
    <p>end transaction</p>
    <p>initialization</p>
    <p>incoming message</p>
    <p>persistent heap</p>
    <p>entry point</p>
    <p>fire &amp; forget</p>
    <p>analogue of main()</p>
    <p>Ken programming is simple</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 21</p>
    <p>Mace: Ping-pong Counter</p>
    <p>service PingPong;</p>
    <p>services { Transport t; }</p>
    <p>state_variables { int cnt = 0; }</p>
    <p>messages { pong {int cnt;} }</p>
    <p>transitions {</p>
    <p>deliver(src, dest, msg) {</p>
    <p>cnt = msg.cnt+1;</p>
    <p>route(src, pong(cnt));</p>
    <p>}</p>
    <p>}</p>
    <p>Mace Mace with Ken</p>
    <p>programmer makes service</p>
    <p>define state var &amp; messages</p>
    <p>incoming message</p>
    <p>send message</p>
    <p>end transaction</p>
    <p>begin transaction</p>
    <p>in persistent heap</p>
    <p>fire &amp; forget messaging</p>
    <p>Event-driven distributed system language framework</p>
    <p>Used in many projects</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 22</p>
    <p>Mace: Ping-pong Counter</p>
    <p>service PingPong;</p>
    <p>services { Transport t; }</p>
    <p>state_variables { int cnt = 0; }</p>
    <p>messages { pong {int cnt;} }</p>
    <p>transitions {</p>
    <p>deliver(src, dest, msg) {</p>
    <p>cnt = msg.cnt+1;</p>
    <p>route(src, pong(cnt));</p>
    <p>}</p>
    <p>}</p>
    <p>Mace Mace with Ken</p>
    <p>programmer makes service</p>
    <p>define state var &amp; messages</p>
    <p>incoming message</p>
    <p>send message</p>
    <p>end transaction</p>
    <p>begin transaction</p>
    <p>in persistent heap</p>
    <p>fire &amp; forget messaging</p>
    <p>You dont need to change anything for Ken</p>
    <p>Reliability and composability comes easily</p>
    <p>Event-driven distributed system language framework</p>
    <p>Used in many projects</p>
    <p>No changes are needed</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 23</p>
    <p>Ken: Integration with Mace</p>
    <p>Mace Ken</p>
    <p>Masks failures globally</p>
    <p>Composable reliability</p>
    <p>Availability through replication</p>
    <p>Handles permanent failures</p>
    <p>MaceKen</p>
    <p>Packaged with distributed protocols</p>
    <p>Ken provides new benefits to</p>
    <p>legacy Mace applications!</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 24</p>
    <p>Implementation</p>
    <p>Ken  C library  Publicly available</p>
    <p>MaceKen  Modifications to existing Mace runtime libraries  No changes to existing Mace services</p>
    <p>Linux Container (LXC) environment  Simulating correct power-failure behavior (in paper)</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 25</p>
    <p>Evaluation</p>
    <p>Microbenchmark  Performance test</p>
    <p>kBay</p>
    <p>Composable reliability (in paper)</p>
    <p>Distributed analysis of 1.1 TB graph</p>
    <p>Versatility (in paper)</p>
    <p>Bamboo-DHT</p>
    <p>Failure masking &amp; data survival for legacy Mace app</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 26</p>
    <p>Evaluation: Ken Microbenchmark</p>
    <p>Experimental setup  16 core, 2.4 GHz Xeon  32GB RAM  Mirrored RAID</p>
    <p>Two 72 GB 15K RPM disks</p>
    <p>Test  Ping-pong counter test between two Ken processes</p>
    <p>KEN</p>
    <p>KEN</p>
    <p>Measure : latency and throughput</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 27</p>
    <p>Evaluation: Ken Microbenchmark</p>
    <p>disk sync no sync ramfs sync</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (</p>
    <p>m s)</p>
    <p>disk sync no sync ramfs sync</p>
    <p>T h</p>
    <p>ru p</p>
    <p>u t</p>
    <p>(e v</p>
    <p>e n</p>
    <p>ts /s</p>
    <p>e c)</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 28</p>
    <p>Evaluation: Bamboo-DHT</p>
    <p>Wide-area network</p>
    <p>X=1</p>
    <p>X=1</p>
    <p>X=1 X=1 X=1 X=1</p>
    <p>X=1 X=1</p>
    <p>X=1</p>
    <p>X=1</p>
    <p>X=1</p>
    <p>Managed Network</p>
    <p>X=1</p>
    <p>X=1 X=1</p>
    <p>Single administration Colocation</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 29</p>
    <p>Evaluation: Bamboo-DHT</p>
    <p>Wide-area network</p>
    <p>X=1</p>
    <p>X=1</p>
    <p>X=1 X=1 X=1 X=1</p>
    <p>X=1 X=1</p>
    <p>X=1</p>
    <p>X=1</p>
    <p>X=1</p>
    <p>Managed Network</p>
    <p>X=1</p>
    <p>X=1 X=1</p>
    <p>Single administration Colocation</p>
    <p>Bamboo-DHT on Mace will fail  Bamboo-DHT on MaceKen will work  Mace vs. MaceKen: testing rolling-restart</p>
    <p>and correlated failure</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 30</p>
    <p>Evaluation: Bamboo-DHT</p>
    <p>Experimental setup  12 dual quad-core machines, 8GB RAM  4x1Gb Ethernet connections  300 DHT nodes on 12 machines</p>
    <p>Measures  Immediate-Get</p>
    <p>Stored-Get</p>
    <p>X=1 X=1 X=?</p>
    <p>X=1 X=1 X=?</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 31</p>
    <p>Bamboo-DHT: Crash-restart Failures</p>
    <p>begin experiment</p>
    <p>Stored GET begins</p>
    <p>correlated failure</p>
    <p>very low data survivability</p>
    <p>Correlated Failures</p>
    <p>bootstrap node spared</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 32</p>
    <p>Bamboo-DHT: Rolling-restart</p>
    <p>churn begins churn ends</p>
    <p>Rolling-restart</p>
    <p>still low data survivability</p>
    <p>stored GET begins</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 33</p>
    <p>Bamboo-DHT: Rolling-restart</p>
    <p>churn begins churn ends</p>
    <p>Rolling-restart</p>
    <p>still low data survivability</p>
    <p>stored GET begins</p>
    <p>MaceKen provides automated crash resilience</p>
    <p>to legacy Mace app and 100% data survivability</p>
  </div>
  <div class="page">
    <p>Yoo, Killian, Kelly, Cho and Plite, Composable Reliability for Asynchronous Systems, USENIX ATC 2012 34</p>
    <p>Conclusion</p>
    <p>Ken available now:</p>
    <p>http://ai.eecs.umich.edu/~tpkelly/Ken/</p>
    <p>MaceKen available soon:</p>
    <p>http://www.macesystems.org/maceken/</p>
    <p>Thank you!</p>
    <p>Ken provides 1. Reliability 2. Composability 3. Programmability</p>
    <p>MaceKen provides 1. Transparency 2. 100% data survivability</p>
  </div>
</Presentation>
