<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Way Forward: Enabling Operating</p>
    <p>System Innovation in the Cloud</p>
    <p>Dan Schatzberg, James Cadden, Orran Krieger, Jonathan Appavoo Boston University</p>
  </div>
  <div class="page">
    <p>There has been a lot of innovation in cloud computing</p>
  </div>
  <div class="page">
    <p>In contrast, there has been relatively little innovation in the operating system</p>
  </div>
  <div class="page">
    <p>Do operating systems matter? Yes!</p>
  </div>
  <div class="page">
    <p>percentile of service time. However, as S increases, the observed latency of the set of requests quickly approaches the long tail of latency, in this case just below the 99th percentile.</p>
    <p>one after another such that a subsequent request is dependent on the results of previous requests. Dependent/sequential patterns, for example, force Facebook to limit the number of requests that can be issued to build a users page to between 100 and 150 [32]. The reason for this limit is to control latency, since a large number of sequential requests can add up to a large aggregate latency. With a large number of sequential requests the number of requests hitting the tail latency will also increase, thus lowering the number of otherwise possible sequential invocations. Another example of this pattern is search queries that are iteratively refined based on previous results.</p>
    <p>In both cases, increasing the load on the subservices results in increased service time, lowering the number of operations allowed during a particular time budget. This observation is widely known, and in this subsection we show how it can be validated both through a queueing analysis as well as a simple microbenchmark.</p>
    <p>Consider a simple model of a single-threaded server where clients send requests to the server according to a Poisson process at a rate . The server processes requests one at a time with an average service time of . Since the service time is variable, we model the system as an M/G/1 queue. Using the Pollaczek-Khinchine transformation [7], we compute the expected wait time as a function of the variance of the service time using</p>
    <p>W =  + V ar(S)</p>
    <p>Component Description Mean latency (s) 99 %ile latency (s) Overall share</p>
    <p>DC Fabric Propagation delay &lt; 1 -</p>
    <p>Single Switch 1-4 40-60 1% Network Path 6 150 7 %</p>
    <p>Endhost Net. serialization 1.3 1.3 1.4 %</p>
    <p>DMA 2.6 2.6 3 % Kernel (incl. lock contention) 76 1200-2500 86-95 %</p>
    <p>Application Application 2 3 2 % Total latency 88 1356-2656 100 %</p>
    <p>Table 1: Latency sources in data center applications. The underlying operating system is Linux 2.6.28. The network fabric latency assumes six switch hops per path and at most 2-3 switches congested along the path. Switch latency is calculated assuming 32 port switch with a 2MB shared buffer (i.e., 64KB may be allocated to each port). Application latency is based on Memcached latency.</p>
    <p>Based on this model, we can predict the service latency as a function of service load, mean latency, and the standard deviation of variance. To observe the effect of latency variation, we evaluated the model against  = 1 (based on our observations of Memcached), and  = 2 (representing a higher variance service). For each  value, we use the model to compute the latency, and from that, we compute the number of service invocations that a developer can issue while fitting into a specified end-to-end latency budget, and plot the results in Figure 2(a). As expected, that budget is significantly reduced in the presence of increased latency variance.</p>
    <p>To validate this model, we compare the predicted number of permitted service invocations to the actual number as measured with Memcached deployment in our testbed, shown in Figure 2(b). The experimental setup and experiments are described in detail in Section 5.2. Here, we measure the 99th percentile of latency for both baseline Memcached as well as Memcached implemented on Chronos (CH) with uniform inter-arrival time and access pattern for requests. Each point in figure represents the number of service invocations permitted with the specified SLA, as a function of the server load, in requests per second.</p>
    <p>The overall trends in these simple studies confirm the intuition that delivering predictable, low latency response requires not just a low mean latency , but also a small variation from the mean.</p>
    <p>We summarize the results in Table 1 and report the contribution of each component in the end-to-end latency. This includes one-way network latency for a request to reach from the client to the server, the latency at endhost server to deliver the request to the application and application</p>
    <p>Reproduced from Kapoor et al. Chronos predictable low latency for data center applications. SOCC 2012</p>
    <p>Do operating systems matter? Yes!</p>
    <p>Memcached Latency</p>
  </div>
  <div class="page">
    <p>How can we enable OS innovation in the cloud?</p>
  </div>
  <div class="page">
    <p>Modify Existing OS Clean Slate</p>
  </div>
  <div class="page">
    <p>Large software ecosystem</p>
    <p>Pros</p>
    <p>Modify Existing OS Clean Slate</p>
  </div>
  <div class="page">
    <p>Large software ecosystem</p>
    <p>Pros</p>
    <p>Cons</p>
    <p>- Large and complex</p>
    <p>Modify Existing OS Clean Slate</p>
  </div>
  <div class="page">
    <p>Large software ecosystem</p>
    <p>Pros</p>
    <p>Cons</p>
    <p>- Large and complex</p>
    <p>Complete control</p>
    <p>Modify Existing OS Clean Slate</p>
  </div>
  <div class="page">
    <p>Large software ecosystem</p>
    <p>Pros</p>
    <p>Cons</p>
    <p>- Large and complex - Need to reproduce legacy functionality</p>
    <p>Complete control</p>
    <p>Modify Existing OS Clean Slate</p>
  </div>
  <div class="page">
    <p>A Way Forward</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Distributed application  On demand provisioning  Isolated (virtual) hardware</p>
    <p>for each application</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>What is the role of the operating system?</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Distributed application  On demand provisioning  Isolated (virtual) hardware</p>
    <p>for each application</p>
    <p>Typical Cloud Web Application</p>
    <p>The OS doesnt need to:</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Distributed application  On demand provisioning  Isolated (virtual) hardware</p>
    <p>for each application</p>
    <p>Typical Cloud Web Application</p>
    <p>The OS doesnt need to:</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Distributed application  On demand provisioning  Isolated (virtual) hardware</p>
    <p>for each application</p>
    <p>Typical Cloud Web Application</p>
    <p>The OS doesnt need to:</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
    <p>Library OS: functionality linked</p>
    <p>into application address space</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>But what about</p>
    <p>logging  management (ps, kill)  configuration  tooling</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>But what about</p>
    <p>logging  management (ps, kill)  configuration  tooling</p>
    <p>Offload nonperformance critical</p>
    <p>functionality to general purpose OS</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
    <p>MultiLibOS</p>
  </div>
  <div class="page">
    <p>A MultiLibOS is a tightly integrated composition of general purpose operating systems and</p>
    <p>specialized library operating systems</p>
  </div>
  <div class="page">
    <p>There are many different ways a MultiLibOS might be integrated</p>
  </div>
  <div class="page">
    <p>Distributed Shared Memory  Message Passing  Distributed Namespace (9p)</p>
    <p>There are many different ways a MultiLibOS might be integrated</p>
  </div>
  <div class="page">
    <p>The MultiLibOS allows a tradeoff between effort and utility</p>
  </div>
  <div class="page">
    <p>Lower Effort</p>
    <p>Lower Utility</p>
    <p>Higher Effort</p>
    <p>Higher Utility</p>
  </div>
  <div class="page">
    <p>Lower Effort</p>
    <p>Lower Utility</p>
    <p>Higher Effort</p>
    <p>Higher Utility</p>
    <p>Existing General Purpose Systems</p>
  </div>
  <div class="page">
    <p>Lower Effort</p>
    <p>Lower Utility</p>
    <p>Higher Effort</p>
    <p>Higher Utility</p>
    <p>Existing General Purpose Systems</p>
    <p>Custom Special Purpose Systems</p>
  </div>
  <div class="page">
    <p>Lower Effort</p>
    <p>Lower Utility</p>
    <p>Higher Effort</p>
    <p>Higher Utility</p>
    <p>Existing General Purpose Systems</p>
    <p>Custom Special Purpose Systems</p>
    <p>Mu ltiL</p>
    <p>ibO S</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>Memcached</p>
    <p>Typical Cloud Web Application</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Interrupt</p>
    <p>Linux Memcached</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Schedule thread</p>
    <p>Context Switch</p>
    <p>Interrupt</p>
    <p>Linux Memcached</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Schedule thread</p>
    <p>Context Switch Interrupts Enabled</p>
    <p>Interrupt</p>
    <p>Linux Memcached</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Schedule thread</p>
    <p>Context Switch Interrupts Enabled</p>
    <p>Copy packet to userspace</p>
    <p>Interrupt</p>
    <p>Linux Memcached</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Schedule thread</p>
    <p>Context Switch Interrupts Enabled</p>
    <p>Validation, protection from DoS</p>
    <p>Copy packet to userspace</p>
    <p>Interrupt</p>
    <p>Linux Memcached</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Interrupt</p>
    <p>Example LibraryOS Memcached</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Interrupt</p>
    <p>Example LibraryOS Memcached</p>
    <p>Function Call</p>
    <p>Function Call</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Interrupt</p>
    <p>Example LibraryOS Memcached</p>
    <p>Interrupts Disabled</p>
    <p>Function Call</p>
    <p>Function Call</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Interrupt</p>
    <p>Example LibraryOS Memcached</p>
    <p>Zero Copy</p>
    <p>Function Call</p>
    <p>Function Call</p>
    <p>Interrupts Disabled</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Memcached</p>
    <p>Interrupt</p>
    <p>Example LibraryOS Memcached</p>
    <p>No virtual memory  No complex scheduling  Small system image</p>
    <p>Function Call</p>
    <p>Zero Copy</p>
    <p>Function Call</p>
    <p>Interrupts Disabled</p>
  </div>
  <div class="page">
    <p>SageMath</p>
    <p>Open source mathematics environment (like Matlab, Mathematica, etc.)  Python  Incorporates many libraries</p>
  </div>
  <div class="page">
    <p>SageMath</p>
    <p>Open source mathematics environment (like Matlab, Mathematica, etc.)  Python  Incorporates many libraries</p>
  </div>
  <div class="page">
    <p>new Matrix(1000000, 1000000)</p>
    <p>SageMath</p>
  </div>
  <div class="page">
    <p>new Matrix(1000000, 1000000)</p>
    <p>SageMath</p>
    <p>f(x) f(x) f(x) f(x) f(x) f(x) f(x) f(x)</p>
  </div>
  <div class="page">
    <p>Focus on:  I/O  Elasticity  Scalability</p>
    <p>SageMath</p>
    <p>f(x) f(x) f(x) f(x) f(x) f(x) f(x) f(x)</p>
  </div>
  <div class="page">
    <p>MultiLibOS Challenges</p>
    <p>Reuse vs. Specialization  Versionitis  Avoid building a new OS</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT)</p>
    <p>A MultiLibOS toolkit for elastic applications</p>
    <p>Components are  Efficient  Reusable  Customizable</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Questions?</p>
    <p>https://github.com/sesa/ebbrt</p>
    <p>Dan Schatzberg, James Cadden, Orran Krieger, Jonathan Appavoo dschatz@bu.edu jmcadden@bu.edu okrieg@bu.edu jappavoo@bu.edu</p>
  </div>
</Presentation>
