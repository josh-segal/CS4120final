<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sleepless in Seattle No Longer Joshua Reich*, Michel Goraczko,</p>
    <p>Aman Kansal, and Jitu Padhye</p>
    <p>Columbia University*, Microsoft Research</p>
  </div>
  <div class="page">
    <p>A Short Story: Sleepless in Seattle</p>
    <p>A desktop machine</p>
    <p>Workdays: often used, sometimes idle</p>
    <p>Nights, holidays, weekends: often idle</p>
    <p>sometimes accessed remotely by user</p>
    <p>more often accessed by IT (patches, updates, scans)</p>
    <p>But always powered on</p>
  </div>
  <div class="page">
    <p>A Short Story: Sleepless in Seattle</p>
    <p>Why?</p>
    <p>B/c its user and the IT dept want</p>
    <p>continuous remote availability</p>
    <p>seamless access (no fiddling w/ manual tools to wake machine)</p>
  </div>
  <div class="page">
    <p>This Story is Typical</p>
    <p>Enterprise machines rarely sleep</p>
    <p>2/3rds of office PCs are left on after hours*</p>
    <p>Or is it 95%? Power management disabled**</p>
    <p>600+ desktops always left on (of total 700+ )***</p>
    <p>Almost all desktop at MSR left on after hours</p>
    <p>[Your own stat or anecdote here]</p>
    <p>*Robertson et. al.: After-hour power status of office equipment and energy usage of plug-load devices.</p>
    <p>LBNL report #53729</p>
    <p>**Nordman, http://www.lbl.gov/today/2004/Aug/20-Fri/r8comm2.lo.pdf</p>
    <p>***Agarwal et. al: Somniloquy, Augmenting network Interfaces to reduce PC energy usage (NSDI 2009)</p>
  </div>
  <div class="page">
    <p>Wasteful Resource Consumption  Not a story with a happy ending</p>
    <p>Unless we change things</p>
    <p>This talk is about making one such change, focusing on practicality and economic feasibility5</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Sleep Proxy Architecture</p>
    <p>Deployment &amp; Instrumentation</p>
    <p>Findings</p>
    <p>Related Work and Next Steps</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Sleep Proxy Architecture</p>
    <p>Deployment &amp; Instrumentation</p>
    <p>Findings</p>
    <p>Related Work and Next Steps</p>
  </div>
  <div class="page">
    <p>Back of Envelope Energy Waste</p>
    <p>If machine</p>
    <p>Draws 100W when awake</p>
    <p>Actually being used 50% of the time.</p>
    <p>Then 400-500 kWh are wasted per year.</p>
    <p>For Microsoft this is something like 40 GWh.</p>
    <p>Over the entire US, on the order of 20 TWh!*</p>
    <p>*Wolfram Alpha, 112.6 million service industry workers, lets assume roughly 1/3rd have desktop machines for total of 40M enterprise desktops</p>
  </div>
  <div class="page">
    <p>Sleep Proxies Can Help</p>
    <p>A Sleep Proxy allows a machine to be</p>
    <p>network available</p>
    <p>while physically asleep</p>
  </div>
  <div class="page">
    <p>Reaction Policy</p>
    <p>When machine sleeps, sleep proxy takes over, examines traffic, following a Reaction Policy</p>
    <p>Respond (e.g., ARP)</p>
    <p>Wake the sleep machine (e.g., remote login)</p>
    <p>Ignore (e.g., ICMP)</p>
    <p>Reaction Policy choices determine</p>
    <p>Amount of potential sleep actually saved</p>
    <p>Co$t and complexity of sleep-proxying system</p>
  </div>
  <div class="page">
    <p>How a Network Sleep Proxy Works</p>
    <p>WAN</p>
    <p>Sleep Proxy</p>
    <p>Remote LoginWork Payload</p>
    <p>Client Machine</p>
    <p>Remote User</p>
    <p>Remote Login Response</p>
    <p>Send Traffic to Me</p>
    <p>Sleep notification Wake Up!</p>
    <p>Send Traffic To Me</p>
  </div>
  <div class="page">
    <p>Sleep Proxy Economics The Type of Green Companie$ Really Care About</p>
    <p>Single machine savings: only $60-$70 per year (though rising)</p>
    <p>Now multiply by 40M enterprise desktops =&gt; $1-3 Billion* yearly savings, just in USA.</p>
    <p>But for a single company  a couple of 100,000 to a couple of million $s per year</p>
    <p>*In line w/ Nordman reports $0.8  2.7 Billion estimated savings.</p>
  </div>
  <div class="page">
    <p>The Bottom Line</p>
    <p>Savings</p>
    <p>Very substantial in aggregate</p>
    <p>Relatively small for individual companies.</p>
    <p>=&gt; Sleep-proxying systems need to be cheap</p>
    <p>Low hardware cost</p>
    <p>Good consolidation ratio (#sleep proxies : #desktops)</p>
    <p>Low admin / setup cost</p>
  </div>
  <div class="page">
    <p>Sleep-Proxying Isnt a New Idea</p>
    <p>First suggested over a decade ago  Christensen &amp; Gulledge, 1998</p>
    <p>Taken up again recently  Allman, et al., Hotnets, 2007</p>
    <p>Agarwal, et al., NSDI, 2009</p>
    <p>Nedevschi, et al., NSDI, 2009</p>
    <p>Two other great papers here at USENIX ATC  LiteGreen, Das, et al. (Virtualization)</p>
    <p>SleepServer, Agarwal, et al., (Custom App Stubs)</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>A design geared towards cheap hardware</p>
    <p>One dedicated machine per subnet (or less)</p>
    <p>Proxy can be run on a low power box</p>
    <p>Atom processor machine? No prob.</p>
    <p>Probably even wall-plug, Open/DDWRT style as well</p>
    <p>And little work for IT</p>
    <p>Simple, lightweight client side install</p>
    <p>No client-side configuration or hardware changes</p>
    <p>Little admin or setup needed on proxy side</p>
  </div>
  <div class="page">
    <p>Our Contributions (cont.)</p>
    <p>First operational enterprise deployment</p>
    <p>Likely where the biggest bang for the buck</p>
    <p>Home users tending to low power devices anyway</p>
    <p>Smaller # of desktops in academic-style networks</p>
    <p>Provide insight on what sleep-proxied enterprise might actually look like</p>
    <p>Why machines are woken</p>
    <p>Why they stay awake</p>
    <p>Where our approach works well and falls short</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Sleep Proxy Architecture</p>
    <p>Deployment &amp; Instrumentation</p>
    <p>Findings</p>
    <p>Related Work and Next Steps</p>
  </div>
  <div class="page">
    <p>Sleep-Proxying System Design Goals  Given normal workload,</p>
    <p>choose architecture and reaction policy</p>
    <p>No change to network applications</p>
    <p>Minimal client-side/network change, configuration</p>
    <p>Sleep proxies that</p>
    <p>Can be deployed on cheap, low power hardware (maybe even run on peers themselves)</p>
    <p>Can cover all clients in a subnet</p>
    <p>Close to zero-configuration /administration</p>
    <p>Provide reasonable opportunity for sleep 18</p>
  </div>
  <div class="page">
    <p>Our Sleep-Proxying Design Principle</p>
    <p>*Tom Cargill, Bell Labs. Popularized by Jon Bentley in</p>
    <p>Communications of the ACM, Programming Pearls, 1985 19</p>
  </div>
  <div class="page">
    <p>Our Sleep-Proxying Design Principle</p>
    <p>*Tom Cargill, Bell Labs. Popularized by Jon Bentley in</p>
    <p>Communications of the ACM, Programming Pearls, 1985 20</p>
  </div>
  <div class="page">
    <p>Our Sleep-Proxying System Design</p>
    <p>Client side service (daemon)</p>
    <p>Sends sleep notifications</p>
    <p>Informs sleep proxy about all LISTENING ports</p>
    <p>Almost no resource consumption</p>
    <p>Uses native OS sleep policies</p>
    <p>User self-install from standard MSI (two clicks)</p>
    <p>No client-side configuration work for IT</p>
  </div>
  <div class="page">
    <p>Our Sleep-Proxying System Design</p>
    <p>Sleep proxy reaction policy</p>
    <p>Respond: to IP address resolution traffic (e.g., ARP, Neighbor-Discovery)</p>
    <p>Wake: client on incoming TCP connection attempts (recognized by presence of SYN flag)</p>
    <p>Ignore: all other traffic</p>
  </div>
  <div class="page">
    <p>No need to define policies determining for which applications clients should be woken</p>
    <p>Great consolidation ratios</p>
    <p>Low cost, low power, potentially peered, proxies</p>
    <p>Practically no IT management/config reqd.</p>
    <p>Design Benefits</p>
    <p>Digital Engine Mini PC</p>
  </div>
  <div class="page">
    <p>How Our Sleep Proxy Works</p>
    <p>WAN</p>
    <p>Subnet router</p>
    <p>Sleep Proxy</p>
    <p>ARP Probe 00:11:22:33:44:55</p>
    <p>WOL / Magic Packet 00:11:22:33:44:55</p>
    <p>SYN-ACK</p>
    <p>Remote User</p>
    <p>ARP Probe 00:11:22:33:44:55</p>
    <p>Sleep notification 00:11:22:33:44:55</p>
    <p>TCP SYN 1.2.3.4:3389</p>
    <p>TCP SYN 1.2.3.4:3389</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Sample Wakeup Timeline</p>
    <p>Step Time From  To Packet Type Note</p>
    <p>Remote User RU Client Machine CM Sleep Proxy SP</p>
    <p>Save by having sleep proxy replay most recent TCP SYN</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Sleep Proxy Architecture</p>
    <p>Deployment &amp; Instrumentation</p>
    <p>Findings</p>
    <p>Related Work and Next Steps</p>
  </div>
  <div class="page">
    <p>Deployment Architecture</p>
  </div>
  <div class="page">
    <p>Sleep-Proxying Subsystem</p>
  </div>
  <div class="page">
    <p>All Sleep Proxies Log Data to DB</p>
  </div>
  <div class="page">
    <p>Joulemeter: Software-only power monitor Assess Source of Sleep Problems</p>
  </div>
  <div class="page">
    <p>Why Machines Lose Sleep</p>
    <p>Crying baby syndrome:</p>
    <p>Sleeping machine (parent) woken often by remote clients (crying babies)</p>
    <p>Identify by measuring</p>
    <p>How quickly machines wake after sleeping</p>
    <p>What traffic is waking them up and from whom</p>
    <p>What processes run immediately after wakeup</p>
    <p>Who places stay-awake requests with OS*</p>
  </div>
  <div class="page">
    <p>Why Machines Lose Sleep  Application induced insomnia</p>
    <p>Machine wont sleep b/c app requests</p>
    <p>e.g., media server, virus scanner</p>
    <p>How does insomnia happen?  WinAPI SetThreadExecutionState*</p>
    <p>ES_CONTINUOUS</p>
    <p>ES_SYSTEM_REQUIRED</p>
    <p>Have remote user hold file open on machine</p>
    <p>Identify by measuring</p>
    <p>Who places stay-awake requests with OS 32*http://msdn.microsoft.com/en-us/library/aa373208(VS.85).aspx</p>
  </div>
  <div class="page">
    <p>Deployment Stats</p>
    <p>Sleep Proxies on 6 subnets in MSR Redmond</p>
    <p>Sleep Clients running on 50+ machines</p>
    <p>Installed by users (two clicks)</p>
    <p>Most primary user workstations</p>
    <p>IT recommended</p>
    <p>System in operation almost one year</p>
    <p>~ 10 MWh saved (not bad for a research prototype)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Sleep Proxy Architecture</p>
    <p>Deployment &amp; Instrumentation</p>
    <p>Findings</p>
    <p>Related Work and Next Steps</p>
  </div>
  <div class="page">
    <p>Sleep Savings  Most machines sleep most of the time</p>
    <p>~20% machines sleep very poorly</p>
  </div>
  <div class="page">
    <p>Energy Savings</p>
    <p>Substantial power savings for many machines</p>
    <p>Note: Saved Power is lower bound estimate.</p>
  </div>
  <div class="page">
    <p>Why Machines Lose Sleep</p>
    <p>Crying baby syndrome</p>
    <p>Sleeping machine (parent) woken often by remote clients (crying babies)</p>
    <p>Application induced insomnia</p>
    <p>Machine wont sleep b/c app requests</p>
    <p>e.g., media server, virus scanner</p>
  </div>
  <div class="page">
    <p>Impact of Crying Babies</p>
    <p>~10% of lost sleep</p>
  </div>
  <div class="page">
    <p>Who are the Crying Babies?</p>
  </div>
  <div class="page">
    <p>Who are the Crying Babies?</p>
    <p>Requestors mostly IT servers (e.g., virus scanners, patch server)</p>
  </div>
  <div class="page">
    <p>Impact of Insomnia</p>
    <p>~90% of lost sleep</p>
  </div>
  <div class="page">
    <p>Who Causes Insomnia?</p>
    <p>5 of top 7 are IT apps</p>
    <p>Several caused by</p>
    <p>program bugs</p>
    <p>legacy drivers</p>
    <p>Hard to improve via reaction policy w/o big expen$e</p>
    <p>Many amenable to better coordination of IT tasks</p>
  </div>
  <div class="page">
    <p>Persistent Cloud Applications</p>
    <p>Small minority used LiveMesh, LiveSync</p>
    <p>We refer to these as persistent cloud apps</p>
    <p>Designed primarily to overcome NAT/firewall</p>
    <p>Requires more sophisticated reaction policy</p>
    <p>But, not used much in the enterprise</p>
    <p>Cloud Server</p>
    <p>TCP</p>
    <p>Persistent</p>
    <p>TCP</p>
    <p>Remote Login, Sync Operation</p>
  </div>
  <div class="page">
    <p>Findings Summary  Relatively simple reaction policy can work well</p>
    <p>filter by port  deal w/ tunneled packets, v4/v6, etc.</p>
    <p>Insomnia foremost cause of lost sleep  IT main cause of both insomnia and crying baby</p>
    <p>Unclear cost effective reaction policy that can help  But intelligent scheduling of IT tasks may help greatly</p>
    <p>Wake once, do everything, then sleep soundly</p>
    <p>Greater complexity can be useful  Persistent cloud apps (non-enterprise systems)  BitTorrent, Skype, etc. (non-enterprise systems)  Additional sleep opportunities (if economical)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Sleep Proxy Architecture</p>
    <p>Deployment &amp; Instrumentation</p>
    <p>Findings</p>
    <p>Related Work and Next Steps</p>
  </div>
  <div class="page">
    <p>Next Steps</p>
    <p>P2P Sleep-Proxying (in progress)</p>
    <p>Sleep-considerate IT app/server coordination</p>
    <p>Lightweight support for persistent cloud apps</p>
    <p>Change remote file access model</p>
  </div>
  <div class="page">
    <p>Us: Quick Overview</p>
    <p>Reaction Policy:</p>
    <p>Wake on incoming TCP connections</p>
    <p>Great consolidation ratio</p>
    <p>Unmodified server (1000s)</p>
    <p>Low power box (100s, maybe 1000s)</p>
    <p>Peered proxy (100s)</p>
    <p>Almost no client change</p>
    <p>Daemon to send notification packets</p>
    <p>Client OS agnostic</p>
    <p>Allows for lots of sleep in the enterprise 47</p>
  </div>
  <div class="page">
    <p>Comparison w/ SleepServer  Reaction Policy:</p>
    <p>Respond to stubbed apps</p>
    <p>Good consolidation ratio (100s)</p>
    <p>Unmodified server</p>
    <p>Moderate client change</p>
    <p>Code, test, install stub-aware apps</p>
    <p>Transfer state / data</p>
    <p>Credential transfer (which can get complicated in enterprise)</p>
    <p>Some additional sleep in enterprise, potentially more in non-enterprise settings 48</p>
  </div>
  <div class="page">
    <p>Comparison w/ LiteGreen  Reaction Policy:</p>
    <p>Respond to everything</p>
    <p>Except computational intense processes, local disk</p>
    <p>Middling consolidation ratio (10s)</p>
    <p>Powerful server + lots of RAM</p>
    <p>Huge client-side / network changes</p>
    <p>Virtualize OS</p>
    <p>RDP even into local machine</p>
    <p>Move most locally stored data onto SAN/NAS</p>
    <p>Install Gigbit backbone (if you dont have already)</p>
    <p>A good deal more additional sleep opportunity (can deal w/ crying babies and even some IT apps)</p>
  </div>
  <div class="page">
    <p>E n</p>
    <p>e rg</p>
    <p>y S</p>
    <p>a v</p>
    <p>in g</p>
    <p>s</p>
    <p>Co$t &amp; Complexity</p>
    <p>Comparison w/ Other Work</p>
    <p>Us</p>
    <p>(Reich, et al.)</p>
    <p>SleepServer</p>
    <p>(Agarwal, et. al.)</p>
    <p>LiteGreen</p>
    <p>(Das, et. al)</p>
  </div>
  <div class="page">
    <p>Questions &amp; Answers</p>
  </div>
  <div class="page">
    <p>Isnt This Just Your Network?</p>
    <p>Yes. We only have empirical evidence from our own deployment at Microsoft Research</p>
    <p>But we believe other nets qualitatively similar</p>
    <p>Functionally similiar: security scans, patches, etc.</p>
    <p>Related work (e.g., Nedevschi 2009)</p>
    <p>Anecdotes from other researchers</p>
    <p>Of course, we are in the process of verifying</p>
    <p>Let us know if youd be interested in testing on your network!</p>
  </div>
  <div class="page">
    <p>Isnt This Too Simple?</p>
    <p>No. Compared to other published approaches our is</p>
    <p>Less costly to deploy</p>
    <p>Easier to maintain</p>
    <p>We provide cost effective power savings</p>
    <p>The real question: why would you want to make things more complicated than necessary?</p>
  </div>
  <div class="page">
    <p>Why Not Built-In NIC Capabilities?</p>
    <p>Generality</p>
    <p>Old machines may not support patterns</p>
    <p>Complex network may require too many patterns</p>
    <p>Setting up pattern support may require</p>
    <p>Fiddling w/ BIOS, other system settings</p>
    <p>Non-uniform APIs</p>
    <p>Extensibility</p>
    <p>Wake on swipe, GPS coordinates</p>
    <p>Monitoring</p>
    <p>Can discard dedicated hardware w/ P2P anyway</p>
  </div>
  <div class="page">
    <p>Hasnt This Already Been Done?</p>
    <p>(answer on next two slides)</p>
  </div>
  <div class="page">
    <p>What Isnt Novel</p>
    <p>Suggesting a sleep proxy (1998)</p>
    <p>Comparing reaction policies (2009)</p>
  </div>
  <div class="page">
    <p>What is Novel</p>
    <p>Build on previous work</p>
    <p>Adopt policy Nedevschi 2009 predicted best</p>
    <p>Improved on it to support dynamic apps</p>
    <p>Focus on economic feasibility</p>
    <p>Deploy on operational corporate network</p>
    <p>Learn lessons</p>
    <p>Insomnia is actually biggest problem</p>
    <p>Economical solution isnt better reaction policies</p>
  </div>
</Presentation>
