<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Supporting Ranking and Clustering as Generalized Order-By and Group-By</p>
    <p>Chengkai Li (UIUC)</p>
    <p>joint work with Min Wang Lipyeow Lim Haixun Wang (IBM)</p>
    <p>Kevin Chang (UIUC)</p>
  </div>
  <div class="page">
    <p>Boolean database queries</p>
    <p>(Relational Algebra and System R papers)</p>
  </div>
  <div class="page">
    <p>Data Retrieval</p>
  </div>
  <div class="page">
    <p>Example: What Boolean queries provide</p>
    <p>SELECT *</p>
    <p>FROM Houses H</p>
    <p>WHERE 200K&lt;price&lt;400K AND #bedroom = 4</p>
    <p>query semantics results organization</p>
    <p>Boolean query</p>
    <p>hard constraints (True or False)</p>
    <p>a flat table  too many (few) answers</p>
  </div>
  <div class="page">
    <p>Example: What may be desirable</p>
    <p>&lt; 500K is more acceptable  but willing to pay more for big house  close to the lake is a plus  avoid locations near airport</p>
    <p>query semantics results organization</p>
    <p>Boolean query</p>
    <p>hard constraints (True or False)</p>
    <p>a flat table  too many (few) answers</p>
    <p>fuzzy retrieval</p>
    <p>soft constraints (preference,similarity, relevance,)</p>
    <p>a ranked list  a grouping of results  etc.</p>
  </div>
  <div class="page">
    <p>Retrieval of DATA: From Boolean query to fuzzy retrieval</p>
    <p>text</p>
    <p>dataretrieval engine</p>
    <p>search engine</p>
  </div>
  <div class="page">
    <p>Retrieval mechanisms: Learning from Web search</p>
    <p>Navigation Map</p>
    <p>Categorization</p>
    <p>Facets</p>
    <p>Clustering</p>
    <p>Ranking</p>
  </div>
  <div class="page">
    <p>Generalizing SQL constructs for data retrieval</p>
    <p>Group-By</p>
    <p>Order-By</p>
  </div>
  <div class="page">
    <p>From crispy ordering to fuzzy ranking</p>
    <p>Fuzzy ranking</p>
    <p>Order By</p>
    <p>Houses.size  4*Houses.price</p>
    <p>Limit</p>
    <p>by ranking function  combine matching criteria  order =&gt; desirability : top-k</p>
    <p>Crispy ordering</p>
    <p>Order By</p>
    <p>Houses.size, Houses.price</p>
    <p>by attribute values  equality of values  order  desirability</p>
  </div>
  <div class="page">
    <p>From crispy grouping to fuzzy clustering</p>
    <p>Fuzzy clustering</p>
    <p>Group By</p>
    <p>k-means(H.size, H.price)</p>
    <p>Into</p>
    <p>by distance function  proximity of values  number of clusters</p>
    <p>Crispy grouping</p>
    <p>Group By</p>
    <p>Houses.size, Houses.price</p>
    <p>by attribute values  equality partition  no limit on output size</p>
  </div>
  <div class="page">
    <p>Need for combining ranking with clustering  Clustering-only</p>
    <p>A group can be big too many answers problem persists</p>
    <p>How to compare things within each group?</p>
    <p>Ranking-only  Lack of global view</p>
    <p>top-k results may come from same underlying group (e.g., cheap and big houses come from a less nice area.)</p>
    <p>Different groups may not be comparable</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Concepts  generalize Group-By to fuzzy clustering, parallel to</p>
    <p>the generalization from Order-By to ranking</p>
    <p>integrate ranking with clustering in database queries</p>
    <p>Efficient processing framework  summary-based approach</p>
  </div>
  <div class="page">
    <p>Related works</p>
    <p>Clustering  not on dynamic query results  use summary (grid with buckets)</p>
    <p>(e.g., STING [WangYM97] WaveCluster [SheikholeslamiCZ98] )  Ranking (top-k) in DB: many instances (e.g., [LiCIS05])</p>
    <p>use summary (histogram) in top-k to range query translation [ ChaudhuriG99]</p>
    <p>Categorization of query results [ChakrabartiCH04]  different from clustering  no integration with ranking  focus on reducing navigation overhead, not processing</p>
    <p>Web search and IR (e.g., [ZamirE99] [LeuskiA00])</p>
  </div>
  <div class="page">
    <p>Integrate the two generalizations</p>
    <p>Boolean conditions</p>
    <p>Ranking Clustering</p>
    <p>?semantics evaluation</p>
  </div>
  <div class="page">
    <p>Query semantics: ClusterRank queries</p>
    <p>SELECT *</p>
    <p>FROM Houses</p>
    <p>WHERE area=Chicago</p>
    <p>GROUP BY longitude, latitude INTO 5</p>
    <p>ORDER BY size  4*price LIMIT 3</p>
    <p>ranking</p>
    <p>clusterin g</p>
    <p>Boolea n</p>
    <p>Semantics: order-within-groups Return the top k tuples within each group (cluster).</p>
  </div>
  <div class="page">
    <p>Several notes</p>
    <p>Non-deterministic semantics  clustering is non-deterministic by nature  sacrificing the crispiness of SQL queries  worthy for exploring the fuzziness in data retrieval?</p>
    <p>Language syntax isnt our focus  current SQL semantics: order-among-groups</p>
    <p>Select From WhereGroup By Order By(RankAgg[LiCI06])  OLAP function</p>
    <p>Clustering function  algorithm, distance measure hidden behind</p>
    <p>Other semantics  e.g., cluster the global top k</p>
  </div>
  <div class="page">
    <p>Query evaluation: Straightforward Materialize-Cluster-Sort approach</p>
    <p>SELECT *</p>
    <p>FROM Houses</p>
    <p>WHERE area=Chicago</p>
    <p>GROUP BY longitude, latitude INTO 5</p>
    <p>ORDER BY size  4*price LIMIT 3 sorting</p>
    <p>clusterin g</p>
    <p>Boolean</p>
  </div>
  <div class="page">
    <p>Query evaluation: Straightforward Materialize-Cluster-Sort approach</p>
    <p>sorting</p>
    <p>clusterin g</p>
    <p>Boolean</p>
    <p>Overkill:</p>
    <p>cluster and rank all,</p>
    <p>only top 10 in each cluster are requested</p>
    <p>Inefficient:  fully generate Boolean results  clustering large amount of results is</p>
    <p>expensive  sorting big group is costly</p>
  </div>
  <div class="page">
    <p>Query evaluation: Summary-driven approach</p>
    <p>use summary to cluster  use summary for pruning in ranking  use bitmap-index</p>
    <p>to construct query-dependant summary  to bring together Boolean, clustering, and ranking</p>
  </div>
  <div class="page">
    <p>Summary for clustering</p>
    <p>latitude</p>
    <p>K-means on original tuples</p>
    <p>weighted K-means on virtual tuples</p>
    <p>lo n</p>
    <p>g itu</p>
    <p>d e</p>
    <p>latitude</p>
    <p>g itu</p>
    <p>d e</p>
  </div>
  <div class="page">
    <p>Summary for ranking</p>
    <p>size 10 20 30 40</p>
    <p>-30</p>
    <p>-20</p>
    <p>-10</p>
    <p>-40</p>
    <p>ORDER BY size  4 *price LIMIT 3</p>
    <p>[ -40,10]</p>
    <p>- 4 * p</p>
    <p>ric e</p>
    <p>size 10 20 30 40</p>
    <p>-30</p>
    <p>-20</p>
    <p>-10</p>
    <p>(20,40] 1</p>
    <p>(10,30] 2</p>
    <p>(10,30] 1</p>
    <p>(0,20] 2</p>
    <p>(0,20] 1</p>
    <p>(0,20] 1</p>
    <p>- 4 * p</p>
    <p>ric e</p>
    <p>-40</p>
  </div>
  <div class="page">
    <p>Construct summary by bitmap-index &amp;</p>
    <p>-4*price[-40,-30]</p>
    <p>size(10,20]</p>
    <p>TID</p>
    <p>t1</p>
    <p>t2</p>
    <p>t3</p>
    <p>t4</p>
    <p>t5</p>
    <p>size 10 20 30 40</p>
    <p>-30</p>
    <p>-20</p>
    <p>-10</p>
    <p>t2 t5</p>
    <p>t1</p>
    <p>t4</p>
    <p>t3</p>
    <p>The advantages of using bitmap index:  Small  Bit operations (&amp;, |, ~, count) are fast  Easily integrate Boolean, clustering, and ranking</p>
    <p>- 4 * p</p>
    <p>ric e</p>
    <p>-40</p>
  </div>
  <div class="page">
    <p>Integrating Boolean, clustering, and ranking</p>
    <p>Vec(cluster1) 00101001</p>
    <p>Vec(cluster2) 00010110</p>
    <p>lo n</p>
    <p>g itu</p>
    <p>d e</p>
    <p>latitude</p>
    <p>ric e</p>
    <p>size 10 20 30 40</p>
    <p>Vec(area=chicago )00111111</p>
    <p>lo n</p>
    <p>g itu</p>
    <p>d e latitude</p>
    <p>lo n</p>
    <p>g itu</p>
    <p>d e</p>
    <p>latitude</p>
    <p>&amp; - 4</p>
    <p>*p ric</p>
    <p>e size</p>
    <p>- 4 *p</p>
    <p>ric e</p>
    <p>size 10 20 30 40</p>
    <p>&amp;</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>ClusterRank (summary-driven approach) vs. StraightFwd (materialize-cluster-rank)  Processing efficiency: ClusterRank &gt;&gt; StrightFwd  Clustering Quality: ClusterRank  StrightFwd</p>
    <p>synthetic data  various configuration parameters</p>
    <p>(#tuples, #clusters, #clustering attr, #ranking attr, #paritions per attr, k)</p>
  </div>
  <div class="page">
    <p>Efficiency</p>
    <p>t: #clusters 4M tuples, 5 clustering attr, 3 ranking attr, top 5</p>
    <p>s: #tuples 10 clusters, 5 clustering attr, 3 ranking attr, top 5</p>
  </div>
  <div class="page">
    <p>Clustering quality</p>
    <p>t: #clusters 4M tuples, 8 clustering attr</p>
    <p>s: #tuples 10 clusters, 3 clustering attr</p>
    <p>close(res_SF, res_CR): closeness of results from StraightFwd and ClusterRank</p>
    <p>close(res_SF, res_SF): closeness of results from different runs of StraightFwd</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Borrow innovative mechanisms from other areas to support data retrieval applications</p>
    <p>Ranking and clustering as generalized Order-By and Group-By, integrated in database queries</p>
    <p>Query semantics: ClusterRank queries</p>
    <p>Query evaluation: summary-driven approch vs. materializecluster-sort  evaluation efficiency: ClusterRank &gt;&gt; StraightFwd  clustering quality: ClusterRank  StraightFwd</p>
  </div>
  <div class="page">
    <p>Acknowledgement</p>
    <p>Rishi Rakesh Sinha: source code of bitmap index  Jiawei Han: discussions regarding presentation</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Alternative semantics?  global clustering / local ranking (focus of this paper)</p>
    <p>clustering: Boolean results</p>
    <p>ranking: local top k in each cluster</p>
    <p>local clustering / global ranking clustering: global top k</p>
    <p>ranking: Boolean results</p>
    <p>global clustering / global ranking clustering: Boolean results</p>
    <p>ranking: in each cluster, return those belonging to global top k</p>
    <p>rank the clusters? (by average of local top k?)</p>
  </div>
  <div class="page">
    <p>Join queries</p>
    <p>Star-schema</p>
    <p>fact table, dimension tables, key and foreign key  Bitmap join-index</p>
    <p>index the fact table by the attributes in dimension tables</p>
  </div>
</Presentation>
