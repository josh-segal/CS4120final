<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automated Attack Discovery in Data Plane Systems</p>
    <p>Qiao Kang, Jiarong Xing, Ang Chen Rice University</p>
  </div>
  <div class="page">
    <p>A7acks to emerging data plane systems  Network data planes are performing more funcCons today  Data plane systems: Enabled by programmable data planes  A general class of a7acks to many of them</p>
    <p>Motivation: A new class of attacks</p>
    <p>Link failure detector</p>
    <p>Load balancer</p>
    <p>Network policy enforcement</p>
    <p>Covert channel miCgaCon</p>
  </div>
  <div class="page">
    <p>New trend: Programmable data planes</p>
    <p>TradiConal data planes: Fixed for rouCng  Programmable data planes: Reconfigurable pipelines  Using high-level languages like P4  Support sophisCcated operaCons like arithmeCc</p>
    <p>Ingress { // ACL if (ACL[pkt] != Allow) drop();</p>
    <p>// Rou/ng forward_to_port();</p>
    <p>// Traffic Engineering dst = least_uCl_link()</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Data plane systems: High performance</p>
    <p>Data plane systems have high performance.  Example: Link failure detection</p>
    <p>Border Gateway Protocol (BGP): Periodic probing messages --&gt; O(minutes)  Blink [NSDI19]: Monitors data traffic --&gt; O(seconds)</p>
    <p>Packets Outputs~ Tbps traffic</p>
    <p>Link failure detector</p>
    <p>Load balancer</p>
    <p>Network policy enforcement</p>
    <p>Covert channel miCgaCon</p>
  </div>
  <div class="page">
    <p>Open direction: Security risks</p>
    <p>Data plane systems react to network packets  Anyone can inject malicious packets to cause problematic outputs</p>
    <p>Link failure detector</p>
    <p>Load balancer</p>
    <p>Network policy enforcement</p>
    <p>Covert channel mitigation</p>
    <p>Malicious packets</p>
    <p>Problematic outputs</p>
  </div>
  <div class="page">
    <p>Example #1: AEacking a load balancer</p>
    <p>If (TCP.sport % 2) Forward (0)</p>
    <p>Else Forward (1)</p>
    <p>Expected behavior: Evenly splitting traffic  Malicious traffic: TCP source port numbers = 1,3,5,7  Flipped behavior: Load imbalance</p>
    <p>Receiver1</p>
    <p>Receiver2</p>
    <p>Flipped behavior</p>
    <p>Path 0 Path 1</p>
    <p>Expected behavior</p>
    <p>Path 0 Path 1</p>
  </div>
  <div class="page">
    <p>Example #2: Attacking Blink</p>
    <p>// monitor TCP retrans If (retrans &gt; N) Reroute()</p>
    <p>Else NormalForward()</p>
    <p>Expected behavior: Only rerouCng when link fails (very rare)  Malicious traffic: Persistent TCP retransmissions  Flipped behavior: Persistent re-rouCng and rouCng chaos</p>
    <p>Destination (e.g., Google)</p>
    <p>Blink</p>
    <p>NormalForward</p>
    <p>Reroute Expected behavior</p>
    <p>Path 0 Path 1</p>
    <p>Flipped behavior</p>
    <p>Path 0 Path 1</p>
  </div>
  <div class="page">
    <p>A general class of attacks</p>
    <p>Expected behavior</p>
    <p>Flipped behavior</p>
    <p>Link failure detector</p>
    <p>Load balancer</p>
    <p>Network policy enforcement</p>
    <p>Covert channel miCgaCon</p>
    <p>Applies to many data plane systems!  Different systems are vulnerable to different malicious patterns</p>
    <p>Malicious traffic paDerns</p>
  </div>
  <div class="page">
    <p>Research question</p>
    <p>Given a data plane system, can we discover all malicious traffic patterns and synthesize defenses in an automated manner?</p>
  </div>
  <div class="page">
    <p>A 3-step approach:   Establish expected behaviors   Generate a7acks to flip the expected behaviors   Synthesize runCme monitors</p>
    <p>Our Approach</p>
    <p>Automated</p>
    <p>If (TCP.sport % 2) Forward (0)</p>
    <p>Else Forward (1)</p>
    <p>If (TCP.sport % 2) Monitor1() Forward (0)</p>
    <p>Else Monitor2() Forward (1)</p>
    <p>Path 0 Path 1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoCvaCon:  A new class of a7acks to data plane systems</p>
    <p>Our system: Automated a7ack discovery and defense synthesis  System overview  Challenge #1: Establish expected behaviors  Challenge #2: IdenCfying equivalent classes  Challenge #3: Handling stateful programs</p>
    <p>Preliminary results  Ongoing work and Conclusion</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation:  A new class of attacks to data plane systems</p>
    <p>Our system: Automated attack discovery and defense synthesis  System overview  Challenge #1: Establish expected behaviors  Challenge #2: Identifying equivalent classes  Challenge #3: Handling stateful programs</p>
    <p>Preliminary results  Ongoing work and Conclusion</p>
  </div>
  <div class="page">
    <p>Challenge #1: Establishing expected behaviors</p>
    <p>Problem: How to quanCfy the expected behaviors?  Nave soluCon: Feed random traffic traces and observe its outputs  Might not be comprehensive</p>
    <p>Proposed soluCon: ProbabilisCc Symbolic ExecuCon (PSE)  An advanced version of Symbolic ExecuCon 13</p>
    <p>If (TCP.sport % 2) Forward (0)</p>
    <p>Else Forward (1)</p>
    <p>Path 0 Path 1</p>
  </div>
  <div class="page">
    <p>Probabilistic Symbolic Execution</p>
    <p>ProbabilisCc Symbolic ExecuCon (PSE)  Explore execuCon paths with per-path probabiliCes  Model CounCng: number of soluCons  Packet headers: Uniform distribuCon</p>
    <p>If</p>
    <p>Forward (1)</p>
    <p>Entry:</p>
    <p>Forward (0)</p>
    <p>Else</p>
    <p>Pr(If)=0.5 Pr(Else)=0.5</p>
    <p>If (TCP.sport % 2) Forward (0)</p>
    <p>Else Forward (1)</p>
    <p>Path 0 Path 1</p>
  </div>
  <div class="page">
    <p>Challenge #2: Identifying Equivalence Classes</p>
    <p>Problem: Number of paths might be very large  Hard to understand the expected behaviors.</p>
    <p>Proposed SoluCon: Equivalence Classes (ECs)  EC = a group of equivalent paths</p>
    <p>Pr(NormalFowarding)=0.9 Pr(ReRouting)=0.1</p>
    <p>Per-EC probabilities</p>
    <p>P1 0.1</p>
    <p>P2 0.02</p>
    <p>P3 0.15</p>
    <p>P4 0.3</p>
    <p>P5 0.03</p>
    <p>P6 0.07</p>
    <p>Per-path probabiliCes</p>
  </div>
  <div class="page">
    <p>Challenge #3: Handling stateful programs</p>
    <p>Problem: Data plane systems can be stateful  Need a sequence of N packets to trigger a certain EC (e.g., Blink)</p>
    <p>Nave solution: Explore all possible paths for N packets  Poor scalability</p>
    <p>Proposed solution: Directed Symbolic Execution (DSE)  Heuristic search: Prioritize the closest path 16</p>
    <p>Packet 1 Packet 2 ...... EC1EC1 EC2</p>
    <p>EC1 EC2</p>
    <p>EC1Packet</p>
    <p>TCP.sport % 1 == 0</p>
    <p>(x != 1 &amp; ^(z &gt; c)) &amp; (y + z &lt;= 3 ) &amp; ((!x) ^ (y &lt;= 0)) ...</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoCvaCon:  A new class of a7acks to data plane systems</p>
    <p>Our system: Automated a7ack discovery and defense synthesis  System overview  Challenge #1: Establish expected behaviors  Challenge #2: IdenCfying equivalent classes  Challenge #3: Handling stateful programs</p>
    <p>Preliminary results  Ongoing work and Conclusion</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>Prototype implementaCon  Symbolic execuCon engine: P4pktgen [SOSR18]  Model Counter: Python constraint library</p>
    <p>Experimental setup  P4 load balancer  Mininet simulator: 1 Bmv2 P4 switch + 3 hosts</p>
    <p>If (TCP.sport % 2) Forward (0)</p>
    <p>Else Forward (1)</p>
    <p>Receiver1</p>
    <p>Receiver2</p>
    <p>Load balancerSender</p>
  </div>
  <div class="page">
    <p>Generated aEack and defense</p>
    <p>EC 1 if (sport%2)</p>
    <p>EC 2 else</p>
    <p>Generated a7ack: Odd TCP source port numbers  Generated defense: Per-EC packet counters + periodic tests</p>
    <p>Counter1 ++</p>
    <p>Counter2 ++</p>
    <p>KS_test(Counter1, Counter2)</p>
    <p>Receiver1</p>
    <p>Receiver2</p>
    <p>Load balancer Sender</p>
    <p>EC1 EC1</p>
    <p>EC1 EC1</p>
  </div>
  <div class="page">
    <p>Link load results</p>
    <p>Normal traffic: 0~15s  Attack starts at 15s  Attack detected by the patched program</p>
    <p>Alarm raised!</p>
  </div>
  <div class="page">
    <p>Ongoing work  How to handle input packets that follow non-uniform distributions?  Distribution-aware model counting</p>
    <p>How to group execution paths to ECs?  Too fined-grained: too many ECs  Too coarse-grained: lose useful information</p>
    <p>How to deal with switch resource constraints?  Adding monitors consumes switch resources  Compress monitors using sketches</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>MoCvaCon:  Data plane systems are emerging  Vulnerable to a new class of a7acks</p>
    <p>Our system: Automated aDack discovery  1) Obtain expected behaviors  2) Negate expected behaviors  3) Synthesis runCme monitors</p>
    <p>IniCal results:   A7ack a simple 2-way load balancer   Detected by runCme monitors</p>
    <p>Thank you! 22</p>
  </div>
</Presentation>
