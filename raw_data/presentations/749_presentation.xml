<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Evaluation of Per-Chip Non-Uniform Frequency Scaling on Multicores</p>
    <p>Xiao Zhang Kai Shen</p>
    <p>Sandhya Dwarkadas Rongrong Zhong</p>
    <p>USENIX ATC 2010 06/25/2010</p>
  </div>
  <div class="page">
    <p>Dynamic Voltage/Frequency Scaling (DVFS) on Multicore Chips</p>
    <p>Efficient for memory intensive applications  Significant CPU power savings with no (or little)</p>
    <p>performance loss</p>
    <p>Current constraint: a single voltage setting</p>
    <p>applies to all sibling cores  E.g., Intel and AMD processors  Limits power savings opportunities if memory intensive</p>
    <p>and non-intensive applications run on the same chip</p>
  </div>
  <div class="page">
    <p>Targeted Multicore Platforms</p>
    <p>Multichip machines have opportunities for perchip non-uniform voltage/frequency settings</p>
    <p>Symmetric Multiprocessing (SMP) based multichip multicore machines</p>
    <p>Core0 Core1</p>
    <p>Memory Bus</p>
    <p>Unified DRAM</p>
    <p>Core2 Core3</p>
    <p>Chip-0 Chip-1</p>
  </div>
  <div class="page">
    <p>Outline  A smart scheduling to facilitate per-chip</p>
    <p>frequency scaling for power savings (with competitive/better performance)</p>
    <p>Frequency-to-performance model for flexible power management</p>
  </div>
  <div class="page">
    <p>Similarity Grouping Scheduling  Group applications with similar cache miss</p>
    <p>ratio on the same chip  Separate high and low miss ratio applications on</p>
    <p>different chips  High-miss-ratio chip running at low frequency while</p>
    <p>low-miss-ratio chip running at high frequency</p>
    <p>Additional benefits on addressing resource contention  Mitigate cache thrashing effect  Avoid over-saturating memory bandwidth</p>
  </div>
  <div class="page">
    <p>Evaluation Setup  Platform</p>
    <p>2-chip Intel 3GHz WoodCrest processor (two cores per chip, sharing 4MB L2 cache) SMP running Linux-2.6.18</p>
    <p>Frequency at 3 / 2.67 / 2.33 / 2 GHz via writing Intelspecific IA32_PERF_CTL registers</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>Benchmarks  12 SPECCPU 2000 applications and 2 server</p>
    <p>style applications divided into 5 test sets</p>
    <p>Similarity Grouping Chip-0 (high miss ratio) Chip-1 (low miss ratio) Test #1 {equake, swim} {parser, bzip} Test #2 {mcf, applu} {art, twolf} Test #3 {wupwise, mgrid} {mesa, gzip} Test #4 {mcf, swim, equake,</p>
    <p>applu, wupwise, mgrid} {parser, gzip, bzip, mesa, twolf, art}</p>
    <p>Test #5 Two SPECjbb threads Two TPC-H threads</p>
  </div>
  <div class="page">
    <p>Static Frequency Scaling Avg. 25% reduction in cache misses</p>
  </div>
  <div class="page">
    <p>Power Efficiency (Performance per Watt)</p>
  </div>
  <div class="page">
    <p>Frequency-to-Performance Model  Objective: explore power savings with</p>
    <p>bounded performance loss  Assumptions</p>
    <p>An applications performance is linearly determined by cache and memory access latencies</p>
    <p>Frequency scaling only affects on-chip accesses  Miss ratio does not vary across frequencies</p>
    <p>Normalized performance at frequency f = T(F) / T(f)</p>
  </div>
  <div class="page">
    <p>Model Accuracy</p>
  </div>
  <div class="page">
    <p>Model-based Dynamic Frequency Setting</p>
  </div>
  <div class="page">
    <p>Thermal Reduction over Default System</p>
  </div>
  <div class="page">
    <p>Summary  Similarity grouping Improves performance due</p>
    <p>to reduced resource contention and facilitates per-chip frequency scaling for power savings</p>
    <p>Guided by a simple frequency-performance</p>
    <p>model, we achieve ~20 watts power savings and ~3 Celsius degrees CPU thermal reduction with bounded performance loss</p>
  </div>
</Presentation>
