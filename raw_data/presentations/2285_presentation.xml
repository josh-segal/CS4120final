<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RBF: A New Storage Structure for SpaceEfficient Queries for Multidimensional</p>
    <p>Metadata in OSS</p>
    <p>Yu Hua1, Dan Feng1, Hong Jiang2, Lei Tian1 1School of Computer, Huazhong University of Science and</p>
    <p>Technology, China. 2Department of Computer, University of Nebraska Lincoln,</p>
    <p>USA.</p>
  </div>
  <div class="page">
    <p>Report 2</p>
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivations</p>
    <p>Approach</p>
    <p>Current status</p>
    <p>Next step</p>
  </div>
  <div class="page">
    <p>Report 3</p>
    <p>Introduction: OSS</p>
    <p>Object-based Storage Systems (OSS):</p>
    <p>Intelligent and self-managed schemes that delegate low-level management activities to storage devices;</p>
    <p>Provide new functionalities, such as greater scalability, security, and dynamic reconfiguration.</p>
  </div>
  <div class="page">
    <p>Report 4</p>
    <p>Introduction: Object &amp; Attributes</p>
    <p>An object consists of data, user-accessible attributes and device-managed metadata;</p>
    <p>Metadata is responsible for mapping data structures, such as files and directories, to blocks on storage devices.</p>
    <p>Such metadata usually contains multidimensional information for representing the mapping relationship with objects that have both physical and logical attributes:  For example, access time, data size, request amount,</p>
    <p>access pattern, and QoS agreement.</p>
  </div>
  <div class="page">
    <p>Report 5</p>
    <p>Introduction: Point &amp; Range Query in OSS</p>
    <p>Point query: determines whether a given object is a member of a data set.</p>
    <p>For example, a request of point query for multidimensional metadata may wish to know whether an object with ``ID=xyz&quot; and ``data size=100GB attributes is a member of the current storage system.</p>
    <p>Range query: obtains all objects whose attribute values exist within the ranges of a query request.</p>
    <p>For example, a request of range query for multidimensional metadata may wish to know all the objects having data size&gt;150GB and access time&lt;20:00 attributes.</p>
  </div>
  <div class="page">
    <p>Report 6</p>
    <p>Motivations</p>
    <p>Substantial storage space has to be used to store multidimensional metadata, along with highly complicated operations of querying multidimensional metadata, due to complex data organization structures.</p>
    <p>Our goal in this study:  Space savings;  Achieve efficient point &amp; range query for</p>
    <p>multidimensional attributes;</p>
  </div>
  <div class="page">
    <p>Report 7</p>
    <p>Approach</p>
    <p>We propose a new space-efficient storage structure, called R-tree with Bloom Filters (RBF), to store multidimensional metadata and achieve point and range queries with low operational complexity.</p>
    <p>The basic idea of our RBF is to  expand the classical R-tree to incorporate space</p>
    <p>efficient Bloom filters in R-tree nodes, and  maintain multidimensional range information to</p>
    <p>achieve space efficiency.</p>
  </div>
  <div class="page">
    <p>Report 8</p>
    <p>R-tree &amp; Bloom filter  An R-tree can efficiently support multidimensional range queries by splitting</p>
    <p>data space with hierarchically nested bounding boxes, which can contain several data entities within certain ranges.</p>
    <p>Unfortunately, an R-tree cannot efficiently support point query because membership query can be executed only in the leaf nodes.</p>
    <p>Bloom filter is a space-efficient data structure and can support point query very well.</p>
    <p>A Bloom filter can represent a set of items as a bit array using several independent hash functions and support the membership queries.</p>
    <p>This compact representation is a tradeoff as it achieves high space efficiency at the expense of a small probability of false positive in the membership query.</p>
    <p>We combine R-tree and Bloom filter into our RBF by adding a spaceefficient Bloom filter in each R-tree node to support point query with O(1) time complexity.</p>
  </div>
  <div class="page">
    <p>Report 9</p>
    <p>Current Status</p>
    <p>We examine the storage structure and query techniques for multidimensional metadata management in the context of a Petabyte-scale storage system being designed and developed at the Huazhong University of Science and Technology (HUST) to handle both general-purpose and scientific computing workloads.</p>
    <p>Our architecture will eventually consist of:  tens of metadata servers (MDSs);  thousands of object-based storage devices (OSDs);  allow for storing mass data for supporting Geographic</p>
    <p>Information System (GIS) applications.</p>
  </div>
  <div class="page">
    <p>Report 10</p>
    <p>Current Status  We have constructed a real mass storage system with a 10-terabyte</p>
    <p>capacity and implemented partial functions of point and range queries based on the RBF structure.</p>
    <p>Preliminary Results:</p>
  </div>
  <div class="page">
    <p>Report 11</p>
    <p>Next step</p>
    <p>We have also been exploring the load-balancing advantage of RBF to improve the scalability and reliability of our storage system.</p>
    <p>The objective of load balance in RBF is to make the nodes of the same layer represent approximately the same number of objects. Load balancing can efficiently decrease the false positive probability of Bloom filters in RBF nodes.</p>
    <p>In the near future, we will extend our storage structure to take into account the queries for ``hot spots&quot; and a more accurate lookup scheme.</p>
    <p>We shall evaluate the performance on our real Petabytescale storage system.</p>
  </div>
</Presentation>
