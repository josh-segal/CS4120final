<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Steal this Movie Automatically Bypassing DRM</p>
    <p>Protection in Streaming Media Services</p>
    <p>Ruoyu Fish Wang12, Yan Shoshitaishvili1,</p>
    <p>Christopher Kruegel1, Giovanni Vigna1</p>
  </div>
  <div class="page">
    <p>Digital Rights Management</p>
  </div>
  <div class="page">
    <p>DRM Mechanisms</p>
    <p>How DRM works</p>
    <p>Encrypted Information</p>
    <p>Flow</p>
    <p>Encrypted Media Stream</p>
    <p>Demultiplexing Decrypted Media Stream</p>
    <p>Decrypt</p>
    <p>Raw Frames</p>
    <p>Decode</p>
    <p>Playback</p>
  </div>
  <div class="page">
    <p>DRM bypasses</p>
    <p>What for?</p>
    <p>Solution-specific  DeCSS - DVD Jon</p>
    <p>Despotify</p>
    <p>HDCP master key leaking</p>
    <p>Analog loophole</p>
  </div>
  <div class="page">
    <p>DRM Mechanisms</p>
    <p>Encrypted Information</p>
    <p>Flow</p>
    <p>Encrypted Media Stream</p>
    <p>Demultiplexing Decrypted Media Stream</p>
    <p>Decrypt</p>
    <p>Raw Frames</p>
    <p>Decode</p>
    <p>Playback</p>
    <p>How DRM works</p>
    <p>Solutionspecific attacks</p>
    <p>Analog loophole 1</p>
    <p>Analog loophole 2</p>
    <p>MovieStealer</p>
  </div>
  <div class="page">
    <p>Automatic attacking</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Complexity</p>
    <p>Performance</p>
    <p>Generality</p>
  </div>
  <div class="page">
    <p>Intuitions</p>
    <p>Encrypted</p>
    <p>Buffer</p>
    <p>Decrypted</p>
    <p>Buffer</p>
    <p>Decryption</p>
    <p>Final goal: Identify the decrypted stream and dump it!</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>MovieStealer design &amp; optimizations</p>
    <p>Experimental results</p>
    <p>Countermeasures</p>
    <p>Ethics and legality</p>
  </div>
  <div class="page">
    <p>MovieStealer Design</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>Goal: find the decrypted stream!</p>
    <p>Loop detection</p>
    <p>Buffer detection</p>
    <p>Data-paths</p>
    <p>Statistical analysis</p>
    <p>Dumping &amp; rebuilding</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>Goal: find the decrypted stream!</p>
    <p>Loop detection</p>
    <p>Buffer detection</p>
    <p>Data-paths</p>
    <p>Statistical analysis</p>
    <p>Dumping &amp; rebuilding 2013/8/23 Usenix Security 2013 12</p>
  </div>
  <div class="page">
    <p>Loop detection (1)</p>
    <p>Based on LoopProf*</p>
    <p>BasicBlock B</p>
    <p>BasicBlock C</p>
    <p>BasicBlock D</p>
    <p>BasicBlock B</p>
    <p>BasicBlock C</p>
    <p>BasicBlock D</p>
    <p>BasicBlock A</p>
    <p>BasicBlock B</p>
    <p>BasicBlock C</p>
    <p>BasicBlock D</p>
    <p>*LoopProf: Dynamic Techniques for Loop Detection and Profiling, T Moseley, et al.</p>
  </div>
  <div class="page">
    <p>Loop detection (2)</p>
    <p>Handling unrolled loops BasicBlock B</p>
    <p>BasicBlock C</p>
    <p>BasicBlock D</p>
    <p>BasicBlock E Unrolled</p>
    <p>BBLs accessing the same buffer</p>
    <p>with similar patterns</p>
  </div>
  <div class="page">
    <p>Loop and call-path</p>
    <p>void crypto_loop(const char *key, void *in, void *out, int len);</p>
    <p>void encrypt() { crypto_loop(&quot;key&quot;, dec, enc, len);</p>
    <p>}</p>
    <p>void decrypt() { crypto_loop(&quot;key&quot;, enc, dec, len);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Approach review</p>
    <p>Goal: find the decrypted stream!</p>
    <p>Loop detection</p>
    <p>Buffer detection</p>
    <p>Data-paths</p>
    <p>Statistical analysis</p>
    <p>Dumping &amp; rebuilding 2013/8/23 Usenix Security 2013 16</p>
  </div>
  <div class="page">
    <p>Buffer detection</p>
    <p>Reason about buffers based on access patterns  Consecutive bytes</p>
    <p>Inconsecutive blocks</p>
    <p>Composite buffer</p>
  </div>
  <div class="page">
    <p>Approach review</p>
    <p>Goal: find the decrypted stream!</p>
    <p>Loop detection</p>
    <p>Buffer detection</p>
    <p>Data-paths</p>
    <p>Statistical analysis</p>
    <p>Dumping &amp; rebuilding 2013/8/23 Usenix Security 2013 18</p>
  </div>
  <div class="page">
    <p>Data-paths</p>
    <p>Identify paths through a loop which modify the input data to output data</p>
    <p>A sensible data-path, find it!</p>
    <p>Buffer_in A Buffer_in B</p>
    <p>Loop</p>
    <p>Buffer_out</p>
  </div>
  <div class="page">
    <p>Approach review</p>
    <p>Goal: find the decrypted stream!</p>
    <p>Loop detection</p>
    <p>Buffer detection</p>
    <p>Data-paths</p>
    <p>Statistical analysis</p>
    <p>Dumping &amp; rebuilding 2013/8/23 Usenix Security 2013 20</p>
    <p>L1 L2 L3 L4 L5 L6 L7 L8 L9</p>
    <p>Randomness</p>
    <p>In Out</p>
  </div>
  <div class="page">
    <p>Statistical analysis (1)</p>
    <p>Cipher-text indistinguishability  Basic requirement for secure cryptosystems</p>
    <p>Entropy should be pretty high, as data is from Internet</p>
  </div>
  <div class="page">
    <p>Statistical analysis (2)</p>
    <p>Stage Input Output</p>
    <p>Entropy Randomness Entropy Randomness</p>
    <p>Download</p>
    <p>Decrypt</p>
    <p>Decode</p>
  </div>
  <div class="page">
    <p>Approach review</p>
    <p>Goal: find the decrypted stream!</p>
    <p>Loop detection</p>
    <p>Buffer detection</p>
    <p>Data-paths</p>
    <p>Statistical analysis</p>
    <p>Dumping &amp; rebuilding 2013/8/23 Usenix Security 2013 23</p>
  </div>
  <div class="page">
    <p>Dumping and reconstruction</p>
    <p>* Intentionally omitted</p>
  </div>
  <div class="page">
    <p>Wait for a few minutes</p>
    <p>Make MovieStealer begin analysis</p>
    <p>Start playing the video</p>
    <p>Workflow</p>
    <p>Harvest</p>
  </div>
  <div class="page">
    <p>MovieStealer Optimizations</p>
  </div>
  <div class="page">
    <p>Problem of the basic approach</p>
    <p>Too much overhead!</p>
    <p>Wont sniff enough data</p>
    <p>Media players dont function normally</p>
    <p>Some media players check the performance</p>
    <p>Might get caught by checking systems of DRM</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>Goal: minimize overheads!</p>
    <p>Improved loop selection</p>
    <p>Efficient loop analysis</p>
    <p>On-Demand instrumentation</p>
    <p>Execution frequency</p>
    <p>Instruction analysis</p>
    <p>Bandwidth filtering</p>
    <p>Copying optimizations</p>
    <p>Callstack key</p>
    <p>on_enter</p>
    <p>callstack_key ^= func_addr</p>
    <p>on_exit</p>
    <p>callstack_key ^= func_addr</p>
  </div>
  <div class="page">
    <p>Callstack key</p>
    <p>on_enter</p>
    <p>callstack_key ^= func_addr</p>
    <p>on_exit</p>
    <p>callstack_key ^= func_addr</p>
    <p>void crypto_loop(const char *key, void *in, void *out, int len);</p>
    <p>void encrypt() {</p>
    <p>crypto_loop(&quot;key&quot;, dec, enc, len);</p>
    <p>}</p>
    <p>void decrypt() {</p>
    <p>crypto_loop(&quot;key&quot;, enc, dec, len);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Dynamic binary instrumentation (DBI)  Intel PIN framework</p>
    <p>Under Windows 7 32-bit</p>
    <p>Testing  A common workstation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>GnuPG for testing optimizations</p>
    <p>Three DRM platforms  Microsoft PlayReady (Netflix)</p>
    <p>Adobe RTMPE (Hulu and Amazon Video)</p>
    <p>Spotify's music protection</p>
  </div>
  <div class="page">
    <p>Results - GPG</p>
    <p>All enabled All but callstack key</p>
    <p>Only instruction analysis</p>
    <p>Only bandwidth filtering</p>
    <p>Only execution frequency</p>
    <p>Seconds Elapsed</p>
    <p>Optimizations Loops Instrumented Seconds Elapsed</p>
    <p>Only execution frequency 40 3480 (112x)</p>
    <p>Only bandwidth filtering 35 180 (5.8x)</p>
    <p>Only instruction analysis 10 49 (1.58x)</p>
    <p>All but callstack key 6 47 (1.51x)</p>
    <p>All enabled 7 31</p>
  </div>
  <div class="page">
    <p>Results - DRM</p>
    <p>Platform Protection Loops</p>
    <p>Instrumented Loops Traced</p>
    <p>Buffers Identified</p>
    <p>Seconds Elapsed*</p>
    <p>Netflix Dynamic code 2274 58 80 110</p>
    <p>Hulu - 1529 46 14 281</p>
    <p>Amazon Video</p>
    <p>- 1258 35 6 146</p>
    <p>Spotify Packing and self-checking</p>
    <p>* seconds elapsed before MovieStealer breaks the DRM protection</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
    <p>Attack the instrumentation  Anti-debugging</p>
    <p>Attack the loop detection  VMing those loops</p>
    <p>Attack the buffer detection  Non-consecutive buffer layouts</p>
    <p>Anti-piracy  Watermarking</p>
  </div>
  <div class="page">
    <p>Ethics and Legality</p>
  </div>
  <div class="page">
    <p>Ethics</p>
    <p>Responsible disclosure  Contacted Microsoft, Spotify, Adobe, Amazon, Netflix,</p>
    <p>and Hulu</p>
    <p>Microsoft, Spotify, and Adobe responded  Tested MovieStealer</p>
    <p>Confirmed DRM bypass</p>
    <p>Provided comments and encouraged publication</p>
    <p>Some details omitted (e.g. reconstruction)</p>
    <p>No tool/source release</p>
  </div>
  <div class="page">
    <p>Legality</p>
    <p>We believe this work to be legal under DMCA  Consulted with UC counsel and the EFF</p>
    <p>Thank you all</p>
  </div>
  <div class="page">
    <p>Acknowledgement</p>
    <p>Thanks for support from Microsoft, Adobe, and Spotify</p>
    <p>Thanks Kevin Borgolte, Yanick Fratantonio, Christian Kreibich, and Thorsten Holz for presentation advice</p>
  </div>
  <div class="page">
    <p>Contact info</p>
    <p>Send us an email</p>
    <p>fish@cs.ucsb.edu, yans@cs.ucsb.edu,</p>
    <p>chris@cs.ucsb.edu, vigna@cs.ucsb.edu</p>
  </div>
  <div class="page">
    <p>Question time</p>
    <p>Questions?</p>
  </div>
</Presentation>
