<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DR. CHECKER A Soundy Analysis for Linux Kernel Drivers</p>
    <p>Aravind Machiry, Chad Spensky, Jake Corina, Nick Stephens, Christopher Kruegel, and Giovanni Vigna</p>
    <p>University of California, Santa Barbara</p>
    <p>USENIX Security 2017</p>
    <p>seclab THE COMPUTER SECURITY GROUP AT UC SANTA BARBARA</p>
  </div>
  <div class="page">
    <p>First, a story</p>
  </div>
  <div class="page">
    <p>First, a story</p>
  </div>
  <div class="page">
    <p>First, a story</p>
    <p>$ mkdir driver_checker</p>
  </div>
  <div class="page">
    <p>First, a story</p>
    <p>$ mkdir dr_checker</p>
  </div>
  <div class="page">
    <p>First, a story</p>
  </div>
  <div class="page">
    <p>Why Drivers?</p>
  </div>
  <div class="page">
    <p>$ ls linux</p>
    <p>Why Drivers?</p>
    <p>/arch /block /certs /crypto</p>
    <p>/drivers /firmware /fs</p>
    <p>/include /virt/init</p>
    <p>/tools /sound /security/scripts</p>
    <p>/samples</p>
    <p>/net /mm /lib</p>
    <p>/kernel /ipc</p>
    <p>/usr</p>
    <p>$</p>
  </div>
  <div class="page">
    <p>$ ls linux</p>
    <p>Why Drivers?</p>
    <p>/arch /block /certs /crypto</p>
    <p>/drivers /firmware /fs</p>
    <p>/include /virt/init</p>
    <p>/tools /sound /security/scripts</p>
    <p>/samples</p>
    <p>/net /mm /lib</p>
    <p>/kernel /ipc</p>
    <p>/usr</p>
    <p>$</p>
  </div>
  <div class="page">
    <p>$ ls linux</p>
    <p>Why Drivers?</p>
    <p>/arch /block /certs /crypto</p>
    <p>/drivers /firmware /fs</p>
    <p>/include /virt/init</p>
    <p>/tools /sound /security/scripts</p>
    <p>/samples</p>
    <p>/net /mm /lib</p>
    <p>/kernel /ipc</p>
    <p>/usr</p>
    <p>find bugs $</p>
  </div>
  <div class="page">
    <p>Why Drivers?</p>
    <p>CVE - Common Vulnerability and Exposure</p>
  </div>
  <div class="page">
    <p>Why Drivers?</p>
    <p>Drivers 85%</p>
    <p>Bugs in Windows XP (2003)</p>
    <p>CVE - Common Vulnerability and Exposure</p>
  </div>
  <div class="page">
    <p>Why Drivers?</p>
    <p>Drivers 85%</p>
    <p>Bugs in Windows XP (2003)</p>
    <p>Drivers 28%</p>
    <p>Linux Kernel CVEs (2016-2017)</p>
    <p>CVE - Common Vulnerability and Exposure</p>
  </div>
  <div class="page">
    <p>Why Drivers?</p>
    <p>Drivers 85%</p>
    <p>Bugs in Windows XP (2003)</p>
    <p>Drivers 28%</p>
    <p>Linux Kernel CVEs (2016-2017)</p>
    <p>Drivers 85%</p>
    <p>Reported bugs in Android (2016)</p>
    <p>CVE - Common Vulnerability and Exposure</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Only analyze the drivers!</p>
  </div>
  <div class="page">
    <p>Program Analysis for Bug Finding</p>
  </div>
  <div class="page">
    <p>Program Analysis for Bug Finding</p>
    <p>Points-to Analysis: Determines all storage locations that a pointer can point to</p>
    <p>Example bug: Kernel code pointer to user-controlled memory</p>
  </div>
  <div class="page">
    <p>Program Analysis for Bug Finding</p>
    <p>Points-to Analysis: Determines all storage locations that a pointer can point to</p>
    <p>Example bug: Kernel code pointer to user-controlled memory</p>
    <p>Taint Analysis: Determines all of the locations that are affected by usersupplied (tainted) data</p>
    <p>Example bug: User provided data used as length in copy_from_user()</p>
  </div>
  <div class="page">
    <p>Program Analysis on Kernel Code</p>
    <p>Pointers Everywhere!</p>
    <p>State explosion</p>
    <p>Inter-procedural calls to core functions</p>
    <p>State explosion</p>
  </div>
  <div class="page">
    <p>Precision vs. Soundness</p>
    <p>Precise Sound</p>
  </div>
  <div class="page">
    <p>Precision vs. Soundness</p>
    <p>Most of the things reported are true</p>
    <p>True</p>
    <p>True True</p>
    <p>True True</p>
    <p>True</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>Precise Sound</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
  </div>
  <div class="page">
    <p>Precision vs. Soundness</p>
    <p>Everything that is true is reportedMost of the things reported are true</p>
    <p>True</p>
    <p>True True</p>
    <p>True True</p>
    <p>True</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>Precise Sound</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
  </div>
  <div class="page">
    <p>Soundiness</p>
    <p>Violate soundness to achieve higher precision and practical computational constraints</p>
    <p>True</p>
    <p>True True</p>
    <p>True True</p>
    <p>True</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>Precise</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>Sound</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
  </div>
  <div class="page">
    <p>Soundiness</p>
    <p>Violate soundness to achieve higher precision and practical computational constraints</p>
    <p>True</p>
    <p>True True</p>
    <p>True True</p>
    <p>True</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>Precise</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>Sound</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>False</p>
    <p>True</p>
    <p>True</p>
    <p>True True</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>True</p>
    <p>False</p>
    <p>Soundy</p>
    <p>True False</p>
    <p>False</p>
    <p>False</p>
    <p>False False False</p>
    <p>False</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Assumptions</p>
    <p>(1) All non-driver code is implemented perfectly</p>
    <p>(2) Only evaluate loops until a reaching definition</p>
    <p>(3) All calls are traversed exactly once, even in loops</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Modular framework to enable flexible development</p>
    <p>Simultaneously employ numerous vulnerability detectors</p>
    <p>Open source: github.com/ucsb-seclab/dr_checker</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Driver Code</p>
    <p>Soundy Driver Traversal Analysis Clients</p>
    <p>Points-to Analysis</p>
    <p>Taint Analysis</p>
    <p>Vulnerability Detectors</p>
    <p>Improper Tainted-Data Use Detector (ITDUD) Tainted Arithmetic Detector (TAD)</p>
    <p>Invalid Cast Detector (ICD) Tainted Loop Bound Detector (TLBD)</p>
    <p>Tainted Pointer Dereference Detector (TPDD) Tainted Size Detector (TSD)</p>
    <p>Uninit Leak Detector (ULD) Global Variable Race Detector (GVRD)</p>
    <p>Warnings</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Driver Code</p>
    <p>Soundy Driver Traversal Analysis Clients</p>
    <p>Points-to Analysis</p>
    <p>Taint Analysis</p>
    <p>Vulnerability Detectors</p>
    <p>Improper Tainted-Data Use Detector (ITDUD) Tainted Arithmetic Detector (TAD)</p>
    <p>Invalid Cast Detector (ICD) Tainted Loop Bound Detector (TLBD)</p>
    <p>Tainted Pointer Dereference Detector (TPDD) Tainted Size Detector (TSD)</p>
    <p>Uninit Leak Detector (ULD) Global Variable Race Detector (GVRD)</p>
    <p>Warnings</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Driver Code</p>
    <p>Soundy Driver Traversal Analysis Clients</p>
    <p>Points-to Analysis</p>
    <p>Taint Analysis</p>
    <p>Vulnerability Detectors</p>
    <p>Improper Tainted-Data Use Detector (ITDUD) Tainted Arithmetic Detector (TAD)</p>
    <p>Invalid Cast Detector (ICD) Tainted Loop Bound Detector (TLBD)</p>
    <p>Tainted Pointer Dereference Detector (TPDD) Tainted Size Detector (TSD)</p>
    <p>Uninit Leak Detector (ULD) Global Variable Race Detector (GVRD)</p>
    <p>Warnings</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Driver Code</p>
    <p>Soundy Driver Traversal Analysis Clients</p>
    <p>Points-to Analysis</p>
    <p>Taint Analysis</p>
    <p>Vulnerability Detectors</p>
    <p>Improper Tainted-Data Use Detector (ITDUD) Tainted Arithmetic Detector (TAD)</p>
    <p>Invalid Cast Detector (ICD) Tainted Loop Bound Detector (TLBD)</p>
    <p>Tainted Pointer Dereference Detector (TPDD) Tainted Size Detector (TSD)</p>
    <p>Uninit Leak Detector (ULD) Global Variable Race Detector (GVRD)</p>
    <p>Warnings</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Driver Code</p>
    <p>Soundy Driver Traversal Analysis Clients</p>
    <p>Points-to Analysis</p>
    <p>Taint Analysis</p>
    <p>Vulnerability Detectors</p>
    <p>Improper Tainted-Data Use Detector (ITDUD) Tainted Arithmetic Detector (TAD)</p>
    <p>Invalid Cast Detector (ICD) Tainted Loop Bound Detector (TLBD)</p>
    <p>Tainted Pointer Dereference Detector (TPDD) Tainted Size Detector (TSD)</p>
    <p>Uninit Leak Detector (ULD) Global Variable Race Detector (GVRD)</p>
    <p>Warnings</p>
  </div>
  <div class="page">
    <p>Dr. Checker: Design</p>
    <p>Driver Code</p>
    <p>Soundy Driver Traversal Analysis Clients</p>
    <p>Points-to Analysis</p>
    <p>Taint Analysis</p>
    <p>Vulnerability Detectors</p>
    <p>Improper Tainted-Data Use Detector (ITDUD) Tainted Arithmetic Detector (TAD)</p>
    <p>Invalid Cast Detector (ICD) Tainted Loop Bound Detector (TLBD)</p>
    <p>Tainted Pointer Dereference Detector (TPDD) Tainted Size Detector (TSD)</p>
    <p>Uninit Leak Detector (ULD) Global Variable Race Detector (GVRD)</p>
    <p>Warnings</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>Context-sensitive: Analysis for each function call is done in the context of the calling function</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>Context-sensitive: Analysis for each function call is done in the context of the calling function</p>
    <p>Field-sensitive: The ability to differentiate between different fields in a memory structure</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>Context-sensitive: Analysis for each function call is done in the context of the calling function</p>
    <p>Field-sensitive: The ability to differentiate between different fields in a memory structure</p>
    <p>Flow-sensitive: The ability to track data usage (e.g., taint) throughout a program, according to its control flow</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitive</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>ko</p>
    <p>Taint Source curr_data-&gt;item</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Field-sensitive</p>
  </div>
  <div class="page">
    <p>Soundy Driver Traversal</p>
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>ko</p>
    <p>Taint Source curr_data-&gt;item</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Field-sensitive</p>
    <p>Warning: Tainted Loop Bound</p>
  </div>
  <div class="page">
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Soundy Driver Traversal</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitiveko</p>
    <p>Taint Source</p>
    <p>Warning: Tainted Loop Bound</p>
    <p>curr_data-&gt;item</p>
  </div>
  <div class="page">
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Soundy Driver Traversal</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitiveko</p>
    <p>Taint Source</p>
    <p>Warning: Tainted Loop Bound</p>
    <p>Warning: Tainted Arithmetic</p>
    <p>curr_data-&gt;item</p>
  </div>
  <div class="page">
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Soundy Driver Traversal</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitiveko</p>
    <p>Taint Source</p>
    <p>Warning: Tainted Loop Bound</p>
    <p>Warning: Tainted Arithmetic</p>
    <p>Untainted Field</p>
    <p>curr_data-&gt;item</p>
  </div>
  <div class="page">
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Soundy Driver Traversal</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitiveko</p>
    <p>Taint Source</p>
    <p>Warning: Tainted Loop Bound</p>
    <p>Warning: Tainted Arithmetic</p>
    <p>Untainted Field Warning: Improper Tainted-Data Use</p>
    <p>curr_data-&gt;item</p>
  </div>
  <div class="page">
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Soundy Driver Traversal</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitiveko</p>
    <p>Taint Source</p>
    <p>Warning: Tainted Loop Bound</p>
    <p>Warning: Tainted Arithmetic</p>
    <p>Untainted Field Warning: Improper Tainted-Data Use</p>
    <p>Kernel Functions Ignored</p>
    <p>curr_data-&gt;item</p>
  </div>
  <div class="page">
    <p>struct kernel_obj ko;</p>
    <p>void internal_function(int *ptr) { *ptr += 1; }</p>
    <p>void entry_point(void *user_ptr, int len) { curr_data-&gt;item = &amp;ko;</p>
    <p>copy_from_user(&amp;ko, user_ptr, len);</p>
    <p>for (int i = 0; i &lt; ko.count; i++) { internal_function(&amp;(ko.data[i])); }</p>
    <p>dangerous_function(curr_data-&gt;buf); dangerous_function(curr_data-&gt;item); kernel_function(curr_data-&gt;item);</p>
    <p>}</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>Soundy Driver Traversal</p>
    <p>Taint Analysis</p>
    <p>user_ptr</p>
    <p>len</p>
    <p>Field-sensitiveko</p>
    <p>Taint Source</p>
    <p>Warning: Tainted Loop Bound</p>
    <p>Warning: Tainted Arithmetic</p>
    <p>Untainted Field Warning: Improper Tainted-Data Use</p>
    <p>Kernel Functions Ignored</p>
    <p>Soundy: Loop Traversal</p>
    <p>Soundy: Ignore kernel functions</p>
    <p>Soundy: Single traversal curr_data-&gt;item</p>
  </div>
  <div class="page">
    <p>Identifying Vendor Drivers</p>
    <p>diff with mainline sources</p>
    <p>Extract code-names from vendor configuration files</p>
  </div>
  <div class="page">
    <p>Driver Entry Points</p>
    <p>File Operations</p>
    <p>Attribute Operations</p>
    <p>Socket Operations</p>
    <p>Wrapper Functions</p>
    <p>Entry Type Argument(s) Taint Type</p>
    <p>Read (File) char *buf, size_t len Direct</p>
    <p>Write (File) char *buf, size_t len Direct</p>
    <p>Ioctl (File) long args Direct</p>
    <p>DevStore (Attribute) const char *buf Indirect</p>
    <p>NetDevIoctl (Socket) struct *ifreq Indirect</p>
    <p>V4Ioctl struct v412_format *f Indirect</p>
  </div>
  <div class="page">
    <p>Evaluation: Mobile Kernels</p>
    <p>Amazon Echo (5.5.0.3)</p>
    <p>Amazon Fire HD8 (6th Generation, 5.3.2.1)</p>
    <p>HTC One Hima (3.10.61-g5f0fe7e)</p>
    <p>Sony Xperia XA (33.2.A.3.123)</p>
    <p>HTC Desire A56 (a56uhl-3.4.0)</p>
    <p>LG K8 ACG (AS375)</p>
    <p>ASUS Zenfone 2 Laser (ZE550KL / MR521.40.1220.1794)</p>
    <p>Huawei Venus P9 Lite (2016-03-29)</p>
    <p>Samsung Galaxy S7 Edge (SM-G935F NN)</p>
  </div>
  <div class="page">
    <p>Other Tools</p>
    <p>Flawfinder  pattern-based bug detector</p>
    <p>RATS (Rough Auditing Tool for Security)  pattern-based bug detector</p>
    <p>Sparse  compiler-based bug detector</p>
    <p>cppcheck  all-in-one static analysis bug detector</p>
  </div>
  <div class="page">
    <p>Other Tools: Analysis</p>
    <p>Feature cppcheck flawfinder RATS Sparse Dr. Checker</p>
    <p>Extensible</p>
    <p>Inter-prodecural</p>
    <p>Handles pointers</p>
    <p>Kernel specific</p>
    <p>No manual annotations</p>
    <p>Requires compilable sources</p>
    <p>Sound</p>
    <p>Tracable Warnings</p>
  </div>
  <div class="page">
    <p>Other Tools: Warnings</p>
    <p>Kernel cppcheck flawfinder RATS Sparse</p>
    <p>Qualcomm 18 4,365 693 5,202</p>
    <p>Samsung 22 8,173 2,244 1,726</p>
    <p>Hauwei 34 18,132 2,301 11,320</p>
    <p>Mediatek 168 14,230 3,730 13,771</p>
  </div>
  <div class="page">
    <p>Dr. Checker</p>
    <p>Detector Huawei Qualcomm Mediatek Samsung Total</p>
    <p>TaintedSizeDetector 62 / 62/ 5 33 / 33 / 2 155 / 155 / 6 20 / 20 / 1 270 / 268 / 14 TaintedPointerDereferenceChecker 522 / 155 / 12 264 / 264 / 3 465 / 459 / 6 479 / 423 / 4 1,760 / 1,301 / 25</p>
    <p>TaintedLoopBoundDetector 75 / 56 / 4 52 / 52 / 0 73 / 73 / 1 78 / 78 / 0 278 / 259 / 5 GlobalVariableRaceDetector 324 / 184 / 38 188 / 108 / 8 548 / 420 / 5 100 / 62 / 12 1,160 / 774 / 63</p>
    <p>ImproperTaintedDataUseDetector 81 / 74 / 5 92 / 91 / 3 243 / 241 / 9 135 / 134 / 4 551 / 540 / 21 IntegerOverflowDetector 250 / 177 / 6 196 / 196 / 2 247 / 247 / 6 99 / 87 / 2 792 / 707 / 16</p>
    <p>KernelUninitMemoryLeakDetector 9 / 7 / 5 1 / 1 / 0 8 / 5 / 5 6 / 2 / 1 24 / 15 / 11</p>
    <p>InvalidCastDetector 96 / 13 / 2 75 / 74 / 1 9 / 9 / 0 56 / 13 / 0 236 / 109 / 3</p>
    <p>Warnings per Kernel (Count / Confirmed / Bug)</p>
    <p>Precision: 78%</p>
  </div>
  <div class="page">
    <p>Dr. Checker</p>
    <p>Detector Huawei Qualcomm Mediatek Samsung Total</p>
    <p>TaintedSizeDetector 62 / 62/ 5 33 / 33 / 2 155 / 155 / 6 20 / 20 / 1 270 / 268 / 14 TaintedPointerDereferenceChecker 522 / 155 / 12 264 / 264 / 3 465 / 459 / 6 479 / 423 / 4 1,760 / 1,301 / 25</p>
    <p>TaintedLoopBoundDetector 75 / 56 / 4 52 / 52 / 0 73 / 73 / 1 78 / 78 / 0 278 / 259 / 5 GlobalVariableRaceDetector 324 / 184 / 38 188 / 108 / 8 548 / 420 / 5 100 / 62 / 12 1,160 / 774 / 63</p>
    <p>ImproperTaintedDataUseDetector 81 / 74 / 5 92 / 91 / 3 243 / 241 / 9 135 / 134 / 4 551 / 540 / 21 IntegerOverflowDetector 250 / 177 / 6 196 / 196 / 2 247 / 247 / 6 99 / 87 / 2 792 / 707 / 16</p>
    <p>KernelUninitMemoryLeakDetector 9 / 7 / 5 1 / 1 / 0 8 / 5 / 5 6 / 2 / 1 24 / 15 / 11</p>
    <p>InvalidCastDetector 96 / 13 / 2 75 / 74 / 1 9 / 9 / 0 56 / 13 / 0 236 / 109 / 3</p>
    <p>Warnings per Kernel (Count / Confirmed / Bug)</p>
    <p>Precision: 78% 5,071 / 3,973 / 158</p>
  </div>
  <div class="page">
    <p>Dr. Checker</p>
    <p>Detector Huawei Qualcomm Mediatek Samsung Total</p>
    <p>TaintedSizeDetector 62 / 62/ 5 33 / 33 / 2 155 / 155 / 6 20 / 20 / 1 270 / 268 / 14 TaintedPointerDereferenceChecker 522 / 155 / 12 264 / 264 / 3 465 / 459 / 6 479 / 423 / 4 1,760 / 1,301 / 25</p>
    <p>TaintedLoopBoundDetector 75 / 56 / 4 52 / 52 / 0 73 / 73 / 1 78 / 78 / 0 278 / 259 / 5 GlobalVariableRaceDetector 324 / 184 / 38 188 / 108 / 8 548 / 420 / 5 100 / 62 / 12 1,160 / 774 / 63</p>
    <p>ImproperTaintedDataUseDetector 81 / 74 / 5 92 / 91 / 3 243 / 241 / 9 135 / 134 / 4 551 / 540 / 21 IntegerOverflowDetector 250 / 177 / 6 196 / 196 / 2 247 / 247 / 6 99 / 87 / 2 792 / 707 / 16</p>
    <p>KernelUninitMemoryLeakDetector 9 / 7 / 5 1 / 1 / 0 8 / 5 / 5 6 / 2 / 1 24 / 15 / 11</p>
    <p>InvalidCastDetector 96 / 13 / 2 75 / 74 / 1 9 / 9 / 0 56 / 13 / 0 236 / 109 / 3</p>
    <p>Warnings per Kernel (Count / Confirmed / Bug)</p>
    <p>Precision: 78% 5,071 / 3,973 / 158</p>
  </div>
  <div class="page">
    <p>Dr. Checker</p>
    <p>Detector Huawei Qualcomm Mediatek Samsung Total</p>
    <p>TaintedSizeDetector 62 / 62/ 5 33 / 33 / 2 155 / 155 / 6 20 / 20 / 1 270 / 268 / 14 TaintedPointerDereferenceChecker 522 / 155 / 12 264 / 264 / 3 465 / 459 / 6 479 / 423 / 4 1,760 / 1,301 / 25</p>
    <p>TaintedLoopBoundDetector 75 / 56 / 4 52 / 52 / 0 73 / 73 / 1 78 / 78 / 0 278 / 259 / 5 GlobalVariableRaceDetector 324 / 184 / 38 188 / 108 / 8 548 / 420 / 5 100 / 62 / 12 1,160 / 774 / 63</p>
    <p>ImproperTaintedDataUseDetector 81 / 74 / 5 92 / 91 / 3 243 / 241 / 9 135 / 134 / 4 551 / 540 / 21 IntegerOverflowDetector 250 / 177 / 6 196 / 196 / 2 247 / 247 / 6 99 / 87 / 2 792 / 707 / 16</p>
    <p>KernelUninitMemoryLeakDetector 9 / 7 / 5 1 / 1 / 0 8 / 5 / 5 6 / 2 / 1 24 / 15 / 11</p>
    <p>InvalidCastDetector 96 / 13 / 2 75 / 74 / 1 9 / 9 / 0 56 / 13 / 0 236 / 109 / 3</p>
    <p>Warnings per Kernel (Count / Confirmed / Bug)</p>
    <p>Precision: 78%</p>
  </div>
  <div class="page">
    <p>Dr. Checker</p>
    <p>Detector Huawei Qualcomm Mediatek Samsung Total</p>
    <p>TaintedSizeDetector 62 / 62/ 5 33 / 33 / 2 155 / 155 / 6 20 / 20 / 1 270 / 268 / 14 TaintedPointerDereferenceChecker 522 / 155 / 12 264 / 264 / 3 465 / 459 / 6 479 / 423 / 4 1,760 / 1,301 / 25</p>
    <p>TaintedLoopBoundDetector 75 / 56 / 4 52 / 52 / 0 73 / 73 / 1 78 / 78 / 0 278 / 259 / 5 GlobalVariableRaceDetector 324 / 184 / 38 188 / 108 / 8 548 / 420 / 5 100 / 62 / 12 1,160 / 774 / 63</p>
    <p>ImproperTaintedDataUseDetector 81 / 74 / 5 92 / 91 / 3 243 / 241 / 9 135 / 134 / 4 551 / 540 / 21 IntegerOverflowDetector 250 / 177 / 6 196 / 196 / 2 247 / 247 / 6 99 / 87 / 2 792 / 707 / 16</p>
    <p>KernelUninitMemoryLeakDetector 9 / 7 / 5 1 / 1 / 0 8 / 5 / 5 6 / 2 / 1 24 / 15 / 11</p>
    <p>InvalidCastDetector 96 / 13 / 2 75 / 74 / 1 9 / 9 / 0 56 / 13 / 0 236 / 109 / 3</p>
    <p>Warnings per Kernel (Count / Confirmed / Bug)</p>
    <p>Precision: 78%</p>
  </div>
  <div class="page">
    <p>Zero-day Bug</p>
    <p>static char call status ; ... static ssize_t accdet_store_call_state( struct device driver ddri , const char buf , size t count) { int ret = sscanf(buf, %s, &amp;call status);</p>
    <p>if (ret != 1) { ACCDETDEBUG(accdet: Invalid values\n); return -EINVAL; }  }</p>
    <p>A buffer overflow bug detected in Mediateks Accdet driver</p>
  </div>
  <div class="page">
    <p>Zero-day Bug</p>
    <p>static char call status ; ... static ssize_t accdet_store_call_state( struct device driver ddri , const char buf , size t count) { int ret = sscanf(buf, %s, &amp;call status);</p>
    <p>if (ret != 1) { ACCDETDEBUG(accdet: Invalid values\n); return -EINVAL; }  }</p>
    <p>buf can contain more than one char !</p>
    <p>A buffer overflow bug detected in Mediateks Accdet driver</p>
  </div>
  <div class="page">
    <p>Zero-day Bug</p>
    <p>static char call status ; ... static ssize_t accdet_store_call_state( struct device driver ddri , const char buf , size t count) { int ret = sscanf(buf, %s, &amp;call status);</p>
    <p>if (ret != 1) { ACCDETDEBUG(accdet: Invalid values\n); return -EINVAL; }  }</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>buf can contain more than one char !</p>
    <p>A buffer overflow bug detected in Mediateks Accdet driver</p>
  </div>
  <div class="page">
    <p>Zero-day Bug</p>
    <p>static char call status ; ... static ssize_t accdet_store_call_state( struct device driver ddri , const char buf , size t count) { int ret = sscanf(buf, %s, &amp;call status);</p>
    <p>if (ret != 1) { ACCDETDEBUG(accdet: Invalid values\n); return -EINVAL; }  }</p>
    <p>Warning: Improper Tainted-Data Use</p>
    <p>buf can contain more than one char !</p>
    <p>ret is checked, but its too late</p>
    <p>A buffer overflow bug detected in Mediateks Accdet driver</p>
  </div>
  <div class="page">
    <p>Results: Soundy vs. Sound</p>
    <p>Dr. Checker</p>
    <p>Dr. Checker (Ignoring kernel functions)</p>
    <p>Dr. Checker (Sound Analysis) [18/100]</p>
    <p>log10(seconds)</p>
    <p>Time to analyze 100 randomly selected entry points</p>
  </div>
  <div class="page">
    <p>Results: Soundy vs. Sound</p>
    <p>Dr. Checker</p>
    <p>Dr. Checker (Ignoring kernel functions)</p>
    <p>Dr. Checker (Sound Analysis) [18/100]</p>
    <p>log10(seconds)</p>
    <p>Time to analyze 100 randomly selected entry points</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Modular bug-finding tool for Linux kernel drivers</p>
    <p>Soundy program analysis techniques to maintain practicality</p>
    <p>Scalable tool capable of employing multiple vulnerability detectors</p>
    <p>158 previously undiscovered zero-day bugs</p>
    <p>Open-source project to encourage more development/collaboration</p>
  </div>
  <div class="page">
    <p>github.com/ucsb-seclab/dr_checker</p>
    <p>Aravind Machiry (machiry@cs.ucsb.edu)</p>
    <p>Chad Spensky (cspensky@cs.ucsb.edu)</p>
    <p>Help Make Drivers Great Again</p>
  </div>
</Presentation>
