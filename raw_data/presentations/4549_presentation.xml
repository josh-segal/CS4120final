<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>College of Computing Georgia Institute of Technology</p>
    <p>Supported in part by: NSF awards CCF-0541080 and CCR-0205422 to Georgia Tech,</p>
    <p>DHS and US Air Force Contract No. FA8750-05-2-0214</p>
    <p>Effective Memory Protection Using Dynamic Tainting</p>
    <p>Ioanis Doudalis Milos Prvulovic</p>
    <p>(hardware)</p>
    <p>James Clause Alessandro Orso</p>
    <p>(software)</p>
    <p>and</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 3</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 3</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 3</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 3</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>i &lt;= n  i &lt; n</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>Illegal memory accesses (IMA) Memory</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
    <p>Illegal memory accesses</p>
    <p>Caused by common programming mistakes  Cause non-deterministic failures  Cause security vulnerabilities</p>
  </div>
  <div class="page">
    <p>Previous work Static techniques</p>
    <p>Language based e.g., Jim et al. 02, Necula et al. 05</p>
    <p>Analysis based e.g., Dor et al. 03, Hallem et al. 02, Heine and Lam 03, Xie et al. 03</p>
    <p>Dynamic techniques</p>
    <p>Analysis based e.g., Dhurjati and Adve 06, Ruwase and Lam 04, Xu et al. 04, Hastings and Joyce 92, Seward and Nethercote 05</p>
    <p>Hardware based e.g., Qin et al. 05, Venkataramani et al. 07, Crandall and Chong 04, Dalton et al. 07, Vachharajani et al. 04</p>
  </div>
  <div class="page">
    <p>Previous work Static techniques</p>
    <p>Language based e.g., Jim et al. 02, Necula et al. 05</p>
    <p>Analysis based e.g., Dor et al. 03, Hallem et al. 02, Heine and Lam 03, Xie et al. 03</p>
    <p>Dynamic techniques</p>
    <p>Analysis based e.g., Dhurjati and Adve 06, Ruwase and Lam 04, Xu et al. 04, Hastings and Joyce 92, Seward and Nethercote 05</p>
    <p>Hardware based e.g., Qin et al. 05, Venkataramani et al. 07, Crandall and Chong 04, Dalton et al. 07, Vachharajani et al. 04</p>
    <p>}Require source code</p>
  </div>
  <div class="page">
    <p>Previous work Static techniques</p>
    <p>Language based e.g., Jim et al. 02, Necula et al. 05</p>
    <p>Analysis based e.g., Dor et al. 03, Hallem et al. 02, Heine and Lam 03, Xie et al. 03</p>
    <p>Dynamic techniques</p>
    <p>Analysis based e.g., Dhurjati and Adve 06, Ruwase and Lam 04, Xu et al. 04, Hastings and Joyce 92, Seward and Nethercote 05</p>
    <p>Hardware based e.g., Qin et al. 05, Venkataramani et al. 07, Crandall and Chong 04, Dalton et al. 07, Vachharajani et al. 04</p>
    <p>} }</p>
    <p>Require source code</p>
    <p>Unacceptable overhead</p>
  </div>
  <div class="page">
    <p>Previous work Static techniques</p>
    <p>Language based e.g., Jim et al. 02, Necula et al. 05</p>
    <p>Analysis based e.g., Dor et al. 03, Hallem et al. 02, Heine and Lam 03, Xie et al. 03</p>
    <p>Dynamic techniques</p>
    <p>Analysis based e.g., Dhurjati and Adve 06, Ruwase and Lam 04, Xu et al. 04, Hastings and Joyce 92, Seward and Nethercote 05</p>
    <p>Hardware based e.g., Qin et al. 05, Venkataramani et al. 07, Crandall and Chong 04, Dalton et al. 07, Vachharajani et al. 04</p>
    <p>} }</p>
    <p>Require source code</p>
    <p>Unacceptable overhead</p>
    <p>} Extensive modification</p>
  </div>
  <div class="page">
    <p>Previous work Static techniques</p>
    <p>Language based e.g., Jim et al. 02, Necula et al. 05</p>
    <p>Analysis based e.g., Dor et al. 03, Hallem et al. 02, Heine and Lam 03, Xie et al. 03</p>
    <p>Dynamic techniques</p>
    <p>Analysis based e.g., Dhurjati and Adve 06, Ruwase and Lam 04, Xu et al. 04, Hastings and Joyce 92, Seward and Nethercote 05</p>
    <p>Hardware based e.g., Qin et al. 05, Venkataramani et al. 07, Crandall and Chong 04, Dalton et al. 07, Vachharajani et al. 04</p>
    <p>} }</p>
    <p>Require source code</p>
    <p>Unacceptable overhead</p>
    <p>We define our approach to overcome these limitations</p>
    <p>Operate at the binary level  Use hardware to reduce overhead  Minimal, practical modifications</p>
    <p>} Extensive modification</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P1</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>P1</p>
    <p>A</p>
    <p>Approach overview</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P1</p>
    <p>P2</p>
    <p>AB</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
    <p>P5</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4</p>
    <p>P5</p>
  </div>
  <div class="page">
    <p>Approach overview</p>
    <p>P3</p>
    <p>P1</p>
    <p>P2</p>
    <p>AC B</p>
    <p>P4 !</p>
    <p>P5</p>
  </div>
  <div class="page">
    <p>Outline  Our approach</p>
    <p>Empirical evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
    <p>{</p>
    <p>[&amp;np, &amp;np + sizeof(int *))</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>address-of operator (&amp;)</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
    <p>[ret, ret + arg0)</p>
    <p>{</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic return value of malloc</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n: 4</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>Memory Pointers</p>
    <p>at ic</p>
    <p>D yn</p>
    <p>am ic</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Overview</p>
    <p>P1</p>
    <p>P2</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Overview +, !, &quot;, , and, or, xor,</p>
    <p>...</p>
    <p>P1</p>
    <p>P2</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Overview +, !, &quot;, , and, or, xor,</p>
    <p>...</p>
    <p>P1</p>
    <p>P2</p>
    <p>Should the result be tainted? If so, how?</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Overview</p>
    <p>Propagation must take into account both operation semantics and programmer intent</p>
    <p>+, !, &quot;, , and, or, xor,</p>
    <p>...</p>
    <p>P1</p>
    <p>P2</p>
    <p>Should the result be tainted? If so, how?</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Overview</p>
    <p>Propagation must take into account both operation semantics and programmer intent</p>
    <p>Our policy is based on knowledge of C/C++/assembly and patterns observed in real software</p>
    <p>+, !, &quot;, , and, or, xor,</p>
    <p>...</p>
    <p>P1</p>
    <p>P2</p>
    <p>Should the result be tainted? If so, how?</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Addition, Subtraction</p>
    <p>A +/ B = C A B C</p>
    <p>Most common use of addition and subtraction is to add or subtract a</p>
    <p>pointer and an offset</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>AND The result of anding a pointer and a mask should be treated differently</p>
    <p>depending on the value of the mask</p>
    <p>c = a &amp; 0xffffff00 - base address c = a &amp; 0x000000ff - offset</p>
    <p>A &amp; B = C A B C</p>
  </div>
  <div class="page">
    <p>AND</p>
    <p>Addition, Subtraction</p>
    <p>Overview</p>
    <p>Propagating taint marks2</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>Multiplication, Division, OR, XOR</p>
    <p>We found zero cases where the result of any of these operations</p>
    <p>was a pointer</p>
  </div>
  <div class="page">
    <p>Checking taint marks When memory is accessed through a pointer:</p>
    <p>compare the memory taint mark and the pointer taint mark</p>
    <p>Pointer Memory IMA?</p>
    <p>no</p>
    <p>yes</p>
    <p>yes</p>
    <p>yes</p>
    <p>yes</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>+ =5 5</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>+ =5 5</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
    <p>+ =5 5</p>
  </div>
  <div class="page">
    <p>Preventing IMAs</p>
    <p>void main() { 1. int *np, n, i, *buf;</p>
    <p>buf:</p>
    <p>np:</p>
    <p>i:</p>
    <p>n:</p>
    <p>+ =5 5</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Limiting the number of taint marks</p>
    <p>An unlimited number of taint marks makes a hardware implementation infeasible</p>
    <p>increases the overhead (time and space)  complicates the design</p>
  </div>
  <div class="page">
    <p>Limiting the number of taint marks</p>
    <p>An unlimited number of taint marks makes a hardware implementation infeasible</p>
    <p>increases the overhead (time and space)  complicates the design</p>
    <p>Assign taint marks from a limited, reusable pool</p>
  </div>
  <div class="page">
    <p>Effects on the approach</p>
    <p>With an random assignment of n taint marks the detection probability is:</p>
    <p>IMAs are detected probabilistically</p>
    <p>p = 1 ! 1 n</p>
  </div>
  <div class="page">
    <p>Effects on the approach</p>
    <p>With an random assignment of n taint marks the detection probability is:</p>
    <p>IMAs are detected probabilistically</p>
    <p>p = 1 ! 1 n</p>
  </div>
  <div class="page">
    <p>Effects on the approach</p>
    <p>With an random assignment of n taint marks the detection probability is:</p>
    <p>IMAs are detected probabilistically</p>
    <p>p = 1 ! 1 n</p>
  </div>
  <div class="page">
    <p>Effects on the approach</p>
    <p>With an random assignment of n taint marks the detection probability is:</p>
    <p>IMAs are detected probabilistically</p>
    <p>p = 1 ! 1 n</p>
  </div>
  <div class="page">
    <p>Empirical evaluation</p>
    <p>RQ1: Is the efficiency of our approach sufficient for it to be applied to deployed software?</p>
    <p>RQ2: What is the effectiveness of our technique when using limited number of taint marks?</p>
  </div>
  <div class="page">
    <p>RQ1: experimental method</p>
    <p>Hardware implementation  Cycle accurate simuator (SESC)  Treat taint marks as first class citizens</p>
    <p>Subjects  SPEC CPU2000 benchmark (12 applications)</p>
    <p>Calculate the overhead imposed by our approach for each subject application</p>
  </div>
  <div class="page">
    <p>RQ1: experimental method</p>
    <p>Hardware implementation  Cycle accurate simuator (SESC)  Treat taint marks as first class citizens</p>
    <p>Subjects  SPEC CPU2000 benchmark (12 applications)</p>
    <p>Calculate the overhead imposed by our approach for each subject application</p>
    <p>Current implementation assigns taint marks only to dynamically allocated memory, but propagation and</p>
    <p>checking are fully implemented</p>
  </div>
  <div class="page">
    <p>RQ1: results</p>
    <p>bz ip2</p>
    <p>cr aft</p>
    <p>y eo</p>
    <p>n ga</p>
    <p>p gc</p>
    <p>c gz</p>
    <p>ip m cf</p>
    <p>pa rs er</p>
    <p>pe rlb</p>
    <p>m k</p>
    <p>tw ol f</p>
    <p>vo rt ex vp</p>
    <p>r</p>
    <p>av er</p>
    <p>ag e</p>
    <p>% o</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(t im</p>
    <p>e)</p>
  </div>
  <div class="page">
    <p>RQ1: results</p>
    <p>bz ip2</p>
    <p>cr aft</p>
    <p>y eo</p>
    <p>n ga</p>
    <p>p gc</p>
    <p>c gz</p>
    <p>ip m cf</p>
    <p>pa rs er</p>
    <p>pe rlb</p>
    <p>m k</p>
    <p>tw ol f</p>
    <p>vo rt ex vp</p>
    <p>r</p>
    <p>av er</p>
    <p>ag e</p>
    <p>% o</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(t im</p>
    <p>e)</p>
    <p>Even with 256 marks, the average overhead is in the single digits</p>
  </div>
  <div class="page">
    <p>RQ1: results</p>
    <p>bz ip2</p>
    <p>cr aft</p>
    <p>y eo</p>
    <p>n ga</p>
    <p>p gc</p>
    <p>c gz</p>
    <p>ip m cf</p>
    <p>pa rs er</p>
    <p>pe rlb</p>
    <p>m k</p>
    <p>tw ol f</p>
    <p>vo rt ex vp</p>
    <p>r</p>
    <p>av er</p>
    <p>ag e</p>
    <p>% o</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(t im</p>
    <p>e)</p>
    <p>All attacks were detected with two taint marks</p>
    <p>Even with 256 marks, the average overhead is in the single digits</p>
  </div>
  <div class="page">
    <p>RQ1: results</p>
    <p>bz ip2</p>
    <p>cr aft</p>
    <p>y eo</p>
    <p>n ga</p>
    <p>p gc</p>
    <p>c gz</p>
    <p>ip m cf</p>
    <p>pa rs er</p>
    <p>pe rlb</p>
    <p>m k</p>
    <p>tw ol f</p>
    <p>vo rt ex vp</p>
    <p>r</p>
    <p>av er</p>
    <p>ag e</p>
    <p>% o</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(t im</p>
    <p>e)</p>
    <p>All attacks were detected with two taint marks  Software-only implementations impose two</p>
    <p>orders of magnitude more overhead</p>
    <p>Even with 256 marks, the average overhead is in the single digits</p>
  </div>
  <div class="page">
    <p>RQ2: experimental method</p>
    <p>Software implementation  Binary instrumenter (Pin)  Use instrumentation to assign, propagate, and check</p>
    <p>taint marks</p>
    <p>Subjects  SPEC CPU2000 benchmark (12 applications)  5 applications with 7 known IMAs</p>
    <p>Run both each applications protected by our software implementation and check that only the known illegal memory accesses are detected (5 times)</p>
  </div>
  <div class="page">
    <p>RQ2: results Application IMA location Type Detected</p>
    <p>bc-1.06 more_arrays: 177 buffer overflow  (5/5)</p>
    <p>bc-1.06 lookup: 577 buffer overflow  (5/5)</p>
    <p>gnupg-1.4.4 parse_comment: 2095 integer overflow  (5/5)</p>
    <p>mutt-1.4.2.li utf8_to_utf7: 199 buffer overflow  (5/5)</p>
    <p>php-5.2.0 php_char_to_str_ex: 3152 integer overflow  (5/5)</p>
    <p>pine-4.44 rfc882_cat: 260 buffer overflow  (5/5)</p>
    <p>squid-2.3 ftpBuildTitleUrl: 1024 buffer overflow  (5/5)</p>
    <p>Applications with known IMAs</p>
  </div>
  <div class="page">
    <p>RQ2: results Application IMA location Type Detected</p>
    <p>bc-1.06 more_arrays: 177 buffer overflow  (5/5)</p>
    <p>bc-1.06 lookup: 577 buffer overflow  (5/5)</p>
    <p>gnupg-1.4.4 parse_comment: 2095 integer overflow  (5/5)</p>
    <p>mutt-1.4.2.li utf8_to_utf7: 199 buffer overflow  (5/5)</p>
    <p>php-5.2.0 php_char_to_str_ex: 3152 integer overflow  (5/5)</p>
    <p>pine-4.44 rfc882_cat: 260 buffer overflow  (5/5)</p>
    <p>squid-2.3 ftpBuildTitleUrl: 1024 buffer overflow  (5/5)</p>
    <p>Applications with known IMAs</p>
    <p>All attacks were detected with two taint marks</p>
  </div>
  <div class="page">
    <p>RQ2: results Application IMA location Type Detected</p>
    <p>bc-1.06 more_arrays: 177 buffer overflow  (5/5)</p>
    <p>bc-1.06 lookup: 577 buffer overflow  (5/5)</p>
    <p>gnupg-1.4.4 parse_comment: 2095 integer overflow  (5/5)</p>
    <p>mutt-1.4.2.li utf8_to_utf7: 199 buffer overflow  (5/5)</p>
    <p>php-5.2.0 php_char_to_str_ex: 3152 integer overflow  (5/5)</p>
    <p>pine-4.44 rfc882_cat: 260 buffer overflow  (5/5)</p>
    <p>squid-2.3 ftpBuildTitleUrl: 1024 buffer overflow  (5/5)</p>
    <p>Application IMA location Type Detected</p>
    <p>vortex SendMsg: 279 null-pointer dereference</p>
    <p>(5/5)</p>
    <p>Applications with known IMAs</p>
    <p>SPEC Benchmarks (IMA free)</p>
    <p>All attacks were detected with two taint marks</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Complete implementation that handles static memory</p>
    <p>Additional experiments with a wider range of IMAs</p>
    <p>Further optimization of the hardware implementation</p>
  </div>
  <div class="page">
    <p>Conclusions  Definition of an approach for preventing illegal</p>
    <p>memory accesses in deployed software</p>
    <p>uses dynamic taint analysis to protect memory  uses probabilistic detection to achieve acceptable</p>
    <p>overhead</p>
    <p>Empirical evaluation showing that the approach  is effective at detecting IMA in real applications  can be implemented efficiently in hardware</p>
  </div>
</Presentation>
