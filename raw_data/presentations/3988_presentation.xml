<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dont Repeat Yourself: Automatically Synthesizing</p>
    <p>Client-side Validation Code for Web Applications</p>
    <p>Nazari Skrupsky, Maliheh Monshizadeh, Prithvi Bisht, Timothy Hinrichs, V.N. Venkatakrishnan, Lenore Zuck</p>
    <p>University of Illinois at Chicago Department of Computer Science</p>
  </div>
  <div class="page">
    <p>Introduction  Goals, Challenges  Our Approach  WAVES Tool  Results  Conclusion</p>
    <p>Overview</p>
  </div>
  <div class="page">
    <p>Web Application Development  Client-side</p>
    <p>- HTML, JavaScript, ...  Server-side</p>
    <p>- PHP, Java, ASP  Independent development is problematic</p>
    <p>When the client and server share application logic</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Input Validation</p>
    <p>WAVES: Automatic Synthesis of Client-side Validation Code for Web Applications</p>
    <p>Nazari Skrupsky Maliheh Monshizadeh Prithvi Bisht Timothy Hinrichs V.N. Venkatakrishnan Lenore Zuck</p>
    <p>Motivation</p>
    <p>Traditionally: input validation done at the server-side</p>
    <p>Disadvantages: Round-trip delays Traffic load, . . .</p>
    <p>Lately: input validation done at the client-side using JavaScript</p>
    <p>Web applications: client-side, server-side developed separately ! In different languages and platforms</p>
    <p>Independent development is problematic when the client and server share application logic.</p>
    <p>For the sake of security, input validation must always occur at the server. For if it only appears at the client, a malicious user can bypass the client validation and supply invalid data to the server.</p>
    <p>Servers with parameter tampering vulnerabilities are open to a variety of attacks (eg. unauthorized access, SQL injection, Cross-site scripting)</p>
    <p>Using our approach, a web developer only authors the server side input validation of a web application, and our approach automatically synthesizes the input validation for the client.</p>
    <p>Contributions</p>
    <p>HIGH-LEVEL BENEFITS: 1. Development Efficiency: Developers no longer repeat effort since code for client</p>
    <p>is automatically synthesized.</p>
    <p>Example</p>
    <p>Our goal is to automatically synthesize the corresponding client side input validation routines. WAVES (Web Application Validation Extraction and Synthesis) requires developers to only maintain the input validation code on the server. WAVES then automatically synthesizes the corresponding validation code for the client.</p>
    <p>High-level Challenges</p>
    <p>Automatic inference of server-side constraints: Client validation constraints typically expressed on form fields</p>
    <p>Server side validation code is usually deeply nested in server code flows Server-side code validation may be performed in terms of server-side variables</p>
    <p>! Need to therefore extract constraints in terms of form fields Validation involving the server: Some validation may involve server-side state for a variety of reasons, simply because data needed for the validation cannot be placed on the client due to reasons of performance and / or data confidentiality. This gives rise to the challenge of synthesizing server code that performs such validation for only a subset of all the inputs on the client.</p>
    <p>Preservation of application logic and security: We must ensure our synthesized code preserves the functionality and security of the original application.</p>
    <p>Client-side code generation</p>
    <p>In WAVES, once the static and dynamic constraints have been extracted from the server, we synthesize client-side code to check those constraints.</p>
    <p>Static constraints can be checked directly by JavaScript code. Each constraint is represented in the logic of strings and integer arithmetic.</p>
    <p>Dynamic Constraints can only be checked after communicating with the server.</p>
    <p>At form submission, the client communicates with the server asynchronously. The client-side code for checking dynamic constraints consists of: ? Sending requests with form field values to the server ? processing status changes from the servers responses into real-time feedback</p>
    <p>for the user.</p>
    <p>For each form field, WAVES generates an event handler that first checks the static constraints for an error and if none is found then checks the dynamic constraints.</p>
    <p>WAVES: Synthesizing client-side validation code</p>
    <p>Server Analysis</p>
    <p>Extract the input validation constraints checked by the web server. Fserver = All conditions on user inputs that must be satisfied to</p>
    <p>reach sensitive operations</p>
    <p>Dynamic program analysis</p>
    <p>! Submitting benign inputs to the server and inspecting the sequence of instructions that the server executes.</p>
    <p>Select input validation constraints (constraints that when falsified cause the server to reject the input) and Identify type of these constraints:</p>
    <p>Dynamic Constraints: Constraints which are dependent on the servers environment. (Eg. the user ID should be unique in database) Static Constraints: Constraints which are not dependent on the servers environment. (Eg. the alphanumeric constraint on user ID and the password equivalence constraint)</p>
    <p>Server-side code generation</p>
    <p>The asynchronous messages sent by the client to check the dynamic constraints for a form field can only be responded to by server stubs (special-purpose server-side code) which:</p>
    <p>! Checks constraints in the same way the original server code does. ! Handles missing unrelated data. ! Handles the servers environment</p>
    <p>? Session data ? Database ? File operations</p>
    <p>Automatic generation of server stubs: Dependency Analysis of the variables appeared in the dynamic constraint Program Slicing: pruning out instructions which are not relevant to Simplification and Optimization of the generated server stub.</p>
    <p>Results</p>
    <p>We selected three medium to large and popular PHP applications. 1. B2Evolution 2. Webid 3. WebSubRev</p>
    <p>Two of the chosen forms (B2Evolution and WeBid) do not contain any client-side validation; the other form (WebSubRev) already includes client-side validation. WAVES was able to synthesize over 83% of the constraints identified by the ideal synthesis. Static constraints, those that do not rely on server-side state, dominated the total synthesized constraints (27 / 35); for each of the 8 dynamic constraints, WAVES synthesized an AJAX stub.</p>
    <p>Application Ideal Synthesis WAVES Synthesis</p>
    <p>ExistingValidation</p>
    <p>B2Evolution 10+1 7+1 0 WeBid 17+8 16+6 0 WebSubRev 5+1 4+1 5+0</p>
    <p>Using WAVES, the new forms are retrofitted with interactivity which improves the overall usability of the application. A synthesized client provides instant feedback as the user interacts with the form.</p>
    <p>WAVES generated stubs which were much smaller in size than the portion of the application relevant to validation  in most cases less than 25% of the original LOC.</p>
    <p>The round trip time taken by stubs in responding to AJAX requests, averaged in the range of 43 to 164 milliseconds.</p>
    <p>Offline Online Application Static</p>
    <p>Complexity Dynamic Complexity</p>
    <p>Synthesis Time (sec)</p>
    <p>Avg Stub Size (eLOC)</p>
    <p>Avg Server RT (ms)</p>
    <p>Avg Stub RT (ms)</p>
    <p>B2Evolution 52 9 522 27 (26%) 65 43 WeBid 17 18 281 40 (16%) 373 164 WebSubRev 25 5 12921 29 (25%) 633 76</p>
    <p>Conclusion</p>
    <p>Our approach allows the developer to improve security of the web application by focusing only on the server side development of validation.</p>
    <p>We developed novel techniques for automatic synthesis of the client side validation.</p>
    <p>Our experimental results are promising: they indicate that automated synthesis can result in highly interactive web applications that are competitive in terms of performance and rival human-generated code in terms of coverage.</p>
    <p>Insufficient client-side validation can cause repeat submissions, which result in additional server workload and bandwidth use. In the original form submission logic, whenever the user commits an error she needs to retransmit all form data to the server, and the server needs to reprocess the input.</p>
    <p>WAVES effectively offloads validation onto the client, the server spends less resources on form processing , and the overall performance of the application</p>
    <p>improves.</p>
    <p>Related Publication:</p>
    <p>- Nazari Skrupsky, Maliheh Monshizadeh, Prithvi Bisht, Timothy Hinrichs, V.N. Venkatakrishnan, Lenore Zuck. Dont Repeat Yourself: Automatically Synthesizing Client-side Validation Code for Web Applications In proceedings of USENIX WebApps12 Conference on Web Application Development, Boston, 2012.</p>
    <p>- Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, and V. N. Venkatakrishnan. WAPTEC: Whitebox Analysis of Web Applications for Parameter Tampering Exploit Construction. In Proceedings of the 18th ACM conference on Computer and communications security (CCS 11). ACM, New York, NY</p>
    <p>- Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, Radoslaw Bobrowicz, and V. N. Venkatakrishnan. NoTamper: Automatic Blackbox Detection of Parameter Tampering Opportunities in Web Applications. In Proceedings of the 17th ACM conference on Computer and communications security (CCS 10). ACM, New York.</p>
    <p>Acknowledgments:</p>
    <p>This work was partially supported by National Science Foundation grants CNS 0917229, CNS 0845894, CNS 1065537, DGE 1069311.</p>
    <p>mmonsh2@uic.edu, {nskrou2, pbisht2, hinrichs, venkat, zuck}@uic.edu</p>
  </div>
  <div class="page">
    <p>Parameter Tampering</p>
    <p>WAVES: Automatic Synthesis of Client-side Validation Code for Web Applications</p>
    <p>Nazari Skrupsky Maliheh Monshizadeh Prithvi Bisht Timothy Hinrichs V.N. Venkatakrishnan Lenore Zuck</p>
    <p>Motivation</p>
    <p>Traditionally: input validation done at the server-side</p>
    <p>Disadvantages: Round-trip delays Traffic load, . . .</p>
    <p>Lately: input validation done at the client-side using JavaScript</p>
    <p>Web applications: client-side, server-side developed separately ! In different languages and platforms</p>
    <p>Independent development is problematic when the client and server share application logic.</p>
    <p>For the sake of security, input validation must always occur at the server. For if it only appears at the client, a malicious user can bypass the client validation and supply invalid data to the server.</p>
    <p>Servers with parameter tampering vulnerabilities are open to a variety of attacks (eg. unauthorized access, SQL injection, Cross-site scripting)</p>
    <p>Using our approach, a web developer only authors the server side input validation of a web application, and our approach automatically synthesizes the input validation for the client.</p>
    <p>Contributions</p>
    <p>HIGH-LEVEL BENEFITS: 1. Development Efficiency: Developers no longer repeat effort since code for client</p>
    <p>is automatically synthesized.</p>
    <p>Example</p>
    <p>Our goal is to automatically synthesize the corresponding client side input validation routines. WAVES (Web Application Validation Extraction and Synthesis) requires developers to only maintain the input validation code on the server. WAVES then automatically synthesizes the corresponding validation code for the client.</p>
    <p>High-level Challenges</p>
    <p>Automatic inference of server-side constraints: Client validation constraints typically expressed on form fields</p>
    <p>Server side validation code is usually deeply nested in server code flows Server-side code validation may be performed in terms of server-side variables</p>
    <p>! Need to therefore extract constraints in terms of form fields Validation involving the server: Some validation may involve server-side state for a variety of reasons, simply because data needed for the validation cannot be placed on the client due to reasons of performance and / or data confidentiality. This gives rise to the challenge of synthesizing server code that performs such validation for only a subset of all the inputs on the client.</p>
    <p>Preservation of application logic and security: We must ensure our synthesized code preserves the functionality and security of the original application.</p>
    <p>Client-side code generation</p>
    <p>In WAVES, once the static and dynamic constraints have been extracted from the server, we synthesize client-side code to check those constraints.</p>
    <p>Static constraints can be checked directly by JavaScript code. Each constraint is represented in the logic of strings and integer arithmetic.</p>
    <p>Dynamic Constraints can only be checked after communicating with the server.</p>
    <p>At form submission, the client communicates with the server asynchronously. The client-side code for checking dynamic constraints consists of: ? Sending requests with form field values to the server ? processing status changes from the servers responses into real-time feedback</p>
    <p>for the user.</p>
    <p>For each form field, WAVES generates an event handler that first checks the static constraints for an error and if none is found then checks the dynamic constraints.</p>
    <p>WAVES: Synthesizing client-side validation code</p>
    <p>Server Analysis</p>
    <p>Extract the input validation constraints checked by the web server. Fserver = All conditions on user inputs that must be satisfied to</p>
    <p>reach sensitive operations</p>
    <p>Dynamic program analysis</p>
    <p>! Submitting benign inputs to the server and inspecting the sequence of instructions that the server executes.</p>
    <p>Select input validation constraints (constraints that when falsified cause the server to reject the input) and Identify type of these constraints:</p>
    <p>Dynamic Constraints: Constraints which are dependent on the servers environment. (Eg. the user ID should be unique in database) Static Constraints: Constraints which are not dependent on the servers environment. (Eg. the alphanumeric constraint on user ID and the password equivalence constraint)</p>
    <p>Server-side code generation</p>
    <p>The asynchronous messages sent by the client to check the dynamic constraints for a form field can only be responded to by server stubs (special-purpose server-side code) which:</p>
    <p>! Checks constraints in the same way the original server code does. ! Handles missing unrelated data. ! Handles the servers environment</p>
    <p>? Session data ? Database ? File operations</p>
    <p>Automatic generation of server stubs: Dependency Analysis of the variables appeared in the dynamic constraint Program Slicing: pruning out instructions which are not relevant to Simplification and Optimization of the generated server stub.</p>
    <p>Results</p>
    <p>We selected three medium to large and popular PHP applications. 1. B2Evolution 2. Webid 3. WebSubRev</p>
    <p>Two of the chosen forms (B2Evolution and WeBid) do not contain any client-side validation; the other form (WebSubRev) already includes client-side validation. WAVES was able to synthesize over 83% of the constraints identified by the ideal synthesis. Static constraints, those that do not rely on server-side state, dominated the total synthesized constraints (27 / 35); for each of the 8 dynamic constraints, WAVES synthesized an AJAX stub.</p>
    <p>Application Ideal Synthesis WAVES Synthesis</p>
    <p>ExistingValidation</p>
    <p>B2Evolution 10+1 7+1 0 WeBid 17+8 16+6 0 WebSubRev 5+1 4+1 5+0</p>
    <p>Using WAVES, the new forms are retrofitted with interactivity which improves the overall usability of the application. A synthesized client provides instant feedback as the user interacts with the form.</p>
    <p>WAVES generated stubs which were much smaller in size than the portion of the application relevant to validation  in most cases less than 25% of the original LOC.</p>
    <p>The round trip time taken by stubs in responding to AJAX requests, averaged in the range of 43 to 164 milliseconds.</p>
    <p>Offline Online Application Static</p>
    <p>Complexity Dynamic Complexity</p>
    <p>Synthesis Time (sec)</p>
    <p>Avg Stub Size (eLOC)</p>
    <p>Avg Server RT (ms)</p>
    <p>Avg Stub RT (ms)</p>
    <p>B2Evolution 52 9 522 27 (26%) 65 43 WeBid 17 18 281 40 (16%) 373 164 WebSubRev 25 5 12921 29 (25%) 633 76</p>
    <p>Conclusion</p>
    <p>Our approach allows the developer to improve security of the web application by focusing only on the server side development of validation.</p>
    <p>We developed novel techniques for automatic synthesis of the client side validation.</p>
    <p>Our experimental results are promising: they indicate that automated synthesis can result in highly interactive web applications that are competitive in terms of performance and rival human-generated code in terms of coverage.</p>
    <p>Insufficient client-side validation can cause repeat submissions, which result in additional server workload and bandwidth use. In the original form submission logic, whenever the user commits an error she needs to retransmit all form data to the server, and the server needs to reprocess the input.</p>
    <p>WAVES effectively offloads validation onto the client, the server spends less resources on form processing , and the overall performance of the application</p>
    <p>improves.</p>
    <p>Related Publication:</p>
    <p>- Nazari Skrupsky, Maliheh Monshizadeh, Prithvi Bisht, Timothy Hinrichs, V.N. Venkatakrishnan, Lenore Zuck. Dont Repeat Yourself: Automatically Synthesizing Client-side Validation Code for Web Applications In proceedings of USENIX WebApps12 Conference on Web Application Development, Boston, 2012.</p>
    <p>- Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, and V. N. Venkatakrishnan. WAPTEC: Whitebox Analysis of Web Applications for Parameter Tampering Exploit Construction. In Proceedings of the 18th ACM conference on Computer and communications security (CCS 11). ACM, New York, NY</p>
    <p>- Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, Radoslaw Bobrowicz, and V. N. Venkatakrishnan. NoTamper: Automatic Blackbox Detection of Parameter Tampering Opportunities in Web Applications. In Proceedings of the 17th ACM conference on Computer and communications security (CCS 10). ACM, New York.</p>
    <p>Acknowledgments:</p>
    <p>This work was partially supported by National Science Foundation grants CNS 0917229, CNS 0845894, CNS 1065537, DGE 1069311.</p>
    <p>mmonsh2@uic.edu, {nskrou2, pbisht2, hinrichs, venkat, zuck}@uic.edu</p>
    <p>Input validation must always occur at the server</p>
  </div>
  <div class="page">
    <p>Automatic synthesis of input validation for client-side</p>
    <p>Benefits:  Development Efficiency  Greater Compatibility  Code Efficiency</p>
    <p>WAVES (Web Application Validation Extraction and Synthesis)</p>
  </div>
  <div class="page">
    <p>Inference of server-side constraints  Server-side: Variables  Client-side: Form Fields</p>
    <p>Preservation of application logic and security</p>
    <p>Validation involving the server state</p>
    <p>Automatic Synthesis Challenges</p>
  </div>
  <div class="page">
    <p>WAVES Architecture</p>
    <p>Non-interactive Web Application</p>
    <p>Success Input</p>
    <p>Server Analysis</p>
    <p>Code Synthesis Integration</p>
    <p>Interactive Web Application</p>
    <p>Constraints</p>
    <p>WAVES</p>
  </div>
  <div class="page">
    <p>WAVES 1- Server Analysis</p>
    <p>Fserver = All conditions on user inputs that must be satisfied to reach sensitive</p>
    <p>operations</p>
  </div>
  <div class="page">
    <p>WAVES 1- Server Analysis</p>
    <p>Non-interactive Web Application</p>
    <p>WAVES - Server Analysis</p>
    <p>Success Input</p>
    <p>Instrumented Server</p>
    <p>Taint Analysis</p>
    <p>Execution Trace</p>
    <p>Constraints: Ci</p>
    <p>String Solver</p>
    <p>Constraints representing</p>
    <p>Error Conditions</p>
    <p>inputs satisfying Ci</p>
    <p>Instrumented Server</p>
    <p>Execution Traces</p>
    <p>Taint Analysis</p>
  </div>
  <div class="page">
    <p>Static Constraints  pass1 == pass2</p>
    <p>Dynamic Constraints: Dependent on the server state</p>
    <p>userID is UNIQUE</p>
    <p>WAVES 2- Synthesis</p>
  </div>
  <div class="page">
    <p>WAVES 2- Synthesis</p>
    <p>WAVES - Code Synthesis</p>
    <p>Constraints representing</p>
    <p>Error Conditions</p>
    <p>Client-side Code Generator</p>
    <p>Server Stub Generator</p>
    <p>Dependency Analysis</p>
    <p>Program Slicing</p>
    <p>Server code</p>
    <p>Server Stub</p>
    <p>JavaScript code</p>
    <p>Dynamic Constraints</p>
    <p>Static</p>
    <p>Constraints</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Three medium to large and popular PHP applications  B2Evolution  WeBid  WebSubRev</p>
    <p>Successfully synthesized 83% of the constraints</p>
    <p>Generated Stubs are much smaller (less than 26%)</p>
    <p>Improved RTT 43 to 164 ms (originally 65 to 633 ms)</p>
  </div>
  <div class="page">
    <p>Code efficiency  Interactive applications  Improved performance</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Related Papers</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
