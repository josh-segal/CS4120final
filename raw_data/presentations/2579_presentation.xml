<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Easy Freshness with Pequod Cache Joins</p>
    <p>Bryan Kate, Eddie Kohler, Mike Kester Harvard University</p>
    <p>Yandong Mao, Neha Narula, Robert Morris MIT</p>
  </div>
  <div class="page">
    <p>tl;dr</p>
    <p>Web application caches should support materialized views natively.</p>
    <p>In-cache materialized views are easy to use and</p>
    <p>have good performance.</p>
  </div>
  <div class="page">
    <p>application cache</p>
    <p>fast key-value cache  examples: memcached, Redis</p>
    <p>offloads reads from database</p>
    <p>managed by application developer  assume burden of maintenance</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>timeline database query</p>
    <p>SELECT post.time, post.poster, post.content FROM post JOIN sub WHERE sub.follows = post.poster AND sub.user = 'bk' AND post.time &gt;= 100 ORDER BY post.time;</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>timeline materialized view CREATE MATERIALIZED VIEW tline AS SELECT sub.user, post.time, post.poster, post.content FROM post JOIN sub WHERE sub.follows = post.poster; SELECT * FROM tline WHERE tline.user = bk AND tline.time &gt;= 100 ORDER BY tline.time;</p>
    <p>arrange data for quick reading  computation happens in advancegood!  simple query on materialized datagood!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>easy, but slow</p>
    <p>the database becomes a bottleneck  most important job: durable storage  handling reads + writes may be too much  better to offload reads  implementation issues (locks, transactions, )</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Pequod</p>
    <p>a distributed application cache</p>
    <p>materialized views in a key-value cache  operations: get, put, scan, plus join</p>
    <p>good performance and programmability</p>
  </div>
  <div class="page">
    <p>advanced materialized views</p>
    <p>simple materialized views are a bad fit for caches  need advanced features from recent research</p>
    <p>partial: only portions are materialized as needed  dynamic: portions are selected based on requests  incremental updates: track dependencies between data  eager updates  lazy updates  distributed  in an ordered key-value cache!</p>
  </div>
  <div class="page">
    <p>KV materialized views?</p>
    <p>CREATE MATERIALIZED VIEW tline AS SELECT sub.user. post.time, post.poster, post.content FROM post JOIN sub WHERE sub.follows = post.poster;</p>
    <p>but Pequod only understands get, put, scan!  want key-value for performance  how to represent the relations needed for views?</p>
  </div>
  <div class="page">
    <p>Pequod cache joins</p>
    <p>tline|&lt;user&gt;|&lt;time&gt;|&lt;poster&gt; = check sub|&lt;user&gt;|&lt;poster&gt; copy post|&lt;poster&gt;|&lt;time&gt;;</p>
    <p>CREATE MATERIALIZED VIEW tline AS SELECT sub.user. post.time, post.poster, post.content FROM post JOIN sub WHERE sub.follows = post.poster;</p>
  </div>
  <div class="page">
    <p>Pequod cache joins</p>
    <p>tline|&lt;user&gt;|&lt;time&gt;|&lt;poster&gt; = check sub|&lt;user&gt;|&lt;poster&gt; copy post|&lt;poster&gt;|&lt;time&gt;;</p>
    <p>CREATE MATERIALIZED VIEW tline AS SELECT sub.user. post.time, post.poster, post.content FROM post JOIN sub WHERE sub.follows = post.poster;</p>
  </div>
  <div class="page">
    <p>Pequod cache joins</p>
    <p>tline|&lt;user&gt;|&lt;time&gt;|&lt;poster&gt; = check sub|&lt;user&gt;|&lt;poster&gt; copy post|&lt;poster&gt;|&lt;time&gt;; scan(tline|bk|100, tline|bk)</p>
    <p>CREATE MATERIALIZED VIEW tline AS SELECT sub.user. post.time, post.poster, post.content FROM post JOIN sub WHERE sub.follows = post.poster;</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>scan(tline|bk|100, tline|bk)</p>
  </div>
  <div class="page">
    <p>scan(tline|bk|100, tline|bk) tline|&lt;user&gt;|&lt;time&gt;|&lt;poster&gt; = check sub|&lt;user&gt;|&lt;poster&gt; copy post|&lt;poster&gt;|&lt;time&gt;;</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>scale</p>
    <p>distributed Pequod scales to large data sets  key design choice: computation is local</p>
    <p>base data is partitioned  example: sub, post tables</p>
    <p>cache joins can be computed anywhere  base data transparently replicated as necessary</p>
  </div>
  <div class="page">
    <p>distributed deployment</p>
  </div>
  <div class="page">
    <p>distributed deployment (read)</p>
  </div>
  <div class="page">
    <p>distributed deployment (read)</p>
  </div>
  <div class="page">
    <p>distributed deployment (read)</p>
  </div>
  <div class="page">
    <p>distributed deployment (write)</p>
  </div>
  <div class="page">
    <p>distributed deployment (write)</p>
  </div>
  <div class="page">
    <p>other features</p>
    <p>advanced cache joins  interleaved: collocate different kinds of data  stacked  materialized, non-materialized, or snapshot  aggregates</p>
    <p>eviction</p>
    <p>consistency 38</p>
  </div>
  <div class="page">
    <p>evaluation</p>
    <p>Twitter-like benchmark  based on 2009 Twitter social graph  check, subscribe, post (100:10:1)</p>
    <p>evaluate potential bottlenecks in Pequod  database omitted in experiments  clients write data directly to Pequod</p>
  </div>
  <div class="page">
    <p>system comparison</p>
    <p>Do cache joins have key-value cache performance?</p>
    <p>goal: perform no worse than existing caches</p>
    <p>compare with:  fast KV caches: Redis, memcached  DB-as-cache: Postgres (in-memory, tuned)</p>
    <p>Postgres uses materialized views (triggers)</p>
  </div>
  <div class="page">
    <p>system comparison</p>
    <p>Pequod Redis memcached Postgres</p>
    <p>Q P</p>
    <p>S (</p>
    <p>th ou</p>
    <p>sa nd</p>
    <p>s / s</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>scaling Pequod</p>
    <p>Will adding servers improve performance? What is the overhead of data movement?</p>
    <p>cluster on Amazon EC2</p>
    <p>two-tier deployment  subscriptions, posts on base servers  timelines executed on compute servers  replication is required</p>
  </div>
  <div class="page">
    <p>scaling Pequod</p>
    <p>Q P</p>
    <p>S (</p>
    <p>m ill</p>
    <p>io n s / s</p>
    <p>)</p>
    <p>Compute servers</p>
  </div>
  <div class="page">
    <p>scaling Pequod (overhead)</p>
    <p>steady-state bandwidth for data movement  10  16% (larger fanout)</p>
    <p>total memory consumption  290  297GB at base (subscription metadata)  1.2  1.5TB at compute (duplicate data)</p>
    <p>overhead is noticeable but not crippling 44</p>
  </div>
  <div class="page">
    <p>selected related work</p>
    <p>DMV [Zhou et al, 2007]  partial, dynamic database materialized views</p>
    <p>DBProxy [Amiri et al, 2002-3]  distributed cache built from databases  incremental updates to cached results</p>
    <p>MV in PNUTS [Agrawal et al, 2009]  materialized views in a key-value store  incremental updates, not partial</p>
  </div>
  <div class="page">
    <p>conclusion</p>
    <p>Pequod cache joins  programmability of materialized views  performance of a key-value cache  code release soon! github.com/bryankate</p>
  </div>
</Presentation>
