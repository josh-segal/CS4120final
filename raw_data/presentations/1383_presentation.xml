<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Shadow-Bitcoin: Scalable Simulation via Direct Execution of Multi-threaded Applications</p>
    <p>Workshop on Cyber Security Experimentation and Test</p>
    <p>August 10th, 2015</p>
    <p>Andrew Miller, University of Maryland amiller@cs.umd.edu Rob Jansen, U.S. Naval Research Laboratory rob.g.jansen@nrl.navy.mil</p>
  </div>
  <div class="page">
    <p>[video removed for space reasons]</p>
  </div>
  <div class="page">
    <p>Goals of this Work</p>
    <p>Directly execute Bitcoin inside the Shadow network simulator</p>
    <p>Run a local and private Bitcoin network</p>
    <p>Explore performance attacks on Bitcoin using our simulation framework</p>
  </div>
  <div class="page">
    <p>Why should anyone care?</p>
    <p>Expedite research and development</p>
    <p>Evaluate software mods or attacks without harming real users</p>
    <p>Understand holistic effects before deployment</p>
    <p>Our techniques allow simulation support for many new applications and domains</p>
  </div>
  <div class="page">
    <p>SHADOW BACKGROUND Thread 1</p>
  </div>
  <div class="page">
    <p>What is Shadow?</p>
    <p>Parallel discrete-event network simulator</p>
    <p>Emulates POSIX C API on Linux, directly executes apps as plug-ins</p>
    <p>Simulates time, network, CPU</p>
    <p>Models routing, latency, bandwidth</p>
  </div>
  <div class="page">
    <p>Bootstrapping Shadow</p>
  </div>
  <div class="page">
    <p>Virtual Network Configuration</p>
  </div>
  <div class="page">
    <p>Virtual Host Configuration</p>
  </div>
  <div class="page">
    <p>Simulation Engine Main event</p>
    <p>queue</p>
    <p>Worker threads</p>
    <p>Virtual hosts</p>
    <p>Virtual processes</p>
  </div>
  <div class="page">
    <p>Simulation Engine Compile with Clang, extract</p>
    <p>state addresses with LLVM pass Addr Val</p>
    <p>Each program loaded only once</p>
    <p>per thread</p>
  </div>
  <div class="page">
    <p>Simulation Engine</p>
    <p>Save default values on initial</p>
    <p>load</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Copy state for each virtual process</p>
  </div>
  <div class="page">
    <p>Simulation Engine</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Addr Val</p>
    <p>Swap state into/out of memory as virtual</p>
    <p>processes are switched</p>
  </div>
  <div class="page">
    <p>Function Interposition LD_PRELOAD=/home/rob/libpreload.so</p>
    <p>libpreload (socket, write, )</p>
    <p>App Libraries (libc, )</p>
    <p>Shadow Engine</p>
    <p>App Plug-in</p>
  </div>
  <div class="page">
    <p>Function Interposition LD_PRELOAD=/home/rob/libpreload.so</p>
    <p>hooks</p>
    <p>libpreload (socket, write, )</p>
    <p>App Libraries (libc, )</p>
    <p>Shadow Engine</p>
    <p>App Plug-in</p>
  </div>
  <div class="page">
    <p>Function Interposition</p>
    <p>libpreload (socket, write, )</p>
    <p>LD_PRELOAD=/home/rob/libpreload.so</p>
    <p>hooks fopen App</p>
    <p>Libraries (libc, )</p>
    <p>Shadow Engine</p>
    <p>App Plug-in</p>
  </div>
  <div class="page">
    <p>Function Interposition</p>
    <p>libpreload (socket, write, )</p>
    <p>LD_PRELOAD=/home/rob/libpreload.so</p>
    <p>so ck</p>
    <p>et</p>
    <p>hooks fopen App</p>
    <p>Libraries (libc, )</p>
    <p>Shadow Engine</p>
    <p>App Plug-in</p>
  </div>
  <div class="page">
    <p>Function Interposition</p>
    <p>libpreload (socket, write, )</p>
    <p>LD_PRELOAD=/home/rob/libpreload.so</p>
    <p>w ri</p>
    <p>te</p>
    <p>App Libraries (libc, )</p>
    <p>Shadow Engine</p>
    <p>App Plug-in</p>
    <p>hooks fopen</p>
  </div>
  <div class="page">
    <p>Function Interposition</p>
    <p>libpreload (socket, write, )</p>
    <p>LD_PRELOAD=/home/rob/libpreload.so</p>
    <p>w ri</p>
    <p>te</p>
    <p>App Libraries (libc, )</p>
    <p>Shadow Engine</p>
    <p>App Plug-in</p>
    <p>hooks fopen</p>
    <p>Single call stack, must return</p>
  </div>
  <div class="page">
    <p>Shadow limitations</p>
    <p>App shall not block  Call any blocking library function (sleep)  Use blocking descriptors (read/write, send/recv)  Wait for events (select, poll)  Busy wait (infinite loop)</p>
  </div>
  <div class="page">
    <p>Shadow limitations</p>
    <p>App shall not block  Call any blocking library function (sleep)  Use blocking descriptors (read/write, send/recv)  Wait for events (select, poll)  Busy wait (infinite loop)</p>
    <p>App shall not spawn  Multiple threads (pthreads)  Multiple processes (fork, exec)</p>
  </div>
  <div class="page">
    <p>Shadow limitations</p>
    <p>App shall not block  Call any blocking library function (sleep)  Use blocking descriptors (read/write, send/recv)  Wait for events (select, poll)  Busy wait (infinite loop)</p>
    <p>App shall not spawn  Multiple threads (pthreads)  Multiple processes (fork, exec)</p>
    <p>Problems! Bitcoin blocks</p>
    <p>and spawns threads! L</p>
  </div>
  <div class="page">
    <p>RUNNING BITCOIN IN SHADOW Thread 2</p>
  </div>
  <div class="page">
    <p>Architectural Update</p>
    <p>New virtual thread layer</p>
    <p>Virtual processes</p>
  </div>
  <div class="page">
    <p>Non-blocking Virtual Threads</p>
    <p>GNU portable threads (pth) to the rescue</p>
    <p>User-land cooperative threading (non-preemptive)</p>
    <p>Single OS thread, multiple portable threads, supports pthread API</p>
    <p>Supports many blocking IO functions: uses make/set/get/swapcontext() magic to jump program stacks</p>
  </div>
  <div class="page">
    <p>Limitations of GNU pth</p>
    <p>Not reentrant or thread-safe</p>
    <p>Relies on select() to poll events when all portable threads would block (max 1024 fds)</p>
  </div>
  <div class="page">
    <p>If you dont like it, fork it</p>
  </div>
  <div class="page">
    <p>Reentrant Portable Threads (rpth)</p>
    <p>Not reentrant or thread-safe</p>
    <p>Relies on select() to poll events when all portable threads would block (max 1024 fds)</p>
  </div>
  <div class="page">
    <p>Reentrant Portable Threads (rpth)</p>
    <p>Not reentrant or thread-safe  Replace global state with user-supplied states  Thread-local storage for current state pointer</p>
    <p>Relies on select() to poll events when all portable threads would block (max 1024 fds)</p>
  </div>
  <div class="page">
    <p>Reentrant Portable Threads (rpth)</p>
    <p>Not reentrant or thread-safe  Replace global state with user-supplied states  Thread-local storage for current state pointer</p>
    <p>Relies on select() to poll events when all portable threads would block (max 1024 fds)</p>
    <p>Replace blocking select with asynchronous epoll  Add API support for epoll and timers</p>
  </div>
  <div class="page">
    <p>Integrating rpth with Shadow</p>
    <p>Shadow thread</p>
    <p>Each virtual process has a private rpth instance</p>
  </div>
  <div class="page">
    <p>Integrating rpth with Shadow</p>
    <p>Shadow thread</p>
    <p>main thread</p>
    <p>Spawns an rpth thread to call the program main()</p>
    <p>function</p>
  </div>
  <div class="page">
    <p>Integrating rpth with Shadow</p>
    <p>Shadow thread</p>
    <p>main thread</p>
    <p>spawned threads</p>
    <p>Program may spawn auxiliary threads</p>
  </div>
  <div class="page">
    <p>rpth scheduler</p>
    <p>Execution Flow with rpth</p>
    <p>Time</p>
    <p>Swap in virtual process and rpth state</p>
    <p>Swap out virtual process and rpth state</p>
    <p>Return to Shadow thread when all spawned rpth threads would block:</p>
  </div>
  <div class="page">
    <p>Creating a Private Bitcoin Network</p>
    <p>Crawled Bitcoin with CoinScope to learn topology  6081 nodes (40% US, 40% EU)</p>
    <p>Geo-locate nodes based on IP address  Bootstrap blockchain  Bitcoin block and</p>
    <p>index files are COW  enables aliasing of these large state files</p>
    <p>Inject new transactions to each node to simulate spending</p>
  </div>
  <div class="page">
    <p>Transaction Propagation</p>
    <p>Faster Slower</p>
  </div>
  <div class="page">
    <p>Simulation Resource Usage</p>
    <p>R ea</p>
    <p>lT im</p>
    <p>e (h</p>
    <p>)</p>
    <p>simulation run time</p>
    <p>M ax</p>
    <p>im um</p>
    <p>R es</p>
    <p>id en</p>
    <p>tS et</p>
    <p>S iz</p>
    <p>e (G</p>
    <p>iB )</p>
    <p>simulation memory usage</p>
    <p>For each node: ~2.1 seconds to run 120 ticks</p>
    <p>(~57x speedup)</p>
    <p>For each node: ~51.2 MiB consumed</p>
  </div>
  <div class="page">
    <p>ATTACKING BITCOIN Thread 3</p>
  </div>
  <div class="page">
    <p>Transaction Handling</p>
    <p>Transactions form a directed graph  Tx with parent gets handled immediately  Validate Tx, verify up to 40 sigs  Senders of invalid Txs are marked as bad, and</p>
    <p>eventually disconnected</p>
  </div>
  <div class="page">
    <p>Transaction Handling</p>
    <p>Transactions form a directed graph  Tx with parent gets handled immediately  Validate Tx, verify up to 40 sigs  Senders of invalid Txs are marked as bad, and</p>
    <p>eventually disconnected</p>
    <p>What if Tx has no parent?  Tx w/o parent gets queued as orphan  Once queued, sender of orphan is forgotten  When new Tx arrives, all linked orphans are</p>
    <p>validated (40 sig verifications each)</p>
  </div>
  <div class="page">
    <p>Dos Attack</p>
    <p>Goal: Freeze a victim node  Fill up orphans queue with invalid Txs  Send valid parents with outputs linked to orphans  Node checks all orphans</p>
  </div>
  <div class="page">
    <p>Dos Attack</p>
    <p>Goal: Freeze a victim node  Fill up orphans queue with invalid Txs  Send valid parents with outputs linked to orphans  Node checks all orphans</p>
    <p>Freeze for 4+ mins, Peers will abort, No one to blame</p>
  </div>
  <div class="page">
    <p>RAM Consumption</p>
    <p>While MessageHandler thread is frozen, SocketHandler thread buffers peer data</p>
    <p>Disconnect peer if |recvBuf| &gt; 5 MiB</p>
  </div>
  <div class="page">
    <p>RAM Consumption</p>
    <p>While MessageHandler thread is frozen, SocketHandler thread buffers peer data</p>
    <p>Disconnect peer if |recvBuf| &gt; 5 MiB</p>
    <p>Attack  Establish 100+ connections to victim  While victim is frozen, fill recvBuf to max  Can crash node if &lt; 500 MiB available</p>
  </div>
  <div class="page">
    <p>Attack Time and Cost Profile</p>
    <p>CPU exhaustion ready after 12.8 seconds</p>
  </div>
  <div class="page">
    <p>Fixed in commit 0608780</p>
    <p>Fix Applied to Bitcoin</p>
  </div>
  <div class="page">
    <p>think like an adversary</p>
    <p>shadow.github.io github.com/shadow</p>
    <p>robgjansen.com, @robgjansen rob.g.jansen@nrl.navy.mil</p>
    <p>Summary/Conclusion</p>
    <p>Enhanced Shadow to support applications that block and use multiple threads</p>
    <p>Wrote new Bitcoin plug-in for Shadow  Created Bitcoin network for simulation  Found and fixed orphans attack using new</p>
    <p>simulator architecture</p>
  </div>
</Presentation>
