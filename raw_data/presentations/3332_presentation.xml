<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PIkit: A New Kernel-Independent Processor-Interconnect Rootkit</p>
    <p>August 10, 2016 Wonjun Song, Hyunwoo Choi, Junhong Kim, Eunsoo Kim,</p>
    <p>Yongdae Kim, John Kim Korea Advanced Institute of Science and Technology</p>
    <p>USENIX Security Symposium 2016</p>
    <p>SysSec System Security Lab.</p>
  </div>
  <div class="page">
    <p>Rootkit Background  Rootkit: a malicious software running on compromised machines</p>
    <p>without being detected.</p>
    <p>Typical root attack scenario</p>
    <p>Different types of rootkits by payloads and by vulnerabilities</p>
    <p>Goal: One time root permission</p>
    <p>Approaches: Vulnerability Exploitation Social Engineering</p>
    <p>Goal: Rootkit installation using SW/HW vulnerabilities</p>
    <p>Requirement: Remove Traces of Intrusion Hiding its presence</p>
    <p>Goal: Malicious activity using payloads</p>
    <p>Example: Sniff Passwords Steal Files</p>
  </div>
  <div class="page">
    <p>Rootkit Classification</p>
    <p>Malicious Payloads</p>
    <p>User-Level Kernel-Level</p>
    <p>V u ln</p>
    <p>e ra</p>
    <p>b il it ie</p>
    <p>s Software</p>
    <p>Hardware</p>
    <p>T0rn (SANS 00), Lrk5 (00),</p>
    <p>dica (02), etc.</p>
    <p>ROR (USESEC 09), DKOM (BLACK HAT 04),</p>
    <p>knark (99), etc.</p>
    <p>Cloaker (S&amp;P 08), Shadow Walker (BLACK HAT 05)</p>
    <p>This work (PIkit)</p>
    <p>T0rn (SANS 00), Lrk5 (00),</p>
    <p>dica (02), etc.</p>
    <p>ROR (USESEC 09), DKOM (BLACK HAT 04),</p>
    <p>knark (99), etc.</p>
    <p>Cloaker (S&amp;P 08), Shadow Walker (BLACK HAT 05)</p>
  </div>
  <div class="page">
    <p>High-level overview of PIkit</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Memory-Mapped Registers</p>
    <p>Kernel-Independent (No code modification or injection)</p>
    <p>Malicious Payload A very stealthy rootkit</p>
    <p>(only simple read/write memory operations)</p>
    <p>Before/After PIkit installation</p>
    <p>Vulnerable hardware feature (Processor-interconnect in x86 multi-socket server) DRAM Address Mapping</p>
  </div>
  <div class="page">
    <p>Analysis of Processor-Interconnect in Multi-Socket Servers</p>
  </div>
  <div class="page">
    <p>Multi-socket (NUMA) Server</p>
    <p>Processor-Interconnect</p>
    <p>* DELL PowerEdge 6950</p>
    <p>AMD HyperTransport (HT)</p>
    <p>Intel Quick-Path Interconnect (QPI)</p>
    <p>DRAM Memory</p>
    <p>x 4</p>
    <p>Processor x 4</p>
  </div>
  <div class="page">
    <p>Multi-socket Server Market Share</p>
    <p>In datacenters and high-performance computing, over 80% of the x86 server are multi-socket servers (from IDC)</p>
  </div>
  <div class="page">
    <p>Processor-Interconnect Overview</p>
    <p>NORTHBRIDGE</p>
    <p>CORE 0</p>
    <p>CORE 1</p>
    <p>CORE</p>
    <p>N</p>
    <p>ROUTER</p>
    <p>DRAM</p>
    <p>DRAM</p>
    <p>MC</p>
    <p>NODE 0</p>
    <p>NORTHBRIDGE</p>
    <p>CORE 0</p>
    <p>CORE 1</p>
    <p>CORE</p>
    <p>N</p>
    <p>ROUTER</p>
    <p>DRAM</p>
    <p>DRAM</p>
    <p>MC</p>
    <p>NODE 2</p>
    <p>NORTHBRIDGE</p>
    <p>CORE 0</p>
    <p>CORE 1</p>
    <p>CORE</p>
    <p>N</p>
    <p>ROUTER MC</p>
    <p>NODE 1</p>
    <p>DRAM</p>
    <p>DRAM</p>
    <p>NORTHBRIDGE</p>
    <p>CORE 0</p>
    <p>CORE 1</p>
    <p>CORE</p>
    <p>N</p>
    <p>ROUTER MC</p>
    <p>NODE 4</p>
    <p>DRAM</p>
    <p>DRAM</p>
    <p>*MC: Memory Controller</p>
    <p>Packet</p>
  </div>
  <div class="page">
    <p>Memory access in Processor-Interconnect</p>
    <p>NORTHBRIDGE</p>
    <p>CORE 0</p>
    <p>CORE 1</p>
    <p>CORE</p>
    <p>N</p>
    <p>ROUTER MC</p>
    <p>NODE 2</p>
    <p>DRAM</p>
    <p>DRAM</p>
    <p>NORTHBRIDGE</p>
    <p>CORE 0</p>
    <p>CORE 1</p>
    <p>CORE</p>
    <p>N</p>
    <p>ROUTER MC</p>
    <p>NODE 4</p>
    <p>DRAM</p>
    <p>DRAM</p>
    <p>SRC ID</p>
    <p>DEST ID</p>
    <p>TYPE</p>
    <p>Head flit Body flits Tail flit</p>
    <p>Packet</p>
    <p>CORE 1</p>
    <p>Base Address Limit Address Destination ID</p>
    <p>DRAM Address Mapping Table</p>
    <p>Memory Request Packet</p>
    <p>R</p>
    <p>Dest Node ID Output Port</p>
    <p>Address Range Destination Node</p>
    <p>information Currently used entriesReserved for scalability</p>
    <p>If we are able to modify the DRAM mapping table, we can send the packet to wherever we want.</p>
  </div>
  <div class="page">
    <p>DRAM Address Mapping Table</p>
    <p>Base Address Limit Address Destination ID</p>
    <p>Configurability</p>
    <p>No integrity checking</p>
    <p>Extra entries</p>
  </div>
  <div class="page">
    <p>PIkit Design &amp; Implementation</p>
  </div>
  <div class="page">
    <p>High-Level Overview of PIkit installation</p>
    <p>SOFTWARE STACK</p>
    <p>USERLEVEL APPLICATION</p>
    <p>OPERATING SYSTEM SYSTEM SOFTWARE LAYER</p>
    <p>APPLICATION LAYER</p>
    <p>ROUTER</p>
    <p>NORTHBRIDGE</p>
    <p>ROUTER</p>
    <p>NORTHBRIDGENORTHBRIDGE NORTHBRIDGE</p>
    <p>Software</p>
    <p>Hardware</p>
    <p>ROUTER ROUTER</p>
    <p>VICTIM ADDR</p>
    <p>REGION</p>
    <p>Main Memory</p>
    <p>NODE 0 memory NODE 1 memory NODE 2 memory NODE 3 memory</p>
    <p>MEMORY REQUEST NODE 0 NODE 1 NODE 2 NODE 3</p>
    <p>ROOKIT MONITORING</p>
    <p>ATTACK ADDR</p>
    <p>REGION</p>
    <p>Defining Attack Address Region</p>
    <p>READ/WRITE operation</p>
    <p>PIkit</p>
    <p>Modifying DRAM Address Mapping Table</p>
    <p>Cannot detect PIkit at software-level</p>
  </div>
  <div class="page">
    <p>Defining Attack Address Region  Only the attacker should have access to a particular memory</p>
    <p>region.  To prevent any unknown system behaviors (system crash)</p>
    <p>The memory range of the attack address region needs to be equal to resolution of the memory mapping table.  ex) AMD Opteron 6128: 16 MB  Can take advantage of huge pages (malloc for 1 GB huge page)</p>
    <p>The process that received the memory allocation is continuously running.</p>
  </div>
  <div class="page">
    <p>Modifying DRAM Address Mapping Table  Need to translate VA (virtual address) to PA (physical address)</p>
    <p>Attack Address Region: VA, DRAM Address Mapping: PA  e.g. /proc/(pid)/pagemap</p>
    <p>Memory-mapped register (AMD: 8 set of DRAM Base/Limit Registers)  DRAM Base Address Register</p>
    <p>DRAM Limit Address Register</p>
    <p>DramBase (RW)  IntlvEn (RW)  WE (RW) 48 0</p>
    <p>RE (RW)</p>
    <p>DramLimit (RW)  IntlvSel (RW)  DstNode (RW)</p>
    <p>DramBase (RW)</p>
    <p>DramLimit (RW) DstNode (RW)</p>
    <p>With root permission, the registers can be modified by using system read/write commands (eg. setpci)</p>
  </div>
  <div class="page">
    <p>How to modify DRAM Address Mapping Table</p>
    <p>Base Address Limit Address Dest ID</p>
    <p>RESERVED RESERVED RESERVED4 0x07C0000000 0x07C10000005 0x07C2000000 0x081F000000 16</p>
  </div>
  <div class="page">
    <p>Example  AMD Opteron 6128 server</p>
    <p>Node 1 NORTHBRIDGE</p>
    <p>ROUTER MEMORY</p>
    <p>CONTROLLER</p>
    <p>MEMORY</p>
    <p>Node 2 NORTHBRIDGE</p>
    <p>ROUTER MEMORY</p>
    <p>CONTROLLER</p>
    <p>MEMORY</p>
    <p>ADDRESS MAP ADDRESS MAP</p>
    <p>Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved Reserved</p>
    <p>Base Addr Limit Addr Dest Node ID</p>
    <p>DRAM Address Mapping Table</p>
    <p>Dest Node ID Link</p>
    <p>Routing Table</p>
    <p>RESERVED RESERVED RESERVED Node 2 NORTHBRIDGE</p>
    <p>ROUTER MEMORY</p>
    <p>CONTROLLER</p>
    <p>MEMORY</p>
    <p>ADDRESS MAP</p>
    <p>Attack Region: 0x07C0  0x07C1</p>
  </div>
  <div class="page">
    <p>Extending PIkit to Intel Architecture</p>
    <p>AMD Opteron 6128 Intel 7500 series</p>
    <p>Memory-mapped Registers</p>
    <p>DRAM Base/Limit registers Source Address Decoder (SAD),</p>
    <p>Lookup Location Source node Source node,</p>
    <p>Structure BASE : LIMIT : DEST SAD  LIMIT : DEST : VALID</p>
    <p>Granularity 16MB 64MB</p>
    <p># of entries 8 20</p>
    <p>Target Address Decoder (TAD)</p>
    <p>Destination node</p>
    <p>TAD  LIMIT : OFFSET</p>
  </div>
  <div class="page">
    <p>Modifying TAD</p>
    <p>Attack Address Region</p>
    <p>Victim Address Region 0</p>
    <p>Low Addr</p>
    <p>High Addr</p>
    <p>Low Addr</p>
    <p>High Addr</p>
    <p>Victim Address Region 1</p>
    <p>NODE 0 MEMORY NODE 1 MEMORY</p>
    <p>TAD limit/offset</p>
    <p>Based on the offset value, a fine-grained attack possible.</p>
  </div>
  <div class="page">
    <p>Malicious User-Level Payloads</p>
  </div>
  <div class="page">
    <p>Possible Attacks</p>
    <p>Attack Name Memory Access</p>
    <p>Attack Type Experiment Setup</p>
    <p>System corruption attack</p>
    <p>- Denial of service</p>
    <p>Bash keyboard buffer attack</p>
    <p>Read-Only Key stroke sniffing</p>
    <p>Bash shell credential object attack</p>
    <p>Read-Write Privilege escalation</p>
    <p>Shared library attack Read-Write Hidden function (Backdoor)</p>
    <p>- Dell PE R815 - AMD Opteron 6128 - 4 nodes - Linux kernel 3.6.0</p>
    <p>- Dell PE R620 - Intel Xeon E5-2650 - 2 nodes - Linux kernel 3.6.0</p>
  </div>
  <div class="page">
    <p>Overview of Bash Shell Credential Object Attack</p>
    <p>VA</p>
    <p>Memory Allocation ( malloc huge-page )</p>
    <p>Translation of VA to PA ( pagemap interface )</p>
    <p>PA PIkit Installation</p>
    <p>( DRAM mapping table modification )</p>
    <p>Fingerprint Scanning</p>
    <p>: Attack Node</p>
    <p>: PIkit Attack Node  Victim Node</p>
    <p>Scanning the Fingerprint: To find the credential object in the VICTIM REGION, an attacker needs to find the fingerprint by READ operation at ATTACK REGION</p>
  </div>
  <div class="page">
    <p>Scanning the Fingerprint</p>
    <p>PID PCB</p>
    <p>Process Table</p>
    <p>n</p>
    <p>Task state Process credentials Priority Open files</p>
    <p>Process Control Block</p>
    <p>Other flags</p>
    <p>Credential Management (include/linux/cred.h)</p>
    <p>task_struct (sched.h)</p>
    <p>are known to the attacker (UID &amp; GID)</p>
    <p>should be within 0xffff880000000000  0xffffc7ffffffffff</p>
    <p>can be found in Symbol Lookup Table (/boot/System.map)</p>
  </div>
  <div class="page">
    <p>Overview of Bash Shell Credential Object Attack</p>
    <p>VA</p>
    <p>Memory Allocation ( malloc huge-page )</p>
    <p>Translation of VA to PA ( pagemap interface )</p>
    <p>PA PIkit Installation</p>
    <p>( DRAM mapping table modification )</p>
    <p>Fingerprint Scanning</p>
    <p>: Attack Node</p>
    <p>: PIkit Attack Node  Victim Node</p>
    <p>Scanning the Fingerprint: To find the credential object in the VICTIM REGION, an attacker needs to find the fingerprint by READ operation at ATTACK REGION</p>
    <p>Data Modification</p>
    <p>Modifying the Data: If the fingerprint is found, an attacker can over write the EUID (or UID) to 0</p>
    <p>Found!</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>Modifying the Data  Once the corresponding address of the credential data structure</p>
    <p>is determined from the scanning, the attacker can get a root shell by modifying either the euid or the uid field.</p>
    <p>movnti $0, ( Virtual Address )</p>
    <p>Result</p>
  </div>
  <div class="page">
    <p>Overview of Bash Shell Credential Object Attack</p>
    <p>VA</p>
    <p>Memory Allocation ( malloc huge-page )</p>
    <p>Translation of VA to PA ( pagemap interface )</p>
    <p>PA PIkit Installation</p>
    <p>( DRAM mapping table modification )</p>
    <p>Fingerprint Scanning</p>
    <p>: Attack Node</p>
    <p>: PIkit Attack Node  Victim Node</p>
    <p>Scanning the Fingerprint: To find the credential object in the VICTIM REGION, an attacker needs to find the fingerprint by READ operation at ATTACK REGION</p>
    <p>Data Modification</p>
    <p>Modifying the Data: If the fingerprint is found, an attacker can over write the EUID (or UID) to 0</p>
    <p>Found ?</p>
    <p>Yes</p>
    <p>PCB(Bash $) Spraying</p>
    <p>No</p>
    <p>: Victim Node</p>
    <p>Spraying the Process Control Block: An attacker can increase the possibility that the credential data structure is placed in the VICTIM REGION</p>
  </div>
  <div class="page">
    <p>: Attack Node : Victim Node : Pikit Attack Node  Victim Node: Any Nodes</p>
    <p>Overview of Shared Library Attack</p>
    <p>Re-write malicious binary code for the libc function</p>
    <p>SUID program execution linked with</p>
    <p>the libc function</p>
    <p>Restore original binary code for The libc function</p>
    <p>PIkit installation ( SAD &amp; TAD modification )</p>
    <p>PA</p>
    <p>// dummy.c void main(void){</p>
    <p>struct passwd *ret; int pid = getpid(); int uid = getuid(); ret = getpwuid(uid); printf(&quot;pid : %d\n&quot;,pid); sleep (600);</p>
    <p>}</p>
    <p>$ ./dummy &amp; pid : 7145</p>
    <p>$ gdb dummy 7145 (gdb) p getpwuid $1 = {&lt;text variable&gt;} 0x3ade699570</p>
    <p>getpwuid() {</p>
    <p>size_t buffersize; malloc(buffersize); ......</p>
    <p>}</p>
    <p>Original Binaries</p>
    <p>Modified</p>
    <p>getpwuid() {</p>
    <p>setuid(0); system(/bin/sh); ...</p>
    <p>}</p>
    <p>Malicious Binaries</p>
    <p>Privilege Escalation</p>
    <p>Determine VA for a libc function</p>
    <p>VA Translation of VA to PA</p>
    <p>( pagemap interface )</p>
  </div>
  <div class="page">
    <p>Discussions  Possible Solutions</p>
  </div>
  <div class="page">
    <p>Possible Solutions  Using Existing Features</p>
    <p>Enable AMDs LockDramCfg feature (included in C6 State Management)  In old BIOS, it is disabled by default</p>
    <p>Similar LockDramCfg feature is not readily available in Intel x86 CPUs.</p>
    <p>Software-based Solution  DRAM address mapping table monitor</p>
    <p>Should be protected with a secure platform such as TrustZone, Intel SGX</p>
    <p>Hardware-based Solutions  Restrict # of entries used to equal # of nodes in the system</p>
    <p>Does not completely remove the possibility of the PIkit  Design the DRAM address mapping table entries as write-once memory</p>
    <p>mapped registers  Flexibility issues for CPU Hotplug or memory Hotplug</p>
  </div>
  <div class="page">
    <p>Conclusion  PIkit  a kernel-independent processor-interconnect rootkit</p>
    <p>Exploits vulnerable hardware features in Processor-Interconnect  Kernel Independent (No code injection or code modification to the</p>
    <p>kernel)  Enables malicious activities to be carried out with only user-level code</p>
    <p>Four different attack scenarios  Bash shell credential object attack, Bash keyboard buffer attack, Shared</p>
    <p>library attack</p>
    <p>PIkit is a very stealthy rootkit  Payloads consist of only read/write memory operations</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>zemisolsol@kaist.ac.kr</p>
  </div>
</Presentation>
