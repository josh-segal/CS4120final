<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Guarded Modules: Adap/vely Extending the VMMs Privileges Into</p>
    <p>the Guest</p>
    <p>Kyle C. Hale Peter Dinda</p>
    <p>Department of Electrical Engineering and Computer Science Northwestern University</p>
    <p>hIp://halek.co hIp://presciencelab.org hIp://v3vee.org hIp://xstack.sandia.gov/hobbes</p>
  </div>
  <div class="page">
    <p>Redefining the boundaries between VMM and guest OS</p>
    <p>VMM</p>
    <p>Guest OS</p>
  </div>
  <div class="page">
    <p>Redefining the boundaries between VMM and guest OS</p>
    <p>Guest OS</p>
    <p>VMM</p>
    <p>VMM VMM</p>
  </div>
  <div class="page">
    <p>We want to evolve the VMM-guest rela/onship</p>
    <p>where the interface between the two is more flexible and where parts of the VMM may actually live inside the guest The laIer is the focus of this work</p>
  </div>
  <div class="page">
    <p>Guest-context virtual service</p>
    <p>VMM</p>
    <p>Guest</p>
    <p>Virtual service</p>
    <p>GEARS*</p>
    <p>* K. Hale, P. Dinda. Shi$ing Gears to Enable Guest-context Virtual Services, ICAC 2012</p>
  </div>
  <div class="page">
    <p>VMM</p>
    <p>Guest</p>
    <p>Virtual service</p>
    <p>privileged operations</p>
  </div>
  <div class="page">
    <p>VMM</p>
    <p>Guest</p>
    <p>Virtual service</p>
    <p>Guarded Module</p>
    <p>can still interact with guest</p>
  </div>
  <div class="page">
    <p>How can we isolate and protect pieces of code in a guest OS that run at higher privilege than the rest of the guest? How can we allow legacy code con/nue to use guest func/onality?</p>
    <p>We show how with two examples</p>
  </div>
  <div class="page">
    <p>OS-independent, embeddable VMM  Support for mul/ple host OSes (Linux, KiIen LWK)  Open source, available at</p>
    <p>hIp://v3vee.org/palacios</p>
    <p>Palacios VMM</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Mo/va/on  Christoiza/on  Threat Model and Run/me Invariants  Run/me System and Border Crossings  Examples  Selec/vely Privileged PCI Passthrough  Selec/vely Privileged MONITOR/MWAIT</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Guarded Module Transforma/on</p>
    <p>Linux Kernel Module</p>
    <p>Guarded Module</p>
    <p>Christoization</p>
    <p>guarded module compiler</p>
  </div>
  <div class="page">
    <p>Christoiza/on</p>
    <p>Compile-/me and link-/me wrapping we use gcc toolchain to instrument (wrap) all calls out of and into the module</p>
    <p>Christo and Jeanne-Claude wrap the Reichstag, Berlin, 1995</p>
  </div>
  <div class="page">
    <p>The guest is not to be trusted</p>
    <p>We assume a threat model in which a malicious kernel wants to hijack a services privilege Execu/on paths entering and leaving the guarded module must be checked</p>
  </div>
  <div class="page">
    <p>We maintain control flow integrity</p>
    <p>Christoiza/on allows VMM to trap all entries into and exits from module VMM validates the environment for unauthorized changes to execu/on path (e.g. return oriented aIacks)</p>
    <p>VMM</p>
    <p>Guest</p>
    <p>Guarded Module</p>
    <p>printk()</p>
    <p>record environment</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>We maintain control flow integrity</p>
    <p>VMM</p>
    <p>Guest</p>
    <p>Guarded Module return</p>
    <p>Environment ok? Entry point valid?</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>and code integrity</p>
    <p>VMM</p>
    <p>Guest</p>
    <p>Guarded Module write to module code</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>and data integrity</p>
    <p>VMM</p>
    <p>Guest</p>
    <p>Guarded Module</p>
    <p>write to module data</p>
    <p>private module data</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>What we dont provide</p>
    <p>Parameter checking Module cloaking Currently no support for interac/ons between guarded modules</p>
  </div>
  <div class="page">
    <p>Programmers perspec/ve</p>
  </div>
  <div class="page">
    <p>RECAP: Guarded Modules are guest context virtual services</p>
    <p>that can have elevated privilege, are protected from the untrusted guest that they run in, yet can s/ll use its func/onality The implementa/on is small: ~220 lines of Perl, ~260 lines of Ruby, and ~1000 lines of C (includes both the GM compila/on toolchain and run/me system) available online at hIp://v3vee.org/palacios</p>
  </div>
  <div class="page">
    <p>Run/me: module entries/exits trap to the VMM</p>
    <p>We call these trapped events border crossings</p>
    <p>Border-out call</p>
    <p>Border-in ret</p>
    <p>Border-out ret</p>
    <p>Border-in call</p>
    <p>Privileged</p>
    <p>Unprivileged</p>
    <p>Illegal ac/vity</p>
  </div>
  <div class="page">
    <p>Wrapper stubs exit_wrapped: popq %r11 pushq %rax movq $border_out_call, %rax vmmcall popq %rax callq exit pushq %rax movq $border_in_ret, %rax vmmcall popq %rax pushq %r11 ret (to into guarded module)</p>
    <p>Trap to VMM, record environment</p>
    <p>Trap to VMM, Check integrity of environment</p>
  </div>
  <div class="page">
    <p>Guest KernelGuestKernel</p>
    <p>GuardedModule B d t</p>
    <p>Border</p>
    <p>n gs</p>
    <p>Borderout</p>
    <p>Borderin d er C ro ss in</p>
    <p>VMM PrivilegedPrivileged</p>
    <p>B o r</p>
    <p>g Hardware Access</p>
    <p>g VMM Access</p>
    <p>BorderControl StateMachine</p>
    <p>Hardware</p>
  </div>
  <div class="page">
    <p>Typical Border Crossing</p>
    <p>guarded module</p>
    <p>guest</p>
    <p>printk()</p>
    <p>module_init()</p>
    <p>return</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>Nested Border Crossings</p>
    <p>guarded module</p>
    <p>guest</p>
    <p>foo() bar()</p>
    <p>callback() return</p>
    <p>return return</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>Border Crossing from External Event</p>
    <p>guarded module</p>
    <p>guest</p>
    <p>interrupt iret</p>
    <p>= privileged operation</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Dell PowerEdge R415  2 sockets, 4 cores each =&gt; 8 total cores  2.2 GHz AMD Opteron 4122  16 GB memory  Host kernel: Fedora 15 with Linux 2.6.38  Guest: single vcore with Busybox environment, Linux 2.6.38</p>
  </div>
  <div class="page">
    <p>System-independent overhead is low</p>
    <p>Border-out Call Border-in Ret Border-in Call Border-out Ret</p>
    <p>Cy cl es</p>
    <p>misc_exit_handle</p>
    <p>entry lookup</p>
    <p>misc_hcall</p>
    <p>lower/raise</p>
    <p>Cost of any VM exit</p>
  </div>
  <div class="page">
    <p>but ensuring control-flow integrity is expensive</p>
    <p>Border-out Call Border-in Ret Border-in Call Border-out Ret</p>
    <p>Cy cl es</p>
    <p>entry_lookup</p>
    <p>misc_exit_handle</p>
    <p>misc_hcall</p>
    <p>check</p>
    <p>priv lower/raise</p>
    <p>Stack checking</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Mo/va/on  Christoiza/on  Threat Model and Run/me Invariants  Run/me System and Border Crossings  Examples  Selec/vely Privileged PCI Passthrough  Selec/vely Privileged MONITOR/MWAIT</p>
    <p>Related Work and Conclusions</p>
  </div>
  <div class="page">
    <p>We transformed a NIC driver into a guarded module</p>
    <p>guest VMM</p>
    <p>guarded module</p>
    <p>Broadcom BCM5716 1Gb/s</p>
    <p>no manual modifica/ons to NIC driver!</p>
  </div>
  <div class="page">
    <p>SelecFvely expose the PCI BARs to the guest</p>
    <p>guarded module 2 unprivileged mode</p>
    <p>PCI I/O and memory BARs</p>
    <p>guarded module 1 privileged mode</p>
    <p>r r w w 0000.. val</p>
    <p>Hardware NIC</p>
  </div>
  <div class="page">
    <p>Bandwidth drops, but border crossing count is very high!</p>
    <p>Packet Sends</p>
    <p>Border-in 1.06</p>
    <p>Border-out 1.06</p>
    <p>Border Crossings / Packet Send 2.12</p>
    <p>Packet Receives</p>
    <p>Border-in 4.64</p>
    <p>Border-out 4.64</p>
    <p>Border Crossings / Packet Receive 9.28</p>
    <p>Each border crossing is ~16,000 cycles (7.3 s)</p>
    <p>Many of these are leaf functions!</p>
  </div>
  <div class="page">
    <p>We implemented an adap/ve idle loop with selec/ve privilege</p>
    <p>MONITOR/MWAIT instruc/ons allow a CPU to go into a low-power state un/l a write occurs to a region of memory MONITOR [addr]  MWAIT</p>
  </div>
  <div class="page">
    <p>VMs cant typically use these instruc/ons</p>
    <p>Puts physical core to sleep. Other VMs/processes on that core will starve But if the guest knows how many guests are on the machine (VMM state), we can let it run these instruc/ons when idling Cant let untrusted parts of guest hijack this capability!</p>
  </div>
  <div class="page">
    <p>Adap/ve mwait_idle() as a guarded module</p>
    <p>guest</p>
    <p>guarded module</p>
    <p>idle()</p>
    <p>Other vcores present?</p>
    <p>no</p>
    <p>mwait_idle()</p>
  </div>
  <div class="page">
    <p>pcore 0</p>
    <p>zzz</p>
    <p>vcore 0</p>
    <p>mwait_idle()</p>
    <p>idle loop redirec/on stub (guarded module)</p>
    <p>pcore 1</p>
    <p>zzz</p>
    <p>vcore 0</p>
    <p>vcore 1</p>
    <p>default_idle()</p>
    <p>Scenario 1: a single vcore</p>
    <p>Scenario 2: vcores sharing a physical core</p>
  </div>
  <div class="page">
    <p>Guarded Modules as adapFve, guest- context virtual services</p>
    <p>Were leveraging VMM global informa/on about the environment That informa/on is only exposed to the guarded modulethis presents a new way to adapt VMs at run/me</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Nooks  isolate faulty code in kernel modules with wrappers. Kernel requires modifica/on, protec/ng guest from modules [Swit, SOSP 03] LXFI, SecVisor  protect kernel against aIack with VMM-authorized code [Mao, SOSP 11], [Seshadri, SOSP 07]</p>
    <p>SIM  guest-resident VMM code, but special- purpose, uses completely separate address space [Sharif, CCS 09]</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Weve shown the feasibility of adapFvely extending the VMM into the guest with guarded modules General technique to automa/cally transform kernel modules into guarded modules Two proof-of-concept examples: - Selec/ve Privilege for Commodity NIC driver - Selec/ve Privilege for MONITOR/MWAIT</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Feasibility of automa/cally inlining leaf func/ons into modules (making them more self-contained) Further mo/va/ng examples for guarded modules Generaliza/on of guarded modulesmodules with VMM-controlled, specialized execu/on modes</p>
  </div>
  <div class="page">
    <p>We are rethinking system sotware interfaces</p>
    <p>This talk focused on virtualiza/on, but were thinking bigger (HW/VMM/OS/app) Its /me to reconsider the structure of our system sotware stacks We can adapt sotware services, but can we adapt their organiza/on/structure?</p>
  </div>
  <div class="page">
    <p>For more info: Kyle C. Hale hIp://halek.co hIp://presciencelab.org hIp://v3vee.org hIp://xstack.sandia.gov/hobbes</p>
  </div>
</Presentation>
