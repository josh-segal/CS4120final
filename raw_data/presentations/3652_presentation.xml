<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fuzzing Error Handling Code using</p>
    <p>Context-Sensitive Software Fault Injection</p>
    <p>Zu-Ming Jiang1, Jia-Ju Bai1, Kangjie Lu2, Shi-Min Hu1</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Error handling code</p>
    <p>Critical for handling various runtime errors</p>
    <p>Error-prone</p>
    <p>Hard to test</p>
    <p>Fuzzing</p>
    <p>Widely used to detect bugs in various software</p>
    <p>Existing fuzzers are mostly input-driven</p>
    <p>Cannot effectively test error handling code</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Software fault injection</p>
    <p>Effectively test error handling code</p>
    <p>Perform context-insensitive fault injection</p>
    <p>Miss bugs that can be only triggered in specific context</p>
    <p>int main() {</p>
    <p>x = malloc(...);</p>
    <p>y = malloc(...);</p>
    <p>......</p>
    <p>FuncA(x);</p>
    <p>FuncB(y);</p>
    <p>......</p>
    <p>}</p>
    <p>void FuncA(x) {</p>
    <p>FuncP(x);</p>
    <p>......</p>
    <p>}</p>
    <p>void FuncB(y) {</p>
    <p>free(y);</p>
    <p>FuncP(y);</p>
    <p>......</p>
    <p>}</p>
    <p>void FuncP(arg) {</p>
    <p>z = malloc(...)</p>
    <p>if (!z) {</p>
    <p>free(arg);</p>
    <p>exit(-1);</p>
    <p>}</p>
    <p>......</p>
    <p>}</p>
    <p>Fault 1: main -&gt; FuncA -&gt; FuncP -&gt; malloc exit abn ormally... Fault 2: main -&gt; FuncB -&gt; FuncP -&gt; malloc doub le free!</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Error that can trigger error handling code</p>
    <p>Input-related error: strcmp(), strlen(), memcmp()</p>
    <p>Occasional error: malloc(), open(), pipe()</p>
  </div>
  <div class="page">
    <p>Study</p>
    <p>Error handling code</p>
    <p>9 widely-used applications</p>
    <p>Application Studied file Call site Input-related Occasional</p>
    <p>vim 100 1163 530 (46%) 633 (54%)</p>
    <p>bison 100 184 96 (52%) 88 (48%)</p>
    <p>ffmpeg 100 881 518 (59%) 363 (41%)</p>
    <p>nasm 100 673 564 (84%) 109 (16%)</p>
    <p>catdoc 29 91 43 (47%) 48 (53%)</p>
    <p>clamav 100 1089 522 (48%) 567 (52%)</p>
    <p>clfow 100 286 170 (59%) 116 (41%)</p>
    <p>gif2png+libpng 95 830 556 (67%) 274 (33%)</p>
    <p>openssl 100 989 571 (58%) 418 (42%)</p>
    <p>Total 824 6,168 3,570 (58%) 2,616 (42%)</p>
    <p>error handling code are related to occasional errors</p>
  </div>
  <div class="page">
    <p>Study</p>
    <p>CVEs found by existing fuzzers</p>
    <p>6 state-of-the-art fuzzers</p>
    <p>Tool CVE Error handling Occasional error</p>
    <p>AFL 218 85 3</p>
    <p>Honggfuzz 57 17 3</p>
    <p>AFLFast 8 2 0</p>
    <p>CollAFL 93 15 4</p>
    <p>QSYM 6 0 0</p>
    <p>REDQUEEN 11 2 1</p>
    <p>Total 393 121 (31%) 11 (9%)</p>
    <p>Existing fuzzers may miss bugs in error handling code</p>
    <p>especially those triggered by occasional errors</p>
  </div>
  <div class="page">
    <p>Basic Idea</p>
    <p>Error point</p>
    <p>Error site: call site that can fail and trigger error handling code</p>
    <p>Composed of ErrLoc and CallCtx of each error site</p>
    <p>ErrLoc: the location of each error site in source code</p>
    <p>CallCtx: corresponding calling context when each error site is executed</p>
    <p>=&lt; ,  &gt;</p>
    <p>Perform context-sensitive fault injection</p>
    <p>Executed in Error site S1</p>
    <p>CallCtx C1</p>
    <p>CallCtx C2</p>
    <p>CallCtx Cn</p>
    <p>ErrorPt P1</p>
    <p>ErrorPt P2</p>
    <p>ErrorPt Pn</p>
    <p>Recorded asExecuted in</p>
    <p>Executed in</p>
    <p>Recorded as</p>
    <p>Recorded as</p>
  </div>
  <div class="page">
    <p>Basic Idea</p>
    <p>Error sequence</p>
    <p>Consist of multiple ordered Error points</p>
    <p>Describe the failure situation of the error points</p>
    <p>0 =&gt; Normally run</p>
    <p>1 =&gt; Fail by injecting faults</p>
    <p>0-1 sequence</p>
    <p>= 1, 2, 3,   ,  = {0,1}</p>
  </div>
  <div class="page">
    <p>Context-Sensitive SFI-based Fuzzing</p>
    <p>Overview</p>
    <p>Run the tested program</p>
    <p>Collect runtime information</p>
    <p>Create error sequences</p>
    <p>Mutate error sequences</p>
    <p>Run the tested program again</p>
    <p>and perform fault injection</p>
    <p>Fuzzing Loop N</p>
    <p>Identify error sites</p>
    <p>Run the tested program</p>
    <p>Cr eate error sequences</p>
    <p>Mutate error sequences Generate new</p>
    <p>error sequences and within time limit?</p>
    <p>End</p>
    <p>Collect runtime information</p>
    <p>Run the tested program</p>
    <p>Perform fault injection</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>Error Sequence Mutation</p>
    <p>Initial mutation</p>
    <p>Collect the executed error points in runtime</p>
    <p>The initial error sequence is an all-zero sequence</p>
    <p>Make one executed error point fail (0  1)</p>
    <p>Initial error sequence</p>
    <p>First execution Initial mutation</p>
    <p>Generated error sequences</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 1</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 0</p>
    <p>ErrPtc 1</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 1</p>
    <p>Tested Program</p>
  </div>
  <div class="page">
    <p>Error Sequence Mutation</p>
    <p>Subsequent mutation</p>
    <p>Select error sequence which increases the code coverage</p>
    <p>Change only one executed error point (01 or 1  0)</p>
    <p>Drop repeated error sequences</p>
    <p>Original error sequence</p>
    <p>Mutation</p>
    <p>Generated error sequences</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 1</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtc 1</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 1</p>
    <p>Tested Program</p>
    <p>Execution</p>
    <p>Fault injection</p>
    <p>Code coverage is increased!</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtx 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>A new error point is executed</p>
    <p>Mutation</p>
    <p>Created error sequence</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtx 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 1</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtx 0</p>
    <p>ErrPtc 1</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 1</p>
    <p>ErrPtx 1</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 1</p>
    <p>ErrPtb 0</p>
    <p>ErrPtx 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 1</p>
    <p>ErrPtx 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>Original error sequence</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 1</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>Tested Program</p>
    <p>Execution</p>
    <p>Fault injection</p>
    <p>Code coverage is not increa sed !</p>
    <p>Drop error sequences</p>
    <p>A new error point is executed</p>
    <p>Created error sequence</p>
    <p>ErrPta 0</p>
    <p>ErrPtb 1</p>
    <p>ErrPty 0</p>
    <p>ErrPtc 0</p>
    <p>ErrPtd 0</p>
    <p>Drop repeated error sequences</p>
    <p>ErrSeq2</p>
    <p>ErrSeq1</p>
  </div>
  <div class="page">
    <p>Framework</p>
    <p>FIFUZZ</p>
    <p>Input-driven fuzzer combined with context-sensitive SFI</p>
    <p>Detect bugs hiding deeply in error handling code</p>
    <p>Sou rce Files o f th e tested program</p>
    <p>Program Generator</p>
    <p>Runtime Monitor</p>
    <p>Executable Program</p>
    <p>Error-Sequence Generator</p>
    <p>Input Generator</p>
    <p>Runtime Informatio n</p>
    <p>Error Sequences</p>
    <p>Program Inpu ts</p>
    <p>Recommen ded Error Sites</p>
    <p>Bu g Checkers</p>
    <p>Error-Site Extractor</p>
    <p>Original Program Inpu ts</p>
    <p>Runtime Informatio n</p>
    <p>Bu g Repo rts</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experimental setup</p>
    <p>9 widely-used applications</p>
    <p>1822 extracted error sites</p>
    <p>Time budget: 24 hours</p>
    <p>Application Description Version LOC</p>
    <p>vim Text editor v8.1.1764 349K</p>
    <p>bison Parser generator v3.4 82K</p>
    <p>ffmpeg Solution for media processing n4.3-dev 1.1M</p>
    <p>nasm 80x86 and x86-64 assembler v2.14.02 94K</p>
    <p>catdoc MS-Word-file viewer v0.95 4K</p>
    <p>clamav Antivirus engine v0.101.2 844K</p>
    <p>clfow Code analyzer of C source files v1.6 37K</p>
    <p>gif2png+libpng File converter for pictures v2.5.14+v1.6.37 59K</p>
    <p>openssl Cryptography library v1.1.1d 415K</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Bug detection</p>
    <p>50 new real bugs</p>
    <p>32 of them are confirmed</p>
    <p>Bug type Crash/DOS Memory</p>
    <p>corruption</p>
    <p>Arbitrary</p>
    <p>read</p>
    <p>Memory</p>
    <p>overread</p>
    <p>Null pointer dereference 36 0 0 0</p>
    <p>Double free 0 5 0 0</p>
    <p>Use after free 0 1 2 2</p>
    <p>Buffer overflow 0 0 0 1</p>
    <p>Free invalid pointer 2 0 0 0</p>
    <p>Assertion failure 1 0 0 0</p>
    <p>Total 39 6 2 3</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Bug features</p>
    <p>46 bugs are related to incorrect error handling</p>
    <p>Error handling bugs are often triggered by 1 error</p>
    <p>42 bugs are triggered by 1 error</p>
    <p>4 bugs are triggered by 2 or more errors</p>
    <p>Improper error handling in error propagation</p>
  </div>
  <div class="page">
    <p>Comparison</p>
    <p>Compared to context-insensitive SFI</p>
    <p>Build error sequence using error site</p>
    <p>Do not consider the calling context of each error site</p>
    <p>Bug detection</p>
    <p>vim bison ffmpeg nasm catdoc clamav cflow gif2png openssl</p>
    <p>FIFUZZ_insensitive FIFUZZ</p>
  </div>
  <div class="page">
    <p>Comparison</p>
    <p>Compared to state-of-the-art fuzzers</p>
    <p>4 state-of-the-art fuzzers</p>
    <p>AFL, AFLFast, AFLSmart and FairFuzz</p>
    <p>5 tested programs in Binutils 2.26</p>
    <p>nm, objdump, size, ar and readelf</p>
  </div>
  <div class="page">
    <p>Comparison</p>
    <p>Compared to state-of-the-art fuzzers</p>
    <p>Code coverage</p>
    <p>Overall, FIFUZZ covers more branches than other fuzzers</p>
    <p>FIFUZZ can cover much more error handling code</p>
  </div>
  <div class="page">
    <p>Comparison</p>
    <p>Compared to state-of-the-art fuzzers</p>
    <p>Bug detection</p>
    <p>Overall, FIFUZZ finds more bugs than other fuzzers</p>
    <p>FIFUZZ can find bugs hiding deeply in error handling code</p>
    <p>nm objdump size ar readelf</p>
    <p>AFL AFLFast AFLSmart FairFuzz FIFUZZ</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Existing fuzzers cannot cover error handling code effectively</p>
    <p>FIFUZZ</p>
    <p>Propose a novel context-sensitive SFI-based fuzzing strategy</p>
    <p>Design a promising fuzzing framework</p>
    <p>Find 50 real bugs in 9 widely-used C applications</p>
    <p>Outperform existing fuzzers</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>Zu-Ming Jiang jjzuming@outlook.com</p>
    <p>Jia-Ju Bai baijiaju1990@gmail.com</p>
    <p>Kangjie Lu kjlu@umn.edu</p>
    <p>Shi-Min Hu shimin@tsinghua.edu.cn</p>
  </div>
</Presentation>
