<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CopyCat: Controlled Instruction-Level Attacks on Enclaves</p>
    <p>Daniel Moghimi</p>
    <p>Jo Van Bulck</p>
    <p>Nadia Heninger</p>
    <p>Frank Piessens</p>
    <p>Berk Sunar</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environment (TEE)  Intel SGX</p>
    <p>Intel Software Guard eXtensions (SGX)</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>OS</p>
    <p>App App App</p>
    <p>Traditional Security Model</p>
    <p>T ru</p>
    <p>st e d</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>OS</p>
    <p>App App App</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environment (TEE)  Intel SGX</p>
    <p>Intel Software Guard eXtensions (SGX)</p>
    <p>Enclave: Hardware protected user-level software module  Mapped by the Operating System</p>
    <p>Loaded by the user program</p>
    <p>Authenticated and Encrypted by CPU</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>OS</p>
    <p>App App App</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environment (TEE)  Intel SGX</p>
    <p>Intel Software Guard eXtensions (SGX)</p>
    <p>Enclave: Hardware protected user-level software module  Mapped by the Operating System</p>
    <p>Loaded by the user program</p>
    <p>Authenticated and Encrypted by CPU</p>
    <p>Protects against system level adversary</p>
    <p>New Attacker Model:</p>
    <p>Attacker gets full control over OS</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>OS</p>
    <p>App App App</p>
    <p>blocked</p>
    <p>blocked</p>
    <p>Hardware</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>Intel SGX Attack Taxonomy</p>
    <p>Intels Responsibility  Microcode Patches / Hardware mitigation</p>
    <p>TCB Recovery  Old Keys are Revoked</p>
    <p>Remote attestation succeeds only with mitigation.</p>
    <p>SGX Attacks</p>
    <p>Intel</p>
    <p>Hardware</p>
    <p>Foreshadow [1]</p>
    <p>Plundervolt [2]</p>
    <p>[1] Van Bulck et al. &quot;Foreshadow: Extracting the keys to the intel SGX kingdom with transient out-of-order execution.&quot; USENIX Security 2018.</p>
    <p>[2] Murdock et al. &quot;Plundervolt: Software-based fault injection attacks against Intel SGX.&quot; IEEE S&amp;P 2020.</p>
  </div>
  <div class="page">
    <p>Intel SGX Attack Taxonomy</p>
    <p>Intels Responsibility  Microcode Patches / Hardware mitigation</p>
    <p>TCB Recovery  Old Keys are Revoked</p>
    <p>Remote attestation succeeds only with mitigation.</p>
    <p>SGX Attacks</p>
    <p>Intel</p>
    <p>Hardware</p>
    <p>Software Dev</p>
    <p>Responsibility</p>
    <p>Foreshadow [1]</p>
    <p>Plundervolt [2]</p>
    <p>[1] Van Bulck et al. &quot;Foreshadow: Extracting the keys to the intel SGX kingdom with transient out-of-order execution.&quot; USENIX Security 2018.</p>
    <p>[2] Murdock et al. &quot;Plundervolt: Software-based fault injection attacks against Intel SGX.&quot; IEEE S&amp;P 2020.</p>
  </div>
  <div class="page">
    <p>Intel SGX Attack Taxonomy</p>
    <p>Intels Responsibility  Microcode Patches / Hardware mitigation</p>
    <p>TCB Recovery  Old Keys are Revoked</p>
    <p>Remote attestation succeeds only with mitigation.</p>
    <p>Hyperthreading is out  Remote Attestation Warning</p>
    <p>arch Side Channel  Constant-time Coding</p>
    <p>Flushing and Isolating buffers</p>
    <p>Probabilistic</p>
    <p>SGX Attacks</p>
    <p>Intel</p>
    <p>Hardware</p>
    <p>Software Dev</p>
    <p>Responsibility</p>
    <p>Foreshadow [1]</p>
    <p>Plundervolt [2]</p>
    <p>arch Side</p>
    <p>Channel</p>
    <p>Cache [3][4][5]</p>
    <p>Branch Predictors</p>
    <p>[6][7]</p>
    <p>Interrupt Latency [8]</p>
    <p>[1] Van Bulck et al. &quot;Foreshadow: Extracting the keys to the intel SGX kingdom with transient out-of-order execution.&quot; USENIX Security 2018.</p>
    <p>[2] Murdock et al. &quot;Plundervolt: Software-based fault injection attacks against Intel SGX.&quot; IEEE S&amp;P 2020.</p>
    <p>[3] Moghimi et al. &quot;Cachezoom: How SGX amplifies the power of cache attacks.&quot; CHES 2017.</p>
    <p>[4] Brasser et al. &quot;Software grand exposure:{SGX} cache attacks are practical.&quot; USENIX WOOT 2017.</p>
    <p>[5] Schwarz et al. &quot;Malware guard extension: Using SGX to conceal cache attacks.&quot; DIMVA 2017.</p>
    <p>[6] Evtyushkin, Dmitry, et al. &quot;Branchscope: A new side-channel attack on directional branch predictor.&quot; ACM SIGPLAN 2018.</p>
    <p>[7] Lee, Sangho, et al. &quot;Inferring fine-grained control flow inside {SGX} enclaves with branch shadowing.&quot; USENIX Security 2017.</p>
    <p>[8] Van Bulck et al. &quot;Nemesis: Studying microarchitectural timing leaks in rudimentary CPU interrupt logic.&quot; ACM CCS 2018.</p>
  </div>
  <div class="page">
    <p>Intel SGX Attack Taxonomy</p>
    <p>Intels Responsibility  Microcode Patches / Hardware mitigation</p>
    <p>TCB Recovery  Old Keys are Revoked</p>
    <p>Remote attestation succeeds only with mitigation.</p>
    <p>Hyperthreading is out  Remote Attestation Warning</p>
    <p>arch Side Channel  Constant-time Coding</p>
    <p>Flushing and Isolating buffers</p>
    <p>Probabilistic</p>
    <p>Deterministic Attacks  Page Fault, A/D Bit, etc. (4kB Granularity)</p>
    <p>SGX Attacks</p>
    <p>Intel</p>
    <p>Hardware</p>
    <p>Software Dev</p>
    <p>Responsibility</p>
    <p>Foreshadow [1]</p>
    <p>Plundervolt [2]</p>
    <p>Deterministic</p>
    <p>Ctrl Channel</p>
    <p>arch Side</p>
    <p>Channel</p>
    <p>Cache [3][4][5]</p>
    <p>Branch Predictors</p>
    <p>[6][7]</p>
    <p>Interrupt Latency [8]</p>
    <p>Page Fault [9]</p>
    <p>A/D Bit [10]</p>
    <p>[1] Van Bulck et al. &quot;Foreshadow: Extracting the keys to the intel SGX kingdom with transient out-of-order execution.&quot; USENIX Security 2018.</p>
    <p>[2] Murdock et al. &quot;Plundervolt: Software-based fault injection attacks against Intel SGX.&quot; IEEE S&amp;P 2020.</p>
    <p>[3] Moghimi et al. &quot;Cachezoom: How SGX amplifies the power of cache attacks.&quot; CHES 2017.</p>
    <p>[4] Brasser et al. &quot;Software grand exposure:{SGX} cache attacks are practical.&quot; USENIX WOOT 2017.</p>
    <p>[5] Schwarz et al. &quot;Malware guard extension: Using SGX to conceal cache attacks.&quot; DIMVA 2017.</p>
    <p>[6] Evtyushkin, Dmitry, et al. &quot;Branchscope: A new side-channel attack on directional branch predictor.&quot; ACM SIGPLAN 2018.</p>
    <p>[7] Lee, Sangho, et al. &quot;Inferring fine-grained control flow inside {SGX} enclaves with branch shadowing.&quot; USENIX Security 2017.</p>
    <p>[8] Van Bulck et al. &quot;Nemesis: Studying microarchitectural timing leaks in rudimentary CPU interrupt logic.&quot; ACM CCS 2018.</p>
    <p>[9] Xu et al. &quot;Controlled-channel attacks: Deterministic side channels for untrusted operating systems.&quot; IEEE S&amp;P 2015.</p>
    <p>[10] Wang, Wenhao, et al. &quot;Leaky cauldron on the dark land: Understanding memory side-channel hazards in SGX.&quot; ACM CCS 2017.</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>NOP ADD XOR MUL DIV ADD MUL NOP NOP</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>TimeEnclave Execution</p>
    <p>Thread</p>
    <p>Starts</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>NOP ADD XOR MUL DIV ADD MUL NOP NOP</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Time1 2</p>
    <p>IRQ</p>
    <p>Range</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>NOP ADD XOR MUL DIV ADD MUL NOP NOP</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Time1 2</p>
    <p>IRQ</p>
    <p>Range</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>NOP ADD XOR MUL DIV ADD MUL NOP NOP</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Time1 2</p>
    <p>IRQ</p>
    <p>Range</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>NOP ADD XOR MUL DIV ADD MUL NOP NOP</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Time1 2</p>
    <p>IRQ</p>
    <p>Range</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>NOP ADD XOR MUL DIV ADD MUL NOP NOP</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Time1 2</p>
    <p>IRQ</p>
    <p>Range</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>I got 15 IRQs.</p>
    <p>How many</p>
    <p>zeros?</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Filtering Zeros out: Clear the A bit before, Check the A bit after</p>
    <p>I got 15 IRQs.</p>
    <p>How many</p>
    <p>zeros?</p>
    <p>DTLB</p>
    <p>P R</p>
    <p>W</p>
    <p>U</p>
    <p>S A</p>
    <p>Physical Page</p>
    <p>Number</p>
    <p>P R</p>
    <p>W</p>
    <p>U</p>
    <p>S A</p>
    <p>Physical Page</p>
    <p>Number</p>
    <p>P R</p>
    <p>W</p>
    <p>U</p>
    <p>S A</p>
    <p>Physical Page</p>
    <p>Number</p>
    <p>Code Page Virtual Address</p>
    <p>PMH Page</p>
    <p>Walk</p>
    <p>The A Bit is</p>
    <p>only set when</p>
    <p>an instruction</p>
    <p>is retired</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Filtering Zeros out: Clear the A bit before, Check the A bit after</p>
    <p>Deterministic Instruction Counting</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Filtering Zeros out: Clear the A bit before, Check the A bit after</p>
    <p>Deterministic Instruction Counting</p>
    <p>Counting from start to end is not useful.  A Secondary oracle</p>
    <p>Page table attack as a deterministic secondary oracle</p>
    <p>CALL ADD XOR MUL PUSH ADD MUL MOV NOP</p>
    <p>Time</p>
    <p>Target</p>
    <p>Code</p>
    <p>Page</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Filtering Zeros out: Clear the A bit before, Check the A bit after</p>
    <p>Deterministic Instruction Counting</p>
    <p>Counting from start to end is not useful.  A Secondary oracle</p>
    <p>Page table attack as a deterministic secondary oracle</p>
    <p>CALL ADD XOR MUL PUSH ADD MUL MOV NOP</p>
    <p>Time</p>
    <p>Target</p>
    <p>Code</p>
    <p>Page</p>
    <p>Stack</p>
    <p>Page 4 Steps</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Malicious OS controls the interrupt handler</p>
    <p>A threshold to execute 1 or 0 instructions</p>
    <p>Filtering Zeros out: Clear the A bit before, Check the A bit after</p>
    <p>Deterministic Instruction Counting</p>
    <p>Counting from start to end is not useful.  A Secondary oracle</p>
    <p>Page table attack as a deterministic secondary oracle</p>
    <p>CALL ADD XOR MUL PUSH ADD MUL MOV NOP</p>
    <p>Time</p>
    <p>Target</p>
    <p>Code</p>
    <p>Page</p>
    <p>Stack</p>
    <p>Page Data</p>
    <p>Page 4 Steps 3 Steps</p>
  </div>
  <div class="page">
    <p>CopyCat Attack</p>
    <p>Page A</p>
    <p>Page B</p>
    <p>Page C</p>
    <p>Page D</p>
    <p>Traditional</p>
    <p>Page-table</p>
    <p>Attacks</p>
    <p>Page A</p>
    <p>Page B</p>
    <p>Page C</p>
    <p>Page D</p>
    <p>CopyCat</p>
    <p>Attack</p>
    <p>Additional Data</p>
    <p>Previous Controlled Channel attacks leak Page Access Patterns</p>
    <p>CopyCat additionally leaks number of instructions per page</p>
  </div>
  <div class="page">
    <p>CopyCat  Leaking Branches</p>
    <p>if(c == 0) { r = add(r, d);</p>
    <p>} else { r = add(r, s);</p>
    <p>}</p>
    <p>C Code</p>
    <p>test %eax, %eax je label mov %edx, %esi label: call add mov %eax, -0xc(%rbp)</p>
    <p>Compile</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
  </div>
  <div class="page">
    <p>CopyCat  Leaking Branches</p>
    <p>if(c == 0) { r = add(r, d);</p>
    <p>} else { r = add(r, s);</p>
    <p>}</p>
    <p>C Code</p>
    <p>test %eax, %eax je label mov %edx, %esi label: call add mov %eax, -0xc(%rbp)</p>
    <p>Compile</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
  </div>
  <div class="page">
    <p>CopyCat  Leaking Branches</p>
    <p>if(c == 0) { r = add(r, d);</p>
    <p>} else { r = add(r, s);</p>
    <p>}</p>
    <p>C Code</p>
    <p>test %eax, %eax je label mov %edx, %esi label: call add mov %eax, -0xc(%rbp)</p>
    <p>Compile</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
  </div>
  <div class="page">
    <p>CopyCat  Leaking Branches</p>
    <p>if(c == 0) { r = add(r, d);</p>
    <p>} else { r = add(r, s);</p>
    <p>}</p>
    <p>C Code</p>
    <p>test %eax, %eax je label mov %edx, %esi label: call add mov %eax, -0xc(%rbp)</p>
    <p>Compile</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
    <p>Stack S</p>
    <p>Code P1</p>
    <p>Code P2</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Binary Extended Euclidean Algorithm (BEEA)</p>
    <p>Previous attacks only leak some of the branches w/ some noise</p>
  </div>
  <div class="page">
    <p>Binary Extended Euclidean Algorithm</p>
    <p>Previous attacks only leak some of the branches w/ some noise</p>
    <p>CopyCat synchronously leaks all the branches wo/ any noise</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N</p>
    <p>Branch and prune Algorithm with the help of the recovered trace</p>
    <p>p = . . . X</p>
    <p>q = . . . X</p>
    <p>p = . . . 0</p>
    <p>q = . . . 0</p>
    <p>p = . . . 0</p>
    <p>q = . . . 1</p>
    <p>p = . . . 1</p>
    <p>q = . . . 0</p>
    <p>p = . . . 1</p>
    <p>q = . . . 1</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N, and N is public</p>
    <p>Branch and prune Algorithm with the help of the recovered trace</p>
    <p>p = . . . X</p>
    <p>q = . . . X</p>
    <p>p = . . X 0</p>
    <p>q = . . X 0</p>
    <p>p = . . . 0</p>
    <p>q = . . . 1</p>
    <p>p = . . . 1</p>
    <p>q = . . . 0</p>
    <p>p = . . X 1</p>
    <p>q = . . X 1 N = 1 1 1 0</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N, and N is public</p>
    <p>Branch and prune Algorithm with the help of the recovered trace</p>
    <p>p = . . . X</p>
    <p>q = . . . X</p>
    <p>p = . . X 0</p>
    <p>q = . . X 0</p>
    <p>p = . . . 0</p>
    <p>q = . . . 1</p>
    <p>p = . . . 1</p>
    <p>q = . . . 0</p>
    <p>p = . . X 1</p>
    <p>q = . . X 1 N = 1 1 1 0</p>
    <p>p = . . 0 0</p>
    <p>q = . . 1 0</p>
    <p>p = . . 1 0</p>
    <p>q = . . 0 0</p>
    <p>p = . . 0 0</p>
    <p>q = . . 1 0</p>
    <p>p = . . 1 1</p>
    <p>q = . . 0 1</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N, and N is public</p>
    <p>Branch and prune Algorithm with the help of the recovered trace</p>
    <p>N = 1 1 1 0</p>
    <p>p = . . . X</p>
    <p>q = . . . X</p>
    <p>p = . . X 0</p>
    <p>q = . . X 0</p>
    <p>p = . . X 1</p>
    <p>q = . . X 1</p>
    <p>p = . X 0 0</p>
    <p>q = . X 1 0</p>
    <p>p = . X 1 0</p>
    <p>q = . X 0 0</p>
    <p>p = . X 0 0</p>
    <p>q = . X 1 0</p>
    <p>p = . X 1 1</p>
    <p>q = . X 0 1</p>
    <p>p = . 0 1 1</p>
    <p>q = . 1 0 1</p>
    <p>p = . 1 1 1</p>
    <p>q = . 0 0 1</p>
    <p>p = . 0 0 0</p>
    <p>q = . 1 1 0</p>
    <p>p = . 1 0 0</p>
    <p>q = . 0 1 0</p>
    <p>p = . 0 1 0</p>
    <p>q = . 1 0 0</p>
    <p>p = . 1 1 0</p>
    <p>q = . 0 0 0</p>
    <p>p = . 0 0 0</p>
    <p>q = . 1 1 0</p>
    <p>p = . 1 0 0</p>
    <p>q = . 0 1 0</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N, and N is public</p>
    <p>Branch and prune Algorithm with the help of the recovered trace</p>
    <p>N = 1 1 1 0</p>
    <p>p = . . . X</p>
    <p>q = . . . X</p>
    <p>p = . . X 0</p>
    <p>q = . . X 0</p>
    <p>p = . . X 1</p>
    <p>q = . . X 1</p>
    <p>p = . X 0 0</p>
    <p>q = . X 1 0</p>
    <p>p = . X 1 0</p>
    <p>q = . X 0 0</p>
    <p>p = . 0 1 0</p>
    <p>q = . 1 0 0</p>
    <p>p = . 1 1 0</p>
    <p>q = . 0 0 0</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL - Cryptanalysis</p>
    <p>Single-trace Attack during DSA signing:  =  1</p>
    <p>Iterative over the entire recovered trace with  as input    Plug  in 1 = 1</p>
    <p>1   1.    get private key</p>
    <p>Single-trace Attack during RSA Key Generation:  =  1</p>
    <p>We know that p.q = N, and N is public</p>
    <p>Branch and prune Algorithm with the help of the recovered trace</p>
    <p>Single-trace Attack during RSA Key Generation:  = 1</p>
  </div>
  <div class="page">
    <p>CopyCat on WolfSSL  Cryptanalysis Results</p>
    <p>Executed each attack 100 times.</p>
    <p>DSA 1    Average 22,000 IRQs</p>
    <p>75 ms to iterate over an average of 6,320 steps</p>
    <p>RSA 1    Average 106490 IRQs</p>
    <p>365 ms to iterate over an average of 39,400 steps</p>
    <p>RSA 1     1     Average 230,050 IRQs</p>
    <p>800ms to iterate over an average of 81,090 steps</p>
    <p>Experimental traces always match the leakage model in all experiments  Successful single-trace key recovery</p>
  </div>
  <div class="page">
    <p>How about other Crypto libraries?</p>
    <p>Libgcrypt uses a variant of BEEA  Single trace attack on DSA, Elgamal, ECDSA, RSA Key generation</p>
    <p>OpenSSL uses BEEA for computing GCD  Single trace attack on RSA Key generation when computing gcd   1,  1</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure</p>
    <p>WolfSSL fixed the issues in 4.3.0 and 4.4.0  Blinding for 1   and 1</p>
    <p>Alternate formulation for 1  : 2</p>
    <p>Using a constant-time (branchless) modular inverse [11]</p>
    <p>Libgcrypt fixed the issues in 1.8.6  Using a constant-time (branchless) modular inverse [11]</p>
    <p>OpenSSL fixed the issue in 1.1.1e  Using a constant-time (branchless) GCD algorithm [11]</p>
    <p>[11] Bernstein, Daniel J., and Bo-Yin Yang. &quot;Fast constant-time gcd computation and modular inversion.&quot; CHES 2019.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Instruction Level Granularity  Imbalance number of instructions</p>
    <p>Leak the outcome of branches</p>
    <p>Fully Deterministic and reliable  Millions of instructions tested</p>
    <p>Attacks match the exact leakage model of branches</p>
    <p>Easy to scale and replicate  No reverse engineering of branches and</p>
    <p>microarchitectural components</p>
    <p>Tracking all the branches synchronously</p>
    <p>Branchless programming is hard!</p>
    <p>SGX Attacks</p>
    <p>Intels</p>
    <p>Responsibility</p>
    <p>Software Dev</p>
    <p>Responsibility</p>
    <p>Deterministic</p>
    <p>Ctrl Channel</p>
    <p>arch Side</p>
    <p>Channel</p>
    <p>This work</p>
  </div>
  <div class="page">
    <p>Questions?!</p>
    <p>https://github.com/j</p>
    <p>ovanbulck/sgx-step</p>
  </div>
</Presentation>
