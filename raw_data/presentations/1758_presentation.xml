<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>IO-Efficient Point Location and Map Overlay</p>
    <p>in Low-Density Subdivisions</p>
    <p>Joint work with Mark de Berg, Herman Haverkort, and Laura Toma</p>
    <p>Shripad Thite Department of Computer Science Technische Universiteit Eindhoven</p>
    <p>The Netherlands</p>
    <p>sthite@win.tue.nl</p>
  </div>
  <div class="page">
    <p>Point location</p>
    <p>Map = polygonal subdivision of the plane</p>
    <p>Given a point in the plane, identified by its coordinates, find the region of the map that contains the point</p>
  </div>
  <div class="page">
    <p>Map overlay</p>
    <p>Combine various attributes of data from different maps or map layers to compute the interaction of these attributes</p>
    <p>Given two polygonal subdivisions of the plane, red and blue, compute all intersections between a red edge and a blue edge</p>
  </div>
  <div class="page">
    <p>Geographic Information System (GIS)</p>
    <p>A GIS is a spatial database with algorithms for managing, analyzing, and displaying geographic information</p>
    <p>Applications with tremendous environmental, social, and economic impactinfrastructure planning, social engineering, facility location, agriculture</p>
    <p>Require algorithms for fundamental problems well-studied in Computational Geometryadjacency, containment, proximity . . .</p>
    <p>. . . with a twistgeographic data is huge!</p>
  </div>
  <div class="page">
    <p>Geometric algorithms for GIS</p>
    <p>Conventional analysis of algorithms accounts for worst-case behavior, often for inputs that do not occur in practice</p>
    <p>Complex algorithms are too hard to implement and make little impact on applications</p>
    <p>Simplifying assumptions about the computational model are not valid or hold only approximately</p>
    <p>Goal: Design theoretically efficient practical algorithms accompanied by an analysis of the algorithm complexity on a refined model of computation for realistic inputs</p>
  </div>
  <div class="page">
    <p>Massive data</p>
    <p>Practical inputs have gigabytes and terabytes of data</p>
    <p>We need algorithms whose performance scales well for increasingly large input data sets encountered in practice</p>
    <p>Traditional algorithms suffer from poor memory usage</p>
    <p>Poor cache behavior causes thrashing where excessive time is spent transferring data in and out of memory cache</p>
  </div>
  <div class="page">
    <p>External-memory algorithms</p>
    <p>The cost of data transfer significantly influences the real cost of an algorithm, often dominating CPU operations</p>
    <p>External-memory algorithms seek to minimize data transfer, by utilizing locality of reference</p>
    <p>Goal: Develop external-memory algorithms and data structures for geometric problems, where it is often harder to exploit locality</p>
  </div>
  <div class="page">
    <p>External-memory model</p>
    <p>Model of computation where memory is organized in two levelsinternal and external memory [Aggarwal &amp; Vitter]</p>
    <p>CPU operations can take place only on data in internal memory, which is limited in size to M words</p>
    <p>External memory is large enough for input, working space, and output</p>
    <p>Internal memory (cache)</p>
    <p>External memory (disk)</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>External-memory model</p>
    <p>Both internal and external memory organized in blocks of B words each</p>
    <p>One input/output operation (one IO) transfers one block of B words between internal and external memory</p>
    <p>The IO-cost of an algorithm is the number of IOoperations it performs</p>
    <p>IO-complexity accurately models cost of data transfer between disk and main memory, as a function of memory architecture parameters B and M</p>
  </div>
  <div class="page">
    <p>External-memory algorithms</p>
    <p>Designed to minimize Input/Output (IO) operations between slow but large external memory and fast but small internal memory</p>
    <p>Each IO operation reads or writes B words stored in a block; internal memory of size M holds M/B blocks</p>
    <p>Two-level memory model introduced by Aggarwal and Vitter has become a popular design and analysis tool</p>
    <p>Lots of IO-efficient algorithms developed and proved useful in practice</p>
  </div>
  <div class="page">
    <p>Remember ...</p>
    <p>Map = polygonal subdivision of the plane</p>
    <p>Point location: Given a point in the plane, identified by its coordinates, find the region of the map that contains the point</p>
    <p>Map overlay: Given two polygonal subdivisions of the plane, red and blue, compute all intersections between a red edge and a blue edge</p>
  </div>
  <div class="page">
    <p>Previous work</p>
    <p>overlay two maps in O(sort(n) + t/B) optimal IOs where t = number of intersections</p>
    <p>External-Memory Algorithms for Processing Line Segments in Geographic Information Systems Arge, Vengroff, and Vitter; ESA95</p>
    <p>We improve on space usage as well as query time, for low-density maps, at the expense of O(sort(n)) preprocessing ; our algorithms are simpler to implement</p>
    <p>batched point location in O((n + k)/B logM/B(n/B)) IOs, where k = number of query points using (n logM/B(n/B)) blocks of storage (???)</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Creating a linear size index supporting queries in logarithmic time</p>
    <p>Support efficient batched queries on the index</p>
    <p>Existing solutions too complicated and/or not IO-optimal</p>
    <p>usual hierarchical decompositions support O(log n) query time but using O(n log n) space</p>
    <p>to answer k queries presented in a batch more efficiently than k individual queries</p>
    <p>Can we overlay two maps in O(scan(n)) IOs?</p>
  </div>
  <div class="page">
    <p>Quadtree</p>
  </div>
  <div class="page">
    <p>Z-curve</p>
    <p>bit-interleaved order</p>
    <p>Space-filling curve visits points in order of their Z-index (a.k.a. Morton block index)</p>
  </div>
  <div class="page">
    <p>Quadtree meets Z-curve</p>
    <p>Z-curve visits every quadtree cell in a contiguous interval</p>
    <p>The leaves of a quadtree define a subdivision of the Zcurve</p>
    <p>Two quadtree cells are either disjoint or nested</p>
    <p>Z-intervals of two quadtree cells are either disjoint or nested</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>I. Fat Triangulations</p>
  </div>
  <div class="page">
    <p>Fat triangulation</p>
    <p>A -fat triangulation is one whose minimum angle is at least  &gt; 0</p>
    <p>We assume B = (1/) and M = (1/3)</p>
    <p>Our input is a triangulation with fatness</p>
    <p>max. degree 2/</p>
  </div>
  <div class="page">
    <p>Linear quadtree</p>
    <p>Our data structure is a linear quadtree:</p>
    <p>a linear quadtree stores only leaves (no pointers)</p>
    <p>We store quadtree leaves in Z-order</p>
    <p>internal nodes are represented implicitly and can be computed as required</p>
  </div>
  <div class="page">
    <p>Linear quadtree Recursively partition the bounding box into four quadrants</p>
    <p>Novel stopping condition:</p>
    <p>Lemma: Quadtree contains O(n/2) cells, each cell intersected by at most 2/ triangles; total number of triangle-cell intersections is O(n/2).</p>
    <p>Stop splitting a quadtree cell when all edges intersecting the cell are incident on a common vertex</p>
  </div>
  <div class="page">
    <p>Building local quadtrees</p>
    <p>Top-down recursive algorithm to build quadtree not IOefficient</p>
    <p>Instead, for each vertex v, build a local quadtree for the triangles incident on v</p>
    <p>Since vertex degree is at most 2/, a local quadtree can be built entirely in internal memory</p>
    <p>quadtree may have depth (n), hence IO-cost is O(n2/B)</p>
  </div>
  <div class="page">
    <p>Lemma: The union of all local quadtrees is identical to the global quadtree</p>
    <p>Proof: Every triangle T intersects a cell C of the global quadtree if and only if C belongs to the local quadtree of at least one of the vertices of T .</p>
    <p>Building local quadtrees</p>
    <p>We need to show that every cell in the global quadtree appears in some local quadtree</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Building an index</p>
    <p>Each triangle stored with every quadtree cell that it intersects</p>
    <p>The Z-index of a cell is its order along the space-filling Z-curve</p>
    <p>Whenever triangle T intersects cell C, the pair (T, C) is stored with associated key equal to the Z-index of C</p>
  </div>
  <div class="page">
    <p>Indexing triangles</p>
    <p>Build a cache-oblivious B-tree on the set of cell-triangle pairs sorted by key (Z-index of cell)</p>
    <p>Sort the O(n/2) cell-triangle pairs in Z-order of cells</p>
    <p>B-tree has size O(n/2) and depth O(logB(n/ 2))</p>
    <p>= O(sort(n/2)) IOs</p>
  </div>
  <div class="page">
    <p>How to locate a single point</p>
    <p>Search the B-tree from root to leaf with Z-index of p for quadtree cell containing point p</p>
    <p>Check p against all triangles intersecting the cell (at most 2/) in internal memory; all these triangles have the same key and are stored together</p>
    <p>= O(logB(n/ 2)) IOs</p>
  </div>
  <div class="page">
    <p>How to locate a batch of k points</p>
    <p>Sort the k query points by Z-index</p>
    <p>= O(sort(k)) IOs</p>
    <p>Merge the sorted query points and the sorted leaf cells by scanning in parallel</p>
    <p>= O(scan(n/2 + k)) IOs</p>
  </div>
  <div class="page">
    <p>How to overlay two triangulations</p>
    <p>Merge the two sorted sets of intervals, corresponding to the quadtrees of the two triangulations</p>
    <p>= O(scan(n/2)) IOs</p>
    <p>Quadtree leaves subdivide the Z-curve into disjoint intervals</p>
    <p>Since quadtree leaves are sorted in Z-order, the intervals are in sorted order</p>
  </div>
  <div class="page">
    <p>How to support updates</p>
    <p>Each of the following operations affects O(1/4) entries in the B-tree:</p>
    <p>= O( 1 4</p>
    <p>logB(n/ 2)) IOs per update</p>
    <p>insert/delete a vertex</p>
    <p>flip an edge</p>
    <p>Each update affects a local quadtree; perform corresponding changes to the global quadtree</p>
  </div>
  <div class="page">
    <p>Summary: fat triangulations</p>
    <p>We build a linear quadtree, from local quadtrees of small neighborhoods, using a novel stopping condition</p>
    <p>Two such quadtrees can be overlaid by scanning; the two indexes are merged in the process</p>
    <p>The B-tree has linear size and logarithmic depth, thus supporting efficient queries and updates</p>
    <p>The quadtree leaves are stored in a cache-oblivious Btree, indexed by their order along the Z-order space-filling curve</p>
  </div>
  <div class="page">
    <p>II. Low-Density Maps</p>
  </div>
  <div class="page">
    <p>Low-density maps</p>
    <p>The density of a set S of objects is the smallest number  such that every disk D intersects at most  objects of S whose diameter is at least the diameter of D</p>
    <p>The density of a planar map is the density of its edge set</p>
    <p>We assume B = ()</p>
    <p>Our input is a map with density</p>
    <p>A -fat triangulation has density  = O(1/)</p>
  </div>
  <div class="page">
    <p>Compressed quadtree An annulus is the set-theoretic difference of two ordinary nested cells</p>
    <p>An annulus can be represented by two nested Z-intervals</p>
    <p>compress</p>
    <p>ordinary cell</p>
    <p>annulus cell</p>
  </div>
  <div class="page">
    <p>Compressed linear quadtree</p>
    <p>We introduce compressed linear quadtrees:</p>
    <p>a compressed quadtree has many fewer nodes than an ordinary quadtree</p>
    <p>a compressed quadtree has more complicated cells (annuli); our storage scheme handles such cells</p>
  </div>
  <div class="page">
    <p>Quadtree of guarding points</p>
    <p>Build a compressed quadtree of guarding points of edges</p>
    <p>Stopping condition:</p>
    <p>Stop splitting a quadtree cell when it contains only one guarding point</p>
    <p>Guarding points of an edge = vertices of the axisaligned bounding square</p>
    <p>Lemma [de Berg et al.]: A square containing g guarding points intersects at most g + 4 edges</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>How to build a quadtree of points</p>
    <p>Sort guarding points in Z-order</p>
    <p>For each consecutive pair of points, output their local quadtree: their canonical bounding square and its four children</p>
    <p>Sort all cells and remove duplicates</p>
    <p>Result: Compressed quadtree of guarding points in O(sort(n)) IOs, where leaf cells are sorted in Z-order</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Computing cell-edge intersections</p>
    <p>We distribute the edges of the subdivision among the quadtree leaf cells</p>
    <p>For each edge e, we compute the quadtree cells that it intersects in a batched filtering</p>
    <p>A quadtree leaf cell not intersected by any edge is repeatedly merged with a predecessor or successor cell in Z-order</p>
    <p>use cache-oblivious distribution sweeping?</p>
  </div>
  <div class="page">
    <p>Small-size quadtree</p>
    <p>Lemma: Compressed quadtree of guarding points contains O(n) leaf cells, each leaf intersected by at most O() faces; total number of face-cell intersections is O(n).</p>
    <p>Build a B-tree on the set of cell-edge pairs sorted by key (Z-index of cell)</p>
    <p>B-tree has O(n) leaves and depth O(logB n)</p>
  </div>
  <div class="page">
    <p>How to locate a single point</p>
    <p>Search the B-tree from root to leaf with Z-index of p for quadtree cell containing point p</p>
    <p>Check p against all O() faces intersecting the cell, in internal memory; all these faces have the same key and are stored together</p>
    <p>= O(logB n) IOs</p>
  </div>
  <div class="page">
    <p>How to locate a batch of k points</p>
    <p>Sort the k query points by Z-index</p>
    <p>= O(sort(k)) IOs</p>
    <p>Merge the sorted query points and the sorted leaf cells by scanning in parallel</p>
    <p>= O(scan(n + k)) IOs</p>
  </div>
  <div class="page">
    <p>How to overlay two maps</p>
    <p>Merge the two sorted sets of intervals, corresponding to the quadtrees of the two maps</p>
    <p>= O(scan(n)) IOs</p>
    <p>Quadtree leaves subdivide the Z-curve into disjoint intervals</p>
    <p>Since quadtree leaves are sorted in Z-order, the intervals are in sorted order</p>
  </div>
  <div class="page">
    <p>Summary: low-density maps</p>
    <p>We introduce compressed linear quadtrees</p>
    <p>We store the quadtree leaves (only) in sorted order along the Z-order space-filling curve</p>
    <p>We build a 1D index, a B-tree of linear size, on the quadtree leaves supporting efficient queries</p>
    <p>We build a compressed linear quadtree of the set of O(n) guarding points for the edges of the subdivision</p>
    <p>Making construction and update algorithms cacheoblivious remains an open problem</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>The Z-order of a point is its bit-interleaved order</p>
    <p>Z(x0x1 . . . xb, y0y1 . . . yb) = x0y0x1y1 . . . xbyb</p>
    <p>The canonical bounding box of two points is computed from the longest common prefix of the bitstring representing their coordinates</p>
    <p>Several optimizations described in our paper</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>We give simple, practical, implementable, fast, scalable algorithms!</p>
    <p>answer k batched point location queries in O(scan(n) + sort(k )) IOs</p>
    <p>overlay two maps in O(scan(n)) IOs</p>
    <p>We preprocess a fat triangulation or low-density subdivision in O(sort(n)) IOs so we can:</p>
    <p>Our algorithms for triangulations are cache-oblivious</p>
  </div>
  <div class="page">
    <p>To read more ...</p>
    <p>I/O-Efficient Map Overlay and Point Location in Low-Density Subdivisions Mark de Berg, Herman Haverkort, ST, Laura Toma</p>
    <p>Condensed version to appear at EuroCG 2007</p>
    <p>http://www.win.tue.nl/sthite/pubs/</p>
    <p>Thanks to Sariel Har-Peled for valuable discussions</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>IO-efficient overlay of general subdivisions, not assuming fatness or low density</p>
    <p>IO-efficient range searching in low-density subdivisions</p>
    <p>Implementation (in TPIE?)</p>
  </div>
  <div class="page">
    <p>Tak!</p>
  </div>
</Presentation>
