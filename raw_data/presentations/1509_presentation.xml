<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Boosting Quasi-Asynchronous I/O for Better Responsiveness</p>
    <p>in Mobile Devices</p>
    <p>Daeho Jeong*+, Youngjae Lee+, Jin-Soo Kim+</p>
    <p>*Samsung Co., Suwon, Korea</p>
    <p>+Sungkyunkwan University</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>TOUCH!!</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>CPU?</p>
    <p>Memory?</p>
    <p>I/O?</p>
  </div>
  <div class="page">
    <p>Linux Approaches in I/O Scheduling</p>
    <p>Block layer</p>
    <p>Classify I/O into {SYNC || ASYNC}</p>
    <p>CFQ I/O scheduler</p>
    <p>SYNC queues have larger time slices than ASYNC</p>
    <p>A SYNC queue per a process</p>
    <p>(vs. An ASYNC queue is shared)</p>
    <p>Set a limit for ASYNC requests that can be dispatched in a single time slice</p>
    <p>A new SYNC req. preempts other ASYNC req.</p>
  </div>
  <div class="page">
    <p>I/O scheduler</p>
    <p>Page Cache page page page page page page</p>
    <p>Apps</p>
  </div>
  <div class="page">
    <p>I/O scheduler</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Page Cache page page page page page page</p>
    <p>By kworker,</p>
    <p>Especially, when the number</p>
    <p>of dirty pages exceeds</p>
    <p>the background dirty ratio</p>
  </div>
  <div class="page">
    <p>What if a process waits for</p>
    <p>the completion of asynchronous I/O?</p>
    <p>Processing Order Wait on Write Back!!</p>
    <p>Task A</p>
    <p>I/O scheduler</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
  </div>
  <div class="page">
    <p>Quasi-Asynchronous I/O (QASIO)</p>
    <p>Quasi-Asynchronous I/O</p>
    <p>Issued asynchronously, but should be treated as synchronous I/O</p>
    <p>Detected at run time</p>
    <p>Causes a problem such as priority inversion problem</p>
    <p>Causes unexpected delay</p>
    <p>Similar to priority inversion problem</p>
    <p>Processing Order Wait on Write Back!!</p>
    <p>Task A</p>
    <p>I/O scheduler</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>QASIO</p>
  </div>
  <div class="page">
    <p>Outline  Definition of QASIO</p>
    <p>Dependencies on QASIO</p>
    <p>Impact by QASIO</p>
    <p>Implementation Overview</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Dependencies on QASIO</p>
    <p>Async I/O</p>
    <p>QASIO Async</p>
    <p>I/O Async</p>
    <p>I/O</p>
    <p>Direct dependency</p>
    <p>Indirect dependency</p>
    <p>Process A</p>
    <p>Process B</p>
    <p>I/O scheduler</p>
  </div>
  <div class="page">
    <p>Types of Dependencies on QASIO</p>
    <p>Direct Dependencies</p>
    <p>Dmeta : When modifying a metadata page</p>
    <p>Ddata : When modifying a data page  Dsync : When guaranteeing data to be written back  Ddiscard : When completing discard commands</p>
    <p>Indirect Dependencies</p>
    <p>Ijhandle : When unable to obtain a journal handle  Ijcommit : When unable to complete fsync()</p>
  </div>
  <div class="page">
    <p>Types of Dependencies on QASIO</p>
    <p>Direct Dependencies</p>
    <p>Dmeta : When modifying a metadata page</p>
    <p>Ddata : When modifying a data page  Dsync : When guaranteeing data to be written back  Ddiscard : When completing discard commands</p>
    <p>Indirect Dependencies</p>
    <p>Ijhandle : When unable to obtain a journal handle  Ijcommit : When unable to complete fsync()</p>
    <p>Refer to our paper</p>
  </div>
  <div class="page">
    <p>Types of Dependencies on QASIO</p>
    <p>Direct Dependencies</p>
    <p>Dmeta : When modifying a metadata page</p>
    <p>Ddata : When modifying a data page  Dsync : When guaranteeing data to be written back  Ddiscard : When completing discard commands</p>
    <p>Indirect Dependencies</p>
    <p>Ijhandle : When unable to obtain a journal handle  Ijcommit : When unable to complete fsync()</p>
  </div>
  <div class="page">
    <p>Case Study of Dmeta</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>I/O Scheduler</p>
    <p>kworker</p>
    <p>rename(), write(), unlink(), chmod(), chown(), fsync()</p>
  </div>
  <div class="page">
    <p>Case Study of Dmeta</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>JBD2 Journaling 3. COMMIT</p>
    <p>&amp; make dirty page page page</p>
    <p>Apps</p>
    <p>inode entries, directory entries,</p>
    <p>block bitmaps, inode bitmaps,</p>
    <p>group descriptors, super block</p>
    <p>metadata buffer</p>
    <p>I/O Scheduler</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>I/O Scheduler Async I/O</p>
    <p>Case Study of Dmeta</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>JBD2 Journaling 3. COMMIT</p>
    <p>&amp; make dirty page page page</p>
    <p>Apps</p>
    <p>metadata buffer</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Dmeta</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>JBD2 Journaling 3. COMMIT</p>
    <p>&amp; make dirty</p>
    <p>rename(), write(), unlink(), chmod(), chown(), fsync()</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>metadata buffer</p>
    <p>I/O Scheduler Async I/O</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Dmeta</p>
    <p>Dmeta</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>metadata buffer</p>
    <p>JBD2 Journaling 3. COMMIT</p>
    <p>&amp; make dirty</p>
    <p>rename(), write(), unlink(), chmod(), chown(), fsync()</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>I/O Scheduler QASIO</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Dsync</p>
    <p>write()</p>
    <p>I/O Scheduler</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>UI Task Normal Case</p>
  </div>
  <div class="page">
    <p>Case Study of Dsync</p>
    <p>fsync() (flush &amp; wait)</p>
    <p>I/O Scheduler</p>
    <p>Page Cache</p>
    <p>Sync. Req.</p>
    <p>page</p>
    <p>UI Task Normal Case</p>
  </div>
  <div class="page">
    <p>Case Study of Dsync</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>UI Task</p>
    <p>I/O Scheduler</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Dsync</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>write()</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>UI Task</p>
    <p>page</p>
    <p>I/O Scheduler</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Dsync</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>write()</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>UI Task</p>
    <p>page</p>
    <p>I/O Scheduler Async I/O</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Dsync</p>
    <p>Dsync</p>
    <p>page</p>
    <p>Page Cache</p>
    <p>fsync()</p>
    <p>page page page</p>
    <p>Apps</p>
    <p>UI Task</p>
    <p>page</p>
    <p>I/O Scheduler QASIO</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Ijhandle</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>write()</p>
    <p>page page</p>
    <p>Apps</p>
    <p>Task A</p>
    <p>JBD2 Journaling</p>
    <p>handle</p>
    <p>Running Transaction</p>
    <p>I/O Scheduler</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Ijhandle</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>write()</p>
    <p>page page</p>
    <p>Apps</p>
    <p>Task A</p>
    <p>JBD2 Journaling</p>
    <p>handle</p>
    <p>Running Transaction</p>
    <p>I/O Scheduler Async I/O</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Ijhandle</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>write()</p>
    <p>page page</p>
    <p>Apps</p>
    <p>Task A</p>
    <p>JBD2 Journaling</p>
    <p>Running Transaction</p>
    <p>handle</p>
    <p>I/O Scheduler Async I/O</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Ijhandle</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>write()</p>
    <p>page page</p>
    <p>Apps</p>
    <p>Task A</p>
    <p>JBD2 Journaling</p>
    <p>Running Transaction</p>
    <p>handle</p>
    <p>Ddata I/O Scheduler QASIO</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Ijhandle</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>page page</p>
    <p>Apps</p>
    <p>Task A</p>
    <p>JBD2 Journaling</p>
    <p>handle</p>
    <p>Running Transaction</p>
    <p>Ddata I/O Scheduler QASIO</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>Case Study of Ijhandle</p>
    <p>Ijhandle</p>
    <p>Page Cache</p>
    <p>page</p>
    <p>page page</p>
    <p>Apps</p>
    <p>Task A</p>
    <p>JBD2 Journaling</p>
    <p>handle</p>
    <p>Running Transaction</p>
    <p>Other Tasks</p>
    <p>Ddata I/O Scheduler QASIO</p>
    <p>kworker</p>
  </div>
  <div class="page">
    <p>How Severe is the delay by QASIO?</p>
    <p>The delay by QASIOs depends on</p>
    <p>The number of outstanding requests</p>
    <p>The maximum number of requests</p>
    <p>I/O performance of underlying storage device</p>
    <p>A file system call can be blocked for</p>
    <p>Over 1 second on an MLC eMMC (S.W.: 57.4 MB/s)</p>
    <p>Over 4 seconds on a TLC eMMC (S.W.: 26.0 MB/s)</p>
    <p>I/O scheduler</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>Async I/O</p>
    <p>QASIO</p>
    <p>S.W. =&gt; Sequential Write Bandwidth</p>
  </div>
  <div class="page">
    <p>Degradations by QASIOs in Real-Life Scenarios</p>
    <p>App start time is slowed down by 2.4x in the worst case</p>
    <p>Shot count is decreased by 19%</p>
    <p>App install time is increased by 35%</p>
  </div>
  <div class="page">
    <p>How to Boost a QASIO</p>
    <p>Just focus on Direct Dependencies</p>
    <p>Two requirements</p>
    <p>Req.(1): When a task is waiting for an asynchronous I/Os completion, the kernel gives information about QASIO to the I/O scheduler</p>
    <p>Req.(2): The I/O scheduler should prioritize them among asynchronous I/Os based on the hint</p>
  </div>
  <div class="page">
    <p>How to Boost a QASIO</p>
    <p>Just focus on Direct Dependencies</p>
    <p>Two requirements</p>
    <p>Req.(1): When a task is waiting for an asynchronous I/Os completion, the kernel gives information about QASIO to the I/O scheduler</p>
    <p>=&gt; VFS, MM, FS, Block Layer</p>
    <p>Req.(2): The I/O scheduler should prioritize them among asynchronous I/Os based on the hint</p>
    <p>=&gt; Each I/O Scheduler</p>
  </div>
  <div class="page">
    <p>Implementation Overview</p>
  </div>
  <div class="page">
    <p>Implementation Overview</p>
  </div>
  <div class="page">
    <p>Evaluations</p>
    <p>Samsung Galaxy S5</p>
    <p>Exynos 5422 (quad Cortex-A15 &amp; quad Cortex-A7)</p>
    <p>2GB DRAM</p>
    <p>16GB eMMC storage (S.W.: 54.5MB/s, R.W.: 10.4MB/s)</p>
    <p>Android platform version 4.4.2 (KitKat)</p>
    <p>Linux kernel version 3.10.9</p>
    <p>Evaluation methodology</p>
    <p>Microbenchmarks, Real-life scenarios, Android I/O benchmarks</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>Five microbenchmarks (M1 ~ M5)</p>
    <p>M1</p>
    <p>Iterates the creation of a 4KB file, 500 times</p>
    <p>performs fsync() to each created file</p>
    <p>creat() -&gt; write(4KB) -&gt; fsync() -&gt; close()</p>
    <p>Mimics the I/O pattern of DB</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>The normalized total elapsed time</p>
    <p>The total elapsed time is reduced by up to 83.1%</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>The latency of key file system calls</p>
  </div>
  <div class="page">
    <p>Real-life scenarios</p>
    <p>Scenario A: Launching the Contacts App</p>
    <p>The worst case launch time is reduced by up to 44.8%</p>
    <p>The total wait time by Dmeta and Ddiscard is reduced</p>
    <p>by 96.1% and 87.4%</p>
  </div>
  <div class="page">
    <p>Real-life scenarios</p>
    <p>Scenario B: Burst Mode in the Camera App</p>
    <p>The shot count is improved by up to 14.4% The total wait time by Ddata is reduced by 98.4%</p>
  </div>
  <div class="page">
    <p>Real-life scenarios</p>
    <p>Scenario C: Installing the Angry Birds App</p>
    <p>The app install time is improved by up to 11.5%</p>
  </div>
  <div class="page">
    <p>Android I/O benchmarks</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A new type of I/O, QASIO  Seemingly asynchronous, but has the synchronous property</p>
    <p>Types of dependency on QASIO</p>
    <p>Novel scheme to detect and boost QASIO  The worst case latency of a file system call, 98.4%</p>
    <p>The worst case Contacts app start time, 44.8%</p>
    <p>Future work  Analyze the impact of QASIO on other types of systems</p>
    <p>Devise another solutions optimized for each type of QASIO</p>
  </div>
  <div class="page">
    <p>Q &amp; A</p>
    <p>Thank You</p>
    <p>Daeho Jeong (daeho43@gmail.com)</p>
    <p>Youngjae Lee (yjlee@csl.skku.edu)</p>
    <p>Jin-Soo Kim (jinsookim@skku.edu)</p>
  </div>
</Presentation>
