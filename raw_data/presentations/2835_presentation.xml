<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Gryff: Unifying Consensus and Shared Registers</p>
    <p>Matthew Burke Audrey Cheng Wyatt Lloyd</p>
    <p>Cornell University Princeton University</p>
  </div>
  <div class="page">
    <p>Applications Rely on Geo-Replicated Storage  Fault tolerant: data is safe despite failures</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Applications Rely on Geo-Replicated Storage  Fault tolerant: data is safe despite failures</p>
    <p>Linearizable: intuitive for application developers</p>
  </div>
  <div class="page">
    <p>Linearizable Replicated Storage Systems</p>
    <p>Cloud Spanner</p>
  </div>
  <div class="page">
    <p>Status Quo: Consensus or Shared Registers</p>
    <p>Consensus Shared Registers</p>
    <p>Strong Synchronization   Low Read Tail Latency</p>
    <p>Given the desire for fault tolerance and linearizability</p>
    <p>Unify consensus and shared registers?</p>
  </div>
  <div class="page">
    <p>Consensus &amp; State Machine Replication (SMR)  Generic interface: Command(c(.))</p>
    <p>Stable ordering: all preceding log positions are assigned commands</p>
    <p>c1 c2 c3 c4</p>
  </div>
  <div class="page">
    <p>Consensus &amp; State Machine Replication (SMR)  Generic interface: Command(c(.))</p>
    <p>Stable ordering: all preceding log positions are assigned commands</p>
    <p>Used in etcd, CockroachDB, Spanner, Azure Storage, Chubby</p>
    <p>c1 c2 c3 c4</p>
  </div>
  <div class="page">
    <p>SMR Requires Stable Order  Allow for strong synchronization primitives like read-modify-writes</p>
    <p>High tail latency in practice (e.g., by serializing through a leader)</p>
    <p>Consensus</p>
    <p>Strong Synchronization  Low Read Tail Latency</p>
  </div>
  <div class="page">
    <p>Shared Registers  Simple interface: Read()/Write(v)</p>
    <p>Unstable ordering: total order without pre-defined positions</p>
    <p>w1 &lt; w2 &lt; w3 &lt; w4</p>
  </div>
  <div class="page">
    <p>Shared Registers  Simple interface: Read()/Write(v)</p>
    <p>Unstable ordering: total order without pre-defined positions</p>
    <p>w1 &lt; w2 &lt; w3 &lt; w4</p>
    <p>w5</p>
  </div>
  <div class="page">
    <p>Shared Registers  Simple interface: Read()/Write(v)</p>
    <p>Unstable ordering: total order without pre-defined positions</p>
    <p>Similar to Cassandra, Dynamo, Riak</p>
    <p>w1 &lt; w2 &lt; w3 &lt; w4w5 &lt;</p>
  </div>
  <div class="page">
    <p>Shared Registers Use Unstable Order  Cannot implement strong synchronization primitives [Herlihy91]</p>
    <p>Flexibility of unstable order provides favorable tail latency</p>
    <p>Consensus Shared Registers</p>
    <p>Strong Synchronization   Low Read Tail Latency</p>
  </div>
  <div class="page">
    <p>RMWs with low read tail latency?</p>
    <p>Shared Objects: Interface for Unification  Interface: Read()/Write(v)/RMW(f(.))</p>
    <p>RMW(f(.))  read base v, compute new value f(v), write f(v)</p>
    <p>Examples: etcd, Redis, BigTable</p>
  </div>
  <div class="page">
    <p>Consensus-after-Register Timestamps (Carstamps)</p>
    <p>rmw1 rmw3 rmw4</p>
    <p>rmw2</p>
    <p>Unstable Order</p>
    <p>Stable Order w1 w2 w3 w4&lt; &lt; &lt;</p>
  </div>
  <div class="page">
    <p>Consensus-after-Register Timestamps (Carstamps)</p>
    <p>rmw1 rmw3 rmw4</p>
    <p>rmw2</p>
    <p>Unstable Order</p>
    <p>Stable Order w1 w2 w3 w4w5 &lt;&lt; &lt; &lt; w6&lt;</p>
  </div>
  <div class="page">
    <p>Carstamps  Tuple with three fields: (ts, id, rmwc)</p>
    <p>ts and id basis for unstable ordering of writes</p>
    <p>rmwc is set to 1 greater than rmwc of base to ensure stable ordering</p>
    <p>w1 &lt; w2 rmw1 rmw3</p>
    <p>(3,1,0)</p>
    <p>(3,1,1)</p>
    <p>(4,1,0)</p>
    <p>(4,1,1)</p>
    <p>rmw2(3,1,2)</p>
  </div>
  <div class="page">
    <p>Consensus Shared Registers</p>
    <p>Gryff</p>
    <p>Strong Synchronization    Low Read Tail Latency</p>
    <p>Gryff Unifies Consensus and Shared Registers  Only uses consensus when necessary, for strong synchronization</p>
  </div>
  <div class="page">
    <p>Gryff Design  Combine multi-writer [LS97] ABD [ABD95] &amp; EPaxos [MAK13]</p>
    <p>Modifications needed for safety:  Carstamps for proper ordering</p>
    <p>Synchronous Commit phase for rmws</p>
    <p>Modifications for better read tail latency:  Early termination for reads (fast path)</p>
    <p>Proxy optimization for reads (fast path more often)</p>
    <p>See the paper for details!</p>
  </div>
  <div class="page">
    <p>Gryff in Action</p>
  </div>
  <div class="page">
    <p>Gryff in Action</p>
    <p>(2,3,0) (1,0,0) (2,3,0)</p>
  </div>
  <div class="page">
    <p>Gryff in Action</p>
    <p>c1</p>
    <p>(2,3,0) (1,0,0) (2,3,0)</p>
    <p>w1  (3,1,0)</p>
    <p>Writes always terminate in 2 phases</p>
  </div>
  <div class="page">
    <p>Executed (3,1,1)</p>
    <p>(3,1,1)(3,1,1)</p>
    <p>Gryff in Action</p>
    <p>c1</p>
    <p>(2,3,0)</p>
    <p>c2</p>
    <p>rmw1 (3,1,1)</p>
    <p>Writes always terminate in 2 phases</p>
    <p>RMW carstamps directly after base</p>
  </div>
  <div class="page">
    <p>Read1Reply (3,1,1)</p>
    <p>(3,1,1)(3,1,1)</p>
    <p>Gryff in Action</p>
    <p>c1</p>
    <p>(2,3,0)</p>
    <p>c2</p>
    <p>r  (3,1,1)</p>
    <p>Writes always terminate in 2 phases</p>
    <p>RMW carstamps directly after base</p>
    <p>Reads often terminate in 1 phase</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Relative to state-of-the-art-consensus protocols:</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Relative to state-of-the-art-consensus protocols:</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>Geo-replication with 3 regions</p>
    <p>Baselines: MultiPaxos (industry standard), EPaxos (leaderless)</p>
    <p>not-to-scale ocean</p>
  </div>
  <div class="page">
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
    <p>serializing through far-away leader</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
    <p>EPaxos</p>
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
    <p>EPaxos</p>
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
    <p>delaying reads that conflict with concurrent writes</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
    <p>EPaxos</p>
    <p>Gryff</p>
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
  </div>
  <div class="page">
    <p>F ra</p>
    <p>ct io</p>
    <p>n o</p>
    <p>f R</p>
    <p>e a</p>
    <p>d s</p>
    <p>Latency (ms)</p>
    <p>MultiPaxos</p>
    <p>EPaxos</p>
    <p>Gryff</p>
    <p>Read Tail Latency (94.5% R, 4.5% W, 1% RMW, 25% Conflicts)</p>
  </div>
  <div class="page">
    <p>Summary  Consensus: strong synchronization w/ high tail latency</p>
    <p>Shared registers: low tail latency w/o strong synchronization</p>
    <p>Carstamps stably order read-modify-writes within a more efficient unstable order for reads and writes</p>
    <p>Gryff unifies an optimized shared register protocol with a state-of-the-art consensus protocol using carstamps</p>
    <p>Gryff provides strong synchronization w/ low read tail latency</p>
  </div>
  <div class="page">
    <p>Image Attribution  Griffin by Delapouite / CC BY 3.0 Unported (modified)</p>
    <p>etcd</p>
    <p>CockroachDB</p>
    <p>Spanner by Google / CC BY 4.0</p>
  </div>
</Presentation>
