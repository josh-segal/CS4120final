<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Non-Linear Compression: Gzip Me Not!</p>
    <p>Michael F. Nowlan Bryan Ford</p>
    <p>Ramakrishna Gummadi</p>
    <p>Decentralized and Distributed Systems Group Department of Computer Science</p>
    <p>Yale University</p>
    <p>June 13  14, Boston, MA</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 2</p>
    <p>Linear Compression</p>
    <p>The popular compression schemes (i.e., gzip, bzip2) are linear.</p>
    <p>t</p>
    <p>S 0</p>
    <p>comp</p>
    <p>C 1</p>
    <p>B 1</p>
    <p>S 1</p>
    <p>comp</p>
    <p>C 2</p>
    <p>B 2</p>
    <p>S 2</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 3</p>
    <p>Linear Compression</p>
    <p>Compression state accumulates sequentially, with each successive block of data that is compressed.</p>
    <p>t</p>
    <p>S 0</p>
    <p>comp</p>
    <p>C 1</p>
    <p>B 1</p>
    <p>S 1</p>
    <p>comp</p>
    <p>C 2</p>
    <p>B 2</p>
    <p>S 2</p>
    <p>Any given state depends on all previous compression states.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 4</p>
    <p>Linear Compression</p>
    <p>This dependency chain is restrictive.</p>
    <p>t</p>
    <p>S 0</p>
    <p>dcmp S 1</p>
    <p>dcmp S 2</p>
    <p>B 1</p>
    <p>B 2</p>
    <p>C 1</p>
    <p>C 2</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 5</p>
    <p>Linear Compression</p>
    <p>This dependency chain is restrictive.</p>
    <p>It forces decompression to proceed in the same order as compression (i.e., prohibits random-access).</p>
    <p>t</p>
    <p>S 0</p>
    <p>dcmp S 1</p>
    <p>dcmp S 2</p>
    <p>B 1</p>
    <p>B 2</p>
    <p>C 1</p>
    <p>C 2</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 6</p>
    <p>Linear Compression</p>
    <p>In summary: Popular compression schemes transform compression state linearly.</p>
    <p>S 0</p>
    <p>comp</p>
    <p>C 1</p>
    <p>B 1</p>
    <p>S 1</p>
    <p>comp</p>
    <p>C 2</p>
    <p>B 2</p>
    <p>S 2</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 7</p>
    <p>Outline</p>
    <p>Linear Compression  Compression in Storage Systems</p>
    <p>Storage Requirements  Linear Limitations</p>
    <p>Non-Linear Compression  Architecture and API  Example Applications</p>
    <p>Prototype Implementation  Preliminary Results</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 8</p>
    <p>Outline</p>
    <p>Linear Compression  Compression in Storage Systems</p>
    <p>Storage Requirements  Linear Limitations</p>
    <p>Non-Linear Compression  Architecture and API  Example Applications</p>
    <p>Prototype Implementation  Preliminary Results</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 9</p>
    <p>B 2</p>
    <p>Compression in Storage Systems</p>
    <p>Storage systems that use compression generally perform:</p>
    <p>Examples include:  De-duplicating file systems  Distributed source control management  Collaborative editing systems</p>
    <p>B 1</p>
    <p>B 2</p>
    <p>Data Source</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 10</p>
    <p>Storage Requirements</p>
    <p>Data blocks may be related, or not, and they may be available at different times (e.g., versions of a file), or all at once.</p>
    <p>Related Unrelated</p>
    <p>At once</p>
    <p>Over time</p>
    <p>Inter-Block Content</p>
    <p>Availability</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 11</p>
    <p>Storage Requirements</p>
    <p>Related Unrelated</p>
    <p>At once Linear</p>
    <p>Over time Linear</p>
    <p>Inter-Block Content</p>
    <p>Availability</p>
    <p>Data blocks may be related, or not, and they may be available at different times (e.g., versions of a file), or all at once.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 12</p>
    <p>Storage Requirements</p>
    <p>Data blocks may be related, or not, and they may be available at different times (e.g., versions of a file), or all at once.</p>
    <p>Related Unrelated</p>
    <p>At once Linear ???</p>
    <p>Over time ??? Linear</p>
    <p>Inter-Block Content</p>
    <p>Availability</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 13</p>
    <p>Linear Limitations</p>
    <p>Related Unrelated</p>
    <p>At once ???</p>
    <p>Over time</p>
    <p>Random Access</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 14</p>
    <p>Linear Limitations</p>
    <p>Resetting compression state between blocks enables random access...</p>
    <p>but significantly reduces the compression ratio for small blocks.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 15</p>
    <p>Linear Limitations</p>
    <p>Reuse Compression State</p>
    <p>Related Unrelated</p>
    <p>At once</p>
    <p>Over time ???</p>
    <p>No abstraction for doing this!</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 16</p>
    <p>Linear Limitations</p>
    <p>Linear compression forces an all-or-nothing choice</p>
    <p>(especially for blocks &lt; 1KB) of:</p>
    <p>(Random-access) vs. (Compression ratio)</p>
    <p>and no notion of copying, or reusing, compression state.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 17</p>
    <p>Outline</p>
    <p>Linear Compression  Compression in Storage Systems</p>
    <p>Storage Requirements  Linear Limitations</p>
    <p>Non-Linear Compression  Architecture and API  Example Applications</p>
    <p>Prototype Implementation  Preliminary Results</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 18</p>
    <p>NLC API</p>
    <p>Linear Compression API</p>
    <p>Non-Linear Compression API</p>
    <p>State initialize();  int compress(State, void*, int);  int decompress(State, void*, int);</p>
    <p>State fork(State);</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 19</p>
    <p>NLC Fork</p>
    <p>Foo.c</p>
    <p>v.1</p>
    <p>v.2a v.2b</p>
    <p>Small delta w/ Content dependency</p>
    <p>Small delta w/ Content dependency  Independent of v.2a</p>
    <p>Alice Bob</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 20</p>
    <p>NLC Fork</p>
    <p>Intuition: Fork copies compression state to allow independent compression, or decompression, using previous compression state.</p>
    <p>S 2a</p>
    <p>S 2b</p>
    <p>S 1</p>
    <p>S 0</p>
    <p>Fork</p>
    <p>Compress v.1</p>
    <p>Independent Compress</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 21</p>
    <p>NLC API</p>
    <p>Linear Compression API</p>
    <p>Non-Linear Compression API</p>
    <p>State initialize();  int compress(State, void*, int);  int decompress(State, void*, int);</p>
    <p>State fork(State);</p>
    <p>State merge(State, State);</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 22</p>
    <p>NLC Merge</p>
    <p>Foo.c</p>
    <p>v.1</p>
    <p>v.2a v.2b</p>
    <p>int func_alice() {</p>
    <p>}</p>
    <p>int func_bob() {</p>
    <p>}</p>
    <p>v.3</p>
    <p>Alice Bob</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 23</p>
    <p>NLC Merge</p>
    <p>Intuition: Merge combines compression state to allow future compression to use all acquired state between two nodes.</p>
    <p>S 2a</p>
    <p>S 2b</p>
    <p>Independent Compress</p>
    <p>S 3a</p>
    <p>S 3b</p>
    <p>S 3</p>
    <p>Merge</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 24</p>
    <p>NLC API</p>
    <p>Linear Compression API</p>
    <p>Non-Linear Compression API</p>
    <p>State initialize();  int compress(State, void*, int);  int decompress(State, void*, int);</p>
    <p>State fork(State);</p>
    <p>State merge(State, State);</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 25</p>
    <p>NLC Architecture</p>
    <p>NLC module provided by the OS.  Single abstraction for all outstanding state nodes.  Independent of any specific compression scheme.</p>
    <p>Supports Huffman, Arithmetic, LZW, LZ77, etc.  No expectation of random access within a block.</p>
    <p>Normal linear compression within blocks.  Application can use different paths through the DAG for logically distinct</p>
    <p>streams of data.  Application keeps compressor in-sync with decompressor, but Future</p>
    <p>Work discusses potential NLC naming, or identification, schemes.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 26</p>
    <p>Outline</p>
    <p>Linear Compression  Compression in Storage Systems</p>
    <p>Storage Requirements  Linear Limitations</p>
    <p>Non-Linear Compression  Architecture and API  Example Applications</p>
    <p>Prototype Implementation  Preliminary Results</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 27</p>
    <p>NLC  Parallel Compression</p>
    <p>S 0</p>
    <p>S 2</p>
    <p>S 1</p>
    <p>S 3</p>
    <p>S 5</p>
    <p>S 4</p>
    <p>S 6</p>
    <p>Legend: = Fork = Merge = Compress</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 28</p>
    <p>NLC  Synchronized Streams</p>
    <p>S 0</p>
    <p>S 1</p>
    <p>S 2</p>
    <p>S 5</p>
    <p>S 3</p>
    <p>S 4</p>
    <p>Legend: = Fork = Merge = Compress</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 29</p>
    <p>NLC  Windowed Compression S</p>
    <p>S 2</p>
    <p>S 1</p>
    <p>S 3</p>
    <p>S 2 'S</p>
    <p>Base state</p>
    <p>S CUM</p>
    <p>Cumulative state</p>
    <p>S 4</p>
    <p>S 5</p>
    <p>S 6</p>
    <p>S CUM</p>
    <p>S CUM</p>
    <p>For any given state, x, and current state, c, x is merged into the Cumulative State when:</p>
    <p>x &lt;= (c - w)</p>
    <p>Window, w, = 3.</p>
    <p>Legend: = Fork = Merge = Compress</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 30</p>
    <p>Outline</p>
    <p>Linear Compression  Compression in Storage Systems</p>
    <p>Storage Requirements  Linear Limitations</p>
    <p>Non-Linear Compression  Architecture and API  Example Applications</p>
    <p>Prototype Implementation  Preliminary Results</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 31</p>
    <p>Prototype Implementation</p>
    <p>We have an Adaptive Huffman compressor in C++  Proof-of-concept; Not meant to compete head-to-head with</p>
    <p>gzip or other compressors.  Order of magnitude slower  Fork and Merge are very expensive  Compression ratios approach optimal depending on</p>
    <p>application fork/merge strategy.  Merge allows eventual usage of all compression</p>
    <p>state.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 32</p>
    <p>Preliminary Results</p>
    <p>Block size = 128 bytes Window size = 3 blocks</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 33</p>
    <p>Preliminary Results</p>
    <p>The cost for unordered decompression is paid in the first 10 KB.</p>
    <p>Block size = 128 bytes Window size = 3 blocks</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 34</p>
    <p>Outline</p>
    <p>Linear Compression  Compression in Storage Systems</p>
    <p>Storage Requirements  Linear Limitations</p>
    <p>Non-Linear Compression  Architecture and API  Example Applications</p>
    <p>Prototype Implementation  Preliminary Results</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 35</p>
    <p>Future Work  Challenges</p>
    <p>Merge, Merge, Merge  It's computationally expensive and slow.  Is it even needed? Are approximation heuristics good</p>
    <p>enough?  Fork/Merge behaviors</p>
    <p>Should we use Fork and Merge sparingly?  Block size vs. Memory overhead</p>
    <p>As block sizes decrease, the compression overhead ratio increases.</p>
    <p>State node naming or identification  NLC module should do it for the application.</p>
  </div>
  <div class="page">
    <p>DeDiS Group, Yale CS HotStorage '12, Boston, MA 36</p>
    <p>Thanks to Jana Iyengar, Avi Silberschatz, Michael Fischer, Rob Ross, the anonymous</p>
    <p>reviewers...</p>
    <p>And all of you for listening!</p>
    <p>Questions?</p>
  </div>
</Presentation>
