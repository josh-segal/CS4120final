<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Adaptive Android Kernel Live Patching</p>
    <p>Yue Chen1, Yulong Zhang2, Zhi Wang1, Liangzhao Xia2, Chenfu Bao2, Tao Wei2</p>
    <p>Florida State University1</p>
    <p>Baidu X-Lab2</p>
    <p>USENIX Security Symposium 2017</p>
  </div>
  <div class="page">
    <p>Android Kernel Vulnerabilities</p>
    <p>Apps</p>
    <p>Java API Framework</p>
    <p>Native C/C++ Libraries</p>
    <p>Linux Kernel</p>
    <p>Android Runtime</p>
    <p>Hardware Abstraction Layer</p>
    <p>TrustZone</p>
  </div>
  <div class="page">
    <p>Android Kernel Vulnerabilities</p>
    <p>Apps</p>
    <p>Java API Framework</p>
    <p>Native C/C++ Libraries</p>
    <p>Linux Kernel</p>
    <p>Android Runtime</p>
    <p>Hardware Abstraction Layer</p>
    <p>TrustZone</p>
  </div>
  <div class="page">
    <p>Android Kernel Vulnerabilities</p>
    <p>Apps</p>
    <p>Java API Framework</p>
    <p>Native C/C++ Libraries</p>
    <p>Linux Kernel</p>
    <p>Android Runtime</p>
    <p>Hardware Abstraction Layer</p>
    <p>TrustZone</p>
  </div>
  <div class="page">
    <p>Number of Disclosed Android Kernel Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Problem: Old Exploits Remain Effective</p>
    <p>Number of devices vulnerable to two root exploits as of Nov. 2016</p>
    <p>Android 5.0 released in November 2014  46.3% of devices run an older version in September 2016</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Officially patching an Android device is a long process  Third-party</p>
    <p>Delayed/non-existing kernel source code  Binary-based</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Severely fragmented Android ecosystem  Adaptive</p>
    <p>http://d.ibtimes.co.uk/en/full/1395443/android-fragmentation-2014.png</p>
  </div>
  <div class="page">
    <p>Solution</p>
    <p>Third-party Binary-based Adaptive Kernel Live Patching</p>
    <p>Key requirements:</p>
    <p>Adaptiveness</p>
    <p>It should be adaptive to various device kernels</p>
    <p>Safety</p>
    <p>Patches should be easy to audit</p>
    <p>Their behaviors must be technically confined</p>
    <p>Timeliness</p>
    <p>Response time should be short, after disclosed vulnerability or exploit</p>
    <p>Performance</p>
    <p>The solution should not incur non-trivial performance overhead</p>
  </div>
  <div class="page">
    <p>Feasibility Study: Dataset</p>
    <p>Studied 1139 Android kernels</p>
  </div>
  <div class="page">
    <p>Most kernel functions are stable across devices and Android releases</p>
    <p>Most vulnerabilities triggered by malicious inputs</p>
    <p>Many functions return error codes  Return a pointer  ERR_PTR</p>
    <p>Gracefully return</p>
    <p>Feasibility Study: Observations</p>
    <p>Filter them</p>
  </div>
  <div class="page">
    <p>Overall Approach: Input Validation</p>
  </div>
  <div class="page">
    <p>KARMA</p>
    <p>KARMA: Kernel Adaptive Repair for Many Androids</p>
    <p>Adaptive  Automatically adapt to various device kernels</p>
    <p>Memory-safe  Protect kernel from malicious (misused) patches</p>
    <p>Multi-level  Flexible for different vulnerabilities</p>
  </div>
  <div class="page">
    <p>KARMA Design: Safety</p>
    <p>Patches are written in Lua, confined by Lua VM at runtime</p>
    <p>A patch can only be placed at designated locations</p>
    <p>Patched functions must return error codes or void  Use existing error handling to recover from attacks</p>
    <p>A patch can read but not write the kernel memory  Confined by KARMA APIs</p>
    <p>Prevent malicious (misused) patches from changing the kernel</p>
    <p>Prevent information leakage</p>
  </div>
  <div class="page">
    <p>KARMA Design: Multi-level Patching</p>
    <p>A patch can only be placed at designated locations Level 1: Entry or return point of a (vulnerable) function</p>
    <p>Level 2: Before or after the call site to a callee</p>
    <p>e.g., copy_from_user</p>
    <p>Level 3: Binary-based patch</p>
    <p>76 critical Android kernel vulnerabilities Level 1: 49/76 (64.5%)</p>
    <p>Level 2: 22/76 (28.9%)</p>
    <p>Level 3: 5/76 (6.6%)</p>
  </div>
  <div class="page">
    <p>KARMA Patch Example</p>
    <p>Part of the official patch of CVE-2014-3153 (Towelroot)</p>
  </div>
  <div class="page">
    <p>KARMA Patch Example</p>
    <p>-EINVAL</p>
    <p>More complex examples in the paper</p>
  </div>
  <div class="page">
    <p>KARMA API</p>
    <p>Available to patches</p>
  </div>
  <div class="page">
    <p>KARMA Architecture</p>
    <p>Offline Patch Generation and Verification</p>
    <p>Online Live Patching by KARMA Client</p>
  </div>
  <div class="page">
    <p>Offline Patch Adaptation</p>
    <p>Patch A</p>
  </div>
  <div class="page">
    <p>Offline Patch Adaptation</p>
    <p>Three steps:</p>
    <p>Inlined</p>
  </div>
  <div class="page">
    <p>Vulnerable Function Identification Example CVE-2015-3636 (PingPong Root)</p>
    <p>Device A: ping_unhash Device B: ping_v4_unhash</p>
    <p>Func_A Func_B Func_C</p>
    <p>Func_D Func_E</p>
    <p>ping_unhash</p>
    <p>Func_A Func_B Func_C</p>
    <p>Func_D Func_E</p>
    <p>ping_v4_unhash</p>
    <p>Call graph based similarity comparison</p>
  </div>
  <div class="page">
    <p>Semantic Matching</p>
    <p>Check if two functions are semantically equivalent</p>
    <p>If so, adapt the reference patch to the target kernel</p>
    <p>Syntactic matching is too strict  Different compilers can generate different code with same semantics</p>
    <p>Instruction order, register allocation, instruction selection, code layout</p>
  </div>
  <div class="page">
    <p>Semantic Matching</p>
    <p>Same semantics with different syntax 22</p>
  </div>
  <div class="page">
    <p>Semantic Matching</p>
    <p>Check if two functions are semantically equivalent</p>
    <p>If so, adapt the reference patch to the target kernel</p>
    <p>Syntactic matching is too strict  Different compilers can generate different code with same semantics</p>
    <p>Instruction order, register allocation, instruction selection, code layout</p>
    <p>Use symbolic execution to abstract these differences and adapt patches  Use approximation to improve scalability (details in the paper)</p>
  </div>
  <div class="page">
    <p>Online Patch Application</p>
    <p>Function entry point hooking</p>
  </div>
  <div class="page">
    <p>Prototype Implementation</p>
    <p>Lua engine in kernel (11K SLOC)  Simple</p>
    <p>Memory-safe</p>
    <p>Easy to embed and extend</p>
    <p>24 years of development</p>
    <p>Semantic matching  angr</p>
  </div>
  <div class="page">
    <p>Evaluation: Applicability</p>
    <p>Evaluated 76 critical vulnerabilities in the last three years</p>
    <p>Patch levels:  Level-1: 49</p>
    <p>Level-2: 22</p>
    <p>Level-3: 5</p>
  </div>
  <div class="page">
    <p>Evaluation: Adaptability</p>
  </div>
  <div class="page">
    <p>Evaluation: Adaptability</p>
    <p>Types and frequencies of instruction opcodes</p>
  </div>
  <div class="page">
    <p>Evaluation: Adaptability</p>
    <p>Number of function calls and conditional branches (to abstract CFG)</p>
  </div>
  <div class="page">
    <p>Evaluation: Adaptability</p>
    <p>KARMAs semantic matching</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>CF-Bench results with different patches</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>Execution time of chmod with different patches</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>User-space vulnerability protection  Project Treble  only partially solve the problem</p>
    <p>Lua engine in the kernel (11K SLOC)  Alternative execution engines, like BPF or sandboxed binary patches</p>
    <p>Error handling code could be vulnerable  Error injection to detect vulnerable error-handling code</p>
    <p>Improve semantic matching</p>
  </div>
  <div class="page">
    <p>Open Adaptive Security ExtensionS</p>
    <p>An initiative founded by Baidu to enable security hardening and fast/scalable live patching for mobile and IoT devices</p>
    <p>An open collaborative alliance of security vendors, device vendors, academia, and community researchers</p>
    <p>https://oases.io (more to be announced in Oct. 2017)</p>
  </div>
  <div class="page">
    <p>Adaptive Android Kernel Live Patching</p>
    <p>www.yuechen.me</p>
    <p>Q &amp; A</p>
  </div>
</Presentation>
