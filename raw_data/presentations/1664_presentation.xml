<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>CMU in Silicon Valley</p>
    <p>Established 2002</p>
    <p>Significant growth in</p>
    <p>the past 10 years</p>
  </div>
  <div class="page">
    <p>Traffic to a Web site can vary dramatically</p>
    <p>In spite of such varying traffic, it is highly desirable that a Web site is reactive:</p>
    <p>Crisp Web experience:  150 milliseconds latency [Tolia et al., 2006]</p>
    <p>Google: 0.5 sec latency  -20% page views</p>
    <p>Amazon: +100ms latency  -1% in revenue</p>
    <p>Quick and predictable user response is essential in many computer systems</p>
    <p>This paper focuses on achieving such users responses for the Apache Web server</p>
    <p>By means of adaptive feedback control</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Apache Web Server</p>
  </div>
  <div class="page">
    <p>Apache Web Server (1)</p>
    <p>Apache contains a pool of workers, each a process</p>
    <p>We use a Unix-based system in experiments</p>
    <p>The Apache daemon listens for requests and delegates HTTP communications to the workers</p>
    <p>To control incoming connections, an administrator can adjust:</p>
    <p>MaxClients  MC and</p>
    <p>KeepAlive  KA.</p>
    <p>We propose adjusting these parameter by means of adaptive feedback control</p>
  </div>
  <div class="page">
    <p>Apache Web Server (2)</p>
    <p>The Apache daemon maintains up to MaxClients (MC) worker processes:</p>
    <p>A process is in one of three states: idle, busy, or thinking</p>
    <p>Idle workers are waiting for a new connection request; busy workers are currently processing a request and awaiting a reply; and thinking workers are waiting for an HTTP request after an established connection</p>
    <p>Apache 2.2 default: MC = 150 worker processes</p>
    <p>KeepAlive (KA): how long a worker maintains its current connection with a client before terminating:</p>
    <p>i.e. changing state from thinking to idle</p>
    <p>Apache 2.2 default: KA = 5 seconds</p>
  </div>
  <div class="page">
    <p>Related</p>
    <p>Work</p>
    <p>Traffic generation</p>
    <p>for testing</p>
    <p>performance of</p>
    <p>Web servers</p>
    <p>Feedback</p>
    <p>computing for</p>
    <p>controlling Web</p>
    <p>servers</p>
  </div>
  <div class="page">
    <p>Adaptive Control</p>
  </div>
  <div class="page">
    <p>Feedback Computing Big Picture</p>
  </div>
  <div class="page">
    <p>Adaptive Control: Results</p>
    <p>Our related work [Reed et al., 2012] deals with adaptive parameters using minimum degree pole placement.</p>
    <p>Here uc(t) is the setpoint. The 2nd order RLS model was used.</p>
    <p>21</p>
    <p>tubtub</p>
    <p>tyatyaty</p>
  </div>
  <div class="page">
    <p>Feedback Computing Approach</p>
    <p>Indirect Adaptive</p>
    <p>Control Approach</p>
    <p>Adaptive</p>
    <p>Controller</p>
    <p>Apache Web</p>
    <p>Server</p>
    <p>System</p>
    <p>Identification</p>
    <p>Desired</p>
    <p>Performance</p>
  </div>
  <div class="page">
    <p>System Identification</p>
    <p>Linear plant model is described by:</p>
    <p>Where i denotes the ith plant model</p>
  </div>
  <div class="page">
    <p>System Identification</p>
    <p>Modified Recursive Least Squares (MRLS) [Bodson, 1995]</p>
    <p>Minimize:</p>
    <p>Recursive algorithm is given by:</p>
    <p>where</p>
  </div>
  <div class="page">
    <p>Adaptive Control</p>
    <p>Algorithm</p>
    <p>Minimum degree pole placement</p>
    <p>algorithm [Astrom, 1994]</p>
    <p>Parameters are updated online via the</p>
    <p>MRLS algorithm</p>
    <p>Parameters  m and  are tuned to:</p>
    <p>Minimize the susceptibility to noise</p>
    <p>Enable the ability to track time-varying</p>
    <p>plant changes</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
  </div>
  <div class="page">
    <p>Overview of Experiments</p>
    <p>In the experiments we:  measure the Apache Web server under</p>
    <p>varying number of connections,</p>
    <p>introduce an ARX model, and</p>
    <p>test an adaptive MDPP controller that sets the maximum number of concurrent connections</p>
  </div>
  <div class="page">
    <p>Simulation Setup and Procedure (1)</p>
    <p>To generate HTTP traffic and simulate a simple user interaction with the client, we used Httperf.</p>
  </div>
  <div class="page">
    <p>Simulation Setup and Procedure (2)</p>
    <p>We used Apache v2.2 running on a server workstation:</p>
    <p>Linux kernel 3.0.0-14 x64 with a dual core Intel T2400 and 2GB of RAM</p>
    <p>Hosting PHP code simulating an active blog</p>
    <p>Web server parameters were kept at their defaults</p>
    <p>A client workstation of similar hardware specifications, on the same LAN, sent HTTP requests to the server to simulate Web traffic</p>
    <p>For a single HTTP request to the server:</p>
    <p>Collect statistics as shown in the figure</p>
  </div>
  <div class="page">
    <p>Apache Web Server Performance (1) The effect of increasing the number of concurrent</p>
    <p>connections on Apache Web server performance.</p>
    <p>RPS increasing until 9</p>
    <p>concurrent connections,</p>
    <p>at which point the st.dev.</p>
    <p>increases and mean RPS</p>
    <p>decreases.</p>
    <p>Connection errors</p>
    <p>steadily rise after</p>
    <p>9 concurrent</p>
    <p>connections.</p>
    <p>Effect of concurrent</p>
    <p>connections on</p>
    <p>mean HTTP</p>
    <p>request response</p>
    <p>time TR and</p>
    <p>transfer time TT</p>
  </div>
  <div class="page">
    <p>Apache Web Server Performance (2)</p>
    <p>Based on the above, we hypothesize two scenarios that an Apache administrator may optimize for, using a model and controller:  Maximizing overall throughput (RPS) when quick</p>
    <p>HTTP replies are not necessary  such as when downloading large files or executing analytics</p>
    <p>Ensuring that HTTP reply time is low enough to keep the user engaged; 150ms has been suggested as an upper bound for crisp user interaction [Tolia, 2006]</p>
  </div>
  <div class="page">
    <p>Model Tracking Experiments</p>
    <p>Model tracking of y(t) for least squares (LS) and MSLS (top),</p>
    <p>model error (middle), and the open-loop, sinusoid input for max</p>
    <p>number of connections uc(t) (bottom).</p>
  </div>
  <div class="page">
    <p>Setpoint Tracking Experiments</p>
    <p>Closed-loop simulation</p>
    <p>using an MSLS model for</p>
    <p>tracking y(t) and MDPP</p>
    <p>control of u(t). We seek to</p>
    <p>minimize the error function</p>
    <p>e(t) = |yMSLS(t) - yc(t)|</p>
    <p>Setpoint tracking with a change of desired reply time yc(t)=100</p>
    <p>to yc(t)=50 at timestep t=150 (top) and MDPP controller value</p>
    <p>for max connections u(t) (bottom). Note that yc(t) is shown in</p>
    <p>milliseconds.</p>
  </div>
  <div class="page">
    <p>Setpoint Tracking + Load Change</p>
    <p>Experiments</p>
    <p>Setpoint tracking with a simultaneous setpoint change of</p>
    <p>yc(t)=100 to yc(t)=1000 and load generation parameter</p>
    <p>change (simulating Web traffic increase) of =100 to =200</p>
    <p>at t=150.</p>
  </div>
  <div class="page">
    <p>An Apache Web server can be modeled and controlled to enforce user experience metrics</p>
    <p>Specifically HTTP reply time</p>
    <p>Parameters were learned on-line, and adaptive performance was strong and noise-resilient</p>
    <p>Future work:</p>
    <p>Additional parameters of the Apache Web server compression, encryption levels, caching, [Abhari, 2007]</p>
    <p>Metrics for disk I/O and network bandwidth [Ruan, 2006]</p>
    <p>Mobile Computing Testbed at CMU Silicon Valley</p>
    <p>Conclusions &amp; Next Steps</p>
  </div>
</Presentation>
