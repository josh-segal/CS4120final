<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FreeFlow: Software-based Virtual RDMA Networking for Containerized Clouds</p>
    <p>Daehyeok Kim</p>
    <p>Tianlong Yu1, Hongqiang Liu3, Yibo Zhu4, Jitu Padhye2, Shachar Raindel2</p>
    <p>Chuanxiong Guo4, Vyas Sekar1, Srinivasan Seshan1</p>
    <p>Carnegie Mellon University1, Microsoft2, Alibaba group3, Bytedance4</p>
  </div>
  <div class="page">
    <p>Two Trends in Cloud Applications</p>
    <p>Lightweight isolation</p>
    <p>Portability</p>
    <p>Higher networking performance</p>
    <p>Containerization RDMA networking</p>
  </div>
  <div class="page">
    <p>Benefits of Containerization</p>
    <p>NIC</p>
    <p>Container 1</p>
    <p>IP: 10.0.0.1</p>
    <p>IP: 30.0.0.1</p>
    <p>Network App</p>
    <p>Container 2</p>
    <p>IP: 20.0.0.1</p>
    <p>Network App</p>
    <p>Host 1 Host 2</p>
    <p>NIC</p>
    <p>Container 2</p>
    <p>Network App</p>
    <p>IP: 20.0.0.1</p>
    <p>IP: 40.0.0.1</p>
    <p>Migration</p>
    <p>Namespace Isolation</p>
    <p>Portability Software Switch</p>
    <p>Software Switch</p>
  </div>
  <div class="page">
    <p>Containerization and RDMA are in Conflict!</p>
    <p>RDMA NIC</p>
    <p>Container 1</p>
    <p>IP: 10.0.0.1</p>
    <p>IP: 10.0.0.1</p>
    <p>RDMA App</p>
    <p>Container 2</p>
    <p>IP: 10.0.0.1</p>
    <p>RDMA App</p>
    <p>Host 1 Host 2</p>
    <p>RDMA NIC</p>
    <p>Container 2</p>
    <p>RDMA App</p>
    <p>IP: 20.0.0.1</p>
    <p>IP: 20.0.0.1</p>
    <p>Migration</p>
    <p>Namespace Isolation</p>
    <p>Portability</p>
  </div>
  <div class="page">
    <p>Existing H/W based Virtualization Isnt Working</p>
    <p>Container 1</p>
    <p>IP: 10.0.0.1</p>
    <p>IP: 10.0.0.1</p>
    <p>RDMA App</p>
    <p>Container 2</p>
    <p>IP: 10.0.0.2</p>
    <p>RDMA App</p>
    <p>Container 2</p>
    <p>RDMA App</p>
    <p>IP: 20.0.0.1</p>
    <p>Host 1 Host 2</p>
    <p>VF 1 VF 2</p>
    <p>NIC Switch</p>
    <p>RDMA NIC</p>
    <p>IP: 10.0.0.2</p>
    <p>VF</p>
    <p>NIC Switch</p>
    <p>IP: 20.0.0.1</p>
    <p>Migration</p>
    <p>Using Single Root I/O Virtualization (SR-IOV)</p>
    <p>VF Virtual Function</p>
    <p>Namespace Isolation</p>
    <p>Portability</p>
  </div>
  <div class="page">
    <p>Sub-optimal Performance of Containerized Apps</p>
    <p>Resnet-50 Inception-v3 Alexnet Tr</p>
    <p>a in</p>
    <p>in g</p>
    <p>S p</p>
    <p>e e</p>
    <p>d</p>
    <p>(I m</p>
    <p>a g</p>
    <p>e s/</p>
    <p>se c)</p>
    <p>Model</p>
    <p>Native RDMA</p>
    <p>Container+TCP</p>
    <p>RDMA networking can improve the training speed of NN model by ~ 10x !</p>
    <p>Speech recognition RNN training Image classification CNN training</p>
    <p>C D</p>
    <p>F</p>
    <p>Time per step (sec)</p>
    <p>Native RDMA Container+TCP</p>
  </div>
  <div class="page">
    <p>Our Work: FreeFlow</p>
    <p>Enable high speed RDMA networking capabilities for containerized applications</p>
    <p>Compatible with existing RDMA applications</p>
    <p>Close to native RDMA performance  Evaluation with real-world data-intensive applications</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>FreeFlow Design</p>
    <p>Implementation and Evaluation</p>
  </div>
  <div class="page">
    <p>FreeFlow Design Overview</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>Native RDMA FreeFlow</p>
    <p>RDMA NIC</p>
    <p>Container 1</p>
    <p>IP: 10.0.0.1 RDMA App</p>
    <p>Container 2</p>
    <p>IP: 20.0.0.1</p>
    <p>FreeFlow</p>
    <p>IP: 30.0.0.1</p>
    <p>Host Host</p>
    <p>Verbs library</p>
    <p>Verbs library</p>
    <p>Verbs API Verbs API</p>
    <p>RDMA App</p>
    <p>Verbs API</p>
    <p>NIC command</p>
  </div>
  <div class="page">
    <p>Background on RDMA</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEM-1RDMA CTX</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEM-2 RDMA CTX</p>
    <p>Host 1 wants to write contents in MEM-1 to MEM-2 on Host 2</p>
    <p>Host 1 Host 2</p>
    <p>Verbs library Verbs library</p>
  </div>
  <div class="page">
    <p>FreeFlow in the Scene</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEM-1RDMA CTX</p>
    <p>Container 1 wants to write contents in MEM-1 to MEM-2 on Container 2</p>
    <p>Container 1 Container 2</p>
    <p>FreeFlow</p>
    <p>S-RDMA CTX S-MEM-1</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>RDMA CTXMEM-2</p>
    <p>FreeFlow</p>
    <p>S-MEM-2 S-RDMA CTX</p>
    <p>C1: How to forward verbs calls?</p>
    <p>Verbs library Verbs library</p>
    <p>C2: How to synchronize memory?</p>
  </div>
  <div class="page">
    <p>Challenge 1: Verbs forwarding in Control Path</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>FreeFlow</p>
    <p>Verbs library</p>
    <p>Container</p>
    <p>NIC command</p>
    <p>Verbs API</p>
    <p>?</p>
    <p>RDMA App</p>
    <p>Shim</p>
    <p>ibv_post_send (struct ibv_qp* qp, )</p>
    <p>Attempt 1: Forward as it is Incorrect</p>
    <p>Attempt 2: Serialize and forward  Inefficient</p>
    <p>struct ibv_qp { struct ibv_context *context; .</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Internal Structure of Verbs Library</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>FreeFlow</p>
    <p>Verbs library</p>
    <p>Container</p>
    <p>NIC command</p>
    <p>Verbs API</p>
    <p>?</p>
    <p>RDMA App</p>
    <p>Shim</p>
    <p>ibv_post_send (struct ibv_qp* qp, )</p>
    <p>struct ibv_qp { struct ibv_context *context; .</p>
    <p>};</p>
    <p>Parameters are serialized by Verbs library!</p>
  </div>
  <div class="page">
    <p>FreeFlow Control Path Channel</p>
    <p>RDMA App</p>
    <p>FreeFlow library</p>
    <p>Write (VNIC_fd, serialized parameters)</p>
    <p>Parameters are forwarded correctly without manual serialization!</p>
    <p>Idea: Leveraging the serialized output of verbs library</p>
    <p>Verbs library</p>
    <p>Shim</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>FreeFlow Router</p>
    <p>Verbs library</p>
    <p>Container</p>
    <p>NIC command</p>
    <p>Verbs API</p>
    <p>VNIC</p>
    <p>ibv_post_send (struct ibv_qp* qp, .)</p>
    <p>FreeFlow Router</p>
    <p>VNIC</p>
  </div>
  <div class="page">
    <p>Challenge 2: Synchronizing Memory for Data Path</p>
    <p>Shadow memory in FreeFlow router  A copy of applications memory region  Directly accessed by NICs</p>
    <p>S-MEM and MEM must be synchronized.</p>
    <p>How to synchronize S-MEM and MEM?</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEMRDMA CTX</p>
    <p>FreeFlow Router</p>
    <p>S-RDMA CTX S-MEM</p>
    <p>Verbs library</p>
    <p>VNIC</p>
    <p>Container</p>
  </div>
  <div class="page">
    <p>Strawman Approach for Synchronization</p>
    <p>Container 1 wants to write contents in MEM-1 to MEM-2 on Container 2</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEM-1RDMA CTX</p>
    <p>FreeFlow Router</p>
    <p>S-RDMA CTX S-MEM-1</p>
    <p>Verbs library</p>
    <p>VNIC</p>
    <p>Container</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>RDMA CTXMEM-2</p>
    <p>FreeFlow Router</p>
    <p>S-MEM-2 S-RDMA CTX</p>
    <p>Verbs library</p>
    <p>VNIC</p>
    <p>Container</p>
    <p>DATA</p>
    <p>? Explicit synchronization High freq. High overhead Low freq. Wrong data for app</p>
  </div>
  <div class="page">
    <p>Containers can Share Memory Regions</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEM-1RDMA CTX</p>
    <p>FreeFlow Router</p>
    <p>S-RDMA CTX S-MEM-1</p>
    <p>Verbs library</p>
    <p>VNIC</p>
    <p>Container Host</p>
    <p>Shared memory</p>
    <p>MEM</p>
    <p>MEM and S-MEM can be located on the same physical memory region</p>
    <p>FreeFlow router is running in a container</p>
  </div>
  <div class="page">
    <p>Zero-copy Synchronization in Data Path</p>
    <p>RDMA App</p>
    <p>RDMA NIC</p>
    <p>MEM-1RDMA CTX</p>
    <p>FreeFlow Router</p>
    <p>S-RDMA CTX S-MEM-1</p>
    <p>Verbs library</p>
    <p>VNIC</p>
    <p>Container Host</p>
    <p>Shared memory</p>
    <p>MEM</p>
    <p>Synchronization without explicit memory copy: Method1: Allocate shared buffers with FreeFlow APIs Method2: Re-map apps memory space to shadow memory space</p>
    <p>FreeFlow supports both!</p>
    <p>How to allocated MEM-1 to shadow memory space?</p>
  </div>
  <div class="page">
    <p>FreeFlow Design Summary</p>
    <p>FreeFlow control path channel</p>
    <p>Zero-copy memory synchronization</p>
    <p>FreeFlow provides near native RDMA performance for containers!</p>
    <p>RDMA NIC</p>
    <p>Container 1</p>
    <p>IP: 10.0.0.1</p>
    <p>RDMA App</p>
    <p>Container 2</p>
    <p>IP: 20.0.0.1</p>
    <p>FreeFlow Router</p>
    <p>IP: 30.0.0.1</p>
    <p>Verbs library</p>
    <p>RDMA App</p>
    <p>VNIC VNIC</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>FreeFlow Design</p>
    <p>Implementation and Evaluation</p>
  </div>
  <div class="page">
    <p>Implementation and Experimental Setup</p>
    <p>FreeFlow Library  Add 4000 lines in C to libibverbs and libmlx4.</p>
    <p>FreeFlow Router  2000 lines in C++</p>
    <p>Testbed setup  Two Intel Xeon E5-2620 8-core CPUs, 64 GB RAM</p>
    <p>56 Gbps Mellanox ConnectX-3 NICs</p>
    <p>Docker containers</p>
  </div>
  <div class="page">
    <p>Does FreeFlow Support Low Latency?</p>
    <p>La te</p>
    <p>n cy</p>
    <p>( u</p>
    <p>s)</p>
    <p>Message size (B)</p>
    <p>Native RDMA FreeFlow</p>
  </div>
  <div class="page">
    <p>Does FreeFlow Support High Throughput?</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (G</p>
    <p>b p</p>
    <p>s)</p>
    <p>Message size (B)</p>
    <p>Native RDMA</p>
    <p>FreeFlow</p>
    <p>Bounded by control path channel performance</p>
  </div>
  <div class="page">
    <p>Do Applications Benefit from FreeFlow?</p>
    <p>C D</p>
    <p>F</p>
    <p>Time per step (sec)</p>
    <p>Container+TCP Native RDMA FreeFlow</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Containerization today cant benefit from speed of RDMA.</p>
    <p>Existing solutions for NIC virtualization dont work (e.g., SR-IOV).</p>
    <p>FreeFlow enables containerized apps to use RDMA.</p>
    <p>Challenges and Key Ideas  Control path: Leveraging Verbs library structure for efficient Verbs forwarding</p>
    <p>Data path: Zero-copy memory synchronization</p>
    <p>Performance close to native RDMA</p>
  </div>
</Presentation>
