<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimistic replication for Internet data services</p>
    <p>Yasushi Saito Hank Levy</p>
    <p>University of Washington Department of Computer Science and Engineering,</p>
    <p>Seattle, WA, U.S.A.</p>
    <p>http://porcupine.cs.washington.edu/</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Simple and lightweight algorithm suitable for cluster-based Internet data services  Dynamic replica addition/deletion.  Ensures eventual consistency of replicas.  Completely decentralized.  Tolerates multiple node failures, partitions, etc.  Is space- and cost- efficient.</p>
    <p>Implemented on Porcupine scalable email server</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation Examples Correctness Practical Issues Performance Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Porcupine cluster-based mail server</p>
    <p>Manageability, availability, and performance via homogeneous architecture and dynamic data distribution</p>
    <p>Other applications: BBS, Web, Calendar</p>
    <p>Naming &amp; load balancing service</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Goals and Non-goals</p>
    <p>Goals: Dynamic addition/removal of replicas Space- and computational- efficiency Fault tolerance Simplicity</p>
    <p>Non-goals: Single-copy consistency (its Internet, anyway)</p>
  </div>
  <div class="page">
    <p>Why a new algorithm?</p>
    <p>PC-based clusters present a new environment. Prior art focused on two extreme environments:</p>
    <p>mainframe+LAN, laptop+modem  Single-copy algorithms are not available enough  Mobile replication algorithms are not optimized</p>
    <p>for mostly-connected environments.  Very few algorithm allows addition/deletion of</p>
    <p>replicas</p>
  </div>
  <div class="page">
    <p>Algorithm Overview</p>
    <p>Contents-pushing (cf. Usenet, MS Active Directory)  Computational efficiency</p>
    <p>Two-phase protocol (Apply, Retire)  Space efficiency</p>
    <p>Unified treatment of contents updates and replica addition/deletion</p>
    <p>Thomas write rule + node discovery to resolve conflicting updates  Simplicity &amp; fault tolerance</p>
  </div>
  <div class="page">
    <p>Motivation Examples</p>
    <p>Updating contents  Adding and deleting replicas  Resolving conflicting updates</p>
    <p>Correctness Practical Issues Performance Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Example: Updating contents</p>
    <p>A B C</p>
    <p>A A</p>
    <p>Update record (exists only during update propagation)</p>
    <p>A B C</p>
    <p>B</p>
    <p>A B C</p>
    <p>C3:10pm Ack set Timestamp</p>
    <p>Object contents</p>
    <p>Replica set</p>
  </div>
  <div class="page">
    <p>Example: Update Propagation</p>
    <p>A B C</p>
    <p>A A B C</p>
    <p>B</p>
    <p>A B C</p>
    <p>C A</p>
    <p>A</p>
    <p>A</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Update Retirement</p>
    <p>A B C</p>
    <p>A A B C</p>
    <p>B</p>
    <p>A B C</p>
    <p>C</p>
    <p>Retire 3:10pm</p>
    <p>Retire 3:10pm</p>
    <p>A</p>
    <p>A</p>
    <p>A</p>
    <p>B C</p>
    <p>B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Algorithm quiescent after update retirement</p>
    <p>New contents absent from the update record Contents are read from replica</p>
    <p>directly Update stored only during</p>
    <p>propagation</p>
    <p>Computational &amp; space efficiency</p>
    <p>Example: Final State</p>
    <p>A B C A</p>
    <p>A B C B</p>
    <p>A B C C</p>
  </div>
  <div class="page">
    <p>A issues an update to delete C</p>
    <p>Replica addition and removal</p>
    <p>A B</p>
    <p>A B</p>
    <p>A</p>
    <p>A</p>
    <p>A B B</p>
    <p>New replica set</p>
    <p>Ack set</p>
    <p>C</p>
    <p>A B</p>
    <p>Target set</p>
    <p>Unified treatment of updates to contents and to replica-set.</p>
    <p>C</p>
    <p>C A B C</p>
  </div>
  <div class="page">
    <p>What if updates conflict?</p>
    <p>Thomas write rule  Newest update always wins.  Older update canceled by overwriting by</p>
    <p>the newer update.  Same rule applied to replica</p>
    <p>addition/deletion.  But some subtleties...</p>
  </div>
  <div class="page">
    <p>A adds C, B adds D simultaneously</p>
    <p>B must discover C and let C delete the replica contents</p>
    <p>A B C</p>
    <p>A B</p>
    <p>A</p>
    <p>A</p>
    <p>A B C</p>
    <p>New replica set</p>
    <p>Ack set Target set</p>
    <p>B</p>
    <p>D</p>
    <p>A B</p>
    <p>B</p>
    <p>A B D</p>
    <p>C D</p>
    <p>C</p>
    <p>A B</p>
    <p>D</p>
    <p>Update conflict resolution</p>
  </div>
  <div class="page">
    <p>Node discovery protocol</p>
    <p>A B C</p>
    <p>A B</p>
    <p>A</p>
    <p>A</p>
    <p>A B C</p>
    <p>B</p>
    <p>D</p>
    <p>A B</p>
    <p>B</p>
    <p>A B D</p>
    <p>C D</p>
    <p>C A BD</p>
    <p>A B C</p>
    <p>A B</p>
    <p>A</p>
    <p>A B C</p>
    <p>C</p>
    <p>D</p>
    <p>A B</p>
    <p>B</p>
    <p>A B D</p>
    <p>D</p>
    <p>A B</p>
    <p>Apply 3:20 update</p>
    <p>Add targets {C} C</p>
  </div>
  <div class="page">
    <p>Proof of Correctness</p>
    <p>Claim: All live replicas will store the newest update,</p>
    <p>regardless of:  number of concurrent updates.  number of replicas added or removed.  number of node failures.</p>
    <p>when  nodes can discover each other at least indirectly  E.g., when partitioned, each partition will become</p>
    <p>consistent.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation Examples Correctness Practical Issues Performance Conclusion</p>
  </div>
  <div class="page">
    <p>Handling long-dead nodes Algorithm maintains consistency of remaining replicas. But updates will get stuck and clog nodes disks. Solution: erase dead nodes names from replica sets &amp;</p>
    <p>update records after the grace period.</p>
    <p>Practical Issues</p>
  </div>
  <div class="page">
    <p>Performance: Networking overhead</p>
    <p>Each update sends Apply and Retire msgs.</p>
    <p>Retire can be batched w/o affecting users.</p>
    <p>Actual # of msgs  2(N-1).</p>
    <p>N u</p>
    <p>m b</p>
    <p>er o</p>
    <p>f m</p>
    <p>es sa</p>
    <p>g es</p>
    <p>/u p</p>
    <p>d a te</p>
    <p>Retire Apply</p>
    <p>Measured networking overhead on a fully loaded Porcupine mail server.</p>
  </div>
  <div class="page">
    <p>Performance: Space overhead</p>
    <p>Each update is small (contents are read</p>
    <p>directly from the replicas)</p>
    <p>Update is deleted quickly after retirement.</p>
    <p># of outstanding updates is independent of # of objects on node</p>
    <p>message</p>
    <p>M B</p>
    <p>u se</p>
    <p>d</p>
    <p>Update records Email spool</p>
    <p>messages</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Simple and lightweight algorithm suitable for cluster-based Internet data services</p>
    <p>Contributions:  Simple dynamic replica addition protocol  Node discovery for resolving concurrent updates  Update retirement using synchronized clocks</p>
    <p>Code available at: http://porcupine.cs.washington.edu/</p>
  </div>
  <div class="page">
    <p>Potential Applications</p>
    <p>Master</p>
    <p>Proxies</p>
    <p>This algorithm is not just for email..</p>
    <p>Imagine proxies for update-intensive web sites</p>
    <p>Today, they use timeout and polling</p>
    <p>Dynamic replication improves availability.</p>
  </div>
  <div class="page">
    <p>Potential Applications</p>
    <p>Master</p>
    <p>Proxies</p>
    <p>This algorithm is not just for email..</p>
    <p>Imagine proxies for update-intensive web sites</p>
    <p>Today, they use timeout and polling</p>
    <p>Dynamic replication improves availability.</p>
  </div>
  <div class="page">
    <p>Performance: Networking overhead (bytes)</p>
    <p>Each network message is mostly occupied by actual object contents.</p>
    <p>Overhead by the replication service</p>
    <p>6%.</p>
    <p>Number of replicas / email message</p>
    <p>N u</p>
    <p>m b</p>
    <p>er o</p>
    <p>f b</p>
    <p>y te</p>
    <p>s/ u</p>
    <p>p d</p>
    <p>a te</p>
    <p>Retire Apply Data</p>
  </div>
</Presentation>
