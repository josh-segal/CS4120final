<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Pythia PRF Service</p>
    <p>Adam Everspaugh, Rahul Chatterjee, Sam Scott, Ari Juels, Thomas Ristenpart</p>
  </div>
  <div class="page">
    <p>Summary Passwords: Ubiquitous, but vulnerable to offline attack</p>
    <p>New direction: Complete architecture for password storage using a new cryptographic PRF service.</p>
    <p>Better: no offline attacks, compromise recovery, key management, cryptographic erasure of stolen information</p>
    <p>password db</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Website stores one of:  pw  Hash(pw)  salt, Hash(salt, pw)  salt, Hash4096(salt, pw)</p>
  </div>
  <div class="page">
    <p>Password Database Compromises</p>
    <p>Password DB breaches are common</p>
  </div>
  <div class="page">
    <p>Facebooks Password Onion</p>
    <p>$cur = password $cur = md5($cur) $salt = randbytes(20) $cur = hmac_sha1($cur, $salt) $cur = remote_hmac_sha256($cur, $secret) $cur = scrypt($cur, $salt) $cur = hmac_sha256($cur, $salt)</p>
    <p>Archeological record of FBs struggles with password security.</p>
  </div>
  <div class="page">
    <p>Facebooks Password Onion</p>
    <p>$cur = password $cur = md5($cur) $salt = randbytes(20) $cur = hmac_sha1($cur, $salt) $cur = remote_hmac_sha256($cur, $secret) $cur = scrypt($cur, $salt) $cur = hmac_sha256($cur, $salt)</p>
  </div>
  <div class="page">
    <p>Remote HMAC Distributes Trust</p>
    <p>Web Server</p>
    <p>pw db</p>
    <p>$cur</p>
    <p>hmac($cur, $secret)</p>
    <p>pw Crypto Server</p>
    <p>$secret</p>
    <p>pw db</p>
    <p>How do we rotate $secret?</p>
    <p>Hard to detect online attacks</p>
    <p>cur1cur2 cur3</p>
  </div>
  <div class="page">
    <p>Our Approach: Pythia PRF</p>
    <p>Web Server</p>
    <p>pw db</p>
    <p>pw</p>
    <p>pw db</p>
    <p>Pythia PRF Service</p>
    <p>Detects online attacks</p>
    <p>Compromise recovery Proactive key rotation</p>
    <p>Cryptographic erasure</p>
    <p>Multi-tenant</p>
    <p>pw db</p>
    <p>$secret</p>
  </div>
  <div class="page">
    <p>PRF Query  New User</p>
    <p>User Pythia Server</p>
    <p>user,pw</p>
    <p>y</p>
    <p>Web Server</p>
    <p>t:=random() x:=blind(pw)</p>
    <p>query: w,t,x</p>
    <p>z := unblind(y) store: (user,t,z)</p>
    <p>k := keytable[w] y := Fk(t,x)</p>
    <p>Web Server ID</p>
    <p>User ID</p>
    <p>Blinded PW</p>
    <p>Protected PW</p>
  </div>
  <div class="page">
    <p>Compromise Recovery</p>
    <p>Pythia ServerWeb Server z0 z1</p>
    <p>z0 z1  k-&gt;k</p>
    <p>k k</p>
    <p>z0 z1</p>
    <p>Doesnt require original password User password remains unchanged</p>
    <p>Password db is useless w,t,x0w,t,x1w,t,x2</p>
  </div>
  <div class="page">
    <p>Existing Crypto Primitives are Insufficient</p>
    <p>Deterministic</p>
    <p>Pseudorandom</p>
    <p>Key Rotation</p>
    <p>PRFs</p>
    <p>Key Updateable Encryption</p>
    <p>Proxy Re-encryption</p>
    <p>(Partial) Message Privacy</p>
    <p>Oblivious PRFs</p>
    <p>Partially-Blind Signatures</p>
    <p>Partially Oblivious PRF</p>
    <p>empty</p>
  </div>
  <div class="page">
    <p>Partially Obl. PRF Construction Bilinear Pairing e: G1xG2GT</p>
    <p>e(ax, by) = e(a,b)xy</p>
    <p>w,t,x x := H(pw)r</p>
    <p>blind() k := keytable[w]y := e(H(t), x)k Fk(t,x)</p>
    <p>unblind() z := y1/r = e(H(t), H(pw))k= e(H(t), H(pw))k*r*1/r</p>
    <p>Similar use of pairings: [Sakai, Ohgishi, Kasahara] [Boneh,Waters]</p>
    <p>Pythia ServerWeb Server PRF Query</p>
  </div>
  <div class="page">
    <p>Partially Obl. PRF Construction Pythia ServerWeb Server</p>
    <p>Compromise Recovery</p>
    <p>z := zk/k = e(H(t), H(pw))k*k/k = e(H(t), H(pw))k</p>
    <p>update()</p>
    <p>k/k</p>
  </div>
  <div class="page">
    <p>Advantages of Partially Obl. PRF</p>
    <p>Web Server</p>
    <p>pw db</p>
    <p>pw</p>
    <p>Pythia PRF Service</p>
    <p>Doesnt learn secret key</p>
    <p>Detect online attacks Doesnt learn pw</p>
  </div>
  <div class="page">
    <p>Easy to Deploy</p>
    <p>ppass = pythia.query(server, w, t, pass) digest = pythia.combine(ppass, digest)</p>
    <p>def verify(username, pass): (salt,check) = authTableLookup(username) digest = hashpass(salt, pass)</p>
    <p>Small change to code base No impact on user experience</p>
    <p>return digest == check</p>
  </div>
  <div class="page">
    <p>Parallel Password Onion</p>
    <p>Pythia ServerWeb Server</p>
    <p>a = H4096(pw, t) w,t,x x:=blind(pw) y</p>
    <p>z:=unblind(pw)</p>
    <p>result := za</p>
    <p>No performance penalty Strictly better security  Defense in depth</p>
  </div>
  <div class="page">
    <p>Pythia Open Source Implementation</p>
    <p>nginx MongoDB</p>
    <p>Source code on GitHub</p>
    <p>Find links and information at: https://pages.cs.wisc.edu/~ace</p>
    <p>Test + Development server: remote-crypto.io</p>
  </div>
  <div class="page">
    <p>Fast, Scalable PRF Service</p>
    <p>Throughput: 1350 connections/sec (8-core EC2 instance)</p>
    <p>PRF Query: 11.8ms (LAN)</p>
    <p>Storage:</p>
    <p>Within factor of 2 of a TLS query</p>
    <p>O(1) per web server Supports arbitrary number of users for each web server</p>
  </div>
  <div class="page">
    <p>Beyond Web Servers</p>
    <p>Bitcoin Brainwallet</p>
    <p>Message-locked Encryption</p>
    <p>File Encryption with remote erasure</p>
  </div>
  <div class="page">
    <p>Conclusion Password storage is broken: too easy to crack with offline attacks</p>
    <p>Pythia PRF:</p>
    <p>prevents offline attacks, detects online attacks</p>
    <p>enables compromise recovery via key rotation, and crypto erasure via deletion</p>
    <p>democratizes access with a service architecture</p>
  </div>
</Presentation>
