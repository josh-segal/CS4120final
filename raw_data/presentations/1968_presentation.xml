<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards General-Purpose Resource Management</p>
    <p>in Shared Cloud Services</p>
    <p>Jonathan Mace, Brown University</p>
    <p>Peter Bodik, MSR Redmond</p>
    <p>Rodrigo Fonseca, Brown University</p>
    <p>Madanlal Musuvathi, MSR Redmond</p>
  </div>
  <div class="page">
    <p>Shared-tenant cloud services</p>
    <p>Processes service requests from multiple clients</p>
    <p>Great for cost and efficiency  Performance is a challenge</p>
    <p>Aggressive tenants and system maintenance tasks</p>
    <p>Resource starvation and bottlenecks</p>
    <p>Degraded performance, Violated SLOs, system outages</p>
  </div>
  <div class="page">
    <p>Ideally</p>
    <p>manage resources to provide end-to-end guarantees and isolation</p>
    <p>Challenge</p>
    <p>OS/hypervisor mechanisms insufficient  Shared threads &amp; processes  Application-level resource bottlenecks (locks, queues)  Resources across multiple processes and machines</p>
    <p>Today</p>
    <p>lack of guarantees, isolation</p>
    <p>some ad-hoc solutions</p>
    <p>Shared-tenant cloud services</p>
  </div>
  <div class="page">
    <p>This paper</p>
    <p>5 design principles for resource policies in sharedtenant systems</p>
    <p>Retro  prototype for principled resource management</p>
    <p>Preliminary demonstration of Retro in HDFS</p>
  </div>
  <div class="page">
    <p>Hadoop Distributed File System (HDFS)</p>
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
    <p>Filesystem metadata Replicated block storage</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
    <p>Hadoop Distributed File System (HDFS)</p>
    <p>Filesystem metadata Replicated block storage</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>Principle 1: Consider all resources and request types</p>
    <p>Fine-grained resources within processes</p>
    <p>Resources shared between processes (disk, network)</p>
    <p>Many different API calls</p>
    <p>Bottlenecks can crop up in many places hardware resources: disk, network, cpu,  software resources: locks, queues,  data structures: transaction logs, shared batches,</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>Principle 2: Distinguish between tenants</p>
    <p>Tenants might send different types of requests</p>
    <p>Tenants might be utilizing different machines</p>
    <p>If a policy is efficient, it should be able to target the cause of contention</p>
    <p>e.g.,</p>
    <p>if a tenant is causing contention, throttle</p>
    <p>otherwise leave the tenant alone</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
    <p>Admission Control</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>while (!Thread.isInterrupted()){</p>
    <p>sendPacket();</p>
    <p>}</p>
    <p>HDFS DataNode</p>
    <p>Admission Control</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>while (!Thread.isInterrupted()){</p>
    <p>rate_limit();</p>
    <p>sendPacket();</p>
    <p>}</p>
    <p>Principle 5:</p>
    <p>Schedule early, schedule often</p>
    <p>HDFS DataNode</p>
    <p>Admission Control</p>
  </div>
  <div class="page">
    <p>Resource Management Design Principles</p>
    <p>Retro  prototype for principled resource management in shared-tenant systems</p>
  </div>
  <div class="page">
    <p>Retro: end-to-end tracing</p>
    <p>Tenants</p>
  </div>
  <div class="page">
    <p>Retro: end-to-end tracing</p>
    <p>Tenants</p>
  </div>
  <div class="page">
    <p>Retro: application-level resource interception</p>
    <p>Tenants</p>
  </div>
  <div class="page">
    <p>Retro: aggregation and centralized reporting</p>
    <p>Tenants</p>
  </div>
  <div class="page">
    <p>Retro: application-level enforcement</p>
    <p>Tenants</p>
  </div>
  <div class="page">
    <p>Retro: distributed scheduling</p>
    <p>Tenants</p>
  </div>
  <div class="page">
    <p>Tenants</p>
    <p>Retro: distributed scheduling</p>
  </div>
  <div class="page">
    <p>Early Results</p>
    <p>O p</p>
    <p>e n</p>
    <p>R e</p>
    <p>a d</p>
    <p>C re</p>
    <p>a te</p>
    <p>R e</p>
    <p>n a</p>
    <p>m e</p>
    <p>D e</p>
    <p>le te</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>HDFS</p>
    <p>HDFS w/ Retro</p>
    <p>O p</p>
    <p>e n</p>
    <p>R e</p>
    <p>a d</p>
    <p>C re</p>
    <p>a te</p>
    <p>R e</p>
    <p>n a</p>
    <p>m e</p>
    <p>D e</p>
    <p>le te</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>HDFS NNBench benchmark</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>HDFS NameNode HDFS DataNode HDFS DataNode</p>
    <p>HDFS DataNode</p>
  </div>
  <div class="page">
    <p>Retrospective</p>
    <p>Thus far:  Per-tenant identification</p>
    <p>Resource measurements</p>
    <p>Schedule enforcement</p>
    <p>Next steps:  Abstractions for writing simplified high-level policies</p>
    <p>Low-level enforcement mechanisms</p>
    <p>Policies to monitor system, find bottlenecks, provide guarantees</p>
  </div>
</Presentation>
