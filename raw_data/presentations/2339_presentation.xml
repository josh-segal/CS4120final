<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dont stack your Log on my Log</p>
    <p>Oct 5, 2014</p>
    <p>Jingpei Yang, Ned Plasson, Greg Gillis,</p>
    <p>Nisha Talagala, Swaminathan Sundararaman</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Log-stacking models</p>
    <p>Problems with stacking logs</p>
    <p>Solutions to mitigate log-stacking issues</p>
  </div>
  <div class="page">
    <p>Log-structuring</p>
    <p>Append data at the tail</p>
    <p>Maximized write throughput by aggregating small random writes to large sequential ones</p>
    <p>Easier storage management</p>
    <p>Free space management</p>
    <p>Fast recovery</p>
    <p>Good for transactional consistency</p>
    <p>Low overhead snapshots</p>
    <p>Flexibility on reclaiming space or data chunks</p>
    <p>Good for database systems that unmodified data could be grouped during GC process</p>
    <p>free space</p>
  </div>
  <div class="page">
    <p>Log-structuring - why on flash?</p>
    <p>Flash does not support in place update</p>
    <p>Erase is costly</p>
    <p>Asymmetric read/write performance</p>
    <p>Write is much slower than Read</p>
    <p>Operations are in a unit of page (4KB, 8KB)</p>
    <p>High overhead for small random I/O</p>
    <p>e.g. a 512-byte write may consume a 4KB flash page</p>
    <p>page 0</p>
    <p>page 1</p>
    <p>page 2</p>
    <p>page 3</p>
    <p>page 4</p>
    <p>page 5</p>
    <p>page 6</p>
    <p>page 7</p>
    <p>page 8</p>
    <p>page 9</p>
    <p>page 10</p>
    <p>page 11</p>
    <p>block 0 block 1 block 2</p>
    <p>logging</p>
    <p>Log-structure is a better choice for flash memory!</p>
  </div>
  <div class="page">
    <p>Log-structuring - who?</p>
    <p>logginglogging</p>
    <p>flash aware file systems, FTL</p>
    <p>e.g. data log, metadata log</p>
    <p>database</p>
    <p>e.g. change and access logging</p>
    <p>records</p>
    <p>logging system, pub/sub</p>
    <p>everything is logged</p>
  </div>
  <div class="page">
    <p>Are more logs better?</p>
    <p>Individual logging is optimized for performance</p>
    <p>Individual logging provides better isolation</p>
    <p>Multiple logs within one application/layer is even better</p>
    <p>Hot/cold data separation</p>
    <p>Easy metadata management</p>
    <p>Multiple layers of logs?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Log-stacking models</p>
    <p>Problems with stacking logs</p>
    <p>Solutions to mitigate log-stacking issues</p>
  </div>
  <div class="page">
    <p>Log-on-log models</p>
    <p>Log Structured Application or Filesystem</p>
    <p>Log Segments</p>
    <p>(size=N)</p>
    <p>Garbage Collection User Data Meta Data</p>
    <p>JournalingCrash Recovery Other Services</p>
    <p>Data Append Point #1 Data Append Point #3 Data Append Point #2</p>
    <p>Device Flash Translation Layer (FTL) Log</p>
    <p>Log Segments</p>
    <p>(size=1.5N)</p>
    <p>Garbage Collection User Data Meta Data</p>
    <p>JournalingCrash Recovery Other Services</p>
    <p>Data Append Point #1 Data Append Point #2</p>
  </div>
  <div class="page">
    <p>Log-on-log models</p>
    <p>FTL Log</p>
    <p>LogNon-log</p>
    <p>FTL Log</p>
    <p>Log Log</p>
    <p>FTL Log</p>
    <p>Log</p>
    <p>Log</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Log-stacking models</p>
    <p>Problems with stacking logs</p>
    <p>Solutions to mitigate log-stacking issues</p>
  </div>
  <div class="page">
    <p>Problems with stacking logs</p>
    <p>Increased write pressure</p>
    <p>Destroyed sequentiality</p>
    <p>Duplicated log capabilities</p>
    <p>Lack of coordination</p>
    <p>Application logs are not FTL aware</p>
    <p>FTL log is not application aware</p>
    <p>app 1 app 2 app 3</p>
    <p>Flash logging</p>
  </div>
  <div class="page">
    <p>Experimental methodology</p>
    <p>A flash-aware file system  F2FS</p>
    <p>Up to 6 logs</p>
    <p>On top of a single log (one append point) SSD</p>
    <p>A log-on-log simulator</p>
    <p>Mimic a file system to device storage system</p>
    <p>Data placing, storage management, garbage collector</p>
    <p>Garbage</p>
    <p>collector</p>
    <p>Storage</p>
    <p>Mgmt.</p>
    <p>Metadat</p>
    <p>a Mgmt.</p>
    <p>Upper log storage medium</p>
    <p>Garbage</p>
    <p>collector</p>
    <p>Storage</p>
    <p>Mgmt.</p>
    <p>Metadat</p>
    <p>a Mgmt.</p>
    <p>Lower log storage medium</p>
    <p>readwrite</p>
    <p>virtual</p>
    <p>logical</p>
    <p>physical</p>
    <p>I/O interface</p>
  </div>
  <div class="page">
    <p>Each layer/log has its own metadata</p>
    <p>On-media metadata is increased  resulting in more writes to the device</p>
    <p>In-memory metadata is increased  higher memory consumption</p>
    <p>Increased metadata results in reduced</p>
    <p>storage for user data and additional</p>
    <p>writes which reduces endurance.</p>
  </div>
  <div class="page">
    <p>Mixed workload from logs and other traffic destroys sequentiality</p>
    <p>Each log writes sequentially, but the device gets mixed workload, most likely to be random</p>
    <p>Underlying flash-based SSD also writes its own metadata</p>
    <p>Log 1 Log 2 Log 3</p>
    <p>Application layer</p>
    <p>Flash layer</p>
    <p>write</p>
    <p>read SEG 1 SEG 2 SEG 3</p>
    <p>Other non-log traffic</p>
    <p>Multiple logs on a shared device results in random traffic seen by underlying device.</p>
  </div>
  <div class="page">
    <p>Unaligned segment size</p>
    <p>Garbage collecting one upper segment results in data invalidation across multiple segments in</p>
    <p>device log</p>
    <p>Matching segment sizes does not prevent data fragmentation</p>
    <p>application log</p>
    <p>flash log</p>
    <p>app_seg 1 app_seg 2 app_seg 3</p>
    <p>dev_seg 1 dev_seg 2 dev_seg 3</p>
    <p>Unaligned segment size results in fragmented device space</p>
    <p>caused by garbage collection.</p>
  </div>
  <div class="page">
    <p>Without TRIM, data has different validation view on each log layer</p>
    <p>Data could be moved multiple times across log layers</p>
    <p>Segment 2</p>
    <p>valid block</p>
    <p>file system logs</p>
    <p>device log</p>
    <p>invalid block</p>
    <p>Segment 1</p>
    <p>free block</p>
    <p>Uncoordinated garbage collection on each log destroys the sequentiality of data that</p>
    <p>the application log intends to maintain, and leads to more flash writes.</p>
    <p>Even with TRIM support, the sequentiality could hardly be guaranteed in the lower flash log.</p>
  </div>
  <div class="page">
    <p>Fragmented logs + decoupled cleaning</p>
    <p>A combined effect on the overall WA - TCWA</p>
    <p>Higher log ratio results in higher device WA</p>
    <p>More upper log results in higher device WA, and hence higher TCWA</p>
    <p>&lt; 1% 4 - 32% 3 - 24%</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Log-stacking models</p>
    <p>Problems with stacking logs</p>
    <p>Solutions to mitigate log-stacking issues</p>
  </div>
  <div class="page">
    <p>Methods for log coordination</p>
    <p>Tpce - like: upper/lower size ratio 90%</p>
    <p>Turning slope: low_seg_size &gt; up_seg_size</p>
    <p>Smaller flash segment size is better in terms of WA</p>
    <p>Total WA increases as lower log segment size increases</p>
    <p>Turning slope when low_seg_size &gt; up_seg_size</p>
    <p>T o</p>
    <p>ta l</p>
    <p>C o</p>
    <p>m b</p>
    <p>in e</p>
    <p>d W</p>
    <p>A</p>
    <p>Lower log segment size MB</p>
    <p>up_2</p>
    <p>up_4</p>
    <p>up_8</p>
    <p>up_16</p>
    <p>up_32</p>
    <p>Upper log</p>
    <p>segment</p>
    <p>size MB</p>
  </div>
  <div class="page">
    <p>Methods for log coordination (cont.)</p>
    <p>upper/lower size ratio 90% upper/lower size ratio 70%</p>
    <p>Total WA is a combined effect of capacity ratio, segment size ratio, GC frequency, and etc.</p>
    <p>T o</p>
    <p>ta l</p>
    <p>C o</p>
    <p>m b</p>
    <p>in e</p>
    <p>d W</p>
    <p>A</p>
    <p>Lower log segment size MB</p>
    <p>up_2</p>
    <p>up_4</p>
    <p>up_8</p>
    <p>up_16</p>
    <p>up_32</p>
    <p>Upper log</p>
    <p>segment</p>
    <p>size MB</p>
    <p>T o</p>
    <p>ta l</p>
    <p>C o</p>
    <p>m b</p>
    <p>in e</p>
    <p>d W</p>
    <p>A</p>
    <p>Lower log segment size MB</p>
  </div>
  <div class="page">
    <p>Methods for log coordination (cont.)</p>
    <p>Size coordination to reduce Total Combined WA - TCWA</p>
    <p>TCWA = (upper log WA) * (lower log WA)</p>
    <p>Capacity ratio</p>
    <p>Segment size ratio</p>
    <p>Tradeoff the space management and GC efficiency by adjusting upper log segment</p>
    <p>size</p>
    <p>Coordinated GC activity</p>
    <p>Postpone the device log GC while the upper GC is active</p>
    <p>Avoid/minimize the same data to be moved multiple times</p>
    <p>Start multiple upper logs GC simultaneously</p>
  </div>
  <div class="page">
    <p>Collapsing logs</p>
    <p>Stacking logs is not always optimal for flash-based system</p>
    <p>Log coordination is less possible with multiple layers be involved</p>
    <p>Two approaches to collapsing logs</p>
    <p>NVMFS (formerly called DirectFS): sparse space, atomic writes, PTRIM</p>
    <p>Object-based flash: breaking the standard block interface</p>
  </div>
  <div class="page">
    <p>Collapsing logs (cont.)</p>
    <p>Application</p>
    <p>VFS abstraction layer</p>
    <p>Kernel block layer</p>
    <p>Flash-aware file system</p>
    <p>Flash memory device</p>
    <p>Metadata mgmt.</p>
    <p>Space allocation</p>
    <p>Addr. mapping</p>
    <p>Garbage collection</p>
    <p>Crash recovery</p>
    <p>Logging/ journaling</p>
    <p>Log-structured file system</p>
    <p>Metadata</p>
    <p>mgmt.</p>
    <p>Space</p>
    <p>allocation</p>
    <p>Addr.</p>
    <p>mapping</p>
    <p>Garbage</p>
    <p>collection</p>
    <p>Crash</p>
    <p>recovery</p>
    <p>FTL</p>
    <p>Logging</p>
    <p>FTL-based flash memory</p>
    <p>Metadata</p>
    <p>mgmt.</p>
    <p>Space</p>
    <p>allocation</p>
    <p>Addr.</p>
    <p>mapping</p>
    <p>Garbage</p>
    <p>collection</p>
    <p>Crash</p>
    <p>recovery</p>
    <p>Atomic</p>
    <p>transaction</p>
    <p>Eliminate redundant log layers</p>
    <p>Remove similar log functionalities</p>
    <p>Break the block interface</p>
    <p>Keep the log capabilities in only one layer</p>
    <p>File system layer with a lightweight flash device design</p>
    <p>FTL layer with a log-less file system design</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Log structured system is designed to provide high throughput</p>
    <p>Combining small random requests to large sequential ones</p>
    <p>Multiple logs/append points in different system layers tends to provide better data and space management</p>
    <p>hot/cold separation</p>
    <p>Stacking logs on another log achieves sub-optimal performance</p>
    <p>Lack of coordination on each layer mixes the traffic</p>
    <p>Log-on-log can perform better with improved coordination</p>
    <p>Size coordination, GC coordination</p>
    <p>File system support</p>
    <p>Collapsing logs  breaking the block interface</p>
    <p>NVMFS: sparse space, atomic writes, PTRIM</p>
    <p>Object-based flash storage</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
