<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Understanding the Reproducibility of Crowd-reported Security Vulnerabilities</p>
    <p>Dongliang Mu12, Alejandro Cuevas2, Limin Yang3, Hang Hu3, Xinyu Xing2, Bing Mao1, Gang Wang3</p>
  </div>
  <div class="page">
    <p>Real World Effects of Security Vulnerabilities</p>
    <p>CVE-2017-0144 WannaCry</p>
    <p>CVE-2010-2772 STUXnet</p>
    <p>CVE-2014-0160 HeartBleed</p>
    <p>CVE-2014-6271 ShellShock</p>
    <p>It is infeasible for in-house teams to identify all possible vulnerabilities before a software release</p>
  </div>
  <div class="page">
    <p>Released Publicly</p>
    <p>Vulnerability Reporting WebsitesThe Crowd</p>
    <p>Massive Crowd-reported Vulnerabilities Over Time</p>
    <p>Vulnerability Reporting</p>
    <p>White-hat Hacker</p>
    <p>Normal User</p>
    <p>Security Analysts</p>
    <p>Security Researchers</p>
    <p>CVE1 Website 1 Common Vulnerabilities and Exposures</p>
  </div>
  <div class="page">
    <p>Released Publicly</p>
    <p>Vulnerability Reporting WebsitesThe Crowd</p>
    <p>Massive Crowd-reported Vulnerabilities Over Time</p>
    <p>Vulnerability Reporting</p>
    <p>White-hat Hacker</p>
    <p>Normal User</p>
    <p>Security Analysts</p>
    <p>Security Researchers</p>
    <p>CVE1 Website 1 Common Vulnerabilities and Exposures</p>
    <p>Number of vulnerabilities reported to CVE1 by year</p>
  </div>
  <div class="page">
    <p>Vulnerability Reproduction Can Be Challenging</p>
  </div>
  <div class="page">
    <p>Vulnerability Reproduction Can Be Challenging</p>
  </div>
  <div class="page">
    <p>Poor reproducibility prevents analysts from assessing potential threats to their customers in a timely fashion</p>
    <p>Consequences of Poor Reproducibility</p>
    <p>Poor reproducibility makes it hard to thoroughly evaluate security solutions</p>
    <p>Poor reproducibility delays the patching of vulnerability Software vendors</p>
    <p>Security Firms</p>
    <p>Security Researchers</p>
  </div>
  <div class="page">
    <p>Poor reproducibility prevents analysts from assessing potential threats to their customers in a timely fashion</p>
    <p>Consequences of Poor Reproducibility</p>
    <p>Poor reproducibility makes it hard to thoroughly evaluate security solutions</p>
    <p>Poor reproducibility delays the patching of vulnerability Software vendors</p>
    <p>Security Firms</p>
    <p>Security Researchers</p>
    <p>Research Papers that use public vulnerabilities for evaluation # of Vulnerability SP2018 9</p>
    <p>Usenix2017 8 Usenix2015 6 NDSS2015 7</p>
    <p>Usenix2015 8 NDSS2011 14</p>
    <p>SP2008 5 Usenix2005 4 Usenix1998 8</p>
  </div>
  <div class="page">
    <p>This Work Q1: How reproducible are public security vulnerability reports?</p>
    <p>Q2: What makes vulnerability reproduction difficult?</p>
    <p>Q3: How to improve the efficiency of vulnerability reproduction?</p>
    <p>We answer three questions by manually reproducing vulnerabilities</p>
  </div>
  <div class="page">
    <p>Roadmap  Methodology  Findings  Survey  Suggestions  Conclusion</p>
    <p>We surveyed 48 external security professionals from both academia and industry to examine peoples perceptions towards the vulnerability reports and their usability</p>
  </div>
  <div class="page">
    <p>Vulnerability Report Dataset  We randomly selected a large collection of reported vulnerabilities  We focused on Memory Error Vulnerabilities due to their high severity (Average CVSS</p>
    <p>Score 7.6 &gt; Overall Average CVSS Score 6.2) and significant real-world impact  We focused on Open Source Linux Software due to debugging and diagnosing</p>
    <p>capabilities</p>
    <p>We collected two datasets including,  A primary dataset of 291 vulnerabilities with CVE IDs  A complementary dataset for 77 vulnerabilities without CVE ID</p>
    <p>CVSS Score Rating 0.1 - 3.9 Low 4.0 - 6.9 Medium 7.0 - 8.9 High 9.0 - 10.0 Critical</p>
  </div>
  <div class="page">
    <p>We collect vulnerability reports by crawling the references listed in the CVE website. v 6044 vulnerability reports in total</p>
    <p>Vulnerability Report Dataset (cont.)</p>
    <p>CVE-2008-5314 The crowd-sourced vulnerability reports</p>
    <p>Information source websites</p>
  </div>
  <div class="page">
    <p>We collect vulnerability reports by crawling the references listed in the CVE website. v 6044 vulnerability reports in total</p>
    <p>Vulnerability Report Dataset (cont.)</p>
    <p>CVE-2008-5314 The crowd-sourced vulnerability reports</p>
    <p>Information source websites</p>
    <p>Top 5 source websites in our dataset</p>
  </div>
  <div class="page">
    <p>The Analyst Team  We formed a team of 5 security analysts to carry out our experiments</p>
    <p>Security Analysts</p>
    <p>First-hand experience analyzing vulnerabilities, writing exploits, and developing patches</p>
    <p>In-depth knowledge of memory error vulnerabilities</p>
    <p>Rich Catch-The-Flag experience, and have discovered and reported over 20 new vulnerabilities to CVE website</p>
  </div>
  <div class="page">
    <p>Reproduction Workflow</p>
    <p>Vulnerable Version  Operating System  Software Installation  Software Configuration  Proof-of-Concept File  Trigger Method  Vulnerability Verification</p>
    <p>Security Analysts</p>
    <p>Set up Environment</p>
    <p>Install &amp; Config Software</p>
    <p>Trigger Vulnerability</p>
    <p>Verify Vulnerability</p>
    <p>Read Reports</p>
    <p>Default Setting for missing information</p>
  </div>
  <div class="page">
    <p>Reproduction Workflow (cont.)</p>
    <p>Set up the operating system for vulnerable software analysis</p>
    <p>Information Default Setting</p>
    <p>Operating System A Linux system that was released in (or slightly before) the year when the vulnerability was reported</p>
    <p>Vulnerable Version  Operating System  Software Installation  Software Configuration  Proof-of-Concept File  Trigger Method  Vulnerability Verification</p>
    <p>Set up Environment</p>
    <p>Install &amp; Config Software</p>
    <p>Read Reports</p>
    <p>Trigger Vulnerability</p>
    <p>Verify Vulnerability</p>
  </div>
  <div class="page">
    <p>Reproduction Workflow (cont.)</p>
    <p>Compile vulnerable software with the compilation options  Install vulnerable software with the configuration options</p>
    <p>Building System Default Setting</p>
    <p>automake make; make install</p>
    <p>autoconf &amp; automake ./configure; make; make install</p>
    <p>cmake mkdir build; cd build; cmake ../; make; make install</p>
    <p>Vulnerable Version  Operating System  Software Installation  Software Configuration  Proof-of-Concept File  Trigger Method  Vulnerability Verification</p>
    <p>Set up Environment</p>
    <p>Install &amp; Config Software</p>
    <p>Read Reports</p>
    <p>Trigger Vulnerability</p>
    <p>Verify Vulnerability</p>
  </div>
  <div class="page">
    <p>Reproduction Workflow (cont.)</p>
    <p>Trigger the vulnerability by using the Proof-of-Concept File</p>
    <p>Type of PoC Default Setting</p>
    <p>Shell commands Run the commands with the default shell Script program (e.g., python) Run the script with the appropriate interpreter C/C++ code Compile code with default options and run it A long string Directly input the string to the vulnerable program A malformed file (e.g., jpeg) Input the file to the vulnerable program</p>
    <p>Vulnerable Version  Operating System  Software Installation  Software Configuration  Proof-of-Concept File  Trigger Method  Vulnerability Verification</p>
    <p>Set up Environment</p>
    <p>Install &amp; Config Software</p>
    <p>Read Reports</p>
    <p>Trigger Vulnerability</p>
    <p>Verify Vulnerability</p>
  </div>
  <div class="page">
    <p>Reproduction Workflow (cont.)</p>
    <p>Verify the vulnerability with expected program behavior</p>
    <p>Information Default Setting</p>
    <p>Vulnerability Verification Unexpected program termination (or program crash)</p>
    <p>Vulnerable Version  Operating System  Software Installation  Software Configuration  Proof-of-Concept File  Trigger Method  Vulnerability Verification</p>
    <p>Set up Environment</p>
    <p>Install &amp; Config Software</p>
    <p>Read Reports</p>
    <p>Trigger Vulnerability</p>
    <p>Verify Vulnerability</p>
  </div>
  <div class="page">
    <p>Reproduction Experiment: Controlled Information Source</p>
    <p>SecurityFocus Exploit DataBase</p>
    <p>Redhat Bugzilla SecurityTracker</p>
    <p>One of Top 5 Source Websites Manual Debugging</p>
    <p>Failure</p>
    <p>Success</p>
    <p>Single-source Combined-top5 Combined-all</p>
    <p>SecurityFocus</p>
    <p>Exploit DataBase</p>
    <p>Redhat Bugzilla</p>
    <p>OpenWall</p>
    <p>SecurityTrackerOpenWall</p>
    <p>SecurityFocus</p>
    <p>Exploit DataBase</p>
    <p>Redhat Bugzilla</p>
    <p>OpenWall</p>
    <p>SecurityTracker</p>
  </div>
  <div class="page">
    <p>Roadmap  Methodology  Findings  Suggestions  Conclusion</p>
  </div>
  <div class="page">
    <p>Finding 1: Vulnerability Is Difficult to Reproduce Information Source CVE Reproduction (N=291)</p>
    <p># of Case # of Success Success Rate (%)</p>
    <p>SecurityFocus 256 32 12.6% Redhat Bugzilla 195 19 9.7% ExploitDB 156 46 29.5% OpenWall 153 67 43.8% SecurityTracker 89 4 4.5%</p>
    <p>Combined-top5 287 126 43.9%</p>
    <p>Combined-all 291 182 62.5%</p>
    <p>Information Source Non-CVE Reproduction (N=77)</p>
    <p>Combined-all 77 20 (25.6%) 25.6%</p>
    <p>The single-source returns a low success rate</p>
    <p>Combined-top5 has clearly improved the success rate The success rate is improved to 62.5% by Combined-all</p>
  </div>
  <div class="page">
    <p>Some ad-hoc techniques based on experience</p>
    <p>Debugging the software and PoC files</p>
    <p>Inspecting and modifying the source code</p>
    <p>Testing the cases in multiple OS and versions</p>
    <p>Searching related hints from the Internet</p>
    <p>Finding 2: Key Factors Make Reproduction Difficult</p>
    <p>Reproduction State After Manual Debugging</p>
    <p>Success in Combined-all</p>
    <p>Reproduced by Manual Debugging</p>
    <p>Failure after Manual Effort</p>
    <p>Intensive manual debugging takes another 2,000 man-hours to finish, about 13 hours for each case</p>
    <p>Report Information # of vulnerabilities addressed by Manual Debugging</p>
    <p>Trigger Method 74</p>
    <p>Software Installation 43</p>
    <p>PoC File 38</p>
    <p>Software Configuration 6</p>
    <p>OS information 4</p>
    <p>Software version 1</p>
    <p>Vulnerability Verification 0</p>
  </div>
  <div class="page">
    <p>Finding 3: Useful Tips for Information Recovery</p>
    <p>For 74 cases that failed on trigger method, we recovered 68 cases by reading other similar vulnerability reports</p>
    <p>Correlation of Different Vulnerabilities</p>
    <p>Recover missing information by reading reports of other similar vulnerabilities.</p>
    <p>Priority of Information</p>
  </div>
  <div class="page">
    <p>Roadmap  Methodology  Findings  Suggestions  Conclusion</p>
  </div>
  <div class="page">
    <p>Our Ideas of Making Vulnerability Reproduction Easier</p>
    <p>Standardize Vulnerability Reports</p>
    <p>Develop Useful Automated Tools to Collection Information</p>
    <p>Automate the Vulnerability Reproduction</p>
    <p>Vulnerability Reporters</p>
    <p>Reporting Websites</p>
    <p>Reproducers</p>
    <p>CVE-2007-1001 misses Trigger Method CVE-2013-7226 misses Installation Options CVE-2007-1465 misses Proof-of-Concept</p>
    <p>Manually generating standardized reports is really time-consuming</p>
    <p>With standardized reports, its a waste of resource if we still reproduce vulnerability entirely by manual efforts</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Vulnerability reproduction is difficult and requires extensive manual efforts</p>
    <p>A crowdsourcing approach could increase the reproducibility</p>
    <p>Apart from manual debugging based on experience, Internet-scale crowdsourcing and some heuristics could help recover missing information</p>
    <p>There is an urgent need to automate vulnerability reproduction and overhaul current vulnerability reporting systems</p>
  </div>
  <div class="page">
    <p>Data Sharing  DataSet : https://vulnreproduction.github.io/ (12 Virtual Machine Images)  Github Repo : https://github.com/VulnReproduction/LinuxFlaw</p>
    <p>We provide 300+ Reproducible Vulnerabilities in above Repo  For each vulnerability, we have :  Fully-tested Proof-of-Concept  Pre-configured virtual machine or Docker Image  Detailed instructions on how to reproduce the vulnerability  Structured information fields (in HTML and JSON)</p>
    <p>Name: Dongliang Mu Homepage: http://mudongliang.me/about/ Email: dzm77@ist.psu.edu</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>Research Papers that use public vulnerabilities for evaluation # of Vulnerability Usenix2005 Non-control-data attacks are realistic threats 4 SP2008 Preventing memory error exploits with wit 5 Usenix2015 Control-flow bending: on the effectiveness of control-flow integrity 6 NDSS2015 Preventing Use-after-free with Dangling Pointers Nullification 7 Usenix1998 StackGuard : automatic adaptive detection and prevention of buffer-overflow attacks 8 Usenix2017 Towards efficient heap overflow discovery 8 Usenix2015 Automatic Generation of Data-Oriented Exploits 8 SP2018 Data-oriented programming : On the Expressiveness of Non-Control Data Attacks 9 NDSS2011 AEG: Automatic exploit generation 14</p>
  </div>
</Presentation>
