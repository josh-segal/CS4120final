<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>QoS-Aware Admission Control in</p>
    <p>Heterogeneous Datacenters</p>
    <p>Christina Delimitrou, Nick Bambos</p>
    <p>and Christos Kozyrakis</p>
    <p>Stanford University</p>
    <p>ICAC  June 28th 2013</p>
  </div>
  <div class="page">
    <p>Cloud DC Scheduling</p>
    <p>Workloads are unknown  random apps submitted for short periods</p>
    <p>Significant churn (app arrivals/departures)  not large long-running apps</p>
    <p>High variability in workloads (runtime, number of threads, etc. )</p>
    <p>Fast admission &amp; scheduling decisions</p>
    <p>DC</p>
    <p>Scheduler</p>
    <p>Workloads S</p>
    <p>S</p>
    <p>S</p>
    <p>S System State Metrics</p>
  </div>
  <div class="page">
    <p>Users are Interested in</p>
    <p>Fast Execution Time</p>
    <p>Low Waiting Time</p>
    <p>The amount of time the</p>
    <p>job needs to run</p>
    <p>The amount of time the</p>
    <p>job is waiting before</p>
    <p>it gets scheduled</p>
  </div>
  <div class="page">
    <p>Executive Summary</p>
    <p>Problem: Admission control in large-scale cloud DCs (e.g., EC2, Azure)</p>
    <p>Heterogeneity  performance/efficiency</p>
    <p>Interference  performance loss from high interference</p>
    <p>High arrival rates  system can become oversubscribed</p>
    <p>Background: Paragon is a heterogeneity and interference-aware scheduler for cloud DCs.</p>
    <p>Limitations: In high-load scenarios demanding workloads can block easy-tosatisfy applications  head-of-line blocking  long waiting time</p>
    <p>ARQ is an admission control protocol for cloud DCs that is:</p>
    <p>Application-aware: Accounts for the resource quality of each app</p>
    <p>QoS-aware: Queues applications s.t. their QoS guarantees are preserved</p>
    <p>Scalable: Scales to 10,000s of applications and servers</p>
    <p>Lightweight: Low and upper-bound queueing overheads</p>
  </div>
  <div class="page">
    <p>Users are Interested in</p>
    <p>Fast Execution Time</p>
    <p>Low Waiting Time</p>
    <p>The amount of time the</p>
    <p>job needs to run</p>
    <p>The amount of time the</p>
    <p>job is waiting before</p>
    <p>it gets scheduled</p>
    <p>P a ra</p>
    <p>g o n</p>
    <p>A</p>
    <p>R Q</p>
  </div>
  <div class="page">
    <p>Background: Paragon</p>
    <p>Classification: ~Netflix Challenge</p>
    <p>Small information signal about new application</p>
    <p>Leverage system knowledge about previously scheduled applications</p>
    <p>Collaborative filtering techniques (SVD + PQ reconstruction with SGD)</p>
    <p>Scheduling recommendations: Heterogeneity + Interference</p>
    <p>Greedy Scheduler:</p>
    <p>Co-schedule workloads with no/small interference on suitable hardware platforms</p>
    <p>preserve QoS &amp; improve utilization</p>
    <p>Server Platform Caused (c) Tolerated (t)</p>
    <p>Scheduler Apps</p>
    <p>System State</p>
    <p>Heterogeneity</p>
    <p>Interference</p>
    <p>Learning</p>
    <p>Metrics</p>
    <p>App</p>
    <p>Classification</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Scheduling in FIFO order:</p>
    <p>Applications with small resource requirements get blocked behind demanding</p>
    <p>workloads  head-of-line-blocking  long queueing delays</p>
    <p>Short jobs get blocked behind long jobs</p>
    <p>High-priority jobs get blocked behind low-priority jobs</p>
    <p>Resource-agnostic queueing of applications:</p>
    <p>Application in the head of the queue gets dispatched to first available server</p>
    <p>not necessarily a suitable server for that workload</p>
  </div>
  <div class="page">
    <p>ARQ: Application-aware Admission Control</p>
    <p>Resource Quality: Degree of tolerated and caused interference in various shared</p>
    <p>resources (higher quality means more demanding application)</p>
    <p>Resource quality-aware queueing: Applications are queued based on the resource</p>
    <p>quality they need</p>
    <p>Multi-class admission control: Each class corresponds to apps with specific range of</p>
    <p>Qi  dispatched to servers with the required Qj</p>
    <p>Preserving QoS: Applications can be diverged to different queues to preserve their</p>
    <p>QoS (when waiting time is high)</p>
    <p>For application i: For server j:</p>
  </div>
  <div class="page">
    <p>ARQ Design</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3 Higher quality</p>
    <p>resources</p>
  </div>
  <div class="page">
    <p>ARQ Design</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Qi</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3</p>
  </div>
  <div class="page">
    <p>ARQ Design</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3</p>
  </div>
  <div class="page">
    <p>ARQ Design</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3</p>
  </div>
  <div class="page">
    <p>ARQ Design</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3</p>
  </div>
  <div class="page">
    <p>ARQ: Queue Switching -- Utilization</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3</p>
    <p>If no applications in higher</p>
    <p>queue diverge up  suboptimal</p>
    <p>utilization but maintains QoS</p>
  </div>
  <div class="page">
    <p>ARQ: Queue Switching -- QoS</p>
    <p>Q1: [90,100]</p>
    <p>Q2: [80,90]</p>
    <p>Q3: [70,80]</p>
    <p>Q10: [0,10]</p>
    <p>Q1</p>
    <p>Q2</p>
    <p>Q10</p>
    <p>Q3</p>
    <p>If server available diverge to</p>
    <p>lower queue  some QoS</p>
    <p>degradation</p>
  </div>
  <div class="page">
    <p>Switching between Queues</p>
    <p>Statistically analyze per-pool freed-server-time  distribution fitting</p>
    <p>(represent using known distributions)</p>
    <p>Updated every time a new server is freed</p>
    <p>From CDFs of per-pool freed-server-time compute the optimal switching</p>
    <p>point between queues</p>
  </div>
  <div class="page">
    <p>Switching between Queues</p>
    <p>Optimization function:</p>
    <p>Find switching time t s.t.:</p>
    <p>maximize Prob[server is freed],</p>
    <p>subj. total waiting time preserves QoS</p>
    <p>Solving the optimization problem is fast (~msec) and scalable</p>
    <p>(O(n)) even for large numbers of applications and servers</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Workloads:</p>
    <p>Single-threaded: SPEC CPU2006</p>
    <p>Multi-threaded: PARSEC, SPLASH-2, BioParallel, Minebench, Specjbb</p>
    <p>Multiprogrammed: 4-app mixes of SPEC CPU2006 workloads</p>
    <p>I/O-bound: Hadoop + data mining (Matlab)</p>
    <p>Small scale:</p>
    <p>40 servers, 10 server configurations (Xeons, Atoms, etc. )</p>
    <p>178 applications used in four workload scenarios:</p>
    <p>Low load, high load and oversubscribed</p>
    <p>Large scale: 1,000 EC2 servers, oversubscribed scenario (8,500 apps)</p>
  </div>
  <div class="page">
    <p>Evaluation: Small Scale</p>
    <p>Paragon + ARQ preserves QoS for 95% of workloads  94% without ARQ</p>
    <p>Average performance is 99.6% of optimal</p>
  </div>
  <div class="page">
    <p>Evaluation: Small Scale</p>
    <p>Paragon + ARQ preserves QoS for 82% of workloads  64% without ARQ</p>
    <p>Average performance is 98% of optimal</p>
  </div>
  <div class="page">
    <p>Evaluation: Large Scale (EC2)</p>
    <p>Paragon preserves QoS for 75% of workloads  61% without ARQ</p>
    <p>Bounds degradation to less than 10% for 99% of workloads</p>
  </div>
  <div class="page">
    <p>Other experiments</p>
    <p>Workload scenario with application phases (app requirements change)</p>
    <p>Shortest Job First (SJF) and priorities</p>
    <p>Queueing overheads</p>
    <p>Sensitivity to parameters (e.g., number of queues, etc.)</p>
    <p>Distributions of server freed times</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>ARQ leverages Paragon to classify applications in multiple</p>
    <p>queues such that QoS guarantees are preserved and</p>
    <p>utilization is maximized</p>
    <p>It improves performance both for low and especially for</p>
    <p>oversubscribed workload scenarios</p>
    <p>It is scalable and lightweight</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Questions??</p>
  </div>
</Presentation>
