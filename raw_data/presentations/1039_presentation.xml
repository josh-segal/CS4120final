<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The RCU-Reader Preemption Problem in VMs</p>
    <p>Aravinda Prasad1, K Gopinath1, Paul E. McKenney2</p>
  </div>
  <div class="page">
    <p>Read-Copy-Update (RCU)</p>
    <p>RCU is a highly scalable synchronization technique  RCU Readers</p>
    <p>Do not directly synchronize with writers  Read-side primitives are exceedingly lightweight</p>
    <p>/* non -preemptible kernels */</p>
    <p>rcu_read_lock ()</p>
    <p>{</p>
    <p>/* no -op !! */</p>
    <p>}</p>
    <p>rcu_read_unlock ()</p>
    <p>{</p>
    <p>/* no -op !! */</p>
    <p>}</p>
    <p>RCU Writers  Must guarantee consistent view of data structures to readers</p>
  </div>
  <div class="page">
    <p>Read-Copy-Update (RCU)</p>
    <p>RCU is a highly scalable synchronization technique  RCU Readers</p>
    <p>Do not directly synchronize with writers  Read-side primitives are exceedingly lightweight</p>
    <p>/* non -preemptible kernels */</p>
    <p>rcu_read_lock ()</p>
    <p>{</p>
    <p>/* no -op !! */</p>
    <p>}</p>
    <p>rcu_read_unlock ()</p>
    <p>{</p>
    <p>/* no -op !! */</p>
    <p>}</p>
    <p>RCU Writers  Must guarantee consistent view of data structures to readers</p>
  </div>
  <div class="page">
    <p>Read-Copy-Update (RCU)</p>
    <p>RCU is a highly scalable synchronization technique  RCU Readers</p>
    <p>Do not directly synchronize with writers  Read-side primitives are exceedingly lightweight</p>
    <p>/* non -preemptible kernels */</p>
    <p>rcu_read_lock ()</p>
    <p>{</p>
    <p>/* no -op !! */</p>
    <p>}</p>
    <p>rcu_read_unlock ()</p>
    <p>{</p>
    <p>/* no -op !! */</p>
    <p>}</p>
    <p>RCU Writers  Must guarantee consistent view of data structures to readers</p>
  </div>
  <div class="page">
    <p>Example: Linked List Delete Operation</p>
    <p>Removed object B is reclaimed after a grace period</p>
  </div>
  <div class="page">
    <p>Example: Linked List Delete Operation</p>
    <p>Removed object B is reclaimed after a grace period</p>
  </div>
  <div class="page">
    <p>Example: Linked List Delete Operation</p>
    <p>Removed object B is reclaimed after a grace period</p>
  </div>
  <div class="page">
    <p>Example: Linked List Delete Operation</p>
    <p>Removed object B is reclaimed after a grace period</p>
  </div>
  <div class="page">
    <p>Example: Linked List Delete Operation</p>
    <p>Removed object B is reclaimed after a grace period 2</p>
  </div>
  <div class="page">
    <p>RCU Grace Periods (Non-Preemptive Environment)</p>
    <p>Restriction on RCU readers: 1. Referencing an object outside the read-side critical section is not allowed 2. Blocking/sleeping/yielding is not permitted within a read-side critical section</p>
    <p>(same rule as for tasks holding spinlocks)</p>
    <p>A context switch on a CPU implies all readers on that CPU are done  Grace period ends after all CPUs execute a context switch</p>
    <p>Time</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>CPU 3</p>
    <p>rcu_read_lock() rcu_read_unlock()</p>
    <p>context switch</p>
    <p>object deferred for freeing</p>
    <p>object actually freed</p>
    <p>GP duration</p>
  </div>
  <div class="page">
    <p>RCU Grace Periods (Non-Preemptive Environment)</p>
    <p>Restriction on RCU readers: 1. Referencing an object outside the read-side critical section is not allowed 2. Blocking/sleeping/yielding is not permitted within a read-side critical section</p>
    <p>(same rule as for tasks holding spinlocks)</p>
    <p>A context switch on a CPU implies all readers on that CPU are done  Grace period ends after all CPUs execute a context switch</p>
    <p>Time</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>CPU 3</p>
    <p>rcu_read_lock() rcu_read_unlock()</p>
    <p>context switch</p>
    <p>object deferred for freeing</p>
    <p>object actually freed</p>
    <p>GP duration</p>
  </div>
  <div class="page">
    <p>The RCU-Reader Preemption Problem</p>
    <p>Preemption of vCPUs executing RCU read-side critical sections</p>
    <p>Grace periods cannot complete while a vCPU is preempted within an RCU read-side critical section</p>
  </div>
  <div class="page">
    <p>The RCU-Reader Preemption Problem</p>
    <p>Preemption of vCPUs executing RCU read-side critical sections</p>
    <p>Grace periods cannot complete while a vCPU is preempted within an RCU read-side critical section</p>
  </div>
  <div class="page">
    <p>The RCU-Reader Preemption Problem</p>
  </div>
  <div class="page">
    <p>The RCU-Reader Preemption Problem</p>
    <p>vCPU preemption</p>
    <p>Time</p>
    <p>vCPU 1</p>
    <p>vCPU 2</p>
    <p>vCPU 3</p>
    <p>rcu_read_lock() rcu_read_unlock()</p>
    <p>context switch</p>
    <p>object deferred for freeing</p>
    <p>object actually freed</p>
    <p>GP duration</p>
  </div>
  <div class="page">
    <p>Evaluation 1: Postmark</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B s)</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B s)</p>
    <p>G P d</p>
    <p>u ra</p>
    <p>ti o n (</p>
    <p>m se</p>
    <p>c )</p>
    <p>Time (Seconds)</p>
    <p>G P d</p>
    <p>u ra</p>
    <p>ti o n (</p>
    <p>m se</p>
    <p>c )</p>
    <p>Time (Seconds)</p>
    <p>Baseline Overcommit</p>
  </div>
  <div class="page">
    <p>Evaluation 1: Postmark</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B s)</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B s)</p>
    <p>G P d</p>
    <p>u ra</p>
    <p>ti o n (</p>
    <p>m se</p>
    <p>c )</p>
    <p>Time (Seconds)</p>
    <p>G P d</p>
    <p>u ra</p>
    <p>ti o n (</p>
    <p>m se</p>
    <p>c )</p>
    <p>Time (Seconds)</p>
    <p>Baseline Overcommit</p>
  </div>
  <div class="page">
    <p>Evaluation 2: Memory microbenchmark</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B s)</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B s)</p>
    <p>G P d</p>
    <p>u ra</p>
    <p>ti o n (</p>
    <p>m se</p>
    <p>c )</p>
    <p>Time (Seconds)</p>
    <p>G P d</p>
    <p>u ra</p>
    <p>ti o n (</p>
    <p>m se</p>
    <p>c )</p>
    <p>Time (Seconds)</p>
    <p>Baseline Overcommit</p>
    <p>50% increase in peak memory footprint</p>
  </div>
  <div class="page">
    <p>Impact</p>
    <p>Latency: spikes when synchronously waiting for grace periods</p>
    <p>Memory: footprint spikes and increased peak memory footprint  Increased fragmentation  Can trigger swapping and ballooning</p>
    <p>Increased CPU utilization</p>
    <p>Cross-VM interaction: CPU-consumption spike in one VM might cause a grace period duration spike in another VM</p>
    <p>RCU-reader preemption can impact VM density and consolidation</p>
  </div>
  <div class="page">
    <p>Impact</p>
    <p>Latency: spikes when synchronously waiting for grace periods</p>
    <p>Memory: footprint spikes and increased peak memory footprint  Increased fragmentation  Can trigger swapping and ballooning</p>
    <p>Increased CPU utilization</p>
    <p>Cross-VM interaction: CPU-consumption spike in one VM might cause a grace period duration spike in another VM</p>
    <p>RCU-reader preemption can impact VM density and consolidation</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>First evaluation of vCPU preemption within RCU readers</p>
    <p>Demonstrate that RCU-reader preemption has significant performance impacts</p>
    <p>Techniques to handle lock-holder preemption cannot be applied directly to RCU</p>
    <p>Currently investigating a holistic solution for the RCU-reader preemption problem</p>
  </div>
  <div class="page">
    <p>Legal Statement</p>
    <p>This work represents the view of the author and does not necessarily represent the view of IBM.</p>
    <p>IBM and IBM (logo) are trademarks or registered trademarks of International Business Machines Corporation in the United States and/or other countries.</p>
    <p>Linux is a registered trademark of Linus Torvalds.  Other company, product, and service names may be trademarks or service marks of others.</p>
  </div>
  <div class="page">
    <p>Thank you !!</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>The RCU-Reader Preemption Problem in VMs</p>
    <p>Aravinda Prasad1, K Gopinath1, Paul E. McKenney2</p>
  </div>
</Presentation>
