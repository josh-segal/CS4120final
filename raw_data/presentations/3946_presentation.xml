<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fractured Processes Adaptive, Fine-Grained Process Abstractions</p>
    <p>Thanumalayan Sankaranarayana Pillai,</p>
    <p>Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>Process  Central abstraction in modern operating systems</p>
    <p>Provides a virtual machine to users</p>
    <p>Many tools, techniques built around processes  Environments and wrappers (Valgrind, memory limits ...)  Automatic restarts for fault tolerance  Replication for N-versioning</p>
  </div>
  <div class="page">
    <p>Monolithic Applications  Modern applications are mostly monolithic</p>
    <p>Use a single (or few) big process  Processes used more as threads, not as co-operating tasks  Example: Microsoft Office, Apple iPhoto, PostgreSQL</p>
    <p>Impractical for process-based tools, techniques</p>
  </div>
  <div class="page">
    <p>Big Processes: Disadvantage  Automatic restarts</p>
    <p>GUI applications: User-visible restarts  Restart time too high</p>
    <p>Environments such as Valgrind  Too expensive to apply to entire process</p>
    <p>N-version techniques  Too expensive to apply</p>
  </div>
  <div class="page">
    <p>Previous Solutions  Use small processes</p>
    <p>High, persistent overhead  Cost of a function call: a few cycles  Cost of two context switches: 4 to 6 s</p>
    <p>Process-like abstractions  Micro-reboots[OSDI 04], Band-aid patching[HotDep 07]</p>
    <p>EJB, COM, OSGi  Not as general as processes, requires re-inventing tools</p>
  </div>
  <div class="page">
    <p>Small processes, RPC-like interaction</p>
    <p>But, isolate only necessary parts as processes  Set of processes changes at each run  Use most optimal boundary for isolation</p>
    <p>Target existing C applications  Including multi-threaded applications  Allow incremental conversion (vs rewriting in another language)</p>
    <p>Supporting paradigms such as restarting</p>
    <p>Fractured Processes</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Example  Pidgin: Real-world instant messenger</p>
    <p>GUI application  Event-based  Extensible library of IM protocols and plugins</p>
    <p>Four (previously patched) bugs in Pidgin</p>
    <p>Two memory leaks  Two buffer overflows</p>
  </div>
  <div class="page">
    <p>Pidgin: Memory Leaks  Valgrind tool: Usual strategy to test memory leaks</p>
    <p>Runtime tool, requires running an application workload</p>
    <p>Pidgins leaks occur only in rare workloads</p>
    <p>Workloads cannot be tested during development</p>
    <p>Applying Valgrind has intolerable GUI lag</p>
    <p>Cannot ask users to run Valgrind in deployment</p>
  </div>
  <div class="page">
    <p>Fractured Processes Solution Crowd-sourcing Valgrind</p>
    <p>Overhead measured: 20% worst-case</p>
  </div>
  <div class="page">
    <p>The culprit buffer overflows ...  Occur for a certain class of inputs  Cause repeated crashes in some deployments</p>
    <p>Possible tolerance strategy: Rx [SOSP 05]</p>
    <p>Try restarting with different process environments until application can run</p>
    <p>Leaks can be tolerated using an LD_PRELOAD trick</p>
    <p>However, Rx-restarts cause GUI interruptions</p>
    <p>Pidgin: Buffer Overflows</p>
  </div>
  <div class="page">
    <p>Micro-Rx Tolerance   After first crash, isolate GUI into separate process   Try different environments on the non-GUI part   Extended solution: Search for problematic part</p>
    <p>Divide non-GUI part further, performing a binary search  Isolate problematic part in an optimal manner from GUI</p>
    <p>Fractured Processes Solution</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Isolation</p>
  </div>
  <div class="page">
    <p>Isolation</p>
    <p>void foo() { .... } void bar() { .... } void baz() { .... }</p>
    <p>Example program</p>
  </div>
  <div class="page">
    <p>Isolation 1. Programer divides program into modules</p>
    <p>void foo() { .... } void bar() { .... } void baz() { .... }</p>
    <p>Module foobar</p>
    <p>Module scram</p>
    <p>Example program</p>
  </div>
  <div class="page">
    <p>void foo() { .... } void bar() { .... } void baz() { .... }</p>
    <p>Isolation 2. At runtime, modules are composed into processes</p>
    <p>Specified by an user or administrator  Can vary with each run!</p>
    <p>Module foobar</p>
    <p>Module scram</p>
    <p>Example program</p>
    <p>Example runtime configuration</p>
    <p>FMP-1: foobar</p>
    <p>FMP-2: scram,qux</p>
    <p>An FMP is a process (Fractured Mini-Process)</p>
  </div>
  <div class="page">
    <p>void foo() { .... } void bar() { .... } void baz() { .... }</p>
    <p>Isolation</p>
    <p>Module foobar</p>
    <p>Module scram</p>
    <p>FMP-1: foobar with valgrind</p>
    <p>FMP-2: scram,qux</p>
    <p>Example program</p>
    <p>Example runtime configuration</p>
  </div>
  <div class="page">
    <p>Isolation: Runtime Configurations 1. All modules in a single FMP</p>
    <p>For normal usage: High performance, no isolation</p>
  </div>
  <div class="page">
    <p>Fracture can predict most optimal boundary for isolating a given module</p>
    <p>Intelligent Partitioning</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>void foo() { .... } void bar() { .... } void baz() { .... }</p>
    <p>Restarts, Replication, Sampling</p>
    <p>Module foobar (restartable, replicable)</p>
    <p>Module scram (replicable)</p>
    <p>FMP-1: foobar</p>
    <p>FMP-2: scram,qux</p>
    <p>Example program</p>
    <p>Example runtime configuration</p>
  </div>
  <div class="page">
    <p>void foo() { .... } void bar() { .... } void baz() { .... }</p>
    <p>Restarts, Replication, Sampling</p>
    <p>Module foobar (restartable, replicable)</p>
    <p>Module scram (replicable)</p>
    <p>FMP-1: foobar (restart on crash)</p>
    <p>FMP-2: scram,qux (replicate 2 times)</p>
    <p>Example program</p>
    <p>Example runtime configuration</p>
  </div>
  <div class="page">
    <p>On a crash, FMP is restarted with crashed request  Restarts etc. are transparent to other FMPs!</p>
    <p>Use-case: Simple restarts for fault tolerance</p>
    <p>Faster than full restarts  Restarting foo module does not affect GUI module</p>
    <p>FMP-E can be changed during each restart</p>
    <p>Rx-like fault tolerance[SOSP 05], Software Rejuvenation[FTCS 95]</p>
    <p>Restarts</p>
  </div>
  <div class="page">
    <p>N processes are run for the same FMP  Requests are supplied to all processes, and responses collated  If responses are different, appropriate action taken</p>
    <p>Use-case: N-version fault detection</p>
    <p>Low overhead than full N-version  Full N-versioning might not be possible (Eg: with GUI)</p>
    <p>FMP-E can be different for different versions</p>
    <p>Replication</p>
  </div>
  <div class="page">
    <p>N processes are run for the same FMP, but ...  Requests are distributed among the different processes</p>
    <p>FMP-E can be different for different versions   Use-case: Applying Valgrind-like tool to one version</p>
    <p>Further reduces tool overhead: only few requests are slowed</p>
    <p>Sampling</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Identifying Modules  Any set of functions can be a module ...   With some restrictions</p>
    <p>Global variables: Not allowed across modules  OS resources (like files): Not shared between modules  Pointer parameters, heap allocations: Special semantics</p>
  </div>
  <div class="page">
    <p>Pointer Parameters, Heap Allocations</p>
    <p>Pointer parameters are assigned a special semantic  On-demand copy-by-value-result  Data referred to is copied to callee, then copied back  Might require additional annotation in few cases  Affects synchronization in multi-threaded code</p>
    <p>Fracture allows data to belong to only one module</p>
    <p>Pointers referring to data are in the same module as data</p>
  </div>
  <div class="page">
    <p>Labeling Module Capabilities 1. Imagine modules as micro-servers</p>
    <p>If modules are not idempotent and deterministic, more complex (less restrictive) conditions can be used</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Implementation  FMP interaction: Shared memory queues</p>
    <p>Restarts, replication, sampling  Restarts: Queue entries logged in memory and replayed  Replication: Entries mirrored and collated  Sampling: Entries multiplexed and de-multiplexed</p>
    <p>Intelligent partitioning help  Module interaction recorded with a training workload  Mincut (graph) algorithm finds optimal isolation boundary</p>
  </div>
  <div class="page">
    <p>Outline  Introduction  Example: Pidgin  Fracture Usage &amp; Features</p>
    <p>Isolation  Restarts, Replication, and Sampling</p>
    <p>Programming Annotations  Implementation  Evaluation</p>
  </div>
  <div class="page">
    <p>Four real-world applications  Null-httpd: Multi-threaded, CGI-capable web server ()  NTFS-3g: Single threaded FUSE file system (30K LOC)  SSHFS: Multi-threaded FUSE file system, in-memory cache  Pidgin</p>
    <p>Different strategies for dividing into modules</p>
    <p>Null-httpd: Each function made into separate module  SSHFS: Divided into logical parts of code</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>57 pointer parameters required annotation  Context: 104 modules</p>
    <p>Hard: Identifying ownership of heap allocations   Effort easy for logical divisions already in code</p>
    <p>Harder for goals such as put every function into a module</p>
    <p>Programming Overhead</p>
  </div>
  <div class="page">
    <p>Isolation Performance</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>p er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Performance of original code</p>
  </div>
  <div class="page">
    <p>Fracture with all modules in a single FMP: Insignificant overhead</p>
    <p>No Isolation</p>
  </div>
  <div class="page">
    <p>Fracture with each module in separate FMP: High overhead</p>
    <p>One process for each module</p>
  </div>
  <div class="page">
    <p>Isolating Individual Modules Many modules can be isolated with tolerable overhead</p>
    <p>Some staggering modules</p>
  </div>
  <div class="page">
    <p>Restarts: Same overhead as isolation  In our experiments, restarting took less than 1 ms</p>
    <p>Replication: N-times overhead of isolation   Sampling: Same overhead of isolation</p>
    <p>Additionally, overhead of FMP-E applied</p>
    <p>Restart, Replication, Sampling Performance</p>
  </div>
  <div class="page">
    <p>An ecosystem is built around processes   Applications forgo the ecosystem for performance   On-demand RPC-style interaction, with some</p>
    <p>additional thought, can provide best of both worlds</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
  </div>
</Presentation>
