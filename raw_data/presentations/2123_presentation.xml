<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fault Isolation and Quick Recovery in Isolation File Systems</p>
    <p>Lanyue Lu Andrea C. Arpaci-Dusseau Remzi H. Arpaci-Dusseau</p>
    <p>University of Wisconsin - Madison</p>
  </div>
  <div class="page">
    <p>File-System Availability Is Critical</p>
  </div>
  <div class="page">
    <p>File-System Availability Is Critical</p>
    <p>Main data access interface  desktop, laptop, mobile devices, file servers</p>
  </div>
  <div class="page">
    <p>File-System Availability Is Critical</p>
    <p>Main data access interface  desktop, laptop, mobile devices, file servers</p>
    <p>A wide range of failures  resource allocation, metadata corruption  failed I/O operations, incorrect system states</p>
  </div>
  <div class="page">
    <p>File-System Availability Is Critical</p>
    <p>Main data access interface  desktop, laptop, mobile devices, file servers</p>
    <p>A wide range of failures  resource allocation, metadata corruption  failed I/O operations, incorrect system states</p>
    <p>A small fault can cause global failures  e.g., a single bit can impact the whole file system</p>
  </div>
  <div class="page">
    <p>File-System Availability Is Critical</p>
    <p>Main data access interface  desktop, laptop, mobile devices, file servers</p>
    <p>A wide range of failures  resource allocation, metadata corruption  failed I/O operations, incorrect system states</p>
    <p>A small fault can cause global failures  e.g., a single bit can impact the whole file system</p>
    <p>Global failures considered harmful  read-only, crash</p>
  </div>
  <div class="page">
    <p>Server Virtualization</p>
    <p>Hypervisor</p>
    <p>Shared file system</p>
    <p>Guest virtual machines</p>
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3</p>
  </div>
  <div class="page">
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3</p>
  </div>
  <div class="page">
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3</p>
    <p>e.g., metadata corruption</p>
  </div>
  <div class="page">
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3</p>
  </div>
  <div class="page">
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3</p>
    <p>e.g., metadata corruption</p>
  </div>
  <div class="page">
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3 ReadOnly</p>
    <p>or Crash</p>
    <p>All VMs are affected</p>
  </div>
  <div class="page">
    <p>VM2VM1 VM3</p>
    <p>VMDK1 VMDK2 VMDK3 ReadOnly</p>
    <p>or Crash</p>
    <p>All VMs are affected</p>
    <p>e.g., metadata corruption</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
    <p>A new abstraction for fault isolation  support multiple independent fault domains  protect a group of files for a domain</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
    <p>A new abstraction for fault isolation  support multiple independent fault domains  protect a group of files for a domain</p>
    <p>Isolation file systems  fine-grained fault isolation  quick recovery</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Study of Failure Policies</p>
    <p>Isolation File Systems</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Questions to Answer</p>
  </div>
  <div class="page">
    <p>Questions to Answer What global failure policies are used ?</p>
    <p>failure types  number of each type</p>
  </div>
  <div class="page">
    <p>Questions to Answer What global failure policies are used ?</p>
    <p>failure types  number of each type</p>
    <p>What are the root causes of global failures ?  related data structures  number of each cause</p>
  </div>
  <div class="page">
    <p>Methodology</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Three major file systems  Ext3 (Linux 2.6.32), Ext4 (Linux 2.6.32)  Btrfs (Linux 3.8)</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Three major file systems  Ext3 (Linux 2.6.32), Ext4 (Linux 2.6.32)  Btrfs (Linux 3.8)</p>
    <p>Analyze source code  identify types of global failures  count related error handling functions  correlate global failures to data structures</p>
  </div>
  <div class="page">
    <p>Q1: What global failure policies are used ?</p>
  </div>
  <div class="page">
    <p>Global Failure Policies</p>
  </div>
  <div class="page">
    <p>Global Failure Policies</p>
    <p>Definition  a failure which impacts all users of the file system or even the operating system</p>
  </div>
  <div class="page">
    <p>Global Failure Policies</p>
    <p>Definition  a failure which impacts all users of the file system or even the operating system</p>
    <p>Read-Only  e.g., ext3_error():  mark file system as read-only  abort the journal</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>read_block_bitmap(...){</p>
    <p>} }</p>
    <p>Read-Only Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>read_block_bitmap(...){</p>
    <p>} }</p>
    <p>Read-Only Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>read_block_bitmap(...){</p>
    <p>} }</p>
    <p>Read-Only Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>read_block_bitmap(...){</p>
    <p>} }</p>
    <p>Read-Only Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>read_block_bitmap(...){</p>
    <p>} }</p>
    <p>Read-Only Example</p>
  </div>
  <div class="page">
    <p>Global Failure Policies</p>
    <p>Definition  a failure which impacts users of the file system or even the operating system</p>
    <p>Read-Only  e.g., ext3_error():  mark file system as read-only  abort the journal</p>
    <p>Crash  e.g., BUG(), ASSERT(), panic()  crash the file system or operating system</p>
  </div>
  <div class="page">
    <p>btrfs/disk-io.c, 3.8</p>
    <p>open_ctree(...) {</p>
    <p>Crash Example</p>
  </div>
  <div class="page">
    <p>btrfs/disk-io.c, 3.8</p>
    <p>open_ctree(...) {</p>
    <p>Crash Example</p>
  </div>
  <div class="page">
    <p>btrfs/disk-io.c, 3.8</p>
    <p>open_ctree(...) {</p>
    <p>Crash Example</p>
  </div>
  <div class="page">
    <p>btrfs/disk-io.c, 3.8</p>
    <p>open_ctree(...) {</p>
    <p>Crash Example</p>
  </div>
  <div class="page">
    <p>um be</p>
    <p>r o f I</p>
    <p>ns ta</p>
    <p>nc es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Crash</p>
  </div>
  <div class="page">
    <p>Read-only and crash are common in modern file systems</p>
    <p>Over 67% of global failures will crash the system</p>
  </div>
  <div class="page">
    <p>Q2: What are the root causes of global failures ?</p>
  </div>
  <div class="page">
    <p>Global Failure Causes</p>
  </div>
  <div class="page">
    <p>Global Failure Causes</p>
    <p>Metadata corruption  metadata inconsistency is detected  e.g., a block/inode bitmap corruption</p>
  </div>
  <div class="page">
    <p>ext3/dir.c, 2.6.32</p>
    <p>ext3_check_dir_entry(...){</p>
    <p>}</p>
    <p>Metadata Corruption Example</p>
  </div>
  <div class="page">
    <p>ext3/dir.c, 2.6.32</p>
    <p>ext3_check_dir_entry(...){</p>
    <p>}</p>
    <p>Metadata Corruption Example</p>
  </div>
  <div class="page">
    <p>ext3/dir.c, 2.6.32</p>
    <p>ext3_check_dir_entry(...){</p>
    <p>}</p>
    <p>Metadata Corruption Example</p>
  </div>
  <div class="page">
    <p>ext3/dir.c, 2.6.32</p>
    <p>ext3_check_dir_entry(...){</p>
    <p>}</p>
    <p>Metadata Corruption Example</p>
  </div>
  <div class="page">
    <p>Global Failure Causes</p>
    <p>Metadata corruption  metadata inconsistency is detected  e.g., a block/inode bitmap corruption</p>
    <p>I/O failure  metadata I/O failure and journaling failure  e.g., fail to read an inode block</p>
  </div>
  <div class="page">
    <p>ext4/namei.c, 2.6.32</p>
    <p>empty_dir(...){</p>
    <p>fail to read directory block);</p>
    <p>I/O Failure Example</p>
  </div>
  <div class="page">
    <p>ext4/namei.c, 2.6.32</p>
    <p>empty_dir(...){</p>
    <p>fail to read directory block);</p>
    <p>I/O Failure Example</p>
  </div>
  <div class="page">
    <p>ext4/namei.c, 2.6.32</p>
    <p>empty_dir(...){</p>
    <p>fail to read directory block);</p>
    <p>I/O Failure Example</p>
  </div>
  <div class="page">
    <p>ext4/namei.c, 2.6.32</p>
    <p>empty_dir(...){</p>
    <p>fail to read directory block);</p>
    <p>I/O Failure Example</p>
  </div>
  <div class="page">
    <p>Global Failure Causes</p>
    <p>Metadata corruption  metadata inconsistency is detected  e.g., a block/inode bitmap corruption</p>
    <p>I/O failure  metadata I/O failure and journaling failure  e.g., fail to read an inode block</p>
    <p>Software bugs  unexpected states detected  e.g., allocated block is not in a valid range</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>ext3_rsv_window_add(...){</p>
    <p>rsv_window_dump(root, 1); 4 BUG();</p>
    <p>}</p>
    <p>Software Bug Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>ext3_rsv_window_add(...){</p>
    <p>rsv_window_dump(root, 1); 4 BUG();</p>
    <p>}</p>
    <p>Software Bug Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>ext3_rsv_window_add(...){</p>
    <p>rsv_window_dump(root, 1); 4 BUG();</p>
    <p>}</p>
    <p>Software Bug Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>ext3_rsv_window_add(...){</p>
    <p>rsv_window_dump(root, 1); 4 BUG();</p>
    <p>}</p>
    <p>Software Bug Example</p>
  </div>
  <div class="page">
    <p>ext3/balloc.c, 2.6.32</p>
    <p>ext3_rsv_window_add(...){</p>
    <p>rsv_window_dump(root, 1); 4 BUG();</p>
    <p>}</p>
    <p>Software Bug Example</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page">
    <p>N um</p>
    <p>be r o</p>
    <p>f I ns</p>
    <p>ta nc</p>
    <p>es</p>
    <p>Ext3 Ext4 Btrfs</p>
    <p>ReadOnly Pure Crash</p>
    <p>Figure 1: Failure Types. This figure shows the failure types foreach file system. The total numberof global failure instances is on top of each bar.</p>
    <p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (suchas BUG ON),whichareutilized to validatefile systemstateat runtime, and thesealsocausea global failure when invoked. We observe that nearly all of global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data. For each data structure, we also check whether it is</p>
    <p>shared across different files. As shown in the last column of Table 1, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p>
    <p>tories. To protect files in a shared environment, different applicationsare isolatedwithin separatednamespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines. However, these abstractions do not provide any fault</p>
    <p>Data Structure MC IOF SB Shared b-bitmap 2 2 Yes i-bitmap 1 1 Yes inode 1 2 2 Yes super 1 Yes</p>
    <p>dir-entry 4 4 3 Yes gdt 3 2 Yes</p>
    <p>indir-blk 1 1 No xattr 5 2 1 No block 5 Yes/No journal 3 27 Yes</p>
    <p>journal head 31 Yes buf head 16 Yes handle 22 9 Yes</p>
    <p>transaction 28 Yes revoke 2 Yes other 1 11 Yes/No Total 19 37 137 = 193</p>
    <p>Table 1: Global Failure Causes of Ext3. This table shows the failure causes for Ext3, in terms of data structures, failure causes and their related numbers. MC: Metadata Corruption; IOF: I/O Failures; SB: Software Bugs; Share: whether this structure is shared by multiple files or directories.</p>
    <p>isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadataandsystemstate; when faults are related to these shared metadata, global failure policies are triggered. Therefore, file system abstractions lack a fine-grained</p>
    <p>fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thusaffectingall clientsof thefile system.</p>
    <p>tains a group of files and their related metadata. Each file pod is isolated as an independent fault domain, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then a Swarm file system marks only that pod as read-only, without affecting other consistent file pods. Filepodsallowapplications tocontrol the failurepolicy</p>
    <p>of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization</p>
    <p>Ext3</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>All global failures are caused by</p>
    <p>metadata and system states</p>
  </div>
  <div class="page">
    <p>All global failures are caused by</p>
    <p>metadata and system states Both local and shared metadata can cause global failures</p>
  </div>
  <div class="page">
    <p>All global failures are caused by</p>
    <p>metadata and system states Both local and shared metadata can cause global failures</p>
  </div>
  <div class="page">
    <p>Not Only Local File Systems</p>
  </div>
  <div class="page">
    <p>Not Only Local File Systems</p>
    <p>Shared-disk file systems OCFS2  inspired by Ext3 design  used in virtualization environment  host virtual machine images  allow multiple Linux guests to share a file system</p>
  </div>
  <div class="page">
    <p>Not Only Local File Systems</p>
    <p>Shared-disk file systems OCFS2  inspired by Ext3 design  used in virtualization environment  host virtual machine images  allow multiple Linux guests to share a file system</p>
    <p>Global failures are also prevalent  a single piece of corrupted metadata can fail the whole file system on multiple nodes !</p>
  </div>
  <div class="page">
    <p>Current Abstractions</p>
  </div>
  <div class="page">
    <p>Current Abstractions</p>
    <p>File and directory  metadata is shared for different files or directories</p>
  </div>
  <div class="page">
    <p>Current Abstractions</p>
    <p>File and directory  metadata is shared for different files or directories</p>
    <p>Namespace  virtual machines, Chroot, BSD jail, Solaris Zones  multiple namespaces still share a file system</p>
  </div>
  <div class="page">
    <p>Current Abstractions</p>
    <p>File and directory  metadata is shared for different files or directories</p>
    <p>Namespace  virtual machines, Chroot, BSD jail, Solaris Zones  multiple namespaces still share a file system</p>
    <p>Partitions  multiple file systems on separated partitions  a single panic on a partition can crash the whole operating system  static partitions, dynamic partitions  management of many partitions</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>All files on a file system implicitly share</p>
    <p>a single fault domain</p>
  </div>
  <div class="page">
    <p>All files on a file system implicitly share</p>
    <p>a single fault domain</p>
  </div>
  <div class="page">
    <p>All files on a file system implicitly share</p>
    <p>a single fault domain</p>
    <p>Current file-system abstractions do not provide fine-grained fault isolation</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Study of Failure Policies</p>
    <p>Isolation File Systems New Abstraction</p>
    <p>Fault Isolation</p>
    <p>Quick Recovery</p>
    <p>Preliminary Implementation on Ext3</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Isolation File Systems</p>
  </div>
  <div class="page">
    <p>Isolation File Systems</p>
    <p>Fine-grained partitioned  files are isolated into separated domains</p>
  </div>
  <div class="page">
    <p>Isolation File Systems</p>
    <p>Fine-grained partitioned  files are isolated into separated domains</p>
    <p>Independent  faulty units will not affect healthy units</p>
  </div>
  <div class="page">
    <p>Isolation File Systems</p>
    <p>Fine-grained partitioned  files are isolated into separated domains</p>
    <p>Independent  faulty units will not affect healthy units</p>
    <p>Fine-grained recovery  repair a faulty unit quickly  instead of checking the whole file system</p>
  </div>
  <div class="page">
    <p>Isolation File Systems</p>
    <p>Fine-grained partitioned  files are isolated into separated domains</p>
    <p>Independent  faulty units will not affect healthy units</p>
    <p>Fine-grained recovery  repair a faulty unit quickly  instead of checking the whole file system</p>
    <p>Elastic  dynamically grow and shrink its size</p>
  </div>
  <div class="page">
    <p>New Abstraction</p>
  </div>
  <div class="page">
    <p>New Abstraction</p>
    <p>File Pod  an abstract partition  contains a group of files and related metadata  an independent fault domain</p>
  </div>
  <div class="page">
    <p>New Abstraction</p>
    <p>File Pod  an abstract partition  contains a group of files and related metadata  an independent fault domain</p>
    <p>Operations  create a file pod  set / get file pods attributes  failure policy  recovery policy</p>
    <p>bind / unbind a file to pod  share a file between pods</p>
  </div>
  <div class="page">
    <p>d1 d2</p>
    <p>d4</p>
    <p>d3</p>
    <p>/</p>
  </div>
  <div class="page">
    <p>d1 d2</p>
    <p>d4</p>
    <p>d3</p>
    <p>/ Pod1 Pod2</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Study of Failure Policies</p>
    <p>Isolation File Systems New Abstraction</p>
    <p>Fault Isolation</p>
    <p>Quick Recovery</p>
    <p>Preliminary Implementation on Ext3</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Metadata Isolation</p>
  </div>
  <div class="page">
    <p>Metadata Isolation</p>
    <p>Observation  metadata is organized in a shared manner  hard to isolate a failure for metadata</p>
  </div>
  <div class="page">
    <p>Metadata Isolation</p>
    <p>Observation  metadata is organized in a shared manner  hard to isolate a failure for metadata</p>
    <p>For example  multiple inodes are stored in a single inode block</p>
    <p>i i i i i i i i i i i i</p>
    <p>an inode block 36</p>
  </div>
  <div class="page">
    <p>Metadata Isolation</p>
    <p>Observation  metadata is organized in a shared manner  hard to isolate a failure for metadata</p>
    <p>For example  multiple inodes are stored in a single inode block  an I/O failure can affect multiple files</p>
    <p>i i i i i i i i i i i i</p>
    <p>an inode block</p>
    <p>a block read failure</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Key Idea 1:</p>
  </div>
  <div class="page">
    <p>Key Idea 1:</p>
    <p>Isolate metadata for file pods</p>
  </div>
  <div class="page">
    <p>Localize Failures</p>
  </div>
  <div class="page">
    <p>Localize Failures</p>
    <p>Local Failures  convert global failures to local failures  same failure semantics  only fail the faulty pod</p>
  </div>
  <div class="page">
    <p>Localize Failures</p>
    <p>Local Failures  convert global failures to local failures  same failure semantics  only fail the faulty pod</p>
    <p>Read-Only  mark a file pod as Read-Only</p>
  </div>
  <div class="page">
    <p>Localize Failures</p>
    <p>Local Failures  convert global failures to local failures  same failure semantics  only fail the faulty pod</p>
    <p>Read-Only  mark a file pod as Read-Only</p>
    <p>Crash  crash a file pod instead of the whole system  provide the same initial states after crash</p>
  </div>
  <div class="page">
    <p>d1 d2</p>
    <p>d4</p>
    <p>d3</p>
    <p>/ Pod1 Pod2</p>
  </div>
  <div class="page">
    <p>d1 d2</p>
    <p>d4</p>
    <p>d3</p>
    <p>/ Pod1 Pod2</p>
    <p>e.g., corruption</p>
  </div>
  <div class="page">
    <p>d1 d2</p>
    <p>d4</p>
    <p>d3</p>
    <p>/ Pod1 Pod2</p>
    <p>e.g., corruption</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Study of Failure Policies</p>
    <p>Isolation File Systems New Abstraction</p>
    <p>Fault Isolation</p>
    <p>Quick Recovery</p>
    <p>Preliminary Implementation on Ext3</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Quick Recovery</p>
  </div>
  <div class="page">
    <p>Quick Recovery</p>
    <p>File system recovery is slow  a small error requires a full check  many random read requests  7 hours to sequentially read a 2 TB disk</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>a small fault</p>
    <p>requires a full check (slow!)</p>
  </div>
  <div class="page">
    <p>a small fault</p>
    <p>requires a full check (slow!)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Key Idea 2:</p>
  </div>
  <div class="page">
    <p>Key Idea 2:</p>
    <p>Minimize the file system checking range during recovery</p>
  </div>
  <div class="page">
    <p>Quick Recovery</p>
  </div>
  <div class="page">
    <p>Quick Recovery</p>
    <p>Metadata Isolation  file pod as the unit of recovery  check and recover independently  both online and offline</p>
  </div>
  <div class="page">
    <p>Quick Recovery</p>
    <p>Metadata Isolation  file pod as the unit of recovery  check and recover independently  both online and offline</p>
    <p>When recover ?  leverage internal detection mechanism</p>
  </div>
  <div class="page">
    <p>Quick Recovery</p>
    <p>Metadata Isolation  file pod as the unit of recovery  check and recover independently  both online and offline</p>
    <p>When recover ?  leverage internal detection mechanism</p>
    <p>How to recover more efficiently ?  only check the faulty pod  narrow down to certain data structures</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Study of Failure Policies</p>
    <p>Isolation File Systems New Abstraction</p>
    <p>Fault Isolation</p>
    <p>Quick Recovery</p>
    <p>Preliminary Implementation on Ext3</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Ext3 Layout</p>
  </div>
  <div class="page">
    <p>Ext3 Layout</p>
    <p>A disk is divided into block groups  physical partition for disk locality</p>
  </div>
  <div class="page">
    <p>Ext3 Layout</p>
    <p>A disk is divided into block groups  physical partition for disk locality</p>
    <p>disk layout</p>
  </div>
  <div class="page">
    <p>Ext3 Layout</p>
    <p>A disk is divided into block groups  physical partition for disk locality</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>disk layout</p>
    <p>one block group</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>multiple files can share a single block group</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>multiple files can share a single block group</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>multiple files can share a single block group</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>multiple files can share a single block group</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>multiple files can share a single block group</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>f5</p>
    <p>multiple files can share a single block group</p>
    <p>one file can span multiple block groups</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>f5</p>
    <p>multiple files can share a single block group</p>
    <p>one file can span multiple block groups</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>f5</p>
    <p>multiple files can share a single block group</p>
    <p>one file can span multiple block groups</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>f5</p>
    <p>multiple files can share a single block group</p>
    <p>one file can span multiple block groups</p>
  </div>
  <div class="page">
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>f1</p>
    <p>f2</p>
    <p>f3</p>
    <p>f4</p>
    <p>f5</p>
    <p>multiple files can share a single block group</p>
    <p>one file can span multiple block groups</p>
  </div>
  <div class="page">
    <p>Layout</p>
  </div>
  <div class="page">
    <p>Layout</p>
    <p>A file pod contains multiple block groups  one block group only maps to one file pod  performance locality and fault isolation</p>
  </div>
  <div class="page">
    <p>Layout</p>
    <p>A file pod contains multiple block groups  one block group only maps to one file pod  performance locality and fault isolation</p>
    <p>disk layout</p>
    <p>POD1 POD2 POD3</p>
  </div>
  <div class="page">
    <p>Data Structures</p>
  </div>
  <div class="page">
    <p>Data Structures</p>
    <p>Pod related structure  no extra mapping structures</p>
  </div>
  <div class="page">
    <p>Data Structures</p>
    <p>Pod related structure  no extra mapping structures  embeds in group descriptors  group descriptors are loaded into memory</p>
    <p>SB GDTs BM InodesIM Blocks Blocks</p>
    <p>a block grouppod</p>
  </div>
  <div class="page">
    <p>Algorithms</p>
  </div>
  <div class="page">
    <p>Algorithms</p>
    <p>Pod based inode and block allocation  preserve original allocations locality  allocation will not cross pod boundary</p>
  </div>
  <div class="page">
    <p>POD1 POD2 POD3</p>
  </div>
  <div class="page">
    <p>POD1 POD2 POD3</p>
  </div>
  <div class="page">
    <p>Algorithms</p>
  </div>
  <div class="page">
    <p>Algorithms</p>
    <p>Pod based inode and block allocation  preserve original allocations locality  allocation will not cross pod boundary</p>
    <p>De-fragmentation  potential internal fragmentation</p>
  </div>
  <div class="page">
    <p>Algorithms</p>
    <p>Pod based inode and block allocation  preserve original allocations locality  allocation will not cross pod boundary</p>
    <p>De-fragmentation  potential internal fragmentation  de-fragmentation for file pods  similar solution in Ext4</p>
  </div>
  <div class="page">
    <p>Journaling</p>
  </div>
  <div class="page">
    <p>Journaling</p>
    <p>Virtual transaction  contains updates only from one pod</p>
    <p>T1 T2 T3</p>
    <p>Pod 1</p>
    <p>On-disk journal</p>
    <p>Pod 2 Pod 3</p>
    <p>independent transactions</p>
  </div>
  <div class="page">
    <p>Journaling</p>
    <p>Virtual transaction  contains updates only from one pod  better performance isolation</p>
    <p>T1 T2 T3</p>
    <p>Pod 1</p>
    <p>On-disk journal</p>
    <p>Pod 2 Pod 3</p>
    <p>independent transactions</p>
  </div>
  <div class="page">
    <p>Journaling</p>
    <p>Virtual transaction  contains updates only from one pod  better performance isolation  commit multiple virtual transactions in parallel</p>
    <p>T1 T2 T3</p>
    <p>Pod 1</p>
    <p>On-disk journal</p>
    <p>Pod 2 Pod 3</p>
    <p>journal reservation</p>
    <p>independent transactions</p>
    <p>shared journal</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Study of Failure Policies</p>
    <p>Isolation File Systems New Abstraction</p>
    <p>Fault Isolation</p>
    <p>Quick Recovery</p>
    <p>Preliminary Implementation on Ext3</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Status</p>
  </div>
  <div class="page">
    <p>Status</p>
    <p>What we did  a simple prototype for Ext3  provide readonly isolation</p>
  </div>
  <div class="page">
    <p>Status</p>
    <p>What we did  a simple prototype for Ext3  provide readonly isolation</p>
    <p>What we plan to do  crash isolation</p>
  </div>
  <div class="page">
    <p>Status</p>
    <p>What we did  a simple prototype for Ext3  provide readonly isolation</p>
    <p>What we plan to do  crash isolation  quick recovery after failure</p>
  </div>
  <div class="page">
    <p>Status</p>
    <p>What we did  a simple prototype for Ext3  provide readonly isolation</p>
    <p>What we plan to do  crash isolation  quick recovery after failure  other file systems: Ext4 and Btrfs</p>
  </div>
  <div class="page">
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Metadata isolation  tree-based directory structure  globally shared metadata: super block, journal  shared system states: block allocation tree</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Metadata isolation  tree-based directory structure  globally shared metadata: super block, journal  shared system states: block allocation tree</p>
    <p>Local failure  is it correct to continue to run ?  light-weight, stateless crash for a pod</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Metadata isolation  tree-based directory structure  globally shared metadata: super block, journal  shared system states: block allocation tree</p>
    <p>Local failure  is it correct to continue to run ?  light-weight, stateless crash for a pod</p>
    <p>Performance  potential overhead of managing pods  better performance isolation  better scalability</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Failure is not an option.</p>
  </div>
  <div class="page">
    <p>Failure is not an option. -- NASA</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Global failure is not an option;</p>
  </div>
  <div class="page">
    <p>Global failure is not an option; local failure with quick recovery</p>
  </div>
  <div class="page">
    <p>Global failure is not an option; local failure with quick recovery is an option.</p>
  </div>
  <div class="page">
    <p>Global failure is not an option; local failure with quick recovery is an option.</p>
    <p>-- Isolation File Systems</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Questions ?</p>
  </div>
</Presentation>
