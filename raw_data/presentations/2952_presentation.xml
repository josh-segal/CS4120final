<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SKI: Exposing Kernel Concurrency Bugs through Systematic Schedule Exploration</p>
    <p>Pedro Fonseca</p>
    <p>Rodrigo Rodrigues Bjrn Brandenburg</p>
    <p>(MPI-SWS)</p>
    <p>(NOVA University of Lisbon) (MPI-SWS)</p>
    <p>OSDI 2014</p>
  </div>
  <div class="page">
    <p>Kernel concurrency bugs</p>
    <p>Bugs that depend on the instruction interleavings</p>
    <p>Triggered only by a subset of the interleavings</p>
  </div>
  <div class="page">
    <p>Kernel concurrency bugs</p>
    <p>Bugs that depend on the instruction interleavings</p>
    <p>Triggered only by a subset of the interleavings</p>
    <p>Plenty of kernel concurrency bugs in kernels!</p>
  </div>
  <div class="page">
    <p>Kernel concurrency bugs</p>
    <p>Bugs that depend on the instruction interleavings</p>
    <p>Triggered only by a subset of the interleavings</p>
    <p>Plenty of kernel concurrency bugs in kernels!</p>
    <p>The bug is a race and not always easy to reproduce. [...] On my particular machine, [the test case] usually triggers [the bug] within 10 minutes but enabling debug options can change the timing such that it never hits. Once the bug is triggered, the machine is in trouble and needs to be rebooted.</p>
    <p>The bug is a race and not always easy to reproduce. [...] On my particular machine, [the test case] usually triggers [the bug] within 10 minutes but enabling debug options can change the timing such that it never hits. Once the bug is triggered, the machine is in trouble and needs to be rebooted.</p>
    <p>Linux 3.0.41 change log</p>
  </div>
  <div class="page">
    <p>Kernel concurrency bugs</p>
    <p>Bugs that depend on the instruction interleavings</p>
    <p>Triggered only by a subset of the interleavings</p>
    <p>Plenty of kernel concurrency bugs in kernels!</p>
    <p>The bug is a race and not always easy to reproduce. [...] On my particular machine, [the test case] usually triggers [the bug] within 10 minutes but enabling debug options can change the timing such that it never hits. Once the bug is triggered, the machine is in trouble and needs to be rebooted.</p>
    <p>The bug is a race and not always easy to reproduce. [...] On my particular machine, [the test case] usually triggers [the bug] within 10 minutes but enabling debug options can change the timing such that it never hits. Once the bug is triggered, the machine is in trouble and needs to be rebooted.</p>
    <p>Linux 3.0.41 change log</p>
    <p>[The bug] was quite hard to decode as the reproduction time is between 2 days and 3 weeks and intrusive tracing makes it less likely [...]</p>
    <p>[The bug] was quite hard to decode as the reproduction time is between 2 days and 3 weeks and intrusive tracing makes it less likely [...] Linux 3.4.41 change log</p>
  </div>
  <div class="page">
    <p>Kernel concurrency bugs</p>
    <p>Bugs that depend on the instruction interleavings</p>
    <p>Triggered only by a subset of the interleavings</p>
    <p>Plenty of kernel concurrency bugs in kernels!</p>
    <p>The bug is a race and not always easy to reproduce. [...] On my particular machine, [the test case] usually triggers [the bug] within 10 minutes but enabling debug options can change the timing such that it never hits. Once the bug is triggered, the machine is in trouble and needs to be rebooted.</p>
    <p>The bug is a race and not always easy to reproduce. [...] On my particular machine, [the test case] usually triggers [the bug] within 10 minutes but enabling debug options can change the timing such that it never hits. Once the bug is triggered, the machine is in trouble and needs to be rebooted.</p>
    <p>Linux 3.0.41 change log</p>
    <p>[The bug] was quite hard to decode as the reproduction time is between 2 days and 3 weeks and intrusive tracing makes it less likely [...]</p>
    <p>[The bug] was quite hard to decode as the reproduction time is between 2 days and 3 weeks and intrusive tracing makes it less likely [...] Linux 3.4.41 change log</p>
    <p>Three of the fve 3.4.9 machines [...] locked up. I've tried reproducing the issue, but so far I've been unsuccessful [...]</p>
    <p>Three of the fve 3.4.9 machines [...] locked up. I've tried reproducing the issue, but so far I've been unsuccessful [...]</p>
    <p>Linux kernel mailing list (5/1/2013)</p>
  </div>
  <div class="page">
    <p>Stress testing approach</p>
    <p>Hope to fnd the interleaving</p>
    <p>Approaches to explore interleavings</p>
  </div>
  <div class="page">
    <p>Stress testing approach</p>
    <p>Hope to fnd the interleaving</p>
    <p>Systematic approach</p>
    <p>Take full control of the interleavings</p>
    <p>Existing tools focus on user-mode applications</p>
    <p>Approaches to explore interleavings</p>
  </div>
  <div class="page">
    <p>Stress testing approach</p>
    <p>Hope to fnd the interleaving</p>
    <p>Systematic approach</p>
    <p>Take full control of the interleavings</p>
    <p>Existing tools focus on user-mode applications</p>
    <p>Approaches to explore interleavings</p>
    <p>This talk</p>
  </div>
  <div class="page">
    <p>Stress testing approach</p>
    <p>Hope to fnd the interleaving</p>
    <p>Systematic approach</p>
    <p>Take full control of the interleavings</p>
    <p>Existing tools focus on user-mode applications</p>
    <p>Approaches to explore interleavings</p>
    <p>This talk</p>
    <p>Focus on operating system kernels</p>
  </div>
  <div class="page">
    <p>Testing applications versus kernels</p>
    <p>Our approach</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Finding kernel concurrency bugs</p>
    <p>SKI</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>Kernel</p>
    <p>Kernel-level abstractions Threads and sync. objects</p>
    <p>Existing user-mode systematic tools LD_PRELOAD, ptrace</p>
    <p>Existing user-mode tools</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>Kernel</p>
    <p>Kernel-level abstractions Threads and sync. objects</p>
    <p>Existing user-mode systematic tools LD_PRELOAD, ptrace</p>
    <p>Existing user-mode tools</p>
    <p>Scheduler</p>
    <p>User-mode testing tool</p>
  </div>
  <div class="page">
    <p>Kernel-mode challenges</p>
    <p>Kernel doesn't have a good instrumentation interface</p>
    <p>Kernel Scheduler</p>
    <p>Testing tool</p>
  </div>
  <div class="page">
    <p>Kernel-mode challenges</p>
    <p>Kernel doesn't have a good instrumentation interface</p>
    <p>An alternative would be to modify the kernel</p>
    <p>But kernel modifcations:</p>
    <p>Kernel Scheduler</p>
  </div>
  <div class="page">
    <p>Kernel-mode challenges</p>
    <p>Kernel doesn't have a good instrumentation interface</p>
    <p>An alternative would be to modify the kernel</p>
    <p>But kernel modifcations:  Change the tested software  Are non-trivial  Hinder portability</p>
    <p>Kernel Scheduler</p>
  </div>
  <div class="page">
    <p>Kernel-mode challenges</p>
    <p>Kernel doesn't have a good instrumentation interface</p>
    <p>An alternative would be to modify the kernel</p>
    <p>But kernel modifcations:  Change the tested software  Are non-trivial  Hinder portability</p>
    <p>Avoid kernel modifcations</p>
    <p>Kernel Scheduler</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>Kernel</p>
    <p>Hardware</p>
    <p>Kernel-level abstractions Threads and sync. objects</p>
    <p>HW-level abstractions mov, add, jmp, registers, APIC</p>
    <p>LD_PRELOAD, ptrace</p>
    <p>Our tool (modifed VMM)</p>
    <p>User-mode versus kernel-mode</p>
    <p>Scheduler</p>
    <p>Existing user-mode systematic tools</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>Kernel</p>
    <p>Hardware</p>
    <p>Kernel-level abstractions Threads and sync. objects</p>
    <p>HW-level abstractions mov, add, jmp, registers, APIC</p>
    <p>LD_PRELOAD, ptrace</p>
    <p>Our tool (modifed VMM)</p>
    <p>User-mode versus kernel-mode</p>
    <p>Scheduler</p>
    <p>Kernel testing tool</p>
    <p>Existing user-mode systematic tools</p>
  </div>
  <div class="page">
    <p>SKI Finding kernel concurrency bugs</p>
  </div>
  <div class="page">
    <p>Full control of the kernel interleavings</p>
    <p>Systematic</p>
    <p>SKI Finding kernel concurrency bugs</p>
  </div>
  <div class="page">
    <p>+ No modifcationsto the kernel Practical</p>
    <p>Full control of the kernel interleavings</p>
    <p>Systematic</p>
    <p>SKI Finding kernel concurrency bugs</p>
    <p>Fast</p>
  </div>
  <div class="page">
    <p>Challenges testing the kernel code</p>
    <p>SKI's approach</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Finding kernel concurrency bugs</p>
    <p>SKI</p>
  </div>
  <div class="page">
    <p>App</p>
    <p>Kernel</p>
    <p>SKI's approach</p>
    <p>SKI</p>
    <p>HW-level abstractions mov, add, jmp, registers, APIC</p>
    <p>VM</p>
    <p>VMM</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>MOV ADD PUSH MOV MOV SUB JMP</p>
    <p>CPU</p>
    <p>Thread 1 Thread 2</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Pin each tested thread to a diferent CPU (thread afnity)</p>
    <p>MOV ADD PUSH MOV MOV SUB JMP</p>
    <p>MOV ADD</p>
    <p>MOV PUSH</p>
    <p>MOV SUB JMP</p>
    <p>Pin</p>
    <p>CPU CPU 1 CPU 2</p>
    <p>Thread 1 Thread 2 Thread 1 Thread 2</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Pin each tested thread to a diferent CPU (thread afnity)</p>
    <p>Pause and resume CPUs to control schedules</p>
    <p>MOV ADD PUSH MOV MOV SUB JMP</p>
    <p>MOV ADD</p>
    <p>MOV PUSH</p>
    <p>MOV SUB JMP</p>
    <p>Pin Control</p>
    <p>CPU CPU 1 CPU 2</p>
    <p>MOV</p>
    <p>ADD MOV</p>
    <p>PUSH MOV SUB</p>
    <p>JMP</p>
    <p>CPU 1 CPU 2</p>
    <p>Thread 1 Thread 2 Thread 1 Thread 2 Thread 1 Thread 2</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Pin each tested thread to a diferent CPU (thread afnity)</p>
    <p>Pause and resume CPUs to control schedules</p>
    <p>MOV ADD PUSH MOV MOV SUB JMP</p>
    <p>MOV ADD</p>
    <p>MOV PUSH</p>
    <p>MOV SUB JMP</p>
    <p>Pin Control</p>
    <p>CPU CPU 1 CPU 2</p>
    <p>MOV</p>
    <p>ADD MOV</p>
    <p>PUSH MOV SUB</p>
    <p>JMP</p>
    <p>CPU 1 CPU 2</p>
    <p>MOV ADD MOV</p>
    <p>PUSH MOV SUB JMP</p>
    <p>CPU 1 CPU 2</p>
    <p>Thread 1 Thread 2 Thread 1 Thread 2 Thread 1 Thread 2 Thread 1 Thread 2</p>
    <p>t +</p>
  </div>
  <div class="page">
    <p>Pin each tested thread to a diferent CPU (thread afnity)</p>
    <p>Pause and resume CPUs to control schedules</p>
    <p>MOV ADD PUSH MOV MOV SUB JMP</p>
    <p>MOV ADD</p>
    <p>MOV PUSH</p>
    <p>MOV SUB JMP</p>
    <p>Pin Control</p>
    <p>CPU CPU 1 CPU 2</p>
    <p>MOV</p>
    <p>ADD MOV</p>
    <p>PUSH MOV SUB</p>
    <p>JMP</p>
    <p>CPU 1 CPU 2</p>
    <p>MOV ADD MOV</p>
    <p>PUSH MOV SUB JMP</p>
    <p>CPU 1 CPU 2</p>
    <p>Thread 1 Thread 2 Thread 1 Thread 2 Thread 1 Thread 2 Thread 1 Thread 2</p>
    <p>t</p>
    <p>Leverage thread afnity and control CPUs</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Execution of some instructions are good hints</p>
  </div>
  <div class="page">
    <p>Execution of some instructions are good hints</p>
    <p>MOV ADD HALT</p>
    <p>MOV MOV SUB PUSH</p>
    <p>CPU 1 CPU 2</p>
    <p>MOV MOV</p>
    <p>PAUSE MOV MOV SUB PUSH</p>
    <p>CPU 1 CPU 2</p>
  </div>
  <div class="page">
    <p>Execution of some instructions are good hints</p>
    <p>Memory access patterns can also provide hints</p>
    <p>MOV ADD HALT</p>
    <p>MOV MOV SUB PUSH</p>
    <p>CPU 1 CPU 2</p>
    <p>MOV MOV</p>
    <p>PAUSE MOV MOV SUB PUSH</p>
    <p>CPU 1 CPU 2</p>
    <p>JMP MOV JMP MOV JMP MOV</p>
    <p>MOV</p>
    <p>CPU 1 CPU 2</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Execution of some instructions are good hints</p>
    <p>Memory access patterns can also provide hints</p>
    <p>MOV ADD HALT</p>
    <p>MOV MOV SUB PUSH</p>
    <p>CPU 1 CPU 2</p>
    <p>MOV MOV</p>
    <p>PAUSE MOV MOV SUB PUSH</p>
    <p>CPU 1 CPU 2</p>
    <p>JMP MOV JMP MOV JMP MOV</p>
    <p>MOV</p>
    <p>CPU 1 CPU 2</p>
    <p>Memory</p>
    <p>Rely on VMM introspection</p>
  </div>
  <div class="page">
    <p>PCT: User-mode scheduling algorithm [ASPLOS'10]</p>
    <p>Run the highest priority live threads</p>
    <p>Create schedule diversity</p>
  </div>
  <div class="page">
    <p>PCT: User-mode scheduling algorithm [ASPLOS'10]</p>
    <p>Run the highest priority live threads</p>
    <p>Create schedule diversity</p>
    <p>Generalize with interrupt support</p>
    <p>Detect arrival / end</p>
    <p>Control dispatch</p>
  </div>
  <div class="page">
    <p>PCT: User-mode scheduling algorithm [ASPLOS'10]</p>
    <p>Run the highest priority live threads</p>
    <p>Create schedule diversity</p>
    <p>Generalize with interrupt support</p>
    <p>Detect arrival / end</p>
    <p>Control dispatch</p>
    <p>Reduce interleaving space</p>
  </div>
  <div class="page">
    <p>PCT: User-mode scheduling algorithm [ASPLOS'10]</p>
    <p>Run the highest priority live threads</p>
    <p>Create schedule diversity</p>
    <p>Generalize with interrupt support</p>
    <p>Detect arrival / end</p>
    <p>Control dispatch</p>
    <p>Reduce interleaving space</p>
    <p>Generalize user-mode systematic testing algorithms</p>
  </div>
  <div class="page">
    <p>Challenges testing kernel code</p>
    <p>SKI's approach</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Finding kernel concurrency bugs</p>
    <p>SKI</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implemented SKI by modifying QEMU (VMM)</p>
    <p>No kernel changes required</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implemented SKI by modifying QEMU (VMM)</p>
    <p>No kernel changes required</p>
    <p>Built a user-mode library (VM)</p>
    <p>Flags start/end of tests and sends results to VMM</p>
    <p>Used library to implement several test-cases</p>
    <p>e.g., fle system tests</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implemented SKI by modifying QEMU (VMM)</p>
    <p>No kernel changes required</p>
    <p>Built a user-mode library (VM)</p>
    <p>Flags start/end of tests and sends results to VMM</p>
    <p>Used library to implement several test-cases</p>
    <p>e.g., fle system tests</p>
    <p>Implemented several optimizations</p>
  </div>
  <div class="page">
    <p>Detecting and diagnosing bugs with SKI</p>
    <p>SKI supports diferent types of bug detectors</p>
    <p>Crash and assertion violations</p>
    <p>Data races</p>
    <p>Semantic bugs (e.g. disk corruption)</p>
  </div>
  <div class="page">
    <p>Detecting and diagnosing bugs with SKI</p>
    <p>SKI supports diferent types of bug detectors</p>
    <p>Crash and assertion violations</p>
    <p>Data races</p>
    <p>Semantic bugs (e.g. disk corruption)</p>
    <p>SKI produces detailed execution traces</p>
  </div>
  <div class="page">
    <p>Challenges testing kernel code</p>
    <p>SKI's approach</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Finding kernel concurrency bugs</p>
    <p>SKI</p>
  </div>
  <div class="page">
    <p>Searched for previously reported bugs</p>
    <p>In kernel bugzilla, mailing lists, git logs</p>
    <p>Well documented reports and diverse set of bugs</p>
    <p>Created SKI test suites for these bugs</p>
    <p>By adapting the stress tests in the bug reports</p>
  </div>
  <div class="page">
    <p>Bug Kernel Component Detector</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash</p>
    <p>B Linux</p>
    <p>Crash</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic</p>
    <p>D FreeBSD</p>
  </div>
  <div class="page">
    <p>Bug Kernel Component Detector</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash</p>
    <p>B Linux</p>
    <p>Crash</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic</p>
    <p>D FreeBSD</p>
    <p>Diverse properties</p>
  </div>
  <div class="page">
    <p>Bug Kernel Component Detector</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash</p>
    <p>B Linux</p>
    <p>Crash</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic</p>
    <p>D FreeBSD</p>
  </div>
  <div class="page">
    <p>Bug Kernel Component Detector</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash</p>
    <p>B Linux</p>
    <p>Crash</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic</p>
    <p>D FreeBSD</p>
    <p>SKI is portable</p>
  </div>
  <div class="page">
    <p>SKI</p>
    <p>Bug Kernel Component Detector Schedules Throughput</p>
    <p>(sched/h)</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash 28 302,000</p>
    <p>B Linux</p>
    <p>Crash 53 169,300</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic 51 218,700</p>
    <p>D FreeBSD</p>
  </div>
  <div class="page">
    <p>SKI</p>
    <p>Bug Kernel Component Detector Schedules Throughput</p>
    <p>(sched/h)</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash 28 302,000</p>
    <p>B Linux</p>
    <p>Crash 53 169,300</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic 51 218,700</p>
    <p>D FreeBSD</p>
    <p>SKI can expose bugs in seconds</p>
  </div>
  <div class="page">
    <p>SKI Stress tests</p>
    <p>Bug Kernel Component Detector Schedules Throughput</p>
    <p>(sched/h) Schedules</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash 28 302,000 NA (&gt;24h)</p>
    <p>B Linux</p>
    <p>Crash 53 169,300 200,000 (4h)</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic 51 218,700 800 (1 min)</p>
    <p>D FreeBSD</p>
  </div>
  <div class="page">
    <p>SKI Stress tests</p>
    <p>Bug Kernel Component Detector Schedules Throughput</p>
    <p>(sched/h) Schedules</p>
    <p>A Linux 2.6.28</p>
    <p>Anonymous pipes</p>
    <p>Crash 28 302,000 NA (&gt;24h)</p>
    <p>B Linux</p>
    <p>Crash 53 169,300 200,000 (4h)</p>
    <p>C Linux 3.6.1</p>
    <p>Proc + Ext4 Semantic 51 218,700 800 (1 min)</p>
    <p>D FreeBSD</p>
    <p>Some stress tests were inefective</p>
  </div>
  <div class="page">
    <p>Created a SKI test suit for fle systems</p>
    <p>Adapted the existing fsstress test suit</p>
    <p>Tested several fle systems</p>
    <p>Bug detectors</p>
    <p>Crashes, warnings, data races, semantic errors (fsck)</p>
    <p>Tested recent versions of Linux</p>
  </div>
  <div class="page">
    <p>Bug Linux FS Detector / Failure Status</p>
  </div>
  <div class="page">
    <p>Bug Linux FS Detector / Failure Status</p>
    <p>Ofcial Linux releases</p>
  </div>
  <div class="page">
    <p>Bug Linux FS Detector / Failure Status</p>
    <p>Requested by developers</p>
  </div>
  <div class="page">
    <p>Bug Linux FS Detector / Failure Status</p>
    <p>Important fle systems</p>
  </div>
  <div class="page">
    <p>Bug Linux FS Detector / Failure Status</p>
    <p>Data loss</p>
  </div>
  <div class="page">
    <p>Current limitations and future work</p>
  </div>
  <div class="page">
    <p>Current limitations and future work</p>
    <p>Bugs in kernel scheduler code</p>
    <p>SKI pins tested threads</p>
    <p>Represent a small set of bugs</p>
  </div>
  <div class="page">
    <p>Current limitations and future work</p>
    <p>Bugs in kernel scheduler code</p>
    <p>SKI pins tested threads</p>
    <p>Represent a small set of bugs</p>
    <p>Bugs in device drivers</p>
    <p>SKI supports a large set of devices but not all</p>
    <p>Implement SKI with binary instrumentation techniques</p>
  </div>
  <div class="page">
    <p>Current limitations and future work</p>
    <p>Bugs in kernel scheduler code</p>
    <p>SKI pins tested threads</p>
    <p>Represent a small set of bugs</p>
    <p>Bugs in device drivers</p>
    <p>SKI supports a large set of devices but not all</p>
    <p>Implement SKI with binary instrumentation techniques</p>
    <p>Bugs that depend on weak memory models</p>
    <p>SKI currently implements a strong memory model</p>
    <p>Generalize SKI to also expose these bugs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Full control of the kernel interleavings</p>
    <p>SKI is Systematic</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>No modifcations to the kernel</p>
    <p>SKI is Practical</p>
    <p>Full control of the kernel interleavings</p>
    <p>SKI is Systematic</p>
    <p>Conclusion</p>
    <p>Fast</p>
  </div>
  <div class="page">
    <p>+</p>
    <p>Finds and reproduces real-world kernel concurrency bugs</p>
    <p>SKI is Efective</p>
    <p>No modifcations to the kernel</p>
    <p>SKI is Practical</p>
    <p>Full control of the kernel interleavings</p>
    <p>SKI is Systematic</p>
    <p>Conclusion</p>
    <p>Fast</p>
  </div>
</Presentation>
