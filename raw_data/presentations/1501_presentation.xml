<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Non-Blocking Writes to Files</p>
    <p>Daniel Campello, Hector Lopez, Luis Useche1, Ricardo Koller2, and Raju Rangaswami</p>
  </div>
  <div class="page">
    <p>Applications have different alternatives to persist data</p>
    <p>Synchrony vs Asynchrony</p>
    <p>Process</p>
    <p>Page Cache</p>
    <p>Backend Storage</p>
    <p>Process</p>
    <p>Kernel Thread</p>
    <p>Page Cache</p>
    <p>Backend Storage</p>
    <p>Synchronous Writes Asynchronous Writes</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
  </div>
  <div class="page">
    <p>Memory access granularity is smaller than disks  Partial writes to pages not present in the cache</p>
    <p>require page fetch.</p>
    <p>Introduction</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>Page Cache</p>
    <p>Why wait for data that the application doesnt need?</p>
  </div>
  <div class="page">
    <p>Motivation: Breakdown of write operations</p>
    <p>On an average, 63.12% of the writes involved partial page overwrites.</p>
    <p>Depending of page cache size, these overwrites could result in varying degrees of page fetches.</p>
    <p>% o</p>
    <p>f W</p>
    <p>ri te</p>
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s</p>
    <p>Types of Page Writes (%)</p>
    <p>No overwrite; write is to a new page</p>
    <p>Overwrite; multiple of 4 KB aligned</p>
    <p>Overwrite; &gt;= 4 KB unaligned</p>
    <p>Overwrite; &lt; 4 KB</p>
  </div>
  <div class="page">
    <p>Motivation: LRU Cache Simulation</p>
    <p>P a</p>
    <p>rt ia</p>
    <p>l O</p>
    <p>v e</p>
    <p>rW</p>
    <p>ri te</p>
    <p>s to</p>
    <p>O u</p>
    <p>to</p>
    <p>fco</p>
    <p>re P</p>
    <p>a g</p>
    <p>e (</p>
    <p>% )</p>
    <p>Page cache size (MB)</p>
    <p>ug-filesrv</p>
    <p>gsf-filesrv</p>
    <p>moodle</p>
    <p>backup</p>
    <p>usr1</p>
    <p>usr2</p>
    <p>facebook</p>
    <p>twitter</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Asynchronous Fetch</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>Page Cache PatchPatchPatch</p>
    <p>Benefits: 1. Application execution time reduction 2. Increased backing store bandwidth usage</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Asynchronous Fetch</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>Page Cache PatchPatchPatch</p>
    <p>Why issue a page fetch for data that the application doesnt need?</p>
  </div>
  <div class="page">
    <p>Non-blocking Writes: Lazy Fetch</p>
    <p>Benefits and Drawbacks: 1. Allocating page memory and fetching only if necessary 2. Resource utilization is unpredictable and can be bursty</p>
    <p>Process OS</p>
    <p>Backing Store</p>
    <p>PatchPatchPatch</p>
    <p>Page Cache</p>
  </div>
  <div class="page">
    <p>Managing Page Fetches</p>
    <p>Page Fetch Policies</p>
    <p>Asynchronous</p>
    <p>Lazy</p>
    <p>Page Fetch Mechanisms</p>
    <p>Foreground</p>
    <p>Background</p>
  </div>
  <div class="page">
    <p>Metadata misses generate extra blocking fetches</p>
    <p>Foreground vs Background Mechanisms</p>
    <p>Process</p>
    <p>Page Cache</p>
    <p>Backend Storage</p>
    <p>Process</p>
    <p>NBW Thread</p>
    <p>Page Cache</p>
    <p>Backend Storage</p>
    <p>Foreground Background</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>We found this problem in other OSes (FreeBSD, Xen)</p>
    <p>We implemented non-blocking writes for files in the Linux kernel by modifying the generic virtual file system (VFS) layer</p>
    <p>Workloads</p>
    <p>Filebench micro-benchmark</p>
    <p>SPECsfs2008 benchmark</p>
    <p>Mobibench system call trace-replay</p>
    <p>Evaluation Specifics</p>
  </div>
  <div class="page">
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s</p>
    <p>/ se</p>
    <p>co n</p>
    <p>d</p>
    <p>Size of operation (bytes)</p>
    <p>Random Writes</p>
    <p>BW</p>
    <p>NBW-Async-FG</p>
    <p>NBW-Async-BG</p>
    <p>NBW-Lazy</p>
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s</p>
    <p>/ se</p>
    <p>co n</p>
    <p>d</p>
    <p>Size of operation (bytes)</p>
    <p>Random Read-Write</p>
    <p>Filebench evaluation: Writes and Read-Writes</p>
    <p>NBW-Async-FG: 50-60% performance improvement for Random Writes</p>
  </div>
  <div class="page">
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s</p>
    <p>/ se</p>
    <p>co n</p>
    <p>d</p>
    <p>Size of operation (bytes)</p>
    <p>Random Writes</p>
    <p>BW</p>
    <p>NBW-Async-FG</p>
    <p>NBW-Async-BG</p>
    <p>NBW-Lazy</p>
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s</p>
    <p>/ se</p>
    <p>co n</p>
    <p>d</p>
    <p>Size of operation (bytes)</p>
    <p>Random Read-Write</p>
    <p>Filebench evaluation: Writes and Read-Writes</p>
    <p>NBW-Async-FG: 50-60% performance improvement for Random Writes</p>
    <p>NBW-Async-BG: 6.7x-30x (Random Writes) and 3.4x-20x (Random RW)</p>
    <p>NBW-Lazy: Up to 45x performance improvement</p>
  </div>
  <div class="page">
    <p>Filebench evaluation: Reads</p>
    <p>Non-blocking writes do not affect the performance of read-only workloads</p>
    <p>O p</p>
    <p>e ra</p>
    <p>ti o</p>
    <p>n s</p>
    <p>/ se</p>
    <p>co n</p>
    <p>d</p>
    <p>Size of operation (bytes)</p>
    <p>Random Reads</p>
    <p>BW</p>
    <p>NBW-Async-FG</p>
    <p>NBW-Async-BG</p>
    <p>NBW-Lazy</p>
  </div>
  <div class="page">
    <p>SPECsfs2008 evaluation</p>
    <p>Write (10%) Read (18%) Others (72%) Overall (100%)</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>SPECsfs2008</p>
    <p>BW</p>
    <p>NBW-Async-FG</p>
    <p>NBW-Async-BG</p>
    <p>NBW-Lazy</p>
    <p>Around 70% write latency decrease</p>
    <p>NBW-Lazy read latency slightly affected by delayed fetching</p>
    <p>Overall latency is in direct relation to write and read latency</p>
  </div>
  <div class="page">
    <p>Mobibench System-call Trace Replay</p>
    <p>Average operation latency decreased by 20-40%</p>
    <p>Facebook Twitter</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>Mobibench HDD</p>
    <p>BW</p>
    <p>NBW-Async-FG</p>
    <p>NBW-Async-BG</p>
    <p>NBW-Lazy</p>
    <p>Facebook Twitter</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>Mobibench SSD</p>
  </div>
  <div class="page">
    <p>Huge body of work on optimizing writes performance</p>
    <p>O_NONBLOCK flag for OPEN system call</p>
    <p>If no data can be read or written, returns EAGAIN (or EWOULDBLOCK)</p>
    <p>Requires application modification</p>
    <p>Asynchronous I/O Library (POSIX AIO)</p>
    <p>Multiple threads to perform I/O operations (expensive and scales poorly)</p>
    <p>Requires application modification</p>
    <p>Related Work</p>
    <p>Non-blocking writes do not require application</p>
    <p>modification</p>
  </div>
  <div class="page">
    <p>Operating systems block processes on asynchronous writes in many cases!</p>
    <p>With non-blocking writes, we demonstrate that such blocking is unnecessary and detrimental to performance</p>
    <p>General solution for any kind of modern OS</p>
    <p>Does not require application modification</p>
    <p>Evaluation demonstrated how non-blocking writes effectively reduces write latency across a wide range of workloads</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>The traces used in this paper are available at http://sylab-srv.cs.fiu.edu/dokuwiki/</p>
    <p>doku.php?id=projects:nbw:start</p>
  </div>
  <div class="page">
    <p>Page Fetch Asynchrony</p>
    <p>Blocking write</p>
    <p>Time</p>
    <p>Waiting I/O: Thinking:</p>
    <p>Write P Read P</p>
    <p>Non-blocking write</p>
    <p>Write P Read P</p>
  </div>
  <div class="page">
    <p>Page Fetch Parallelism</p>
    <p>Blocking write</p>
    <p>Time</p>
    <p>Blocking I/O: Background I/O:</p>
    <p>Write P Write Q Read P</p>
    <p>Non-blocking write</p>
    <p>Write P</p>
    <p>Write Q</p>
    <p>Read P</p>
  </div>
  <div class="page">
    <p>Production system trace descriptions</p>
    <p>Motivation: Production workloads</p>
    <p>Workload Description</p>
    <p>ug-filserv Undergrad NFS/CIFS fileserver</p>
    <p>gsf-filesrv Grad/Staff/Faculty NFS/CIFS fileserver</p>
    <p>moodle Web &amp; DB server for department CMS</p>
    <p>backup Nightly backups of department servers</p>
    <p>usr1 Researcher 1 desktop</p>
    <p>usr2 Researcher 2 desktop</p>
    <p>facebook Mobibench facebook trace</p>
    <p>twitter Mobibench twitter trace</p>
  </div>
  <div class="page">
    <p>Ordering of page updates</p>
    <p>Handling of disk errors</p>
    <p>Journaling File Systems</p>
    <p>OS-initiated page accesses</p>
    <p>Page persistence and syncs</p>
    <p>Handling read-write dependencies</p>
    <p>Multi-core and kernel preemption</p>
    <p>Highlights On Correctness</p>
  </div>
</Presentation>
