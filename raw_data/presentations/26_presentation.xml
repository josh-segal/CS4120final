<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TaintScope: A Checksum-Aware</p>
    <p>Directed Fuzzing Tool for Automatic</p>
    <p>Software Vulnerability Detection</p>
    <p>Tielei Wang 1 , Tao Wei</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Background</p>
    <p>Motivation</p>
    <p>TaintScope</p>
    <p>Intuition</p>
    <p>System Design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>Fuzzing/Fuzz Testing</p>
    <p>Feed target applications with malformed inputs e.g., invalid, unexpected, or random test cases</p>
    <p>Proven to be remarkably successful</p>
    <p>E.g., randomly mutate well-formed inputs and runs the target application with the mutationsthe target application with the mutations</p>
    <p>ApplicationFuzzer crash</p>
    <p>Malformed Input</p>
  </div>
  <div class="page">
    <p>Fuzzing is great</p>
    <p>In the best case, malformed inputs will explore different program paths, and trigger security vulnerabilities</p>
    <p>However</p>
    <p>Introduction TaintScope Conclusion</p>
    <p>security vulnerabilities</p>
  </div>
  <div class="page">
    <p>A quick example</p>
    <p>re-compute a new checksum</p>
    <p>read the attached checksum</p>
    <p>Malformed images will be dropped when the decoder function detects checksums mismatch</p>
    <p>compare tow values</p>
    <p>Introduction TaintScope Conclusion</p>
  </div>
  <div class="page">
    <p>Checksum: the bottleneck</p>
    <p>Checksum is a common way to test the integrity of input data</p>
    <p>Most mutations are blocked at the checksum test point</p>
    <p>if(checksum(Data)!= Chksum)</p>
  </div>
  <div class="page">
    <p>Our motivation</p>
    <p>Penetrate checksum checks!</p>
    <p>Our Goal</p>
    <p>Our Goal</p>
    <p>Introduction TaintScope Conclusion</p>
  </div>
  <div class="page">
    <p>Intuition</p>
    <p>Disable checksum checks by control flow alteration</p>
    <p>if(checksum(Data)!= Chksum) goto L1; exit();</p>
    <p>L1:</p>
    <p>Fuzz the modified program</p>
    <p>Repair the checksum fields in malformed inputs that can crash the modified program</p>
    <p>L1: continue();</p>
    <p>Original programModified program</p>
    <p>Introduction TaintScope Conclusion</p>
  </div>
  <div class="page">
    <p>Key Questions</p>
    <p>Q1: How to locate the checksum test instructions in a binary program?</p>
    <p>Q2: How to effectively and efficiently fuzz for security vulnerability detection?security vulnerability detection?</p>
    <p>Q3: How to generate the correct checksum value for the invalid inputs that can crash the modified program?</p>
  </div>
  <div class="page">
    <p>TaintScope Overview</p>
    <p>Checksum Locator</p>
    <p>Directed Fuzzer</p>
    <p>Checksum Repairer</p>
    <p>Modified Program</p>
    <p>Crashed Samples</p>
    <p>Q1 Q2 Q3</p>
    <p>Execution Monitor</p>
    <p>Locator Fuzzer Repairer</p>
    <p>Hot Bytes Info Instruction</p>
    <p>Profile</p>
    <p>Reports</p>
  </div>
  <div class="page">
    <p>A1: Locate the checksum test instruction</p>
    <p>Checksum is usually used to protect a large number of input bytes</p>
    <p>Data Chksum</p>
    <p>Key Observation 1</p>
    <p>if(checksum(Data) != Chksum)</p>
    <p>Based on fine-grained taint analysis, we first find the conditional jump instructions (e.g., jz, je) that depend on more than a certain number of input bytes</p>
    <p>Take these conditional jump instructions as candidates</p>
  </div>
  <div class="page">
    <p>A1: Locate the checksum test instruction</p>
    <p>Key Observation 2</p>
    <p>Well-formed inputs can pass the checksum test, but most malformed inputs cannot</p>
    <p>We log the behaviors of candidate conditional jump instructions</p>
    <p>conditional jump instructions</p>
  </div>
  <div class="page">
    <p>A1: Locate the checksum test instruction</p>
    <p>Key Observation 2</p>
    <p>Well-formed inputs can pass the checksum test, but most malformed inputs cannot</p>
    <p>We log the behaviors of candidate conditional jump instructions</p>
    <p>conditional jump instructions</p>
    <p>Run well-formed inputs, identify the always-taken and always-not-taken insts</p>
  </div>
  <div class="page">
    <p>A1: Locate the checksum test instruction</p>
    <p>Key Observation 2</p>
    <p>Well-formed inputs can pass the checksum test, but most malformed inputs cannot</p>
    <p>We log the behaviors of candidate conditional jump instructions</p>
    <p>conditional jump instructions</p>
    <p>Run well-formed inputs, identify the always-taken and always-not-taken insts</p>
    <p>Run malformed inputs, also identify the always-taken and always-not-taken insts</p>
  </div>
  <div class="page">
    <p>A1: Locate the checksum test instruction</p>
    <p>Key Observation 2</p>
    <p>Well-formed inputs can pass the checksum test, but most malformed inputs cannot</p>
    <p>We log the behaviors of candidate conditional jump instructions</p>
    <p>conditional jump instructions</p>
    <p>Run well-formed inputs, identify the always-taken and always-not-taken insts</p>
    <p>Run malformed inputs, also identify the always-taken and always-not-taken insts</p>
    <p>Identify the conditional jump inst that behaves completely different when processing well-formed and malformed inputs</p>
  </div>
  <div class="page">
    <p>A2: Effective and efficient fuzzing  Blindly mutating will create huge amount of redundant test</p>
    <p>cases --- ineffective and inefficient</p>
    <p>... 6 if(chksum_in_file != recomputed_chksu</p>
    <p>goto 8; 7 error();</p>
    <p>Directly modifying width or height&quot; fields will trigger the bug easily</p>
    <p>Directed fuzzing: focus on modifying the hot bytes that refer to the input bytes flow into critical system/library calls</p>
    <p>Memory allocation, string operation</p>
  </div>
  <div class="page">
    <p>A3: Generate the correct checksum</p>
    <p>The classical solution is symbolic execution and constraint solving</p>
    <p>Solving checksum(Data)== Chksum is hard or</p>
    <p>impossible, if both Data andChksum are symbolic values</p>
    <p>We use combined concrete/symbolic execution  Only leave the bytes in the checksum field as symbolic values</p>
    <p>Collect and solve the trace constraints on Chksum when reaching the checksum test inst.</p>
    <p>Note that:</p>
    <p>checksum(Data) is a runtime determinable constant value.</p>
    <p>Chksum originates from the checksum field, but may be transformed, such as from hex/oct to dec number, from little-endian to big-endian.</p>
  </div>
  <div class="page">
    <p>Design Summary</p>
    <p>Directed Fuzzing</p>
    <p>Identify and modify hot bytes in valid inputs to generate malformed inputs  On top of PIN binary instrumentation platform</p>
    <p>Checksum-aware Fuzzing Checksum-aware Fuzzing</p>
    <p>Locate checksum check points and checksum fields.</p>
    <p>Modify the program to accept all kinds input data</p>
    <p>Generate correct checksum fields for malformed inputs that can crash the modified program  Offline symbolically execute the trace, using STP solver</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Component evaluation</p>
    <p>E1: Whether TaintScope can locate checksum points and checksum fields?</p>
    <p>E2: How many hot byte in a valid input?</p>
    <p>E3: Whether TaintScope can generate a correct  E3: Whether TaintScope can generate a correct checksum field?</p>
    <p>Overall evaluation</p>
    <p>E4: Whether TaintScope can detect previous unknown vulnerabilities in real-world applications?</p>
  </div>
  <div class="page">
    <p>Evaluation 1: locate checksum points</p>
    <p>We test several common checksum algorithms, including CRC32, MD5, Adler32. TaintScope accurately located the check statements.</p>
  </div>
  <div class="page">
    <p>Evaluation 2: identify hot bytes</p>
    <p>We measured the number of bytes could affect the size arguments in memory allocation functions</p>
  </div>
  <div class="page">
    <p>Evaluation 3: generate correct checksum fields</p>
    <p>We test malformed inputs in four kinds of file formats.</p>
    <p>TaintScope is able to generate correct checksum fields.</p>
  </div>
  <div class="page">
    <p>Evaluation 4 : 27 previous unknown vulns</p>
    <p>MS Paint Google Picasa Adobe Acrobat ImageMagick</p>
    <p>irfanview gstreamer Winamp XEmacs</p>
    <p>Amaya dillo wxWidgets PDFlib</p>
  </div>
  <div class="page">
    <p>Evaluation 4 : 27 previous unknown vulns</p>
  </div>
  <div class="page">
    <p>Evaluation 4: 27 previous unknown vulns</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Checksum is a big challenge for fuzzing tools</p>
    <p>TaintScope can perform:</p>
    <p>Directed fuzzing  Identify which bytes flow into system/library calls.</p>
    <p>dramatically reduce the mutation space. dramatically reduce the mutation space.</p>
    <p>Checksum-aware fuzzing  Disable checksum checks by control flow alternation.</p>
    <p>Generate correct checksum fields in invalid inputs.</p>
    <p>TaintScope detected dozens of serious previous unknown vulnerabilities.</p>
  </div>
  <div class="page">
    <p>Thanks for your attention!</p>
  </div>
</Presentation>
