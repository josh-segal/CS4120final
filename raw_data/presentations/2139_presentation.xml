<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards High-Performance Application-Level</p>
    <p>Storage Management</p>
    <p>Simon Peter, Jialin Li, Doug Woos, Irene Zhang, Dan R. K. Ports, Arvind Krishnamurthy,</p>
    <p>Thomas Anderson, Mark Zbikowski</p>
    <p>University of Washington</p>
    <p>Funded in part by NetApp, Google</p>
  </div>
  <div class="page">
    <p>Talk Overview</p>
    <p>Dramatic increase in storage I/O performance</p>
    <p>PCIe-attached flash</p>
    <p>Problem: OS storage stack becomes I/O bottleneck  Shared stack -&gt; high overhead per I/O op</p>
    <p>Solution: Application-level storage architecture  Optimize storage stacks for each application</p>
    <p>Assume storage devices remain on peripheral bus</p>
    <p>How to structure OS &amp; hardware?</p>
  </div>
  <div class="page">
    <p>Problem: Storage I/O Performance</p>
    <p>Storage performance matters  Web servers  File servers  Key-value stores  Persistent lock managers</p>
    <p>Storage performance is improving  PCIe attached flash  Flash-backed caching RAID controllers</p>
    <p>CPU frequencies have stalled</p>
    <p>File system code expensive to run on CPU</p>
  </div>
  <div class="page">
    <p>ext2 ext3 ext4 btrfs</p>
    <p>System call duration [us]</p>
    <p>fsync</p>
    <p>write</p>
    <p>File system CPU overheads (writing 1K, then fsync)</p>
    <p>= 25ms = 1ms</p>
  </div>
  <div class="page">
    <p>Todays Storage Stack</p>
    <p>Application</p>
    <p>Filesystem (block management)</p>
    <p>User-level</p>
    <p>Kernel</p>
    <p>HAL &amp; I/O scheduler</p>
    <p>Driver</p>
    <p>VFS (name management)</p>
    <p>Application</p>
    <p>Buffer cache Data Path</p>
    <p>POSIX API</p>
    <p>Shared</p>
    <p>Very general</p>
    <p>Low-level</p>
  </div>
  <div class="page">
    <p>Our Storage Architecture</p>
    <p>Storage stack (block mgmt &amp; cache)</p>
    <p>Application Application</p>
    <p>User-level</p>
    <p>VFS &amp; Space mgmt</p>
    <p>Kernel</p>
    <p>Driver (HAL)</p>
    <p>Storage stack (block mgmt &amp; cache)</p>
    <p>Driver (HAL)</p>
    <p>High-level API</p>
    <p>Hardware Virtualized Storage Controllers</p>
    <p>App specific Off</p>
    <p>data path</p>
  </div>
  <div class="page">
    <p>Storage Hardware Model</p>
    <p>Virtual storage devices  Protected command/DMA queues, interrupts</p>
    <p>Can be provided by current technology</p>
    <p>Virtual storage areas (VSAs)  At least 1 per application</p>
    <p>Map to physical storage extents</p>
    <p>Protected in hardware</p>
    <p>Both managed by kernel</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Storage Hardware Model: Example</p>
    <p>Kernel</p>
    <p>Flash memory</p>
    <p>Free space Free space</p>
    <p>Free space</p>
    <p>Used</p>
    <p>Used</p>
    <p>VSA</p>
    <p>Free space</p>
    <p>create_vsa(1G)</p>
    <p>HW ops</p>
  </div>
  <div class="page">
    <p>VSA VSA</p>
    <p>/tmp/lockfile</p>
    <p>/var/lib/key_value.db</p>
    <p>/etc/config.rc</p>
    <p>Global File Name Resolution</p>
    <p>Kernel</p>
    <p>Application</p>
    <p>open(/etc/config.rc)</p>
    <p>Application HW ops</p>
  </div>
  <div class="page">
    <p>High-Level API: Persistent Data Structures</p>
    <p>Examples: log, queue, hash table, tree</p>
    <p>Operations immediately persistent  To flash memory on storage peripheral</p>
    <p>Goals:</p>
    <p>Scalability</p>
    <p>Robustness vs. crashes</p>
    <p>Low operation latency</p>
  </div>
  <div class="page">
    <p>Prototype Implementation</p>
    <p>In Arrakis OS  Has similar architecture for the network</p>
    <p>User-level device driver for Intel RS3 RAID controller</p>
    <p>Library of persistent data-structures  Persistent log</p>
  </div>
  <div class="page">
    <p>Evaluation: Redis NoSQL Store</p>
    <p>Redis logs operations to disk</p>
    <p>Modified to use TenaciousD log  109 LOC changed</p>
    <p>Redis-benchmark  SET workload</p>
    <p>64K keys</p>
    <p>1K value size</p>
    <p>Compare to Linux on ext4  Server-sided performance</p>
  </div>
  <div class="page">
    <p>Evaluation: Redis NoSQL Store</p>
    <p>Throughput [K transactions/s]</p>
    <p>SET operations</p>
    <p>Cut SET latency by 81% (163 -&gt; 31 us)</p>
    <p>Intel RS3 [25us]</p>
    <p>Intel RS3 [25us]</p>
    <p>ioDrive2 [15us]</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>New low-latency storage hardware</p>
    <p>Problem: Shared storage stack becomes bottleneck</p>
    <p>Arrakis: New OS storage architecture  HW/SW co-design</p>
    <p>Application-level storage eliminates I/O bottleneck  9x speedup for Redis</p>
    <p>Scales with CPUs &amp; storage HW performance</p>
    <p>http://arrakis.cs.washington.edu</p>
  </div>
</Presentation>
