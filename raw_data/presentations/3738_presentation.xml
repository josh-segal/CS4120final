<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NetWarden: Mitigating Network Covert Channels while Preserving Performance</p>
    <p>Jiarong Xing, Qiao Kang, Ang Chen</p>
    <p>Rice University</p>
  </div>
  <div class="page">
    <p>Motivation: Mitigating network covert channels</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>Code is 1011</p>
    <p>Ah! 1011</p>
    <p>Attacker</p>
    <p>Launch code</p>
  </div>
  <div class="page">
    <p>Motivation: Mitigating network covert channels</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>Ah! 1011</p>
    <p>Attacker</p>
    <p>Launch code</p>
    <p>Covert channels:</p>
    <p>TCP hdr: 1011</p>
    <p>H E L L O</p>
    <p>Storage channels: changing the packet header fields.</p>
  </div>
  <div class="page">
    <p>Motivation: Mitigating network covert channels</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>Ah! 1011</p>
    <p>Attacker</p>
    <p>Launch code</p>
    <p>Covert channels:</p>
    <p>TCP hdr: 1011</p>
    <p>H E L L O</p>
    <p>H E L L O</p>
    <p>Storage channels: changing the packet header fields.</p>
    <p>Timing channels: changing the timing of packets.</p>
  </div>
  <div class="page">
    <p>Covert channels are a difficult problem</p>
    <p>Detection is difficult due to non-determinism  Protocols fields, e.g., TCP initial sequence numbers  Protocol events, e.g., inter-packet gaps</p>
    <p>Mitigation is difficult due to high traffic volume  Operate on every packet of Tbps traffic</p>
    <p>TCP ISN: 1011</p>
    <p>H E L L O</p>
    <p>A malicious packet</p>
    <p>A normal packet</p>
    <p>H E L L O</p>
    <p>Malicious timing</p>
    <p>Normal timing</p>
  </div>
  <div class="page">
    <p>State of the art</p>
    <p>replace (+2)</p>
    <p>SeqNo = a replace (+2)</p>
    <p>SeqNo = a +2</p>
    <p>SeqNo = b replace (+2)</p>
    <p>SeqNo = b +2</p>
    <p>SeqNo = c replace (+2)</p>
    <p>SeqNo = c +2</p>
    <p>SeqNo = d replace (+2) SeqNo = d +2</p>
    <p>Many defenses have been proposed:  ISN storage channel:</p>
    <p>Add the same offset to TCP sequence numbers</p>
    <p>IP timing channel:  Add random delays to destroy original timing</p>
    <p>TCP sender</p>
    <p>TCP ISN: 1011</p>
    <p>H E L L O</p>
    <p>With channel:</p>
    <p>After mitigating:</p>
    <p>H E L L O</p>
    <p>H E L L O</p>
    <p>TCP sender</p>
    <p>TCP ISN: 1101</p>
    <p>H E L L O</p>
  </div>
  <div class="page">
    <p>Common problem: Performance penalty</p>
    <p>Per-packet operation running in software is very inefficient  Switches have to handle Tbps traffic</p>
    <p>Incur extra delay to TCP connections  Many flows are delay sensitive</p>
    <p>Not practical for deployment!</p>
  </div>
  <div class="page">
    <p>Key question</p>
    <p>Can we mitigate covert channels while preserving performance?</p>
  </div>
  <div class="page">
    <p>New opportunity: Programmable switches</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
    <p>ALU Match/ Action Table</p>
    <p>Match/ Action Table</p>
    <p>Match/ Action Table</p>
    <p>Programmable Parser</p>
    <p>Programmable Deparser</p>
    <p>Switch control plane</p>
    <p>PCIe bus</p>
    <p>Stages Stages</p>
    <p>Programmable switches  Can be programmed in high-level languages (e.g., P4)  Run at linespeed (Tbps)  Widely used in network community:</p>
    <p>SilkRoad-Sigcomm17, Speedlight-Sigcomm18, Blink-NSDI19, Contra-NSDI20, etc.</p>
    <p>An ideal candidate for covert channel defenses!</p>
  </div>
  <div class="page">
    <p>NetWarden: A programmable switch defense</p>
    <p>NetWarden mitigates covert channels while preserving performance.</p>
    <p>Covert channels Normal traffic</p>
    <p>NetWarden</p>
    <p>A programmable switch</p>
  </div>
  <div class="page">
    <p>Key features</p>
    <p>NetWarden</p>
    <p>Effective defenses Defend against a wide range</p>
    <p>of covert channels</p>
    <p>High throughput ~100Gbps per switch port</p>
    <p>Performance preservation Great transparency &lt; 1% performance deviation Totally transparent to end hosts</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>- Motivation: Mitigating network covert channels</p>
    <p>- State of the art: Performance penalty</p>
    <p>- Approach: NetWarden</p>
    <p>- NetWarden design</p>
    <p>- Challenge #1: Limited programming model</p>
    <p>- Challenge #2: Performance preservation</p>
    <p>- Evaluation</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Solution: hardware/software co-design principle.</p>
    <p>Challenge #1: Limited programming model</p>
  </div>
  <div class="page">
    <p>M e</p>
    <p>m o</p>
    <p>ry</p>
    <p>ALU Match/ Action Table</p>
    <p>Match/ Action Table</p>
    <p>Match/ Action Table</p>
    <p>Switch control plane</p>
    <p>PCIe bus</p>
    <p>Stages Stages</p>
    <p>Data plane  Header modification, ns timestamp, per-flow state, line speed  Limited memory, limited arithmetic computation</p>
    <p>Control plane  Abundant memory, complex arithmetic computation  Software speed, make the circle disappear</p>
    <p>Complementary!</p>
    <p>Programmable switch anatomy</p>
  </div>
  <div class="page">
    <p>Applying the hardware/software co-design principle</p>
    <p>Switch data plane</p>
    <p>Switch control plane</p>
    <p>Computation: Per-packet operations  Memory: Constant state</p>
    <p>Computation: Batch operations  Memory: Growing state</p>
    <p>Minimize crosstalk</p>
  </div>
  <div class="page">
    <p>Applying the hardware/software co-design principle</p>
    <p>Switch data plane</p>
    <p>Switch control plane</p>
    <p>Statistical testsPacket caching</p>
    <p>RTT measurement</p>
    <p>IPD maintenance</p>
    <p>Header modification</p>
    <p>Per-flow state maintenance</p>
  </div>
  <div class="page">
    <p>Challenge #2: Performance preservation</p>
    <p>Problem: Existing mitigations incur performance loss.  Takeaway: Create the illusion of the same RTT for the sender.</p>
    <p>Extra delay</p>
  </div>
  <div class="page">
    <p>Solution: Performance boosters</p>
    <p>ACK booster Receiving window booster</p>
    <p>ACK booster  Maintain the same RTT by generating ACK packets in advance.</p>
    <p>Receiving window booster  Send more data per RTT by enlarging the receiving window size.</p>
  </div>
  <div class="page">
    <p>Performance preservation: ACK booster</p>
    <p>NetWarden</p>
    <p>Creates the illusion of the same RTT as perceived by the sender.</p>
    <p>Retransmission</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>- Motivation: Mitigating network covert channels</p>
    <p>- State of the art: Performance penalty</p>
    <p>- Approach: NetWarden</p>
    <p>- NetWarden design</p>
    <p>- Challenge #1: Limited programming model</p>
    <p>- Challenge #2: Performance preservation</p>
    <p>- Evaluation</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>NetWarden prototype:  Runs in Tofino Wedge 100BF-32X switch.  2500 LoC of P4 + 3000 LoC of C+Python</p>
    <p>Threat model:  A compromised server + a trusted P4 switch running NetWarden  Leak a 2048-bit RSA key via covert channel.</p>
    <p>Real world applications:  Apache servers, FTP servers, Nodejs servers</p>
    <p>Baseline:  No defense: No covert channel defenses are deployed.  Nave defense: Covert channel defenses without performance preservation</p>
  </div>
  <div class="page">
    <p>How effective is NetWarden in covert channels mitigation ?</p>
    <p>Nave defense: renders decoding to a random guess.</p>
    <p>NetWarden: very close to a random guess.</p>
  </div>
  <div class="page">
    <p>Nave defense incurs 25% performance penalty.</p>
    <p>NetWarden only has 1% performance deviation.</p>
    <p>How well does NetWarden preserve performance?</p>
    <p>No defense Naive</p>
    <p>No defense NetWarden Naive</p>
  </div>
  <div class="page">
    <p>See more evaluation results in our paper</p>
    <p>Different TCP variantsSystem scalability System overhead</p>
    <p>Complex Applications Self-defense techniques</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>- Motivation: Mitigating network covert channels</p>
    <p>- State of the art: Performance penalty</p>
    <p>- Approach: NetWarden</p>
    <p>- NetWarden design</p>
    <p>- Challenge #1: Limited programming model</p>
    <p>- Challenge #2: Performance preservation</p>
    <p>- Evaluation</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Motivation: Mitigating network covert channels  Key limitation of existing approaches:</p>
    <p>Performance penalty</p>
    <p>Our approach: NetWarden  Principles of hardware/software co-design  Efficient defenses  Performance preservation</p>
    <p>Evaluation:  Mitigates covert channels with minimum performance loss!</p>
    <p>Source code: https://github.com/jiarong0907/NetWarden  Looking for internship in 2021 summer!</p>
    <p>Questions?</p>
  </div>
</Presentation>
