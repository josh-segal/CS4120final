<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NetCheck: Network Diagnoses from Blackbox Traces</p>
    <p>Yanyan Zhuang*^, Eleni Gessiou*, Fraida Fund*, Steven Portzer@, Monzur Muhammad^,</p>
    <p>Ivan Beschastnikh^, Justin Cappos* !</p>
    <p>(*)New York University, (^)University of British Columbia, (@)University of Washington</p>
  </div>
  <div class="page">
    <p>Find bugs in networked applications  Large complex unknown applications ! ! !</p>
    <p>Large complex unknown networks ! ! !</p>
    <p>Understandable output / fix</p>
    <p>Goal</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client probing ping</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client Different traffic (ICMP) Often different result</p>
    <p>probing ping</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client packet capture</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client packet capture</p>
    <p>Requires detailed protocol / app knowledge</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
    <p>Model Model apps Magpie, Xtrace,</p>
    <p>Pip...Model</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
    <p>Model Model</p>
    <p>Need a model per application</p>
    <p>Model apps Magpie, Xtrace,</p>
    <p>Pip...</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
  </div>
  <div class="page">
    <p>Motivation Chrome Client</p>
    <p>Network Config Analysis</p>
    <p>Model &amp; Config</p>
    <p>Model &amp; Config</p>
    <p>Model &amp; Config</p>
    <p>Model &amp; Config</p>
    <p>Header Space Analysis, etc.</p>
    <p>Apache Server</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client</p>
    <p>Network Config Analysis</p>
    <p>Model &amp; Config</p>
    <p>Model &amp; Config</p>
    <p>Model &amp; Config</p>
    <p>Model &amp; Config</p>
    <p>Need detailed network knowledge HW + config</p>
  </div>
  <div class="page">
    <p>Motivation Apache Server</p>
    <p>Chrome Client ?</p>
  </div>
  <div class="page">
    <p>NetCheck Apache Server</p>
    <p>Chrome Client</p>
    <p>programmer</p>
    <p>programmer</p>
  </div>
  <div class="page">
    <p>NetCheck Apache Server</p>
    <p>Chrome Client</p>
    <p>programmer</p>
    <p>programmer</p>
  </div>
  <div class="page">
    <p>NetCheck Apache Server</p>
    <p>Chrome Client</p>
    <p>Model Programmers Understanding</p>
    <p>Deutschs Fallacies</p>
    <p>programmer</p>
    <p>programmer</p>
  </div>
  <div class="page">
    <p>Motivation  NetCheck Overview  Trace Ordering  Network Model  Fault Classification  Results / Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>NetCheck overview</p>
    <p>Application Fai</p>
    <p>l Traces</p>
    <p>NetCheck</p>
    <p>Likely Faults</p>
  </div>
  <div class="page">
    <p>NetCheck overview</p>
    <p>Application</p>
    <p>Traces</p>
    <p>NetCheck</p>
    <p>Likely Faults</p>
    <p>ktrace strace</p>
    <p>Fai l</p>
  </div>
  <div class="page">
    <p>NetCheck overview</p>
    <p>Application</p>
    <p>Traces</p>
    <p>NetCheck</p>
    <p>Likely Faults</p>
    <p>Ordering Algorithm</p>
    <p>Network Model</p>
    <p>Diagnoses Engine Input</p>
    <p>Diagnosis Output</p>
    <p>Host Traces</p>
    <p>NetCheck</p>
    <p>syscall simulation result</p>
    <p>simulation state errors</p>
  </div>
  <div class="page">
    <p>NetCheck overview</p>
    <p>Application</p>
    <p>Traces</p>
    <p>NetCheck</p>
    <p>Likely Faults</p>
    <p>Network Configuration Issues</p>
    <p>Traffic Statistics</p>
    <p>Problem Detected</p>
  </div>
  <div class="page">
    <p>Motivation  NetCheck Overview  Trace Ordering  Network Model  Fault Classification  Results / Conclusion</p>
    <p>Outline</p>
    <p>Traces (a) Trace Ordering</p>
  </div>
  <div class="page">
    <p>Series of locally ordered system calls Dont want to modify apps or use a global clock Gathered by strace, ktrace, systrace, truss, etc. Call arguments and return values ! socket() = 3 bind(3, ) = 0 listen(3, 1) = 0 accept(3, ) = 4 recv(4, &quot;HTTP&quot;, ) = 4 close(4) = 0</p>
    <p>Traces</p>
    <p>Call arguments</p>
    <p>Return values</p>
    <p>Return buffer</p>
  </div>
  <div class="page">
    <p>! Node A Node B 1. socket() = 3 1. socket() = 3 2. bind(3, ...) = 0 2. connect(3,...) = 0 3. listen(3, 1) = 0 3. send(3, &quot;Hello&quot;,.) = 5 4. accept(3, ...) = 4 4. close(3) = 0 5. recv(4,&quot;Hello&quot;, ..) = 5 6. close(4) = 0</p>
    <p>What we see is this:</p>
    <p>- one trace per host - local order but no global order Q: how do we reconstruct what really happened?</p>
  </div>
  <div class="page">
    <p>A1. socket() = 3 B1. socket() = 3 A2. bind(3, .. .) = 0 A3. listen(3, 1) = 0 B2. connect(3,...) = 0 A4. accept(3, ...) = 4 B3. send(3, &quot;Hello&quot;, ...) = 5 A5. recv(4, &quot;Hello&quot;, ...) = 5 B4. close(3) = 0 A6. close(4) = 0</p>
    <p>What we want is this</p>
    <p>The ground truth</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>A1. socket() = 3 B1. socket() = 3 A2. bind(3, .. .) = 0 A3. listen(3, 1) = 0 B2. connect(3,...) = 0 A4. accept(3, ...) = 4 B3. send(3, &quot;Hello&quot;, ...) = 5 A5. recv(4, &quot;Hello&quot;, ...) = 5 B4. close(3) = 0 A6. close(4) = 0</p>
    <p>What we want is this</p>
    <p>The ground truth ! ! ! ! ! ! ! Goal: find an equivalent interleaving</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>! Node A Node B 1. socket() = 3 1. socket() = 3 2. bind(3, ...) = 0 2. connect(3,...) = 0 3. listen(3, 1) = 0 3. send(3, &quot;Hello&quot;,.) = 5 4. accept(3, ...) = 4 4. close(3) = 0 5. recv(4,&quot;Hello&quot;, ..) = 5 6. close(4) = 0</p>
    <p>Observation 1: Order Equivalence</p>
    <p>- one trace per host - local order but no global order Q: how do we reconstruct what really happened? The socket() calls are not visible to the other side Some orders are equivalent! 29</p>
  </div>
  <div class="page">
    <p>! Node A Node B 1. socket() = 3 1. socket() = 3 2. bind(3, ...) = 0 2. connect(3,...) = 0 3. listen(3, 1) = 0 3. send(3, &quot;Hello&quot;,.) = 5 4. accept(3, ...) = 4 4. close(3) = 0 5. recv(4,&quot;Hello&quot;, ..) = 5 6. close(4) = 0</p>
    <p>- one trace per host - local order but no global order Q: how do we reconstruct what really happened?</p>
    <p>Observation 2: Return Values Guide Ordering</p>
  </div>
  <div class="page">
    <p>Return values guide ordering</p>
    <p>A2. bind(3, ...) = 0 A3. listen(3, 1) = 0 B2. connect(3, ...) = 0 !! A2. bind(3, ...) = 0 B2. connect(3, ...) = -1, ECONNREFUSED A3. listen(3, 1) = 0 ! ! A calls return value may-depend-on a remote calls action Result indicates order of calls 31</p>
    <p>!!!!</p>
    <p>!!!!</p>
    <p>One valid ordering: all syscalls returned successfully.</p>
    <p>A second valid ordering: connect failed with ECONNREFUSED.</p>
  </div>
  <div class="page">
    <p>Deciding call order</p>
    <p>full set of may-depend-on relations</p>
    <p>socketbind getsockopt,setsockoptgetsockname</p>
    <p>accept getpeername</p>
    <p>poll, select</p>
    <p>connect recv, recvfrom, recvmsg, read</p>
    <p>send, sendto, sendmsg, write, writev, sendfileclose, shutdownlisten</p>
  </div>
  <div class="page">
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Algorithm process socket socket</p>
    <p>connect</p>
    <p>send</p>
    <p>recv</p>
    <p>accept</p>
    <p>listen</p>
    <p>bind</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try socket on host A: accepted</p>
    <p>Algorithm process socket socket</p>
    <p>connect</p>
    <p>send</p>
    <p>recv</p>
    <p>accept</p>
    <p>listen</p>
    <p>bind</p>
    <p>A B</p>
    <p>socket</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>connect</p>
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try connect on host B:</p>
    <p>Algorithm process</p>
    <p>send</p>
    <p>recv</p>
    <p>accept</p>
    <p>listen</p>
    <p>A B</p>
    <p>socket</p>
    <p>A socket</p>
    <p>B bind</p>
    <p>A</p>
    <p>connect rejected</p>
  </div>
  <div class="page">
    <p>listen</p>
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try listen on host A: accepted</p>
    <p>Algorithm process connect</p>
    <p>send</p>
    <p>recv</p>
    <p>accept</p>
    <p>A B</p>
    <p>socket</p>
    <p>A socket</p>
    <p>B bind</p>
    <p>A listen</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>recvrecv rejected</p>
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try recv on host A:</p>
    <p>Algorithm process</p>
    <p>send</p>
    <p>A B</p>
    <p>socket</p>
    <p>A socket</p>
    <p>B bind</p>
    <p>A listen</p>
    <p>A connect</p>
    <p>B accept</p>
    <p>A</p>
    <p>TCP BUFFER:</p>
    <p>Hola!</p>
  </div>
  <div class="page">
    <p>None</p>
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try send on host B: accepted</p>
    <p>Algorithm process</p>
    <p>sendrecv</p>
    <p>A B</p>
    <p>socket</p>
    <p>A socket</p>
    <p>B bind</p>
    <p>A listen</p>
    <p>A connect</p>
    <p>B accept</p>
    <p>A</p>
    <p>sendB</p>
    <p>TCP BUFFER:</p>
    <p>Hola!</p>
  </div>
  <div class="page">
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try send on host B: accepted</p>
    <p>Algorithm process</p>
    <p>recv</p>
    <p>A B</p>
    <p>socket</p>
    <p>A socket</p>
    <p>B bind</p>
    <p>A listen</p>
    <p>A connect</p>
    <p>B accept</p>
    <p>A</p>
    <p>sendB</p>
    <p>TCP BUFFER: Hello</p>
    <p>None</p>
    <p>Hola!</p>
  </div>
  <div class="page">
    <p>recvrecv</p>
    <p>Fatal Error</p>
    <p>Ordering Algorithm</p>
    <p>Input traces</p>
    <p>Output Ordering</p>
    <p>Try recv on host A:</p>
    <p>Algorithm processA B</p>
    <p>socket</p>
    <p>A socket</p>
    <p>B bind</p>
    <p>A listen</p>
    <p>A connect</p>
    <p>B accept</p>
    <p>A</p>
    <p>None</p>
    <p>sendB</p>
    <p>TCP BUFFER: Hello</p>
    <p>Hola!</p>
  </div>
  <div class="page">
    <p>Motivation  NetCheck Overview  Trace Ordering  Network Model  Fault Classification  Results / Conclusion</p>
    <p>Outline</p>
    <p>Model</p>
    <p>Accept</p>
    <p>Reject</p>
    <p>Fatal Error</p>
  </div>
  <div class="page">
    <p>Simulates invocation of a syscall  datagrams sent/lost  reordering / duplication is notable</p>
    <p>track pending connections  buffer lengths and contents  send -&gt; put data into buffer  recv -&gt; pop data from buffer !</p>
    <p>Simulation outcome  Accept  can process (correct buffer)  Reject  wrong order (incomplete buffer)  Permanent reject  abnormal behavior (incorrect buffer)</p>
    <p>Network Model</p>
    <p>Model</p>
    <p>Accept</p>
    <p>Reject</p>
    <p>Fatal Error</p>
  </div>
  <div class="page">
    <p>Simulates invocation of a syscall  Capture programmer assumptions</p>
    <p>Assumes a simplified network view  Assume transitive connectivity  Little, random loss  No middle boxes</p>
    <p>Assume uniform platform  Flag OS differences</p>
    <p>Network Model</p>
  </div>
  <div class="page">
    <p>Blackbox Tracing mechanism</p>
    <p>How Model Return Values Impact Trace Ordering</p>
    <p>Trace Ordering: linear running time (total trace length) * number of traces</p>
    <p>Ordering Algorithm</p>
    <p>Network Model</p>
    <p>Diagnoses Engine Input</p>
    <p>Diagnosis Output</p>
    <p>Host Traces</p>
    <p>NetCheck</p>
    <p>syscall simulation result</p>
    <p>simulation state errors</p>
  </div>
  <div class="page">
    <p>Motivation  NetCheck Overview  Trace Ordering  Network Model  Fault Classification  Results / Conclusion</p>
    <p>Outline</p>
    <p>(c) Fault Classifier</p>
    <p>Output 45</p>
  </div>
  <div class="page">
    <p>Goal: Decide what to output  Problem: Show relevant information  Fault classifier: global (rather than local) view</p>
    <p>uncovers high-level patterns by extracting low-level features  Examples: middleboxes, non-transitive</p>
    <p>connectivity, MTU, mobility, network disconnection</p>
    <p>All look like loss, but have different patterns in the context of other flows</p>
    <p>Fault Classifier</p>
  </div>
  <div class="page">
    <p>Options to show different levels of detail  Network admins / developers</p>
    <p>detailed info  End users</p>
    <p>Classification  Recommendations</p>
    <p>Fault Classifier</p>
    <p>Network Configuration Issues</p>
    <p>Traffic Statistics</p>
    <p>Problem Detected</p>
  </div>
  <div class="page">
    <p>Motivation  NetCheck Overview  Trace Ordering  Network Model  Fault Classification  Results / Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Reproduce reported bugs from bug trackers (Python, Apache, Ruby, Firefox, etc.)  A total of 71 bugs  Grouped into 23 categories</p>
    <p>Virtualization incurred/portability bugs  SO_REUSEADDR behaves differently across OSes  accept inherit O_NONBLOCK</p>
    <p>Correct analysis of &gt;95% bugs</p>
    <p>Evaluation: Production Application Bugs</p>
  </div>
  <div class="page">
    <p>Twenty faults observed in practice on a live network  MTU bug</p>
    <p>Intermediary device  Port forward</p>
    <p>Traffic sent to non-relevant addresses  Provide supplemental info</p>
    <p>packet loss  buffers being closed with data in</p>
    <p>90% of cases correctly detected</p>
    <p>Evaluation: Observed Network Faults</p>
  </div>
  <div class="page">
    <p>Middle boxes  Multiple unaccepted connections  client behind NAT in FTP</p>
    <p>TCP/UDP  non-transitive connectivity in VLC</p>
    <p>Complex failures oVirtualBox send data larger than buffer size oPidgin returned IP different from bind oSkype NAT + close socket from a different thread</p>
    <p>Used on Seattle Testbed seattle.poly.edu</p>
    <p>General Findings in Practice</p>
  </div>
  <div class="page">
    <p>NetCheck Performance Overhead</p>
    <p>Firefox</p>
    <p>Skype</p>
    <p>Telnet</p>
    <p>SSH</p>
    <p>VLC</p>
  </div>
  <div class="page">
    <p>Built and evaluated NetCheck, a tool to diagnose network failures in complex apps</p>
    <p>!  Key insights:</p>
    <p>model the programmers misconceptions  relation between calls  reconstruct order</p>
    <p>NetCheck is effective</p>
    <p>Everyday applications &amp; networks  Real network / application bugs  No per-network knowledge  No per-application knowledge</p>
    <p>Try it here: https://netcheck.poly.edu/ 53</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Backup slides.</p>
  </div>
  <div class="page">
    <p>No app- or network-specific knowledge  No modification to apps/infrastructure  No synchronized global clock !</p>
    <p>Blackbox Tracing mechanism (eg, strace)  Reconstruct a plausible total ordering of</p>
    <p>syscall traces from multiple hosts  Uses simulation and captured state to identify</p>
    <p>network related issues  Map low-level issues to higher-level</p>
    <p>characterizations of failure</p>
    <p>What is NetCheck?</p>
  </div>
  <div class="page">
    <p>Blackbox Tracing mechanism</p>
    <p>Diagnosis Model</p>
    <p>Trace Ordering</p>
    <p>ApplicationAgnostic Model</p>
    <p>Collating Fault</p>
    <p>Classifier</p>
    <p>Call dependency</p>
    <p>Traces</p>
  </div>
  <div class="page">
    <p>Blackbox Tracing mechanism</p>
    <p>Diagnosis Model</p>
    <p>Trace Ordering</p>
    <p>ApplicationAgnostic Model</p>
    <p>Collating Fault</p>
    <p>Classifier</p>
    <p>Call dependency</p>
    <p>accept/reject/FE</p>
    <p>Traces</p>
  </div>
  <div class="page">
    <p>Blackbox Tracing mechanism</p>
    <p>Diagnosis Model</p>
    <p>Trace Ordering</p>
    <p>ApplicationAgnostic Model</p>
    <p>Collating Fault</p>
    <p>Classifier</p>
    <p>Call dependency</p>
    <p>accept/reject/FE</p>
    <p>reject  reorder</p>
    <p>Traces</p>
    <p>Trace Ordering: linear running time</p>
  </div>
  <div class="page">
    <p>Pseudocode and Analysis</p>
    <p>O(L)</p>
    <p>Best case: O(1) Worst case: O(n)</p>
    <p>Overall: Best case O(L)</p>
    <p>Worst Case O(n*L)</p>
  </div>
  <div class="page">
    <p>Pseudocode and Analysis</p>
    <p>Accept  Traverse</p>
    <p>Reject  Backtrack 60</p>
  </div>
  <div class="page">
    <p>! Node A Node B 1. socket() = 3 1. socket() = 3 2. bind(3, ...) = 0 2. connect(3,...) = 0 3. listen(3, 1) = 0 3. send(3,&quot;Hello&quot;,..) =5 4. accept(3, ...) = 4 4. close(3) = 0 5. recv(4, &quot;Hello&quot;, ..) = 5  6. close(4) = 0</p>
    <p>NetCheck input</p>
    <p>Syscall</p>
  </div>
  <div class="page">
    <p>! Node A Node B 1. socket() = 3 1. socket() = 3 2. bind(3, ...) = 0 2. connect(3,...) = 0 3. listen(3, 1) = 0 3. send(3, &quot;Hello&quot;,.) =5 4. accept(3, ...) = 4 4. close(3) = 0 5. recv(4, &quot;Hello&quot;, ..) = 5  6. close(4) = 0</p>
    <p>NetCheck input</p>
    <p>Syscall</p>
  </div>
  <div class="page">
    <p>Order 1 A1 bind(3, ...) = 0 A2 listen(3, 5) = 0 B1 connect(3, ...) = 0 !</p>
    <p>Order 2 A1 bind(3, ...) = 0 B1 connect(3, ...) = -1 ECONNREFUSED A2 listen(3, 5) = 0 !</p>
    <p>Order 3 B1 connect(3, ...) = -1 ECONNREFUSED A1 bind(3, ...) = 0 A2 listen(3, 5) = 0</p>
    <p>connect depends on listen</p>
  </div>
  <div class="page">
    <p>Middle boxes  Multiple unaccepted connections</p>
    <p>client behind NAT in FTP  Missing connect on accepted connections  server</p>
    <p>behind NAT or port forwarding  Multiple connect non-standard failure  firewall</p>
    <p>filtering connections  Multiple connect to listening address get refused  Multiple non-blocking connect failure  Traffic sent to non-relevant addresses  NAT or 3rd</p>
    <p>party proxy/traffic forwarding</p>
    <p>Example Rules</p>
  </div>
  <div class="page">
    <p>Middle boxes  Multiple unaccepted connections</p>
    <p>client behind NAT in FTP  Missing connect on accepted connections  server</p>
    <p>behind NAT or port forwarding  Traffic sent to non-relevant addresses  NAT or 3rd</p>
    <p>party proxy/traffic forwarding  TCP  select/poll timeout  send data after connection closed</p>
    <p>Example fault classifier rules</p>
  </div>
  <div class="page">
    <p>UDP o datagram sent/lost per connection o high datagram loss rate</p>
    <p>non-transitive connectivity in VLC</p>
    <p>Misc o apps send data larger than default OS buffer size</p>
    <p>bug report from VirtualBox bug tracker o returned IP different from bind</p>
    <p>simultaneous net disconnect/reconnect in Pidgin  Skype attempted to close socket from a different</p>
    <p>thread</p>
    <p>Example rules (cont.)</p>
  </div>
  <div class="page">
    <p>FTP  All reverse connections from server lost</p>
    <p>Client behind NAT  Pidgin</p>
    <p>getsockname returns different IP  Client poor connection results in IP changes</p>
    <p>Skype  Poor call quality, msg drop</p>
    <p>Network delay, NAT  Skype closes socket from different thread</p>
    <p>VLC  Packet loss</p>
    <p>Non-transitive connectivity issue</p>
    <p>Evaluation: Everyday Applications</p>
  </div>
</Presentation>
