<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Safe and Automated Live Malware Experimenta7on on Public Testbeds</p>
    <p>Abdulla Alwabel, Hao Shi,</p>
    <p>USC/ISI Genevieve Bartle6, Jelena Mirkovic</p>
    <p>Aug 18, 2014: CSET14</p>
  </div>
  <div class="page">
    <p>Live Malware Analysis</p>
    <p>ObfuscaJon, encrypJon, downloading binaries</p>
    <p>Exhibits more behavior when not being watched</p>
    <p>Analyze malware while it runs  Allow access to systems  Allow access to the Internet</p>
    <p>Risk/reward trade-off</p>
  </div>
  <div class="page">
    <p>ExisJng Malware Analysis</p>
    <p>Custom, expert designed, expert used  Mesocosms, Malwarelab (completely contained)</p>
    <p>GQ, BotLab (small amounts of Internet traffic allowed)</p>
  </div>
  <div class="page">
    <p>Publicly Accessible Malware Testbeds</p>
    <p>Requiring experJse limits the researcher pool, &amp; sJfles advancement of live malware exper- imentaJon and tools.</p>
    <p>Pool together resources  Low-barrier to entry to experts in other domains</p>
  </div>
  <div class="page">
    <p>Needs</p>
    <p>Safe (any lab needs to be)  Accessible (to differing levels of experJse)  Flexible (support variety of experiments)  Automated mechanisms (for scaling)  Support exisJng tools and integraJon of new tools</p>
  </div>
  <div class="page">
    <p>What we bring to the table:</p>
    <p>Automated and Flexible Containment = scalable/safe</p>
    <p>Flexible tools and environments that support High-fidelity EmulaJon = flexible/integraJon</p>
  </div>
  <div class="page">
    <p>What we bring to the table:</p>
    <p>Automated and Flexible Containment = scalable/safe</p>
    <p>Flexible tools and environments that support High-fidelity EmulaJon = flexible/integraJon</p>
    <p>DETER and/or stand-alone setup for distribuJon = accessible</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>General Architecture  Containment  High-fidelity EmulaJon</p>
  </div>
  <div class="page">
    <p>Testbed Architecture</p>
  </div>
  <div class="page">
    <p>Testbed Architecture Containment: Fine-grained firewall + Smart Impersonators</p>
  </div>
  <div class="page">
    <p>Testbed Architecture</p>
    <p>High-Fidelity EmulaJon: HFE Database + VMs</p>
  </div>
  <div class="page">
    <p>Testbed Architecture</p>
    <p>User and experiment monitoring: repeatability, customizaJon,</p>
  </div>
  <div class="page">
    <p>Containment</p>
    <p>l Balance risk and uJlity l Support differing experimental needs l Knowledge shared between experiments. l EvoluJon of policies: from more restricJve to permissive.</p>
    <p>Plan: work in a cycle</p>
  </div>
  <div class="page">
    <p>Malware Management Cycle</p>
    <p>l No guarantee that traffic is harmless. l Four-step containment approach for communicaJon a6empt. - Contain and evaluate. - Redirect to a smart impersonator - Build a custom impersonator - Let the communicaJon out.</p>
  </div>
  <div class="page">
    <p>Risk Management</p>
    <p>l Let out communicaJons: - Not able to build a Customer Impersonator and communicaJon</p>
    <p>is necessary.</p>
    <p>l But we keep an eye: - Monitor half-open TCP connecJons. - RaJo of of successful (reply received from server) vs unsuccessful</p>
    <p>communicaJon a6empts. - Detet DoS a6acks by observing persistent communicaJon a6empts</p>
    <p>a desJnaJon failing to generate sufficient replies - Thwart spam campaigns by segng a low threshold to the number</p>
    <p>of allowed e-mail messages. - Block known exploits by forcing all communicaJon to pass through</p>
    <p>one or more IDS engine</p>
  </div>
  <div class="page">
    <p>Determining if CommunicaJon is Necessary</p>
    <p>l Measure in isolaJon and without isolaJon l If acJvity is lower in isolaJon, communicaJon is necessary</p>
    <p>l Measures of malware acJvity: - Number of system calls - Number of unique system calls. - Entropy of system calls.</p>
  </div>
  <div class="page">
    <p>Smart Impersonators l Impersonate common services: public Web, DNS and mail</p>
    <p>servers. l Random Impersonator</p>
    <p>- HTTP: 200 OK, random content. - DNS: reply to any request with sink IP. - SMTP: accepts messages from any user &amp; password - IRC server is a standard</p>
    <p>l Custom Impersonator - Samples run in DECAF, based in QEMU:</p>
    <p>l Collect CPU instrucJons executed by malware. l VINE back-end to apply symbolic execuJon on the collected traces</p>
    <p>on the network l Find potenJal input required to execute other branches</p>
  </div>
  <div class="page">
    <p>Status of Containment</p>
    <p>l Run 600 samples, 20 minutes each. l 65% a6empt to reach remote hosts. l Focus on automaJng HTTP first</p>
    <p>Purpose #requests Download binary 236 Registration 7 Contacting master 2513 Non-standard HTTP, encrypted 30</p>
    <p>Connectivity Test 5</p>
  </div>
  <div class="page">
    <p>High-fidelity EmulaJon</p>
    <p>Need: Malware performs anJ-virtulizaJon  Detect VMs and change behavior from malicious to benign</p>
    <p>These differences called Pills  Matrix: Blue keeps you fooled, red show the truth</p>
    <p>Goal:  Enumerate all the pills</p>
    <p>CPU semanJc differences between a virtual machine (VM) and a physical machine (Oracle)</p>
    <p>Lie to malware with the correct values (similar to kernel rootkit)</p>
  </div>
  <div class="page">
    <p>Based On  Related Work</p>
    <p>Red Pill Tes7ng (EmuFuzzer, MarJgnoni09)  Generate random values for instrucJon parameters (user- space)</p>
    <p>KEmuFuzzer [MarJgnoni10] (extend to kernel-space)  manually craped test case templates for kernel instrucJons  Random values for instrucJon input</p>
    <p>Hi-Fi tests for Lo-Fi emulators [MarJgnoni12]  Use symbolic execuJon to translate the code of a high- fidelity emulator</p>
    <p>Generate test cases that can invesJgate all discovered code paths</p>
    <p>These test cases are then used to test low-fidelity emulators</p>
  </div>
  <div class="page">
    <p>Problems with previous work</p>
    <p>Randomized tests  Cannot guarantee completeness</p>
    <p>Previous uses custom kernel, hard to generalize</p>
    <p>Comparisons are between two VMs, not a bare metal machine and a VM</p>
  </div>
  <div class="page">
    <p>Our approach: Cardinal Pill TesJng</p>
    <p>Difference = contents of memory, values of registers &amp; program counter</p>
    <p>Classify instrucJons into five broad categories  ArithmeJc, data movement, logic, flow control, and misc</p>
    <p>Build tests off using logical coverage  AutomaJcally generate tests to enumerate pills</p>
  </div>
  <div class="page">
    <p>Logical Coverage &amp; Grouping</p>
  </div>
  <div class="page">
    <p>Status of High-fidelity EmulaJon</p>
    <p>QEMU (4 versions) vs. 2 oracles  Intel Xeon E3 3.40GHz, Windows7 Pro x86  Intel Xeon W3520 2.6GHz, Windows XP x86 SP3</p>
    <p>19,412 generated test cases  Achieved higher yield rate (pills/tests) than previous work (46.7% vs. 7-10%)</p>
    <p>Talk by Hao Shi: Cardinal Pill TesJng of Virtual Machines Thursday morning, August 21, 2014</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Advocate for publically accessible malware testbed</p>
    <p>Containment + hi-fi flexible EmulaJon</p>
    <p>Talk by Hao Shi: Cardinal Pill TesJng of Virtual Machines Thursday morning, August 21, 2014</p>
  </div>
</Presentation>
