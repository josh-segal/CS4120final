<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CS 263 Course Project 1</p>
    <p>Survey: Type Systems for Race Detection and Atomicity</p>
    <p>Feng Zhou, zf@cs 12/3/2003</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 2</p>
    <p>The Problem and Approaches</p>
    <p>Interleaved execution in multi-threaded applications may lead to wrong results</p>
    <p>Reasons:  Race condition: concurrent accesses to a shared variable</p>
    <p>with at least one write  Use of stale data</p>
    <p>Static tools  Warlock (93)  program analysis, ANSI C  Rccjava(00), atomicity types(03)  type systems  ESC/java(02)  more powerful automatic theorem proving  RacerX(03)  inter-procedural analysis</p>
    <p>Dynamic tools  Eraser  tracking locksets and intersections</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 3</p>
    <p>Rccjava: Type-Based Race Detector</p>
    <p>Cormac Flanagan, 2000  Supports lock-based synchronization discipline  Basic annotations: guarded_by and</p>
    <p>requires</p>
    <p>class Account { private int balance = 0 /*# guarded_by this */; private void update(int x) /*# requires this */ { balance = x; } public void deposit(int n) { synchronized(this) { update(balance + n); } } }</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 4</p>
    <p>Type Checking by Tracking Locksets</p>
    <p>class Account { private int balance = 0 /*# guarded_by this */; private void update(int x) /*# requires this */ {</p>
    <p>balance = x; }</p>
    <p>public void deposit(int n) { synchronized(this) { update(balance + n); } } }</p>
    <p>lockset={this}</p>
    <p>this  lockset ?</p>
    <p>lockset={}</p>
    <p>lockset = {this} this  lockset ?</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 5</p>
    <p>More complex annotations and constructs</p>
    <p>Problems with this simple scheme,  There are complex locking schemes used in real apps  Requires too many annotations  Produces a lot of spurious race reports</p>
    <p>Features to solve these problems:  Classes parameterized by locks</p>
    <p>Allows fields to be protected by external locks. E.g elements of a list protected by a lock on the list</p>
    <p>Implemented using ghost parameters to classes</p>
    <p>Thread-local objects  Enforced by the type system</p>
    <p>Mechanisms for escaping the type system  Unsound</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 6</p>
    <p>Assignment to a shared field</p>
    <p>Class Instantiation with ghost parameters</p>
    <p>Sample Typing Rules</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 7</p>
    <p>Beyond Race Detection: A Type and Effect System for Atomicity</p>
    <p>Flanagan03, based on rccjava  Atomicity: a separate property of</p>
    <p>expressions/methods const &lt; mover &lt; atomic &lt; cmpd &lt; error</p>
    <p>Const: does not depend on or change any state  Mover: operations that can commute with any</p>
    <p>concurrent operations from other threads  example: an access to field f guarded by lock l with l held</p>
    <p>Atomic: behaves exactly the same when running concurrently with other threads or in serial</p>
    <p>Cmpd: none of the previous ones  Error: violates the locking discipline</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 8</p>
    <p>A Type and Effect System for Atomicity (2)</p>
    <p>Iterative closures and compositions  mover*  mover  atomic atomic  cmpd  mover* atomic mover*  atomic</p>
    <p>Typing rules,</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 9</p>
    <p>Example of atomicity checking</p>
    <p>atomic int readBalance() {</p>
    <p>int t;</p>
    <p>synchronized (this) {</p>
    <p>t = balance;</p>
    <p>}</p>
    <p>return t;</p>
    <p>} atomic int withdraw(int amt) {</p>
    <p>int b = readBalance();</p>
    <p>synchronized (this) {</p>
    <p>balance = b  ant;</p>
    <p>}</p>
    <p>}</p>
    <p>AA</p>
    <p>A</p>
    <p>Acmpd</p>
  </div>
  <div class="page">
    <p>CS 263 Course Project 10</p>
    <p>Reported Application</p>
    <p>Run on several standard JDK1.4 classes: StringBuffer, String,PrintWriter,Vector</p>
    <p>Sized from 296 LOC to 2399 LOC  Found one bug in StringBuffer</p>
  </div>
</Presentation>
