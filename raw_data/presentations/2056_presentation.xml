<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FlexNIC: Rethinking Network DMA</p>
    <p>Antoine Kaufmann Simon Peter Tom Anderson Arvind Krishnamurthy</p>
    <p>University of Washington</p>
    <p>HotOS 2015</p>
  </div>
  <div class="page">
    <p>Networks: Fast and Growing Faster</p>
    <p>E th</p>
    <p>e rn</p>
    <p>e t</p>
    <p>B a n d w</p>
    <p>id th</p>
    <p>[ b it</p>
    <p>s/ s]</p>
    <p>Year</p>
    <p>I 5ns inter-arrival time for 64B packets at 100Gbps</p>
  </div>
  <div class="page">
    <p>Software needs to catch up</p>
    <p>I Many cloud apps dominated by packet processing I Key-value stores, graph analytics, load balancers</p>
    <p>I Redis on Arrakis with kernel-bypass: 4s I Still a long way to go to 5ns</p>
    <p>I 5ns is not a lot of time I Cache access: 15ns for L3, 40ns if dirty in other L1</p>
    <p>I Careful memory system use is paramount I Ideal: Data always in L1/L2 cache</p>
  </div>
  <div class="page">
    <p>Software needs to catch up</p>
    <p>I Many cloud apps dominated by packet processing I Key-value stores, graph analytics, load balancers</p>
    <p>I Redis on Arrakis with kernel-bypass: 4s I Still a long way to go to 5ns</p>
    <p>I 5ns is not a lot of time I Cache access: 15ns for L3, 40ns if dirty in other L1</p>
    <p>I Careful memory system use is paramount I Ideal: Data always in L1/L2 cache</p>
  </div>
  <div class="page">
    <p>Software needs to catch up</p>
    <p>I Many cloud apps dominated by packet processing I Key-value stores, graph analytics, load balancers</p>
    <p>I Redis on Arrakis with kernel-bypass: 4s I Still a long way to go to 5ns</p>
    <p>I 5ns is not a lot of time I Cache access: 15ns for L3, 40ns if dirty in other L1</p>
    <p>I Careful memory system use is paramount I Ideal: Data always in L1/L2 cache</p>
  </div>
  <div class="page">
    <p>Software needs to catch up</p>
    <p>I Many cloud apps dominated by packet processing I Key-value stores, graph analytics, load balancers</p>
    <p>I Redis on Arrakis with kernel-bypass: 4s I Still a long way to go to 5ns</p>
    <p>I 5ns is not a lot of time I Cache access: 15ns for L3, 40ns if dirty in other L1</p>
    <p>I Careful memory system use is paramount I Ideal: Data always in L1/L2 cache</p>
  </div>
  <div class="page">
    <p>NIC &amp; SW are not well integrated</p>
    <p>I Poor cache locality, extra synchronization I NIC steers packets to cores by connection I Application locality may not match connection</p>
    <p>I Wasted CPU cycles I Packet parsing repeated in software</p>
    <p>I High memory system pressure I Packet formatted for network, not SW access I High packet processing overhead</p>
  </div>
  <div class="page">
    <p>Our Proposal: FlexNIC I Flexible NIC DMA interface</p>
    <p>I Applications insert packet matching rules I Rules control DMA actions</p>
    <p>I Use multi-stage match+action (M+A) processing I Similar to that found in next-generation SDN switches</p>
    <p>I M+A is both efficient and a flexible abstraction I Packet steering based on app-defined match I App-level packet validation I Customized packet transformations:</p>
    <p>add/remove/modify header fields I Can be stateful</p>
  </div>
  <div class="page">
    <p>Our Proposal: FlexNIC I Flexible NIC DMA interface</p>
    <p>I Applications insert packet matching rules I Rules control DMA actions</p>
    <p>I Use multi-stage match+action (M+A) processing I Similar to that found in next-generation SDN switches</p>
    <p>I M+A is both efficient and a flexible abstraction I Packet steering based on app-defined match I App-level packet validation I Customized packet transformations:</p>
    <p>add/remove/modify header fields I Can be stateful</p>
  </div>
  <div class="page">
    <p>Our Proposal: FlexNIC I Flexible NIC DMA interface</p>
    <p>I Applications insert packet matching rules I Rules control DMA actions</p>
    <p>I Use multi-stage match+action (M+A) processing I Similar to that found in next-generation SDN switches</p>
    <p>I M+A is both efficient and a flexible abstraction I Packet steering based on app-defined match I App-level packet validation I Customized packet transformations:</p>
    <p>add/remove/modify header fields I Can be stateful</p>
  </div>
  <div class="page">
    <p>Example: Key-Value Store Receive-Side Scaling</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>NIC Core 1</p>
    <p>Core 2</p>
    <p>Match: IF protocol = memcached</p>
    <p>Action: PUT packet TO hash(key)</p>
    <p>I Lock contention I Poor cache utilization</p>
    <p>I No locks needed I Better cache utilization</p>
    <p>H ash</p>
    <p>Table</p>
  </div>
  <div class="page">
    <p>Example: Key-Value Store Receive-Side Scaling</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>NIC Core 1</p>
    <p>Core 2</p>
    <p>Match: IF protocol = memcached</p>
    <p>Action: PUT packet TO hash(key)</p>
    <p>I Lock contention</p>
    <p>I Poor cache utilization</p>
    <p>I No locks needed I Better cache utilization</p>
    <p>H ash</p>
    <p>Table</p>
  </div>
  <div class="page">
    <p>Example: Key-Value Store Receive-Side Scaling</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>NIC Core 1</p>
    <p>Core 2</p>
    <p>Match: IF protocol = memcached</p>
    <p>Action: PUT packet TO hash(key)</p>
    <p>I Lock contention I Poor cache utilization</p>
    <p>I No locks needed I Better cache utilization</p>
    <p>H ash</p>
    <p>Table</p>
  </div>
  <div class="page">
    <p>FlexNIC Steering</p>
    <p>Receive-Side Scaling</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>NIC Core 1</p>
    <p>Core 2</p>
    <p>Match: IF protocol = memcached</p>
    <p>Action: PUT packet TO hash(key)</p>
    <p>I Key-based steering</p>
    <p>I No locks needed I Better cache utilization</p>
    <p>H ash</p>
    <p>Table</p>
  </div>
  <div class="page">
    <p>FlexNIC Steering</p>
    <p>Receive-Side Scaling</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>NIC Core 1</p>
    <p>Core 2</p>
    <p>Match: IF protocol = memcached</p>
    <p>Action: PUT packet TO hash(key)</p>
    <p>I Key-based steering I No locks needed</p>
    <p>I Better cache utilization</p>
    <p>H ash</p>
    <p>Table</p>
  </div>
  <div class="page">
    <p>FlexNIC Steering</p>
    <p>Receive-Side Scaling</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client 3</p>
    <p>NIC Core 1</p>
    <p>Core 2</p>
    <p>Match: IF protocol = memcached</p>
    <p>Action: PUT packet TO hash(key)</p>
    <p>I Key-based steering I No locks needed I Better cache utilization</p>
    <p>H ash</p>
    <p>Table</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue</p>
    <p>* * * *</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue * * *</p>
    <p>*</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue</p>
    <p>*</p>
    <p>* *</p>
    <p>*</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue</p>
    <p>* *</p>
    <p>*</p>
    <p>*</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue</p>
    <p>* *</p>
    <p>* *</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue</p>
    <p>* *</p>
    <p>* *</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>Traditional NIC DMA</p>
    <p>Buffers</p>
    <p>Descriptor Queue</p>
    <p>* *</p>
    <p>* *</p>
    <p>I Many PCIe round-trips</p>
    <p>I Key-Value Store: Copy items to item log</p>
  </div>
  <div class="page">
    <p>FlexNIC Key-Value Store Custom DMA interface</p>
    <p>Item Log</p>
    <p>Event Queue</p>
    <p>Item 1</p>
    <p>Item 2</p>
    <p>S2</p>
    <p>SET, Client ID, Item Pointer</p>
    <p>G1</p>
    <p>GET, Client ID, Hash, Key</p>
    <p>I Combine steering, validation, and transformation</p>
  </div>
  <div class="page">
    <p>FlexNIC Key-Value Store Custom DMA interface</p>
    <p>Item Log</p>
    <p>Event Queue</p>
    <p>Item 1 Item 2</p>
    <p>S2</p>
    <p>SET, Client ID, Item Pointer</p>
    <p>G1</p>
    <p>GET, Client ID, Hash, Key</p>
    <p>I Combine steering, validation, and transformation</p>
  </div>
  <div class="page">
    <p>FlexNIC Key-Value Store Custom DMA interface</p>
    <p>Item Log</p>
    <p>Event Queue</p>
    <p>Item 1 Item 2</p>
    <p>S2</p>
    <p>SET, Client ID, Item Pointer</p>
    <p>G1</p>
    <p>GET, Client ID, Hash, Key</p>
    <p>I Combine steering, validation, and transformation</p>
  </div>
  <div class="page">
    <p>FlexNIC Key-Value Store Custom DMA interface</p>
    <p>Item Log</p>
    <p>Event Queue</p>
    <p>Item 1 Item 2</p>
    <p>S2</p>
    <p>SET, Client ID, Item Pointer</p>
    <p>G1</p>
    <p>GET, Client ID, Hash, Key</p>
    <p>I Combine steering, validation, and transformation</p>
  </div>
  <div class="page">
    <p>FlexNIC Key-Value Store Custom DMA interface</p>
    <p>Item Log</p>
    <p>Event Queue</p>
    <p>Item 1 Item 2</p>
    <p>S2</p>
    <p>SET, Client ID, Item Pointer</p>
    <p>G1</p>
    <p>GET, Client ID, Hash, Key</p>
    <p>I Combine steering, validation, and transformation</p>
  </div>
  <div class="page">
    <p>Preliminary Evaluation</p>
    <p>I Lightweight key-value store implementation</p>
    <p>I 4 core Sandy Bridge 2.2GHz</p>
    <p>I Receive-side scaling: 1110 cycles/req I Key-based steering: 690 cycles/req (38%</p>
    <p>speedup) I Emulate using RSS and IPv6 header</p>
    <p>I FlexNIC KVS: 450 cycles/req (60% speedup) I Emulate in software on dedicated core</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>I Networks are becoming faster I Server applications need to keep up</p>
    <p>I FlexNIC eliminates processing inefficiencies I Application control over where packets are processed I Efficient steering/validation/transformation on NIC</p>
    <p>I Promising preliminary performance evaluation I Reduce request processing time by 60%</p>
    <p>I Next step: evaluate more use-cases, delivery directly to cache</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Further Use-case: Improving RDMA</p>
    <p>I RDMA requires shared memory to be pinned I Problematic for virtualization I Usually mapped, but need to gracefully handle if not I Idea: Add rule to divert access to slow-path</p>
    <p>I Data structure consistency with RDMA is hard I Often need to use messages I Idea: Implement data structure operations (e.g. log</p>
    <p>append, hash table insert)</p>
  </div>
</Presentation>
