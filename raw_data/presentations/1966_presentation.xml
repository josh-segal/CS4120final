<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Undo</p>
    <p>for Cloud</p>
    <p>Management via</p>
    <p>AI Planning Ingo Weber, Hiroshi Wada, Anna Liu, Alan Fekete, and Len Bass</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Audience of approach: users of Cloud Mgmt APIs  After trying out something in AWS, may want to go back</p>
    <p>to original state  Encountered during product development for Yuruware  No unit testing possible  annoying to undo tests  If something fails, resources are left in arbitrary states</p>
    <p>Reverting not always that straight-forward:  Attaching volume is no problem while the instance is running,</p>
    <p>detaching might be problematic  Creating / changing auto-scaling rules has effect on number of</p>
    <p>running instances  Cannot terminate additional instances, as the rule would create new</p>
    <p>ones!</p>
    <p>Deleted / terminated / released resources are gone!</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Undo System</p>
    <p>Checkpoint</p>
    <p>Rollback</p>
    <p>dodo Operations</p>
    <p>(API calls)</p>
    <p>Sense cloud</p>
    <p>resources</p>
    <p>states</p>
    <p>Sense cloud</p>
    <p>resources</p>
    <p>states</p>
    <p>AI Planner</p>
    <p>Administrator/script</p>
    <p>Resource</p>
    <p>state</p>
    <p>(PDDL)</p>
    <p>Generate</p>
    <p>Input as</p>
    <p>goal state</p>
    <p>Commit</p>
    <p>API Wrapper</p>
    <p>Logical state</p>
    <p>(e.g., pseudo</p>
    <p>delete flags)</p>
    <p>Cloud resources</p>
    <p>Wrapped</p>
    <p>API calls</p>
    <p>API calls</p>
    <p>Apply</p>
    <p>changes</p>
    <p>Execute</p>
    <p>deletes</p>
    <p>Resource</p>
    <p>state</p>
    <p>(PDDL)</p>
    <p>Input as</p>
    <p>initial state</p>
    <p>Generate</p>
    <p>Domain</p>
    <p>model</p>
    <p>(PDDL)</p>
    <p>Input Generate</p>
    <p>Compen</p>
    <p>sation plan</p>
    <p>Compen</p>
    <p>sation</p>
    <p>script</p>
    <p>Code</p>
    <p>generator</p>
    <p>Execute</p>
    <p>rollback</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Do:  terminate i1</p>
    <p>Undo  undelete i1  start i1  associate e1 to i1</p>
    <p>State in AWS:  Instance i1 running  Elastic IP e1 associated with i1</p>
  </div>
  <div class="page">
    <p>Why AI Planning?</p>
    <p>Traditional techniques to rollback long-running transactions do not apply or are sub-optimal:  Sagas (execute inverse ops in reverse chronological</p>
    <p>order), does not work on Amazon Web Services  Hand-coding handling for all possible cases is tedious</p>
    <p>AI Planning:  Given start state, goal state, set of actions, searches</p>
    <p>a solution in the state of possible plans  Highly optimized heuristics tame the PSPACE-hard</p>
    <p>problem for practical purposes  Our variant finds maximal contingency plans</p>
    <p>if one action fails, but the goal is still reachable, a backup plan is found</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Basis: prototype  full implementation (for selected resource types);</p>
    <p>planner-only implementation (for more resource types)</p>
    <p>Use cases: ~70 different planning settings tested  Performance 1: scaling plan length  Performance 2: scaling number of unrelated</p>
    <p>resources</p>
  </div>
  <div class="page">
    <p>Evaluating performance 1: plan length</p>
    <p>S e</p>
    <p>c o</p>
    <p>n d</p>
    <p>s</p>
    <p>Plan length</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; future work</p>
    <p>Summary  Approach and prototype for rollback in cloud</p>
    <p>management, using AI Planning techniques  Formalized part of AWS APIs in a planning domain model  Used an off-the-shelf planner and developed a prototype</p>
    <p>around it</p>
    <p>Scales well in terms of number of rollback operations needed, for practical system sizes</p>
    <p>Future work  Finding forward plans / do  Parallelizing plans  Extending checkpoints to capture internal resource</p>
    <p>state 11</p>
  </div>
  <div class="page">
    <p>Q&amp;A</p>
    <p>Research study opportunities in dependable cloud computing:  Software Architecture  Data Management  Performance Engineering  Autonomic Computing</p>
    <p>To find out more, send your CV and undergraduate details to students@nicta.com.au</p>
    <p>Thank You!</p>
    <p>Dr. Ingo Weber ingo.weber@nicta.com.au</p>
  </div>
</Presentation>
