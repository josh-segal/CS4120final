<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fossilized Indexes</p>
    <p>Non-Alterable Electronic Records</p>
    <p>presented by Reha K. Gereker</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 2</p>
    <p>The Paper</p>
    <p>Fossilized Index: The Linchpin of Trustworthy Non-Alterable Electronic Records</p>
    <p>By Qingbo Zhu, Windsor W. Hsu  Proceedings of the 2005 ACM SIGMOD</p>
    <p>international conference on Management of data, pp.395-406</p>
    <p>Work conducted at IBMs Almaden Research Center in California</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 3</p>
    <p>Purpose</p>
    <p>Electronic records are valuable assets  financial statements  purchase orders  quality assurance documents</p>
    <p>Electronic records are also evidence of activity  must be accessible and accurate, credible</p>
    <p>and irrefutable</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 4</p>
    <p>Purpose (contd)</p>
    <p>Companies are subject to regulations  how to manage electronic data  main objective is to make sure records are</p>
    <p>trustworthy  more than 10,000 such regulations alone in the US</p>
    <p>A Fortune-500 company yearly faces 125 serious lawsuits on the average  overall damages are projected to reach $2 billion in</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 5</p>
    <p>Aim</p>
    <p>Store large volumes of electronic data  needs to date back a few years  must be guarded against tampering  must be easily accessible when required</p>
    <p>Disposal of old records is also crucial  records must be destroyed when mandated</p>
    <p>retention periods are over</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 6</p>
    <p>The Hardware  Worm Storage</p>
    <p>WORM storage devices  Write-Once-Read-Many  becoming popular in effective preservation</p>
    <p>of electronic records</p>
    <p>Stored data is generally destroyed by destroying the device itself</p>
    <p>A good starting point but yet inadequate on its own</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 7</p>
    <p>The Problem</p>
    <p>WORM storage is essential for trustworthy record keeping but</p>
    <p>Data needs to be indexed for easy access  storage would be practically meaningless</p>
    <p>otherwise  If the index is not properly realized,</p>
    <p>contents of the WORM device could be hidden or even seemingly altered</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 8</p>
    <p>Index</p>
    <p>AA BB</p>
    <p>Records</p>
    <p>BB</p>
    <p>Illustrating the Problem</p>
    <p>Index</p>
    <p>AA BB</p>
    <p>Records</p>
    <p>Even though records are on read-only storage, index is still alterable.</p>
    <p>By inserting a fake record and changing the access path, a record may, in effect, be altered on read-only storage.</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 9</p>
    <p>What is needed?</p>
    <p>Read-only storage  protect records from physical modification</p>
    <p>Retrieval of records in timely fashion  typically within days</p>
    <p>Disposal of records after certain periods  destruction of the data itself may not always</p>
    <p>be sufficient</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 10</p>
    <p>Properties of the Index</p>
    <p>Once a record is committed, its index entry and the path to that entry must be immutable</p>
    <p>The index must allow incremental growth and scale extremely large collections of data</p>
    <p>The index should retain its structure  i.e. it should not degenerate into a linear scan</p>
    <p>The space overhead should be acceptable  The index should allow selective disposition</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 11</p>
    <p>Designing a Fossilized Index</p>
    <p>Approaches that are vulnerable  an index that requires a rebalance  an index that requires a relocation</p>
    <p>The index should  grow from top to bottom without having to</p>
    <p>relocate committed entries  be balanced without dynamic adjustments  must not rely on hashing schemes that</p>
    <p>require rehashing</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 12</p>
    <p>Generalized Hash Trees</p>
    <p>h0</p>
    <p>h1</p>
    <p>h2</p>
    <p>bucket</p>
    <p>tree node</p>
    <p>hi hash function at level i</p>
    <p>ki growth factor at level i</p>
    <p>mi size of tree nodes at level i</p>
    <p>M = { mi }, K = { ki }, H = { hi }</p>
    <p>A GHT is defined by the tuple {M, K, H} M = { 2, 2, 4 } K = { 2, 2 } H = { h0, h1, h2 }</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 13</p>
    <p>Universal Hash Functions</p>
    <p>Single-key hashing  h(x)=((ax + b) mod p) mod r</p>
    <p>p is a prime that is greater than all possible key values</p>
    <p>r is the target range  a and b are randomly picked integers at</p>
    <p>level creation time  x is the key value</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 14</p>
    <p>Insertion Example</p>
    <p>h0(key) = 1</p>
    <p>h1(key) = 6</p>
    <p>h2(key) = 1</p>
    <p>empty bucket</p>
    <p>occupied bucket</p>
    <p>collision</p>
    <p>h3(key) = 3</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 15</p>
    <p>Types of GHTs</p>
    <p>Thin Trees Expected depth of</p>
    <p>the tree is O(log(n))</p>
    <p>Space cost is linearly bounded, it is O(mn) in the worst case</p>
    <p>m buckets k siblings</p>
    <p>All nodes in the above level are parents</p>
    <p>Fully Fat Trees</p>
    <p>Hashing at one layer is isolated from above layers, Same level buckets form a large target hash table</p>
    <p>Hashing properties are the same as fat trees; both would have the same depth for a given insertion</p>
    <p>sequence</p>
    <p>Multi-Level Hash Table</p>
    <p>Space overhead may grow needlessly</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 16</p>
    <p>Complexity Issues</p>
    <p>The expected tree depth of a GHT is O(logkn)  thin, fat and multi-level hash trees</p>
    <p>The expected space cost of a thin tree is (n)</p>
    <p>With high probability, the expected space cost of a fat tree and a multi-level hash table is O(n3)</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 17</p>
    <p>Optimizations</p>
    <p>Linear probing  improves space utilization  average access time remains logarithmic  incurs little overhead  large block I/O</p>
    <p>Large first-level hash table  result in more shallow trees</p>
    <p>Parallel access</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 18</p>
    <p>Disposition of Records</p>
    <p>Records must be destoyed in a way that they can never be restored  physically destroy the storage device  overwrite several times with specific patterns</p>
    <p>Disposal of records is not always sufficient  Index entries give clues about records that are</p>
    <p>cleaned up  full text indexes can even be used to reconstruct</p>
    <p>whole shredded documents</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 19</p>
    <p>Disposition of Index Entries</p>
    <p>Some metadata is required  i.e. expiry date of records</p>
    <p>In order to decrease metadata overhead, disposition units are kept large  records are grouped by expiry dates</p>
    <p>Hard to dispose index entries together with records  an index entry is likely to much smaller than a</p>
    <p>disposition unit  indexes are clustered based on the key value, not</p>
    <p>expiry dates of records</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 20</p>
    <p>Scrambled Keys</p>
    <p>Use scrambled key values in the index  use a cryptographic hash function on the keys</p>
    <p>before insertion, i.e. SHA-1  computationally infeasible to return back from</p>
    <p>scrambled keys in the index</p>
    <p>Approach is vulnerable to existence testing  When key space is small, a reverse map could</p>
    <p>be constructed easily  English language has 616,500 words, easy to build</p>
    <p>a reverse hash map</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 21</p>
    <p>Logical Disposition</p>
    <p>Group records into disposition groups  i.e. by expiry dates</p>
    <p>For each disposition group, generate an encoding and decoding function  encoding function transforms record locators, which</p>
    <p>are then stored in the index  decoding function transforms stored locators back</p>
    <p>to actual locators  Dispose functions together with its disposition</p>
    <p>group</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 22</p>
    <p>Logical Disposition (contd)</p>
    <p>Indirect pointer method  encoding and decoding functions are</p>
    <p>realized through expiration control blocks  space needed for the ECBs is a drawback</p>
    <p>Use encryption and decryption  realize encoding and decoding functions by</p>
    <p>encryption and decryption using a secret key, i.e. AES</p>
    <p>dispose the secret key at time of disposal</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 23</p>
    <p>Example - ECB</p>
    <p>GHT</p>
    <p>Sell</p>
    <p>ICML</p>
    <p>ECB</p>
    <p>x y</p>
    <p>Documents</p>
    <p>Index contains pointers to ECB</p>
    <p>ECB contains actual record locators</p>
    <p>GHT</p>
    <p>Sell</p>
    <p>ICML Once ECB is destroyed, converting pointers to actual locators is not possible</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 24</p>
    <p>Simulation Results</p>
    <p>Size of tree nodes (m)  while n is constant, average depth of GHT</p>
    <p>decreases linearly with increasing m  GHT is only two levels deeper than ideal tree</p>
    <p>on the average  space cost increases with increasing m</p>
    <p>for larger values of m, space cost seems to be stable for longer periods of time</p>
    <p>space cost of thin trees and fat trees are similar  Prefer larger m</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 25</p>
    <p>Simulation Results (contd)</p>
    <p>Growth Factor (k)  while n is constant, average depth of GHT</p>
    <p>decreases quadratically with increasing k  GHT is again only two levels deeper than</p>
    <p>ideal tree on the average  space cost increases quickly with larger k  Prefer larger k only if space cost is not a</p>
    <p>concern  small k still lead to reasonable access</p>
    <p>performance</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 26</p>
    <p>Simulation Results (contd)</p>
    <p>Larger first-level hash table  decreases average tree depth significantly  does not influence space cost</p>
    <p>Linear probing  average tree depth is almost identical with</p>
    <p>ideal tree  space cost is significantly reduced  Different types of GHTs tend to have the</p>
    <p>same properties</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 27</p>
    <p>Comparison</p>
    <p>GHTs with linear probing have been compared with  rewritable B-trees</p>
    <p>vulnerable to logical tampering of records  k-way tree</p>
    <p>able to prevent logical tampering  ideal tree</p>
    <p>Experiments were done setting m = k  not an optimal setting for GHTs</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 28</p>
    <p>Comparison (contd)</p>
    <p>k-way tree is by far the worst  average k-way tree depth is 3-5 times of</p>
    <p>average GHT depth</p>
    <p>GHTs perform equal or up to 12.5% better than B-trees  Yet B-trees are not fossilized</p>
    <p>In every case average GHT depth is very close to ideal tree depth</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 29</p>
    <p>Conclusion</p>
    <p>Trustworthy record keeping is critical  storing records on WORM storage is far</p>
    <p>from being adequate  records may suffer from logical modification</p>
    <p>need indexes for quick access to enormous volumes of data  index must prevent records from logical</p>
    <p>modification  index entries must be disposed of together with</p>
    <p>records themselves</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 30</p>
    <p>Conclusion (contd)</p>
    <p>Fossilized Index  protects records from logical modification</p>
    <p>Generalized Hash Trees  data structure used to implement a</p>
    <p>fossilized index  Logical Disposition  Theoretical analysis and simulations</p>
    <p>GHTs offer high performance at low storage cost</p>
  </div>
  <div class="page">
    <p>Boazii, 2005 - Reha K. Gereker 31</p>
    <p>Thank You</p>
  </div>
</Presentation>
