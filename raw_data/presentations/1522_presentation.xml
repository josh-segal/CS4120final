<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Write Once, Get 50% Free: Saving SSD Erase Costs Using WOM Codes</p>
    <p>Gala Yadgar, Eitan Yaakobi, and Assaf Schuster</p>
    <p>Computer Science</p>
    <p>Technion</p>
    <p>Technion  Israel Institute of Technology</p>
  </div>
  <div class="page">
    <p>Reusing Flash with WOM Codes</p>
    <p>Reusable SSD:</p>
    <p>Perform additional writes before erasure</p>
    <p>Extend lifetime</p>
    <p>Improve performance</p>
    <p>Preserve capacity and interface 2</p>
    <p>ERASE</p>
    <p>WRITE</p>
    <p>REWRITE</p>
    <p>ERASE</p>
    <p>Reusing Flash with WOM Codes</p>
  </div>
  <div class="page">
    <p>Write-Once Memory Codes</p>
    <p>0  1  1  0</p>
    <p>WOM Code: write n bits of information on m cells, n&gt;m</p>
    <p>Example: write 11 and then write 01</p>
    <p>Normally:</p>
    <p>WOM code:</p>
    <p>data 1st write 2nd write</p>
    <p>(Rivest and Shamir, 1982)</p>
  </div>
  <div class="page">
    <p>Write-Once Memory Codes</p>
    <p>0  1  1  0</p>
    <p>WOM Code: write n bits of information on m cells, n&gt;m</p>
    <p>Example: write 11 and then write 01</p>
    <p>Normally:</p>
    <p>WOM code:</p>
    <p>data 1st write 2nd write</p>
    <p>(Rivest and Shamir, 1982)</p>
  </div>
  <div class="page">
    <p>Typical Use of WOM Codes</p>
    <p>User writes logical data pages</p>
    <p>Page size increases with encoding</p>
    <p>Invalid pages are reused without erasing</p>
    <p>Read before the second write [Grupp et. al., MICRO 09][Jagmohan et.al., MSST 10]</p>
    <p>[Loujie et. al., GLOBECOM 12] [Jacobvitz et.al., HPCA 13][Odeh and Cassuto, MSST 14]</p>
    <p>data 1st write 2nd write</p>
    <p>Data Size Encoded Size</p>
    <p>WOM ENCODER</p>
  </div>
  <div class="page">
    <p>Typical Use of WOM Codes</p>
    <p>User writes logical data pages</p>
    <p>Page size increases with encoding</p>
    <p>Invalid pages are reused without erasing</p>
    <p>Read before the second write [Grupp et. al., MICRO 09][Jagmohan et.al., MSST 10]</p>
    <p>[Loujie et. al., GLOBECOM 12] [Jacobvitz et.al., HPCA 13][Odeh and Cassuto, MSST 14]</p>
    <p>data 1st write 2nd write</p>
    <p>Data Size Encoded Size</p>
    <p>WOM ENCODER</p>
  </div>
  <div class="page">
    <p>Drawbacks of Typical Use</p>
    <p>Capacity overhead:  29%-50% additional storage is needed for WOM coding</p>
    <p>Performance overheads:  I/O operations access 29%-50% more bits</p>
    <p>A read precedes every second write</p>
    <p>Compatibility:  Requires modification in physical page size</p>
    <p>Applicbality:  High encoding/decoding complexity</p>
    <p>Data Size Encoded Size</p>
    <p>Overprovisioning</p>
  </div>
  <div class="page">
    <p>Reusable SSD Design Goals</p>
    <p>Do not touch:</p>
    <p>Interface</p>
    <p>Performance</p>
    <p>Logical capacity</p>
    <p>Polar WOM Codes [Burshtein and Strugatski, IT `13]</p>
    <p>Efficient</p>
    <p>May fail</p>
    <p>WOM ENCODER</p>
    <p>!!!</p>
  </div>
  <div class="page">
    <p>Reusable SSD Design Goals</p>
    <p>Do not touch:</p>
    <p>Interface</p>
    <p>Performance</p>
    <p>Logical capacity</p>
    <p>Avoid latency by parallelizing</p>
    <p>Handle failures by retrying</p>
    <p>5% of encodings fail</p>
    <p>0.25% of encodings fail twice</p>
    <p>Fall back to 1st write</p>
    <p>Polar WOM Codes [Burshtein and Strugatski, IT `13]</p>
    <p>Efficient</p>
    <p>May fail</p>
    <p>WOM ENCODER</p>
    <p>WOM ENCODER</p>
    <p>WOM ENCODER</p>
  </div>
  <div class="page">
    <p>Reusable SSD</p>
    <p>1st write: (almost) unmodified  no overhead</p>
    <p>2nd write: one logical page  two physical pages</p>
    <p>Data Size Encoded Size</p>
  </div>
  <div class="page">
    <p>Reusable SSD</p>
    <p>1st write: (almost) unmodified  no overhead</p>
    <p>2nd write: one logical page  two physical pages</p>
    <p>ENCODER</p>
    <p>Encoded Size</p>
  </div>
  <div class="page">
    <p>Reusable SSD</p>
    <p>ENCODER</p>
    <p>1st write: (almost) unmodified  no overhead</p>
    <p>2nd write: one logical page  two physical pages</p>
  </div>
  <div class="page">
    <p>Reusable SSD</p>
    <p>ENCODER</p>
    <p>1st write: (almost) unmodified  no overhead</p>
    <p>2nd write: one logical page  two physical pages</p>
  </div>
  <div class="page">
    <p>Reusable SSD</p>
    <p>ENCODER</p>
    <p>1st write: (almost) unmodified  no overhead</p>
    <p>2nd write: one logical page  two physical pages</p>
  </div>
  <div class="page">
    <p>The Benefit of Reusable SSD</p>
    <p>Standard SSD (best case):  =</p>
    <p>Reusable SSD (best case): write once, get 50% free</p>
    <p>E =</p>
    <p>+ 2 =</p>
    <p>33% reduction in erasures</p>
    <p>Logical Capacity</p>
    <p>Overprovisioning (OP)</p>
    <p>Erasures Logical pages written</p>
    <p>Pages per block</p>
  </div>
  <div class="page">
    <p>Putting it All Together</p>
    <p>clean</p>
    <p>recycled</p>
    <p>clean</p>
    <p>recycled</p>
    <p>load balancing (FTL)</p>
    <p>User Write</p>
    <p>P la</p>
    <p>n e</p>
    <p>P la</p>
    <p>n e</p>
    <p>clean used recycled reused</p>
    <p>full full</p>
    <p>garbage collection: lifetime?</p>
    <p>#recycled+#reused?</p>
    <p>garbage collection</p>
    <p>erase</p>
  </div>
  <div class="page">
    <p>Extending SSD Lifetime</p>
    <p>User level  Caching, admission control, specialized FS/DB [Soundararajan et. al., FAST 10][Oh et. al., FAST 12] [Li et. al., ATC 14][Marmol et. al., HotStorage 14]</p>
    <p>FTL  Wear leveling, throttling, partitioning,</p>
    <p>buffering, deduplication [Agarwal et. al., ATC 08][Lee et. al., FAST 12] [Desnoyers TOS 14][Kim and Ahn, FAST 08] [Gupta et. al., FAST 11]</p>
    <p>Code  Error correction [Cai et. al., DATE 12][Pan et. al., FAST 11][Zhao et. al., FAST 13]</p>
    <p>Flash  Write voltage/speed [Jeong et. al., FAST 14]</p>
    <p>SSD</p>
    <p>FTL</p>
    <p>110101011101</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How many erasures saved?</p>
    <p>How is performance affected?</p>
    <p>Sensitivity to design parameters</p>
    <p>DiskSim simulator  Available SSD extension</p>
    <p>Modified FTL component</p>
    <p>Trace input:  MSR Cambridge + Exchange</p>
    <p>Synthetic Zipf</p>
    <p>Type Pgs/Blk R (us) W (ms) E (ms)</p>
    <p>SLC 64 30 0.3 3</p>
    <p>MLC 128 200 1.3 1.5</p>
    <p>MLC 256 80 1.5 5</p>
  </div>
  <div class="page">
    <p>Erasures</p>
    <p>Expected 33%</p>
    <p>reduction</p>
  </div>
  <div class="page">
    <p>Response Time</p>
    <p>Enterprise: up to 15% reduction</p>
    <p>Consumer: up to 35% reduction</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>First applicable design of re-writes in SSD</p>
    <p>Unmodified logical capacity</p>
    <p>No hardware modification</p>
    <p>Efficient computation</p>
    <p>Up to 50% additional free writes</p>
    <p>Less erasures  improved performance</p>
    <p>Parallel 2nd writes</p>
    <p>Prefetching</p>
    <p>Independent retries</p>
    <p>This is only the beginning!</p>
    <p>Improved codes</p>
    <p>Hardware encoders</p>
  </div>
</Presentation>
