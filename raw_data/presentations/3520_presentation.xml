<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DIZK A Distributed Zero Knowledge Proof System</p>
    <p>Howard Wu, Wenting Zheng, Alessandro Chiesa, Raluca Ada Popa, Ion Stoica University of California Berkeley</p>
    <p>!1</p>
  </div>
  <div class="page">
    <p>Zero Knowledge Proof</p>
    <p>!2</p>
    <p>[GMR 85]</p>
  </div>
  <div class="page">
    <p>Zero Knowledge Proof</p>
    <p>!2</p>
    <p>[GMR 85]</p>
    <p>Prover Verifier</p>
  </div>
  <div class="page">
    <p>Zero Knowledge Proof</p>
    <p>!2</p>
    <p>[GMR 85]</p>
    <p>Prover Verifier</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>F function</p>
    <p>y claimed output</p>
  </div>
  <div class="page">
    <p>Zero Knowledge Proof</p>
    <p>!2</p>
    <p>[GMR 85]</p>
    <p>Prover Verifier I know x s.t. F(x) = y</p>
    <p>x private input</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>F function</p>
    <p>y claimed output</p>
  </div>
  <div class="page">
    <p>Zero Knowledge Proof</p>
    <p>!2</p>
    <p>[GMR 85]</p>
    <p>Prover Verifier I know x s.t. F(x) = y</p>
    <p>x private input</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>F function</p>
    <p>y claimed output</p>
  </div>
  <div class="page">
    <p>zkSNARK</p>
    <p>!3</p>
    <p>Prover Verifier I know x s.t. y = F(x)</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>x private input</p>
    <p>F function</p>
    <p>y claimed output</p>
  </div>
  <div class="page">
    <p>zkSNARK</p>
    <p>!3</p>
    <p>Prover Verifier I know x s.t. y = F(x)</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>x private input</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>Non-interactive</p>
  </div>
  <div class="page">
    <p>zkSNARK</p>
    <p>!3</p>
    <p>Prover</p>
    <p>Verifier</p>
    <p>I know x s.t. y = F(x)</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>x private input F function y claimed outputNon-interactive</p>
    <p>Succinct</p>
  </div>
  <div class="page">
    <p>zkSNARK</p>
    <p>!3</p>
    <p>Prover</p>
    <p>Verifier</p>
    <p>I know x s.t. y = F(x)</p>
    <p>F function</p>
    <p>y claimed output</p>
    <p>x private input</p>
    <p>F function</p>
    <p>y claimed outputNon-interactive</p>
    <p>Succinct</p>
    <p>Setup</p>
    <p>Verification Key Proving Key</p>
    <p>F function</p>
    <p>preprocessing</p>
  </div>
  <div class="page">
    <p>Application #1 [BCGGMTV 14]</p>
    <p>!4</p>
  </div>
  <div class="page">
    <p>Application #1</p>
    <p>ALICE BOB</p>
    <p>[BCGGMTV 14]</p>
    <p>!4</p>
  </div>
  <div class="page">
    <p>Application #1</p>
    <p>ALICE BOB</p>
    <p>$1.00</p>
    <p>[BCGGMTV 14]</p>
    <p>!4</p>
  </div>
  <div class="page">
    <p>Application #1</p>
    <p>ALICE BOB</p>
    <p>$1.00</p>
    <p>Anonymous P2P Payments</p>
    <p>[BCGGMTV 14]</p>
    <p>!4</p>
  </div>
  <div class="page">
    <p>Application #2</p>
    <p>!5</p>
  </div>
  <div class="page">
    <p>Application #2</p>
    <p>Smart Contracts</p>
    <p>!5</p>
  </div>
  <div class="page">
    <p>Application #2</p>
    <p>Smart Contracts</p>
    <p>!5</p>
    <p>F(x) = y</p>
  </div>
  <div class="page">
    <p>Application #2</p>
    <p>Smart Contracts</p>
    <p>!5</p>
    <p>F(x) = y?F(x) = y?</p>
    <p>F(x) = y?F(x) = y</p>
  </div>
  <div class="page">
    <p>Application #2</p>
    <p>Smart Contracts</p>
    <p>!5</p>
    <p>F(x) = y?F(x) = y?</p>
    <p>F(x) = y?</p>
  </div>
  <div class="page">
    <p>Application #2</p>
    <p>Smart Contracts</p>
    <p>!5</p>
    <p>F(x) = y?F(x) = y?</p>
    <p>F(x) = y??</p>
    <p>??</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
    <p>Application #1 (Private payments)</p>
    <p>Application #2 (Typical smart</p>
    <p>contract execution)</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
    <p>Application #1 (Private payments)</p>
    <p>Application #2 (Typical smart</p>
    <p>contract execution)</p>
    <p>Application #2 (Large smart</p>
    <p>contract execution)</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
    <p>monolithic zkSNARK runs out of memory10</p>
    <p>Application #1 (Private payments)</p>
    <p>Application #2 (Typical smart</p>
    <p>contract execution)</p>
    <p>Application #2 (Large smart</p>
    <p>contract execution)</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
    <p>monolithic zkSNARK runs out of memory10</p>
    <p>Application #1 (Private payments)</p>
    <p>Application #2 (Typical smart</p>
    <p>contract execution)</p>
    <p>Application #2 (Large smart</p>
    <p>contract execution)</p>
  </div>
  <div class="page">
    <p>Good News &amp; Bad News</p>
    <p>Circuit size (logarithmic)</p>
    <p>!6</p>
    <p>monolithic zkSNARK runs out of memory</p>
    <p>Feasible?</p>
    <p>Application #1 (Private payments)</p>
    <p>Application #2 (Typical smart</p>
    <p>contract execution)</p>
    <p>Application #2 (Large smart</p>
    <p>contract execution)</p>
  </div>
  <div class="page">
    <p>DIZK is a zero knowledge proof system that is:</p>
    <p>!7</p>
  </div>
  <div class="page">
    <p>DIZK is a zero knowledge proof system that is:</p>
    <p>!7</p>
    <p>DISTRIBUTED Enables the execution of a zkSNARK</p>
    <p>Setup and Prover across a compute cluster</p>
  </div>
  <div class="page">
    <p>DIZK is a zero knowledge proof system that is:</p>
    <p>SCALABLE Reaches heretofore unreachable circuit sizes (up to billions of gates)</p>
    <p>Double the number of machines  twice the circuit size</p>
    <p>!7</p>
    <p>DISTRIBUTED Enables the execution of a zkSNARK</p>
    <p>Setup and Prover across a compute cluster</p>
  </div>
  <div class="page">
    <p>DIZK is a zero knowledge proof system that is:</p>
    <p>SCALABLE Reaches heretofore unreachable circuit sizes (up to billions of gates)</p>
    <p>Double the number of machines  twice the circuit size</p>
    <p>!7</p>
    <p>PARALLEL Speeds up the time it takes to generate a proof Double the number of machines  twice as fast</p>
    <p>DISTRIBUTED Enables the execution of a zkSNARK</p>
    <p>Setup and Prover across a compute cluster</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>MONOLITHIC zkSNARK</p>
    <p>[Groth16]</p>
    <p>!8</p>
  </div>
  <div class="page">
    <p>DISTRIBUTED zkSNARK</p>
    <p>Our Approach</p>
    <p>MONOLITHIC zkSNARK</p>
    <p>[Groth16]</p>
    <p>!8</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>!9</p>
    <p>Setup</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>!9</p>
    <p>Setup Setup</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>F</p>
    <p>w secret input</p>
    <p>Proving Key</p>
    <p>!9</p>
    <p>Setup Setup</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>F</p>
    <p>w secret input</p>
    <p>Proving Key</p>
    <p>!9</p>
    <p>Setup Setup</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>F</p>
    <p>w secret input</p>
    <p>Proving Key</p>
    <p>!9</p>
    <p>Setup Setup</p>
    <p>as terabit-sized arrays</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>F</p>
    <p>w secret input</p>
    <p>Proving Key</p>
    <p>!9</p>
    <p>Setup Setup</p>
    <p>as terabit-sized arrays</p>
    <p>in complex patterns</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>F</p>
    <p>w secret input</p>
    <p>Proving Key</p>
    <p>!9</p>
    <p>Setup Setup</p>
    <p>as terabit-sized arrays</p>
    <p>in complex patterns 4. Synchronizing shared state that incurs significant network delays</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Prover Verifier</p>
    <p>function F</p>
    <p>Proving Key Verification Key</p>
    <p>input</p>
    <p>w</p>
    <p>x</p>
    <p>secret input</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Prover</p>
    <p>F</p>
    <p>w secret input</p>
    <p>Proving Key</p>
    <p>!9</p>
    <p>Setup Setup</p>
    <p>as terabit-sized arrays</p>
    <p>in complex patterns 4. Synchronizing shared state that incurs significant network delays</p>
    <p>Distributing a zkSNARK is challenging</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>!10</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>Distributed Setup</p>
    <p>F</p>
    <p>!10</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>Distributed Setup</p>
    <p>F</p>
    <p>!10</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>Verification Key</p>
    <p>Distributed Setup</p>
    <p>F</p>
    <p>Proving Key</p>
    <p>!10</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>Verification Key</p>
    <p>input x</p>
    <p>Distributed Setup</p>
    <p>F w secret input</p>
    <p>Proving Key</p>
    <p>!10</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
    <p>Distributed Prover Distributed Witness Reduction</p>
    <p>Distributed FFT</p>
    <p>Distributed varMSM</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>VerifierVerification Key</p>
    <p>input x</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Distributed Setup</p>
    <p>F w secret input</p>
    <p>Proving Key</p>
    <p>!10</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
    <p>Distributed Prover Distributed Witness Reduction</p>
    <p>Distributed FFT</p>
    <p>Distributed varMSM</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>VerifierVerification Key</p>
    <p>input x</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Distributed Setup</p>
    <p>F w secret input</p>
    <p>Proving Key</p>
    <p>!11</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
    <p>Distributed Prover Distributed Witness Reduction</p>
    <p>Distributed FFT</p>
    <p>Distributed varMSM</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>VerifierVerification Key</p>
    <p>input x</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Distributed Setup</p>
    <p>F w secret input</p>
    <p>Proving Key</p>
    <p>!11</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
    <p>Distributed Prover Distributed Witness Reduction</p>
    <p>Distributed FFT</p>
    <p>Distributed varMSM</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>VerifierVerification Key</p>
    <p>input x</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Distributed Setup</p>
    <p>F w secret input</p>
    <p>Proving Key</p>
    <p>!11</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
    <p>Distributed Prover Distributed Witness Reduction</p>
    <p>Distributed FFT</p>
    <p>Distributed varMSM</p>
    <p>in the paper</p>
    <p>in the paper in the paper</p>
    <p>in the paper</p>
  </div>
  <div class="page">
    <p>DIZK Architecture</p>
    <p>VerifierVerification Key</p>
    <p>input x</p>
    <p>accept or reject</p>
    <p>x</p>
    <p>Distributed Setup</p>
    <p>F w secret input</p>
    <p>Proving Key</p>
    <p>!11</p>
    <p>Distributed Instance Reduction</p>
    <p>Distributed Lagrange</p>
    <p>Distributed fixMSM</p>
    <p>Distributed Prover Distributed Witness Reduction</p>
    <p>Distributed FFT</p>
    <p>Distributed varMSM</p>
    <p>in the paper</p>
    <p>in the paper in the paper</p>
    <p>in the paper</p>
  </div>
  <div class="page">
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>Billion gate circuit  Billion degree polynomial</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>( Ni= 0 Ai(X) zi)  ( N i= 0 Bi(X) zi)  (</p>
    <p>N i= 0 Ci(X) zi)</p>
    <p>ZD(X)</p>
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>Billion gate circuit  Billion degree polynomial</p>
    <p>H(X) =</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>( Ni= 0 Ai(X) zi)  ( N i= 0 Bi(X) zi)  (</p>
    <p>N i= 0 Ci(X) zi)</p>
    <p>ZD(X)</p>
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>Billion gate circuit  Billion degree polynomial</p>
    <p>H(X) =</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>( Ni= 0 Ai(X) zi)  ( N i= 0 Bi(X) zi)  (</p>
    <p>N i= 0 Ci(X) zi)</p>
    <p>ZD(X)</p>
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>Billion gate circuit  Billion degree polynomial N = 109</p>
    <p>H(X) =</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>( Ni= 0 Ai(X) zi)  ( N i= 0 Bi(X) zi)  (</p>
    <p>N i= 0 Ci(X) zi)</p>
    <p>ZD(X)</p>
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>Billion gate circuit  Billion degree polynomial N = 109</p>
    <p>H(X) =</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>( Ni= 0 Ai(X) zi)  ( N i= 0 Bi(X) zi)  (</p>
    <p>N i= 0 Ci(X) zi)</p>
    <p>ZD(X)</p>
    <p>Witness Reduction</p>
    <p>!12</p>
    <p>Billion gate circuit  Billion degree polynomial N = 109</p>
    <p>H(X) =</p>
    <p>vector of N + 1 field elementsmatrix z =A = (A0, , AN)</p>
    <p>[GGPR 13]</p>
  </div>
  <div class="page">
    <p>Strawman for</p>
    <p>!13</p>
    <p>Ni= 0 Ai(X) zi</p>
  </div>
  <div class="page">
    <p>Strawman for</p>
    <p>!13</p>
    <p>matrix a = (a0, , aN)</p>
    <p>N + 1</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>M</p>
    <p>Ni= 0 Ai(X) zi</p>
  </div>
  <div class="page">
    <p>Strawman for</p>
    <p>!13</p>
    <p>vectormatrix za = (a0, , aN)</p>
    <p>N + 1 N + 1 . . .</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>M 1</p>
    <p>Ni= 0 Ai(X) zi</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>Ni= 0 Ai(X) ziStrawman for</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Ni= 0 Ai(X) ziStrawman for</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Ni= 0 Ai(X) ziStrawman for</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Ni= 0 Ai(X) ziStrawman for</p>
  </div>
  <div class="page">
    <p>!14</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>join</p>
    <p>join</p>
    <p>join</p>
    <p>Ni= 0 Ai(X) ziStrawman for</p>
  </div>
  <div class="page">
    <p>!15</p>
    <p>Strawman for Ni= 0 Ai(X) zi</p>
  </div>
  <div class="page">
    <p>!15</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>Strawman for Ni= 0 Ai(X) zi (ai, zi) pairs</p>
  </div>
  <div class="page">
    <p>!16</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>Strawman for Ni= 0 Ai(X) zi</p>
  </div>
  <div class="page">
    <p>!16</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>!16</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>!16</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>!16</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>OK OK OK OK OK OKBAD</p>
    <p>fast fast fast fast fast fastslow</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>!17</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>!17</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>!17</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0) . . . (0, z1) (0, z1) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>OK OK OK OK</p>
    <p>BAD fast fast</p>
    <p>fast fast</p>
    <p>slow</p>
    <p>Strawman for Ni= 0 Ai(X) zi Almost sparse</p>
  </div>
  <div class="page">
    <p>Off-the-shelf Approaches</p>
    <p>!18</p>
  </div>
  <div class="page">
    <p>Off-the-shelf Approaches</p>
    <p>!18</p>
    <p>Replicate and partition the data so that the computation is distributed evenly.</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!19</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!19</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Replicated each entry for every machine</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!19</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Replicated each entry for every machine</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!20</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0)</p>
    <p>(aN,M, zN)</p>
    <p>(aN,0, z0) (aN,1, z0)</p>
    <p>(aN,2, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(aN,0, zN) (aN,1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(aN,2, z0) . . .</p>
    <p>(aN,3, z0) . . .</p>
    <p>(aN,3, zN)</p>
    <p>. . . . . .</p>
    <p>(a0,0, zN) (a0,1, zN) (a0,2, zN)</p>
    <p>(aN,M, z0)(aN,M1, z0)</p>
    <p>(aN,M1, z0)</p>
    <p>(a0,3, z0)</p>
    <p>(a0,3, zN) . . . . . . . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,M1, z0)</p>
    <p>(a0,M, zN)(a0,M1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!20</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0)</p>
    <p>(aN,M, zN)</p>
    <p>(aN,0, z0) (aN,1, z0)</p>
    <p>(aN,2, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(N + 1) * (# partitions) replications</p>
    <p>(aN,0, zN) (aN,1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(aN,2, z0) . . .</p>
    <p>(aN,3, z0) . . .</p>
    <p>(aN,3, zN)</p>
    <p>. . . . . .</p>
    <p>(a0,0, zN) (a0,1, zN) (a0,2, zN)</p>
    <p>(aN,M, z0)(aN,M1, z0)</p>
    <p>(aN,M1, z0)</p>
    <p>(a0,3, z0)</p>
    <p>(a0,3, zN) . . . . . . . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,M1, z0)</p>
    <p>(a0,M, zN)(a0,M1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!20</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0)</p>
    <p>(aN,M, zN)</p>
    <p>(aN,0, z0) (aN,1, z0)</p>
    <p>(aN,2, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(N + 1) * (# partitions) replications</p>
    <p>Billions</p>
    <p>(aN,0, zN) (aN,1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(aN,2, z0) . . .</p>
    <p>(aN,3, z0) . . .</p>
    <p>(aN,3, zN)</p>
    <p>. . . . . .</p>
    <p>(a0,0, zN) (a0,1, zN) (a0,2, zN)</p>
    <p>(aN,M, z0)(aN,M1, z0)</p>
    <p>(aN,M1, z0)</p>
    <p>(a0,3, z0)</p>
    <p>(a0,3, zN) . . . . . . . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,M1, z0)</p>
    <p>(a0,M, zN)(a0,M1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!20</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0)</p>
    <p>(aN,M, zN)</p>
    <p>(aN,0, z0) (aN,1, z0)</p>
    <p>(aN,2, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(N + 1) * (# partitions) replications</p>
    <p>Billions</p>
    <p>(aN,0, zN) (aN,1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(aN,2, z0) . . .</p>
    <p>(aN,3, z0) . . .</p>
    <p>(aN,3, zN)</p>
    <p>. . . . . .</p>
    <p>(a0,0, zN) (a0,1, zN) (a0,2, zN)</p>
    <p>(aN,M, z0)(aN,M1, z0)</p>
    <p>(aN,M1, z0)</p>
    <p>(a0,3, z0)</p>
    <p>(a0,3, zN) . . . . . . . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,M1, z0)</p>
    <p>(a0,M, zN)(a0,M1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Every partition is now dense, therefore the computation is uniform.</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>blockjoin</p>
    <p>!20</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0)</p>
    <p>(aN,M, zN)</p>
    <p>(aN,0, z0) (aN,1, z0)</p>
    <p>(aN,2, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(N + 1) * (# partitions) replications</p>
    <p>Billions</p>
    <p>(aN,0, zN) (aN,1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(aN,2, z0) . . .</p>
    <p>(aN,3, z0) . . .</p>
    <p>(aN,3, zN)</p>
    <p>. . . . . .</p>
    <p>(a0,0, zN) (a0,1, zN) (a0,2, zN)</p>
    <p>(aN,M, z0)(aN,M1, z0)</p>
    <p>(aN,M1, z0)</p>
    <p>(a0,3, z0)</p>
    <p>(a0,3, zN) . . . . . . . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,M1, z0)</p>
    <p>(a0,M, zN)(a0,M1, zN)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Every partition is now dense, therefore the computation is uniform.</p>
    <p>(However, the table is huge and impractical to compute)</p>
    <p>(Common technique to address data skew)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!21</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!21</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>a0 a1</p>
    <p>aN</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Compute usage statistics and replicate frequently-used entries</p>
    <p>for every machine</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!22</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!22</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!22</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . . . . .</p>
    <p>z0 z1</p>
    <p>join</p>
    <p>join</p>
    <p>join zN</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!22</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . . . . .</p>
    <p>z0 z1</p>
    <p>join</p>
    <p>join</p>
    <p>join zN</p>
    <p>== Strawman (Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!23</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!23</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!23</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . . . . .</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!23</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . . . . .</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>skewjoin</p>
    <p>!23</p>
    <p>(a0,0, z0)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(a0,1, z0) (a0,2, z0) (a0,M, z0) . . . (a1,0, z1) (a1,1, z1) (a1,2, z1)</p>
    <p>(aN,M, zN)</p>
    <p>(a1,M, z1)</p>
    <p>(aN,0, zN) (aN,1, zN) (aN,2, zN)</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>== blockjoin</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>(Another common technique to address data skew. Source: Tresata)</p>
  </div>
  <div class="page">
    <p>Tailored Approach</p>
    <p>!24</p>
  </div>
  <div class="page">
    <p>Tailored Approach</p>
    <p>!24</p>
    <p>Isolate and transform the data so that the computation is distributed evenly.</p>
  </div>
  <div class="page">
    <p>!25</p>
    <p>.</p>
    <p>.</p>
    <p>. . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Tailored Approach  Part 1 Identify Dense Vectors</p>
  </div>
  <div class="page">
    <p>!25</p>
    <p>.</p>
    <p>.</p>
    <p>. . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Density Count</p>
    <p>N</p>
    <p>dense</p>
    <p>sparse</p>
    <p>sparse</p>
    <p>sparse</p>
    <p>sparse00</p>
    <p>Tailored Approach  Part 1 Identify Dense Vectors</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>.</p>
    <p>.</p>
    <p>. . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Density Count</p>
    <p>N dense</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>.</p>
    <p>.</p>
    <p>. . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Density Count</p>
    <p>N dense</p>
    <p>Split into sparse partitions</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>.</p>
    <p>.</p>
    <p>. . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Density Count</p>
    <p>N dense</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>Split into sparse partitions</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
  </div>
  <div class="page">
    <p>!26</p>
    <p>.</p>
    <p>.</p>
    <p>. . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Density Count</p>
    <p>N dense</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>z0 z1</p>
    <p>zN</p>
    <p>Hybrid Join Split into sparse partitions</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
  </div>
  <div class="page">
    <p>!27</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0)</p>
    <p>(0, z1) (0, z1) . . . . . .</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>. . . Each partition has just 1 nonzero computation</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
  </div>
  <div class="page">
    <p>!28</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0)</p>
    <p>(0, z1) (0, z1) . . . . . .</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>. . .</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
    <p>Each partition has just 1 nonzero computation</p>
  </div>
  <div class="page">
    <p>!28</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>(0, z1)</p>
    <p>(0, zN)(0, zN) (0, zN) . . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>. . .</p>
    <p>(991, z0) (681, z0) (1978, z0) (517, z0)</p>
    <p>(0, z1) (0, z1) . . . . . .</p>
    <p>(2476, z1)</p>
    <p>(8629, zN)</p>
    <p>. . . 991  z0 681  z0 1978  z0 . . . . . . . . . 517  z0 . . . 2476  z1 000</p>
    <p>. . . . . . . . . . . . . . . . . . . . .</p>
    <p>. . . . . . . . . . . . . . . . . . . . .</p>
    <p>. . . 8629  zN 000</p>
    <p>Tailored Approach  Part 2 Employ a Hybrid Solution</p>
    <p>Each partition has just 1 nonzero computation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>!29</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Cluster-computing framework on Apache Spark</p>
    <p>!29</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>System written in Java (~10k lines of code)</p>
    <p>Cluster-computing framework on Apache Spark</p>
    <p>!29</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>System written in Java (~10k lines of code)</p>
    <p>Cluster-computing framework on Apache Spark</p>
    <p>Experiments on Amazon EC2:  r3.8xlarge instances (32 vCPUs, 244 GiB of memory)</p>
    <p>!29</p>
  </div>
  <div class="page">
    <p>Largest Supported Circuit Size</p>
    <p>DIZK</p>
    <p>!30</p>
    <p>log2 circuit size</p>
    <p># machines</p>
    <p>libsnark</p>
  </div>
  <div class="page">
    <p>Largest Supported Circuit Size</p>
    <p>DIZK</p>
    <p>!30</p>
    <p>log2 circuit size</p>
    <p># machines</p>
    <p>libsnark</p>
  </div>
  <div class="page">
    <p>Largest Supported Circuit Size</p>
    <p>DIZK</p>
    <p>!30</p>
    <p>log2 circuit size</p>
    <p># machines</p>
    <p>~4 million gateslibsnark</p>
  </div>
  <div class="page">
    <p>Largest Supported Circuit Size</p>
    <p>DIZK</p>
    <p>!30</p>
    <p>log2 circuit size</p>
    <p># machines</p>
    <p>~4 million gateslibsnark</p>
  </div>
  <div class="page">
    <p>Largest Supported Circuit Size</p>
    <p>DIZK</p>
    <p>~2 billion gates !30</p>
    <p>log2 circuit size</p>
    <p># machines</p>
    <p>~4 million gateslibsnark</p>
  </div>
  <div class="page">
    <p>Largest Supported Circuit Size</p>
    <p>DIZK</p>
    <p>~2 billion gates !30</p>
    <p>log2 circuit size</p>
    <p># machines</p>
    <p>Double # of machines,  twice the circuit size</p>
    <p>~4 million gateslibsnark</p>
  </div>
  <div class="page">
    <p>log2 circuit size log2 circuit size 16 18 20 22 24 26 28 30 16 18 20 22 24 26 28 30</p>
    <p>Distributed Setup Distributed Prover 14</p>
    <p>Scalability</p>
    <p>!31</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p># machines</p>
  </div>
  <div class="page">
    <p>log2 circuit size log2 circuit size 16 18 20 22 24 26 28 30 16 18 20 22 24 26 28 30</p>
    <p>Distributed Setup Distributed Prover 14</p>
    <p>Scalability Double the circuit size  twice the time</p>
    <p>!31</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p># machines</p>
    <p>Slope  1 Slope  1</p>
  </div>
  <div class="page">
    <p>Parallelism</p>
    <p>!32</p>
    <p>circuit size</p>
    <p>Distributed Setup Distributed Prover</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p># machines # machines</p>
  </div>
  <div class="page">
    <p>Parallelism Double # of machines  twice as fast</p>
    <p>!32</p>
    <p>circuit size</p>
    <p>Distributed Setup Distributed Prover</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p>lo g 2</p>
    <p>ti m</p>
    <p>e (s</p>
    <p>ec )</p>
    <p># machines # machines</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>!33</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>!33</p>
    <p>Prior zkSNARKs DIZK</p>
    <p>Maximum circuit size Millions of gates Billions of gates</p>
    <p>Cost per gate 1ms 10s</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>DIZK (dizk.org, open-source, MIT License)</p>
    <p>Full Paper on Crypto ePrint (https://eprint.iacr.org/2018/691)</p>
    <p>!33</p>
    <p>Prior zkSNARKs DIZK</p>
    <p>Maximum circuit size Millions of gates Billions of gates</p>
    <p>Cost per gate 1ms 10s</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>!34</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>What techniques will get us to trillions of gates, if any? (Now, we would need ~100,000 machines in the best case scenario, i.e. too many)</p>
    <p>!34</p>
    <p>Even Larger Circuits</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>What techniques will get us to trillions of gates, if any? (Now, we would need ~100,000 machines in the best case scenario, i.e. too many)</p>
    <p>How efficiently can other succinct ZKPs be distributed?</p>
    <p>!34</p>
    <p>Even Larger Circuits</p>
    <p>Other Succinct ZKPs</p>
    <p>(STARKs, Bulletproofs, ) Our techniques are likely an excellent starting point.</p>
  </div>
  <div class="page">
    <p>!35</p>
  </div>
</Presentation>
