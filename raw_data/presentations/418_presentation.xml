<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Haryadi S. Gunawi, Pallavi Joshi, Peter Alvaro,! Joseph M. Hellerstein, and Koushik Sen! !</p>
    <p>Thanh Do, Andrea C. Arpaci-Dusseau, ! and Remzi H. Arpaci-Dusseau! !</p>
    <p>Dhruba Borthakur!</p>
  </div>
  <div class="page">
    <p>! Cloud! &quot; Thousands of commodity machines! &quot; Rare (HW) failures become frequent [Hamilton]!</p>
    <p>! Failure recovery! &quot;  has to come from the software [Dean]! &quot;  must be a first-class op [Ramakrishnan et al.]! &quot; But ... hard to get right!</p>
  </div>
  <div class="page">
    <p>More in literature:! - Data loss, whole-system down in Google Chubby</p>
    <p>[Burrows06]! - 91 recovery issues found in HDFS over 4 years! - ...!</p>
    <p>Cloudy ! ! !</p>
    <p>with a chance of! failure!</p>
  </div>
  <div class="page">
    <p>! Testing is not advanced enough! &quot; Cloud systems face complex multiple, diverse failures!</p>
    <p>! Recovery is under-specified ! &quot; Lots of custom recovery! &quot; Implementation is complex!</p>
    <p>! Need two advancements:! &quot; Exercise complex failure modes! &quot; Write recovery specifications and</p>
    <p>test the implementation!</p>
  </div>
  <div class="page">
    <p>Cloud software! ! ! ! !</p>
    <p>FATE!</p>
    <p>DESTINI!</p>
    <p>Failure Testing ! Service!</p>
    <p>Declarative Testing ! Specifications!</p>
    <p>X2</p>
    <p>X1</p>
    <p>Violate! specs?!</p>
  </div>
  <div class="page">
    <p>! FATE! &quot; Exercise multiple, diverse failures !</p>
    <p>- Over 40,000 unique combinations (80 hours)! - Challenge: combinatorial explosion of multiple failures!</p>
    <p>&quot; Pruning strategies for failure exploration! - An order of magnitude speedup ! - Found the same #bugs!</p>
    <p>! DESTINI! &quot; Facilitate recovery specifications !</p>
    <p>- Reliability and availability related!</p>
    <p>&quot; Clear and concise (use Datalog, 5 lines/check)! &quot; Design patterns!</p>
  </div>
  <div class="page">
    <p>! Target 3 cloud systems! &quot; HDFS (primary target), Cassandra, and</p>
    <p>ZooKeeper!</p>
    <p>! HDFS recovery bugs! &quot; Found 16 new bugs (+6 in newest)!</p>
    <p>! Problems found! &quot; Data loss!</p>
    <p>- Buggy recovery wipes out all replicas! &quot; Unavailability!</p>
    <p>- Broken rack-aware policy! - Cant restart after failures!</p>
  </div>
  <div class="page">
    <p>! Introduction!</p>
    <p>! FATE! &quot; Failure IDs: abstraction for failure exploration! &quot; Pruning strategies!</p>
    <p>! DESTINI!</p>
    <p>! Evaluation !</p>
    <p>! Conclusion!</p>
  </div>
  <div class="page">
    <p>M! 1 C! 2! 3!</p>
    <p>No failures!</p>
    <p>Setup Recovery: ! Recreate fresh pipeline (1, 2, 4)!</p>
    <p>Data Transfer Recovery: ! Continue on surviving nodes (1, 2)!</p>
    <p>M! 1 C! 2! 3!M! 1 C! 2! 3! 4!</p>
    <p>Alloc Req!</p>
    <p>Setup! Stage!</p>
    <p>Data! Transfer!</p>
    <p>X1 X2</p>
    <p>HadoopFS (HDFS)! Write!</p>
    <p>Protocol!</p>
  </div>
  <div class="page">
    <p>! Failures ! &quot; Anytime: different stages # different recovery! &quot; Anywhere: N2 crash, and then N3! &quot; Any type: bad disks, partitioned nodes/racks!</p>
    <p>! FATE! &quot; Systematically exercise multiple, diverse failures! &quot; How? need to remember failures  via failure IDs!</p>
    <p>M! 1!C! 2! 3! M! 1!C! 2! 3! 4!</p>
  </div>
  <div class="page">
    <p>! Abstraction of I/O failures!</p>
    <p>! Building failure IDs! &quot; Intercept every I/O! &quot; Inject possible failures!</p>
    <p>- Ex: crash, network partition, disk failure (LSE/corruption)!</p>
    <p>Node2! Node3! I/O ! information:!</p>
    <p>OutputStream.read() in! BlockReceiver.java!</p>
    <p>&lt;stack trace&gt;! Net I/O from N3 to N2!</p>
    <p>Data Ack!</p>
    <p>Injected failure:! Crash After!</p>
    <p>Failure ID: 2573!</p>
    <p>Note:! FIDs !</p>
    <p>A, B, C, ...!</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>M! 1 C! 2! 3!</p>
    <p>A!</p>
    <p>A!</p>
    <p>B!</p>
    <p>A!</p>
    <p>B! C!</p>
    <p>Exp #1: A!</p>
    <p>Exp #2: B!</p>
    <p>Exp #3: C!</p>
    <p>M! 1 C! 2! 3!</p>
    <p>A!</p>
    <p>B! C!</p>
    <p>B!</p>
    <p>A!</p>
    <p>A!</p>
    <p>AB!</p>
    <p>AC!</p>
    <p>B! C! BC!</p>
  </div>
  <div class="page">
    <p>! Introduction!</p>
    <p>! FATE! &quot; Failure IDs: abstraction of failures! &quot; Pruning strategies for failure exploration!</p>
    <p>! DESTINI!</p>
    <p>! Evaluation!</p>
    <p>! Conclusion!</p>
  </div>
  <div class="page">
    <p>! Exercised over 40,000 unique combinations of 1, 2, and 3 failures per run! &quot; 80 hours of testing time!!</p>
    <p>A1 A2 A1 B2 B1 A2 B1 B2 ...</p>
    <p>A1</p>
    <p>B1</p>
    <p>A2</p>
    <p>B2</p>
    <p>A3</p>
    <p>B3</p>
    <p>New challenge: ! Combinatorial explosion of multiple failures !</p>
  </div>
  <div class="page">
    <p>! Properties of multiple failures! &quot; Pairwise dependent failure IDs! &quot; Pairwise independent failure IDs !</p>
    <p>! Goal: exercise distinct recovery behaviors! &quot; Key: some failures result in similar recovery! &quot; Result: &gt; 10x faster, and found the same bugs!</p>
  </div>
  <div class="page">
    <p>! Failure dependency graph! &quot; Inject single failures first! &quot; Record subsequent dependent IDs!</p>
    <p>- Ex: X depends on A! &quot; Brute-force: AX, BX, CX, DX, CY, DY!</p>
    <p>! Recovery clustering! &quot; Two clusters: {X} and {X, Y}!</p>
    <p>! Only exercise distinct clusters! &quot; Pick a failureID that triggers a recovery</p>
    <p>cluster! &quot; Results: AX, CX, CY!</p>
    <p>FID # Subseq FIDs! A # X B # X C # X, Y D # X, Y</p>
    <p>A B C D</p>
    <p>X Y</p>
  </div>
  <div class="page">
    <p>! Independent combinations! &quot; Ex: FP = 2, N = 3! &quot; FP2 x N (N  1)!</p>
    <p>! Symmetric code! &quot; Just pick two nodes! &quot; N (N  1) # 2! &quot; FP2 x 2!</p>
    <p>A1</p>
    <p>B1</p>
    <p>A2</p>
    <p>B2</p>
    <p>A3</p>
    <p>B3</p>
    <p>A1</p>
    <p>B1</p>
    <p>A2</p>
    <p>B2</p>
    <p>A3</p>
    <p>B3</p>
  </div>
  <div class="page">
    <p>! FP2 bottleneck! &quot; Ex: FP = 4! &quot; Real example: FP = 15!</p>
    <p>! Recovery clustering! &quot; Cluster A and B if: ! fail(A) == fail(B)! &quot; Reduce FP2 to FP2clustered! &quot; E.g.15 FPs to 8 FPsclustered!</p>
    <p>A1</p>
    <p>B1</p>
    <p>A2</p>
    <p>B2</p>
    <p>C1</p>
    <p>D1</p>
    <p>C2</p>
    <p>D2</p>
    <p>A1</p>
    <p>B1</p>
    <p>A2</p>
    <p>B2</p>
    <p>C1</p>
    <p>D1</p>
    <p>C2</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>! Contributions! &quot; Exercise multiple, diverse failures (via failure IDs)! &quot; Pruning strategies (&gt; 10x improvement)!</p>
    <p>! Limitations! &quot; I/O reordering! &quot; Inclusion of states to failure IDs! &quot; More failure modes!</p>
    <p>- Transient, slow-down, and data-center partitioning!</p>
  </div>
  <div class="page">
    <p>! Introduction!</p>
    <p>! FATE!</p>
    <p>! DESTINI: Declarative Testing Specifications!</p>
    <p>! Evaluation!</p>
    <p>! Conclusion!</p>
  </div>
  <div class="page">
    <p>Test!</p>
    <p>! Is the system correct under failures?! &quot; Need to write specifications! &quot; FATE needs DESTINI!</p>
    <p>[It is] great to document (in a spec) the HDFS write protocol ... ! ! , but we shouldn't spend too much time on it,  a formal spec may be overkill for a protocol we plan to deprecate imminently. !</p>
    <p>Implemen-! tation!</p>
    <p>Specs!</p>
    <p>X1 X2</p>
  </div>
  <div class="page">
    <p>! How to write specifications?! &quot; Developer friendly (clear, concise, easy)!</p>
    <p>! Datalog: a declarative relational logic language! &quot; Easy to express logical relations! &quot; (just for writing specifications)!</p>
  </div>
  <div class="page">
    <p>! How to write specs?! &quot; Violations! &quot; Expectations! &quot; Facts!</p>
    <p>! How to write recovery specs? ! &quot; ... recovery is under specified [Hamilton]! &quot; Precise failure events! &quot; Precise check timings!</p>
    <p>! How to test implementation?! &quot; Interpose I/O calls (lightweight)! &quot; Deduce expectations and facts from I/O events!</p>
    <p>!</p>
    <p>Implemen-! tation!</p>
    <p>Specs!</p>
  </div>
  <div class="page">
    <p>violationTable() :- ! expectationTable(), !</p>
    <p>NOT-IN actualTable()! !</p>
    <p>Throw a violation if! an expectation is different from !</p>
    <p>the actual behavior!</p>
    <p>Datalog syntax:! head() :- predicates(), ! :- derivation! , AND!</p>
  </div>
  <div class="page">
    <p>expectedNodes! (Block, Node)!</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes! (Block, Node)!</p>
    <p>B Node 1 B Node 2</p>
    <p>incorrectNodes! (Block, Node)!</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);!</p>
    <p>M! 1 C! 2! 3!</p>
    <p>X</p>
    <p>B! B! Data!</p>
    <p>Transfer!</p>
    <p>Block replicas should ! exist in surviving nodes!</p>
  </div>
  <div class="page">
    <p>expectedNodes! (Block, Node)!</p>
    <p>B Node 1 B Node 2</p>
    <p>actualNodes! (Block, Node)!</p>
    <p>B Node 1</p>
    <p>incorrectNodes! (Block, Node)!</p>
    <p>B Node 2</p>
    <p>M! 1 C! 2! 3!</p>
    <p>X</p>
    <p>B! B!</p>
    <p>incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);!</p>
  </div>
  <div class="page">
    <p>! Ex: which nodes should have the blocks?! &quot; Deduce expectations</p>
    <p>from I/O events (italic)!</p>
    <p>M! C!</p>
    <p>getBlockPipe()! Give me 3 nodes for B!</p>
    <p>[Node1, Node2, Node3]!</p>
    <p>M! C!</p>
    <p>expectedNodes! (Block, Node)!</p>
    <p>B Node 1 B Node 2 B Node 3</p>
    <p>X 2</p>
    <p>#1: incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);!</p>
    <p>expectedNodes (B, N) :- ! getBlockPipe (B, N);!</p>
  </div>
  <div class="page">
    <p>DEL expectedNodes (B, N) :- ! expectedNodes (B, N),! fateCrashNode (N)!</p>
    <p>expectedNodes! (Block, Node)!</p>
    <p>B Node 1 B Node 2 B Node 3</p>
    <p>M! 1 C! 2! 3!</p>
    <p>X</p>
    <p>B! B!</p>
    <p>#1: incorrectNodes(B, N) :- expectedNodes(B, N), NOT-IN actualNodes(B, N);! #2: expectedNodes(B, N) :- getBlockPipe(B,N);!</p>
    <p>DESTINI! needs! FATE!</p>
  </div>
  <div class="page">
    <p>DEL expectedNodes (B, N) :- ! expectedNodes (B, N),! fateCrashNode (N), ! writeStage (B, Stage),! Stage == Data Transfer;!</p>
    <p>#1: incorrectNodes(B,N) !:- expectedNodes(B,N), NOT-IN actualNodes(B,N)! #2: expectedNodes(B,N) !:- getBlockPipe(B,N);! #3: expectedNodes(B,N) !:- expectedNodes(B,N), fateCrashNode(N), ! writeStg (B,Stage), Stage == DataTr! ! #4: writeStg(B, DataTr) !:- writeStg (B,Setup), nodesCnt(Nc), acksCnt (Ac), Nc==Ac! #5: nodesCnt (B, CNT&lt;N&gt;)!:- pipeNodes (B, N);! #6: pipeNodes (B, N) !:- getBlockPipe (B, N);! #7: acksCnt (B, CNT&lt;A&gt;) !:- setupAcks (B, P, OK);! #8: setupAcks (B, P, A) !:- setupAck (B, P, A);!</p>
    <p>!</p>
    <p>Precise failure events #!</p>
  </div>
  <div class="page">
    <p>! Recovery  invariant! &quot; If recovery is ongoing, ! invariants are violated! &quot; Dont want false alarms!</p>
    <p>! Need precise check timings! &quot; Ex: upon block completion!</p>
    <p>#1:! incorrectNodes(B, N) :- ! expectedNodes(B, N), ! NOT-IN actualNodes(B,</p>
    <p>N),! completeBlock (B);!</p>
  </div>
  <div class="page">
    <p>! Support recovery specs! &quot; Reliability and availability related! &quot; Clear and concise (use Datalog) !</p>
    <p>! Design patterns! &quot; Add detailed specs! &quot; Write specs from different views (global, client, ...)! &quot; Incorporate diverse failures (crashes, rack</p>
    <p>partitions)! &quot; ... more in the paper!</p>
  </div>
  <div class="page">
    <p>! Introduction!</p>
    <p>! FATE!</p>
    <p>! DESTINI!</p>
    <p>! Evaluation and conclusion!</p>
  </div>
  <div class="page">
    <p>! Implementation complexity! &quot; ~6000 LOC in Java !</p>
    <p>! Target 3 popular cloud systems! &quot; HDFS (primary), ZooKeeper, Cassandra !</p>
    <p>! HDFS recovery bugs! &quot; Found 22 new bugs!</p>
    <p>- 8 bugs due to multiple failures! - Data loss, unavailability bugs!</p>
    <p>&quot; Reproduced 51 old bugs!</p>
  </div>
  <div class="page">
    <p>If multiple racks are available (reachable), ! a block should be stored in a minimum of two racks!</p>
    <p>Rack #1 Rack #2! B!</p>
    <p>B!</p>
    <p>B!</p>
    <p>Client!</p>
    <p>B!</p>
    <p>Replication Monitor!</p>
    <p>Availability bug!! #replicas = 3,! locations are not checked,! B is not migrated to R2 !</p>
    <p>FATE injects! rack partitioning!</p>
  </div>
  <div class="page">
    <p>If multiple racks are available (reachable), ! a block should be stored in a minimum of two racks!</p>
    <p>errorSingleRack(B) :- rackCnt(B,Cnt), Cnt==1, blkRacks(B,R), connected(R,Rb),! endOfReplicationMonitor (_);!</p>
    <p>rackCnt! B, 1</p>
    <p>blkRacks! B, R1</p>
    <p>connected! R1, R2!</p>
    <p>errorSingleRack! B!</p>
    <p>$!</p>
  </div>
  <div class="page">
    <p>! Reduce #experiments by an order of magnitude! &quot; Each experiment = 4-9 seconds!</p>
    <p>! Found the same number of bugs! &quot; (by experience) !</p>
    <p># Exps!</p>
    <p>Write +! 2 crashes!</p>
    <p>Append +! 2 crashes!</p>
    <p>B ru</p>
    <p>te F</p>
    <p>o rc</p>
    <p>e! Pr</p>
    <p>un ed !</p>
    <p>Write +! 3 crashes!</p>
    <p>Append +! 3 crashes!</p>
  </div>
  <div class="page">
    <p>! Compared to other related work !</p>
    <p>Framework! #Chks! Lines/Chk!</p>
    <p>D3S [NSDI 08]! 10! 53!</p>
    <p>Pip [NSDI 06]! 44! 43!</p>
    <p>WiDS [NSDI 07]! 15! 22!</p>
    <p>P2 Monitor [EuroSys 06]!</p>
    <p>DESTINI! 74! 5!</p>
  </div>
  <div class="page">
    <p>! Cloud software systems! &quot; Must deal with HW failures!</p>
    <p>! FATE and DESTINI! &quot; Explore multiple, diverse failures systematically! &quot; Facilitate concise recovery specifications! &quot; A unified framework!</p>
    <p>- FATE needs DESTINI! - DESTINI needs FATE!</p>
    <p>! Real-world adoption in progress !</p>
  </div>
  <div class="page">
    <p>http://boom.cs.berkeley.edu! http://cs.wisc.edu/adsl!</p>
  </div>
</Presentation>
