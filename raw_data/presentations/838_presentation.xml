<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Zach Miller</p>
    <p>Todd Tannenbaum</p>
    <p>Ben Liblit</p>
    <p>{zmiller, tannenba, liblit} @ cs.wisc.edu</p>
    <p>USENIX ATC 2012</p>
  </div>
  <div class="page">
    <p>If anything can go wrong, it will</p>
    <p>USENIX ATC 2012 2</p>
  </div>
  <div class="page">
    <p>Developers want to find and fix errors before they are discovered by end users</p>
    <p>But despite extensive in-house testing, buggy software still gets released  Test coverage not complete</p>
    <p>Different program inputs</p>
    <p>Different run-time environment</p>
    <p>USENIX ATC 2012 3</p>
  </div>
  <div class="page">
    <p>Developers want to find and fix errors before they are discovered by end users</p>
    <p>But despite extensive in-house testing, buggy software still gets released  Test coverage not complete</p>
    <p>Different program inputs</p>
    <p>Different run-time environment</p>
    <p>A program ultimately interacts with its environment via the kernel interface</p>
    <p>USENIX ATC 2012 4</p>
  </div>
  <div class="page">
    <p>USENIX ATC 2012 5</p>
  </div>
  <div class="page">
    <p>How resilient is your program in the face of unusual conditions?</p>
    <p>Additionally, how do you test your program handling, for example, errno ENOSPC?  Actually fill the disk? (causes problems</p>
    <p>for other users of the disk)</p>
    <p>Loopback device? (needs root)</p>
    <p>VM? (takes time to set up)</p>
    <p>USENIX ATC 2012 6</p>
  </div>
  <div class="page">
    <p>Simulate these unusual but perfectly legitimate conditions</p>
    <p>Helps identify unknown problems</p>
    <p>Reproduce rare events for testing</p>
    <p>USENIX ATC 2012 7</p>
  </div>
  <div class="page">
    <p>Interposition tool using ptrace debugger interface</p>
    <p>Trap all system calls, and optionally do some evil :  Simply returning a</p>
    <p>failure to the application</p>
    <p>Modifying parameters on the way in (or out)</p>
    <p>USENIX ATC 2012 8</p>
  </div>
  <div class="page">
    <p>Pros  Language agnostic!</p>
    <p>No source code required, no relinking</p>
    <p>No root access required</p>
    <p>Appropriate for interposition of an entire software stack</p>
    <p>Cons  Performance</p>
    <p>Low-level view  not everything is a system call</p>
    <p>USENIX ATC 2012 10</p>
  </div>
  <div class="page">
    <p>When the application requests bytes from a file descriptor, rewrite the system call to ask for and return one byte at a time</p>
    <p>read(0, &amp;buf, 8)</p>
    <p>read(0, &amp;buf, 1)</p>
    <p>I don't think so!</p>
    <p>USENIX ATC 2012 11</p>
  </div>
  <div class="page">
    <p>This lone gremlin was enough to expose our first bug</p>
    <p>We failed running /bin/true!</p>
    <p>When programs are dynamically linked, the first thing they actually do is load shared libraries (e.g. libc.so.6)</p>
    <p>glibc's dynamic loader cannot handle short reads of a shared library's ELF header</p>
    <p>USENIX ATC 2012 12</p>
  </div>
  <div class="page">
    <p>USENIX ATC 2012 13</p>
    <p>/* We successfully openened the file. Now verify it is a file we can use. */ __set_errno (0);</p>
    <p>fbp-&gt;len = __libc_read (fd, fbp-&gt;buf, sizeof (fbp-&gt;buf)); /* This is where the ELF header is loaded. */ assert (sizeof (fbp-&gt;buf) &gt; sizeof (ElfW(Ehdr))); ehdr = (ElfW(Ehdr) *) fbp-&gt;buf; /* Now run the tests. */</p>
    <p>if (__builtin_expect (fbp-&gt;len &lt; (ssize_t) sizeof (ElfW(Ehdr)), 0)) { errval = errno; errstring = (errval == 0 ? N_(&quot;file too short&quot;) : N_(&quot;cannot read file data&quot;)); ... lose (errval, fd, name, NULL, NULL, errstring, NULL); }</p>
    <p>Bad spelling!</p>
    <p>Bad code!</p>
  </div>
  <div class="page">
    <p>As a quick hack, we worked around this by adjusting gremlin activation percentage</p>
    <p>However, this is not really a viable solution</p>
    <p>We needed a better control mechanism</p>
    <p>USENIX ATC 2012 14</p>
  </div>
  <div class="page">
    <p>ClassAds and Constraints [</p>
    <p>Gremlin = &quot;readone&quot;;</p>
    <p>SyscallCount = 20;</p>
    <p>InvokedCount = 1;</p>
    <p>EvilCount = 0;</p>
    <p>Pid = 24068;</p>
    <p>ChildNum = 1;</p>
    <p>Meta = &quot;&quot;;</p>
    <p>SyscallNum = 0;</p>
    <p>SyscallName = &quot;read&quot;;</p>
    <p>FD = 3;</p>
    <p>Name = &quot;/lib64/libc.so.6&quot;;</p>
    <p>Length = 832;</p>
    <p>]</p>
    <p>Constraint= !regexp(&quot;(\\.so(\\.[0-9]+)*)$&quot;,Name,&quot;&quot;);</p>
    <p>USENIX ATC 2012 15</p>
  </div>
  <div class="page">
    <p>More state was needed  Mapping FDs to filenames</p>
    <p>Tracking working directory</p>
    <p>A single gremlin might trap 41 different system calls! (EINTR)</p>
    <p>Better performance through clever tricks (e.g. writeone_s)</p>
    <p>USENIX ATC 2012 16</p>
  </div>
  <div class="page">
    <p>Disk full, pipe buffer full, removable media offline,   write(fd, buf, count) &lt; count</p>
    <p>All data not available right now  read(fd, buf, count) &lt; count</p>
    <p>System is very loaded  System call latency, fork() fails, pids rapidly reused</p>
    <p>NFS server dies while a file is open read/write  close() fails, last write() may be lost</p>
    <p>NTP runs, corrects clock drift  time() goes backwards!</p>
    <p>And many more</p>
    <p>USENIX ATC 2012 17</p>
  </div>
  <div class="page">
    <p>After running experiments with several different gremlins enabled, pretty much everything broke in some way. So now what do we do?</p>
    <p>USENIX ATC 2012 19</p>
  </div>
  <div class="page">
    <p>Add the ability to dynamically enable and disable gremlins at run time to narrow the scope of Murphys actions (instead of affecting the entire program)</p>
    <p>Add a mechanism to pass metadata from the application to Murphy to track locations, function entry, variables, etc. in the high-level source code</p>
    <p>USENIX ATC 2012 20</p>
  </div>
  <div class="page">
    <p>Originally used ioctl(), but found it was not available in some managed languages</p>
    <p>Settled on using mkdir() instead, which is widely supported</p>
    <p>mkdir(/Murphy/set-metada/Line 67, enabling EAGAIN gremlin); mkdir(/Murphy/update-config/eagain:10);</p>
    <p>USENIX ATC 2012 21</p>
  </div>
  <div class="page">
    <p>We now have a tool that can expose all sorts of problems in a highly configurable manner, and produce a log file of the evil acts committed</p>
    <p>Manual inspection of code can usually help you identify the problem, along with some manual instrumenting of the code with Murphy control commands</p>
    <p>USENIX ATC 2012 23</p>
  </div>
  <div class="page">
    <p>USENIX ATC 2012 24</p>
  </div>
  <div class="page">
    <p>Murphy can log an event whenever a Gremlin does evil: gremlin X in vpid Y did evil on opportunity Z</p>
    <p>Murphy can then replay a log during a new program execution</p>
    <p>#GremlinName EvilCount Vpid InvokedCount SyscallCount</p>
    <p>cwdlongpath 0 1 0 39 Meta:</p>
    <p>readless 0 1 2 61 Meta:</p>
    <p>readless 1 1 3 62 Meta:</p>
    <p>writeone_s 0 1 0 67 Meta:</p>
    <p>writeone_s 1 1 1 68 Meta:</p>
    <p>USENIX ATC 2012 26</p>
  </div>
  <div class="page">
    <p>Automates the scientific method:  Set up a hypothesis</p>
    <p>Test it</p>
    <p>Reject it or refine it</p>
    <p>Used to minimize failure-inducing input</p>
    <p>In this case, the input is the replay log produced by executing Murphy the first time</p>
    <p>Minimizing this produces the smallest set of gremlin activity that causes the same problem</p>
    <p>USENIX ATC 2012 27</p>
  </div>
  <div class="page">
    <p>USENIX ATC 2012 28</p>
  </div>
  <div class="page">
    <p>When you have a minimal log, Murphy can then</p>
    <p>Leave process suspended for inspection</p>
    <p>Jump straight into a debugger</p>
    <p>USENIX ATC 2012 29</p>
  </div>
  <div class="page">
    <p>We tested several pieces of software that are in heavy use:</p>
    <p>perl</p>
    <p>python</p>
    <p>openssl</p>
    <p>bash</p>
    <p>gcc</p>
    <p>binutils</p>
    <p>USENIX ATC 2012 30</p>
  </div>
  <div class="page">
    <p>We tested several pieces of software that are in heavy use:</p>
    <p>perl</p>
    <p>python</p>
    <p>openssl</p>
    <p>bash</p>
    <p>gcc</p>
    <p>binutils</p>
    <p>USENIX ATC 2012 31</p>
  </div>
  <div class="page">
    <p>We actually found bugs in programs not written in C. Besides the perl interpreter itself, we also discovered bugs in the perl regression tests, which are written in perl</p>
    <p>Likewise, we found problems in the python tests (which are of course written in python)</p>
    <p>If openssl cannot read as much as it requests from /dev/urandom, it fails</p>
    <p>USENIX ATC 2012 32</p>
  </div>
  <div class="page">
    <p>All of these bugs were discovered by first enabling gremlins for the entire run, identifying a problem, and pinpointing it using the delta debugging approach just described</p>
    <p>Using fully automated delta debugging on one failed perl test took under 10 minutes to go from 140,000 system calls down to just the one that matters. Highly effective!</p>
    <p>USENIX ATC 2012 33</p>
  </div>
  <div class="page">
    <p>Instrumenting via ptrace has overhead</p>
    <p>Reading and writing one byte at a time causes a significant amount of overhead</p>
    <p>Resulting execution times for running the openssl regression tests:</p>
    <p>No Murphy 6 seconds</p>
    <p>Murphy, no gremlins 34 seconds</p>
    <p>readone and writeone 325 seconds</p>
    <p>USENIX ATC 2012 34</p>
  </div>
  <div class="page">
    <p>Checking return values of system calls is a must for correct code, yet is generally lacking</p>
    <p>Almost all software fails to properly handle EINTR and EAGAIN gremlins, and as such we weren't able to use them to find any interesting failures</p>
    <p>USENIX ATC 2012 36</p>
  </div>
  <div class="page">
    <p>A tool to help pro-actively discover bugs arising from legitimate but unexpected kernel responses.</p>
    <p>Itemized several such kernel responses.</p>
    <p>Found Bugs! Demonstrates useful approach.</p>
    <p>Observation: Murphy testing uncovered problems in widely-tested software  undoubtedly need is greater for new software.</p>
    <p>USENIX ATC 2012 37</p>
  </div>
  <div class="page">
    <p>Better/more gremlins</p>
    <p>Integration w/ strace tool</p>
    <p>Improve mechanisms to map from system level back to source code</p>
    <p>Survey work</p>
    <p>Why propagate these errors if nobody deals with them? Squash instead?</p>
    <p>USENIX ATC 2012 38</p>
  </div>
  <div class="page">
    <p>http://research.cs.wisc.edu/murphy/</p>
    <p>There is a README included</p>
    <p>Instructions for building from source  Currently tested only for 64-bit Linux</p>
    <p>Documentation and sample configuration file</p>
    <p>USENIX ATC 2012 39</p>
  </div>
</Presentation>
