<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fence: Protecting Device Availability With Uniform Resource Control</p>
    <p>Tao Li, Albert Rafetseder, Rodrigo Fonseca, Justin Cappos</p>
    <p>New York University Brown University</p>
  </div>
  <div class="page">
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>DropBox sync  Browser tabs  Virus scan  Software updates  ...</p>
    <p>Typical Causes</p>
  </div>
  <div class="page">
    <p>Control performance, battery, heat, etc.  Do not kill -- useful-but-gluttonous apps</p>
    <p>Do not require OS / hardware changes  Applicable to sandboxes, browsers, etc.  Run everywhere (Linux, Windows, Mac, Android, OpenWrt, etc.)</p>
    <p>Focus on mechanism  Necessary for policies to function</p>
    <p>Goal: Performance Isolation</p>
  </div>
  <div class="page">
    <p>Multiple contended resources  Separate mechanisms / policies  Creating an overarching policy is difficult</p>
    <p>Some controls are missing  Gaps in enforcement -&gt; lack of isolation</p>
    <p>Legacy systems tend to be work-preserving</p>
    <p>Why is performance isolation hard?</p>
  </div>
  <div class="page">
    <p>Unifying resource abstraction  Two axes per resource: fungible/renewable</p>
    <p>Fully defines mechanism  Easy to cover new resources  Easy to implement policies</p>
    <p>Key Idea: Uniform Resource Control</p>
  </div>
  <div class="page">
    <p>Fungible:  Are items of this type interchangeable?</p>
    <p>Yes (disk space) vs No (TCP port)</p>
    <p>Renewable:  Are items replenished over time?</p>
    <p>Yes (Network bandwidth) vs No (RAM)</p>
    <p>Resource Abstraction Questions</p>
  </div>
  <div class="page">
    <p>Resource Controls</p>
    <p>is_item_allowed() Check if permitted e.g. UDP port</p>
    <p>tattle_add_item() tattle_remove_item() Restrict total used e.g. File Descriptors</p>
    <p>tattle_quantity() Rate limit e.g. Network b/w</p>
    <p>tattle_quantity() Rate limit e.g. CPU</p>
    <p>Not Fungible Fungible</p>
    <p>N ot</p>
    <p>R en</p>
    <p>ew ab</p>
    <p>le R</p>
    <p>en ew</p>
    <p>ab le</p>
  </div>
  <div class="page">
    <p>Polling  Find value, stop / rate limit if over</p>
    <p>e.g. CPU uses job control interface (SIGSTOP / SIGCONT)</p>
    <p>Interposition  API code changes to add interposition</p>
    <p>Which depends on implementation</p>
    <p>Enforcement mechanism</p>
  </div>
  <div class="page">
    <p>def sendmessage(destip,destport,msg,localip,localport): # 117 lines ...</p>
    <p># get the OS's UDP socket sock = _get_udp_socket(localip, localport)</p>
    <p># Send this UDP datagram bytessent = sock.sendto(msg, (destip, destport))</p>
    <p>...</p>
    <p>Example Implementation Changes</p>
  </div>
  <div class="page">
    <p>def sendmessage(destip,destport,msg,localip,localport): # 117 lines + 10 lines ... # check that we are permitted to use this port... if not fence.is_item_allowed('UDPport',localport): raise ResourceAccessDenied('...') # get the OS's UDP socket sock = _get_udp_socket(localip, localport) # Send this UDP datagram bytessent = sock.sendto(msg, (destip, destport))</p>
    <p>...</p>
    <p>Example Implementation Changes</p>
    <p>UDP port: Non-fungible, non-renewable</p>
  </div>
  <div class="page">
    <p>def sendmessage(destip,destport,msg,localip,localport): # 117 lines + 10 lines ... # check that we are permitted to use this port... if not fence.is_item_allowed('UDPport',localport): raise ResourceAccessDenied('...') # get the OS's UDP socket sock = _get_udp_socket(localip, localport) # Register this socket descriptor with fence fence.tattle_add_item('outsocketsopened', id(sock)) # Send this UDP datagram bytessent = sock.sendto(msg, (destip, destport))</p>
    <p>...</p>
    <p>Example Implementation Changes</p>
    <p>socket: Fungible, nonrenewable</p>
  </div>
  <div class="page">
    <p>def sendmessage(destip,destport,msg,localip,localport): # 117 lines + 10 lines ... # check that we are permitted to use this port... if not fence.is_item_allowed('UDPport',localport): raise ResourceAccessDenied('...') # get the OS's UDP socket sock = _get_udp_socket(localip, localport) # Register this socket descriptor with fence fence.tattle_add_item('outsocketsopened', id(sock)) # Send this UDP datagram bytessent = sock.sendto(msg, (destip, destport)) # Account for the network bandwidth utilized if _is_loopback_ipaddr(destip): fence.tattle_quantity('loopbacksend', bytessent + 64) else: fence.tattle_quantity('internetsend', bytessent + 64) ...</p>
    <p>Example Implementation Changes</p>
    <p>Network b/w: Fungible, Renewable</p>
  </div>
  <div class="page">
    <p>Seattle Testbeds Repy sandbox  Seattle ~= Peer-to-peer PlanetLab  Tens of thousands of diverse devices</p>
    <p>Lind  NaCl / POSIX sandbox</p>
    <p>Sensibility Testbed  Privacy preserving sensing on Android</p>
    <p>Uses of Fence</p>
  </div>
  <div class="page">
    <p>Resource consumption must be visible  HW / OS hide info</p>
    <p>Minimizes performance impact  Worst case limits</p>
    <p>Scope of policies  Unclear how complete Fence is  Worked for us in practice</p>
    <p>Limitations</p>
  </div>
  <div class="page">
    <p>How well does Fence work vs legacy controls?  How well does Fence work across platforms?  How much overhead does Fence incur?  Can realistic policies be expressed in Fence?  How diverse of resources can be metered?  How hard is it to add resources to Fence?</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>How well does Fence work vs legacy controls?  How well does Fence work across platforms?  How much overhead does Fence incur?  Can realistic policies be expressed in Fence?  How diverse of resources can be metered?  How hard is it to add resources to Fence?</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Video on disk (Dell Inspirion 630m w/ Ubuntu 10.04)</p>
    <p>hog everything</p>
    <p>worst setting for hog</p>
    <p>best setting for video</p>
    <p>Fence vs Legacy Controls</p>
  </div>
  <div class="page">
    <p>Heat / battery</p>
    <p>hog everything</p>
    <p>Fence vs Legacy Heat / Battery</p>
  </div>
  <div class="page">
    <p>Heat / battery</p>
    <p>hog everything</p>
    <p>Fence vs Legacy Heat / Battery</p>
  </div>
  <div class="page">
    <p>Heat / battery</p>
    <p>hog everything</p>
    <p>Fence vs Legacy Heat / Battery</p>
  </div>
  <div class="page">
    <p>Heat / battery</p>
    <p>hog everything</p>
    <p>Fence vs Legacy Heat / Battery</p>
  </div>
  <div class="page">
    <p>Heat / battery</p>
    <p>hog everything</p>
    <p>Fence vs Legacy Heat / Battery</p>
  </div>
  <div class="page">
    <p>How well does Fence work vs legacy controls?  How well does Fence work across platforms?  How much overhead does Fence incur?  Can realistic policies be expressed in Fence?  How diverse of resources can be metered?  How hard is it to add resources to Fence?</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Power draw policy from Cinder [Roy Eurosys 2011] Stores energy w/ a tap (token bucket) Polling using ACPI (updates every 15 seconds)</p>
    <p>Program: Richards benchmark in a run / sleep cycle</p>
    <p>Expressing Policies: Cinder</p>
  </div>
  <div class="page">
    <p>Expressing Policies: Cinder (cont)</p>
  </div>
  <div class="page">
    <p>Expressing Policies: Cinder (cont)</p>
  </div>
  <div class="page">
    <p>Expressing Policies: Cinder (cont)</p>
  </div>
  <div class="page">
    <p>Performance isolation is still a challenge</p>
    <p>Uniform Resource Control  Same simple reasoning for all resources  Fungible / Renewable  Easy to implement / use  Effective in practice</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Secure software distribution</p>
    <p>Adoption by Python, Ruby, Docker, LEAP, CoreOS, Go, Rust, Haskell, OCaml, etc.</p>
    <p>Plausible standard for many new domains</p>
    <p>Hiring Post Doc / Research Professor / Dev</p>
    <p>NYU is Hiring!</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>&lt;20% frames for each legacy tool (Combining tools, only gives 22% of frames)</p>
    <p>Fence vs Legacy Controls (cont)</p>
  </div>
  <div class="page">
    <p>Example Resource Categorization</p>
    <p>UDP ports TCP ports</p>
    <p>Threads Memory (RAM) Storage Space Open Sockets Open Files</p>
    <p>Network read / write CPU File read / write HW random</p>
    <p>Not Fungible Fungible</p>
    <p>N ot</p>
    <p>R en</p>
    <p>ew ab</p>
    <p>le R</p>
    <p>en ew</p>
    <p>ab le</p>
  </div>
</Presentation>
