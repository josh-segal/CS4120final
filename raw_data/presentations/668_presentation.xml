<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Device-Transparent Personal Storage</p>
    <p>Jacob Strauss, Justin Mazzola Paluska, Chris Lesniewski-Laas  Bryan Ford, Robert Morris, Frans Kaashoek</p>
    <p>Quanta Research Cambridge MIT Yale</p>
    <p>June 17, 2011</p>
  </div>
  <div class="page">
    <p>Personal Data Management:  Point-to-point Synchronization</p>
    <p>Good Properties:  Local connection: fast &amp; inexpensive  Simple to use</p>
  </div>
  <div class="page">
    <p>Synchronization Among Multiple Devices</p>
    <p>Single server to hold &amp; organize entire collection</p>
    <p>Requires hub be reachable</p>
  </div>
  <div class="page">
    <p>Store &amp; Fetch from Cloud</p>
    <p>or or</p>
    <p>More flexibility than a single hub  Not always reachable, can be slow</p>
  </div>
  <div class="page">
    <p>Ad-hoc Manual Management  Push manually to nearby device for more</p>
    <p>storage</p>
    <p>Upload to cloud later  when connected</p>
    <p>Problem: user must track where objects are</p>
    <p>local wifi</p>
  </div>
  <div class="page">
    <p>Ideal: Device Transparent Storage</p>
    <p>Same global view of data collection from each device</p>
  </div>
  <div class="page">
    <p>Device-Transparency: Impossible?</p>
    <p>Limited Storage Capacity  Cant put everything everywhere</p>
    <p>Devices might be disconnected  Cant use files stored on unreachable</p>
    <p>devices</p>
  </div>
  <div class="page">
    <p>Approach: Split Metadata from Content</p>
    <p>Fully replicate all metadata  Small: fits everywhere</p>
    <p>Partially replicate all content  Not small: place where needed</p>
  </div>
  <div class="page">
    <p>Metadata is Useful Alone</p>
    <p>When disconnected &amp; without content:  View complete collections of objects  Move objects between collections  Identify devices that do hold the content</p>
  </div>
  <div class="page">
    <p>Device-Transparent Storage Approach</p>
    <p>Separate Metadata from Content  Global Metadata Replication  Partial Content Replication</p>
    <p>Peer-to-peer Continuous Synchronization  Approximate global store as connectivity</p>
    <p>permits</p>
    <p>Automate Conflict Resolution  Eventually consistent metadata collection</p>
  </div>
  <div class="page">
    <p>Eyo Overview</p>
    <p>Local storage</p>
    <p>Eyo Music Player</p>
    <p>Photo Editor</p>
    <p>Mail Client</p>
    <p>User Application</p>
    <p>Overlay Network: UIA [OSDI06]</p>
    <p>Personal Data &amp; Device Collections</p>
  </div>
  <div class="page">
    <p>Eyo API Design</p>
    <p>Challenge: Automated Conflict Resolution</p>
    <p>API Properties  First-class version history  Explicit metadata and content split  Placement policy</p>
    <p>Borrows mechanisms from existing work  Distributed File Systems, Optimistic</p>
    <p>Replication, Version Control Systems 12</p>
  </div>
  <div class="page">
    <p>Using the Eyo Storage API</p>
    <p>No naming hierarchy</p>
    <p>Attribute queries: List of objects  lookup(has key content-type with value image)</p>
    <p>Local Storage</p>
    <p>User Interface Application Core Object A</p>
    <p>Object B</p>
    <p>Object C Eyo</p>
    <p>Content Store A,B,C</p>
    <p>Metadata Store A,B,C</p>
    <p>Get(ID) &amp; Put(object)</p>
    <p>Queries &amp; Notifications</p>
    <p>Network Updates</p>
    <p>Eyo API</p>
  </div>
  <div class="page">
    <p>Using the Eyo Storage API</p>
    <p>Eyo manages network transfers</p>
    <p>Notifies interested applications when updates arrive</p>
    <p>Local Storage</p>
    <p>User Interface Application Core Object A</p>
    <p>Object B</p>
    <p>Object C Eyo</p>
    <p>Content Store A,B,C</p>
    <p>Metadata Store A,B,C</p>
    <p>Get(ID) &amp; Put(object)</p>
    <p>Queries &amp; Notifications</p>
    <p>Network Updates</p>
    <p>Eyo API</p>
  </div>
  <div class="page">
    <p>Content Store</p>
    <p>Content block per object  Immutable after writing</p>
    <p>Device holds subset of all content  Guided by placement rules [Cimbiosys,</p>
    <p>Perspective]  Application specified query mapping objects</p>
    <p>to set of devices  Ex: songs with tag top-rated  ipod</p>
  </div>
  <div class="page">
    <p>Metadata Store</p>
    <p>Content-type: audio Size: 1234 Artist: U2 Album: The Joshua Tree Playlists: 80s Rating: 4/5</p>
    <p>Metadata includes:  everything users need to name</p>
    <p>and find objects  album, song name, artist,</p>
    <p>location, etc.</p>
    <p>Eyo replicates metadata store to all of users devices  Each device knows about all objects</p>
    <p>Small enough to store everywhere  Small updates: quick, frequent transfers</p>
  </div>
  <div class="page">
    <p>Concurrent Updates to Metadata</p>
    <p>Disconnected changes lead to conflicts</p>
    <p>When and where should these be resolved?</p>
    <p>create file A</p>
    <p>Edit A  B</p>
    <p>Edit A  C</p>
    <p>unreachable</p>
    <p>?</p>
    <p>tim e</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Handling Conflicts  Track common ancestor  Eyo provides version history</p>
    <p>to applications  Applications specify</p>
    <p>predecessors when replacing old versions</p>
    <p>Compare to branches in version control systems</p>
    <p>Permits many concurrency strategies</p>
    <p>Version A</p>
    <p>Version B Version C</p>
    <p>Final state on desktop</p>
    <p>Object ID: 1234</p>
  </div>
  <div class="page">
    <p>Handling Conflicts  Do nothing: fork history  Pick arbitrarily (based on</p>
    <p>timestamp)  Let the user pick a</p>
    <p>version  Media player:</p>
    <p>song title: AB and AC  Write a new version that</p>
    <p>replaces both B and C</p>
    <p>Version A</p>
    <p>Version B Version C</p>
    <p>Version D</p>
    <p>Final state on desktop</p>
    <p>Object ID: 1234</p>
  </div>
  <div class="page">
    <p>Handling Conflicts Automatically  Use application-specific</p>
    <p>knowledge  Media Player:</p>
    <p>play song in two places,  increment playcount on each  Merge to total sum</p>
    <p>Photo Editor:  Tag photos concurrently;</p>
    <p>merge to include both  User never aware a conflict</p>
    <p>occurred</p>
    <p>Version A</p>
    <p>Version B Version C</p>
    <p>Version D</p>
    <p>Final state on desktop</p>
    <p>Object ID: 1234</p>
  </div>
  <div class="page">
    <p>Storage API Summary</p>
    <p>Eyo Objects</p>
    <p>Object ID: 12 Object ID: 34 Object ID: 56  Object ID: 56</p>
    <p>Version ID: 34</p>
    <p>Version ID: 56 Version ID: 78</p>
    <p>Version ID: 21</p>
    <p>Version ID: 87 Version ID: 65</p>
    <p>Version 87 Metadata</p>
    <p>Keys Values Content-type Image/jpg Content-length 5000 Aperture f/5.6 Resolution 1024x768 ISO equiv 400 Name dog.jpg Date 4/27/10 Predecessor Version 21 Content ID Content 41</p>
    <p>Content Store ID: 41 Value:</p>
  </div>
  <div class="page">
    <p>API Implementation Challenges</p>
    <p>Device to Device Connectivity  Which devices?  Where are they?  Secure communication</p>
    <p>Continuous Synchronization  Approximates device transparency  Send updates between all reachable peers  How to do so efficiently?</p>
    <p>Provided by UIA [OSDI06]</p>
  </div>
  <div class="page">
    <p>Separate Synchronization Protocols</p>
    <p>Metadata  Fast, frequent, small changes  Result in identical collections  Use metadata to track content</p>
    <p>Content  Can be big, slow to move  Place objects where they belong</p>
  </div>
  <div class="page">
    <p>Metadata Synchronization  Find and send only</p>
    <p>changed objects from large set of unchanged objects</p>
    <p>Group updates into an immutable Generation</p>
    <p>Single Generation Vector describes set of updates each device has seen</p>
    <p>Single lookup identifies state to send</p>
    <p>tim e</p>
    <p>GV: &lt;C:0 L:0&gt; GV: &lt;C:0 L:0&gt;</p>
    <p>Store new photo:</p>
    <p>get_updates( &lt;C:1 L:0&gt; ) [ ]</p>
    <p>get_updates( &lt;C:0 L:0&gt; )</p>
    <p>GV: &lt;C:1 L:0&gt; Generation: C:1 GV: &lt; C:1 L:0 &gt; Metadata about: GV: &lt;C:1 L:0&gt;</p>
  </div>
  <div class="page">
    <p>Passing Content Responsibility</p>
    <p>Exchange responsibility for storing objects</p>
    <p>Does not rely on correct placement rules</p>
    <p>Guarantees at least one live copy  Assuming no lost</p>
    <p>or failed devices</p>
    <p>tim e</p>
    <p>GV: &lt;C:0 L:0&gt; GV: &lt;C:0 L:0&gt;</p>
    <p>Store new photo:</p>
    <p>GV: &lt;C:1 L:0&gt;</p>
    <p>GV: &lt;C:1 L:0&gt;</p>
    <p>Generation: C:1 GV: &lt; C:1 L:0 &gt; Metadata about:</p>
    <p>Content: present, not preserved</p>
  </div>
  <div class="page">
    <p>Passing Content Responsibility</p>
    <p>Exchange responsibility for storing objects</p>
    <p>Does not rely on correct placement rules</p>
    <p>Guarantees at least one live copy  Assuming no lost</p>
    <p>or failed devices</p>
    <p>Camera can safely delete photo 26</p>
    <p>tim e</p>
    <p>GV: &lt;C:1 L:0&gt;</p>
    <p>GV: &lt;C:1 L:0&gt;</p>
    <p>Generation: C:1 GV: &lt; C:1 L:0 &gt; Metadata about:</p>
    <p>Photo Content: present but wont preserve</p>
    <p>Generation: L:1 GV: &lt; C:1 L:1 &gt; Photo Content: present and will preserve</p>
    <p>Fetch Photo Content</p>
    <p>GV: &lt;C:1 L:1&gt; GV: &lt;C:1 L:1&gt;</p>
  </div>
  <div class="page">
    <p>Eyo: Implementation  Python per-device daemon</p>
    <p>RPC for metadata sync  http for fetching content (no swarming yet)</p>
    <p>Python and C client libraries  Sqlite for metadata storage &amp; queries  D-bus for event notifications</p>
    <p>UIA for group identity and communication  Users create a group of my devices  Tracks current locations, builds overlay network  Authenticates &amp; Encrypts communication</p>
  </div>
  <div class="page">
    <p>Evaluation Questions</p>
    <p>What can we do with Eyo that we couldnt do otherwise?</p>
    <p>Is Eyos API a good fit for real applications?  How difficult is adapting applications?  Usability of explicit version histories?</p>
    <p>Is the metadata-everywhere model feasible?  Storage costs?  Bandwidth overhead?</p>
  </div>
  <div class="page">
    <p>Evaluation Approach</p>
    <p>Modify applications to use Eyo  Rhythmbox &amp; Quodlibet media players  gPodder podcast manager  IMAP email gateway  Rawstudio photo editor</p>
    <p>Examine new features &amp; scope and types of changes needed</p>
  </div>
  <div class="page">
    <p>New Ability: Device Transparency  From a disconnected</p>
    <p>device  Browse and organize</p>
    <p>the entire collection  Search for tags  View thumbnail images  Add and edit tags for all images  Show which devices hold objects</p>
    <p>View and edit locally-cached full size image originals</p>
  </div>
  <div class="page">
    <p>Few Application Changes Needed  Rawstudio photo editor (C &amp; C++):</p>
    <p>No User Interface changes in these values  Remaining example applications:</p>
    <p>Changes limited to &lt;10% of codebase</p>
    <p>Original #lines of code</p>
    <p>Eyo Version #lines</p>
    <p>#lines added</p>
    <p>#lines removed</p>
    <p>Different line definitions</p>
  </div>
  <div class="page">
    <p>Applications already have Metadata split</p>
    <p>Local Filesystem: File A, File B, File C,</p>
    <p>File: Metadata DB</p>
    <p>User Interface Application Core Object A</p>
    <p>Object B</p>
    <p>Object C</p>
    <p>Metadata A,B,C</p>
    <p>Content A,B,C</p>
    <p>Filesystem API</p>
  </div>
  <div class="page">
    <p>Eyo API Makes Split Explicit</p>
    <p>Local Storage</p>
    <p>User Interface Application Core Object A</p>
    <p>Object B</p>
    <p>Object C Eyo</p>
    <p>Content Store A,B,C</p>
    <p>Metadata Store A,B,C</p>
    <p>Reads &amp; Writes</p>
    <p>Queries &amp; Notifications</p>
    <p>Network Updates</p>
    <p>Eyo API</p>
  </div>
  <div class="page">
    <p>Metadata Storage Cost</p>
    <p>How much metadata?  Look at one personal collection:</p>
    <p># objects total size Metadata per object</p>
    <p>Email 724,230 4.3 GB 245B</p>
    <p>Music 5,278 26 GB 511B</p>
    <p>Photos 72,380 122.8 GB 328B</p>
    <p>Not very different</p>
  </div>
  <div class="page">
    <p>Storage Costs: Reasonable for portable devices</p>
    <p>Store collections in Eyo  Look at resulting metadata size</p>
    <p># objects total size Eyo metadata store size</p>
    <p>Email 724,230 4.3 GB 529 MB</p>
    <p>Music 5,278 26 GB 5.8 MB</p>
    <p>Photos 72,380 122.8 GB 53 MB</p>
    <p>Total: &lt;600MB, mostly from email</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Optimistic Replication  Cimbiosys, Perspective  Coda, Ficus, Bayou, PRACTI, EnsemBlue,</p>
    <p>Tierstore, Podbase, Ivy</p>
    <p>Point-to-point replication: Rsync, Unison  Version Control Systems</p>
    <p>Git, SVN  Centralized Cloud Topologies</p>
    <p>MobileMe/iCloud, Gmail/Gears, LiveMesh 36</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Device Transparency  View and mange complete collection</p>
    <p>From disconnected, storage limited devices  Eyo</p>
    <p>Storage API with explicit version histories  Continuous peer-to-peer synchronization  Good fit for existing applications</p>
  </div>
</Presentation>
