<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Qifan Pu, Haoyuan Li,</p>
    <p>Matei Zaharia, Ali Ghodsi, Ion Stoica</p>
    <p>FairRide: Near-Optimal Fair Cache Sharing</p>
    <p>UC BERKELEY</p>
  </div>
  <div class="page">
    <p>Caches are crucial</p>
  </div>
  <div class="page">
    <p>Caches are crucial</p>
  </div>
  <div class="page">
    <p>Caches are crucial</p>
  </div>
  <div class="page">
    <p>Caches are crucial</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
    <p>Increasingly, caches are shared among multiple users</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
    <p>Increasingly, caches are shared among multiple users</p>
    <p>Especially with the advent of cloud</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
    <p>Increasingly, caches are shared among multiple users</p>
    <p>Especially with the advent of cloud</p>
    <p>Backend (storage/network)</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
    <p>Increasingly, caches are shared among multiple users</p>
    <p>Especially with the advent of cloud</p>
    <p>Backend (storage/network)</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
    <p>Increasingly, caches are shared among multiple users</p>
    <p>Especially with the advent of cloud</p>
    <p>Benefits:</p>
    <p>Provide low latency</p>
    <p>Reduce backend load</p>
    <p>Backend (storage/network)</p>
  </div>
  <div class="page">
    <p>Cache sharing</p>
    <p>Increasingly, caches are shared among multiple users</p>
    <p>Especially with the advent of cloud</p>
    <p>Benefits:</p>
    <p>Provide low latency</p>
    <p>Reduce backend load</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency  Single user gets arbitrarily</p>
    <p>small cache</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency  Single user gets arbitrarily</p>
    <p>small cache</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency  Single user gets arbitrarily</p>
    <p>small cache</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency  Single user gets arbitrarily</p>
    <p>small cache</p>
    <p>Prone to strategic behavior</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency  Single user gets arbitrarily</p>
    <p>small cache</p>
    <p>Prone to strategic behavior</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Problems with cache algorithms</p>
    <p>*</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>LRU, LFU, LRU-K  Cache data likely to be</p>
    <p>accessed in the future</p>
    <p>Optimize global efficiency  Single user gets arbitrarily</p>
    <p>small cache</p>
    <p>Prone to strategic behavior</p>
    <p>* *</p>
  </div>
  <div class="page">
    <p>Statically allocated</p>
    <p>Backend (storage/network)</p>
    <p>Cache Cache Cache</p>
    <p>Solution?</p>
  </div>
  <div class="page">
    <p>Statically allocated</p>
    <p>Backend (storage/network)</p>
    <p>Cache Cache Cache</p>
    <p>Solution?</p>
    <p>Isolation Strategy-proof</p>
  </div>
  <div class="page">
    <p>Statically allocated</p>
    <p>*</p>
    <p>Globally shared</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>Backend (storage/network)</p>
    <p>Cache Cache Cache</p>
    <p>What we want</p>
    <p>Isolation Strategy-proof</p>
  </div>
  <div class="page">
    <p>Statically allocated</p>
    <p>*</p>
    <p>Globally shared</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>Backend (storage/network)</p>
    <p>Cache Cache Cache</p>
    <p>What we want</p>
    <p>Isolation Strategy-proof</p>
    <p>Higher utilization Share data</p>
  </div>
  <div class="page">
    <p>Statically allocated</p>
    <p>*</p>
    <p>Globally shared</p>
    <p>Cache</p>
    <p>Backend (storage/network)</p>
    <p>Backend (storage/network)</p>
    <p>Cache Cache Cache</p>
    <p>What we want</p>
    <p>Isolation Strategy-proof</p>
    <p>Higher utilization Share data</p>
  </div>
  <div class="page">
    <p>Our contribution</p>
  </div>
  <div class="page">
    <p>Our contribution</p>
    <p>First analysis of cache allocation policies</p>
    <p>with well defined resource-sharing properties.</p>
  </div>
  <div class="page">
    <p>Our contribution</p>
    <p>First analysis of cache allocation policies</p>
    <p>with well defined resource-sharing properties.</p>
    <p>Impossibility result:</p>
    <p>no policy achieves all good properties!</p>
  </div>
  <div class="page">
    <p>Our contribution</p>
    <p>First analysis of cache allocation policies</p>
    <p>with well defined resource-sharing properties.</p>
    <p>Impossibility result:</p>
    <p>no policy achieves all good properties!</p>
    <p>A new policy that is near-optimal and outperforms other policies when users cheat.</p>
  </div>
  <div class="page">
    <p>A simple model</p>
  </div>
  <div class="page">
    <p>Users access equal-sized files at constant rates</p>
    <p>the rate user i accesses file j</p>
    <p>A simple model</p>
    <p>r ij</p>
  </div>
  <div class="page">
    <p>Users access equal-sized files at constant rates</p>
    <p>the rate user i accesses file j</p>
    <p>A allocation policy decides which files to cache</p>
    <p>the % of file j put in cache</p>
    <p>A simple model</p>
    <p>r ij</p>
    <p>p j</p>
  </div>
  <div class="page">
    <p>Users access equal-sized files at constant rates</p>
    <p>the rate user i accesses file j</p>
    <p>A allocation policy decides which files to cache</p>
    <p>the % of file j put in cache</p>
    <p>Users care their hit ratio</p>
    <p>user is hit ratio:</p>
    <p>A simple model</p>
    <p>r ij</p>
    <p>p j</p>
  </div>
  <div class="page">
    <p>Users access equal-sized files at constant rates</p>
    <p>the rate user i accesses file j</p>
    <p>A allocation policy decides which files to cache</p>
    <p>the % of file j put in cache</p>
    <p>Users care their hit ratio</p>
    <p>user is hit ratio:</p>
    <p>A simple model</p>
    <p>r ij</p>
    <p>HR i =</p>
    <p>total _hits</p>
    <p>total _accesses =</p>
    <p>p j r ij</p>
    <p>j</p>
    <p>r ij</p>
    <p>j</p>
    <p>p j</p>
  </div>
  <div class="page">
    <p>Users access equal-sized files at constant rates</p>
    <p>the rate user i accesses file j</p>
    <p>A allocation policy decides which files to cache</p>
    <p>the % of file j put in cache</p>
    <p>Users care their hit ratio</p>
    <p>user is hit ratio:</p>
    <p>A simple model</p>
    <p>Results hold with varied file sizes, access partial files, is binary, etc.</p>
    <p>r ij</p>
    <p>HR i =</p>
    <p>total _hits</p>
    <p>total _accesses =</p>
    <p>p j r ij</p>
    <p>j</p>
    <p>r ij</p>
    <p>j</p>
    <p>p j</p>
    <p>p j</p>
  </div>
  <div class="page">
    <p>What properties do we want?</p>
    <p>Can we extend max-min to solve the problem?</p>
    <p>How do we solve it? (FairRide)</p>
    <p>How well does FairRide work in practice?</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>No user should be worse off than static allocation</p>
    <p>Properties</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>No user should be worse off than static allocation</p>
    <p>Strategy-Proofness</p>
    <p>No user can improve by cheating</p>
    <p>Properties</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>No user should be worse off than static allocation</p>
    <p>Strategy-Proofness</p>
    <p>No user can improve by cheating</p>
    <p>Pareto Efficiency</p>
    <p>Cant improve a user without hurting others</p>
    <p>Properties</p>
  </div>
  <div class="page">
    <p>Strategy proofness</p>
  </div>
  <div class="page">
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Strategy proofness</p>
  </div>
  <div class="page">
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
  </div>
  <div class="page">
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
  </div>
  <div class="page">
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>time (min)</p>
    <p>site1</p>
    <p>site2</p>
    <p>Very easy to cheat, hard to detect</p>
    <p>e.g., by making spurious accesses</p>
    <p>Can happen in practice</p>
    <p>Strategy proofness</p>
    <p>*</p>
    <p>Amazon Elasticache</p>
    <p>MySQL Instance</p>
    <p>Site1 Site2</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>No user should be worse off than static allocation</p>
    <p>Strategy-Proofness</p>
    <p>No user can improve by cheating</p>
    <p>Pareto Efficiency</p>
    <p>Cant improve a user without hurting others</p>
    <p>Properties</p>
  </div>
  <div class="page">
    <p>What properties do we want?</p>
    <p>Can we extend max-min fairness to solve the problem?</p>
    <p>How do we solve it? (FairRide)</p>
    <p>How well does FairRide work in practice?</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>What is max-min fairness?</p>
  </div>
  <div class="page">
    <p>Maximize the the user with minimum allocation</p>
    <p>Solution: allocate each 1/n (fair share)</p>
    <p>What is max-min fairness?</p>
  </div>
  <div class="page">
    <p>Maximize the the user with minimum allocation</p>
    <p>Solution: allocate each 1/n (fair share)</p>
    <p>Handles if some users want less than fair share</p>
    <p>What is max-min fairness?</p>
  </div>
  <div class="page">
    <p>Maximize the the user with minimum allocation</p>
    <p>Solution: allocate each 1/n (fair share)</p>
    <p>Handles if some users want less than fair share</p>
    <p>Widely successful to other resources:</p>
    <p>OS: round robin, prop sharing, lottery sched</p>
    <p>Networking: fair queueing, wfq, wf2q, csfq, drr</p>
    <p>Datacenter: DRF, Hadoop fair sched, Quincy</p>
    <p>What is max-min fairness?</p>
  </div>
  <div class="page">
    <p>An example</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>A</p>
    <p>C</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB 15</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB 15</p>
    <p>B 100%</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB 15</p>
    <p>B B 100%</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB 15</p>
    <p>B A B 100%</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB 15</p>
    <p>B A B 100%</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB 15</p>
    <p>B A C B 100%</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>B A C B 100%</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>C 5 req/sec</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3%</p>
    <p>B A C B 100%</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3%</p>
    <p>C</p>
    <p>B A C B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3%</p>
    <p>C</p>
    <p>B A C B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3%</p>
    <p>C</p>
    <p>B A C B</p>
    <p>Is it possible for a strategic Bob to get higher hit rate from the system?</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3%</p>
    <p>C</p>
    <p>B A C B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B A C B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B A C B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B A C 50%</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B C 50% 100%</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B C 50% 100%</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec 100%</p>
    <p>C</p>
    <p>B C 50% 100%</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec 100%</p>
    <p>C</p>
    <p>B C 50% 100%</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B C 50% 100%</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>An example</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>file sizes = 1GB, total cache = 2GB</p>
    <p>HR = 83.3%</p>
    <p>HR = 83.3% +10 req/sec</p>
    <p>C</p>
    <p>B C 50% 100%</p>
    <p>B</p>
    <p>By gaming the system, a user can increase performance by hurting others!</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>static allocation</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>static allocation</p>
  </div>
  <div class="page">
    <p>Properties</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>max-min rate</p>
    <p>static allocation</p>
  </div>
  <div class="page">
    <p>No allocation policy can satisfy all three properties!</p>
    <p>Theorem</p>
  </div>
  <div class="page">
    <p>No allocation policy can satisfy all three properties!</p>
    <p>Best we can do: two of three.</p>
    <p>Theorem</p>
  </div>
  <div class="page">
    <p>What makes cache sharing different?</p>
  </div>
  <div class="page">
    <p>What makes cache sharing different?</p>
    <p>Unlike CPU or network links:</p>
  </div>
  <div class="page">
    <p>The cost of switching is high  Cache misses go to slow storage</p>
    <p>Prevents efficient time multiplexing</p>
    <p>What makes cache sharing different?</p>
    <p>Unlike CPU or network links:</p>
  </div>
  <div class="page">
    <p>The cost of switching is high  Cache misses go to slow storage</p>
    <p>Prevents efficient time multiplexing</p>
    <p>Can be shared in space  Shared data can be accessed non-exclusively</p>
    <p>A CPU cycle used by only one thread</p>
    <p>A network link sends one packet at a time</p>
    <p>What makes cache sharing different?</p>
    <p>Unlike CPU or network links:</p>
  </div>
  <div class="page">
    <p>What properties do we want?</p>
    <p>Can we extend max-min to solve the problem?</p>
    <p>How do we solve it? (FairRide)</p>
    <p>How well does FairRide work in practice?</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>max-min rate</p>
    <p>static allocation</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>Properties</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>max-min rate</p>
    <p>static allocation</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>Properties</p>
    <p>FairRide</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>max-min rate</p>
    <p>static allocation</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>Properties</p>
    <p>FairRide</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>max-min rate</p>
    <p>static allocation</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>Properties</p>
    <p>FairRide   Near-optimal</p>
  </div>
  <div class="page">
    <p>FairRide</p>
  </div>
  <div class="page">
    <p>FairRide  Starts with max-min fairness</p>
    <p>Allocate 1/n to each user</p>
    <p>Split cost of shared files equally among shared users</p>
  </div>
  <div class="page">
    <p>FairRide  Starts with max-min fairness</p>
    <p>Allocate 1/n to each user</p>
    <p>Split cost of shared files equally among shared users</p>
    <p>Only difference:</p>
    <p>blocking users who dont pay from accessing</p>
  </div>
  <div class="page">
    <p>FairRide  Starts with max-min fairness</p>
    <p>Allocate 1/n to each user</p>
    <p>Split cost of shared files equally among shared users</p>
    <p>Only difference:</p>
    <p>blocking users who dont pay from accessing</p>
    <p>Probabilistic blocking: with some probability</p>
  </div>
  <div class="page">
    <p>FairRide  Starts with max-min fairness</p>
    <p>Allocate 1/n to each user</p>
    <p>Split cost of shared files equally among shared users</p>
    <p>Only difference:</p>
    <p>blocking users who dont pay from accessing</p>
    <p>Probabilistic blocking: with some probability</p>
    <p>Implemented with delaying</p>
  </div>
  <div class="page">
    <p>Alice</p>
    <p>Bob HR = 83.3% +10 req/sec</p>
    <p>FairRide: Blocking</p>
    <p>A</p>
    <p>B 100%</p>
    <p>C 100%</p>
    <p>B C 0 0.5 1 1.5 2GB</p>
  </div>
  <div class="page">
    <p>Alice</p>
    <p>Bob HR = 83.3% +10 req/sec</p>
    <p>FairRide: Blocking</p>
    <p>A</p>
    <p>B 100%</p>
    <p>C 100%</p>
    <p>B C 0 0.5 1 1.5 2GB</p>
  </div>
  <div class="page">
    <p>Alice</p>
    <p>Bob HR = 83.3% +10 req/sec</p>
    <p>FairRide: Blocking</p>
    <p>A</p>
    <p>B 100%</p>
    <p>C 100%</p>
    <p>Allow 5 Block 5</p>
    <p>B C 0 0.5 1 1.5 2GB</p>
  </div>
  <div class="page">
    <p>Alice</p>
    <p>Bob HR = 83.3% +10 req/sec</p>
    <p>FairRide: Blocking</p>
    <p>A</p>
    <p>B 100%</p>
    <p>C 100%</p>
    <p>Allow 5 Block 5</p>
    <p>B C 0 0.5 1 1.5 2GB</p>
  </div>
  <div class="page">
    <p>Alice</p>
    <p>Bob HR = 83.3% +10 req/sec</p>
    <p>FairRide: Blocking</p>
    <p>A</p>
    <p>B 100%</p>
    <p>C 100%</p>
    <p>Allow 5 Block 5</p>
    <p>B C 0 0.5 1 1.5 2GB</p>
  </div>
  <div class="page">
    <p>Alice</p>
    <p>Bob HR = 83.3% +10 req/sec</p>
    <p>FairRide: Blocking</p>
    <p>A</p>
    <p>B 100%</p>
    <p>C 100%</p>
    <p>Allow 5 Block 5</p>
    <p>B C 0 0.5 1 1.5 2GB Cheating always gives worst performance.</p>
    <p>Dis-incentive strategic behaviors.</p>
  </div>
  <div class="page">
    <p>Probabilistic blocking</p>
  </div>
  <div class="page">
    <p>Probabilistic blocking  FairRide blocks a user with p(nj) = 1/(nj+1) probability</p>
    <p>nj is number of other users caching file j</p>
    <p>e.g., p(1)=50%, p(4)=20%</p>
  </div>
  <div class="page">
    <p>Probabilistic blocking  FairRide blocks a user with p(nj) = 1/(nj+1) probability</p>
    <p>nj is number of other users caching file j</p>
    <p>e.g., p(1)=50%, p(4)=20%</p>
    <p>The best you can do in a general case</p>
  </div>
  <div class="page">
    <p>Probabilistic blocking  FairRide blocks a user with p(nj) = 1/(nj+1) probability</p>
    <p>nj is number of other users caching file j</p>
    <p>e.g., p(1)=50%, p(4)=20%</p>
    <p>The best you can do in a general case</p>
    <p>Less blocking does not prevent cheating</p>
  </div>
  <div class="page">
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>max-min fairness</p>
    <p>priority allocation</p>
    <p>max-min rate</p>
    <p>static allocation</p>
    <p>Isolation Guarantee</p>
    <p>Strategy Proofness</p>
    <p>Pareto Efficiency</p>
    <p>Properties</p>
    <p>FairRide   Near-optimal</p>
  </div>
  <div class="page">
    <p>Strategyproofness</p>
    <p>Paretoefficiency</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>More efficient when user cheats  Minimal impact on efficiency when no user cheats</p>
    <p>Strategyproofness</p>
    <p>Paretoefficiency</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>More efficient when user cheats  Minimal impact on efficiency when no user cheats</p>
    <p>Cost of cheating vs. cost of blocking/delaying</p>
    <p>Strategyproofness</p>
    <p>Paretoefficiency</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>More efficient when user cheats  Minimal impact on efficiency when no user cheats</p>
    <p>Cost of cheating vs. cost of blocking/delaying  The latter is small insurance for the former</p>
    <p>Strategyproofness</p>
    <p>Paretoefficiency</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>More efficient when user cheats  Minimal impact on efficiency when no user cheats</p>
    <p>Cost of cheating vs. cost of blocking/delaying  The latter is small insurance for the former</p>
    <p>Strategy-proofness makes the system stable</p>
    <p>Strategyproofness</p>
    <p>Paretoefficiency</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>What properties do we want?</p>
    <p>Can we extend max-min to solve the problem?</p>
    <p>How do we solve it? (FairRide)</p>
    <p>How well does FairRide work in practice?</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Implemented in Alluxio (formerly Tachyon)</p>
    <p>FairRide: delay a request as if blocked</p>
    <p>Compared with max-min fairness.</p>
    <p>Benchmarked with TPC-H, YCSB, Facebook workloads.</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Does FairRide prevent cheating?</p>
    <p>What is the cost of FairRide?</p>
    <p>How does it perform end-to-end?</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>user 2 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>user 2 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>user 2 cheats</p>
    <p>user 1 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>user 2 cheats</p>
    <p>user 1 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Cheating under Max-min fairness</p>
    <p>Cheating can greatly hurt user performance.</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>user 2 cheats</p>
    <p>user 1 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>m is</p>
    <p>s r</p>
    <p>a ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>Cheating under FairRide</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>m is</p>
    <p>s r</p>
    <p>a ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>Cheating under FairRide</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>m is</p>
    <p>s r</p>
    <p>a ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>Cheating under FairRide</p>
    <p>user 2 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>m is</p>
    <p>s r</p>
    <p>a ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>Cheating under FairRide</p>
    <p>user 2 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>m is</p>
    <p>s r</p>
    <p>a ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>Cheating under FairRide</p>
    <p>user 2 cheats</p>
    <p>user 1 cheats</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>m is</p>
    <p>s r</p>
    <p>a ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>user 1</p>
    <p>user 2</p>
    <p>Cheating under FairRide</p>
    <p>user 2 cheats</p>
    <p>user 1 cheats</p>
    <p>FairRide dis-incentives users from cheating.</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Many users</p>
    <p>A v</p>
    <p>g .</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>No. of strategic users (out of 20)</p>
    <p>strategic users</p>
    <p>other users</p>
    <p>A v</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Many users</p>
    <p>A v</p>
    <p>g .</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>No. of strategic users (out of 20)</p>
    <p>strategic users</p>
    <p>other users</p>
    <p>A v</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Many users</p>
    <p>A v</p>
    <p>g .</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>No. of strategic users (out of 20)</p>
    <p>strategic users</p>
    <p>other users</p>
    <p>A v</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
  </div>
  <div class="page">
    <p>Many users</p>
    <p>A v</p>
    <p>g .</p>
    <p>m is</p>
    <p>s ra</p>
    <p>ti o</p>
    <p>( %</p>
    <p>)</p>
    <p>No. of strategic users (out of 20)</p>
    <p>strategic users</p>
    <p>other users</p>
    <p>A v</p>
    <p>g .</p>
    <p>re sp</p>
    <p>o n</p>
    <p>se (</p>
    <p>m s)</p>
    <p>FairRide has minimal loss.</p>
  </div>
  <div class="page">
    <p>Facebook experiments</p>
    <p>R e</p>
    <p>d cu</p>
    <p>ti o</p>
    <p>n in</p>
    <p>M e</p>
    <p>d ia</p>
    <p>n</p>
    <p>Jo b</p>
    <p>T im</p>
    <p>e (</p>
    <p>% )</p>
    <p>Bin (#Tasks)</p>
    <p>max-min FairRide</p>
  </div>
  <div class="page">
    <p>Facebook experiments</p>
    <p>FairRide outperforms max-min fairness by 29%</p>
    <p>R e</p>
    <p>d cu</p>
    <p>ti o</p>
    <p>n in</p>
    <p>M e</p>
    <p>d ia</p>
    <p>n</p>
    <p>Jo b</p>
    <p>T im</p>
    <p>e (</p>
    <p>% )</p>
    <p>Bin (#Tasks)</p>
    <p>max-min FairRide</p>
  </div>
  <div class="page">
    <p>No policy can satisfy all desirable properties:</p>
    <p>Isolation guarantee</p>
    <p>Strategy proofness</p>
    <p>Pareto efficiency</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>No policy can satisfy all desirable properties:</p>
    <p>Isolation guarantee</p>
    <p>Strategy proofness</p>
    <p>Pareto efficiency</p>
    <p>FairRide:isolation guarantee and strategyproofness through probabilistic blocking.</p>
    <p>Outperforms static allocation and other sharing policies when users cheat.</p>
    <p>Achieves this with least overhead</p>
    <p>Conclusion</p>
  </div>
</Presentation>
