<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Architecture for Caching Responses with Multiple Dynamic Dependencies in Multi-Tier Data-Centers over InfiniBandS. Narravula, P. Balaji, K. Vaidyanathan,</p>
    <p>H.-W. Jin and D. K. Panda</p>
    <p>The Ohio State University</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation</p>
    <p>Design and Implementation</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Fast Internet Growth  Number of Users  Amount of data  Types of services</p>
    <p>Several uses  E-Commerce, Online Banking, Online Auctions, etc</p>
    <p>Web Server Scalability  Multi-Tier Data-Centers  Caching  An Important Technique</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation  Multi-Tier Data-Centers  Active Caches</p>
    <p>Design and Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>A Typical Multi-Tier DataCenter</p>
    <p>Database Servers</p>
    <p>Clients</p>
    <p>Application Servers</p>
    <p>Web Servers</p>
    <p>Proxy Nodes</p>
    <p>Tier 0</p>
    <p>Tier 1</p>
    <p>Tier 2</p>
    <p>Apache</p>
    <p>PHP</p>
    <p>WAN</p>
    <p>SAN</p>
  </div>
  <div class="page">
    <p>InfiniBand  High Performance</p>
    <p>Low latency  High Bandwidth</p>
    <p>Open Industry Standard  Provides rich features</p>
    <p>RDMA, Remote Atomic operations, etc  Targeted for Data-Centers  Transport Layers</p>
    <p>VAPI  IPoIB</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation  Multi-Tier Data-Centers  Active Caches</p>
    <p>Design and Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Caching</p>
    <p>Can avoid re-fetching of content</p>
    <p>Beneficial if requests repeat</p>
    <p>Important for scalability  Static content caching</p>
    <p>Well studied in the past  Widely used</p>
    <p>Front-End Tiers</p>
    <p>Back-End Tiers</p>
    <p>Number of Requests Decrease</p>
  </div>
  <div class="page">
    <p>Active Caching  Dynamic Data</p>
    <p>Stock Quotes, Scores, Personalized Content, etc  Complexity of content</p>
    <p>Simple caching methods not suited  Issues</p>
    <p>Consistency  Coherency</p>
    <p>Proxy Node Cache</p>
    <p>Back-End Data</p>
    <p>User Request</p>
    <p>Update</p>
  </div>
  <div class="page">
    <p>Cache Coherency</p>
    <p>Refers to the average staleness of the document served from cache</p>
    <p>Strong or immediate (Strong Coherency)  Required for certain kinds of data  Cache Disabling  Client Polling</p>
  </div>
  <div class="page">
    <p>Basic Client Polling *</p>
    <p>Front-End Back-End</p>
    <p>Request</p>
    <p>Cache Hit</p>
    <p>Cache Miss</p>
    <p>Response</p>
    <p>Version Read</p>
    <p>* SAN04: Supporting Strong Cache Coherency for Active Caches in Multi-Tier Data-Centers over InfiniBand. Narravula, et. Al.</p>
  </div>
  <div class="page">
    <p>Multiple Object Dependencies  Cache documents contain multiple objects  A Many-to-Many mapping</p>
    <p>Single Cache document can contain Multiple Objects  Single Object can be a part of multiple Documents</p>
    <p>Complexity!!</p>
    <p>Cache Documents Objects</p>
  </div>
  <div class="page">
    <p>Client Polling</p>
    <p>Front-End Back-End</p>
    <p>Request</p>
    <p>Cache Hit</p>
    <p>Cache Miss</p>
    <p>Response</p>
    <p>Version Read Single Check</p>
    <p>Possible</p>
    <p>Single Lookup counter essential for correct and efficient design</p>
  </div>
  <div class="page">
    <p>Objective</p>
    <p>To design an architecture that very</p>
    <p>efficiently supports strong cache</p>
    <p>coherency with multiple dynamic</p>
    <p>dependencies on InfiniBand</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Introduction/Motivation</p>
    <p>Design and Implementation</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Basic System Architecture</p>
    <p>Server Node</p>
    <p>Mod</p>
    <p>Server Node</p>
    <p>Mod</p>
    <p>Server Node</p>
    <p>Mod</p>
    <p>Server Node</p>
    <p>Mod</p>
    <p>Cooperation</p>
    <p>Cache Lookup Counter maintained on the Application Servers</p>
    <p>Proxy Servers</p>
    <p>Application Servers</p>
  </div>
  <div class="page">
    <p>Basic Design</p>
    <p>Home Node based Client Polling  Cache Documents assigned home nodes</p>
    <p>Proxy Server Modules  Client polling functionality</p>
    <p>Application Server Modules  Support Version Reads for client polling  Handle updates</p>
  </div>
  <div class="page">
    <p>Many-to-Many Mappings</p>
    <p>Mapping of updates to dynamic objects  Mapping of dynamic objects with Lookup</p>
    <p>counters  Efficiency</p>
    <p>Factor of dependency</p>
    <p>UpdatesObjectsLookup counters</p>
  </div>
  <div class="page">
    <p>Mapping of updates</p>
    <p>Non-Trivial solution  Three possibilities</p>
    <p>Database schema, constraints and dependencies are known</p>
    <p>Per query dependencies are known  No dependency information known</p>
  </div>
  <div class="page">
    <p>Mapping Schemes</p>
    <p>Dependency Lists  Home node based  Complete dependency lists</p>
    <p>Invalidate All  Single Lookup Counter for a given class of</p>
    <p>queries  Low application server overheads</p>
  </div>
  <div class="page">
    <p>Handling Updates</p>
    <p>Database Server</p>
    <p>Ack (Atomic)</p>
    <p>Application Server</p>
    <p>Application Server</p>
    <p>Application Server</p>
    <p>Update N otification</p>
    <p>VAPI Send Local</p>
    <p>Search and Coherent Invalidate</p>
    <p>HTTP Request</p>
    <p>HTTP Response</p>
    <p>DB Query (TCP)</p>
    <p>DB Re spons</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Presentation Outline  Introduction/Motivation</p>
    <p>Design and Implementation</p>
    <p>Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Experimental Test-bed</p>
    <p>Cluster 1: Eight Dual 3.0 GHz Xeon processor nodes with 64-bit</p>
    <p>Side Bus</p>
    <p>Cluster 2: Eight Dual 2.4 GHz Xeon processor nodes with 64-bit</p>
    <p>Side Bus</p>
    <p>Mellanox InfiniHost MT23108 Dual Port 4x HCAs</p>
    <p>MT43132 eight 4x port Switch</p>
    <p>Mellanox Golden CD 0.5.0</p>
  </div>
  <div class="page">
    <p>Experimental Outline</p>
    <p>Basic Data-Center Performance  Cache Misses in Active Caching  Impact of Cache Size  Impact of Varying Dependencies  Impact of Load in Backend Servers</p>
    <p>Traces Used  Traces 1-5 with increasing update rate</p>
    <p>Trace 6: Zipf like trace</p>
  </div>
  <div class="page">
    <p>Basic Data-Center Performance</p>
    <p>Maintaining Dependency Lists perform significantly well for all traces</p>
  </div>
  <div class="page">
    <p>Cache Misses in Active Caching</p>
    <p>Cache misses for Invalidate All increases drastically with increasing update rates</p>
  </div>
  <div class="page">
    <p>Impact of Cache Size</p>
    <p>Maintaining Dependency Lists perform significantly well for all traces  Possible to cache a select few and still extract performance</p>
  </div>
  <div class="page">
    <p>Impact of Varying Dependencies</p>
    <p>Throughput drops significantly with increase in the average number of dependencies per cache file</p>
  </div>
  <div class="page">
    <p>Impact of Load in Backend Servers</p>
    <p>Our design can sustain high performance even under high loaded conditions with a factor of improvement close to 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>An architecture for supporting Strong Cache Coherence with multiple dynamic dependencies</p>
    <p>Efficiently handle multiple dynamic dependencies  Supporting RDMA-based Client polling</p>
    <p>Resilient to load on back-end servers</p>
  </div>
  <div class="page">
    <p>Web Pointers</p>
    <p>http://nowlab.cis.ohio-state.edu/</p>
    <p>E-mail: {narravul, balaji, vaidyana, jinhy, panda} @cse.ohio-state.edu</p>
    <p>NBC home page</p>
  </div>
  <div class="page">
    <p>Back-up Slides</p>
  </div>
  <div class="page">
    <p>Cache Consistency</p>
    <p>Non-decreasing views of system state  Updates seen by all or none</p>
    <p>User Requests</p>
    <p>Proxy Nodes</p>
    <p>Back-End Nodes</p>
    <p>Update</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Receiver side CPU utilization is very low  Leveraging the benefits of One sided communication</p>
  </div>
  <div class="page">
    <p>RDMA based Client Polling *</p>
    <p>The VAPI module can sustain performance even with heavy load on the back-end servers</p>
    <p>* SAN04: Supporting Strong Cache Coherency for Active Caches in Multi-Tier Data-Centers over InfiniBand. Narravula, et. Al.</p>
    <p>DataCenter: Throughput</p>
    <p>Num ber of Com pute Threads</p>
    <p>T ra</p>
    <p>n s a c ti o n s p</p>
    <p>e r</p>
    <p>s e c o n d (</p>
    <p>T P</p>
    <p>S )</p>
    <p>No Cache IPoIB VAPI</p>
  </div>
  <div class="page">
    <p>Mechanism</p>
    <p>Cache Hit:  Back-end Version Check  If version current, use cache  Invalidate data for failed version check  Use of RDMA-Read</p>
    <p>Cache Miss  Get data to cache  Initialize local versions</p>
  </div>
  <div class="page">
    <p>Other Implementation Details  Requests to read and update are mutually</p>
    <p>excluded at the back-end module to avoid simultaneous readers and writers accessing the same data.</p>
    <p>Minimal changes to existing application software</p>
  </div>
</Presentation>
