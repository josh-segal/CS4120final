<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Paxos Replicated State Machines as the Basis of a High</p>
    <p>Performance Data Store</p>
    <p>William J. Bolosky,</p>
    <p>Dexter Bradshaw, Randolph B. Haagens,</p>
    <p>Norbert P. Kusters and Peng Li</p>
    <p>March 30, 2011</p>
  </div>
  <div class="page">
    <p>Q: How to build a fault-tolerant, high-performance data store</p>
    <p>from commodity parts?</p>
    <p>A: Paxos replicated state machines</p>
  </div>
  <div class="page">
    <p>Paxos Replicated State Machines  Sequentially consistent  Persistent  Fault tolerant  Dont rely on clock sync for correctness  Thought to be too slow</p>
    <p>Conventional systems compromise on  Semantics (e.g. data consistency after failures)  Assumptions (e.g. clock sync for correctness)  API (e.g. append only)  Special hardware (e.g. FABs write timestamps)</p>
    <p>Paxos equaling the speed of a conventional system is a win  That we sometimes do better is a bonus</p>
  </div>
  <div class="page">
    <p>Take Away Point</p>
    <p>For datacenter-like systems that:</p>
    <p>Value Consistency and Availability over Partition tolerance</p>
    <p>Have operation latencies  network latencies</p>
    <p>Paxos replicated state machines</p>
    <p>Perform very well</p>
    <p>While not compromising</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background: Replicated State Machines and Paxos</p>
    <p>SMARTER and Gaios</p>
    <p>A new protocol for read-only operations</p>
    <p>Performance evaluation and comparison to primary-backup replication</p>
  </div>
  <div class="page">
    <p>Replicated State Machines</p>
    <p>For fault tolerance  Of any deterministic computation  Via replication  Replicas see the same sequence of inputs</p>
    <p>Paxos is a protocol for guaranteeing input ordering, even with:  Multiple clients  Unreliable networks  No synchronized clocks  Unlimited machine reboots  Some permanent stopping faults (i.e., disk losses)  But not Byzantine faults</p>
  </div>
  <div class="page">
    <p>Non Trade-Off</p>
    <p>RSMs one-at-a-time execution model seems to be at odds with disks need to reorder IO for efficiency. Its not.</p>
    <p>Analogous to an out-of-order processor.</p>
  </div>
  <div class="page">
    <p>Paxos Basics</p>
    <p>Paxos binds client requests to sequentially numbered slots.</p>
    <p>In normal operation requires a write to persistent store to survive power loss.</p>
    <p>Has a dynamically selected and changeable leader that drives the protocol.</p>
  </div>
  <div class="page">
    <p>Client</p>
    <p>Leader</p>
    <p>Member</p>
    <p>Member</p>
    <p>Client Request Proposal Logging Log Complete</p>
    <p>Log Complete + ACK</p>
    <p>Commit Reply Extra Reply</p>
  </div>
  <div class="page">
    <p>Time (ms)</p>
    <p>Request Send</p>
    <p>Proposal Send</p>
    <p>Logging (first)</p>
    <p>Logging (second)</p>
    <p>ACK Send</p>
    <p>Execute</p>
    <p>Reply Send</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background: Replicated State Machines and Paxos</p>
    <p>SMARTER and Gaios</p>
    <p>A new protocol for read-only operations</p>
    <p>Performance evaluation and comparison to primary-backup replication</p>
  </div>
  <div class="page">
    <p>Gaios Architecture</p>
    <p>Standard Application</p>
    <p>NTFS</p>
    <p>Gaios Disk Driver</p>
    <p>SMARTER Client</p>
    <p>User</p>
    <p>Kernel</p>
    <p>Net</p>
    <p>Client Machine</p>
    <p>NTFS</p>
    <p>User</p>
    <p>Kernel</p>
    <p>SMARTER Server</p>
    <p>Gaios RSM</p>
    <p>Log</p>
    <p>Stream Store</p>
    <p>Server Machine</p>
  </div>
  <div class="page">
    <p>Getting Efficiency</p>
    <p>Mostly just lots of good engineering</p>
    <p>Novel read-only operation protocol that allows consistent reads from any node</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background: Replicated State Machines and Paxos</p>
    <p>SMARTER and Gaios</p>
    <p>A new protocol for read-only operations</p>
    <p>Performance evaluation and comparison to primary-backup replication</p>
  </div>
  <div class="page">
    <p>Read Consistency Property</p>
    <p>Not-Before Constraint: When a read-only request R completes, it reflects any data known by any client to be written at the time R was sent.</p>
  </div>
  <div class="page">
    <p>Read-Only Operations</p>
    <p>Read-only operations only need to run in one place</p>
    <p>Using all disks is crucial</p>
    <p>Dynamically selecting location helps</p>
    <p>Avoid nodes that are writing</p>
  </div>
  <div class="page">
    <p>Read/Write Contention</p>
    <p>Disk Queue</p>
    <p>Write 10</p>
    <p>Write 42</p>
    <p>Write 66</p>
    <p>Write 97</p>
    <p>Read 600</p>
    <p>Stream Store Page Cleaner</p>
    <p>Stream Store Reader</p>
    <p>Dirty Page Pool</p>
    <p>Randomize Checkpoint timing across nodes</p>
  </div>
  <div class="page">
    <p>Client</p>
    <p>Leader</p>
    <p>Member</p>
    <p>Member</p>
    <p>Read Request Leadership Check Leadership Reply Read Complete Client Reply</p>
  </div>
  <div class="page">
    <p>Time (ms)</p>
    <p>Client Send</p>
    <p>Leader Check</p>
    <p>Execute</p>
    <p>Reply</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background: Replicated State Machines and Paxos</p>
    <p>SMARTER and Gaios</p>
    <p>A new protocol for read-only operations</p>
    <p>Performance evaluation and comparison to primary-backup replication</p>
  </div>
  <div class="page">
    <p>Primary-Backup Replication</p>
    <p>(Usually) Sends both read and write replies from the primary in order to achieve the read consistency property</p>
    <p>Uses leasing protocol for primary</p>
    <p>No need for a quorum check on reads</p>
    <p>Relies on clock sync for correctness, which in practice means it trades failover time for correctness</p>
  </div>
  <div class="page">
    <p>Read Distribution</p>
    <p>Primary-Backup forces reads to one node, while SMARTER spreads them across all, which can matter for random reads</p>
    <p>P-B can achieve spreading by striping data across many groups and locating the primaries on different nodes; this spreading is static</p>
    <p>Implemented two versions of P-B:</p>
    <p>Worst-case PB1 where all reads come from one node</p>
    <p>Best-case PBN which uses round-robin reads</p>
  </div>
  <div class="page">
    <p>I</p>
    <p>O</p>
    <p>/</p>
    <p>s</p>
    <p>Replicas</p>
    <p>Gaios</p>
    <p>PBN</p>
    <p>PB1</p>
    <p>Local</p>
  </div>
  <div class="page">
    <p>Transaction Processing</p>
    <p>Ran industry standard OLTP load over Microsoft SQL Server 2008.</p>
    <p>Critical factors: SQL log write latency, random read bandwidth.</p>
    <p>Even read/write ratio, mostly ~8K.</p>
  </div>
  <div class="page">
    <p>OLTP Performance (3 nodes, 50% read workload)</p>
    <p>Gaios PBN PB1</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d T</p>
    <p>ra n</p>
    <p>sa ct</p>
    <p>io n</p>
    <p>s/ s</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Paxos RSMs are fine for high-performance disk-based applications, it just takes careful engineering.</p>
    <p>In some cases, they outperform best-case P-B due to flexibility in directing reads.</p>
    <p>There is no need to compromise on semantics, buy special hardware, depend on clocks, etc.</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Photo of Gaios, Paxos, Greece</p>
    <p>Submit to FAST</p>
  </div>
</Presentation>
