<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Attacking Cryptographic</p>
    <p>Schemes Based on Perturbation Polynomials</p>
    <p>Martin Albrecht (Royal Holloway), Craig Gentry (IBM), Shai Halevi (IBM),</p>
    <p>Jonathan Katz (Univ. of MD)</p>
  </div>
  <div class="page">
    <p>The moral  Implementing secure protocols in MANETs/</p>
    <p>sensor-networks can be challenging  Low bandwidth, memory, computational power  Limited battery life</p>
    <p>Much work designing new and highly efficient protocols tailored to this setting</p>
    <p>Sometimes, rigorous security analysis sacrificed for better efficiency  Replaced with heuristic analysis</p>
    <p>This is a bad idea!</p>
  </div>
  <div class="page">
    <p>Outline of the talk  Key predistribution  An optimal, information-theoretic scheme  A modified scheme by Zhang et al.  Attacking the modified scheme  Extensions and conclusions</p>
  </div>
  <div class="page">
    <p>Key predistribution  Goal: distribute keying material to N nodes,</p>
    <p>so each pair can compute a shared key  Off-line key-predistribution  On-line computation of shared keys</p>
    <p>Two trivial solutions:  One key shared by all nodes</p>
    <p>Compromise of one node compromises entire network  Independent key shared by each pair of nodes</p>
    <p>O(N) storage per node</p>
    <p>A not-so-trivial solution [Sakai et al. 2000]:  Identity-based key agreement</p>
    <p>O(1) storage, full resilience  But expensive computation (pairing)</p>
  </div>
  <div class="page">
    <p>Optimal storage/resilience tradeof  [Blom 84], [Blundo et al. 98]  These schemes guarantee the following:</p>
    <p>Any pair of nodes shares a key  A key shared by uncompromised nodes is</p>
    <p>information-theoretically secret  As long as t or fewer nodes are compromised</p>
    <p>Storage O(t) per node  This is optimal for schemes satisfying the above</p>
    <p>Computation is cheap  No public key operations</p>
  </div>
  <div class="page">
    <p>The scheme of Blundo et al.  Choose a random symmetric polynomial</p>
    <p>F(x,y) of degree t in each variable  F(x,y)= F(y,x)</p>
    <p>Node i given coefficients of (univariate) polynomial si(y) = F(i,y)</p>
    <p>Key shared by i and j is si(j) = F(i,j) = sj(i)</p>
    <p>After compromising t+1 nodes, attacker can recover F(x,y) by interpolation</p>
  </div>
  <div class="page">
    <p>Better than Blundo?  If t large, even O(t) storage is expensive  Can we do better?</p>
    <p>E.g., by giving up info-theoretic security  Without paying in expensive operations?</p>
  </div>
  <div class="page">
    <p>Perturbation polynomial  [Zhang et al., MobiHoc 07]</p>
    <p>Other variations by Zhang et al. (INFOCOM 08), Subramanian et al. (PerCom 07)</p>
    <p>Basic idea:  Give node i a polynomial si(y) that is close, but</p>
    <p>not equal, to F(i,y)  Nodes i and j generate a shared key using the</p>
    <p>high-order bits of si(j), sj(i), respectively  Harder(?) for an adversary to recover F(x,y),</p>
    <p>even after compromising many nodes</p>
  </div>
  <div class="page">
    <p>The scheme of Zhang et al.  p a prime, r &lt; p a noise parameter  Choose random symmetric F(x,y) as before  Choose random degree-t univariate g(y), h(y)</p>
    <p>Find is such that both g(i) and h(i) are small SMALL = {i : 0  g(i), h(i)  r} (mod p)</p>
    <p>For i  SMALL, choose random b  {0,1}  Node is given name i and coefficients of</p>
    <p>si(y) = F(i,y) + g(y) if b = 0 si(y) = F(i,y) + h(y) if b = 1</p>
    <p>|si(j)  sj(i)|  r for any i, j  SMALL  Nodes i, j agree on a shared key using high-order bits</p>
  </div>
  <div class="page">
    <p>Suggested parameters  p232, r222, t=76  Number of bits in key = log(p/r) = 10</p>
    <p>Run scheme many times for more key bits  Storage per node: (t+1) log p  2460 bits  Storage per key bit  246 bits  Blundo scheme with this much storage is</p>
    <p>resilient to  246 corruptions  Zhang et al. claim resistance against</p>
    <p>arbitrarily many corruptions</p>
  </div>
  <div class="page">
    <p>Warm-up attack using list decoding  Compromise n=4t+1 nodes</p>
    <p>Learn coefficients of s1(y),, sn(y)</p>
    <p>For any victim j*, set yi = si(j*)  Note: yi  {f0(i), f1(i)}</p>
    <p>f0(y) = F(y,j*)+g(j*), f1(y) = F(y,j*)+h(j*)</p>
    <p>For some b, more than half the yis = fb(i)  Use list decoding to recover this fb(y)</p>
    <p>Algorithm of [Ar et al. 1998]</p>
    <p>Compute shared key between j* and any i*  sj*(i*)  fb(i*)</p>
  </div>
  <div class="page">
    <p>The real attack  Breaks generalized version of scheme</p>
    <p>with more noise:  si(y) = F(i,y) + i g(y) + i h(y)  Small i, i  [-u, u]</p>
    <p>Only needs to corrupt t+3 nodes  Takes time O(t3 + t u3)</p>
    <p>Note: u cannot be too large, to share even a 1bit key we need 4ur &lt; p</p>
    <p>Attack is faster than key setup</p>
  </div>
  <div class="page">
    <p>Implementation  Attack implemented on a desktop PC</p>
    <p>p r t setup time attack time</p>
    <p>It takes a long time to compute the set SMALL = {i : 0  g(i), h(i)  r}</p>
  </div>
  <div class="page">
    <p>Overview of the real attack  The noise space is spanned by g(), h()</p>
    <p>Two dimensional space, can be identified after corrupting (t+1)+2 = t+3 nodes</p>
    <p>For i  SMALL, g(i), h(i) are small  Use lattice-reduction to find g(), h()  Low-dimensional noise-space</p>
    <p>only need to reduce lattices of low dimension  Dimension &lt; 20 for the suggested parameters</p>
    <p>Once g(), h() are found, easy to recover the master polynomial F(x,y)</p>
    <p>The info-theoretic protection</p>
    <p>Noise dimensio</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Step 1: identify the noise space  Corrupt n=t+3 nodes, get</p>
    <p>si = fi + i g + i h  We know</p>
    <p>ft+1 = i=0t i fi and ft+2 = i=0t i fi  So: v = st+1 - i=0t i si  span(g, h)</p>
    <p>v= st+2 - i=0t i si  span(g, h)</p>
    <p>v,v likely to be linearly independent  Likely to be a basis for span(g, h)!</p>
  </div>
  <div class="page">
    <p>Step 2: find g and h  We have v, v s.t. span(v,v) = span(g,h)  Find g, h using the fact that g(id), h(id) are</p>
    <p>small modulo p  To do this, find short vectors in the lattice:</p>
    <p>v(x1) v(x2)  v(xk)</p>
    <p>v(x1) v(x2)  v(xk)</p>
    <p>p 0  0</p>
    <p>k can be small (k &lt; 20)</p>
  </div>
  <div class="page">
    <p>Step 3: find F  F is symmetric, so for all i, j</p>
    <p>si(j) ig(j) ih(j) = sj(i) jg(i) jh(i)  Gives O(n2) equations in 2n unknowns (i, i)  But under-determined!</p>
    <p>Exactly 3 degrees of freedom</p>
    <p>Exhaustive search for three of the i, i in [-u, u]  Total time O(t3 + t u3)  Or use lattices to do it even faster..</p>
  </div>
  <div class="page">
    <p>Other Perturbation Polynomial Schemes  Authentication scheme by Zhang et al.</p>
    <p>from INFOCOM 2008  Access-control scheme by Subramanian et</p>
    <p>al. from PerCom 2007  The same type of attacks apply there too</p>
    <p>Attacks are actually easier</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>The perturbation polynomials approach is dead</p>
    <p>Moral: rigorous security analysis is crucial</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
