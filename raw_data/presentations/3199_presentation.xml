<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Faster Private Set Intersection based on OT Extension</p>
    <p>Michael Zohner (TU Darmstadt)</p>
    <p>Joint work with Benny Pinkas (Bar Ilan University) Thomas Schneider (TU Darmstadt)</p>
  </div>
  <div class="page">
    <p>Private Set Intersection (PSI)</p>
    <p>? ?</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Common contacts</p>
    <p>Botnet detection</p>
    <p>Secure database join</p>
    <p>Cheater detection in online games</p>
    <p>Testing human genomes Relationship path discovery</p>
  </div>
  <div class="page">
    <p>A nave PSI protocol</p>
    <p>- Pro: fast, little communication</p>
    <p>- Con: can leak privacy of Bob's inputs</p>
    <p>Input: y1, , yn</p>
    <p>H(y1), , H(yn)</p>
    <p>Input: x1, , xn</p>
    <p>H(x1), , H(xn)</p>
    <p>?</p>
    <p>H(y1), , H(yn)</p>
    <p>H(xi) = H(yj), for 0 &lt; i , j &lt; n</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>- Survey major results on semi-honest PSI</p>
    <p>- Optimize existing PSI protocols</p>
    <p>- Present a new PSI scheme</p>
    <p>- Compare performance of all schemes</p>
  </div>
  <div class="page">
    <p>Existing PSI Protocols</p>
    <p>- Public-key Cryptography  DH-based Protocol [M86], O(n) pk-crypto  Blind RSA Protocol [CT10], O(n) pk-crypto</p>
    <p>- Generic Secure Computation  Based on Yao's garbled circuits, GMW  Circuit in [HEK12], O(n log n) sym-crypto</p>
    <p>- Oblivious Transfer  Only sym-crypto via OT extension [IKNP03]  Bloom-filter [DCW13], O(n) sym-crypto</p>
    <p>b</p>
  </div>
  <div class="page">
    <p>Oblivious Transfer (OT)</p>
    <p>OT (s0, s1)</p>
    <p>sc</p>
    <p>c</p>
    <p>- Input: Bob holds two strings (s0, s1), Alice holds a choice bit c</p>
    <p>- Output: Alice receives sc but learns nothing about s1-c , Bob learns nothing about c</p>
  </div>
  <div class="page">
    <p>Optimizing Existing Protocols</p>
    <p>- Improve circuit-based PSI of [HEK12] using GMW  Multiplexer complexity independent of bit-length  Reduce computation / communication by factor 2  Also applicable to other functionalities</p>
    <p>- Randomize Garbled Bloom filter of [DCW13]  Reduce computation by factor 3  Reduce communication by factor 4  Whole protocol can be parallelized</p>
  </div>
  <div class="page">
    <p>PSI based on OT</p>
    <p>x y</p>
    <p>x Y</p>
    <p>X Y</p>
    <p>Private Equality Test:</p>
    <p>Private Set Inclusion:</p>
    <p>Private Set Intersection:</p>
  </div>
  <div class="page">
    <p>PSI based on OT (Equality Test)</p>
    <p>- Input: Alice has x, Bob has y. Output: x = y</p>
    <p>- Example: x = 001, y = 011</p>
    <p>- Bob sends -bit mask   to Alice</p>
    <p>OT ( , )0</p>
    <p>. . . . .</p>
    <p>. . . . .</p>
    <p>?</p>
    <p>x y</p>
    <p>(-bit each)</p>
  </div>
  <div class="page">
    <p>PSI based on OT (Set Inclusion)</p>
    <p>- Input: Alice has x, Bob has Y = {y1, , yn}. Output: x  Y</p>
    <p>- Run n Private Equality Tests in parallel  Alice's OT choices for all y1, , yn are the same  Send n bits from Bob to Alice</p>
    <p>?</p>
    <p>- - - - - - OT</p>
    <p>. . . . .</p>
    <p>. . . . .</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>- - - - -</p>
    <p>x Y</p>
  </div>
  <div class="page">
    <p>PSI based on OT (Set Intersection)</p>
    <p>- Input: Alice has X = {x1, , xn}, Bob has Y = {y1, , yn}. Output: X  Y.</p>
    <p>- Run n Private Set Inclusions in parallel  Requires n2 comparisons, hence not an option</p>
    <p>X Y</p>
  </div>
  <div class="page">
    <p>Hashing</p>
    <p>- Hash elements to bins to reduce comparisons</p>
    <p>- Example: Alice holds X={x1,  , x4}, Bob holds Y={y1,  , y4}</p>
    <p>H(x1), H(x3)</p>
    <p>H(x2)</p>
    <p>H(x4)</p>
    <p>- Reduces comparisons from n2 to O(n log n)</p>
  </div>
  <div class="page">
    <p>Comparison Results</p>
    <p>- PSI on n = 218 elements of 32-bit length for 128-bit security on Gbit LAN</p>
    <p>DH-FFC'86</p>
    <p>Blind-RSA'10</p>
    <p>DH-ECC'86</p>
    <p>GMW'12 Yao'12</p>
    <p>Opt.GMW</p>
    <p>Nave</p>
    <p>GBF'13</p>
    <p>Opt.GBF</p>
    <p>OT+Hash</p>
    <p>C o</p>
    <p>m m</p>
    <p>u n</p>
    <p>ic a ti</p>
    <p>o n</p>
    <p>( M</p>
    <p>B y te</p>
    <p>s )</p>
  </div>
  <div class="page">
    <p>Comparison Results</p>
    <p>- PSI on n = 218 elements of 32-bit length for 128-bit security on Gbit LAN</p>
    <p>DH-FFC'86</p>
    <p>Blind-RSA'10</p>
    <p>DH-ECC'86</p>
    <p>GMW'12 Yao'12</p>
    <p>Opt.GMW</p>
    <p>Nave</p>
    <p>GBF'13</p>
    <p>Opt.GBF</p>
    <p>OT+Hash</p>
    <p>PK-Based: - high run-time for large security parameters + best communication</p>
    <p>C o</p>
    <p>m m</p>
    <p>u n</p>
    <p>ic a ti</p>
    <p>o n</p>
    <p>( M</p>
    <p>B y te</p>
    <p>s )</p>
  </div>
  <div class="page">
    <p>Comparison Results</p>
    <p>- PSI on n = 218 elements of 32-bit length for 128-bit security on Gbit LAN</p>
    <p>DH-FFC'86</p>
    <p>Blind-RSA'10</p>
    <p>DH-ECC'86</p>
    <p>GMW'12 Yao'12</p>
    <p>Opt.GMW</p>
    <p>Nave</p>
    <p>GBF'13</p>
    <p>Opt.GBF</p>
    <p>OT+Hash</p>
    <p>Circuit-Based: - high run-time &amp; communication + easily extensible to arbitrary functions</p>
    <p>C o</p>
    <p>m m</p>
    <p>u n</p>
    <p>ic a ti</p>
    <p>o n</p>
    <p>( M</p>
    <p>B y te</p>
    <p>s )</p>
  </div>
  <div class="page">
    <p>Comparison Results</p>
    <p>- PSI on n = 218 elements of 32-bit length for 128-bit security on Gbit LAN</p>
    <p>DH-FFC'86</p>
    <p>Blind-RSA'10</p>
    <p>DH-ECC'86</p>
    <p>GMW'12 Yao'12</p>
    <p>Opt.GMW</p>
    <p>Nave</p>
    <p>GBF'13</p>
    <p>Opt.GBF</p>
    <p>OT+Hash</p>
    <p>OT-Based: + good communication and run-time1 10 100 1,000</p>
    <p>Run-time (s)</p>
    <p>C o</p>
    <p>m m</p>
    <p>u n</p>
    <p>ic a ti</p>
    <p>o n</p>
    <p>( M</p>
    <p>B y te</p>
    <p>s )</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Rule of Thumb:</p>
    <p>- OT-based protocols in general case</p>
    <p>- DH-based ECC if communication is bottleneck</p>
    <p>- Circuit-based protocols for easy extension</p>
    <p>Goal: PSI on million element sets in less than 1 second</p>
  </div>
  <div class="page">
    <p>Faster Private Set Intersection based on OT Extension</p>
    <p>Thank you for your attention</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>- [M86] C. Meadows: A more efficient cryptographic matchmaking protocol for use in the absence of a continuously available third party. In IEEE S&amp;P 86.</p>
    <p>- [CT10] E. De Cristofaro and G. Tsudik: Practical private set intersection protocols with linear complexity. In FC'10.</p>
    <p>- [HEK12] Y. Huang, D. Evans, and J. Katz: Private set-intersection: Are garbled circuits better than custom protocols? In NDSS'12.</p>
    <p>- [DCW13] C. Dong, L. Chen, and Z. Wen: When private set intersection meets big data: An efficient and scalable protocol. In ACM CCS'13.</p>
    <p>- [IKNP03] Y. Ishai, J. Kilian, K. Nissim, E. Petrank: Extending Oblivious Transfers Efficiently. In CRYPTO'03.</p>
  </div>
  <div class="page">
    <p>Protocol Overview</p>
    <p>Special Purpose Protocols Generic Protocols</p>
    <p>Arithmetic Circuit Boolean Circuit</p>
    <p>Homomorphic Encryption</p>
    <p>Symmetric CryptoPublic Key Crypto</p>
    <p>GMWYao</p>
    <p>OT</p>
    <p>One-Time Pad&gt;&gt; &gt;&gt;</p>
  </div>
  <div class="page">
    <p>Faster Private Set Intersection based on OT Extension</p>
    <p>Applications</p>
    <p>- Secure Database Join</p>
    <p>- Common Contacts</p>
    <p>- Relationship Path Discovery</p>
    <p>Techniques</p>
    <p>- Public-key Cryptography</p>
    <p>- Generic Secure Computation</p>
    <p>- Oblivious Transfer</p>
    <p>Summary</p>
    <p>- Optimize &amp; Implement</p>
    <p>- New Protocol</p>
    <p>- Comparison</p>
    <p>Private Set Intersection</p>
    <p>? ?</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Protocol Communication Computation</p>
    <p>Naive Hashing 8 1</p>
    <p>DH FFC 192 1224</p>
    <p>DH ECC 26 416</p>
    <p>Blind RSA 132 1982</p>
    <p>Circuit + GMW 23400 1304</p>
    <p>Circuit + Opt GMW 14040 762</p>
    <p>Yao 20736 609</p>
    <p>Garbled Bloom 1393 154</p>
    <p>Opt. GBF 740 68</p>
    <p>OT + hashing 78 14</p>
  </div>
</Presentation>
