<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>www.zurich.ibm.com</p>
    <p>FAST 2008 27 February 2008</p>
    <p>Improving Efficiency and Enhancing Concurrency of Untrusted Storage</p>
    <p>Christian Cachin &lt;cca@zurich.ibm.com&gt; Idit Keidar &lt;idish@ee.technion.ac.il&gt; Alexander Shraer &lt;shralex@tx.technion.ac.il&gt;</p>
  </div>
  <div class="page">
    <p>Where is my data?</p>
  </div>
  <div class="page">
    <p>Untrusted Storage Service</p>
    <p>Client</p>
    <p>Client</p>
    <p>Client</p>
    <p>Many independent clients</p>
    <p>Correct</p>
    <p>Store data on server</p>
    <p>Communicate only with server</p>
    <p>Small trusted memory</p>
    <p>Storage server</p>
    <p>Untrusted</p>
    <p>Potentially corrupted</p>
    <p>Clients read and write concurrently</p>
    <p>How to ensure consistent view of data to all clients?</p>
  </div>
  <div class="page">
    <p>Consistent Access to Untrusted Storage</p>
    <p>Loose synchronization and concurrency pose a new problem</p>
    <p>Suppose clients sign data with digital signatures: Server cannot forge any values ...</p>
    <p>But answer with outdated value (replay attack)</p>
    <p>Or send different values to different clients</p>
    <p>Server may present different views to clients</p>
    <p>Fork their views of history</p>
    <p>Clients cannot prevent this</p>
    <p>Fork linearizability [MS02], provided by SUNDR [LKMS04]</p>
    <p>If server forks the views of two clients once, then</p>
    <p>their views are forked ever after  they never again see any updates of each other</p>
    <p>Forks are easier to detect than subtle data modifications</p>
    <p>Using a separate channel for detection</p>
  </div>
  <div class="page">
    <p>Fork-linearizability</p>
    <p>Wy Rx</p>
    <p>Rx Wu Rx Rx</p>
    <p>Wx</p>
    <p>WyWx WyWx</p>
    <p>Rx WuWyWx Rx Wu WvWyWxRy</p>
    <p>C2</p>
    <p>C3C1</p>
    <p>After C1 writes u,</p>
    <p>C2 reads x:</p>
    <p>C2 forked from C1C3</p>
    <p>After C1 reads y:</p>
    <p>C1 forked from C3</p>
    <p>C1 read(1)  x</p>
    <p>write(1,x) read(3)  ywrite(1,u)</p>
    <p>read(1)  x C2</p>
    <p>C3 write(3,y) write(3,v)</p>
  </div>
  <div class="page">
    <p>New Results</p>
    <p>More efficient fork-linearizable communication protocol [CSS07]</p>
    <p>Messages of size O(n) instead of O(n2) with n clients</p>
    <p>Fork-linearizable protocols are not wait-free [CSS07]</p>
    <p>Reader must wait for writer even if server correct</p>
    <p>New notion: weak fork-linearizability [CKS08]</p>
    <p>New wait-free protocol, where clients need not wait for each other and messages of size O(n) only</p>
    <p>More impossibility results [CKS08]</p>
    <p>Fork-sequential consistency does not enable wait-free protocols</p>
    <p>Fork-* consistency does not enable wait-free protocols</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>[CSS07] C. Cachin, A. Shelat, and A. Shraer. Efficient forklinearizable access to untrusted shared memory. In Proc. 26th ACM Symp. Principles of Distributed Computing (PODC), 2007.</p>
    <p>[CKS08] C. Cachin, I. Keidar, and A. Shraer. Wait-free untrusted storage. Manuscript, Feb. 2008.</p>
    <p>[LKMS04] J. Li, M. Krohn, D. Mazires, and D. Shasha. Secure untrusted data repository (SUNDR). In Proc. Symp. Operating Systems Design and Implementation (OSDI), 2004.</p>
    <p>[MS02] D. Mazires and D. Shasha. Building secure file systems out of Byzantine storage. In Proc. 21st ACM Symp. Principles of Distributed Computing (PODC), 2002.</p>
  </div>
</Presentation>
