<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ClickNF: a Modular Stack for Custom Network Functions Massimo Gallo, Rafael Laufer</p>
  </div>
  <div class="page">
    <p>Firewall</p>
    <p>TLS/SSL Server</p>
    <p>Proxy Server</p>
    <p>L7 Load Balancer</p>
    <p>Introduction Network Function evolution</p>
  </div>
  <div class="page">
    <p>Firewall</p>
    <p>TLS/SSL Server</p>
    <p>Proxy Server</p>
    <p>L7 Load Balancer</p>
    <p>Introduction Network Function evolution</p>
    <p>Can we build a fully modular and customizable stack (L2-L7) for</p>
    <p>NF deployment without sacrificing performance?</p>
  </div>
  <div class="page">
    <p>Firewall</p>
    <p>TLS/SSL Server</p>
    <p>Proxy Server</p>
    <p>L7 Load Balancer</p>
    <p>Introduction Network Function evolution</p>
    <p>Can we build a fully modular and customizable stack (L2-L7) for</p>
    <p>NF deployment without sacrificing performance?</p>
  </div>
  <div class="page">
    <p>Click Router</p>
    <p>Elements that initiate packet flow have a task scheduled periodically</p>
    <p>FromDevice and ToDevice call push and pull within their tasks</p>
    <p>Overview</p>
  </div>
  <div class="page">
    <p>Click Router Features &amp; Limitations</p>
    <p>MODULARITY PROGRAMMABILITY</p>
    <p>MULTITHREADING KERNEL/USER SPACE NO BLOCKING I/O</p>
    <p>NO TRANSPORT NO NETWORK</p>
    <p>ACCELERATION</p>
    <p>NO APPLICATION (MODULARITY)</p>
  </div>
  <div class="page">
    <p>ClickNF Design</p>
    <p>Monolithic Network stacks :</p>
    <p>Lack of flexibility</p>
    <p>Hard to customize and debug</p>
    <p>ClickNF, decompose it into several simple elements:</p>
    <p>Unfettered acces to the network stack</p>
    <p>Module reuse</p>
    <p>Easier cross-layer optimization</p>
  </div>
  <div class="page">
    <p>10/40 GbE cards</p>
    <p>Polling to fetch packets</p>
    <p>Wrap into Click packet and push</p>
    <p>Hardware flow control</p>
    <p>IP checksum offloading</p>
    <p>TCP checksum offloading</p>
    <p>DPDK MODULE HARDWARE</p>
    <p>OFFLOADING</p>
    <p>ClickNF 1. High-Speed Packet I/O</p>
    <p>MULTICORE</p>
    <p>Receive Side Scaling</p>
    <p>Dedicated per-core data structure</p>
  </div>
  <div class="page">
    <p>Full compliance with standards</p>
    <p>Support for:</p>
    <p>TCP options</p>
    <p>Congestion control</p>
    <p>RTT estimation</p>
    <p>Composed of 60+ elements</p>
    <p>Elements modify TCP Control Block stored in TCPInfo</p>
    <p>Packet annotations and flags</p>
    <p>ClickNF 2. Click TCP</p>
  </div>
  <div class="page">
    <p>ClickNF 3. Blocking I/O</p>
    <p>yield</p>
    <p>click_recv</p>
    <p>Regular vs Blocking tasksT</p>
    <p>im e</p>
    <p>push</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>push</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>wake_up</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>push</p>
    <p>Click natively supports nonblocking I/O</p>
    <p>Complex logic for applications</p>
    <p>Blocking I/O</p>
    <p>Simpler, equivalent performance</p>
    <p>Blocking for socket I/O multiplexing</p>
    <p>ClickNF introduces blocking tasks</p>
    <p>If I/O request cannot be completed, task yields CPU</p>
    <p>Task resumes  illusion of continuity</p>
    <p>Backwards compatible</p>
  </div>
  <div class="page">
    <p>ClickNF 4. Application modularity</p>
    <p>ClickNF provides 4 building blocks:</p>
    <p>TCPEpollServer</p>
    <p>TCPEpollClient</p>
    <p>SSLServer</p>
    <p>SSLClient</p>
    <p>Application layer elements use packet annotations to control lower layers</p>
    <p>Simplify NF programming and code reuse</p>
  </div>
  <div class="page">
    <p>ClickNF 4. Application modularity</p>
    <p>ClickNF provides 4 building blocks:</p>
    <p>TCPEpollServer</p>
    <p>TCPEpollClient</p>
    <p>SSLServer</p>
    <p>SSLClient</p>
    <p>Application layer elements use packet annotations to control lower layers</p>
    <p>Simplify NF programming and code reuse</p>
  </div>
  <div class="page">
    <p>ClickNF Experimental results</p>
    <p>Hardware:</p>
    <p>3 machines Intel Xeon 40-core E5-2660 v3 2.60GHz, 64 GB RAM</p>
    <p>Intel Xeon 82599ES NICs with two10 GbE interfaces</p>
    <p>Software:</p>
    <p>Ubuntu 16.10 (GNU/Linux 4.4.0-51-generic x86 64)</p>
    <p>Click 2.1</p>
    <p>DPDK 17.02, DPDK Traffic generator</p>
    <p>Tests:</p>
    <p>Microbenchmarks ( Packet I/O, modularity , HW offloading, Performance )</p>
    <p>Applications (HTTP Cache/Server, SOCKS4 proxy )</p>
  </div>
  <div class="page">
    <p>I/O &amp; Modularity</p>
    <p>No I/O (TX) RX (FWD)</p>
    <p>64bytes packet, increasing # elements</p>
    <p>Modularity has a cost!</p>
    <p>Mitigated by batch processing</p>
    <p>ClickNF Microbenchmarks</p>
  </div>
  <div class="page">
    <p>Small TCP connection (64bytes packet). Echo request &lt;-&gt; Echo reply</p>
    <p>Slightly better than state of the art user-space stack</p>
    <p>Performance</p>
    <p>ClickNF Performance</p>
  </div>
  <div class="page">
    <p>SOCKS4 Proxy server, increasing page size</p>
    <p>High performance</p>
    <p>Composable i.e., add remove SSL/TLS</p>
    <p>Simple modules i.e., 100s LoC</p>
    <p>ClickNF Application</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Compose custom, modular NF (end-host or in-network)</p>
    <p>Good scaling properties</p>
    <p>Flexibility</p>
    <p>Open source https://github.com/nokia/ClickNF</p>
    <p>ClickNF Conclusion</p>
  </div>
  <div class="page"/>
</Presentation>
