<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Atomix: A Framework for Deploying</p>
    <p>Signal Processing Applica:ons on Wireless Infrastructure</p>
    <p>Manu Bansal, Aaron Schulman, Sachin KaA</p>
    <p>Stanford University</p>
    <p>NSDI 15</p>
  </div>
  <div class="page">
    <p>SoIware-defined base-sta:ons</p>
    <p>int main() { //PHY &amp; MAC  }</p>
    <p>Wireless infrastructure is programmable</p>
    <p>TI 6670 mul:core DSP SoC</p>
    <p>DSP0 DSP1</p>
    <p>Shared SRAM</p>
    <p>Local SRAM</p>
    <p>Local SRAM</p>
  </div>
  <div class="page">
    <p>We could be deploying apps into infrastructure</p>
    <p>RF localiza:on (SecureArray)</p>
    <p>Video-op:mized wireless stack</p>
    <p>(APEX)</p>
    <p>BER feedback (SoIRate)</p>
    <p>What modifica:ons are needed to deploy apps?</p>
  </div>
  <div class="page">
    <p>Primi:ves needed for deploying apps</p>
    <p>Base-sta:on soIware needs to provide a modular interface to tap, tweak, and insert</p>
    <p>CSI</p>
    <p>EQ VITDEC</p>
    <p>Tap</p>
    <p>OFDM SLICER</p>
    <p>(BER)</p>
    <p>Insert</p>
    <p>SYNC</p>
    <p>Tweak</p>
  </div>
  <div class="page">
    <p>Apps require high throughput and low latency</p>
    <p>Time 250us 16us</p>
    <p>Data frame ACK frame</p>
    <p>20Msps == 640Mbps</p>
    <p>High processing throughput</p>
    <p>Low processing latency</p>
    <p>WiFi stack example (LTE has easier latency constraints)</p>
  </div>
  <div class="page">
    <p>GeAng hardware-like performance</p>
    <p>DSP0 DSP1</p>
    <p>Shared SRAM</p>
    <p>Local SRAM</p>
    <p>Local SRAM</p>
    <p>Pipeline programming Memory management Inter-core data transfers</p>
    <p>Customized hardware</p>
    <p>Hand-op:mized soIware</p>
  </div>
  <div class="page">
    <p>GeAng hardware-like performance</p>
    <p>DSP0 DSP1</p>
    <p>Shared SRAM</p>
    <p>Local SRAM</p>
    <p>Local SRAM</p>
    <p>Pipeline programming Memory management Inter-core data transfers</p>
    <p>Customized hardware</p>
    <p>Hand-op:mized soIware</p>
  </div>
  <div class="page">
    <p>GeAng hardware-like performance</p>
    <p>DSP0 DSP1</p>
    <p>Shared SRAM</p>
    <p>Local SRAM</p>
    <p>Local SRAM</p>
    <p>Pipeline programming Memory management Inter-core data transfers</p>
    <p>Modular changes can have unpredictable effects on :ming</p>
    <p>Customized hardware</p>
    <p>Hand-op:mized soIware</p>
  </div>
  <div class="page">
    <p>The Atom Abstrac:on</p>
    <p>Atom A</p>
    <p>tA (e.g. 200 cycles)</p>
    <p>Atom: A unit of execu:on with fixed, known :ming</p>
    <p>Atom A Atom B</p>
    <p>tA + tB</p>
    <p>Composability: Composi:on of atoms is also an atom</p>
    <p>Base-sta:on soIware in Atomix 1) Can be built en:rely out of atoms</p>
  </div>
  <div class="page">
    <p>Base-sta:on soIware can be built with atoms Atomix WiFi chain can meet throughput and latency Apps are easily added to Atomix WiFi</p>
  </div>
  <div class="page">
    <p>WiFi signal processing chain</p>
    <p>Time</p>
    <p>Data frame Data frame</p>
    <p>CSI EQ</p>
    <p>OFDM SLICER SYNC</p>
    <p>Data flowgraph over signal processing blocks</p>
    <p>(BPSK or QPSK)</p>
    <p>(BPSK) (QPSK)</p>
  </div>
  <div class="page">
    <p>Implemen:ng blocks as atoms</p>
    <p>Slicer QPSK</p>
    <p>BPSK Constella:on? BPSK: 200cy QPSK: 400cy</p>
    <p>Input data length? 1 OFDM symbol: 200cy 2 OFDM symbols: 400cy</p>
    <p>N? M?</p>
    <p>tBPSK48 = 200cy</p>
    <p>QPSK48</p>
    <p>BPSK48</p>
    <p>CSI EQ</p>
    <p>OFDM SLICER SYNC</p>
    <p>(BPSK or QPSK)</p>
  </div>
  <div class="page">
    <p>Implemen:ng flowgraphs as atoms</p>
    <p>CSI EQ</p>
    <p>OFDM SLICER SYNC</p>
    <p>CSI EQ</p>
    <p>OFDM BPSK48 SYNC</p>
    <p>CSI EQ</p>
    <p>OFDM QPSK48 SYNC</p>
    <p>(BPSK or QPSK)</p>
  </div>
  <div class="page">
    <p>Implemen:ng flowgraphs as atoms</p>
    <p>Explicitly model data access cost using FIFO atoms 14</p>
    <p>BPSK Atom</p>
    <p>CSI EQ</p>
    <p>OFDM BPSK48 SYNC</p>
    <p>CSI</p>
    <p>EQ</p>
    <p>OFDM</p>
    <p>BPSK SYNC</p>
    <p>F F</p>
    <p>F F</p>
    <p>F F</p>
    <p>F F F F F</p>
  </div>
  <div class="page">
    <p>BPSK F F</p>
    <p>Parallelizing flowgraphs with atoms</p>
    <p>BPSK Atom CSI EQ</p>
    <p>OFDM</p>
    <p>F F</p>
    <p>F F</p>
    <p>F F</p>
    <p>F SYNC F F</p>
    <p>Core 0</p>
    <p>Core 1</p>
  </div>
  <div class="page">
    <p>BPSK F F</p>
    <p>Parallelizing flowgraphs with atoms</p>
    <p>EQUALIZER Atom  Core 0</p>
    <p>BPSK48 F F</p>
    <p>BPSK Atom  Core 1</p>
    <p>Transfer F F</p>
    <p>CSI</p>
    <p>EQ</p>
    <p>OFDM</p>
    <p>F F</p>
    <p>F F</p>
    <p>F F</p>
    <p>F SYNC F F</p>
    <p>Core 0</p>
    <p>Core 1</p>
    <p>Explicitly model data transfer cost as an atom</p>
  </div>
  <div class="page">
    <p>Implemen:ng decisions with atoms</p>
    <p>DISPATCHER Header atom</p>
    <p>BPSK atom</p>
    <p>QPSK atom</p>
    <p>BPSK</p>
    <p>QPSK</p>
  </div>
  <div class="page">
    <p>Atomix framework in 1-slide</p>
    <p>Everything as an atom  Signal processing components  Hardware management components</p>
    <p>Atoms for blocks, flowgraphs, states  Simple control flow makes atoms composable  Declara:ve language allows easy modifica:on</p>
  </div>
  <div class="page">
    <p>Base-sta:on soIware can be built with atoms Atomix WiFi chain can meet throughput and latency Apps are easily added to Atomix WiFi</p>
  </div>
  <div class="page">
    <p>Fine-grained pipeline parallelism</p>
    <p>CSI</p>
    <p>EQ</p>
    <p>OFDM</p>
    <p>QAM64</p>
    <p>SYNC</p>
    <p>DEINTER- LEAVER</p>
    <p>DEPUNC- TURER</p>
    <p>DECODE- SCATTERER</p>
    <p>VITERBI- ISSUE</p>
    <p>DECODE- GATHERER</p>
    <p>DESCRA- MBLER</p>
    <p>CRC32</p>
    <p>DSP0</p>
    <p>DSP1</p>
    <p>DSP2</p>
    <p>DSP3</p>
    <p>VCP0</p>
    <p>VITERBI- DECODING</p>
    <p>VITERBI- DECODING</p>
    <p>VITERBI- DECODING</p>
    <p>VITERBI- DECODING</p>
    <p>VCP1 VCP2 VCP3</p>
    <p>Decoded bits  010110</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Packet Energy</p>
    <p>CRC Toggle</p>
  </div>
  <div class="page">
    <p>Fine-grained pipeline parallelism</p>
  </div>
  <div class="page">
    <p>Tight packet decode latency</p>
    <p>WiFi highest-MCS 1000-byte packets, CDF of decode latency (deadline = 64us at 5MHz, 32us at 10MHz, 16us at 20MHz)</p>
    <p>Atomix WiFi decodes 10MHz in low latency, predictable :ming</p>
  </div>
  <div class="page">
    <p>Experience with WiFi in Atomix</p>
    <p>Low-level code (C)</p>
    <p>Signal processing func:ons (C)</p>
    <p>Parallelized Atoms (Ax)</p>
    <p>Schedule, Resource Assignment</p>
    <p>Atomix compiler</p>
    <p>Atomix run:me libraries</p>
    <p>Na:ve app binary</p>
    <p>Na:ve compiler</p>
  </div>
  <div class="page">
    <p>Base-sta:on soIware can be built with atoms Atomix WiFi chain can meet throughput and latency Apps are easily added to Atomix WiFi</p>
  </div>
  <div class="page">
    <p>Loca:on-signature app</p>
    <p>No change in WiFi packet decode latency 27</p>
    <p>CSI EQ</p>
    <p>OFDM</p>
    <p>SLICER</p>
    <p>PH</p>
    <p>SYNC</p>
    <p>Rxx EIG SPT</p>
    <p>Predictable change in SYNC atom</p>
    <p>Predictable change in SYNC, DATA</p>
    <p>CSI EQ</p>
    <p>EVM</p>
    <p>OFDM</p>
    <p>SLICER</p>
    <p>CIR</p>
    <p>SYNC</p>
    <p>ED</p>
    <p>CNR</p>
  </div>
  <div class="page">
    <p>Related work  Modular frameworks for GPPs and FPGAs  SORA: works on GPPs, no clear mapping to DSPs  AirBlue: Targets FPGAs, different challenges than DSPs  Ziria: complementary to Atomix</p>
    <p>Embedded real-:me opera:ng systems (Neutrino, VxWorks, TI SYS/BIOS)  Typically for low sample rate apps (e.g., an:-locking brakes)</p>
    <p>Misfits for expressing modular signal-processing apps  No abstrac:ons for blocks, flowgraphs, state-machine</p>
  </div>
  <div class="page">
    <p>Conclusion Atomix: a new programming framework  Everything is an atom  Hardware-like performance  Modularity to tap, tweak, insert Future work:  Automated resource scheduling  Sta:c program checking  Extending to L2-L7 NFV packet processing</p>
  </div>
</Presentation>
