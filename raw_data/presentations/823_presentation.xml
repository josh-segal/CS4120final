<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Scalable Server for 3D Metaverses</p>
    <p>Ewen Cheslack-Postava, Tahir Azim, Behram F.T. Mistree, Daniel Reiter Horn, Jeff Terrace, Philip Levis, and Michael J. Freedman</p>
    <p>sirikata.com</p>
  </div>
  <div class="page">
    <p>Metaverses</p>
    <p>Metaverses are shared 3D spaces with the unique feature that everything is editable and and scriptable by users...</p>
  </div>
  <div class="page">
    <p>Metaverses</p>
    <p>you can just select objects, like this car here [transition], change their appearance, and open scripting windows [transition] to control their behavior -- real-time, live, in the system, and other users participating will see it.</p>
  </div>
  <div class="page">
    <p>Metaverses</p>
    <p>you can just select objects, like this car here [transition], change their appearance, and open scripting windows [transition] to control their behavior -- real-time, live, in the system, and other users participating will see it.</p>
  </div>
  <div class="page">
    <p>Metaverses</p>
    <p>you can just select objects, like this car here [transition], change their appearance, and open scripting windows [transition] to control their behavior -- real-time, live, in the system, and other users participating will see it.</p>
  </div>
  <div class="page">
    <p>Metaverses</p>
    <p>Games</p>
    <p>Augmented reality</p>
    <p>Historical recreations</p>
    <p>Collaborative visualization</p>
    <p>... what will users create?</p>
    <p>Applications:</p>
    <p>This very flexible environment leads to a wide variety of interesting applications -- games, augmented reality, historical recreations and collaborative visualization to name a few. But more importantly, they open the ability to create applications to users, leading to all sorts of unexpected and novel applications. These systems really lower the bar to creating interactive, multiuser 3D applications so you dont need to be a professional 3D graphics developer to create them.</p>
  </div>
  <div class="page">
    <p>Metaverses promise such interesting, expansive, immersive worlds...</p>
    <p>(Images by Chris Platz)</p>
  </div>
  <div class="page">
    <p>...filled with all sorts of novel, user-defined experiences.</p>
    <p>(Images by Chris Platz)</p>
  </div>
  <div class="page">
    <p>Unfortunately, metaverses today dont even come close to whats been described in fiction.</p>
    <p>One particular problem with todays worlds, which well look at in detail today, shows up when you first log into Second Life. When you join, stand still for a minute and let everything load, you get something that looks like this. But when you step forward a few meters then suddenly...</p>
  </div>
  <div class="page">
    <p>... a lot of content pops in that wasnt there before. One of the first things we want to do -- join the world and look around for something interesting -- is crippled or impossible in these systems. And similar problems appear throughout the system, beyond just what to display; for example, were also limited in how we can communicate with objects, making long distance communication effectively useless.</p>
  </div>
  <div class="page">
    <p>These are systems problems.</p>
    <p>These are all fundamentally systems problems. The application may be graphical, but these limitations dont exist because we cant render more objects -- the previous scene clearly wouldnt stress my GPU. The problem is that we dont yet understand how to build these systems in a way which scales without sacrificing the user experience.</p>
  </div>
  <div class="page">
    <p>Object Discovery</p>
    <p>So why cant we see more objects in the world? The reason is that this is how we know how to scale these systems. If we only return nearby objects, then when we carve up the world [transition] among servers, then each server only needs state from neighboring servers [transition]. This does allow the system to scale, but leads to an uncompelling experience.</p>
  </div>
  <div class="page">
    <p>Object Discovery</p>
    <p>So why cant we see more objects in the world? The reason is that this is how we know how to scale these systems. If we only return nearby objects, then when we carve up the world [transition] among servers, then each server only needs state from neighboring servers [transition]. This does allow the system to scale, but leads to an uncompelling experience.</p>
  </div>
  <div class="page">
    <p>Object Discovery</p>
    <p>So why cant we see more objects in the world? The reason is that this is how we know how to scale these systems. If we only return nearby objects, then when we carve up the world [transition] among servers, then each server only needs state from neighboring servers [transition]. This does allow the system to scale, but leads to an uncompelling experience.</p>
  </div>
  <div class="page">
    <p>How do we scale up the world without limiting the scope of interaction?</p>
    <p>We face this more general challenge throughout the system: how can we scale the world up without limiting what we can see and what we can interact with? This paper tries to answer that question.</p>
  </div>
  <div class="page">
    <p>Sirikata</p>
    <p>Seamless, scalable, and federated metaverses</p>
    <p>Sirikata is our new platform for seamless, scalable, and federated metaverses that addresses this challenge. Ive shown a few screenshots here from applications built in Sirikata by undergrads in the summer of 2011. The system is still in development, but they were able to quickly build these applications, none of which would have been feasible in other systems due to the constraints on interaction I just described.</p>
  </div>
  <div class="page">
    <p>Insight</p>
    <p>The real world scales.</p>
    <p>Our solutions to these problems are based on a simple insight: the real world scales.</p>
  </div>
  <div class="page">
    <p>Design Principle</p>
    <p>Scale by applying real-world constraints to the system.</p>
    <p>Therefore, throughout our design, when we encounter a scalability challenge, we can look to the real world for guidance. We apply real-world constraints to scale the system. We apply this principle throughout the system, but Im going to focus on just one challenge today: object discovery.</p>
  </div>
  <div class="page">
    <p>Object Discovery</p>
    <p>So how can we remove this restriction other systems had to put in place in order to scale? How do we enable display and interaction with objects throughout the world [transition]?</p>
  </div>
  <div class="page">
    <p>Object Discovery</p>
    <p>So how can we remove this restriction other systems had to put in place in order to scale? How do we enable display and interaction with objects throughout the world [transition]?</p>
  </div>
  <div class="page">
    <p>Solid Angle Queries</p>
    <p>Insight: Limited display resolution</p>
    <p>Solid angle: how large an object appears</p>
    <p>Sirikata exploits the fact that displays ultimately have a limited resolution: the output on your screen will have a limited bandwidth. Therefore, Sirikata uses a different type of query for object discovery called solid angle queries. Solid angle measures exactly what we want: how large an object appears to an observer, or, roughly speaking, the number of pixels the object takes up on screen. For example, this type of query will always return the sun no matter how far away the querier is, but small objects like a tree are only returned if they are very large or close by.</p>
  </div>
  <div class="page">
    <p>Ideal</p>
    <p>To demonstrate the effect of solid angle queries, heres the complete, ideal version of a scene we put together in Sirikata...</p>
  </div>
  <div class="page">
    <p>Distance, 3000 Objects</p>
    <p>and heres what distance query returns, making it appear as if the world just drops off...</p>
  </div>
  <div class="page">
    <p>Solid Angle, 3000 Objects</p>
    <p>And this is what it looks like with solid angle queries, using the same number of objects as the previous slide. Its a big improvement because the distant mountains are now visible. However, were still missing all those trees. Thats because individually they are too small, so the object discovery service doesnt return them. To make sure we dont miss any of these objects, Sirikata also supports returning aggregates, collections of objects which have been combined and simplified.</p>
  </div>
  <div class="page">
    <p>Solid Angle &amp; Aggregates, 3000 Objects</p>
    <p>This allows us to complete the scene. All the trees have been filled in, although at lower quality, by using aggregates instead of individual objects.</p>
  </div>
  <div class="page">
    <p>Ideal</p>
    <p>Flipping between the ideal and the version with aggregates that Sirikata uses, we can see some differences, but they are very close.</p>
  </div>
  <div class="page">
    <p>Object Discovery</p>
    <p>Solid angle queries are global.</p>
    <p>How do we efficiently and scalably evaluate solid angle queries?</p>
    <p>So with the same number of objects we can get much better results. But solid angle queries are global -- an object many servers away, if large enough, could be returned. But we also know there will be a limited output to the query, so our challenge is to build a query data structure and a distributed system upon it which can efficiently narrow the set down to only the necessary objects so the system can scale up.</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>The core of our solution to this is a novel modification of an existing graphics data structure called the bounding volume hierarchy, or BVH. Its called a bounding volume hierarchy because we start with a set of objects, shown geometrically on the left, and create leaf nodes [transition], shown on the right, where each node tracks the 3D bounding sphere that surrounds the object. We then build a hierarchy atop them, where each internal node bounds the objects below it: we add X [transition], whose bounding sphere surrounds A and B, Y [transition] to surround C and D, and then Z [transition] to surround both X and Y. Z is the root and bounds the entire scene.</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>A B C D</p>
    <p>The core of our solution to this is a novel modification of an existing graphics data structure called the bounding volume hierarchy, or BVH. Its called a bounding volume hierarchy because we start with a set of objects, shown geometrically on the left, and create leaf nodes [transition], shown on the right, where each node tracks the 3D bounding sphere that surrounds the object. We then build a hierarchy atop them, where each internal node bounds the objects below it: we add X [transition], whose bounding sphere surrounds A and B, Y [transition] to surround C and D, and then Z [transition] to surround both X and Y. Z is the root and bounds the entire scene.</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>X</p>
    <p>A B C D</p>
    <p>X</p>
    <p>The core of our solution to this is a novel modification of an existing graphics data structure called the bounding volume hierarchy, or BVH. Its called a bounding volume hierarchy because we start with a set of objects, shown geometrically on the left, and create leaf nodes [transition], shown on the right, where each node tracks the 3D bounding sphere that surrounds the object. We then build a hierarchy atop them, where each internal node bounds the objects below it: we add X [transition], whose bounding sphere surrounds A and B, Y [transition] to surround C and D, and then Z [transition] to surround both X and Y. Z is the root and bounds the entire scene.</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>X</p>
    <p>Y</p>
    <p>A B C D</p>
    <p>X Y</p>
    <p>The core of our solution to this is a novel modification of an existing graphics data structure called the bounding volume hierarchy, or BVH. Its called a bounding volume hierarchy because we start with a set of objects, shown geometrically on the left, and create leaf nodes [transition], shown on the right, where each node tracks the 3D bounding sphere that surrounds the object. We then build a hierarchy atop them, where each internal node bounds the objects below it: we add X [transition], whose bounding sphere surrounds A and B, Y [transition] to surround C and D, and then Z [transition] to surround both X and Y. Z is the root and bounds the entire scene.</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>X</p>
    <p>YZ</p>
    <p>A B C D</p>
    <p>X Y</p>
    <p>Z</p>
    <p>The core of our solution to this is a novel modification of an existing graphics data structure called the bounding volume hierarchy, or BVH. Its called a bounding volume hierarchy because we start with a set of objects, shown geometrically on the left, and create leaf nodes [transition], shown on the right, where each node tracks the 3D bounding sphere that surrounds the object. We then build a hierarchy atop them, where each internal node bounds the objects below it: we add X [transition], whose bounding sphere surrounds A and B, Y [transition] to surround C and D, and then Z [transition] to surround both X and Y. Z is the root and bounds the entire scene.</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A</p>
    <p>C</p>
    <p>D</p>
    <p>Y</p>
    <p>A B C D</p>
    <p>X Y</p>
    <p>Z</p>
    <p>Q</p>
    <p>B X</p>
    <p>Z</p>
    <p>But now if we add a querier looking for objects that appear larger than the angle shown, we start at the root and recurse as nodes satisfy the query. Unfortunately, with these large objects, well quickly cover the whole tree, hitting Z easily...</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A</p>
    <p>C</p>
    <p>D</p>
    <p>Y</p>
    <p>A B C D</p>
    <p>X Y</p>
    <p>Z</p>
    <p>Q</p>
    <p>B X</p>
    <p>Z</p>
    <p>then aiming towards X and also recursing for it...</p>
  </div>
  <div class="page">
    <p>Data Structure - BVH</p>
    <p>A</p>
    <p>C</p>
    <p>D</p>
    <p>Y</p>
    <p>A B C D</p>
    <p>X Y</p>
    <p>Z</p>
    <p>Q</p>
    <p>B X</p>
    <p>Z</p>
    <p>and testing A and B, even if they dont satisfy the query. In fact, I only showed one branch, but in this case well actually check the entire tree. This happens because the bounds are very large compared the objects below them -- not a problem for distance queries, but a big problem for solid angle queries, which are heavily influenced by object size.</p>
  </div>
  <div class="page">
    <p>New Data Structure - LBVH</p>
    <p>A</p>
    <p>C</p>
    <p>D</p>
    <p>Y</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>B X</p>
    <p>Z Q</p>
    <p>To make query processing efficient, we augment each node with the largest object in the subtree, creating the largest object bounding volume hierarchy, or LBVH. This is a minor modification, but allows for a much more efficient test. When we test query Q against a node, for example Z, instead of testing the entire bounds, we move the largest object A as close to the querier as possible within the bounds Z [transition] and test that object. This is a much smaller object and therefore less likely to satisfy the query.</p>
  </div>
  <div class="page">
    <p>New Data Structure - LBVH</p>
    <p>A</p>
    <p>C</p>
    <p>D</p>
    <p>Y</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>B X</p>
    <p>Z Q</p>
    <p>A</p>
    <p>To make query processing efficient, we augment each node with the largest object in the subtree, creating the largest object bounding volume hierarchy, or LBVH. This is a minor modification, but allows for a much more efficient test. When we test query Q against a node, for example Z, instead of testing the entire bounds, we move the largest object A as close to the querier as possible within the bounds Z [transition] and test that object. This is a much smaller object and therefore less likely to satisfy the query.</p>
  </div>
  <div class="page">
    <p>LBVH</p>
    <p>Overall, the LBVH reduces the number of nodes tested, and therefore the cost, of evaluating a query by 75-90% over the corresponding BVH. This modification is really what makes it possible to reasonably evaluate solid angle queries.</p>
  </div>
  <div class="page">
    <p>Dynamic Objects</p>
    <p>Moving objects make the LBVH inefficient over time</p>
    <p>A B X</p>
    <p>However, the LBVH alone isnt sufficient. One major problem with the LBVH is that moving objects make it inefficient over time: as objects move apart, maintaining the same tree structure but updating the bounds results in the bounding spheres getting stretched out [transition].</p>
  </div>
  <div class="page">
    <p>Dynamic Objects</p>
    <p>Moving objects make the LBVH inefficient over time</p>
    <p>A B X</p>
    <p>However, the LBVH alone isnt sufficient. One major problem with the LBVH is that moving objects make it inefficient over time: as objects move apart, maintaining the same tree structure but updating the bounds results in the bounding spheres getting stretched out [transition].</p>
  </div>
  <div class="page">
    <p>Dynamic Objects</p>
    <p>We could try to use a complicated approach for updating and reorganizing the tree to keep it efficient, and in fact we investigated that for awhile. But it turns out natural object movement distributions have a nice property: theyre heavily static. This histogram, collected from objects in Second Life, shows that this is true -- note the broken Y-axis. We can exploit this very simply, just separating static objects into their own tree. The dynamic tree is much smaller and can safely become a bit inefficient, while the static tree changes very slowly and covers the vast majority of objects.</p>
  </div>
  <div class="page">
    <p>Dynamic Objects</p>
    <p>Split between static and dynamic objects</p>
    <p>We could try to use a complicated approach for updating and reorganizing the tree to keep it efficient, and in fact we investigated that for awhile. But it turns out natural object movement distributions have a nice property: theyre heavily static. This histogram, collected from objects in Second Life, shows that this is true -- note the broken Y-axis. We can exploit this very simply, just separating static objects into their own tree. The dynamic tree is much smaller and can safely become a bit inefficient, while the static tree changes very slowly and covers the vast majority of objects.</p>
  </div>
  <div class="page">
    <p>Dynamic Objects</p>
    <p>Benefit improves over time</p>
    <p>A simple experiment of just 100 seconds shows a 10 - 15% reduction in cost in evaluating a query compared to a single tree. But the benefit actually improves over time because the bounds get worse over time.</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>We also exploit the fact that queries are standing, meaning that we register it once and then continue to receive updates, such as when an object comes closer to us and becomes relevant. To avoid redundant work when updating queries, we maintain a cut through the tree, indicating where we finished evaluating the query on the last iteration. To update the query, instead of starting at the root, we just walk and update the cut, moving it down or up the tree. For example if the querier moved, we might update this cut by walking horizontally, [transition] finding that node X does now satisfy the query...</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>We also exploit the fact that queries are standing, meaning that we register it once and then continue to receive updates, such as when an object comes closer to us and becomes relevant. To avoid redundant work when updating queries, we maintain a cut through the tree, indicating where we finished evaluating the query on the last iteration. To update the query, instead of starting at the root, we just walk and update the cut, moving it down or up the tree. For example if the querier moved, we might update this cut by walking horizontally, [transition] finding that node X does now satisfy the query...</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>refine the cut by splitting to nodes A and B. We then recursively evaluate them, checking A and adding it to the results...</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>and the same for B...</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>Now we continue, and lets say for this example that C now fails the test -- it no longer appears large enough to the querier. We remove it from the results, but dont change the cut...</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>because we still need to evaluate D, finding it is also no longer part of the results. Now that weve found all children of Y do not satisfy the query, we can move the cut up...</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Cuts avoid redundant work</p>
    <p>and check Y, then finally finish by leaving the end of the cut.</p>
  </div>
  <div class="page">
    <p>Standing Queries</p>
    <p>This example doesnt make it look like a lot of savings, but they can be substantial when you have deeper trees as you avoid retesting all the internal nodes. Exploiting standing queries with cuts improves query evaluation rate by 20% with an LBVH. Aggregates, which Ill talk about next, change the way cuts work a little, resulting in even more improvement, up to 56%.</p>
  </div>
  <div class="page">
    <p>Aggregation</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Finally, we use this data structure to generate aggregates. Recall that aggregates are collections of objects which are used if individual objects are too small. Leaf nodes contain single object meshes [transition]. An internal node represents an aggregate of all leaf nodes below it. We generate an aggregate mesh and simplify it so internal nodes have approximately the same complexity. The node Y [transition] above C and D contains 2, simpler trees and the node Z [transition] contains the entire simplified scene. [transition] We use the cut to decide which aggregates to return [transition]. With aggregates we see the entire scene, but some is lower quality.</p>
  </div>
  <div class="page">
    <p>Aggregation</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Finally, we use this data structure to generate aggregates. Recall that aggregates are collections of objects which are used if individual objects are too small. Leaf nodes contain single object meshes [transition]. An internal node represents an aggregate of all leaf nodes below it. We generate an aggregate mesh and simplify it so internal nodes have approximately the same complexity. The node Y [transition] above C and D contains 2, simpler trees and the node Z [transition] contains the entire simplified scene. [transition] We use the cut to decide which aggregates to return [transition]. With aggregates we see the entire scene, but some is lower quality.</p>
  </div>
  <div class="page">
    <p>Aggregation</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Finally, we use this data structure to generate aggregates. Recall that aggregates are collections of objects which are used if individual objects are too small. Leaf nodes contain single object meshes [transition]. An internal node represents an aggregate of all leaf nodes below it. We generate an aggregate mesh and simplify it so internal nodes have approximately the same complexity. The node Y [transition] above C and D contains 2, simpler trees and the node Z [transition] contains the entire simplified scene. [transition] We use the cut to decide which aggregates to return [transition]. With aggregates we see the entire scene, but some is lower quality.</p>
  </div>
  <div class="page">
    <p>Aggregation</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Finally, we use this data structure to generate aggregates. Recall that aggregates are collections of objects which are used if individual objects are too small. Leaf nodes contain single object meshes [transition]. An internal node represents an aggregate of all leaf nodes below it. We generate an aggregate mesh and simplify it so internal nodes have approximately the same complexity. The node Y [transition] above C and D contains 2, simpler trees and the node Z [transition] contains the entire simplified scene. [transition] We use the cut to decide which aggregates to return [transition]. With aggregates we see the entire scene, but some is lower quality.</p>
  </div>
  <div class="page">
    <p>Aggregation</p>
    <p>A B C D</p>
    <p>X (A) Y (C)</p>
    <p>Z (A)</p>
    <p>Finally, we use this data structure to generate aggregates. Recall that aggregates are collections of objects which are used if individual objects are too small. Leaf nodes contain single object meshes [transition]. An internal node represents an aggregate of all leaf nodes below it. We generate an aggregate mesh and simplify it so internal nodes have approximately the same complexity. The node Y [transition] above C and D contains 2, simpler trees and the node Z [transition] contains the entire simplified scene. [transition] We use the cut to decide which aggregates to return [transition]. With aggregates we see the entire scene, but some is lower quality.</p>
  </div>
  <div class="page">
    <p>Aggregate Queries</p>
    <p>Queries on a server are all similar</p>
    <p>Aggregate queries to reduce interserver querying load</p>
    <p>Filter results further before returning results to querier</p>
    <p>Extending to distributed queries is complicated so Im going to gloss over it a bit -- see the paper for details. At a high level, we keep distributed queries cheap in two ways. First, we recognize that all queries from objects on a server will be similar because all the queriers are near each other. Therefore, instead of having every server answer every query, we aggregate all queries on a server and send a single query to other servers. The origin server then filters results further for individual objects.</p>
  </div>
  <div class="page">
    <p>Server Discovery</p>
  </div>
  <div class="page">
    <p>Server Discovery</p>
    <p>Geometric server discovery</p>
    <p>Determine which other servers need to be queried</p>
    <p>Built on same LBVH data structure</p>
    <p>We call this geometric server discovery. This is a natural extension of the LBVH to servers and has a similar effect: it can reduce the number of servers queried by an order of magnitude.</p>
  </div>
  <div class="page">
    <p>Once we put these all together, we go from this type of image in current systems...</p>
  </div>
  <div class="page">
    <p>....to this final display of a large world with many objects. The view is complete, although at lower quality for some regions. This querying isnt just for display either, it also bootstraps further interaction through messaging. The query format works well for that as well -- youre only able to start communicating with objects you were able to make out visually (or learned about indirectly).</p>
  </div>
  <div class="page">
    <p>Also in the Paper</p>
    <p>Globally consistent distributed data structure mapping regions to servers</p>
    <p>Global routing table enabling all-pairs communication</p>
    <p>Forwarder with intuitive, physicallybased weighting emphasizing local traffic</p>
    <p>The paper addresses other scalability challenges as well. Here Ill just give the flavor of each.</p>
    <p>* First, we need a globally consistent distributed data structure that maps regions of the world to servers, allowing any server in the system to direct objects to the appropriate server for a location. This data structure exploits the fact that at large scales, object distributions move slowly.</p>
  </div>
  <div class="page">
    <p>Also in the Paper</p>
    <p>Globally consistent distributed data structure mapping regions to servers</p>
    <p>Global routing table enabling all-pairs communication</p>
    <p>Forwarder with intuitive, physicallybased weighting emphasizing local traffic</p>
    <p>* To allow all pairs of objects to communicate, ensuring we dont restrict interaction through messaging, we have a global routing table enabling routing to any object in the system. Aggressive caching allows us to scale this to billions of objects.</p>
    <p>* Finally, to get messages to their destination, or drop them under load, the forwarder uses an intuitive, physically-motivated weighting scheme which emphasizes local traffic, giving much nicer behavior than naive uniform weighting or the drastic cutoffs used in other systems.</p>
  </div>
  <div class="page">
    <p>Wiki World</p>
    <p>Automatically find information about objects on Wikipedia</p>
    <p>So what kinds of applications does Sirikata enable with these new features? One example that a student built last summer is called wiki-world and it helps with that first task a user performs when they join a world -- finding something interesting to interact with. For example, when I join the world, as objects load, I might click on a distant building and pull up wiki-world. It collects tags and search terms from the object using messaging, searches wikipedia for relevant articles, and presents them to the user.</p>
  </div>
  <div class="page">
    <p>Wiki World</p>
    <p>Automatically find information about objects on Wikipedia</p>
    <p>This is a very simple application, but the results you get in Sirikata wouldnt have been possible in other systems. For a large class of objects which are very relevant to the user, like the Petronas towers seen here, other systems would not have returned them because they limit visibility to only nearby objects. Other constraints in those systems would limit further interaction, through messaging with this object.</p>
  </div>
  <div class="page">
    <p>But wait, theres more...</p>
    <p>Audio: distant siren, roar of a crowd</p>
    <p>Efficient property updates</p>
    <p>There are many more systems challenges at the intersection of systems, graphics, PL, databases, ...</p>
    <p>A few examples:</p>
    <p>Weve come a long way over the past couple of years, but we still have a lot to do. We hope Sirikata can be the basis for additional research at this interesting intersection of systems, graphics, programming languages, databases, and other areas.</p>
  </div>
  <div class="page">
    <p>But wait, theres more...</p>
    <p>Audio: distant siren, roar of a crowd</p>
    <p>Efficient property updates</p>
    <p>There are many more systems challenges at the intersection of systems, graphics, PL, databases, ...</p>
    <p>A few examples:</p>
    <p>To give a taste for some other challenges weve encountered, here are a few other examples of challenges. How would you add audio support to this large distributed system that can convey both a loud, distant siren and the roar of a crowd, handling thousands of streams, mixing them spatially, and doing so under the latency constraints of real-time audio? Or how can we most efficiently propagate property updates, where we might not care about intermediate values, but the stable state must be reliably provided?</p>
  </div>
  <div class="page">
    <p>But wait, theres more...</p>
    <p>Audio: distant siren, roar of a crowd</p>
    <p>Efficient property updates</p>
    <p>There are many more systems challenges at the intersection of systems, graphics, PL, databases, ...</p>
    <p>A few examples:</p>
    <p>Novel challenges like these arise throughout the system, and we think this community has a lot to offer in this space.</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Download and code at</p>
    <p>sirikata.com</p>
    <p>Questions?</p>
    <p>If youre interested in seeing Sirikata for yourself, we have binaries for download and a couple of test worlds, or videos if you dont want to install the client. We also hope youll check out the code and wed love to see contributions and new extensions. All of this can be found at sirikata.com.</p>
  </div>
</Presentation>
