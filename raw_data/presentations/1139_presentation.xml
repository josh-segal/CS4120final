<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ExtFUSE Extension Framework for File systems in User space</p>
    <p>Ashish Bijlani, Umakishore Ramachandran Georgia Institute of Technology</p>
  </div>
  <div class="page">
    <p>In-Kernel vs User File systems</p>
    <p>Examples  Ext4, OverlayFS, etc.</p>
    <p>Pros  Native performance</p>
    <p>Cons  Poor security/reliability  Not easy to develop/ debug/maintain</p>
    <p>Examples  EncFS, Gluster, etc.</p>
    <p>Pros  Improved security/reliability  Easy to develop/debug/ maintain</p>
    <p>Cons Poor performance! Poor performance!</p>
  </div>
  <div class="page">
    <p>State-of-the-art framework  All file system handlers implemented in user space</p>
    <p>Over 100+ FUSE file systems  Stackable: Android SDCardFS, EncFS, etc.</p>
    <p>Network: GlusterFS, Ceph, Amazon S3FS, etc.</p>
    <p>struct fuse_lowlevel_ops ops { .lookup = handle_lookup, .access = NULL, .getattr = handle_getattr, .setattr = handle_setattr, .open = handle_open, .read = handle_read, .readdir = handle_readdir, .write = handle_write, // more handlers  .getxattr = handle_getxattr, .rename = handle_rename, .symlink = handle_symlink, .flush = NULL,</p>
    <p>}</p>
    <p>File System in User space (FUSE)</p>
  </div>
  <div class="page">
    <p>cd linux-4.18; make tinyconfig; make -j4  Intel i5-3350 quad core, Ubuntu 16.04.4 LTS  Linux 4.11.0, LibFUSE commit # 386b1b</p>
    <p>T im</p>
    <p>e (</p>
    <p>se c)</p>
    <p>Native Opt FUSE</p>
    <p>Opts Enabled -o max_write=128K -o splice_read -o splice_write -o splice_move entry_timeout &gt; attr_timeout &gt; 0</p>
    <p>FUSE Performance</p>
  </div>
  <div class="page">
    <p>VFS</p>
    <p>Application</p>
    <p>Lower FS (e.g., EXT4)</p>
    <p>FUSE Daemon</p>
    <p>FUSE Driver</p>
    <p>User</p>
    <p>Kernel 1</p>
    <p>QUEUE</p>
    <p>L I B F U S E</p>
    <p>open(/mnt/foo/bar)</p>
    <p>lookup(foo)2</p>
    <p>C O N T E X T S W I T C H</p>
    <p>lookup() getattr() setattr() open() read() readdir() write()  rename() symlink() close() getxattr() setxattr()</p>
    <p>FUSE Performance</p>
  </div>
  <div class="page">
    <p>cd linux-4.17; make tinyconfig; make -j4 #</p>
    <p>Re q u e st</p>
    <p>s</p>
    <p>Lookup G</p>
    <p>etattr Renam</p>
    <p>e Setattr C reate</p>
    <p>O pen</p>
    <p>Release G</p>
    <p>etxattr M</p>
    <p>kdir</p>
    <p>U nlink</p>
    <p>O pendir</p>
    <p>Readdir Releasedir Read</p>
    <p>W rite</p>
    <p># Req received by FUSE</p>
  </div>
  <div class="page">
    <p>Extensions written in C  Compiled into BPF code  Code is verified and loaded</p>
    <p>into kernel  Execution under virtual</p>
    <p>machine runtime  Shared BPF maps with user</p>
    <p>space</p>
    <p>BPF C program</p>
    <p>Clang/LLVM</p>
    <p>user</p>
    <p>kernel</p>
    <p>bytecode</p>
    <p>syscall()</p>
    <p>Verifier</p>
    <p>bpf virtual machine</p>
    <p>Kernel functions</p>
    <p>sandbox key-value data struct</p>
    <p>BPF Map</p>
    <p>eBPF Overview</p>
  </div>
  <div class="page">
    <p>VFS</p>
    <p>Application</p>
    <p>Lower FS (e.g., EXT4)</p>
    <p>FUSE Driver</p>
    <p>User</p>
    <p>Kernel 1</p>
    <p>QUEUE</p>
    <p>BPF VM 3</p>
    <p>FUSE Daemon L I B F U S E</p>
    <p>BPF Handlers L I B E x t F U S E</p>
    <p>BPF Map 4</p>
    <p>Load BPF Code Deliver req to</p>
    <p>extension</p>
    <p>Serve from cache</p>
    <p>ExtFUSE Architecture</p>
  </div>
  <div class="page">
    <p>cd linux-4.18; make tinyconfig; make -j4  Intel i5-3350 quad core, SSD, Ubuntu 16.04.4 LTS  Linux 4.11.0, LibFUSE commit # 386b1b</p>
    <p>Ti m</p>
    <p>e (</p>
    <p>se c)</p>
    <p>Native Optimized ExtFUSE</p>
    <p>ExtFUSE Performance</p>
  </div>
  <div class="page">
    <p>cd linux-4.17; make tinyconfig; make -j4 #</p>
    <p>Re q u e st</p>
    <p>s</p>
    <p>Lookup G</p>
    <p>etattr Renam</p>
    <p>e Setattr C reate</p>
    <p>O pen</p>
    <p>Release G</p>
    <p>etxattr M</p>
    <p>kdir U</p>
    <p>nlink O</p>
    <p>pendir Readdir Releasedir Read</p>
    <p>W rite</p>
    <p>Optimized ExtFUSE</p>
    <p>Very few getattr()s</p>
    <p>Very few getxattr()s</p>
    <p># Req received by FUSE</p>
  </div>
  <div class="page">
    <p>BPF code to cache/invalidate meta-data in kernel  Applies potentially to all FUSE file systems  e.g., Gluster readdir ahead results could be cached</p>
    <p>BPF code to perform custom filtering or perm checks  e.g., Android SDCardFS uid checks in lookup(), open()</p>
    <p>BPF code to forward I/O requests to lower FS in kernel  e.g., install/remove target file descriptor in BPF map</p>
    <p>ExtFUSE Applications</p>
  </div>
</Presentation>
