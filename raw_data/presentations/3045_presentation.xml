<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Focus: Querying Large Video Datasets with Low Latency and Low Cost</p>
    <p>Kevin Hsieh Ganesh Ananthanarayanan, Peter Bodik, Shivaram Venkataraman, Paramvir Bahl, Matthai Philipose, Phillip B. Gibbons, Onur Mutlu</p>
  </div>
  <div class="page">
    <p>Video Recordings are Ubiquitous</p>
    <p>Massive video recordings are happening everywhere</p>
  </div>
  <div class="page">
    <p>Key Application: Querying Objects in Videos</p>
    <p>Find all trucks among traffic videos in a city last week  Find all people in garage videos in a company last night  Query execution requires running detector &amp; classifier CNNs  It is slow and costly on massive videos</p>
  </div>
  <div class="page">
    <p>Ingest Time Analysis: Too Costly</p>
    <p>Analyzing live videos at ingest time can make query fast  But it is costly  Potentially wasteful (ingest all garage cameras vs. query one)</p>
    <p>Ingest Query</p>
    <p>Object Class  [Frames]</p>
    <p>$380/month/stream</p>
  </div>
  <div class="page">
    <p>Query Time Analysis: Too Slow</p>
    <p>Query</p>
    <p>Analyzing videos at query time can save cost  Frame down-sampling / skipping  CNN specialization / cascading  But it still very slow (5 hr for a month-long video [1])</p>
    <p>Ingest</p>
  </div>
  <div class="page">
    <p>Our Goal</p>
    <p>Enable low-latency and low-cost querying over large historical video datasets</p>
    <p>CNN, Accuracy target</p>
    <p>Low-Latency and Low-Cost Video Querying System</p>
    <p>Query object class</p>
    <p>FramesFrames</p>
    <p>Frames with trucks</p>
  </div>
  <div class="page">
    <p>Background: Convolutional Neural Networks</p>
    <p>A Convolutional Neural Network (CNN) outputs the probability of each class</p>
    <p>Based on the extracted features (high-level representation)</p>
    <p>Convolutional + Rectification Layer</p>
    <p>Pooling Layer</p>
    <p>. . .</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Fully-Connected Layer Pr(Truck)  Pr(Moving Van) Pr(Bus) Pr(Car) Pr(Person)</p>
    <p>Extracted Features</p>
  </div>
  <div class="page">
    <p>Focus System: Low-latency query with low-cost ingest</p>
    <p>Approximate indexing via cheap ingest  Redundancy elimination for fast query  Trading off ingest cost vs. query latency</p>
  </div>
  <div class="page">
    <p>Approximate indexing via cheap ingest  Redundancy elimination for fast query  Trading off ingest cost vs. query latency</p>
    <p>Focus System: Low-latency query with low-cost ingest</p>
  </div>
  <div class="page">
    <p>Low-Cost Ingestion: Cheaper CNNs</p>
    <p>Process video frames with a cheap CNN at ingest time  Compressed and Specialized CNN: fewer layers / weights</p>
    <p>and are specialized for each video stream</p>
    <p>FramesFramesFrames</p>
    <p>IndexExpensive CNN</p>
  </div>
  <div class="page">
    <p>Low-Cost Ingestion: Cheaper CNNs</p>
    <p>Process video frames with a cheap CNN at ingest time  Compressed and Specialized CNN: fewer layers / weights</p>
    <p>and are specialized for each video stream</p>
    <p>Compressed CNN</p>
    <p>CNN specialization</p>
    <p>FramesFramesFrames</p>
    <p>Index</p>
  </div>
  <div class="page">
    <p>Challenge: Cheap CNNs are Less Accurate</p>
    <p>Cheaper CNNs are less accurate than the expensive CNNs</p>
    <p>The best result from the expensive CNN is within the top-K results of the cheaper CNN</p>
    <p>Rank Expensive CNN Cheap CNN 1 Truck Moving Van 2 Moving Van Airplane 3 Passenger Car Truck</p>
  </div>
  <div class="page">
    <p>Recall, Precision and Top-K Results</p>
    <p>Re ca</p>
    <p>ll</p>
    <p>Number of selected results (K)</p>
    <p>ResNet18 ResNet18 (4 fewer layers) ResNet18 (6 fewer layers) &gt;99% Recall</p>
    <p>Recall: Fraction of relevant objects that are selected Precision: Fraction of selected objects that are relevant Ground-truth CNN: YOLOv2</p>
    <p>Cheaper CNN Lower Recall</p>
  </div>
  <div class="page">
    <p>Solution: Split Ingest- and Query-time Work</p>
    <p>Objects Specialized,</p>
    <p>Compressed CNN</p>
    <p>CNN specialization</p>
    <p>FramesFramesFrames</p>
    <p>Top-K Index</p>
    <p>Ingest-time Query-time</p>
    <p>Expensive CNN</p>
    <p>Frames with trucks</p>
    <p>Querying for trucks</p>
    <p>High Recall High Precision</p>
    <p>Query-time work is done only on queried videos (reduce waste)</p>
    <p>Object Class  [Objects] Object  Frame</p>
  </div>
  <div class="page">
    <p>Approximate indexing via cheap ingest  Redundancy elimination for fast query  Trading off ingest cost vs. query latency</p>
    <p>Focus System: Low-latency query with low-cost ingest</p>
  </div>
  <div class="page">
    <p>Low-Latency Query: Redundancy Elimination</p>
    <p>Approximate indexing  non-trivial work at query time  A larger K  more query-time work</p>
    <p>Images with similar feature vectors are visually similar  Minimize the work at query time  clustering similar objects</p>
    <p>based on the extracted features</p>
  </div>
  <div class="page">
    <p>Adding Feature-based Clustering</p>
    <p>Objects Specialized,</p>
    <p>Compressed CNN</p>
    <p>CNN specialization</p>
    <p>FramesFramesFrames</p>
    <p>Top-K Index</p>
    <p>Ingest-time Query-time</p>
    <p>Expensive CNN</p>
    <p>Frames with trucks</p>
    <p>Querying for trucks</p>
  </div>
  <div class="page">
    <p>Adding Feature-based Clustering</p>
    <p>Objects Specialized,</p>
    <p>Compressed CNN</p>
    <p>CNN specialization</p>
    <p>FramesFramesFrames</p>
    <p>Top-K Index</p>
    <p>Ingest-time Query-time</p>
    <p>Expensive CNN</p>
    <p>Frames with trucksObject</p>
    <p>clusters</p>
    <p>Top-K results</p>
    <p>Centroid objects</p>
    <p>Querying for trucks</p>
    <p>Object Class  [Clusters] Cluster  Centroid, [Objects], [Frames]</p>
    <p>Reduce redundant work at query time</p>
    <p>Features Clusters</p>
  </div>
  <div class="page">
    <p>Approximate indexing via cheap ingest  Redundancy elimination for fast query  Trading off ingest cost vs. query latency</p>
    <p>Focus System: Low-latency query with low-cost ingest</p>
  </div>
  <div class="page">
    <p>Ingest Cost vs. Query Latency</p>
    <p>Q ue</p>
    <p>ry L</p>
    <p>at en</p>
    <p>cy</p>
    <p>Ingest Cost</p>
    <p>Optimize for Ingest Cost</p>
    <p>Balance Optimize for Query Latency</p>
    <p>Parameter selection  trading off ingest cost vs. query latency  The cheap CNN at ingest time  K in the top-K approximate indexing  Clustering threshold for feature-based clustering   / A set of configurations</p>
    <p>Low latency Rarely queried</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Video Datasets  11 live traffic and enterprise videos  Each video stream is evaluated for 12 hours</p>
    <p>Accuracy Targets  99% recall and 99% precision w.r.t. YOLOv2</p>
    <p>Baselines  Ingest-heavy: Analyzes all frames with YOLOv2 at ingest time and</p>
    <p>stores the inverted index for query  NoScope [VLDB17]: A query-optimized system that analyzes frames</p>
    <p>only at query time</p>
  </div>
  <div class="page">
    <p>Average End-to-End Performance</p>
    <p>Q ue</p>
    <p>ry L</p>
    <p>at en</p>
    <p>cy</p>
    <p>Ingest Cost</p>
    <p>Better</p>
    <p>Better</p>
    <p>NoScope (5 hours/month/stream)</p>
    <p>Ingest-heavy ($380/month/stream)</p>
    <p>Focus</p>
    <p>Focus achieves low-latency query with low-cost ingest</p>
    <p>Balanced</p>
    <p>Opt-Ingest</p>
    <p>Opt-Query 0</p>
  </div>
  <div class="page">
    <p>Effect of Different Components</p>
    <p>au bu</p>
    <p>rn _c</p>
    <p>be lle</p>
    <p>vu e_</p>
    <p>d</p>
    <p>be nd</p>
    <p>ja ck</p>
    <p>so n_</p>
    <p>ts</p>
    <p>co ra</p>
    <p>l</p>
    <p>la us</p>
    <p>an ne</p>
    <p>ox fo</p>
    <p>rd</p>
    <p>si tt</p>
    <p>ar d</p>
    <p>A vg</p>
    <p>Fa st</p>
    <p>er th</p>
    <p>an N</p>
    <p>oS co</p>
    <p>pe b</p>
    <p>y (f</p>
    <p>ac to</p>
    <p>r)</p>
    <p>Approximate indexing +Clustering</p>
    <p>Both techniques are important to Focus</p>
  </div>
  <div class="page">
    <p>Demo</p>
  </div>
  <div class="page">
    <p>More in the Paper</p>
    <p>Characterization of real-world videos  Implementation details  Other applications</p>
    <p>Process large and growing data with CNNs, such as audio, bioinformatics, geoinformatics</p>
    <p>More results  Trade-off alternatives  Sensitivity studies</p>
  </div>
  <div class="page">
    <p>Key Takeaways</p>
    <p>Problem: Querying objects in massive videos is challenging  Our Approach: Low-latency query with low-cost ingest</p>
    <p>Key Results  57X (up to 92X) cheaper than ingest-time-only solutions</p>
    <p>162X (up to 607X) faster than state-of-the-art, query-time-only solutions</p>
    <p>Objects</p>
    <p>Specialized,</p>
    <p>Compressed CNN</p>
    <p>CNN</p>
    <p>specialization</p>
    <p>FramesFramesFrames</p>
    <p>Top-K Index</p>
    <p>Ingest-time Query-time</p>
    <p>Querying for</p>
    <p>trucks</p>
    <p>Expensive CNN</p>
    <p>Frames with</p>
    <p>trucksObject</p>
    <p>clusters</p>
    <p>Top-K</p>
    <p>results</p>
    <p>Centroid</p>
    <p>objects</p>
  </div>
  <div class="page">
    <p>Focus: Querying Large Video Datasets with Low Latency and Low Cost</p>
    <p>Kevin Hsieh Ganesh Ananthanarayanan, Peter Bodik, Shivaram Venkataraman, Paramvir Bahl, Matthai Philipose, Phillip B. Gibbons, Onur Mutlu</p>
    <p>Poster #41</p>
  </div>
</Presentation>
