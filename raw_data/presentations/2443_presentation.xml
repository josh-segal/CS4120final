<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Computer Meteorology: Monitoring Compute Clouds</p>
    <p>Lionel Litty, H. Andrs Lagar-Cavilla, David Lie</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Infrastructure as a Service (IaaS)</p>
    <p>Cloud provider infrastructure</p>
    <p>Customer Virtual Machine</p>
    <p>Customer Virtual Machine</p>
    <p>Customer Virtual Machine</p>
    <p>Examples: -Amazon EC2 -GoGrid -Mosso -</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Security</p>
    <p>Miscreants can abuse the cloud providers resources:  Spam.</p>
    <p>Use infrastructure to attack other computers.</p>
    <p>Hosting illegal content.</p>
    <p>This has consequences for the cloud provider:  Damage to reputation.</p>
    <p>Technical consequences: Shared IPs blacklisted.</p>
    <p>Potential legal concerns.</p>
  </div>
  <div class="page">
    <p>Solutions? Network monitoring (NM) has limitations:</p>
    <p>Encrypted traffic</p>
    <p>Stealthy malicious traffic</p>
    <p>Distributed attack using botnet. 5 of 21</p>
  </div>
  <div class="page">
    <p>ISPs use NM and have done poorly.</p>
    <p>Unlike ISPs, cloud providers control the execution platform:</p>
    <p>Can they use this to their advantage?</p>
  </div>
  <div class="page">
    <p>Introspection</p>
    <p>Reductionist approach: understand a complex system by understanding its parts.</p>
    <p>Identify processes.</p>
    <p>Analyze the behavior of each process.</p>
    <p>Virtual Machine</p>
    <p>VMs OS</p>
    <p>Process Process Process</p>
  </div>
  <div class="page">
    <p>Non-malicious and Malicious VMs</p>
    <p>Non-malicious: may be vulnerable, not yet compromised.</p>
    <p>Malicious: under miscreant control.</p>
    <p>Attacker can blur boundaries between processes.</p>
    <p>Tamper-evident monitor:</p>
    <p>Either report accurate information</p>
    <p>Or report that it cannot obtain accurate information.</p>
  </div>
  <div class="page">
    <p>Introspection properties</p>
    <p>Power</p>
    <p>Can it see everything?</p>
    <p>Robustness</p>
    <p>Is it resilient to changes in the monitored system?</p>
    <p>Unintrusiveness</p>
    <p>Can it negatively impact the monitored system?</p>
  </div>
  <div class="page">
    <p>Cloud provider infrastructure</p>
    <p>Host agent</p>
    <p>VMM</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process</p>
    <p>Power</p>
    <p>Robustness</p>
    <p>Unintrusiveness</p>
    <p>Host agent</p>
  </div>
  <div class="page">
    <p>Cloud provider infrastructure</p>
    <p>Host agent w/ driver</p>
    <p>VMM</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process</p>
    <p>Driver</p>
    <p>Power</p>
    <p>Robustness</p>
    <p>Unintrusiveness</p>
    <p>Host agent</p>
  </div>
  <div class="page">
    <p>Cloud provider infrastructure</p>
    <p>Trap &amp; Inspect</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process Process</p>
    <p>Power</p>
    <p>Robustness</p>
    <p>Unintrusiveness</p>
    <p>VMM Introspect</p>
    <p>ion code</p>
    <p>Traps</p>
    <p>Traps</p>
  </div>
  <div class="page">
    <p>Cloud provider infrastructure</p>
    <p>Checkpoint &amp; Rollback</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process Process</p>
    <p>Power</p>
    <p>Robustness</p>
    <p>Unintrusiveness</p>
    <p>VMM Introspect</p>
    <p>ion code</p>
    <p>Traps</p>
    <p>Traps</p>
  </div>
  <div class="page">
    <p>Architectural Introspection</p>
    <p>Cloud provider infrastructure</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process Process</p>
    <p>Power</p>
    <p>Robustness</p>
    <p>Unintrusiveness</p>
    <p>VMM Introspect</p>
    <p>ion code</p>
  </div>
  <div class="page">
    <p>Summary of introspection approaches</p>
    <p>Power Unintrusiveness Robustness</p>
    <p>Host agent Good Poor Good</p>
    <p>Host agent w/ driver</p>
    <p>Best Worst Poor</p>
    <p>Trap &amp; Inspect Best Best Worst</p>
    <p>Checkpoint &amp; Rollback</p>
    <p>Best Best Poor</p>
    <p>Architectural monitoring</p>
    <p>Poor(?) Best Best</p>
  </div>
  <div class="page">
    <p>Introspection example</p>
    <p>Goal:  Which applications are run by a customer VM?  Whats the version of these applications?</p>
    <p>Why?  Detect malicious code  Inform customer of vulnerable code  Deploy vulnerability-specific filters</p>
  </div>
  <div class="page">
    <p>Execution monitoring</p>
    <p>Goal: Identify all running binary code in a VM.</p>
    <p>Examples</p>
    <p>Host agent: /proc, Process Explorer</p>
    <p>Trap &amp; inspect: examine OS data structures</p>
    <p>Architectural monitoring: leverage MMU to identify all executing code</p>
  </div>
  <div class="page">
    <p>Execution monitoring</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process Process</p>
    <p>VMM</p>
    <p>Page fault</p>
  </div>
  <div class="page">
    <p>File monitoring</p>
    <p>Goal: What byte code is Java executing? What about the PHP interpreter?</p>
    <p>Examples:</p>
    <p>Host-based: strace, filemon</p>
    <p>Trap &amp; inspect: examine OS data structures</p>
    <p>Architectural monitoring: taint-tracking?</p>
  </div>
  <div class="page">
    <p>File Monitoring</p>
    <p>Customer VM</p>
    <p>VMs OS</p>
    <p>Process Process Process</p>
    <p>VMM Script</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Architectural introspection should be used when possible.</p>
    <p>More research is needed to explore the range of events that can be monitored using Architectural introspection.</p>
    <p>Cloud providers should be mindful of the limitations of introspection.</p>
  </div>
</Presentation>
