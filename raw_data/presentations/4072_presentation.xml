<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>malWASH: Washing malware to evade dynamic analysis</p>
    <p>Kyriakos Ispoglou (ispo)</p>
    <p>Mathias Payer</p>
    <p>Computer Science Department,</p>
    <p>Purdue University, West Lafayette, IN, USA</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Malware must be stealthy</p>
    <p>Goal: Make existing malware undetectable</p>
    <p>Dynamic/Behavioral analysis is powerful</p>
    <p>Game over for attackers?</p>
  </div>
  <div class="page">
    <p>malWASH Concept</p>
  </div>
  <div class="page">
    <p>malWASH Concept</p>
  </div>
  <div class="page">
    <p>malWASH Concept</p>
    <p>Goal: Thwart behavioral and dynamic analysis</p>
    <p>Approach: Automatically distribute a program across a set of benign processes</p>
    <p>malWASH exploits the constrains of behavioral and dynamic analysis</p>
  </div>
  <div class="page">
    <p>Normal Infection</p>
  </div>
  <div class="page">
    <p>malWASH Infection</p>
  </div>
  <div class="page">
    <p>malWASH Idea</p>
    <p>Divide malware into hundreds of blocks</p>
    <p>Execute blocks in context of different processes</p>
    <p>Execution flow between all these blocks and original program is equal</p>
  </div>
  <div class="page">
    <p>malWASH Design</p>
    <p>Emulator: Execute blocks inside another process</p>
    <p>Loader: Program that injects the emulators</p>
    <p>Distributed design</p>
    <p>Resilience</p>
    <p>Disinfection hardened</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Consist of an offline and an online component</p>
    <p>Offline: Analyze binary and generate source file</p>
    <p>Online: loader + emulator</p>
  </div>
  <div class="page">
    <p>Offline processing</p>
  </div>
  <div class="page">
    <p>Offline processing</p>
    <p>Chop binary into small blocks and assign unique block identifiers (BID)  Granularity ode: BBS, BAST, Paranoid  Policy: At the end of a block execution, ebx contains</p>
    <p>BID of next block</p>
    <p>Redirect control flow transfers to dispatcher  jmp, jcc (near/far jumps)  call, retn, retn XX  loop, loope, loopne  indirect jumps/calls</p>
  </div>
  <div class="page">
    <p>Control-flow translation: Example</p>
    <p>retn</p>
    <p>xchg [esp], ebx</p>
    <p>cmp ebx, $_RET_1</p>
    <p>jz TARGET_1</p>
    <p>cmp ebx, $_RET_2</p>
    <p>jz TARGET_2</p>
    <p>...</p>
    <p>mov ebx, ffffffffh</p>
    <p>jmp END</p>
    <p>TARGET_1:</p>
    <p>mov ebx, $_BID_1</p>
    <p>jmp END</p>
    <p>TARGET_2:</p>
    <p>mov ebx, $_BID_2</p>
    <p>jmp END</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Rewriting challenges</p>
    <p>Relocations are needed for:</p>
    <p>memory accesses</p>
    <p>function calls</p>
    <p>heap requests</p>
    <p>socket descriptors/HANDLES</p>
    <p>threads</p>
    <p>After all, everything is packed in a C++ file</p>
  </div>
  <div class="page">
    <p>Example: Creating a descriptor</p>
    <p>push edx</p>
    <p>call ds:__imp__socket@12</p>
    <p>mov [ebp+sock], eax</p>
    <p>push edx</p>
    <p>nop</p>
    <p>jmp DETOUR_ENTER</p>
    <p>DETOUR_RETURN:</p>
    <p>mov [ebp-sock], eax</p>
    <p>...</p>
    <p>DETOUR_ENTER: ; at the end of the block</p>
    <p>call ds:__imp__socket@12</p>
    <p>call near ptr $_CRT_DUP_SOCK ; arg in eax</p>
    <p>jmp DETOUR_RETURN</p>
  </div>
  <div class="page">
    <p>Example: Using a descriptor</p>
    <p>push ecx</p>
    <p>call ds:__imp__RegSetKeyValue@24</p>
    <p>cmp eax, 0FFFFFFFFh</p>
    <p>push ecx</p>
    <p>nop</p>
    <p>call DETOUR_PROC</p>
    <p>cmp eax, 0FFFFFFFFh</p>
    <p>...</p>
    <p>DETOUR_PROC: ; at the end of the block</p>
    <p>mov eax, [esp + 0x4] ; HKEY hKey</p>
    <p>xchg ebx, [esp + 0xc] ; when &gt;1 descr. are used</p>
    <p>call near ptr $_LOC_DUP_DSC</p>
    <p>mov [esp + 0x4], eax ; replace them</p>
    <p>xchg ebx, [esp + 0xc]</p>
    <p>jmp ds:__imp__RegSetKeyValue@24</p>
  </div>
  <div class="page">
    <p>Online Component</p>
    <p>Loader selects processes, injects emulator</p>
    <p>Emulators start executing program</p>
    <p>Emulators coordinate program execution</p>
  </div>
  <div class="page">
    <p>Online Component</p>
    <p>Process injection involves:</p>
    <p>OpenProcess()</p>
    <p>VirtualAllocEx()</p>
    <p>WriteProcessMemory()</p>
    <p>CreateRemoteThread()</p>
    <p>A noisy operation</p>
  </div>
  <div class="page">
    <p>Online Component</p>
    <p>Mitigate detection by using NT API functions:</p>
    <p>ZwOpenProcess()</p>
    <p>ZwAllocateVirtualMemory()</p>
    <p>ZwWriteVirtualMemory()</p>
    <p>NtCreateThreadEx()</p>
    <p>And/or, recursively use of the malWASH concept to split the loader process</p>
  </div>
  <div class="page">
    <p>Mitigating loader detection</p>
  </div>
  <div class="page">
    <p>Online component: Emulator</p>
    <p>Written in ~5,500 Assembly LoC</p>
    <p>Only 14kB in size</p>
    <p>Emulates memory accesses and function calls</p>
    <p>Coordinate shared execution environment</p>
  </div>
  <div class="page">
    <p>Online component: Emulator</p>
    <p>Emulator has more features:  Process mailboxes</p>
    <p>Duplication Table (duptab)</p>
    <p>FILE* replacements</p>
    <p>Heap manipulation</p>
    <p>Other replacements (e.g. ExitProcess)</p>
    <p>Call Cache</p>
    <p>Scheduler (for multi-threading)</p>
    <p>Recovering killed emulators</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>malWASH evaluated with 8 malware samples</p>
    <p>Each sample was split in all 3 modes</p>
    <p>Google Chrome selected as victim process</p>
    <p>Successful injection in 1, 2, 4, and 8 processes</p>
  </div>
  <div class="page">
    <p>Evaluation: %CPU Usage</p>
  </div>
  <div class="page">
    <p>Evaluation: Resilience</p>
  </div>
  <div class="page">
    <p>Defeating malWASH</p>
    <p>Detecting malWASH programs is hard</p>
    <p>Goal: Detecting malWASH itself</p>
    <p>Identity of original program gets protected</p>
  </div>
  <div class="page">
    <p>Defeating malWASH</p>
    <p>malWASH leaves detectable execution traces  Honey pot processes, shared memory correlation,</p>
    <p>abnormal process overhead, behavioral process discrepancies, loader detection (use of pre-infected processes), emulator detection, ...</p>
    <p>All of them can be mitigated</p>
    <p>malWASH can be used to protect itself!  Distribute the emulator thread among a set of threads</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>malWASH distributes program execution among benign processes</p>
    <p>Detection using dynamic analysis is challenging</p>
    <p>A good detection mechanism must:</p>
    <p>Detect malWASH, and</p>
    <p>Not detect anything else</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>malWASH source code: https://github.com/HexHive/malWASH</p>
    <p>Contact Information:  ispo@purdue.edu  mathias.payer@nebelwelt.net</p>
    <p>Github pages:  https://github.com/ispoleet (ispo)  https://github.com/gannimo (Mathias)</p>
  </div>
</Presentation>
