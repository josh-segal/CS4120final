<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Quantifier Elimination via Functional Composition</p>
    <p>Jie-Hong Roland Jiang</p>
    <p>Dept. of Electrical Eng. / Grad. Inst. of Electronics Eng. National Taiwan University Taipei 10617, Taiwan</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivations</p>
    <p>Prior work</p>
    <p>Quantifier elimination by functional composition  Propositional logic  Predicate logic</p>
    <p>Experimental results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Quantifier elimination transforms a quantified f ormula, e.g., x1x2x3  xn , into an equi valent quantifier-free formula    can be preferable to x1x2x3  xn</p>
    <p>E.g.,  Properties of  can be reasoned more easily   can be treated as a synthesis result for implementation</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>QE examples  Gauss elimination for systems of linear equ</p>
    <p>alities</p>
    <p>Fourier-Motzkin elimination for systems of li near inequalities</p>
    <p>Cylindrical algebraic decomposition for syst ems of polynomial inequalities</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>QE arises in many contexts, including computation theory, mathematical logic, optimization,   Constraint reduction  Quantified Boolean Formula (QBF) solving</p>
  </div>
  <div class="page">
    <p>Main focus</p>
    <p>Propositional logic  Quantifier elimination for QBFs</p>
  </div>
  <div class="page">
    <p>Prior work</p>
    <p>Formula expansion  y (x,y) = (x,0)  (x,1)  BDD, AIG based image-computation [Coudert90][Pigorsch06]</p>
    <p>Normal-form conversion  Existential (universal) quantification is computationally trivial for disjunctive (c</p>
    <p>onjunctive) normal form formulas  Simply remove from the formula the literals of variables to be quantified</p>
    <p>E.g., x1[(x1  x2  x3)(x1  x3)(x2  x4)] = (x2  x3)(x3)(x2  x4)  Formula conversion between CNF and DNF [McMillan02]</p>
    <p>Solution enumeration  Compute (x) = y (x,y) by enumerating all satisfiable assignments on x  SAT-based image computation, e.g., [Ganai04]</p>
    <p>Yet another way?</p>
  </div>
  <div class="page">
    <p>Question</p>
    <p>Given a quantified formula y (x,y), wh at should a function f be such that (x,f (x)) = y (x,y)?</p>
    <p>I.e., QE by functional composition</p>
  </div>
  <div class="page">
    <p>Answer</p>
    <p>(x,f(x)) = y (x,y) if and only if  f has</p>
    <p>care onset (x,1)  (x,0) care offset (x,0)  (x,1) dont care set (x,1)  (x,0)</p>
    <p>In other words, ((x,1)  (x,0))  f  ((x,0)  (x,1))</p>
    <p>Such f always exists</p>
  </div>
  <div class="page">
    <p>Problem formulation</p>
    <p>For universal quantification y (x,y) = y (x,y) = (x,f(x)) = (x,f (x))  f has</p>
    <p>care onset (x,1)  (x,0) care offset (x,0)  (x,1) dont care set (x,1)  (x,0)</p>
    <p>So by computing composite functions f, one ca n iteratively eliminate the quantifiers of any QB F</p>
  </div>
  <div class="page">
    <p>Computation</p>
    <p>f can be computed by  Binary decision diagrams (BDDs)</p>
    <p>Not scalable for large</p>
    <p>Craig interpolation</p>
  </div>
  <div class="page">
    <p>Craig interpolation</p>
    <p>(Propositional logic)</p>
    <p>For A  B unsatisfiable, there exists an interpolant  of A w.r.t. B such that</p>
  </div>
  <div class="page">
    <p>Computation</p>
    <p>A care onset</p>
    <p>B care offset</p>
    <p>interpolant</p>
    <p>The interpolant is a valid implementation of f, which can be o btained from the refutation of A  B in SAT solving and can b e naturally represented in And-Inverter Graphs (AIGs)</p>
    <p>care onset (x,1)  (x,0) care offset (x,0)  (x,1) dont care set (x,1)  (x,0)</p>
  </div>
  <div class="page">
    <p>Composition vs. expansion</p>
    <p>Is (x,f(x)) better than (x,0)  (x,1) ?</p>
    <p>f</p>
    <p>x x</p>
    <p>in terms of AIGs, where structurally identical nodes are merged</p>
  </div>
  <div class="page">
    <p>Composition vs. expansion</p>
    <p>[] Consider simplifying (x,1) in (x,0)  (x,1) using  (x,0) as dont care care onset (x,1)  (x,0) care offset (x,1)  (x,0)</p>
    <p>In contrast to f with care onset (x,1)  (x,0) care offset (x,0)  (x,1)</p>
    <p>For existential quantification, composition can be muc h better than expansion for sparse  (due to simple int erpolants)</p>
  </div>
  <div class="page">
    <p>Composition vs. expansion</p>
    <p>[] Consider simplifying (x,1) in (x,0)  (x,1) using (x,0) as dont care care onset (x,1)  (x,0) care offset (x,1)  (x,0)</p>
    <p>In contrast to f with care onset (x,1)  (x,0) care offset (x,0)  (x,1)</p>
    <p>For universal quantification, composition can be much better than expansion for dense  (due to simple interp olants)</p>
  </div>
  <div class="page">
    <p>Generalization to predicate logic</p>
    <p>For a language L in predicate logic under struc ture (interpretation) I,</p>
    <p>|=I x(y (x,y) = F (x,Fx))</p>
    <p>QE is possible if such function F is finitely expressib le in the language</p>
    <p>If y (x,y) = (x,fx), then (a,b)y (a,y) is satisfied for any a, b with f(a)=b</p>
    <p>If for any a, b with f(a)=b satisfies (a,b)y (a,y), then</p>
    <p>y (x,y) =  (i  (x,fix)), where f = fi if i holds  {(a,b) | (a,b)y (a,y)} characterizes the flexibility of f, w</p>
    <p>hich can be exploited to simplify QE</p>
  </div>
  <div class="page">
    <p>Generalization to predicate logic</p>
    <p>Example x(ax2+c=0) over the real number</p>
    <p>f(a,c) = (c/a)1/2 if c/a  0  if c/a &gt; 0</p>
    <p>Taking f(a,c) = (((c/a)2)1/2)1/2, this quantified for mula is equivalent to a((((c/a)2)1/2)1/2)2+c=0</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Given a sequential circuit, we compute it s transition relation with input variables b eing quantified out, i.e.,</p>
    <p>x [i (si'  i(x,s))]</p>
    <p>Simple quantification scheduling applied  AIG minimization applied</p>
  </div>
  <div class="page">
    <p>Experimental results</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Expansion vs. composition based QE  Analogy with two-level vs. multi-level circuit</p>
    <p>minimization  Relaxing level constraints admits more compact</p>
    <p>circuit representation</p>
    <p>Sparsity may play an essential role in th e effectiveness of composition-based QE</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Quantifier elimination with functional com position can be effective at least for som e applications (where the sparsity conditi on holds)</p>
    <p>Future work  Find more applications  QE in predicate logic</p>
  </div>
  <div class="page">
    <p>Thanks for your attention!</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
