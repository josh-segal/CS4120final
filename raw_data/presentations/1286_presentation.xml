<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HashCache: Cache Storage for the Next Billion</p>
    <p>Anirudh Badam</p>
    <p>KyoungSoo Park Vivek S. Pai Larry L. Peterson</p>
    <p>Princeton University</p>
  </div>
  <div class="page">
    <p>Next Billion Internet Users</p>
  </div>
  <div class="page">
    <p>Next Billion Internet Users</p>
    <p>Schools, urban middle class in developing regions</p>
  </div>
  <div class="page">
    <p>Next Billion Internet Users</p>
    <p>Schools, urban middle class in developing regions</p>
    <p>Affordable hardware  OLPC and Intel Classmate</p>
    <p>$200</p>
  </div>
  <div class="page">
    <p>Next Billion Internet Users</p>
    <p>Schools, urban middle class in developing regions</p>
    <p>Affordable hardware  OLPC and Intel Classmate</p>
    <p>Expensive Internet  $1500+ per month per Mbps  Unlikely to improve in the</p>
    <p>near future</p>
    <p>$200</p>
    <p>$1500 per month</p>
  </div>
  <div class="page">
    <p>Bandwidth Saving</p>
  </div>
  <div class="page">
    <p>Bandwidth Saving</p>
    <p>Connectivity is a precious resource</p>
  </div>
  <div class="page">
    <p>Bandwidth Saving</p>
    <p>Connectivity is a precious resource</p>
    <p>Saving bandwidth important  Disk caches reduce network</p>
    <p>bandwidth requirement</p>
    <p>Internet</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Bandwidth Saving</p>
    <p>Connectivity is a precious resource</p>
    <p>Saving bandwidth important  Disk caches reduce network</p>
    <p>bandwidth requirement</p>
    <p>Good news - disk is very cheap</p>
    <p>$100/TB 3</p>
    <p>Internet</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Why Large Caches?</p>
  </div>
  <div class="page">
    <p>Why Large Caches?</p>
    <p>Larger bandwidth savings  Refreshes cheaper than re-fetches  Overnight prefetch, content push from peers</p>
  </div>
  <div class="page">
    <p>Why Large Caches?</p>
    <p>Larger bandwidth savings  Refreshes cheaper than re-fetches  Overnight prefetch, content push from peers</p>
    <p>Good offline behavior  Preload websites  Enables local search</p>
  </div>
  <div class="page">
    <p>Why Large Caches?</p>
    <p>Larger bandwidth savings  Refreshes cheaper than re-fetches  Overnight prefetch, content push from peers</p>
    <p>Good offline behavior  Preload websites  Enables local search</p>
    <p>Save even on dynamic content  WAN Acceleration = packet caching</p>
  </div>
  <div class="page">
    <p>What is the Cost?</p>
  </div>
  <div class="page">
    <p>What is the Cost?</p>
    <p>In-memory data structures  Hash table avoids seeks for misses  Cache replacement (LRU, etc)</p>
  </div>
  <div class="page">
    <p>What is the Cost?</p>
    <p>In-memory data structures  Hash table avoids seeks for misses  Cache replacement (LRU, etc)</p>
    <p>RAM index size per TB  Open Source (Squid) - 10 GB  Commercial (Tiger) - 5 GB</p>
  </div>
  <div class="page">
    <p>What is the Cost?</p>
    <p>In-memory data structures  Hash table avoids seeks for misses  Cache replacement (LRU, etc)</p>
    <p>RAM index size per TB  Open Source (Squid) - 10 GB  Commercial (Tiger) - 5 GB</p>
    <p>Can not use laptops for cache  2 servers, $2K each = 20 laptops</p>
    <p>x 20</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
  </div>
  <div class="page">
    <p>HashCache: storage engine w/ plug-in indexing  6 schemes in paper, 3 shown here  New Web proxy using HashCache engine</p>
    <p>Our Solution</p>
  </div>
  <div class="page">
    <p>HashCache: storage engine w/ plug-in indexing  6 schemes in paper, 3 shown here  New Web proxy using HashCache engine</p>
    <p>Efficiency and Performance:  Range of policies trading speed and memory  20-50x less RAM for Squid-like speed  6-10x less RAM vs Tiger (Commercial)</p>
    <p>Our Solution</p>
  </div>
  <div class="page">
    <p>HashCache: storage engine w/ plug-in indexing  6 schemes in paper, 3 shown here  New Web proxy using HashCache engine</p>
    <p>Efficiency and Performance:  Range of policies trading speed and memory  20-50x less RAM for Squid-like speed  6-10x less RAM vs Tiger (Commercial)</p>
    <p>Can now use cheap laptops vs servers  Even for TB-sized caches</p>
    <p>Our Solution</p>
  </div>
  <div class="page">
    <p>Performance: req/sec/disk</p>
    <p>HashCache</p>
    <p>Current</p>
    <p>Squid TigerG</p>
    <p>ig ab</p>
    <p>yt es</p>
    <p>/D o lla</p>
    <p>r Our Solution</p>
    <p>Be tte</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>ddddhhhhbbbb</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>ddddhhhhbbbb} } }</p>
    <p>Directory Level 1</p>
    <p>Directory Level 2</p>
    <p>Actual File</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>ddddhhhhbbbb} } }</p>
    <p>Directory Level 1</p>
    <p>Directory Level 2</p>
    <p>Actual File</p>
    <p>In-memory Hashtable</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>ddddhhhhbbbb} } }</p>
    <p>Directory Level 1</p>
    <p>Directory Level 2</p>
    <p>Actual File</p>
    <p>In-memory Hashtable</p>
    <p>Squid</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>Filesystem</p>
    <p>Circular Log</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>Filesystem</p>
    <p>Circular Log</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>hash_value offset</p>
    <p>Memory</p>
    <p>hash_value</p>
    <p>Filesystem</p>
    <p>Circular Log</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>URL</p>
    <p>hash_value offset</p>
    <p>Memory</p>
    <p>hash_value</p>
    <p>Filesystem</p>
    <p>Circular Log</p>
    <p>Tiger</p>
  </div>
  <div class="page">
    <p>A Brief History of Cache</p>
    <p>Open Source Implementation - Squid  Multiple seeks for hit, miss and write  Dependent on default filesystems</p>
    <p>Commercial/High Performance - Tiger  One seek for hit  Custom file layout</p>
  </div>
  <div class="page">
    <p>Index Element Sizes</p>
  </div>
  <div class="page">
    <p>Functionality Implementation</p>
    <p>Choice Squid (Bits)</p>
    <p>Tiger (Bits)</p>
    <p>Existence Identification</p>
    <p>Hashtable Chaining Pointers</p>
    <p>Hash 160 32</p>
    <p>Replacement Policy LRU List Pointers 64 64</p>
    <p>Location Information</p>
    <p>Disk Offset, Version Number,</p>
    <p>etc 0 40</p>
    <p>Other Expiration Date, Size, HTTP header info etc</p>
    <p>Total 560 232</p>
    <p>Index Element Sizes</p>
  </div>
  <div class="page">
    <p>Functionality Implementation</p>
    <p>Choice Squid (Bits)</p>
    <p>Tiger (Bits)</p>
    <p>Existence Identification</p>
    <p>Hashtable Chaining Pointers</p>
    <p>Hash 160 32</p>
    <p>Replacement Policy LRU List Pointers 64 64</p>
    <p>Location Information</p>
    <p>Disk Offset, Version Number,</p>
    <p>etc 0 40</p>
    <p>Other Expiration Date, Size, HTTP header info etc</p>
    <p>Total 560 232</p>
    <p>Index Element Sizes</p>
  </div>
  <div class="page">
    <p>Functionality Implementation</p>
    <p>Choice Squid (Bits)</p>
    <p>Tiger (Bits)</p>
    <p>Existence Identification</p>
    <p>Hashtable Chaining Pointers</p>
    <p>Hash 160 32</p>
    <p>Replacement Policy LRU List Pointers 64 64</p>
    <p>Location Information</p>
    <p>Disk Offset, Version Number,</p>
    <p>etc 0 40</p>
    <p>Other Expiration Date, Size, HTTP header info etc</p>
    <p>Total 560 232</p>
    <p>Index Element Sizes</p>
    <p>Focusing mainly on reducing the size of the index</p>
  </div>
  <div class="page">
    <p>Functionality Implementation</p>
    <p>Choice Squid (Bits)</p>
    <p>Tiger (Bits)</p>
    <p>Existence Identification</p>
    <p>Hashtable Chaining Pointers</p>
    <p>Hash 160 32</p>
    <p>Replacement Policy LRU List Pointers 64 64</p>
    <p>Location Information</p>
    <p>Disk Offset, Version Number,</p>
    <p>etc 0 40</p>
    <p>Other Expiration Date, Size, HTTP header info etc</p>
    <p>Total 560 232</p>
    <p>Index Element Sizes</p>
  </div>
  <div class="page">
    <p>Functionality Implementation</p>
    <p>Choice Squid (Bits)</p>
    <p>Tiger (Bits)</p>
    <p>Existence Identification</p>
    <p>Hashtable Chaining Pointers</p>
    <p>Hash 160 32</p>
    <p>Replacement Policy LRU List Pointers 64 64</p>
    <p>Location Information</p>
    <p>Disk Offset, Version Number,</p>
    <p>etc 0 40</p>
    <p>Other Expiration Date, Size, HTTP header info etc</p>
    <p>Total 560 232</p>
    <p>Index Element Sizes</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
  </div>
  <div class="page">
    <p>Cache size limited by</p>
    <p>memory size</p>
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
  </div>
  <div class="page">
    <p>Cache size limited by</p>
    <p>memory size</p>
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>Performance depends on disk seeks</p>
  </div>
  <div class="page">
    <p>Cache size limited by</p>
    <p>memory size</p>
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>Performance depends on disk seeks</p>
    <p>reduce the dependency</p>
  </div>
  <div class="page">
    <p>Cache size limited by</p>
    <p>memory size</p>
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>Performance depends on disk seeks</p>
    <p>reduce the dependency</p>
    <p>optimize for seeks</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>Eliminate(?) in-memory index</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>Eliminate(?) in-memory index</p>
    <p>Need membership and location information</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>Eliminate(?) in-memory index</p>
    <p>Need membership and location information</p>
    <p>Use disk as hash tableIn-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>Eliminate(?) in-memory index</p>
    <p>Need membership and location information</p>
    <p>Use disk as hash table</p>
    <p>On disk data structures for key lookup</p>
    <p>Store the object as values for the keys</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>HashCache Engine</p>
    <p>Application Logic</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>In-memory Index</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>HashCache Engine</p>
    <p>Application Logic</p>
    <p>Reliable Filesystem</p>
    <p>In-memory Index</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>HashCache Engine</p>
    <p>Application Logic</p>
    <p>In-memory Index</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>HashCache Engine</p>
    <p>Application Logic</p>
    <p>In-memory Index</p>
  </div>
  <div class="page">
    <p>Revisiting the Index...</p>
    <p>In-memory Index</p>
    <p>Application Cache</p>
    <p>Manager</p>
    <p>Reliable Filesystem</p>
    <p>HashCache Engine</p>
    <p>Application Logic</p>
    <p>In-memory Index</p>
  </div>
  <div class="page">
    <p>HashCache: Basic Policy</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>HashCache: Basic Policy</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>HashCache: Basic Policy</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>data</p>
    <p>H Bits</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>data</p>
    <p>H Bits</p>
    <p>N contiguous blocks</p>
    <p>Filesystem (Disk Table)</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>% N</p>
    <p>t</p>
    <p>data</p>
    <p>H Bits</p>
    <p>N contiguous blocks</p>
    <p>Filesystem (Disk Table)</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>% N</p>
    <p>t</p>
    <p>data</p>
    <p>t th block</p>
    <p>H Bits</p>
    <p>N contiguous blocks</p>
    <p>Filesystem (Disk Table)</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>Circular Log</p>
    <p>head</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>% N</p>
    <p>t</p>
    <p>data</p>
    <p>t th block</p>
    <p>H Bits</p>
    <p>N contiguous blocks</p>
    <p>Filesystem (Disk Table)</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>Circular Log</p>
    <p>head</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>% N</p>
    <p>t t th block</p>
    <p>H Bits</p>
    <p>N contiguous blocks</p>
    <p>Filesystem (Disk Table)</p>
  </div>
  <div class="page">
    <p>URL</p>
    <p>Circular Log</p>
    <p>head</p>
    <p>HashCache: Basic Policy</p>
    <p>hash_value</p>
    <p>% N</p>
    <p>t t th block</p>
    <p>H Bits</p>
    <p>N contiguous blocks</p>
    <p>Filesystem (Disk Table)</p>
  </div>
  <div class="page">
    <p>Advantages  No index memory needed  Tuned for one seek for most objects</p>
    <p>HashCache: Basic Policy</p>
  </div>
  <div class="page">
    <p>Advantages  No index memory needed  Tuned for one seek for most objects</p>
    <p>Disadvantages  One seek per miss  No collison control  No cache replacement policy</p>
    <p>HashCache: Basic Policy</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
    <p>Chaining</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
    <p>Does not transition well to disk-based</p>
    <p>Multiple seeks per operation</p>
    <p>Walking hash bin list  Global replacement</p>
    <p>policy crosses bins Chaining</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
    <p>Chaining</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
    <p>Fixed locations where each object can be found</p>
    <p>Allocated contiguously, read together</p>
    <p>Set Associativity T-Ways</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
    <p>Fixed locations where each object can be found</p>
    <p>Allocated contiguously, read together</p>
    <p>Seek time dominates short read</p>
    <p>Set Associativity T-Ways</p>
  </div>
  <div class="page">
    <p>Collision Control</p>
    <p>Fixed locations where each object can be found</p>
    <p>Allocated contiguously, read together</p>
    <p>Seek time dominates short read</p>
    <p>Eliminate global cache replacement policiesSet Associativity</p>
    <p>T-Ways</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>In-memory hash table  Too much memory for</p>
    <p>pointers Bin Pointers 32</p>
    <p>Chaining Pointers 64</p>
    <p>Hash 32</p>
    <p>Total (bits) 128</p>
    <p>In-memory Hash Table</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>In-memory hash table  Too much memory for</p>
    <p>pointers</p>
    <p>Disk is already a hash table  Pointers not needed  Large bitmap with the</p>
    <p>same layout as the disk Disk Table</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>In-memory hash table  Too much memory for</p>
    <p>pointers</p>
    <p>Disk is already a hash table  Pointers not needed  Large bitmap with the</p>
    <p>same layout as the disk</p>
    <p>Just store hash per URLDisk TableIn-memoryBitmap</p>
    <p>H Bits Disk Block</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>In-memory hash table  Too much memory for</p>
    <p>pointers</p>
    <p>Disk is already a hash table  Pointers not needed  Large bitmap with the</p>
    <p>same layout as the disk</p>
    <p>Just store hash per URLDisk TableIn-memoryBitmap</p>
    <p>H Bits Disk Block</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>Original hash of the URL: 64 bits</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>Original hash of the URL: 64 bits</p>
    <p>Eliminate bits for (same) bin # (228 objs, 8-way, #bins=225 (S))</p>
  </div>
  <div class="page">
    <p>Reducing Seeks</p>
    <p>Original hash of the URL: 64 bits</p>
    <p>Eliminate bits for (same) bin # (228 objs, 8-way, #bins=225 (S))</p>
    <p>Shrink hash size: Just to eliminate most false positives (8 bits)</p>
  </div>
  <div class="page">
    <p>Cache Replacement</p>
  </div>
  <div class="page">
    <p>Cache Replacement</p>
    <p>Large disks: 10-100+ million objects</p>
    <p>Global caching relevant when disk size working set</p>
    <p>When disk &gt;&gt; working set, local policies global policies</p>
    <p>!</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>Cache Replacement</p>
    <p>Large disks: 10-100+ million objects</p>
    <p>Global caching relevant when disk size working set</p>
    <p>When disk &gt;&gt; working set, local policies global policies</p>
    <p>Local replacement benefits  3 bits per URL  Performed on contiguous objects  False positives limited by set size</p>
    <p>!</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>Memory</p>
    <p>ts t th set</p>
    <p>tth set</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>Memory</p>
    <p>ts t th set</p>
    <p>tth set</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>Memory</p>
    <p>ts t th set</p>
    <p>tth set</p>
  </div>
  <div class="page">
    <p>HashCache: SetMem Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>LRU LRU</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>Memory</p>
    <p>ts t th set</p>
    <p>tth set</p>
  </div>
  <div class="page">
    <p>Advantages  No seeks for most misses  1 seek per read, 1 seek per write  Good hash + replacement in 11 bits</p>
    <p>HashCache: SetMem Policy</p>
  </div>
  <div class="page">
    <p>Advantages  No seeks for most misses  1 seek per read, 1 seek per write  Good hash + replacement in 11 bits</p>
    <p>Disadvantages  Writes still need seeks</p>
    <p>HashCache: SetMem Policy</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Disk Table</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Disk Table</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Restructure on-disk table</p>
    <p>Disk Table</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Restructure on-disk table  Store only hash, rank, offset</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Restructure on-disk table  Store only hash, rank, offset  Move all data to log</p>
    <p>rank</p>
    <p>offset</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Restructure on-disk table  Store only hash, rank, offset  Move all data to log</p>
    <p>Benefits  Group writes amortize seeks  Scheduling related writes</p>
    <p>enables read prefetch</p>
    <p>Both reads &amp; writes &lt; 1 seek 15</p>
    <p>rank</p>
    <p>offset</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Restructure on-disk table  Store only hash, rank, offset  Move all data to log</p>
    <p>Benefits  Group writes amortize seeks  Scheduling related writes</p>
    <p>enables read prefetch</p>
    <p>Both reads &amp; writes &lt; 1 seek 15</p>
  </div>
  <div class="page">
    <p>Further Reducing Seeks</p>
    <p>Storing objects by hash can produce random reads &amp; writes</p>
    <p>Restructure on-disk table  Store only hash, rank, offset  Move all data to log</p>
    <p>Benefits  Group writes amortize seeks  Scheduling related writes</p>
    <p>enables read prefetch</p>
    <p>Both reads &amp; writes &lt; 1 seek 15</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
    <p>URL</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
    <p>URL</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
    <p>Circular Log</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>LRU</p>
    <p>Memory 16</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
    <p>Circular Log</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>LRU</p>
    <p>Memory</p>
    <p>t th set 43 Bits</p>
  </div>
  <div class="page">
    <p>HashCache: Log Policy</p>
    <p>URL</p>
    <p>hash_value</p>
    <p>% S</p>
    <p>t</p>
    <p>data</p>
    <p>Circular Log</p>
    <p>Filesystem</p>
    <p>head</p>
    <p>LRU</p>
    <p>Memory</p>
    <p>t th set 43 Bits</p>
  </div>
  <div class="page">
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
    <p>HashCache Web proxy using storage engine</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
    <p>HashCache Web proxy using storage engine</p>
    <p>Multiple apps on same box, sharing memory</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
    <p>HashCache Web proxy using storage engine</p>
    <p>Multiple apps on same box, sharing memory</p>
    <p>20,000 lines C code for the proxy and 1000 lines for the indexing policies</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
    <p>HashCache Web proxy using storage engine</p>
    <p>Multiple apps on same box, sharing memory</p>
    <p>20,000 lines C code for the proxy and 1000 lines for the indexing policies</p>
    <p>Event Driven implementation with non-blocking I/O</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
    <p>HashCache Web proxy using storage engine</p>
    <p>Multiple apps on same box, sharing memory</p>
    <p>20,000 lines C code for the proxy and 1000 lines for the indexing policies</p>
    <p>Event Driven implementation with non-blocking I/O</p>
    <p>Design similar to that of Flash Web Server. Helpers for I/O and DNS lookups</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>HashCache Storage Engine with plug-in policies</p>
    <p>HashCache Web proxy using storage engine</p>
    <p>Multiple apps on same box, sharing memory</p>
    <p>20,000 lines C code for the proxy and 1000 lines for the indexing policies</p>
    <p>Event Driven implementation with non-blocking I/O</p>
    <p>Design similar to that of Flash Web Server. Helpers for I/O and DNS lookups</p>
    <p>Balances load across multiple disks easily and makes scaling obvious</p>
  </div>
  <div class="page">
    <p>Evaluation - Web Polygraph</p>
    <p>De-facto feature and performance testing tool for web proxies  Compare all variants of HashCache with Squid and Tiger</p>
  </div>
  <div class="page">
    <p>Evaluation - Web Polygraph</p>
    <p>De-facto feature and performance testing tool for web proxies  Compare all variants of HashCache with Squid and Tiger</p>
    <p>Experiment Name</p>
    <p>Setting Configuration Comparision</p>
    <p>Low End Small School using Laptop</p>
    <p>HashCache vs Squid vs Tiger</p>
    <p>High End ISP with High-End</p>
    <p>Server</p>
    <p>HashCache-Log vs Squid vsTiger</p>
    <p>Large Disk Large</p>
    <p>School with Mini-Tower</p>
    <p>HashCache-Log vs HashCache-SetMem</p>
  </div>
  <div class="page">
    <p>Evaluation - Web Polygraph</p>
    <p>De-facto feature and performance testing tool for web proxies  Compare all variants of HashCache with Squid and Tiger</p>
    <p>Experiment Name</p>
    <p>Setting Configuration Comparision</p>
    <p>Low End Small School using Laptop</p>
    <p>HashCache vs Squid vs Tiger</p>
    <p>High End ISP with High-End</p>
    <p>Server</p>
    <p>HashCache-Log vs Squid vsTiger</p>
    <p>Large Disk Large</p>
    <p>School with Mini-Tower</p>
    <p>HashCache-Log vs HashCache-SetMem</p>
  </div>
  <div class="page">
    <p>Evaluation - Web Polygraph</p>
    <p>De-facto feature and performance testing tool for web proxies  Compare all variants of HashCache with Squid and Tiger</p>
    <p>Experiment Name</p>
    <p>Setting Configuration Comparision</p>
    <p>Low End Small School using Laptop</p>
    <p>HashCache vs Squid vs Tiger</p>
    <p>High End ISP with High-End</p>
    <p>Server</p>
    <p>HashCache-Log vs Squid vsTiger</p>
    <p>Large Disk Large</p>
    <p>School with Mini-Tower</p>
    <p>HashCache-Log vs HashCache-SetMem</p>
  </div>
  <div class="page">
    <p>Evaluation - Web Polygraph</p>
    <p>De-facto feature and performance testing tool for web proxies  Compare all variants of HashCache with Squid and Tiger</p>
    <p>Experiment Name</p>
    <p>Setting Configuration Comparision</p>
    <p>Low End Small School using Laptop</p>
    <p>HashCache vs Squid vs Tiger</p>
    <p>High End ISP with High-End</p>
    <p>Server</p>
    <p>HashCache-Log vs Squid vsTiger</p>
    <p>Large Disk Large</p>
    <p>School with Mini-Tower</p>
    <p>HashCache-Log vs HashCache-SetMem</p>
  </div>
  <div class="page">
    <p>HC-Basic Squid HC-SetMem HC-Log Tiger</p>
    <p>H it R</p>
    <p>at e</p>
    <p>Max</p>
    <p>Hit Rate Comparison</p>
  </div>
  <div class="page">
    <p>Low End Configuration</p>
  </div>
  <div class="page">
    <p>Low End Configuration</p>
    <p>Pe rf</p>
    <p>o rm</p>
    <p>an ce</p>
    <p>r eq</p>
    <p>/s ec</p>
    <p>HC-Basic Squid HC-SetMem Tiger HC-Log</p>
  </div>
  <div class="page">
    <p>Low End Configuration</p>
    <p>Open Source and Commercial could index only 18 GB</p>
    <p>HashCache could index 60 GB</p>
    <p>Pe rf</p>
    <p>o rm</p>
    <p>an ce</p>
    <p>r eq</p>
    <p>/s ec</p>
    <p>HC-Basic Squid HC-SetMem Tiger HC-Log</p>
  </div>
  <div class="page">
    <p>Pe rf</p>
    <p>o rm</p>
    <p>an ce</p>
    <p>r eq</p>
    <p>/s ec</p>
    <p>Squid TigerHashCache-Log</p>
    <p>High End Configuration</p>
  </div>
  <div class="page">
    <p>Pe rf</p>
    <p>o rm</p>
    <p>an ce</p>
    <p>r eq</p>
    <p>/s ec</p>
    <p>Squid TigerHashCache-Log</p>
    <p>High End Configuration</p>
  </div>
  <div class="page">
    <p>Index Efficiency</p>
  </div>
  <div class="page">
    <p>Squid</p>
    <p>Tiger</p>
    <p>HC-Log</p>
    <p>HC-SetMem</p>
    <p>Index Efficiency</p>
    <p>Max Disk for 1GB RAM</p>
  </div>
  <div class="page">
    <p>Squid</p>
    <p>Tiger</p>
    <p>HC-Log</p>
    <p>HC-SetMem</p>
    <p>Index Efficiency</p>
    <p>Max Disk for 1GB RAM</p>
  </div>
  <div class="page">
    <p>Large Disk Configuration</p>
    <p>HC-Basic HC-SetMem HC-Log</p>
    <p>Pe rf</p>
    <p>o rm</p>
    <p>an ce</p>
    <p>r eq</p>
    <p>/s ec</p>
  </div>
  <div class="page">
    <p>Large Disk Configuration</p>
    <p>HC-Basic HC-SetMem HC-Log</p>
    <p>Pe rf</p>
    <p>o rm</p>
    <p>an ce</p>
    <p>r eq</p>
    <p>/s ec</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Status</p>
    <p>New Storage Engine &amp; Web Cache  From no RAM per object to tiny no. of bits/obj  6-10x better than Tiger, 20-50x vs Squid  Enables large disk w/ only laptop-class machine  More policies, details in paper</p>
    <p>Suitable for developing-world usage  Current deployments: Ghana, Nigeria  Working w/ school supplier on new deployments</p>
  </div>
  <div class="page">
    <p>Thank You! abadam@cs.princeton.edu</p>
    <p>http://tinyurl.com/hashcache</p>
  </div>
</Presentation>
