<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exploiting Uses of Uninitialized Stack Variables in Linux Kernels</p>
    <p>to Leak Kernel Pointers</p>
    <p>Haehyun Cho, Jinbum Park, Joonwon Kang, Tiffany Bao Ruoyu Wang, Yan Shoshitaishvili, Adam Doup, Gail-Joon Ahn</p>
  </div>
  <div class="page">
    <p>Uninitialized variables in the stack</p>
    <p>void func () { int num; int ret;</p>
    <p>}</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
    <p>SP</p>
  </div>
  <div class="page">
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
    <p>SP</p>
    <p>Uninitialized variables in the stack</p>
    <p>void func () { int num; int ret;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Uninitialized variables in the stack</p>
    <p>void func () { int num = 0; int ret = 0; struct data_struct = {0,};</p>
    <p>}</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
    <p>SP</p>
  </div>
  <div class="page">
    <p>Unexpected information leaks</p>
    <p>void func () { int num = 0; int ret = 0; struct data_struct = {0,};</p>
    <p>}</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
    <p>SP</p>
    <p>If uninitialized data can be copied to the user-space</p>
  </div>
  <div class="page">
    <p>Real-world example (CVE-2016-4486)</p>
    <p>/* file: net/core/rtnetlink.c */ static int rtnl_fill_link_ifmap(struct sk_buff *skb, struct net_device *dev) {</p>
    <p>//all fields in the map object are initialized struct rtnl_link_ifmap map = {</p>
    <p>.mem_start = dev-&gt;mem_start,</p>
    <p>.mem_end = dev-&gt;mem_end,</p>
    <p>.base_addr = dev-&gt;base_addr,</p>
    <p>.irq = dev-&gt;irq,</p>
    <p>.dma = dev-&gt;dma,</p>
    <p>.port = dev-&gt;if_port, };</p>
    <p>//kernel data leak to the user-space if(nla_put(skb, IFLA_MAP, sizeof(map), &amp;map))</p>
    <p>return -EMSGSIZE; return 0;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Real-world example (CVE-2016-4486)</p>
    <p>/* file: net/core/rtnetlink.c */ static int rtnl_fill_link_ifmap(struct sk_buff *skb, struct net_device *dev) {</p>
    <p>//all fields in the map object are initialized struct rtnl_link_ifmap map = {</p>
    <p>.mem_start = dev-&gt;mem_start,</p>
    <p>.mem_end = dev-&gt;mem_end,</p>
    <p>.base_addr = dev-&gt;base_addr,</p>
    <p>.irq = dev-&gt;irq,</p>
    <p>.dma = dev-&gt;dma,</p>
    <p>.port = dev-&gt;if_port, };</p>
    <p>//kernel data leak to the user-space if(nla_put(skb, IFLA_MAP, sizeof(map), &amp;map))</p>
    <p>return -EMSGSIZE; return 0;</p>
    <p>}</p>
    <p>+ 4 padding bytes</p>
  </div>
  <div class="page">
    <p>Basic security principle of the OS kernels</p>
    <p>Applications are not allowed to access the kernel memory</p>
    <p>Restricted Kernel data must not leave the kernel memory</p>
    <p>Kernel</p>
    <p>Applications X X</p>
  </div>
  <div class="page">
    <p>Information leaks are not rare In Linux kernel,  Information leak vulnerabilities are the most prevalent type [1].  Kernel Memory Sanitizer (KMSAN) discovered more than a hundred</p>
    <p>uninitialized data use bugs [2].</p>
    <p>[1] Haogang Chen, Yandong Mao, Xi Wang, Dong Zhou, Nickolai Zeldovich, and M Frans Kaashoek. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Proceedings of the 2nd Asia-Pacific Work- shop on Systems (APSys), Shanghai, China, July 2011. [2] KernelMemorySanitizer, a detector of uses of uninitialized memory in the Linux kernel. https://github.com/google/kmsan. [3] Kangjie Lu, Marie-Therese Walter, David Pfaff, Ste- fan Nmberger, Wenke Lee, and Michael Backes. Un- leashing Use-Before-Initialization Vulnerabilities in the Linux Kernel Using Targeted Stack Spraying. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, FebruaryMarch 2017.</p>
  </div>
  <div class="page">
    <p>Information leaks are not rare In Linux kernel,  Information leak vulnerabilities are the most prevalent type [1].  Kernel Memory Sanitizer (KMSAN) discovered more than a hundred</p>
    <p>uninitialized data use bugs [2].</p>
    <p>However, these vulnerabilities are commonly believed to be of low risks [3].  not assigned any CVE entries and not patched in some cases</p>
    <p>[1] Haogang Chen, Yandong Mao, Xi Wang, Dong Zhou, Nickolai Zeldovich, and M Frans Kaashoek. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Proceedings of the 2nd Asia-Pacific Work- shop on Systems (APSys), Shanghai, China, July 2011. [2] KernelMemorySanitizer, a detector of uses of uninitialized memory in the Linux kernel. https://github.com/google/kmsan. [3] Kangjie Lu, Marie-Therese Walter, David Pfaff, Ste- fan Nmberger, Wenke Lee, and Michael Backes. Un- leashing Use-Before-Initialization Vulnerabilities in the Linux Kernel Using Targeted Stack Spraying. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, FebruaryMarch 2017.</p>
  </div>
  <div class="page">
    <p>Survey result on information leak CVEs</p>
    <p>Total Stack-base Heap-base # of exploits</p>
    <p># of CVEs 87 76 11 0</p>
    <p>The majority of these CVES are stack-based information leaks.  0 public exploit and 0 proof-of-vulnerability (PoV)  Even with a PoV, it is difficult to evaluate the exploitability</p>
    <p>Only once CVE (CVE-2017-1000410) mentions that Potential of leaking kernel pointers and bypassing KASLR</p>
    <p>The number of information leak CVEs related to uses of uninitialized data between 2010 and 2019.</p>
  </div>
  <div class="page">
    <p>Our Goal  Reveal the actual exploitability and severity of information leak bugs</p>
    <p>Converts stack-based information leaks in Linux kernels into vulnerabilities that leak kernel pointer values.  We focus on leaking pointer values that are pointing to</p>
    <p>(1) kernel functions or (2) the kernel stack.</p>
  </div>
  <div class="page">
    <p>Challenges in Exploitation  Computing the offset to uninitialized</p>
    <p>data from the kernel stack base.</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Challenges in Exploitation  Computing the offset to uninitialized</p>
    <p>data from the kernel stack base.</p>
    <p>Storing kernel pointer values at a leak offset.</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Challenges in Exploitation  Computing the offset to uninitialized</p>
    <p>data from the kernel stack base.</p>
    <p>Storing kernel pointer values at a leak offset.</p>
    <p>Handling data leaks that are less than 8 bytes.</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>PoVs Analysis Exploitability and exploits</p>
  </div>
  <div class="page">
    <p>Computing the Leak Offset Stack footprinting 1. Fill the kernel stack</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Computing the Leak Offset Stack footprinting 1. Fill the kernel stack 2. Trigger a vulnerability 3. Check the footprint</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Computing the Leak Offset Stack footprinting 1. Fill the kernel stack 2. Trigger a vulnerability 3. Check the footprint</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Extensive Syscall Testing with the LTP  Linux Test Project (LTP) provides concrete test cases for system calls.</p>
    <p>Three additional steps onto each syscall test case 1. Spraying the kernel stack with a magic value 2. Finding kernel pointer values stored in the stack 3. Recording context information</p>
  </div>
  <div class="page">
    <p>Syscall Testing with the LTP 1. Fill the kernel stack</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
  </div>
  <div class="page">
    <p>Syscall Testing with the LTP 1. Fill the kernel stack 2. Execute a syscall using a testcase 3. Inspect the kernel stack</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
    <p>Kernel pointer to a kernel function</p>
    <p>Kernel pointer to the kernel stack</p>
  </div>
  <div class="page">
    <p>Syscall Testing with the LTP 1. Fill the kernel stack 2. Execute a syscall using a testcase 3. Inspect the kernel stack 4. Record the context information</p>
    <p>Kernel Stack Base</p>
    <p>Base  8n</p>
    <p>Kernel pointer to a kernel function</p>
    <p>Kernel pointer to the kernel stack</p>
    <p>Offset : Base  24 Type : Kernel code Syscall : mmap Args : 0,8,0,0,-1,0</p>
    <p>Offset : Base  64 Type : Kernel stack Syscall : mmap Args : 0,8,0,0,-1,0</p>
  </div>
  <div class="page">
    <p>Stack Spraying via BPF  The extended Berkeley Packet Filter (BPF)</p>
    <p>allows users to make a program and execute it inside the kernel.</p>
    <p>BPF program has its own stack (512 bytes)</p>
    <p>Kernel Stack</p>
    <p>Pointer to the base address of a BPF program</p>
    <p>Spraying the frame pointer by crafting BPF instructions</p>
  </div>
  <div class="page">
    <p>Stack Spraying via BPF  The extended Berkeley Packet Filter (BPF)</p>
    <p>allows users to make a program and execute it inside the kernel.</p>
    <p>BPF program has its own stack (512 bytes)</p>
    <p>If we leak the frame pointer, we can identify the layout of kernel stack</p>
    <p>Kernel Stack</p>
    <p>Pointer to the base address of a BPF program</p>
    <p>Spraying the frame pointer by crafting BPF instructions</p>
  </div>
  <div class="page">
    <p>Need the most important 52 bits (7 bytes) of a kernel stack address  the kernel stack is aligned by the size of a page (i.e., 4KB, by default)</p>
    <p>If we only know 4 bytes  ?  Guess and check!</p>
    <p>Handling Small Data Leaks</p>
  </div>
  <div class="page">
    <p>Handling Small Data Leaks  Need the most important 52 bits (7 bytes) of a kernel stack address  the kernel stack is aligned by the size of a page (i.e., 4KB, by default)</p>
    <p>If we only know 4 bytes  ?  Guess and check!  e.g.,</p>
    <p>spraying (FP  0x0000 0000 3000 0000)</p>
    <p>Hidden data &lt; 0x 3000 0000</p>
  </div>
  <div class="page">
    <p>Handling Small Data Leaks  Need the most important 52 bits (7 bytes) of a kernel stack address  the kernel stack is aligned by the size of a page (i.e., 4KB, by default)</p>
    <p>If we only know 4 bytes  ?  Guess and check!  e.g.,</p>
    <p>spraying (FP  0x0000 0000 3000 0000)</p>
    <p>spraying (FP  0x0000 0000 1234 0000)</p>
    <p>Hidden data &lt; 0x 3000 0000</p>
    <p>Hidden data &gt; 0x 1234 0000</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Finding pointers with the LTP framework</p>
    <p>be r</p>
    <p>of S</p>
    <p>os si</p>
    <p>bl e</p>
    <p>ca se</p>
    <p>s 3ointing to the Nernel stacN 3ointing to the Nernel code</p>
    <p>be r</p>
    <p>of S</p>
    <p>os si</p>
    <p>bl e</p>
    <p>ca se</p>
    <p>s 3ointing to the Nernel stacN 3ointing to the Nernel code</p>
  </div>
  <div class="page">
    <p>Summary of exploitation results</p>
    <p>Vulnerability Leak Size CVSS Exploitation Result</p>
    <p>CVE-2018-11580 4 bytes 2.1 Bypass KASLR</p>
    <p>CVE-2016-4569 4 bytes 2.1 Bypass KASLR</p>
    <p>Fixes: 372f525 4 bytes N/A Bypass KASLR</p>
    <p>CVE-2016-4486 4 bytes 2.1 Reveal the kernel stack base</p>
    <p>CVE-2016-5244 1 byte 5 Failed</p>
  </div>
  <div class="page">
    <p>Summary of exploitation results</p>
    <p>Vulnerability Leak Size CVSS Exploitation Result</p>
    <p>CVE-2018-11580 4 bytes 2.1 Bypass KASLR</p>
    <p>CVE-2016-4569 4 bytes 2.1 Bypass KASLR</p>
    <p>CVE-2016-4486 4 bytes 2.1 Reveal the kernel stack base</p>
    <p>Fixes: 372f525 4 bytes N/A Bypass KASLR</p>
    <p>CVE-2016-5244 1 byte 5 Failed</p>
    <p>Vulnerability Leak Size CVSS Exploitation Result</p>
    <p>CVE-2018-11580 4 bytes 2.1 Bypass KASLR</p>
    <p>CVE-2016-4569 4 bytes 2.1 Bypass KASLR</p>
    <p>Fixes: 372f525 4 bytes N/A Bypass KASLR</p>
    <p>CVE-2016-4486 4 bytes 2.1 Reveal the kernel stack base</p>
    <p>CVE-2016-5244 1 byte 5 Failed</p>
  </div>
  <div class="page">
    <p>Summary of exploitation results</p>
    <p>Vulnerability Leak Size CVSS Exploitation Result</p>
    <p>CVE-2018-11580 4 bytes 2.1 Bypass KASLR</p>
    <p>CVE-2016-4569 4 bytes 2.1 Bypass KASLR</p>
    <p>Fixes: 372f525 4 bytes N/A Bypass KASLR</p>
    <p>CVE-2016-4486 4 bytes 2.1 Reveal the kernel stack base</p>
    <p>CVE-2016-5244 1 byte 5 Failed</p>
  </div>
  <div class="page">
    <p>Conclusion  Proposed a generic approach to exploit uses of uninitialized stack  Can effectively analyze stack-based information-leak vulnerabilities  Leaked pointer values -&gt; Bypassing KASLR  Can help adjust CVSS scores</p>
  </div>
  <div class="page">
    <p>Haehyun Cho haehyun@asu.edu https://haehyun.github.io</p>
  </div>
</Presentation>
