<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FAST AND SERVICE-PRESERVING RECOVERY FROM MALWARE INFECTIONS USING CRIU</p>
    <p>ASHTON WEBSTER RYAN ECKENROD</p>
    <p>DR. JAMES PURTILO</p>
  </div>
  <div class="page">
    <p>INTRODUCTION</p>
    <p>Malware infections are essentially inevitable at scale  Most malware removal tools are excellent at undoing malware</p>
    <p>changes  ...but what about availability of system?</p>
  </div>
  <div class="page">
    <p>MOTIVATING EXAMPLE</p>
    <p>Running a web server  Periodically, web server is infected by malware and must be</p>
    <p>restarted  Is there a better way to preserve active (benign) connections and</p>
    <p>processing state through the restore?</p>
  </div>
  <div class="page">
    <p>STATE OF THE ART: THE NAIVE APPROACH</p>
    <p>Turn it off and on again (and reformat drives)  VM Snapshots  Antivirus Restore</p>
  </div>
  <div class="page">
    <p>STATE OF THE ART: LOG BASED AND VM BASED METHODS</p>
    <p>Project/Name Space Required Runtime Overhead</p>
    <p>Restore Overhead</p>
    <p>Reverts all bad state?</p>
    <p>Recovers all good state?</p>
    <p>Maintains active connections?</p>
    <p>Taser (Goel et al.) On the order of GBs per day for logs</p>
    <p>~7% Minutes to hours In virtually all cases</p>
    <p>In virtually all cases</p>
    <p>No</p>
    <p>Back to the Future (Goel et al.)</p>
    <p>On the order of MB per program execution</p>
    <p>Up to 100% in some cases</p>
    <p>Not measured In virtually all cases</p>
    <p>In virtually all cases</p>
    <p>No</p>
    <p>SECOM (Shan et al.) Negligible Up to 8% Not measured In virtually all cases</p>
    <p>In virtually all cases</p>
    <p>No</p>
    <p>TimeVM (Elbadawi et al.)</p>
    <p>A few thousands network packets</p>
    <p>Not measured Less than 30 seconds</p>
    <p>In virtually all cases</p>
    <p>In virtually all cases</p>
    <p>No</p>
    <p>ExecRecorder (Oliveira et al.)</p>
    <p>In virtually all cases</p>
    <p>No</p>
    <p>CRIU-MR On the order of GBs for backups</p>
    <p>&lt;1% 1 ~ 3 seconds Yes (depends on policy)</p>
    <p>Yes (depends on policy)</p>
    <p>Yes</p>
  </div>
  <div class="page">
    <p>DESIGN AND IMPLEMENTATION</p>
  </div>
  <div class="page">
    <p>OUR SOLUTION: CRIU-MR</p>
    <p>Leverages existing technologies LXC and CRIU  Preserves active connections  Recovery process takes seconds  Virtually no overhead during runtime  Malicious process state saved for forensic analysis</p>
  </div>
  <div class="page">
    <p>SOLUTION COMPONENTS: LXC  LINUX CONTAINERS</p>
    <p>Virtualization and Sandboxing for Linux using containers  Come in privileged and unprivileged varieties  Privileged Containers run as root and are not considered secure  Unprivileged containers run as an unprivileged user and map uids</p>
    <p>and guids to random ranges on the actual system</p>
  </div>
  <div class="page">
    <p>SOLUTION COMPONENTS: CRIU - CHECKPOINT AND RESTORE IN USERSPACE</p>
    <p>Saves state of individual Linux processes in image files  Able to restore TCP connections using TCP_REPAIR socket</p>
    <p>option  Araujo et al. use this TCP restore functionality to dynamically</p>
    <p>restore infected containers to honeypots  Able to checkpoint and restore entire Linux containers as well</p>
  </div>
  <div class="page">
    <p>HOW WE DID IT: CRIU-MR OVERVIEW</p>
    <p>Modify CRIU for Malware Recovery  During checkpoint, identify malicious processes/files/connections</p>
    <p>matching policies  During restore, omit processes identified during checkpoint  No changes needed for restoring legitimate connections</p>
    <p>Create Agent for receiving alerts from IDS/IPS/etc.  Create policies which can be read by our system to identify</p>
    <p>malware processes and modified state</p>
  </div>
  <div class="page">
    <p>CRIU-MR POLICIES</p>
    <p>Created policy language flexible enough to handle variety of alerts</p>
    <p>Static policies  Assertions about state of container that should always hold  Stored as static input during startup of CRIU-MR agent  Example: Some process should never have a child process</p>
    <p>Dynamic policies  Additional information gathered by external IDS/IPS/AV scanner</p>
    <p>used to identify malware  Sent as JSON alert to CRIU-MR agent and dynamically included</p>
    <p>in policy  Example: firewall violation alert</p>
  </div>
  <div class="page">
    <p>POLICY MATCHES</p>
    <p>Executable Name Match  Filename Match  TCP IP Match  Memory Match  PID Match  Parent PID Match  Parent Executable Name</p>
    <p>Match</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION: CRIU MODIFICATIONS</p>
    <p>Total of 659 lines of C code added to fork of open source CRIU repository1</p>
    <p>Checkpoint  Reads protobuf formatted policy file  Hook into resource serialization to check for policy elements  Write violating process IDs to file omit.img  Malicious process image information is saved</p>
    <p>Restore  Read back omit.img  At point of restore for each process, check if it is in omitted list  Dont restore processes with missing state (i.e. missing files)</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION: LXC</p>
    <p>lxc - command to manage containers  Checkpointing via CRIU  Trivial changes to allow for added modified CRIU version  Open source fork of the original repository1</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION: CRIU-MR AGENT</p>
    <p>Simple python script to interface with modified CRIU/LXC</p>
    <p>Accepts JSON alerts and creates policies</p>
    <p>Orchestrates checkpoint, filesystem recovery, and restore</p>
    <p>Available as github repository1</p>
  </div>
  <div class="page">
    <p>CRIU-MR AGENT: FILESYSTEM RESTORE</p>
    <p>Assume that filesystem is mostly static  Keep copies of container filesystem on host  Quickly replace using mv command</p>
  </div>
  <div class="page">
    <p>INFECTION RECOVERY STEPS</p>
    <p>and sent to the CRIU-MR agent as JSON alert 3) Preparation - JSON alert is transformed into a protobuf formatted</p>
    <p>policy, which is in turn passed to our modified version of CRIU 4) CRIU Checkpoint - all images generated; processes in violation</p>
    <p>of policy written to omit.img 5) Filesystem Restore - The backup system is placed at the</p>
    <p>container root location and the infected filesystem is moved to a different location</p>
  </div>
  <div class="page">
    <p>EXPERIMENTS</p>
  </div>
  <div class="page">
    <p>EXPERIMENT I: MALWARE RECOVERY TIME How long does it take to remove malware?</p>
    <p>Experiment Outline:</p>
    <p>allowed to run for 3 seconds 3) Detection is triggered and recovery starts</p>
    <p>We repeat this removal process 10 times for each of 6 malware</p>
  </div>
  <div class="page">
    <p>EXPERIMENT I: MALWARE SELECTION</p>
    <p>linux_lady : Malware attempting to mine bitcoin via cronjob  ms_bind_shellI : Metasploit exploit which binds on a port and</p>
    <p>provides a shell  ms_reverse_shell : Metasploit exploit which starts a reverse</p>
    <p>shell from port  wipefs : bitcoin mining executable  Linux.Agent : Attempts to exfiltrate /etc/shadow or /etc/passwd  goahead_ldpreload : An exploit on the GoAhead embedded</p>
    <p>webserver</p>
  </div>
  <div class="page">
    <p>EXPERIMENT I: MALWARE RECOVERY TIME RESULTS</p>
  </div>
  <div class="page">
    <p>EXPERIMENT I: MEAN (STD. DEV.) DURATION PER STEP</p>
    <p>Step Duration (s)</p>
    <p>Preparation 0.02 (0.01)</p>
    <p>Checkpoint 2.16 (0.20)</p>
    <p>Filesystem Swap 0.01 (0.01)</p>
    <p>Restore 0.57 (0.11)</p>
    <p>Total 2.67 (0.27)</p>
  </div>
  <div class="page">
    <p>EXPERIMENT II: AVAILABILITY IMPACT STRESS TEST What is the availability impact of recovering from malware?</p>
    <p>7 file sizes ranging from 1KB to 1GB by powers of 10 requested concurrently</p>
    <p>Experiment lasts for 1 minute  At 30 seconds, malware is triggered, runs for 3 seconds, and</p>
    <p>recovery is triggered  Time for each request is recorded  In all cases, we find that no connections were terminated</p>
  </div>
  <div class="page">
    <p>EXPERIMENT II: RESULTS</p>
    <p>Time impact of recovery does not appear to depend on file size</p>
  </div>
  <div class="page">
    <p>EXPERIMENT II: RESULTS (CONTINUED)</p>
    <p>Time impact of recovery does not appear to depend on file size or number of concurrent connections</p>
  </div>
  <div class="page">
    <p>DISCUSSION</p>
    <p>What if the TCP connection which triggers a restore terminates before we have chance to remove it?  Malicious process may still be removed if it references files not on</p>
    <p>the original filesystem  Possible to extend to other Operating Systems (besides Linux)?</p>
    <p>Blocker: TCP restore functionality  DoS potential?</p>
    <p>Use in conjunction with patching</p>
  </div>
  <div class="page">
    <p>LIMITATIONS</p>
    <p>What if a restore is triggered but no policy matches are found?  Fall back to start from original copy of FS  Connections are interrupted in this case</p>
    <p>Doesnt verify validity of alerts  Use public key cryptography to verify alerts using signing</p>
  </div>
  <div class="page">
    <p>FUTURE WORK</p>
    <p>Dynamic Honeypot Creation  Current work in dynamically creating two instances after infection:</p>
    <p>a honeypot and a restored version of the legitimate service  Dynamic sanitization of sensitive information on original</p>
    <p>container (see Araujo et al.)  Dynamic Assertions  Verification of alerts</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS</p>
    <p>Considers availability of service (including active connections)  Able to maintain active connections even through recovery</p>
    <p>Fast recovery and low overhead  ~3 second for recovery in most cases  Only overhead is from LXC</p>
    <p>Modular - can connect to virtually any IDS  Recovery agent accepts JSON alerts from variety of sources</p>
    <p>Available as open source</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
    <p>Questions?</p>
  </div>
</Presentation>
