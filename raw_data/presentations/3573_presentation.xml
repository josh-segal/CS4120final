<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>University of Luxembourg Interdisciplinary Centre for Security,</p>
    <p>Reliability and Trust</p>
    <p>The Art of The Scam Demystifying Honeypots in Ethereum Smart Contracts Christof Ferreira Torres, Mathis Steichen and Radu State</p>
  </div>
  <div class="page">
    <p>Ethereum Crash Course</p>
  </div>
  <div class="page">
    <p>Ethereum Blockchain</p>
  </div>
  <div class="page">
    <p>Ethereum Accounts</p>
    <p>Externally Owned Account Contract Account q Address q Balance</p>
    <p>q Address q Balance q Code q Storage</p>
    <p>$</p>
    <p>$</p>
    <p>$</p>
  </div>
  <div class="page">
    <p>Ethereum Smart Contracts</p>
    <p>Developer Solidity Compiler Smart Contract</p>
  </div>
  <div class="page">
    <p>Ethereum Virtual Machine</p>
    <p>EVM</p>
    <p>q Turing complete q Register-less, 256-bit, stack-based VM</p>
    <p>q Over 100 instructions:</p>
    <p>q Stack instructions: PUSH, SWAP,</p>
    <p>q Arithmetic instructions: ADD, SUB, MUL,</p>
    <p>q Memory instructions: SLOAD, SSTORE,</p>
    <p>q Control-flow instructions: JUMP, JUMPI,</p>
    <p>q Contract instructions: CALL, SELFDESTRUCT,</p>
    <p>q Error handling instructions: REVERT, INVALID,</p>
  </div>
  <div class="page">
    <p>Exploiting Smart Contracts</p>
  </div>
  <div class="page">
    <p>Attacks on Smart Contracts</p>
  </div>
  <div class="page">
    <p>Automated Exploit Generation</p>
  </div>
  <div class="page">
    <p>Limitations of a Reactive Approach</p>
    <p>q Attackers are required to scan millions of smart contracts to finds bugs.</p>
    <p>q Finding exploitable bugs in smart contracts is becoming more challenging.</p>
    <p>Why should I spend time looking for victims, if I can just let the victims come to me?</p>
  </div>
  <div class="page">
    <p>Smart Contract Honeypots</p>
  </div>
  <div class="page">
    <p>What are Smart Contract Honeypots?</p>
    <p>q Smart contracts that look vulnerable but actually are not.</p>
    <p>q Idea:</p>
    <p>Make users believe that they can exploit a smart contract by sending funds to it, while in reality only the smart contract creator is be able to retrieve them.</p>
  </div>
  <div class="page">
    <p>Multiplicator Honeypot</p>
    <p>Trap</p>
    <p>Bait</p>
    <p>!! Balance = Previous Balance + Transaction Value !!</p>
  </div>
  <div class="page">
    <p>Multiplicator Honeypot</p>
  </div>
  <div class="page">
    <p>CryptoRoulette Honeypot</p>
    <p>Bait</p>
    <p>Trap</p>
  </div>
  <div class="page">
    <p>CryptoRoulette Honeypot</p>
  </div>
  <div class="page">
    <p>Honeypot Phases</p>
    <p>Attacker Honeypot</p>
    <p>Victim</p>
  </div>
  <div class="page">
    <p>Why Do Honeypots Work?</p>
    <p>q People actively look for exploitable smart contracts.</p>
    <p>q Complexity of the Ethereum ecosystem.</p>
  </div>
  <div class="page">
    <p>Detecting Honeypots</p>
  </div>
  <div class="page">
    <p>Taxonomy of Honeypots</p>
    <p>q Collected 24 honeypot smart contracts from public sources on the Internet.</p>
    <p>q Extracted 8 different techniques, each exploiting a feature (bug) on a particular level of Ethereum.</p>
  </div>
  <div class="page">
    <p>HoneyBadger Design</p>
  </div>
  <div class="page">
    <p>Symbolic Analysis</p>
    <p>q Based on Luu et al.s symbolic execution engine Oyente [CCS 16].</p>
    <p>q Constructs control flow graph and executes every instruction symbolically.</p>
    <p>q Our symbolic execution does not ignore infeasible paths.</p>
    <p>q Collects meta information about:</p>
    <p>q Storage writes ! q Infeasible basic blocks &quot;# q Arithmetic operations $</p>
    <p>q Execution paths % q Feasible basic blocks &amp;# q Contract calls '</p>
  </div>
  <div class="page">
    <p>Cash Flow Analysis</p>
    <p>q Discard contracts that cannot receive and transfer funds.</p>
    <p>q Receiving funds: q  &quot;  $:&amp;'('&amp;)  &quot; q We use Z3 to verify that +, &gt; 0 is satisfiable</p>
    <p>under &quot;.</p>
    <p>q Transferring funds: q Explicitly (e.g. transfer):  /  0: /, &gt; 0  /, 23 3456782/</p>
    <p>q Implicitly (i.e. selfdestruct):  &quot;  $:9':;&lt;'9)&amp;=0)  &quot;</p>
  </div>
  <div class="page">
    <p>Honeypot Analysis</p>
    <p>q Consists of several sub-components.</p>
    <p>q Each sub-component is responsible for the detection of a particular technique.</p>
    <p>q Honeypot techniques are detected via simple heuristics:</p>
    <p>q Ex.: Balance Disorder</p>
    <p>&quot;  $:&quot;  &amp;'  &quot;) = + &amp;, - + &amp;)</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Dataset</p>
    <p>q We crawled 2,019,434 contracts from August 7, 2015 to October 12, 2018.</p>
    <p>q 151,935 contracts are unique in terms of bytecode (7.52%).</p>
    <p>q We run HoneyBadger on the set of unique smart contracts.</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>q 48,487 contracts have been identified as cash flow contracts (32%).</p>
    <p>q Our tool detected 460 unique honeypots (690 on the 2 million).</p>
    <p>q Analysis took about 2 minutes per contract (91% code coverage).</p>
    <p>BA LA</p>
    <p>N CE</p>
    <p>D I S</p>
    <p>O RD</p>
    <p>E R</p>
    <p>I N H</p>
    <p>E R I T</p>
    <p>A N</p>
    <p>CE</p>
    <p>D I S</p>
    <p>O RD</p>
    <p>E R</p>
    <p>S K I P</p>
    <p>E M</p>
    <p>P T Y</p>
    <p>S T RI</p>
    <p>N G</p>
    <p>L I T</p>
    <p>E R A</p>
    <p>L</p>
    <p>T Y P E</p>
    <p>D E D</p>
    <p>U CT</p>
    <p>I O N</p>
    <p>O V</p>
    <p>E R F L</p>
    <p>O W</p>
    <p>U N</p>
    <p>I N I T</p>
    <p>I L I S</p>
    <p>E D</p>
    <p>S T RU</p>
    <p>CT</p>
    <p>H I D</p>
    <p>D E N</p>
    <p>S T A</p>
    <p>T E U</p>
    <p>P D A</p>
    <p>T E</p>
    <p>H I D</p>
    <p>D E N</p>
    <p>T RA</p>
    <p>N S F</p>
    <p>E R</p>
    <p>S T RA</p>
    <p>W M</p>
    <p>A N</p>
    <p>C O</p>
    <p>N T R</p>
    <p>A CT</p>
    <p>All Contracts Unique Contracts</p>
  </div>
  <div class="page">
    <p>Validation</p>
    <p>q Manual inspection of the source code for the 460 flagged contracts.</p>
    <p>q We managed to collect the source code for 323 contracts (70% of 460).</p>
    <p>q Validation shows that 282 contracts are true positives (87% precision).</p>
  </div>
  <div class="page">
    <p>Honeypot Insights</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>q Analyzed all transactions of the 282 true positives.</p>
    <p>q Used simple heuristics to label addresses as: q Attacker:</p>
    <p>q Victim: not labeled as attacker and spent more funds than actually received.</p>
    <p>q Used this to label honeypots as: q Successful: a victim has been detected. q Aborted: the balance is zero and no victim has been detected. q Active: the balance is larger than zero and no victim has been detected.</p>
  </div>
  <div class="page">
    <p>Success Rate</p>
    <p>q 71% manage to trap only one victim.</p>
    <p>q Users potentially look at transactions.</p>
    <p>q Majority are successful within the first 24 hours.</p>
    <p>q Users quickly attempt to exploit honeypots. 7 17</p>
    <p>BD ID SESL TDO US HSU HT SMC</p>
    <p>Successful Active Aborted</p>
  </div>
  <div class="page">
    <p>Diversity</p>
    <p>q Bytecode of honeypots is vastly different even within the same technique. q Signature-based detection methods are rather ineffective.</p>
  </div>
  <div class="page">
    <p>Popularity</p>
    <p>q First deployment in January 2017 with highest activity in February 2018. q Honeypots are an emerging and increasing trend.</p>
    <p>Au gu</p>
    <p>st 20</p>
    <p>Oc to</p>
    <p>be r 2</p>
    <p>De ce</p>
    <p>mb er</p>
    <p>Fe bru</p>
    <p>ar y 2</p>
    <p>Ap ril</p>
    <p>Ju ne</p>
    <p>Au gu</p>
    <p>st 20</p>
    <p>Oc to</p>
    <p>be r 2</p>
    <p>De ce</p>
    <p>mb er</p>
    <p>Fe bru</p>
    <p>ar y 2</p>
    <p>Ap ril</p>
    <p>Ju ne</p>
    <p>Au gu</p>
    <p>st 20</p>
    <p>Oc to</p>
    <p>be r 2</p>
    <p>De ce</p>
    <p>mb er</p>
    <p>Fe bru</p>
    <p>ar y 2</p>
    <p>Ap ril</p>
    <p>Ju ne</p>
    <p>Au gu</p>
    <p>st 20</p>
    <p>Oc to</p>
    <p>be r 2</p>
    <p>N um</p>
    <p>be r o</p>
    <p>f c on</p>
    <p>tr ac</p>
    <p>ts</p>
    <p>Date</p>
    <p>BD ID SESL TDO US HSU HT SMC</p>
  </div>
  <div class="page">
    <p>Profitability</p>
    <p>q A total profit of 257.25 ether has been made through honeypots. q An accumulated profit of $90,118 at the time of withdrawal.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>q Honeypots are an emerging new type of fraud and requires further investigation.</p>
    <p>q We propose a taxonomy and a tool called HoneyBadger, that detects honeypots at a large scale.</p>
    <p>q We identified 690 honeypots with a precision of 87%.</p>
    <p>q We provide interesting insights: 240 victims and $90,000 profit.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>All code &amp; data is available on GitHub:</p>
    <p>https://github.com/christoftorres/HoneyBadger</p>
    <p>More information at:</p>
    <p>https://honeybadger.uni.lu</p>
    <p>Supported by:</p>
  </div>
</Presentation>
