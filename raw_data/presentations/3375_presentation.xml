<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reverse Engineering x86 Processor Microcode Vancouver, Canada, August 18, 2017</p>
    <p>Philipp Koppe, Benjamin Kollenda, Marc Fyrbiak, Christian Kison, Robert Gawlik, Christof Paar, Thorsten Holz</p>
    <p>Horst Grtz Institute for IT-Security, Ruhr-Universitt Bochum</p>
  </div>
  <div class="page">
    <p>x86 CPUs are prone to errors</p>
  </div>
  <div class="page">
    <p>x86 CPUs are prone to errors</p>
  </div>
  <div class="page">
    <p>x86 CPUs are prone to errors</p>
  </div>
  <div class="page">
    <p>x86 CPUs are prone to errors</p>
  </div>
  <div class="page">
    <p>x86 ISA is complex</p>
    <p>Hex M n e m o n i c s C3 ret</p>
  </div>
  <div class="page">
    <p>x86 ISA is complex</p>
    <p>Hex M n e m o n i c s C3 ret</p>
  </div>
  <div class="page">
    <p>x86 ISA is complex</p>
    <p>Hex M n e m o n i c s C3 ret</p>
  </div>
  <div class="page">
    <p>x86 ISA is complex</p>
    <p>Hex M n e m o n i c s C3 ret</p>
  </div>
  <div class="page">
    <p>x86 ISA is complex</p>
    <p>Hex M n e m o n i c s C3 ret</p>
    <p>[ esi + edi * 4 + 0 x 1 1 2 2 3 3 4 4 ]</p>
  </div>
  <div class="page">
    <p>Micro Ops</p>
    <p>pop [ ebx ]</p>
  </div>
  <div class="page">
    <p>Micro Ops</p>
    <p>pop [ ebx ] load temp , [ esp ] s t o r e [ ebx ] , temp add esp , 4</p>
  </div>
  <div class="page">
    <p>x86 Instruction Decoding</p>
  </div>
  <div class="page">
    <p>x86 Instruction Decoding</p>
  </div>
  <div class="page">
    <p>Microcode Engine (Vector Decoder)</p>
  </div>
  <div class="page">
    <p>Microcode Engine (Vector Decoder)</p>
  </div>
  <div class="page">
    <p>Microcode Engine (Vector Decoder)</p>
  </div>
  <div class="page">
    <p>Microcode Engine (Vector Decoder)</p>
  </div>
  <div class="page">
    <p>Microcode Engine (Vector Decoder)</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How does the microcode update mechanism work?</p>
    <p>How can we analyze the microcode encoding and meaning?</p>
    <p>Can we load our own microprograms into the CPU?</p>
    <p>Are there security implications?</p>
    <p>AMD K8 and K10 processor families</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How does the microcode update mechanism work?</p>
    <p>How can we analyze the microcode encoding and meaning?</p>
    <p>Can we load our own microprograms into the CPU?</p>
    <p>Are there security implications?</p>
    <p>AMD K8 and K10 processor families</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How does the microcode update mechanism work?</p>
    <p>How can we analyze the microcode encoding and meaning?</p>
    <p>Can we load our own microprograms into the CPU?</p>
    <p>Are there security implications?</p>
    <p>AMD K8 and K10 processor families</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How does the microcode update mechanism work?</p>
    <p>How can we analyze the microcode encoding and meaning?</p>
    <p>Can we load our own microprograms into the CPU?</p>
    <p>Are there security implications?</p>
    <p>AMD K8 and K10 processor families</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How does the microcode update mechanism work?</p>
    <p>How can we analyze the microcode encoding and meaning?</p>
    <p>Can we load our own microprograms into the CPU?</p>
    <p>Are there security implications?</p>
    <p>AMD K8 and K10 processor families</p>
  </div>
  <div class="page">
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Microcode Update Mechanism</p>
    <p>Kernel mode</p>
    <p>Load microcode update into RAM</p>
    <p>Write virtual address to MSR 0xC0010020</p>
    <p>Microcode patches not persistent</p>
  </div>
  <div class="page">
    <p>Microcode Update File Format</p>
  </div>
  <div class="page">
    <p>Microcode Update File Format</p>
  </div>
  <div class="page">
    <p>Reverse Engineering Setting</p>
    <p>Unknown instruction set analysis</p>
    <p>Black box model with oracle</p>
    <p>Feed inputs, filter and observe outputs</p>
    <p>Infer structure, encoding, meaning</p>
  </div>
  <div class="page">
    <p>Framework</p>
  </div>
  <div class="page">
    <p>Framework</p>
  </div>
  <div class="page">
    <p>Framework</p>
  </div>
  <div class="page">
    <p>Framework</p>
  </div>
  <div class="page">
    <p>Processor Oracle</p>
  </div>
  <div class="page">
    <p>Processor Oracle</p>
  </div>
  <div class="page">
    <p>Processor Oracle</p>
  </div>
  <div class="page">
    <p>Processor Oracle</p>
  </div>
  <div class="page">
    <p>Analysis - Heatmaps</p>
  </div>
  <div class="page">
    <p>Analysis - Brute Force</p>
  </div>
  <div class="page">
    <p>Analysis - Brute Force</p>
    <p>add eax , i m m 1 6</p>
  </div>
  <div class="page">
    <p>Analysis - Automated Tests</p>
  </div>
  <div class="page">
    <p>Analysis - Infer Logic of ROM Triads</p>
  </div>
  <div class="page">
    <p>Analysis - Infer Logic of ROM Triads</p>
  </div>
  <div class="page">
    <p>Analysis - Infer Logic of ROM Triads</p>
  </div>
  <div class="page">
    <p>Analysis - Infer Logic of ROM Triads</p>
  </div>
  <div class="page">
    <p>Analysis - Hardware</p>
  </div>
  <div class="page">
    <p>Analysis - Hardware</p>
  </div>
  <div class="page">
    <p>Analysis - Hardware</p>
  </div>
  <div class="page">
    <p>Results - Micro Ops</p>
    <p>Heatmaps</p>
    <p>29 Micro Ops  Logic, arithmetic, load, store</p>
    <p>Write x86 program counter</p>
    <p>Conditional microcode branch</p>
    <p>Sequence word  Next triad, sequence complete, unconditional branch</p>
    <p>Substitution engine</p>
  </div>
  <div class="page">
    <p>Results - Micro Ops</p>
    <p>Heatmaps  29 Micro Ops</p>
    <p>Logic, arithmetic, load, store</p>
    <p>Write x86 program counter</p>
    <p>Conditional microcode branch</p>
    <p>Sequence word  Next triad, sequence complete, unconditional branch</p>
    <p>Substitution engine</p>
  </div>
  <div class="page">
    <p>Results - Micro Ops</p>
    <p>Heatmaps  29 Micro Ops</p>
    <p>Logic, arithmetic, load, store</p>
    <p>Write x86 program counter</p>
    <p>Conditional microcode branch</p>
    <p>Sequence word  Next triad, sequence complete, unconditional branch</p>
    <p>Substitution engine</p>
  </div>
  <div class="page">
    <p>Results - Micro Ops</p>
    <p>Heatmaps  29 Micro Ops</p>
    <p>Logic, arithmetic, load, store</p>
    <p>Write x86 program counter</p>
    <p>Conditional microcode branch</p>
    <p>Sequence word  Next triad, sequence complete, unconditional branch</p>
    <p>Substitution engine</p>
  </div>
  <div class="page">
    <p>Results - Augment x86 instructions</p>
    <p>Jump back to ROM  DIV</p>
    <p>Emulate instruction logic  IMUL, SHRD, CMPXCHG, ENTER</p>
  </div>
  <div class="page">
    <p>Our Microprograms</p>
    <p>Instrumentation</p>
    <p>Remote microcode backdoors  Control flow hijack in browsers induced by microcode</p>
    <p>Triggered remotely with ASM.JS or WebAssembly</p>
    <p>Cryptographic microcode Trojans  Introduce timing side-channels in constant-time ECC implementation</p>
    <p>Inject faults to enable fault attacks</p>
  </div>
  <div class="page">
    <p>Our Microprograms</p>
    <p>Instrumentation  Remote microcode backdoors</p>
    <p>Control flow hijack in browsers induced by microcode</p>
    <p>Triggered remotely with ASM.JS or WebAssembly</p>
    <p>Cryptographic microcode Trojans  Introduce timing side-channels in constant-time ECC implementation</p>
    <p>Inject faults to enable fault attacks</p>
  </div>
  <div class="page">
    <p>Our Microprograms</p>
    <p>Instrumentation  Remote microcode backdoors</p>
    <p>Control flow hijack in browsers induced by microcode</p>
    <p>Triggered remotely with ASM.JS or WebAssembly</p>
    <p>Cryptographic microcode Trojans  Introduce timing side-channels in constant-time ECC implementation</p>
    <p>Inject faults to enable fault attacks</p>
  </div>
  <div class="page">
    <p>Sample Microprogram (simplified)</p>
    <p>s u b . Z t1d , eax jcc EZF , 0 x2 or t12d , eax , 0 x8</p>
  </div>
  <div class="page">
    <p>Sample Microprogram (simplified)</p>
    <p>s u b . Z t1d , eax jcc EZF , 0 x2 or t12d , eax , 0 x8</p>
    <p>div2 t15q , t24q , 0 xd5 srl t13w , ax , 0 x8 d i v 1 . C t19d , t12d , t56d</p>
  </div>
  <div class="page">
    <p>Sample Microprogram (simplified)</p>
    <p>s u b . Z t1d , eax jcc EZF , 0 x2 or t12d , eax , 0 x8</p>
    <p>div2 t15q , t24q , 0 xd5 srl t13w , ax , 0 x8 d i v 1 . C t19d , t12d , t56d</p>
    <p>mov t9d , t9d , r e g m d 4 a d d . E P t56d , edx , t56d jcc True , -0 x800</p>
  </div>
  <div class="page">
    <p>Sample Microprogram (simplified)</p>
    <p>s u b . Z t1d , eax jcc EZF , 0 x2 or t12d , eax , 0 x8</p>
    <p>div2 t15q , t24q , 0 xd5 srl t13w , ax , 0 x8 d i v 1 . C t19d , t12d , t56d</p>
    <p>mov t9d , t9d , r e g m d 4 a d d . E P t56d , edx , t56d jcc True , -0 x800</p>
    <p>mov eax , eax add t1d , pcd , 1 w r i t e P C t1d</p>
  </div>
  <div class="page">
    <p>Demo</p>
    <p>DEMO</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>We built a framework for microcode reverse engineering</p>
    <p>We reverse engineered substantial parts of the encoding</p>
    <p>We implemented meaningful microprograms from scratch</p>
    <p>https://github.com/RUB-SysSec/microcode/</p>
  </div>
</Presentation>
