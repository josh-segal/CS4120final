<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TAPE: a Transactional Application Profiling Environment</p>
    <p>Hassan Chafi, Chi Cao Minh, Austen McDonald, Brian D. Carlstrom, JaeWoong Chung, Lance Hammond,</p>
    <p>Christos Kozyrakis, and Kunle Olukotun</p>
    <p>Computer Systems Laboratory Stanford University</p>
    <p>http://tcc.stanford.edu</p>
  </div>
  <div class="page">
    <p>Optimizing Parallel Performance</p>
    <p>CMPs are here but parallel programming is still difficult  Need correct and fast parallel executables</p>
    <p>Transactional memory simplifies correct parallel programming  No locks  Speculative parallelization</p>
    <p>The Issue is now performance tuning</p>
    <p>TAPE: a system for performance profiling of transactional applications  Expressive: tracks all performance bottlenecks  Accurate: identifies bottleneck location in source code  Easy to use: leads to optimal performance in few tuning steps  Low overhead: negligible area &amp; performance cost</p>
    <p>TAPE allows for continuous profiling, even on production runs</p>
  </div>
  <div class="page">
    <p>TCC Architecture for Transactional Execution</p>
    <p>Transactions Start</p>
    <p>Request Commit Token</p>
    <p>Commit</p>
    <p>Commit</p>
    <p>Transaction Timeline</p>
    <p>Write Buffer</p>
    <p>Transaction Control Bits</p>
    <p>Read, Modified, etc</p>
    <p>Commit Control</p>
    <p>TAPE HW</p>
  </div>
  <div class="page">
    <p>Out-of-the-box TCC Performance</p>
    <p>Initial Be nchmark runtime for 8 proce ssor CM P</p>
    <p>art equake lufact m oldyn m p3d quicks ort radix s wim tom catv</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>o n</p>
    <p>T im</p>
    <p>e</p>
    <p>Ideal Time</p>
    <p>Initial parallelization is quick and easy  Performance tuning is critical</p>
  </div>
  <div class="page">
    <p>Performance Bottlenecks</p>
    <p>Dependency violations  Due to speculative nature of execution</p>
    <p>Buffer overflows  Transactions state does not fit in cache</p>
    <p>Workload imbalance  Transactions are assigned disproportionate amount of work</p>
    <p>Transactional API overhead  Overhead of starting, committing, and aborting transactions</p>
  </div>
  <div class="page">
    <p>Dependency Violations</p>
    <p>Time</p>
    <p>Useful Arbitrate + commit Idle Violations</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Commit</p>
    <p>Write X</p>
    <p>Read X</p>
    <p>Restarts Transaction</p>
  </div>
  <div class="page">
    <p>Buffer Overflows</p>
    <p>Time</p>
    <p>CPU 1</p>
    <p>CPU 2</p>
    <p>Useful Arbitration + Commit</p>
    <p>Overflow</p>
    <p>Commit</p>
    <p>Overflow Commit</p>
  </div>
  <div class="page">
    <p>Initial Performance Results - 8 processors</p>
    <p>Initial Benchmark runtime</p>
    <p>ar t</p>
    <p>eq ua</p>
    <p>ke</p>
    <p>luf ac</p>
    <p>t</p>
    <p>m ol</p>
    <p>dy n</p>
    <p>m p3</p>
    <p>d</p>
    <p>qu ick</p>
    <p>so rt</p>
    <p>ra di</p>
    <p>x</p>
    <p>sw im</p>
    <p>to m</p>
    <p>ca tv</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d E</p>
    <p>x e</p>
    <p>c u</p>
    <p>ti o</p>
    <p>n T</p>
    <p>im e</p>
    <p>Useful Idle Arbitration + Commit Violations</p>
    <p>Ideal Time</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  TAPE system overview  Example: Violation Profiling</p>
    <p>Information gathering and filtering  Using profile information for optimizations</p>
    <p>Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Key Insights</p>
  </div>
  <div class="page">
    <p>TAPE System Overview</p>
    <p>!</p>
    <p>&quot;!#</p>
    <p>Online  Hardware  Each CPU gathers profile data in</p>
    <p>private buffers  Bottlenecks aggregated over</p>
    <p>multiple occurrences  Infrequent bottlenecks filtered out  Data periodically flushed to pre</p>
    <p>allocated memory regions</p>
    <p>Offline  Software  Combine information from all</p>
    <p>CPUs  Rank bottleneck by cost  Format profiling output &amp; relate</p>
    <p>data to source code</p>
  </div>
  <div class="page">
    <p>Profiling Violations</p>
    <p>CPU-1 writes address X  CPU-2 read address X</p>
    <p>CPU-1 commits first  CPU-2 detects violation on X</p>
    <p>Inserts entry in Transaction Violation Buffer</p>
    <p>CPU 2 restarts transaction  Re-reads address X  Sends read PC2 to TVB</p>
    <p>CPU 2 commits  Most costly violations flushed to</p>
    <p>Period Violation buffer  Others may get evicted</p>
    <p>PVB can be flushed periodically</p>
    <p>TVB</p>
    <p>PVB</p>
    <p>Core</p>
    <p>L1 Cache</p>
    <p>Violation Detection</p>
    <p>Network</p>
    <p>CPU 2</p>
    <p>CPU 1 CPU 2</p>
    <p>Read X</p>
    <p>Write X</p>
    <p>Violation</p>
    <p>Read x</p>
    <p>Commit TPC Read PCObject addr</p>
    <p>Wasted Work</p>
    <p>PCt X500 PC2</p>
  </div>
  <div class="page">
    <p>Example of Interaction with TAPE</p>
    <p>Violations 8: for i = 0 to num_procs: sum += pSum[i];</p>
  </div>
  <div class="page">
    <p>Evaluation Methodology</p>
    <p>8-core CMP processor  Bus interconnected to shared L2 cache  Transactional buffering in private L1 caches (32 Kbytes)  Execution driven simulation with accurate contention modeling</p>
    <p>Applications: SPEC2K FP and SPLASH-2 benchmarks  See ASPLOS04 for transactional programming details</p>
    <p>Questions  Ease of performance tuning with TAPE?  TAPE buffer size requirements  TAPE performance overhead</p>
  </div>
  <div class="page">
    <p>Performance Improvements for 8 Processors</p>
    <p>In iti</p>
    <p>al R</p>
    <p>ec hu</p>
    <p>nk P</p>
    <p>riv at</p>
    <p>iz e</p>
    <p>In iti</p>
    <p>al R</p>
    <p>ec hu</p>
    <p>nk P</p>
    <p>riv at</p>
    <p>iz e</p>
    <p>In iti</p>
    <p>al R</p>
    <p>ec hu</p>
    <p>nk P</p>
    <p>riv at</p>
    <p>iz e</p>
    <p>In iti</p>
    <p>al R</p>
    <p>ec hu</p>
    <p>nk P</p>
    <p>riv at</p>
    <p>iz e</p>
    <p>In iti</p>
    <p>al R</p>
    <p>ec hu</p>
    <p>nk P</p>
    <p>riv at</p>
    <p>iz e</p>
    <p>In iti</p>
    <p>al R</p>
    <p>ec hu</p>
    <p>nk P</p>
    <p>riv at</p>
    <p>iz e</p>
    <p>In iti</p>
    <p>al S</p>
    <p>pl it</p>
    <p>In iti</p>
    <p>al U</p>
    <p>no rd</p>
    <p>er ed</p>
    <p>In iti</p>
    <p>al</p>
    <p>art equake moldyn radix swim tomcatv mp3d quicksort lufact</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>o n</p>
    <p>T im</p>
    <p>e</p>
    <p>Useful Idle Arbitration + Commit Violations</p>
    <p>Ideal Line</p>
    <p>A maximum of two steps were required to fully optimize applications  The programmer is directed to the source of the bottlenecks in the actual code</p>
  </div>
  <div class="page">
    <p>The Cost of TAPE</p>
    <p>Low Chip area cost  Proposed design point requires less than 5K SRAM bits, and</p>
    <p>Low performance impact  Maximum slowdown of only 1.84% (Average was 0.28%)  Allows for continuous profiling, even on production runs  Maximum BW usage was 0.11%</p>
    <p>Memory Usage  On average only 1MB/hr of data generated</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>TAPE: a profiling system for transactional applications  Support easy performance tuning  Complement correctness benefits of transactions</p>
    <p>Key features  Expressive: tracks all performance bottlenecks  Accurate: identifies bottleneck location in source code  Easy to use: leads to optimal performance in few tuning</p>
    <p>steps  Low overhead: negligible area &amp; performance cost  Allows for continuous profiling, even on production runs</p>
  </div>
  <div class="page">
    <p>Thanks For listening</p>
    <p>http://tcc.stanford.edu</p>
  </div>
</Presentation>
