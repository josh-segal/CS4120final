<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Jeong-Uk Kang, Jeeseok Hyun, Hyunjoo Maeng*, and Sangyeun Cho</p>
    <p>Memory Solutions Lab.</p>
    <p>Memory Division, Samsung Electronics Co., Ltd</p>
    <p>The Multi-streamed Solid-State Drive</p>
  </div>
  <div class="page">
    <p>SSD shares a common interface with HDD</p>
    <p>The block device abstraction paved the way for wide adoption of SSDs</p>
    <p>SSD as a Drop-in Replacement of HDD</p>
    <p>SSDHDD</p>
    <p>Generic Block Layer Generic Block Layer</p>
    <p>Host</p>
    <p>Application</p>
    <p>OS</p>
    <p>File System</p>
    <p>Host</p>
    <p>Application</p>
    <p>OS</p>
    <p>File SystemSATA</p>
    <p>Logical Block</p>
    <p>Address</p>
  </div>
  <div class="page">
    <p>Rotating media and NAND flash memory are very different!</p>
    <p>Great, BUT</p>
    <p>SSD</p>
    <p>Read_Page() Write_Page() Erase_Block() Copy_Page()</p>
    <p>HDD Read_Sector() Write_Sector()</p>
    <p>Generic Block Layer Generic Block Layer</p>
    <p>Host</p>
    <p>Application</p>
    <p>OS</p>
    <p>File System</p>
    <p>Host</p>
    <p>Application</p>
    <p>OS</p>
    <p>File System</p>
    <p>Sector base</p>
    <p>Logical Block</p>
    <p>Address</p>
    <p>NAND Flash</p>
    <p>Memory</p>
    <p>NAND Flash</p>
    <p>Memory</p>
    <p>Disk NAND Flash</p>
    <p>Memory</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>SSD</p>
    <p>NAND Flash Memory</p>
    <p>Flash translation layer (FTL)</p>
    <p>Logical block mapping</p>
    <p>Bad block management</p>
    <p>Garbage Collection (GC)</p>
    <p>The Trick is FTL!</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Write</p>
    <p>Page Read</p>
    <p>Block Erase</p>
    <p>Host</p>
    <p>Application</p>
    <p>OS</p>
    <p>(Sector based) File System</p>
    <p>FTL</p>
    <p>Generic Block Layer</p>
  </div>
  <div class="page">
    <p>GC reclaims space to prepare new empty blocks</p>
    <p>NANDs erase-before-update requirement  Valid page copying followed by an erase operation</p>
    <p>Has a large impact on SSD lifetime and performance</p>
    <p>Garbage Collection (GC)</p>
    <p>Valid data1</p>
    <p>Valid data2</p>
    <p>Invalid data</p>
    <p>Invalid data</p>
    <p>Block A</p>
    <p>Valid page copying</p>
    <p>Invalid data</p>
    <p>Invalid data</p>
    <p>Valid data3</p>
    <p>Valid data4</p>
    <p>Block B</p>
    <p>Valid data1</p>
    <p>Valid data2</p>
    <p>Valid data3</p>
    <p>Valid data4</p>
    <p>Free block</p>
    <p>Page</p>
    <p>Page</p>
    <p>Page</p>
    <p>Page</p>
    <p>Block A</p>
    <p>Page</p>
    <p>Page</p>
    <p>Page</p>
    <p>Page</p>
    <p>Block B</p>
    <p>ERASED</p>
    <p>ERASED</p>
    <p>ERASED</p>
    <p>ERASED</p>
    <p>ERASED</p>
    <p>ERASED</p>
    <p>ERASED</p>
    <p>ERASED</p>
  </div>
  <div class="page">
    <p>C a</p>
    <p>ss a</p>
    <p>n d</p>
    <p>ra U</p>
    <p>p d</p>
    <p>a te</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (o</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Time</p>
    <p>GC is Expensive!</p>
    <p>V a</p>
    <p>li d</p>
    <p>P a</p>
    <p>g e</p>
    <p>s co</p>
    <p>p ie</p>
    <p>d (</p>
    <p>o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>C a</p>
    <p>ss a</p>
    <p>n d</p>
    <p>ra U</p>
    <p>p d</p>
    <p>a te</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (o</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Throughput</p>
    <p>GC overhead</p>
    <p>GC highly affects the SSD performance!</p>
    <p>(Minutes)</p>
    <p>Performance of SSD gradually decreases as time goes on</p>
    <p>Example: Cassandra update throughput</p>
  </div>
  <div class="page">
    <p>Our Idea: Multi-streamed SSD</p>
    <p>Host</p>
    <p>Application</p>
    <p>OS</p>
    <p>File System</p>
    <p>Generic Block Layer</p>
    <p>SSD</p>
    <p>NAND Flash memory</p>
    <p>FTL</p>
    <p>New interface for SSD</p>
    <p>Co-exists with the existing block layer</p>
    <p>General &amp; concrete interface</p>
    <p>Multi-streaming Interface Host-provided stream</p>
    <p>information guides desirable data</p>
    <p>placement within SSD!</p>
  </div>
  <div class="page">
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>The multi-streamed SSD can sustain Cassandra update throughput</p>
    <p>End Result</p>
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>Proposed</p>
    <p>Traditional SSD</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Write optimization in SSD</p>
    <p>The Multi-streamed SSD</p>
    <p>Our approach</p>
    <p>Case study</p>
    <p>Evaluation</p>
    <p>Experimental setup</p>
    <p>Results</p>
    <p>Conclusion</p>
    <p>Contents</p>
  </div>
  <div class="page">
    <p>Previous write patterns (=current state) matter</p>
    <p>Effects of Write Patterns</p>
    <p>Sequential LBA updates into Block 2 Random LBA updates into Block 2</p>
    <p>LBA 7</p>
    <p>LBA 0</p>
    <p>LBA 1</p>
    <p>LBA 4</p>
    <p>Block 0</p>
    <p>LBA 2</p>
    <p>LBA 3</p>
    <p>LBA 6</p>
    <p>LBA 5</p>
    <p>Block 1</p>
    <p>LBA 0</p>
    <p>LBA 1</p>
    <p>LBA 2</p>
    <p>LBA 3</p>
    <p>Block 2</p>
    <p>LBA 0</p>
    <p>LBA 1</p>
    <p>LBA 2</p>
    <p>LBA 3</p>
    <p>LBA 7</p>
    <p>LBA 0</p>
    <p>LBA 1</p>
    <p>LBA 4</p>
    <p>Block 0</p>
    <p>LBA 2</p>
    <p>LBA 3</p>
    <p>LBA 6</p>
    <p>LBA 5</p>
    <p>Block 1</p>
    <p>LBA 0</p>
    <p>LBA 1</p>
    <p>LBA 4</p>
    <p>LBA 7</p>
    <p>Block 2</p>
    <p>LBA 0</p>
    <p>LBA 1</p>
    <p>LBA 4</p>
    <p>LBA 7</p>
    <p>Need valid page copying from Block 0 &amp; Block 1</p>
    <p>Just erase Block 0</p>
  </div>
  <div class="page">
    <p>Stream</p>
    <p>SSD</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Page Page Page Page</p>
    <p>Block</p>
    <p>Stream 1</p>
    <p>Stream 2</p>
    <p>Stream 3</p>
    <p>Write to stream 1</p>
    <p>Write to stream 2</p>
    <p>Write to stream 3</p>
    <p>Data Lifetime?</p>
    <p>Lifetime 1</p>
    <p>Lifetime 2</p>
    <p>Lifetime 3</p>
  </div>
  <div class="page">
    <p>Generic Block Layer</p>
    <p>Multi-streamed SSD</p>
    <p>Mapping data with different lifetime to different streams</p>
    <p>The Multi-streamed SSD</p>
    <p>SSD</p>
    <p>NAND Flash Memory</p>
    <p>Data1 Data3</p>
    <p>Page Page</p>
    <p>Block</p>
    <p>Data2 Data7 Data9</p>
    <p>Page</p>
    <p>Block</p>
    <p>FTL</p>
    <p>Host Multi-stream interface</p>
    <p>Stream ID = 1</p>
    <p>Data10 Data12 Data13 Page</p>
    <p>Block</p>
    <p>Stream ID = 3Stream ID = 2</p>
    <p>Application</p>
    <p>Data2Data1</p>
    <p>Data3 Data4</p>
    <p>Data5 Data10</p>
    <p>Provide information about data lifetime</p>
    <p>StreamID</p>
    <p>Place data with similar lifetime into the same erase unit</p>
    <p>Data13</p>
  </div>
  <div class="page">
    <p>Multi-streamed SSD</p>
    <p>High GC efficiency (Reduce GC overheads)  effects on Performance!</p>
    <p>Working Example</p>
    <p>Without Stream</p>
    <p>Request data</p>
    <p>Block 0 Block 1 Block 2</p>
    <p>Request data</p>
    <p>Block 0 Block 1 Block 2</p>
    <p>Multi-Stream</p>
    <p>For effective multi-streaming, proper mapping of data to streams is essential!</p>
    <p>Reduce valid pages to copy</p>
  </div>
  <div class="page">
    <p>Cassandra employs a size-tiered compaction strategy</p>
    <p>Case Study: Cassandra</p>
    <p>Write Request</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1</p>
    <p>K1</p>
    <p>K2</p>
    <p>SSTable 2</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 3</p>
    <p>K2</p>
    <p>K3</p>
    <p>SSTable 4</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 5</p>
    <p>K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>F lu</p>
    <p>sh in</p>
    <p>g</p>
  </div>
  <div class="page">
    <p>Write operations when Cassandra runs</p>
    <p>Summary of Cassandras Write Patterns</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1</p>
    <p>K1</p>
    <p>K2</p>
    <p>SSTable 2</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 3</p>
    <p>K2</p>
    <p>K3</p>
    <p>SSTable 4</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 5</p>
    <p>K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>metadata, journal</p>
    <p>System</p>
    <p>System data Write</p>
    <p>Commit-log Write</p>
    <p>Compaction data write</p>
    <p>Flushing data</p>
  </div>
  <div class="page">
    <p>Just one stream ID (= conventional SSD)</p>
    <p>Mapping #1: Conventional</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1</p>
    <p>K1</p>
    <p>K2</p>
    <p>SSTable 2</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 3</p>
    <p>K2</p>
    <p>K3</p>
    <p>SSTable 4</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 5</p>
    <p>K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>metadata, journal</p>
    <p>System</p>
    <p>System data Write</p>
    <p>Commit-log Write</p>
    <p>Compaction data write</p>
    <p>Flushing data</p>
  </div>
  <div class="page">
    <p>Add a new stream to separately handle application writes (stream ID 1) from system traffic (stream ID 0)</p>
    <p>Mapping #2: Multi-App</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1</p>
    <p>K1</p>
    <p>K2</p>
    <p>SSTable 2</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 3</p>
    <p>K2</p>
    <p>K3</p>
    <p>SSTable 4</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 5</p>
    <p>K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>metadata, journal</p>
    <p>System</p>
    <p>System data Write</p>
    <p>Commit-log Write</p>
    <p>Compaction data write</p>
    <p>Flushing data</p>
  </div>
  <div class="page">
    <p>Use three streams; further separate Commit Log</p>
    <p>Mapping #3: Multi-Log</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1</p>
    <p>K1</p>
    <p>K2</p>
    <p>SSTable 2</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 3</p>
    <p>K2</p>
    <p>K3</p>
    <p>SSTable 4</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 5</p>
    <p>K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>metadata, journal</p>
    <p>System</p>
    <p>System data Write</p>
    <p>Commit-log Write</p>
    <p>Compaction data write</p>
    <p>Flushing data</p>
  </div>
  <div class="page">
    <p>Give distinct streams to different tiers of SSTables</p>
    <p>Mapping #4: Multi-Data</p>
    <p>Memory</p>
    <p>Commit Log</p>
    <p>Memtable</p>
    <p>SSTable 1</p>
    <p>K1</p>
    <p>K2</p>
    <p>SSTable 2</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 3</p>
    <p>K2</p>
    <p>K3</p>
    <p>SSTable 4</p>
    <p>K1</p>
    <p>K3</p>
    <p>SSTable 5</p>
    <p>K1 K2 K3</p>
    <p>SSTable 6 SSTable 7</p>
    <p>SSTable 21</p>
    <p>metadata, journal</p>
    <p>System</p>
    <p>System data Write</p>
    <p>Commit-log Write</p>
    <p>Compaction data write</p>
    <p>Flushing data</p>
    <p>Compaction data write 4</p>
  </div>
  <div class="page">
    <p>Multi-stream SSD Prototype</p>
    <p>Samsung 840 Pro SSD</p>
    <p>60 GB device capacity</p>
    <p>YCSB benchmark on Cassandra</p>
    <p>Write intensive workload</p>
    <p>1 K data x 1,000,000 record counts</p>
    <p>100,000,000 operation counts</p>
    <p>Intel i7-3770 3.4 GHz processor</p>
    <p>Accelerates SSD aging by increasing Cassandras flush frequency</p>
    <p>Experimental Setup</p>
    <p>Linux kernel 3.13 (modified)</p>
    <p>Passes the stream ID through fadvise() system call</p>
    <p>Stores in the inode of VFS</p>
    <p>Application</p>
    <p>VFS</p>
    <p>EXT4</p>
    <p>Device</p>
    <p>fadvise (fd, Stream ID)</p>
    <p>inode field = Stream ID</p>
    <p>Store Stream ID In buffer head</p>
    <p>SSD</p>
  </div>
  <div class="page">
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>Cassandras normalized update throughput</p>
    <p>Conventional TRIM off</p>
    <p>Results</p>
    <p>Conventional (TRIM off)</p>
  </div>
  <div class="page">
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>Conventional (TRIM off)</p>
    <p>Cassandras normalized update throughput</p>
    <p>Conventional TRIM on</p>
    <p>Results</p>
    <p>Conventional (TRIM on)</p>
    <p>TRIM gives non-trivial improvement</p>
    <p>But still far from ideal</p>
  </div>
  <div class="page">
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>Conventional (TRIM off)</p>
    <p>Conventional (TRIM on)</p>
    <p>Cassandras normalized update throughput</p>
    <p>Multi-App (System data vs. Cassandra data)</p>
    <p>Results</p>
    <p>Multi-App</p>
  </div>
  <div class="page">
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>Conventional (TRIM off)</p>
    <p>Conventional (TRIM on)</p>
    <p>Multi-App</p>
    <p>Cassandras normalized update throughput</p>
    <p>Multi-Log (System data vs. Commit-Log vs. Flushed data)</p>
    <p>Results</p>
    <p>Multi-Log</p>
  </div>
  <div class="page">
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>U p</p>
    <p>d a</p>
    <p>te T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(o p</p>
    <p>s/ se</p>
    <p>c)</p>
    <p>Time (Minutes)</p>
    <p>Conventional (TRIM off)</p>
    <p>Conventional (TRIM on)</p>
    <p>Multi-App</p>
    <p>Multi-Log</p>
    <p>Cassandras normalized update throughput</p>
    <p>Multi-Data (System data vs. Commit-Log vs. Flushed data vs. Compaction data)</p>
    <p>Results</p>
    <p>Multi-Data</p>
  </div>
  <div class="page">
    <p>Time (Minutes)</p>
    <p>Cassandras GC overheads</p>
    <p>Conventional TRIM off</p>
    <p>Result #2</p>
    <p>Conventional (TRIM off)</p>
  </div>
  <div class="page">
    <p>Time (Minutes)</p>
    <p>V a li d p</p>
    <p>a g e c</p>
    <p>o p ie</p>
    <p>d (</p>
    <p>o p s /s</p>
    <p>e c )</p>
    <p>Time (Minutes)</p>
    <p>Cassandras GC overheads</p>
    <p>Conventional TRIM on</p>
    <p>Results</p>
    <p>Conventional (TRIM off)</p>
    <p>Conventional (TRIM on)</p>
  </div>
  <div class="page">
    <p>Cassandras GC overheads</p>
    <p>Multi-App (System data vs. Cassandra data)</p>
    <p>Time (Minutes)</p>
    <p>V a li d p</p>
    <p>a g e c</p>
    <p>o p ie</p>
    <p>d (</p>
    <p>o p s /s</p>
    <p>e c )</p>
    <p>Time (Minutes)</p>
    <p>Results</p>
    <p>Conventional (TRIM off) Conventional</p>
    <p>(TRIM on)</p>
    <p>Multi-App</p>
  </div>
  <div class="page">
    <p>Cassandras GC overheads</p>
    <p>Multi-Log (System data vs. Commit-Log vs. Flushed data)</p>
    <p>Time (Minutes)</p>
    <p>Results</p>
    <p>V a li d p</p>
    <p>a g e c</p>
    <p>o p ie</p>
    <p>d (</p>
    <p>o p s /s</p>
    <p>e c )</p>
    <p>Time (Minutes)</p>
    <p>Conventional (TRIM off) Conventional</p>
    <p>(TRIM on)</p>
    <p>Multi-App</p>
    <p>Multi-Log</p>
  </div>
  <div class="page">
    <p>V a li d p</p>
    <p>a g e c</p>
    <p>o p ie</p>
    <p>d (</p>
    <p>o p s /s</p>
    <p>e c )</p>
    <p>Time (Minutes)</p>
    <p>Cassandras GC overheads</p>
    <p>Multi-Data (System data vs. Commit-Log vs. Flushed data vs. Compaction data)</p>
    <p>Time (Minutes)</p>
    <p>Results</p>
    <p>The throughput is very well correlated with GC overheads</p>
    <p>Conventional (TRIM off) Conventional</p>
    <p>(TRIM on)</p>
    <p>Multi-App</p>
    <p>Multi-Log Multi-Data</p>
  </div>
  <div class="page">
    <p>C u</p>
    <p>m u</p>
    <p>la te</p>
    <p>d d</p>
    <p>is tr</p>
    <p>ib u</p>
    <p>ti o</p>
    <p>n (</p>
    <p>% )</p>
    <p>Latency (us)</p>
    <p>C u</p>
    <p>m u</p>
    <p>la te</p>
    <p>d d</p>
    <p>is tr</p>
    <p>ib u</p>
    <p>ti o</p>
    <p>n (</p>
    <p>% )</p>
    <p>Latency (us)</p>
    <p>Cassandras cumulated latency distribution</p>
    <p>Multi-streaming improves write latency</p>
    <p>At 99.9%, Multi-Data lowers the latency by 54 % compared to Normal</p>
    <p>Result #3</p>
    <p>Conventional (TRIM on)</p>
    <p>Multi-App</p>
    <p>Multi-Log</p>
    <p>Multi-Data</p>
  </div>
  <div class="page">
    <p>Multi-streamed SSD</p>
    <p>Mapping application and system data with different lifetimes to SSD streams</p>
    <p>Higher GC efficiency, lower latency</p>
    <p>Multi-streaming can be supported on a state-of-the-art SSD and co-exist with the traditional block interface</p>
    <p>Multi-stream interface can be standard for using SSD more efficiently</p>
    <p>Conclusion</p>
    <p>Host</p>
    <p>Multi-stream enhanced</p>
    <p>Block Layer</p>
    <p>SSD</p>
    <p>NAND Flash memory</p>
    <p>FTL</p>
  </div>
  <div class="page"/>
</Presentation>
