<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On Fault Tolerance, Locality, and Optimality in Locally Repairable Codes</p>
    <p>Oleg Kolosov1, Itzhak Tamo1, Gala Yadgar2, Matan Liram2, Alexander Barg3</p>
    <p>Tel Aviv University1, Technion2, University Of Maryland3</p>
  </div>
  <div class="page">
    <p>Availability with Reed-Solomon</p>
    <p>D D D D P</p>
    <p>! data blocks &quot;  !</p>
    <p>parity blocks</p>
    <p>stripe</p>
    <p>D PD</p>
    <p>An (&quot;,!) erasure code with ! data blocks</p>
    <p>Low overhead Can recover from at most &quot;  ! failures  minimal redundancy (MDS) Required reading ! blocks for lost block recovery</p>
  </div>
  <div class="page">
    <p>Locally Repairable Codes (LRC)</p>
    <p>P</p>
    <p>D PD D D PD D</p>
    <p>P Local parity</p>
    <p>Non-MDS (non-optimal overhead)</p>
    <p>Fast recovery (good for degraded read)</p>
    <p>Global parity</p>
    <p>Huang et al. 2012 Huang et al. 2013 Sathiamoorthy et al. 2013</p>
    <p>Locality</p>
    <p>! = 3</p>
    <p>Distance Minimum #failures that cause data loss</p>
    <p>$ = 4 ('() !*'+,*! -!+. 3 -(/01!*2)</p>
    <p>),5,! LRC  10,6,3 Azure-LRC</p>
    <p>Local group</p>
  </div>
  <div class="page">
    <p>Node failure and reconstruction</p>
    <p>Non-MDS (non-optimal overhead) Fast recovery Slow recovery of global parity</p>
    <p>P</p>
    <p>PD D D PD D</p>
    <p>P</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>Recovery of global parity blocks</p>
    <p>Optimal-LRC Full-LRC (vs. data-LRC) [also information-symbol locality vs. all-symbol locality]</p>
    <p>Optimal ! for a variety of combinations (but not for all)</p>
    <p>Tamo and Barg, 2014</p>
    <p>Optimal minimum distance (full-LRC)</p>
    <p>&quot; = $  &amp;  ( ) + 2 Gopalan et al. 2012</p>
    <p>P</p>
    <p>D D D PD DD</p>
    <p>P</p>
    <p>P</p>
    <p>(10,6,4) Optimal-LRC</p>
  </div>
  <div class="page">
    <p>Which one is better?</p>
    <p>P</p>
    <p>PD D D PD D</p>
    <p>P</p>
    <p>D</p>
    <p>Overhead = 1.66 Locality = 4 Distance = 4</p>
    <p>Overhead = 1.83 Locality = 3 Distance = 4Overhead = 1.66</p>
    <p>Locality = 3 Distance = 4</p>
    <p>There is no mathematical framework for comparison of existing LRC approaches  Whats optimal in practice?</p>
  </div>
  <div class="page">
    <p>Goals and methodology</p>
    <p>Goal: Lay mathematical basis for comparison</p>
    <p>Define parameters for comparison  Compare codes in all sets of configurations  extend LRCs  Compare for 9  # 19 and overhead  2  Validate in a real system</p>
  </div>
  <div class="page">
    <p>Measuring repair costs Previously:</p>
    <p>Doesnt address overhead</p>
    <p>Overhead: +16.6% ARC: -24.1% NRC: -16.6% DC: 0%</p>
    <p>Normalized repair cost (NRC) = ARC X Overhead =</p>
    <p>&quot;#$% &amp;'()(+&quot;)</p>
    <p>Degraded cost (DC) = &quot;#$. &amp;'()(+&quot;)</p>
    <p>Useful for degraded read</p>
    <p>Average repair cost (ARC) = = &quot;#$% &amp;'()(+&quot;)</p>
    <p>/</p>
    <p>Our contribution:</p>
  </div>
  <div class="page">
    <p>Our LRC extensions</p>
    <p>Azure-LRC+1  Full-LRC extension of Azure-LRC</p>
    <p>Azure-LRC  Removed division constraints</p>
    <p>Optimal-LRC  New construction  Achieves optimal !</p>
    <p>Xorbas  A trivial extension</p>
  </div>
  <div class="page">
    <p>Which construction is best for my system?</p>
    <p>NRC and Degraded cost</p>
    <p>ARC</p>
  </div>
  <div class="page">
    <p>Want to maximize ! and minimize NRC New metric #$% ! (rd-ratio)</p>
    <p>Optimal-LRC is best for fixed (',))</p>
    <p>Durability &amp; repair cost</p>
  </div>
  <div class="page">
    <p>System level evaluation setup Goals:  Validate NRC accuracy  Evaluate NRC abilities of estimation  Compare LRCs</p>
    <p>Platform:  Ceph  a distributed open-source object-based storage system  Amazon EC2</p>
    <p>Methods:  Utilize Ceph LRC plugin for Azure-LRC  Implement Optimal-LRC  Simulate failure and measure</p>
  </div>
  <div class="page">
    <p>Predicting repair time?</p>
    <p>NRC cant predict accurately  but it can predict a trend  Overall, full-LRCs outperform data-LRC</p>
    <p>Also validated on(in the paper):  Various storage types  Various network architectures  Application workloads</p>
  </div>
  <div class="page">
    <p>Summary  First systematic comparison of LRCs</p>
    <p>o Defined theoretical framework for comparison of LRCs o Validated on a real system</p>
    <p>Generalized known LRC codes</p>
    <p>ARC is limited  we introduced NRC  There is no one optimal code (theory vs. practice)  Optimize repair cost  optimize degraded cost</p>
    <p>Our Ceph implementation can be found here: https://github.com/olekol33/optlrc2018/blob/master/src/erasure-code/optlrc</p>
    <p>Conclusions</p>
    <p>Thank you</p>
  </div>
</Presentation>
