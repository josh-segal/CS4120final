<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2014 VMware Inc. All rights reserved.</p>
    <p>Optimizing the TLB Shootdown Algorithm with Page Access Tracking Nadav Amit  VMware Research Group</p>
  </div>
  <div class="page">
    <p>Virtual Address</p>
    <p>Translation Lookaside Buffer (TLB)</p>
    <p>TLB = cache for virtual to physical address translations</p>
    <p>VAPA PGD PUD</p>
    <p>PMD PTE</p>
    <p>TLBPage-Tables</p>
  </div>
  <div class="page">
    <p>TLB Coherency</p>
    <p>Hardware does not maintain TLBs coherent  The problem is left for software (OS)</p>
    <p>CONFIDENTIAL 3</p>
    <p>TLB incoherent</p>
    <p>PTEs TLB</p>
    <p>VAPA VAPA VAPA</p>
    <p>incoherent</p>
  </div>
  <div class="page">
    <p>Local TLB Flushes and Remote TLB Shootdowns</p>
    <p>TLBPTEs TLB</p>
    <p>OS</p>
    <p>local flush</p>
    <p>local flush</p>
    <p>OS IPI</p>
    <p>PTE change</p>
    <p>TLB shootdown</p>
    <p>Done</p>
  </div>
  <div class="page">
    <p>When do TLB Flushes Occur?  Application initiated</p>
    <p>munmap()  Copy-on-write  msync()  mprotect()  madvise()  migrate_pages()</p>
    <p>OS initiated  NUMA migrations  Memory compaction  Memory deduplication  Memory reclamation  Memory balloon  Background dirty-pages</p>
    <p>flush</p>
    <p>Faster storage  TLB overheads are more apparent</p>
  </div>
  <div class="page">
    <p>Existing Solutions  Hardware [Teller90, Villavieja11, Li13]</p>
    <p>Software (commodity OSes) Batching [Uhlig05] Limit flushes to cores that use the address-space Trade-off between full and individual PTE flushes</p>
    <p>Software (academic) Explicit software control [Boyd-Wickizer10, Tene11] Replicated paging hierarchy [Clements13, Gerofi13]</p>
  </div>
  <div class="page">
    <p>Replicated Paging Hierarchy [Clements13, Gerofi13]</p>
    <p>Page-fault on each CPU that accesses a PTE  Memory overheads  Runtime overheads: managing multiple tables</p>
    <p>CONFIDENTIAL 7</p>
    <p>PGD PUD PMD</p>
    <p>PTE</p>
    <p>Page-Tables</p>
    <p>PGD PUD PMD</p>
    <p>PTE</p>
    <p>Page-Tables</p>
    <p>P=1 P=0page fault</p>
  </div>
  <div class="page">
    <p>Insight: Use PTE Access-Bit</p>
    <p>Set by hardware, cleared by software</p>
    <p>Used for OS memory reclamation decisions  Set when a page is accessed  These flags are provided ... to manage the transfer of pages</p>
    <p>into and out of physical memory. (Intel SDM)</p>
    <p>Insight: can be used for TLB invalidation decisions  Set when a PTE is cached  Whenever the processor uses a PTE as part of address</p>
    <p>translation, it sets the accessed flag (Intel SDM) 8</p>
    <p>page frame numberPTE: A permissions</p>
  </div>
  <div class="page">
    <p>Our System  Flush decisions based on PTE access-bit</p>
    <p>Software solution (x86)  Exploiting the full potential requires simple hardware changes</p>
    <p>Prevent common unnecessary TLB shootdowns  Long-lived idle mappings  Short-lived private mappings</p>
    <p>Some false positives  Unnecessary flushes</p>
  </div>
  <div class="page">
    <p>advance clock pointer</p>
    <p>PTE.A</p>
    <p>replace page</p>
    <p>Set</p>
    <p>Clear</p>
    <p>test and clear A-bit</p>
    <p>dirty bit</p>
    <p>schedule page for cleaning</p>
    <p>TLB flush (up to 9us)</p>
    <p>Long-Lived Idle Mappings</p>
    <p>Clear</p>
    <p>Set</p>
    <p>TLB flush (up to 9us)</p>
    <p>CLOCK Algorithm [Carr and Henessy 81]</p>
  </div>
  <div class="page">
    <p>Avoiding Flush of Long Lived Idle PTEs</p>
    <p>PTE not</p>
    <p>cached</p>
    <p>time</p>
    <p>all cores perform full TLB flush</p>
    <p>A bit</p>
    <p>test and clear A-bit</p>
    <p>advance clock pointer</p>
    <p>Set</p>
    <p>A bit</p>
    <p>test and clear A-bit</p>
    <p>advance clock pointer</p>
    <p>Clear</p>
  </div>
  <div class="page">
    <p>TLB Version Tracking (1)</p>
    <p>Address Space</p>
    <p>version #</p>
    <p>version CPU bitmap</p>
    <p>SPTE</p>
    <p>version #</p>
    <p>full TLB flush (CPU1)</p>
    <p>clear A-bit</p>
    <p>clear bit</p>
    <p>PTE</p>
    <p>A-bit</p>
  </div>
  <div class="page">
    <p>TLB Version Tracking (2)</p>
    <p>Address Space</p>
    <p>version #</p>
    <p>version CPU bitmap</p>
    <p>SPTE</p>
    <p>version #</p>
    <p>reset</p>
    <p>PTE</p>
    <p>A-bit</p>
  </div>
  <div class="page">
    <p>TLB Version Tracking (3)</p>
    <p>Address Space</p>
    <p>version #</p>
    <p>version CPU bitmap</p>
    <p>SPTE</p>
    <p>version #</p>
    <p>PTE</p>
    <p>A-bit</p>
    <p>PTE unmap and flush:</p>
    <p>If PTE.A == 0 and SPTE.ver + 1 &lt; AS.ver</p>
    <p>Then avoid TLB flush</p>
  </div>
  <div class="page">
    <p>Short Lived Private Mappings</p>
    <p>time</p>
    <p>mmap()</p>
    <p>local flush</p>
    <p>read access mumap()</p>
    <p>page-fault  PTE set</p>
    <p>PTE cleared TLB flush</p>
    <p>usually same core</p>
    <p>insert PTE to TLB with PTE.A=0</p>
    <p>PTE.A==0?</p>
  </div>
  <div class="page">
    <p>Evaluations  Prototype based on Linux 4.5</p>
    <p>Baseline configured to avoid shootdown cost  Linux version that uses TLB flushes batching  Using efficient multicast IPI delivery</p>
    <p>48-cores, 2-socket server</p>
    <p>Our system denoted as ABIS: Access-Based Invalidation System</p>
  </div>
  <div class="page">
    <p>Apache TLB Shootdowns (Short-Lived Private Mappings)</p>
    <p>s e n t s h o o td</p>
    <p>o w</p>
    <p>n s [ th</p>
    <p>o u s a n d s /s</p>
    <p>e c ]</p>
    <p>re c e iv</p>
    <p>e d s</p>
    <p>h o o td</p>
    <p>o w</p>
    <p>n s [ th</p>
    <p>o u s a n d s /s</p>
    <p>e c ]</p>
    <p>cores [#]</p>
    <p>baseline - send ABIS - send baseline - receive ABIS - receive</p>
  </div>
  <div class="page">
    <p>Apache Performance</p>
    <p>re qu</p>
    <p>es ts</p>
    <p>/s ec</p>
    <p>[t ho</p>
    <p>us an</p>
    <p>ds ]</p>
    <p>sp ee</p>
    <p>du p</p>
    <p>cores [#]</p>
    <p>baseline ABIS speedup</p>
  </div>
  <div class="page">
    <p>PBZIP2  TLB shootdowns (Long-Lived Idle Mappings)</p>
    <p>nt s</p>
    <p>ho ot</p>
    <p>do w</p>
    <p>ns [t</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>/s ec</p>
    <p>]</p>
    <p>re ce</p>
    <p>iv ed</p>
    <p>s ho</p>
    <p>ot do</p>
    <p>w ns</p>
    <p>[t ho</p>
    <p>us an</p>
    <p>ds /s</p>
    <p>ec ]</p>
    <p>threads [#]</p>
    <p>baseline - send ABIS - send baseline - receive ABIS - receive</p>
  </div>
  <div class="page">
    <p>PBZIP2 Performance</p>
    <p>nt im</p>
    <p>e [s</p>
    <p>ec on</p>
    <p>ds ]</p>
    <p>sp ee</p>
    <p>du p</p>
    <p>threads [#]</p>
    <p>baseline ABIS</p>
    <p>speedup</p>
  </div>
  <div class="page">
    <p>Microbenchmarks: VMScale</p>
    <p>ig ra</p>
    <p>te</p>
    <p>co w</p>
    <p>-s eq</p>
    <p>-m t</p>
    <p>co w</p>
    <p>-r an</p>
    <p>dm</p>
    <p>t</p>
    <p>m m</p>
    <p>ap -r</p>
    <p>ea d</p>
    <p>m sy</p>
    <p>nc -m</p>
    <p>t</p>
    <p>an on</p>
    <p>-r -s</p>
    <p>eq</p>
    <p>no rm</p>
    <p>al iz</p>
    <p>ed ru</p>
    <p>nt im</p>
    <p>e</p>
    <p>no rm</p>
    <p>al iz</p>
    <p>ed T</p>
    <p>LB s</p>
    <p>ho ot</p>
    <p>do w</p>
    <p>ns</p>
    <p>ig ra</p>
    <p>te</p>
    <p>co w</p>
    <p>-s eq</p>
    <p>-m t</p>
    <p>co w</p>
    <p>-r an</p>
    <p>dm</p>
    <p>t</p>
    <p>m m</p>
    <p>ap -r</p>
    <p>ea d</p>
    <p>m sy</p>
    <p>nc -m</p>
    <p>t</p>
    <p>an on</p>
    <p>-r -s</p>
    <p>eq</p>
    <p>no rm</p>
    <p>al iz</p>
    <p>ed ru</p>
    <p>nt im</p>
    <p>e</p>
    <p>no rm</p>
    <p>al iz</p>
    <p>ed T</p>
    <p>LB s</p>
    <p>ho ot</p>
    <p>do w</p>
    <p>ns</p>
  </div>
  <div class="page">
    <p>Conclusions  Access-bit tracking can often prevent most TLB</p>
    <p>shootdowns:  Long-lived idle PTEs  Short-lived private PTEs</p>
    <p>Exploit memory coherency to check if TLB is cached</p>
    <p>CPUs should allow more control over the TLB  Insertion of PTEs directly to the TLB</p>
  </div>
</Presentation>
