<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BUFFALO: Bloom Filter Forwarding Architecture for Large Organizations</p>
    <p>Minlan Yu Princeton University</p>
    <p>minlanyu@cs.princeton.edu Joint work with Alex Fabrikant, Jennifer Rexford</p>
    <p>CoNEXT09</p>
  </div>
  <div class="page">
    <p>Large-scale SPAF Networks  Large network using flat addresses</p>
    <p>Simple for configuration and management  Useful for enterprise and data center networks</p>
    <p>SPAF:Shortest Path on Addresses that are Flat  Flat addresses (e.g., MAC addresses)  Shortest path routing (link state, distance vector)</p>
    <p>S H</p>
    <p>S</p>
    <p>S</p>
    <p>S</p>
    <p>S</p>
    <p>S S</p>
    <p>S S</p>
    <p>S S S</p>
    <p>S</p>
    <p>H</p>
    <p>H</p>
    <p>H</p>
    <p>H</p>
    <p>H H</p>
    <p>H</p>
    <p>H</p>
  </div>
  <div class="page">
    <p>Scalability Challenges</p>
    <p>Recent advances in control plane  E.g., TRILL, SEATTLE  Topology and host information dissemination  Route computation</p>
    <p>Data plane remains a challenge  Forwarding table growth (in # of hosts and switches)  Increasing link speed</p>
  </div>
  <div class="page">
    <p>State of the Art</p>
    <p>Hash table in SRAM to store forwarding table  Map MAC addresses to next hop  Hash collisions: extra delay</p>
    <p>Overprovision to avoid running out of memory  Perform poorly when out of memory  Difficult and expensive to upgrade memory</p>
    <p>aa:11:22:33:44:77</p>
  </div>
  <div class="page">
    <p>Bloom Filters  Bloom filters in fast memory (SRAM)</p>
    <p>A compact data structure for a set of elements  Calculate s hash functions to store element x  Easy to check membership  Reduce memory at the expense of false positives</p>
    <p>h1(x) h2(x) hs(x) 01000 10100 00010</p>
    <p>x</p>
    <p>V0 Vm-1</p>
    <p>h3(x)</p>
  </div>
  <div class="page">
    <p>One Bloom filter (BF) per next hop  Store all addresses forwarded to that next hop</p>
    <p>Nexthop 1</p>
    <p>Nexthop 2</p>
    <p>Nexthop T</p>
    <p>Packet destination</p>
    <p>query</p>
    <p>Bloom Filters</p>
    <p>hit</p>
    <p>BUFFALO: Bloom Filter Forwarding</p>
  </div>
  <div class="page">
    <p>BUFFALO Challenges</p>
  </div>
  <div class="page">
    <p>BUFFALO Challenges</p>
  </div>
  <div class="page">
    <p>Optimize Memory Usage  Consider fixed forwarding table  Goal: Minimize overall false-positive rate</p>
    <p>Probability one or more BFs have a false positive</p>
    <p>Input:  Fast memory size M  Number of destinations per next hop  The maximum number of hash functions</p>
    <p>Output: the size of each Bloom filter  Larger BF for next-hops with more destinations</p>
  </div>
  <div class="page">
    <p>Constraints and Solution</p>
    <p>Constraints  Memory constraint</p>
    <p>Sum of all BF sizes fast memory size M</p>
    <p>Bound on number of hash functions  To bound CPU calculation time  Bloom filters share the same hash functions</p>
    <p>Proved to be a convex optimization problem  An optimal solution exists  Solved by IPOPT (Interior Point OPTimizer)</p>
  </div>
  <div class="page">
    <p>Forwarding table with 200K entries, 10 next hop  8 hash functions  Optimization runs in about 50 msec</p>
    <p>Minimize False Positives</p>
  </div>
  <div class="page">
    <p>Comparing with Hash Table</p>
    <p>Save 65% memory with 0.1% false positives</p>
    <p>More benefits over hash table  Performance degrades gracefully as tables grow  Handle worst-case workloads well</p>
  </div>
  <div class="page">
    <p>BUFFALO Challenges</p>
  </div>
  <div class="page">
    <p>False Positive Detection</p>
    <p>Multiple matches in the Bloom filters  One of the matches is correct  The others are caused by false positives</p>
    <p>Nexthop 1</p>
    <p>Nexthop 2</p>
    <p>Nexthop T</p>
    <p>Packet destination</p>
    <p>query</p>
    <p>Bloom Filters Multiple hits</p>
  </div>
  <div class="page">
    <p>Handle False Positives  Design goals</p>
    <p>Should not modify the packet  Never go to slow memory  Ensure timely packet delivery</p>
    <p>BUFFALO solutions  Exclude incoming interface</p>
    <p>Avoid loops in one false positive case</p>
    <p>Random selection from matching next hops  Guarantee reachability with multiple false positives</p>
  </div>
  <div class="page">
    <p>One False Positive  Most common case: one false positive</p>
    <p>When there are multiple matching next hops  Avoid sending to incoming interface</p>
    <p>Provably at most a two-hop loop  Stretch &lt;= Latency(AB)+Latency(BA)</p>
    <p>False positive</p>
    <p>AA</p>
    <p>Shortes t path</p>
    <p>BB</p>
    <p>dst</p>
  </div>
  <div class="page">
    <p>Multiple False Positives  Handle multiple false positives</p>
    <p>Random selection from matching next hops  Random walk on shortest path tree plus a few</p>
    <p>false positive links  To eventually find out a way to the destination</p>
    <p>dstdst</p>
    <p>Shortest path tree for dst</p>
    <p>False positive link</p>
  </div>
  <div class="page">
    <p>Stretch Bound</p>
    <p>Provable expected stretch bound  With k false positives, proved to be at most  Proved by random walk theories</p>
    <p>However, stretch bound is actually not bad  False positives are independent  Probability of k false positives drops exponentially</p>
    <p>Tighter bounds in special topologies  For tree, expected stretch is polynomial in k</p>
    <p>(3k / 3 )</p>
  </div>
  <div class="page">
    <p>Stretch in Campus Network</p>
    <p>When fp=0.001% 99.9% of the packets have</p>
    <p>no stretch</p>
    <p>When fp=0.001% 99.9% of the packets have</p>
    <p>no stretch 0.0003% packets have a stretch of shortest path</p>
    <p>length</p>
    <p>length</p>
    <p>When fp=0.5%, 0.0002% packets have a stretch 6 times of shortest path</p>
    <p>length</p>
    <p>When fp=0.5%, 0.0002% packets have a stretch 6 times of shortest path</p>
    <p>length</p>
  </div>
  <div class="page">
    <p>BUFFALO Challenges</p>
  </div>
  <div class="page">
    <p>Problem of Bloom Filters</p>
    <p>Routing changes  Add/delete entries in BFs</p>
    <p>Problem of Bloom Filters (BF)  Do not allow deleting an element</p>
    <p>Counting Bloom Filters (CBF)  Use a counter instead of a bit in the array  CBFs can handle adding/deleting elements  But, require more memory than BFs</p>
  </div>
  <div class="page">
    <p>Update on Routing Change</p>
    <p>Use CBF in slow memory  Assist BF to handle forwarding-table updates  Easy to add/delete a forwarding-table entry</p>
    <p>CBF in slow memory</p>
    <p>BF in fast memory</p>
    <p>Delete a route</p>
  </div>
  <div class="page">
    <p>Occasionally Resize BF  Under significant routing changes</p>
    <p># of addresses in BFs changes significantly  Re-optimize BF sizes</p>
    <p>Use CBF to assist resizing BF  Large CBF and small BF  Easy to expand BF size by contracting CBF</p>
    <p>Hard to expand to size 4</p>
    <p>CBF BF</p>
    <p>Easy to contract CBF to size 4</p>
  </div>
  <div class="page">
    <p>BUFFALO Switch Architecture</p>
    <p>Prototype implemented in kernel-level Click</p>
  </div>
  <div class="page">
    <p>Prototype Evaluation</p>
    <p>Environment  3.0 GHz 64-bit Intel Xeon  2 MB L2 data cache, used as fast memory size M</p>
    <p>Forwarding table  10 next hops  200K entries</p>
  </div>
  <div class="page">
    <p>Evaluation Results</p>
    <p>Peak forwarding rate  365 Kpps, 1.9 s per packet  10% faster than hash-based EtherSwitch</p>
    <p>Performance with FIB updates  10.7 s to update a route  0.47 s to reconstruct BFs based on CBFs</p>
    <p>On another core without disrupting packet lookup  Swapping in new BFs is fast</p>
  </div>
  <div class="page">
    <p>Conclusion  Three properties of BUFFALO</p>
    <p>Small, bounded memory requirement  Gracefully increase stretch with the growth of forwarding table  Fast reaction to routing updates</p>
    <p>Key design decisions  One Bloom filter per next hop  Optimizing of Bloom filter sizes  Preventing forwarding loops  Dynamic updates using counting Bloom filters</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Questions?</p>
  </div>
</Presentation>
