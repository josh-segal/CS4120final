<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Stout An Adaptive Interface to Scalable Cloud Storage</p>
    <p>John C. McCullough John Dunagan</p>
    <p>Alec Wolman Alex C. Snoeren</p>
    <p>UC San Diego</p>
    <p>Microsoft Research</p>
    <p>June 23, 2010</p>
    <p>SEALS &amp; NOMENCLATURE</p>
    <p>Can I use the UCSD Seal and the UCSD logo together on publications? Th e se al a n d UCSD lo g o (se e sectio n xx) sh o uld n o t b e use d o n t h e sa m e visu al f ield , a n d sh o uld b e re pro d uce d w it h o u t alt era tio n or m o dif ica tio n .</p>
    <p>UC a n d UCSD Se als</p>
    <p>Explanation of C orrect Usage</p>
    <p>UCSD SEAL This t ext are a is f or expla n a tio n o f o f f icial p olicies rela tin g t o t h e p a g es su bject m a t t er. A s w ell as</p>
    <p>LETTERHEAD This t ext are a is f or expla n a tio n o f o f f icial p olicies rela tin g t o t h e p a g es su bject m a t t er. A s w ell as</p>
    <p>POLICY FAQs</p>
    <p>APPLICATIO NS Th e UCSD se al is use d in a varie ty o f a p plica tio ns: o n UCSD b usin ess cards (se e SECTI O N xx o f t h e g uid elin es); certif ica t es; co m m e nce m e n t a n d eve n ts pro gra ms; p u blica tio n a n d re p ort covers; m erch a n dise a p prove d f or sale by t h e u niversity; co m m e m ora tive pla q u es a n d gif ts; a n d a w id e ra n g e o f im prin t e d pro d ucts a n d colla t eral.</p>
    <p>USE Th e se al a n d UCSD lo g o (se e sectio n xx) sh o uld n o t b e use d o n t h e sa m e visu al f ield , a n d sh o uld b e re pro d uce d w it h o u t alt era tio n or m o dif ica tio n .</p>
    <p>ARTW ORK Co pies o f UCSD se al art w orkin electro nic or ca m era-re a dy f orma n d g uid a nce o n its use , ca n b e o b t ain e d by co n t actin g t h e Pu blica tio ns O f f ice (e m ail, p h o n e).</p>
    <p>CO NTACT F or m ore in f orm a tio n a b o u t use o f t h e UCSD se al, a n d its a p plica tio n , co n t act t h e Pu blica tio ns O f f ice (e m ail a d dress a n d p h o n e).</p>
    <p>In a d ditio n , re f ere nce A p p e n dix A , p a g e xxxxxxxxxxxxx. Q u estio ns re g ardin g UCSD se al use o n m erch a n dise sh o uld b e direct e d t o xxxxxx a t t h e UCSD Bo o kst ore (e m ail, p h o n e).</p>
    <p>CO MPO NENTS OF THE LO G O Th e UCSD lo g o is m a d e o f t w o co m p o n e n ts: (1) t h e lo g o w hich is t h e gra p hic ele m e n t re prese n tin g t h e G eisel Library; (2) t h e lo g o typ e w hich w as cust o m d esig n e d usin g t h e Ro tis f o n t as a b asis. To g e t h er t h ey are re f erre d t o as t h e UCSD Sig n a t ure .</p>
    <p>THE UCSD LO G O w as in tro d uce d t o t h e ca m p us in Ja n u ary 1997 a n d is a n o f f icially reco g niz e d sym b ol o f t h e U niversity o f Calif ornia , Sa n Die g o ca m p us. It d e picts a gra p hic re prese n t a tio n o f G eisel Library a n d re places t h e previo us &quot; UCSD &quot; acro nym lo g o , ye t is n o t in t e n d e d t o re place t h e o f f icial or u n o f f icial U niversity o f Calif ornia or UCSD se als. Th e UCSD lo g o a n d t h e UC or UCSD se als sh o uld n o t b e use d , h o w ever, o n t h e sa m e visu al f ield or p a g e .</p>
    <p>Printing: O n e color: Blu e .</p>
    <p>LOGO &amp; NOMENCLATURE UCSD Sig n a t ure</p>
    <p>Introduction and C omponents</p>
    <p>* PL A CEH O LDER F or a d ditio n al in f orm a tio n re g ardin g t h e use o f t h e u niversity n a m e , ple ase re f ere nce p olicy PP M 510-10,  Pro p ose d Use o f t h e U niversity N a m e a n d Se al,  (A p p e n dix A a n d g uid elin es fro m t h e u niversity co u nsel a t UCSD , A p p e n dix B.)</p>
    <p>? PL A CEH O LDER F or q u estio ns re g ardin g t h e use o f t h e u niversitys n a m e in corresp o n d e nce a n d p u blica tio ns co n t act xxxxxxxxx.</p>
    <p>? PL A CEH O LDER Q u estio ns re g ardin g t h e use o f t h e u niversitys n a m e o n t h e W orld W id e W e b , sh o uld b e direct e d t o xxxxxxxxx.</p>
    <p>POLICY FAQs</p>
    <p>Sig n a t ure</p>
    <p>Lo g o typ eLo g o</p>
    <p>NE X TBAC K</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store</p>
    <p>... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store</p>
    <p>... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Scalable Multi-tiered Services</p>
    <p>www app store</p>
    <p>www</p>
    <p>www</p>
    <p>app</p>
    <p>app</p>
    <p>store</p>
    <p>store</p>
    <p>client</p>
    <p>S p</p>
    <p>re a d</p>
    <p>sh e e t</p>
    <p>www app</p>
    <p>app</p>
    <p>store... ...</p>
    <p>storeappwww</p>
    <p>O th</p>
    <p>e r</p>
    <p>A p</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Key-Value Storage</p>
    <p>app store</p>
    <p>Simple interface  read(key)  value  write(key, value)</p>
    <p>Natural to send requests right away</p>
    <p>Block for response to survive failures  Performance characteristics:</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
    <p>S a tu</p>
    <p>ra ti</p>
    <p>o n</p>
  </div>
  <div class="page">
    <p>Key-Value Storage</p>
    <p>app store</p>
    <p>Simple interface  read(key)  value  write(key, value)</p>
    <p>Natural to send requests right away  Block for response to survive failures</p>
    <p>Performance characteristics:</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
    <p>S a tu</p>
    <p>ra ti</p>
    <p>o n</p>
  </div>
  <div class="page">
    <p>Key-Value Storage</p>
    <p>app store</p>
    <p>Simple interface  read(key)  value  write(key, value)</p>
    <p>Natural to send requests right away  Block for response to survive failures  Performance characteristics:</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
    <p>S a tu</p>
    <p>ra ti</p>
    <p>o n</p>
  </div>
  <div class="page">
    <p>Key-Value Storage</p>
    <p>app store</p>
    <p>Simple interface  read(key)  value  write(key, value)</p>
    <p>Natural to send requests right away  Block for response to survive failures  Performance characteristics:</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
    <p>S a tu</p>
    <p>ra ti</p>
    <p>o n</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Improving Performance Under Load</p>
    <p>app store</p>
    <p>Application server handles requests for many clients</p>
    <p>Storage request overheads  Networking delay  Protocol-processing  Disk seeks  etc.</p>
    <p>Batch to amortize overheads</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval</p>
    <p>Latency/throughput tradeoff  Want flexible batching interval</p>
    <p>Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval</p>
    <p>Latency/throughput tradeoff  Want flexible batching interval</p>
    <p>Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval  Latency/throughput tradeoff</p>
    <p>Want flexible batching interval  Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s)</p>
    <p>L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval  Latency/throughput tradeoff</p>
    <p>Want flexible batching interval  Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s) L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval  Latency/throughput tradeoff</p>
    <p>Want flexible batching interval  Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s) L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval  Latency/throughput tradeoff</p>
    <p>Want flexible batching interval  Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s) L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Selecting a Batching Interval</p>
    <p>Most apps use a fixed batching interval  Latency/throughput tradeoff  Want flexible batching interval</p>
    <p>Short when lightly loaded  Long when heavily loaded</p>
    <p>short interval long</p>
    <p>better latency better throughput</p>
    <p>Load (requests/s) L a te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Solution: Stout</p>
    <p>www app1</p>
    <p>S to</p>
    <p>u t</p>
    <p>www app2</p>
    <p>S to</p>
    <p>u t</p>
    <p>store</p>
    <p>store</p>
    <p>store</p>
    <p>Stout is a storage interposition library  Our contribution is a technique for</p>
    <p>independently adjusting the batching interval</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req):</p>
    <p>key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req)</p>
    <p>Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req)</p>
    <p>PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key)</p>
    <p>reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key)</p>
    <p>reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req)</p>
    <p>SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) PersistState(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) MarkDirty(key) reply = MakeReply(req) SendReply(reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) MarkDirty(key) reply = MakeReply(req) SafeReply(key,reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) MarkDirty(key) reply = MakeReply(req) SafeReply(key,reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Overlapped Request Processing</p>
    <p>www app store</p>
    <p>S to</p>
    <p>u t</p>
    <p>ProcessRequest (req): key = Parse(req) Process(key,req) MarkDirty(key) reply = MakeReply(req) SafeReply(key,reply)</p>
    <p>BatchingLoop : keys = DirtyKeys() replies = Depends(keys) AsyncWrite(keys, replies) Sleep(interval)</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state</p>
    <p>Potential async: Inconsistency on failure  Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5 interval</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5 interval</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure</p>
    <p>Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Potential Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure  Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Stout Async</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure  Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Stout Async</p>
    <p>app store</p>
    <p>x=5 interval</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure  Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Stout Async</p>
    <p>app store</p>
    <p>x=5 interval</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Staying Safe: Consistency</p>
    <p>Dont reveal uncomitted state  Potential async: Inconsistency on failure  Stout provides serialized update semantics</p>
    <p>Synchronous</p>
    <p>app store</p>
    <p>x=5</p>
    <p>Stout Async</p>
    <p>app store</p>
    <p>x=5 interval</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Benefit: Write Collapsing</p>
    <p>Batched commits enable further optimization  Can write most recent version only  Reduces load at the store</p>
    <p>x=5</p>
    <p>x=6</p>
    <p>x=7 x=7</p>
  </div>
  <div class="page">
    <p>Benefit: Write Collapsing</p>
    <p>Batched commits enable further optimization  Can write most recent version only  Reduces load at the store</p>
    <p>x=5</p>
    <p>x=6</p>
    <p>x=7 x=7</p>
  </div>
  <div class="page">
    <p>Benefit: Write Collapsing</p>
    <p>Batched commits enable further optimization  Can write most recent version only  Reduces load at the store</p>
    <p>x=5</p>
    <p>x=6</p>
    <p>x=7 x=7</p>
  </div>
  <div class="page">
    <p>Benefit: Write Collapsing</p>
    <p>Batched commits enable further optimization  Can write most recent version only  Reduces load at the store</p>
    <p>x=5</p>
    <p>x=6</p>
    <p>x=7</p>
    <p>x=7</p>
  </div>
  <div class="page">
    <p>Benefit: Write Collapsing</p>
    <p>Batched commits enable further optimization  Can write most recent version only  Reduces load at the store</p>
    <p>x=5</p>
    <p>x=6</p>
    <p>x=7</p>
    <p>x=7</p>
  </div>
  <div class="page">
    <p>Benefit: Write Collapsing</p>
    <p>Batched commits enable further optimization  Can write most recent version only  Reduces load at the store</p>
    <p>x=5</p>
    <p>x=6</p>
    <p>x=7 x=7</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Adapting to Shared Storage  Storage system is a shared medium  Independently reach efficient fair share  Delay as congestion indicator</p>
    <p>Rather than modifying storage for explicit notification</p>
    <p>app store</p>
    <p>store</p>
    <p>store</p>
    <p>app</p>
    <p>app</p>
    <p>S to</p>
    <p>u t</p>
    <p>S to</p>
    <p>u t</p>
    <p>S to</p>
    <p>u t</p>
    <p>Queue</p>
  </div>
  <div class="page">
    <p>Delay-based Congestion Control</p>
    <p>Unknown bottleneck capacity  Traditional TCP signaled via packet loss  Delay-based congestion control triggered by</p>
    <p>latency changes</p>
    <p>Router Queue</p>
  </div>
  <div class="page">
    <p>Applications to Storage</p>
    <p>Networking Storage</p>
    <p>Mechanism Change Rate Change Size</p>
    <p>ACCELERATE Send Faster Batch Less</p>
    <p>BACK-OFF Send Slower Batch More</p>
  </div>
  <div class="page">
    <p>Algorithm</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
  </div>
  <div class="page">
    <p>Algorithm: Estimating Storage Performance</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
    <p>batch size</p>
    <p>latency + interval</p>
  </div>
  <div class="page">
    <p>Algorithm: Estimating Storage Capacity</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
    <p>if backed-off EWMA(batch sizei)</p>
    <p>EWMA(lati) + EWMA(intervali) else // accelerated</p>
    <p>MAXi( batch sizei</p>
    <p>lati + intervali )</p>
  </div>
  <div class="page">
    <p>Algorithm: Achieving Fair Share</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
    <p>(1 + )  intervali</p>
    <p>(1 )  intervali +   p</p>
    <p>intervali</p>
    <p>Time (s)</p>
    <p>in te</p>
    <p>rv a l</p>
  </div>
  <div class="page">
    <p>Algorithm: Achieving Fair Share</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
    <p>(1 + )  intervali</p>
    <p>(1 )  intervali +   p</p>
    <p>intervali</p>
    <p>Time (s)</p>
    <p>in te</p>
    <p>rv a l</p>
  </div>
  <div class="page">
    <p>Algorithm: Achieving Fair Share</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
    <p>(1 + )  intervali</p>
    <p>(1 )  intervali +   p</p>
    <p>intervali</p>
    <p>Time (s)</p>
    <p>in te</p>
    <p>rv a l</p>
  </div>
  <div class="page">
    <p>Algorithm: Achieving Fair Share</p>
    <p>if perf &lt; recent perf</p>
    <p>BACK-OFF else</p>
    <p>ACCELERATE</p>
    <p>(1 + )  intervali</p>
    <p>(1 )  intervali +   p</p>
    <p>intervali</p>
    <p>Time (s)</p>
    <p>in te</p>
    <p>rv a l</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Baseline Storage System Performance  Benefits of batching  Benefits of write-collapsing</p>
    <p>Stout  Versus fixed batching intervals  Workload variation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>!&quot;#$%&amp;$'(%</p>
    <p>Our Workload  256-byte documents: IOPS dominated  50% read, 50% write</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>!&quot;#$%&amp;$'(%</p>
    <p>Sectioned Document Store</p>
    <p>Our Workload  256-byte documents: IOPS dominated  50% read, 50% write</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>!&quot;#$%&amp;$'(%</p>
    <p>Sectioned Document Store</p>
    <p>Our Workload  256-byte documents: IOPS dominated  50% read, 50% write</p>
  </div>
  <div class="page">
    <p>Evaluation: Configuration</p>
    <p>Evaluation Platform  50 machines</p>
    <p>1 Experiment Controller  1 Lease Manager  12 Frontends  32 Middle Tiers  4 Storage (Partitioned Key-Value w/MSSQL as</p>
    <p>storage)</p>
    <p>www app store12 32 4</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Batching</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>no-batching</p>
    <p>Batching improves performance</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Batching</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>no-batching</p>
    <p>Batching improves performance</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Batching</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>no-batching</p>
    <p>Batching improves performance</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Write-Collapsing</p>
    <p>Load (requests/s)</p>
    <p>E n d -t</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Low collapsing 10k Documents High collapsing 100 Documents</p>
    <p>Improvement dependent on workload</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Write-Collapsing</p>
    <p>Load (requests/s)</p>
    <p>E n d -t</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Low collapsing 10k Documents High collapsing 100 Documents</p>
    <p>Improvement dependent on workload</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Write-Collapsing</p>
    <p>Load (requests/s)</p>
    <p>E n d -t</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Low collapsing 10k Documents High collapsing 100 Documents</p>
    <p>Improvement dependent on workload</p>
  </div>
  <div class="page">
    <p>Baseline: Importance of Write-Collapsing</p>
    <p>Load (requests/s)</p>
    <p>E n d -t</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Low collapsing 10k Documents High collapsing 100 Documents</p>
    <p>Improvement dependent on workload</p>
  </div>
  <div class="page">
    <p>Evaluation: Stout vs. Fixed Intervals</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout better than any fixed interval across wide range of workloads</p>
  </div>
  <div class="page">
    <p>Evaluation: Stout vs. Fixed Intervals</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout better than any fixed interval across wide range of workloads</p>
  </div>
  <div class="page">
    <p>Evaluation: Stout vs. Fixed Intervals</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout better than any fixed interval across wide range of workloads</p>
  </div>
  <div class="page">
    <p>Evaluation: Stout vs. Fixed Intervals</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout better than any fixed interval across wide range of workloads</p>
  </div>
  <div class="page">
    <p>Evaluation: Stout vs. Fixed Intervals</p>
    <p>Load (requests/s)</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout</p>
    <p>Stout better than any fixed interval across wide range of workloads</p>
  </div>
  <div class="page">
    <p>Evaluation: Workload Variation</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Decrease 12k requests/s  8k requests/s Increase 12k requests/s  18k requests/s</p>
  </div>
  <div class="page">
    <p>Evaluation: Workload Variation</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout decrease</p>
    <p>Decrease 12k requests/s  8k requests/s Increase 12k requests/s  18k requests/s</p>
  </div>
  <div class="page">
    <p>Evaluation: Workload Variation</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout decrease</p>
    <p>Decrease 12k requests/s  8k requests/s Increase 12k requests/s  18k requests/s</p>
  </div>
  <div class="page">
    <p>Evaluation: Workload Variation</p>
    <p>o -e</p>
    <p>n d L</p>
    <p>a te</p>
    <p>n c y (</p>
    <p>m s)</p>
    <p>Stout decrease</p>
    <p>Stout increase</p>
    <p>Decrease 12k requests/s  8k requests/s Increase 12k requests/s  18k requests/s</p>
  </div>
  <div class="page">
    <p>Additional Evaluation</p>
    <p>Fairness (Jains Fairness index of 0.96)  Stout achieves similar performance with:</p>
    <p>PacificA  SQL Data Services</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Batching improves storage performance  Current practice is fixed latency/throughput</p>
    <p>tradeoff  Stout introduces distributed adaptation</p>
    <p>technique  Achieve 3 higher throughput over</p>
    <p>low-latency fixed interval for modified Live Mesh service</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
