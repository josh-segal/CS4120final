<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Using UML for Writing and Reasoning about ODP Policies</p>
    <p>Javier Herrador, Francisco Durn, Antonio Vallecillo Felipe Garca, Manuel Roldn</p>
    <p>Dept. Lenguajes y Ciencias de la Computacin</p>
    <p>Universidad de Mlaga av@lcc.uma.es</p>
    <p>POLICY 2003</p>
  </div>
  <div class="page">
    <p>POLICY 2003 2</p>
    <p>Agenda</p>
    <p>formal specifications 5. A tool for automating the translation</p>
    <p>(and for accessing some formal analysis tools from a UML environment)</p>
  </div>
  <div class="page">
    <p>POLICY 2003 3</p>
    <p>The ODP Enterprise Viewpoint  The ODP viewpoint in charge of business</p>
    <p>system modeling  Focuses on the purpose, scope and</p>
    <p>policies for the system and its environment</p>
    <p>Describes the business requirements and how to meet them, abstracting away other considerations (implementation details, technology used, etc.)</p>
  </div>
  <div class="page">
    <p>POLICY 2003 4</p>
    <p>The ODP enterprise specification  Specifies the roles played by an IT</p>
    <p>system in its organizational environment  An object model of a social/commercial</p>
    <p>organization, expressed in terms of communities (collections of enterprise objects) with a defined contract:  Objective  Structure (roles)  Behavior  Policies</p>
  </div>
  <div class="page">
    <p>POLICY 2003 5</p>
    <p>Main concepts in EV specs</p>
    <p>Object -- a model of an entity  Community -- configuration of E-objects  Role -- identifier of a behavior  Action -- something that happens  Step -- abstraction of an action  Process -- set of steps (-&gt;objective)  Policy -- constraints on behavior/</p>
    <p>membership  Accountability -- parties, delegation,</p>
    <p>etc.</p>
  </div>
  <div class="page">
    <p>POLICY 2003 6</p>
    <p>Building EV specs (one possible way)</p>
    <p>actions (principals, agents,...)</p>
  </div>
  <div class="page">
    <p>POLICY 2003 7</p>
    <p>Policy concepts</p>
    <p>Policy: A set of rules related to a particular purpose</p>
    <p>Policies can be expressed in ODP as:  Obligations  Authorizations  Permissions  Prohibitions</p>
    <p>Violation: an action (or inaction) contrary to a rule</p>
  </div>
  <div class="page">
    <p>POLICY 2003 8</p>
    <p>Writing ODP E-L specifications  RM-ODP does not prescribe any particular</p>
    <p>notation for expressing viewpoint specifications</p>
    <p>UML is sexy enough and widely accepted  But its semantics are imprecise and ambiguous</p>
    <p>Formal methods are not widely accepted  But they allow precise specifications, and nice</p>
    <p>analysis of the systems being modeled</p>
  </div>
  <div class="page">
    <p>POLICY 2003 9</p>
    <p>Our proposal  Define a subset of UML that models the ODP</p>
    <p>Enterprise Language concepts  Formalize the concepts in a formal notation</p>
    <p>(Maude)  Define a mapping from the subset of UML to Maude</p>
    <p>(i.e. provide a clear semantics to those UML concepts)</p>
    <p>Build a tool that allows the user to draw the ODP enterprise specifications of a system  In UML, but with precise semantics  With access to some formal analysis tools (e.g., quick</p>
    <p>prototyping and model-checking)</p>
  </div>
  <div class="page">
    <p>POLICY 2003 10</p>
    <p>Modeling E-L structural concepts in UML</p>
    <p>Enterprise object Object instance (of a class that inherits from the UML classes modeling the roles that the object may fulfill)</p>
    <p>Role Class (stereotyped role)</p>
    <p>Community Subsystem (stereotyped community)</p>
    <p>Relationship among roles (from GRM)</p>
    <p>Relationship/Assoc. class (stereotyped relationship)</p>
    <p>Membership policies</p>
    <p>Constraints /relationship multiplicity</p>
  </div>
  <div class="page">
    <p>POLICY 2003 11</p>
    <p>Modeling E-L behavioral concepts in UML</p>
    <p>Action Paired object diagram (Snapshot) (describing the participant objects and the effects of the action)</p>
    <p>Process Set of snapshot diagrams (&amp; strategies)</p>
    <p>Policies Constraints and guards of snapshot diagrams</p>
    <p>Violations Watchdog rules (snapshot diagrams)</p>
  </div>
  <div class="page">
    <p>POLICY 2003 12</p>
    <p>A library example - structure</p>
    <p>&lt;&lt;community&gt;&gt;</p>
    <p>The Library</p>
    <p>&lt;&lt;role&gt;&gt; Borrower</p>
    <p>+bookLoanPeriod : Date +borrowedItems : int +fines : Money +maxLoans : int +periodicalLoanPeriod : Date +suspended : boolean</p>
    <p>&lt;&lt;relationship&gt;&gt; Loan</p>
    <p>+dueDate : Date +issueDate : Date</p>
    <p>&lt;&lt;role&gt;&gt; Book</p>
    <p>&lt;&lt;role&gt;&gt; Item</p>
    <p>+free : boolean</p>
    <p>&lt;&lt;role&gt;&gt; Library</p>
    <p>&lt;&lt;role&gt;&gt; Periodical</p>
    <p>&lt;&lt;role&gt;&gt; Calendar</p>
    <p>+date : Date</p>
    <p>* * *</p>
    <p>Policy 1: No more than one clock in the system</p>
    <p>Policy 2: One item can only be borrowed by one borrower simultaneous ly</p>
    <p>Policy 3: A borrower may have several items on loan simultaneously</p>
  </div>
  <div class="page">
    <p>POLICY 2003 13</p>
    <p>An action example: return</p>
    <p>Return-before</p>
    <p>L : Library</p>
    <p>A : Loan</p>
    <p>I: Item</p>
    <p>free = false</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N</p>
    <p>Return-after</p>
    <p>L : Library</p>
    <p>I: Item</p>
    <p>free = true</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N - 1</p>
    <p>return</p>
    <p>Preconditions of</p>
    <p>the action</p>
    <p>Effects of the action</p>
  </div>
  <div class="page">
    <p>POLICY 2003 14</p>
    <p>An action example: borrow</p>
    <p>Borrow-after</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N+1</p>
    <p>I: Item</p>
    <p>free = false</p>
    <p>L : Library</p>
    <p>A : Loan</p>
    <p>dueDate = Today + BL issueDate = Today</p>
    <p>C : Calendar</p>
    <p>Borrow-before</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N suspended = false bookLoanPeriod = BL maxLoans = ML</p>
    <p>I: Item</p>
    <p>free = true</p>
    <p>L : LibraryC : Calendar</p>
    <p>date = Today</p>
    <p>if N &lt; ML . borrow</p>
    <p>Policy 4: Suspended borrowers are not allowed to borrow items (prohibition) Policy 6:</p>
    <p>The number of borrowed items cannot exceed the borrowers maximum allowances (prohibition)</p>
    <p>Policy 5: Only free items can be borrowed (permission + prohibition)</p>
  </div>
  <div class="page">
    <p>POLICY 2003 15</p>
    <p>Maude</p>
    <p>Formal notation (and system) that supports equational and rewriting logic specification and programming</p>
    <p>Supports Object-Oriented specifications and computations  objects: &lt; O : C | a1 : v1, ..., an : vn &gt;  classes: class C | a1 : S1, ..., an : Sn .  messages: msg id : S1 ... Sm -&gt; Msg .</p>
  </div>
  <div class="page">
    <p>POLICY 2003 16</p>
    <p>Maude configurations</p>
    <p>A configuration is a multiset of objects and messages that evolves by rewriting rules</p>
    <p>class Account | balance : Int . msg deposit : Oid Int -&gt; Msg .</p>
    <p>crl [1] : &lt; O : Account | balance : N &gt; deposit(O,M) =&gt; &lt; O : Account | balance : N + M &gt; if M &gt; 0 .</p>
  </div>
  <div class="page">
    <p>POLICY 2003 17</p>
    <p>Translating UML concepts to Maude</p>
    <p>Object instance Object (of a class modeling all the roles that the object may fullfil)</p>
    <p>Class (role) Class Subsystem (community) Module Relationship (relationship)</p>
    <p>Class</p>
    <p>Class Sort (ADT) Association (binary) Class attributes Assoc. multiplicity Sort of attributes Constraints valid configuration</p>
    <p>sort Paired object diagram (snapshot)</p>
    <p>Rewriting rule</p>
  </div>
  <div class="page">
    <p>POLICY 2003 18</p>
    <p>The Library example in Maude</p>
    <p>(omod TheLibrary is class Library | borrowers : Set(Oid), calendar : Oid, items : Set(Oid), loans : Set(Oid) . class Calendar | date : Date . class Item | free : Bool, loan : Default(Oid) . classes Periodical Book . subclasses Periodical Book &lt; Item . .........</p>
    <p>&lt;&lt;community&gt;&gt;</p>
    <p>The Library</p>
    <p>&lt;&lt;role&gt;&gt; Borrower</p>
    <p>+bookLoanPeriod : Date +borrowedItems : int +fines : Money +maxLoans : int +periodicalLoanPeriod : Date +suspended : boolean</p>
    <p>&lt;&lt;relationship&gt;&gt; Loan</p>
    <p>+dueDate : Date +issueDate : Date</p>
    <p>&lt;&lt;role&gt;&gt; Book</p>
    <p>&lt;&lt;role&gt;&gt; Item</p>
    <p>+free : boolean</p>
    <p>&lt;&lt;role&gt;&gt; Library</p>
    <p>&lt;&lt;role&gt;&gt; Periodical</p>
    <p>&lt;&lt;role&gt;&gt; Calendar</p>
    <p>+date : Date</p>
    <p>* * *</p>
  </div>
  <div class="page">
    <p>POLICY 2003 19</p>
    <p>Return</p>
    <p>Return-before</p>
    <p>L : Library</p>
    <p>A : Loan</p>
    <p>I: Item</p>
    <p>free = false</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N</p>
    <p>Return-after</p>
    <p>L : Library</p>
    <p>I: Item</p>
    <p>free = true</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N - 1</p>
    <p>return</p>
    <p>rl [return] : &lt; L : Library | items : I IS,</p>
    <p>loans : A LLS, borrowers: B BS &gt; &lt; B : Borrower | loans : A BLS, borrowedItems : N &gt; &lt; A : Loan | borrower : B, item : I &gt; &lt; I : Item | loan : A &gt; =&gt; &lt; L : Library | loans : LLS &gt; &lt; B : Borrower | loans : BLS, borrowedItems : N  1&gt; &lt; I : Item | free : true, loan : null &gt; .</p>
  </div>
  <div class="page">
    <p>POLICY 2003 20</p>
    <p>Borrow crl [borrow] : &lt; B : Borrower | borrowedItems : N, maxLoans : ML, loans : BLS, bookLoanPeriod : BL, suspended : false &gt; &lt; I : Item | free : true, loan : null &gt; &lt; L : Library | items : I IS, calendar : C, borrowers : B BS, librarians : O OL, loans : LLS &gt; &lt; C : Calendar | date : Today &gt; =&gt; &lt; B : Borrower | loans : A BLS, borrowedItems : N + 1 &gt; &lt; I : Item | free : false, loan : A &gt; &lt; L : Library | loans : A LLS &gt; &lt; C : Calendar | &gt; &lt; A : Loan | borrower : B, item : I, dueDate : Today + BL, issueDate : Today &gt; if N &lt; ML .</p>
    <p>Borrow-after</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N+1</p>
    <p>I: Item</p>
    <p>free = false</p>
    <p>L : Library</p>
    <p>A : Loan</p>
    <p>dueDate = Today + BL issueDate = Today</p>
    <p>C : Calendar</p>
    <p>Borrow-before</p>
    <p>B: Borrower</p>
    <p>borrowedItems = N suspended = false bookLoanPeriod = BL maxLoans = ML</p>
    <p>I: Item</p>
    <p>free = true</p>
    <p>L : LibraryC : Calendar</p>
    <p>date = Today</p>
    <p>if N &lt; ML . borrow</p>
  </div>
  <div class="page">
    <p>POLICY 2003 21</p>
    <p>And now...what can we do?</p>
    <p>Check that the UML Enterprise specifications are well-formed (attributes have correct types, association multiplicities are given, etc.)</p>
    <p>Execute the specs (quick prototyping)  Maude allows a wide variety of strategies for</p>
    <p>execution (by default and user-defined)</p>
    <p>Reachability analysis (search)  Looking for specific violations/unwanted states</p>
    <p>Model checking  Using the Maude LTL model checker</p>
  </div>
  <div class="page">
    <p>POLICY 2003 22</p>
    <p>Example of system execution</p>
    <p>Init1-Before</p>
    <p>J oe: Borrower</p>
    <p>borrowedItems = 10 fines = 0 suspended = false bookLoanPeriod = 40 maxLoans = 24</p>
    <p>Clock : Calendar</p>
    <p>date = 10</p>
    <p>Louis : Borrower</p>
    <p>borrowedItems = 1 fines = 100 suspended = false bookLoanPeriod = 30 maxLoans = 16</p>
    <p>Loan1: Loan</p>
    <p>dueDate = 40 issueDate = 10</p>
    <p>Ulysses : Book {free = false}</p>
    <p>Templeman: Library</p>
    <p>Dubliners : Book {free = true}</p>
    <p>Init1-After</p>
  </div>
  <div class="page">
    <p>POLICY 2003 23</p>
    <p>Executing the system (result config)</p>
    <p>Init1-After</p>
    <p>Templeman: LibraryClock : Calendar</p>
    <p>date = 42</p>
    <p>J oe: Borrower</p>
    <p>borrowedItems = 2 fines = 0 suspended = false bookLoanPeriod = 82 periodicalLoanPeriod maxLoans = 24</p>
    <p>Louis : Borrower</p>
    <p>borrowedItems = 1 fines = 100 suspended = false bookLoanPeriod = 30 periodicalLoanPeriod = 20 maxLoans = 16</p>
    <p>Dubliners : Book {free = false}</p>
    <p>Ulysses : Book {free = false}</p>
    <p>Loan4: Loan</p>
    <p>dueDate = 82 issueDate = 42</p>
    <p>Loan5: Loan</p>
    <p>dueDate = 82 issueDate = 42</p>
  </div>
  <div class="page">
    <p>POLICY 2003 24</p>
    <p>Strategies for execution</p>
    <p>Maudes refective capabilities are of great help  For knowing the actions in which objects can</p>
    <p>engage in, both statically, and during run-time  Execution strategies can decide priorities for</p>
    <p>selecting the rules to apply in each situation  Rule execution can be monitored, detecting</p>
    <p>unwanted actions  But this process is not simple...</p>
    <p>We are working on making it accessible from the UML environment</p>
  </div>
  <div class="page">
    <p>POLICY 2003 25</p>
    <p>Checking policy violations</p>
    <p>Permissions/Authorizations  Only explicitly stated rules are permitted  This implicitly forbids any action not specified by a rule</p>
    <p>Prohibitions  Either stated in the rule pre-conditions &amp; guards (and</p>
    <p>hence will never happen)  Or can be checked by:</p>
    <p>The type system, in case of invalid configurations  Watchdog rules, that are triggered on the occurrence of</p>
    <p>violations (they monitor the effects of the violating actions)  The search or model checking tools</p>
    <p>Obligations  Watchdog rules can check that the action is performed</p>
  </div>
  <div class="page">
    <p>POLICY 2003 26</p>
    <p>Example of delegation</p>
    <p>class NormalUser | ... . class AllowedUser | ... . rl [action] &lt; O : AllowedUser | ... &gt; ... =&gt; ... .</p>
    <p>class Authority | ... . class Authorized | grantor : Oid . subclass Authorized &lt; AllowedUser . rl [delegate] : &lt; A : Authority | ... &gt;</p>
    <p>&lt; O : NormalUser | ... &gt; =&gt; &lt; A : Authority | &gt; &lt; O : Authorized | grantor : A, ...</p>
    <p>&gt; if ... .</p>
  </div>
  <div class="page">
    <p>POLICY 2003 27</p>
    <p>Conclusions</p>
    <p>We have presented a tool for the graphical specification of business systems using the ODP Enterprise Viewpoint concepts</p>
    <p>Better representation of ODP E-L concepts  Configurations capture collective state and behavior  Actions are not limited to object operations  Policies are more than UML notes</p>
    <p>More precise semantics for the UML drawings  given by their Maude interpretation</p>
    <p>Access to some formal analysis tools from UML  well-formed specifications, system</p>
    <p>execution/prototyping, model checking, ...</p>
  </div>
  <div class="page">
    <p>POLICY 2003 28</p>
    <p>Current limitations &amp; future work  Our work is still at a preliminary stage</p>
    <p>Encouraging results... but with simple examples only</p>
    <p>No modular description of policies  Hard-coded in the UML class &amp; snapshot diagrams  No expression for objectives so far</p>
    <p>(in ODP, they are expressed as preferences about future states)</p>
    <p>Limited detection (and resolution) of policy conflicts &gt;&gt; We are looking for an appropriate POLICY language!</p>
    <p>Connection to other ODP viewpoints  Information and Computational viewpoints  New ISO work item on Use of UML for ODP viewpoints</p>
    <p>specifications</p>
  </div>
</Presentation>
