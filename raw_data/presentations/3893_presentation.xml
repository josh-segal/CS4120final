<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>vPath: Precise Discovery of Request Processing Paths from Black-Box</p>
    <p>Observations of Thread and Network Activities</p>
    <p>June 18, 2009</p>
    <p>Pennsylvania Sta te University IBM T.J. Watson Research Center</p>
    <p>Byung Chul Tak Chunqiang Tang</p>
    <p>Chun Zhang Sriram Govindan</p>
    <p>Bhuvan Urgaonkar Rong N. Chang</p>
  </div>
  <div class="page">
    <p>HYPERVISOR</p>
    <p>HYPERVISOR HYPERVISOR Dispatcher</p>
    <p>Thread Stage 1 Stage 2 Stage 3</p>
    <p>Multi-threaded Multi-staged Architecture</p>
    <p>Request-Processing Path Discovery</p>
    <p>Enterprise server architecture Three-tiered architecture</p>
    <p>Increasing complexity from heterogeneity Virtualization</p>
    <p>web server</p>
    <p>web server</p>
    <p>web server</p>
    <p>WEB TIER</p>
    <p>app server</p>
    <p>app server</p>
    <p>app server</p>
    <p>DATABASE TIER</p>
    <p>LDAP Authentication</p>
    <p>messages</p>
    <p>User Request</p>
    <p>MIDDLE TIER</p>
    <p>VM2</p>
    <p>VM3</p>
    <p>VM1</p>
    <p>VM2 VM3 VM1</p>
    <p>VM2</p>
    <p>VM1</p>
  </div>
  <div class="page">
    <p>Request-Processing Path information is critic al to managing distributed applications Debugging, analysis, auditing, billing</p>
    <p>Challenges in obtaining and exploiting the inf ormation Develop application-specific middleware Understand logs generated by the middleware Pinpoint the root cause of the problem</p>
  </div>
  <div class="page">
    <p>Statistical inference Use available logs to infer the paths Probabilistic guarantee of accuracy Dependent on the availability of logs</p>
    <p>Instrumentation-based approach (E.g., Tivoli) Modify the application to include some form of user requ</p>
    <p>est ID</p>
    <p>Often limited by the lack of source code availability Deep understanding is required</p>
  </div>
  <div class="page">
    <p>vPath discovers: Precise end-to-end request-processing path in a</p>
    <p>virtualized environment</p>
    <p>Without instrumentation on middleware or app lications</p>
    <p>Contributions New approach to the path discovery problem</p>
    <p>Leverage common programming patterns in thread an d communication</p>
    <p>Prototype implementation of the concepts Demonstration of accuracy and completeness</p>
  </div>
  <div class="page">
    <p>Causal Relationships Two types of causality</p>
    <p>Receive Request X</p>
    <p>Send Request Y</p>
    <p>Send Response X</p>
    <p>Receive Response Y</p>
    <p>Receive Request Y</p>
    <p>Send Response Y</p>
    <p>Process 1 Process 2</p>
    <p>TCP Connection 1</p>
    <p>TCP Connection 2</p>
    <p>Internal Causality External Causality</p>
  </div>
  <div class="page">
    <p>Message flow Message is used up at arrival Totally new message is assembled</p>
    <p>Two messages share no common ID Known options</p>
    <p>Guess  statistical inference  Insert ID  instrumentation</p>
    <p>Can we correlate incoming and outgoing me ssages? We consider the execution model</p>
  </div>
  <div class="page">
    <p>Application Model Thread pattern in Multi-threaded Model</p>
    <p>Single thread is dedicated to the request until final res ponse is sent out</p>
    <p>Communication Model Synchronous communication</p>
    <p>One thread sends a messages and blocks until it rec eives the reply</p>
    <p>Dispatcher Thread</p>
    <p>Worker Thread pool</p>
    <p>Request Sub-Request</p>
  </div>
  <div class="page">
    <p>Causality is carried on to the thread We identify thread from VMM</p>
    <p>Identify the thread from the Virtual Machine Monitor</p>
    <p>Process 1</p>
    <p>Send Request Y</p>
    <p>Send Response X</p>
    <p>TCP Connection 1</p>
    <p>Thread</p>
    <p>Receive Request X</p>
    <p>Receive Response Y</p>
  </div>
  <div class="page">
    <p>We use TCP socket information (Source IP, port, Destination IP, port) is compare</p>
    <p>d and connected</p>
    <p>We read socket information on Receive and Send eve nts</p>
    <p>Send Request Y</p>
    <p>Receive Response Y</p>
    <p>Receive Request Y</p>
    <p>Send Response Y</p>
    <p>TCP Connection</p>
    <p>ex: [130.203.8.23:38294, 130.203.8.23:3314]</p>
  </div>
  <div class="page">
    <p>GUEST VM</p>
    <p>user process</p>
    <p>kernel</p>
    <p>CPU Hardware</p>
    <p>XEN VMM</p>
    <p>Implementation</p>
    <p>System Call Interception Intercept system calls by modifying Xen VMM</p>
    <p>For each system call, get thread identifier</p>
    <p>EBP register value (stack address)</p>
    <p>System Call Handler</p>
    <p>INT80h Handler Pointer</p>
    <p>INT80h instruction</p>
    <p>My Handler</p>
    <p>interrupt descriptor table s o ft w</p>
    <p>a re</p>
    <p>t ra</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Socket info extraction socket  (source IP, port, destination IP, port)</p>
    <p>This uniquely identifies TCP connection  This enables us to correlate events across componen</p>
    <p>ts</p>
    <p>Custom hypercall  On every target system call, this hypercall is invoked  It delivers socket information from Guest Kernel to Xe</p>
    <p>n VMM</p>
  </div>
  <div class="page">
    <p>Log Format From System Call Interception</p>
    <p>From Hypercall</p>
    <p>Example</p>
    <p>Path Discovery Algorithm</p>
    <p>Event # Domain # CR3 EBP EAX EBX Time Stamp</p>
    <p>OP Type (R/S)</p>
    <p>Event # Domain # Socket</p>
    <p>Descriptor # Local</p>
    <p>IP Addr &amp; Port Remote</p>
    <p>IP Addr &amp; Port</p>
  </div>
  <div class="page">
    <p>Components Online Monitoring Part</p>
    <p>System call interception at Xen VMM  Xen 3.1.0 for x86 32-bit Architecture  Guest Linux kernel 2.6.18</p>
    <p>Information collection for feeding to the analyzer vPath Log Analyzer</p>
    <p>Algorithms for preprocessing  Path construction logic</p>
  </div>
  <div class="page">
    <p>Workloads TPC-W  representing Java-based applications RUBiS(PHP version) vApp  custom C socket programming MediaWiki</p>
    <p>System Set-up for TPC-W &amp; RUBiS Separate VMs for each application</p>
    <p>RUBiS(PHP) MySQL</p>
    <p>Apache</p>
    <p>JBoss2</p>
    <p>MySQL</p>
    <p>JBoss1</p>
  </div>
  <div class="page">
    <p>Discovered Path for TPC-W</p>
    <p>Apache</p>
    <p>JBoss2</p>
    <p>MySQL</p>
    <p>JBoss1</p>
    <p>Client Request</p>
    <p>Large Number of Requests and</p>
    <p>Replies between</p>
    <p>JBoss &amp; MySQL Partial Reply Partial Reply</p>
    <p>Partial Reply Partial Reply</p>
  </div>
  <div class="page">
    <p>Discovered Path for RUBiS</p>
    <p>RUBiS(PHP) MySQL</p>
    <p>Client Request</p>
    <p>Reply</p>
    <p>Exactly 3 Round Trips</p>
    <p>About 50 Consecutive</p>
    <p>recv()</p>
    <p>Sending Large Data Here</p>
  </div>
  <div class="page">
    <p>vPath overhead on TPC-W response time</p>
    <p>Response Time (Sec)</p>
    <p>F(X)</p>
    <p>CDF of TPC-W Response Time</p>
  </div>
  <div class="page">
    <p>Worst case overhead measurement Response Time (in Sec)</p>
    <p>Throughput (in req/sec)</p>
  </div>
  <div class="page">
    <p>vPath works for Multi-threaded model Unable to apply to event-driven or SEDA model</p>
    <p>We argue that multi-threaded model is dominant</p>
    <p>Accesing socket information Current implementation uses hypercall</p>
    <p>Modification of the para-virtualized guest VM  Each system call incurs another mode-switch</p>
  </div>
  <div class="page">
    <p>Proposal of vPath technique Accurate and non-intrusive technique of path dis</p>
    <p>covery in a virtualized environment</p>
    <p>vPath exploits multi-threaded nature of applicatio ns and communication patterns</p>
    <p>Low run-time overhead Future Work</p>
    <p>Implementation of pure VMM-based approach More study on behaviors of various apps Collecting resource consumptions per path</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
</Presentation>
