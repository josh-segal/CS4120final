<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FLAIR: Accelerating Reads with Consistency-Aware Network Routing</p>
    <p>Hatem Takruri, Ibrahim Kettaneh, Ahmed Alquraan, Samer Al-Kiswany</p>
  </div>
  <div class="page">
    <p>Introduction Modern cloud applications</p>
    <p>Are read intensive  R:W in Googles F1 advertising system is 380:1 [1]</p>
    <p>R:W in Facebooks TAO is 500:1 [2]</p>
    <p>Require data reliability</p>
    <p>Main approach: Replication</p>
    <p>Strongly consistent replication protocols are popular</p>
    <p>[1] J. Shute, R. Vingralek, B. Samwel, et al., F1: a distributed SQL database that scales. Proc. VLDB Endow., 2013. 6(11): p. 1068-1079.</p>
    <p>[2] N. Bronson, Z. Amsden, G. Cabrera, et al. TAO: Facebook's distributed data store for the social graph. in Proceedings of the USENIX Technical Conference. 2013. San Jose, CA: USENIX</p>
  </div>
  <div class="page">
    <p>Inefficiency of current replication protocols</p>
    <p>Modern strongly consistent protocols are inefficient for readheavy workloads</p>
    <p>Main reason: they are leader-based</p>
    <p>Paxos Viewstamp</p>
    <p>ReplicationRaft ZAB</p>
  </div>
  <div class="page">
    <p>Leader-based Consensus Inefficiency</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>WriteRequest ReplicateReplicateReplicateReplicate</p>
  </div>
  <div class="page">
    <p>Leader-based Consensus Inefficiency</p>
    <p>Leader</p>
    <p>Followers</p>
    <p>Inefficient: Only the leader handles read/write requests Missed opportunity: Utilize the followers to serve reads.</p>
    <p>. . .</p>
  </div>
  <div class="page">
    <p>Current Approaches to Utilizing Followers</p>
    <p>Read leases</p>
    <p>The leader grants read leases to followers</p>
    <p>With a valid lease: followers serve reads</p>
    <p>On write: leader revokes leases</p>
    <p>Drawbacks</p>
    <p>Complicates lease management</p>
    <p>Increases write latency</p>
    <p>Complicates fault tolerance</p>
    <p>Eventual consistency</p>
    <p>Replicas serve reads, albeit the possibility of returning stale data 6</p>
  </div>
  <div class="page">
    <p>FLAIR: Fast, Linearizable, Network Accelerated Client Reads</p>
    <p>A novel approach to serve reads from followers while maintaining linearizability.</p>
    <p>A shim layer atop current leader-based protocols.</p>
    <p>Main idea</p>
    <p>The network detects read/write conflicts, and</p>
    <p>Load balance reads across consistent replicas</p>
    <p>Enabler: Programmable switches</p>
  </div>
  <div class="page">
    <p>FLAIR in a Nutshell  Network switches monitor write requests/responses</p>
    <p>Identify which objects are stable, and on which replicas</p>
    <p>Load balance reads across consistent replicas</p>
    <p>FLAIR is an in-network consistency-aware load-balancing protocol</p>
  </div>
  <div class="page">
    <p>Evaluation Summary</p>
    <p>Implemented FLAIR using P4  Evaluated FLAIR on a cluster with Barefoot Tofino switch</p>
    <p>FLAIR achieves  1.4 to 2.1 higher throughput  1.5 to 2.4 lower latency</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview of programmable switches</p>
    <p>FLAIR design</p>
    <p>Implementation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Programmable Switches Overview</p>
    <p>Example: key-based routing pipeline</p>
    <p>Node 1 Node 2</p>
    <p>Key range: [0, 1000) Key range: [1000, 2000)</p>
    <p>Client</p>
    <p>L2 L3 GET: Key = 200</p>
  </div>
  <div class="page">
    <p>Programmable Switches Overview</p>
    <p>Example: key-based routing pipeline</p>
    <p>L2 Table</p>
    <p>IPV4 Table</p>
    <p>ACL Table</p>
    <p>KV Routing</p>
    <p>Table</p>
    <p>Packet header and metadata</p>
    <p>Pipeline Stage</p>
  </div>
  <div class="page">
    <p>Programmable Switches Overview</p>
    <p>Match header.key  [0, 1000) header.key  [1000, 2000)</p>
    <p>Action forward(0) forward(1)</p>
    <p>Example: key-based routing pipeline</p>
    <p>L2 Table</p>
    <p>IPV4 Table</p>
    <p>ACL Table</p>
    <p>KV Routing</p>
    <p>Table</p>
    <p>Packet header and metadata</p>
    <p>Match + Action Tables</p>
  </div>
  <div class="page">
    <p>Programmable Switches Overview</p>
    <p>L2 Table</p>
    <p>IPV4 Table</p>
    <p>ACL Table</p>
    <p>KV Routing</p>
    <p>Table</p>
    <p>Packet header and metadata</p>
    <p>Match header.key  [0, 1000) header.key  [1000, 2000)</p>
    <p>Action forward(0) forward(1)</p>
    <p>forward(index): dstIPAddr = addressArray[index]</p>
    <p>addressArray IP 1 IP 2 IP 3</p>
    <p>Example: key-based routing pipeline</p>
    <p>Facilitates building application-optimized network substrate.</p>
    <p>Custom Actions</p>
    <p>Switch Memory</p>
  </div>
  <div class="page">
    <p>Programmable Switches Challenges</p>
    <p>No loops or recursion</p>
    <p>Restricted pipeline-based programming model</p>
    <p>Limited number of pipeline stages</p>
    <p>Limited computational power</p>
    <p>Restricted memory access model</p>
    <p>Can we use programmable switches to build consistency-aware network routing protocol?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview of programmable switches</p>
    <p>FLAIR design</p>
    <p>Implementation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>FLAIR Design</p>
    <p>FLAIR pipeline</p>
    <p>Which nodes can serve Read(Key1)?</p>
    <p>Clients</p>
    <p>LeaderFollower1 Follower2</p>
    <p>Flair modules</p>
    <p>Read(Key1)Network controller</p>
  </div>
  <div class="page">
    <p>FLAIRs Object Stability Array</p>
    <p>Objects stability array</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Unstable</p>
    <p>Stable Replicas L, F1 All -</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All All All</p>
    <p>Objects stability array</p>
    <p>Follower 2</p>
    <p>Read(KeyHash = 5000)</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array Check</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All All All</p>
    <p>Read(KeyHash = 5000)</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Read(KeyHash = 5000)</p>
    <p>ReadResponse(KeyHash = 5000, Val = A)</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All All All</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All All All</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array Update</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Read(KeyHash = 5000)</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Read(KeyHash = 5000)</p>
    <p>Check</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>ReadResponse(KeyHash = 5000)</p>
    <p>Read(KeyHash = 5000)</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = A</p>
    <p>Key = 5000 Value = A</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Key = 5000 Value = A</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
    <p>Write(KeyHash = 5000, Val = B)</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = A</p>
    <p>Ack.</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = A</p>
    <p>WriteResponse(Key1,[L,F1])</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Unstable Stable</p>
    <p>Stable Replicas All - All  Stale Follower</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>WriteResponse(Key1,[L,F1])</p>
    <p>Update</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = A</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All L, F1 All  Stale Follower</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = A</p>
    <p>WriteResponse(Key1,[L,F1])</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All L, F1 All  Stale Follower</p>
  </div>
  <div class="page">
    <p>FLAIR in Action</p>
    <p>Objects stability array</p>
    <p>Leader</p>
    <p>Follower 1</p>
    <p>Follower 2</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = B</p>
    <p>Key = 5000 Value = A</p>
    <p>Key range [0,4096) [4096, 8192) [8192, 12288)</p>
    <p>Status Stable Stable Stable</p>
    <p>Stable Replicas All L, F1 All</p>
    <p>Read(KeyHash = 5000)Read(KeyHash = 5000)Read(KeyHash = 5000)</p>
    <p>Check</p>
    <p>Stale Follower</p>
  </div>
  <div class="page">
    <p>FLAIR Design</p>
    <p>Concurrent writes to the same object  Packet reordering  Failures</p>
    <p>Switch failure  Leader failure  Follower failure  Network partitioning</p>
    <p>Protocol validation  Detailed proof  TLA+ model checking</p>
  </div>
  <div class="page">
    <p>Concurrent Writes</p>
    <p>Time on the switch</p>
    <p>w2(x) w1(x)</p>
    <p>w1request w2request w1response w2response</p>
    <p>x is unstable</p>
  </div>
  <div class="page">
    <p>Concurrent Writes</p>
    <p>Time on the switch</p>
    <p>w2(x)</p>
    <p>w1(x)</p>
    <p>w1request w2request w1response w2response</p>
    <p>x is unstable</p>
  </div>
  <div class="page">
    <p>Concurrent Writes</p>
    <p>Time on the switch</p>
    <p>w2(x, w2_seq#)</p>
    <p>w1(x, w1_seq#)</p>
    <p>w1request w2request w1response w2response</p>
    <p>x is unstable</p>
    <p>Every write gets a unique sequence number</p>
    <p>Objects stability array stores the sequence number of the last write</p>
  </div>
  <div class="page">
    <p>Concurrent Writes</p>
    <p>Time on the switch</p>
    <p>w2(x, w2_seq#)</p>
    <p>w1(x, w1_seq#)</p>
    <p>w1request w2request w1response w2response</p>
    <p>x is unstable Hash range [0,4096)</p>
    <p>Status Unstable</p>
    <p>Stable Replicas -</p>
    <p>Seq# w2_seq#</p>
    <p>unstable objects array</p>
    <p>Every write gets a unique sequence number</p>
    <p>Objects stability array stores the sequence number of the last write</p>
    <p>Objects remain unstable until last sequence number is acknowledged</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview of programmable switches</p>
    <p>FLAIR architecture</p>
    <p>Implementation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>FlairKV is a key-value store that optimizes Raft using FLAIR</p>
    <p>Implemented using P4 language</p>
    <p>Utilizes 12 registers and 30 tables (only 5% of ASIC memory)</p>
    <p>Implemented consistency-aware load balancing techniques  Random</p>
    <p>Leader avoidance</p>
    <p>Follower load awareness</p>
  </div>
  <div class="page">
    <p>Evaluation Alternatives</p>
    <p>Leader-based (Raft, VR)</p>
    <p>Leader lease (Opt. Raft)</p>
    <p>Unreplicated</p>
    <p>Fast Paxos</p>
    <p>Follower-leases (Fleases)</p>
    <p>Metrics</p>
    <p>Throughout</p>
    <p>Latency</p>
    <p>Load balancing efficiency</p>
    <p>We varied:</p>
    <p>Number of replicas</p>
    <p>Number of clients</p>
    <p>Read to write ratio</p>
    <p>Workload skewness</p>
    <p>Data set size</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (1</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Number of clients</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (1</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Number of clients</p>
    <p>Raft Fast Paxos VR</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (1</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Number of clients</p>
    <p>Opt. Raft Raft Fast Paxos Unrep. VR</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (1</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Number of clients</p>
    <p>Fleases Opt. Raft Raft Fast Paxos Unrep. VR</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (1</p>
    <p>p s/</p>
    <p>se c)</p>
    <p>Number of clients</p>
    <p>FlairKV Fleases Opt. Raft Raft</p>
    <p>Fast Paxos Unrep. VR Workload YCSB-B (95% reads)</p>
    <p>Uniform workload 42% higher throughput</p>
  </div>
  <div class="page">
    <p>Read Latency</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
    <p>C D</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Read Latency</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
    <p>C D</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Read Latency</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
    <p>C D</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Read Latency</p>
    <p>Workload YCSB-B (95% reads)</p>
    <p>Uniform workload</p>
    <p>FLAIR reduces latency  Avoid inconsistent</p>
    <p>replicas  Avoid the leader</p>
    <p>C D</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>FLAIR a shim layer atop leader-based consensus protocol  Exploits programmable switches</p>
    <p>Builds in-network consistency-aware load balancing</p>
    <p>Maintains linearizability</p>
    <p>FlairKV achieves  2.1 higher throughput than classical approaches, and up to 1.4 than leases</p>
    <p>2.4 lower latency than classical approaches, and up to 1.5 than leases</p>
    <p>Despite their limitations, programmable switches can be leveraged to accelerate complex system protocols.</p>
  </div>
  <div class="page">
    <p>FLAIR project: https://wasl.uwaterloo.ca/projects/flair/</p>
  </div>
</Presentation>
