<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2014 IBM Corporation 1</p>
    <p>Active Control of Memory for Java Virtual Machines</p>
    <p>Peter Westerink, Norm Bobroff, Liana Fong</p>
    <p>IBM T.J. Watson Research Center</p>
    <p>Yorktown Heights, NY</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 2</p>
    <p>Issues with JVM memory management</p>
    <p>A single JVM  may take all allowed memory (heap size limit) while there is no</p>
    <p>performance benefit</p>
    <p>may take memory but may not need it later when the workload changes</p>
    <p>Multiple collocated JVMs  may take or reserve much more total memory than is needed  Memory overcommit may result in swapping</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 3</p>
    <p>Solution</p>
    <p>Overcommit JVM memory  The sum of max heap size limit over all JVMs exceeds OS</p>
    <p>memory</p>
    <p>Plus: move memory between JVMs  Give more memory to JVMs that need it most  Remove memory from JVMs that do not need it or do not</p>
    <p>benefit</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 4</p>
    <p>Performance measurement</p>
    <p>Use JVM workload instrumentation?  Typically not available  Even if available, interpretation is domain specific</p>
    <p>Use available JVM metrics to infer workload performance:  Available via JMX (Java Management Extension)  CPU, garbage collection count, memory freed</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 5</p>
    <p>Correlation between KPI and JVM metrics</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 6</p>
    <p>Memory balancing using KPI or JVM metrics</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 7</p>
    <p>Dynamic changing of JVM memory</p>
    <p>Use JVM ballooning  Requires JVM plug-in  Requires hypervisor ballooning support, i.e. pinning/releasing</p>
    <p>of physical memory</p>
    <p>Use IBM J9 JMX method to move heap size  Lowering heap max followed by a GC releases memory to OS  Raising heap max allows JVM to take more memory  Control via JMX</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 8</p>
    <p>Performance measure definition</p>
    <p>Define a relative differential performance measure:  Differential: same the performance gain/loss % per fixed memory</p>
    <p>change</p>
    <p>Relative: to compare the performance of different JVM workloads  The relative performance slope S(j) for each JVM j is defined as the</p>
    <p>slope of the curve of the application performance P(j) against MaxHeapSize, normalized by the performance value:</p>
    <p>j</p>
    <p>j j</p>
    <p>PeMaxHeapSiz P</p>
    <p>S 1</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 9</p>
    <p>Real-time performance measurement</p>
    <p>Measure slope for each JVM by dithering max heap size:  Measure performance at current max heap size setting, then</p>
    <p>change setting to measure at another level</p>
    <p>Continuously change the max heap size setting: dithering  Equate the relative slopes of all JVMs under a total memory</p>
    <p>constraint  This will yield a new max heap size setting for each JVM</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 10</p>
    <p>Real-time measure and control</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 11</p>
    <p>Experiment</p>
    <p>Run SPECjvm2008 derby and SPECjbb2005</p>
    <p>Let run for a while  Change the number of SPECjbb2005 warehouses</p>
    <p>from 10 to 20</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 12</p>
    <p>Experiment: max heap size when a workload changes</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 13</p>
    <p>Experiment: allocation rate when a workload changes</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 14</p>
    <p>Summary and Conclusions</p>
    <p>Use JVM supplied metrics instead of relying on workload instrumentation</p>
    <p>Define relative differential performance measure  Dither to continuously measure performance  Optimize a global memory distribution</p>
    <p>Workload changes result in a new memory distribution over the JVMs in the system</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 15</p>
    <p>Backup</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 16</p>
    <p>Existing solutions to manage JVM memory</p>
    <p>Assume JVM workload is instrumented to measure performance  Typically not available  Even if available, interpretation is domain specific</p>
    <p>Use JVM ballooning  Requires JVM plug-in  Requires hypervisor ballooning support, i.e. pinning/releasing of physical</p>
    <p>memory  No global optimization</p>
    <p>Each JVMs is given enough memory to avoid performance drop  Severe memory shortage still results in swapping</p>
    <p>Based upon how memory a JVM takes  JVM may not benefit from memory and therefore unnecessarily takes too much</p>
    <p>memory</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 17</p>
    <p>Example of measuring the performance curve</p>
  </div>
  <div class="page">
    <p>2014 IBM Corporation 18</p>
    <p>Experiment: measured curves when a workload changes</p>
  </div>
</Presentation>
