<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sebastian Poeplau, Aurlien Francillon</p>
    <p>Symbolic execution with SymCC: Dont interpret, compile!</p>
  </div>
  <div class="page">
    <p>Compiling symbolic-execution capabilities</p>
    <p>into executables</p>
  </div>
  <div class="page">
    <p>Recap: Symbolic Execution Explore programs by keeping track of computations in terms of inputs</p>
    <p>Target program</p>
    <p>void f(int x, int y) {</p>
    <p>int z = 2*y;</p>
    <p>if (x == 100000) {</p>
    <p>if (x &lt; z) {</p>
    <p>assert(0); /* error */</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>symbolic execution</p>
  </div>
  <div class="page">
    <p>Current approaches (e.g., KLEE, S2E, angr)</p>
  </div>
  <div class="page">
    <p>Interpreter approach Target program (bitcode)</p>
    <p>define i32 @is_double(i32, i32) {</p>
    <p>%3 = shl nsw i32 %1, 1</p>
    <p>%4 = icmp eq i32 %3, %0</p>
    <p>%5 = zext i1 %4 to i32</p>
    <p>ret i32 %5</p>
    <p>}</p>
    <p>Interpreter (e.g., KLEE, S2E, angr)</p>
    <p>while (true) {</p>
    <p>auto instruction = getNextInstruction();</p>
    <p>switch (instruction.type) {</p>
    <p>//</p>
    <p>case SHL: {</p>
    <p>auto result = instruction.operand(0) &lt;&lt;</p>
    <p>instruction.operand(1);</p>
    <p>auto resultExpr =</p>
    <p>buildLeftShift(instruction.operandExpr(0),</p>
    <p>instruction.operandExpr(1));</p>
    <p>setResult(result, resultExpr);</p>
    <p>break;</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>N</p>
    <p>times</p>
  </div>
  <div class="page">
    <p>SymCC Compilation instead of interpretation</p>
  </div>
  <div class="page">
    <p>SymCC: Overview Target program (bitcode)</p>
    <p>define i32 @is_double(i32, i32) {</p>
    <p>%3 = shl nsw i32 %1, 1</p>
    <p>%4 = icmp eq i32 %3, %0</p>
    <p>%5 = zext i1 %4 to i32</p>
    <p>ret i32 %5</p>
    <p>}</p>
    <p>Instrumented target (bitcode)</p>
    <p>define i32 @is_double(i32, i32) {</p>
    <p>%3 = call i8* @_sym_get_parameter_expression(i8 0)</p>
    <p>%4 = call i8* @_sym_get_parameter_expression(i8 1)</p>
    <p>%5 = call i8* @_sym_build_integer(i64 1)</p>
    <p>%6 = call i8* @_sym_build_shift_left(i8* %4, i8* %5)</p>
    <p>%7 = call i8* @_sym_build_equal(i8* %6, i8* %3)</p>
    <p>%8 = call i8* @_sym_build_bool_to_bits(i8* %7)</p>
    <p>%9 = shl nsw i32 %1, 1</p>
    <p>%10 = icmp eq i32 %9, %0</p>
    <p>%11 = zext i1 %10 to i32</p>
    <p>call void @_sym_set_return_expression(i8* %8)</p>
    <p>ret i32 %11</p>
    <p>}</p>
    <p>once</p>
  </div>
  <div class="page">
    <p>SymCC: Implementation  Compiler pass and run-time library  Pass inserts calls to the run-time library at compile time</p>
    <p>Built on top of LLVM  Easily integrate with all LLVM-based compilers  Independent of CPU architecture and source language</p>
    <p>Run-time library builds up symbolic expressions and calls the solver  Two options for run-time library  Simple backend: wrapper around Z3, little optimization, good for debugging  QSYM backend: reuse expressions and solver infrastructure from QSYM</p>
    <p>(but NOT the instrumentation!)</p>
  </div>
  <div class="page">
    <p>QSYM is different  Yun et al., USENIX Security 2018  Based on dynamic binary instrumentation</p>
    <p>Rewrites binaries at run time using Intel Pin  Inserts calls to functions that build symbolic</p>
    <p>expressions and interacts with a solver</p>
    <p>Strengths  No interpreter: higher performance than</p>
    <p>interpreted systems</p>
    <p>Support for binaries</p>
    <p>But  Rewritten program is less efficient than compiled</p>
    <p>programs</p>
    <p>Binary level, i.e., need to implement symbolic handling for each x86 instruction</p>
    <p>Target</p>
    <p>process</p>
    <p>Analysis</p>
    <p>process</p>
    <p>(QSYM)</p>
    <p>attach</p>
    <p>via</p>
    <p>ptrace</p>
  </div>
  <div class="page">
    <p>Recap</p>
    <p>We compile symbolic-execution</p>
    <p>capabilities right into the binary.</p>
    <p>Most others interpret</p>
    <p>QSYM uses dynamic binary instrumentation</p>
  </div>
  <div class="page">
    <p>Evaluation Benchmark and real-world targets</p>
  </div>
  <div class="page">
    <p>Benchmark: Setup  Goal: highly controlled environment  DARPA CGC programs  Concolic execution with fixed inputs</p>
    <p>Fixed code paths  Single execution with generation of new inputs</p>
    <p>Intel Core i7 CPU and 32GB of RAM  30 minutes for a single execution</p>
    <p>(regular, i.e. non-symbolic, execution takes milliseconds)</p>
    <p>Compared with KLEE and QSYM  Excluded S2E: very similar to KLEE in aspects that matter here  Excluded angr: not optimized for execution speed</p>
  </div>
  <div class="page">
    <p>Benchmark: Execution Speed Fully concrete No symbolic input provided</p>
    <p>Concolic Input data is made symbolic</p>
  </div>
  <div class="page">
    <p>Approach After concolic execution, measure edge coverage</p>
    <p>of newly generated inputs with afl-showmap.</p>
    <p>Visualization  Compare paths found by only one system  More intense color: more unique paths  Blue for SymCC, red for KLEE/QSYM</p>
    <p>Benchmark: Coverage</p>
    <p>Comparison with KLEE (56 programs):</p>
    <p>SymCC is better on 46 and worse on 10</p>
    <p>Comparison with QSYM (116 programs):</p>
    <p>SymCC is better on 47, worse on 40, and</p>
    <p>equal on 29</p>
  </div>
  <div class="page">
    <p>Real-world targets: Setup</p>
    <p>Goal: show scalability to real-world software  Popular open-source projects: OpenJPEG, libarchive, tcpdump  Hybrid fuzzing: AFL and concolic execution with SymCC/QSYM</p>
    <p>Same approach as Driller and QSYM  2 AFL processes, 1 SymCC/QSYM (like in QSYMs evaluation)</p>
    <p>Intel Xeon Platinum 8260 CPU with 2GB of RAM per core  24 hours, 30 iterations ( roughly 17 CPU core months)  Excluded KLEE: unsupported instructions in target programs</p>
  </div>
  <div class="page">
    <p>Real-world targets: Results  Higher coverage than QSYM  Statistically significant coverage difference</p>
    <p>(Mann-Whitney-U, p &lt; 0.0002)</p>
    <p>Found 2 CVEs in OpenJPEG  Speed advantage correlates with</p>
    <p>coverage gain</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>We have shown that compilation makes symbolic execution more efficient.</p>
    <p>SymCC compiles symbolic-execution capabilities into binaries Orders of magnitude faster than state of the art</p>
    <p>Significantly more code coverage per time, 2 CVEs</p>
  </div>
  <div class="page">
    <p>Thank you! sebastian.poeplau@eurecom.fr aurelien.francillon@eurecom.fr</p>
    <p>https://github.com/eurecom-s3/symcc (code, docs, evaluation details)</p>
  </div>
</Presentation>
