<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Tiered Fault Tolerance for LongTerm Integrity</p>
    <p>ByungGon Chun (Intel Research Berkeley)</p>
    <p>Joint work with Petros ManiaCs (Intel Research Berkeley),</p>
    <p>ScoF Shenker (UC Berkeley, ICSI), and John Kubiatowicz (UC Berkeley)</p>
  </div>
  <div class="page">
    <p>Longterm applicaCons</p>
    <p>write(xfile, )</p>
    <p>read(xfile)</p>
  </div>
  <div class="page">
    <p>Nearterm soluCons do not fit</p>
    <p>BFT replicated systems: correct if the number of faulty replicas is always less than some fixed threshold (1/3 of the replicas)</p>
  </div>
  <div class="page">
    <p>Nearterm soluCons do not fit</p>
    <p>Node Node Node Node</p>
  </div>
  <div class="page">
    <p>A new approach to designing longterm applicaCons</p>
    <p>A reliability of a systems components over long spans of Cme can vary dramaCcally</p>
    <p>Consider this differenCaCon for longterm applicaCons =&gt; Tiered faulttolerant system framework</p>
    <p>Apply the framework to construct Bonafide, a longterm keyvalue store</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Tiered fault tolerance framework  Bonafide: a longterm keyvalue store  Tiers: Trusted, Semitrusted, Untrusted</p>
    <p>EvaluaCon</p>
  </div>
  <div class="page">
    <p>Monolithic faulttolerant system model</p>
    <p>Node Node Node Node</p>
  </div>
  <div class="page">
    <p>Tiered faulttolerant system model</p>
    <p>Node Node Node Node</p>
  </div>
  <div class="page">
    <p>Sources of differenCaCon</p>
    <p>Different assurance pracCces  Formally verified components vs. typeunsafe so\ware</p>
    <p>Care in the deployment of a system  Tight physical access controls, responsive system administraCon vs. unreliable organizaCon</p>
    <p>Rolling procurement of hardware and so\ware  A trusted logical component vs. a less trusted component</p>
    <p>Limited exposure  Mostly offline vs. online</p>
  </div>
  <div class="page">
    <p>ReallocaCon of dependability budget</p>
    <p>Use differenCaCon to refactor systems into mulCple components in different fault Cers</p>
    <p>Different operaConal pracCces for each component class</p>
    <p>Hightrust component</p>
    <p>Formally verified Limited funcConality Run infrequently/briefly</p>
    <p>Lowtrust component</p>
    <p>Buggier Larger Run conCnuously</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Tiered fault tolerance framework  Bonafide: a longterm keyvalue store  Tiers: Trusted, Semitrusted, Untrusted</p>
    <p>EvaluaCon</p>
  </div>
  <div class="page">
    <p>Bonafide</p>
    <p>A keyvalue store designed to provide long term integrity using the Cered fault framework  NonselfcerCfying data  A naming service for selfcerCfying archival storage</p>
    <p>Simple interface:  Add(key, value)  Get(key) &gt; value</p>
  </div>
  <div class="page">
    <p>Design RaConale</p>
    <p>Refactor the fucConality of the service into  A more reliable fault Cer for state changes  A less reliable fault Cer for readonly state queries</p>
    <p>IsolaCon between these two Cers  Trusted component for protecCng state during execuCon of the unreliable Cer</p>
    <p>Use an algorithm to protect large service state with the component</p>
    <p>Mask faults of the component in the more reliable Cer  Use a BFT replicated state machine  Mostly offline, execute in a synchronized fashion</p>
  </div>
  <div class="page">
    <p>OperaCon of Bonafide</p>
    <p>Time</p>
    <p>Node 1</p>
    <p>Node 2</p>
    <p>Node N (N=3f+1)</p>
    <p>S U S U U S</p>
    <p>S: Service U: Update</p>
  </div>
  <div class="page">
    <p>Components in Bonafide and their associated fault Cers</p>
    <p>Fault bound Component When How used</p>
    <p>MAS (Moded S phase Read AFested Storage) U phase WriFen/Read</p>
    <p>Update U phase Replicate store Serve ADDs</p>
    <p>Unbounded Service S phase Serve GETs Buffer ADDs Audit/Repair</p>
  </div>
  <div class="page">
    <p>Guarantees</p>
    <p>Guarantees integrity of returned data under our Cered fault assumpCon</p>
    <p>Ensures liveness of S phases with fewer than 2/3 faulty replicas during S phases</p>
    <p>Ensures durability if the system creates copies of data faster than they are lost</p>
  </div>
  <div class="page">
    <p>Bonafide replica state and process</p>
    <p>ModedAFested Storage (MAS)</p>
    <p>Buffer</p>
    <p>Trusted storage</p>
    <p>Untrusted storage</p>
    <p>Get</p>
    <p>Audit/ Repair</p>
    <p>Add</p>
    <p>S phase</p>
    <p>Update</p>
    <p>U phase</p>
    <p>AuthenCcated Search Tree (AST)</p>
  </div>
  <div class="page">
    <p>Top Cer: trusted</p>
    <p>Cryptography and trusted hardware  Watchdog: Cme source, periodic reboot, sets a mode bit of MAS</p>
    <p>MAS: a mode bit, a set of storage slots, signing key  Store(q, v): store value v at slot q only in U phases  Lookup(q, z) &gt; value v of slot q and fresh aFestaCon (nonce z)</p>
  </div>
  <div class="page">
    <p>BoFom Cer: get</p>
    <p>Client</p>
    <p>&lt;Get,k,z&gt;</p>
    <p>&lt;Get,k,z&gt;</p>
    <p>&lt;Get,k,z&gt;</p>
    <p>&lt;Get,k,z&gt; Reply,k,v,proof,&lt;rd,z&gt;</p>
    <p>Reply,k,v,proof,&lt;rd,z&gt;</p>
    <p>f+1 (=2) valid matching responses</p>
    <p>Get operaCon (S phase)</p>
  </div>
  <div class="page">
    <p>BoFom Cer: add</p>
    <p>Client</p>
    <p>&lt;Add,k,v&gt;</p>
    <p>&lt;Add,k,v&gt;</p>
    <p>&lt;Add,k,v&gt;</p>
    <p>&lt;Add,k,v&gt;</p>
    <p>Add operaCon (S phase)</p>
    <p>Reply,k,v,proof,&lt;rd,z&gt;</p>
    <p>Reply,k,v,proof,&lt;rd,z&gt;</p>
    <p>f+1 (=2) valid matching responses</p>
    <p>Replies with MAS aFestaCon are sent a\er the following U phase.</p>
  </div>
  <div class="page">
    <p>BoFom Cer: audit and repair</p>
    <p>MAS</p>
    <p>Fetch</p>
  </div>
  <div class="page">
    <p>Middle Cer: update process</p>
    <p>Reboot</p>
    <p>AST update/ Checkpoint</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>EvaluaCng the performance of Bonafide implementaCon</p>
    <p>A prototype built with sfslite, PBFT, Berkeley DB libraries  Server Add/Get, Audit/Repair, Update processes  Client proxy process</p>
    <p>Experiment setup  Four replica nodes (outdated P4 PCs) running Fedora in a LAN</p>
    <p>1 million keyvalue pairs iniCally populated  Add/Get Cme, Audit/repair Cme, U phase duraCon</p>
  </div>
  <div class="page">
    <p>Performance evaluaCon</p>
    <p>Opera:on Time (ms) Mean (std)</p>
    <p>Get 3.1 (0.24)</p>
    <p>Add 1.0 (0.21)</p>
    <p>Data loss (%) Audit/Repair Time (s) Mean (std)</p>
    <p>Ac:on Time (s) Mean (std)</p>
    <p>Reboot 86.6 (2.1)</p>
    <p>Proposal creaCon 8.0 (4.0)</p>
    <p>Agreement 5.2 (1.0)</p>
    <p>AST update/Checkpoint 271.1 (24.8)</p>
    <p>Total 370.9 (24.0)</p>
    <p>Get/Add Cme Audit/Repair Cme</p>
    <p>U phase duraCon</p>
  </div>
  <div class="page">
    <p>Availability</p>
    <p>A va ila b ili ty</p>
    <p>U phase dura:on (minutes)</p>
    <p>U phase period = 9 hours</p>
    <p>U phase period = 6 hours</p>
    <p>U phase period = 3 hours</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>BFT systems  PBFT, PBFTPR, COCA  BFT2F, A2MPBFT, A2M  BFT erasurecoded storage</p>
    <p>DifferenCaCng trust levels  Hybrid system model  wormholes model  Hybrid fault model  Different fault thresholds to different sites or clusters</p>
    <p>Longterm stores  SelfcerCfying bitstore  AnCquity, Oceanstore, Pergamum, Glacier, etc.</p>
    <p>LOCKSS, POTSHARDS, CATS</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Present a Cered faulttolerant system framework  A2M (SOSP07), Bonafide (FAST09), TrInc (NSDI09)</p>
    <p>Build Bonafide, a safer keyvalue store (of non selfcerCfying data) for longterm integrity with the framework</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
