<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hanyang University Texas A&amp;M University Samsung Electronics</p>
    <p>Youjip Won, Jaemin Jung, Gyeongyeol Choi, Joontaek Oh, Seongbae Son, Jooyoung Hwang, Sangyeun Cho</p>
    <p>Barrier Enabled IO Stack for Flash Storage</p>
  </div>
  <div class="page">
    <p>Motivation</p>
  </div>
  <div class="page">
    <p>Modern IO Stack</p>
    <p>CacheIO Scheduler</p>
    <p>Command Queue</p>
    <p>Host Storage</p>
    <p>Dispatch Queue</p>
    <p>HDD</p>
    <p>Issue () Persist ()Transfer ()Dispatch ()</p>
    <p>: IO Scheduling</p>
    <p>: Time out, retry, command priority</p>
    <p>X  : Cache replacement, page table update algorithm of FTL</p>
    <p>Modern IO stack is Orderless.</p>
  </div>
  <div class="page">
    <p>Storage Order</p>
    <p>Host Storage</p>
    <p>Issue () Persist ()Transfer ()Dispatch ()</p>
    <p>Apps</p>
    <p>=   ( = )  ( = )</p>
    <p>Issue (I)</p>
    <p>Storage Order: The order in which the data blocks are made durable.</p>
    <p>Guaranteeing the storage order</p>
    <p>Storage order guarantee Persist (P)</p>
  </div>
  <div class="page">
    <p>Controlling the Storage Order</p>
    <p>Logging Commit Checkpoint</p>
    <p>Applications need to control the storage order.</p>
    <p>Database logging</p>
    <p>Filesystem Journaling</p>
    <p>Soft-updates</p>
    <p>COW based filesystem</p>
    <p>IO scheduler, dispatch Disk scheduler, FTL</p>
  </div>
  <div class="page">
    <p>Intel Optane 300 K IOPS</p>
    <p>UFS 2.0 45K IOPS</p>
    <p>NVMe PM1725 1 M IOPS</p>
    <p>Storage Vendor</p>
    <p>Storage</p>
    <p>Service Provider</p>
    <p>I/O is Bottleneck!!!</p>
    <p>Whats Happening Now....</p>
  </div>
  <div class="page">
    <p>Mobile Storage</p>
    <p>Server StorageHDD</p>
    <p>(O rd</p>
    <p>e re</p>
    <p>d I</p>
    <p>O )</p>
    <p>/ (</p>
    <p>O rd</p>
    <p>e r le</p>
    <p>s s I</p>
    <p>O )</p>
    <p>(% )</p>
    <p>Overhead of storage order guarantee: write() + fdatasync()</p>
  </div>
  <div class="page">
    <p>Why has IO stack been orderless for the last 50 years?</p>
    <p>cache HDD250MB @ 1970s</p>
    <p>In HDD, host cannot control the persist order.</p>
    <p>=    =   ( = )  ( = )</p>
    <p>Disk Scheduler</p>
  </div>
  <div class="page">
    <p>Enforcing Storage Order in spite of Orderless IO Stack</p>
    <p>write (A) ;</p>
    <p>write (B) ;</p>
    <p>write (A) ;</p>
    <p>Transfer-and-flush;</p>
    <p>write (B) ;</p>
    <p>Interleave the write request with Transfer-and-Flush</p>
    <p>Host</p>
    <p>Storage Flush DMA</p>
    <p>DMA</p>
    <p>To enforce transfer order, block the caller !</p>
    <p>write(A); write(B);</p>
    <p>To enforce persist order, drain the cache !</p>
  </div>
  <div class="page">
    <p>Transfer-and-Flush</p>
    <p>Host Storage</p>
    <p>Apps</p>
  </div>
  <div class="page">
    <p>Overhead of Transfer-and-Flush</p>
    <p>NVMe PM1725 2K IOPS</p>
    <p>NVMe PM1725 120K IOPS</p>
    <p>Ordering Guarantee</p>
    <p>&lt; 2%</p>
    <p>Buffered IO (IOPS X 103) 0 50 100 150 200 250</p>
    <p>(F lu</p>
    <p>s h I</p>
    <p>O )</p>
    <p>/ (</p>
    <p>B u f f e r e d I</p>
    <p>O )</p>
    <p>(% )</p>
    <p>Storage Performance (IOPS)</p>
    <p>Intel 750 440 K IOPS</p>
    <p>~~</p>
    <p>PM1725 1 M IOPS</p>
    <p>Host</p>
    <p>Storage</p>
    <p>Host</p>
    <p>Storage</p>
  </div>
  <div class="page">
    <p>Developing Barrier-enabled IO Stack</p>
  </div>
  <div class="page">
    <p>Seek and rotational delay.</p>
    <p>The host cannot control persist</p>
    <p>order.</p>
    <p>the IO stack becomes orderless.</p>
    <p>use transfer-and-flush to</p>
    <p>control the storage order</p>
    <p>HDD</p>
    <p>Seek and rotational delay</p>
    <p>The host may control persist</p>
    <p>order.</p>
    <p>The IO stack may become order</p>
    <p>preserving.</p>
    <p>Control the storage order without</p>
    <p>Transfer-and-Flush</p>
    <p>Controller</p>
    <p>In the era of HDD (circa 1970)</p>
    <p>In the era of SSD (circa 2000)</p>
  </div>
  <div class="page">
    <p>It is a time to re-think the way to control the storage order.</p>
  </div>
  <div class="page">
    <p>Barrier-enabled IO Stack</p>
    <p>Controller</p>
    <p>BarrierFS</p>
    <p>Order-preserving dispatch</p>
    <p>Epoch-based IO scheduling</p>
    <p>Barrier write command Barrier-enabled Storage</p>
    <p>B</p>
    <p>Order-preserving Block Device Layer</p>
    <p>Dual-Mode Journaling</p>
    <p>fbarrier() / fdatabarrier()</p>
  </div>
  <div class="page">
    <p>Barrier-enabled Storage</p>
    <p>Host Storage</p>
    <p>File System</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>To Control the Persist Order, X = P</p>
    <p>barrier command (2005, eMMC)</p>
    <p>write (A) ;</p>
    <p>write (B) ;</p>
    <p>write (C) ;</p>
    <p>barrier;</p>
    <p>write (D) ;</p>
    <p>B</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>barrier-write ; write ;</p>
    <p>barrier ;</p>
    <p>single command</p>
    <p>Barrier Write</p>
    <p>write A</p>
    <p>write B</p>
    <p>barrier-write C</p>
    <p>write D</p>
    <p>Persisted before</p>
    <p>Persisted after</p>
  </div>
  <div class="page">
    <p>With Barrier Write command,</p>
    <p>host can control the persist order</p>
    <p>=    =   ( = )  ( = )</p>
    <p>without flush.</p>
  </div>
  <div class="page">
    <p>Order-preserving Block Device Layer</p>
    <p>Host Storage</p>
    <p>File System</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>Order Preserving Block Device Layer</p>
    <p>New request types</p>
    <p>Order Preserving Dispatch</p>
    <p>Epoch Based IO scheduling</p>
  </div>
  <div class="page">
    <p>Request Types</p>
    <p>? block layer</p>
    <p>Cache</p>
    <p>{A,B,E}  {G,H}</p>
    <p>Orderless Order-Preserving</p>
    <p>REQ_ORDERED | REQ_BARRIER</p>
    <p>REQ_ORDERED</p>
    <p>FGH E D C B A HFE D A C B EH E E AG B A H B E</p>
  </div>
  <div class="page">
    <p>Order Preserving Dispatch Module (for D = X)</p>
    <p>Ensure that the barrier request is serviced in-order.</p>
    <p>Cache</p>
    <p>Command Queue</p>
    <p>Storage</p>
    <p>Dispatch Queue</p>
    <p>write A</p>
    <p>barrier-write B //set the command priority to ORDERED</p>
    <p>write C</p>
    <p>BC</p>
    <p>Set the command priority of barrier type request to ORDERED.</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>SCSI Command Priority</p>
    <p>Head of the Queue</p>
    <p>Ordered (Barely being used)</p>
    <p>Simple (Default)</p>
    <p>Command QueueDispatch Queue</p>
    <p>(HoQ)</p>
    <p>Command Queue</p>
    <p>(Ordered)</p>
    <p>Command Queue</p>
    <p>(Simple)</p>
    <p>anywhere</p>
    <p>Dispatch Queue</p>
    <p>Dispatch Queue</p>
  </div>
  <div class="page">
    <p>Order Preserving Dispatch</p>
    <p>Host</p>
    <p>Storage DMA</p>
    <p>DMA</p>
    <p>write(A); write(B);</p>
    <p>Legacy Dispatch</p>
    <p>Host</p>
    <p>Storage DMA</p>
    <p>DMA</p>
    <p>write(A); // ordered</p>
    <p>write(B); //simple</p>
    <p>Order Preserving Dispatch</p>
    <p>Caller blocks.</p>
    <p>DMA transfer overhead</p>
    <p>Caller does not block.</p>
    <p>No DMA transfer overhead</p>
  </div>
  <div class="page">
    <p>With Order Preserving Dispatch, host can control the transfer order</p>
    <p>=    =   ( = )  ( = )</p>
    <p>without DMA transfer.</p>
  </div>
  <div class="page">
    <p>Epoch Based IO scheduler (for I = D)</p>
    <p>Ensure that the OP requests between the barriers can be freely scheduled.</p>
    <p>Ensure that the OP requests does not cross barrier boundary.</p>
    <p>Ensure that orderless requests can be freely scheduled independent with</p>
    <p>barrier.</p>
    <p>Epoch Based IO Scheduler</p>
    <p>W1 W2 W3</p>
    <p>Epoch Based IO Scheduler</p>
    <p>FIFO, CFQ, Deadline</p>
    <p>W4 W5 W6 W7</p>
    <p>Epoch Based Barrier</p>
    <p>Re-assignment</p>
  </div>
  <div class="page">
    <p>Epoch Based IO scheduler (for I = D)</p>
    <p>Ensure that the OP requests between the barriers can be freely scheduled.</p>
    <p>Ensure that the OP requests does not cross barrier boundary.</p>
    <p>Ensure that orderless requests can be freely scheduled independent with</p>
    <p>barrier.</p>
    <p>Epoch Based IO Scheduler</p>
    <p>W2 W3 W1</p>
    <p>Epoch Based IO Scheduler</p>
    <p>FIFO, CFQ, Deadline</p>
    <p>W4 W5 W6 W7</p>
    <p>Epoch Based Barrier</p>
    <p>Re-assignment</p>
  </div>
  <div class="page">
    <p>Epoch Based IO scheduler (for I = D)</p>
    <p>Ensure that the OP requests between the barriers can be freely scheduled.</p>
    <p>Ensure that the OP requests does not cross barrier boundary.</p>
    <p>Ensure that orderless requests can be freely scheduled independent with</p>
    <p>barrier.</p>
    <p>Epoch Based IO Scheduler</p>
    <p>W2 W3 W1</p>
    <p>Epoch Based IO Scheduler</p>
    <p>FIFO, CFQ, Deadline</p>
    <p>W4 W5 W6 W7</p>
    <p>Epoch Based Barrier</p>
    <p>Re-assignment</p>
  </div>
  <div class="page">
    <p>Epoch Based IO scheduler (for I = D)</p>
    <p>Ensure that the OP requests between the barriers can be freely scheduled.</p>
    <p>Ensure that the OP requests does not cross barrier boundary.</p>
    <p>Ensure that orderless requests can be freely scheduled independent with</p>
    <p>barrier.</p>
    <p>Epoch Based IO Scheduler</p>
    <p>W2 W3 W1</p>
    <p>Epoch Based IO Scheduler</p>
    <p>FIFO, CFQ, Deadline</p>
    <p>W6 W7 W4 W5</p>
    <p>Epoch Based Barrier</p>
    <p>Re-assignment</p>
  </div>
  <div class="page">
    <p>Epoch Based IO scheduler (for I = D)</p>
    <p>Ensure that the OP requests between the barriers can be freely scheduled.</p>
    <p>Ensure that the OP requests does not cross barrier boundary.</p>
    <p>Ensure that orderless requests can be freely scheduled independent with</p>
    <p>barrier.</p>
    <p>Epoch Based IO Scheduler</p>
    <p>W2 W3 W1</p>
    <p>Epoch Based IO Scheduler</p>
    <p>FIFO, CFQ, Deadline</p>
    <p>W6 W7 W4 W5</p>
    <p>Epoch Based Barrier</p>
    <p>Re-assignment</p>
  </div>
  <div class="page">
    <p>With Epoch Based IO Scheduling, host can control the dispatch order</p>
    <p>with existing IO scheduler.</p>
    <p>=    =   ( = )  ( = )</p>
    <p>Epoch-based IO scheduler</p>
    <p>Order-preserving dispatch</p>
    <p>barrier write</p>
  </div>
  <div class="page">
    <p>Order Preserving Block Device Layer</p>
    <p>CacheIO Scheduler</p>
    <p>Command Queue</p>
    <p>Host Storage</p>
    <p>Dispatch Queue</p>
    <p>Control Storage Order without Transfer-and-Flush !</p>
    <p>Flash</p>
    <p>File system</p>
  </div>
  <div class="page">
    <p>Legacy Block Layer (With Transfer-and-Flush)</p>
    <p>Host</p>
    <p>Storage Flush DMA</p>
    <p>DMA</p>
    <p>write(A); write(B);</p>
    <p>Host</p>
    <p>Storage</p>
    <p>bwrite(A); bwrite(B);</p>
    <p>Order Preserving Block Layer</p>
    <p>Enforcing the Storage Order</p>
    <p>No Flush !</p>
    <p>No DMA !</p>
    <p>No Context Switch !</p>
  </div>
  <div class="page">
    <p>Barrier-enabled Filesystem</p>
    <p>Host Storage</p>
    <p>File System</p>
    <p>Flash</p>
  </div>
  <div class="page">
    <p>New primitives for ordering guarantee</p>
    <p>fsync()</p>
    <p>Dirty pages</p>
    <p>journal transaction</p>
    <p>Durable</p>
    <p>fdatasync()</p>
    <p>Dirty pages</p>
    <p>durable</p>
    <p>fbarrier()</p>
    <p>Dirty pages</p>
    <p>Journal transaction</p>
    <p>durable</p>
    <p>fdatabarrier()</p>
    <p>Dirty pages</p>
    <p>durable</p>
    <p>Durability guarantee Ordering guarantee</p>
    <p>Journaling</p>
    <p>No journaling</p>
  </div>
  <div class="page">
    <p>fsync() in EXT4</p>
    <p>Two Flushes</p>
    <p>Three DMA Transfers</p>
    <p>A number of Context switches</p>
    <p>Filesystem</p>
    <p>Storage DMA</p>
    <p>fsync ()</p>
    <p>start</p>
    <p>JBD</p>
    <p>DMA</p>
    <p>Flush FUA</p>
    <p>fsync ()</p>
    <p>end</p>
    <p>D JD JC</p>
    <p>DMA</p>
    <p>{Dirty Pages (D), Journal Logs (JD)}  {Journal Commit (JC)}</p>
  </div>
  <div class="page">
    <p>fsync() in BarrierFS</p>
    <p>write Dirty pages D with order-preserving write</p>
    <p>write Journal Logs JD with barrier write</p>
    <p>write Journal Commit Block JC with barrier write</p>
    <p>flush</p>
    <p>order-preserving write (REQ_ORDERED)</p>
    <p>barrier write (REQ _ORDERED|REQ_BARRIER)</p>
    <p>order-preserving block device</p>
    <p>JD DJC</p>
    <p>Cache</p>
    <p>{D,JD}  {JC}</p>
    <p>BarrierFS D JCJC</p>
  </div>
  <div class="page">
    <p>Efficient fsync() implementation</p>
    <p>fsync() in EXT4</p>
    <p>FS</p>
    <p>JBD</p>
    <p>Storage</p>
    <p>start</p>
    <p>D JD JCFlush FUA</p>
    <p>FS</p>
    <p>JBD</p>
    <p>Storage</p>
    <p>start</p>
    <p>Flush</p>
    <p>end</p>
    <p>end</p>
    <p>fsync() in BarrierFS</p>
    <p>D JD JC</p>
  </div>
  <div class="page">
    <p>Dual Mode Journaling</p>
    <p>Journal Commit</p>
    <p>Dispatch write JD and write JC  Control plane</p>
    <p>Make JD and JC durable  Data Plane</p>
    <p>Dual Mode Journaling</p>
    <p>separate the control plane activity and the data plane activity.</p>
    <p>Separate thread to each</p>
    <p>Commit Thread (Control Plane)</p>
    <p>Flush Thread (Data Plane)</p>
    <p>Filesystem</p>
    <p>Storage</p>
    <p>JBD</p>
    <p>D JD JCFlush FUAD</p>
  </div>
  <div class="page">
    <p>Dual Mode Journaling</p>
    <p>Journal Commit</p>
    <p>Dispatch write JD and write JC  Control plane</p>
    <p>Make JD and JC durable  Data Plane</p>
    <p>Dual Mode Journaling</p>
    <p>separate the control plane activity and the data plane activity.</p>
    <p>Separate thread to each</p>
    <p>Commit Thread (Control Plane)</p>
    <p>Flush Thread (Data Plane)</p>
    <p>Filesystem</p>
    <p>Storage</p>
    <p>Commit</p>
    <p>Flush</p>
    <p>Flush</p>
  </div>
  <div class="page">
    <p>Implications of Dual Thread Journaling</p>
    <p>Journaling becomes concurrent activity.</p>
    <p>Efficient Separation of Ordering Guarantee and Durability Guarantee</p>
    <p>fsync()</p>
    <p>fsync()</p>
    <p>fsync()</p>
    <p>fsync()</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>T4</p>
    <p>Filesystem</p>
    <p>Storage</p>
    <p>Commit</p>
    <p>Flush</p>
    <p>Flush</p>
    <p>fbarrier () fsync ()</p>
  </div>
  <div class="page">
    <p>fdatabarrier()</p>
    <p>write(fileA, Hello) ;</p>
    <p>fdatabarrier (fileA) ;</p>
    <p>write(fileA, World) ;</p>
    <p>DMA transfer overhead</p>
    <p>Flush overhead</p>
    <p>Context switch</p>
    <p>Host</p>
    <p>Storage</p>
    <p>DMA DMA</p>
    <p>write(Hello);//barrier write</p>
    <p>write(World);</p>
    <p>write Dirty pages D with order-preserving write</p>
    <p>BarrierFS</p>
    <p>write(Hello);//bwrite</p>
    <p>write(World);</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Platforms: PC server (Linux 3.16), Smartphone (Galaxy S6 Linux 3.10)</p>
    <p>Flash Storages:</p>
    <p>Mobile-SSD(UFS2.0, 2ch), Plain-SSD (SM 850, 8ch), Supercap-SSD (SM843, 8ch)</p>
    <p>Workload</p>
    <p>IO stack</p>
  </div>
  <div class="page">
    <p>Benefit of Order-Preserving Dipspatch</p>
    <p>Eliminating Flush</p>
    <p>Eliminating Transfer-and-Flush</p>
    <p>Eliminating the transfer overhead is critical.</p>
  </div>
  <div class="page">
    <p>Journaling Scalability</p>
    <p>4 KB Allocating write followed by fsync() [DWSL workload in FxMark]</p>
    <p>Concurrent Jounrnaling makes Journaling more scalable.</p>
  </div>
  <div class="page">
    <p>Mobile DBMS: SQLite</p>
    <p>in single channel 2.8x</p>
    <p>in 8 channel 76.5x</p>
    <p>Barrier enabled IO stack gets more effective as</p>
    <p>the parallelism of the Flash storage increases.</p>
  </div>
  <div class="page">
    <p>Server Workload: varmail / Insert(MySQL)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Modern IO stack is fundamentally driven by the legacy of rotating media.</p>
    <p>In Flash Storage, the PERSIST order can be controlled while in HDD, it cannot.</p>
    <p>In Barrier-enabled IO stack, we eliminate the Transfer-and-Flush in controlling</p>
    <p>the storage order.</p>
    <p>To storage vendors,</p>
    <p>Support for barrier command is a must.</p>
    <p>To service providers,</p>
    <p>IO stack should eliminate not only the flush overhead</p>
    <p>but also the transfer overhead.</p>
  </div>
  <div class="page">
    <p>@2028</p>
    <p>Orderless IO (IOPS X 103)</p>
    <p>(O rd</p>
    <p>e re</p>
    <p>d I</p>
    <p>O )</p>
    <p>/ (</p>
    <p>O rd</p>
    <p>e rl</p>
    <p>e s s</p>
    <p>I O</p>
    <p>)( %</p>
    <p>)</p>
    <p>@2018</p>
    <p>@2028</p>
    <p>Barrier-enabled IO Stack</p>
    <p>Orderless IO Stack</p>
    <p>It is time for a change.</p>
  </div>
  <div class="page">
    <p>https://github.com/ESOS-Lab/barrieriostack</p>
  </div>
</Presentation>
