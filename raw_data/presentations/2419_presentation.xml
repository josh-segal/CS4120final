<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Extensible Monitoring with Nagios and Messaging Middleware LISA 2012</p>
    <p>Jonathan Reams &lt;jreams@columbia.edu&gt;</p>
  </div>
  <div class="page">
    <p>Symon Says Nagios Project</p>
    <p>Replace 12-year-old home grown monitoring system  Very customized  Very engineered  Very unsupported</p>
    <p>~17,000 checks  Mandate to move to Nagios</p>
  </div>
  <div class="page">
    <p>False Start</p>
    <p>a. High check latency</p>
    <p>b. High load</p>
  </div>
  <div class="page">
    <p>Stock Nagios</p>
    <p>Nagios Host</p>
    <p>Nagios Process</p>
    <p>Check Results</p>
    <p>Nagios Reapers</p>
    <p>Check Processes</p>
    <p>Status Data File</p>
    <p>CGIs Sysadmin</p>
  </div>
  <div class="page">
    <p>Nagios Problems</p>
    <p>Trapped on one host:  Check results  Status data  Configuration data</p>
    <p>Nagios isnt a great executor  Forks 2 processes per check  Everything is basically synchronous  async achieved</p>
    <p>with multiple processes  Data format is simple but non-standard</p>
  </div>
  <div class="page">
    <p>Nagios Problems</p>
    <p>Implementation is all in C  hard to customize  Can be I/O bound by reading/writing check result files  Cannot query data from status file/configuration without</p>
    <p>reading/parsing all of it  Input via FIFO gives no feedback and has a limited</p>
    <p>buffer size</p>
  </div>
  <div class="page">
    <p>Nagios Problems</p>
    <p>Communication is hard!</p>
  </div>
  <div class="page">
    <p>My Solution</p>
    <p>NagMQ</p>
    <p>A ZeroMQ-based API for Nagios</p>
  </div>
  <div class="page">
    <p>Background on ZeroMQ</p>
    <p>Broker-less messaging kernel in a single library  Emulates Berkeley socket API  Supports IPC/TCP/Multicast transports  Fanout, pub/sub, pipe-line, and request/reply messaging</p>
    <p>patterns  All I/O is asynchronous after connections are established</p>
    <p>with dedicated I/O threads  Bindings available for large number of operating systems</p>
    <p>and languages  Agnostic of data being sent  no defined data format</p>
  </div>
  <div class="page">
    <p>NagMQ</p>
  </div>
  <div class="page">
    <p>Event Publisher &amp; Commands</p>
    <p>Host check result from publisher host_check_processed localhost</p>
    <p>{ &quot;host_name&quot;: &quot;localhost&quot;, &quot;check_type&quot;: 0, &quot;check_options&quot;: 0, &quot;scheduled_check&quot;: 1, &quot;reschedule_check&quot;: 1, &quot;current_attempt&quot;: 1, &quot;max_attempts&quot;: 1, &quot;state&quot;: 0, &quot;last_state&quot;: 0, &quot;last_hard_state&quot;: 0, &quot;last_check&quot;: 1354996955, &quot;last_state_change&quot;: 1337098090, &quot;latency&quot;: 1.63600, &quot;timeout&quot;: 60, &quot;type&quot;: &quot;host_check_processed&quot;, &quot;start_time&quot;: { &quot;tv_sec&quot;: 1354996955, &quot;tv_usec&quot;: 636453 }, &quot;end_time&quot;: { &quot;tv_sec&quot;: 1354996964, &quot;tv_usec&quot;: 161965 }, &quot;early_timeout&quot;: 0, &quot;execution_time&quot;: 0.07324, &quot;return_code&quot;: 0, &quot;output&quot;: &quot;Host up&quot;, &quot;long_output&quot;: null, &quot;perf_data&quot;: null, &quot;timestamp&quot;: { &quot;tv_sec&quot;: 1354996964, &quot;tv_usec&quot;: 161966 } }</p>
    <p>Command to add an acknowledgement to service problem {'comment_data': 'Stop alerting me!!', 'notify_contacts': False, 'author_name': jreams', 'persistent_comment': False, 'host_name': 'localhost', 'service_description': 'rotate-unix', 'time_stamp': {'tv_sec': 1355074576}, 'type': 'acknowledgement'}</p>
  </div>
  <div class="page">
    <p>State Data</p>
    <p>Request {'keys': ['host_name', 'services', 'hosts', 'service_description', 'current_state', 'members', 'type', 'name', 'problem_has_been_acknowledged', 'plugin_output', 'checks_enabled', 'notifications_enabled', 'event_handler_enabled'], 'include_services': True, 'host_name': 'localhost'}</p>
    <p>Response [{'checks_enabled': True, 'notifications_enabled': True, 'current_state': 0, 'plugin_output': 'Host up', 'problem_has_been_acknowledged': 0, 'event_handler_enabled': True, 'host_name': 'localhost', 'services': ['rotate-unix'], 'type': 'host'}, {'checks_enabled': False, 'notifications_enabled': True, 'current_state': 1, 'plugin_output': 'You are now on call', 'problem_has_been_acknowledged': False, 'event_handler_enabled': True, 'host_name': 'localhost', 'service_description': 'rotate-unix', 'type': 'service'}]</p>
  </div>
  <div class="page">
    <p>Some examples</p>
    <p>Distributed check execution (mqexec)  Custom user interfaces (nag.py, etc)  High availability (haagent.py, halib.py)</p>
  </div>
  <div class="page">
    <p>mqexec</p>
  </div>
  <div class="page">
    <p>mqexec</p>
    <p>Asynchronous command executor  Subscribes to host_check_initiate,</p>
    <p>service_check_initiate, and event_handler_start messages, and executes command line specified</p>
    <p>Can filter which commands to execute based on any attribute in message</p>
    <p>Receives messages as  Fair-queued worker pool (pull from MQ broker)  Individual worker (subscribe directly to NagMQ)</p>
    <p>Sends results back to command interface of NagMQ</p>
  </div>
  <div class="page">
    <p>Performance: Stock Nagios</p>
    <p>Max Host Avg Host Max Svc Avg Svc</p>
    <p>Time in Minutes</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y</p>
    <p>i n</p>
    <p>S e</p>
    <p>c o</p>
    <p>n d</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Performance: NagMQ/mqexec</p>
    <p>Max Host Avg Host Max Svc Avg Svc</p>
    <p>Time in Minutes</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y</p>
    <p>i n</p>
    <p>S e</p>
    <p>c o</p>
    <p>n d</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>User Interfaces</p>
    <p>Command-line $ nag.py -c 'Stop alerting me!!' add ack localhost</p>
    <p>[localhost]: No problem found</p>
    <p>[uptime@localhost]: Acknowledgement added</p>
    <p>Python/Javascript/Twitter Bootstrap web interface using NagMQ (see demo)</p>
    <p>Interface to Twitter</p>
  </div>
  <div class="page">
    <p>High Availability  Stock Nagios</p>
  </div>
  <div class="page">
    <p>High Availability - NagMQ</p>
  </div>
  <div class="page">
    <p>High Availability - NagMQ</p>
    <p>Use regular program_status to provide heartbeat  Retrieve active state from state interface to bring passive</p>
    <p>node into sync with active node on startup  Subscribe to and send check result messages,</p>
    <p>acknowledgements, downtimes, and adaptive changes to command interface</p>
    <p>Passive hosts mqexec(s) run checks for whatever host is active</p>
    <p>Use VIFs owned by the message broker to direct traffic to active host</p>
  </div>
  <div class="page">
    <p>Why not use one of these?</p>
    <p>LiveStatus  live state query module with check execution workers</p>
    <p>Mod_gearman  distributed check execution based on gearman job queue</p>
    <p>Merlin  database/distributed backend for Nagios  Ndoutils  database backend for Nagios  NSCA  allows check/command submission over</p>
    <p>network  NRPE  remote check executor</p>
  </div>
  <div class="page">
    <p>API  not a product</p>
    <p>NagMQ is just an interface into Nagios, not a product  Better communication with clients comes from larger</p>
    <p>ZeroMQ project  leaving NagMQ to focus on Nagios  Implement ad-hoc tools for Nagios without having to</p>
    <p>write any compiled code  Doing expensive data processing of monitoring data</p>
    <p>doesnt have to create latency in monitoring system  Re-use one interface for many tools</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Pluggable authentication/encryption for NagMQ  Pluggable parser/emitter for custom data formats (XML,</p>
    <p>Yaml, etc)  NDOutils database replacement  More user interfaces (Jabber, SMS, email gateway,</p>
    <p>REST API)  Nagios 4</p>
  </div>
  <div class="page">
    <p>NagMQ</p>
    <p>https://github.com/jbreams/nagmq</p>
    <p>Jonathan Reams</p>
    <p>jbreams@gmail.com</p>
  </div>
</Presentation>
