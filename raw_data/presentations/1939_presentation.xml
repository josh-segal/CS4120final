<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Disaggregation and the Application</p>
    <p>Sebastian Angel Mihir Nanavati Siddhartha Sen</p>
  </div>
  <div class="page">
    <p>CPUs</p>
    <p>Memory</p>
    <p>G P</p>
    <p>U s</p>
    <p>Storage</p>
    <p>R D</p>
    <p>M A</p>
    <p>N IC</p>
    <p>Traditional data center racks</p>
  </div>
  <div class="page">
    <p>Prior and current disaggregation efforts</p>
  </div>
  <div class="page">
    <p>Towards DDCs</p>
    <p>OS kernel +</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Why? Many benefits for operators</p>
  </div>
  <div class="page">
    <p>Can you run regular applications on DDCs?</p>
    <p>Yes! OSes such as LegoOS [SOSP 18] provide a transparent POSIX API</p>
  </div>
  <div class="page">
    <p>Should you run regular applications on DDCs?</p>
    <p>Summary: terrible performance</p>
  </div>
  <div class="page">
    <p>App 1</p>
    <p>App 2</p>
    <p>Goal: send data from App 1 to App 2</p>
    <p>Key issue: Too much data movement</p>
  </div>
  <div class="page">
    <p>Key issue: Too much data movement</p>
    <p>App 1</p>
    <p>App 2</p>
    <p>Goal: send data from App 1 to App 2</p>
  </div>
  <div class="page">
    <p>Our position:</p>
    <p>OSes should expose the disaggregated nature of DDCs to applications and let</p>
    <p>them exploit it for their benefit</p>
  </div>
  <div class="page">
    <p>In the rest of this talk</p>
    <p>What abstractions should DDC OSes expose to applications?</p>
    <p>Which applications can benefit from these abstractions?</p>
  </div>
  <div class="page">
    <p>OSes can expose:</p>
    <p>That processes access the same memory nodes</p>
    <p>Failure independence</p>
    <p>Memory nodes might have a CPU/FPGA  Useful for near-data processing / computation offloading</p>
  </div>
  <div class="page">
    <p>We propose three new OS abstractions</p>
    <p>Memory grant</p>
    <p>Memory steal</p>
    <p>Failure informers / Spies</p>
  </div>
  <div class="page">
    <p>Memory grant</p>
    <p>App 1</p>
    <p>App 2</p>
  </div>
  <div class="page">
    <p>Properties of Grant</p>
    <p>Grant has move semantics  Grantor loses access to the memory  Similar to vmsplice with GIFT flag in Linux</p>
    <p>Virtual memory addresses remain the same  To preserve correctness of internal references  Problem: what if grantee already used those addresses?</p>
  </div>
  <div class="page">
    <p>Memory steal</p>
    <p>App 1</p>
    <p>App 2</p>
  </div>
  <div class="page">
    <p>Properties of Steal</p>
    <p>Same semantics as Grant  But is involuntary: Can happen at any time</p>
    <p>Meant to be used by different instances of the same app  Can coordinate through the network / use capabilities  Incorrect steal = bug</p>
    <p>Must ensure stolen memory is consistent  Can model with crash consistency</p>
  </div>
  <div class="page">
    <p>Failure informers / Spies</p>
    <p>App 1</p>
    <p>App 2</p>
    <p>FYI: My memory failed</p>
    <p>ok so now what?</p>
  </div>
  <div class="page">
    <p>In the rest of this talk</p>
    <p>What abstractions should DDC OSes expose to applications?</p>
    <p>Which applications can benefit from these abstractions?</p>
  </div>
  <div class="page">
    <p>Some applications</p>
    <p>Dataflow applications could  Use Grant to pass data around</p>
    <p>Use Steal to deal with stragglers</p>
    <p>New memcached instances can Steal part of object space (scale out)</p>
    <p>Paxos can use failure informers for quicker reconfigurations  Memory dies  Paxos replica informs others and then kills itself</p>
    <p>CPU dies  New replica takes over the dead CPUs memory and keeps going</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Running existing applications on DDC is not advisable</p>
    <p>There is potential in modifying apps to exploit the nature of DDCs</p>
    <p>OSes should expose more information and control to applications</p>
    <p>Grant Steal Spy</p>
  </div>
</Presentation>
