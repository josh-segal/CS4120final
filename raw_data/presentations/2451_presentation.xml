<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Xiapu Luo, Edmond W. W. Chan, Rocky K. C. Chang Department of Computing</p>
    <p>The Hong Kong Polytechnic University 20090617</p>
  </div>
  <div class="page">
    <p>Mo#va#ons  How to measure millions of arbitrary paths?  Active and noncooperative</p>
    <p>How to avoid biased measurement samples?  TCP data vs. TCP control and ICMP</p>
    <p>How to decrease the measurement overhead?</p>
    <p>How to measure multiple metrics?</p>
    <p>Our answer: OneProbe</p>
    <p>The figure is from CAIDAs gallery www.caida.org/ tools/visualization/walrus/gallery1/</p>
    <p>USENIX Annual Technical Conference 2009</p>
  </div>
  <div class="page">
    <p>Content  OneProbe Design  HTTP/OneProbe  Evaluation  Internet path measurement  Related work  Conclusions</p>
  </div>
  <div class="page">
    <p>Design principles  Measuring datapath quality</p>
    <p>TCP data packet vs. TCP control packet  Firewall  Size</p>
    <p>Using multiple metrics  Loss, RTT, Packet reordering</p>
    <p>Separating forward/reversepath measurement  Forward path: Measuring node to remote server</p>
    <p>Extensible  Different sampling processes  New metrics</p>
    <p>Compatibility  OneProbe exploits only basic mechanisms in TCP.</p>
    <p>Sequence number (SN), Acknowledgement number (AN), Advertising window, Maximum segment size (MSS), Flags.</p>
  </div>
  <div class="page">
    <p>Probing process  Notations</p>
    <p>Cm|n: a probe packet with SN=m and AN=n  Sm|n: a response packet with SN=m and AN=n</p>
    <p>An example</p>
    <p>OneProbe</p>
    <p>Server</p>
    <p>Time C1 C2</p>
    <p>S1|1 S2|2</p>
    <p>C3|1 C4|2</p>
    <p>S3|3 S4|4</p>
    <p>T1</p>
    <p>USENIX Annual Technical Conference 2009</p>
  </div>
  <div class="page">
    <p>Measuring RTT  The time between sending a probe packet and receiving its induced new data packet.  C3|1&lt;&gt; S3|3</p>
    <p>OneProbe</p>
    <p>Server</p>
    <p>Time C1 C2</p>
    <p>S1|1 S2|2</p>
    <p>C3|1 C4|2</p>
    <p>S3|3 S4|4</p>
    <p>RTT</p>
    <p>USENIX Annual Technical Conference 2009</p>
    <p>T1</p>
  </div>
  <div class="page">
    <p>Detec#ng packet loss and reordering  Five possible events on the forward path</p>
    <p>Five similar possible events on the reverse path  R0, RR, R1, R2, and R3</p>
    <p>USENIX Annual Technical Conference 2009 7</p>
    <p>Cases First probe packet</p>
    <p>Second probe packet</p>
    <p>Receive order</p>
    <p>F0   Same order</p>
    <p>FR   Reordered</p>
    <p>F1   N.A.</p>
    <p>F2   N.A.</p>
    <p>F3   N.A.</p>
  </div>
  <div class="page">
    <p>Iden#fy different events (I)  The 18 possible lossreordering events</p>
    <p>17 events indicated  and one event for F3  Events denoted by  are not possible.</p>
    <p>USENIX Annual Technical Conference 2009 8</p>
  </div>
  <div class="page">
    <p>Iden#fy different events (II)  Information used to distinguish them  SN, AN of response packets and retransmitted packets</p>
    <p>USENIX Annual Technical Conference 2009 9</p>
  </div>
  <div class="page">
    <p>Example  Forwardpath reordering only (FR*R0)</p>
    <p>OneProbe</p>
    <p>Server</p>
    <p>Time</p>
    <p>S1|1 S2|2</p>
    <p>C3|1 C4|2</p>
    <p>S3|2 S4|2</p>
    <p>T1</p>
    <p>Timeout</p>
    <p>USENIX Annual Technical Conference 2009</p>
  </div>
  <div class="page">
    <p>Dis#nguish ambiguous events  F0*R3 vs. FR*R3</p>
    <p>Solution:  Use the fillingahole (FAH) ACK triggered by reordered C3|1.  Use the outoforderedpacket (OOP) ACK induced by reordered C4|2 would be used if the server replies it.</p>
    <p>If the server supports TCP timestamp, s timestamp will be :  Timestamp of C4 in case of F0*R3  Timestamp of C3 in case of FR*R3</p>
    <p>FAH ACK OOP ACK</p>
  </div>
  <div class="page">
    <p>Content  OneProbe Design  HTTP/OneProbe  Evaluation  Internet path measurement  Related work  Conclusions</p>
  </div>
  <div class="page">
    <p>Architecture (I)  Implementation</p>
    <p>Userlevel tool on Linux 2.6  Around 8000 lines of C code</p>
    <p>HTTP helper  Find qualified URLs</p>
    <p>At least five response packets  Avoid message compression</p>
    <p>AcceptEncoding:identity;q=1, *;q=0  Range</p>
    <p>Prepare HTTP GET requests  Expand the packet size through the Referer field.</p>
  </div>
  <div class="page">
    <p>Architecture (II)  OneProbe</p>
    <p>Manage measurement sessions  Connection pool  Sampling pattern: periodic, Poisson, etc.  Sampling rate</p>
    <p>Preparation phase and probing phase  Negotiate packet size  Help a server to increase its congestion window (cwnd)</p>
    <p>SelfDiagnosis  Have the probing packets been sent?  Are the response packets dropped due to insufficient buffer space?</p>
    <p>USENIX Annual Technical Conference 2009 14</p>
  </div>
  <div class="page">
    <p>Exception or Done</p>
    <p>No exception</p>
    <p>OK</p>
    <p>Procedure</p>
    <p>Start</p>
    <p>No probe task Preparation phase Probing phase</p>
    <p>USENIX Annual Technical Conference 2009</p>
  </div>
  <div class="page">
    <p>Content  OneProbe Design  HTTP/OneProbe  Evaluation  Internet path measurement  Related work  Conclusions</p>
  </div>
  <div class="page">
    <p>Valida#on  Four validation tests</p>
    <p>V0, VR, V1, V2 &lt;&gt; F0, FR, F1, F2</p>
    <p>39 operation systems and 35 Web server software</p>
    <p>Test 37,874 websites  Successful 93%  Fail in the preparation phase 1.03%</p>
    <p>Fail in V0 0.26%  Fail in VR 5.71%</p>
    <p>We use Netcrafts database to identify operating systems and Web servers found in the Internet .</p>
    <p>USENIX Annual Technical Conference 2009</p>
  </div>
  <div class="page">
    <p>Test bed experiments  Setup</p>
    <p>Light load: 20 Surge users  High load: 260 Surge users</p>
    <p>Major observations  By avoiding the startup latency, the HTTP/OneProbes RTT measurement is much less susceptible to server load and object size.</p>
    <p>HTTP/OneProbes CPU and memory consumption in both the probe sender and web server is very low.</p>
    <p>USENIX Annual Technical Conference 2009 18</p>
  </div>
  <div class="page">
    <p>Server induced latency  HTTP/OneProbe</p>
    <p>30 TCP connections and sampling rate 20Hz  Size of probe and response packets: 240 bytes</p>
    <p>HTTPing  HEAD request  Default sampling rate 1Hz  Packet size depends on URL and the corresponding response.</p>
    <p>Metric  Period between receiving a probe and sending out the first response packet</p>
    <p>USENIX Annual Technical Conference 2009 19</p>
  </div>
  <div class="page">
    <p>Effect of object size  Server induced latency</p>
    <p>USENIX Annual Technical Conference 2009 20</p>
  </div>
  <div class="page">
    <p>System resources consump#ons  Fetch a 61M object for 240 seconds with different number of TCP connections and sampling rates.</p>
    <p>Size of probe and response packets is 1500 byte.</p>
    <p>Average memory utilizations of the probe sender and web server were less than 2% and 6.3% in all cases.</p>
    <p>USENIX Annual Technical Conference 2009 21</p>
  </div>
  <div class="page">
    <p>Content  OneProbe Design  HTTP/OneProbe  Evaluation  Internet path measurement  Related work  Conclusions</p>
  </div>
  <div class="page">
    <p>Diurnal RTT and Loss paJerns  Web servers hosting the Olympic Games08</p>
    <p>Conduct periodic sampling (2HZ) for one minute and then become idle for four minutes in order to be less intrusive</p>
    <p>Path: HK (5)&gt;APTELEGLOBE (2)&gt;CNCGroup Backbone (4) &gt; Beijing Province Network (4)</p>
    <p>Observations  Diurnal RTT and roundtrip loss patterns  Positive correlation between RTT and loss rate  More losses and longer high RTT periods on weekends</p>
  </div>
  <div class="page">
    <p>Discrepancy between Ping and OneProbe RTTs  Path: HK (5)&gt;Korea(2)&gt;CNCGroup Backbone(4)&gt;Henan Province</p>
    <p>Network(5)  Observations:</p>
    <p>RTT consistently differed by around 100 ms during the peaks for the first 4 days.  They were similar in the valleys.  Their RTTs converged&quot; at 12 Aug. 2008 16:39 UTC (~1.5 hrs into the midnight).  Discrepancy detected even after the convergence point.</p>
  </div>
  <div class="page">
    <p>Related work  Sting</p>
    <p>Seminal work on TCPbased noncooperative measurement  Measure loss rate on both forward path and reverse path  Unreliable due to anomalous probe traffic (a burst of outofordered TCP probes with</p>
    <p>zero advertised window)  Lack of support for variable response packet size</p>
    <p>Tulip  Hopbyhop measurement tool based on ICMP  Locate packet loss and packet reordering events and measure queuing delay.  Require routers or hosts support consecutive IPID.</p>
    <p>TCP sidecar  Inject measurement probes in a nonmeasurement TCP connection.  Cannot measure all loss scenarios  Cannot control sampling pattern and rate.</p>
    <p>POINTER  Measure packet reordering on both forward path and reverse path  Unreliable due to anomalous probe traffic (unexpected SN and AN)</p>
  </div>
  <div class="page">
    <p>Conclusions  Proposed a new TCPbased noncooperative method</p>
    <p>Reliable  Metric rich</p>
    <p>Implemented HTTP/OneProbe and conduct extensive experiments in both test bed and Internet.  www.oneprobe.org</p>
    <p>Future work  Add new path metrics, e.g. capacity, available bandwidth, etc.</p>
    <p>Serverside OneProbe for opportunistic measurement.  Implement OneProbe into other TCPbased applications, e.g. P2P, video, etc.</p>
  </div>
  <div class="page">
    <p>Acknowledgement  This work is partially supported by a grant (ref. no. ITS/152/08) from the Innovation Technology Fund in Hong Kong.</p>
    <p>USENIX Annual Technical Conference 2009 27</p>
  </div>
  <div class="page"/>
</Presentation>
