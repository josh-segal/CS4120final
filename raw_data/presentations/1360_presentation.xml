<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Minestrone: Tes-ng the SOUP Azzedine Benameur, Nathan Evans, Ma?hew Elder</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Overview  MINESTRONE:  Architecture  Sta-c and dynamic detec-on technologies  I/O Redirec-on  External Replica Monitoring</p>
    <p>Test and evalua-on:  Architecture  Test suite  Results</p>
    <p>Closing Thoughts</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>IARPA STONESOUP Program: Securely Taking On New Executable SoLware of Uncertain Provenance</p>
    <p>Develop and demonstrate technology that provides comprehensive, automated techniques that allow end users to safely execute new soLware of uncertain provenance</p>
    <p>Addressing 8 weakness classes across 3 target language classes</p>
    <p>Team: Columbia University (PI: Angelos Keromy-s) with Stanford University, George Mason University (GMU), and Symantec</p>
    <p>4-year project, 3 phases 3</p>
  </div>
  <div class="page">
    <p>Overview: NSA Source Code Analysis Tool Evalua-on</p>
    <p>hYp://www.iarpa.gov/stonesoup_Merced_DHSAWGbrief.pdf  Evaluated suite of tools (Coverity Prevent, FindBugs, For-fy SCA, GrammaTech CodeSonar, Klocwork Insight, Ounce Labs Ounce, PMD) against both C/C++ and Java vulnerability test cases in different CWE (Common Weakness Enumera-on) classes</p>
  </div>
  <div class="page">
    <p>Overview: STONESOUP Program Targets</p>
    <p>Target classes of vulnerabili-es (including example CWE numbers):  Number handling (e.g., integer overflow/underflow, sign conversion: #190, #191  Resource drains (e.g., failure to release memory, structures, devices: #400, #404)  Tainted data/input valida-on errors (#78, #134)  Error handling (e.g., unhandled excep-ons/error status codes: #248, #252)  SQL injec-on / command injec-on (#78, #89)  Concurrency handling (e.g., race condi-ons, thread safety: #362, #366)  Buffer overflows/underflows/out of bounds accesses/memory safety (#121, #122)  Null pointer errors (#476)</p>
    <p>Target language classes:  Type-safe languages (Java, C#)  Type-unsafe languages (C, C++)  Binaries (x86, Windows or Linux)</p>
  </div>
  <div class="page">
    <p>MINESTRONE</p>
    <p>Architecture</p>
    <p>Sta-c and dynamic detec-on technologies</p>
    <p>Replica Diversifica-on</p>
    <p>I/O Redirec-on</p>
    <p>External Replica Monitoring</p>
  </div>
  <div class="page">
    <p>Unknown Software</p>
    <p>Lightweight Containers</p>
    <p>Lightweight Containers</p>
    <p>ISR + defensive instrumentation</p>
    <p>ISR + defensive instrumentation</p>
    <p>Unknown Software</p>
    <p>KLEE continuous symbolic execution</p>
    <p>Runtime</p>
    <p>O ffline/parallel</p>
    <p>Re pl ica</p>
    <p>te d ru</p>
    <p>nt im</p>
    <p>e</p>
    <p>Remove/optimize unneeded defenses</p>
    <p>Path exploration preference &amp; control flow</p>
    <p>information</p>
    <p>MINESTRONE System Composer</p>
    <p>Symbiotes</p>
    <p>Anomaly Detection</p>
    <p>Race Avoidance</p>
    <p>Race Detection</p>
    <p>Information flow tracking optimization</p>
    <p>Attack detection</p>
    <p>I/O &amp; state replication</p>
    <p>Symbiotes Anomaly Detection</p>
    <p>Deployed application</p>
    <p>(N instances)</p>
    <p>Backend analysis</p>
    <p>(M &lt;&lt; N instances)</p>
    <p>Instrumented replicas</p>
    <p>(P &lt; N instances)</p>
    <p>Resource Exhaustion Detection</p>
    <p>Resource Exhaustion Detection</p>
    <p>KLEE prophylactic</p>
    <p>analysis</p>
    <p>Minestrone Overview: System Architecture</p>
  </div>
  <div class="page">
    <p>MINESTRONE</p>
    <p>Architecture</p>
    <p>Sta-c and dynamic detec-on technologies</p>
    <p>I/O Redirec-on</p>
    <p>External Replica Monitoring</p>
  </div>
  <div class="page">
    <p>Detec-on technologies: Pin-based tools (theRing)</p>
    <p>REASSURE  Self-contained Mechanism for Healing SoLware Using Rescue Points  Detects program crashes and gracefully recovers</p>
    <p>ISR: Instruc-on Set Randomiza-on  Applica-on binary is randomized  Shared libraries can be also randomized</p>
    <p>DFT  Data flow tracking  High performance</p>
  </div>
  <div class="page">
    <p>Detec-on technologies: con-nued</p>
    <p>KLEE  Symbolic Execu-on  Fine-Grained detec-on</p>
    <p>Dyboc  Source to source transforma-on  Moving stack buffers to heap  Custom version of malloc(): pmalloc()</p>
    <p>Valgrind (baseline)  State of the art  Memcheck</p>
  </div>
  <div class="page">
    <p>MINESTRONE</p>
    <p>Architecture for confinement</p>
    <p>Sta-c and dynamic detec-on technologies</p>
    <p>I/O Redirec-on</p>
    <p>External Replica Monitoring</p>
  </div>
  <div class="page">
    <p>I/O Redirec-on: Network/Shared Memory/X11</p>
    <p>Paired-library:  Interpose_writer: writes to file from no-sec environment  Interpose_reader: read from file in all replicas</p>
  </div>
  <div class="page">
    <p>MINESTRONE</p>
    <p>Architecture for confinement</p>
    <p>Sta-c and dynamic detec-on technologies</p>
    <p>I/O Redirec-on</p>
    <p>External Replica Monitoring</p>
  </div>
  <div class="page">
    <p>External Replica Monitoring</p>
    <p>OpenVZ allows easy replica monitoring  CPU from /proc/vz/vestat  Memory using bean counters /proc/user_beancounters  Network from /vz/root/$replica_id/sys/class/net/venet0/sta-s-cs/ tx_bytes</p>
    <p>Overhead comparison:  Confinement between containers  Fair scheduling</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on</p>
    <p>Architecture</p>
    <p>Test suite</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on Process, contd.</p>
    <p>MITRE developed tes-ng framework and API  We/Symantec developed the interface to interact with the test harness</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on</p>
    <p>Architecture</p>
    <p>Test suite</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on: Test suite</p>
    <p>Vulnerability Classes:  Null pointer, 113 hYp://samate.nist.gov/SRD/testsuites/stonesoup/stonesoup-c-np.zip  Buffer Over/underflow, 231 hYp://samate.nist.gov/SRD/testsuites/stonesoup/stonesoup-c-mc.zip</p>
    <p>Input source:  Environment variable  Command line arguments  File  Network  Shared Memory  Clipboard</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on</p>
    <p>Architecture</p>
    <p>Test suite</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on: Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on: Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on: Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on: Results</p>
  </div>
  <div class="page">
    <p>Test and Evalua-on: Results</p>
  </div>
  <div class="page">
    <p>Closing Thoughts</p>
  </div>
  <div class="page">
    <p>Lessons learned</p>
    <p>Symbolic execu-on limita-ons:  Limited model  Very slow when it works (observed a 2700X overhead)</p>
    <p>Wri-ng test suite from scratch is tricky:  Stack not always ini-alized to 0  Provide the vulnerability loca-on to establish the ground truth</p>
    <p>I/O Redirec-on/replay is not a solved problem:  Many implementa-on available, ioapps, Jockey  Can you build it ? Do they work ?</p>
    <p>Enterprise products are not the silver bullet:  Single mul--purpose tools dont outperform single purpose tailed tools</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Copyright  2011 Symantec Corpora-on. All rights reserved. Symantec and the Symantec Logo are trademarks or registered trademarks of Symantec Corpora-on or its affiliates in the U.S. and other countries. Other names may be trademarks of their respec-ve owners. This document is provided for informa-onal purposes only and is not intended as adver-sing. All warran-es rela-ng to the informa-on in this document, either express or implied, are disclaimed to the maximum extent allowed by law. The informa-on in this document is subject to change without no-ce.</p>
    <p>Azzedine Benameur azzedine_benameur@symantec.com Nathan Evans nathan_evans@symantec.com MaYhew Elder maYhew_elder@symantec.com</p>
  </div>
</Presentation>
