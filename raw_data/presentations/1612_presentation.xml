<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sliding Look-Back Window Assisted Data Chunk Rewriting for Improving Deduplication Restore Performance</p>
    <p>Zhichao Cao1, Shiyong Liu2, Fenggang Wu1, Guohua Wang3, Bingzhe Li1, and David H.C. Du1</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Not Found</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Not Found</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Not Found</p>
    <p>Sliding Window Active container</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Found</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Found</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Deduplication Process [1]</p>
    <p>Recipe</p>
    <p>Active container</p>
    <p>Container Storage</p>
    <p>Indexing Table</p>
    <p>Byte Stream</p>
    <p>Found</p>
    <p>Sliding Window</p>
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14.</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Assembling Buffer</p>
    <p>Restore Process with Chunk-based Caching[2]</p>
    <p>Recipe</p>
    <p>Chunk Cache</p>
    <p>Restored Data Storage</p>
    <p>Container Read Buffer 223 182</p>
    <p>Container Storage</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Container Read Buffer</p>
    <p>Assembling Buffer</p>
    <p>Restored Data Storage</p>
    <p>Container Storage</p>
    <p>Restore Direction</p>
    <p>Limitations of Caching Scheme</p>
  </div>
  <div class="page">
    <p>Container Read Buffer</p>
    <p>Assembling Buffer</p>
    <p>Restored Data Storage</p>
    <p>Container Storage</p>
    <p>Restore Direction</p>
    <p>Limitations of Caching Scheme</p>
  </div>
  <div class="page">
    <p>Container Read Buffer</p>
    <p>Assembling Buffer</p>
    <p>Restored Data Storage</p>
    <p>Container Storage</p>
    <p>Restore Direction</p>
    <p>4 container reads to restore 4 chunks</p>
    <p>Limitations of Caching Scheme</p>
  </div>
  <div class="page">
    <p>Container Read Buffer</p>
    <p>Assembling Buffer</p>
    <p>Restored Data Storage</p>
    <p>Container Storage</p>
    <p>Restore Direction</p>
    <p>4 container reads to restore 4 chunks  Other chunks cannot benefit restore</p>
    <p>Limitations of Caching Scheme</p>
  </div>
  <div class="page">
    <p>Container Read Buffer</p>
    <p>Assembling Buffer</p>
    <p>Restored Data Storage</p>
    <p>Container Storage</p>
    <p>Restore Direction</p>
    <p>4 container reads to restore 4 chunks  Other chunks cannot benefit restoreCaching loses its power</p>
    <p>Limitations of Caching Scheme</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
    <p>1 container reads can restore 4 chunks</p>
  </div>
  <div class="page">
    <p>Data Chunk Rewrite Schemes</p>
    <p>Container Storage</p>
    <p>Active container</p>
    <p>Deduplication Direction</p>
    <p>1 container reads can restore 4 chunks  Tradeoff between space saving and</p>
    <p>restore performance</p>
  </div>
  <div class="page">
    <p>Nam et al. introduced the Chunk Fragmentation Level based data chunk rewrite [4-5]</p>
    <p>The mismatch level between byte stream context and data chunk disk context is used to decide the data chunks to be rewrite, which is presented by Kaczmarczyk et al. [6]</p>
    <p>Fu et al. proposed a History-Aware Rewriting algorithm (HAR) which identifies and rewrites sparse containers [7-8]</p>
    <p>Tan et al. proposed a Fine-Grained defragmentation approach (FGDefrag) to identify and rewrite the fragmental chunks [9]</p>
    <p>Container capping was proposed by Lillibridge et al. [3]</p>
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Rewrite sacrifices deduplication ratio (space saving), how to make better tradeoffs between deduplication ratio and restore performance is challenging;</p>
    <p>Rewrite is done during the deduplication process, information is limited. Most related studies are based on the past statistic information to make the decision. How to decide the data chunks to be rewritten with limited information is challenging;</p>
    <p>The restore caching effectiveness should be considered during the dedup to reduce unnecessary rewrites. However, how to integrate caching with rewrite is not clearly investigated</p>
    <p>Challenges of Rewrite</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Keep the original referencing</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Keep the original referencing</p>
    <p>Rewrite and reference to the new container</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Keep the original referencing</p>
    <p>Rewrite and reference to the new container</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Keep the original referencing</p>
    <p>Rewrite and reference to the new container</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Keep the original referencing</p>
    <p>Rewrite and reference to the new container</p>
    <p>Pros: 1) simple and efficient 2) guarantee the higher bound of container reads</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Introduction of Container Capping[3]</p>
    <p>Deduplication Direction</p>
    <p>Segment</p>
    <p>Active container 8 chunks</p>
    <p>Capping level = 3</p>
    <p>Keep the original referencing</p>
    <p>Rewrite and reference to the new container</p>
    <p>Pros: 1) simple and efficient 2) guarantee the higher bound of container reads</p>
    <p>Unique chunk</p>
    <p>Cons: 1) a fixed capping level cannot adapt to the workload 2) might make wrong rewrite decision due to the segment cut 3) deduplication ratio is not guaranteed</p>
  </div>
  <div class="page">
    <p>Capping Limitation 1: Fixed Capping Level</p>
    <p>Th e</p>
    <p>nu m</p>
    <p>be r</p>
    <p>of re</p>
    <p>fe re</p>
    <p>nc ed</p>
    <p>ch un</p>
    <p>ks</p>
    <p>Rank of old containers</p>
    <p>Segment2</p>
    <p>Capping Level</p>
    <p>Th e</p>
    <p>nu m</p>
    <p>be r</p>
    <p>of re</p>
    <p>fe re</p>
    <p>nc ed</p>
    <p>ch un</p>
    <p>ks</p>
    <p>Rank of old containers</p>
    <p>Segment1</p>
    <p>Capping Level</p>
    <p>The number of data chunks referenced by one container in a segment is called container referenced count (CNRC)  If we sort the CNRC of containers in a segment, we can get the distributions above, the distributions of different</p>
    <p>segment can be very different  Capping level is a fixed threshold, containers with CNRC ranked lower than the capping level are rewritten</p>
    <p>Be rewritten Be rewritten</p>
    <p>Use old containers</p>
    <p>Use old containers</p>
  </div>
  <div class="page">
    <p>Capping Limitation 1: Fixed Capping Level</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment2</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment1</p>
  </div>
  <div class="page">
    <p>Capping Limitation 1: Fixed Capping Level</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment2</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment1</p>
    <p>Use the same capping level, we will have 20 old container reads, and need rewrite 232 chunks</p>
  </div>
  <div class="page">
    <p>Capping Limitation 1: Fixed Capping Level</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment2</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment1</p>
    <p>Use the same capping level, we will have 20 old container reads, and need rewrite 232 chunks</p>
  </div>
  <div class="page">
    <p>Capping Limitation 1: Fixed Capping Level</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment2</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment1</p>
    <p>Use the same capping level, we will have 20 old container reads, and need rewrite 232 chunks</p>
  </div>
  <div class="page">
    <p>Capping Limitation 1: Fixed Capping Level</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment2</p>
    <p>Th e nu m be r of re fe re nc ed</p>
    <p>ch un ks</p>
    <p>Rankofoldcontainers</p>
    <p>Segment1</p>
    <p>Use the same capping level, we will have 20 old container reads, and need rewrite 232 chunks</p>
    <p>Use different actual capping level for different segments, the total old container reads are still 20, but we rewrite fewer data chunks (187 chunks)</p>
  </div>
  <div class="page">
    <p>Capping Limitation 2: Fixed Segment Cutting Issue</p>
    <p>Segment Segment +1</p>
    <p>Be rewritten</p>
    <p>Segment Segment +1</p>
    <p>Be rewritten</p>
    <p>Segment Segment +1</p>
    <p>Be rewritten</p>
    <p>Not fairly evaluated</p>
    <p>Data chunks close to the cutting boundary have higher probability to be rewritten</p>
  </div>
  <div class="page">
    <p>Capping Limitation 3: Restore Caching</p>
    <p>Segment Segment +1</p>
    <p>Be rewritten Container read triggered</p>
    <p>Cache effective range</p>
    <p>When caching is applied, data chunks from one container must be cached at least a small range of restore. The data chunks that are covered by the cache effective range should not be rewritten</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Flexible Container Referenced Count based Design (FCRC)  To be adaptive to the ContaiNer Referenced Count (CNRC)</p>
    <p>distributions, we can use a CNRC value as the threshold</p>
    <p>Higher threshold ! rewrite more chunks (lower deduplication ratio), but fewer container reads (e.g., threshold = 4)</p>
    <p>Lower threshold ! rewrite fewer chunks (higher deduplication ratio), but more container reads (e.g., threshold = 1)</p>
    <p>According to the target container reads and target deduplication ratio to calculate (estimate) the lower bound and higher bound of the threshold in each segment.</p>
    <p>Address limitation 1: flexible container referenced count based threshold</p>
    <p>Segment</p>
    <p>How can we decide the threshold for each segment?</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>Higher bound</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>According to the target container reads, we can estimate, at most, how many old containers can be referenced in this segment !lower bound</p>
    <p>Higher bound</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>According to the target container reads, we can estimate, at most, how many old containers can be referenced in this segment !lower bound</p>
    <p>Lower bound</p>
    <p>Higher bound</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>According to the target container reads, we can estimate, at most, how many old containers can be referenced in this segment !lower bound</p>
    <p>The actual CNRC threshold is in between (if cannot be set, satisfy deduplication ratio first)</p>
    <p>Lower bound</p>
    <p>Higher bound</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>According to the target container reads, we can estimate, at most, how many old containers can be referenced in this segment !lower bound</p>
    <p>The actual CNRC threshold is in between (if cannot be set, satisfy deduplication ratio first)</p>
    <p>Lower bound</p>
    <p>Higher bound</p>
    <p>Threshold is 3</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>According to the target container reads, we can estimate, at most, how many old containers can be referenced in this segment !lower bound</p>
    <p>The actual CNRC threshold is in between (if cannot be set, satisfy deduplication ratio first)</p>
    <p>If we rewrite fewer chunks or referenced fewer containers in this segment, we can accumulate the credits of container reads or rewrites savings for the future segments to extend the two bounds</p>
    <p>Lower bound</p>
    <p>Higher bound</p>
    <p>Threshold is 3</p>
  </div>
  <div class="page">
    <p>Set Two Bounds 4 chunks</p>
    <p>Segment</p>
    <p>According to the deduplication ratio reduction limit, we can estimate, at most, how many data chunks can be rewritten in this segment ! higher bound</p>
    <p>According to the target container reads, we can estimate, at most, how many old containers can be referenced in this segment !lower bound</p>
    <p>The actual CNRC threshold is in between (if cannot be set, satisfy deduplication ratio first)</p>
    <p>If we rewrite fewer chunks or referenced fewer containers in this segment, we can accumulate the credits of container reads or rewrites savings for the future segments to extend the two bounds</p>
    <p>e.g., for next segment, we can move the lower bound 3 containers down and higher bound 4 chunks up.</p>
    <p>Lower bound</p>
    <p>Higher bound</p>
    <p>Threshold is 3</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Basic idea: using a sliding window to cover a range of data chunks, ensure that each chunk is evaluated with the same amount of past and future information</p>
    <p>To be efficient, the window is moved in container size (4 chunks in this example)  Data chunks, whose rewrite decision cannot be made, will be temporally cached until the</p>
    <p>window moves to cover its subsequence. In this way, we can finally make the rewrite decision</p>
    <p>Sliding Look-back Window Assisted Rewrite</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cache Recipe entry cache</p>
    <p>Address limitation 2: Sliding look-back window</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Active container</p>
    <p>Look back window</p>
    <p>Recipe Persistent store</p>
    <p>Candidate chunk</p>
    <p>Non-rewrite chunk</p>
    <p>Persistent Storage</p>
    <p>Recipe cache</p>
    <p>Rewrite candidate cacheImmutable recipe entry</p>
    <p>Mutable recipe entry</p>
    <p>Container</p>
  </div>
  <div class="page">
    <p>Considering Restore Caching During Rewrite Address limitation 3: consider cache effective range when making rewrite decisions</p>
    <p>According to the caching algorithm and cache space size, we can estimate the cache effective range (all data chunks from read-in container are cached at least # data chunks restore)</p>
    <p>For example:  FAA: the cache effective range is the FAA size (guaranteed)  Chunk-based cache: if the cache space is S chunks, x% data chunks in a container</p>
    <p>are used in average, container size is C chunks, the cache effective range is: (not guaranteed, just the estimate in average)</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Container read triggered</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example  LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Look-back window</p>
    <p>Active container</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>Container read triggered</p>
    <p>Cache effective range</p>
    <p>Unique chunk</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
    <p>Container read triggered</p>
    <p>Cache effective range</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
    <p>Container read triggered</p>
    <p>Cache effective range</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
    <p>Container read triggered</p>
    <p>Cache effective range</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Look-back window</p>
    <p>Rewrite candidate cacheRecipe cache</p>
    <p>LBW size: 2 containers (8 chunks)  Cache effective range: 3 containers (12 chunks)  Rewrite condition:</p>
    <p>The container has not been referenced for the LBW size chunks  The container reference count of aforementioned container is always &lt;= 2</p>
    <p>Active container</p>
    <p>Container read triggered</p>
    <p>Cache effective range</p>
  </div>
  <div class="page">
    <p>Combine FCRC algorithm with the sliding look-back window design to decide the CNRC threshold for the containers that to be rewritten</p>
    <p>Make the rewrite or non-rewrite decision as early as possible in each LBW movement to reduce the caching overhead</p>
    <p>Considering the cache effect of restore engine to configure the LBW size and cache sizes</p>
    <p>Considering the workload data locality to slightly adjust the threshold after it is decided, such that the restore engine cache space utilization can be potentially improved.</p>
    <p>Rewrite Policy</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Evaluation metrics  Speed factor: mean size data being restored (MB) per container read  Deduplication ratio: total amount of data in the original byte stream divided by the total size</p>
    <p>of stored unique data chunks  Eight deduplication-restore combinations:</p>
    <p>Normal  FAA, Normal  ALACC  Capping  FAA, Capping  ALACC  FCRC  FAA, FCRC  ALACC  LBW  FAA, LBW  ALACC</p>
    <p>Six Traces with 10 backup versions each from FSL[]:  3 MacOS server snapshots traces (5, 20, and 60 days backup intervals)  3 students home directory snapshots traces (5, 20, and 60 days backup intervals)</p>
    <p>Experiment Setup</p>
  </div>
  <div class="page">
    <p>Sp ee</p>
    <p>d Fa</p>
    <p>ct or</p>
    <p>Deduplication Ratio</p>
    <p>LBW-FAA Capping-FAA Normal</p>
    <p>Capping vs. LBW</p>
    <p>Speed Factor = 3.7</p>
    <p>Normal</p>
  </div>
  <div class="page">
    <p>Sp ee</p>
    <p>d Fa</p>
    <p>ct or</p>
    <p>Deduplication Ratio</p>
    <p>LBW-FAA Capping-FAA Normal</p>
    <p>Capping vs. LBW</p>
    <p>Speed Factor = 3.7</p>
    <p>Deduplication ratio = 14</p>
    <p>Normal</p>
  </div>
  <div class="page">
    <p>Speed Factor Comparison</p>
  </div>
  <div class="page">
    <p>Detailed Comparison</p>
    <p>Sp ee</p>
    <p>d Fa</p>
    <p>ct or</p>
    <p>Version Number</p>
    <p>LBW-ALACC FCRC-ALACC Capping-ALACC Normal-ALACC</p>
    <p>Sp ee</p>
    <p>d Fa</p>
    <p>ct or</p>
    <p>Version Number</p>
    <p>LBW-FAA FCRC-FAA Capping-FAA Normal-FAA</p>
  </div>
  <div class="page">
    <p>Deduplication and Restore  Data Chunk Rewrite Preliminary  Container Capping Introduction and Limitations  Proposed Solutions</p>
    <p>Flexible Container Referenced Count based Design (FCRC)  Sliding Look-Back Window (LBW)</p>
    <p>Evaluations  Conclusions and Future Work</p>
    <p>Agenda</p>
  </div>
  <div class="page">
    <p>Investigated the advantages and limitations of capping</p>
    <p>Proposed an improved scheme based on capping (FCRC), which reduces container reads and rewrites fewer data chunks</p>
    <p>Proposed a new scheme called sliding look-back window based rewrite scheme, which solves the cutting boundary issue of capping and integrated the rewrite algorithm of FCRC</p>
    <p>LBW achieves the best restore performance (highest speed factor) in our evaluations</p>
    <p>In the future, we will investigate the restore friendly GC mechanism.</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
  </div>
  <div class="page">
    <p>[1] Zhu B, Li K, Patterson R H. Avoiding the Disk Bottleneck in the Data Domain Deduplication File System[C]//Fast. 2008, 8: 1-14. [2] Zhichao Cao, Hao Wen, Fenggang Wu, and David H. C. Du. 2018. ALACC: Accelerating restore performance of data deduplication systems using adaptive lookahead window assisted chunk caching. In Proceedings of the 16th USENIX Conference on File and Storage Technologies (FAST18). 309324. [3] Mark Lillibridge, Kave Eshghi, and Deepavali Bhag- wat. Improving restore speed for backup systems that use inline chunk-based deduplication. In 11th USENIX Conference on File and Storage Technologies (FAST 13), pages 183198, 2013. [4] Youngjin Nam, Guanlin Lu, Nohhyun Park, Weijun Xiao, and David HC Du. Chunk fragmentation level: An effective indicator for read performance degradation in deduplication storage. In 2011 IEEE Inter- national Conference on High Performance Computing and Communications (HPCC), pages 581586. IEEE, 2011 [5] Young Jin Nam, Dongchul Park, and David HC Du. Assuring demanded read performance of data dedupli- cation storage with backup datasets. In 2012 IEEE 20th International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Sys- tems (MASCOTS 12), pages 201208. IEEE, 2012. [6] Michal Kaczmarczyk, Marcin Barczynski, Wojciech Kilian, and Cezary Dubnicki. Reducing impact of data fragmentation caused by in-line deduplication. In Pro- ceedings of the 5th Annual International Systems and Storage Conference, Haifa, Israel (SYSTOR 12), pages 112, 2012. [7] Min Fu, Dan Feng, Yu Hua, Xubin He, Zuoning Chen, Wen Xia, Fangting Huang, and Qing Liu. Acceler- ating restore and garbage collection in deduplicationbased backup systems via exploiting historical infor- mation. In 2014 USENIX Annual Technical Conference (USENIX ATC 14), pages 181192, 2014. [8] Min Fu, Dan Feng, Yu Hua, Xubin He, Zuoning Chen, Jingning Liu, Wen Xia, Fangting Huang, and Qing Liu. Reducing fragmentation for in-line deduplication backup storage via exploiting backup history and cache knowledge. IEEE Transactions on Parallel and Dis- tributed Systems, 27(3):855868, 2016. [9] Yujuan Tan, Baiping Wang, Jian Wen, Zhichao Yan, Hong Jiang, and Witawas Srisa-an. Improving re- store performance in deduplication-based backup sys- tems via a fine-grained defragmentation approach. IEEE Transactions on Parallel and Distributed Sys- tems, 2018. [10] http://tracer.filesystems.org/.</p>
    <p>Reference</p>
  </div>
</Presentation>
