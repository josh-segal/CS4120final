<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SOCK: Rapid Task Provisioning with Serverless-Optimized Containers</p>
    <p>Edward Oakes, Leon Yang, Dennis Zhou, Kevin Houck, Tyler Harter*, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
    <p>* Microsoft Gray Systems Lab</p>
  </div>
  <div class="page">
    <p>Increasing Developer Velocity</p>
  </div>
  <div class="page">
    <p>Trend 1: Rise of High-Level Languages</p>
    <p>https://stackoverflow.blog/2017/09/06/incredible-growth-python/</p>
  </div>
  <div class="page">
    <p>Trend 2: Greater Reliance on Packages</p>
    <p>https://www.modulecounts.com</p>
    <p>M od</p>
    <p>ul e</p>
    <p>C ou</p>
    <p>nt</p>
  </div>
  <div class="page">
    <p>Trend 3: Microservice Decomposition  Applications are decoupled into modular services  Each service is lightweight, deployed independently</p>
  </div>
  <div class="page">
    <p>Serverless Computing  Functions as a Service  Pay-as-you-go, fine-grained billing</p>
  </div>
  <div class="page">
    <p>Serverless Computing Benefits:  True auto scaling  Massive parallelism  Cost savings</p>
  </div>
  <div class="page">
    <p>Serverless Computing Benefits:  True auto scaling  Massive parallelism  Cost savings</p>
    <p>Challenge:  Deploy, isolate, and start in milliseconds</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>Operating System</p>
    <p>Server</p>
    <p>A 1</p>
    <p>deployment bundles...A</p>
    <p>N</p>
    <p>Serverless Runtime</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>Operating System</p>
    <p>Server</p>
    <p>A 1</p>
    <p>deployment bundles...A</p>
    <p>NPython interpreter:  30ms</p>
    <p>Docker container:  400ms</p>
    <p>Serverless Runtime</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>Operating System</p>
    <p>Server</p>
    <p>A 1</p>
    <p>sc ip</p>
    <p>y n</p>
    <p>u m</p>
    <p>p y</p>
    <p>...A2</p>
    <p>re q</p>
    <p>u e</p>
    <p>st s</p>
    <p>A N</p>
    <p>sc ip</p>
    <p>y</p>
    <p>Serverless Runtime</p>
    <p>deployment bundles</p>
    <p>Python interpreter:  30ms</p>
    <p>Docker container:  400ms</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>Operating System</p>
    <p>Server</p>
    <p>A 1</p>
    <p>sc ip</p>
    <p>y n</p>
    <p>u m</p>
    <p>p y</p>
    <p>...A2</p>
    <p>re q</p>
    <p>u e</p>
    <p>st s</p>
    <p>A N</p>
    <p>sc ip</p>
    <p>y</p>
    <p>Serverless Runtime</p>
    <p>deployment bundles</p>
    <p>Python interpreter:  30ms</p>
    <p>scipy:  2700ms download  8200ms install  88ms import</p>
    <p>Docker container:  400ms</p>
  </div>
  <div class="page">
    <p>Lean serverless-optimized containers (SOCK)  Precise usage of Linux isolation mechanisms  18x faster container lifecycle over Docker</p>
    <p>SOCK</p>
  </div>
  <div class="page">
    <p>Lean serverless-optimized containers (SOCK)  Precise usage of Linux isolation mechanisms  18x faster container lifecycle over Docker</p>
    <p>Provision from secure Zygote processes  Fork from initialized runtime to prevent cold start  3x faster provisioning than SOCK alone</p>
    <p>SOCK</p>
  </div>
  <div class="page">
    <p>Lean serverless-optimized containers (SOCK)  Precise usage of Linux isolation mechanisms  18x faster container lifecycle over Docker</p>
    <p>Provision from secure Zygote processes  Fork from initialized runtime to prevent cold start  3x faster provisioning than SOCK alone</p>
    <p>Execution caching across 3 tiers  Securely reuse initialization work across customers  3-16x lower platform cost in image-processing case study</p>
    <p>SOCK</p>
  </div>
  <div class="page">
    <p>https://github.com/open-lambda</p>
    <p>OpenLambda</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Linux Containers</p>
  </div>
  <div class="page">
    <p>Linux Containers ...theyre just cheaper VMs, right?</p>
  </div>
  <div class="page">
    <p>Linux Containers ...theyre just cheaper VMs, right?</p>
    <p>Not virtualizing hardware, but access</p>
    <p>File system  Namespaces  Cgroups</p>
  </div>
  <div class="page">
    <p>Linux Containers ...theyre just cheaper VMs, right?</p>
    <p>Not virtualizing hardware, but access</p>
    <p>File system  Namespaces  Cgroups</p>
  </div>
  <div class="page">
    <p>Container File System</p>
    <p>FROM ubuntu:16</p>
    <p>= read/write</p>
    <p>= read only</p>
  </div>
  <div class="page">
    <p>Container File System</p>
    <p>FROM ubuntu:16</p>
    <p>sudo apt-get install</p>
    <p>= read/write</p>
    <p>= read only</p>
  </div>
  <div class="page">
    <p>Container File System</p>
    <p>FROM ubuntu:16</p>
    <p>sudo apt-get install</p>
    <p>make install</p>
    <p>= read/write</p>
    <p>= read only</p>
  </div>
  <div class="page">
    <p>Container File System</p>
    <p>FROM ubuntu:16</p>
    <p>sudo apt-get install</p>
    <p>make install</p>
    <p>= read/write</p>
    <p>= read only</p>
    <p>my-image</p>
  </div>
  <div class="page">
    <p>Container File System = read/write</p>
    <p>= read only</p>
    <p>my-image</p>
    <p>C1 / C2 / C3 /</p>
  </div>
  <div class="page">
    <p>Linux Containers ...theyre just cheaper VMs, right?</p>
    <p>Not virtualizing hardware, but access</p>
    <p>File system  Namespaces  Cgroups</p>
  </div>
  <div class="page">
    <p>Namespaces  Partition resource access in the kernel  7 individual namespaces</p>
    <p>Mount  Network  User  UTS  IPC  PID  Cgroup</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2 fork()</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
    <p>unshare()</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
    <p>unshare() / /var /tmp /my-image /my-var /my-tmp</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>switch root  unmount()  mount()  pivot_root()</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
    <p>/ /my-var /my-tmp</p>
    <p>switch root  unmount()  mount()  pivot_root()</p>
  </div>
  <div class="page">
    <p>Mount Namespace</p>
    <p>/ /var /tmp /my-image /my-var /my-tmp</p>
    <p>P1 P2</p>
    <p>/ /my-var /my-tmp</p>
    <p>Container</p>
  </div>
  <div class="page">
    <p>Linux Containers ...theyre just cheaper VMs, right?</p>
    <p>Not virtualizing hardware, but access</p>
    <p>File system  Namespaces  Cgroups</p>
  </div>
  <div class="page">
    <p>Cgroups  Control resource usage  Limiting, prioritization, accounting, control</p>
    <p>oom-killer for a container</p>
  </div>
  <div class="page">
    <p>Fork init, unshare() into new namespaces  Create cgroups  Relocate init into cgroups  Stitch together root file system  switch_root() to container root  Create veth  Connect veth to virtual bridge</p>
    <p>At runtime:</p>
  </div>
  <div class="page">
    <p>Fork init, unshare() into new namespaces  Create cgroups  Relocate init into cgroups  Stitch together root file system  switch_root() to container root  Create veth  Connect veth to virtual bridge</p>
    <p>...all before running any user code</p>
    <p>At runtime:</p>
  </div>
  <div class="page">
    <p>SOCK: Serverless-optimized Containers  Containers arent a single cohesive abstraction</p>
  </div>
  <div class="page">
    <p>Containers arent a single cohesive abstraction</p>
    <p>What are the performance costs of container components?</p>
    <p>SOCK: Serverless-optimized Containers</p>
  </div>
  <div class="page">
    <p>Containers arent a single cohesive abstraction</p>
    <p>What are the performance costs of container components?</p>
    <p>What are the isolation requirements of serverless workloads?</p>
    <p>SOCK: Serverless-optimized Containers</p>
  </div>
  <div class="page">
    <p>SOCK: Serverless-optimized Containers  Containers arent a single cohesive abstraction</p>
    <p>What are the performance costs of container components?</p>
    <p>What are the isolation requirements of serverless workloads?</p>
  </div>
  <div class="page">
    <p>Mount Performance</p>
    <p>Mount and unmount as quickly as possible  Varying levels of parallelism  Single AUFS layer vs. bind mount</p>
  </div>
  <div class="page">
    <p>Mount Performance</p>
  </div>
  <div class="page">
    <p>Mount Performance</p>
    <p>Bind mounts are 3x faster than AUFS</p>
  </div>
  <div class="page">
    <p>SOCK: Serverless-optimized Containers  Containers arent a single cohesive abstraction</p>
    <p>What are the performance costs of container components?</p>
    <p>What are the isolation requirements of serverless workloads?</p>
  </div>
  <div class="page">
    <p>File System Requirements Serverless application containers:</p>
    <p>Dont need a fully writable OS view  Do need scratch space and access to libraries</p>
  </div>
  <div class="page">
    <p>File System Requirements Serverless application containers:</p>
    <p>Dont need a fully writable OS view  Do need scratch space and access to libraries</p>
    <p>Flexible, expensive AUFS + mount namespace</p>
    <p>Simple, cheap bind mounts + chroot</p>
  </div>
  <div class="page">
    <p>Serverless-optimized Containers Replace flexible, costly mechanisms with simple, cheap alternatives  Leverage constraints of the serverless runtime</p>
  </div>
  <div class="page">
    <p>Serverless-optimized Containers Replace flexible, costly mechanisms with simple, cheap alternatives  Leverage constraints of the serverless runtime</p>
    <p>AUFS + mount NS -&gt; bind mounts + chroot</p>
    <p>network NS -&gt; domain socket + outbound access</p>
    <p>user NS -&gt; unprivileged execution</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Experiment Requests to no-op handlers as quickly as possible  Varying numbers of requesting threads  Docker vs. SOCK</p>
  </div>
  <div class="page">
    <p>SOCK Container Performance</p>
  </div>
  <div class="page">
    <p>SOCK Container Performance</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Zygotes  Used in Android OS</p>
    <p>Many apps depend on common system libraries</p>
    <p>Start a Zygote at init, importing libraries  New processes fork from the Zygote</p>
  </div>
  <div class="page">
    <p>Generalized Zygotes Benefits:</p>
    <p>Eliminate interpreter &amp; package initialization cost  Pack more handlers into memory</p>
  </div>
  <div class="page">
    <p>Generalized Zygotes Benefits:</p>
    <p>Eliminate interpreter &amp; package initialization cost  Pack more handlers into memory</p>
    <p>Challenges:</p>
    <p>Cannot trust the libraries we import  Want to create new Zygotes on the fly</p>
  </div>
  <div class="page">
    <p>More details in the paper...</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Experiment Create and destroy handler runtimes as quickly as possible  New container &amp; interpreter  Varying levels of parallelism</p>
  </div>
  <div class="page">
    <p>Zygote Provisioning Performance</p>
  </div>
  <div class="page">
    <p>Zygote Provisioning Performance</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>SOCK Caching</p>
  </div>
  <div class="page">
    <p>Handler Cache  Reuse initialized runtimes within a lambda</p>
    <p>SOCK Caching</p>
  </div>
  <div class="page">
    <p>Import Cache  Reuse initialized Zygotes between lambdas</p>
    <p>Handler Cache  Reuse initialized runtimes within a lambda</p>
    <p>SOCK Caching</p>
  </div>
  <div class="page">
    <p>Import Cache  Reuse initialized Zygotes between lambdas</p>
    <p>Handler Cache  Reuse initialized runtimes within a lambda</p>
    <p>Install Cache  Reuse installed packages between lambdas</p>
    <p>SOCK Caching</p>
  </div>
  <div class="page">
    <p>Import Cache  Reuse initialized Zygotes between lambdas</p>
    <p>Handler Cache  Reuse initialized runtimes within a lambda</p>
    <p>Install Cache  Reuse installed packages between lambdas</p>
    <p>SOCK Caching</p>
  </div>
  <div class="page">
    <p>{ }</p>
    <p>Import Cache Handler Cache</p>
  </div>
  <div class="page">
    <p>{ }</p>
    <p>Import Cache Handler Cache H1(A)</p>
  </div>
  <div class="page">
    <p>{ }</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>H1(A)</p>
  </div>
  <div class="page">
    <p>{ } H1(A)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>H1(A)</p>
  </div>
  <div class="page">
    <p>{ } H1(A)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
  </div>
  <div class="page">
    <p>{ } H1(A)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>H1(A)</p>
  </div>
  <div class="page">
    <p>{ } H1(A)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
  </div>
  <div class="page">
    <p>{ } H2(A,B)</p>
    <p>H1(A)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
  </div>
  <div class="page">
    <p>{ } H2(A,B)</p>
    <p>H1(A)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H2(A,B)</p>
    <p>H1(A) H2(A,B)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H1(A) H2(A,B)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H3(B)</p>
    <p>H1(A) H2(A,B)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H3(B)</p>
    <p>H1(A) H2(A,B)</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H3(B)</p>
    <p>H1(A) H2(A,B)</p>
    <p>What if package A is malicious?</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H3(B)</p>
    <p>H1(A) H2(A,B)</p>
    <p>What if package A is malicious?  Subset only rule</p>
    <p>Import Cache Handler Cache</p>
    <p>{A}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>{ } H3(B)</p>
    <p>H1(A) H2(A,B)</p>
    <p>What if package A is malicious?  Subset only rule</p>
    <p>Import Cache Handler Cache</p>
    <p>{A} {B}</p>
    <p>{A,B}</p>
  </div>
  <div class="page">
    <p>Cache Interaction = django memory = handler-specific memoryhandler cache</p>
    <p>working set</p>
  </div>
  <div class="page">
    <p>django Zygote</p>
    <p>Cache Interaction = django memory = handler-specific memoryhandler cache</p>
    <p>working set</p>
  </div>
  <div class="page">
    <p>Cache Interaction</p>
    <p>django Zygote</p>
    <p>= django memory = handler-specific memoryhandler cache</p>
    <p>working set</p>
  </div>
  <div class="page">
    <p>Cache Interaction</p>
    <p>django Zygote</p>
    <p>= django memory = handler-specific memoryhandler cache</p>
    <p>working set</p>
  </div>
  <div class="page">
    <p>Cache Interaction</p>
    <p>django Zygote</p>
    <p>= django memory = handler-specific memoryhandler cache</p>
    <p>working set</p>
    <p>Handler cache misses are:  Rarer</p>
  </div>
  <div class="page">
    <p>Cache Interaction</p>
    <p>Handler cache misses are:  Rarer  Faster</p>
    <p>django Zygote</p>
    <p>= django memory = handler-specific memoryhandler cache</p>
    <p>working set</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Microbenchmark Not a stress test, want to examine differences in caching</p>
    <p>Experimental Setup:  1 OpenLambda worker machine  2 random requests per second  100 distinct lambdas, all importing django</p>
  </div>
  <div class="page">
    <p>Caching Performance</p>
  </div>
  <div class="page">
    <p>Caching Performance</p>
  </div>
  <div class="page">
    <p>Caching Performance</p>
  </div>
  <div class="page">
    <p>Caching Performance</p>
  </div>
  <div class="page">
    <p>Caching Performance</p>
  </div>
  <div class="page">
    <p>Outline Motivation Serverless-optimized Containers  Design  Evaluation</p>
    <p>Generalized Zygotes  Design  Evaluation</p>
    <p>Serverless Caching  Design  Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>PC running many diverse processes</p>
    <p>VMs running monolithic applications</p>
    <p>Containers running small pieces of applications</p>
    <p>Evolution of Applications</p>
  </div>
  <div class="page">
    <p>PC running many diverse processes</p>
    <p>VMs running monolithic applications</p>
    <p>Containers running small pieces of applications</p>
    <p>???</p>
    <p>Evolution of Applications</p>
  </div>
  <div class="page">
    <p>How can we run small, distributed pieces of code faster, more easily, and more securely?</p>
    <p>Modern Virtualization</p>
  </div>
  <div class="page">
    <p>How can we run small, distributed pieces of code faster, more easily, and more securely?</p>
    <p>SOCK:  Carefully measure and use existing abstractions</p>
    <p>Modern Virtualization</p>
  </div>
  <div class="page">
    <p>How can we run small, distributed pieces of code faster, more easily, and more securely?</p>
    <p>SOCK:  Carefully measure and use existing abstractions</p>
    <p>developed for long-running applications</p>
    <p>Future Systems:  Need to fundamentally rethink design</p>
    <p>Modern Virtualization</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
