<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Michael D. Brown Georgia Tech Research Institute (GTRI)</p>
    <p>Professor Santosh Pande Georgia Institute of Technology</p>
    <p>Is Less Really More? Towards Better Metrics for Measuring Security Improvements Realized Through Software Debloating</p>
  </div>
  <div class="page">
    <p>At a High Level</p>
    <p>Software Debloating is an emerging cyber hardening technique that removes unnecessary parts of a program to reduce its attack surface.</p>
    <p>A frequently cited security improvement metric used in recent work is code reuse gadget count reduction.</p>
    <p>This metric is quantitative in nature and can be misleading; Software debloating introduces new gadgets and can actually make gadget sets more useful.</p>
    <p>We propose two qualitative metrics for measuring gadget set properties and present our tool for measuring the change in these properties that results from debloating.</p>
    <p>Our data indicates that debloating to improve security isnt as straightforward as once thought.</p>
  </div>
  <div class="page">
    <p>What is Software Bloat?</p>
    <p>Modern software engineering practices favor software and systems that are:</p>
    <p>Modular</p>
    <p>Reusable</p>
    <p>Feature Rich</p>
    <p>This helps engineers rapidly develop complex and widely deployable software.</p>
    <p>However, it comes at a cost  when software is deployed and executed it contains large portions of code that will never be used. This is software bloat.</p>
  </div>
  <div class="page">
    <p>Sources of Software Bloat: Feature Creep</p>
    <p>Software bloat occurs laterally within a software package due to feature creep.</p>
    <p>Example: cUrl supports data transfer via 23 different protocols:</p>
    <p>DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, Telnet and TFTP</p>
    <p>Common users of cUrl or libcurl are unlikely to full utilize this level of feature variety.</p>
  </div>
  <div class="page">
    <p>Prevalence and Impact of Software Bloat</p>
    <p>A recent study of vertical software bloat by Quach et al [1] found:</p>
    <p>Commonly used features in these programs require a relatively small portion of the total instructions present in the programs and libraries. For example:</p>
    <p>Playing an audio file in VLC requires only 12% of the overall instructions.  Creating, composing, and saving a file in Sublime requires only 27% of the overall</p>
    <p>instructions.  Fetching and displaying 10 popular websites in Firefox requires only 29% of the</p>
    <p>overall instructions.</p>
    <p>Bloat has a number of negative security impacts, namely:  Bloat code may contain reachable attack vectors / vulnerabilities  Bloat code may increase the overhead of security defenses  Bloat code can potentially be used in a code reuse attack</p>
  </div>
  <div class="page">
    <p>Gadgets are used like complex instructions, and the the total set of gadgets available to the attacker is their ISA.</p>
    <p>Gadgets end in a return, indirect call, or indirect jump instruction, which the attacker can exploit to maintain control flow.</p>
    <p>This bloat code is useless to the user executing the program, but contributes to the total set of gadgets available to the attacker.</p>
    <p>The attacker can use these gadgets in the construction of their exploits.</p>
    <p>Software Bloat and Gadgets</p>
  </div>
  <div class="page">
    <p>Software Debloating</p>
    <p>Software debloating is a software transformation that produces variant of a program that contains the minimum amount of code necessary for its specific end use context.</p>
    <p>Software debloating can be performed at many different points in the software lifecycle:</p>
    <p>Original Source Code</p>
    <p>Preprocessor Compiler Front End</p>
    <p>Middle End Compiler Back End</p>
    <p>Linker</p>
    <p>Package Binary</p>
    <p>Loader</p>
    <p>Debloat Source Code Debloat Intermediate Representation (IR)</p>
    <p>Debloat Code in Memory</p>
    <p>Debloat Binary via Rewriting</p>
  </div>
  <div class="page">
    <p>Very difficult to measure security improvement with respect to vulnerability elimination and moving target defense.</p>
    <p>Measuring code reuse gadget count reduction is easy, and makes sense on the surface - Less code means fewer pieces of code the attacker can stitch together in gadget based code reuse attacks</p>
    <p>However: - Reducing number of gadgets doesnt necessarily make creating an exploit harder - Attackers dont need large, diverse sets of gadgets to craft exploits - Code-removing debloaters can introduce new gadgets!</p>
    <p>Difficulties in Measuring Claims of Improved Security</p>
  </div>
  <div class="page">
    <p>Gadget Introduction Mechanisms  Compiler Optimization</p>
    <p>Removing code from a software package via debloating can have unpredictable effects on optimization and code generation choices made by the compiler.</p>
    <p>Some optimizations suppressed and/or triggered by debloating: - Loop Unrolling - Function Inlining - Dead Code Elimination</p>
  </div>
  <div class="page">
    <p>x86 and x86-64 have variable length instructions, so it is possible to decode instructions from an offset other than the original instruction boundary. Gadgets found using this method are called unintended gadgets.</p>
    <p>Since debloating causes significant changes to the packages final representation, the unintended gadgets in a package can vary greatly in a debloated variant.</p>
    <p>Gadget Introduction Mechanisms  Unintended Gadgets</p>
  </div>
  <div class="page">
    <p>How Prevalent is Gadget Introduction?</p>
    <p>We debloated thirteen software packages that varied in size, structure and operational complexity using two different code-removing debloaters. - CHISEL (Linux CoreUtils) - CARVE (Network Protocol Implementations)</p>
    <p>CARVE benchmark packages were debloated at three different intensity levels: - Conservative: Some peripheral features in the package are targeted for debloating. - Moderate: Some peripheral features and some core features are targeted for debloating. - Aggressive: All debloatable features except for a small set of core features are targeted for debloating.</p>
    <p>CHISEL benchmarks debloated at level roughly equivalent to Aggressive.</p>
    <p>Both debloaters achieve comparable gadget count reduction rates.</p>
  </div>
  <div class="page">
    <p>Prevalence of Gadget Introduction</p>
  </div>
  <div class="page">
    <p>We Need Better Gadget Metrics for Software Debloating Gadget count reduction is too superficial to be an accurate metric for measuring security improvement. Given the prevalence of gadget introduction, gadget count reduction is potentially misleading.</p>
    <p>We propose qualitative (vs. quantitative) metrics that address the key question: How does debloating make constructing a code reuse attack more challenging or difficult?</p>
    <p>Functional Gadget Set Expressivity - Measure change in computational power of gadget Instruction Set after debloating. - Tells us what kinds of computations can be specified by a set of gadgets.</p>
    <p>Special Purpose Gadget Availability - Determine if debloating removes critical gadgets necessary to construct exploits. - Tells us if the necessary infrastructure gadgets for different exploit types are present</p>
  </div>
  <div class="page">
    <p>We created a static binary analysis tool capable of analyzing a software package and its debloated variants to capture changes in our metrics.</p>
    <p>GSA is built on top of existing tools: ROPgadget [6] and a gadget classifier [9].</p>
    <p>Performs a secondary search of discovered gadgets to identify special purpose gadgets.</p>
    <p>Measures the expressivity of discovered gadgets against three bars: - Turing Completeness</p>
    <p>- Practical ROP exploits</p>
    <p>- ASLR-proof practical ROP exploits</p>
    <p>We used our tool to analyze our benchmarks to get a better idea of how debloating impacted gadget set quality.</p>
    <p>GSA  Gadget Set Analyzer</p>
  </div>
  <div class="page">
    <p>Results  Functional Gadget Set Expressivity</p>
  </div>
  <div class="page">
    <p>Results  Special Purpose Gadget Availability</p>
  </div>
  <div class="page">
    <p>Analysis of the 21 debloating scenarios using our proposed metrics indicates a very different picture than gadget count reduction.</p>
    <p>In 5 of 21 scenarios, negative impacts were observed after debloating: - New special purpose gadgets that were previously unavailable are introduced - Expressivity of gadget set increases</p>
    <p>In 2 of 21 scenarios, no benefit to debloating was observed.</p>
    <p>Only 14 scenarios can be said to have benefitted from debloating.</p>
    <p>Summary of Results</p>
  </div>
  <div class="page">
    <p>Debloating scenario libcurl (C) resulted in a number of negative side effects: - Increased the gadget set expressivity with respect to ASLR-Proof practical ROP exploits - Increased the gadget set expressivity with respect to simple Turing-completeness - Increased the number of system call gadgets</p>
    <p>GSA results from different libcurl debloating scenarios suggests these effects might be mitigated by removing fewer features.</p>
    <p>After modifying the debloating specification, building the new variant, and re-analyzing, the new results were largely an improvement, as expected: - Reduced gadget set expressivity with respect to ASLR-proof practical ROP exploits - No change in gadget set expressivity with respect to simple Turing-completeness - Decreased the number of system call gadgets</p>
    <p>Case Study: Security does not improve monotonically</p>
  </div>
  <div class="page">
    <p>The relationship between software debloating and software security is complicated. - Debloating can fail to improve security, or even make it worse. - Debloating for security is not like debloating for performance  debloating more does not necessarily produce</p>
    <p>better results.</p>
    <p>Measuring the reduction in gadget count is insufficient to make claims of improved security. - It can hide negative effects of debloating such as gadget introduction. - It is not directly related to more important measures such as availability of special purpose gadgets and gadget</p>
    <p>set expressivity.</p>
    <p>Debloating to improve security is possible, but not as easy as it looks. - It requires deep and multi-faceted analysis to determine the effect debloating had on security. - It may require multiple iterations to get it right.</p>
    <p>Summary of Key Takeaways</p>
  </div>
  <div class="page">
    <p>We do not claim that our proposed metrics are comprehensive.</p>
    <p>We hope this work spurs further discussion about useful security metrics for debloating.</p>
    <p>GSA is available in Github at: - https://github.com/michaelbrownuc/GadgetSetAnalyzer</p>
    <p>Recent Updates: - Now uses freely available expressivity scanner - Supports Gadget Locality metric for measuring moving target defense</p>
    <p>Future Work</p>
  </div>
  <div class="page">
    <p>Questions / Discussion</p>
  </div>
  <div class="page">
    <p>References 1. QUACH, A., ERINFOLAMI, R., DEMICCO, D., AND PRAKASH, A. A multi-OS cross-layer study of bloating in user programs, kernel, and managed</p>
    <p>execution environments. In The 2017 Workshop on Forming an Ecosystem Around Software Transformation (FEAST) (2017).</p>
  </div>
</Presentation>
