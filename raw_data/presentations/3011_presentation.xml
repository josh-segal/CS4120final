<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NetBricks: Taking the V out of NFV Aurojit Panda, Sangjin Han, Keon Jang, Melvin Walls, Sylvia Ratnasamy, Scott Shenker</p>
    <p>UC Berkeley, Google, ICSI</p>
  </div>
  <div class="page">
    <p>What is NFV?</p>
  </div>
  <div class="page">
    <p>A Short Introduction to NFV</p>
  </div>
  <div class="page">
    <p>A Short Introduction to NFV</p>
    <p>Firewall IDS Cache LB</p>
  </div>
  <div class="page">
    <p>A Short Introduction to NFV</p>
    <p>Firewall IDS Cache LB</p>
  </div>
  <div class="page">
    <p>Why NFV?</p>
    <p>Simplifies adding new functionality: Deploy new software.</p>
  </div>
  <div class="page">
    <p>Why NFV?</p>
    <p>Simplifies adding new functionality: Deploy new software.</p>
    <p>Simplifies developing new functionality: Write software vs design hardware</p>
  </div>
  <div class="page">
    <p>Why NFV?</p>
    <p>Simplifies adding new functionality: Deploy new software.</p>
    <p>Simplifies developing new functionality: Write software vs design hardware</p>
    <p>Reuse management tools from other domains.</p>
  </div>
  <div class="page">
    <p>Why NFV?</p>
    <p>Simplifies adding new functionality: Deploy new software.</p>
    <p>Simplifies developing new functionality: Write software vs design hardware</p>
    <p>Reuse management tools from other domains.</p>
    <p>Consolidation: Reduce number of hardware boxes in the network.</p>
  </div>
  <div class="page">
    <p>NFV Requirements</p>
    <p>High Packet Rates: Must keep up with line rate which is &gt;10MPPS</p>
  </div>
  <div class="page">
    <p>NFV Requirements</p>
    <p>High Packet Rates: Must keep up with line rate which is &gt;10MPPS</p>
    <p>Low Latency: Used for applications like VoIP and video conferencing</p>
  </div>
  <div class="page">
    <p>NFV Requirements</p>
    <p>High Packet Rates: Must keep up with line rate which is &gt;10MPPS</p>
    <p>Low Latency: Used for applications like VoIP and video conferencing</p>
    <p>NF Chaining: Packets go through sequence of NFs</p>
    <p>Firewall IDS Cache LB</p>
  </div>
  <div class="page">
    <p>Challenges for NFV</p>
  </div>
  <div class="page">
    <p>Running NFs</p>
    <p>Isolation and Performance</p>
    <p>Challenges for NFV</p>
  </div>
  <div class="page">
    <p>Running NFs</p>
    <p>Isolation and Performance</p>
    <p>Building NFs</p>
    <p>High-Level Programming and Performance</p>
    <p>Challenges for NFV</p>
  </div>
  <div class="page">
    <p>Running NFs</p>
  </div>
  <div class="page">
    <p>Isolation</p>
    <p>Memory Isolation: Each NFs memory cannot be accessed by other NFs.</p>
  </div>
  <div class="page">
    <p>Isolation</p>
    <p>Memory Isolation: Each NFs memory cannot be accessed by other NFs.</p>
    <p>Packet Isolation: When chained, each NF processes packets in isolation.</p>
  </div>
  <div class="page">
    <p>Isolation</p>
    <p>Memory Isolation: Each NFs memory cannot be accessed by other NFs.</p>
    <p>Packet Isolation: When chained, each NF processes packets in isolation.</p>
    <p>Performance Isolation: One NF does not affect anothers performance.</p>
  </div>
  <div class="page">
    <p>Isolation</p>
    <p>Memory Isolation: Each NFs memory cannot be accessed by other NFs.</p>
    <p>Packet Isolation: When chained, each NF processes packets in isolation.</p>
    <p>Performance Isolation: One NF does not affect anothers performance.</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Current Solution</p>
    <p>NIC NIC...</p>
    <p>Memory Isolation</p>
    <p>Performance</p>
    <p>Packet Isolation vSwitch VM/ContainerVM/ContainerVM/Container</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>Isolation Costs Performance</p>
  </div>
  <div class="page">
    <p>Isolation Costs Performance</p>
  </div>
  <div class="page">
    <p>Isolation Costs Performance</p>
  </div>
  <div class="page">
    <p>Isolation Costs Performance</p>
  </div>
  <div class="page">
    <p>Isolation Costs Performance</p>
  </div>
  <div class="page">
    <p>ZCSI Scheduler</p>
    <p>NetBricks Runtime Architecture</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>NF X NF X</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>DPDK Poll for I/O DPDK Poll for I/O</p>
    <p>NICs</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>Single Process Space</p>
  </div>
  <div class="page">
    <p>ZCSI Scheduler</p>
    <p>NetBricks Runtime Architecture</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>NF X NF X</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>DPDK Poll for I/O DPDK Poll for I/O</p>
    <p>NICs</p>
    <p>Function CallNF Y</p>
    <p>NF Z</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>Single Process Space</p>
  </div>
  <div class="page">
    <p>ZCSI Scheduler</p>
    <p>NetBricks Runtime Architecture</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>NF X NF X</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>DPDK Poll for I/O DPDK Poll for I/O</p>
    <p>NICs</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>Single Process Space</p>
  </div>
  <div class="page">
    <p>ZCSI Scheduler</p>
    <p>NetBricks Runtime Architecture</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>NF X NF X</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>DPDK Poll for I/O DPDK Poll for I/O</p>
    <p>NICs</p>
    <p>NF Y</p>
    <p>NF Z Run to Completion Scheduling</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>Single Process Space</p>
  </div>
  <div class="page">
    <p>ZCSI Scheduler</p>
    <p>NetBricks Runtime Architecture</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>NF X NF X</p>
    <p>NF Y</p>
    <p>NF Z</p>
    <p>DPDK Poll for I/O DPDK Poll for I/O</p>
    <p>NICs</p>
    <p>NF Y</p>
    <p>NF Z Run to Completion Scheduling</p>
    <p>NF A</p>
    <p>NF B</p>
    <p>NF C</p>
    <p>NF D</p>
    <p>Single Process Space</p>
    <p>What about Isolation?</p>
  </div>
  <div class="page">
    <p>ZCSI: Zero Copy Soft Isolation</p>
    <p>VMs and containers impose cost on packets crossing isolation boundaries.</p>
  </div>
  <div class="page">
    <p>ZCSI: Zero Copy Soft Isolation</p>
    <p>VMs and containers impose cost on packets crossing isolation boundaries.</p>
    <p>Insight: Use type checking (compile time) and runtime checks for isolation.</p>
    <p>Isolation costs largely paid at compile time (small runtime costs).</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
    <p>Type checks + array bounds checking provide memory isolation.</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
    <p>Type checks + array bounds checking provide memory isolation.</p>
    <p>Build on unique types for packet isolation.</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
    <p>Type checks + array bounds checking provide memory isolation.</p>
    <p>Build on unique types for packet isolation.</p>
    <p>Unique types ensure references destroyed after certain calls.</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
    <p>Type checks + array bounds checking provide memory isolation.</p>
    <p>Build on unique types for packet isolation.</p>
    <p>Unique types ensure references destroyed after certain calls.</p>
    <p>Ensure only one NF has a reference to a packet.</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
    <p>Type checks + array bounds checking provide memory isolation.</p>
    <p>Build on unique types for packet isolation.</p>
    <p>Unique types ensure references destroyed after certain calls.</p>
    <p>Ensure only one NF has a reference to a packet.</p>
    <p>Enables zero copy packet I/O.</p>
  </div>
  <div class="page">
    <p>Our Approach  Disallow pointer arithmetic in NF code: use safe subset of languages.</p>
    <p>Type checks + array bounds checking provide memory isolation.</p>
    <p>Build on unique types for packet isolation.</p>
    <p>Unique types ensure references destroyed after certain calls.</p>
    <p>Ensure only one NF has a reference to a packet.</p>
    <p>Enables zero copy packet I/O.</p>
    <p>All of these features implemented on top of Rust.</p>
  </div>
  <div class="page">
    <p>Software Isolation</p>
    <p>Provides memory and packet isolation.</p>
  </div>
  <div class="page">
    <p>Software Isolation</p>
    <p>Provides memory and packet isolation.</p>
    <p>Improved consolidation: multiple NFs can share a core.</p>
  </div>
  <div class="page">
    <p>Software Isolation</p>
    <p>Provides memory and packet isolation.</p>
    <p>Improved consolidation: multiple NFs can share a core.</p>
    <p>Function call to NF (~ few cycles) vs context switch (~1s).</p>
  </div>
  <div class="page">
    <p>Software Isolation</p>
    <p>Provides memory and packet isolation.</p>
    <p>Improved consolidation: multiple NFs can share a core.</p>
    <p>Function call to NF (~ few cycles) vs context switch (~1s).</p>
    <p>Reduce memory and cache pressure.</p>
  </div>
  <div class="page">
    <p>Software Isolation</p>
    <p>Provides memory and packet isolation.</p>
    <p>Improved consolidation: multiple NFs can share a core.</p>
    <p>Function call to NF (~ few cycles) vs context switch (~1s).</p>
    <p>Reduce memory and cache pressure.</p>
    <p>Zero copy I/O =&gt; do not need to copy packets around.</p>
  </div>
  <div class="page">
    <p>Running NFs</p>
    <p>Isolation and Performance</p>
    <p>Building NFs</p>
    <p>High-Level Programming and Performance</p>
    <p>Challenges for NFV</p>
  </div>
  <div class="page">
    <p>How to write NFs?  Current: NF writers concerned about meeting performance targets</p>
  </div>
  <div class="page">
    <p>How to write NFs?  Current: NF writers concerned about meeting performance targets</p>
    <p>Low level abstractions (I/O, cache aware data structures) and low level code.</p>
  </div>
  <div class="page">
    <p>How to write NFs?  Current: NF writers concerned about meeting performance targets</p>
    <p>Low level abstractions (I/O, cache aware data structures) and low level code.</p>
    <p>Spend lots of time optimizing how abstractions are used to get performance.</p>
  </div>
  <div class="page">
    <p>How to write NFs?  Current: NF writers concerned about meeting performance targets</p>
    <p>Low level abstractions (I/O, cache aware data structures) and low level code.</p>
    <p>Spend lots of time optimizing how abstractions are used to get performance.</p>
    <p>Observation: NFs exhibit common patterns: abstract and optimize these.</p>
  </div>
  <div class="page">
    <p>How to write NFs?  Current: NF writers concerned about meeting performance targets</p>
    <p>Low level abstractions (I/O, cache aware data structures) and low level code.</p>
    <p>Spend lots of time optimizing how abstractions are used to get performance.</p>
    <p>Observation: NFs exhibit common patterns: abstract and optimize these.</p>
    <p>What happened in other areas</p>
  </div>
  <div class="page">
    <p>How to write NFs?  Current: NF writers concerned about meeting performance targets</p>
    <p>Low level abstractions (I/O, cache aware data structures) and low level code.</p>
    <p>Spend lots of time optimizing how abstractions are used to get performance.</p>
    <p>Observation: NFs exhibit common patterns: abstract and optimize these.</p>
    <p>What happened in other areas</p>
    <p>MPI to Map Reduce, etc.</p>
  </div>
  <div class="page">
    <p>Abstractions Packet Processing</p>
    <p>Parse/Deparse Transform Filter</p>
    <p>Byte Stream</p>
    <p>Window Packetize</p>
    <p>Control Flow Group By Shuffle Merge</p>
    <p>State</p>
    <p>Bounded Consistency</p>
  </div>
  <div class="page">
    <p>Abstractions Packet Processing</p>
    <p>Parse/Deparse Transform Filter</p>
    <p>Byte Stream</p>
    <p>Window Packetize</p>
    <p>Control Flow Group By Shuffle Merge</p>
    <p>State</p>
    <p>Bounded Consistency</p>
    <p>UDF UDF</p>
    <p>Header</p>
    <p>UDF</p>
    <p>UDF</p>
    <p>UDF UDF</p>
  </div>
  <div class="page">
    <p>Shuffle Abstraction</p>
    <p>Input</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core 3</p>
    <p>Core 4</p>
    <p>OutputDemuxCounter</p>
    <p>Counters</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>Mux</p>
    <p>Spread packets across cores for scaling</p>
  </div>
  <div class="page">
    <p>Shuffle Abstraction</p>
    <p>Input</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core 3</p>
    <p>Core 4</p>
    <p>OutputDemuxCounter</p>
    <p>Counters</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>+</p>
    <p>Mux</p>
    <p>Spread packets across cores for scaling</p>
    <p>Might even use hardware for this.</p>
  </div>
  <div class="page">
    <p>Example NF: Maglev</p>
    <p>Maglev: Load balancer from Google (NSDI16).</p>
    <p>Main contribution: a novel consistent hashing algorithm.</p>
    <p>Most of the work in common optimization: batching, scaling cross core.</p>
    <p>NetBricks implementation: 105 lines, 2 hours of time.</p>
    <p>Comparable performance to optimized code</p>
  </div>
  <div class="page">
    <p>E2 (SOSP15)</p>
    <p>Stratos</p>
    <p>FTMB (SIGCOMM 15)</p>
    <p>FlowTags (NSDI 14)</p>
    <p>Managing NFs Building and Running NFs</p>
    <p>xOMB (ANCS12) CoMB (NSDI12)</p>
    <p>No Isolation</p>
    <p>NetVM (IEEE TNSM) ClickOS (NSDI14)</p>
    <p>HyperSwitch (ATC13) mSwitch (SOSR15)</p>
    <p>VM Isolation</p>
  </div>
  <div class="page">
    <p>Software isolation is necessary for high performance NFV.</p>
    <p>Type checking + bound checking + unique types.</p>
    <p>Performance is not anathema to high-level programming</p>
    <p>Abstract operators + UDF simplify development.</p>
    <p>Conclusion</p>
    <p>Code available at http://netbricks.io/</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Both Memory Isolation and I/O Induce Overheads</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
</Presentation>
