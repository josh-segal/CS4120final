<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Terry Lam (with M. Mitzenmacher and G. Varghese)</p>
  </div>
  <div class="page">
    <p>Millions of potentially interesting events</p>
    <p>How to get a coherent view despite bandwidth and memory limits?</p>
    <p>Standard solutions: sampling and summarizing</p>
    <p>Denial of Service Worm outbreak</p>
  </div>
  <div class="page">
    <p>Need to collect infected stations for remediation</p>
    <p>Other examples of complete collection:</p>
    <p>u List all IPv6 stations</p>
    <p>u List all MAC addresses in a LAN 3</p>
  </div>
  <div class="page">
    <p>Slammer Witty</p>
    <p>signatures</p>
    <p>Intrusion Detection System (IDS)</p>
    <p>Slammer A Witty B Slammer C</p>
    <p>A B C</p>
    <p>Management Station</p>
  </div>
  <div class="page">
    <p>Challenges:</p>
    <p>Small logging bandwidth: L &lt; &lt; arrival rate B</p>
    <p>e.g., L = 1 Mbps; B = 10 Gbps</p>
    <p>Small memory: M &lt; &lt; number of sources N</p>
    <p>e.g., M = 10,000; N=1 Million</p>
    <p>Opportunity:</p>
    <p>Persistent sources: sources will keep arriving at the logger</p>
    <p>Sink</p>
    <p>N Memory M</p>
    <p>B L</p>
    <p>LOGGER</p>
  </div>
  <div class="page">
    <p>Carousel: new scheme, with minimal memory can log almost all sources in close to optimal time (N/L)</p>
    <p>Standard approach is much worse</p>
    <p>u ln(N) times worse in an optimistic random model</p>
    <p>u Adding a Bloom filter does not help</p>
    <p>u Infinitely worse in a deterministic adversarial model</p>
  </div>
  <div class="page">
    <p>IDS</p>
    <p>memory</p>
    <p>sink</p>
    <p>Sources 2 and 3 are never collected if pattern repeats  1 is logged many times  In worst case, N  M (many!) sources can be missed</p>
  </div>
  <div class="page">
    <p>Similar performance to a standard logger u Again, sources 2 and 3 are never collected because of timing</p>
    <p>IDS</p>
    <p>memory</p>
    <p>sink</p>
    <p>Bloom filter</p>
    <p>Clear Bloom filter?</p>
  </div>
  <div class="page">
    <p>Congestion Control for Logging?  When input traffic exceeds capacity, standard solution</p>
    <p>is admission control: but it requires source cooperation</p>
    <p>What can a poor resource do to protect itself unilaterally without cooperation from senders?</p>
    <p>Our approach: Randomized Admission Control.</p>
    <p>u Break sources into random groups and admit one group at a time for logging</p>
  </div>
  <div class="page">
    <p>IDS</p>
    <p>memory Bloom filter</p>
    <p>sink 1 33 3424 121</p>
    <p>Carousel</p>
    <p>Hash to color the sources say red and blue</p>
    <p>Only red sources are logged in this phase</p>
  </div>
  <div class="page">
    <p>IDS</p>
    <p>memory Bloom filter</p>
    <p>sink</p>
    <p>Carousel</p>
    <p>Change color!</p>
  </div>
  <div class="page">
    <p>IDS</p>
    <p>memory Bloom filter</p>
    <p>sink 1 3</p>
    <p>Carousel</p>
    <p>Bloom filter full Increase Carousel colors</p>
  </div>
  <div class="page">
    <p>Partition u Hk(X): lower k bits of H(S), a hash function of a source S</p>
    <p>u Divide the population into partitions with same hash value</p>
    <p>Iterate u T = M / L (available memory divided by logging bandwidth)</p>
    <p>u Each phase last T seconds, corresponds a distinct hash value u Bloom filter weeds out duplicates within a phase</p>
    <p>Monitor (to find right partition size) u Increase k if Bloom filter is too full u Decrease k if Bloom filter is too empty</p>
  </div>
  <div class="page">
    <p>Linux PCAP</p>
    <p>Snort Detection Engine</p>
    <p>Packet of current color?</p>
    <p>Packet in Bloom filter?</p>
    <p>Add packet to Bloom filter</p>
    <p>Bloom filter overflow?</p>
    <p>Snort output module</p>
    <p>Increase colors Reset timer</p>
    <p>Clear Bloom filter</p>
    <p>Bloom filter underflow?</p>
    <p>Change color</p>
    <p>Reset timer Clear Bloom filter</p>
    <p>Timer expires?</p>
    <p>Drop packet</p>
    <p>N</p>
    <p>Y</p>
    <p>N</p>
    <p>Y</p>
    <p>Y</p>
    <p>Y</p>
    <p>N</p>
    <p>Reduce colors</p>
    <p>N</p>
    <p>Y</p>
    <p>N</p>
    <p>Carousel</p>
  </div>
  <div class="page">
    <p>Carousel is competitive in that it can collect almost all sources within a factor of 2 from optimal time u N = sources, L = logging speed, optimal time = N/L u Collection time  2 N/L,</p>
    <p>Example: N = 10,000 M = 500, L = 100</p>
    <p>Number of logged</p>
    <p>sources</p>
    <p>Time (sec) 190 Optimal</p>
  </div>
  <div class="page">
    <p>N = 10,000; M = 500; L = 100 items/sec</p>
    <p>Logistic model of worm growth 16</p>
    <p>Time (sec)</p>
    <p>Number of logged</p>
    <p>sources</p>
    <p>Carousel is nearly ten times faster than nave collector</p>
  </div>
  <div class="page">
    <p>Snort Experimental Setup</p>
    <p>Scaled down from real traffic: 10,000 sources, buffer of 500, input rate =100 Mbps, logging rate = 1 Mbps</p>
    <p>Two cases: source S picked randomly on each packet or periodically (1,2,3 . . 10,000, 1, 2, 3, . . )</p>
    <p>Intel Xeon 2.8 GHz 8 cores, 8 GB RAM, 1 TB disk</p>
    <p>traffic generator Snort IDS</p>
    <p>with and without Carousel</p>
    <p>Signature P S P log S</p>
  </div>
  <div class="page">
    <p>Time (sec) Time (sec)</p>
    <p>(a) Random traffic pattern (b) Periodic traffic pattern</p>
  </div>
  <div class="page">
    <p>Using 1 Mbit of memory, less than 5% of an ASIC</p>
    <p>Can be easily added to hardware IDS/IPS chipsets</p>
    <p>Hash key Compare: lower order</p>
    <p>bits of hash = V? Bloom filter</p>
    <p>Timer T</p>
    <p>V=V+1 clear</p>
    <p>Carousel logging hardware</p>
    <p>Key, record from detector</p>
    <p>To remote logger</p>
  </div>
  <div class="page">
    <p>High speed implementations of IPS devices u Fast reassembly, normalization and regular expression</p>
    <p>u No prior work on scalable logging</p>
    <p>Alto file system: dynamic and random partitioning u Fits big files into small memory to rebuild file index after crash u Memory is only scarce resource</p>
    <p>u Carousel handles both limited memory and logging speed</p>
    <p>u Carousel has a rigorous competitive analysis</p>
  </div>
  <div class="page">
    <p>Carousel is probabilistic: sources can be missed with low probability  mitigate by changing hash function on each Carousel cycle.</p>
    <p>Carousel relies on a persistent source assumption</p>
    <p>u Does not guarantee logging of one-time events</p>
    <p>Carousel does not prevent duplicates at the sink but has fast collection time even in an adversarial model.</p>
  </div>
  <div class="page">
    <p>Carousel is a scalable logger that u Collects nearly all persistent sources in nearly optimal time</p>
    <p>u Is easy to implement in hardware and software u Is a form of randomized admission control</p>
    <p>Applicable to a wide range of monitoring tasks with: u High line speed, low memory, and small logging speed</p>
    <p>u And where sources are persistent</p>
  </div>
</Presentation>
