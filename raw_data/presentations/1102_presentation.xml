<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Efficient Algorithm for the An Efficient Algorithm for the Exact Analysis of Multiclass Exact Analysis of Multiclass</p>
    <p>Queueing NetworksQueueing Networks with Large Population Sizeswith Large Population Sizes</p>
    <p>Giuliano CasaleGiuliano Casale</p>
    <p>Malo, FranceMalo, France</p>
    <p>Politecnico di Politecnico di MilanoMilano</p>
    <p>Milan, ItalyMilan, Italy</p>
    <p>Neptuny R&amp;DNeptuny R&amp;D Milan, ItalyMilan, Italy</p>
  </div>
  <div class="page">
    <p>OutlineOutline</p>
    <p>Convolution Expression Convolution Expression  Population Constraint Population Constraint</p>
  </div>
  <div class="page">
    <p>Properties used by exact solution Properties used by exact solution algorithms:algorithms:</p>
    <p>A Closed Product-Form A Closed Product-Form QNQN</p>
    <p>RR workload classesworkload classes M M queues queues (arbitrary number of (arbitrary number of delays)delays) NNss population of class population of class ss</p>
    <p>1,s1,s</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>2,s2,s</p>
    <p>3,s3,s</p>
    <p>0,s0,s</p>
    <p>Service Service demandsdemands</p>
    <p>Think Think timetime</p>
  </div>
  <div class="page">
    <p>Exact AlgorithmsExact Algorithms Normalizing Constant Normalizing Constant</p>
    <p>ApproachApproach</p>
  </div>
  <div class="page">
    <p>Convolution ExpressionConvolution Expression Convolution AlgorithmConvolution Algorithm</p>
    <p>Queue k behavior is independent of queue j state</p>
    <p>Solved by a multidimensional recursion on Solved by a multidimensional recursion on the the MM queues and on the queues and on the RR class populations class populations</p>
    <p>R</p>
    <p>s ssk</p>
    <p>k NGNGNG 1</p>
    <p>, )1()()(</p>
    <p>Model with Model with same same</p>
    <p>population, population, but queue but queue kk</p>
    <p>lessless</p>
    <p>Models withModels with same queues,same queues,</p>
    <p>but a class but a class ss job job lessless</p>
    <p>)( RNO RNNN  ...1</p>
  </div>
  <div class="page">
    <p>add a queueadd a queue</p>
    <p>different populationsdifferent populations</p>
    <p>Convolution AlgorithmConvolution Algorithm Recursive Solution of the Convolution Recursive Solution of the Convolution</p>
    <p>ExpressionExpression</p>
    <p>LARGE POPULATIONSLARGE POPULATIONS Combinatorial explosion Combinatorial explosion of the number of modelsof the number of models</p>
    <p>(2,3)</p>
    <p>(2,2)</p>
    <p>(2,1)</p>
    <p>(2,0)</p>
    <p>(1,3)</p>
    <p>(1,2)</p>
    <p>(1,1)</p>
    <p>(1,0)</p>
    <p>(0,3)</p>
    <p>(0,2)</p>
    <p>(0,1)</p>
    <p>(0,0)</p>
  </div>
  <div class="page">
    <p>Population ConstraintPopulation Constraint RECAL, LBANC (MVA)RECAL, LBANC (MVA)</p>
    <p>Each class has a constant population sizeEach class has a constant population size</p>
    <p>M</p>
    <p>k s</p>
    <p>k sksss NGNGNGN</p>
    <p>sss</p>
    <p>M</p>
    <p>k sk NNXNQ</p>
    <p>)()( ,0 1</p>
    <p>,</p>
    <p>LittleLittles Law s Law for for</p>
    <p>the delay the delay serverserver</p>
    <p>Using normalizing constants:Using normalizing constants:</p>
    <p>Models with an Models with an additional additional</p>
    <p>(identical) copy of (identical) copy of queue queue kk</p>
    <p>Sum of class Sum of class ss</p>
    <p>queuequeue-lengthslengths</p>
    <p>The population The population recursion recursion is on class is on class ss jobs jobs onlyonly</p>
  </div>
  <div class="page">
    <p>Linear population recursionLinear population recursion  The number of models grows The number of models grows</p>
    <p>with with NN because of because of</p>
    <p>Asymptotic CostAsymptotic Cost</p>
    <p>RECAL Class RecursionRECAL Class Recursion Recursive Solution of the Population Recursive Solution of the Population</p>
    <p>ConstraintConstraint</p>
    <p>(2,3)</p>
    <p>(2,2)</p>
    <p>(2,1)</p>
    <p>(2,0)</p>
    <p>(1,0)</p>
    <p>(0,0)</p>
    <p>M</p>
    <p>k s</p>
    <p>k sk eNG</p>
    <p>)( MNO</p>
  </div>
  <div class="page">
    <p>A New Solution A New Solution ApproachApproach</p>
    <p>Systems of Normalizing Systems of Normalizing Constant Recurrence Constant Recurrence</p>
    <p>EquationsEquations</p>
  </div>
  <div class="page">
    <p>Linear System Linear System ReformulationReformulation</p>
    <p>We explicit the recursion on the number We explicit the recursion on the number of queues by a linear system, e.g., for the of queues by a linear system, e.g., for the Convolution Algorithm:Convolution Algorithm:</p>
    <p>R</p>
    <p>s ss NGNGNG</p>
    <p>R</p>
    <p>s ss NGNGNG</p>
    <p>R</p>
    <p>s ss NGNG</p>
    <p>Unknown Constants Unknown Constants for the Current Populationfor the Current Population</p>
    <p>Known Terms Previously Computed Known Terms Previously Computed Using the Population RecursionUsing the Population Recursion</p>
  </div>
  <div class="page">
    <p>Linear System Linear System ReformulationReformulation</p>
    <p>PropertiesProperties  Add Add unused equationsunused equations and and</p>
    <p>additional unknownsadditional unknowns instead of instead of perfoming recursionsperfoming recursions</p>
    <p>R</p>
    <p>s ssk</p>
    <p>k NGNGNG 1</p>
    <p>, )1()()(</p>
    <p>R</p>
    <p>s s</p>
    <p>k sj</p>
    <p>kjk NGNGNG 1</p>
    <p>, , )1()()(</p>
    <p>R</p>
    <p>s s</p>
    <p>kj si</p>
    <p>kjikj NGNGNG 1</p>
    <p>, ,</p>
    <p>,,, )1()()(</p>
    <p>kjiMkji  ;,...,1,, For a model with 3 For a model with 3 queues:queues: 12 equations, 7 12 equations, 7 unknownsunknowns</p>
  </div>
  <div class="page">
    <p>Linear System Linear System ReformulationReformulation</p>
    <p>Properties (cont.)Properties (cont.)  Use the extra equations to consider Use the extra equations to consider</p>
    <p>some of the recursively evaluted some of the recursively evaluted terms as unkowns terms as unkowns</p>
    <p>R</p>
    <p>s ssk</p>
    <p>k NGNGNG 1</p>
    <p>, )1()()(</p>
    <p>R</p>
    <p>s s</p>
    <p>k sj</p>
    <p>kjk NGNGNG 1</p>
    <p>, , )1()()(</p>
    <p>R</p>
    <p>s s</p>
    <p>kj si</p>
    <p>kjikj NGNGNG 1</p>
    <p>, ,</p>
    <p>,,, )1()()(</p>
    <p>kjiMkji  ;,...,1,,</p>
  </div>
  <div class="page">
    <p>Linear System Linear System ReformulationReformulation</p>
    <p>Properties (cont.)Properties (cont.)</p>
    <p>R</p>
    <p>s sskk</p>
    <p>k NGNGNGNG 2</p>
    <p>,11, )1()1()()(</p>
    <p>R</p>
    <p>s s</p>
    <p>k sj</p>
    <p>k j</p>
    <p>kjk NGNGNGNG 2</p>
    <p>,11, , )1()1()()(</p>
    <p>R</p>
    <p>s s</p>
    <p>kj si</p>
    <p>kj i</p>
    <p>kjikj NGNGNGNG 2</p>
    <p>, ,1</p>
    <p>, 1,</p>
    <p>,,, )1()1()()(</p>
    <p>Now there is Now there is nono recursion on class 1recursion on class 1 population population when R&gt;1when R&gt;1</p>
    <p>the new linear system must have a the new linear system must have a uniqueunique solutionsolution</p>
  </div>
  <div class="page">
    <p>(2,3)</p>
    <p>(2,2)</p>
    <p>(2,1)</p>
    <p>(2,0)</p>
    <p>(1,3)</p>
    <p>(1,2)</p>
    <p>(1,1)</p>
    <p>(1,0)</p>
    <p>(0,0)</p>
    <p>Linear System Linear System ReformulationReformulation</p>
    <p>Properties (cont.)Properties (cont.) Constants computed by Constants computed by</p>
    <p>the the linear system without linear system without</p>
    <p>recursions recursions</p>
    <p>These prevent the These prevent the recursion recursion</p>
    <p>into the class 1 into the class 1 branches branches</p>
    <p>This approach works only with This approach works only with 2 classes 2 classes We need more extra We need more extra equations to obtain a general equations to obtain a general O(N) techniqueO(N) technique</p>
    <p>(2,3)</p>
    <p>(2,2)</p>
    <p>(2,1)</p>
    <p>(2,0)</p>
    <p>(1,3)</p>
    <p>(1,2)</p>
    <p>(1,1)</p>
    <p>(1,0)</p>
    <p>(0,3)</p>
    <p>(0,2)</p>
    <p>(0,1)</p>
    <p>(0,0)</p>
  </div>
  <div class="page">
    <p>Can we do better?Can we do better?</p>
    <p>Main Questions:Main Questions:  How to generalize this approach to R&gt;2?How to generalize this approach to R&gt;2?  How to have always a unique solution?How to have always a unique solution?  How to insert the Population Constraint?How to insert the Population Constraint?</p>
    <p>Unexpectedly, we found aUnexpectedly, we found a General Answer: General Answer:  Stop to recursively remove stationsStop to recursively remove stations  Increase station Increase station multiplicitiesmultiplicities, i.e., add to , i.e., add to</p>
    <p>the network several new copies of its the network several new copies of its queuesqueues</p>
  </div>
  <div class="page">
    <p>A New Exact A New Exact AlgorithmAlgorithm</p>
  </div>
  <div class="page">
    <p>Increasing the number of Increasing the number of queuesqueues</p>
    <p>{1,2,3}</p>
    <p>{1,1,2,3}{1,2,2,3}{1,2,3,3}</p>
    <p>+1+1 +2+2 +3+3</p>
    <p>R</p>
    <p>s s</p>
    <p>k sk</p>
    <p>k NGNGNG 1</p>
    <p>, )1()()(</p>
    <p>M</p>
    <p>k s</p>
    <p>k sksss NGeNGNGN</p>
    <p>Input NetworkInput Network MM=3 queues=3 queues</p>
    <p>G</p>
    <p>kG</p>
  </div>
  <div class="page">
    <p>Structure of the Structure of the RecursionRecursion</p>
    <p>Theoretical Theoretical Asymptotic costAsymptotic cost</p>
    <p>+ with Numerical+ with Numerical StabilizationStabilization</p>
    <p>(2,3)</p>
    <p>(2,2)</p>
    <p>(2,1)</p>
    <p>(2,0)</p>
    <p>(1,0)</p>
    <p>(0,0)</p>
    <p>R = R = 22</p>
    <p>distindistin ct ct</p>
    <p>classeclasse ss</p>
    <p>R = R = 11</p>
    <p>distindistin ctct</p>
    <p>classeclasse ss</p>
    <p>)(NO</p>
    <p>)log( 2 NNO</p>
    <p>ComplexiComplexi ty ty</p>
    <p>IncreaseIncrease</p>
  </div>
  <div class="page">
    <p>Complexity IncreaseComplexity Increase</p>
    <p>RR=0=0 Input NetworkInput Network MM=3 queues=3 queues</p>
    <p>RR = = 11</p>
    <p>RR = = 22</p>
    <p>{1,2,3}</p>
    <p>{1,1,2,3}{1,2,2,3}{1,2,3,3}</p>
    <p>{1,1,2,2,3}</p>
    <p>+1+1 +2+2 +3+3</p>
    <p>{1,1,2,3,3}{1,2,2,3,3}</p>
    <p>{1,1,1,2,3}{1,2,2,2,3}{1,2,3,3,3}</p>
    <p>+1+1 +2+2 +3+3</p>
  </div>
  <div class="page">
    <p>Population Recursion Population Recursion StepStep</p>
    <p>Population Recursion  Fundamental Population Recursion  Fundamental StepStep (2,2)(2,1)</p>
    <p>{1,1,2,2,3}{1,1,2,3,3}{1,2,2,3,3}</p>
    <p>{1,1,1,2,3}{1,2,2,2,3}{1,2,3,3,3}</p>
    <p>{1,1,2,2,3}{1,1,2,3,3}{1,2,2,3,3}</p>
    <p>{1,1,1,2,3}{1,2,2,2,3}{1,2,3,3,3}</p>
    <p>{1,1,1,2,3}{1,2,2,2,3}{1,2,3,3,3}</p>
    <p>Class 2Class 2 Population Population ConstraintsConstraints</p>
    <p>LINEAR SYSTEMLINEAR SYSTEM ConvolutionConvolution Expressions Expressions</p>
    <p>++ Population Population ConstraintsConstraints</p>
  </div>
  <div class="page">
    <p>The AlgorithmThe Algorithm</p>
    <p>(1,0) (2,0)</p>
    <p>(2,1) (2,2) (2,3)</p>
    <p>MultipliciMultiplici ty ty</p>
    <p>IncreaseIncrease Solution Solution ++</p>
    <p>Performance Performance MetricsMetrics</p>
    <p>RR = 2 = 2</p>
    <p>RR = 1 = 1</p>
  </div>
  <div class="page">
    <p>Linear Algebra Linear Algebra OptimizationsOptimizations</p>
    <p>Efficient Permutation to Block Triangular Form, Efficient Permutation to Block Triangular Form, e.g.e.g.</p>
    <p>Very regular (Very regular (precomputationprecomputation))  Very sparse structures (Very sparse structures (low memory low memory</p>
    <p>requirementsrequirements) )  Block Gaussian EliminationBlock Gaussian Elimination</p>
    <p>Massive reduction of computational costsMassive reduction of computational costs</p>
  </div>
  <div class="page">
    <p>Numerical PropertiesNumerical Properties</p>
    <p>Numerical Accuracy of SolutionsNumerical Accuracy of Solutions  Round-off errors accumulate during executionRound-off errors accumulate during execution  Normalizing constant range exceptionNormalizing constant range exception  Definitive solution: Definitive solution: Exact Linear System Exact Linear System</p>
    <p>SolversSolvers  Overheads negligible wr.t. computational savingsOverheads negligible wr.t. computational savings</p>
    <p>Singular Linear SystemsSingular Linear Systems  In special cases, we can drop some equationsIn special cases, we can drop some equations  Hybrid Solution Hybrid Solution</p>
    <p>Recursively evaluate problematic modelsRecursively evaluate problematic models</p>
  </div>
  <div class="page">
    <p>Numerical ExampleNumerical Example</p>
    <p>Closed network model with 3 queue types (25 Closed network model with 3 queue types (25 queues), queues),</p>
    <p>State-of-the-art: State-of-the-art: all methods are infeasibleall methods are infeasible  Convolution, LBANC (MVA): 10Convolution, LBANC (MVA): 101919-10-102020 flops flops  RECAL: 10RECAL: 1071 71 flops (flops (improved versionimproved version: still : still</p>
    <p>Our algorithmOur algorithm::  Current best stable implementation: 10Current best stable implementation: 1011 11 flopsflops</p>
    <p>173 seconds, 20 MBytes memory173 seconds, 20 MBytes memory</p>
  </div>
  <div class="page">
    <p>ConclusionsConclusions</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Conclusions and Future WorkWork</p>
    <p>Theoretical developments for the exact Theoretical developments for the exact analysis of closed product-form queueing analysis of closed product-form queueing networksnetworks</p>
    <p>Systems of Normalizing Constant Systems of Normalizing Constant EquationsEquations  Powerful ConceptPowerful Concept  Potential for several extensions, e.g., new Potential for several extensions, e.g., new</p>
    <p>algorithms with reduced complexityalgorithms with reduced complexity  Future WorkFuture Work</p>
    <p>Comparison on non-asymptotic PopulationsComparison on non-asymptotic Populations  Extension to load-dependent QN modelsExtension to load-dependent QN models</p>
  </div>
</Presentation>
