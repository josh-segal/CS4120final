<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Grimoire: Synthesizing Structure while Fuzzing</p>
    <p>Usenix Security 2019, Santa Clara August 16, 2019</p>
    <p>Tim Blazytko, Cornelius Aschermann, Moritz Schlgel, Ali Abbasi, Sergej Schumilo, Simon Wrner, and Thorsten Holz</p>
    <p>Chair for Systems Security Ruhr-Universitt Bochum</p>
  </div>
  <div class="page">
    <p>Goal: Finding bugs in programs expecting structured input</p>
    <p>libxml2</p>
    <p>Tiny C Compiler</p>
    <p>JavaScriptCore</p>
    <p>Boolector</p>
  </div>
  <div class="page">
    <p>Lets fuzz!</p>
  </div>
  <div class="page">
    <p>First attempt: Blind fuzzing</p>
  </div>
  <div class="page">
    <p>First attempt: Blind fuzzing</p>
    <p>State space</p>
    <p>Interesting area</p>
    <p>Uninteresting area</p>
    <p>Can we do better?</p>
  </div>
  <div class="page">
    <p>Coverage-guided fuzzing</p>
    <p>Program instrumentation</p>
  </div>
  <div class="page">
    <p>Coverage-guided fuzzing</p>
  </div>
  <div class="page">
    <p>Coverage-guided fuzzing</p>
  </div>
  <div class="page">
    <p>Coverage-guided fuzzing</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Coverage-guided fuzzing</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips</p>
    <p>Simple arithmetic  Force specific, interesting values  Havoc: random mutations  Repetition  Splicing</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips</p>
    <p>Simple arithmetic  Force specific, interesting values  Havoc: random mutations  Repetition  Splicing</p>
    <p>A B C D</p>
    <p>B A D C</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips  Simple arithmetic</p>
    <p>Force specific, interesting values  Havoc: random mutations  Repetition  Splicing</p>
    <p>B A D C</p>
    <p>B A E 4</p>
    <p>+8</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips  Simple arithmetic  Force specific, interesting values</p>
    <p>Havoc: random mutations  Repetition  Splicing</p>
    <p>B A E 4</p>
    <p>B A E 0</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips  Simple arithmetic  Force specific, interesting values  Havoc: random mutations</p>
    <p>Repetition  Splicing</p>
    <p>A B C D</p>
    <p>B A D 0</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips  Simple arithmetic  Force specific, interesting values  Havoc: random mutations  Repetition</p>
    <p>Splicing</p>
    <p>A B</p>
    <p>A B A B</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Bitflips  Simple arithmetic  Force specific, interesting values  Havoc: random mutations  Repetition  Splicing</p>
    <p>A B C D</p>
    <p>B A D 0</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Observation: Mutations modify the input only slightly</p>
  </div>
  <div class="page">
    <p>While this input works well ...</p>
  </div>
  <div class="page">
    <p>While this input works well ...</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>State space</p>
    <p>Interesting area</p>
    <p>Uninteresting area</p>
    <p>Mutations (cov.-guided)</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>Observation: Mutations modify the input only slightly</p>
    <p>Caveat: Not all programs are equal</p>
  </div>
  <div class="page">
    <p>... this one is problematic</p>
    <p>def some_function(self): s = &quot;hi mom! &quot; if self.famous:</p>
    <p>return s + &quot;I'm famous!&quot; else:</p>
    <p>self.confidence = 0 return s + &quot;*crying*&quot;</p>
    <p>Insight: Mutation requires inputs structure</p>
  </div>
  <div class="page">
    <p>... this one is problematic</p>
    <p>deb1some_functioasdflf): s = &quot;hi mom! &quot; if ? ?``famous:</p>
    <p>reABCDEFGH &quot;I'm famous!&quot; else:</p>
    <p>self.confidence = 0 return s + 0000ying*&quot;</p>
    <p>Insight: Mutation requires inputs structure</p>
  </div>
  <div class="page">
    <p>... this one is problematic</p>
    <p>deb1some_functioasdflf): s = &quot;hi mom! &quot; if ? ?``famous:</p>
    <p>reABCDEFGH &quot;I'm famous!&quot; else:</p>
    <p>self.confidence = 0 return s + 0000ying*&quot;</p>
    <p>Insight: Mutation requires inputs structure</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>State space</p>
    <p>Interesting area</p>
    <p>Uninteresting area</p>
    <p>Mutations (cov.-guided)</p>
    <p>How to cross large gaps?</p>
    <p>Solution: Grammar-based fuzzing</p>
  </div>
  <div class="page">
    <p>Small-scale mutations</p>
    <p>State space</p>
    <p>Interesting area</p>
    <p>Uninteresting area</p>
    <p>Mutations (cov.-guided)</p>
    <p>How to cross large gaps?</p>
    <p>Solution: Grammar-based fuzzing</p>
  </div>
  <div class="page">
    <p>Large-scale mutations</p>
    <p>State space</p>
    <p>Interesting area</p>
    <p>Uninteresting area</p>
    <p>Mutations (grammar)</p>
    <p>Now crossing large gaps!</p>
    <p>Problem: Creating a grammar requires human-effort</p>
  </div>
  <div class="page">
    <p>Large-scale mutations</p>
    <p>State space</p>
    <p>Interesting area</p>
    <p>Uninteresting area</p>
    <p>Mutations (grammar)</p>
    <p>Now crossing large gaps!</p>
    <p>Problem: Creating a grammar requires human-effort</p>
  </div>
  <div class="page">
    <p>Our approach</p>
  </div>
  <div class="page">
    <p>Grimoire: Best of both worlds</p>
    <p>Learn structure of inputs via fuzz testing</p>
    <p>Apply large-scale mutations on learned structures</p>
    <p>Profit!</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pprint 'aaaa'</p>
    <p>|pp|ri|nt|_'|aa|aa|'|</p>
    <p>split</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pprint 'aaaa'</p>
    <p>|pp|ri|nt|_'|aa|aa|'|</p>
    <p>split</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprint ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>rint 'aaaa'</p>
    <p>pprint ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>rint 'aaaa'</p>
    <p>pprint ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>rint 'aaaa'</p>
    <p>pp</p>
    <p>rint ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>ppnt 'aaaa'</p>
    <p>ppri</p>
    <p>nt ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>ppri 'aaaa'</p>
    <p>pprint</p>
    <p>' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprintaaaa'</p>
    <p>pprint '</p>
    <p>'</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprint 'aa'</p>
    <p>pprint '</p>
    <p>'</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprint 'aa'</p>
    <p>pprint '</p>
    <p>'</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprint 'aa'</p>
    <p>pprint '</p>
    <p>'</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprint 'aaaa</p>
    <p>pprint ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>pp|ri|nt|_'|aa|aa|'</p>
    <p>pprint 'aaaa</p>
    <p>pprint ' '</p>
    <p>pprint ' '</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>if(x&gt;1) then x=3 end</p>
    <p>if(x&gt;1)|then|x=3|end</p>
    <p>if(x&gt;1) then end</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>if(x&gt;1) then x=3 end</p>
    <p>if(x&gt;1)|then|x=3|end</p>
    <p>if(x&gt;1) then end</p>
    <p>split</p>
  </div>
  <div class="page">
    <p>Input generalization</p>
    <p>if(x&gt;1) then x=3 end</p>
    <p>if(x&gt;1)|then|x=3|end</p>
    <p>if(x&gt;1) then end</p>
    <p>generalize</p>
  </div>
  <div class="page">
    <p>Why do we generalize inputs?</p>
    <p>if(x&gt;1) then end pprint ' '</p>
    <p>Structure-dependent mutations</p>
  </div>
  <div class="page">
    <p>Why do we generalize inputs?</p>
    <p>if(x&gt;1) then end pprint ' '</p>
    <p>if(x&gt;1) then end</p>
    <p>pick input</p>
    <p>Structure-dependent mutations</p>
  </div>
  <div class="page">
    <p>Why do we generalize inputs?</p>
    <p>if(x&gt;1) then end pprint ' '</p>
    <p>if(x&gt;1) then end</p>
    <p>select gap</p>
    <p>Structure-dependent mutations</p>
  </div>
  <div class="page">
    <p>Why do we generalize inputs?</p>
    <p>if(x&gt;1) then end pprint ' '</p>
    <p>if(x&gt;1) then pprint ' ' end</p>
    <p>replace gap</p>
    <p>Structure-dependent mutations</p>
  </div>
  <div class="page">
    <p>Why do we generalize inputs?</p>
    <p>if(x&gt;1) then end pprint ' '</p>
    <p>if(x&gt;1) then pprint ' ' end</p>
    <p>replace gap</p>
    <p>Structure-dependent mutations</p>
  </div>
  <div class="page">
    <p>Input extension</p>
    <p>concat</p>
    <p>pprint ' ' x= y+</p>
  </div>
  <div class="page">
    <p>Input extension</p>
    <p>concat</p>
    <p>pprint ' ' x= y+</p>
  </div>
  <div class="page">
    <p>Input extension</p>
    <p>concat</p>
    <p>pprint ' ' x= y+</p>
    <p>pprint ''x=y+</p>
  </div>
  <div class="page">
    <p>Input extension</p>
    <p>concat</p>
    <p>pprint ' ' x= y+</p>
    <p>pprint ''x=y+ x=y+pprint ''</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
  </div>
  <div class="page">
    <p>Recursive replacement</p>
    <p>pprint ' ' if(x&gt;1) then end x= y+</p>
    <p>if(x&gt;1)</p>
    <p>if(x&gt;1) pprint ' '</p>
    <p>if(x&gt;1) pprint ' x= y+ '</p>
    <p>if(x&gt;1) pprint 'x=y+'</p>
  </div>
  <div class="page">
    <p>String replacement</p>
    <p>replace</p>
    <p>pprint 'aaaa' eval</p>
    <p>eval 'aaaa'</p>
  </div>
  <div class="page">
    <p>String replacement</p>
    <p>replace</p>
    <p>pprint 'aaaa' eval</p>
    <p>eval 'aaaa'</p>
  </div>
  <div class="page">
    <p>String replacement</p>
    <p>replace</p>
    <p>pprint 'aaaa' eval</p>
    <p>eval 'aaaa'</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Common fuzzers vs. Grimoire</p>
  </div>
  <div class="page">
    <p>We outperform AFL, QSYM, Angora, ... on almost all targets</p>
    <p>Tiny C Compiler 3</p>
    <p>Boolector 3</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Grammar-based fuzzer vs. Grimoire</p>
  </div>
  <div class="page">
    <p>Comparison to a grammar-based fuzzer</p>
    <p>Time</p>
    <p>#BBs</p>
    <p>Legend</p>
    <p>Grammar fuzzer  Grimoire</p>
    <p>Grammar fuzzer &gt;&gt; Grimoire</p>
  </div>
  <div class="page">
    <p>Comparison to a grammar-based fuzzer</p>
    <p>Time</p>
    <p>#BBs</p>
    <p>Legend</p>
    <p>Grammar fuzzer  Grimoire</p>
    <p>Grammar fuzzer &gt;&gt; Grimoire</p>
  </div>
  <div class="page">
    <p>Using a grammar-based fuzzer as seed</p>
    <p>Time</p>
    <p>#BBs</p>
    <p>Seed</p>
    <p>Legend</p>
    <p>Grammar fuzzer  Grimoire + Seed</p>
    <p>Grammar fuzzer &lt; Grimoire + Seed</p>
  </div>
  <div class="page">
    <p>Using a grammar-based fuzzer as seed</p>
    <p>Time</p>
    <p>#BBs</p>
    <p>Seed</p>
    <p>Legend</p>
    <p>Grammar fuzzer  Grimoire + Seed</p>
    <p>Grammar fuzzer &lt; Grimoire + Seed</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Take-aways</p>
    <p>Fuzzing structured inputs</p>
    <p>Common fuzzers: Small-scale mutations</p>
    <p>Grammar-based: Large-scale mutations</p>
    <p>Grimoire:</p>
    <p>Inference of input structure</p>
    <p>Large-scale mutations (extension, recursive replacement, string replacement)</p>
    <p>Real-world impact: 11 CVEs assigned</p>
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Take-aways</p>
    <p>Fuzzing structured inputs</p>
    <p>Common fuzzers: Small-scale mutations</p>
    <p>Grammar-based: Large-scale mutations</p>
    <p>Grimoire:</p>
    <p>Inference of input structure</p>
    <p>Large-scale mutations (extension, recursive replacement, string replacement)</p>
    <p>Real-world impact: 11 CVEs assigned</p>
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Take-aways</p>
    <p>Fuzzing structured inputs</p>
    <p>Common fuzzers: Small-scale mutations</p>
    <p>Grammar-based: Large-scale mutations</p>
    <p>Grimoire:</p>
    <p>Inference of input structure</p>
    <p>Large-scale mutations (extension, recursive replacement, string replacement)</p>
    <p>Real-world impact: 11 CVEs assigned</p>
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>@m_u00d8</p>
    <p>moritz.schloegel@rub.de</p>
  </div>
</Presentation>
