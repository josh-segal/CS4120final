<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fully Automatic Stream Management</p>
    <p>for Multi-Streamed SSDs</p>
    <p>using Program Contexts</p>
    <p>Taejin Kim1, Duwon Hong1, Sangwook Shane Hahn2,</p>
    <p>Myoungjun Chun1, Sungjin Lee3,</p>
    <p>Jooyoung Hwang4, Jongyoul Lee4, and Jihong Kim1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction &amp; Motivation</p>
    <p>Automatic Stream Identification</p>
    <p>Design of PCStream</p>
    <p>Evaluations</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>No overhead</p>
    <p>Garbage Collection Overhead in SSDs</p>
    <p>Garbage collection (GC) overhead</p>
    <p>Reclaiming free space requires copying valid pages</p>
    <p>Amplified writes shorten lifetime and reduce performance of SSDs</p>
    <p>How to minimize amplified writes</p>
    <p>Prevent scattered page invalidation</p>
    <p>Need to know similar lifetime data and physically separate them</p>
    <p>Placing data with similar lifetimes together can reduce GC overhead</p>
    <p>Alternate placement</p>
    <p>Block 0</p>
    <p>Invalid page</p>
    <p>Valid page</p>
    <p>Block 1 Block 0 Block 1</p>
    <p>Lifetime-aware placement</p>
    <p>Large # of page copies</p>
    <p>Erase for GC Erase for GC</p>
  </div>
  <div class="page">
    <p>SSD</p>
    <p>NAND Flash Memory</p>
    <p>Data with different streams are physically separated</p>
    <p>Challenges of using the multi-stream feature</p>
    <p>Host: Difficult to know data lifetime in advance</p>
    <p>SSD: # of supported streams may be different across SSDs</p>
    <p>Multi-stream: Minimize Write Amplification</p>
    <p>The Multi-streamed SSD, J. Kang et al., in HotStorage14</p>
    <p>Multi-stream</p>
    <p>interface Host</p>
    <p>application</p>
    <p>Prob. 1: Application modification</p>
    <p>required</p>
    <p>Prob. 2: May need to re-assign if</p>
    <p># of streams changes</p>
    <p>Automatic stream management is required</p>
  </div>
  <div class="page">
    <p>Existing Automatic Stream Management</p>
    <p>AutoStream assigns stream at device driver layer based on</p>
    <p>the access frequency of the same LBA</p>
    <p>Applicability is limited only when LBA access locality is obvious</p>
    <p>Does not work well when no apparent locality on LBA accesses</p>
    <p>(e.g., append-only, write-once patterns)</p>
    <p>AutoStream: Automatic Stream Management for multi-streamed SSDs, J. Yang et al., in SYSTOR17</p>
    <p>Data lifetime prediction for append-only workload is required</p>
    <p>&lt;Append-only Lifetime Patterns&gt; (RocksDB)</p>
    <p>L o</p>
    <p>g ic</p>
    <p>a l T</p>
    <p>im e</p>
    <p>Logcal Block Address</p>
    <p>&lt;Sequential Access Patterns&gt; (Multi-media)</p>
  </div>
  <div class="page">
    <p>Design Goal of Proposed Work</p>
    <p>Must automatically work with general workloads</p>
    <p>Streams are identified without modifying application</p>
    <p>Data lifetimes should be estimated at a higher abstraction level</p>
    <p>than LBAs (I/O activities)</p>
    <p>Streams should be allocated automatically</p>
    <p>Similar lifetime data are mapped to the same stream</p>
    <p>Automatic Stream Identification</p>
    <p>Automatic Stream Mapping</p>
    <p>Automatic Stream Management Technique</p>
    <p>Short Lifetime Data</p>
    <p>Long Lifetime Data</p>
    <p>Stream1 StreamN</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction &amp; Motivation</p>
    <p>Automatic Stream Identification</p>
    <p>Design of PCStream</p>
    <p>Evaluations</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Stream Identification using I/O Activities</p>
    <p>I/O activities show distinct lifetime patterns</p>
    <p>Ex) 3 activities in RocksDB shows distinct lifetime patterns</p>
    <p>Logging: valid until data in memory are flushed (short lifetime)</p>
    <p>Flushing: deleted when top level of LSM-tree is full (short lifetime)</p>
    <p>Compaction: deleted when its level is full (long lifetime)</p>
    <p>Data lifetime can be estimated by</p>
    <p>I/O activities 1. logging</p>
    <p>activities?</p>
    <p>disk</p>
    <p>memory</p>
    <p>Log L0</p>
    <p>L1</p>
    <p>L2</p>
  </div>
  <div class="page">
    <p>Program Context Can Distinguish Activities</p>
    <p>A program context (PC) is known to be an effective hint in</p>
    <p>separating data with similar update period</p>
    <p>Represents a particular execution phase of a program</p>
    <p>Identified by summing program counter values of each execution</p>
    <p>path of function calls</p>
    <p>Ex) PC calculation with synthetic program</p>
    <p>Execution path to the write system call</p>
    <p>Addresses of program counter values in the stack</p>
    <p>Result</p>
    <p>A Program Context-Aware Data Separation Technique for Reducing Garbage Collection Overhead in NAND Flash Memory, K. Ha et al., SNAPI11</p>
    <p>Main () func_B () func_A () write_data () write ()</p>
    <p>Summing all the values = 0x2408d00</p>
  </div>
  <div class="page">
    <p>Feasibility: Distinguishing Activities by PC</p>
    <p>Log data</p>
    <p>Flush data</p>
    <p>&lt;manual&gt; &lt;PC #0&gt;</p>
    <p>&lt;manual&gt; &lt;PC #1&gt;</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction &amp; Motivation</p>
    <p>Automatic Stream Identification</p>
    <p>Design of PCStream</p>
    <p>Evaluations</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Overview of PCStream</p>
    <p>PCStream (Fully Automatic)</p>
    <p>PC Extractor</p>
    <p>PC Lifetime Analyzer</p>
    <p>PC to Stream Mapper</p>
    <p>Application (no modification)</p>
    <p>Multi-stream SSD</p>
    <p>User Process</p>
    <p>Stack Analysis</p>
    <p>PC Value</p>
    <p>Computation</p>
    <p>Data Lifetime</p>
    <p>Computation</p>
    <p>Maintain Lifetime</p>
    <p>per PC</p>
    <p>Clustering PCs w/ Similar Lifetime</p>
    <p>Mapping Stream</p>
    <p>to PC Group</p>
    <p>Write</p>
    <p>Write Request with StreamID</p>
  </div>
  <div class="page">
    <p>PC Extractor Module</p>
    <p>PC extraction with frame pointer</p>
    <p>Recursively checking previous stack frames based on the frame</p>
    <p>pointer register (EBP)</p>
    <p>PC extraction without frame pointer</p>
    <p>Frame pointer register is not available if omit-frame-pointer option is</p>
    <p>used by compiler</p>
    <p>Scanning every word in the stack and check if it belongs to the</p>
    <p>processs code segment</p>
    <p>&lt;with frame pointer&gt; &lt;without frame pointer&gt;</p>
  </div>
  <div class="page">
    <p>PCs with Large Lifetime Variance</p>
    <p>Some PCs represent several I/O contexts</p>
    <p>When multiple I/O contexts are covered by the same execuction</p>
    <p>to the write system call</p>
    <p>Example: compaction at different levels of RocksDB</p>
    <p>Regardless of compaction level, execution path to write system</p>
    <p>call is the same</p>
    <p>&lt;Compaction PC&gt;</p>
  </div>
  <div class="page">
    <p>Lifetimes of Compaction Data per Level</p>
    <p>Higher level is smaller than lower level in LSM tree</p>
    <p>Data in higher level are invalidated more frequently, shorter lifetime</p>
    <p>&lt;Manual: L2&gt; &lt;Manual: L3&gt; &lt;Manual: L4 (Lowest)&gt;</p>
    <p>More streams are necessary for separating different lifetime data</p>
  </div>
  <div class="page">
    <p>Practical Limitations on Streams</p>
    <p>Host data should be buffered per stream</p>
    <p>Hiding size difference between FTL and device</p>
    <p>Buffering data requires SSD resources</p>
    <p>Backup power capacity: storing data for sudden power off</p>
    <p>SRAM capacity: quick checkup of buffered data for read requests</p>
    <p>Buffer SpaceSSD Resources</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>Stream1</p>
    <p>SRAM Capacity</p>
    <p>Buffer Space</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>Stream 2</p>
    <p>SRAM Capacity</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>SRAM Capacity</p>
    <p>Buffer Space</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>Stream 3</p>
    <p>SRAM Capacity</p>
    <p>Out of Resource</p>
    <p>Increasing number of streams is difficult</p>
  </div>
  <div class="page">
    <p>Internal Streams for GC</p>
    <p>Internal Stream: used only for data copy during GC</p>
    <p>No backup power capacity: original data remains in source block</p>
    <p>Slow (DRAM) memory: GC can be handled as background tasks</p>
    <p>PCStream can effectively doubled # of available streams</p>
    <p>Buffer SpaceSSD Resources</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>Stream1</p>
    <p>SRAM Capacity</p>
    <p>Buffer Space</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>Stream 2</p>
    <p>SRAM Capacity</p>
    <p>Backup Power</p>
    <p>Capacity</p>
    <p>SRAM Capacity</p>
    <p>Internal Stream1</p>
    <p>Data in source block</p>
    <p>Background task</p>
    <p>Internal Stream 2</p>
    <p>Data in source block</p>
    <p>Background task</p>
  </div>
  <div class="page">
    <p>Two-Phase Stream Decision</p>
    <p>For large variance PCs, apply 2-phase stream decision</p>
    <p>1st phase (host level): A stream is assigned to the PC</p>
    <p>2nd phase (device level): long-lived data are assigned to internal</p>
    <p>stream</p>
    <p>&lt;2nd phase decision&gt; Block 2Block 1</p>
    <p>GC2</p>
    <p>&lt;existing policy&gt; Block 1</p>
    <p>GC2</p>
    <p>Block X</p>
    <p>Using 2nd phase decision can avoid repeated copy of long-lived data</p>
    <p>in the large lifetime variance PC</p>
    <p>Stream A Stream A</p>
    <p>Repeated copy of long-lived data</p>
    <p>Block 0</p>
    <p>GC1</p>
    <p>Block 0</p>
    <p>GC1 Internal</p>
    <p>Stream of A</p>
    <p>&lt;Manual: L4 (Lowest)&gt;</p>
    <p>Long-lived data in L4 are moved to internal stream</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction &amp; Motivation</p>
    <p>Automatic Stream Identification</p>
    <p>Design of PCStream</p>
    <p>Evaluations</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Experimental Setting</p>
    <p>Host</p>
    <p>Linux kernel 4.5 with PCStream implementation</p>
    <p>SSD</p>
    <p>Samsung PM963 SSD modified for</p>
    <p>internal stream support</p>
    <p>Benchmark</p>
    <p>Benchmark Type Types of activities</p>
    <p>RocksDB Append-only Logging, Flushing, Compaction</p>
    <p>Cassandra Append-only Logging, Flushing, Compaction</p>
    <p>SQLite Updating Logging, Updating DB table</p>
    <p>GCC Write-once Outputting temp files, executable files</p>
    <p>Mixed 1 (RocksDB+GCC) A + W</p>
    <p>Mixed 2 (SQLite+GCC) U + W</p>
    <p>PM963 SSD with 9 streams (9 internal streams are added)</p>
  </div>
  <div class="page">
    <p>WAF Comparison</p>
    <p>High efficiency of PCStream comes from</p>
    <p>- LBA-oblivious data separation</p>
    <p>- Internal streams</p>
    <p>RocksDB Cassandra SQLite GCC Mixed 1</p>
    <p>(R+G)</p>
    <p>Mixed 2</p>
    <p>(S+G)</p>
    <p>Geo. Mean</p>
    <p>W A</p>
    <p>F</p>
    <p>Baseline AutoStream ManualStream PCStream</p>
  </div>
  <div class="page">
    <p>Per-stream Lifetime Distributions (Mixed 1)</p>
    <p>Separating long lifetime data results better WAF reduction in small variance streams</p>
    <p>Smaller variances of short lifetimes</p>
    <p>Long lifetimes</p>
  </div>
  <div class="page">
    <p>Impact of Internal Streams</p>
    <p>Baseline &amp; Autostream show insufficient improvement</p>
    <p>due to their poor initial allocation quality</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>We have presented the PCStream for improving</p>
    <p>performance and reducing WAF of multi-stream SSDs</p>
    <p>Automatic stream management technique using program context</p>
    <p>to effectively estimate data lifetime</p>
    <p>Internal stream can separate long-lived data from future short</p>
    <p>lifetime data</p>
    <p>WAF was reduced by up to 69% over existing automatic technique</p>
    <p>Future work</p>
    <p>Support applications based on indirect writes</p>
    <p>Internal write buffer with flushing thread</p>
    <p>mmap-related functions</p>
  </div>
</Presentation>
