<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Programmable In-Network Security for Context-aware BYOD Policies</p>
    <p>Qiao Kang, Lei Xue, Adam Morrison, Yuxin Tang, Ang Chen, Xiapu Luo</p>
    <p>Rice University The Hong Kong Polytechnic University</p>
  </div>
  <div class="page">
    <p>BYOD: Bring Your Own Device</p>
    <p>BYOD devices: Less well managed and easier to be compromised</p>
    <p>Need to access control for BYOD clients</p>
    <p>Allow Or Block?</p>
    <p>Risks</p>
    <p>BYOD devices Enterprise server</p>
  </div>
  <div class="page">
    <p>Context-aware policies for BYOD</p>
    <p>Making precise security decisions by dynamically adapting to security contexts</p>
    <p>How to enforce these policies?</p>
    <p>Block if SSL version &lt;= X</p>
    <p>Block if GPS location is outside the company</p>
    <p>Block if recorder is on</p>
    <p>Policies</p>
    <p>BYOD devices Enterprise server</p>
  </div>
  <div class="page">
    <p>State of the art: SDN-based defense</p>
    <p>Client modules collect client-side information</p>
    <p>BYOD policies are managed and enforced in an SDN app</p>
    <p>New flow Drop or forward</p>
    <p>SDN controller</p>
    <p>SDN app</p>
    <p>Context update Flow ID Ctx 10.0.0. 1:80:22</p>
    <p>Dec.</p>
    <p>Drop</p>
    <p>Client modules SDN switch Enterprise server</p>
  </div>
  <div class="page">
    <p>Limitations of the SDN-based defense</p>
    <p>Low defense agility: Context updates need to traverse the software controller</p>
    <p>Vulnerable to control plane DoS attacks [AvantGuard - CCS13]</p>
    <p>Root cause: Lower processing speed of the SDN controller software 5</p>
    <p>SDN controller</p>
    <p>SDN app</p>
    <p>Client modules SDN switch Enterprise server</p>
    <p>Drop or forward</p>
  </div>
  <div class="page">
    <p>Research question</p>
    <p>Can we address the limitations of SDN-based BYOD defense?</p>
  </div>
  <div class="page">
    <p>Opportunity: Programmable data planes</p>
    <p>Switch features:  Programmable parser: Customized protocols  Stateful processing  Arithmetic operations  General-purpose control plane</p>
    <p>High performance : &lt;1us delay for Tbps traffic</p>
    <p>Can we transform these hardware features to security benefits for BYOD? 7</p>
    <p>Tbps traffic with &lt;1us delay</p>
    <p>Control plane</p>
  </div>
  <div class="page">
    <p>P4: Language for data plane programming</p>
    <p>Reconfigures switch pipeline for header manipulation</p>
    <p>Has the potential to enforce BYOD policies at linespeed</p>
    <p>Downside: P4 is low-level, non-trivial to develop and maintain 8</p>
    <p>Customized headers Match/action processing Stateful registers</p>
  </div>
  <div class="page">
    <p>Poise: Programmable In-network Security</p>
    <p>Compiler BYOD Policy</p>
    <p>Language: An expressive language for defining BYOD policies</p>
    <p>Compiler: Generates device configurations and switch programs</p>
    <p>P4 data plane design: A dynamic and efficient security primitive</p>
    <p>Device configs</p>
    <p>P4 programs</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Poise Design  The Poise language</p>
    <p>Compiling Poise policies</p>
    <p>Data plane design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>The Poise language</p>
    <p>An expressive language for writing context-aware policies  Predicates on customized client contexts</p>
    <p>Support pre-defined primitive actions 11</p>
    <p>Block access if SSL version &lt;= 6.5.2</p>
    <p>if match (sslver &lt;= 6.5) then drop</p>
    <p>Policy</p>
    <p>Predicate</p>
    <p>Primitive Action</p>
  </div>
  <div class="page">
    <p>Compiling Poise policies</p>
    <p>Contexts (sslver) are compiled to customized header fields</p>
    <p>Security actions (if-else) are compiled to match/action table entries</p>
    <p>Advanced features: Policy composition, resource optimizations, etc 12</p>
    <p>table decision_tab {</p>
    <p>key = {ctx.sslver: exact}</p>
    <p>entries = { &lt;= 6.5.0: dec = DROP &gt; 6.5.0: dec = ALLOW</p>
    <p>} }</p>
    <p>header ctx_t { sslver: 16</p>
    <p>}</p>
    <p>if match (sslver &lt;= 6.5) then drop</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Poise Design  The Poise language</p>
    <p>Compiling Poise policies</p>
    <p>Data plane design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>An efficient in-network primitive</p>
    <p>Remember the decision</p>
    <p>Enforce the latest decision</p>
    <p>Enterprise serverP4 switchBYOD device</p>
    <p>Data packetContext packet Context packetData packet</p>
    <p>Problem: How to spread context information from client to switch?  Strawman solution: Tag every packet with context -- high overhead!</p>
    <p>Idea: Periodic context packets per flow: Headers + context, no data  Dynamic: Decisions are based on the latest context  Efficient: Data packets unmodified (no embedded contexts)  Adjustable accuracy: Tunable context packet period</p>
  </div>
  <div class="page">
    <p>Key data structure: A per-flow table</p>
    <p>A match/action table to maintain the latest per-flow decision</p>
    <p>Technical challenges:  New flow insertion delay (~1ms)</p>
    <p>Controlling the size of the table</p>
    <p>Handling DoS attacks (e.g., many new flows) 15</p>
    <p>Key (flow ID) Value (decision)</p>
    <p>Data packet</p>
    <p>Data packet</p>
    <p>Context packet</p>
    <p>Per-flow table</p>
    <p>Context packet</p>
    <p>Control plane</p>
    <p>New flow to be inserted</p>
    <p>See more details in our paper!</p>
    <p>Cache</p>
    <p>--------- Drop</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Poise Design  The Poise language</p>
    <p>Compiling Poise policies</p>
    <p>Data plane design</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Prototype implementation  Compiler: Bison + Flex</p>
    <p>Android client module: a kernel module on Linux 3.18.31</p>
    <p>~6000 LoC</p>
    <p>Evaluation setup  Tofino Wedge 100BF switch 32 X 100 Gbps = 3.2 Tbps</p>
  </div>
  <div class="page">
    <p>What we have evaluated</p>
    <p>Correctness: Can Poise enforce BYOD policies correctly?</p>
    <p>Overhead: How much delay or throughput degradation can Poise incur?</p>
    <p>Scalability: How complex/large policies can Poise support?</p>
    <p>Poise vs. SDN: Is Poise resilient to control plane saturation attacks?</p>
    <p>SDN-based solution: PBS  NDSS16  Floodlight v1.2 + Open vSwitch v2.9.2</p>
    <p>Methodology:  DoS attacker: Launch frequent context changes</p>
    <p>Measure how normal user traffic are affected</p>
  </div>
  <div class="page">
    <p>Poise vs. SDN: First packet delay</p>
    <p>SDN: Takes ~1 second for the first packet to arrive under heavy attacks</p>
    <p>Poise: Remains at a constant level 19</p>
    <p>Poise: 4ms</p>
    <p>SDN: ~ 1s</p>
  </div>
  <div class="page">
    <p>Poise vs. SDN: New flow installation</p>
    <p>SDN: Fails to install new flows under heavy attacks</p>
    <p>Poise: Almost always installs 100% new flows</p>
    <p>Poise is highly resilient to DoS attacks from malicious clients 20</p>
    <p>SDN: Cannot install new flows</p>
    <p>Poise: Installs new flows normally</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Motivation  SDN-based BYOD defense has limitations</p>
    <p>Poise: Programmable In-Network Security  An expressive policy language</p>
    <p>Compiler for generating P4 programs</p>
    <p>An efficient in-network security primitive</p>
    <p>Poise transforms the hardware features to security benefits</p>
    <p>Thank you for listening!</p>
    <p>Contact: qiaokang@rice.edu  Looking for 2021 summer internship https://github.com/qiaokang92/poise</p>
  </div>
</Presentation>
