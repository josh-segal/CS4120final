<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Yuxi Chen, Shu Wang, Shan Lu, and Karthikeyan Sankaralingam*</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>q Synchronization mistakes in multithreaded programs</p>
    <p>Thread 1 Thread 2</p>
    <p>If(ptr){</p>
    <p>tmp = *ptr;</p>
    <p>}</p>
    <p>ptr = NULL;</p>
    <p>Segfault</p>
  </div>
  <div class="page">
    <p>q Common q Hard to diagnose and fix correctly q Disasters in production runs</p>
  </div>
  <div class="page">
    <p>q Semantic correctness q Performance</p>
    <p>v Low recovery latency v Low overhead</p>
    <p>So whats the solution?</p>
  </div>
  <div class="page">
    <p>Failure site</p>
    <p>Thread 1</p>
    <p>Thread 3</p>
    <p>Thread 2 Execution</p>
  </div>
  <div class="page">
    <p>Failure site</p>
    <p>Thread 1</p>
    <p>Thread 3</p>
    <p>Thread 2</p>
    <p>Execution</p>
    <p>Whole-program memory-state checkpoint</p>
    <p>Traditional Roll-back Recovery</p>
  </div>
  <div class="page">
    <p>Overhead (%)</p>
    <p>Recovery capability</p>
    <p>Rx</p>
    <p>good capability poor performance</p>
    <p>[1]Rx: Treating bugs as allergies  a safe method to survive software failure, SOSP05</p>
  </div>
  <div class="page">
    <p>ConAir Roll-back Recovery</p>
    <p>Failure site</p>
    <p>Thread 1</p>
    <p>Thread 3</p>
    <p>Thread 2 Execution</p>
    <p>setjmp longjmp</p>
  </div>
  <div class="page">
    <p>ConAirpoor capability good performance</p>
    <p>Overhead (%)</p>
    <p>Recovery capability</p>
    <p>Rx</p>
    <p>good capability poor performance</p>
  </div>
  <div class="page">
    <p>q ConAir cannot reexecute shared-variable writes</p>
    <p>Thread 1 Thread 2</p>
    <p>ptr = NULL;</p>
    <p>Segfault</p>
    <p>If(ptr){</p>
    <p>*buf = newBuf(); tmp = *ptr;</p>
    <p>}</p>
    <p>Heap</p>
    <p>*buf = 0x123*buf = 0x234</p>
    <p>*bufold = 0x123 *bufnew = 0x234</p>
  </div>
  <div class="page">
    <p>Overhead (%)</p>
    <p>Recovery capability</p>
    <p>ConAirworse capability better performance</p>
    <p>Rx</p>
    <p>better capability worse performance</p>
  </div>
  <div class="page">
    <p>BugTM static analysis</p>
    <p>code transformation</p>
    <p>Leveraging HTM</p>
    <p>BugTMH</p>
    <p>ConAir</p>
    <p>Overhead (%)</p>
    <p>Recovery capability</p>
    <p>Rx</p>
    <p>Xbegin Xabort Xend</p>
  </div>
  <div class="page">
    <p>BugTM static analysis</p>
    <p>code transformation</p>
    <p>Xbegin/Setjmp Xabort/Longjmp</p>
    <p>Xend</p>
    <p>BugTMHS</p>
    <p>Overhead (%)</p>
    <p>Recovery capability</p>
    <p>ConAir</p>
    <p>BugTMH</p>
    <p>Rx</p>
  </div>
  <div class="page">
    <p>Outline: 1. BugTMH 2. BugTMHS 3. Evaluation Methodology 4. Experiment Results 5. Conclusion</p>
  </div>
  <div class="page">
    <p>q Implicit checkpoint</p>
    <p>q Rollback-reexecution OPPORTUNITY</p>
    <p>CHALLENGE</p>
  </div>
  <div class="page">
    <p>q Performance challenges</p>
    <p>v High frequency of transaction uses v Unsuitable content of transactions (eg. trapping instructions) v Nesting &amp;&amp; Loops</p>
  </div>
  <div class="page">
    <p>q Performance challenges q Correctness challenges</p>
    <p>v Unpaired transaction-start and transaction-commit v Deterministic aborts (eg. trapping instruction aborts)</p>
  </div>
  <div class="page">
    <p>q Performance challenges q Correctness challenges q Failure recovery challenges</p>
    <p>v Surround the buggy codes when failures happen v HTM-abort handlers</p>
  </div>
  <div class="page">
    <p>q Xbegin q Xend q Xtest q Xabort</p>
    <p>Thread 1</p>
    <p>assertion();</p>
    <p>+if(Xtest()) + Xend();</p>
    <p>+Xbegin();</p>
    <p>+ Xabort();</p>
    <p>+Xend();</p>
  </div>
  <div class="page">
    <p>No nested TM!</p>
    <p>No unpaired Xbegin and Xend during run time!</p>
    <p>mXbegin(){ if(!Xtest())</p>
    <p>Xbegin(); }</p>
    <p>mXend(){ if(Xtest())</p>
    <p>Xend(); }</p>
  </div>
  <div class="page">
    <p>Principle: put mXabort before where failures might happen</p>
    <p>If(ptr){</p>
    <p>*buf = newBuf(); tmp = *ptr;</p>
    <p>}</p>
    <p>*buf = newBuf(); if(ptr == NULL){</p>
    <p>__assert_fail; }else{</p>
    <p>tmp = *ptr; }</p>
    <p>+mXabort();</p>
  </div>
  <div class="page">
    <p>Principle: q Avoid trapping instructions abort q Minimize capacity abort</p>
    <p>If(ptr){ *buf = newBuf(); if(Ptr==NULL){</p>
    <p>+ mXabort(); __assert_fail;</p>
    <p>}else{ tmp = *ptr;</p>
    <p>}</p>
    <p>}</p>
    <p>time(); + mXbegin();</p>
  </div>
  <div class="page">
    <p>Trapping/Call/loop-exit Instruction or function entrance</p>
    <p>CFG node</p>
    <p>Potential failure</p>
    <p>mXbegin()</p>
    <p>mXbegin()</p>
  </div>
  <div class="page">
    <p>Principles: q Avoid trapping instructions abort q Minimize capacity abort</p>
    <p>End TM before loop entry  End TM before function exit</p>
    <p>time (); + mXbegin(); If(ptr){</p>
    <p>*buf = newBuf(); if(Ptr==NULL){</p>
    <p>+ mXabort(); __assert_fail;</p>
    <p>}else{ tmp = *ptr;</p>
    <p>}</p>
    <p>} + mXend();</p>
  </div>
  <div class="page">
    <p>CFG node</p>
    <p>Potential failure</p>
    <p>Trapping/Call/loop-header instruction</p>
    <p>Function exit</p>
    <p>mXend()</p>
    <p>mXend()</p>
    <p>mXend()</p>
  </div>
  <div class="page">
    <p>Design fallback and retry</p>
    <p>q Concurrency bug relevant aborts (reexecute in Tx mode)</p>
    <p>Data conflict abort &amp;&amp; Xabort abort</p>
    <p>q Concurrency bug irrelevant aborts (reexecute in non-Tx mode)</p>
    <p>Capacity abort &amp;&amp; Trapping instruction abort</p>
    <p>Principle: Reexecution only when aborts might be caused by concurrency bugs</p>
  </div>
  <div class="page">
    <p>Outline: 1. BugTMH 2. BugTMHS 3. Evaluation Methodology 4. Experiment Results 5. Conclusion</p>
  </div>
  <div class="page">
    <p>Locsetjmp : locations where ConAir inserts setjmp LocmXbegin: locations where BugTMH inserts mXbegin</p>
    <p>q Insert setjmp at every Locsetjmp q Insert mXbegin only when LocmXbegin is farther than</p>
    <p>Locsetjmp q Not insert mXbegin if Locsetjmp and LocmXbegin are same</p>
  </div>
  <div class="page">
    <p>Trapping instruction</p>
    <p>CFG node</p>
    <p>Potential failure</p>
    <p>setjmp Shared-variable writes</p>
    <p>mXbegin()</p>
    <p>Function entrance</p>
    <p>mXbegin() setjmp</p>
  </div>
  <div class="page">
    <p>qHTM rollback first (under an active transaction) longer reexecution region</p>
    <p>qLongjmp rollback (not under an active transaction) If HTM rollback fails, longjmp rollback can still have a chance</p>
  </div>
  <div class="page">
    <p>Outline: 1. BugTMH 2. BugTMHS 3. Evaluation Methodology 4. Experiment Results 5. Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation methodology</p>
    <p>q Benchmarks (29 bugs[1,2,3,4,5,6])</p>
    <p>q micro architecture Broadwell (4-core Intel Core i7-5775C)</p>
    <p>q LLVM</p>
    <p>.</p>
    <p>[1] Guoliang Jin, et al, Automated atomicity-violation fixing, PLDI11 [2] Horatiu Jula, et al, Deadlock immunity: Enabling systems to defend against deadlocks, OSDI08 [3] Yao Shi, et al, Do I use the wrong definition? DefUse: Definition-use invariants for detecting concurrency and sequential bugs, OOPSLA10 [4] Wei Zhang, et al, ConAir: Featherweight concurrency bug recovery via single-threaded idempotent execution, ASPLOS13 [5] Wei Zhang, et al, ConSeq: Detecting concurrency bugs through sequential errors, ASPLOS11 [6] Wei Zhang, et al, ConMem: Detecting Crash-Triggering Concurrency Bugs through an Effect-Oriented Approach, ACM TOSEM, 2012.</p>
  </div>
  <div class="page">
    <p>Recovery capability</p>
    <p>Benchmarks(ID) Root Cause ConAir BugTMH BugTMHS Mysql2011 RAR Atomicity Violation -</p>
    <p>Mysql38883 RAR Atomicity Violation -</p>
    <p>Apache21287 RAW Atomicity Violation -</p>
    <p>Moz-JS18025 RAW Atomicity Violation -</p>
    <p>Moz-JS142651 RAW Atomicity Violation -</p>
    <p>Bank WAR Atomicity Violation -</p>
    <p>Transmission Order Violation  -</p>
    <p>Total 1 6 7</p>
    <p>ConAir &lt; BugTMH &lt; BugTMHS</p>
    <p>Recovery capability comparison</p>
  </div>
  <div class="page">
    <p>Performance Overhead</p>
    <p>M ys</p>
    <p>ql2 01</p>
    <p>M ys</p>
    <p>ql3 59</p>
    <p>M ys</p>
    <p>ql3 88</p>
    <p>Ap ac</p>
    <p>he 21</p>
    <p>M oz</p>
    <p>-JS 18</p>
    <p>M oz</p>
    <p>-JS 14</p>
    <p>Ba nk</p>
    <p>M oz</p>
    <p>-e x5</p>
    <p>M oz</p>
    <p>-e x2</p>
    <p>M ys</p>
    <p>ql7 91</p>
    <p>M ys</p>
    <p>ql1 65</p>
    <p>ick FF T</p>
    <p>HT Tr</p>
    <p>ac k</p>
    <p>M oz</p>
    <p>-x pc</p>
    <p>om 61</p>
    <p>Tr an</p>
    <p>sm iss</p>
    <p>io n</p>
    <p>zs ne</p>
    <p>s</p>
    <p>Ha wk</p>
    <p>N L</p>
    <p>M oz</p>
    <p>-JS 79</p>
    <p>SQ Lit</p>
    <p>e1 67</p>
    <p>ConAir</p>
    <p>BugTMH</p>
    <p>BugTMHS</p>
    <p>ConAir &gt; BugTMHS &gt; BugTMH</p>
    <p>BugTMH: 3.08%BugTMHS: 1.39%ConAir: 0.31%</p>
    <p>overhead comparing with baseline: %</p>
    <p>Benchmark</p>
  </div>
  <div class="page">
    <p>Outline: 1. BugTMH 2. BugTMHS 3. Evaluation Methodology 4. Experiment Results 5. Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>q BugTM can help recover all major types of concurrency-bug failures in production run</p>
    <p>Low run-time overhead</p>
    <p>Outperform the state of art approach (ConAir)</p>
    <p>Present novel ways of using HTM techniques (failure recovery)</p>
    <p>Come and eat this free lunch!</p>
  </div>
  <div class="page"/>
</Presentation>
