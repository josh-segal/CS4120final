<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Autonomic Management of Dynamically Partially Reconfigurable</p>
    <p>FPGA Architectures using Discrete Control</p>
    <p>Xin An &amp; Eric Rutten (INRIA), Jean-Philippe Diguet &amp; Nicolas Le Griguer (Lab-STICC),</p>
    <p>Abdoulaye Gamati (LIRMM)</p>
    <p>June 26, 2013</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 DPR FPGAs</p>
    <p>. . .4 System modelling as a DCS problem</p>
    <p>. . .5 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 DPR FPGAs</p>
    <p>. . .4 System modelling as a DCS problem</p>
    <p>. . .5 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Autonomic computing on reconfigurable hardware . Controlling FPGAs as autonomic computing ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Field Programmable Gate Arrays (FPGAs) dynamically partially reconfigurable (DPR) FPGAs</p>
    <p>. Control techniques to design the MAPE-K loops ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>model possible behaviours, and control objectives, separately classically continuous time dynamics and differential equations discrete control, events and states, Petri nets or automata</p>
    <p>. Discrete control for autonomic FPGAs ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>systematic modelling framework application, tasks implementations, architecture</p>
    <p>Automata &amp; Discrete Controller Synthesis (DCS)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>FPGA-based architectures Reactive languages and Discrete Control Discrete control as MAPE-K</p>
    <p>. . .3 DPR FPGAs</p>
    <p>. . .4 System modelling as a DCS problem</p>
    <p>. . .5 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>FPGA-based architectures</p>
    <p>. Basic reconfigurable cell : programmable by bitstream ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Run-time partial reconfiguration : DPR FPGAs slower than ASICs, much faster than GP CPUs Management of reconfiguration : loading chosen bitstream</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Reactive languages, synchronous programming . Modelling formalism and programming language ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>reaction to input flows  output flows data-flow nodes and equations ; mode automata (FSM) parallel (synchronous) and hierarchical composition</p>
    <p>synchronous languages, (25+ years) tools: compilers (e.g., Heptagon), code generation, verification, ...</p>
    <p>example: delayable task control (in Heptagon) delayable(r,c,e) = a,s</p>
    <p>Idle Wait</p>
    <p>e r and c/s</p>
    <p>Active c/s</p>
    <p>r and not c</p>
    <p>a = true</p>
    <p>a = falsea = false node delayable(r,c,e:bool) returns (a,s:bool)</p>
    <p>let automaton</p>
    <p>state Idle do</p>
    <p>a = false; s = r and c</p>
    <p>until r and c then Active</p>
    <p>| r and not c then Wait</p>
    <p>state Wait do a = false; s = c</p>
    <p>until c then Active</p>
    <p>state Active do a = true; s=false</p>
    <p>until e then Idle</p>
    <p>end tel</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u) Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Trans State Out ZY</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u) Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Y c Y u Trans State Out</p>
    <p>ZY</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u)</p>
    <p>Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Discrete controller synthesis (DCS): principle</p>
    <p>. Goal ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Enforcing a temporal property  on a system on which  does not yet hold a priori</p>
    <p>. Principle (on implicit equational representation) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>State memory Trans transition function Out output function</p>
    <p>Ctrlr Y c</p>
    <p>Y u Trans State Out ZY</p>
    <p>Partition of variables : controllable (Y c ), uncontrollable (Y u) Computation of a controller such that the controlled system satisfies  (invariance, reachability, attractivity, ...)</p>
    <p>DCS tool: Sigali (H. Marchand e.a.)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>BZR programming language [http://bzr.inria.fr]</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>to each contract, associate controllable variables, local at compile-time (user-friendly DCS),</p>
    <p>compute a controller for each component step and reset functions ; executable code : C, Java, ...</p>
    <p>OutCTrC StC</p>
    <p>Trans StateCtrlr</p>
    <p>eA, eG</p>
    <p>xi</p>
    <p>contract</p>
    <p>Out yj</p>
    <p>ck</p>
    <p>body</p>
    <p>twotasks(r1, e1, r2, e2) = a1, s1, a2, s2 enforce not (a1 and a2) with c1, c2</p>
    <p>(a1, s1) = delayable(r1, c1, e1);</p>
    <p>(a2, s2) = delayable(r2, c2, e2)</p>
    <p>&amp; G. Delaval &amp; H. Marchand [ACM LCTES10] [jDEDS13]</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Discrete control as MAPE-K</p>
    <p>sensor</p>
    <p>execute knowledge</p>
    <p>monitor</p>
    <p>analyse plan</p>
    <p>actuator</p>
    <p>managed element</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>. .</p>
    <p>autonomic MAPE-K flows : sensor observations to reconfiguration actions reactive language BZR used as DSL for decision</p>
    <p>sensor</p>
    <p>state inputs</p>
    <p>actuator</p>
    <p>managed element</p>
    <p>outputs</p>
    <p>transition function</p>
    <p>control</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>FSM instanciation of MAPE-K exhibit state (observability) accept events or conditions (controllability)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Hierarchical architecture control</p>
    <p>state inputs outputs</p>
    <p>transition function</p>
    <p>sensor</p>
    <p>state inputs</p>
    <p>actuator</p>
    <p>outputs</p>
    <p>transition function</p>
    <p>sensor</p>
    <p>state inputs</p>
    <p>actuator</p>
    <p>outputs</p>
    <p>transition function</p>
    <p>controlcontrol</p>
    <p>managed element</p>
    <p>.</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>hierarchical MAPE-K, through additional interfaces in components : composites using life-cycles of subcomponents implementation : step</p>
    <p>synthesized and generated off-line called at run-time in composite controller</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 DPR FPGAs</p>
    <p>Considered DPR FPGAs Reconfiguration policy</p>
    <p>. . .4 System modelling as a DCS problem</p>
    <p>. . .5 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Considered DPR FPGAs</p>
    <p>. System architecture ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>hardware : reconfigurable area divided into four tiles: A1  A4 battery (load levels) task implementations : used tiles, WCET, power peak application software : directed, acyclic graph (DAG) of tasks</p>
    <p>B</p>
    <p>A</p>
    <p>C</p>
    <p>D task A</p>
    <p>or</p>
    <p>task B</p>
    <p>task C</p>
    <p>task B</p>
    <p>task C</p>
    <p>. Reconfiguration choices ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>unused tile Ai can be put into sleep mode</p>
    <p>between task implementations : from 1) to either 2) or 3)</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Reconfiguration policy</p>
    <p>. Separation of concerns, favoring re-use and variations ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>description of possible behaviors specification of coordination policy</p>
    <p>. System objectives ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>...1 resource usage constraint: exclusive uses of reconfigurable areas A1-A4;</p>
    <p>...2 energy reduction constraint: switch areas to sleep mode when executing no task;</p>
    <p>...3 power peak constraint : stay below bound constrained w.r.t battery levels;</p>
    <p>...4 minimise power peak of hardware platform</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 DPR FPGAs</p>
    <p>. . .4 System modelling as a DCS problem</p>
    <p>Architecture behaviour Task execution behaviour Global system behaviour model</p>
    <p>. . .5 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Architecture behaviour</p>
    <p>ActiSlei</p>
    <p>acti = true</p>
    <p>acti = false c_ai</p>
    <p>not c_ai</p>
    <p>c_ai acti</p>
    <p>RMi</p>
    <p>. Architecture ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>. . four reconfigurable tiles A1, A2, A3, A4</p>
    <p>modes : active, sleep controllable switches</p>
    <p>H M L</p>
    <p>down</p>
    <p>upup</p>
    <p>downdown</p>
    <p>st=h st=m st=l</p>
    <p>stup</p>
    <p>BM</p>
    <p>. Battery ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>observer states H (high), M (medium) and L (low) input from battery sensor</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Application behaviour</p>
    <p>I r/s1</p>
    <p>F1 e1/s2,s4</p>
    <p>F2,F4</p>
    <p>F4</p>
    <p>F2</p>
    <p>e2,e4/s7 F7</p>
    <p>e2</p>
    <p>e4</p>
    <p>e4/s7</p>
    <p>e2/s7</p>
    <p>e7 T</p>
    <p>. Follows the DAG of tasks ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>systematic construction of model from DAG inputs : request, task finish notifications outputs : start of tasks states : currently active tasks</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Task execution behaviour</p>
    <p>WA</p>
    <p>IA</p>
    <p>XA1 XA2</p>
    <p>rA, c1 rA, c2 rA, not c2</p>
    <p>c2</p>
    <p>eA eA</p>
    <p>c1 ({A1},50,20) ({A3,A4},10,30)</p>
    <p>({},,0)</p>
    <p>({},,0)</p>
    <p>TMA</p>
    <p>rA eA</p>
    <p>c1,c2 es</p>
    <p>es=XA1 es=W es=XA2</p>
    <p>es=I</p>
    <p>. Example for task TA..</p>
    <p>.</p>
    <p>. ..</p>
    <p>. .</p>
    <p>. Local costs on states ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>rs  2RA : used tiles (architecture resources) wt : WCET pp : power peak</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Global system behaviour model . Parallel composition of control models ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>S = RM1|...|RM4|BM|TMA|...|TMD|Sdl</p>
    <p>reconfigurable tiles RM1-RM4 battery BM scheduler Sdl (from DAG) tasks TMA-TMD</p>
    <p>. Global costs, on global state q = (q1, ..., qn) ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>defined from the local ones</p>
    <p>used resources: union of used resources associated with the local states, i.e., rs(q) =</p>
    <p>rs(qi ), 1  i  n;</p>
    <p>power peak: the sum of values associated with the local states, i.e., pp(q) =</p>
    <p>(pp(qi ), 1  i  n);</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>System objectives . Enforce invariance w.r.t. subset of states where : ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>(1) exclusive uses of reconfigurable tiles by tasks: qi , qj  q, i = j, that rs(qi )</p>
    <p>rs(qj ) = ;</p>
    <p>(2) switch tile Ai to sleep mode, when executing no task: @qi  q, Ai  rs(qi )  acti = false;</p>
    <p>(2) switch tile Ai to active mode when executing task(s): qi  q, Ai  rs(qi )  acti = true;</p>
    <p>(3) battery-level constrained power peak (thresholds P0, P1, P2): pp(q) &lt; P0 (resp. P1 and P2)</p>
    <p>. Experimental validation ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>video processing system, ML605 board from Xilinx with FPGA BZR used to encode models and objectives,</p>
    <p>and generate C code, integrated in runtime manager 20/22</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Outline</p>
    <p>. . .1 Motivation</p>
    <p>. . .2 Background</p>
    <p>. . .3 DPR FPGAs</p>
    <p>. . .4 System modelling as a DCS problem</p>
    <p>. . .5 Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation . . . . . . Background</p>
    <p>. . DPR FPGAs</p>
    <p>Conclusions &amp; perspectives</p>
    <p>. DPR FPGAs as autonomic computing ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>systematic modeling framework for DPR FPGA LTSs and automatic controller generation using DCS experimental validation</p>
    <p>. Perspectives ..</p>
    <p>.</p>
    <p>. ..</p>
    <p>.</p>
    <p>.</p>
    <p>Domain-Specific Language (DSL) automated generation of models, patterns integration in design flow, executable code</p>
    <p>richer model, e.g. reconfiguration costs DCS : optimal, modular, quantitative, distributed controllers more complete experiment ongoing on video FPGA</p>
  </div>
</Presentation>
