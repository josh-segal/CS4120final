<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>LPD: Low Power Display Mechanism for Mobile and Wearable Devices</p>
    <p>MyungJoo Ham (presenter), Inki Dae, Chanwoo Choi Frontier Computer Science (FCS) Lab Platform Solution Lab _</p>
    <p>Software R&amp;D Center, Samsung Electronics</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Devices Evolving</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Devices Evolving: Display Resolution</p>
    <p>Increases memory traffic significantly. (60FPS) (2010) 0.09 GiB/s (2012) 0.21 GiB/s (2013) 0.46 GiB/s (2015) 0.82 GiB/s</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Devices Evolving: Display Resolution</p>
    <p>Increases memory traffic significantly. (60FPS) (2010) 0.09 GiB/s (2012) 0.21 GiB/s (2013) 0.46 GiB/s (2015) 0.82 GiB/s</p>
    <p>In the dd (writing and reading 360MiB) test with NURI board, the memory throughput was not changed (the performance is not deteriorated) while the SoC power consumption has been reduced by 1%. When the memory access is not that intense while the CPU is heavily used, the SoC power consumption has been reduced by 6%. With Memory-Bus DVFS (DRAM and its interface is beginning to be important)</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Devices Evolving: Display Resolution</p>
    <p>Increases memory traffic significantly. (60FPS) (2010) 0.09 GiB/s (2012) 0.21 GiB/s (2013) 0.46 GiB/s (2015) 0.82 GiB/s</p>
    <p>In the dd (writing and reading 360MiB) test with NURI board, the memory throughput was not changed (the performance is not deteriorated) while the SoC power consumption has been reduced by 1%. When the memory access is not that intense while the CPU is heavily used, the SoC power consumption has been reduced by 6%. With Memory-Bus DVFS (DRAM and its interface is beginning to be importane)</p>
    <p>Applying DVFS to Memory/Bus is now effective as the traffic becomes heavy.</p>
    <p>What if we can reduce the traffic itself ?</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Devices Evolving: Wearable. More Serious Here.</p>
    <p>Wearable Devices:</p>
    <p>Small Battery (&amp; not increasing) Longer Battery Life Expected (~3d)</p>
    <p>Even a small improvement is much welcomed!</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Display, The Uncharted Waters</p>
    <p>Energy Hogs  CPU: DVFS, Gating, Hotplug, Power-aware Scheduler, big.LITTLE, aSMP,   GPU: DVFS, Gating, Scheduler,   Memory: DVFS  Network (WiFi, 3G, LTE, BT, ): Gating, Aggregating,   Other peripherals (eMMC, SD, sensors, ports, PMIC, ): Gating, chip modes,</p>
    <p>Display: practically, not much done especially with software.</p>
    <p>Picture from http://css3.yonsei.ac.kr/appscope/wiki/AppScopeViewer (ATC 2012)</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Display, The Uncharted Waters</p>
    <p>Many Approaches Exist  Work in theory, Too difficult in practice</p>
    <p>Adjust Color Depth: you cannot do this w/ SW. Image quality  Dynamic Backlight Brightness</p>
    <p>Slow Response. Image quality. Not Applicable to AMOLED  Dynamic Display Refresh Rate</p>
    <p>Image quality (became practical recently)  Compression: you cannot do this w/ SW  Skip Duplicated Transmission</p>
    <p>Works only if the whole frame is constant</p>
    <p>Or Requires Additional Hardware (ARM: ASTC, AFBC, TE, SC)</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Display and Bandwidth</p>
    <p>Display Energy Saving = Bandwidth Reduction, Mostly.</p>
    <p>What if we get LPDDR5 later?</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Display and Bandwidth</p>
    <p>Display Energy Saving = Bandwidth Reduction, Mostly.</p>
    <p>What if we get LPDDR5 later?  Not going to solve things</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Display and Bandwidth</p>
    <p>Display Energy Saving = Bandwidth Reduction, Mostly.</p>
    <p>What if we get LPDDR5 later?  Not going to solve things</p>
    <p>We will waste more bandwidth with more creative ways</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>To Practically Reduce Display Power,</p>
    <p>Tackle the Bandwidth  Mind the overhead (it may eat up)  (Hopefully) Dont add hardware.  (Hopefully) Dont modify OS much</p>
    <p>Keep the compatibility!  Transparent to other software components  Minimize the code.</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Then. What LPD has done?</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Hardware Architecture</p>
    <p>As Long As You Have i80 Display Panel (or similar), It Works.</p>
    <p>The Whole Frame Buffer Stored!!!</p>
    <p>i80 panel is used in Wearable: Galaxy Gear, Gear 2, Gear S,  Mobile: Galaxy S4, S5, S6, S6-Edge,  Phablet: Galaxy Note 3, Note 4, Note 4-Edge,</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Hardware Architecture</p>
    <p>As Long As You Have i80 Display Panel (or similar), It Works.</p>
    <p>Send Updated Parts Only (2, 3)!  But. How Do We Know Which Part is Updated?</p>
    <p>The Whole Frame Buffer Stored!!!</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Software Architecture</p>
    <p>Fortunately, Its Already Known!</p>
    <p>APP UI Library</p>
    <p>X Window System (Compositing)</p>
    <p>Window Manager</p>
    <p>Kernel</p>
    <p>Hardware</p>
    <p>XYZ is updated</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Software Architecture</p>
    <p>Fortunately, Its Already Known!  Why Dont We Disseminate to Kernel &amp; HW?</p>
    <p>APP UI Library</p>
    <p>X Window System (Compositing)</p>
    <p>Window Manager</p>
    <p>Kernel</p>
    <p>Hardware</p>
    <p>XYZ is updated</p>
    <p>XYZ is updated</p>
    <p>XYZ is updated</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Example</p>
    <p>Previous Frame Next Frame Updated Part (Data Sent for Next Frame)</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Resulting Concept</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Is It That Simple?</p>
    <p>The Idea Is Simple</p>
    <p>The Implementation for Practical Usage Isnt Simple.  E.g., Co-work w/ Multiple Layers, Software Compatibility,</p>
    <p>and Screen Tearing Prevention</p>
    <p>Previous Frame Next Frame (Supposed) Actual Frame Shown (Screen Tearing)</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>How Good Is It?</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Power Saving, System-Wide</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Overhead, Invisible</p>
    <p>Tested with Full-Frame Updates.  No Benefit from LPD  LPD executes unconditionally</p>
    <p>Power Consumption Increase Not Found  209.03 mW (no LPD) ! 208.99 mW (LPD)</p>
    <p>!!! Doesnt mean that LPD saves even in this case !!!  No loops. No complicated API calls.</p>
    <p>Just one more system call (per frame) w/ positional data already calculated by userspace middleware.</p>
    <p>and  A few simple linear calculations</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>No Cost. Compatible. Open Sourced</p>
    <p>No Additional Hardware Components.  No Updates in Applications or Other OS Components.</p>
    <p>Transparent to them  Minimal Updates in X-Window &amp; Kernel</p>
    <p>A few lines added to X-Window &amp; Linux Kernel (DRM Framework)  Upstreaming to Linux DRM Framework</p>
    <p>http://lists.freedesktop.org/archives/dri-devel/2015-April/080891.html  http://lists.freedesktop.org/archives/dri-devel/2015-April/080837.html</p>
    <p>Upstreamed Part  http://lists.freedesktop.org/archives/dri-devel/2014-June/060953.html</p>
    <p>Code Available at  http://opensource.samsung.com</p>
    <p>Search w/ the product name of Samsung Gear series.  http://review.tizen.org</p>
    <p>https://review.tizen.org/gerrit/gitweb?p=platform/kernel/linux-3.10.git;a=shortlog;h=refs/heads/ tizen_LPD</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Small Changes in Userspace: Window Mgr ! X.org</p>
    <p>Tizen.org libdri2.git, Line 824-854 added (Step 4 of Figure 5)</p>
    <p>No Additional Overhead</p>
    <p>No LPD LPD</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Small Changes in Userspace: X.org ! Kernel</p>
    <p>Tizen.org xf86-video-exynos.git, Line 843-845 added (Step 5 of Figure 5)</p>
    <p>Executed once a frame.</p>
    <p>EASY TO MAINTAIN THE BACKWARD COMPATIBILITY!</p>
    <p>The function has been there for years</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Changes in Kernel</p>
    <p>Update DRM (Direct Rendering Manager) Framework  Handle incoming partial updates  Coordinate device drivers</p>
    <p>Update DRM Device Drivers (display panel, display controller) Accordingly  Control devices (display panel, display controller)  Mind the timing and userspace requests</p>
    <p>Ensure there will be no glitches in display due to LPD</p>
    <p>Upstreaming On the Way.</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>Orthogonal to Other Approaches</p>
    <p>LPD can be applied w/ other display power saving techniques, providing additional power saving.</p>
    <p>Adjust Color Depth: simultaneously applicable  Dynamic Backlight Brightness: completely orthogonal  Dynamic Display Refresh Rate: simultaneously applicable  Compression: simultaneously applicable  Skip Duplicated Transmission: simultaneously applicable  ARMs Solutions for their Video/Display/Graphics processors</p>
    <p>ASTC: completely orthogonal  AFBC: simultaneously applicable  TE: completely orthogonal  SC: completely orthogonal</p>
  </div>
  <div class="page">
    <p>Frontier Computer Science Lab  2015 SAMSUNG Electronics Co.</p>
    <p>What We Have Learned.</p>
    <p>We May Still Have Optimization Points requiring Simple Ideas</p>
    <p>Cross-Layer Optimization Rocks!  They may have a silver bullet they cannot use, but we can.</p>
    <p>We Need to Educate App Developers!  With LPD,</p>
    <p>App drawing 10x10 every frame vs</p>
    <p>App drawing 300x300 every frame or</p>
    <p>App drawing 10x10 every frame but overwrites the whole frame with bitmap. Power efficiency varies according to how app is written.</p>
    <p>We may look even at the UI/UX issues for power management.  Kernel/BSP developers: Do we even need to talk with them??</p>
  </div>
</Presentation>
