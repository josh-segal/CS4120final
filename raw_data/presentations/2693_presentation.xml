<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Earp: Principled Storage, Sharing, and Protection for Mobile Apps</p>
    <p>Yuanzhong Xu, Tyler Hunt, Youngjin Kwon, Martin Georgiev, Vitaly Shmatikov, Emmett Witchel</p>
    <p>UT Austin, Cornell Tech Santa Clara, CA, 3/18/2016</p>
  </div>
  <div class="page">
    <p>Desktop era</p>
    <p>OS Files</p>
    <p>Applications mostly work individually</p>
    <p>They rely on the OS to store and exchange data, in the form of files</p>
  </div>
  <div class="page">
    <p>Data protection in desktop era</p>
    <p>OS Files</p>
    <p>OS protects data:</p>
    <p>File ownership and permissions</p>
    <p>App processes hold file handles (file descriptors)</p>
    <p>access control checks</p>
    <p>file handle</p>
  </div>
  <div class="page">
    <p>Mobile era</p>
    <p>OS (Platform)</p>
    <p>Apps interact with each other as much as with the platform  an app ecosystem</p>
    <p>Hub apps provide services to other apps</p>
    <p>storage</p>
    <p>user login</p>
    <p>contacts, calendar, media collections</p>
  </div>
  <div class="page">
    <p>Data protection in mobile platforms</p>
    <p>OS (Platform)</p>
    <p>storage</p>
    <p>user login</p>
    <p>contacts, calendar, media collections</p>
    <p>Apps check interactions</p>
    <p>access control checks</p>
    <p>Check what apps have access to what data</p>
    <p>access control checks  Platform checks file access</p>
  </div>
  <div class="page">
    <p>No principled solution for app-level checks</p>
    <p>Different high-level semantics: not just files!</p>
    <p>Different data models  how data structures represent semantics</p>
    <p>Different protection requirements</p>
    <p>Developers have to write ad hoc checks</p>
    <p>contact info</p>
    <p>photo album</p>
    <p>calendar events</p>
    <p>access control checks</p>
  </div>
  <div class="page">
    <p>DB rows Example: implement a photo manager</p>
    <p>Photo files</p>
    <p>Thumbnails</p>
    <p>Organize photos with albums</p>
    <p>Maintain metadata in database</p>
    <p>Keep indexes to files</p>
    <p>How would a developer write ad hoc checks?</p>
  </div>
  <div class="page">
    <p>DB rows</p>
    <p>Photo files</p>
    <p>Thumbnails</p>
    <p>public2. Define protection requirements  Each app can have its own</p>
    <p>private photos and albums</p>
    <p>Apps share some public photos and albums</p>
    <p>How would a developer write ad hoc checks? Example: implement a photo manager</p>
  </div>
  <div class="page">
    <p>DB rows</p>
    <p>Photo files</p>
    <p>ACL columns in DB, append WHERE clauses in queries</p>
    <p>Protect files  permission bits not enough for many apps</p>
    <p>Transfer via IPC, no direct file access</p>
    <p>How to change permissions? What is the API?</p>
    <p>What if we want a group of apps to access photos?</p>
    <p>How to hide location info about a photo?</p>
    <p>Thumbnails</p>
    <p>How would a developer write ad hoc checks? Problem: ad hoc checks are hard, error-prone</p>
    <p>Example: implement a photo manager</p>
  </div>
  <div class="page">
    <p>Specifications</p>
    <p>Reality: all-or-nothing protection</p>
    <p>Developers give up fine-grained protection</p>
    <p>Let apps have access to either all or none of the photos!</p>
    <p>Violates the principle of least privilege</p>
    <p>DB rows</p>
    <p>Photo files</p>
    <p>Thumbnails</p>
  </div>
  <div class="page">
    <p>iOS: Snapchat automatically saves photos to shared gallery</p>
    <p>Android: Dropbox stores files in public external storage</p>
    <p>Firefox OS: email attachments copied to public SD card when opened</p>
    <p>Mistakes in network-based authentication protocols (OAuth):</p>
    <p>Sun et al. CCS 12, Viennot et al. SIGMETRICS 14</p>
    <p>Reality: apps have insufficient protection</p>
  </div>
  <div class="page">
    <p>Specifications</p>
    <p>Ideally: separate specification from enforcement</p>
    <p>DB rows</p>
    <p>Photo files</p>
    <p>Thumbnails</p>
    <p>public App specifies data model with protection requirement</p>
    <p>OS (Platform)</p>
    <p>Enforcement access control checks Platform enforces protection,</p>
    <p>no ad hoc checks in apps</p>
  </div>
  <div class="page">
    <p>Specifications</p>
    <p>Problem: semantic gap in existing platforms</p>
    <p>OS (Platform) ? ? ?</p>
    <p>Enforcement</p>
    <p>DB rows</p>
    <p>Photo files</p>
    <p>Thumbnails</p>
    <p>public</p>
    <p>access control checks</p>
    <p>Highly structured app-level data</p>
    <p>Unstructured byte streams</p>
    <p>No visibility to structures</p>
  </div>
  <div class="page">
    <p>Specifications</p>
    <p>Platform needs to understand structured data DB rows</p>
    <p>Photo files</p>
    <p>Thumbnails</p>
    <p>public</p>
    <p>OS (Platform)</p>
    <p>Enforcement access control checks</p>
    <p>Highly structured app-level data</p>
    <p>Platform-level structured abstraction &amp; protection</p>
  </div>
  <div class="page">
    <p>desc</p>
    <p>Relational</p>
    <p>Earp 1. Make relational model a platform-level abstraction</p>
    <p>App</p>
    <p>specify</p>
    <p>Platform</p>
  </div>
  <div class="page">
    <p>Unify storage and inter-app services</p>
    <p>Platform</p>
    <p>App</p>
    <p>No need for OAuth</p>
    <p>desc</p>
    <p>Relational</p>
    <p>or Virtual table</p>
    <p>Virtual table</p>
    <p>Virtual tables</p>
    <p>Service callbacks function add () {}; function list() {};</p>
    <p>Proxy</p>
    <p>Database</p>
  </div>
  <div class="page">
    <p>database/service</p>
    <p>open</p>
    <p>Subset descriptors are flexible</p>
    <p>desc</p>
    <p>downgrade: add more restrictions e.g., exclude some sensitive rows/columns</p>
    <p>desc transfer: (temporarily) delegate access to another app</p>
    <p>desc</p>
  </div>
  <div class="page">
    <p>Operations:  View photos directly  View photos in an album  Search photos with a certain tag</p>
    <p>Photo manager example revisited</p>
    <p>textual tagsphotosalbums</p>
    <p>objects in different tables</p>
    <p>FILE-type column</p>
  </div>
  <div class="page">
    <p>Photo manager example revisited</p>
    <p>textual tagsphotosalbums</p>
    <p>objects in different tables</p>
    <p>public</p>
    <p>Protection requirements:  Each app has its own private</p>
    <p>photos and albums  Apps share public photos and</p>
    <p>albums</p>
  </div>
  <div class="page">
    <p>Specify protection in data model #1</p>
    <p>textual tagsphotosalbums Per-object permissions (per-row ACLs)</p>
  </div>
  <div class="page">
    <p>Fine-grained permissions are insufficient</p>
    <p>Problem with permissions only: sharing collections of data.</p>
    <p>textual tagsphotosalbums</p>
    <p>Share this album?</p>
    <p>Need to transitively updating ACLs of many objects!</p>
    <p>Complicated permission management  Consistency challenge</p>
  </div>
  <div class="page">
    <p>textual tagsphotosalbums</p>
    <p>Specify protection in data model #2</p>
    <p>confers access</p>
    <p>confers access Capability relationships: Cross-table relationships can confer access rights, in one direction (red arrows).</p>
    <p>Avoid transitively updating ACLs</p>
    <p>Achieve flexible access control with simple ACLs</p>
  </div>
  <div class="page">
    <p>Data model is specified.</p>
    <p>Let the platform enforce protection!</p>
    <p>Done!</p>
  </div>
  <div class="page">
    <p>But there is an efficiency challenge</p>
    <p>textual tagsphotosalbums</p>
    <p>confers access</p>
    <p>confers access Capability relationships make access rights on one object may depend on other objects</p>
    <p>Cross-table checks for every access?</p>
  </div>
  <div class="page">
    <p>E.g., derive fine-grained descriptors based on query results</p>
    <p>Solution: buffer computed access rights in descriptors</p>
    <p>Minimize cross-table checks with descriptors</p>
    <p>d0</p>
    <p>successful query proves access</p>
    <p>d1</p>
    <p>d2 Directly allow access to the photo</p>
    <p>d3</p>
  </div>
  <div class="page">
    <p>database</p>
    <p>Simple high-level APIs that hide details about descriptors</p>
    <p>Automates descriptor creation and management</p>
    <p>Making it simpler to use</p>
    <p>desc</p>
    <p>object graph APIs</p>
  </div>
  <div class="page">
    <p>Implementation: browser-based platform A modified Firefox OS:</p>
    <p>Apps written purely in Web code (HTML5, JavaScript)</p>
    <p>Structured APIs implemented in the platform (browser)</p>
    <p>Paper discusses ways to apply Earp innovations to Android</p>
    <p>Browser runtime (platform)</p>
    <p>App sandbox</p>
    <p>APP in JavaScript</p>
    <p>API for structured data</p>
    <p>Earp reference monitor</p>
    <p>JavaScript Engine</p>
    <p>DOM</p>
    <p>SQLite databases services</p>
    <p>object graph library</p>
  </div>
  <div class="page">
    <p>List of Earp apps Local apps</p>
    <p>Photo manager  Contacts</p>
    <p>Access control based on categories and data fields</p>
    <p>Email  Temporary, restricted access</p>
    <p>to attachments</p>
    <p>Proxies for remote services</p>
    <p>Egg-based social service</p>
    <p>Google Drive</p>
    <p>Per-app private folders</p>
  </div>
  <div class="page">
    <p>Expressive access control can be efficient</p>
    <p>Microbenchmarks: mostly outperforms baseline (Firefox OS)</p>
    <p>Earp apps directly use SQLite, and access control is efficient</p>
    <p>Firefox OS apps use IndexedDB (built on top of SQLite)</p>
  </div>
  <div class="page">
    <p>Expressive access control can be efficient</p>
    <p>Macrobenchmarks for remote services</p>
    <p>Local proxies add 2% - 8% latency</p>
    <p>Elgg read Elgg write</p>
    <p>Google Drive write Google Drive read</p>
    <p>local latency: app&lt;-&gt;proxy</p>
    <p>remote latecy: proxy&lt;-&gt;remote</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Inconsistent data abstractions in existing platforms  App: inter-related, structured data objects  Platform: unstructured byte streams</p>
    <p>Earp provides structured data as a platform-level abstraction  Principled storage, sharing, and protection</p>
  </div>
</Presentation>
