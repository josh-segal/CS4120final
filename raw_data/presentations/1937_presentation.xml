<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NetWarden: Mitigating Network Covert Channels without Performance Loss</p>
    <p>Jiarong Xing, Adam Morrison, Ang Chen</p>
    <p>Rice University</p>
  </div>
  <div class="page">
    <p>Motivation: Mitigating network covert channels</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>Code is 1011</p>
    <p>Attacker</p>
    <p>Launch code</p>
  </div>
  <div class="page">
    <p>Motivation: Mitigating network covert channels</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>Ah! 1011</p>
    <p>Attacker</p>
    <p>Launch code</p>
    <p>Covert channels:</p>
    <p>TCP hdr: 1011</p>
    <p>H E L L O</p>
    <p>Storage channels: changing the packet header fields.</p>
  </div>
  <div class="page">
    <p>Motivation: Mitigating network covert channels</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>Ah! 1011</p>
    <p>Attacker</p>
    <p>Launch code</p>
    <p>Covert channels:</p>
    <p>TCP hdr: 1011</p>
    <p>H E L L O</p>
    <p>H E L L O</p>
    <p>Storage channels: changing the packet header fields.</p>
    <p>Timing channels: changing the timing of packets.</p>
  </div>
  <div class="page">
    <p>State of the art: Existing channels</p>
    <p>Covert storage channels:  TCP initial sequence number channel (Rowland, 1997)  IP TTL channel (Qu, 2004)  Partial ACK channel (Luo, 2009)</p>
    <p>Covert timing channels:  IP timing channel (Cabuk, 2004)  TCP timing channel (Luo, 2008)  Physical layer channel (Lee, 2014)</p>
    <p>Covert channels can leak data over long distance effectively  Common Criteria require protection against both channel types!</p>
  </div>
  <div class="page">
    <p>State of the art: Storage channel defense</p>
    <p>replace (+2)</p>
    <p>Repeat for EVERY packets for Tbps traffic</p>
    <p>Field X = a</p>
    <p>replace (+2) Field X = a +2</p>
    <p>Field X = b</p>
    <p>replace (+2) Field X = b +2</p>
    <p>Field X = c</p>
    <p>replace (+2) Field X = c +2</p>
    <p>Field X = d</p>
    <p>replace (+2) Field X = d +2</p>
    <p>State-of-the-art solutions are software-based  Detection: Per-packet header inspection  Mitigation: Per-packet header modification</p>
    <p>TCP sender</p>
    <p>TCP hdr: 1011</p>
    <p>H E L L O</p>
    <p>TCP receiver</p>
    <p>TCP hdr: 1101</p>
    <p>H E L L O</p>
    <p>As a result, they are very inefficient!</p>
  </div>
  <div class="page">
    <p>State of the art: Timing channel detection</p>
    <p>Detection: Statistics-based tests over packet gaps  Looking for signs of statistical deviation   Not always accurate</p>
    <p>H E L L O Normal traffic:</p>
    <p>H E L L O With</p>
    <p>channel: Two peaks</p>
    <p>One peak</p>
    <p>Distribution of packet gaps</p>
  </div>
  <div class="page">
    <p>With channel:</p>
    <p>After mitigating:</p>
    <p>H E L L O</p>
    <p>H E L L O</p>
    <p>State of the art: Timing channel mitigation</p>
    <p>Mitigation: Add random delay to each packet  Destroy the original timing of the packets</p>
  </div>
  <div class="page">
    <p>With channel:</p>
    <p>After mitigating:</p>
    <p>H E L L O</p>
    <p>H E L L O</p>
    <p>extra delay</p>
    <p>State of the art: Timing channel mitigation</p>
    <p>Mitigation: Add random delay to each packet  Destroy the original timing of the packets</p>
    <p>It will increase the latency of TCP connections</p>
  </div>
  <div class="page">
    <p>Problem: Performance penalty</p>
    <p>Detection:</p>
    <p>Per-packet inspection required</p>
    <p>Software cannot keep up with Tbps traffic</p>
    <p>Mitigation:</p>
    <p>Adding random delay to each packet  Increase latency</p>
    <p>Collateral damage  Affects legitimate traffic (e.g., false positives)</p>
  </div>
  <div class="page">
    <p>Key question</p>
    <p>Can we mitigate covert channels while preserving performance?</p>
  </div>
  <div class="page">
    <p>Approach: NetWarden</p>
    <p>NetWarden: A performance-preserving covert channel defense.</p>
    <p>Secretary</p>
    <p>President</p>
    <p>Launch code: 1011</p>
    <p>????</p>
    <p>Attacker</p>
    <p>TCP hdr: 1011</p>
    <p>H E L L O</p>
    <p>H E L L O</p>
    <p>ToR switch</p>
    <p>NetWarden</p>
  </div>
  <div class="page">
    <p>Key challenges and solutions</p>
    <p>Challenge #1: Efficient detection  Solution: Use programmable switches</p>
    <p>Challenge #2: Performance-preserving mitigation  Solution: Performance boosting</p>
    <p>Challenge #3: Hardware limitations  Solution: Fastpath/slowpath co-design</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>- Motivation: Mitigating network covert channels</p>
    <p>- State of the art: Performance penalty</p>
    <p>- Approach: NetWarden</p>
    <p>- NetWarden design</p>
    <p>- Challenge #1: Efficient detection</p>
    <p>- Challenge #2: Performance-preserving mitigation</p>
    <p>- Challenge #3: Hardware limitations</p>
    <p>- Initial validation</p>
    <p>- Ongoing work</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Challenge #1: Efficient detection</p>
    <p>Solution: Detecting covert channels on programmable switches.</p>
    <p>Problem: Software-based detection cannot handle Tbps traffic.</p>
    <p>Programmable switches have two layers:  Control plane: General purpose CPU.  Data plane: Programmable ASIC.</p>
    <p>M e</p>
    <p>m o</p>
    <p>r y</p>
    <p>Switch control plane</p>
    <p>M e</p>
    <p>m o</p>
    <p>r y</p>
    <p>M e</p>
    <p>m o</p>
    <p>r y</p>
    <p>M e</p>
    <p>m o</p>
    <p>r y</p>
  </div>
  <div class="page">
    <p>Challenge #2: Performance-preserving mitigation</p>
    <p>Two boosters:  ACK booster: Generate ACK packets in advance.  Receive window booster: Enlarge receive window</p>
    <p>field temporarily.</p>
    <p>Solution: Temporarily boosting TCP performance to neutralize the performance penalty.</p>
    <p>Problem: Existing mitigations incur performance loss.</p>
  </div>
  <div class="page">
    <p>Challenge #2: Performance-preserving mitigation</p>
    <p>Two boosters:  ACK booster: Generate ACK packets in advance.  Receive window booster: Enlarge receive window</p>
    <p>field temporarily.</p>
    <p>Solution: Temporarily boosting TCP performance to neutralize the performance penalty.</p>
    <p>Two boosters:  ACK booster: Generate ACK packets in advance.  Receive window booster: Enlarge receive window</p>
    <p>field temporarily.</p>
    <p>Problem: Existing mitigations incur performance loss.</p>
  </div>
  <div class="page">
    <p>Boosting performance: ACK booster</p>
    <p>NetWarden</p>
  </div>
  <div class="page">
    <p>Boosting performance: ACK booster</p>
    <p>NetWarden</p>
  </div>
  <div class="page">
    <p>Boosting performance: ACK booster</p>
    <p>NetWarden</p>
  </div>
  <div class="page">
    <p>Boosting performance: ACK booster</p>
    <p>NetWarden</p>
  </div>
  <div class="page">
    <p>Boosting performance: ACK booster</p>
    <p>NetWarden</p>
    <p>Performance boosting</p>
    <p>Creates the illusion of a shorter latency as perceived by the sender.</p>
  </div>
  <div class="page">
    <p>Challenge #3: Hardware limitations</p>
    <p>Solution: Fastpath/slowpath co-design</p>
    <p>Problem: The data plane has hardware restrictions  E.g., does not support packet caching  Or complex statistical tests</p>
    <p>Packet buffers Statistical tests</p>
    <p>Traffic</p>
    <p>Fast path (data plane)</p>
    <p>Slow path (control plane)</p>
    <p>Storage channel detector</p>
    <p>Timing channel detector</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>- Motivation: Mitigating network covert channels</p>
    <p>- State of the art: Performance penalty</p>
    <p>- Approach: NetWarden</p>
    <p>- NetWarden design</p>
    <p>- Challenge #1: Efficient detection</p>
    <p>- Challenge #2: Performance-preserving mitigation</p>
    <p>- Challenge #3: Hardware limitations</p>
    <p>- Initial validation</p>
    <p>- Ongoing work</p>
    <p>- Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Proof-of-concept prototype:  P4 for fastpath  Python for slowpath  Runs in software-based simulator.</p>
    <p>Two covert channels:  Channel #1: TCP storage channel  Channel #2: IP timing channel</p>
    <p>Scenario: Client downloads file from NetWarden-protected server  Baseline: A nave defense without performance boosting</p>
  </div>
  <div class="page">
    <p>Results: Effectiveness</p>
    <p>Bit decoding error rate (%)</p>
    <p>No defense Nave defense NetWarden</p>
    <p>Perfect decoding</p>
    <p>Perfect decoding (flip 0/1)</p>
    <p>Nave defense: renders decoding to a random guess.</p>
    <p>NetWarden: very close to a random guess.</p>
  </div>
  <div class="page">
    <p>Results: Performance</p>
    <p>Normalized file downloading time</p>
    <p>No defense Nave defense NetWarden</p>
    <p>Nave defense incurs 18% extra downloading time.</p>
    <p>NetWarden only incurs 3% extra downloading time.</p>
  </div>
  <div class="page">
    <p>Ongoing work</p>
    <p>How should we divide the labor between fastpath and slowpath?  Optimal division of labor</p>
    <p>How much performance boosting should NetWarden perform?  Too much  unfair to other connections  Too little  cannot neutralize performance loss</p>
    <p>How can we make NetWarden effective for all TCP variants?</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Motivation: Mitigating network covert channels  Key limitation of existing approaches:</p>
    <p>Performance penalty</p>
    <p>Our approach: NetWarden  Using programmable data planes  Performance boosting  Fastpath/slowpath design</p>
    <p>The goal of NetWarden:  Mitigating covert channels without performance loss!</p>
    <p>Questions?</p>
  </div>
</Presentation>
