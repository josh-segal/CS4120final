<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SENG, the SGX-Enforcing Network Gateway: Authorizing Communication from Shielded Clients</p>
    <p>Fabian Schwarz and Christian Rossow</p>
    <p>(CISPA Helmholtz Center for Information Security)</p>
  </div>
  <div class="page">
    <p>Network Firewalls: What are the origins of corporate network communication?</p>
    <p>External</p>
    <p>Network</p>
    <p>Gateway Firewall</p>
    <p>Client Workstations (Enterprise Network)</p>
    <p>Client Host (Workstation)</p>
    <p>Browser</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>&quot;traditional&quot; firewall policies</p>
    <p>src App src IP/Port dst IP dst Port</p>
    <p>Mail Client  Mail Srv 993</p>
    <p>Browser  Web Srv</p>
    <p>Mail Client</p>
  </div>
  <div class="page">
    <p>Infected Client</p>
    <p>Network Firewalls: What are the origins of corporate network communication?</p>
    <p>External</p>
    <p>Network</p>
    <p>Gateway Firewall</p>
    <p>Client Workstations (Enterprise Network)</p>
    <p>Mail (infected)</p>
    <p>Malware</p>
    <p>C&amp;C ServerInformation Leaks</p>
    <p>Info Leaks</p>
    <p>Commands</p>
    <p>/ Remote ControlBrowser</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>&quot;traditional&quot; firewall policies</p>
    <p>src App src IP/Port dst IP dst Port</p>
    <p>Mail Client  Mail Srv 993</p>
    <p>Browser  Web Srv</p>
    <p>sender/receiver</p>
    <p>application?Goal: per-application policies</p>
  </div>
  <div class="page">
    <p>(b) process injection into trusted processes defeats allow-/denylist</p>
    <p>Malware Browser benign</p>
    <p>traffic</p>
    <p>(a) traffic morphing to hide traffic and fool heuristics</p>
    <p>The Problem: Secure Traffic-to-Application Attribution is Challenging!</p>
    <p>Malware evades traffic-to-application attribution:</p>
    <p>Reliable and secure attribution requires:</p>
    <p>(I) protection of applications and their traffic from system/MITM attackers</p>
    <p>(II) precise, unforgeable application identifiers (exposed to firewall)</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>(b) process injection into trusted processes (malware)</p>
    <p>Browser (infected) Implant GW</p>
    <p>browser:</p>
    <p>exploit 1</p>
    <p>abuse trusted process</p>
    <p>(c) manipulate host sensors/ firewalls via system-level exploit)</p>
    <p>(a) traffic morphing hides traffic to defeat port inspection and heuristics</p>
    <p>Malware GW</p>
    <p>VoIP</p>
    <p>mail</p>
    <p>mail:  VoIP:</p>
    <p>embedded channels</p>
    <p>&quot;hide in&quot; allowed protocols tamper with</p>
    <p>sensor / disable host</p>
    <p>firewall</p>
    <p>app: benign</p>
    <p>(c) manipulate host sensors/ firewalls via system-level exploit</p>
    <p>Kernel</p>
    <p>GW</p>
    <p>Client Host</p>
    <p>Malware</p>
    <p>Host SensorHost Sensor (infected)</p>
  </div>
  <div class="page">
    <p>MITM  MITM network attackers  fully compromised client system, only</p>
    <p>trust hardware (Intel SGX) and user</p>
    <p>trusted central gateway (&quot;bastion host&quot;)</p>
    <p>Run applications in TEE and shield network</p>
    <p>traffic until the perimeter firewall.</p>
    <p>++</p>
    <p>Root application identities in HW trust anchor</p>
    <p>and expose them to the gateway services.</p>
    <p>Trusted GW</p>
    <p>Enterprise Network</p>
    <p>Untrusted Clients</p>
    <p>Untrusted Client Subnetwork</p>
    <p>DMZ / Trusted Server Subnet</p>
    <p>SENG</p>
    <p>SENG Server</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Our Idea(s):</p>
    <p>Threat Model</p>
  </div>
  <div class="page">
    <p>MITM Ultimate Goal:</p>
    <p>Enable precise and secure per-application policies at the perimeter firewall</p>
    <p>to prevent info leaks / remote control</p>
    <p>Easy Deployment</p>
    <p>no client application modifications  compatible with existing firewalls and</p>
    <p>gateway services</p>
    <p>Trusted GW</p>
    <p>Enterprise Network</p>
    <p>Untrusted Clients</p>
    <p>Untrusted Client Subnetwork</p>
    <p>DMZ / Trusted Server Subnet</p>
    <p>SENG</p>
    <p>SENG Server</p>
  </div>
  <div class="page">
    <p>Infected Client</p>
    <p>Malware</p>
    <p>Application (binary, libs)</p>
  </div>
  <div class="page">
    <p>Infected Client</p>
    <p>Malware</p>
    <p>Application (binary, libs)</p>
    <p>How to shield client applications and their connections?</p>
  </div>
  <div class="page">
    <p>Application (binary, libs)</p>
  </div>
  <div class="page">
    <p>shields app in SGX Enclave SGX Enclave</p>
    <p>SENG Runtime: Shielding Client Application Traffic from System-level Attackers</p>
    <p>dynamic loading, threading, syscalls, and file system shield</p>
    <p>BUT: relies on host network stack</p>
    <p>SENG Runtime shields app connections</p>
    <p>via library OS</p>
    <p>(Graphene-SGX)Application (binary, libs)</p>
    <p>SGX boundary Graphene-SGX</p>
    <p>non-socket APIs</p>
    <p>SENG Runtime</p>
    <p>Linux Kernel</p>
    <p>Kernel Space</p>
    <p>User Space</p>
  </div>
  <div class="page">
    <p>SENG Runtime: Shielding Client Application Traffic from System-level Attackers</p>
    <p>SENG Runtime</p>
    <p>Application (binary, libs)</p>
    <p>SGX Enclave</p>
    <p>App data</p>
    <p>SGX boundary</p>
    <p>System calls (incl. send/recv)</p>
    <p>non-socket APIsIP packets</p>
    <p>lwIP</p>
    <p>Graphene-SGX</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Linux Kernel</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>SENG Runtime shields app connections  trusted TCP/IP network stack (lwIP)  provides trusted Socket + DNS API</p>
    <p>dynamic loading, threading, syscalls, and file system shield</p>
    <p>BUT: relies on host network stack</p>
    <p>shields app in SGX Enclave via library OS (Graphene-SGX)</p>
  </div>
  <div class="page">
    <p>SENG Runtime shields app connections  trusted TCP/IP network stack (lwIP)  provides trusted Socket + DNS API</p>
    <p>SENG Runtime: Shielding Client Application Traffic from System-level Attackers</p>
    <p>SENG Runtime</p>
    <p>Application (binary, libs)</p>
    <p>SGX Enclave</p>
    <p>App data</p>
    <p>SGX boundary</p>
    <p>System calls (incl. send/recv)</p>
    <p>non-socket APIs</p>
    <p>lwIP</p>
    <p>IP packets</p>
    <p>Graphene-SGX</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Linux Kernel</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>tunnel module</p>
    <p>DTLS records</p>
    <p>Untrusted IP Packet</p>
    <p>DTLS Record</p>
    <p>Trusted IP Packet</p>
    <p>Application Data</p>
    <p>DTLS protected IP-level tunnel</p>
    <p>Shielded App Network Packet</p>
  </div>
  <div class="page">
    <p>SENG Runtime shields app connections  trusted TCP/IP network stack (lwIP)  provides trusted Socket + DNS API  DTLS protected IP-level tunnel</p>
    <p>Shielded App Network Packet</p>
    <p>SENG Runtime: Shielding Client Application Traffic from System-level Attackers</p>
    <p>SENG Runtime</p>
    <p>Application (binary, libs)</p>
    <p>SGX Enclave</p>
    <p>App data</p>
    <p>SGX boundary</p>
    <p>System calls (incl. send/recv)</p>
    <p>non-socket APIs</p>
    <p>lwIP</p>
    <p>IP packets</p>
    <p>Graphene-SGX</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Linux Kernel</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>tunnel module</p>
    <p>DTLS records</p>
    <p>Untrusted IP Packet</p>
    <p>DTLS Record</p>
    <p>Trusted IP Packet</p>
    <p>Application Data</p>
    <p>Root application identities in HW trust anchor and expose them to the gateway services.</p>
    <p>Our Idea(s):</p>
    <p>Run applications in TEE and shield network traffic until the perimeter firewall.</p>
  </div>
  <div class="page">
    <p>SENG Runtime shields app connections  trusted TCP/IP network stack (lwIP)  provides trusted Socket + DNS API  DTLS protected IP-level tunnel</p>
    <p>Shielded App Network Packet</p>
    <p>SENG Runtime: Shielding Client Application Traffic from System-level Attackers</p>
    <p>SENG Runtime</p>
    <p>Application (binary, libs)</p>
    <p>SGX Enclave</p>
    <p>App data</p>
    <p>SGX boundary</p>
    <p>System calls (incl. send/recv)</p>
    <p>non-socket APIs</p>
    <p>lwIP</p>
    <p>IP packets</p>
    <p>Graphene-SGX</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Linux Kernel</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>tunnel module</p>
    <p>DTLS records</p>
    <p>Untrusted IP Packet</p>
    <p>DTLS Record</p>
    <p>Trusted IP Packet</p>
    <p>Application Data</p>
    <p>How to centrally attribute and authorize shielded traffic?</p>
  </div>
  <div class="page">
    <p>MITM MITM</p>
    <p>Gateway</p>
    <p>Enterprise Network External Network (Internet)</p>
    <p>Infected Client</p>
    <p>Untrusted Client Subnetwork</p>
    <p>DMZ / Trusted Server Subnet</p>
    <p>External Servers</p>
    <p>SENG Server</p>
    <p>Shielded Application</p>
    <p>attested</p>
    <p>tunnel</p>
    <p>Firewall</p>
    <p>SGX Enclave</p>
    <p>:trusted :untrusted</p>
    <p>SENG Server: Shielded Traffic Attribution and Authorization</p>
    <p>Malware</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>keys + attestation  allowlist  IP assignment</p>
    <p>[enclave IP]</p>
    <p>Untrusted IP Packet</p>
    <p>DTLS Record</p>
    <p>Trusted IP Packet</p>
    <p>Application Data</p>
    <p>(Host IP)</p>
    <p>(Enclave IP)</p>
    <p>Shielded App Network Packet</p>
  </div>
  <div class="page">
    <p>Infected Client</p>
    <p>Gateway</p>
    <p>Firewall</p>
    <p>External Network (Internet)</p>
    <p>Shielded Application</p>
    <p>SGX Enclave</p>
    <p>Untrusted Client Subnetwork</p>
    <p>DMZ / Trusted Server Subnet</p>
    <p>External Servers</p>
    <p>SENG Server</p>
    <p>attested</p>
    <p>tunnel</p>
    <p>malicious</p>
    <p>traffic</p>
    <p>SENG Server: Shielded Traffic Attribution and Authorization</p>
    <p>Enterprise Network</p>
    <p>:trusted :untrusted</p>
    <p>MITM MITM</p>
    <p>Malware</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>[enclave IP]</p>
    <p>Infected Client</p>
    <p>attested</p>
    <p>tunnel</p>
  </div>
  <div class="page">
    <p>Infected Client</p>
    <p>Gateway</p>
    <p>Firewall</p>
    <p>External Network (Internet)</p>
    <p>Shielded Application</p>
    <p>SGX Enclave</p>
    <p>Untrusted Client Subnetwork</p>
    <p>DMZ / Trusted Server Subnet</p>
    <p>External Servers</p>
    <p>SENG Server</p>
    <p>attested</p>
    <p>tunnel</p>
    <p>malicious</p>
    <p>traffic</p>
    <p>SENG Server: Shielded Traffic Attribution and Authorization</p>
    <p>Enterprise Network</p>
    <p>:trusted :untrusted</p>
    <p>MITM MITM</p>
    <p>Malware</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>[enclave IP]</p>
    <p>Infected Client</p>
    <p>attested</p>
    <p>tunnel</p>
    <p>Our Idea(s):</p>
    <p>Run applications in TEE and shield network traffic until the perimeter firewall.</p>
    <p>Root application identities in HW trust anchor and expose them to the gateway services.</p>
  </div>
  <div class="page">
    <p>How to define and enforce per-application firewall rules?</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway 18</p>
  </div>
  <div class="page">
    <p>SENGs Enclave Subnetworks: per-application firewall rules</p>
    <p>&quot;traditional&quot; firewall rules</p>
    <p>No. source destination dst Port</p>
    <p>No. source destination dst Port</p>
    <p>SENGs per-application rules (with enclave subnetworks)</p>
    <p>Firewalls enforce SENGs per-application policies on the application-specific subnetworks.</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
  </div>
  <div class="page">
    <p>SENGs Enclave Subnetworks: per-application firewall rules</p>
    <p>&quot;traditional&quot; firewall rules</p>
    <p>No. source destination dst Port</p>
    <p>No. source destination dst Port</p>
    <p>SENGs per-application rules (with enclave subnetworks)</p>
    <p>Firewalls enforce SENGs per-application policies on the application-specific subnetworks.</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Enable precise and secure per-application policies at the perimeter firewall</p>
    <p>to prevent info leaks / remote control</p>
    <p>no client application modifications  compatible with existing firewalls and</p>
    <p>gateway services</p>
    <p>External Servers</p>
    <p>Ultimate Goal:</p>
    <p>Easy Deployment</p>
  </div>
  <div class="page">
    <p>How does SENG perform compared  to Graphene-SGX?  to Native?</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway 21</p>
  </div>
  <div class="page">
    <p>SENG Runtime Performance: Client Applications</p>
    <p>&quot;native&quot;: Linux native  &quot;pure&quot;: Graphene-SGX (LibOS)  local setup, 1 Gbps LAN</p>
    <p>Bandwidth [Mbps]</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t</p>
    <p>[M bp</p>
    <p>s]</p>
    <p>native|pure SENG</p>
    <p>Single TCP Connection (iPerf3, downlink)</p>
    <p>TCP throughput (iPerf3):</p>
    <p>native == pure (avg. 926 Mbps)  SENG: 93 - 97 % (avg. 868 Mbps)</p>
    <p>HTTP download (cURL):</p>
    <p>SENG: 8.8 - 14.1 % overhead (&lt; 1sec)  (files: 1 MB, 10 MB, , 1 GB)</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
  </div>
  <div class="page">
    <p>Work Load [1k req/sec]</p>
    <p>L at</p>
    <p>en cy</p>
    <p>[m s]</p>
    <p>native pure SENG</p>
    <p>NGINX Server Application: SENG Runtime performance</p>
    <p>HTTP response latency (NGINX):</p>
    <p>app: NGINX, bench with wrk2  native: 40k req/sec  SENG/pure: 15k req/sec ( 37.5% of native)</p>
    <p>NGINX Server Benchmark (HTTP)</p>
    <p>Problem:</p>
    <p>Graphene-SGX (our version) only supports synchronous syscalls, no batch mode</p>
    <p>==&gt; Will faster primitives help?</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
  </div>
  <div class="page">
    <p>Work Load [1k req/sec]</p>
    <p>L at</p>
    <p>en cy</p>
    <p>[m s]</p>
    <p>native pure SENG</p>
    <p>NGINX Server Application: SENG Runtime performance</p>
    <p>NGINX Server Benchmark (HTTP) Problem:</p>
    <p>Our Graphene-SGX version only supports synchronous syscalls, no batch mode</p>
    <p>==&gt; Will faster primitives help?</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
  </div>
  <div class="page">
    <p>SENG SDK (&quot;SENG-sdk&quot;):</p>
    <p>runtime alternative based on Intel SGX SDK (no LibOS)</p>
    <p>36k req/sec (+2.4x SENG, 90% of native) 1 5 9 13 17 21</p>
    <p>Work Load [1k req/sec]</p>
    <p>L at</p>
    <p>en cy</p>
    <p>[m s]</p>
    <p>native pure SENG SENG-sdk</p>
    <p>NGINX Server Application: SENG SDK (w/o LibOS)</p>
    <p>NGINX Server Benchmark (HTTP) Problem:</p>
    <p>Our Graphene-SGX version only supports synchronous syscalls, no batch mode</p>
    <p>==&gt; Will faster primitives help?</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
  </div>
  <div class="page">
    <p>SENG SDK (&quot;SENG-sdk&quot;):  runtime alternative based on Intel SGX SDK</p>
    <p>(no LibOS)  36k req/sec (+2.4x SENG, 90% of native)</p>
    <p>Work Load [1k req/sec]</p>
    <p>L at</p>
    <p>en cy</p>
    <p>[m s]</p>
    <p>native pure SENG SENG-sdk</p>
    <p>NGINX Server Application: SENG SDK (w/o LibOS)</p>
    <p>NGINX Server Benchmark (HTTP) Problem: Our Graphene-SGX version only supports synchronous syscalls, no batch mode</p>
    <p>==&gt; Will faster primitives help?</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>(b) process injection into trusted processes defeats allow-/denylist</p>
    <p>Malware Browser benign</p>
    <p>traffic</p>
    <p>(a) traffic morphing to hide traffic and fool heuristics</p>
    <p>The Problem: Secure Traffic-to-Application Attribution is Challenging!</p>
    <p>Malware evades traffic-to-application attribution:</p>
    <p>Reliable and secure attribution requires:</p>
    <p>(I) protection of applications and their traffic from system/MITM attackers</p>
    <p>(II) precise, unforgeable application identifiers (exposed to firewall)</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>(b) process injection into trusted processes (malware)</p>
    <p>Browser (infected) Implant GW</p>
    <p>browser:</p>
    <p>exploit 1</p>
    <p>abuse trusted process</p>
    <p>(c) manipulate host sensors/ firewalls via system-level exploit)</p>
    <p>(a) traffic morphing hides traffic to defeat port inspection and heuristics</p>
    <p>Malware GW</p>
    <p>VoIP</p>
    <p>mail</p>
    <p>mail:  VoIP:</p>
    <p>embedded channels</p>
    <p>&quot;hide in&quot; allowed protocols tamper with</p>
    <p>sensor / disable host</p>
    <p>firewall</p>
    <p>app: benign</p>
    <p>(c) manipulate host sensors/ firewalls via system-level exploit</p>
    <p>Kernel</p>
    <p>GW</p>
    <p>Client Host</p>
    <p>Malware</p>
    <p>Host Sensor (infected)</p>
    <p>Infected Client</p>
    <p>Gateway</p>
    <p>Firewall</p>
    <p>External Network (Internet)</p>
    <p>Shielded Application</p>
    <p>SGX Enclave</p>
    <p>Untrusted Client Subnetwork</p>
    <p>DMZ / Trusted Server Subnet</p>
    <p>External Servers</p>
    <p>SENG Server</p>
    <p>attested</p>
    <p>tunnel</p>
    <p>malicious</p>
    <p>traffic</p>
    <p>SENG Server: Shielded Traffic Attribution and Authorization</p>
    <p>Enterprise Network</p>
    <p>:trusted :untrusted</p>
    <p>MITM MITM</p>
    <p>Malware</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>[enclave IP]</p>
    <p>Infected Client</p>
    <p>attested</p>
    <p>tunnel</p>
    <p>SENGs Enclave Subnetworks: per-application firewall rules</p>
    <p>&quot;traditional&quot; firewall rules</p>
    <p>No. source destination dst Port</p>
    <p>No. source destination dst Port</p>
    <p>SENGs per-application rules (with enclave subnetworks)</p>
    <p>Firewalls enforce SENGs per-application policies on the application-specific subnetworks.</p>
    <p>fabian.schwarz@cispa.saarland  SENG, the SGX-Enforcing Network Gateway</p>
    <p>Summary: SENG, the SGX-Enforcing Network Gateway</p>
    <p>Thank you! Questions?</p>
    <p>fabian.schwarz@cispa.saarland</p>
    <p>@fa_schwarz (Twitter)</p>
    <p>https://github.com/sengsgx</p>
  </div>
</Presentation>
