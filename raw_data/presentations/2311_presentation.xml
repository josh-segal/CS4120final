<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>School of Computer Science</p>
    <p>ShuttleDB: Database-Aware Elasticity in the Cloud</p>
    <p>Sean Barker, Yun Chi, Hakan Hacigumus, Prashant Shenoy, and Emmanuel Cecchet</p>
    <p>University of Massachusetts Amherst</p>
    <p>NEC Laboratories America</p>
  </div>
  <div class="page">
    <p>Time</p>
    <p>W or kl oa d</p>
    <p>Dedicated Capacity</p>
    <p>Elastic Load Shifting</p>
    <p>Dedicated Resource Usage</p>
    <p>Time</p>
    <p>Dedicated Resource Usage</p>
    <p>Temporary Capacity</p>
    <p>Extra Server</p>
    <p>Idle Capacity</p>
    <p>Dedicated Capacity (a) (b)</p>
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Elastic Cloud Platforms</p>
    <p>! Cloud platforms for scalable, high-performance applications and services</p>
    <p>! Key property: elasticity  Increased system utilization  Decreased infrastructure cost  Handle dynamic workloads</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Database Clouds</p>
    <p>! Cloud employs virtual machines (VMs)  Physical server partitioned into VMs  VMs contain database tenants</p>
    <p>! Large tenants  Dedicated VMs</p>
    <p>! Small tenants  Collocated within a VM</p>
    <p>DB server</p>
    <p>DB 1</p>
    <p>DB 3DB 2</p>
    <p>Virtual Machine 1</p>
    <p>DB server</p>
    <p>DB 1</p>
    <p>Physical Server Virtual Machine 2</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Database Cloud Elasticity</p>
    <p>! Option 1: virtual machine-based  Transfer entire VM to larger server  Off-the-shelf, black-box approach  Designed for LAN migrations  Inefficient for small (collocated) tenants!</p>
    <p>! Option 2: database-level elasticity  Operate directly on DB tenants  Not readily available off-the-shelf  Potential to address VM limitations</p>
    <p>! Can migrate or replicate 4</p>
    <p>DB 1</p>
    <p>Virtual Machine</p>
    <p>DB server</p>
    <p>DB 4</p>
    <p>Virtual Machine</p>
    <p>DB server</p>
    <p>DB 4</p>
    <p>Virtual Machine</p>
    <p>DB 2 DB 3</p>
    <p>DB Server</p>
    <p>DB 1</p>
    <p>Virtual Machine</p>
    <p>DB server</p>
    <p>DB 4</p>
    <p>Virtual Machine</p>
    <p>DB server</p>
    <p>Virtual Machine</p>
    <p>DB 2 DB 3</p>
    <p>DB Server</p>
    <p>DB 3</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>ShuttleDB Problem Statement</p>
    <p>! Which elasticity mechanisms are best for DB clouds?</p>
    <p>! How can we exploit different elasticity mechanisms in a database cloud to efficiently meet the needs of diverse tenants?</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Combining Elasticity Approaches</p>
    <p>! Different approaches best in different scenarios!  Dedicated or collocated tenant?  LAN or WAN scaling?</p>
    <p>! Scale-up (migration) or scale-out (replication)</p>
    <p>Dedicated Tenant (large)</p>
    <p>Collocated Tenant (small)</p>
    <p>LAN scale-up LAN scale-out</p>
    <p>VM migrate DB or VM replicate</p>
    <p>DB migrate</p>
    <p>WAN scale-up WAN scale-out</p>
    <p>DB migrate DB replicate</p>
    <p>DB migrate</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Database-Aware Elasticity</p>
    <p>! DB-level elasticity not out-of-the-box</p>
    <p>! ShuttleDB implements a database-agnostic migration layer</p>
    <p>! Objectives  Migrate individual tenants  LAN or WAN capable  Live migration  Minimize data overhead</p>
  </div>
  <div class="page">
    <p>Target Server</p>
    <p>Source Server</p>
    <p>Database Clients</p>
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Database Live Migration Protocol</p>
    <p>! Three-phase protocol</p>
    <p>! (1) Copy database blocks  Continue handling workload</p>
    <p>! (2) Update changed blocks  Multiple rounds</p>
    <p>! (3) Switch workload to target  Minimal (&lt;1s) downtime</p>
    <p>A B C D EA B C EDFF GG HH</p>
    <p>I</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Delta Migrations</p>
    <p>! Transfer only DB delta when possible</p>
    <p>! Outgoing migration  Save local snapshot</p>
    <p>! Returning migration  Compare local snapshots  Transfer (small) delta</p>
    <p>T2T2</p>
    <p>(a) Outgoing Migration</p>
    <p>Server A Server B</p>
    <p>T3</p>
    <p>(5) handover</p>
    <p>(3) extract(4) deltas</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>(1) queries</p>
    <p>(2) archive(6) deltas</p>
    <p>T5</p>
    <p>T4</p>
    <p>(1) queries</p>
    <p>(2) streamingarchive</p>
    <p>Database Client</p>
    <p>(3) streaming diff</p>
    <p>T4</p>
    <p>(4) patch</p>
    <p>(5) extract</p>
    <p>(7) handov er</p>
    <p>(b) Returning Migration</p>
    <p>Server A Server B</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Automated Elasticity</p>
    <p>! Automatically scale tenant capacity</p>
    <p>! When: track latency, utilization  ARIMA forecast</p>
    <p>! Which: cost-benefit  Tenant size vs workload</p>
    <p>! Where: under-utilized machine  Prefer LAN over WAN</p>
    <p>! How: small/large, LAN/WAN  VM or DB migration as appropriate</p>
    <p>DB k</p>
    <p>W or</p>
    <p>kl oa</p>
    <p>d</p>
    <p>WL k</p>
    <p>Tenant &amp; Workload ProfilesServer Profile &amp; History</p>
    <p>Tenant Selector</p>
    <p>Local Databases</p>
    <p>Remote Servers</p>
    <p>ShuttleDB Tenant Controller</p>
    <p>ShuttleDB Migration Layer</p>
    <p>Scale Initiator</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Outline</p>
    <p>! Motivation</p>
    <p>! Cloud database architecture</p>
    <p>! Live migration mechanisms</p>
    <p>! Automated elasticity</p>
    <p>! Prototype evaluation</p>
    <p>! Conclusions</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Prototype Implementation</p>
    <p>! Implemented on top of MySQL (DB) and Xen (VM)  Modified Yahoo Cloud Serving Benchmark for evaluation</p>
    <p>mysql mysql</p>
    <p>DB 1 DB 2</p>
    <p>elasticity daemon</p>
    <p>elasticity daemon</p>
    <p>DB 4DB 2</p>
    <p>DB 3</p>
    <p>tenant migration</p>
    <p>V M</p>
    <p>A ShuttleDB Daemon (dom0)</p>
    <p>V M</p>
    <p>B API calls&quot;migrate tenant 2&quot;</p>
    <p>client SQL queries</p>
    <p>management tier</p>
    <p>elasticity tier</p>
    <p>tenant tier</p>
    <p>Client machines</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Evaluation: Large Tenants</p>
    <p>! Performance over a LAN  Baseline VM migration, VM (+DB), and DB-aware migration</p>
    <p>! Large (20 GB) tenant in dedicated VM</p>
    <p>VM (no DB) VM DB-Aware 0</p>
    <p>D u r a t i o n ( m i n u t e s )</p>
    <p>D a t a S e n t ( G B )</p>
    <p>Elasticity Type</p>
    <p>Duration Data</p>
    <p>! VM migration suitable for dedicated tenants</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Evaluation: Small Tenants</p>
    <p>! Twenty small (1 GB) tenants  Migrate single tenant</p>
    <p>! DB-aware migration important for small tenants</p>
    <p>VM DB DB+precopy DB+delta 0</p>
    <p>D u r a t i o n ( m i n u t e s )</p>
    <p>D a t a S e n t ( G B )</p>
    <p>Elasticity Type</p>
    <p>Duration Data</p>
    <p>Std +Precopy Delta 0</p>
    <p>D u r a t i o n ( m i n u t e s )</p>
    <p>D a t a S e n t ( G B )</p>
    <p>Delta migration optimization</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Evaluation: WAN Migrations</p>
    <p>! Scaling up to a remote datacenter (Amazon EC2)  Later delta migration to scale back</p>
    <p>! ShuttleDB efficiently scales across a WAN</p>
    <p>Snapshot Deltas Handover</p>
    <p>D u r a t i o n ( s )</p>
    <p>Migration Stage</p>
    <p>Outgoing (full snapshot) Returning (delta snapshot)</p>
    <p>Only 1s downtime</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Evaluation: Mixed Mechanisms</p>
    <p>! Two spare servers, two workload spikes  Scale-up (DB migration) followed by scale-out (VM replication)</p>
    <p>! Migration, replication combined to increase elasticity</p>
    <p>T r a n s a c t i o n L a t e n c y ( m s )</p>
    <p>Time (minutes)</p>
    <p>Latency</p>
    <p>(2) DB Migrate (4) VM Replicate</p>
    <p>(5) Delete Replica</p>
    <p>(6) DB Delta Migrate</p>
    <p>(1) Spike</p>
    <p>A</p>
    <p>(3) Spike</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Related Work</p>
    <p>! Live migration of virtual machines  LAN-based techniques [Clark - NSDI 05, Bradford - VEE 07]  WAN extensions [Wood - SIGPLAN 11]</p>
    <p>! Database migration systems  Shared-nothing systems [Elmore - SIGMOD 11]  NAS-based systems [Das - PVLDB 11]</p>
    <p>! Cloud databases and multitenancy  Provisioning using cost models [Cecchet - VEE 11]  Workload-aware multitenant provisioning [Curino - SIGMOD 11]</p>
  </div>
  <div class="page">
    <p>Prashant Shenoy (shenoy@cs.umass.edu)</p>
    <p>Conclusions</p>
    <p>! Elasticity as a key property of cloud applications  Unique challenges in elastic cloud databases</p>
    <p>! ShuttleDB combines virtual machine techniques with database-level migration for flexible elasticity  Scale-up and scale-out  Usable over LAN or WAN  Automated scaling based on system performance</p>
    <p>! Prototype on an off-the-shelf DBMS  Minimal (&lt;2s) downtime during scaling  Rapid response to workload changes</p>
  </div>
  <div class="page">
    <p>School of Computer Science</p>
    <p>Questions?</p>
  </div>
</Presentation>
