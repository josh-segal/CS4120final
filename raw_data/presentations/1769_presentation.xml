<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Walking Your Dog in the Woods in Polynomial Time</p>
    <p>Joint work with Erin Wolf Chambers, Eric Colin de Verdiere, Jeff Erickson,</p>
    <p>Sylvain Lazard, Francis Lazarus 17th Fall Workshop on Computational Geometry / IBM / November 9, 2007</p>
    <p>Shripad Thite California Institute of Technology</p>
    <p>shripad@caltech.edu</p>
  </div>
  <div class="page">
    <p>Frechet distance between curves</p>
    <p>Dog-leash distance: Minimum length of a straight leash joining a dog and its owner that allows them to walk along their respective curves, from one endpoint to the other, continuously without backtracking</p>
  </div>
  <div class="page">
    <p>Woods have trees . . .and other obstacles New condition: Leash must move continuously in the ambient metric space</p>
    <p>If there are obstacles, a longer leash may be required because the leash cannot jump over them</p>
    <p>Goal: Walk the dog with the shortest leash possible</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance Dog-leash distance in a general metric space where the leash must move continuously</p>
    <p>We give a polynomial-time algorithm to compute the homotopic Frechet distance between two polygonal curves in the plane with polygonal obstacles</p>
  </div>
  <div class="page">
    <p>Application 1: Morphing</p>
    <p>Leash motion encodes a continuous deformation between A and B, without penetrating obstacles</p>
    <p>The cost of the deformation is the maximum distance any point has to travel</p>
  </div>
  <div class="page">
    <p>Application 2: Measuring similarity</p>
    <p>Robotics: Given two paths, how similar are they?</p>
    <p>Paths that go around obstacles differently are not similar</p>
  </div>
  <div class="page">
    <p>Leash map</p>
    <p>s.t. `(, t) is the leash at time t joining A(u(t)) and B(v(t)) (` encodes re-parameterizations u, v of A, B)</p>
    <p>A</p>
    <p>B 0.5</p>
    <p>v = 1v = 0</p>
    <p>u = 0 u = 1 0.25 0.75</p>
    <p>Continuous function ` : [0, 1]  [0, 1]  S arc-length time metric space</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance</p>
    <p>cost(`) := sup t[0,1]</p>
    <p>{ Length of `(, t) }</p>
    <p>The cost of a leash map ` is the longest length of the leash at any time during the leash motion:</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance</p>
    <p>cost(`) := sup t[0,1]</p>
    <p>{ Length of `(, t) }</p>
    <p>The cost of a leash map ` is the longest length of the leash at any time during the leash motion:</p>
    <p>F (A, B) := inf leash map `</p>
    <p>{ cost(`) }</p>
    <p>The homotopic Frechet distance is the minimum cost of any leash map:</p>
  </div>
  <div class="page">
    <p>Punctured plane</p>
    <p>Let P be a set of points in the plane = obstacles</p>
    <p>Leash must move continuously in the punctured plane E2 \ P , so it cannot jump over obstacles</p>
    <p>Let A, B be two given curves in E2</p>
    <p>A leash is a curve joining a point of A and a point of B</p>
  </div>
  <div class="page">
    <p>Relative homotopy Two leashes are relatively homotopic if one can be continuously transformed into the other in the punctured plane while keeping their endpoints on the respective curves</p>
  </div>
  <div class="page">
    <p>Relative homotopy Two leashes are relatively homotopic if one can be continuously transformed into the other in the punctured plane while keeping their endpoints on the respective curves</p>
    <p>Every leash map `h describes a set of leashes belonging to some relative homotopy class h</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance redux</p>
    <p>Let h be a relative homotopy class</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance redux</p>
    <p>Let h be a relative homotopy class</p>
    <p>Let `h be a leash map in homotopy class h</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance redux</p>
    <p>Let h be a relative homotopy class</p>
    <p>Let `h be a leash map in homotopy class h</p>
    <p>Define Fh(A, B) := inf `h { cost(`h) }</p>
  </div>
  <div class="page">
    <p>Homotopic Frechet distance redux</p>
    <p>Let h be a relative homotopy class</p>
    <p>Let `h be a leash map in homotopy class h</p>
    <p>Define Fh(A, B) := inf `h { cost(`h) }</p>
    <p>Homotopic Frechet distance</p>
    <p>F (A, B) := min h {Fh(A, B)}</p>
  </div>
  <div class="page">
    <p>Geodesic leashes</p>
    <p>Lemma: There exists an optimum leash map such that the leash at every time is the shortest path in its homotopy class</p>
  </div>
  <div class="page">
    <p>Geodesic leashes</p>
    <p>Lemma: There exists an optimum leash map such that the leash at every time is the shortest path in its homotopy class</p>
    <p>Hence, w.l.o.g., `h(, t) is the (unique) shortest path in homotopy class h between its endpoints</p>
  </div>
  <div class="page">
    <p>Geodesic leashes</p>
    <p>Lemma: There exists an optimum leash map such that the leash at every time is the shortest path in its homotopy class</p>
    <p>Hence, w.l.o.g., `h(, t) is the (unique) shortest path in homotopy class h between its endpoints</p>
    <p>We allow the leash to pass through obstacle points. A turning angle at every obstacle point uniquely identifies the homotopy class of the leash. Now, unique shortest paths exist in every homotopy class.</p>
  </div>
  <div class="page">
    <p>Key lemma The optimum homotopy class h must contain a straight-line leash</p>
    <p>m edges n edges|P | obstacles</p>
  </div>
  <div class="page">
    <p>Key lemma The optimum homotopy class h must contain a straight-line leash</p>
    <p>m edges n edges|P | obstacles</p>
    <p>Our algorithm: List all O(mn|P|2) homotopy classes h that contain a straight-line leash and compute Fh(A, B) in O(mn|P| log mn|P|) time using parametric search</p>
  </div>
  <div class="page">
    <p>Polygonal obstacles The optimum leash map ` may be pinned at a common subpath , i.e., a globally shortest p-q path</p>
    <p>p</p>
    <p>q</p>
    <p>Enumerate O(mn|P|4) homotopy classes h Compute Fh(A, B) from two independent leash maps</p>
  </div>
  <div class="page">
    <p>Open: On a convex polyhedron</p>
    <p>Leash is not always a geodesic!</p>
    <p>e.g., leash must have enough slack to cross over a vertex (a mountain)</p>
    <p>Challenge: Characterize an optimum leash map</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Extra slides</p>
  </div>
  <div class="page">
    <p>Computing Fh Decision problem: Given a real d  0, is Fh(A, B)  d?</p>
  </div>
  <div class="page">
    <p>Computing Fh Decision problem: Given a real d  0, is Fh(A, B)  d?</p>
    <p>Observation: There are polynomially many critical values of d at which the answer may change from no to yes</p>
    <p>d1  d2  . . .  di1  d  di+1  di+2  . . .</p>
  </div>
  <div class="page">
    <p>Computing Fh Decision problem: Given a real d  0, is Fh(A, B)  d?</p>
    <p>Observation: There are polynomially many critical values of d at which the answer may change from no to yes</p>
    <p>d1  d2  . . .  di1  d  di+1  di+2  . . .</p>
  </div>
  <div class="page">
    <p>Fh(A, B)</p>
    <p>Computing Fh Decision problem: Given a real d  0, is Fh(A, B)  d?</p>
    <p>Observation: There are polynomially many critical values of d at which the answer may change from no to yes</p>
    <p>Goal: Find the smallest critical value d for which the answer above is yes</p>
    <p>d1  d2  . . .  di1  d  di+1  di+2  . . .</p>
  </div>
  <div class="page">
    <p>described by  |P | ellipses</p>
    <p>Is Fh  d?</p>
    <p>Is there a monotone path from (0, 0) to (m, n) in free space?</p>
    <p>Lemma: In each cell Cij , the free space is convex</p>
    <p>http://www.cim.mcgill.ca/stephane/cs507/Project.html, Stephane Pelletier, 2002</p>
  </div>
  <div class="page">
    <p>Parametric search [Megiddo 83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let As be an algorithm to decide, given a critical value di, whether Fh(A, B)  di, with running time O(Ts) Ask me later if you want me to describe As</p>
  </div>
  <div class="page">
    <p>Parametric search [Megiddo 83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let As be an algorithm to decide, given a critical value di, whether Fh(A, B)  di, with running time O(Ts) Ask me later if you want me to describe As</p>
    <p>We simulate As on input d , with d as a symbolic variable</p>
  </div>
  <div class="page">
    <p>Parametric search [Megiddo 83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let As be an algorithm to decide, given a critical value di, whether Fh(A, B)  di, with running time O(Ts) Ask me later if you want me to describe As</p>
    <p>We simulate As on input d , with d as a symbolic variable</p>
    <p>The control flow of As depends on comparisons of the form d  dj where dj is a critical value Each dj is a distance, i.e., a quadratic function of input coordinates.</p>
  </div>
  <div class="page">
    <p>Parametric search [Megiddo 83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let As be an algorithm to decide, given a critical value di, whether Fh(A, B)  di, with running time O(Ts) Ask me later if you want me to describe As</p>
    <p>We simulate As on input d , with d as a symbolic variable</p>
    <p>The control flow of As depends on comparisons of the form d  dj where dj is a critical value Each dj is a distance, i.e., a quadratic function of input coordinates.</p>
    <p>d  dj ? Run As on input dj , in O(Ts) time</p>
  </div>
  <div class="page">
    <p>Parametric search [Megiddo 83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let As be an algorithm to decide, given a critical value di, whether Fh(A, B)  di, with running time O(Ts) Ask me later if you want me to describe As</p>
    <p>We simulate As on input d , with d as a symbolic variable</p>
    <p>The control flow of As depends on comparisons of the form d  dj where dj is a critical value Each dj is a distance, i.e., a quadratic function of input coordinates.</p>
    <p>d  dj ? Run As on input dj , in O(Ts) time</p>
    <p>Total running time = O(T 2s )</p>
  </div>
  <div class="page">
    <p>Parametric search on steroids [M83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let Ap be a parallel algorithm to decide, given di, whether Fh(A, B)  di, with parallel running time O(Tp) on k processors Ask me later if you want me to describe Ap</p>
  </div>
  <div class="page">
    <p>Parametric search on steroids [M83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let Ap be a parallel algorithm to decide, given di, whether Fh(A, B)  di, with parallel running time O(Tp) on k processors Ask me later if you want me to describe Ap</p>
    <p>We simulate Ap sequentially on input d , with d as a</p>
    <p>symbolic variable</p>
  </div>
  <div class="page">
    <p>Parametric search on steroids [M83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let Ap be a parallel algorithm to decide, given di, whether Fh(A, B)  di, with parallel running time O(Tp) on k processors Ask me later if you want me to describe Ap</p>
    <p>We simulate Ap sequentially on input d , with d as a</p>
    <p>symbolic variable</p>
    <p>The control flow of Ap depends on comparisons of the form d  dj where dj is a critical value</p>
  </div>
  <div class="page">
    <p>Parametric search on steroids [M83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let Ap be a parallel algorithm to decide, given di, whether Fh(A, B)  di, with parallel running time O(Tp) on k processors Ask me later if you want me to describe Ap</p>
    <p>We simulate Ap sequentially on input d , with d as a</p>
    <p>symbolic variable</p>
    <p>The control flow of Ap depends on comparisons of the form d  dj where dj is a critical value In each parallel stage, do binary search on O(k) values dj</p>
  </div>
  <div class="page">
    <p>Parametric search on steroids [M83]</p>
    <p>d1  d2  . . .  di1  d  . . .  dj  . . .</p>
    <p>Let Ap be a parallel algorithm to decide, given di, whether Fh(A, B)  di, with parallel running time O(Tp) on k processors Ask me later if you want me to describe Ap</p>
    <p>We simulate Ap sequentially on input d , with d as a</p>
    <p>symbolic variable</p>
    <p>The control flow of Ap depends on comparisons of the form d  dj where dj is a critical value In each parallel stage, do binary search on O(k) values dj</p>
    <p>Total running time = O(TsTp log k + kTp) better than O(T 2s )</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 1</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 2</p>
  </div>
  <div class="page">
    <p>Example 3</p>
  </div>
  <div class="page">
    <p>Example 3</p>
  </div>
  <div class="page">
    <p>Example 3</p>
  </div>
  <div class="page">
    <p>Example 3</p>
  </div>
  <div class="page">
    <p>Example 3</p>
  </div>
</Presentation>
