<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NetVM: High Performance and Flexible Networking using Virtualization on</p>
    <p>Commodity Platforms</p>
    <p>Jinho Hwang, K. K. Ramakrishnan, Timothy Wood The George Washington University</p>
    <p>Rutgers University</p>
  </div>
  <div class="page">
    <p>High Performance Networking  Line Rate High Performance Machines</p>
    <p>Special HW + SW Very Expensive</p>
    <p>PacketShader [Han:Sigcomm:2010] GPU</p>
    <p>NetMap [Rizzo:ATC:2012] Commodity Servers</p>
    <p>Intel DPDK Commodity NICs</p>
    <p>Performance in Virtualized Platforms?</p>
    <p>NIC Host OS vSwitch</p>
    <p>vNIC Guest OS</p>
    <p>Guest User Space</p>
    <p>NIC</p>
    <p>Guest User Space</p>
    <p>(DPDK)</p>
    <p>NIC</p>
    <p>Guest User Space</p>
    <p>Host User Space</p>
    <p>(DPDK) P</p>
    <p>acket M ovem</p>
    <p>ent</p>
    <p>(a) Generic (b) SR-IOV (c) NetVM</p>
    <p>Need to overcome virtualization overheads</p>
    <p>Data center is virtualized</p>
  </div>
  <div class="page">
    <p>Network Functions Virtualization (NFV)</p>
    <p>Existing Network Functions</p>
    <p>Router Firewall Load</p>
    <p>Balancer</p>
    <p>CDN DPI WAN</p>
    <p>Acceler ator</p>
    <p>NFV-enabled Network Functions</p>
    <p>Virtualization Layer</p>
    <p>Need to provide high speed and low latency</p>
  </div>
  <div class="page">
    <p>Proxy</p>
    <p>Chained Functionality  Functions are often sequential</p>
    <p>Router Firewall DPI WAN</p>
    <p>Accelerator</p>
    <p>Virtualization Layer</p>
    <p>Need High Speed Inter-Function (VM) Communication</p>
    <p>Packet Packet</p>
  </div>
  <div class="page">
    <p>So, What Has NetVM Done?  NetVM is a platform for running complex network</p>
    <p>functionality at line-speed (10Gbps~) using commodity hardware  A virtualization-based high-speed packet</p>
    <p>delivery  Memory sharing framework for network data  A hypervisor-based switching  High speed inter-VM communication  Security domains</p>
  </div>
  <div class="page">
    <p>Outline  Motivations &amp; Contribution  Background  System Design  Evaluation  Conclusion &amp; Future Work</p>
  </div>
  <div class="page">
    <p>COTS and DPDK (Data Plane Development Kit)  COTS = commercial, off-the-shelf servers  DPDK is a set of optimized user space software libraries and</p>
    <p>drivers that can be used to accelerate packet processing on Intel architecture</p>
    <p>Linux</p>
    <p>User Applications</p>
    <p>H/W Platform</p>
    <p>Packet copy Interrupt Handling Systemcalls</p>
    <p>Generic DPDK</p>
    <p>Linux</p>
    <p>User Applications</p>
    <p>H/W Platform</p>
    <p>Buffer Mgmt.</p>
    <p>Ring Mgmt. Packet Class.</p>
    <p>Poll Mode</p>
    <p>Polling DMA</p>
  </div>
  <div class="page">
    <p>DPDK with Virtualization  Two Architectural Variations</p>
    <p>Flexible(dynamic) Configuration  Control over packet switching  Control over load-balancing  Has more overhead</p>
    <p>Max 63 virtual functions (tx/rx)  Static configuration  Inter-VM switch is limited per port  No control over packet switching  No control over load-balancing</p>
    <p>VM</p>
    <p>DPDK Hypervisor</p>
    <p>VM VM VM</p>
    <p>NIC</p>
    <p>Neither can achieve full line-rate network speed in VMs</p>
    <p>SR-IOV = Single Root I/O Virtualization</p>
    <p>VM DPDK VM VM VM DPDK DPDK DPDK</p>
    <p>NIC (SR-IOV)</p>
    <p>Pass-Through</p>
    <p>VM VM VM VM</p>
    <p>L2 Switch L2 Switch</p>
  </div>
  <div class="page">
    <p>Outline  Motivation &amp; Contribution  Background  System Design  Evaluation  Conclusion &amp; Future Work</p>
  </div>
  <div class="page">
    <p>NetVM System Overview</p>
    <p>NetVM (with DPDK) runs in hypervisor User Space  For zero packet copy, memory is shared for network data  Each VM has its own ring to receive/transmit a packet</p>
    <p>descriptor</p>
    <p>Hypervisor</p>
    <p>VM VM</p>
    <p>Memory Sharing</p>
    <p>NetVM</p>
    <p>APPs APPs</p>
    <p>Intel NIC</p>
  </div>
  <div class="page">
    <p>System Design Challenges 1. Zero-copy 2. A huge-page sharing 3. Lockless &amp; non-uniform memory</p>
    <p>architecture (NUMA) aware design 4. Security domains</p>
  </div>
  <div class="page">
    <p>Memory Copy Hazard  10Gbps = 14,880,952 packets/s (64 byte)  Each packet should be processed in 67 ns</p>
    <p>M ic ro se co nd</p>
    <p>p er 1 00 c al ls</p>
  </div>
  <div class="page">
    <p>Zero-Copy Packet Delivery  Packet directly DMAs into huge page memory  Applications in VM receive references (location) via shared ring</p>
    <p>buffers  Packet contents can be manipulated  Applications decide an action: chain to another VM, send out,</p>
    <p>discard</p>
    <p>Hypervisor User Space</p>
    <p>VM</p>
    <p>Huge Page Memory Sharing</p>
    <p>NetVM</p>
    <p>Applications</p>
    <p>Packet</p>
  </div>
  <div class="page">
    <p>Chained Packet Delivery  Packets are processed in a sequence/parallel  Applications in VMs pass packet references to other</p>
    <p>VM  Only one application can process a packet at a</p>
    <p>time (read/write)</p>
    <p>VM</p>
    <p>Hypervisor User Space</p>
    <p>VM</p>
    <p>Huge Page Memory Sharing</p>
    <p>NetVM</p>
    <p>Applications</p>
    <p>Packet</p>
    <p>Applications</p>
  </div>
  <div class="page">
    <p>Lockless &amp; NUMA-Aware Design  Locks significantly degrade packet transmission performance</p>
    <p>o Core-queue matching (between horizontal cores) and data structure separation (between vertical cores)</p>
    <p>With NUMA, reading local and remote memory alternatively invalidates local cache  cache misses o This is fraught with Intel Direct I/O (Sandy-bridge) o Process in aligned path in both hypervisor and VM</p>
    <p>Hypervisor</p>
    <p>VM#1 VM#2</p>
    <p>R R T T</p>
    <p>R R F F T T F F R R F F T T F F</p>
  </div>
  <div class="page">
    <p>Huge Page VA Mapping  Hypervisor is often unable to allocate consecutive physical</p>
    <p>huge pages and map to consecutive virtual addresses  But, VM can see a mapped huge memory, which makes huge</p>
    <p>pages consecutive  Offset Calculation (no looping)</p>
    <p>Pre-calculate locations of each huge page  When a packet is received, we can calculate an offset in one</p>
    <p>programming line without looping (only bit operation and array index)</p>
    <p>HP#3 HP#4 HP#1 HP#2</p>
    <p>HP#1 HP#2 HP#3 HP#4</p>
    <p>Host Huge Page VA Mapping</p>
    <p>VM Huge Page PCI Mapping</p>
    <p>Packet</p>
    <p>PacketOffset</p>
  </div>
  <div class="page">
    <p>Trusted and Non-trusted Domains  Virtualization should provide security guarantees among VMs  Provide a security boundary between trusted VMs and non</p>
    <p>trusted VMs  Non-trusted VMs can not see packets from NetVM  Groups of trusted VMs via huge page separation</p>
    <p>Hypervisor</p>
    <p>#1 Trusted VMs #2 Trusted VMs Non-Trusted VMs</p>
    <p>VM VM VM VM VM VM</p>
    <p>Memory Sharing</p>
    <p>Memory Sharing</p>
    <p>NetVM</p>
    <p>Generic Net. Path</p>
  </div>
  <div class="page">
    <p>NetVM Implementation</p>
    <p>NetVM Manager o Hypervisor user space</p>
    <p>application + QEMU chardev interface</p>
    <p>NetVM Core o Hypervisor user space</p>
    <p>application + DPDK</p>
    <p>Emulated PCI (QEMU) o KVM hardware</p>
    <p>emulation</p>
    <p>NetLib o VM user space library +</p>
    <p>Kernel module</p>
    <p>Linux / KVM User Space</p>
    <p>User</p>
    <p>Kernel</p>
    <p>NIC</p>
    <p>NetVM UIO</p>
    <p>PCI Device</p>
    <p>Rings Bar#0 Bar#1</p>
    <p>Huge Pages</p>
    <p>User Apps NetLib</p>
    <p>Huge Pages</p>
    <p>chardev (socket)</p>
    <p>NetVM Manager</p>
    <p>NetVM Core (DPDK)</p>
    <p>Q E</p>
    <p>M U</p>
    <p>V M</p>
    <p>KVM + DPDK</p>
  </div>
  <div class="page">
    <p>Outline  Motivation &amp; Contribution  Background  System Design  Evaluation  Conclusion &amp; Future Work</p>
  </div>
  <div class="page">
    <p>Evaluation SeMings  2 x Nehalem-architecture (old architecture) machines  82599 Intel NIC  2 processors * 6 Cores (no hyperthreading)</p>
    <p>2 cores for receiving packets  4 cores for transmitting/forwarding packets  Rest of cores for VM</p>
    <p>Total 8GB Hugepages (4GB per each processor)  Only 1 port(out of 2 ports) is used  Apps: L2/L3 Forwarder, Click Userspace Router, Firewall  Packet Generator: DPDK-Pktgen (Wind River Systems, Inc.)</p>
    <p>DPDK Server</p>
    <p>#1</p>
    <p>DPDK Server</p>
    <p>#2</p>
    <p>DUT (Device Under Test)</p>
    <p>Traffic Generator</p>
  </div>
  <div class="page">
    <p>High Speed Packet Delivery  64-byte packets, 10Gbps = 14,880,952 packets/s</p>
    <p>Fo rw</p>
    <p>ar di</p>
    <p>ng R</p>
    <p>at e</p>
    <p>(K pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>Input Rate (Kpackets/s)</p>
    <p>NetVM Click-NetVM SR-IOV-VM</p>
    <p>Click-Native-Linux</p>
  </div>
  <div class="page">
    <p>Packet Size vs. Forwarding Rate</p>
    <p>Fo rw</p>
    <p>ar di</p>
    <p>ng R</p>
    <p>at e</p>
    <p>(K pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>Packet Size (Bytes)</p>
    <p>NetVM Click-NetVM</p>
    <p>Theoretical Line (10Gbps)</p>
  </div>
  <div class="page">
    <p>Inter-VM Forwarding</p>
    <p>C ha</p>
    <p>in ed</p>
    <p>F or</p>
    <p>w ar</p>
    <p>di ng</p>
    <p>R at</p>
    <p>e (K</p>
    <p>pa ck</p>
    <p>et s/</p>
    <p>s)</p>
    <p>Number of Chained VMs</p>
    <p>NetVM NetVM (60% Partial Chaining)</p>
    <p>SR-IOV VM VM</p>
    <p>Memory Sharing</p>
    <p>NetVM</p>
    <p>A mix of L2/L3 forwarding and custom firewall (address filtering)</p>
  </div>
  <div class="page">
    <p>Switching Flexibility</p>
    <p>Fo rw</p>
    <p>ar di</p>
    <p>ng R</p>
    <p>at e</p>
    <p>(K pa</p>
    <p>ck et</p>
    <p>s/ s)</p>
    <p>Number of VMs</p>
    <p>Click-NetVM SR-IOV</p>
    <p>State-based load balancing (queue load)</p>
  </div>
  <div class="page">
    <p>Outline  Motivation &amp; Contribution  Background  System Design  Evaluation  Conclusion &amp; Future Work</p>
  </div>
  <div class="page">
    <p>Conclusion  NetVM, a high performance network framework in</p>
    <p>virtualized commodity platforms  NetVM provides:</p>
    <p>o a virtualization-based high-speed packet delivery o memory sharing framework for network data o a hypervisor-based switching o high speed inter-VM communication o security domains</p>
  </div>
  <div class="page">
    <p>Future Work  Scale to next generation machine</p>
    <p>o Sandy-bridge and Ivy-bridge processors have significant additional hardware capabilities  faster cache, data direct I/O technology, faster AES instructions, PCIe* Gen 3, IOMMU and Enhanced QPI</p>
    <p>Building edge routers with NetVM o We recognize that the capabilities of NetVM to act as a network</p>
    <p>element, such as an edge router in an ISP context</p>
    <p>SDN integration o We aim to integrate Open Flow into our NetVM Manager</p>
    <p>Server type applications o NetVM focuses on middle- box type applications, but end-host</p>
    <p>applications can also run in the NetVM platform</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
