<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ParmeSan Sanitizer-guided Greybox Fuzzing</p>
    <p>Sebastian sterlund, Kaveh Razavi, Herbert Bos, Cristiano Giuffrida Vrije Universiteit Amsterdam</p>
  </div>
  <div class="page">
    <p>In fuzzing: Coverage == Bugs?</p>
    <p>Can we do better?</p>
  </div>
  <div class="page">
    <p>In fuzzing: Coverage == Bugs?</p>
    <p>Can we do better? Actively direct the fuzzing towards bugs</p>
  </div>
  <div class="page">
    <p>In fuzzing: Coverage == Bugs?</p>
    <p>Can we do better? Actively direct the fuzzing towards bugs</p>
    <p>=&gt; ~40% faster at finding bugs</p>
  </div>
  <div class="page">
    <p>How do we test for bugs?</p>
  </div>
  <div class="page">
    <p>How do we test for bugs? Sanitizers</p>
  </div>
  <div class="page">
    <p>Sanitizers</p>
    <p>Run-time checks for bugs</p>
    <p>Add some instrumentation</p>
    <p>Plenty of these available:</p>
    <p>ASan</p>
    <p>UBSan</p>
    <p>TySan</p>
    <p>MyVeryNicheSan</p>
  </div>
  <div class="page">
    <p>Sanitizers for fuzzing</p>
  </div>
  <div class="page">
    <p>Sanitizers for fuzzing</p>
    <p>Fuzzers get better -&gt; harder to find new crashes</p>
  </div>
  <div class="page">
    <p>Sanitizers for fuzzing</p>
    <p>Fuzzers get better -&gt; harder to find new crashes</p>
    <p>Nowadays very common to use sanitizers when fuzzing</p>
  </div>
  <div class="page">
    <p>Sanitizers for fuzzing</p>
    <p>Fuzzers get better -&gt; harder to find new crashes</p>
    <p>Nowadays very common to use sanitizers when fuzzing</p>
    <p>Are able to catch most types of bugs</p>
  </div>
  <div class="page">
    <p>Sanitizers for fuzzing</p>
    <p>Fuzzers get better -&gt; harder to find new crashes</p>
    <p>Nowadays very common to use sanitizers when fuzzing</p>
    <p>Are able to catch most types of bugs</p>
    <p>Lets target these sanitizer checks!</p>
  </div>
  <div class="page">
    <p>ParmeSan Pipeline</p>
    <p>Ta ge ac i i i</p>
    <p>Pa eSa F e</p>
    <p>Sa i i e</p>
    <p>P g a</p>
    <p>G a h e ac</p>
    <p>I e ed Bi a ie</p>
    <p>I e</p>
    <p>S a ic CFG</p>
    <p>Ta ge</p>
    <p>Seed Inp s</p>
    <p>D a ic CFG</p>
    <p>E I</p>
    <p>Offline</p>
    <p>Online</p>
  </div>
  <div class="page">
    <p>Target acquisition</p>
  </div>
  <div class="page">
    <p>Target acquisition</p>
    <p>Target branches where sanitizers add instrumentation</p>
  </div>
  <div class="page">
    <p>Target acquisition</p>
    <p>Target branches where sanitizers add instrumentation</p>
    <p>llvm-diff to find locations</p>
  </div>
  <div class="page">
    <p>Target acquisition</p>
    <p>Target branches where sanitizers add instrumentation</p>
    <p>llvm-diff to find locations</p>
    <p>Generic, works for any sanitizer</p>
  </div>
  <div class="page">
    <p>Sanitizer instrumentation</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>Coverage-guided</p>
  </div>
  <div class="page">
    <p>Coverage-guided</p>
  </div>
  <div class="page">
    <p>Coverage-guided</p>
  </div>
  <div class="page">
    <p>Coverage-guided</p>
  </div>
  <div class="page">
    <p>After a lot of effort!</p>
    <p>Coverage-guided</p>
  </div>
  <div class="page">
    <p>Coverage-guided</p>
  </div>
  <div class="page">
    <p>Directed</p>
    <p>N</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>Directed</p>
    <p>d=N+1</p>
    <p>N</p>
    <p>N</p>
    <p>d=1</p>
  </div>
  <div class="page">
    <p>Directed</p>
    <p>d=N+1</p>
    <p>N</p>
    <p>N</p>
    <p>d=1</p>
  </div>
  <div class="page">
    <p>Directed</p>
    <p>d=N+1</p>
    <p>N</p>
    <p>N d=1</p>
  </div>
  <div class="page">
    <p>After some effort!</p>
    <p>Directed</p>
    <p>d=N+1</p>
    <p>N</p>
    <p>N</p>
    <p>d=1</p>
    <p>d=1</p>
  </div>
  <div class="page">
    <p>After some effort!</p>
    <p>Directed</p>
    <p>d=N+1</p>
    <p>N</p>
    <p>N</p>
    <p>d=1</p>
    <p>d=1</p>
    <p>No need to focus on this</p>
  </div>
  <div class="page">
    <p>What about overly-eager sanitizers??</p>
    <p>ehm ASan</p>
  </div>
  <div class="page">
    <p>ASan targets</p>
    <p>N</p>
    <p>N</p>
  </div>
  <div class="page">
    <p>ASan targets</p>
    <p>N</p>
    <p>N</p>
    <p>We might as well do coverage-guided fuzzing!!!</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
    <p>Targe</p>
    <p>Targe</p>
    <p>Ho a h Targe</p>
    <p>Targe</p>
    <p>En</p>
    <p>E i</p>
    <p>Pr ned arge</p>
    <p>Pr ned arge</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
    <p>Complexity-based pruning</p>
    <p>Targe</p>
    <p>Targe</p>
    <p>Ho a h Targe</p>
    <p>Targe</p>
    <p>En</p>
    <p>E i</p>
    <p>Pr ned arge</p>
    <p>Pr ned arge</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
    <p>Complexity-based pruning</p>
    <p>Intuition: more instrumentation -&gt; more complex -&gt; more likely to have bugs</p>
    <p>Targe</p>
    <p>Targe</p>
    <p>Ho a h Targe</p>
    <p>Targe</p>
    <p>En</p>
    <p>E i</p>
    <p>Pr ned arge</p>
    <p>Pr ned arge</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
    <p>Complexity-based pruning</p>
    <p>Intuition: more instrumentation -&gt; more complex -&gt; more likely to have bugs</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
    <p>Complexity-based pruning</p>
    <p>Intuition: more instrumentation -&gt; more complex -&gt; more likely to have bugs</p>
  </div>
  <div class="page">
    <p>Target pruning</p>
    <p>Profiling-based pruning</p>
    <p>Intuition: prefer cold code</p>
    <p>Hot paths are reached anyways</p>
    <p>Complexity-based pruning</p>
    <p>Intuition: more instrumentation -&gt; more complex -&gt; more likely to have bugs</p>
  </div>
  <div class="page">
    <p>How to reach these targets? Solve branches (using DFA) + distance prioritization</p>
  </div>
  <div class="page">
    <p>ParmeSan fuzzer</p>
  </div>
  <div class="page">
    <p>ParmeSan fuzzer</p>
    <p>Based on Angora</p>
  </div>
  <div class="page">
    <p>ParmeSan fuzzer</p>
    <p>Based on Angora</p>
    <p>Contains a fuzzing queue of tuples (conditional, seed) sorted by (#runs)</p>
  </div>
  <div class="page">
    <p>ParmeSan fuzzer</p>
    <p>Based on Angora</p>
    <p>Contains a fuzzing queue of tuples (conditional, seed) sorted by (#runs)</p>
    <p>ParmeSan</p>
  </div>
  <div class="page">
    <p>ParmeSan fuzzer</p>
    <p>Based on Angora</p>
    <p>Contains a fuzzing queue of tuples (conditional, seed) sorted by (#runs)</p>
    <p>ParmeSan</p>
    <p>Sorted by (#runs, distance)</p>
  </div>
  <div class="page">
    <p>ParmeSan fuzzer</p>
    <p>Based on Angora</p>
    <p>Contains a fuzzing queue of tuples (conditional, seed) sorted by (#runs)</p>
    <p>ParmeSan</p>
    <p>Sorted by (#runs, distance)</p>
    <p>Distance is calculated using a dynamic CFG component</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
    <p>Existing DGF use static distance instrumentation (AFLGo)</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
    <p>Existing DGF use static distance instrumentation (AFLGo)</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
    <p>Existing DGF use static distance instrumentation (AFLGo)</p>
    <p>Targets/ paths might change over time</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
    <p>Existing DGF use static distance instrumentation (AFLGo)</p>
    <p>Targets/ paths might change over time</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
    <p>Existing DGF use static distance instrumentation (AFLGo)</p>
    <p>Targets/ paths might change over time</p>
    <p>ParmeSan allows for augmenting the CFG/ distance calculation at runtime</p>
  </div>
  <div class="page">
    <p>Dynamic CFG</p>
    <p>Existing DGF use static distance instrumentation (AFLGo)</p>
    <p>Targets/ paths might change over time</p>
    <p>ParmeSan allows for augmenting the CFG/ distance calculation at runtime</p>
    <p>Fix targets of indirect calls</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Sprinkle on some data-flow analysis =&gt; better at reaching targets (~290% faster)</p>
    <p>Improves latency to expose bugs by ~40%</p>
  </div>
  <div class="page">
    <p>Side-effect Chosen sanitizer impacts the</p>
    <p>type of bugs found</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Off-the-shelf sanitizers already commonly used when fuzzing</p>
    <p>Try to actively target sanitizer instrumentation points</p>
    <p>Sprinkle on data-flow analysis and dynamic distance calculation to improve directed fuzzing</p>
    <p>Combine automatic target acquisition + these improvements</p>
    <p>=&gt; Find bugs faster</p>
  </div>
  <div class="page">
    <p>ParmeSan Sanitizer-guided Greybox Fuzzing</p>
    <p>Sebastian sterlund, Kaveh Razavi, Herbert Bos, Cristiano Giuffrida Vrije Universiteit Amsterdam</p>
    <p>github.com/vusec/parmesan s.osterlund@vu.nl</p>
    <p>@sirmc</p>
  </div>
</Presentation>
