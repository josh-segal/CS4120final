<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ironclad Apps: End-to-End Security via Automated Full-System Verification</p>
    <p>Danfeng Zhang</p>
    <p>Arjun NarayanJay LorchChris Hawblitzel Jon Howell</p>
    <p>Bryan Parno Brian Zill</p>
  </div>
  <div class="page">
    <p>Online and Mobile Security</p>
    <p>Chase Online, the Chase Mobile app and the Chase Mobile website use Secure Socket Layer (SSL) technology</p>
    <p>We periodically review our operations and</p>
    <p>business practices to make sure they comply with the corporate policies and procedures we follow to protect confidential information</p>
  </div>
  <div class="page">
    <p>An Ironclad app guarantees to remote parties that every instruction it executes adheres to</p>
    <p>a high-level security spec.</p>
    <p>My personal data will not be misused</p>
    <p>My password will never leak</p>
  </div>
  <div class="page">
    <p>Ironclad combines:</p>
    <p>push ebp mov ebp, esp sub esp, 4 mov eax, 8</p>
    <p>Late launch</p>
    <p>Trusted Computing</p>
    <p>Software verification</p>
  </div>
  <div class="page">
    <p>Ironclad combines:</p>
    <p>push ebp mov ebp, esp sub esp, 4 mov eax, 8</p>
    <p>Late launch</p>
    <p>Trusted Computing</p>
    <p>Software verification</p>
    <p>Secure Remote Equivalence</p>
    <p>Entire software</p>
    <p>stack</p>
    <p>Reasonable effort</p>
  </div>
  <div class="page">
    <p>push ebp mov ebp, esp sub esp, 4 mov eax, 8</p>
    <p>Verification implies:  No buffer overflows</p>
    <p>No code injection</p>
    <p>No type-safety flaws</p>
    <p>No information disclosures</p>
    <p>No crypto implementation flaws</p>
    <p>Absence of side channels</p>
    <p>Liveness</p>
    <p>Physical security</p>
    <p>We dont prove:</p>
    <p>We always know what the app will do with private data!</p>
  </div>
  <div class="page">
    <p>push ebp mov ebp, esp sub esp, 4 mov eax, 8</p>
    <p>Verification goals  End-to-end security</p>
    <p>Complete</p>
    <p>Low-level</p>
    <p>Rapid development</p>
    <p>Non-goal: Verify existing code</p>
    <p>Long-term: Performance matches unsafe code</p>
  </div>
  <div class="page">
    <p>Verification methodology</p>
    <p>Highlevel spec</p>
    <p>Verifiable, high-level implementation</p>
    <p>Ironclad spec translator</p>
    <p>Ironclad compiler</p>
    <p>Lowlevel spec</p>
    <p>Verifiable assembly language</p>
    <p>Verifier Assembler</p>
    <p>+ Linker</p>
    <p>predicate IsPrime(p:int) { 2 &lt;= p</p>
    <p>&amp;&amp; forall x :: 2 &lt;= x &lt; p ==&gt; p % x != 0 }</p>
    <p>procedure CheckPrimality(p:int) returns (b:bool) requires p &gt;= 0; ensures b == IsPrime(p);</p>
    <p>{ var divisor := 2; while divisor &lt; p</p>
    <p>invariant 2 &lt;= divisor &lt;= p; {</p>
    <p>...</p>
    <p>call edx := Mov(2); loop: invariant 2 &lt;= edx &lt; eax; invariant MemInv(...); ... if (edx &gt;= eax) { goto loopEnd; }</p>
    <p>mov edx, 2</p>
    <p>loop: ...</p>
    <p>cmp edx, eax jae loopEnd</p>
    <p>= Untrusted</p>
    <p>= Trusted</p>
  </div>
  <div class="page">
    <p>Verification methodology: Benefits</p>
    <p>Highlevel spec</p>
    <p>Verifiable, high-level implementation</p>
    <p>Ironclad compiler</p>
    <p>Lowlevel spec</p>
    <p>Verifiable assembly language</p>
    <p>Verifier Assembler</p>
    <p>+ Linker</p>
    <p>Ironclad spec translatorSimple and</p>
    <p>declarative</p>
    <p>Rapid development</p>
    <p>Low-level verification</p>
    <p>Arbitrarily complex</p>
  </div>
  <div class="page">
    <p>Hardware specs</p>
    <p>procedure instr_Add(..., x:reg, y:reg) ensures x := (x + y) % 0x100000000;</p>
    <p>...</p>
    <p>type core = core(regs:[int]int, eip:int, ..., segments, paging, ...); type machine = machine(cores:[int]core, mem:[int]int, io:IOState);</p>
    <p>Writing trustworthy specifications</p>
    <p>Idiomatic specification</p>
    <p>+ attestation)</p>
  </div>
  <div class="page">
    <p>Spec reviews</p>
    <p>Idiomatic specification</p>
    <p>Writing trustworthy specifications</p>
    <p>Hardware specs</p>
    <p>App spec</p>
    <p>Lib specs</p>
    <p>OS specs</p>
    <p>predicate ValidTransition(old_state:NotaryState, new_state:NotaryState, request:Request, response:Response, ...)</p>
    <p>{ match request</p>
    <p>... case AdvanceCounter =&gt;</p>
    <p>response.AdvanceCntrResponse? &amp;&amp; new_state.ctr == old_state.ctr + 1 &amp;&amp; response.sig == RSA_Sign(old_state.ctr, request) &amp;&amp; ...</p>
    <p>function SHA256(messageBits:seq&lt;int&gt;) : seq&lt;int&gt; requires |messageBits| &lt; power2(64); requires IsBitSeq(messageBits);</p>
    <p>{</p>
    <p>... }</p>
  </div>
  <div class="page">
    <p>App spec</p>
    <p>Lib specs</p>
    <p>Hardware specs</p>
    <p>Core MathTPM DriverNet Driver</p>
    <p>UDP/IP Datatypes RSA</p>
    <p>Ethernet BigNumSHA-256</p>
    <p>Std. Lib App Common</p>
    <p>App</p>
    <p>Late launch</p>
    <p>IOMMUSegments GC Device</p>
    <p>IO OS</p>
    <p>specs</p>
    <p>Architecture</p>
    <p>Verve++</p>
  </div>
  <div class="page">
    <p>Challenge: Whole-system verification</p>
    <p>procedure CheckPrimality(p:int) returns (b:bool) requires p &gt;= 0; ensures b == IsPrime(p);</p>
    <p>{ var divisor := 2; while divisor &lt; p</p>
    <p>invariant 2 &lt;= divisor &lt;= p; {</p>
    <p>...</p>
    <p>Functional verification</p>
    <p>(correctness)</p>
    <p>procedure instr_outb(..., x:reg) requires ????</p>
    <p>push ebp mov ebp, esp sub esp, 4 mov eax, 8</p>
    <p>F( ) all</p>
    <p>possible inputs</p>
    <p>all permitted</p>
    <p>output words</p>
  </div>
  <div class="page">
    <p>Solution: Relational verification</p>
    <p>procedure instr_inb(..., x:reg) ensures public(x);</p>
    <p>procedure instr_outb(..., x:reg) requires public(x);</p>
    <p>push ebp mov ebp, esp sub esp, 4 mov eax, 8</p>
    <p>Declassifier</p>
    <p>Declassify X by proving the abstract app would have output X</p>
  </div>
  <div class="page">
    <p>Rapid verification</p>
    <p>Automated tools Modular verification</p>
    <p>Shared verification</p>
    <p>IronBuild</p>
  </div>
  <div class="page">
    <p>Ironclad Apps</p>
    <p>Insert datum</p>
    <p>Query</p>
    <p>Database</p>
    <p>Privacy budget</p>
    <p>Key pair</p>
    <p>Password Protector Notary</p>
    <p>Trusted Incrementer Differentially Private DB</p>
    <p>password 123456 12345678 abc123 monkey qwerty</p>
    <p>letmein dragon 111111 baseball iloveyou trustno1</p>
  </div>
  <div class="page">
    <p>Lessons learned</p>
    <p>Automated  Automatic</p>
    <p>Verification works!</p>
    <p>Non-recursive functions</p>
    <p>Addition &amp; subtraction</p>
    <p>Mul/div/mod by small constants</p>
    <p>Forall/exists</p>
    <p>Arrays/seqs</p>
    <p>Recursive functions</p>
    <p>General mul/div/mod</p>
    <p>Core MathTPM DriverNet Driver</p>
    <p>UDP/IP Datatypes RSA</p>
    <p>Ethernet BigNumSHA-256</p>
    <p>Std. Lib App Common</p>
    <p>App</p>
    <p>Late launch</p>
    <p>IOMMUSegments GC Device</p>
    <p>IO</p>
    <p>How to write libraries</p>
    <p>Benefits of refinement types</p>
    <p>Opaque attributes</p>
    <p>Custom math library</p>
  </div>
  <div class="page">
    <p>OS</p>
    <p>TPM Driver</p>
    <p>Network Driver</p>
    <p>UDP/IP/Ethernet</p>
    <p>Std. Lib (bytes, words, arrays)</p>
    <p>Math Lib</p>
    <p>BigInt Lib</p>
    <p>Crypto (SHA, HMAC, RSA)</p>
    <p>Apps Average 4.8 : 1</p>
    <p>Proof hints : Implementation LoC</p>
    <p>Previously &gt; 25 : 1</p>
    <p>Eval: Proof burden ~3 person-years Previously 22+ pys</p>
    <p>Ratio</p>
  </div>
  <div class="page">
    <p>Eval: System size</p>
    <p>OS</p>
    <p>TPM Driver</p>
    <p>Network Driver</p>
    <p>UDP/IP/Ethernet</p>
    <p>Std. Lib (bytes, words, arrays)</p>
    <p>Math Lib</p>
    <p>BigInt Lib</p>
    <p>Crypto (SHA, HMAC, RSA)</p>
    <p>Apps</p>
    <p>Trusted Spec Implementation</p>
    <p>HardwareSoftware</p>
    <p>Lines</p>
  </div>
  <div class="page">
    <p>ms</p>
    <p>RSA private (1024)</p>
    <p>ns/B</p>
    <p>SHA-256</p>
    <p>Eval: Performance</p>
    <p>Cut by 84%</p>
    <p>Within 30% of OpenSSL</p>
    <p>Improved by 8300x</p>
    <p>Still 22x too slow</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Early security kernels  Examples: KVM/370, VAX VMM, SCOMP, GEMSOS</p>
    <p>Formally specified, but no connection to implementation</p>
    <p>Recent verified systems  Examples: seL4, VCC, PROSPER, CompCert, Jitk</p>
    <p>Focus on one layer</p>
    <p>Many verify C code =&gt; Good performance</p>
    <p>Typically less automation =&gt; More human proof burden</p>
  </div>
  <div class="page">
    <p>Conclusions  Ironclad guarantees end-to-end security to remote</p>
    <p>parties: Every instruction meets the apps security spec</p>
    <p>Achieved via:  New and modified tools</p>
    <p>A methodology for rapid verification of systems software</p>
    <p>Verification of systems code is quite feasible!</p>
    <p>http://research.microsoft.com/ironclad</p>
    <p>Thank you! ironclad@microsoft.com</p>
  </div>
</Presentation>
