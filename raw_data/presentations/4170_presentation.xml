<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Learning Term-weighting Functions for Similarity Measures</p>
    <p>Scott Wen-tau Yih Microsoft Research</p>
  </div>
  <div class="page">
    <p>Applications of Similarity Measures Query Suggestion</p>
    <p>How similar are they?</p>
    <p>mariners vs. seattle mariners mariners vs. 1st mariner bank</p>
    <p>query</p>
    <p>mariners</p>
  </div>
  <div class="page">
    <p>Applications of Similarity Measures Ad Relevance</p>
    <p>query</p>
    <p>movie theater tickets</p>
  </div>
  <div class="page">
    <p>Similarity Measures based on TFIDF Vectors Digital Camera Review</p>
    <p>The new flagship of Canons S-series, PowerShot S80 digital camera, incorporates 8 megapixels for shooting still images and a movie mode that records an impressive 1024 x 768 pixels.</p>
    <p>vp = { digital: 1.35, camera: 0.89, review: 0.32,  }</p>
    <p>Dp tf (review, Dp)  idf (review)</p>
    <p>Sim(Dp,Dq)  fsim(vp,vq)</p>
    <p>fsim could be cosine, overlap, Jaccard, etc.</p>
  </div>
  <div class="page">
    <p>Vector-based Similarity Measures Pros &amp; Cons</p>
    <p>Advantages Simple &amp; Efficient Concise representation Effective in many applications</p>
    <p>Issues Not trivial to adapt to target domain</p>
    <p>Lots of variations of TFIDF formulas</p>
    <p>Not clear how to incorporate other information e.g., term position, query log frequency, etc.</p>
  </div>
  <div class="page">
    <p>Approach: Learn Term-weighting Functions</p>
    <p>TWEAK  Term-weighting Learning Framework Instead of a fixed TFIDF formula, learn the termweighting functions</p>
    <p>Preserve the engineering advantages of the vector-based similarity measures Able to incorporate other term information and fine tune the similarity measure Flexible in choosing various loss functions to match the true objectives in the target applications</p>
  </div>
  <div class="page">
    <p>Outline Introduction Problem Statement &amp; Model</p>
    <p>Formal definition Loss functions</p>
    <p>Experiments Query suggestion Ad page relevance</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Vector-based Similarity Measures Formal Definition</p>
    <p>Compute the similarity between Dp and Dq Vocabulary: Term-vector: Term-weighting score:</p>
    <p>vp vq n pS</p>
    <p>sim  ,</p>
    <p>= {1 , 2 ,  ,  }  = {</p>
    <p>}</p>
    <p>tw( ,  )</p>
  </div>
  <div class="page">
    <p>TFIDF Cosine Similarity</p>
    <p>Use the same fsim(, ) (i.e., cosine)</p>
    <p>Linear term-weighting function</p>
    <p>vp vq n pS</p>
    <p>sim  ,    , =</p>
    <p>tw ,   ,  log</p>
    <p>( )</p>
    <p>tw ,      ( ,  )</p>
  </div>
  <div class="page">
    <p>Learning Similarity Metric Training examples: document pairs</p>
    <p>Loss functions Sum-of-squares error</p>
    <p>Log-loss</p>
    <p>Smoothing</p>
    <p>1 , 1 , 1,  ,  ,  ,</p>
    <p>sse = 1 2</p>
    <p>, ( ,  ) 2</p>
    <p>m</p>
    <p>k</p>
    <p>log =   log   ,   (1 ) m</p>
    <p>k</p>
    <p>1  log   ,</p>
    <p>2 2</p>
  </div>
  <div class="page">
    <p>Learning Preference Ordering Training examples: pairs of document pairs</p>
    <p>LogExpLoss [Dekel et al. NIPS-03]</p>
    <p>Upper bound the pairwise accuracy</p>
    <p>1 ,  1 , 1,  ,  ,   ,</p>
    <p>=   ,</p>
    <p>,  =    ,</p>
    <p>=    ,       ,</p>
    <p>=  log(1 + exp(y   1  y</p>
    <p>=1</p>
    <p>))</p>
  </div>
  <div class="page">
    <p>Outline Introduction Problem Definition &amp; Model</p>
    <p>Term-weighting functions Objective functions</p>
    <p>Experiments Query suggestion Ad page relevance</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Experiment  Query Suggestion Data: Query suggestion dataset</p>
    <p>[Metzler et al. 07; Yih&amp;Meek 07]</p>
    <p>|Q| = 122, |(Q,S)| = 4852; {Ex,Good} vs. {Fair,Bad}</p>
    <p>Query Suggestion Label</p>
    <p>shell oil credit card shell gas cards Excellent</p>
    <p>shell oil credit card texaco credit card Fair</p>
    <p>tarrant county college fresno city college Bad</p>
    <p>tarrant county college dallas county schools Good</p>
  </div>
  <div class="page">
    <p>Term Vector Construction and Features Query expansion of x using a search engine</p>
    <p>Issue the query x to a search engine Concatenate top-n search result snippets</p>
    <p>Titles and summaries of top-n returned documents</p>
    <p>Features (of each term w.r.t. the document) Term Frequency, Capitalization, Location Document Frequency, Query Log Frequency</p>
  </div>
  <div class="page">
    <p>Results  Query Suggestion</p>
    <p>Series1 Series2 Series3 Series4</p>
  </div>
  <div class="page">
    <p>Experiment  Ad Page Relevance</p>
    <p>Data: a random sample of queries and ad landing pages collected during 2008</p>
    <p>Collected 13,341 query/page pairs with reliable labels (8,309  relevant; 5,032  irrelevant)</p>
    <p>Apply the same query expansion on queries</p>
    <p>Additional HTML Features Hypertext, URL, Title Meta-keywords, Meta-Description</p>
  </div>
  <div class="page">
    <p>Results  Ad Page Relevance Features AUC</p>
    <p>TFIDF 0.794</p>
    <p>TF&amp;DF 0.806</p>
    <p>Plaintext 0.832</p>
    <p>HTML 0.855</p>
    <p>Preference order learning on different feature sets</p>
    <p>Series1 Series3 Series5 Series7</p>
  </div>
  <div class="page">
    <p>Results  Ad Page Relevance</p>
    <p>Features AUC</p>
    <p>TFIDF 0.794</p>
    <p>TF&amp;DF 0.806</p>
    <p>Plaintext 0.832</p>
    <p>HTML 0.855</p>
    <p>Preference order learning on different feature sets</p>
  </div>
  <div class="page">
    <p>Related Work Siamese neural network framework</p>
    <p>Vectors of objects being compared are generated by two-layer neural networks Applications: fingerprint matching, face matching TWEAK can be viewed as a single-layer neural network with many (vocabulary size) output nodes</p>
    <p>Learning directly the term-weighting scores [Bilenko&amp;Mooney 03] May work for limited vocabulary size</p>
    <p>Learning to combine multiple similarity measures [Yih&amp;Meek 07] Features of each pair: similarity scores from different measures</p>
    <p>Complementary to TWEAK</p>
  </div>
  <div class="page">
    <p>Future Work  Other Applications Near-duplicate detection</p>
    <p>Existing methods (e.g., shingles, I-Match) Create hash code of n-grams in document as fingerprints Detect duplicates when identical fingerprints are found</p>
    <p>Learn which fingerprints are important</p>
    <p>Paraphrase recognition Vector-based similarity for surface matching Deep NLP analysis may be needed and encoded as features for sentence pairs</p>
  </div>
  <div class="page">
    <p>Future Work  Model Improvement</p>
    <p>Learn additional weights on terms Create an indicator feature for each term Create a two-layer neural network, where each term is a node; learn the weight of each term as well</p>
    <p>A joint model for term-weighting learning and similarity function (e.g., kernel) learning</p>
    <p>The final similarity function combines multiple similarity functions and incorporates pair-level features The vector construction and term-weighting scores are trained using TWEAK</p>
  </div>
  <div class="page">
    <p>Conclusions TWEAK: A term-weighting learning framework for improving vector-based similarity measures Given labels of text pairs, learns the term-weighting function</p>
    <p>A principled way to incorporate more information and adapt to target applications Can replace existing TFIDF methods directly Flexible in using various loss functions</p>
    <p>Potential for more applications and model enhancement</p>
  </div>
</Presentation>
