<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimizing Data Partitioning for Data-Parallel Computing</p>
    <p>Qifa Ke, Vijayan Prabhakaran, Yinglian Xie, Yuan Yu</p>
    <p>Jingyue Wu, Junfeng Yang</p>
    <p>Microsoft Research Silicon Valley Columbia University</p>
  </div>
  <div class="page">
    <p>Partition Data for Data-Parallel Computing</p>
    <p>Data partitioning controls the degree of parallelism  What partition function to choose?</p>
    <p>Hash partition, range partition, ?</p>
    <p>How many partitions to generate?  100, 1000, 10000, .?</p>
    <p>Data partitioning performance and costs</p>
    <p>// 270 GB input data</p>
    <p>var output = input.GroupBy(x =&gt; x.UserId) .Select(g =&gt; GetStats(g))</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Problem 1: Do We have a Skew?</p>
    <p>Data skew and computation skew</p>
    <p>Partition ID</p>
    <p>F ra</p>
    <p>c ti o</p>
    <p>n o</p>
    <p>f D</p>
    <p>a ta</p>
    <p>/C o</p>
    <p>m p</p>
    <p>u ta</p>
    <p>ti o</p>
    <p>n</p>
    <p>Partition Size</p>
    <p>// process 20 GB images in 100 partitions</p>
    <p>var output = Imgs.Select( x =&gt; ProcessImages (x))</p>
  </div>
  <div class="page">
    <p>Problem 1: Do We have a Skew?</p>
    <p>Image processing time depends on both image and ProcessImage():  Number of images  Image features ProcessImage()is targeting to compute</p>
    <p>Partition ID</p>
    <p>F ra</p>
    <p>c ti o</p>
    <p>n o</p>
    <p>f D</p>
    <p>a ta</p>
    <p>/C o</p>
    <p>m p</p>
    <p>u ta</p>
    <p>ti o</p>
    <p>n</p>
    <p>Partition Size</p>
    <p>Computation Time</p>
    <p>Data skew and computation skew</p>
    <p>// process 20 GB images in 100 partitions</p>
    <p>var output = Imgs.Select(x=&gt;ProcessImages (x))</p>
  </div>
  <div class="page">
    <p>Problem 2: Whats Optimal?</p>
    <p>Balanced workload  optimal performance  Tradeoff: workload vs. cross-node traffic</p>
    <p>// construct a user-user graph for botnet deteciton</p>
    <p>var records = input1.Apply(x =&gt; SelectRecords(x)).HashPartition(x=&gt;x.label, nump); var output = input1.Apply(records, (x,y) =&gt; ConstructGraph(x,y));</p>
  </div>
  <div class="page">
    <p>Optimal Data Partitioning</p>
    <p>Performance and cost metrics  Job latency</p>
    <p>Number of processes</p>
    <p>Memory consumption</p>
    <p>Disk and network I/O</p>
    <p>Given code and data, can we generate a data partitioning scheme to optimize performance, without running code on whole data set?</p>
  </div>
  <div class="page">
    <p>Why not DB Solutions</p>
    <p>Need to understand both code and data</p>
    <p>Programming model</p>
    <p>Predefined operators (e.g., select, join) vs. arbitrary user-defined functions (UDF)</p>
    <p>Data model</p>
    <p>Structured tables vs. unstructured data</p>
    <p>Static, indexed data vs. dynamic dataset</p>
    <p>Minimize intermediate disk writes vs. using disk as communication channel</p>
  </div>
  <div class="page">
    <p>Code Analysis</p>
    <p>Challenges: user defined functions (UDF)  How data is accessed, processed, and transformed</p>
    <p>- Data processing flow - Computational &amp; I/O complexity - Relevant data features</p>
    <p>IEnumerable&lt;stats&gt; ProcessRecord( Ienumerable&lt;record&gt; users) { foreach (var u in users) {</p>
    <p>if (NumRecipients(u) &gt; 10) { yield return GetStat(u); } else { yield return GetSimpleStat(u); } } }</p>
    <p>Number of recipients is a relevant feature</p>
    <p>Different records take different code paths to process</p>
  </div>
  <div class="page">
    <p>Data Analysis</p>
    <p>Statistics of relevant data features</p>
    <p>Challenge: compact data representation  Representative samples of input data  Data summarizations  Approximate histogram  Approximate number of distinct keys</p>
    <p>Streaming algorithms in a distributed setting</p>
  </div>
  <div class="page">
    <p>Cost Modeling and Optimization</p>
    <p>Modeling: compare different partitioning schemes</p>
    <p>Estimation: predict the potential cost  White-box approach</p>
    <p>Analytically based on code/data analysis</p>
    <p>Black-box approach  Sampling + regression analysis</p>
    <p>Optimization: search for best partitioning scheme</p>
    <p>Input data</p>
    <p>Code</p>
    <p>EPG</p>
    <p>Data Analysis</p>
    <p>Code Analysis</p>
    <p>Cost Modeling &amp; Estimation</p>
    <p>Cost Optimization</p>
    <p>Optimized EPG</p>
    <p>Data Statistics &amp; Samples</p>
    <p>Computational &amp; IO Complexity</p>
    <p>Updated EPG</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Preparing your input before you start</p>
    <p>Data partitioning is critical to performance</p>
    <p>New research opportunities in different fields</p>
    <p>Programming language analysis</p>
    <p>Data analysis</p>
    <p>Optimization</p>
    <p>Distributed systems</p>
  </div>
</Presentation>
