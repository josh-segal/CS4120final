<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Statistical Queries over Distributed Private User Data</p>
    <p>Ruichuan Chen (MPI-SWS) Alexey Reznichenko (MPI-SWS) Paul Francis (MPI-SWS) Johannes Gehrke (Cornell Univ.)</p>
  </div>
  <div class="page">
    <p>User privacy has become a major concern</p>
    <p>Make Purchase</p>
    <p>Update Profile</p>
  </div>
  <div class="page">
    <p>Often, users are unaware of data exposure</p>
    <p>Third-party Trackers</p>
    <p>Smart-phone Apps</p>
  </div>
  <div class="page">
    <p>A growing sense</p>
    <p>Privacy loss has to be brought under control!</p>
    <p>User-owned and operated principal  Personal data should be stored in a local</p>
    <p>host (or a cloud device) under the users control.</p>
  </div>
  <div class="page">
    <p>Motivation and problem</p>
    <p>Distributed private user data is important.  How to make statistical queries over such</p>
    <p>distributed private user data while still preserving privacy?</p>
    <p>Data Data Data</p>
    <p>Analyst</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Related work</p>
    <p>PDDP system  Key insights  System workflow  Implementation, deployment and results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Randomization  K-anonymity, L-diversity, T-closeness</p>
    <p>Differential privacy</p>
  </div>
  <div class="page">
    <p>Differential privacy</p>
    <p>Differential privacy adds noise to the output of a computation (i.e., query).</p>
    <p>Hides the presence or absence of a user.  Makes no assumptions about adversary.</p>
    <p>Database Query Module</p>
    <p>(add noise) Analyst</p>
  </div>
  <div class="page">
    <p>Differential privacy in distributed setting</p>
    <p>Database</p>
    <p>Query Module (add noise)</p>
    <p>Analyst</p>
    <p>Data Data Data</p>
    <p>Analyst</p>
    <p>? ? ?</p>
    <p>Centralized Environment Distributed Environment</p>
    <p>Query Module (add noise) Fully trusted!</p>
  </div>
  <div class="page">
    <p>Prior distributed DP designs</p>
    <p>Scale poorly Dwork et al., EUROCRYPT06.</p>
    <p>Not tolerate churn Rastogi and Nath, SIGMOD10; Shi et al., NDSS11.</p>
    <p>Even a single malicious user can substantially distort the query result Rastogi and Nath, SIGMOD10; Shi et al., NDSS11; Gtz and Nath, MSR-TR11.</p>
    <p>Data Data Data</p>
    <p>Analyst</p>
    <p>Trusted!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Related work</p>
    <p>PDDP system  Key insights  System workflow  Implementation, deployment and results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>PDDP system</p>
    <p>PDDP: Practical Distributed Differential Privacy  Operates at large scale  Tolerates churn  Puts tight bound on the extent to which a</p>
    <p>malicious user can distort query results</p>
  </div>
  <div class="page">
    <p>Components &amp; assumptions</p>
    <p>Data Data Data</p>
    <p>Analyst</p>
    <p>Proxy (add DP noise)</p>
    <p>Analyst is potentially malicious (violating user privacy)</p>
    <p>Clients are user devices. Clients are potentially malicious (distorting the final results)</p>
    <p>Proxy is honest but curious 1) Follows the specified protocol 2) Tries to exploit additional info that can be learned in so doing</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Related work</p>
    <p>PDDP system  Key insights  System workflow  Implementation, deployment and results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Key insights  binary answer  How to limit query result distortion?</p>
    <p>Solution:  Ensure that a client cannot arbitrarily</p>
    <p>manipulate answers.  Split answers value range into buckets.  Enforce a binary answer in each bucket.</p>
    <p>Zero-knowledge proofs  Bit-cryptosystem</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Key insights  binary answer</p>
    <p>Query: how old are you?</p>
    <p>4 buckets: 0~12, 13~20, 21~59, and 60.  Answers: a 1 or 0 per bucket.</p>
    <p>30 years-old  0, 0, 1, 0</p>
    <p>Malicious clients cannot substantially distort the query result!</p>
  </div>
  <div class="page">
    <p>Proxy knows noise</p>
    <p>What if analyst publishes noisy result?</p>
    <p>Proxy knows noisy-free result</p>
    <p>Key insights  blind noise</p>
    <p>Solution:  An anonymizing honest</p>
    <p>but-curious proxy.  Proxy generates additional</p>
    <p>binary answers in each bucket as differentially private noise.</p>
    <p>Data Data Data</p>
    <p>Analyst</p>
    <p>Proxy (add DP noise)</p>
    <p>How to achieve differential privacy?</p>
    <p>Blind noise addition!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Related work</p>
    <p>PDDP system  Key insights  System workflow  Implementation, deployment and results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Step 1: query initialization</p>
    <p>Analyst Proxy Clients</p>
    <p>Answers 5. Encrypted</p>
    <p>Noisy Answers</p>
  </div>
  <div class="page">
    <p>SELECT age FROM local_db WHERE gender=m</p>
    <p>Step 1: query initialization (cont.)</p>
    <p>Example: age distribution among males?</p>
    <p>Query:</p>
    <p>Buckets:</p>
    <p># clients queried (c):</p>
    <p>DP parameter ( ): 1.0</p>
  </div>
  <div class="page">
    <p>Step 2: query forwarding</p>
    <p>Analyst Proxy Clients</p>
  </div>
  <div class="page">
    <p>Step 3: client response</p>
    <p>Analyst Proxy Clients</p>
  </div>
  <div class="page">
    <p>Step 3: client response (cont.)</p>
    <p>Client executes query over its local data and produces answer</p>
    <p>A 1 or 0 per bucket</p>
    <p>More than one bucket may contain a 1</p>
  </div>
  <div class="page">
    <p>Step 3: client response (cont.)</p>
    <p>Per-bucket answer value is individually encrypted with the analysts public key.</p>
    <p>Goldwasser-Micali (GM) cryptosystem [Goldwasser and Micali, STOC82]</p>
    <p>Single-bit cryptosystem  Enforce a binary answer in each bucket</p>
    <p>Very efficient  XOR-homomorphic</p>
    <p>E(a) * E(b) = E(a b)</p>
  </div>
  <div class="page">
    <p>Step 4: blind noise addition</p>
    <p>Analyst Proxy Clients</p>
    <p>Answers 5. Encrypted</p>
    <p>Noisy Answers</p>
  </div>
  <div class="page">
    <p>Step 4: blind noise addition</p>
    <p>Proxy adds DP noise to each bucket.  Generate some additional binary answers</p>
    <p>(i.e., 0 or 1) as DP noise, called coins.  Coins must be unbiased.  Coins are encrypted with analysts public key.</p>
    <p>How many coins needed?</p>
    <p>Question: how to generate coins blindly?</p>
    <p>c: # clients queried : DP parameter</p>
  </div>
  <div class="page">
    <p>Coin generation</p>
    <p>Straightforward approaches</p>
    <p>Proxy generates coins?  Curious proxy could know noise-free result!</p>
    <p>Clients generate coins?  Malicious clients could generate biased coins!</p>
  </div>
  <div class="page">
    <p>Collaborative coin generation</p>
    <p>Our approach  Each online client periodically generates an</p>
    <p>encrypted unbiased coin E(oc)</p>
    <p>Proxy blindly re-flips the coin E(oc)  Generate an unbiased coin E(op) locally  Multiply E(oc) with E(op)  The product E(oc) * E(op) is an unbiased coin</p>
  </div>
  <div class="page">
    <p>Collaborative coin generation</p>
    <p>GM cryptosystem is XOR-homomorphic  E(oc) * E(op) = E(oc op)</p>
    <p>Proxy doesnt know the actual value of the generated unbiased coin  Curious proxy cannot know noise-free result</p>
    <p>Possibly biased</p>
    <p>Unbiased Unbiased</p>
  </div>
  <div class="page">
    <p>Step 5: noisy answers to analyst</p>
    <p>Analyst Proxy Clients</p>
    <p>Answers</p>
    <p>Each bucket: client answers + coins (noise)  In the end, analyst obtains the noisy answer</p>
    <p>for how many clients fall within each bucket.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Related work</p>
    <p>PDDP system  Key insights  System workflow  Implementation, deployment and results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Implementation &amp; deployment</p>
    <p>Client  Firefox add-on</p>
    <p>(9.6K LOC)  SQLite storage</p>
    <p>Available at http://www.mpi-sws.org/~rchen/pddp/pddpFX.xpi</p>
  </div>
  <div class="page">
    <p>Implementation &amp; deployment</p>
    <p>Proxy  Web service on Tomcat (3.6K LOC)  Proxy state in MySQL database</p>
    <p>Analyst  Java program (800 LOC)</p>
    <p>Deployment  600+ real clients</p>
  </div>
  <div class="page">
    <p>Client performance  Major concern: crypto operations  Performance at client</p>
    <p>Firefox Chrome Smart phone 2157.96 22773.86 808.87</p>
    <p># encryptions / second</p>
  </div>
  <div class="page">
    <p>Proxy/analyst performance</p>
    <p>Example:  1M clients, 10 buckets, and = 1.0  Computation: &lt; 30 CPU-minutes</p>
    <p>Bandwidth and storage: 1.2GB</p>
    <p>Encryption Decryption Homomorphic Op 15323.32 6601.10 123609.39</p>
    <p># operations / second</p>
  </div>
  <div class="page">
    <p>Query exercise</p>
    <p>5 queries towards client deployment</p>
    <p>Many low-activity clients  30% of clients visited 10 webpages</p>
    <p>Many clients visited just a few websites  47% of clients visited 10 websites</p>
    <p>Most browsing on a users top 3 favorite websites  Search engine is often used  Google ads are shown relatively often</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Related work</p>
    <p>PDDP system  Key insights  System workflow  Implementation, deployment and results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion  PDDP: the first practical distributed</p>
    <p>differentially private (query) system  Scales well  Tolerates churn  Places tight bound on malicious users</p>
    <p>capability</p>
    <p>Key insights:  Binary answer in bucket  Blind noise addition</p>
  </div>
</Presentation>
