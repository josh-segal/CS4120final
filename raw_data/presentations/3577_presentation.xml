<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SCATTERCACHE: Thwarting Cache Attacks via Cache Set Randomization</p>
    <p>Werner, Unterluggauer, Giner, Schwarz, Gruss, Mangard</p>
    <p>August 15, 2019</p>
    <p>Graz University of Technology</p>
  </div>
  <div class="page">
    <p>What is SCATTERCACHE? www.tugraz.at</p>
    <p>Alternative design for n-way set associative caches  Designed as countermeasures against cache attacks</p>
    <p>Breaks the fixed link between addresses and cache sets  Increases the number of possible cache sets  IDs to change the mapping between security domains  Exploitation of side channel information is much harder</p>
    <p>Reuses established concepts  Skewed caches [Sez93]  Low latency cryptography (e.g., QARMA-64 [Ava17])</p>
    <p>Still similar to existing cache designs (usability, hardware)</p>
  </div>
  <div class="page">
    <p>Motivation and Background</p>
  </div>
  <div class="page">
    <p>CPU Cache www.tugraz.at</p>
    <p>printf(&quot;%d&quot;, i);</p>
    <p>printf(&quot;%d&quot;, i);</p>
    <p>printf(&quot;%d&quot;, i); Cache</p>
    <p>miss</p>
    <p>printf(&quot;%d&quot;, i);</p>
    <p>printf(&quot;%d&quot;, i); Cache</p>
    <p>miss Reques t</p>
    <p>Respo nsei</p>
    <p>printf(&quot;%d&quot;, i);</p>
    <p>printf(&quot;%d&quot;, i); Cache</p>
    <p>miss Reques t</p>
    <p>Respo nsei</p>
    <p>printf(&quot;%d&quot;, i);</p>
    <p>Cache hit</p>
    <p>printf(&quot;%d&quot;, i); Cache</p>
    <p>miss Reques t</p>
    <p>Respo nsei</p>
    <p>printf(&quot;%d&quot;, i);</p>
    <p>Cache hit</p>
    <p>No DRAM acc ess,</p>
    <p>much faster</p>
    <p>DRAM access, slow</p>
  </div>
  <div class="page">
    <p>Memory Access Latency www.tugraz.at</p>
    <p>Latency [Cycles]</p>
    <p>N um</p>
    <p>be r</p>
    <p>of A</p>
    <p>cc es</p>
    <p>se s</p>
    <p>Cache Hits Cache Misses</p>
    <p>generated using the CTA calibration tool [GSM15] on my i5-4200U laptop</p>
  </div>
  <div class="page">
    <p>Regular 2-way Set Associative Cache www.tugraz.at</p>
    <p>Memory Address Cache</p>
    <p>Tag Datab bitsn bits</p>
    <p>Cache Index</p>
    <p>Way 2 Tag Way 2 Data Way 1 Tag Way 1 Data</p>
    <p>=?</p>
    <p>=?Tag</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>Prime+Probe www.tugraz.at</p>
    <p>Attacker Address Space Cache</p>
    <p>Victim Address Space</p>
    <p>loads data</p>
    <p>loads data</p>
    <p>fast access</p>
    <p>slow access</p>
  </div>
  <div class="page">
    <p>Why should we care? www.tugraz.at</p>
    <p>Cache attacks are powerful and break isolation boundaries  Many attacking techniques</p>
    <p>FLUSH+RELOAD, EVICT+RELOAD, FLUSH+FLUSH  PRIME+PROBE, EVICT+TIME</p>
    <p>Numerous attack scenarios  Extracting cryptographic keys  Keyloggers  Breaking of ASLR  Collection of private information</p>
    <p>Often used building block for further microarchitectural attacks</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Idea www.tugraz.at</p>
    <p>Set 0 Set 1 Set 2 Set 3</p>
    <p>Addr. A Domain X Addr. A</p>
    <p>Domain Y</p>
    <p>Addr. B</p>
    <p>Addr. A</p>
    <p>Addr. B @DAC [Tri+18], @MICRO [Qur18]</p>
  </div>
  <div class="page">
    <p>How can we build such a SCATTERCACHE?</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Naive Concept www.tugraz.at</p>
    <p>IDF</p>
    <p>cache line address</p>
    <p>key</p>
    <p>idx 0-3</p>
    <p>idx 0</p>
    <p>idx 2</p>
    <p>idx 1</p>
    <p>idx 3</p>
    <p>SDID offsettag index</p>
    <p>(nways2bindices +nways1 nways</p>
    <p>) possible cache sets</p>
    <p>Index Derivation Function (IDF) takes an address and returns a cache set</p>
    <p>Depends on hardware key and optional Security Domain ID (SDID)</p>
    <p>Unique combination of cache lines for each address</p>
    <p>Potential index collisions  One nways multi-port memory</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Concept www.tugraz.at</p>
    <p>We want something that is closer to a traditional cache!</p>
    <p>instead of this:</p>
    <p>off se</p>
    <p>t</p>
    <p>set[idx+2]</p>
    <p>set[idx-2]</p>
    <p>set[idx-1]</p>
    <p>set[idx+1]</p>
    <p>way 0 way 1 way 2 way 3</p>
    <p>in d ex</p>
    <p>ta g</p>
    <p>lets do this:</p>
    <p>off se</p>
    <p>t</p>
    <p>idx 0</p>
    <p>way 3</p>
    <p>in d ex</p>
    <p>ta g</p>
    <p>ID F</p>
    <p>cache line addr.</p>
    <p>key</p>
    <p>idx 1</p>
    <p>idx 2</p>
    <p>idx 3</p>
    <p>way 1 way 2way 0 SDID</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Concept www.tugraz.at off</p>
    <p>se t</p>
    <p>idx 0</p>
    <p>way 3</p>
    <p>in d ex</p>
    <p>ta g</p>
    <p>ID F</p>
    <p>cache line addr.</p>
    <p>key</p>
    <p>idx 1</p>
    <p>idx 2</p>
    <p>idx 3</p>
    <p>way 1 way 2way 0 SDID</p>
    <p>Skewed cache [Sez93] (i.e., traditional cache with additional addressing logic) and an IDF</p>
    <p>Similar to building larger caches from smaller cache slices</p>
    <p>We use random replacement policy (for now)</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Selecting the IDF www.tugraz.at</p>
    <p>Inputs: cache line address, SDID, key  Outputs: nways indices with bindices bits  Reuse concepts and existing cryptographic primitives  SCv1: hashing variant</p>
    <p>Block ciphers (e.g., PRINCE [Bor+12])  Tweakable block ciphers (e.g., QARMA [Ava17])  Permutation-based primitives (e.g., Keccak-p [Ber+11])</p>
    <p>SCv2: permutation variant  Prevents birthday-bound index collisions  No off-the-shelf primitives</p>
  </div>
  <div class="page">
    <p>System Integration</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - System Integration www.tugraz.at</p>
    <p>SCATTERCACHE as last level cache  Hardware managed key</p>
    <p>Randomly generated at boot time  Rekeying with full cache flush  Potential for iterative rekeying  concurrently developed CEASER-S @ISCA [Qur19]</p>
    <p>SDID management via page table (indirection)  x86: Page Attribute Tables (PATs)  ARM: Memory Attribute Indirection Register (MAIRs)</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Software Support www.tugraz.at</p>
    <p>SCATTERCACHE requires no software support, default SDID = 0  But - OS support enables page-wise security domains  shared read-only pages can be private in the cache!</p>
    <p>OS can define domains as needed (pages, processes, containers, VMs, . . . )</p>
    <p>Software-based page rekeying by changing the SDID</p>
  </div>
  <div class="page">
    <p>Security and Evaluation</p>
  </div>
  <div class="page">
    <p>Applicable Cache Attacks www.tugraz.at</p>
    <p>Unshared memory has no shared (physical) addresses  No FLUSH+RELOAD, EVICT+RELOAD, FLUSH+FLUSH  Specialized PRIME+PROBE is possible</p>
    <p>Shared, read-only memory  Like unshared memory given OS support  Otherwise, eviction-based attacks are hindered</p>
    <p>Shared, writable memory cant be separated  Eviction-based attacks are hindered</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - PRIME+PROBE www.tugraz.at</p>
    <p>No end-to-end attack yet  Simplified setting: perfect control, single access, no noise  Investigate the building blocks in simulation and analytically</p>
    <p>Finding congruent addresses (nways = 8, bindices = 11)  Full collisions are unlikely  use partial collisions  Approach in the paper:  225 profiled victim accesses  Generalized by Purnal and Verbauwhede [PV19]:  210</p>
    <p>Evicting one set with 99 % needs 275 addresses  Two PRIME+PROBE variants (nways = 8, bindices = 12)</p>
    <p>99 % confidence: 35 to 152 victim accesses (repetitions)  Between 9870 and 1216 congruent addresses</p>
    <p>Investigate the effect of noise (coupon collector problem)</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE - Performance www.tugraz.at</p>
    <p>Micro benchmarks using the gem5 full system simulator (ARM)  Poky Linux from Yocto 2.5 (kernel version 4.14.67)  GAP, MiBench, lmbench, scimark2</p>
    <p>SPEC CPU 2017 on custom cache simulator  Cache hit rate always at or above levels of set-associative</p>
    <p>cache with random replacement</p>
    <p>Typically 2 % 4 % below LRU on micro benchmarks, 0 % 2 % for SPEC</p>
  </div>
  <div class="page">
    <p>Conclusion www.tugraz.at</p>
    <p>SCATTERCACHE builds upon skewed caches and low latency cryptographic primitives  Breaks the fixed link between addresses and cache sets  Removes the rigid assignment of cache lines to sets  Enables software control over the cache congruencies via SDIDs</p>
    <p>Comparable performance to contemporary caches  Harder to attack even in very strong attack models  Attacks are probabilistic and demand new approaches  Still, more analysis is required in more realistic models to</p>
    <p>determine if and how often rekeying is needed</p>
  </div>
  <div class="page">
    <p>Acknowledgements - We want to thank ... www.tugraz.at</p>
    <p>the anonymous USENIX reviewers.  our shepherd Yossi Oren.  Antoon Purnal and Ingrid Verbauwhede from KU Leuven for their analysis.  Our funding partners:</p>
    <p>European Research Council (ERC) Horizon 2020 grant agreement No 681402</p>
    <p>Intel</p>
  </div>
  <div class="page">
    <p>SCATTERCACHE: Thwarting Cache Attacks via Cache Set Randomization</p>
    <p>Werner, Unterluggauer, Giner, Schwarz, Gruss, Mangard</p>
    <p>August 15, 2019</p>
    <p>Graz University of Technology</p>
  </div>
  <div class="page">
    <p>References i www.tugraz.at</p>
    <p>References</p>
    <p>[Ava17] Roberto Avanzi. The QARMA Block Cipher Family. Almost MDS Matrices Over Rings With Zero Divisors, Nearly Symmetric Even-Mansour Constructions With Non-Involutory Central Rounds, and Search Heuristics for Low-Latency S-Boxes. In: IACR Trans. Symmetric Cryptol. (2017), pp. 444. DOI: 10.13154/tosc.v2017.i1.4-44.</p>
    <p>[Ber+11] Guido Bertoni, Joan Daemen, Michael Peeters, and Gilles Van Assche. The KECCAK reference. https://keccak.team/files/Keccak-reference-3.0.pdf. 2011.</p>
    <p>[Bor+12] Julia Borghoff et al. PRINCE - A Low-Latency Block Cipher for Pervasive Computing Applications - Extended Abstract. In: Advances in Cryptology  ASIACRYPT. 2012, pp. 208225. DOI: 10.1007/978-3-642-34961-4\_14.</p>
    <p>[GSM15] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. Cache Template Attacks Repository. https://github.com/IAIK/cache_template_attacks. 2015.</p>
  </div>
  <div class="page">
    <p>References ii www.tugraz.at</p>
    <p>[PV19] Antoon Purnal and Ingrid Verbauwhede. Advanced profiling for probabilistic Prime+Probe attacks and covert channels in ScatterCache. In: arXiv abs/1508.03619 (2019). URL: http://arxiv.org/abs/1908.03383.</p>
    <p>[Qur18] Moinuddin K. Qureshi. CEASER: Mitigating Conflict-Based Cache Attacks via Encrypted-Address and Remapping. In: IEEE/ACM International Symposium on Microarchitecture  MICRO. 2018, pp. 775787. DOI: 10.1109/MICRO.2018.00068.</p>
    <p>[Qur19] Moinuddin K. Qureshi. New attacks and defense for encrypted-address cache. In: International Symposium on Computer Architecture  ISCA. 2019, pp. 360371. DOI: 10.1145/3307650.3322246.</p>
    <p>[Sez93] Andre Seznec. A Case for Two-Way Skewed-Associative Caches. In: International Symposium on Computer Architecture  ISCA. 1993, pp. 169178. DOI: 10.1145/165123.165152.</p>
    <p>[Tri+18] David Trilla, Carles Hernandez, Jaume Abella, and Francisco J. Cazorla. Cache side-channel attacks and time-predictability in high-performance critical real-time systems. In: Design Automation Conference  DAC. 2018, 98:198:6. DOI: 10.1145/3195970.3196003.</p>
  </div>
</Presentation>
