<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Collaborative Monitoring Mechanism for Making a Multitenant Platform Accountable</p>
    <p>Chen Wang</p>
    <p>CSIRO ICT Centre</p>
    <p>Australia</p>
    <p>chen.wang@csiro.au</p>
    <p>Ying Zhou</p>
    <p>The University of Sydney</p>
    <p>Australia</p>
    <p>ying.zhou@sydney.edu.au</p>
  </div>
  <div class="page">
    <p>Service Level Agreement (SLA)</p>
    <p>Service providers often offer Service Level Agreements as a means to address uncertainty</p>
    <p>Attempt to meet certain QoS metrics  Current status:</p>
    <p>Only support very limited metrics  Not machine processable</p>
    <p>Few means are provided to clients to make a SLA accountable when problems occur</p>
    <p>Monitoring is provided by the service provider itself</p>
    <p>Clients are often required to furnish evidence all by themselves to be eligible to claim credit for a SLA violation</p>
    <p>Existing application design practice does not take into account of evidence collection functionalities for credit claiming purpose</p>
  </div>
  <div class="page">
    <p>Maintain the Data State in an External Accountability Service</p>
    <p>The accountability service maintains a view of the data state</p>
    <p>Reflects what data should be from users perspective  Aggregates data updating requests of users to calculate the</p>
    <p>data state</p>
    <p>Authenticates query results based on the calculated data state  Using Merkle B-tree[SIGMOD06] for Data State Calculation</p>
    <p>A combination of Merkle (hash) tree and B+-tree</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Accountability is one of the foundations that form realworld trust relationships.</p>
    <p>The capability of identifying a party that is responsible when things go wrong with evidences can potentially enhance the trustworthiness of a system.</p>
    <p>Accountability support is important to the cloud computing ecosystem</p>
    <p>Proper disclosure of important state transition logic of cloud services</p>
    <p>External parties are capable of verifying the evidence that support these state transitions</p>
  </div>
  <div class="page">
    <p>Their slides</p>
  </div>
  <div class="page">
    <p>Cloud Services</p>
    <p>User data and applications are in a trend of moving to the cloud  Running on rented infrastructures (IaaS)  Using third party provisioned platform (PaaS) and software (SaaS)  Business logic is executed in different administrative domains on a pay</p>
    <p>as-you-go basis</p>
    <p>Cloud service architecture sample:force.com</p>
  </div>
  <div class="page">
    <p>Cloud Service Uncertainty</p>
    <p>Performance variation is high</p>
    <p>Correctness of business logic  Data service providers in clouds often trade consistency for</p>
    <p>scalability.  Yahoo! PNUTS, Amazon SimpleDB consistency option</p>
    <p>How can an application be sure that its query results satisfy its consistency constraint?</p>
    <p>How to ensure the business logic is handled correctly?</p>
  </div>
  <div class="page">
    <p>Service Level Agreement (SLA)</p>
    <p>Service providers often offer Service Level Agreements as a means to address uncertainty</p>
    <p>Attempt to meet certain QoS metrics  Current status:</p>
    <p>Only support very limited metrics  Not machine processable</p>
    <p>Few means are provided to clients to make a SLA accountable when problems occur</p>
    <p>Monitoring is provided by the service provider itself</p>
    <p>Clients are often required to furnish evidence all by themselves to be eligible to claim credit for a SLA violation</p>
    <p>Existing application design practice does not take into account of evidence collection functionalities for credit claiming purpose</p>
  </div>
  <div class="page">
    <p>A Sample Service Level Agreement (Amazon EC2)</p>
  </div>
  <div class="page">
    <p>How is the problem tackled in realworld?</p>
    <p>The use of a trusted third party to make a deal</p>
    <p>The use of legal/social systems  Contract law provides incentives that promote good behaviour</p>
    <p>between parties</p>
    <p>Using these principles to make services accountable  Disclosing important state transition logic inside a service  Collecting and managing evidence based on a given SLA  Runtime compliance check and problem detection</p>
  </div>
  <div class="page">
    <p>Accountability</p>
    <p>Accountability is the ability to hold an entity, such as a person or organization, responsible for its actions. Butler Lampson:Accountability and Freedom, 2005</p>
    <p>People think that security in the real world is based on locks. In fact, realworld security depends mainly on deterrence, and hence on the possibility of punishment.</p>
    <p>Butler Lampson: Privacy and security - Usable security: how to get it. CACM 52(11), 2009</p>
  </div>
  <div class="page">
    <p>Accountability as a Service: the Conceptual Model</p>
    <p>Tenant Service</p>
    <p>Witness</p>
    <p>Disclosure Document</p>
    <p>SLA</p>
    <p>Monitor / Anomaly Detector</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>A client has a set of applications running on shared data.  These applications provide a set of endpoints.  The SLA defines the following:</p>
    <p>The data can only be accessed through these endpoints.  An endpoint is well-defined (the data state transition it may</p>
    <p>trigger is specified and deterministic).</p>
    <p>Wrapper: capturing I/O of</p>
    <p>the endpoint Wrapper:</p>
    <p>extracting/shipping evidence</p>
  </div>
  <div class="page">
    <p>Maintain the Data State in an External Accountability Service</p>
    <p>The accountability service maintains a view of the data state  Reflects what data should be from users perspective  Aggregates data updating requests of users to calculate the</p>
    <p>data state</p>
    <p>Authenticates query results based on the calculated data state  Using Merkle B-tree[SIGMOD06] for Data State Calculation</p>
    <p>A combination of Merkle (hash) tree and B+-tree</p>
  </div>
  <div class="page">
    <p>Consistency Issue</p>
    <p>The arrivals of request log entries to the accountability service (W) may be out of order</p>
    <p>Solution: bind the update to the actual data and the view of state in W in a transaction  performance issue; negative impact of tightly coupling the actual service to W.</p>
    <p>Trade accuracy of problem detection with performance and decoupling.</p>
    <p>Using a sliding window to sort out of order log entries  Eventual consistency between W and the cloud service it</p>
    <p>monitors</p>
  </div>
  <div class="page">
    <p>Replicate Data State among Multiple Accountability Services</p>
    <p>Trustworthiness can be better achieved through the separation of responsibility.</p>
    <p>The data state of a multitenant database is maintained by a set of data state services.</p>
    <p>Each service maintains a view of the data state</p>
  </div>
  <div class="page">
    <p>The Organization of Multiple Accountability Services: Design Choices</p>
    <p>An update log entry is sent to any known state keeper and propagate to other state keepers in a synchronous manner</p>
    <p>Strong consistency among data keepers  Poor logging performance</p>
    <p>An update log entry is sent to any known state keeper and propagate to other state keepers in an asynchronous manner</p>
    <p>Weak consistency among data keepers  No guarantee that the answer to an authentication request will</p>
    <p>reflect the recent data state change</p>
    <p>Good logging performance</p>
  </div>
  <div class="page">
    <p>The Organization of Multiple Accountability Services: A Hybrid Approach</p>
    <p>Partition the whole range of the indexed attribute into a few non-overlapped regions</p>
    <p>Each region is mapped to one or more state keepers.  An update to a key falling into certain region will be logged in</p>
    <p>the state keepers that are responsible for the region synchronously</p>
    <p>The update is propagated to state keepers that are not responsible for the region asynchronously</p>
    <p>An authentication request is directed to a data keeper whose region overlaps most with the request data range</p>
    <p>If the region covers the data range, authenticate the request immediately</p>
    <p>Otherwise, wait for an allowable delay window for the update logs from other involved region to arrive</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Settings  A data management service</p>
    <p>Contains Web service interfaces that map business logic into DB operations: inserts, point queries, and range queries.</p>
    <p>gSOAP + MySQL  An accountability service  A few database clients  Each Party runs on an Amazon EC2 small instance (Linux</p>
    <p>version 2.6.21.7-2.fc8xen)</p>
    <p>Dataset  Census Income dataset from the UCI Machine Learning</p>
    <p>Repository</p>
    <p>Indexed column is fnlwgt</p>
  </div>
  <div class="page">
    <p>Evaluation (cont)</p>
    <p>The overhead is related to the result set size for range queries</p>
    <p>The overhead can be reduced through asynchronous logging</p>
  </div>
  <div class="page">
    <p>Impact of Multiple Accountability Services on Authentication Time</p>
    <p>Performance gap between accountability and normal service  An accountability service faces scalability issue</p>
    <p>Maintaining a certain number of accountability services can reduce the performance loss</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Accountability is one of the foundations that form realworld trust relationships.</p>
    <p>The capability of identifying a party that is responsible when things go wrong with evidences can potentially enhance the trustworthiness of a system.</p>
    <p>Accountability support is important to the cloud computing ecosystem</p>
    <p>Proper disclosure of important state transition logic of cloud services</p>
    <p>External parties are capable of verifying the evidence that support these state transitions</p>
  </div>
</Presentation>
