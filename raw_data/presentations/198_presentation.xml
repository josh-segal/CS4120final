<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Cost-effective Outbreak Detection in Networks</p>
    <p>Jure Leskovec, Andreas Krause, Carlos Guestrin, Christos Faloutsos, Jeanne</p>
    <p>VanBriesen, Natalie Glance</p>
  </div>
  <div class="page">
    <p>Scenario 1: Water network</p>
    <p>Given a real city water distribution network</p>
    <p>And data on how contaminants spread in the network</p>
    <p>Problem posed by US Environmental Protection Agency</p>
    <p>S</p>
    <p>On which nodes should we place sensors to</p>
    <p>efficiently detect the all possible contaminations?</p>
    <p>S</p>
  </div>
  <div class="page">
    <p>Scenario 2: Cascades in blogs</p>
    <p>Blogs</p>
    <p>Posts</p>
    <p>Time ordered</p>
    <p>hyperlinks</p>
    <p>Information cascade</p>
    <p>Which blogs should one read to detect cascades as</p>
    <p>effectively as possible?</p>
  </div>
  <div class="page">
    <p>General problem</p>
    <p>Given a dynamic process spreading over the network</p>
    <p>We want to select a set of nodes to detect the process effectively</p>
    <p>Many other applications:  Epidemics  Influence propagation  Network security</p>
  </div>
  <div class="page">
    <p>Two parts to the problem</p>
    <p>Reward, e.g.:  1) Minimize time to detection  2) Maximize number of detected propagations  3) Minimize number of infected people</p>
    <p>Cost (location dependent):  Reading big blogs is more time consuming  Placing a sensor in a remote location is expensive</p>
  </div>
  <div class="page">
    <p>Problem setting  Given a graph G(V,E)  and a budget B for sensors  and data on how contaminations spread over</p>
    <p>the network:  for each contamination i we know the time T(i, u)</p>
    <p>when it contaminated node u  Select a subset of nodes A that maximize the</p>
    <p>expected reward</p>
    <p>subject to cost(A) &lt; B 6</p>
    <p>SS</p>
    <p>Reward for detecting contamination i</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Problem definition  Properties of objective functions</p>
    <p>Submodularity  Our solution</p>
    <p>CELF algorithm  New bound</p>
    <p>Experiments  Conclusion</p>
  </div>
  <div class="page">
    <p>Solving the problem</p>
    <p>Solving the problem exactly is NP-hard</p>
    <p>Our observation:  objective functions are submodular, i.e.</p>
    <p>diminishing returns</p>
    <p>S1</p>
    <p>S2</p>
    <p>Placement A={S1, S2}</p>
    <p>S</p>
    <p>New sensor:</p>
    <p>Adding S helps a lot S2</p>
    <p>S4</p>
    <p>S1</p>
    <p>S3</p>
    <p>Placement A={S1, S2, S3, S4}</p>
    <p>S</p>
    <p>Adding S helps very little</p>
  </div>
  <div class="page">
    <p>Result 1: Objective functions are submodular</p>
    <p>Objective functions from Battle of Water Sensor Networks competition [Ostfeld et al]:  1) Time to detection (DT)</p>
    <p>How long does it take to detect a contamination?  2) Detection likelihood (DL)</p>
    <p>How many contaminations do we detect?  3) Population affected (PA)</p>
    <p>How many people drank contaminated water?</p>
    <p>Our result: all are submodular</p>
  </div>
  <div class="page">
    <p>Background: Submodularity</p>
    <p>Submodularity:  For all placement s it holds</p>
    <p>Even optimizing submodular functions is NP-hard [Khuller et al]</p>
    <p>Benefit of adding a sensor to a small placement</p>
    <p>Benefit of adding a sensor to a large placement</p>
  </div>
  <div class="page">
    <p>Background: Optimizing submodular functions</p>
    <p>How well can we do?  A greedy is near optimal</p>
    <p>at least 1-1/e (~63%) of optimal [Nemhauser et al 78]</p>
    <p>But  1) this only works for unit cost case</p>
    <p>(each sensor/location costs the same)</p>
    <p>2) Greedy algorithm is slow  scales as O(|V|B)</p>
    <p>a</p>
    <p>b</p>
    <p>c</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>d</p>
    <p>reward</p>
    <p>e</p>
    <p>e</p>
    <p>Greedy algorithm</p>
  </div>
  <div class="page">
    <p>Result 2: Variable cost: CELF algorithm</p>
    <p>For variable sensor cost greedy can fail arbitrarily badly</p>
    <p>We develop a CELF (cost-effective lazy forward-selection) algorithm  a 2 pass greedy algorithm</p>
    <p>Theorem: CELF is near optimal  CELF achieves (1-1/e) factor approximation</p>
    <p>CELF is much faster than standard greedy</p>
  </div>
  <div class="page">
    <p>Result 3: tighter bound</p>
    <p>We develop a new algorithm-independent bound  in practice much tighter than the standard</p>
    <p>(1-1/e) bound</p>
    <p>Details in the paper</p>
  </div>
  <div class="page">
    <p>Scaling up CELF algorithm</p>
    <p>Submodularity guarantees that marginal benefits decrease with the solution size</p>
    <p>Idea: exploit submodularity, doing lazy evaluations! (considered by Robertazzi et al for unit cost case)</p>
    <p>d</p>
    <p>reward</p>
  </div>
  <div class="page">
    <p>Result 4: Scaling up CELF</p>
    <p>CELF algorithm:  Keep an ordered list of</p>
    <p>marginal benefits bi from previous iteration</p>
    <p>Re-evaluate bi only for top sensor</p>
    <p>Re-sort and prune</p>
    <p>a</p>
    <p>b</p>
    <p>c</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>d</p>
    <p>reward</p>
    <p>e</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Result 4: Scaling up CELF</p>
    <p>CELF algorithm:  Keep an ordered list of</p>
    <p>marginal benefits bi from previous iteration</p>
    <p>Re-evaluate bi only for top sensor</p>
    <p>Re-sort and prune</p>
    <p>a</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>d</p>
    <p>b</p>
    <p>c</p>
    <p>reward</p>
    <p>e</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Result 4: Scaling up CELF</p>
    <p>CELF algorithm:  Keep an ordered list of</p>
    <p>marginal benefits bi from previous iteration</p>
    <p>Re-evaluate bi only for top sensor</p>
    <p>Re-sort and prune</p>
    <p>a</p>
    <p>c</p>
    <p>a b</p>
    <p>c</p>
    <p>d</p>
    <p>d</p>
    <p>b</p>
    <p>reward</p>
    <p>e</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Problem definition  Properties of objective functions</p>
    <p>Submodularity  Our solution</p>
    <p>CELF algorithm  New bound</p>
    <p>Experiments  Conclusion</p>
  </div>
  <div class="page">
    <p>Experiments: Questions</p>
    <p>Q1: How close to optimal is CELF?  Q2: How tight is our bound?  Q3: Unit vs. variable cost  Q4: CELF vs. heuristic selection  Q5: Scalability</p>
  </div>
  <div class="page">
    <p>Experiments: 2 case studies</p>
    <p>We have real propagation data  Blog network:</p>
    <p>We crawled blogs for 1 year  We identified cascades  temporal propagation of</p>
    <p>information  Water distribution network:</p>
    <p>Real city water distribution networks  Realistic simulator of water consumption provided</p>
    <p>by US Environmental Protection Agency</p>
  </div>
  <div class="page">
    <p>Case study 1: Cascades in blogs</p>
    <p>We crawled 45,000 blogs for 1 year  We obtained 10 million posts  And identified 350,000 cascades</p>
  </div>
  <div class="page">
    <p>Q1: Blogs: Solution quality</p>
    <p>Our bound is much tighter  13% instead of 37%</p>
    <p>Old bound</p>
    <p>Our bound CELF</p>
  </div>
  <div class="page">
    <p>Q2: Blogs: Cost of a blog</p>
    <p>Unit cost:  algorithm picks large</p>
    <p>popular blogs: instapundit.com, michellemalkin.com</p>
    <p>Variable cost:  proportional to the</p>
    <p>number of posts  We can do much</p>
    <p>better when considering costs</p>
    <p>Unit cost</p>
    <p>Variable cost</p>
  </div>
  <div class="page">
    <p>Q4: Blogs: Heuristics</p>
    <p>CELF wins consistently</p>
  </div>
  <div class="page">
    <p>Q5: Blogs: Scalability</p>
    <p>CELF runs 700 times faster than simple greedy algorithm</p>
  </div>
  <div class="page">
    <p>Case study 2: Water network</p>
    <p>Real metropolitan area water network (largest network optimized):  V = 21,000 nodes  E = 25,000 pipes</p>
    <p>3.6 million epidemic scenarios (152 GB of epidemic data)</p>
    <p>By exploiting sparsity we fit it into main memory (16GB)</p>
  </div>
  <div class="page">
    <p>Q1: Water: Solution quality</p>
    <p>Again our bound is much tighter</p>
    <p>Old bound</p>
    <p>Our bound CELF</p>
  </div>
  <div class="page">
    <p>Q3: Water: Heuristic placement</p>
    <p>Again, CELF consistently wins</p>
  </div>
  <div class="page">
    <p>Water: Placement visualization</p>
    <p>Different objective functions give different sensor placements</p>
    <p>Population affected Detection likelihood</p>
  </div>
  <div class="page">
    <p>Q5: Water: Scalability</p>
    <p>CELF is 10 times faster than greedy</p>
  </div>
  <div class="page">
    <p>Results of BWSN competition Author #non- dominated (out of 30)</p>
    <p>CELF 26 Berry et. al. 21 Dorini et. al. 20 Wu and Walski 19 Ostfeld et al 14 Propato et. al. 12 Eliades et. al. 11 Huang et. al. 7 Guan et. al. 4 Ghimire et. al. 3 Trachtman 2 Gueli 2 Preis and Ostfeld 1</p>
    <p>Battle of Water Sensor Networks competition</p>
    <p>[Ostfeld et al]: count number of non-dominated solutions</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>General methodology for selecting nodes to detect outbreaks</p>
    <p>Results:  Submodularity observation  Variable-cost algorithm with optimality guarantee  Tighter bound  Significant speed-up (700 times)</p>
    <p>Evaluation on large real datasets (150GB)  CELF won consistently</p>
  </div>
  <div class="page">
    <p>Other results  see our poster</p>
    <p>Many more details:  Fractional selection of the blogs  Generalization to future unseen cascades  Multi-criterion optimization  We show that triggering model of Kempe et al</p>
    <p>is a special case of out setting</p>
    <p>Thank you! Questions?</p>
  </div>
  <div class="page">
    <p>Blogs: generalization</p>
  </div>
  <div class="page">
    <p>Blogs: Cost of a blog (2)</p>
    <p>But then algorithm picks lots of small blogs that participate in few cascades</p>
    <p>We pick best solution that interpolates between the costs</p>
    <p>We can get good solutions with few blogs and few posts</p>
    <p>Each curve represents solutions with the same score</p>
  </div>
</Presentation>
