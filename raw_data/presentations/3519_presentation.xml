<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Michelle Wong and David Lie</p>
    <p>University of Toronto</p>
    <p>Tackling runtime-based obfuscation in Android with TIRO</p>
    <p>Usenix Security 2018</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Android malware and analysis</p>
    <p>Mobile devices are a valuable target for malware developers</p>
    <p>Access to sensitive information and functionality</p>
    <p>Arms race between malware developers and security analyzers</p>
    <p>I do X</p>
    <p>Malware! Because X</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>JNI</p>
    <p>Linux</p>
    <p>Device</p>
    <p>ART/DVM Runtime</p>
    <p>Application DEX Code</p>
    <p>Application Native CodeFramework APIs</p>
    <p>Java obfuscation</p>
    <p>Most Android applications written in Java</p>
    <p>Obfuscation using Java features  Reflection</p>
    <p>Dynamic code loading</p>
    <p>Native methods</p>
    <p>Language-based obfuscation</p>
    <p>I do [?], where [?] might be X</p>
    <p>Does it do X? Is it malware?</p>
    <p>Application DEX Code</p>
    <p>Framework APIs</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>JNI</p>
    <p>Linux</p>
    <p>Device</p>
    <p>ART/DVM Runtime</p>
    <p>Application DEX Code</p>
    <p>Application Native CodeFramework APIs</p>
    <p>Native obfuscation</p>
    <p>Can avoid runtime entirely by using native code</p>
    <p>No Java code or invocations to Java methods</p>
    <p>Seems very little malware do this</p>
    <p>Framework APIs mostly in Java</p>
    <p>Requires access to undocumented low-level interfaces of system services</p>
    <p>Application Native Code</p>
    <p>! ! !</p>
    <p>Full-native code obfuscation</p>
    <p>Framework APIs</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>JNI</p>
    <p>Linux</p>
    <p>Device</p>
    <p>ART/DVM Runtime</p>
    <p>Application DEX Code</p>
    <p>Application Native CodeFramework APIs</p>
    <p>Obfuscation via runtime tampering</p>
    <p>I do Y and only Y (I mean X)</p>
    <p>Not malware! Doesnt do X</p>
    <p>ART/DVM Runtime</p>
    <p>Language-based obfuscation</p>
    <p>Full-native code obfuscation</p>
    <p>?</p>
    <p>ease of use, reliability difficulty of analysis</p>
    <p>Runtime-based obfuscation</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>...</p>
    <p>ART/DVM Runtime</p>
    <p>Unexpected code behavior</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>Im loading class A</p>
    <p>from DEX D</p>
    <p>Im invoking method B</p>
    <p>from class A</p>
    <p>Im executing instrs &lt;abc&gt; from method B</p>
    <p>Actually</p>
    <p>Loading class E</p>
    <p>from DEX V</p>
    <p>Actually Actually</p>
    <p>Invoking method I</p>
    <p>from class L</p>
    <p>Executing instrs &lt;hac&gt; from method K</p>
    <p>Java</p>
    <p>&lt;native&gt;</p>
    <p>ART/DVM Runtime</p>
    <p>Unexpected classes</p>
    <p>Unexpected methods</p>
    <p>Unexpected instructions</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Android RunTime (ART)</p>
    <p>Investigated how code is loaded and executed within ART</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>ART</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>ART code loading</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>ART</p>
    <p>class A: method B: &lt;abc&gt;</p>
    <p>DEX file (mmap)</p>
    <p>art:: DexFile</p>
    <p>java.lang. DexFile</p>
    <p>art:: DexFile</p>
    <p>mCookie</p>
    <p>begin_</p>
    <p>class E: method V: &lt;bad&gt;</p>
    <p>DEX file (mmap)</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>ART code loading</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>ART</p>
    <p>class A: method B: &lt;abc&gt;</p>
    <p>DEX file (mmap)</p>
    <p>class E: method V: &lt;bad&gt;</p>
    <p>Bytecode overwriting3</p>
    <p>mirror:: Class</p>
    <p>art:: ArtMethod</p>
    <p>Unexpected classes and methods</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>ART code execution</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>ART</p>
    <p>mirror:: Class</p>
    <p>art:: ArtMethod</p>
    <p>class A: method B: &lt;abc&gt;</p>
    <p>DEX file (mmap)</p>
    <p>vtable_ 4</p>
    <p>ArtMethod hooking4</p>
    <p>Unexpected methods</p>
    <p>Invoke B() in class A</p>
    <p>(inherited from class O)</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>class A: method B: &lt;abc&gt;</p>
    <p>DEX file (mmap) art::</p>
    <p>ArtMethod</p>
    <p>ART code execution</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>ART</p>
    <p>ArtMethod hooking4</p>
    <p>entry_point_</p>
    <p>code_item_offset_</p>
    <p>&lt;trampoline&gt;</p>
    <p>&lt;bad&gt;</p>
    <p>Method entry-point hooking</p>
    <p>Instruction hooking/ modification</p>
    <p>Unexpected instructions mirror:: Class</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Runtime state tampering in ART</p>
    <p>DEX D:</p>
    <p>...</p>
    <p>class A: method B: &lt;abc&gt; ...</p>
    <p>ART</p>
    <p>Bytecode overwriting3</p>
    <p>ArtMethod hooking4</p>
    <p>Method entry-point hooking</p>
    <p>Instruction hooking/ modification</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Deobfuscation  Unified framework to handle language-based and runtime-based obfuscation</p>
    <p>Pure static analysis: imprecise, no run-time information to deobfuscate</p>
    <p>Reflection targets, dynamically loaded code, etc.</p>
    <p>Pure dynamic analysis: lack of code coverage</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Targeted execution</p>
    <p>interesting behavior</p>
    <p>! !  !</p>
    <p>inject inputs</p>
    <p>path constraints</p>
    <p>static</p>
    <p>dynamic</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>interesting behavior</p>
    <p>Dealing with obfuscation</p>
    <p>dynamicinject inputs</p>
    <p>path constraints</p>
    <p>`</p>
    <p>static ? ? ? ? obfuscation</p>
    <p>locations</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>TIRO: A hybrid iterative deobfuscator</p>
    <p>Target</p>
    <p>Run</p>
    <p>Instrument</p>
    <p>Observe</p>
    <p>dynamic</p>
    <p>APK file</p>
    <p>! !  !</p>
    <p>deobfuscated application</p>
    <p>security analysis</p>
    <p>static</p>
    <p>run-time values, extracted code</p>
    <p>instrumented obfuscation locations</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>TargetInstrumentRunObserve</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>}</p>
    <p>Target</p>
    <p>Identify obfuscation locations</p>
    <p>Extract call paths and constraints</p>
    <p>Target (Reflection) onCreate()    Method::invoke()</p>
    <p>Reflection</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>TargetInstrumentRunObserve</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>}</p>
    <p>Target</p>
    <p>Instrument obfuscation location</p>
    <p>Report dynamic values and code</p>
    <p>Instrument</p>
    <p>Instrument log(..., method.getName())</p>
    <p>Target (Reflection) onCreate()    Method::invoke()</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>} Target (Reflection)</p>
    <p>onCreate()    Method::invoke()</p>
    <p>TargetInstrumentRunObserve</p>
    <p>Target</p>
    <p>Generate inputs from targeting</p>
    <p>Inject inputs to run obfuscation locations</p>
    <p>Instrument Run</p>
    <p>Run Log: refl,onCreate,8,foo</p>
    <p>Instrument log(..., method.getName())</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>TargetInstrumentRunObserve</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>}</p>
    <p>Target</p>
    <p>Monitor deobfuscation log</p>
    <p>Extract dynamic values and code</p>
    <p>Instrument Run Observe</p>
    <p>Observe onCreate()  foo()</p>
    <p>Run Log: refl,onCreate,8,foo</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Check ART state</p>
    <p>Record original ART state</p>
    <p>Handling runtime-based obfuscation</p>
    <p>&lt;native&gt;</p>
    <p>! !  !</p>
    <p>hidden &lt;java&gt;</p>
    <p>&lt;java&gt;</p>
    <p>modifies runtime state</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>}</p>
    <p>TRuntime-based deobfuscation</p>
    <p>Example: Instruction hooking</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>}</p>
    <p>art:: ArtMethod</p>
    <p>bar()</p>
    <p>TRuntime-based deobfuscation</p>
    <p>Target &lt;native code&gt;</p>
    <p>entry_point_</p>
    <p>code_item_offset_</p>
    <p>Instrument (ART runtime)</p>
    <p>Run Log: onCreate,7,bar[code_item],xyz</p>
    <p>Extracted DEX: &lt;xyz&gt; Observe</p>
    <p>onCreate()  method_xyz()</p>
    <p>abc</p>
    <p>xyz</p>
    <p>Example: Instruction hooking</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>onCreate() {</p>
    <p>...</p>
    <p>...</p>
    <p>}</p>
    <p>Iterative deobfuscation</p>
    <p>method_xyz() {</p>
    <p>klass.getMethod(decode(vbs));</p>
    <p>...</p>
    <p>} Target (Reflection)</p>
    <p>Example: 2nd iteration</p>
    <p>Target</p>
    <p>Run</p>
    <p>Instrument</p>
    <p>Observe</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Implementation</p>
    <p>Static: Soot framework2 for analysis and instrumentation</p>
    <p>Dynamic:</p>
    <p>Modified AOSP with instrumented ART runtime</p>
    <p>Android 4.4, 5.0, 6.0</p>
    <p>Monitoring process to parse deobfuscation log and extract bytecode</p>
    <p>! !  !</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Evaluation</p>
    <p>Ability to detect and deobfuscate techniques in modern Android malware</p>
    <p>Investigate use of language-based and runtime-based obfuscation in malware</p>
    <p>Deobfuscation performance (in paper)</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>TIRO: Detection and deobfuscation</p>
    <p>Labeled obfuscated samples, categorized by obfuscator/packer</p>
    <p>Language-based Runtime-based TIRO Sensitive APIs</p>
    <p>aliprotect      3 0 44 baiduprotect      2 1 2 dexprotector    4 0 80 ijiamipacker         2 1 93</p>
    <p>naga_pha         2 0 6 qihoopacker     2 3 217 secshell      2 200 287</p>
    <p>Re fle</p>
    <p>ct io n</p>
    <p>D yn</p>
    <p>am ic</p>
    <p>lo ad</p>
    <p>ing N at ive</p>
    <p>m et</p>
    <p>ho ds</p>
    <p>D EX</p>
    <p>fi le</p>
    <p>ho ok</p>
    <p>ing Cl</p>
    <p>as s d</p>
    <p>at a</p>
    <p>ov er</p>
    <p>wr iti ng</p>
    <p>Ar tM</p>
    <p>et ho</p>
    <p>d</p>
    <p>ho ok</p>
    <p>ing</p>
    <p>In str</p>
    <p>uc tio</p>
    <p>n</p>
    <p>ho ok</p>
    <p>ing In str</p>
    <p>uc tio</p>
    <p>n</p>
    <p>ov er</p>
    <p>wr iti ng</p>
    <p>Be fo</p>
    <p>re T</p>
    <p>IR O</p>
    <p>Af te</p>
    <p>r T IR</p>
    <p>O</p>
    <p>Ite ra</p>
    <p>tio ns</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Obfuscation usage in malware</p>
    <p>Obfuscated malware samples from VirusTotal</p>
    <p>Language-based Runtime-based</p>
    <p>Reflection 58.5% DEX file hooking 64.0%</p>
    <p>Dynamic loading 79.9% Class data overwriting 0.7%</p>
    <p>Direct invocation 52.2% ArtMethod hooking 0.5%</p>
    <p>Reflected invocation 0.1% Method entry-point hooking 0.3%</p>
    <p>Native invocation 49.2% Instruction hooking 33.7%</p>
    <p>Native methods 96.8% Instruction overwriting 0.1%</p>
    <p>! ! !</p>
  </div>
  <div class="page">
    <p>UNIVERSITY OF TORONTOT I RO</p>
    <p>Conclusion</p>
    <p>New category of obfuscation techniques in Android: runtime-based obfuscation</p>
    <p>TIRO: A hybrid iterative deobfuscation framework</p>
    <p>Handles both language-based and runtime-based techniques</p>
    <p>Deobfuscates modern malware and uncovers sensitive behaviors</p>
    <p>80% of samples from VirusTotal dataset use runtime-based obfuscation</p>
  </div>
</Presentation>
