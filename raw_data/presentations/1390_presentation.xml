<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Software Engineering Institute Carnegie Mellon University Pittsburgh, PA 15213</p>
    <p>2016 Carnegie Mellon University [[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution. REV-03.18.2016.0</p>
    <p>Can Knowledge of Technical Debt Help Identify Software Vulnerabilities? Robert L. Nord, Ipek Ozkaya, Edward J. Schwartz, Forrest Shull, Rick Kazman</p>
  </div>
  <div class="page">
    <p>Copyright 2016 Carnegie Mellon University</p>
    <p>This material is based upon work funded and supported by the Department of Defense under Contract No. FA8721-05-C-0003 with Carnegie Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center.</p>
    <p>References herein to any specific commercial product, process, or service by trade name, trade mark, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, recommendation, or favoring by Carnegie Mellon University or its Software Engineering Institute.</p>
    <p>NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN AS-IS BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.</p>
    <p>[Distribution Statement A] This material has been approved for public release and unlimited distribution. Please see Copyright notice for non-US Government use and distribution.</p>
    <p>This material may be reproduced in its entirety, without modification, and freely distributed in written or electronic form without requesting formal permission. Permission is required for any other use. Requests for permission should be directed to the Software Engineering Institute at permission@sei.cmu.edu.</p>
    <p>DM-0003863</p>
  </div>
  <div class="page">
    <p>Security Issues</p>
  </div>
  <div class="page">
    <p>What are we measuring?</p>
    <p>Compare with IEEE Std 1044-2009: IEEE Standard Categorization for Software Anomalies.</p>
    <p>Defects: Reliability</p>
    <p>Vulnerabilities: Security</p>
    <p>Technical Debt:</p>
    <p>Modifiability</p>
    <p>defect  error in coding or logic that causes a program to malfunction or to produce incorrect/ unexpected results</p>
    <p>vulnerability  system weakness in the intersection of three elements:  system flaw,  attacker access to the flaw,  attacker capability to exploit</p>
    <p>the flaw</p>
    <p>technical debt  design or implementation construct traced to several locations in the system, that make future changes more costly</p>
  </div>
  <div class="page">
    <p>Technical debt</p>
    <p>Defects</p>
    <p>Technical Debt</p>
    <p>Vulnerabilities</p>
    <p>Not all defects are vulnerabilities, but defect proneness does imply increased vulnerability risks</p>
    <p>Similarly, technical debt increases vulnerability risks.</p>
    <p>Defects are not technical debt, but technical debt as it lingers in the system increases defect proneness.</p>
    <p>Some issues just overlap, making it hard to tease apart!</p>
  </div>
  <div class="page">
    <p>Research question</p>
    <p>Are software components with accrued technical debt more likely to be vulnerability-prone?</p>
  </div>
  <div class="page">
    <p>Data Set</p>
    <p>Chromium project  Began in 2008  Complex web-based application that operates on sensitive information and allows untrusted</p>
    <p>input from both web clients and servers.</p>
    <p>Chromium version: 17.0.963.46 Released: February 8, 2012</p>
    <p>Files: 18,730; 11k files with bugs 289 files with</p>
    <p>vulnerabilities</p>
    <p>Issue range: Feb 1, 2010  Feb 8, 2012</p>
    <p>Issues: #bug: 14k; #security: 79</p>
  </div>
  <div class="page">
    <p>Approach Test for correlations between technical debt prone files and files with known vulnerabilities.</p>
    <p>Identify technical debt apply classification rules to issues extract design problem and rework from issues trace to file indicator from file: bugs and churn indicator from file: design flaws</p>
    <p>Model relationships design concepts technical debt indicators</p>
    <p>Identify software vulnerabilities security label identify indicator from issue: CWE trace to file</p>
    <p>Issue</p>
    <p>Name</p>
    <p>Status</p>
    <p>Priority</p>
    <p>Label: Security, Impact, Severity</p>
    <p>Type: Bug, Bug-Security</p>
    <p>CVE</p>
    <p>Commit History</p>
    <p>Issue</p>
    <p>Code</p>
    <p>Version history Visually denote indicators (CWE, design flaws, bugs and churn) in some way</p>
    <p>Code File</p>
    <p>Name</p>
    <p>LOC</p>
    <p>Age</p>
  </div>
  <div class="page">
    <p>Technical debt</p>
    <p>In software-intensive systems, technical debt is a software design issue that:  Exists in an executable system artifact, such as code, build scripts, data model, automated</p>
    <p>test suites;  Is traced to several locations in the system, implying issues are not isolated but propagate</p>
    <p>throughout the system artifacts.  Has a quantifiable effect on system attributes of interest to developers</p>
    <p>(e.g., increasing defects, negative change in maintainability and code quality indicators).</p>
  </div>
  <div class="page">
    <p>Indicator: Technical Debt Tag</p>
    <p>Enough Info? Y</p>
    <p>N</p>
    <p>Executable? Y</p>
    <p>N</p>
    <p>Not Technical</p>
    <p>Debt</p>
    <p>Not Technical</p>
    <p>Debt</p>
    <p>Type?</p>
    <p>Improvement Type?</p>
    <p>Defect Type?</p>
    <p>Accumulation?</p>
    <p>Not Technical</p>
    <p>Debt</p>
    <p>Technical Debt</p>
    <p>Not Technical</p>
    <p>Debt</p>
    <p>Not Technical</p>
    <p>Debt</p>
    <p>Crash due to large negative number.</p>
    <p>There have been 28 reports from 7 clients 18 reports from 6 clients My sense is that if we patch it here, it will pop-up somewhere else later. hmm ... reopening. the test case crashes a debug build, but not the production build.</p>
    <p>We could just fend off negative numbers near the crash site or we can dig deeper Time permitting, I'm inclined to want to know the root cause. I have confirmed that the original source code does crash the production build, so there must be multiple things going on here.</p>
    <p>on Mining Software Repositories, 327338. ACM, 2016.</p>
  </div>
  <div class="page">
    <p>Finding: Developers Use Technical Debt Concepts</p>
    <p>Developers addressing security issues are using technical debt related concepts (italicized):</p>
    <p>getting to the root cause  understanding the underlying design issues  recording symptoms where changes are taking longer than usual or problems are</p>
    <p>reoccurring  predicting consequences in the longer term  building evidence for a more substantial fix</p>
  </div>
  <div class="page">
    <p>Indicator: Design flaws</p>
    <p>Unstable Interface Modularity Violation Improper Inheritance Cycle</p>
    <p>Xiao, L., Cai, Y., Kazman, R. Design rule spaces: A new form of architecture insight. Proceedings of the 36rd International Conference on Software Engineering, 967977. ACM, 2014.</p>
  </div>
  <div class="page">
    <p>Unstable Interface</p>
  </div>
  <div class="page">
    <p>Modularity Violation</p>
    <p>Shared secret between files Should be extracted as design rules</p>
  </div>
  <div class="page">
    <p>Analysis: Design Flaws - 1</p>
    <p>Increased rates of design flaws are strongly correlated with increased rates of security bugs.</p>
    <p>Design flaws extracted using dependency analysis at the class level within files: unstable interface, modularity violation, improper inheritance, cycles.</p>
    <p>Project Bug/Design Flaw</p>
    <p>Correlation Change/Design Flaw</p>
    <p>Correlation Sec Bug/Design Flaw</p>
    <p>Correlation Chrome 0.987 0.988 0.979</p>
    <p>Feng, Q., Kazman, R., Cai, Y., Mo, R., Xiao, L. Towards an architecture-centric approach to security analysis. Proceedings of the 13th Working IEEE/IFIP Conference on Software Architecture. IEEE, 2016.</p>
  </div>
  <div class="page">
    <p>Analysis: Design Flaws - 2</p>
    <p>Moreover, being involved in more types of design flaws correlates with the presence of vulnerabilities.</p>
    <p># Types of Design Flaws Non-vuln files Vuln files % have vulns.</p>
  </div>
  <div class="page">
    <p>Finding: Evidence of Correlation</p>
    <p>Finding: We see evidence of correlations between vulnerabilities and technical debt indicators such as design flaws and code churn: the more types of design flaws a file is involved in, the higher the likelihood of it also having vulnerabilities; files with vulnerabilities tend to have more code churn.</p>
  </div>
  <div class="page">
    <p>Qualitative and Quantitative Analysis</p>
    <p>Not TD TD</p>
    <p>Detecting Design Flaws in Code</p>
    <p>Classifying TD from Issues labeled Security</p>
    <p>No Design Flaws</p>
    <p>Design Flaws</p>
    <p>technical debt  65 trace to files containing</p>
    <p>design flaws</p>
  </div>
  <div class="page">
    <p>Design Flaws and Future Consequences</p>
    <p>Not TD TD</p>
    <p>Detecting Design Flaws in Code</p>
    <p>Classifying TD from Issues labeled Security</p>
    <p>No Design Flaws</p>
    <p>Design Flaws</p>
  </div>
  <div class="page">
    <p>Partial Evidence</p>
    <p>Design Problem: 23</p>
    <p>Not TD TD</p>
    <p>Detecting Design Flaws in Code</p>
    <p>Classifying TD from Issues labeled Security</p>
    <p>No Design Flaws</p>
    <p>Design Flaws</p>
  </div>
  <div class="page">
    <p>Supplement Static Analysis with Developer Knowledge</p>
    <p>Not TD TD</p>
    <p>Detecting Design Flaws in Code</p>
    <p>Classifying TD from Issues labeled Security</p>
    <p>No Design Flaws</p>
    <p>Design Flaws</p>
  </div>
  <div class="page">
    <p>Multiple Sources of Information</p>
    <p>Our preliminary findings demonstrate that analysis necessitates using code, issue trackers, and commit history in concert.</p>
  </div>
  <div class="page">
    <p>Threats to Validity</p>
    <p>Data quality and size Manual inspection Identification of technical debt and vulnerabilities</p>
  </div>
  <div class="page">
    <p>Summary / Future Work</p>
    <p>Technical debt matters.  Finding 1: When they address security issues, software developers use technical debt</p>
    <p>concepts to discuss design limitations and their consequences on future work.  Finding 2: Correlations between vulnerabilities and technical debt indicators warrant further</p>
    <p>research.</p>
    <p>Future work  Experiment with modifiability and security taxonomies  Apply to additional data sets  Investigate causal links  Codify as design flaws that tools can analyze</p>
  </div>
  <div class="page">
    <p>Contact Information</p>
    <p>Presenter Robert L. Nord Senior Member of Technical Staff Telephone: +1 412.268.5800 Email: info@sei.cmu.edu http://www.sei.cmu.edu/architecture/research/arch_tech_debt/</p>
  </div>
</Presentation>
