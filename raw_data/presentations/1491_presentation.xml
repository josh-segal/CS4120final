<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>STAIR Codes:</p>
    <p>A General Family of Erasure Codes</p>
    <p>for Tolerating Device and Sector Failures</p>
    <p>in Practical Storage Systems</p>
    <p>Mingqiang Li and Patrick P. C. Lee</p>
    <p>The Chinese University of Hong Kong</p>
    <p>FAST 14</p>
  </div>
  <div class="page">
    <p>Device and Sector Failures</p>
    <p>Storage systems susceptible to both device and sector failures</p>
    <p>Device failure: data loss in an entire device</p>
    <p>Sector failure: data loss in a sector</p>
    <p>Annual sector failure rate</p>
    <p>[Bairavasundaram et al.,</p>
    <p>SIGMETRICS 07]</p>
    <p>Annual disk failure rate</p>
    <p>[Pinheiro et al., FAST07]</p>
    <p>Burstiness of sector failures</p>
    <p>[Schroeder et al., FAST 10]</p>
    <p>%</p>
    <p>1</p>
    <p>e +</p>
    <p>o r 5</p>
    <p>B d</p>
    <p>is k</p>
    <p>s (c) Sector failure bursts can</p>
    <p>be long (&gt; 5) (b) Sector failures can be more</p>
    <p>frequent than disk failures</p>
    <p>(a) Annual disk failure rate:</p>
  </div>
  <div class="page">
    <p>Erasure Coding</p>
    <p>Erasure coding: adds redundancy to data</p>
    <p>(N,K) systematic MDS codes</p>
    <p>Encodes K data pieces to create N-K parity pieces</p>
    <p>Stripes the N pieces across disks</p>
    <p>Any K out of N pieces can recover original K data pieces and the</p>
    <p>N-K parity pieces  fault tolerance</p>
    <p>Three erasure coding schemes:</p>
    <p>Traditional RAID and erasure codes (e.g., Reed-Solomon codes)</p>
    <p>Intra-Device Redundancy (IDR)</p>
    <p>Sector-Disk (SD) codes</p>
  </div>
  <div class="page">
    <p>Mixed Failure Scenario</p>
    <p>Consider an example failure scenario with</p>
    <p>m=1 entirely failed device, and</p>
    <p>m=2 partially failed devices with 1 and 3 sector failures</p>
    <p>Question: How can we efficiently tolerate such a</p>
    <p>mixed failure scenario via erasure coding?</p>
  </div>
  <div class="page">
    <p>Traditional RAID and Erasure Codes</p>
    <p>Overkill to use 2 parity devices to tolerate</p>
    <p>m=2 partially failed devices</p>
    <p>Device-level tolerance only 5</p>
    <p>m=1 entirely failed device</p>
    <p>m=2 partially failed devices</p>
  </div>
  <div class="page">
    <p>Intra-Device Redundancy (IDR)</p>
    <p>Still overkill to add parity sectors per data device</p>
    <p>to tolerate a sector failure burst</p>
    <p>of length 3</p>
    <p>m=1 parity</p>
    <p>device</p>
    <p>[Dholakia et al., TOS 2008]</p>
  </div>
  <div class="page">
    <p>Sector-Disk (SD) Codes</p>
    <p>Simultaneously tolerate</p>
    <p>m entirely failed devices</p>
    <p>s failed sectors (per stripe) in partially failed devices</p>
    <p>Construction currently limited to s  3</p>
    <p>How to tolerate our mixed failure scenario?</p>
    <p>m=1 entirely failed device, and</p>
    <p>m=2 partially failed devices with 1 and 3 sector failures</p>
    <p>[Plank et al., FAST 13, TOS14]</p>
    <p>s parity sectors</p>
    <p>m parity devices</p>
  </div>
  <div class="page">
    <p>Sector-Disk (SD) Codes</p>
    <p>Such an SD code is unavailable</p>
    <p>s=4 global parity sectors to</p>
    <p>tolerate any 4 sector failures</p>
    <p>m=1 parity</p>
    <p>device</p>
    <p>[Plank et al., FAST 13, TOS14]</p>
  </div>
  <div class="page">
    <p>Our Work</p>
    <p>Construct a general, space-efficient family of</p>
    <p>erasure codes to tolerate both device and</p>
    <p>sector failures</p>
    <p>a) General: without any restriction on</p>
    <p>size of a storage array,</p>
    <p>number of tolerable device failures, or</p>
    <p>number of tolerable sector failures</p>
    <p>b) Space-efficient:</p>
    <p>number of global parity sectors = number of sector failures</p>
    <p>(like SD codes)</p>
    <p>STAIR</p>
    <p>Codes</p>
  </div>
  <div class="page">
    <p>Key Ideas of STAIR Codes</p>
    <p>Sector failure coverage vector e</p>
    <p>Defines a pattern of how sector failures occur, rather than how</p>
    <p>many sector failures would occur</p>
    <p>Code structure based on two encoding phases</p>
    <p>Each phase builds on an MDS code</p>
    <p>Two encoding methods: upstairs and downstairs encoding</p>
    <p>Reuse computed parity results in encoding</p>
    <p>Provide complementary performance gains</p>
  </div>
  <div class="page">
    <p>Sector Failure Coverage Vector</p>
    <p>SD codes define s</p>
    <p>Tolerate any combination of s sector failures per stripe</p>
    <p>Currently limited to s  3</p>
    <p>STAIR codes define sector failure coverage vector</p>
    <p>e = (e0, e1, e2, , em-1 )</p>
    <p>Bounds # of partially failed devices m</p>
    <p>Bounds # of sector failures per device el (0  l  m -1)</p>
    <p>el = s</p>
    <p>Rationale: sector failures come in small bursts</p>
    <p>Can define small m and reasonable size el for bursts</p>
  </div>
  <div class="page">
    <p>Sector Failure Coverage Vector</p>
    <p>Set e=(1, 3):</p>
    <p>At most 2 devices (aside entirely failed devices) have sector failures</p>
    <p>One device has at most 3 sector failures, and</p>
    <p>Another one has at most 1 sector failure</p>
  </div>
  <div class="page">
    <p>Parity Layout</p>
    <p>e=(1, 3) global parity sectors</p>
    <p>Q: How to generate the e=(1, 3) global parity sectors and</p>
    <p>the m=1 parity device?</p>
    <p>m=1 parity</p>
    <p>device</p>
    <p>A: Use two MDS codes Crow and Ccol</p>
  </div>
  <div class="page">
    <p>Two Encoding Phases</p>
    <p>Phase 1</p>
    <p>Phase 2</p>
    <p>m=1 parity</p>
    <p>device</p>
    <p>e=(1, 3) global parity sectors</p>
    <p>Crow: data  parity devices +</p>
    <p>intermediate parities</p>
    <p>Ccol: intermediate parities</p>
    <p>global parity sectors</p>
    <p>Q: How to keep the global parity sectors inside a stripe?</p>
  </div>
  <div class="page">
    <p>Two Encoding Phases</p>
    <p>m=1 parity</p>
    <p>device</p>
    <p>e=(1, 3) outside</p>
    <p>global parity sectors</p>
    <p>e=(1, 3) inside</p>
    <p>global parity sectors</p>
    <p>A: set outside global parity sectors as zeroes;</p>
    <p>reconstruct inside global parity sectors</p>
    <p>Phase 1</p>
    <p>Phase 2</p>
  </div>
  <div class="page">
    <p>Augmented Rows</p>
    <p>Q: How do we compute inside parity sectors?</p>
    <p>A: Augment a stripe</p>
    <p>Encode each column with Ccol to form augmented rows  Generate virtual parities in augmented rows</p>
    <p>Each augmented row is a codeword of Crow</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Idea: Generate parities in upstairs direction</p>
    <p>Can be generalized as upstairs decoding</p>
    <p>for recovering failures</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
  </div>
  <div class="page">
    <p>Upstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Notes: parity computations reuse</p>
    <p>previously computed parities</p>
  </div>
  <div class="page">
    <p>Downstairs Encoding</p>
    <p>Cannot be generalized for decoding</p>
    <p>Another idea: Generate parities in downstairs direction</p>
  </div>
  <div class="page">
    <p>Downstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Crow: (10,7) code Ccol: (7,4) code</p>
  </div>
  <div class="page">
    <p>Downstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Crow: (10,7) code Ccol: (7,4) code</p>
  </div>
  <div class="page">
    <p>Downstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Crow: (10,7) code Ccol: (7,4) code</p>
  </div>
  <div class="page">
    <p>Downstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Crow: (10,7) code Ccol: (7,4) code</p>
  </div>
  <div class="page">
    <p>Downstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Crow: (10,7) code Ccol: (7,4) code</p>
  </div>
  <div class="page">
    <p>Crow: (10,7) code Ccol: (7,4) code</p>
    <p>Downstairs Encoding</p>
    <p>Detailed steps:</p>
    <p>Like upstairs encoding, parity computations reuse</p>
    <p>previously computed parities</p>
  </div>
  <div class="page">
    <p>Choosing Encoding Methods</p>
    <p>The two methods are</p>
    <p>complementary</p>
    <p>Intuition:</p>
    <p>Choose upstairs</p>
    <p>encoding for large m</p>
    <p>Choose downstairs</p>
    <p>encoding for small m</p>
    <p>Details in paper</p>
    <p>e=(1, 3) with m=2 m=2</p>
    <p>Upstairs</p>
    <p>Downstairs</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementation</p>
    <p>Built on libraries Jerasure [Plank, FAST09] and GF-Complete [Plank, FAST13]</p>
    <p>Testbed machine:</p>
    <p>Intel Core i5-3570 CPU 3.40GHz with SSE4.2</p>
    <p>Comparisons with RS codes and SD codes</p>
    <p>Storage saving</p>
    <p>Encoding/decoding speeds</p>
    <p>Update cost</p>
  </div>
  <div class="page">
    <p>Storage Space Saving</p>
    <p>STAIR codes save devices compared to traditional</p>
    <p>erasure codes using device-level fault tolerance</p>
    <p>s = # of tolerable sector failures</p>
    <p>m = # of partially failed devices</p>
    <p>r = chunk size</p>
  </div>
  <div class="page">
    <p>Encoding Speed</p>
    <p>Encoding speed of STAIR codes is on order of 1000MB/s</p>
    <p>STAIR codes improve encoding speed of SD codes by</p>
    <p>100%, due to parity reuse</p>
    <p>Similar results for decoding</p>
    <p>n = number of devices</p>
    <p>r=16 (sectors per chunk)</p>
  </div>
  <div class="page">
    <p>Update Cost</p>
    <p>n=16 (devices) and r=16 (sectors per chunk)</p>
    <p>Higher update penalty than traditional codes, due to</p>
    <p>global parity sectors</p>
    <p>Good for systems with rare updates (e.g., backup) or</p>
    <p>many full-stripe writes (e.g., SSDs)</p>
    <p>(Update penalty: average # of updated parity sectors for updating a data sector)</p>
    <p>[Plank et al., FAST 13, TOS14]</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>STAIR codes: a general family of erasure codes</p>
    <p>for tolerating both device and sector failures in a</p>
    <p>space-efficient manner</p>
    <p>Complementary upstairs encoding and</p>
    <p>downstairs encoding with improved encoding</p>
    <p>speed via parity reuse</p>
    <p>Open source STAIR Coding Library (in C):</p>
    <p>http://ansrlab.cse.cuhk.edu.hk/software/stair</p>
  </div>
</Presentation>
