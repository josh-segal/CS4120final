<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HyperFlow A Distributed Control Plane for OpenFlow</p>
    <p>Amin Tootoonchian Yashar Ganjali</p>
    <p>System and Networking Group</p>
    <p>Department of Computer Science</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Brief Overview of OpenFlow</p>
    <p>Root cause of network mgmt. &amp; control complexity:</p>
    <p>Tight coupling of control and data planes.</p>
    <p>separates the data and control planes:</p>
    <p>Abstracts switches as programmable flow tables.</p>
    <p>A logically centralized controller programs them.</p>
    <p>But current setups do not scale well.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 2</p>
    <p>OpenFlow extremely simplifies network control &amp; mgmt.</p>
  </div>
  <div class="page">
    <p>A Network with a Single Centralized Controller Does Not Scale.</p>
    <p>Flow setup time for switches farther from controller is larger.</p>
    <p>Single controller can handle a limited number of datapath requests.</p>
    <p>End-to-end control bandwidth is limited.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 3</p>
    <p>Network operators need to deploy multiple controllers.</p>
  </div>
  <div class="page">
    <p>Distributed Control Plane Must Not Sacrifice Simplicity for Scalability!</p>
    <p>Key to OpenFlows simplicity:</p>
    <p>Network control logic centralization.</p>
    <p>Trade-off:</p>
    <p>Scalability (complete distribution)</p>
    <p>Simplicity</p>
    <p>Distributed cp should be scalable, yet transparent to the control logic.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 4</p>
    <p>A distributed cp must keep network control logic centralized.</p>
  </div>
  <div class="page">
    <p>Our Approach: Push All State to All Controllers</p>
    <p>Make each controller think it is the only controller.</p>
    <p>Passively synchronize state among controllers.</p>
    <p>With minor modifications to applications.</p>
    <p>How to synchronize state with minimal modification?</p>
    <p>Capture controller events which affect controller state.  Controller events: e.g., OpenFlow messages (Packet_in_event, ).</p>
    <p>The number of such events is very small.</p>
    <p>Replay these events on all other controllers.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 5</p>
  </div>
  <div class="page">
    <p>HyperFlow Design</p>
    <p>HyperFlow has two components:</p>
    <p>Controller component:  An event logger, player, and OpenFlow command proxy.</p>
    <p>Implemented as a C++ NOX application.</p>
    <p>Event propagation system:  A publish/subscribe system.</p>
    <p>Switches are connected to close controllers.</p>
    <p>Upon controller failure:</p>
    <p>Switches are reconfigured to connect to another controller.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 6</p>
  </div>
  <div class="page">
    <p>Overview of HyperFlow</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 7</p>
  </div>
  <div class="page">
    <p>HyperFlow Controller Component</p>
    <p>Event logger captures &amp; serializes some ctrl events.</p>
    <p>Only captures events which alter the controller state.</p>
    <p>Serializes and publishes the events to the pub/sub.</p>
    <p>Event player deserializes &amp; replays captured events.</p>
    <p>As if they occurred locally.</p>
    <p>Command proxy sends cmds to appropriate switch.</p>
    <p>Sends the replies back to the original sender.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 8</p>
  </div>
  <div class="page">
    <p>Event Propagation System</p>
    <p>The pub/sub system has a network-wide scope.</p>
    <p>It has three channel types:</p>
    <p>Control channel: controllers advertise themselves there.</p>
    <p>Data channel: events of general interest published here.</p>
    <p>Individual controllers channels: send commands and replies to a specific controller.</p>
    <p>Implemented using WheelFS, because:</p>
    <p>WheelFS facilitates rapid prototyping.</p>
    <p>WheelFS is resilient against network partitioning.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 9</p>
  </div>
  <div class="page">
    <p>Are Controllers in Sync?</p>
    <p>How rapidly can network changes occur in HF?</p>
    <p>Yet guarantee a bounded inconsistency window.</p>
    <p>The bottleneck could be either:</p>
    <p>The control bandwidth.</p>
    <p>The publish/subscribe system.</p>
    <p>The publish/subscribe system localizes the HyperFlow sync traffic.</p>
    <p>The control bandwidth problem could be alleviated.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 10</p>
    <p>How many events can HF exchange with pub/sub per sec?</p>
  </div>
  <div class="page">
    <p>How Frequent Can a Network Change?</p>
    <p>Benchmarked WheelFS:</p>
    <p>The number of 3KB-sized files HF can serialize &amp; publish:  233 such events/sec  not a concern (multiple publishers)</p>
    <p>The number of 3KB-sized files HF can read &amp; deserialize:</p>
    <p>987 such events/sec.</p>
    <p>However, HF can handle far larger number of events.</p>
    <p>During spikes inconsistency window is not bounded.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 11</p>
    <p>No. of network changes on avg must be &lt; 1000 events/sec.</p>
    <p>Switch/Host/Link changes</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>HyperFlow enables deploying multiple controllers.</p>
    <p>Keeps network control logic centralized.</p>
    <p>Yet, provides control plane scalability.</p>
    <p>It synchronizes network-wide view among controllers.</p>
    <p>By capturing, propagating &amp; playing a few ctrl events.</p>
    <p>It guarantees bounded window of inconsistency:</p>
    <p>If network changes occur at a rate &lt; 1000 event/sec.</p>
    <p>It is resilient to network partitioning.</p>
    <p>It enables interconnection of OpenFlow islands.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 12</p>
  </div>
  <div class="page">
    <p>Current/Future Work</p>
    <p>We designed OpenBoot to bootstrap controller state very quickly.</p>
    <p>Uses checkpoint/restart + event logging</p>
    <p>Enables rapid recovery from controller failures.</p>
    <p>Enables adaptive control plane scaling.</p>
    <p>Enables continuous control plane operation.</p>
    <p>Improvements to the publish/subscribe system.</p>
    <p>Evaluation on a large testbed with realistic data.</p>
    <p>April 27, 2010 HyperFlow - University of Toronto 13</p>
  </div>
  <div class="page">
    <p>Thanks for your attention.</p>
    <p>Questions?</p>
    <p>amin@cs.toronto.edu</p>
  </div>
</Presentation>
