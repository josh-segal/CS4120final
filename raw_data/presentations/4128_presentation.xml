<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AFL++ Combining Incremental Steps of Fuzzing Research</p>
    <p>Andrea Fioraldi, Dominik Maier, Heiko Eifeldt, Marc Heuse</p>
    <p>@andreafioraldi, @domenuk</p>
    <p>{andrea, dominik}@aflplus.plus</p>
  </div>
  <div class="page">
    <p>American Fuzzy Lop</p>
  </div>
  <div class="page">
    <p>American Fuzzy Lop</p>
    <p>A legendary tool that proved its effectiveness</p>
    <p>A baseline for a wide range of academic and</p>
    <p>industrial research</p>
    <p>No new features after 2017</p>
  </div>
  <div class="page">
    <p>American Fuzzy Lop</p>
    <p>A legendary tool that proved its effectiveness</p>
    <p>A baseline for a wide range of academic and</p>
    <p>industrial research</p>
    <p>No new features after 2017</p>
    <p>Fork it!</p>
  </div>
  <div class="page">
    <p>A lot of Research</p>
    <p>Based on AFL</p>
    <p>AFLFast  AFLSmart  AFL LAF-Intel  AFL MOpt  kAFL    Whatever-AFL</p>
  </div>
  <div class="page">
    <p>Works On Fuzzer Scheduling</p>
    <p>Seed scheduling [AFLFast]</p>
    <p>How much time should we fuzz a test case?</p>
    <p>Mutation scheduling [MOpt]</p>
    <p>Probability for each mutational operator</p>
  </div>
  <div class="page">
    <p>Works On Bypassing Roadblocks</p>
    <p>Feedback for comparisons [LAF-Intel]</p>
    <p>Split multi-byte comparisons</p>
    <p>Input-to-state replacement [Redqueen (kAFL)]</p>
    <p>Guess the input bytes that affect a</p>
    <p>comparison and replace it with the extracted</p>
    <p>token</p>
  </div>
  <div class="page">
    <p>Structured Mutators</p>
    <p>Take input structure into account [AFLSmart]</p>
    <p>Avoid to generate almost always invalid inputs</p>
    <p>Stress more deep paths</p>
  </div>
  <div class="page">
    <p>Speed Enhancements</p>
    <p>Reduce the number of instrumented program points</p>
    <p>while maintaining the same coverage [Instrim]</p>
    <p>Get rid of fork() and fuzz with snapshots</p>
    <p>[Opt-AFL]</p>
    <p>Inline instrumentation and re-enable TB linking</p>
    <p>in QEMU mode [abiondo-AFL]</p>
  </div>
  <div class="page">
    <p>What if I Want to Use X AND Y?</p>
    <p>Orthogonal techniques not easy to combine</p>
    <p>Research fuzzers often unmaintained</p>
    <p>Some techniques are not implemented on top of the</p>
    <p>original AFL</p>
  </div>
  <div class="page">
    <p>I created Z AND I want X</p>
    <p>If you peak one of the derived fuzzers as</p>
    <p>baseline you may be incompatible with other</p>
    <p>orthogonal techniques</p>
    <p>Hard to evaluate techniques without the relation</p>
    <p>with others (e.g. a new type of coverage without</p>
    <p>having a roadblock bypassing technique)</p>
  </div>
  <div class="page">
    <p>Here comes</p>
  </div>
  <div class="page">
    <p>The AFL++ Project</p>
    <p>Integrates and reimplements fuzzing techniques in</p>
    <p>a single framework, AFL++</p>
    <p>Ongoing research and new insights about fuzzing</p>
    <p>using such framework</p>
    <p>We improve the state of the art combining</p>
    <p>techniques and tuning the implementations</p>
  </div>
  <div class="page">
    <p>Usability</p>
    <p>All techniques are integrated in afl-fuzz</p>
    <p>Best-effort defaults</p>
    <p>Users familiar with AFL benefit from cutting-edge</p>
    <p>research without pain</p>
  </div>
  <div class="page">
    <p>Extensibility</p>
    <p>To enable further research to do</p>
    <p>cross-comparisons with a reduced effort, we</p>
    <p>defined a set of API to extend AFL++, the Custom</p>
    <p>Mutator API</p>
  </div>
  <div class="page">
    <p>Custom Mutator API afl_custom_fuzz</p>
    <p>afl_custom_post_process</p>
    <p>afl_custom_trim</p>
    <p>afl_custom_havoc_mutation</p>
    <p>afl_custom_havoc_mutation_probability</p>
    <p>afl_custom_queue_get</p>
    <p>afl_custom_queue_new_entry</p>
  </div>
  <div class="page">
    <p>INSTRUMENT ALL THE THINGS</p>
    <p>We extended techniques to work with other</p>
    <p>instrumentation backends.</p>
    <p>For Example: QEMU &amp; Unicorn modes can split</p>
    <p>comparisons in a similar way to LLVM LAF-Intel</p>
    <p>Currently supported instrumentations are LLVM,</p>
    <p>QEMU, Unicorn, QBDI, GCC plugin, afl-gcc</p>
  </div>
  <div class="page">
    <p>Runs on Everything</p>
    <p>AFL++ builds and runs on GNU/Linux, Android,</p>
    <p>iOS, macOS, FreeBSD, OpenBSD, NetBSD, IllumOS,</p>
    <p>Haiku, Solaris</p>
    <p>It is packaged in popular distributions like</p>
    <p>Debian, Ubuntu, NixOS, Arch Linux, FreeBSD, Kali</p>
    <p>Linux, ...</p>
  </div>
  <div class="page">
    <p>Cross Evaluations Using AFL++ as baseline</p>
    <p>gives you immediate access</p>
    <p>to cross evaluation of</p>
    <p>your technique combined</p>
    <p>with pre-existing works</p>
    <p>Examples:</p>
    <p>[Default]</p>
    <p>Ngram4</p>
    <p>MOpt</p>
    <p>Redqueen</p>
  </div>
  <div class="page">
    <p>Cross-Evaluations (libpcap)  Redqueen</p>
    <p>Redqueen+MOpt</p>
    <p>MOpt</p>
    <p>Ngram4</p>
    <p>Ngram4+Rare</p>
    <p>[Default]</p>
  </div>
  <div class="page">
    <p>Cross-Evaluations (bloaty)  Redqueen</p>
    <p>Redqueen+MOpt</p>
    <p>MOpt</p>
    <p>Ngram4</p>
    <p>Ngram4+Rare</p>
    <p>[Default]</p>
  </div>
  <div class="page">
    <p>Optimal Configuration</p>
    <p>Observe several runs of AFL++ in different</p>
    <p>configuration on the same target for a while</p>
    <p>Try to catch blind spots and select the best</p>
    <p>combination of features</p>
    <p>Profit</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Static analysis for optimal fuzz settings</p>
    <p>Multicore linear scaling</p>
    <p>Plugin system (executors, queues, feedbacks, )</p>
    <p>Collision-free instrumentation</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>AFL++ enhances comparability of research</p>
    <p>We further improve the state-of-the-art with</p>
    <p>speed, usability, new features</p>
    <p>AFL++s custom mutator API can be used to</p>
    <p>implement novel research in a maintainable way</p>
  </div>
  <div class="page">
    <p>AFL++ is FOSS!</p>
    <p>https://aflplus.plus/</p>
    <p>https://github.com/AFLplusplus</p>
  </div>
  <div class="page">
    <p>Thank you for your attention.</p>
  </div>
</Presentation>
