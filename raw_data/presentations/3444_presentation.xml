<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>WPSE: FORTIFYING WEB PROTOCOLS VIA BROWSER-SIDE SECURITY</p>
    <p>MONITORING Stefano Calzavara Riccardo Focardi</p>
    <p>Matteo Maffei Clara SchneidewindMarco Squarcina</p>
    <p>Mauro Tempesta</p>
    <p>August 17, 2018 - 27th Usenix Security Symposium</p>
  </div>
  <div class="page">
    <p>OVERVIEW OF A WEB PROTOCOL</p>
    <p>!2 RP IdP</p>
  </div>
  <div class="page">
    <p>OVERVIEW OF A WEB PROTOCOL</p>
    <p>!2 RP IdP</p>
  </div>
  <div class="page">
    <p>OVERVIEW OF A WEB PROTOCOL</p>
    <p>!2 RP IdP</p>
  </div>
  <div class="page">
    <p>OVERVIEW OF A WEB PROTOCOL</p>
    <p>!2</p>
    <p>user = MrStorm, pwd =</p>
    <p>RP IdP</p>
  </div>
  <div class="page">
    <p>MOTIVATIONS</p>
    <p>Designing and implementing web protocols is HARD!  Bansal et al. - Discovering Concrete Attacks on Website Authorization by Formal Analysis (S&amp;P 12)  Wang et al. - Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided</p>
    <p>Security Study of Commercially Deployed Single-Sign-On Web Services (S&amp;P 12)  Sun and Beznosov - The Devil is in the (Implementation) Details: An Empirical Analysis of OAuth</p>
    <p>SSO Systems (CCS 12)  Fett et al. - A Comprehensive Formal Security Analysis of OAuth 2.0 (CCS 16)</p>
    <p>!3</p>
  </div>
  <div class="page">
    <p>MOTIVATIONS</p>
    <p>Designing and implementing web protocols is HARD!  Bansal et al. - Discovering Concrete Attacks on Website Authorization by Formal Analysis (S&amp;P 12)  Wang et al. - Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided</p>
    <p>Security Study of Commercially Deployed Single-Sign-On Web Services (S&amp;P 12)  Sun and Beznosov - The Devil is in the (Implementation) Details: An Empirical Analysis of OAuth</p>
    <p>SSO Systems (CCS 12)  Fett et al. - A Comprehensive Formal Security Analysis of OAuth 2.0 (CCS 16)</p>
    <p>!3</p>
    <p>WHY?</p>
  </div>
  <div class="page">
    <p>MOTIVATIONS</p>
    <p>Designing and implementing web protocols is HARD!  Bansal et al. - Discovering Concrete Attacks on Website Authorization by Formal Analysis (S&amp;P 12)  Wang et al. - Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided</p>
    <p>Security Study of Commercially Deployed Single-Sign-On Web Services (S&amp;P 12)  Sun and Beznosov - The Devil is in the (Implementation) Details: An Empirical Analysis of OAuth</p>
    <p>SSO Systems (CCS 12)  Fett et al. - A Comprehensive Formal Security Analysis of OAuth 2.0 (CCS 16)</p>
    <p>!3</p>
    <p>WHY?The browser is not aware of the existence of web protocols and of their semantics!</p>
  </div>
  <div class="page">
    <p>OUR PROPOSAL - WPSE</p>
    <p>!4</p>
    <p>Extend the browser with a lightweight security monitor that enforces the compliance of the browser behaviors</p>
    <p>with respect to the web protocol specifications</p>
  </div>
  <div class="page">
    <p>OUR PROPOSAL - WPSE</p>
    <p>!4</p>
    <p>Extend the browser with a lightweight security monitor that enforces the compliance of the browser behaviors</p>
    <p>with respect to the web protocol specifications</p>
    <p>Implemented as a</p>
    <p>Google Chrome extension</p>
  </div>
  <div class="page">
    <p>OUR PROPOSAL - WPSE</p>
    <p>!4</p>
    <p>Extend the browser with a lightweight security monitor that enforces the compliance of the browser behaviors</p>
    <p>with respect to the web protocol specifications</p>
    <p>Advantages: 1. users of vulnerable websites are automatically protected against a large</p>
    <p>class of attacks 2. specifications can be written once and enforced on several sites</p>
    <p>Implemented as a</p>
    <p>Google Chrome extension</p>
  </div>
  <div class="page">
    <p>SECURITY CHALLENGES IN WEB PROTOCOLS</p>
    <p>!5</p>
    <p>Compliance with the protocol flow  Preserve the intended sequence of messages</p>
    <p>exchanged by honest participants  Perform integrity checks on the contents of protocol</p>
    <p>messages</p>
    <p>Secrecy of message components  Enforce the confidentiality of protocol secrets like</p>
    <p>tokens and credentials</p>
  </div>
  <div class="page">
    <p>TACKLING THE CHALLENGES IN WPSE</p>
    <p>WPSE protocol specification:  Structure and order of messages  Desired security policies (confidentiality and integrity)</p>
  </div>
  <div class="page">
    <p>TACKLING THE CHALLENGES IN WPSE</p>
    <p>Protocol messages are blocked if  not in the correct order  integrity constraints on messages are not satisfied</p>
    <p>Always allow protocol unrelated messages</p>
    <p>Secrets in incoming messages are substituted with random placeholders before they enter the DOM</p>
    <p>Placeholders in outgoing requests are replaced with secrets only if sent to origins entitled to learn them</p>
  </div>
  <div class="page">
    <p>FORTIFYING OAUTH 2.0</p>
    <p>user = MrStorm, pwd =</p>
    <p>!7</p>
    <p>RP_id, rdr_uri, state</p>
    <p>RP IdP</p>
    <p>U</p>
    <p>Login form</p>
    <p>auth_code, state</p>
    <p>rdr_uri4</p>
  </div>
  <div class="page">
    <p>FORTIFYING OAUTH 2.0</p>
    <p>user = MrStorm, pwd =</p>
    <p>!7 RP IdP</p>
    <p>U</p>
    <p>Login form</p>
    <p>WPSE</p>
    <p>Protocol Flow 2  3  4</p>
    <p>with same rdr_uri and state in steps 2, 4</p>
    <p>RP_id, rdr_uri, state</p>
    <p>auth_code, state</p>
    <p>rdr_uri</p>
  </div>
  <div class="page">
    <p>FORTIFYING OAUTH 2.0</p>
    <p>user = MrStorm, pwd =</p>
    <p>!7 RP IdP</p>
    <p>U</p>
    <p>Login form</p>
    <p>WPSE</p>
    <p>Protocol Flow 2  3  4</p>
    <p>with same rdr_uri and state in steps 2, 4</p>
    <p>Secrecy RP &lt; auth_code, state &gt; IdP</p>
    <p>RP_id, rdr_uri, state</p>
    <p>auth_code, state</p>
    <p>rdr_uri</p>
  </div>
  <div class="page">
    <p>SESSION SWAPPING [SB12]</p>
    <p>!8</p>
    <p>user = h4ckerb0y, pwd =</p>
    <p>RP_id, rdr_uri</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>A auth_code</p>
    <p>!8</p>
    <p>U</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>SESSION SWAPPING [SB12]</p>
    <p>!8</p>
    <p>user = h4ckerb0y, pwd =</p>
    <p>RP_id, rdr_uri</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>A auth_code</p>
    <p>!8</p>
    <p>U</p>
    <p>A</p>
    <p>Gimme torrents plz!</p>
  </div>
  <div class="page">
    <p>SESSION SWAPPING [SB12]</p>
    <p>!8</p>
    <p>user = h4ckerb0y, pwd =</p>
    <p>RP_id, rdr_uri</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>A auth_code</p>
    <p>rdr_uri 4</p>
    <p>!8</p>
    <p>U</p>
    <p>A</p>
    <p>Gimme torrents plz! A auth_code</p>
  </div>
  <div class="page">
    <p>SESSION SWAPPING [SB12]</p>
    <p>!8</p>
    <p>user = h4ckerb0y, pwd =</p>
    <p>RP_id, rdr_uri</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>A auth_code</p>
    <p>rdr_uri 4</p>
    <p>!8</p>
    <p>U</p>
    <p>A</p>
    <p>Gimme torrents plz! A auth_code</p>
    <p>Protoc ol flow</p>
    <p>violat ion!</p>
    <p>Reque st bloc</p>
    <p>ked b y WPS</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>STATE LEAK ATTACK [FKS16]</p>
    <p>!9</p>
    <p>user = MrStorm, pwd =</p>
    <p>RP_id, rdr_uri, state</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>rdr_uri4</p>
    <p>!9</p>
    <p>U</p>
    <p>auth_code, state</p>
  </div>
  <div class="page">
    <p>STATE LEAK ATTACK [FKS16]</p>
    <p>!9</p>
    <p>user = MrStorm, pwd =</p>
    <p>RP_id, rdr_uri, state</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>rdr_uri4</p>
    <p>!9</p>
    <p>U</p>
    <p>Attackers website</p>
    <p>auth_code, state</p>
    <p>Referer header auth_code, state</p>
  </div>
  <div class="page">
    <p>STATE LEAK ATTACK [FKS16]</p>
    <p>!9</p>
    <p>user = MrStorm, pwd =</p>
    <p>RP_id, rdr_uri, state</p>
    <p>RP IdP</p>
    <p>Login form</p>
    <p>rdr_uri4</p>
    <p>!9</p>
    <p>U</p>
    <p>Attackers website</p>
    <p>auth_code, state</p>
    <p>Referer header auth_code, state</p>
    <p>WPSE replaces secret data</p>
    <p>with random placeholders</p>
    <p>? ? ?</p>
  </div>
  <div class="page">
    <p>FORMAL RESULTS</p>
    <p>(H1) The protocol fulfills safety property P with a benign webpage</p>
    <p>(H2) WPSE allows only a subset of the I/O sequences performed by the browser in a honest protocol run</p>
    <p>(H3) Secrets are not leaked and securely stored by the browser</p>
    <p>!10</p>
  </div>
  <div class="page">
    <p>FORMAL RESULTS</p>
    <p>(H1) The protocol fulfills safety property P with a benign webpage</p>
    <p>(H2) WPSE allows only a subset of the I/O sequences performed by the browser in a honest protocol run</p>
    <p>(H3) Secrets are not leaked and securely stored by the browser</p>
    <p>!10</p>
    <p>The protocol fulfills P with a compromised browser monitored by WPSE</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL EVALUATION</p>
    <p>Manual investigation of 30 RPs for each IdP from Alexa top 100K  Analyzed both authorization code mode and implicit mode of OAuth 2.0</p>
    <p>!11</p>
    <p>Security</p>
    <p>Leakage of sensitive data due to advertisement libraries (4 RPs)</p>
    <p>Lack or misuse of the state parameter (55 RPs)</p>
    <p>Compatibility</p>
    <p>Problems due to security critical deviations in the protocol flow (7 RPs), e.g. auth code is sent twice, second time over HTTP</p>
  </div>
  <div class="page">
    <p>A NEW ATTACK AGAINST GOOGLE IMPLEMENTATION OF SAML 2.0</p>
    <p>!12</p>
    <p>Similar to the session swapping attack presented before  Login CSRF against Google Suite applications (Google Drive, GMail, )</p>
  </div>
  <div class="page">
    <p>A NEW ATTACK AGAINST GOOGLE IMPLEMENTATION OF SAML 2.0</p>
    <p>!12</p>
    <p>Feb 4</p>
    <p>Report to Google</p>
    <p>Similar to the session swapping attack presented before  Login CSRF against Google Suite applications (Google Drive, GMail, )</p>
  </div>
  <div class="page">
    <p>A NEW ATTACK AGAINST GOOGLE IMPLEMENTATION OF SAML 2.0</p>
    <p>!12</p>
    <p>Feb 4 Feb 27</p>
    <p>Report to Google</p>
    <p>Similar to the session swapping attack presented before  Login CSRF against Google Suite applications (Google Drive, GMail, )</p>
  </div>
  <div class="page">
    <p>A NEW ATTACK AGAINST GOOGLE IMPLEMENTATION OF SAML 2.0</p>
    <p>!12</p>
    <p>Feb 4 Feb 27</p>
    <p>Apr 25</p>
    <p>Report to Google</p>
    <p>Similar to the session swapping attack presented before  Login CSRF against Google Suite applications (Google Drive, GMail, )</p>
  </div>
  <div class="page">
    <p>SUMMING UP</p>
    <p>!13</p>
    <p>Lightweight policies on the client-side suffice to enforce provable security guarantees in web protocols</p>
  </div>
  <div class="page">
    <p>SUMMING UP</p>
    <p>Support for additional protocols e.g., e-payments  Automatic techniques to synthesize WPSE policies</p>
    <p>from protocol specifications / browser traffic  Embed WPSE into real browsers</p>
    <p>!13</p>
    <p>Lightweight policies on the client-side suffice to enforce provable security guarantees in web protocols</p>
  </div>
  <div class="page">
    <p>THANK YOU! QUESTIONS?</p>
    <p>tempesta@unive.it</p>
    <p>https://sites.google.com/site/wpseproject/</p>
  </div>
</Presentation>
