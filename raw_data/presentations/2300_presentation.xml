<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Alan Roytman (UCLA)</p>
    <p>Joint work with:</p>
    <p>Aman Kansal (Microsoft Research), Sriram Govindan (Microsoft),</p>
    <p>Jie Liu (Microsoft Research), Suman Nath (Microsoft Research)</p>
  </div>
  <div class="page">
    <p>Idle power = 50 to 70%</p>
    <p>Adding more work to active server is more efficient</p>
    <p>Server cost is the largest expense for data centers</p>
    <p>Data centers operate at very low utilization</p>
    <p>Eg. Microsoft: over 34% servers at less than 5% utilization (daily average). US average 4%.</p>
    <p>VM Consolidation increases utilization, decreases idling costs</p>
    <p>[Chen et al, NSDI 08]</p>
  </div>
  <div class="page">
    <p>But VM consolidation degrades performance due to interference in the memory hierarchy</p>
    <p>Interference occurs throughout memory hierarchy (e.g., multiple cores can share a cache)</p>
    <p>[Govindan-Liu-KansalSivasubramaniam 2011] 3</p>
    <p>Memory Hierarchy</p>
    <p>App 2</p>
    <p>Core 1</p>
    <p>Interference is here</p>
    <p>App 2</p>
    <p>Core 2</p>
  </div>
  <div class="page">
    <p>How do we minimize resource cost while staying within a performance bound?</p>
    <p>(e.g., minimize energy consumption or active machines)</p>
    <p>How do we maximize the worst case performance?</p>
    <p>(e.g., Map-Reduce)</p>
    <p>performance</p>
    <p>Energy cost</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Performance Aware Consolidation Manager</p>
    <p>Performance-Mode: Minimize Energy Under Constraint</p>
    <p>Energy-Mode: Minimize Maximum Degradation</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>C u s to</p>
    <p>m e r</p>
    <p>V M</p>
    <p>s</p>
    <p>PACMan</p>
    <p>Conservatively Packed Servers</p>
    <p>VM Profiling Engine</p>
    <p>Hosting Racks</p>
    <p>C lo</p>
    <p>u d D</p>
    <p>e p</p>
    <p>lo y m</p>
    <p>e n t</p>
    <p>A P I</p>
  </div>
  <div class="page">
    <p>A B C D E F</p>
    <p>Machine 1 Machine 2 Machine 3 Machine 4 Machine 5 Machine 6</p>
    <p>Degradation = 1</p>
    <p>Each machine incurs a cost of 50 for being active, plus 10 per VM assigned Total cost of schedule = 6 * (50 + 10) = 360</p>
  </div>
  <div class="page">
    <p>Degradation</p>
  </div>
  <div class="page">
    <p>Minimize Energy Under Performance Constraint</p>
    <p>We have  VMs, along with a degradation constraint   1, machines with  cores</p>
    <p>We are given feasible sets    (all VMs experience degradation at most )</p>
    <p>Each set  has a cost () (e.g., energy)</p>
    <p>Goal: min</p>
    <p>()</p>
  </div>
  <div class="page">
    <p>We give a polynomial time optimal solution for the two-core case</p>
    <p>Bad news: for   3 cores, this problem is NP-Complete</p>
    <p>Good news: we design and analyze an approximation algorithm with approximation ratio  =   ln()</p>
    <p>We can solve it close to optimal!</p>
  </div>
  <div class="page">
    <p>This problem is approximable within a factor</p>
    <p>=  = =1  1</p>
    <p>ln()</p>
    <p>This means, for all inputs:    ()</p>
    <p>Proof similar to the -Set Cover Problem</p>
    <p>Need two assumptions:</p>
    <p>Closure Under Subsets:  feasible implies any subset    is feasible</p>
    <p>Monotonicity: If   , then    ()</p>
  </div>
  <div class="page">
    <p>First consider the case when all costs are 1 (minimizing cost = minimizing # machines)</p>
    <p>Algorithm:</p>
    <p>Sort sets (ascending order) according to 1</p>
    <p>||</p>
    <p>Greedily pick disjoint sets going down the list</p>
  </div>
  <div class="page">
    <p>Suppose there are  = 5 VMs and  = 3 cores</p>
    <p>Sorted order:</p>
    <p>{A,B,C} {A,B} {A,C} {B,C} {D,E} {A} {B} {C}</p>
    <p>Solution uses two machines</p>
    <p>{A,B} {A,C} {B,C} {A,B,C} {D,E} {A} {B} {C} {A,B,D} {A,B,E}</p>
    <p>||</p>
  </div>
  <div class="page">
    <p>The proof generalizes to the case when the costs of sets can be arbitrary!</p>
    <p>e.g.,   =  +  ,   = max</p>
    <p>New Algorithm:</p>
    <p>Sort sets (ascending order) according to ()</p>
    <p>||</p>
    <p>Greedily pick disjoint sets going down the list</p>
  </div>
  <div class="page">
    <p>We can solve the two-core case optimally and efficiently</p>
    <p>For more cores, the problem is NP-Complete</p>
    <p>We give an asymptotically tight approximation algorithm with   ln</p>
    <p>The algorithm is greedy and easy to implement</p>
  </div>
  <div class="page">
    <p>Max Degradation</p>
  </div>
  <div class="page">
    <p>Minimizing Maximum Degradation</p>
    <p>Input is similar to before:  VMs,  machines,  cores</p>
    <p>For a set  of VMs, VM    experiences degradation</p>
    <p>1</p>
    <p>New Objective Function:</p>
    <p>Goal: Minimize max 1</p>
    <p>max</p>
    <p>( is the set of VMs</p>
    <p>on server )</p>
  </div>
  <div class="page">
    <p>For two cores, the problem is polynomialtime solvable</p>
    <p>We give an inapproximability result for this problem</p>
    <p>We give heuristics since the problem is provably difficult to approximate</p>
  </div>
  <div class="page">
    <p>We implement a greedy heuristic:  Start from an arbitrary initial schedule</p>
    <p>For all ways of swapping VMs, go to the schedule with smallest sum of maximum degradations</p>
    <p>We set number of swaps to be  =   1    1</p>
    <p>{A,B,C} {D,E,F}</p>
    <p>{A,E,C} {D,B,F}</p>
  </div>
  <div class="page">
    <p>Small inputs:</p>
    <p>= 16 VMs, on servers with k = 4 cores</p>
    <p>Can compute optimal solution for small instances</p>
    <p>Large inputs:</p>
    <p>Up to  = 1000 VMs, on servers with  = 4 cores</p>
    <p>Compare solutions against a lower bound</p>
    <p>Use real-world degradations with SPEC CPU 2006 applications (lbm, soplex, povray, sjeng)</p>
  </div>
  <div class="page">
    <p>We use costs   =  +  , where  = 4</p>
    <p>Comparison against OPT</p>
    <p>Nave leaves every other core empty, which is the current practice [Mars-Tang-Hundt-Skadron-Soffa 2011]</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Comparison against lower bound</p>
  </div>
  <div class="page">
    <p>Comparison against OPT</p>
    <p>Up to  =   1    1 = 9 swaps</p>
    <p>Nave solution randomly places VMs, error bars show standard deviation for 10 runs</p>
  </div>
  <div class="page">
    <p>Reduction in degradation relative to nave solution</p>
    <p>Up to 1000 VMs</p>
  </div>
  <div class="page">
    <p>Amortized cost calculation for data centers</p>
    <p>22% reduction in costs when comparing Performance-Mode algorithm to current practice</p>
    <p>For 10MW data centers, costs are reduced from $2.8M to $2.2M per month (costs are related to energy expenditure)</p>
    <p>James Hamilton estimate, Reference: http://perspectives.mvdirona.com/content/binary/ OverallDataCenterCostAmortization.xlsx</p>
  </div>
  <div class="page">
    <p>[Jiang-Shen-Chen-Tripathi 2008]  Consider minimizing sum of degradations</p>
    <p>2-core case is poly-time solvable</p>
    <p>-core is NP-Complete for   3 (give heuristics)</p>
    <p>[Tian-Jiang-Shen 2009]  Consider different length tasks, allow migrations</p>
    <p>[Jiang-Tian-Shen 2010]  Proactive co-scheduling, heuristic runtime</p>
    <p>scheduler</p>
  </div>
  <div class="page">
    <p>Give a provably near-optimal algorithm such that resource waste is minimized</p>
    <p>Consider new objectives for the VM consolidation problem: Performance-Mode and Energy-Mode</p>
    <p>Important for energy minimization to consider cache interference</p>
    <p>Even small percentage improvement can have huge practical impact</p>
  </div>
  <div class="page">
    <p>Energy-Mode: consider variable number of swaps while incurring cost for each swap</p>
    <p>Consider online versions of all variants</p>
    <p>Perform more experiments on real data centers</p>
  </div>
  <div class="page"/>
</Presentation>
