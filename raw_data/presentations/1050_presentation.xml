<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Elastic Memory Management for Cloud Data Analytics</p>
    <p>Jingjing Wang and Magdalena Balazinska</p>
  </div>
  <div class="page">
    <p>Large-Scale Cloud Data Analytics</p>
    <p>Large-Scale Data</p>
    <p>Myria Spark</p>
    <p>Hadoop</p>
    <p>Impala</p>
    <p>Memory Giraph</p>
    <p>Memory intensive  Deployed on clusters  Shared environments</p>
    <p>Memory Management</p>
  </div>
  <div class="page">
    <p>Myria Query</p>
    <p>Container-Based Cloud Memory Management</p>
    <p>Spark App</p>
    <p>Myria Query</p>
    <p>Resource ManagerSpark App</p>
    <p>Myria Query</p>
    <p>Containers</p>
    <p>Hard limits: Good for isolation but lack flexibility  Estimating memory usage before execution is hard</p>
  </div>
  <div class="page">
    <p>Q u</p>
    <p>er y</p>
    <p>T im</p>
    <p>e (s</p>
    <p>)</p>
    <p>Myria Spark 1.1 Spark 2.0</p>
    <p>Inaccurate Memory Estimates Affect Performance</p>
    <p>Application failures due to out-of-memory  Performance degradation due to garbage collection</p>
    <p>OOM</p>
  </div>
  <div class="page">
    <p>Our Approach: ElasticMem  Make container memory limits dynamic</p>
    <p>Allocate memory to multiple applications  Perform actions: garbage collection, change mem limits, etc</p>
    <p>Predict how memory actions affect performance  Use predictions to drive memory allocation decisions</p>
    <p>Our focus: analytical (relational) queries in Java-based containers (JVM)</p>
  </div>
  <div class="page">
    <p>Our Approach: ElasticMem  Make container memory limits dynamic</p>
    <p>Allocate memory to multiple applications  Perform actions: garbage collection, change mem limits, etc</p>
    <p>Predict how memory actions affect performance  Use predictions to drive memory allocation decisions</p>
  </div>
  <div class="page">
    <p>Implementing Dynamic Heap Adjustment in a JVM</p>
    <p>OpenJDK has a rigid design:  Reserve heap space based on user-specified value  Cannot be changed during runtime</p>
    <p>But memory overcommitting + 64-bit address space opens up an opportunity  Reserve and commit a large address space  Does not physically occupy memory</p>
    <p>Adjust limits according to actual usage</p>
  </div>
  <div class="page">
    <p>Implementing Dynamic Heap Adjustment in a JVM</p>
    <p>Change limit (GROW)</p>
    <p>GC (Shrink) DeadLive</p>
    <p>Resource Manager</p>
    <p>JVM</p>
    <p>Socket</p>
    <p>Kill</p>
    <p>Live</p>
    <p>Actions</p>
    <p>(OpenJDK 7)</p>
    <p>Dynamic limit</p>
    <p>Used</p>
  </div>
  <div class="page">
    <p>Our Approach: ElasticMem  Make container memory limits dynamic</p>
    <p>Allocate memory to multiple applications  Perform actions: garbage collection, change mem limits, etc</p>
    <p>Predict how memory actions affect performance  Use predictions to drive memory allocation decisions</p>
  </div>
  <div class="page">
    <p>Dynamic Memory Allocation</p>
    <p>Problem description:  Multiple queries sharing memory  At each timestep, allocate memory by performing actions</p>
    <p>Goal: Reduce query times and failures  0-1 knapsack problem:  Capacity: total memory  Items: JVM memory usages after performing actions  Item value: defined on multiple attributes</p>
  </div>
  <div class="page">
    <p>Dynamic Memory Allocation</p>
    <p>Spark App</p>
    <p>Myria Query</p>
    <p>Spark App</p>
    <p>Myria Query</p>
    <p>GC GROW</p>
    <p>Spark App</p>
    <p>GROW</p>
    <p>Myria Query</p>
    <p>KILL</p>
    <p>Spark App</p>
    <p>Myria Query</p>
    <p>Spark App</p>
    <p>Myria Query</p>
    <p>PAUSE GROW</p>
    <p>GROWGROW</p>
  </div>
  <div class="page">
    <p>Values of Actions and States</p>
    <p>Kill (KILL): # of killed queries, fewer is better  Pause (NOOP): # of paused queries, fewer is better  Cost to acquire more memory (cost)  Time/space efficiency</p>
    <p>Action Value.KILL Value.NOOP Value.cost KILL 1 0 N/A</p>
    <p>NOOP 0 1 N/A</p>
    <p>Others 0 0 time / space</p>
    <p>Value of a state: sum of action values  Lexicographic order</p>
  </div>
  <div class="page">
    <p>Values of Actions: Time and Space</p>
    <p>Increase memory limit (GROW):  Space: estimated heap growth  Maximum heap usage change in the past few timesteps</p>
    <p>Time: acquiring and accessing memory from OS  Run a calibration program</p>
    <p>Reclaim memory (GC actions)  Space: size of recycled memory  Time: GC time  How to predict them from heap states?</p>
  </div>
  <div class="page">
    <p>Our Approach: ElasticMem  Make container memory limits dynamic</p>
    <p>Allocate memory to multiple applications  Perform actions: garbage collection, change mem limits, etc</p>
    <p>Predict how memory actions affect performance  Use predictions to drive memory allocation decisions</p>
  </div>
  <div class="page">
    <p>Build Performance Models from Heap States</p>
    <p>Our focus: analytical (relational) queries  Large in-memory data structures</p>
    <p>Pick hash tables as our focus  Predict time &amp; space for different GCs from stats</p>
    <p>Join</p>
    <p>Aggregate</p>
    <p>Select Select</p>
    <p>Hash Table  2</p>
    <p>Hash Table</p>
  </div>
  <div class="page">
    <p>Features of Hash Tables</p>
    <p>Alice Bob Carol</p>
    <p>Alice</p>
    <p># of tuples  # of keys  Schema information</p>
    <p># of long columns  # of String columns  Sum of lengths of String</p>
    <p>Keys (zip code), long Values (name), String</p>
    <p>Join</p>
    <p>Select Select</p>
  </div>
  <div class="page">
    <p>Features of Hash Tables</p>
    <p>Alice Bob Carol</p>
    <p>Alice 98195 Alice Bob</p>
    <p># of tuples &amp; # of keys: Total &amp; delta since last GC  7 features to collect, 4 values to predict</p>
    <p>GC</p>
    <p>L LL D D L L L</p>
    <p>L L LL LL D D DYoung Collection</p>
    <p>Full Collection</p>
    <p>L for live objects D for dead objects</p>
    <p>Young Gen Old Gen</p>
  </div>
  <div class="page">
    <p>Evaluation: GC Models</p>
    <p>Model: M5P in Weka  Training: generate hash tables with specific feature values</p>
    <p>Run a query with the generated hash table</p>
    <p>Weka M5P</p>
    <p>Pick feature values Collect stats</p>
  </div>
  <div class="page">
    <p>Evaluation: GC Models</p>
    <p>Testing: 17 TPC-H queries, randomly trigger GCs</p>
    <p>Values to Predict Relative Absolute Errors (RAE)</p>
    <p>Total size of live object in the young generation (ylive)</p>
    <p>Total size of live object in the old generation (olive)</p>
    <p>Time for a young generation GC (gcy) 25% Time for an old generation GC (gco) 22%</p>
  </div>
  <div class="page">
    <p>Evaluation: Scheduling</p>
    <p>One Amazon EC2 r3.4xlarge instance  4 most memory intensive TPC-H queries with scale factors 1 and 2 on Myria</p>
    <p>Original: OpenJDK 7u85  Serial execution / fully parallel</p>
    <p>Elastic: our approach  Resubmit: resubmitting killed queries serially after all queries complete</p>
  </div>
  <div class="page">
    <p>Total Memory (GB) 10 15 20 30 40 50 70 90</p>
    <p>E la</p>
    <p>p se</p>
    <p>d T</p>
    <p>im e</p>
    <p>(s ) 7</p>
    <p>Elastic-Resubmit, U=1/12 ori,null,1,f</p>
    <p>Compare to Serial: Much Less Time in Most Cases</p>
    <p>Total Memory (GB) 10 15 20 25 30 40 50 70 90</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>T im</p>
    <p>e (s</p>
    <p>)</p>
    <p>Elastic-Resubmit, U=1/12 Elastic, U=1/12</p>
    <p>Original, DOP=1 Original, DOP=4</p>
    <p>Original, DOP=8</p>
    <p># of completed queries Total Memory (GB) 10 15 20 30 40 50 70 90</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>T im</p>
    <p>e (s</p>
    <p>) 7 8</p>
    <p>Elastic-Resubmit, U=1/12 Original, Serial</p>
  </div>
  <div class="page">
    <p>Total Memory (GB) 10 15 20 30 40 50 70 90</p>
    <p>E la</p>
    <p>p se</p>
    <p>d T</p>
    <p>im e</p>
    <p>(s ) 7</p>
    <p>Elastic-Resubmit, U=1/12 ori,null,8,f</p>
    <p>Compare to Fully Parallel: Less Failures, Less Time</p>
    <p>Total Memory (GB) 10 15 20 25 30 40 50 70 90</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>T im</p>
    <p>e (s</p>
    <p>)</p>
    <p>Elastic-Resubmit, U=1/12 Elastic, U=1/12</p>
    <p>Original, DOP=1 Original, DOP=4</p>
    <p>Original, DOP=8</p>
    <p>Total Memory (GB) 10 15 20 30 40 50 70 90</p>
    <p>E la</p>
    <p>ps ed</p>
    <p>T im</p>
    <p>e (s</p>
    <p>) 7</p>
    <p>Elastic-Resubmit, U=1/12 Original, Fully Parallel</p>
    <p>Advantages of ElasticMem:  Automatically adjusts concurrency level  Faster query executions and fewer failures  Low overhead in case serial execution is necessary</p>
  </div>
  <div class="page">
    <p>Total Memory (GB) 10 15 20 30 40 50 70 90</p>
    <p>G C</p>
    <p>T im</p>
    <p>e R</p>
    <p>ed uc</p>
    <p>tio n</p>
    <p>O ve</p>
    <p>r Fu</p>
    <p>lly P</p>
    <p>ar al</p>
    <p>le l</p>
    <p>(% )</p>
    <p>Elastic, U=1/8 Elastic, U=1/12</p>
    <p>Elastic, U=1/16 Elastic, U=500MB</p>
    <p>Elastic, U=1000MB</p>
    <p>GC Time Reduction: Up to 80%</p>
    <p>Different memory increments U:  Fixed (U=500MB) or dynamic (U=1/12 of free space)</p>
    <p>When memory is abundant, careful tuning of U is not required</p>
  </div>
  <div class="page">
    <p>Other Results</p>
    <p>Query time saving up to 30%  Elastic methods use memory more efficiently</p>
  </div>
  <div class="page">
    <p>ElasticMem: Conclusion</p>
    <p>Scheduling with hard memory limits is inefficient  Avoid using containers with hard limits by modifying JVM</p>
    <p>Design a scheduling algorithm to allocate memory across multiple applications in real time  Build models to predict GC time and space saving  Reduce query time up to 30%, GC time up to 80%, use memory more efficiently</p>
  </div>
</Presentation>
