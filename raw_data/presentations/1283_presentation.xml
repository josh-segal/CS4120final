<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A comprehensive analysis of superpage management mechanisms and policies</p>
    <p>Weixi Zhu, Alan L. Cox, Scott Rixner {wxzhu, alc, rixner}@rice.edu</p>
    <p>Department of Computer Science, Rice University</p>
  </div>
  <div class="page">
    <p>Superpages benefit large-memory Applications performance</p>
    <p>Large memory applications have high address translation overhead  Using superpages can reduce address translation overhead  Many challenges in implementing transparent superpage support in</p>
    <p>the operating system  can cause performance regression</p>
  </div>
  <div class="page">
    <p>Contributions of this paper</p>
    <p>Ingens and HawkEye 3. Proposed Quicksilver based on FreeBSD, driven by our novel insights</p>
    <p>https://github.com/rice-systems/quicksilver</p>
  </div>
  <div class="page">
    <p>CPU</p>
    <p>X86-64 4KB-page address translation</p>
    <p>Load/store (virtual address)</p>
    <p>TLB</p>
    <p>Cache</p>
    <p>Miss (VA) MMU(CR3)</p>
    <p>L1 page table (512 entries)</p>
    <p>L2</p>
    <p>L3</p>
    <p>L4</p>
    <p>Physical address (4 memory accesses)</p>
  </div>
  <div class="page">
    <p>Translation Look-aside Buffers (TLBs)  Caches 4KB/2MB page mappings  Typical capacity: 1536 entries in Intel Skylake STLB  Fewer TLB misses -&gt; fewer page walks -&gt; better performance</p>
  </div>
  <div class="page">
    <p>Benefits of Superpages (2MB) Address translation benefits  Cheaper page walk cost: 4 -&gt; 3 memory accesses  Significantly increased TLB coverage: 6MB -&gt; 3GB  Intel Skylake STLB: 1536 * (4KB 2MB) = 6MB 3GB  Reduced # TLB misses (page walks) -&gt; better performance</p>
    <p>OS-level benefits  Reduced number and average cost of page faults</p>
  </div>
  <div class="page">
    <p>Drawbacks of Superpages (2MB)  Underutilization  Waste free memory, causing memory bloat  Waste CPU time preparing unused memory</p>
    <p>Allocation is easier to fail under fragmentation  Require 2MB-aligned free contiguous physical memory</p>
    <p>Latency spikes  Preparing a 2MB page (e.g. zeroing or disk-reading) is much</p>
    <p>more costly</p>
  </div>
  <div class="page">
    <p>Contributions of this paper</p>
    <p>Ingens and HawkEye 3. Proposed Quicksilver based on FreeBSD, driven by our novel insights</p>
    <p>https://github.com/rice-systems/quicksilver</p>
  </div>
  <div class="page">
    <p>Five decoupled events of superpage lifetime -- To help understand OS superpage management</p>
    <p>Event Definition</p>
    <p>Physical allocation Acquisition of a free physical superpage</p>
    <p>Physical preparation Incremental or full preparation of the initial data for an allocated physical superpage</p>
    <p>Mapping creation Creation of a virtual superpage in a processs address space and mapping it to a fully prepared physical superpage</p>
    <p>Mapping destruction Destruction of a virtual superpage mapping</p>
    <p>Physical deallocation Partial or full deallocation of an allocated physical superpage</p>
  </div>
  <div class="page">
    <p>Implementation choices</p>
    <p>Sync vs. Async allocation  During page fault time  When scanning page tables</p>
    <p>Incremental vs. full preparation  4KB at a time  2MB all at once</p>
    <p>In-place vs. out-of-place mapping (4KB-&gt;2MB promotion)  In-place promotion requires tracking allocated physical superpage  Out-of-place promotion involves migrating used pages to a different allocated</p>
    <p>physical superpage</p>
  </div>
  <div class="page">
    <p>Contributions of this paper</p>
    <p>Ingens and HawkEye 3. Proposed Quicksilver based on FreeBSD, driven by our novel insights</p>
    <p>https://github.com/rice-systems/quicksilver</p>
  </div>
  <div class="page">
    <p>Existing designs in 5-event design space Events Linux Ingens (Linux-based) HawkEye (Linux</p>
    <p>based) FreeBSD</p>
    <p>Allocation Sync upon first page fault, or async for regions with utilization &gt; 0. Defragmenting if necessary</p>
    <p>Only async for regions with utilization &gt; 90%, round-robin among processes</p>
    <p>Only async for regions with utilization &gt; 0, with fine-grained order</p>
    <p>Upon first page fault (tracked by reservation system)</p>
    <p>Preparation Coupled with allocation, sync or async, full</p>
    <p>Coupled with allocation, only async, full</p>
    <p>Same as left Incrementally prepares in-place 4KB pages on page faults</p>
    <p>Mapping Coupled with preparation, sync or async</p>
    <p>Coupled with preparation. Async and out-of-place</p>
    <p>Same as left After the last page preparation. Sync and in-place</p>
    <p>Unmapping Upon freeing, partial or full mapping change</p>
    <p>Same as left Same as left Same as left</p>
    <p>Deallocation Upon superpage unmapping</p>
    <p>Same as left Same as left Deferred as long as possible</p>
  </div>
  <div class="page">
    <p>Observation #1: coupling physical allocation, preparation and mapping creation brings more drawbacks</p>
    <p>System: Linux Benefit: Immediate address translation benefits and fewer page faults</p>
    <p>-- Best performance on freshly booted machine</p>
    <p>Multiple Drawbacks:  Easy to create underutilized superpages and bloat memory  Fail to create superpages for growing heap, e.g. 602.gcc_s in SpecCPU-2017</p>
    <p>Allocations will fail when the 2MB virtual region is not covered.  Cannot easily choose between 2 superpage sizes, e.g. 64KB and 2MB in ARM  Cannot extend to 1GB superpages or file-backed superpages (higher full</p>
    <p>preparation cost)</p>
  </div>
  <div class="page">
    <p>Observation #2: asynchronous out-of-place promotion delays superpage mapping creation Systems: Ingens (Linux-based), HawkEye (Linux-based) Benefit: Alleviate latency spikes from costly page faults Drawbacks:  Preparation involves costly page migrations (the asynchronously allocated</p>
    <p>superpage is out-of-place)  Superpage mapping creation is delayed  much slower than in-place</p>
    <p>promotion (FreeBSD)</p>
    <p>Speedups Linux Ingens HawkEye FreeBSD</p>
    <p>GraphChi: PageRank</p>
    <p>BlockSVM: classification</p>
  </div>
  <div class="page">
    <p>Observation #3: Reservation-based policies enables speculative physical allocation, multiple page sizes and in-place promotion System: FreeBSD Requirement: A reservation system that tracks allocated physical superpages Benefits:  Decoupled allocation and preparation  enables speculative allocation for</p>
    <p>growing heaps (602.gcc_s), incremental preparation and in-place promotion  Obviating need of async out-of-place promotion  can allocate physical</p>
    <p>superpages for growing heaps  Supporting multiple page sizes</p>
  </div>
  <div class="page">
    <p>Observation #4: Reservations and delaying partial deallocation fight fragmentation System: FreeBSD Benefit:  Less memory fragmentation from delayed partial deallocation  individual</p>
    <p>latency spikes in server workloads.</p>
  </div>
  <div class="page">
    <p>Observation #5: Bulk zeroing is consistently more efficient on modern processors Typical zeroing: 512 calls of zeroing assembly code with size of 4KB Bulk zeroing: Fewer calls of zeroing assembly code with bulk size &gt; 4KB</p>
    <p>Latency (us) of 2MB zeroing: drops consistently with larger bulk sizes</p>
    <p>CPU (GHz) temporal Non-temporal</p>
    <p>Bulk Size 4KB 32KB 2MB 4KB 32KB 2MB</p>
    <p>E3-1231v3 (3.4) 92 88 87 114 99 97</p>
    <p>E3-1245v6 (3.7) 84 67 65 92 74 71</p>
    <p>E5-2640v3 (2.6) 355 287 280 154 112 106</p>
    <p>E5-2640v4 (2.4) 409 334 325 163 113 106</p>
    <p>R7-2700X (4.3) 185 183 159 99 60 53</p>
  </div>
  <div class="page">
    <p>Contributions of this paper</p>
    <p>Ingens and HawkEye 3. Proposed Quicksilver based on FreeBSD, driven by our novel insights</p>
    <p>https://github.com/rice-systems/quicksilver</p>
  </div>
  <div class="page">
    <p>Quicksilver  guided by novel observations</p>
    <p>Allocation: allocates a reservation speculatively upon first page fault  Preparation: incrementally prepares 4KB on demand, performs a</p>
    <p>synchronous full preparation upon a utilization threshold (Sync-1, Sync-64)  match or beat Linuxs performance  Mapping: Relaxed for more file-backed mappings  Unmapping: same as FreeBSD  Deallocation: delayed until the superpage is inactive, then</p>
    <p>asynchronously evicts 4KB pages to perform a whole deallocation</p>
  </div>
  <div class="page">
    <p>Evaluation of Quicksilver</p>
    <p>Performance of a wide variety of workloads  on a freshly booted machine  on a heavily fragmented machine</p>
    <p>Throughput and tail latency of server workloads  A parallel compilation task with many small jobs</p>
  </div>
  <div class="page">
    <p>Quicksilver Beats Linux on a freshly-booted machine</p>
    <p>Linux is no longer the best on a freshly-booted machine!</p>
    <p>Frag-0 GUPS Graphchi-PR BlockSV M</p>
    <p>XSBench ANN Canneal Freqmine Gcc mcf Dsjeng XZ</p>
    <p>Linux 1 1 1 1 1 1 1 1 1 1 1 Ingens 0.87 0.58 0.81 0.98 1 0.95 0.99 1 0.99 0.99 0.96 HawkEye 0.28 0.53 0.73 0.88 1 0.95 0.99 0.99 0.94 0.86 0.9 FreeBSD 0.96 0.77 0.96 0.99 0.98 1.14 1 1.05 0.99 1 0.99 Sync-1 0.99 1.07 1 1 1.07 1.14 0.99 1.05 1 1 1 Sync-64 0.98 1.05 1 1 1.08 1.14 0.99 1.05 1 1 1</p>
  </div>
  <div class="page">
    <p>Quicksilver outperforms every other systems under severe memory fragmentation</p>
    <p>Frag-100 GUPS Graphchi-PR BlockSV M</p>
    <p>XSBench ANN Canneal Freqmine Gcc mcf Dsjeng XZ</p>
    <p>Linux 1 1 1 1 1 1 1 1 1 1 1 Ingens 1.02 1.13 0.86 1.04 1 1 1 1 1.01 1.01 1.02 HawkEye 0.97 1.11 0.85 1.03 1 1.01 1 1 0.99 0.97 1.02 FreeBSD 0.96 1.1 0.85 1.04 0.98 1.05 1 1 1 1.04 1.02 Sync-1 2.35 2.18 1.12 1.07 1.04 1.12 1 1.05 1.02 1.1 1.14 Sync-64 2.29 2.11 1.13 1.07 1.01 1.12 1 1.05 1.05 1.11 1.14</p>
  </div>
  <div class="page">
    <p>Quicksilver obtains high throughput without latency spikes Throughput (GBps) and 95th tail latency (ms) of Redis workloads</p>
    <p>Cold-start Linux-4KB Linux Ingens HawkEye FreeBSD Sync-1 Sync-64 Frag-0 1.04 (5.6) 1.34 (4.1) 1.00 (5.9) 1.00 (5.9) 1.11 (6.1) 1.26 (4.5) 1.20 (4.8)</p>
    <p>Frag-50 1.04 (5.7) 0.92 (10.2) 0.95 (5.9) 1.02 (5.9) 1.04 (6.2) 1.25 (4.5) 1.27 (4.7) Frag-100 1.07 (5.6) 0.81 (9.9) 0.94 (6.1) 1.00 (5.8) 0.98 (6.5) 1.31 (4.5) 1.26 (4.6)</p>
    <p>Warm-start Linux-4KB Linux Ingens HawkEye FreeBSD Sync-1 Sync-64 Frag-0 1.06 (6.5) 1.32 (5.2) 1.23 (5.7) 1.03 (6.7) 1.30 (5.6) 1.32 (5.5) 1.31 (5.5)</p>
    <p>Frag-50 1.07 (6.5) 1.17 (5.9) 1.09 (6.4) 1.03 (6.7) 1.18 (6.1) 1.32 (5.5) 1.32 (5.5) Frag-100 1.07 (6.5) 1.16 (5.9) 1.01 (6.9) 1.05 (6.6) 1.10 (6.6) 1.33 (5.4) 1.34 (5.5)</p>
    <p>Also observe low memory bloat on Quicksilver</p>
  </div>
  <div class="page">
    <p>Quicksilver (Sync-64) avoids creating underutilized superpages FreeBSD Kernel compilation task (make buildkernel j9):</p>
    <p>Buildkernel real user sys # superpages # page faults</p>
    <p>Sync-1 197.7 1409.4 89.4 200.5 K 5.3 M Sync-64 196.9 1408.8 78.5 99.6 K 10.3 M FreeBSD 203.7 1436.7 98 36.9 K 30.2 M</p>
    <p>Sync-1 creates 100.9 K underutilized superpages with average utilization &lt; 50 4KB pages -- Sync-64 is as competitive as Sync-1, but also avoids underutilized superpages</p>
  </div>
  <div class="page">
    <p>Takeaways from this paper</p>
    <p>Our comprehensive scheme allow comparing and contrasting superpage management policies  Our novel insights motivated Quicksilvers innovative design  Quicksilver obtains benefits of aggressive superpage allocation, with</p>
    <p>mitigated memory bloat and fragmentation issues that arise from underutilized superpages  Sync-64 and Sync-1 can both match or beat existing systems in both lightly</p>
    <p>and heavily fragmented scenarios, in terms of application performance, tail latency and memory bloat  Sync-64 avoids creating underutilized superpages and is preferable for</p>
    <p>long-running servers</p>
  </div>
  <div class="page">
    <p>Thank you For more details, please check our ATC-2020 paper. Quicksilver source code: https://github.com/rice-systems/quicksilver</p>
  </div>
</Presentation>
