<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>*Secure Communication and Computer Systems Lab Texas A&amp;M University</p>
    <p>Attacking the Brain: Races in the SDN Control Plane</p>
    <p>Lei Xu, Jeff Huang, Sungmin Hong, Jialong Zhang, Guofei Gu</p>
  </div>
  <div class="page">
    <p>SDN Overview</p>
    <p>Software-Defined Networking (SDN) is a novel programmable network paradigm that separates the control logic from the data plane.</p>
    <p>CP CP</p>
    <p>CP SDN Controller</p>
    <p>App App App</p>
    <p>CP</p>
  </div>
  <div class="page">
    <p>SDN Control Plane  New Achilles' Heel</p>
    <p>SDN Controller</p>
    <p>App App App Control Plane Saturation (CCS13, DSN15) Topology Poisoning (NDSS15) State Manipulation (In this paper!)</p>
  </div>
  <div class="page">
    <p>Harmful Race Conditions in the Brain</p>
    <p>The network states maintained in the SDN control plane is subject to harmful race conditions.  Non-adversarial causality: asynchronous network events and non-determinist schedules.  Adversarial causality: an attacker can intentionally inject right network events to exploit vulnerabilities -State Manipulation Attacks</p>
  </div>
  <div class="page">
    <p>How Does It Look like?</p>
  </div>
  <div class="page">
    <p>What Can It Cause?</p>
    <p>System Crash  Connection Disruption  Service Disruption  Service Chain Interference  Privacy Leakage</p>
  </div>
  <div class="page">
    <p>A Real Vulnerability in LoadBalancer</p>
    <p>Internet</p>
    <p>Server Replica (10.0.0.4)</p>
    <p>Client (10.0.0.1)</p>
    <p>Switch 2Switch 1 Switch 3</p>
    <p>Floodlight (LoadBalancer)</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
  </div>
  <div class="page">
    <p>A Real Vulnerability in LoadBalancer</p>
    <p>Internet 1</p>
    <p>Server Replica (10.0.0.4)</p>
    <p>Client (10.0.0.1)</p>
    <p>Switch 2Switch 1 Switch 3</p>
    <p>Floodlight (LoadBalancer)</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Client send requests to public service</p>
    <p>Switch issues Packet-In message to SDN controller</p>
  </div>
  <div class="page">
    <p>SDN controller select Server replica and instruct switch to install flow rules to translate traffic between client and server replica</p>
    <p>A Real Vulnerability in LoadBalancer</p>
    <p>Internet 1</p>
    <p>Server Replica (10.0.0.4)</p>
    <p>Client (10.0.0.1)</p>
    <p>Switch 2Switch 1 Switch 3</p>
    <p>Floodlight (LoadBalancer)</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Client send requests to public service</p>
    <p>Switch issues Packet-In message to SDN controller</p>
  </div>
  <div class="page">
    <p>SDN controller select Server replica and instruct switch to install flow rules to translate traffic between client and server replica</p>
    <p>A Real Vulnerability in LoadBalancer</p>
    <p>Internet 1</p>
    <p>Server Replica (10.0.0.4)</p>
    <p>Client (10.0.0.1)</p>
    <p>Switch 2Switch 1 Switch 3</p>
    <p>Floodlight (LoadBalancer)</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Client send requests to public service</p>
    <p>Switch issues Packet-In message to SDN controller</p>
  </div>
  <div class="page">
    <p>A Real Vulnerability in LoadBalancer</p>
    <p>Internet 1</p>
    <p>Server Replica (10.0.0.4)</p>
    <p>Client (10.0.0.1)</p>
    <p>Switch 2Switch 1 Switch 3</p>
    <p>Floodlight (LoadBalancer)</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>SWITCH LEAVE</p>
    <p>Client send requests to public service (10.10.10.10)</p>
    <p>Switch issues Packet-In message to SDN controller SDN controller select Server replica and instruct switch to install flow rules to translate traffic between client and server replica</p>
  </div>
  <div class="page">
    <p>A Real Vulnerability in LoadBalancer</p>
    <p>Internet 1</p>
    <p>Server Replica (10.0.0.4)</p>
    <p>Client (10.0.0.1)</p>
    <p>Switch 2Switch 1 Switch 3</p>
    <p>Floodlight (LoadBalancer)Control Plane</p>
    <p>Data Plane</p>
    <p>SWITC HLEAV</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How to detect harmful race conditions in the SDN control plane?  How to exploit harmful race conditions by an external attacker?</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>How to detect harmful race conditions in the SDN control plane?  How to exploit harmful race conditions by an external attacker?</p>
    <p>Our Solution: ConGuard</p>
  </div>
  <div class="page">
    <p>Key Insight: Harmful race conditions are rooted by two race operations upon shared network states that are not commutative, i.e., mutating the scheduling order of them leads to a different state though the two operations can be wellsynchronized (e.g., by using locks).</p>
    <p>Detection of Harmful Race Conditions</p>
    <p>Dynamic Execution</p>
    <p>Instrumentation Post-Mortem Analysis</p>
    <p>Execution Trace Adversarial</p>
    <p>State Racing Races</p>
  </div>
  <div class="page">
    <p>Execution Trace</p>
    <p>We dynamically log a sequence of critical operations to model the operations of SDN control plane from instrumented SDN control plane.</p>
    <p>Dynamic Execution</p>
    <p>Instrumentation Post-Mortem Analysis</p>
    <p>Execution Trace Adversarial</p>
    <p>State Racing Races</p>
  </div>
  <div class="page">
    <p>Critical Operations in Execution Trace</p>
    <p>read(T,V) : reads variable V in thread T write(T,V) : writes variable V in thread T init(A) : initializes application A terminate(A) : terminates application A dispatch(E) : dispatches event E receive(H,E) : receives event E by event handler H schedule(TA) : instantiates a singleton task TA end(TA) : terminates a singleton task TA</p>
  </div>
  <div class="page">
    <p>We develop happens-before relations to model concurrency semantics of the SDN control plane.  We utilize graph-based approach to locate race operations.</p>
    <p>Dynamic Execution</p>
    <p>Instrumentation Post-Mortem Analysis</p>
    <p>Execution Trace Adversarial</p>
    <p>State Racing Races</p>
    <p>Post-Mortem Analysis</p>
  </div>
  <div class="page">
    <p>Race Detection</p>
    <p>Pre-processing  Prune operations on thread-local or immutable variable  Duplicated operations removal</p>
    <p>Graph-based Race Detection Algorithm  Use DAG to model operations</p>
    <p>operations nodes happens-before edges</p>
    <p>Reachability Check in the graph Race Operations</p>
  </div>
  <div class="page">
    <p>We instrument control logic to force an erroneous execution order, e.g., the state update executes before the state references.</p>
    <p>Dynamic Execution</p>
    <p>Instrumentation Post-Mortem Analysis</p>
    <p>Execution Trace Adversarial</p>
    <p>State Racing Races</p>
    <p>Adversarial State Racing</p>
  </div>
  <div class="page">
    <p>Exploitation of Harmful Race Conditions</p>
    <p>Thread Model  No need of compromised SDN controllers,</p>
    <p>apps, switches and protocol  Control channel is well protected by SSL/TLS  Compromised hosts/virtual machines  Inject 7 network events, 2 of them</p>
    <p>need in-band deployment of SDN Packet-In Host Join/Leave Port Up/Down</p>
    <p>Switch Join/Leave</p>
  </div>
  <div class="page">
    <p>Exploitation of Harmful Race Conditions</p>
    <p>Attack Strategies  Repeat ordered event sequences &lt;trigger event, update event&gt;  Feedback Probing  Exploit larger vulnerable windows</p>
    <p>Inject trigger event</p>
    <p>Inject update event</p>
    <p>Reference State Operation</p>
    <p>update State Operation</p>
    <p>Handle events/ check state operation</p>
    <p>Vulnerable Window</p>
    <p>Attacker SDN controller</p>
    <p>Probe Attack Result</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementation of ConGuard  On Floodlight, ONOS and OpenDaylight controllers with 34 apps.  Input Generator: Mininet &amp; Rest API scripts  Instrumentation &amp; Static Analysis: ASM framework</p>
    <p>Totally pinpoint 15 unknown harmful race conditions</p>
  </div>
  <div class="page">
    <p>Race Detection Result</p>
    <p>Controller Version Preprocessing Reduction</p>
    <p>Race Operations</p>
    <p>Floodlight 1.1 96.6% 153</p>
    <p>Floodlight 1.2 87.2% 184</p>
    <p>OpenDaylight 0.1.7 92.1% 221</p>
    <p>ONOS 1.2 98.1% 13</p>
  </div>
  <div class="page">
    <p>Effectiveness of HB rules</p>
    <p>In Floodlight Controller</p>
  </div>
  <div class="page">
    <p>Impact Analysis</p>
    <p>All located 15 harmful race conditions with 4 harmful impacts:</p>
    <p>System Crash (4 of them)  Connection Disruption (7 of them)  Service Disruption (13 of them)  Service Chain Interference (7 of them)</p>
  </div>
  <div class="page">
    <p>Correlation of External Events</p>
    <p>* in-band  REST API</p>
  </div>
  <div class="page">
    <p>Remote Exploitations</p>
    <p>Average trials to get a successful exploitation</p>
  </div>
  <div class="page">
    <p>Potential Defense Schemes</p>
    <p>Safety Check  Ensure consistent state at the reference location</p>
    <p>Deterministic Execution Runtime  Guarantee the deterministic execution of state operations</p>
    <p>Sanitizing External Network Events  Anomaly detection system to sanitize suspicious state update events</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We report State Manipulation Attacks that target the SDN control plane.  We design ConGuard framework to pinpoint and exploit harmful race conditions in the SDN control plane.  We present an extensive evaluation of ConGuard that uncovered 15 unknown vulnerabilities (we have helped developers patch most of them already)</p>
  </div>
  <div class="page">
    <p>Thanks for attention! Q&amp;A</p>
  </div>
</Presentation>
