<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Richie Bonett, Kaushal Kafle, Kevin Moran,</p>
    <p>Adwait Nadkarni &amp; Denys Poshyvanyk</p>
    <p>Discovering Flaws in Security-Focused Static Analysis Tools for Android using</p>
    <p>Systematic Mutation</p>
    <p>Friday, Aug 17th, 2018</p>
  </div>
  <div class="page">
    <p>MOTIVATION</p>
  </div>
  <div class="page">
    <p>MOTIVATION</p>
    <p>Flowdroid</p>
    <p>IccTA DroidSafe</p>
    <p>CryptoLint</p>
    <p>MalloDroid</p>
    <p>Argus-SAF</p>
    <p>Taintdroid</p>
    <p>DidFail BlueSeal End User</p>
    <p>Safer Apps</p>
  </div>
  <div class="page">
    <p>Detecting SSL Vulnerabilities</p>
    <p>OAuth-token Tracking Data Leak</p>
    <p>Detection</p>
    <p>Intent spoofing</p>
    <p>Permission misuse</p>
    <p>Password tracking</p>
    <p>Security tools have diverse security goals</p>
    <p>Security analysis of apps is highly beneficial to end users</p>
    <p>Keeps the ecosystem clear of malicious or vulnerable apps</p>
    <p>SECURITY ANALYSIS OF APPLICATIONS</p>
  </div>
  <div class="page">
    <p>Detecting SSL Vulnerabilities</p>
    <p>OAuth-token Tracking Data Leak</p>
    <p>Detection</p>
    <p>Intent spoofing</p>
    <p>Permission misuse</p>
    <p>Password tracking</p>
    <p>Security tools have diverse security goals</p>
    <p>Security analysis of apps is highly beneficial to end users</p>
    <p>Keeps the ecosystem clear of malicious or vulnerable apps</p>
    <p>Q: Do we really know how well these tools work?</p>
    <p>SECURITY ANALYSIS OF APPLICATIONS</p>
  </div>
  <div class="page">
    <p>2015: Soundiness manifesto1</p>
    <p>Static analysis tools are implicitly expected to be sound (i.e., they over-approximate)</p>
    <p>In practice, all tools are soundy: A sound core, but with some unsound assumptions to be practical; e.g. JNI, Reflection</p>
    <p>Soundy tools are practical</p>
    <p>However, developers might not document unsound choices for various reasons</p>
    <p>SOUNDINESS</p>
    <p>[1] Livshits, Benjamin, et al. &quot;In defense of soundiness: a manifesto.&quot; Communications of the ACM 58.2 (2015): 44-46.</p>
    <p>Static Analysis</p>
    <p>tool t</p>
    <p>Sound core</p>
    <p>Dynamic code loading</p>
    <p>JNI</p>
    <p>Java Reflection</p>
  </div>
  <div class="page">
    <p>2015: Soundiness manifesto1</p>
    <p>Static analysis tools are implicitly expected to be sound (i.e., they over-approximate)</p>
    <p>In practice, all tools are soundy: A sound core, but with some unsound assumptions to be practical; e.g. JNI, Reflection</p>
    <p>Soundy tools are practical</p>
    <p>However, developers might not document unsound choices for various reasons</p>
    <p>SOUNDINESS</p>
    <p>[1] Livshits, Benjamin, et al. &quot;In defense of soundiness: a manifesto.&quot; Communications of the ACM 58.2 (2015): 44-46.</p>
    <p>Static Analysis</p>
    <p>tool t</p>
    <p>Sound core</p>
    <p>Dynamic code loading</p>
    <p>JNI</p>
    <p>Java Reflection</p>
    <p>We want to discover the extent of the unsound decisions 4</p>
  </div>
  <div class="page">
    <p>The scope of the soundiness manifesto is language features</p>
    <p>We target security analysis of mobile apps (e.g., data leak detection, SSL vuln, etc. )</p>
    <p>This paper: A general discussion on the design/ implementation choices in the context of the target platform, i.e., Android, and its unique abstractions:</p>
    <p>Application model</p>
    <p>Inter-component communication</p>
    <p>Asynchronous invocation and component lifecycles</p>
    <p>SOUNDINESS OF MOBILE SECURITY TOOLS</p>
    <p>Activities</p>
    <p>Intent messages</p>
    <p>BroadcastReceiver</p>
    <p>Fragments</p>
    <p>XML Resource Files</p>
    <p>Callbacks</p>
  </div>
  <div class="page">
    <p>A framework that enables systematic evaluation of existing security tools to identify and document unsound</p>
    <p>decisions, eventually expanding the sound core</p>
    <p>OUR VISION</p>
    <p>Benefits:</p>
    <p>Researchers: discover undocumented flaws in tools</p>
    <p>Developers: build more effective tools by discovering easily fixed but evasive bugs</p>
    <p>Users: benefit from better detection, and hence a better application ecosystem 6</p>
  </div>
  <div class="page">
    <p>SE: MUTATION-BASED SOUNDNESS EVALUATION</p>
    <p>SE leverages mutation analysis for systematic evaluation of security tools</p>
    <p>Contextualizes mutation analysis to security</p>
    <p>Develops the abstractions of</p>
  </div>
  <div class="page">
    <p>MUTATION ANALYSIS BACKGROUND</p>
    <p>Mutation Engine</p>
    <p>Mutation operators</p>
    <p>Test Suite to evaluate</p>
    <p>Mutated Apks</p>
    <p>Killed Mutants</p>
    <p>Unkilled Mutants</p>
  </div>
  <div class="page">
    <p>SE OVERVIEW</p>
    <p>SE leverages mutation analysis for systematic evaluation of security tools</p>
    <p>Static Analysis</p>
    <p>tool t</p>
    <p>Sound core</p>
  </div>
  <div class="page">
    <p>SE OVERVIEW</p>
    <p>SE leverages mutation analysis for systematic evaluation of security tools</p>
    <p>Analyze Apps</p>
    <p>App 1 App 2 .</p>
    <p>App n Static Analysis</p>
    <p>tool t</p>
    <p>Sound core</p>
  </div>
  <div class="page">
    <p>SE OVERVIEW</p>
    <p>SE leverages mutation analysis for systematic evaluation of security tools</p>
    <p>Analyze Apps</p>
    <p>App 1 App 2 .</p>
    <p>App n Static Analysis</p>
    <p>tool t</p>
    <p>Sound core</p>
    <p>Mutate apps</p>
    <p>SE</p>
    <p>Mutants</p>
    <p>Mutation Scheme</p>
    <p>Security Operators</p>
  </div>
  <div class="page">
    <p>SE OVERVIEW</p>
    <p>SE leverages mutation analysis for systematic evaluation of security tools</p>
    <p>Analyze Apps</p>
    <p>App 1 App 2 .</p>
    <p>App n Analyze Uncaught Mutants</p>
    <p>Improved tool t</p>
    <p>Sound core</p>
    <p>Static Analysis</p>
    <p>tool t</p>
    <p>Sound core</p>
    <p>Mutate apps</p>
    <p>SE</p>
    <p>Mutants</p>
    <p>Mutation Scheme</p>
    <p>Security Operators</p>
  </div>
  <div class="page">
    <p>SE DESIGN</p>
    <p>Basic Components and their definitions:</p>
    <p>Security operator: What anomaly/mutation to insert in the app</p>
    <p>Mutation scheme: Where to place/seed it</p>
  </div>
  <div class="page">
    <p>SE DESIGN: SECURITY OPERATORS</p>
    <p>Challenges:</p>
    <p>Too fine-grained &gt; Not scalable</p>
    <p>Too generic &gt; Not effective as different tools have different security focus</p>
    <p>SE defines security operator in terms of security goals of the tools</p>
    <p>Scalable to tools with similar security goals (e.g., data leak detection)</p>
  </div>
  <div class="page">
    <p>SE DESIGN: SECURITY OPERATORS</p>
    <p>boolean isServerTrusted() {</p>
    <p>return true }</p>
    <p>dataLeak = Location.read()</p>
    <p>log.d(dataLeak)</p>
  </div>
  <div class="page">
    <p>Multiple strategies with different objectives 1. Reachability analysis</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
  </div>
  <div class="page">
    <p>Placing operator at the start of every method</p>
    <p>Helps in the evaluation of the coverage of flaws</p>
    <p>Simplest mutation scheme for operator placement</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
  </div>
  <div class="page">
    <p>Model unique aspects of Android platform</p>
    <p>Mutants are built specifically for Android by choosing its unique abstractions as the starting point</p>
    <p>Activity &amp; Fragment Lifecycles</p>
    <p>Callbacks</p>
    <p>Intent messages</p>
    <p>Android Resource files</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
  </div>
  <div class="page">
    <p>Model unique aspects of Android platform</p>
    <p>Mutants are built specifically for Android by choosing its unique abstractions as the starting point</p>
    <p>Activity &amp; Fragment Lifecycles</p>
    <p>Callbacks</p>
    <p>Intent messages</p>
    <p>Android Resource files</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
    <p>BroadcastReceiver</p>
    <p>Leak</p>
    <p>onReceive()</p>
  </div>
  <div class="page">
    <p>Model unique aspects of Android platform</p>
    <p>Mutants are built specifically for Android by choosing its unique abstractions as the starting point</p>
    <p>Activity &amp; Fragment Lifecycles</p>
    <p>Callbacks</p>
    <p>Intent messages</p>
    <p>Android Resource files</p>
    <p>onReceive() BroadcastReceiver</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
    <p>BroadcastReceiver</p>
    <p>Leak</p>
    <p>onReceive()</p>
  </div>
  <div class="page">
    <p>Accounting for the specific objective of the tool under scrutiny</p>
    <p>Can be applied to other tools with similar goals</p>
    <p>E.g., a taint-based scheme for data leak detection tools</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
  </div>
  <div class="page">
    <p>Accounting for the specific objective of the tool under scrutiny</p>
    <p>Can be applied to other tools with similar goals</p>
    <p>E.g., a taint-based scheme for data leak detection tools</p>
    <p>SE DESIGN: MUTATION SCHEME</p>
    <p>onStart()</p>
    <p>Source</p>
    <p>onResume()</p>
    <p>Sink</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION</p>
    <p>Security operator(s)</p>
    <p>Mutation scheme(s)</p>
    <p>Step 1: Specification</p>
    <p>Android Abstractions</p>
    <p>Security Goals</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION</p>
    <p>Mutation Engine</p>
    <p>Step 2: Mutation</p>
    <p>Security operator(s)</p>
    <p>Mutation scheme(s)</p>
    <p>Step 1: Specification</p>
    <p>Android Abstractions</p>
    <p>Security Goals</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION</p>
    <p>Mutation Engine</p>
    <p>Step 2: Mutation</p>
    <p>Test tool(s) on mutants</p>
    <p>Manual analysis</p>
    <p>Vulnerability Documentation</p>
    <p>Software Patches</p>
    <p>Step 3: Analysis</p>
    <p>Security operator(s)</p>
    <p>Mutation scheme(s)</p>
    <p>Step 1: Specification</p>
    <p>Android Abstractions</p>
    <p>Security Goals</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION</p>
    <p>Mutation Engine</p>
    <p>Step 2: Mutation</p>
    <p>Test tool(s) on mutants</p>
    <p>Manual analysis</p>
    <p>Vulnerability Documentation</p>
    <p>Software Patches</p>
    <p>Step 3: Analysis</p>
    <p>Mutation Engine</p>
    <p>Execution Engine</p>
    <p>Non-executing mutants</p>
    <p>Security operator(s)</p>
    <p>Mutation scheme(s)</p>
    <p>Step 1: Specification</p>
    <p>Android Abstractions</p>
    <p>Security Goals</p>
  </div>
  <div class="page">
    <p>IMPLEMENTATION</p>
    <p>Mutation Engine</p>
    <p>Step 2: Mutation</p>
    <p>Test tool(s) on mutants</p>
    <p>Manual analysis</p>
    <p>Vulnerability Documentation</p>
    <p>Software Patches</p>
    <p>Step 3: Analysis</p>
    <p>Mutation Engine</p>
    <p>Execution Engine</p>
    <p>Non-executing mutants</p>
    <p>Generated Mutants</p>
    <p>Execution Engine</p>
    <p>Security Tool</p>
    <p>Manual Analysis</p>
    <p>N um</p>
    <p>be r o</p>
    <p>f M</p>
    <p>ut an</p>
    <p>ts</p>
    <p>Security operator(s)</p>
    <p>Mutation scheme(s)</p>
    <p>Step 1: Specification</p>
    <p>Android Abstractions</p>
    <p>Security Goals</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
    <p>We evaluate the effectiveness of SE using a case study</p>
    <p>Security goal we chose for our case study: Data leak detection</p>
  </div>
  <div class="page">
    <p>EVALUATION: TESTING DATA LEAK DETECTORS</p>
    <p>7,584 mutants in total, 2,026 verified as executable</p>
    <p>3 data leak detection tools evaluated using 2,026 mutants</p>
    <p>TOOLS UNDETECTED LEAKS</p>
    <p>Flowdroid 2.0 987/2026 (48.7%)</p>
    <p>Argus-SAF 1480/2026 (73.1%)</p>
    <p>DroidSafe 83/2026 (4.1%)</p>
  </div>
  <div class="page">
    <p>EVALUATION: TESTING DATA LEAK DETECTORS</p>
    <p>7,584 mutants in total, 2,026 verified as executable</p>
    <p>3 data leak detection tools evaluated using 2,026 mutants</p>
    <p>TOOLS UNDETECTED LEAKS</p>
    <p>Flowdroid 2.0 987/2026 (48.7%)</p>
    <p>Argus-SAF 1480/2026 (73.1%)</p>
    <p>DroidSafe 83/2026 (4.1%)</p>
    <p>Impact: Cited over 900 times</p>
    <p>Immediate response and benefits: Flowdroid is actively being maintained</p>
  </div>
  <div class="page">
    <p>EVALUATION: FLAWS DISCOVERED</p>
    <p>VULNERABILITY CLASS (VC) EXAMPLE FLAW IN VC DESCRIPTION OF THE FLAW</p>
    <p>flaws) RunOnUIThread Misses a path to Runnable.run()for runnables</p>
    <p>passed into Activity.runOnUIThread()</p>
    <p>Anonymous Classes (2 flaws) BroadcastReceiver</p>
    <p>Misses the onReceive() callback of a BroadcastReceiver implemented</p>
    <p>programmatically and registered within another programmatically defined BroadcastReceiver's</p>
    <p>onReceive() callback.</p>
    <p>Asynchronous Methods (4 flaws)</p>
    <p>LocationListenerTaint</p>
    <p>Misses the flow from a source in the onStatusChanged() callback to a sink in the</p>
    <p>onLocationChanged() callback of the LocationListener interface, despite recognizing</p>
    <p>leaks wholly contained in either.</p>
  </div>
  <div class="page">
    <p>EVALUATION: FLAW PROPAGATION FLAW FD 2.5.1 FD 2.5.0 FD 2.0 BLUESEAL ICCTA HORNDROID ARGUS DROIDSAFE DIDFAIL</p>
    <p>Inheriting flowdroid as a black box - IccTA (13/13), DidFail (13/13)</p>
    <p>Motivated by flowdroids design (but augmented to their need) - Argus-SAF (6/13)</p>
    <p>Implementing their own methodologies - BlueSeal (1/13), HornDroid (6/13), DroidSafe (1/13)</p>
    <p>- Fails to detect</p>
  </div>
  <div class="page">
    <p>RECALL: EXPANDING THE SOUND CORE</p>
    <p>We could fix one of the problems (fragment, FlowDroid 2.0)</p>
    <p>However, fixing flaws is significantly challenging</p>
    <p>Some flaws are design-choices that are hard to immediately fix (e.g. Runnable)</p>
    <p>Some are unsolved research challenges (e.g., BroadcastReceiver)</p>
    <p>SE effectively serves the function of discovering/documenting these for future research</p>
  </div>
  <div class="page">
    <p>CAVEATS</p>
    <p>SE doesnt claim soundness</p>
    <p>Aims to increase the confidence in the results of soundy tools by discovering and documenting unsound choices</p>
    <p>SE doesnt replace formal verification</p>
    <p>Rather a framework for systematically uncovering flaws in security tools</p>
    <p>Significant advancement over manually curated toolkits 23</p>
  </div>
  <div class="page">
    <p>CONCLUDING REMARKS</p>
    <p>SE demonstrates the effectiveness of mutation analysis at discovering undocumented flaws in security tools</p>
    <p>Flaws not only affect individual tools, but propagate to future research</p>
    <p>Android evolves, and SE is a significant improvement over manually curated benchmarks that need keep up with Androids fast-paced evolution</p>
    <p>SE allows patching of easily fixable but evasive flaws; however, this is a hard problem in general</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Code and data at: https://muse-security-evaluation.github.io/</p>
    <p>Kaushal Kafle William &amp; Mary kkafle@cs.wm.edu</p>
  </div>
</Presentation>
