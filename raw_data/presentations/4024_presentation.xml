<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Truncating TLS Connections to Violate Beliefs in Web Applications</p>
    <p>Ben Smyth &amp; Alfredo Pironti</p>
    <p>WOOT 13 Aug 2013</p>
    <p>http://www.bensmyth.com http://alfredo.pironti.eu/research/</p>
  </div>
  <div class="page">
    <p>Web applica*on state</p>
    <p>Client perceived state Server stored state</p>
    <p>Send email</p>
    <p>SMTP</p>
    <p>email sent</p>
  </div>
  <div class="page">
    <p>TLS security</p>
    <p>TCP</p>
    <p>Applica*on</p>
    <p>TLS Crypto</p>
    <p>Security:  Server (and client) authentication  Confidentiality  Integrity: messages received as sent</p>
    <p>single connection Termination modes:  Graceful closure</p>
    <p>all messages received as sent  Fatal closure e.g. after a corrupt message</p>
    <p>a prefix of messages received as sent</p>
  </div>
  <div class="page">
    <p>Trunca*ng TLS connec*ons</p>
    <p>Consider a wire transfer to Charlie's Angels: POST /wire_transfer.php HTTP/1.1 Host: mybank.com Content-Type: application/x-www-form-urlencoded Content-Length: 40 amount=1000&amp;recipient=Charlie%27s_Angels Suppose the request is fragmented by TLS 1) POST [] recipient=Charlie 2) %27s_Angels AAack: Drop the 2nd fragment to transfer money to Charlie.</p>
    <p>Henceforth, we consider trunca*on aAacks which drop messages, rather than fragments</p>
    <p>failure to properly close a connec6on no longer requires that a session not be resumed [...] to conform with widespread implementa6on prac6ce</p>
    <p>RFC 5246  TLS specifica*on</p>
    <p>Server ignores:  termination mode  Content-Length field Fix:  wire transfers upon</p>
    <p>graceful closure only  check lengths Attack works against Apache</p>
  </div>
  <div class="page">
    <p>Challenges for web applica*ons</p>
    <p>Web applications:  Browsers maintain multiple</p>
    <p>connections (to load content in parallel, for example)</p>
    <p>TLS provides:  No integrity guarantees</p>
    <p>across multiple connections  hence, ordering issues</p>
    <p>between connections</p>
    <p>Adversary model (standard):  Adversary has full control</p>
    <p>of the network  i.e. read, delete, and</p>
    <p>inject messages</p>
  </div>
  <div class="page">
    <p>Contribu*on</p>
    <p>Attacks which truncate TLS connections to exploit logical web application flaws, enabling:  Cast votes [on behalf of honest voters] in Helios elections  Full control of Microsoft Live accounts  Temporary access to Google accounts We suspect our insights will lead to the discovery of further attacks.</p>
  </div>
  <div class="page">
    <p>Helios electronic vo*ng system</p>
    <p>Verifiability enables us to use untrusted vo6ng machines and check aCerwards that the claimed result is valid</p>
    <p>Helios is a verifiable e-voting system  Catholic University of Louvain 2009</p>
    <p>presidential election:  ~4000 votes / 25000 voters</p>
    <p>IACR 2011+onwards board election  621 votes / 1484 voters (2011)</p>
    <p>Princeton University 2009+onwards for student government</p>
    <p>Cryptographic proofs of security!</p>
  </div>
  <div class="page">
    <p>Helios: Overview</p>
    <p>Ballot construc*on and authen*ca*on handled by a vo*ng machine Permits re-vo6ng: cast arbitrarily many ballots/count last</p>
  </div>
  <div class="page">
    <p>Helios: Ballot cas*ng</p>
    <p>No*fica*on of sign-out before vo*ng machine makes the request! 3) Truncate sign-out request 4) Use vo*ng machine to cast a new vote No TLS protec*on: sign-out request (2) and adversary (4) use different connec*ons. Fix: (1) &amp; (2) atomic.</p>
    <p>A video demonstra*ng this aAack will be available online.</p>
    <p>! ! ! &lt;p&gt;&lt;b&gt;For your safety, we have logged you out.&lt;/b&gt;&lt;/p&gt;! ! &lt;iframe border=&quot;0&quot; src=&quot;/auth/logout&quot; frameborder=&quot;0&quot; height=&quot;0&quot; width=&quot;0&quot;&gt;! ! &lt;/iframe&gt;! ! ! ! 2) !REQUESTS https://vote.heliosvoting.org/auth/logout!</p>
    <p>!Response: 302 - Moved Temporarily! !Location[http://vote.heliosvoting.org/]!</p>
  </div>
  <div class="page">
    <p>Microso` Live accounts</p>
    <p>Setting:  Shared computer (e.g., public library, work place, )</p>
    <p>Trusted computer, i.e., not tampered with  Adversary accesses computer after honest user has finished</p>
    <p>The video will be available online.</p>
    <p>Video Demo (Live demos are too stressful!)</p>
  </div>
  <div class="page">
    <p>Notification of sign-out before server receives request (client's belief  server's belief)!  Truncate sign-out  Access account on another connection</p>
    <p>Microso` Live accounts</p>
    <p>Setting:  Shared computer (e.g., public library, work place, )</p>
    <p>Trusted computer, i.e., not tampered with  Adversary accesses computer after honest user has finished</p>
  </div>
  <div class="page">
    <p>Fixes:  Centralize authentication; or  Chain sign-out requests</p>
    <p>Microso` Live accounts Client Authentication Servers</p>
    <p>Begin logout</p>
    <p>JS code</p>
    <p>Logout Account</p>
    <p>Youve signed out</p>
    <p>Logout Hotmail</p>
  </div>
  <div class="page">
    <p>Google accounts Sebng: Shared computer (e.g., public library, work place, )</p>
  </div>
  <div class="page">
    <p>Google accounts: AAack</p>
    <p>A video demonstra*ng this aAack will be available online.</p>
    <p>Sebng: Shared computer (e.g., public library, work place, )</p>
    <p>Notification of sign-out before server receives request!  Truncate Gmail sign-out with TCP reset</p>
    <p>(TCP drop hangs the browser)  Fatal connection closure ignored  Access Gmail on another connection</p>
    <p>House-keeping terminates (~5mins) Fixes:  Handle fatal connection closure; or  Centralize auth. or chain sign-outs</p>
    <p>&lt;body onload=&quot;doRedirect()&quot;&gt;! &lt;script type=&quot;text/javascript&quot;&gt;! function doRedirect() {! location.replace(&quot;http://www.google.fr/accounts/Logout2?ilo=1&amp;ils=s.FR&amp;! ilc=1&amp;continue=https://www.google.com/webhp?zx=1076119961&quot;);! }! &lt;/script&gt;! &lt;img width=&quot;0&quot; height=&quot;0&quot; alt=&quot;Sign Out&quot; ! src=&quot;https://mail.google.com/mail?logout=img&amp;zx=-2531125006460954395&quot;&gt;! &lt;/body&gt;</p>
  </div>
  <div class="page">
    <p>We exploit flaws in sign-out procedures to prevent termination of sessions, whilst notifying the user of success.  Attacks against Helios, Google &amp; Microsoft</p>
    <p>Consequently, even trusted shared computers offer no security!  Fixes proposed, therefore trusted shared computers offer security.  All vulnerabilities have been disclosed;</p>
    <p>but none have been fixed yet.  De-synchronization of client/server state as attack vector.</p>
    <p>Further attacks?  Better programming practices?</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Thank you! Ques*ons?</p>
    <p>http://www.bensmyth.com http://alfredo.pironti.eu/research/</p>
  </div>
</Presentation>
