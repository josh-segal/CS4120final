<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Making Cloud Easy: Design Considerations and First Components of a Distributed Operating System for Cloud</p>
    <p>James Kempf for the Nefele Development Team ER RACSP July 09, 2018</p>
    <p>James Kempf ER RACSP 2018-07-09</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>All cloud services are</p>
    <p>fully distributed</p>
    <p>Datacenter capacity</p>
    <p>organically adapts and</p>
    <p>self-configures</p>
    <p>All resources belong to a</p>
    <p>single resource manager</p>
    <p>Datacenter is abstracted as Single System</p>
    <p>Different communication mechanisms for</p>
    <p>different distances</p>
    <p>Set of communication</p>
    <p>abstractions structured</p>
    <p>along a latency gradient</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Differences from previous SSI work</p>
    <p>No distributed kernel Single server Linux kernel used as a modular system</p>
    <p>component Provides virtual memory and thread management</p>
    <p>Other operating system services like process creation and resource management are distributed</p>
    <p>No distributed shared virtual memory or distributed thread management Processes get only as much virtual memory as on a</p>
    <p>single machine and only as many threads as the local Linux OS can provide</p>
    <p>Monolithic applications are not distributed automatically as SSI suggests Applications need to be designed modularly for</p>
    <p>distribution</p>
    <p>Our work: SSI for Cloud Native  Image source from top to bottom:</p>
    <p>https://www.zerostack.com/cloud-native-apps-icons-hover/ http://www.iet.unipi.it/a.bechini/concur/concur.html</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Addressing pain points in existing cloud platforms OpenStack</p>
    <p>Remove lower bound on minimum unit of deployment without impacting scale up potential  Processes rather than VM images for execution</p>
    <p>context  Remove need for programmer to deal with virtual</p>
    <p>networks and infrastructure programming  Reduce the administration effort, simplify upgrade</p>
    <p>and maintenance Kubernetes</p>
    <p>Add native tenant management to improve potential for resource and capacity sharing</p>
    <p>Replace networking with IPC to simplify service interface and improve performance</p>
    <p>Overall  Reduce the number of execution context layers  Improve co-ordination between layers</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Making 3rd generation cloud real</p>
    <p>Implemented now:</p>
    <p>Single System Image for easy development and deployment of applications</p>
    <p>Automatic resource federation for easy setup of datacenter resources</p>
    <p>Message bus for structured, fast control plane messaging</p>
    <p>Blockchain based tenant management with smart contracts</p>
    <p>Under development:</p>
    <p>Serverless application runtime with fast key-value store for state handling</p>
    <p>Single touch installation, configuration and upgrade</p>
    <p>Acceleration through domain specific hardware</p>
    <p>Development environments for cloud native applications</p>
    <p>Application runtime</p>
    <p>Messaging*</p>
    <p>Compute</p>
    <p>Network Storage Accelerator</p>
    <p>Linux Linux Linux Linux Linux</p>
    <p>T e</p>
    <p>n a</p>
    <p>n t</p>
    <p>m a</p>
    <p>n a</p>
    <p>g e</p>
    <p>m e</p>
    <p>n t</p>
    <p>D C</p>
    <p>p o</p>
    <p>li cy</p>
    <p>a n</p>
    <p>d</p>
    <p>m a</p>
    <p>n a</p>
    <p>g e</p>
    <p>m e</p>
    <p>n t</p>
    <p>In te</p>
    <p>g ra</p>
    <p>te d</p>
    <p>a n</p>
    <p>a ly</p>
    <p>ti cs</p>
    <p>DC boot</p>
    <p>* Together with and</p>
    <p>Remainder of talk</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Nefele SDK</p>
    <p>The SSI abstraction is fronted to the developer through an SDK library</p>
    <p>Structured like the Linux libc OS Syscall library</p>
    <p>SDK library is libnefele</p>
    <p>C library for now (Python and Golang under test)</p>
    <p>All API calls block until the call completes</p>
    <p>Currently implemented functions</p>
    <p>Process management (creation, deletion, etc.)</p>
    <p>Legacy</p>
    <p>Filesystem uses legacy Linux API</p>
    <p>Linux libc calls are also available for single machine operations</p>
    <p>Development environments for cloud native applications</p>
    <p>Application runtime</p>
    <p>Messaging</p>
    <p>Compute</p>
    <p>Network Storage Accelerator</p>
    <p>Linux Linux Linux Linux Linux</p>
    <p>T e</p>
    <p>n a</p>
    <p>n t</p>
    <p>m a</p>
    <p>n a</p>
    <p>g e</p>
    <p>m e</p>
    <p>n t</p>
    <p>D C</p>
    <p>p o</p>
    <p>li cy</p>
    <p>a n</p>
    <p>d</p>
    <p>m a</p>
    <p>n a</p>
    <p>g e</p>
    <p>m e</p>
    <p>n t</p>
    <p>In te</p>
    <p>g ra</p>
    <p>te d</p>
    <p>a n</p>
    <p>a ly</p>
    <p>ti cs</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Hermor Stack</p>
    <p>Processes commuicate through mailboxes</p>
    <p>Messages in Google protobuf format</p>
    <p>Three addressing schemes:  Random addresses</p>
    <p>similar to TIPC ports  Assigned and</p>
    <p>distributed locationindependent numbered services from TPIC</p>
    <p>Symbolic string based names</p>
    <p>Implemented</p>
    <p>In process</p>
    <p>Protocols</p>
    <p>Reliable messaging</p>
    <p>Unreliable messagingHigh</p>
    <p>performance RDMA</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Estimating  using Monte Carlo simulation</p>
    <p>Generate points uniformly distributed at random over a 1x1 square.</p>
    <p>Keep track of points inside a circle with radius 0.5 and points outside</p>
    <p>Blue is outside, red is inside</p>
    <p>Area of circle is r2 =  / 4</p>
    <p>Divide Ninner by Ntotal should give an estimate of /4</p>
    <p>Multiply by 4 for</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Sample application Montecarlo</p>
    <p>Worker Worker Worker</p>
    <p>Printer</p>
    <p>nefele_n_spawn(): spawn as many as tenant has cpu capacity Updates</p>
    <p>and error</p>
    <p>Distributed shared folder (/data/pi)</p>
    <p>Web monitor</p>
    <p>HTTP POST</p>
    <p>Store</p>
    <p>MonteCarlo simulation to estimate .</p>
    <p>Parallell simulations to rapidly increase precision.</p>
    <p>nefele_spawn()</p>
    <p>Hermodr message bus: printer@{8080,1,1}</p>
    <p>hrmd_new(): connect to Hermodr message bus</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Monte Carlo main program</p>
    <p>int main(int argc, char* argv[]) { () char* worker = &quot;/usr/bin/montecarlo_worker&quot;; char* printer = &quot;/usr/bin/montecarlo_printer&quot;;</p>
    <p>nefele_spawn(&amp;pid_printer, printer, p_arg, ); ()</p>
    <p>do { () nefele_n_spawn(pids, new_req, worker, w_arg, ); nefele_waitpid(0, &amp;status, 0);</p>
    <p>} while (pending &gt; 0 || completed &lt; N1);</p>
    <p>nefele_kill(pid_printer, 9); printf();</p>
    <p>}</p>
    <p>Control Plane</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Monte Carlo worker program</p>
    <p>int main(int argc, char* argv[]) { () msg.t = monte_carlo_count_pi(N2); msg.n = N2; ()</p>
    <p>if (hrmd_service_exists(hrmd, &quot;printer@{8080,1,1}&quot;, 10000)) {</p>
    <p>hrmd_message(hrmd, &quot;printer@{8080,1,1}&quot;, (const byte*) &amp;msg, sizeof(msg));</p>
    <p>} ()</p>
    <p>}</p>
    <p>Parallel task worker</p>
  </div>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Assumptions, Open Issues, and Feedback</p>
    <p>Assumptions  Designing cloud management software as a system to remove the need for infrastructure</p>
    <p>programming and simplify networking will:  Radically reduce the amount of work a developer needs to go through to develop and deploy applications into</p>
    <p>a cloud</p>
    <p>Radically reduce the amount of work needed to manage cloud infrastructure  Partially this will be due to being able to design management automation in from the start rather than having to patch it</p>
    <p>in later</p>
    <p>Open Issues  Will the Single System approach work without distributed shared virtual memory and distributed</p>
    <p>thread management?  Can our approach better support Kubernetes and other Cloud Native Foundation technologies and</p>
    <p>serverless programming than running on Openstack or directly on Linux?  Can our approach better support emerging application classes like the RiseLab Ray AI application</p>
    <p>framework?</p>
    <p>Feedback  IPC v.s. IP for communication and exposing latency to the developer?  How to incorporate policy?  Management of storage?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Ericsson Internal | 2018-02-21</p>
    <p>Single System Image for Cloud Native: Key Ideas</p>
    <p>Use processes instead of VMs for execution context</p>
    <p>Use IPC instead of IP for communication locally, expose latency to the developer to allow them to compensate in their designs</p>
    <p>Design cloud systems management to be automated rather than automate it after designed</p>
  </div>
</Presentation>
