<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Multi-structured redundancy</p>
    <p>Eno Thereska, Phil Gosset, Richard Harper</p>
    <p>Microsoft Research, Cambridge UK</p>
    <p>[HotStorage12]</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Language/APIs</p>
    <p>{put, get,...}, , {create, read, write, }, , {addNode, AddEdge, GetNeighbors, }, , SQL</p>
    <p>Transactions, consistency, atomicity</p>
    <p>No/transactions, eventual/strong consistency, rename, ...</p>
    <p>Caching and prefetching</p>
    <p>No caching, no prefetching, LRU, MRU, hint-guided prefetching, ...</p>
    <p>Layout on persistent store or in memory</p>
    <p>log-structured, Btree, co-located, row store, column store, matrix, ...</p>
  </div>
  <div class="page">
    <p>Over-optimizing point solutions</p>
    <p>Weve done it in the past with file systems (FS)</p>
    <p>Were doing it now with key-value (KV) stores</p>
    <p>Maybe well do it with graph stores (GS)</p>
    <p>Do our assumptions stay true over time?  What if value in KV grows over time? (-&gt; FS)</p>
    <p>What if relations are desired among items? (-&gt; GS)</p>
    <p>What if our workloads change?  Facebooks photo store: [designed for scenarios where]</p>
    <p>data is written once, read often, [and is] never modified [Haystack, OSDI10]</p>
  </div>
  <div class="page">
    <p>Workloads are too complex for a single abstraction</p>
    <p>Anecdotal evidence:</p>
    <p>Home user uploads 100 photos, and later sorts, tags, and browses them</p>
    <p>A small business processes transactions during the day and data mines them during the night</p>
  </div>
  <div class="page">
    <p>Real evidence</p>
    <p>Found mostly in database community  FILESTREAM addition to SQL Server [&gt;2008]</p>
    <p>Fractured mirrors (column-stores and row-stores) [VLDB02]</p>
    <p>Other related work  SwissBox [CIDR11]  TableFS [CMU12]</p>
    <p>Anvil [SOSP09], Stasis [OSDI06], BoxWood [OSDI04]</p>
    <p>WinFS attempt</p>
  </div>
  <div class="page">
    <p>Research agenda</p>
    <p>Investigate how multiple data structure abstractions can co-exist in the same system</p>
    <p>Two simultaneous paths</p>
    <p>Data-center scale</p>
    <p>Single-laptop/tablet scale</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Data-center store</p>
    <p>Laptop/tablet store</p>
  </div>
  <div class="page">
    <p>Data center approach</p>
    <p>Key idea: use existing N way redundancy</p>
    <p>To have N data structures co-exist</p>
    <p>Analogies in PL</p>
    <p>Sorted list and hash table storing the same data</p>
    <p>N-way programming</p>
    <p>Investigating 3 data structures</p>
    <p>Key-value, file and graph</p>
  </div>
  <div class="page">
    <p>No change in programming APIs (yet)</p>
  </div>
  <div class="page">
    <p>Example</p>
  </div>
  <div class="page">
    <p>Building on Everest[OSDI08],Sierra[Eurosys11]</p>
    <p>Servers</p>
    <p>Variable length chunks Distributed log</p>
    <p>Primary-based concurrency control Caching and prefetching</p>
    <p>Transactions</p>
    <p>Metadata Service (MDS) Namespace, data location</p>
    <p>Highly available (replicated) Scalable &amp; lightweight</p>
    <p>Not on data path</p>
    <p>Client library</p>
    <p>KV, File, Graph API read(chunk ID, offset, size...) write(chunk ID, offset, size, data...)</p>
    <p>C C C C</p>
    <p>C C C C</p>
    <p>C C C C</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>... C C C C</p>
    <p>...</p>
    <p>L L L L</p>
    <p>L L L L</p>
    <p>L L L L</p>
    <p>L L L L</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Are N data structures sufficient?</p>
    <p>Could peak performance suffer?</p>
    <p>What about performance interference?</p>
    <p>SSDs and (NV)RAM only</p>
  </div>
  <div class="page">
    <p>Challenges (cont)</p>
    <p>Speed-matching of updates</p>
    <p>Memory Log-SSD File-SSD</p>
    <p>Throughput (1KiB updates/s)</p>
  </div>
  <div class="page">
    <p>Challenges (cont)</p>
    <p>Can recovery be uniformly fast?</p>
    <p>Could one single (in-memory) structure always be best? (e.g., RamCloud [SOSP11] approach)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Data-center store</p>
    <p>Laptop/tablet store</p>
  </div>
  <div class="page">
    <p>Laptop/tablet approach</p>
    <p>Why care?</p>
    <p>Peoples stuff is not just files [CHI12]</p>
    <p>E.g., desire to natively store region of Facebook graph locally</p>
    <p>Blur the lines between local file system and cloud</p>
    <p>Store exports native data structures</p>
    <p>Key-value store, files, graph</p>
    <p>No redundancy available, system uses partitioning</p>
  </div>
  <div class="page">
    <p>What were building</p>
  </div>
  <div class="page">
    <p>Summary of research agenda</p>
    <p>Investigate how multiple data structure abstractions can co-exist in the same system</p>
    <p>Two simultaneous paths</p>
    <p>Data-center scale</p>
    <p>Single-laptop/tablet scale</p>
    <p>Collaboration between Systems and Networking and Socio-digital Systems group http://research.microsoft.com/sysdes/</p>
  </div>
</Presentation>
