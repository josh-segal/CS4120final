<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PHMon: A Programmable Hardware Monitor and Its Security Use Cases</p>
    <p>Leila Delshadtehrani, Sadullah Canakci, Boyou Zhou, Schuyler Eldridge, Ajay Joshi, and Manuel Egele</p>
    <p>delshad@bu.edu</p>
    <p>Boston University</p>
    <p>August 12, 2020</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Motivation Overview</p>
    <p>Motivation</p>
    <p>Current Trend</p>
    <p>Growing demand to enforce security policies in hardware</p>
    <p>Intel SGX</p>
    <p>Intel TXT</p>
    <p>Intel MPX ARM</p>
    <p>TrustZone</p>
    <p>AMD SVM</p>
    <p>Intel CET</p>
    <p>ARM PA</p>
    <p>...</p>
    <p>SafeC</p>
    <p>Hardbound 2009</p>
    <p>Softbound</p>
    <p>MPX Announced</p>
    <p>MPX Available</p>
    <p>MPX Disabled</p>
    <p>[AUSTIN, PLDI94] [DEVIETTI, ASPLOS08] [NAGARAKATTE, PLDI09]</p>
    <p>What if we could have a flexible hardware implementation that could enhance and enforce a variety of security policies as security threats evolve?!</p>
    <p>Boston University August 12, 2020 2/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Motivation Overview</p>
    <p>Motivation</p>
    <p>Current Trend</p>
    <p>Growing demand to enforce security policies in hardware</p>
    <p>Intel SGX</p>
    <p>Intel TXT</p>
    <p>Intel MPX ARM</p>
    <p>TrustZone</p>
    <p>AMD SVM</p>
    <p>Intel CET</p>
    <p>ARM PA</p>
    <p>...</p>
    <p>SafeC</p>
    <p>Hardbound 2009</p>
    <p>Softbound</p>
    <p>MPX Announced</p>
    <p>MPX Available</p>
    <p>MPX Disabled</p>
    <p>[AUSTIN, PLDI94] [DEVIETTI, ASPLOS08] [NAGARAKATTE, PLDI09]</p>
    <p>What if we could have a flexible hardware implementation that could enhance and enforce a variety of security policies as security threats evolve?!</p>
    <p>Boston University August 12, 2020 2/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Motivation Overview</p>
    <p>Motivation</p>
    <p>Current Trend</p>
    <p>Growing demand to enforce security policies in hardware</p>
    <p>Intel SGX</p>
    <p>Intel TXT</p>
    <p>Intel MPX ARM</p>
    <p>TrustZone</p>
    <p>AMD SVM</p>
    <p>Intel CET</p>
    <p>ARM PA</p>
    <p>...</p>
    <p>SafeC</p>
    <p>Hardbound 2009</p>
    <p>Softbound</p>
    <p>MPX Announced</p>
    <p>MPX Available</p>
    <p>MPX Disabled</p>
    <p>[AUSTIN, PLDI94] [DEVIETTI, ASPLOS08] [NAGARAKATTE, PLDI09]</p>
    <p>What if we could have a flexible hardware implementation that could enhance and enforce a variety of security policies as security threats evolve?!</p>
    <p>Boston University August 12, 2020 2/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Motivation Overview</p>
    <p>Our Proposal - PHMon</p>
    <p>PHMon</p>
    <p>A hardware monitor and the full</p>
    <p>software stack around it</p>
    <p>A programmable hardware monitor interfaced with a RISC-V Rocket processor on an FPGA OS support Software API Security use cases</p>
    <p>How Does It Work?</p>
    <p>A user/admin configures the hardware monitor</p>
    <p>The hardware monitor collects the</p>
    <p>runtime execution information Checks for the specified events, e.g., detects branch instructions Performs follow-up actions, e.g., an ALU operation</p>
    <p>Hardware</p>
    <p>API Application</p>
    <p>Full SW Stack</p>
    <p>OS</p>
    <p>N</p>
    <p>User/Admin Event/Action Specification Using PHMon API</p>
    <p>Program PHMon</p>
    <p>PHMon Monitor the execution</p>
    <p>Is process Terminated?</p>
    <p>Is PHMon Disabled?</p>
    <p>PHMon Stop</p>
    <p>Monitoring</p>
    <p>Take Actions</p>
    <p>Monitor Events</p>
    <p>Y Y N</p>
    <p>Boston University August 12, 2020 3/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Hardware Overview</p>
    <p>HW Functionality</p>
    <p>Collect the instruction trace</p>
    <p>Find matches with programmed events</p>
    <p>Take follow-up actions</p>
    <p>RISC-V Rocket Microprocessor</p>
    <p>Pipelined Processor Core</p>
    <p>L1 Data Cache</p>
    <p>P C _ G E N</p>
    <p>/ F e t c h</p>
    <p>D e c</p>
    <p>E x e</p>
    <p>M e m</p>
    <p>W B</p>
    <p>TU</p>
    <p>PHMon</p>
    <p>PHMon</p>
    <p>ALU Local</p>
    <p>Register File</p>
    <p>Control Unit (CU)</p>
    <p>M a t c h Q u e u e</p>
    <p>M U _ d a t a</p>
    <p>M U _ a d d r</p>
    <p>M U _ i d</p>
    <p>. . .</p>
    <p>Match Packet</p>
    <p>conf_ptr</p>
    <p>Config Unit-0 (CFU-0)</p>
    <p>... Type 2b</p>
    <p>In1 3b</p>
    <p>In2 3b</p>
    <p>Fn 4b</p>
    <p>Out 3b</p>
    <p>Data 64b</p>
    <p>Action Config Table</p>
    <p>conf_ctr</p>
    <p>Action Unit (AU)</p>
    <p>Commit Log - inst - pc_src - pc_dst - addr - data</p>
    <p>Cmd/Resp</p>
    <p>Interrupt Memory</p>
    <p>Match Unit-0 (MU-0)</p>
    <p>Predicate: - inst = *8067 - pc_src = * - pc_dst = * - addr = * - data = *</p>
    <p>Counter Threshold</p>
    <p>=?</p>
    <p>C o m p a r a t o r</p>
    <p>Commit Log</p>
    <p>Memory Request</p>
    <p>Command</p>
    <p>Response</p>
    <p>Interrupt</p>
    <p>Memory Response</p>
    <p>RoCC Interface</p>
    <p>Boston University August 12, 2020 4/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Software Overview</p>
    <p>Software Interface</p>
    <p>A list of functions that use RISC-Vs</p>
    <p>standard ISA extension</p>
    <p>Configure PHMon Communicate with PHMon</p>
    <p>Reset MU-0 and configure the match pattern</p>
    <p>phmon_reset_val(0); phmon_pattern(0, &amp;mask_inst0)</p>
    <p>Compare pc_dst and pc_src, and trigger an interrupt</p>
    <p>action_mu0.op_type = e_OP_ALU; //ALU operation action_mu0.in1 = e_IN_DATA_RESP; //MU_resp action_mu0.in2 = e_IN_LOC3; //Local3 action_mu0.fn = e_ALU_SEQ; //Set Equal action_mu0.out = e_OUT_INTR; //Interrupt reg phmon_action_config(0, &amp;action_mu0);</p>
    <p>OS Support</p>
    <p>Per process OS support</p>
    <p>Maintain PHMon information during context switches</p>
    <p>Interrupt handling OS</p>
    <p>support</p>
    <p>Delegate interrupt to OS Terminate the violating process</p>
    <p>Boston University August 12, 2020 5/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Implementation and Evaluation Framework</p>
    <p>Implementation</p>
    <p>PHMon as a RoCC, written in Chisel HDL</p>
    <p>Interfaced with the in-order RISC-V Rocket core</p>
    <p>Linux kernel v4.15</p>
    <p>RISC-V gnu toolchain for cross-compilation</p>
    <p>Evaluation</p>
    <p>Prototyped on Xilinx Zynq Zedboard</p>
    <p>Rocket core + PHMon</p>
    <p>Open-sourced at https://github.com/bu-icsg/PHMon</p>
    <p>Boston University August 12, 2020 6/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Use Cases</p>
    <p>Shadow Stack</p>
    <p>Preventing Information Leakage</p>
    <p>Shadow Stack</p>
    <p>Hardware Accelerated Fuzzing</p>
    <p>Watchpoints and Accelerated Debugger</p>
    <p>https://security.googleblog.com/2019/10/protecting-against-code-reuse-in-linux30.html, https://www.darkreading.com/attacks-breaches/heartbleed-attack-targeted-enterprise-vpn-/d/d-id/1204592, https://medium.com/@dieswaytoofast/fuzzing-and-deep-learning-5aae84c20303, https://hackernoon.com/professional-debugging-in-rails-1yr2bnz</p>
    <p>Shadow Stack Hardware Accelerated</p>
    <p>Fuzzing</p>
    <p>https://security.googleblog.com/2019/10/protecting-against-code-reuse-in-linux30.html, https://medium.com/@dieswaytoofast/fuzzing-and-deep-learning-5aae84c20303,</p>
    <p>Boston University August 12, 2020 7/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Use Cases</p>
    <p>Shadow Stack</p>
    <p>Preventing Information Leakage</p>
    <p>Shadow Stack</p>
    <p>Hardware Accelerated Fuzzing</p>
    <p>Watchpoints and Accelerated Debugger</p>
    <p>https://security.googleblog.com/2019/10/protecting-against-code-reuse-in-linux30.html, https://www.darkreading.com/attacks-breaches/heartbleed-attack-targeted-enterprise-vpn-/d/d-id/1204592, https://medium.com/@dieswaytoofast/fuzzing-and-deep-learning-5aae84c20303, https://hackernoon.com/professional-debugging-in-rails-1yr2bnz</p>
    <p>Shadow Stack Hardware Accelerated</p>
    <p>Fuzzing</p>
    <p>https://security.googleblog.com/2019/10/protecting-against-code-reuse-in-linux30.html, https://medium.com/@dieswaytoofast/fuzzing-and-deep-learning-5aae84c20303,</p>
    <p>Boston University August 12, 2020 7/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Use Cases: Shadow Stack</p>
    <p>PHMon-based Shadow Stack</p>
    <p>Simple and flexible</p>
    <p>Two MUs</p>
    <p>Shared memory space</p>
    <p>Allocated by OS as a user-space memory</p>
    <p>Secure</p>
    <p>Efficient</p>
    <p>For SPECint2000, SPECint2006, and MiBench benchmarks, on average, 0.9% performance overhead</p>
    <p>Return Address</p>
    <p>Argument Registers Saved</p>
    <p>Registers Local</p>
    <p>Variables</p>
    <p>...</p>
    <p>Main Stack</p>
    <p>Return Address</p>
    <p>...</p>
    <p>Shadow Stack</p>
    <p>Return Address</p>
    <p>Return Address</p>
    <p>bzip 2</p>
    <p>libq uan</p>
    <p>tum gob mk</p>
    <p>hm me</p>
    <p>r asta</p>
    <p>r h26</p>
    <p>xala ncb</p>
    <p>mk gcc Geo</p>
    <p>Mea n</p>
    <p>Pe rfo</p>
    <p>rm an</p>
    <p>ce O</p>
    <p>ve rh</p>
    <p>ea d</p>
    <p>(% )</p>
    <p>SPECint2006</p>
    <p>Boston University August 12, 2020 8/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Use Cases: Hardware Accelerated Fuzzing</p>
    <p>American Fuzzy Lop (AFL) [Zalewski, 2013]</p>
    <p>A state-of-the-art fuzzer</p>
    <p>Two main units</p>
    <p>The fuzzing logic</p>
    <p>The instrumentation suite Compiler-based QEMU-based</p>
    <p>https://rabbitbreeders.us/american-fuzzy-lop-rabbits/</p>
    <p>Parent Process (AFL)</p>
    <p>Program Execution On RISC-V Processor</p>
    <p>Fork+Execv (1)</p>
    <p>Process terminates</p>
    <p>(4)</p>
    <p>Monitoring (2)/ Updating the</p>
    <p>branch coverage (3)</p>
    <p>Reading the branch coverage (5)</p>
    <p>Shared Memory Region</p>
    <p>Memory</p>
    <p>Q E M U Child Process</p>
    <p>(The Fuzzed Program)</p>
    <p>QEMU-based AFL</p>
    <p>Shared Memory Region</p>
    <p>Memory</p>
    <p>PHMon-based AFL</p>
    <p>Boston University August 12, 2020 9/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Use Cases: Hardware Accelerated Fuzzing</p>
    <p>American Fuzzy Lop (AFL) [Zalewski, 2013]</p>
    <p>A state-of-the-art fuzzer</p>
    <p>Two main units</p>
    <p>The fuzzing logic</p>
    <p>The instrumentation suite Compiler-based QEMU-based</p>
    <p>https://rabbitbreeders.us/american-fuzzy-lop-rabbits/</p>
    <p>Parent Process (AFL)</p>
    <p>Program Execution On RISC-V Processor</p>
    <p>Fork+Execv (1)</p>
    <p>Process terminates</p>
    <p>(4)</p>
    <p>Monitoring (2)/ Updating the</p>
    <p>branch coverage (3)</p>
    <p>Reading the branch coverage (5)</p>
    <p>Shared Memory Region</p>
    <p>Memory</p>
    <p>Q E M U Child Process</p>
    <p>(The Fuzzed Program)</p>
    <p>QEMU-based AFL</p>
    <p>Shared Memory Region</p>
    <p>Memory</p>
    <p>PHMon-based AFL</p>
    <p>Boston University August 12, 2020 9/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Hardware Software Implementation Use Cases</p>
    <p>Use Cases: Hardware Accelerated Fuzzing</p>
    <p>American Fuzzy Lop (AFL) [Zalewski, 2013]</p>
    <p>A state-of-the-art fuzzer</p>
    <p>Two main units</p>
    <p>The fuzzing logic</p>
    <p>The instrumentation suite Compiler-based QEMU-based</p>
    <p>https://rabbitbreeders.us/american-fuzzy-lop-rabbits/</p>
    <p>sl eu</p>
    <p>th ki</p>
    <p>t</p>
    <p>zs td</p>
    <p>un ac</p>
    <p>e</p>
    <p>in de</p>
    <p>nt</p>
    <p>na sm</p>
    <p>pc re</p>
    <p>G eo</p>
    <p>M ea</p>
    <p>n</p>
    <p>Benchmarks</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>im pr</p>
    <p>ov em</p>
    <p>en t</p>
    <p>(X )</p>
    <p>Baseline AFL PHMon</p>
    <p>Fork Server</p>
    <p>PHMon improves AFLs performance by 16 over the baseline Power overhead: 5%</p>
    <p>Area overhead: 13.5%</p>
    <p>Parent Process (AFL)</p>
    <p>Program Execution On RISC-V Processor</p>
    <p>Fork+Execv (1)</p>
    <p>Process terminates</p>
    <p>(4)</p>
    <p>Monitoring (2)/ Updating the</p>
    <p>branch coverage (3)</p>
    <p>Reading the branch coverage (5)</p>
    <p>Shared Memory Region</p>
    <p>Memory</p>
    <p>Q E M U Child Process</p>
    <p>(The Fuzzed Program)</p>
    <p>QEMU-based AFL</p>
    <p>Shared Memory Region</p>
    <p>Memory</p>
    <p>PHMon-based AFL</p>
    <p>Boston University August 12, 2020 9/10</p>
  </div>
  <div class="page">
    <p>Introduction PHMon</p>
    <p>Conclusion</p>
    <p>Conclusion</p>
    <p>Ref: https://www.linux-apps.com/p/1082429/</p>
    <p>A hardware monitor with full software stack</p>
    <p>Shadow Stack</p>
    <p>Preventing Information Leakage</p>
    <p>Shadow Stack</p>
    <p>Hardware Accelerated Fuzzing</p>
    <p>Watchpoints and Accelerated Debugger</p>
    <p>Versatile and easily adopted</p>
    <p>FPGA prototype</p>
    <p>ARTIFACT EVALUATED</p>
    <p>PASSED</p>
    <p>https://www.usenix.org/system/files/ sec20spring_delshadtehrani_prepub.pdf</p>
    <p>https://github.com/bu-icsg/PHMon</p>
    <p>? Thanks! You can reach me atdelshad@bu.edu for follow-up questions. More information</p>
    <p>Boston University August 12, 2020 10/10</p>
  </div>
</Presentation>
