<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Practical Record And Replay Debugging With rr</p>
    <p>Robert O'Callahan</p>
  </div>
  <div class="page">
    <p>Debugging nondeterminism</p>
  </div>
  <div class="page">
    <p>Deterministic hardware</p>
  </div>
  <div class="page">
    <p>Sources of nondeterminism</p>
  </div>
  <div class="page">
    <p>Record inputs</p>
  </div>
  <div class="page">
    <p>Replay execution</p>
  </div>
  <div class="page">
    <p>Old idea Nirvana</p>
    <p>ReVirt</p>
    <p>Chronomancer</p>
    <p>PinPlay</p>
    <p>Jockey ReSpec</p>
    <p>PANDA Scribe</p>
    <p>ODR</p>
    <p>Echo</p>
    <p>FlashBackCLAP QuickRec</p>
    <p>ReTrace</p>
  </div>
  <div class="page">
    <p>rr goals l Easy to deploy: stock hardware, OS l Low overhead l Works on Firefox l Small investment</p>
  </div>
  <div class="page">
    <p>rr design</p>
    <p>Deterministic user-space CPU execution</p>
    <p>Li n</p>
    <p>u x</p>
    <p>p ro</p>
    <p>ce ss</p>
    <p>b</p>
    <p>o u</p>
    <p>n d</p>
    <p>ar y</p>
    <p>System call results</p>
    <p>Observable effects</p>
    <p>Record and replay</p>
    <p>Signals</p>
  </div>
  <div class="page">
    <p>No code instrumentation</p>
    <p>mov EDX, tls.ebp mov ECX, tls call MemReadCallback mov EAX, [EDX]</p>
  </div>
  <div class="page">
    <p>Use modern HW/OS features System call results ptrace</p>
    <p>Signals ptrace</p>
    <p>Shared memory data races Limit to single core</p>
    <p>Asynchronous event timing HW performance counters</p>
    <p>Trap on a subset of system calls seccomp-bpf</p>
    <p>Notification when system call blocks in the kernel</p>
    <p>DESCHED perf events</p>
    <p>Cheap block copies FIOCLONERANGE</p>
  </div>
  <div class="page">
    <p>ptrace</p>
    <p>rr before_syscall</p>
    <p>after_syscall Kernel read()</p>
    <p>... record results ...</p>
  </div>
  <div class="page">
    <p>Use modern HW/OS features System call results ptrace</p>
    <p>Signals ptrace</p>
    <p>Shared memory data races Limit to single core</p>
    <p>Asynchronous event timing HW performance counters</p>
    <p>Trap on a subset of system calls seccomp-bpf</p>
    <p>Notification when system call blocks in the kernel</p>
    <p>DESCHED perf events</p>
    <p>Cheap block copies FIOCLONERANGE</p>
  </div>
  <div class="page">
    <p>Data races C</p>
    <p>P U</p>
    <p>C P</p>
    <p>U 1</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Data races</p>
    <p>C P</p>
    <p>U 0</p>
  </div>
  <div class="page">
    <p>Use modern HW/OS features System call results ptrace</p>
    <p>Signals ptrace</p>
    <p>Shared memory data races Limit to single core</p>
    <p>Asynchronous event timing HW performance counters</p>
    <p>Trap on a subset of system calls seccomp-bpf</p>
    <p>Notification when system call blocks in the kernel</p>
    <p>DESCHED perf events</p>
    <p>Cheap block copies FIOCLONERANGE</p>
  </div>
  <div class="page">
    <p>Event timing: HW perf counters alarm()</p>
    <p>SIGALRM</p>
    <p>Measure progress</p>
    <p>Instructions executed!</p>
    <p>Retired conditional branches (Intel)</p>
    <p>Zero overhead</p>
    <p>Instructions executed!</p>
  </div>
  <div class="page">
    <p>Use modern HW/OS features System call results ptrace</p>
    <p>Signals ptrace</p>
    <p>Shared memory data races Limit to single core</p>
    <p>Asynchronous event timing HW performance counters</p>
    <p>Trap on a subset of system calls seccomp-bpf</p>
    <p>Notification when system call blocks in the kernel</p>
    <p>DESCHED perf events</p>
    <p>Cheap block copies FIOCLONERANGE</p>
  </div>
  <div class="page">
    <p>Accelerating system calls rr</p>
    <p>before_syscall</p>
    <p>after_syscall Kernel read()</p>
    <p>... record results ...</p>
  </div>
  <div class="page">
    <p>Use seccomp-bpf predicates</p>
    <p>Avoid context switches</p>
    <p>librrpreload.so shim_read()</p>
    <p>... record results ...</p>
    <p>Kernel read() Suppress ptrace trap</p>
  </div>
  <div class="page">
    <p>Blocking system calls</p>
    <p>librrpreload.so shim_read()</p>
    <p>... record results ...</p>
    <p>Kernel read() Blocks?Kernel read()Kernel read()</p>
  </div>
  <div class="page">
    <p>Blocking system calls</p>
    <p>read() ...</p>
    <p>kernel DESCHED perf event</p>
    <p>rr</p>
    <p>thread 2</p>
    <p>thread 1</p>
  </div>
  <div class="page">
    <p>Other issues</p>
    <p>RDTSC RDRAND XBEGIN/XEND CPUID</p>
  </div>
  <div class="page">
    <p>rr Overhead</p>
    <p>cp octane htmltest sambatest 0.00</p>
    <p>Record Replay Single Core</p>
    <p>Workload</p>
    <p>O v e rh</p>
    <p>e a d r</p>
    <p>e la</p>
    <p>ti v e t</p>
    <p>o b</p>
    <p>a s e lin</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Reverse-execution Debugging</p>
  </div>
  <div class="page">
    <p>Lessons Replay performance matters</p>
    <p>Session-cloning performance matters  Cloning processes via fork() seems cheaper than e.g.</p>
    <p>cloning VM state</p>
  </div>
  <div class="page">
    <p>Lessons In-process system-call interception is fragile</p>
    <p>applications make syscalls in strange states (bad TLS, insufficient stack, etc)</p>
    <p>in-process interception code could be accidentally or maliciously subverted</p>
    <p>move this part into kernel?</p>
  </div>
  <div class="page">
    <p>OS design implications Recording boundary should:</p>
    <p>be stable, simple, documented API boundary  also be a boundary for hardware performance</p>
    <p>counter measurement</p>
    <p>Linux kernel/user boundary is this (mostly) Windows kernel/user boundary is not</p>
  </div>
  <div class="page">
    <p>ARM</p>
    <p>retry: LDREX r0,[addr] ADD r0,1 hardware interrupt??? STREX r1,r0,[addr] CMP r1,0 BNE retry</p>
    <p>Need hardware support to detect/compensate  Or binary rewriting</p>
  </div>
  <div class="page">
    <p>Related work VM-level replay  heavyweight</p>
    <p>ReVirt, VMWare, QEMU (PANDA), Xen Kernel-supported replay  hard to maintain</p>
    <p>Scribe, dOS, Arnold Pure user-space replay  instrumentation, higher overhead</p>
    <p>PinPlay, iDNA, UndoDB Higher-level replay  more limited scope</p>
    <p>Chronon, Dolos, Chakra, R2 Parallel replay  more limited scope, higher overhead</p>
    <p>SMP-ReVirt, DoublePlay, ODR, Castor Hardware-supported parallel replay  nonexistent hardware</p>
    <p>FDR, BugNet, DeLorean, QuickRec</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>rrs approach delivers a lot of value</p>
    <p>More research needed for multicore approaches</p>
    <p>Lots of unexplored applications of record+replay</p>
  </div>
  <div class="page">
    <p>http://rr-project.org https://github.com/mozilla/rr</p>
  </div>
</Presentation>
