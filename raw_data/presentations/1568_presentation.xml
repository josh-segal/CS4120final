<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ram Kesavan, Rohit Singh, Travis Grusecki, Yuvraj Patel</p>
    <p>Algorithms and Data Structures for Efficient Free Space Reclamation in WAFL</p>
    <p>NetApp Inc., University of Wisconsin-Madison</p>
  </div>
  <div class="page">
    <p>WAFL: 25+ Years!  Technology trends</p>
    <p>MHz -&gt; GHz cores, 1 core -&gt; 40+ cores  HDDs (5k-&gt;15k rpm, MB-&gt;TB), SSDs (100GiB-&gt;32TiB+), Cloud, SCM  Max file system size: 28 GiB -&gt; 400 TiB</p>
    <p>Applications  NFS/SMB file sharing -&gt; LUNs with FC/iSCSI access  Virtualization over block &amp; file access</p>
    <p>Many data management features  snapshots, clones, replication, dedupe, compression, mobility, encryption, etc.</p>
    <p>Mixed workload deployment  ONTAP node: 100s of WAFL file systems, 100s TiB, 1000s of LUNs, etc.</p>
  </div>
  <div class="page">
    <p>Free Space Metadata</p>
    <p>Reasons for tracking free space:  find &amp; allocate blocks for new writes  report usage for provisioning/purchasing decisions</p>
    <p>Design dimensions:  in-memory vs persistent  lazy vs contemporaneous</p>
    <p>Consistent performance is key: balanced resource usage  user ops vs free space management (&amp; other backend work)  CPU, I/O, memory, etc.</p>
  </div>
  <div class="page">
    <p>WAFL: Layout &amp; Transactional Model</p>
    <p>File system is a tree of blocks  everything is a file, including metadata</p>
    <p>Log-structured &amp; copy-on-write  each dirty buffer written to a newly allocated block  except the superblock</p>
    <p>Large atomic transactions: ~GB worth of dirty buffers  ~2s to 5s long  persistent file system always self-consistent  consistency point (CP)</p>
  </div>
  <div class="page">
    <p>Atomic Update of the Persistent File System</p>
    <p>superblk</p>
    <p>A B</p>
    <p>C D E</p>
    <p>CPi</p>
    <p>B</p>
    <p>E</p>
    <p>superblk</p>
    <p>CPi+1</p>
  </div>
  <div class="page">
    <p>Atomic Update of the Persistent File System</p>
    <p>superblk</p>
    <p>A B</p>
    <p>C D E</p>
    <p>CPi</p>
    <p>B</p>
    <p>E</p>
    <p>superblk</p>
    <p>CPi+1  1 GB/s writes need  1 GB/s allocations of</p>
    <p>new blocks  1 GB/s frees of</p>
    <p>unused blocks</p>
  </div>
  <div class="page">
    <p>Activemap Bits: used(1) -&gt; free(0)  Long CPs due to:</p>
    <p>random frees -&gt; more dirty activemap blocks</p>
    <p>long activemap chains  Long CPs hurt write</p>
    <p>throughput</p>
    <p>A  B</p>
    <p>bit in A is cleared in CPi+1</p>
    <p>A  B</p>
    <p>Block A Block B Block C</p>
    <p>Block A Block B Block C</p>
    <p>C Block D</p>
    <p>D</p>
    <p>C Block D</p>
    <p>D</p>
    <p>Free Block Used Block Used Block in Chain</p>
  </div>
  <div class="page">
    <p>Append Log using L1s of a File</p>
    <p>Delay updates of activemap to avoid the chaining problem  Convert several random to few batched</p>
    <p>TLog(08): binary sort tree using L1s of log file  dropped due to unpredictable performance</p>
    <p>BFLog(12): 3 files - active, inactive (sorting), sorted  predictably pace sorting and freeing activity</p>
    <p>Log sized to ~0.5% of file system provides sufficient batching  Blocks freed by file/LUN deletions, SCSI hole-punching</p>
  </div>
  <div class="page">
    <p>Logging Results</p>
    <p>17% higher write throughput at 34%-48% lower latency  6% to 60% (unaged v aged) raw deletion throughput  Much higher delete throughput with little interference (not shown)</p>
    <p>La te nc y (m</p>
    <p>se c)</p>
    <p>Achieved Throughput (thousands of IOPS)</p>
    <p>BFLog Off Throughput</p>
    <p>BFLog On Throughput</p>
    <p>Delete Logging Off Delete Logging On</p>
    <p>A ch ie ve d G iB /s</p>
    <p>Unaged Aged</p>
  </div>
  <div class="page">
    <p>Snapshots</p>
    <p>superblk</p>
    <p>A B</p>
    <p>C D E</p>
    <p>B</p>
    <p>E</p>
    <p>superblk</p>
    <p>S1</p>
    <p>B</p>
    <p>E</p>
    <p>superblk</p>
    <p>S0 (current FS)</p>
    <p>Activemap for S1</p>
    <p>A B C D E B E  Activemap for S0 (current FS)</p>
    <p>A B C D E B E</p>
    <p>volume = current FS + all snapshots</p>
    <p>Free Block Used Block</p>
  </div>
  <div class="page">
    <p>Summary Map  Block is free iff every activemap says it is free  Summary Map = Bit-OR of snapshots activemaps</p>
    <p>metafile in the current file system  Block is free iff active &amp; summary bits are both 0  Summary can become stale:</p>
    <p>snapshot creation, deletion, etc.  sequential scan to fixup summary  correctness is preserved while scan is in progress</p>
    <p>Fast reclamation of space without impacting other operations</p>
  </div>
  <div class="page">
    <p>WAFL Layering: FlexVol &amp; Aggregates</p>
    <p>superblk</p>
    <p>A B</p>
    <p>C D E</p>
    <p>FlexVolume</p>
    <p>Activemap for Flexvol</p>
    <p>A B C D E</p>
    <p>Aggregate</p>
    <p>Container</p>
    <p>Q R S T U V</p>
    <p>N B C</p>
    <p>M 1 A</p>
    <p>O D E</p>
    <p>superblk</p>
    <p>W</p>
    <p>P</p>
    <p>M N O P Q  Activemap for Aggr</p>
    <p>R S T U V W</p>
  </div>
  <div class="page">
    <p>Bunched Delayed Frees &amp; Logging Interaction</p>
    <p>Bunched delayed frees: 60% lower latency at any load &amp; higher saturation point</p>
    <p>Optimized processing via FlexVol Log: 84% of the container blocks punched out in optimized mode -&gt; 26% higher throughput</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>WAFL has evolved over 2+ decades  deployments, media/hardware trends, applications/workloads</p>
    <p>Free space reclamation has also evolved  handle the changing requirements  interaction with dozens of features</p>
    <p>Consistent &amp; predictable performance  with low latency and high throughput</p>
  </div>
</Presentation>
