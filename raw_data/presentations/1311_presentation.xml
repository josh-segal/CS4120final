<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Monday, 28. July 2008</p>
    <p>FLAME: A Flow-level Anomaly Modeling Engine</p>
    <p>CSET Workshop 2008 Daniela Brauckhoff*, Arno Wagner, Martin May</p>
    <p>ETH Zurich, Switzerland</p>
    <p>ETH Zrich</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Many approaches for NetFlow-based anomaly detection developed in recent years</p>
    <p>PCA, Kalman/bloom filter, clustering, wavelets, SOMs, sketches,...</p>
    <p>Evaluation of approaches is difficult since appropriate evaluation traces are not available</p>
    <p>Appropriate means labeled, versatile, representative, and of sufficient size and length</p>
  </div>
  <div class="page">
    <p>Available Evaluation Methods</p>
    <p>Trace Merging Merge captured trace with attack traffic e.g., output from nmap scanner generate flows Drawbacks: too simplistic, network characteristics might not match</p>
    <p>Shape injection Inject anomaly of certain shape, e.g., rectangle, directly into metric used by detector Drawbacks: too specific, required for each metric, unrealistic</p>
    <p>Simulation/Emulation Emulate network nodes and generate traffic synthetically Drawbacks: limited size of experiments, generation of background traffic is difficult</p>
  </div>
  <div class="page">
    <p>Anomaly Injection for ADS Testing</p>
  </div>
  <div class="page">
    <p>Anomaly Injection by Trace Modification</p>
    <p>Advantages High reproducability Applicable to different data sets Fine-grained anomaly parameterization possible Generic with respect to detector since it modifies traffic directly (not derived metrics)</p>
    <p>Disadvantages Interaction with background traffic must be accounted for by the anomaly model Attack mitigation approaches cannot be evaluated Manual labeling of background traffic still necessary</p>
  </div>
  <div class="page">
    <p>FLAME: An experimentation framework</p>
    <p>FLAME is flexible, easily extensible, and available (so far upon request)</p>
  </div>
  <div class="page">
    <p>Setup Example</p>
  </div>
  <div class="page">
    <p>Flow vs Packet Generation</p>
    <p>Packet-level traffic generation has advantage that flow export settings (timeouts, sampling rates) can be adapted to the underlying trace less injection artifacts Packet-level models might not be available for all attacks (especially if models are extracted from flow traces), potentially more expensive FLAME supports packet-level and flow-level traffic generation</p>
  </div>
  <div class="page">
    <p>Generator/Add Component</p>
  </div>
  <div class="page">
    <p>Implementation Summary</p>
    <p>Communication between components via named pipes Producer-consumer synchronization with bounded buffer size (consumer waits for input from producer) Generic flow forwarder interface between core components (based on NetFlow v5) Configuration for deleter and packet generator via embedded Python (plug-ins) Performance: 140000 flow records per second (4-way Linux, dual-core CPUs, 2.2 GHz, 8 GB RAM)</p>
  </div>
  <div class="page">
    <p>Types of Anomalies</p>
    <p>Subtractive Anomalies Delete flows with defined characteristics from existing traffic Examples are outage events, ingress shifts</p>
    <p>Additive Anomalies Add flows with defined characteristics to existing traffic Examples are alpha flows, scans, bots</p>
    <p>Interactive Anomalies Delete exisiting flows, and add new flows Examples are denial of service attacks</p>
  </div>
  <div class="page">
    <p>Example 1: Ingress Shift</p>
    <p>Deleter Model (python pseudo code): if (start &lt; time &lt; end) {</p>
    <p>if (source or destination IP address within range){ delete flow;</p>
    <p>} } Deleter Parameters: start, end, shifted IP address range</p>
  </div>
  <div class="page">
    <p>Example 2: Constant Rate TCP SYN Scan</p>
    <p>Generator Model on packet level (python pseudo code): while (start &lt; time &lt; end) {</p>
    <p>generate TCP SYN packet header generate reply with constant delay plus random offset, reply is either nothing, TCP RST, TCP SYN/ACK, or ICMP dest unreachable (source is router) advance time by 1 / scan rate</p>
    <p>} Generator Parameters: start, end, scan rate, scanned IP address range, scanners source IP address, probability for each reply type, source/destination port</p>
  </div>
  <div class="page">
    <p>Example 3: Constant Rate SYN flooding</p>
    <p>Generator Model and Parameters: Generate TCP SYN packet at flooding rate, generate reply with certain probability and constant delay plus random offset start, end, flooding rate, reply probability, victim IP address</p>
    <p>Deleter Model (accounts for loss of replies) and Parameters: Delete each flow with certain probability if source is victim start, end, IP address of victim, probability for a loss</p>
  </div>
  <div class="page">
    <p>Plots: Injection of TCP SYN Scan</p>
    <p>Injection in flow trace captured from border router of Swiss educational backbone network (SWITCH AS 559) Scanning source internal, scanned destinations external Impact on common detection metrics (outgoing traffic):</p>
    <p>Left: number of flows, right: destination IP address entropy</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Contributions Flexible tool for anomaly injection (scripted model plugins) Extensibility: components can be easily added Three example anomalies (ingress shift, ddos, network scan)</p>
    <p>Future work Concentrate on model development Evaluate the model accuracy with flow traces</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>FLAME is available from brauckhoff@tik.ee.ethz.ch</p>
  </div>
</Presentation>
