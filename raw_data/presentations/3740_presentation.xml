<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Hot Patch Generation for Android Kernels</p>
    <p>Zhengzi Xu, Yulong Zhang, Longri Zheng, Liangzhao Xia, Chenfu Bao, Zhi Wang, Yang Liu</p>
  </div>
  <div class="page">
    <p>Motivation:</p>
    <p>Android Major</p>
    <p>Version Release Date Percentage</p>
    <p>Android 4.x Oct-11 6.65%</p>
    <p>Android 5.x Nov-14 18.11%</p>
    <p>Android 6.x Oct-15 19.96%</p>
    <p>Android 7.x Aug-16 25.47%</p>
    <p>Android 8.x Aug-17 29.60%</p>
    <p>Android 9.x Aug-18 0.04%</p>
    <p>Others - 0.17%</p>
    <p>Android Version Distribution (OCT 2018)</p>
    <p>Android system has low upgrade rate (legacy systems). Known vulnerabilities remain unfixed. It is time consuming to develop patches manually.</p>
    <p>Hot patch is an ideal solution for legacy systems.</p>
    <p>Android Updates (500 million, OCT 2018)</p>
  </div>
  <div class="page">
    <p>Given a vulnerable function F and its official patch P at location L, we would like to find a suitable location L0 of F in binary form to insert an automatically generated hot patch P0, which has the same semantics as P.</p>
    <p>Why use filter rather than direct patch?  In binary, it is easier to locate function</p>
    <p>beginning than other places.  In different legacy systems, function beginning</p>
    <p>remains the same.</p>
    <p>Goal: Input Fiter Generation</p>
    <p>To ensure that the filter is safe, we limit the filter to only read the memory content without write operation.</p>
  </div>
  <div class="page">
    <p>Vulnerability Patch Survey:</p>
    <p>Patch Type NO. Percent Sanity Testing 157 42.10% Function Calling 65 17.40% Change of Variable Values 37 9.90% Change of Data Types 9 2.40% Redesign 65 17.40%</p>
    <p>Others 40 10.70%</p>
    <p>Patch type classification on 375 CVEs of Android Kernel between year 2012 -2016.</p>
    <p>Insight: The vulnerability type and the patch type are different.</p>
  </div>
  <div class="page">
    <p>To find what must be TRUE in order for a post assertion to be TRUE.</p>
    <p>Approach: Weakest Precondition Reasoning</p>
    <p>Predicate Transformers: Transform a post-condition into a weakest pre-condition</p>
    <p>Assertion</p>
    <p>x = y b = a b &lt; 0 True?</p>
    <p>Pre-condition {a &lt; 0} A(int a){ x = y; b = a; if(b &lt; 0) #add patch; }</p>
    <p>Func fooinput filter</p>
    <p>sanity check</p>
    <p>Note: a &gt; 0, weaker a &gt; 1, stronger</p>
  </div>
  <div class="page">
    <p>Importing the inlined function  Function summarization</p>
    <p>Variable value propagation  Skip nested function calls</p>
    <p>Kernel has function calls, which are too deep to be analyzed</p>
    <p>Function hookings</p>
    <p>Approach: Function Calls Handling</p>
  </div>
  <div class="page">
    <p>Loop can be classified to different types:  Loop which includes the patch.</p>
    <p>re-build the loop logic in the filter  Loop which updates the target varibales.</p>
    <p>loop summarizaion  Irrelevant loop. (safe, skip)  Complexed loop. (unsafe, skip)</p>
    <p>nested loops  loops with function calls</p>
    <p>Approach: Loops Handling</p>
    <p>In program analysis, loops and function calls are the two problems that need to be addressed.</p>
  </div>
  <div class="page">
    <p>Approach: Insertion Point Optimization</p>
    <p>Func A</p>
    <p>Func B Call</p>
    <p>Possible Insertion Points</p>
    <p>Func A</p>
    <p>Begin: Input ... Loop Call Func X ... Call Func B ... Patch</p>
  </div>
  <div class="page">
    <p>Accuracy:  Manually verified: 55 (out of 59) correct</p>
    <p>generated patches.  Performance:</p>
    <p>Less than 0.1% in overhead.  Robustness:</p>
    <p>21 cases tested. All of them pass the testing.</p>
    <p>Other:  54 (out of 55) generated patches have</p>
    <p>similar logic with human written patches.</p>
    <p>Evaluation:</p>
  </div>
  <div class="page">
    <p>Source Code Level Adaptive Patch Generation.  More flexiable and easiler to be</p>
    <p>implemented  Enable the Write Operation in Binary.</p>
    <p>Support more type of patch generation  Patch Semantic Summarization.</p>
    <p>There lacks researches on patch semantics</p>
    <p>Large and Complexed Patches.</p>
    <p>Future Improvements:</p>
  </div>
  <div class="page">
    <p>Thank you for listening.</p>
    <p>Q&amp;A</p>
  </div>
</Presentation>
