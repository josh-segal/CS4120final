<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ad Hoc Synchroniza/on Considered Harmful</p>
    <p>Weiwei Xiong, Soyoen Park, Jiaqi Zhang, Yuanyuan Zhou and Zhiqiang Ma</p>
    <p>UC San Diego University of Illinois Intel</p>
  </div>
  <div class="page">
    <p>Synchroniza/on is Important</p>
    <p>Concurrent programs are pervasive  Synchroniza/on in programs</p>
    <p>Ensure correctness of execu/on  Mutual exclusion  Condi/onal wait</p>
  </div>
  <div class="page">
    <p>Common Synchroniza/on Primi/ves</p>
    <p>pthread lock</p>
    <p>customized lock</p>
    <p>pthread_mutex_lock(&amp;thread_count);</p>
    <p>pthread_mutex_unlock(&amp;thread_count);</p>
    <p>handler handle_slave_sql() { threads.append(thd); }</p>
    <p>apr_thread_mutex_lock(reslist-&gt;lock);</p>
    <p>apr_thread_mutex_unlock(reslist-&gt;lock);</p>
    <p>/* MySQL */</p>
    <p>apr_status_t apr_reslist_acquire() { res = pop_resource(reslist); }</p>
    <p>/* Apache */</p>
    <p>where is the sync?</p>
  </div>
  <div class="page">
    <p>Common Synchroniza/on Primi/ves</p>
    <p>pthread lock</p>
    <p>customized lock</p>
    <p>pthread_mutex_lock(&amp;thread_count);</p>
    <p>pthread_mutex_unlock(&amp;thread_count);</p>
    <p>handler handle_slave_sql() { threads.append(thd); }</p>
    <p>apr_thread_mutex_lock(reslist-&gt;lock);</p>
    <p>apr_thread_mutex_unlock(reslist-&gt;lock);</p>
    <p>/* MySQL */</p>
    <p>apr_status_t apr_reslist_acquire() { res = pop_resource(reslist); }</p>
    <p>/* Apache */</p>
    <p>where is the sync?</p>
  </div>
  <div class="page">
    <p>Hard-to-recognize Synchroniza/on</p>
    <p>for (deleted=0; ;) {  if (dbmfp-&gt;ref == 1) { if (F_ISSET(dbmfp, OPEN_CALLED)) TAILQ_REMOVE(&amp;dbmp-&gt;dbmfq, ...); deleted = 1; }  if (deleted) break; __os_sleep(dbenv, 1, 0); } /* OpenLDAP */</p>
    <p>Sync variable Ad hoc</p>
    <p>sync</p>
    <p>Is it doing sync?</p>
  </div>
  <div class="page">
    <p>Hard-to-recognize Synchroniza/on</p>
    <p>for (deleted=0; ;) {  if (dbmfp-&gt;ref == 1) { if (F_ISSET(dbmfp, OPEN_CALLED)) TAILQ_REMOVE(&amp;dbmp-&gt;dbmfq, ...); deleted = 1; }  if (deleted) break; __os_sleep(dbenv, 1, 0); } /* OpenLDAP */</p>
    <p>Sync variable Ad hoc</p>
    <p>sync</p>
    <p>Is it doing sync?</p>
  </div>
  <div class="page">
    <p>Hard-to-recognize Synchroniza/on</p>
    <p>loop: goto background_loop; ... os_thread_exit(NULL) goto loop;</p>
    <p>... background_loop: /* background opera/ons */  goto loop; else goto background_loop;</p>
    <p>/* MySQL */</p>
    <p>if(shutdown_state &gt; 0)</p>
    <p>if(shutdown_state == EXIT) if(new_ac/vity_counter &gt; 0)</p>
    <p>Sync?</p>
  </div>
  <div class="page">
    <p>Hard-to-recognize Synchroniza/on</p>
    <p>loop: goto background_loop; ... os_thread_exit(NULL) goto loop;</p>
    <p>... background_loop: /* background opera/ons */  goto loop; else goto background_loop;</p>
    <p>/* MySQL */</p>
    <p>if(shutdown_state &gt; 0)</p>
    <p>if(shutdown_state == EXIT) if(new_ac/vity_counter &gt; 0)</p>
    <p>Sync?</p>
  </div>
  <div class="page">
    <p>What are the Consequences?</p>
    <p>Introducing bugs or performance issues  up to 67% of ad hoc syncs introduced bugs</p>
    <p>Making program analysis more difficult  hard-to-detect deadlocks  introducing false posi/ves to data race checker  confusions to sync performance profiling</p>
    <p>Problema/c interac/ons with compiler and memory consistency model</p>
  </div>
  <div class="page">
    <p>What are the Consequences?</p>
    <p>Introducing bugs or performance issues  up to 67% of ad hoc syncs introduced bugs</p>
    <p>Making program analysis more difficult  hard-to-detect deadlocks  introducing false posi/ves to data race checker  confusions to sync performance profiling</p>
    <p>Problema/c interac/ons with compiler and memory consistency model</p>
    <p>More examples later</p>
  </div>
  <div class="page">
    <p>Our Contribu/on</p>
    <p>Quan/ta/ve evidence to show ad hoc syncs are harmful</p>
    <p>SyncFinder: a tool that automa/cally iden/fies and annotates ad hoc syncs  helps to detect new deadlocks and bad prac/ces  helps to reduce false posi/ve of race detectors</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>SyncFinder: Auto-Annota/on 3</p>
    <p>Ad Hoc Sync Study 3 2</p>
    <p>Mo/va/on 1</p>
    <p>Conclusions 5</p>
  </div>
  <div class="page">
    <p>Data Set and Methodology</p>
    <p>Different types of concurrent programs  servers  desktop apps  scien/fic programs</p>
    <p>Manually examine every program  Two persons each spent 3 months</p>
    <p>Apps. Descrip3on</p>
    <p>Se rv er Apache Web server</p>
    <p>MySQL Database server</p>
    <p>OpenLDAP LDAP server</p>
    <p>Cherokee Web server</p>
    <p>D es kt op</p>
    <p>Mozilla JS JS engine</p>
    <p>PBZip2 Parallel bzip2</p>
    <p>Transmission BitTorrent client</p>
    <p>Sc ie n/</p>
    <p>fic Radiosity SPLASH-2</p>
    <p>Barnes SPLASH-2</p>
    <p>Water SPLASH-2</p>
    <p>OCean SPLASH-2</p>
    <p>FFT SPLASH-2</p>
  </div>
  <div class="page">
    <p>Every Studied Program Has Ad Hoc Syncs</p>
    <p>Apps. Descrip3on Ad hoc sync loops</p>
    <p>Se rv er Apache Web server 33</p>
    <p>MySQL Database server 83</p>
    <p>OpenLDAP LDAP server 15</p>
    <p>Cherokee Web server 6</p>
    <p>D es kt op</p>
    <p>Mozilla JS JS engine 17</p>
    <p>PBZip2 Parallel bzip2 7</p>
    <p>Transmission BitTorrent client 13</p>
    <p>Sc ie n/</p>
    <p>fic Radiosity SPLASH-2 12</p>
    <p>Barnes SPLASH-2 7</p>
    <p>Water SPLASH-2 9</p>
    <p>Ocean SPLASH-2 20</p>
    <p>FFT SPLASH-2 7</p>
  </div>
  <div class="page">
    <p>Ad Hoc Syncs are Error-prone</p>
    <p>Percentage of buggy ad hoc syncs</p>
    <p>Apps. # ad hoc sync # buggy sync</p>
    <p>Apache 33 7 (22%)</p>
    <p>OpenLDAP 15 10 (67%)</p>
    <p>Cherokee 6 3 (50%)</p>
    <p>Mozilla JS 17 5 (30%)</p>
    <p>Transmission 13 8 (62%)</p>
  </div>
  <div class="page">
    <p>Thread 1 S1 JS_ACQUIRE_LOCK(rt-&gt;setSlotLock);  S2 while( rt-&gt;gcLevel &gt; 0 ) {...} S3 JS_RELEASE_LOCK(rt-&gt;setSlotLock);</p>
    <p>Thread 3 S1 rt-&gt;requestCount++; ... S2 JS_ACQUIRE_LOCK(rt-&gt;setSlotLock);  S3 rt-&gt;requestCount--;</p>
    <p>Thread 2 S1 rt-&gt;gcLevel = 1; ... S2 while(rt-&gt;requestCount &gt; 0) {...} ... S3 rt-&gt;gcLevel = 0;</p>
    <p>Hard-to-detect Deadlock</p>
  </div>
  <div class="page">
    <p>Hard-to-detect Deadlock</p>
    <p>Thread 1 S1 JS_ACQUIRE_LOCK(rt-&gt;setSlotLock);  S2 while( rt-&gt;gcLevel &gt; 0 ) {...} S3 JS_RELEASE_LOCK(rt-&gt;setSlotLock);</p>
    <p>Thread 3 S1 rt-&gt;requestCount++; ... S2 JS_ACQUIRE_LOCK(rt-&gt;setSlotLock);  S3 rt-&gt;requestCount--;</p>
    <p>Thread 2 S1 rt-&gt;gcLevel = 1; ... S2 while(rt-&gt;requestCount &gt; 0) {...} ... S3 rt-&gt;gcLevel = 0;</p>
    <p>holding: rt-&gt;setSlotLock wai3ng: rt-&gt;setSlotLock wai3ng: rt-&gt;gcLevel</p>
    <p>wai3ng: rt-&gt;requestCount</p>
  </div>
  <div class="page">
    <p>Performance Issues</p>
    <p>A performance issue from MySQL</p>
    <p>/* get tuple id of a table */ do { ret = m_skip_auto_increment ? readAutoIncrementValue(): getAutoIncrementValue(); } while (ret == -1 &amp;&amp; --retries &amp;&amp; )</p>
    <p>for(;;) { if (m_skip_auto_increment &amp;&amp; readAutoIncrementValue() || getAutoIncrementValue()) { if (--retries &amp;&amp; ) { my_sleep(retry_sleep); con/nue; } } break; }</p>
  </div>
  <div class="page">
    <p>Impact to Bug Detec/on Tools</p>
    <p>Confusing race detectors  Benign data race on sync variable</p>
    <p>Thread 1 #define LAST_PHASE 1 loop: goto Loop;</p>
    <p>Thread 2 #define EXIT_THREADS 3</p>
    <p>/* MySQL */</p>
    <p>Worker S1  S2 atomic_inc( &amp;(q_info-&gt;idlers) );</p>
    <p>Listener S3 while( q_info-&gt;idlers == 0) {} S4</p>
    <p>/* Apache */</p>
    <p>if(state &lt; LAST_PHASE) state = EXIT_THREADS;</p>
    <p>q_info-&gt;pools = new_recycle;</p>
    <p>first_pool = q_info-&gt;pools;</p>
    <p>False data race on ordered variable accesses</p>
  </div>
  <div class="page">
    <p>Ad Hoc Syncs are Diverse</p>
    <p>#condi3ons</p>
    <p>sync variables</p>
    <p>code style loop: if(state &lt; LAST_PHASE ) goto loop;</p>
    <p>while (crc_table_empty);</p>
    <p>for(; i &lt; 1000 &amp;&amp; ! finished; i ++) { if(global-&gt;pbar_count &gt;= 8)</p>
    <p>finished = 1; }</p>
    <p>while (QueryStatus(..,&amp;status) { if(status == PENDING) sleep(10000); else break; }</p>
    <p>single cond (sc) mul3ple cond (mc)</p>
    <p>dir</p>
    <p>func</p>
    <p>control(cf)</p>
    <p>while(1) { int oldcount = (global-&gt;barrier).count; ... if(updatedcount == oldcount) break; } data(df)</p>
  </div>
  <div class="page">
    <p>Ad Hoc Syncs are Diverse</p>
    <p>Apps. Total ad hoc</p>
    <p>Single exit cond. Mul3ple exit cond. Total func</p>
    <p>async</p>
    <p>sc- dir</p>
    <p>sc- df</p>
    <p>sc- cf</p>
    <p>sc- func</p>
    <p>total mc- all</p>
    <p>mc- Nall</p>
    <p>total</p>
    <p>Apache 33 4 0 1 3 8 22 3 25 16 25</p>
    <p>MySQL 83 23 5 4 11 43 13 27 40 32 64</p>
    <p>OpenLDAP 15 2 0 0 2 4 4 7 11 9 15</p>
    <p>Cherokee 6 0 2 0 1 3 0 3 3 1 5</p>
    <p>Mozilla JS 17 2 4 1 4 10 4 1 5 5 15</p>
    <p>PBZip2 7 0 0 0 1 1 0 6 6 7 7</p>
    <p>Transmission 13 6 0 0 1 7 0 6 6 3 2</p>
    <p>Radiosity 12 5 5 1 0 11 1 0 1 0 1</p>
    <p>Barnes 7 6 1 0 0 1 0 0 0 0 0</p>
    <p>Water 9 9 0 0 0 9 0 0 0 0 0</p>
    <p>OCean 20 20 0 0 0 20 0 0 0 0 0</p>
    <p>FFT 7 7 0 0 0 7 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>SyncFinder: Auto-Annota/on 3</p>
    <p>Ad Hoc Sync Study 3 2</p>
    <p>Mo/va/on 1</p>
    <p>Conclusions 5</p>
  </div>
  <div class="page">
    <p>Ad Hoc Synchroniza/on</p>
    <p>for(i; i &lt; 1000 &amp;&amp; ! finished; i ++) { if(global-&gt;pbar_count &gt;= 8)</p>
    <p>finished = 1; }</p>
    <p>Sync loop: The loop body  Exit condi/on</p>
    <p>{! finished, i &lt; 1000}  Exit condi/on variable</p>
    <p>{ finished, i}  Sync variable global-&gt;pbar_count</p>
    <p>Wai3ng side  Sync write: The write instruc/ons that will release the ad hoc sync loop</p>
    <p>global-&gt;pbar_count ++;</p>
    <p>Segng side</p>
    <p>global-&gt;pbar_count ++;</p>
    <p>global-&gt;pbar_count = 0;</p>
  </div>
  <div class="page">
    <p>Ad Hoc Synchroniza/on</p>
    <p>for(i; i &lt; 1000 &amp;&amp; ! finished; i ++) { if(global-&gt;pbar_count &gt;= 8)</p>
    <p>finished = 1; }</p>
    <p>Sync loop: The loop body  Exit condi/on</p>
    <p>{! finished, i &lt; 1000}  Exit condi/on variable</p>
    <p>{ finished, i}  Sync variable global-&gt;pbar_count</p>
    <p>Wai3ng side  Sync write: The write instruc/ons that will release the ad hoc sync loop</p>
    <p>global-&gt;pbar_count ++;</p>
    <p>Segng side</p>
    <p>global-&gt;pbar_count ++;</p>
    <p>global-&gt;pbar_count = 0;</p>
    <p>if(global-&gt;pbar_count &gt;= 8)  global-&gt;pbar_count ++; &lt;- sync pair -&gt;</p>
  </div>
  <div class="page">
    <p>Flowchart of SyncFinder</p>
    <p>Source code</p>
    <p>Loop detec3on</p>
    <p>Exit condi3on extrac3on (break, ret, exit, etc.)</p>
    <p>Exit dependent variable(EDV) detec3on</p>
    <p>Pruning</p>
    <p>Repor3ng and annota3on</p>
    <p>int finished = 0; for(i = 0; i &lt; 1000 &amp;&amp; !finished; i ++) { if(global-&gt;pbar_count &gt;= 8)</p>
    <p>finished = 1; }</p>
    <p>{ finished, i, 1000}</p>
    <p>{ global-&gt;pbar_count }</p>
    <p>{ 1, i, 1000, global-&gt;pbar_count, 8}</p>
    <p>sync loop ( taskman.c:1294 )</p>
  </div>
  <div class="page">
    <p>Sync Loop Pruning</p>
    <p>Our observa/on  Sync condi/ons must depend on remote threads</p>
    <p>i.e., communica/ng using shared variables  Sync variables should be loop invariants</p>
    <p>for (i = 0; i &lt; nlights; i++) {}</p>
    <p>Normal Computa3on</p>
    <p>while (global-&gt;gsense == lsense);</p>
    <p>Ad Hoc Sync Loop</p>
  </div>
  <div class="page">
    <p>Sync Pair Iden/fica/on</p>
    <p>Sync informa3on collec3on</p>
    <p>False sync pair pruning global-&gt;pbar_count &lt;-&gt; global-&gt;pbar_count ++ global-&gt;pbar_count &lt;-&gt; global-&gt;pbar_count = 0</p>
    <p>Ad hoc sync loops</p>
    <p>Read global-&gt;pbar_count</p>
    <p>int finished = 0; for(i = 0; i &lt; 1000 &amp;&amp; !finished; i ++) { if(global-&gt;pbar_count &gt;= 8)</p>
    <p>finished = 1; }</p>
    <p>Write global-&gt;pbar_count = 0 global-&gt;pbar_count ++</p>
  </div>
  <div class="page">
    <p>Sync Pair Iden/fica/on</p>
    <p>Sync informa3on collec3on</p>
    <p>False sync pair pruning</p>
    <p>R,taskman.c:1294 &lt;-&gt; W,taskman.c:1233</p>
    <p>global-&gt;pbar_count &lt;-&gt; global-&gt;pbar_count ++ global-&gt;pbar_count &lt;-&gt; global-&gt;pbar_count = 0</p>
    <p>Ad hoc sync loops</p>
    <p>Read global-&gt;pbar_count</p>
    <p>int finished = 0; for(i = 0; i &lt; 1000 &amp;&amp; !finished; i ++) { if(global-&gt;pbar_count &gt;= 8)</p>
    <p>finished = 1; }</p>
    <p>Write global-&gt;pbar_count = 0 global-&gt;pbar_count ++</p>
  </div>
  <div class="page">
    <p>Report and Annota/on</p>
    <p>SyncFinder report  Line numbers of sync reads and writes  Sync loop context: entry/exit points</p>
    <p>Automa/c annota/ons  SF_Loop_Begin/End(&amp;loopID)  SF_Sync_Read_Begin/End(&amp;loopID, &amp;sync_var)  SF_Sync_Write_Begin/End(&amp;loopID, &amp;sync_var)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>SyncFinder: Auto-Annota/on 3</p>
    <p>Ad Hoc Sync Study 3 2</p>
    <p>Mo/va/on 1</p>
    <p>Conclusions 5</p>
  </div>
  <div class="page">
    <p>SyncFinders Overall Result</p>
    <p>Apps. Total loops True ad hoc</p>
    <p>syncs Missed ad hoc syncs</p>
    <p>False posi3ves</p>
    <p>Apache 1462 15 1 2</p>
    <p>MySQL 4265 42 3 6</p>
    <p>OpenLDAP 2044 14 1 4</p>
    <p>Cherokee 748 6 0 0</p>
    <p>Mozilla JS 848 11 1 5</p>
    <p>PBZip2 45 7 0 0</p>
    <p>Transmission 1114 12 1 2</p>
    <p>Radiosity 80 12 0 0</p>
    <p>Barnes 88 7 0 0</p>
    <p>Water 84 9 0 0</p>
    <p>Ocean 339 20 0 0</p>
    <p>FFT 57 7 0 0</p>
  </div>
  <div class="page">
    <p>SyncFinders Overall Result</p>
    <p>Apps. Total loops True ad hoc</p>
    <p>syncs Missed ad hoc syncs</p>
    <p>False posi3ves</p>
    <p>Apache 1462 15 1 2</p>
    <p>MySQL 4265 42 3 6</p>
    <p>OpenLDAP 2044 14 1 4</p>
    <p>Cherokee 748 6 0 0</p>
    <p>Mozilla JS 848 11 1 5</p>
    <p>PBZip2 45 7 0 0</p>
    <p>Transmission 1114 12 1 2</p>
    <p>Radiosity 80 12 0 0</p>
    <p>Barnes 88 7 0 0</p>
    <p>Water 84 9 0 0</p>
    <p>Ocean 339 20 0 0</p>
    <p>FFT 57 7 0 0</p>
    <p>average 6%</p>
    <p>average 96%</p>
  </div>
  <div class="page">
    <p>Result on Addi/onal Programs Apps.</p>
    <p>Total loops</p>
    <p>True ad hoc syncs</p>
    <p>False posi3ves</p>
    <p>AOLServer 496 6 0</p>
    <p>Nginx 705 11 1</p>
    <p>BerkeleyDB 1006 11 4</p>
    <p>BIND9 1372 4 1</p>
    <p>HandBrake 551 13 0</p>
    <p>p7zip 1594 9 1</p>
    <p>wxDFast 154 6 0</p>
    <p>Cholesky 362 8 0</p>
    <p>RayTracer 144 3 0</p>
    <p>FMM 108 8 0</p>
    <p>Volrend 77 9 0</p>
    <p>LU 38 0 0</p>
    <p>Radix 52 14 0 10/13/10 33</p>
  </div>
  <div class="page">
    <p>Use cases: Bug Detec/on</p>
    <p>A tool to detect bad prac/ces</p>
    <p>Apps. Original Valgrind</p>
    <p>Extended Valgrind</p>
    <p>% Pruned</p>
    <p>Apache 30 17 43%</p>
    <p>MySQL 25 10 60%</p>
    <p>OpenLDAP 7 4 43%</p>
    <p>Water 79 11 86%</p>
    <p>Extended race detector in Valgrind</p>
    <p>Apps. Deadlock (New) Bad prac3ce</p>
    <p>Apache 1(0) 1</p>
    <p>MySQL 2(2) 13</p>
    <p>Mozilla 2(0) 2</p>
    <p>LOCK while(); UNLOCK</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Spin and hang detec/on  [LiTPDS2006], [NakkaEDCC2005],</p>
    <p>Concurrency bug detec/on  [EnglerSOSP2003], [JulaOSDI2008], [MusuvathiOSDI2008], [BronPPoPP2005], [ParkASPLOS2009],</p>
    <p>So}ware bug characteris/cs study  [ChouSOSP2001], [LuASPLOS2008], [SullivanFTCS1992], [OstrandTSE2005]</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A quan/ta/ve study of ad hoc syncs  229 ad hoc sync from 12 concurrent programs.  22-67% of ad hoc loops introduced bugs or performance issues.</p>
    <p>Impact the accuracy and effec/veness of bug detec/on and performance profiling.</p>
    <p>SyncFinder: a tool that automa/cally and effec/vely annotates ad hoc syncs  helps to detect new deadlocks  helps to improve the accuracy of race detector</p>
  </div>
  <div class="page">
    <p>Limita/ons</p>
    <p>For characteris/c study, we can study more applica/ons</p>
    <p>SyncFinder requires source code  SyncFinder misses 1-3 ad hoc syncs  False posi/ves from SyncFinder requires manual valida/on</p>
  </div>
  <div class="page">
    <p>Acknowledgement</p>
    <p>Prof. George Candea (shepherd)  Anonymous reviewers  Bob Kuhn, Ma~hew Frank and Paul Petersen  NSF and Intel research grants</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
    <p>h~p://opera.ucsd.edu</p>
  </div>
</Presentation>
