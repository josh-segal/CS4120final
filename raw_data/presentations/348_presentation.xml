<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reasoning about B+ Trees with Operational Semantics and Separation Logic</p>
    <p>Hayo Thielecke (joint work with Alan Sexton)</p>
    <p>University of Birmingham, UK</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>B+ tree</p>
    <p>I Balanced ordered search tree, O(log n) operations</p>
    <p>I Widely used for efficient search in databases</p>
    <p>Operational semantics: Abstract Machine</p>
    <p>I Formalizes operations on B+ trees, abstractly</p>
    <p>I In the style of SECD machine or Krivines machine</p>
    <p>Separation logic</p>
    <p>I Very expressive for inductive data structures with pointers</p>
    <p>I Here: ordinary predicate logic extended with  and 7 I No Hoare logic {P} c {Q}</p>
  </div>
  <div class="page">
    <p>B+ tree visually</p>
    <p>I (d1 . . . dn1 ; q1 . . . qn)L (e1 . . . en ; f )</p>
  </div>
  <div class="page">
    <p>Operational semantics: abstract machine</p>
    <p>Landins SECD machine (1964)</p>
    <p>Configurations: Stack, Environment, Control, Dump s , e , c , d</p>
    <p>s , e , c , d</p>
    <p>Transitions by pattern matching (e.g., stack or control empty).</p>
    <p>Our machine: insertion transitions C , r ,  ,</p>
    <p>. . .</p>
    <p>C: command, e.g., Insert (e), S, D (k, q)</p>
    <p>r : root of current subtree</p>
    <p>: stack, used for tree traversal</p>
    <p>: store, holds nodes of the tree,  heap in Sep Logic</p>
  </div>
  <div class="page">
    <p>Separation logic connectives</p>
    <p>|= p 7 N iff  = {p 7 N} for a node N (leaf or internal)</p>
    <p>|= Q0  Q1 iff  = 0  1 where 0  1 =</p>
    <p>and 0 |= Q0 and 1 |= Q1</p>
    <p>|= Q0  Q1 iff  |= Q0 and  |= Q1</p>
    <p>|= Q0  Q1 iff  |= Q0 or  |= Q1</p>
    <p>|= true iff  is any store</p>
    <p>|= emp iff dom() =</p>
    <p>Local reasoning: footprint and frame:</p>
    <p>{P} c {Q} {P  R} c {Q  R}</p>
  </div>
  <div class="page">
    <p>B+ trees in Separation Logic</p>
    <p>Predicate describes data structure  |= Btreeh(r , S, a, z, n)</p>
    <p>I height h</p>
    <p>I r points to root node of tree</p>
    <p>I set of entries S</p>
    <p>I first leaf at address a, last leaf node points to z</p>
    <p>I size of root is at least n</p>
    <p>Induction on height: Leaf case</p>
    <p>Btree1(r , S, a, z, n)  e1, . . . , en. n 6 MaxN  r 7 L (e1 . . . en ; z)  S = {e1, . . . , en}  a = r  e1 @    @ en</p>
  </div>
  <div class="page">
    <p>B+ tree continued: internal nodes</p>
    <p>Btreeh+1(r , S, a, z, n)  d1, . . . , dn1, q1 . . . qn, m1, . . . , mn.  (r 7 I (d1 . . . dn1 ; q1 . . . qn)</p>
    <p>Btreeh(q1, S1, a1, a2, m1)  Btreeh(q2, S2, a2, a3, m2)     Btreeh(qn, Sn, an, an+1, mn))</p>
    <p>a1 = a  an+1 = z  S = S1     Sn  (j. 1 &lt; j &lt; n  1  dj v Sj @ dj+1)  (j. 1 &lt; j 6 n  dMaxN/2e 6 mj )  (S1 @ d1)  (dn1 v Sn)</p>
  </div>
  <div class="page">
    <p>B+ tree insertion</p>
    <p>I Invariant: balanced</p>
    <p>I Insertion may split a node.</p>
    <p>I Parent node may then split as well.</p>
    <p>I Splitting ripples up the tree recursively.</p>
    <p>I Insertion produces either a subtree or two subtrees.</p>
    <p>I In the operational semantics: single or double commands S , r ,  ,</p>
    <p>D (k, q) , r ,  ,</p>
  </div>
  <div class="page">
    <p>Insert Rules  Descending the tree and splitting leaf</p>
    <p>Insert (a) , r ,  ,</p>
    <p>Insert (a) , pi , (r , i) ::  ,</p>
    <p>if (r ) = I (d ; p)</p>
    <p>where i = first (d, x. x &gt; key (a))</p>
    <p>Insert (a) , r ,  ,</p>
    <p>D (k, q) , r ,  ,</p>
    <p>[ r 7 L (e ; q) , q 7 L (e ; f )</p>
    <p>]  where (r ) = L (e ; f )</p>
    <p>and i = first (e, x. key (x) &gt; key (a))</p>
    <p>and e, k, e = splitL (i, a, e) and q 6 dom()</p>
  </div>
  <div class="page">
    <p>Insert Rules  Returning up the tree with S or D (k, q)</p>
    <p>S , r , (t, i) ::  ,</p>
    <p>S , t ,  ,</p>
    <p>D (k, q) , r , (t, i) ::  ,</p>
    <p>S , t ,  , [t 7 I (d ; p)]</p>
    <p>if |p| &lt; MaxN where (t) = I (d ; p)</p>
    <p>and d = ins (k, i, d)</p>
    <p>and p = ins (q, i + 1, p) D (k, q) , r , (t, i) ::  ,</p>
    <p>D (k, q) , t ,  ,</p>
    <p>[ t 7 I (d ; p) ,</p>
    <p>q 7 I (d ; p)</p>
    <p>]  where (t) = I (d ; p)</p>
    <p>and d, p, k, d, p = splitI (i, k, q, d, p) and q 6 dom()</p>
  </div>
  <div class="page">
    <p>Correctness of insertion Idea: footprint  frame for the same stack .</p>
    <p>Lemma Assume  |= Btreeh(r , S, a, z, n)  R. Then either:</p>
    <p>S , r ,  ,</p>
    <p>and</p>
    <p>|= Btreeh(r , S + e, a, z, n)  R</p>
    <p>D (k, q) , r ,  ,</p>
    <p>and</p>
    <p>|= Btreeh(r , Sr , a, b, n)  Btreeh(q, Sq, b, z, n)  R</p>
    <p>Moreover, Sr  Sq = S + e and Sr @ k v Sq.</p>
  </div>
  <div class="page">
    <p>Proving Correctness of Insertion</p>
    <p>B  R</p>
  </div>
  <div class="page">
    <p>Proving Correctness of Insertion</p>
    <p>r 7 I (d ; p)  B1      Bi1 Bi  Bi+1      Bn  R</p>
  </div>
  <div class="page">
    <p>Proving Correctness of Insertion</p>
    <p>r 7 I (d ; p)  B1      Bi1 Bi  Bi+1      Bn  R</p>
  </div>
  <div class="page">
    <p>Proving Correctness of Insertion</p>
    <p>Bi  R</p>
  </div>
  <div class="page">
    <p>Proving Correctness of Insertion</p>
    <p>Bi  B  i  R</p>
  </div>
  <div class="page">
    <p>Proving Correctness of Insertion</p>
    <p>r 7 I (d ; p)  B1      Bi1 Bi  B</p>
    <p>i</p>
    <p>Bi+1      Bn  R</p>
  </div>
  <div class="page">
    <p>Finding a list of entries for a range query</p>
    <p>I Find the list of entries with key &gt; k.</p>
    <p>I Need to find the first such element at the leaf level</p>
    <p>I Use fringe links of the leaf nodes</p>
    <p>I Machine descends the tree (no need to keep a stack).</p>
    <p>Find (k) , r ,</p>
    <p>Find (k) , pi ,</p>
    <p>if (r ) = I (d ; p)</p>
    <p>where i = first (d, x. x &gt; k) Find (k) , r ,</p>
    <p>Ret(r , i),</p>
    <p>where (r ) = L (e ; f )</p>
    <p>and i = first (e, x. key (x) &gt; k)</p>
  </div>
  <div class="page">
    <p>Correctness of find</p>
    <p>I Start from a B+ tree with its implicit fringe list</p>
    <p>I Result of find is covered by a list predicate</p>
    <p>I Rest of the tree is swept into the catch-all predicate true.</p>
    <p>I Gerrymander the existing store to reveal the result list.</p>
    <p>Theorem If  |= h, a.Btreeh(r , S, a, null, n), then</p>
    <p>Find (k) , r ,      Ret(q, i),</p>
    <p>for some q and i with</p>
    <p>|= FList(q, i, S  k)   list of results</p>
    <p>true   everything else</p>
  </div>
  <div class="page">
    <p>Correctness of find Appending the fringe list onto an accumulator.</p>
    <p>a a</p>
    <p>Lemma Suppose</p>
    <p>|= Btreeh(r , Sr , a, z, n)  FList(z, 1, Sz )</p>
    <p>Then  |= FList(a, 1, Sr  Sz )  true.</p>
  </div>
  <div class="page">
    <p>Correctness of find: induction A technical lemma combines:</p>
    <p>I current subtree</p>
    <p>I partial result list</p>
    <p>I everything else, by way of true</p>
    <p>Lemma Let</p>
    <p>|= Btreeh(p, Sp, a, z, n)  FList(z, 1, Sz )  true</p>
    <p>Then we have a sequence of h transitions Find (k) , r ,</p>
    <p>Ret(q, i),</p>
    <p>for some q and i with  |= FList(q, i, (Sr  k)  Sz )  true.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Summary</p>
    <p>I Programming semantics technology to address B+ trees</p>
    <p>I Separation logic 7 and  for invariants and local reasoning I Abstract machines from functional programming</p>
    <p>I Translation to CAML prototype is straightforward</p>
    <p>Further work</p>
    <p>I Deletion will be covered in the full version of the paper</p>
    <p>I High-level primitives, like Gardners context logic for XML</p>
    <p>I Trees with holes, holey Brick and BV tree: a job for ? I Concurrent B trees</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Thank you for your attention.</p>
  </div>
</Presentation>
