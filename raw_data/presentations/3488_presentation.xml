<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rampart: Protecting Web Applications from CPU-Exhaustion</p>
    <p>Denial-of-Service Attacks Wei Meng, Chenxiong Qian, Shuang Hao*, Kevin Borgolte</p>
    <p>Giovanni Vigna, Christopher Kruegel, Wenke Lee</p>
    <p>Chinese University of Hong Kong Georgia Institute of Technology</p>
    <p>*University of Texas at Dallas University of California, Santa Barbara</p>
  </div>
  <div class="page">
    <p>Background &amp; Motivation</p>
    <p>Rampart</p>
    <p>Performance Evaluation</p>
    <p>Mitigation Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Denial-of-Service (DoS) Attacks  A class of attacks on availability</p>
    <p>Keeping users from using a certain computing service</p>
    <p>Two types of DoS attacks</p>
    <p>Program flaw</p>
    <p>Supplying an input that can crash the target application or system</p>
    <p>Resource exhaustion (focus of this work)</p>
    <p>Requesting a significant amount of computing resources, e.g., CPU, memory, disk, network connections</p>
  </div>
  <div class="page">
    <p>Distributed DoS (DDoS) Attacks  Attackers need to send traffic at a rate greater than the bottleneck</p>
    <p>processing capacity of the target system</p>
    <p>DoS attacks are usually launched by flooding the target system with excessive traffic to impair the targets availability</p>
    <p>DDoS attackers send the traffic from more than one single source</p>
    <p>E.g., crafting requests from thousands of bots using many IP addresses</p>
    <p>Higher bandwidth + more difficult to prevent</p>
    <p>Amplification techniques (e.g., DNS reflection) can be used in DDoS attacks to further increase the bandwidth of the attack traffic</p>
  </div>
  <div class="page">
    <p>Low-volume Sophisticated DoS Attacks</p>
    <p>Attackers need to send traffic at a rate greater than the bottleneck processing capacity of the target system</p>
    <p>What if I do not have control over thousands of machines?</p>
    <p>Low-volume sophisticated DoS attacks</p>
    <p>Less but much more intense (computationally expensive) attack traffic</p>
    <p>E.g., requesting the server to compute a hash for millions of times</p>
  </div>
  <div class="page">
    <p>CVE-2014-9034</p>
    <p>Description wp-includes/class-phpass.php in WordPress before 3.7.5, 3.8.x before 3.8.5, 3.9.x before 3.9.3, and 4.x before 4.0.1 allows remote attackers to cause a denial of service (CPU consumption) via a long password that is improperly handled during hashing, a similar issue to CVE-2014-9016.</p>
    <p>https://github.com/WordPress/WordPress/blob/3.7-branch/wp-includes/class-phpass.php</p>
    <p>string crypt ( string $str [, string $salt ] ) crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.</p>
    <p>Fix</p>
  </div>
  <div class="page">
    <p>Sophisticated DoS Attacks</p>
    <p>https://www.smithsonianmag.com/smart-news/25-years-us-special-forces-carried-miniaturenukes-their-backs-180949700/</p>
    <p>https://www.smithsonianmag.com/history/seventy-years-world-war-two-thousands-tonsunexploded-bombs-germany-180957680/</p>
    <p>Conventional DDoS Attacks</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Protecting the back end of web applications from</p>
    <p>Low-volume sophisticated CPU-exhaustion DoS attacks</p>
    <p>While limiting impact caused by false-positives</p>
  </div>
  <div class="page">
    <p>Background &amp; Motivation</p>
    <p>Rampart</p>
    <p>Performance Evaluation</p>
    <p>Mitigation Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Threat Model  The back-end of a web application is vulnerable against CPU</p>
    <p>exhaustion DoS attacks</p>
    <p>The goal of an attacker is to occupy all available CPU resources of the server</p>
    <p>The attacker sends attack payload through normal HTTP requests at a low rate</p>
    <p>The attack requests cannot be easily distinguished from legitimate requests through statistical features</p>
    <p>The attacker does not flood the server with numerous requests 10</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Web application CPU usage modeling through context-aware function-level program profiling</p>
    <p>Attack detection using statistical execution model</p>
    <p>Probabilistic request termination</p>
    <p>Exploratory attack request blocking</p>
    <p>Performance optimizations</p>
  </div>
  <div class="page">
    <p>Call Stack</p>
    <p>Web Application CPU Usage Modeling</p>
    <p>md5()</p>
    <p>main()</p>
    <p>foo()</p>
    <p>bar()</p>
    <p>md5()</p>
    <p>md5()</p>
    <p>main()</p>
    <p>foo()</p>
    <p>bar()</p>
    <p>bar()</p>
    <p>md5()</p>
    <p>ID: hash(PID, main) T_start: 1534000000</p>
    <p>ID: hash(PID, foo) T_start: 1534000000</p>
    <p>ID: hash(PID, bar) T_start: 1534000000</p>
    <p>ID: hash(PID, md5) T_start: 1534000000 T_end: 1534000001</p>
    <p>ID: hash(PID, md5) T_start: 1534001024 T_end: 1534001025</p>
    <p>T_end: 1534001025</p>
    <p>T_end: 1534001025</p>
    <p>T_end: 1534001026</p>
    <p>PID = hash(0, a.php)</p>
    <p>Function CPU time measurements</p>
    <p>a7f2943c</p>
    <p>Function Execution Records</p>
    <p>PID stands for the ID of the parent frame The measured time is CPU time not wall-clock time</p>
  </div>
  <div class="page">
    <p>CPU-Exhaustion DoS Attack Detection  How to detect CPU-exhaustion DoS?</p>
    <p>How to detect the requests causing the DoS?</p>
    <p>Setting a global timeout?</p>
    <p>Finding the ones consuming the most CPU time?</p>
    <p>Our approach - finding the ones of which the consumed CPU time is statistically different from their past records</p>
    <p>Chebyshevs inequality:</p>
    <p>Condition to label suspicious requests: 13</p>
    <p>P( | X   | &gt; k)  1 k2</p>
    <p>TC &gt; min(max( + k  , Tmin), Tmax)</p>
  </div>
  <div class="page">
    <p>CPU-Exhaustion DoS Attack Detection (Cont.)</p>
    <p>md5()</p>
    <p>main()</p>
    <p>foo()</p>
    <p>bar()</p>
    <p>md5()</p>
    <p>md5()</p>
    <p>main()</p>
    <p>foo()</p>
    <p>bar()</p>
    <p>bar()</p>
    <p>md5()</p>
    <p>Function CPU time measurements</p>
    <p>a7f2943c 1026 1055</p>
    <p>d5d071c9 100 110</p>
    <p>Function Execution Records</p>
    <p>md5()</p>
    <p>main()</p>
    <p>foo()</p>
    <p>bar()</p>
    <p>md5()1</p>
    <p>Rampart can detect the incident much earlier before bar() returns</p>
    <p>Suspicious request detected</p>
    <p>Rampart may not determine it as an attack if the CPU usage is low</p>
  </div>
  <div class="page">
    <p>Probabilisitic Request Termination  Shall we kill the instances serving the suspicious requests?</p>
    <p>Not a good idea - false positive requests may deviate not much from the norm</p>
    <p>Our approach - degrading the priority of those requests by</p>
    <p>Probabilistically terminating the suspicious requests</p>
    <p>A suspicious request would be temporarily suspended or aborted</p>
    <p>Depending on the current server load and the times it has been suspended</p>
  </div>
  <div class="page">
    <p>CPU-Exhaustion DoS Attack Blocking  Is the current design good enough?</p>
    <p>No, the attackers can still consume the CPU until an alarm</p>
    <p>We need to deploy filters to block follow-up attack requests</p>
    <p>Requested URI, the request parameters, and the network address</p>
    <p>Are we good to go?</p>
    <p>A persistent filter - What if it is a false positive filter?</p>
    <p>A temporary filter - What if the attacker just waits? 16</p>
  </div>
  <div class="page">
    <p>The Exploratory Algorithm  An algorithm to adaptively control the lifetime of a filter</p>
    <p>Block all matched requests in a primary lifespan</p>
    <p>Assume we were wrong, i.e., it was a false positive filter</p>
    <p>Explore the result if it was deactivated continuously until</p>
    <p>The secondary lifespan expires AND no attack is detected</p>
    <p>It was a false positive filter OR the attackers had stopped</p>
    <p>or, an attack is detected again before the expiry of the 2nd lifespan</p>
    <p>Reset the filter with a longer primary lifespan to penalize the attacker</p>
    <p>The algorithm controls the upper bound of the rate that one attacker can cause CPUexhaustion DoS</p>
  </div>
  <div class="page">
    <p>Performance Optimizations  Avoid unnecessary system calls</p>
    <p>Disable profiling for built-in functions</p>
    <p>Control the profiling granularity</p>
    <p>Profile up to Max_Prof_Depth function frames in the stack</p>
    <p>Improve write performance &amp; mitigate contention</p>
    <p>Batch processing measurements with dedicated daemon</p>
    <p>Limit the profiling rate</p>
    <p>Sampling 18</p>
  </div>
  <div class="page">
    <p>Implementation  An extension to the PHP Zend engine</p>
    <p>2K lines of C code</p>
    <p>Linux - getrusage() for measuring CPU time</p>
    <p>A separate batch processing daemon</p>
    <p>400 lines of Python code</p>
    <p>Why PHP?</p>
    <p>It is still the most popular server-side programming language 19</p>
  </div>
  <div class="page">
    <p>Background &amp; Motivation</p>
    <p>Rampart</p>
    <p>Performance Evaluation</p>
    <p>Mitigation Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>OWASP ZAP</p>
    <p>CVE-2014-9034CVE-2014-9034CVE-2014-9034CVE-2014-9034CVE-2014-9034CVE-2014-9034</p>
    <p>Traffic Generator</p>
    <p>Intel Xeon quad-core CPU 16GB RAM</p>
    <p>Trace</p>
  </div>
  <div class="page">
    <p>Performance Measurements</p>
    <p>Application Benchmark User Instances 8 16 32 64 96 128</p>
    <p>Drupal ARPT (ms) 277.5 361.8 398.1 502.4 607.3 717.5 CPU (%) 19.47 24.83 32.21 47.18 59.97 70.53</p>
    <p>Wordpress ARPT (ms) 20.8 21.7 22.5 38.9 85.6 144.7 CPU (%) 13.47 22.63 42.21 73.03 86.72 90.11</p>
    <p>Baseline server performance</p>
    <p>Application Benchmark Max_Prof_Depth 1 3 5 7 9 11</p>
    <p>Drupal</p>
    <p>ARPT (ms) 397.6 389.0 400.9 393.0 413.6 412.6 CPU (%) 34.53 34.80 35.62 36.32 38.52 40.94</p>
    <p># Unique Funcs 12 76 567 1,421 2,473 4,019 # Funcs 341 2,167 12,677 31,152 53,263 80,186</p>
    <p>Wordpress</p>
    <p>ARPT (ms) 23.7 23.7 23.5 24.6 29.1 36.4 CPU (%) 44.25 43.12 49.08 56.56 61.60 69.37</p>
    <p># Unique Funcs 17 199 846 3,186 7,909 13,337 # Funcs 422 4,479 15,314 42,957 89,080 136,910</p>
    <p>Rampart performance</p>
    <p>Drupal Overhead 3.41% CPU, 2.8 ms ARPT</p>
    <p>Wordpress Overhead 6.87% CPU, 1 ms ARPT</p>
  </div>
  <div class="page">
    <p>Performance Measurements (Cont.)</p>
    <p>In -F</p>
    <p>lig ht</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>s</p>
    <p>CPU Usage User Requests</p>
    <p>C PU</p>
    <p>U sa</p>
    <p>ge (%</p>
    <p>)</p>
    <p>U se</p>
    <p>r R</p>
    <p>PT (s</p>
    <p>)</p>
    <p>CPU usage and request processing time (RPT) over time for 32 users sending requests every 0.1 seconds to Drupal</p>
  </div>
  <div class="page">
    <p>Background &amp; Motivation</p>
    <p>Rampart</p>
    <p>Performance Evaluation</p>
    <p>Mitigation Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Performance Degradation Caused by Attacks</p>
    <p>Application Benchmark Attack</p>
    <p>No Attack PHPass [Attackers] XML-RPC [Attackers]</p>
    <p>Drupal ARPT (ms) 398.1 461.2 (1.16x) 519.6 (1.31x) 458.3 (1.15x) 541.7 (1.36x)</p>
    <p>CPU (%) 32.21 88.95 95.05 84.61 94.91</p>
    <p>Wordpress ARPT (ms) 22.5 37.0 (1.64x) 49.0 (2.18x) 31.5 (1.40x) 41.7 (1.86x)</p>
    <p>CPU (%) 42.21 89.71 94.14 83.86 92.08</p>
  </div>
  <div class="page">
    <p>Effectiveness of Rampart</p>
    <p>Application Benchmark</p>
    <p>CPU Threshold for Attack 50% 75%</p>
    <p>PHPass [Attackers] XML-RPC [Attackers] PHPass [Attackers] XML-RPC [Attackers] 8 16 8 16 8 16 8 16</p>
    <p>Drupal</p>
    <p>ARPT-U (ms) 394.7 427.1 423.4 460.4 400.9 418.6 437.4 471.6 ARPT-A (ms) 203.6 228.3 148.1 172.2 258.9 166.6 160.4 181.0</p>
    <p>CPU (%) 38.51 38.76 36.30 37.68 38.84 39.62 36.30 37.73 FPR (%) 0.60 0.00 0.25 0.00 0.69 0.00 0.15 0.00</p>
    <p>Wordpress</p>
    <p>ARPT-U (ms) 24.1 26.1 25.6 26.8 24.4 26.1 24.5 25.1 ARPT-A (ms) 142.1 234.4 205.9 220.5 152.8 242.3 226.3 180.2</p>
    <p>CPU (%) 45.92 51.40 49.89 50.74 49.15 50.98 50.91 52.14 FPR (%) 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00</p>
    <p>Drupal baseline performance ARPT-U: 398.1 ms</p>
    <p>CPU: 32.21 %</p>
    <p>Wordpress baseline performance ARPT-U: 22.5 ms</p>
    <p>CPU: 42.21 %</p>
  </div>
  <div class="page">
    <p>Performance Degradation Caused by Attacks (Cont.)</p>
    <p>In -F</p>
    <p>lig ht</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>s</p>
    <p>CPU Usage Attacker Requests User Requests</p>
    <p>U se</p>
    <p>r R</p>
    <p>PT (s</p>
    <p>) 5 th Percentile Mean 95th Percentile</p>
    <p>C PU</p>
    <p>U sa</p>
    <p>ge (%</p>
    <p>)</p>
    <p>A tta</p>
    <p>ck er</p>
    <p>R PT</p>
    <p>(s )</p>
    <p>Attack started</p>
    <p>CPU usage and RPT over time for 8 PHPass attackers on Drupal without Rampart</p>
  </div>
  <div class="page">
    <p>Effectiveness of Rampart (Cont.)</p>
    <p>In -F</p>
    <p>lig ht</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>s</p>
    <p>CPU Usage Attacker Requests User Requests</p>
    <p>U se</p>
    <p>r R</p>
    <p>PT (s</p>
    <p>) Mean Aborted User Requests Dropped User Requests Exploring User Requests</p>
    <p>C PU</p>
    <p>U sa</p>
    <p>ge (%</p>
    <p>)</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>s</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>s</p>
    <p>A tta</p>
    <p>ck er</p>
    <p>R PT</p>
    <p>(s )</p>
    <p>Attack started</p>
    <p>Mean Aborted Attacker Requests Dropped Attacker Requests Exploring Attacker Requests</p>
    <p>CPU usage and RPT over time for 8 PHPass attackers on Drupal with Rampart enabled</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Rampart performs context-sensitive function-level program profiling to learn function execution models from historical observations</p>
    <p>Rampart detects and mitigates CPU-exhaustion DoS attacks using statistical methods</p>
    <p>Rampart adaptively synthesizes and updates filtering rules to block future attack requests</p>
    <p>Rampart can effectively and efficiently protect web applications from CPU-exhaustion DoS attacks</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Q &amp; A</p>
  </div>
</Presentation>
