<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scalable and private media consump3on with Popcorn</p>
    <p>Trinabh Gupta*, Natacha Crooks*, Whitney Mulhern, Srinath Se=y, Lorenzo Alvisi*, and Michael Walfish</p>
    <p>*The University of Texas at AusHn</p>
    <p>New York University MPI-SWS</p>
    <p>MicrosoN Research</p>
  </div>
  <div class="page">
    <p>Media server</p>
    <p>Client Z2ikhtM8Yyd5UYfg==</p>
    <p>private Low cost</p>
    <p>SHZ/IC9N9iS3XUB==</p>
    <p>A=acks: [NDSS14, ESORICS13, ESORICS12,  ]</p>
    <p>Increases chance of adopHon</p>
    <p>CompaHble with</p>
    <p>commercial streaming</p>
    <p>Why? Because media diet can reveal sensiHve informaHon.</p>
    <p>[SEC04]</p>
    <p>Provably</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Private InformaHon Retrieval (PIR) provably hides requests but   Each request must touch the enHre library.  There is a tension between overhead and content protecHon.  PIR assumes fixed-size objects, but media sizes vary.</p>
    <p>Server</p>
    <p>Client</p>
    <p>Z2ikhtM8Yyd5UYfg==</p>
    <p>SHZ/IC9N9iS3XUB==</p>
    <p>Media library</p>
    <p>Server Media library</p>
  </div>
  <div class="page">
    <p>Its per-request dollar cost is 3.87x Hmes that of a non-private baseline.</p>
    <p>Popcorn tailors PIR for media to meet our three requirements.</p>
  </div>
  <div class="page">
    <p>Rest of this talk</p>
    <p>Background on PIR.</p>
    <p>Design (tailoring of PIR) and evaluaHon of Popcorn.</p>
  </div>
  <div class="page">
    <p>Background on Informa3on-theore3c PIR (ITPIR)</p>
    <p>Server 1 (Nenlix)</p>
    <p>Client</p>
    <p>Server 2 (Akamai)</p>
    <p>M3 = (M1 M3 M5) (M1 M5)</p>
    <p>No collusion</p>
    <p>M1</p>
    <p>M2</p>
    <p>M3</p>
    <p>M4</p>
    <p>M5</p>
    <p>Reply = M1 M3 M5</p>
    <p>Reply = M1 M5</p>
    <p>M1</p>
    <p>M2</p>
    <p>M3</p>
    <p>M4</p>
    <p>M5</p>
  </div>
  <div class="page">
    <p>ITPIR</p>
    <p>cheap operaHons (XORs)</p>
    <p>Given these, how can we build a system that is low cost and compaHble with commercial streaming?</p>
    <p>process enHre library per request</p>
    <p>does not respect controls on content</p>
    <p>disseminaHon</p>
    <p>CPIR</p>
    <p>process enHre library per request</p>
    <p>respects controls on content</p>
    <p>disseminaHon</p>
    <p>expensive operaHons (up to 10x ITPIR)</p>
  </div>
  <div class="page">
    <p>Nenlix</p>
    <p>Client</p>
    <p>Akamai</p>
    <p>Key Library</p>
    <p>ITPIR</p>
    <p>CPIR</p>
    <p>Popcorn composes ITPIR and CPIR to get desirable proper3es from both</p>
    <p>Enc(M1)</p>
    <p>Enc(M2)</p>
    <p>Enc(M3)</p>
    <p>Enc(M4)</p>
    <p>Enc(M5)</p>
    <p>Enc(M1)</p>
    <p>Enc(M2)</p>
    <p>Enc(M3)</p>
    <p>Enc(M4)</p>
    <p>Enc(M5)</p>
    <p>different domains</p>
  </div>
  <div class="page">
    <p>ITPIR CPIR Popcorn</p>
    <p>cheap operaHons (XORs)</p>
    <p>expensive operaHons (5-10x ITPIR)</p>
    <p>mostly cheap operaHons</p>
    <p>does not respect controls on content</p>
    <p>disseminaHon</p>
    <p>respects controls on content</p>
    <p>disseminaHon</p>
    <p>respects controls on content</p>
    <p>disseminaHon</p>
    <p>process enHre library per request</p>
    <p>process enHre library per request</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>ObservaHon: Same I/O work for each request!</p>
    <p>Benefits of batching:  I/O transfers are amorHzed.  CPU cycles are reduced as matrix mulHplicaHon algorithms exploit cache locality.</p>
    <p>Popcorn batches requests to amor3ze the overhead of ITPIR</p>
    <p>Request = 1, 3, 5 1, 3, 4, 5</p>
    <p>Reply = M1 M3 M4 M5</p>
    <p>Reply = M1 M3 M5</p>
    <p>Reply = M1 M4</p>
    <p>M1</p>
    <p>M2</p>
    <p>M3</p>
    <p>M4</p>
    <p>M5</p>
  </div>
  <div class="page">
    <p>Hme</p>
    <p>client A client B client C</p>
    <p>Strawman: Group requests that arrive during an epoch</p>
    <p>epoch</p>
    <p>client A</p>
    <p>wait for server to form batch</p>
    <p>start handling A, B, C</p>
    <p>client As playback buffer</p>
    <p>client perceived delay = epoch + epsilon</p>
    <p>playback posiHon</p>
  </div>
  <div class="page">
    <p>Hme</p>
    <p>client A client B client C</p>
    <p>Strawman: Group requests that arrive during an epoch</p>
    <p>epoch start handling A, B, C</p>
    <p>Small epoch, small batch, small delay Large epoch, large batch, large delay</p>
    <p>Issue: Hard to get both a small delay and a large batch</p>
  </div>
  <div class="page">
    <p>Popcorn exploits streaming to form large batches with small startup delay</p>
    <p>client perceived delay (d)</p>
    <p>chunks of a movie</p>
    <p>d + t d + 2t</p>
    <p>d + 3t</p>
    <p>t = Hme to consume a chunk</p>
    <p>server</p>
    <p>Inspired by pyramid broadcasHng [MMCN95]</p>
  </div>
  <div class="page">
    <p>Other design considera3ons</p>
    <p>Popcorn must handle variable-sized media objects. Response: Change bitrates to make movies of the same size.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background on PIR.</p>
    <p>Design (tailoring of PIR) of Popcorn.</p>
    <p>EvaluaHon of Popcorn.</p>
  </div>
  <div class="page">
    <p>Experiment method  Baselines:</p>
    <p>Non-private system (Apache server)  State-of-the-art CPIR [XPIR PETS16]  State-of-the-art ITPIR [Percy++] modified to support streaming  CPIR and ITPIR extended with the strawman batching scheme</p>
    <p>Nenlix-like library: 8000 movies, 90 minutes, 4Mbps</p>
    <p>Workload: 10K clients arrive within 90 minutes according to a Poisson process</p>
    <p>EsHmate per-request dollar cost using Amazons pricing model  CPU: $0.0076/hour  I/O bandwidth: $0.042/Gbps-hour  Network: $0.006/GB</p>
  </div>
  <div class="page">
    <p>System CPUs I/O (Gbps)</p>
    <p>Network (relaHve to non-private)</p>
    <p>$ relaHve to non- private</p>
    <p>Non-private 0 0 1x 1x</p>
    <p>CPIR 11.6 64 5x 265x</p>
    <p>Popcorn (delay 15s)</p>
    <p>ITPIR 3.1 64 2x 256x</p>
    <p>ITPIR++ (delay 15s)</p>
    <p>ITPIR++ (delay 10min)</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Improving performance of PIR.  DistribuHng work [FC13, TDSC12], cheaper crypto [PETS16, ESORICS14, ISC10,</p>
    <p>TKDE13, WEWoRC07], buckeHng [DBSec10, PETS10 ], batching [FC15, JoC04], secure co-processors [PET03, FAST13, NDSS08, IBM Systems Journal01]</p>
    <p>ProtecHng library content in ITPIR [RANDOM98, S&amp;P07, WPES13]  Handling variable-sized objects [CCSW14, NDSS13]</p>
    <p>Prior PIR implementaHons [Percy++, PETS16, CCSW14]</p>
    <p>Video-on-demand [MMCN95]</p>
  </div>
  <div class="page">
    <p>Take-away points</p>
    <p>It is possible to build a private, backwards compaHble, and low-cost media delivery system</p>
    <p>by tailoring PIR to media delivery.  The per-request cost in Popcorn is 3.87x that of a non-private baseline.</p>
  </div>
</Presentation>
