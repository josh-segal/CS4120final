<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ROP is Still Dangerous: Breaking Modern Defenses</p>
    <p>Nicholas Carlini and David Wagner University of California, Berkeley</p>
  </div>
  <div class="page">
    <p>Background</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Code Injection</p>
    <p>(</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>(</p>
    <p>Code Injection Data Execution Prevention</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>(</p>
    <p>Code Injection Data Execution Prevention</p>
    <p>(</p>
    <p>Return Oriented Programming</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>(</p>
    <p>Return Oriented Programming</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>(</p>
    <p>Return Oriented Programming</p>
    <p>Address Space Layout Randomization</p>
    <p>kBouncer/ROPecker</p>
    <p>Control Flow Integrity</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming mov (%rcx),%rbx test %rbx,%rbx je 41c523 &lt;main+0x803&gt; mov %rbx,%rdi callq 42ab00 mov %rax,0x2cda9d(%rip) cmpb $0x2d,(%rbx) je 41c4ac &lt;main+0x78c&gt; mov 0x2cda8d(%rip),%rax ret test %rbx,%rbx mov $0x4ab054,%eax cmove %rax,%rbx mov %rbx,0x2cda6a(%rip) test %rdi,%rdi je 41c0c2 &lt;main+0x3a2&gt; mov $0x63b,%edx mov $0x4ab01d,%esi callq 46cab0 &lt;sh_xfree&gt; ret</p>
    <p>mov %rax,0x2d2945(%rip) mov 0x2cda16(%rip),%rax test %rax,%rax je 41c112 &lt;main+0x3f2&gt; movzbl (%rax),%edx callq 41b640 &lt;time@plt&gt; mov 0xb8(%rsp),%r15d cmp 0xc(%rsp),%r15d mov %rax,0x2d2670(%rip) je 41c214 &lt;main+0x4f4&gt; xchg %ax,%ax mov (%rsp),%rdx movslq %r15d,%rax mov (%rdx,%rax,8),%r14 ret je 41c214 &lt;main+0x4f4&gt; cmpb $0x2d,(%r14) jne 41c214 &lt;main+0x4f4&gt; movzbl 0x1(%r14),%r12d movl $0x0,0x18(%rsp) cmp $0x2d,%r12b</p>
    <p>je 41c440 &lt;main+0x720&gt; xor %ebp,%ebp mov $0x4c223a,%ebx add $0x1,%r14 jmp 41c1a3 &lt;main+0x483&gt; cmp (%rbx),%r12b mov %ebp,%r13d jne 41c188 &lt;main+0x468&gt; mov %rbx,%rsi test %eax,%eax xchg %ax,%ax jne 41c188 &lt;main+0x468&gt; movslq %ebp,%rax ret cmpl $0x1,0x4ab3c8(%rax) je 41c461 &lt;main+0x741&gt; mov (%rsp),%rcx add $0x1,%r15d movslq %r15d,%rdx mov (%rcx,%rdx,8),%rdx test %rdx,%rdx je 41cefd &lt;main+0x11dd&gt;</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming mov (%rcx),%rbx test %rbx,%rbx je 41c523 &lt;main+0x803&gt; mov %rbx,%rdi callq 42ab00 mov %rax,0x2cda9d(%rip) cmpb $0x2d,(%rbx) je 41c4ac &lt;main+0x78c&gt; mov 0x2cda8d(%rip),%rax ret test %rbx,%rbx mov $0x4ab054,%eax cmove %rax,%rbx mov %rbx,0x2cda6a(%rip) test %rdi,%rdi je 41c0c2 &lt;main+0x3a2&gt; mov $0x63b,%edx mov $0x4ab01d,%esi callq 46cab0 &lt;sh_xfree&gt; ret</p>
    <p>mov %rax,0x2d2945(%rip) mov 0x2cda16(%rip),%rax test %rax,%rax je 41c112 &lt;main+0x3f2&gt; movzbl (%rax),%edx callq 41b640 &lt;time@plt&gt; mov 0xb8(%rsp),%r15d cmp 0xc(%rsp),%r15d mov %rax,0x2d2670(%rip) je 41c214 &lt;main+0x4f4&gt; xchg %ax,%ax mov (%rsp),%rdx movslq %r15d,%rax mov (%rdx,%rax,8),%r14 ret je 41c214 &lt;main+0x4f4&gt; cmpb $0x2d,(%r14) jne 41c214 &lt;main+0x4f4&gt; movzbl 0x1(%r14),%r12d movl $0x0,0x18(%rsp) cmp $0x2d,%r12b</p>
    <p>je 41c440 &lt;main+0x720&gt; xor %ebp,%ebp mov $0x4c223a,%ebx add $0x1,%r14 jmp 41c1a3 &lt;main+0x483&gt; cmp (%rbx),%r12b mov %ebp,%r13d jne 41c188 &lt;main+0x468&gt; mov %rbx,%rsi test %eax,%eax xchg %ax,%ax jne 41c188 &lt;main+0x468&gt; movslq %ebp,%rax ret cmpl $0x1,0x4ab3c8(%rax) je 41c461 &lt;main+0x741&gt; mov (%rsp),%rcx add $0x1,%r15d movslq %r15d,%rdx mov (%rcx,%rdx,8),%rdx test %rdx,%rdx je 41cefd &lt;main+0x11dd&gt;</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming mov (%rcx),%rbx test %rbx,%rbx je 41c523 &lt;main+0x803&gt; mov %rbx,%rdi callq 42ab00 mov %rax,0x2cda9d(%rip) cmpb $0x2d,(%rbx) je 41c4ac &lt;main+0x78c&gt; mov 0x2cda8d(%rip),%rax ret test %rbx,%rbx mov $0x4ab054,%eax cmove %rax,%rbx mov %rbx,0x2cda6a(%rip) test %rdi,%rdi je 41c0c2 &lt;main+0x3a2&gt; mov $0x63b,%edx mov $0x4ab01d,%esi callq 46cab0 &lt;sh_xfree&gt; ret</p>
    <p>mov %rax,0x2d2945(%rip) mov 0x2cda16(%rip),%rax test %rax,%rax je 41c112 &lt;main+0x3f2&gt; movzbl (%rax),%edx callq 41b640 &lt;time@plt&gt; mov 0xb8(%rsp),%r15d cmp 0xc(%rsp),%r15d mov %rax,0x2d2670(%rip) je 41c214 &lt;main+0x4f4&gt; xchg %ax,%ax mov (%rsp),%rdx movslq %r15d,%rax mov (%rdx,%rax,8),%r14 ret je 41c214 &lt;main+0x4f4&gt; cmpb $0x2d,(%r14) jne 41c214 &lt;main+0x4f4&gt; movzbl 0x1(%r14),%r12d movl $0x0,0x18(%rsp) cmp $0x2d,%r12b</p>
    <p>je 41c440 &lt;main+0x720&gt; xor %ebp,%ebp mov $0x4c223a,%ebx add $0x1,%r14 jmp 41c1a3 &lt;main+0x483&gt; cmp (%rbx),%r12b mov %ebp,%r13d jne 41c188 &lt;main+0x468&gt; mov %rbx,%rsi test %eax,%eax xchg %ax,%ax jne 41c188 &lt;main+0x468&gt; movslq %ebp,%rax ret cmpl $0x1,0x4ab3c8(%rax) je 41c461 &lt;main+0x741&gt; mov (%rsp),%rcx add $0x1,%r15d movslq %r15d,%rdx mov (%rcx,%rdx,8),%rdx test %rdx,%rdx je 41cefd &lt;main+0x11dd&gt;</p>
  </div>
  <div class="page">
    <p>Return Oriented Programming mov (%rcx),%rbx test %rbx,%rbx je 41c523 &lt;main+0x803&gt; mov %rbx,%rdi callq 42ab00 mov %rax,0x2cda9d(%rip) cmpb $0x2d,(%rbx) je 41c4ac &lt;main+0x78c&gt; mov 0x2cda8d(%rip),%rax ret test %rbx,%rbx mov $0x4ab054,%eax cmove %rax,%rbx mov %rbx,0x2cda6a(%rip) test %rdi,%rdi je 41c0c2 &lt;main+0x3a2&gt; mov $0x63b,%edx mov $0x4ab01d,%esi callq 46cab0 &lt;sh_xfree&gt; ret</p>
    <p>mov %rax,0x2d2945(%rip) mov 0x2cda16(%rip),%rax test %rax,%rax je 41c112 &lt;main+0x3f2&gt; movzbl (%rax),%edx callq 41b640 &lt;time@plt&gt; mov 0xb8(%rsp),%r15d cmp 0xc(%rsp),%r15d mov %rax,0x2d2670(%rip) je 41c214 &lt;main+0x4f4&gt; xchg %ax,%ax mov (%rsp),%rdx movslq %r15d,%rax mov (%rdx,%rax,8),%r14 ret je 41c214 &lt;main+0x4f4&gt; cmpb $0x2d,(%r14) jne 41c214 &lt;main+0x4f4&gt; movzbl 0x1(%r14),%r12d movl $0x0,0x18(%rsp) cmp $0x2d,%r12b</p>
    <p>je 41c440 &lt;main+0x720&gt; xor %ebp,%ebp mov $0x4c223a,%ebx add $0x1,%r14 jmp 41c1a3 &lt;main+0x483&gt; cmp (%rbx),%r12b mov %ebp,%r13d jne 41c188 &lt;main+0x468&gt; mov %rbx,%rsi test %eax,%eax xchg %ax,%ax jne 41c188 &lt;main+0x468&gt; movslq %ebp,%rax ret cmpl $0x1,0x4ab3c8(%rax) je 41c461 &lt;main+0x741&gt; mov (%rsp),%rcx add $0x1,%r15d movslq %r15d,%rdx mov (%rcx,%rdx,8),%rdx test %rdx,%rdx je 41cefd &lt;main+0x11dd&gt;</p>
    <p>Gadget</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>kBouncer</p>
    <p>If we could inspect the past execution   maybe we could detect ROP attacks</p>
    <p>Transparent ROP exploit mitigation using indirect branch tracing. Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis.</p>
    <p>USENIX Security, 2013.</p>
  </div>
  <div class="page">
    <p>kBouncer</p>
    <p>Normal Execution Syscall</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>kBouncer</p>
    <p>Normal Execution} SyscallTime Visible History</p>
    <p>(Last Branch Record)</p>
  </div>
  <div class="page">
    <p>kBouncer</p>
    <p>Normal Execution Syscall ROP Attack Syscall</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>kBouncer</p>
    <p>Normal Execution } Syscall Visible History</p>
    <p>(Last Branch Record)</p>
    <p>ROP Attack Syscall</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>kBouncer Observation (1):</p>
  </div>
  <div class="page">
    <p>kBouncer Observation (1):</p>
    <p>ROP attacks issue returns to non-Call-Preceded addresses.</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Normal Execution</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Call-Preceded Return</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Non-Call-Preceded Return</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Non-Call-Preceded Return</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Non-Call-Preceded Return</p>
    <p>and [rax],0xfd mov edx,0x768 mov esi,0x4ab632 mov rdi,rbx call 0x2b2130 test rbp,rbp cmov [rbp],0x0 add rsp,0x8 pop rbx pop rbp ret</p>
    <p>push rbx mov ebx, eax add ebx, ebx add ebx, eax pop rbx ret</p>
  </div>
  <div class="page">
    <p>Defense (1):</p>
    <p>All return instructions target Call-Preceded addresses.</p>
  </div>
  <div class="page">
    <p>Defense (1): Restrict returns to only target Call-Preceded addresses.</p>
  </div>
  <div class="page">
    <p>kBouncer Observation (2):</p>
  </div>
  <div class="page">
    <p>kBouncer Observation (2):</p>
    <p>ROP attacks are built of long sequences of short gadgets.</p>
    <p>gadget: sequence of &lt;20 instructions, ending in ret long sequence: 8 gadgets occurring sequentially</p>
  </div>
  <div class="page">
    <p>Defense (2): Do not allow long sequences</p>
    <p>of short gadgets.</p>
  </div>
  <div class="page">
    <p>Detecting Attacks</p>
    <p>ROP Attack Issue Syscall</p>
  </div>
  <div class="page">
    <p>Detecting Attacks</p>
    <p>ROP Attack } Issue Syscall Visible History</p>
  </div>
  <div class="page">
    <p>Detecting Attacks</p>
    <p>ROP Attack } Issue Syscall Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>Detecting Attacks</p>
    <p>ROP Attack } Issue Syscall Visible History</p>
    <p>- Call-Preceded? X - No long chain?</p>
  </div>
  <div class="page">
    <p>Detecting Attacks</p>
    <p>ROP Attack } Issue Syscall Visible History</p>
    <p>- Call-Preceded? X - No long chain? X</p>
  </div>
  <div class="page">
    <p>kBouncer is exciting</p>
  </div>
  <div class="page">
    <p>But does it work?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Breaking kBouncer with History Flushing</p>
  </div>
  <div class="page">
    <p>Breaking kBouncer with History Flushing</p>
    <p>Goal: issue a single system call</p>
  </div>
  <div class="page">
    <p>Large NOP Gadget</p>
    <p>It must be Call-Preceded</p>
    <p>It must be long (&gt;20 instructions)</p>
    <p>It must act as an effective no-op</p>
    <p>add [esp+17Ch],ebx mov ebx,[esp+17Ch] sub ebx,ebp jmp A ... A: add [esp+64h],ebx jmp B ... B: mov esi,[esp+1C0h] lea eax,[esi*8-4] sub eax,[esp+64] and eax,7h mov edi,[esp+64] lea eax,[edi+eax+4] shr eax,3 cmp eax,esi jbe C ... C: mov eax,[esp+1C0h] add esp,19Ch pop ebx pop esi pop edi pop ebp ret</p>
  </div>
  <div class="page">
    <p>History Flushing</p>
    <p>Traditional ROP Attack</p>
  </div>
  <div class="page">
    <p>History Flushing</p>
    <p>Traditional ROP Attack } Issue Syscall Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>History Flushing</p>
    <p>Traditional ROP Attack } Issue Syscall Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>History Flushing</p>
    <p>Traditional ROP Attack } Issue Syscall Visible History</p>
    <p>- Call-Preceded?  - No long chain?</p>
  </div>
  <div class="page">
    <p>So kBouncer is broken</p>
  </div>
  <div class="page">
    <p>So kBouncer is broken any limited history defense</p>
  </div>
  <div class="page">
    <p>Can we fix it?</p>
  </div>
  <div class="page">
    <p>Introducing kBouncer++</p>
    <p>LBR with infinite entries</p>
  </div>
  <div class="page">
    <p>Introducing kBouncer++</p>
    <p>Defense runs continuously</p>
  </div>
  <div class="page">
    <p>Introducing kBouncer++</p>
    <p>Traditional ROP Attack} Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>Introducing kBouncer++</p>
    <p>Traditional ROP Attack} Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>Introducing kBouncer++</p>
    <p>Traditional ROP Attack} Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>Does this work?</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Breaking kBouncer++</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>Call-Preceded Detector Insufficient</p>
    <p>kBouncer: call-preceded ROP is not possible</p>
    <p>Our work: call-preceded ROP is possible</p>
    <p>10 of 10 binaries of size 70k have sufficient text to mount a call-preceded ROP attack</p>
  </div>
  <div class="page">
    <p>Defeating kBouncer++</p>
    <p>Call-Preceded ROP Attack} Visible History</p>
    <p>- Call-Preceded? - No long chain?</p>
  </div>
  <div class="page">
    <p>Defeating kBouncer++</p>
    <p>Call-Preceded ROP Attack} Visible History</p>
    <p>- Call-Preceded?  - No long chain?</p>
  </div>
  <div class="page">
    <p>Defeating kBouncer++</p>
    <p>Call-Preceded ROP Attack} Visible History</p>
    <p>- Call-Preceded?  - No long chain? X</p>
  </div>
  <div class="page">
    <p>Large No-Op Gadgets</p>
  </div>
  <div class="page">
    <p>Defeating kBouncer++</p>
    <p>Call-Preceded ROP Attack} Visible History</p>
    <p>- Call-Preceded?  - No long chain?</p>
  </div>
  <div class="page">
    <p>Defeating kBouncer++</p>
    <p>Call } Visible History</p>
    <p>- Call-Preceded?  - No long chain?</p>
    <p>Preceded ROP Attack</p>
  </div>
  <div class="page">
    <p>Defeating kBouncer++</p>
    <p>Call } Visible History</p>
    <p>- Call-Preceded?  - No long chain?</p>
    <p>Preceded ROP Attack</p>
    <p>N O</p>
    <p>P</p>
    <p>N O</p>
    <p>P</p>
    <p>N O</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Even with unlimited history, ROP attacks are possible</p>
  </div>
  <div class="page">
    <p>ROPecker is also broken</p>
    <p>ROPecker: A generic and practical approach for defending against rop attacks. Yueqiang Cheng, Zongwei Zhou, Miao Yu, Xuhua Ding, and Robert H Deng.</p>
    <p>NDSS, 2014.</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Results</p>
    <p>Modified four real-world exploits so they won't be detected by kBouncer</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Modified four real-world exploits so they won't be detected by kBouncer</p>
    <p>Adobe Reader 9 Adobe Flash 11 Mplayer Lite Internet Explorer 8</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>[Goktas, S&amp;P14] discussed the existence of call-preceded ROP and use it to break many existing CFI defenses</p>
    <p>[Davi, Usenix14] and [Goktas, Usenix14] both independently and concurrently discovered very similar attacks on kBouncer &amp; ROPecker</p>
  </div>
  <div class="page">
    <p>Implication for Defenses</p>
  </div>
  <div class="page">
    <p>Implication for Defenses</p>
    <p>Do not rely on limited history</p>
  </div>
  <div class="page">
    <p>Implication for Defenses</p>
    <p>Call-Preceded ROP is possible</p>
  </div>
  <div class="page">
    <p>Implication for Defenses</p>
    <p>CFI needs to return to its roots</p>
  </div>
  <div class="page">
    <p>Implication for Defenses</p>
    <p>Classifying code as gadget vs. non-gadget is not easy</p>
  </div>
  <div class="page">
    <p>Defenses should focus on fundamental differences</p>
    <p>between normal execution and ROP attacks.</p>
  </div>
</Presentation>
