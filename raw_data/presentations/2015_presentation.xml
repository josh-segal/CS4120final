<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fast and Efficient Container Startup at the Edge via Dependency Scheduling</p>
    <p>Silvery Fu1, Radhika Mittal2, Lei Zhang3, Sylvia Ratnasamy1</p>
    <p>(1: UC Berkeley, 2: UIUC, 3: Alibaba Group)</p>
  </div>
  <div class="page">
    <p>Container Technologies are Popular  Adopted in 2,000+ companies</p>
    <p>160+ million container images</p>
    <p>86% of containers are deployed on kubernetes</p>
    <p>Emerging frameworks and use cases in edge computing</p>
  </div>
  <div class="page">
    <p>Slow Start</p>
    <p>Transfer container image - fetch image from a repository</p>
    <p>Decompress and set up</p>
    <p>T: task time; S: startup time; R: running time - T = S + R; SR Short tasks suffer!</p>
  </div>
  <div class="page">
    <p>Startup Latency Profile dependency pulling: - Trace: 56k, 33TB images - Amazon ECR, m4.xlarge - Average image pulling latency is</p>
    <p>An image includes all container dependencies, including binaries, code, configurations files.</p>
  </div>
  <div class="page">
    <p>Deploying Containers</p>
    <p>Scheduling latency Pulling Latency</p>
    <p>Booting Latency &lt; 100ms</p>
    <p>&gt;20s</p>
    <p>Trace: 56k, 33TB images Amazon EC2</p>
    <p>&lt; 1s</p>
    <p>Cloud experiment with high-speed networks and powerful machines!</p>
    <p>Can we make container start faster</p>
    <p>in an easilyadoptable way?</p>
  </div>
  <div class="page">
    <p>Can we avoid pulling images?</p>
  </div>
  <div class="page">
    <p>Design 1: Image-aware Placement</p>
    <p>Image Matching</p>
    <p>Issues: - binary decision - image name changes</p>
  </div>
  <div class="page">
    <p>Can we do better than matching image?</p>
  </div>
  <div class="page">
    <p>Layer View</p>
    <p>A layer digest is</p>
    <p>content-addressable</p>
    <p>Layers are shared across images!</p>
  </div>
  <div class="page">
    <p>Design 2: Layer-aware Placement image:</p>
    <p>alphabet</p>
    <p>image: theta</p>
    <p>image: omega</p>
    <p>image: alphabet</p>
    <p>image: alpha</p>
    <p>Layer Matching</p>
  </div>
  <div class="page">
    <p>Are the required changes easily adoptable?</p>
  </div>
  <div class="page">
    <p>k8s layer-aware Master Node</p>
    <p>Scheduler</p>
    <p>API Server CLI</p>
    <p>Kubelet</p>
    <p>W or</p>
    <p>ke r N</p>
    <p>od e</p>
    <p>Container Runtime</p>
    <p>Local Image Store</p>
    <p>External Image Store</p>
    <p>etcd</p>
    <p>Image resolution Dependency Scheduling</p>
    <p>Layer Info</p>
    <p>Layer Tracking Kubelet</p>
    <p>W or</p>
    <p>ke r N</p>
    <p>od e</p>
    <p>Container Runtime</p>
    <p>Local Image Store</p>
    <p>Layer Tracking</p>
    <p>+ Better performance - More API changes - More overhead</p>
  </div>
  <div class="page">
    <p>Results</p>
  </div>
  <div class="page">
    <p>Faster Startup  Setup: - 200 nodes - 32GB image storage - 80% utilization - Zipf distribution</p>
    <p>Improvements on avg. startup latency: - 1.4x smaller (image) - 2.3x smaller (layer)</p>
  </div>
  <div class="page">
    <p>Smaller compute usage: 1.3x (image) and 2x (layer)  More spare storage (excluding container images):</p>
    <p>1.1x (image) and 1.6x (layer)</p>
    <p>Resource Efficiency</p>
  </div>
  <div class="page">
    <p>Open questions</p>
    <p>- in real-world? (..need categorization of edge workloads)</p>
    <p>- What are the implications of resource efficiency gains and startup latency reductions?</p>
    <p>- What are the (other) forms of data locality issues at the edge?</p>
  </div>
  <div class="page">
    <p>Open questions</p>
    <p>System-wise: - How to balance dep. scheduling and the other</p>
    <p>scheduling policies? - How much overhead (e.g., on the node-master</p>
    <p>communication, the apiserver,)? - ..</p>
  </div>
  <div class="page">
    <p>Summary Containers and container images are the emerging tools to facilitate software reuse in deployment.</p>
    <p>Such reuse can lead to substantial dependency sharing between containers.</p>
    <p>Dependency-aware scheduling exploits such sharing, and is highly effective in cutting container startup latency.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>silvery@eecs.berkeley.edu</p>
  </div>
</Presentation>
