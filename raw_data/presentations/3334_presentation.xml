<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Million-Key Question</p>
    <p>Investigating the Origins of RSA Public Keys</p>
    <p>Petr venda, Mat Nemec, Peter Sekan, Rudolf Kvaovsk,</p>
    <p>David Formnek, David Komrek and Vashek Maty</p>
    <p>svenda@fi.muni.cz</p>
    <p>Faculty of Informatics, Masaryk University, Czech Republic</p>
  </div>
  <div class="page">
    <p>www.crcs.cz/rsa @CRoCS_MUNI2 The Million-Key Question, USENIX Security 2016.08.12</p>
    <p>RSA public key N = 9782D7123C330444C88E279BF321EE84AC39524F1D84026327B04F32E1E930FC81588010178</p>
    <p>DC75FCBF8258A068071317245D08817988813C4173495A922A41DA429A964F738020076EFFE7ED</p>
    <p>e = 10001</p>
    <p>Infineon</p>
    <p>P x Q = N</p>
    <p>Crypto library code</p>
  </div>
  <div class="page">
    <p>Distribution of primes (MSB) Large factors of p-1 / p+1</p>
    <p>(biased bits of public modulus, mask)</p>
    <p>Number of factors</p>
    <p>and more</p>
    <p>Bit stream statistics</p>
  </div>
  <div class="page">
    <p>Heatmap of primes most significant byte</p>
    <p>P x Q = N</p>
  </div>
  <div class="page">
    <p>Factors of P-1/Q-1 (and its impact on modulus N)</p>
    <p>For RSA512b, length of prime is 256bits =&gt; P-1/Q-1 can be factorized</p>
    <p>We factorized 10k primes for every source with YAFU and</p>
    <p>Small factors avoided</p>
    <p>Significant bias on lower bits of N</p>
    <p>Used by I. Mironov (OpenSSL)</p>
    <p>FIPS primes (specific range)</p>
    <p>Not observable in modulus N</p>
    <p>T h e</p>
    <p>s e</p>
    <p>c o</p>
    <p>n d l a</p>
    <p>rg e</p>
    <p>s t</p>
    <p>fa c to</p>
    <p>r (b</p>
    <p>it l e</p>
    <p>n g th</p>
    <p>)</p>
    <p>The largest factor (bit length)</p>
    <p>MIRONOV, I. Factoring RSA Moduli II.</p>
    <p>https://windowsontheory.org/2012/05/17/factoring-rsa</p>
    <p>modulipart-ii/</p>
  </div>
  <div class="page">
    <p>unknown, but statistically observable</p>
    <p>Significance</p>
  </div>
  <div class="page">
    <p>Apply mask to</p>
    <p>learning set</p>
    <p>Count mask</p>
    <p>frequency</p>
    <p>Normalize</p>
    <p>mask vectors</p>
    <p>of groups</p>
    <p>Group sources</p>
    <p>with very similar</p>
    <p>frequencies</p>
    <p>Mask value Group I Group II  Group XII Group XIII</p>
    <p>Identification of biased modulus</p>
    <p>bits (mask, 9bits)</p>
    <p>Harvest keys from</p>
    <p>known sources</p>
    <p>(learning set)</p>
    <p>Building classification matrix</p>
    <p>E.g., 101101110</p>
    <p>Classification matrix</p>
    <p>Mask value</p>
    <p>M a s k f</p>
    <p>re q</p>
    <p>u e n</p>
    <p>c y</p>
  </div>
  <div class="page">
    <p>www.crcs.cz/rsa @CRoCS_MUNI8 The Million-Key Question, USENIX Security 2016.08.12</p>
    <p>Tree splits can be attributed to</p>
    <p>particular implementation choice(s)</p>
  </div>
  <div class="page">
    <p>-----BEGIN CERTIFICATE----</p>
    <p>MIIG9zCCBd+gAwIBAgIIJOR2wFUwc20wDQYJKoZI</p>
    <p>hvcNAQELBQAwSTELMAkGA1UEBhMCVVMxEzAR</p>
    <p>BgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHE</p>
    <p>dvb2dsZSBJbnRlcm5ldCBBdXRob3JpdHkgRzIwHhc NMTYwNzA2MDgxNzQzWhcNMTYwOTI4MDgwMzA</p>
    <p>wk2zlQSqmqHS14NRoQD9zPk/rEp4miQ9aVgC6k7i</p>
    <p>bLukl4cGi5myPc0kCQr8kNUBhH25DS6HpekTmO1s</p>
    <p>TouwiDPM6SHIVU6X2Ca1lNKg2wbx8h2Q63SDIwFJ 52HsNAClKp4ADvjvvImYoWVitcLlhpXogOAzbLz3HIs</p>
    <p>-----END CERTIFICATE----</p>
    <p>Classification</p>
    <p>Precomputed matrixInput key</p>
  </div>
  <div class="page">
    <p>www.crcs.cz/rsa @CRoCS_MUNI10 The Million-Key Question, USENIX Security 2016.08.12</p>
    <p>Try at http://crcs.cz/rsapp</p>
  </div>
  <div class="page">
    <p>Classification accuracy</p>
    <p>Mask value</p>
    <p>Try online app at http://crcs.cz/rsapp/</p>
  </div>
  <div class="page">
    <p>Classification accuracy (test set, 10k keys/source)</p>
    <p>Top 1: avg. 40.34%, min. 0.63%, max. 95.36%</p>
    <p>Top 3: avg. 73.09%, min. 39.32%, max. 98.41%</p>
    <p>Top 1: avg. 78.59%, min. 27.42%, max. 99.38%</p>
    <p>Top 3: avg. 97.48%, min. 91.45%, max. 100.00%</p>
    <p>Top 1: avg. 85.47%, min. 42.74%, max. 100.00%</p>
    <p>Top 3: avg. 99.27%, min. 95.00%, max. 100.00%</p>
  </div>
  <div class="page">
    <p>Datasets: IPv4 TLS scan(10M), PGP(1.4M), Cert. Transparency(13M)</p>
    <p>Problem: keys in these datasets are not annotated with source library</p>
    <p>Web servers market share =&gt; OpenSSL (~86%), Microsoft (~12%)</p>
    <p>Sanity check with real world keys: IPv4 TLS dataset</p>
    <p>The Million-Key Question, USENIX Security 2016.08.12</p>
    <p>Expected</p>
    <p>Classified (10-99 keys with same subject and issue date)</p>
    <p>Nettle</p>
    <p>Botan</p>
  </div>
  <div class="page">
    <p>Sanity check: keys which cannot be from OpenSSL</p>
    <p>Keys with mask value never generated by OpenSSL</p>
    <p>Advantage: all keys from dataset can be used</p>
    <p>OpenSSL is default client</p>
    <p>Leaves ~81 % for OpenSSL</p>
    <p>Dataset !OpenSSL</p>
    <p>OpenSSL rare in PGP</p>
  </div>
  <div class="page">
    <p>Impact (of the possibility) of public key classification</p>
    <p>Information leakage vulnerability</p>
    <p>Quick search for other keys from vulnerable library</p>
    <p>Linking related Tor hidden services operators</p>
    <p>Verify Crypto-as-a-Service use of secure hardware</p>
  </div>
  <div class="page">
    <p>How to defend against public key classification?</p>
    <p>Unlikely to happen soon, changes in critical part of code, legacy binaries</p>
    <p>Generate multiple keys, pick the most anonymous one</p>
    <p>Only about 5 keys required on average</p>
    <p>http://crcs.cz/rsapp</p>
  </div>
  <div class="page">
    <p>What else?</p>
    <p>More in the paper and technical report http://crcs.cz/rsa</p>
    <p>Summary RSA generation techniques used by libraries and cards</p>
    <p>Analysis of random data streams from smart cards (bias detected)</p>
    <p>Systematic defect responsible for generating weak RSA keys</p>
    <p>Time and power analysis of key generation on smart cards</p>
    <p>Download datasets and tools at http://crcs.cz/rsa</p>
  </div>
  <div class="page">
    <p>Limitations of the current work</p>
    <p>Will be misclassified at the moment</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>RSA keypair generation observably bias public keys</p>
    <p>Different libraries use different implementation choices</p>
    <p>Source library can be probabilistically estimated from RSA public key</p>
    <p>Accuracy more than 85 % with 10 keys (&gt;99 % within top three matches)</p>
    <p>For some sources, even a single key is enough</p>
    <p>Information disclosure vulnerability</p>
    <p>Forensics, de-anonymization, vulnerability scans, compliancy testing</p>
    <p>Not easy to fix, will stay for longer time</p>
    <p>Questions</p>
    <p>Get tech. report and datasets at http://crcs.cz/rsa, try classification at http://crcs.cz/rsapp</p>
  </div>
  <div class="page">
    <p>www.crcs.cz/rsa @CRoCS_MUNI20 The Million-Key Question, USENIX Security 2016.08.12</p>
  </div>
  <div class="page">
    <p>BACKUP SLIDES</p>
  </div>
  <div class="page">
    <p>www.crcs.cz/rsa @CRoCS_MUNI22 The Million-Key Question, USENIX Security 2016.08.12</p>
  </div>
</Presentation>
