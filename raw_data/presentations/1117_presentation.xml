<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Toward Coordination-free and Reconfigurable Mixed Concurrency Control</p>
    <p>Dixin Tang Aaron J. Elmore</p>
  </div>
  <div class="page">
    <p>Hardware Development Changes Database Architecture</p>
    <p>A Few Cores</p>
    <p>Small Memory</p>
    <p>Large Disk</p>
    <p>Disk Stalls Dominate the Performance</p>
    <p>Elimination of Disk Stalls</p>
    <p>More Concurrent Read/Write Operations</p>
    <p>Concurrency Control Becomes the New Bottleneck</p>
    <p>Disk-based Database Main Memory Database</p>
  </div>
  <div class="page">
    <p>A Closer Look at Concurrency Control</p>
    <p>R W R</p>
    <p>Database Records Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>TXN TXN TXNTXN</p>
    <p>Working Threads</p>
    <p>Concurrency Control Comes Into Play</p>
    <p>Transaction A sequence of read/write operations to be executed atomically Two Goals of Concurrency Control</p>
    <p>Interleaving concurrent operations to maximize the performance</p>
    <p>Guarantee consistency Serializability</p>
    <p>The result of interleaved execution of concurrent transactions is equivalent to the result of executing these transactions in one serial order</p>
    <p>R W R W</p>
  </div>
  <div class="page">
    <p>One Concurrency Control Does Not Fit All</p>
    <p>Database Records Rec</p>
    <p>Rec Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>PartCC (Partition-based single-thread concurrency control)</p>
    <p>TXN TXN TXN</p>
    <p>Block Other Threads</p>
    <p>Perform well under partitionable workloads</p>
    <p>Cross-partition transactions hurt the performance</p>
    <p>TXN TXN TXN</p>
  </div>
  <div class="page">
    <p>One Concurrency Control Does not Fit All</p>
    <p>OCC (Optimistic Concurrency Control)</p>
    <p>R W R</p>
    <p>R W</p>
    <p>Time Line</p>
    <p>R W R</p>
    <p>R W</p>
    <p>Validate</p>
    <p>Validate</p>
    <p>v Perform better under low-conflict workloads</p>
    <p>v Conflicts can hurt the performance because transactions need to be restarted if validation fails</p>
    <p>v Perform better under highly-conflicted workloads</p>
    <p>v Concurrency control overhead and synchronization overhead</p>
    <p>No Blocking During Normal Execution</p>
    <p>!&quot;#$</p>
    <p>!&quot;#%</p>
    <p>!&quot;#$</p>
    <p>!&quot;#%</p>
  </div>
  <div class="page">
    <p>Not partitionable, Read Only Not partitionable, High skew, Write heavy</p>
    <p>Partitionable</p>
    <p>One Concurrency Control Does not Fit All</p>
    <p>experiment on our main-memory database prototype using YCSB workloads</p>
    <p>v OCC from Silo [1]</p>
    <p>v 2PL using VLL [2]</p>
    <p>v PartCC from H-Store [3]</p>
    <p>Each Protocol excels in different scenarios.</p>
    <p>[1] TU, S., et al. Speedy transactions in multicore in-memory databases. SOSP 13 [2] REN, K. et al. Lightweight locking for main memory database systems. PVLDB12 [3] KALLMAN, R., et al. H-store: a high-performance, distributed main mem-ory transaction processing system. PVLDB08</p>
  </div>
  <div class="page">
    <p>Database</p>
    <p>A General Solution: Mixed Concurrency Control</p>
    <p>Concurrency Control Protocols</p>
    <p>Workload Two Benefits  Each protocol can process the</p>
    <p>part of workload it is optimized for</p>
    <p>Each protocol can avoid being brittle to workload where it does not perform well</p>
    <p>!!&quot; !!# !!$</p>
  </div>
  <div class="page">
    <p>Two Challenges of Mixed Concurrency Control</p>
    <p>Workload  How to partition a workload and mix multiple concurrency control protocols efficiently</p>
    <p>How to reconfigure a protocol when the workload changes</p>
    <p>!!&quot; !!#</p>
    <p>!!$</p>
    <p>Workload !!&quot;</p>
    <p>!!#</p>
    <p>!!$</p>
    <p>!!#</p>
  </div>
  <div class="page">
    <p>Previous Approach of Mixed Concurrency Control: Partition Stored Procedures by Conflicts</p>
    <p>Stored Procedure (SP) A Parameterized Transaction Template</p>
    <p>TXN TXN</p>
    <p>TXN</p>
    <p>Semantic Information</p>
    <p>v Tables to be read/written</p>
    <p>v Orders of reading/writing tables</p>
    <p>Generate transactions by providing parameters</p>
    <p>Previous Approach [1]</p>
    <p>v Group stored procedures by conflicts extracted from their</p>
    <p>semantic information</p>
    <p>v Assign each group a protocol to process conflicts within</p>
    <p>that group</p>
    <p>v Need additional concurrency control protocols to process</p>
    <p>conflicts across groups</p>
    <p>SQL</p>
    <p>[1] SU, C., et al. Bringing modular concurrency control to the next level. SIGMOD 17</p>
  </div>
  <div class="page">
    <p>SQL</p>
    <p>Previous Approach of Mixed Concurrency Control: Partition Stored Procedures by Conflicts</p>
    <p>!!&quot; !!# !!$</p>
    <p>!!%</p>
    <p>!!&amp;</p>
    <p>Rely on static semantic information, cannot adapt to varied workloads</p>
    <p>Ov erh</p>
    <p>ea d o</p>
    <p>f m ulti</p>
    <p>ple CC</p>
    <p>ex ecu</p>
    <p>tion fo</p>
    <p>r a sin</p>
    <p>gle op</p>
    <p>era tion</p>
    <p>Process conflicts within group</p>
    <p>Process conflicts across groups</p>
    <p>Process conflicts across groups!!'</p>
    <p>TXN SQL SQL SQL</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>A New Perspective: Partition Records by Access Characteristics</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Database Records Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Partitionable Lowly-conflicted Records Highly-conflicted Records</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Validation-based Approach Lock-based ApproachPartition-based single-thread approach</p>
  </div>
  <div class="page">
    <p>TXN</p>
    <p>CormCC: Coordination-free and Reconfigurable Mixed Concurrency Control</p>
    <p>!!&quot; !!# !!$</p>
    <p>Reconfigurable: partitioning records depend on real-time data access characteristics, make online protocol reconfiguration possible</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>R R W</p>
    <p>Coordination-free: no additional concurrency control protocols</p>
    <p>OurApproach v Partition database records and assign each partition a single protocol</p>
    <p>v A single protocol is used to process all operations for that partition of records</p>
    <p>To achieve the two goals, we need to answer four questions:</p>
    <p>v How does CormCC execute</p>
    <p>v How to maintain serializability</p>
    <p>v How to guarantee deadlock free</p>
    <p>v How to enable online protocol switch</p>
  </div>
  <div class="page">
    <p>CormCC Execution</p>
    <p>Preprocess Validation CommitExecution</p>
    <p>Break transaction life cycle into four phases</p>
    <p>!!&quot;</p>
    <p>!!#</p>
    <p>!!$</p>
    <p>TXN NO-OPTXNR</p>
    <p>TXN W</p>
    <p>TXN W</p>
    <p>TXN TXN</p>
    <p>TXN</p>
    <p>TXN</p>
    <p>TXN</p>
    <p>TXN</p>
    <p>TXN</p>
    <p>TXN</p>
  </div>
  <div class="page">
    <p>Correctness of CormCC  Serializability</p>
    <p>v COCSR (Commit ordering conflict serializable)</p>
    <p>v Sufficient condition of serializable v Commit ordering respects conflicts</p>
    <p>v If all protocols are COCSR, then CormCC is COCSR</p>
    <p>v Proof can be found in the paper</p>
    <p>!!&quot;</p>
    <p>!!#</p>
    <p>!!$</p>
    <p>Serializability</p>
    <p>Serializability</p>
    <p>Serializability</p>
    <p>CormCC Serializability</p>
    <p>COCSR</p>
    <p>COCSR</p>
    <p>COCSR</p>
    <p>COCSR</p>
    <p>%&amp;'&quot;</p>
    <p>Time Line</p>
    <p>%&amp;'#</p>
    <p>Read</p>
    <p>One Record</p>
    <p>Write</p>
    <p>Commit</p>
    <p>Commit</p>
    <p>TXN+ Commits before TXN, conflict</p>
  </div>
  <div class="page">
    <p>CormCC  Deadlock Free</p>
    <p>Wait-for Graph</p>
    <p>Deadlock Detection</p>
    <p>TXN TXN</p>
    <p>TXN</p>
    <p>Our Approach: Deadlock Prevention v We require each protocol can only exclusively let</p>
    <p>transactions wait in no more than one phase</p>
    <p>v No deadlock within one phase</p>
    <p>v Transactions in earlier phases can wait for later phases, but not the other way around</p>
    <p>!!&quot;</p>
    <p>!!#</p>
    <p>!!$</p>
    <p>Preprocess Validation CommitExecution</p>
    <p>%&amp;'&quot;</p>
    <p>%&amp;'#</p>
    <p>%&amp;'$</p>
  </div>
  <div class="page">
    <p>CormCC  Online Protocol Reconfiguration Online reconfiguration can cause inconsistency</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>Old CC</p>
    <p>TXN TXN</p>
    <p>Each working thread changes protocol when the current TXN finishes</p>
    <p>conflicts between the two threads may not be detected</p>
    <p>A straightforward solution: stop all</p>
    <p>v Waiting all working threads to complete their current transactions, and stop them from receiving new transactions v Decrease the performance of database</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>Old CC</p>
    <p>TXN TXN</p>
    <p>New CC</p>
  </div>
  <div class="page">
    <p>CormCC  Online Protocol Reconfiguration Our solution: using a mediated protocol that is compatible to both old and new protocols</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>Old CC</p>
    <p>TXN TXN</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>TXN TXN</p>
    <p>Old CCMediated Protocol</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>TXN TXN</p>
    <p>Mediated Protocol</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>TXN TXN</p>
    <p>New CC Mediated Protocol</p>
    <p>Step 1</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>R W</p>
    <p>New CC</p>
    <p>TXN TXN</p>
    <p>Step 2 Step 3 Step 4</p>
  </div>
  <div class="page">
    <p>CormCC  Online Protocol Reconfiguration</p>
    <p>How to Build a Mediated Protocol</p>
    <p>v The mediated protocol executes the logics of both old and new protocol</p>
    <p>v Example: Mediated Protocol between OCC and 2PL</p>
    <p>Mediated Protocol between OCC and 2PL</p>
    <p>Read</p>
    <p>v Read timestamp (OCC) v Apply read lock (2PL)</p>
    <p>Write v Write to a local buffer (OCC) v Apply write lock (2PL)</p>
    <p>Validate v Execute Validate phase of OCC</p>
  </div>
  <div class="page">
    <p>Prototype Design v Supporting PartCC from H-Store [3], OCC from Silo [1], and 2PL from VLL [2]</p>
    <p>v Partition the whole database and apply each partition a single protocol</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>Rec Rec</p>
    <p>Rec</p>
    <p>Rec</p>
    <p>PartCC PartCC OCC OCC 2PL</p>
    <p>[1] TU, S., et al. Speedy transactions in multicore in-memory databases. SOSP 13 [2] REN, K. et al. Lightweight locking for main memory database systems. PVLDB12 [3] KALLMAN, R., et al. H-store: a high-performance, distributed main mem-ory transaction processing system. PVLDB08</p>
  </div>
  <div class="page">
    <p>Prototype Design</p>
    <p>v Selecting the ideal protocol for each partition v Feature Engineering: design several features to capture the performance difference</p>
    <p>of candidate protocols v Classifiers: building a two-layer classifier</p>
    <p>Classifier-1: PartCC or Not</p>
    <p>Classifier-2: OCC or 2PLPartCC</p>
    <p>OCC 2PL</p>
    <p>Workload</p>
    <p>Partition Conflicts</p>
    <p>Record Contention</p>
    <p>Read Rate</p>
    <p>Transaction Length</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Experiment Settings</p>
    <p>Workload</p>
    <p>v A Machine with 32 cores, 256 GB main memory</p>
    <p>v TPC-C: Order processing application with 5 stored procedures, 32 warehouses</p>
    <p>v YCSB: One Table with 1 million records, each with 25 columns and 20 bytes for each column; One type of transaction mixed with read or read-and-modify</p>
    <p>operations</p>
    <p>v Partition into 32 partitions (i.e. equal to the number of cores)</p>
  </div>
  <div class="page">
    <p>Experiments Our experiments compare CormCC with</p>
    <p>v Single candidate protocols v Hybrid - Hybrid OCC and 2PL execution based on MOCC [1] /Hsync [2] v Tebaldi - A stored procedure-oriented general framework of mixed concurrency control [3]</p>
    <p>SSI</p>
    <p>New Order</p>
    <p>Payment Delivery</p>
    <p>Order Status</p>
    <p>Stock Level</p>
    <p>Runtime Pipeline</p>
    <p>Runtime Pipeline</p>
    <p>Tebaldi Configuration for TPC-C (from Tebaldi paper)</p>
    <p>[1] WANG, T., et al. Mostly-optimistic concurrency control for highly contended dynamic workloads on a thousand cores. PVLDB16</p>
    <p>[2] SHANG, Z., et al. Graph analytics through fine-grained parallelism. SIGMOD16</p>
    <p>[3] SU, C., et al. Bringing modular concurrency control to the next level. SIGMOD 17</p>
  </div>
  <div class="page">
    <p>Experiments  Compare with Tebaldi</p>
    <p>Comparison under different partitionability (TPC-C)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>ill io</p>
    <p>ns /s</p>
    <p>ec )</p>
    <p>Number of partitions that receive 100% cross-partition transactions</p>
    <p>Comparison under different partitionability</p>
    <p>v Start with well-partitionable workload v Each partition receives 100% single</p>
    <p>partition transactions</p>
    <p>v Increase the number of partitions receiving 100% cross-partition transactions</p>
  </div>
  <div class="page">
    <p>Experiments  Compare with Tebaldi</p>
    <p>Comparison under different conflict rates (TPC-C)</p>
    <p>v We modify TPC-C to increase access skewness</p>
    <p>v We use Zipfian distribution and increase its theta parameter to introduce higher conflict rate</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>ill io</p>
    <p>ns /s</p>
    <p>ec )</p>
    <p>Theta of Zipfian Access Distribution</p>
    <p>Comparison under different conflict rates</p>
  </div>
  <div class="page">
    <p>Experiments  Varied workloads v Vary parameters every 5 seconds:</p>
    <p>Transactions mix, Percentages of cross-partition transactions, Access skewness (i.e. theta of Zipf)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>ill io</p>
    <p>ns /s</p>
    <p>ec )</p>
    <p>Time (s)</p>
    <p>Tests over varied workloads (TPC-C) PartCC OCC 2PL Hybrid CormCC</p>
  </div>
  <div class="page">
    <p>Experiments  A closer look at the same results of varied workload tests</p>
    <p>ed up</p>
    <p>o ve</p>
    <p>r S in</p>
    <p>gl e</p>
    <p>Pr ot</p>
    <p>oc ol</p>
    <p>s</p>
    <p>Time (s)</p>
    <p>CormCC throughput ratio to single protocols Max Min Average</p>
    <p>v We aggregate the throughput of every 5s and report CormCC throughput ratio to single protocols v Max: Speedup over the worst single protocols</p>
    <p>v Min: Speedup over the best single protocols</p>
    <p>v Average: Speedup over average throughput of single protocols</p>
  </div>
  <div class="page">
    <p>Experiments  Mediated Protocol Switch</p>
    <p>Short-only Long(0.5s) Long(1 s) Long(2 s) Long(4 s)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>ill io</p>
    <p>ns /s</p>
    <p>ec )</p>
    <p>Testing Mediated Switching OCC 2PL StopALL Mediated</p>
    <p>v Switch from OCC to 2PL using YCSB workloads</p>
    <p>v Report the throughput during protocol switch</p>
    <p>v Compared with StopALL</p>
    <p>v Test a workload with short-only transactions and workloads with one long transaction of different duration v 0.5s, 1s. 2s, 4s</p>
    <p>v Test different switching points v At the beginning of the long transaction</p>
    <p>v At the middle of the long transaction</p>
    <p>v At the end of the long transaction</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>v CormCC, a general mixed concurrency control framework that does not introduce any coordination overhead and supports online reconfiguration</p>
    <p>v Experiments show that CormCC can achieve significant throughput improvement over single static protocols and state-of-the-art mixed approaches.</p>
    <p>Thanks!</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>CormCC Execution in Prototype</p>
    <p>Preprocess Validation CommitExecution</p>
    <p>PartCC</p>
    <p>OCC</p>
    <p>This protocol includes this phase</p>
    <p>This protocol makes transaction wait in this phase</p>
  </div>
  <div class="page">
    <p>Experiments  Varied workloads (YCSB) v Vary parameters every 5 seconds:</p>
    <p>Transactions mix, Percentages of cross-partition transactions, Access skewness (i.e. theta of Zipf)</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>ill io</p>
    <p>ns /s</p>
    <p>ec )</p>
    <p>Time (s)</p>
    <p>Tests over varied workloads (YCSB) PartCC OCC 2PL Hybrid CormCC</p>
  </div>
  <div class="page">
    <p>Experiments  Aggregated Results of Varied workloads (YCSB)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>ill io</p>
    <p>ns /s</p>
    <p>ec )</p>
    <p>Time (s)</p>
    <p>CormCC throughput ratio to single protocols (YCSB)</p>
    <p>Max Min Average</p>
  </div>
</Presentation>
