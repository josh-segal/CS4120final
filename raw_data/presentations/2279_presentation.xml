<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Re-think Data Management Software Design Upon the Arrival of Storage Hardware with Built-in Transparent Compression 07/2020</p>
  </div>
  <div class="page">
    <p>The Rise of Computational Storage</p>
    <p>Domain Specific Compute</p>
    <p>Compute</p>
    <p>FPGA/GPU/TPU</p>
    <p>End of Moores Law</p>
    <p>Networking</p>
    <p>SmartNICs</p>
    <p>Storage</p>
    <p>Computational Storage</p>
    <p>Fast &amp; Big Data Growth</p>
    <p>Homogeneous Computing Heterogenous Computing</p>
  </div>
  <div class="page">
    <p>The Rise of Computational Storage</p>
    <p>CPU &amp; Memory I/O bottlenecks  Limited FPGAs, specific sockets required  Massive data movement  No compute parallelism</p>
    <p>FPGADRAM CPU DRAM</p>
    <p>Controller</p>
    <p>SSD</p>
    <p>Flash</p>
    <p>Controller</p>
    <p>SSD</p>
    <p>Flash</p>
    <p>Controller</p>
    <p>SSD</p>
    <p>Flash</p>
    <p>Controller</p>
    <p>SSD</p>
    <p>Flash</p>
    <p>to Data-Driven</p>
    <p>Balanced compute &amp; storage I/O  Multiple FPGAs, easily plug-in via storage  Minimize data movement  Maximum compute parallelism</p>
    <p>CPUDRAM DRAM</p>
    <p>FPGA</p>
    <p>Flash</p>
    <p>CSD</p>
    <p>FPGA</p>
    <p>Flash</p>
    <p>CSD</p>
    <p>FPGA</p>
    <p>Flash</p>
    <p>CSD</p>
    <p>FPGA</p>
    <p>Flash</p>
    <p>CSD</p>
    <p>CSD: Computational Storage Drive</p>
    <p>from Processor-Driven</p>
  </div>
  <div class="page">
    <p>Computational Storage: A Simple Idea</p>
    <p>q End of Moores Law  heterogeneous computing</p>
    <p>Flash Control</p>
    <p>NAND Flash</p>
    <p>FPGA</p>
    <p>In-line per-4KB zlib compression &amp; decompression</p>
    <p>HW SW</p>
    <p>Driver</p>
    <p>Low-hanging fruits</p>
    <p>FPGA/GPU/TPU SmartNICs</p>
    <p>Computational Storage</p>
    <p>Computational Storage Drive (CSD) with Data Path Transparent Compression</p>
  </div>
  <div class="page">
    <p>ScaleFlux Computational Storage Drive</p>
    <p>Complete, validated solution  Pre-Programmed FPGA  Hardware  Software  Firmware</p>
    <p>No FPGA knowledge or coding  Field upgradeable  Standard U.2 &amp; AIC form factors</p>
    <p>Multiple, discrete components for Compute and SSD Functions</p>
    <p>SSD</p>
    <p>CPU FPGA</p>
    <p>Flash Controller</p>
    <p>FlashFlash</p>
    <p>FPGA</p>
    <p>FC</p>
    <p>FlashFlash</p>
    <p>CSD</p>
    <p>CPU</p>
    <p>Single FPGA combines Compute and SSD Functions</p>
  </div>
  <div class="page">
    <p>CSD 2000: Data Path Compression/Decompression</p>
    <p>% 80</p>
    <p>% 70</p>
    <p>% 60</p>
    <p>% 50</p>
    <p>% 40</p>
    <p>% 30</p>
    <p>% 20</p>
    <p>% 10</p>
    <p>% 0%</p>
    <p>% 80</p>
    <p>% 70</p>
    <p>% 60</p>
    <p>% 50</p>
    <p>% 40</p>
    <p>% 30</p>
    <p>% 20</p>
    <p>% 10</p>
    <p>% 0%</p>
    <p>Increasing Mix R/W Performance Advantage with Larger Block Sizes</p>
    <p>IO PS</p>
    <p>(k )</p>
    <p>Be tt</p>
    <p>er</p>
    <p>FIO: 4K Random R/W IOPS FIO: 16K Random R/W IOPS</p>
    <p>% 80</p>
    <p>% 70</p>
    <p>% 60</p>
    <p>% 50</p>
    <p>% 40</p>
    <p>% 30</p>
    <p>% 20</p>
    <p>% 10</p>
    <p>% 0%</p>
    <p>FIO: 8K Random R/W IOPS</p>
    <p>IO PS</p>
    <p>(k )</p>
    <p>Be tt</p>
    <p>er</p>
    <p>IO PS</p>
    <p>(k )</p>
    <p>Be tt</p>
    <p>er</p>
    <p>CSD 2000</p>
    <p>Vendor-A NVMe</p>
  </div>
  <div class="page">
    <p>Open a Door for System-level Innovations</p>
    <p>Logical storage space utilization efficiency</p>
    <p>Physical storage space utilization efficiency</p>
    <p>OS/Applications can purposely waste logical storage space to gain performance benefits</p>
    <p>Data path compression</p>
    <p>Data 0s</p>
    <p>Transparent compression</p>
    <p>Compressed data</p>
    <p>Unnecessary to completely fill each 4KB sector with user data</p>
    <p>Transparent compression</p>
    <p>NAND Flash (e.g., 4TB)</p>
    <p>Expanded LBA space (e.g., 32TB)</p>
    <p>Unnecessary to use all the LBAs</p>
  </div>
  <div class="page">
    <p>PostgreSQL</p>
    <p>Normalized Performance</p>
    <p>Physical storage usage</p>
    <p>Data</p>
    <p>Fillfactor (FF)</p>
    <p>Reserved for future update FF</p>
    <p>Performance</p>
    <p>Storage space</p>
    <p>Data 0s</p>
    <p>Data path compression</p>
    <p>Compressed data</p>
    <p>Commodity NVMe</p>
    <p>SFX NVMe</p>
    <p>FF=100</p>
    <p>FF=50</p>
  </div>
  <div class="page">
    <p>PostgreSQL (Sysbench-TPCC)</p>
    <p>FF100</p>
    <p>(740GB)</p>
    <p>Vendor-A</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>T PS</p>
    <p>CSD 2000</p>
    <p>FF100</p>
    <p>(178GB)</p>
    <p>FF75</p>
    <p>(905GB)</p>
    <p>FF75</p>
    <p>(189GB) FF100</p>
    <p>(1,433GB)</p>
    <p>FF100</p>
    <p>(342GB)</p>
    <p>FF75</p>
    <p>(1,762GB)</p>
    <p>FF75</p>
    <p>(365GB)</p>
    <p>Vendor-A CSD 2000</p>
    <p>Fillfactor Drive Logical size</p>
    <p>(GB) Physical size</p>
    <p>(GB) Comp Ratio</p>
    <p>CSD 2000 178 4.12</p>
    <p>CSD 2000 189 4.75</p>
    <p>Fillfactor Drive Logical size</p>
    <p>(GB) Physical size</p>
    <p>(GB) Comp Ratio</p>
    <p>CSD 2000 342 4.19</p>
    <p>CSD 2000 365 4.82 N</p>
    <p>or m</p>
    <p>al iz</p>
    <p>ed T</p>
    <p>PS</p>
  </div>
  <div class="page">
    <p>Table-less Hash-based Key-Value Store Key space K</p>
    <p>. . .</p>
    <p>Hash function fKL</p>
    <p>. . . 4KB</p>
    <p>Key space K</p>
    <p>. . .</p>
    <p>Hash table</p>
    <p>. . .</p>
    <p>. . . 4KB</p>
    <p>LBA space L LBA space L</p>
    <p>KV pairs are tightly packed in L</p>
    <p>KV pairs are loosely packed in L</p>
    <p>Hash function fK T</p>
    <p>Unoccupied space</p>
    <p>KV store purposely under-utilizes logical storage space to eliminate hash table without sacrificing physical storage utilization</p>
  </div>
  <div class="page">
    <p>Table-less Hash-based Key-Value Store  Simple code base &amp; high operational concurrency</p>
    <p>Very small memory footprint</p>
    <p>Absence of frequent background operations (e.g., GC and compaction)  low and consistent CPU usage</p>
    <p>Key space K</p>
    <p>. . .</p>
    <p>Hash function fKL</p>
    <p>. . . 4KB</p>
    <p>LBA space L</p>
    <p>KV pairs are loosely packed in LUnoccupied</p>
    <p>space</p>
    <p>We will open source and are looking for collaborations to together grow the community!</p>
    <p>Compared with RocksDB</p>
    <p>&gt;2x ops/s improvement</p>
    <p>&gt;2x less average CPU usage</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>www.scaleflux.com tong.zhang@scaleflux.com</p>
    <p>Logical storage space utilization efficiency</p>
    <p>Physical storage space utilization efficiency</p>
    <p>Transparent compression</p>
    <p>Unique opportunities to re-think the data management software design</p>
  </div>
</Presentation>
