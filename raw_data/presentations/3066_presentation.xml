<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LegoOS A Disseminated Distributed OS</p>
    <p>for Hardware Resource Disaggregation</p>
    <p>Yizhou Shan, Yutong Huang, Yilun Chen, and Yiying Zhang</p>
    <p>1</p>
    <p>Y4</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Monolithic Server</p>
    <p>3</p>
    <p>OS / Hypervisor</p>
  </div>
  <div class="page">
    <p>Problems?</p>
    <p>4</p>
  </div>
  <div class="page">
    <p>5</p>
    <p>TPU</p>
    <p>NVM</p>
    <p>FPGA</p>
    <p>Heterogeneity</p>
    <p>Elasticity</p>
    <p>Resource Utilization</p>
    <p>Server 1 Server 2 Job 1Job 2</p>
    <p>cpu mem</p>
    <p>Available Space Required Space</p>
    <p>Fault Tolerance</p>
    <p>No extra PCIe slots</p>
    <p>Hard to add, remove, or reconfigure devices in a servers after deployment</p>
  </div>
  <div class="page">
    <p>How to improve resource utilization, elasticity, heterogeneity, and fault tolerance?</p>
    <p>Go beyond physical server boundary!</p>
    <p>6</p>
  </div>
  <div class="page">
    <p>7</p>
    <p>Hardware Resource Disaggregation:</p>
    <p>Breaking monolithic servers into network-attached, independent</p>
    <p>hardware components</p>
  </div>
  <div class="page">
    <p>8</p>
  </div>
  <div class="page">
    <p>Elasticity Heterogeneity</p>
    <p>Resource Utilization</p>
    <p>Fault Tolerance</p>
    <p>9</p>
    <p>Network</p>
    <p>Hardware</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Why Possible Now?</p>
    <p>Network is faster</p>
    <p>InfiniBand (200Gbps, 600ns)</p>
    <p>Optical Fabric (400Gbps, 100ns)</p>
    <p>More processing power at device</p>
    <p>SmartNIC, SmartSSD, PIM</p>
    <p>Network interface closer to device</p>
    <p>Omni-Path, Innova-2 10</p>
    <p>Intel Rack-Scale System</p>
    <p>Berkeley Firebox</p>
    <p>IBM Composable System</p>
    <p>HP The Machine</p>
    <p>dReDBox</p>
  </div>
  <div class="page">
    <p>Outline  Hardware Resource Disaggregation</p>
    <p>Kernel Architectures for Resource Disaggregation</p>
    <p>LegoOS Design and Implementation</p>
    <p>Abstraction</p>
    <p>Design Principles</p>
    <p>Implementation and Emulation</p>
    <p>Conclusion 11</p>
  </div>
  <div class="page">
    <p>12</p>
  </div>
  <div class="page">
    <p>Can Existing Kernels Fit?</p>
    <p>13</p>
    <p>Core</p>
    <p>Kernel</p>
    <p>GPU</p>
    <p>Kernel</p>
    <p>P-NIC</p>
    <p>Kernel</p>
    <p>Shared Main Memory</p>
    <p>msg passing over local bus</p>
    <p>Monolithic Server</p>
    <p>Monolithic/Micro-kernel (e.g., Linux, L4)</p>
    <p>Multikernel (e.g., Barrelfish, Helios, fos)</p>
    <p>mem</p>
    <p>Disk</p>
    <p>NIC</p>
    <p>CPU</p>
    <p>monolithic kernel</p>
    <p>network across servers</p>
    <p>Server</p>
    <p>mem</p>
    <p>Disk</p>
    <p>NIC</p>
    <p>CPU</p>
    <p>microkernel</p>
    <p>Server</p>
    <p>Disk NIC</p>
  </div>
  <div class="page">
    <p>Access remote resources</p>
    <p>Distributed resource mgmt</p>
    <p>Fine-grained failure handling</p>
    <p>Existing Kernels Dont Fit</p>
    <p>14</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>15</p>
    <p>The OS should be also</p>
    <p>When hardware is disaggregated</p>
  </div>
  <div class="page">
    <p>16</p>
    <p>OS Process</p>
    <p>Mgmt</p>
    <p>Virtual Memory System</p>
    <p>File &amp; Storage System Network</p>
  </div>
  <div class="page">
    <p>17</p>
    <p>Process Mgmt</p>
    <p>Virtual Memory System</p>
    <p>File &amp; Storage System</p>
    <p>Network</p>
    <p>File &amp; Storage System</p>
    <p>Network</p>
    <p>Network</p>
    <p>Network</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>Processor (CPU)</p>
    <p>Memory</p>
    <p>The Splitkernel Architecture</p>
    <p>18</p>
    <p>Split OS functions into monitors</p>
    <p>Run each monitor at h/w device</p>
    <p>Network messaging across non-coherent components</p>
    <p>Distributed resource mgmt and failure handling</p>
    <p>Memory Monitor</p>
    <p>Process Monitor</p>
    <p>network messaging across non-coherent components</p>
    <p>GPU Minitor</p>
    <p>Processor (GPU)</p>
    <p>Hard Disk</p>
    <p>NVM Monitor</p>
    <p>NVM</p>
    <p>SSD Monitor</p>
    <p>SSD</p>
    <p>HDD Monitor</p>
    <p>XPU Manager New h/w</p>
    <p>(XPU)</p>
  </div>
  <div class="page">
    <p>LegoOS The First Disaggregated OS</p>
    <p>19</p>
    <p>Processor</p>
    <p>Storage Memory</p>
    <p>NVM</p>
  </div>
  <div class="page">
    <p>Outline  Hardware Resource Disaggregation</p>
    <p>Kernel Architectures for Resource Disaggregation</p>
    <p>LegoOS Design and Implementation</p>
    <p>Abstraction</p>
    <p>Design Principles</p>
    <p>Implementation and Emulation</p>
    <p>Conclusion 20</p>
  </div>
  <div class="page">
    <p>How Should LegoOS Appear to Users?</p>
    <p>Our answer: as a set of virtual Nodes (vNodes)</p>
    <p>- Similar semantics to virtual machines</p>
    <p>- Unique vID, vIP, storage mount point</p>
    <p>- Can run on multiple processor, memory, and storage components</p>
    <p>21</p>
    <p>As a giant machine? As a set of hardware devices?</p>
  </div>
  <div class="page">
    <p>Abstraction - vNode</p>
    <p>22</p>
    <p>One vNode can run multiple hardware components One hardware component can run multiple vNodes</p>
    <p>Processor (CPU)</p>
    <p>GPU Minitor</p>
    <p>Processor (GPU)</p>
    <p>Memory Hard Disk</p>
    <p>network messaging across non-coherent components</p>
    <p>NVM Monitor</p>
    <p>NVM</p>
    <p>SSD Monitor</p>
    <p>SSD</p>
    <p>HDD Monitor</p>
    <p>Memory Monitor</p>
    <p>Process Monitor</p>
    <p>XPU Manager</p>
    <p>New h/w (XPU)</p>
    <p>vNode2</p>
    <p>vNode1</p>
  </div>
  <div class="page">
    <p>Abstraction</p>
    <p>Appear as vNodes to users</p>
    <p>Linux ABI compatible</p>
    <p>Support unmodified Linux system call interface (common ones)</p>
    <p>A level of indirection to translate Linux interface to LegoOS interface</p>
    <p>23</p>
  </div>
  <div class="page">
    <p>LegoOS Design</p>
    <p>24</p>
  </div>
  <div class="page">
    <p>Separate Processor and Memory</p>
    <p>25</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache</p>
    <p>DRAM</p>
    <p>TLB</p>
    <p>MMU</p>
    <p>PT</p>
  </div>
  <div class="page">
    <p>Separate Processor and Memory</p>
    <p>26</p>
    <p>N et</p>
    <p>w or</p>
    <p>k</p>
    <p>DRAM</p>
    <p>Memory</p>
    <p>Disaggregating DRAM</p>
    <p>Memory</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache TLB</p>
    <p>MMU PT</p>
  </div>
  <div class="page">
    <p>Separate Processor and Memory</p>
    <p>27</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache N</p>
    <p>et w</p>
    <p>or k</p>
    <p>DRAM</p>
    <p>TLB MMU</p>
    <p>Memory</p>
    <p>Separate and move hardware units</p>
    <p>to memory component</p>
    <p>Memory PT</p>
  </div>
  <div class="page">
    <p>Separate Processor and Memory</p>
    <p>28</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache N</p>
    <p>et w</p>
    <p>or k</p>
    <p>DRAM</p>
    <p>TLB MMU</p>
    <p>Memory</p>
    <p>Memory PT</p>
    <p>Virtual Memory System</p>
  </div>
  <div class="page">
    <p>Separate Processor and Memory</p>
    <p>29</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache N</p>
    <p>et w</p>
    <p>or k</p>
    <p>DRAM</p>
    <p>TLB MMU</p>
    <p>Memory</p>
    <p>Separate and move virtual memory system to memory component</p>
    <p>Memory PT</p>
    <p>Virtual Memory System</p>
  </div>
  <div class="page">
    <p>Separate Processor and Memory</p>
    <p>30</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache N</p>
    <p>et w</p>
    <p>or k</p>
    <p>DRAM</p>
    <p>TLB MMU</p>
    <p>Memory</p>
    <p>Memory PT</p>
    <p>Virtual Memory System</p>
    <p>Processor components only see virtual memory addresses</p>
    <p>Memory components manage virtual and physical memory</p>
    <p>Virtual Address</p>
    <p>Virtual Address</p>
    <p>Virtual Address</p>
    <p>Virtual Address</p>
    <p>All levels of cache are virtual cache</p>
  </div>
  <div class="page">
    <p>Challenge: Remote Memory Accesses</p>
    <p>Network is still slower than local memory bus</p>
    <p>Bandwidth: 2x - 4x slower, improving fast</p>
    <p>Latency: ~12x slower, and improving slowly</p>
    <p>31</p>
  </div>
  <div class="page">
    <p>Add Extended Cache at Processor</p>
    <p>32</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache N</p>
    <p>et w</p>
    <p>or k</p>
    <p>DRAM</p>
    <p>TLB MMU</p>
    <p>Memory</p>
    <p>Memory PT</p>
    <p>Virtual Memory System</p>
  </div>
  <div class="page">
    <p>Add Extended Cache at Processor</p>
    <p>33</p>
    <p>Processor</p>
    <p>CPU CPU$ $</p>
    <p>Last-Level Cache</p>
    <p>N et</p>
    <p>w or</p>
    <p>k</p>
    <p>DRAM</p>
    <p>TLB MMU</p>
    <p>Memory</p>
    <p>Memory PT</p>
    <p>Virtual Memory System</p>
    <p>DRAM ExCache</p>
    <p>Add small DRAM/HBM at processor</p>
    <p>Use it as Extended Cache, or ExCache</p>
    <p>Software and hardware co-managed</p>
    <p>Inclusive</p>
    <p>Virtual cache</p>
  </div>
  <div class="page">
    <p>LegoOS Design</p>
    <p>34</p>
  </div>
  <div class="page">
    <p>Distributed Resource Management</p>
    <p>35</p>
    <p>Global Process Manager (GPM)</p>
    <p>Global Memory Manager (GMM)</p>
    <p>Global Storage Manager (GSM)</p>
    <p>Processor (CPU)</p>
    <p>GPU Minitor</p>
    <p>Processor (GPU)</p>
    <p>Memory Hard Disk</p>
    <p>network messaging across non-coherent components</p>
    <p>NVM Monitor</p>
    <p>NVM</p>
    <p>SSD Monitor</p>
    <p>SSD</p>
    <p>HDD Monitor</p>
    <p>Memory Monitor</p>
    <p>Process Monitor Global</p>
    <p>Resource Mgmt</p>
    <p>Memory</p>
    <p>Memory Monitor</p>
  </div>
  <div class="page">
    <p>Memory (M2) 36</p>
    <p>Distributed Memory Management</p>
    <p>Processor</p>
    <p>vRegion 1 vRegion 2 vRegion 3</p>
    <p>Memory (M1)</p>
    <p>User Virtual Address Space</p>
    <p>fix-sized, coarse-grain virtual region (vRegion) (e.g., 1GB)</p>
    <p>GMM assigns vRegions to mem components</p>
    <p>- On virtual mem alloc syscalls (e.g., mmap)</p>
    <p>- Make decisions based on global loads</p>
    <p>Owner of a vRegion</p>
    <p>- Fine-grained virtual memory allocation</p>
    <p>- On-demand physical memory allocation</p>
    <p>- Handle memory accesses</p>
    <p>(Physical Memory) (Physical Memory)</p>
    <p>Used Used</p>
    <p>vRegion 1 vRegion 2</p>
    <p>mmap 1.5GB write 1GB</p>
    <p>GMM</p>
    <p>UsedUsed</p>
  </div>
  <div class="page">
    <p>Implementation and Emulation</p>
    <p>DRAM</p>
    <p>Status</p>
    <p>206K SLOC, runs on x86-64, 113 common Linux syscalls</p>
    <p>Processor</p>
    <p>Reserve DRAM as ExCache (4KB page as cache line)</p>
    <p>h/w only on hit path, s/w managed miss path</p>
    <p>Memory</p>
    <p>Limit number of cores, kernel-space only</p>
    <p>Storage/Global Resource Monitors</p>
    <p>Implemented as kernel modules on Linux</p>
    <p>Network</p>
    <p>RDMA RPC stack based on LITE [SOSP17] 37</p>
    <p>CPU</p>
    <p>LLC</p>
    <p>ExCache</p>
    <p>CPU Processor</p>
    <p>Disk</p>
    <p>Memory Storage</p>
    <p>DRAM LLC Disk</p>
    <p>DRAM</p>
    <p>CPU</p>
    <p>LLC Disk</p>
    <p>Process Monitor</p>
    <p>Memory Monitor Linux Kernel Module</p>
    <p>CPU CPU</p>
    <p>CPU CPU CPU CPU</p>
    <p>RDMA Network</p>
  </div>
  <div class="page">
    <p>Performance Evaluation  Unmodified TensorFlow, running CIFAR-10</p>
    <p>Working set: 0.9G</p>
    <p>4 threads</p>
    <p>Systems in comparison</p>
    <p>Baseline: Linux with unlimited memory</p>
    <p>Swap to SSD, and ramdisk</p>
    <p>InfiniSwap [NSDI17] 38</p>
    <p>ExCache/Memory Size (MB) 128 256 512</p>
    <p>S l o w d o w n</p>
    <p>Linuxswapramdisk InfiniSwap</p>
    <p>LegoOS</p>
    <p>LegoOS Config: 1P, 1M, 1S</p>
    <p>Only 1.3x to 1.7x slowdown when disaggregating devices with LegoOS To gain better resource packing, elasticity, and fault tolerance!</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Hardware resource disaggregation is promising for future datacenters</p>
    <p>The splitkernel architecture and LegoOS demonstrate the feasibility of resource disaggregation</p>
    <p>Great potentials, but many unsolved challenges!</p>
    <p>39</p>
  </div>
  <div class="page">
    <p>Thank you! Questions?</p>
    <p>LegoOS.io Open source @</p>
    <p>.io Poster Tonight. Number 11.</p>
  </div>
</Presentation>
