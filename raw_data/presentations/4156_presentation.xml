<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BotGraph: Large Scale Spamming Botnet Detec5on</p>
    <p>Yao Zhao Yinglian Xie*, Fang Yu*, Qifa Ke*, Yuan Yu*, Yan Chen and Eliot</p>
    <p>Gillum</p>
    <p>EECS Department, Northwestern University MicrosoK Research Silicon Valley*</p>
    <p>MicrosoK Coopera5on</p>
  </div>
  <div class="page">
    <p>WebAccount Abuse ARack Zombie</p>
    <p>(Compromised host)</p>
    <p>Spammers Server</p>
    <p>Captcha solver</p>
    <p>RDSXXTD3</p>
    <p>User/Pwd</p>
  </div>
  <div class="page">
    <p>Problems and Challenges</p>
    <p>Detect Webaccount Abuse with Hotmail Logs  Input: user ac5vity traces (signup, login, emailsending records)  Goal: stop aggressive account signup, limit outgoing spam</p>
    <p>Algorithmic challenge:  ARack is stealthy: individual account detec5on difficult  ARack is large scale: finding correlated ac5vi5es  Low false posi5ve and false nega5ve rate</p>
    <p>Engineering challenge:  Large user popula5on: &gt;500 million accounts  Large data volume: 300GB400GB data per month</p>
  </div>
  <div class="page">
    <p>The BotGraph System</p>
    <p>A graphbased approach to a@ack detecBon  A large useruser graph to capture botaccount correla5ons  Iden5fy 26M botaccounts with a low false posi5ve rate in two</p>
    <p>months</p>
    <p>Efficient implementaBon using Dryad/DryadLINQ  Graph construc5on/analysis is not easily parallelizable  hundreds of millions of nodes, hundreds of billions of edges  Process 200GB300GB data in 1.5 hours with a 240machine</p>
    <p>cluster</p>
    <p>The first to provide a systemaBc soluBon to the new a@ack</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>Login data</p>
    <p>Login graph</p>
    <p>Graph generation</p>
    <p>Random graph based clustering</p>
    <p>Verification &amp; prune</p>
    <p>Sendmail data</p>
    <p>Spamming botnets</p>
    <p>Suspicious clusters</p>
    <p>Signup data</p>
    <p>EWMA based change detection Aggressive</p>
    <p>signups</p>
    <p>Verification &amp; prune</p>
    <p>Signup botnets</p>
    <p>(ID, IP, time)</p>
    <p>(ID, time, # of recipients)</p>
    <p>(ID, IP, time)</p>
  </div>
  <div class="page">
    <p>Detect Aggressive Signups Large</p>
    <p>predic5on error</p>
    <p>Back to normal</p>
    <p>Date</p>
    <p>N um</p>
    <p>be r</p>
    <p>of S</p>
    <p>ig nu</p>
    <p>p A</p>
    <p>cc ou</p>
    <p>nt s</p>
    <p>Signup Count</p>
    <p>EWMA Prediction</p>
    <p>Simple and efficient  Detect 20 million malicious accounts in 2 months</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>Login data</p>
    <p>Login graph</p>
    <p>Graph generation</p>
    <p>Random graph based clustering</p>
    <p>Verification &amp; prune</p>
    <p>Sendmail data</p>
    <p>Spamming botnets</p>
    <p>Suspicious clusters</p>
    <p>Signup data</p>
    <p>EWMA based change detection Aggressive</p>
    <p>signups</p>
    <p>Verification &amp; prune</p>
    <p>Signup botnets</p>
    <p>(ID, IP, time)</p>
    <p>(ID, time, # of recipients)</p>
    <p>(ID, IP, time)</p>
  </div>
  <div class="page">
    <p>Observa5on: botaccounts work collabora5vely</p>
    <p>Normal Users  Share IP addresses in one AS with DHCP assignment</p>
    <p>Botusers</p>
    <p>Detect Stealthy Accounts by Graphs</p>
    <p>A useruser graph to model behavior similariBes</p>
  </div>
  <div class="page">
    <p>Observa5on: botaccounts work collabora5vely</p>
    <p>Normal Users  Share IP addresses in one AS with DHCP assignment</p>
    <p>Botusers  Likely to share different IPs across ASes</p>
    <p>Detect Stealthy Accounts by Graphs</p>
    <p>A useruser graph to model behavior similariBes</p>
  </div>
  <div class="page">
    <p>Useruser Graph</p>
    <p>Node: Hotmail account  Edge weight: # of ASes of the shared</p>
    <p>IP addresses  Consider edges with weight&gt;1</p>
    <p>Key Observa5ons  Botusers form a giant connectedcomponent while normal users do not</p>
    <p>Interpreted by the random graph theory</p>
    <p>User1</p>
    <p>User2</p>
    <p>User3</p>
    <p>User4</p>
    <p>User5</p>
    <p>User6</p>
  </div>
  <div class="page">
    <p>Random Graph Theory</p>
    <p>Random Graph G(n,p)  n nodes and each pair of nodes has an edge with probability p and average degree d = (n1)  p</p>
    <p>Theorem  If d &lt; 1, then with high probability the largest component in the graph has size less than O(log n)</p>
    <p>No large connected subgraph  If d &gt; 1, with high probability the graph will contain a giant component with size at the order of O(n)</p>
    <p>Most nodes are in one connected subgraph</p>
  </div>
  <div class="page">
    <p>Graphbased Botuser Detec5on</p>
    <p>Step 1: detect giant connectedcomponents from the useruser graph</p>
    <p>Step 2: hierarchical algorithm to iden5fy the correct groupings  Different botuser groups may be mixed  Difficult to choose a fixed edgethreshold  Easier valida5on with correct group sta5s5cs</p>
    <p>Step 3: prune normaluser groups  Due to na5onal proxies, cell phone users, facebook applica5ons,</p>
    <p>etc.</p>
  </div>
  <div class="page">
    <p>Hierarchical BotGroup Extrac5on</p>
    <p>G</p>
    <p>A B</p>
    <p>T=2</p>
    <p>C D</p>
    <p>E</p>
    <p>T=3</p>
    <p>T=4</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>Login data</p>
    <p>Login graph</p>
    <p>Graph generation</p>
    <p>Random graph based clustering</p>
    <p>Verification &amp; prune</p>
    <p>Sendmail data</p>
    <p>Spamming botnets</p>
    <p>Suspicious clusters</p>
    <p>Signup data</p>
    <p>EWMA based change detection Aggressive</p>
    <p>signups</p>
    <p>Verification &amp; prune</p>
    <p>Signup botnets</p>
    <p>(ID, IP, time)</p>
    <p>(ID, time, # of recipients)</p>
    <p>(ID, IP, time)</p>
  </div>
  <div class="page">
    <p>Parallel Implementa5on on DryadLINQ</p>
    <p>EWMAbased Signup Abuse Detec5on  Par55on data by IP  Can achieve realBme detecBon</p>
    <p>UserUser Graph Construc5on  Two algorithms and op5miza5ons  Process 200GB300GB data in 1.5 hours with 240 machines</p>
    <p>Connected Component Extrac5on  Divide and conquer  Process a graph of 8.6 billion edges in 7 minutes</p>
  </div>
  <div class="page">
    <p>Graph Construc5on 1: Simple Data Parallelism</p>
    <p>Poten5al Edges  Select ID group by IP (Map)  Generate poten5al edges (IDi, IDj, IPk) (Reduce)</p>
    <p>Edge Weights  Select IP group by ID pair (Map)  Calculate edge weight (Reduce)</p>
    <p>Problem  Weight 1 edge is two orders of magnitude more than others</p>
    <p>Their computaBon/communicaBon is unnecessary</p>
  </div>
  <div class="page">
    <p>Graph Construc5on 2: Selec5ve Filtering</p>
  </div>
  <div class="page">
    <p>Comparison of Two Algorithms</p>
    <p>Method 1  Simple and scalable</p>
    <p>Method 2  Op5mized to filter out weight 1 edges  U5lize Join func5onality, data compression and broadcast op5miza5on</p>
  </div>
  <div class="page">
    <p>Detec5on Results</p>
    <p>Data descrip5on  Two datasets</p>
    <p>Jun 2007 and Jan 2008  Three types of data</p>
    <p>Signup log (IP, ID, Time)  Login log (IP, ID, Time)</p>
    <p>500M users and 200~300GB data per month  Sendmail log (ID, 5me, # of recipients)</p>
  </div>
  <div class="page">
    <p>Detec5on of Signup Abuse</p>
  </div>
  <div class="page">
    <p>Detec5on by Useruser Graph</p>
  </div>
  <div class="page">
    <p>Valida5ons  Manual Check</p>
    <p>Sampled groups verified by the Hotmail team  Almost no false posi5ves</p>
    <p>Comparison with Known Spamming Users  Detect 86% of complained accounts  Up to 54% of detected accounts are our new findings</p>
    <p>Email Sending Sizes per Group  Most groups have a sharp peak  The remaining contain several peaks</p>
    <p>False Posi5ve Es5ma5on  Naming paRern (0.44%)  Signup 5me (0.13%)</p>
  </div>
  <div class="page">
    <p>Possible to Evade BotGraph?</p>
    <p>Evade signup detec5on: Be stealthy  Evade graphbased detec5on</p>
    <p>Fixed IP/AS binding  Low u5liza5on rate  Botaccounts bound to one host are easy to be grouped</p>
    <p>Be stealthy (sending as few emails as normal user)</p>
    <p>Severely limit a@ackers spam throughput</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A graphbased approach to a@ack detecBon  Iden5fy 26M botaccounts with a low false posi5ve rate in two months</p>
    <p>Efficient implementaBon using Dryad/DryadLINQ  Process 200GB300GB data in 1.5 hours with a 240 machine cluster</p>
    <p>Largescale datamining for network security is effecBve and pracBcal</p>
  </div>
  <div class="page">
    <p>Q &amp; A?</p>
    <p>Thanks!</p>
  </div>
  <div class="page"/>
</Presentation>
