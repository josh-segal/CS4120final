<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ERIM: Secure, Efficient in-process Isolation with Memory Protection Keys</p>
    <p>Anjo Vahldiek-Oberwagner, Eslam Elnikety, Nuno O. Duarte, Michael Sammler, Peter Druschel, Deepak Garg</p>
  </div>
  <div class="page">
    <p>Applications in the Absence of Isolation</p>
    <p>All state accessible at all times to  Bugs  Security vulnerabilities</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Applications in the Absence of Isolation</p>
    <p>Heartbleed Bug ~70% of CVE assigned by Microsoft are memory safety issues.</p>
    <p>Microsoft Security Response Center: A proactive approach to more secure code, 2019</p>
  </div>
  <div class="page">
    <p>Managed runtimes from native librariesCryptographic Secrets</p>
    <p>Example In-Process Isolation Use Cases</p>
    <p>Untrusted Application</p>
    <p>Trusted Crypto Library</p>
    <p>Managed Runtime</p>
    <p>Native Library</p>
  </div>
  <div class="page">
    <p>User-space Threat Model</p>
    <p>Attackers Capabilities include, but not limited to  Control-flow hijacks  Memory corruption (i.e., out-of-bounds accesses)</p>
    <p>Out of scope:  Side-channel, row hammer or microarchitectural attacks</p>
    <p>Untrusted Application</p>
    <p>Operating System</p>
    <p>CPU</p>
    <p>Trusted</p>
    <p>UntrustedTrusted Compartment</p>
  </div>
  <div class="page">
    <p>State of In-Application Isolation Techniques</p>
    <p>Execution overhead Switch overheadUntrusted Trusted</p>
    <p>OS/VMM -based2 Low Low Medium</p>
    <p>Lang. &amp; RT3</p>
    <p>Medium  High</p>
    <p>None None</p>
    <p>ERIM Low None Low</p>
    <p>OS + VMM</p>
    <p>Sensitive Data</p>
    <p>Application Application</p>
    <p>OS/VMM Technique</p>
  </div>
  <div class="page">
    <p>State of In-Application Isolation Techniques</p>
    <p>Execution overhead Switch overheadUntrusted Trusted</p>
    <p>OS/VMMbased2</p>
    <p>Low Low Medium</p>
    <p>Lang. &amp; RT3</p>
    <p>Medium  High None None</p>
    <p>ERIM Low None Low</p>
    <p>Language and Runtime Techniques</p>
    <p>Application</p>
    <p>Sensitive Data</p>
    <p>Operating System</p>
  </div>
  <div class="page">
    <p>Sensitive data</p>
    <p>ERIM</p>
    <p>State of In-Application Isolation Techniques</p>
    <p>Execution overhead Switch overheadUntrusted Trusted</p>
    <p>OS/VMMbased2</p>
    <p>Low Low Medium</p>
    <p>Lang. &amp; RT3</p>
    <p>Medium  High</p>
    <p>None None</p>
    <p>ERIM Low None Low</p>
    <p>ERIM</p>
    <p>Application</p>
    <p>Operating System</p>
  </div>
  <div class="page">
    <p>Memory Protection Keys (MPK)</p>
    <p>Address Space</p>
    <p>Page 1</p>
    <p>Page 2</p>
    <p>Page 3  Available in Skylake server CPUs  Tag memory pages with PKEY</p>
    <p>Page Table Entry (PTE) PKEY 0 Page 1</p>
  </div>
  <div class="page">
    <p>Address Space</p>
    <p>Intel Memory Protection Keys (MPK)</p>
    <p>Page Table Entry (PTE)</p>
    <p>Page 1</p>
    <p>Page 2</p>
    <p>Page 3</p>
    <p>Page 1PKEY 2</p>
    <p>Available in Skylake server CPUs  Tag memory pages with PKEY</p>
  </div>
  <div class="page">
    <p>Address Space</p>
    <p>Intel Memory Protection Keys (MPK)</p>
    <p>CPU Core</p>
    <p>PKRU Register</p>
    <p>Page 1</p>
    <p>Page 2</p>
    <p>Page 3  Available in Skylake server CPUs  Tag memory pages with PKEY  Permission Register (PKRU)</p>
    <p>Page Table Entry (PTE)</p>
    <p>Page 1 PKEY</p>
  </div>
  <div class="page">
    <p>Address Space</p>
    <p>Intel Memory Protection Keys (MPK)</p>
    <p>CPU Core</p>
    <p>PKRU Register</p>
    <p>Page 1</p>
    <p>Page 2</p>
    <p>Page 3  Available in Skylake server CPUs  Tag memory pages with PKEY  Permission Register (PKRU)  Userspace instruction to update PKRU</p>
    <p>Fast switch between 11  260 cycles/switch</p>
    <p>Page Table Entry (PTE)</p>
    <p>Page 1 PKEY</p>
  </div>
  <div class="page">
    <p>Address Space</p>
    <p>Intel Memory Protection Keys (MPK)</p>
    <p>CPU Core</p>
    <p>PKRU Register</p>
    <p>Page 1</p>
    <p>Page 2</p>
    <p>Page 3  Available in Skylake server CPUs  Tag memory pages with PKEY  Permission Register (PKRU)  Userspace instruction to update PKRU</p>
    <p>Fast switch at 50 cycles/switch</p>
    <p>By itself, MPK does not protect</p>
    <p>against malicious attacks.</p>
    <p>Page Table Entry (PTE)</p>
    <p>Page 1 PKEY</p>
  </div>
  <div class="page">
    <p>Untrusted Application PKEY 0</p>
    <p>Code:</p>
    <p>Overview of ERIM</p>
    <p>Trusted Compartment PKEY 1</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates</p>
  </div>
  <div class="page">
    <p>Untrusted Application PKEY 0</p>
    <p>Code: 48 83 c0 08 44 01 fa 83 fa 07 77 83 ff 07 0f 96 c2 80</p>
    <p>Overview of ERIM</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates</p>
    <p>Trusted Compartment PKEY 1</p>
  </div>
  <div class="page">
    <p>Untrusted Application PKEY 0</p>
    <p>Code: 48 83 c0 08 44 01 fa 83 fa 07 77 83 ff 07 0f 96 c2 80</p>
    <p>Overview of ERIM</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates  Creating usable binaries</p>
    <p>Inadvertent PKRU update instruction  Rewrite strategy</p>
    <p>Trusted Compartment PKEY 1</p>
  </div>
  <div class="page">
    <p>Untrusted Application</p>
    <p>PKEY 0</p>
    <p>Code: 48 83 c0 08 44 01 fa 83 fa 07 77 83 ff 07 0f 96 c2 80</p>
    <p>Overview of ERIM</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates</p>
    <p>Creating usable binaries  Inadvertent PKRU update instruction  Rewrite strategy</p>
    <p>Evaluation  Frequently-switching use cases  10% higher throughput compared to</p>
    <p>best existing technique</p>
    <p>Trusted Compartment</p>
    <p>PKEY 1</p>
  </div>
  <div class="page">
    <p>Updating the permission in PKRU register</p>
    <p>WRPKRU  Write EAX into PKRU</p>
    <p>XRSTOR  If bit 9 of EAX is set  Load PKRU register from specified memory address</p>
  </div>
  <div class="page">
    <p>Safe switching using call gates</p>
    <p>Trusted Compartment</p>
    <p>Untrusted Application</p>
    <p>perm = TRUSTED WRPKRU (perm) goto trusted_entry(T)</p>
    <p>perm = UNTRUSTED WRPKRU (perm)</p>
    <p>perm = TRUSTED</p>
  </div>
  <div class="page">
    <p>Safe switching using call gates</p>
    <p>Trusted Compartment</p>
    <p>Untrusted Application</p>
    <p>perm = TRUSTED WRPKRU (perm) goto trusted_entry(T)</p>
    <p>perm = UNTRUSTED WRPKRU (perm) if (perm != UNTRUSTED)</p>
    <p>exit;</p>
  </div>
  <div class="page">
    <p>Prevent execution of WRPKRU/XRSTOR outside of call gates</p>
    <p>Trusted Compartment</p>
    <p>Untrusted Application</p>
    <p>Operating System</p>
    <p>Prevent execution of unvetted pages by</p>
    <p>if(eax | 0x100) exit();</p>
    <p>New Memory (No Execute)</p>
    <p>ERIM</p>
    <p>System Calls</p>
  </div>
  <div class="page">
    <p>Untrusted Application PKEY 0</p>
    <p>Trusted Compartment PKEY 1</p>
    <p>Code: 48 83 c0 08 44 01 fa 83 fa 07 77 83 ff 07 0f 96 c2 80</p>
    <p>Overview of ERIM</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates</p>
    <p>Creating usable binaries  Inadvertent PKRU update instruction  Rewrite strategy</p>
    <p>Evaluation  Frequently-switching use cases  10% higher throughput compared to</p>
    <p>best existing technique</p>
  </div>
  <div class="page">
    <p>Creating usable binaries</p>
    <p>ERIM halts executables with inadvertent WRPKRUs/XRSTORs</p>
    <p>Eliminate inadvertent WRPKRU/XRSTOR by binary rewriting at compile time, runtime prior to enabling execute permission, or via static binary rewriting for pre-compiled binaries</p>
    <p>Instruction 1 Instruction 2</p>
    <p>0F 01EF 010F01EF0000</p>
    <p>Inter-Instruction WRPKRU Intra-Instruction WRPKRU Instruction 1</p>
  </div>
  <div class="page">
    <p>Rewriting inadvertent WRPKRUs/XRSTORs</p>
    <p>Devise rewrite rules for inadvertent WRPKRUs Inter-Instruction:</p>
    <p>0F 01EF</p>
    <p>Instruction 1 Instruction 2</p>
    <p>0F 01EF</p>
    <p>Nop</p>
  </div>
  <div class="page">
    <p>Rewriting inadvertent WRPKRUs/XRSTORs</p>
    <p>Devise rewrite rules for inadvertent WRPKRUs</p>
    <p>Intra-instruction WRPKRU Simplified x86 instruction format:</p>
    <p>Prefix Opcode Mod R/M SIB Displacement Immediate</p>
    <p>Optional Required</p>
  </div>
  <div class="page">
    <p>Displacement</p>
    <p>Displacement</p>
    <p>Rewriting inadvertent WRPKRUs/XRSTORs</p>
    <p>Devise rewrite rules for inadvertent WRPKRUs Example rewrite rule:</p>
    <p>add ecx, [ebx + 0x01EF0000]</p>
    <p>push eax; mov eax, ebx; add ecx, [eax + 0x01EF0000]; pop eax;</p>
    <p>Opcode Mod R/M 0x07 0x01EF00000x01</p>
    <p>Opcode Mod R/M 0x0F 0x01EF00000x01</p>
  </div>
  <div class="page">
    <p>Untrusted Application</p>
    <p>PKEY 0</p>
    <p>Code: 48 83 c0 08 44 01 fa 83 fa 07 77 83 ff 07 0f 96 c2 80</p>
    <p>Overview of ERIM</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates</p>
    <p>Creating usable binaries  Inadvertent PKRU update instruction  Rewrite strategy</p>
    <p>Evaluation  Frequently-switching use cases  10% higher throughput compared to</p>
    <p>best existing technique</p>
    <p>Trusted Compartment</p>
    <p>PKEY 1</p>
  </div>
  <div class="page">
    <p>Prototype implementation</p>
    <p>ERIM userspace library  Call gates  Memory allocator for trusted component overloading malloc-like functions  Memory inspection (exclude unsafe WRPKRU/XRSTOR)</p>
    <p>Prevent execution on pages with unsafe WRPKRUs/XRSTOR a) P-Trace and seccomp BPF userspace monitor b) Linux Security Module</p>
    <p>Remove inadvertent WRPKRUs/XRSTORs  Static binary rewrite tool based on DynInst</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How frequent are inadvertent WRPKRUs/XRSTORs?  Inspected about 200,000 executable files of 5 Linux distributions  Found 1213 inadvertent WRPKRU/XRSTOR in binary code  DynInst disassembled 1,023  100% rewrite success</p>
    <p>What is ERIMs overhead in frequently-switching use cases?  Isolating session keys in Nginx  Isolating a managed runtime (node.js) from native libraries  Isolating in-memory state of reference monitors (CPI/CPS)</p>
  </div>
  <div class="page">
    <p>Address Space</p>
    <p>OpenSSL &amp; LibCrypto</p>
    <p>Use case: Session Key Isolation</p>
    <p>AES CompartmentNGINX</p>
    <p>Connection Management Content</p>
    <p>HTTPS session Handshake protocol</p>
    <p>Cryptographic keys AES encrypt/decrypt AES key initialization</p>
  </div>
  <div class="page">
    <p>Nginx Throughput with protected session keys</p>
    <p>Normalized Throughput Native ERIM</p>
    <p>ERIM throughput within 5% of native.</p>
  </div>
  <div class="page">
    <p>Nginx Throughput with protected session keys</p>
    <p>Native ERIM</p>
    <p>Normalized Throughput</p>
  </div>
  <div class="page">
    <p>Comparison to Prior Art</p>
    <p>Throughput</p>
    <p>Native ERIM VMFUNC MemSentry-MPX Light-weight Context</p>
  </div>
  <div class="page">
    <p>Untrusted Application</p>
    <p>PKEY 0</p>
    <p>Code: 48 83 c0 08 44 01 fa 83 fa 07 77 83 ff 07 0f 96 c2 80</p>
    <p>Summary</p>
    <p>Prevent MPK exploitation  Safe call gates  Prevent execution of permission</p>
    <p>register updates outside of call gates</p>
    <p>Creating usable binaries  Inadvertent PKRU update instruction  Rewrite strategy</p>
    <p>Evaluation  Frequently-switching use cases  10% higher throughput compared to</p>
    <p>best existing technique</p>
    <p>Trusted Compartment</p>
    <p>PKEY 1</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>ERIM: Secure, Efficient in-process Isolation with Memory Protection Keys</p>
    <p>Anjo Vahldiek-Oberwagner, Eslam Elnikety, Nuno O. Duarte, Michael Sammler, Peter Druschel, Deepak Garg</p>
    <p>Code available at https://gitlab.mpi-sws.org/vahldiek/erim</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Intel Memory Protection Keys (MPK)</p>
    <p>Tag memory pages with a memory domains (bits 62:59 in page table)  Permission register (PKRU) enables R/W to a domain  Update accessible permissions from userspace</p>
    <p>Fast switching, without context/PT switch  By itself, protects against bugs only</p>
    <p>PKRU register (32 bit, 2 bits per domain)</p>
    <p>11</p>
    <p>Dom ain 2</p>
    <p>Dom ain 1</p>
    <p>Dom ain 0</p>
    <p>Dom ain 3</p>
    <p>2</p>
    <p>Page Table Entry</p>
    <p>Domain (bits 62:59)</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>ERIM: Memory Isolation</p>
    <p>using Intel MPK</p>
    <p>Operating System</p>
    <p>Application Sensitive data</p>
    <p>ERIM</p>
    <p>Language and</p>
    <p>Runtime Techniques</p>
    <p>Operating System</p>
    <p>Sensitive data</p>
    <p>Application Sensitive</p>
    <p>data</p>
    <p>Operating System</p>
    <p>Sensitive dataApplication</p>
    <p>OS/VMM-BasedASLR-based Hiding</p>
    <p>OS + VMM</p>
    <p>Execution overhead Switch</p>
    <p>overhead</p>
    <p>Threat</p>
    <p>modelUntrusted Trusted</p>
    <p>ASLR1 Low None None Application</p>
    <p>bugs only</p>
    <p>OS/VMM</p>
    <p>-based2 Low Low Medium</p>
    <p>Any</p>
    <p>userspace</p>
    <p>Lang. &amp;</p>
    <p>RT3 Medium</p>
    <p>High None None</p>
    <p>Any</p>
    <p>userspace</p>
    <p>ERIM Low None Low Any</p>
    <p>userspace</p>
    <p>State of the art: Isolating in-memory state</p>
  </div>
  <div class="page">
    <p>Isolating sensitive state with Intel MPK</p>
    <p>Address Space</p>
    <p>Sensitive State</p>
    <p>Untrusted Application State</p>
    <p>Domain 0 Domain 1</p>
    <p>TRUSTED</p>
    <p>UNTRUSTED</p>
    <p>Domain switch is a user-mode register write: efficient but vulnerable to attack.</p>
    <p>Permission Register (PKRU)</p>
    <p>D0 D1</p>
  </div>
  <div class="page">
    <p>Using ERIM to isolate memory</p>
    <p>Inlined switches</p>
    <p>fct_A() {</p>
    <p>.</p>
    <p>switch(Trusted)</p>
    <p>access sensitive data</p>
    <p>switch(Untrusted)</p>
    <p>}</p>
    <p>Function overwriting</p>
    <p>fct_A() {</p>
    <p>.</p>
    <p>}</p>
    <p>BUILD_BRIDGE(fct_A);</p>
    <p>fct_B() {</p>
    <p>CALL_BRIDGE(fct_A, args);</p>
    <p>}</p>
    <p>Function overloading via LD_PRELOAD</p>
    <p>Shared library defines:</p>
    <p>fct_A() {</p>
    <p>f = dlsym(fct_A, );</p>
    <p>switch(Trusted);</p>
    <p>ret = f(args);</p>
    <p>switch(Untrusted);</p>
    <p>return ret;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Comparison to MPX</p>
  </div>
  <div class="page">
    <p>Comparison to VMFUNC EPT switch</p>
  </div>
  <div class="page">
    <p>Comparison to LwC</p>
  </div>
  <div class="page">
    <p>How frequent are inadvertent WRPKRUs/XRSTORs?</p>
    <p>Debian 8 Ubuntu 14 Ubuntu 16 Gentoo Gentoo Gold Elf files 56035 58548 69907 9940 9940 Elf files with WRPKRU/XRSTOR 665 603 720 73 34 Executable WRPKRU/XRSTOR 4244 1147 2105 124 46</p>
    <p>WPKRU/XRSTOR in code 481 276 384 41 31</p>
    <p>Disassembled by Dyninst 420 215 332 32 24 Inter-instruction 30 29 44 5 5 Intra-instruction 390 186 288 27 19</p>
  </div>
  <div class="page">
    <p>How frequent are inadvertent WRPKRUs?</p>
    <p>Debian 8 Ubuntu 14 Ubuntu 16 Gentoo Gentoo Gold Elf files 56035 58548 69907 9940 9940</p>
    <p>All WRPKRU XRSTOR All WRPKRU XRSTOR All WRPKRU XRSTOR All WRPKRU XRSTOR All WRPKRU XRSTOR</p>
    <p>Elf files w/ WRPKRU/XRSTOR 665 174 541 603 215 435 720 189 580 73 22 59 34 17 20</p>
    <p>Executable WRPKRUXRSTOR 4244 288 3956 1147 442 705 205 235 1870 124 26 98 46 18 28</p>
    <p>WPKRU/XRSTOR in code 481 63 418 276 66 210 384 83 301 41 9 32 31 14 17</p>
    <p>Disassembled by Dyninst 420 52 368 215 55 160 332 73 259 32 9 23 24 14 10 Inter-instruction Number 30 30 0 29 29 0 44 41 3 5 5 0 5 5 0</p>
    <p>Rewritable by NOP 30 30 0 29 29 0 44 41 3 5 5 0 5 5 0 Intra-instruction Number 390 22 368 186 26 160 288 32 256 27 4 23 19 9 10</p>
    <p>Rewritable by rule 5 199 22 177 181 26 155 246 32 214 27 4 23 19 9 10 Rewritable by rule 4/6 191 0 194 5 0 5 42 0 42 0 0 0 0 0 0</p>
  </div>
  <div class="page">
    <p>ERIM Related Work</p>
    <p>Hardware-based Isolation:  Trusted Execution Engines (TEE) [SGX, TrustZone]  Reducing TCB of TEE [Flicker]  Sandbox applications in TEE [Haven, Scone] Hypervisor/OS-based:  Reference monitors [Dune, Wedge, LwC]  Sandboxing Applications [Capsicum]  Privilege Separation [PrivTrans]  Hiding secrets in execute-only code [Redactor, Near]</p>
  </div>
  <div class="page">
    <p>ERIM Related Work</p>
    <p>Software-fault isolation:  Compilation-based [NativeClient]  Emulation [Vx32]  Just-in-time compiled languages [NativeClient++] Inlined Reference Monitoring:  Control-Flow Integrity [CPI]  Sandboxing annotated code [Shreds]  Intercepting Android framework [Aurasium]</p>
  </div>
  <div class="page">
    <p>Call Gates</p>
    <p>WRPKRU (RW_TRUSTED)</p>
    <p>// entry point to trusted</p>
    <p>WRPKRU (DIS_TRUSTED) cmp DIS_TRUSTED, EAX je continue exit</p>
    <p>continue:</p>
    <p>Elevate privileges and transfer to trusted entry point</p>
    <p>Remove privileges, check for reduced privileges and return from trusted component</p>
  </div>
  <div class="page">
    <p>Creating safe binaries</p>
    <p>Devise rewrite rules for WRPKRU in code segment</p>
    <p>Inter-instruction WRPKRU (0x0F01EF) Example rewrite rule:</p>
    <p>0F 01EF</p>
    <p>Instruction 1 Instruction 2</p>
    <p>Nop</p>
    <p>0F 01EF</p>
  </div>
  <div class="page">
    <p>Displacement</p>
    <p>Displacement</p>
    <p>Creating safe binaries</p>
    <p>Intra-instruction WRPKRU Simplified x86 instruction format:</p>
    <p>Example rewrite rule: add ecx, [ebx + 0x01EF0000]</p>
    <p>push eax; mov eax, ebx; add ecx, [eax + 0x01EF0000]; pop eax;</p>
    <p>Prefix Opcode Mod R/M SIB Displacement Immediate</p>
    <p>Opcode Mod R/M 0x07 0x01EF00000x01</p>
    <p>Opcode Mod R/M 0x0F 0x01EF00000x01</p>
  </div>
  <div class="page">
    <p>Creating safe binaries: Rewrite Rules</p>
  </div>
  <div class="page">
    <p>WRPKRU Occurrances</p>
  </div>
  <div class="page">
    <p>Nginx Throughput with protected session keys</p>
    <p>File size Native (req./s) ERIM rel. (%) Switches/s CPU load 0 95,761 95.83 1,342,605 100 1 87,022 95.18 1,220,266 100 2 82,137 95.44 1,151,877 100 4 76,562 95.25 1,073,843 100 8 67,855 95.98 974,780 100</p>
    <p>CPU bound</p>
    <p>Network bound</p>
  </div>
  <div class="page">
    <p>ERIMized C Program typedef struct secret {</p>
    <p>int number;</p>
    <p>} secret;</p>
    <p>secret* initSecret() {</p>
    <p>ERIM_SWITCH_T;</p>
    <p>secret * s = malloc(sizeof(secret));</p>
    <p>s-&gt;number = random();</p>
    <p>ERIM_SWITCH_U; return s;</p>
    <p>}</p>
    <p>int compute(secret* s, int m) {</p>
    <p>int ret = 0;</p>
    <p>ERIM_SWITCH_T;</p>
    <p>ret = f(s-&gt;number, m);</p>
    <p>ERIM_SWITCH_U;</p>
    <p>return ret;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>SPEC 2006 with CPS/CPI</p>
  </div>
  <div class="page">
    <p>NGINX multiple worker</p>
  </div>
</Presentation>
