<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Provision of Quality of Service</p>
    <p>Guarantees in Job Scheduling</p>
    <p>Mohammad Islam Pavan Balaji</p>
    <p>P. Sadayappan D. K. Panda</p>
    <p>Computer Science and Engineering</p>
    <p>The Ohio State University</p>
  </div>
  <div class="page">
    <p>Publicly Usable Supercomputer Centers and Compute Clusters</p>
    <p>Becoming increasingly common (OSC, SDSC, etc)</p>
    <p>Allow people to run jobs and charge the user based on the job requirements</p>
    <p>Job requirements include Number of CPUs, CPU time, memory, etc.</p>
    <p>Jobs are submitted by the user with resource requirements</p>
    <p>Scheduled to execute at a later time</p>
    <p>Dedicated job scheduler schedules the submitted jobs (Ex: PBS, Maui, Silver)</p>
    <p>Jobs provide an estimate of the run-time together with the job</p>
    <p>Independent Parallel Job Scheduling Model</p>
    <p>Dynamically arriving Independent Parallel Jobs</p>
    <p>Resource mapping: Submitted Jobs to Resources</p>
    <p>Viewed as a two dimensional chart: Processors vs. Time</p>
    <p>Job Schedulers Today</p>
  </div>
  <div class="page">
    <p>Two Dimensional Scheduling Grid</p>
    <p>J1</p>
    <p>J2</p>
    <p>Time</p>
    <p>P ro</p>
    <p>c e</p>
    <p>s so</p>
    <p>rs J3</p>
    <p>Current Time</p>
    <p>J5 J6J4 Job Queue</p>
    <p>Running Jobs</p>
  </div>
  <div class="page">
    <p>Job Scheduling Overview  Submit jobs have several associated parameters</p>
    <p>Resources Required</p>
    <p>Arrival Time (time with the job is submitted by the user)</p>
    <p>Run-time estimate of the job (users need to provide a run-time estimate)</p>
    <p>Queuing Order</p>
    <p>FCFS (First Come First Served)</p>
    <p>SJF (Shortest Job First)</p>
    <p>Reservations are made for some of the jobs</p>
    <p>Conservative backfilling model</p>
    <p>EASY backfilling model</p>
  </div>
  <div class="page">
    <p>Backfilling Models</p>
    <p>J1</p>
    <p>J2</p>
    <p>Time</p>
    <p>P ro</p>
    <p>c e</p>
    <p>s so</p>
    <p>rs J3</p>
    <p>Current Time</p>
    <p>J5 J6J4 Job Queue</p>
    <p>Running JobsJ4</p>
    <p>J5 Reservation</p>
    <p>Violation</p>
    <p>J5</p>
    <p>J6</p>
    <p>Conservative gives reservations to all jobs; EASY gives reservations to just one job</p>
  </div>
  <div class="page">
    <p>Guarantees in Service</p>
    <p>Number of Techniques studied over the years</p>
    <p>Backfilling (Ex: Conservative, EASY, No Guarantee)</p>
    <p>Priority based scheduling</p>
    <p>Differentiated service to different classes of jobs</p>
    <p>Soft Real-time or Best Effort guarantees to the completion time</p>
    <p>Hard Real-Time or Deadline-based scheduling</p>
    <p>Allow Users to specify the deadline they desire</p>
    <p>Cost model based on Resources Used AND Deadline Specified</p>
    <p>Requires a deadline-based scheduling algorithm</p>
  </div>
  <div class="page">
    <p>QoS for Job Scheduling  Two Components in providing QoS</p>
    <p>Job Scheduling Component</p>
    <p>Admission Control</p>
    <p>Can we meet the specified deadline?</p>
    <p>Once admitted, cannot miss the specified deadline</p>
    <p>Studied as a part of our previous work [islam03:qops]</p>
    <p>Cost Model Component</p>
    <p>Based on Resources Used AND Deadline Specified</p>
    <p>More urgent jobs are charged more</p>
    <p>Role of user characteristics in the charging model</p>
    <p>Tolerance of users to missed deadlines</p>
    <p>We deal with this component of QoS in this paper</p>
    <p>[islam03:qops] QoPS: A QoS based scheme for Parallel Job Scheduling, M. Islam, P. Balaji, P. Sadayappan and D. K. Panda. Published in JSSPP 03 and LNCS 04.</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction and Motivation</p>
    <p>Cost Model for Supercomputer Centers</p>
    <p>Understanding User-Tolerance</p>
    <p>Dealing with User-Tolerance</p>
    <p>Artificial Slack</p>
    <p>Kill-and-Restart</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Cost Model in Supercomputer Centers  Current Cost Model based on Resources used</p>
    <p>Cost independent of the response time of the job</p>
    <p>User cannot request for a quicker service</p>
    <p>Some schedulers allow differentiated service (Ex: NERSC)</p>
    <p>Use high priority, normal and low priority queues</p>
    <p>High Priority queue charges more; Low Priority queue charges less</p>
    <p>No guarantees provided to the user about the response time</p>
    <p>Idea of charging the user based on the service/priority: Still Relevant !</p>
    <p>Two components in the Cost Model</p>
    <p>Resource Charge</p>
    <p>QoS Charge</p>
  </div>
  <div class="page">
    <p>Cost Model Components</p>
    <p>Resource Charge</p>
    <p>Depends on the CPU, Memory, Disk Space, etc.</p>
    <p>We only consider the CPU resource; extendable to other resources</p>
    <p>QoS Charge</p>
    <p>Depends on the urgency of the job</p>
    <p>Depends on the difficulty in scheduling the job; based on two components</p>
    <p>Current load in the system</p>
    <p>Slowdown of the category to which the job belongs (Ex: Short-Wide)</p>
    <p>Slowdown depicts the factor by which the job is delayed compared to its runtime</p>
    <p>Resource Charge = Processors x Run-Time</p>
    <p>QoS Charge = Category Slowdown / Requested Slowdown</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction and Motivation</p>
    <p>Cost Model for Supercomputer Centers</p>
    <p>Understanding User-Tolerance</p>
    <p>Dealing with User-Tolerance</p>
    <p>Artificial Slack</p>
    <p>Kill-and-Restart</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Understanding User Tolerance</p>
    <p>If the requested deadline cannot be met?</p>
    <p>Some users might submit another job or to another supercomputer center</p>
    <p>Some users might re-submit the job with another deadline</p>
    <p>What new deadline? Hit-and-Trial?</p>
    <p>We modified QoPS to provide some feedback about the best possible deadline</p>
    <p>We model user-tolerance based on a Tolerance Factor (TF)</p>
    <p>Factor of extension in the requested deadline, the user can accept</p>
    <p>If the (Earliest Possible Deadline) &lt; (TF x Requested Deadline)</p>
    <p>The user is assumed to accept the new deadline</p>
    <p>Else</p>
    <p>The user is assumed to reject the new deadline</p>
  </div>
  <div class="page">
    <p>Feedback based QoPS Algorithm</p>
    <p>This is for the case when the user requested deadline cannot be met</p>
    <p>Say this deadline is D1</p>
    <p>When a new job arrives:</p>
    <p>Try to place the new job without disturbing any other job</p>
    <p>Calculate the completion time of the job</p>
    <p>This is a definitely feasible deadline (D2)</p>
    <p>Use a binary search for N iterations to find a better deadline</p>
    <p>For each iteration, run QoPS with the new deadline</p>
    <p>If feasible, try a tighter deadline; else try a looser deadline</p>
  </div>
  <div class="page">
    <p>Impact of User Tolerance</p>
    <p>Increase in Resource Charge: Intuitive</p>
    <p>Decrease in QoS Charge; as the users get more tolerant, the center loses QoS money !  This is because of accepting cheaper jobs which would have otherwise been rejected</p>
    <p>Overall profit of the Supercomputer Center depends on the ratio of the two charges</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction and Motivation</p>
    <p>Cost Model for Supercomputer Centers</p>
    <p>Understanding User-Tolerance</p>
    <p>Dealing with User-Tolerance</p>
    <p>Artificial Slack</p>
    <p>Kill-and-Restart</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Dealing with User-Tolerance</p>
    <p>User-Tolerance is not an always win situation!</p>
    <p>Depends on the QoS charge to Resource charge ratio</p>
    <p>If QoS charge were 0, user-tolerance is always beneficial</p>
    <p>If Resource charge were 0, user-tolerance is never beneficial</p>
    <p>We need some way to deal with this behavior of user-tolerance</p>
    <p>Allows us to maximize profit depending on the QoS and Resource charges</p>
    <p>We propose two approaches to counter user-tolerance</p>
    <p>Providing Artificial Slack</p>
    <p>Kill and Restart Mechanism</p>
  </div>
  <div class="page">
    <p>Artificial Slack</p>
    <p>If a requested deadline cannot be met</p>
    <p>Provide the best possible deadline to the job</p>
    <p>Maximizes the revenue for the job</p>
    <p>Creates a very tight schedule; difficulty in accepting later arriving jobs</p>
    <p>Provide the job with an artificial slack</p>
    <p>Loses out on the revenue for the job</p>
    <p>The overall schedule is loose enough to accept later arriving jobs</p>
    <p>Offered Deadline extended</p>
    <p>Arrival Time + (Earliest Deadline  Arrival Time) x Slack Factor</p>
  </div>
  <div class="page">
    <p>Kill and Restart</p>
    <p>Some supercomputer centers support a kill-and-restart mechanism</p>
    <p>A running job can be killed and restarted: No permanent modifications</p>
    <p>Some centers such as the OSC support such mechanisms</p>
    <p>Our approach utilizing the kill-and-restart mechanism</p>
    <p>If a jobs requested deadline cannot be met</p>
    <p>Kill a running job and try scheduling this job</p>
    <p>Verify that both the new job and the killed job can be scheduled</p>
    <p>If they can be scheduled, accept the schedule</p>
    <p>It is to be noted that this approach might result in wastage of resources</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction and Motivation</p>
    <p>Cost Model for Supercomputer Centers</p>
    <p>Understanding User-Tolerance</p>
    <p>Dealing with User-Tolerance</p>
    <p>Artificial Slack</p>
    <p>Kill-and-Restart</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Impact of Slack Factor (SF)</p>
    <p>Counter Impact as User Tolerance !</p>
    <p>Drop of Resource charge; more smaller jobs accepted, force larger jobs to be rejected</p>
    <p>Increase in QoS charge; additional slack forces significantly delayed jobs to be rejected</p>
  </div>
  <div class="page">
    <p>Impact of Kill-and-Restart (TF = 4.0)</p>
    <p>Kill-and-Restart loses out on resource charge due to wastage of resources</p>
    <p>Gains on the QoS charge due to its ability to accept later arriving expensive jobs</p>
  </div>
  <div class="page">
    <p>Impact of Non-deadline Jobs (20% deadline)</p>
    <p>Benefits of Kill-and-Restart are even higher</p>
    <p>Benefits seen in both cost components</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction and Motivation</p>
    <p>Cost Model for Supercomputer Centers</p>
    <p>Understanding User-Tolerance</p>
    <p>Dealing with User-Tolerance</p>
    <p>Artificial Slack</p>
    <p>Kill-and-Restart</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Concluding Remarks</p>
    <p>Considerable Research on the topic of Parallel Job Scheduling</p>
    <p>The issue of provision of QoS has received little attention</p>
    <p>In this paper, we extend our previous QoS based scheme, QoPS</p>
    <p>A feedback mechanism to provide the best possible deadline</p>
    <p>Study the impact of user-tolerance on overall revenues</p>
    <p>Propose schemes to minimize the negative impacts of user-tolerance</p>
    <p>Demonstrated capabilities and issues based on simulation studies</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Incorporate the QoPS scheme into Maui/Moab at the OSC</p>
    <p>Study QoS aspects for multi-site schedulers</p>
    <p>Clusters with heterogeneous systems</p>
    <p>Extend the scheme to multiple resources</p>
    <p>Study QoS aspects for network flow scheduling</p>
  </div>
  <div class="page">
    <p>Thank You !</p>
    <p>http://www.cse.ohio-state.edu/~saday</p>
    <p>{islammo, balaji, saday, panda}@cse.ohio-state.edu</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>The Basic QoPS Algorithm  When a job (JN+1) arrives</p>
    <p>If J1, J2, , JN are already present and scheduled in that order</p>
    <p>Place the job (JN+1) at the start of all jobs</p>
    <p>Try scheduling the jobs in that order</p>
    <p>If all jobs are able to meet their deadlines, Great ! Admit it !</p>
    <p>If some job fails, we have two options:</p>
    <p>Option1:</p>
    <p>Consider the failed job as a critical job</p>
    <p>Push the failed job to the start of the schedule and retry</p>
    <p>k number of such re-orderings of existing jobs are allowed</p>
    <p>If (number of re-orderings &gt; k) switch to option 2</p>
    <p>Option2:</p>
    <p>Back off exponentially in the position at which you try placing job (JN+1) and retry</p>
  </div>
  <div class="page">
    <p>J3 J2J2 J1</p>
    <p>Working of the QoPS Algorithm</p>
    <p>J12 J11 J7J8 J6 J5J10 J9 J4 J1</p>
    <p>J13</p>
    <p>J13</p>
    <p>J13</p>
    <p>J1</p>
    <p>J2</p>
    <p>J3</p>
    <p>J3J13</p>
    <p>J13</p>
    <p>J1</p>
    <p>J2</p>
    <p>J3</p>
    <p>J1 J13 J2J3</p>
    <p>J13</p>
    <p>J1</p>
    <p>J4</p>
    <p>J3</p>
    <p>J2</p>
    <p>J6 J5 J4J1J13 J2J3</p>
    <p>Max. Violations Allowed = 2</p>
    <p>Current Violations = 0Current Violations = 1Current Violations = 2Current Violations = 0</p>
  </div>
  <div class="page">
    <p>Simulation Approach</p>
    <p>CTC/SDSC Trace</p>
    <p>Load Variation</p>
    <p>Deadline Calculator</p>
    <p>Deadline-based Trace</p>
    <p>QoPS Simulation</p>
    <p>MSB Simulation</p>
    <p>MRT Simulation</p>
    <p>EASY Simulation</p>
    <p>Duplication/Expansion</p>
  </div>
  <div class="page">
    <p>Trace Generation  Many job logs available, but no associated deadlines</p>
    <p>Synthetic Deadline Generation</p>
    <p>Generate a schedule for the job trace using EASY</p>
    <p>For any job J, if the Turnaround time in this schedule is T</p>
    <p>Deadline for J = Arrival Time + max (runtime, (1-SF) x T)</p>
    <p>SF is the Stringency factor (0 &lt; SF &lt; 1)</p>
    <p>0 would give the least stringent deadlines and 1 the most stringent</p>
    <p>Some jobs might not come with deadlines</p>
    <p>Very lax deadlines to prevent starvation</p>
    <p>If T is the current expected Turnaround time,</p>
    <p>Deadline = Arrival Time + max (24hrs, R x T)</p>
    <p>R is the Relaxation Factor of the schedule</p>
  </div>
</Presentation>
