<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>STMS: Improving MPTCP Throughput Under</p>
    <p>Heterogenous Networks Hang Shi1, Yong Cui1, Xin Wang2, Yuming Hu1, Minglong Dai1,</p>
    <p>Fanzhao Wang3, Kai Zheng3</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Mutipath TCP is widely adopted to aggregate bandwidth of multiple interfaces of mobile devices</p>
    <p>Transparent to both application and middlebox</p>
    <p>However, mobile WiFi and LTE are heterogeneous:  20% of top 500 sites has RTT difference &gt; 45ms, as high as 134ms1</p>
  </div>
  <div class="page">
    <p>Default scheduler: send packets through fastest available path</p>
    <p>Big host buffer requirement</p>
    <p>Sender ReceiverT = 1s</p>
    <p>F Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Default scheduler: send packets through fastest available path</p>
    <p>Big host buffer requirement</p>
    <p>Sender ReceiverT = 2s</p>
    <p>F</p>
    <p>F</p>
    <p>Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Default scheduler: send packets through fastest available path</p>
    <p>Packet sent from slow path arrive late. Can not submit to application. Need more buffer.</p>
    <p>Big host buffer requirement</p>
    <p>Sender ReceiverT = 3s</p>
    <p>S</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Host buffer is not the only bottleneck</p>
    <p>TC running in OpenWrt router to regulate bandwidth and RTT</p>
    <p>iPerf to measure the throughput (send packets continuously)</p>
    <p>Bandwidth = 30Mbps, loss rate = 0.01%</p>
    <p>Host buffer big enough(6M)</p>
    <p>RTT 20ms vs 200ms 20ms vs 20ms</p>
    <p>Aggregated Throughput (Mbps)</p>
    <p>Fast path Throughput (Mbps)</p>
    <p>Fast path Loss rate (%) 0.05 0.01</p>
    <p>RTT (added by TC)</p>
  </div>
  <div class="page">
    <p>Burst sending pattern</p>
    <p>Fast path sends packets in burst.</p>
  </div>
  <div class="page">
    <p>Big in-network buffer requirement</p>
    <p>Bigger in-network buffer is needed to tolerant the burst.</p>
    <p>When in-network buffer is limited, MPTCP can not compete against single path TCP. (More packet loss)</p>
    <p>In-network</p>
    <p>buffer/K</p>
    <p>MPTCP Fast</p>
    <p>path /Mbps</p>
    <p>MPTCP</p>
    <p>overall TP</p>
    <p>/Mbps</p>
    <p>SPTCP</p>
    <p>fast/Mbps</p>
    <p>Utilization</p>
    <p>of fast path</p>
  </div>
  <div class="page">
    <p>MPTCP 2 level sequence number</p>
    <p>(1, 101) -&gt; S</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>Sender-MP Receiver</p>
    <p>F</p>
    <p>F Fast path: RTT = 0s, bandwidth = 2</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>data: 1</p>
    <p>subflow: 101</p>
    <p>data: 2</p>
    <p>subflow: 201 sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>Sender-FP</p>
    <p>Separate send window of MP level and subflow level  2 level sequence number and cumulative ACK.</p>
  </div>
  <div class="page">
    <p>Burst sending of fast path</p>
    <p>(1, 101) -&gt; S</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>(4, 102) -&gt; S</p>
    <p>(5, 203) -&gt; F</p>
    <p>(6, 204) -&gt; F</p>
    <p>Sender-MP Receiver</p>
    <p>S</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>Fast path: RTT = 0s, bandwidth = 2</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>data: 1</p>
    <p>subflow: 101</p>
    <p>data: 2</p>
    <p>subflow: 201 sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>(5, 203) -&gt; F</p>
    <p>(6, 204) -&gt; F</p>
    <p>Sender-FP</p>
    <p>When ACK of slow path returns, MP-level send window slides, fill the CWND space of fast path.</p>
  </div>
  <div class="page">
    <p>MPTCP-level window sliding</p>
    <p>the left edge of MP send window almost only slides after receiving ACK from slow path.</p>
  </div>
  <div class="page">
    <p>CWND free space of fast path</p>
    <p>Break the ACK clocking of single TCP.</p>
  </div>
  <div class="page">
    <p>Solution space</p>
    <p>Retransmission and penalization1 can alleviate host buffer problem. Can not solve in-network buffer problem</p>
    <p>Pacing can solve in-network buffer problem.  TC pacing, need set the pacing rate manually  BBR congestion control, not fair with single path TCP</p>
    <p>Our solution: Dynamically out-of-order sending for in-order arrival  Solve both host buffer and in-network buffer.  Congestion control agnostic.</p>
  </div>
  <div class="page">
    <p>Out-of-order sending</p>
    <p>Sender Receive</p>
    <p>r</p>
    <p>T =</p>
    <p>F</p>
    <p>Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Out-of-order sending</p>
    <p>Sender Receive</p>
    <p>r</p>
    <p>T =</p>
    <p>F</p>
    <p>F Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Out-of-order sending</p>
    <p>Sender Receive</p>
    <p>r</p>
    <p>T =</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>S</p>
    <p>Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Out-of-order sending</p>
    <p>Sender Receive</p>
    <p>r</p>
    <p>T =</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>S</p>
    <p>F</p>
    <p>S</p>
    <p>Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Out-of-order sending</p>
    <p>Sender Receive</p>
    <p>r</p>
    <p>T =</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>S</p>
    <p>F</p>
    <p>S</p>
    <p>F</p>
    <p>S</p>
    <p>Fast path: RTT = 0s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>send_una</p>
    <p>sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
  </div>
  <div class="page">
    <p>Out-of-order sending algorithm</p>
    <p>in flight slowfast</p>
    <p>P_next</p>
    <p>Gap</p>
    <p>buffer For fast path, send unsent[0]</p>
    <p>For slow path, send unsent[Gap]</p>
    <p>Leave Gap packets for fast path to send</p>
    <p>Out-of-order sending -&gt; in-order arrival</p>
    <p>() +   = ()</p>
  </div>
  <div class="page">
    <p>Need more send buffer?</p>
    <p>Seems like moving Gap from receiver to sender?</p>
    <p>However, send window can slide faster. No duplicate ACK. Each ACK can acknowledge some packets.</p>
    <p>Actually, out-of-order sending can always get optimal throughput across all range of host buffer sizes.</p>
  </div>
  <div class="page">
    <p>How to get GAP value</p>
    <p>Naive way: Calculate from path condition measurement.   =    (     )  Hard to measure. Need symmetric forward delay.</p>
    <p>Our approach: Feedback based adjustment.  No more options. Compatible with existing MPTCP</p>
    <p>protocol. Get feedback from existing options.  Deployable. Modify sender side only</p>
  </div>
  <div class="page">
    <p>Key insight</p>
    <p>(1, 101) -&gt; S</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>Sender-MP ReceiverT = 1s</p>
    <p>F</p>
    <p>F Fast path: RTT = 0s, bandwidth = 2</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>data: 1</p>
    <p>subflow: 101</p>
    <p>data: 2</p>
    <p>subflow: 201 sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>Sender-FP</p>
    <p>Out-of-order arrival generate burst MP-level ack  Gap = Number of bursting MP-level ACKs</p>
  </div>
  <div class="page">
    <p>Key insight</p>
    <p>(1, 101) -&gt; S</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>(4, 102) -&gt; S</p>
    <p>(5, 203) -&gt; F</p>
    <p>(6, 204) -&gt; F</p>
    <p>Sender-MP ReceiverT = 2s</p>
    <p>S</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>F</p>
    <p>Fast path: RTT = 0s, bandwidth = 2</p>
    <p>packet/s</p>
    <p>Slow path: RTT = 4s, bandwidth = 1</p>
    <p>packet/s</p>
    <p>data: 1</p>
    <p>subflow: 101</p>
    <p>data: 2</p>
    <p>subflow: 201 sent, unacked</p>
    <p>sent, acked</p>
    <p>received</p>
    <p>unsent/received</p>
    <p>(2, 201) -&gt; F</p>
    <p>(3, 202) -&gt; F</p>
    <p>(5, 203) -&gt; F</p>
    <p>(6, 204) -&gt; F</p>
    <p>Sender-FP</p>
    <p>Out-of-order arrival generate burst MP-level ack  Gap = Number of burst MP-level ACKs</p>
  </div>
  <div class="page">
    <p>Gap adjustment</p>
    <p>Burst MP-level ACK(data ACK)</p>
    <p>Packet[send_una] sent from slow path, Gap += delta[data_ack] - 2</p>
    <p>Packet[send_una] sent from fast path, Gap -= delta[data_ack]  2</p>
    <p>Limit the frequency of adjustment to avoid repeated adjustment.</p>
    <p>EWMA of delta over adjustment interval.</p>
  </div>
  <div class="page">
    <p>Implementation and Evaluation</p>
    <p>Based on Linux kernel MPTCP v0.92</p>
    <p>2 variants: gap-calculation and gap-adjustment.</p>
    <p>Compared with Default and ECF(Early completion first. Sending tail packets out-of-orderly.)</p>
    <p>Controlled lab and real-world.</p>
    <p>Varying static and dynamic network environment.</p>
    <p>Varying in-network buffer and host buffer.</p>
  </div>
  <div class="page">
    <p>Microbenchmarks</p>
    <p>Reduce out-of-order latency: t(submitted)  t(arrival)</p>
  </div>
  <div class="page">
    <p>Varying receive buffer and send buffer size.</p>
    <p>Microbenchmarks</p>
  </div>
  <div class="page">
    <p>Reduce burst on the fast path</p>
    <p>CWND freespace when receiving ACK.</p>
    <p>iPerf will fill the freespace.</p>
    <p>Big freespace -&gt; burst sending -&gt; big in-network buffer requirement.</p>
  </div>
  <div class="page">
    <p>Gap adjustment is dynamic</p>
    <p>Change the network condition suddenly.</p>
  </div>
  <div class="page">
    <p>Macrobenchmarks</p>
    <p>25% improvement when in-network buffer is limited.</p>
  </div>
  <div class="page">
    <p>Host buffer</p>
    <p>20% improvement when receive/send buffer is limited.</p>
  </div>
  <div class="page">
    <p>Dynamic network condition</p>
    <p>Change bandwidth(left) and latency(right) randomly</p>
  </div>
  <div class="page">
    <p>Real-world evaluation</p>
    <p>Lab to Alibaba Cloud.</p>
    <p>No bandwidth regulation.</p>
    <p>Varying latency.</p>
    <p>Download 200MB file.</p>
    <p>BD(Mbps) Latency(ms)</p>
    <p>WiFi 40 50</p>
    <p>LTE 30 70</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Discover the in-network buffer problem of MPTCP.</p>
    <p>Leverage data ACK and subflow ACK for dynamically Out-oforder sending.</p>
    <p>Improve the throughput of MPTCP when RTTs are asymmetric and especially when the buffer is limited.</p>
  </div>
  <div class="page">
    <p>Thanks</p>
  </div>
</Presentation>
