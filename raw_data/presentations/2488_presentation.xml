<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Yuichi Nakamura, Yoshiki Sameshima Hitachi Software, Japan</p>
    <p>{ynakam,same}@hitachisoft.jp</p>
    <p>Toshihiro Tabata Okayama University, Japan tabata@cs.okayama-u.ac.jp</p>
    <p>SEEdit: SELinux Security Policy Configuration SEEdit: SELinux Security Policy Configuration System with Higher Level LanguageSystem with Higher Level Language</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Security-Enhanced Linux  Developed by NSA (http://www.nsa.gov/selinux)  Security enhancement in the Linux kernel layer</p>
    <p>Confine behavior of attackers by access control feature  Least privilege (Type Enforcement:TE)  Mandatory Access Control (MAC)</p>
    <p>No one (including root) can avoid</p>
    <p>Widely used for servers  Enabled on Redhat, CentOS by default at installation time  Also useful for embedded devices</p>
    <p>Small enough for CE Linux devices, low overhead</p>
  </div>
  <div class="page">
    <p>File/var/www Type:web_contents_t</p>
    <p>httpd Domain:httpd_t</p>
    <p>Process Resource read request</p>
    <p>Label based access control  Domain labels are assigned to processes  Type labels are assigned to resources</p>
    <p>The security policy  Set of access rules are written by SELinux policy language</p>
    <p>Domain is not allowed nothing by default, only accesses permitted in the security policy are permitted  Security policy must be created to use SELinux</p>
    <p>allow httpd_t web_contents_t file:{ read };</p>
    <p>Domain Type Permission</p>
    <p>Security Policy</p>
    <p>SELinux</p>
    <p>Check read permission between domain and type</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>Bad reputation of SELinux: SELinux is difficult, unusable  SELinux is included in major Linux distros, but</p>
    <p>sysadmins/engineers are often recommended to disable SELinux</p>
    <p>Why? : Security policy configuration is difficult  Fine grained permissions (more than 700), label configurations</p>
    <p>(often more than 1,000), access rules (often more than 100,000)  Hard to write, understand</p>
    <p>What we want to do  make it easy to write, understand the security policy</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Refpolicy : the most popular  Developed by the SELinux community  Security policies are usually created using refpolicy</p>
    <p>The approach of refpolicy  Sample configurations</p>
    <p>Prepare as many configurations as possible by the power of SELinux community  Configurations for most applications in Fedora and Cent OS are covered</p>
    <p>Macros  For the convenience of policy writers, macros are defined to write commonly used</p>
    <p>sentences in short expressions</p>
    <p>Refpolicy works very well if system is used as expected by refpolicy developers</p>
    <p>E.g. If we use Cent OS as default configuration, we do not have to do almost nothing for SELinux.</p>
  </div>
  <div class="page">
    <p>Preparing sample configurations for everything is impossible  Customizing refpolicy is necessary in systems that are not expected</p>
    <p>by refpolicy developers  E.g. Commercial applications, embedded system</p>
    <p>To customize, we have to write and understand refpolicy configurations  Understanding is also important because people often do not want to</p>
    <p>use what they can not understand.</p>
    <p>However, writing/understanding refpolicy configurations for is difficult</p>
  </div>
  <div class="page">
    <p>#1 Amount of configuration lines  More than 100,000 configuration lines</p>
    <p>To support as many use cases as possible, configurations for many applications, conditional rules are included</p>
    <p>Size is also a problem for resource constrained embedded devices  #2 Number of configuration elements</p>
    <p>More than 700 Permissions, 1,000 types, 1,000 macros..  #3 Type configuration</p>
    <p>Sysadmins have been identifying resources as file name, so not familiar with types</p>
    <p>* Example: apache_content_template(sys)  A macro. To understand what is configured we have to look for the definition, sometimes definition is nested.</p>
    <p>/var/www(/.*)? gen_context(system_u:object_r:httpd_sys_content_t,s0)  Type configuration to assign httpd_sys_content_t type under /var/www</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>We propose tool SEEdit  SEEdit = SPDL + SPDL Tools</p>
    <p>DIY Tool to create the security policy</p>
    <p>SPDL (Simplified Policy Description Language)  Higher level language  Reduce number of permissions  Hide type configurations</p>
    <p>SPDL tools  Help to write configurations with SPDL</p>
    <p>Write only necessary configurations from zero by SEEdit(without reusing refpolicy), so number of configuration lines and size are expected to be reduced</p>
  </div>
  <div class="page">
    <p>Simplified Policy The Security Policy</p>
    <p>Configurations written in SPDL domain httpd_t; allow /var/www/** r,s;</p>
    <p>Configurations written in SELinux Policy Language domain httpd_t,domain; type var_www_t; allow httpd_t var_www_t:file r_file_perms; /var/www(/.*) system_u:object_r:var_www_t</p>
    <p>SPDL Converter</p>
    <p>SPDL Tools</p>
  </div>
  <div class="page">
    <p>Type configurations are hidden  Identify resources with names not types</p>
    <p>Number of permissions are reduced by Integrated permission  Integrated permission r for file grants 14 SELinux</p>
    <p>permissions related to read files</p>
    <p>* Example: Granting httpd_t domain read access to files and port 80</p>
    <p>domain httpd_t;</p>
    <p>program /usr/sbin/httpd</p>
    <p>allow /var/www/** r;</p>
    <p>allownet protocol tcp port 80 server;</p>
  </div>
  <div class="page">
    <p>SPDL domain httpd_t; allow /var/www/** r,s;</p>
    <p>SELinux Policy Language type httpd_t, domain; role system_r types httpd_t; type var_www_t,file_type; allow httpd_t var_www_t:file { read ioctl lock }; allow httpd_t var_www_t:dir { read ioctl lock search}; allow httpd_t var_www_t:lnk_file { read ioctl lock}; /var/www(/.*)? system_u:object_r:var_www_t</p>
    <p>Generates  type labels from resource names  allow statements  relationship between types and files</p>
    <p>SPDL converter</p>
  </div>
  <div class="page">
    <p>(1) Assign domain</p>
    <p>(2) Run application</p>
    <p>(3) Describe configurations to allow access using logs</p>
    <p>(4) Run correctly?</p>
    <p>start</p>
    <p>No</p>
    <p>Yes</p>
    <p>End</p>
    <p>Typical process of writing the security policy</p>
    <p>Template generator</p>
    <p>Allow generator</p>
    <p>SPDL Tools</p>
    <p>SPDL tools aim to help writing security policy</p>
  </div>
  <div class="page">
    <p>Generate typical configuration  Daemon? Desktop application?</p>
    <p>Input knowledge about the target application  What file does it access?  What port does it use?</p>
  </div>
  <div class="page">
    <p>Generate policy by audit2allows approach  Generate configurations from access logs</p>
    <p>E.g  Log : httpd_t domain read accessed /var/www  Generated SPDL: in httpd_t, allow /var/www r;</p>
    <p>Do not have to write configurations by hand</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Created policy for PC server system and embedded system</p>
    <p>PC  Linux: Cent OS5  Running Services:</p>
    <p>auditd,avahidaemon,crond,cupsd,dhclient,gdm,httpd,klogd,mcstransd,named,ntpd,portmap,samba,send-mail,sshd,syslogd</p>
    <p>Configured 16 domains in the security policy  Embedded System</p>
    <p>Hardware:  CPU: SH7751R@240Mhz, RAM:64MB, FlashRom:64MB</p>
    <p>Linux: Hand-maid Linux (Linux distribution is not used)  Running Services:</p>
    <p>httpd,vsftpd,syslogd,klogd,portmap</p>
    <p>Configured 5 domains in the security policy</p>
  </div>
  <div class="page">
    <p>The amount of lines  401 lines for PC system  174 lines for embedded system  Does not take so much time to describe such amount</p>
    <p>Number of configuration elements  Permissions: 700(before) -&gt; 76(SPDL)  Macros: 2,000over(before) -&gt; about 10 statements(SPDL)  Type configurations: Necessary(before) -&gt; not necessary (SPDL)</p>
    <p>Template Generator  Assuming the tool user knows path of applications config files, log</p>
    <p>files, port number, 50% configurations are described by the tool.</p>
    <p>Allow Generator  Most of configurations generated by the tool could be used without</p>
    <p>modification</p>
  </div>
  <div class="page">
    <p># Assign httpd_t domain to http daemon</p>
    <p># Permit httpd_t to read /var/www</p>
    <p># Permit httpd_t to wait connection on tcp port 80</p>
    <p># Assign httpd_t domain to http daemon</p>
    <p># Permit httpd_t to read /var/www</p>
    <p># Permit httpd_t to wait connection on tcp port 80</p>
    <p>Configurations by SPDL (allow httpd to read /var/www and port 80)</p>
    <p>Similar configurations in refpolicy</p>
  </div>
  <div class="page">
    <p>In embedded system, size is very important  Refpolicy based security policies are 2-5MB</p>
    <p>The footprint of created policy for the embedded system  File size : 71KB  RAM Usage : 465KB  Not significant problem</p>
    <p>The size is small because unnecessary configurations are not included, only necessary configurations were described</p>
  </div>
  <div class="page">
    <p>Integrated permissions  Multiple SELinux permissions are merged to one integrated</p>
    <p>permission, so granularity is reduced.  Ex: Integrated permission r</p>
    <p>read permissions to file,symbolic link are merged  To allow access to symbolic link not normal file is impossible</p>
    <p>To solve this, we have to support new SPDL syntax to allow single SELinux permission.</p>
    <p>Audit2allow approach in allow generator  Unnecessary accesses may be allowed, if we use generated</p>
    <p>configurations blindly.  Example:</p>
    <p>If there is a bug in a target application, and the application accesses /etc/shadow by mistake.  Rules allowing access to /etc/shadow is generated</p>
    <p>We have to check output of allow generator.  Some tool to check mistake may be useful</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Conclusion  SEEdit makes it easy to write, understand security polcy configurations</p>
    <p>with SPDL and SPDL tools.  SPDL simplifies syntax to describe security policy configurations  SPDL tools help to write configurations by using knowledge of users and access logs.</p>
    <p>Future works  Current SEEdit can not be used for refpolicy based security policy</p>
    <p>Refpolicy can not be reused because SPDL converter can not generate configurations compatible with refpolicy</p>
    <p>Have to improve SPDL converter to generate configurations appendable to existing refpolicy configurations</p>
    <p>Availability  Available at http://seedit.sourceforge.net/  Last update of web page is 2008, but code is still updated in 2009.</p>
    <p>Latest code is available in subversion  svn co https://seedit.svn.sourceforge.net/svnroot/seedit/trunk</p>
  </div>
  <div class="page">
    <p>Linux is a registered trademark of Linus Torvalds in the U.S. and other countries..</p>
    <p>All other trademarks or registered trademarks are the property of their respective owners.</p>
  </div>
</Presentation>
