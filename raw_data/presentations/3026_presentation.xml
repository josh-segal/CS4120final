<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Early detection of configuration errors to reduce failure damage</p>
    <p>Tianyin Xu, Xinxin Jin, Peng Huang, Yuanyuan Zhou,</p>
    <p>Shan Lu, Long Jin, Shankar Pasupathy</p>
    <p>UC San Diego University of Chicago NetApp</p>
    <p>done</p>
  </div>
  <div class="page">
    <p>This paper is not about bugs about configuration errors.</p>
    <p>done</p>
    <p>bad values inside configuration files</p>
    <p>introduced by sysadmins</p>
    <p>nothing wrong in our code</p>
  </div>
  <div class="page">
    <p>When systems use bad configuration values, the code does report errors.</p>
    <p>throw exceptions</p>
    <p>return error code</p>
    <p>crash with coredumps</p>
    <p>correct != timely</p>
  </div>
  <div class="page">
    <p>/* sys_24-7.c */</p>
    <p>signal(SIGSEGV, call_techsup);</p>
    <p>static void call_techsup(int sig) { if (fork() == 0) { char* args[] = {0911, SOS}; int rv = execvp(dial_prog_path, args); if (rv != 0) fprintf(stderr, Im sorry (%d)!, errno);</p>
    <p>} }</p>
    <p>Errors are often reported too late!</p>
    <p>configuration/bad/dial/path</p>
  </div>
  <div class="page">
    <p>/* sys_24-7.c */</p>
    <p>signal(SIGSEGV, call_techsup);</p>
    <p>static void call_techsup(int sig) { if (fork() == 0) { char* args[] = {0911, SOS}; int rv = execvp(dial_prog_path, args); if (rv != 0) fprintf(stderr, Im sorry (%d)!, errno);</p>
    <p>} }</p>
    <p>Errors are often reported too late!</p>
    <p>configuration/bad/dial/path</p>
    <p>Shoot! Well, this is unexpected</p>
    <p>Error code: 500</p>
    <p>An error has occurred and were working</p>
    <p>to fix the problem!</p>
    <p>The service will be up and running shortly.</p>
    <p>Its too late to apologize!</p>
  </div>
  <div class="page">
    <p>rollout</p>
    <p>Systems execution has stages.</p>
    <p>initialization</p>
    <p>observation period</p>
    <p>Time</p>
    <p>workload</p>
    <p>production</p>
    <p>error</p>
    <p>Server</p>
    <p>days/weeks</p>
    <p>Server Server Server Server Server</p>
    <p>Server</p>
    <p>Server Server</p>
    <p>Server Server Server Server</p>
    <p>Server</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>initialization rollout workload error</p>
    <p>d a</p>
    <p>m a</p>
    <p>g e</p>
    <p>o f</p>
    <p>co n</p>
    <p>fi g</p>
    <p>e rr</p>
    <p>o rs</p>
    <p>Chart Title</p>
    <p>All stages are not created equal.</p>
    <p>fix</p>
    <p>revenue loss</p>
    <p>observation period production</p>
    <p>Server</p>
    <p>Fault tolerance</p>
    <p>service outage</p>
  </div>
  <div class="page">
    <p>Misconfigured backup DNS (used upon attacks) made LinkedIn inaccessible for half a day.</p>
    <p>Faulty failover configurations turned a 10 minute outage into a 2.5 hour ordeal.</p>
    <p>Misconfigured data protection allowed a bug to wipe out 10% of the storage nodes.</p>
    <p>Does this truly happen?</p>
  </div>
  <div class="page">
    <p>Sysadmins wish</p>
    <p>All the configuration</p>
    <p>errors can be exposed</p>
    <p>at initialization.</p>
    <p>initialization rollout workload error</p>
    <p>observation period production</p>
    <p>Difficult for sysadmins</p>
    <p>to test out latent</p>
    <p>configuration errors</p>
    <p>Reality</p>
  </div>
  <div class="page">
    <p>Contribution</p>
    <p>A perspective of checking configurations early and detect errors timely</p>
    <p>A study on real-world configuration checking practices  deficiency of built-in configuration checks  prevalent threats of latent configuration errors</p>
    <p>PCheck: tooling support for automatically generating configuration checking code  help systems detect configuration errors early  effective, safe, and efficient</p>
  </div>
  <div class="page">
    <p>How well terribly do systems check their configurations?</p>
    <p>Studied configuration parameters of R.A.S. (Reliability, Availability, Serviceability) features</p>
    <p>Software RAS Param.</p>
    <p>HDFS 44</p>
    <p>YARN 35</p>
    <p>HBase 25</p>
    <p>Apache 14</p>
    <p>Squid 21</p>
    <p>MySQL 43</p>
    <p>mission critical</p>
    <p>not really needed for initialization</p>
    <p>12%39% are not used during initialization</p>
    <p>w/o early checking,</p>
    <p>errors would become</p>
    <p>latent &amp; catastrophic.</p>
  </div>
  <div class="page">
    <p>How well terribly do systems check their configurations?</p>
    <p>14%93% of the studied parameters do not have any special checking code at initialization</p>
    <p>rely on usage code for checking/reporting errors</p>
  </div>
  <div class="page">
    <p>Detecting latent configuration errors would require separate checking code at systems initialization phase.</p>
  </div>
  <div class="page">
    <p>Systems already have checking logic implied by the usage of configuration values (though usage code often comes late).</p>
    <p>Can we leverage usage-implied checking to detect configuration errors early?</p>
  </div>
  <div class="page">
    <p>Why not copy+paste the code that uses configuration values into initialization?</p>
    <p>use(cfg1)</p>
    <p>use(cfg2)</p>
    <p>initialization rollout workload error</p>
    <p>observation period production 14</p>
    <p>use(cfg1)</p>
    <p>use(cfg2)</p>
  </div>
  <div class="page">
    <p>use(cfg1)</p>
    <p>use(cfg2)</p>
    <p>Why not copy+paste the code that uses configuration values into initialization?</p>
    <p>use(cfg1)</p>
    <p>use(cfg2)</p>
    <p>initialization rollout workload error</p>
    <p>observation period production 14</p>
  </div>
  <div class="page">
    <p>/* sys_24-7.c */</p>
    <p>signal(SIGSEGV, call_techsup);</p>
    <p>static void call_techsup(int sig) { if (fork() == 0) { char* args[] = {0911, SOS}; int rv = execvp(dial_prog_path, args); if (rv != 0) fprintf(stderr, Im sorry (%d)!, errno);</p>
    <p>} }</p>
    <p>configuration</p>
    <p>Demo</p>
  </div>
  <div class="page">
    <p>/* sys_24-7.c */</p>
    <p>signal(SIGSEGV, call_techsup);</p>
    <p>static void call_techsup(int sig) { if (fork() == 0) { char* args[] = {0911, SOS}; int rv = execvp(dial_prog_path, args); if (rv != 0) fprintf(stderr, Im sorry (%d)!, errno);</p>
    <p>} }</p>
    <p>Demo</p>
    <p>int rv = execvp(dial_prog_path, args);</p>
    <p>configuration</p>
    <p>Copy</p>
  </div>
  <div class="page">
    <p>/* sys_24-7.c */</p>
    <p>static int sys_init() { load_config(); ... ... ...</p>
    <p>}</p>
    <p>Demo</p>
    <p>int rv = execvp(dial_prog_path, args);</p>
    <p>Paste</p>
  </div>
  <div class="page">
    <p>Problem 1 Executing code needs context  args is undefined</p>
    <p>Problem 2 Execution can have side effects  prank calls are crimes.</p>
    <p>exec() removes the current process image</p>
    <p>Copy+paste code does not work!</p>
    <p>int rv = execvp(diag_prog_path, args);</p>
    <p>args is undefined</p>
  </div>
  <div class="page">
    <p>best effort: may not always be able to determine the values</p>
    <p>configurations often have relatively simple context</p>
    <p>int rv = execvp(diag_prog_path, args);</p>
    <p>Backtrack to determine values of undefined variables</p>
    <p>+ char* args[] = {0911, SOS};</p>
    <p>Produce necessary context</p>
  </div>
  <div class="page">
    <p>Sandbox the checking code</p>
    <p>int rv = execvp(diag_prog_path, args);</p>
    <p>char* args[] = {0911, SOS};</p>
    <p>- int rv = execvp(diag_prog_path, args);</p>
    <p>- char* args[] = {0911, SOS};</p>
    <p>+ int rv = check_execvp(diag_prog_path);</p>
    <p>Prevent side effects</p>
    <p>Rewrite instructions based on check utilities that validate the operands w/o executing the instructions</p>
    <p>int rv = check_execvp(diag_prog_path);</p>
  </div>
  <div class="page">
    <p>PCheck implementation</p>
    <p>Works for both C and Java programs  LLVM compiler framework for C code</p>
    <p>Soot compiler framework for Java code</p>
  </div>
  <div class="page">
    <p>PCheck implementation</p>
    <p>prog</p>
    <p>conf</p>
    <p>APIs</p>
    <p>Input Output</p>
    <p>checker</p>
    <p>checker</p>
    <p>checker</p>
    <p>prog</p>
    <p>Analysis</p>
    <p>invok. loc.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Evaluate on 58 real-world latent configuration errors  37 new errors (discovered in our study)</p>
    <p>21 historical errors (caused failures in the past)</p>
  </div>
  <div class="page">
    <p>done</p>
    <p>How many errors can be detected?</p>
    <p>Chart Title</p>
    <p>Historical errors New errors</p>
    <p># l a t e n t c o n f i g e r r o r s</p>
    <p>missed</p>
    <p>detected</p>
  </div>
  <div class="page">
    <p>done</p>
    <p>How many errors can be detected?</p>
    <p>Type of errors # (%) errors detected</p>
    <p>Historical New</p>
    <p>Type/format errors 1/1 (100.0%) 13/13 (100.0%)</p>
    <p>Invalid options/ranges 2/2 (100.0%) 4/4 (100.0%)</p>
    <p>Incorrect files/dirs 9/12 (75.0%) 5/7 (71.4%)</p>
    <p>Miscellaneous errors 3/6 (50.0%) 7/13 (53.8%)</p>
    <p>Total 15/21 (71.4%) 29/37 (78.4%)</p>
  </div>
  <div class="page">
    <p>done</p>
    <p>What errors are missed?</p>
    <p>Cannot generate the checking code  fail to produce the execution context</p>
    <p>e.g., values from runtime requests</p>
    <p>Cannot safely execute the checking code  unknown side effects</p>
    <p>e.g., used as bash command</p>
  </div>
  <div class="page">
    <p>done</p>
    <p>Caveats</p>
    <p>Errors manifested via a long running period (we cannot run checks for too long.)  resource misconfigurations (exhaustion)</p>
    <p>performance misconfigurations (degradation)</p>
    <p>Errors not exposed via obvious anomalies (we report errors based on exceptions, error code, etc.)  semantic errors (e.g., backup data to wrong files)</p>
  </div>
  <div class="page">
    <p>Checking overhead</p>
    <p>HDFS/YARN/HBase less than 1000 msec</p>
    <p>Apache/MySQL/Squid less than 100 msec</p>
    <p>False positives  tested with the default values and real-world settings</p>
    <p>collected from 830 configuration files</p>
    <p>only 3 parameters have false alarms reported - caused by imprecise analysis that missed control-flow dependencies (the exposed anomalies are unreal)</p>
    <p>done</p>
    <p>What is the cost?</p>
  </div>
  <div class="page">
    <p>Check your configurations early!</p>
    <p>Treat configuration errors like fatal diseases</p>
    <p>PCheck: auto-generating &amp; invoking configuration checking code to enforce early detection.</p>
    <p>Conclusion</p>
  </div>
</Presentation>
