<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance Segmentation</p>
    <p>Rui Abreu, Dave Archer, Erin Chapman, James Cheney, Hoda Eldardiry, Adria Gascon</p>
    <p>TaPP 2016 June 9, 2016</p>
  </div>
  <div class="page">
    <p>Office of Personnel Management breach (2015)</p>
  </div>
  <div class="page">
    <p>Context  &quot;Advanced persistent threats&quot; (APTs) are</p>
    <p>stealthy, long-term, resourceful attackers</p>
    <p>Simulate normal user behavior most of the time  Lateral attacks, avoid violating fixed security policy</p>
    <p>Transparent Computing: try to fight APTs through pervasive recording and analysis of provenance</p>
    <p>$60m DARPA research program (2015-19)</p>
  </div>
  <div class="page">
    <p>Provenance and Security</p>
    <p>Security OF provenance  provenance abstraction (ProvAbs, ProPub,</p>
    <p>provenance redaction etc.)</p>
    <p>privacy views (Davidson et al. 2011)  vs. using provenance FOR security</p>
    <p>provenance based access control (Thuraisingham et al., Sandhu et al.)</p>
    <p>&quot;transparent computing&quot; (this work)</p>
  </div>
  <div class="page">
    <p>Problem  Other projects are developing systems (e.g. SPADE,</p>
    <p>DTrace, RecProv) to record + generate provenance</p>
    <p>We are developing an analysis system called ADAPT (A Diagnostics Approach to Advanced Persistent Threat detection)</p>
    <p>The incoming provenance data is much too massive for existing analysis techniques we have in mind</p>
    <p>Also, some of the techniques expect preprocessing into &quot;uniform&quot; chunks</p>
    <p>(e.g. all user activity over 1-hour periods)</p>
  </div>
  <div class="page">
    <p>Ingestion</p>
    <p>Segmentation</p>
    <p>Incoming provenance data from recorder (e.g. SPADE)</p>
    <p>Graph DB</p>
    <p>Classification, normalcy detection and diagnostics</p>
    <p>Attack subgraph / warning</p>
  </div>
  <div class="page">
    <p>Terminology  Raw graph: the unadulterated input graph from recorder  Segment: subgraphs that isolate interesting features  Segment layer: a summary graph with nodes</p>
    <p>corresponding to summarizing relationships between them</p>
    <p>Batch segmentation: construct segment layer for a given input graph</p>
    <p>Incremental segmentation: given incoming stream of provenance data, incrementally construct/add to segment layer</p>
  </div>
  <div class="page">
    <p>Example: monitoring agents</p>
    <p>entity activity agent</p>
  </div>
  <div class="page">
    <p>Example: monitoring agents</p>
    <p>entity activity agent</p>
  </div>
  <div class="page">
    <p>Example: monitoring agents</p>
    <p>entity activity agent</p>
  </div>
  <div class="page">
    <p>Example: monitoring agents</p>
    <p>entity activity agent</p>
  </div>
  <div class="page">
    <p>Example: monitoring agents</p>
    <p>entity activity agent</p>
  </div>
  <div class="page">
    <p>Complications  Scale: Segmentation needs to be fast hence</p>
    <p>criteria need to be very simple</p>
    <p>Retention: Does segment layer suffice for analysis or do we need to keep raw data? (For how long?)</p>
    <p>Representation: Segments need not be convex. How to represent arbitrary subgraphs?</p>
    <p>Incomplete information: What to do if time information or edges missing?</p>
  </div>
  <div class="page">
    <p>Segmentation criteria  Different applications may need different things</p>
    <p>(e.g. user vs. process centric, large vs. small time windows)</p>
    <p>Segmentation criteria to make this configurable  Two basic kinds of segments so far:</p>
    <p>by radius (up to N, from a &quot;seed&quot; node, following certain edge types only)</p>
    <p>by time (regular time intervals)</p>
  </div>
  <div class="page">
    <p>Example (a)</p>
    <p>segment byPidTime(pid=X, startTime=T)</p>
    <p>by radius 3 from PID=X</p>
    <p>following {&quot;wasDerivedFrom&quot;, &quot;used&quot;, &quot;wasGeneratedBy&quot;,</p>
    <p>&quot;wasAssociatedWith&quot;, &quot;wasInvalidatedBy&quot;}</p>
    <p>and time window 24:00:00 from 2013-03-16T00:00:00 starting T</p>
    <p>(b)</p>
    <p>{&quot;segmentation_specification&quot; :</p>
    <p>{&quot;segment&quot; :</p>
    <p>{&quot;name&quot;: &quot;byPidTime&quot;,</p>
    <p>&quot;args&quot;: [{&quot;property&quot; : &quot;pid&quot;, &quot;value&quot; : {&quot;var&quot; : &quot;X&quot;}},</p>
    <p>{&quot;property&quot; : &quot;startTime&quot;, &quot;value&quot; : {&quot;var&quot; : &quot;T&quot;}}],</p>
    <p>&quot;specifications&quot; : [</p>
    <p>{&quot;radius&quot; : { &quot;r&quot; : 3,</p>
    <p>&quot;from&quot; : {&quot;property&quot; : &quot;PID&quot;, &quot;var&quot;: &quot;X&quot;},</p>
    <p>&quot;edges&quot; : [&quot;wasDerivedFrom&quot;,</p>
    <p>&quot;used&quot;,</p>
    <p>&quot;wasGeneratedBy&quot;,</p>
    <p>&quot;wasAssociatedWith&quot;,</p>
    <p>&quot;wasInvalidatedBy&quot;]}},</p>
    <p>{&quot;time&quot; : {&quot;window&quot; : {&quot;days&quot; : 0,</p>
    <p>&quot;hours&quot; : 24,</p>
    <p>&quot;minutes&quot; : 0,</p>
    <p>&quot;seconds&quot; : 0},</p>
    <p>&quot;from&quot; : &quot;2013-03-16T00:00:00&quot;,</p>
    <p>&quot;starting&quot; : {&quot;var&quot; : &quot;T&quot;}}}</p>
    <p>]</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>Figure 3. An example segmentation specification and its JSON representation</p>
    <p>according to spec2. Then the result is:</p>
    <p>{(SG2, 1 ] 2) | (SG1, 1) 2 Y1, (SG2, 2) 2 Y2(SG1)} where we again consider only the compatible pairs 1, 2 that agree on any common variable values.</p>
    <p>The difference between and and then is that and considers each specification independently on the current graph, and takes the intersection of the resulting subgraphs, whereas then segments using the first specification, then focuses on each resulting subgraph and segments each one using the second specification. The variable bindings are combined using ] in either case.</p>
    <p>In our current prototype, each segment in the final result is recorded in the graph database as a new segment node, whose name property is set to the declared segment name, and other properties in the segment header are set to the values obtained from the corresponding variable bindings. The segment node is also linked to all of the nodes in the segment.</p>
    <p>Notice that we include empty segments in the result, as it may be interesting to record the fact that a segment with given metadata was considered and is indeed empty (e.g. process 42 had no activity between midnight and 1am on Friday.) It may, of course, be worthwhile to consider compression techniques to avoid storing large numbers of empty segments explicitly.</p>
    <p>A.3 Edges among segments We can consider several kinds of relationships among segments, defined in terms of the raw graph, that can be recorded as edges in the segment layer. We say that a segment overlaps another segment if they have vertices in common, otherwise the segments are disjoint. Two segments are contiguous if the shortest path between them is</p>
    <p>of length 1. A segment S2 depends on S1 if there is a directed path from S1 to S2 in G. Two segments are concurrent if each depends on the other. Two segments are independent if neither depends on the other. If S2 depends on S1 but S1 does not depend on S2 then we say that S1 happens before S2.</p>
    <p>Currently we do not define explicit edges among segments during segmentation. However, since the segments are linked to the nodes of their subgraphs, such edges can be defined implicitly as queries. For example, we could define an edge relationship between segment nodes to hold if there is a (directed) path from a node in one segment to a node in another. It is not yet clear whether we want to (or need to) persist such edges in the database or simply generate them on the fly when the segment layer is analyzed by later stages, such as the diagnostic engine [1].</p>
    <p>This says:  starting at each node with a PID, construct segments of up to 3 edges</p>
    <p>away, following usual PROV event edges</p>
    <p>and split into 1-day time windows starting on March 16, 2013  Variables X, T bound to PID and start time of segment,</p>
    <p>respectively.</p>
    <p>&quot;and&quot; means segment using two different strategies and combine using pairwise intersection</p>
  </div>
  <div class="page">
    <p>Validity of segmentation</p>
    <p>What do other components need / expect from segment layer?</p>
    <p>Acyclicity: helpful but not necessary  Can view segment layer as an &quot;index&quot; or</p>
    <p>&quot;summary&quot; of full graph</p>
    <p>(We made progress on agreeing on this since finalizing paper</p>
    <p>this was part of the goal of writing up in early stage...)</p>
  </div>
  <div class="page">
    <p>Conclusions and next steps</p>
    <p>Work on segmentation (and rest of system) in progress as we speak</p>
    <p>Future work:  Using (Titan/Gremlin) graph queries to extract</p>
    <p>segments, instead of in-memory processing?</p>
    <p>Incremental segmentation: efficiently maintain segment layer as graph grows</p>
    <p>Adaptive segmentation: can we learn good segmentation criteria?</p>
    <p>What will we learn from running system?</p>
  </div>
</Presentation>
