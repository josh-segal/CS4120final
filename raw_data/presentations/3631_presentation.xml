<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>P2IM: Scalable and Hardware-independent Firmware Testing via Automatic Peripheral Interface Modeling</p>
    <p>Bo Feng, Alejandro Mera, and Long Lu Northeastern University</p>
    <p>USENIX Security 2020</p>
  </div>
  <div class="page">
    <p>Microcontrollers (MCU) are ubiquitous</p>
    <p>Smart light bulb Pulse oximeter</p>
    <p>DronePLC 3D printer</p>
    <p>Fitness tracker</p>
    <p>MCU is a single-chip computer</p>
    <p>28.1 billion MCUs are sold worldwide in 2018*</p>
    <p>*https://www.statista.com/statistics/935382/worldwide-microcontroller-unit-shipments/</p>
  </div>
  <div class="page">
    <p>MCU vulnerabilities</p>
    <p>Arbitrary code execution Consequences  Digital damage (e.g., privacy leakage)  Physical damage (e.g., human injury)</p>
    <p>Most vulnerabilities are from firmware</p>
  </div>
  <div class="page">
    <p>MCU firmware</p>
    <p>Firmware</p>
    <p>Application</p>
    <p>Library</p>
    <p>OS (opt.) Driver</p>
    <p>Whole software stack of the MCU</p>
    <p>Bugs appear in all components</p>
  </div>
  <div class="page">
    <p>Firmware testing</p>
    <p>Fuzzing can effectively find bugs on desktop programs</p>
    <p>As firmware has similar bugs to desktop programs, we test firmware with fuzzers</p>
    <p>Firmware can be tested either on a device or emulator</p>
    <p>Because of limited resources on MCU, on-device fuzzing is not feasible</p>
  </div>
  <div class="page">
    <p>Emulator-based firmware testing</p>
    <p>Processor</p>
    <p>Peripheral 1</p>
    <p>Peripheral 2</p>
    <p>Peripheral n</p>
    <p>Peripheral</p>
    <p>Interface Register Interrupt</p>
  </div>
  <div class="page">
    <p>Processor</p>
    <p>Peripheral 1</p>
    <p>Peripheral 2</p>
    <p>Peripheral n</p>
    <p>Peripheral</p>
    <p>Interface Register Interrupt</p>
    <p>Emulator-based firmware testing</p>
    <p>Not emulated because peripherals are diverse and hard to emulate</p>
    <p>Firmware cannot boot</p>
  </div>
  <div class="page">
    <p>Existing solution (1)</p>
    <p>Processor</p>
    <p>Peripheral 1</p>
    <p>Peripheral 2</p>
    <p>Peripheral n</p>
    <p>Peripheral</p>
    <p>Interface Register Interrupt Peripheral emulation:</p>
    <p>Emulate peripheral hardware by software components in the emulator</p>
    <p>Incomplete support for peripherals, significant manual efforts</p>
  </div>
  <div class="page">
    <p>Existing solution (2)</p>
    <p>Processor</p>
    <p>Peripheral 1</p>
    <p>Peripheral 2</p>
    <p>Peripheral n</p>
    <p>Peripheral</p>
    <p>Interface Register Interrupt Hardware-in-the-loop emulation:</p>
    <p>Use real peripheral hardware to handle peripheral access in the emulator</p>
    <p>Rely on real hardware, slow, unscalable</p>
  </div>
  <div class="page">
    <p>Existing solution (3)</p>
    <p>Processor</p>
    <p>Peripheral 1</p>
    <p>Peripheral 2</p>
    <p>Peripheral n</p>
    <p>Peripheral</p>
    <p>Interface Register Interrupt Partial emulation:</p>
    <p>Replace peripheral-dependent firmware code with software stubs that have the same functionalities</p>
    <p>Unable to test peripheral-dependent code, significant manual efforts</p>
  </div>
  <div class="page">
    <p>Design goals</p>
    <p>Automatic</p>
    <p>A great number of MCU devices need to be tested</p>
    <p>Limited time and money budget for testing</p>
    <p>Human efforts can be minimized</p>
    <p>Hardwareindependent</p>
    <p>Firmware is tested in the emulator</p>
    <p>Faster and easier to automate</p>
    <p>Peripheralagnostic</p>
    <p>Peripherals are diverse</p>
    <p>Handle peripherals using a uniform approach</p>
    <p>Given a new peripheral, no extra effort is needed</p>
    <p>Scalable</p>
    <p>Multiple fuzzer instances can run in parallel</p>
    <p>Improve code coverage</p>
  </div>
  <div class="page">
    <p>Observation</p>
    <p>Peripherals are diverse in terms of type and functionality, but interface is not</p>
    <p>Peripheral Interface Type Many 2 Functionality Many 3 Diversity High Low</p>
  </div>
  <div class="page">
    <p>Key idea</p>
    <p>Treat peripherals as black box</p>
    <p>Abstract a model to handle register access and interrupt firing for a wide range of peripherals</p>
    <p>Processor</p>
    <p>Peripherals</p>
    <p>Register Interrupt</p>
    <p>CR SR</p>
    <p>DR C&amp;SR INT</p>
    <p>Interface</p>
  </div>
  <div class="page">
    <p>Comparison with state-of-the-art</p>
    <p>Approaches Automatic Hardware-independent Peripheralagnostic Scalable Existing work</p>
    <p>Peripheral emulation !  !  GNU MCU Eclipse QEMU (2015), PartEmu (Usenix 20)</p>
    <p>Hardware-in-the-loop emulation ! !  !</p>
    <p>Avatar (NDSS 14), Prospect (Asia CCS 14), Surrogates (WOOT 15), Charm (Usenix 18)</p>
    <p>Partial emulation !    Firmadyne (NDSS 16), HALucinator (Usenix 20), PartEmu (Usenix 20)</p>
    <p>P2IM (our work)</p>
  </div>
  <div class="page">
    <p>Crashing Test Cases</p>
    <p>Processor Emulator Firmware Binary</p>
    <p>Processor-peripheral Interface Model</p>
    <p>P IM2</p>
    <p>Fuzzer</p>
    <p>Workflow</p>
  </div>
  <div class="page">
    <p>Interface modeling</p>
    <p>How to model an interface?</p>
    <p>Peripherals determine register value and interruptfiring timing, but peripherals are considered as black box</p>
    <p>Registers are categorized by their functionalities and handled accordingly</p>
    <p>Interrupts can be fired at any time. We use a fixed frequency</p>
    <p>Manual</p>
  </div>
  <div class="page">
    <p>Register categories</p>
    <p>Control register (CR)</p>
    <p>Status register (SR)</p>
    <p>Data register (DR)</p>
    <p>Control-status register (C&amp;SR)</p>
  </div>
  <div class="page">
    <p>Interface modeling (2)</p>
    <p>Given a firmware, how to identify the interface needs to be modeled?</p>
    <p>Registers are identified and categorized by monitoring access to the memory-mapped peripheral region</p>
    <p>Interrupts are detected by monitoring the interrupt controller</p>
    <p>Automated</p>
  </div>
  <div class="page">
    <p>Crashing Test Cases</p>
    <p>Processor Emulator Firmware Binary</p>
    <p>Processor-peripheral Interface Model</p>
    <p>P IM2</p>
    <p>Fuzzer</p>
    <p>Workflow</p>
    <p>Existing fuzzers can be used without modification</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>70 sample firmware for essential peripheral operations  E.g., data transmission through USART peripheral</p>
    <p>ADC</p>
    <p>GPIO</p>
    <p>I2C</p>
    <p>PWD</p>
    <p>DAC</p>
    <p>SPI</p>
    <p>USART</p>
    <p>Timer</p>
    <p>Peripheral</p>
    <p>STM32 F103</p>
    <p>NXP MK64F</p>
    <p>Atmel SAM3X</p>
    <p>MCU OS</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>The majority of firmware boot and perform essential peripheral operations normally  79% test cases pass</p>
    <p>The accuracy of register categorization is between 76% and 92%</p>
    <p>Accuracy is comparable on different peripherals</p>
  </div>
  <div class="page">
    <p>Fuzzing</p>
    <p>Fuzz-test 10 real-world firmware  Drone, Robot, Gateway, PLC, etc.</p>
  </div>
  <div class="page">
    <p>Fuzzing performance</p>
    <p>The accuracy of register categorization is between 69.6% and 100%  Speed and basic block coverage:</p>
    <p>Firmware Speed (# tests/s) Basic block coverage Coverage improvement</p>
    <p>Drone 17.2 58% 7x</p>
    <p>CNC 18.0 70% 26x</p>
    <p>Steering C. 32.3 20% 30x</p>
  </div>
  <div class="page">
    <p>Fuzzing result</p>
    <p>Detect 7 unique bugs, all of which are  Previously unknown  Remotely exploitable  Reproducible on real device</p>
    <p>Firmware Unique bugs Bug nature</p>
    <p>PLC</p>
    <p>Gateway 1 Buffer overflow</p>
    <p>Heat Press 1 Buffer overflow</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Propose P2IM, the first scalable and hardware-independent firmware testing framework  Design and implement a novel interface modeling mechanism  Fuzz-test 10 real-world firmware  Find 7 previously-unknown vulnerabilities</p>
    <p>Code and Tested Firmware at:</p>
    <p>https://github.com/RiS3-Lab/p2im</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Questions?</p>
    <p>feng.bo@northeastern.edu</p>
  </div>
</Presentation>
