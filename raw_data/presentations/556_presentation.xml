<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Peter R. Pietzuch</p>
    <p>prp@doc.ic.ac.uk</p>
    <p>DEFCon: High-Performance Event Processing with Information Security</p>
    <p>Matteo Migliavacca, Ioannis Papagiannis, Peter Pietzuch Imperial College London</p>
    <p>David M. Eyers, Jean Bacon Cambridge Computer Laboratory</p>
    <p>Brian Shand National Health Service, UK</p>
    <p>migliava@doc.ic.ac.uk</p>
  </div>
  <div class="page">
    <p>Event Stream Processing Needs Strong Security</p>
    <p>Event processing  Stream of messages transformed</p>
    <p>in near real-time by processing units  Confidential information:</p>
    <p>healthcare, social networks, finance</p>
    <p>Problem: incorrect event flows  Lead to security violations  Within application , with the environment  Possible causes: bugs, security attacks, third party</p>
    <p>code, malicious code 1</p>
    <p>log</p>
    <p>access control</p>
  </div>
  <div class="page">
    <p>Financial Processing: Security and Latency</p>
    <p>market data processing and local brokering  Security is important</p>
    <p>Data is valuable: banks fined for exploiting client information  Performance constraints</p>
    <p>Latency, Throughput  Shared Platform</p>
    <p>Processing near stock exchanges costly: share resources, reduce entry costs for small firms</p>
    <p>Local brokering to avoid transaction fees and trade anonymously 2</p>
    <p>Bank Investor Monitor</p>
    <p>monitor</p>
    <p>match</p>
    <p>order</p>
    <p>Broker deal</p>
    <p>Stock Ticker</p>
    <p>tick</p>
    <p>Client Investor Monitor</p>
    <p>log 2</p>
  </div>
  <div class="page">
    <p>Security Approach: Information Flow Control</p>
    <p>Protect data end-to-end: Information Flow Control (IFC):  Dont try to eliminate all bugs and (hard!)  Track and control information flows in application  Previously applied to operating systems and programming languages</p>
    <p>Goal: apply IFC to current high-performance event processing systems</p>
    <p>Stock Ticker</p>
    <p>Bank Investor</p>
    <p>Client Investor</p>
    <p>Monitor</p>
    <p>Monitor</p>
    <p>Broker</p>
    <p>monitor</p>
    <p>match</p>
    <p>tick order</p>
    <p>deal 1</p>
    <p>log 2</p>
  </div>
  <div class="page">
    <p>Contributions and Overview</p>
    <p>Decentralized Event Flow Control (DEFC) model  IFC applied to event processing</p>
    <p>DEFCon high-performance implementation  Safe and efficient event flows in Java</p>
    <p>Practical isolation methodology  Secure production-level language runtimes with low effort (OpenJDK 6)</p>
    <p>Evaluation  Throughput and latency overhead</p>
  </div>
  <div class="page">
    <p>DEFCon</p>
    <p>Event Processing in DEFC</p>
    <p>Bank Investor Client Monitor Client Investor 77</p>
    <p>name data S (confidentiality)</p>
    <p>{client77}</p>
    <p>{client77}</p>
    <p>S:{client77} S:{}</p>
    <p>Event</p>
    <p>parts</p>
    <p>name data</p>
    <p>command monitor</p>
    <p>stock IBM</p>
    <p>name data S (confidentiality) command monitor { }</p>
    <p>stock IBM {client77}</p>
    <p>log</p>
    <p>S:{client77}</p>
    <p>unit can output part iff</p>
    <p>S(unit)  S(part)</p>
    <p>unit can input part iff</p>
    <p>S(part)  S(unit)</p>
  </div>
  <div class="page">
    <p>DEFC Privileges</p>
    <p>Clearance privilege: receiving confidential information  Allows units to add tag to its label</p>
    <p>Declassification privilege: making confidential data public :  Allows units to remove tag from its label</p>
    <p>Bank Investor Client Monitor Client Investor 77</p>
    <p>S:{client77} S:{} S:{client77}</p>
    <p>can receive confidential information</p>
    <p>cannot receive confidential information</p>
    <p>client77+</p>
    <p>client77+</p>
    <p>client77+</p>
    <p>client77</p>
    <p>client77+, client77</p>
    <p>cannot make confidential information public</p>
    <p>can make confidential information public</p>
  </div>
  <div class="page">
    <p>An Example of Leaks to Avoid</p>
    <p>Untainted unit tries to read tainted part  First try: return access denied</p>
    <p>Client Monitor</p>
    <p>name data S (confidentiality)   {client77}</p>
    <p>S:{client77}</p>
    <p>Access Denied</p>
    <p>S:{}</p>
  </div>
  <div class="page">
    <p>An Example of Leaks to Avoid</p>
    <p>Untainted unit tries to read tainted part  First try: return access denied</p>
    <p>Leaks name of secret parts</p>
    <p>Client Monitor</p>
    <p>name data S (confidentiality)   {client77}</p>
    <p>S:{client77}</p>
    <p>name data S (confidentiality) FirstLetterIsI  {client77}</p>
    <p>Access Denied</p>
    <p>FirstLetter = I ?</p>
    <p>stock=IBM</p>
    <p>Bank Investor S:{}</p>
    <p>FirstLetterIsI</p>
    <p>S:{}</p>
  </div>
  <div class="page">
    <p>An Example of Leaks to Avoid</p>
    <p>Untainted unit tries to read tainted part  First try: return access denied</p>
    <p>Leaks name of secret parts  Second try: update unit label to part label</p>
    <p>Client Monitor</p>
    <p>name data S (confidentiality)   {client77}</p>
    <p>S:{client77}</p>
    <p>name data S (confidentiality) FirstLetterIsI  {client77}</p>
    <p>Access Denied</p>
    <p>FirstLetter = I ?</p>
    <p>stock=IBM</p>
    <p>Bank Investor S:{}</p>
    <p>FirstLetterIsI</p>
    <p>Ok, label change</p>
    <p>S:{} S:{client77}</p>
  </div>
  <div class="page">
    <p>An Example of Leaks to Avoid</p>
    <p>Untainted unit tries to read tainted part  First try: return access denied</p>
    <p>Leaks name of secret parts  Second try: update unit label to part label</p>
    <p>Secret inferred by absence of communication</p>
    <p>Client Monitor</p>
    <p>name data S (confidentiality)   {client77}</p>
    <p>S:{client77}</p>
    <p>name data S (confidentiality) FirstLetterIsI  {client77}</p>
    <p>Access Denied</p>
    <p>FirstLetter = I ?</p>
    <p>stock=IBM</p>
    <p>Bank Investor S:{}</p>
    <p>FirstLetterIsI</p>
    <p>Ok, label change</p>
    <p>FirstLetter = J ?</p>
    <p>S:{}</p>
    <p>Not Found</p>
    <p>FirstLetterIsNotJ S:{} S:{client77}</p>
  </div>
  <div class="page">
    <p>An Example of Leaks to Avoid</p>
    <p>Untainted unit tries to read tainted part  First try: return access denied</p>
    <p>Leaks name of secret parts  Second try: update unit label to part label</p>
    <p>Secret inferred by absence of communication  Solution: avoid implicit label changes, return part not found</p>
    <p>Result: all unit label changes must be explicit  First update label, then read part 11</p>
    <p>Client Monitor</p>
    <p>name data S (confidentiality)   {client77}</p>
    <p>S:{client77}</p>
    <p>name data S (confidentiality) FirstLetterIsI  {client77}</p>
    <p>Access Denied</p>
    <p>FirstLetter = I ?</p>
    <p>stock=IBM</p>
    <p>Bank Investor S:{}</p>
    <p>FirstLetterIsI</p>
    <p>Ok, label change</p>
    <p>FirstLetter = J ?</p>
    <p>S:{}</p>
    <p>Not Found</p>
    <p>FirstLetterIsNotJ</p>
    <p>Not Found</p>
    <p>??? S:{} S:{client77}</p>
  </div>
  <div class="page">
    <p>Contributions and Overview</p>
    <p>Decentralized Event Flow Control (DEFC) model  IFC applied to event processing</p>
    <p>DEFCon high-performance implementation  Safe and efficient event flows in Java</p>
    <p>Practical isolation methodology  Secure production-level language runtimes with low effort (OpenJDK 6)</p>
    <p>Evaluation  Throughput and latency overhead</p>
  </div>
  <div class="page">
    <p>DEFC assumes units communicate through labelled events  How to control communication between units?</p>
    <p>VM or OS processes: heavy, require copying of data  Use threads: sharing data in single address space  Java: mature, pervasive, good performance</p>
    <p>How to control communication between Java threads?</p>
    <p>DEFCon: Controlling Event Flows</p>
    <p>DEFCon</p>
    <p>Bank Investor Client Monitor</p>
    <p>Client Investor</p>
    <p>DEFCon label check</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Communication: Threads Share Immutable Data</p>
    <p>Unit Threads create new objects to put in events  Problem: how to deliver them to receiving units?</p>
    <p>Copy objects in events  Slow</p>
    <p>Stock:IBM</p>
    <p>Bank Investor Client Monitor</p>
    <p>Stock:IBM</p>
    <p>S:{} S:{}</p>
  </div>
  <div class="page">
    <p>Communication: Threads Share Immutable Data</p>
    <p>Unit Threads create new objects to put in events  Problem: how to deliver them to receiving units?</p>
    <p>Copy objects in events  Slow</p>
    <p>Transfer references to shared objects</p>
    <p>Stock:IBM</p>
    <p>Bank Investor Client Monitor</p>
    <p>S:{} S:{}</p>
  </div>
  <div class="page">
    <p>Communication: Threads Share Immutable Data</p>
    <p>Unit Threads create new objects to put in events  Problem: how to deliver them to receiving units?</p>
    <p>Copy objects in events  Slow</p>
    <p>Transfer references to shared objects  Problem if unit labels change</p>
    <p>Stock:IBM</p>
    <p>Bank Investor Client Monitor</p>
    <p>S:{} S:{} S:{client77} ?</p>
  </div>
  <div class="page">
    <p>Communication: Threads Share Immutable Data</p>
    <p>Unit Threads create new objects to put in events  Problem: how to deliver them to receiving units?</p>
    <p>Copy objects in events  Slow</p>
    <p>Transfer references to shared objects  Problem if unit labels change</p>
    <p>Shared state allows unrestricted communication  Solution: only allow immutable objects in event parts</p>
    <p>Bank Investor Client Monitor</p>
    <p>ImmutableStock:IBM</p>
    <p>S:{} S:{}</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Communication: Shared State in Runtimes</p>
    <p>JVM</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>Native OS</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Isolation Methodology Overview</p>
    <p>Goal  Provide isolation between Java Threads  Secure potentially dangerous targets: static fields and native</p>
    <p>methods</p>
    <p>Previous Java isolation approaches  Do not support fast message passing between isolates (MVM)  Use custom Class Libraries and/or JVMs (I-JVM)  Require extensive analysis of Class Library (KaffeOS, Joe-E)</p>
    <p>Our approach 1. Identify potentially dangerous targets using static analysis 2. Modify runtime behaviour of targets using aspect oriented</p>
    <p>programming (AOP) 3. White-list safe targets</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>JVM Native</p>
    <p>OS</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>JVM Native</p>
    <p>OS</p>
    <p>remo ved</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>~2000</p>
    <p>~1000</p>
    <p>OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>reach able</p>
    <p>JVM Native</p>
    <p>OS</p>
    <p>remo ved</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>~2000 ~900</p>
    <p>~1000 ~300</p>
    <p>OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>remo ved</p>
    <p>reach able</p>
    <p>JVM Native</p>
    <p>OS</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>~2000 ~900</p>
    <p>~1000 ~300</p>
    <p>transparent duplication</p>
    <p>security checks</p>
    <p>OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>remo ved</p>
    <p>reach able</p>
    <p>JVM Native</p>
    <p>OS</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>~2000 ~900</p>
    <p>~1000 ~300</p>
    <p>transparent duplication</p>
    <p>security checks</p>
    <p>white-listing</p>
    <p>OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Class Library</p>
    <p>Client Monitor Client Investor Bank Investor</p>
    <p>DEFCon</p>
    <p>remo ved</p>
    <p>reach able</p>
    <p>JVM Native</p>
    <p>OS</p>
    <p>static fields</p>
    <p>native methods</p>
    <p>~4000</p>
    <p>~2000</p>
    <p>~2000 ~900</p>
    <p>~1000 ~300</p>
    <p>transparent duplication</p>
    <p>security checks</p>
    <p>white-listing</p>
    <p>Target type</p>
    <p>Manually white-listed</p>
    <p>for unit execution for performance</p>
    <p>static fields 27 6</p>
    <p>native methods 15 9 OpenJDK 6</p>
  </div>
  <div class="page">
    <p>Isolation Summary</p>
    <p>What we achieved  Secured OpenJDK 6 for running financial scenario  Required few days of manual work  Easily applicable to new versions/different JDKs</p>
    <p>Limitations  Assumes knowledge of unit bytecode for static analysis</p>
    <p>Might need additional effort for new units  Manual code auditing subject to human errors</p>
  </div>
  <div class="page">
    <p>Contributions and Overview</p>
    <p>Decentralized Event Flow Control (DEFC) model  IFC applied to event processing</p>
    <p>DEFCon high-performance implementation  Safe and efficient event flows in Java</p>
    <p>Practical isolation methodology  Secure production-level language runtimes with low effort (OpenJDK 6)</p>
    <p>Evaluation  Throughput and latency overhead</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance Overhead</p>
    <p>Overhead of security (labels and isolation  Measure overhead</p>
    <p>Rate of processed ticks  Latency of produced deals</p>
    <p>Synthetic traces on 6k stock symbols  Prices set to trigger a deal every 10 ticks</p>
    <p>Experiments on dual Intel Xeon E5540 2.53GHz</p>
    <p>DEFCon</p>
    <p>Stock Ticker</p>
    <p>Client Investor</p>
    <p>Bank Investor</p>
    <p>Monitor</p>
    <p>Monitor</p>
    <p>Broker</p>
    <p>monitor</p>
    <p>match</p>
    <p>tick order</p>
    <p>deal</p>
  </div>
  <div class="page">
    <p>Acceptable Reduction on Throughput</p>
    <p>Label checks: marginal overhead  Isolation: ~20% overhead</p>
  </div>
  <div class="page">
    <p>Low Impact on Latency</p>
    <p>Label checks: ~0.5 ms overhead  Isolation: ~1ms overhead</p>
  </div>
  <div class="page">
    <p>JVM2</p>
    <p>JVM1</p>
    <p>Isolation with Separate JVMs</p>
    <p>Comparison with Marketcetera (Open Source trading platform)  One JVM per investor</p>
    <p>Throughput:  Comparable with DEFCon with few investors  Does not scale</p>
    <p>Latency: around 8 ms 31</p>
    <p>Stock Ticker</p>
    <p>Client Investor</p>
    <p>Bank Investor</p>
    <p>Monitor</p>
    <p>Monitor</p>
    <p>Broker</p>
    <p>monitor</p>
    <p>match</p>
    <p>tick order</p>
    <p>deal</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Distribution  Performance limited by number of cores  Scale DEFCon to multiple engines</p>
    <p>Usability  Correctly assigning labels is hard  Tools to help design and automatically check labelling</p>
    <p>Performance isolation  Units compete for resources  Prevent uncooperative behaviours</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Event processing requires security and low latency</p>
    <p>DEFC model  Provides strong and fine-grained security by</p>
    <p>applying Information Flow Control to event processing</p>
    <p>DEFCon implementation  Processes events in single address space for performance  Provides isolation on production-level language runtimes</p>
    <p>Tracking and enforcing security of event flows can be done with reasonable overhead</p>
    <p>Thank You!  Questions?  (migliava@doc.ic.ac.uk)</p>
  </div>
  <div class="page">
    <p>END</p>
    <p>END 34</p>
  </div>
</Presentation>
