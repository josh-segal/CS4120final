<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Multitenancy for Fast and Programmable Networks in the Cloud</p>
    <p>Tao Wang*, Hang Zhu*, Fabian Ruffy, Xin Jin, Anirudh Sivaraman, Dan Ports, and Aurojit Panda</p>
    <p>(*Equal contribution)</p>
  </div>
  <div class="page">
    <p>What does todays cloud offer as a service?</p>
    <p>Generic compute and storage resources</p>
    <p>Specialized accelerators</p>
  </div>
  <div class="page">
    <p>Emergence of programmable network devices</p>
    <p>Pipeline-based programmable devices In-network switches At-host SmartNICs</p>
    <p>Enable wide-range innovations for classical networked systems Consensus: NOPaxos, NetPaxos Concurrency control: Eris Caching: NetCache, IncBricks Storage: NetChain, SwitchKV Applications: SwitchML, NetAccel</p>
  </div>
  <div class="page">
    <p>Why not offer such system as a cloud service?</p>
    <p>Need of multitenancy support Providers aspect</p>
    <p>Improve resource utilization One application can hardly consume all the hardware resources Heterogenous resource requirement</p>
    <p>Tenants aspect Enable innovations</p>
    <p>New programs can be easily tested w/o impacting basic network functionality</p>
  </div>
  <div class="page">
    <p>Our vision: a hybrid compile-time and run-time solution</p>
    <p>Requirements: Resource efficiency</p>
    <p>Little overhead Isolation</p>
    <p>Performance Allocated resource</p>
    <p>How to enable multitenancy for programmable devices?</p>
  </div>
  <div class="page">
    <p>Parser</p>
    <p>Match Action</p>
    <p>Match Action</p>
    <p>Stage 1</p>
    <p>Ingress Pipeline</p>
    <p>Egress Pipeline</p>
    <p>Queues</p>
    <p>Stateful Mem Circuit</p>
    <p>Ethernet header</p>
    <p>Packet Headers Queue length</p>
    <p>Hardware enqueue port</p>
    <p>Per-packet Metadata</p>
    <p>Exact match Xbar Ternary match Xbar SRAMs/TCAMs</p>
    <p>PHV container</p>
    <p>e.g., register</p>
    <p>Action units</p>
    <p>Background on programmable network devices</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Programmability</p>
    <p>Programmable devices characteristics</p>
    <p>Various types of hardware resources Most of them are decided during compile time</p>
    <p>Limited run-time support Hardware wirings are decided during compile time</p>
    <p>Line-rate performance achieved after successful compilation No temporal scheduling (e.g., CPU or NPU scheduling) No spatial reconfiguration (e.g., FPGA [AmorphOS, OSDI18])</p>
    <p>Resource efficiency Little overhead</p>
    <p>Isolation Performance Allocated resource 7</p>
  </div>
  <div class="page">
    <p>A hybrid compile-time and run-time solution</p>
    <p>Compile-time program linker Target generic resources (e.g., SRAMs/TCAMs, action units, etc.) But static</p>
    <p>Run-time memory allocator Target stateful memory But limited</p>
  </div>
  <div class="page">
    <p>System overview</p>
    <p>Resource Sharing Policy</p>
    <p>Resource Usage Checker</p>
    <p>Program Linker</p>
    <p>Merged Jumbo Program</p>
    <p>S T1 Tn</p>
    <p>Tenants</p>
    <p>Translation Layer</p>
    <p>Submit request</p>
    <p>Data Plane</p>
    <p>Control Plane</p>
    <p>Header &amp; Metadata Stage 1 Stage 2 Stage 3 Stage m</p>
    <p>Table Entry Handler</p>
    <p>Run-time</p>
    <p>Memory Allocator</p>
    <p>Utility Calculator</p>
    <p>Reallocation Problem Solver</p>
    <p>Config Params</p>
    <p>One Big Array</p>
    <p>Sys &amp; Tenant Tables</p>
    <p>One Big Array</p>
    <p>Sys &amp; Tenant Tables</p>
    <p>One Big Array</p>
    <p>Counter Record</p>
    <p>One Big Array</p>
  </div>
  <div class="page">
    <p>Goals of compile-time linker</p>
    <p>Restrict resource usage</p>
    <p>Provide isolation Ensure tenant program does not inference with others Ensure no infinite packet resubmitting Ensure no loop forwarding configuration</p>
  </div>
  <div class="page">
    <p>Parser</p>
    <p>Fixed packet format Eth, VLAN, IP, TCP or UDP header</p>
    <p>followed by custom headers</p>
    <p>System program Extract common headers</p>
    <p>Tenant Programs Extract tenant-defined headers</p>
    <p>Parser</p>
    <p>Header { Ethernet hdr IP hdr VLAN hdr TCP or UDP hdr T1 hdr  Tn hdr</p>
    <p>}</p>
    <p>apply Ss parser to extract common</p>
    <p>headers</p>
    <p>System Program</p>
    <p>if (tag==T1s VID) apply T1s parser</p>
    <p>Tenant Programs</p>
  </div>
  <div class="page">
    <p>Control (ingress and egress) pipeline</p>
    <p>Feed-forward packet flow Sandwich architecture</p>
    <p>write-then-read half read-then-write half</p>
    <p>System program Interact with tenant programs E.g., pass system states Convert virtual addresses to physical</p>
    <p>ones</p>
    <p>Control Pipeline</p>
    <p>System states {  link utilization packet count</p>
    <p>}</p>
    <p>Pass system states to tenants</p>
    <p>if (tag==T1s VID) apply T1s ctrl</p>
    <p>Convert to system states</p>
    <p>System states { egress_port</p>
    <p>}</p>
    <p>Packet Flow</p>
  </div>
  <div class="page">
    <p>Config Params</p>
    <p>One Big Array</p>
    <p>One Big Array</p>
    <p>Counter Record</p>
    <p>One Big Array</p>
    <p>Memory allocator</p>
    <p>Control Plane</p>
    <p>Run-time memory allocator Page-table-like indirection</p>
    <p>Match Action</p>
    <p>VID==1 metadata.offset=0</p>
    <p>metadata.amount=26</p>
    <p>VID==2 metadata.offset=512 metadata.amount=24</p>
    <p>pkt.physical_address = metadata.offset + (pkt.virtual_address % metadata.amount)</p>
    <p>Register Array</p>
    <p>Tenant 1</p>
    <p>Tenant 2</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Prototype on Barefoot Tofino switch Compile-time linker</p>
    <p>Extend open-source P4 compiler[1]</p>
    <p>Run-time memory allocator Base on auto-generated APIs to pull records and modify table entries</p>
    <p>[1] https://github.com/p4lang/p4c 14</p>
  </div>
  <div class="page">
    <p>Compile-time program linker correctness</p>
    <p>Resource usage on Tofino Packet-level validation on PTF</p>
    <p>Sys program Basic parsing and forwarding logics</p>
    <p>[SOSP17] NetCache [NSDI18] NetChain</p>
    <p>Overhead Additional gateway tables to check</p>
    <p>which program to be executed Additional tag-along PHV containers</p>
    <p>Ex ac</p>
    <p>t M at</p>
    <p>ch Xb</p>
    <p>ar SR</p>
    <p>AM</p>
    <p>Ha sh</p>
    <p>Bi ts</p>
    <p>Un it</p>
    <p>Ac tio</p>
    <p>n U nit</p>
    <p>s</p>
    <p>#S ta</p>
    <p>ge s</p>
    <p>Ga te</p>
    <p>wa y T</p>
    <p>ab les PH</p>
    <p>VRe so</p>
    <p>ur ce</p>
    <p>U sa</p>
    <p>ge (%</p>
    <p>o f t</p>
    <p>ot al</p>
    <p>)</p>
    <p>Merged program Sys program NetCache NetChain</p>
  </div>
  <div class="page">
    <p>Run-time memory allocator efficiency</p>
    <p>Experimental Setting 64 tenants submit 1-min heavy hitter</p>
    <p>detection task against source IP address within its /6 subnets</p>
    <p>10-min CAIDA trace replay</p>
    <p>Evaluation metric Utility: memory hit ratio Satisfaction: time fraction w/ utility &gt; 0.9 We show the mean and 5th percentile</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Takeaways A hybrid solution for multi-tenancy support Compile-time linker: general but static Run-time memory allocator: dynamic but limited</p>
    <p>Future work Seek new hardware design</p>
    <p>Both general and dynamic</p>
  </div>
  <div class="page">
    <p>Thanks! Happy to take questions</p>
    <p>tw1921@nyu.edu</p>
  </div>
</Presentation>
