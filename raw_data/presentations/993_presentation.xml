<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FLICK: Developing and Running Application-Specific Network</p>
    <p>Services</p>
    <p>Presenter: Richard G. Clegg, Imperial College Imperial College: Abdul Alim, Luo Mai, Lukas Rupprecht, Eric Seckler, Paolo Costa, Peter Pietzuch, Alexander L. Wolf Cambridge: Nik Sultana, Jon Crowcroft, Anil Madhavapeddy, Andrew W. Moore, Richard Mortier Nottingham: Masoud Koleini, Carlos Oviedo, Derek McAuley Kent: Matteo Migliavacca</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 0 / 23</p>
  </div>
  <div class="page">
    <p>Packet processing vs application-specific middlebox</p>
    <p>Client</p>
    <p>Server1</p>
    <p>Server2</p>
    <p>Server3</p>
    <p>Packet processing (ECMP loadbalancer)</p>
    <p>process(packet):</p>
    <p>dest=hash(packet.srcIP + packet</p>
    <p>.srcport)</p>
    <p>forward(packet ,dest);</p>
    <p>Header data only used.</p>
    <p>Packets have fixed format.</p>
    <p>Basic data unit is packet.</p>
    <p>Application-specific (memcached router)</p>
    <p>process(key_val_pair):</p>
    <p>dest=hash(key_val_pair.key);</p>
    <p>forward(key_val_pair ,dest);</p>
    <p>Applications have different data formats (e.g. key-value pairs, HTTP request/reply).</p>
    <p>TCP flow not packets.</p>
    <p>One packet != one data item.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 1 / 23</p>
  </div>
  <div class="page">
    <p>Packet processing vs application-specific middlebox</p>
    <p>Client</p>
    <p>Server1</p>
    <p>Server2</p>
    <p>Server3</p>
    <p>Packet processing (ECMP loadbalancer)</p>
    <p>process(packet):</p>
    <p>dest=hash(packet.srcIP + packet</p>
    <p>.srcport)</p>
    <p>forward(packet ,dest);</p>
    <p>Header data only used.</p>
    <p>Packets have fixed format.</p>
    <p>Basic data unit is packet.</p>
    <p>Application-specific (memcached router)</p>
    <p>process(key_val_pair):</p>
    <p>dest=hash(key_val_pair.key);</p>
    <p>forward(key_val_pair ,dest);</p>
    <p>Applications have different data formats (e.g. key-value pairs, HTTP request/reply).</p>
    <p>TCP flow not packets.</p>
    <p>One packet != one data item.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 1 / 23</p>
  </div>
  <div class="page">
    <p>Packet processing vs application-specific middlebox</p>
    <p>Client</p>
    <p>Server1</p>
    <p>Server2</p>
    <p>Server3</p>
    <p>Packet processing (ECMP loadbalancer)</p>
    <p>process(packet):</p>
    <p>dest=hash(packet.srcIP + packet</p>
    <p>.srcport)</p>
    <p>forward(packet ,dest);</p>
    <p>Header data only used.</p>
    <p>Packets have fixed format.</p>
    <p>Basic data unit is packet.</p>
    <p>Application-specific (memcached router)</p>
    <p>process(key_val_pair):</p>
    <p>dest=hash(key_val_pair.key);</p>
    <p>forward(key_val_pair ,dest);</p>
    <p>Applications have different data formats (e.g. key-value pairs, HTTP request/reply).</p>
    <p>TCP flow not packets.</p>
    <p>One packet != one data item.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 1 / 23</p>
  </div>
  <div class="page">
    <p>Packet processing vs application-specific middlebox</p>
    <p>Client</p>
    <p>Server1</p>
    <p>Server2</p>
    <p>Server3</p>
    <p>Packet processing (ECMP loadbalancer)</p>
    <p>process(packet):</p>
    <p>dest=hash(packet.srcIP + packet</p>
    <p>.srcport)</p>
    <p>forward(packet ,dest);</p>
    <p>Header data only used.</p>
    <p>Packets have fixed format.</p>
    <p>Basic data unit is packet.</p>
    <p>Application-specific (memcached router)</p>
    <p>process(key_val_pair):</p>
    <p>dest=hash(key_val_pair.key);</p>
    <p>forward(key_val_pair ,dest);</p>
    <p>Applications have different data formats (e.g. key-value pairs, HTTP request/reply).</p>
    <p>TCP flow not packets.</p>
    <p>One packet != one data item.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 1 / 23</p>
  </div>
  <div class="page">
    <p>Packet processing vs application-specific middlebox</p>
    <p>Client</p>
    <p>Server1</p>
    <p>Server2</p>
    <p>Server3</p>
    <p>Packet processing (ECMP loadbalancer)</p>
    <p>process(packet):</p>
    <p>dest=hash(packet.srcIP + packet</p>
    <p>.srcport)</p>
    <p>forward(packet ,dest);</p>
    <p>Header data only used.</p>
    <p>Packets have fixed format.</p>
    <p>Basic data unit is packet.</p>
    <p>Application-specific (memcached router)</p>
    <p>process(key_val_pair):</p>
    <p>dest=hash(key_val_pair.key);</p>
    <p>forward(key_val_pair ,dest);</p>
    <p>Applications have different data formats (e.g. key-value pairs, HTTP request/reply).</p>
    <p>TCP flow not packets.</p>
    <p>One packet != one data item. Richard G. Clegg FLICK: Application-specific network services USENIX ATC 1 / 23</p>
  </div>
  <div class="page">
    <p>Problem: The application-specific middlebox</p>
    <p>Figures from: Making Middleboxes Someone Elses Problem, Sherry et al. SIGCOMM 2012</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 2 / 23</p>
  </div>
  <div class="page">
    <p>Problem: The application-specific middlebox</p>
    <p>Application specific middleboxes</p>
    <p>Figures from: Making Middleboxes Someone Elses Problem, Sherry et al. SIGCOMM 2012</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 2 / 23</p>
  </div>
  <div class="page">
    <p>Problem: The application-specific middlebox</p>
    <p>Application specific middleboxes</p>
    <p>NetAgg: Using Middleboxes for On-path Aggregation CoNEXT 2014</p>
    <p>Figures from: Making Middleboxes Someone Elses Problem, Sherry et al. SIGCOMM 2012</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 2 / 23</p>
  </div>
  <div class="page">
    <p>Problem: The application-specific middlebox</p>
    <p>Application specific middleboxes</p>
    <p>NetAgg: Using Middleboxes for On-path Aggregation CoNEXT 2014</p>
    <p>BlindBox: Deep Packet Inspection over Encrypted Traffic SIGCOMM 2015</p>
    <p>Figures from: Making Middleboxes Someone Elses Problem, Sherry et al. SIGCOMM 2012</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 2 / 23</p>
  </div>
  <div class="page">
    <p>Problem: The application-specific middlebox</p>
    <p>Application specific middleboxes</p>
    <p>NetAgg: Using Middleboxes for On-path Aggregation CoNEXT 2014</p>
    <p>BlindBox: Deep Packet Inspection over Encrypted Traffic SIGCOMM 2015</p>
    <p>Yoda: A Highly Available Layer-7 Load Balancer EuroSys 2016</p>
    <p>Figures from: Making Middleboxes Someone Elses Problem, Sherry et al. SIGCOMM 2012</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 2 / 23</p>
  </div>
  <div class="page">
    <p>Problem: The application-specific middlebox</p>
    <p>Application specific middleboxes</p>
    <p>NetAgg: Using Middleboxes for On-path Aggregation CoNEXT 2014</p>
    <p>BlindBox: Deep Packet Inspection over Encrypted Traffic SIGCOMM 2015</p>
    <p>Yoda: A Highly Available Layer-7 Load Balancer EuroSys 2016</p>
    <p>Introducing mcrouter: A memcached protocol router Facebook blog</p>
    <p>Figures from: Making Middleboxes Someone Elses Problem, Sherry et al. SIGCOMM 2012</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 2 / 23</p>
  </div>
  <div class="page">
    <p>Creating new application-specific middlebox</p>
    <p>Ease of implementation</p>
    <p>E x p</p>
    <p>re ss</p>
    <p>iv en</p>
    <p>es s</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 3 / 23</p>
  </div>
  <div class="page">
    <p>Creating new application-specific middlebox</p>
    <p>Ease of implementation</p>
    <p>E x p</p>
    <p>re ss</p>
    <p>iv en</p>
    <p>es s</p>
    <p>C/C++ code from scratch</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 3 / 23</p>
  </div>
  <div class="page">
    <p>Creating new application-specific middlebox</p>
    <p>Ease of implementation</p>
    <p>E x p</p>
    <p>re ss</p>
    <p>iv en</p>
    <p>es s</p>
    <p>C/C++ code from scratch</p>
    <p>ClickOS existing modules</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 3 / 23</p>
  </div>
  <div class="page">
    <p>Creating new application-specific middlebox</p>
    <p>Ease of implementation</p>
    <p>E x p</p>
    <p>re ss</p>
    <p>iv en</p>
    <p>es s</p>
    <p>C/C++ code from scratch</p>
    <p>ClickOS existing modules</p>
    <p>ClickOS new modules</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 3 / 23</p>
  </div>
  <div class="page">
    <p>Creating new application-specific middlebox</p>
    <p>Ease of implementation</p>
    <p>E x p</p>
    <p>re ss</p>
    <p>iv en</p>
    <p>es s</p>
    <p>C/C++ code from scratch</p>
    <p>ClickOS existing modules</p>
    <p>ClickOS new modules Software</p>
    <p>Defined Networking</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 3 / 23</p>
  </div>
  <div class="page">
    <p>FLICK for the datacentre</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 4 / 23</p>
  </div>
  <div class="page">
    <p>FLICK for the datacentre</p>
    <p>mcrouter mcrouterspam filter</p>
    <p>IP firewallWAN opt</p>
    <p>HTTP loadbalancer</p>
    <p>HTTP loadbalancer</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 4 / 23</p>
  </div>
  <div class="page">
    <p>FLICK for the datacentre</p>
    <p>IP firewall</p>
    <p>FLICK</p>
    <p>FLICK</p>
    <p>FLICK FLICK</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 4 / 23</p>
  </div>
  <div class="page">
    <p>General system for application-specific middleboxes?</p>
    <p>Challenge 1: Ease-of-use</p>
    <p>Rapidly express many middlebox functions. System created in hours not weeks/months.</p>
    <p>Challenge 2: Performance</p>
    <p>Generality must not have large performance penalty. Performance similar to specially written system.</p>
    <p>Challenge 3: Safety/Isolation</p>
    <p>Middleboxes should be safe in resource usage. Applications on same machine share resources well.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 5 / 23</p>
  </div>
  <div class="page">
    <p>General system for application-specific middleboxes?</p>
    <p>Challenge 1: Ease-of-use</p>
    <p>Rapidly express many middlebox functions. System created in hours not weeks/months.</p>
    <p>Challenge 2: Performance</p>
    <p>Generality must not have large performance penalty. Performance similar to specially written system.</p>
    <p>Challenge 3: Safety/Isolation</p>
    <p>Middleboxes should be safe in resource usage. Applications on same machine share resources well.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 5 / 23</p>
  </div>
  <div class="page">
    <p>General system for application-specific middleboxes?</p>
    <p>Challenge 1: Ease-of-use</p>
    <p>Rapidly express many middlebox functions. System created in hours not weeks/months.</p>
    <p>Challenge 2: Performance</p>
    <p>Generality must not have large performance penalty. Performance similar to specially written system.</p>
    <p>Challenge 3: Safety/Isolation</p>
    <p>Middleboxes should be safe in resource usage. Applications on same machine share resources well.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 5 / 23</p>
  </div>
  <div class="page">
    <p>FLICK overview</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 6 / 23</p>
    <p>Flick programs</p>
    <p>Domain specific language (DSL) for application-specific middleboxes. Tens of lines of code not tens of thousands</p>
  </div>
  <div class="page">
    <p>FLICK overview</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 6 / 23</p>
    <p>Flick task graphs</p>
    <p>Break work into independently schedulable units (tasks). Join tasks by channels into task graphs.</p>
  </div>
  <div class="page">
    <p>FLICK overview</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 6 / 23</p>
    <p>Flick platform</p>
    <p>The running implementation. Integrates the compiled C++ from DSL. Handles network connections, worker threads and scheduling tasks.</p>
  </div>
  <div class="page">
    <p>FLICK  the language</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 7 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  features</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Process as basic unit of code expresses flow of typed data.</p>
    <p>Control structures restricted. Bounded loops and hence execution time.</p>
    <p>Strongly typed for safety.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 8 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  features</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Process as basic unit of code expresses flow of typed data.</p>
    <p>Control structures restricted. Bounded loops and hence execution time.</p>
    <p>Strongly typed for safety.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 8 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  processing data (memcached)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 9 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  processing data (memcached)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Structure allows work to break into smaller task units</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 9 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  processing data (memcached)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Structure allows work to break into smaller task units</p>
    <p>Convenient abstractions for middlebox</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 9 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  processing data (memcached)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Type definition only necessary fields included</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 9 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  processing data (memcached)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Process: entry point defines how</p>
    <p>channels connect</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 9 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  processing data (memcached)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>type cmd: record</p>
    <p>key : string</p>
    <p>proc Memcached: (cmd/cmd client , [cmd/cmd] backends)</p>
    <p>| backends =&gt; client</p>
    <p>| client =&gt; target_backend(backends)</p>
    <p>fun target_backend: ([-/cmd] backends , req:cmd) -&gt; ()</p>
    <p>let target = hash(req.key) mod len(backends)</p>
    <p>req =&gt; backends[target]</p>
    <p>Function selects backend</p>
    <p>using key</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 9 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  parsing data (memcached)</p>
    <p>type cmd = unit {</p>
    <p>%byteorder = big;</p>
    <p>magic_code : uint8;</p>
    <p>opcode : uint8;</p>
    <p>key_len : uint16;</p>
    <p>extras_len : uint8;</p>
    <p>: uint8; # anon field - future use</p>
    <p>status_or_v_bucket : uint16;</p>
    <p>total_len : uint32;</p>
    <p>opaque : uint32;</p>
    <p>cas : uint64;</p>
    <p>extras : bytes &amp;length = self.extras_len;</p>
    <p>key : string &amp;length = self.key_len;</p>
    <p>value : bytes &amp;length = self.value_len;</p>
    <p>};</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 10 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  parsing data (memcached)</p>
    <p>type cmd = unit {</p>
    <p>%byteorder = big;</p>
    <p>magic_code : uint8;</p>
    <p>opcode : uint8;</p>
    <p>key_len : uint16;</p>
    <p>extras_len : uint8;</p>
    <p>: uint8; # anon field - future use</p>
    <p>status_or_v_bucket : uint16;</p>
    <p>total_len : uint32;</p>
    <p>opaque : uint32;</p>
    <p>cas : uint64;</p>
    <p>extras : bytes &amp;length = self.extras_len;</p>
    <p>key : string &amp;length = self.key_len;</p>
    <p>value : bytes &amp;length = self.value_len;</p>
    <p>};</p>
    <p>Based on Spicy/binpac++ [IMC2006]</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 10 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  parsing data (memcached)</p>
    <p>type cmd = unit {</p>
    <p>%byteorder = big;</p>
    <p>magic_code : uint8;</p>
    <p>opcode : uint8;</p>
    <p>key_len : uint16;</p>
    <p>extras_len : uint8;</p>
    <p>: uint8; # anon field - future use</p>
    <p>status_or_v_bucket : uint16;</p>
    <p>total_len : uint32;</p>
    <p>opaque : uint32;</p>
    <p>cas : uint64;</p>
    <p>extras : bytes &amp;length = self.extras_len;</p>
    <p>key : string &amp;length = self.key_len;</p>
    <p>value : bytes &amp;length = self.value_len;</p>
    <p>};</p>
    <p>Based on Spicy/binpac++ [IMC2006]</p>
    <p>Developer can quickly parse even complex formats like HTTP</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 10 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  parsing data (memcached)</p>
    <p>type cmd = unit {</p>
    <p>%byteorder = big;</p>
    <p>magic_code : uint8;</p>
    <p>opcode : uint8;</p>
    <p>key_len : uint16;</p>
    <p>extras_len : uint8;</p>
    <p>: uint8; # anon field - future use</p>
    <p>status_or_v_bucket : uint16;</p>
    <p>total_len : uint32;</p>
    <p>opaque : uint32;</p>
    <p>cas : uint64;</p>
    <p>extras : bytes &amp;length = self.extras_len;</p>
    <p>key : string &amp;length = self.key_len;</p>
    <p>value : bytes &amp;length = self.value_len;</p>
    <p>};</p>
    <p>Based on Spicy/binpac++ [IMC2006]</p>
    <p>Developer can quickly parse even complex formats like HTTP</p>
    <p>Compiles to efficient C++. Only extracts fields used in processing</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 10 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  parsing data (memcached)</p>
    <p>type cmd = unit {</p>
    <p>%byteorder = big;</p>
    <p>magic_code : uint8;</p>
    <p>opcode : uint8;</p>
    <p>key_len : uint16;</p>
    <p>extras_len : uint8;</p>
    <p>: uint8; # anon field - future use</p>
    <p>status_or_v_bucket : uint16;</p>
    <p>total_len : uint32;</p>
    <p>opaque : uint32;</p>
    <p>cas : uint64;</p>
    <p>extras : bytes &amp;length = self.extras_len;</p>
    <p>key : string &amp;length = self.key_len;</p>
    <p>value : bytes &amp;length = self.value_len;</p>
    <p>};</p>
    <p>Fixed width field easy to define</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 10 / 23</p>
  </div>
  <div class="page">
    <p>FLICK (language)  parsing data (memcached)</p>
    <p>type cmd = unit {</p>
    <p>%byteorder = big;</p>
    <p>magic_code : uint8;</p>
    <p>opcode : uint8;</p>
    <p>key_len : uint16;</p>
    <p>extras_len : uint8;</p>
    <p>: uint8; # anon field - future use</p>
    <p>status_or_v_bucket : uint16;</p>
    <p>total_len : uint32;</p>
    <p>opaque : uint32;</p>
    <p>cas : uint64;</p>
    <p>extras : bytes &amp;length = self.extras_len;</p>
    <p>key : string &amp;length = self.key_len;</p>
    <p>value : bytes &amp;length = self.value_len;</p>
    <p>};</p>
    <p>Field length depends on</p>
    <p>previous field</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 10 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 11 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Separate input, processing and output tasks enable parallelism</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Input TCP flow</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Input task deserialises data</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Processing task forwards by key</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Output task serialises data</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Server sends reply</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Input task deserialises data</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 12 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>For memcached router each client has its own task graph.</p>
    <p>Different types of task graph  some have data parallelism. Data and task parallelism.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 13 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the task graph</p>
    <p>For memcached router each client has its own task graph. Different types of task graph  some have data parallelism. Data and task parallelism.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 13 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 14 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 15 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Efficiently handle the TCP connection set up and tear down</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 15 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Efficiently handle the TCP connection set up and tear down</p>
    <p>Manage memory allocation smartly (reduce dynamic allocation)</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 15 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Efficiently handle the TCP connection set up and tear down</p>
    <p>Manage memory allocation smartly (reduce dynamic allocation)</p>
    <p>Schedule tasks fairly between applications (safety/isolation)</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 15 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>New TCP connection</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>DPDK/mTCP (userland TCP) reduce kernel calls</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Choose application to connect to</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>Connect to existing graph</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>New graph from pool</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Tasks with data added to queue</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Workers pick tasks from queue</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Tasks have limited time on a thread</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>FLICK  the platform</p>
    <p>Application Dispatcher</p>
    <p>Graph Dispatcher Graph pool</p>
    <p>Existing graph</p>
    <p>New graph</p>
    <p>Scheduler Task Queue</p>
    <p>Work Threads</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 16 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  latency/throughput (loadbalancer)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Clients send HTTP requests up to ten backends.</p>
    <p>Persistent TCP connections to/from loadbalancer.</p>
    <p>Vary number of clients measure latency and throughput.</p>
    <p>DPDK/mTCP used to reduce kernel calls in connections.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 17 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  latency/throughput (loadbalancer)</p>
    <p>Client</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>Clients send HTTP requests up to ten backends.</p>
    <p>Persistent TCP connections to/from loadbalancer.</p>
    <p>Vary number of clients measure latency and throughput.</p>
    <p>DPDK/mTCP used to reduce kernel calls in connections.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 17 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  latency (loadbalancer)</p>
    <p>M ea</p>
    <p>n la</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s)</p>
    <p>Lower is better</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 18 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  latency (loadbalancer)</p>
    <p>M ea</p>
    <p>n la</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s)</p>
    <p>FLICK Apache Nginx</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 18 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  latency (loadbalancer)</p>
    <p>M ea</p>
    <p>n la</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s) FLICK mTCP FLICK Apache Nginx</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 18 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  throughput (loadbalancer)</p>
    <p>Th ou</p>
    <p>sa nd</p>
    <p>re qs</p>
    <p>/s Higher is better</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 19 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  throughput (loadbalancer)</p>
    <p>Th ou</p>
    <p>sa nd</p>
    <p>re qs</p>
    <p>/s</p>
    <p>FLICK Apache Nginx</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 19 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  throughput (loadbalancer)</p>
    <p>Th ou</p>
    <p>sa nd</p>
    <p>re qs</p>
    <p>/s</p>
    <p>FLICK mTCP FLICK Apache Nginx</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 19 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>This middlebox merges data in big data systems.</p>
    <p>Binary merge tree takes advantage of data parallelism.</p>
    <p>See NetAgg: Using Middleboxes for Application-specific On-path Aggregation in Data Centres [CoNext 2014].</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 20 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>This middlebox merges data in big data systems.</p>
    <p>Binary merge tree takes advantage of data parallelism.</p>
    <p>See NetAgg: Using Middleboxes for Application-specific On-path Aggregation in Data Centres [CoNext 2014].</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 20 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>Test scaling. Measure throughput as number of cores increases.</p>
    <p>Three data sets each one billion words. 8, 12 and 16 character words.</p>
    <p>Merge eight streams  measure throughput of output stream.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 21 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>Test scaling. Measure throughput as number of cores increases.</p>
    <p>Three data sets each one billion words. 8, 12 and 16 character words.</p>
    <p>Merge eight streams  measure throughput of output stream.</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 21 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>Maximum throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut M</p>
    <p>b/ s</p>
    <p>Higher is better</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 22 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>Maximum throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut M</p>
    <p>b/ s</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 22 / 23</p>
  </div>
  <div class="page">
    <p>Evaluation  scalability with cores</p>
    <p>Maximum throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut M</p>
    <p>b/ s</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 22 / 23</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Application-specific services</p>
    <p>Application-specific middleboxes are here to stay.</p>
    <p>Packet processing systems not suitable for these.</p>
    <p>The FLICK system</p>
    <p>FLICK domain-specific language  safe by design.</p>
    <p>Task graph abstraction gives task and data parallelism.</p>
    <p>Performance of FLICK comparable to specialist system.</p>
    <p>Thank you  questions? Richard G. Clegg</p>
    <p>richard.clegg@imperial.ac.uk</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 23 / 23</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Application-specific services</p>
    <p>Application-specific middleboxes are here to stay.</p>
    <p>Packet processing systems not suitable for these.</p>
    <p>The FLICK system</p>
    <p>FLICK domain-specific language  safe by design.</p>
    <p>Task graph abstraction gives task and data parallelism.</p>
    <p>Performance of FLICK comparable to specialist system.</p>
    <p>Thank you  questions? Richard G. Clegg</p>
    <p>richard.clegg@imperial.ac.uk</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 23 / 23</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Application-specific services</p>
    <p>Application-specific middleboxes are here to stay.</p>
    <p>Packet processing systems not suitable for these.</p>
    <p>The FLICK system</p>
    <p>FLICK domain-specific language  safe by design.</p>
    <p>Task graph abstraction gives task and data parallelism.</p>
    <p>Performance of FLICK comparable to specialist system.</p>
    <p>Thank you  questions? Richard G. Clegg</p>
    <p>richard.clegg@imperial.ac.uk</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 23 / 23</p>
  </div>
  <div class="page">
    <p>Performance  memcached example</p>
    <p>M e</p>
    <p>a n</p>
    <p>la te</p>
    <p>n cy</p>
    <p>( m</p>
    <p>s)</p>
    <p>FLICK FLICK mTCP Moxi</p>
    <p>Comparison with Moxi (also supports multi-core + binary protocol).</p>
    <p>Set up 128 clients making multiple requests.</p>
    <p>Latency reduction shown.</p>
    <p>FLICK throughput with mTCP 198,000 reqs/sec.</p>
    <p>Moxi throughput 82,000 reqs/sec</p>
    <p>Richard G. Clegg FLICK: Application-specific network services USENIX ATC 1 / 1</p>
  </div>
</Presentation>
