<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fast and Vulnerable A Story of Telematic Failures Center for Automotive Embedded Systems Security Ian Foster, Andrew Prudhomme, Karl Koscher, and Stefan Savage</p>
  </div>
  <div class="page">
    <p>Telematic Control Units  Connects to cars OBD-II port  Monitors vehicle state  Local sensors</p>
    <p>GPS  Accelerometers</p>
    <p>Transmits data off device  Cellular, WiFi, Bluetooth</p>
    <p>Common uses:  Fleet tracking  Remote diagnostics</p>
  </div>
  <div class="page">
    <p>Our TCU Mobile Devices Ingenierie - C4E (munic.box)</p>
    <p>ARM 11 500MHz CPU  64 MB RAM  256 MB Flash Storage  Sensors</p>
    <p>GPS  3D accelerometer  3 axis gyroscope</p>
    <p>Communication  GSM modem  USB Debug port  OBD Connector</p>
  </div>
  <div class="page">
    <p>Controller Area Network (CAN Bus)  Connects various ECUs in cars  Message based protocol  Identifier for addressing destination  Previously shown to be vulnerable</p>
    <p>Charlie Miller and Chris Valasek  UCSD &amp; UW</p>
    <p>image source: munic.io</p>
  </div>
  <div class="page">
    <p>CAN Frame</p>
    <p>Identifier Size Data can0 442 [8] 42 01 80 00 00 00 00 00 'B.......' can0 440 [8] 42 02 00 00 00 00 00 00 'B.......' can0 442 [8] 40 02 00 00 00 00 00 00 '@.......' can0 440 [8] 42 02 00 00 00 00 00 00 'B.......' can0 620 [8] 10 00 00 00 00 40 00 80 '.....@..' can0 442 [8] 40 02 00 00 00 00 00 00 '@.......'</p>
  </div>
  <div class="page">
    <p>Attack Surface Local  USB debug port  NAND flash</p>
    <p>Adversary has physical access to the TCU. Do not consider the automobile communications in this model.</p>
    <p>Remote  SMS  2G/3G</p>
    <p>Adversary does not have physical access to the TCU, and may not even know where the TCU is geographically located.</p>
  </div>
  <div class="page">
    <p>Local Attacks</p>
  </div>
  <div class="page">
    <p>Debug Interface  Exposes USB network</p>
    <p>Web &amp; Telnet server for debug console  SSH Server  FTP Server for log retrieval and update uploading</p>
  </div>
  <div class="page">
    <p>NAND Dump  Filesystem layout pulled from debug logs</p>
    <p>dmesg</p>
    <p>NAND flash removed and dumped  de-soldered &amp; read using hardware reader</p>
    <p>NAND flash simulated from dump  nandsim Linux kernel module</p>
    <p>Partitions mounted for reading  Unsorted Block Image File System (UBIFS)</p>
  </div>
  <div class="page">
    <p>SSH Mounting the NAND flash dump revealed the private key for the root user.</p>
  </div>
  <div class="page">
    <p>SSH Mounting the NAND flash dump revealed the private key for the root user.</p>
    <p>The same private key worked on all C4 TCUs we tested.</p>
  </div>
  <div class="page">
    <p>SSH Mounting the NAND flash dump revealed the private key for the root user.</p>
    <p>The same private key worked on all C4 TCUs we tested.</p>
    <p>/etc/shadow was identical across devices and included weak passwords.</p>
  </div>
  <div class="page">
    <p>CAN Bus Capabilities  PIC Coprocessor</p>
    <p>Used by devices with older firmware.  Custom interface for sending &amp; receiving can messages.  Required ACC or ignition to be on to function.</p>
    <p>Bypassed by reflashing PIC firmware without this check.</p>
    <p>SocketCAN  Used on devices with newer firmware.  Exposes the CAN interface as a traditional network interface.  Shipped with can-utils package.</p>
    <p>Supports reading, saving, creating, and replying CAN messages.</p>
  </div>
  <div class="page">
    <p>Local Access Summary  No authentication for debug consoles  USB provides root access via web, telnet console, and</p>
    <p>SSH.  Can send and receive arbitrary CAN messages.</p>
  </div>
  <div class="page">
    <p>Remote Attacks</p>
  </div>
  <div class="page">
    <p>IP (2G)  All services bound to all network interfaces.</p>
    <p>web  telnet console  SSH</p>
    <p>Same local network attacks work over the internet.</p>
    <p>Some devices protected by wireless carriers NAT implementation.</p>
  </div>
  <div class="page">
    <p>SMS The device responds to SMS commands</p>
    <p>Examples:  status  gps position  reset  remote update</p>
  </div>
  <div class="page">
    <p>Normal Update Procedure 1. SCP UpdateFile.txt from update server</p>
    <p>to device 2. SCP new files from UpdateFile.txt from</p>
    <p>update server to temp folder 3. Move new files from temp folder to</p>
    <p>destination directory 4. Optionally perform an additional action</p>
    <p>a. clear b. identify c. status d. reset</p>
  </div>
  <div class="page">
    <p>Normal Update Procedure Problems 1. Updates are not cryptographically</p>
    <p>signed. 2. TCU does not authenticate the update</p>
    <p>server, instead the update server authenticates the TCU.</p>
  </div>
  <div class="page">
    <p>Exploiting Update Replaced a binary (console) that was called post update to execute commands:</p>
    <p>ready 4. Execute original console command</p>
  </div>
  <div class="page">
    <p>Remote Access Summary  Same local debug consoles exposed remotely.  SMS allows access if wireless carrier uses NAT.  Can obtain root shell from IP or SMS.</p>
    <p>Send arbitrary can packets remotely.  Get GPS coordinates remotly.</p>
  </div>
  <div class="page">
    <p>Finding Devices  Need to know either IP address (without NAT) or SMS</p>
    <p>number.  SMS numbers were found to be from the 566 area</p>
    <p>code, which is reserved for personal communication devices</p>
    <p>Numbers were not random; appeared to be sequentially assigned.</p>
    <p>Could likely enumerate them all by sending a status SMS request to all numbers.</p>
  </div>
  <div class="page">
    <p>Shodan Search Telnet Console PromptSSH Server Fingerprint</p>
  </div>
  <div class="page">
    <p>Proof of Concept Attack</p>
  </div>
  <div class="page">
    <p>Proposed Solutions 1. Require update authentication 2. Disable remote SMS administration 3. Dont distribute identical private keys 4. Use strong passwords 5. Disable WAN administration 6. Require debug console authentication 7. Maintain update server</p>
  </div>
  <div class="page">
    <p>Disclosure  June 29th - Reach out to Mobile Devices with details of vulnerabilities  July 2nd - Mobile-devices responds</p>
    <p>Developer SIM  Advanced debug mode  Older software version</p>
    <p>July 8th - Reach out to Metromile with details of vulnerabilities  July 8th - Metromile responds, will disable debug mode and disable SMS.</p>
  </div>
  <div class="page">
    <p>Disclosure - CERT  July 12th - Inform CERT of vulnerabilities found in C4 platform  July 14th - CERT responds, assigned vulnerability #209512  August 6th - CERT assigned 5 CWEs:</p>
    <p>CWE-306: Missing Authentication For a Critical Function  CWE-321: Use of a Hard-Coded Cryptographic Key  CWE-798: Use of Hard-Coded Credentials  CWE-285: Improper Authorization  CWE-345: Insufficient Verification of Data Authenticity</p>
    <p>Ongoing - Creating CVEs.</p>
  </div>
  <div class="page">
    <p>Thank You Questions?</p>
    <p>idfoster@cs.ucsd.edu</p>
  </div>
</Presentation>
