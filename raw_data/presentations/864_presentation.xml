<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exploiting Bounded Staleness to Speed up Big Data Analytics</p>
    <p>Henggang Cui James Cipar, Qirong Ho, Jin Kyu Kim,</p>
    <p>Seunghak Lee, Abhimanu Kumar, Jinliang Wei, Wei Dai, Greg Ganger, Phil Gibbons (Intel), Garth Gibson, and Eric Xing</p>
    <p>Carnegie Mellon University</p>
  </div>
  <div class="page">
    <p>Iterative program fits model</p>
    <p>Big Data Analytics Overview</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 2</p>
    <p>Huge input data Model parameters (solution)</p>
    <p>O ne</p>
    <p>it er</p>
    <p>at io</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Big Data Analytics Overview</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 3</p>
    <p>Partitioned input data</p>
    <p>Parallel iterative program</p>
    <p>Model parameters (solution)</p>
  </div>
  <div class="page">
    <p>Big Data Analytics Overview</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 4</p>
    <p>Partitioned input data</p>
    <p>Parallel iterative program</p>
    <p>Model parameters (solution)</p>
    <p>Parameter server</p>
    <p>Goal: Less sync overhead</p>
  </div>
  <div class="page">
    <p>Outline  Two novel synchronization approaches</p>
    <p>Arbitrarily-sized Bulk Synchronous Parallel (A-BSP)  Stale Synchronous Parallel (SSP)</p>
    <p>LazyTable architecture overview  Taste of experimental results</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 5</p>
  </div>
  <div class="page">
    <p>Bulk Synchronous Parallel</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 6</p>
    <p>A barrier every clock (a.k.a. epoch)  In ML apps, often one iteration over input data</p>
    <p>Clock 0 1 2 3 4</p>
    <p>Thread 1</p>
    <p>Thread 2</p>
    <p>Thread 3 Updates not necessarily visible</p>
    <p>Thread 1 blocked by barrier</p>
    <p>Iteration 0 1 2 3 4</p>
    <p>Iterations complete, updates visible</p>
    <p>Thread progress illustration:</p>
  </div>
  <div class="page">
    <p>Data Staleness  In BSP, threads can see &quot;out-of-date&quot; values</p>
    <p>May not see others' updates right away  Convergent apps usually tolerate that</p>
    <p>Allowing more staleness for speed  Less synchronizing among threads  More using cached values  More delaying and batching of updates</p>
    <p>But, too much staleness hurts convergence  Important to have staleness bound  Staleness should be tunable</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 7</p>
  </div>
  <div class="page">
    <p>Arbitrarily-sized BSP (A-BSP)  Work in each clock can be more than one iteration</p>
    <p>Less synchronization overhead</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 8</p>
    <p>Clock 0 1 2</p>
    <p>Thread 1</p>
    <p>Thread 2</p>
    <p>Thread 3</p>
    <p>two iterations per clock Iteration 0 1 2 3 4</p>
    <p>Thread 1 blocked by barrier</p>
  </div>
  <div class="page">
    <p>Problem of (A-)BSP: Stragglers  A-BSP still has the straggler problem</p>
    <p>A slow thread will slow down all  Stragglers are common</p>
    <p>in large systems</p>
    <p>Many reasons for stragglers  Hardware: lost packets, SSD cleaning, disk resets  Software: garbage collection, virtualization  Algorithmic: calculating objectives and stopping</p>
    <p>conditions</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 9</p>
  </div>
  <div class="page">
    <p>Stale Synchronous Parallel (SSP)</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 10</p>
    <p>Threads are allowed to be slack clocks ahead of the slowest thread</p>
    <p>[HotOS13, NIPS13]</p>
    <p>Thread 1</p>
    <p>Thread 2</p>
    <p>Thread 3</p>
    <p>Slack of 1 clock</p>
    <p>Thread 1 at clock 3</p>
    <p>Iteration 0 1 2 3 4</p>
    <p>Clock 0 1 2 3 4</p>
    <p>Thread 2 at clock 2</p>
  </div>
  <div class="page">
    <p>Two Dimensional Config. Space  Iters-per-clock and slack are both tunable</p>
    <p>A-BSP is SSP with a slack of zero  Every SSP config. has an A-BSP counterpart</p>
    <p>with the same data staleness bound</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 11</p>
    <p>A-BSP (iters-per-clock=2, slack=0): SSP (iters-per-clock=1, slack=1):</p>
    <p>Iteration 0 1 2 3 4</p>
    <p>Clock 0 1 2 3 4</p>
    <p>Clock 0 1 2</p>
    <p>Iteration</p>
  </div>
  <div class="page">
    <p>LazyTable Architecture</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 12</p>
    <p>Partitioned input data</p>
    <p>Parallel iterative program on LazyTable</p>
    <p>Model parameters (sharded)</p>
    <p>Client-lib</p>
    <p>Client-lib</p>
    <p>Client-lib</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>LazyTable Architecture</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 13</p>
    <p>Partitioned input data</p>
    <p>Parallel iterative program on LazyTable</p>
    <p>Model parameters (sharded)</p>
    <p>Client-lib</p>
    <p>Client-lib</p>
    <p>Client-lib</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>Server</p>
    <p>See the paper for more details</p>
  </div>
  <div class="page">
    <p>Primary Experimental Setup  Hardware information</p>
    <p>8 machines, each with 64 cores &amp; 128GB RAM  Basic configuration</p>
    <p>One client &amp; tablet server per machine  One computation thread per core</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 14</p>
  </div>
  <div class="page">
    <p>Application Benchmark #1  Topic Modeling</p>
    <p>Algorithm: Gibbs Sampling on LDA  Input: NY Times dataset</p>
    <p>300k docs, 100m words, 100k vocabulary  Solution quality criterion: Loglikelihood</p>
    <p>How likely the model generates observed data  Becomes higher as the algorithm converges  A larger value indicates better quality</p>
    <p>More apps described and used in paper</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 15</p>
  </div>
  <div class="page">
    <p>Controlling Data Staleness  SSP</p>
    <p>Larger slack -&gt; more staleness</p>
    <p>A-BSP  Larger iterations-per-clock -&gt; more staleness</p>
    <p>The tradeoffs with increased staleness</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 16</p>
  </div>
  <div class="page">
    <p>Staleness Increases Iters/sec</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 17</p>
    <p>Iterations per s ec</p>
    <p>Ite ra tio</p>
    <p>ns d on</p>
    <p>e</p>
    <p>Giters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>Iterations per s ec</p>
    <p>Ite ra tio</p>
    <p>ns d on</p>
    <p>e</p>
    <p>T ime (s ec)</p>
    <p>s lack=0 (B S P )</p>
    <p>Staleness Increases Iters/sec</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 18</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>Iterations per s ec</p>
    <p>Ite ra tio</p>
    <p>ns d on</p>
    <p>e</p>
    <p>T ime (s ec)</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P )</p>
    <p>Staleness Increases Iters/sec</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 19</p>
    <p>larger iters per sec with more staleness</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>Iterations per s ec</p>
    <p>Ite ra tio</p>
    <p>ns d on</p>
    <p>e</p>
    <p>T ime (s ec)</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P ) s lack=3 (S S P )</p>
    <p>Staleness Increases Iters/sec</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 20</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>Staleness Reduces Converge/iter</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 21</p>
    <p>C o n ve</p>
    <p>rg e n ce</p>
    <p>(h ig h e r is b e tt e r)</p>
    <p>Iterations done</p>
    <p>C onverg enc e per iter</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>Staleness Reduces Converge/iter</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 22</p>
    <p>C o n ve</p>
    <p>rg e n ce</p>
    <p>(h ig h e r is b e tt e r)</p>
    <p>Iterations done</p>
    <p>s lack=0 (B S P )</p>
    <p>C onverg enc e per iter</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>C o n ve</p>
    <p>rg e n ce</p>
    <p>(h ig h e r is b e tt e r)</p>
    <p>Iterations done</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P )</p>
    <p>C onverg enc e per iter</p>
    <p>Staleness Reduces Converge/iter</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 23</p>
    <p>more iters to converge with more staleness</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>C o n ve</p>
    <p>rg e n ce</p>
    <p>(h ig h e r is b e tt e r)</p>
    <p>Iterations done</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P ) s lack=3 (S S P )</p>
    <p>C onverg enc e per iter</p>
    <p>Staleness Reduces Converge/iter</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 24</p>
    <p>iters-per-clock is 1</p>
  </div>
  <div class="page">
    <p>C o n ve</p>
    <p>rg e n ce</p>
    <p>(h ig h e r is b e tt e r)</p>
    <p>Iterations done</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P ) s lack=3 (S S P )</p>
    <p>C onverg enc e per iter</p>
    <p>C onverg enc e per s ec</p>
    <p>C o n ve</p>
    <p>rg e n ce</p>
    <p>(h ig h e r is b e tt e r)</p>
    <p>T ime (s ec)</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P ) s lack=3 (S S P )</p>
    <p>Sweet Spot Balances the Two</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 25</p>
    <p>Iterations per s ec</p>
    <p>Ite ra tio</p>
    <p>ns d on</p>
    <p>e</p>
    <p>T ime (s ec)</p>
    <p>s lack=0 (B S P ) s lack=1 (S S P ) s lack=3 (S S P )</p>
    <p>Speed up with a good slack</p>
  </div>
  <div class="page">
    <p>Key Takeaway Insight #1</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 26</p>
    <p>Fresher data Staler data</p>
    <p>Iterations per second</p>
    <p>Convergence per iteration</p>
    <p>Convergence per second</p>
    <p>The sweet spot</p>
  </div>
  <div class="page">
    <p>SSP vs A-BSP  Similar performance</p>
    <p>In the absence of stragglers</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 27</p>
    <p>What about environment with stragglers?</p>
  </div>
  <div class="page">
    <p>Straggler Experiment #1  Stragglers caused by background disruption</p>
    <p>Fairly common in large, shared clusters  Experiment setup</p>
    <p>One disrupter process per machine  Uses 50% of CPU cycles</p>
    <p>Work (disrupt) or sleep randomly for t seconds  10% work, 90% sleep</p>
    <p>More straggler experiments in the paper</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 28</p>
  </div>
  <div class="page">
    <p>Straggler Results #1</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 29</p>
    <p>Disruption duration (sec)</p>
    <p>Ite ra</p>
    <p>tio n</p>
    <p>tim e</p>
    <p>in cr</p>
    <p>ea se</p>
    <p>(% )</p>
    <p>w/o disrupt, each iter takes 4.2 sec</p>
  </div>
  <div class="page">
    <p>Disruption duration (sec)</p>
    <p>Ite ra</p>
    <p>tio n</p>
    <p>tim e</p>
    <p>in cr</p>
    <p>ea se</p>
    <p>(% ) ideal</p>
    <p>Straggler Results #1</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 30</p>
    <p>Ideally 5%, because 50% slow down with 10% probability</p>
    <p>w/o disrupt, each iter takes 4.2 sec</p>
  </div>
  <div class="page">
    <p>Disruption duration (sec)</p>
    <p>Ite ra</p>
    <p>tio n</p>
    <p>tim e</p>
    <p>in cr</p>
    <p>ea se</p>
    <p>(% ) ideal</p>
    <p>wpc=2, slack=0 (A-BSP)</p>
    <p>Straggler Results #1</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 31</p>
    <p>w/o disrupt, each iter takes 4.2 sec</p>
    <p>Ideally 5%, because 50% slow down with 10% probability</p>
  </div>
  <div class="page">
    <p>Disruption duration (sec)</p>
    <p>Ite ra</p>
    <p>tio n</p>
    <p>tim e</p>
    <p>in cr</p>
    <p>ea se</p>
    <p>(% ) ideal</p>
    <p>wpc=2, slack=0 (A-BSP) wpc=1, slack=1 (SSP)</p>
    <p>Straggler Results #1</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 32</p>
    <p>SSP tolerates transient stragglers</p>
    <p>w/o disrupt, each iter takes 4.2 sec</p>
    <p>Ideally 5%, because 50% slow down with 10% probability</p>
  </div>
  <div class="page">
    <p>Conclusion  Staleness should be tuned</p>
    <p>By iters-per-clock and/or slack  LazyTable implements SSP and A-BSP</p>
    <p>See paper for details  Key results from experiments</p>
    <p>Both SSP and A-BSP are able to exploit the staleness sweet-spot for faster convergence</p>
    <p>SSP is tolerant of small transient stragglers  But SSP incurs more communication traffic</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 33</p>
  </div>
  <div class="page">
    <p>References  J. Cipar, G. Ganger, K. Keeton, C. B. Morrey, III, C. A. Soules, and A.</p>
    <p>Veitch. LazyBase: trading freshness for performance in a scalable database. Eurosys12.</p>
    <p>J. Cipar, Q. Ho, J. K. Kim, S. Lee, G. R. Ganger, G. Gibson, K. Keeton, and E. Xing. Solving the straggler problem with bounded staleness. HotOS13.</p>
    <p>NYTimes: http://archive.ics.uci.edu/ml/datasets/Bag+of+Words  Q. Ho, J. Cipar, H. Cui, S. Lee, J. Kim, P. Gibbons, G. Gibson, G.</p>
    <p>Ganger, and E. Xing. More effective distributed ML via a stale synchronous parallel parameter server. NIPS13.</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 34</p>
  </div>
  <div class="page">
    <p>BACK-UP</p>
  </div>
  <div class="page">
    <p>Example: Topic Modeling</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 36</p>
    <p>Corpus of documents</p>
    <p>word-topic table</p>
    <p>Topic modeler</p>
    <p>doc-topic table</p>
    <p>... ... ... ... Doc i Topic 1: 0.8 Topic 2: 0.1 ... ... ... ... ...</p>
  </div>
  <div class="page">
    <p>(i, j) represents iteration i, work uint j</p>
    <p>BSP Progress and Staleness</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 37</p>
    <p>(2,b)</p>
    <p>(2,d)</p>
    <p>(2,f)</p>
    <p>Th re</p>
    <p>ad</p>
    <p>(3,a) (3,b) (4,a) (4,b)</p>
    <p>(3,c) (3,d) (4,c) (4,d)</p>
    <p>(3,e) (3,f) (4,e) (4,f) 3 Clock 4 barrier barrier barrier</p>
    <p>... (2,a)</p>
    <p>... (2,c)</p>
    <p>... (2,e)</p>
    <p>barrier</p>
  </div>
  <div class="page">
    <p>A-BSP, wpc = 2 iterations</p>
    <p>A-BSP Progress and Staleness</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 38</p>
    <p>... (2,b)</p>
    <p>(2,d)</p>
    <p>(2,f)</p>
    <p>Th re</p>
    <p>ad</p>
    <p>(3,a) (3,b) (4,a) (4,b)</p>
    <p>(3,c) (3,d) (4,c) (4,d)</p>
    <p>(3,e) (3,f) (4,e) (4,f) 2 Clock barrier barrier</p>
    <p>(2,a)</p>
    <p>... (2,c)</p>
    <p>... (2,e)</p>
  </div>
  <div class="page">
    <p>SSP Progress and Staleness  SSP, wpc = 1 iteration, slack = 1 clock</p>
    <p>Same staleness bound as the A-BSP one  But more flexible</p>
    <p>Data staleness for SSP with wpc and slack:  wpc x (slack + 1) - 1</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 39</p>
    <p>(2,b)</p>
    <p>(2,d)</p>
    <p>(2,f)</p>
    <p>Th re</p>
    <p>ad</p>
    <p>(3,a) (3,b) (4,a) (4,b)</p>
    <p>(3,c) (3,d) (4,c) (4,d)</p>
    <p>(3,e) (3,f) (4,e) (4,f) 3 Clock 4</p>
    <p>Slack of 1 clock</p>
    <p>... (2,a)</p>
    <p>... (2,c)</p>
    <p>... (2,e)</p>
  </div>
  <div class="page">
    <p>SSP VS A-BSP  A-BSP is SSP with a slack of zero  Data staleness bound</p>
    <p>SSP {wpc, slack} == A-BSP {wpc x (slack + 1), 0}  SSP is a pipelined version of A-BSP</p>
    <p>Tolerates transient stragglers</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 40</p>
  </div>
  <div class="page">
    <p>LazyTable Architecture</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 41</p>
    <p>Tablet server process-0</p>
    <p>Client process-0</p>
    <p>App. thread</p>
    <p>Client library</p>
    <p>Thread cache/ oplog</p>
    <p>Process cache/ oplog</p>
    <p>App. thread</p>
    <p>Thread cache/ oplog</p>
    <p>Tablet server process-1</p>
    <p>Client process-1</p>
    <p>App. thread</p>
    <p>Client library</p>
    <p>Thread cache/ oplog</p>
    <p>Process cache/ oplog</p>
    <p>App. thread</p>
    <p>Thread cache/ oplog</p>
  </div>
  <div class="page">
    <p>Stragglers: Delay  Delaying some threads</p>
    <p>Artificially introduce stragglers to the system  Have some threads sleep() for a time</p>
    <p>Experiment setup  Threads sleep d seconds in turn</p>
    <p>Threads of machine i sleep at iteration i  Compare influence of different d</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 42</p>
  </div>
  <div class="page">
    <p>Delay d (sec)</p>
    <p>Ti m</p>
    <p>e pe</p>
    <p>r i te</p>
    <p>ra tio</p>
    <p>n (s</p>
    <p>ec )</p>
    <p>ideal wpc=2, slack=0 (A-BSP) wpc=1, slack=1 (SSP)</p>
    <p>Stragglers: Delay (Results)</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 43</p>
    <p>Ideal slow down: d/8 per iter on 8 machines</p>
    <p>SSP tolerates transient stragglers</p>
    <p>A-BSP slow down: d/2 per iter</p>
  </div>
  <div class="page">
    <p>The Cost of Increased Flexibility  Comparing {wpc=X, ...} with {wpc=2X, ...}</p>
    <p>Bytes sent doubled (send update twice as often)  Bytes received almost doubled</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 44</p>
    <p>Send Receive 0</p>
    <p>M eg</p>
    <p>ab yt</p>
    <p>es p</p>
    <p>er it</p>
    <p>er at</p>
    <p>io n</p>
    <p>(M B</p>
    <p>/it er</p>
    <p>)</p>
    <p>wpc=4, slack=0 wpc=2, slack=1 wpc=1, slack=3</p>
    <p>smaller wpc, larger slack</p>
  </div>
  <div class="page">
    <p>Key Takeaway Insight #3  SSP incurs more traffic</p>
    <p>Finer grained division of clocks  Avoiding barriers is still a win,</p>
    <p>if communication is not the bottleneck</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 45</p>
  </div>
  <div class="page">
    <p>Prefetching  Conservative prefetch</p>
    <p>refresh row only when its too stale</p>
    <p>Aggressive prefetch</p>
    <p>refresh row every clock</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 46</p>
  </div>
  <div class="page">
    <p>Prefetching (results)</p>
    <p>Henggang Cui  July 14!http://www.pdl.cmu.edu/ 47</p>
    <p>-1.08x10 9</p>
    <p>-1.04x10 9</p>
    <p>-1.00x10 9</p>
    <p>-9.60x10 8</p>
    <p>L o g lik</p>
    <p>e lih</p>
    <p>o o d</p>
    <p>Work done (iterations )</p>
    <p>cons ervative pf aggres s ive pf</p>
    <p>wpc = 1 iter, slack = 7 clocks</p>
  </div>
</Presentation>
