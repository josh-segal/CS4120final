<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Formal Foundation for XrML</p>
    <p>Vicky Weissman Joint work with Joe Halpern</p>
  </div>
  <div class="page">
    <p>The big picture  A policy says that under certain</p>
    <p>conditions an action, such as downloading a file, is permitted or forbidden.</p>
    <p>Digital content providers want  to write policies about how their</p>
    <p>works may be accessed, and  they want their policies enforced.</p>
  </div>
  <div class="page">
    <p>Diverse apps  same need</p>
    <p>Because we cant regulate access to online content with precision:  Digital libraries cant put certain</p>
    <p>content online; it might violate IP laws.  The Greek Orthodox Archdiocese of</p>
    <p>America is wary of defamation.  Cultural traditions arent respected.</p>
    <p>(Australian Aboriginal communities often restrict access to a clan or gender.)</p>
  </div>
  <div class="page">
    <p>XrML to the rescue  XrML is a language for writing policies.  Syntax is XML-based.  Semantics is given in 2 ways.</p>
    <p>Bottom line: write policies in XrML, enforce using the algorithm.</p>
  </div>
  <div class="page">
    <p>Industry likes XrML  XrML endorsed by Adobe, Hewlett</p>
    <p>Packard, Microsoft, Xerox, Barnesandnoble.com, MPEG International Standards Committee</p>
    <p>Microsoft and others plan to make XrMLcompliant products.</p>
    <p>Will tomorrows OS, DVD player,  enforce XrML policies?</p>
  </div>
  <div class="page">
    <p>XrML Shortcomings  No formal semantics.</p>
    <p>Policies can be ambiguous.  The interpretation of the syntax doesnt</p>
    <p>quite match the algorithm.  The algorithms behavior on some</p>
    <p>(realistic) input is unintuitive and unintended by language designers.  E.g. If Alice is a student and every student</p>
    <p>may eat lunch, may Alice? Alg. says no.</p>
  </div>
  <div class="page">
    <p>Improving XrML  Fix the algorithm to match developers</p>
    <p>intent.  Translate XrML policies to formulas in modal</p>
    <p>first-order logic.  Lets us compare XrML with languages in CS</p>
    <p>literature, borrow complexity results, extensions,</p>
    <p>Formal semantics given in a fairly standard way.  Prove our translation matches the algorithm.</p>
    <p>Algorithm says policies imply a permission iff translated policies imply translated permission.</p>
  </div>
  <div class="page">
    <p>First step: Choose a version</p>
    <p>Options:  XrML published by ContentGuard,  XrML modified by MPEG standards committee,</p>
    <p>2003 version, or  Wait for 2004 release, an ISO standard.</p>
    <p>We chose the 2003 version.  Bugs we find can be fixed.  We refer to the 2003 version as XrML.</p>
  </div>
  <div class="page">
    <p>XrML syntax  XrML is an XML-based language.</p>
    <p>XrML policies are verbose.  So, we present a syntax that is</p>
    <p>more concise and  easy to map to XrML syntax.</p>
  </div>
  <div class="page">
    <p>Syntax  Principals</p>
    <p>Agents (e.g., Alice, Bob)  Resources</p>
    <p>Digital content (e.g., a movie, an article)  Rights</p>
    <p>Actions (e.g., play, edit)  Properties</p>
    <p>Describe a principal (e.g., adult, trusted)</p>
  </div>
  <div class="page">
    <p>Syntax (cont.)  Statements</p>
    <p>Stmt ::= Pr(p) | Perm(p, r, s) | true  Pr(p) means principal p has property</p>
    <p>Pr.  Perm(p, r, s) means p is permitted to</p>
    <p>exercise right r over resource s.</p>
  </div>
  <div class="page">
    <p>Syntax (cont.)  Statements</p>
    <p>Stmt ::= Pr(p) | Perm(p, r, s) | true  Pr(p) means principal p has property</p>
    <p>Pr.  Perm(p, r, s) means p is permitted to</p>
    <p>exercise right r over resource s.</p>
  </div>
  <div class="page">
    <p>Syntax (cont.)  Statements</p>
    <p>Stmt ::= Pr(p) | Perm(p, r, s) | true  Pr(p) means principal p has property</p>
    <p>Pr.  Perm(p, r, s) means p is permitted to</p>
    <p>exercise right r over resource s.</p>
  </div>
  <div class="page">
    <p>Syntax (cont.)  Statements</p>
    <p>Stmt ::= Pr(p) | Perm(p, r, s) | true  Pr(p) means principal p has property</p>
    <p>Pr.  Perm(p, r, s) means p is permitted to</p>
    <p>exercise right r over resource s.</p>
  </div>
  <div class="page">
    <p>Syntax (cont.)  grant ::=x1xn(Stmt  Stmt</p>
    <p>Stmt)</p>
    <p>If condition holds, then conclusion holds.  In our fragment, grants are closed</p>
    <p>(no free variables).  license ::= (grant, principal)</p>
    <p>(g, p) means p issues/says g.</p>
    <p>Stmt ::= Pr(p) | Perm(p, r, s) | true</p>
    <p>condition conclusion</p>
  </div>
  <div class="page">
    <p>Examples  Can write:</p>
    <p>`Joe is a professor as true  Prof(Joe) and  Vicky says `Every professor who</p>
    <p>gives a talk may have a cookie as (x (Prof(x)  GivesTalk(x)</p>
    <p>Perm(x, eat, cookie)), Vicky).</p>
  </div>
  <div class="page">
    <p>Examples  Can write:</p>
    <p>`Joe is a professor as true  Prof(Joe) and  Vicky says `Every professor who</p>
    <p>gives a talk may have a cookie as (x (Prof(x)  GivesTalk(x)</p>
    <p>Perm(x, eat, cookie)), Vicky).</p>
  </div>
  <div class="page">
    <p>Examples  Can write:</p>
    <p>`Joe is a professor as true  Prof(Joe) and  Vicky says `Every professor who</p>
    <p>gives a talk may have a cookie as (x (Prof(x)  GivesTalk(x)</p>
    <p>Perm(x, eat, cookie)), Vicky).</p>
  </div>
  <div class="page">
    <p>Principals  in some detail  Set of principals is the set of primitive</p>
    <p>principals (e.g., Alice, Bob) closed under union. E.g., Alice  Bob is a principal.  Often written as {Alice, Bob}.</p>
    <p>According to the XrML doc, {p1,.., pn} represents p1, , pn acting together as one holistic identified entity.  But what does this mean?</p>
  </div>
  <div class="page">
    <p>Groups/members relationship  Suppose that Alice has property PrA</p>
    <p>and the group {Alice, } has property Prg.</p>
    <p>What should we infer?  Option 1: nothing.  Option 2: {Alice, } has property</p>
    <p>PrA.  Option 3: Alice has property Prg.</p>
  </div>
  <div class="page">
    <p>Groups/members relationship  Suppose that Alice has property PrA and</p>
    <p>group {Alice, } has property Prg.  What should we infer?</p>
    <p>Option 1: nothing.  Option 2: {Alice, } has property PrA.  Option 3: Alice has property Prg.</p>
    <p>XrML chooses each of these options (at different points in the specification).</p>
  </div>
  <div class="page">
    <p>Groups/members relationship  Suppose that Alice has property PrA and</p>
    <p>group {Alice, } has property Prg.  What should we infer?</p>
    <p>Option 1: nothing.  Option 2: {Alice, } has property PrA.  Option 3: Alice has property Prg.</p>
    <p>XrML chooses each of these options (at different points in the specification).</p>
    <p>No formal semantics  language is inconsistent!</p>
  </div>
  <div class="page">
    <p>Our fix  Since XrML is inconsistent</p>
    <p>We do not assume that a group has the properties of its members or viceversa.</p>
    <p>But can easily write policies to force either relationship (or both).</p>
  </div>
  <div class="page">
    <p>The syntax given here is a fragment of XrML. (See paper for details.)</p>
  </div>
  <div class="page">
    <p>XrML Algorithm  Query(s,L,G) algorithm</p>
    <p>s is a closed statement.  L is a set of licenses.  G is a set of grants that implicitly hold.  Returns true if s follows from L and</p>
    <p>G.  Query calls Auth and Holds.</p>
  </div>
  <div class="page">
    <p>Auth Algorithm  Recall</p>
    <p>s is a closed statement.  L is a set of licenses.  G is a set of grants that implicitly hold.  A condition is a conjunction of</p>
    <p>statements.  Auth(s, L, G) returns a set D of</p>
    <p>closed conditions; s follows from L and G if a condition in D holds.</p>
  </div>
  <div class="page">
    <p>Holds Algorithm  Holds(d,L) algorithm</p>
    <p>d is a closed condition.  L is a set of licenses.  Returns true if d follows from L.</p>
  </div>
  <div class="page">
    <p>Query(s, L, G) overview</p>
    <p>Query(s, L, G) Set D to the output of Auth(s, L, G) Return dD Holds(d, L)</p>
    <p>s is a closed statement, L is a set of licenses, and G is a set of grants that hold implicitly.</p>
    <p>s follows from L and G if a condition in the output of Auth(s, L, G) holds.</p>
    <p>Holds(d, L) returns true if d follows from L.</p>
  </div>
  <div class="page">
    <p>Problem  Let g = true  Student(Alice),</p>
    <p>g = x (Student(x)  Perm(x, eat, lunch))</p>
    <p>May Alice eat lunch?  Query(Perm(Alice, eat, lunch), , {g, g})</p>
  </div>
  <div class="page">
    <p>Problem  Let g = true  Student(Alice),</p>
    <p>g = x (Student(x)  Perm(x, eat, lunch))</p>
    <p>May Alice eat lunch?  Query(Perm(Alice, eat, lunch), , {g, g})</p>
    <p>Query calls Auth(Perm(Alice, eat, lunch), , {g, g}).</p>
    <p>Auth returns {Student(Alice)}.</p>
  </div>
  <div class="page">
    <p>Problem  Let g = true  Student(Alice),</p>
    <p>g = x (Student(x)  Perm(x, eat, lunch))</p>
    <p>May Alice eat lunch?  Query(Perm(Alice, eat, lunch), , {g, g})</p>
    <p>Query calls Auth(Perm(Alice, eat, lunch), , {g, g}).  Auth returns {Student(Alice)}.  Query calls Holds(Student(Alice), ).</p>
    <p>lost g!</p>
  </div>
  <div class="page">
    <p>Problem  Let g = true  Student(Alice),</p>
    <p>g = x (Student(x)  Perm(x, eat, lunch))</p>
    <p>May Alice eat lunch?  Query(Perm(Alice, eat, lunch), , {g, g})</p>
    <p>Query calls Auth(Perm(Alice, eat, lunch), , {g, g}).  Auth returns {Student(Alice)}.  Query calls Holds(Student(Alice), ).  Holds returns false; so, Query returns false.</p>
    <p>lost g!</p>
  </div>
  <div class="page">
    <p>The fix  To correct the problem, pass G to</p>
    <p>Holds and modify Holds to use the new info.</p>
    <p>Bug is easy to find and easy to fix, but still made it into the released March 2003 version of the spec.</p>
  </div>
  <div class="page">
    <p>Another bug  Query(s, , {x (Perm(p, issue, x)  s)})</p>
    <p>Query calls Auth on same input.  Auth returns {Perm(p, issue, g) | g is a</p>
    <p>grant}.  Recall: Auth output is a set of closed</p>
    <p>conditions.  Query calls Holds on each returned</p>
    <p>condition.</p>
  </div>
  <div class="page">
    <p>Another bug  Query(s, , {x (Perm(p, issue, x)  s)})</p>
    <p>Query calls Auth on same input.  Auth returns {Perm(p, issue, g) | g is a grant}.</p>
    <p>Recall: Auth output is a set of closed conditions.  Query calls Holds on each returned condition.</p>
    <p>The set of grants is infinite.  g0 = true  Student(Alice)  gi = true  Perm(Bob, issue, gi-1), i = 1,</p>
    <p>D is an infinite set; so, Query doesnt terminate.</p>
  </div>
  <div class="page">
    <p>Our fix  Restrict the grants in the language.</p>
    <p>If a grant g has a condition d, d mentions a resource variable x, and x is free in d, then x is free in gs conclusion.</p>
    <p>Easy to prove that if the restriction is met, then Auth always returns a finite set.</p>
    <p>Can make an empirical argument for why this restriction is okay.</p>
  </div>
  <div class="page">
    <p>But thats not all</p>
    <p>In this small fragment of XrML, there are 2 other bugs. See paper for details.</p>
  </div>
  <div class="page">
    <p>The translation  The translation is fairly</p>
    <p>straightforward.  Two points worth noting:</p>
    <p>Query assumes that a grant g holds, if its issued by some trusted principal (i.e., a principal whose permitted to issue g).</p>
    <p>Holds(d, L, G) returns true iff d logically follows from L and G. So, a condition d holds iff d logically follows from L and G.</p>
    <p>The translation depends on L and G.</p>
  </div>
  <div class="page">
    <p>Correctness</p>
    <p>Thm: the fixed Query(s, L, G)</p>
    <p>returns true iff lLl L,G  gG gL,G  sL,G is true in every model that satisfies the union properties (p1p2 = p2p1, ).  tL,G is the translation of t wrt L and G.</p>
  </div>
  <div class="page">
    <p>Complexity  The XrML alg. runs in exponential</p>
    <p>time.  The XrML document says that the</p>
    <p>language implementers are responsible for optimizations.</p>
    <p>But using the translation, we can prove that</p>
  </div>
  <div class="page">
    <p>Complexity  Determining if a set of XrML grants</p>
    <p>imply a statement is NP-hard.  This is because the language supports sets</p>
    <p>of primitive principals.  If we remove  from the language</p>
    <p>XrML translates (essentially) to Datalog, which is a well-known tractable language.</p>
    <p>Given the translation, finding a tractable, fairly expressive fragment is easy.</p>
  </div>
  <div class="page">
    <p>Summary  Industry wants to implement XrML but   XrML has no formal semantics</p>
    <p>and needs them!  We give formal semantics to a</p>
    <p>representative fragment of XrML.  Even a small fragment is intractable.</p>
    <p>We can leverage results in the CS literature to find fairly expressive, tractable options.</p>
    <p>Next step: Add negation to XrML.  This is critical for merging policies.</p>
    <p>Two minor bugs in paper (dont effect results); corrected version online.</p>
  </div>
  <div class="page">
    <p>talk ends on preceding slide</p>
  </div>
  <div class="page">
    <p>Sample XrML policy  Consider the policy `anyone may</p>
    <p>play the movie `Big Hit for $2 (per use).</p>
    <p>We could write this policy in XrML as</p>
  </div>
  <div class="page">
    <p>&lt;license&gt; &lt;grant&gt; &lt;forAll varName=&quot;anyone&quot; /&gt;</p>
    <p>&lt;!-- This is saying that anyone can use this grant. --&gt; &lt;principal varRef=&quot;anyone&quot; /&gt; &lt;!-- The right to play the movie is granted --&gt; &lt;cx:play /&gt;</p>
    <p>&lt;!-- This is the movie that we are giving access to. --&gt;</p>
    <p>&lt;cx:digitalWork&gt; &lt;cx:title&gt;Big Hit &lt;/cx:title&gt;</p>
    <p>&lt;/cx:digitalWork&gt; &lt;!-- $2.00 each --&gt; &lt;sx:fee&gt;</p>
    <p>&lt;sx:paymentPerUse&gt; &lt;sx:rate currency=&quot;USD&quot;&gt;2.00&lt;/ sx:rate&gt;</p>
    <p>&lt;/sx:paymentPerUse &lt;/sx:fee&gt;</p>
    <p>&lt;/grant&gt; &lt;/license&gt;</p>
  </div>
  <div class="page">
    <p>The translation  We now translate XrML licenses and grants to</p>
    <p>equivalent formulas in modal first-order logic.</p>
    <p>The translation relies on which licenses have been issued and which grants implicitly hold.</p>
    <p>Let sL,G be the translation of any string s wrt the input parameters L and G.</p>
  </div>
  <div class="page">
    <p>Translation (cont.)  Except for licenses and grants,</p>
    <p>translation is easy.  We assume a constant cg for each grant g  Perm(p, issue, g)L,G = Perm(p, issue, cg)  (d1  d2)L,G = d1L,G  d2L,G,  Pr(p)L,G = Pr(p), and  trueL,G = true</p>
  </div>
  <div class="page">
    <p>Translating licenses  Recall: (g, p) means p said g.  According to Query,</p>
    <p>if p may issue g, then (g,p) means that g holds  otherwise, (g, p) is meaningless</p>
    <p>Option 1: (g, p)L,G = Said(p, cg),  restrict to models satisfying the axiom scheme</p>
    <p>Said(p, cg)  Perm(p, issue, cg)  gL,G</p>
    <p>Option 2: (g, p)L,G = Perm(p, issue, cg)  gL,G</p>
  </div>
  <div class="page">
    <p>Translating grants  x1xn(d  e)L,G =</p>
    <p>x1xn (Holds(d, L, G)  eL,G)  Holds(d, L, G) returns true iff d is a</p>
    <p>logical consequence of L and G.  Define a modal operator Val, where</p>
    <p>Val() is true in a model m iff  is true in all models.</p>
    <p>Holds(d, L, G)=Val(lL l L,G  gG gL,G  dL,G )</p>
  </div>
</Presentation>
