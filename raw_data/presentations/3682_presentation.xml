<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Retrofitting Fine Grain Isolation in the Firefox Renderer</p>
    <p>Shravan Narayan, Craig Disselkoen, Tal Garfinkel, Nathan Froyd, Eric Rahm,</p>
    <p>Sorin Lerner, Hovav Shacham, Deian Stefan</p>
  </div>
  <div class="page">
    <p>We use browsers for everything</p>
    <p>Email, IM, conferences, meetings etc.</p>
  </div>
  <div class="page">
    <p>Third-party libraries make this possible</p>
    <p>Browsers cannot implement every feature from scratch</p>
    <p>Browsers use third-party libraries  Used to render audio, video, images etc.</p>
    <p>Large number of supported formats and libraries  Images  JPEG, PNG, GIF, SVG, BMP, APNG, ICO, TIFF, WebP</p>
    <p>Video  H.264, VP8, VP9, Theora</p>
    <p>Audio  MP3, WAV, AAC, Vorbis, FLAC, Opus</p>
  </div>
  <div class="page">
    <p>Bugs in libraries can compromise browsers</p>
    <p>(2018 Pwn2Own)</p>
  </div>
  <div class="page">
    <p>How do browsers deal with bugs in libraries?</p>
    <p>Traditionally: Coarse-grain renderer isolation  Goal: protect system from browser compromise</p>
    <p>Isolates the renderer (code handling untrusted HTML, images, JavaScript)</p>
    <p>More recently: Site isolation  Goal: protect one site from another</p>
    <p>Isolates different sites from each other</p>
    <p>E.g., *.google.com is isolated from *.zoom.us</p>
  </div>
  <div class="page">
    <p>Why Site Isolation is not enough</p>
    <p>Real sites rely on cross origin resources  93% of sites load cross-origin media</p>
    <p>Lots of cross origin jpegs</p>
    <p>Bug in libjpeg  renderer compromise</p>
    <p>Attacker may be able to host untrusted content on same origin  Malicious media on Google Drive  compromised renderer</p>
    <p>Allows access victims Drive files</p>
  </div>
  <div class="page">
    <p>We need fine grain isolation</p>
    <p>evil.com</p>
    <p>Isolate/sandbox media libraries like libjpeg  Bugs in libjpeg should not compromise the rest of Firefox</p>
    <p>Firefox</p>
    <p>libogglibjpeg libvpx</p>
  </div>
  <div class="page">
    <p>We know how to do this!</p>
    <p>In-process: Native Client, WebAssembly</p>
    <p>Done?</p>
    <p>Firefox</p>
    <p>Comm. layer</p>
    <p>Browser memory</p>
    <p>libjpeg</p>
    <p>Sandbox memory</p>
    <p>libvpx</p>
    <p>Sandbox memory</p>
    <p>libogg</p>
    <p>Sandbox memory</p>
  </div>
  <div class="page">
    <p>Isolation is not the only concern</p>
    <p>Firefox code was written to trust libjpeg  No sanitization of libjpeg data  renderer compromise</p>
    <p>Isolation mechanism may introduce ABI differences  Eg: not accounting for this  renderer compromise</p>
    <p>Engineering challenges  Difficult to disaggregate the tightly coupled data &amp; control flow</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>jpeg_decompress_struct jpeg_img;</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>jpeg_create_decompress(&amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Using unchecked data from sandbox</p>
    <p>Now-untrusted jpeg initialized struct</p>
  </div>
  <div class="page">
    <p>RLBox</p>
    <p>A C++ library that:</p>
    <p>Process, Native Client, WebAssembly, etc.</p>
    <p>tainted types for data flow in/out of sandbox</p>
    <p>Firefox</p>
    <p>Browser memory</p>
    <p>libjpeg</p>
    <p>Sandbox memory</p>
    <p>libvpx</p>
    <p>Sandbox memory</p>
    <p>libogg</p>
    <p>Sandbox memory</p>
    <p>RLBox</p>
  </div>
  <div class="page">
    <p>Marking data from the sandbox tainted...</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>jpeg_decompress_struct jpeg_img;</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>jpeg_create_decompress(&amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>jpeg_decompress_struct jpeg_img;</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>jpeg_create_decompress(&amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>jpeg_decompress_struct jpeg_img;</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>jpeg_create_decompress(&amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Invoke jpeg functions via RLBox</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>jpeg_decompress_struct jpeg_img;</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>sandbox.invoke(jpeg_create_decompress, &amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Invoke jpeg functions via RLBox</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>jpeg_decompress_struct jpeg_img;</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>sandbox.invoke(jpeg_create_decompress, &amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Compiles? Expected: tainted&lt;jpeg_decompress_struct*&gt;</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>sandbox.invoke(jpeg_create_decompress, &amp;jpeg_img);</p>
    <p>jpeg_img.src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>jpeg_source_mgr jpeg_input_source_mgr;</p>
    <p>sandbox.invoke(jpeg_create_decompress, p_jpeg_img);</p>
    <p>p_jpeg_img-&gt;src = &amp;jpeg_input_source_mgr;</p>
    <p>jpeg_img.src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>jpeg_read_header(&amp;jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = jpeg_img.output_width * jpeg_img.output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Compiles? Expected: tainted&lt;jpeg_source_mgr*&gt;</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>tainted&lt;jpeg_source_mgr*&gt; p_jpeg_input_source_mgr = sandbox.malloc_in_sandbox&lt;jpeg_source_mgr&gt;();</p>
    <p>sandbox.invoke(jpeg_create_decompress, p_jpeg_img);</p>
    <p>p_jpeg_img-&gt;src = p_jpeg_input_source_mgr;</p>
    <p>p_jpeg_img-&gt;src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>sandbox.invoke(jpeg_read_header, p_jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>tainted&lt;uint32_t&gt; size = p_jpeg_img-&gt;output_width * p_jpeg_img-&gt;output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>tainted&lt;jpeg_source_mgr*&gt; p_jpeg_input_source_mgr = sandbox.malloc_in_sandbox&lt;jpeg_source_mgr&gt;();</p>
    <p>sandbox.invoke(jpeg_create_decompress, p_jpeg_img);</p>
    <p>p_jpeg_img-&gt;src = p_jpeg_input_source_mgr;</p>
    <p>p_jpeg_img-&gt;src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>sandbox.invoke(jpeg_read_header, p_jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>tainted&lt;uint32_t&gt; size = p_jpeg_img-&gt;output_width * p_jpeg_img-&gt;output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Compiles?</p>
    <p>Expected: uint32_t</p>
    <p>Got: tainted&lt;uint32_t&gt;</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>tainted&lt;jpeg_source_mgr*&gt; p_jpeg_input_source_mgr = sandbox.malloc_in_sandbox&lt;jpeg_source_mgr&gt;();</p>
    <p>sandbox.invoke(jpeg_create_decompress, p_jpeg_img);</p>
    <p>p_jpeg_img-&gt;src = p_jpeg_input_source_mgr;</p>
    <p>p_jpeg_img-&gt;src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>sandbox.invoke(jpeg_read_header, p_jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>tainted&lt;uint32_t&gt; size = p_jpeg_img-&gt;output_width * p_jpeg_img-&gt;output_components;</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Need to remove tainting</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>tainted&lt;jpeg_source_mgr*&gt; p_jpeg_input_source_mgr = sandbox.malloc_in_sandbox&lt;jpeg_source_mgr&gt;();</p>
    <p>sandbox.invoke(jpeg_create_decompress, p_jpeg_img);</p>
    <p>p_jpeg_img-&gt;src = p_jpeg_input_source_mgr;</p>
    <p>p_jpeg_img-&gt;src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>sandbox.invoke(jpeg_read_header, p_jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = (p_jpeg_img-&gt;output_width * p_jpeg_img-&gt;output_components).copy_and_verify(</p>
    <p>[](uint32_t val) -&gt; uint32_t {</p>
    <p>...</p>
    <p>});</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>void create_jpeg_parser() {</p>
    <p>auto sandbox = rlbox::create_sandbox&lt;wasm&gt;();</p>
    <p>tainted&lt;jpeg_decompress_struct*&gt; p_jpeg_img = sandbox.malloc_in_sandbox&lt;jpeg_decompress_struct&gt;();</p>
    <p>tainted&lt;jpeg_source_mgr*&gt; p_jpeg_input_source_mgr = sandbox.malloc_in_sandbox&lt;jpeg_source_mgr&gt;();</p>
    <p>sandbox.invoke(jpeg_create_decompress, p_jpeg_img);</p>
    <p>p_jpeg_img-&gt;src = p_jpeg_input_source_mgr;</p>
    <p>p_jpeg_img-&gt;src-&gt;fill_input_buffer = /* Set input bytes source */;</p>
    <p>sandbox.invoke(jpeg_read_header, p_jpeg_img /* ... */);</p>
    <p>uint32_t* outputBuffer = /* ... */;</p>
    <p>while (/* check for output lines */) {</p>
    <p>uint32_t size = (p_jpeg_img-&gt;output_width * p_jpeg_img-&gt;output_components).copy_and_verify(</p>
    <p>[](uint32_t val) -&gt; uint32_t {</p>
    <p>assert(val &lt;= outputBufferSize);</p>
    <p>return val;</p>
    <p>});</p>
    <p>memcpy(outputBuffer, /* ... */, size);</p>
    <p>}</p>
    <p>}</p>
    <p>Compiles?</p>
  </div>
  <div class="page">
    <p>How well does this work in a real codebase?</p>
    <p>We sandboxed different kinds of libraries in Firefox  Image libraries  libjpeg, libpng</p>
    <p>Video libraries  libtheora, libvpx</p>
    <p>Audio library  libogg</p>
    <p>Compression library  zlib</p>
    <p>We evaluate RLBox on several dimensions. In this talk:  Developer effort &amp; automation</p>
    <p>Performance overhead</p>
  </div>
  <div class="page">
    <p>Developer effort (Takeaway)</p>
    <p>On average, sandboxing a library takes only a few days</p>
    <p>RLBox automation  Bounds checks: 8-64 (average: 23)</p>
    <p>Nested ABI conversions: 5-17 (average: 7)</p>
    <p>Locations that need validators: 2-51 (average: 17)  Validators are between 2-4 lines of code</p>
  </div>
  <div class="page">
    <p>Performance impact (Takeaway)</p>
    <p>Native Client</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Securing Firefox with WebAssembly</p>
    <p>https://hacks.mozilla.org/2020/02/securing-firefox-with-webassembly/</p>
  </div>
</Presentation>
