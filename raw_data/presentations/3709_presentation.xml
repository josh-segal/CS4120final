<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Donky: Domain Keys</p>
    <p>Efficient In-Process Isolation for RISC-V and x86</p>
    <p>David Schrammel, Samuel Weiser, Stefan Steinegger, Martin Schwarzl,</p>
    <p>Michael Schwarz, Stefan Mangard, Daniel Gruss</p>
    <p>IAIK  Graz University of Technology</p>
  </div>
  <div class="page">
    <p>Motivation www.tugraz.at</p>
    <p>Modern software incredibly complex  Often closed-source, 3rd-party libraries with potential unknown vulnerabilities  Web-Browsers: v Handle sensitive information</p>
    <p>But also run untrusted code</p>
    <p>Dozens of libraries for media decoding, font shaping, . . .</p>
    <p>Top 2 applications #CVEs: Firefox and Chrome1</p>
    <p>Ongoing effort:  Rewrite libraries in safe languages</p>
    <p>Split browser into multiple processes</p>
    <p>Engineering effort or runtime overhead</p>
    <p>Need efficient sandboxing 1 https://www.cvedetails.com/top-50-products.php</p>
  </div>
  <div class="page">
    <p>Software sandboxing www.tugraz.at</p>
    <p>Kernel-based:  Process Isolation: high security, high context-switch cost  Kernel-based in-process isolation often require heavy kernel modifications</p>
    <p>Userspace:  SFI (e.g., NativeClient)  PKU-based (e.g., ERIM)  typically fast context-switches but runtime overhead</p>
  </div>
  <div class="page">
    <p>PKU: Memory Protection Keys for Userspace www.tugraz.at</p>
    <p>Pages tagged with a protection key  Key stored in Page Table Entry  Intel MPK: 4-bit keys  16 keys</p>
    <p>Key-permissions in policy register (e.g., PKRU)</p>
    <p>Allows to quickly change memory permissions (from userspace)</p>
    <p>Virtual address space:</p>
    <p>PTEs:</p>
    <p>ph. addr. r w x ...</p>
    <p>k1 ph. addr. r w x ...</p>
    <p>k2 ph. addr. r w x ...</p>
    <p>k3 ph. addr. r w x ...</p>
    <p>... 15</p>
    <p>W R 0 0</p>
  </div>
  <div class="page">
    <p>PKU: Memory Protection Keys for Userspace www.tugraz.at</p>
    <p>Pages tagged with a protection key  Key stored in Page Table Entry  Intel MPK: 4-bit keys  16 keys  Key-permissions in policy register</p>
    <p>(e.g., PKRU)</p>
    <p>Allows to quickly change memory permissions (from userspace)</p>
    <p>Virtual address space:</p>
    <p>PTEs:</p>
    <p>ph. addr. r w x ...</p>
    <p>k1 ph. addr. r w x ...</p>
    <p>k2 ph. addr. r w x ...</p>
    <p>k3 ph. addr. r w x ...</p>
    <p>... 15</p>
    <p>W R 0 0</p>
  </div>
  <div class="page">
    <p>PKU-based sandboxing www.tugraz.at</p>
    <p>How to use MPK for in-process isolation?  Only safe call gates modify PKRU  No unsafe writes (WRPKRU) to the register exist.  Binary scanning/rewriting, WX</p>
    <p>Limit syscalls that bypass/circumvent PKRU  Kernel module, seccomp, ptrace, ...</p>
    <p>PKU-based sandboxing works (e.g., ERIM, Hodor)</p>
    <p>Open questions:  Can we sandbox self-modifying code (e.g., JavaScript JIT compiler)?  Can we have PKU-based sandboxing without binary scanning?</p>
  </div>
  <div class="page">
    <p>PKU for RISC-V www.tugraz.at</p>
    <p>Design PKU from the ground up for RISC-V with in-process isolation in mind</p>
    <p>Repurpose RISC-V Extension for User-Level Interrupts</p>
    <p>Modification: Limit register access to the interrupt handler itself.  Trusted user-space exception handler (Monitor)  Monitor intercepts syscalls directly in user-space</p>
    <p>RISC-V PTEs allows up to 10-bit keys (1024 domains)  PKU policy register</p>
    <p>4 key-slots with read/write permissions.  PKU policy register writable only from monitor</p>
  </div>
  <div class="page">
    <p>PKU for RISC-V www.tugraz.at</p>
    <p>Design PKU from the ground up for RISC-V with in-process isolation in mind</p>
    <p>Repurpose RISC-V Extension for User-Level Interrupts</p>
    <p>Modification: Limit register access to the interrupt handler itself.  Trusted user-space exception handler (Monitor)  Monitor intercepts syscalls directly in user-space</p>
    <p>RISC-V PTEs allows up to 10-bit keys (1024 domains)  PKU policy register</p>
    <p>4 key-slots with read/write permissions.  PKU policy register writable only from monitor</p>
  </div>
  <div class="page">
    <p>PKU for RISC-V www.tugraz.at</p>
    <p>Design PKU from the ground up for RISC-V with in-process isolation in mind</p>
    <p>Repurpose RISC-V Extension for User-Level Interrupts</p>
    <p>Modification: Limit register access to the interrupt handler itself.  Trusted user-space exception handler (Monitor)  Monitor intercepts syscalls directly in user-space</p>
    <p>RISC-V PTEs allows up to 10-bit keys (1024 domains)  PKU policy register</p>
    <p>4 key-slots with read/write permissions.  PKU policy register writable only from monitor</p>
  </div>
  <div class="page">
    <p>Concept Overview www.tugraz.at</p>
    <p>Domain A</p>
    <p>Monitor</p>
    <p>OS</p>
    <p>Vault</p>
    <p>v  Malicious code l</p>
    <p>Shared</p>
    <p>U sersp</p>
    <p>a ce</p>
    <p>a p</p>
    <p>p lica</p>
    <p>tio n</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3 k4</p>
    <p>k5</p>
    <p>Domain A: k2</p>
    <p>Vault: k2R k3 k5 Malicious: k4 k5</p>
    <p>dcall</p>
    <p>Syscall</p>
    <p>Policy register: k k k kk k k k2</p>
    <p>k k k3 k2Rk k k k4k k k5 k4</p>
  </div>
  <div class="page">
    <p>Concept Overview www.tugraz.at</p>
    <p>Domain A</p>
    <p>Monitor</p>
    <p>OS</p>
    <p>Vault</p>
    <p>v  Malicious code l</p>
    <p>Shared</p>
    <p>U sersp</p>
    <p>a ce</p>
    <p>a p</p>
    <p>p lica</p>
    <p>tio n</p>
    <p>k1</p>
    <p>k2</p>
    <p>k3 k4</p>
    <p>k5</p>
    <p>Domain A: k2</p>
    <p>Vault: k2R k3 k5 Malicious: k4 k5</p>
    <p>dcall</p>
    <p>Syscall</p>
    <p>Policy register: k k k kk k k k2</p>
    <p>k k k3 k2Rk k k k4k k k5 k4</p>
  </div>
  <div class="page">
    <p>Concept Overview www.tugraz.at</p>
    <p>Domain A</p>
    <p>Monitor</p>
    <p>OS</p>
    <p>Vault</p>
    <p>v</p>
    <p>Malicious code</p>
    <p>l</p>
    <p>Shared</p>
    <p>U sersp</p>
    <p>a ce</p>
    <p>a p</p>
    <p>p lica</p>
    <p>tio n</p>
    <p>k1</p>
    <p>k2 k3</p>
    <p>k4</p>
    <p>k5</p>
    <p>Domain A: k2 Vault: k2R k3</p>
    <p>k5 Malicious: k4 k5</p>
    <p>dcall</p>
    <p>Syscall</p>
    <p>Policy register: k k k kk k k k2k k k3 k2R</p>
    <p>k k k k4k k k5 k4</p>
  </div>
  <div class="page">
    <p>Concept Overview www.tugraz.at</p>
    <p>Domain A</p>
    <p>Monitor</p>
    <p>OS</p>
    <p>Vault</p>
    <p>v  Malicious code l</p>
    <p>Shared</p>
    <p>U sersp</p>
    <p>a ce</p>
    <p>a p</p>
    <p>p lica</p>
    <p>tio n</p>
    <p>k1</p>
    <p>k2 k3 k4</p>
    <p>k5</p>
    <p>Domain A: k2 Vault: k2R k3</p>
    <p>k5</p>
    <p>Malicious: k4</p>
    <p>k5</p>
    <p>dcall</p>
    <p>Syscall</p>
    <p>Policy register: k k k kk k k k2k k k3 k2Rk k k k4</p>
    <p>k k k5 k4</p>
  </div>
  <div class="page">
    <p>Concept Overview www.tugraz.at</p>
    <p>Domain A</p>
    <p>Monitor</p>
    <p>OS</p>
    <p>Vault</p>
    <p>v  Malicious code l</p>
    <p>Shared</p>
    <p>U sersp</p>
    <p>a ce</p>
    <p>a p</p>
    <p>p lica</p>
    <p>tio n</p>
    <p>k1</p>
    <p>k2 k3 k4</p>
    <p>k5</p>
    <p>Domain A: k2 Vault: k2R k3 k5 Malicious: k4 k5</p>
    <p>dcall</p>
    <p>Syscall</p>
    <p>Policy register: k k k kk k k k2k k k3 k2Rk k k k4k k k5 k4</p>
  </div>
  <div class="page">
    <p>Concept Overview www.tugraz.at</p>
    <p>Domain A</p>
    <p>Monitor</p>
    <p>OS</p>
    <p>Vault</p>
    <p>v  Malicious code l</p>
    <p>Shared</p>
    <p>U sersp</p>
    <p>a ce</p>
    <p>a p</p>
    <p>p lica</p>
    <p>tio n</p>
    <p>k1</p>
    <p>k2 k3 k4</p>
    <p>k5</p>
    <p>Domain A: k2 Vault: k2R k3 k5 Malicious: k4 k5</p>
    <p>dcall</p>
    <p>Syscall</p>
    <p>Policy register: k k k kk k k k2k k k3 k2Rk k k k4k k k5 k4</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs sp</p>
    <p>sp  sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs sp</p>
    <p>sp  sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs sp</p>
    <p>sp  sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs sp</p>
    <p>sp  sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack</p>
    <p>security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp</p>
    <p>sp</p>
    <p>sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks</p>
    <p>stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp</p>
    <p>sp</p>
    <p>sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create</p>
    <p>policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp</p>
    <p>sp</p>
    <p>sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update</p>
    <p>stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp</p>
    <p>sp</p>
    <p>sp sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch</p>
    <p>jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp  sp</p>
    <p>sp</p>
    <p>sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>dcall(){ ...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp  sp</p>
    <p>sp</p>
    <p>sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er dcall(){</p>
    <p>...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp  sp</p>
    <p>sp</p>
    <p>sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er dcall(){</p>
    <p>...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp  sp</p>
    <p>sp</p>
    <p>sp  sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er dcall(){</p>
    <p>...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp  sp  sp</p>
    <p>sp</p>
    <p>sp  sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er dcall(){</p>
    <p>...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp</p>
    <p>saved regs</p>
    <p>sp  sp  sp sp</p>
    <p>sp</p>
    <p>sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Domain Transitions: dcalls www.tugraz.at</p>
    <p>Domain A Monitor Domain B</p>
    <p>dcall();</p>
    <p>...</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er</p>
    <p>w ra</p>
    <p>p p</p>
    <p>er dcall(){</p>
    <p>...</p>
    <p>}</p>
    <p>load monitor stack  security checks  stack create  policy update  stack switch  jmp to domain</p>
    <p>sp  saved regs sp</p>
    <p>sp  sp sp  sp</p>
    <p>sp</p>
    <p>k1k2 k3</p>
    <p>Access policy: k k k k2</p>
    <p>k k k k3</p>
  </div>
  <div class="page">
    <p>Implementation www.tugraz.at</p>
    <p>Hardware-Software co-design  Small hardware extension for RISC-V</p>
    <p>Based on RISC-V N extension  Standard Extension for User-Level Interrupts  Implemented on RISC-V CPU Ariane/CVA62</p>
    <p>Software library  API for managing domains/keys/transitions  Wraps standard library functions (memory management, threads, signals)  Compatible with Intel MPK</p>
  </div>
  <div class="page">
    <p>Evaluation www.tugraz.at</p>
    <p>Evaluated on a RISC-V CPU and CPUs with Intel MPK  Domain transition overhead</p>
    <p>SPEC CPU 2017: 0.1% overhead  Mbed TLS</p>
    <p>1KiB block: 015% overhead (across all cryptographic functions)  Poly1305, 16 bytes:</p>
    <p>Donky: 34.7x slower  Process isolation: 42118x slower</p>
    <p>Isolate Googles JavaScript engine V8:02% overhead</p>
  </div>
  <div class="page">
    <p>Evaluation www.tugraz.at</p>
    <p>Evaluated on a RISC-V CPU and CPUs with Intel MPK  Domain transition overhead</p>
    <p>SPEC CPU 2017: 0.1% overhead  Mbed TLS</p>
    <p>1KiB block: 015% overhead (across all cryptographic functions)  Poly1305, 16 bytes:</p>
    <p>Donky: 34.7x slower  Process isolation: 42118x slower</p>
    <p>Isolate Googles JavaScript engine V8:02% overhead</p>
  </div>
  <div class="page">
    <p>Summary www.tugraz.at</p>
    <p>Efficient and secure in-process isolation  Domain switches and syscall filtering entirely in userspace  Zero overhead within a domain &amp; small switching overhead  No binary scanning, WX, or CFI  Support self-modifying code (JIT compiler)  Configurable trust relationships  Up to 1024 domains/sandboxes</p>
    <p>Open source software and hardware implemenation3</p>
  </div>
  <div class="page">
    <p>Donky: Domain Keys</p>
    <p>Efficient In-Process Isolation for RISC-V and x86</p>
    <p>David Schrammel, Samuel Weiser, Stefan Steinegger, Martin Schwarzl,</p>
    <p>Michael Schwarz, Stefan Mangard, Daniel Gruss</p>
    <p>IAIK  Graz University of Technology</p>
  </div>
</Presentation>
