<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>USENIX NSDI 2015 Oakland, CA</p>
    <p>eXplicit Path Control in Commodity Data Centers: Design and Applications</p>
  </div>
  <div class="page">
    <p>Data centers around the world</p>
    <p>Microsofts Chicago DC Googles worldwide DC map</p>
    <p>Facebook DC interior</p>
  </div>
  <div class="page">
    <p>Multi-path and ECMP</p>
    <p>Flow 1 Flow 2 Flow 3 Flow 4</p>
    <p>State-of-the-art ECMP  Forward packets based on hash of headers  Flows take randomized, implicit paths  On average, over 60% bandwidth waste due</p>
    <p>to path collision (Hedera [NSDI10])</p>
  </div>
  <div class="page">
    <p>eXplicit Path Control</p>
    <p>Flow 1 Flow 2 Flow 3 Flow 4</p>
    <p>To fully utilize network, we must explicitly control paths for flows</p>
  </div>
  <div class="page">
    <p>The case for explicit path control (#1)</p>
    <p>Provisioned IOPS (Amazon EBS, Azure Premium Storage)  Deliver predictable performance</p>
    <p>for I/O intensive apps, relational DBs</p>
    <p>Must provide necessary network bandwidth guarantee</p>
    <p>Explicit path control makes bandwidth guarantee easier to implement</p>
    <p>Remaining bandwidth</p>
    <p>EBSoptimized</p>
    <p>Workers</p>
  </div>
  <div class="page">
    <p>The case for explicit path control (#2)</p>
    <p>DC network updates (zUpdate [Sigcomm13], Dionysus [Sigcomm14])  Congestion-free  Loop-free</p>
    <p>Explicit path control makes DC network updates easier to conduct</p>
    <p>Existing traffic</p>
    <p>Firmware upgrade</p>
  </div>
  <div class="page">
    <p>The case for explicit path control (#2)</p>
    <p>DC network updates (zUpdate [Sigcomm13], Dionysus [Sigcomm14])  Congestion-free  Loop-free</p>
    <p>Explicit path control makes DC network updates easier to conduct</p>
    <p>Existing traffic</p>
    <p>Upgrade  Reboot</p>
  </div>
  <div class="page">
    <p>The case for explicit path control (#2)</p>
    <p>DC network updates (zUpdate [Sigcomm13], Dionysus [Sigcomm14])  Congestion-free  Loop-free</p>
    <p>Explicit path control makes DC network updates easier to conduct</p>
    <p>Existing traffic</p>
    <p>Upgrade completed</p>
  </div>
  <div class="page">
    <p>The case for explicit path control (#3)</p>
    <p>Map-reduce/Hadoop applications  Shuffle stage stresses</p>
    <p>network, requires full bisection bandwidth</p>
    <p>Map ReduceShuffle</p>
    <p>Explicit path control can be leveraged to arrange parallel paths for shuffling</p>
    <p>Map Reduce</p>
  </div>
  <div class="page">
    <p>Still many other cases   Traffic engineering</p>
    <p>e.g., MicroTE [CoNEXT11], B4/SWAN [Sigcomm13]  Flow scheduling or packet scheduling</p>
    <p>e.g., Hedera [NSDI10], Fastpass [Sigcomm14]  Multiple path congestion control</p>
    <p>e.g., MPTCP [Sigcomm11], XMP [CoNEXT13]  Network virtualization and bandwidth guarantees</p>
    <p>e.g., SecondNet [CoNEXT10], Oktopus [Sigcomm11], TIVC [Sigcomm12], CloudMirror [Sigcomm14]</p>
    <p>Power saving  e.g., ElasticTree [NSDI10]</p>
    <p>Network diagnosis and failure handling  e.g., NetPilot [Sigcomm12]</p>
    <p>All require or benefit from explicit path control</p>
  </div>
  <div class="page">
    <p>OpenFlow-enabled (dynamic) implementation</p>
    <p>Host BHost A</p>
    <p>OF Switch</p>
    <p>OpenFlow controller</p>
    <p>Packet</p>
    <p>Forward to controller</p>
    <p>Install rule, forward packet</p>
    <p>Flow Table Rule 1 Rule 2</p>
    <p>Rule N</p>
  </div>
  <div class="page">
    <p>OpenFlow-enabled (dynamic) implementation</p>
    <p>Host BHost A</p>
    <p>OF Switch</p>
    <p>OpenFlow controller</p>
    <p>Packet</p>
    <p>Forward to controller</p>
    <p>Install rule, forward packet</p>
    <p>Flow Table Rule 1 Rule 2</p>
    <p>Rule N</p>
    <p>Dynamic path setup time/overhead  Scalability issue, generic yet limited</p>
    <p>flow entries (e.g., 1-4K)  Synchronization, inconsistency, routing</p>
    <p>loop, blackhole,</p>
  </div>
  <div class="page">
    <p>Can we pre-install all desired paths?</p>
    <p>Host BHost A</p>
    <p>NIf yes  Eliminate dynamic path setup time/overhead  Avoid synchronization/inconsistency, loop-free</p>
    <p>forwarding, no routing blackhole   Enable new services/applications</p>
    <p>Packet 3</p>
  </div>
  <div class="page">
    <p>Can we pre-install all desired paths?</p>
    <p>Host BHost A</p>
    <p>Distributed control</p>
    <p>Distributed control</p>
    <p>N Pre-installed table Path</p>
    <p>Switch</p>
    <p>Outport 3 2</p>
    <p>n k</p>
    <p>Our answer: XPath</p>
    <p>Centralized control (e.g., OpenFlow or others)</p>
    <p>Packet 3</p>
    <p>Focus on path preinstallation, not yet path selection!</p>
  </div>
  <div class="page">
    <p>XPath Basic Idea  Key observation motivating XPath</p>
    <p>IP LPM tables in commodity switches becoming large  E.g., Broadcom StrataXGS Trident-II (144K)</p>
    <p>Natural idea of XPath  Leverage IP LPM table to implement explicit path control</p>
    <p>One sentence describing XPath  Explicitly identify a path with a path ID and pre-install all</p>
    <p>these IDs using IP LPM tables.</p>
  </div>
  <div class="page">
    <p>XPaths Challenges  What paths to consider?</p>
    <p>Cannot enumerate all possible paths, exponential.  Observation: DCNs have desired paths, e.g.,</p>
    <p>k-port Fattree: k2/4 paths between two ToRs,  n-layer BCube: (n+1) paths between two servers,  Sufficient for high-bandwidth, fault-tolerance.</p>
    <p>XPaths first step: pre-install all these desired paths.  How to pre-install them?</p>
    <p>Desired paths # still very large  E.g., over 232 for Fattree(64), 32-bit IP cannot express them!</p>
    <p>Opportunities:  DCN is under control  Two-step compression algorithm</p>
  </div>
  <div class="page">
    <p>VL2 [Sigcomm09]</p>
    <p>Fattree [Sigcomm08]</p>
  </div>
  <div class="page">
    <p>XPaths Two-step Compression Algorithm</p>
    <p>Paths Path sets Prefix entries Path set Out port ID (bad) ID (good)</p>
    <p>ps0 0 0 0</p>
    <p>ps1 1 1 2</p>
    <p>ps2 2 2 4</p>
    <p>ps3 0 3 1</p>
    <p>ps4 1 4 3</p>
    <p>ps5 2 5 5</p>
    <p>ID Prefix Out port</p>
    <p>ID Prefix Out port</p>
    <p>Step 1: reduce unique IDs Step 2: compress prefixes</p>
    <p>disjoint</p>
    <p>convergent</p>
    <p>divergent</p>
  </div>
  <div class="page">
    <p>XPaths Two-step Compression Algorithm</p>
    <p>Path sets Prefix entries Step 2: compress prefixes</p>
    <p>Simple for only one switch, just sequential encoding</p>
    <p>but, complex for DCN with many switches, a good ID encoding on one may be bad for another</p>
  </div>
  <div class="page">
    <p>XPaths Two-step Compression Algorithm</p>
    <p>Path sets Prefix entries Step 2: compress prefixes</p>
    <p>Simple for only one switch, just sequential encoding</p>
    <p>but, complex for DCN with many switches, a good ID encoding on one may be bad for another</p>
    <p>Coordinated ID assignment 1. assign IDs to path sets on each</p>
    <p>switch separately /*optimal, but may cause ID inconsistency, i.e., one path set has multiple IDs */</p>
    <p>Remark: exist custom algorithm for treebased topologies, e.g., Fattree, VL2, etc.</p>
  </div>
  <div class="page">
    <p>Scalability Evaluation</p>
  </div>
  <div class="page">
    <p>XPath application showcase #1: Provisioned IOPS</p>
    <p>We leveraged XPath to provide necessary network bandwidth to achieve the provisioned IOPS.</p>
    <p>File copy: X-&gt;Y 15GB = 30 files x 500MB/each 15K (IOPS) x 4KB (chunk size) x 8  500Mbps</p>
  </div>
  <div class="page">
    <p>XPath application showcase #2: Congestion-free update</p>
    <p>Path P1: T1 -&gt; A1 -&gt; T3, Path P2: T1 -&gt; A2 -&gt; T3, Path P3: T1 -&gt; A3 -&gt; T3.</p>
    <p>Time t1: move f3 from P2 to P3, Time t2: move f1 from P1 to P2, Time t3: move f1 from P2 to P1, Time t4: move f3 from P3 to P2.</p>
    <p>We leveraged XPath to assist network to accomplish congestion-free update (e.g., zUpdate [Sigcomm13]).</p>
  </div>
  <div class="page">
    <p>XPath application showcase #3: Virtual network enforcement</p>
    <p>We leveraged XPath to accurately enforce VDC with bandwidth guarantees (e.g., SecondNet [CoNEXT10], Oktopus [Sigcomm11], TIVC [Sigcomm12], CloudMirror [Sigcomm14]).</p>
  </div>
  <div class="page">
    <p>XPath application showcase #4: Map-reduce data shuffle</p>
    <p>We leveraged XPath to explicitly arrange parallel paths to speed up many-to-many Map-reduce data shuffle.</p>
  </div>
  <div class="page">
    <p>Related work  Topology-aware DCN routings (e.g., PortLand, VL2</p>
    <p>[Sigcomm09])  Small routing tables  Rely on ECMP and VLB, not support explicit path control</p>
    <p>Source routing (e.g., BCube [Sigcomm09])  Software-based, not supported by most commodity DCN switches  Variable header length vs fixed length in XPath</p>
    <p>MPLS  Label Distribution Protocol (LDP) for label assignment  Exact Matching (EM) vs LPM in XPath</p>
    <p>OpenFlow  Dynamic path setup overhead  Generic yet limited flow entries vs XPath leverages LPM  XPath complements OpenFlow in explicit path control  XPath can also leverage OpenFlow protocols for path selection</p>
    <p>and failure handling 26</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Design:  A concept of path ID to express an end-to-end path,  An idea of pre-installing all desired paths into IP LPM tables,  A two-step algorithm that translates the idea into practice.</p>
    <p>Application:  Scalable, work on large DCNs,  Practical, easy to implement, no modification on commodity</p>
    <p>switches,  Can be integrated into many applications and benefit them,  Our other projects heavily rely on XPath</p>
    <p>Try it out @ http://sing.cse.ust.hk/projects/XPath</p>
  </div>
  <div class="page">
    <p>Thanks, Q&amp;A</p>
  </div>
</Presentation>
