<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TRIAD: Creating Synergies Between Memory, Disk and Log</p>
    <p>in Log Structured Key-Value Stores</p>
    <p>EPFL</p>
    <p>A. Arora K. Gupta P. KonkaH. Yuan</p>
    <p>O. Balmau D. Didona R. Guerraoui W. Zwaenepoel EPFL EPFL EPFL</p>
    <p>Nutanix Nutanix NutanixNutanix</p>
    <p>USENIX ATC 17, Santa Clara CA</p>
  </div>
  <div class="page">
    <p>Very simple data stores.</p>
    <p>KV pairs.</p>
    <p>Simple operations: update, read.</p>
    <p>KV Stores</p>
  </div>
  <div class="page">
    <p>KV Stores</p>
    <p>Distributed Single machine</p>
    <p>In-memory</p>
    <p>Persistent</p>
  </div>
  <div class="page">
    <p>KV Stores</p>
    <p>Distributed Single machine</p>
    <p>In-memory</p>
    <p>Persistent</p>
  </div>
  <div class="page">
    <p>KV Stores</p>
    <p>Distributed Single machine</p>
    <p>In-memory</p>
    <p>Persistent</p>
    <p>Log-Structured Merge (LSM)</p>
  </div>
  <div class="page">
    <p>TRIAD in a Nutshell</p>
    <p>TRIAD LSM KV: achieves 2x throughput on production wklds.</p>
    <p>Methods: Reducing background I/O in LSMs.</p>
  </div>
  <div class="page">
    <p>TRIAD in a Nutshell</p>
    <p>TRIAD LSM KV: achieves 2x throughput on production wklds.</p>
    <p>Methods: Reducing background I/O in LSMs.</p>
    <p>J J</p>
    <p>No need to know workload a priori. LSM KV semantics preserved.</p>
  </div>
  <div class="page">
    <p>LSM Overview</p>
  </div>
  <div class="page">
    <p>LSM Components Sorted memory component</p>
    <p>SSTables  sorted files  many SSTables/Level Cm</p>
    <p>L0</p>
    <p>Ln</p>
  </div>
  <div class="page">
    <p>LSM Updates update</p>
    <p>Commit Log</p>
    <p>Cm</p>
    <p>L0</p>
    <p>Ln</p>
  </div>
  <div class="page">
    <p>LSM Reads</p>
    <p>read</p>
    <p>Cm</p>
    <p>L0</p>
    <p>Ln</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Flushing</p>
    <p>Flushing From memory to L0.</p>
    <p>Cm</p>
    <p>L0</p>
    <p>Ln</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Flushing</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>Mem component full</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Flushing</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>Kn Vn</p>
    <p>flush1</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Flushing</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K3 V3</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>Commit log full</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Flushing</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>flush1</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K3 V3</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Flushing From memory to L0.</p>
    <p>Cm</p>
    <p>L0</p>
    <p>Ln</p>
    <p>Compaction Levels on disk.</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Disk L0</p>
    <p>L1</p>
    <p>Ln</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>K</p>
    <p>Key Val</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Disk L0</p>
    <p>L1</p>
    <p>Ln</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>K</p>
    <p>K written to disk</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Disk L0</p>
    <p>L1</p>
    <p>Ln</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>K</p>
    <p>K</p>
    <p>K rewritten to disk</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Disk L0</p>
    <p>L1</p>
    <p>Ln</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>K</p>
    <p>K rewritten to diskKey Val  K</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Disk L0</p>
    <p>L1</p>
    <p>Ln</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>K K rewritten n+1th time to disk! Key Val</p>
    <p>K</p>
  </div>
  <div class="page">
    <p>LSM Background Ops: Compaction</p>
    <p>Disk L0</p>
    <p>L1</p>
    <p>Ln</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>K K rewritten n+1th time to disk! Key Val</p>
    <p>K</p>
    <p>Write amplification (WA)  amount of rewrites of data to disk</p>
  </div>
  <div class="page">
    <p>Insight</p>
    <p>Severe competition for compute/storage resources between LSM background ops and user ops.</p>
  </div>
  <div class="page">
    <p>Uniform 50r-50w</p>
    <p>Skewed 50r-50w</p>
    <p>K O</p>
    <p>pe ra</p>
    <p>tio ns</p>
    <p>/s RocksDB RocksDB No BG I/O</p>
    <p>Background I/O Overhead  Long &amp; slow bg. ops slowdown of user ops.</p>
  </div>
  <div class="page">
    <p>Uniform 50r-50w</p>
    <p>Skewed 50r-50w</p>
    <p>K O</p>
    <p>pe ra</p>
    <p>tio ns</p>
    <p>/s RocksDB RocksDB No BG I/O</p>
    <p>Background I/O Overhead  Long &amp; slow bg. ops slowdown of user ops.</p>
    <p>up to 3x throughput gap L</p>
  </div>
  <div class="page">
    <p>Goal</p>
    <p>Decrease background ops overhead to increase user throughput.</p>
  </div>
  <div class="page">
    <p>TRIAD</p>
  </div>
  <div class="page">
    <p>TRIAD</p>
    <p>TRIAD-MEM</p>
    <p>TRIAD-DISK</p>
    <p>TRIAD-LOG</p>
    <p>Workload Improve WA in</p>
    <p>Skewed workloads Flushing and Compaction</p>
    <p>In-between Compaction</p>
    <p>Uniform workloads Flushing</p>
    <p>Three techniques work together and are complementary.</p>
  </div>
  <div class="page">
    <p>TRIAD</p>
    <p>TRIAD-MEM</p>
    <p>TRIAD-DISK</p>
    <p>TRIAD-LOG</p>
    <p>Workload Improve WA in</p>
    <p>Skewed workloads Flushing and Compaction</p>
    <p>Uniform workloads Flushing</p>
  </div>
  <div class="page">
    <p>TRIAD-MEM</p>
    <p>TRIAD-MEM</p>
    <p>TRIAD-DISK</p>
    <p>TRIAD-LOG</p>
    <p>Workload Improve WA in</p>
    <p>Skewed workloads Flushing and Compaction</p>
    <p>In-between Compaction</p>
    <p>Uniform workloads Flushing</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V11</p>
    <p>K1 V11</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V12</p>
    <p>K1 V11</p>
    <p>K1 V12</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V12</p>
    <p>K2 V2</p>
    <p>K1 V11</p>
    <p>K1 V12</p>
    <p>K2 V2</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V13</p>
    <p>K2 V2</p>
    <p>K1 V11</p>
    <p>K1 V12</p>
    <p>K2 V2</p>
    <p>K1 V13</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V14</p>
    <p>K2 V2</p>
    <p>K1 V11</p>
    <p>K1 V12</p>
    <p>K2 V2</p>
    <p>K1 V13</p>
    <p>K1 V14</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>K1 V11</p>
    <p>K1 V12</p>
    <p>K2 V2</p>
    <p>K1 V13</p>
    <p>K1 V14</p>
    <p>K1 V1n</p>
    <p>Cm</p>
    <p>Commit Log</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>Cm</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>flush1</p>
    <p>Commit Log</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>Cm</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>K1 V1n</p>
    <p>K3 V3</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>Kn Vn</p>
    <p>Problem: Flushing with Skewed Workloads</p>
    <p>flush1 flush2 flushn</p>
    <p>K1 V11</p>
    <p>K2 V2</p>
    <p>K1 V12</p>
    <p>K1 V13</p>
    <p>K1 V14</p>
    <p>K1 V1n</p>
    <p>Commit Log</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>High data skew</p>
    <p>Flush because commit log is full  Flush mostly empty mem comp</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1</p>
    <p>Problem: Compaction with Skewed Workloads</p>
    <p>Popular key K1 Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1</p>
    <p>Problem: Compaction with Skewed Workloads</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1</p>
    <p>Problem: Compaction with Skewed Workloads</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1</p>
    <p>Problem: Compaction with Skewed Workloads</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1</p>
    <p>Problem: Compaction with Skewed Workloads</p>
    <p>Rewritten to disk</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1</p>
    <p>Problem: Compaction with Skewed Workloads</p>
    <p>Rewritten to disk</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>Key Val</p>
    <p>File on L1 rewritten to disk twice because of one key L</p>
  </div>
  <div class="page">
    <p>TRIAD-MEM: Hot-cold key separation</p>
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>K1 V11</p>
    <p>K2 V2</p>
    <p>K1 V12</p>
    <p>K1 V13</p>
    <p>K1 V14</p>
    <p>K1 V1n</p>
    <p>Commit Log</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>TRIAD-MEM: Hot-cold key separation</p>
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1n</p>
    <p>K2 V2</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>Idea: Keep hot keys in memory Flush only cold keys Keep hot keys in CL</p>
    <p>K1 V11</p>
    <p>K2 V2</p>
    <p>K1 V12</p>
    <p>K1 V13</p>
    <p>K1 V14</p>
    <p>K1 V1n</p>
    <p>Commit Log</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>TRIAD-MEM: Hot-cold key separation</p>
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1n</p>
    <p>Cm</p>
    <p>K2 V2</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Idea: Keep hot keys in memory Flush only cold keys Keep hot keys in CL</p>
    <p>K1 V1n</p>
    <p>Commit Log</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Good for skewed workloads.</p>
    <p>Reduce flushing WA: less data written from memory to disk.</p>
    <p>Reduce compaction WA: avoid repeatedly compacting hot keys.</p>
    <p>TRIAD-MEM Summary</p>
  </div>
  <div class="page">
    <p>TRIAD-LOG</p>
    <p>TRIAD-LOG</p>
    <p>Workload Improve WA in</p>
    <p>Uniform workloads Flushing</p>
  </div>
  <div class="page">
    <p>Problem: Flushing with Uniform Workloads</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>Kn Vn</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Problem: Flushing with Uniform Workloads</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>Kn Vn</p>
    <p>flush</p>
  </div>
  <div class="page">
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>Kn Vn</p>
    <p>flush</p>
    <p>Problem: Flushing with Uniform Workloads</p>
  </div>
  <div class="page">
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>Key Val</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>Kn Vn</p>
    <p>flush</p>
    <p>Insight: Flushed data already written to commit log.</p>
    <p>Idea: Use commit logs as SSTables. Avoid bg I/O due to flushing.</p>
    <p>Problem: Flushing with Uniform Workloads</p>
  </div>
  <div class="page">
    <p>TRIAD-LOG</p>
    <p>Commit Log</p>
    <p>L0</p>
    <p>flushing</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
    <p>Cm</p>
    <p>Key Val CL Index</p>
    <p>K1 V1 3</p>
    <p>K2 V2 2</p>
    <p>Kn Vn n</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>Point to most recent entry in CL.</p>
  </div>
  <div class="page">
    <p>TRIAD-LOG</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Cm</p>
    <p>Key Val CL Index</p>
    <p>K1 V1 3</p>
    <p>K2 V2 2</p>
    <p>Kn Vn n</p>
    <p>RAM</p>
    <p>Disk Commit Log</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>K3 V3</p>
    <p>K3 V3</p>
    <p>Kn Vn</p>
  </div>
  <div class="page">
    <p>TRIAD-LOG</p>
    <p>L0</p>
    <p>flushing</p>
    <p>Cm</p>
    <p>Key Val CL Index</p>
    <p>K1: 3</p>
    <p>K2: 2</p>
    <p>Kn: n</p>
    <p>K1 V1</p>
    <p>K2 V2</p>
    <p>K1 V1</p>
    <p>Kn Vn</p>
    <p>CL Index</p>
    <p>K1: 3</p>
    <p>K2: 2</p>
    <p>Kn: n</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>CL-SSTable Only flush CL Index from memory and couple it with the current Commit Log. Commit Log</p>
    <p>CL Index</p>
    <p>K1: 3</p>
    <p>K2: 2</p>
    <p>Kn: n</p>
    <p>Keep index in memory for further reads.</p>
  </div>
  <div class="page">
    <p>Good for uniform workloads.</p>
    <p>Reuse Commit Log as L0 SST.</p>
    <p>No more flushing of mem component to disk.</p>
    <p>TRIAD-LOG Summary</p>
  </div>
  <div class="page">
    <p>TRIAD Summary</p>
    <p>TRIAD-MEM, TRIAD-DISK, TRIAD-LOG:</p>
    <p>oComplementary, targeting different wklds.</p>
    <p>oWorking simultaneously.</p>
    <p>oTransparent to the workloads; no a priori knowledge needed.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Compare TRIAD with RocksDB</p>
    <p>Workloads: Production, Synthetic</p>
    <p>Metrics: Throughput, Write Amplification (WA)</p>
    <p>Code: https://github.com/epfl-labos/TRIAD</p>
  </div>
  <div class="page">
    <p>Write Amplification (WA)</p>
    <p>total data written to storage data written by appWA =</p>
  </div>
  <div class="page">
    <p>Production Workloads: Throughput</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>KO PS</p>
    <p>RocksDB TRIAD</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>W rit</p>
    <p>e Am</p>
    <p>pl ifi</p>
    <p>ca tio</p>
    <p>n</p>
    <p>RocksDB</p>
    <p>TRIAD</p>
    <p>~uniform skewed</p>
    <p>higher is better</p>
  </div>
  <div class="page">
    <p>Production Workloads: Throughput</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>KO PS</p>
    <p>RocksDB TRIAD</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>W rit</p>
    <p>e Am</p>
    <p>pl ifi</p>
    <p>ca tio</p>
    <p>n</p>
    <p>RocksDB</p>
    <p>TRIAD</p>
    <p>~uniform skewed</p>
    <p>TRIAD: stable throughput across wklds.</p>
    <p>higher is better</p>
  </div>
  <div class="page">
    <p>Production Workloads: Write Amplification</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>KO PS</p>
    <p>RocksDB TRIAD</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>W rit</p>
    <p>e Am</p>
    <p>pl ifi</p>
    <p>ca tio</p>
    <p>n</p>
    <p>RocksDB</p>
    <p>TRIAD</p>
    <p>~uniform skewed</p>
    <p>lower is better</p>
  </div>
  <div class="page">
    <p>Production Workloads: Write Amplification</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>KO PS</p>
    <p>RocksDB TRIAD</p>
    <p>Prod Wkld 1 Prod Wkld 2</p>
    <p>W rit</p>
    <p>e Am</p>
    <p>pl ifi</p>
    <p>ca tio</p>
    <p>n</p>
    <p>RocksDB</p>
    <p>TRIAD</p>
    <p>~uniform skewed</p>
    <p>TRIAD: low and uniform WA.</p>
    <p>lower is better</p>
  </div>
  <div class="page">
    <p>TRIAD: Throughput Breakdown Synthetic Workloads</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac;on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>No Skew</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac?on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>Skew 1-99</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac;on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>No Skew</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac?on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>Skew 1-99</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>Skew 1%-99%</p>
    <p>No Skew</p>
    <p>TRIAD-LOGTRIAD RocksDB</p>
    <p>TRIAD-LOGTRIAD RocksDB</p>
    <p>TRIAD-MEM</p>
    <p>TRIAD-MEM</p>
    <p>higher is better</p>
  </div>
  <div class="page">
    <p>TRIAD: Throughput Breakdown Synthetic Workloads</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac;on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>No Skew</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac?on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>Skew 1-99</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac;on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>No Skew</p>
    <p>Skew Awareness Only</p>
    <p>Deferred Compac?on Only</p>
    <p>Commit Log Indexing Only</p>
    <p>RocksDB</p>
    <p>KO PS</p>
    <p>Skew 1-99</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>TRIAD-MEM TRIAD-DISK TRIAD-LOG RocksDB</p>
    <p>Skew 1%-99%</p>
    <p>No Skew</p>
    <p>TRIAD-LOGTRIAD RocksDB</p>
    <p>TRIAD-LOGTRIAD RocksDB</p>
    <p>TRIAD-MEM</p>
    <p>TRIAD-MEM</p>
    <p>higher is better</p>
    <p>Complementary techniques</p>
    <p>TRIAD-MEM efficient for skewed workloads.</p>
    <p>TRIAD-LOG efficient for uniform workloads.</p>
  </div>
  <div class="page">
    <p>More in Our Paper</p>
    <p>o More production workloads</p>
    <p>o More synthetic workloads</p>
    <p>o Detailed breakdown of TRIAD techniques</p>
    <p>o TRIAD-DISK</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>o LevelDB: first LSM-based KV store. No attempts to reduce WA.</p>
    <p>o A number of systems attempt to reduce WA.  LSMs: RocksDB, bLSM (SIGMOD/PODS 12), VT-tree (FAST 13),</p>
    <p>HyperLevelDB, LSM-trie (USENIX ATC 15), Cassandra, WiscKey (FAST 16).</p>
    <p>B-epsilon trees: Tucana (USENIX ATC 16), BetrFS (FAST 15, 16)</p>
    <p>No hot/cold key separation, not use the commit log as a pseudo-SST.</p>
    <p>o Hot/cold key separation idea used in different context.  FLASH storage systems: dual-pool algorithm (SAC 07), Application</p>
    <p>Managed Flash (FAST 16)</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>o LevelDB: first LSM-based KV store. No attempts to reduce WA.</p>
    <p>o A number of systems attempt to reduce WA.  LSMs: RocksDB, bLSM (SIGMOD/PODS 12), VT-tree (FAST 13),</p>
    <p>HyperLevelDB, LSM-trie (USENIX ATC 15), Cassandra, WiscKey (FAST 16).</p>
    <p>B-epsilon trees: Tucana (USENIX ATC 16), BetrFS (FAST 15, 16)</p>
    <p>But no hot/cold key separation, not use commit log as a pseudo-SST.</p>
    <p>o Hot/cold key separation idea used in different context.  FLASH storage systems: dual-pool algorithm (SAC 07), Application</p>
    <p>Managed Flash (FAST 16)</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>o LevelDB: first LSM-based KV store. No attempts to reduce WA.</p>
    <p>o A number of systems attempt to reduce WA.  LSMs: RocksDB, bLSM (SIGMOD/PODS 12), VT-tree (FAST 13),</p>
    <p>HyperLevelDB, LSM-trie (USENIX ATC 15), Cassandra, WiscKey (FAST 16).</p>
    <p>B-epsilon trees: Tucana (USENIX ATC 16), BetrFS (FAST 15, 16)</p>
    <p>But no hot/cold key separation, not use commit log as a pseudo-SST.</p>
    <p>o Hot/cold key separation idea used in different context.  FLASH storage systems: dual-pool algorithm (SAC 07), Application</p>
    <p>Managed Flash (FAST 16)</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>o LevelDB: first LSM-based KV store. No attempts to reduce WA.</p>
    <p>o A number of systems attempt to reduce WA.  LSMs: RocksDB, bLSM (SIGMOD/PODS 12), VT-tree (FAST 13),</p>
    <p>HyperLevelDB, LSM-trie (USENIX ATC 15), Cassandra, WiscKey (FAST 16).</p>
    <p>B-epsilon trees: Tucana (USENIX ATC 16), BetrFS (FAST 15, 16)</p>
    <p>But no hot/cold key separation, not use commit log as a pseudo-SST.</p>
    <p>o Hot/cold key separation idea used in different context.  FLASH storage systems: dual-pool algorithm (SAC 07), Application</p>
    <p>Managed Flash (FAST 16)</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>o LevelDB: first LSM-based KV store. No attempts to reduce WA.</p>
    <p>o A number of systems attempt to reduce WA.  LSMs: RocksDB, bLSM (SIGMOD/PODS 12), VT-tree (FAST 13),</p>
    <p>HyperLevelDB, LSM-trie (USENIX ATC 15), Cassandra, WiscKey (FAST 16).</p>
    <p>B-epsilon trees: Tucana (USENIX ATC 16), BetrFS (FAST 15, 16)</p>
    <p>But no hot/cold key separation, not use commit log as a pseudo-SST.</p>
    <p>o Hot/cold key separation idea used in different context.  FLASH storage systems: dual-pool algorithm (SAC 07), Application</p>
    <p>Managed Flash (FAST 16)</p>
  </div>
  <div class="page">
    <p>Take-home Messages</p>
    <p>TRIAD: LSM key-value store with high throughput and low WA.</p>
    <p>Lightweight bg ops improve user throughput.</p>
    <p>TRIAD: high throughput and low WA.</p>
  </div>
  <div class="page">
    <p>Take-home Messages</p>
    <p>TRIAD: LSM key-value store with high throughput and low WA.</p>
    <p>Complementary techniques transparent to workload types.</p>
    <p>TRIAD: high throughput and low WA.</p>
  </div>
  <div class="page">
    <p>Take-home Messages</p>
    <p>TRIAD: LSM key-value store with high throughput and low WA.</p>
    <p>Complementary techniques transparent to workload types.</p>
    <p>Impact of LSM I/O on user throughput reduced.</p>
  </div>
</Presentation>
