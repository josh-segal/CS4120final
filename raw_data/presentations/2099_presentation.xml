<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Implications of shared data synchronization techniques on</p>
    <p>multi-core energy efficiency</p>
    <p>Ashok Gautham, Kunal Korgaonkar, Patanjali Slpsk, Shankar Balachandran, Kamakoti</p>
    <p>Veezhinathan</p>
    <p>IIT Madras, Chennai, India</p>
    <p>IBM Research, Bangalore, India</p>
    <p>HOTPOWER 2012</p>
  </div>
  <div class="page">
    <p>What We Have Done  We evaluated</p>
    <p>Mutex, Spinlock and Software Transactional memory (STM) on a commodity multi-core</p>
    <p>Sequential implementation also considered</p>
    <p>Synchronization techniques differ based on how they execute Critical Sections (CSs)</p>
    <p>Core 0 Core 1</p>
    <p>Lock based Code</p>
    <p>Core 0 Core 1</p>
    <p>STM based Code</p>
    <p>Thread waiting or spinning</p>
    <p>Threads run critical sections in parallel as transactions</p>
  </div>
  <div class="page">
    <p>Glimpse of Results</p>
    <p>Metrics used - Performance Per Watt (PPW), Energy Delay Product (EDP), and not just Performance</p>
    <p>Results:</p>
    <p>The extent of savings by using STM (for one of the benchmarks) over best performing lock-based code</p>
    <p>224% speedup</p>
    <p>653% reduction in EDP</p>
    <p>213% improvement in PPW</p>
  </div>
  <div class="page">
    <p>Behavior and Trends STM Mutex Spinlock Sequential</p>
    <p>Cores Utilization</p>
    <p>All cores kept busy at</p>
    <p>all times</p>
    <p>Cores are underutilized;</p>
    <p>Presence of idle periods</p>
    <p>Cores kept busy, but spinning</p>
    <p>(wasteful cycles)</p>
    <p>Only one core used</p>
    <p>Core Sleep State Usage</p>
    <p>(energy saving states)</p>
    <p>None Power saving sleep states are used, but</p>
    <p>not the deepest sleep state</p>
    <p>None Other cores in deepest sleep</p>
    <p>state at all times</p>
    <p>Duration Short Long Long Long</p>
    <p>Power High Low High Low</p>
    <p>Energy Low Still high High Low</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Linux  OS (with core sleep state manager/governor)</p>
    <p>Intel Sandy Bridge Commodity Processor</p>
    <p>With per-core sleep state support.</p>
    <p>State of the art STM  Swiss TM Experimentally proven to be best</p>
    <p>Standard Pthread Library for Mutex</p>
    <p>STAMP TM Benchmark Range of time inside CS  2% to 90%</p>
  </div>
  <div class="page">
    <p>Duration = Performance</p>
    <p>Duration Locks Better</p>
    <p>CGL=Spinlock</p>
  </div>
  <div class="page">
    <p>PPW = Energy</p>
    <p>PPW  Seq. Better</p>
  </div>
  <div class="page">
    <p>EDP (= Performance and Energy)</p>
    <p>EDP - Seq. Better</p>
  </div>
  <div class="page">
    <p>Trading off Performance for Reduction in Avg. and Peak Power</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>We plan to cover a wider set of benchmarks  One of the questions we want to answer - Does there exist</p>
    <p>applications for which both lock and STM scale, but STM scale better?</p>
    <p>We also want to check how programs using mutex be made more energy efficient  by exploiting core sleep states in a more fine grained and</p>
    <p>controlled manner</p>
    <p>For a program using STM, conflict rate still is a key workload parameter dictating the resultant performance and energy  A thorough quantitative analysis of such workload</p>
    <p>parameters is needed</p>
  </div>
  <div class="page">
    <p>Questions</p>
  </div>
</Presentation>
