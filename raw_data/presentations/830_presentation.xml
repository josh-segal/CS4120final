<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MemProf: a Memory Profiler for NUMA Multicore Systems</p>
    <p>Renaud Lachaize, Baptiste Lepers, Vivien Quema</p>
  </div>
  <div class="page">
    <p>Machines are NUMA</p>
    <p>Node 1</p>
    <p>Node 2 Node 3</p>
    <p>Memory Memory</p>
    <p>Memory Memory</p>
    <p>CPU0 CPU1</p>
    <p>CPU2 CPU3</p>
  </div>
  <div class="page">
    <p>Applications ignore NUMA</p>
    <p>Memory</p>
    <p>Memory</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>That is problematic</p>
    <p>Application % remote</p>
    <p>memory accesses</p>
    <p>in default version</p>
    <p>FaceRec (ALPBench)</p>
    <p>Streamcluster (Parsec)</p>
    <p>Psearchy (Mosbench)</p>
    <p>Apache 75% 4</p>
  </div>
  <div class="page">
    <p>That is problematic</p>
    <p>Application % remote</p>
    <p>memory accesses</p>
    <p>in default version</p>
    <p>% performance</p>
    <p>improvement</p>
    <p>provided by an</p>
    <p>adequate NUMA</p>
    <p>optimization</p>
    <p>FaceRec (ALPBench)</p>
    <p>Streamcluster (Parsec)</p>
    <p>Psearchy (Mosbench)</p>
    <p>Apache 75% 20% 5</p>
  </div>
  <div class="page">
    <p>Application-Agnostic Heuristics exist</p>
    <p>Thread scheduling and page migration (USENIX ATC11)</p>
    <p>Thread Clustering (EuroSys07)</p>
    <p>Page replication (ASPLOS96)</p>
    <p>Etc.</p>
  </div>
  <div class="page">
    <p>But they do not always improve performance</p>
    <p>% remote</p>
    <p>memory accesses</p>
    <p>% performance</p>
    <p>impact over</p>
    <p>default version</p>
    <p>On default Linux 75%</p>
    <p>With thread</p>
    <p>scheduling and</p>
    <p>migration</p>
    <p>(USENIX11)</p>
    <p>Example: Apache</p>
  </div>
  <div class="page">
    <p>We want to understand the causes</p>
    <p>of remote memory accesses</p>
  </div>
  <div class="page">
    <p>In order to select an adequate</p>
    <p>optimization</p>
    <p>Custom allocation policy</p>
    <p>Memory replication</p>
    <p>Memory migration</p>
    <p>Memory interleaving</p>
    <p>Custom thread scheduling policy</p>
  </div>
  <div class="page">
    <p>Can we understand the causes of remote memory accesses using existing profilers?</p>
  </div>
  <div class="page">
    <p>Lets take an example</p>
  </div>
  <div class="page">
    <p>FaceRec</p>
    <p>Facial recognition engine</p>
    <p>63% of DRAM accesses are remote</p>
    <p>42% gain when modified based on MemProf output</p>
  </div>
  <div class="page">
    <p>Existing profilers point out</p>
    <p>The functions that perform remote accesses</p>
    <p>The memory pages that are remotely accessed</p>
    <p>The global static objects that are remotely accessed</p>
  </div>
  <div class="page">
    <p>Existing profilers point out</p>
    <p>(FaceRec)</p>
    <p>The functions that perform remote accesses</p>
    <p>transposeMultiplyMatrixL = 98%</p>
    <p>The memory pages that are remotely accessed</p>
    <p>1/3 of the allocated pages</p>
    <p>The global static objects that are remotely accessed</p>
    <p>No such object 14</p>
  </div>
  <div class="page">
    <p>What can we conclude?</p>
    <p>Should we change the allocation policy?</p>
    <p>No idea</p>
    <p>Should we migrate memory pages?</p>
    <p>No idea</p>
    <p>Should we replicate memory pages?</p>
    <p>No idea</p>
    <p>Etc.</p>
  </div>
  <div class="page">
    <p>So We need a new profiler!</p>
  </div>
  <div class="page">
    <p>We designed MemProf, a profiler that points out</p>
    <p>Remotely accessed objects  Thread-Object interaction patterns</p>
  </div>
  <div class="page">
    <p>Objects</p>
    <p>Global statically allocated objects</p>
    <p>Dynamically allocated objects</p>
    <p>Memory-mapped files</p>
    <p>Code sections mapped by the OS</p>
    <p>Thread stacks</p>
  </div>
  <div class="page">
    <p>Thread-Object interaction patterns</p>
  </div>
  <div class="page">
    <p>What can we do with MemProf?</p>
  </div>
  <div class="page">
    <p>We can detect that an object is simultaneously read by</p>
    <p>several remote threads</p>
    <p>Thread T0</p>
    <p>(node N0)</p>
    <p>Allocate</p>
    <p>Obj1 on node N0</p>
    <p>Thread T1</p>
    <p>(node N1)</p>
    <p>Read Obj1</p>
    <p>(remotely)</p>
    <p>Read Obj1</p>
    <p>(remotely)</p>
    <p>Thread T2</p>
    <p>(node N2)</p>
    <p>Read Obj1</p>
    <p>(remotely)</p>
    <p>Read Obj1</p>
    <p>(remotely)</p>
  </div>
  <div class="page">
    <p>And thus decide to replicate this object on several nodes</p>
    <p>Thread T0</p>
    <p>(node N0)</p>
    <p>Allocate and</p>
    <p>replicate</p>
    <p>Obj1</p>
    <p>Thread T1</p>
    <p>(node N1)</p>
    <p>Read Obj1</p>
    <p>(locally)</p>
    <p>Read Obj1</p>
    <p>(locally)</p>
    <p>Thread T2</p>
    <p>(node N2)</p>
    <p>Read Obj1</p>
    <p>(locally)</p>
    <p>Read Obj1</p>
    <p>(locally)</p>
  </div>
  <div class="page">
    <p>This is the pattern observed in</p>
    <p>FaceRec</p>
    <p>193 matrices</p>
    <p>1 matrix induces 98% of the remote accesses</p>
    <p>This matrix is first written and then read by all threads</p>
    <p>We replicate the matrix (10 lines of code)</p>
    <p>Performance improvement: 42%</p>
  </div>
  <div class="page">
    <p>We can detect that an object is simultaneously read and written</p>
    <p>by several threads with a high latency</p>
    <p>Thread T0</p>
    <p>(node N0)</p>
    <p>Allocate</p>
    <p>Obj1 on node N0</p>
    <p>Thread T1</p>
    <p>(node N1)</p>
    <p>Read/Write Obj1</p>
    <p>(remotely)</p>
    <p>High latency</p>
    <p>Read/Write Obj1</p>
    <p>(remotely)</p>
    <p>High latency</p>
    <p>Thread T2</p>
    <p>(node N2)</p>
    <p>Read/Write Obj1</p>
    <p>(remotely)</p>
    <p>High latency</p>
    <p>Read/Write Obj1</p>
    <p>(remotely)</p>
    <p>High latency</p>
  </div>
  <div class="page">
    <p>And thus decide to interleave this object</p>
    <p>Thread T0</p>
    <p>(node N0)</p>
    <p>Allocate</p>
    <p>Obj1 with memory</p>
    <p>interleaved</p>
    <p>Thread T1</p>
    <p>(node N1)</p>
    <p>Use Obj1</p>
    <p>(locally/remotely)</p>
    <p>Low latency</p>
    <p>Use Obj1</p>
    <p>(locally/remotely)</p>
    <p>Low latency</p>
    <p>Thread T2</p>
    <p>(node N2)</p>
    <p>Use Obj1</p>
    <p>(locally/remotely)</p>
    <p>Low latency</p>
    <p>Use Obj1</p>
    <p>(locally/remotely)</p>
    <p>Low latency</p>
  </div>
  <div class="page">
    <p>This is the pattern observed in</p>
    <p>Streamcluster</p>
    <p>1000 objects allocated</p>
    <p>1 represents 80% of remote memory accesses</p>
    <p>It is accessed read/write by all threads</p>
    <p>We interleave this object (1 line of code)</p>
    <p>Performance improvement: 161%</p>
  </div>
  <div class="page">
    <p>We can detect that threads do not share objects</p>
    <p>Thread T1</p>
    <p>(node N1)</p>
    <p>Use Obj1</p>
    <p>(remotely)</p>
    <p>Use Obj2</p>
    <p>(remotely)</p>
    <p>Thread T2</p>
    <p>(node N2)</p>
    <p>Use Obj3</p>
    <p>(remotely)</p>
    <p>Use Obj4</p>
    <p>(remotely)</p>
    <p>Thread T0</p>
    <p>(node N0)</p>
    <p>Allocate</p>
    <p>Obj1-4</p>
    <p>on node N0</p>
  </div>
  <div class="page">
    <p>And thus decide to change the allocation policy</p>
    <p>Thread T1</p>
    <p>(node N1)</p>
    <p>Use Obj1</p>
    <p>(node N1)</p>
    <p>Use Obj2</p>
    <p>(node N1)</p>
    <p>Thread T2</p>
    <p>(node N2)</p>
    <p>Use Obj3</p>
    <p>(node N2)</p>
    <p>Use Obj4</p>
    <p>(node N2)</p>
    <p>Thread T0</p>
    <p>(node N0)</p>
    <p>Allocate</p>
    <p>Obj1-2 on N1</p>
    <p>Obj3-4 on N2</p>
  </div>
  <div class="page">
    <p>This is the pattern observed in</p>
    <p>Psearchy</p>
    <p>Remote accesses are done on private variables</p>
    <p>We forced local allocations (2 lines of code)</p>
    <p>Performance improvement: 8.2%</p>
  </div>
  <div class="page">
    <p>As a summary</p>
    <p>MemProf allows finding memory access patterns</p>
    <p>Knowing memory access patterns allows designing</p>
    <p>simple and efficient optimizations</p>
  </div>
  <div class="page">
    <p>A word on the implementation</p>
  </div>
  <div class="page">
    <p>MemProf  Online Profiling</p>
    <p>Memory access tracking</p>
    <p>IBS samples</p>
    <p>Object lifecycle tracking</p>
    <p>Overloading of allocation functions</p>
    <p>Kernel hooks</p>
    <p>Threads lifecycle tracking</p>
    <p>Kernel hooks</p>
  </div>
  <div class="page">
    <p>MemProf  Offline Analysis</p>
    <p>Sort samples by time</p>
    <p>Match memory addresses with objects</p>
    <p>Leverages object lifecycle tracking</p>
    <p>Leverages thread lifecycle tracking</p>
    <p>Create object-thread interaction flows</p>
    <p>Leverages thread lifecycle tracking</p>
  </div>
  <div class="page">
    <p>Overhead</p>
    <p>5% slowdown</p>
    <p>2 sources of overhead:</p>
    <p>IBS sampling collection: one interrupt every 20K cycles</p>
    <p>Object lifecycle tracking</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Remote memory accesses are a major source of</p>
    <p>inefficiency</p>
    <p>Existing profilers do not pinpoint the causes of remote</p>
    <p>memory accesses</p>
    <p>We propose MemProf, a memory profiler that allows:</p>
    <p>Finding which objects are accessed remotely</p>
    <p>Understanding the memory access patterns to these</p>
    <p>objects</p>
    <p>Using MemProf, we profiled and optimized 4 applications</p>
    <p>on 3 machines</p>
    <p>Optimizations are simple: less than 10 lines of code</p>
    <p>Optimizations are efficient: up to 161% improvement</p>
  </div>
  <div class="page">
    <p>QUESTIONS?</p>
  </div>
  <div class="page"/>
</Presentation>
