<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Command-form Coverage for Testing DB Applications</p>
    <p>Alessandro Orso William G.J. Halfond</p>
    <p>Georgia Institute of Technology</p>
    <p>Supported by NSF awards CCR- 0205422 and CCR-0306372 to GA Tech and by DHS and US Air Force under Contract No. FA8750-05-C-0179.</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>A Database Application</p>
    <p>User Interface Application Database</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>... 18) SELECT title, author,</p>
    <p>description, avg(rating) FROM books WHERE author = &lt;*&gt; GROUP BY rating</p>
    <p>A Database Application</p>
    <p>UI Application DB</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Faults in Generated DB Commands</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Faults in Generated DB Commands</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Faults in Generated DB Commands</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Faults in Generated DB Commands</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Traditional Testing Test Cases</p>
    <p>Faults Revealed</p>
    <p>Queries Generated</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Traditional Testing Test Cases</p>
    <p>Faults Revealed 1. #4</p>
    <p>Queries Generated 1. SELECT title, author,</p>
    <p>descriptionFROM books WHERE isbn = 0123 GROUP BY isbn</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Traditional Testing Test Cases</p>
    <p>Faults Revealed 1. #4 2. #4</p>
    <p>Queries Generated 1. SELECT title, author,</p>
    <p>descriptionFROM books WHERE isbn = 0123 GROUP BY isbn</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Traditional Testing Test Cases</p>
    <p>Faults Revealed 1. #4 2. #4 3. None</p>
    <p>Queries Generated 1. SELECT title, author,</p>
    <p>descriptionFROM books WHERE isbn = 0123 GROUP BY isbn</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Traditional Testing Test Cases</p>
    <p>Faults Revealed 1. #4 2. #4 3. None</p>
    <p>Queries Generated 1. SELECT title, author,</p>
    <p>descriptionFROM books WHERE isbn = 0123 GROUP BY isbn</p>
    <p>ResultSet srchBook(String searchString, int searchType, bool showRating, bool grpByRating, bool grpByISBN) {</p>
    <p>String[] srchFields = {&quot;tiitle&quot;, &quot;author&quot;, &quot;isbn&quot;};</p>
    <p>String queryStr = &quot;SELECT title, author, description&quot;;</p>
    <p>if (showRating) queryStr += &quot;, avg(rating) &quot;;</p>
    <p>queryStr += &quot;FROM books WHERE &quot;; if (searchType==2)</p>
    <p>queryStr += srchFields[searchType] + &quot; = &quot; + searchString;</p>
    <p>else queryStr += searchFields[searchType] + &quot; =  + searchString + &quot; &quot;;</p>
    <p>if (grpByRating) queryStr += &quot;GROUP BY rating &quot;;</p>
    <p>else if (grpByISBN) queryStr += &quot; GROUP BY isbn &quot;;</p>
    <p>return db.executeQuery(queryStr); }</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Outline</p>
    <p>Motivation and background  Command-form coverage  DITTO coverage tool  Empirical evaluation  Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>DB Command-form</p>
    <p>Given a DB application: (Database) command form: Equivalence class</p>
    <p>that groups database commands, generated by the application, that differ only in the possible value of their indeterminate parts</p>
    <p>Indeterminate part: Part of a command form that cannot be determined statically (substrings that correspond to user input)</p>
    <p>User Interface Application Database</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>DB Command-form</p>
    <p>Given a DB application: (Database) command form: Equivalence class</p>
    <p>that groups database commands, generated by the application, that differ only in the possible value of their indeterminate parts</p>
    <p>Example: SELECT title, author, description FROM books WHERE author = Poe SELECT title, author, description FROM books WHERE author = Capote SELECT title, author, description FROM books WHERE author = Dante =&gt; SELECT title, author, description FROM books WHERE author = &lt;*&gt;</p>
    <p>User Interface Application Database</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Using the Criterion</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>a. Perform string analysis on the application =&gt; char-level NFAs for each query string at each DB interaction point</p>
    <p>b. Group SQL keywords and operators in NFAs and determinize =&gt; SQL command-form models (DFAs)</p>
    <p>c. Assign unique ID to each command form</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>a. Perform string analysis on the application =&gt; char-level NFAs for each query string at each DB interaction point</p>
    <p>b. Group SQL keywords and operators in NFAs and determinize =&gt; SQL command-form models (DFAs)</p>
    <p>c. Assign unique ID to each command form</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>String Analysis</p>
    <p>public ResultSet searchBooks(String searchString, int searchType, boolean showRating, boolean groupByRating, boolean groupByISBN) {</p>
    <p>14. return database.executeQuery(queryStr);</p>
    <p>String analysis =&gt; NFAs for strings at DB interaction points</p>
    <p>[Christensen, Mller, and Schwartzbach 2003]</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>a. Perform string analysis on the application =&gt; char-level NFAs for each query string at each DB interaction point</p>
    <p>b. Group SQL keywords and operators in NFAs and determinize =&gt; SQL command-form models (DFAs)</p>
    <p>c. Assign unique ID to each command form</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Build Command-form Models Group SQL keywords/operators =&gt; SQL command-form models</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Group SQL keywords/operators =&gt; SQL command-form models Build Command-form Models</p>
    <p>By construction, a path in the model identifies a command form (concatenation of transition labels)</p>
    <p>=&gt; The complete set of command forms (i.e., requirements) is given by the set of paths in all models</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>a. Perform string analysis on the application =&gt; char-level NFAs for each query string at each DB interaction point</p>
    <p>b. Group SQL keywords and operators in NFAs and determinize =&gt; SQL command-form models (DFAs)</p>
    <p>c. Assign unique ID to each command form</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>[+6]</p>
    <p>[+2] [+1]</p>
    <p>Assign unique ID to each command form Assign Command-form IDs</p>
    <p>Efficient path-profiling technique =&gt; edge labels  Sum of edge labels along a path gives unique ID for the</p>
    <p>path (i.e., for the corresponding command form)  No need to enumerate all forms  Straightforward computation of coverage</p>
    <p>[Ball and Larus 1996]</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>At runtime: Match dynamically-generated queries to command forms (i.e., to paths in the command-form models)</p>
    <p>SELECT title , author , description , avg(rating) FROM books WHERE author =  Poe  GROUP BY rating</p>
    <p>Query:</p>
    <p>[+9]</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>SELECT title , author , description , avg(rating) FROM books WHERE author =  Poe  GROUP BY rating</p>
    <p>Query:</p>
    <p>[+3]</p>
    <p>[+6]</p>
    <p>[+2]</p>
    <p>At runtime: Match dynamically-generated queries to command forms (i.e., to paths in the command-form models)</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>SELECT title, author, description, avg(rating) FROM books WHERE author = &lt;*&gt; GROUP BY rating</p>
    <p>SELECT title , author , description , avg(rating) FROM books WHERE author =  Poe  GROUP BY rating</p>
    <p>covers</p>
    <p>Query:</p>
    <p>Command form:</p>
    <p>At runtime: Match dynamically-generated queries to command forms (i.e., to paths in the command-form models)</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>number of command forms covered total number of command formsCoverage =</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>The DITTO Coverage Tool</p>
    <p>Database-Interaction Testing TOol</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Empirical Evaluation</p>
    <p>Study 1: Perform a proof-of-concept evaluation on a commercial application and test suite</p>
    <p>Study 2: Investigate whether commandform coverage provides for a more thorough testing of database applications than traditional approaches</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Study 1  Feasibility</p>
    <p>Is the approach feasible?  What is the command-form coverage achieved by the</p>
    <p>existing test suite?</p>
    <p>Subject: Bookstore  27 servlets, ~17 KLOC</p>
    <p>Test cases: Test suite from related work  ~7,000 test cases</p>
    <p>Results:  DITTO was able to compute command forms and measure</p>
    <p>command-form coverage for the test suite  Command-form coverage between 1% and 13% =&gt; Initial evidence that command-form coverage cannot be trivially</p>
    <p>achieved</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Study 2  Usefulness</p>
    <p>Is command-form coverage useful?  Does it provide something more than</p>
    <p>traditional testing?</p>
    <p>Compare with a traditional criterion (branch coverage)</p>
    <p>Ideally, compare fault detection capability, but  few data points for real faults  difficult to seed faults in an unbiased way</p>
    <p>=&gt; Indirect comparison through estimation</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Study 2: Protocol</p>
    <p>Estimate number of command forms covered by a branch-adequate test suite for Bookstore (B)  Compute total number of command forms for B  Identify subset B of B involved in building command</p>
    <p>forms; backward slices from DB interaction points  Estimate the number of test cases needed to cover all</p>
    <p>branches in B; cyclomatic complexity (overestimate)  Assume each test case covers one command form</p>
    <p>(overestimate)  Compare estimated number of command forms covered</p>
    <p>and total number of command forms</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Results for Study 2</p>
    <p>all11AdminMenu</p>
    <p>all202ShoppingCart</p>
    <p>all61MyInfo</p>
    <p>Estimated # comm. forms covered by branch-adequate test suite</p>
    <p># command forms</p>
    <p># DIPServlet</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Related Work</p>
    <p>Specific coverage for DB applications  Chan and Cheung, 1999  Kapfhammer and Soffa, 2003  Surez-Cabal and Tuya, 2004  Willmor and Embury, 2005</p>
    <p>Static checking of DB applications  Christensen, Mller, and Schartzbachthe, 2003  Gould, Su, and Devanbu, 2004</p>
    <p>Other paradigms  McClure and Krger, 2005  Cook and Rai, 2005</p>
    <p>Test case generation for DB applications  Frankl et al., 2000, 2004, 2005  Zhang, Xu, and Cheung, 2001</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Conclusion and Future Work Conclusion</p>
    <p>Technique to adequately test DB applications (in particular, interactions application-DB)</p>
    <p>Approach based on command-form coverage  DITTO tool that implements the approach  Initial evaluation</p>
    <p>Approach is feasible  Approach is potentially useful</p>
    <p>Future work  More extensive empirical studies</p>
    <p>More subjects  Direct comparison with other criteria</p>
    <p>Improvement of the technique by leveraging info about the DB (e.g., DB schema)</p>
  </div>
  <div class="page">
    <p>Alex Orso  ASE 2006  September 2006</p>
    <p>Questions?</p>
  </div>
</Presentation>
