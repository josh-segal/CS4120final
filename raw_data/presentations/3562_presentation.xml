<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Back to the Whiteboard: a Principled Approach for the Assessment and Design of Memory Forensic Techniques</p>
    <p>Fabio Pagani and Davide Balzarotti</p>
    <p>Usenix Security 19</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Introduction</p>
    <p>Infected Machine</p>
    <p>Memory Dump</p>
    <p>Analysis Evidence</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Introduction</p>
    <p>Infected Machine</p>
    <p>Memory Dump</p>
    <p>Analysis Evidence</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Introduction</p>
    <p>Infected Machine</p>
    <p>Memory Dump</p>
    <p>Analysis</p>
    <p>Evidence</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Introduction</p>
    <p>Infected Machine</p>
    <p>Memory Dump</p>
    <p>Analysis Evidence</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Introduction</p>
    <p>Infected Machine</p>
    <p>Memory Dump</p>
    <p>Analysis Evidence</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Analysis</p>
    <p>Extract the following information:  List processes, kernel modules  Open files, memory mappings, sockets..  System information: routing table, kernel logs..</p>
    <p>... and much more: Volatility (the most used memory forensic framework) has more than 100 plugins for Windows!</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Analysis</p>
    <p>Extract the following information:  List processes, kernel modules  Open files, memory mappings, sockets..  System information: routing table, kernel logs..</p>
    <p>... and much more: Volatility (the most used memory forensic framework) has more than 100 plugins for Windows!</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Listing Processes</p>
    <p>task_struct</p>
    <p>init_task</p>
    <p>task_struct task_struct</p>
    <p>next prev</p>
    <p>tasks</p>
    <p>next prev</p>
    <p>tasks next prev</p>
    <p>tasks</p>
    <p>pid_hash</p>
    <p>linux_pidhashtable</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Listing Processes</p>
    <p>task_struct</p>
    <p>init_task</p>
    <p>task_struct task_struct</p>
    <p>next prev</p>
    <p>tasks next prev</p>
    <p>tasks</p>
    <p>next prev</p>
    <p>tasks</p>
    <p>pid_hash</p>
    <p>linux_pidhashtable</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Listing Processes</p>
    <p>task_struct</p>
    <p>init_task</p>
    <p>task_struct task_struct</p>
    <p>next prev</p>
    <p>tasks next prev</p>
    <p>tasks next prev</p>
    <p>tasks</p>
    <p>pid_hash</p>
    <p>linux_pidhashtable</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Listing Processes</p>
    <p>task_struct</p>
    <p>init_task</p>
    <p>task_struct task_struct linux_pslist</p>
    <p>next prev</p>
    <p>tasks next prev</p>
    <p>tasks next prev</p>
    <p>tasks</p>
    <p>pid_hash</p>
    <p>linux_pidhashtable</p>
  </div>
  <div class="page">
    <p>Memory Forensics - Listing Processes</p>
    <p>task_struct</p>
    <p>init_task</p>
    <p>task_struct task_struct linux_pslist</p>
    <p>next prev</p>
    <p>tasks next prev</p>
    <p>tasks next prev</p>
    <p>tasks</p>
    <p>pid_hash</p>
    <p>linux_pidhashtable 3</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>Forensic analyses are manually created by humans.</p>
    <p>Are there other techniques to list processes? Linux kernel 4.19: ~6000 structures with ~40000 fields</p>
    <p>How can we compare them? Shortest one? Most stable across different kernels?</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>Forensic analyses are manually created by humans.</p>
    <p>Are there other techniques to list processes? Linux kernel 4.19: ~6000 structures with ~40000 fields</p>
    <p>How can we compare them? Shortest one? Most stable across different kernels?</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>Forensic analyses are manually created by humans.</p>
    <p>Are there other techniques to list processes? Linux kernel 4.19: ~6000 structures with ~40000 fields</p>
    <p>How can we compare them? Shortest one? Most stable across different kernels?</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Build a graph of kernel structures</p>
    <p>Define metrics to evaluate analyses</p>
    <p>Study analyses as paths on the graph</p>
    <p>task_struct</p>
    <p>task_struct task_struct</p>
    <p>task_struct</p>
    <p>init_task</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Build a graph of kernel structures</p>
    <p>Define metrics to evaluate analyses</p>
    <p>Study analyses as paths on the graph</p>
    <p>task_struct</p>
    <p>task_struct task_struct</p>
    <p>task_struct</p>
    <p>init_task</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Build a graph of kernel structures</p>
    <p>Define metrics to evaluate analyses</p>
    <p>Study analyses as paths on the graph</p>
    <p>task_struct</p>
    <p>task_struct task_struct</p>
    <p>task_struct</p>
    <p>init_task</p>
  </div>
  <div class="page">
    <p>Kernel Graph - Creation</p>
    <p>worklist  kernel global variables; while worklist =  do</p>
    <p>s  worklist.pop(); new_structs  Explore(s); worklist.push(new_structs);</p>
    <p>end while</p>
    <p>Challenge Kernel abstract data types</p>
  </div>
  <div class="page">
    <p>Kernel Graph - Creation</p>
    <p>worklist  kernel global variables; while worklist =  do</p>
    <p>s  worklist.pop(); new_structs  Explore(s); worklist.push(new_structs);</p>
    <p>end while</p>
    <p>Challenge Kernel abstract data types</p>
  </div>
  <div class="page">
    <p>Kernel Graph - ADT Challenge</p>
    <p>task_struct task_struct task_struct</p>
    <p>list_head tasks</p>
    <p>list_head tasks</p>
    <p>list_head tasks</p>
  </div>
  <div class="page">
    <p>Kernel Graph - ADT Challenge</p>
    <p>task_struct task_struct task_struct</p>
    <p>list_head tasks</p>
    <p>list_head tasks</p>
    <p>list_head tasks</p>
    <p>list_head children</p>
    <p>list_head children</p>
    <p>list_head children</p>
  </div>
  <div class="page">
    <p>Kernel Graph - ADT Challenge</p>
    <p>task_struct task_struct task_struct</p>
    <p>list_head tasks</p>
    <p>list_head tasks</p>
    <p>list_head tasks</p>
    <p>list_head children</p>
    <p>list_head siblings</p>
    <p>list_head siblings</p>
  </div>
  <div class="page">
    <p>Kernel Graph - ADT Challenge</p>
    <p>Solved with a Clang plugin that analyzes the kernel AST</p>
    <p>list_add(&amp;p-&gt;tasks, &amp;init_task.tasks); list_add(&amp;p-&gt;sibling, &amp;p-&gt;children);</p>
    <p>struct task_struct.tasks -&gt; struct task_struct.tasks struct task_struct.children -&gt; struct.task_struct.siblings</p>
  </div>
  <div class="page">
    <p>The Graph</p>
    <p>100k Structures (Nodes)</p>
    <p>840k Pointers (Edges)</p>
  </div>
  <div class="page">
    <p>Metrics - Rationale</p>
    <p>Metrics should capture different aspects of memory forensics:</p>
    <p>Non-atomic memory acquisition (i.e. kernel driver)</p>
    <p>Layout of kernel structures changes across different kernel versions and configurations</p>
    <p>Attackers can modify kernel structures</p>
  </div>
  <div class="page">
    <p>Metrics - Rationale</p>
    <p>Metrics should capture different aspects of memory forensics:</p>
    <p>Non-atomic memory acquisition (i.e. kernel driver)</p>
    <p>Layout of kernel structures changes across different kernel versions and configurations</p>
    <p>Attackers can modify kernel structures</p>
  </div>
  <div class="page">
    <p>Metrics - Rationale</p>
    <p>Metrics should capture different aspects of memory forensics:</p>
    <p>Non-atomic memory acquisition (i.e. kernel driver)</p>
    <p>Layout of kernel structures changes across different kernel versions and configurations</p>
    <p>Attackers can modify kernel structures</p>
  </div>
  <div class="page">
    <p>Metrics - Rationale</p>
    <p>Metrics should capture different aspects of memory forensics:</p>
    <p>Non-atomic memory acquisition (i.e. kernel driver)</p>
    <p>Layout of kernel structures changes across different kernel versions and configurations</p>
    <p>Attackers can modify kernel structures</p>
  </div>
  <div class="page">
    <p>Proposed Metrics</p>
    <p>Atomicity  Stability  Consistency  Generality  Reliability</p>
  </div>
  <div class="page">
    <p>Proposed Metrics</p>
    <p>Atomicity  Stability  Consistency  Generality  Reliability</p>
  </div>
  <div class="page">
    <p>Metrics</p>
    <p>Atomicity: distance in memory between two connected structures</p>
  </div>
  <div class="page">
    <p>Metrics</p>
    <p>Stability: how long an edge remains stable in a running machine  25 snapshots at [0s, 1s, 5s, ..., 3h]</p>
  </div>
  <div class="page">
    <p>Metrics</p>
    <p>Consistency: Atomicity + Stability</p>
    <p>A</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Evaluation of Current Analyses</p>
    <p>Volatility Plugin</p>
    <p># Nodes</p>
    <p>Stability (s) Fast Slow</p>
    <p>linux_arp</p>
    <p>linux_check_creds</p>
    <p>linux_check_modules</p>
    <p>linux_check_tty</p>
    <p>linux_find_file</p>
    <p>linux_ifconfig</p>
    <p>linux_lsmod</p>
    <p>linux_lsof</p>
    <p>linux_mount</p>
    <p>linux_pidhashtable</p>
    <p>linux_proc_maps</p>
    <p>linux_pslist</p>
  </div>
  <div class="page">
    <p>Evaluation of Current Analyses</p>
    <p>Volatility Plugin #Nodes</p>
    <p>Stability (s) Fast Slow</p>
    <p>linux_arp 13</p>
    <p>linux_check_creds 248</p>
    <p>linux_check_modules 151</p>
    <p>linux_check_tty 13</p>
    <p>linux_find_file 14955</p>
    <p>linux_ifconfig 12</p>
    <p>linux_lsmod 12</p>
    <p>linux_lsof 821</p>
    <p>linux_mount 495</p>
    <p>linux_pidhashtable 469</p>
    <p>linux_proc_maps 4722</p>
    <p>linux_pslist 124</p>
  </div>
  <div class="page">
    <p>Evaluation of Current Analyses</p>
    <p>Volatility Plugin #Nodes Stability</p>
    <p>(s)</p>
    <p>Fast Slow</p>
    <p>linux_arp 13 12,000</p>
    <p>linux_check_creds 248 2</p>
    <p>linux_check_modules 151 700</p>
    <p>linux_check_tty 13 30</p>
    <p>linux_find_file 14955 0</p>
    <p>linux_ifconfig 12 12,000</p>
    <p>linux_lsmod 12 700</p>
    <p>linux_lsof 821 0</p>
    <p>linux_mount 495 10</p>
    <p>linux_pidhashtable 469 30</p>
    <p>linux_proc_maps 4722 0</p>
    <p>linux_pslist 124 30</p>
    <p>Stability: 3 paths never changed in over 3 hours 11 paths changed in less than 1 minute</p>
  </div>
  <div class="page">
    <p>Evaluation of Current Analyses</p>
    <p>Volatility Plugin #Nodes Stability Consistency</p>
    <p>(s) Fast Slow</p>
    <p>linux_arp 13 12,000 3 3 linux_check_creds 248 2 3 3 linux_check_modules 151 700 3 3 linux_check_tty 13 30 3 3 linux_find_file 14955 0 7 7 linux_ifconfig 12 12,000 3 3 linux_lsmod 12 700 3 3 linux_lsof 821 0 7 7 linux_mount 495 10 3 7 linux_pidhashtable 469 30 3 7 linux_proc_maps 4722 0 7 7 linux_pslist 124 30 3 3</p>
    <p>Consistency: 5 inconsistent plugins when fast acquisition 7 inconsistent plugins when slow acquisition</p>
  </div>
  <div class="page">
    <p>Finding New Ways to List Processes</p>
    <p>Much harder than expected!</p>
    <p>Hundreds of millions of paths when considering the shortest paths from every root node to every task_struct</p>
    <p>Not every path represent an heuristics, because heuristics must be generated by an algorithm</p>
    <p>To limit the path explosion problem:</p>
    <p>Removed every root node that is not connected to every task_struct  Remove edges used by known techniques (i.e. tasks field)  Remove similar edges (parallel edges with same weights)  Merge similar paths into templates (struct type + remove adjacent same type nodes)</p>
    <p>Resulted in 4000 path templates!</p>
  </div>
  <div class="page">
    <p>Finding New Ways to List Processes</p>
    <p>Much harder than expected!</p>
    <p>Hundreds of millions of paths when considering the shortest paths from every root node to every task_struct</p>
    <p>Not every path represent an heuristics, because heuristics must be generated by an algorithm</p>
    <p>To limit the path explosion problem:</p>
    <p>Removed every root node that is not connected to every task_struct  Remove edges used by known techniques (i.e. tasks field)  Remove similar edges (parallel edges with same weights)  Merge similar paths into templates (struct type + remove adjacent same type nodes)</p>
    <p>Resulted in 4000 path templates! 14</p>
  </div>
  <div class="page">
    <p>Kernel Graph - New Heuristics Results</p>
    <p>Category Root Node #Nodes #</p>
    <p>task_struct Stability Generality Consistency</p>
    <p>cgroup css_set_table 172 156 10.00 29/85 7 cgrp_dfl_root 186 156 10.00 29/85 3</p>
    <p>memory/fs dentry_hash 58383 23 0.00 36/85 7 inode_hash 14999 23 1.00 36/85 7</p>
    <p>workers wq_workqueues 427 69 200.00 39/85 3</p>
    <p>All implemented as Volatility plugins!</p>
  </div>
  <div class="page">
    <p>A Principled Approach to Memory Forensics</p>
    <p>Forensics analyses can be extracted and evaluated in a principled way!</p>
    <p>Kernel graph to model kernel structures  Set of metrics to capture memory forensics aspects  Experiments to study current and future techniques</p>
  </div>
  <div class="page">
    <p>A Principled Approach to Memory Forensics</p>
    <p>Forensics analyses can be extracted and evaluated in a principled way!</p>
    <p>Kernel graph to model kernel structures  Set of metrics to capture memory forensics aspects  Experiments to study current and future techniques</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Our framework enables more future research!</p>
    <p>https://github.com/pagabuc/kernographer</p>
  </div>
  <div class="page">
    <p>Questions? Twitter: @pagabuc</p>
    <p>Email: pagani@eurecom.fr</p>
  </div>
  <div class="page">
    <p>Kernel Graph - New Heuristics Templates</p>
    <p>Examples</p>
    <p>struct hlist_head [128] - struct css_set - struct task_struct</p>
    <p>struct hlist_bl_head *- struct dentry - struct inode struct vm_area_struct - struct mm_struct - struct task_struct</p>
  </div>
</Presentation>
