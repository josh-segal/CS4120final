<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Toward Efficient Querying of Compressed Network</p>
    <p>Payloads! By Teryl Taylor and Fabian Monrose!</p>
    <p>University of North Carolina at Chapel Hill! Scott E. Coull and John McHugh!</p>
    <p>RedJack!</p>
  </div>
  <div class="page">
    <p>Motivation!</p>
    <p>Please Log onto! http://cs.unnc.edu and change your password!</p>
    <p>Get /BadExe!</p>
  </div>
  <div class="page">
    <p>Motivation!</p>
    <p>Get /BadExe!</p>
    <p>Problem: How does an analyst perform efficient forensic analysis using all data available to him/her?!</p>
    <p>Time is of the essence.!</p>
  </div>
  <div class="page">
    <p>Goal and Challenges!</p>
    <p>Goal: Build an interactive query system for network traffic which supports payload-based queries.!</p>
    <p>! Challenges:!  Large volume of network traffic: billions of records (TBs of data).!  Network data has high dimensionality  i.e. lots of attributes.!  Payloads are heterogeneous.!</p>
  </div>
  <div class="page">
    <p>Existing Approaches!</p>
    <p>Scan and Filter approaches (e.g. TCPDump).!  Write optimized .!  Must scan each record in the dataset .! !</p>
    <p>Parallel Scan and Filter approaches (e.g. MapReduce).!  Requires significant computational resource .!  Google: Data organization is important for speed .! !</p>
    <p>Relational Databases (row-wise) (e.g. Postgres).!  Rigid structure .!  Slow/bloated index generation .!</p>
  </div>
  <div class="page">
    <p>Approach!</p>
    <p>Build a low I/O bandwidth (read-optimized) storage and query framework.!</p>
    <p>!  Utilizing the following principals:!</p>
    <p>Reduce data footprint: aggregation and compression.!  Only touch data relevant to the query: indexing.!  Reduce disk I/O: horizontal and vertical partitioning.!  Support arbitrary application protocols: flexible schemas.! !</p>
  </div>
  <div class="page">
    <p>Locate Data Partitions</p>
    <p>Locate Records</p>
    <p>Return Records</p>
    <p>SELECT SourceIP, Dns.Query.Type</p>
    <p>WHERE</p>
    <p>DestPort = 53 AND</p>
    <p>Payload.Dns.Query.Domain = 'www.uunc.com'</p>
  </div>
  <div class="page">
    <p>Approach!</p>
    <p>Reduce Data Footprint.!</p>
  </div>
  <div class="page">
    <p>Record Aggregation on Flows!</p>
    <p>Low bandwidth I/O .!</p>
    <p>Special read-only bitmap indices .!</p>
    <p>Src IP! 10.10.4.2! 96.21.7.5!</p>
    <p>Dest IP! 13.21.7.6! 43.89.2.1!</p>
    <p>Src Port! 13! 53!</p>
    <p>Dst Port! 80! 53!</p>
    <p>Protocol! TCP! UDP!</p>
  </div>
  <div class="page">
    <p>Payload Summary Objects!</p>
    <p>Payload objects support flexible schema.!  Attributes are extracted using deep packet inspection.!  Each object has a template. !  Template instantiated and filled with attributes.!</p>
    <p>Payload Objects!</p>
    <p>HTTP! DNS!</p>
    <p>Query.Domain: krb1.unc.edu Query.Type: A Answer.Domain: krb1.unc.edu Answer.Type: CNAME Answer.Domain: db1.isis.unc.edu Answer.Type: A NameServer: isis.unc.edu</p>
    <p>...</p>
    <p>DNS Payload Object from Template Http.Method: GET Http.Uri: / Http.Host: www.af.mil Http.UserAgent: Mozilla/5.0 Http.Version: HTTP/1.0 Http.Language: en Http.Length: 1107</p>
    <p>...</p>
    <p>HTTP Payload Object from Template</p>
  </div>
  <div class="page">
    <p>Joining Flows and Payloads!</p>
    <p>Src IP! 10.10.4.2! 96.21.7.5!</p>
    <p>Dest IP! 13.21.7.6! 43.89.2.1!</p>
    <p>Src Port! 13! 53!</p>
    <p>Dest Port! 80! 53!</p>
    <p>Protocol! TCP! UDP!</p>
    <p>Column Oriented Flow! Records!</p>
    <p>Payload Objects! HTTP! DNS!</p>
    <p>+ Serialized Payload ! Objects!</p>
  </div>
  <div class="page">
    <p>Payload Compression!</p>
    <p>Two forms of compression!  Record (object) level dictionary compression.!  Block-level compression using LZO.!</p>
    <p>! ! ! ! !</p>
    <p>DNS Object 1!</p>
    <p>Query.Domain! 1! Answer.Response! 2! Answer.Type! 3!</p>
    <p>DNS Object 2! Query.Domain! 4! Answer.Response! 2! Answer.Type! 3!</p>
    <p>Dictionary! 1! www.google.com! 2! 10.51.13.45! 3! A! 4! www.youtube.com! 5! www.cnn.com!</p>
  </div>
  <div class="page">
    <p>Approach!</p>
    <p>Reduce Disk I/O.!</p>
  </div>
  <div class="page">
    <p>Partitioning the Data!</p>
    <p>Records grouped (partitioned) into configurable sizes.!  Records are added to partition as they expire.!  Partitions are independent of each other.! ! !  Advantages:!</p>
    <p>Allows us to access only relevant partitions.!  Enables data distribution to support query parallelization.!</p>
  </div>
  <div class="page">
    <p>Select Matching Partitions with Root Indices!</p>
    <p>Data Fields</p>
    <p>Flow Fields</p>
    <p>DestPort SourcePort</p>
    <p>DestIP SourceIP</p>
    <p>Protocol TcpFlags</p>
    <p>DurationStartTime</p>
    <p>ByteCountPktCount</p>
    <p>Payload Fields</p>
    <p>Http.UserAgent Http.Method</p>
    <p>Http.Host Http.Uri</p>
    <p>Dns.Query.Domain</p>
    <p>Dns.Answer.DomainDns.Answer.Type</p>
    <p>......</p>
    <p>Dns.Query.Type</p>
    <p>Indexing Data Structures</p>
    <p>Root Bitmap Index</p>
    <p>Partition 1</p>
    <p>Bitmap Index</p>
    <p>Partition 2</p>
    <p>Bitmap Index</p>
    <p>Partition P</p>
    <p>Bitmap Index</p>
    <p>...</p>
    <p>Disk DiskDisk</p>
    <p>Record Store Record Store Record Store</p>
  </div>
  <div class="page">
    <p>Approach!</p>
    <p>Only Load Relevant! Records.!</p>
  </div>
  <div class="page">
    <p>Partition Indices!</p>
    <p>Indices important to avoid scan and filter.!  Each flow-based attribute has a bitmap index.! !</p>
  </div>
  <div class="page">
    <p>Payload Indices!</p>
    <p>Term Record IDs</p>
    <p>Dns.Query.Domain</p>
    <p>krb1.unc.edu</p>
    <p>Term Record IDs</p>
    <p>www.unc.edu</p>
    <p>Http.Host</p>
    <p>www.facebook.com</p>
    <p>www.af.mil</p>
    <p>Http.UserAgent</p>
    <p>Mozilla/5.0</p>
    <p>Mozilla/2.0</p>
    <p>...</p>
    <p>... ...</p>
    <p>Query.Domain: krb1.unc.edu Query.Type: A Answer.Domain: krb1.unc.edu Answer.Type: CNAME Answer.Domain: db1.isis.unc.edu Answer.Type: A NameServer: isis.unc.edu</p>
    <p>...</p>
    <p>DNS Payload Object from Template</p>
    <p>Record 5</p>
    <p>Http.Method: GET Http.Uri: / Http.Host: www.af.mil Http.UserAgent: Mozilla/5.0 Http.Version: HTTP/1.0 Http.Language: en Http.Length: 1107</p>
    <p>...</p>
    <p>HTTP Payload Object from Template</p>
    <p>Record 1</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>Bitmap! Indexes!</p>
  </div>
  <div class="page">
    <p>SELECT SourceIP, Dns.Query.Type</p>
    <p>WHERE</p>
    <p>DestPort = 53 AND</p>
    <p>Payload.Dns.Query.Domain = 'www.uunc.com'</p>
    <p>AND</p>
    <p>Partition Indices</p>
    <p>Record ID Bitmaps</p>
    <p>Dns.Query.Domain</p>
    <p>DestPort Bitwise Operator</p>
    <p>Locate Data Partitions</p>
    <p>Locate Records</p>
    <p>Return Records</p>
    <p>Partition ID BitmapsRoot Indices</p>
    <p>DestPort</p>
    <p>Dns.Query.Domain Bitwise Operator</p>
    <p>Record Stores</p>
    <p>SourceIP</p>
    <p>Dns.Query.Type</p>
    <p>192.168.15.49</p>
    <p>'ARecord'</p>
    <p>Records</p>
  </div>
  <div class="page">
    <p>Evaluation on Campus DNS Data &quot; and DNS/HTTP Data!</p>
    <p>Dataset 1: Campus DNS  5 day!  Number of Connections: 325 million!  Original Raw Trace: 122 GB!  Data Store (uncompressed): 155 GB!  Data Store (dictionary compressed): 83 GB!  Data Store (dictionary + LZO compressed): 75 GB! !</p>
    <p>Dataset 2: Campus DNS/HTTP  2.5 hours!  Number of Connections: 11.1 million!  Original Raw Trace: 400 GB!  Data Store (dictionary + LZO compressed): 12 GB!</p>
    <p>! 20! *Dual Intel Xeon 2.27 GHZ, 12 GBs RAM, single 2TB 7200 RPM local SATA Drive!</p>
  </div>
  <div class="page">
    <p>Evaluation Queries!</p>
    <p>Heavy Hitter Queries: return the majority of records.! !  Partition Intensive Queries: return a few records from every</p>
    <p>partition.! !  Needle in a Haystack Queries: return a few records. !</p>
    <p>! Reiss et. al, Efficient Analysis of Live and Historical Streaming Data</p>
    <p>and its application to Cybersecurity, 2006.!</p>
  </div>
  <div class="page">
    <p>Flow-based Query Comparison!</p>
    <p>Flow-based Queries!</p>
    <p>Heavy Hitters! Partition Intensive!</p>
    <p>Needle Haystack!</p>
    <p>Postgres! 18.1m! 9.5m! 2.0s! SiLK! 1.8m! 1.8m! 1.8m! Our approach! 2.5s! 30.5s! 0.04s!</p>
    <p>e.g., SELECT source_IP, destination_IP from all_traffic where protocol=UDP!</p>
    <p>Evaluation! Querying of Compressed Payloads! 22!</p>
    <p>* DNS dataset!</p>
  </div>
  <div class="page">
    <p>Payload-based Query Comparisons with Relational Joins!</p>
    <p>Payload-based Queries (joins)!</p>
    <p>Heavy Hitters!</p>
    <p>Partition Intensive!</p>
    <p>Needle Haystack!</p>
    <p>Postgres! &gt; 2h! &gt; 2h! 3s! Our approach! 30m! 2.5m! 0.1s!</p>
    <p>e.g., SELECT dns.query.type, dns.ns.ttl FROM all_traffic WHERE</p>
    <p>dns.queryDomain=www.facebook.com AND dns.ns.domain=ns.facebook.com.!</p>
    <p>Evaluation! Querying of Compressed Payloads! 23!</p>
    <p>* DNS dataset!</p>
  </div>
  <div class="page">
    <p>Single Table Payload-based Query Comparisons!</p>
    <p>Payloadbased Queries ! (no-joins)!</p>
    <p>Heavy Hitters!</p>
    <p>Partition Intensive!</p>
    <p>Needle Haystack!</p>
    <p>Postgres! 7.6m! 9.7m! 1.6s! Our approach! 9.7m! 3.3m! 0.1s!</p>
    <p>e.g., SELECT dns.queryType FROM all_traffic WHERE dns.queryDomain=www.google.com OR dns.queryDomain= www.facebook.com!</p>
    <p>Evaluation! Querying of Compressed Payloads! 24!</p>
    <p>* DNS dataset!</p>
  </div>
  <div class="page">
    <p>Impact of Payload Compression!</p>
    <p>Uncomp!</p>
    <p>Dict Comp! Dict + LZO!</p>
    <p>&gt;3x! Speed! Gain!</p>
    <p>over! Heavy ! Hitters!</p>
  </div>
  <div class="page">
    <p>Impact of Payload Compression!</p>
    <p>LZO block must be decompressed</p>
    <p>before query!</p>
  </div>
  <div class="page">
    <p>Summary!</p>
    <p>!</p>
    <p>Framework has been used recently to:!  Finding DGA domains  including Cridex malware.!  Blacklisted domains.!  Fast-Flux analysis.!  Finding correlations between HTTP and DNS requests.!</p>
    <p>Sub minute flow query times.!  Sub second needle in a haystack queries.!  Partition Intensive queries on the order of a few minutes.!  Slow linear growth over time.!</p>
  </div>
  <div class="page">
    <p>Conclusions!</p>
    <p>Designed a low bandwidth, random access query framework for network traffic.!</p>
    <p>Improved query performance over existing solutions.! !  Take Aways:!</p>
    <p>Record-level compression provides significant data reduction and improved query performance.!</p>
    <p>Limit object parsing for performance!  Data organization important for data reduction, !  Multi-level indexing improves query performance through I/O</p>
    <p>reduction.!</p>
    <p>!</p>
  </div>
</Presentation>
