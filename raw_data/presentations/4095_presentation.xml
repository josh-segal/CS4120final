<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exploitations of Uninitialized Uses on macOS Sierra</p>
    <p>Zhenquan Xu, Gongshen Liu,Tielei Wang, Hao Xu</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Background &amp; Introduction</p>
    <p>Vulnerability analysis &amp; Exploitation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Background &amp; Introduction</p>
    <p>Vulnerability analysis &amp; Exploitation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Great tools have been developed to eliminate uninitialized use vulnerabilities :</p>
    <p>Unisan : prevents kernel data leakage</p>
    <p>STACKLEAK : prevents kernel stack data leakage</p>
    <p>Split Kernel : same as STACKLEAK</p>
  </div>
  <div class="page">
    <p>PwnFest 2016</p>
    <p>Team up with Lokihardt for pwning Safari on macOS Sierra</p>
    <p>Remote code execution in Safari by Lokihardt</p>
    <p>Kernel code execution in Safari by us</p>
  </div>
  <div class="page">
    <p>Fixed in macOS Sierra 10.12.3</p>
    <p>Released January 23, 2017</p>
    <p>CVE-2017-2357</p>
    <p>CVE-2017-2358</p>
  </div>
  <div class="page">
    <p>Mitigations</p>
    <p>kASLR : kernel Address Space Layout Randomization</p>
    <p>W^X : Write XOR eXecute</p>
    <p>SMEP : Supervisor Mode Execution Protection</p>
    <p>SMAP : Supervisor Mode Access Protection</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Background &amp; Introduction</p>
    <p>Vulnerability analysis &amp; Exploitation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>CVE-2017-2357</p>
    <p>The vulnerability lies in IOAudioFamily (&lt;= 204.4)</p>
    <p>Source code: https://opensource.apple.com/source/ IOAudioFamily/IOAudioFamily-204.4/</p>
    <p>The vulnerability is caused by partial initialization</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>Programs in the user space can register a notification port by calling IOConnectSetNotificationPort() on an IOAudioControlUserClient object</p>
    <p>Notification messages will be sent to the port when certain audio events occur afterwards</p>
    <p>IOAudioControlUserClient::registerNotificationPort() will be eventually invoked in the kernel</p>
  </div>
  <div class="page">
    <p>Analysis IOReturn IOAudioControlUserClient::registerNotificationPort(mach_port_t port, UInt32 type, UInt32 refCon) { ... if (notificationMessage == 0) { notificationMessage = (IOAudioNotificationMessage *)</p>
    <p>IOMallocAligned(sizeof(IOAudioNotificationMessage), sizeof (IOAudioNotificationMessage *)); if (!notificationMessage) { return kIOReturnNoMemory; } } notificationMessage-&gt;messageHeader.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0); notificationMessage-&gt;messageHeader.msgh_size = sizeof(IOAudioNotificationMessage); notificationMessage-&gt;messageHeader.msgh_remote_port = port; notificationMessage-&gt;messageHeader.msgh_local_port = MACH_PORT_NULL; notificationMessage-&gt;messageHeader.msgh_reserved = 0; notificationMessage-&gt;messageHeader.msgh_id = 0; notificationMessage-&gt;ref = refCon; ... }</p>
    <p>typedef struct _IOAudioNotificationMessage { mach_msg_header_t messageHeader; UInt32 type; UInt32 ref; void * sender; } IOAudioNotificationMessage;</p>
    <p>notificationMessage is not zeroed out and type and sender is not initialized</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>IOAudioControlUserClient::sendChangeNotification() sends notification messages to userspace programs</p>
    <p>void IOAudioControlUserClient::sendChangeNotification(UInt32 notificationType) { if (notificationMessage) { kern_return_t kr;</p>
    <p>notificationMessage-&gt;type = notificationType; kr = mach_msg_send_from_kernel(&amp;notificationMessage-&gt;messageHeader, notificationMessage-&gt;messageHeader.msgh_size); if ((kr != MACH_MSG_SUCCESS) &amp;&amp; (kr != MACH_SEND_TIMED_OUT)) { IOLog(&quot;IOAudioControlUserClient: sendRangeChangeNotification() failed - msg_send returned: %d\n&quot;, kr); } } }</p>
  </div>
  <div class="page">
    <p>Analysis void IOAudioControlUserClient::sendChangeNotification(UInt32 notificationType) { if (notificationMessage) { kern_return_t kr;</p>
    <p>notificationMessage-&gt;type = notificationType; kr = mach_msg_send_from_kernel(&amp;notificationMessage-&gt;messageHeader, notificationMessage-&gt;messageHeader.msgh_size); if ((kr != MACH_MSG_SUCCESS) &amp;&amp; (kr != MACH_SEND_TIMED_OUT)) { IOLog(&quot;IOAudioControlUserClient: sendRangeChangeNotification() failed - msg_send returned: %d\n&quot;, kr); } } }</p>
    <p>sender is uninitialized (notificationMessage is partial initialized)</p>
    <p>the kernel sends a message with 8 bytes kernel heap data to the user</p>
    <p>space</p>
  </div>
  <div class="page">
    <p>Exploitation  notificationMessage is allocated</p>
    <p>via IOMallocAligned() which allocates a header structure to store metadata.</p>
    <p>notificationMessage is allocated in kalloc.80 zone</p>
    <p>sender is at +0x38</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>Challenge 1: How to leak critical information such as kASLR slide</p>
    <p>Challenge 2: How to make the exploitation stable</p>
  </div>
  <div class="page">
    <p>Exploitation class OSSerialize : public OSObject { ... private: char * data; unsigned int length; unsigned int capacity; unsigned int capacityIncrement; OSArray * tags; bool binary; bool endCollection; Editor editor; void * editRef; ... }</p>
    <p>typedef const OSMetaClassBase * (*Editor)( void* reference, OSSerialize* s, OSCollection* container, const OSSymbol* name, const OSMetaClassBase* value);</p>
    <p>The OSSerialize objects are allocated in kalloc.80</p>
    <p>The member at +0x38 is a function pointer</p>
    <p>editor is set to a kernel function in IORegistryEntryCreateCFProperties()</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>OSSerialize</p>
    <p>OSSerialize</p>
    <p>OSSerialize</p>
    <p>. . .</p>
    <p>function pointers</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>freed OSSerialize</p>
    <p>freed OSSerialize</p>
    <p>freed OSSerialize</p>
    <p>. . .</p>
    <p>function pointers</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>notificationMessage</p>
    <p>notificationMessage</p>
    <p>notificationMessage</p>
    <p>. . .</p>
    <p>function pointers</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>OSSerialize is allocated and deallocated within a function call (i.e. IORegistryEntryCreateCFProperties())</p>
    <p>We developed a new technique called flashing memory</p>
    <p>Allocate and deallocate OSSerialize objects very frequently</p>
  </div>
  <div class="page">
    <p>CVE-2017-2358</p>
    <p>The vulnerability lies in AMDRadeonXx000.kext (x may vary on different platforms)</p>
    <p>The vulnerability is caused by an uninitialized stack variable</p>
    <p>Accelerator is one of the devices that we can directly access in the WebContent sandbox</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>Local variables v46 and v47 are not initialized</p>
    <p>v46 and v47 are passed to LookupResource()</p>
    <p>A vcall is invoked blindly on v46 and v47 then always false</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>a2 is treated as an index into a resource array</p>
    <p>*a3 is set only when a2 is valid and the corresponding resource object exists (_RAX != 0)</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>a2 is users structure input</p>
    <p>We can supply an invalid id in the structure input</p>
    <p>PANIC</p>
  </div>
  <div class="page">
    <p>Exploitation  The uninitialized value on kernel stack is random so</p>
    <p>we need to control the stack first</p>
    <p>A function (selector 7333) in the AGPM userclient can be used to taint the stack</p>
    <p>We are able to copy at most 4096 bytes of controlled, non-zero data onto kernel stack</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>...</p>
    <p>...</p>
    <p>Stack used by</p>
    <p>other functions</p>
    <p>Stack grows</p>
    <p>up to 4KB</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>Stack grows</p>
    <p>stack used by</p>
    <p>SurfaceCopy()</p>
    <p>...</p>
    <p>...</p>
    <p>Stack used by</p>
    <p>other functions</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>What value should 0xabcdabcdabcdabcd be?</p>
    <p>We set 0xabcdabcdabcdabcd = the address of the object we fake on the heap</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>How can we know the address of our fake objects?</p>
    <p>Spray several GBs of data on the heap</p>
    <p>Heap randomization is weak in the kernel</p>
    <p>User-controlled data at fixed, high address (we chose the address 0xffffff8060010110)</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>zone_map_min_address(with kslide) zone_map_min_address(without kslide)</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>low</p>
    <p>high</p>
    <p>Allocation Times</p>
    <p>Al lo</p>
    <p>ca ti</p>
    <p>on A</p>
    <p>dd re</p>
    <p>ss</p>
    <p>high: 0xffffff80af090000 low: 0xffffff80195a7000</p>
  </div>
  <div class="page">
    <p>Exploitation</p>
    <p>Stack grows</p>
    <p>stack used by</p>
    <p>SurfaceCopy()</p>
    <p>...</p>
    <p>...</p>
    <p>Stack used by</p>
    <p>other functions</p>
  </div>
  <div class="page">
    <p>Exploitation vm_map_copy header</p>
    <p>Padding Fake vtable ptr</p>
    <p>Fake object</p>
    <p>ROP stack</p>
    <p>+0x800 4K</p>
  </div>
  <div class="page">
    <p>Exploitation  Save registers</p>
    <p>Pivot the stack</p>
    <p>Disable SMEP &amp; SMAP</p>
    <p>Return to SHELLCODE in the user space</p>
    <p>Re-enable SMEP &amp; SMAP</p>
    <p>Call _thread_exception_return() to exit</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Background &amp; Introduction</p>
    <p>Vulnerability analysis &amp; Exploitation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>New mitigations make exploitation more challenging but also encourage us to discover new exploit techniques</p>
    <p>Keep initialization in our mind while coding</p>
    <p>More effective tools for detecting uninitialized uses are still necessary</p>
  </div>
  <div class="page">
    <p>Credits</p>
    <p>Ian Beer</p>
    <p>qwertyoruiop</p>
    <p>Lokihardt</p>
    <p>INT 80 &amp; windknown</p>
  </div>
  <div class="page">
    <p>Thank You For Your Attention Q&amp;A</p>
  </div>
</Presentation>
