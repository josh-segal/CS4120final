<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>S C I E N C E  P A S S I O N  T E C H N O L O G Y</p>
    <p>u www.iaik.tugraz.at</p>
    <p>DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks</p>
    <p>Usenix Security 2016, August 11</p>
    <p>Peter Pessl, Daniel Gruss, Clmentine Maurice, Michael Schwarz, Stefan Mangard IAIK, Graz University of Technology, Austria</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Setting  Cloud Servers</p>
    <p>Multi-CPU (multi-socket) systems</p>
    <p>Multiple tenants  separate VMs</p>
    <p>dedicated CPUs  no shared cache</p>
    <p>No shared memory  no cross-VM memory deduplication</p>
    <p>Previously  slow covert channel (&lt; 1 kbps)</p>
    <p>no side channel</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Cross-CPU attacks using DRAM addressing (DRAMA)  fast covert channel (up to 2 Mbps)</p>
    <p>first side-channel attack</p>
    <p>Reverse-engineered DRAM addressing  two approaches</p>
    <p>Improving existing attacks</p>
  </div>
  <div class="page">
    <p>DRAM Organization</p>
    <p>Hierarchy of</p>
    <p>CPUs</p>
    <p>CPU 2 M C</p>
    <p>M C</p>
    <p>CPU 1</p>
    <p>In te</p>
    <p>rc o</p>
    <p>n n</p>
    <p>e ct</p>
    <p>DRAM Bus</p>
    <p>DRAM Bus</p>
  </div>
  <div class="page">
    <p>DRAM Organization</p>
    <p>Hierarchy of</p>
    <p>CPUs</p>
    <p>Channels</p>
    <p>DIMMs Channel B</p>
    <p>Channel A</p>
    <p>CPU M C</p>
    <p>DIMM</p>
    <p>DIMM DIMM</p>
    <p>DIMM</p>
  </div>
  <div class="page">
    <p>Bank 1 Bank 2</p>
    <p>Bank 8 ....</p>
    <p>DRAM Organization</p>
    <p>Hierarchy of</p>
    <p>CPUs</p>
    <p>Channels</p>
    <p>DIMMs</p>
    <p>Ranks</p>
    <p>Banks</p>
  </div>
  <div class="page">
    <p>DRAM Banks</p>
    <p>Memory array  rows of columns</p>
    <p>Row Buffer  buffers one entire row (8 KB)</p>
    <p>Row 1 Row 2</p>
    <p>Row N Row Buffer</p>
  </div>
  <div class="page">
    <p>The Row Buffer</p>
    <p>Behavior similar to a cache  row hits  fast access</p>
    <p>row conflicts  slow access</p>
  </div>
  <div class="page">
    <p>Reverse Engineering of DRAM Addressing</p>
  </div>
  <div class="page">
    <p>Reverse-Engineering DRAM Addressing</p>
    <p>Mapping to banks using physical-address bits</p>
    <p>Complex addressing functions  distribute traffic to channels/banks</p>
    <p>undisclosed (Intel)</p>
    <p>Two approaches to reverse engineer</p>
    <p>Presumption: linear functions (XORs)</p>
  </div>
  <div class="page">
    <p>Approach 1: Probing the Memory Bus</p>
    <p>Probing of control signals  CS, BA,</p>
    <p>measure voltage with Osci.</p>
    <p>recover logic value</p>
    <p>Repeated access to address  until value is determined</p>
    <p>Function reconstruction  linear algebra over bits</p>
  </div>
  <div class="page">
    <p>Approach 2: Fully Automated SW-based</p>
    <p>Exploit timing differences</p>
    <p>Measuring phase  build sets of same-bank addresses</p>
    <p>alternating access to two addresses  measure avg. access time</p>
    <p>Reconstruction phase  exhaustive search over linear functions with up to n set coefficients</p>
    <p>Total time: seconds</p>
  </div>
  <div class="page">
    <p>Comparison</p>
    <p>Probing  recover function labels</p>
    <p>find a ground truth</p>
    <p>equipment and access to internals of machine</p>
    <p>SW-based  fully automated</p>
    <p>ability to run remotely, sandboxed, and on mobile devices</p>
  </div>
  <div class="page">
    <p>Some Results - Desktop</p>
    <p>...678911 1012131416171819202122...</p>
    <p>BA0 BA1</p>
    <p>Rank</p>
    <p>Ch.</p>
    <p>BA2</p>
    <p>Intel Haswell (desktop system)  DDR3</p>
  </div>
  <div class="page">
    <p>Some Results  Server System</p>
    <p>...678911 1012131416171819202122...</p>
    <p>Rank</p>
    <p>BG0</p>
    <p>BG1 BA0</p>
    <p>Ch.</p>
    <p>BA1</p>
    <p>CPU</p>
    <p>Dual-CPU Intel Haswell-EP  DDR4</p>
  </div>
  <div class="page">
    <p>Some Results  Mobile</p>
    <p>Samsung Exynos 7420 (Galaxy S6)  LPDDR4</p>
    <p>...678911 1012131416171819202122...</p>
    <p>Rank BA0 BA1</p>
    <p>Ch.</p>
    <p>BA2</p>
  </div>
  <div class="page">
    <p>Cross-CPU Attacks and how it continues with Romeo and Juliet</p>
  </div>
  <div class="page">
    <p>High-speed covert channel</p>
  </div>
  <div class="page">
    <p>Concept</p>
    <p>Occupy different rows in the same bank</p>
    <p>Sender  send 1: continuously access row</p>
    <p>send 0: dont do anything</p>
    <p>Receiver  access row and measure avg. time</p>
    <p>infer sent bits based on time</p>
    <p>Sender Sender</p>
    <p>Row Buffer</p>
    <p>Receiver ReceiverReceiver</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Each bank is a channel  use up to 8 banks in parallel</p>
    <p>multithreading</p>
    <p>Performance:  desktop: 2.1 Mbps</p>
    <p>multi-CPU server: 1.2 Mbps</p>
    <p>Intel Haswell (desktop system)</p>
  </div>
  <div class="page">
    <p>Performance Comparison</p>
    <p>Performance Cross-CPU No Shared Memory</p>
    <p>Ours 2.1 Mbps</p>
    <p>Prime+Probe [2] 536 Kbps</p>
    <p>Flush+Reload [2] 2.3 Mbps</p>
    <p>Flush+Flush [2] 3.8 Mbps</p>
    <p>Memory Bus Contention [3] 746 bps</p>
    <p>Deduplication [4] 90 bps</p>
  </div>
  <div class="page">
    <p>Low-noise side-channel attack</p>
  </div>
  <div class="page">
    <p>Row Buffer</p>
    <p>Victim Victim</p>
    <p>Spy</p>
    <p>Victim Victim</p>
    <p>Spy Spy</p>
    <p>Spying on Memory Accesses</p>
    <p>Memory in the same row/bank  row size 8 KB / page size 4 KB</p>
    <p>Spy activates conflict row</p>
    <p>Victim computes and possibly accesses shared row</p>
    <p>Spy accesses shared row  fast row hit  victim access</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Keystrokes in Firefox address bar</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>high spatial accuracy (down to 512 B)</p>
    <p>very low number of false positives  monitor single events</p>
    <p>Finding addresses: template attack [1]  automatic location of vulnerable addresses</p>
    <p>scan large fraction of memory (4 KB pages)</p>
  </div>
  <div class="page">
    <p>Countermeasures to DRAMA</p>
    <p>Restrictions of  rdtsc</p>
    <p>clflush</p>
    <p>Multi-CPU: separating DRAM for tenants  only access to CPU-local memory</p>
    <p>degradation into single-CPU system</p>
    <p>Detection via high number of cache misses / row conflicts</p>
  </div>
  <div class="page">
    <p>Improving Attacks - Rowhammer</p>
    <p>Rowhammer  inducing bit flips in DRAM</p>
    <p>by quickly switching rows</p>
    <p>requires addressing functions</p>
    <p>First documented bit flips on DDR4  Jan. 2016</p>
  </div>
  <div class="page">
    <p>The End  of Romeo and Juliet</p>
  </div>
  <div class="page">
    <p>Source code for reverse-engineering tool and side-channel attack at</p>
    <p>https://github.com/IAIK/drama</p>
  </div>
  <div class="page">
    <p>S C I E N C E  P A S S I O N  T E C H N O L O G Y</p>
    <p>u www.iaik.tugraz.at</p>
    <p>DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks</p>
    <p>Usenix Security 2016, August 11</p>
    <p>Peter Pessl, Daniel Gruss, Clmentine Maurice, Michael Schwarz, Stefan Mangard IAIK, Graz University of Technology, Austria</p>
  </div>
  <div class="page">
    <p>Bibliography</p>
    <p>[1] Gruss, Spreitzer, Mangard. Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches. In Usenix Security 2015</p>
    <p>[2] Gruss, Maurice, Wagner, Mangard. Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA16</p>
    <p>[3] Wu, Xu, Wang. Whispers in the Hyper-space: High-bandwidth and Reliable Covert Channel Attacks Inside the Cloud. In Usenix Security 2012</p>
    <p>[4] Xiao, Xu, Huang, Wang. Security implications of memory deduplication in a virtualized environment. In DSN13</p>
  </div>
</Presentation>
