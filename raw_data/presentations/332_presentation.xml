<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Model-inference-Assisted Concolic Exploration</p>
    <p>Domagoj Babic h-p://www.domagoj.info/</p>
    <p>joint work with Chia Yuan Cho, Pongsin Poosankam, Kevin Zhijie Chen, Edward XueJun Wu, Dawn Song</p>
    <p>UC Berkeley</p>
    <p>MACE:</p>
  </div>
  <div class="page">
    <p>SoKware Security</p>
    <p>Malware deluge: &gt;60,000 samples / day  One of the main a-ack vectors</p>
    <p>SoKware flaws!  Thousands of CVEs each year  Cures: verificaVon, tesVng</p>
    <p>Common Vulnerability Disclosures (CVEs) per year 2 Domagoj Babic, USENIX 2011</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Dynamic Symbolic ExecuVon (a.k.a. DART, concolic execuVon)</p>
    <p>High-level intro  Aspects that could be improved</p>
    <p>Model-inference-Assisted Concolic ExploraVon  How it works  How it improves over dynamic symbolic execuVon</p>
    <p>Experimental results</p>
  </div>
  <div class="page">
    <p>Dynamic Symbolic ExecuVon</p>
    <p>Independently invented by several groups in 2004/2005</p>
    <p>Main components:  Concrete execuVon  Symbolic execuVon  Solver</p>
    <p>(decision procedure)</p>
    <p>Very effecVve in pracVce</p>
    <p>x0=a+b; if x0&lt;0 then x1 = -x0; y1 = y0; else x1 = x0; y1 = y0+x0;</p>
    <p>Path condiVon</p>
  </div>
  <div class="page">
    <p>Learning</p>
    <p>Dynamic symbolic execuVon  Repeats iteraVons (concrete + symbolic) unVl terminated</p>
    <p>Knowledge gained from iteraVons discarded  Research quesVons:</p>
    <p>What can be learned from iteraVons?  How can one represent the gained knowledge?  How could that knowledge prune the search space?</p>
  </div>
  <div class="page">
    <p>MACE  The Main Ideas</p>
    <p>Learning + dynamic symbolic execuVon</p>
    <p>Learns a state-machine abstracVng the program</p>
    <p>Guides further search  IniValize the program to</p>
    <p>certain state</p>
    <p>Explore the neighborhood</p>
    <p>Specifies sequences of inputs required to get to a certain state</p>
  </div>
  <div class="page">
    <p>b c z y</p>
    <p>The L* Algorithm</p>
    <p>MACE uses an improved L* [CCS2010]</p>
    <p>Polynomial in the number of states and size of the input message set MI</p>
    <p>Constructs an observa+on table</p>
    <p>Reads off states and transiVons from the table</p>
    <p>Black box</p>
    <p>L*</p>
    <p>Sequences of input messages from MI</p>
    <p>Sequences of output messages from Mo</p>
    <p>S a b c</p>
    <p>Observa(on Table S. MI</p>
    <p>z x y x y z x</p>
  </div>
  <div class="page">
    <p>The MACE Approach</p>
    <p>L* Shortest</p>
    <p>sequence generator State</p>
    <p>Explorer State</p>
    <p>Explorer State</p>
    <p>Explorer State</p>
    <p>Explorer</p>
    <p>Filter</p>
    <p>Finite state-machine</p>
    <p>Input sequences</p>
    <p>Input and output sequences Set of input messages</p>
    <p>Seed messages</p>
  </div>
  <div class="page">
    <p>Key Difficulty: AbstracVon of Messages</p>
    <p>Inferring the state-machine over all messages  ComputaVonally infeasible  Useless for guidance</p>
    <p>L* operates over an abstract set of messages</p>
    <p>In prior work [CCS10]  manually wri-en abstracVons</p>
    <p>MACE: automaVc abstracVon of input messages</p>
    <p>L*</p>
    <p>ConcreVzaVon</p>
    <p>ApplicaVon under Test</p>
    <p>AbstracVon</p>
    <p>Abstract input msgs</p>
    <p>Concrete input msgs</p>
    <p>Concrete output msgs</p>
    <p>Abstract output msgs</p>
  </div>
  <div class="page">
    <p>Filtering FuncVon</p>
    <p>The main idea: keep only the messages that refine the state-machine</p>
    <p>Exact check too expensive, use an approximaVon  If the current state-machine can produce the</p>
    <p>given output sequence, no refinement  Otherwise, add all the input messages from the</p>
    <p>corresponding input sequence</p>
  </div>
  <div class="page">
    <p>ImplementaVon</p>
    <p>Dynamic symbolic execuVon engine  BitBlaze infrastructure</p>
    <p>L*  Our implementaVon with improvements from</p>
    <p>the CCS2010 botnet analysis paper</p>
    <p>Scripts  For gluing the components together</p>
  </div>
  <div class="page">
    <p>ApplicaVons of MACE</p>
    <p>Guiding dynamic symbolic execuVon  Different abstracVons suitable for different types</p>
    <p>of applicaVons  E.g., inference of context-free grammars for</p>
    <p>automated tesVng of applicaVons with parsers</p>
    <p>Protocol reverse engineering  ComparaVve analysis (e.g., for extracVng</p>
    <p>signatures)  Protocol state-machine model checking</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>DETER Security testbed (3GHz Intel Xeon processors)</p>
    <p>State-space exploraVon done in parallel  One job per state in the inferred state-machine  2.5 hr Vmeout per state  Each newly discovered state explored only once</p>
    <p>For coverage measurement experiments  Baseline got extra Vme, compensates for the</p>
    <p>Vme spent in learning</p>
  </div>
  <div class="page">
    <p>Benchmarks</p>
    <p>Inference done on  Remote Frame Buffer (RFB) protocol: Vino 2.26.1  Server Message Block (SMB) protocol: Samba 3.3.4</p>
    <p>State-space exploraVon also done on  RealVNC  Win XP SMB</p>
    <p>Seed message set  Vino: 45 sec session of a remote desktop session  Samba: used gentest suite</p>
  </div>
  <div class="page">
    <p>Results: IteraVons and RunVme</p>
    <p>Program Itera(on States Input alphabet size</p>
    <p>Output alphabet size</p>
    <p>Learning (me (min)</p>
    <p>Vino 1 7 8 7 142</p>
    <p>Samba 1 40 40 14 2028</p>
  </div>
  <div class="page">
    <p>Results: Inferred Protocol Models</p>
    <p>Inferred 84-state SMB protocol implementaVon abstracVon</p>
  </div>
  <div class="page">
    <p>Results: Discovered VulnerabiliVes</p>
    <p>Program Vulnerability New MACE (hrs)</p>
    <p>Baseline (hrs)</p>
    <p>Vino CVE-2011-0906 1 N/A</p>
    <p>CVE-2011-0905 4 &gt;105</p>
    <p>CVE-2011-0904 15 &gt;105</p>
    <p>Samba CVE-2010-2063 12 602</p>
    <p>CVE-2010-1642 14 &gt;1260</p>
    <p>Fixed without CVE 124 &gt;1260</p>
    <p>RealVNC CVE-2011-0907 2 &gt;105</p>
    <p>Win XP SMB None &gt;210 &gt;1260 17</p>
  </div>
  <div class="page">
    <p>Results: Coverage Improvement</p>
    <p>Program Instruc(on Coverage Baseline</p>
    <p>Instruc(on Coverage MACE</p>
    <p>Coverage Improvement (%)</p>
    <p>Vino 129762 138232 6.53</p>
    <p>Samba 66693 105946 58.86</p>
    <p>RealVNC 39300 47557 21.01</p>
    <p>Win XP 90431 112820 24.76</p>
  </div>
  <div class="page">
    <p>Results: ExploraVon Depth (SMB)</p>
  </div>
  <div class="page">
    <p>Why MACE Works so Well?</p>
    <p>Uses a relaVvely cheap technique (L*) to infer an abstracVon of the search space and reduce the search space</p>
    <p>The abstracVon is used to guide the search  Especially useful for construcVng sequences of</p>
    <p>messages to get to certain state</p>
    <p>More control over the search  E.g., decreases the probability of gevng stuck in</p>
    <p>loops</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Model-inference-Assisted Concolic ExecuVon  How it works  How it improves dynamic symbolic execuVon</p>
    <p>Experimental results  7X more vulnerabiliVes found  Up to 58% be-er coverage  Deeper states explored</p>
  </div>
</Presentation>
