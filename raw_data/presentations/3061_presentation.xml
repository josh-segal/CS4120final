<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Finding Crash-Consistency Bugs with Bounded Black-Box Testing</p>
    <p>Jayashree Mohan, Ashlie Martinez, Soujanya Ponnapalli, Pandian Raju, Vijay Chidambaram</p>
  </div>
  <div class="page">
    <p>Crashes</p>
    <p>This is very important</p>
    <p>File saved! I crashed</p>
    <p>File missing</p>
    <p>2</p>
    <p>Image source : https://www.fotolia.com</p>
  </div>
  <div class="page">
    <p>I wish filesystems were crash-consistent!</p>
    <p>3</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>4</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>mkdir (A)</p>
    <p>5</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>mkdir (A) touch (A/bar)</p>
    <p>6</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>7</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B)</p>
    <p>8</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>B</p>
    <p>bar Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>9</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar)</p>
    <p>10</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>foo B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar) touch (A/foo)</p>
    <p>11</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>foo B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>foo</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar) touch (A/foo) fsync (A/foo)</p>
    <p>12</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>foo B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>foo</p>
    <p>Expected</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar) touch (A/foo) fsync (A/foo)</p>
    <p>CRASH!</p>
    <p>13</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>foo B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>foo</p>
    <p>Expected</p>
    <p>A foo</p>
    <p>Actual</p>
    <p>Persisted file A/bar missing</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar) touch (A/foo) fsync (A/foo)</p>
    <p>CRASH!</p>
    <p>14</p>
  </div>
  <div class="page">
    <p>Rename atomicity bug in btrfs</p>
    <p>A bar</p>
    <p>foo B</p>
    <p>Memory</p>
    <p>Storage</p>
    <p>A bar</p>
    <p>foo</p>
    <p>Expected</p>
    <p>A foo</p>
    <p>Actual</p>
    <p>Persisted file A/bar missing</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar) touch (A/foo) fsync (A/foo)</p>
    <p>CRASH!</p>
    <p>15</p>
    <p>Exists in the kernel since 2014! Found by ACE and CrashMonkey</p>
  </div>
  <div class="page">
    <p>Testing Crash Consistency Today</p>
    <p>State of the Art : xfstest suite  Collection of 482 regression tests</p>
    <p>Only 5% of tests in xfstest check for file system crash consistency 16</p>
    <p>Annotate filesystems  Hard to do for existing FS</p>
    <p>Verified Filesystems Build FS from scratch Model Checking</p>
  </div>
  <div class="page">
    <p>Challenges with systematic testing</p>
    <p>17</p>
    <p>Infinite workload</p>
    <p>space</p>
    <p>ChallengesLack of automated</p>
    <p>infrastructure</p>
    <p>Our work addresses both these issues, to provide a systematic testing framework</p>
    <p>Systematically generate workloads</p>
  </div>
  <div class="page">
    <p>Bounded Black-Box Crash Testing (B3)</p>
    <p>Focus on reproducible bugs resulting in metadata corruption, data loss.  Found 10 new bugs across btrfs and F2FS;  Found 1 bug in FSCQ (verified file system)  Filesystem agnostic  works with any POSIX file system</p>
    <p>New approach to testing file-system crash consistency</p>
    <p>18www.github.com/utsaslab/crashmonkey</p>
    <p>Target Filesystem</p>
    <p>Output: Bug report with workload, expected state, actual state</p>
    <p>CrashMonkey</p>
    <p>Workload 1 Workload n</p>
    <p>Bounds: (length, operations, args)</p>
    <p>Automatic Crash Explorer(ACE)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>CrashMonkey  Bounded Black Box Crash Testing  Automatic Crash Explorer (ACE)  Demo</p>
    <p>19</p>
  </div>
  <div class="page">
    <p>Challenges with systematic testing</p>
    <p>20</p>
    <p>Infinite workload</p>
    <p>space</p>
    <p>ChallengesLack of automated</p>
    <p>infrastructure</p>
  </div>
  <div class="page">
    <p>CrashMonkey</p>
    <p>21</p>
    <p>Efficient infrastructure to record and replay block level IO requests</p>
    <p>Simulate crash at different points in the workload  Automatically test for consistency after crash.  Copy-on-write RAM block device</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action</p>
    <p>22</p>
    <p>Final FS stateInitial FS state</p>
    <p>Workload</p>
    <p>IO due to workload</p>
    <p>Persistence point</p>
  </div>
  <div class="page">
    <p>23</p>
    <p>CrashMonkey in Action</p>
    <p>Initial FS state</p>
    <p>Workload</p>
    <p>IO due to workload</p>
    <p>Persistence point</p>
  </div>
  <div class="page">
    <p>24</p>
    <p>Phase 1 : Record IO</p>
    <p>Initial FS state Oracle Record IO up to persistence point</p>
    <p>Safely unmount</p>
    <p>Workload</p>
    <p>IO due to workload</p>
    <p>Persistence point</p>
    <p>IO forced by unmount</p>
  </div>
  <div class="page">
    <p>25</p>
    <p>Phase 2 : Replay IO</p>
    <p>Initial FS state Oracle</p>
    <p>Initial FS state Crash State</p>
    <p>Record IO up to persistence point Safely unmount</p>
    <p>Replay IO up to persistence point</p>
    <p>Workload</p>
    <p>IO due to workload</p>
    <p>Persistence point</p>
    <p>IO forced by unmount</p>
  </div>
  <div class="page">
    <p>26</p>
    <p>Phase 3 : Test for consistency</p>
    <p>Initial FS state Oracle</p>
    <p>Initial FS state Crash State</p>
    <p>Auto Checker</p>
    <p>Record IO up to persistence point Safely unmount</p>
    <p>Replay IO up to persistence point</p>
    <p>Workload</p>
    <p>IO due to workload</p>
    <p>Persistence point</p>
    <p>IO forced by unmount</p>
    <p>After recovery</p>
  </div>
  <div class="page">
    <p>27</p>
    <p>Initial FS state Oracle</p>
    <p>Initial FS state Crash State</p>
    <p>Auto Checker</p>
    <p>Bug Report</p>
    <p>Record IO up to persistence point Safely unmount</p>
    <p>Replay IO up to persistence point</p>
    <p>Phase 3 : Test for consistency Workload</p>
    <p>IO due to workload</p>
    <p>Persistence point</p>
    <p>IO forced by unmount</p>
  </div>
  <div class="page">
    <p>Challenges with Systematic Testing</p>
    <p>28</p>
    <p>ChallengesLack of automated</p>
    <p>infrastructure</p>
    <p>Infinite workload</p>
    <p>space</p>
    <p>So Far</p>
    <p>Given a workload compliant to POSIX API, we saw how CrashMonkey generates crash states and automatically tests for consistency</p>
    <p>CrashMonkey</p>
  </div>
  <div class="page">
    <p>Challenges with Systematic Testing</p>
    <p>29</p>
    <p>So Far</p>
    <p>Given a workload compliant to POSIX API, we saw how CrashMonkey generates crash states and automatically tests for consistency</p>
    <p>Next question : How to automatically generate workloads in an the infinite workload space?</p>
    <p>ChallengesLack of automated</p>
    <p>infrastructure</p>
    <p>Infinite workload</p>
    <p>space</p>
    <p>CrashMonkey</p>
  </div>
  <div class="page">
    <p>Exploring the infinite workload space</p>
    <p>Challenges:  Infinite length of workloads  Large set of filesystem operations  Infinite parameter options (file/directory names, depth)  Infinite options for initial filesystem state  When in the workload to simulate a crash?</p>
    <p>30</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>CrashMonkey  Bounded Black Box Crash Testing  Automatic Crash Explorer (ACE)  Demo</p>
    <p>31</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing</p>
    <p>32</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing</p>
    <p>33</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing</p>
    <p>34</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
    <p>Image source: https://en.wikipedia.org/wiki/Cube</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing</p>
    <p>35</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing</p>
    <p>36</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing</p>
    <p>37</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
  </div>
  <div class="page">
    <p>B3 : Bounded Black Box Crash Testing Choice of crash point  Only after fsync(), fdatasync() or sync()  Not in the middle of system call</p>
    <p>38</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/bar) touch (A/foo) fsync (A/foo)</p>
    <p>Crash Point 1</p>
    <p>Crash Point 2</p>
    <p>Developers are motivated to patch bugs that break semantics of persistence operations</p>
    <p>Crashing in the middle of system calls leads to exponentially large crash-states.</p>
  </div>
  <div class="page">
    <p>Limitations of B3</p>
    <p>No guarantee of finding all crash-consistency bugs in a filesystem</p>
    <p>Assumes the correct working of crash-consistency mechanism like journaling or CoW  Does not crash in the middle of system calls</p>
    <p>Can only reveal if a bug has occurred, not the reason or origin of bug.</p>
    <p>Needs larger compute to test higher sequence lengths</p>
    <p>39</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>CrashMonkey  Bounded Black Box Crash Testing  Automatic Crash Explorer (ACE)  Demo</p>
    <p>40</p>
  </div>
  <div class="page">
    <p>Bounds chosen by ACE</p>
    <p>41</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls Bounds picked based on insights from the study of crash-consistency bugs</p>
    <p>reported on Linux file systems over the last 5</p>
    <p>years</p>
  </div>
  <div class="page">
    <p>Bounds chosen by ACE</p>
    <p>42</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
    <p>Maximum # core ops is 3</p>
  </div>
  <div class="page">
    <p>Bounds chosen by ACE</p>
    <p>43</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
    <p>Maximum # core ops is 3</p>
    <p>Root A B</p>
    <p>(foo, bar) (foo, bar)</p>
    <p>Overwrites to start, middle, end of a file and append</p>
  </div>
  <div class="page">
    <p>Bounds chosen by ACE</p>
    <p>44</p>
    <p>Length of workloads</p>
    <p>Initial FS state</p>
    <p>Arguments to system calls</p>
    <p>Root A B</p>
    <p>(foo, bar) (foo, bar)</p>
    <p>Overwrites to start, middle, end and append</p>
    <p>Maximum # core ops is 3</p>
    <p>New, 100MB FS</p>
  </div>
  <div class="page">
    <p>Phases of ACE</p>
    <p>45</p>
    <p>creat() link()</p>
    <p>rename() write()</p>
    <p>Operation Set</p>
    <p>Generating skeletons of sequence-2. : 4*4 = 16</p>
    <p>creat() rename()</p>
    <p>creat() link() creat()</p>
    <p>write()</p>
    <p>creat() creat()</p>
    <p>link() link() link()</p>
    <p>creat()</p>
    <p>link() rename()</p>
    <p>link() write()</p>
    <p>rename() rename()</p>
    <p>rename() creat()</p>
    <p>rename() link()</p>
    <p>rename() write()</p>
    <p>write() write()</p>
    <p>write() creat()</p>
    <p>write() link()</p>
    <p>write() rename()</p>
  </div>
  <div class="page">
    <p>Phases of ACE</p>
    <p>46</p>
    <p>creat() link()</p>
    <p>rename() write()</p>
    <p>Operation Set</p>
    <p>Generating skeletons of sequence-2. : 4*4 = 16</p>
    <p>creat() rename()</p>
    <p>creat() link() creat()</p>
    <p>write()</p>
    <p>creat() creat()</p>
    <p>link() link() link()</p>
    <p>creat()</p>
    <p>link() rename()</p>
    <p>link() write()</p>
    <p>rename() rename()</p>
    <p>rename() creat()</p>
    <p>rename() link()</p>
    <p>rename() write()</p>
    <p>write() write()</p>
    <p>write() creat()</p>
    <p>write() link()</p>
    <p>write() rename()</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations</p>
    <p>47</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations</p>
    <p>file or directory names  If data operations, pick a</p>
    <p>range of offset and length</p>
    <p>48</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations</p>
    <p>file or directory names  If data operations, pick a</p>
    <p>range of offset and length 1. creat(A/bar) 2. rename(B/bar, A/bar)</p>
    <p>49</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations</p>
    <p>Between each core operation, add a persistence operation</p>
    <p>Consistency will be checked at these points</p>
    <p>Parameter to the persistence function is again chosen from the file/ directory pool</p>
    <p>50</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations 2. Select Parameters</p>
    <p>Between each core operation, add a persistence operation</p>
    <p>Consistency will be checked at these points</p>
    <p>Parameter to the persistence function is again chosen from the file/ directory pool</p>
    <p>51</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations 2. Select Parameters</p>
    <p>ensure the workload executes on any POSIX compliant filesystem.</p>
    <p>52</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations 2. Select Parameters</p>
    <p>ensure the workload executes on any POSIX compliant filesystem.</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
  </div>
  <div class="page">
    <p>Phases of ACE 1. Select Operations 2. Select Parameters</p>
    <p>This workload with 2 core operations is the same</p>
    <p>workload required to trigger rename atomicity bug!</p>
    <p>54</p>
    <p>A</p>
    <p>B</p>
    <p>foo bar</p>
    <p>foo bar</p>
    <p>File Set</p>
    <p>mkdir(A) 1. creat(A/bar) fsync(A/bar) mkdir(B) creat(B/bar) 2. rename(B/bar, A/bar) creat(A/foo) fsync(A/foo) close(A/foo)</p>
  </div>
  <div class="page">
    <p>Challenges with Systematic Testing</p>
    <p>55</p>
    <p>ChallengesLack of automated</p>
    <p>infrastructure</p>
    <p>Infinite workload</p>
    <p>space</p>
    <p>CrashMonkey ACE</p>
    <p>Bounded Black-Box Testing</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Reproduced 24/26 known bugs across ext4, btrfs and F2FS</p>
    <p>Found 10 new bugs across btrfs and F2FS  Found 1 bug in a verified file system, FSCQ</p>
    <p>56</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>CrashMonkey  Bounded Black Box Crash Testing  Automatic Crash Explorer (ACE)  Demo</p>
    <p>57</p>
  </div>
  <div class="page">
    <p>Testing, specification, and verification</p>
    <p>58</p>
  </div>
  <div class="page">
    <p>Bounded Black-Box Crash Testing (Poster #4)</p>
    <p>Try our tools : https://github.com/utsaslab/crashmonkey59</p>
    <p>B3 makes exhaustive testing feasible using informed bound selection</p>
    <p>Easily generalizable to test larger workloads if more compute is available</p>
    <p>Found 10 new bugs across btrfs and F2FS, most of which existed since 2014</p>
    <p>Found 1 bug in FSCQ</p>
    <p>Thanks! Questions?</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
    <p>60</p>
  </div>
  <div class="page">
    <p>Demo</p>
    <p>61</p>
  </div>
  <div class="page">
    <p>Crash Consistency</p>
    <p>Filesystem operations change multiple blocks on storage that needs to be ordered  Inode, bitmaps, data blocks, superblock  Data and metadata must be consistent on a crash</p>
    <p>Metadata Corruption Data Corruption Unmountable FS</p>
    <p>Filesystem Unmountable!</p>
    <p>62</p>
  </div>
  <div class="page">
    <p>What just happened?</p>
    <p>A bar</p>
    <p>B bar</p>
    <p>A bar</p>
    <p>B</p>
    <p>Rename (B/bar, A/bar)</p>
    <p>63</p>
  </div>
  <div class="page">
    <p>What just happened?</p>
    <p>A bar</p>
    <p>B bar</p>
    <p>A bar</p>
    <p>B</p>
    <p>Rename (B/bar, A/bar)</p>
    <p>64</p>
  </div>
  <div class="page">
    <p>What just happened?</p>
    <p>A</p>
    <p>B bar</p>
    <p>A bar</p>
    <p>B</p>
    <p>Rename (B/bar, A/bar)</p>
    <p>65</p>
  </div>
  <div class="page">
    <p>What just happened?</p>
    <p>A</p>
    <p>B bar</p>
    <p>A bar</p>
    <p>B</p>
    <p>Rename (B/bar, A/bar)</p>
    <p>66</p>
    <p>Must have been atomic</p>
    <p>mkdir (A) touch (A/bar) fsync (A/bar)</p>
    <p>mkdir (B) touch (B/bar)</p>
    <p>rename (B/bar, A/ bar)</p>
    <p>touch (A/foo) fsync (A/foo)</p>
    <p>CRASH!</p>
    <p>fsync(A/foo) commits tx that unlinks A/bar  Which means step 1 above is persisted, but rename is not</p>
    <p>persisted  End up losing file A/bar  Exists in the kernel since 2014</p>
  </div>
  <div class="page">
    <p>Study of crash consistency bugs in the wild</p>
    <p>Study the workload pattern and impacts of crash consistency bugs reported in the past 5 years  Kernel mailing lists  Crash consistency tests submitted to xfstests</p>
    <p>26 unique bugs across ext4, F2FS, and btrfs</p>
    <p>67</p>
  </div>
  <div class="page">
    <p>Study of crash consistency bugs in the wild</p>
    <p>68</p>
    <p>Consequence # bugs</p>
    <p>Corruption 17</p>
    <p>Data inconsistency 6</p>
    <p>Unmountable FS 3</p>
    <p>Total 26</p>
    <p>Filesystem # bugs</p>
    <p>Ext4 2</p>
    <p>F2FS 2</p>
    <p>btrfs 24</p>
    <p>Total 28</p>
    <p># ops # bugs</p>
    <p>Total 26</p>
  </div>
  <div class="page">
    <p>identified and patched  Usually involve reuse of files/ directories</p>
    <p>69</p>
    <p>Study of crash consistency bugs in the wild Consequence # bugs</p>
    <p>Corruption 17 Data inconsistency 6 Unmountable FS 3</p>
    <p>Total 26</p>
    <p>Filesystem # bugs Ext4 2 F2FS 2 btrfs 24 Total 28</p>
    <p># ops # bugs 1 3 2 14 3 9</p>
    <p>Total 26</p>
  </div>
  <div class="page">
    <p>2-3 core operations on a new, empty file-system</p>
    <p>70</p>
    <p>Study of crash consistency bugs in the wild Consequence # bugs</p>
    <p>Corruption 17 Data inconsistency 6 Unmountable FS 3</p>
    <p>Total 26</p>
    <p>Filesystem # bugs Ext4 2 F2FS 2 btrfs 24 Total 28</p>
    <p># ops # bugs 1 3 2 14 3 9</p>
    <p>Total 26</p>
  </div>
  <div class="page">
    <p>Sufficient to crash after a call to fsync(), fdatasync(), or sync()</p>
    <p>71</p>
    <p>Study of crash consistency bugs in the wild Consequence # bugs</p>
    <p>Corruption 17 Data inconsistency 6 Unmountable FS 3</p>
    <p>Total 26</p>
    <p>Filesystem # bugs Ext4 2 F2FS 2 btrfs 24 Total 28</p>
    <p># ops # bugs 1 3 2 14 3 9</p>
    <p>Total 26</p>
  </div>
  <div class="page">
    <p>72</p>
    <p>Study of crash consistency bugs in the wild Consequence # bugs</p>
    <p>Corruption 17 Data inconsistency 6 Unmountable FS 3</p>
    <p>Total 26</p>
    <p>Filesystem # bugs Ext4 2 F2FS 2 btrfs 24 Total 28</p>
    <p># ops # bugs 1 3 2 14 3 9</p>
    <p>Total 26</p>
  </div>
  <div class="page">
    <p>73</p>
    <p>Study of crash consistency bugs in the wild Consequence # bugs</p>
    <p>Corruption 17 Data inconsistency 6 Unmountable FS 3</p>
    <p>Total 26</p>
    <p>Filesystem # bugs Ext4 2 F2FS 2 btrfs 24 Total 28</p>
    <p># ops # bugs 1 3 2 14 3 9</p>
    <p>Total 26</p>
    <p>Fallocate : punch_hole : 2015</p>
    <p>Fallocate : zero_range : 2018</p>
  </div>
  <div class="page">
    <p>CrashMonkey Internals</p>
    <p>74</p>
    <p>Workload</p>
    <p>Filesystem</p>
    <p>Generic Block Layer</p>
    <p>Device Wrapper</p>
    <p>Custom RAM Block Device</p>
    <p>Test harness</p>
    <p>Crash State 1</p>
    <p>Crash State 2User space</p>
    <p>Kernel space</p>
    <p>Records write IO requests and barriers (flush/FUA) in the workload  Records special checkpoint IO to mark persistence points</p>
    <p>in the workload  Fast writeable snapshot capability</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>Start running the workload which would be decomposed by Block Layer as shown. Track files and dir being persisted</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Profiling</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Device wrapper records the block IOs</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Profiling</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Device wrapper records the block IOs and sends down to the CoW RAM device</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Profiling</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Pull the logged IOs</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Profiling</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Logged IOs pulled to the user space</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Profiling</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Oracle</p>
    <p>Safely unmount the CoW RAM device to create a test oracle</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Profiling</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Oracle</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Replay</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Oracle</p>
    <p>Replay the IOs upto Checkpoint</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Replay</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Oracle</p>
    <p>Replay the IOs upto Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>CrashMonkey in Action : Testing</p>
    <p>Device Wrapper</p>
    <p>Workload</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint Data Data Metadata Flush Checkpoint</p>
    <p>Snapshot</p>
    <p>Harness</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>Oracle</p>
    <p>Test consistency for the list of open files  fd=13</p>
    <p>MetadataData Flush Checkpoint</p>
    <p>fd Path</p>
  </div>
  <div class="page">
    <p>Testing Strategy to find new bugs  We test seq-1, seq-2 workloads on all filesystems : ext4, xfs,</p>
    <p>f2fs, btrfs  We run all other workloads on btrfs and F2FS first.</p>
    <p>For every workload that generated a bug, we run it on all other FS</p>
    <p>To run all workloads upto seq-3, you need to dedicate 2 days of compute per filesystem with (testing in parallel on 780 VM)</p>
    <p>85</p>
  </div>
  <div class="page">
    <p>Results at a glance</p>
    <p>86</p>
    <p>Sequence Length # workloads # Bugs Reproduced # Bugs found</p>
    <p>Seq-1</p>
    <p>Seq-2</p>
    <p>Seq-3 metadata</p>
    <p>Seq-3 data</p>
    <p>Seq-3 nested</p>
    <p>Total</p>
    <p>25 million workloads  Needs 15 days of testing on 780 VMs in parallel!</p>
  </div>
  <div class="page">
    <p>Results at a glance</p>
    <p>87</p>
    <p>Sequence Length # workloads # Bugs Reproduced # Bugs found</p>
    <p>Seq-1 300 3 3</p>
    <p>Seq-2 254K 14 3</p>
    <p>Seq-3 metadata 120K 5 2</p>
    <p>Seq-3 data 1.5M 2 0</p>
    <p>Seq-3 nested 1.5M 2 2</p>
    <p>Total 3.37M 26 10</p>
  </div>
</Presentation>
