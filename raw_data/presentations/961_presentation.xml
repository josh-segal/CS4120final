<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hardware-Assisted On-Demand Hypervisor Activation for Efficient Security Critical Code Execution on Mobile Devices</p>
    <p>Yeongpil Cho1 Junbum Shin2, Donghyun Kwon1, MyungJoo Ham22, Yuna Kim2, Yunheung Paek1</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Security Critical Code (SCC)</p>
    <p>Applications holds some sensitive data  Personal information  cryptographic key</p>
    <p>Privilege separation  Applications are divided into SCCs and the remainder  Only SCCs handle sensitive data</p>
    <p>How can we protect SCCs even if the OS is compromised?  We need Trusted Computing Environment (TEE)</p>
    <p>How can we build a TEE on mobile devices?  We can rely on ARM TrustZone, as our first choice</p>
    <p>application</p>
    <p>main part</p>
    <p>SCC</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>ARM TrustZone</p>
    <p>Separates system resources into  Normal world (less privileged)  Secure world (more privileged) - secure world processor mode - TZASC  DRAM</p>
    <p>- TZPC  Peripherals</p>
    <p>- TZMA  SRAM</p>
    <p>CORE CORE CORE</p>
    <p>User Mode</p>
    <p>Normal World (NS:1) Secure World (NS:0)</p>
    <p>User Mode</p>
    <p>Kernel Mode Kernel Mode</p>
    <p>Monitor Mode</p>
    <p>Hyp Mode</p>
    <p>AXI bus</p>
    <p>TZMATZASC AXI-to-APB</p>
    <p>TZPC peripherals</p>
    <p>SRAMDRAM</p>
    <p>TrustZone components</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Limitation of TrustZone</p>
    <p>TrustZone is the Trusted Computing Base of the entire System</p>
    <p>Only authorized applications are permitted to run in the existing TEE of TrustZone  Vendors applications  OEM applications</p>
    <p>Smartphone Vendors reluctant to open the TEE of TrustZone to 3rd-party developers</p>
    <p>Malicious Applications</p>
    <p>Operating System</p>
    <p>Malicious SCCs</p>
    <p>Trusted OS of TrustZone</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Alternative Approach: -Hypervisor</p>
    <p>A number of TEEs based on -Hypervisor  AppSec, VEE 2015  MiniBox, ATC 2014  InkTag, ASPLOS 2013  TrustVisor, S&amp;P 2010</p>
    <p>Drawback of hypervisor-based approaches  a waste of computation power by the complicated address translation - relatively high TLB miss penalty</p>
    <p>ref: Agile Paging: Exceeding the Best of Nested and Shadow Paging , ISCA 2016</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Our Objectives and Solutions</p>
    <p>We want to provide secure execution environments for 3rd-party developers  TrustZone-Hypervisor Hybrid Approach</p>
    <p>We want to minimize the performance impact  Dynamic Hypervisor Activation Scheme</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Our Solution 1: Hybrid Approach</p>
    <p>Bimodal TEEs  The existing TEE of TrustZone - for vendor and OEM applications</p>
    <p>Alternative TEE based on -hypervisor - for 3rd-party developers and their SCCs</p>
    <p>Alternative TEE might be compromised by malicious SCCs  But, we can prevent the damage from spreading to the secure world</p>
    <p>App App</p>
    <p>OS</p>
    <p>-hypervisor</p>
    <p>TEE for 3rd-party</p>
    <p>SCC</p>
    <p>TEE for vendor and OEM</p>
    <p>OEM App</p>
    <p>TrustZone OS</p>
    <p>normal world secure world</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Our Solution 2: Dynamic Activation Scheme</p>
    <p>We use -hypervisor to build a TEE To minimize the performance overhead, we activate the -hypervisor only when it is needed  an SCC account for a small fraction of the entire application</p>
    <p>App App</p>
    <p>OS</p>
    <p>App App</p>
    <p>OS</p>
    <p>-hypervisor</p>
    <p>Deactivated software protection</p>
    <p>Activated software protection</p>
    <p>SCC</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Our Solution 2: Dynamic Activation Scheme</p>
    <p>Our strategy for protecting sensitive states of -hypervisor and SCCs  while the -hypervisor is activated - by using the -hypervisor</p>
    <p>while the -hypervisor is deactivated - by covering with the secure world</p>
    <p>App</p>
    <p>OS</p>
    <p>-hypervisor</p>
    <p>TEE</p>
    <p>SCC</p>
    <p>TEE</p>
    <p>App</p>
    <p>TrustZo ne OS</p>
    <p>normal world secure world</p>
    <p>Activated software protection</p>
    <p>Deactivated software protection</p>
    <p>App</p>
    <p>OS</p>
    <p>-hypervisor</p>
    <p>TEE</p>
    <p>SCC</p>
    <p>TEE</p>
    <p>App</p>
    <p>TrustZo ne OS</p>
    <p>normal world secure world</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>On-demand Software Protection (OSP)</p>
    <p>Overall architecture</p>
    <p>Legacy OS</p>
    <p>OSP Hypervisor</p>
    <p>SCC</p>
    <p>P ri vi</p>
    <p>le g ed</p>
    <p>L ev</p>
    <p>el</p>
    <p>Address Space</p>
    <p>App</p>
    <p>Trampoline</p>
    <p>TrustZone</p>
    <p>Legacy TZ Software</p>
    <p>OSP Core</p>
    <p>OSP Guard</p>
    <p>Normal World OSP World Secure World</p>
    <p>Trusted Computing BaseCodes for OSP</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Components</p>
    <p>Secure world components  OSP Core - initializes and controls OSP hypervisor and TrustZone components</p>
    <p>OSP Guard - a set of cryptographic functions and key management functions</p>
    <p>OSP world component  OSP Hypervisor - provides secure execution environments for SCCs</p>
    <p>Normal world component  Trampoline - provides applications with the interface that can communicate with OSP</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Application Development  A developer develops and uses an SCC like an external library  An SCC will be distributed after being encrypted with the PK_osp</p>
    <p>Protection of an SCC</p>
    <p>Developer</p>
    <p>App SCC</p>
    <p>User</p>
    <p>Norma World</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Execution of an SCC  Under the protection of OSP hypervisor, an SCC is decrypted</p>
    <p>and executed according to the lifecycle model of SCC</p>
    <p>Protection of an SCC</p>
    <p>Developer</p>
    <p>App SCC</p>
    <p>User</p>
    <p>Norma World OSP World</p>
    <p>OSP Hypervisor</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Deactivation of OSP hypervisor  if there is no SCC running in the OSP hypervisor, the hypervisor is</p>
    <p>deactivated and is protected by being included into the secure world</p>
    <p>Protection of an SCC</p>
    <p>Developer User</p>
    <p>Norma World OSP World</p>
    <p>Secure World</p>
    <p>App SCC</p>
    <p>OSP Hypervisor</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Programming Interfaces of an SCC</p>
    <p>OSP follows the SCC lifecycle model of TrustVisor Management and Service Interfaces</p>
    <p>Function Name Parameter Call-site Description Management interfaces</p>
    <p>SCC_register scc_file_name, ptr_external_handler app Registers an SCC with a specification. Upon success, returns the SCCs number.</p>
    <p>SCC_unregister scc_num app Unregisters an SCC.</p>
    <p>SCC_parameter_add ptr_scc_param_spec, param_flag, ptr_param, length</p>
    <p>app Add a parameter to a parameter specification.</p>
    <p>SCC_invoke scc_num, entry_func, ptr_scc_param_spec, arg0arg3 app Invokes an SCC with a parameter specification. Upon finish, returns a return value.</p>
    <p>SCC_ret_to_scc scc_num, return_value app Return to an SCC with a return value</p>
    <p>Service interfaces</p>
    <p>OSP_save ptr_data, length SCC Save data on secure storage. Upon success, returns the storage number.</p>
    <p>OSP_load storage_num, ptr_buffer, length SCC Loads the data for a storage number.</p>
    <p>OSP_delete storage_num SCC Deletes the data for a storage number.</p>
    <p>OSP_encrypt ptr_data, ptr_buffer, length SCC Encrypt data</p>
    <p>OSP_decrypt ptr_data, ptr_buffer, length SCC Decrypt data</p>
    <p>OSP_signing ptr_data, length, private_key, signature SCC Sign data with a given private key</p>
    <p>OSP_verification ptr_data, length, public_key, signature SCC Verify data with a given public key</p>
    <p>OSP_external_handler cmd, arg0arg3 SCC Call the external handler with parameters. Upon finish, returns a return value</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Interface to an SCC</p>
    <p>ARM instructions to cross over the privilege boundaries</p>
    <p>For interfacing, Trampoline, in the kernel, needs to execute  when the OSP hypervisor is activated  HVC instruction  when the OSP hypervisor is deactivated  SMC instruction - OSP core in the secure world will activate the OSP hypervisor</p>
    <p>But OSP only uses the SMC to construct the unified interface  when the OSP hypervisor is activated  SMC instruction - set TSC-bit of HCR to make the SMC instruction be trapped into the hyp mode</p>
    <p>when the OSP hypervisor is deactivated  SMC instruction</p>
    <p>user mode</p>
    <p>kernel mode</p>
    <p>hyp mode mon mode</p>
    <p>SVC</p>
    <p>HVC</p>
    <p>kernel mode</p>
    <p>user mode</p>
    <p>normal world secure world</p>
    <p>SVC</p>
    <p>SMC</p>
    <p>SMC</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Interface to an SCC</p>
    <p>smc #1</p>
    <p>Trampoline in the kernel OSP core in the secure world</p>
    <p>is it for TrustZone?</p>
    <p>Y</p>
    <p>N</p>
    <p>Route the command to the existing TEE of TrustZone</p>
    <p>is the OSP hyp activated?</p>
    <p>Route the command to the alternative TEE of OSP</p>
    <p>Y</p>
    <p>N</p>
    <p>Activate the OSP hypervisor &amp;</p>
    <p>Set the SMC trap configuration</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Interface to an SCC</p>
    <p>smc #1</p>
    <p>Trampoline in the kernel OSP hypervisor in the OSP world</p>
    <p>is it for TrustZone?</p>
    <p>Y</p>
    <p>N</p>
    <p>Route the command to the existing TEE of TrustZone</p>
    <p>Route the command to the alternative TEE of OSP</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Protection of OSP World</p>
    <p>OSP uses bimodal protection schemes based on two hardware features  TZASC of TrustZone  extended paging of the OSP hypervisor</p>
    <p>It depends on the number of SCCs running in the OSP world concurrently</p>
    <p>Initialize OSP Hyp.</p>
    <p>OSP Hyp. (off)</p>
    <p>OSP Hyp. (on)</p>
    <p>COUNT (SCC) =&lt; 0</p>
    <p>COUNT (SCC) &gt; 0</p>
    <p>Normal World</p>
    <p>Secure World</p>
    <p>OSP World</p>
    <p>TZASC</p>
    <p>Normal World</p>
    <p>Secure World</p>
    <p>OSP World</p>
    <p>OSP Hypervisor</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Multi-core Support</p>
    <p>In a multi-core environment  Each core has its own MMU supporting extended paging  Every core shares one TZASC, which is located in between AXI bus</p>
    <p>and DRAM</p>
    <p>Synchronization Problem  ex) when a core activates the OSP hyp, if another doesnt activate that</p>
    <p>core 0 core 1 core 2 core 3</p>
    <p>secure IPIActivate OSP Hyp &amp; run SCC</p>
    <p>Activate OSP Hyp Activate OSP Hyp Activate OSP Hyp</p>
    <p>Deactivate OSP Hyp &amp; terminate SCC</p>
    <p>Deactivate OSP Hyp</p>
    <p>secure IPI</p>
    <p>Deactivate OSP Hyp Deactivate OSP Hyp</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Dynamic activation routine</p>
    <p>OSP core, in the secure world, can  control the extended paging by using privileged instructions  control TZASC by using memory-mapped registers</p>
    <p>To prevent sensitive data of the OSP world from being disclosed by cache-poisoning attack  cache entries corresponding to the memory region of the OSP world</p>
    <p>should be cleaned and invalidated</p>
    <p>Procedure ACTIVATE_OSP_HYP Enable the extended paging Send secure IPIs to other cores to enable the extended paging, too Reduce the secure world to reveal the OSP world using TZASC</p>
    <p>End</p>
    <p>Procedure DEACTIVATE_OSP_HYP Expand the secure world to cover the OSP world using TZASC Clean and invalidate cache entries of the OSP world Disable the extended paging Send secure IPIs to other cores to disable the extended paging, too</p>
    <p>End</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Implementation</p>
    <p>ODROID-XU3-LITE  exynos 5422 - Cortex A15 1.8GHz quad core - Cortex A7 1.3GHz quad core</p>
    <p>2 GB RAM</p>
    <p>OS  Android 4.4.2 with Linux Kernel 3.10</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Boot-up sequence</p>
    <p>The OSP core gets control before the kernel starting</p>
    <p>The OSP core must be executed in the secure world  replaces the last instruction of the u-boot to a specific smc instruction  modifies the smc handler of tzsw to transfer control to the OSP core</p>
    <p>in the secure world</p>
    <p>Top 128 MBytes are allocated for OSP</p>
    <p>Disables bigLITTLE feature  OSP only utilizes four big cores</p>
    <p>bl1</p>
    <p>bl2</p>
    <p>u-boot</p>
    <p>Init. OSP Hyp</p>
    <p>Secure World</p>
    <p>Init. TZASC and GIC</p>
    <p>Wake up the other cores kernel</p>
    <p>Idle Deactivate OSP Hyp</p>
    <p>Init. TrustZone</p>
    <p>OSP World</p>
    <p>Kernel  1920 MB OSP  128 MB</p>
    <p>tzsw</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>OSP Boot-logs</p>
    <p>u-boot</p>
    <p>the OSP core</p>
    <p>kernel</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>SCC running-log</p>
    <p>SCC registration</p>
    <p>SCC invocation</p>
    <p>SCC unregistration</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Evaluation</p>
    <p>List Cycles Time (at 1.8 GHz)</p>
    <p>Overall 127,453 70.81 us</p>
    <p>Control transfer between the OSP core and the kernel 1,990 1.11 us</p>
    <p>Synchronization of the activation state of the OSP hypervisor in the multi-core environment</p>
    <p>Cache clean &amp; invalidation 31,450 17.47 us</p>
    <p>Verification of page tables of the System MMU 68,329 37.96 us</p>
  </div>
  <div class="page">
    <p>SoC Optimization &amp; Restructuring Laboratory</p>
    <p>Evaluation</p>
    <p>Benchmark Performance Overhead</p>
    <p>Energy Overhead</p>
    <p>Deactivation Activation Deactivation Activation</p>
    <p>CF-bench 1 % 3 % 1 % 4 %</p>
    <p>AnTuTu 0 % 2 % 0 % 3 %</p>
    <p>Vellamo-Browser 1 % 11 % 0 % 4 %</p>
    <p>Vellamo-Machine -1 % 5 % 0 % 4 %</p>
    <p>BaseMark 1 % 4 % -1 % 4 %</p>
    <p>Geekbench 0 % 2 % 0 % 2 %</p>
    <p>iozone-write 0 % 3 % 0 % 8 %</p>
    <p>GFXbench-Frames 1 % 13 % -1 % 4 %</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Evaluation</p>
    <p>(ID/PW) Autocomplete function of Chromium browser  encrypting ID and password with a SCC  baseline: Running same code without OSP</p>
    <p>Results  loading time for m.facebook.com - average: 995.7 ms - stddev: 71.6 ms</p>
    <p>execution time of the SCC doesnt affect the loading time at all - average: 0.101 ms - very smaller than the stddev of the loading time</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Evaluation</p>
    <p>File encryption applications  Performs file encryption in the SCC  baseline: Running same code without a hypervisor</p>
    <p>Results  A number of SCC invocations (causing dynamic activation) increases</p>
    <p>the performance overhead  Dynamic activation of a hypervisor may improve performance</p>
    <p>when the hypervisor incurs a considerable performance penalty</p>
    <p>hyp_dyn-4KB hyp_dyn-64KB hyp_on-4KB hyp_on-64KB</p>
  </div>
  <div class="page">
    <p>SoC Optimizations &amp; Restructuring</p>
    <p>Summary</p>
    <p>How can we provide public developers SCCs with secure execution environments?  ARM TrustZone? - Technically possible - but, malicious SCC may compromise TrustZone, the TCB of the entire system</p>
    <p>OSP  Hypervisor-based alternative TEE for public application developers  Performance optimization - On-demand activation of the hypervisor - Protection of the intermediate states of the hypervisor and SCCs using TrustZone</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
