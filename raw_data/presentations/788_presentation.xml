<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Clark Taylor and Christian Collberg Department of Computer Science,</p>
    <p>University of Arizona</p>
  </div>
  <div class="page">
    <p>Why Teach Reverse Engineering?</p>
    <p>Maintaining old code  Not related to security or obfuscation</p>
  </div>
  <div class="page">
    <p>Why Teach Reverse Engineering?</p>
    <p>Dissecting malicious code</p>
    <p>Malicious Program</p>
    <p>Tools</p>
    <p>Identifiers</p>
    <p>Behavior</p>
    <p>Attribution?</p>
  </div>
  <div class="page">
    <p>Why Teach Reverse Engineering?</p>
    <p>Analyzing reverse engineering vulnerabilities</p>
    <p>Protected Program</p>
    <p>Tools</p>
    <p>Difficulty Level</p>
    <p>Behavior</p>
  </div>
  <div class="page">
    <p>Why Teach Reverse Engineering?</p>
    <p>Understanding obfuscation methods</p>
    <p>Obfuscated Program</p>
    <p>Tools</p>
    <p>Obfuscation Patterns</p>
  </div>
  <div class="page">
    <p>Why Teach Reverse Engineering?</p>
    <p>Analyze and counter malware threats  Protect software assets from man-at-the-end (MATE) attacks</p>
    <p>Contribute to the field  Malicious uses?</p>
  </div>
  <div class="page">
    <p>The Problem</p>
    <p>Generating and administering unique reverse engineering exercises is difficult</p>
    <p>For each student: 1. Generate problem 2. Obfuscate problem 3. Send problems 4. Grade problems</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>Generation</p>
    <p>Alice generates a problem for each student</p>
    <p>Obfuscate</p>
    <p>P P</p>
    <p>Generate Program</p>
    <p>Asset</p>
  </div>
  <div class="page">
    <p>Distribution</p>
    <p>Alice sends the problems to the students</p>
    <p>P0</p>
    <p>P1 P2 P3</p>
  </div>
  <div class="page">
    <p>Grading</p>
    <p>Students submit answers to Alice</p>
    <p>A0 A1 A2</p>
    <p>A3</p>
  </div>
  <div class="page">
    <p>The Problem</p>
    <p>Generating and administering unique reverse engineering exercises is difficult</p>
  </div>
  <div class="page">
    <p>Student Environment Setup</p>
    <p>Students have problems getting started</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
    <p>Automate exercise generation, with randomization</p>
    <p>Automate exercise administration  Automate environment setup</p>
    <p>Automation, automation, automation</p>
  </div>
  <div class="page">
    <p>Desired Functionality 1. Administrative functions 2. Challenge generation</p>
    <p>Automated, random code generation  Automated, random code obfuscation</p>
  </div>
  <div class="page">
    <p>Implementation Strategy</p>
    <p>Web application  Easy for students to use  Few dependencies; no client setup  Accessible on the internet</p>
    <p>Student terminals  Preconfigured environment  Virtual or physical/device</p>
  </div>
  <div class="page">
    <p>System Usage</p>
    <p>Create Challenge Tigress commands</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>System Usage</p>
    <p>Download Environment Configured virtual machine</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>System Usage</p>
    <p>Download Challenge Obfuscated file (P)</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>System Usage</p>
    <p>Upload Answer Reverse engineered file (Pa)</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>System Usage</p>
    <p>Download Answers Original files (P) Answer files (Pa)</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>System Usage</p>
    <p>Upload Grades Grades</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Obfuscation</p>
    <p>Tigress  Operates on C language  Source-to-source obfuscator  Numerous transforms  Randomization built in  Includes code generation components</p>
    <p>Gcc compiler</p>
  </div>
  <div class="page">
    <p>Tigress Obfuscation Examples Tigress</p>
    <p>P</p>
    <p>Tigress</p>
    <p>P</p>
    <p>Build program with assets</p>
    <p>Obfuscate program</p>
  </div>
  <div class="page">
    <p>Tigress Obfuscation Examples Tigress</p>
    <p>P</p>
    <p>Tigress</p>
    <p>P</p>
    <p>#include stdio.h&gt; #include stdlib.h&gt; void SECRET(unsigned long input[1] , unsigned long output[1] ) { ... } int main(int argc, char** argv) { {</p>
    <p>unsigned long input[1] ; unsigned long output[1] ; int i5 ; unsigned long value6 ; int i7 ; } i5 = 0; while (i5 &lt; 1) {</p>
    <p>value6 = strtoul(argv[i5 + 1], 0, 10); input[i5] = value6; i5 ++;</p>
    <p>} SECRET(input, output); i7 = 0; while (i7 &lt; 1) {</p>
    <p>printf(&quot;%lu\n&quot;, output[i7]); i7 ++;</p>
    <p>} }</p>
  </div>
  <div class="page">
    <p>Tigress Obfuscation Examples Tigress</p>
    <p>P</p>
    <p>Tigress</p>
    <p>P</p>
    <p>void SECRET(unsigned long i[1] , unsigned long o[1] ) { unsigned long s[4] ;</p>
    <p>s[0UL] = i[0UL] + 762537946UL; s[1UL] = i[0UL] | ((16601096UL &lt;&lt; (s[0UL] % 16UL | 1UL)) |</p>
    <p>(16601096UL &gt;&gt; (64 - (s[0UL] % 16UL | 1UL)))); s[2UL] = (i[0UL] ^ 643136481UL) ^ (s[0UL] + 292656718UL); s[3UL] = (i[0UL] &lt;&lt; (((s[1UL] &gt;&gt; 4UL) &amp; 15UL) | 1UL)) |</p>
    <p>(i[0UL] &gt;&gt; (64 - (((s[1UL] &gt;&gt; 4UL) &amp; 15UL) | 1UL)));</p>
    <p>unsigned long l = 0UL; while (l &lt; 3UL) { s[1UL] |= (s[2UL] &amp; 15UL) &lt;&lt; 3UL; s[l + 1UL] = s[l]; l += 2UL;</p>
    <p>} if ((s[0UL] | s[1UL]) &gt; (s[2UL] | s[3UL])) { s[3UL] |= (s[1UL] &amp; 31UL) &lt;&lt; 3UL;</p>
    <p>} else { s[2UL] = s[0UL]; s[3UL] |= (s[2UL] &amp; 15UL) &lt;&lt; 3UL;</p>
    <p>} s[0UL] = s[2UL];</p>
    <p>o[0UL] = (s[0UL] &lt;&lt; (s[1UL] % 8UL | 1UL)) &lt;&lt; ((((s[2UL] &lt;&lt; (s[3UL] % 8UL | 1UL)) &gt;&gt; 1UL) &amp; 7UL) | 1UL);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Deployment</p>
    <p>System used for a ~35 student course  Configured for two binary challenges  Students answered several additional questions:  What was the level of difficulty?  How long did it take to solve the problem?</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Students were able to use the system and solve the easier problem</p>
  </div>
  <div class="page">
    <p>Future Work  Dynamic environments</p>
    <p>Docker  Provisioner</p>
    <p>Automated grading  Simple token grading  Input/output cases  Natural language processing  Code entropy</p>
    <p>Data collection  Syslog ng  Splunk  Custom built solutions</p>
    <p>Visualization</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Reverse engineering is a valuable skill  Teaching that skill typically involves a lot of overhead</p>
    <p>Integrating Tigress with a webapp allowed us to easily generate and administer randomized exercises</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
