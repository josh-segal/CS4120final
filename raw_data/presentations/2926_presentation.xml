<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>OSDI 2012</p>
    <p>DJoin: Differentially Private Join Queries over Distributed Databases</p>
    <p>Arjun Narayan Andreas Haeberlen</p>
    <p>University of Pennsylvania</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Motivation</p>
    <p>Doris Elbonia</p>
    <p>Hank Elbonia</p>
    <p>Emil Vegas</p>
    <p>Bob Paris</p>
    <p>... ...</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>... ...</p>
    <p>Airlines Doctors</p>
    <p>Researcher</p>
    <p>Is there a Malaria epidemic in Elbonia?</p>
    <p>What could we do with all this data?</p>
    <p>PRIVATE</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Differential Privacy</p>
    <p>Doris Elbonia</p>
    <p>Hank Elbonia</p>
    <p>Emil Vegas</p>
    <p>Bob Paris</p>
    <p>... ...</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>... ...</p>
    <p>Offers strong, provable privacy guarantees:  By giving an upper bound on what an adversary can learn  While still allowing us to answer queries safely</p>
    <p>There are existing implementations:  PINQ [Sigmod 2009], Airavat [NSDI 2010], ...</p>
    <p>Q: How many people went to Elbonia and</p>
    <p>had Malaria?</p>
    <p>About 302</p>
    <p>Differentially Private Query Processor</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>What doesnt work</p>
    <p>Idea 3: Use PDDP [NSDI 2012]</p>
    <p>What if we dont have a trusted party?</p>
    <p>It will take years. Handles only certain types of queries, not</p>
    <p>including JOINs</p>
    <p>Idea 2: Use Secure Multiparty Computation</p>
    <p>(SMC)</p>
    <p>Doris Elbonia</p>
    <p>Hank Elbonia</p>
    <p>Emil Vegas</p>
    <p>Bob Paris</p>
    <p>... ...</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>... ...</p>
    <p>Trusty Tim</p>
    <p>Researcher</p>
    <p>Idea 1: Give all the data to a trusted party</p>
    <p>Bob Paris Greg HIV Feste Cancer</p>
    <p>Doris Elbonia Hank Elbonia Emil Vegas</p>
    <p>PDDP</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Queries with Joins</p>
    <p>Doris Elbonia</p>
    <p>Hank Elbonia</p>
    <p>Emil Vegas</p>
    <p>Bob Paris</p>
    <p>Charlie Elbonia</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>Alice Malaria</p>
    <p>Doris</p>
    <p>Hank</p>
    <p>Charlie</p>
    <p>Doris</p>
    <p>Hank</p>
    <p>Alice</p>
    <p>Doris</p>
    <p>Hank</p>
    <p>Who went to Elbonia? Who had Malaria? 2</p>
    <p>Challenge: How can we support Joins?  Key Insight: Not all joins are full cross products.</p>
    <p>Morally this query is a set intersection.</p>
    <p>There are partial solutions, e.g. (Freedman et al, Eurocrypt 2004)  Their algorithm is not differentially private, but we can extend it.</p>
    <p>SELECT COUNT(X) FROM HOSPITAL JOIN AIRLINE WHERE Destination= Elbonia AND Diagnosis = Malaria</p>
    <p>JOIN</p>
    <p>Doris</p>
    <p>Hank</p>
    <p>Charlie</p>
    <p>Doris</p>
    <p>Hank</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Overview: DJoin</p>
    <p>Rewrites JOIN queries into Set Intersections where possible.</p>
    <p>Executes a distributed private set intersection protocol.  Gives us differential privacy guarantees for each party:</p>
    <p>Query Query</p>
    <p>Resu lt</p>
    <p>Privacy Barriers</p>
    <p>Doris Elbonia</p>
    <p>Hank Elbonia</p>
    <p>Emil Vegas</p>
    <p>Bob Paris</p>
    <p>Charlie Elbonia</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>Alice Malaria</p>
    <p>Result</p>
    <p>We can now make use of our data!  With respect to all other participants.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation: Distributed queries over private data  Background</p>
    <p>Differential privacy  Private Set Intersection Cardinality (PSI-CA) algorithm</p>
    <p>The DJoin System  Making the BN-PSI-CA algorithm differentially private  Denoise-Combine-Renoise  Query Rewriting</p>
    <p>Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Background: Differential Privacy</p>
    <p>Typically answers queries about aggregates.</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>Alice Malaria</p>
    <p>How many people have Malaria?</p>
    <p>But to protect privacy, we need more...</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Background: Differential Privacy</p>
    <p>Suppose our researchers credentials have been stolen.  And the thief has certain outside information.</p>
    <p>We need guarantees even when the querier has outside information!</p>
    <p>I know that 2 other people have Malaria, but what about Hank?</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>Alice Malaria</p>
    <p>How many people have Malaria?3</p>
    <p>Aha! Thats Hank</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Background: Differential Privacy</p>
    <p>We need guarantees even when the querier has outside information.</p>
    <p>I know that 2 other people have Malaria, but what about Hank?</p>
    <p>Solution: Differential Privacy adds noise to the answer.  Effect: Bounds how much more certain the adversary can be.</p>
    <p>Noise</p>
    <p>Bob Cancer</p>
    <p>Doris Malaria</p>
    <p>Hank Malaria</p>
    <p>Greg HIV</p>
    <p>Alice Malaria</p>
    <p>How many people have Malaria?</p>
    <p>Hmm...</p>
    <p>Lots of mathematical detail omitted.  Dwork [ICALP 2006]</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Protocol from Freedman et al [Eurocrypt 2004]  The airline have two sets A and B and want to jointly compute |A  B|.  The airline makes a polynomial P whose roots are the elements of A.  The airline encrypts the coefficients of P and sends them to the doctor.  The doctor evaluates P(Bi) for each element in B.  The doctor returns the encrypted evaluations to the airline.  The airline decrypts it and counts the number of zeroes.</p>
    <p>PSI-CA without Differential Privacy</p>
    <p>(X-12)(X-5)(X-4)</p>
    <p>= x3 + 21x2 + 128x - 240</p>
    <p>{Enc(1), Enc(21), Enc(128), Enc(-240)}</p>
    <p>{Enc(152), Enc(0), Enc(6612), Enc(152)}</p>
    <p>={152, 0, 6612, 152}</p>
    <p>Result is 1</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Protocol from Freedman et al [Eurocrypt 2004]</p>
    <p>(X-12)(X-5)(X-4)</p>
    <p>= x3 + 21x2 + 128x - 240</p>
    <p>{Enc(1), Enc(21), Enc(128), Enc(-240)}</p>
    <p>{Enc(152), Enc(0), Enc(6612), Enc(152)}</p>
    <p>={152, 0, 6612, 152}</p>
    <p>This protocol is not differentially private because:  1. The first party learns the exact size of the intersection.  2. Both parties learn the exact size of the other database.</p>
    <p>Result is 1</p>
    <p>PSI-CA without Differential Privacy</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Challenge 1: The first party learns the exact size of the intersection.  Idea 1: Party 2 adds or removes some zeros to the result.</p>
    <p>Problem: We cannot remove zeros because they are encrypted.  Remember, differentially private noise is two sided: it could be negative.</p>
    <p>Solution: First add a fixed block of C zeroes.  Now add N noised zeroes, for a total of C-N if N is negative.</p>
    <p>BN-PSI-CA with Differential Privacy</p>
    <p>(X-12)(X-5)(X-4)</p>
    <p>= x3 + 21x2 + 128x - 240</p>
    <p>{Enc(1), Enc(21), Enc(128), Enc(-240)}</p>
    <p>{Enc(152), Enc(0), Enc(6612), Enc(152), Enc(0), Enc(0), Enc(242), Enc(125), Enc(525)}</p>
    <p>={152, 0, 6612, 152, 0, 0, 24, 125, 525}</p>
    <p>C = 5, N = 2</p>
    <p>Blinded result is 3</p>
  </div>
  <div class="page">
    <p>OSDI 2012 14</p>
    <p>BN-PSI-CA with Differential Privacy</p>
    <p>(X-12)(X-5)(X-4)(X-9125)(X-7255)</p>
    <p>= x5 - 36x4 + 497x3 + 3294x2 + 10512x - 12960</p>
    <p>{Enc(36), Enc(497), Enc(3294), Enc(10512), Enc(-12960)}</p>
    <p>{Enc(152), Enc(0), Enc(6612), Enc(152), Enc(0), Enc(0), Enc(242), Enc(125), Enc(525)}</p>
    <p>={152, 0, 6612, 152, 0, 0, 24, 125, 525}</p>
    <p>C = 5, N = 2</p>
    <p>Challenge 2: Both parties learn the exact size of the other database.  Idea 2: Party 1 adds some random elements to the set.</p>
    <p>This doesnt affect the result.  Similar to the solution to Challenge 1.</p>
    <p>Blinded result is 3</p>
  </div>
  <div class="page">
    <p>OSDI 2012 15</p>
    <p>Denoise-Combine-Renoise Some queries need more than one BN-PSI-CA e.g.,</p>
    <p>SELECT |X.a| FROM X,Y WHERE X.a=Y.a OR X.b=Y.b Need to compute |X.aY.a| + |X.bY.b| - |X.abY.ab|</p>
    <p>|X.aY.a| + |X.bY.b| + |X.abY.ab| + +</p>
    <p>Result of each BN-PSI-CA</p>
    <p>|X.aY.a| + |X.bY.b| + |X.abY.ab| +</p>
    <p>|X.aY.a| + |X.bY.b| - |X.abY.ab| +</p>
    <p>Done in Secure Multiparty Computation</p>
    <p>Denoise Combine Renoise</p>
    <p>= |X.aY.a| + |X.bY.b| - |X.abY.ab| +</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>The DJoin System</p>
    <p>We built a system called DJoin that uses BN-PSI-CA and DCR to answer queries.</p>
    <p>DJoin solves several other challenges:</p>
    <p>Privacy Budget: Prevents queriers from issuing too many queries.</p>
    <p>Sensivitity Analysis: Determines how much noise is necessary for a given query.</p>
    <p>Encoding: Translate JOINs that are not equivalent to a single set intersection.</p>
    <p>Database Management: Manages the local information on each node.</p>
    <p>Secure Execution: Protects against malicious queriers.</p>
    <p>Query Rewriting Convert SQL-like queries into set intersections.</p>
    <p>This talk</p>
    <p>In the paper</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>+</p>
    <p>Query Rewriting SELECT NOISY COUNT(A.ssn) FROM A,B WHERE</p>
    <p>(A.ssn=B.ssn OR A.id=B.id) AND A.diagnosis= malaria</p>
    <p>A B</p>
    <p>|  |</p>
    <p>|  | |  | |  |</p>
    <p>A B</p>
    <p>ssn,id ssn,idid idssn ssn</p>
    <p>We cant do this!</p>
    <p>Query execution with a centralized database.</p>
    <p>Differentially private query execution: with only local operations, set intersections and DCR.</p>
    <p>DCR</p>
    <p>BN-PSI-CA</p>
    <p>diag='malaria'</p>
    <p>Select pushed through the join</p>
    <p>A.ssn=B.ssn A.id=B.id</p>
    <p>A.diag='malaria'</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>When does rewriting work</p>
    <p>This works if the WHERE clause contains  arbitrary operations on local databases.  conjunctions and disjunctions of equalities across databases.  certain inequalities and numeric comparisons across databases.</p>
    <p>We have all rewrite rules in the paper.</p>
    <p>Some JOINS cannot be supported:  Some JOINs are not differentially private.  Others because we don't know how to efficiently</p>
    <p>encode them as set intersections (such as substrings across databases).</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation: Distributed queries over private data  Background</p>
    <p>Differential privacy  Private Set Intersection Cardinality (BN-PSI-CA) algorithm</p>
    <p>The DJoin System  Making the PSICA algorithm differentially private  Denoise-Combine-Renoise  Query Rewriting</p>
    <p>Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Evaluation</p>
    <p>How expressive are the queries?</p>
    <p>How long do queries take?</p>
    <p>How well does BN-PSI-CA scale with the size of the database?</p>
    <p>How many BN-PSI-CAs per query?</p>
    <p>How expensive is DCR?</p>
    <p>Can you parallelize the system?</p>
  </div>
  <div class="page">
    <p>OSDI 2012</p>
    <p>Experimental Setup</p>
    <p>We built a DJoin prototype using:  Five commodity machines with</p>
    <p>Xeon E5530 2.4Ghz, 12GB RAM, GBit ethernet</p>
    <p>mySQL local databases</p>
    <p>FairplayMP for Secure Multiparty Computation</p>
    <p>Paillier Cryptosystem</p>
    <p>BN-PSI-CA based on Freedman et al [Eurocrypt 2004], Kissner/Song [Crypto 2005]</p>
    <p>Optimizations to speed up runtime</p>
    <p>15,000 row databases using synthetic data</p>
  </div>
  <div class="page">
    <p>Performance of BN-PSI-CA</p>
    <p>C om</p>
    <p>pu ta</p>
    <p>ti on</p>
    <p>t im</p>
    <p>e (m</p>
    <p>in ut</p>
    <p>es )</p>
    <p>Number of elements in each party's set 5,000 10,000 15,000 20,000 25,000 30,000</p>
    <p>Almost Linear in database size: O(|S1|+|S2| ln ln |S1|).  Non trivial computational cost: not suitable for interactive use.  Suitable for offline analysis.  Parallelizable (3.98x speedup with 4 cores).</p>
  </div>
  <div class="page">
    <p>SQL-like syntax</p>
    <p>Example Queries</p>
    <p>Query BN-PSI-CAs</p>
    <p>=B.y) 2 3. SELECT NOISY COUNT(A.x) FROM A,B WHERE A.x=B.y AND</p>
    <p>(A.z=&quot;x&quot; OR B.p=&quot;y&quot;) 2</p>
    <p>AND A.w=B.w AND (B.y+B.z&gt;10) AND (A.y&gt;B.y) 8</p>
    <p>Number of set intersections depends on query complexity  Some operations (inequalities) are much more expensive</p>
    <p>Full SQL for local operations</p>
  </div>
  <div class="page">
    <p>Example Query Performance</p>
    <p>Q1 Q2 Q3 Q4 Q5</p>
    <p>C o m</p>
    <p>p le</p>
    <p>ti o n t im</p>
    <p>e (</p>
    <p>m in</p>
    <p>u te</p>
    <p>s )</p>
    <p>15,000 row databases take between 1 and 8 hours.</p>
    <p>Can be parallelized with more cores/machines.</p>
    <p>For comparison: A naive implementation in SMC takes 40 seconds for 8 rows and scales quadratically</p>
  </div>
  <div class="page">
    <p>Summary  DJoin: A differentially private query processor for</p>
    <p>distributed databases</p>
    <p>First practical system that supports JOINs (with some restrictions).</p>
    <p>Based on two novel primitives:  BN-PSI-CA: Blinded Private Set Intersection Cardinality  DCR: Denoise-Combine-Renoise</p>
    <p>Not fast enough for interactive use, but may be sufficient for offline data analysis.</p>
    <p>Visit our project webpage at http://privacy.cis.upenn.edu!</p>
  </div>
</Presentation>
