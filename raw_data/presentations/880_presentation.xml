<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Accountable Virtual Machines</p>
    <p>OSDI (October 4, 2010)</p>
    <p>Andreas Haeberlen University of Pennsylvania</p>
    <p>Paarijaat Aditya Rodrigo Rodrigues Peter Druschel Max Planck Institute for Software Systems (MPI</p>
    <p>SWS) Max Planck Institute</p>
    <p>for Software Systems</p>
  </div>
  <div class="page">
    <p>Scenario: Multiplayer game</p>
    <p>Alice decides to play a game of Counterstrike with Bob and Charlie</p>
    <p>Alice Bob</p>
    <p>Charli e</p>
    <p>Network</p>
    <p>I'd like to play</p>
    <p>a game</p>
  </div>
  <div class="page">
    <p>What Alice sees</p>
    <p>OSDI (October 4, 2010)</p>
    <p>Movie</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>Could Bob be cheating?</p>
    <p>In Counterstrike, ammunition is local state</p>
    <p>Bob can manipulate counter and prevent it from decrementing</p>
    <p>Such cheats (and many others) do exist, and are being used</p>
    <p>Charli e</p>
    <p>Network</p>
    <p>Alice Bob</p>
    <p>Ammo</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Cheating is a serious problem in itself  Multi-billion-dollar industry</p>
    <p>But we address a more general problem:  Alice relies on software that runs on a third-party</p>
    <p>machine  Examples: Competitive system (auction), federated</p>
    <p>system...  How does Alice know if the software running as</p>
    <p>intended?</p>
    <p>NetworkAlice Bob</p>
    <p>Software</p>
    <p>is not (just) about cheating!</p>
  </div>
  <div class="page">
    <p>Goal: Accountability</p>
    <p>We want Alice to be able to  Detect when the remote machine is faulty  Obtain evidence of the fault that would convince a</p>
    <p>third party</p>
    <p>Challenges:  Alice and Bob may not trust each other</p>
    <p>Possibility of intentional misbehavior (example: cheating)  Neither Alice nor Bob may understand how the</p>
    <p>software works  Binary only - no specification of the correct behavior</p>
    <p>NetworkAlice Bob</p>
    <p>Software</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem: Detecting faults on remote machines</p>
    <p>Example: Cheating in multiplayer games</p>
    <p>Solution: Accountable Virtual Machines</p>
    <p>Evaluation  Using earlier example (cheating in Counterstrike)</p>
    <p>Summary</p>
    <p>NEXT</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Bob runs Alice's software image in an AVM</p>
    <p>AVM maintains a log of network in-/outputs</p>
    <p>Alice can check this log with a reference image</p>
    <p>AVM correct: Reference image can produce same network outputs when started in same state and given same inputs</p>
    <p>AVM faulty: Otherwise</p>
    <p>Network</p>
    <p>Alice Bob</p>
    <p>Virtual machine image</p>
    <p>AVMM</p>
    <p>AVM</p>
    <p>Accountable Virtual</p>
    <p>Machine (AVM)</p>
    <p>Accountable Virtual</p>
    <p>Machine Monitor (AVMM)</p>
    <p>Log</p>
    <p>What if Bob</p>
    <p>manipulat es the log?</p>
    <p>Alice must trust her</p>
    <p>own reference</p>
    <p>image</p>
    <p>How can Alice find this execution, if it</p>
    <p>exists?</p>
  </div>
  <div class="page">
    <p>Firing</p>
    <p>Tamper-evident logging</p>
    <p>Message log is tamper-evident [SOSP'07]</p>
    <p>Log is structured as a hash chain  Messages contain signed authenticators</p>
    <p>Result: Alice can either...  ... detect that the log has been tampered with, or  ... get a complete log with all the observable</p>
    <p>messages 9</p>
    <p>OSDI (October 4, 2010)</p>
    <p>...</p>
    <p>Moving right</p>
    <p>AVMM</p>
    <p>AVM</p>
  </div>
  <div class="page">
    <p>Execution logging</p>
    <p>How does Alice know whether the log matches a correct execution of her software image?</p>
    <p>Idea: AVMM can specify an execution  AVMM additionally logs all nondeterministic inputs  AVM correct: Can replay inputs to get execution  AVM faulty: Replay inevitably (!) fails 10OSDI (October 4, 2010)</p>
    <p>...</p>
    <p>AVMM</p>
    <p>AVM 474: SEND(Alice, Firing) 473: Mouse button clicked 472: SEND(Charlie, Got ammo) 471: RECV(Alice, Got medipack) 470: Got network interrupt 469: SEND(Charlie, Moving left)</p>
  </div>
  <div class="page">
    <p>Auditing and replay</p>
    <p>Network</p>
    <p>Alice Bob</p>
    <p>AVMM</p>
    <p>A V</p>
    <p>M</p>
    <p>AVMM</p>
    <p>A V</p>
    <p>M</p>
    <p>...</p>
    <p>Modification Evidence</p>
  </div>
  <div class="page">
    <p>AVM properties  Strong accountability</p>
    <p>Detects faults  Produces evidence  No false positives</p>
    <p>Works for arbitrary, unmodified binaries  Nondeterministic events can be captured by AVM</p>
    <p>Monitor</p>
    <p>Alice does not have to trust Bob, the AVMM, or any software that runs on Bob's machine</p>
    <p>If Bob tampers with the log, Alice can detect this  If Bob's AVM is faulty, ANY log Bob could produce</p>
    <p>would inevitably cause a divergence during replay 12</p>
    <p>OSDI (October 4, 2010)</p>
    <p>If it runs in a VM,</p>
    <p>it will work</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem: Detecting faults on remote machines</p>
    <p>Example: Cheating in multiplayer games</p>
    <p>Solution: Accountable Virtual Machines</p>
    <p>Evaluation  Using earlier example (cheating in Counterstrike)</p>
    <p>Summary</p>
    <p>NEXT</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>We built a prototype AVMM  Based on logging/replay engine in VMware</p>
    <p>Workstation 6.5.1  Extended with tamper-evident logging and auditing</p>
    <p>Evaluation: Cheat detection in games  Setup models competition / LAN party  Three players playing Counterstrike 1.6  Nehalem machines (i7 860)  Windows XP SP3</p>
  </div>
  <div class="page">
    <p>Evaluation topics</p>
    <p>Effectiveness against real cheats  Overhead</p>
    <p>Disk space (for the log)  Time (auditing, replay)  Network bandwidth (for authenticators)  Computation (signatures)  Latency (signatures)</p>
    <p>Impact on game performance  Online auditing  Spot checking tradeoffs</p>
    <p>Using a different application: MySQL on Linux</p>
    <p>Please refer to the paper for</p>
    <p>additional results!</p>
  </div>
  <div class="page">
    <p>AVMs can detect real cheats</p>
    <p>If the cheat needs to be installed in the AVM to be effective, AVM can trivially detect it</p>
    <p>Reason: Event timing + control flow change  Examined real 26 cheats from the Internet; all</p>
    <p>detectable 16</p>
    <p>OSDI (October 4, 2010)</p>
    <p>BC=5 3 BC=5 2 BC=4 7BC= 44 BC=3 7 ...</p>
    <p>Bob's log</p>
    <p>EIP=0xb38 2 EIP=0x363 3 EIP=0xc49 0 EIP=0x677 1 EIP=0x570f ...</p>
    <p>Event timing (for replay)</p>
    <p>AVMM</p>
    <p>A V</p>
    <p>MBC=5 9 BC=5 4 BC=4 9BC= 44 BC=3 7 ...</p>
    <p>EIP=0x861 e EIP=0x2d1 6 EIP=0xc43 e EIP=0x677 1 EIP=0x570f ...</p>
  </div>
  <div class="page">
    <p>BC=5 3 BC=5 2 BC=4 7BC= 44 BC=3 7 ...</p>
    <p>EIP=0xb38 2 EIP=0x363 3 EIP=0xc49 0 EIP=0x677 1 EIP=0x570f ...</p>
    <p>BC= BC= BC= BC=</p>
    <p>BC= BC= ...</p>
    <p>EIP= EIP= EIP= EIP=</p>
    <p>EIP= EIP= ...</p>
    <p>AVMs can detect real cheats</p>
    <p>Couldn't cheaters adapt their cheats?  There are three types of cheats:</p>
    <p>difficult 3. Detection guaranteed (15% of the cheats in our</p>
    <p>sample) 17</p>
    <p>OSDI (October 4, 2010)</p>
    <p>AVMM</p>
    <p>A V</p>
    <p>M</p>
    <p>?</p>
    <p>? ?</p>
    <p>? ?</p>
    <p>?</p>
    <p>? ?</p>
    <p>? ?</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Impact on frame rate</p>
    <p>Frame rate is ~13% lower than on bare hw</p>
    <p>137fps is still a lot! 60--80fps generally recommended  11% due to logging; additional cost for accountability</p>
    <p>is small 18</p>
    <p>OSDI (October 4, 2010)</p>
    <p>A v e ra</p>
    <p>g e f</p>
    <p>ra m</p>
    <p>e r</p>
    <p>a te</p>
    <p>Bare hardware</p>
    <p>VMware (no logging)</p>
    <p>VMware (logging)</p>
    <p>AVMM (no crypto)</p>
    <p>AVMM</p>
    <p>158fps -13%</p>
    <p>Different machines with different</p>
    <p>players -11%</p>
    <p>No fps cap Window mode</p>
  </div>
  <div class="page">
    <p>Cost of auditing</p>
    <p>When auditing a player after a one-hour game,</p>
    <p>How big is the log we have to download?  How much time is needed for replay?</p>
    <p>VMware AVMM</p>
    <p>A v e ra</p>
    <p>g e l o g</p>
    <p>g ro</p>
    <p>w th</p>
    <p>( M</p>
    <p>B /m</p>
    <p>in u</p>
    <p>te )</p>
    <p>~8 MB per minute2.47 MB</p>
    <p>per minute (compressed)</p>
    <p>Added by accountability</p>
    <p>~ 1 hour</p>
  </div>
  <div class="page">
    <p>Online auditing</p>
    <p>Idea: Stream logs to auditors during the game</p>
    <p>Result: Detection within seconds after fault occurs  Replay can utilize unused cores; frame rate penalty is</p>
    <p>low 20</p>
    <p>OSDI (October 4, 2010)</p>
    <p>A v e ra</p>
    <p>g e f</p>
    <p>ra m</p>
    <p>e r</p>
    <p>a te</p>
    <p>No online auditing</p>
    <p>One audit per player</p>
    <p>Two audits per player</p>
    <p>Alice</p>
    <p>Bob Charli e</p>
    <p>G a m</p>
    <p>e</p>
    <p>L o g</p>
    <p>g in</p>
    <p>g</p>
    <p>R e p</p>
    <p>la y</p>
    <p>R e p</p>
    <p>la y</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Accountable Virtual Machines (AVMs) offer strong accountability for unmodified binaries</p>
    <p>Useful when relying on software executing on remote machines: Federated system, multiplayer games, ...</p>
    <p>No trusted components required</p>
    <p>AVMs are practical  Prototype implementation based on VMware</p>
    <p>Workstation  Evaluation: Cheat detection in Counterstrike</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Our enthusiastic Counterstrike volunteers</p>
  </div>
</Presentation>
