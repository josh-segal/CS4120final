<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Peloton: Coordinated Resource Management for Sensor Networks</p>
    <p>Harvard School of Engineering and Applied Sciences</p>
    <p>Jason Waterman, Geoffrey Werner Challen, and Matt Welsh</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 2</p>
    <p>Sensor Networks: Coping with Limited Resources</p>
    <p>MAC Layer</p>
    <p>Z-MAC Dozer</p>
    <p>B-MAC T-MAC</p>
    <p>S-MAC OS and Programming models</p>
    <p>Pixie Eon</p>
    <p>Levels Power Locks</p>
    <p>Energy Tracking</p>
    <p>Quantro</p>
    <p>PowerTOSSIM Focus on optimizing at the node level</p>
    <p>Sensor nodes are severely resource constrained  8 MHz CPU  10 KB of memory  ~100 Kbps of radio link bandwidth (best case)   200 mAh  2000 mAh batteries</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 3</p>
    <p>Coordination Matters</p>
    <p>Coordination is essential to get good resource efficiency.</p>
    <p>We need OS abstractions to support it.</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 4</p>
    <p>State of the Art</p>
    <p>RPC</p>
    <p>IDLs</p>
    <p>Discovery services</p>
    <p>BSD sockets</p>
    <p>TCP/IP</p>
    <p>BPEL</p>
    <p>JINI</p>
    <p>Web services</p>
    <p>XML RPC</p>
    <p>Group communication</p>
    <p>DHTs</p>
    <p>Multicast</p>
    <p>Map/Reduce</p>
    <p>BFT</p>
    <p>Active Messages</p>
    <p>Radio packets</p>
    <p>Conventional Distributed Systems Sensor Networks</p>
    <p>Everything else is done in an ad hoc manner by each</p>
    <p>application.</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 5</p>
    <p>A Canonical Example: Data Collection</p>
    <p>Resource availability is hard to predict</p>
    <p>Variable load  Variable resource</p>
    <p>availability  Time Varying</p>
    <p>Off line static solutions are not adequate</p>
    <p>How much energy to put towards sampling?</p>
    <p>Storing data? Processing? Listening for and forwarding</p>
    <p>other data?</p>
    <p>Data</p>
    <p>Base Station</p>
    <p>Node</p>
    <p>More work forwarding</p>
    <p>packets</p>
    <p>Less work forwarding</p>
    <p>packets</p>
    <p>Solar Powered Nodes</p>
    <p>More Sunlight</p>
    <p>Less Sunlight</p>
    <p>More Sunlight</p>
    <p>Less Sunlight</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 6</p>
    <p>Programming with Resource Management</p>
    <p>The three keys to effective coordinated resource management  Sharing resource availability across nodes  Exposing resource availability to the application  A way of allocating resources across multiple nodes</p>
    <p>Currently, applications do this in an ad hoc fashion  Point solutions tied to a specific application  Requires lots of engineering  Hard to tune</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 7</p>
    <p>The Peloton Operating System</p>
    <p>Distributed OS for wireless sensor networks that provides coordinated resource management</p>
    <p>Three key ideas:  State Sharing  allows for nodes to share</p>
    <p>information local resource availability  Vector Tickets  represents the right to consume</p>
    <p>resources across a set of nodes for performing an operation</p>
    <p>Ticket Agents  permits resource management decisions to be decomposed across the network</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 8</p>
    <p>Key Idea #1: Efficient State Sharing</p>
    <p>Shared tuple space  Representing a global view of</p>
    <p>the network state  Builds on the work of Abstract</p>
    <p>Regions [NSDI '04] and Hood [MOBISYS '04]</p>
    <p>Efficient Implementation  State on other nodes is read</p>
    <p>only  no write conflicts  Use gossip to ensure eventual</p>
    <p>consistency  Topological Freshness  the</p>
    <p>frequency of updates between two nodes is related to the distance between them</p>
    <p>Node Energy &lt;1, 324J&gt; &lt;3, 249J&gt; ... &lt;15, 59J&gt;</p>
    <p>Shared State</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 9</p>
    <p>Data Collection with State Sharing</p>
    <p>Node Energy &lt;1, 324J&gt; &lt;3, 249J&gt; ... &lt;15, 59J&gt;</p>
    <p>Shared State Data</p>
    <p>Node Energy &lt;1, 344J&gt; &lt;3, 251J&gt; ... &lt;15, 87J&gt;</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 10</p>
    <p>Representing Resources</p>
    <p>Problem: Existing systems track resources implicitly  No direct feedback to applications on availability  Allocation and use of resources are tightly coupled</p>
    <p>Need a mechanism to represent allocation across a set of nodes</p>
    <p>e.g., Amount of energy/memory/bandwidth used to route data to the base station</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 11</p>
    <p>The Pixie Resource-Aware OS [Sensys'08]</p>
    <p>Node-level OS for sensor nets based on the concept of resource aware programming</p>
    <p>Resources as a first-class programming primitive  Direct application knowledge of resource availability  Explicit allocation and revocation of resources: TANSTAAFL principle</p>
    <p>Key idea: Resource tickets  Ticket &lt;R, c, te&gt; represents right to consume c units of resource R until</p>
    <p>the expiry time te.  Think of as a short-term reservation for some resource.</p>
    <p>Tickets provide...  Direct visibility over resources  Fine-grained control  Rich abstraction for adapting to changing conditions</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 12</p>
    <p>Key Idea #2: Vector Tickets</p>
    <p>Peloton extends Pixie's model to span allocations on multiple nodes</p>
    <p>Vector Ticket = &lt; T1, T2, T3, ...Tn &gt;</p>
    <p>Tn = ticket for resources at node n</p>
    <p>What do vector tickets buy us?  A global accounting mechanism</p>
    <p>for resources  We can account for all resource</p>
    <p>usage in the system  Explicit network-wide allocation</p>
    <p>of resources</p>
    <p>Without Vector Tickets:</p>
    <p>sendMsg(data, dest);</p>
    <p>Like ordering off a menu without</p>
    <p>any prices</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 13</p>
    <p>Key Idea #3: Who Allocates the Vector Tickets?</p>
    <p>Resource allocation policies are provided by ticket agents</p>
    <p>Consume information from shared state</p>
    <p>Allocate vector tickets for operations in the network</p>
    <p>Ticket agents can be implemented in multiple ways:</p>
    <p>Centralized  Decentralized  Cluster based</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>TA</p>
    <p>Ticket Agent</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 14</p>
    <p>Application Vignettes</p>
    <p>In the paper we highlight the Peloton architecture through three use cases that leverage the programming model</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 15</p>
    <p>Adaptive Duty Cycling for Sensor Networks [IPSN'04]</p>
    <p>Used in surveillance where nodes detect events within their given sensor range</p>
    <p>Assumptions:  Dense network deployment to allow redundancy</p>
    <p>in sensor coverage  Nodes know their own location</p>
    <p>Naive approach: random duty cycling  Can result in loss sensor coverage  Non-adaptive to changes in resources</p>
    <p>Coordinated duty cycling  Higher overhead  Tune sleep and wake cycles of nodes to maintain</p>
    <p>sensor coverage across network  Adapt to variations in energy availability</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 16</p>
    <p>Challenges in Coordinated Duty Cycling</p>
    <p>Nodes must share their location and coverage information and learn the location and coverage of other nodes</p>
    <p>Nodes need to know which nodes they are covering and for how long to cover them</p>
    <p>Can't sleep while covering for someone else</p>
    <p>How to coordinate sleep schedules such that energy remains balanced in the network?</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 17</p>
    <p>A Role-Alternating, CoverageP</p>
    <p>reserving, Coordinated Sleep Algorithm (RACP)  RACP is a role based system</p>
    <p>A node is always perorming in one of three roles:</p>
    <p>Sleeping  being covered by other nodes</p>
    <p>Sponsoring  sensing and supporting the sleeping of one or more nodes</p>
    <p>Sensing  neither sleeping nor supporting other nodes</p>
    <p>Sponsoring</p>
    <p>Sleeping</p>
    <p>Sponsoring</p>
    <p>Sponsoring Sensing</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 18</p>
    <p>A Role-Alternating, CoverageP</p>
    <p>reserving, Coordinated Sleep Algorithm (RACP)  Nodes periodically send status packets with location, current role, and residual energy of the node</p>
    <p>Sensing nodes periodically check for coverage sponsors  If enough potential sponsors are found, ask for sponsorship with a random</p>
    <p>delay based on current energy  If sponsors agree to the request, sleep, otherwise try again later</p>
    <p>In Peloton, this is trivial to implement:  Location, current role, and energy are published to the shared tuple space</p>
    <p>Topological freshness works well here as nodes only care about the state of their immediate neighbors</p>
    <p>When a suitable set of sponsors have been found, the node's ticket agent generates a vector ticket containing resources for all the sponsors</p>
    <p>When the sponsors' ticket agents receive the vector ticket, they now have the resources needed to sponsor the node and begin to sponsor it and the sponsored node can sleep</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 19</p>
    <p>Current Status</p>
    <p>The design of Peloton has been motivated by the challenges we faced in our previous volcano sensor network deployments</p>
    <p>Tungurahua in '04 [EWSN '05], Reventador in '05 [OSDI '06], and Tungurahua again in 07 [SenSys '08]</p>
    <p>High data rates and load fluctuations from the environment made careful resource management essential to success</p>
    <p>New goal: in-network signal processing and perpetual sensor deployments, running on top of Peloton OS</p>
    <p>Earthquake localization from seismic sensor data  Solar powered nodes; even greater resource variability</p>
    <p>Volcano monitoring is a challenging, real-world problem well suited to coordinated resource management</p>
    <p>Work has just begun  Targeting a 2010 deployment</p>
  </div>
  <div class="page">
    <p>2009 Jason Waterman  Harvard University 20</p>
    <p>Conclusions</p>
    <p>Existing approaches to managing resources in sensor nets are:</p>
    <p>Hard to tune  Inefficient  Based on local greedy heuristics</p>
    <p>What we are proposing: SOCIALISM for our sensor networks</p>
    <p>The three tenets of the Peloton manifesto are:</p>
    <p>State sharing  Vector tickets  Ticket agents</p>
    <p>Thank you!</p>
    <p>PELOTON</p>
    <p>waterman@eecs.harvard.edu</p>
  </div>
</Presentation>
