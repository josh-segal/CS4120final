<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Risk-averse Stochastic Optimization: Models +</p>
    <p>Algorithms</p>
    <p>Chaitanya Swamy University of Waterloo</p>
  </div>
  <div class="page">
    <p>Risk-averse Stochastic Optimization: Probabilistically</p>
    <p>constrained models + Algorithms for Black-box</p>
    <p>Distributions</p>
    <p>Chaitanya Swamy University of Waterloo</p>
  </div>
  <div class="page">
    <p>Two-Stage Recourse Model</p>
    <p>Given : Probability distribution over inputs.</p>
    <p>Stage I : Make some advance decisions  plan ahead or hedge against uncertainty. Observe the actual input scenario. Stage II : Take recourse. Can augment earlier solution paying a recourse cost.</p>
    <p>Choose stage I decisions to minimize</p>
    <p>(stage I cost) + (expected stage II recourse cost).</p>
  </div>
  <div class="page">
    <p>Distribution over clients gives the set of clients to serve.</p>
    <p>client set D</p>
    <p>facilit y</p>
    <p>Stage I: Open some facilities in advance; pay cost fi for facility i.</p>
    <p>Stage I cost = (i opened) fi .</p>
    <p>stage I facility</p>
  </div>
  <div class="page">
    <p>Distribution over clients gives the set of clients to serve.</p>
    <p>facilit y</p>
    <p>Stage I: Open some facilities in advance; pay cost fi for facility i.</p>
    <p>Stage I cost = (i opened) fi .</p>
    <p>stage I facility</p>
    <p>Actual scenario A = { clients to serve}, materializes. Stage II: Can open more facilities to serve clients in A; pay cost fi</p>
    <p>A to open facility i. Assign clients in A to facilities.</p>
    <p>Stage II cost =  fi A + (cost of serving</p>
    <p>clients in A).</p>
    <p>i opened inscenario A</p>
    <p>stage II facility</p>
  </div>
  <div class="page">
    <p>Want to decide which facilities to open in stage I.</p>
    <p>Goal: Minimize Total Cost = (stage I cost) + EA D [stage II cost for</p>
    <p>A]. How is the probability distribution</p>
    <p>specified?</p>
    <p>A short (polynomial) list of possible scenarios</p>
    <p>Independent probabilities that each client exists</p>
    <p>A black box that can be sampled.</p>
    <p>black-box setting</p>
  </div>
  <div class="page">
    <p>Risk-averse stochastic optimization</p>
    <p>E[.] measure does not adequately model the risk associated with stage-I decisions</p>
    <p>Same E[.] value  same risk involved: given two solutions with same E[.] cost, prefer solution with more assured or reliable second-stage component (costs). E.g. portfolio investment</p>
    <p>Want to capture above notion of riskaverseness, where one seeks to avoid disaster scenarios</p>
  </div>
  <div class="page">
    <p>Modeling risk-aversion: attempt 1</p>
    <p>Choose stage I decisions to minimize (stage I cost) + (expected stage II recourse cost)</p>
    <p>Budget model provides greatest degree of riskaversion</p>
    <p>subject to (stage II cost of scenario A)  B for every scenario A Gupta-Ravi-Sinha: considered stochastic Steiner tree in this budget model in the polynomialscenario setting</p>
    <p>Budget model</p>
  </div>
  <div class="page">
    <p>Modeling risk-aversion: attempt 1</p>
    <p>Choose stage I decisions to minimize (stage I cost) + (expected stage II recourse cost)</p>
    <p>Budget model provides greatest degree of riskaversion, BUT</p>
    <p>limited modeling power: cannot get any approximation guarantees in black-box setting with bounded sample size</p>
    <p>overly conservative: protects every scenario regardless of its probability</p>
    <p>subject to (stage II cost of scenario A)  B for every scenario A Gupta-Ravi-Sinha: considered stochastic Steiner tree in this budget model in the polynomialscenario setting</p>
    <p>Budget model</p>
  </div>
  <div class="page">
    <p>Closely-related model Choose stage I decisions to minimize</p>
    <p>(stage I cost) + (maximum stage II recourse cost)</p>
    <p>Dhamdhere et al. considered this model, again in the polynomial-scenario setting</p>
    <p>Guessing B = max. (stage II cost) reduces robust-problem to the budget problem</p>
    <p>Modeling issues: not clear how to even specify exponentially many scenarios</p>
    <p>Feige et al.: scenarios specified by cardinality constraint; seems rather stylized for stochastic optimization</p>
    <p>Will consider distribution-based robust model: scenario-collection = support of distribution</p>
    <p>Same drawbacks as in the budget model  no guarantees possible in black-box setting</p>
    <p>Robust model</p>
  </div>
  <div class="page">
    <p>Modeling risk-aversion: attempt 2</p>
    <p>Choose stage I decisions to minimize (stage I cost) + (expected stage II recourse cost)</p>
    <p>subject to (stage II cost of scenario A)  B for every scenario A</p>
    <p>For the budget-model, one can prove approximation results if one is allowed to violate the budget-constraints with a small probability</p>
    <p>Can turn the above solution concept around and incorporate it into the model to arrive at the following new model</p>
    <p>recall, budget model</p>
  </div>
  <div class="page">
    <p>Modeling risk-aversion: attempt 2</p>
    <p>Choose stage I decisions to minimize (stage I cost) + (expected stage II recourse cost)</p>
    <p>subject to PrA[(stage II cost of scenario A) &gt; B]</p>
    <p>: input  can tradeoff risk-averseness vs. conservatism</p>
    <p>Called probabilistically- or chance- constrained program</p>
    <p>Chance constraint called Value-at-Risk (VaR) constraint in finance literature: popular for risk-optimization in finance</p>
    <p>Related robust model: minimize (stage I cost) +</p>
    <p>(1-)-quantile of (stage II recourse cost)</p>
    <p>Risk-averse budget model</p>
  </div>
  <div class="page">
    <p>Approximation Algorithm</p>
    <p>Hard to solve the problem exactly. Even special cases are #P-hard. Settle for approximate solutions. Give polytime algorithm that always finds near-optimal solutions.</p>
    <p>A is a -approximation algorithm if,</p>
    <p>A runs in polynomial time. A(I)  .OPT(I) on all instances I,  is called the approximation ratio of A.</p>
  </div>
  <div class="page">
    <p>Our Results  Obtain approximation algorithms for various risk-averse</p>
    <p>budgeted (and robust) problems in the black-box setting: facility location, set cover, vertex cover, multicut on trees, min cut</p>
    <p>Give a fully polynomial approximation scheme for solving the LP-relaxations of a large class of risk-averse problems  can use existing algorithms for deterministic or 2-stage version of problem to get approximation algorithm for riskaverse problem</p>
    <p>First approximation results for chance-constrained programs and black-box distributions (Kleinberg-RabaniTardos consider chance-constrained versions of bin-packing, knapsack but for specialized product distributions)</p>
  </div>
  <div class="page">
    <p>Related Work  Gupta et al.: gave a const.-approx. for stochastic</p>
    <p>Steiner tree in the poly-scenario budget model</p>
    <p>Dhamdhere et al., Feige et al.: gave approx. algorithms for various problems in robust model with poly-scenarios, cardinality-collections</p>
    <p>So-Zhang-Ye: consider another risk measure called conditional VaR; give an approx. scheme for solving the LP-relaxations of problems in black-box setting  Can use our techniques to solve a generalization of</p>
    <p>their model, where one has probabilistic budget constraints</p>
    <p>Lots of work in the standard 2-stage model: Dye et al., Ravi-Sinha, Immorlica et al., Gupta et al.+, Shmoys-S, SShmoys</p>
  </div>
  <div class="page">
    <p>Risk-averse Set Cover (RASC)</p>
    <p>Universe U = {e1, , en }, subsets S1, S2, , Sm  U, set S has weight wS.</p>
    <p>Deterministic problem (DSC): Pick a minimum weight collection of sets that covers each element.Risk-averse budgeted version: Target set of elements to be covered is given by a probability distribution.</p>
    <p>choose some sets initially paying S for set S  subset A  U to be covered is revealed  can pick additional sets paying wS</p>
    <p>A for set S.</p>
    <p>Minimize (-cost of sets picked in stage I) + EA U [w</p>
    <p>A-cost of new sets picked for scenario A]. subject to PrA U [w</p>
    <p>A-cost for scenario A &gt; B]</p>
  </div>
  <div class="page">
    <p>Fractional risk-averse set cover</p>
    <p>Fractional risk-averse problem: can buy sets fractionally in stage I and in each scenario A to cover the elements in A to an extent of 1 Not clear how to solve even the fractional problem in the polynomial-scenario setting. Why? The set of feasible solutions</p>
    <p>{(x, {yA}A) : (x, yA) covers A for each scenario A,</p>
    <p>PrA[S w A</p>
    <p>S yA,S &gt; B]  } is NOT a convex set. How to get an LP-relaxation?</p>
  </div>
  <div class="page">
    <p>An LP for fractional RASC For simplicity, consider wS</p>
    <p>A = WS for every scenario A. xS : indicates if set S is picked in stage I rA : indicates if budget-constraint is NOT met for A {yA,S} : decisions in scenario A when budget-constraint is met for A {zA,S}: decisions in scenario A when budget-constraint is not met for A Minimize S SxS + AU pA S WS(yA,S + zA,S)</p>
    <p>subject to, A pArA</p>
    <p>S WS yA,S  B for each A</p>
    <p>S:eS xS + S:eS yA,S + rA  1 for each A, eA</p>
    <p>S:eS xS + S:eS (yA,S + zA,S)  1 for each A, eA</p>
    <p>xS, yA,S, zA,S  0 for each S, A.</p>
  </div>
  <div class="page">
    <p>Minimize S SxS + AU pA S WS(yA,S + zA,S)</p>
    <p>subject to, A pArA</p>
    <p>S WS yA,S  B for each A</p>
    <p>S:eS xS + S:eS yA,S + rA  1 for each A, eA</p>
    <p>S:eS xS + S:eS (yA,S + zA,S)  1 for each A, eA</p>
    <p>xS, yA,S, zA,S  0 for each S, A.</p>
    <p>Exponential number of variables and exponential number of constraints.</p>
    <p>The scenarios are no longer separable: i.e., a first-stage solution x alone is not enough to specify LP solution: need to specify the rAs  what does solving LP mean?  Contrast wrt. standard 2-stage model, or</p>
    <p>fractional risk-averse problem</p>
    <p>Coupling constraint</p>
  </div>
  <div class="page">
    <p>Theorem 1: For any ,&gt;0, in time poly(1/), can compute a first-stage soln. x that extends to an LPsoln. (x, {(yA,zA,rA)}A) of cost  (1+)OPT where A pArA  (1+).</p>
    <p>Dependence on 1/ is unavoidable in black-box setting.</p>
    <p>Theorem 2 (rounding theorem): Given a soln. x that extends to an LP-soln. (x, {(yA,zA,rA)}A) of cost C and A pArA = P, can round x to</p>
    <p>a soln. x' for fractional RASC s.t. .x' + EA[opt. frac. cost of A]  2C, PrA[opt. frac. cost of A &gt; 2B]  2P [Can now use any LP-based local approx. for 2-stage SC</p>
    <p>to round x'] a soln (X, {YA}A) for (integer) RASC s.t.</p>
    <p>.X + EA[W.YA]  4C, PrA[W.YA &gt; 4B]  2P</p>
    <p>using any LP-based -approx. algo. for DSC.</p>
  </div>
  <div class="page">
    <p>Rounding the LP Given a soln. x that extends to an LP-soln. (x, {(yA,zA,rA)}A) of cost C and A pArA = P</p>
    <p>LP constraints: S WS yA,S  B for each A</p>
    <p>S:eS xS + S:eS yA,S + rA  1 for each A, eA</p>
    <p>S:eS xS + S:eS (yA,S + zA,S)  1 for each A, eAFor every A, either we have</p>
    <p>rA  0.5 OR S:eS xS + S:eS yA,S  0.5 for each eA</p>
    <p>Threshold rounding: if rA  0.5, set r'A = 1, else r'A = 0; set x' = 2x</p>
    <p>Let fA(x') = opt. fractional cost of scenario A given stage-I soln. x'</p>
    <p>fA(x')  W.(yA+zA)  .x' + EA[fA(x')]  2C</p>
    <p>In scenario A, if rA  0.5, then (x', 2yA) covers A  fA(x')</p>
    <p>2B So PrA[fA(x') &gt; 2B]  PrA[rA &gt; 0.5]  2 A pArA = 2P</p>
  </div>
  <div class="page">
    <p>Rounding (contd.) Rounding x' to an integer soln. to RASC: can use an approximation algorithm for 2-stage stochastic problem that is (i) LP-based, (ii) local, i.e., gives per-scenario cost guarantees, [(iii) can be implemented given only a first-stage solution]</p>
    <p>to obtain integer solution (X, {YA}A) of cost  .2C, and</p>
    <p>PrA[cost of A &gt; .2B]  2P</p>
    <p>set cover, vertex cover, multicut on trees: Shmoys-S gave such a 2-approx. algorithm using an LP-based approx. algo. for deterministic problem  get ratios of 4log n, 8, 8 respectively</p>
    <p>min s-t cut: can use O(log n)-approx. algorithm of Dhamdhere et al. for stochastic min s-t cut, which is local</p>
    <p>Also, facility location: not set cover, but very similar rounding; get 11-approx. using variant of Shmoys-S algorithm for 2-stage FL</p>
  </div>
  <div class="page">
    <p>Wanted result: With poly-bounded N, x is an optimal solution to sample average problem  x is a near-optimal soln. to true problem with small blow-up of</p>
    <p>Solving the fractionalRASC LP: Sample Average</p>
    <p>Approximation Sample Average Approximation (SAA) method:</p>
    <p>Sample some N times from distribution</p>
    <p>Estimate pA by qA = frequency of occurrence of scenario A = nA/N.</p>
    <p>Construct sample average LP, where pA is replaced by qA in LP</p>
    <p>How large should N be?</p>
  </div>
  <div class="page">
    <p>Solving the fractional-RASC LP</p>
    <p>Minimize S SxS + AU pA S WS(yA,S + zA,S)</p>
    <p>subject to, A pArA  (*)</p>
    <p>S WS yA,S  B for each A</p>
    <p>S:eS xS + S:eS yA,S + rA  1 for each A, eA</p>
    <p>S:eS xS + S:eS (yA,S + zA,S)  1 for each A, eA</p>
    <p>xS, yA,S, zA,S  0 for each S, A. 1) Lagrangify coupling constraint (*) to get a separable problem</p>
  </div>
  <div class="page">
    <p>Solving the fractional-RASC LP</p>
    <p>Minimize S SxS + AU pA S WS(yA,S + zA,S)</p>
    <p>subject to, A pArA  (*) ] x  0 S WS yA,S  B for each A</p>
    <p>S:eS xS + S:eS yA,S + rA  1 for each A, eA</p>
    <p>S:eS xS + S:eS (yA,S + zA,S)  1 for each A, eA</p>
    <p>xS, yA,S, zA,S  0 for each S, A. 1) Lagrangify coupling constraint (*) to get a separable problem</p>
  </div>
  <div class="page">
    <p>Solving the fractional-RASC LP</p>
    <p>Max 0 [- + min ( S SxS + AU pA (rA + S WS(yA,S + zA,S)))]</p>
    <p>subject to, S WS yA,S  B for each A</p>
    <p>S:eS xS + S:eS yA,S + rA  1 for each A, eA</p>
    <p>S:eS xS + S:eS (yA,S + zA,S)  1 for each A, eA</p>
    <p>xS, yA,S, zA,S  0 for each S, A. After Lagrangification, inner minimization problem becomes a separable 2-stage problem</p>
    <p>h(; x) = .x + AU pA gA(; x)</p>
    <p>OPT()</p>
  </div>
  <div class="page">
    <p>Solving the fractional-RASC LP</p>
    <p>Max 0 [- + min ( h(; x) = .x + AU pA gA(; x))] 2) Argue that for each fixed , can compute efficiently a near-optimal solution to inner-minimization problem</p>
  </div>
  <div class="page">
    <p>Solving the fractional-RASC LP</p>
    <p>Max 0 [- + min ( h(; x) = .x + AU pA gA(; x))] 2) Argue that for each fixed , can compute efficiently a near-optimal solution to inner-minimization problem</p>
    <p>Problems with 2): Cannot compute a good optimal solution; 2-stage problem does not fall into the solvable class in Shmoys-S, or Charikar-Chekuri-Pal  their arguments do not directly apply Crucial insight: For the search in 3) to work, suffices to prove the weak guarantee: can compute x s.t. h(; x)  (1+)OPT() +</p>
    <p>Weak enough that can show that sample-averageapproximation works, by using approx.-subgradient proof technique (S-Shmoys)</p>
  </div>
  <div class="page">
    <p>Use sample average approximation: replace minxP (h(; x) =</p>
    <p>.x + AU pA gA(; x)) (P)</p>
    <p>with minxP (h'(; x) = .x + AU qA gA(; x)) (SAP)</p>
    <p>where qA = frequency of occurrence of scenario A in N samples</p>
    <p>h(; .) and h'(; .) can take very different values; BUT can prove (*) by showing that their slopes are close to each other</p>
    <p>Want to show: With poly-bounded N, (*) if x solves (SA-P) then h(; x)</p>
    <p>(1+)OPT + .</p>
  </div>
  <div class="page">
    <p>Use sample average approximation: replace problem</p>
    <p>minxP (h(; x) = .x + AU pA gA(; x)) (P) with</p>
    <p>minxP (h'(; x) = .x + AU qA gA(; x)) (SA-P)</p>
    <p>where qA = frequency of occurrence of scenario A in N samples</p>
    <p>h(; .) and h'(; .) can take very different values; BUT can prove (*) by showing that their slopes are close to each other</p>
    <p>To show: With poly-bounded N, (*) if x solves (SA-PD) then h(; x)</p>
    <p>(1+)OPT + . x</p>
    <p>h'(; x)</p>
    <p>h(; x)</p>
    <p>x*x</p>
  </div>
  <div class="page">
    <p>Slope  subgradient</p>
    <p>For a (convex) function g:  m</p>
    <p>,</p>
    <p>(Approximate) Subgradients and</p>
    <p>closeness-in-subgradients</p>
    <p>Closeness-in-subgradients: At most points u in P, vector d'u such that (#) d'u is a subgradient of g'(.) at u, AND an ()subgradient of g(.) at u.</p>
    <p>Lemma (S-Shmoys): For any convex functions g(.), g'(.), if (#) holds then,</p>
    <p>x solves minxP g'(x)  x is a near-optimal solution to minxP g(x).</p>
    <p>[(#) holds with high probability for h(; .) and h'(; .) (for suitable ,).]</p>
    <p>dm is a subgradient of g(.) at u, if v, g(v)  g(u)  d.(vu).</p>
    <p>d is an ()-subgradient of g at u, if v, g(v)  g(u)  d.(vu)</p>
    <p>.g(v)  .g(u)  .</p>
  </div>
  <div class="page">
    <p>Closeness-in-subgradients (contd.)</p>
    <p>Closeness-in-subgradients: At most points u in P, vector d'u such that (#) d'u is a subgradient of g'(.) at u, AND an ()subgradient of g(.) at u.</p>
    <p>Lemma: For any convex functions g(.), g'(.), if (#) holds then, x solves minxP g'(x)  x is a near-optimal solution to minxP</p>
    <p>g(x). P</p>
    <p>u g(x)  g(u)</p>
    <p>d u</p>
    <p>Intuition:  Minimizer of convex function is determined by</p>
    <p>subgradient.</p>
    <p>Ellipsoid-based algorithm of SS04 for convex minimization only uses (-) subgradients: uses (-) subgradient to cut ellipsoid at a feasible point u in P (#)  can run SS04 algorithm on both minxP g(x) and minxP g'(x) using same vector d'u to cut ellipsoid at uP  algorithm will return x that is near-optimal for both problems.</p>
    <p>dm is a subgradient of g(.) at u, if v, g(v)  g(u)  d.(vu).</p>
    <p>d is an ()-subgradient of g at u, if v, g(v)  g(u)  d.(vu)</p>
    <p>.g(v)  .g(u)  .</p>
  </div>
  <div class="page">
    <p>Closeness-in-subgradients of h(; .) and h'(; .)</p>
    <p>True problem: minxP (h(; x) = .x + AU pA gA(; x)) (P)</p>
    <p>Sample average problem: minxP (h'(; x) = .x + AU qA gA(; x)) (SA-P) To show: At most points u in P, vector d'u such that d'u is a subgradient of h'(; .) at u, AND an ()-subgradient of h(; .) at u. Fix uP. Let  = maxS WS /S.</p>
    <p>subgradient of h(; .) at u is du = (du,S) with du,S = S  A pAzA,S = S  E[zA,S],</p>
    <p>where zA,S = quantity derived from optimal dual soln. to gA(; u)</p>
    <p>subgradient of h'(; .) at u is d'u = (d'u,S) with d'u,S = S  A qAzA,S = S  E'[zA,S]</p>
    <p>structure of dual implies that zA,S  WS +  for all S</p>
    <p>using poly(/) samples can ensure that |d'u,S  du,S|  .S + /2m S whp.</p>
    <p>suffices to show that d'u is an (, )-subgradient of h(; .) at u whp.</p>
    <p>Union bound shows that this holds for most points in P</p>
  </div>
  <div class="page">
    <p>Summary and Extensions  Although LP-relaxation of (fractional) problem is non</p>
    <p>separable, has exponential size, can still compute nearoptimal LP-first-stage decisions: present an FPTAS  LP-first-stage decisions are sufficient to round and obtain</p>
    <p>near-optimal solution to fractional problem, which can be further rounded using various known approx. algorithms.</p>
    <p>Many applications: set cover, vertex cover, facility location, min s-t cut, multicut on trees: obtain first approximation algorithms for chance-constraints + blackbox model</p>
    <p>Get same results for (i) non-uniform budgets; (ii) riskaverse robust problems; (iii) simultaneous budget constraints, e.g., Pr[facility cost &gt; BF or service cost &gt; BS or total cost &gt; B]</p>
    <p>(iv) B=0 problem: interesting one-stage problem; choose initial decisions so as to satisfy most scenarios</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>Approximation results for other problems in the risk-averse models.</p>
    <p>Models and algorithms for multistage risk-averse stochastic optimization (in black-box setting).</p>
    <p>Risk-averse stochastic scheduling.</p>
    <p>Other combinations of multiple probabilistic budget constraints.</p>
  </div>
  <div class="page">
    <p>Thank You.</p>
  </div>
</Presentation>
