<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Physical Database Tuning: A Relaxation-based Approach</p>
    <p>Betl Demirz</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 212.10.2005</p>
    <p>Introduction  DBMS applications have become</p>
    <p>increasingly complex  combinatorial explosion of physical structures</p>
    <p>to consider  structures interact with each other</p>
    <p>the problem cannot be divided into simpler, independent sub-goals</p>
    <p>To reduce DBMSs total cost, automated physical design tools are used</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 312.10.2005</p>
    <p>Automatic Physical Design Problem - I</p>
    <p>W = workload of representative queries and updates</p>
    <p>B = space constraint  Find the set of physical structures that</p>
    <p>finds lowest estimated execution cost of queries in W</p>
    <p>fits in B</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 412.10.2005</p>
    <p>Automatic Physical Design Problem - II  Aim</p>
    <p>Handle large workloads and multiple kinds of physical structures</p>
    <p>Recent Techniques  Very complex  Difficult to analyze and extract properties</p>
    <p>Proposed Technique  Simple, complexity is reduced  Gives comparable recommendations</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 512.10.2005</p>
    <p>Problem Statement</p>
    <p>Workload Database</p>
    <p>Configuration</p>
    <p>Physical Design Tool</p>
    <p>Set of physical structures (i.e.,</p>
    <p>indexes and views) that make similar workloads execute as fast as</p>
    <p>possible</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 612.10.2005</p>
    <p>Automated Selection of Physical Design  Recent Solutions</p>
    <p>Candidate access paths are heuristicly chosen</p>
    <p>Bottom-up search is used to identify the best overall configuration</p>
    <p>Proposed Solution  Indexes and views are recommended  Reduces assumptions and heuristics</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 712.10.2005</p>
    <p>Recent Techniques  What-If API</p>
    <p>Determine impact without actually materializing physical design  Dependence on the optimizer</p>
    <p>Keep optimizer and its cost model in sync with the tuning process</p>
    <p>Search Framework  Find a good set of candidate structures</p>
    <p>Indexes and views  Augment the initial candidate set by merging two or more</p>
    <p>candidates together  Search the augmented space</p>
    <p>Bottom-up techniques are used  Greedy algorithm or knapsack and subsequent random permutations</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 812.10.2005</p>
    <p>Database Tuning Workload</p>
    <p>Compress Workload</p>
    <p>Candidate Selection (per query)</p>
    <p>Enumeration</p>
    <p>Time? Yes</p>
    <p>No</p>
    <p>Merging</p>
    <p>Recommendation</p>
    <p>Tuning Client</p>
    <p>Query Optimizer Database</p>
    <p>Server What-if</p>
    <p>API Metadata</p>
    <p>- Create Hypothetical Index/View. - Optimize Query with respect to hypothetical configurations.</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 912.10.2005</p>
    <p>Proposed Technique - I  Agrees with what-if API and dependence on the</p>
    <p>optimizer  Changes search framework</p>
    <p>Find a good set of candidate structures  For complex queries, candidate structures can be very large  Bound on the maximum number of candidate structures to</p>
    <p>consider per query and rank the candidates using heuristics</p>
    <p>Combine merging and enumeration steps  Generate many alternatives during merging not to miss good</p>
    <p>solutions  Put some constraints over merged structures to avoid large</p>
    <p>growth</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1012.10.2005</p>
    <p>Proposed Technique - II</p>
    <p>A small set of physical structures are identified  structures are guaranteed to result in an optimal</p>
    <p>configuration  A different search technique is used</p>
    <p>opposite of bottom-up search  start with a large configuration</p>
    <p>time-wise optimal but too large to fit in the available storage</p>
    <p>shrink it using transformations  advantages: quality and performance</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1112.10.2005</p>
    <p>New Architecture</p>
    <p>Query Optimizer</p>
    <p>Database ServerWhat-if</p>
    <p>API</p>
    <p>Metadata</p>
    <p>Relaxation</p>
    <p>Time? Yes</p>
    <p>No</p>
    <p>Recommendation</p>
    <p>Tuning Client</p>
    <p>Workload</p>
    <p>Request Identification</p>
    <p>Get Optimal Configuration (per query)</p>
    <p>Instrumenting the query optimizer.  Search strategy based on relaxations.</p>
    <p>Requests API</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1212.10.2005</p>
    <p>Instrumenting the Query Optimizer</p>
    <p>Optimization of a single query  Plan is an instance of a template tree that</p>
    <p>has one or more index seeks at the leaf nodes  combines the leaf nodes by binary intersections or</p>
    <p>unions  applies rid lookup to retrieve missing columns  applies filter operator for non-sargable predicates  applies a sort operator to enforce order</p>
    <p>Applicable to view requests, too</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1312.10.2005</p>
    <p>Alternative Index Strategies Sort (D)</p>
    <p>Filter (A+C = 8)</p>
    <p>Lookup(Iclustered)</p>
    <p>Seek (IA &lt; 10) Seek (IB &lt; 10)</p>
    <p>Sort (D)</p>
    <p>Filter (A+C = 8, B &lt; 10)</p>
    <p>Lookup(Iclustered)</p>
    <p>Seek (IA &lt; 10)</p>
    <p>Filter (A &lt; 10  A+C = 8  B &lt; 10)</p>
    <p>Scan (ID,A,B,C,E )</p>
    <p>(a) (b)</p>
    <p>(c)</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1412.10.2005</p>
    <p>Overview of the Query Optimizer</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1512.10.2005</p>
    <p>Bounding the improvement</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1612.10.2005</p>
    <p>Relaxation-based Search  Relaxing a configuration is replacing some structures by smaller but</p>
    <p>less efficient ones  Advantages</p>
    <p>merging and enumeration steps are interleaved. Merged structures are obtained lazily, on demand</p>
    <p>re-optimizing a relaxed configuration to evaluate its cost is more efficient</p>
    <p>C1 has an index on (a,b)  C2 has an index on (a,d)  Replace C1 and C2 with C3  C3 has an index on (a,b,d)  Re-optimize queries that used relaxed structures  Bottom-up strategy; re-optimize all queries that reference the index table</p>
    <p>provides more useful information to the DB administrator  good configurations are iteratively relaxed  at the end of tuning process, we have many alternatives</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1712.10.2005</p>
    <p>Sample Tuning</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1812.10.2005</p>
    <p>Relaxing Configurations  Replacing a subset of its indexes and views  Resulting configuration is</p>
    <p>smaller at the cost  less efficient</p>
    <p>Progressively relaxing configurations results with the optimal configuration  fits in the available space  slightly less efficient than the initial one</p>
    <p>There are two transformations  index transformations  view transformations</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 1912.10.2005</p>
    <p>Index Transformations - I</p>
    <p>Merging  obtain the best index I1,2 that can answer all requests</p>
    <p>either I1 or I2 makes  I1 = ([a,b,c];{d,e,f}) and I2 = ([c,d,g];{e})  I1,2 = ([a,b,c];{d,e,f,g})</p>
    <p>Splitting  splitting I1 and I2 produces IC (common index) and</p>
    <p>residual indexes IR1 and IR2  I1 = ([a,b,c];{d,e,f}) and I2 = ([a,c];{e})  IC = ([a,c];{e}), IR1 = ([b];{d,f})</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2012.10.2005</p>
    <p>Index Transformations - II</p>
    <p>Prefixing  obtain an index that can answer arbitrary requests</p>
    <p>Promotion to clustered  any index I over table T can be promoted to a</p>
    <p>clustered index</p>
    <p>Removal  any index can be removed to obtain a new</p>
    <p>configuration</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2112.10.2005</p>
    <p>View Transformations</p>
    <p>Merging  all information from V1 and V2 can be</p>
    <p>obtained in V1,2  Removal</p>
    <p>any view V can be removed to obtain a new configuration</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2212.10.2005</p>
    <p>Template for Search Algorithm</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2312.10.2005</p>
    <p>Configurations and Transformations</p>
    <p>Relaxing configurations  Transform configurations</p>
    <p>useful in other configurations</p>
    <p>Search space is very large  Crucial to develop good</p>
    <p>heuristics to guide the search</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2412.10.2005</p>
    <p>Estimating Configuration Properties</p>
    <p>Critical properties of a given configuration in a physical design problem  the space the current configuration (C) consumes  the expected execution cost of the workload when C</p>
    <p>is available.  To make a good decision on applying the given</p>
    <p>transformation, we should know  the amount of space consumption decrease  the expected execution cost increase  it is hard to guess these properties</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2512.10.2005</p>
    <p>Space Consumption</p>
    <p>Space consumed by a configuration is the sum of sizes of all its physical structures  indexes and views</p>
    <p>To estimate the space consumed by an index  calculate the width of an entry in any node or page  calculate the number of entries per page and node</p>
    <p>The space consumed by a view is estimated as the sum of sizes of each index</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2612.10.2005</p>
    <p>Expected Execution Cost</p>
    <p>Execution cost of the relaxed configuration can be calculated by  re-optimizing all queries in the workload in C and calculate</p>
    <p>difference  very expensive</p>
    <p>re-optimizing the subset of queries in the workload that originally used workloads in C but do not appear in C</p>
    <p>expected to be efficient, but too costly to estimate the increase in execution cost of each resulting configuration</p>
    <p>simple non-intrusive approach  can be implemented by simply analysing information</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2712.10.2005</p>
    <p>Estimating Execution-cost</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2812.10.2005</p>
    <p>Heuristics for Guiding the Research</p>
    <p>Penalty estimates the increase in execution cost per unit of storage  the expected decrease in storage space (T)  the maximum increase in cost (S)  penalty = T/S</p>
    <p>A reasonable heuristic would result with an increase in the penalty value</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 2912.10.2005</p>
    <p>Choosing Relaxing Configuration  Choose the configuration with minimal estimated</p>
    <p>cost  impractical  the most efficient configurations require largest</p>
    <p>amount of space  Another alternative</p>
    <p>if the relaxed configuration does not fit in the available space, further relax it until it is under space constraints</p>
    <p>choose the configuration with highest penalty among all relaxed configurations</p>
    <p>if no candidate configuration is found, choose the configuration with minimum expected cost</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3012.10.2005</p>
    <p>Variations and Optimizations</p>
    <p>Some minor optimizations and variations  Shortcut evaluation</p>
    <p>remove current configuration if no further improvement can be achieved</p>
    <p>Multiple transformations per iteration  apply more than one transformation to the current</p>
    <p>current configuration  Shrinking configurations</p>
    <p>remove all indexes and views that are not used to evaluate any query in the workload</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3112.10.2005</p>
    <p>Experimental Study</p>
    <p>Synthetic and real databases  Hundreds of different workloads  State-of-the-art alternative; Commercial Tuning</p>
    <p>Tool (CTT)  Physical recommendation metric</p>
    <p>improvement = 100% (1  cost (W,CR) / cost (W,CI))  CI = initial configuration, CR = recommended</p>
    <p>configuration, cost(W,C) = expected cost of evaluating all queries in the workload W under configuration C</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3212.10.2005</p>
    <p>No Constraints - I</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3312.10.2005</p>
    <p>No Constraints - II</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3412.10.2005</p>
    <p>No Constraints - III</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3512.10.2005</p>
    <p>Space Constraints</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3612.10.2005</p>
    <p>Conclusion</p>
    <p>New automatic physical database tuning technique is proposed</p>
    <p>This technique uses a relaxation based search</p>
    <p>Reduces assumptions and heuristics  Simple and complexity is reduced  Gives comparable recommendations</p>
  </div>
  <div class="page">
    <p>Boazii University 2005 3712.10.2005</p>
    <p>Thanks</p>
    <p>Any Questions ??</p>
  </div>
</Presentation>
