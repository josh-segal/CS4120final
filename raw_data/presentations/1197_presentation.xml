<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mitigating Asymmetric Read and Write Costs in Cuckoo Hashing for Storage Systems</p>
    <p>Yuanyuan Sun, Yu Hua, Zhangyu Chen, Yuncheng Guo Huazhong University of Science and Technology</p>
    <p>USENIX ATC 2019</p>
  </div>
  <div class="page">
    <p>Large amounts of data  300 new profiles and more than 208 thousand photos per minute [September</p>
    <p>Query Services in Cloud Storage Systems</p>
  </div>
  <div class="page">
    <p>Large amounts of data  300 new profiles and more than 208 thousand photos per minute [September</p>
    <p>Query Services in Cloud Storage Systems</p>
    <p>Demanding the support of low-latency and high-throughput queries</p>
  </div>
  <div class="page">
    <p>Constant-scale read performance  Widely used in key-value stores and relational databases</p>
    <p>Hash structures</p>
  </div>
  <div class="page">
    <p>Constant-scale read performance  Widely used in key-value stores and relational databases</p>
    <p>High latency for handling hash collisions</p>
    <p>Hash structures</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations</p>
    <p>Cuckoo Hashing</p>
    <p>a n k</p>
    <p>m b</p>
    <p>T1</p>
    <p>T2</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations</p>
    <p>Cuckoo Hashing</p>
    <p>Insert(x)</p>
    <p>a n k</p>
    <p>m b</p>
    <p>T1</p>
    <p>T2</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations</p>
    <p>Cuckoo Hashing</p>
    <p>n km</p>
    <p>b</p>
    <p>T1</p>
    <p>T2 x</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity</p>
    <p>Cuckoo Hashing</p>
    <p>a n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m c</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity</p>
    <p>Cuckoo Hashing</p>
    <p>a n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m c</p>
    <p>Find(c)</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity  For insertions, endless loops may occur! =&gt; slow-write performance</p>
    <p>Cuckoo Hashing</p>
    <p>a n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m c</p>
    <p>a nf</p>
    <p>m c</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity  For insertions, endless loops may occur! =&gt; slow-write performance</p>
    <p>Cuckoo Hashing</p>
    <p>a n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m c</p>
    <p>Insert(x)</p>
    <p>a nf</p>
    <p>m c</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity  For insertions, endless loops may occur! =&gt; slow-write performance</p>
    <p>Cuckoo Hashing</p>
    <p>a n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m c</p>
    <p>Insert(x)</p>
    <p>a nf</p>
    <p>m c</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity  For insertions, endless loops may occur! =&gt; slow-write performance</p>
    <p>Cuckoo Hashing</p>
    <p>a</p>
    <p>n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m</p>
    <p>c</p>
    <p>Insert(x)</p>
    <p>a nf</p>
    <p>m c</p>
    <p>x</p>
    <p>An endless loop occurs!</p>
  </div>
  <div class="page">
    <p>Multi-choice hashing  Handling hash collisions: kick-out operations  For lookups, only limited positions are probed =&gt; O(1) time complexity  For insertions, endless loops may occur! =&gt; slow-write performance</p>
    <p>Cuckoo Hashing</p>
    <p>a</p>
    <p>n k</p>
    <p>b</p>
    <p>T1</p>
    <p>T2</p>
    <p>f</p>
    <p>m</p>
    <p>c</p>
    <p>Insert(x)</p>
    <p>a nf</p>
    <p>m c</p>
    <p>x</p>
    <p>An endless loop occurs!</p>
    <p>Bottleneck: Asymmetric reads and writes!</p>
  </div>
  <div class="page">
    <p>Existing concurrency strategy for cuckoo hashing  locking two buckets before each kick-out operation</p>
    <p>(libcuckoo@EuroSys14)</p>
    <p>Concurrency in Multi-core Systems</p>
  </div>
  <div class="page">
    <p>Existing concurrency strategy for cuckoo hashing  locking two buckets before each kick-out operation</p>
    <p>(libcuckoo@EuroSys14)</p>
    <p>Challenges:  Poor insertion performance  Poor scalability</p>
    <p>Concurrency in Multi-core Systems</p>
  </div>
  <div class="page">
    <p>Existing concurrency strategy for cuckoo hashing  locking two buckets before each kick-out operation</p>
    <p>(libcuckoo@EuroSys14)</p>
    <p>Challenges:  Poor insertion performance  Poor scalability</p>
    <p>Design goal:  A high-throughput and concurrency-friendly cuckoo hash table</p>
    <p>Concurrency in Multi-core Systems</p>
  </div>
  <div class="page">
    <p>Pseudoforests to predetermine endless loops</p>
    <p>Efficient concurrency strategy  A graph-grained locking mechanism  Concurrency optimization to reduce the length of critical path</p>
    <p>Higher throughput than state-of-the-art scheme, i.e., libcuckoo</p>
    <p>Our Approach: CoCuckoo</p>
  </div>
  <div class="page">
    <p>Mitigating Asymmetric Read and Write Costs in Cuckoo Hashing for Storage Systems</p>
    <p>Parallelism &amp; Synchronization, Technical Sessions Track 2 10:25 am  10:45 am, Thursday, July 11</p>
    <p>USENIX ATC 2019</p>
  </div>
</Presentation>
