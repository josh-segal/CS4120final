<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Building Software Environments for Research</p>
    <p>Computing Clusters</p>
    <p>Mark Howison, Aaron Shen, Andrew Loomis</p>
    <p>Brown University Center for Computation &amp; Visualization</p>
  </div>
  <div class="page">
    <p>Challenges [HPC] sysadmins face</p>
    <p>Maintain multiple software installations on a shared filesystem supporting hundreds of users -Typical system: HPC: Building/optimizing software -Many different dependencies Multiple hardware setups</p>
    <p>./configure --disable-threads --with-petsc=/gpfs/runtime/opt/petsc/3.0.0-p12 --with-petsc-arch=linux-gnucxx-opt --with-umfpack --with-trilinos=/gpfs/runtime/opt/trilinos/10.2.2 --with-metis=/gpfs/runtime/opt/ metis/4.0.1 --with-blas=goto2 --with-lapack=goto2 --with-p4est=/gpfs/runtime/opt/dealii/7.0.0/p4est --withmumps=/gpfs/runtime/opt/mumps/4.9.2 --with-scalapack=/gpfs/runtime/opt/gotoblas2/1.13/lib --with-blacs=/ gpfs/runtime/opt/gotoblas2/1.13/src/BLACS --enable-mpi CC=mpicc CXX=mpiCC LDFLAGS=-L/gpfs/runtime/opt/ gotoblas2/1.13/lib!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Challenges [HPC] sysadmins face</p>
    <p>Maintain multiple software installations on a shared filesystem supporting hundreds of users -Typical system: HPC: Building/optimizing software -Many different dependencies Multiple hardware setups</p>
    <p>./configure --disable-threads --with-petsc=/gpfs/runtime/opt/petsc/3.0.0-p12 --with-petsc-arch=linux-gnucxx-opt --with-umfpack --with-trilinos=/gpfs/runtime/opt/trilinos/10.2.2 --with-metis=/gpfs/runtime/opt/ metis/4.0.1 --with-blas=goto2 --with-lapack=goto2 --with-p4est=/gpfs/runtime/opt/dealii/7.0.0/p4est --withmumps=/gpfs/runtime/opt/mumps/4.9.2 --with-scalapack=/gpfs/runtime/opt/gotoblas2/1.13/lib --with-blacs=/ gpfs/runtime/opt/gotoblas2/1.13/src/BLACS --enable-mpi CC=mpicc CXX=mpiCC LDFLAGS=-L/gpfs/runtime/opt/ gotoblas2/1.13/lib!</p>
  </div>
  <div class="page">
    <p>Pymodules Pymodules: Our enhanced Environment Modules* system designed to mitigate the above issues.</p>
    <p>Pymodules is User-friendly Flexible Fast</p>
    <p>/gpfs/runtime/opt/ python</p>
    <p>Without modules With modules PYTHON_ROOT=/gpfs/runtime/opt/python/ 2.7.3! export PATH=$PYTHON_ROOT/bin:$PATH! export LD_LIBRARY_PATH=$PYTHON_ROOT/lib: $LD_LIBRARY_PATH! export MANPATH=$PYTHON_ROOT/share/man: $PYTHON_ROOT/man:$MANPATH! export PKG_CONFIG_PATH=$PYTHON_ROOT/lib/ pkgconfig:$PKG_CONFIG_PATH! !</p>
    <p>! ! module load python/2.7.3!</p>
  </div>
  <div class="page">
    <p>Pymodules relies on modulefiles</p>
    <p>Modulefiles: small, INI-style text files for each application specifying changes to be made to the environment, for each version (example: Boost C++ modulefile) [DEFAULT] brief = Boost - The Boost C++ Libraries url = http://www.boost.org/ category = libraries prepend CPATH = %(rootdir)s/include prepend LIBRARY_PATH = %(rootdir)s/lib prepend LD_RUN_PATH = %(rootdir)s/lib set BOOST = -L%(rootdir)s/lib set BOOST_DIR = %(rootdir)s set BOOST_ROOT = %(rootdir)s [1.49.0] default = true [1.52.0] prepend CPATH= %(rootdir)s/src/boost_1_52_0 [1.40.0]</p>
    <p>all versions present on system</p>
    <p>common environment settings</p>
    <p>metadata</p>
  </div>
  <div class="page">
    <p>Using modules in the software installation process Build time issues Software can depend on (many) other softwares in the build process, leading to very complicated builds. Solution: Dependency modules set LIBRARY_PATH and CPATH.</p>
    <p>./configure --disable-threads --with-petsc=/gpfs/runtime/opt/petsc/ 3.0.0-p12 --with-petsc-arch=linux-gnu-cxx-opt --with-umfpack --withtrilinos=/gpfs/runtime/opt/trilinos/10.2.2 --with-metis=/gpfs/runtime/ opt/metis/4.0.1 --with-blas=goto2 --with-lapack=goto2 --with-p4est=/ gpfs/runtime/opt/dealii/7.0.0/p4est --with-mumps=/gpfs/runtime/opt/ mumps/4.9.2 --with-scalapack=/gpfs/runtime/opt/gotoblas2/1.13/lib -with-blacs=/gpfs/runtime/opt/gotoblas2/1.13/src/BLACS --enable-mpi CC=mpicc CXX=mpiCC LDFLAGS=-L/gpfs/runtime/opt/gotoblas2/1.13/lib!</p>
    <p>./configure --disable-threads --with-petsc-arch=linux-gnu-cxx-opt --with-umfpack --enable-mpi CC=mpicc CXX=mpiCC!</p>
  </div>
  <div class="page">
    <p>Using modules in the software installation process, cont. Runtime issues Modules can depend on other modules libraries @ runtime Goal: Make things simple as possible for the user</p>
    <p>User (@ Runtime) Admin (@ build time)</p>
    <p>Make user load dependency modules (LD_LIBRARY_PATH)</p>
    <p>module load deal.ii! module load openmpi! module load petsc! !</p>
    <p>module load deal.ii! module load openmpi! module load petsc! !</p>
    <p>Dependencies to module X set LD_RUN_PATH</p>
    <p>module load deal.ii! module load deal.ii! module load openmpi! module load petsc! !</p>
  </div>
  <div class="page">
    <p>Using modules to organize software inventory Usability issues Finding the application you want out of 500+ options is a challenge. Use a database, not files, to keep track of all installed software. Runtime of module avail command:</p>
    <p>Files Scales up w/# of software packages installed</p>
    <p>Database Constant</p>
  </div>
  <div class="page">
    <p>Using modules to organize software inventory Modules offer the following features: -Search by package name/version (can also search by regex) -Tab completion -Store metadata: category of softwaredate last loaded, etc ! [user@ccv ~]$ module avail! ~~~~~~~~~~~~category: Math ~~~~~~~~~~! atlas/3.10.1 sage/5.11 ! ~~~~~~~~~~~~category: bio ~~~~~~~~~~~! abyss/1.3.4 macs/1.4.2 ! agalma/0.3.0 macs/2.0.10 ! !</p>
  </div>
  <div class="page">
    <p>Using modules for performance optimization</p>
    <p>Performance issues -Heterogeneous hardware</p>
    <p>-AMD vs. Intel -SIMD instruction set -Processor Model</p>
    <p>Solution: -Optimized modules for different architectures Example: LLCBench benchmark linked against Intel and AMD linear algebra routines</p>
  </div>
  <div class="page">
    <p>(LLCBench)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Pymodules vs other tools Environment Modules (original): -Tcl syntax -Uses files to store module information CDE (Guo): -Build once, run everywhere -Not optimized for specific hardware or libraries</p>
    <p>Traditional package managers -Not good at managing multiple versions of same software.</p>
  </div>
  <div class="page">
    <p>Conclusion -Software modules can maintain multiple software installations on shared system. -Can improve ease of software installation and use, performance gains -Pymodules Further work: Integrating the install process</p>
    <p>-Pymodules is available at http://www.bitbucket.org/mhowison/pymodules</p>
  </div>
</Presentation>
