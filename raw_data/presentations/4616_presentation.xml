<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ThreadThread--Safe Safe</p>
    <p>Dynamic Binary Translation Dynamic Binary Translation</p>
    <p>using Transactional Memoryusing Transactional Memory</p>
    <p>JaeWoong ChungJaeWoong Chung, Michael Dalton, Hari, Michael Dalton, Hari Kannan,Kannan,</p>
    <p>Christos KozyrakisChristos Kozyrakis</p>
    <p>Computer Systems LaboratoryComputer Systems Laboratory</p>
    <p>Stanford UniversityStanford University</p>
    <p>http://csl.stanford.eduhttp://csl.stanford.edu</p>
  </div>
  <div class="page">
    <p>Dynamic Binary Translation (DBT)Dynamic Binary Translation (DBT)</p>
    <p>DBTDBT</p>
    <p>Short code sequence is translated in runShort code sequence is translated in run--timetime</p>
    <p>PIN, Valgrind, DynamoRIO, StarDBT, etcPIN, Valgrind, DynamoRIO, StarDBT, etc</p>
    <p>Original Translated DBT Tool</p>
    <p>DBT use casesDBT use cases</p>
    <p>Translation on new target architectureTranslation on new target architecture</p>
    <p>JIT optimizations in virtual machinesJIT optimizations in virtual machines</p>
    <p>Binary instrumentationBinary instrumentation</p>
    <p>Profiling, security, debugging,  Profiling, security, debugging,</p>
    <p>Original</p>
    <p>Binary</p>
    <p>Translated</p>
    <p>BinaryDBT Framework</p>
  </div>
  <div class="page">
    <p>Example: Dynamic Information Flow Example: Dynamic Information Flow</p>
    <p>Tracking (DIFT)Tracking (DIFT)</p>
    <p>t = XX ; // untrusted data from network</p>
    <p>.</p>
    <p>swap t, u1;</p>
    <p>taint(t) = 1;</p>
    <p>swap taint(t), taint(u1);</p>
    <p>Variables</p>
    <p>Taint bits</p>
    <p>t u1 u2</p>
    <p>XX</p>
    <p>XX</p>
    <p>Untrusted data are tracked throughout executionUntrusted data are tracked throughout execution</p>
    <p>A taint bit per memory byte is used to track untrusted data.A taint bit per memory byte is used to track untrusted data.</p>
    <p>Security policy uses the taint bit.Security policy uses the taint bit.</p>
    <p>E.g. untrusted data should not be used as syscall argument.E.g. untrusted data should not be used as syscall argument.</p>
    <p>Dynamic instrumentation to propagate and check taint bit. Dynamic instrumentation to propagate and check taint bit.</p>
    <p>u2 = u1;</p>
    <p>swap taint(t), taint(u1);</p>
    <p>taint(u2) = taint(u1);</p>
    <p>Taint bits 1 1</p>
  </div>
  <div class="page">
    <p>DBT &amp; MultithreadingDBT &amp; Multithreading</p>
    <p>Multithreaded executables as inputMultithreaded executables as input</p>
    <p>ChallengesChallenges</p>
    <p>Atomicity of target instructions Atomicity of target instructions</p>
    <p>e.g. comparee.g. compare--andand--exchange exchange  e.g. comparee.g. compare--andand--exchange exchange</p>
    <p>Atomicity of additional instrumentation Atomicity of additional instrumentation</p>
    <p>Races in accesses to application data &amp; DBT metadataRaces in accesses to application data &amp; DBT metadata</p>
    <p>Easy but unsatisfactory solutionsEasy but unsatisfactory solutions</p>
    <p>Do not allow multithreaded programs (StarDBT)Do not allow multithreaded programs (StarDBT)</p>
    <p>Serialize multithreaded execution (Valgrind)Serialize multithreaded execution (Valgrind)</p>
  </div>
  <div class="page">
    <p>DIFT Example: DIFT Example:</p>
    <p>MetaData Race MetaData Race  Security BreachSecurity Breach</p>
    <p>User code uses atomic instructions.User code uses atomic instructions.</p>
    <p>After instrumentation, there are races on taint bits.After instrumentation, there are races on taint bits.</p>
    <p>Thread 1</p>
    <p>swap t, u1;</p>
    <p>Thread2</p>
    <p>u2 = u1;u2 = u1;</p>
    <p>swap taint(t), taint(u1);</p>
    <p>taint(u2) = taint(u1);</p>
    <p>Variables</p>
    <p>Taint bits</p>
    <p>t u1 u2</p>
    <p>XX</p>
    <p>XX</p>
  </div>
  <div class="page">
    <p>Can We Fix It with Locks? Can We Fix It with Locks?</p>
    <p>IdeaIdea</p>
    <p>Enclose access to data and associated metadata, within a locked region.Enclose access to data and associated metadata, within a locked region.</p>
    <p>ProblemsProblems</p>
    <p>CoarseCoarse--grained locksgrained locks</p>
    <p>performance degradationperformance degradation performance degradationperformance degradation</p>
    <p>FineFine--grained locksgrained locks</p>
    <p>locking overhead, convoying, limited scope of DBT optimizationslocking overhead, convoying, limited scope of DBT optimizations</p>
    <p>Lock nesting between app &amp; DBT locksLock nesting between app &amp; DBT locks</p>
    <p>potential deadlockpotential deadlock</p>
    <p>Tool developers should be a feature + multithreading experts.Tool developers should be a feature + multithreading experts.</p>
  </div>
  <div class="page">
    <p>Transactional MemoryTransactional Memory</p>
    <p>Atomic and isolated execution of a group of instructionsAtomic and isolated execution of a group of instructions  All or no instructions are executed.All or no instructions are executed.</p>
    <p>Intermediate results are not seen by other transactions.Intermediate results are not seen by other transactions.</p>
    <p>ProgrammerProgrammer  A transaction encloses a group of instructions.A transaction encloses a group of instructions. A transaction encloses a group of instructions.A transaction encloses a group of instructions.</p>
    <p>The transaction is executed sequentially with the other transactions and The transaction is executed sequentially with the other transactions and nonnon--transactional instructions.transactional instructions.</p>
    <p>TM systemTM system  Parallel transaction execution.Parallel transaction execution.</p>
    <p>Register checkpoint, data versioning, conflict detection, rollback.Register checkpoint, data versioning, conflict detection, rollback.</p>
    <p>Hardware, software, or hybrid TM implementation.Hardware, software, or hybrid TM implementation.</p>
  </div>
  <div class="page">
    <p>Transaction for DBTTransaction for DBT</p>
    <p>IdeaIdea</p>
    <p>DBT instruments a transaction to enclose accesses to (data, metadata) DBT instruments a transaction to enclose accesses to (data, metadata) within the transaction boundary.within the transaction boundary.</p>
    <p>Thread 1 Thread2</p>
    <p>TX_Begin TX_Begin</p>
    <p>AdvantagesAdvantages</p>
    <p>Atomic executionAtomic execution</p>
    <p>High performance through optimistic concurrencyHigh performance through optimistic concurrency</p>
    <p>Support for nested transactionsSupport for nested transactions</p>
    <p>swap t, u1;</p>
    <p>swap taint(t), taint(u1);</p>
    <p>u2 = u1;</p>
    <p>taint(u2) = taint(u1);</p>
    <p>TX_Begin</p>
    <p>TX_End</p>
    <p>TX_Begin</p>
    <p>TX_End</p>
  </div>
  <div class="page">
    <p>Yes, it fixes the problem. But Yes, it fixes the problem. But</p>
    <p>DBT transaction per instruction is heavy.DBT transaction per instruction is heavy.</p>
    <p>User locks are nested with DBT transactions.User locks are nested with DBT transactions.</p>
    <p>User transactions overlap partially with DBT transactions.User transactions overlap partially with DBT transactions. User transactions overlap partially with DBT transactions.User transactions overlap partially with DBT transactions.</p>
    <p>There will be I/O operations within DBT transactions.There will be I/O operations within DBT transactions.</p>
    <p>UserUser--coded conditional synchronization may be tricky.coded conditional synchronization may be tricky.</p>
    <p>Transactions are not free.Transactions are not free.</p>
  </div>
  <div class="page">
    <p>Granularity of Transaction InstrumentationGranularity of Transaction Instrumentation</p>
    <p>Per instructionPer instruction  High overhead of executing TX_Begin and TX_EndHigh overhead of executing TX_Begin and TX_End</p>
    <p>Limited scope for DBT optimizationsLimited scope for DBT optimizations</p>
    <p>Per basic blockPer basic block  Amortizing the TX_Begin and TX_End overheadAmortizing the TX_Begin and TX_End overhead Amortizing the TX_Begin and TX_End overheadAmortizing the TX_Begin and TX_End overhead</p>
    <p>Easy to match TX_Begin and TX_EndEasy to match TX_Begin and TX_End</p>
    <p>Per tracePer trace  Further amortization of the overheadFurther amortization of the overhead</p>
    <p>Potentially high transaction conflictPotentially high transaction conflict</p>
    <p>ProfileProfile--based sizingbased sizing  Optimize transaction size based on transaction abort ratioOptimize transaction size based on transaction abort ratio</p>
  </div>
  <div class="page">
    <p>Interaction with Application Code (1)Interaction with Application Code (1)</p>
    <p>User locks semantics should be preserved regardless of DBT User locks semantics should be preserved regardless of DBT</p>
    <p>transactions.transactions.</p>
    <p>If transaction If transaction  locked region, fine.locked region, fine.</p>
    <p>To TM, lock variables are just shared variables.To TM, lock variables are just shared variables.</p>
    <p>If transaction If transaction  locked region, fine.locked region, fine. If transaction If transaction  locked region, fine.locked region, fine.</p>
    <p>Transactions are executed in critical sections protected with locks.Transactions are executed in critical sections protected with locks.</p>
    <p>If partially overlapped, split the DBT transaction.If partially overlapped, split the DBT transaction.</p>
    <p>User transactions may partially overlap with DBT transactions.User transactions may partially overlap with DBT transactions.</p>
    <p>If fully nested, fine.If fully nested, fine.</p>
    <p>Either true transaction nesting or subsumption.Either true transaction nesting or subsumption.</p>
    <p>If partially overlapping, split the DBT transaction.If partially overlapping, split the DBT transaction.</p>
  </div>
  <div class="page">
    <p>Interaction with Application Code (2)Interaction with Application Code (2)</p>
    <p>I/O operations are not rolled back.I/O operations are not rolled back.</p>
    <p>Terminate the DBT transaction.Terminate the DBT transaction.</p>
    <p>Typically, they work as barriers in DBTs optimization.Typically, they work as barriers in DBTs optimization.</p>
    <p>Conditional synchronization may cause liveConditional synchronization may cause live--lock.lock.</p>
    <p>ReRe--optimize the code to have a transaction per basic block.optimize the code to have a transaction per basic block. ReRe--optimize the code to have a transaction per basic block.optimize the code to have a transaction per basic block.</p>
    <p>Thread 1</p>
    <p>while(!done2);</p>
    <p>done1 = true;</p>
    <p>Thread 2</p>
    <p>done2 = true;</p>
    <p>while(!done1);</p>
    <p>TX_Begin</p>
    <p>TX_End</p>
    <p>TX_Begin</p>
    <p>TX_End</p>
    <p>Initially, done1 = done2 = false</p>
  </div>
  <div class="page">
    <p>Evaluation EnvironmentEvaluation Environment</p>
    <p>DBT frameworkDBT framework</p>
    <p>PIN v2.0 with multithreading supportPIN v2.0 with multithreading support</p>
    <p>DIFT as a PIN tool exampleDIFT as a PIN tool example</p>
    <p>Execution environmentExecution environment</p>
    <p>x86 server with 4 dualx86 server with 4 dual--core processorscore processors</p>
    <p>Software TM systemSoftware TM system</p>
    <p>Multithreaded applicationsMultithreaded applications</p>
    <p>6 from SPLASH6 from SPLASH</p>
    <p>3 from SPECOmp3 from SPECOmp</p>
  </div>
  <div class="page">
    <p>Baseline Performance ResultsBaseline Performance Results</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>B a rn e s E q u a ke F m m R a d io sity R a d ix S w im T o m c a tv W a te r W a te r</p>
    <p>sp a tia l</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>41 % overhead on the average41 % overhead on the average</p>
    <p>Transaction at the DBT trace granularityTransaction at the DBT trace granularity</p>
  </div>
  <div class="page">
    <p>Transaction OverheadsTransaction Overheads</p>
    <p>Transaction begin/endTransaction begin/end</p>
    <p>Register checkpointRegister checkpoint</p>
    <p>Initializing and cleaning TM metadataInitializing and cleaning TM metadata</p>
    <p>Per memory access Per memory access</p>
    <p>Tracking the readTracking the read--set &amp; writeset &amp; write--setset</p>
    <p>Detecting conflictsDetecting conflicts</p>
    <p>Data versioningData versioning</p>
    <p>Transaction abortTransaction abort</p>
    <p>Applying logs and restarting the transactionApplying logs and restarting the transaction</p>
    <p>In our tests, In our tests, 0.03%0.03% of transactionsof transactions abortabort</p>
  </div>
  <div class="page">
    <p>Transaction Begin/End OverheadTransaction Begin/End Overhead</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>B a rn e s</p>
    <p>E q u a ke</p>
    <p>F m m</p>
    <p>Transaction SizingTransaction Sizing</p>
    <p>Longer TX amortizes the TX_Begin/End overhead.Longer TX amortizes the TX_Begin/End overhead.</p>
    <p>Nu m b e r o f b a sic b lo c ks p e r tra n sa c tio n</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>R a d ix</p>
    <p>T o m c a tv</p>
  </div>
  <div class="page">
    <p>Per Memory Access OverheadPer Memory Access Overhead</p>
    <p>Instrumentation of software TM barrierInstrumentation of software TM barrier</p>
    <p>TX_Begin</p>
    <p>u = t;</p>
    <p>read_barrier(t);</p>
    <p>write_barrier(u);</p>
    <p>read_barrier(taint(t));</p>
    <p>What happens in the barrier?What happens in the barrier?</p>
    <p>Conflict detection by recording addressesConflict detection by recording addresses</p>
    <p>Observation 1 : needed only for shared variablesObservation 1 : needed only for shared variables</p>
    <p>Data versioning by logging old valuesData versioning by logging old values</p>
    <p>Observation 2 : not needed for stack variablesObservation 2 : not needed for stack variables</p>
    <p>taint(u) = taint(t);</p>
    <p>TX_end</p>
    <p>read_barrier(taint(t));</p>
    <p>write_barrier(taint(u));</p>
  </div>
  <div class="page">
    <p>Software Transaction Optimization (1)Software Transaction Optimization (1)</p>
    <p>Categorization of memory access typesCategorization of memory access types</p>
    <p>In stack? Y N</p>
    <p>Data Versioning</p>
    <p>Conflict Detection</p>
    <p>After</p>
    <p>TX_Begin? Private?</p>
    <p>W/ lock?</p>
    <p>Y Y</p>
    <p>Y</p>
    <p>N N</p>
    <p>N</p>
    <p>SHARED</p>
    <p>STACK PRIVATEIDEMPOTENT</p>
    <p>STACK</p>
    <p>BENIGN RACE</p>
  </div>
  <div class="page">
    <p>Software Transaction Optimization (2)Software Transaction Optimization (2)</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>B a s elin e</p>
    <p>S T A C K</p>
    <p>Average runtime overheadAverage runtime overhead</p>
    <p>36% with STACK36% with STACK</p>
    <p>34% with BENIGN RACE34% with BENIGN RACE</p>
    <p>b a rn e s e q u a ke fm m ra d io si ty ra d ix sw im to m c a tv w a te r w a te r</p>
    <p>sp a tia l</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li z</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>B E N IG N</p>
    <p>R A C E</p>
  </div>
  <div class="page">
    <p>Hardware Acceleration (1)Hardware Acceleration (1)</p>
    <p>With software optimization, the overhead is about 35%.With software optimization, the overhead is about 35%.</p>
    <p>Emulating 3 types of hardware accelerationEmulating 3 types of hardware acceleration</p>
    <p>Cycles spent in transaction violation is under 0.03%.Cycles spent in transaction violation is under 0.03%.</p>
    <p>Register Conflict Data</p>
    <p>Register</p>
    <p>Checkpointing</p>
    <p>Conflict</p>
    <p>Detection</p>
    <p>Data</p>
    <p>Versioning</p>
    <p>STM+ HW</p>
    <p>(single-cycle)</p>
    <p>SW read-set /</p>
    <p>write-set</p>
    <p>SW</p>
    <p>Undo-log</p>
    <p>HybridTM HW</p>
    <p>(single-cycle)</p>
    <p>HW</p>
    <p>Signatures</p>
    <p>SW</p>
    <p>Undo-log</p>
    <p>HTM HW</p>
    <p>(single-cycle)</p>
    <p>HW read-set /</p>
    <p>write-set</p>
    <p>HW</p>
    <p>Undo-log</p>
  </div>
  <div class="page">
    <p>Hardware Acceleration (2)Hardware Acceleration (2)</p>
    <p>N o</p>
    <p>rm a</p>
    <p>il iz</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
    <p>S T M</p>
    <p>S T M+</p>
    <p>H y T M</p>
    <p>H T M</p>
    <p>Overhead reductionOverhead reduction</p>
    <p>28% with STM+, 12% with HybridTM, and 6% with HTM28% with STM+, 12% with HybridTM, and 6% with HTM</p>
    <p>Notice the diminishing returnNotice the diminishing return</p>
    <p>spatial</p>
    <p>N o</p>
    <p>rm a</p>
    <p>il iz</p>
    <p>e d</p>
    <p>O v</p>
    <p>e rh</p>
    <p>e a</p>
    <p>d (</p>
    <p>% )</p>
  </div>
  <div class="page">
    <p>ConclusionConclusion</p>
    <p>MultiMulti--threaded executables are a challenge for DBT in the era threaded executables are a challenge for DBT in the era</p>
    <p>of multiof multi--core.core.</p>
    <p>Races on metadata accessRaces on metadata access</p>
    <p>Use transactions for multiUse transactions for multi--threaded translated code.threaded translated code.</p>
    <p>With software optimization, the overhead is around 35%.With software optimization, the overhead is around 35%.</p>
    <p>Further software optimization may be possible.Further software optimization may be possible.</p>
    <p>Hardware acceleration reduces the overhead down to 6%.Hardware acceleration reduces the overhead down to 6%.</p>
    <p>Remember the diminishing return.Remember the diminishing return.</p>
  </div>
</Presentation>
