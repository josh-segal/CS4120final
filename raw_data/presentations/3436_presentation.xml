<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Folder Tree Structure for Cryptographic File Systems</p>
    <p>Dominik Grolimund, Luzius Meisser, Stefan Schmid, Roger Wattenhofer</p>
    <p>Computer Engineering and Networks Laboratory (TIK), ETH Zurich</p>
    <p>SRDS 06</p>
    <p>October 3, Leeds, UK</p>
    <p>Cryptree</p>
    <p>Distributed Computing</p>
    <p>Group</p>
  </div>
  <div class="page">
    <p>Cryptree</p>
    <p>- A key management scheme developed for Kangoo, our distributed file system</p>
    <p>- Manages encryption keys of files and folders - Leverages the file systems folder hierarchy to</p>
    <p>achieve intuitive semantics and efficiency</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Basics  Cryptree  Performance  Discussion</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Kangoo: a large-scale distributed file system (comparable to OceanStore, Celeste, CFS)</p>
    <p>Problem: Enforcement &amp; management of access rights on untrusted (but reliable) storage</p>
    <p>We cannot trust the storage device to keep our data secret</p>
    <p>Everything needs to be encrypted  We need a clever key management scheme</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Existing ideas: - Server enforces access rights  not feasible</p>
    <p>here - Classic Access Control List (CACL) Approach,</p>
    <p>found in systems like Plutus, SiRiUs, OceanStore (?)</p>
    <p>- Many papers about hierarchical key management in general, focus on crypographic aspects</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Motivation  Basics  Cryptree  Performance  Discussion</p>
  </div>
  <div class="page">
    <p>Basics: Access Control with Keys</p>
    <p>- Read Access Control: Items are encrypted such that only legitimate accessors can decrypt them</p>
    <p>- Write Access Control: A sign/verify key pair is used to prove the legitimacy of write operations</p>
  </div>
  <div class="page">
    <p>Basics: Lazy Revocation</p>
    <p>When someone loses access to an item, that item needs to be encrypted with a new key in order to prevent the former accessor to access the item in future.</p>
    <p>Lazy revocation allows to postpone this (expensive) reencryption until the next update of the item.</p>
    <p>Better performance at the price of slightly lower security. An adversary and former accessor of an item could continue to access it if he has kept a copy of the encryption key. Without lazy revocation, he would have had to keep a copy of the item itself to do so.</p>
  </div>
  <div class="page">
    <p>Basics: CACL-Approach</p>
    <p>The classic, access-control-list based approach:</p>
    <p>Access control is managed for each item individually. To grant Bob access to an item, the access key is encrypted with Bobs public key and attached to that item.</p>
    <p>egypt</p>
    <p>images</p>
    <p>cancun</p>
    <p>projects alice</p>
    <p>sunset.jpg</p>
    <p>trip</p>
    <p>jeep.jpg</p>
    <p>maya.jpg</p>
    <p>audio</p>
    <p>Bob</p>
  </div>
  <div class="page">
    <p>Basics: CACL-Approach</p>
    <p>Problems with CACL: - When granting u users access to f files, n*f</p>
    <p>access control list entries need to be created - On structural changes, access rights need to</p>
    <p>be adjusted or they will get scattered - No confidentiality of access rights</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Basics  Cryptree  Performance  Discussion</p>
  </div>
  <div class="page">
    <p>Cryptree: Semantics</p>
    <p>Dynamic Inheritance of Access Rights</p>
    <p>Downwards: full, recursive</p>
    <p>Upwards: limited, ancestor names</p>
  </div>
  <div class="page">
    <p>Cryptree: Cryptographic Links</p>
    <p>Knowing K1 and the link allows to derive K2</p>
    <p>Symmetric Link: symmetric cryptography, requires knowledge of K1 to update</p>
    <p>Asymmetric Link: asymmetric cryptography, K2 can be replaced without knowing K1  More flexible than symmetric link, but expensive</p>
  </div>
  <div class="page">
    <p>Cryptree: Read Access</p>
    <p>Clearance Key, revealed to grant access</p>
    <p>Subfolder Key  Subfolders</p>
    <p>Files Key  Files in folder</p>
    <p>Backlink Key</p>
    <p>Data Key  Folder name</p>
  </div>
  <div class="page">
    <p>Cryptree: Read Access</p>
    <p>Benefits:</p>
    <p>Grant recursive access by only revealing one key</p>
    <p>Anonymous access, even writers do not need to know other accessors</p>
    <p>Access rights are implicitely updated when structure changes</p>
  </div>
  <div class="page">
    <p>Cryptree: Read Access</p>
    <p>Whole read access structure</p>
  </div>
  <div class="page">
    <p>Write Access Cryptree</p>
    <p>Similar to read access tree</p>
  </div>
  <div class="page">
    <p>Cryptree: Operations</p>
    <p>When someone loses read access as a result of an operation, the involved items need to be reencrypted. We do this lazily on their next change (lazy revocation).</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Basics  Cryptree  Evaluation  Discussion</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Besides its semantical advantages, the Cryptree should also perform better than the CACLApproach.</p>
    <p>We wrote sandbox implementations of different approaches and let them perform a given set of operations.</p>
    <p>Test set: 30000 files (avg. size 2.5 MB), 2500 folders, 1000000 operations (ordered by likelihood: read, create, delete, move, modify, grant access, revoke access, grant write access, revoke write access)</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Time spent for key management per operation</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Total processing time spent for cryptography per operation</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Basics  Cryptree  Performance  Discussion</p>
  </div>
  <div class="page">
    <p>Discussion: Conclusions</p>
    <p>We have leveraged the file systems folder hierarchy for key management and achieved</p>
    <p>- Intuitive Access Control Semantics</p>
    <p>- Efficiency</p>
    <p>- Simplicity, no elaborate cryptographic knowledge required</p>
  </div>
  <div class="page">
    <p>Discussion: Questions</p>
    <p>?</p>
  </div>
</Presentation>
