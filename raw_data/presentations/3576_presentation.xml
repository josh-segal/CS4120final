<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SafeHidden: An Efficient and Secure Information Hiding Technique Using Re-randomization</p>
    <p>Zhe Wang1, Chenggang Wu1, Yinqian Zhang2, Bowen Tang1, Pen-Chung Yew3, Mengyao Xie1, Yuanming Lai1, Yan Kang1, Yueqiang Cheng4, and Zhiping Shi5</p>
  </div>
  <div class="page">
    <p>Information Hiding Technique  Hiding an important area at a random location  Has no pointers in memory referring to it  Is as small as possible  Normal accesses are done through</p>
    <p>an offset from a dedicated register</p>
    <p>It is widely used in  Code Pointer Integrity  Control Flow Integrity  Code (Re-)Randomization</p>
    <p>Information Hiding Technique</p>
    <p>Address Space</p>
    <p>Hidden</p>
    <p>libraries executables</p>
    <p>[heap]</p>
    <p>[stack]</p>
  </div>
  <div class="page">
    <p>Attacks against Information Hiding</p>
    <p>Safe Area</p>
    <p>Virtual Address</p>
    <p>%gs:0x0 0x1fafe7fbf000</p>
    <p>main library stack</p>
    <p>Crash</p>
    <p>CROP attack [NDSS16]  Using the exception handling mechanism to avoid crash.</p>
    <p>Clone-probing attack [S&amp;P14]  Probing the child processes to avoid crash the parent process.</p>
    <p>Crash Bingo</p>
    <p>Avoid Crash</p>
  </div>
  <div class="page">
    <p>Attacks against Information Hiding</p>
    <p>Safe Area</p>
    <p>Virtual Address</p>
    <p>%gs:0x0 0x1fafe7fbf000</p>
    <p>main library stack</p>
    <p>Bingo</p>
    <p>Reduce Entropy</p>
    <p>Safe Area</p>
    <p>Safe Area</p>
    <p>Safe Area</p>
    <p>Safe Area</p>
    <p>Safe Area</p>
    <p>Attack via spraying safe areas [SECURITY16]  Spraying thread-local safe areas via spraying threads.</p>
  </div>
  <div class="page">
    <p>Safe Area</p>
    <p>Virtual Address</p>
    <p>%gs:0x0 0x1fafe7fbf000</p>
    <p>main library stack</p>
    <p>Attack via spraying safe areas [SECURITY16]  Spraying thread-local safe areas via spraying threads.</p>
    <p>Attack via filling memory holes [SECURITY16]  Allocating memory to occupy the unmapped areas.</p>
    <p>Bingo</p>
    <p>Reduce Entropy</p>
    <p>Attacks against Information Hiding</p>
  </div>
  <div class="page">
    <p>Safe Area</p>
    <p>Virtual Address</p>
    <p>Physical Address</p>
    <p>main library stack</p>
    <p>Attack against Page Table Structure[NDSS17]</p>
    <p>= 0x???????????</p>
    <p>PRIME+PROBE</p>
    <p>%gs:0x00x1fafe7fbf000 =</p>
    <p>Leak Page Table</p>
    <p>Image from https://www.vusec.net/projects/xlate/</p>
    <p>Attacks against Information Hiding</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Attack vectors</p>
    <p>Our design</p>
    <p>System Implementation</p>
    <p>Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>We consider an IH-based defense that protects a vulnerable application against code reuse attacks.  Web servers or browsers.</p>
    <p>The design of this IH-based defense is not flawed:  Before launching code reuse attacks, attackers must circumvent the defense by</p>
    <p>revealing the safe area.</p>
    <p>Attackers abilities  Read and write arbitrary memory locations;  Allocate and free arbitrary memory areas;  Create any number of threads;</p>
    <p>Threat Model</p>
  </div>
  <div class="page">
    <p>Vector-1 Gathering memory layout information to help to locate safe areas</p>
    <p>Vector-2 Creating opportunities to probe without crashing the system</p>
    <p>Vector-3 Reducing the entropy of the randomized safe area locations</p>
    <p>Vector-4 Monitoring page-table access patterns using cache side channels</p>
    <p>Attack Vectors  Summary of Attacks</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Attack vectors</p>
    <p>Our design</p>
    <p>System Implementation</p>
    <p>Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>SafeHidden is proposed to block these attack vectors</p>
    <p>Mediating all types of probes that may leak the locations</p>
    <p>Randomizing safe areas upon detecting suspicious probes</p>
    <p>Isolating the thread-local safe areas</p>
    <p>Raising security alarms when illegal probes are detected</p>
    <p>Our Design  SafeHidden</p>
  </div>
  <div class="page">
    <p>Vector-1 Gathering memory layout information to help to locate safe areas</p>
    <p>Address Space</p>
    <p>libraries executables</p>
    <p>[heap]</p>
    <p>[stack]</p>
    <p>Hidden</p>
    <p>But persistent attacks could always succeed.</p>
    <p>Block Attack Vector-1</p>
    <p>Events Interception Points memory management system calls mmap, mprotect, brk,</p>
    <p>Syscalls that could return EFAULT read, write, access, send, ...</p>
    <p>cloning memory space clone, fork, vfork</p>
    <p>memory access instructions page fault exception</p>
  </div>
  <div class="page">
    <p>Vector-2 Creating opportunities to probe safe areas without crashing the system</p>
    <p>Address Space</p>
    <p>libraries executables</p>
    <p>[heap]</p>
    <p>[stack]</p>
    <p>Hidden</p>
    <p>Leave Traps</p>
    <p>But persistent attacks could always succeed. Address Space</p>
    <p>libraries executables</p>
    <p>[heap]</p>
    <p>[stack]</p>
    <p>Hidden</p>
    <p>Block Attack Vector-2</p>
  </div>
  <div class="page">
    <p>Vector-3 Reducing the entropy of the randomized safe area locations</p>
    <p>SafeHidden prevents unlimited shrink of unmapped areas and unrestricted growth of safe areas.</p>
    <p>The maximum size of the mapped area is set to 64 TB.</p>
    <p>Using thread-private memory mechanism to isolate thread-local safe areas.  The entropy will not be reduced by thread spraying.  Using hardware-assisted virtualization techniques.  Each thread will be assigned a thread-private EPT (Extended Page Table).</p>
    <p>Block Attack Vector-3</p>
    <p>More Details are in Our Paper</p>
  </div>
  <div class="page">
    <p>Vector-4 Monitoring page-table access patterns using cache side channels</p>
    <p>Observation It needs hundreds of Prime+Probe or Evict+Time tests. It is also imperative that the addresses of the PTEs corresponding to this</p>
    <p>memory area are not changed. The cache entries mapped by these PTEs are not changed.</p>
    <p>Solution: Re-randomization!</p>
    <p>Block Attack Vector-4</p>
  </div>
  <div class="page">
    <p>SafeHidden also monitors legal accesses to the safe area that may be triggered by the attacker on purpose.</p>
    <p>Once such a legal access is detected, SafeHidden will randomize the location of the safe area.</p>
    <p>But, how to detect this legal access from the attacker?</p>
    <p>Block Attack Vector-4</p>
  </div>
  <div class="page">
    <p>The key step of cache side-channel attack against page table is to force a page table walk.</p>
    <p>We could intercept TLB misses !!!</p>
    <p>But, how to only intercept the TLB miss occurred in safe areas?</p>
    <p>Block Attack Vector-4</p>
    <p>Image from https://www.vusec.net/projects/anc/</p>
  </div>
  <div class="page">
    <p>When the reserved bit is set, a page fault exception will be triggered during the page table walk.</p>
    <p>SafeHidden sets the reserved bit in all of the PTEs for the safe areas to detect the TLB misses. When a TLB miss occurs, it is trapped into the pf handler.</p>
    <p>Convert TLB Miss to Page Fault Exception</p>
  </div>
  <div class="page">
    <p>It could cause many false alarm TLB misses at new location.</p>
    <p>How to preload PTE into TLB under the KPTI technique?</p>
    <p>Virtual Address</p>
    <p>Physical Address</p>
    <p>TLB Lookup</p>
    <p>TLB Hit?</p>
    <p>Hardware Page Table Walk</p>
    <p>RSVD ==0?</p>
    <p>Original Page Fault Handler</p>
    <p>Return from Trap Retry will hit in TLB</p>
    <p>Y</p>
    <p>N Y</p>
    <p>Trap Handler: Instrumented #PF</p>
    <p>N</p>
    <p>Randomization3</p>
    <p>Preload the PTE into TLB</p>
    <p>Set Reserved Bits in All of PTEs</p>
    <p>Relocate to the New Address</p>
    <p>Trap Possible</p>
    <p>Two Problems</p>
    <p>Flowchart of Page Fault Handler More Details are in Our Paper</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Attack vectors</p>
    <p>Our design</p>
    <p>System Implementation</p>
    <p>Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>SafeHidden is designed as a loadable kernel module. No need to modify the existing defenses. No need to re-compile the OS kernel.</p>
    <p>We integrated a thin hypervisor for a non-virtualized OS.  It virtualizes the running OS as the guest without rebooting the system.  The other components, called GuestKM, runs in guest kernel.</p>
    <p>Architecture Overview</p>
  </div>
  <div class="page">
    <p>Hardware Hypervisor</p>
    <p>OS Kernel</p>
    <p>Protected APPs thread0</p>
    <p>Other Applications</p>
    <p>Protected APPs thread1</p>
    <p>Process Sched</p>
    <p>Syscall Interceptor</p>
    <p>Randomizer</p>
    <p>#0</p>
    <p>#511 . . . . . .</p>
    <p>Page Tables</p>
    <p>#0</p>
    <p>#511 . . . . . .</p>
    <p>Extended page tables</p>
    <p>EPT Violation Handler</p>
    <p>Hypercall Handlers</p>
    <p>Kernel Module</p>
    <p>#PF Interceptor</p>
    <p>Checker</p>
    <p>vmcall</p>
    <p>Linux Notifier</p>
    <p>SafeHidden</p>
    <p>Function Module</p>
    <p>Switch EPT</p>
    <p>Sync EPT</p>
    <p>Intercept Events</p>
    <p>Inject Interrupt</p>
    <p>Architecture Overview</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Attack vectors</p>
    <p>Our design</p>
    <p>System Implementation</p>
    <p>Evaluation</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>On X86_64/Linux Platform  3.4GHZ Intel(R) Core(TM) i7-6700 CPU with 4 cores and 16GB RAM.  Ubuntu 18.04 (Kernel 4.20.3 with KPTI enabled by default)</p>
    <p>SafeHidden protects two defenses that using IH.  Shadow stack and O-CFI.  The %gs is used to point to the safe area.</p>
    <p>Benchmarks  CPU-intensive benchmarks: SPEC CPU2006 and Multi-threaded Parsec-2.1.  Network I/O: Multiple processes Nginx and Multi-threaded Apache.  Disk I/O: Bonnie++ benchmark tool.</p>
    <p>Experiment Setup</p>
  </div>
  <div class="page">
    <p>CPU-intensive benchmarks  SPEC CPU2006 benchmark with ref input</p>
    <p>Incurred 2.75% and 2.76% when protecting O-CFI and Shadow Stack.  Multi-threaded Parsec-2.1 benchmark with native input</p>
    <p>Incurred 5.78% and 6.44% when protecting O-CFI and Shadow Stack.</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Network I/O benchmarks  Apache is configured to work mpm-worker mode (8 threads).</p>
    <p>Incurred 12.07% and 12.18% when protecting O-CFI and Shadow Stack.  Nginx is configured to work with 4 worker processes.</p>
    <p>Incurred 5.35% and 5.51% when protecting O-CFI and Shadow Stack.</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Disk I/O benchmarks  Bonnie++ benchmark tool (read and write tests)</p>
    <p>Incurred 1.76% and 2.18% when protecting O-CFI and Shadow Stack.</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>SafeHidden proposes the re-randomization based IH technique against all known attacks.</p>
    <p>SafeHidden introduces the use of thread-private memory to isolate thread-local safe areas.  Using hardware-assisted extended page tables.</p>
    <p>It devises a new technique to detect TLB misses.  It is the key trait of cache side-channel attacks against the page tables.</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Q &amp; A wangzhe12@ict.ac.cn</p>
  </div>
  <div class="page">
    <p>Security Analysis</p>
  </div>
  <div class="page">
    <p>When to perform randomization?</p>
    <p>Events Responses in SafeHidden</p>
    <p>SA UA TA OA</p>
    <p>memory management system calls Alarm Rand Alarm</p>
    <p>syscalls that could return EFAULT Alarm Rand Alarm</p>
    <p>cloning memory space Rand Rand Rand Rand</p>
    <p>memory access instructions  Rand Alarm</p>
    <p>Other Area (OA) Trap Area (TA) Safe Area (SA) Unmapped Area</p>
    <p>(UA)</p>
    <p>Address Space</p>
    <p>libraries executables</p>
    <p>Hidden</p>
    <p>Hidden</p>
    <p>[heap]</p>
    <p>[stack]</p>
    <p>Events Interception Points memory management system calls mmap, munmap, mremap, mprotect, brk</p>
    <p>syscalls that could return EFAULT read, write, access, send, ...</p>
    <p>cloning memory space clone, fork, vfork</p>
    <p>memory access instructions page fault exception</p>
  </div>
  <div class="page">
    <p>Thread-private Memory</p>
    <p>Instead of using the thread-private page table method, we use a thread-private EPT method to avoid the compatible problem.</p>
    <p>Thread0 Virtual Memory</p>
    <p>EPT0</p>
    <p>Thread1 Virtual Memory</p>
    <p>Guest Page Table</p>
    <p>Guest</p>
    <p>Host</p>
    <p>Guest Physical Memory</p>
    <p>Host Physical Memory</p>
    <p>EPT1</p>
    <p>EPTP CR3</p>
    <p>Core 1 EPTP CR3</p>
    <p>Core 0</p>
  </div>
  <div class="page">
    <p>Thread-private Memory</p>
    <p>Thread0 Virtual Memory</p>
    <p>EPT0</p>
    <p>Thread1 Virtual Memory</p>
    <p>P 0</p>
    <p>Guest Page Table</p>
    <p>P 3</p>
    <p>P 5</p>
    <p>P 6</p>
    <p>Guest</p>
    <p>Host</p>
    <p>Guest Physical Memory</p>
    <p>Host Physical Memory</p>
    <p>EPT1</p>
    <p>P 1</p>
    <p>P 2</p>
    <p>Thread0s safe area</p>
    <p>Thread1s safe area</p>
    <p>P 0</p>
    <p>P 2</p>
    <p>P 1</p>
    <p>P 3</p>
    <p>EPTP CR3</p>
    <p>Core 1 EPTP CR3</p>
    <p>Core 0</p>
    <p>Instead of using the thread-private page table method, we use a thread-private EPT method to avoid the compatible problem.</p>
  </div>
  <div class="page">
    <p>How to Integrate SafeHidden with KPTI?</p>
    <p>KPTI splits the page table for each process into a user-mode page table and a kernel-mode page table.  PCID is used to avoid the TLB flush during context-switch.</p>
    <p>CR3[12] = 0</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>Kernel Mode User Mode</p>
    <p>PGD Kernel</p>
    <p>PGD User</p>
    <p>kPCID</p>
    <p>uPCID</p>
    <p>CR3[11] = 1</p>
    <p>physical memory</p>
    <p>SafeHidden</p>
    <p>TLB PCID VPN-&gt;PFN</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0xSafe Area Safe Area</p>
    <p>PC</p>
  </div>
  <div class="page">
    <p>How to Integrate SafeHidden with KPTI?</p>
    <p>The TLB entry loaded in kernel-mode page table with kPCID cannot be used by user-mode code!</p>
    <p>CR3[12] = 0</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>Kernel Mode User Mode</p>
    <p>PGD Kernel</p>
    <p>PGD User</p>
    <p>kPCID</p>
    <p>uPCID</p>
    <p>CR3[11] = 1</p>
    <p>physical memory</p>
    <p>SafeHidden</p>
    <p>TLB PCID VPN-&gt;PFN</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafearea -&gt;0x</p>
    <p>Safe Area Safe Area</p>
    <p>TLB miss</p>
    <p>PC</p>
  </div>
  <div class="page">
    <p>How to Integrate SafeHidden with KPTI?</p>
    <p>SafeHidden proposed to bind kernel-mode page table with uPCID temporarily.</p>
    <p>CR3[12] = 0</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>Kernel Mode User Mode</p>
    <p>PGD Kernel</p>
    <p>PGD User</p>
    <p>kPCID</p>
    <p>uPCID</p>
    <p>CR3[11] = 1</p>
    <p>physical memory</p>
    <p>SafeHidden</p>
    <p>TLB PCID VPN-&gt;PFN</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x Safe Area Safe Area</p>
    <p>PC</p>
  </div>
  <div class="page">
    <p>How to Integrate SafeHidden with KPTI?</p>
    <p>SafeHidden proposed to bind kernel-mode page table with uPCID temporarily.</p>
    <p>But some pages related to this operation are also loaded.</p>
    <p>CR3[12] = 0</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>Kernel Mode User Mode</p>
    <p>PGD Kernel</p>
    <p>PGD User</p>
    <p>kPCID</p>
    <p>uPCID</p>
    <p>CR3[11] = 1</p>
    <p>physical memory</p>
    <p>SafeHidden</p>
    <p>TLB PCID VPN-&gt;PFN</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>uPCID 0xsafearea -&gt;0x</p>
    <p>Safe Area Safe Area</p>
    <p>PC</p>
    <p>TLB hit</p>
    <p>PC</p>
  </div>
  <div class="page">
    <p>How to Integrate SafeHidden with KPTI?</p>
    <p>SafeHidden proposed to bind kernel-mode page table with uPCID temporarily.</p>
    <p>But some pages related to this operation are also loaded.</p>
    <p>CR3[12] = 0</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>Kernel Mode User Mode</p>
    <p>PGD Kernel</p>
    <p>PGD User</p>
    <p>kPCID</p>
    <p>uPCID</p>
    <p>CR3[11] = 1</p>
    <p>physical memory</p>
    <p>SafeHidden</p>
    <p>TLB PCID VPN-&gt;PFN</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>kPCID 0xsafehidden-&gt;0x</p>
    <p>uPCID 0xsafearea -&gt;0x</p>
    <p>uPCID 0xsafehidden-&gt;0x</p>
    <p>Safe Area Safe Area</p>
    <p>PC</p>
    <p>To avoid these TLB entries to be exploited by the Meltdown attack, we flush them by using invcpid instructions</p>
  </div>
  <div class="page">
    <p>Reloading TLB Entries after Randomization</p>
    <p>SafeHidden uses the Intel TSX to test which PTEs of safe areas are loaded in the TLB.</p>
    <p>And then loading them into TLB after randomization to avoid many false alarms of TLB misses.</p>
    <p>if _xbegin() == _XBEGIN_STARTED: access a page in safe area _xend()</p>
    <p>else fallback routine</p>
    <p>Abort if it is</p>
    <p>not in TLB</p>
    <p>When MMU walk a poisoned</p>
    <p>PTE, it will trigger #PF, and then captured by Intel TSX.</p>
  </div>
  <div class="page">
    <p>Recent attacks have made it vulnerable again.  Via breaking theassumptions of this technique !!!</p>
    <p>Rethink the security assumptions of IH :</p>
    <p>Information Hiding is Not Secure Any More</p>
  </div>
</Presentation>
