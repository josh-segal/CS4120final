<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>I/O Deduplication: Utilizing Content Similarity to Improve I/O Performance</p>
    <p>Ricardo Koller Raju Rangaswami</p>
    <p>School of Computing and Information Sciences</p>
    <p>College of Engineering and Computing</p>
    <p>February 26, 2010</p>
  </div>
  <div class="page">
    <p>I/O Deduplication</p>
    <p>It is a storage solution that uses content similarity for improving I/O: eliminate duplicated I/Os and reduce seek times.</p>
    <p>It is not Data Deduplication, used in arhival storage [Venti], COW disks [QEMU].</p>
    <p>It consists of 3 techniques:</p>
    <p>X Content based cache X Dynamic replica retrieval X Selective duplication</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Workloads</p>
    <p>Block traces collected downstream of an active page cache for three weeks.</p>
    <p>web-vm Two VMs hosting web-servers: web-mail &amp; online course management.</p>
    <p>mail Our department mail server.</p>
    <p>homes NFS server that serves the home directories of our research group.</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Motivation 1: Frequency</p>
    <p>Read Write Read+ Write</p>
    <p>H its</p>
    <p>Web-vm</p>
    <p>Sector Content</p>
    <p>Read Write Read+ Write</p>
    <p>Mail</p>
    <p>Read Write Read+ Write</p>
    <p>Homes</p>
  </div>
  <div class="page">
    <p>Motivation 2: Recency</p>
    <p>Read Write Read+ Write</p>
    <p>R e u se</p>
    <p>d is</p>
    <p>ta n ce</p>
    <p>Web-vm</p>
    <p>Sector Content</p>
    <p>Read Write Read+ Write</p>
    <p>Mail</p>
    <p>Read Write Read+ Write</p>
    <p>Homes</p>
  </div>
  <div class="page">
    <p>Design: Content based Cache</p>
    <p>S ec</p>
    <p>to r</p>
    <p>to -H</p>
    <p>a sh</p>
    <p>F u n ct</p>
    <p>io n</p>
    <p>S ec</p>
    <p>to r</p>
    <p>Digest-to-Hash Function</p>
    <p>MD5 Digest</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>p</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>p</p>
    <p>age{data, refs count}p</p>
    <p>ector{sector, digest}s</p>
    <p>Reads sectors are searched for hits and in case of miss, content is searched and possibly inserted into the cache.</p>
    <p>Placed at the block layer</p>
    <p>X Write-though cache to maintain semantics.</p>
    <p>X ARC for second level cache.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>The I/O deduplication system was implemented as a module for kernel 2.6.20</p>
    <p>Traces replayed at 100X using a modified version of btreplay</p>
    <p>Measurements of I/O time were taken using blktrace</p>
    <p>Performed on a single Intel(R) Pentium 4 CPU 2.00GHZ with 1GB of memory and a WD disk running at 7200RPM</p>
  </div>
  <div class="page">
    <p>Evaluation: Content Addressed Cache</p>
    <p>web-vm mail homes</p>
    <p>R e a d h</p>
    <p>it ra</p>
    <p>tio Sector 4MB</p>
    <p>Content 4MB Sector 200MB</p>
    <p>Content 200MB</p>
  </div>
  <div class="page">
    <p>Evaluation: Hits versus Cache Size</p>
    <p>R e a d h</p>
    <p>it ra</p>
    <p>tio</p>
    <p>Cache size (MBytes)</p>
    <p>ARC - Read LRU - Read</p>
    <p>Cache size (MBytes)</p>
    <p>ARC - Read/Write LRU - Read/Write</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Motivation: Duplication</p>
    <p>Workloads web-vm mail homes</p>
    <p>Unique 4K pages (millions) 1.9 27 62 Total 4K pages (millions) 5.2 73 183 Disk Static similarity 2.67 2.64 2.94</p>
  </div>
  <div class="page">
    <p>Motivation: Duplication</p>
    <p>Workloads web-vm mail homes</p>
    <p>Unique 4K pages (millions) 1.9 27 62 Total 4K pages (millions) 5.2 73 183 Disk Static similarity 2.67 2.64 2.94</p>
    <p>W o rk</p>
    <p>lo a d s</p>
    <p>ta tic</p>
    <p>s im</p>
    <p>ila ri ty</p>
    <p>Maximum number of copies</p>
    <p>web-vm mail</p>
    <p>homes</p>
  </div>
  <div class="page">
    <p>Design: Dynamic Replica Retrieval</p>
    <p>S ec</p>
    <p>to r</p>
    <p>to -H</p>
    <p>a sh</p>
    <p>F u n ct</p>
    <p>io n</p>
    <p>S ec</p>
    <p>to r</p>
    <p>Digest-to-Hash Function</p>
    <p>MD5 Digest</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>p</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>s</p>
    <p>p</p>
    <p>Reduce seek times by indirecting requests based on head position: choose the duplicate thats closer to the head.</p>
    <p>The yellow entries share an uncached page.</p>
    <p>Current head position based on completed reads.</p>
    <p>Placed above the I/O scheduler:</p>
    <p>X Indirect only if there are no adjacent requests.</p>
  </div>
  <div class="page">
    <p>Evaluation: Dynamic Replica Retrieval</p>
    <p>web-vm mail homes</p>
    <p>vanilla dedup</p>
    <p>P e r</p>
    <p>re q u e st</p>
    <p>d is</p>
    <p>k I/ O</p>
    <p>r e a d t im</p>
    <p>e (</p>
    <p>se c)</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Motivation: Working Set Overlap</p>
    <p>C o n te</p>
    <p>n t a cc</p>
    <p>e ss</p>
    <p>o ve</p>
    <p>rl a p (</p>
    <p>% )</p>
    <p>Intervals</p>
    <p>web-vm mail homes</p>
  </div>
  <div class="page">
    <p>Selective Duplication</p>
    <p>read( )</p>
    <p>head</p>
    <p>Exported space</p>
    <p>Scratch space</p>
    <p>Data is duplicated at scratch spaces interspersed across the disk.</p>
  </div>
  <div class="page">
    <p>Dynamic Replica Retrieval</p>
    <p>web-vm mail homes</p>
    <p>v d</p>
    <p>P e r</p>
    <p>re q u e st</p>
    <p>d is</p>
    <p>k I/ O</p>
    <p>r e a d t im</p>
    <p>e (</p>
    <p>se c)</p>
    <p>Without Selective Duplication</p>
    <p>web-vm mail homes</p>
    <p>v d</p>
    <p>With Selective Duplication</p>
  </div>
  <div class="page">
    <p>All Together</p>
    <p>Workload Vanilla (rd sec) I/O dedup (rd sec) Improvement</p>
    <p>web-vm 3098.61 1641.90 47% mail 4877.49 3467.30 28% home 1904.63 1160.40 39%</p>
  </div>
  <div class="page">
    <p>Overhead</p>
    <p>Memory mem(P, WSS, HTB) = 13  P + 36  P  WSS + 8  HTB</p>
    <p>For a content cache of 1GB, static similarity of 4 and a hash table of a million buckets, the metadata is 48MB (4.6%).</p>
    <p>CPU</p>
    <p>X if HTB = 1e3, cpu read miss(P) = O(P) + 100000 cycles. X if HTB = 1e6, cpu read miss(P) = O(1) + 100000 cycles.</p>
    <p>For our machine running at 2GHz, the 100000 + 1000 cycles are 90s.</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>I/O Performance Optimization</p>
    <p>X Duplication of popular data: FS2, Borg</p>
    <p>Content Addressed Storage</p>
    <p>X Archival storage: Venti</p>
    <p>I/O Deduplication</p>
    <p>X Satori (COW-disk sharing mode)</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Limitations &amp; Future Work</p>
    <p>Integration with the page cache</p>
    <p>Multiple disks</p>
    <p>Variable sized chunks</p>
    <p>Page replacement strategies for content</p>
    <p>I/O scheduling based on duplicated blocks</p>
    <p>Write requests special handling, leave them for later? pdflush?</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Summary and Conclusions</p>
    <p>For systems where content is more frequent than sector and reuse distances are shorter for content compared to sertor, content based caches can be more effective than sector ones.</p>
    <p>On disk duplications can be used for reducing I/O times.</p>
  </div>
  <div class="page">
    <p>Questions? http://dsrl.cs.fiu.edu/projects/iodedup/</p>
  </div>
</Presentation>
