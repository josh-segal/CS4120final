<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>VeriFlow: Verifying Network-Wide</p>
    <p>Invariants in Real Time</p>
    <p>Ahmed Khurshid, Xuan Zou, Wenxuan Zhou,</p>
    <p>Matthew Caesar, P. Brighten Godfrey</p>
    <p>University of Illinois at Urbana-Champaign (UIUC)</p>
    <p>April 3, 2013</p>
    <p>NSDI 2013 10th USENIX Symposium on Networked Systems Design and Implementation</p>
  </div>
  <div class="page">
    <p>Challenges in Network Debugging</p>
    <p>http://groups.geni.net/geni/chrome/site/thumbnails/wiki</p>
    <p>/TangoGENI/OF-VLAN3715_1000.jpg</p>
    <p>Complex</p>
    <p>interactions</p>
    <p>Misconfigurations</p>
    <p>Unforeseen bugs</p>
    <p>Difficult to test</p>
    <p>the entire</p>
    <p>network state</p>
    <p>space before</p>
    <p>deployment</p>
  </div>
  <div class="page">
    <p>Effects of Network Errors</p>
    <p>Allow unauthorized</p>
    <p>packets to enter a secured</p>
    <p>zone in a network</p>
    <p>Make services and the</p>
    <p>infrastructure prone to</p>
    <p>attacks</p>
    <p>Make critical services</p>
    <p>unavailable</p>
    <p>Affect network</p>
    <p>performance</p>
    <p>?</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>Network Debugging Techniques</p>
    <p>Configuration VerificationTraffic/Flow Monitoring</p>
    <p>Software using Cisco NetFlow http://snmp.co.uk/scrutinizer/</p>
  </div>
  <div class="page">
    <p>Limitations of Configuration Verification</p>
    <p>Prediction is difficult</p>
    <p>Various configuration</p>
    <p>languages</p>
    <p>Dynamic distributed</p>
    <p>protocols</p>
    <p>Prediction misses</p>
    <p>implementation bugs</p>
    <p>in control plane</p>
    <p>Configuration</p>
    <p>Control plane</p>
    <p>Data-plane</p>
    <p>state</p>
    <p>Network</p>
    <p>behavior</p>
    <p>Input</p>
    <p>Predicted</p>
  </div>
  <div class="page">
    <p>Our Approach: Data-plane Verification</p>
    <p>Less prediction</p>
    <p>Closer to actual network behavior</p>
    <p>Unified analysis for multiple control-plane protocols</p>
    <p>Can catch controlplane implementation bugs</p>
    <p>Configuration</p>
    <p>Control plane</p>
    <p>Data-plane</p>
    <p>state</p>
    <p>Network</p>
    <p>behavior</p>
    <p>Input</p>
    <p>Predicted</p>
  </div>
  <div class="page">
    <p>Data Plane Verification in Action</p>
    <p>FlowChecker [Al-Shaer et al., SafeConfig 2010]</p>
    <p>Uses BDD-based model checker</p>
    <p>Anteater [Mai et al., SIGCOMM 2011]</p>
    <p>Uses SAT-based model checking</p>
    <p>Revealed 23 real bugs in the UIUC campus network</p>
    <p>Header Space Analysis [Kazemian et al., NSDI 2012]</p>
    <p>Uses set-based custom algorithm</p>
    <p>Found multiple loops in the Stanford backbone network</p>
    <p>Find problems</p>
    <p>after they occur</p>
    <p>and (potentially)</p>
    <p>cause damage</p>
    <p>Running time: Several seconds to a few hours</p>
  </div>
  <div class="page">
    <p>Can we run verification in real time?</p>
    <p>Checking network-wide invariants in real time as the</p>
    <p>network evolves</p>
    <p>Need to verify new updates at high speeds</p>
    <p>Block dangerous changes</p>
    <p>Provide immediate warning</p>
  </div>
  <div class="page">
    <p>Challenges in Real-Time Verification</p>
    <p>Challenge 1: Obtaining real-time view of</p>
    <p>network</p>
    <p>Solution: Utilize the centralized data-plane view</p>
    <p>available in an SDN (Software-Defined Network)</p>
    <p>Challenge 2: Verification speed</p>
    <p>Solution: Off-the-shelf techniques?</p>
    <p>No, too slow!</p>
  </div>
  <div class="page">
    <p>Our Tool: VeriFlow</p>
    <p>VeriFlow checks network-wide invariants in real time using data-plane state</p>
    <p>Absence of routing loops and black holes, access control violations, etc.</p>
    <p>VeriFlow functions by</p>
    <p>Monitoring dynamic changes in the network</p>
    <p>Constructing a model of the network behavior</p>
    <p>Using custom algorithms to automatically derive whether the network contains errors</p>
  </div>
  <div class="page">
    <p>VeriFlow</p>
    <p>New rules</p>
    <p>VeriFlow Operation</p>
    <p>Network Controller</p>
    <p>Generate</p>
    <p>equivalence</p>
    <p>classes</p>
    <p>Generate</p>
    <p>forwarding</p>
    <p>graphs</p>
    <p>Run queries</p>
    <p>Diagnosis report</p>
    <p>Type of invariant</p>
    <p>violation</p>
    <p>Affected set of</p>
    <p>packets</p>
    <p>Rules violating</p>
    <p>network invariant(s) Good rules</p>
  </div>
  <div class="page">
    <p>VeriFlow</p>
    <p>Generate</p>
    <p>Equivalence</p>
    <p>Classes</p>
    <p>Updates</p>
    <p>Equivalence class:</p>
    <p>Packets experiencing</p>
    <p>the same forwarding</p>
    <p>actions throughout the</p>
    <p>network.</p>
    <p>Fwding rules</p>
    <p>Equiv. classes</p>
  </div>
  <div class="page">
    <p>Computing Equivalence Classes</p>
    <p>(device, rule) pairs</p>
    <p>(dont care/wildcard)</p>
  </div>
  <div class="page">
    <p>VeriFlow</p>
    <p>Generate</p>
    <p>Forwarding</p>
    <p>Graphs</p>
    <p>Generate</p>
    <p>Equivalence</p>
    <p>Classes</p>
    <p>Updates</p>
    <p>All the info to answer</p>
    <p>queries!</p>
    <p>Equivalence Class 1</p>
    <p>Equivalence Class 2</p>
  </div>
  <div class="page">
    <p>VeriFlow</p>
    <p>Generate</p>
    <p>Forwarding</p>
    <p>Graphs</p>
    <p>Generate</p>
    <p>Equivalence</p>
    <p>Classes</p>
    <p>Run QueriesUpdates</p>
    <p>Black holes,</p>
    <p>Routing loops,</p>
    <p>Isolation of multiple VLANs,</p>
    <p>Access control policies</p>
    <p>Good rules Bad rules</p>
    <p>Diagnosis report</p>
    <p>Type of invariant</p>
    <p>violation</p>
    <p>Affected set of</p>
    <p>packets</p>
  </div>
  <div class="page">
    <p>API to write custom invariants</p>
    <p>VeriFlow provides a set of functions to write custom query algorithms</p>
    <p>Gives access to the affected set of equivalence classes and their forwarding graphs</p>
    <p>Verification becomes a standard graph traversal algorithm</p>
    <p>Can be used to</p>
    <p>Check forwarding behavior of specific packet sets</p>
    <p>Verify effects of potential changes</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>Simulated an IP network using a Rocketfuel topology  172 routers</p>
    <p>Replayed Route Views BGP traces  5 million RIB entries</p>
    <p>90K BGP updates</p>
    <p>Checked for loops and black holes</p>
    <p>Microbenchmarked each phase of VeriFlows operation</p>
  </div>
  <div class="page">
    <p>Performance Result</p>
    <p>verified within 1 millisecond</p>
  </div>
  <div class="page">
    <p>Effect of Equivalence Class Count</p>
    <p>Number of ECs strongly</p>
    <p>influences verification time</p>
    <p>Number of ECs affected by new rule</p>
  </div>
  <div class="page">
    <p>Experiment (cont.)</p>
    <p>Mininet OpenFlow network</p>
    <p>Rocketfuel topology with 172 switches, one host per switch</p>
    <p>NOX controller, learning switch app</p>
    <p>TCP connections between random pairs of hosts</p>
    <p>NOX Controller</p>
    <p>VeriFlow TCP SYN</p>
  </div>
  <div class="page">
    <p>Effect on Flow Table Update Throughput</p>
    <p>U p</p>
    <p>d a</p>
    <p>te t</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(m sg</p>
    <p>/s e</p>
    <p>c )</p>
    <p>Overhead of VeriFlow is low</p>
  </div>
  <div class="page">
    <p>Effect of Multiple Header Fields</p>
    <p>Data link source</p>
    <p>Data link destination</p>
    <p>Network source</p>
    <p>Network destination</p>
    <p>Data link type</p>
    <p>More fields -&gt; More</p>
    <p>equivalence classes -&gt;</p>
    <p>Longer verification</p>
    <p>time</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>VeriFlow achieves real-time verification</p>
    <p>A layer between SDN controller and network devices</p>
    <p>Handles multiple packet header fields efficiently</p>
    <p>Runs queries within hundreds of microseconds</p>
    <p>Exposes an API for writing custom invariants</p>
    <p>Future work</p>
    <p>Handling packet transformations efficiently</p>
    <p>Dealing with multiple controllers</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>khurshi1@illinois.edu</p>
    <p>http://www.cs.illinois.edu/~khurshi1</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Header space analysis: Static checking for networks, NSDI 2012</p>
    <p>A NICE way to test OpenFlow applications, NSDI 2012</p>
    <p>Abstractions for network update, SIGCOMM 2012</p>
    <p>Debugging the data plane with Anteater, SIGCOMM 2011</p>
    <p>Can the production network be the testbed?, OSDI 2010</p>
    <p>FlowChecker: Configuration analysis and verification of federated OpenFlow infrastructures, SafeConfig 2010</p>
    <p>Network configuration in a box: Towards end-to-end verification of network reachability and security, ICNP 2009</p>
  </div>
  <div class="page">
    <p>Demo Network</p>
  </div>
  <div class="page">
    <p>A(1)</p>
    <p>B(2)</p>
    <p>C(3)</p>
    <p>D(4)</p>
    <p>E(5)</p>
    <p>F(6)</p>
    <p>G(7) H(8)</p>
    <p>J(10)</p>
    <p>I(9)</p>
    <p>Name(ID)</p>
    <p>Intf n</p>
    <p>Intf1</p>
  </div>
  <div class="page">
    <p>A(1)</p>
    <p>B(2)</p>
    <p>C(3)</p>
    <p>D(4)</p>
    <p>E(5)</p>
    <p>F(6)</p>
    <p>G(7) H(8)</p>
    <p>J(10)</p>
    <p>I(9)</p>
    <p>Name(ID)</p>
    <p>Intf n</p>
    <p>Intf1</p>
  </div>
  <div class="page">
    <p>A(1)</p>
    <p>B(2)</p>
    <p>C(3)</p>
    <p>D(4)</p>
    <p>E(5)</p>
    <p>F(6)</p>
    <p>G(7) H(8)</p>
    <p>J(10)</p>
    <p>I(9)</p>
    <p>Name(ID)</p>
    <p>Intf n</p>
    <p>Intf1</p>
  </div>
</Presentation>
