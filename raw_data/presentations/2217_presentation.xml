<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SAY-Go: Towards Transparent and Seamless Storage-As-You-Go with Persistent Memory</p>
    <p>Hyeonho Song, Sam H. Noh UNIST</p>
    <p>HotStorage 2018</p>
  </div>
  <div class="page">
    <p>Persistent Memory</p>
    <p>Motivation</p>
    <p>SAY-Go  Design  Implementation</p>
    <p>Evaluation</p>
    <p>Summary</p>
    <p>Future work</p>
    <p>Contents</p>
  </div>
  <div class="page">
    <p>Persistent memory</p>
    <p>PRAM</p>
    <p>MemoryStorage</p>
    <p>Non-volatility  Byte-level random access  Fast access time (nanoseconds)</p>
    <p>Persistent Memory Features</p>
  </div>
  <div class="page">
    <p>Persistent memory</p>
    <p>Intel Optane SSD DC P4800X</p>
    <p>Intel Optane Memory</p>
    <p>DIMM Based Optane memory</p>
    <p>Block device Block device Character device</p>
  </div>
  <div class="page">
    <p>Persistent memory</p>
    <p>Intel Optane SSD DC P4800X</p>
    <p>Intel Optane Memory</p>
    <p>DIMM Based Optane memory</p>
    <p>Block device Block device Character device</p>
    <p>Our target</p>
  </div>
  <div class="page">
    <p>Persistent memory</p>
    <p>CPU</p>
    <p>DRAM</p>
    <p>PM</p>
    <p>CPU</p>
    <p>DRAM</p>
    <p>traditional HDD, SSD</p>
    <p>PM (cache)</p>
    <p>Intel Optane SSD DC P4800X</p>
    <p>Intel Optane Memory</p>
    <p>DIMM Based Optane memory</p>
    <p>CPU</p>
    <p>DRAM</p>
    <p>traditional HDD, SSD</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>DRAM storage</p>
    <p>Applications demand more and more memory</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>fully used used</p>
    <p>free</p>
    <p>DRAM capacity never enough!</p>
    <p>storage is relatively roomy due to high density</p>
  </div>
  <div class="page">
    <p>Traditional solution</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>fully used used</p>
    <p>free</p>
    <p>DRAM capacity is not enough!</p>
    <p>Swap mechanism with storage</p>
  </div>
  <div class="page">
    <p>When DRAM runs out</p>
    <p>Swap mechanism</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage fully used swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
    <p>page allocation is not possible</p>
  </div>
  <div class="page">
    <p>data save (copy) to swap area</p>
    <p>Secure free space in DRAM</p>
    <p>Swap mechanism: swap-out</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage fully used swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
  </div>
  <div class="page">
    <p>Main memory</p>
    <p>Secure free space in DRAM</p>
    <p>Swap mechanism: swap-out</p>
    <p>DRAM</p>
    <p>Storage not full swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
    <p>page allocation is possible</p>
  </div>
  <div class="page">
    <p>When application wants to access data in swap area</p>
    <p>Swap mechanism: swap-in</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage not full swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
  </div>
  <div class="page">
    <p>When application wants to access data in swap area</p>
    <p>Swap mechanism: swap-in</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage not full swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
    <p>data restore(copy) to free space in DRAM</p>
    <p>block device is not directly accessible by the CPU</p>
  </div>
  <div class="page">
    <p>When application wants to access data in swap area</p>
    <p>Swap mechanism: swap-in</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage not full swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
    <p>access to data</p>
  </div>
  <div class="page">
    <p>Large overhead with slow storage</p>
    <p>Data copy is essential</p>
    <p>Selecting pages to be swapped out</p>
    <p>is a complex process</p>
    <p>Swap area cannot be used as storage space</p>
    <p>Static partition of file system</p>
    <p>Weakness of traditional swap mechanism</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage not full swaparea free blocks</p>
    <p>User application</p>
    <p>traditional HDD</p>
    <p>swap-out</p>
    <p>swap-in</p>
  </div>
  <div class="page">
    <p>Simple solution: swap with PM storage</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>fully used</p>
    <p>DIMM Based PM</p>
    <p>PM performance is better than traditional storage  Reduced data copy time  Overhead of the swap mechanism is also reduced</p>
    <p>Does this suffice?</p>
  </div>
  <div class="page">
    <p>There should be a better way?</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>fully used</p>
    <p>DIMM Based PM</p>
    <p>PM storage can be accessed directly from the CPU</p>
    <p>PM as both main memory and storage  Dynamically use PM  Increase capacity of the working memory when needed</p>
  </div>
  <div class="page">
    <p>Dynamic adjustment of the memory and storage boundary</p>
    <p>Our Goal</p>
    <p>User</p>
    <p>DRAM traditional HDD, SSD</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>User</p>
    <p>DRAM</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device driver</p>
    <p>Virtual memory manager</p>
    <p>PM</p>
    <p>memory manager</p>
    <p>SAY-Go system (Storage-As-You-Go)</p>
    <p>dynamic usage of PM</p>
  </div>
  <div class="page">
    <p>Dynamic adjustment of the memory and storage boundary</p>
    <p>Our Goal</p>
    <p>User</p>
    <p>DRAM traditional HDD, SSD</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>User</p>
    <p>DRAM</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device driver</p>
    <p>Virtual memory manager</p>
    <p>PM</p>
    <p>memory manager</p>
    <p>SAY-Go system (Storage-As-You-Go)</p>
    <p>dynamic usage of PM</p>
    <p>similar attempts were proposed</p>
  </div>
  <div class="page">
    <p>Dynamic usage of PM</p>
    <p>Related work</p>
    <p>User</p>
    <p>DRAM</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device driver</p>
    <p>Virtual memory manager</p>
    <p>PM</p>
    <p>memory manager 1) Jung, J. Y. and Cho, S. Memorage: Emerging persistent ram based malleable main</p>
    <p>memory and storage architecture. In Proceedings of the International ACM Conference</p>
    <p>on International Conference on Supercomputing (ICS) (2013).</p>
    <p>scaling and object storage. In Proceedings of the European Conference on Computer</p>
    <p>Systems (EuroSys) (2016).</p>
    <p>Memorage1)  ICS 2013 : Working memory expansion</p>
    <p>pVM2)  EuroSys 2016 : Direct allocation of PM page to working memory</p>
  </div>
  <div class="page">
    <p>Dynamic usage of PM</p>
    <p>Related work</p>
    <p>User</p>
    <p>DRAM</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device driver</p>
    <p>Virtual memory manager</p>
    <p>PM</p>
    <p>memory manager</p>
    <p>Memorage1)  ICS 2013 : Working memory expansion</p>
    <p>pVM2)  EuroSys 2016 : Direct allocation of PM page to working memory</p>
    <p>memory and storage architecture. In Proceedings of the International ACM Conference</p>
    <p>on International Conference on Supercomputing (ICS) (2013).</p>
    <p>scaling and object storage. In Proceedings of the European Conference on Computer</p>
    <p>Systems (EuroSys) (2016).</p>
  </div>
  <div class="page">
    <p>When DRAM runs out</p>
    <p>Memorage</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>fully used</p>
    <p>User application page allocation is not possible</p>
    <p>Storage</p>
    <p>free blocks</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>Working memory expansion</p>
    <p>Memorage</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage fully used free blocks</p>
    <p>User application</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>Working memory expansion</p>
    <p>Memorage</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage fully used free blocks</p>
    <p>User application</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>expand</p>
    <p>Working memory expansion</p>
    <p>Memorage</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage fully used free blocks</p>
    <p>User application</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>expand</p>
    <p>Working memory expansion</p>
    <p>Memorage</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Storage fully used free blocks</p>
    <p>User application</p>
    <p>PM</p>
    <p>page allocation becomes possible</p>
  </div>
  <div class="page">
    <p>Large runtime overhead  Process of changing free blocks</p>
    <p>into pages proceeds at runtime</p>
    <p>Memory hot-plug feature is required</p>
    <p>Overlooks the issue of consistency  Consistency of page allocator is not considered  Memory leak can occur with faults</p>
    <p>Weakness of Memorage</p>
    <p>blocks -&gt; pages</p>
  </div>
  <div class="page">
    <p>Dynamic usage of PM</p>
    <p>Related work</p>
    <p>User</p>
    <p>DRAM</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device driver</p>
    <p>Virtual memory manager</p>
    <p>PM</p>
    <p>memory manager</p>
    <p>Memorage1)  ICS 2013 : Working memory expansion</p>
    <p>pVM2)  EuroSys 2016 : Direct allocation of PM page to working memory</p>
    <p>memory and storage architecture. In Proceedings of the International ACM Conference</p>
    <p>on International Conference on Supercomputing (ICS) (2013).</p>
    <p>scaling and object storage. In Proceedings of the European Conference on Computer</p>
    <p>Systems (EuroSys) (2016).</p>
  </div>
  <div class="page">
    <p>When DRAM runs out</p>
    <p>pVM</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Persistent store fully used free PM pages</p>
    <p>User application</p>
    <p>page allocation is not possible</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>When DRAM runs out</p>
    <p>pVM</p>
    <p>Main memory</p>
    <p>DRAM</p>
    <p>Persistent store fully used free PM pages</p>
    <p>User application</p>
    <p>direct allocation - npmalloc() - nvmmap(PERSIST or NOPERSIST)</p>
    <p>PM</p>
  </div>
  <div class="page">
    <p>Requires application modification</p>
    <p>Explicit library function calls need to be made  npmalloc(), nvmmap()</p>
    <p>Similar approach to previous work  NV-Heap</p>
    <p>Mnemosyne</p>
    <p>NVM Duet</p>
    <p>Weakness of pVM</p>
    <p>direct allocation</p>
  </div>
  <div class="page">
    <p>Comparison of related works</p>
    <p>Swap Memorage pVM</p>
    <p>Goal free up working memory space</p>
    <p>memory expansion</p>
    <p>persistent store</p>
    <p>Memory-Storage division</p>
    <p>fixed fixed fixed</p>
    <p>Consistency not considered not considered yes</p>
    <p>Transparency yes yes no</p>
    <p>Runtime overhead yes yes no</p>
    <p>Direct access to data no yes yes</p>
    <p>strength weakness</p>
  </div>
  <div class="page">
    <p>SAY-Go design goals</p>
    <p>PM</p>
    <p>User</p>
    <p>SFS</p>
    <p>VFS</p>
    <p>Device drivermemorymanager</p>
    <p>Virtual memory manager</p>
    <p>DRAM</p>
    <p>Dynamic partition</p>
    <p>Seamless integration - PM role is dynamically adjusted as need be</p>
    <p>Transparency - Automatic scaling of working memory - Without modification of the application</p>
    <p>Consistency - Ensure consistency of the PM allocator - Prevent memory leaks</p>
    <p>for working memory for storage</p>
  </div>
  <div class="page">
    <p>Consists of two parts</p>
    <p>SAY-Go components</p>
    <p>File system with dynamic partitioning</p>
    <p>Virtual memory manager</p>
    <p>DRAM PM</p>
    <p>Integrated memory manager for working memory for storage</p>
  </div>
  <div class="page">
    <p>Consists of two parts</p>
    <p>Layout</p>
    <p>File system with dynamic partitioning</p>
    <p>Virtual memory manager</p>
    <p>DRAM PM</p>
    <p>Integrated memory manager for working memory for storage</p>
    <p>Dynamic Partition File System (DPFS), in progress</p>
    <p>Persistent Memory Buddy (PMB), HotStorage 18</p>
  </div>
  <div class="page">
    <p>Consists of two parts</p>
    <p>Layout</p>
    <p>Virtual memory manager</p>
    <p>DRAM PM</p>
    <p>Integrated memory manager for working memory for storage</p>
    <p>Persistent Memory Buddy (PMB), HotStorage 18</p>
    <p>Implemented in Linux</p>
    <p>Dynamic Partition File System (DPFS), in progress</p>
    <p>File system with dynamic partitioning</p>
  </div>
  <div class="page">
    <p>PMB implementation features</p>
    <p>Persistent Memory Buddy (PMB)File system with dynamic partitioning</p>
    <p>Virtual memory manager</p>
    <p>DRAM PM</p>
    <p>for working memory PMB</p>
    <p>for storage</p>
    <p>Seamless integration - PM role is dynamically adjusted as need be</p>
    <p>Transparency - Automatic scaling of working memory - Without modification of the application</p>
    <p>Consistency - Ensure consistency of the PM allocator - Prevent memory leaks</p>
    <p>PMB designed with SAY-Go goal in mind</p>
  </div>
  <div class="page">
    <p>PMB Layout in Linux</p>
    <p>DRAM and PM are managed in ZONE units - ZONE_NORMAL - plus 2 new ZONEs * ZONE_MIGRATE and ZONE_STRG</p>
    <p>Each ZONE has free pages - buddy memory allocator</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>PMB</p>
    <p>for storage for working memory</p>
  </div>
  <div class="page">
    <p>Characteristics in Linux</p>
    <p>Unsorted</p>
    <p>Circular linked list</p>
    <p>Push and pop operation</p>
    <p>occurs only at the end of the list</p>
    <p>Push and pop operations</p>
    <p>are implemented by atomic operations</p>
    <p>Buddy memory allocator</p>
    <p>ZONE</p>
    <p>ZONE</p>
    <p>ZONE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page</p>
    <p>page 4KB</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page</p>
    <p>page 4KB</p>
    <p>PMB based on buddy memory allocator</p>
  </div>
  <div class="page">
    <p>PMB Layout in Linux</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>PMB</p>
    <p>for storage for working memory</p>
    <p>DRAM and PM are managed in ZONE units - ZONE_NORMAL - plus 2 new ZONEs * ZONE_MIGRATE and ZONE_STRG</p>
    <p>Each ZONE has free pages - buddy memory allocator</p>
    <p>Each ZONE has different role</p>
  </div>
  <div class="page">
    <p>Role of each ZONE</p>
    <p>ZONE_NORMAL - DRAM is covered by this ZONE</p>
    <p>ZONE_STRG - Minimum storage area - Persistent metadata saved to this area - Persistent page descriptor - Bitmap that maintains the allocation state - Log table for PMB consistency</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>PMB</p>
    <p>for storage for working memory</p>
  </div>
  <div class="page">
    <p>Role of each ZONE</p>
    <p>ZONE_MIGRATE - Key component in PMB - Either allocated depending on its use</p>
    <p>* as persistent (storage) page * as non-persistent (memory) page</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>PMB</p>
    <p>for storage for working memory</p>
  </div>
  <div class="page">
    <p>Page allocation</p>
    <p>ZONE_NORMAL - Allocate working memory</p>
    <p>Storage allocated from ZONE_STRG - Allocate storage</p>
    <p>ZONE_MIGRATE - Allocate PM pages to both zones</p>
    <p>- Allocation done using the existing interface</p>
    <p>- Allocation done by kernel thread in the background</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>PM pagesDRAM pages</p>
    <p>PMB</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>for storage for working memory</p>
  </div>
  <div class="page">
    <p>ZONE capacity</p>
    <p>ZONE_NORMAL - Initially, only DRAM pages</p>
    <p>- Will grow with demand</p>
    <p>ZONE_STRG - Initially, essential storage area</p>
    <p>- Will grow with demand</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
  </div>
  <div class="page">
    <p>ZONE NORMAL</p>
    <p>ZONE NORMAL expansion</p>
    <p>Page movement</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
    <p>PM pages</p>
    <p>ZONE_NORMAL - Initially, only DRAM pages</p>
    <p>- Will grow with demand</p>
    <p>- PM page migration</p>
  </div>
  <div class="page">
    <p>ZONE NORMAL expansion</p>
    <p>Page movement</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
    <p>ZONE_NORMAL - Initially, only DRAM pages</p>
    <p>- Will grow with demand</p>
    <p>- PM page migration</p>
    <p>- Increased ZONE_NORMAL size</p>
  </div>
  <div class="page">
    <p>ZONE NORMAL retraction</p>
    <p>Page movement</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE NORMAL</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
    <p>ZONE NORMAL</p>
    <p>ZONE_NORMAL - Initially, only DRAM pages</p>
    <p>- Will grow with demand</p>
    <p>- PM page retrieval</p>
  </div>
  <div class="page">
    <p>ZONE NORMAL retraction</p>
    <p>Page movement</p>
    <p>VM manager</p>
    <p>Processes DPFS</p>
    <p>Device driver</p>
    <p>VFS</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
    <p>ZONE_NORMAL - Initially, only DRAM pages</p>
    <p>- Will grow with demand</p>
    <p>- PM page retrieval</p>
    <p>- Reduced ZONE_NORMAL size</p>
  </div>
  <div class="page">
    <p>ZONE_MIGRATE to ZONE_NORMAL  Both zones managed with Buddy memory allocator  When number of free pages falls below watermark  Transfers 4MB contiguous pages</p>
    <p>simple pointer manipulation</p>
    <p>Page migration</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2) 4MB</p>
    <p>page page</p>
    <p>page page</p>
    <p>ZONE NORMAL</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>ZONE NORMAL</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
  </div>
  <div class="page">
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page page page</p>
    <p>ZONE_NORMAL to ZONE_MIGRATE  No watermark  Retrieved released by application</p>
    <p>simple pointer manipulation</p>
    <p>Page retrieval</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page</p>
    <p>.</p>
    <p>.</p>
    <p>. page</p>
    <p>page</p>
    <p>ZONE NORMAL</p>
    <p>ZONE MIGRATE</p>
    <p>ZONE STRG</p>
    <p>PM pagesDRAM pages</p>
    <p>for storage for working memory</p>
    <p>PMB</p>
    <p>ZONE NORMAL</p>
  </div>
  <div class="page">
    <p>Management unit</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>Contiguous memory space (20 ~ 210 pages) - ZONE_NORMAL: 4KB ~ 4MB - ZONE_MIGRATE, ZONE_STRG: 2MB ~ 2GB</p>
    <p>Page movement unit is 4MB contiguous page - Performed between ZONE_NORMAL (order 10) and ZONE_MIGRATE (order 1)</p>
  </div>
  <div class="page">
    <p>Memory leak may occur in page moving process</p>
    <p>Consistency</p>
    <p>upon crash</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page 4MB</p>
    <p>page page</p>
    <p>page page</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
  </div>
  <div class="page">
    <p>Memory leak may occur in page moving process</p>
    <p>Consistency</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page 4MB page page</p>
    <p>page page</p>
    <p>these pages are leaked</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
  </div>
  <div class="page">
    <p>Use logging to prevent memory leak</p>
    <p>Consistency</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page 4MB</p>
    <p>page page</p>
    <p>page page</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
  </div>
  <div class="page">
    <p>Use logging to prevent memory leak</p>
    <p>Consistency</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>page</p>
    <p>page 4MB</p>
    <p>page page</p>
    <p>page page</p>
    <p>Log entry size &lt; 64bit</p>
    <p>Use mfence and clflush instructions for logging</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>order(10) Free_list</p>
    <p>order(1) order(0)</p>
    <p>order(2)</p>
  </div>
  <div class="page">
    <p>Previous work and SAY-Go</p>
    <p>Swap Memorage pVM SAY-Go</p>
    <p>Goal free up working memory space</p>
    <p>memory expansion</p>
    <p>persistent store efficient use of resources</p>
    <p>Memory-Storage division</p>
    <p>fixed fixed fixed dynamic</p>
    <p>Consistency not considered not considered yes yes</p>
    <p>Transparency yes yes no yes</p>
    <p>Runtime overhead yes yes no no</p>
    <p>Direct access to data no yes yes yes</p>
    <p>strength weakness</p>
  </div>
  <div class="page">
    <p>Test platform  Machine specification</p>
    <p>Intel Xeon E5-2620v3 2.4GHz (24 cores)  256 DRAM</p>
    <p>Divide to DRAM and Pseudo-PM</p>
    <p>Linux v4.11.1</p>
    <p>Workloads characteristics</p>
    <p>Evaluation</p>
    <p>FFT Redis Scale Memory intensive application In-memory database</p>
    <p>Domain Signal processing Key-value store</p>
    <p>Benchmark suite Splash2x in Parsec 3.0 YCSB</p>
    <p>Input Native (largest) 1:1 (read:write)</p>
    <p>Max memory usage 12GB 20GB</p>
  </div>
  <div class="page">
    <p>Comparison with swap  Memory configuration  ZONE_NORMAL capacity varied based on workload</p>
    <p>FFT: 16GB for DRAM  Redis: 32GB for DRAM</p>
    <p>Evaluation</p>
    <p>DRAM Pseudo-PM</p>
    <p>ZONE NORMAL</p>
    <p>ZONE STRG</p>
    <p>ZONE MIGRATE</p>
    <p>SwapPMB</p>
    <p>DRAM Pseudo-PM</p>
    <p>ZONE NORMAL</p>
    <p>EXT4 with DAX</p>
    <p>swap area</p>
    <p>to be used dynamically</p>
  </div>
  <div class="page">
    <p>Comparison with swap</p>
    <p>Evaluation</p>
    <p>PMB Swap</p>
    <p>Ru nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 32GB)</p>
    <p>RedisFFT</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
  </div>
  <div class="page">
    <p>Measurement method: FFT example</p>
    <p>Evaluation</p>
    <p>PMB Swap</p>
    <p>Ru nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
    <p>FFT</p>
    <p>FFT maximum working set size: 12GB</p>
    <p>Limit amount of main memory used by FFT - Use stress tool to consume main memory</p>
    <p>x-axis refers to the maximum DRAM used by FFT</p>
    <p>FFTstress 6GB 6GB10GB</p>
    <p>Pseudo-PMDRAM</p>
    <p>ZONE NORMAL 16GB</p>
    <p>ZONE STRG 16GB</p>
    <p>ZONE MIGRATE 224GB</p>
  </div>
  <div class="page">
    <p>Measurement method: FFT example</p>
    <p>Evaluation</p>
    <p>PMB Swap</p>
    <p>Ru nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
    <p>FFT</p>
    <p>FFTstress 3 9GB13GB</p>
    <p>ZONE NORMAL 16GB</p>
    <p>ZONE STRG 16GB</p>
    <p>ZONE MIGRATE 224GB</p>
    <p>Pseudo-PMDRAM</p>
    <p>FFT maximum working set size: 12GB</p>
    <p>Limit amount of main memory used by FFT - Use stress tool to consume main memory</p>
    <p>x-axis refers to the maximum DRAM used by FFT</p>
  </div>
  <div class="page">
    <p>Comparison with swap</p>
    <p>Evaluation</p>
    <p>PMB Swap</p>
    <p>Ru nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 32GB)</p>
    <p>RedisFFT</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
  </div>
  <div class="page">
    <p>Comparison with swap</p>
    <p>Evaluation Ru</p>
    <p>nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 32GB)</p>
    <p>Redis  Swap performance</p>
    <p>degrades considerably</p>
    <p>PMB performance remains stable</p>
    <p>FFT</p>
    <p>PMB Swap</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
    <p>Two reasons behind results</p>
  </div>
  <div class="page">
    <p>Comparison with swap</p>
    <p>Evaluation Ru</p>
    <p>nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 32GB)</p>
    <p>RedisFFT</p>
    <p>PMB Swap</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
    <p>Mechanism overhead - PMB migration and retrieval : ~ 400 ns</p>
    <p>- Swap-in / out : ~ 6 / 41 us</p>
  </div>
  <div class="page">
    <p>Comparison with swap</p>
    <p>Evaluation Ru</p>
    <p>nt im</p>
    <p>e (s ec )</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 32GB)</p>
    <p>FFT Redis  PMB unaffected by</p>
    <p>DRAM size - swap page copies increase with reduced DRAM size</p>
    <p>PMB Swap</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 16GB)</p>
  </div>
  <div class="page">
    <p>Number of copied pages</p>
    <p>Evaluation</p>
    <p>Swap-out Swap-in</p>
    <p>DRAM (GB) used by application (ZONE_NORMAL size: 32GB)</p>
    <p>N um</p>
    <p>be r of s w ap pe</p>
    <p>d pa ge s</p>
    <p>(u ni t: m</p>
    <p>ill io n)</p>
    <p>FFT Redis  Reported by</p>
    <p>/proc/vmstat</p>
  </div>
  <div class="page">
    <p>PM page migration and retrieval behavior  Measured per 3s interval</p>
    <p>Evaluation</p>
    <p># of p ag es</p>
    <p>execution time (s)execution time (s)</p>
    <p>migration retrieval pages in NORMAL moved from MIGRATE</p>
    <p>FFT Redis</p>
  </div>
  <div class="page">
    <p>PM page migration and retrieval behavior  Measured per 3s interval</p>
    <p>Evaluation</p>
    <p># of p ag es</p>
    <p>execution time (s)execution time (s)</p>
    <p>migration retrieval pages in NORMAL moved from MIGRATE</p>
    <p>FFT Redis</p>
  </div>
  <div class="page">
    <p>PM page migration and retrieval behavior  FFT and Redis executed simultaneously</p>
    <p>Evaluation</p>
    <p># of p ag es</p>
    <p>execution time (s)</p>
    <p>Redis runs once</p>
    <p>FFT running time: 60 seconds - Restarted upon termination after a 20 second lapse</p>
    <p>migration retrieval pages in NORMAL moved from MIGRATE</p>
  </div>
  <div class="page">
    <p>PM page migration and retrieval behavior  FFT and Redis executed simultaneously</p>
    <p>Evaluation</p>
    <p># of p ag es</p>
    <p>execution time (s)</p>
    <p>Redis runs once</p>
    <p>FFT running time: 60 seconds - Restarted upon termination after a 20 second lapse</p>
    <p>- Pages are being freed and retrieved in the vicinity of 60, 140, 220, 300 seconds</p>
  </div>
  <div class="page">
    <p>Proposed a system called Storage-As-You-Go (SAY-Go)  Transparently adjusts the use of PM  PM can be used as memory as well as storage as need be  Break the boundary between memory and storage</p>
    <p>Persistent Memory Buddy (PMB)  Memory allocation service that can freely grow and shrink working memory  Experimental results show PMB performs better than traditional swap</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>DPFS  Requires dynamic partition resizing support  In the design and early implementation phase</p>
    <p>PMB  More detailed policies for managing page  Various optimizations</p>
    <p>Future work</p>
    <p>Virtual memory manager</p>
    <p>DRAM PM</p>
    <p>DPFS</p>
    <p>PMB</p>
  </div>
  <div class="page">
    <p>Q &amp; A</p>
  </div>
</Presentation>
