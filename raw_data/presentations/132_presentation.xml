<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GraphREL: A Decomposition-Based and Selectivity-Aware Relational Framework for Processing</p>
    <p>Sub-graph Queries</p>
    <p>Sherif Sakr</p>
    <p>School of Computer Science and Engineering University of New South Wales</p>
    <p>The 14th International Conference on Database Systems for Advanced Applications (DASFAA09)</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 1 / 22</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>Graphs are among the most complicated and general form of data structures.</p>
    <p>Recently, they have been widely used to model many complex structured and schemaless data such as XML documents, social networks, chemical compounds and business process models.</p>
    <p>Retrieving related graphs containing a query graph from a large graph database is a key performance issue in all of these graph-based applications.</p>
    <p>The success of any graph database application is directly dependent on the efficiency of the graph indexing and query processing mechanisms.</p>
    <p>RDBMSs have repeatedly shown that they are very efficient, scalable and successful in hosting different kinds of data.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 2 / 22</p>
  </div>
  <div class="page">
    <p>Preliminaries: Graph Data Model</p>
    <p>In labelled graphs, vertices and edges represent the entities and the relationships between them respectively.</p>
    <p>The attributes associated with these entities and relationships are called labels.</p>
    <p>A graph database D is a collection of member graphs D = {g1, g2, ...gn} where each member graph gi is denoted as (V , E , Lv , Le ).</p>
    <p>V is the set of vertices. E  V  V is the set of edges joining two distinct vertices. Lv is the set of vertex labels. Le is the set of edge labels.</p>
    <p>labelled graphs are classified according to the direction of their edges into two main classes:</p>
    <p>compounds.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 3 / 22</p>
  </div>
  <div class="page">
    <p>Preliminaries: Subgraph Search Queries</p>
    <p>Given a graph database D = {g1, g2, ..., gn} and a graph query q, it returns the query answer set A = {gi|q  gi , gi  D}.</p>
    <p>A graph q is described as a sub-graph of another graph database member gi if the set of vertices and edges of q form subset of the vertices and edges of gi .</p>
    <p>Formally, g1(V1, E1, Lv 1, Le1) is defined as sub-graph of g2(V2, E2, Lv 2, Le2) if and only if:</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 4 / 22</p>
  </div>
  <div class="page">
    <p>Preliminaries: Subgraph Search Queries</p>
    <p>A</p>
    <p>B A</p>
    <p>C</p>
    <p>A</p>
    <p>D</p>
    <p>A</p>
    <p>B C</p>
    <p>C D</p>
    <p>A</p>
    <p>C A</p>
    <p>D</p>
    <p>B</p>
    <p>D</p>
    <p>C A</p>
    <p>A D</p>
    <p>g1 g2 g3 q</p>
    <p>m n</p>
    <p>n</p>
    <p>xx</p>
    <p>zy</p>
    <p>m z</p>
    <p>n</p>
    <p>x</p>
    <p>x</p>
    <p>ef</p>
    <p>mx n</p>
    <p>m</p>
    <p>x</p>
    <p>f m</p>
    <p>n</p>
    <p>x</p>
    <p>xx e</p>
    <p>(a) Sample graph database</p>
    <p>A</p>
    <p>B A</p>
    <p>C</p>
    <p>A</p>
    <p>D</p>
    <p>A</p>
    <p>B C</p>
    <p>C D</p>
    <p>A</p>
    <p>C A</p>
    <p>D</p>
    <p>B</p>
    <p>D</p>
    <p>C A</p>
    <p>A D</p>
    <p>g1 g2 g3 q</p>
    <p>m n</p>
    <p>n</p>
    <p>xx</p>
    <p>zy</p>
    <p>m z</p>
    <p>n</p>
    <p>x</p>
    <p>x</p>
    <p>ef</p>
    <p>mx n</p>
    <p>m</p>
    <p>x</p>
    <p>f m</p>
    <p>n</p>
    <p>x</p>
    <p>xx e</p>
    <p>(b) Graph query</p>
    <p>Figure: An example graph database and graph query</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 5 / 22</p>
  </div>
  <div class="page">
    <p>Our Approach: GraphREL</p>
    <p>Relational encoding of graph data.</p>
    <p>SQL translation of sub-graph search queries.</p>
    <p>Filtering phase.</p>
    <p>Optional verification phase.</p>
    <p>Partitioned B-tree Indexes.</p>
    <p>Statistical Summaries.</p>
    <p>Decomposition-Based and Selectivity-Aware SQL Translation.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 6 / 22</p>
  </div>
  <div class="page">
    <p>Relational Encoding of Graph Data</p>
    <p>The starting point of our relational framework is to find an efficient and suitable encoding for each graph member gi in the graph database D .</p>
    <p>We use the Vertex-Edge mapping scheme for storing directed labelled graphs with the following structure:</p>
    <p>Vertices (graphID, vertexID, vertexLabel )</p>
    <p>Edges (graphID, sVertex , dVertex , edgeLabel )</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 7 / 22</p>
  </div>
  <div class="page">
    <p>Relational Encoding of Graph Data</p>
    <p>g1</p>
    <p>graphID vertexID vLabel</p>
    <p>graphID sVertex dVertex eLabel</p>
    <p>B A</p>
    <p>C</p>
    <p>A</p>
    <p>D</p>
    <p>m n</p>
    <p>n</p>
    <p>xx</p>
    <p>zy</p>
    <p>m</p>
    <p>A</p>
    <p>B C ef</p>
    <p>mx ng2</p>
    <p>m</p>
    <p>g2 34</p>
    <p>Edges TableVertices Table</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 8 / 22</p>
  </div>
  <div class="page">
    <p>SQL Translation of Graph Queries</p>
    <p>Filtering Phase: a sub-graph query q consists of a set of vertices QV with size equal m and a set of edges QE equal n is evaluated using the following SQL translation template:</p>
    <p>SELECT DISTINCT V1.graphID, Vi .vertexID FROM Vertices as V1,..., Vertices as Vm, Edges as E1,..., Edges as En WHERE mi=2(V1.graphID = Vi .graphID) AND nj=1(V1.graphID = Ej .graphID) AND mi=1(Vi .vertexLabel = QVi .vertexLabel) AND nj=1(Ej .edgeLabel = QEj .edgeLabel) AND nj=1(Ej .sVertex = Vf .vertexID AND Ej .dVertex = Vf .vertexID);</p>
    <p>Verification Phase: an optional phase which is used to verify that each vertex in the set of filtered vertices for each candidate graph is distinct. It is applied only if more than one vertex of the set of query vertices QV have the same label. This can be easily achieved using their vertex ID.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 9 / 22</p>
  </div>
  <div class="page">
    <p>Partitioned B-tree Indexes</p>
    <p>Partitioned B-tree indexing is a slight variant of the B-tree indexing structure.</p>
    <p>The main idea is the use of low-selectivity leading columns to maintain partitions within the associated B-tree.</p>
    <p>In labelled graphs, it is generally the case that the number of distinct vertices and edges labels are far less than the number of vertices and edges respectively.</p>
    <p>For example, having an index defined in terms of columns (vertexLabel , graphID ) can reduce the access cost of sub-graph query with only one label to one disk page. On the contrary, an index defined in terms of the two columns (graphID, vertexLabel ) requires scanning a large number of disk pages.</p>
    <p>Having partitioned B-trees indexes of the high-selectivity attributes achieves fixed execution times which are no longer dependent on the size of the whole graph database.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 10 / 22</p>
  </div>
  <div class="page">
    <p>Limitations of SQL-Based Translation Approach</p>
    <p>An obvious problem of the SQL translation template is that it involves a large number of conjunctive SQL predicates and join operations between the encoding tables.</p>
    <p>Most of relational query engines will certainly fail to execute the SQL translation queries of medium size or large sub-graph queries because they are too long and too complex (this does not mean they must consequently be too expensive).</p>
    <p>Therefore, we need a decomposition mechanism to divide this large and complex SQL translation query into a sequence of intermediate queries.</p>
    <p>Applying this decomposition mechanism blindly may lead to inefficient execution plans with very large, non-required and expensive intermediate results.</p>
    <p>We use statistical summary information to achieve an efficient decomposition process.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 11 / 22</p>
  </div>
  <div class="page">
    <p>Statistical Summaries</p>
    <p>In general, one of the most effective techniques for optimizing the execution times of SQL queries is to select the relational execution based on the accurate selectivity information of the query predicates.</p>
    <p>We construct three Markov tables to store information about the frequency of occurrence of the distinct labels of vertices, distinct labels of edges and connection between pair of vertices (edges).</p>
    <p>Vertex Label Frequency</p>
    <p>A 100</p>
    <p>B 200</p>
    <p>C 38</p>
    <p>D 4</p>
    <p>E 50</p>
    <p>L 6</p>
    <p>M 10</p>
    <p>N 250</p>
    <p>O 3</p>
    <p>P 40</p>
    <p>R 55</p>
    <p>Edge Label Frequency</p>
    <p>a 40</p>
    <p>c 5</p>
    <p>e 28</p>
    <p>l 54</p>
    <p>m 140</p>
    <p>n 3</p>
    <p>o 20</p>
    <p>p 15</p>
    <p>x 8</p>
    <p>y 60</p>
    <p>z 15</p>
    <p>Edge Label Connection</p>
    <p>Frequency</p>
    <p>ab 3</p>
    <p>ac 15</p>
    <p>ae 45</p>
    <p>ec 14</p>
    <p>em 103</p>
    <p>la 5</p>
    <p>pc 18</p>
    <p>px 45</p>
    <p>xy 25</p>
    <p>xz 2 R 55</p>
    <p>Markov Table summary of vertices labels</p>
    <p>z 15</p>
    <p>Markov Table summary of edges labels</p>
    <p>za 1</p>
    <p>Markov Table summary of pair-wise edge connections</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 12 / 22</p>
  </div>
  <div class="page">
    <p>Decomposition-Based and Selectivity-Aware SQL Translation</p>
    <p>Identifying the pruning points.</p>
    <p>Calculating the number of partitions.</p>
    <p>Decomposed SQL translation.</p>
    <p>Blindly Single-Level Decomposition.</p>
    <p>Pruned Single-Level Decomposition.</p>
    <p>Pruned Multi-Level Decomposition</p>
    <p>Selectivity-aware Annotations.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 13 / 22</p>
  </div>
  <div class="page">
    <p>Decomposition-Based and Selectivity-Aware SQL Translation</p>
    <p>Identifying the pruning points Each vertex label, edge label or edge connection with low frequency is considered as a pruning point in our relational evaluation mechanism.</p>
    <p>Given a query graph q, we first check the structure of q against our summary Markov tables to identify the possible pruning points (NPP).</p>
    <p>Calculating the number of partitions Having a sub-graph query q requires NJP join operations.</p>
    <p>Assuming that the relational query engine can evaluate up to number of join operations equal to MJP in one query.</p>
    <p>The number of partitions (NOP) is computed as: (NJP/MJP )</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 14 / 22</p>
  </div>
  <div class="page">
    <p>Decomposition-Based and Selectivity-Aware SQL Translation</p>
    <p>Blindly Single-Level Decomposition If NPP = 0  we blindly decompose the query q into NOP partitions. Each partition is translated into an intermediate evaluation step Si . The final evaluation step joins all intermediate evaluation steps and adds the conjunctive conditions of the partitions connectors.</p>
    <p>Pruned Single-Level Decomposition If NPP &gt;= NOP  we distribute the pruning points across the different intermediate NOP partitions. It ensures a balanced effective pruning of all intermediate results.</p>
    <p>Pruned Multi-Level Decomposition if NPP &lt; NOP  we distribute the pruning points across a first level intermediate results of NOP partitions. An intermediate collective pruned step IPS is constructed by joining all the pruned first level intermediate results. IPS is used as an entry pruning point for the rest (NOP  NPP ) non-pruned partitions in a hierarchical multi-level fashion . Each pruning point can be used to prune more than one partition (if possible).</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 15 / 22</p>
  </div>
  <div class="page">
    <p>Decomposition-Based and Selectivity-Aware SQL Translation</p>
    <p>S1 SQL</p>
    <p>S2 SQL</p>
    <p>FES SQL</p>
    <p>S1 S2</p>
    <p>S FES</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3 S1 SQL</p>
    <p>S2 SQL</p>
    <p>FES SQL</p>
    <p>S3 SQL</p>
    <p>(a) NPP &gt; NOP</p>
    <p>S1 SQL</p>
    <p>S2 SQL</p>
    <p>FES SQL</p>
    <p>S1 S2</p>
    <p>S2</p>
    <p>FES</p>
    <p>S1 S3 S1 SQL</p>
    <p>S2 SQL</p>
    <p>FES SQL</p>
    <p>S3 SQL</p>
    <p>(b) NPP &lt; NOP</p>
    <p>Figure: Selectivity-aware decomposition process</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 16 / 22</p>
  </div>
  <div class="page">
    <p>Decomposition-Based and Selectivity-Aware SQL Translation</p>
    <p>Selectivity-aware Annotations</p>
    <p>For any given SQL query, there are a large number of alternative execution plans. These alternative execution plans may differ significantly in their use of system resources or response time.</p>
    <p>We use the statistical summary information to give influencing hints for the query optimizers by injecting additional selectivity information for the individual query predicates into the SQL translations of the graph queries.</p>
    <p>SELECT fieldlist FROM tablelist WHERE Pi SELECTIVITY Si</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 17 / 22</p>
  </div>
  <div class="page">
    <p>Experimental Results: Performance and Scalability</p>
    <p>Q4 Q8 Q12 Q16 Q20 1</p>
    <p>E x e c u ti o n T</p>
    <p>im e (</p>
    <p>m s )</p>
    <p>Query Size</p>
    <p>D2kV10E20L40M50 D10kV10E20L40M50 D50kV30E40L90M150 D100kV30E40L90M150</p>
    <p>(a) Synthetic Dataset</p>
    <p>Q4 Q8 Q12 Q16 Q20 1</p>
    <p>E x e c u ti o n T</p>
    <p>im e (</p>
    <p>m s )</p>
    <p>Query Size</p>
    <p>(b) DBLP Dataset</p>
    <p>Figure: The scalability of GraphREL.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 18 / 22</p>
  </div>
  <div class="page">
    <p>Experimental Results: The effect of using Partitioned B-tree Indexes and Selectivity Injections</p>
    <p>Q4 Q8 Q12 Q16 Q20 0</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f Im</p>
    <p>p ro</p>
    <p>v e m</p>
    <p>e n t (%</p>
    <p>)</p>
    <p>Query Size</p>
    <p>Synthetic DBLP</p>
    <p>(a) Partitioned B-tree indexes</p>
    <p>Q4 Q8 Q12 Q16 Q20 0</p>
    <p>E x e c u ti o n T</p>
    <p>im e s (</p>
    <p>m s )</p>
    <p>Query Size</p>
    <p>Synthetic DBLP</p>
    <p>(b) Injection of selectivity annotations</p>
    <p>Figure: The speedup improvement for the relational evaluation of sub-graph queries using partitioned B-tree indexes and selectivity-aware annotations.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 19 / 22</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>GraphREL is a purely relational framework to store and query graph data.</p>
    <p>In principle GraphREL has the following advantages: It can reside on any relational database system and exploits its well known matured query optimization techniques as well as its efficient and scalable query processing techniques.</p>
    <p>It has no required time cost for offline or pre-processing steps.</p>
    <p>It can handle static and dynamic (with frequent updates) graph databases very well.</p>
    <p>The selectivity annotations for the SQL evaluation scripts provide the relational query optimizers with the ability to select the most efficient execution plans and apply an efficient pruning for the non-required graph database members.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 20 / 22</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>[CIDR03] G. Graefe. Sorting And Indexing With Partitioned B-Trees. In CIDR, 2003.</p>
    <p>[SIGMOD03] T. Grust, J. Rittinger, and J. Teubner. Why Off-The-Shelf RDBMSs are Better at XPath Than You Might Expect. In SIGMOD, 2007.</p>
    <p>[VLDB04] T. Grust, S. Sakr, and J. Teubner. XQuery on SQL Hosts. In VLDB, 2004.</p>
    <p>[SIGMOD07] T. Grust, M. Mayr, J. Rittinger, S. Sakr, and J. Teubner. A SQL:1999 Code Generator for the Pathfinder XQuery Compiler. In SIGMOD, 2007.</p>
    <p>[VLDB08] J. Teubner, T. Grust, S. Maneth, and S. Sakr. Dependable Cardinality Forecats for XQuery. In VLDB, 2008.</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 21 / 22</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Thank You</p>
    <p>S. Sakr (CSE, UNSW) DASFAA09 21 April 2009 22 / 22</p>
  </div>
</Presentation>
