<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Plan-aware Resource Allocation in Serverless Query Processing</p>
    <p>Malay Bag</p>
    <p>Alekh Jindal</p>
    <p>Hiren Patel</p>
  </div>
  <div class="page">
    <p>Resource Allocation Issue in Serverless Query Processing</p>
    <p>Hard to estimate resource</p>
    <p>requirement at compile time</p>
    <p>Resource requirement</p>
    <p>changes over execution period</p>
    <p>For long running analytical</p>
    <p>query, over-allocation leads to</p>
    <p>significant inefficiencies.</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
    <p>SCOPE does not consider the query plan, instead treat the job as black box</p>
    <p>Allocate resource based on the past history and/or query plan (Morpheus,</p>
    <p>Ernest, Perforator)</p>
    <p>Dynamic re-allocation using expensive estimator based on previous run</p>
    <p>(Jockey)</p>
    <p>Find optimal resources for each operator during compile/optimize step (Raqo)</p>
    <p>In summary prior approaches does not tune resource allocation to fine grained</p>
    <p>behavior of the query execution over time</p>
  </div>
  <div class="page">
    <p>Plan-aware Resource Allocation</p>
    <p>Periodically invokes resource</p>
    <p>shaper to calculate new</p>
    <p>resource requirement.</p>
    <p>Resource shaper handles</p>
    <p>dynamic changes in the graph</p>
    <p>Calculates new requirement</p>
    <p>based on remaining part of</p>
    <p>the job graph</p>
  </div>
  <div class="page">
    <p>Plan-aware Resource Allocation</p>
    <p>At any point, if new</p>
    <p>requirement is less than</p>
    <p>current allocation, Job</p>
    <p>Manager updates Job</p>
    <p>Scheduler</p>
    <p>No performance impact,</p>
    <p>transparent to the user</p>
  </div>
  <div class="page">
    <p>Greedy Resource Shaper</p>
  </div>
  <div class="page">
    <p>Greedy Resource Shaper</p>
  </div>
  <div class="page">
    <p>Tree-ification</p>
    <p>Convert DAG to a tree by</p>
    <p>removing one of the output</p>
    <p>edges of spool operator (which</p>
    <p>has multiple consumers)</p>
    <p>Remove edges to the consumer</p>
    <p>with maximum in-degree, until</p>
    <p>the DAG become a tree</p>
    <p>Break ties with random</p>
    <p>selection</p>
    <p>Output is an inverted tree</p>
  </div>
  <div class="page">
    <p>Max Vertex Cut example</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Run 154 jobs on a virtual</p>
    <p>cluster</p>
    <p>Overall 8.3% savings of</p>
    <p>cumulative resource usage</p>
    <p>Potentially there are 8-19%</p>
    <p>saving opportunity in our 5</p>
    <p>production clusters, which</p>
    <p>would save us tens of</p>
    <p>millions of dollars in</p>
    <p>operating cost</p>
  </div>
  <div class="page">
    <p>z Thank you!</p>
    <p>Please contact {malayb, alekh.jindal, hirenp} @microsoft.com for any questions.</p>
  </div>
</Presentation>
