<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sys: A static/symbolic tool for finding good bugs in good</p>
    <p>(browser) code Fraser Brown, Dawson Engler, Deian Stefan</p>
  </div>
  <div class="page">
    <p>Goal: automatically find security bugs in browsers</p>
  </div>
  <div class="page">
    <p>Goal: automatically find security bugs in browsers</p>
    <p>Problem 1: Browsers check a lot</p>
  </div>
  <div class="page">
    <p>Fuzzers (automatically generate program inputs)</p>
    <p>Problem 1: Browsers check a lot</p>
  </div>
  <div class="page">
    <p>Santiziers (detect errors as program executes)</p>
    <p>Problem 1: Browsers check a lot</p>
  </div>
  <div class="page">
    <p>Static checkers (look for buggy patterns in source code)</p>
  </div>
  <div class="page">
    <p>Static checkers (look for buggy patterns in source code)</p>
  </div>
  <div class="page">
    <p>Static checkers (look for buggy patterns in source code)</p>
  </div>
  <div class="page">
    <p>Bounty programs (pay $$$ for bug reports)</p>
  </div>
  <div class="page">
    <p>Bounty programs (pay $$$ for bug reports)</p>
  </div>
  <div class="page">
    <p>Bounty programs (pay $$$ for bug reports)</p>
  </div>
  <div class="page">
    <p>Bounty programs (pay $$$ for bug reports)</p>
  </div>
  <div class="page">
    <p>Goal: automatically find security bugs in browsers</p>
  </div>
  <div class="page">
    <p>Goal: automatically find security bugs in browsers</p>
    <p>Problem 2: Static checking didnt find much</p>
  </div>
  <div class="page">
    <p>Goal: automatically find security bugs in browsers</p>
    <p>Problem 2: Static analysis</p>
    <p>Last sec-critical and sec-high bugs: 2014</p>
    <p>(thanks Edward Chen!)</p>
  </div>
  <div class="page">
    <p>Goal: automatically find security bugs in browsers</p>
    <p>Problem 3: Symbolic execution is hard and slow</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>Look for buggy patterns</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>Run program over all possible values</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>Start anywhere</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>- Static analysis identifies many potential errorsites ($)</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>- Static analysis identifies many potential errorsites ($)</p>
    <p>- Programmer-written static extension (avg. 175 LOC)</p>
    <p>- Symbolic execution jumps directly to candidate errorsite and executes ($$$$$)</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>- Static analysis identifies many potential errorsites ($)</p>
    <p>- Programmer-written static extension (avg. 175 LOC)</p>
    <p>- Symbolic execution jumps directly to candidate errorsite and executes ($$$$$)</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>- Static analysis identifies many potential errorsites ($)</p>
    <p>- Programmer-written static extension (max 273 LOC)</p>
    <p>- Symbolic execution jumps directly to candidate errorsite and executes ($$$$$)</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + underconstrained symbolic execution</p>
    <p>- Static analysis identifies many potential errorsites ($)</p>
    <p>- Programmer-written static extension (max 273 LOC)</p>
    <p>- Symbolic execution jumps directly to candidate errorsite and executes ($$$$$)</p>
    <p>- Programmer-written symbolic checkers (max 106 LOC)</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + UC symbolic execution</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + UC symbolic execution</p>
    <p>; ModuleID = 'undef.bc'</p>
    <p>source_filename = &quot;undef.c&quot;</p>
    <p>target datalayout =</p>
    <p>&quot;e-m:e-i64:64-f80:128-n8:16:32:64</p>
    <p>S128&quot;</p>
    <p>target triple =</p>
    <p>&quot;x86_64-pc-linux-gnu&quot;</p>
    <p>LLVM IR File(s)</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + UC symbolic execution</p>
    <p>; ModuleID = 'undef.bc'</p>
    <p>source_filename = &quot;undef.c&quot;</p>
    <p>target datalayout =</p>
    <p>&quot;e-m:e-i64:64-f80:128-n8:16:32:64</p>
    <p>S128&quot;</p>
    <p>target triple =</p>
    <p>&quot;x86_64-pc-linux-gnu&quot;</p>
    <p>LLVM IR File(s)</p>
    <p>Alloca x =&gt; Uninit x</p>
    <p>Store y x =&gt; Init x</p>
    <p>Load x =&gt; Error x</p>
    <p>.</p>
    <p>Static extension</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + UC symbolic execution</p>
    <p>; ModuleID = 'undef.bc'</p>
    <p>source_filename = &quot;undef.c&quot;</p>
    <p>target datalayout =</p>
    <p>&quot;e-m:e-i64:64-f80:128-n8:16:32:64</p>
    <p>S128&quot;</p>
    <p>target triple =</p>
    <p>&quot;x86_64-pc-linux-gnu&quot;</p>
    <p>LLVM IR File(s)</p>
    <p>Alloca x =&gt; Uninit x</p>
    <p>Store y x =&gt; Init x</p>
    <p>Load x =&gt; Error x</p>
    <p>.</p>
    <p>Static extension</p>
    <p>Alloca x</p>
    <p>Store y z</p>
    <p>Load x</p>
    <p>Suspicious path</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + UC symbolic execution</p>
    <p>; ModuleID = 'undef.bc'</p>
    <p>source_filename = &quot;undef.c&quot;</p>
    <p>target datalayout =</p>
    <p>&quot;e-m:e-i64:64-f80:128-n8:16:32:64</p>
    <p>S128&quot;</p>
    <p>target triple =</p>
    <p>&quot;x86_64-pc-linux-gnu&quot;</p>
    <p>LLVM IR File(s)</p>
    <p>Alloca x =&gt; Uninit x</p>
    <p>Store y x =&gt; Init x</p>
    <p>Load x =&gt; Error x</p>
    <p>.</p>
    <p>Static extension</p>
    <p>Alloca x</p>
    <p>Store y z</p>
    <p>Load x</p>
    <p>Suspicious path</p>
    <p>V = Load shadow x</p>
    <p>If isSet V</p>
    <p>Then Bug</p>
    <p>Else No Bug</p>
    <p>Symbolic checker</p>
  </div>
  <div class="page">
    <p>New approach: Static checking + UC symbolic execution</p>
    <p>; ModuleID = 'undef.bc'</p>
    <p>source_filename = &quot;undef.c&quot;</p>
    <p>target datalayout =</p>
    <p>&quot;e-m:e-i64:64-f80:128-n8:16:32:64</p>
    <p>S128&quot;</p>
    <p>target triple =</p>
    <p>&quot;x86_64-pc-linux-gnu&quot;</p>
    <p>LLVM IR File(s)</p>
    <p>Alloca x =&gt; Uninit x</p>
    <p>Store y x =&gt; Init x</p>
    <p>Load x =&gt; Error x</p>
    <p>.</p>
    <p>Static extension</p>
    <p>Alloca x</p>
    <p>Store y z</p>
    <p>Load x</p>
    <p>Suspicious path</p>
    <p>V = Load shadow x</p>
    <p>If isSet V</p>
    <p>Then Bug</p>
    <p>Else No Bug</p>
    <p>Symbolic checker</p>
    <p>Bug</p>
  </div>
  <div class="page">
    <p>Walk through heap out-of-bounds bug, CVE 2019-5827</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Static extension (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Symbolic checker (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Symbolic checker (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
    <p>sizeof(u32) * nStat &gt;= (sizeof(u32) + 10) * nStat</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>a &amp; b &amp; c | d | e ....</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>a &amp; b &amp; c | d | e ....</p>
    <p>a = true</p>
    <p>b = true</p>
    <p>c = true</p>
    <p>d = false</p>
    <p>e = true</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>a &amp; not a &amp; b &amp; c | d | e ....</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>a &amp; not a &amp; b &amp; c | d | e ....</p>
    <p>Unsat</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>...</p>
    <p>malloc (y)</p>
    <p>x [y -1]</p>
    <p>Suspicious path</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>...</p>
    <p>malloc (y)</p>
    <p>x [y -1]</p>
    <p>Suspicious path</p>
    <p>x = 0xdeadbeef</p>
    <p>tmp = y - 1</p>
    <p>...</p>
    <p>Constraints</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>...</p>
    <p>malloc (y)</p>
    <p>x [y -1]</p>
    <p>Suspicious path</p>
    <p>x = 0xdeadbeef</p>
    <p>tmp = y - 1</p>
    <p>...</p>
    <p>Constraints</p>
    <p>y - 1 &gt; y</p>
    <p>Bug constraints</p>
  </div>
  <div class="page">
    <p>Constraints express lines of code as logical formulas</p>
    <p>...</p>
    <p>malloc (y)</p>
    <p>x [y -1]</p>
    <p>Suspicious path</p>
    <p>x = 0xdeadbeef</p>
    <p>tmp = y - 1</p>
    <p>...</p>
    <p>Constraints</p>
    <p>y - 1 &gt; y</p>
    <p>Bug constraints</p>
    <p>SAT</p>
    <p>or</p>
    <p>UNSAT</p>
    <p>SMT Solver</p>
  </div>
  <div class="page">
    <p>Symbolic checker (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>Symbolic checker (heap out-of-bounds)</p>
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
  </div>
  <div class="page">
    <p>a = sqlite3_malloc( (sizeof(u32)+10)*nStat );</p>
    <p>memset(a, 0, sizeof(u32)*(nStat) );</p>
    <p>sizeof(u32) * nStat &gt;= (sizeof(u32) + 10) * nStat</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Results: - 4 checkers (2 out-of-bounds, 1 uninitialized memory, 1 UAF)</p>
    <p>- 51 bugs (43 confirmed), 18 false positives</p>
    <p>- 3 browser bug bounties (17 total bugs)</p>
    <p>- 4 browser CVEs (18 total bugs)</p>
    <p>- 2 browser security audits</p>
    <p>- One Coverity re-configuration</p>
    <p>mlfbrown@stanford.edu</p>
  </div>
</Presentation>
