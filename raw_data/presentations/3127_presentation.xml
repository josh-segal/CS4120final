<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Language-based Defenses against Untrusted Browser Origins</p>
    <p>K Bhargavan</p>
    <p>INRIA Paris</p>
    <p>S Maffeis</p>
    <p>Imperial College London</p>
    <p>A Delignat-Lavaud</p>
    <p>INRIA Paris</p>
  </div>
  <div class="page">
    <p>Towards Defensive Web Components</p>
    <p>How do we write security-sensiHve JavaScript components that may be safely executed within parHally-trusted websites?</p>
    <p>Threats:  Malicious host server  Buggy or malicious scripts  XSS aOacks</p>
    <p>Component Goals:  Its funcHonality cannot be tampered with  Its secrets cannot be stolen</p>
  </div>
  <div class="page">
    <p>Example: Single Sign-On</p>
    <p>Provides access to users idenHty and social data</p>
    <p>Runs 3-party authenHcaHon and authorizaHon protocol</p>
    <p>Holds secret access token</p>
    <p>How to prevent access token leaks?  to unauthorized hosts  by malicious, buggy scripts on honest hosts</p>
  </div>
  <div class="page">
    <p>Example: Client-side EncrypHon</p>
    <p>Storage and retrieval of encrypted data using a client-side crypto library  Cloud storage services  Password managers</p>
    <p>Long-term encrypHon keys never leave the client</p>
    <p>How to protect against encrypHon key leaks?</p>
    <p>by other scripts on page</p>
  </div>
  <div class="page">
    <p>Survey of Web Security Components</p>
    <p>We studied and analyzed mechanisms used by popular web security components  Single sign-on, Password managers, Encrypted cloud storage services, Privacy-sensiHve web applicaHons</p>
    <p>Variety of deployment techniques with different levels of code integrity and isolaHon  &lt;script&gt;  Dynamically load script and eval  &lt;iframe&gt;  Java applet  bookmarklet  browser extension</p>
  </div>
  <div class="page">
    <p>AOacks on Surveyed Components</p>
    <p>Unauthorized websites can fool components into releasing secrets meant for honest websites</p>
    <p>AOackers can exploit standard website vulnerabiliHes on authorized websites to steal component secrets  XSS, Open Redirectors, CSRF,</p>
  </div>
  <div class="page">
    <p>Towards Robust Component Security</p>
    <p>Component security is fragile against same-origin aOackers  every buggy script presents a potenHal aOack  every XSS aOack is fatal and leaks all secrets</p>
    <p>Ge]ng component security right against cross-origin aOackers is hard, even with strong isolaHon mechanisms</p>
    <p>flaws in authorizaHon logic  incorrect use of crypto  incorrect assumpHons about the same origin policy</p>
    <p>Need for a component programming framework that affords stronger isola9on guarantees and supports automated formal analysis</p>
  </div>
  <div class="page">
    <p>The DJS Architecture</p>
    <p>DJS: a small staHcally-typed subset of JavaScript  formal isolaHon guarantees against malicious context</p>
    <p>DJCL: a crypto library in DJS  secure communicaHons with</p>
    <p>other trusted components</p>
    <p>applicaHons built with DJS, DJCL and browser mechanisms</p>
    <p>DJS2PV: a protocol verifier  verifies security goals with a</p>
    <p>symbolic model of browser, crypto</p>
    <p>See: hOp://www.defensivejs.com</p>
  </div>
  <div class="page">
    <p>DJS DESIGN BY EXAMPLE</p>
  </div>
  <div class="page">
    <p>Example: Token-based API Access</p>
    <p>Goal: A JavaScript program that uses a secret token to restrict access to a REST API</p>
    <p>(code excerpted from OWASP CSRFGuard 3)</p>
    <p>even when running with malicious scripts  aOackers goal: bypass acl and/or steal the token</p>
    <p>&lt;script&gt;! var token = XXXYYYYZZZ;! var acl = [https://rest.W.com,] ! var api = function(url){!</p>
    <p>! if (acl.indexOf(url) !== -1) {! return xhr(url+?token=+token);! }}! &lt;/script&gt;!</p>
    <p>Page can read &amp; write global</p>
    <p>variables, DOM, localStorage</p>
  </div>
  <div class="page">
    <p>Example: Using JavaScript Closures</p>
    <p>Local variables in funcHon bodies are not exposed to the JavaScript context</p>
    <p>&lt;script&gt;! var api = (function(){! var token = XXXYYYYZZZ;! var acl = [https://rest.W.com,] ! var api = function(url){!</p>
    <p>! if (acl.indexOf(url) !== -1) {! return xhr(url+&quot;?token=+token);}}! return api;! })()! &lt;/script&gt;!</p>
    <p>Page scripts can read inline and same-origin</p>
    <p>scripts</p>
  </div>
  <div class="page">
    <p>Example: Using a Script Server</p>
    <p>Serve script from a separate origin  Page cannot read cross-origin scripts (SOP)  Server generates, embeds session-specific token</p>
    <p>&lt;script src=http://scripts.W.com/api.js&gt;! &lt;/script&gt;!</p>
    <p>var api = (function(){! var token = XXXYYYYZZZ;! var acl = [https://rest.W.com,] ! var api = function(url){!</p>
    <p>! if (acl.indexOf(url) !== -1) {! return xhr(url+&quot;?token=&quot;+token);}}! return api;! })()!</p>
    <p>Browsers XHR primiHve can be redefined to steal token</p>
  </div>
  <div class="page">
    <p>var api = (function(){! var token = XXXYYYYZZZ;! var acl = [https://rest.W.com,] ! var hmac = function(k,x){f().}! var api = function(url){!</p>
    <p>!if (acl.indexOf(url) !== -1) {! return xhr(url+&quot;?token=+hmac(token,url);}}! return api;! })()!</p>
    <p>Example: Using Crypto</p>
    <p>Instead of token, send a MAC using the token to authenHcate the XHR request</p>
    <p>&lt;script src=http://scripts.W.com/api.js&gt;! &lt;/script&gt;!</p>
    <p>any external funcHon call can walk the stack to</p>
    <p>steal k</p>
    <p>Array.prototype. indexOf can be redefined to return 0 url provided by aOacker</p>
    <p>may be an object triggering an implicit conversion (toString)</p>
  </div>
  <div class="page">
    <p>Example: Self-contained Code</p>
    <p>No external references  include all auxiliary funcHons within closure  dont trigger implicit conversions, prototype lookups,</p>
    <p>&lt;script src=http://scripts.W.com/api.js&gt;! &lt;/script&gt;!</p>
    <p>var api = (function(){! var token = XXXYYYYZZZ;! var acl = [https://rest.W.com,] ! var mem = function(x,acl){} ! var hmac = function(k,x){f().}! var api_url = function(url){!</p>
    <p>!if (mem(url,acl)) {! return (url+&quot;?token=+hmac(token,url));}}! return (function(url){xhr(api_url(url))});! })()!</p>
  </div>
  <div class="page">
    <p>Example: WriHng Defensive JavaScript</p>
    <p>It is possible to carefully write JavaScript code that protects its funcHonality and secrets from malicious scripts  relying on a separate script server, a cryptographic library, and by wriHng fully self-contained code</p>
    <p>but it can be painful and error-prone  easy to miss JavaScript corner cases  need for automated tools and formal guarantees</p>
  </div>
  <div class="page">
    <p>DJS Type System</p>
    <p>A sound staHc type system that idenHfies a formal subset of JavaScript and enforces our defensive idioms  fully self-contained, no external references  all code wrapped in a closure and exposed through a typed first-order API</p>
    <p>Type Safety Guarantees:  Independence: The input-output funcHonality of well- typed programs is the same in all JavaScript contexts</p>
    <p>Encapsula9on: The only way a context can discover the content of a typed program is by calling its API</p>
  </div>
  <div class="page">
    <p>Example: Typing Guarantees</p>
    <p>Independence: External scripts cannot bypass the authorizaHon check on url and acl</p>
    <p>EncapsulaHon: External scripts cannot read token, but can call api to learn the HMAC</p>
    <p>var api = (function(){! var token = XXXYYYYZZZ;! var acl = [https://rest.W.com,] ! var mem = function(x,acl){} ! var hmac = function(k,x){f().}! var api_url = function(url){!</p>
    <p>!if (mem(url,acl)) {! return (url+&quot;?token=+hmac(token,url));}}! return (function(url){return (xhr(api_url(url)))});! })()!</p>
  </div>
  <div class="page">
    <p>Typing RestricHons</p>
    <p>All variables are lexically scoped  and staHcally typed  no implicit coercions</p>
    <p>Objects and arrays are defined as literals  not extensible  no prototype inheritance  limited support for dynamic accessors (x[y])</p>
    <p>No eval  No direct access to DOM or browser libraries  Possible to grant limited access via postMessage</p>
  </div>
  <div class="page">
    <p>Programming in DJS</p>
    <p>Not meant for general web applicaHons but works well for security-criHcal components  Cryptography, AuthorizaHon Policies  Rest of the page remains in full JavaScript</p>
    <p>Type inference tool  Verifies that a JavaScript program is well-typed in DJS</p>
  </div>
  <div class="page">
    <p>DJS APPLICATIONS</p>
  </div>
  <div class="page">
    <p>DJCL: Defensive Crypto Library  A JavaScript crypto library wriOen in DJS</p>
    <p>SHA-256, HMAC, AES CBC/CCM/GCM, RSA OAEP/PSS  BASE64, UTF8, JSON, JOSE</p>
    <p>Typing guarantees:  Crypto computaHons cannot be tampered with  Does not leak keys to the environment (except possibly through side-channels)</p>
    <p>High performance:  As fast as (or faster than) SJCL, JSBN  StaHcally-allocated, self-contained, funcHonal code</p>
    <p>in JavaScript is well suited to opHmizaHon (like asm.js)</p>
  </div>
  <div class="page">
    <p>DJS2PV: Verifying DJS ApplicaHons</p>
    <p>DJS to pi calculus translaHon  uses staHc typing  DJCL -&gt; symbolic crypto model</p>
    <p>WebSpi Browser Model  HTTP/HTTPS, XMLHOpRequest  Cookies, localStorage  JavaScript heap, SOP</p>
    <p>ProVerif protocol verifier  Dolev-Yao adversary,</p>
    <p>unbounded sessions</p>
    <p>Verifies secrecy and authenHcity  Or finds aOacks</p>
  </div>
  <div class="page">
    <p>Password Manager Bookmarklet</p>
    <p>LastPass Login Bookmarklet  On click included code runs in the current page  Uses an embedded secret to perform authenHcated RPC with LastPass server</p>
    <p>AAack: Malicious script on hosHng page can steal the bookmarklet secret (and hence LastPass data)</p>
  </div>
  <div class="page">
    <p>Password Manager Bookmarklet</p>
    <p>Improved version of LastPass Login  Uses DJS to isolate bookmarklet code from page  Secure AJAX call to LastPass server using DJCL  Fits in 2048 bytes (including AES, HMAC)  Protocol model extracted and verified with DJS2PV</p>
    <p>Improved Security Guarantees  Bookmarklet secret and LastPass passwords not revealed to malicious sites</p>
    <p>Click Authen9ca9on: Form only filled if the user clicks on the bookmarklet, no automaHc login</p>
  </div>
  <div class="page">
    <p>Script-level Access Control for FB</p>
    <p>Facebook API and token accessible to all scripts running on the host origin  Vulnerable to a number of web aOacks  Open Redirectors, XSS, malicious hosted pages  Should be accessible only by site scripts</p>
  </div>
  <div class="page">
    <p>Script-level Access Control for FB</p>
    <p>Modified Facebook API design:  Token is never released to the page,  Only authorized scripts may call the FB API  API calls authenHcated using session keys and DJCL</p>
    <p>Results:  Modify one method in the FB SDK (0.5% of codebase)  Add 20 lines of DJS code + DJCL to authorized scripts  Negligible performance impact  Protocol model extracted and verified with DJS2PV</p>
  </div>
  <div class="page">
    <p>XSS-Resistant Client-side EncrypHon</p>
    <p>ConfiChair website uses client-side encrypHon  Java Crypto applet with JavaScript API  Keys stored in local storage  XSS aOack on any page leaks all keys</p>
  </div>
  <div class="page">
    <p>XSS-Resistant Client-side EncrypHon</p>
    <p>Our design:  Java applet replaced with DJCL  EncrypHon scripts embedded with session key  Keys stored encrypted with session key in local storage  No other script obtains the keys</p>
    <p>Result:  Modified less than 10 lines of website code  EncrypHon library is typechecked in DJS  Full crypto protocol verified with DJS2PV</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Many recent aOacks on JavaScript security components  DJS: An architecture for programming and analyzing</p>
    <p>JavaScript security components</p>
    <p>Small code changes yield strong isolaHon guarantees  XSS-resistant security components  applicable even to server-side JavaScript (e.g. Node)</p>
    <p>DJS programs are fast or faster than idiomaHc JavaScript  triggers opHmizaHons similar to asm.js</p>
    <p>Automated formal analysis for web crypto protocols in DJS  relying on formal models of crypto and the browser</p>
  </div>
  <div class="page">
    <p>QuesHons?</p>
    <p>Try it: hOp://www.defensivejs.com</p>
  </div>
</Presentation>
