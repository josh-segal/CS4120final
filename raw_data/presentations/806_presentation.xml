<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lowering the Barriers to</p>
    <p>Industrial Control System</p>
    <p>Security with GRFICS</p>
    <p>David Formby, Milad Rad, and Raheem Beyah</p>
  </div>
  <div class="page">
    <p>Large cybersecurity skills gap even with good tools</p>
    <p>Metasploitable, Kali Linux, previous ASE work</p>
    <p>ICS security gap even larger</p>
    <p>Expensive equipment and software</p>
    <p>Expensive and dangerous to practice physical attacks</p>
    <p>No ICS equivalent to Metasploitable</p>
    <p>ICS personnel misinformed about security</p>
    <p>Air gap, not a target, not possible</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Hardware testbeds</p>
    <p>Singapore University of Technology</p>
    <p>Water treatment facility, water distribution network, and small scale electric</p>
    <p>power grid network.</p>
    <p>Department of Energy - SCADA testbed</p>
    <p>Not scalable</p>
    <p>Virtual</p>
    <p>OpenPLC</p>
    <p>Not convincing</p>
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>ICS Background</p>
    <p>Insecure by design</p>
    <p>No/weak passwords, password</p>
    <p>policies</p>
    <p>No message authentication</p>
    <p>Life cycle &gt; 10 years</p>
    <p>Difficult to patch</p>
    <p>Network defenses critical</p>
    <p>Physical exploit</p>
  </div>
  <div class="page">
    <p>Programmable Logic Controller (PLC) Background</p>
    <p>Essentially industrialized</p>
    <p>microcontroller</p>
    <p>Ruggedized, real-time constraints</p>
    <p>Control physical equipment</p>
    <p>Programming languages</p>
    <p>Ladder logic  graphical, like hardware</p>
    <p>relays</p>
    <p>Structured text  C like language</p>
    <p>Instruction list  assembly like language</p>
    <p>Function block diagram</p>
    <p>Sequential function charts</p>
  </div>
  <div class="page">
    <p>GRFICS Overview</p>
  </div>
  <div class="page">
    <p>GRFICS Overview</p>
  </div>
  <div class="page">
    <p>Physical Process Simulation</p>
    <p>Tennessee Eastman Challenge Process</p>
    <p>Exothermic chemical reactor simulation</p>
    <p>Originally for process control engineers, in Fortran</p>
    <p>Two input feeds, product output and purge valve</p>
    <p>More efficient at higher pressure</p>
    <p>Key measurements</p>
    <p>Reactor pressure and level</p>
    <p>Cost  i.e. how much is wasted through purge</p>
    <p>C++, JSON API over port 55555</p>
  </div>
  <div class="page">
    <p>Simplified Tennessee Eastman Chemical Process</p>
  </div>
  <div class="page">
    <p>Remote IO Layer</p>
    <p>Modbus servers on 6 IP address aliases</p>
    <p>Report measurements to PLC</p>
    <p>Take commands from PLC to control valves</p>
    <p>JSON API</p>
    <p>Get current values from simulation and update valves</p>
  </div>
  <div class="page">
    <p>Process Simulation</p>
    <p>Unity 3D Game Engine</p>
    <p>Built-in physics engine for collisions</p>
    <p>Popular with active and supportive</p>
    <p>community</p>
    <p>GRFICS</p>
    <p>Purchased 3D models of reactor,</p>
    <p>pipe, valves, warehouse</p>
    <p>Get values using JSON API</p>
    <p>Overlay current values and</p>
    <p>summarize in sidepane</p>
  </div>
  <div class="page">
    <p>Visualization of Successful Attacks</p>
  </div>
  <div class="page">
    <p>OpenPLC and libmodbus</p>
    <p>OpenPLC  Open source software PLC</p>
    <p>Primarily speaks Modbus</p>
    <p>Old, common, super simple</p>
    <p>Move raw data using registers</p>
    <p>Buffer overflow for libmodbus &lt;= v3.0.2</p>
    <p>Mismatch in max number of bytes and number of registers requested</p>
    <p>Binary data, no need to encode payload</p>
    <p>Standard Debian package</p>
  </div>
  <div class="page">
    <p>Engineering Workstation/HMI</p>
  </div>
  <div class="page">
    <p>Example Attacks</p>
    <p>MITM</p>
    <p>Command injection</p>
    <p>False data injection</p>
    <p>Reprogramming PLC</p>
    <p>Stuxnet</p>
    <p>Loading malicious binary payload</p>
    <p>TRITON</p>
    <p>Common IT attacks</p>
    <p>Password cracking</p>
    <p>Buffer overflow</p>
  </div>
  <div class="page">
    <p>Example Defenses</p>
    <p>Network segmentation</p>
    <p>ISA 95 Reference model</p>
    <p>IDS/IPS</p>
    <p>Snort rules to detect and/or stop buffer</p>
    <p>overflow</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Installation</p>
    <p>Tedious if from scratch, also have pre-built VMs for download</p>
    <p>Good hardware required  30GB HDD, 8GB RAM, Quad core</p>
    <p>Fidelity</p>
    <p>Simplified simulation, open source quality not industrial quality</p>
    <p>Good enough physics for CS background</p>
    <p>Performance</p>
    <p>Unity visualization can get slow under attacks</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Work</p>
    <p>ICS security skills gap is larger due to higher barriers to entry</p>
    <p>GRFICS</p>
    <p>Free and open source</p>
    <p>Improved realism and engagement over previous work</p>
    <p>Future work</p>
    <p>Incorporate into graduate level Cyber physical system security class</p>
    <p>Improve fidelity</p>
    <p>Real ICS software, larger network</p>
    <p>Add more scenarios</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Thank you!</p>
    <p>David Formby</p>
    <p>djformby@gatech.edu dformby@fortiphyd.com</p>
    <p>@fortiphyd</p>
  </div>
</Presentation>
