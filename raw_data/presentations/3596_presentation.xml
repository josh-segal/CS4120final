<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Automating the Development of Chosen Ciphertext Attacks</p>
    <p>Gabrielle Beck Max Zinkus Matthew D. Green</p>
    <p>Johns Hopkins University</p>
    <p>{becgabri, zinkus, mgreen}@cs.jhu.edu</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Introduction</p>
    <p>Our goal: Automating Chosen Ciphertext Attack Discovery</p>
    <p>Unauthenticated encryption is prevalent</p>
    <p>Poor design</p>
    <p>Efficiency needs</p>
    <p>Chosen Ciphertext Attacks (CCA)</p>
    <p>Well understood, difficult to implement</p>
    <p>Bespoke attacks for each target</p>
    <p>(PoCNot interested)</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Padding Oracles &amp; Beyond</p>
    <p>Example: Padding oracles and Vaudenays attack on CBC mode</p>
    <p>Why stop at padding? Compression, range checks, validation, ...</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Modeling Chosen Ciphertext Attacks</p>
    <p>Goal: compute the decryption in some number of queries</p>
    <p>Oracle predicate O : C  {True,False} Malleation function Fs : C  C the encryption scheme admits A ciphertext c  C ( C</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Process of Elimination</p>
    <p>...but that number could be very large.</p>
    <p>Eliminating large classes of messages?</p>
    <p>Key idea: Compute s to select a malleation</p>
    <p>(O,Fs ) together split C between True and False Optimal s maximizes eliminated messages</p>
    <p>M0 &lt;latexit sha1_base64=&quot;M1BMgW9yC0sfoEjw99b+gXKVwgU=&quot;&gt;AAAB8XicbVBNS8NAEJ34WetX1aOXxSJ4KkkV9Fj04kWoYD+wDWWznbRLN5uwuxFK6L/w4kERr/4bb/4bt20O2vpg4PHeDDPzgkRwbVz321lZXVvf2CxsFbd3dvf2SweHTR2nimGDxSJW7YBqFFxiw3AjsJ0opFEgsBWMbqZ+6wmV5rF8MOME/YgOJA85o8ZKj1mXUUHuJj23Vyq7FXcGsky8nJQhR71X+ur2Y5ZGKA0TVOuO5ybGz6gynAmcFLupxoSyER1gx1JJI9R+Nrt4Qk6t0idhrGxJQ2bq74mMRlqPo8B2RtQM9aI3Ff/zOqkJr/yMyyQ1KNl8UZgKYmIyfZ/0uUJmxNgSyhS3txI2pIoyY0Mq2hC8xZeXSbNa8c4r1fuLcu06j6MAx3ACZ+DBJdTgFurQAAYSnuEV3hztvDjvzse8dcXJZ47gD5zPH91XkGI=&lt;/latexit&gt;</p>
    <p>M  &lt;latexit sha1_base64=&quot;5zR0Fbppn5rAnb6ymtZ37sXxhWA=&quot;&gt;AAAB6nicbVDLSgNBEOz1GeMr6tHLYBDEQ9iNgh6DXrwIEc0DkjXMTibJkNnZZaZXCEs+wYsHRbz6Rd78GyfJHjSxoKGo6qa7K4ilMOi6387S8srq2npuI7+5tb2zW9jbr5so0YzXWCQj3Qyo4VIoXkOBkjdjzWkYSN4IhtcTv/HEtRGResBRzP2Q9pXoCUbRSve3j6edQtEtuVOQReJlpAgZqp3CV7sbsSTkCpmkxrQ8N0Y/pRoFk3ycbyeGx5QNaZ+3LFU05MZPp6eOybFVuqQXaVsKyVT9PZHS0JhRGNjOkOLAzHsT8T+vlWDv0k+FihPkis0W9RJJMCKTv0lXaM5QjiyhTAt7K2EDqilDm07ehuDNv7xI6uWSd1Yq350XK1dZHDk4hCM4AQ8uoAI3UIUaMOjDM7zCmyOdF+fd+Zi1LjnZzAH8gfP5A79MjXE=&lt;/latexit&gt;</p>
    <p>M1 &lt;latexit sha1_base64=&quot;qrzZLPbzWZoWeKKFcxmBY7acdOw=&quot;&gt;AAAB8XicbVBNS8NAEJ34WetX1aOXxSJ4KkkV9Fj04kWoYD+wDWWznbRLN5uwuxFK6L/w4kERr/4bb/4bt20O2vpg4PHeDDPzgkRwbVz321lZXVvf2CxsFbd3dvf2SweHTR2nimGDxSJW7YBqFFxiw3AjsJ0opFEgsBWMbqZ+6wmV5rF8MOME/YgOJA85o8ZKj1mXUUHuJj2vVyq7FXcGsky8nJQhR71X+ur2Y5ZGKA0TVOuO5ybGz6gynAmcFLupxoSyER1gx1JJI9R+Nrt4Qk6t0idhrGxJQ2bq74mMRlqPo8B2RtQM9aI3Ff/zOqkJr/yMyyQ1KNl8UZgKYmIyfZ/0uUJmxNgSyhS3txI2pIoyY0Mq2hC8xZeXSbNa8c4r1fuLcu06j6MAx3ACZ+DBJdTgFurQAAYSnuEV3hztvDjvzse8dcXJZ47gD5zPH97bkGM=&lt;/latexit&gt;</p>
    <p>M0 &lt;latexit sha1_base64=&quot;M1BMgW9yC0sfoEjw99b+gXKVwgU=&quot;&gt;AAAB8XicbVBNS8NAEJ34WetX1aOXxSJ4KkkV9Fj04kWoYD+wDWWznbRLN5uwuxFK6L/w4kERr/4bb/4bt20O2vpg4PHeDDPzgkRwbVz321lZXVvf2CxsFbd3dvf2SweHTR2nimGDxSJW7YBqFFxiw3AjsJ0opFEgsBWMbqZ+6wmV5rF8MOME/YgOJA85o8ZKj1mXUUHuJj23Vyq7FXcGsky8nJQhR71X+ur2Y5ZGKA0TVOuO5ybGz6gynAmcFLupxoSyER1gx1JJI9R+Nrt4Qk6t0idhrGxJQ2bq74mMRlqPo8B2RtQM9aI3Ff/zOqkJr/yMyyQ1KNl8UZgKYmIyfZ/0uUJmxNgSyhS3txI2pIoyY0Mq2hC8xZeXSbNa8c4r1fuLcu06j6MAx3ACZ+DBJdTgFurQAAYSnuEV3hztvDjvzse8dcXJZ47gD5zPH91XkGI=&lt;/latexit&gt;</p>
    <p>M  &lt;latexit sha1_base64=&quot;5zR0Fbppn5rAnb6ymtZ37sXxhWA=&quot;&gt;AAAB6nicbVDLSgNBEOz1GeMr6tHLYBDEQ9iNgh6DXrwIEc0DkjXMTibJkNnZZaZXCEs+wYsHRbz6Rd78GyfJHjSxoKGo6qa7K4ilMOi6387S8srq2npuI7+5tb2zW9jbr5so0YzXWCQj3Qyo4VIoXkOBkjdjzWkYSN4IhtcTv/HEtRGResBRzP2Q9pXoCUbRSve3j6edQtEtuVOQReJlpAgZqp3CV7sbsSTkCpmkxrQ8N0Y/pRoFk3ycbyeGx5QNaZ+3LFU05MZPp6eOybFVuqQXaVsKyVT9PZHS0JhRGNjOkOLAzHsT8T+vlWDv0k+FihPkis0W9RJJMCKTv0lXaM5QjiyhTAt7K2EDqilDm07ehuDNv7xI6uWSd1Yq350XK1dZHDk4hCM4AQ8uoAI3UIUaMOjDM7zCmyOdF+fd+Zi1LjnZzAH8gfP5A79MjXE=&lt;/latexit&gt;</p>
    <p>Gi1 &lt;latexit sha1_base64=&quot;S1j5w+NfiWTdPk8skSfhXhxrrUQ=&quot;&gt;AAAB7nicbVBNS8NAEJ34WetX1aOXxSJ4sSRV0GPRgx4r2A9oQ9lsN+3SzSbsToQS+iO8eFDEq7/Hm//GbZuDtj4YeLw3w8y8IJHCoOt+Oyura+sbm4Wt4vbO7t5+6eCwaeJUM95gsYx1O6CGS6F4AwVK3k40p1EgeSsY3U791hPXRsTqEccJ9yM6UCIUjKKVWne9TJx7k16p7FbcGcgy8XJShhz1Xumr249ZGnGFTFJjOp6boJ9RjYJJPil2U8MTykZ0wDuWKhpx42ezcyfk1Cp9EsbalkIyU39PZDQyZhwFtjOiODSL3lT8z+ukGF77mVBJilyx+aIwlQRjMv2d9IXmDOXYEsq0sLcSNqSaMrQJFW0I3uLLy6RZrXgXlerDZbl2k8dRgGM4gTPw4ApqcA91aACDETzDK7w5ifPivDsf89YVJ585gj9wPn8At6SPKQ==&lt;/latexit&gt;</p>
    <p>Gi &lt;latexit sha1_base64=&quot;OBeHGUbhgcMPk9H7MrZd2pezA6s=&quot;&gt;AAAB7HicbVBNS8NAEJ3Ur1q/qh69LBbBU0mqoMeiBz1WMG2hDWWznbZLN5uwuxFK6G/w4kERr/4gb/4bt20O2vpg4PHeDDPzwkRwbVz32ymsrW9sbhW3Szu7e/sH5cOjpo5TxdBnsYhVO6QaBZfoG24EthOFNAoFtsLx7cxvPaHSPJaPZpJgENGh5APOqLGSf9fL+LRXrrhVdw6ySrycVCBHo1f+6vZjlkYoDRNU647nJibIqDKcCZyWuqnGhLIxHWLHUkkj1EE2P3ZKzqzSJ4NY2ZKGzNXfExmNtJ5Eoe2MqBnpZW8m/ud1UjO4DjIuk9SgZItFg1QQE5PZ56TPFTIjJpZQpri9lbARVZQZm0/JhuAtv7xKmrWqd1GtPVxW6jd5HEU4gVM4Bw+uoA730AAfGHB4hld4c6Tz4rw7H4vWgpPPHMMfOJ8/26SOtw==&lt;/latexit&gt;</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Boolean Satisfiability</p>
    <p>Using SAT to compute s</p>
    <p>We can encode finding a malleation string as a SAT problem:</p>
    <p>For formula (v1, . . . ,vn), find assignment to v1, . . . ,vn s.t.  is true</p>
    <p>Then, we can use SAT solvers to find s!</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Max#SAT</p>
    <p>Problem: Computed s is valid but arbitrary</p>
    <p>Solution: Maximize eliminated messages in SAT formula over s</p>
    <p>Max#SAT: (x1, . . . ,y1, . . . )  assignment to variables in X maximizing the number of assignments to those in Y</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Leveraging Max#SAT</p>
    <p>Max#SAT: Optimize s, maximizing |M0| and |M1|</p>
    <p>We can implement a Max#SAT oracle in practice1</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Analysis</p>
    <p>Idealized: The derived attack is greedy in expectation</p>
    <p>Reality:</p>
    <p>Probably approximately greedy in expectation</p>
    <p>Only optimal for some formats</p>
    <p>But, the generated queries are effective and interpretable</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>SMT/SAT solver</p>
    <p>Attack Orchestrator</p>
    <p>Target interface (shim)</p>
    <p>Target system</p>
    <p>Ciphertext malleator</p>
    <p>oracle queries</p>
    <p>responses</p>
    <p>Attack tooling</p>
    <p>target ciphertext, functions, params</p>
    <p>plaintext</p>
    <p>Compatibility layer</p>
    <p>Background SAT Contribution Conclusion</p>
    <p>Delphinium</p>
    <p>An end-to-end tool for attack generation!</p>
    <p>Given Fs and O in Python, and oracle results on c, Computes maximizing malleations s,</p>
    <p>Outputs the decryption of c</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Evaluation: Test Harness</p>
    <p>Experimental process</p>
    <p>Implement Fs and O Run Delphinium with test harness</p>
    <p>Measure profitability, time, and total query count</p>
    <p>Setup</p>
    <p>Automated parallelization</p>
    <p>Custom cached query encoding</p>
    <p>Using Z3 and CryptoMiniSAT (CMS)</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Evaluation: Delphinium Output</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Evaluation: Results</p>
    <p>Formats: PKCS #7, custom bitwise padding, CRC, session tickets, ARM instructions, ...</p>
    <p>Malleations: CBC mode and stream ciphers, w/ and w/o truncation</p>
    <p>Results</p>
    <p>Practical attacks executed in seconds to hours</p>
    <p>Extensive parameter tuning for efficiency</p>
    <p>Successful attacks on novel formats</p>
    <p>Refer to the paper for full results!</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Conclusions &amp; Future Work</p>
    <p>Delphinium discovers chosen ciphertext attacks given only a system description, successfully automating CCA development.</p>
    <p>Directions for future work:</p>
    <p>Apply Delphinium in the wild and improve software efficiency</p>
    <p>Support deriving side channel attacks (timing, power, memory) with improved formula expressions</p>
    <p>Scale to more complicated format functions</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Acknowledgments</p>
    <p>We would like to thank Rolf Rolles, Mate Soos, and Kuldeep Meel for guidance on SAT solvers, and Nadia Heninger and her students as well as AWS for access to compute resources.</p>
    <p>Delphinium</p>
  </div>
  <div class="page">
    <p>Background SAT Contribution Conclusion</p>
    <p>Thank you! Questions?</p>
    <p>{becgabri, zinkus, mgreen}@cs.jhu.edu</p>
    <p>Delphinium</p>
  </div>
</Presentation>
