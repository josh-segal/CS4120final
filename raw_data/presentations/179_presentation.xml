<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Derandomized Constructions of k-Wise (Almost) Independent</p>
    <p>Permutations Eyal Kaplan Moni Naor</p>
    <p>Omer Reingold Weizmann Institute of Science</p>
    <p>Tel-Aviv University</p>
  </div>
  <div class="page">
    <p>k-wise independent functions</p>
    <p>a family of functions G = {g| g: {0,1}n  {0,1}n }</p>
    <p>is called k-wise independent if: g 2R G is indistinguishable from a random</p>
    <p>function f for any process that receives g(x) on at most k</p>
    <p>points</p>
    <p>Probg 2 G[A(g(x1), , g(xk)) =1] = Probf[A(f(x1),  f(xk)) =1]</p>
    <p>A great success story</p>
  </div>
  <div class="page">
    <p>k-wise independent functions</p>
    <p>Simple construction:  Let a G be the family of polynomials</p>
    <p>over GF(2n) of degree at most k-1 Then  G is k-wise independent:</p>
    <p>The description of g 2 G is kn bits long  This is tight</p>
    <p>Cannot hope to get a shorter description</p>
  </div>
  <div class="page">
    <p>What about k-wise independent permutations?</p>
    <p>Suppose that G = {g| g: {0,1}n  {0,1}n }</p>
    <p>Should be a family of permutations  1-1 and length preserving</p>
    <p>g 2R G is indistinguishable from a</p>
    <p>random permutation f for any process that receives g(x) on at most</p>
    <p>k points</p>
  </div>
  <div class="page">
    <p>Pair-wise independent permutations Simple construction:</p>
    <p>G = {ga,b(x) = ax + b | a, b  GF(2n), a  0 }</p>
    <p>for all  x1, x2 {0,1}n and y1, y2 {0,1}n where x1  x2 and y1  y2</p>
    <p>there is a unique ga,b 2 G such that  ga,b(x1) = ax1+b = y1 and  ga,b(x2) = ax2+b= y2</p>
    <p>What about larger k?  For k=3 there is a similar algebraic construction  For k&gt;3 no known construction of non-trivial size</p>
  </div>
  <div class="page">
    <p>Relaxation: k-wise almost independent permutations</p>
    <p>Suppose that G = {g| g: {0,1}n  {0,1}n }  Should be a family of permutations</p>
    <p>1-1 and length preserving</p>
    <p>g 2R G is at most -distinguishable from a random permutation f for any process that receives g(x) on at most k</p>
    <p>points: the advantage of distinguishing g 2R G from a</p>
    <p>truly random permutation is at most</p>
    <p>For =0 we have</p>
    <p>k-wise independence</p>
    <p>Should we allow adaptive queries?</p>
    <p>Should we allow inverses?</p>
  </div>
  <div class="page">
    <p>Main Result  For any n, k and : There is an explicit construction of a</p>
    <p>family G = {g| g: {0,1}n  {0,1}n }</p>
    <p>of k-wise -dependent permutations where the description of each g 2 G is O(kn + log 1/) bits long</p>
    <p>Can sample from the family and evaluate a permutation in time poly(k, n, log 1/)</p>
    <p>Optimal up to the log 1/</p>
  </div>
  <div class="page">
    <p>Summary of Previous Work and Results</p>
    <p>Family Description Length</p>
    <p>Range of Queries</p>
    <p>Feistel LubyRackoff</p>
    <p>nk+O(n)</p>
    <p>O(nk dlog(0 /)e)</p>
    <p>k &lt;2n/4, 0=k</p>
    <p>k &lt; 2n/2,   0</p>
    <p>Simple 3 bit Permutation s</p>
    <p>O(n2k(nk+log(1/)) k  2n-2</p>
    <p>Card Shuffling</p>
    <p>Thorp Shuffle</p>
    <p>O(n45klog(1/)) k  2n</p>
    <p>Non constructive</p>
    <p>O(nk + log(1/)) O(nk) sample space</p>
    <p>k  2n</p>
    <p>This work O(nk + log(1/)) k  2n</p>
    <p>Good for small k and moderate</p>
  </div>
  <div class="page">
    <p>Techniques and Ideas  Let F = {f| f: {0,1}n  {0,1}n } be a family of</p>
    <p>permutations  Each f 2 F described by w bits</p>
    <p>Denote by Ft the family of permutations obtained by composing f1, f2,  ft 2R F</p>
    <p>Suppose that Ft is k-wise -dependent  The description of f 2 Ft is wt bits</p>
    <p>We will show a technique to derandomize such constructions and look at a much smaller subset G of the t-tuples of F</p>
    <p>The description of g 2 G would be roughly O(w+t) bits</p>
    <p>Many known constructions can be described as such</p>
  </div>
  <div class="page">
    <p>Pseudo-randomness fooling bounded space machines</p>
    <p>A function h:{0,1}*  {0,1}* such that  on random input the output is</p>
    <p>indistinguishable from a string chosen uniformly at random  to any process using s bits of memory</p>
    <p>Branching program</p>
    <p>Expands the input</p>
    <p>Is called a pseudo-random generator for space s machiness</p>
    <p>b1 b2 b</p>
    <p>h</p>
    <p>b1 b2  b</p>
  </div>
  <div class="page">
    <p>First Idea: apply pseudo-random generators for fooling bounded space algorithm</p>
    <p>The possible assignments to the input of h define the collection G</p>
    <p>h</p>
    <p>f1 f2 ft</p>
    <p>w bits</p>
    <p>inpu t</p>
    <p>h is a generator that fools branching programs of width kn+w</p>
  </div>
  <div class="page">
    <p>Where is the bounded space coming from?</p>
    <p>Suppose that G  Ft is not k-wise -dependent  Then there are x1, x2, , xk which witness it</p>
    <p>How much space does the algorithm for evaluating g=f1f2  ft2 G on these points require?  Scanning f1, f2,  ft from left to right and gradually</p>
    <p>evaluating g on all x1, x2,  xk simultaneously  need only kn + w bits - As a branching program</p>
    <p>Therefore: if the wt bits describing them are generated by a process that fools all kn + w bit branching programs  Then the distribution of g(x1), g(x2), , g(xk) for g 2R G is similar to  The distribution of f(x1), f(x2), , f(xk) for f=f1f2  ft</p>
    <p>for independent fi</p>
    <p>Conclusion: G is k-wise -dependent</p>
  </div>
  <div class="page">
    <p>Parameters of space bounded generators</p>
    <p>For an ideal generator: this method takes O(kn + log 1/ + w +log t) bits</p>
    <p>No such explicit generator is known  No known good enough generator</p>
    <p>all introduce extra polylog factors</p>
    <p>Indyk, Sivakumar: previous proposals for using space generators for combinatorial constructions  When space is not an explicit issue</p>
  </div>
  <div class="page">
    <p>Second idea: use pseudorandom generators for random</p>
    <p>walks Generate f1, f2,  ft 2 F via a pseudo random</p>
    <p>generator for random walks Ones which are indistinguishable from random for</p>
    <p>any consistently labeled graph</p>
    <p>Such walk generators exist  Implicitly: Reingolds SL=L  Explicitly: Reingold, Trevisan and Vadhan</p>
    <p>Show how to apply them in the context of kwise independent permutations  Using previous constructions to define the graph</p>
  </div>
  <div class="page">
    <p>Pseudo-random generators for walks</p>
    <p>Call a labeled graph H=(V,E) an (m,d,)-graph if  |V| = m  Each node has d outgoing edges  The labeling is consistent  all incoming labels are distinct  the second eigenvalue in absolute value (H)</p>
    <p>A pseudo-random generator for random walks on H=(V,E) is a mapping</p>
    <p>G:{0,1}*  [d]</p>
    <p>where for any starting node v 2 V the distributions of a walk starting from v</p>
    <p>chosen from G via a random input and  truly random walk</p>
    <p>are  close</p>
    <p>For long enough walks and for graphs with large spectral gaps a random walk ends in a random node</p>
    <p>Defines a walk of length</p>
  </div>
  <div class="page">
    <p>The RTV Generator  For any m, d,  and  there is a pseudo</p>
    <p>random generator for all (m,d,1-)-graphs PRGm,d, ,:{0,1}r  [d]</p>
    <p>With the following parameters:  Seed length r 2 O(log (m  d /    ))  Walk length  2 O(poly(1/) log (m  d /  ))  Computable in space O( log (m  d /    ))</p>
    <p>and time poly(1/, log (m  d /  ))</p>
    <p>Such that  for any starting point v 2 V  a walk generated by PRGm,d, , walk yields an</p>
    <p>end point that is  close to uniform</p>
    <p>For graphs with</p>
    <p>large enough spectral gap (1/polylog m)</p>
    <p>arbitrary degree</p>
    <p>need only log m random bits to get to a random location</p>
    <p>in polylog m steps</p>
  </div>
  <div class="page">
    <p>k-Companion graph Let</p>
    <p>N = 2n</p>
    <p>[N]k be set of all k-tuples of distinct n-bit strings</p>
    <p>Let F be a family of permutations. Then GF,k = (V,E) is the k-companion graph of</p>
    <p>F, where:  V = [N]k</p>
    <p>E = {(z,(z)) | z 2 [N]k ,  2 F)}  Each edge (z,(z)) 2 E is labeled by</p>
    <p>z1, z2,  zk</p>
    <p>(z1), (z2),  (zk)</p>
  </div>
  <div class="page">
    <p>Properties of the Companion Graph</p>
    <p>Let F be a family of permutations. If F  is closed under inverses and  contains the identity permutation. Then HF,k, the k-companion graph of F, is:</p>
    <p>An undirected |F|-regular graph  With self-loops  Consistently labeled</p>
    <p>z1, z2,  zk</p>
    <p>(z1), (z2),  (zk)</p>
    <p>The analysis of k-wise independence is via showing a spectral gap of HF,k</p>
  </div>
  <div class="page">
    <p>k-wise independence and random walks</p>
    <p>If Ft yields a family of permutations that is k-wise -dependent, then in the companion graph HF,k  for any node z 2 [N]k a random walk from z</p>
    <p>is -close to uniform</p>
    <p>Otherwise this z is a witness to the non kwise -dependence</p>
  </div>
  <div class="page">
    <p>The construction Generate f1, f2,  ft 2 F via a pseudo random</p>
    <p>generator for random walks on HF,k , the kcompanion graph of F</p>
    <p>f1, f2,  ft are the labels of the walk.  The resulting permutation is g=f1f2  ft</p>
    <p>Use PRGm,d, ,:{0,1}r  [d] for  m = |[N]k|  d = |F|  r 2 O(log (2nk  |F| /    ))</p>
    <p>comes from the analysis of the original construction Ft</p>
    <p>gap(HF,k)    is how close we want to be to a k-wise independent</p>
    <p>permutation</p>
  </div>
  <div class="page">
    <p>The resulting parameters The resulting family G of permutations is:  A family of k-wise -dependent permutations  The description of each g 2 G is</p>
    <p>O(nk + log |F| + log(1/ ) ) bits</p>
    <p>If the time to evaluate f(x) for f 2 F is (n,k), then the time complexity of evaluating g 2 G is</p>
    <p>poly(1/, n, k, log (|F| /  )) (n,k)  Need to ``open up the description of f1, f2,  ft</p>
  </div>
  <div class="page">
    <p>Summary of Previous Work and Results</p>
    <p>Family Description Length</p>
    <p>Range of Queries</p>
    <p>Feistel LubyRackoff</p>
    <p>nk+O(n)</p>
    <p>O(nk dlog(0 /)e)</p>
    <p>k &lt;2n/4, 0=k</p>
    <p>k &lt; 2n/2,   0</p>
    <p>Simple 3 bit Simple 3 bit PermutationPermutation ss</p>
    <p>O(n2k(nk+log(1/)) k  2n-2</p>
    <p>Card Shuffling</p>
    <p>Thorp Shuffle</p>
    <p>O(n45klog(1/)) k  2n</p>
    <p>Non constructive</p>
    <p>O(nk + log(1/)) O(nk) sample space</p>
    <p>k  2n</p>
    <p>This work O(nk + log(1/)) k  2n</p>
    <p>Proposed and analyzed by Gowers Hoory, Magen, Myers and Rackoff Brodsky and Hoory</p>
  </div>
  <div class="page">
    <p>Resulting Parameters with Simple 3-bit Permutation</p>
    <p>Theorem [BH] There is a family of simple permutations F2</p>
    <p>s.t. for all 2  k  2n-2 there is a t 2 O(n2 k(nk+log 1/)) where:  F2t is k-wise -dependent  gap(HF2,k) is (1/n2 k)</p>
    <p>Description of f 2 F2 is O(log(n3)) bits</p>
    <p>Therefore: description of each g 2 G is O(nk + log(n3) + log(n2 k / )) bits</p>
  </div>
  <div class="page">
    <p>Open Problems</p>
    <p>Get rid of the dependency on   Come up with exact k-wise independent</p>
    <p>permutations of reasonable size</p>
    <p>or  Show a reason why it is difficult to construct them</p>
    <p>How about using permutation polynomials  Over fields  hard problem  Rivest: Simple characterization for mod 2n</p>
    <p>Is it useful?</p>
  </div>
  <div class="page">
    <p>Time complexity of the permutation</p>
    <p>The RTV Generator increases the length of the walk  The general space generator does not</p>
    <p>increase it</p>
    <p>Is it possible to get the best of both worlds?</p>
  </div>
  <div class="page">
    <p>Efficiency of evaluating k-wise independent permutations and</p>
    <p>functions What about the time to evaluate g on a given point x  Want a representation where the evaluation does not</p>
    <p>involve reading the entire description of g  Even for functions: in the simple construction need to</p>
    <p>read all the bits  Siegel: Some lower and upper bounds for functions</p>
    <p>Question: given either  k-wise independent function or  k-wise independent permutation over larger range Come up with a good construction of k-wise independent</p>
    <p>permutation with a small evaluation time and black-box calls to the given function/permutation</p>
    <p>What if the domain size N is not a power of 2? Open only for small k</p>
    <p>Using good extractors</p>
  </div>
  <div class="page">
    <p>The End</p>
  </div>
  <div class="page">
    <p>k-wise permutations over other domains</p>
    <p>What if the domain size N is not a power of 2  The card shuffling approach are hard to adapt  Can use Feistel network to get some results  Can reduce size by fixed fraction</p>
    <p>Cycle walking  Need to take k-wise for k 2 O(k+log 1/)</p>
    <p>Problem if k is small</p>
    <p>f</p>
    <p>L1 R1</p>
    <p>L2 R2</p>
  </div>
  <div class="page">
    <p>The credit card problem</p>
    <p>Find a simple reduction from permutations on large blocks to small blocks  Preserving the properties of the original</p>
    <p>permutation  Time-wise  Security</p>
  </div>
  <div class="page">
    <p>Motivating example: permuting credit card numbers</p>
    <p>To reduce fraud want to permute credit card numbers</p>
  </div>
  <div class="page">
    <p>Motivating example: permuting credit card numbers</p>
    <p>To reduce fraud want to permute credit card numbers</p>
    <p>Size of set: roughly 240 (ignoring the first 4 digits)  Only trusted servers will have access to the</p>
    <p>permutation  An adversary that sees only a limited number of</p>
    <p>permuted cc numbers should not be able to obtain information on any other card  For which it sees only the permuted value</p>
    <p>Want a way to spread the permutation to the trusted servers Need a succinct representation</p>
    <p>No such construction known even based on cryptographic primitives</p>
  </div>
  <div class="page">
    <p>Block-Ciphers:</p>
    <p>Shared-key encryption schemes where: The encryption of every plaintext block is a</p>
    <p>ciphertext block of the same length.</p>
    <p>Important Examples: DES, AES</p>
    <p>How to go from block size 64 to block size 40?</p>
    <p>Complexity based concept modeling them: Pseudo-Random Permutations</p>
    <p>Key BC</p>
    <p>Plaintext</p>
    <p>Ciphertext</p>
    <p>Block size: 64 bits</p>
  </div>
  <div class="page">
    <p>Block-ciphers and k-wise independent permutations</p>
    <p>The two notions are related  But some important differences</p>
    <p>Example: dynamic vs. static attacks</p>
  </div>
  <div class="page">
    <p>Pseudo-randomness fooling bounded space machines</p>
    <p>A function h:{0,1}*  {0,1}* such that  on random input the output is</p>
    <p>indistinguishable from a string chosen uniformly at random  to any process using s bits of memory</p>
    <p>Branching program</p>
    <p>Expands the input Is called a pseudo-random generator</p>
    <p>for space s machiness</p>
    <p>b1 b2 b</p>
    <p>h</p>
    <p>b1 b2  b</p>
  </div>
  <div class="page">
    <p>First Idea: apply pseudo-random generators for fooling bounded space algorithm</p>
    <p>The possible assignments to the input of h define G</p>
    <p>h</p>
    <p>f1 f2 ft</p>
    <p>w bits</p>
    <p>inpu t</p>
  </div>
  <div class="page">
    <p>Where is the bounded space coming from?</p>
    <p>Suppose that G  Ft is not k-wise -dependent  Then there are x1, x2, , xk which witness it</p>
    <p>How much space does the algorithm for evaluating g=f1f2  ft2 G on these points require?  Scanning f1, f2,  ft from left to right and gradually</p>
    <p>evaluating g on all x1, x2,  xk simultaneously  need only kn + w bits - As a branching program</p>
    <p>Therefore: if the wt bits describing them are generated by a process that fools all kn + w bit branching programs  Then the distribution of g(x1), g(x2), , g(xk) for g 2R G is similar to  The distribution of f(x1), f(x2), , f(xk) for f=f1f2  ft</p>
    <p>for independent fi</p>
    <p>Conclusion: G is k-wise -dependent</p>
  </div>
  <div class="page">
    <p>Parameters of space bounded generators</p>
    <p>For an ideal generator: this method takes O(kn + log 1/ + w +log t) bits</p>
    <p>No such explicit generator is known  Best known ones introduce additional</p>
    <p>polylog factors</p>
    <p>Indyk, Sivakumar: previous proposals for using space generators for combinatorial constructions  When space is not an explicit issue</p>
  </div>
  <div class="page">
    <p>Simple 3 bit Permutations An approach for generating simple</p>
    <p>permutations by changing a fixed number of bits in each round</p>
    <p>Each permutation is defined by 1. A small subset of the</p>
    <p>indices 2. A permutation  that maps</p>
    <p>the subset of the bits to their new value</p>
    <p>Proposed and analyzed by  Gowers  Hoory, Magen, Myers and Rackoff  Brodsky and Hoory</p>
    <p>( )</p>
  </div>
  <div class="page">
    <p>Simple 3 bit Permutations For  Boolean function on c bits f:0,1c  0,1</p>
    <p>Subset S = {i0, i1,  ic}  [n] define a Permutation f,S:0,1n  0,1n where</p>
    <p>f,S(x1, x2, , xn) = (x1, , xi0-1, xi  f(xi1, , xic), xi0+1, , xn)</p>
    <p>Note that f,S is an involution: Inverse of itself</p>
    <p>Let F2 ={f,S | f:0,12  0,1, S  [n], |S|=3}</p>
    <p>Theorem [Brodsky-Hoory] For all 2  k  2n-2 there is a t 2 O(n2 k(nk+log 1/)) where:</p>
    <p>F2t is k-wise -dependent  gap(HF2,k) is (1/n2 k)</p>
  </div>
  <div class="page">
    <p>The End</p>
  </div>
</Presentation>
