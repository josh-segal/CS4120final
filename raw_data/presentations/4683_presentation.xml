<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Feature Refactoring a Multi-Representation Program</p>
    <p>into a Product Line</p>
    <p>S. Trujillo1, D. Batory2, and O. Daz1</p>
    <p>GPCE 2006 Portland, Oregon (USA), Oct 26th, 2006</p>
    <p>S. Trujillo, D. Batory, and O. Daz 2</p>
    <p>General problem: Refactoring</p>
    <p>Feature Oriented Programming (FOP) is a paradigm for creating software product lines based on features Feature Refactoring (FR) is the process of decomposing a program into features creating an FOP product-line</p>
    <p>Challenges: identification, extraction, and testing of those features</p>
    <p>Original program</p>
    <p>F. BF. A F. C F. D</p>
    <p>Target features</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 3</p>
    <p>This work: case study on Refactoring</p>
    <p>The aim was to integrate a new tool (XAK) into an existing program (ATS: AHEAD Tool Suite) Idea!: We realize that XAK could be a feature of a product line of ATS variants But, ATS should be refactored onto features beforehand While doing so</p>
    <p>we encountered some problems  we gain some experience  we learn some lessons  we would like to convey today</p>
    <p>S. Trujillo, D. Batory, and O. Daz 4</p>
    <p>General results: our Contribution</p>
    <p>#1: the scale of refactoring  almost 2-order of magnitude larger than prev.</p>
    <p>#2: refactoring of multiple-representations  Not just code! Documentation, makefiles,   Using XAK to decompose a large system with</p>
    <p>multiple representations</p>
    <p>#3: using regression test #4: ATS is a case study</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 5</p>
    <p>Outline</p>
    <p>Introduction Background Refactoring Lessons learned and Tool Support Conclusions</p>
    <p>Background</p>
    <p>S. Trujillo, D. Batory, and O. Daz 6</p>
    <p>Feature Oriented Programming</p>
    <p>Feature Oriented Programming (FOP)  paradigm for creating software product lines  programs are synthesized by composing features  feature</p>
    <p>A feature is an increment in program functionality  Features are building blocks of products</p>
    <p>product  different compositions of features yield different products</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 7</p>
    <p>AHEAD AHEAD is an algebraic model for FOP product lines where each feature is implemented by an operation Constants</p>
    <p>f // base program with feature f h // base program with feature h</p>
    <p>Functions (refinements) i  x // adds feature i to program x j  x // adds feature j to program x</p>
    <p>Model M = { f, h, i, j } Products</p>
    <p>A = i  f // product A with features i and f B = j  i  f // product B with features j, i and f</p>
    <p>S. Trujillo, D. Batory, and O. Daz 8</p>
    <p>ATS (AHEAD Tool Suite)</p>
    <p>ATS is a collection of tools supporting AHEAD for feature-based program synthesis ATS evolved over time (different developers for different tools) adding new tools It consists of 24 different tools (including the likes of composer, guidsl, bctools, aj, mmatrix, jedi,  ) Over 200 Java KLOC with multiple-representations (in addition to code, there are makefiles, regression tests, documentation, )</p>
    <p>Remind: not about using ATS, but refactoring it!</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 9</p>
    <p>Outline</p>
    <p>Introduction Background Refactoring Lessons learned and Tool Support Conclusions</p>
    <p>Refactoring</p>
    <p>S. Trujillo, D. Batory, and O. Daz 10</p>
    <p>Approaching</p>
    <p>Remind: FR is to decompose a program into a set of features</p>
    <p>Feature identification  Feature extraction  Feature testing</p>
    <p>To create an FOP product-line</p>
    <p>First action plan</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
    <p>Our action plan</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 11</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN A</p>
    <p>P L</p>
    <p>(A T</p>
    <p>S P</p>
    <p>ro du</p>
    <p>ct L</p>
    <p>in e)</p>
    <p>Steps towards refactoring 1: Create binary</p>
    <p>// ATSbin binary executable ATSbin = antBuild (ATSsrc)</p>
    <p>S. Trujillo, D. Batory, and O. Daz 12</p>
    <p>#2: The initial program source To understand this was a first step forward</p>
    <p>Size: 7.417 files, 1.352 folders, up to 30 Mb</p>
    <p>ATS structure has:  Sources</p>
    <p>Grammars</p>
    <p>Models</p>
    <p>Makefiles</p>
    <p>Documentation</p>
    <p>Regression tests</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 13</p>
    <p>#2: Feature identification Existing tools were groupped into features</p>
    <p>Core: the kernel of ATS includes  Jak file tools jampack, mixin, and jak2java, and  Bali file tools such as balicomposer and bali2jak.</p>
    <p>tools that process Jak files  aj translates Jak files to AspectJ files,  mmatrix collects statistics on Jak files,  jedi is a javadoc-like tool, and  reform is a Jak file pretty-printer.</p>
    <p>GUI-based tools for declaratively specifying programs  guidsl, web, me. and exploring AHEAD models.</p>
    <p>xak. Tools for composing XML files.  bctools. Tools that produce, compose, and analyze byte codes.  Misc. tools (obe, drc, cpp)</p>
    <p>ATS</p>
    <p>CORE</p>
    <p>BC</p>
    <p>DRC</p>
    <p>CPP</p>
    <p>JR</p>
    <p>MM ME</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
    <p>S. Trujillo, D. Batory, and O. Daz 14</p>
    <p>#2: Feature identification (ii)</p>
    <p>Envisaged feature model APL</p>
    <p>coreJakToolsGuiToolsXmlToolsbctools</p>
    <p>cpp</p>
    <p>Dep</p>
    <p>reform jedi mmatrix aj</p>
    <p>guidsl webme</p>
    <p>xcxak</p>
    <p>obedrc</p>
    <p>choose1 choose1+choose1+choose1+</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 15</p>
    <p>#2: Feature extraction</p>
    <p>Incremental extraction (and testing)  First, decompose core (ATSs kernel)</p>
    <p>ATSsrc = extra0  core</p>
    <p>Then, decompose remaining features (from eXTRA)  extran = extran+1  Fn</p>
    <p>ATS</p>
    <p>CORE</p>
    <p>XTRA</p>
    <p>BC</p>
    <p>DRC</p>
    <p>CPP</p>
    <p>JR</p>
    <p>MM ME</p>
    <p>CORE</p>
    <p>N</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
    <p>S. Trujillo, D. Batory, and O. Daz 16</p>
    <p>#2: Feature extraction (ii)</p>
    <p>order  core  bc  drc  aj  cpp  jedi  me  reform  xc  guidsl  mmatrix  obe  web  xak</p>
    <p>APL</p>
    <p>coreJakToolsGuiToolsXmlToolsbctools</p>
    <p>cpp</p>
    <p>Dep</p>
    <p>reform jedi mmatrix aj</p>
    <p>guidsl webme</p>
    <p>xcxak</p>
    <p>obedrc</p>
    <p>choose1 choose1+choose1+choose1+</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 17</p>
    <p>#2: Feature testing</p>
    <p>Features were tested by composing them This means by creating products</p>
    <p>composition (code, doc, )  code compilations  code regression tests</p>
    <p>Examples Product 1  p1src = core  p1bin = build(p1src)</p>
    <p>Eventually, when this worked meant tests were successful and features were correct</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
    <p>Product 2 p2src = bc  core p2bin = build(p2src)</p>
    <p>S. Trujillo, D. Batory, and O. Daz 18</p>
    <p>#2: Problems exposed</p>
    <p>Both extraction and testing were  cumbersome and time-consuming tasks</p>
    <p>Magnitude of #artifacts to extract/test  Each single built (were many) took around  hour  Long to detect (and isolate) failures  #features (20) means many combinations to check</p>
    <p>Overall: it took 2 week/person  Typical failures:</p>
    <p>Composition (refining something inexistent, overriding)  Compilation (some class, library, artifact missing)  Regression tests (unexpected functionality due to overrides)</p>
    <p>More on lessons learned</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 19</p>
    <p>#2: Extracted features</p>
    <p>Refactoring involved:  code</p>
    <p>documentation (HTML pages)  makefile (Ant scripts documents)</p>
    <p>core is *the* larger</p>
    <p>mainly *lots* of XML documents</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
    <p>S. Trujillo, D. Batory, and O. Daz 20</p>
    <p>#4: Building products</p>
    <p>From features  to products  Pick just the choice (product features)  Get your product</p>
    <p>complimentary deliveries after presentation!</p>
    <p>ATS-SRC ATS-BIN</p>
    <p>ATS-BINATS-CORE</p>
    <p>ATS-CPP</p>
    <p>XAK</p>
    <p>APL-SRC APL-BIN</p>
    <p>A P</p>
    <p>L (A</p>
    <p>T S</p>
    <p>P ro</p>
    <p>du ct</p>
    <p>L in</p>
    <p>e)</p>
    <p>APL</p>
    <p>coreJakToolsGuiToolsXmlToolsbctools</p>
    <p>cpp</p>
    <p>Dep</p>
    <p>reform jedi mmatrix aj</p>
    <p>guidsl webme</p>
    <p>xcxak</p>
    <p>obedrc</p>
    <p>choose1 choose1+choose1+choose1+</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 21</p>
    <p>Outline</p>
    <p>Introduction Background Refactoring Lessons learned and Tool Support Conclusions Lessons learned and Tool support</p>
    <p>S. Trujillo, D. Batory, and O. Daz 22</p>
    <p>Lessons learned (i)</p>
    <p>Dependencies among Features  They are not always evident. We found some</p>
    <p>unexpectedly (while encountering fails in build)</p>
    <p>Error Exposure  Refactoring exposed previously existing errors (e.g.</p>
    <p>some doc was not linked)</p>
    <p>Program Extensions  Lack of support (tools and doc) for extensions  Patterns for Extension are needed</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 23</p>
    <p>Lessons learned (ii)</p>
    <p>Accidental Complexities (Grandmas Teeth)  Unnecessary and arbitrary complexity</p>
    <p>(e.g., each tool was created differently)</p>
    <p>Generality of Experiences:  we (and others) could learn</p>
    <p>S. Trujillo, D. Batory, and O. Daz 24</p>
    <p>Future tool support</p>
    <p>A Tool for Initial Refactoring:  A tool to refactor (move) initially all artifacts into</p>
    <p>features (this tool has been already developed) Artifact-Specific Refactoring Tools:</p>
    <p>Tools to not only refactor Classes, but other artifacts (A tool for XAK has been developed for XML docs).</p>
    <p>Safe Composition Tools:  Tools to guarantee the safety of the generated code</p>
    <p>(subject of ongoing work).</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 25</p>
    <p>Outline</p>
    <p>Introduction Background Refactoring Lessons learned and Tool Support ConclusionsConclusions</p>
    <p>S. Trujillo, D. Batory, and O. Daz 26</p>
    <p>Conclusions</p>
    <p>We feature refactored ATS into a product-line ATS is a valuable case study on</p>
    <p>the scalability (2 orders of magnitude higher than previous work) of feature-based program refactoring</p>
    <p>the refactoring of multiple-representations (e.g., doc)</p>
    <p>We showed the refactoring process, and we expressed it as a simple mathematical model We believe our work outlines a new generation of useful tools that can simplify future efforts.</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Additional slides</p>
    <p>S. Trujillo, D. Batory, and O. Daz 28</p>
    <p>Outline</p>
    <p>Introduction Background Refactoring Lessons learned and Tool Support Conclusions</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>S. Trujillo, D. Batory, and O. Daz 29</p>
    <p>What is XAK?</p>
    <p>Moving AHEAD ideas to XML documents xak tool that allows to refine them</p>
    <p>S. Trujillo, D. Batory, and O. Daz 30</p>
    <p>Step 3. Bootstrapping</p>
    <p>The problem: a dog biting his own nail  XAK had to be (it was not) in composer to compose</p>
    <p>XML documents of the features</p>
    <p>The solution:  Introduce XAK binaries beforehand by using boot</p>
    <p>strapping  ATS built is boot-strapped. So, it was extended.  The solution involves some technical details</p>
    <p>(described in the paper)</p>
  </div>
</Presentation>
