<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Emulating Goliath Storage Systems with David</p>
    <p>Nitin Agrawal, NEC Labs</p>
    <p>Leo Arulraj,</p>
    <p>Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
    <p>ADSL Lab, UW Madison</p>
  </div>
  <div class="page">
    <p>The Storage Researchers Dilemma</p>
    <p>Innovate Create the future of storage</p>
    <p>Measure Quantify improvement obtained</p>
    <p>Dilemma How to measure future of storage with</p>
    <p>devices from present?</p>
  </div>
  <div class="page">
    <p>David: A Storage Emulator</p>
    <p>Large, fast, multiple disks using small, slow, single device</p>
    <p>Huge Disks</p>
    <p>~1TB disk using 80 GB disk</p>
    <p>Multiple Disks</p>
    <p>RAID of multiple disks using RAM</p>
  </div>
  <div class="page">
    <p>Key Idea behind David</p>
    <p>Store metadata, throw away data</p>
    <p>(and generate fake data)</p>
    <p>Why is this OK ?</p>
    <p>Benchmarks measure performance</p>
    <p>Many benchmarks dont care about file content</p>
    <p>Some expect valid but not exact content</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro</p>
    <p>Overview</p>
    <p>Design</p>
    <p>Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Backing Store</p>
    <p>Storage Model</p>
    <p>Userspace</p>
    <p>Kernelspace</p>
    <p>DAVID (Pseudo Block Device Driver)</p>
    <p>Overview of how David works</p>
  </div>
  <div class="page">
    <p>Illustrative Benchmark</p>
    <p>Create a File</p>
    <p>Write a block of data</p>
    <p>Close the File</p>
    <p>Open file in read mode</p>
    <p>Read back the data</p>
    <p>Close the File</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>F = fopen(a.txt,w);</p>
    <p>Allocate Inode in</p>
    <p>block 100</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle metadata write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>LBA : 100</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle metadata write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle metadata write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Model calculates response time for write to LBA 100</p>
    <p>Metadata block at LBA 100 is remapped</p>
    <p>to LBA 1</p>
    <p>Storage Model Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle metadata write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Response to FS after 6 ms</p>
    <p>Storage Model Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle metadata write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>fwrite(buffer, 4096,1,F);</p>
    <p>Storage Model</p>
    <p>Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle data write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model</p>
    <p>Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle data write?</p>
  </div>
  <div class="page">
    <p>Model calculates response time for write to LBA 800</p>
    <p>Data block at LBA 800 is THROWN AWAY</p>
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle data write?</p>
  </div>
  <div class="page">
    <p>Response to FS after 8 ms</p>
    <p>Space Savings</p>
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle data write?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>F = fclose(F); F = fopen(a.txt,r);</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle metadata read?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>LBA : 100</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle metadata read?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle metadata read?</p>
  </div>
  <div class="page">
    <p>Model calculates response time for read to LBA 100</p>
    <p>Block at LBA 1 is read and returned.</p>
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle metadata read?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Response to FS after 3 ms</p>
    <p>Storage Model Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle metadata read?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>fread(buffer, 4096,1,F);</p>
    <p>Storage Model</p>
    <p>Backing Store</p>
    <p>Remap Table</p>
    <p>How does David handle data read?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle data read?</p>
  </div>
  <div class="page">
    <p>Model calculates response time for read to LBA 800</p>
    <p>Data block at LBA 800 is filled with fake</p>
    <p>content</p>
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle data read?</p>
  </div>
  <div class="page">
    <p>Benchmark</p>
    <p>Filesystem</p>
    <p>Response to FS after 8 ms</p>
    <p>Storage Model Backing Store</p>
    <p>How does David handle data read?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro</p>
    <p>Overview</p>
    <p>Design</p>
    <p>Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Design Goals for David</p>
    <p>Accurate</p>
    <p>Emulated disk should perform similar to real disk</p>
    <p>Scalable</p>
    <p>Should be able to emulate large disks</p>
    <p>Lightweight</p>
    <p>Emulation overhead should not affect accuracy</p>
    <p>Flexible</p>
    <p>Should be able to emulate variety of storage disks</p>
    <p>Adoptable</p>
    <p>Easy to install and use for benchmarking</p>
  </div>
  <div class="page">
    <p>Components within David</p>
    <p>Storage Model</p>
    <p>Block Classifier</p>
    <p>Metadata Remapper</p>
    <p>Data Squasher</p>
    <p>Data Generator</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Block Classification Data or Metadata?</p>
    <p>Distinguish data blocks from metadata blocks to throw away data blocks</p>
    <p>Why difficult?</p>
    <p>David is a block-level emulator</p>
    <p>Two Approaches</p>
    <p>Implicit Block Classification</p>
    <p>(David automatically infers block</p>
    <p>classification)</p>
    <p>Explicit Block Classification</p>
    <p>(Operating System passes down block</p>
    <p>classification)</p>
  </div>
  <div class="page">
    <p>Implicit Block Classification</p>
    <p>Parse metadata writes using filesystem knowledge to infer data blocks</p>
    <p>Implementation for ext3</p>
    <p>Identify inode blocks using ext3 block layout</p>
    <p>Parse inode blocks to infer direct/indirect blocks</p>
    <p>Parse direct/indirect blocks to infer data blocks</p>
    <p>Problem</p>
    <p>Delay in classification</p>
  </div>
  <div class="page">
    <p>Ext3 Ordered Journaling Mode (without David)</p>
    <p>Journal Disk</p>
    <p>M</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>Ext3 Ordered Journaling Mode (with David)</p>
    <p>Journal Disk</p>
    <p>Unclassified Block Store</p>
  </div>
  <div class="page">
    <p>Memory Pressure in Unclassified Block Store</p>
    <p>Too many unclassified blocks exhaust memory</p>
    <p>Technique: Journal Snooping</p>
    <p>Parse metadata writes to journal to infer classification much earlier than usual</p>
  </div>
  <div class="page">
    <p>Effect of Journal Snooping</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry U</p>
    <p>se d</p>
    <p>(M</p>
    <p>B )</p>
    <p>Time (seconds)</p>
    <p>Without Journal Snooping With Journal Snooping</p>
    <p>Out of Memory</p>
  </div>
  <div class="page">
    <p>Block Classification Data or Metadata?</p>
    <p>Distinguish data blocks from metadata blocks to throw away data blocks</p>
    <p>Why difficult? David is a block-level emulator</p>
    <p>Two Approaches</p>
    <p>Implicit Block Classification</p>
    <p>(David automatically infers block</p>
    <p>classification)</p>
    <p>Explicit Block Classification</p>
    <p>(Operating System passes down block</p>
    <p>classification)</p>
  </div>
  <div class="page">
    <p>Capture page pointers to data blocks in the write system call and pass classification information to David</p>
    <p>Benchmark Application</p>
    <p>FileSystem</p>
    <p>Data Blocks</p>
    <p>Metadata Blocks</p>
    <p>To David</p>
    <p>Explicit Block Classification</p>
  </div>
  <div class="page">
    <p>Block Classification Summary</p>
    <p>Implicit Block Classification</p>
    <p>Explicit Block Classification</p>
    <p>No change to filesystem, benchmark</p>
    <p>or operating system</p>
    <p>Minimal change to operating system</p>
    <p>Requires filesystem knowledge</p>
    <p>Works for all filesystems</p>
    <p>Results with ext3 Results with btrfs</p>
  </div>
  <div class="page">
    <p>Components within David</p>
    <p>Storage Model</p>
    <p>Block Classifier</p>
    <p>Metadata Remapper</p>
    <p>Data Squasher</p>
    <p>Data Generator</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Davids Storage Model</p>
    <p>Filesystem</p>
    <p>Actual System Emulated System</p>
    <p>Storage Model</p>
    <p>I/O request queue</p>
    <p>Benchmark</p>
    <p>Disk</p>
    <p>Filesystem</p>
    <p>David</p>
    <p>Benchmark</p>
  </div>
  <div class="page">
    <p>I/O Queue Model</p>
    <p>Merge sequential I/O requests  To improve performance</p>
    <p>When I/O queue is empty  Wait for 3 ms anticipating merges</p>
    <p>When I/O queue is full  Process is made to sleep and wait  Process is woken up once empty slots open up  Process is given a bonus for the wait period</p>
    <p>I/O queue modeling critical for accuracy</p>
  </div>
  <div class="page">
    <p>Disk Model</p>
    <p>Simple in-kernel disk model  Based on Ruemmler and Wilkes disk model</p>
    <p>Current models: 80GB and 1 TB Hitachi deskstar</p>
    <p>Focus of our work is not disk modeling</p>
    <p>(more accurate models are possible)</p>
    <p>Disk model parameters  Disk properties</p>
    <p>Rotational speed, head seek profile, etc.</p>
    <p>Current disk state</p>
    <p>Head position, on-disk cache state, etc.</p>
  </div>
  <div class="page">
    <p>Davids Storage Model Accuracy</p>
    <p>Reasonable accuracy across many workloads Many more results in paper</p>
  </div>
  <div class="page">
    <p>Components within David</p>
    <p>Storage Model</p>
    <p>Block Classifier</p>
    <p>Metadata Remapper</p>
    <p>Data Squasher</p>
    <p>Data Generator</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Backing Store</p>
    <p>Any physical storage can be used  Must be large enough to hold all metadata blocks</p>
    <p>Must be fast enough to match emulated disk</p>
    <p>Two implementations  Memory as backing store</p>
    <p>Compressed disk as backing store</p>
    <p>Storage space for metadata blocks</p>
  </div>
  <div class="page">
    <p>Metadata Remapper</p>
    <p>Remaps metadata blocks into compressed form</p>
    <p>Inode Data Inode Data Inode Data</p>
    <p>Inode Inode Inode</p>
    <p>Emulated Disk</p>
    <p>Compressed Disk (better performance)</p>
  </div>
  <div class="page">
    <p>Components within David</p>
    <p>Storage Model</p>
    <p>Block Classifier</p>
    <p>Metadata Remapper</p>
    <p>Data Squasher</p>
    <p>Data Generator</p>
    <p>Backing Store</p>
  </div>
  <div class="page">
    <p>Data Squasher and Generator</p>
    <p>Data Squasher</p>
    <p>Throws away writes to data blocks</p>
    <p>Data Generator</p>
    <p>Generate content for the reads to data blocks</p>
    <p>(currently generates random content)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro</p>
    <p>Overview</p>
    <p>Design</p>
    <p>Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Emulation accuracy Test emulation accuracy across benchmarks</p>
    <p>Emulation scalability Test space savings for large device emulation</p>
    <p>Multiple disk emulation Test accuracy of multiple device emulation</p>
  </div>
  <div class="page">
    <p>Emulation Accuracy Experiment</p>
    <p>Experimental details</p>
    <p>Emulated ~1 TB disk with 80 GB disk</p>
    <p>Ran a variety of benchmarks Validated by using a real 1 TB disk</p>
  </div>
  <div class="page">
    <p>Emulation Accuracy Results (Ext3 with Implicit Block Classification)</p>
    <p>Real</p>
    <p>Emulated</p>
    <p>R u</p>
    <p>n ti</p>
    <p>m e</p>
    <p>( se</p>
    <p>co n</p>
    <p>d s)</p>
  </div>
  <div class="page">
    <p>Emulation Accuracy Results (Btrfs with Explicit Block Classification)</p>
    <p>Real</p>
    <p>Emulated</p>
    <p>R u</p>
    <p>n ti</p>
    <p>m e</p>
    <p>( se</p>
    <p>co n</p>
    <p>d s)</p>
  </div>
  <div class="page">
    <p>Emulation Scale Experiment</p>
    <p>Experimental details</p>
    <p>Emulated ~1 TB disk using a 80 GB disk</p>
    <p>Created filesystem images using Impressions Validated by using a real disk</p>
  </div>
  <div class="page">
    <p>Emulation Scale: Accuracy</p>
  </div>
  <div class="page">
    <p>Emulation Scale: Space Savings</p>
  </div>
  <div class="page">
    <p>Multiple Disks Experiment</p>
    <p>Experimental details</p>
    <p>Emulated multiple disks using RAM</p>
    <p>Measured micro-benchmark performance on RAID-1 Validated our results against real disks</p>
  </div>
  <div class="page">
    <p>Simple RAID-1 Emulation</p>
    <p>R/3 W/3 R/2 W/2 R/1 W/1</p>
    <p>R u</p>
    <p>n ti</p>
    <p>m e</p>
    <p>( se</p>
    <p>co n</p>
    <p>d s)</p>
    <p>Original</p>
    <p>David</p>
    <p>Random Read or Write Performance</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro</p>
    <p>Overview</p>
    <p>Design</p>
    <p>Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion David:</p>
    <p>Emulate large devices with limited means</p>
    <p>Key idea:</p>
    <p>Throw away data</p>
    <p>Results:</p>
    <p>Accurate emulation of large and multiple disks</p>
    <p>Future:</p>
    <p>Emulating storage cluster with few machines</p>
  </div>
  <div class="page">
    <p>Thank You www.cs.wisc.edu/adsl</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Measuring Innovation</p>
    <p>Thorough measurement is Hard and Costly</p>
    <p>Time, Money, Effort needed to measure performance on a variety</p>
    <p>of storage devices</p>
    <p>Tiny benchmarks are easy to run</p>
  </div>
  <div class="page">
    <p>Implicit Block Classification</p>
    <p>Unclassified block store  Unclassifiable blocks are temporarily stored in</p>
    <p>Unclassified Block Store which is in RAM</p>
    <p>Journal checkpoint frequency determines the delay in classification</p>
    <p>Upon classification, data blocks are squashed and metadata blocks are persisted</p>
  </div>
</Presentation>
