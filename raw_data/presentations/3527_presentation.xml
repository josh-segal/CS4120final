<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>QSYM : A Practical Concolic Execution Engine Tailored for</p>
    <p>Hybrid Fuzzing</p>
    <p>Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang , and Taesoo Kim</p>
    <p>Georgia Institute of Technology &amp; Oregon State University</p>
  </div>
  <div class="page">
    <p>Two popular ways to find security bugs: Fuzzing &amp; Concolic execution</p>
    <p>Fuzzing Symbolic Execution 2</p>
  </div>
  <div class="page">
    <p>Fuzzing and Concolic execution have their own pros and cons  Fuzzing  Good: Finding general inputs  Bad: Finding specific inputs</p>
    <p>Concolic execution  Good: Finding specific inputs  Bad: State explosion</p>
  </div>
  <div class="page">
    <p>Hybrid fuzzing can address their problems</p>
    <p>Use both techniques: Fuzzing + Concolic execution</p>
    <p>Find specific inputs: Using concolic execution  Limit state explosion: Only fork at branches that are hard to fuzzing</p>
  </div>
  <div class="page">
    <p>Hybrid fuzzing has achieved great success in smallscale study  e.g.) Driller: a state-of-the-art hybrid fuzzer  Won 3rd place in CGC competition  Found 6 new crashes: cannot be found by fuzzing nor concolic execution</p>
  </div>
  <div class="page">
    <p>However, current hybrid fuzzing suffers from problems to scale to real-world applications  Very slow to generate constraint</p>
    <p>Cannot support complete system calls</p>
    <p>Not effective in generating test cases</p>
  </div>
  <div class="page">
    <p>Our system, QSYM, addresses these issues by introducing several key ideas  Discard intermediate layer for performance</p>
    <p>Use concrete environment to support system calls</p>
    <p>Introduce heuristics to effectively generate test cases</p>
  </div>
  <div class="page">
    <p>QSYM is scalable to real-world software</p>
    <p>13 previously unknown bugs in open-source software</p>
    <p>All applications are already fuzzed (OSS-Fuzz, AFL, )  Including ffmpeg that is fuzzed by OSS-Fuzz for 2 years</p>
    <p>Bugs are hard to pure fuzzing  require complex constraints</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Performance overhead</p>
  </div>
  <div class="page">
    <p>Overview: QSYM</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints</p>
    <p>Fuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Incomplete Environment modeling</p>
  </div>
  <div class="page">
    <p>Overview: QSYM</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints</p>
    <p>Fuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Ineffective test case generation due to unsatisfiable paths</p>
  </div>
  <div class="page">
    <p>Overview: QSYM</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints</p>
    <p>Fuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Blocked by complex logics</p>
  </div>
  <div class="page">
    <p>Overview: QSYM</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints</p>
    <p>Fuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Performance overhead</p>
  </div>
  <div class="page">
    <p>Intermediate representations (IR) are good to make implementations easier  Provide architecture-independent interpretations</p>
    <p>Can re-use code for all architectures</p>
    <p>e.g. angr works on many architectures: x86, arm, and mips</p>
  </div>
  <div class="page">
    <p>Problem1: IR incurs significant performance overhead  Increase the number of instructions  4.7 times in VEX (IR used by angr)</p>
    <p>Need to execute a whole basic block symbolically  Due to caching and optimization  Only 30% of instructions need to be symbolically executed</p>
  </div>
  <div class="page">
    <p>Solution1: Execute instructions directly without using intermediate layer  Remove the IR translation layer  Pay for the implementation complexity</p>
  </div>
  <div class="page">
    <p>QSYM reduces the number of instructions to execute symbolically  126 CGC binaries</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Incomplete Environment modeling</p>
  </div>
  <div class="page">
    <p>State forking can reduce re-execution overhead for constraint generation  No need to re-execute to reach the state  Recover from the snapshot</p>
  </div>
  <div class="page">
    <p>State forking for kernel is non-trivial</p>
    <p>State in concolic execution = Program state + Kernel state</p>
    <p>Forking program state is trivial  Save application memory + register  Save constraints</p>
    <p>Forking kernel state is non-trivial  Need to maintain all kernel data structures  e.g., file system, network state, memory system</p>
  </div>
  <div class="page">
    <p>Problem2: State forking introduces problems in either completeness or performance</p>
    <p>Kernel modeling  e.g.) angr  Pros: Small performance overhead  Cons: Incompleteness  angr supports only 22 system calls in Linux</p>
    <p>Full kernel emulation  e.g.) S2E  Pros: Completeness  Cons: Large performance overhead</p>
  </div>
  <div class="page">
    <p>Solution2: Re-execute to use concrete environment instead of kernel state forking  Instead of state forking, re-execute from start</p>
    <p>High re-execution overhead  Instruction-level execution  Basic block pruning</p>
    <p>Limit constraint solving: Based on coverage from fuzzing</p>
  </div>
  <div class="page">
    <p>Models minimal system calls and uses concrete values  Only model system calls that are relevant to user interactions  e.g.) standard input, file read,</p>
    <p>Other system calls: Call system call using concrete values  e.g.) mprotect(addr, sym_size, PROT_R)</p>
    <p>mprotect(addr, conc_size, PROT_R)</p>
  </div>
  <div class="page">
    <p>Problem: Concrete environment results in incomplete constraints  Add implicit constraints  e.g.) mprotect(addr, sym_size, PROT_R)</p>
    <p>mprotect(addr, conc_size, PROT_R)</p>
    <p>Without knowing semantics of system calls  Concretize: Over-constrained  Ignore: Under-constrained</p>
  </div>
  <div class="page">
    <p>Unrelated constraint elimination can tolerate incomplete constraints</p>
    <p>x = int(input()) y = int(input())</p>
    <p># Incomplete constraints mprotect(addr, x, PROT_R)</p>
    <p>if y * y == 1337 * 1337: bug()</p>
    <p>Constraints for x (Incomplete) &amp;&amp; y * y == 1337 * 1337</p>
    <p>Path constraints</p>
    <p>y * y == 1337 * 1337 Branch dependent constraints</p>
    <p>x = Use concrete value y = 1337</p>
  </div>
  <div class="page">
    <p>Overview: Hybrid fuzzing in general</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>t0 = GET:I32(ebp) t1 = GET:I32(esp) t2 = Sub32(t1,0x00000004)</p>
    <p>Intermediate Representations</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints State forkingFuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Ineffective test case generation due to unsatisfiable paths</p>
  </div>
  <div class="page">
    <p>Problem3: Over-constrained paths results in no test cases</p>
    <p>type = int(input())</p>
    <p>if type == TYPE1: parse_TYPE1()</p>
    <p>if type == TYPE2: parse_TYPE2()</p>
    <p>type = int(input())</p>
    <p>type == TYPE1</p>
    <p>.</p>
    <p>type == TYPE2</p>
    <p>Unsatisfiable: No test case</p>
    <p>+ long time</p>
    <p>type != TYPE1</p>
  </div>
  <div class="page">
    <p>Problem3: Over-constrained paths results in no test cases</p>
    <p>type = int(input())</p>
    <p>if type == TYPE1: parse_TYPE1()</p>
    <p>if type == TYPE2: parse_TYPE2()</p>
    <p>type = int(input())</p>
    <p>type == TYPE1</p>
    <p>.</p>
    <p>type == TYPE2</p>
    <p>+ long time</p>
    <p>type != TYPE1</p>
    <p>If these branches are independent</p>
  </div>
  <div class="page">
    <p>Solution3: Solve constraints optimistically</p>
    <p>type = int(input())</p>
    <p>if type == TYPE1: parse_TYPE1()</p>
    <p>if type == TYPE2: parse_TYPE2()</p>
    <p>type = int(input())</p>
    <p>type == TYPE1</p>
    <p>.</p>
    <p>type == TYPE2</p>
    <p>+ long time</p>
    <p>type != TYPE1</p>
  </div>
  <div class="page">
    <p>Our decision: Solve only the last constraint in the path</p>
    <p>type = int(input())</p>
    <p>if type == TYPE1: parse_TYPE1()</p>
    <p>if type == TYPE2: parse_TYPE2()</p>
    <p>Simple: Only one constraint  High chance to pass the branch</p>
    <p>Only waste a small solving time</p>
  </div>
  <div class="page">
    <p>In hybrid fuzzing, generating incorrect inputs are fine due to fuzzing</p>
    <p>Program</p>
    <p>push ebp mov ebp, esp</p>
    <p>Basic block</p>
    <p>A[0] == A &amp;&amp; A[1] == A &amp;&amp; A[2] == A</p>
    <p>Constraints</p>
    <p>Fuzzing</p>
    <p>Coverage</p>
    <p>Test cases</p>
    <p>Fuzzing will filter out incorrect inputs based on coverage</p>
  </div>
  <div class="page">
    <p>Optimistic solving helps to find more bugs</p>
    <p>LAVA-M dataset</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>16K LoC of C++</p>
    <p>Intel Pin: emulation  Z3: constraint solving</p>
    <p>Will be available at https://github.com/sslab-gatech/qsym</p>
  </div>
  <div class="page">
    <p>Evaluation questions</p>
    <p>Scaling to real-world software?</p>
    <p>How good is QSYM compared to  Driller (a state-of-the-art hybrid fuzzing)  Vuzzer (a state-of-the-art fuzzing)  Fuzzing and symbolic execution</p>
  </div>
  <div class="page">
    <p>QSYM scales to real-world software</p>
    <p>13 bugs in real-world software</p>
  </div>
  <div class="page">
    <p>QSYM can generate test cases that fuzzing is hard to find  e.g.) ffmpeg: Not reachable by fuzzing</p>
    <p>if( ((ox^(ox+dxw)) | (ox^(ox+dxh)) | (ox^(ox+dxw+ dxh)) | (oy^(oy+dyw)) | (oy^(oy+dyh)) | (oy^(oy+dyw+ dyh))) &gt;&gt; (16 + shift) || (dxx | dxy | dyx | dyy) &amp; 15 || (need_emu &amp;&amp; (h &gt; MAX_H || stride &gt; MAX_STRIDE)))</p>
    <p>{ ... return; } // the bug is here</p>
  </div>
  <div class="page">
    <p>Compare QSYM with Driller, a state-of-the-art hybrid fuzzing  Dataset: 126 binaries from CGC</p>
    <p>Run only one instance of concolic execution for 5 min  i.e., remove fuzzing</p>
    <p>Compare code coverage</p>
  </div>
  <div class="page">
    <p>QSYM achieved more code coverage than Driller in most cases of CGC  Among 126 challenges  QSYM achieved more: 104 challenges  Driller achieved more: 18 challenges</p>
  </div>
  <div class="page">
    <p>QSYM achieved more code coverage due to its better performance  e.g., CROMU_00001</p>
    <p>To achieve new code coverage, seven stages are required  Add one user  Add another user  login  send to message</p>
    <p>QSYM can reach the stage, but Driller cannot in time</p>
  </div>
  <div class="page">
    <p>Driller achieved more code coverage if nested branches exist  Driller can find inputs for nested branches by a single execution due</p>
    <p>to forking</p>
    <p>QSYM requires re-execution  NOTE: Our experiment allows only one instance of concolic execution</p>
  </div>
  <div class="page">
    <p>QSYM outperforms other techniques in LAVA-M dataset</p>
    <p>LAVA-M dataset: inject hard-to-find bugs in real-world software  5 hour run</p>
  </div>
  <div class="page">
    <p>Discussions &amp; Limitation</p>
    <p>Use of less accurate test cases  Requires efficient validators  e.g., exploit generation</p>
    <p>Implementation status  Only support x86, x86_64  No floating point support</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Hybrid fuzzing scalable to real-world software  13 bugs in real-world software</p>
    <p>Outperform a state-of-the-art hybrid fuzzing and other bug finding</p>
    <p>https://github.com/sslab-gatech/qsym</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
  <div class="page">
    <p>Using only the last constraint is good for time and bug finding</p>
  </div>
  <div class="page">
    <p>Number of instructions that are not emulated by QSYM due to its limitation</p>
    <p>13 / 126 challenges: At least one  3 / 126 challenges: More than 1% of total instructions</p>
  </div>
</Presentation>
