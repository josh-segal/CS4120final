<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Emmett Witchel Junghwan Rhee Krste Asanovi University of Texas at Austin Purdue University MIT CSAIL</p>
    <p>Mondrix: Memory Isolation for Linux using Mondriaan</p>
    <p>Memory Protection</p>
  </div>
  <div class="page">
    <p>Uniprocessor Performance Not Scaling</p>
    <p>OS can help HW designers keep their job</p>
    <p>Graph by Dave Patterson</p>
  </div>
  <div class="page">
    <p>Lightweight HW Protection Domains</p>
    <p>Divisions within address space  Backwards compatible with binaries, OS, ISA  Linear addressing  one datum per address</p>
    <p>HW complexity about same as TLB  Switching protection contexts faster than</p>
    <p>addressing contexts  Protection check off load critical path  No pipeline flush on cross-domain call</p>
    <p>OS</p>
    <p>User</p>
    <p>ide-mod ide-disk ne unix rtc</p>
    <p>thttpd MySQL find</p>
  </div>
  <div class="page">
    <p>Problems With Modern Modules</p>
    <p>Modules in a single address space + Simple + Inter-module calls are fast + Data sharing is easy (no</p>
    <p>marshalling)</p>
    <p>No isolation  Bugs lead to bad memory</p>
    <p>accesses  One bad access crashes</p>
    <p>system</p>
    <p>Single Address Space</p>
    <p>Read-write</p>
    <p>Read-only</p>
    <p>Execute</p>
    <p>No access</p>
    <p>ide.o</p>
    <p>ide.o</p>
  </div>
  <div class="page">
    <p>Current Hardware Broken</p>
    <p>Page based memory protection  Came with virtual memory, not designed for protection  A reasonable design point, but not for safe modules  Modules are not clean abstractions</p>
    <p>Hardware capabilities have problems  Different programming model  Revocation difficult [System/38, M-machine]  Tagged pointers complicate machine</p>
    <p>x86 segment facilities are broken capabilities  HW that does not nourish SW</p>
  </div>
  <div class="page">
    <p>Mondriaan + Linux = Mondrix  Each kernel module in different protection</p>
    <p>domain to increase memory isolation  Failure indicated before data corruption  Failures localized, damage bounded</p>
    <p>Mondriaan Memory Protection (MMP) makes legacy software memory safe  Verify HW design by building software (OS)</p>
    <p>ASPLOS 02, the MMP permission table  Nine months</p>
    <p>SOSP 05, Linux support + MMP redesign  Two years</p>
  </div>
  <div class="page">
    <p>Mondrix In Action</p>
    <p>Kernel ide.o</p>
    <p>Kernel loader establishes initial permission regions</p>
    <p>Kernel calls mprotect(buf0, RO, 2) mprotect(buf1, RW, 2)</p>
    <p>Memory</p>
    <p>Addresses</p>
    <p>mprotect(kfree, EX, 2)</p>
    <p>ide.o calls mprotect(req_q,RW,1) mprotect(mod_init,EX,1)</p>
    <p>unix.ortc.o 3 4</p>
    <p>No perm</p>
    <p>Read-write</p>
    <p>Read-only</p>
    <p>Execute-read</p>
    <p>Multiple protection domains</p>
  </div>
  <div class="page">
    <p>Challenges for Mondrix  Memory supervisor</p>
    <p>Manage permissions, enforce sharing policy</p>
    <p>Memory allocators  Keep semantics of kfree even with memory</p>
    <p>sharing</p>
    <p>Cross-domain calling (lightweight, local RPC)  e.g., kernel calls start_recv in network driver</p>
    <p>Group domains  Permissions for groups of memory locations whose</p>
    <p>members change with time</p>
    <p>Device drivers (disk and net)  Evaluation (safety and performance)</p>
  </div>
  <div class="page">
    <p>Memory Supervisor</p>
    <p>Kernel subsystem to manage memory permissions (Mtop). Not trust kernel.  Exports device independent protection API</p>
    <p>mprot_export(ptr,len,prot,domain-ID)</p>
    <p>Tracks memory owned by each domain  Enforces memory isolation policy</p>
    <p>Non-owner can not increase permissions</p>
    <p>Regulates domains joining a group domain</p>
    <p>Writes protection tables (Mbot)  All-powerful. Small.</p>
    <p>OS</p>
    <p>Mtop</p>
    <p>Mbot</p>
    <p>HW</p>
  </div>
  <div class="page">
    <p>Memory Allocation</p>
    <p>Memory allocators kept out of supervisor  Allocator finds block of proper length  Supervisor grants permissions</p>
    <p>Supervisor tracks sharing relationships  kfree applies to all domains &amp; groups  No modifications to kernel to track sharing</p>
    <p>Slab allocator made MMP aware  Allows some writes to uninitialized memory</p>
  </div>
  <div class="page">
    <p>mov</p>
    <p>Cross-Domain Calling</p>
    <p>Mondrix guarantees:  Module only entered at switch gate  Return gate returns to instruction after</p>
    <p>call, to calling domain  Marshalling = Giving permissions  Stack allocated parameters are OK</p>
    <p>HW writes cross-domain call stack</p>
    <p>add</p>
    <p>ret</p>
    <p>Domain ID</p>
    <p>call mi</p>
    <p>pop</p>
    <p>push</p>
    <p>ret</p>
    <p>mi:</p>
    <p>ret</p>
    <p>push</p>
    <p>Kernel Module</p>
  </div>
  <div class="page">
    <p>MMP Hardware</p>
    <p>Memory Permissions</p>
    <p>Table</p>
    <p>Refill</p>
    <p>Only permissions table is large</p>
    <p>CPU</p>
    <p>Protection</p>
    <p>Lookaside</p>
    <p>Buffer (PLB)</p>
    <p>Domain ID</p>
    <p>Stack</p>
    <p>Permissions</p>
    <p>Table</p>
    <p>Gate</p>
    <p>Table</p>
    <p>Gate Lookaside</p>
    <p>Buffer</p>
    <p>Program Counter</p>
    <p>Refill</p>
    <p>Stack Regs</p>
  </div>
  <div class="page">
    <p>Group Protection Domains</p>
    <p>Domains need permission on group of related memory objects.</p>
    <p>Kernel ne.o 1 2</p>
    <p>inodes</p>
    <p>No perm</p>
    <p>Read-write</p>
    <p>Read-only</p>
    <p>Execute-read</p>
    <p>ide.o 3</p>
    <p>Group domain virtual until a regular domain joins.</p>
    <p>Supervisor regulates membership</p>
  </div>
  <div class="page">
    <p>Disk and Network Device Drivers</p>
    <p>Disk driver (EIDE)  Permission granted before device read/write  Permission revoked after device read/write  DMA supported</p>
    <p>Network driver (NE2000)  Permissions tightly controlled  Read-write to 32 of 144 bytes of sk_buff</p>
    <p>Device driver does not write kernel pointers</p>
    <p>Device does not support DMA</p>
  </div>
  <div class="page">
    <p>Net Driver Example</p>
    <p>// XD</p>
    <p>mprot_export(&amp;skb, PROT_RW,sr_pd);</p>
    <p>dev-&gt;start_recv(skb, dev);</p>
    <p>mprot_export(&amp;skb,PROT_NONE,sr_pd)</p>
    <p>Kernel loader modifications  start_recv becomes cross-domain call</p>
    <p>Also add module memory sharing policy  Permission grant/revoke explicit</p>
  </div>
  <div class="page">
    <p>Evaluation Methodolgy</p>
    <p>Turned x86 into x86 with MMP  Instrumented SimICS &amp; bochs machine</p>
    <p>simulator  Complete system simulation, including BIOS  4,000 lines of hardware model of MMP</p>
    <p>Turned Linux into Mondrix  4,000 lines of memory supervisor top  1,720 lines of memory supervisor bottom  2,000 lines of kernel changes</p>
    <p>Modified allocators, tough but only done once  Modified disk &amp; network code easier</p>
  </div>
  <div class="page">
    <p>Fault Injection Experiments</p>
    <p>Ext2 file system, RIO/Nooks fault injector Symptom # runs MMP catch</p>
    <p>None 157 4 (2.5%)</p>
    <p>Hang 23 9 (39%)</p>
    <p>Panic 20 18 (90%)</p>
    <p>Mondrix prevented 3 of 5 cases where filesystem became corrupt (lost data)  MMP detected problems before propagation  2 of 3 errors detected outside device driver</p>
  </div>
  <div class="page">
    <p>Workloads</p>
    <p>./configure for xemacs-21.4.14  Launches many processes, creates many</p>
    <p>temporary files</p>
    <p>thttpd  Web server with cgi scripts</p>
    <p>find /usr print | xargs grep kangaroo</p>
    <p>MySQL  client test subset 150 test transactions</p>
  </div>
  <div class="page">
    <p>Performance Model</p>
    <p>1 instruction per cycle</p>
    <p>16KB 4-way L1 I &amp; D cache</p>
    <p>2MB 8-way associative unified L2 cache</p>
    <p>4 GHz processor, 50ns memory</p>
    <p>L1 miss = 16 cycles, L2 miss 200 cycles</p>
    <p>Slowdown = Total time of Mondrix workload/Total time of Linux workload</p>
  </div>
  <div class="page">
    <p>config-xemacs</p>
  </div>
  <div class="page">
    <p>Performance Benchmark Slow Cyc*109 Mbot Mtop Kern</p>
    <p>conf-xemacs 4.4% 16.5 2.4% 0.7% 1.3%</p>
    <p>thttpd 14.8% 0.23 9.3% 2.0% 3.7%</p>
    <p>find 3.3% 14.3 1.3% 1.2% 0.8%</p>
    <p>MySQL 9.6% 0.21 4.0% 3.3% 2.3%</p>
    <p>Benchmark Mem XD Cy/XD PLB</p>
    <p>conf-xemacs 10.2% 0.3% 1,286 0.8%</p>
    <p>thttpd 1.1% 0.8% 939 3.8%</p>
    <p>find 7.8% 0.2% 846 0.4%</p>
    <p>MySQL 1.6% 0.7% 664 1.7%</p>
  </div>
  <div class="page">
    <p>Performance, Protection, Programming</p>
    <p>Incremental performance cost for incremental isolation</p>
    <p>Loader only (~0.1%)  Gates, inaccessible words between strings</p>
    <p>Memory allocation package (~1.0%)  Guard words  Fault on accessing uninitialized data</p>
    <p>Module-specific policies (~10%)</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Safe device drivers with Nooks [Swift 04]</p>
    <p>Asbestos [Efstathopoulos 05] event processes  Isolating user state perfect task for MMP</p>
    <p>Failure oblivious software [Rinard 04]  MMP optimizes out some memory checks</p>
    <p>Useful to implement safe languages?  Unmanaged pieces/unsafe extensions  Reduce trusted computing base</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Mondrix demonstrates that legacy software can be made safe (efficiently)</p>
    <p>MMP enables fast, robust, and extensible software systems  Previously it was pick two out of three</p>
    <p>OS should demand more of HW Thanks to the PC, and I hope SOSP 07 accepts ~20%</p>
  </div>
</Presentation>
