<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A General Persistent Code Caching Framework for Dynamic Binary</p>
    <p>Translation (DBT)</p>
    <p>Wenwen Wang Pen-Chung Yew, Antonia Zhai, Stephen McCamant</p>
    <p>wenwang@cs.umn.edu</p>
  </div>
  <div class="page">
    <p>Motivation Dynamic binary translation (DBT) is a key enabling technology</p>
    <p>Enable many applications</p>
    <p>System virtualization</p>
    <p>Whole program analysis</p>
    <p>System security</p>
    <p>High translation overhead</p>
    <p>For long-running applications: amortize translation overhead</p>
    <p>For short-running applications: significant performance penalty</p>
    <p>Short-running applications are common in web applications</p>
  </div>
  <div class="page">
    <p>Code Reuse: Effective in Reducing Translation Overhead</p>
    <p>Across Versions</p>
    <p>Across Inputs</p>
    <p>Across Executions Reuse</p>
    <p>Across Applications</p>
    <p>Three Key Challenges:</p>
    <p>Absolute addresses in translated host binaries</p>
    <p>Dynamically generated guest binaries</p>
    <p>Code generated by JIT compilers</p>
    <p>Relocatable guest binaries</p>
  </div>
  <div class="page">
    <p>Challenge due to Relocatable Guest Binaries</p>
    <p>Cannot use instruction addresses to locate translated code  Directly use the guest binary code to search for translated code</p>
    <p>Guest Address Space Guest Address Space</p>
    <p>Host Code for A</p>
    <p>Guest Code A</p>
    <p>addr1 Binary</p>
    <p>Translation</p>
    <p>Guest Code AR</p>
    <p>eus e addr2</p>
  </div>
  <div class="page">
    <p>Challenge due to Absolute Addresses in Host Binaries</p>
    <p>Guest Binary Code (x86-32)</p>
    <p>Host Binary Code (x86-64)</p>
    <p>Same binary, but different addresses</p>
    <p>Binary Translation</p>
    <p>Reu se</p>
    <p>Translated code cannot be reused directly  Generate position independent code  Generate relocation records in translated code</p>
  </div>
  <div class="page">
    <p>Dynamically generated code have different addresses across runs  Search translated code with guest binary</p>
    <p>Unable to locate the original guest code after re-optimization  Save guest code after the translation</p>
    <p>Re-optimization Guest Code</p>
    <p>Challenge due to Dynamically Generated Binaries</p>
    <p>Guest Code 2</p>
    <p>Re-optimization Guest Code</p>
    <p>Host Code 1</p>
    <p>Host Code 2</p>
    <p>Host Code 3</p>
  </div>
  <div class="page">
    <p>A General Framework - Two Phases</p>
    <p>Guest Binary</p>
    <p>Translator</p>
    <p>Code Cache</p>
    <p>Hash Table</p>
    <p>GIP HIP</p>
    <p>... ...</p>
    <p>Translator</p>
    <p>Code Cache</p>
    <p>No Host Code</p>
    <p>Host Code</p>
    <p>Host Code</p>
    <p>GuestIP</p>
    <p>GuestIP</p>
    <p>NULL</p>
    <p>Persistent Code</p>
    <p>Generation</p>
    <p>Persistent Code Reuse NULL</p>
    <p>Persistent Code</p>
    <p>Host Code</p>
  </div>
  <div class="page">
    <p>Persistent Code Structure  Each persistent code entry corresponds</p>
    <p>to the translation unit</p>
    <p>Basic block  Trace</p>
    <p>Each entry contains</p>
    <p>Block/Trace ID  Guest binary code  Host binary code  Relocation records for host binary code  Meta data for the translation unit</p>
    <p>Block Id</p>
    <p>Number of Relocation Records</p>
    <p>Relocation Records</p>
    <p>Block Data Structure</p>
    <p>Guest Binary Code</p>
    <p>Host Binary Code</p>
    <p>Entry 2</p>
    <p>Entry 1</p>
    <p>Block Id</p>
    <p>Number of Relocation Records</p>
    <p>Relocation Records</p>
    <p>Block Data Structure</p>
    <p>Guest Binary Code</p>
    <p>Host Binary Code</p>
    <p>...</p>
    <p>Number of Entries</p>
  </div>
  <div class="page">
    <p>Persistent Code Searching</p>
    <p>Create a hash table  Using the size and content of guest binary code instead of guest instruction</p>
    <p>addresses</p>
    <p>Handle hash table collision  Two level hash key to reduce hash table collision  Byte-level comparison using guest binary code</p>
    <p>Global optimizations across translation units  Compare guest binary code of connected translation units (Details in</p>
    <p>Section 2.2)</p>
  </div>
  <div class="page">
    <p>Persistent Code Accumulation</p>
    <p>Existing Persistent</p>
    <p>Code</p>
    <p>New Persistent</p>
    <p>Code</p>
    <p>Accumulated Persistent Code</p>
    <p>DBT No matching entry</p>
    <p>Translated codes can be shared across applications</p>
  </div>
  <div class="page">
    <p>Implementation and Experiments</p>
    <p>Leverage an existing DBT system, HQEMU [13]  Retargetable DBT system based on QEMU  Use QEMU for basic block translation  Use LLVM for trace optimization</p>
    <p>Benchmarks  SPEC CINT2006 with test input set  SpiderMonkey from Mozilla with Google Octane</p>
  </div>
  <div class="page">
    <p>How much translation overhead can be reduced?</p>
    <p>For same binary + same input  Speedup &gt; 5X  Size &lt; 20MB  Overhead &lt; 1%</p>
    <p>Is translated code reuse effective across inputs + applications?</p>
  </div>
  <div class="page">
    <p>Code Reuse across Inputs Gobmk from SPEC CINT2006: 7 inputs in test input set</p>
    <p>Persistent code caching is effective across different inputs</p>
  </div>
  <div class="page">
    <p>Code Reuse across Applications</p>
    <p>Persistent code can be shared across applications  Code size management is necessary</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Using persistent code caching is an effective way to mitigate translation overhead for short running applications</p>
    <p>Need to overcome several challenges for effective persistent code caching  Relocatable guest binaries  Absolute addresses in host binaries  Dynamically generated guest binaries</p>
    <p>Our proposed framework can address those challenges effectively to reuse persistent code across different executions, different inputs, or different applications</p>
  </div>
  <div class="page">
    <p>Thank you! wenwang@cs.umn.edu</p>
  </div>
</Presentation>
