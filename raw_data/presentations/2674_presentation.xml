<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>StreamScope: Continuous Reliable Distributed Processing</p>
    <p>of Big Data Streams</p>
    <p>Wei Lin*, Haochuan Fan*, Zhengping Qian (ZP)*, Junwei Xu, Sen Yang, Jingren Zhou*, Lidong Zhou</p>
    <p>Microsoft *Now with Alibaba Group</p>
    <p>@NSDI16</p>
  </div>
  <div class="page">
    <p>A new transaction got reflected in the output within 3s The system processed up to 50 million events/s</p>
  </div>
  <div class="page">
    <p>High complexity 48 stages 18 joins of 5 different types 21.3 TB in-memory state</p>
    <p>Fault tolerance Handles both planned failures and unplanned outages automatically</p>
    <p>Massive scalability Reads 61TB + Write 61TB 7 billions of input events 6 billions of output events 3000+ long-running tasks</p>
  </div>
  <div class="page">
    <p>Streaming dataflow Input streams</p>
    <p>R R</p>
    <p>X X X</p>
    <p>M</p>
    <p>Output streams</p>
    <p>Channels Vertices</p>
    <p>Streaming events</p>
  </div>
  <div class="page">
    <p>Streaming dataflow Input streams</p>
    <p>R R</p>
    <p>X X X</p>
    <p>M</p>
    <p>Output streams</p>
    <p>Vertices</p>
    <p>Missing or duplicate events</p>
    <p>Replay of upstream events</p>
    <p>Rebuild the state</p>
  </div>
  <div class="page">
    <p>Decoupling Input streams</p>
    <p>R R</p>
    <p>X X X</p>
    <p>M</p>
    <p>Output streams</p>
    <p>Vertices</p>
    <p>rStream Provides the illusion of reliable</p>
    <p>and asynchronous communication channels</p>
  </div>
  <div class="page">
    <p>rStream</p>
    <p>Properties  There is a unique value associated with each sequence number  A read returns only after a successful write, for the same seq  If a write of (seq,e) succeeds, then for the following reads that</p>
    <p>reach position seq, they eventually return (seq,e)</p>
    <p>R1</p>
    <p>W1</p>
    <p>Old New</p>
    <p>W2</p>
    <p>R2 R3</p>
  </div>
  <div class="page">
    <p>Execution of a vertex</p>
    <p>X: t1</p>
    <p>,4 ,5</p>
    <p>,6 ,7</p>
    <p>s1 = &lt;{2}, {1}, t1&gt;</p>
    <p>Snapshot  Sequence numbers of its input streams  Sequence numbers of its output streams  Computation state</p>
  </div>
  <div class="page">
    <p>rVertex</p>
    <p>X: t1</p>
    <p>,4 ,5</p>
    <p>,6 ,7</p>
    <p>s1 = &lt;{2}, {1}, t1&gt;</p>
    <p>X: t2</p>
    <p>,5 ,6</p>
    <p>,7</p>
    <p>s2 = &lt;{3}, {2}, t2&gt;</p>
    <p>X: t3</p>
    <p>,3 ,4</p>
    <p>,7</p>
    <p>s3 = &lt;{4}, {4}, t3&gt;</p>
    <p>Timeline</p>
    <p>Restart from a snapshot</p>
  </div>
  <div class="page">
    <p>Failure recovery</p>
    <p>X: t1</p>
    <p>,4 ,5</p>
    <p>,6 ,7</p>
    <p>s1 = &lt;{2}, {1}, t1&gt;</p>
    <p>X: t2</p>
    <p>,5 ,6</p>
    <p>,7</p>
    <p>s2 = &lt;{3}, {2}, t2&gt;</p>
    <p>X: t3</p>
    <p>,3 ,4</p>
    <p>,7</p>
    <p>s3 = &lt;{4}, {4}, t3&gt;</p>
    <p>Timeline</p>
  </div>
  <div class="page">
    <p>Optimization</p>
    <p>Nave implementation of rStream: writing events to reliable store  Synchronous writes introduce significant latencies</p>
    <p>Uses a hybrid scheme that moves writes out of the critical path while providing the illusion of reliable channels</p>
    <p>Reliable VolatileGCOld New</p>
  </div>
  <div class="page">
    <p>Different failure recovery strategies</p>
    <p>Recomputation using dependency tracking at runtime  Checkpoint/log replay  Persistent state/streams  Hybrid</p>
  </div>
  <div class="page">
    <p>Development/debugging</p>
    <p>Greatly leveraged and tightly integrated with existing system  Integrated language, optimizer, scheduling, etc.</p>
    <p>Distributed streaming made easy  Off-line mode: starting with finite inputs with minimum resources to</p>
    <p>validate/debug a streaming application  Later switched to on-line, live execution transparently  Greatly improves developer productivity in lifecycle of an application</p>
    <p>E.g., Can even debug/profile a vertex without impacting the running job</p>
  </div>
  <div class="page">
    <p>Deployment</p>
    <p>Re-examination of segments of execution in the past for auditing</p>
    <p>Dynamic scaling and robustness to load fluctuation</p>
    <p>Continuous operation during system maintenance</p>
    <p>Straggler handling</p>
    <p>Dynamic reconfiguration/patching to resolve data anomalies</p>
  </div>
  <div class="page">
    <p># S</p>
    <p>er ve</p>
    <p>r m</p>
    <p>a in</p>
    <p>te na</p>
    <p>nc e</p>
    <p># F</p>
    <p>a ilu</p>
    <p>re s</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m in</p>
    <p>ut e)</p>
  </div>
  <div class="page">
    <p>Conclusion  Cloud-scale stream computation is challenging due to the</p>
    <p>complexity of dependencies</p>
    <p>StreamScope introduces two new abstractions, rVertex and rStream, to manage the complexity through decoupling</p>
    <p>The abstractions separate system properties from the actual implementation to,  Enable powerful optimizations  Develop different failure recovery strategies  Better support the lifecycle of streaming applications in production</p>
  </div>
</Presentation>
