<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Qinghua Lu, Liming Zhu, Xiwei Xu, Len Bass,</p>
    <p>Shanshan Li, Weishan Zhang, Ning Wang</p>
    <p>China University of Petroleum, Qingdao, China</p>
    <p>NICTA, Sydney, Australia</p>
    <p>dr.qinghua.lu@gmail.com</p>
    <p>Mechanisms and Architectures for Tail-Tolerant System Operations</p>
    <p>in Cloud</p>
  </div>
  <div class="page">
    <p>Outline 2</p>
    <p>Motivation  Tail-Tolerant Mechanisms and API Wrapper  Deployment Architecture Tactics  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>System operations (such as upgrade, deployment and backup) in cloud are performed through cloud APIs provided by cloud providers  The completion time and reliability of operation tasks</p>
    <p>depends on the reliability and performance of API calls  We observed cloud API issues during the development</p>
    <p>of our commercial product Yuruware Bolt  Yuruware Bolt relies EC2 to perform disaster recovery</p>
    <p>operations  e.g., when we detach/attach a volume, it is stuck at</p>
    <p>detaching/attaching</p>
  </div>
  <div class="page">
    <p>Motivation  We performed searches on EC2 forum</p>
    <p>5 API calls: launch instance, start instance, stop instance, attach volume, detach volume</p>
    <p>extracted API related issues: 922 cases out of 1109 API related cases are API failures</p>
    <p>81% of 922 failures are timing failures (stuck API calls and slow responded API calls)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Measurement results of EC2 launch instance</p>
    <p>We conducted experiments on the timing behaviour of 5 EC2 API calls and observed that around 4.5% have long tail characteristics</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Cloud API timing failuresmajor causes of the long-tail of operation tasks  Existing research focuses on reducing</p>
    <p>errors and repair time  One step of an operation: parallel or</p>
    <p>deep hierarchical  One slow API response will cause the initial</p>
    <p>operation to be slow to respond</p>
  </div>
  <div class="page">
    <p>Tail-Tolerant Mechanisms</p>
  </div>
  <div class="page">
    <p>Tail-Tolerant Mechanisms</p>
    <p>Issue more request than we need and then cancel the remaining immediately after the required number is reached</p>
  </div>
  <div class="page">
    <p>Tail-Tolerant Mechanisms</p>
    <p>An alternative API is requested at the same time as the original API is requested</p>
  </div>
  <div class="page">
    <p>Tail-Tolerant Mechanisms</p>
    <p>If the API request sent to an instance is failed or there is no response from the cloud infrastructure</p>
  </div>
  <div class="page">
    <p>Tail-Tolerant Mechanisms</p>
    <p>When an API call has been retried for several times and continue to fail</p>
  </div>
  <div class="page">
    <p>API Wrapper</p>
  </div>
  <div class="page">
    <p>Evaluation of API Wrapper</p>
    <p>Measurement results of start instance. Measurement results of stop instance.</p>
    <p>Evaluate API wrapper on EC2  For each API we wrapped, we measure the return time</p>
  </div>
  <div class="page">
    <p>Deployment Architecture Tactics  Immutable server</p>
    <p>Operators make an image which contains a new version of everything an application needs. After the image is launched, nothing more is added or allowed to be changed.</p>
    <p>Micro service  Operators break down an application into micro-services</p>
    <p>and make each service run on different VMs.  Lightweight instances and less performance interference</p>
    <p>Redundancy:  Operator can run more than the required number of VMs to</p>
    <p>avoid long-tail operations.</p>
  </div>
  <div class="page">
    <p>Evaluation of Deployment Architecture Tactics</p>
    <p>We evaluate the deployment architecture tactics through automatically upgrading 50 AMP stacks (Apache + MySQL + PHP) by shell scripts.  ran on EC2  upgrades the AMP stack from Apache 2.0.65, MySQL</p>
  </div>
  <div class="page">
    <p>Evaluation of Deployment Architecture Tactics</p>
    <p>We implemented the three deployment tactics, and compared the number of the successfully upgraded VMs using different tactics with a baseline, which represents upgrade without any tactics.</p>
    <p>Ran each of the 4 test cases 100 times  Baseline: upgrade AMP running on 50 VMs to the recent versions directly</p>
    <p>on the original VMs.  Immutable server: create an image of VM which runs the new version of</p>
    <p>AMP and launch 50 VMs using the image. Then we terminate the VMs running old versions of AMP.</p>
    <p>Micro services: run Apache and PHP on 50 VMs and run MySQL on another 50 VMs, then we upgrade them on the original VMs directly.</p>
    <p>Redundancy: launch 3 extra VMs with AMPs before we do upgrade. After the 3 extra VMs are successfully launched, we start upgrading the 53 VMs with AMPs.</p>
  </div>
  <div class="page">
    <p>Evaluation of Deployment Architecture Tactics</p>
    <p>Measurement results of deployment tactics.</p>
  </div>
  <div class="page">
    <p>Conclusions  We proposed API mechanisms and deployment</p>
    <p>architecture tactics to tolerate long-tail issues of operations in cloud</p>
    <p>We implemented our mechanisms as a tail-tolerant wrapper around EC2 APIs</p>
    <p>Our initial evaluation shows that the mechanisms and deployment architecture tactics can remove the long tails</p>
    <p>Future work:  implement the rest of mechanisms in API wrapper  model the reliability of cloud operations in SRN</p>
  </div>
  <div class="page">
    <p>Thanks you!</p>
  </div>
</Presentation>
