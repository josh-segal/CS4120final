<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ViewBox Integrating Local File Systems with</p>
    <p>Cloud Storage Services</p>
    <p>Yupu Zhang+, Chris Dragga+*,</p>
    <p>Andrea Arpaci-Dusseau+, Remzi Arpaci-Dusseau+</p>
    <p>+University of Wisconsin  Madison</p>
    <p>*NetApp, Inc.</p>
  </div>
  <div class="page">
    <p>Personal Cloud Storage Services</p>
    <p>Exploding in popularity  Numerous providers: Dropbox, Google Drive, SkyDrive</p>
    <p>Large user base: Dropbox has more than 100 million users</p>
    <p>Promising benefit  Reliable backup on the cloud</p>
    <p>Automatic synchronization across clients/devices</p>
    <p>There are so many copies My data must be safe... Really?</p>
  </div>
  <div class="page">
    <p>Is Your Data Really Safe?</p>
    <p>Data corruption  Uploaded from local machine to cloud</p>
    <p>Propagated to other devices/clients</p>
  </div>
  <div class="page">
    <p>Crash inconsistency  Inconsistent data ends up everywhere</p>
    <p>Out-of-sync synchronization</p>
    <p>Is Your Data Really Safe?</p>
    <p>after reboot</p>
    <p>sync client thinks everything is in sync</p>
  </div>
  <div class="page">
    <p>Is Your Data Really Safe?</p>
    <p>Causal inconsistency  Files are uploaded out of order</p>
    <p>Cloud state does not match a valid FS state</p>
    <p>thumbnail</p>
  </div>
  <div class="page">
    <p>Many copies do NOT</p>
    <p>make your data safe</p>
  </div>
  <div class="page">
    <p>Local file system is the weakest link</p>
    <p>Corruption and inconsistency are exposed</p>
    <p>Why?  File Systems</p>
    <p>file system state correct state</p>
  </div>
  <div class="page">
    <p>Ad-hoc synchronization is harmful</p>
    <p>Sync client sees what regular application sees, but not what file system sees</p>
    <p>Why?  Sync Services</p>
    <p>cloud state file system state</p>
  </div>
  <div class="page">
    <p>Can we achieve</p>
    <p>with existing systems?</p>
    <p>cloud state file system state correct state= =</p>
  </div>
  <div class="page">
    <p>Our solution: ViewBox</p>
    <p>Local detection + Cloud-aided recovery  Rely on strong local file system to detect problems</p>
    <p>Utilize cloud data to recover from local failures</p>
    <p>Orchestrated synchronization based on views  In-memory snapshots of valid file system state</p>
    <p>Sync client sees what file system sees</p>
    <p>integrated file system and cloud storage</p>
    <p>file system state = correct state</p>
    <p>cloud state = file system state</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>ViewBox runs on top of existing systems  Enhance ext4 with data checksumming</p>
    <p>Work with unmodified Dropbox and modified Seafile</p>
    <p>ViewBox provides better reliability  No global data pollution</p>
    <p>Automatic recovery with cloud data</p>
    <p>ViewBox incurs minimal overhead  Less than 5% overhead for most workloads</p>
    <p>Up to 30% reduction of synchronization time in some cases</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation  Data Corruption</p>
    <p>Crash Inconsistency</p>
    <p>Causal Inconsistency</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>File systems (on Linux)  ext4 w/ ordered journaling</p>
    <p>ext4 w/ data journaling</p>
    <p>ZFS</p>
    <p>Synchronization services  Dropbox</p>
    <p>ownCloud</p>
    <p>Seafile</p>
  </div>
  <div class="page">
    <p>File SystemD1File System</p>
    <p>Inject corruption to a synchronized file on disk</p>
    <p>Perform various workloads  data writes, metadata changes (touch, chmod, etc.)</p>
    <p>Check if corruption is propagated</p>
    <p>D2</p>
    <p>Data Corruption  Method</p>
    <p>M MD1 D2 D3 D1 D2 D3x</p>
    <p>D2 M</p>
  </div>
  <div class="page">
    <p>Data Corruption  Results</p>
    <p>FS Service Data Writes Metadata Changes</p>
    <p>mtime ctime atime</p>
    <p>ext4</p>
    <p>Dropbox L G L G L G L</p>
    <p>ownCloud L G L G L L</p>
    <p>Seafile L G L G L G L G</p>
    <p>L: local corruption G: global corruption D: detected R: recovered</p>
    <p>Corruption is uploaded even when there is no data change</p>
  </div>
  <div class="page">
    <p>Data Corruption  Results</p>
    <p>FS Service Data Writes Metadata Changes</p>
    <p>mtime ctime atime</p>
    <p>ZFS</p>
    <p>Dropbox D D D L</p>
    <p>ownCloud D D L L</p>
    <p>Seafile D D D D</p>
    <p>No automatic recovery using cloud data</p>
    <p>L: local corruption G: global corruption D: detected R: recovered</p>
    <p>Corruption is detected when it is read</p>
  </div>
  <div class="page">
    <p>Data Corruption  Lessons</p>
    <p>Where do synchronization services fail?  Rely on file-level monitoring mechanism, e.g., inotify</p>
    <p>Have to read whole file to identify changes</p>
    <p>Cannot tell between legitimate changes and corruption</p>
    <p>Where do file systems fail?  Many file systems do not checksum data</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation  Data Corruption</p>
    <p>Crash Inconsistency</p>
    <p>Causal Inconsistency</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>D3 D4</p>
    <p>A file is synchronized at V0 on disk and cloud</p>
    <p>Update the file from V0 to V1  Inject a crash and observe sync clients behavior</p>
    <p>Crash Inconsistency - Method</p>
    <p>M</p>
    <p>M</p>
    <p>D1 D2 D3</p>
    <p>D1 D2</p>
    <p>V0 V1</p>
    <p>M D1 D2</p>
    <p>D3</p>
    <p>a mix of V0 and V1</p>
  </div>
  <div class="page">
    <p>Crash Inconsistency  Results</p>
    <p>FS Service Upload</p>
    <p>Local Version Download</p>
    <p>Cloud Version Out of Sync</p>
    <p>ext4 (ordered)</p>
    <p>Dropbox YES NO YES</p>
    <p>ownCloud YES YES YES</p>
    <p>Seafile N/A N/A N/A</p>
    <p>Inconsistent local version gets uploaded</p>
    <p>Fails to synchronize local changes</p>
    <p>YES: occurred NO: did not occur N/A: no result Erratic behaviors</p>
  </div>
  <div class="page">
    <p>Crash Inconsistency  Results</p>
    <p>FS Service Upload</p>
    <p>Local Version Download</p>
    <p>Cloud Version Out of Sync</p>
    <p>ext4 (data) or</p>
    <p>ZFS</p>
    <p>Dropbox YES NO NO</p>
    <p>ownCloud YES YES NO</p>
    <p>Seafile YES NO NO</p>
    <p>Local version is always consistent</p>
    <p>May violate causal consistency</p>
    <p>YES: occurred NO: did not occur N/A: no result</p>
  </div>
  <div class="page">
    <p>Crash Inconsistency  Lessons</p>
    <p>Where do synchronization services fail?  Depend on their own metadata tracking</p>
    <p>Inconsistent with file system metadata upon crash</p>
    <p>Where do file systems fail?  Metadata journaling cannot provide data consistency</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation  Data Corruption</p>
    <p>Crash Inconsistency</p>
    <p>Causal Inconsistency</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Causal Inconsistency  Method</p>
    <p>Write a series of files in a specified order</p>
    <p>See if these files are synchronized in correct order</p>
    <p>Local Cloud</p>
    <p>a</p>
    <p>b</p>
    <p>c</p>
  </div>
  <div class="page">
    <p>Causal Inconsistency  Results</p>
    <p>The causal ordering can be violated in all three services on both ZFS and ext4</p>
    <p>May not directly use data on cloud for recovery</p>
    <p>Cloud</p>
    <p>a</p>
    <p>b</p>
    <p>c</p>
    <p>Local</p>
  </div>
  <div class="page">
    <p>Causal Inconsistency  Lessons</p>
    <p>Where do synchronization services fail?  Synchronize files out of order</p>
    <p>Where do file systems fail?  No efficient mechanism to provide a static and</p>
    <p>consistent view to sync services</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Both file systems and sync services are responsible for these failures  Many file systems lack strong reliability mechanisms</p>
    <p>What sync clients see is different from what local file systems see</p>
    <p>file system state correct state</p>
    <p>cloud state file system state</p>
    <p>cloud state file system state correct state</p>
  </div>
  <div class="page">
    <p>Summary (cont.)</p>
    <p>Not all problems can be avoided by switching to advanced file systems</p>
    <p>No automatic recovery with cloud data</p>
    <p>File System Corruption Detection</p>
    <p>Crash Consistency</p>
    <p>Causal Consistency</p>
    <p>Recovery using Cloud</p>
    <p>ext4 (metadata)</p>
    <p>ext4 (data)</p>
    <p>ZFS</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Design and Implementation  ViewBox Overview</p>
    <p>Local Detection &amp; Cloud-aided Recovery</p>
    <p>View-based Synchronization</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>ViewBox Overview</p>
    <p>Local detection  No corruption/inconsistency is spread</p>
    <p>Cloud-aided Recovery  Restore file system to correct state upon failure</p>
    <p>View-based Synchronization  Present file systems view to sync service</p>
    <p>Basis for consistency and correct recovery</p>
    <p>ext4-cksum</p>
    <p>View Manager</p>
    <p>Cloud Helper</p>
  </div>
  <div class="page">
    <p>Dropbox Client</p>
    <p>File System</p>
    <p>Dropbox Architecture</p>
    <p>Local Cloud</p>
    <p>inotify</p>
  </div>
  <div class="page">
    <p>Dropbox Client</p>
    <p>inotify File System</p>
    <p>file 1 modified</p>
    <p>Dropbox Architecture</p>
    <p>Local Cloud</p>
    <p>File Versioning</p>
  </div>
  <div class="page">
    <p>Dropbox Client</p>
    <p>File System</p>
    <p>Dropbox Architecture</p>
    <p>Local Cloud</p>
    <p>inotify</p>
    <p>Other Applications</p>
    <p>Dropbox client sees the same file system state as other applications</p>
  </div>
  <div class="page">
    <p>File Systemext4-cksum</p>
    <p>ViewBox Architecture</p>
    <p>Local Cloud</p>
    <p>inotify</p>
    <p>Dropbox Client</p>
    <p>View Manager</p>
    <p>FSs view</p>
    <p>Other Applications</p>
    <p>ViewBox presents FSs view to Dropbox client</p>
    <p>Other applications view remains the same</p>
    <p>ext4-cksum is dedicated to the entire sync folder</p>
  </div>
  <div class="page">
    <p>Dropbox Client</p>
    <p>ext4-cksum</p>
    <p>FSs view1 2</p>
    <p>inotify</p>
    <p>View Manager</p>
    <p>file 1 modified</p>
    <p>file 2 modified</p>
    <p>ViewBox Architecture</p>
    <p>Local Cloud</p>
    <p>File-system Snapshot</p>
  </div>
  <div class="page">
    <p>ext4-cksum</p>
    <p>FSs view</p>
    <p>Cloud Helper</p>
    <p>ViewBox Architecture</p>
    <p>Local Cloud</p>
    <p>inotify</p>
    <p>Dropbox Client</p>
    <p>View Manager</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Design and Implementation  ViewBox Overview</p>
    <p>Local Detection &amp; Cloud-aided Recovery</p>
    <p>View-based Synchronization</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>ext4-cksum  Local Detection</p>
    <p>Checksum region  Pre-allocated space (~0.1% overhead)</p>
    <p>32-bit CRC checksum per 4KB block</p>
    <p>128KB checksum region for a 128MB block group</p>
    <p>Each checksum maps to a data block in the block group</p>
    <p>Detect data corruption &amp; inconsistency  More details in the paper</p>
    <p>Superblock Group</p>
    <p>Descriptors Block</p>
    <p>Bitmap Inode</p>
    <p>Bitmap Inode Table</p>
    <p>Checksum Region</p>
    <p>Data Blocks</p>
  </div>
  <div class="page">
    <p>Cloud Helper  Cloud-aided Recovery</p>
    <p>A user-level daemon  Talks to local FS through ioctl</p>
    <p>Communicates with the server through web API</p>
    <p>Upon data corruption  Fetches correct block from cloud</p>
    <p>After crash, two types of recovery  Recovers inconsistent files</p>
    <p>Rolls back entire file system to the latest synced view</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Design and Implementation  ViewBox Overview</p>
    <p>Local Detection &amp; Cloud-aided Recovery</p>
    <p>View-based Synchronization</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>View Manager  View-based Sync</p>
    <p>Create file system views</p>
    <p>Upload views to cloud through sync client</p>
    <p>Challenge 1 - How to provide consistency?  ext4-cksum still runs in ordered mode  Cloud journaling</p>
    <p>Challenge 2 - How to create views efficiently?  No support from ext4-cksum  Incremental snapshotting</p>
  </div>
  <div class="page">
    <p>Challenge 1: How to Guarantee Consistency?</p>
    <p>Cloud journaling  Treat cloud storage as external journal  Synchronize local changes to cloud at FS epochs</p>
    <p>i.e., when ext4-cksum performs a journal commit</p>
    <p>Three types of views  Active view (local) =&gt; Current FS state  Frozen view (local) =&gt; Last FS snapshot in memory  Synced views (on cloud) =&gt; Previously uploaded views</p>
    <p>Roll back to the latest synced view upon failure</p>
  </div>
  <div class="page">
    <p>Cloud Journaling Example</p>
    <p>E0 E1 E2 E3</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View 5</p>
    <p>FS Epoch</p>
  </div>
  <div class="page">
    <p>Cloud Journaling Example</p>
    <p>E0 E1 E2 E3</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
  </div>
  <div class="page">
    <p>Cloud Journaling Example</p>
    <p>E0 E1 E2 E3</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>Frozen view 5 has been uploaded completely</p>
    <p>Cannot freeze view 6 at this time</p>
  </div>
  <div class="page">
    <p>Cloud Journaling Example</p>
    <p>E0 E1 E2 E3</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>Create a new frozen view  after the previous frozen view is synchronized  and when FS reaches an epoch</p>
  </div>
  <div class="page">
    <p>Cloud Journaling Example</p>
    <p>E0 E1 E2 E3</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>Upon crash  Roll back to from cloud</p>
  </div>
  <div class="page">
    <p>Server-side Changes</p>
    <p>Single-client scenario  Always one-direction synchronization (client to cloud)</p>
    <p>No server-side changes are necessary</p>
    <p>ViewBox + Dropbox (unmodified)</p>
    <p>Multi-client scenario  Server cannot propagate a partially-uploaded view</p>
    <p>Client must handle conflicts carefully</p>
    <p>ViewBox + Seafile (open-source, modified)</p>
  </div>
  <div class="page">
    <p>Challenge 2: How to Efficiently Freeze a View?</p>
    <p>A frozen view is short-lived and kept only in memory</p>
    <p>Requirements</p>
    <p>No changes to FSs on-disk structures</p>
    <p>No delay to on-going FS operations</p>
    <p>Minimal memory overhead</p>
    <p>Incremental snapshotting</p>
    <p>Decouple namespace and data</p>
  </div>
  <div class="page">
    <p>Incremental Snapshotting Example</p>
    <p>E0</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>E1 E2</p>
    <p>Maintain last frozen view 4 in memory  Only namespace is preserved</p>
  </div>
  <div class="page">
    <p>changed file</p>
    <p>namespace</p>
    <p>Incremental Snapshotting Example</p>
    <p>E0</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>Track updates in local FS through active view 5  Log namespace changes and data changes in memory</p>
    <p>E1 E2</p>
  </div>
  <div class="page">
    <p>changed file</p>
    <p>namespace</p>
    <p>Incremental Snapshotting Example</p>
    <p>E0</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>Freeze current active view 5  Apply namespace changes to last frozen view 4</p>
    <p>File data is still kept in local FS, but marked COW</p>
    <p>E1 E2</p>
  </div>
  <div class="page">
    <p>Incremental Snapshotting Example</p>
    <p>E0</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>At the same time, active view 6 starts immediately  On-going FS operations are not interrupted</p>
    <p>COWed data is copied over to frozen view 5 if necessary</p>
    <p>E1 E2</p>
    <p>namespace</p>
    <p>changed file</p>
    <p>namespace</p>
  </div>
  <div class="page">
    <p>Incremental Snapshotting Example</p>
    <p>E0</p>
    <p>Synced Views</p>
    <p>Frozen View</p>
    <p>Active View</p>
    <p>FS Epoch</p>
    <p>Upload frozen view 5  Re-generate inotify events</p>
    <p>Trick sync client to upload changes from frozen view 5</p>
    <p>E1 E2</p>
    <p>namespace</p>
    <p>changed file</p>
    <p>namespace</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Motivation</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Questions to answer  Can ViewBox offer integrity, consistency, and recoverability?</p>
    <p>What is the overhead of ViewBox during user workloads?</p>
    <p>Setup (for both server and client machines)  3.3GHz Intel Quad Core CPU, 16 GB memory</p>
    <p>1TB Hitachi hard drive</p>
    <p>Linux kernel 3.6.11 (64-bit), ~7000 LOC added/modified</p>
    <p>Dropbox client 1.6.0</p>
    <p>Seafile client and server 1.8.0</p>
  </div>
  <div class="page">
    <p>Reliability  Data Corruption</p>
    <p>Crash consistency</p>
    <p>Causal ordering is preserved</p>
    <p>Service Data</p>
    <p>Writes</p>
    <p>Metadata Changes</p>
    <p>mtime ctime atime</p>
    <p>ViewBox w/Dropbox D R D R D R D R</p>
    <p>ViewBox w/Seafile D R D R D R D R</p>
    <p>Service Upload</p>
    <p>Local Ver. Download Cloud Ver.</p>
    <p>Out-of-sync (no sync)</p>
    <p>ViewBox w/Dropbox NO YES NO</p>
    <p>ViewBox w/Seafile NO YES NO</p>
    <p>L: Local corruption G: Global corruption D: Detected R: Recovered</p>
    <p>YES: occurred NO: did not occur</p>
  </div>
  <div class="page">
    <p>Performance - Photo Viewing</p>
    <p>Dropbox Seafile</p>
    <p>R u</p>
    <p>n ti</p>
    <p>m e</p>
    <p>( se</p>
    <p>c)</p>
    <p>ext4 ViewBox</p>
    <p>iphoto_view from iBench [Harter2011]</p>
    <p>Sequentially view 400 photos</p>
    <p>Read-dominant</p>
    <p>Runtime  Time taken to finish the workload</p>
    <p>ViewBox has &lt;5% overhead</p>
    <p>Memory overhead  &lt; 20MB</p>
  </div>
  <div class="page">
    <p>Performance - Photo Viewing</p>
    <p>Dropbox Seafile</p>
    <p>Sy n</p>
    <p>c ti</p>
    <p>m e</p>
    <p>( se</p>
    <p>c)</p>
    <p>ext4 ViewBox</p>
    <p>Sync time  Time taken to finish synchronizing</p>
    <p>Huge increase in sync time with ViewBox + Dropbox</p>
    <p>View metadata for Dropbox  A list of {pathname, version</p>
    <p>number}  Remote walk ~1200 dirs (~1200</p>
    <p>RTT) due to lack of proper server support</p>
    <p>View metadata for Seafile  Its internal commit ID</p>
  </div>
  <div class="page">
    <p>Performance - Photo Editing</p>
    <p>iphoto_edit from iBench [Harter2011]  Sequentially edit 400 photos</p>
    <p>Reads:Writes = 7:3</p>
    <p>30% reduction in sync time with ViewBox + Seafile</p>
    <p>Reduced interference from foreground update  Original Seafile may delay</p>
    <p>uploading</p>
    <p>ViewBox keeps uploading changes from frozen views</p>
    <p>Dropbox Seafile</p>
    <p>Sy n</p>
    <p>c ti</p>
    <p>m e</p>
    <p>( se</p>
    <p>c)</p>
    <p>ext4 ViewBox</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Problem: Cloud storage services and file systems fail to protect data</p>
    <p>Many copies do NOT always make data safe</p>
    <p>Solution: ViewBox</p>
    <p>Enhance local file systems with data checksumming</p>
    <p>Present file systems view to sync service</p>
    <p>Tighter integration =&gt; more than reliability? 2/18/2014 61</p>
    <p>cloud state file system state correct state</p>
    <p>cloud state file system state correct state= =</p>
  </div>
  <div class="page">
    <p>Thanks! Questions?</p>
    <p>Advanced Systems Lab (ADSL)</p>
    <p>University of Wisconsin-Madison</p>
    <p>http://www.cs.wisc.edu/adsl</p>
    <p>Wisconsin Institute on Software-defined Datacenters in Madison</p>
    <p>http://wisdom.cs.wisc.edu/</p>
    <p>ViewBox: Integrating Local File Systems with Cloud Storage Services</p>
  </div>
</Presentation>
