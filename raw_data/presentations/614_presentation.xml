<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimal Capacity Sharing of Networks with Multiple Overlays</p>
    <p>Zheng Ma, Jiang Chen, Yang Richard Yang and Arvind Krishnamurthy</p>
    <p>Yale University University of Washington</p>
    <p>{zhengma,criver,yry}@cs.yale.edu {arvind}@cs.washington.edu</p>
    <p>Presented by Zheng Ma Jun 19, 2006</p>
  </div>
  <div class="page">
    <p>Introduction  Overlay networks are becoming widely deployed:</p>
    <p>P2P applications: e.g., BitTorrent, PPlive  VoIP applications: e.g., Skype  Testbeds: e.g., Planetlab, Emulab</p>
    <p>http://www.cachelogic.com</p>
  </div>
  <div class="page">
    <p>Example of Overlays</p>
    <p>The overlay O1 is trying to find the max flow from node 1 to node 5. There is a TCP flow from node 2 to node 5, which could be viewed as an overlay with only 1 link.</p>
    <p>How to model their behavior when they share the network resource?</p>
    <p>Topology of Overlay O1</p>
  </div>
  <div class="page">
    <p>State of Art: Resource Allocation of Multiple Overlays</p>
    <p>No congestion control  Network collapse  Using UDP to probe available bandwidth is possible but the</p>
    <p>packets may be dropped by the network if you dont react to the network feedback correctly.</p>
    <p>ISP will limit the rate.</p>
    <p>Use TCP at each overlay link  e.g. Skype and BitTorrent use TCP on each overlay link with</p>
    <p>the hope that it will share network resource fairly and efficiently.</p>
    <p>If the flow rate on each link is controlled by TCP without coordinating with other links of the same overlay application, we refer to such a scheme as flow-level rate control.</p>
    <p>Is this enough? NO!</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Introduction  Problem statement  Design of distributed algorithm for capacity</p>
    <p>sharing of multiple overlays  Case study: overlay maximum flow problem  Evaluation: simulation results  Related works and conclusion</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Network model:  Physical : G = (V,L,C), node set V, link set L, with capacity C={ Cl }.  Overlay: Gi = (Hi ,Ei) : node set Hi overlay link set Ei  Each overlay link has rate xe -- control variables.  Mapping between overlay link and a physical path:</p>
    <p>Ale=1 if e goes link l in physical network, otherwise 0.</p>
    <p>So the capacity constraint at physical network is  Each overlay may have application constraints, e.g., flow</p>
    <p>conservation constraint  Fhe=1 if e=(h,v), Fhe=-1 if e=(u,h), otherwise Fhe=0</p>
    <p>Utility function:  Each overlay has a utility function Ui which is strictly concave.  The input to Ui is an aggregation function fi applied to</p>
    <p>fi is differentiable, application-specified. For overlay maximal flow problem:</p>
    <p>The overlay i is trying to maximize:</p>
    <p>CAx</p>
    <p>iei Eexx  },{</p>
    <p>))(( iii xfU</p>
    <p>)(</p>
    <p>)( DINe</p>
    <p>eii xxf</p>
  </div>
  <div class="page">
    <p>System Problem</p>
    <p>Capacity sharing of multiple overlays  If the system design objective is to maximize the sum of the</p>
    <p>utilities of all overlays, we can write down the system optimization problem as:</p>
    <p>When all overlays are single end-to-end flows, the above formulation is reduced to that of Frank Kellys framework.</p>
    <p>Reminder: we call a rate control mechanism in overlay network flowlevel rate control if each control variable xe is controlled by TCP or other transport protocol without coordinating within the overlay.</p>
    <p>A rate control mechanism is overlay flows control if the overlay will coordinate the control of all xe.</p>
    <p>.,0</p>
    <p>))(( 1</p>
    <p>e</p>
    <p>xfU n</p>
    <p>i iii</p>
    <p>e xover</p>
    <p>C Axtosubject</p>
    <p>maximize :P</p>
  </div>
  <div class="page">
    <p>Example 1: Unfair Sharing with TCP Using Only Flow-level Rate Control</p>
    <p>)log())((</p>
    <p>)log())((</p>
    <p>)(</p>
    <p>)(</p>
    <p>),,,(</p>
    <p>xxfU</p>
    <p>xxxfU</p>
    <p>xxf</p>
    <p>xxxf</p>
    <p>xxx</p>
    <p>xxxxxx</p>
    <p>tcptcptcp</p>
    <p>tcptcp</p>
    <p>tcp</p>
    <p>The system optimal is x1=(1,0,1,0,1), x2=1,total utility</p>
    <p>With only flow-level rate control:</p>
    <p>x1=(1,1/3,2/3,1/3,2/3), x2=1/3, total utility -0.48</p>
    <p>Topology of Overlay O1</p>
  </div>
  <div class="page">
    <p>Example 2: Sub-optimal Capacity Sharing Among Multiple Overlays</p>
    <p>))((</p>
    <p>))((</p>
    <p>)(</p>
    <p>)(</p>
    <p>),,,,(</p>
    <p>),,,,(</p>
    <p>xxfU</p>
    <p>xxxfU</p>
    <p>xxf</p>
    <p>xxxf</p>
    <p>xxxxxx</p>
    <p>xxxxxx</p>
    <p>The system optimal is x1=(1,1,0,1,0), x2=(0,1,0,1,1), total</p>
    <p>utility 2</p>
    <p>With only flow-level rate control:</p>
    <p>x1=(1/3,0,1/3,0,1/3), x2=(1/3,1/3,1/3,1/3,2/3), total</p>
    <p>utility 1</p>
    <p>Overlay O1</p>
    <p>Overlay O2</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>The traditional flow-level rate control is not enough for resource allocation among multiple overlays. It may reach sub-optimal equilibrium.</p>
    <p>We propose overlay flows control to coordinate the rate flow to solve the problem by controlling flows in an overlay network coordinatively.</p>
    <p>Key Idea: to solve the overlay utility maximization system problem in a distributed way. We dont require the knowledge of the underlay networks (i.e. A and C in the physical network). Instead we use a try and back off approach.</p>
    <p>.,0</p>
    <p>))(( 1</p>
    <p>e</p>
    <p>xfU n</p>
    <p>i iii</p>
    <p>e xover</p>
    <p>C Axtosubject</p>
    <p>maximize :P</p>
  </div>
  <div class="page">
    <p>Algorithmic Design  in P is not strictly concave.  We use Proximal Minimization method to make the objective</p>
    <p>function strictly concave.</p>
    <p>))((xfU</p>
    <p>B={be} is the introduced auxiliary variables. In P1, it is fixed.  Iterative process: Solve P1 and obtain optimal solution X, set B=X, and solve P1</p>
    <p>again.</p>
    <p>.,0</p>
    <p>)()( 2</p>
    <p>e</p>
    <p>xbx k</p>
    <p>xfU n</p>
    <p>i iiee</p>
    <p>n</p>
    <p>i Ee</p>
    <p>n</p>
    <p>i iii</p>
    <p>i</p>
    <p>e x over</p>
    <p>C Ax tosubject</p>
    <p>maximize :P1</p>
    <p>))(( iii xfU</p>
  </div>
  <div class="page">
    <p>A Price Based Approach</p>
    <p>P1 can be solved by a price based approach.  Lagrangian form:</p>
    <p>Ll ll</p>
    <p>Ee eee</p>
    <p>n</p>
    <p>i ii</p>
    <p>n</p>
    <p>i ii</p>
    <p>cpqxx</p>
    <p>xFcxApxpxL</p>
    <p>i</p>
    <p>))()((</p>
    <p>)()()(),,(</p>
    <p>Ll</p>
    <p>llee pAqPath Price</p>
    <p>Link Price</p>
    <p>Maximiz er</p>
    <p>Application price</p>
    <p>Hh</p>
    <p>hehe F</p>
    <p>Node Price</p>
  </div>
  <div class="page">
    <p>Case Study: Overlay Maximum Flow</p>
    <p>Rate adaptation and price calculation  Link Price Update, we can use queuing delay as an</p>
    <p>approximation</p>
    <p>Node Price Update</p>
    <p>Overlay Flows Rate Adaptation</p>
    <p>Convergence  We used Lyapunov stability theory to prove the</p>
    <p>algorithm is globally asymptotically stable.</p>
    <p>),( ),(</p>
    <p>)()()()1( hue vhe</p>
    <p>eehh txtxtth</p>
    <p>))()(())((</p>
    <p>kx</p>
    <p>f txfUtxktxe eeee</p>
    <p>e</p>
    <p>i iieee i</p>
    <p>)(</p>
    <p>)()()1( lEe</p>
    <p>lell ctxtptpl</p>
  </div>
  <div class="page">
    <p>Evaluation: Convergence</p>
    <p>Simulation setup:  BRITE topology generator. All experiments showed a similar</p>
    <p>result.  Use the algorithm for overlay maximum flow.  Results for example 1 and example 2.</p>
    <p>Convergence results</p>
    <p>Overlay 1</p>
    <p>TCP flow</p>
    <p>Overlay 1</p>
    <p>Overlay 2</p>
  </div>
  <div class="page">
    <p>Evaluation: Dynamics</p>
    <p>Simulation setup:  In example 1, add more TCP flows between node 2 and node</p>
    <p>fair share quickly.  One could consider our algorithm as a generalization of</p>
    <p>protocol compliance requirements: e.g. TCP friendliness.</p>
    <p>TCP flow</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Coexistence of multiple overlays (focusing on cost or delay)  Selfish routing effects (Qiu et al. SIGCOMM03).  Interaction of multiple overlay routing (Jiang et al.</p>
    <p>Performance05).  Can overlays inadvertently step on each other?</p>
    <p>(Keralapura et al. ICNP05).  Overlay networks</p>
    <p>Overlay networks with linear capacity constraints. (Zhu et al. IWQoS05)</p>
    <p>Transport protocol design  Fast TCP: motivation, architecture, algorithms,</p>
    <p>performance. (Wei et al. TON07)</p>
  </div>
  <div class="page">
    <p>Conclusion and Future Work</p>
    <p>Our contributions:  Define the problem of optimal capacity sharing of multiple overlays.  Show that flow-level rate control cannot achieve system-wide</p>
    <p>optimality.  Develop a framework to use overlay flows rate control to solve the</p>
    <p>problem in distributed way and show its convergence and effectiveness.</p>
    <p>The protocol can be implemented by measuring end-to-end queuing delay at overlay level. This is a try-band-back-off approach similar to TCP Vegas and FAST TCP.</p>
    <p>Future work:  Convergence of the algorithm in other setups.  Utility function design for overlay networks, implementing different</p>
    <p>types of fairness among overlays.  Consider other popular overlay applications like network coded</p>
    <p>overlay multicast.</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Thanks! Questions?</p>
    <p>More information:  Google zheng ma</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
    <p>Non-triviality of overlay maximum flow algorithm</p>
    <p>Overlay maximum flow problem is non-trivial even for a single overlay. i.e. we cant use traditional max flow algorithm by measuring available bandwidth on overlay level.</p>
    <p>In above topology, each link is overlay link, all underlay physical links has unit capacity. Suppose (2,4), (4,5) and (4,6) share a physical link. The max flow algorithm will try to push 1 unit traffic at each overlay link. (2,4) (4,5) and (4,6) will get 1/3 each, no more bandwidth available, no augmenting path. The max flow rate is 2/3. However, by sending 1 unit traffic on (1,3)(3,4)(4,6)(6,7), we get max flow 1.</p>
  </div>
</Presentation>
