<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HotSnap: A Hot Distributed Snapshot System for Virtual Machine Cluster</p>
    <p>Presented by: Dr Jianxin Li</p>
    <p>Lei Cui, Bo Li, Yangyang Zhang and Jianxin Li</p>
    <p>ACT lab, Beihang University</p>
  </div>
  <div class="page">
    <p>Outline  Background  Problems  Solution &amp; Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>request Cloud</p>
    <p>VM ClusterEnd users</p>
    <p>Background  Virtual Machine</p>
    <p>Isolation, encapsulation, multiinstance  Key technique supporting cloud computing  Limited capacity in CPU, memory, storage</p>
    <p>Virtual Machine Cluster  Multiple VMs are connected together to support powerful capacity  Scientific computing, distributed database, web service, etc</p>
  </div>
  <div class="page">
    <p>Background  Failure becomes a norm nowadays</p>
    <p>Computer node, Annual failure rate(AFR) is 20~60% per processor [J. Physics07]  Storage node, AFR is 2%~4%, some even 3.9%~8.3% [OSDI10]  Network node, AFR is 1.1%~11.4% [SIGCOMM11]</p>
    <p>VM Skills  Migration</p>
    <p>Tolerate computer node failure</p>
    <p>vLockstep  Tolerate computer node failure</p>
    <p>Snapshot  Tolerate computer node and software failure</p>
    <p>Component Disk Node Rack</p>
    <p>MTTF 1050years 4.3months 10.2years</p>
    <p>snapshot</p>
    <p>Google Cluster</p>
  </div>
  <div class="page">
    <p>Background  Failure becomes a norm nowadays</p>
    <p>Computer node, Annual failure rate(AFR) is 20~60% per processor [J. Physics07]  Storage node, AFR is 2%~4%, some even 3.9%~8.3% [OSDI10]  Network node, AFR is 1.1%~11.4% [SIGCOMM11]</p>
    <p>VM Skills  Migration</p>
    <p>Tolerate computer node failure</p>
    <p>vLockstep  Tolerate computer node failure</p>
    <p>Snapshot  Tolerate computer node and software failure</p>
    <p>Component Disk Node Rack</p>
    <p>MTTF 1050years 4.3months 10.2years</p>
    <p>snapshot</p>
    <p>VMC snapshot and rollback occurs frequently to survive from the failures to complete the long time task running in VMC</p>
    <p>Google Cluster</p>
  </div>
  <div class="page">
    <p>Outline  Background  Problems  Solution &amp; Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Problems  VMC snapshot</p>
    <p>Single VM snapshot  Save memory, disk, CPU and other devices state.</p>
    <p>Consistency protocol  Global virtual time  m3 is sent from p2 after t1 to p3 before t1, violating consistency</p>
    <p>m3 should be dropped to keep consistency, but this will lead to TCPbackoff 7</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>m1</p>
    <p>m3</p>
    <p>m4</p>
    <p>inconsistency</p>
    <p>m2</p>
    <p>t1</p>
  </div>
  <div class="page">
    <p>Problems  Analysis</p>
    <p>Current snapshot skill  Stopandcopy  Precopy</p>
    <p>running pre-copy</p>
    <p>iterate iterate</p>
    <p>stop running</p>
    <p>final copy</p>
    <p>Memory snapshot Disk snapshot</p>
    <p>Pre-copy based single VM snapshot</p>
    <p>TCPbackoff duration is related to downtime and difference between VMs snapshot completion times</p>
    <p>Pre-copy based VMC snapshot</p>
    <p>VM1 VM2</p>
    <p>duration</p>
    <p>TCP backoff</p>
  </div>
  <div class="page">
    <p>Problems  Experimental result, a sample</p>
    <p>16 2G memory VMs. Distcc to compile the Linux kernel 2.6.325  VM9 is Distcc client, TCPbackoff of VM9 and VM1 is 12.7s</p>
  </div>
  <div class="page">
    <p>Problems  Experimental result, a sample</p>
    <p>16 2G memory VMs. Distcc to compile the Linux kernel 2.6.325  VM9 is Distcc client, TCPbackoff of VM9 and VM1 is 12.7s</p>
    <p>Minimize the downtime of single VM snapshot</p>
    <p>Minimize the difference of snapshot completion times between communicating VMs</p>
  </div>
  <div class="page">
    <p>Outline  Background  Problems  Solution &amp; Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Key Issues in Precopy method  The downtime of single VM snapshot</p>
    <p>Index tree in disk snapshot, several seconds  Final copy in memory snapshot, hundreds to thousands milliseconds</p>
    <p>The difference of snapshot completion times  Iterate copy the memory state. Workload impact.  Available IO bandwidth to save memory state</p>
    <p>HotSnap solutions  Single VM snapshot</p>
    <p>Copyonwrite(COW) based memory snapshot  Redirectonwrite (ROW) based disk snapshot</p>
    <p>Consistency protocol  Suitable to virtualized environments, keep global consistency</p>
    <p>Solutions</p>
  </div>
  <div class="page">
    <p>Pre-copy vs. HotSnap</p>
    <p>Stop VM at the end  Iterate copy the memory state  Copyonwrite disk snapshot  Longer downtime and duration</p>
    <p>running pre-copy</p>
    <p>iterate iterate</p>
    <p>stop running</p>
    <p>Memory snapshot Disk snapshot</p>
    <p>Pre-copy based single VM snapshot</p>
    <p>Stop VM first  Copyonwrite memory snapshot  Redirectonwrite disk snapshot  Short downtime and duration</p>
    <p>running stop</p>
    <p>running</p>
    <p>Memory snapshotDisk snapshot</p>
    <p>memory</p>
    <p>HotSnap for single VM</p>
    <p>Pre-copy method HotSnap method</p>
  </div>
  <div class="page">
    <p>HotSnap analysis  Stop VM first, record some metadata, write-protect the memory,</p>
    <p>resume the VM, and save the state during execution  Light-weight operations</p>
    <p>Solutions</p>
    <p>TCPbackoff duration is mainly related to downtime</p>
    <p>HotSnap based VMC snapshot</p>
    <p>VM1 VM2</p>
    <p>duration</p>
    <p>TCP backoff</p>
  </div>
  <div class="page">
    <p>HotSnap skills  memory snapshot  COW based memory snapshot</p>
    <p>Only involve saving CPU, network, and devices state, and write-protecting the memory</p>
    <p>Intercept DMA write operations  Uniform view for bitmap and snapshot file</p>
    <p>Snapshot Manager</p>
    <p>Write Protect Controller</p>
    <p>Write Protect</p>
    <p>DMA Interceptor</p>
    <p>Background Thread</p>
    <p>Page Fault Trigger</p>
    <p>Bitmap Snapshot file</p>
    <p>KVM kernel space Guest Mode</p>
    <p>Guest Write</p>
    <p>DMA Write</p>
    <p>Guest Handler</p>
    <p>Guest memory</p>
    <p>QEMU user space</p>
  </div>
  <div class="page">
    <p>HotSnap skills  memory snapshot  COW based memory snapshot</p>
    <p>Only involve saving CPU, network, and devices state, and write-protecting the memory</p>
    <p>Intercept DMA write operations  Uniform view for bitmap and snapshot file</p>
    <p>Snapshot Manager</p>
    <p>Write Protect Controller</p>
    <p>Write Protect</p>
    <p>DMA Interceptor</p>
    <p>Background Thread</p>
    <p>Page Fault Trigger</p>
    <p>Bitmap Snapshot file</p>
    <p>KVM kernel space Guest Mode</p>
    <p>Guest Write</p>
    <p>DMA Write</p>
    <p>Guest Handler</p>
    <p>Guest memory</p>
    <p>QEMU user space</p>
  </div>
  <div class="page">
    <p>HotSnap skills  memory snapshot  COW based memory snapshot</p>
    <p>Only involve saving CPU, network, and devices state, and write-protecting the memory</p>
    <p>Intercept DMA write operations  Uniform view for bitmap and snapshot file</p>
    <p>Snapshot Manager</p>
    <p>Write Protect Controller</p>
    <p>Write Protect</p>
    <p>DMA Interceptor</p>
    <p>Background Thread</p>
    <p>Page Fault Trigger</p>
    <p>Bitmap Snapshot file check save</p>
    <p>QEMU user space KVM kernel space Guest Mode</p>
    <p>Guest Write</p>
    <p>DMA Write</p>
    <p>Guest Handler</p>
    <p>Guest memory</p>
  </div>
  <div class="page">
    <p>HotSnap skills  memory snapshot  COW based memory snapshot</p>
    <p>Only involve saving CPU, network, and devices state, and write-protecting the memory</p>
    <p>Intercept DMA write operations  Uniform view for bitmap and snapshot file</p>
    <p>Snapshot Manager</p>
    <p>Write Protect Controller</p>
    <p>Write Protect</p>
    <p>DMA Interceptor</p>
    <p>Background Thread</p>
    <p>Page Fault Trigger</p>
    <p>Bitmap Snapshot file check save</p>
    <p>QEMU user space KVM kernel space Guest Mode</p>
    <p>Guest Write</p>
    <p>DMA Write</p>
    <p>Guest Handler</p>
    <p>Guest memory</p>
  </div>
  <div class="page">
    <p>HotSnap skills  memory snapshot  COW based memory snapshot</p>
    <p>Only involve saving CPU, network, and devices state, and write-protecting the memory</p>
    <p>Intercept DMA write operations  Uniform view for bitmap and snapshot file</p>
    <p>Snapshot Manager</p>
    <p>Write Protect Controller</p>
    <p>Write Protect</p>
    <p>DMA Interceptor</p>
    <p>Background Thread</p>
    <p>Page Fault Trigger</p>
    <p>Bitmap Snapshot file check save</p>
    <p>QEMU user space KVM kernel space Guest Mode</p>
    <p>Guest Write</p>
    <p>DMA Write</p>
    <p>Guest Handler</p>
    <p>Guest memory</p>
  </div>
  <div class="page">
    <p>HotSnap skills  disk snapshot  ROW based disk snapshot</p>
    <p>Only create one bitmap and one null disk image  Lightweight metadata based on bitmap  Redirect on write</p>
    <p>Basic info snapshot1</p>
    <p>Current status</p>
  </div>
  <div class="page">
    <p>HotSnap skills  disk snapshot  ROW based disk snapshot</p>
    <p>Only create one bitmap and one null disk image  Lightweight metadata based on bitmap  Redirect on write</p>
    <p>Basic info snapshot1</p>
    <p>Current status</p>
    <p>snapshot2</p>
    <p>checkpoint</p>
  </div>
  <div class="page">
    <p>HotSnap skills  disk snapshot  ROW based disk snapshot</p>
    <p>Only create one bitmap and one null disk image  Lightweight metadata based on bitmap  Redirect on write</p>
    <p>Basic info snapshot1</p>
    <p>checkpoint Current status</p>
    <p>snapshot2</p>
    <p>write</p>
  </div>
  <div class="page">
    <p>HotSnap skills - Consistency protocol</p>
    <p>HotSnap based VMC snapshot</p>
    <p>VM Initiator</p>
    <p>VM peerVMC</p>
    <p>VM peer</p>
    <p>running stop running, but snapshoting</p>
    <p>Broadcast SNAPSHOT</p>
    <p>Recv red packet</p>
    <p>send red packet</p>
    <p>Peer stop over</p>
    <p>stop over</p>
    <p>create</p>
    <p>finish Peer snapshot over</p>
    <p>Coloring method  Set bit in m_cType in MAC header</p>
    <p>Protocol  One VM as initiator  Initiator broadcast SNAPSHOT to VMs  Peer VM create snapshot, if</p>
    <p>Receive SNAPSHOT  Receive red packet</p>
    <p>VM colors the packet with red flag after finishing snapshot</p>
    <p>After receiving red packet  If snapshot is over, continue to run  Else, create snapshot first, change VM</p>
    <p>state to red</p>
  </div>
  <div class="page">
    <p>HotSnap Architecture  Architecture</p>
    <p>VM snapshot  Memory Snapshot</p>
    <p>DMA Write Handler  Background Thread  Guest Write Handler</p>
    <p>Disk Snapshot</p>
    <p>Consistency protocol  VMC Snapshot Manager  VM Snapshot Manager  Packet Mediator</p>
  </div>
  <div class="page">
    <p>Outline  Background  Problems  Solution &amp; Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Experimental results  VM snapshot (2G memory)</p>
    <p>Duration: 60s in HotSnap VS. 50s in Pre-copy, related to snapshot size  Downtime: HotSnap is less than50ms, pre-copy is related to workload  Snapshot size: HotSnap snapshot size is same to memory sizePre-copy is</p>
    <p>much larger.</p>
    <p>Duration (s) Downtime(ms) Snapshot size(GBytes)</p>
    <p>benchmarks Precopy Hotsnap Precopy Hotsnap Precopy Hotsnap</p>
    <p>Idle 51.66 51.57 36.83 31.88 2.04 2.02</p>
    <p>Compilzation 61.11 51.96 381.72 34.16 2.38 2.02</p>
    <p>Matrix multiplication</p>
    <p>Memcached 69.43 54.72 150.85 33.80 2.41 2.02</p>
    <p>Dbench 60.76 50.18 79.36 39.36 2.17 2.02</p>
  </div>
  <div class="page">
    <p>Experimental results  VMC snapshot results</p>
    <p>16 2G VMs, 4 physical servers, Distcc to compile kernel  Start and end almost at the same time</p>
  </div>
  <div class="page">
    <p>TCP backoff  Average of difference of snapshot completion times between each two VMs  16 2G memory VMs, 4 physical servers</p>
    <p>Experimental results</p>
    <p>Different workloads Various VMC size</p>
    <p>Various memory size Various disk size 28</p>
  </div>
  <div class="page">
    <p>TCP backoff  Average of difference of snapshot completion times between each two VMs  16 2G memory VMs, 4 physical servers</p>
    <p>Experimental results</p>
    <p>Different workloads Various VMC size</p>
    <p>Various memory size Various disk size</p>
    <p>TCPbackoff duration in HotSnap is about 100200ms, and is regardless of workload, VMC size, VM configurations</p>
  </div>
  <div class="page">
    <p>Two VMs with different memory size  1G &amp; 4G has the largest TCP-backoff, 100s  Larger difference implies longer TCP-backoff duration for Pre-copy</p>
    <p>method. HotSnap is regardless of difference.</p>
    <p>Experimental results</p>
    <p>Memory impact on TCP-backoff 30</p>
  </div>
  <div class="page">
    <p>Performance impact  Kernel compilization</p>
    <p>Compared to pre-copy, HotSnap reduces 7%10% time.</p>
    <p>BitTorrent application  16 VMs, one VM as client, others as seeds  Compared to normal execution, download speed</p>
    <p>reduce 28%  Compared to pre-copy, HotSnap shows better</p>
    <p>performance when snapshot reaches over</p>
    <p>Experimental results</p>
    <p>Kernel complication</p>
    <p>BT download speed 31</p>
  </div>
  <div class="page">
    <p>Outline  Background  Problems  Solution &amp; Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusions  HotSnap</p>
    <p>Single VM snapshot  Minimize the downtime  Minimize the difference of snapshot completion times.</p>
    <p>Consistency protocol suitable to virtualized environments</p>
    <p>Experimental results  Single VM snapshot downtime &lt; 100ms  32 VMs, TCP-backoff duration &lt; 1s  TCP-backoff is regardless of workload, VMC size, VM configurations</p>
    <p>Future work  Evaluate HotSnap in real-world applications  Reduce the saved amount of VNC snapshot file further</p>
  </div>
  <div class="page">
    <p>Q&amp;A</p>
    <p>ACT lab, Beihang University {cuilei, libo, zhangyy, lijx}@act.buaa.edu.cn</p>
  </div>
</Presentation>
