<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AC-Key: Adaptive Caching for LSM-based Key-Value Stores Fenggang Wu, Ming-Hong Yang, Baoquan Zhang, David H.C. Du University of Minnesota, Twin Cities July 2020. USENIX ATC20</p>
  </div>
  <div class="page">
    <p>Key-Value Stores</p>
    <p>Key-value stores are popular.  web searching, social networks, e-commerce, etc.</p>
    <p>LSM-tree based Key-value stores (LSM-KVS) are widely used.</p>
  </div>
  <div class="page">
    <p>Storage</p>
    <p>DRAM</p>
    <p>KV</p>
    <p>batch write</p>
    <p>merge</p>
    <p>merge</p>
    <p>write-optimized  batch and write sequentially  never perform scattered in-place update</p>
    <p>LSM Tree -- Write</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level 3</p>
  </div>
  <div class="page">
    <p>Storage</p>
    <p>DRAM</p>
    <p>K LSM Tree -- Read Point Lookup</p>
    <p>Block:  sorted range of Key/Value pairs  basic I/O Unit (16KB)</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level 3</p>
    <p>Suffer from read performance issue  Potentially every level needs to be checked  Fetch whole block when only one key is queried</p>
  </div>
  <div class="page">
    <p>Storage</p>
    <p>DRAM</p>
    <p>LSM Tree -- ReadK1, K2 Range Query</p>
    <p>Result</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level 3</p>
    <p>merge</p>
    <p>Read performance issue: Both point lookup and range query will fetch many blocks for one query.</p>
  </div>
  <div class="page">
    <p>Storage</p>
    <p>DRAM</p>
    <p>Addressing Read Issue</p>
    <p>Cache Space</p>
    <p>One key contributes 20% of a servers requests Memcache [Atikoglu 2012]</p>
    <p>1% of the keys takes up 50% of total point lookup ZippyDB@Facebook [Cao, 2020]</p>
    <p>Range queries have hot ranges too [Cooper 2012, Gilad 2020]</p>
    <p>Can we use cache?</p>
    <p>Yes, workloads have hotspots!</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level 3</p>
  </div>
  <div class="page">
    <p>Storage</p>
    <p>DRAM</p>
    <p>Data have different sizes/level -&gt; different cache cost/benefit.  Distinct types of read: point lookup and range query.</p>
    <p>But popular caching schemes do NOT fit!!</p>
    <p>Cache Space</p>
    <p>Unique caching challenge in LSM-KVS</p>
    <p>Existing Solutions</p>
    <p>General caching schemes:  No special consideration about the cache</p>
    <p>cost/benefit in LSM-KVS.  Existing LSM-KVS caching:</p>
    <p>Favors only particular workload.  Not efficient for a different/dynamic workload.</p>
    <p>Yes, workloads have hotspots!</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Level 3</p>
    <p>Addressing Read Issue Can we use cache?</p>
  </div>
  <div class="page">
    <p>Block KV KP Point Range Adaptive</p>
    <p>LevelDB Yes No No Inefficient Supported Fix-sized</p>
    <p>RocksDB Yes Yes No Large Value inefficient Supported Fix-sized</p>
    <p>Cassandra No Yes Yes Efficient Not Supported Fix-sized</p>
    <p>AC-Key Yes Yes Yes Efficient Supported Adaptive-sized</p>
    <p>Key/Value</p>
    <p>Key/Value</p>
    <p>Key/Value</p>
    <p>Key/Value Key/P</p>
    <p>P</p>
    <p>Block KV KP Block: Range query</p>
    <p>KV: Point lookup (small/hot value)</p>
    <p>KP: Point lookup (large/warm value)</p>
    <p>Key challenge: adjust the sizes of different types of caches according to dynamic workloads</p>
    <p>Storage</p>
    <p>DRAM</p>
    <p>Block Cache</p>
    <p>KV Cache</p>
    <p>KP Cache</p>
    <p>Point Cache</p>
    <p>Different items can be cached Favorite workload</p>
  </div>
  <div class="page">
    <p>Cache Size Adjustment using Ghost Cache</p>
    <p>BlockPoint</p>
    <p>boundary</p>
    <p>Real Cache Ghost Cache</p>
    <p>BlockPoint</p>
    <p>boundary</p>
    <p>Block Ghost Cache Hit</p>
    <p>Point Ghost Cache Hit</p>
    <p>Ghost Cache  Store only metadata of evicted entries from the real cache  On ghost hit: Push boundary away to grow the real cache</p>
    <p>Finally reach to a dynamic equilibrium for a given workload.</p>
    <p>block block num</p>
  </div>
  <div class="page">
    <p>Point Cache Block Cache</p>
    <p>Block</p>
    <p>KV Cache KP Cache</p>
    <p>KPKV</p>
    <p>Upper Level</p>
    <p>Lower Level</p>
    <p>Real Cache Ghost Cache</p>
    <p>dynamic boundary</p>
    <p>AC-Key  Hierarchical Adaptive Caching</p>
    <p>Upper level Point Cache vs Block Cache  Lower level: KV Cache vs KP Cache</p>
  </div>
  <div class="page">
    <p>Other Solved Challenges</p>
    <p>Measure caching efficiency to consider different entry cost/benefit Special cached entry handling due to compaction and flush</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implement AC-Key based on RocksDB  Evaluate with various workloads and system settings</p>
    <p>For complete evaluation result: check out our paper</p>
  </div>
  <div class="page">
    <p>Q PS</p>
    <p>Range Query Ratio</p>
    <p>ac-key rocksdb pure-kv pure-kp offline</p>
    <p>pure-block-cache / industry</p>
    <p>all point-lookup workload all range-query workload</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Ratio</p>
    <p>Q PS</p>
    <p>KP Cache Ratio</p>
    <p>winner</p>
    <p>Q PS</p>
    <p>Operations (million)</p>
    <p>ac-key offline</p>
    <p>Si ze</p>
    <p>(K B</p>
    <p>) block kp kv</p>
    <p>Evaluating Adaptive Size pure range-query pure point-lookup</p>
    <p>competing scheme: offline  try different combinations  1/10 cache granularity  pick the winner  fixed-configuration</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>LSM-based key-value store is widely used Write-optimized; but has read performance issue.</p>
    <p>AC-Key: Adaptive caching for LSM-based key-value stores. Integrating all the KV, KP, Block cache components. Hierarchical size-adaptive design. Outperform industry solutions.</p>
  </div>
  <div class="page">
    <p>Thank you! Fenggang Wu wuxx0835@umn.edu</p>
  </div>
</Presentation>
