<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks</p>
    <p>Qi Alfred Chen, Zhiyun Qian, Z. Morley Mao University of Michigan, University of California - Riverside</p>
  </div>
  <div class="page">
    <p>Importance of GUI Security</p>
    <p>GUI content confidentiality and integrity are critical for end-to-end security  UI Spoofing in desktop/browsers1  Screenshot capture on Android without privilege2</p>
  </div>
  <div class="page">
    <p>Another Form of GUI Confidentiality Breach</p>
    <p>A weaker form  UI state an app is in (e.g., login state) without knowing the exact pixels of the screen</p>
    <p>Use UI state info for best timing</p>
    <p>Serious security implications!</p>
  </div>
  <div class="page">
    <p>Tracking UI state!</p>
    <p>Enabled Attack: UI State Hijacking</p>
    <p>Hijack sensitive UI state to steal private input</p>
    <p>Foreground :</p>
    <p>Background :</p>
    <p>UI State 1 UI State 2 UI State 3</p>
    <p>Wait for Login UI state</p>
    <p>Inject the phishing Login UI state!</p>
    <p>Exploit UI preemption</p>
    <p>No glitches as we disable the animation</p>
    <p>+ precise attack timing</p>
    <p>Steal user name and password!</p>
  </div>
  <div class="page">
    <p>UI State Hijacking Attack Demo</p>
    <p>Video demo: UI state hijacking attack steals your password in H&amp;R Block app</p>
  </div>
  <div class="page">
    <p>Other Enabled Attacks</p>
    <p>An enabled attack: camera peeking  Steal sensitive pictures taken in Android apps</p>
    <p>Breaks GUI confidentiality!  Monitor and analyze user behavior  Breaks GUI confidentiality!</p>
    <p>Enhance existing attacks in both stealthiness and effectiveness</p>
    <p>Steal!</p>
  </div>
  <div class="page">
    <p>UI State Leakage is Dangerous</p>
    <p>Lead to both GUI integrity and confidentiality breaches</p>
    <p>UI state information is not protected well  An unprivileged application can track another</p>
    <p>apps UI states in real time</p>
  </div>
  <div class="page">
    <p>UI State Inference Attack</p>
    <p>UI state: a mostly consistent UI at window level for certain functionality (e.g., log-in)  On Android: Activity (full-screen window)</p>
    <p>Also called Activity inference attack  An unprivileged app can infer the foreground Activity in real time</p>
    <p>Requires no permission</p>
  </div>
  <div class="page">
    <p>Underlying Causes</p>
    <p>Android GUI framework design leaks UI state changes through a publicly-accessible side channel  A newly-discovered shared-memory side channel  Affects nearly all popular OSes</p>
  </div>
  <div class="page">
    <p>A single bit of information</p>
    <p>Attack General Steps</p>
    <p>Activity transition detection</p>
    <p>Activity inference</p>
    <p>UI state hijacking</p>
    <p>Newly-discovered Shared-memory side channel</p>
    <p>Other side channels (e.g., CPU, network</p>
    <p>activity)</p>
    <p>UI state based attacks:</p>
    <p>Camera peeking</p>
  </div>
  <div class="page">
    <p>Shared-Memory Side Channel</p>
    <p>Finding: shared virtual memory size changes are correlated with Android window events</p>
    <p>Shared virtual memory size in public file</p>
    <p>/proc/pid/statm</p>
    <p>Proportional to window</p>
    <p>size</p>
    <p>Window pop-up</p>
    <p>Window close</p>
  </div>
  <div class="page">
    <p>Shared-Memory Side Channel</p>
    <p>Root cause for this correlation  Window manager design in Android</p>
    <p>For better UI drawing performance, Android uses shared memory as IPC</p>
    <p>The changed size is the off-screen buffer size</p>
    <p>The root cause is here</p>
    <p>Confirmed that shared memory is used in GUI design for many OSes, including</p>
  </div>
  <div class="page">
    <p>Activity Transition Detection</p>
    <p>Detect shared-memory size change pattern  Nice properties:</p>
    <p>Clean channel</p>
    <p>Unique patterns</p>
    <p>Fixed (Full screen)</p>
    <p>Buffer allocation for the new Activity</p>
    <p>Buffer deallocation for the previous</p>
    <p>Activity</p>
    <p>+</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Activity Inference</p>
    <p>Activity signature + Activity transition graph</p>
    <p>Training phase (offline):</p>
    <p>Attacking phase (online):</p>
    <p>Trigger Activity transition</p>
    <p>automatically</p>
    <p>Activity transition graph</p>
    <p>Collect transition</p>
    <p>feature data</p>
    <p>Trigger Activity transition</p>
    <p>Transition model</p>
    <p>Activity signature</p>
    <p>Activity inference result</p>
    <p>Collect transition</p>
    <p>feature data</p>
  </div>
  <div class="page">
    <p>Activity Signature Design</p>
    <p>Content Provider feature</p>
    <p>Network event feature</p>
    <p>Input method feature</p>
    <p>CPU utilization time feature</p>
    <p>Consists of various features</p>
    <p>Activity 1  Activity 2</p>
  </div>
  <div class="page">
    <p>Remaining Steps of Activity Inference</p>
    <p>Create an Activity transition model  Hidden Markov Model (HMM)</p>
    <p>Inference results  A list of Activities in decreasing order of their probabilities</p>
  </div>
  <div class="page">
    <p>Evaluation Methodology</p>
    <p>Implementation: ~ 2300 lines of C++ code compiled with Android NDK</p>
    <p>Data collection: using automated Activity transition tool on Samsung Galaxy S3 devices with Android 4.2</p>
    <p>Experimented on 7 popular Android apps:</p>
  </div>
  <div class="page">
    <p>Evaluation Results   Activity transition detection, for all apps</p>
    <p>Detection accuracy  96.5%  FP and FN rates both  4%</p>
    <p>Activity inference accuracy  8090% for 6 out of 7 popular apps</p>
    <p>Important features: CPU, network, transition model  Inference computation &amp; delay</p>
    <p>Inference computation time:  10 ms  Delay (Activity transition  inference result):  1.3 sec</p>
    <p>Improved to  500 ms for faster and more seamless Activity hijacking  Overhead</p>
    <p>Increase power usage by 2.26.0%</p>
  </div>
  <div class="page">
    <p>Defense Discussion</p>
    <p>Eliminate the side channel  Proc file system access control</p>
    <p>Android already limits some, but more is needed  Window buffer reuse</p>
    <p>Pre-allocate double the buffers and reuse them  More memory consumption (several MBytes per buffer)</p>
    <p>Mitigate those follow-up attacks  For example, for UI state hijacking</p>
    <p>Build trusted paths between user and app  Defense is non-trivial, more effort is required</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Demonstrated serious security implications for a new form of GUI confidentiality breach  Formulated a general UI state inference attack  Infer UI state in real time</p>
    <p>Discovered a new side channel for UI state inference  Potentially affecting all popular GUI systems</p>
    <p>Designed and implemented it on Android, and further built several new attacks (e.g., UI state hijacking)</p>
    <p>Attack video demos at our website http://tinyurl.com/UIStateInference</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>http://tinyurl.com/UIStateInference</p>
  </div>
</Presentation>
