<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Crystal: Software-Defined Storage for Multi-tenant</p>
    <p>Object Stores</p>
    <p>Ral Gracia-Tinedo, Josep Samp, Edgar Zamora, Marc SnchezArtigas, Pedro Garca-Lpez (Universitat Rovira i Virgili, Spain)</p>
    <p>Yosef Moatti, Eran Rom (IBM Research-Haifa, Israel)</p>
  </div>
  <div class="page">
    <p>A LESSON FROM A PALM TREE</p>
  </div>
  <div class="page">
    <p>A lesson from a palm tree</p>
    <p>When the weather is good, all the trees enjoy J</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>A lesson from a palm tree</p>
    <p>But weather conditions may change dramatically And, when the storm comes</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>A lesson from a palm tree</p>
    <p>Some trees get through a storm better than others.</p>
    <p>One of the key properties for a tree to survive a storm is being flexible.</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>A lesson from a palm tree</p>
    <p>This work aims to make object stores flexible for adapting the system to changing requirements.</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>Flexibility</p>
    <p>Programmability  Extensibility  Automation  Control</p>
  </div>
  <div class="page">
    <p>CONTEXT: SOFTWARE DEFINED OBJECT STORAGE</p>
  </div>
  <div class="page">
    <p>What is Software-Defined Storage?</p>
    <p>Software-defined storage (SDS) is a new term for data storage software that provides policy-based provisioning and management of data storage independent of the underlying hardware.</p>
    <p>(Wikipedia)</p>
    <p>Hey! What does Software-Defined Storage mean?</p>
    <p>SDS: Automation, management, optimize workloads,</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>Google Trends</p>
    <p>Object storage</p>
    <p>SDS</p>
  </div>
  <div class="page">
    <p>SDS Concepts &amp; Works</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>SDS systems decouple control/data planes:  Control plane: Definition of policies, intelligence  Data plane: Enforcement of policies, manage data flows</p>
    <p>SDS systems in the literature:  IOFlow (SOSP13): BW control/middleboxes, targets file-system  Retro (NSDI15): Resource management, guarantee SLOs  sRoute (FAST16): Network-like model to treat flows (sSwitches)</p>
    <p>We focus on object storage (OpenStack Swift):  Policy-based redundancy models in Swift (from Kilo version)  Companies like SwiftStack sell automation, provisioning, and metering</p>
    <p>services.</p>
    <p>But, can we go a step further? And, why?</p>
  </div>
  <div class="page">
    <p>PROBLEM: ADVANCED STORAGE MANAGEMENT</p>
  </div>
  <div class="page">
    <p>What if</p>
    <p>Swift Proxy</p>
    <p>Storage Nodes</p>
    <p>VM VM</p>
    <p>VM VM</p>
    <p>Tenant 1: Stores compressible data</p>
    <p>Can we compress only T1s data to save storage space?</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>VM VM</p>
    <p>VM VM</p>
    <p>Tenant 2: Stores noncompressible data</p>
  </div>
  <div class="page">
    <p>Or, what happens if</p>
    <p>Swift Proxy</p>
    <p>Storage Nodes</p>
    <p>VM VM</p>
    <p>VM VM</p>
    <p>VM VM</p>
    <p>VM VM</p>
    <p>Tenant 1: SLO=30MBps</p>
    <p>Tenant 2: SLO=60MBps</p>
    <p>Can we enforce service-level objectives on tenants?</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>Sadly, Swift lacks from flexibility</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>CRYSTAL</p>
  </div>
  <div class="page">
    <p>Design Principles of Crystal</p>
    <p>Crystal is a SDS framework to solve storage management problems in object stores (OpenStack Swift):  It is not an ad-hoc solution to a particular problem!</p>
    <p>Crystal decouples control/data planes:</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Policies, Controllers</p>
    <p>Filters, Triggers</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>Swift Proxy Swift Storage Node</p>
    <p>Filter framework</p>
    <p>Filter: Data transformation executed on object requests. E.g., compression, caching, encryption, bandwidth allocation</p>
    <p>Two types of filters:  OpenStack Storlets (isolated execution)  Native filters (non-isolated execution)</p>
    <p>Filters are pluggable at runtime!!</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>Crystal Design (Data Plane)</p>
  </div>
  <div class="page">
    <p>Swift Proxy Swift Storage Node</p>
    <p>Workload metrics framework</p>
    <p>Inspection triggers: Information of a particular aspect of the system operation to trigger the execution of filters.  Object metadata: object size, type,  Workload metrics: E.g., requests/sec, CPU load, object contents,</p>
    <p>PUTS_SECPUTS_SEC</p>
    <p>Workload metric process</p>
    <p>Metrics are pluggable at runtime!!</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>Crystal Design (Data Plane) M</p>
    <p>onitoring info</p>
  </div>
  <div class="page">
    <p>Crystal Design (Control Plane)  Controller: Algorithm that receives as input workload</p>
    <p>metrics to manage the execution of filters.</p>
    <p>We provide two types of controllers:  Automation controllers: Simple activation rules (self-generated).  Global controllers: Global visibility and coordination of a filter at</p>
    <p>the data plane (user-defined). 18</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>Workload metric processesLayer of distributed controllers</p>
    <p>Publish/subscribe</p>
    <p>M onitoring info</p>
  </div>
  <div class="page">
    <p>Crystal Design (Control Plane)  IFTTT-like policies: Crystal provides administrators with a</p>
    <p>simple If-This-Then-That-like DSL</p>
    <p>The vocabulary of the DSL can be expanded at runtime:  By adding new filters  By adding new workload metrics and triggers</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>13 nodes cluster:  1 Controller: controllers, metadata,</p>
    <p>messaging, authentication, Swift proxy ( Dell PowerEdge 420, 32GB RAM, 1TB HDD)</p>
    <p>3 nodes to execute workloads (Dell PowerEdge 420, 32GB RAM, 1TB HDD)</p>
    <p>2 Swift Proxies (Dell PowerEdge 320 , 28GB RAM, 1TB HDD, 500GB SSD)</p>
    <p>7 Storage nodes (Dell PowerEdge 320, 16GB RAM, 2x1TB HDD)</p>
    <p>Switched 1GBit Ethernet</p>
    <p>OpenStack Swift Kilo version</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>Storage Automation</p>
    <p>Data Plane</p>
    <p>Control Plane</p>
    <p>FOR CONTAINER C1 WHEN GETS_SEC&gt;5 DO SET CACHING ON PROXY</p>
    <p>DSL Compiler</p>
    <p>Crystal APIs</p>
    <p>Metadata store</p>
    <p>Container C1</p>
    <p>C1 -&gt; CACHING</p>
    <p>GETS_SEC</p>
    <p>GETS_SEC</p>
    <p>M onitoring info</p>
    <p>G ET</p>
    <p>S_ SE</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Storage Automation</p>
    <p>Oscillatory workload with high locality (0 to 10 PUT/GET per sec.).  Simple LRU caching filter exploiting proxy SSDs.  Enforce caching under higher loads (GET_SEC&gt;5)</p>
    <p>Reads are 30% faster (in median) when caching is activated.  Writes are almost not affected.</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>Bandwidth Differentiation</p>
    <p>Data Plane</p>
    <p>Control Plane</p>
    <p>FOR TENANT T1 DO SET BANDWIDTH WITH GET_BW=30 ON STORAGE_NODE</p>
    <p>DSL Compiler</p>
    <p>Crystal APIs</p>
    <p>Metadata store M onitoring info</p>
    <p>GET_BW</p>
    <p>GET_BW GET_BW</p>
    <p>GET_BW GET_BW</p>
    <p>T1 -&gt; GET_BW=30</p>
  </div>
  <div class="page">
    <p>Bandwidth Differentiation</p>
    <p>3 ssbench tenants executing 128MB GETs against the cluster.  Bandwidth throttling filter (deployed at storage nodes).  2 global controllers (GET BW, Replication BW)  Until replication traffic is controlled, SLOs are not achieved.</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Many object stores are hard to adapt to new requirements.</p>
    <p>We presented Crystal, the first SDS architecture for object stores:  Control plane: Policies (IFTTT-like), Controllers (distributed algorithms)  Data plane: Filters (compute on objects), Triggers (metrics, metadata)</p>
    <p>We demonstrated the extensible design of Crystal:  New storage automation policies (compression, caching,).  A global bandwidth control filter.</p>
    <p>The framework opens the door to investigate new storage filters and control algorithms.</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>QUESTIONS? THANK YOU!</p>
    <p>http://crystal-sds.org</p>
    <p>https://github.com/Crystal-SDS</p>
  </div>
  <div class="page">
    <p>Overheads</p>
    <p>Metadata access overhead:  3.9% 1MB</p>
    <p>Isolated flow interception:  15.7% 1MB  5.7% 10MB</p>
    <p>Performance may also depend on data content &amp; access patterns.</p>
    <p>http://crystal-sds.org @iostackprojecthttps://github.com/Crystal-SDS</p>
    <p>P la</p>
    <p>in S</p>
    <p>w if</p>
    <p>t</p>
    <p>M et</p>
    <p>ad at</p>
    <p>a ac</p>
    <p>ce ss</p>
    <p>N O</p>
    <p>O P</p>
    <p>fi lt</p>
    <p>er C</p>
    <p>om p</p>
    <p>re ss</p>
    <p>io n</p>
    <p>(0 s</p>
    <p>d at</p>
    <p>a) C</p>
    <p>om p</p>
    <p>re ss</p>
    <p>io n</p>
    <p>(r an</p>
    <p>d om</p>
    <p>d at</p>
    <p>a)</p>
    <p>P la</p>
    <p>in S</p>
    <p>w if</p>
    <p>t M</p>
    <p>et ad</p>
    <p>at a</p>
    <p>ac ce</p>
    <p>ss N</p>
    <p>O O</p>
    <p>P fi</p>
    <p>lt er</p>
    <p>C om</p>
    <p>p re</p>
    <p>ss io</p>
    <p>n (0</p>
    <p>s d</p>
    <p>at a)</p>
    <p>C om</p>
    <p>p re</p>
    <p>ss io</p>
    <p>n (r</p>
    <p>an d</p>
    <p>om d</p>
    <p>at a)</p>
    <p>PU T</p>
    <p>E xe</p>
    <p>cu tio</p>
    <p>n Ti</p>
    <p>m e</p>
    <p>(s ec</p>
    <p>on ds</p>
    <p>)</p>
  </div>
</Presentation>
