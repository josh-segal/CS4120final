<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>u-root: A Go-based, Firmware Embeddable Root File System with</p>
    <p>On-Demand Compilation</p>
    <p>Ron Minnich Google</p>
    <p>Andrey Mirtchovski Cisco</p>
  </div>
  <div class="page">
    <p>Outline  What u-root is  How it all works  Using Go ast package to transform Go  Try it!</p>
    <p>docker run --privileged -i -t rminnich/u-root:18 /bin/bash</p>
    <p>cd /u-root &amp;&amp; sh README</p>
  </div>
  <div class="page">
    <p>u-root</p>
    <p>Root file system in source form  Type a command, e.g. date</p>
    <p>Date and packages it needs get compiled to /bin  Usually in ramfs for performance</p>
    <p>Newly compiled command is then run  Compilation is minimal and fast ( second)</p>
    <p>Some variations on this theme (more later)  All commands/packages are there as source</p>
  </div>
  <div class="page">
    <p>Wait! There has to be some binary ...</p>
    <p>And there is: /init (or /linux_arch/init)  And of course the Go compiler: 4 binaries  But the rest really is source  On boot, /init compiles an installer  Init then forks and execs sh</p>
    <p>which is compiled by the installer and run  The init is minimal: 206 lines  So it really is essentially all source</p>
  </div>
  <div class="page">
    <p>U is for Universal</p>
    <p>A single flash/ssd/usb device can boot on all Go-supported architectures</p>
    <p>Adding a new architecture requires only 4 new binaries</p>
    <p>Proper (re)arrangement of paths is needed  E.g., /init -&gt; /linux_&lt;arch&gt;/init</p>
  </div>
  <div class="page">
    <p>Variations on u-root for embedded</p>
    <p>Not everyone wants source in FLASH  or wants to wait for compilation</p>
    <p>Some users want to eliminate fork/exec  Some FLASH parts are too small for all of</p>
    <p>the source  Hence the root image can take many forms  But source code never changes</p>
    <p>I.e. no specialized source code for embedded</p>
  </div>
  <div class="page">
    <p>Variations of u-root 5 binaries per architecture, all commands in source form, dynamic compilation, multiple architectures in one root device</p>
    <p>Post-boot model -- i.e. local disk, nfsroot, etc.</p>
    <p>MAX</p>
    <p>More than 5 binaries per architecture: some/all commands precompiled, dynamic compilation, multiple architectures in one root image</p>
    <p>Post-boot model where faster boot is required</p>
    <p>Pre-boot model: u-root installed in firmware or local device</p>
    <p>All commands built into one binary which forks and execs each time</p>
    <p>Usually firmware but also netboot of kexec image</p>
    <p>One binary, but no fork/exec Almost always firmware MIN</p>
  </div>
  <div class="page">
    <p>A deeper look at u-root MAX</p>
    <p>Standard kernel  five/four/two Go binaries per architecture*</p>
    <p>init binary (part of u-root, written in Go)  go command, xg, [xc],xa, xl (e.g. 6, 5, 8, q)</p>
    <p>Go package source  u-root source for basic commands</p>
    <p>(cat, dd, etc.)  in 13M (compressed of course! :-)</p>
  </div>
  <div class="page">
    <p>Root structure at boot</p>
    <p>/</p>
    <p>linux_amd64/</p>
    <p>linux_arm/</p>
    <p>linux_ppc64le/</p>
    <p>init</p>
    <p>init</p>
    <p>init</p>
    <p>src/</p>
    <p>go/</p>
    <p>cmds</p>
    <p>github.com/</p>
    <p>cat</p>
    <p>dd</p>
    <p>... ...</p>
    <p>src</p>
    <p>pkg</p>
    <p>...</p>
    <p>tool</p>
    <p>linux_arm/</p>
    <p>linux_ppc64le/</p>
    <p>linux_amd64/</p>
    <p>linux_arm/</p>
    <p>linux_ppc64le/</p>
    <p>linux_amd64/ go</p>
    <p>go</p>
    <p>go</p>
    <p>Go package compiled on demand</p>
    <p>U-root source</p>
    <p>U-root init binaries (only one required)</p>
    <p>Go source</p>
    <p>Go toolchain Only one architecture type required</p>
  </div>
  <div class="page">
    <p>Init builds directories, mounts, ...</p>
    <p>/</p>
    <p>buildbin/ sh -&gt; installcommand cat -&gt; installcommand ...</p>
    <p>installcommand bin/</p>
    <p>create etc/, dev/, proc/ mknod, mount, create any needed files (e.g. resolv.conf)</p>
    <p>Directory of symlinks built by init</p>
    <p>Init creates required device nodes, mount points, and mounts</p>
    <p>installer binary</p>
  </div>
  <div class="page">
    <p>Scripting and Builtins are essential</p>
    <p>u-root shell can take simple scripts  i.e. files with basic commands, pipelines, etc.</p>
    <p>Doesnt support (e.g.) functions  We wanted a simple shell</p>
    <p>Avoid complexity and bugs of traditional shell scripting environments</p>
    <p>Want one language for tools and scripts  Make Go our scripting language</p>
  </div>
  <div class="page">
    <p>Using Go to write more Go</p>
    <p>For scripting  For dynamically creating shells with builtins  For creating small memory pre-compiled</p>
    <p>versions</p>
  </div>
  <div class="page">
    <p>Script for ip link command script { ifaces, _ := net.Interfaces()</p>
    <p>for _, v := range ifaces { addrs, _ := v.Addrs() fmt.Printf(&quot;%v has %v&quot;, v, addrs)</p>
    <p>} }  Result:</p>
    <p>ip: {1 1500 lo up|loopback} has [127.0.0.1/8 ::1/128] ip: {5 1500 eth0 fa:42:2c:d4:0e:01 up|broadcast} has [172.17.0.2/16 fe80::f842:2cff:fed4:e01/64]</p>
    <p>But its not really a program  hows that work?</p>
  </div>
  <div class="page">
    <p>Go script rewrites fragment and uses the go import package  script reads the program</p>
    <p>If the first char is {, assumes it is a fragment and wraps package main and func main() boiler plate</p>
    <p>Import uses the Go Abstract Syntax Tree (ast) package:  Parses a program  Finds package usage  Inserts go import statements</p>
  </div>
  <div class="page">
    <p>The result</p>
    <p>Take a fragment and produce buildable Go code</p>
    <p>Script program builds and runs the code</p>
    <p>Builds on existing u-root mechanisms but uses Go to write new Go</p>
    <p>package main import net import fmt func main(){ ... }</p>
  </div>
  <div class="page">
    <p>builtins? Need to go a bit deeper</p>
    <p>Normally builtins extend interpreted shell code</p>
    <p>u-root builtins extend the shell binary by recompiling the shell with new functions</p>
    <p>Builtin command is a superset of script  First, lets look at a shell builtin</p>
  </div>
  <div class="page">
    <p>Basic builtin(s)</p>
    <p>builtin \ hi { fmt.Printf(hi\n) } \</p>
    <p>there {fmt.Println(there)}  Create a new shell with hi and there</p>
    <p>commands</p>
  </div>
  <div class="page">
    <p>Builtins combine script and rebuild package main</p>
    <p>import &quot;errors&quot;</p>
    <p>import &quot;os&quot;</p>
    <p>func init() {</p>
    <p>addBuiltIn(&quot;cd&quot;, cd)</p>
    <p>}</p>
    <p>func cd(cmd string, s []string) error {</p>
    <p>if len(s) != 1 {</p>
    <p>return errors.New(&quot;usage: cd one-path&quot;)</p>
    <p>}</p>
    <p>err := os.Chdir(s[0])</p>
    <p>return err</p>
    <p>}</p>
    <p>This is the cd builtin  Lives in /src/sh  When sh is built, it is</p>
    <p>extended with this builtin  Create custom shells with</p>
    <p>built-ins that are Go code  e.g. temporarily create</p>
    <p>purpose-built shell for init  Eliminates init boiler-plate</p>
    <p>scripts</p>
  </div>
  <div class="page">
    <p>Customize the shell in a few steps</p>
    <p>create a unique tempdir  copy shell source to it  convert sets of Go fragments to the form in</p>
    <p>previous slide  Create private name space with new /bin  mount --bind the tempdir over /src/cmds/sh/  run /buildbin/sh  You now have a new shell with a new builtin</p>
  </div>
  <div class="page">
    <p>The new shell</p>
    <p>Child shells will get the builtin  since they inherit the private name space</p>
    <p>Shells outside the private name space wont see the new shell</p>
    <p>When shell finally exits, the builtin is gone  Custom builtins are far more efficient</p>
    <p>Need a special purpose shell many times?  You can pay the cost once, not once per exec</p>
  </div>
  <div class="page">
    <p>Taking rewriting further</p>
    <p>Request for single-binary version of u-root for Cubieboard  Allwinner A10 --&gt; not very fast</p>
    <p>Wanted to compile all u-root programs into one program and avoid fork/exec if possible</p>
  </div>
  <div class="page">
    <p>Taking rewriting further</p>
    <p>With the ast package, we can rewrite programs as packages, e.g. ls.go</p>
    <p>package main</p>
    <p>var x = flag.String(l, ) func main() { }</p>
    <p>package ls</p>
    <p>var x = flag.String(ls.l, ) func Main() { }</p>
    <p>Shell does not call exec; ls becomes builtin  Combine all of u-root into one program</p>
  </div>
  <div class="page">
    <p>u-root as one program</p>
    <p>No need for fork/exec  The Go size penalty is gone</p>
    <p>one program: about 2M  33 programs: about 7M</p>
    <p>compresses to 400K  And we get dhcp, wget, ping, ip,   Processing 33 commands takes .2 seconds  Full build takes 12 seconds</p>
  </div>
  <div class="page">
    <p>What is all this good for?</p>
    <p>Building safer startup environments  We can verify the root file system as in</p>
    <p>ChromeOS, which means we verify the compiler and source, so we know what were running</p>
    <p>Much easier embedded root  Security that comes from source-based root  Knowing how things work</p>
  </div>
  <div class="page">
    <p>Where to get it</p>
    <p>Prebuilt docker with the whole system  docker.io rminnich/u-root (use tag 18 or latest)  sudo /usr/local/bin//docker run --privileged -i -t</p>
    <p>rminnich/u-root:18 /bin/bash  cd /u-root &amp;&amp; sh README to try chroot  /coreboot, /go, /u-root, and /linux-3.14.17 so you can</p>
    <p>build it all from source to try it yourself  github.com/rminnich/u-root</p>
  </div>
  <div class="page">
    <p>Extra</p>
  </div>
  <div class="page">
    <p>Init tasks</p>
    <p>/bin is empty, mount tmpfs on it  /buildbin is initialized by init with symlinks to</p>
    <p>a binary which builds commands in /bin  PATH=/go/bin:/bin:/buildbin  create /dev, /proc, /etc  Create inodes in /dev  mount procfs  Create minimal /etc/resolv.conv</p>
  </div>
  <div class="page">
    <p>Running first sh</p>
    <p>Init then execs sh  If sh is not in /bin, /buildbin/sh (symlink</p>
    <p>&gt;installcommand) runs  /buildbin/installcommand directs go to build</p>
    <p>sh, and then execs /bin/sh  And you have a shell prompt  Same flow for other programs</p>
  </div>
  <div class="page">
    <p>HP FALCO 2-core chromebook, 4GiB</p>
    <p>First build of all packages for /bin/installcommand ~5s  runs 162 commands, builds many more files</p>
    <p>Subsequent commands are much faster because more packages are already built</p>
    <p>Date + 2 packages is 2 seconds  Once built, its instantaneous (statically</p>
    <p>linked; in tmpfs!)</p>
  </div>
  <div class="page">
    <p>But I want bash!</p>
    <p>You want it, you got it: tinycore has it  The tcz command installs tinycore packages  tcz [-h host] [-p port] [-a arch] [-v version]</p>
    <p>Defaults to tinycore repo, port 8080, x86_64, 5.1  Type, e.g., tcz bash  Will fetch bash and all its dependencies  Once done, you type  /usr/local/bin/bash</p>
  </div>
</Presentation>
