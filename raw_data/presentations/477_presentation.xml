<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Making Programs Forget: Enforcing Lifetime for Sensitive Data</p>
    <p>Jayanthkumar Kannan (Google Inc), Gautam Altekar (UC Berkeley), Petros Maniatis (Intel Labs), Byung-Gon Chun (Intel Labs)</p>
  </div>
  <div class="page">
    <p>The Problem: Lingering Data</p>
    <p>Sensitive Data</p>
    <p>How long is your data around? (Chow et. al. '04) o Where in memory? o Maybe on disk?</p>
  </div>
  <div class="page">
    <p>Hard to Provide Sensitive Data Lifetime</p>
    <p>Shutdown the application?</p>
    <p>Reboot?</p>
    <p>Rely on application support?</p>
    <p>Memory scrubbing? (Chow et al '05: Data shredding)</p>
    <p>Time-based data access control? (Perlman '05)</p>
    <p>Change user behavior? (Borders et al '09: Capsules)</p>
    <p>Existing approaches fall short</p>
  </div>
  <div class="page">
    <p>Goal: Guaranteed Data Lifetime</p>
    <p>Guarantee: Data indicated as sensitive is not retrievable from system beyond specified time limit</p>
    <p>Requirements  No application support</p>
    <p>Non-disruptive : shouldnt crash, interrupt your normal</p>
    <p>workflow</p>
    <p>Contribution: Promising start, much further to go</p>
  </div>
  <div class="page">
    <p>Observation: State Equivalence</p>
    <p>For any program state computed from sensitive data, there usually exists an equivalent state not derived from the sensitive data</p>
    <p>Example:</p>
    <p>o You get a sensitive email, read it, and then send and read some other emails</p>
    <p>o Equivalent State: Send and read other emails</p>
  </div>
  <div class="page">
    <p>Approach: State Reincarnation</p>
    <p>Replace current sensitive state with equivalent non-sensitive state</p>
    <p>Challenge: How do we derive equivalent non</p>
    <p>sensitive state?</p>
  </div>
  <div class="page">
    <p>Deriving an Equivalent State</p>
    <p>Key idea: deterministic replay with perturbed input</p>
    <p>(record all inputs)</p>
    <p>S</p>
    <p>sys_read(buf)</p>
    <p>Sensitive input (user-designated)</p>
    <p>Sensitive state</p>
    <p>(replace sensitive inputs)</p>
    <p>S</p>
    <p>sys_read(buf)</p>
    <p>Substitute w/ Nonsensitive input</p>
    <p>Non-sensitive state</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Picking the sensitive-input replacements</p>
    <p>Completeness: Eliminating all sensitive data</p>
    <p>Overhead: Run-time cost</p>
  </div>
  <div class="page">
    <p>Picking sensitive-input replacements</p>
    <p>Given sensitive input I, and subsequent input I1, I2, we compute I' which leads to same execution path o Using tainting and constraint solving (Altekar '09)</p>
    <p>Replay with I'</p>
    <p>Hard-cases: Spell-checker, Hashing</p>
  </div>
  <div class="page">
    <p>Completeness</p>
    <p>Sensitive data can linger in various areas (OS buffers);</p>
    <p>how can we remove all of it?</p>
    <p>Technique: Implement perturbed replay in VM</p>
    <p>Need to trust VM not to retain data</p>
  </div>
  <div class="page">
    <p>Overhead</p>
    <p>We implemented recording at user-level</p>
    <p>Slowdown: ~1.2X on bash</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Contributions: o Guaranteed Lifetime Property o State Reincarnation</p>
    <p>Future work:</p>
    <p>o Picking right inputs for replay o Measuring overhead for consistent substitution</p>
  </div>
</Presentation>
