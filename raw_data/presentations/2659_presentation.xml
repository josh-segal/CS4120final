<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Simplifying Software-Defined Network Optimization Using SOL</p>
    <p>Victor Heorhiadi Michael K. Reiter Vyas Sekar UNC Chapel Hill UNC Chapel Hill Carnegie Mellon University</p>
  </div>
  <div class="page">
    <p>Overview: SDN</p>
    <p>Control Platform (e.g., ONOS, OpenDaylight)</p>
    <p>SDN applications</p>
    <p>Network data Network routes</p>
    <p>A A A A A A A</p>
    <p>Data plane</p>
  </div>
  <div class="page">
    <p>Network Optimizations are Common</p>
    <p>Maxflow, Traffic engineering</p>
    <p>SIMPLE (SIGCOMM 2013)</p>
    <p>ElasticTree (NSDI 2010)</p>
    <p>Panopticon (Usenix ATC 2014)</p>
    <p>SWAN (SIGCOMM 2013)</p>
  </div>
  <div class="page">
    <p>Current Process</p>
    <p>Take theory &amp; optimization</p>
    <p>courses Formulate the</p>
    <p>problem Solve with a</p>
    <p>solver</p>
    <p>Not fast enough  NP hard?</p>
    <p>Develop heuristicParse solutionDeploy</p>
  </div>
  <div class="page">
    <p>SDN applications</p>
    <p>Control Platform (e.g., ONOS, OpenDaylight)</p>
    <p>Network data Network routesOptimization layer</p>
    <p>No custom heuristics  Focus on high-level</p>
    <p>network goals  Rapid prototyping  App = 20 lines of</p>
    <p>code</p>
    <p>Our Vision</p>
    <p>A A A A A A A</p>
  </div>
  <div class="page">
    <p>Challenge: Generality + Efficiency</p>
    <p>Approach Generality Efficiency</p>
    <p>Frameworks</p>
    <p>Custom solutions</p>
    <p>SOL</p>
  </div>
  <div class="page">
    <p>SO L</p>
    <p>A PI</p>
    <p>SOL: SDN Optimization Layer</p>
    <p>Logically centralized</p>
    <p>Diverse set</p>
    <p>SOL Optimization solver</p>
    <p>(e.g., CPLEX)</p>
    <p>Control Platform (e.g., ONOS, OpenDaylight)</p>
    <p>SDN applications</p>
    <p>Network data Network routes</p>
    <p>A A A A A A A</p>
  </div>
  <div class="page">
    <p>Insight: Path Abstraction</p>
    <p>Problems are recast to be path-based</p>
    <p>Policies are path predicates</p>
  </div>
  <div class="page">
    <p>s t 1 3</p>
    <p>Path-based Recasting: MaxFlow Edge-based Path-based</p>
    <p>&quot;#</p>
    <p>&quot;$</p>
    <p>&quot;%</p>
    <p>&amp;# &amp;'</p>
    <p>&amp;$</p>
    <p>&amp;( &amp;) &amp;*</p>
    <p>&amp;+</p>
    <p>&amp;,</p>
    <p>s t 1 3</p>
    <p>s t 1</p>
    <p>s t 1 3</p>
    <p>: amount of flow</p>
    <p>&amp;# = &amp;' + &amp;(  &quot;0 % 01# = demand</p>
  </div>
  <div class="page">
    <p>Policies as Path Predicates</p>
    <p>Valid paths:  N1-N4-N5  N1-N3-N4-N5 Invalid paths:  N1-N3-N5</p>
    <p>IPS</p>
    <p>N1 N3</p>
    <p>N4N2</p>
    <p>N5</p>
    <p>IPS FW</p>
    <p>Proxy</p>
    <p>N1N5 Web, 100 Mbps FWProxy</p>
    <p>Generality</p>
  </div>
  <div class="page">
    <p>Path Challenge</p>
    <p>Exponential number of paths</p>
    <p>Large optimization size</p>
    <p>Long run time = Bad efficiency</p>
  </div>
  <div class="page">
    <p>SOL Process</p>
    <p>Path generation Path selection Optimization Rule</p>
    <p>generation</p>
    <p>(according to a predicate) Offline step</p>
    <p>Pick a subset of paths</p>
    <p>This acts as a heuristic</p>
    <p>Use a controller to configure data plane paths</p>
    <p>Efficiency</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Python library; interfaces with CPLEX solver and ONOS controller</p>
    <p>Prototyped applications</p>
    <p>MaxFlow, Traffic engineering, latency minimization</p>
    <p>ElasticTree (Heller et al.), Panopticon (Levin et al.), SIMPLE (Qazi et al.)</p>
  </div>
  <div class="page">
    <p>Example: MaxFlow</p>
    <p>Topology input Path generation + selection</p>
    <p>Traffic flows Resource consumption</p>
    <p>Global goal (objective function)</p>
  </div>
  <div class="page">
    <p>Example: Traffic Engineering</p>
    <p>Route all traffic Minimize bandwidth load</p>
  </div>
  <div class="page">
    <p>Key Questions</p>
    <p>Does it reduce development effort for more complex applications?</p>
    <p>Is it faster than the original optimization?</p>
    <p>Is it any worse than optimal?</p>
  </div>
  <div class="page">
    <p>Development effort</p>
    <p>Application SOL lines of code Estimated improvement ElasticTree (Heller et al.) 16 21.8 Panoption (Levin et al.) 13 25.7 SIMPLE (Qazi et al.) 21 18.6</p>
  </div>
  <div class="page">
    <p>Optimization Runtime</p>
    <p>Log Scale</p>
    <p>Shaded: No solution by the original within</p>
    <p>Topology (number of switches)</p>
    <p>Orders of magnitude faster</p>
    <p>Less than 1% away from optimal</p>
  </div>
  <div class="page">
    <p>Mininet Tests</p>
    <p>Setup:  Traffic engineering</p>
    <p>application  Mininet + ONOS</p>
    <p>Time to deploy</p>
    <p>Topology (number of switches)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Getting SDN benefits requires a lot of optimization knowledge</p>
    <p>SOL lowers barrier of entry for developers</p>
    <p>Leverages the path abstraction: generation + selection</p>
    <p>Efficient: deploy in seconds!</p>
    <p>Creates many new opportunities for future work</p>
    <p>victor@cs.unc.edu https://github.com/progwriter/SOL</p>
  </div>
</Presentation>
