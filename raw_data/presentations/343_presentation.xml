<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Conceptual Partitioning: An Efficient Method for Continuous Nearest Neighbour Monitoring</p>
    <p>by Kyriakos Mouratidis, Marios Hadjieleftheriou and Dimitris Papadias</p>
    <p>June, 2005</p>
    <p>presented by Meltem Yldrm</p>
    <p>Boazii University, 2005</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Problem  Solution: Conceptual Partitioning Monitoring (CPM)  Extensions of the Solution  Performance Analysis  Conclusion</p>
  </div>
  <div class="page">
    <p>What is the Problem?</p>
    <p>Problem: continously monitoring the nearest neighbours of certain objects in a dynamic environment</p>
    <p>Some Wireless Mobile Applications: Fleet management, locationbased services</p>
    <p>A set of moving objects  A central server that</p>
    <p>monitors their positions over time  processes continuous queries from geographically distributed clients  reports up-to-date results</p>
    <p>Naive approach:  the server constantly obtains the most recent position of all objects  transmission of a large number of rapid data streams corresponding to</p>
    <p>location updates</p>
  </div>
  <div class="page">
    <p>Purpose (formal)</p>
    <p>Spatial Data: data with position information (location, shape, size, relationships to other entities)</p>
    <p>Spatial Query: querying objects based on their geometry</p>
    <p>P = {p1, p2, , pn}  set of objects q: a query point k-NN query: k nearest neighbour query which retrieves the k objects in P that lie closest to q</p>
    <p>The problem is well studied for static datasets but not for highly-dynamic environments with continuous multiple queries</p>
    <p>q</p>
    <p>p1</p>
    <p>p2</p>
    <p>p3</p>
    <p>p4</p>
    <p>p5</p>
    <p>p6</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Methods focusing on range query monitoring:</p>
    <p>Q-index, MQM, Mobieyes, SINA</p>
    <p>It is almost impossible to extend them to NN queries</p>
    <p>Methods that explicitly target NN processing:</p>
    <p>DISC, YPK-CNN, SEA-CNN</p>
  </div>
  <div class="page">
    <p>CPM  Conceptual Partitioning Monitoring  2D data objects and queries that change their location</p>
    <p>frequently and in an unpredictable manner  An update from object p is a tuple</p>
    <p>&lt;p.id, xold, yold, xnew, ynew&gt;</p>
    <p>A central server receives the update stream and continuosly monitors the k NNs of each query q</p>
    <p>Grid index  Each cell is x</p>
    <p>Symbol Description</p>
    <p>P The set of moving objects</p>
    <p>N Number of objects in P</p>
    <p>G The grid that indexes P</p>
    <p>Cell side length</p>
    <p>q The query point</p>
    <p>cq The cell containing q</p>
    <p>n The number of queries installed in the system</p>
    <p>dist(p,q) Euclidean distance from object p to query point q</p>
    <p>best_NN The best NN list of q</p>
    <p>best_dist The distance of the kth NN from q</p>
    <p>mindist(c, q) Minimum distance between cell c and q</p>
  </div>
  <div class="page">
    <p>CPM  Conceptual Space Partitioning  Each rectangle has</p>
    <p>direction  level number</p>
    <p>For rectangles DIRj and DIRj+1,</p>
    <p>mindist(DIRj+1,q) = mindist(DIRj, q) +</p>
    <p>CPM visits cells in ascending mindist(c, q) order</p>
  </div>
  <div class="page">
    <p>CPM  Data Structures</p>
    <p>Query Table Structure</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>q</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>&lt;qx, qy&gt;</p>
    <p>best_NN set</p>
    <p>best_dist</p>
    <p>search_heap</p>
    <p>visit_list</p>
    <p>G ri</p>
    <p>d</p>
    <p>c</p>
    <p>Object Grid Structure</p>
    <p>... p ...</p>
    <p>Object list</p>
    <p>... q ...</p>
    <p>Influence list</p>
  </div>
  <div class="page">
    <p>CPM  NN Computation Module initialize an empty heap , best_dist =  and best_NN = , visit_list =  insert the following into H</p>
    <p>&lt;cq, 0&gt; &lt;DIR0, mindist(DIR0, q)&gt;</p>
    <p>repeat: Get the next entry of H If it is a cell,</p>
    <p>For each pc, update best_NN and best_dist if necessary</p>
    <p>insert an entry for q into the influence list of c insert &lt;c, mindist(c, q)&gt; at the end of the visit_list</p>
    <p>Else For each cell c in DIR, insert &lt;c, mindist(c, q)&gt; into H</p>
    <p>Insert the next-level rectangles into H</p>
    <p>until H is empty or the next entry in H has mindist  best_dist</p>
  </div>
  <div class="page">
    <p>= 1, q = 1-NN</p>
    <p>CPM - Example &lt;c4,4, 0&gt;</p>
    <p>&lt;U0, 0.1&gt;</p>
    <p>&lt;L0, 0.2&gt;</p>
    <p>&lt;R0, 0.8&gt;</p>
    <p>&lt;D0, 0.9&gt;</p>
    <p>Heap empty and ignored enheap the cells of U0 and the rectangle U1</p>
    <p>&lt;c4,5, 0.1&gt;</p>
    <p>&lt;c5,5, 0.81&gt;</p>
    <p>&lt;U1, 1.1&gt;</p>
    <p>enheap the cells of L0 and the rectangle L1</p>
    <p>&lt;c3,4, 0.2&gt;</p>
    <p>&lt;c3,5, 0.22&gt;</p>
    <p>&lt;L1, 1.2&gt;</p>
    <p>we come across p1  c3,3 best_dist = dist(p1, q) = 1.7</p>
    <p>we come across p2  c2,4 best_dist= dist(p2, q) = 1.3</p>
    <p>we come across c5,6 since mindist(c5,6, q)  best_dist</p>
  </div>
  <div class="page">
    <p>CPM  Handling a Single Object Update  When p moves from cold to cnew</p>
    <p>Delete p from cold and scan the influence_list of cold  if p  q.best_NN and dist(p, q)  best_dist  reorder best_NN  if p  q.best_NN and dist(p, q) &gt; best_dist  mark q as affected</p>
    <p>Add p into cnew and scan the influence_list of cnew  if dist(p, q) &lt; q.best_dist</p>
    <p>remove the current kth NN from q.best_NN  insert p into q.best_NN  update q.best_dist</p>
    <p>Re-compute the best_NN of every affected query (sequential processing of visit_list and H)</p>
  </div>
  <div class="page">
    <p>CPM  Handling Multiple Object Updates  O: set of outgoing objects  I: set of incoming objects  I U best_NN  O  If |I|  |O|</p>
    <p>influence region of q includes at least k objects  new best_NN can be formed easily without invoking</p>
    <p>recomputation  Scan visit_list and look for where</p>
    <p>best_distnew &lt; mindist(c, q) &lt; best_distold</p>
  </div>
  <div class="page">
    <p>CPM  Handling Query Updates</p>
    <p>When a query is terminated Delete its entry from QT Remove it from the influence lists of the cells</p>
    <p>in its influence region  When a new query is inserted</p>
    <p>NN Computation Algorithm  When a query moves</p>
    <p>Termination + Insertion</p>
  </div>
  <div class="page">
    <p>Aggregate NN Queries - SUM</p>
    <p>Q = {q1, q2, , qm}</p>
    <p>Find p minimizing qiQ dist(p,q)</p>
    <p>Difference:  rectangle M containing</p>
    <p>all qi  Q</p>
    <p>enheap all the cells intersecting M</p>
  </div>
  <div class="page">
    <p>Aggregate NN Queries  MIN</p>
    <p>Q = {q1, q2, , qm}</p>
    <p>Find objects with the smallest distance(s) from any query in Q</p>
  </div>
  <div class="page">
    <p>Constrained NN Queries</p>
    <p>Only cells or rectangles intersecting the constraint region are added to the heap</p>
  </div>
  <div class="page">
    <p>Performance Analysis</p>
    <p>Cell size:</p>
    <p>Cells consume more space, object_list, influence_list</p>
    <p>higher number of processed objects</p>
    <p>High overhead due to heap operations</p>
  </div>
  <div class="page">
    <p>Evaluation by Simulation</p>
    <p>Roadmap of Oldenburg  Set of temporary objects (cars, pedestrians,</p>
    <p>etc.) and persistent NN queries  Default velocity values: slow, medium, fast  Comparison by YPK-CNN and SEA-CNN</p>
    <p>System Parameters</p>
    <p>Parameter Default Range</p>
    <p>N: object population 100K 10, 50, 100, 150, 200 (K)</p>
    <p>n: number of queries 5K 1, 2, 5, 7, 10 (K)</p>
    <p>k: number of NNs 16 1, 4, 16, 64, 256</p>
    <p>Object / Query Speed Medium slow, medium, fast</p>
    <p>Object agility 50% 10, 20, 30, 40, 50 (%)</p>
    <p>Query agility 30% 10, 20, 30, 40, 50 (%)</p>
  </div>
  <div class="page">
    <p>CPU time v.s. Grid Granularity</p>
    <p>Number of Cells in G</p>
    <p>CPM YPK-CNN SEA-CNN</p>
    <p>CPU time1000 900 800 700 600 500 400 300 200 100</p>
  </div>
  <div class="page">
    <p>CPU time v.s. N and n</p>
    <p>Number of Objects Number of Queries</p>
    <p>CPU time CPU time</p>
    <p>CPM YPK-CNN SEA-CNN</p>
    <p>Effect of N Effect of n</p>
  </div>
  <div class="page">
    <p>Performance v.s. k</p>
    <p>Number of NNs</p>
    <p>CPU time Cell accesses</p>
    <p>CPM YPK-CNN SEA-CNN</p>
    <p>CPU Time Cell accesses</p>
    <p>Number of NNs</p>
  </div>
  <div class="page">
    <p>CPU time v.s. Object and Query Speed</p>
    <p>Query Speed</p>
    <p>Slow Medium Fast Slow Medium Fast</p>
    <p>CPU time CPU time</p>
    <p>CPM YPK-CNN SEA-CNN</p>
    <p>Effect of Object Speed Effect of Query Speed</p>
    <p>Object Speed</p>
  </div>
  <div class="page">
    <p>CPU time v.s. Object and Query Agility</p>
    <p>Query Agility</p>
    <p>CPU time CPU time</p>
    <p>CPM YPK-CNN SEA-CNN</p>
    <p>Effect of Object Agility Effect of Query Agility</p>
    <p>Object Agility</p>
  </div>
  <div class="page">
    <p>CPU time for Constantly Moving and Static Queries</p>
    <p>Number of Objects</p>
    <p>CPU time CPU time</p>
    <p>CPM YPK-CNN SEA-CNN</p>
    <p>Constantly Moving Queries Static Queries</p>
    <p>Number of Objects</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>investigating the problem of monitoring continuous NN queries over moving objects</p>
    <p>CPM:  Low running time due to the elimination of</p>
    <p>unnecessary computations  Makes use of visit_list and heap for recomputations  Extending framework (aggregate, constrained NN</p>
    <p>queries)  Performance evaluation</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Q-index</p>
    <p>Assumes static range queries over moving objects</p>
    <p>Queries are indexed by an R-tree R-tree: splits space with hierarchically nested, and possibly overlapping, boxes</p>
    <p>Each object p is assigned a region such that p needs to issue an update only if it exits this area</p>
    <p>Moving objects probe the index to find the queries that they influence</p>
  </div>
  <div class="page">
    <p>YPK-CNN</p>
    <p>Objects are indexed with a regular grid of cells where each cell is x</p>
    <p>Updates are not processed as they arrive, each query is reevaluated every T time units</p>
    <p>The first evaluation of a query q:  visit the cells in a square R around the cell cq covering q until k objects</p>
    <p>are found  d = distance(q, kth NN object)  Search cells intersecting with square SR centered at cq with side length</p>
    <p>dmax: distance of the previous neighbour that moved furthest new SR: square centered at cq with side length 2dmax+</p>
    <p>When q changes location, it is handled as a new one</p>
    <p>First evaluation of q (1-NN)</p>
    <p>R</p>
    <p>SR</p>
    <p>d2 d</p>
    <p>+</p>
    <p>Update Handling (q = 1-NN)</p>
    <p>dmax2 d</p>
    <p>m a</p>
    <p>x +</p>
    <p>SR</p>
  </div>
  <div class="page">
    <p>SEA-CNN</p>
    <p>No module for the first evaluation of a query q  best_dist: distance between q and the kth NN  answer region of a query q: circle with center q</p>
    <p>and radius best_dist  The cells intersecting the answer region of q hold</p>
    <p>book-keeping information to indicate this fact  Determines a circular region SR around q and</p>
    <p>computes the new k NN set of q</p>
    <p>p2 issues an update (q = 1-NN)q moves to q'</p>
  </div>
  <div class="page">
    <p>Aggregate NN Queries - MAX</p>
    <p>Q = {q1, q2, , qm}</p>
    <p>Find objects with the lowest maximum distance(s) from any query in Q</p>
  </div>
</Presentation>
