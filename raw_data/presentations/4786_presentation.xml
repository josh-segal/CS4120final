<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>From One to Many: Planning for Loosely Coupled Multi-Agent Systems</p>
    <p>Ronen I. Brafman1 Carmel Domshlak2</p>
    <p>ICAPS 2008</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Logistics planning</p>
    <p>Deliver packages using vehicles (trucks, airplanes, ships) operating in/between different countries/regions/cities</p>
    <p>Classical benchmark for single-agent planning</p>
    <p>Classic example of a distributed system ; vehicle = agent</p>
    <p>(Informal) Question</p>
    <p>Can we exploit the fact that the domain describes a naturally distributed system to make planning more efficient?</p>
    <p>(Ultimate) Answer</p>
    <p>YES, we can solve distributed components independently</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Logistics planning</p>
    <p>Deliver packages using vehicles (trucks, airplanes, ships) operating in/between different countries/regions/cities</p>
    <p>Classical benchmark for single-agent planning</p>
    <p>Classic example of a distributed system ; vehicle = agent</p>
    <p>(Informal) Question</p>
    <p>Can we exploit the fact that the domain describes a naturally distributed system to make planning more efficient?</p>
    <p>(Ultimate) Answer</p>
    <p>YES, we can solve distributed components independently</p>
  </div>
  <div class="page">
    <p>Basic Motivation/Intuition k-agents MA Systems (Logistics domain example)</p>
    <p>Fully decoupled</p>
    <p>Vehicles are a priori responsible for different packages</p>
    <p>Same as planning k times for a single agent ; linear time-complexity growth</p>
    <p>(exp(k) time-complexity reduction)</p>
    <p>Fully coupled</p>
    <p>Vehicles have to move the same packages and maybe coordinate on</p>
    <p>loads/unloads</p>
    <p>Same as planning for a single k-times larger agent ; exp(k) time-complexity growth</p>
    <p>(no reduction in time-complexity)</p>
  </div>
  <div class="page">
    <p>Basic Motivation/Intuition k-agents MA Systems (Logistics domain example)</p>
    <p>Fully decoupled</p>
    <p>Same as planning k times for a single agent ; linear time-complexity growth</p>
    <p>(exp(k) time-complexity reduction)</p>
    <p>Fully coupled</p>
    <p>Same as planning for a single k-times larger agent ; exp(k) time-complexity growth</p>
    <p>(no reduction in time-complexity)</p>
    <p>Loosely coupled</p>
    <p>Somewhere in between depending on the level of coupling?</p>
    <p>Available results? None that we know of</p>
  </div>
  <div class="page">
    <p>Loose Coupling is a Loose Concept</p>
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Formal measure of coupling level by a combination of 1 a measure of a MA systems inherent coupling level 2 a measure of a problems coupling level</p>
    <p>An algorithm that scales</p>
    <p>exponentially with coupling level polynomially with the number of agents</p>
    <p>Based on a very simple model ; a minimal extension of STRIPS to MA systems</p>
  </div>
  <div class="page">
    <p>Centralized Planning for MA Systems Problem Statement</p>
    <p>Our Focus Here</p>
    <p>Input Planning problem for a set of k collaborative agents</p>
    <p>Question To what extent is planning for such a MA system harder than solving individual planning problems of each of the agents in isolation?</p>
    <p>Approach Theoretical. Try to formulate an algorithm that is tractable under reasonable conditions.</p>
  </div>
  <div class="page">
    <p>Centralized Planning for MA Systems</p>
    <p>Our Focus Here</p>
    <p>Input Planning problem for a set of k collaborative agents</p>
    <p>Question To what extent is planning for such a MA system harder than solving individual planning problems of each of the agents in isolation?</p>
    <p>Approach Theoretical. Try to formulate an algorithm that is tractable under reasonable conditions.</p>
  </div>
  <div class="page">
    <p>Main Ideas</p>
    <p>A New Graphical Model</p>
    <p>Potential (positive and negative) interactions between the agents individual abilities (= actions)</p>
    <p>System coupling-level</p>
    <p>Define an interaction graph of the system</p>
    <p>Nodes = agents</p>
    <p>Edges = agents need (to coordination with) each other</p>
    <p>Parameter  ; tree-width of interaction graph</p>
  </div>
  <div class="page">
    <p>Main Ideas</p>
    <p>A New Graphical Model</p>
    <p>Potential (positive and negative) interactions between the agents individual abilities (= actions)</p>
    <p>System coupling-level</p>
    <p>Parameter  ; tree-width of interaction graph</p>
    <p>Problem coupling-level</p>
    <p>Some problems require more coordination than others!</p>
    <p>Parameter  ; minmax number of times a single agent needs some other agent to do something for it</p>
  </div>
  <div class="page">
    <p>Main Ideas</p>
    <p>System coupling-level</p>
    <p>Parameter  ; tree-width of interaction graph</p>
    <p>Problem coupling-level</p>
    <p>Parameter  ; minmax number of times a single agent needs some other agent to do something for it</p>
    <p>Algorithm</p>
    <p>Fix the agents commitments to each other ; careful selection of language matters!</p>
    <p>Let each agent independently plan in-between commitments</p>
    <p>Use iterative deepening to extend the number of per-agent commitments if needed</p>
  </div>
  <div class="page">
    <p>Agent Actions</p>
    <p>Logistics planning</p>
    <p>Deliver packages using vehicles (trucks, airplanes, ships) operating in/between different countries/regions/cities</p>
    <p>Actions move(v, f rom, to), load(p, v, at), unload(p, v, at)</p>
    <p>Agents: vehicles</p>
    <p>Vehicle agent actions: moving it, loading into it, unloading from it</p>
    <p>From strips to ma-strips</p>
    <p>Everything is the same, except that actions are partitioned between the agents</p>
  </div>
  <div class="page">
    <p>Solving ma-strips Problems</p>
    <p>Standard Approaches</p>
    <p>/ Lose all structure and obtain k-times larger agent / Worst-case complexity exponential in description size or</p>
    <p>shortest plan (depending on search strategy)</p>
    <p>/ What can we say about it?</p>
  </div>
  <div class="page">
    <p>Solving ma-strips Problems</p>
    <p>Standard Approaches</p>
    <p>/ Lose all structure and obtain k-times larger agent / Worst-case complexity exponential in description size or</p>
    <p>shortest plan (depending on search strategy)</p>
    <p>/ What can we say about it?</p>
  </div>
  <div class="page">
    <p>A Closer Look at Agent Actions</p>
    <p>Private vs. Non-Private</p>
    <p>Private affect and depend only on that agent</p>
    <p>Non-Private all the rest</p>
    <p>Logistic planning</p>
    <p>Move actions are private (influence and influenced only by vehicle location)</p>
    <p>Loading into/unloading from a vehicle is non-private ; except if the package location is private to the vehicle!</p>
  </div>
  <div class="page">
    <p>A Closer Look at Agent Subplans</p>
    <p>Private vs. Non-Private</p>
    <p>Private affect and depend only on that agent</p>
    <p>Non-Private all the rest</p>
    <p>global plan</p>
    <p>local plan</p>
    <p>local plan from inside</p>
    <p>non-private actions in the plan ; coordination points</p>
    <p>arbitrarily long sequences of private actions between adjacent non-private actions</p>
  </div>
  <div class="page">
    <p>Example: Logistics</p>
    <p>Logistics</p>
    <p>imagine vehicles moving on a large map</p>
    <p>each vehicle has a service region</p>
    <p>; between each load/unload action, there are multiple move actions by the vehicle</p>
  </div>
  <div class="page">
    <p>Main Idea</p>
    <p>Algorithm</p>
  </div>
  <div class="page">
    <p>Main Idea</p>
    <p>Algorithm</p>
  </div>
  <div class="page">
    <p>Main Idea</p>
    <p>Algorithm</p>
  </div>
  <div class="page">
    <p>Main Idea</p>
    <p>Algorithm</p>
    <p>Iterative deepening on   # of coord-points per agent For each choice of</p>
    <p>Define a CSP whose solutions are consistent assignments to the coordination points</p>
    <p>ID</p>
  </div>
  <div class="page">
    <p>Main Idea</p>
    <p>Algorithm</p>
    <p>purely independent phase ; unary constraints can be reduced to regular strips planning</p>
    <p>ID</p>
  </div>
  <div class="page">
    <p>Complexity</p>
    <p>The complexity is derived from</p>
  </div>
  <div class="page">
    <p>Complexity</p>
    <p>The complexity is derived from</p>
    <p>O (k  ( exp ( +  + ) + single  exp ())</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Formal measure of coupling level by a combination of</p>
    <p>problem-specific #times an agent needs assistance  the inherent coupling level of the system</p>
    <p>Planning complexity polynomial in the number of agents (for fixed coupling level)</p>
    <p>Coordination complexity is not affected by the length of the local plans</p>
    <p>Generating fully distributed algorithm conceptually easy</p>
    <p>Use distributed CSP Local planning is already distributed</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>From strips to ma-strips</p>
    <p>Definition</p>
    <p>A strips problem is given by a quadruple  = P, A, I, G, where:</p>
    <p>P is a finite set of atoms, I  P is the initial situation, and G  P encodes the goal situations, Each action a  A is given by pre(a), add(a), del(a).</p>
  </div>
  <div class="page">
    <p>From strips to ma-strips</p>
    <p>Definition</p>
    <p>An ma-strips problem for a system of agents  = {i}ki=1 is given by a quadruple  = P, {Ai}ki=1, I, G, where:</p>
    <p>P is a finite set of atoms, I  P is the initial situation, and G  P encodes the goal situations, For 1  1  k, Ai is the set of actions that the agent i is capable of performing. Each action a  A=</p>
    <p>Ai is given</p>
    <p>by pre(a), add(a), del(a).</p>
  </div>
</Presentation>
