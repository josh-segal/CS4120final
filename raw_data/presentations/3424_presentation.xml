<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>REM: Resource Efficient Mining for Blockchains</p>
    <p>Fan Zhang, Ittay Eyal, Robert Escriva, Ari Juels, Robbert van Renesse</p>
    <p>Vancouver, Canada</p>
  </div>
  <div class="page">
    <p>The Cryptocurrency Vision</p>
    <p>Originally  Satoshi Nakamotos Bitcoin (08-09)  Decentralized currency</p>
  </div>
  <div class="page">
    <p>The Cryptocurrency Vision</p>
    <p>Originally  Satoshi Nakamotos Bitcoin (08-09)  Decentralized currency</p>
  </div>
  <div class="page">
    <p>Fintech Blockchain / DLT Vision  Bank to bank transactions (money, securities)  Smart contracts infrastructure  Security structuring  Insurance  Provenance (supply chain, art, fair trade)  IoT micropayments</p>
  </div>
  <div class="page">
    <p>Towards a Fintech blockchain Reality Fintech</p>
    <p>Probabilistic guarantees Hard requirements Handful tx/sec Thousands tx/sec Minutes/hours for confirmation</p>
    <p>Seconds for confirmation</p>
    <p>Problematic resource consumption</p>
    <p>No waste</p>
  </div>
  <div class="page">
    <p>PoW: Proof of Waste? Block proves (statistically) real-world waste  Capital expenditure  Operational expenditure</p>
    <p>Attacker must similarly waste resources</p>
  </div>
  <div class="page">
    <p>Environment-Friendly Alternatives in other settings</p>
    <p>Permissioned system (BFT)  Centralized</p>
    <p>Proof of Stake  needs a good solution for nothing-at-stake</p>
    <p>Proof of Storage (Space)  consumes storage instead of computation</p>
  </div>
  <div class="page">
    <p>Achieve the robustness of PoW without the waste?</p>
  </div>
  <div class="page">
    <p>Proof of Useful Work (PoUW): Repurpose innately useful work as</p>
    <p>mining effort</p>
  </div>
  <div class="page">
    <p>Software Guard eXtension</p>
    <p>Integrity</p>
    <p>Other software and even OS cannot tamper with control flow.</p>
    <p>Confidentiality</p>
    <p>Other sofware and even OS can learn nothing about the interal state*.</p>
    <p>* Modulo side channels</p>
    <p>Untrusted Operating System &amp; Hypervisor</p>
    <p>Untrusted Application Code</p>
    <p>Untrusted Hardware</p>
    <p>Trusted Processor</p>
    <p>Code &amp; Data</p>
    <p>Enclave</p>
  </div>
  <div class="page">
    <p>SGX: remote attestation</p>
    <p>Remote entityUntrusted Operating System &amp; Hypervisor</p>
    <p>Untrusted Application Code</p>
    <p>Untrusted Hardware</p>
    <p>Trusted Processor</p>
    <p>Code &amp; Data</p>
    <p>Sig[SK sgx</p>
    <p>, ]</p>
    <p>Only known to SGX</p>
    <p>Group Signature</p>
  </div>
  <div class="page">
    <p>SGX-backed blockchain: A new security model</p>
    <p>Permissionless  Anyone can join</p>
    <p>Partially decentralized  SGX works as advertised  Intel manages the group signature</p>
  </div>
  <div class="page">
    <p>Related: Proof of Elapsed Time (PoET)</p>
    <p>Simulate PoW by sleeping . Consensus in partially decentralized model (ideally) low mining cost + offhand mining</p>
  </div>
  <div class="page">
    <p>Unaddressed challenges in PoET Mining power not proportional to CPU value</p>
    <p>The Stale Chips Problem:  The equilibrium is to mine using old, useless devices  Build dedicated farms</p>
    <p>High mining cost (contrary to the original intent)</p>
  </div>
  <div class="page">
    <p>Intels PoET</p>
    <p>Individual CPUs can be compromised</p>
    <p>The Broken Chips Problem</p>
    <p>Intel proposes a simple statistical test. But 1. What is the adversarys advantage? 2. What is the cost of this test?</p>
  </div>
  <div class="page">
    <p>Proof of Useful Work</p>
    <p>o Replace the hash calculation in PoW with useful mining work</p>
    <p>o Each unit of useful work grants a Bernoulli test</p>
    <p>o Similar exponential block time</p>
  </div>
  <div class="page">
    <p>Count CPU instructions</p>
    <p>Why?  A representative (although not perfect) metric</p>
    <p>Can be done in a trustworthy way (i.e. w/o trusting OS etc.)</p>
    <p>Switching to better options (if any) doesnt change REM.</p>
    <p>Useful workMeter the useful work</p>
  </div>
  <div class="page">
    <p>Secure Instruction Counting</p>
    <p>Arbitrary (malicious) programs  Publicly verifiable  Dynamic + static program analysis</p>
    <p>P P Self-metering instrumentation</p>
    <p>Dynamic analysis</p>
    <p>- Enforcing WX code permission - Enforcing single-threaded enclaves - Details in the paper</p>
  </div>
  <div class="page">
    <p>If any success</p>
    <p>instructions</p>
    <p>, block header</p>
    <p>PoUW Enclave</p>
    <p>Simulate  Bernoulli tests</p>
    <p>P</p>
    <p>Eval[ ]P Result of P</p>
    <p>Yield similar exponential block</p>
    <p>interval.</p>
  </div>
  <div class="page">
    <p>Public Verifiability</p>
    <p>Two things to verify:  Validity of PoUW  Compliance</p>
    <p>i.e. P is correctly instrumented  Requires the code of P</p>
    <p>P P Self-metering instrumentation</p>
    <p>Put code on chain  Predefined P  Arbitrary P</p>
  </div>
  <div class="page">
    <p>Hierarchical Attestation</p>
    <p>Compliance Checker</p>
    <p>Alices Program</p>
    <p>Bobs Program</p>
    <p>Carolss Program</p>
    <p>Validity + Compliance</p>
    <p>PoUW:</p>
    <p>compliant:</p>
  </div>
  <div class="page">
    <p>SGX might not be perfect!</p>
    <p>Picture source: https://www.forbes.com/sites/susanadams/2015/12/02/howto-get-paid-to-do-nothing-5/#3fbbe0b14eaa</p>
    <p>Individual CPU might be broken  -&gt; Can forge PoUW at will  Broken chip problem</p>
  </div>
  <div class="page">
    <p>Implicit PKI in SGX</p>
    <p>Broken SGX CPUs cannot forge identities</p>
    <p>Intel manages the signature group</p>
  </div>
  <div class="page">
    <p>Tolerating Compromised SGX CPUs  Adversarial Model:</p>
    <p>may forge PoUW at will  can not forge identities</p>
    <p>Mitigation: statistical test  If a miner is way too lucky, her block shall not be accepted.  Devised rigorous framework</p>
  </div>
  <div class="page">
    <p>Advantage: adv revenue / honest revenue</p>
    <p>Adversarial Advantage (1 is optimal)</p>
  </div>
  <div class="page">
    <p>Cost: probability of false rejection</p>
    <p>False Rejection (0 is optimal)</p>
  </div>
  <div class="page">
    <p>Performance of REM</p>
  </div>
  <div class="page">
    <p>Conclusion  PoUW: a proof of useful work scheme that avoids waste  REM: a PoUW-based blockchain</p>
    <p>Efficient: up to 15% overhead relative to native linux programs  Broken chip problem: rigorous framework and effective policies.</p>
  </div>
</Presentation>
