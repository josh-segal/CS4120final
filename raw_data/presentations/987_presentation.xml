<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Replex: A Mul+-Index, Highly- Available Data Store</p>
    <p>Amy Tai*, Michael Wei*, Michael J. Freedman, IFai Abraham*, Dahlia Malkhi*</p>
    <p>*VMware Research, Princeton University</p>
  </div>
  <div class="page">
    <p>SQL vs NoSQL</p>
    <p>SQL NoSQL</p>
    <p>Rich querying model</p>
    <p>Transac+on support</p>
    <p>Simple, key-based querying No or limited transac+on support</p>
    <p>Poor performance Scalable</p>
    <p>Key-value stores Ex: HyperDex, Cassandra</p>
    <p>NewSQL</p>
    <p>Rich querying model</p>
    <p>Transac+on support</p>
    <p>High performance</p>
    <p>Ex: CockroachDB, Yesquel, H-Store</p>
    <p>SQL vs NoSQL</p>
  </div>
  <div class="page">
    <p>SQL vs NoSQL</p>
    <p>SQL NoSQL</p>
    <p>Rich querying model</p>
    <p>Transac+on support</p>
    <p>Simple, key-based querying No or limited transac+on support</p>
    <p>Poor performance Scalable</p>
    <p>Key-value stores Ex: HyperDex, Cassandra</p>
    <p>NewSQL</p>
    <p>Rich querying model</p>
    <p>Transac+on support</p>
    <p>High performance</p>
    <p>Ex: CockroachDB, Yesquel, H-Store</p>
    <p>SQL vs NoSQL</p>
  </div>
  <div class="page">
    <p>Replex enables richer queries without sacrificing shared-</p>
    <p>nothing scale-out</p>
  </div>
  <div class="page">
    <p>NoSQL Scales with Shared-Nothing Par++oning</p>
    <p>r[0] r[1] r[2] . . . r[c]! rows!</p>
    <p>default parCConing (primary) key</p>
    <p>col1! col2! . . .! colc!col0!</p>
  </div>
  <div class="page">
    <p>NoSQL Scales with Shared-Nothing Par++oning</p>
    <p>Par++ons (with respect to the</p>
    <p>primary index)</p>
  </div>
  <div class="page">
    <p>Key Observa+ons</p>
  </div>
  <div class="page">
    <p>Approach 1: Local Indexing Index stored locally at each par++on</p>
    <p>col1! col2! . . .! colc!col0!</p>
    <p>Index updates are local</p>
    <p>insert (r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Approach 1: Local Indexing Each par++on builds a local index</p>
    <p>col1! col2! . . .! colc!col0!</p>
    <p>Index updates are local</p>
    <p>Index lookups must be broadcast to all par++ons</p>
    <p>select * where col2=foo</p>
    <p>Poten+al synchroniza+on across par++ons 9</p>
  </div>
  <div class="page">
    <p>Index lookups executed on a single data structure</p>
    <p>Approach 2: Global Indexing Distributed data structure spans all par++ons</p>
    <p>col1! col2! . . .! colc!col0!</p>
    <p>Index updates could be mul+-hop</p>
    <p>insert (r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Key Observa+ons</p>
  </div>
  <div class="page">
    <p>Par++oning by Index  Storage Overheads</p>
    <p>col1! col2! . . .! colc!col0!</p>
    <p>default primary key</p>
    <p>Par++oning by index  must store data again</p>
  </div>
  <div class="page">
    <p>Par++oning by Index  Storage Overheads</p>
    <p>col1! col2! . . .! colc!col0!</p>
    <p>default primary key</p>
    <p>Ideally, build all indexes over a single copy of data</p>
  </div>
  <div class="page">
    <p>Par++oning by Index  Storage Overheads</p>
    <p>default primary key</p>
    <p>Then, replica+on also replicates indexes Ideally, build all indexes over a single copy of data</p>
    <p>col1! col2! . . .! colc!col0!</p>
  </div>
  <div class="page">
    <p>Par++oning by Index  Storage Overheads</p>
    <p>default parCConing key</p>
    <p>Instead, to make indexes durable, must 3-way replicate each par++oning of data</p>
    <p>col1! col2! . . .! colc!col0!</p>
  </div>
  <div class="page">
    <p>col1! col2! . . .! colc!col0!</p>
    <p>Par++oning by Index  Storage Overheads</p>
    <p>default parCConing key</p>
    <p>HyperDex</p>
    <p>Overheads!</p>
  </div>
  <div class="page">
    <p>Replex solves the indexing problem by combining indexing</p>
    <p>and replicaCon</p>
  </div>
  <div class="page">
    <p>Replex New replica+on unit: replex -- data replica par++oned and sorted with respect to an associated index</p>
    <p>replexes</p>
    <p>Serves data replica+on and indexing</p>
  </div>
  <div class="page">
    <p>Replex New replica+on unit: replex -- data replica par++oned and sorted with respect to an associated index</p>
    <p>replexes</p>
    <p>Serves data replica+on and indexing</p>
    <p>Replace data replicas with replexes</p>
    <p>Indexing comes free during replica+on</p>
  </div>
  <div class="page">
    <p>System Architecture col1! col2! . . .! colc!col0!</p>
  </div>
  <div class="page">
    <p>Inserts in Replex</p>
    <p>Replex uses a modified chain replica+on protocol</p>
  </div>
  <div class="page">
    <p>Which chain?</p>
    <p>All pairs of par++ons are poten+al chains</p>
  </div>
  <div class="page">
    <p>Inserts in Replex insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>insert (r[0] r[1] r[2] . . . r[c])</p>
    <p>?</p>
    <p>Par++on Determined by a replexs Index</p>
  </div>
  <div class="page">
    <p>Par++on Determined by a replexs Index</p>
    <p>?</p>
    <p>insert (r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Par++on Determined by a replexs Index insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Propaga+ng a Commit Bit insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Commit bits can be aborts insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
    <p>Uniqueness constraint on green replex can</p>
    <p>cause abort</p>
  </div>
  <div class="page">
    <p>Commit bits can be aborts insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Indexing is Free insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Index Reads in Replex</p>
    <p>select * where col2=foo</p>
    <p>row be returned</p>
  </div>
  <div class="page">
    <p>Par++on Failures</p>
    <p>Index is unavailable, data is available</p>
  </div>
  <div class="page">
    <p>Par++on Failures</p>
    <p>Index is unavailable, data is available</p>
    <p>Where is the data?</p>
  </div>
  <div class="page">
    <p>Finding Data Aler Failure</p>
    <p>Par++on Recovery Client Requests Parallel Recovery Requests must be mul+cast</p>
    <p>Lookups reduce to linear scan at each par++on</p>
    <p>Request AmplificaCon</p>
    <p>Recovery Time</p>
    <p>How to explore this tradeoff?</p>
  </div>
  <div class="page">
    <p>Hybrid Replex</p>
    <p>hybrid replex</p>
    <p>Hybrid replexes constrain poten+al data chains</p>
    <p>More targeted recovery</p>
  </div>
  <div class="page">
    <p>Recovery +me vs Request Amplifica+on</p>
    <p>Recovery is less parallel but lower request amplifica+on</p>
  </div>
  <div class="page">
    <p>Hybrid Replex: Defini+on</p>
    <p>Shared across r replexes</p>
    <p>Not associated with an index</p>
    <p>Par++oning func+on dependent on these r replexes</p>
  </div>
  <div class="page">
    <p>Replica+on Chains with Hybrid Replex insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Replica+on Chains with Hybrid Replex insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Replica+on Chains with Hybrid Replex</p>
    <p>? ? ? ?</p>
    <p>insert (r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Replica+on Chains with Hybrid Replex insert</p>
    <p>(r[0] r[1] r[2] . . . r[c])</p>
  </div>
  <div class="page">
    <p>Hybrid Replex: More Proper+es</p>
  </div>
  <div class="page">
    <p>Hybrid Replex: More Proper+es</p>
  </div>
  <div class="page">
    <p>Improving Failure Availability w/o Hybrid Replexes</p>
  </div>
  <div class="page">
    <p>Improve failure availability of mul+ple replexes</p>
  </div>
  <div class="page">
    <p>Improve failure availability of mul+ple replexes</p>
  </div>
  <div class="page">
    <p>Storage vs. recovery performance</p>
  </div>
  <div class="page">
    <p>Implementa+on</p>
    <p>Built on top of HyperDex, ~700 LOC  Implemented par++on recovery and request re-rou+ng on failure</p>
    <p>Implemented variety of hybrid replex configura+ons</p>
  </div>
  <div class="page">
    <p>Evalua+on</p>
  </div>
  <div class="page">
    <p>Evalua+on Setup</p>
    <p>Table with two indexes  12 server machines, 4 client machines  All machines colocated in the same rack, connected via 1GB top-of-rack switch</p>
    <p>8 CPU, 16GB memory per machine</p>
  </div>
  <div class="page">
    <p>Systems Under Evalua+on</p>
    <p>Replex-2</p>
    <p>HyperDex Replex-3</p>
  </div>
  <div class="page">
    <p>Steady State Latency</p>
    <p>Reads Inserts</p>
    <p>C D</p>
    <p>F</p>
    <p>Replex3 HyperDex</p>
    <p>C D</p>
    <p>F</p>
    <p>Replex3 HyperDex</p>
    <p>Replex-2 not included because it has a lower fault tolerance threshold</p>
    <p>Reads against either index have similar latency, but we report reads against primary index</p>
  </div>
  <div class="page">
    <p>Single Failure Performance</p>
    <p>O pe</p>
    <p>ra tio</p>
    <p>ns /s</p>
    <p>K 10</p>
    <p>Replex2 Replex3 HyperDex</p>
    <p>Experiment  Load with 10M, 100 byte rows  Split reads 50:50 between each index</p>
    <p>Failure</p>
  </div>
  <div class="page">
    <p>Single Failure: Recovery Time</p>
    <p>O pe</p>
    <p>ra tio</p>
    <p>ns /s</p>
    <p>K 10</p>
    <p>Replex2 Replex3 HyperDex</p>
    <p>Recovery Time 1. HyperDex recovers slowest because 2-3x more data 2. Replex-2 recovers fastest because least data, parallel recovery</p>
  </div>
  <div class="page">
    <p>Single Failure: Failure Throughput</p>
    <p>O pe</p>
    <p>ra tio</p>
    <p>ns /s</p>
    <p>K 10</p>
    <p>Replex2 Replex3 HyperDex</p>
    <p>Failure Throughput 1. Replex-2 low throughput because of high request amplifica+on 2. Replex-3 has throughput comparable to HyperDex</p>
    <p>Increased throughput with hybrid replex</p>
  </div>
  <div class="page">
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Ques+ons?</p>
  </div>
</Presentation>
