<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM: A Parallel Key/Value Store Framework for HPC</p>
    <p>Hugh Greenberg 7/6/2015</p>
    <p>LA-UR-15-25039</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>HPC Clusters</p>
    <p>Managed by a job scheduler (e.g., Slurm, Moab)  Designed for running user jobs  Difficult to run system services</p>
    <p>Parallel file systems  High performing with N-N workloads</p>
    <p>N application processes accessing N files simultaneously</p>
    <p>Slide 2</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>HPC Clusters</p>
    <p>High speed interconnects  Infiniband  Cray Gemini</p>
    <p>Composed of high-end compute nodes  Server class hardware or better</p>
    <p>Slide 3</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>HPC Clusters</p>
    <p>High speed interconnects  Infiniband  Cray Gemini</p>
    <p>Composed of high-end compute nodes  Server class hardware or better</p>
    <p>Slide 4</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>Motivation</p>
    <p>Exascale  More processes performing file operations</p>
    <p>simultaneously  Less memory per CPU core</p>
    <p>Existing solutions  For cloud storage or web services  Do not efficiently utilize HPC environments</p>
    <p>and programming models</p>
    <p>Slide 5</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>Motivation</p>
    <p>Existing solutions  Require long running daemons  TCP/IP only  Cannot be easily added to HPC applications</p>
    <p>Lack C/C++ APIs  Require additional languages</p>
    <p>E.g., Cassandra, Dynamo, HBase, Riak</p>
    <p>Slide 6</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>Motivation</p>
    <p>Parallel Log Structured File System  Developed at LANL  Turns N-1 workloads into N-N  Requires each process to read a potentially</p>
    <p>large index into memory  Needed a scalable index</p>
    <p>Slide 7</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>Solution</p>
    <p>MDHIM  Multi-Dimensional Hashing Indexing Middleware</p>
    <p>Distributed key/value store framework designed for HPC</p>
    <p>Written in HPC friendly programming model  MPI  Easily added to an MPI application</p>
    <p>Slide 8</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Features</p>
    <p>Doesnt require long running daemons  Servers (range servers) are spawned as</p>
    <p>separate threads  Starts with the application and dies with it</p>
    <p>Pluggable data stores  LevelDB as default  MySQL support  Not difficult to additional data stores</p>
    <p>Slide 9</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Features  Bulk operations</p>
    <p>Transfer large packets with many key/value pairs over a high-speed interconnect</p>
    <p>Multiple dimensions  The primary index</p>
    <p>Key/value pairs with arbitrary values  Globally ordered</p>
    <p>Secondary indexes  Keys with values that point to the keys of the</p>
    <p>primary index  Globally ordered or local to the range server</p>
    <p>Slide 10</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM  Global Indexes</p>
    <p>Supports global ordering  Keys can be retrieved in order</p>
    <p>Order depends on key type  Each key maps to a single range server  Clients use the paritioner algorithm for the key</p>
    <p>location  Avoids querying range servers  Requires a single large data transfer of statistics</p>
    <p>data (mdhimStatFlush)</p>
    <p>Slide 11</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM  Global Indexes</p>
    <p>Cursor operations  Get next or previous key  Traverses range servers  Requires a single large data transfer of</p>
    <p>statistics data (mdhimStatFlush)</p>
    <p>Slide 12</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM- Local Indexes</p>
    <p>Supports local indexes  Each rank can store key/value pairs to itself  Lookups require querying multiple servers</p>
    <p>mdhimStatFlush can help to reduce the number of queries</p>
    <p>Slide 13</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Partitioning</p>
    <p>Built-in partitioning algorithm with reasonable defaults</p>
    <p>Pluggable partitioning planned  User defined functions for mapping of keys to</p>
    <p>range servers</p>
    <p>Slide 14</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Design  MDHIM contains a</p>
    <p>client and range server</p>
    <p>Each rank in this image is running a range server.</p>
    <p>Clients use the partitioner to determine which range server to contact</p>
    <p>MDHIM software design</p>
    <p>Slide 15</p>
    <p>Rank 1</p>
    <p>AppApp</p>
    <p>Client</p>
    <p>Range Server</p>
    <p>MDHIM Library</p>
    <p>Ranges: 1,4,7</p>
    <p>Client</p>
    <p>Range Server</p>
    <p>MDHIM Library</p>
    <p>Ranges: 3,6,9</p>
    <p>Rank 2</p>
    <p>App</p>
    <p>Client</p>
    <p>Range Server</p>
    <p>MDHIM Library</p>
    <p>Ranges: 2,5,8</p>
    <p>Rank 3</p>
    <p>App</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>Compared against Cassandra  Used the Yahoo Cloud Serving Benchmark</p>
    <p>Created an MDHIM plugin  Used built-in Cassandra plugin  Random integers as keys</p>
    <p>Tests performed on LANL Mustang Cluster  2 AMD 12-core MagnyCours  64GB of memory per node  1600 nodes</p>
    <p>Slide 16</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>Cassandra used IP over Infiniband  MDHIM used native Infinband  Tuned Cassandra and LevelDB to use 50MB of</p>
    <p>memory  Cassandra configured to use batch mode</p>
    <p>Default periodic  Forces Cassandra to wait until data is synced</p>
    <p>to disk before returning  Matches MDHIM/LevelDB</p>
    <p>Slide 17</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>Slide 18</p>
    <p>Two types of tests are represented: 1K records per node and 100k records per process. Three runs were performed at each point.</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>Slide 19</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>MDHIM performs slightly better than Cassandra for the 1K records per nodes weak scaling test</p>
    <p>MDHIM out performs Cassandra for the 100K records per node test and the strong scaling test  3.375 times faster with 256 processes</p>
    <p>Slide 20</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>Reasons for MDHIMs performance  Native Infiniband support  Better key distribution  C vs Java</p>
    <p>Slide 21</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>MDHIM - Evaluation</p>
    <p>Slide 22</p>
    <p>The frequency of database sizes for Cassandra and MDHIM after a run with 128 nodes and 100K records inserted per node.</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>Conclusion</p>
    <p>MDHIM is a parallel key/value store framework for HPC</p>
    <p>Designed for HPC systems and job schedulers  Utilizes high speed interconnects and MPI  Easily added to a scientific application</p>
    <p>Outperformed Cassandra in all tests with the Yahoo Cloud Serving Benchmark (YCSB)</p>
    <p>Slide 23</p>
  </div>
  <div class="page">
    <p>UNCLASSIFIED</p>
    <p>Thank you</p>
    <p>Code  http://github.com/mdhim/mdhim-tng</p>
    <p>Contact  Hugh Greenberg  hng@lanl.gov</p>
    <p>Slide 24</p>
  </div>
</Presentation>
