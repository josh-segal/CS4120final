<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Surviving congestion in geo-distributed storage systems</p>
    <p>Brian Cho</p>
    <p>Marcos K. Aguilera</p>
    <p>University of Illinois at Urbana-Champaign</p>
    <p>Microsoft Research Silicon Valley</p>
  </div>
  <div class="page">
    <p>Geo-distributed data centers</p>
    <p>Web applications increasingly deployed across geo-distributed data centers</p>
    <p>e.g., social networks, online stores, messaging</p>
    <p>App data replicated across data centers</p>
    <p>Disaster tolerance</p>
    <p>Access locality</p>
  </div>
  <div class="page">
    <p>Congestion between geo-distributed data centers</p>
    <p>Limited bandwidth between data centers</p>
    <p>e.g., leased lines, MPLS VPN</p>
    <p>Bandwidth is expensive: ~1K $/Mbps [SprintMPLS]</p>
    <p>Provision for typical (not peak) usage</p>
    <p>Many machines in each data center</p>
  </div>
  <div class="page">
    <p>Congestion  Delay between geo-distributed data centers</p>
    <p>Congestion can cause significant delays  TCP messaging increases to order-of-seconds (Figure)</p>
    <p>Observed across Amazon EC2 data centers [Kraska et al]</p>
    <p>Users do not tolerate delays (&lt;1s) [Nielsen]</p>
    <p>FIGURE: RPC round trip delay under congestion (10-30s)</p>
  </div>
  <div class="page">
    <p>Replication techniques applied to geo-distributed data centers</p>
    <p>Weak consistency  e.g., Amazon Dynamo, Yahoo PNUTS, COPS  Good performance: updates can be propagated</p>
    <p>asynchronously  Semantics undesirable in some cases</p>
    <p>(e.g., writes get re-ordered across replicas)</p>
    <p>Strong consistency</p>
    <p>e.g., ABD, Paxos, available in Google Megastore, Amazon SimpleDB</p>
    <p>Avoids the many problems of weak consistency  Must wait for updates to propagate across data centers  App delay requirements difficult to meet under congestion</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Vivace: a strongly consistent key-value store that is resilient to congestion across geo-distributed data centers</p>
    <p>Approach  New algorithms send small amount of critical</p>
    <p>information across data centers in separate prioritized messages</p>
    <p>Challenges  Still provide strong consistency</p>
    <p>Keep prioritized messages small</p>
    <p>Avoid delay overhead in absence of congestion</p>
  </div>
  <div class="page">
    <p>Vivace algorithms</p>
    <p>Enhance previous strongly consistent algorithms  Prioritize small amount of critical information</p>
    <p>across sites</p>
  </div>
  <div class="page">
    <p>Vivace algorithms</p>
    <p>Enhance previous strongly consistent algorithms  Prioritize small amount of critical information</p>
    <p>across sites</p>
    <p>Two algorithms: 1. Read/write algorithm</p>
    <p>Very simple  Based on traditional quorum algorithm [ABD]  Linearizable read() and write()  read() contains a write-back phase</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>&lt;WRITE,key,val,ts&gt; 1</p>
    <p>val is large (compared with</p>
    <p>key &amp; ts)</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>&lt;WRITE,key,val,ts&gt; 1</p>
    <p>&lt;ACK-WRITE&gt;</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>&lt;WRITE,key,val,ts&gt; 1</p>
    <p>write done</p>
    <p>&lt;ACK-WRITE&gt;</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>&lt;READ,key&gt; 1</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client &lt;READ,key&gt;</p>
    <p>&lt;ACK-READ,val,ts&gt;</p>
    <p>large val</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>&lt;WRITE,key,val,ts&gt; 2</p>
    <p>writeback: ensures strong consistency (linearizability)</p>
    <p>large val, again!</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>&lt;WRITE,key,val,ts&gt; 2</p>
    <p>writeback: ensures strong consistency (linearizability)</p>
    <p>large val, again!</p>
    <p>&lt;ACK-WRITE&gt;</p>
  </div>
  <div class="page">
    <p>Traditional quorum algorithm: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>read done</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>new quorum of local replicas</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;W-LOCAL,key,val,ts&gt; 1</p>
    <p>val sent locally</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;ACK-W-LOCAL&gt;</p>
    <p>&lt;W-LOCAL,key,val,ts&gt; 1</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;W-TS,key,ts&gt; 2</p>
    <p>no val: small message!</p>
    <p>prioritize</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;W-TS,key,ts&gt; 2</p>
    <p>no val: small message!</p>
    <p>prioritize</p>
    <p>&lt;ACK-W-TS&gt;</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>write done</p>
    <p>Replica 1,2,3 have a consistent view of key &amp; ts,</p>
    <p>but no val (yet)</p>
  </div>
  <div class="page">
    <p>Vivace: write</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;W-REMOTE,key,val,ts&gt; *</p>
    <p>val is still large, but not in</p>
    <p>critical path</p>
    <p>Replica 1,2,3 add val to their consistent view of key &amp; ts</p>
  </div>
  <div class="page">
    <p>write comparison</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client 1</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>*</p>
    <p>Traditional algorithm: 1 remote RTT</p>
    <p>Vivace algorithm: 1 prioritized remote RTT +</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>prioritize</p>
    <p>&lt;R-TS,key&gt; 1</p>
    <p>only ask for ts</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>prioritize</p>
    <p>&lt;R-TS,key&gt; 1</p>
    <p>&lt;ACK-R-TS,ts&gt;</p>
    <p>small message</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;R-DATA,key,ts&gt; 2</p>
    <p>ask for data with largest ts</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;R-DATA,key,ts&gt; 2</p>
    <p>&lt;ACK-R-DATA,val&gt;</p>
    <p>large val, but wait for only one reply</p>
    <p>(common case: local)</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;W-TS,key,ts&gt; 3</p>
    <p>prioritize</p>
    <p>writeback only small ts</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>&lt;ACK-W-TS&gt;</p>
    <p>&lt;W-TS,key,ts&gt;</p>
    <p>prioritize</p>
  </div>
  <div class="page">
    <p>Vivace: read</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Local Replica 1</p>
    <p>Local Replica 2</p>
    <p>Local Replica 3</p>
    <p>read done</p>
  </div>
  <div class="page">
    <p>read comparison</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Replica 2 Replica 3 Replica 1</p>
    <p>Client</p>
    <p>Traditional algorithm: 2 remote RTTs</p>
    <p>Vivace algorithm: 2 prioritized remote RTT +</p>
  </div>
  <div class="page">
    <p>Evaluation topics</p>
    <p>Practical prioritization setup</p>
    <p>Delay with congestion</p>
    <p>KV-store operations</p>
    <p>Twitter clone web app operations</p>
    <p>Delay without congestion</p>
    <p>Overhead of Vivace algorithms compared to traditional algorithms</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Local cluster &lt;-&gt; Amazon EC2 Ireland</p>
    <p>DSCP bit prioritization on local routers egress port</p>
    <p>Congestion generated with iperf</p>
    <p>Local cluster (Illinois)</p>
    <p>Amazon EC2 (Ireland)</p>
    <p>prioritization applied here</p>
    <p>only</p>
  </div>
  <div class="page">
    <p>Evaluation Does prioritization work in practice?</p>
    <p>Simple ping experiment</p>
    <p>Prioritized messages bypass congestion</p>
    <p>Local router-based prioritization is effective</p>
  </div>
  <div class="page">
    <p>Evaluation How well does Vivace perform under congestion?</p>
    <p>KV-store operations</p>
    <p>Twitter-clone operations</p>
    <p>(a) Read algorithms</p>
    <p>(b) Write algorithms</p>
    <p>(c) State machine algorithms</p>
    <p>(a) Post tweet</p>
    <p>(b) Read user timeline</p>
    <p>(c) Read friends timeline</p>
  </div>
  <div class="page">
    <p>buffering delay</p>
    <p>TCP resend on packet loss</p>
    <p>avoids congestion</p>
    <p>delays</p>
    <p>(a) Read algorithms</p>
    <p>Evaluation How well does Vivace perform under congestion?</p>
  </div>
  <div class="page">
    <p>Evaluation What is the overhead of Vivace without congestion?</p>
    <p>(Results in paper)</p>
    <p>No measurable overhead compared to traditional algorithms</p>
    <p>Extra message phases are not harmful</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Proposed two new algorithms  Read/write (simple, in talk)  State machine (more complex, in paper)</p>
    <p>Both algorithms avoid delay due to congestion by prioritizing a small amount of critical information, while  Still providing strong consistency  Keeping prioritized messages small  Avoiding delay overhead in absence of congestion  Using a practical prioritization infrastructure</p>
    <p>Careful use of prioritized messages can be an effective</p>
    <p>strategy in geo-distributed data centers</p>
  </div>
</Presentation>
