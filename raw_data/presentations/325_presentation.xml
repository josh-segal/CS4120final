<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Pedagogical Possibilities for</p>
    <p>the Dice Game Pig</p>
    <p>Todd Neller, Clif Presser  Gettysburg College Ingrid Russell  University of Hartford</p>
    <p>Zdravko Markov  Central Connecticut State University</p>
    <p>This work was sponsored in part by NSF DUE CCLI-A&amp;I Award</p>
    <p>Number 0409497.</p>
  </div>
  <div class="page">
    <p>Simple Examples are Teaching</p>
    <p>Treasures</p>
    <p>Concise specification  Simply explained,</p>
    <p>avoiding distracting details</p>
    <p>Elegant solution  Simply solved,</p>
    <p>highlighting target concepts</p>
    <p>Engages student  Sparks curiosity,</p>
    <p>nurturing intrinsic motivations</p>
  </div>
  <div class="page">
    <p>Pig</p>
    <p>One of the most fun, extremely simple dice</p>
    <p>games</p>
    <p>Extremely simple  described in two</p>
    <p>sentences</p>
    <p>Fun  spawned commercial variants, e.g.</p>
    <p>Pass the Pigs (a.k.a. Pigmania, 1977)</p>
    <p>Used extensively by math educators</p>
    <p>CS can benefit as well!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Pig Rules</p>
    <p>Pedagogical Possibilities</p>
    <p>CS1</p>
    <p>Artificial Intelligence</p>
    <p>Machine Learning</p>
    <p>Graphics</p>
    <p>Networking</p>
  </div>
  <div class="page">
    <p>Pig Rules</p>
    <p>The first player reaching 100 points wins.</p>
    <p>On each turn, a player rolls a die as many</p>
    <p>times as desired until either the player</p>
    <p>holds and scores the sum of the rolls, or</p>
    <p>rolls a 1 and scores nothing.</p>
    <p>Lets play!</p>
  </div>
  <div class="page">
    <p>CS1  Algorithms</p>
    <p>Exercises:</p>
  </div>
  <div class="page">
    <p>Hold at 20 Turn Comments</p>
  </div>
  <div class="page">
    <p>Hold at 20 Turn Code</p>
  </div>
  <div class="page">
    <p>CS1  Objects</p>
    <p>Objects:</p>
    <p>Game</p>
    <p>Die</p>
    <p>Player</p>
    <p>Human player</p>
    <p>Computer player</p>
  </div>
  <div class="page">
    <p>MLExAI: Solving the</p>
    <p>Dice Game Pig</p>
  </div>
  <div class="page">
    <p>Optimality Equations</p>
    <p>i = player score, j = opponent score,</p>
    <p>k = turn total</p>
  </div>
  <div class="page">
    <p>Optimal Play</p>
  </div>
  <div class="page">
    <p>Dynamic Programming</p>
    <p>Fibonacci example</p>
    <p>Progressive Pig: score at least 1 per turn</p>
    <p>acyclic state space</p>
    <p>Worked example using Knuths literate</p>
    <p>programming style, e.g.</p>
  </div>
  <div class="page">
    <p>Dynamic Programming (cont.)</p>
    <p>Exercises:</p>
    <p>Pig solitaire: reach goal score g in n turns</p>
    <p>Pig solitaire 2: maximize score in n turns</p>
    <p>THINK solitaire: 2-dice Pig variant in 5 turns</p>
    <p>Advanced projects:</p>
    <p>Risk board game analysis</p>
    <p>Simple Yahtzee variant analysis</p>
  </div>
  <div class="page">
    <p>Value Iteration</p>
    <p>Worked example: Piglet</p>
    <p>Pig with a coin and goal score of 10</p>
    <p>Score heads flipped or nothing if a tail is flipped</p>
    <p>Exercises:</p>
    <p>Pig</p>
    <p>Pig Solitaire 3: minimize turns to reach goal score g</p>
    <p>Pass the Pigs</p>
    <p>Advanced projects:</p>
    <p>Hog: Pig with single throw of as many dice as desired</p>
    <p>10,000: jeopardy dice game</p>
  </div>
  <div class="page">
    <p>Machine Learning</p>
    <p>Comparative study of RL algorithms:</p>
    <p>Useful as simple (but not trivial) benchmark</p>
    <p>Precise optimal policy/state values known</p>
    <p>through value iteration</p>
    <p>Monte-Carlo/TD learning: model free, but</p>
    <p>slower convergence for infrequent states</p>
    <p>Transition to more complex Markov games</p>
  </div>
  <div class="page">
    <p>Scientific Visualization</p>
    <p>Marching Cubes Algorithm</p>
  </div>
  <div class="page">
    <p>Networking</p>
    <p>Illustrate network programming</p>
    <p>Client-server, peer-to-peer (P2P),</p>
    <p>Simple game  focus on networking</p>
    <p>concepts, not game</p>
    <p>Fun factor</p>
  </div>
  <div class="page">
    <p>What Other Courses?</p>
    <p>This is what has been done.</p>
    <p>What other potentials are there?</p>
    <p>Game Programming?</p>
    <p>Software Engineering?</p>
    <p>GUI Design?</p>
    <p>&lt;Insert your course here&gt;?</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Simple examples are teaching treasures.</p>
    <p>Pig is a simple, fun teaching example for:</p>
    <p>CS1 (algorithm design, OO design)</p>
    <p>AI (MDPs, DP, value iteration)</p>
    <p>Machine Learning, Graphics, Networking</p>
    <p>Etc.</p>
  </div>
  <div class="page">
    <p>Resources</p>
    <p>http://cs.gettysburg.edu/~tneller/resources/pig</p>
    <p>Game of Pig Website</p>
    <p>CCSCNE paper, PPT</p>
    <p>CS1 Exercises</p>
    <p>MLExAI Pig project</p>
    <p>2 UMAP Journal papers</p>
    <p>This work was sponsored in part by NSF</p>
    <p>DUE CCLI-A&amp;I Award Number 0409497.</p>
  </div>
</Presentation>
