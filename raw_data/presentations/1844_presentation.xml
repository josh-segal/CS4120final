<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>L.C.Smith College of Engineering and Computer Science</p>
    <p>Privacy-Preserving Offloading of Mobile App to the Public Cloud</p>
    <p>Yue Duan, Mu Zhang, Heng Yin and Yuzhe Tang Department of EECS Syracuse University</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction to offloading  Motivating example  System design &amp; goals  Implementation details  Preliminary evaluation  Discussion</p>
  </div>
  <div class="page">
    <p>Introduction to offloading</p>
    <p>More and more complicated mobile apps are developed and installed.</p>
    <p>However, mobile devices have only limited hardware resources.</p>
  </div>
  <div class="page">
    <p>Introduction to offloading</p>
    <p>In order to preserve limited hardware resources (CPU, battery etc.), researchers develop techniques to execute part of the mobile apps to cloud server.</p>
    <p>offloading</p>
  </div>
  <div class="page">
    <p>Introduction to offloading</p>
    <p>Most existing research work focuses on identifying computation-intensive portion of the program to offload.</p>
    <p>- MAUI[MobiSys10] - CloneCloud[EuroSys11] - COMET[OSDI12]</p>
    <p>Mobile app offloading needs to send code and data to the public cloud to enable the program execution.</p>
    <p>There is little work that attempts to address the privacy issue during offloading.</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction to offloading  Motivating example  System design &amp; goals  Implementation details  Preliminary evaluation  Discussion</p>
  </div>
  <div class="page">
    <p>Motivating example</p>
    <p>Example: a simplified photo editor</p>
    <p>Non-offloadable code</p>
    <p>Computation-intensive code</p>
  </div>
  <div class="page">
    <p>Motivating example</p>
    <p>From the motivating example, we learn:  Some data-flow analysis is needed to identify</p>
    <p>non-offloadable code  Fine-grained app offloading is needed</p>
    <p>(method-level offloading is not enough)  Computation-intensive code maybe interleaved</p>
    <p>with non-offloadable code (differentiate offloadable code from non-offloadable code )</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction to offloading  Motivating example  System design &amp; goals  Implementation details  Preliminary evaluation  Discussion</p>
  </div>
  <div class="page">
    <p>System design &amp; goals</p>
    <p>The whole system is consisted of four major components: 1. Static Analysis: Identify and extract offloadable code regions 2. Instrumentation &amp; Partition: Invoke dynamic decision-making</p>
    <p>component and perform offloading 3. Cloud-side Deployment: Use offloadable code regions to create a</p>
    <p>Java program on server side 4. Dynamic decision Making: Collect system information at runtime</p>
    <p>and make dynamic offloading decisions</p>
  </div>
  <div class="page">
    <p>System design &amp; goals</p>
    <p>From our system design, we aim at achieving the following design goals:  Privacy preservation: keep user private data</p>
    <p>within mobile devices during offloading  Automatic offloading: do not involve any human</p>
    <p>effort such as user annotation  High performance: self-explanatory but we face</p>
    <p>new challenges due to fine-grained app offloading</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction to offloading  Motivating example  System design &amp; goals  Implementation details  Preliminary evaluation  Discussion</p>
  </div>
  <div class="page">
    <p>Implementation  Static Analysis</p>
    <p>Dalvik bytecode</p>
    <p>Java bytecode</p>
    <p>Jimple IR Sootdex2jar static</p>
    <p>analysis offloadable</p>
    <p>code regions</p>
    <p>non-offloadable code</p>
    <p>identification</p>
    <p>code grouping pre-filtering</p>
    <p>Static analysis has three major steps: 1. non-offloadable code identification 2. offloadable code grouping 3. pre-filtering</p>
  </div>
  <div class="page">
    <p>Implementation  Static Analysis</p>
    <p>Dalvik bytecode</p>
    <p>Java bytecode</p>
    <p>Jimple IR Sootdex2jar static</p>
    <p>analysis offloadable</p>
    <p>code regions</p>
    <p>non-offloadable code</p>
    <p>identification</p>
    <p>code grouping pre-filtering</p>
    <p>Definition of privacy: Our system allows user to configure what is considered as private information. Currently, we consider location, system setting (locale) and device ID as private by default.</p>
  </div>
  <div class="page">
    <p>Implementation  Static Analysis</p>
    <p>Dalvik bytecode</p>
    <p>Java bytecode</p>
    <p>Jimple IR Sootdex2jar static</p>
    <p>analysis offloadable</p>
    <p>code regions</p>
    <p>non-offloadable code</p>
    <p>identification</p>
    <p>code grouping pre-filtering</p>
    <p>We statically identify those non-offloadable code: 1) private data manipulation statements (real privacy) 2) GUI components (touch event) 3) local resource access (file access) 4) APIs that rely on Android OS or physical device to execute</p>
    <p>(send text message)</p>
  </div>
  <div class="page">
    <p>Implementation  Static Analysis</p>
    <p>After identifying the non-offloadable code, all other code should be offloadable. We then group those offloadable statements into a number of code regions.</p>
    <p>Dalvik bytecode</p>
    <p>Java bytecode</p>
    <p>Jimple IR Sootdex2jar static</p>
    <p>analysis offloadable</p>
    <p>code regions</p>
    <p>non-offloadable code</p>
    <p>identification</p>
    <p>code grouping pre-filtering</p>
  </div>
  <div class="page">
    <p>Implementation  Static Analysis</p>
    <p>Code grouping has two goals: 1. Keep the original program logic 2. Maximize the code regions to minimize instrumentation and communication overhead Algorithm 1 achieves these two goals. Please refer to the paper for the details.</p>
  </div>
  <div class="page">
    <p>Implementation  Static Analysis</p>
    <p>Dalvik bytecode</p>
    <p>Java bytecode</p>
    <p>Jimple IR Sootdex2jar static</p>
    <p>analysis offloadable</p>
    <p>code regions</p>
    <p>non-offloadable code</p>
    <p>identification</p>
    <p>code grouping pre-filtering</p>
    <p>Pre-filtering is performed to filter out small code regions that are not computation-intensive. Do not contain loops and have a small number of statements. Because potentially, offloading those small code regions will not bring benefit.</p>
  </div>
  <div class="page">
    <p>Implementation - Instrumentation  Make a copy of offloadable code regions in the app  Each copied code region becomes one RPC method  Instrument the original program by inserting decision</p>
    <p>making code and remote procedural calls.</p>
  </div>
  <div class="page">
    <p>Implementation  Runtime decision  Create an Android service to make offloading</p>
    <p>decisions based on runtime information (network)  Service component runs in the background and</p>
    <p>returns true/false to allow/disallow offloading.</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Introduction to offloading  Motivating example  System design &amp; goals  Implementation details  Preliminary evaluation  Discussion</p>
  </div>
  <div class="page">
    <p>Preliminary evaluation</p>
    <p>We conduct our preliminary evaluation on a Nexus S model device running Android 4.0.4 in local network environment.</p>
    <p>We evaluate our system with two Android applications.  Photo editor that embeds location information into</p>
    <p>the picture  Color detector that shows text in different</p>
    <p>languages based on current locale setting</p>
  </div>
  <div class="page">
    <p>Preliminary evaluation</p>
    <p>Runtime performance: speed up by 25.5% and 53.8% respectively for the two apps.</p>
  </div>
  <div class="page">
    <p>Preliminary evaluation</p>
    <p>Power consumption: reduced by 15.9% and 38.7% respectively.</p>
  </div>
  <div class="page">
    <p>Preliminary evaluation</p>
    <p>App size: negligibly increased by 0.4% and 0.8%.</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Dynamic privacy policy configuration So far, our privacy configuration has been static. We would like to extend it to a dynamic fashion. This requirement might completely change the system design.  Communication Versus Computation How to quantify the benefits of offloading using various of system and program information?</p>
  </div>
</Presentation>
