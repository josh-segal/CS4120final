<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Pay Migration Tax to Homeland:</p>
    <p>Anchor-based Scalable</p>
    <p>Reference Counting for Multicores</p>
    <p>Seokyong Jung, Jongbin Kim, Minsoo Ryu,</p>
    <p>Sooyong Kang, Hyungsoo Jung</p>
    <p>Hanyang University</p>
  </div>
  <div class="page">
    <p>Reference counting</p>
    <p>It is</p>
    <p>a general technique to manage the number of references for resources</p>
    <p>mainly used to reclaim resources in timely manner</p>
    <p>Scalability is the most important challenge in multicore environment</p>
  </div>
  <div class="page">
    <p>Known scalability issues of reference counting in Linux</p>
    <p>Read throughput for a same page in a single file</p>
    <p>(Min et al. ATC16)</p>
    <p>Traditional Counting in Linux</p>
    <p>CAS(counter,v,v+1)</p>
    <p>CAS(counter,v,v-1)</p>
    <p>Increment:</p>
    <p>Decrement:</p>
    <p>Thread CounterAtomic counter</p>
  </div>
  <div class="page">
    <p>Counting Overhead</p>
    <p>Cost for updating a reference counter</p>
    <p>Query Overhead</p>
    <p>Cost for checking if a reference</p>
    <p>counter is zero</p>
    <p>Space Overhead</p>
    <p>Space required for reference counter</p>
    <p>itself</p>
    <p>Time Overhead</p>
    <p>Time for synchronizing between</p>
    <p>internal structures for reference</p>
    <p>counting</p>
    <p>Four performance metrics we established</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>Ideal</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals</p>
    <p>Low space overhead</p>
    <p>Traditional Counting</p>
    <p>High counting overhead</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>Low query overhead</p>
    <p>Low time overhead</p>
    <p>Reference</p>
    <p>Thread CounterAtomic counter</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Contention Distribution</p>
    <p>Worse space overhead</p>
    <p>Better counting overhead</p>
    <p>Worse query overhead</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>Reference</p>
    <p>Thread CounterAtomic counter</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Contention Distribution</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead Prior proposals:</p>
    <p>SNZI (Ellen et al., SOSP07)</p>
    <p>Carrefour (Dashti et al., SIGPLAN Notices (2013))</p>
    <p>Doppel (Nurula et al., OSDI14)</p>
    <p>Dynamic SNZI (Acar et al., PPoPP17)</p>
    <p>Reference</p>
    <p>Thread CounterAtomic counter</p>
    <p>Worse space overhead</p>
    <p>Better counting overhead</p>
    <p>Worse query overhead</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Cache Affinity</p>
    <p>Worse space overhead</p>
    <p>Better counting overhead</p>
    <p>Worse query overhead</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>Reference</p>
    <p>core core core core</p>
    <p>Thread CounterAtomic counter</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead Prior proposals:</p>
    <p>percpu_counter structure in Linux (2006) Sloppy counter (Boyd-Wickizer et al., OSDI10)</p>
    <p>percpu_ref structure in Linux (2013)</p>
    <p>Cache Affinity</p>
    <p>Reference</p>
    <p>core core core core</p>
    <p>Thread CounterAtomic counter</p>
    <p>Worse space overhead</p>
    <p>Better counting overhead</p>
    <p>Worse query overhead</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Worse query overhead</p>
    <p>Worse time overhead</p>
    <p>Better counting overhead</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>Per-core Hash</p>
    <p>Obj A</p>
    <p>Obj C</p>
    <p>Obj A</p>
    <p>Obj B</p>
    <p>Reference</p>
    <p>core core core core</p>
    <p>Thread CounterAtomic counter</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
    <p>Obj B</p>
    <p>Central</p>
    <p>counter</p>
    <p>Obj C</p>
    <p>Central</p>
    <p>counter</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead Prior proposals:</p>
    <p>Reference counting using Linux RCU (Mckenny et al., TR (2013))</p>
    <p>RadixVM (Clements et al., EuroSys13)</p>
    <p>OpLog (Boyd-Wickizer, PhD thesis (2014))</p>
    <p>ScaleFS (Bhat et al., SOSP17)</p>
    <p>Per-core Hash</p>
    <p>Worse query overhead</p>
    <p>Worse time overhead</p>
    <p>Better counting overhead</p>
    <p>Obj A</p>
    <p>Obj C</p>
    <p>Obj A</p>
    <p>Obj B</p>
    <p>Reference</p>
    <p>core core core core</p>
    <p>Thread CounterAtomic counter</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
    <p>Obj B</p>
    <p>Central</p>
    <p>counter</p>
    <p>Obj C</p>
    <p>Central</p>
    <p>counter</p>
  </div>
  <div class="page">
    <p>Obj DObj CObj B</p>
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>core</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
    <p>Obj A +1</p>
    <p>Per-core Hash</p>
    <p>Obj B +1</p>
    <p>Obj C +1</p>
    <p>Obj D +1</p>
    <p>Obj X</p>
    <p>Central</p>
    <p>counter</p>
    <p>...</p>
    <p>Obj X +1</p>
    <p>... Evict</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>Obj DObj CObj B</p>
    <p>core</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
    <p>Per-core Hash</p>
    <p>Obj B +1</p>
    <p>Obj C +1</p>
    <p>Obj D +1</p>
    <p>Obj X</p>
    <p>Central</p>
    <p>counter</p>
    <p>...</p>
    <p>Obj X +1</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Overhead analysis of prior proposals (cont.)</p>
    <p>Per-core Hash (RefCache)</p>
    <p>Space</p>
    <p>overhead</p>
    <p>Counting</p>
    <p>overhead</p>
    <p>Query</p>
    <p>overhead</p>
    <p>Time</p>
    <p>overhead</p>
    <p>u g h p u t</p>
    <p>(M o</p>
    <p>p s /s</p>
    <p>e c )</p>
    <p>Number of Shared Objects (Pages)</p>
  </div>
  <div class="page">
    <p>Summarizing all these ...</p>
  </div>
  <div class="page">
    <p>Summarizing all these ...</p>
  </div>
  <div class="page">
    <p>Obj A Obj B Obj C Obj D Obj E Obj F Obj G Obj H</p>
    <p>Challenges for the space-time tradeoff</p>
    <p>core</p>
    <p>Per-core Hash</p>
    <p>corecore core</p>
    <p>Cache Affinity</p>
    <p>Obj H</p>
    <p>Obj G</p>
    <p>Obj F</p>
    <p>Obj E</p>
    <p>Obj D</p>
    <p>Obj C</p>
    <p>Obj B</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
  </div>
  <div class="page">
    <p>Challenges for the space-time tradeoff (cont.)</p>
    <p>Obj A Obj B Obj C Obj D Obj E Obj F Obj G Obj H</p>
    <p>core</p>
    <p>Obj A +1</p>
    <p>core</p>
    <p>Obj A -1</p>
    <p>Central</p>
    <p>counter</p>
  </div>
  <div class="page">
    <p>Our solution to this issue ...</p>
    <p>corecore</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
    <p>Obj A +10</p>
    <p>REF A UNREF A</p>
    <p>Anchoring</p>
    <p>Core 0</p>
  </div>
  <div class="page">
    <p>Our solution to this issue ...</p>
    <p>core</p>
    <p>Obj A +1</p>
    <p>PayGo</p>
    <p>Pay Migration Tax to Homeland</p>
    <p>-1</p>
    <p>Non</p>
    <p>atomic Atomic</p>
    <p>Obj A</p>
    <p>Central</p>
    <p>counter</p>
    <p>REF A</p>
    <p>Local Anchor</p>
    <p>Core 0 UNREF A core</p>
  </div>
  <div class="page">
    <p>Issue for a single local counter</p>
    <p>core 0</p>
    <p>core 1</p>
    <p>core 2 migrate</p>
    <p>migrate</p>
    <p>: lock;subl (atomic op.)</p>
    <p>: lock;addl (atomic op.): local counter</p>
    <p>core 3</p>
  </div>
  <div class="page">
    <p>Anchoring in action</p>
    <p>core 0</p>
    <p>core 1</p>
    <p>core 2 migrate</p>
    <p>migrate</p>
    <p>: addl/subl: local counter /</p>
    <p>core 3</p>
    <p>: anchor counter : lock;subl (atomic op.)</p>
  </div>
  <div class="page">
    <p>Paygo</p>
    <p>(Pay migration tax as you go to other core)</p>
    <p>Low counting overhead</p>
    <p>Scalable for local counters</p>
    <p>Low space overhead (per core hash)</p>
    <p>Proportional to the number of CPU cores</p>
    <p>Query overhead is still high</p>
    <p>Escaping the counting-query tradeoff is beyond the scope of this work.</p>
  </div>
  <div class="page">
    <p>Overhead Analysis for a Reference Counter</p>
  </div>
  <div class="page">
    <p>Local counter increases the local</p>
    <p>count by REF operation</p>
    <p>A process records core IDs along</p>
    <p>with object pointer when REF</p>
    <p>operation is performed</p>
    <p>Data structures in PayGo</p>
    <p>core corePAYGO</p>
    <p>object local</p>
    <p>PAYGO entry</p>
    <p>cache line size (byte)</p>
    <p>task struct</p>
    <p>anchor info</p>
    <p>(per-process)</p>
    <p>(per-core)</p>
    <p>pointer anchor</p>
    <p>anchor core IDs</p>
    <p>counter counter</p>
  </div>
  <div class="page">
    <p>Extending PayGo design to support user-level objects</p>
    <p>user threads</p>
    <p>sys_ref(void* obj) or sys_unref(void* obj)</p>
    <p>user mode</p>
    <p>kernel mode</p>
    <p>object</p>
    <p>preempt_disable() preempt_enable()</p>
    <p>referencing or unreferencing</p>
    <p>REF(obj, pid) UNREF(obj, pid)</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Kernel: Linux 4.12.5</p>
    <p>CPU: four 24-core Intel Xeon E7-8890 v4 CPUs</p>
    <p>RAM: 1 TiB DDR4 DRAM</p>
    <p>Storage: Samsung SM1725 NVMe SSD</p>
  </div>
  <div class="page">
    <p>Scalability Comparison of the Linux Page Cache</p>
    <p>Strongly contending workloads: FxMark DRBH workload</p>
    <p>Weakly contending workloads: filebench modified fileserver workload</p>
  </div>
  <div class="page">
    <p>Performance Spectrum on Varying Contention Levels</p>
  </div>
  <div class="page">
    <p>Scalability of User-level Paygo</p>
    <p>(at 96 threads)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Designing scalable reference counting techniques should consider</p>
    <p>space-time tradeoff as well as counting-query tradeoff.</p>
    <p>PayGo escapes the space-time tradeoff by using anchoring</p>
    <p>technique.</p>
    <p>PayGo provides scalable counting and space efficiency with</p>
    <p>negligible time delay for reclaiming obsolete hash entries.</p>
  </div>
</Presentation>
