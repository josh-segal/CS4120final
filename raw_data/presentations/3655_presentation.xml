<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>V0LTpwn: Attacking x86 Processor Integrity from Software</p>
    <p>Zijo Kenjar Tommaso Frassetto</p>
    <p>Ahmad-Reza Sadeghi</p>
    <p>David Gens Michael Franz</p>
    <p>Technical University of Darmstadt University of California, Irvine</p>
  </div>
  <div class="page">
    <p>The Big Picture</p>
    <p>Application</p>
    <p>SGX Enclave</p>
    <p>Inject Faults</p>
    <p>Undervolt CPU</p>
  </div>
  <div class="page">
    <p>Dynamic Voltage and Frequency Scaling</p>
    <p>Modern hardware has:  Power constraints (battery)  Thermal constraints</p>
    <p>Thus, it allows the OS to control:  Voltage  Frequency</p>
    <p>CPU</p>
    <p>Voltage Frequency</p>
    <p>OS Kernel</p>
  </div>
  <div class="page">
    <p>DVFS and CLKScrew</p>
    <p>CLKscrew leverages DVFS to attack TrustZone on ARM processors</p>
    <p>[USENIX Sec. 2017]</p>
  </div>
  <div class="page">
    <p>Challenges: DVFS on ARM and x86</p>
    <p>ARM</p>
    <p>Fine-grained frequency and voltage control  Per-core adjustment</p>
    <p>Documented interfaces</p>
    <p>Intel x86</p>
    <p>Coarse-grained frequency control  Pre-defined well-tested frequencies</p>
    <p>Per-processor adjustment (frequency and voltage shared by all cores)  Undocumented interfaces  Error detection</p>
    <p>(Machine Check Architecture)</p>
  </div>
  <div class="page">
    <p>x86 Frequency and Voltage Control</p>
    <p>Frequency + Voltage</p>
    <p>Multiple automatic systems  OS can select voltage/frequency</p>
    <p>pair by selecting a P-State  MSR 0x199 (IA32_PERF_CTL)</p>
    <p>Voltage Offset</p>
    <p>Voltage offset for overclocking  MSR 0x150 (OC_Mailbox)</p>
    <p>P-State Frequency</p>
    <p>The performance and power consumption of processors depends on frequency and voltage settings. For dierent software workloads, modern processors incorporate technologies for Dynamic Voltage and Frequency Scaling (DVFS). In this context, processor vendors often define performance states (P-states), which represent distinct pairs of voltage level and clock frequency.</p>
    <p>On recent Intel processors, DVFS techniques are included in its Enhanced Intel Speedstep Technology (EIST). EIST implements hardware control of P-states and considers workload, sensor measurements, power constraints as well as software hints when selecting P-states at run time. For configuration and hints, a software interface is provided using Model-Specific-Registers (MSR) [26], which require supervisor privileges. Hardware control of P-states can be deactivated, for instance, to allow an operating system driver to manually transition the platform to a dierent P-state. In Intels Software-Developer Manual [26], a P-state is called a ratio, i.e., an 8-bit value determining the frequency when multiplied with a base clock of (typically) 100 Mhz. In this paper, we will refer to P-states with the hexadecimal representation of the ratio. For instance, P-state 0x20 (i.e., decimal value 32) represents a frequency of 3200 MHz.</p>
    <p>Since the Skylake microarchitecture Intel introduced Hardware-Controlled Performance States (HWP). HWP oers a more fine-grained interface, i.e., the OS can define operation ranges for high-performance and energy-saving phases. In general, P-state definitions are model-specific as the matching core voltage for a particular frequency is defined by the hardware and may also be adjusted dynamically by the voltage regulators of the processor at run time.</p>
    <p>As a recent development, Intel has exposed traditional BIOS features to the operating system to enable real-time overclocking. For instance, Intels Extreme Tuning Utility (XTU) as well as ThrottleStop allow users to adjust overclocking settings like voltage levels without a reboot of the system under Microsoft Windows. Reverse engineering has revealed the use of MSR OC Mailbox (0x150) by these applications. Interestingly, the ocial documen</p>
    <p>Pa l adC mmandD main1 63 42 40 39 32 31 0</p>
    <p>Figure 1: MSR OC Mailbox (0x150) is used to adjust voltage levels from software, including applications such as Intels Extreme Tuning Utility (XTU) and ThrottleStop.</p>
    <p>tation does not disclose this functionality. However, we find references in drivers [1], presentations [46] and many mainboard manuals. We assume Intel keeps this functionality undocumented, because voltage manipulation can easily damage the hardware, and hence, requires extreme caution when applied from software.</p>
    <p>To the best of our knowledge, MSR OC Mailbox (0x150) has the structure depicted in Figure 1. Bit [63] is fixed and must be set to 1 in all writes to this MSR. Bits [42:40] represent a hardware domain which is addressed by the command in bits [39:32]. The lower 32 bits have a variable structure and contain the command payload. An important feature of MSR 0x150 is the ability to modify voltages. For instance, a voltage oset can be applied to the base voltage of a P-state. We found this feature to be available on all recent Intel processors. The actual voltage can be changed with 5 mV granularity. This behavior conforms to voltage regulator specifications [49], in which the voltages requests from the processor to the regulator unit are encoded in 5 mV steps. We verified this experimentally. The available set of commands appears to be dependent on the microarchitecture [46]. An extended description of commands is provided in Appendix A.</p>
  </div>
  <div class="page">
    <p>V0LTpwn: Threat Model</p>
    <p>OS Kernel</p>
    <p>Application</p>
    <p>Victim SGX Enclave</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environments</p>
    <p>System</p>
    <p>OS Kernel</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environments</p>
    <p>System</p>
    <p>OS Kernel</p>
    <p>Application</p>
    <p>SGX Enclave</p>
  </div>
  <div class="page">
    <p>Voltage Fault Analysis</p>
    <p>Exploit Window</p>
    <p>P-State Frequency</p>
  </div>
  <div class="page">
    <p>Step 2: Bit Flip Analysis</p>
    <p>P ro</p>
    <p>ce ss</p>
    <p>or m</p>
    <p>o d el</p>
    <p>an d</p>
    <p>co re</p>
    <p>id</p>
  </div>
  <div class="page">
    <p>Bit Flip Analysis: Vulnerable Code Pattern</p>
    <p>[vpxor: vector xor] [vmovdqu: vector move to memory]</p>
    <p>&lt; l a t e x i t s h a 1 _ b a s e 6 4 = &quot; B 0 / o</p>
    <p>z 5 U b Y Q Z r P O p E y C 5 g c p 5 t J N U = &quot; &gt; A A A C d n i c d V F N S y N B E O 0 Z 1 6 / 4 F</p>
    <p>d e j s D Q b R E 9 h E g S N J 8 G L R w W j Q j K E n k 5 N b O y P s b s m G o b 5 o R 6 8 7 0 / w</p>
    <p>a M 8 Y Y V 3 d O j 3 e q 0 d V v U o y K R x G 0 X M Q L v x Y X F p e W W 2 s r W 9 s b j W 3 f 1</p>
    <p>O B p L P R m X j e / 6 l Z m O H / K v D s 8 D R U M V K G N n 3 j x q t q J 2 r x f 5 o l 9 B p x 3</p>
    <p>V 1 S L z u h g 1 / w z H h u f K b 8 s l c 2 7 Q i T K M C 2 Z R c A l l Y 5 g 7 y B i / Z x M Y e K</p>
    <p>i Z A h c X d U A l 3 f P M m K Z + k d R o p D X 7 t 6 N g y r m Z S n y n Y n j n / t U q 8 j t t k</p>
    <p>G N 6 H B d C Z z m C 5 u + D 0 l x W p 1 Z p 0 7 G w P g A 5 8 4 B x K / y u l N 8 x y 7 i P / P O U</p>
    <p>k F 6 R N O X o K F Y D 3 Y C F 7 D X + F e u P / e G g Z z z w 7 5 V G H 0 B o C f w 6 o = &lt; / l a t</p>
    <p>e x i t &gt;</p>
    <p>&lt; l a t e x i t s h a 1</p>
    <p>_ b a s e 6 4 = &quot; 7 H S Y Z G A P 5 r E G F M H W t</p>
    <p>C H 9 n v 1 v Y P A = &quot; &gt; A A A D E H i c d V L L</p>
    <p>b t N A F L X N q 5 h X C k s 2 I 6 J I R b J S J</p>
    <p>V m X F S Y + U n 2 L O F X 2 C H 2 P I H / A G f</p>
    <p>w d g J o u V x N 3 N 8 7 p 1 7 z z 3 j V D F q b B</p>
    <p>x / 9 4 M r V 6 9 d v 7 F z M 7 x 1 + 8 7 d e 6 3</p>
    <p>d + 8 d G F p r A k E g m 9 W m K D T A q Y G i p Z</p>
    <p>X C q N G C e M j h J F y / r / M k S t K F S v L</p>
    <p>G l g g n H M 0 F z S r B 1 1 H T X b 4 1 T m F F</p>
    <p>R M W P r c V T M 1 q N c Y w 6 J c Z h B h E T B U</p>
    <p>i P k V F N i b M k g G V u b Y 0 5 Z + b v n h k /</p>
    <p>z S b i / j 5 Z A r N R I K t C N 7 L D p j T r n</p>
    <p>n P e i 5 u h v j i d h X Z 5 h i 5 H V W J g c N</p>
    <p>L I S c e B S l + F W y 6 Y y Q n s d b d T j c A w</p>
    <p>i u 7 j 9 t N W O u 4 N B 7 A L 9 D X r d u I m 2</p>
    <p>t 4 2 j a e v H O J O k 4 C A s Y d i Y U S 9 W d l</p>
    <p>J h b S l h s A 7 H h Q G F y Q L P Y O S g c N 6</p>
    <p>a S d U 8 3 R p 1 H J O h 3 G 2 T S 2 F R w 1 6 8 U</p>
    <p>W F u T M l T V 8 m x n Z s / c z X 5 r 9 y o s P</p>
    <p>n z S U W F K i w I s h m U F 6 y 2 o / 4 P U E a</p>
    <p>s a Y d e i s + b U / + j 8 4 7 n d 7 B 9 3 B 6 3</p>
    <p>H X l D j / g r / 4 P / 0 f 8 U v A 8 + B 1 + C r</p>
    <p>a t e x i t &gt;</p>
  </div>
  <div class="page">
    <p>V0LTpwn Attack Setup</p>
    <p>$WWDFNHU&amp;RUH 9LFWLP&amp;RUH</p>
    <p>/RJLFDO&amp;RUH</p>
    <p>$WWDFN6FULSW</p>
    <p>/RJLFDO&amp;RUH</p>
    <p>,GOH</p>
    <p>/RJLFDO&amp;RUH</p>
    <p>/RJLFDO&amp;RUH</p>
  </div>
  <div class="page">
    <p>Our Stressor</p>
    <p>&lt; l a t e x i t s h a 1</p>
    <p>_ b a s e 6 4 = &quot; E 6 l O i f 0 1 j I R 0 I z B h G</p>
    <p>G 6 M H g I o 4 i c = &quot; &gt; A A A D C X i c d V L N</p>
    <p>b h M x E P Y u f + 3 y l 8 K R i 0 U U i c M q 2</p>
    <p>q S h b a g W V e L C s U i k r Z R E k d f r T U z</p>
    <p>j 4 E 3 G 6 C F M p I 1 n 7 8 Z f z M e O 1 G M G h</p>
    <p>t F 3 z 3 / 2 v U b N 2 9 t b A a 3 7 9 y 9 d 7 +</p>
    <p>W X k R G m C e M L I c b J 8 U c e P z 4 g 2 V I</p>
    <p>r X t l B k y t F c 0 I x i Z B 0 1 2 / I 2 J w m</p>
    <p>Z U 1 E y Y + t y V M y r c a Y R J 7 F x m J E Q i</p>
    <p>p w n T i F m J L M h t C g x 9 B 2 J + y F c k u</p>
    <p>J c 6 t T E p c r N I j x T h r H T U E k V v u G q</p>
    <p>C m H d 0 z l N 7 S L e G X A e Q t c n x c Y W j</p>
    <p>M Q T a z P E K S v + q D R 8 k k 2 D G Z N S P Q s</p>
    <p>g r G V h R / e i f b d p 5 G H n L e f b 4 c o N</p>
    <p>G r d z Z f B p 4 3 Z r G a l + q 7 j O 4 E p / P</p>
    <p>l b b C 2 w 1 n r x y S V O O d E W M y Q M e N e</p>
    <p>p O y 0 R N p S z E g V T H J D F M J L N C d j B 4</p>
    <p>U b q p m W q z e r Y M c x K c y k d k t Y u G I</p>
    <p>v n i g R N 6 b g i c v k y C 7 M 3 7 G a v C o 2 z</p>
    <p>m 2 2 N y 2 p U L k l A j e F s p x B K 2 H 9 A W</p>
    <p>B K N c G W F Q 4 g r K n r F e I F 0 g h b 9 8 i</p>
    <p>X q q w H Y 6 r A j e b X / e H / w V G / 2 x t 0 h</p>
    <p>C X 4 B C M A P a U 9 8 H 7 6 H 3 y 3 / u f / S / +</p>
    <p>/ l a t e x i t &gt;</p>
    <p>[vpsllq: vector left shift]</p>
    <p>&lt; l a t e x i t s h a 1 _ b a s e 6 4 = &quot; 9 V X E</p>
    <p>f g y U + M x V u g T N g N S Q o a n T t D I = &quot; &gt; A A A C N n i c d V H L S g N B E J z 1 b X x F P</p>
    <p>X o Z D I K n s A l C E k 8 B L x 4 V j A r J E m Y n v c m Q 2 d l 1 p j c Y l v 0 U / 8 O 7 V / 0 A</p>
    <p>L 9 5 E j 3 6 C k z W C z z o V V d 1 0 d 7 U f S 2 H Q d R + d m d m 5 + Y X F p e X C y u r a + k</p>
    <p>Z x c + v c R I n m 0 O K R j P S l z w x I o a C F A i V c x h p Y 6 E u 4 8 I d H E / 9 i B N q I S</p>
    <p>J 3 h O A Y v Z H 0 l A s E Z W q l b r H U Q r t E E a T v L G W I 6 i o 2 U V 9 k h / b R G w D H S</p>
    <p>V E K A 1 A x E g F 5 W 6 B Z L b r n R c C 3 o b 1 I p u z l K Z I q T b v G 1 0 4 t 4 E o J C L p k</p>
    <p>x 7 Y o b o 5 c y j Y J L y A q d x E D M + J D 1 o W 2 p Y i E Y L 8 0 P z O i e V X o 0 s E s E k U</p>
    <p>K a q 1 8 7 U h Y a M w 5 9 W x k y H J i f 3 k T 8 y 2 s n G N S 9 V K g 4 Q V D 8 Y 1 C Q S I o R n</p>
    <p>a R F e 0 L b 4 + X Y E s a 1 s L t S P m C a c b S Z f p s y + Z V Q f Z N H 8 3 k / / Z + c V 8 u V</p>
    <p>g 3 L j t F p q 1 q c h L Z E d s k v 2 S Y X U S J M c k x P S I p z c k D t y T x 6 c W + f J e X</p>
    <p>Z e P k p n n G n P N v k G 5 + 0 d g K W u r g = = &lt; / l a t e x i t &gt;</p>
  </div>
  <div class="page">
    <p>Attacking OpenSSLs HMAC Implementation</p>
    <p>SGX Enclave</p>
    <p>OpenSSL HMAC</p>
  </div>
  <div class="page">
    <p>Attacking OpenSSLs HMAC Implementation</p>
  </div>
  <div class="page">
    <p>Intel Responsible Disclosure &amp; Mitigations</p>
    <p>Reported to Intel in August 2019  Intels mitigation released in December 2019:  BIOS flag to disable voltage interface  Microcode update that includes state of that flag in attestation</p>
  </div>
  <div class="page">
    <p>Concurrent work: Plundervolt</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>V0LTpwn: compromise on integrity of x86 processors and SGX  Fault analysis of multiple processors in</p>
    <p>various conditions (more in the paper)  Up to 99% success rate on real-world code</p>
    <p>V0LTpwn: Attacking x86 Processor Integrity from Software</p>
    <p>Zijo Kenjar1, Tommaso Frassetto1, David Gens2, Michael Franz2, and Ahmad-Reza Sadeghi1</p>
    <p>Abstract Fault-injection attacks have been proven in the past to be a reliable way of bypassing hardware-based security measures, such as cryptographic hashes, privilege and access permission enforcement, and trusted execution environments. However, traditional fault-injection attacks require physical presence, and hence, were often considered out of scope in many real-world adversary settings.</p>
    <p>In this paper we show this assumption may no longer be justified on x86. We present V0LTpwn, a novel hardware-oriented but software-controlled attack that aects the integrity of computation in virtually any execution mode on modern x86 processors. To the best of our knowledge, this represents the first attack on the integrity of the x86 platform from software. The key idea behind our attack is to undervolt a physical core to force non-recoverable hardware faults. Under a V0LTpwn attack, CPU instructions will continue to execute with erroneous results and without crashes, allowing for exploitation. In contrast to recently presented side-channel attacks that leverage vulnerable speculative execution, V0LTpwn is not limited to information disclosure, but allows adversaries to aect execution, and hence, eectively breaks the integrity goals of modern x86 platforms. In our detailed evaluation we successfully launch software-based attacks against Intel SGX enclaves from a privileged process to demonstrate that a V0LTpwn attack can successfully change the results of computations within enclave execution across multiple CPU revisions.</p>
    <p>Modern hardware platforms have a long history that spans multiple decades. The need to ensure backwards compatibility and the constant tweaking of existing designs has burdened widely deployed hardware architectures with legacy components that have become highly</p>
    <p>complex, and far from flawless. In the recent past, we have seen how seemingly minor implementation bugs at the hardware level can have a severe impact on security [14]. Attacks such as Meltdown [36], Spectre [33], Foreshadow [58], and RIDL [62] demonstrate that attackers can exploit these bugs from software to bypass access permissions and extract secret data.</p>
    <p>Furthermore, we have seen that the adverse eects of hardware vulnerabilities are not limited to confidentiality, but can also compromise integrity in principle: the infamous Rowhammer bug [32] resulted in numerous exploits [6, 24, 43, 48, 50, 56, 60, 63, 65] leveraging bit flips in flawed DRAM modules, which are deployed on practically all computer systems today. While initial defenses have been proposed to mitigate Rowhammer from software [5, 8], fixing Rowhammer bugs ultimately requires deploying new hardware.</p>
    <p>With recent feature sizes shrinking to single-digit nanometer scale, semiconductor companies face the growing problem of the so-called dark silicon. At run time large parts of the chip will have to be left powered-o, since the billions of transistors cannot be operated within the thermal constraints and power budget the platform was originally designed for. This prevented hardware designers from leveraging Dennard scaling [17, 53]; consequently, manufacturers have moved to more intelligent, on-demand thermal and voltage control on recent platforms. This means that critical operational aspects of the processor can now and are increasingly controlled from software during run time. Unfortunately, this development comes with severe consequences for computer security.</p>
    <p>In 2017 Tang et al. [55] showed that the intricacies of low-level and fine-grained power management on ARMbased mobile devices open up serious pitfalls, as they were able to induce faults in the processor of a Nexus 6 smartphone, allowing them to bypass the isolation boundary of TrustZone. So far, a similar scenario was deemed unlikely on x86-based systems for several reasons: (i) x86</p>
  </div>
</Presentation>
