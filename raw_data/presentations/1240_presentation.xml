<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Acclaim: Adaptive Memory Reclaim to Improve User Experience in Android Systems</p>
    <p>Yu Liang, Jinheng Li, Rachata Ausavarungnirun, Riwei Pan, Liang Shi, Tei-Wei Kuo, Chun Jason Xue</p>
  </div>
  <div class="page">
    <p>Problem: Address inefficient memory reclaim scheme in Android systems High Page re-fault and direct reclaim</p>
    <p>Apps are still active in background and occupy memory</p>
    <p>The size of reclaim scheme is too large for Android applications</p>
    <p>Executive summary</p>
    <p>Improve user experience under intensive I/O requests</p>
    <p>Key idea</p>
    <p>Acclaim: Foreground aware and size-sensitive memory reclaim scheme</p>
    <p>A: Lightweight prediction-based reclaim scheme (LWP)</p>
    <p>B: Foreground aware eviction (FAE)</p>
    <p>Acclaim reduces application launch latency up to 58.8% and improves the write performance under intensive I/O requests up to 49.3%.2</p>
  </div>
  <div class="page">
    <p>Android mobile device is popular</p>
    <p>Industry report on mobile market [Morgan Stanley Research 2016]</p>
    <p>Mobile devices are everywhere!</p>
    <p>Global mobile OS market share</p>
    <p>Industry report on mobile market [ Statista 2018]</p>
    <p>Android</p>
  </div>
  <div class="page">
    <p>Android inherits Linux kernel</p>
    <p>Linux memory reclaim scheme is transplanted to Android smartphones</p>
  </div>
  <div class="page">
    <p>Android inherits Linux kernel</p>
    <p>Linux memory reclaim scheme is transplanted to Android smartphones</p>
    <p>How these differences can impact the launch time of mobile applications?</p>
  </div>
  <div class="page">
    <p>Breakdown Android I/O latency</p>
    <p>Android I/O Latency: read procedure as an example</p>
    <p>If cache miss, page fault</p>
    <p>If memory is full, reclaim is conducted</p>
    <p>An overview of the Android I/O stack. Influence of page fault and reclaim on application launch latency.</p>
    <p>Application</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems</p>
    <p>Generic Block Layer</p>
    <p>I/O Schedular</p>
    <p>Flash Storage</p>
    <p>microseconds</p>
    <p>nanoseconds</p>
  </div>
  <div class="page">
    <p>Breakdown Android I/O latency</p>
    <p>Android I/O Latency: read procedure as an example</p>
    <p>If cache miss, page fault</p>
    <p>If memory is full, reclaim is conducted</p>
    <p>An overview of the Android I/O stack. Influence of page fault and reclaim on application launch latency.</p>
    <p>Application</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems</p>
    <p>Generic Block Layer</p>
    <p>I/O Schedular</p>
    <p>Flash Storage</p>
    <p>microseconds</p>
    <p>nanoseconds</p>
    <p>Both page fault and reclaim scheme are the key factors that impact I/O latency.</p>
  </div>
  <div class="page">
    <p>Page re-fault causes page thrashing</p>
    <p>Page fault happens in three cases</p>
    <p>Page thrashing</p>
  </div>
  <div class="page">
    <p>Page re-fault causes page thrashing</p>
    <p>Page fault happens in three cases</p>
    <p>Page re-fault is a key factor that impacts user experience.</p>
    <p>Page thrashing</p>
  </div>
  <div class="page">
    <p>Direct reclaim can much delay page allocation</p>
    <p>Memory is extremely scarce</p>
    <p>Background apps will be killed by the Android low memory killer (LMK)</p>
    <p>There are mainly two reclaim schemes</p>
    <p>demands.</p>
    <p>Page allocation</p>
    <p>Reclaim free pages in background</p>
    <p>Enough free pages?</p>
    <p>Heavy-cost</p>
    <p>Get free pages</p>
    <p>Direct reclaim</p>
    <p>N</p>
    <p>Y</p>
    <p>Lower than threshold?</p>
    <p>Get free pages</p>
    <p>N</p>
    <p>Weakup background reclaim</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>Direct reclaim can much delay page allocation</p>
    <p>Memory is extremely scarce</p>
    <p>Background apps will be killed by the Android low memory killer (LMK)</p>
    <p>There are mainly two reclaim schemes</p>
    <p>demands.</p>
    <p>Page allocation</p>
    <p>Reclaim free pages in background</p>
    <p>Enough free pages?</p>
    <p>Heavy-cost</p>
    <p>Get free pages</p>
    <p>Direct reclaim</p>
    <p>N</p>
    <p>Y</p>
    <p>Lower than threshold?</p>
    <p>Get free pages</p>
    <p>N</p>
    <p>Weakup background reclaim</p>
    <p>Y</p>
    <p>Direct reclaim is another key factor that impacts user experience.</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Survey of application usage patterns.</p>
    <p>Fifty-two users</p>
    <p>More than twenty smartphone models</p>
    <p>Over a two-month period</p>
    <p>Collected data from 52 real phones.</p>
    <p>https://github.com/MIoTLab/Accliam</p>
    <p>Percentage # of background applications</p>
    <p>Percentage # of background applications</p>
    <p>Percentage # of background applications</p>
    <p>Percentage # of background applications</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Survey of application usage patterns.</p>
    <p>Fifty-two users</p>
    <p>More than twenty smartphone models</p>
    <p>Over a two-month period</p>
    <p>Collected data from 52 real phones.</p>
    <p>https://github.com/MIoTLab/Accliam</p>
    <p>Percentage # of background applications</p>
    <p>Percentage # of background applications</p>
    <p>Percentage # of background applications</p>
    <p>Percentage # of background applications</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Experimental workloads</p>
    <p>Experimental setup</p>
    <p>Huawei P9 smartphone with 3GB and 2.5GB RAM, running Android 7.0 on Linux kernel version 4.1.18.</p>
    <p>Twenty apps (i.e. social media, browser, map, game, news, and multimedia applications).</p>
    <p>Application combinations used in experiments.</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Experimental workloads</p>
    <p>Experimental setup</p>
    <p>Huawei P9 smartphone with 3GB and 2.5GB RAM, running Android 7.0 on Linux kernel version 4.1.18.</p>
    <p>Twenty apps (i.e. social media, browser, map, game, news, and multimedia applications).</p>
    <p>Application combinations used in experiments.</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
    <p>Applications Operations Memory Workloads</p>
    <p>A Launch and use an application for 5 minutes</p>
    <p>Avail. Light</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Re-fault and direct reclaim on mobile devices</p>
    <p>Ratio and number of page re-faults</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Re-fault and direct reclaim on mobile devices</p>
    <p>Memory reclaim scheme often reclaims the pages, which will be used soon.</p>
    <p>Ratio and number of page re-faults</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Re-fault and direct reclaim on mobile devices</p>
    <p>Ratio and number of direct reclaims</p>
    <p>Servers also have the problems.</p>
  </div>
  <div class="page">
    <p>Analysis of Android memory reclaim</p>
    <p>Re-fault and direct reclaim on mobile devices</p>
    <p>Kill background apps</p>
    <p>Heavy-cost direct reclaim is often triggered on mobile devices.</p>
    <p>Ratio and number of direct reclaims</p>
    <p>Servers also have the problems.</p>
  </div>
  <div class="page">
    <p>Allocation sizes of mobile devices are usually small</p>
    <p>Compared to allocation size, reclaim size is often too large.</p>
    <p>The distribution of allocation sizes: The distribution of reclaim sizes :</p>
    <p>99% of allocation sizes are 1 page (order=0)  80% of reclaiming sizes are larger than 32 pages (order=5).</p>
  </div>
  <div class="page">
    <p>Allocation sizes of mobile devices are usually small</p>
    <p>Compared to allocation size, reclaim size is often too large.</p>
    <p>The distribution of allocation sizes: The distribution of reclaim sizes :</p>
    <p>page=1</p>
    <p>page&gt;32</p>
    <p>99% of allocation sizes are 1 page (order=0)  80% of reclaiming sizes are larger than 32 pages (order=5).</p>
    <p>The reclaim size of background reclaim is often too large.</p>
  </div>
  <div class="page">
    <p>Foreground apps more important to user experience</p>
    <p>Background applications keep consuming free pages.</p>
    <p>Anonymous pages from background apps thrash file pages of foreground apps.  Anonymous pages are more important to a process than file pages.</p>
    <p>Background applications are still active.</p>
    <p>Re-fault pages produced by each part. 22</p>
  </div>
  <div class="page">
    <p>Foreground apps more important to user experience</p>
    <p>Background applications keep consuming free pages.</p>
    <p>Anonymous pages from background apps thrash file pages of foreground apps.  Anonymous pages are more important to a process than file pages.</p>
    <p>Background applications are still active.</p>
    <p>How to solve these problems?</p>
    <p>Re-fault pages produced by each part. 23</p>
  </div>
  <div class="page">
    <p>Our Solution: Acclaim</p>
    <p>Design goals:  The reclaim size of background reclaim is just right.  Background applications have lower priority</p>
    <p>Acclaim, foreground aware and size-sensitive reclaim scheme.</p>
    <p>Lightweight prediction-based reclaim scheme (LWP)  Target: Reclaim size of the background reclaim is too large.  Solution: Tunes size and amount of background reclaims according to the predicted</p>
    <p>allocation workloads.</p>
    <p>Foreground aware eviction (FAE)  Target: Background applications keep consuming free pages.  Solution: Gets space from background apps to the foreground app.</p>
  </div>
  <div class="page">
    <p>Our Solution: Acclaim</p>
    <p>Design goals:  The reclaim size of background reclaim is just right.  Background applications have lower priority</p>
    <p>Acclaim, foreground aware and size-sensitive reclaim scheme.</p>
    <p>Lightweight prediction-based reclaim scheme (LWP)  Target: Reclaim size of the background reclaim is too large.  Solution: Tunes size and amount of background reclaims according to the predicted</p>
    <p>allocation workloads.</p>
    <p>Foreground aware eviction (FAE)  Target: Background applications keep consuming free pages.  Solution: Gets space from background apps to the foreground app.</p>
    <p>Two schemes targets two problems.</p>
  </div>
  <div class="page">
    <p>Lightweight prediction-based reclaim scheme (LWP)</p>
    <p>LWP predicts allocation workloads</p>
    <p>The framework of LWP.</p>
    <p>An example of LWP.</p>
    <p>Predicted size =average of sizes in window  Predicted amount trend=sum/last sum</p>
  </div>
  <div class="page">
    <p>Lightweight prediction-based reclaim scheme (LWP)</p>
    <p>LWP predicts allocation workloads</p>
    <p>The framework of LWP.</p>
    <p>An example of LWP.</p>
    <p>Predicted size =average of sizes in window  Predicted amount trend=sum/last sum</p>
    <p>Tune size and amount of background reclaims according to the predicted allocation workloads.</p>
  </div>
  <div class="page">
    <p>Foreground aware eviction (FAE)</p>
    <p>FAE lowers the priority of pages of background applications.</p>
    <p>Music or video players can be excluded in background apps.</p>
    <p>Framework of foreground aware evict scheme. Foreground aware evict scheme of LRU lists.</p>
  </div>
  <div class="page">
    <p>Foreground aware eviction (FAE)</p>
    <p>FAE lowers the priority of pages of background applications.</p>
    <p>Music or video players can be excluded in background apps.</p>
    <p>Framework of foreground aware evict scheme. Foreground aware evict scheme of LRU lists.</p>
    <p>Gets space from background applications to the foreground application.</p>
  </div>
  <div class="page">
    <p>Evaluation results: read/write performance</p>
    <p>Benefit to read/write performance.</p>
    <p>We write and read 512MB and 1GB of data in size of 4KB.</p>
    <p>Read and write performance.</p>
  </div>
  <div class="page">
    <p>Evaluation results: read/write performance</p>
    <p>Benefit to read/write performance.</p>
    <p>We write and read 512MB and 1GB of data in size of 4KB.</p>
    <p>Read and write performance.</p>
    <p>Performance can be much improved under Intensive I/O requests.</p>
  </div>
  <div class="page">
    <p>Evaluation results: app launching</p>
    <p>Reduce launch time in 20 out of 24 benchmarks.</p>
    <p>Application launch performance.</p>
  </div>
  <div class="page">
    <p>Evaluation results: app launching</p>
    <p>Reduce launch time in 20 out of 24 benchmarks.</p>
    <p>Application launch performance.</p>
    <p>Benefits most of application launchings.</p>
  </div>
  <div class="page">
    <p>Evaluation results: overhead</p>
    <p>Overhead of Acclaim.</p>
    <p>Additional memory overhead.  Each page 4 Bytes for UID</p>
    <p>0.1% of memory capacity</p>
    <p>100 values in sliding window will take up 400B in LWP</p>
    <p>Performance overhead.  FAE needs few comparisons.</p>
    <p>Check the configure file to get the UIDs. (Once)</p>
    <p>Foreground UID deliver.</p>
    <p>Check background UID during each page eviction.</p>
    <p>Two parts for LWP  Lock-free sliding window.</p>
    <p>Prolong the wake-up time of the background reclaim.</p>
  </div>
  <div class="page">
    <p>Evaluation results: overhead</p>
    <p>Overhead of Acclaim.</p>
    <p>Additional memory overhead.  Each page 4 Bytes for UID</p>
    <p>0.1% of memory capacity</p>
    <p>100 values in sliding window will take up 400B in LWP</p>
    <p>Performance overhead.  FAE needs few comparisons.</p>
    <p>Check the configure file to get the UIDs. (Once)</p>
    <p>Foreground UID deliver.</p>
    <p>Check background UID during each page eviction.</p>
    <p>Two parts for LWP  Lock-free sliding window.</p>
    <p>Prolong the wake-up time of the background reclaim.</p>
    <p>Both memory overhead and performance overhead are trivial.</p>
  </div>
  <div class="page">
    <p>Problem: Address inefficient memory reclaim scheme in Android systems</p>
    <p>High Page re-fault and direct reclaim</p>
    <p>Conclusion</p>
    <p>Improve user experience under intensive I/O requests</p>
    <p>Key idea</p>
    <p>Acclaim: Foreground aware and size-sensitive memory reclaim scheme</p>
    <p>A: Lightweight prediction-based reclaim scheme (LWP)</p>
    <p>B: Foreground aware eviction (FAE)</p>
    <p>Acclaim reduces application launch latency up to 58.8% and improves the write performance under intensive I/O requests up to 49.3%.</p>
  </div>
  <div class="page">
    <p>Acclaim: Adaptive Memory Reclaim to Improve User Experience in Android Systems</p>
    <p>Yu Liang, Jinheng Li, Rachata Ausavarungnirun, Riwei Pan, Liang Shi, Tei-Wei Kuo, Chun Jason Xue</p>
    <p>Thank you! yliang22-c@my.cityu.edu.hk</p>
  </div>
</Presentation>
