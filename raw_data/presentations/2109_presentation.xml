<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Efficient QoS for Multi-Tiered</p>
    <p>Storage Systems</p>
    <p>Ahmed Elnably</p>
    <p>Hui Wang</p>
    <p>Peter Varman</p>
    <p>Ajay Gulati VMware Inc</p>
    <p>Rice University</p>
  </div>
  <div class="page">
    <p>Tiered Storage Architecture</p>
    <p>Problem: How to provide QoS in this</p>
    <p>environment?</p>
    <p>HDs</p>
    <p>SSDs</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Client n</p>
    <p>Scheduler</p>
    <p>Multi-Tiered Array</p>
  </div>
  <div class="page">
    <p>Fair Scheduling Example</p>
    <p>HD</p>
    <p>SSD</p>
    <p>FS</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>How will Fair Scheduling behave in a</p>
    <p>multi-tiered storage architecture?</p>
    <p>Allocate IOs in proportion of client weights</p>
  </div>
  <div class="page">
    <p>Fair Scheduling Example</p>
    <p>HD</p>
    <p>SSD</p>
    <p>FS</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Time = 0 ms</p>
  </div>
  <div class="page">
    <p>Fair Scheduling Example</p>
    <p>HD</p>
    <p>SSD</p>
    <p>FS</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Time = 1 ms</p>
  </div>
  <div class="page">
    <p>Fair Scheduling Example</p>
    <p>HD</p>
    <p>SSD</p>
    <p>FS</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Time = 2 ms</p>
    <p>Issue: Low utilization</p>
    <p>SSD will idle for 9 out of 10 ms</p>
  </div>
  <div class="page">
    <p>Fair Scheduling in Multi-Tier</p>
    <p>Is the behavior of FS reasonable?</p>
    <p>The answer is simply  NO!</p>
  </div>
  <div class="page">
    <p>Time Slice Schedulers</p>
    <p>HD</p>
    <p>SSD</p>
    <p>Time</p>
    <p>Slice</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Allocate time quantum in proportion of client weights</p>
  </div>
  <div class="page">
    <p>Time Slice Schedulers</p>
    <p>HD</p>
    <p>SSD</p>
    <p>Time</p>
    <p>Slice</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Issue: Low utilization</p>
    <p>Both devices will idle for large intervals</p>
    <p>Allocate time quantum in proportion of client weights</p>
  </div>
  <div class="page">
    <p>Queue Based Schedulers</p>
    <p>HD</p>
    <p>SSD</p>
    <p>Queue</p>
    <p>Based</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 2</p>
    <p>w2 = 1</p>
    <p>Allocate queue slots in proportion of client weights</p>
  </div>
  <div class="page">
    <p>Queue Based Schedulers</p>
    <p>HD</p>
    <p>SSD</p>
    <p>Queue</p>
    <p>Based</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 2</p>
    <p>w2 = 1</p>
    <p>Issue: Static queues can cause low utilization</p>
    <p>Empty slots are not getting re-used</p>
    <p>Allocate queue slots in proportion of client weights</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Problem Motivation</p>
    <p>Reward Scheduling</p>
    <p>Preliminary Evaluation</p>
    <p>Open Issues &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Reward Allocation Policy</p>
    <p>Goals</p>
    <p>Provide QoS (fairness)</p>
    <p>Higher system throughput / device utilization</p>
  </div>
  <div class="page">
    <p>Reward Scheduling</p>
    <p>Key Ideas:</p>
    <p>Reward clients with cheaper IOs</p>
    <p>Track IO latency of each client separately</p>
    <p>Try to allocate in the ratio of clients</p>
    <p>throughput if running alone (entitlement)</p>
  </div>
  <div class="page">
    <p>Algorithm Details</p>
    <p>Tag based scheduling  Each client queue has a tag</p>
    <p>Tag represents scheduling priority</p>
    <p>Scheduler selects queue with smallest tag</p>
    <p>Monitor service time of client requests</p>
    <p>Increment tags using  Measured service time of client</p>
    <p>Weight of the client 15</p>
  </div>
  <div class="page">
    <p>Algorithm Details</p>
    <p>j : Measured service time of completing request of client j</p>
    <p>UpdateServiceTime (j, j)</p>
    <p>Average of the service time of client j over window</p>
  </div>
  <div class="page">
    <p>Reward Scheduling</p>
    <p>HD</p>
    <p>SSD</p>
    <p>RS</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Time = 0 ms</p>
  </div>
  <div class="page">
    <p>Reward Scheduling</p>
    <p>HD</p>
    <p>SSD</p>
    <p>RS</p>
    <p>Client 1</p>
    <p>Client 2</p>
    <p>Multi-Tiered Array</p>
    <p>w1 = 1</p>
    <p>w2 = 1</p>
    <p>Time = 1 ms</p>
    <p>Higher utilization</p>
    <p>Client with lower latency gets higher effective weight</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Problem Motivation</p>
    <p>Reward Scheduling</p>
    <p>Preliminary Evaluation</p>
    <p>Open Issues &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Two implementations</p>
    <p>Simulation-based</p>
    <p>Linux-based evaluation (Interposing a</p>
    <p>reward scheduler in user space)</p>
    <p>Three different cases</p>
    <p>Variable hit ratios</p>
    <p>Variable read-write ratio</p>
    <p>Variable weights (In paper)</p>
  </div>
  <div class="page">
    <p>Reward Scheduling vs. CFQ</p>
  </div>
  <div class="page">
    <p>Reward Scheduling vs. CFQ</p>
  </div>
  <div class="page">
    <p>Reward Scheduling vs. CFQ</p>
    <p>Isolation between workloads</p>
    <p>Higher system throughput 23</p>
  </div>
  <div class="page">
    <p>Variable Hit Rate</p>
    <p>HD</p>
    <p>SSD</p>
    <p>RS</p>
    <p>Client A</p>
    <p>Client B</p>
    <p>Multi-Tiered Array</p>
  </div>
  <div class="page">
    <p>Variable Hit Rate</p>
    <p>Simulation system</p>
    <p>Entitlement of A = 5000 IOPS</p>
    <p>Entitlement of B = 5000 IOPS</p>
    <p>Ratio A:B = 5000:5000</p>
  </div>
  <div class="page">
    <p>Variable Hit Rate</p>
    <p>Simulation system</p>
    <p>Entitlement of A = 5000 IOPS</p>
    <p>Entitlement of B = 200 IOPS</p>
    <p>Ratio A:B = 5000 : 200</p>
  </div>
  <div class="page">
    <p>Variable Hit Rate</p>
    <p>Linux-based evaluation</p>
    <p>Simulation system</p>
  </div>
  <div class="page">
    <p>Variable Read-Write Ratio</p>
  </div>
  <div class="page">
    <p>Variable Read-Write Ratio</p>
    <p>Queue = 1</p>
  </div>
  <div class="page">
    <p>Differentiation became less due to queuing delay 30</p>
    <p>Variable Read-Write Ratio</p>
    <p>Queue = 8</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Problem Motivation</p>
    <p>Reward Scheduling</p>
    <p>Preliminary Evaluation</p>
    <p>Open Issues &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Open Issues</p>
    <p>Better measurement of response time</p>
    <p>Isolating queuing delay</p>
    <p>Can we make queue-slot based technique</p>
    <p>work?</p>
    <p>Interaction between cache management and</p>
    <p>scheduling</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Existing approaches are insufficient</p>
    <p>Reward based allocation policy is an alternative</p>
    <p>Other approaches can potentially work</p>
    <p>We hope to encourage future work in this area</p>
    <p>Questions</p>
  </div>
</Presentation>
