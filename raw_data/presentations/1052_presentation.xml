<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HiKV: A Hybrid Index Key-Value Store for DRAM-NVM Memory Systems</p>
    <p>Fei Xia1,2, Dejun Jiang1, Jin Xiong1, Ninghui Sun1 1. Institute of Computing Technology, CAS 2. University of Chinese Academy of Sciences</p>
    <p>USENIX ATC17, Jul. 12-14</p>
  </div>
  <div class="page">
    <p>Non-Volatile Memory</p>
    <p>Emerging Non-Volatile Memories (NVMs)  PCM, ReRAM, STT-MRAM</p>
    <p>Characteristics of memory technologies [Xia+,JCST2015, Yang+, FAST2015,Chi+,ISCA2016]</p>
    <p>Categories Volatility Density Read Latency</p>
    <p>Write Latency</p>
    <p>Write Endurance</p>
    <p>DRAM Yes Low 60ns 60ns 1016</p>
    <p>PCM No High 50~70ns 150~1000ns 109</p>
    <p>ReRAM No High 25ns 300ns 1012</p>
    <p>NAND Flash No High 35us 350us 105</p>
  </div>
  <div class="page">
    <p>Hybrid Memory (DRAM+NVM)</p>
    <p>DRAMvolatile, low latency, low capacity  NVMnon-volatile, high latency, high capacity  Hybrid DRAM and NVM memory is a promising solution.</p>
    <p>Example:The machine</p>
  </div>
  <div class="page">
    <p>Key-Value Store</p>
    <p>Key-Value Store Systems (KV Store) have become an storage infrastructureof datacenters  Google LevelDB, Facebook RocksDB  Facebook, Twitter,Amazon et al. Memcached cluster</p>
    <p>Local file systemand distributed file system use KV store to store metadata  Local file systemTableFS[Ren+,ATC2013],BetrFS[Jannen+,FAST2015]</p>
    <p>Distributed file systemCephFS[Weil+,OSDI2006]HDFS[HDFS summit, 2015]</p>
    <p>Relational databases use KV as the storage engine  Facebook has replaced the InnoDB with MyRocks (KV store) in MySQL</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rich KV operations  Put/Get/Delete/Update  Range Scan/Query(Scan)</p>
    <p>SCAN PUT, GET, UPDATE</p>
    <p>Distribution of file system operations[Xiao+, SoCC2015]</p>
    <p>Neither hash nor sorted indexingcan efficiently support different KV operations.</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Echo [Bailey+, INFLOW2013]  Hybrid memory,Hash index</p>
    <p>NVStore [Yang+, FAST2015]  NVM, Optimized B+-Tree index:</p>
    <p>unsorted leaf nodes</p>
    <p>FPTree [Oukid+, SIGMOD2016]  Hybrid memory,Optimized B+-Tree index:</p>
    <p>Unsorted leaf nodes  Bitmap and fingerprints</p>
    <p>All these NVM-based systems usea single index.</p>
  </div>
  <div class="page">
    <p>Hybrid index Key-Value Store (HiKV)  Key idea of HiKV:</p>
    <p>Hybrid index: Hash and B+-Tree</p>
    <p>Challenges of hybrid index:  LatencyHow to reduce the latency of Put/Update/Delete  ConcurrencyHow to control the concurrency of hybrid index  ConsistencyHow to guarantee crash consistency with low performance overhead</p>
    <p>B+-TreeHash</p>
    <p>KV Data</p>
    <p>Get Scan Put/Update/ Delete</p>
    <p>Put/Update/ Delete</p>
  </div>
  <div class="page">
    <p>HiKV overview  Techniques</p>
    <p>Asynchronous index updating  Differential concurrency control  Write-ordered consistency</p>
    <p>Global B+-Tree (HTM)</p>
    <p>DRAM Hash index</p>
    <p>Key-value items</p>
    <p>Hash index</p>
    <p>Key-value items</p>
    <p>Hash index</p>
    <p>Key-value items</p>
    <p>NVM</p>
    <p>Consistency notguaranteed Write-ordered Consistency</p>
    <p>Async</p>
  </div>
  <div class="page">
    <p>Asynchronous indexupdating  Index Placement</p>
    <p>Placing hash in slow NVM and B+-Tree in fast DRAM  Index Updating</p>
    <p>Updating kv_item and hash index synchronously  Updating B+-Tree asynchronously in the backend</p>
    <p>threadMthread0  Backend threads</p>
    <p>threadNthread0  Serving threads</p>
    <p>Threadpool</p>
    <p>Hash index</p>
    <p>Key-value items</p>
    <p>B+-Tree index</p>
    <p>async</p>
    <p>updating queue</p>
    <p>step1</p>
    <p>step2</p>
    <p>Scan</p>
    <p>DRAM NVM</p>
    <p>step3</p>
    <p>Put/Get/Update/Delete</p>
  </div>
  <div class="page">
    <p>Differential concurrencycontrol  Hash index and KV items</p>
    <p>Partitioning, fine-grained lock in partition  Global B+-Tree index</p>
    <p>Hardware Transactional Memory(HTM)</p>
    <p>Global B+-Tree (HTM)</p>
    <p>DRAM Hash index</p>
    <p>Key-value items Partition 0 (lock)</p>
    <p>Hash index</p>
    <p>Key-value items Partition 1 (lock)</p>
    <p>Hash index</p>
    <p>Key-value items Partition N (lock)</p>
    <p>NVM</p>
  </div>
  <div class="page">
    <p>Dynamic threads adaption</p>
    <p>Challenge  Performance degradation in multithreaded execution</p>
    <p>Solution  Sample # of KV ops and their latencies  Dynamically adjust # of serving threads (Nsthd) and backend threads (Nbthd)</p>
    <p>Serving threads</p>
    <p>Backend threads</p>
    <p>queue Put/Update/Delete</p>
    <p>Filling rate Processing rate</p>
  </div>
  <div class="page">
    <p>Write-ordered consistency</p>
    <p>Does not guarantee consistency of B+-Tree index to reduce NVM write.</p>
    <p>Write-ordered consistency  First, update a kv item out-of-place  Then, update the index entry atomically</p>
    <p>kv_item</p>
    <p>key_ signature kv_item_pos</p>
    <p>Key-Value items</p>
  </div>
  <div class="page">
    <p>Evaluation methodology  Platform</p>
    <p>ServerIntel Xeon E5-2620 v4  Emulating NVM using DRAM by adding write latency in software (600ns)</p>
    <p>Workloads  Micro-benchmarks: Put/Get/Update/Delete/Scan  YCSB[Cooper+,SOCC10]  16B key, 256B value, 50M key-value items</p>
    <p>Compared systems  NVStore[Yang+,FAST15]  FPTree[Oukid+,SIGMOD16]  FPTree-C: using DRAM as Cache</p>
  </div>
  <div class="page">
    <p>Get Put Update Delete Scan</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>la te</p>
    <p>nc y</p>
    <p>NVStore FPTree FPTree_C HiKV</p>
    <p>Single-threaded performance</p>
    <p>Latency reduction</p>
  </div>
  <div class="page">
    <p>Single-threaded performance</p>
    <p>Throughput improvement</p>
    <p>For Get, HiKVcan improve throughput by 5.0x and 6.4x than NVStore and FPTree.</p>
    <p>For Delete,HiKV is10.0% lower than FPTree due to one serving thread.</p>
    <p>Get Put Update Delete Scan</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>th ro</p>
    <p>ug hp</p>
    <p>ut</p>
    <p>NVStore FPTree FPTree_C HiKV</p>
  </div>
  <div class="page">
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t ( M</p>
    <p>o ps</p>
    <p>/s )</p>
    <p>Number of threads</p>
    <p>NVStore FPTree FPTree_C HiKV</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t (</p>
    <p>M o</p>
    <p>ps /s</p>
    <p>)</p>
    <p>Number of threads</p>
    <p>NVStore FPTree FPTree_C HiKV</p>
    <p>Scalability</p>
    <p>Throughput of YCSB-A/B</p>
    <p>YCSB-A:50%Get-50%Update YCSB-B:95%Get-5%Update</p>
  </div>
  <div class="page">
    <p>DRAM Consumption</p>
    <p>For 256B value,HiKV-ratio is 15.8%,while FPTree-ratio is 0.4%.  Reducingthe DRAMconsumption is our future work.</p>
    <p>D R</p>
    <p>A M</p>
    <p>a nd</p>
    <p>N V</p>
    <p>M c</p>
    <p>on su</p>
    <p>m pt</p>
    <p>io n</p>
    <p>(G B</p>
    <p>)</p>
    <p>R at</p>
    <p>io o</p>
    <p>f D</p>
    <p>R A</p>
    <p>M to</p>
    <p>N V</p>
    <p>M</p>
    <p>Value size (B)</p>
    <p>NVStore-DRAM NVStore-NVM FPTree-DRAM</p>
    <p>FPTree-NVM HiKV-DRAM HiKV-NVM</p>
    <p>NVStore-ratio FPTree-ratio HiKV-ratio</p>
  </div>
  <div class="page">
    <p>Recovery time</p>
    <p>Recovering 50M key-values</p>
    <p>system Time (s)</p>
    <p>NVStore 11.0s</p>
    <p>FPTree 1.7s</p>
    <p>HiKV-1thread 88.2s</p>
    <p>HiKV-4thread 23.1s</p>
    <p>HiKV-16thread 6.3s</p>
    <p>HiKVtakes longerrecovery time than NVStore and FPTree due to unsorted hash index.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Hybrid DRAM and NVM memory is a promising solution for futurestorage system.</p>
    <p>A single index employed in existing NVM-based KV stores can not efficiently support all KV operations.</p>
    <p>This work proposes a hybrid index for hybrid memory systems to serve different KV operations.</p>
    <p>HiKV based on hybrid index outperformsthe start-of-art NVM-based KV stores.</p>
  </div>
  <div class="page">
    <p>Thanks for your listening! Q &amp; A</p>
  </div>
</Presentation>
