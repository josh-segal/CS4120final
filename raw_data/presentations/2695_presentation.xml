<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AdaptSize: Orchestrating the Hot Object Memory Cache in a CDN</p>
    <p>USENIX NSDI. Boston, March 28, 2017.</p>
    <p>Daniel S. Berger</p>
    <p>Mor Harchol-Balter</p>
    <p>Ramesh K. Sitaraman</p>
  </div>
  <div class="page">
    <p>CDN Caching Architecture</p>
    <p>Content providers</p>
    <p>Users</p>
    <p>CDN</p>
    <p>DC</p>
    <p>HOC</p>
  </div>
  <div class="page">
    <p>HOC performance metric</p>
    <p>object hit ratio = OHR =</p>
    <p>Optimizing CDN Caches Two caching levels:</p>
    <p>Disk Cache (DC)</p>
    <p>Hot Object Cache (HOC)</p>
    <p># reqs served</p>
    <p>by HOC</p>
    <p>total # reqs</p>
    <p>Goal: maximize OHR 100%</p>
    <p>DC</p>
    <p>HOC</p>
  </div>
  <div class="page">
    <p>Frequent decisions required</p>
    <p>What to admit What to evict</p>
    <p>Prior Approaches to Cache Management</p>
    <p>LRU</p>
    <p>mixtures of LRU/LFU</p>
    <p>concurrent LRU</p>
    <p>historicallyToday in practice e.g., Nginx, Varnish</p>
    <p>everything</p>
    <p>everything</p>
    <p>everything</p>
    <p>DC</p>
    <p>HOC</p>
    <p>a few GBs capacity</p>
  </div>
  <div class="page">
    <p>We Are Missing a Key Issue</p>
    <p>Not all objects are the same</p>
    <p>er s o</p>
    <p>f m ag</p>
    <p>nit ud</p>
    <p>e</p>
    <p>Should we admit every object? (no, we should favor small objects)</p>
    <p>A few key companies know this (but dont know how to it well)</p>
    <p>Academia has not been helpful (almost all theoretical work assumes equal-sized objects)</p>
  </div>
  <div class="page">
    <p>Whats Hard About Size-Aware Admission Fixed Size Threshold:</p>
    <p>admit if size &lt; Threshold c</p>
    <p>The best threshold changes with traffic mix</p>
    <p>How to pick c: pick c to maximize OHR</p>
    <p>Threshold c</p>
    <p>be st</p>
    <p>c a</p>
    <p>t 8 a</p>
    <p>m</p>
  </div>
  <div class="page">
    <p>Probabilistic admission:</p>
    <p>Can we avoid picking a threshold c</p>
    <p>Which curve makes big difference</p>
    <p>Unfortunately, many curves example: exp(c) family</p>
    <p>We need to adapt c</p>
    <p>high admission probability</p>
    <p>low admission probability</p>
  </div>
  <div class="page">
    <p>What to admit What to evict</p>
    <p>The AdaptSize Caching System</p>
    <p>concurrent LRUAdaptSize adaptive size-aware</p>
    <p>First system that continuously adapts the parameter of size-aware admission</p>
    <p>Incorporated into high-throughput production caching system (Varnish)</p>
    <p>adapt with traffic</p>
    <p>adapt with time</p>
    <p>Take traffic measurements</p>
    <p>Calculate the best c</p>
    <p>Enforce admission</p>
    <p>control</p>
    <p>Calculate the best c</p>
  </div>
  <div class="page">
    <p>How to Find Best c Within Each  Interval</p>
    <p>Local optima on OHR-vs-c curve</p>
    <p>Traditional approach</p>
    <p>Hill climbing</p>
    <p>time</p>
    <p>Enables speedy global optimization</p>
    <p>AdaptSize approach</p>
    <p>Markov model</p>
    <p>interval  interval  interval</p>
  </div>
  <div class="page">
    <p>How AdaptSize Gets the OHR-vs-c curve</p>
    <p>Markov chain</p>
    <p>Why hasnt this been done? Too slow: exponential state space</p>
    <p>track IN/OUT for each object IN OUT</p>
    <p>request request</p>
    <p>hit</p>
    <p>Algorithm For every  interval and for every value of c</p>
    <p>use Markov chain to solve for OHR(c)</p>
    <p>find c to maximize OHR</p>
    <p>miss</p>
    <p>New technique: approximation with linear state space</p>
  </div>
  <div class="page">
    <p>DC</p>
    <p>HOC</p>
    <p>Implementing AdaptSize</p>
    <p>Incorporated into Varnish highly concurrent HOC system, 40+ Gbit/s</p>
    <p>Take traffic measurements</p>
    <p>Calculate the best c</p>
    <p>Enforce admission</p>
    <p>control</p>
    <p>Adapt Size</p>
    <p>Goal: low overhead on request path</p>
  </div>
  <div class="page">
    <p>DC</p>
    <p>HOC</p>
    <p>Implementing AdaptSize</p>
    <p>Take traffic measurements</p>
    <p>Calculate the best c</p>
    <p>Enforce admission</p>
    <p>control</p>
    <p>Adapt Size</p>
    <p>producer/consumer + ring buffer</p>
    <p>Challenges</p>
    <p>AdaptSize:</p>
    <p>Incorporated into Varnish highly concurrent HOC system, 40+ Gbit/s</p>
    <p>Lock-free implementation</p>
  </div>
  <div class="page">
    <p>DC</p>
    <p>HOC</p>
    <p>Implementing AdaptSize</p>
    <p>Take traffic measurements</p>
    <p>Calculate the best c</p>
    <p>Enforce admission</p>
    <p>control</p>
    <p>Adapt Size</p>
    <p>Incorporated into Varnish highly concurrent HOC system, 40+ Gbit/s</p>
    <p>admission is really simpleAdaptSize:</p>
    <p>Enables lock free &amp; low overhead implementation</p>
    <p>given c, and the object size</p>
    <p>admit with P(c, size)</p>
  </div>
  <div class="page">
    <p>AdaptSize Evaluation Testbed</p>
    <p>Clients: replay Akamai requests trace 440 million / 152 TB total requests</p>
    <p>Origin: emulates 100s of web servers 55 million / 8.9 TB unique objects</p>
    <p>HOC systems: 1.2 GB 16 threads</p>
    <p>unmodified Varnish</p>
    <p>NGINX cache</p>
    <p>AdaptSize 40 GBit / 30ms RTT</p>
    <p>DC</p>
    <p>HOC Adapt</p>
    <p>Size</p>
    <p>Origin</p>
    <p>DC: unmodified Varnish 4x 1TB/ 7200 Rpm</p>
  </div>
  <div class="page">
    <p>Comparison to Production Systems</p>
    <p>+92%</p>
    <p>what to admit what to evict</p>
    <p>Varnish</p>
    <p>Nginx</p>
    <p>AdaptSize</p>
    <p>frequency filter LRU</p>
    <p>adaptive size-aware concurrent LRU</p>
    <p>everything concurrent LRU</p>
    <p>+48%</p>
  </div>
  <div class="page">
    <p>Comparison to Research-Based Systems</p>
    <p>manually tuned parameters</p>
    <p>manually tuned parameters</p>
    <p>manually tuned parameters +67%</p>
    <p>recency and frequency</p>
    <p>combinations</p>
  </div>
  <div class="page">
    <p>Robustness of AdaptSize Size-Aware OPT: offline parameter tuning</p>
    <p>AdaptSize: our Markovian tuning model</p>
    <p>HillClimb: local-search using shadow queues</p>
  </div>
  <div class="page">
    <p>Approach: size-based admission control</p>
    <p>Conclusion Goal: maximize OHR of the Hot Object Cache</p>
    <p>OHR=</p>
    <p># reqs served</p>
    <p>by HOC</p>
    <p>total # reqs</p>
  </div>
  <div class="page">
    <p>AdaptSize: adapts c via a Markov chain</p>
    <p>Approach: size-based admission control</p>
    <p>Conclusion Goal: maximize OHR of the Hot Object Cache</p>
    <p>OHR=</p>
    <p># reqs served</p>
    <p>by HOC</p>
    <p>total # reqs</p>
    <p>Key insight: need to adapt parameter c</p>
    <p>Result: 48-92% higher OHRs</p>
  </div>
  <div class="page">
    <p>Key insight: need to adapt parameter c</p>
    <p>Approach: size-based admission control</p>
    <p>Conclusion Goal: maximize OHR of the Hot Object Cache</p>
    <p>OHR=</p>
    <p># reqs served</p>
    <p>by HOC</p>
    <p>total # reqs</p>
    <p>Result: 48-92% higher OHRs</p>
    <p>In our paper  Throughput  Disk utilization  Byte hit ratio  Request latency</p>
    <p>/dasebe/AdaptSize</p>
    <p>AdaptSize: adapts c via a Markov chain</p>
  </div>
</Presentation>
