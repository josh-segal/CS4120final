<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ryan Newton, Sivan Toledo, Lewis Girod, Hari Balakrishnan, Samuel Madden</p>
  </div>
  <div class="page">
    <p>+</p>
    <p>Gothic, CO deployment August 2007  Voxnet Platform</p>
    <p>2x PXA255, 64MB RAM, 8GB Flash, 802.11B, Mica2 supervisor, Li+ battery, Charge controller  Sensors: 4x48KHz audio, 3-axis accel, GPS, Internal temp</p>
    <p>Example Application: Locating Marmots 2</p>
    <p>with Lewis Girod &amp; UCLA Blumstein Lab</p>
  </div>
  <div class="page">
    <p>+</p>
    <p>Animal localization</p>
    <p>We target sensing applications 3</p>
    <p>Pothole detection</p>
    <p>Computer Vision Pipeline</p>
    <p>leak detection</p>
    <p>EEG Seizure detection Speaker identification</p>
  </div>
  <div class="page">
    <p>+ Heterogeneous Platforms 4</p>
    <p>Low power sensors weak cpu/radio</p>
    <p>Smartphones medium cpu, strong radio</p>
    <p>Router weak cpu, strong radio</p>
    <p>Linux microserver</p>
    <p>JavaME Symbian</p>
    <p>Brew</p>
    <p>iPhone SDK</p>
    <p>Android</p>
    <p>TinyOS</p>
    <p>Java C++ Python</p>
    <p>Contiki</p>
    <p>Mix and Match!</p>
  </div>
  <div class="page">
    <p>+ Contributions 5</p>
    <p>Results</p>
    <p>Sensor source(s)</p>
    <p>Network Boundary</p>
  </div>
  <div class="page">
    <p>+ Contributions 6</p>
    <p>Sensor source(s)</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>+ Contributions 7</p>
    <p>Sensor source(s)</p>
    <p>Results</p>
    <p>Compile &amp; Load</p>
    <p>Compile &amp; Load</p>
    <p>Contributions</p>
    <p>First broadly portable sensenet programming</p>
    <p>Partitioning algorithm</p>
    <p>Optimize CPU/radio tradeoff even if</p>
    <p>app doesnt fit</p>
  </div>
  <div class="page">
    <p>+ Architecture 8</p>
    <p>Dataflow graph: operators containing code in portable intermediate language</p>
    <p>Partitioner</p>
    <p>ANSI C NesC/TinyOS JavaME</p>
    <p>Backend CodeGen</p>
    <p>Wishbone</p>
    <p>Sample data (for profiling)</p>
  </div>
  <div class="page">
    <p>+ Targeting TinyOS</p>
    <p>( , ) Execute!</p>
    <p>tstart tend time</p>
    <p>WaveScope: TinyOS:</p>
    <p>iterate x in S { f(); for(i=) {</p>
    <p>} g(); }</p>
    <p>16 bit microcontroller  10K RAM  No mem. protection  No threads</p>
    <p>Task granularity, messaging model</p>
    <p>f() for () {} g()</p>
    <p>Profile-directed Cooperative Multitasking:</p>
    <p>msg1 msg2 msg3</p>
    <p>Tasks</p>
    <p>Same goal as Protothreads</p>
  </div>
  <div class="page">
    <p>+ Profiling Streams and Operators</p>
    <p>Every sensor source is paired with sample data</p>
    <p>Includes timing info</p>
    <p>Measure rates, execution times</p>
    <p>Separately: profile network channel in deployment environment</p>
    <p>per-node send rate</p>
    <p>audioStream = IFPROF(readFile(foo8kHz, readSensor()))</p>
  </div>
  <div class="page">
    <p>+ State, Replication, and Pinning</p>
    <p>Pinning Constraints</p>
    <p>All stateless ops: unpinned</p>
    <p>Stateful replicated ops: unpinned</p>
    <p>Stateful global ops: pinned to server</p>
    <p>dont distribute!</p>
  </div>
  <div class="page">
    <p>+ Problem Scenario</p>
    <p>Embedded Node Server / Base Station</p>
    <p>Problem Inputs  profile data: net, cpu  network channel capacity</p>
    <p>Network Boundary</p>
    <p>CPU: 7</p>
    <p>NP-Hard</p>
  </div>
  <div class="page">
    <p>+ Partitioning Algorithm: Integer linear program formulation</p>
    <p>Introduce variables where 0=server, 1=sensor</p>
    <p>Introduce variables where 1 = cut edge</p>
    <p>Enforce resource bounds</p>
    <p>where</p>
    <p>where</p>
    <p>Minimize objective function</p>
    <p>fu  {0,1}</p>
    <p>guv  {0,1}</p>
    <p>cpu &lt; C</p>
    <p>cpu = fu(computeu) u</p>
    <p>net &lt; N</p>
    <p>net = guv (datauv ) uv  Edges</p>
    <p>min( cpu + net)</p>
    <p>Proxy for Energy</p>
    <p>Tricky bit (see paper):</p>
    <p>Relating f and g while staying linear</p>
  </div>
  <div class="page">
    <p>+ Evaluation: Two Applications</p>
    <p>EEG-based seizure onset detection</p>
    <p>Human speech detection/identification</p>
    <p>cepstrals</p>
    <p>hamming</p>
    <p>FFT</p>
    <p>filtbank</p>
    <p>logs</p>
    <p>prefilt</p>
    <p>preemph source</p>
  </div>
  <div class="page">
    <p>+ Observation: Relative cost varies by platform</p>
    <p>source</p>
    <p>preem ph</p>
    <p>ham m</p>
    <p>ing</p>
    <p>prefilt</p>
    <p>F F T</p>
    <p>filtB ank</p>
    <p>logs cepstrals</p>
    <p>F ra</p>
    <p>c ti o n o</p>
    <p>f to</p>
    <p>ta l C</p>
    <p>P U</p>
    <p>c o s t</p>
    <p>Operator</p>
    <p>Mote N80 PC</p>
    <p>Wishbones profiling visualizations (via graphviz) for four platforms</p>
  </div>
  <div class="page">
    <p>+ Visualizing Profile Data: Bandwidth vs. Compute</p>
    <p>source</p>
    <p>preem ph</p>
    <p>ham m</p>
    <p>ing</p>
    <p>prefilt</p>
    <p>FFT filtB</p>
    <p>ank</p>
    <p>logs cepstrals</p>
    <p>E x e</p>
    <p>c u</p>
    <p>ti o</p>
    <p>n t</p>
    <p>im e</p>
    <p>o f</p>
    <p>o p</p>
    <p>e ra</p>
    <p>to r</p>
    <p>(m ic</p>
    <p>ro s e</p>
    <p>c o</p>
    <p>n d</p>
    <p>s )</p>
    <p>B a</p>
    <p>n d</p>
    <p>w id</p>
    <p>th o</p>
    <p>f c u</p>
    <p>t (K</p>
    <p>B y te</p>
    <p>s /S</p>
    <p>e c )</p>
    <p>Cumulative CPU Cost Bandwidth (Right-hand scale)</p>
    <p>C um</p>
    <p>ul at</p>
    <p>iv e</p>
    <p>C P</p>
    <p>U c</p>
    <p>os t (</p>
    <p>re d)</p>
    <p>Operators:</p>
    <p>Reasonable cutpoints</p>
    <p>Processing reduces data quantity</p>
  </div>
  <div class="page">
    <p>+ Optimal partitions across platforms</p>
    <p>EEG Application (1 of 22 channels)</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>o p</p>
    <p>e ra</p>
    <p>to rs</p>
    <p>i n</p>
    <p>o p</p>
    <p>ti m</p>
    <p>a l n</p>
    <p>o d</p>
    <p>e p</p>
    <p>a rt</p>
    <p>it io</p>
    <p>n</p>
    <p>Input data rate as a multiple of 8 kHz</p>
    <p>TmoteSky/TinyOS NokiaN80/Java</p>
    <p>Each line represents 2100 partioner-runs</p>
  </div>
  <div class="page">
    <p>+ Speaker Detection: CPU performance across partitions/platforms</p>
    <p>Speaker Detection Application</p>
    <p>source/1 filtbank/7 logs/8 cepstral/9</p>
    <p>H a</p>
    <p>n d</p>
    <p>le d</p>
    <p>i n</p>
    <p>p u</p>
    <p>t ra</p>
    <p>te a</p>
    <p>s m</p>
    <p>u lt ip</p>
    <p>le o</p>
    <p>f 8</p>
    <p>k H</p>
    <p>z</p>
    <p>Cutpoint / number of operators in node partition</p>
    <p>TinyOS JavaME iPhone VoxNet</p>
    <p>Putting the pieces together:</p>
    <p>Cpu &amp; net bounds  optimal partition (if exists)</p>
    <p>Partition  est. throughput</p>
    <p>Binary search over rates (aka cpu bounds)</p>
    <p>max possible throughput</p>
    <p>example: picks cutpoint after filtBank for speaker detection</p>
  </div>
  <div class="page">
    <p>+ Groundtruth: Testbed deployment, 20 motes</p>
    <p>source hamming FFT filtBank logs cepstral</p>
    <p>D e</p>
    <p>te c ti o</p>
    <p>n s p</p>
    <p>e r</p>
    <p>s e</p>
    <p>c o</p>
    <p>n d</p>
    <p>Cutpoint</p>
    <p>How many detections can we actually get out of the network?</p>
    <p>source hamming FFT filtBank logs cepstral</p>
    <p>P e rc</p>
    <p>e n t</p>
    <p>Cutpoint</p>
    <p>percent input events received percent network msgs successful</p>
    <p>goodput (product)</p>
    <p>Compute/Bandwidth Tension (1 mote + basestation)</p>
    <p>Best empirical cutpoint</p>
  </div>
  <div class="page">
    <p>+ Related Work</p>
    <p>Graph partitioning for scientific codes  balanced, heuristic  e.g. Zoltan</p>
    <p>Task scheduling, commonly list scheduling</p>
    <p>Dynamic: Map-reduce, Condor, etc.</p>
    <p>Sensor network context: Tenet and Vango  Linear pipeline of operators  Manual partition  Run TinyOS code on both server and sensor</p>
  </div>
  <div class="page">
    <p>+ CONCLUSION</p>
  </div>
  <div class="page">
    <p>+ Partitioning: Algorithm Runtime</p>
    <p>Graph Preprocessing step  Merge vertices until all edge-weights are</p>
    <p>monotonically decreasing.  Eliminates the majority of edges</p>
    <p>Even without preprocessing,  8000 runs,  partitioning the 1400-node EEG dataflow graph,  with different CPU budget,  took under 10 seconds 95% of the time.  But there is a long tail luckily ILP solvers</p>
    <p>produce approximate solutions as well!</p>
    <p>Seconds</p>
    <p>Time to discover optimal Time to prove optimal</p>
  </div>
  <div class="page">
    <p>+ Motivating Example</p>
    <p>budget = 2 budget = 3 budget = 4</p>
    <p>bandwidth = 8 bandwidth = 6 bandwidth = 5</p>
    <p>Unstable optimal partition. Flips between horizontal and vertical partition.</p>
  </div>
</Presentation>
