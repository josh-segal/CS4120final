<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FlexTLS: A tool for testing TLS implementations</p>
    <p>Benjamin Beurdouche, Antoine Delignat-Lavaud, Nadim Kobeissi, Alfredo Pironti, Karthikeyan Bhargavan</p>
    <p>http://smacktls.com http://mitls.org</p>
  </div>
  <div class="page">
    <p>Protocols often negotiate crypto parameters (RSA, DHE, PSK)</p>
    <p>(Cert, Password) (AEAD, RC4-HMAC)</p>
    <p>How do we test such protocols systematically ?</p>
  </div>
  <div class="page">
    <p>OpenSSL, SecureTransport, NSS, SChannel, GnuTLS, JSSE, PolarSSL,  many bugs, attacks, patches every year</p>
  </div>
  <div class="page">
    <p>Client Server</p>
  </div>
  <div class="page">
    <p>RSA (EC)DHE</p>
    <p>[IEEE S&amp;P15]</p>
  </div>
  <div class="page">
    <p>RSA + DHE + ECDHE + Session Resumption + Client Authentication</p>
    <p>miTLS [IEEE S&amp;P13, CRYPTO14]</p>
    <p>http://mitls.org</p>
    <p>Are state machines of usual implementations correct? Can we test them? State machine</p>
    <p>for common Web configurations</p>
  </div>
  <div class="page">
    <p>FlexTLS: a tool for testing TLS libraries</p>
    <p>Fast implementation of TLS scenarios  Setup MITMs and manage easily concurrent connections  Fragmentation and arbitrary alterations on TLS messages</p>
    <p>at multiple levels of abstraction (Msgs, HS, Record, TCP)  State-machine aware fuzzing capabilities</p>
    <p>Focused on ease of use</p>
  </div>
  <div class="page">
    <p>Software architecture</p>
    <p>EncMAC</p>
    <p>TCP</p>
    <p>TLSFragment</p>
    <p>HandshakeMessages</p>
    <p>TLSConstants</p>
    <p>Handshake</p>
    <p>TLS Record</p>
    <p>Platform BytesCoreCrypto</p>
    <p>Extensions</p>
    <p>Alert</p>
    <p>miTLS SubsetFlexTLS</p>
    <p>Connection</p>
    <p>Constants</p>
    <p>Base</p>
    <p>State</p>
    <p>Types Secrets</p>
    <p>Record</p>
    <p>Alert</p>
    <p>CCS</p>
    <p>AppData</p>
    <p>Handshake</p>
    <p>ClientHello</p>
    <p>CertificateVerify</p>
    <p>ServerHello</p>
    <p>Finished</p>
    <p>CertSig</p>
  </div>
  <div class="page">
    <p>Why did we use miTLS ?</p>
    <p>( We wrote miTLS, so we know it well )  Functional language statically strongly typed (F#)  We can reuse some functions which have been formally</p>
    <p>verified (parsing, serializing)  No side-effects except for networking  Ease the setup of concurrent connections, synchronization</p>
    <p>or transfer of states and messages across connections</p>
  </div>
  <div class="page">
    <p>(TLS 1.3) (EarlyCCS)</p>
    <p>(SKIP &amp; FREAK)</p>
  </div>
  <div class="page">
    <p>Prototyping TLS 1.3</p>
    <p>Client</p>
    <p>C</p>
    <p>Server</p>
    <p>S</p>
    <p>ClientHello</p>
    <p>ClientKeyShare</p>
    <p>ServerHello</p>
    <p>ServerKeyShare</p>
    <p>EncryptedExtensions*</p>
    <p>Certificate</p>
    <p>CertificateRequest*</p>
    <p>CertificateVerify</p>
    <p>ServerFinished</p>
    <p>Certificate*</p>
    <p>CertificateVerify*</p>
    <p>ClientFinished</p>
    <p>DataData</p>
  </div>
  <div class="page">
    <p>Rapid prototyping of TLS scenarios</p>
    <p>What is the development cost of scenarios in FlexTLS ?  Full handshakes for RSA and (EC)DHE are written in seconds  Most complex scenarios are written in a few hours  Focused on ease of use (inference of defaults)</p>
  </div>
  <div class="page">
    <p>Implementing CVE-2014-0224 [KIKUCHI]</p>
    <p>Client</p>
    <p>C</p>
    <p>Attacker</p>
    <p>M</p>
    <p>Server</p>
    <p>S</p>
    <p>ClientHello</p>
    <p>ServerHello</p>
    <p>CCS</p>
    <p>CCS</p>
    <p>Secrets: msweak, keysweak</p>
    <p>Secrets: msweak, keysweak</p>
    <p>CertificateCertificate (SNMC=0)</p>
    <p>ServerHelloDoneServerHelloDone (SNMC=1)</p>
    <p>Secrets: msstrong, keysweak</p>
    <p>Secrets: msweak, keysweak</p>
    <p>ClientKeyExchange ClientKeyExchange (SNMS=0)</p>
    <p>Secrets: msstrong, keysweak</p>
    <p>CCS</p>
    <p>ClientFinished (SNCM=0) ClientFinished (SNMS=1)</p>
    <p>CCSCCS (SNMC=2)</p>
    <p>ServerFinished (SNSM=0)ServerFinished (SNMC=0)</p>
    <p>Data (SNCM=n) Data (SNMS=n+1)</p>
    <p>Data (SNSM=n)Data (SNMC=n)</p>
  </div>
  <div class="page">
    <p>We built a test framework</p>
    <p>State machine for common Web configurations</p>
  </div>
  <div class="page">
    <p>Unexpected state transitions in OpenSSL, NSS, Java, SecureTransport,   Required messages are</p>
    <p>allowed to be skipped  Unexpected messages are</p>
    <p>allowed to be received  CVEs for many libraries</p>
    <p>How come all these bugs?  In independent code bases,</p>
    <p>sitting in there for years  Are they exploitable?</p>
  </div>
  <div class="page">
    <p>Unexpected state transitions in OpenSSL, NSS, Java, SecureTransport,   Required messages are</p>
    <p>allowed to be skipped  Unexpected messages are</p>
    <p>allowed to be received  CVEs for many libraries</p>
    <p>How come all these bugs?  In independent code bases,</p>
    <p>sitting in there for years  Are they exploitable?</p>
  </div>
  <div class="page">
    <p>SKIP Network attacker impersonates api.paypal.com to a JSSE client 1. Send PayPals cert 2. SKIP ServerKeyExchange</p>
    <p>(bypass server signature) 3. SKIP ServerHelloDone 4. SKIP ServerCCS</p>
    <p>(bypass encryption) 5. Send ServerFinished</p>
    <p>using uninitialized MAC key (bypass handshake integrity)</p>
  </div>
  <div class="page">
    <p>A man-in-the-middle attack against :  servers that support RSA_EXPORT (512bit keys obsoleted in 2000)  clients that accept ServerKeyExchange in RSA (SmackTLS bug)</p>
    <p>Factoring in 7-10h</p>
  </div>
  <div class="page">
    <p>Online instance of FlexTLS  Publicly available web application for testing TLS clients and servers  Demonstrates FlexTLSs capability to underpin TLS testing suites.</p>
    <p>[ALPHA]</p>
  </div>
  <div class="page">
    <p>Prototyping of exploits using FlexTLS  First known complete implementation of the Triple Handshake  Replication of several known attacks like EarlyCCS, Fragmented CH.  Discovery and implementation of FREAK, SKIP</p>
    <p>Systematic testing of TLS implementation  State machine fuzzing automation and discovery of bugs  Regression testing of implementations and attack database</p>
    <p>[IEEE S&amp;P15]</p>
  </div>
  <div class="page">
    <p>Cryptographic protocol testing needs work  State-machine fuzzing should be done systematically  You can use FlexTLS to demonstrate new attacks (Logjam)  You can use FlexTLS to test new features in your code</p>
    <p>to ensure that it does not re-enable old attacks  There may be similar bugs in IPsec and SSH</p>
    <p>FlexTLS is available at http://smacktls.com (Future releases at http://mitls.org)</p>
  </div>
  <div class="page">
    <p>Thank you ! Wewould also like to aknowledge the INRIA Prosecco team</p>
    <p>and our colleagues working both on miTLS and F*</p>
  </div>
</Presentation>
