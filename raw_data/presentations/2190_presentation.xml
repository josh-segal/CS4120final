<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Enabling NVMe WRR support in Linux Block Layer</p>
    <p>USENIX HotStorage17</p>
    <p>Kanchan Joshi, Praval Choudhary, Kaushal Yadav Memory solutions, Samsung Semiconductor India R&amp;D</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>NVMe I/O queues</p>
    <p>Arbitration methods and WRR</p>
    <p>What it takes to build differentiated I/O service</p>
    <p>Affinity based method and its drawback</p>
    <p>Proposed method</p>
    <p>Results</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>NVMe I/O Queues HOST IO Queues NVMe SSD</p>
  </div>
  <div class="page">
    <p>NVMe I/O Queues HOST IO Queues NVMe SSD</p>
    <p>Per-CPU queue pair  Parallel I/O distribution  Fast core-local path</p>
  </div>
  <div class="page">
    <p>Arbitration Methods</p>
    <p>Arbitrate</p>
    <p>Round-Robin (RR)</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Arbitration Methods</p>
    <p>Arbitrate</p>
    <p>Weight 3</p>
    <p>Weight 2</p>
    <p>Weight 1</p>
    <p>Medium</p>
    <p>High</p>
    <p>Low</p>
    <p>Arbitrate</p>
    <p>Round-Robin (RR)</p>
    <p>Weighted Round-Robin with urgent priority (WRR)</p>
    <p>Controller</p>
    <p>Controller</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>How to make prioritization capability (WRR) benefits reach to Applications!</p>
  </div>
  <div class="page">
    <p>WRR Support Requirements</p>
    <p>I/O Prioritization</p>
    <p>Need to create prioritized I/O queues</p>
    <p>Retain NUMA-friendly path</p>
    <p>I/O classification</p>
    <p>How application can specify I/O service?</p>
    <p>Per-application or per I/O?</p>
  </div>
  <div class="page">
    <p>WRR Support Requirements</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>Non-prioritized queues</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>Prioritized queues</p>
    <p>SQ</p>
    <p>URGENT HIGH</p>
    <p>MEDIUM LOW</p>
    <p>I/O Prioritization</p>
    <p>Need to create prioritized I/O queues</p>
    <p>Retain NUMA-friendly path</p>
    <p>I/O classification</p>
    <p>How application can specify I/O service?</p>
    <p>Per-application or per I/O?</p>
  </div>
  <div class="page">
    <p>WRR Support Requirements</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>Non-prioritized queues</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>Prioritized queues</p>
    <p>SQ</p>
    <p>URGENT HIGH</p>
    <p>MEDIUM LOW</p>
    <p>APP1</p>
    <p>APP2</p>
    <p>APP3</p>
    <p>APP4</p>
    <p>IO classification method</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>I/O Prioritization</p>
    <p>Need to create prioritized I/O queues</p>
    <p>Retain NUMA-friendly path</p>
    <p>I/O classification</p>
    <p>How application can specify I/O service?</p>
    <p>Per-application or per I/O?</p>
  </div>
  <div class="page">
    <p>Affinity-based Method</p>
    <p>Prioritization method: Each core hosts one type of submission queue (1:1 mapping)  Classification method: Affine applications to particular core(s)</p>
    <p>CORE 3</p>
    <p>SQ CQ</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 2</p>
    <p>SQ CQ</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>CORE 1</p>
    <p>SQ CQ</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>CORE 0</p>
    <p>SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>NVMe Controller</p>
  </div>
  <div class="page">
    <p>Affinity-based Method</p>
    <p>Prioritization method: Each core hosts one type of submission queue (1:1 mapping)  Classification method: Affine applications to particular core(s)</p>
    <p>CORE 3</p>
    <p>SQ CQ</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 2</p>
    <p>SQ CQ</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>CORE 1</p>
    <p>SQ CQ</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>CORE 0</p>
    <p>SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>NVMe Controller</p>
    <p>Affine Affine Affine Affine</p>
    <p>URGENT HIGH MEDIUM LOW</p>
  </div>
  <div class="page">
    <p>Drawbacks</p>
    <p>All running applications must be affined (Arbitrary I/O performance otherwise)</p>
  </div>
  <div class="page">
    <p>Drawbacks</p>
    <p>All running applications must be affined (Arbitrary I/O performance otherwise)</p>
    <p>C1</p>
    <p>HIGH PRIORITY</p>
    <p>C3</p>
    <p>LOW PRIORITY</p>
    <p>C2</p>
    <p>MEDIUM PRIORITY</p>
    <p>Reduction in compute-ability</p>
    <p>Mandatory affinity leading to asymmetric core-utilization</p>
  </div>
  <div class="page">
    <p>Proposed Method: I/O Priority-based</p>
    <p>I/O Prioritization</p>
    <p>Create prioritized I/O queues on each core</p>
    <p>Retain NUMA-friendly path</p>
    <p>I/O Classification</p>
    <p>Link NVMe priorities to existing I/O priority classes</p>
    <p>Per-application</p>
  </div>
  <div class="page">
    <p>Proposed Method: I/O Priority-based</p>
    <p>I/O Prioritization</p>
    <p>Create prioritized I/O queues on each core</p>
    <p>Retain NUMA-friendly path</p>
    <p>I/O Classification</p>
    <p>Link NVMe priorities to existing I/O priority classes</p>
    <p>Per-application</p>
    <p>CORE 0</p>
    <p>SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>CORE 0</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
  </div>
  <div class="page">
    <p>Proposed Method: I/O Priority-based</p>
    <p>APP1</p>
    <p>APP2</p>
    <p>APP3</p>
    <p>APP4</p>
    <p>IO scheduling class</p>
    <p>NVMe queue priority</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>SQ</p>
    <p>I/O Prioritization</p>
    <p>Create prioritized I/O queues on each core</p>
    <p>Retain NUMA-friendly path</p>
    <p>I/O Classification</p>
    <p>Link NVMe priorities to existing I/O priority classes</p>
    <p>Per-application</p>
    <p>CORE 0</p>
    <p>SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>CORE 0</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
  </div>
  <div class="page">
    <p>I/O Priority-based Method</p>
    <p>Prioritization Method: Each core hosts four type of submission queues (4:1 mapping)  Classification Method: Reuse existing I/O scheduling classes</p>
    <p>CORE 0</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 1</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 2</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 3</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>NVMe Controller</p>
    <p>Compute-ability unaffected  Does not require modifying applications</p>
  </div>
  <div class="page">
    <p>I/O Priority-based Method</p>
    <p>Prioritization Method: Each core hosts four type of submission queues (4:1 mapping)  Classification Method: Reuse existing I/O scheduling classes</p>
    <p>CORE 0</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 1</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 2</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 3</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>NVMe Controller</p>
    <p>Real-time</p>
    <p>Compute-ability unaffected  Does not require modifying applications</p>
  </div>
  <div class="page">
    <p>I/O Priority-based Method</p>
    <p>Prioritization Method: Each core hosts four type of submission queues (4:1 mapping)  Classification Method: Reuse existing I/O scheduling classes</p>
    <p>CORE 0</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 1</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 2</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>CORE 3</p>
    <p>SQ SQ SQ SQ CQ</p>
    <p>U</p>
    <p>R</p>
    <p>G</p>
    <p>E</p>
    <p>N</p>
    <p>T</p>
    <p>H</p>
    <p>I</p>
    <p>G</p>
    <p>H</p>
    <p>M</p>
    <p>E</p>
    <p>D</p>
    <p>I</p>
    <p>U</p>
    <p>M</p>
    <p>L</p>
    <p>O</p>
    <p>W</p>
    <p>NVMe Controller</p>
    <p>Real-time Best-effort None Idle</p>
    <p>Compute-ability unaffected  Does not require modifying applications</p>
  </div>
  <div class="page">
    <p>Modified NVMe Stack (4.10 Kernel)</p>
    <p>VFS/Page cache</p>
    <p>Single-queue Multi-queue</p>
    <p>deadline</p>
    <p>CFQ</p>
    <p>NVMe driver (Modified)</p>
    <p>SATA driver</p>
    <p>Block Layer</p>
    <p>Specify io-priority class value while running (ionice)</p>
    <p>This is stored in io_context inside task_struct</p>
    <p>Obtain io-class value from io_context (or from request)</p>
    <p>Map io-class to queue-priority value and place command in corresponding SQ</p>
    <p>Real-time Urgent</p>
    <p>Best-effort</p>
    <p>None</p>
    <p>Idle</p>
    <p>High</p>
    <p>Medium</p>
    <p>Low</p>
  </div>
  <div class="page">
    <p>Ionice example on NVMe</p>
    <p>Best-effort</p>
    <p>High</p>
    <p>Idle</p>
    <p>Low</p>
    <p>None</p>
    <p>Medium</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Linux 4.10 Kernel (Modified NVMe Driver)</p>
    <p>Dell R720 server  32 CPUs (2 NUMA nodes)  32 GB RAM</p>
    <p>Samsung PM1725a SSD (With WRR arbitration)</p>
  </div>
  <div class="page">
    <p>Result #1</p>
    <p>IOPS distribution among 3 applications</p>
    <p>Application configuration  4 FIO jobs  QD 64  4K record</p>
  </div>
  <div class="page">
    <p>Result #1</p>
    <p>IOPS distribution among 3 applications</p>
    <p>Application configuration  4 FIO jobs  QD 64  4K record</p>
    <p>Weight-based</p>
    <p>distribution</p>
  </div>
  <div class="page">
    <p>Result #1</p>
    <p>IOPS distribution among 3 applications</p>
    <p>Application configuration  4 FIO jobs  QD 64  4K record</p>
    <p>Weight-based</p>
    <p>distribution</p>
  </div>
  <div class="page">
    <p>Result #2</p>
    <p>Bandwidth distribution among 3 applications</p>
    <p>Application configuration  4 FIO jobs  QD 64  128K record</p>
  </div>
  <div class="page">
    <p>Result #2</p>
    <p>Bandwidth distribution among 3 applications</p>
    <p>Application configuration  4 FIO jobs  QD 64  128K record</p>
    <p>Weight-based</p>
    <p>distribution</p>
  </div>
  <div class="page">
    <p>Result #3</p>
    <p>Foreground/Background IO control</p>
  </div>
  <div class="page">
    <p>Result #3</p>
    <p>Foreground/Background IO control</p>
    <p>Foreground Read IOPS</p>
    <p>WRR mode  Background process can be throttled  16:1 = Throttle BG process  128:1 = Further throttling. Retains</p>
    <p>foreground performance</p>
    <p>RR mode  Sharp decline in IOPS  Background process cannot be throttled</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Differentiated I/O service for applications can be built using WRR arbitration</p>
    <p>Scheduler-independent prioritization: Applications get the advantage of the prioritization natively present inside the device</p>
    <p>Proposed method does not reduce compute-ability of applications</p>
    <p>By not introducing new interface/API, need of rebuilding application is avoided</p>
    <p>Future work  Kernel patch  Sysfs support for run-time WRR configuration</p>
  </div>
  <div class="page">
    <p>Acknowledgements Rajesh Sahoo, Anshul Sharma, Sungyoung Ahn, Manoj Thapliyal, Vikram Singh, and Seunguk Shin</p>
  </div>
</Presentation>
