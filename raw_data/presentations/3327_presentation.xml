<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Secure, Precise, and Fast Floating-Point Operations</p>
    <p>on x86 Processors</p>
    <p>Ashay Rane, Calvin Lin, Mohit Tiwari</p>
    <p>The University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>Floating-Point Math is Complicated</p>
    <p>Specification itself is 70 pages long.</p>
    <p>Processor manuals devote 100s of pages to describe implementation.</p>
  </div>
  <div class="page">
    <p>Demands from FP Operations</p>
    <p>PerformanceCorrectness Security</p>
    <p>Checked using formal verifications</p>
    <p>tools like ACL2, HOL4.</p>
    <p>Ensured using wide vector units,</p>
    <p>GPUs, and FPGAs.</p>
    <p>No strong solutions to close side channels.</p>
  </div>
  <div class="page">
    <p>Impact of Weak Security</p>
    <p>Andrysco et al. [S&amp;P15] broke same-origin policy in Firefox, using timing side channel in floating-point operations.</p>
    <p>Victim IFrame Script from attacker.com</p>
  </div>
  <div class="page">
    <p>Impact of Weak Security</p>
    <p>Victim IFrame Pixels stolen by attacker.com</p>
    <p>Andrysco et al. [S&amp;P15] broke same-origin policy in Firefox, using timing side channel in floating-point operations.</p>
  </div>
  <div class="page">
    <p>Side Channel in FP Instructions Latency of Square Root Instruction</p>
    <p>for Different Types of Inputs C</p>
    <p>yc le</p>
    <p>s</p>
    <p>Normal NaN Zero Infinity Subnormal</p>
    <p>&gt; 20x slower</p>
    <p>Measured on an Intel Sandy Bridge processor. 6</p>
    <p>Adversarys model:</p>
    <p>Long latency implies Subnormal operand.</p>
    <p>e.g. add, sub, etc.</p>
  </div>
  <div class="page">
    <p>Side Channels in FP Functions float exp10f(float x) {</p>
    <p>}</p>
    <p>e.g. sin, cos, pow, etc.</p>
  </div>
  <div class="page">
    <p>Side Channels in FP Functions float exp10f(float x) {</p>
    <p>if ((int(n) &gt;&gt; 23 &amp; 0xff) &lt; 0x82) {</p>
    <p>if (y == 0.0f) { return p; }</p>
    <p>}</p>
    <p>}</p>
    <p>Language features that may leak secrets over side channels:</p>
    <p>- if statements</p>
  </div>
  <div class="page">
    <p>Side Channels in FP Functions float exp10f(float x) { float n, y = mf(x, &amp;n); if ((int(n) &gt;&gt; 23 &amp; 0xff) &lt; 0x82) {</p>
    <p>if (y == 0.0f) { return p; } return exp2f( ) * p; } return exp2( ); }</p>
    <p>Language features that may leak secrets over side channels:</p>
    <p>- if statements - function calls</p>
  </div>
  <div class="page">
    <p>Side Channels in FP Functions float exp10f(float x) { float n, y = mf(x, &amp;n); if ((int(n) &gt;&gt; 23 &amp; 0xff) &lt; 0x82) { float p = p10[(int) n + 7]; if (y == 0.0f) { return p; } return exp2f( ) * p; } return exp2( ); }</p>
    <p>Language features that may leak secrets over side channels:</p>
    <p>- if statements - function calls - array accesses</p>
  </div>
  <div class="page">
    <p>Side Channels in FP Functions float exp10f(float x) { float n, y = mf(x, &amp;n); if ((int(n) &gt;&gt; 23 &amp; 0xff) &lt; 0x82) { float p = p10[(int) n + 7]; if (y == 0.0f) { return p; } return exp2f(3.322f * y) * p; } return exp2(3.322 * x); }</p>
    <p>Language features that may leak secrets over side channels:</p>
    <p>- if statements - function calls - array accesses - floating-point instructions</p>
  </div>
  <div class="page">
    <p>Side Channels in FP Functions float exp10f(float x) { float n, y = mf(x, &amp;n); if ((int(n) &gt;&gt; 23 &amp; 0xff) &lt; 0x82) { float p = p10[(int) n + 7]; if (y == 0.0f) { return p; } return exp2f(3.322f * y) * p; } return exp2(3.322 * x); }</p>
    <p>Language features that may leak secrets over side channels:</p>
    <p>- if statements - function calls - array accesses - floating-point instructions - loops - pointer dereferences</p>
  </div>
  <div class="page">
    <p>Solution: Escort</p>
    <p>floating-point operations that close digital side channels</p>
    <p>Side channels that carry information over discrete bits.</p>
    <p>e.g. Time, Cache, Address Trace, Branch Predictor</p>
    <p>Compiler that generates</p>
    <p>NOT Power, EM Radiation, Heat, Sound.</p>
  </div>
  <div class="page">
    <p>Escort Compiler</p>
    <p>Math library source code</p>
    <p>Secure math library (shared object)</p>
    <p>For example: math functions in the Musl C library.</p>
    <p>Does not leak secrets over digital side channels.</p>
  </div>
  <div class="page">
    <p>Basic Operations:</p>
    <p>Non-Secure Execution</p>
  </div>
  <div class="page">
    <p>Spare SIMD lanes in SSE, SSE2 regs</p>
    <p>Subnormal operands</p>
    <p>Basic Operations: Secure Execution</p>
  </div>
  <div class="page">
    <p>FP Software Functions</p>
    <p>Floating-point software contains: 1. Forward branches (if statements) 2. Backward branches (loops) 3. Array Accesses 4. Function calls 5. Pointer dereferences 6. Floating-point instructions</p>
  </div>
  <div class="page">
    <p>Forward Branches</p>
    <p>if (secret) { x = 5; } else { x = 10; }</p>
    <p>secret: x = 5; secret: x = 10;</p>
    <p>The predicates guard assignment.</p>
  </div>
  <div class="page">
    <p>Predicated Execution</p>
    <p>predicated write operation</p>
    <p>a b</p>
    <p>cond</p>
    <p>output = a if cond=T b if cond=F</p>
    <p>mov a, output // Set destination test cond, cond // Check if non-zero cmovz b, output // Conditional update</p>
  </div>
  <div class="page">
    <p>Predicated Execution</p>
    <p>predicated write operation</p>
    <p>a b</p>
    <p>cond</p>
    <p>output = a if cond=T b if cond=F</p>
    <p>output = pred_write(cond, a, b)</p>
    <p>Escort uses pred_write to control side effects: memory writes, function calls, and exceptions.</p>
  </div>
  <div class="page">
    <p>Forward Branches</p>
    <p>secret: x = 5; secret: x = 10;  x = pred_write(secret, 5, x); x = pred_write( secret, 10, x);</p>
  </div>
  <div class="page">
    <p>Backward Branches (Loops)</p>
    <p>loop i :: 0 to n do_x; i = i + 1;</p>
    <p>Assume n' is secret.</p>
  </div>
  <div class="page">
    <p>Backward Branches (Loops)</p>
    <p>loop i :: 0 to C</p>
    <p>i = i + 1</p>
    <p>loop i :: 0 to n do_x; i = i + 1;</p>
    <p>Escorts transformation</p>
  </div>
  <div class="page">
    <p>Backward Branches (Loops)</p>
    <p>loop i :: 0 to C pred: do_x; pred: i = i + 1; i = i + 1</p>
    <p>loop i :: 0 to n do_x; i = i + 1;</p>
    <p>Escorts transformation</p>
    <p>Introduce predicate for the original loop body.</p>
  </div>
  <div class="page">
    <p>Backward Branches (Loops)</p>
    <p>pred = true;</p>
    <p>loop i :: 0 to C pred: do_x; pred: i = i + 1; i = i + 1</p>
    <p>loop i :: 0 to n do_x; i = i + 1;</p>
    <p>Escorts transformation</p>
    <p>Introduce predicate for the original loop body.</p>
  </div>
  <div class="page">
    <p>Backward Branches (Loops)</p>
    <p>pred = true;</p>
    <p>loop i :: 0 to C pred: do_x; pred: i = i + 1; i == n: pred = false; i = i + 1</p>
    <p>loop i :: 0 to n do_x; i = i + 1;</p>
    <p>Escorts transformation</p>
    <p>Turn predicate OFF to run dummy iterations.</p>
    <p>Introduce predicate for the original loop body.</p>
  </div>
  <div class="page">
    <p>Backward Branches (Loops)</p>
    <p>pred = true;</p>
    <p>loop i :: 0 to C pred: do_x; pred: i = i + 1;</p>
    <p>i == n: pred = false; i = i + 1</p>
    <p>Annotated by user, for example:</p>
    <p>__escort_loop_bounds(1024, 2048);</p>
    <p>OR</p>
    <p>Decided automatically using predictive mitigation [CCS11]: C = 1, 2, 4, 8, 16, 32,</p>
    <p>min max</p>
  </div>
  <div class="page">
    <p>Array Accesses</p>
    <p>result = table[secret]; addr := base(table) + secret read addr</p>
    <p>Adversary that can observe address, can also derive secret.</p>
    <p>loop i :: 0 to n i == secret: result = table[i];</p>
    <p>Escorts transformation</p>
    <p>Expensive to access entire array, but math libraries use few tables.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>PrecisionSecurity Performance</p>
    <p>- Instructions</p>
    <p>- Software functions</p>
    <p>- Firefox using Escort</p>
    <p>- Musl + Escort</p>
    <p>- Instructions</p>
    <p>- Software functions</p>
    <p>- Comparing output of Escort with output of Musl</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>PrecisionSecurity Performance</p>
    <p>- Instructions</p>
    <p>- Software functions</p>
    <p>- Firefox using Escort</p>
    <p>- Musl + Escort</p>
    <p>- Inference rules*</p>
    <p>- Instructions</p>
    <p>- Software functions</p>
    <p>- Escort in SPEC*</p>
    <p>- Escort in SVMlight*</p>
    <p>- Comparing output of Escort with output of Musl</p>
    <p>- Escort in MinPack*</p>
    <p>* Described in the paper.</p>
  </div>
  <div class="page">
    <p>Verification of Defense</p>
    <p>st de</p>
    <p>v as</p>
    <p>% o</p>
    <p>f m ea</p>
    <p>n</p>
    <p>Mul Div Square Root 2</p>
    <p>Non-Secure FTFP Escort</p>
    <p>X axis: Floating-point instructions.</p>
    <p>Y axis: Standard deviation of execution time as percentage of mean.</p>
    <p>Security Evaluation</p>
  </div>
  <div class="page">
    <p>st de</p>
    <p>v as</p>
    <p>% o</p>
    <p>f m ea</p>
    <p>n</p>
    <p>flo or ce</p>
    <p>il fab</p>
    <p>s log</p>
    <p>s tan ex p</p>
    <p>po w</p>
    <p>Non-Secure FTFP Escort</p>
    <p>X axis: Floating-point functions.</p>
    <p>Y axis: Standard deviation of execution time as percentage of mean.</p>
    <p>Verification of Defense Security</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Timing Side-Channel Defense</p>
    <p>Andrysco et al. [S&amp;P15] broke same-origin policy in Firefox.</p>
    <p>Contents of victim IFrame</p>
    <p>IFrame contents recovered using timing side channel</p>
    <p>We integrated Escort into Firefox, and re-ran the attack.</p>
    <p>Recovered IFrames in 3 independent experiments, after using Escort in Firefox.</p>
    <p>Security Evaluation</p>
  </div>
  <div class="page">
    <p>Address Trace Side-Channel Defense</p>
    <p>Proof-of-concept side-channel attack on the Musl C library.</p>
    <p>Attacker observes address trace when victim executes expf(), tries to guess input argument.</p>
    <p>Without Escort:</p>
    <p>Attacker correctly guesses input by observing address trace.</p>
    <p>With Escort:</p>
    <p>Attackers guess is reduced to random chance.</p>
    <p>Security Evaluation</p>
  </div>
  <div class="page">
    <p>Precision Evaluation</p>
    <p>Musl + GCC</p>
    <p>Musl + Escort</p>
    <p>FTFP</p>
    <p>output</p>
    <p>output</p>
    <p>output</p>
    <p>Identical outputs</p>
    <p>Outputs differ by</p>
    <p>~106 FP values</p>
    <p>} }</p>
    <p>Precision Evaluation</p>
  </div>
  <div class="page">
    <p>Performance Evaluation: Basic Operations</p>
    <p>Non-secure (min)</p>
    <p>FTFP</p>
    <p>Escort</p>
    <p>Non-secure (max)</p>
    <p>Mul Div Square root</p>
    <p>C yc</p>
    <p>le s</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Performance Evaluation: Higher-Level Operations</p>
    <p>C yc</p>
    <p>le s</p>
    <p>floor ceil fabs log10 log log2 sin cos tan exp pow</p>
    <p>FTFP Escort</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Related Work  FTFP (libFixedTimeFixedPoint):</p>
    <p>- Fixed-point library that closes side channels - Imprecise, manually written.</p>
    <p>Compiler transformations by Cleemput et al.: - Weak security, manually written.</p>
    <p>Raccoon: - Slow, does not close timing side channel in FP operations.</p>
  </div>
  <div class="page">
    <p>Theres More!  Handling pointers, exceptions.</p>
    <p>Optimization using SMT solver.</p>
    <p>Inference rules for static verification of Escort code.</p>
    <p>Precision evaluation using MinPack, a non-linear solver.</p>
    <p>Eliminating outliers in x86 performance tests.</p>
    <p>Comparison with our previous solution: Raccoon.</p>
    <p>End-to-end performance evaluation, on full application.</p>
    <p>Features</p>
    <p>Optimizations</p>
    <p>Security Evaluation Performance Evaluation</p>
    <p>Performance Evaluation</p>
    <p>Precision Evaluation</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Escort is the first solution that achieves security, precision, and speed.</p>
    <p>Escort compiler is closely aware of the microarchitecture, and includes microarchitecture-aware transformations.</p>
    <p>Future work: Explore hardware support for closing side channels.</p>
  </div>
</Presentation>
