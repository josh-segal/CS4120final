<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>COUNTERFOIL: Verifying Provenance of Integrated Circuits using Intrinsic</p>
    <p>Package Fingerprints and Inexpensive Cameras</p>
    <p>Siva Nishok Dhanuskodi Xiang Li</p>
    <p>Daniel E. Holcomb University of Massachusetts Amherst</p>
    <p>USENIX Security '20</p>
  </div>
  <div class="page">
    <p>Global semiconductor market is $500B/year Estimated $5B/year lost to counterfeiting1</p>
    <p>CounterFoil: A practical low-cost scheme to verify provenance</p>
  </div>
  <div class="page">
    <p>Manufacturer</p>
    <p>Counterfeiter Consumer</p>
    <p>Global Distribution Network</p>
  </div>
  <div class="page">
    <p>Best co. chips</p>
    <p>Model A</p>
    <p>manufacturer of:</p>
    <p>Manufacturer</p>
  </div>
  <div class="page">
    <p>Manufacturer</p>
    <p>Counterfeiter Consumer</p>
    <p>Global Distribution Network</p>
  </div>
  <div class="page">
    <p>Reliable Systems inc.</p>
    <p>chocolate computer AAA co. BEST co. Model A</p>
    <p>paint potato</p>
    <p>Buy chips Consumer</p>
  </div>
  <div class="page">
    <p>Manufacturer</p>
    <p>Counterfeiter Consumer</p>
    <p>Global Distribution Network</p>
  </div>
  <div class="page">
    <p>ALE 4Greedys Goods</p>
    <p>Counterfeiter</p>
  </div>
  <div class="page">
    <p>Manufacturer</p>
    <p>Counterfeiter Consumer Model A</p>
    <p>? ?</p>
    <p>Global Distribution Network</p>
  </div>
  <div class="page">
    <p>Consumer Model A ? ?</p>
  </div>
  <div class="page">
    <p>Countermeasures  Anomaly detection</p>
    <p>Look for something unusual  E.g. Visual inspection, classification,</p>
    <p>electronic signatures</p>
    <p>Authenticate provenance  Look for something you trust</p>
    <p>value prior to the computations in ANN. The ANN will then determine if the IC possesses a defect or not depending on the output of the ANN. We apply the same preprocessing methods that were employed during the training phase for the images. For the purpose of testing the techniques, we compare the output of the ANN during testing with the expected output and calculate the efficiency of the system. The flow of training and testing of the ANN is explained in Figures 7 and 8.</p>
    <p>The output classes considered for this experiment were 0 and 1. The output value 0 represents no defect condition, and the output value 1 indicates that the IC under consideration is defected. The output of the neural network may not be exactly equal to 1 or 0. Due to this, we assign the class based on how close the output is to any of the values. For example, if the output is 0.9, it is assigned class 1. If the output is 0.1, it is assigned class 0.</p>
    <p>Figure 8. Logical flowchart for artificial neural network testing.</p>
    <p>MATLAB platform. The training was done using two images with and without defects for 10 iterations each. Figure 9 shows the images used for training. The ANN was tested for detecting the counterfeit ICs.</p>
    <p>(a) (b)</p>
    <p>Figure 9. Images used for training a) IC without defect b) IC with scratches.</p>
    <p>The original image had more than 4 million pixels. This means we need 4 million input nodes, where we have only two output nodes. By employing just one hidden layer, we would lose information during the training process. This was resolved by reducing the size of the images to a resolution of 512512 during the preprocessing stage. The number of input nodes for the neural network was then reduced to 262,144.</p>
    <p>(a) (b)</p>
    <p>(c) (d)</p>
    <p>Figure 10. (a)(d) IC images with scratch defect used for testing.</p>
    <p>The number of hidden nodes were kept as a variable to be adjusted depending on the results. One hundred hidden nodes gave us good results. As we increase the number of nodes, the computational time rises. For our experiments, we set the number of hidden nodes as 100. The learning rate parameter was varied between 0.01 and 2. The learning rate of 0.1 gave us the minimum number of iterations required for training. The number of IC images used for testing were four,</p>
    <p>Input image for training</p>
    <p>Calculate hidden nodes using weight matrix</p>
    <p>Calculate output nodes</p>
    <p>Select output node with largest value as the class</p>
    <p>for the test image</p>
    <p>Defect class = 1?</p>
    <p>IC is defected</p>
    <p>Yes No</p>
    <p>IC is not defected</p>
    <p>[Asadizanjani et al., ISTFA 2016]</p>
  </div>
  <div class="page">
    <p>Retina [Hill, 1978]</p>
    <p>Gait Analysis [Nixon et al., 1996]</p>
    <p>Camera Sensors [Lukas et al., 2006]</p>
    <p>Ear shape [Choras et al., 2004]</p>
    <p>Blank Paper [Clarkson et al., 2009]</p>
    <p>Compact Discs [Hammouri et al., 2009]</p>
    <p>Fingerprints [Galton 1895]</p>
    <p>Iris [Daugman, 1993]</p>
    <p>Biometrics</p>
  </div>
  <div class="page">
    <p>Manufacturer</p>
    <p>Counterfeiter Consumer</p>
    <p>Package Surface Texture</p>
    <p>Transfer molding creates plastic package of ICs by forcing liquified molding compound (75% filler) into cavities around</p>
    <p>wire-bonded ICs and then allowing to cure and harden</p>
  </div>
  <div class="page">
    <p>Manufacturer</p>
    <p>Counterfeiter Consumer</p>
    <p>Overview of CounterFoil</p>
  </div>
  <div class="page">
    <p>Security and Attack Model</p>
  </div>
  <div class="page">
    <p>Security and Attack Model</p>
    <p>Unique fingerprints bound to specific chip instance</p>
    <p>Swapping label will fail</p>
    <p>Fingerprints difficult to forge</p>
    <p>Wont create fingerprints that match enrolled label</p>
    <p>Attacker cannot obtain kpr Unable to sign own</p>
    <p>package fingerprints</p>
  </div>
  <div class="page">
    <p>Why CounterFoil?  Fingerprints extracted from</p>
    <p>images of plastic IC packages</p>
    <p>Inexpensive cameras  Verification in 150ms  Practical scheme that works</p>
    <p>with existing IC distribution</p>
    <p>Does not require chain of custody</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>[1] https://github.com/danholcomb/supply-chain-security</p>
    <p>OpenCV implementation of Computer Vision algorithms</p>
    <p>Crypto++ for processing</p>
    <p>Code/images posted at [1]</p>
    <p>Cameras from two vendors</p>
    <p>Different instances for enrollment and verification</p>
    <p>Two chip models</p>
    <p>Some packaged with the same mold instance</p>
  </div>
  <div class="page">
    <p>Nave Fingerprinting  Use difference in pixel intensity () to quantify dissimilarity  Intolerant of misalignment in position, rotation and scale  Imperfect alignment even with fiducial marks  Brute-forcing pixel alignment impractically slow</p>
    <p>( )</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Fingerprinting using Computer Vision  Identifying features of an image compared</p>
    <p>rather than each pixel</p>
    <p>Features used for object detection &amp; matching, motion tracking, stitching panoramic views</p>
    <p>Feature extraction with four prominent algorithms</p>
    <p>SIFT, SURF, ORB, BRISK  Keypoints: Position and Descriptor  Matching keypoint is closest in feature space  Geometry estimation using RANSAC  Inlier only if match is nearest in feature space</p>
    <p>and fits geometry 4 inliers</p>
  </div>
  <div class="page">
    <p>CounterFoil vs Common Attacker</p>
  </div>
  <div class="page">
    <p>Sophisticated Attacker  Can a package be forged to match enrolled</p>
    <p>fingerprint?  Consider an attacker that exactly duplicates</p>
    <p>manufacturer mold  Model this attacker using purchased packages</p>
    <p>produced by same mold instance  Revealed by mold marking</p>
  </div>
  <div class="page">
    <p>Sophisticated Attacker  Can a package be forged to match enrolled</p>
    <p>fingerprint?  Consider an attacker that exactly duplicates</p>
    <p>manufacturer mold  Model this attacker using purchased packages</p>
    <p>produced by same mold instance  Revealed by mold marking</p>
    <p>Even perfect mold copy mostly unsuccessful  Filler particles  Mold buildup  Curing process</p>
    <p>In the worst of 4 datasets, need to allow 16% FP rate for 95% TP rate</p>
  </div>
  <div class="page">
    <p>Suitability for IC Distribution</p>
    <p>Cheap cameras  Marker costs are</p>
    <p>negligible  1MB storage per</p>
    <p>enrolled record $390 $40</p>
    <p>Authenticate in 150ms on Intel Xeon E5-2690  Could run real-time on pick-and-place (700ms)</p>
    <p>Efficient</p>
    <p>Inexpensive</p>
    <p>Wear-Tolerant</p>
  </div>
  <div class="page">
    <p>How Broadly Applicable?</p>
  </div>
  <div class="page">
    <p>Summary  Counterfeit ICs threaten critical systems and profits  CounterFoil verifies IC provenance by using fingerprints from</p>
    <p>surface texture of plastic packages</p>
    <p>Low cost, high performance and easy to integrate into IC distribution</p>
    <p>Thank you!</p>
    <p>https://github.com/danholcomb/supply-chain-security</p>
  </div>
</Presentation>
