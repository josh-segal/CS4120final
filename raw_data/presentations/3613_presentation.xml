<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Jake Christensen Rob Taglang Radu Sion Private Machines Inc</p>
    <p>Ionut Mugurel Anghel Mihai Chiroiu Univ. Politehnica Bucharest</p>
    <p>Supported by the Office of Naval Research</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Despite its privileged position, firmware is almost entirely opaque to the end-user</p>
    <p>The delivered blob is the result of a long chain (e.g. EDK II, American Megatrends, Dell)</p>
    <p>Code is of questionable quality  Lots of code reuse leads to easily replicable attacks</p>
    <p>Kovah &amp; Kallenberg 2015  Many (up to 69%) modules are unnecessary</p>
  </div>
  <div class="page">
    <p>Code Sample: Intel Galileo firmware SerialNumStrLen = StrLen(SerialNumberPtr); if (SerialNumStrLen &gt; SMBIOS_STRING_MAX_LENGTH) { return EFI_UNSUPPORTED; } .... SKUNumStrLen = StrLen(SKUNumberPtr); if (SerialNumStrLen &gt; SMBIOS_STRING_MAX_LENGTH) { return EFI_UNSUPPORTED; } .... FamilyStrLen = StrLen(FamilyPtr); if (SerialNumStrLen &gt; SMBIOS_STRING_MAX_LENGTH) { return EFI_UNSUPPORTED; }</p>
    <p>Analysis courtesy Nikolaj Schlej (https://www.viva64.com/en/b/0326/)</p>
  </div>
  <div class="page">
    <p>Introducing DECAF</p>
    <p>DECAF is an extensible platform for debloating commercial UEFI firmware</p>
    <p>Automatically prune up to 70% of an image!  No source code needed  Customizable functionality  DECAFed firmware running in production data centers since</p>
    <p>mid-2017</p>
  </div>
  <div class="page">
    <p>Benefits of pruning</p>
    <p>Remove potentially unknown vulnerabilities  Removed code is NOT unused/unreachable  Pruned firmware boots faster, and contains less</p>
    <p>potentially vulnerable code  Features can be removed on demand, while retaining</p>
    <p>other functionality</p>
    <p>Remove all other stuff you dont want or need, if the firmware can still boot your OS - its fine to have that components removed - Nikolaj Schlej, Zero nights, 2015.</p>
  </div>
  <div class="page">
    <p>Background: UEFI Firmware</p>
    <p>Splits platform initialization into four phases  Security (SEC)  Pre-EFI Initialization (PEI)  Driver Execution Environment (DXE)  Boot Device Selection (BDS)</p>
    <p>Basic building unit is a module (generally containing a PE32 executable)</p>
    <p>Modules communicate via EFI protocols</p>
  </div>
  <div class="page">
    <p>DECAF Pruning Overview</p>
    <p>Luigi workflow engine used for scheduling tasks (https://github.com/spotify/luigi)  Python layer based on UEFITool used for modifying images</p>
    <p>(https://github.com/LongSoft/UEFITool)  Python tools used to manage IPMI operations and collect info  Docker images loaded onto booted images to validate the flashed firmware  Custom dependency discovery modules written in C</p>
  </div>
  <div class="page">
    <p>Pruning Tasks and Phases</p>
    <p>Process can be parallelized on multiple boards  Pruning happens in two phases: merge and hill climbing</p>
    <p>Modules tried individually  Successfully removed groups are merged  Modules are then randomly selected and added to candidate</p>
    <p>solution</p>
  </div>
  <div class="page">
    <p>Dependency Discovery</p>
    <p>UEFI modules communicate with each other (using EFI protocols), creating dependencies</p>
    <p>Dependencies vary at runtime  Module removal order becomes important!  Solution: hijack the EFI protocol API and log active modules</p>
  </div>
  <div class="page">
    <p>Validation</p>
    <p>DECAF employs several utilities to validate the pruned images:</p>
    <p>dmidecode  lspci  /proc/acpi  CHIPSEC</p>
    <p>CHIPSEC scans for known firmware vulnerabilities - DECAF did not fix any CHIPSEC vulnerabilities</p>
  </div>
  <div class="page">
    <p>Results I</p>
    <p>Boot time reduction up to 24%  55 to 44 seconds for SuperMicro  34 to 27 seconds for Tyan</p>
    <p>DECAF can also selectively remove features  USB, network, VGA, etc</p>
    <p>Many common attacks on USB, network stack  BadUSB, Karsten Nohl and Jakob Lell, BlackHat 2014</p>
    <p>Example: 6/244 modules removed to disable USB on SuperMicro board</p>
  </div>
  <div class="page">
    <p>Results II</p>
    <p>DECAF can also selectively remove features  USB, network, VGA, etc</p>
    <p>Many common attacks on USB, network stack  BadUSB, Karsten Nohl and Jakob Lell, BlackHat 2014</p>
    <p>Example: 6/244 modules removed to disable USB on SuperMicro board</p>
  </div>
  <div class="page">
    <p>Results II Motherboard Original</p>
    <p>modules Remaining modules</p>
    <p>Reduction Original Gadgets</p>
    <p>Remaining Gadgets</p>
    <p>Reduction</p>
    <p>SM A1SAi-2550F (V519) 244 90 63.11% 37846 14240 62.37%</p>
    <p>Tyan 5533V101 194 60 69.07% 38776 20317 47.60%</p>
    <p>HP DL380 Gen10 643 323 49.77% 183677 105116 42.77%</p>
    <p>SM A1SAi-2550F (V827) 241 124 48.55% 37735 23055 38.90%</p>
    <p>SM A2SDi-12C-HLN4F 313 194 38.02% 43593 31003 28.88%</p>
    <p>SM A2SDi-H-TP4F 313 206 34.19% 44121 31024 29.68%</p>
    <p>SM X10SDV-8C-TLN4F 316 286 9.49% 51534 45724 11.27%</p>
    <p>*SM is short for SuperMicro</p>
  </div>
  <div class="page">
    <p>Thank you for your attention!</p>
    <p>For further information and questions:</p>
    <p>Ionut Mugurel Anghel: ionut.mugurel.anghel@gmail.com</p>
    <p>Jake Christensen: jake@privatemachines.com</p>
  </div>
</Presentation>
