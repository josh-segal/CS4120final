<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lazy Analytics: Let Other Queries Do the Work for You</p>
    <p>William Jannen, Michael Bender, Martin Farach-Colton, Rob Johnson, Bradley C. Kuszmaul, Donald E. Porter</p>
    <p>Stony Brook University, Rutgers University, Massachusetts Institute of Technology</p>
  </div>
  <div class="page">
    <p>Two Common Types of Queries</p>
    <p>Small queries that must be answered quickly  High priority, latency sensitive tasks  Fetching data for page loads</p>
    <p>Large analytic queries  Might take several hours in the best case  Can be delayed without harming their value to the business  Scanning customer databases to identify fraud patterns</p>
  </div>
  <div class="page">
    <p>Problem: Queries Compete for I/O</p>
    <p>Large queries delay latency-sensitive tasks  Does not make sense to run both types of queries on the same</p>
    <p>machine  Independent large queries do not benefit from shared working</p>
    <p>sets</p>
  </div>
  <div class="page">
    <p>Large Task</p>
    <p>Ideal System  Independently schedule sub-parts  of large operations</p>
    <p>Piggy-back I/O on other tasks</p>
  </div>
  <div class="page">
    <p>Ideal System  Independently schedule sub-parts  of large operations</p>
    <p>Piggy-back I/O on other tasks</p>
    <p>Schedule related tasks together</p>
  </div>
  <div class="page">
    <p>Ideal System  Independently schedule sub-parts  of large operations</p>
    <p>Piggy-back I/O on other tasks</p>
    <p>Schedule related tasks together</p>
  </div>
  <div class="page">
    <p>Ideal System</p>
    <p>Flexibility to schedule sub-parts of large tasks opportunistically  Maximizes benefits of caching</p>
    <p>Large tasks should piggy back on I/O of small tasks  Tasks should share working sets when tasks overlap</p>
    <p>Use MVCC to provide transactional semantics</p>
    <p>Insight: write-optimized dictionaries already implement this functionality for writes.</p>
  </div>
  <div class="page">
    <p>Derange Queries</p>
    <p>Give to queries the I/O savings that write optimization gives inserts  Piggyback I/O on other operations  Can execute lazily</p>
    <p>System has flexibility to defer tasks until convenient or required  Can schedule parts of queries independently  Still operate on a snapshot of the data consistent with query time</p>
  </div>
  <div class="page">
    <p>In Rest of This Talk</p>
    <p>The derange query model with an example  How to encode queries as inserts in a write-optimized dictionary  Some asymptotic performance analysis (DAM Model)  Particularly beneficial use cases</p>
  </div>
  <div class="page">
    <p>derange(R, Filter, Map, Fold, k)</p>
    <p>R - the input range  Filter - predicate to remove records that do not meet a criteria  Map - function to apply to each record  Fold  commutative, associative function to propagate results  k  (key, value) pair where results are accumulated</p>
    <p>Derange queries map a function over a range of records and lazily aggregate the results.</p>
  </div>
  <div class="page">
    <p>Example: Online Marketplace Item { productId : num warehouse : address quantity : num value : num price : num }</p>
    <p>Inventory Database</p>
  </div>
  <div class="page">
    <p>Example: Online Marketplace Item { productId : num warehouse : address quantity : num value : num price : num }</p>
    <p>Inventory Database</p>
    <p>What is the total value of all products stored in NY warehouses?</p>
    <p>R = (-,)  Filter = { return Item.warehouse != NY }  Map = { return Item.quantity * Item.value }  Fold = { totalValue += result }  k = InventoryAt||TIMESTAMP</p>
    <p>derange(R, Filter, Map, Fold, k)</p>
  </div>
  <div class="page">
    <p>In Rest of This Talk</p>
    <p>The derange query model with an example  How to encode queries as inserts in a write-optimized dictionary  Some asymptotic performance analysis (DAM Model)  Particularly beneficial use cases</p>
  </div>
  <div class="page">
    <p>Write-optimized Dictionaries</p>
    <p>High performance indexes by aggregating updates  Lookup performance is comparable to traditional data structures  Inserts are orders of magnitude faster</p>
    <p>Used by some of the fastest databases[1] and file systems[2] to speed up writes</p>
    <p>B-Tree is an ideal candidate for implementing derange queries</p>
    <p>[1] LevelDB, HBase, Cassandra, TokuDB, ...[2] TableFS, KVFS, TokuFS, BetrFS</p>
  </div>
  <div class="page">
    <p>B-Trees Are a Better Search Tree</p>
    <p>leaves</p>
    <p>. . .</p>
    <p>children</p>
    <p>. . . . . .</p>
    <p>. . .</p>
  </div>
  <div class="page">
    <p>B-Trees All data is inserted to the root nodes buffer.</p>
  </div>
  <div class="page">
    <p>B-Trees</p>
    <p>When a buffer fills, contents</p>
    <p>are flushed to children</p>
  </div>
  <div class="page">
    <p>B-Trees</p>
  </div>
  <div class="page">
    <p>B-Trees Flushes can cascade if not</p>
    <p>enough room in child nodes</p>
  </div>
  <div class="page">
    <p>B-Trees Height in the tree</p>
    <p>preserves the order of updates</p>
  </div>
  <div class="page">
    <p>B-Trees derange(R, Filter, Map, Fold, k)</p>
    <p>R = (-,)  Filter = return Item.warehouse == NY  Map = return Item.quantity * Item.value  Fold = totalValue += result  k = InventoryAt||TIMESTAMP</p>
  </div>
  <div class="page">
    <p>B-Trees During a flush, the message is split into subranges.</p>
  </div>
  <div class="page">
    <p>B-Trees Each subrange moves down the tree independently.</p>
  </div>
  <div class="page">
    <p>B-Trees</p>
  </div>
  <div class="page">
    <p>B-Trees</p>
    <p>Filter( )</p>
    <p>Map( )</p>
    <p>Fold( , k) The derange query finally</p>
    <p>executes when it reaches a leaf node</p>
  </div>
  <div class="page">
    <p>B-tree + Derange Query Recap</p>
    <p>Inserts are buffered in the root and flushed from node to node  Many application-level updates are aggregated into each I/O</p>
    <p>We can encode a derange query as an insert message  Treated like any other message within the tree  Evaluated when they reach a leaf node</p>
    <p>Derange queries split and travel down the tree independently  Results are lazily folded into the final result</p>
  </div>
  <div class="page">
    <p>In Rest of This Talk</p>
    <p>The derange query model with an example  How to encode queries as inserts in a write-optimized dictionary  Some asymptotic performance analysis (DAM Model)  Particularly beneficial use cases</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>...</p>
    <p>............</p>
    <p>Point Query:</p>
    <p>Range Query:</p>
    <p>???</p>
    <p>???</p>
    <p>Derange Query: ???</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>...</p>
    <p>... ...</p>
    <p>...</p>
    <p>...</p>
    <p>............</p>
    <p>Point Query:</p>
    <p>Range Query:</p>
    <p>Derange Query: ???</p>
  </div>
  <div class="page">
    <p>Asymptotic Analysis Recap</p>
    <p>The batching factor (B1-) divides the insert cost  By encoding queries as inserts, we bring these gains to queries  Analysis is specific (query is allowed to take arbitrarily long)</p>
    <p>Plan to generalize</p>
  </div>
  <div class="page">
    <p>In Rest of This Talk</p>
    <p>The derange query model with an example  How to encode queries as inserts in a write-optimized dictionary  Some asymptotic performance analysis (DAM Model)  Particularly beneficial use cases</p>
  </div>
  <div class="page">
    <p>Opportunity: Overlapping Ranges</p>
    <p>Queries with overlapping ranges travel down the tree together</p>
    <p>Partial Overlap Complete Overlap</p>
    <p>Derange queries are a natural way to schedule tasks by to working set.</p>
    <p>Beneficial scheduling is transparent to application - Removes complexity of query planning</p>
  </div>
  <div class="page">
    <p>Opportunity: Fine Granularity Reporting</p>
    <p>Efficient point-in-time computations  Even if work is deferred, computations are done on the view of the</p>
    <p>data at the time that the query was issued  If data hasnt changed, 1 I/O satisfies all queries</p>
    <p>Queries only see values below them in the tree.Derange queries can increase the</p>
    <p>granularity of reporting at low cost.</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>We can use write-optimization to reduce the cost of queries  Low-cost analytics without harming latency-sensitive operations  Asymptotic analysis for some cases (more work to be done)  Exciting opportunities for scheduling and workload</p>
    <p>management</p>
  </div>
</Presentation>
