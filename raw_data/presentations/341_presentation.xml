<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LYREBIRD David Cock</p>
    <p>davec@cse.unsw.edu.au LL y re</p>
    <p>b ir</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Program proof is important, but theres more to do.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 2</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Program proof is important, but theres more to do.</p>
    <p>Code</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 2</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Program proof is important, but theres more to do.</p>
    <p>CodeProof</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 2</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Program proof is important, but theres more to do.</p>
    <p>CodeProof</p>
    <p>Model</p>
    <p>Any statement P is True is incomplete:</p>
    <p>It must be read as , under Q - my model of the world.</p>
    <p>Goal: Development outcomes: program, proof and model.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 2</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Program proof is important, but theres more to do.</p>
    <p>Code</p>
    <p>seL4</p>
    <p>Proof</p>
    <p>ModelLL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Any statement P is True is incomplete:</p>
    <p>It must be read as , under Q - my model of the world.</p>
    <p>Goal: Development outcomes: program, proof and model.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 2</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Program proof is important, but theres more to do.</p>
    <p>Code</p>
    <p>seL4</p>
    <p>Proof</p>
    <p>ModelLL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Any statement P is True is incomplete:</p>
    <p>It must be read as , under Q - my model of the world.</p>
    <p>Goal: Development outcomes: program, proof and model.</p>
    <p>Our approach is a language framework: Lyrebird.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 2</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Code</p>
    <p>seL4</p>
    <p>Proof</p>
    <p>M o d e l</p>
    <p>L</p>
    <p>Lyrebird</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 3</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Abstract</p>
    <p>Haskell</p>
    <p>C</p>
    <p>Proof</p>
    <p>M o d e l</p>
    <p>L</p>
    <p>Lyrebird</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 4</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Abstract</p>
    <p>Haskell</p>
    <p>C</p>
    <p>M o d e l</p>
    <p>L</p>
    <p>Lyrebird</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 5</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>Abstract</p>
    <p>Haskell</p>
    <p>C</p>
    <p>M a c h in e M</p>
    <p>o n a d</p>
    <p>M S R</p>
    <p>?</p>
    <p>&quot;The World&quot;</p>
    <p>M o d e l</p>
    <p>L</p>
    <p>Lyrebird</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 6</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Formal Hardware Model</p>
    <p>Machine Monad</p>
    <p>MSR</p>
    <p>Machine Refinement</p>
    <p>Simulator</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 7</p>
  </div>
  <div class="page">
    <p>What is the Motivation?</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Simulator</p>
    <p>Formal Model</p>
    <p>Lyrebird model</p>
    <p>Lyrebird is a framework built around a modelling language.</p>
    <p>Tools are included to generate simulators and formal models.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 8</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Errata</p>
    <p>Testing</p>
    <p>The Model Should be Progressively Refined:</p>
    <p>Even the manufacturer doesnt have a complete model,</p>
    <p>they publish errata when they find mistakes.</p>
    <p>Goal: Updating the model should be easy.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 9</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>To a program, the world is the machine.</p>
    <p>Building machine models is hard, often boring work.</p>
    <p>Its easy to get started, and cover the part thats well behaved.</p>
    <p>Handling the rest, and getting it right takes a lot longer.</p>
    <p>Its also mind-numbingly, soul-destroyingly dull.</p>
    <p>So only model those parts that we actually need.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 10</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>What does this code do? What ends up in r1?</p>
    <p>address data instruction r1 r2 r3 @100 @108</p>
    <p>... ... ... ... 100 108 42 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 11</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>What does this code do? What ends up in r1?</p>
    <p>address data instruction r1 r2 r3 @100 @108</p>
    <p>... ... ... ... 100 108 42 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 11</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>What does this code do? What ends up in r1?</p>
    <p>address data instruction r1 r2 r3 @100 @108</p>
    <p>... ... ... ... 100 108 42 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 11</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>What does this code do? What ends up in r1?</p>
    <p>address data instruction r1 r2 r3 @100 @108</p>
    <p>... ... ... ... 100 108 42 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 11</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>What does this code do? What ends up in r1?</p>
    <p>address data instruction r1 r2 r3 @100 @108</p>
    <p>... ... ... ... 100 108 42 ...</p>
    <p>Most code is like the above, and its easy to understand;</p>
    <p>The challenge here is how to express that formally.</p>
    <p>Goal: Easy things should be straightforward.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 11</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>We should focus on the 10%, the hard parts.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 12</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>We should focus on the 10%, the hard parts.</p>
    <p>So what is a hard part?</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 12</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>We should focus on the 10%, the hard parts.</p>
    <p>So what is a hard part?</p>
    <p>Lets have another look at that example. . .</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 12</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>Wait a minute, what was that address? Didnt we just overwrite this instruction?</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>Wait a minute, what was that address? Didnt we just overwrite this instruction?</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Another look at the example:</p>
    <p>What value ends up in r1 now?</p>
    <p>r1 r2 r3 @1000 @1008</p>
    <p>... ... ... ... 1000 1008 e5921000 ...</p>
    <p>Wait a minute, what was that address? Didnt we just overwrite this instruction?</p>
    <p>Which of these is the right answer?</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 13</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>It depends . . . on the CPU, the cache, and the state.</p>
    <p>This isnt hypothetical;</p>
    <p>We need to write code to memory and then run it</p>
    <p>. . . and we need to make sure we do it right.</p>
    <p>In a formal model, this is a corner case and its abstracted.</p>
    <p>Sometimes, however, youve got to get your hands dirty.</p>
    <p>Goal: Hard things should be possible.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 14</p>
  </div>
  <div class="page">
    <p>How to Build Models</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Formal Hardware Model</p>
    <p>Simulator</p>
    <p>Invariants</p>
    <p>Inconsistencies</p>
    <p>Verification uncovers what the machine should do.</p>
    <p>These models are too abstract.</p>
    <p>Programming uncovers what the machine does.</p>
    <p>These models are too informal.</p>
    <p>We must combine this knowledge rigorously.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 15</p>
  </div>
  <div class="page">
    <p>How to Build Models</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Formal Hardware Model</p>
    <p>Simulator</p>
    <p>Invariants</p>
    <p>Inconsistencies</p>
    <p>Close the loop</p>
    <p>Iterative refinement</p>
    <p>Work Iteratively:</p>
    <p>Start with a simple model and only add details as required.</p>
    <p>When verification uncovers a requirement, update the model.</p>
    <p>When programming discovers a behaviour, update the model.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 16</p>
  </div>
  <div class="page">
    <p>How to Build Models</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>This workflow requires a common language.</p>
    <p>Our solution is Lyrebird</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 17</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>R e a d</p>
    <p>A simple model of a CPU connected to RAM.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 18</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Modules are written in Lyrebird.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 19</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>The cycle specifies asynchronous behaviour.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 20</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Modules export instructions.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 21</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>All behaviour is built from register transfers.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 22</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Modules are linked by interfaces.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 23</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Interfaces define transactions.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 24</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>module vsr;</p>
    <p>cycle {</p>
    <p>Memory.Read[[PC, Instr]];</p>
    <p>decode_execute VSR;</p>
    <p>}</p>
    <p>instruction ADD {</p>
    <p>execute { Ra &lt;- Rb + Rc; }</p>
    <p>}</p>
    <p>instruction LDR {</p>
    <p>execute { Memory.Read[[Rb,Ra]]; }</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Transactions access the datapath.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 25</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>MMU</p>
    <p>R e a d</p>
    <p>Interfaces and modules allow different implementations.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 26</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>MMU</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read(pa, data);</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read[[pa, data]];</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Lyrebird can also be used to model devices.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 27</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>MMU</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read(pa, data);</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read[[pa, data]];</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Register types have explicit width.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 28</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>MMU</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read(pa, data);</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read[[pa, data]];</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Type-checked macros minimize duplication.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 29</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Memory</p>
    <p>VSR</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>Memory</p>
    <p>CPU</p>
    <p>MMU</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read(pa, data);</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>module mmu; cycle {}</p>
    <p>macro Walk(int&lt;30&gt; va, int&lt;30&gt; &amp;pa) {</p>
    <p>register int&lt;32&gt; entry;</p>
    <p>vpn= va[29:14];</p>
    <p>Memory.Read[[vpn zext 30,entry]];</p>
    <p>pa&lt;- entry[29:14] ++ va[13:0];</p>
    <p>}</p>
    <p>transaction CPU.Read {</p>
    <p>register int&lt;30&gt; pa;</p>
    <p>%Walk(addr, pa);</p>
    <p>Memory.Read[[pa, data]];</p>
    <p>}</p>
    <p>Memory</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>CPU</p>
    <p>a d d r</p>
    <p>d a t a</p>
    <p>R e a d</p>
    <p>Transactions are implemented by modules.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 30</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>ARMv6 Model:</p>
    <p>We have an ARMv6 user-level integer instruction model.</p>
    <p>Floating-point and vector operations are excluded.</p>
    <p>The complete model is approximately 1600 lines.</p>
    <p>We used it to validate the seL4 Haskell prototype.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 31</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Simulator</p>
    <p>Simulation:</p>
    <p>Register transfer is easy to simulate.</p>
    <p>The simulator is portable and fast  10MIPS for ARMv6 user.</p>
    <p>The output is a single C module;</p>
    <p>It is easily incorporated into larger simulations.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 32</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>Formal Hardware Model</p>
    <p>Generated Models:</p>
    <p>An Isabelle model is generated by a tool.</p>
    <p>We co-generate code and proofs for kernel objects.</p>
    <p>We should be able to do the same for device structures.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 33</p>
  </div>
  <div class="page">
    <p>Lyrebird</p>
    <p>Abstract</p>
    <p>Haskell</p>
    <p>C</p>
    <p>M a c h in e M</p>
    <p>o n a d</p>
    <p>M S R</p>
    <p>S im</p>
    <p>u la to r</p>
    <p>U s e r C</p>
    <p>o d e</p>
    <p>LL y re</p>
    <p>b ir</p>
    <p>d</p>
    <p>ARMv6</p>
    <p>Rapid Modelling and Early Simulation:</p>
    <p>We ran real user code against the Haskell seL4 model.</p>
    <p>We found bugs in both the machine model and the kernel.</p>
    <p>We tested the model against the implementation;</p>
    <p>We fixed things before we tried to prove them.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 34</p>
  </div>
  <div class="page">
    <p>Project Status</p>
    <p>Goals:</p>
    <p>Development outcomes: program, proof and model.</p>
    <p>Updating the model should be easy.</p>
    <p>Easy things should be straightforward.</p>
    <p>Hard things should be possible.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 35</p>
  </div>
  <div class="page">
    <p>Project Status</p>
    <p>Goals:</p>
    <p>Development outcomes: program, proof and model.</p>
    <p>Yes - The model is generated automatically.</p>
    <p>Updating the model should be easy.</p>
    <p>Easy things should be straightforward.</p>
    <p>Hard things should be possible.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 35</p>
  </div>
  <div class="page">
    <p>Project Status</p>
    <p>Goals:</p>
    <p>Development outcomes: program, proof and model.</p>
    <p>Yes - The model is generated automatically.</p>
    <p>Updating the model should be easy.</p>
    <p>Yes - Recompile for a new formal model.</p>
    <p>Easy things should be straightforward.</p>
    <p>Hard things should be possible.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 35</p>
  </div>
  <div class="page">
    <p>Project Status</p>
    <p>Goals:</p>
    <p>Development outcomes: program, proof and model.</p>
    <p>Yes - The model is generated automatically.</p>
    <p>Updating the model should be easy.</p>
    <p>Yes - Recompile for a new formal model.</p>
    <p>Easy things should be straightforward.</p>
    <p>Yes - User-level ARMv6 in 1600 lines.</p>
    <p>Hard things should be possible.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 35</p>
  </div>
  <div class="page">
    <p>Project Status</p>
    <p>Goals:</p>
    <p>Development outcomes: program, proof and model.</p>
    <p>Yes - The model is generated automatically.</p>
    <p>Updating the model should be easy.</p>
    <p>Yes - Recompile for a new formal model.</p>
    <p>Easy things should be straightforward.</p>
    <p>Yes - User-level ARMv6 in 1600 lines.</p>
    <p>Hard things should be possible.</p>
    <p>Maybe - Work is ongoing.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 35</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Semantics:</p>
    <p>Model generation is not ideal, the generator is trusted.</p>
    <p>A statements meaning should be intrinsic.</p>
    <p>Building a semantics early will force discipline.</p>
    <p>Underspecification:</p>
    <p>Behaviour is often undefined or non-deterministic.</p>
    <p>Should be modelled by underspecification and assertions.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 36</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>The Abstract Model Stack:</p>
    <p>We should end up with a very detailed model of the machine.</p>
    <p>Wed rather reason about a simple, abstract machine.</p>
    <p>Well build the simpler model in layers.</p>
    <p>Validation:</p>
    <p>Any model must be extensively validated against hardware.</p>
    <p>It must also be consistent with existing models e.g. Fox et. al.</p>
    <p>Many models exist in different formalisms, this is a challenge.</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 37</p>
  </div>
  <div class="page">
    <p>QUESTIONS?</p>
    <p>NICTA Copyright c 2010 From Imagination to Impact 38</p>
  </div>
</Presentation>
