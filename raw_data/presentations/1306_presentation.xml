<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Write Endurance in Flash Drives:</p>
    <p>Measurements and Analysis</p>
    <p>Simona Boboila</p>
    <p>Peter Desnoyers</p>
    <p>Northeastern University</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Flash used for many years in consumer devices</p>
    <p>(photography, media players, portable drives)</p>
    <p>Parameters of flash not of interest to users (usually proprietary/undisclosed)</p>
    <p>But only recently flash used for storage in laptops and desktops</p>
    <p>Now we care!</p>
    <p>efficient access to data (in intensively used storage)</p>
    <p>consistent average performance (over large periods of time)</p>
    <p>Understand flash internals:</p>
    <p>harness its strengths</p>
    <p>address its limitations: write endurance, garbage collection</p>
  </div>
  <div class="page">
    <p>Our work</p>
    <p>To uncover internals of flash we investigated real USB flash drives:</p>
    <p>chip-level testing</p>
    <p>analysis and simulation</p>
    <p>reverse engineering</p>
    <p>timing analysis</p>
    <p>whole-device testing</p>
    <p>Why USB flash drives?</p>
    <p>Device disassembling, destructive testing, reverse engineering more difficult to do for more sophisticated devices</p>
    <p>In the paper</p>
    <p>Discussed</p>
    <p>next</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Device lifespan : predictions &amp; measurements</p>
    <p>Timing analysis : non-intrusive investigation</p>
    <p>Scheduling : storage optimization for flash devices</p>
  </div>
  <div class="page">
    <p>USB flash drive</p>
    <p>USB</p>
    <p>Controller</p>
    <p>(internal logic)</p>
    <p>Flash memory</p>
    <p>(chip-level parameters)</p>
    <p>Flash memory: chip-level parameters</p>
    <p>Controller: internal algorithms</p>
    <p>(implemented in the Flash Translation Layer, FTL)</p>
    <p>In the</p>
    <p>paper</p>
    <p>Discussed</p>
    <p>next</p>
  </div>
  <div class="page">
    <p>Flash Translation Layer (FTL)</p>
    <p>Logical</p>
    <p>blocks</p>
    <p>Physical</p>
    <p>blocks</p>
    <p>Free blocks</p>
    <p>Logical-to-physical</p>
    <p>block mappings</p>
    <p>Flash can not be overwritten (has to be erased before writing again)</p>
    <p>FTL uses a pool of free blocks to accommodate new writes before old data is erased</p>
    <p>Different granularity of program (page) vs. erase (block,  32 pages)</p>
    <p>Flash wears out in time (limited number of writes/erasures)</p>
    <p>FTL distributes the number of writes/erasures evenly among physical blocks</p>
  </div>
  <div class="page">
    <p>USB port USB port</p>
    <p>Output (physical level):</p>
    <p>addresses &amp;</p>
    <p>internal commands</p>
    <p>Linux host Windows host Logic analyzer</p>
    <p>Input (logical level):</p>
    <p>reads &amp; writes</p>
    <p>at specific addresses</p>
    <p>application</p>
    <p>(C language)</p>
    <p>capture digital signal:</p>
    <p>bus transactions</p>
    <p>Reverse engineering of FTL</p>
    <p>Input (logical level): reads/writes issued from a Linux USB host at specific logical addresses</p>
    <p>Output (physical level): internal commands and physical addresses captured with a IO-3200 logic analyzer</p>
  </div>
  <div class="page">
    <p>send address</p>
    <p>address</p>
    <p>(block number):</p>
    <p>Block 1002 was erased!</p>
    <p>send command</p>
    <p>command</p>
    <p>code:</p>
  </div>
  <div class="page">
    <p>Specifics of experiments</p>
    <p>Investigated USB drives:</p>
    <p>Generic  64MB, Hynix HY27US08121A</p>
    <p>House  2GB, Intel 29F16G08CANC1</p>
    <p>Memorex  512MB, Mini TravelDrive</p>
    <p>Writing pattern:</p>
    <p>Step 1. Write all logical blocks completely.</p>
    <p>Step 2. Overwrite some page.</p>
  </div>
  <div class="page">
    <p>Page update mechanism: Generic device</p>
    <p>Page 30Update request:</p>
    <p>Page 0, valid</p>
    <p>Page 1, valid</p>
    <p>Page 30, valid</p>
    <p>Page 31, valid</p>
    <p>Block A Block B</p>
    <p>Page 0, valid</p>
    <p>Page 1, valid</p>
    <p>Page 30, valid</p>
    <p>Page 31, valid</p>
    <p>Page 30, invalid</p>
    <p>Erased</p>
    <p>(garbage collection)</p>
    <p>Use a free block</p>
    <p>to write data</p>
  </div>
  <div class="page">
    <p>Successive updates: Generic device</p>
    <p>Page 30 Update</p>
    <p>request:</p>
    <p>Page 0, valid</p>
    <p>Page 1, valid</p>
    <p>Page 2, valid</p>
    <p>Page 31, valid</p>
    <p>Block A Block B</p>
    <p>Page 0, valid</p>
    <p>Page 1, valid</p>
    <p>Page 30, invalid</p>
    <p>Page 31, valid</p>
    <p>Page 30, invalid</p>
    <p>Erased</p>
    <p>(garbage collection)</p>
    <p>Page 30 Update</p>
    <p>request:</p>
    <p>Erased</p>
    <p>(garbage collection)</p>
    <p>For Generic, one page update triggers a block erasure!!  Only the list of free blocks is used: worn out faster!!</p>
    <p>Block C</p>
    <p>Page 0, valid</p>
    <p>Page 1, valid</p>
    <p>Page 30, valid</p>
    <p>Page 31, valid</p>
  </div>
  <div class="page">
    <p>Predicting lifespan: Generic device</p>
    <p>Internal algorithm:</p>
    <p>cycle through the list of free blocks</p>
    <p>erase one block at each page update</p>
    <p>Predicted lifespan =</p>
    <p>h = chip-level endurance</p>
    <p>m = number of free blocks</p>
    <p>Measured lifespan = 7.7 x 107</p>
    <p>Device lifespan  Chip-level endurance + FTL algorithm</p>
    <p>Can we predict the lifespan of the device?</p>
  </div>
  <div class="page">
    <p>More complex FTL: House device</p>
    <p>Update</p>
    <p>requests:</p>
    <p>Page 0, valid</p>
    <p>Page 62, valid</p>
    <p>Page 1, valid</p>
    <p>Page 63, valid</p>
    <p>Block A</p>
    <p>Block B</p>
    <p>Page 62, invalid</p>
    <p>Page 62</p>
    <p>Block C</p>
    <p>Page 62, valid</p>
    <p>Page 62, valid</p>
    <p>Page 62</p>
    <p>Page 62</p>
    <p>Merge all valid pages</p>
    <p>in a new block</p>
    <p>Use a free block to store</p>
    <p>new data</p>
    <p>Page 62, valid</p>
    <p>Page 0, valid</p>
    <p>Page 1, valid</p>
    <p>Less frequent garbage collection: Can accommodate several updates</p>
    <p>of a block into a single new block before erasing the old data</p>
    <p>Erased</p>
    <p>Erased</p>
    <p>Page 62, invalid</p>
    <p>Page 62, invalid</p>
    <p>Page 62, valid</p>
    <p>Page 63, valid</p>
  </div>
  <div class="page">
    <p>Predicting lifespan: House device</p>
    <p>Internal algorithm:</p>
    <p>cycle through the list of free blocks</p>
    <p>accommodate k pages per block, 1 k  block size</p>
    <p>erase 2 blocks</p>
    <p>Predicted lifespan:</p>
    <p>Uncertainty in tracing k</p>
    <p>Measured lifespan: 1.06 x 108</p>
    <p>Can we predict the lifespan of the device?</p>
    <p>(*) Refinement of the bound in the paper.</p>
    <p>(*) [ ] [ ]sizeblockkwith</p>
    <p>mhk _,1,106.9,105.1</p>
    <p>h = chip-level endurance,</p>
    <p>m = number of free blocks,</p>
    <p>k = number of pages written</p>
    <p>per block before erasing</p>
    <p>Device lifespan  Chip-level endurance + FTL algorithm</p>
  </div>
  <div class="page">
    <p>Block ABlock BBlock A Block BBlock A</p>
    <p>Even more complex FTL: Memorex device</p>
    <p>Static wear-leveling: periodically swaps static blocks with</p>
    <p>frequently updated blocks</p>
    <p>Block B</p>
    <p>Rarely changed (static)</p>
    <p>A added to free list List of free blocks</p>
    <p>Frequently changed (dynamic)</p>
  </div>
  <div class="page">
    <p>Predicting lifespan: Memorex device</p>
    <p>Internal algorithm:</p>
    <p>cycle through the entire zone</p>
    <p>accommodate up to a full block of pages before erasing</p>
    <p>Predicted lifespan =</p>
    <p>z = number of blocks per zone</p>
    <p>k = number of pages per block</p>
    <p>h = chip-level endurance</p>
    <p>Device did not break!</p>
    <p>Can we predict the lifespan of the device?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Device lifespan : predictions &amp; measurements</p>
    <p>Timing analysis : non-intrusive investigation</p>
    <p>Scheduling : storage optimization for flash devices</p>
  </div>
  <div class="page">
    <p>Timing analysis</p>
    <p>What can we figure out from timing analysis?</p>
    <p>Garbage collection frequency</p>
    <p>Writing patterns that trigger garbage collection</p>
    <p>If static wear-leveling is used, and how frequently</p>
    <p>If the device is approaching its end of life</p>
    <p>In the paper</p>
    <p>Discussed next</p>
  </div>
  <div class="page">
    <p>w  50,000 w  25,000 w = 106,612,284 0</p>
    <p>Write count</p>
    <p>T im</p>
    <p>e (</p>
    <p>m s )</p>
    <p>End-of-life signature: House device</p>
    <p>At 25,000 operations before the end, all operations slow to 40 ms  erasure at every write</p>
    <p>Is the device approaching its end of life?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Device lifespan : predictions &amp; measurements</p>
    <p>Timing analysis : non-intrusive investigation</p>
    <p>Scheduling : storage optimization for flash devices</p>
  </div>
  <div class="page">
    <p>Latency problem: flash versus disk</p>
    <p>Latency:  Disk: mechanical (seek delays)  Flash devices: lack of free blocks (garbage collection delays)</p>
    <p>Solution: find an optimal scheduling to minimize latency  Disk:</p>
    <p>Elevator algorithm: requests sorted by track number and serviced only in the current direction of the arm movement</p>
    <p>Flash devices:  Key observation:</p>
    <p>for writes issued to the same data block, FTL uses the same update block</p>
    <p>for writes issued to different data blocks, FTL uses different update blocks</p>
    <p>Solution:  Reorder data streams to service requests to the same data block</p>
    <p>consecutively</p>
    <p>Result:  Use the free space compactly =&gt; reduce erasure frequency</p>
    <p>No need to reschedule reads!!</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>xxxx</p>
    <p>xxx</p>
    <p>x xx xxx x xx x x x</p>
    <p>An example: scheduling vs. no scheduling</p>
    <p>Address rounded to: track number (disk); block number (flash)</p>
    <p>X = seek (disk); garbage collection (flash)</p>
    <p>R = read; W = write</p>
    <p>Flash: 2 free blocks</p>
    <p>Disk unscheduled:</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>Start track</p>
    <p>Disk scheduled:</p>
    <p>Flash unscheduled:</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>Flash scheduled:</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>W</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>Time</p>
    <p>Garbage collection overhead 4x smaller with scheduling vs. no scheduling!</p>
  </div>
  <div class="page">
    <p>Implications for storage systems</p>
    <p>Optimization of servicing requests:  Reduce garbage collection and improve performance</p>
    <p>Internals of flash devices require a new scheduling paradigm</p>
    <p>for flash</p>
    <p>We expect our results to apply to:</p>
    <p>Most removable devices (e.g. SD, CompactFlash, etc.) and lowend SSDs with little free space and RAM</p>
    <p>Example: JMicrons JMF602 flash controller, used for many lowend SSDs: 8-16 flash chips, 16K RAM, 7% free space</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Lifespan of flash devices is a function of chip-level</p>
    <p>endurance and internal algorithms</p>
    <p>Flash exhibits specific timing patterns towards end of life</p>
    <p>New scheduling algorithms designed specifically for flash-based storage are necessary to extract maximum</p>
    <p>performance</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Computer Science Department @ Northeastern University</p>
  </div>
</Presentation>
