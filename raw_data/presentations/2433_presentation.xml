<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NICTA Copyright 2013 From imagination to impact</p>
    <p>Supporting Undoability in</p>
    <p>System Operations</p>
    <p>I. Weber, H. Wada, A Fekete, A. Liu and L. Bass</p>
  </div>
  <div class="page">
    <p>System operation could go wrong</p>
    <p>Operation errors as the largest contributor to system failures [1]</p>
    <p>Configuration errors (28%) and human errors (13%) cause service disruptions [2]</p>
    <p>System operation plays a large role in overall system reliability</p>
    <p>[1] D. Oppenheimer, et. al., &quot;Why do internet services fail and what can be done about it?,&quot; USENIX, 2003 [2] L. Barroso, et. al., &quot;The Datacenter as a Computer,&quot; 2013</p>
  </div>
  <div class="page">
    <p>Cloud increases the problem</p>
    <p>More and more services operate on APIcontrolled infrastructures  e.g., IaaS cloud  Enabled frequent changes - increase chance of error</p>
    <p>Activities are performed without a safety net  Deleting a virtual disk results in a total loss  Stopping a VM changes relations to other resources.</p>
    <p>Not obvious how to fix it.</p>
  </div>
  <div class="page">
    <p>Project Goal and Scope</p>
    <p>Provide an &quot;undo button&quot; on Amazon Web Service  Facility to rollback changes is valuable support for</p>
    <p>dependability in various areas  Introduce &quot;atomicity&quot; in system operation</p>
    <p>Allow for restoring the state of cloud resources such as VM, disk volume, IP address and the structure</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Not possible to &quot;copy back snapshot&quot; directly  Can only manipulate through given API  Need to find a right sequence of operations</p>
    <p>&quot;Revert one-by-one&quot; may not work  Constraints among operations/resources  Error-prone operations require &quot;backup&quot; plans</p>
    <p>Completely non reversible operations  e.g., deleting resources</p>
    <p>Partly reversible operations  Not all resource properties can be restorable, e.g., id,</p>
    <p>creation timestamp, ...</p>
  </div>
  <div class="page">
    <p>Our Approach: Checkpoint</p>
    <p>Introduce &quot;checkpoint&quot; operation to record the state of resources</p>
    <p>No change in given API operations</p>
    <p>No change in &quot;provider&quot;</p>
  </div>
  <div class="page">
    <p>Our Approach: Rollback by AI Planning</p>
    <p>&quot;Rollback&quot; command triggers system restoration</p>
    <p>Leverage AI planning to find a sequence of operations to restore the state at the checkpoint</p>
  </div>
  <div class="page">
    <p>Why AI Planning?</p>
    <p>Traditional techniques to rollback long-running transactions do not apply or are sub-optimal:  There may be no direct reverse operation  More than one operations required to reverse one  Hand-coding for all possible cases is tedious</p>
    <p>AI Planning:  Given start state, goal state, set of actions, searches</p>
    <p>a solution in the state of possible plans  Our variant finds maximal contingency plans</p>
    <p>If one action fails, but the goal is still reachable, a backup plan will be executed</p>
  </div>
  <div class="page">
    <p>Domain Model: Supported Resources</p>
    <p>Resource Type in AWS API operations</p>
    <p>Virtual machine launch, terminate, start, stop, change size</p>
    <p>Disk volume create, delete, create-from-snapshot, attach, detach</p>
    <p>Disk snapshot create, delete</p>
    <p>Elastic IP address allocate, release, associate, disassociate</p>
    <p>Security group create, delete</p>
    <p>Autoscaling group create, delete, change size, change config, create config, delete config</p>
    <p>Tag create, delete</p>
  </div>
  <div class="page">
    <p>Our Approach: Wrap non reversible ops</p>
    <p>Replace completely non reversible operations with &quot;pseudo-do&quot; operation</p>
    <p>&quot;Commit&quot; command applies changes</p>
    <p>I. Weber, et. al., &quot;Automatic undo for cloud management via AI planning,&quot; HotDep 2012.</p>
  </div>
  <div class="page">
    <p>Partly reversible operations</p>
    <p>Many operations seem to be undoable - but not</p>
    <p>e.g., starting a VM is NOT reverse of stopping it  Properties cannot be restorable: resource id, dynamic</p>
    <p>IP address, or creation timestamp</p>
    <p>Restoring ALL properties is not feasible for many scenarios; however, it may not be required  e.g., undoing &quot;change the size of the web layer&quot; can</p>
    <p>safely ignore changes to the creation timestamps</p>
  </div>
  <div class="page">
    <p>Our Approach: Undoability Checking</p>
    <p>Facility to examine whether a collection of operations to execute are undoable</p>
    <p>List properties need to be restorable</p>
    <p>Check if operations to execute are undoable</p>
    <p>&quot;subset&quot; of the domain</p>
    <p>algorithm and proof at undo. research.nicta.com.au</p>
  </div>
  <div class="page">
    <p>Two Usage Models of Checker</p>
    <p>Offline: check the undoability of all operations to execute under any situations  Much stronger than needed since it checks situations</p>
    <p>that may not occur  e.g., delete a volume if resource X is in state Z</p>
    <p>Online: check the undoability of an operation before execution under the current situation  Check the undoability exactly as needed  Performance penalty do to state sensing</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Evaluate prototype  Undo engine released at undo.research.nicta.com.au</p>
    <p>Execution time to search undo plans  Use FF [3] with an extension for planning</p>
    <p>Execution time to check undoability of a domain (offline)</p>
    <p>Validation with real-world scenarios</p>
    <p>[3] J. Hoffmann, et. al, &quot;The FF planning system: Fast plan generation through heuristic search,&quot; J. of Artifical Intelligence Research, 14 (2001)</p>
  </div>
  <div class="page">
    <p>Evaluation: planning performance</p>
    <p>20 length is the maximum we needed for practical use cases</p>
    <p>Executing a plan with 10 steps takes ~145 sec</p>
    <p>on Intel i7 (3.4GHz) with 4GB RAM</p>
    <p>I. Weber, et. al., &quot;Automatic undo for cloud management via AI planning,&quot; HotDep 2012.</p>
  </div>
  <div class="page">
    <p>Evaluation: undoability check</p>
    <p>Checking a full domain (35 actions)  Projection: remove unrecoverable errors and few</p>
    <p>properties, and adding pseudo-delete and undelete  11.0 seconds to check 1330 planning problems  Result can be reusable unless the projection changes</p>
    <p>Examine our day-to-day manual tasks  e.g., adding a slave to a database server, expand the</p>
    <p>disk size, scaling up/down web layer, and upgrading app layer</p>
    <p>Confirmed the undoability given a domain projection</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Facility to offer &quot;undo&quot; and check undoability  Provide rollback on a set of API operations  Check if operations are undoable under in certain</p>
    <p>context (projected domain)  Prototype shows the execution time is marginal</p>
    <p>and the algorithm scales well  http://undo.research.nicta.com.au</p>
    <p>Future work  Capture internal resource state  Parallelizing plans to speed up execution</p>
  </div>
  <div class="page">
    <p>Appendix</p>
  </div>
  <div class="page">
    <p>Domain Model: Example</p>
    <p>Formally captures operations in domain  e.g., a set of operations that AWS supports</p>
    <p>Action to delete a disk volume in PDDL</p>
    <p>(:action Delete-Volume :parameters (?vol - tVolume)</p>
    <p>:precondition (and (volumeAvailable ?vol) (not (unrecoverableFailure ?vol)))</p>
    <p>:effect (oneof (and (deleted ?vol) (not (volumeAvailable ?vol))) (unrecoverableFailure ?vol)))</p>
    <p>Volume to be deleted must be available</p>
    <p>Volume will become deleted and unavailable, or failure</p>
  </div>
  <div class="page">
    <p>Domain Projection and Undoability Check</p>
    <p>Domain projection  Remove properties not required to be restorable  Add pseudo-delete for each delete operations</p>
    <p>Undoability checking algorithm</p>
    <p>pre-states is an infinite set. We obtain sufficient prestates from domain model</p>
    <p>foreach operation op to execute: foreach pre-state: find possible post-states by applying op: foreach post-state: let AI planner finds a plan from pre to post-state if no plan found op is not undoable</p>
  </div>
</Presentation>
